head     36.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


36.4
date     90.10.23.23.49.18;  author bryce;  state Exp;
branches ;
next     36.3;

36.3
date     90.06.21.16.16.34;  author bryce;  state Exp;
branches ;
next     36.0;

36.0
date     90.06.20.23.45.58;  author bryce;  state Exp;
branches ;
next     ;


desc
@Low level bit twiddling.
@


36.4
log
@Add a few more delays.  Owners of certain printers have reported failures
on certain machines.
@
text
@;
;Raw I/O routines for parallel version of kprintf, kputchar, etc.
;

;***** Include Files *****
	INCLUDE	'exec/types.i'
	INCLUDE 'hardware/cia.i'

;***** Imported Globals *****
	XREF	_ciaa
	XREF	_ciab
	XREF	_AbsExecBase

;***** Imported Functions *****
	XREF	_LVORawDoFmt

;***** Exported Functions *****
	XDEF	PRawPutChar
	XDEF	PRawMayGetChar
	XDEF	PRawDoFmt

;
; Put a character out to the parallel port.
; - expands lf to cr/lf.
;
_PRawPutChar:
	move.l	4(sp),d0	; get char to send
PRawPutChar:
	move.b	d0,-(sp)	; save char to send
	cmp.b	#10,d0		; is it a lf?
	bne.s	10$		; no, so just output it
	moveq	#13,d0		; expand lf to cr/lf
	bsr.s	20$		; output the cr
	tst.b	_ciab+ciapra
10$	move.b	(sp)+,d0	; get char to send
;
;	Put a character to the port.  Do some throw-away reads of the register
;	before checking the BUSY bit (gives printer over 1us to stabilize
;	BUSY).
;
;	The 8520 asserts PC three cycles after a write to port B.
;
20$	tst.b	_ciab+ciapra			;
	tst.b	_ciab+ciapra
30$	btst.b	#CIAB_PRTRBUSY,_ciab+ciapra	; check parallel port status
	bne.s	30$				; yes, so wait

	move.b	#$ff,_ciaa+ciaddrb	; set port to output
	move.b	d0,_ciaa+ciaprb		; write data
	tst.b	_ciab+ciapra
	tst.b	_ciab+ciapra
;
;	Post-data hold time is guaranteed by the throw-away reads above.
;
	rts

;
; Format a c type format string to the parallel port
;
PRawDoFmt:
	movem.l	a2/a6,-(sp);		; save a2 & a6
	lea	PRawPutChar(pc),a2	; get address of output routine in a2
	move.l	_AbsExecBase,a6		; get execbase in a6
	jsr	_LVORawDoFmt(a6)	; do the formatting
	movem.l	(sp)+,a2/a6		; restore a2 & a6
	rts

;
; Attempt to return a char from the parallel port.
;
_PRawMayGetChar:
PRawMayGetChar:
	moveq	#-1,d0		; assume no data
	rts

	END
@


36.3
log
@Add some lines of code so ddebug will start working on the A3000.
Previously no attempt was made to guarantee the data hold time after
writing a character.  The A3000 is fast enough that it can read BUSY
before ACK even goes out (screwing up printers).  We now wait for a bit,
and hope BUSY is in a sane state by then.
@
text
@d34 1
d37 2
a38 2
;	Put a character to the port.  Do one throw-away read of the register
;	before checking the BUSY bit (gives printer nearly 1us to stabilize
d44 1
d51 1
d53 1
a53 1
;	Post-data hold time is guaranteed by the throw-away read above.
@


36.0
log
@added to rcs
@
text
@d31 1
a31 1
	bne.s	10$			; no, so just output it
d33 1
a33 1
	bsr.s	20$			; output the cr
d35 10
a44 3
20$	move.b	_ciab+ciapra,d1	; get parallel port status
	btst	#CIAB_PRTRBUSY,d1	; is the port busy?
	bne		20$					; yes, so wait
d48 4
a51 1

d59 1
a59 1
	lea		PRawPutChar(pc),a2	; get address of output routine in a2
d61 2
a62 2
	jsr		_LVORawDoFmt(a6)	; do the formatting
	movem.l	(sp)+,a2/a6			; restore a2 & a6
@
