head     37.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


37.1
date     91.11.04.17.28.03;  author vertex;  state Exp;
branches ;
next     1.1;

1.1
date     91.11.04.17.01.07;  author peter;  state Exp;
branches ;
next     ;


desc
@Autodocs for clib amiga.lib functions.
@


37.1
log
@Cleaned things up.
Added warning to printf() autodoc about 140 char limit
Fixed incorrect RangeRand() autodoc wrt maxValue.
@
text
@
******* amiga.lib/AddTOF *****************************************************
*
*   NAME
*	AddTOF - add a task to the VBlank interrupt server chain.
*
*   SYNOPSIS
*	AddTOF(i,p,a);
*
*	VOID AddTOF(struct Isrvstr *, APTR, APTR);
*
*   FUNCTION
*	Adds a task to the vertical-blanking interval interrupt server
*	chain. This prevents C programmers from needing to write an
*	assembly language stub to do this function.
*
*   INPUTS
*	i - pointer to an initialized Isrvstr structure
*	p - pointer to the C-code routine that this server is to call each
*	    time TOF happens
*	a - pointer to the first longword in an array of longwords that
*	    is to be used as the arguments passed to your routine
*	    pointed to by p.
*
*   SEE ALSO
*	RemTOF(), <graphics/graphint.h>
*
******************************************************************************


******* amiga.lib/RemTOF *****************************************************
*
*   NAME
*	RemTOF - remove a task from the VBlank interrupt server chain.
*
*   SYNOPSIS
*	RemTOF(i);
*
*	VOID RemTOF(struct Isrvstr *);
*
*   FUNCTION
*	Removes a task from the vertical-blanking interval interrupt server
*	chain.
*
*   INPUTS
*	i - pointer to an Isrvstr structure
*
*   SEE ALSO
*	AddTOF(), <graphics/graphint.h>
*
******************************************************************************


******* amiga.lib/FastRand ***************************************************
*
*   NAME
*	FastRand - quickly generate a somewhat random integer
*
*   SYNOPSIS
*	number = FastRand(seed);
*
*	ULONG FastRand(ULONG);
*
*   FUNCTION
*	Seed value is taken from stack, shifted left one position,
*	exclusive-or'ed with hex value $1D872B41 and returned.
*
*   INPUTS
*	seed - a 32-bit integer
*
*   RESULT
*	number - new random seed, a 32-bit value
*
*   SEE ALSO
*	RangeRand()
*
******************************************************************************


******* amiga.lib/RangeRand **************************************************
*
*   NAME
*	RangeRand - generate a random number within a specific integer range
*
*   SYNOPSIS
*	number = RangeRand(maxValue);
*
*	UWORD RangeRand(UWORD);
*
*   FUNCTION
*	RangeRand() accepts a value from 0 to 65535, and returns a value
*	within that range.
*
*	maxValue is passed on stack as a 32-bit integer but used as though
*	it is only a 16-bit integer. Variable named RangeSeed is available
*	beginning with V33 that contains the global seed value passed from
*	call to call and thus can be changed in a program by declaring:
*
*	  extern ULONG RangeSeed;
*
*   INPUTS
*	maxValue - the returned random number will be in the range
*	           [0..maxValue-1]
*
*   RESULT
*	number - pseudo random number in the range of [0..maxValue-1].
*
*   SEE ALSO
*	FastRand()
*
******************************************************************************


******* amiga.lib/printf *****************************************************
*
*   NAME
*	printf - print a formatted output line to the standard output.
*
*   SYNOPSIS
*	printf(formatstring [,value [,values] ] );
*
*   FUNCTION
*	Format the output in accordance with specifications in the format
*	string.
*
*   INPUTS
*	formatString - a C-language-like NULL-terminated format string,
*		       with the following supported % options:
*
*	  %[flags][width][.limit][length]type
*
*	    $     - must follow the arg_pos value, if specified
*	  flags   - only one allowed. '-' specifies left justification.
*	  width   - field width. If the first character is a '0', the
*	            field is padded with leading 0s.
*	    .     - must precede the field width value, if specified
*	  limit   - maximum number of characters to output from a string.
*	            (only valid for %s or %b).
*	  length  - size of input data defaults to word (16-bit) for types c,
*		    d, u and x, 'l' changes this to long (32-bit).
*	  type    - supported types are:
*	                  b - BSTR, data is 32-bit BPTR to byte count followed
*	                      by a byte string. A NULL BPTR is treated as an
*			      empty string. (V36)
*	                  d - signed decimal
*			  u - unsigned decimal
*	                  x - hexadecimal with hex digits in uppercase
*			  X - hexadecimal with hex digits in lowercase
*	                  s - string, a 32-bit pointer to a NULL-terminated
*	                      byte string. A NULL pointer is treated
*	                      as an empty string.
*	                  c - character
*
*	value(s) - numeric variables or addresses of null-terminated strings
*	           to be added to the format information.
*
*   NOTE
*	The global "_stdout" must be defined, and contain a pointer to
*	a legal AmigaDOS file handle. Using the standard Amiga startup
*	module sets this up. In other cases you will need to define
*	stdout, and assign it to some reasonable value (like what the
*	dos.library/Output() call returns). This code would set it up:
*
*		ULONG stdout;
*		stdout=Output();
*
*   BUGS
*	This function will crash if the resulting stream after
*	parameter substitution is longer than 140 bytes.
*
******************************************************************************


******* amiga.lib/sprintf ****************************************************
*
*   NAME
*	sprintf - format a C-like string into a string buffer.
*
*   SYNOPSIS
*	sprintf(destination formatstring [,value [, values] ] );
*
*   FUNCTION
*	Performs string formatting identical to printf, but directs the output
*	into a specific destination in memory. This uses the ROM version
*	of printf (exec.library/RawDoFmt()), so it is very small.
*
*	Assembly programmers can call this by placing values on the
*	stack, followed by a pointer to the formatstring, followed
*	by a pointer to the destination string.
*
*   INPUTS
*	destination - the address of an area in memory into which the
*		      formatted output is to be placed.
*	formatstring - pointer to a null terminated string describing the
*	               desired output formatting (see printf() for a
*		       description of this string).
*	value(s) - numeric information to be formatted into the output
*		   stream.
*
*   SEE ALSO
*	 printf(), exec.library/RawDoFmt()
*
******************************************************************************


******* amiga.lib/stdio ******************************************************
*
*   NAMES
*	fclose	- close a file
*	fgetc	- get a character from a file
*	fprintf	- format data to file (see printf())
*	fputc	- put character to file
*	fputs	- write string to file
*	getchar	- get a character from stdin
*	printf	- put format data to stdout (see exec.library/RawDoFmt)
*	putchar	- put character to stdout
*	puts	- put string to stdout, followed by newline
*
*   FUNCTION
*	These functions work much like the standard C functions of the same
*	names. The file I/O functions all use non-buffered AmigaDOS
*	files, and must not be mixed with the file I/O of any C
*	compiler. The names of these functions match those found in many
*	standard C libraries, when a name conflict occurs, the function is
*	generally taken from the FIRST library that was specified on the
*	linker's command line.  Thus to use these functions, specify
*	the amiga.lib library first.
*
*	To get a suitable AmigaDOS FileHandle, the dos.library/Open() or
*	dos.library/Output() functions must be used.
*
*	All of the functions that write to stdout expect an appropriate
*	FileHandle to have been set up ahead of time. Depending on
*	your C compiler and options, this may have been done by the
*	startup code.  Or it can be done manually
*
*	From C:
*		extern ULONG stdout;
*		/* Remove the extern if startup code did not define stdout */
*		stdout=Output();
*
*	From assembly:
*		XDEF	_stdout
*		DC.L	_stdout	;<- Place result of dos.library/Output() here.
*
******************************************************************************

@


1.1
log
@Initial revision
@
text
@d1 5
a5 30
**
**      $Id: $
**
**	Documentation for amiga.lib functions in clib directory
**
**      (C) Copyright 1985-1991 Commodore-Amiga, Inc.
**          All Rights Reserved
**

******* amiga.lib/AddTOF ****************************************************
*
*   NAME
*       AddTOF - add a task to the TopOfFrame Interrupt server chain.
*
*   SYNOPSIS
*       AddTOF(i,p,a);
*	void AddTOF(struct Isrvstr *, APTR, APTR);
*
*   FUNCTION
*       Adds a task to the vertical-blanking interval interrupt server
*       chain.  This prevents C programmers from needing to write an
*       assembly language stub to do this function.
*
*   INPUTS
*       i - pointer to structure Isrvstr.
*       p - pointer to the C-code routine that this server is to call each
*           time TOF happens.
*       a - pointer to the first longword in an array of longwords that
*           is to be used as the arguments passed to your routine
*           pointed to by p.
d7 18
d26 1
a26 1
*       RemTOF, graphics/graphint.h
d28 2
a29 1
*****************************************************************************
d31 1
a31 1
******* amiga.lib/FastRand **************************************************
d34 1
a34 1
*       FastRand - quickly generate a somewhat random integer
d37 3
a39 2
*       number = FastRand(seed);
*	ULONG FastRand(ULONG);
d42 2
a43 3
*       C-implementation only.   Seed value is taken from stack, shifted
*       left one position, exclusive-or'ed with hex value $1D872B41 and
*       returned (D0).
d46 1
a46 4
*       seed - a 32-bit integer
*
*   RESULT
*       number - new random seed, a 32-bit value
d49 1
a49 1
*       RangeRand
d51 1
a51 1
*****************************************************************************
d53 2
a54 1
******* amiga.lib/printf ****************************************************
d57 1
a57 1
*	printf - print a formatted output line to the standard output.
d60 3
a62 1
*	printf( formatstring [,value [,values] ] );
d65 2
a66 2
*	Format the output in accordance with specifications in the format
*	string:
d69 4
a72 4
*	formatstring - a pointer to a null-terminated string describing the
*                      output data, and locations for parameter substitutions.
*	value(s) - numeric variables or addresses of null-terminated strings
*                  to be added to the format information.
d74 2
a75 2
*	The function printf can handle the following format conversions, in
*	common with the normal C language call to printf:
d77 23
a99 35
*        %c  - the next long word in the array is to be formatted
*              as a character (8-bit) value
*        %d  - the next long word in the array is to be formatted
*              as a decimal number
*        %x  - the next long word in the array is to be formatted
*              as a hexadecimal number
*        %s  - the next long word is the starting address of a
*              null-terminated string of characters
*
*    And "l" (small-L) character must be added between the % and the letter
*    if the value is a long (32 bits) or if the compiler in use forces
*    passed paramters to 32 bits.
*
*    Floating point output is not supported.
*
*    Following the %, you may also specify:
*
*    o       an optional minus (-) sign that tells the formatter
*            to left-justify the formatted item within the field
*            width
*
*    o       an optional field-width specifier... that is, how
*            many spaces to allot for the full width of this
*            item.  If the field width specifier begins with
*            a zero (0), it means that leading spaces, ahead of
*            the formatted item (usually a number) are to be
*            zero-filled instead of blank-filled
*
*    o       an optional period (.) that separates the width
*            specifier from a maximum number of characters
*            specifier
*
*    o       an optional digit string (for %ls specifications
*            only) that specifies the maximum number of characters
*            to print from a string.
d101 3
a103 2
*    See other books on C language programming for examples of the use
*    of these formatting options (see "printf" in other books).
d105 2
a106 6
*   NOTE
*	The global "_stdout" must be defined, and contain a pointer to
*	a legal AmigaDOS file handle.  Using the standard Amiga startup
*	module sets this up.  In other cases you will need to define
*	stdout, and assign it to some reasonable value (like what the
*	AmigaDOS Output() call returns).  This code would set it up:
d108 2
a109 2
*	ULONG stdout;
*		stdout=Output();
d111 1
a111 1
*****************************************************************************
d113 2
a114 1
******* amiga.lib/RangeRand *************************************************
d117 8
a124 16
*       RangeRand - To obtain a random number within a specific integer range
*                   of 0 to value.
*
*   SYNOPSIS
*       number = RangeRand(value);
*
*   FUNCTION
*       RangeRand accepts a value from 1 to 65535, and returns a value
*       within that range. (16-bit integer).  Note:  C-language implementation.
*
*       Value is passed on stack as a 32-bit integer but used as though
*       it is only a 16-bit integer.  Variable named RangeSeed is available
*       beginning with V1.2 that contains the global seed value passed from
*       call to call and thus can be changed by a program by declaring::
*
*               extern ULONG RangeSeed;
d127 26
a152 1
*       value - integer in the range of 1 to 65535.
d154 2
a155 2
*   RESULT
*       number - pseudo random integer in the range of 1 to <value>.
d157 6
a162 2
*   SEE ALSO
*       FastRand
d164 2
a165 14
*****************************************************************************

******* amiga.lib/RemTOF ****************************************************
*
*   NAME
*       RemTOF - Remove a task from the TopOfFrame interrupt server chain.
*
*   SYNOPSIS
*       RemTOF(i);
*       void RemTOF(struct Isrvstr *);
*
*   FUNCTION
*       To remove a task from the vertical-blanking interval interrupt server
*       chain.
d167 3
a169 5
*   INPUTS
*       i - pointer to structure Isrvstr.
*
*   SEE ALSO
*       AddTOF,graphics/graphinit.h
d171 11
a181 10
*****************************************************************************

******* amiga.lib/sprintf ***************************************************
*
*   NAME
*       sprintf - format a C-like string into a string buffer
*
*   SYNOPSIS
*       sprintf( destination, formatstring [,value [, values] ] );
*
d183 3
a185 3
*       perform string formatting identical to printf, but direct the output
*       into a specific destination in memory.  This uses the ROM version
*	of printf, so it is very small.
d192 7
a198 6
*       destination - the address of an area in memory into which the
*                     formatted output is to be placed.
*       formatstring - pointer to a null terminated string describing the
*                      desired output formatting.
*       value(s) - numeric information to be formatted into the output
*                  stream.
d201 1
a201 1
*       printf, exec/RawDoFmt
d203 2
a204 1
*****************************************************************************
d206 1
a206 1
******* amiga.lib/stdio *****************************************************
d209 1
a209 1
*	fclose	- close file
d211 1
a211 1
*	fprintf	- format data to file (see exec.library/RawDoFmt)
a217 1
*	sprintf	- format data into string (see exec.library/RawDoFmt)
d221 3
a223 3
*	names.  The file I/O functions all use non-buffered AmigaDOS
*	filehandles, and must not be mixed with the file I/O of any C
*	compiler.  The names of these function match those found in many
d229 2
a230 2
*	To get a suitable AmigaDOS filehandle, the AmigaDOS Open()
*	function must be used.
d233 1
a233 1
*	filehandle to have been set up ahead of time.  Depending on
d235 1
a235 1
*	startup code.  Or it can be done manually:
d237 3
a239 3
*   FROM C:
*	extern ULONG stdout;
*	/* Remove the extern if startup code did not define stdout */
d242 1
a242 1
*   FROM ASSEMBLY:
d244 1
a244 1
*		DC.L	_stdout	;<- Place result of dos.library Output() here.
d246 2
a247 1
*****************************************************************************
@
