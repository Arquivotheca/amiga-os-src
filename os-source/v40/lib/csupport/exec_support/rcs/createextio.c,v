head     37.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.1
date     91.11.01.17.42.38;  author vertex;  state Exp;
branches ;
next     36.0;

36.0
date     89.08.19.21.55.07;  author bryce;  state Exp;
branches ;
next     1.0;

1.0
date     89.08.19.20.53.02;  author bryce;  state Exp;
branches ;
next     ;


desc
@Convenience function for creating/deleting any sized IORequests.
@


37.1
log
@Initial V37 RCS checkin
@
text
@/***********************************************************************
*
*	Exec Support Function -- Extended IO Request
*
***********************************************************************/

#include "exec/types.h"
#include "exec/io.h"
#include "exec/memory.h"

extern APTR AllocMem();

/*
******* amiga.lib/CreateExtIO ************************************************
*
*   NAME
*	CreateExtIO -- create an IORequest structure
*
*   SYNOPSIS
*	ioReq = CreateExtIO(port,ioSize);
*
*	struct IORequest *CreateExtIO(struct MsgPort *, ULONG);
*
*   FUNCTION
*	Allocates memory for and initializes a new IO request block
*	of a user-specified number of bytes. The number of bytes
*	MUST be the size of a legal IORequest (or extended IORequest)
*	or very nasty things will happen.
*
*   INPUTS
*	port - an already initialized message port to be used for this IO
*	       request's reply port. If this is NULL this function fails.
*	ioSize - the size of the IO request to be created.
*
*   RESULT
*	ioReq - a new IO Request block, or NULL if there was not enough memory
*
*   EXAMPLE
*	if (ioReq = CreateExtIO(CreatePort(NULL,0),sizeof(struct IOExtTD)))
*
*   SEE ALSO
*	DeleteExtIO(), CreatePort(), exec.library/CreateMsgPort()
*
**********************************************************************
*/

struct IORequest *CreateExtIO(port,ioSize)
struct MsgPort *port;
ULONG ioSize;
{
struct IORequest *ioReq;

    if (port)
    {
        if (ioReq = AllocMem(ioSize,MEMF_CLEAR|MEMF_PUBLIC))
        {
            /* Mark request as inactive (NT_REPLYMSG) */
            ioReq->io_Message.mn_Node.ln_Type = NT_REPLYMSG;
            ioReq->io_Message.mn_Length       = ioSize;
            ioReq->io_Message.mn_ReplyPort    = port;

            return(ioReq);
        }
    }

    return(NULL);
}

/*
******* amiga.lib/DeleteExtIO ************************************************
*
*   NAME
*	DeleteExtIO - return memory allocated for extended IO request
*
*   SYNOPSIS
*	DeleteExtIO(ioReq);
*
*	VOID DeleteExtIO(struct IORequest *);
*
*   FUNCTION
*	Frees up an IO request as allocated by CreateExtIO().
*
*   INPUTS
*	ioReq - the IORequest block to be freed, or NULL.
*
*   SEE ALSO
*	CreateExtIO()
*
******************************************************************************
*/

void DeleteExtIO(ioReq)
struct IORequest *ioReq;
{
    if (ioReq)
    {
        /* try to make it hard to reuse the request by accident */
        ioReq->io_Message.mn_Node.ln_Succ = (void *) -1;
        ioReq->io_Device = (struct Device *) -1;

        FreeMem(ioReq,ioReq->io_Message.mn_Length);
    }
}
@


36.0
log
@New version. More secure on DeleteExtIO(). Includes correct AutoDocs.
@
text
@d14 1
a14 1
******* amiga.lib/CreateExtIO **************************************
d17 1
a17 1
*	CreateExtIO() -- create an IORequest structure
d20 1
a20 1
*	ioReq = CreateExtIO( ioReplyPort, size );
d26 1
a26 1
*	of a user-specified number of bytes.  The number of bytes
d31 3
a33 4
*	ioReplyPort - a pointer to an already initialized message port
*	    to be used for this IO request's reply port. (usually created
*	    by CreatePort()).  If NULL this function fails.
*	size - the size of the IO request to be created.
d36 1
a36 2
*	Returns a pointer to the new IO Request block, or NULL if
*		the request failed.
d39 1
a39 1
*	if( myReq = CreateExtIO( CreatePort(0L,0L),sizeof(struct IOExtTD) ) )
d42 1
a42 1
*	DeleteExtIO, CreatePort()
d47 3
a49 3
struct IORequest *CreateExtIO( ioReplyPort, size )
struct MsgPort *ioReplyPort;
LONG size;
d53 12
a64 4
    if(! ioReplyPort )
	return ( NULL );
    if (!( ioReq = AllocMem( size, MEMF_CLEAR|MEMF_PUBLIC ) ))
	return( NULL );
d66 1
a66 6
    /* Mark request as inactive (NT_REPLYMSG) */
    ioReq->io_Message.mn_Node.ln_Type = NT_REPLYMSG;
    ioReq->io_Message.mn_Length       = size;
    ioReq->io_Message.mn_ReplyPort    = ioReplyPort;

    return( ioReq );
d70 1
a70 1
******* amiga.lib/DeleteExtIO **************************************
d73 1
a73 1
*	DeleteExtIO() - return memory allocated for extended IO request
d76 1
a76 1
*	DeleteExtIO( ioReq );
d78 1
a78 1
*	void DeleteExtIO(struct IORequest *);
d81 1
a81 3
*	Frees up an IO request as allocated by CreateExtIO().  By
*	looking at the mn_Length field, it knows how much memory
*	to deallocate.
d84 1
a84 1
*	ioReq - A pointer to the IORequest block to be freed, or NULL.
d87 1
a87 1
*	CreateExtIO
d89 1
a89 1
*************************************************************************
d92 2
a93 2
void DeleteExtIO( ioExt )
struct IORequest *ioExt;
d95 5
a99 6
    if (!ioExt)
	return;

    /* try to make it hard to reuse the request by accident */
    ioExt->io_Message.mn_Node.ln_Succ = (void *) -1;
    ioExt->io_Device = (struct Device *) -1;
d101 2
a102 1
    FreeMem( ioExt, ioExt->io_Message.mn_Length );
@


1.0
log
@added to rcs
@
text
@d8 1
a8 2
#include "exec/nodes.h"
#include "exec/lists.h"
a9 6
#include "exec/interrupts.h"
#include "exec/ports.h"
#include "exec/libraries.h"
#include "exec/io.h"
#include "exec/tasks.h"
#include "exec/execbase.h"
d13 2
a14 1
/****** exec_support/CreateExtIO **************************************
d16 2
a17 2
*   NAME	
*	CreateExtIO() -- create an IO request
d20 1
a20 1
*	ioReq = CreateExtIO( ioReplyPort, size );   
d22 2
d27 2
a28 2
*	MUST be greater than the length of an Exec message, or some
*	very nasty things will happen.
d31 3
a33 2
*	ioReplyPort - a pointer to an already initialized
*		message port to be used for this IO request's reply port.
d41 1
a41 2
*	struct IORequest *myBlock;
*	struct MsgPort *port;
a42 8
*	myBlock = CreateExtIO( port, sizeof(struct IOExtTD) );
*	if( myBlock == NULL ) {
*		exit( NO_MEM_OR_SIGNALS );
*	}
*
*	example used to allocate space for IOExtTD (e.g. a trackdisk driver
*	IO Request block for extended IO operations).
*
d44 1
a44 1
*	DeleteExtIO
d46 2
a47 1
***********************************************************************/
d49 3
a51 4
struct IORequest *
CreateExtIO( ioReplyPort, size )
    struct MsgPort *ioReplyPort;
    LONG size;
d53 1
a53 1
    struct IORequest *ioReq;
d55 1
a55 1
    if( ioReplyPort == NULL ) {
d57 1
a57 5
    }

    ioReq = AllocMem( size, MEMF_CLEAR | MEMF_PUBLIC );

    if( ioReq == NULL ) {
a58 1
    }
d60 4
a63 2
    ioReq->io_Message.mn_Node.ln_Type = NT_MESSAGE;
    ioReq->io_Message.mn_Length = size;
a64 2
    ioReq->io_Message.mn_ReplyPort = ioReplyPort;

d68 2
a69 1
/****** exec_support/DeleteExtIO **************************************
d77 2
d80 3
a82 1
*	Frees up an IO request as allocated by CreateExtIO().
d85 1
a85 1
*	ioReq - A pointer to the IORequest block to be freed.
a86 7
*   RESULTS
*	no return value
*
*   EXAMPLE
*	struct IORequest *ioReq;
*	DeleteExtIO( ioReq );
*		
d90 2
a91 1
**************************************************************************/
d93 2
a94 2
DeleteExtIO( ioExt )
    struct IORequest *ioExt;
d96 2
a97 2
    /* just in case the user did not check things properly... */
    if( ! ioExt ) return;
d100 1
a100 1
    ioExt->io_Message.mn_Node.ln_Type = 0xff;
a101 1
    ioExt->io_Unit = (struct Unit *) -1;
@
