head     37.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.2
date     91.11.02.14.42.26;  author peter;  state Exp;
branches ;
next     37.1;

37.1
date     91.11.01.17.40.02;  author vertex;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.26.02.15.30;  author bryce;  state Exp;
branches ;
next     36.0;

36.0
date     89.08.19.21.55.40;  author bryce;  state Exp;
branches ;
next     1.0;

1.0
date     89.08.19.20.54.14;  author bryce;  state Exp;
branches ;
next     ;


desc
@Convenience function for creating/deleting MsgPort structures.
@


37.2
log
@Added missing bracket.
@
text
@

#include "exec/types.h"
#include "exec/ports.h"
#include "exec/memory.h"


extern APTR AllocMem();
extern UBYTE AllocSignal();
extern struct Task *FindTask();


/*
******* amiga.lib/CreatePort *************************************************
*
*   NAME
*	CreatePort - Allocate and initialize a new message port
*
*   SYNOPSIS
*	port = CreatePort(name,pri)
*
*	struct MsgPort *CreatePort(STRPTR,LONG);
*
*   FUNCTION
*	Allocates and initializes a new message port. The message list
*	of the new port will be prepared for use (via NewList).  A signal
*	bit will be allocated, and the port will be set to signal your
*	task when a message arrives (PA_SIGNAL).
*
*	You *must* use DeletePort() to delete ports created with
*	CreatePort()!
*
*   INPUTS
*	name - public name of the port, or NULL if the port is not named.
*	       The name string is not copied. Most ports do not need names,
*	       see notes below on this.
*	pri  - Priority used for insertion into the public port list,
*	       normally 0.
*
*   RESULT
*	port - a new MsgPort structure ready for use, or NULL if the port
*	       could not be created due to not enough memory or no available
*	       signal bit.
*
*   NOTE
*	In most cases, ports should not be named. Named ports are used for
*	rendez-vous between tasks. Everytime a named port needs to be located,
*	the list of all named ports must be traversed. The more named
*	ports there are, the longer this list traversal takes. Thus, unless
*	you really need to, do not name your ports, which will keep them off
*	of the named port list and improve system performance.
*
*   BUGS
*	With versions of amiga.lib prior to V37.14, this function would
*	not fail even though it couldn't allocate a signal bit. The port
*	would be returned with no signal allocated.
*
*   SEE ALSO
*	DeletePort(), exec.library/FindPort(), <exec/ports.h>,
*	exec.library/CreateMsgPort()
*
******************************************************************************
*/
struct MsgPort *CreatePort(name, pri)
    char *name;
    BYTE  pri;
{
LONG            sig;
struct MsgPort *port;

    sig = AllocSignal(-1);
    if (sig > 0)
    {
        if (port = AllocMem((ULONG)sizeof(struct MsgPort),MEMF_CLEAR|MEMF_PUBLIC))
        {
            port->mp_Node.ln_Name = name;
            port->mp_Node.ln_Pri  = pri;
            port->mp_Node.ln_Type = NT_MSGPORT;
            port->mp_Flags        = PA_SIGNAL;
            port->mp_SigBit       = sig;
            port->mp_SigTask      = FindTask(NULL);

            if (name)
                AddPort(port);
            else
                NewList(&port->mp_MsgList);

            return(port);
        }
        FreeSignal(sig);
    }

    return(NULL);
}


/*
******* amiga.lib/DeletePort *************************************************
*
*   NAME
*	DeletePort - free a message port created by CreatePort()
*
*   SYNOPSIS
*	DeletePort(port)
*
*	VOID DeletePort(struct MsgPort *);
*
*   FUNCTION
*	Frees a message port created by CreatePort. All messages that
*	may have been attached to this port must have already been
*	replied before this function is called.
*
*   INPUTS
*	port - message port to delete
*
*   SEE ALSO
*	CreatePort()
*
******************************************************************************
*/

VOID DeletePort(port)
    struct MsgPort *port;
{
    if (port->mp_Node.ln_Name)
	RemPort(port);

    port->mp_Node.ln_Type    = 0xff;
    port->mp_MsgList.lh_Head = (struct Node *) -1;

    FreeSignal(port->mp_SigBit);

    FreeMem(port,(ULONG)sizeof(struct MsgPort));
}
@


37.1
log
@Initial V37 RCS checkin
@
text
@d74 1
a74 1
        if (port = AllocMem((ULONG)sizeof(struct MsgPort),MEMF_CLEAR|MEMF_PUBLIC);
@


36.1
log
@Note return value in autodoc.
@
text
@d1 1
a1 5
/***********************************************************************
*
*	Exec Support Functions -- Ports and Messages
*
***********************************************************************/
d14 1
a14 1
******* amiga.lib/CreatePort ************************************************
d20 1
a20 1
*	CreatePort(name,pri)
d22 1
a22 1
*	struct MsgPort * CreatePort(char *,LONG);
d25 1
a25 1
*	Allocates and initializes a new message port.  The message list
d34 5
a38 4
*	name - NULL if other tasks will not search for this port with the
*	       FindPort() call.  If this port will be searched, provide
*	       a name string.  The name is not copied.
*	pri  - Priority used for insertion into the public port list.
d41 3
a43 2
*	A new MsgPort structure ready for use.  NULL if the system
*	is out of memory, or if all task signals are in use.
d45 13
d59 2
a60 1
*	DeletePort(), exec/FindPort(), exec/ports.h
d62 1
a62 1
*****************************************************************************
d64 1
a64 1
struct MsgPort *CreatePort (name, pri)
d68 2
a69 2
    ULONG sigBit;
    struct MsgPort *port;
d71 16
a86 5
    if ((sigBit = AllocSignal (-1)) == -1) {
	return ((struct MsgPort *) 0);
    }

    port = AllocMem ((ULONG) sizeof (*port), MEMF_CLEAR | MEMF_PUBLIC);
d88 3
a90 3
    if (port == 0) {
	FreeSignal (sigBit);
	return ((struct MsgPort *) (0));
d93 1
a93 14
    port -> mp_Node.ln_Name = name;
    port -> mp_Node.ln_Pri = pri;
    port -> mp_Node.ln_Type = NT_MSGPORT;

    port -> mp_Flags = PA_SIGNAL;
    port -> mp_SigBit = sigBit;
    port -> mp_SigTask = FindTask (0);  /* pointer to self (calling task) */

    if (name != 0)
	AddPort (port);
    else
	NewList (&(port -> mp_MsgList));

    return (port);
d98 1
a98 1
******* amiga.lib/DeletePort ************************************
d101 1
a101 1
*	DeletePort - Free a message port created by CreatePort
d104 1
a104 1
*	DeletePort(msgPort)
d106 1
a106 1
*	void DeletePort(struct MsgPort *);
d109 1
a109 1
*	Frees a message port created by CreatePort.  All messages that
d111 1
a111 1
*	replied to.
d114 1
a114 1
*	msgPort - A message port
d119 1
a119 1
***********************************************************************
d122 1
a122 1
DeletePort(port)
d125 2
a126 2
    if ((port -> mp_Node.ln_Name) != 0)
	RemPort (port);
d128 2
a129 2
    port -> mp_Node.ln_Type = 0xff;
    port -> mp_MsgList.lh_Head = (struct Node  *) -1;
d131 1
a131 1
    FreeSignal (port -> mp_SigBit);
d133 1
a133 1
    FreeMem (port, (ULONG) sizeof (*port));
@


36.0
log
@New version.
@
text
@d31 1
a31 1
*	bit will be allocatred, and the port will be set to signal your
d44 2
a45 1
*	A new MsgPort structure ready for use.
@


1.0
log
@added to rcs
@
text
@d8 1
a8 2
#include "exec/nodes.h"
#include "exec/lists.h"
a9 5
#include "exec/interrupts.h"
#include "exec/ports.h"
#include "exec/libraries.h"
#include "exec/tasks.h"
#include "exec/execbase.h"
d17 34
d55 1
a55 1
    int sigBit;
d75 1
a75 1
    port -> mp_SigTask = FindTask (0);
d86 24
d118 1
a118 1
    port -> mp_MsgList.lh_Head = (struct Node  *) - 1;
@
