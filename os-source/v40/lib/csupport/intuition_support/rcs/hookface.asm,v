head     37.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


37.2
date     91.11.09.15.10.02;  author peter;  state Exp;
branches ;
next     37.1;

37.1
date     91.11.08.23.38.41;  author peter;  state Exp;
branches ;
next     37.0;

37.0
date     91.11.08.22.52.56;  author peter;  state Exp;
branches ;
next     ;


desc
@Interface stubs for standard hooks.
@


37.2
log
@Back to initial caps.  CallHookPkt is now CallHookA, to avoid collision
with utility.library/CallHookPkt().
@
text
@*  $Id: hookface.asm,v 37.1 91/11/08 23:38:41 peter Exp Locker: peter $

	INCLUDE 'exec/types.i'
	INCLUDE 'utility/hooks.i'

	xdef	_CallHook
	xdef	_CallHookA
	xdef	_HookEntry

****************************************************************************
* new hook standard
* use struct Hook (with minnode at the top)
*
* *** register calling convention: ***
*	A0 - pointer to hook itself
*	A1 - pointer to parameter packed ("message")
*	A2 - Hook specific address data ("object," e.g, gadget )
*
* ***  C conventions: ***
* Note that parameters are in unusual register order: a0, a2, a1.
* This is to provide a performance boost for assembly language
* programming (the object in a2 is most frequently untouched).
* It is also no problem in "register direct" C function parameters.
*
* calling through a hook
*	CallHook( hook, object, msgid, p1, p2, ... );
*	CallHookA( hook, object, msgpkt );
*
* using a C function:	CFunction( hook, object, message );
*	hook.h_Entry = HookEntry;
*	hook.h_SubEntry = CFunction;
*
****************************************************************************

* C calling hook interface for prepared message packet
_CallHookA:
	movem.l	a2/a6,-(sp)	; protect
	move.l	12(sp),a0	; hook
	move.l	16(sp),a2	; object
	move.l	20(sp),a1	; message
	; ------ now have registers ready, invoke function
	pea.l	hreturn(pc)
	move.l	h_Entry(a0),-(sp)	; old rts-jump trick
	rts
hreturn:
	movem.l	(sp)+,a2/a6
	rts

* C calling hook interface for "varargs message packet"
_CallHook:
	movem.l	a2/a6,-(sp)	; protect
	move.l	12(sp),a0	; hook
	move.l	16(sp),a2	; object
	lea.l	20(sp),a1	; message
	; ------ now have registers ready, invoke function
	pea.l	hpreturn(pc)
	move.l	h_Entry(a0),-(sp)	; old rts-jump trick
	rts
hpreturn:
	movem.l	(sp)+,a2/a6
	rts

* entry interface for C code (large-code, stack parameters)
_HookEntry:
	move.l	a1,-(sp)
	move.l	a2,-(sp)
	move.l	a0,-(sp)
	move.l	h_SubEntry(a0),a0	; C entry point
	jsr	(a0)
	lea	12(sp),sp
	rts

	end
@


37.1
log
@utility.library has a stupid CallHookPkt fc, so we've got to revert
to callHookPkt with a lower-case c.
@
text
@d1 1
a1 1
*  $Id: hookface.asm,v 37.0 91/11/08 22:52:56 peter Exp Locker: peter $
d6 2
a7 2
	xdef	_callHook
	xdef	_callHookPkt
d26 2
a27 2
*	callHook( hook, object, msgid, p1, p2, ... );
*	callHookPkt( hook, object, msgpkt );
d36 1
a36 1
_callHookPkt:
d50 1
a50 1
_callHook:
@


37.0
log
@Initial check-in.
@
text
@d1 1
a1 1
*  $Id: hookface.asm,v 1.1 90/07/02 11:45:11 davidj Exp $
d6 2
a7 2
	xdef	_CallHook
	xdef	_CallHookPkt
d26 2
a27 2
*	CallHook( hook, object, msgid, p1, p2, ... );
*	CallHookPkt( hook, object, msgpkt );
d36 1
a36 1
_CallHookPkt:
d50 1
a50 1
_CallHook:
@
