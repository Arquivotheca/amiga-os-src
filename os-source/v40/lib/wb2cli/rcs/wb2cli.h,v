head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     91.12.30.18.22.28;  author mks;  state Exp;
branches ;
next     1.4;

1.4
date     91.07.24.20.03.29;  author mks;  state Exp;
branches ;
next     1.3;

1.3
date     91.07.24.19.52.46;  author mks;  state Exp;
branches ;
next     1.2;

1.2
date     91.07.24.18.58.42;  author mks;  state Exp;
branches ;
next     1.1;

1.1
date     91.07.24.18.57.46;  author mks;  state Exp;
branches ;
next     1.0;

1.0
date     91.07.24.17.03.24;  author mks;  state Exp;
branches ;
next     ;


desc
@Header for the magic code to take a workbench process and make it a CLI
@


1.5
log
@Cleaned up the docs a bit...
@
text
@/*
 * $Id: wb2cli.h,v 1.4 91/07/24 20:03:29 mks Exp Locker: mks $
 *
 * $Log:	wb2cli.h,v $
 * Revision 1.4  91/07/24  20:03:29  mks
 * Autodoc cleanup
 *
 * Revision 1.2  91/07/24  18:58:42  mks
 * Forgot to fix the example to use default stack.
 *
 * Revision 1.1  91/07/24  18:57:46  mks
 * Added the defaultstack to the prototype and documentation.
 *
 * Revision 1.0  91/07/24  17:03:24  mks
 * Initial revision
 *
 */

/*
 * WB2CLI - By Michael Sinz
 *             Operating System Development Group
 *             Commodore-Amiga, Inc.
 *
 * This is the magic code needed to take a started workbench process
 * and convert it into a CLI process with a copy of the workbench path.
 *
 * After that point, the process will look much like a background CLI.
 */

/*
******* WB2CLI ***************************************************************
*
*   NAME
*	WB2CLI								(V37)
*
*   SYNOPSIS
*	status = WB2CLI(wbmsg,defaultstack,dosbase)
*	  D0             A0    D0           A1
*
*	LONG WB2CLI(struct WBStartup *,ULONG,struct DosLibrary *)
*
*   FUNCTION
*	This function will take a workbench started application and change
*	it into a CLI-like application.  This will include a path as copied
*	from the Workbench.  The CLI default stack is used to pick the stack
*	size for the processes run as CLIs.  (This is in SYNC mode)
*
*	You would pass in the Workbench message pointer and a pointer
*	to an open dos.library.  (The DosLibrary pointer is used to call
*	dos.library without the need of globals.)
*
*	This *REQUIRES* V37 dos.library and exec.library.
*	It may seem to work with V36 but certain bugs in V36 ROM will
*	make it unstable.
*
*   NOTES
*	Assembly language programmers:  This routine is _WB2CLI
*
*	If you call WB2CLI() and are already a CLI, it will return as if
*	it worked even though it did nothing.  (After all, you were a CLI)
*	For this reason, you do not need to check if you are a CLI
*	started program before you call the function.
*
*	One word of interest:  Once you call this function, the pr_CLI
*	field of your process will *NOT* be NULL.  This is by definition
*	of what this program is trying to do, which is make you like a CLI.
*	You will, however, still need to reply the workbench startup message
*	that you passed to the
*
*	You are, however, responsible for setting up any input or output
*	file handles that you may needed.  Being workbench started means
*	that you have no standard-in or standard-out.  (Just as before)
*	(In other words, this function does not magically give you any
*	I/O as you may already have done so or need a special form of it)
*	These handles are pr_CIS, pr_COS, etc.  For example, many DOS
*	calls may rely on these being valid.  RunCommand() under V37
*	is one such creature.
*
*   EXAMPLE
*	void main(int argc, char *argv[])
*	{
*	struct  DosLibrary  *DOSBase;
*
*	    \* We need V37 to do this *\
*	    if (DOSBase=(struct DosLibrary *)OpenLibrary("dos.library",37L))
*	    {
*		\* Cute trick:  If you are a CLI, WB2CLI is a NO-OP *\
*		\* Thus, you normally don't need to check *\
*	        \* NOTE:  Most of the time you will ignore the error *\
*	        if (WB2CLI((struct WBStartup *)argv,4000,DOSBase))
*	        {
*	            \* We now are workbench started CLI *\
*	            \* (Complete with path *\
*	        }
*	        else
*	        {
*	            \* We did not become a CLI but we still *\
*	            \* can run.  Just no path *\
*	        }
*
*	        \* More stuff *\
*
*	        CloseLibrary((struct Library *)DOSBase);
*	    }
*	}
*
*   INPUTS
*	wbmsg -- The Workbench message that you were started with.  If NULL
*	         this routine will do nothing...
*
*	defaultstack -- The size of the CLI default stack in bytes.
*	                You *SHOULD* supply a value of at least 4000.
*
*	dosbase -- Pointer to dos.library (must be open)
*
*   RESULTS
*	A magically transformed process that has a CLI structure added.
*
*	status -- Returns TRUE if it worked.  Usually can be ignored
*	          as your program will continue to work as if you did not
*	          call this function.
*
*   SEE ALSO
*	None
*
*   BUGS
*
******************************************************************************
*/

#include	<dos/dosextens.h>
#include	<workbench/startup.h>

LONG __asm WB2CLI(register __a0 struct WBStartup *,register __d0 ULONG,register __a1 struct DosLibrary *);
@


1.4
log
@Autodoc cleanup
@
text
@d2 1
a2 1
 * $Id: wb2cli.h,v 1.3 91/07/24 19:52:46 mks Exp Locker: mks $
d5 3
d64 14
a77 5
*	One word of interest:  You should check the startup code of your
*	program.  It is important that on exit, the code replies the
*	WBStartup message if it has it and does not look at pr_CLI again.
*	The startup code that I have looked at was correct.  If the
*	message is not replied, the program's seglist is never unloaded.
d84 1
a84 1
*	    |* We need V37 to do this *|
d87 3
a89 1
*	        |* NOTE:  Most of the time you will ignore the error *|
d92 2
a93 2
*	            |* We now are workbench started CLI *|
*	            |* (Complete with path *|
d97 2
a98 2
*	            |* We did not become a CLI but we still *|
*	            |* can run.  Just no path *|
d101 1
a101 1
*	        |* More stuff *|
d112 1
a112 1
*	                You *MUST* supply a value of at least 4000.
@


1.3
log
@Added some comments to the autodoc
@
text
@d2 1
a2 1
 * $Id: wb2cli.h,v 1.2 91/07/24 18:58:42 mks Exp Locker: mks $
d53 14
d75 2
a76 1
*	        if (argc)
d78 2
a79 1
*	            |* We are a CLI *|
d83 2
a84 11
*	            |* NOTE:  Most of the time you will ignore the error *|
*	            if (WB2CLI((struct WBStartup *)argv,4000,DOSBase))
*	            {
*	                |* We now are workbench started CLI *|
*	                |* (Complete with path *|
*	            }
*	            else
*	            {
*	                |* We did not become a CLI but we still *|
*	                |* can run.  Just no path *|
*	            }
d94 3
a96 1
*	wbmsg -- The Workbench message that you were started with
d98 2
d106 2
a107 1
*	          as your program will continue to work.
@


1.2
log
@Forgot to fix the example to use default stack.
@
text
@d2 1
a2 1
 * $Id: wb2cli.h,v 1.1 91/07/24 18:57:46 mks Exp Locker: mks $
d5 3
d50 2
@


1.1
log
@Added the defaultstack to the prototype and documentation.
@
text
@d2 1
a2 1
 * $Id: wb2cli.h,v 1.0 91/07/24 17:03:24 mks Exp Locker: mks $
d5 3
d63 1
a63 1
*	            if (WB2CLI((struct WBStartup *)argv,DOSBase))
@


1.0
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d28 2
a29 2
*	status = WB2CLI(wbmsg,dosbase)
*	  D0             A0     A1
d31 1
a31 1
*	LONG WB2CLI(struct WBStartup *,struct DosLibrary *)
d36 2
a37 1
*	from the Workbench.
d80 1
d97 4
a100 1
LONG __asm WB2CLI(register __a0 struct WBStartup *,register __a1 struct DosLibrary *);
@
