==id $Id: dos_lib.sfd,v 36.31 92/12/17 20:11:35 jesup Exp $
* "dos.library"
==base _DOSBase
==bias 30
==public
==include <dos/dos.h>
==include <dos/dosextens.h>
==include <dos/record.h>
==include <dos/rdargs.h>
==include <dos/dosasl.h>
==include <dos/var.h>
==include <dos/notify.h>
==include <dos/datetime.h>
BPTR Open( STRPTR name, LONG accessMode ) (d1,d2)
LONG Close( BPTR file ) (d1)
LONG Read( BPTR file, APTR buffer, LONG length ) (d1,d2,d3)
LONG Write( BPTR file, APTR buffer, LONG length ) (d1,d2,d3)
BPTR Input() ()
BPTR Output() ()
LONG Seek( BPTR file, LONG position, LONG offset ) (d1,d2,d3)
LONG DeleteFile( STRPTR name ) (d1)
LONG Rename( STRPTR oldName, STRPTR newName ) (d1,d2)
BPTR Lock( STRPTR name, LONG type ) (d1,d2)
VOID UnLock( BPTR lock ) (d1)
BPTR DupLock( BPTR lock ) (d1)
LONG Examine( BPTR lock, struct FileInfoBlock *fileInfoBlock ) (d1,d2)
LONG ExNext( BPTR lock, struct FileInfoBlock *fileInfoBlock ) (d1,d2)
LONG Info( BPTR lock, struct InfoData *parameterBlock ) (d1,d2)
BPTR CreateDir( STRPTR name ) (d1)
BPTR CurrentDir( BPTR lock ) (d1)
LONG IoErr() ()
struct MsgPort *CreateProc( STRPTR name, LONG pri, BPTR segList,
	LONG stackSize ) (d1,d2,d3,d4)
VOID Exit( LONG returnCode ) (d1)
BPTR LoadSeg( STRPTR name ) (d1)
VOID UnLoadSeg( BPTR seglist ) (d1)
==private
VOID ClearVec( BPTR bVector, LONG upb ) (d1,d2)
BPTR NoReqLoadSeg( BSTR bFileName ) (d1)
==public
struct MsgPort *DeviceProc( STRPTR name ) (d1)
LONG SetComment( STRPTR name, STRPTR comment ) (d1,d2)
LONG SetProtection( STRPTR name, LONG protect ) (d1,d2)
struct DateStamp *DateStamp( struct DateStamp *date ) (d1)
VOID Delay( LONG timeout ) (d1)
LONG WaitForChar( BPTR file, LONG timeout ) (d1,d2)
BPTR ParentDir( BPTR lock ) (d1)
LONG IsInteractive( BPTR file ) (d1)
LONG Execute( STRPTR string, BPTR file, BPTR file2 ) (d1,d2,d3)
==version 36
*	DOS Object creation/deletion
APTR AllocDosObject( ULONG type, struct TagItem *tags ) (d1,d2)
==alias
APTR AllocDosObjectTagList( ULONG type, struct TagItem *tags ) (d1,d2)
==varargs
APTR AllocDosObjectTags( ULONG type, ULONG tag1type, ... ) (d1,d2)
VOID FreeDosObject( ULONG type, APTR ptr ) (d1,d2)
*	Packet Level routines
LONG DoPkt( struct MsgPort *port, LONG action, LONG arg1,
	LONG arg2, LONG arg3, LONG arg4, LONG arg5 ) (d1,d2,d3,d4,d5,d6,d7)
==alias
LONG DoPkt0( struct MsgPort *port, LONG action ) (d1,d2)
==alias
LONG DoPkt1( struct MsgPort *port, LONG action, LONG arg1 ) (d1,d2,d3)
==alias
LONG DoPkt2( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2 )
	(d1,d2,d3,d4)
==alias
LONG DoPkt3( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2,
	LONG arg3 ) (d1,d2,d3,d4,d5)
==alias
LONG DoPkt4( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2,
	LONG arg3, LONG arg4 ) (d1,d2,d3,d4,d5,d6)
VOID SendPkt( struct DosPacket *dp, struct MsgPort *port,
	struct MsgPort *replyport ) (d1,d2,d3)
struct DosPacket *WaitPkt() ()
VOID ReplyPkt( struct DosPacket *dp, LONG res1, LONG res2 ) (d1,d2,d3)
VOID AbortPkt( struct MsgPort *port, struct DosPacket *pkt ) (d1,d2)
*	Record Locking
BOOL LockRecord( BPTR fh,ULONG offset, ULONG length, ULONG mode,
	ULONG timeout ) (d1,d2,d3,d4,d5)
BOOL LockRecords( struct RecordLock *recArray, ULONG timeout) (d1,d2)
BOOL UnLockRecord( BPTR fh, ULONG offset, ULONG length ) (d1,d2,d3)
BOOL UnLockRecords( struct RecordLock *recArray ) (d1)
*	Buffered File I/O
BPTR SelectInput( BPTR fh ) (d1)
BPTR SelectOutput( BPTR fh ) (d1)
LONG FGetC( BPTR fh ) (d1)
LONG FPutC( BPTR fh, LONG ch ) (d1,d2)
LONG UnGetC( BPTR fh, LONG character ) (d1,d2)
LONG FRead( BPTR fh, APTR block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
LONG FWrite( BPTR fh, APTR block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
STRPTR FGets( BPTR fh, STRPTR buf, ULONG buflen ) (d1,d2,d3)
LONG FPuts( BPTR fh, STRPTR str ) (d1,d2)
VOID VFWritef( BPTR fh, STRPTR format, LONG *argarray ) (d1,d2,d3)
==varargs
VOID FWritef( BPTR fh, STRPTR format, ... ) (d1,d2,d3)
LONG VFPrintf( BPTR fh, STRPTR format, APTR argarray ) (d1,d2,d3)
==varargs
LONG FPrintf( BPTR fh, STRPTR format, ... ) (d1,d2,d3)
LONG Flush ( BPTR fh ) (d1)
LONG SetVBuf( BPTR fh, STRPTR buff, LONG type, LONG size ) (d1,d2,d3,d4)
*	DOS Object Management
BPTR DupLockFromFH( BPTR fh ) (d1)
BPTR OpenFromLock( BPTR lock ) (d1)
BPTR ParentOfFH( BPTR fh ) (d1)
BOOL ExamineFH( BPTR fh, struct FileInfoBlock *fib ) (d1,d2)
LONG SetFileDate( STRPTR name, struct DateStamp *date ) (d1,d2)
LONG NameFromLock( BPTR lock, STRPTR buffer, LONG len ) (d1,d2,d3)
LONG NameFromFH( BPTR fh, STRPTR buffer, LONG len) (d1,d2,d3)
WORD SplitName( STRPTR name, UBYTE seperator, STRPTR buf, WORD oldpos,
	LONG size ) (d1,d2,d3,d4,d5)
LONG SameLock( BPTR lock1, BPTR lock2 ) (d1,d2)
LONG SetMode( BPTR fh, LONG mode ) (d1,d2)
LONG ExAll( BPTR lock, struct ExAllData *buffer, LONG size, LONG data,
	struct ExAllControl *control ) (d1,d2,d3,d4,d5)
LONG ReadLink( struct MsgPort *port, BPTR lock, STRPTR path, STRPTR buffer,
	ULONG size ) (d1,d2,d3,d4,d5)
LONG MakeLink( STRPTR name, LONG dest, LONG soft ) (d1,d2,d3)
LONG ChangeMode( LONG type, BPTR fh, LONG newmode ) (d1,d2,d3)
LONG SetFileSize( BPTR fh, LONG pos, LONG mode ) (d1,d2,d3)
*	Error Handling
LONG SetIoErr( LONG result ) (d1)
BOOL Fault( LONG code, STRPTR header, STRPTR buffer, LONG len ) (d1,d2,d3,d4)
BOOL PrintFault( LONG code, STRPTR header ) (d1,d2)
LONG ErrorReport( LONG code, LONG type, ULONG arg1, struct MsgPort *device )
	(d1,d2,d3,d4)
==reserve 1
*	Process Management
struct CommandLineInterface *Cli() ()
struct Process *CreateNewProc( struct TagItem *tags ) (d1)
==alias
struct Process *CreateNewProcTagList( struct TagItem *tags ) (d1)
==varargs
struct Process *CreateNewProcTags( ULONG tag1type, ... ) (d1)
LONG RunCommand( BPTR seg, LONG stack, STRPTR paramptr, LONG paramlen )
	(d1,d2,d3,d4)
struct MsgPort *GetConsoleTask() ()
struct MsgPort *SetConsoleTask( struct MsgPort *task ) (d1)
struct MsgPort *GetFileSysTask() ()
struct MsgPort *SetFileSysTask( struct MsgPort *task ) (d1)
STRPTR GetArgStr() ()
BOOL SetArgStr( STRPTR string ) (d1)
struct Process *FindCliProc( ULONG num ) (d1)
ULONG MaxCli() ()
BOOL SetCurrentDirName( STRPTR name ) (d1)
BOOL GetCurrentDirName( STRPTR buf, LONG len ) (d1,d2)
BOOL SetProgramName( STRPTR name ) (d1)
BOOL GetProgramName( STRPTR buf, LONG len ) (d1,d2)
BOOL SetPrompt( STRPTR name ) (d1)
BOOL GetPrompt( STRPTR buf, LONG len ) (d1,d2)
BPTR SetProgramDir( BPTR lock ) (d1)
BPTR GetProgramDir() ()
*	Device List Management
LONG SystemTagList( STRPTR command, struct TagItem *tags ) (d1,d2)
==alias
LONG System( STRPTR command, struct TagItem *tags ) (d1,d2)
==varargs
LONG SystemTags( STRPTR command, ULONG tag1type, ... ) (d1,d2)
LONG AssignLock( STRPTR name, BPTR lock ) (d1,d2)
BOOL AssignLate( STRPTR name, STRPTR path ) (d1,d2)
BOOL AssignPath( STRPTR name, STRPTR path ) (d1,d2)
BOOL AssignAdd( STRPTR name, BPTR lock ) (d1,d2)
LONG RemAssignList( STRPTR name, BPTR lock ) (d1,d2)
struct DevProc *GetDeviceProc( STRPTR name, struct DevProc *dp ) (d1,d2)
VOID FreeDeviceProc( struct DevProc *dp ) (d1)
struct DosList *LockDosList( ULONG flags ) (d1)
VOID UnLockDosList( ULONG flags ) (d1)
struct DosList *AttemptLockDosList( ULONG flags ) (d1)
BOOL RemDosEntry( struct DosList *dlist ) (d1)
LONG AddDosEntry( struct DosList *dlist ) (d1)
struct DosList *FindDosEntry( struct DosList *dlist, STRPTR name, ULONG flags )
	(d1,d2,d3)
struct DosList *NextDosEntry( struct DosList *dlist, ULONG flags ) (d1,d2)
struct DosList *MakeDosEntry( STRPTR name, LONG type ) (d1,d2)
VOID FreeDosEntry( struct DosList *dlist ) (d1)
BOOL IsFileSystem( STRPTR name ) (d1)
*	Handler Interface
BOOL Format( STRPTR filesystem, STRPTR volumename, ULONG dostype ) (d1,d2,d3)
LONG Relabel( STRPTR drive, STRPTR newname ) (d1,d2)
LONG Inhibit( STRPTR name, LONG onoff ) (d1,d2)
LONG AddBuffers( STRPTR name, LONG number ) (d1,d2)
*	Date, Time Routines
LONG CompareDates( struct DateStamp *date1, struct DateStamp *date2 ) (d1,d2)
LONG DateToStr( struct DateTime *datetime ) (d1)
LONG StrToDate( struct DateTime *datetime ) (d1)
*	Image Management
BPTR InternalLoadSeg( BPTR fh, BPTR table, LONG *funcarray, LONG *stack )
	(d0,a0,a1,a2)
BOOL InternalUnLoadSeg( BPTR seglist, VOID (*freefunc)())
	(d1,a1)
BPTR NewLoadSeg( STRPTR file, struct TagItem *tags ) (d1,d2)
==alias
BPTR NewLoadSegTagList( STRPTR file, struct TagItem *tags ) (d1,d2)
==varargs
BPTR NewLoadSegTags( STRPTR file, ULONG tag1type, ... ) (d1,d2)
LONG AddSegment( STRPTR name, BPTR seg, LONG system ) (d1,d2,d3)
struct Segment *FindSegment( STRPTR name, struct Segment *seg, LONG system )
	(d1,d2,d3)
LONG RemSegment( struct Segment *seg ) (d1)
*	Command Support
LONG CheckSignal( LONG mask ) (d1)
struct RDArgs *ReadArgs( STRPTR arg_template, LONG *array, struct RDArgs *args )
	(d1,d2,d3)
LONG FindArg( STRPTR keyword, STRPTR arg_template ) (d1,d2)
LONG ReadItem( STRPTR name, LONG maxchars, struct CSource *cSource )
	(d1,d2,d3)
LONG StrToLong( STRPTR string, LONG *value ) (d1,d2)
LONG MatchFirst( STRPTR pat, struct AnchorPath *anchor ) (d1,d2)
LONG MatchNext( struct AnchorPath *anchor ) (d1)
VOID MatchEnd( struct AnchorPath *anchor ) (d1)
LONG ParsePattern( STRPTR pat, STRPTR buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPattern( STRPTR pat, STRPTR str ) (d1,d2)
==private
* Not currently implemented.
LONG DosNameFromAnchor( struct AnchorPath *anchor, STRPTR buffer, LONG len) (d1,d2,d3)
==public
VOID FreeArgs( struct RDArgs *args ) (d1)
==reserve 1
STRPTR FilePart( STRPTR path ) (d1)
STRPTR PathPart( STRPTR path ) (d1)
BOOL AddPart( STRPTR dirname, STRPTR filename, ULONG size ) (d1,d2,d3)
*	Notification
BOOL StartNotify( struct NotifyRequest *notify ) (d1)
VOID EndNotify( struct NotifyRequest *notify ) (d1)
*	Environment Variable functions
BOOL SetVar( STRPTR name, STRPTR buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG GetVar( STRPTR name, STRPTR buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG DeleteVar( STRPTR name, ULONG flags ) (d1,d2)
struct LocalVar *FindVar( STRPTR name, ULONG type ) (d1,d2)
==private
LONG CliInit( struct DosPacket *dp ) (a0)
==public
LONG CliInitNewcli( struct DosPacket *dp ) (a0)
LONG CliInitRun( struct DosPacket *dp ) (a0)
LONG WriteChars( STRPTR buf, ULONG buflen ) (d1,d2)
LONG PutStr( STRPTR str ) (d1)
LONG VPrintf( STRPTR format, APTR argarray ) (d1,d2)
==varargs
LONG Printf( STRPTR format, ... ) (d1,d2)
==reserve 1
* these were unimplemented until dos 36.147
LONG ParsePatternNoCase( STRPTR pat, STRPTR buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPatternNoCase( STRPTR pat, STRPTR str ) (d1,d2)
==private
BYTE *DosGetString(LONG num) (d1)
==public
* this was added for V37 dos, returned 0 before then.
BOOL SameDevice( BPTR lock1, BPTR lock2 ) (d1,d2)
*
* NOTE: the following entries did NOT exist before ks 36.303 (2.02)
* If you are going to use them, open dos.library with version 37
*
* These calls were added for V39 dos:
VOID ExAllEnd( BPTR lock, struct ExAllData *buffer, LONG size, LONG data,
	struct ExAllControl *control ) (d1,d2,d3,d4,d5)
BOOL SetOwner( STRPTR name, LONG owner_info ) (d1,d2)
==private
* These were added in dos 36.147
==reserve 2
* these were added in dos 37.1
==reserve 2
* these were added in dos 37.8
==reserve 2
* these were added in dos 39.11
==reserve 2
==end
