TABLE OF CONTENTS

utility.library/AllocateTagItems
utility.library/Amiga2Date
utility.library/CallHookPkt
utility.library/CheckDate
utility.library/CloneTagItems
utility.library/Date2Amiga
utility.library/FilterTagChanges
utility.library/FilterTagItems
utility.library/FindTagItem
utility.library/FreeTagItems
utility.library/GetTagData
utility.library/MapTags
utility.library/NextTagItem
utility.library/PackBoolTags
utility.library/RefreshTagItemClones
utility.library/SDivMod32
utility.library/SMult32
utility.library/TagInArray
utility.library/UDivMod32
utility.library/UMult32
utility.library/AllocateTagItems             utility.library/AllocateTagItems

    NAME
	AllocateTagItems --  Allocate a TagItem array (or chain).

    SYNOPSIS
	TagList = AllocateTagItems( NumItems )
			  D0

	struct TagItem	*TagList;
	ULONG		NumItems;

    FUNCTION
	Allocates the specified number of usable TagItems slots, and
	of a format that the function FreeTagItems can handle.

	Note that to access the TagItems in 'TagList', you should use
	the function NextTagItem.  This will insure you respect any
	chaining (TAG_MORE) that the list uses, and will skip any
	TAG_IGNORE items that AllocateTagItems might use to stash
	size and other information.

    INPUTS
	NumItems = the number of TagItem slots you want to allocate.

    RESULT
	TagList = the allocated chain of TagItem structures.  Will
	    return NULL if unsuccessful.

    BUGS

    SEE ALSO
	FreeTagItems, CloneTagItems

utility.library/Amiga2Date                         utility.library/Amiga2Date

   NAME
	Amiga2Date -- Calculate the date from a timestamp.  (V36)

   SYNOPSIS
	Amiga2Date( AmigaTime, Date )
	            D0         A0

	void Amiga2Date( ULONG, struct ClockData * );

   FUNCTION
	Fills in a ClockData structure with the date and time calculated
	    from a ULONG containing the number of seconds from 01-Jan-1978
	    to the date.

   INPUTS
	AmigaTime -- The number of seconds from 01-Jan-1978.

   RESULTS
	Date -- Filled in with the date/time specified by AmigaTime.

   NOTES

   SEE ALSO
	CheckDate(), Date2Amiga()

   BUGS

utility.library/CallHookPkt                       utility.library/CallHookPkt

    NAME
	CallHookPkt	--  (New for V36) Invoke a Hook function callback.

    SYNOPSIS
	CallHookPkt( struct Hook *Hook, VOID *Object, VOID *ParamPkt )
				  A0		A2		A1

    FUNCTION
	Performs the callback standard defined by a Hook structure.
	This function is really very simple; it effectively performs
	a JMP to Hook->h_Entry.

	It is probably just as well to do this operation in an
	assembly language function linked in to your program, possibly
	from a compiler supplied library or a builtin function.

	It is anticipated that C programs will often call a 'varargs'
	variant of this function which will be named CallHook.  This
	function must be provided in a compiler specific library, but
	an example of use would be:
	
	returnval = CallHook( hook, dataobject, COMMAND_ID, param1, param2 );
	
	This function CallHook can be implemented in many C compilers
	like this:
	CallHook( hook, object, command, ... )
	struct Hook	*hook;
	VOID		*object;
	ULONG		command;
	{
		return ( CallHookPkt( hook, object, (VOID *) &command ) );
	}

    INPUTS
	Hook = pointer to Hook structure as defined in utility/hooks.h
	Object = useful data structure in the particular context the
		hook is being used for.
	ParamPkt = pointer to a parameter packet (often built on the
		stack); by convention this packet should start off
		with a longword command code, and the remaining data
		in the packet depends on that command.

    RESULT
	The meaning of the value returned in D0 depends on the context
	in which the Hook is being used.

    BUGS

    SEE ALSO
	utility/hooks.h

utility.library/CheckDate                           utility.library/CheckDate

   NAME
	CheckDate -- Checks if a ClockData struct contains a leagal date.

   SYNOPSIS
	AmigaTime = CheckDate( Date )
	D0                     a0

	ULONG CheckDate( struct ClockData * );

   FUNCTION
	Determines if the Date is a legal date and returns the number
	    of seconds to Date from 01-Jan-1978 if it is.

   INPUTS
	Date -- pointer to a ClockData structure.

   RESULTS
	AmigaTime -- 0 if Date invalid; otherwise, the number of seconds
	    to Date from 01-Jan-1978.

   NOTES

   SEE ALSO
	Amiga2Date(), Date2Amiga()

   BUGS
	The wday field of the ClockData structure is not checked.

utility.library/CloneTagItems                   utility.library/CloneTagItems

    NAME
	CloneTagItems -- Copies a TagItem list.

    SYNOPSIS
	NewTagList = CloneTagItems( TagList )
				      A0

	struct TagItem *NewTagList;
	struct TagItem *TagList;

    FUNCTION
	Copies the essential contents of a TagItem list.  Internally,
	it uses AllocateTagItems so that you can use FreeTagItems.

    INPUTS
	TagList = TagItem list to clone.

    RESULT
	NewTagList = resultant copy.

    BUGS

    SEE ALSO
	AllocateTagItems, FreeTagItems, RefreshTagItemClones

utility.library/Date2Amiga                         utility.library/Date2Amiga

   NAME
	Date2Amiga -- Calculate seconds from 01-Jan-1978.  (V36)

   SYNOPSIS
	AmigaTime = Date2Amiga( Date )
	D0                      A0

	ULONG Date2Amiga( struct ClockData * );

   FUNCTION
	Calculates the number of seconds from 01-Jan-1978 to the date
	    specified in the ClockData structure.

   INPUTS
	Date -- Pointer to a ClockData structure containing the date
	    of interest.

   RESULTS
	AmigaTime -- The number of seconds from 01-Jan-1978 to the date
	    specified in Date.

   NOTES
	This function does no sanity checking of the data in Date.

   SEE ALSO
	Amiga2Date(), CheckDate()

   BUGS

utility.library/FilterTagChanges             utility.library/FilterTagChanges

    NAME
	FilterTagChanges --  Eliminate TagItems which specify no change.

    SYNOPSIS
	FilterTagChanges( ChangeList, OldValues, Apply)
			      A0	A1	  D0

	struct TagItem	*ChangeList;
	struct TagItem	*OldValues;
	BOOL		Apply;

    FUNCTION
	Eliminate items from a "change list" that specify values already
	in effect in existing list.  Optionally update the existing list
	if the Boolean 'Apply' is true.

	The elimination is done by changing the ti_Tag field to TAG_IGNORE.
	So, this function may change the input tag list(s).

    INPUTS
	ChangeList = specification of new tag-value pairs
	OldValues = a list of existing tag item pairs
	Apply = Boolean specification as to whether the values in
		OldValues are to be updated to the values in ChangeList

    RESULT
	None

    BUGS

    SEE ALSO

utility.library/FilterTagItems                 utility.library/FilterTagItems

    NAME
	FilterTagItems - Remove selected items from a TagItem list.

    SYNOPSIS
	FilterTagList(TagList, TagArray, Logic)
		  	A0	   A1	  D0

	struct TagItem	*TagList;
	Tag		*TagArray;
	LONG		Logic;

    FUNCTION
	Removes TagItems from a TagItem list (by changing ti_Tag to
	TAG_IGNORE) depending on whether its ti_Tag value is
	found in an array of TagValues.

	If the 'Logic' parameter is TAGFILTER_AND, then all items
	not appearing in the list are excluded.

	If 'Logic' is TAGFILTER_NOT, then items not found in the
	array are preserved, and the ones in the array are cast out.

    INPUTS
	TagList = Input list of tag items which is to be filtered
		by having selected items changed to TAG_IGNORE.
	TagArray = an array of Tag values, terminated by TAG_END,
		as specified in the notes on TagInArray().
	Logic = specification whether items in TagArray are to
		be included or excluded in the filtered result.

    RESULT
	Number of valid items left in resulting filtered list.

    BUGS

    SEE ALSO
	TagInArray

utility.library/FindTagItem                       utility.library/FindTagItem

    NAME
	FindTagItem	--  (New for V36) Scans TagItem list for a Tag

    SYNOPSIS
	struct TagItem	*FindTagItem( Tag TagVal, struct TagItem *TagList );
					   D0			    A0

    FUNCTION
	Scans a TagItem "List", which is in fact a chain of arrays
	of TagItem structures as defined in utility/tagitem.h.
	Returns a pointer to the FIRST item with ti_Tag matching the
	'TagVal' parameter.

    INPUTS
	TagVal = Tag value to search for.
	TagList = beginning of TagItem list to scan.

    RESULT
	Returns a pointer to the item with ti_Tag matching 'TagVal'.
	Returns NULL if there is no match or if TagList is NULL.

    BUGS

    SEE ALSO
	utility/tagitem.h, GetTagData(), PackBoolTags(), NextTagItem()

utility.library/FreeTagItems                     utility.library/FreeTagItems

    NAME
	FreeTagItems	--  Frees allocated TagItem lists.

    SYNOPSIS
	FreeTagItems( TagList )
			A0

	struct TagItem	*TagList;

    FUNCTION
	Frees the memory of a TagItem list allocated either by
	AllocateTagItems or CloneTagItems.

    INPUTS
	TagList = list to free.  Must be created by functions specified.
	A value of NULL for 'TagList' is safe.

    RESULT
	None.

    BUGS

    SEE ALSO
	AllocateTagItems, CloneTagItems

utility.library/GetTagData                         utility.library/GetTagData

    NAME
	GetTagData	--  (New for V36) Obtain data corresponding to
		Tag in TagItem list, or default value if item not found.

    SYNOPSIS
	ULONG GetTagData( Tag TagVal, ULONG Default, struct TagItem *TagList )
				D0	       D1			A0

    FUNCTION
	Searches a TagItem list for a matching Tag value, and returns the
	corresponding ti_Data value for the TagItem found.  If none
	found, will return the value passed it as 'Default'.

    INPUTS
	TagVal = Tag value to search for.
	Default = Value to be returned if TagVal is not found.
	TagList = The TagItem list to search.

    RESULT
	The ti_Data value for first matching TagItem, or 'Default' if
	ti_Tag matching 'Tag' is not found.

    BUGS

    SEE ALSO
	utility/tagitem.h, FindTagItem(), PackBoolTags(), NextTagItem()

utility.library/MapTags                               utility.library/MapTags

    NAME
	MapTags	-- Convert ti_Tag values in a list via map pairing.

    SYNOPSIS
	MapTags(TagList, MapList, IncludeMiss)
		  A0	   A1

	struct TagItem	*TagList;
	struct TagItem	*MapList;
	BOOL		IncludeMiss;

    FUNCTION
	Apply a "mapping list" 'MapList' to TagList:

	If the ti_Tag field of an item in 'TagList' appears as ti_Tag
	in some item in 'MapList', overwrite ti_Tag with the corresponding
	ti_Data from the map list.

	If a tag in TagList does not appear in the MapList, you can
	choose to have it removed by changing it to TAG_IGNORE.
	Do this by setting 'IncludeMiss' to 0.

	If you want to have items which do not appear in the MapList
	survive the mapping as-is, set IncludeMiss to 1.

	This is central to gadget interconnections where you want
	to convert the tag values from one space (the sender) to
	another (the receiver).

    EXAMPLE
	Consider this source list:
	    struct TagItem list[] = {
		{ MY_SIZE, 	71 },
		{ MY_WEIGHT, 	200 },
		{ TAG_END,	} };

	And the mapping list:
	    struct TagItem map[] = {
		{ MY_SIZE, 	HIS_TALL },
		{ TAG_END,	} };

	Then after MapTags( list, map, 0 ), 'list' will become:
		{ HIS_TALL, 71 },
		{ TAG_IGNORE, },
		{ TAG_END, }

	Then after MapTags( list, map, 1 ), 'list' will become:
		{ HIS_TALL, 71 },
		{ MY_WEIGHT, 200 },
		{ TAG_END, }

	Note that you can "filter" a list by passing IncludeMiss
	as 0, and having the data items in the map list equal
	the corresponding tags.

	You can perform the inverse filter ("everything but")
	by passing IncludeMiss equal to 1, and creating a
	map item for every tag you want to filter out, pairing
	it with a mapped data value of TAG_IGNORE.

	Note: for safety and "order independence" of tag item arrays,
	if you attempt to map some tag to the value TAG_END, the
	value TAG_IGNORE will be substituted instead.

    NOTE
	The procedure will change the values of the input tag list
	TagList (but not MapList).

    INPUTS
	TagList = Input list of tag items which is to be mapped
		to Tag values as specified in MapList.
	MapList = a "mapping list" TagItem list which pairs Tag
		values expected to appear in TagList with new
		values to be substituted in the ti_Tag fields of
		TagList.  May be NULL, which means that all items
		in TagList will be eliminated.

    RESULT
	

    BUGS

    SEE ALSO

utility.library/NextTagItem                       utility.library/NextTagItem

    NAME
	NextTagItem	--  (New for V36)  Iterate TagItem lists

    SYNOPSIS
	struct TagItem	*NextTagItem( struct TagItem **TagItemPtr )
						A0
    FUNCTION
	Iterates through a (chained) array of TagItem structures,
	skipping and chaining as dictated by system tags.

    INPUTS
	TagItemPtr = doubly-indirect reference to a TagItem structure.
	    For example, if you have a TagItem pointer which is the
	    beginning of a TagItem list, pass its address to this
	    function.  The pointer will be changed to keep track
	    of the iteration.
	NOTE: Do NOT use the value of *TagItemPtr, but rather use
	the pointer returned by this function.

    RESULT
	Each TagItem in the array or chain of arrays that should
	be processed according to system Tag values (in utility/tagitem.h)
	is returned in turn with successive calls.

    BUGS

    SEE ALSO
	utility/tagitem.h, GetTagData(), PackBoolTags(), FindTagItem()

utility.library/PackBoolTags                     utility.library/PackBoolTags

    NAME
	PackBoolTags	--  (New for V36) Builds a "Flag" word from the
		Boolean tags in a TagList.

    SYNOPSIS
	PackBoolTags( ULONG InitialFlags, struct TagItem *TagList,
				D0			   A0
			struct TagItem *BoolMap );	
					  A1

    FUNCTION
	Picks out the Boolean TagItems in a TagItem list and converts
	them into bit-flag representations according to a correspondence
	defined by the TagItem list 'BoolMap.'

	A Boolean TagItem is one where only the logical value of
	the ti_Data is relevant.  If this field is 0, the value is
	FALSE, otherwise TRUE.
	

    INPUTS
	InitialFlags = A starting set of bit-flags which will be
	    changed by the processing of TRUE and FALSE Boolean
	    tags in TagList.
	TagList = A TagItem list which may contain several TagItems
	    defined to be "Boolean" by their presence in BoolMap.
	    The logical value of ti_Data determines whether a TagItem
	    causes the bit-flag value related by BoolMap to set or
	    cleared in the returned flag longword.
	BoolMap = A TagItem list defining the Boolean Tags to be
	    recognized, and the bit (or bits) in the returned longword
	    that are to be set or cleared when a Boolean Tag is
	    found to be TRUE or FALSE in TagList.

    RESULT
	The accumulated longword of bit-flags, starting with InitialFlags
	and modified by each Boolean TagItem encountered.	

    EXAMPLE

    define some nice user tag values ...
	enum mytags { tag1 = TAG_USER+1, tag2, tag3, tag4, tag5 };

    this TagItem list defines the correspondence between Boolean tags
    and bit-flag values.
	struct TagItem	boolmap[] = {
	    { tag1,  0x0001 },
	    { tag2,  0x0002 },
	    { tag3,  0x0004 },
	    { tag4,  0x0008 },
	    { TAG_DONE }
	};

    You are probably passed these by some client, and you want
    to "collapse" the Boolean content into a single longword.

	struct TagItem	boolexample[] = {
	    { tag1,  TRUE },
	    { tag2,  FALSE },
	    { tag5, Irrelevant },
	    { tag3,  TRUE },
	    { TAG_DONE }
	};

    Perhaps 'boolflags' already has a current value of 0x800002.
	boolflags = PackBoolTags( boolflags, boolexample, boolmap );

	The resulting new value of 'boolflags' will be 0x80005.
	
    BUGS
	There are some undefined cases if there is duplication of
	a given Tag in either list.  It is probably safe to say that
	the *last* of identical Tags in TagList will hold sway.

    SEE ALSO
	utility/tagitem.h, GetTagData(), FindTagItem(), NextTagItem()

utility.library/RefreshTagItemClones     utility.library/RefreshTagItemClones

    NAME
	RefreshTagItemClones -- Rejuvenates a clone from the original.

    SYNOPSIS
	RefreshTagItemClones( CloneTagItems, OriginalTagItems )
			         A0	     A1

	struct TagItem *CloneTagItems;
	struct TagItem *OriginalTagItems;

    FUNCTION
	If (and only if) the tag items 'CloneTagItems' were created
	from 'OriginalTagItems' by CloneTagItems(), and if OriginalTagItems
	has not been changed in any way, you can reset the clone list
	to its original state by using this function.

    INPUTS
	CloneTagItems = return value from CloneTagItems( OriginalTagItems )
	OriginalTagItems = a tag list that hasn't changed

    RESULT
	None

    BUGS

    SEE ALSO
	CloneTagItems, AllocateTagItems, FreeTagItems

utility.library/SDivMod32                           utility.library/SDivMod32

   NAME
	SDivMod32 -- Signed 32 by 32 bit division and modulus. (V36)

   SYNOPSIS
	Quotient:Remainder = SDivMod32( Dividend, Divisor )
	D0       D1                     D0        D1

	LONG SDivMod32( LONG, LONG );

   FUNCTION
	Divides the signed 32 bit dividend by the signed 32 bit divisor
	   and returns a signed 32 bit quotient and remainder.

   INPUTS
	Dividend -- Signed 32 bit dividend.
	Divisor -- Signed 32 bit divisor.

   RESULTS
	Quotient -- Signed 32 quotient of the division.
	Remainder -- Signed 32 remainder of the division.

   NOTES

   SEE ALSO
	SMult32(), UDivMod32(), UMult32()

   BUGS

utility.library/SMult32                               utility.library/SMult32

   NAME
	SMult32 -- Signed 32 by 32 bit multiply with 32 bit result. (V36)

   SYNOPSIS
	Result = SMult32( Arg1, Arg2 )
	D0                D0    D1

	LONG SMult32( LONG, LONG );

   FUNCTION
	Returns the signed 32 bit result of multiplying Arg1 by Arg2.

   INPUTS
	Arg1, Arg2 -- Signed multiplicands.

   RESULTS
	Result -- The signed 32 bit result of multiplying Arg1 by Arg2.

   NOTES

   SEE ALSO
	SDivMod32(), UDivMod32(), UMult32()

   BUGS

utility.library/TagInArray                         utility.library/TagInArray

    NAME
	TagInArray  -- Check if a Tag value appears in a Tag array

    SYNOPSIS
	BOOL	TagInArray( Tag, TagArray )
		  	     D0	   A0

	Tag		Tag;
	Tag		*Tag;

    FUNCTION
	Perform a quick scan to see if a tag value appears in
	an array terminated with TAG_END.  Returns TRUE if
	the value is found.

	The 'TagArray' must be terminated by TAG_END.  It should
	NOT contain other system tag values, such as TAG_MORE
	or TAG_IGNORE.

	This is sort of a "one shot" version of FilterTagItems.

    INPUTS
	Tag = Tag value to search array for.
	TagArray = a simple array terminated by TAG_END.

    RESULT
	Boolean success of search.

    BUGS

    SEE ALSO
	FilterTagItems

utility.library/UDivMod32                           utility.library/UDivMod32

   NAME
	UDivMod32 -- Unsigned 32 by 32 bit division and modulus. (V36)

   SYNOPSIS
	Quotient:Remainder = UDivMod32( Dividend, Divisor )
	D0       D1                     D0        D1

	ULONG UDivMod32( ULONG, ULONG );

   FUNCTION
	Divides the unsigned 32 bit dividend by the unsigned 32 bit divisor
	   and returns a unsigned 32 bit quotient and remainder.

   INPUTS
	Dividend -- Unsigned 32 bit dividend.
	Divisor -- Unsigned 32 bit divisor.

   RESULTS
	Quotient -- Unsigned 32 quotient of the division.
	Remainder -- Unsigned 32 remainder of the division.

   NOTES

   SEE ALSO
	SDivMod32(), SMult32(), UMult32()

   BUGS

utility.library/UMult32                               utility.library/UMult32

   NAME
	UMult32 -- Unsigned 32 by 32 bit multiply with 32 bit result. (V36)

   SYNOPSIS
	Result = UMult32( Arg1, Arg2 )
	D0                D0    D1

	ULONG UMult32( ULONG, ULONG );

   FUNCTION
	Returns the unsigned 32 bit result of multiplying Arg1 by Arg2.

   INPUTS
	Arg1, Arg2 -- Unsigned multiplicands.

   RESULTS
	Result -- The unsigned 32 bit result of multiplying Arg1 by Arg2.

   NOTES

   SEE ALSO
	SDivMod32(), SMult32(), UDivMod32()

   BUGS

