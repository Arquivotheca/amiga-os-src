As has been long requested and promised, the NativeMakeMeta
has arrived.  This document explains how to use NativeMakeMeta,
how to set up your assigns, and what equates you ned to define
in order to use NativeMakeMeta.

Note that the documentation for AMAKE is to be considered part
of this system.  Since NativeMakeMeta can ONLY be executed by
AMAKE (lmk, and manx make will not process the NativeMakeMeta
files correctly), you should be reasonably familiar with the
differences imposed by AMAKE.

A brief synopsis of the differences are:

1)	Whereas normal makes allow you to specify dependency
	lists of the form:

		target:dependent

	(i.e. no intervening whitespace around the colon),
	AMAKE will not allow this.  You must put whitespace
	surrounding the colon:

		target : dependent

	The reason behind this is the ambiguity of the
	following line:

		Alpha:Baker:Delta

	Does this mean that a file "Alpha" is dependent on
	a file "Baker:Delta", or does it mean that the file
	"Alpha:Baker" is dependent on the file "Delta"?

2)	Since AMAKE uses AREXX as it's scripting language
	(much as UNIX Make uses SH as its scripting language),
	any command that you want to send to the shell needs to
	have quotes put around it.

There are other differences, but those are the ones that are most
germane to the use of NativeMakeMeta.

In order to use NativeMakeMeta, you need the following assigns:

INCLUDE:        Points to the directory that contains the include
			files you wish to use.
LIB:		Points to the directory containing the library
			files you wish to use.

You may need to define the following assigns in order to perform
tasks such as "make internal".

SFD:		Points to the directory in which to place SFD
			SFD files
INCLUDE.STRIP:	Point to the directory in which to place stripped
			include files.
INCLUDE.NOSTRIP:Points to the directory in which to place
			non-stripped include files.
DOC:		Points to the directory in which to place autodoc
			files.
TMP:		Points to a temporary directory where short
			temporary files can be stored.  Note
			that this only has to be 10 or 20K.
V:		Points to the current version tree on the server

Within your makefile you need to define some or all of the
following macros:

AFILES		set this to the list of assembler source files you
		use.

AFLAGS		set this to any special assembler flags you wish to
		use over the standard ones set by native makemeta
		for your assembler.

ASSEMBLER	set this to ${CAPE}, ${AMANX3} (for the manx
		3.x Assembler), ${AMANX} for Manx 5.x or greater,
		${ALATTICE} (for the lattice
		assembler) or the mnemonic for whatever
		assembler you are using.  If your assembler isn't
		supported, then please see the keeper of native
		make meta to incorporate your assembler into the
		standard list.

CFILES		set this to the list of C source files you use.

CFLAGS		Set this to any special compiler flags you wish to
		use over the standard ones set by native makemeta
		for your compiler.

CLEANUP		_OPTIONAL_ is passed to a delete command during a
		make clean operation.  The exact command executed
		is DELETE >NIL: ${CLEANUP}, so CLEANUP can be any
		valid file specification you wish.

COMPILER	set this to either ${LATTICE}, ${MANX3}, or
		${MANX} depending on your particular compiler.

EXTINCL		set this to the list of include files that you
		wish to release to the public.

HFILES		set this to the list of .H files you need are
		responsible for.

IFILES		set this to the list of .I files that you are
		responsible for.

INTINCL		set this to the list of include files that you
		wish to release to other members of the
		development team.

	***	Note that EXTINCL and INTINCL make contain entries
		that are duplicates of those in HFILES and IFILES
		It is assumed that the union of CFILES, AFILES,
		HFILES, and IFILES are to be kept under RCS.  It
		is further assumed that all other files can be
		rebuilt from CFILES, AFILES, HFILES, IFILES, or
		a combination of them, or an outside agency.

LFLAGS		set this to any special linker flags you wish to
		use over the standard ones set for BLINK

LIBS		any libs that you need included

LINKER		set this to the linker that you use.  Normally
		this is ${LLATTICE}, ${LMANX3}, or ${LMANX},
		but you can set this if you need something really
		whacked

		${LLATTICE} should be used if you're using the
		latice compiler, ${LMANX3} should be specified if
		you're using the MANX 3.x compiler, or ${LMANX}
		if you're using something more recent.

MODULE		set this to the name of your module.  For example:

			MODULE = workbench

MODULEDIR	The directory to which to release your module.

OFILES		set this to the list of object files to be made.

RFILES		Files to be kept under RCS

General format of the makefile for use with NMakeMeta

The format of the makefile for NMakeMeta is gnerally something like:

	Section 1:	Definition of the following macros:
				RFILES	OFILES	MODULEDIR	MODULE	LIBS
				INTINCL	IFILES	HFILES		EXTINCL	CLEANUP
				CFILES	AFILES

	Section 2:	.INCLUDE=NCOMPILERS

	Section 3:	Definition of the following macros:
				COMPILER	ASSEMBLER	LINKER
				CFLAGS		AFLAGS		LFLAGS

	Section 4:	all : ${MODULE}.ld (or whatever you want the default thing
			to be made)

			any special dependencies or make rules.

	Section 5:	.INCLUDE=NMakeMeta

Section 1 defines all the files that you're interested in, as well as
paths to various directories, the name of the module, etc.

Section 2 includes the various compiler, assembler, and linker definitions
for all the supported compilers

Section 3 configures NativeMakeMeta for the compiler, assembler, and
linker that you use for your module.

Section 4 allows you to further customize the build for your module.

Section 5 defines all the standard NativeMakeMeta routines

#
#
# What is this? A test makefile?
#
#

RFILES		=	NCOMPILERS NMakeMeta
MODULE		=	NativeMakeMeta
MODULEDIR	=	V36:NativeMakeMeta
CFILES		=	
OFILES		=	
LIBS		=	
CLEANUP		=	temp|t1

.INCLUDE=NCOMPILERS

COMPILER=${LATTICE}
ASSEMBLER=${ALATTICE}
LINKER=${LLATTICE}

all : ${MODULE}.ld

NMakeMeta.dup : NMakeMeta
	'copy NMakeMeta NMakeMeta.dup'

# Note that we use the .dup file here since the default
# NativeMakeMeta is currently open, and thus we can't write
# version information into it, nor check it out from RCS.

.INCLUDE=NMakeMeta.dup
