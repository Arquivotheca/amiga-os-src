# $Id: makemeta.nostrip,v 38.3 93/03/09 16:34:20 peter Exp $

#	Define the following to use this makefile
#
#  SUBSYSNAME	The name that will be associated with the .ld, .srec,
#		... files to be produced.
#
#  SSTART	The start address for creation of $SUBSYSNAME.srec files
#
#  AFILES	All the assembler source files
#
#  CFILES	All the C source files
#
#  FIRSTO	The first object file to appear in library or the load 
#		file generated by this makefile, but the last dependency
#		to be resolved.  This means the source for this file will
#		be compiled or assembled last.  Not to be confused with
#		STARTUP, which goes before this if it exists, but will
#		always be an .obj file that is not compiled or assembled
#		here.
#  OCMFILES	Object files with the extension .ocm, indicating that the
#		data and bss portions are to be loaded into chip memory.
#		and files with the extension .oCm, indicating that the
#		all portions are to be loaded into chip memory.
#  OFILES	All the object files that make either the library or the
#		load file generated by this makefile, whose source appears
#		in this directory, with the exception of FIRSTO and
#		OCMFILES files
#  MAKEFILE	The name of the Makefile that contains the above items,
#		so that a new $SUBSYSNAME.with file can be generated when
#		the Makefile changes.
#
#		
#	Define the following to generate public code (e.g. roms)
#
#  SRCDIRPATH	The major directory name that the SRCDIR is within,
#		i.e. kickstart or workbench.  For code in a multi level
#		source form, this may be a longer path.
#
#  SUBSYSGROUP	The group within .../include/ that the following external
#		include files should be placed in
#
#  EXTERNIFILES	All the assembler include files released to others in
#		EXTINCL and EXTINCLNS
#
#  INTERNIFILES	All the assembler include files released to others in
#		INTINCL and INTINCLNS: for internal use only
#
#  IFILES	All the private assembler include files used by this code
#		(i.e. found in this directory but not released to others),
#		except any _rev.i files
#
#  EXTERNHFILES	All the C include files released to others in
#		EXTINCL and EXTINCLNS
#
#  INTERNHFILES	All the C include files released to others in
#		INTINCL and INTINCLNS: for internal use only
#
#  HFILES	All the private C include files used by this code (i.e.
#		found in this directory but not released to others),
#		except any _rev.h files
#
#  MISCSRC	Files that need to be copied to the private source
#		directory, but do not fit the purpose of these other
#		macros
#
#  MISCDOC	Files that need to be copied to the documentation 
#		directory, other than ${SUBSYSNAME}.doc (which is
#		automatically copied).
#
#
#	Define the following variables to futher effect the rules:
#
#  CSTART	The start address for creation of $SUBSYSNAME.crec files,
#		if not equal to SSTART-$C0000
#  MYLIBS	Additional libraries to search before the system library
#		to resolve dependencies
#  MYINCL	An additional include directory to search after the
#		current directory but before the default system directory.
#		Only one directory can be specified.
#  CFLAGS	Additional options for C compilation.  Use MYINCL= and
#		SYSINCL= to change -I flags.
#  AFLAGS	Additional options to the Assembler. For example
#		"-l $*.lis" to generate a listing file.  Use MYINCL= and
#		SYSINCL= to change -I flags.
#  DFLAGS	Flags top send to AutoDoc tool.
#  CAFLAGS	Additional options for C compilation, so that specific
#		assembler flags may be passed through to the assembler. (@@)
#  LFLAGS	Additional options to the linker.
#		For example "map=$*.map" or "xref=$*.xref".
#  STARTUP	An .obj file to be linked to the start of the link.  Use
#		${LIBDIR}/startup.obj for C
#		running under DOS, nodos_startup.obj when not under DOS,
#		and wbstartup.obj when running under WorkBench.
#
#	Override the following variables from the make command itself:
#
#  VERNUM	The version of code being produced, the suffix of the
#		VERDIR directory /usr/commodore/amiga/V${VERNUM}, and
#		the software version that should be in libraries and
#		devices.  This specifies software compatibility.
#		Anyone who uses the automatic <subsys>_rev.i file
#		can pick this up by automatically.  Others should use
#		use this variable to define something in their subsystem
#		explicitly.
#  VERDIR	The directory within which SRCDIR, EXTINCL, EXTINCLNS,
#		INTINCL, INTINCLNS, LIBDIR, and CARTDIR live,
#		and which contains the system include directory
#  SYSINCL	The system include directory, stripped for compiles
#  SYMBOLOPT	By default, we have symbolic hunks turned on in the
#		assembler.  Override SYMBOLOPT to turn this off
#		(it makes your object modules 60% smaller).
#  METAFILE     the name of the makemeta file
#  DEPENDFILE   the name of the dependency file
#
# makemeta.sub is a slightly modified version of makemeta to
# deal with subsystems and their sub directory sources.

VERNUM=		40
VERDIR=		/usr/commodore/amiga/V${VERNUM}
# tools
ASM=		${VERDIR}/tools/bin/cassem
ASMTAGS=	${VERDIR}/tools/sh/asmtags
ATOM=		${VERDIR}/tools/bin/atom
BCPL=		${VERDIR}/tools/bin/bcpl
BUMPREV=	${VERDIR}/tools/sh/bumprev
CKRCS=		${VERDIR}/tools/sh/ckrcs
#LDRCS=		${VERDIR}/tools/sh/ldrcs
LINK=		${VERDIR}/tools/bin/calink
MAKEINCLUDE=	${VERDIR}/tools/bin/makeinclude
MMINSTALL=	${VERDIR}/tools/sh/mminstall
RESETREV=	${VERDIR}/tools/sh/resetrev
REVLABEL=	${VERDIR}/tools/sh/revlabel
STRIPF=		${VERDIR}/tools/bin/stripf
SFDTOOL=	${VERDIR}/tools/bin/sfd
# tools without sources
CC=		nmetacc
CTAGS=		ctags
CXTAGS=		${VERDIR}/tools/cxtags
MAKE=		make
#
SRCPATH=	${VERDIR}/src/${SRCDIRPATH}/${SRCDIR}
#SYSINCL=	${VERDIR}/include.strip
SYSINCLNS=	${VERDIR}/include
#EXTINCL=	${SYSINCL}/${SUBSYSGROUP}
EXTINCLNS=	${SYSINCLNS}/${SUBSYSGROUP}
#INTINCL=	${SYSINCL}/internal
INTINCLNS=	${SYSINCLNS}/internal
LIBDIR=		${VERDIR}/lib
DOCDIR=		${VERDIR}/doc
METAFILE=	${VERDIR}/tools/makemeta
LIBSFD=		${LIBDIR}/sfd
DEPENDFILE=	${SUBSYSNAME}${VERNUM}.depend
LFILES=		${MYLIBS} ${VERDIR}/lib/amiga.lib
RCSFILES=	${AFILES} ${CFILES} ${BFILES} \
		${HFILES} ${IFILES} ${GFILES} \
		${MAKEFILE} ${MISCSRC} ${MISCDOC} ${SUBSYSNAME}_lib.sfd
AINCL=		-i \"${MYINCL} ${SYSINCLNS}\"
CINCL=		-I -I${MYINCL} -I${SYSINCLNS}
SYMBOLOPT=	,S
.SUFFIXES:
.SUFFIXES:	.h .i .sfd .rev .ld .oCm .ocm .obj .c .b .asm

default:
	@echo 'But what do you want to make?'

.INCLUDE=${DEPENDFILE}
.c.obj:
	@echo ${CFLAGS} $<:
	@${CC} -S -X54 -X104 -X106 ${CFLAGS} ${CINCL} $*.c
	@if test "${CAPP}"; then ( \
	    ${CAPP} < $*.asm > $*.asm.TMP; \
	    mv $*.asm.TMP $*.asm; ); \
	else ( if test "${CAPP2}"; then ( \
	    ${CAPP2} < $*.asm > $*.asm.TMP; \
	    mv $*.asm.TMP $*.asm; ); fi; ); fi
	@${ASM} $*.asm -o $*.obj.TMP -c q,a${SYMBOLOPT} ${CAFLAGS}
	@rm -f $*.asm $@
	@mv $@.TMP $@
.b.obj:
	@echo ${BFLAGS} $<:
	@${BCPL} $*.b $*.obj.TMP opt '"${BFLAGS}"' obj a \
		inc \"${MYINCL} ${SYSINCLNS}\"
	@mv $*.obj.TMP $@
.asm.obj:
	@echo $<:
	@if test "${APP}"; \
	    then( \
		${APP} < $< > $*.asm.TMP; \
		${ASM} $*.asm.TMP -o $@.TMP -c q,a${SYMBOLOPT} ${AFLAGS} \
	    		${AINCL}; \
		rm -f $*.asm.TMP; \
	    ); else( \
		${ASM} $*.asm -o $@.TMP -c q,a${SYMBOLOPT} ${AFLAGS} \
	    		${AINCL}; \
		); \
	    fi
	@rm -f $@
	@mv $@.TMP $@
.obj.oCm:
	@echo $<:
	@${ATOM} $*.obj $*.obj.TMP -CCDB
	@mv -f $*.obj.TMP $@
.obj.ocm:
	@echo $<:
	@${ATOM} $*.obj $*.obj.TMP -CDB -PC
	@mv -f $*.obj.TMP $@
.rev.i .rev.h:
	@${BUMPREV} ${VERNUM} $* $?
.sfd.i:
	@echo $@:
	@rm -f $@
	@${SFDTOOL} -i $*.sfd
clean::	${SUBDIRS} ${SUBMAKES}
	rm -f *.obj *.o[cC]m *.ld *.ld.strip *.[cs]rec *TMP[' '0-9] *.lis *.xr0 \
	    *.even *.odd *.CKP *.BAK *.TMP *.TMP? awkvers.* *.with *.depend \
	    *.[csl]map *.cat *.xref core *.lib
	rm -rf TMPD
${SUBSYSNAME}.with with:	${SUBDIRS} ${SUBMAKES} ${MAKEFILE} ${METAFILE}
	@echo ${SUBSYSNAME}.with:
	-@if test -z "${WITH}"; \
	    then( \
	    cat < /dev/null > TMP1; \
	    for i in ${STARTUP} ${FIRSTO} ${OFILES} TMP1 ; do \
		( echo $$i | sed -n -e "/TMP1/!s/$$/,*/p" >> TMP1 ); done; \
	    for i in ${OCMFILES} TMP1 ; do \
		( echo $$i | sed -n -e "/TMP1/!s/$$/,*/p" >> TMP1 ); done; \
	    sed -e "\$$s/,\*$$//" TMP1 > TMP2; \
	    echo "FROM *" > TMP1; \
	    cat TMP1 TMP2 > ${SUBSYSNAME}.with.new; \
	    cat < /dev/null > TMP1; \
	    for i in ${LFILES} TMP1 ; do \
		( echo $$i | sed -n -e "/TMP1/!s/$$/,*/p" >> TMP1 ); done; \
	    sed -e "\$$s/,\*$$//" TMP1 > TMP2; \
	    echo "LIBRARY *" > TMP1; \
	    cat TMP1 TMP2 >> ${SUBSYSNAME}.with.new; \
	    rm -f TMP1 TMP2; \
	    mv -f ${SUBSYSNAME}.with.new ${SUBSYSNAME}.with; \
	    ); \
	    else( \
	    cat ${WITH} > TMP1; \
	    cat TMP1 > ${SUBSYSNAME}.with; \
	    rm -f TMP1 \
	    ); fi
${DEPENDFILE} depend::	${SUBDIRS} ${SUBMAKES}
	@echo ${DEPENDFILE}
	@echo "# DO NOT CHANGE THIS FILE" > ${DEPENDFILE}.new
	@rm -f TMP1
	@${MAKEINCLUDE} -a ${AFILES} TMP1 -i . ${MYINCL} ${SYSINCLNS} | \
	    sed -e "s/\.asm:/.obj:/" > ${DEPENDFILE}.new
	@${MAKEINCLUDE} -c ${CFILES} TMP1 -i . ${MYINCL} ${SYSINCLNS} | \
	    sed -e "s/\.c:/.obj:/" >> ${DEPENDFILE}.new
	-@if test "${FIRSTO}"; \
	    then ( \
	    echo "DEPENDS= \\" >> ${DEPENDFILE}.new; \
	    grep ${FIRSTO} ${DEPENDFILE}.new > TMP1; \
	    sed -e "s/.*://" TMP1 > TMP2; \
	    sed -e "\$$!s/$$/ \\\\/" TMP2 >> ${DEPENDFILE}.new \
	); fi
	@for i in ${OCMFILES} TMP2 ; do \
	    ( echo $$i | sed -n -e \
	    "s/\(.*\)\.\(o[cC]m\)$$/\1.\2:	\1.obj/p" \
	    >> ${DEPENDFILE}.new ); done;
	@echo '# DO NOT ADD DEPENDANCIES HERE!' >> ${DEPENDFILE}.new
	@echo '# THEY WILL BE REMOVED.' >> ${DEPENDFILE}.new
	@rm -f TMP1 TMP2
	@mv -f ${DEPENDFILE}.new ${DEPENDFILE}
headers::	${SUBDIRS} ${SUBMAKES}
#	# verify write access to release directory
	@sh -c 'test -w ${VERDIR}/tools/touchable || \
	    { echo ${VERDIR} not writable ; exit 1; }'
#       # copy over the external includes
	${MMINSTALL} ${EXTINCLNS} ${EXTERNHFILES} ${EXTERNIFILES}
	${MMINSTALL} ${INTINCLNS} ${INTERNHFILES} ${INTERNIFILES}
#       # now, if this is a library, copy over the library interface function
#       # description.  Note that this will not make it
	${MMINSTALL} ${LIBSFD} ${SUBSYSNAME}_lib.sfd
internal::	${SUBDIRS} ${SUBMAKES}
#	# verify write access to release directory
#
#       # make sure the necessary macros are defined
#
#       # make sure everything is checked in and properly labeled
#
#       # copy over all files to the source directory
#
#       # now copy over the external includes in both unstripped and stripped
#	# form.
#
#       # now copy over the autodoc file, if it exists
#
#       # now, if this is a library, copy over the library interface function
#       # description.  Note that this will not make it
#
	@echo make internal:
	@sh -c 'test -w ${VERDIR}/tools/touchable || \
	    { echo ${VERDIR} not writable ; exit 1; }'
	@sh -c 'test "${SRCDIR}" || { echo no SRCDIR macro defined ; exit 1; }'
	@echo "    making sure everything is checked in..."
	@${CKRCS} ${VERNUM} ${SRCPATH} ${RCSFILES}
	-@if test ! "${LIBNAME}"; then ( \
	    echo "    labelling rcs files..."; \
	    if test -r ${SUBSYSNAME}_rev.rev; then \
		${REVLABEL} ${SRCPATH} V${VERNUM}_`cat ${SUBSYSNAME}_rev.rev` \
		    ${RCSFILES}; \
	    fi \
	); fi
	-@if test ! "${LIBNAME}"; then ( \
	    echo "    copying sources over to server..."; \
	    ${MMINSTALL} ${SRCPATH} ${RCSFILES} \
		${SUBSYSNAME}.lib ${SUBSYSNAME}.ld ${SUBSYSNAME}.ld.strip \
		${SUBSYSNAME}_rev.h ${SUBSYSNAME}_rev.i ${SUBSYSNAME}_rev.rev ${SUBSYSNAME}.info; \
	    echo "    copying includes over to server..."; \
	    ${MMINSTALL} ${EXTINCLNS} ${EXTERNHFILES} \
		${EXTERNIFILES}; \
	    ${MMINSTALL} ${INTINCLNS} ${INTERNHFILES} \
		${INTERNIFILES}; \
	    echo "    copying doc and sfd files over to server..."; \
	    ${MMINSTALL} ${DOCDIR} ${SUBSYSNAME}.doc ; \
	    ${MMINSTALL} ${LIBSFD} ${SUBSYSNAME}_lib.sfd ; \
	    ${MMINSTALL} ${DOCDIR}/Miscdoc ${MISCDOC} \
	); fi
	-@if test "${LIBNAME}"; then ( \
	    echo make internal -- lib/${LIBNAME}/${SRCDIRPATH}/${SRCDIR}; \
	    mkdir ${LIBDIR}/${LIBNAME}/${SRCDIRPATH}/${SRCDIR}; \
	    ${MMINSTALL} \
		${LIBDIR}/${LIBNAME}/${SRCDIRPATH}/${SRCDIR} \
		${RCSFILES} ${SUBSYSNAME}_lib.lib; \
	); fi
print::	${SUBDIRS} ${SUBMAKES}
	    -@for i in ${HFILES} ${IFILES} ${CFILES} ${BFILES} ${GFILES} ; do \
		(echo imprint ${PFLAGS} -2 -O -L -J $$i; \
		imprint ${PFLAGS} -2 -O -L -J $$i); done
	    -@imprintlis ${PFLAGS} -2 -O -L -J ${AFILES}
	    -@if test -r ${SUBSYSNAME}.doc; then \
		(echo imprint ${PFLAGS} -2 -O -L ${SUBSYSNAME}.doc; \
		imprint ${PFLAGS} -2 -O -L ${SUBSYSNAME}.doc); fi
${SUBSYSNAME}_rev.i ${SUBSYSNAME}_rev.h: ${SUBSYSNAME}_rev.rev \
	    ${OFILES} ${OCMFILES} ${DEPENDS}
${SUBSYSNAME}_rev.rev:
	echo 0 > ${SUBSYSNAME}_rev.rev
	chmod 666 ${SUBSYSNAME}_rev.rev

${SUBSYSNAME}.ld ${SUBSYSNAME}.lmap: ${OFILES} ${OCMFILES} ${FIRSTO} \
	    ${LFILES} ${SUBSYSNAME}.with
	@`echo ${LFLAGS} | sed -n -e "s/.*XREF=\([^ 	]*\).*/rm -f \1/p"`
	@`echo ${LFLAGS} | sed -n -e "s/.*MAP=\([^ 	]*\).*/rm -f \1/p"`
	${LINK} with=${SUBSYSNAME}.with ${LFLAGS} to=${SUBSYSNAME}.ld.TMP
	@${STRIPF} ${SUBSYSNAME}.ld.TMP ${SUBSYSNAME}.ld.strip.TMP
	@mv ${SUBSYSNAME}.ld.TMP ${SUBSYSNAME}.ld
	@mv ${SUBSYSNAME}.ld.strip.TMP ${SUBSYSNAME}.ld.strip
	@chmod a+wx ${SUBSYSNAME}.ld ${SUBSYSNAME}.ld.strip
	@`echo ${LFLAGS} | sed -n -e "s/.*XREF=\([^ 	]*\).*/chmod a+w \1/p"`
	@`echo ${LFLAGS} | sed -n -e "s/.*MAP=\([^ 	]*\).*/chmod a+w \1/p"`
${SUBSYSNAME}_lib.lib:	${OFILES} ${OCMFILES} ${FIRSTO}
	rm -f ${SUBSYSNAME}_lib.lib
	cat ${FIRSTO} ${OFILES} ${OCMFILES} > ${SUBSYSNAME}_lib.lib
${SUBSYSNAME}.lib:	${OFILES} ${OCMFILES} ${FIRSTO}
	rm -f ${SUBSYSNAME}.lib
	cat ${FIRSTO} ${OFILES} ${OCMFILES} > ${SUBSYSNAME}.lib
${SUBSYSNAME}.doc:	FRC
	${MAKE} cat
	@echo ${SUBSYSNAME}.doc
	@rm -f ${SUBSYSNAME}.doc
	autodoc ${DFLAGS} ${SUBSYSNAME}.cat > ${SUBSYSNAME}.doc
	rm -f ${SUBSYSNAME}.cat
${SUBSYSNAME}.cat:	${SUBMAKES} FRC
	@echo ${SUBSYSNAME}.cat
	@rm -f ${SUBSYSNAME}.cat
	@mkdir TMPD
	@for i in ${SUBDIRS} TMPD ; do \
	    ( ( cd $$i; cat /dev/null `ls *.cat`; rm -f *.cat ) \
	    >> ${SUBSYSNAME}.cat ); done
	@cat /dev/null ${AFILES} ${CFILES} >> ${SUBSYSNAME}.cat
	@rmdir TMPD
cat:	${SUBDIRS} ${SUBMAKES} ${SUBSYSNAME}.cat
hard:	${SUBDIRS} ${SUBMAKES}
	-@if test "${SUBDIRS}" ; \
	then (\
	    for i in ${SUBDIRS} ; do \
		( cd $$i; make hard ); done; \
	); fi
	@imprint -2 -L -Plab Makefile ${IFILES} ${AFILES} ${HFILES} ${CFILES} \
	    ${GFILES} ${BFILES}
tags:	${SUBDIRS} ${SUBMAKES} ${AFILES} ${CFILES} ${HFILES}
	@rm -f tags
	-@if test "${SUBSYSNAME}"; then ( \
	    ${CTAGS} -t -w -a ${CFILES} ${HFILES} >/dev/null; \
	    ${CXTAGS} ${HFILES} 2>/dev/null | sed "s/ /	/" >>tags; \
	    ${ASMTAGS} ${AFILES} >>tags; \
	    mv tags ${SUBSYSNAME}.tags \
	); fi
	@for i in ${SUBDIRS} TMPD ; do ( \
	    if test "$$i" != "TMPD"; then ( \
		sed "s/	/	$$i\//" $$i/tags >$$i.tags; \
		rm -f $$i/*.tags \
	    ); fi \
	); done
	@cat *.tags | sort +0 -1 -u >tags
#co:
#	@${LDRCS} co ${SRCPATH}
#ci:
#	@${LDRCS} ci ${SRCPATH}
#uco:
#	@${LDRCS} uco ${SRCPATH}
#coall::	${SUBDIRS} ${SUBMAKES}
#	@for i in ${RCSFILES} ; do \
#	    ( export cofile; cofile=${SRCPATH}/RCS/$$i,v ; \
#		if test -r $$cofile; then co $$cofile; fi ); done;
resetrev:: ${SUBDIRS} ${SUBMAKES}
	@${RESETREV} ${SRCPATH} ${VERNUM} ${SUBSYSNAME}_rev.rev \
		"${SUBDIRS}" ${MAKEFILE}
checklocks:	${SUBDIRS} ${SUBMAKES}
	@checklocks ${AFILES} ${CFILES} ${BFILES} ${IFILES} ${HFILES} \
	    ${GFILES} ${MAKEFILE} ${MISCSRC} /dev/null
TMPD ${SUBMAKES}: FRC
	${MAKE} -f $@ ${MFLAGS} ${MARGS}

TMPD ${SUBDIRS}: FRC
	cd $@; ${MAKE} ${MFLAGS} ${MARGS}

rom:	${SUBSYSNAME}.ld

doc:	${SUBSYSNAME}.doc

FRC: 
