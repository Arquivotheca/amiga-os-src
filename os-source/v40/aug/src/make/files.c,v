head     1.9;
branch   ;
access   ;
symbols  RSBX:1.5.1 NOUNIX:1.4 NATIVE:1.3;
locks    ; strict;
comment  @ * @;


1.9
date     90.04.18.01.03.19;  author Kevin;  state Exp;
branches ;
next     1.8;

1.8
date     90.04.17.11.30.59;  author Kevin;  state Exp;
branches ;
next     1.7;

1.7
date     90.02.14.15.30.57;  author Kevin;  state Exp;
branches ;
next     1.6;

1.6
date     90.01.10.15.54.13;  author Kevin;  state Exp;
branches ;
next     1.5;

1.5
date     89.12.05.13.06.53;  author Kevin;  state Exp;
branches 1.5.1.1;
next     1.4;

1.4
date     89.11.27.22.39.43;  author Kevin;  state Exp;
branches ;
next     1.3;

1.3
date     89.11.25.23.43.26;  author Kevin;  state Exp;
branches ;
next     1.2;

1.2
date     89.11.25.19.54.03;  author Kevin;  state Exp;
branches ;
next     1.1;

1.1
date     89.11.25.16.30.05;  author Kevin;  state Exp;
branches ;
next     ;

1.5.1.1
date     89.12.06.14.39.01;  author rsbx;  state Exp;
branches ;
next     1.5.1.2;

1.5.1.2
date     89.12.06.15.08.25;  author Kevin;  state Exp;
branches ;
next     ;


desc
@Routines to perform various file status checks.
@


1.9
log
@Quashed the last bug (Thankx, Ray, for giving me the bug
in the first place in your UXMAIN stuff.)
@
text
@/* DEFAULT RULES FOR UNIX */

/***********************************************************************\
*																		*
*	KNK		CMDSUFFIX and CMDPREFIX macro handling included				*
*																		*
\***********************************************************************/

#include <proto/all.h>

char *builtin[] =
{
    ".SUFFIXES : .o .c ",
    "LFLAGS=",
    "CC=lc",
    "CC1=lc1 -.",
    "CC3=lc2 -.",
    "AS=casm -a",
    "CFLAGS=",
    "CMDPREFIX=SIGNAL ON ERROR; SIGNAL ON BREAK_C;",
	"CMDSUFFIX=;EXIT 0; ERROR: EXIT RC; BREAK_C: EXIT 1700",
    ".c.o :",
    "\t@@\"$(CC1) $(C1FLAGS) $(CFLAGS) -oQUAD: $*\"; \"$(CC3) $(C3FLAGS) -o$*.o QUAD:$*.q\"",

    0 };

#include "defs.h"
#include	<exec/memory.h>


TIMETYPE exists(filename)
char *filename;
{
	BPTR					TheFileLock;
	struct FileInfoBlock	*theInfo;
	ULONG					TheTime;
	int						returncode;
    register char *s;

    for(s = filename ; *s!='\0' && *s!='(' ; ++s);

	TheTime = 0L;
	TheFileLock = Lock(filename, SHARED_LOCK);
	if(TheFileLock) {
		if (!(theInfo = (struct FileInfoBlock *)AllocMem(sizeof(struct FileInfoBlock), MEMF_CLEAR | MEMF_PUBLIC))) {
			UnLock(TheFileLock);
			fatal("Out of memory");
			}
		if(returncode = Examine(TheFileLock, theInfo))
			TheTime = (ULONG)theInfo->fib_Date.ds_Tick / 60L +
						(ULONG)theInfo->fib_Date.ds_Minute * 3600L +
						  (ULONG)theInfo->fib_Date.ds_Days * 24L * 60L * 3600L;
		FreeMem(theInfo, sizeof(struct FileInfoBlock));
		UnLock(TheFileLock);
		}
	return(TheTime);
}


TIMETYPE prestime()
{
    TIMETYPE t;
    time(&t);
    return(t);
}



FSTATIC char nbuf[MAXNAMLEN + 1];
FSTATIC char *nbufend	= &nbuf[MAXNAMLEN];



struct depblock *srchdir(pat, mkchain, nextdbl)
register char	*pat; 					/* pattern to be matched in directory */
int				 mkchain;				/* nonzero if results to be remembered */
struct depblock *nextdbl;  				/* final value for chain */
{
	char				*dirname,
						*dirpref,
						*endir,
						*filepat,
						*p,
						*p1,
						*p2,
						 temp[100],
						 fullname[100];
	BPTR				 dirf,
						 Lock();
   	int					 success,
						 cldir;
    struct nameblock	*q;
    struct depblock		*thisdbl;
    struct dirhdr		*od;
    struct pattern		*patp;
   struct FileInfoBlock *dptr;



    thisdbl = NULL;

    if(mkchain == NO)
		for(patp=firstpat ; patp ; patp = patp->nxtpattern)
		    if(! unequal(pat, patp->patval))
				return(0);

    patp = ALLOC(pattern);
    patp->nxtpattern = firstpat;
    firstpat = patp;
    patp->patval = copys(pat);

    endir = NULL;

    for(p=pat; *p!='\0'; ++p)
		if(*p=='/') endir = p;

    if(endir==NULL) {
		if(!(dirname = (char *)AllocMem(MAXNAMLEN + 1, MEMF_PUBLIC | MEMF_CLEAR)))
			fatal ("cannot allocate memory for directory name");
		if(!getcwd(dirname,MAXNAMLEN)) {
			FreeMem(dirname, MAXNAMLEN + 1);
			fatal("Could not find current directory");
			}

		if (dbgflag)
			printf("current directory name is (hopefully) \"%s\".\n",dirname);

		dirpref = "";
		filepat = pat;
	    }
    else    {
		dirname = pat;
		*endir = '\0';
		dirpref = concat(dirname, "/", temp);
		filepat = endir+1;
	    }

    dirf = NULL;
    cldir = NO;

    for(od = firstod; od; od = od->nxtopendir)
		if(! unequal(dirname, od->dirn) ) {
		    dirf = od->dirfc;
		    break;
			}
    if(dirf == NULL) {
		dirf = Lock(dirname, SHARED_LOCK);
		if(nopdir >= MAXDIR)
		    cldir = YES;
		else	{
		    ++nopdir;
		    od = ALLOC(dirhdr);
		    od->nxtopendir = firstod;
		    firstod = od;
		    od->dirfc = dirf;
		    od->dirn = copys(dirname);
			}
    	}

    if(dirf == NULL) {
		fprintf(stderr, "Directory %s: ", dirname);
		FreeMem(dirname, MAXNAMLEN+1);
		fatal("Cannot open");
	    }

    else
		if((dptr = ALLOC(FileInfoBlock)) == NULL) {
			fprintf(stderr, "Directory %s: ", dirname);
			FreeMem(dirname, MAXNAMLEN+1);
			fatal("cannot allocate memory for FileInfoBlock");
			}
		
		for (success = Examine(dirf, dptr); success; success = ExNext(dirf, dptr)) {
			p1 = dptr->fib_FileName;
			p2 = nbuf;
			while( (p2<nbufend) && (*p2++ = *p1++)!='\0' );
			if( amatch(nbuf,filepat) ) {
			    concat(dirpref,nbuf,fullname);
			    if( (q=srchname(fullname)) ==0)
					q = makename(copys(fullname));
	    		if(mkchain) {
					thisdbl = ALLOC(depblock);
					thisdbl->nxtdepblock = nextdbl;
					thisdbl->depname = q;
					nextdbl = thisdbl;
	    			}
				}
    		}

	if(endir != 0)
		*endir = '/';

    if(cldir) {
		UnLock(dirf);
		FreeMem(dirname, MAXNAMLEN+1);
		dirf = NULL;
	    }

	free(dptr);
    return(thisdbl);
}

/* stolen from glob through find */

static amatch(s, p)
char *s, *p;
{
    register int cc, scc, k;
    int c, lc;

    scc = *s;
    lc = 077777;
    switch (c = *p) {

    	case '[':
			k = 0;
			while (cc = *++p) {
	    		switch (cc) {

	    			case ']':
						if (k)
			    			return(amatch(++s, ++p));
						else
			    			return(0);
	
	    			case '-':
						k |= (lc <= scc)  & (scc <= (cc=p[1]) ) ;
	    			}
	    		if (scc==(lc=cc)) k++;
				}
			return(0);

    	case '?':
		caseq:
			if(scc) return(amatch(++s, ++p));
			return(0);

		case '*':
			return(umatch(s, ++p));

		case 0:
			return(!scc);
    	}
    if (c==scc)
		goto caseq;
    return(0);
}

static umatch(s, p)
char *s, *p;
{
    if(*p==0) return(1);
    while(*s)
		if (amatch(s++,p))
			return(1);
    return(0);
}

eqstr(a,b,n)
register char *a, *b;
int n;
{
    register int i;
    for(i = 0 ; i < n ; ++i)
		if(*a++ != *b++)
		    return(NO);
    return(YES);
}
@


1.8
log
@added Prototypes.
@
text
@d120 1
a120 1
		if(getcd(0, dirname)) {
d124 3
@


1.7
log
@Included command histroy header
@
text
@d9 2
d75 2
a76 2
register char *pat; 					/* pattern to be matched in directory */
int mkchain;  							/* nonzero if results to be remembered */
d79 1
a79 6
				BPTR	 dirf,
						 Lock();
   struct FileInfoBlock *dptr;
   				int		 success;
				int		 cldir;
    			char	*dirname,
a83 2
						 temp[100];
    			char	 fullname[100],
d85 7
a91 1
						*p2;
d96 1
@


1.6
log
@Checkpointing update since I'm not sure how this file is synched
with my current working copy due to hacking/modifications from
Ray Brand.
@
text
@d2 6
@


1.5
log
@various bug fixes.
@
text
@d8 2
d12 2
a13 2
    "CMDPREFIX=SIGNAL ON ERROR;",
	"CMDSUFFIX=;EXIT 0; ERROR: EXIT RC",
d15 1
a15 1
    "\t\"$(CC) $(CFLAGS) -c $<\"",
a109 1
#ifdef AMIGA
a115 3
#else
		dirname = ".";
#endif
@


1.5.1.1
log
@more changes.
@
text
@a7 2
    "CC1=lc1 -.",
    "CC3=lc2 -.",
d10 2
a11 2
    "CMDPREFIX=SIGNAL ON ERROR; SIGNAL ON BREAK_C;",
	"CMDSUFFIX=;EXIT 0; ERROR: EXIT RC; BREAK_C: EXIT 1700",
d13 1
a13 1
    "\t@@\"$(CC1) $(C1FLAGS) $(CFLAGS) -oQUAD: $*\"; \"$(CC3) $(C3FLAGS) -o$*.o QUAD:$*.q\"",
@


1.5.1.2
log
@Modified built in rules slightly to match what _I_
think they oughtta be (Nyah Nyah, Ray).
@
text
@d15 1
a15 1
    "\t\"$(CC1) $(C1FLAGS) $(CFLAGS) -oQUAD: $*\"; \"$(CC3) $(C3FLAGS) -o$*.o QUAD:$*.q\"",
d110 1
d117 3
@


1.4
log
@Removed all code specific to GCOS or UNIX
@
text
@d10 2
a11 1

d13 1
a13 1
    "\t$(CC) $(CFLAGS) -c $<",
@


1.3
log
@*** empty log message ***
@
text
@a0 3
static	char *sccsid = "@@(#)files.c 4.8 (Berkeley) 83/06/30"; /* UNIX DEPENDENT PROCEDURES */


d17 1
a17 3
#ifdef AMIGA
#	include	<exec/memory.h>
#endif
a22 5
#ifdef UNIX
#include <sys/stat.h>
    struct stat buf;
    TIMETYPE lookarch();
#else
a26 2
#endif

a30 9
#ifdef UNIX
    if(*s == '(')
		return(lookarch(filename));

    if (stat(filename, &buf) < 0)
		return(0);
    else
		return(buf.st_mtime);
#else
a45 1
#endif
a67 6
#ifdef UNIX
			    DIR		*dirf;
    struct direct 		*dptr;
    register	int 	 i;
    			int		 nread;
#else
a71 1
#endif
a136 3
#ifdef UNIX
		dirf = opendir(dirname);
#else
a137 1
#endif
a151 1
#ifdef AMIGA
a152 1
#endif
a156 4
#ifdef UNIX
		for (dptr = readdir(dirf); dptr != NULL; dptr = readdir(dirf)) {
			p1 = dptr->d_name;
#else
a164 1
#endif
a183 3
#ifdef UNIX
		closedir(dirf);
#else
a185 1
#endif
a188 1
#ifndef UNIX
a189 1
#endif
a247 194

#ifdef METERFILE
#include <pwd.h>
int meteron = 0;    /* default: metering off */

meter(file)
char *file;
{
    TIMETYPE tvec;
    char *p, *ctime();
    FILE * mout;
    struct passwd *pwd, *getpwuid();

    if(file==0 || meteron==0)
		return;

    pwd = getpwuid(getuid());

    time(&tvec);

    if( (mout=fopen(file,"a")) != NULL ) {
		p = ctime(&tvec);
		p[16] = '\0';
		fprintf(mout,"User %s, %s\n",pwd->pw_name,p+4);
		fclose(mout);
    	}
}
#endif


#ifdef	UNIX
/* look inside archives for notations a(b) and a((b))
    a(b)    is file member   b	 in archive a
    a((b))  is entry point  _b	in object archive a
*/

#ifdef ASCARCH
#  	include <ar.h>
#else
#  	include <ar.h>
#endif
#include <a.out.h>

static long arflen;
static long arfdate;
static char arfname[16];
FILE *arfd;
long int arpos, arlen;

static struct exec objhead;

static struct nlist objentry;


TIMETYPE lookarch(filename)
char *filename;
{
    char	*p,
			*q,
			*send,
			 s[MAXNAMLEN + 1];

    int		 i,
			 nc,
			nsym,
			objarch;

    for(p = filename; *p!= '(' ; ++p);
    *p = '\0';
    openarch(filename);
    *p++ = '(';

    if(*p == '(') {
		objarch = YES;
		nc = 8;
		++p;
    	}
    else {
		objarch = NO;
		nc = MAXNAMLEN;
    	}
    send = s + nc;

    for( q = s ; q<send && *p!='\0' && *p!=')' ; *q++ = *p++ );
    while(q < send)
		*q++ = '\0';
    while(getarch()) {
		if(objarch) {
	    	getobj();
	    	nsym = objhead.a_syms / sizeof(objentry);
	    	for(i = 0; i<nsym ; ++i) {
				fread( (char *) &objentry, sizeof(objentry),1,arfd);
				if( (objentry.n_type & N_EXT)
		    		&& ((objentry.n_type & ~N_EXT) || objentry.n_value)
			    		&& eqstr(objentry.n_un.n_name,s,nc)) {
		    		clarch();
		    		return(arfdate);
					}
	    		}
			}

		else
			if( eqstr(arfname, s, nc)) {
	    		clarch();
	    		return(arfdate);
				}
    	}

    clarch();
    return( 0L);
}


clarch()
{
    fclose( arfd );
}


openarch(f)
register char *f;
{
#ifdef ASCARCH
    char magic[SARMAG];
#endif
    int word;
#include <sys/stat.h>
    struct stat buf;

    stat(f, &buf);
    arlen = buf.st_size;

    arfd = fopen(f, "r");
    if(arfd == NULL)
		fatal1("cannot open %s", f);

    fread( (char *) &word, sizeof(word), 1, arfd);
#ifdef ASCARCH
    fseek(arfd, 0L, 0);
    fread(magic, SARMAG, 1, arfd);
    arpos = SARMAG;
    if( ! eqstr(magic, ARMAG, SARMAG) )
#else
	arpos = sizeof(word);
    if(word != ARMAG)
#endif
		fatal1("%s is not an archive", f);

    arflen = 0;
}



getarch()
{
    struct ar_hdr arhead;
    long atol();

    arpos += (arflen + 1) & ~1L;    /* round archived file length up to even */
    if(arpos >= arlen)
	return(0);
    fseek(arfd, arpos, 0);

    fread( (char *) &arhead, sizeof(arhead), 1, arfd);
    arpos += sizeof(arhead);
#ifdef ASCARCH
    arflen = atol(arhead.ar_size);
    arfdate = atol(arhead.ar_date);
#else
    arflen = arhead.ar_size;
    arfdate = arhead.ar_date;
#endif
    strncpy(arfname, arhead.ar_name, sizeof(arhead.ar_name));
    return(1);
}


getobj()
{
    long int skip;

    fread( (char *) &objhead, sizeof(objhead), 1, arfd);
    if (N_BADMAG(objhead))
		fatal1("%s is not an object module", arfname);
    skip = objhead.a_text + objhead.a_data;
#if defined(vax) || defined(sun)
    skip += objhead.a_trsize + objhead.a_drsize;
#else
    if(! objhead.a_flag )
		skip *= 2;
#endif
    fseek(arfd, skip, 1);
}
#endif /* #if UNIX */
@


1.2
log
@fixes.

@
text
@d19 1
a19 1
#include "defs"
@


1.1
log
@Initial revision
@
text
@d8 1
a8 10
#ifdef pwb
    ".SUFFIXES : .L .out .o .c .f .e .r .y .yr .ye .l .s .z .x .t .h .cl",
#else
    ".SUFFIXES : .out .o .c .F .f .e .r .y .yr .ye .l .s .cl .p",
#endif
    "YACC=yacc",
    "YACCR=yacc -r",
    "YACCE=yacc -e",
    "YFLAGS=",
    "LEX=lex",
d10 2
a11 8
    "CC=cc",
#if defined(vax) || defined(sun)
    "AS=as",
#else
    "AS=as -",
#endif
    "PC=pc",
    "PFLAGS=",
a12 12
    "RC=f77",
    "RFLAGS=",
    "FC=f77",
    "EFLAGS=",
    "FFLAGS=",
    "LOADLIBES=",
#ifdef pwb
    "SCOMP=scomp",
    "SCFLAGS=",
    "CMDICT=cmdict",
    "CMFLAGS=",
#endif
a15 86

    ".p.o :",
    "\t$(PC) $(PFLAGS) -c $<",

    ".cl.o :",
    "\tclass -c $<",

    ".e.o .r.o .F.o .f.o :",
    "\t$(FC) $(RFLAGS) $(EFLAGS) $(FFLAGS) -c $<",

    ".s.o :",
    "\t$(AS) -o $@@ $<",

    ".y.o :",
    "\t$(YACC) $(YFLAGS) $<",
    "\t$(CC) $(CFLAGS) -c y.tab.c",
    "\trm y.tab.c",
    "\tmv y.tab.o $@@",

    ".yr.o:",
    "\t$(YACCR) $(YFLAGS) $<",
    "\t$(RC) $(RFLAGS) -c y.tab.r",
    "\trm y.tab.r",
    "\tmv y.tab.o $@@",

    ".ye.o :",
    "\t$(YACCE) $(YFLAGS) $<",
    "\t$(EC) $(RFLAGS) -c y.tab.e",
    "\trm y.tab.e",
    "\tmv y.tab.o $@@",

    ".l.o :",
    "\t$(LEX) $(LFLAGS) $<",
    "\t$(CC) $(CFLAGS) -c lex.yy.c",
    "\trm lex.yy.c",
    "\tmv lex.yy.o $@@",

    ".y.c :",
    "\t$(YACC) $(YFLAGS) $<",
    "\tmv y.tab.c $@@",

    ".l.c :",
    "\t$(LEX) $(LFLAGS) $<",
    "\tmv lex.yy.c $@@",

    ".yr.r:",
    "\t$(YACCR) $(YFLAGS) $<",
    "\tmv y.tab.r $@@",

    ".ye.e :",
    "\t$(YACCE) $(YFLAGS) $<",
    "\tmv y.tab.e $@@",

#ifdef pwb
    ".o.L .c.L .t.L:",
    "\t$(SCOMP) $(SCFLAGS) $<",

    ".t.o:",
    "\t$(SCOMP) $(SCFLAGS) -c $<",

    ".t.c:",
    "\t$(SCOMP) $(SCFLAGS) -t $<",

    ".h.z .t.z:",
    "\t$(CMDICT) $(CMFLAGS) $<",

    ".h.x .t.x:",
    "\t$(CMDICT) $(CMFLAGS) -c $<",
#endif

    ".s.out .c.out .o.out :",
    "\t$(CC) $(CFLAGS) $< $(LOADLIBES) -o $@@",

    ".f.out .F.out .r.out .e.out :",
    "\t$(FC) $(EFLAGS) $(RFLAGS) $(FFLAGS) $< $(LOADLIBES) -o $@@",
    "\t-rm $*.o",

    ".y.out :",
    "\t$(YACC) $(YFLAGS) $<",
    "\t$(CC) $(CFLAGS) y.tab.c $(LOADLIBES) -ly -o $@@",
    "\trm y.tab.c",

    ".l.out :",
    "\t$(LEX) $(LFLAGS) $<",
    "\t$(CC) $(CFLAGS) lex.yy.c $(LOADLIBES) -ll -o $@@",
    "\trm lex.yy.c",
@
