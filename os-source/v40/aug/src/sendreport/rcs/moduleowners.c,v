head     39.0;
branch   ;
access   ;
symbols  ;
locks    davidj:39.0; strict;
comment  @ * @;


39.0
date     92.07.16.17.29.50;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.0
log
@initial RCS
@
text
@#include <exec/types.h>
#include <exec/libraries.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <string.h>
#include <stdio.h>

#include <clib/dos_protos.h>
#include <clib/exec_protos.h>

#include <pragmas/dos_pragmas.h>
#include <pragmas/exec_pragmas.h>

/*****************************************************************************/

#define	INPUT_NAME	"ENG:shared/amiga/Bugs/ReportGen/ModuleOwners"
#define	OUTPUT_NAME	"ModuleOwners.h"

/*****************************************************************************/

extern struct Library *DOSBase, *SysBase;

/*****************************************************************************/

#define	QUOTE		34
#define	RSLASH		92
#define isspace(c)	((c==' ')||(c=='\t')||(c=='\n')||(c=='\r')||(c==','))
#define	EVEN(a)		((a%2)?0:1)
#define	MAXARGS		64

/*****************************************************************************/

ULONG ParseString (STRPTR line, STRPTR *argv, ULONG max)
{
    int inesc = 0;
    STRPTR *pargv;
    BOOL inquote;
    int ns, nd;
    ULONG argc;
    int i;

    argc = 0L;
    for (i = 0; i < max; i++)
	argv[i] = NULL;

    while (argc < max)
    {
	while (isspace (*line))
	    line++;
	if (*line == '\0')
	    break;

	pargv = &argv[(UWORD) (argc++)];
	if (*line == QUOTE)
	{
	    inquote = TRUE;
	    ns = nd = 0;

	    if (*line == QUOTE)
		nd++;

	    *pargv = ++line;
	    while ((*line != 0L) && inquote)
	    {
		if (*line == RSLASH)
		    inesc = 1;
		else if (inesc > 0)
		    inesc++;

		if ((inesc == 0) && (*line == QUOTE))
		    nd++;

		if (EVEN (ns) && EVEN (nd))
		    inquote = FALSE;
		else
		    line++;

		if (inesc > 1)
		    inesc = 0;
	    }

	    if (*line == '\0')
		return (argc);
	    else
		*line++ = '\0';
	}
	else
	{
	    *pargv = line;
	    while ((*line != '\0') && (!isspace (*line)))
		line++;
	    if (*line == '\0')
		break;
	    else
		*line++ = '\0';
	}
    }

    argv[argc] = NULL;
    return (argc);
}

/*****************************************************************************/

UBYTE *header[] =
{
    "/* ModuleOwners.h\n",
    " *\n",
    " */\n\n",

    "struct ModuleOwners\n",
    "{\n",
    "    STRPTR mo_Module;\n",
    "    STRPTR mo_Owners;\n",
    "};\n\n",

    "struct ModuleOwners mo[] =\n",
    "{\n",
    NULL
};

UBYTE *tailer[] =
{
    "    {NULL, NULL},\n",
    "};\n",
    NULL
};

/*****************************************************************************/

int main (int argc, char **argv)
{
    STRPTR Argv[MAXARGS];
    UBYTE buffer[512];
    ULONG i, Args;
    BPTR sfh;
    BPTR dfh;

    if (sfh = Open (INPUT_NAME, MODE_OLDFILE))
    {
	if (dfh = Open (OUTPUT_NAME, MODE_NEWFILE))
	{
	    for (i = 0; header[i]; i++)
		FPuts (dfh, header[i]);
	    while (FGets (sfh, buffer, sizeof (buffer)))
	    {
		if ((Args = ParseString (buffer, Argv, MAXARGS)) >= 2)
		{
		    FPrintf (dfh, "    {\"%s\",\"%s", (LONG *)Argv[0], (LONG *)Argv[1]);
		    for (i = 2; i < Args; i++)
		    {
			FPrintf (dfh, " %s", (LONG *)Argv[i]);
		    }
		    FPuts (dfh, "\"},\n");
		}
	    }
	    for (i = 0; tailer[i]; i++)
		FPuts (dfh, tailer[i]);

	    Close (dfh);
	}
	else
	{
	    printf ("couldn't create %s\n", OUTPUT_NAME);
	}

	Close (sfh);
    }
    else
    {
	printf ("couldn't open %s\n", INPUT_NAME);
    }
}
@
