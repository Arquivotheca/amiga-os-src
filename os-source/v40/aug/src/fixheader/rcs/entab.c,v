head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     92.09.03.14.42.11;  author peter;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.06.15.35.48;  author peter;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.13.15.04.58;  author kevin;  state Exp;
branches ;
next     1.2;

1.2
date     90.07.20.18.25.56;  author kevin;  state Exp;
branches ;
next     1.1;

1.1
date     90.07.19.15.20.38;  author kevin;  state Exp;
branches ;
next     ;


desc
@entabs a source file to reduce its space usage.
Note that this function should not change the
appearance of the file at all if you wrote it with
tab stops at 8 spaces.  other tab settings will look
different.
@


1.5
log
@First native version.
@
text
@#include    "FixHeader.h"

#define FindNextTab(x) (((x/TABSIZE) + 1) * TABSIZE) + 1

unsigned int	ENTAB = 0;

int
entab(Inbuffer)
char *Inbuffer;
{
    char        Outbuffer[MAXINPUTLINELEN];
    static char InSQuote = 0, InDQuote = 0;
    static char InComment = 0;
    unsigned int LinePosition, InbufferPtr, OutbufferPtr, EndingLinePosition;
   
    if(!ENTAB)
	return 1;
    LinePosition = 1;
   
    if(strlen(Inbuffer))
    {
        OutbufferPtr = -1;
        
        for(InbufferPtr = 0; Inbuffer[InbufferPtr] != '\0'; InbufferPtr++)
        {
            switch(Inbuffer[InbufferPtr])
            {

                case '\\':
                    LinePosition++;
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr++];
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    if(Outbuffer[OutbufferPtr])
                    {
                        if(Outbuffer[OutbufferPtr] == '\t')
                            LinePosition = FindNextTab(LinePosition);
                        else
                            LinePosition++;
                    }
                    else
		    {
			strcpy(Inbuffer, Outbuffer);
                        return 1;
		    }
                    break;
                
                
                case '"':
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    if(!InComment && !InSQuote)
                        InDQuote = !InDQuote;
                    LinePosition++;
                    break;
                    
                case '\'':
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    if(!InComment && !InDQuote)
                        InSQuote = !InSQuote;
                    LinePosition++;
                    break;
                    
                case ' ':
                case '\t':
                    if(InSQuote || InDQuote)
                    {
                        Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                        if(Inbuffer[InbufferPtr] == '\t')
                            LinePosition = FindNextTab(LinePosition);
                        else
                            LinePosition++;
                    }
                    else
                    {
                        EndingLinePosition = LinePosition;
                        if(Inbuffer[InbufferPtr] == ' ')
                            EndingLinePosition++;
                        else
                            EndingLinePosition = FindNextTab(EndingLinePosition);
                        
                        while((Inbuffer[++InbufferPtr] == ' ' ) ||
                              (Inbuffer[InbufferPtr]   == '\t'))
                        {
                            if(Inbuffer[InbufferPtr] == ' ')
                                EndingLinePosition++;
                            else
                                EndingLinePosition = FindNextTab(EndingLinePosition);
                        };
                        if(Inbuffer[InbufferPtr] != '\0') 
                        {
                            if(EndingLinePosition > LinePosition+1)
				while(FindNextTab(LinePosition) <= EndingLinePosition)
                            	{
                                    Outbuffer[++OutbufferPtr] = '\t';
                                    LinePosition = FindNextTab(LinePosition);
                            	};
                            
                            while(LinePosition < EndingLinePosition)
                            {
                                Outbuffer[++OutbufferPtr] = ' ';
                                LinePosition++;
                            };
                        };
                            
                            InbufferPtr--;
                    };
                    break;
                
		case '*':
		    if((Inbuffer[InbufferPtr+1] == '/')	&&
			!InSQuote && !InDQuote && InComment)
			InComment = 0;
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    LinePosition++;
                    break;

		case '/':
		    if((Inbuffer[InbufferPtr+1] == '*')	&&
			!InSQuote && !InDQuote && !InComment)
			InComment = 1;
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    LinePosition++;
                    break;

                default:
                    Outbuffer[++OutbufferPtr] = Inbuffer[InbufferPtr];
                    LinePosition++;
                    break;
            };
        };
	Outbuffer[++OutbufferPtr] = '\0';
        strcpy(Inbuffer, Outbuffer);
	return 1;
    };
}
@


1.4
log
@As found by Peter.
@
text
@d7 1
@


1.3
log
@Modified so that if changing a space to a tab does not save
any space, then the space is NOT changed to a tab.
@
text
@d87 1
a87 1
                        if((Inbuffer[InbufferPtr] != '\0') && (EndingLinePosition > LinePosition+1))
d89 6
a94 5
                            while(FindNextTab(LinePosition) <= EndingLinePosition)
                            {
                                Outbuffer[++OutbufferPtr] = '\t';
                                LinePosition = FindNextTab(LinePosition);
                            };
@


1.2
log
@Fixes bug in which a lone quote inside a comment
would set the In[SD]Quote flag, and thereby stop tabbing
the file until another lone quote is found.
@
text
@d87 1
a87 1
                        if(Inbuffer[InbufferPtr] != '\0')
@


1.1
log
@Initial revision
@
text
@d12 1
a16 1

d27 1
d49 1
a49 1
                    if(!InSQuote)
d56 1
a56 1
                    if(!InDQuote)
a86 1
                        
d104 16
d121 1
a121 1
                
@
