head     1.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.10
date     92.09.04.11.34.35;  author peter;  state Exp;
branches ;
next     1.9;

1.9
date     92.09.03.14.53.42;  author peter;  state Exp;
branches ;
next     1.8;

1.8
date     92.09.03.14.42.19;  author peter;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.02.23.27.37;  author Kevin;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.02.16.45.57;  author kevin;  state Exp;
branches ;
next     1.5;

1.5
date     90.07.19.15.21.50;  author kevin;  state Exp;
branches ;
next     1.4;

1.4
date     90.07.11.12.07.35;  author kevin;  state Exp;
branches ;
next     1.3;

1.3
date     90.07.10.17.50.49;  author kevin;  state Exp;
branches ;
next     1.2;

1.2
date     90.07.09.16.03.51;  author kevin;  state Exp;
branches ;
next     1.1;

1.1
date     89.06.08.11.46.14;  author kevin;  state Exp;
branches ;
next     ;


desc
@The entrypoint to fixheader.  Contains main().
@


1.10
log
@Supports -y for copyright year.
@
text
@/*
**  $Header: V39:aug/src/fixheader/RCS/fixheader.c,v 1.9 92/09/03 14:53:42 peter Exp Locker: peter $
**
**  Main FixHeader entrypoint. 
**
**  (C) Copyright 1989 Commodore-Amiga, Inc.
**      All Rights Reserved
*/

/***************************************************************\
*								*
*	FixHeader.c (part of FixHeader program)			*
*	-------------------------------------------------------	*
*								*
*	Table of Contents:					*
*								*
*	Variables Defined:					*
*	------------------					*
*								*
*		Infile 		File Descriptor for input	*
*		TempFile 	File descriptor for scratchpad	*
*				use				*
*		StringBuffer	Pointer to temporary string	*
*				store				*
*		OutFilename	Pointer to output file name	*
*		InFilename	Pointer to input file name	*
*								*
*	Functions defined:					*
*	------------------					*
*								*
*		main(argv,argc)					*
*			Entrypoint to program			*
*								*
*		HelpThem()					*
*			Output a "help" type message		*
*								*
*		BuildTextString(argc, argv, StringPointer)	*
*			Builds a string into StringPointer from	*
*			arguments 2-N of the invoking command	*
*			line.					*
*								*
*		CreateTempFile()				*
*			Creates and opens a temporary file.	*
*			The file name is created through	*
*			contatenating "TMP" with the current	*
*			time (returned from the time()		*
*			call).					*
*								*
*		Cleanup()					*
*			Performs the last minute cleanup for	*
*			FixHeader just before exiting to the	*
*			operating system.			*
*								*
*	External Functions Used:				*
*	------------------------				*
*								*
*		ltoa(char *, long)				*
*		ProcessFile(FILE *, FILE *)			*
*								*
\***************************************************************/

#include	<time.h>
#include "fixheader.h"
#include "fixheader_rev.h"

static char version[] = VERSTAG;

/***************************************************************\
*  some of the constants we use throughout the program		*
\***************************************************************/

#define	MAXFILENAMESIZE	(128)

/***************************************************************\
*  The input and temporary file descriptor pointers.  We don't	*
*  need an output file descriptor because the temporary file	*
*  is renamed to the input file upon successful termination of	*
*  the program (see function EndProcess() in ProcessFile.c)	*
\***************************************************************/

FILE	*InFile		= NULL,
	*TempFile	= NULL;

/***************************************************************\
*  Pointers to global, dynamically allocated, string buffers	*
\***************************************************************/

char	*StringBuffer = NULL;
char	*OutFilename = NULL;
char	*InFilename = NULL;
char	TempFilename[MAXFILENAMESIZE] = {"\0\0\0\0\0\0\0\0\0\0\0\0\0\0"};
long    copyrightyear = 0;

extern unsigned int	ErrorFlag;
extern unsigned int	ENTAB;

/***************************************************************\
*  Function prototypes...					*
\***************************************************************/

char			 RealOutputFile = 0;
int stcd_l(char *, long *);

int main ( int argc, char *argv[] );
static void HelpThem ( void );
static FILE *CreateTempFile ( void );
static void BuildTextString ( int argc, char *argv[], char **StringBuffer );

/***************************************************************\
*****************************************************************
*********** The program begins execution here... ****************
*****************************************************************
\***************************************************************/

/***************************************************************\
*	The command line is of the following form:		*
*								*
*	FixHeader <infile> [-o <outfile> <string>]		*
*								*
*	Note that <string> may appear without the -o <outfile>	*
*	but that the -o <outfile> requires the <string>.	*
*								*
\***************************************************************/

#ifdef LATTICE
int CXBRK(void) { return(0); }
void chkabort(void) { return; }
#endif

int	main(argc,argv)
int	 	 argc;
char	*argv[];
{
    int	ArgCntr;

    if (argc == 1)
	HelpThem();

    for(ArgCntr = 1; ArgCntr < argc; ArgCntr++)
    {
	if(strcmp(argv[ArgCntr], "-y") == 0)
	{
	    ArgCntr++;
	    stcd_l( argv[ArgCntr], &copyrightyear );
	    copyrightyear %= 100;
	}

	else if(strcmp(argv[ArgCntr], "-o") == 0)
	{
	    ArgCntr++;
	    OutFilename = argv[ArgCntr];
	}
	else if(strcmp(argv[ArgCntr],"-t") == 0)
		ENTAB = 1;
	else if(!InFilename)
	    InFilename = argv[ArgCntr];
	else if(!StringBuffer)
	    StringBuffer = argv[ArgCntr];
	else
	{
	    printf("Error in argument %d: \"%s\"\nStringBuffer \"%s\"\n",
		ArgCntr, argv[ArgCntr], StringBuffer);
	    HelpThem();
	};
    };

    if(OutFilename && !StringBuffer)
	HelpThem();

    if ((InFile = fopen(InFilename,"r")) == NULL)
    {
	ErrorFlag++;
	Cleanup();
	printf ("-----> File \"%s\" not found\n",InFilename);
	exit(20);
    };

    if(OutFilename)
    {
	if(strcmp(InFilename, OutFilename) == 0)
	{
	    if((TempFile = CreateTempFile()) == NULL)
	    {
		ErrorFlag++;
		printf("----->Could not open up a temporary work file");
		Cleanup();
		exit(20);
	    };
	}
	else if((TempFile = fopen(OutFilename, "w")) == NULL)
	{
	    ErrorFlag++;
	    Cleanup();
	    printf ("-----> Could not open output file \"%s\"\n",&argv[2][1]);
	    exit(20);
	};
    }

    ProcessFile(InFile,TempFile);

    if(OutFilename && (strcmp(InFilename, OutFilename) == 0))
    {
	rename(TempFilename, OutFilename);
    };

    Cleanup();
    return 0;
}

/***************************************************************\
*****************************************************************
**************** Give the user a little help ********************
*****************************************************************
\***************************************************************/
static void HelpThem( void )
{
    printf ("Format of FixHeader command is:\n\n");
    printf ("         FixHeader <infilename> [-t] [-o <outfilename>] [-y <year>] [<string>]\n\n");

    printf("(Note that <string> can appear without -o <outfilename>, but that\n");
    printf("if you specify -o <outfile>, then you MUST specify <string> as well.\n");
    printf("\nThe -t option causes FixHeader to try and convert runs of spaces to\n");
    printf("tabs.\n");
    printf("The -y option is the copyright year (eg. '92' or '1992') that the files\n");
    printf("are to have.\n");
    exit(20);
}

/***************************************************************\
*****************************************************************
***************** Create a temporary file for use ***************
*****************************************************************
\***************************************************************/

static FILE *CreateTempFile( void )
{
    long	timeval;
    char	StringBuffer[32];
    unsigned char BufferPtr;

    for(BufferPtr = 0; BufferPtr < 32; BufferPtr++)
	StringBuffer[BufferPtr] = '\0';

    timeval = time(NULL);
    strcpy (TempFilename, "TEMP");
    ltoa(StringBuffer, timeval);
    strcat(TempFilename, StringBuffer);
   
    return (fopen(TempFilename,"w"));
}

/***************************************************************\
*****************************************************************
******* End of program processing that must always be done ******
*****************************************************************
\***************************************************************/

void Cleanup( void )
{
    if (ErrorFlag)
	printf (", Input file = \"%s\"\n",InFilename);

    if (InFile)
	fclose(InFile);

    if (TempFile)
	fclose(TempFile);

    return;
}

/***************************************************************\
*****************************************************************
*** Dynamically build the header string from the command line ***
*****************************************************************
\***************************************************************/

static void	BuildTextString(argc, argv, StringBuffer)
int		 argc;
char	*argv[];
char	**StringBuffer;
{
    int	ArgPtr, BufferSize = 0;
    int	StartPoint = 2;

    if (RealOutputFile) StartPoint = 3;

    for (ArgPtr = StartPoint; ArgPtr < argc; ArgPtr++)
	BufferSize += strlen (argv[ArgPtr]) + 1;

    if ((*StringBuffer = (char *)calloc(1,BufferSize+2)) == NULL)
    {
	Cleanup();
	printf ("-----> Could not create temporary memory buffer\n");
	exit(20);
    }

    for (ArgPtr = StartPoint; ArgPtr < argc; ArgPtr++)
    {
	strcat(*StringBuffer,argv[ArgPtr]);
	strcat(*StringBuffer," ");
    };
}
@


1.9
log
@Now has an embedded $VER number.
@
text
@d2 1
a2 1
**  $Header: V39:aug/src/fixheader/RCS/fixheader.c,v 1.8 92/09/03 14:42:19 peter Exp Locker: peter $
d92 1
d102 1
a103 1

d141 8
a148 1
	if(strcmp(argv[ArgCntr], "-o") == 0)
d218 1
a218 1
    printf ("         FixHeader <infilename> [-t] [-o <outfilename> <string>]\n\n");
d224 2
@


1.8
log
@First native version.
@
text
@d2 1
a2 1
**  $Header: V36:aug/src/fixheader/RCS/FixHeader.c,v 1.7 90/11/02 23:27:37 Kevin Exp $
d64 3
@


1.7
log
@Previously, if no output file was specified, FixHeader tried
to open /dev/null (a hold over and kluge from Unix).  This
no longer happens.
@
text
@d2 1
a2 1
**  $Header: V36:aug/src/fixheader/RCS/FixHeader.c,v 1.6 90/11/02 16:45:57 kevin Exp Locker: Kevin $
a61 1
#include	<stdio.h>
d63 1
a96 4
static void		 HelpThem();
static void		 BuildTextString();
static FILE		*CreateTempFile();
void			 Cleanup();
d99 6
d121 5
d130 1
a130 1
    int	ArgCntr = 0;
d204 1
a204 1
static void	HelpThem()
d222 1
a222 1
static FILE	*CreateTempFile()
d245 1
a245 1
void	Cleanup()
@


1.6
log
@Added an extra error message.
@
text
@d2 1
a2 1
**  $Header: /usr.MC68010/ghostwheel/commodore/src/bin/fixheader/RCS/fixheader.c,v 1.5 90/07/19 15:21:50 kevin Exp $
a179 7
    else if ((TempFile = fopen("/dev/null","w")) == NULL)
    {
	ErrorFlag++;
	Cleanup();
	printf("-----> Serious error - could not open /dev/null!!!\n");
	exit(20);
    };
d200 1
a200 1
    printf ("         FixHeader <infilename> [-o <outfilename> <string>]\n\n");
d204 2
@


1.5
log
@Modified to include the entabbing feature.
(i.e. added the -t option)
@
text
@d2 1
a2 1
**  $Header: /usr.MC68010/ghostwheel/commodore/src/bin/fixheader/RCS/fixheader.c,v 1.4 90/07/11 12:07:35 kevin Exp $
d142 3
d146 1
@


1.4
log
@Removed debugging information from the program
(It was annoying Ray), and fixed a heretofore
undiscovered assumption that a variable declared
on the stack was set to all 0's.  This was causing
problems in the creation of a temporary file
when the output and input file names were the same.
@
text
@d2 1
a2 1
**  $Header: /usr.MC68010/ghostwheel/commodore/src/bin/fixheader/RCS/fixheader.c,v 1.3 90/07/10 17:50:49 kevin Exp Locker: kevin $
d91 1
d135 2
@


1.3
log
@Changed the command line to use the following format:
FixHeader <infilename> [-o <outfilename> <string>]
@
text
@d2 1
a2 1
**  $Header: $
d160 1
a161 1
		printf("----->Could not open up a temporary work file.\n");
a180 4
fprintf(stderr,"InFilename = \"%s\"\nOutFilename = \"%s\"\nTempFilename = \"%s\"\n", (InFilename ? InFilename : "<Not Initialized>"),
(OutFilename ? OutFilename : "<Not Initialized>"),
(TempFilename ? TempFilename : "<Not Initialized>"));

a182 2
fprintf(stderr,"Back from ProcessFile()\n");

a184 1
fprintf(stderr,"Renaming tempfile to outputfile.\n");
a187 1
fprintf(stderr,"Calling Cleanup\n");
a188 1
fprintf(stderr,"Back from cleanup...\n");
d217 1
d219 3
a237 1
fprintf(stderr,"Entering Cleanup.\n");
a239 1
fprintf(stderr,"Checking infile\n");
a243 1
fprintf(stderr,"Checking TempFile\n");
@


1.2
log
@Cleaned up the code during my search for the Bryce-reported tab bug.
@
text
@d2 1
a2 2
**  $Filename: Utilities.c
**  $Release: 1.0 $
d25 2
a26 2
*		Outfilename	Pointer to output file name	*
*		Infilename	Pointer to input file name	*
a68 1
#define	INPUTFILENAME	(1)
d86 3
a88 2
char	*Outfilename = NULL;
char	*Infilename = NULL;
d108 10
d122 3
a124 1
    if (argc < 3)
d126 2
a127 2
	
    if ((InFile = fopen(argv[INPUTFILENAME],"r")) == NULL)
d129 11
a139 2
	printf ("-----> File \"%s\" not found\n",argv[INPUTFILENAME]);
	exit(20);
d141 5
a145 2
	
    if ((Infilename = (char *)malloc(strlen(argv[1])+2)) == NULL)
d147 1
a147 1
	printf ("-----> Could not allocate room to store input file name.\n");
d149 1
d151 3
a153 5
    }
    else
	strcpy(Infilename, argv[1]);
	
    if (argv[2][0] == '-')
d155 1
a155 1
	if ((TempFile = fopen(&argv[2][1],"w")) == NULL)
d157 11
d170 2
a171 3
	    exit (20);
	}
	RealOutputFile++;
d173 1
a173 1
    else if ((TempFile = CreateTempFile()) == NULL)
d175 1
d177 1
a177 1
	printf ("----->Could not open up a temporary work file.\n");
a179 2
	
    BuildTextString(argc, argv, &StringBuffer);
d181 4
d186 12
d209 4
a212 1
    printf ("         FixHeader <filename> <string>\n\n");
a224 1
    char	TempFileName[64];
d226 1
a226 1
	
d228 1
a228 9
    strcpy (TempFileName, "TEMP");

    if ((Outfilename = (char *)malloc(MAXFILENAMESIZE)) == NULL)
    {
	printf ("-----> Could not allocate room to store output file name.\n");
	Cleanup();
	exit(20);
    };
	
d230 3
a232 4
    strcat(TempFileName, StringBuffer);
    strcpy(Outfilename, TempFileName);
    
    return (fopen(TempFileName,"w"));
d243 1
d245 3
a247 2
	printf (", Input file = \"%s\"\n",Infilename);
		
d250 2
a251 1
		
a253 9
		
    if (StringBuffer)
	free(StringBuffer);
		
    if (Infilename)
	free(Infilename);
		
    if (Outfilename)
	free(Outfilename);
@


1.1
log
@Initial revision
@
text
@d12 49
a60 44
*																*
*	FixHeader.c (part of FixHeader program)						*
*	----------------------------------------------------------	*
*																*
*	Table of Contents:											*
*																*
*		Variables Defined:										*
*		------------------										*
*																*
*			Infile 			File Descriptor for input			*
*			TempFile 		File descriptor for scratchpad use	*
*			StringBuffer	Pointer to temporary string store	*
*			Outfilename		Pointer to output file name			*
*			Infilename		Pointer to input file name			*
*																*
*		Functions defined:										*
*		------------------										*
*																*
*			main(argv,argc)										*
*				Entrypoint to program							*
*																*
*			HelpThem()											*
*				Output a "help" type message					*
*																*
*			BuildTextString(argc, argv, StringPointer)			*
*				Builds a string into StringPointer from			*
*				arguments 2-N of the invoking command line.		*
*																*
*			CreateTempFile()									*
*				Creates and opens a temporary file.  The file	*
*				name is created through contatenating "TMP"		*
*				with the current time (returned from the time()	*
*				call).											*
*																*
*			Cleanup()											*
*				Performs the last minute cleanup for FixHeader	*
*				just before exiting to the operating system.	*
*																*
*		External Functions Used:								*
*		------------------------								*
*																*
*			ltoa(char *, long)									*
*			ProcessFile(FILE *, FILE *)							*
*																*
d63 1
a63 1
#include    <stdio.h>
d67 1
a67 1
*	some of the constants we use throughout the program			*
d74 4
a77 4
*	The input and temporary file descriptor pointers.  We don't	*
*	need an output file descriptor because the temporary file	*
*	is renamed to the input file upon successful termination of	*
*	the program (see function EndProcess() in ProcessFile.c)	*
d81 1
a81 1
		*TempFile	= NULL;
d84 1
a84 1
*	Pointers to global, dynamically allocated, string buffers	*
d94 1
a94 1
*	Function prototypes...										*
d113 2
a114 2
	if (argc < 3)
		HelpThem();
d116 5
a120 4
	if ((InFile = fopen(argv[INPUTFILENAME],"r")) == NULL) {
		printf ("-----> File \"%s\" not found\n",argv[INPUTFILENAME]);
		exit(20);
	};
d122 8
a129 6
	if ((Infilename = (char *)malloc(strlen(argv[1])+2)) == NULL) {
		printf ("-----> Could not allocate room to store input file name.\n");
		Cleanup();
		exit(20);
	} else
		strcpy(Infilename, argv[1]);
d131 16
a146 12
	if (argv[2][0] == '-') {
		if ((TempFile = fopen(&argv[2][1],"w")) == NULL) {
			Cleanup();
			printf ("-----> Could not open output file \"%s\"\n",&argv[2][1]);
			exit (20);
		}
		RealOutputFile++;
	} else if ((TempFile = CreateTempFile()) == NULL) {
		Cleanup();
		printf ("----->Could not open up a temporary work file.\n");
		exit(20);
	};
d148 1
a148 1
	BuildTextString(argc, argv, &StringBuffer);
d150 2
a151 2
	ProcessFile(InFile,TempFile);
	return 0;
d161 3
a163 2
	printf ("Format of FixHeader command is:\n\n         FixHeader <filename> <string>\n\n");
	exit(20);
d174 3
a176 3
	long	timeval;
	char	TempFileName[64];
	char	StringBuffer[32];
d178 2
a179 2
	timeval = time(NULL);
	strcpy (TempFileName, "TEMP");
d181 6
a186 5
	if ((Outfilename = (char *)malloc(MAXFILENAMESIZE)) == NULL) {
		printf ("-----> Could not allocate room to store output file name.\n");
		Cleanup();
		exit(20);
	};
d188 5
a192 5
	ltoa(StringBuffer, timeval);
	strcat(TempFileName, StringBuffer);
	strcpy(Outfilename, TempFileName);
	
	return (fopen(TempFileName,"w"));
d203 2
a204 2
	if (ErrorFlag)
		printf (", Input file = \"%s\"\n",Infilename);
d206 2
a207 2
	if (InFile)
		fclose(InFile);
d209 2
a210 2
	if (TempFile)
		fclose(TempFile);
d212 2
a213 2
	if (StringBuffer)
		free(StringBuffer);
d215 2
a216 2
	if (Infilename)
		free(Infilename);
d218 2
a219 2
	if (Outfilename)
		free(Outfilename);
d221 1
a221 1
	return;
d235 2
a236 2
	int	ArgPtr, BufferSize = 0;
	int	StartPoint = 2;
d238 1
a238 1
	if (RealOutputFile) StartPoint = 3;
d240 2
a241 2
	for (ArgPtr = StartPoint; ArgPtr < argc; ArgPtr++)
		BufferSize += strlen (argv[ArgPtr]) + 1;
d243 6
a248 5
	if ((*StringBuffer = (char *)calloc(1,BufferSize+2)) == NULL) {
		Cleanup();
		printf ("-----> Could not create temporary memory buffer\n");
		exit(20);
	}
d250 5
a254 4
	for (ArgPtr = StartPoint; ArgPtr < argc; ArgPtr++) {
		strcat(*StringBuffer,argv[ArgPtr]);
		strcat(*StringBuffer," ");
	};
@
