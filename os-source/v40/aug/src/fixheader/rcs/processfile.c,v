head     1.18;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.18
date     93.08.12.15.01.37;  author peter;  state Exp;
branches ;
next     1.17;

1.17
date     92.09.04.11.40.25;  author peter;  state Exp;
branches ;
next     1.16;

1.16
date     92.09.04.11.35.00;  author peter;  state Exp;
branches ;
next     1.15;

1.15
date     92.09.03.14.42.25;  author peter;  state Exp;
branches ;
next     1.14;

1.14
date     92.03.10.18.20.53;  author peter;  state Exp;
branches ;
next     1.13;

1.13
date     91.11.11.11.30.31;  author peter;  state Exp;
branches ;
next     1.12;

1.12
date     91.11.11.11.21.21;  author peter;  state Exp;
branches ;
next     1.11;

1.11
date     91.11.08.22.33.08;  author peter;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.02.23.28.24;  author Kevin;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.02.18.51.01;  author Kevin;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.02.18.49.46;  author Kevin;  state Exp;
branches ;
next     1.7;

1.7
date     90.07.25.17.30.59;  author kevin;  state Exp;
branches ;
next     1.6;

1.6
date     90.07.19.15.22.31;  author kevin;  state Exp;
branches ;
next     1.5;

1.5
date     90.07.10.17.51.35;  author kevin;  state Exp;
branches ;
next     1.4;

1.4
date     90.07.09.16.04.34;  author kevin;  state Exp;
branches ;
next     1.3;

1.3
date     90.07.09.15.04.17;  author kevin;  state Exp;
branches ;
next     1.2;

1.2
date     90.06.22.12.16.11;  author kevin;  state Exp;
branches ;
next     1.1;

1.1
date     89.06.08.11.47.06;  author kevin;  state Exp;
branches ;
next     ;


desc
@Processes the input file to the tempfile
@


1.18
log
@Date no longer contains leading zeroes, per spec 
@
text
@/*
**  $Id: processfile.c,v 1.17 92/09/04 11:40:25 peter Exp Locker: peter $
**
**  Conversion routines used in FixHeader
**
**  (C) Copyright 1989 Commodore-Amiga, Inc.
**      All Rights Reserved
*/

#define D(x)	;

/***************************************************************\
*                                                               *
*   ProcessFile.c                                               *
*   ----------------------------------------------------------  *
*                                                               *
*   Table of Contents:                                          *
*                                                               *
*       Variables Used:                                         *
*       ---------------                                         *
*           InFilename      Input Filename                      *
*                                                               *
*       Functions Defined:                                      *
*       ------------------                                      *
*                                                               *
*           ProcessFile(FILE *Input, FILE *Output)              *
*               Processes the input file to the output file as  *
*               per E-Mail message from kodiak (Bob Burns) to   *
*               andy (Andy Finkel) and kevin (Kevin Klop) dated *
*               01-May-89 19:50:51, "fixheader spec".           *
*                                                               *
*****************************************************************
*                                                               *
*                       Revision History                        *
*                                                               *
*   05-May-89   Original Coding                     Kevin Klop  *
*                                                               *
\***************************************************************/

#include    "FixHeader.h"


#define IsComment(x)    (!(strncmp(x,"**",2) && strncmp(x,"/*",2)))
#define DeleteFile(x)   unlink(x)
#define RenameFile(x,y) rename(x,y)

#define	MINREVNUMBER	36

/***************************************************************\
*   Prototype the functions that we use.                        *
\***************************************************************/

static IsKeyword ( char *aLine, char *Keyword );
static void ProcessHeader ( char *LineBuffer, FILE *Infile, FILE *Outfile );
static int IsCopyright ( char *aLine );
static int IsCommodore( char *aLine );
static void ProcessCopyright( char *aLine, FILE *infile, FILE *outfile );

/***************************************************************\
*   The external variables that we use                          *
\***************************************************************/

extern char     *InFilename;
extern char     *StringBuffer;
extern long	copyrightyear;

unsigned int    ErrorFlag = 0;
static   char   FoundHeader = FALSE;
unsigned int	TheRevision = 0;

/***************************************************************\
*****************************************************************
*********************** ProcessFile *****************************
*****************************************************************
\***************************************************************/

void    ProcessFile(Infile, Outfile)
FILE    *Infile, *Outfile;
{
    char    *InputLine;
    char    *WhichPtr;

    /***********************************************\
    * Allocate a line buffer from dynamic memory    *
    \***********************************************/

    FoundHeader = FALSE;

    if ((InputLine = (char *)malloc(MAXINPUTLINELEN)) == NULL)
    {
        printf ("-----> Could not allocate a line input buffer\n");
        Cleanup();
        exit(20);
    };

    /***********************************************\
    * Process the input file line by line.  This    *
    * Exits to the caller of ProcessFile internally *
    \***********************************************/

    while(1)
    {
        if (fgets(InputLine, MAXINPUTLINELEN-1, Infile))
        {
	    if(InputLine[strlen(InputLine)-1] == '\n')
		InputLine[strlen(InputLine)-1] = '\0';

        /***************************************\
        * Process the header line if we found   *
        * one.                                  *
        \***************************************/

            if (IsComment(InputLine))
            {
                if(IsKeyword(InputLine, "Header") ||
                   IsKeyword(InputLine, "Id"))
                    ProcessHeader(InputLine, Infile, Outfile);
                else if (IsKeyword(InputLine, (WhichPtr = "Filename")) ||
                         IsKeyword(InputLine, (WhichPtr = "Release")) ||
                         IsKeyword(InputLine, (WhichPtr = "Revision")) ||
                         IsKeyword(InputLine, (WhichPtr = "Date")))
                    printf("-----> ProcessFile: %s exists\n",WhichPtr);
                else if ( (IsCopyright(InputLine)) && (IsCommodore(InputLine)) )
                    ProcessCopyright(InputLine, Infile, Outfile);
                else if(Outfile)
		{
		    entab(InputLine);
                    fputs(InputLine, Outfile);
		    fputc('\n',Outfile);
		}
            }
            else if(Outfile)
	    {
		entab(InputLine);
                fputs(InputLine, Outfile);
		fputc('\n', Outfile);
	    }
        }

        /***************************************\
        * Stop if we've hit the end of input    *
        \***************************************/


        if (feof(Infile))
        {
            if (!FoundHeader)
            {
                printf("----->\n");
                printf("-----> ProcessFile: No $Id line found\n----->\n");
            };
#if 0
            if(TheRevision < MINREVNUMBER)
            	printf("-----> WARNING: File has too low a major revision number of %d\n", TheRevision);
#endif
            	
            return;
        }
    }
}

/**************************************************************\
****************************************************************
************************* IsKeyword ****************************
****************************************************************
\**************************************************************/

static IsKeyword(aLine,Keyword)
char    *aLine;
char    *Keyword;
{
    if (strncmp(aLine,"**",2))
        return(0);
    aLine += 2L;
    while((*aLine == ' ') || (*aLine == '\t')) aLine++;
    aLine++;
    return(strncmp(aLine,Keyword,strlen(Keyword)) ? 0 : 1);
}

/*************************************************************\
***************************************************************
************************** ProcessHeader **********************
***************************************************************
\*************************************************************/

static void ProcessHeader(LineBuffer, Infile, Outfile)
char    *LineBuffer;
FILE    *Infile, *Outfile;
{
    char    WhiteSpaceLeader[256];
    int     Index = 0;
    char    Outbuffer[MAXINPUTLINELEN];
    char    *OutLoc;
    int     datecount;
    char    datebuf[ 8 ];

    /***************************************************\
    * Get the leading whitespace into a buffer so that  *
    * everything lines up correctly.                    *
    \***************************************************/

    while ((*LineBuffer == ' ')    ||
       (*LineBuffer == '\t')   ||
       (*LineBuffer == '*'))
    WhiteSpaceLeader[Index++] = *(LineBuffer++);
    WhiteSpaceLeader[Index] = '\0';
    
    if (*LineBuffer == '\n')
    {
        printf ("-----> Empty $Header line, ");
        ErrorFlag++;
        return;
    }

    /***************************************************\
    * Parse the $Header line                            *
    \***************************************************/
    
    for ( ; (*LineBuffer != ',') && (*LineBuffer != '\n'); LineBuffer++);

    if (*LineBuffer == '\n')
    {
        printf ("-----> Invalid $Header line in file (could not find \",v\")");
        ErrorFlag++;
        return;
    }
    
    strcpy(Outbuffer, WhiteSpaceLeader);
    strcat(Outbuffer, "$V" );		/* Broke up $VER so c:version won't */
    strcat(Outbuffer, "ER: ");		/* accidentally find this one */
    strcat(Outbuffer, InFilename);
    strcat(Outbuffer, " ");

    OutLoc = &(Outbuffer[strlen(Outbuffer)]);

    LineBuffer++;
    
    if (*LineBuffer == 'v')
    {
        LineBuffer++;
        while (*(LineBuffer++) == ' ');
        LineBuffer--;
        sscanf(LineBuffer, "%d.", &TheRevision);
        while (*LineBuffer != ' ')
	{
	    *OutLoc++ = *LineBuffer++;
	}
        *OutLoc = '\0';
        strcat(Outbuffer, " (");

        OutLoc = &(Outbuffer[strlen(Outbuffer)]);
        
	/* Skip spaces up to the date */
        while (*(LineBuffer++) == ' ');
        LineBuffer--;

	/* RCS date is year/month/day.  We want to emit day.month.year */
	datecount = 0;
        while ( (*LineBuffer != ' ') && ( datecount < 8 ) )
	{
	    datebuf[ datecount++ ] = *LineBuffer++;
	}
	if ( datecount != 8 )
	{
	    printf("-----> Bad RCS $Id date!\n");
	    ErrorFlag++;
	    return;
	}
	else
	{
	    if ( datebuf[ 6 ] != '0' )
	    {
		*OutLoc++ = datebuf[ 6 ];
	    }
	    *OutLoc++ = datebuf[ 7 ];
	    *OutLoc++ = '.';
	    if ( datebuf[ 3 ] != '0' )
	    {
		*OutLoc++ = datebuf[ 3 ];
	    }
	    *OutLoc++ = datebuf[ 4 ];
	    *OutLoc++ = '.';
	    if ( datebuf[ 0 ] != '0' )
	    {
		*OutLoc++ = datebuf[ 0 ];
	    }
	    *OutLoc++ = datebuf[ 1 ];
	}
        *OutLoc = '\0';
        strcat(Outbuffer, ")");
    }
    entab(Outbuffer);
    if(Outfile)
    {
	fputs(Outbuffer, Outfile);
	fputc('\n', Outfile);
    }

    strcpy(Outbuffer, WhiteSpaceLeader);
    strcat(Outbuffer, "Includes Release ");
    if(StringBuffer)
	strcat(Outbuffer, StringBuffer);
    entab(Outbuffer);
    if(Outfile)
    {
	fputs(Outbuffer, Outfile);
	fputc('\n',Outfile);
    }
    
    FoundHeader = TRUE;
    return;
}

/**************************************************************\
****************************************************************
*********************** IsCopyright ****************************
****************************************************************
\**************************************************************/

static int IsCopyright(aLine)
char    *aLine;
{
    while (*aLine != '\0')
        if (*aLine != 'C')
            aLine++;
        else if (strncmp(aLine, "Copyright", 9))
            aLine++;
        else
            return(TRUE);
    return(FALSE);
}


/**************************************************************\
****************************************************************
*********************** IsCommodore ****************************
****************************************************************
\**************************************************************/

static int IsCommodore(aLine)
char    *aLine;
{
    while (*aLine != '\0')
        if (*aLine != 'C')
            aLine++;
        else if (strncmp(aLine, "Commodore", 9))
            aLine++;
        else
            return(TRUE);
    return(FALSE);
}


/**************************************************************\
****************************************************************
********************* ProcessCopyright *************************
****************************************************************
\**************************************************************/

/* Here's what we want ProcessCopyright to do:
 *
 * Emit lines of the form
 *
 * (C) Copyright 1985-1992, Commodore-Amiga, Inc.
 *
 * The things it needs to worry about are:
 * Include files typically don't have up-to-date copyrights.  What
 * we want it to do is find the first year after the copyright,
 * delete all subsequent years, and add "-1992" to the copyright.
 *
 * However, we have files that are not just copyright by us:
 *
 * 	rexx/*
 *	libraries/asl.*
 *	libraries/translator.*
 *	devices/narrator.*
 *
 *	( libraries/iffparse.* seems to belong to us according to contract )
 *
 * Also, some include files say "Commodore-Amiga, Inc.", but some leave out
 * the comma and some miss the dash.
 *
 * So what this routine should do is only extend the copyright on Commodore
 * lines.  ProcessFile() takes care of that.
 */

static void ProcessCopyright(aLine, infile, outfile)
char    *aLine;
FILE    *infile, *outfile;
{
    char    Outbuffer[MAXINPUTLINELEN];
    char    *out = Outbuffer;
    static  char skip[] = "0123456789- \t,";
    int     done;
    char    decade, year;
    char    cpdecade, cpyear;

    cpdecade = ( copyrightyear / 10 ) + '0';
    cpyear = ( copyrightyear % 10 ) + '0';

    done = !(*aLine != '\0');
    while ( !done )
    {
	/* Copy the copyright line, up until the first date */
	*out++ = *aLine;
	D( printf("%c", *aLine) );

	/* Looks like a date? */
        if (!strncmp(aLine, "19", 2))
        {
	    aLine++;
	    D( printf("%c", *aLine) );
	    *out++ = *aLine++;		/* Copy the "9" */
	    D( printf("%c", *aLine) );
	    decade = *out++ = *aLine++;		/* Copy the "x" */
	    D( printf("%c", *aLine) );
	    year = *out++ = *aLine++;		/* Copy the "x" */
	    while ( strchr( skip, *aLine ) )
	    {
		*aLine++;
	    }
	    if ( ( cpdecade != decade ) || ( cpyear != year ) )
	    {
		*out++ = '-';
		*out++ = '1';
		*out++ = '9';
		*out++ = cpdecade;
		*out++ = cpyear;
	    }
	    *out++ = ' ';
	    D( printf("-19%c%c %s\n", cpdecade, cpyear, aLine) );
	    strcpy( out, aLine );
	    done = 1;
	}
	else
	{
	    aLine++;
	    done = !(*aLine != '\0');
	}
    }

    entab(Outbuffer);
    if(outfile)
    {
	fputs(Outbuffer, outfile);
	fputc('\n', outfile);
    }
}
@


1.17
log
@Broke up $VER string so c:version isn't confused when run on fixheader.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.16 92/09/04 11:35:00 peter Exp Locker: peter $
d271 4
a274 1
	    *OutLoc++ = datebuf[ 6 ];
d277 4
a280 1
	    *OutLoc++ = datebuf[ 3 ];
d283 4
a286 1
	    *OutLoc++ = datebuf[ 0 ];
@


1.16
log
@Now emits standardized version strings.
Supports setting of the copyright year.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.15 92/09/03 14:42:25 peter Exp Locker: peter $
d229 2
a230 1
    strcat(Outbuffer, "$VER: ");
@


1.15
log
@First native version.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.14 92/03/10 18:20:53 peter Exp $
d65 1
d194 2
d229 1
a229 1
    strcat(Outbuffer, "$Filename: ");
d231 2
a232 23
    strcat(Outbuffer, " $");
    entab(Outbuffer);
    if(Outfile)
    {
	fputs(Outbuffer, Outfile);
	fputc('\n',Outfile);
    }
    
    strcpy(Outbuffer, WhiteSpaceLeader);
    strcat(Outbuffer, "$Release: ");
    if(StringBuffer)
	strcat(Outbuffer, StringBuffer);
    strcat(Outbuffer, " $");
    entab(Outbuffer);
    if(Outfile)
    {
	fputs(Outbuffer, Outfile);
	fputc('\n',Outfile);
    }
    
    strcpy(Outbuffer, WhiteSpaceLeader);
    strcat(Outbuffer, "$Revision: ");
    
d244 3
a246 1
            *(OutLoc++) = *(LineBuffer++);
d248 2
a249 11
        strcat(Outbuffer, " $");
        entab(Outbuffer);
        if(Outfile)
        {
	    fputs(Outbuffer, Outfile);
	    fputc('\n',Outfile);
	}
        
        strcpy(Outbuffer, WhiteSpaceLeader);
        strcat(Outbuffer, "$Date: ");
        
d252 1
d255 24
a278 2
        while (*LineBuffer != ' ')
            *(OutLoc++) = *(LineBuffer++);
d280 7
a286 7
	strcat(Outbuffer, " $");
        entab(Outbuffer);
        if(Outfile)
        {
	    fputs(Outbuffer, Outfile);
	    fputc('\n', Outfile);
	}
d289 11
d385 2
d388 3
d401 1
a401 1
	     aLine++;
d405 1
a405 1
	    *out++ = *aLine++;		/* Copy the "x" */
d407 1
a407 1
	    *out++ = *aLine++;		/* Copy the "x" */
d412 8
a419 5
	    *out++ = '-';
	    *out++ = '1';
	    *out++ = '9';
	    *out++ = '9';
	    *out++ = '2';
d421 1
a421 1
	    D( printf("-1992 %s\n", aLine) );
@


1.14
log
@Changed date to 1992.  Ick.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.13 91/11/11 11:30:31 peter Exp Locker: peter $
d10 1
a10 1
#define D(x)	x
a39 1
#include    <stdio.h>
d53 5
a57 5
static int      IsCopyright();
static int      IsKeyword();
static void     ProcessCopyright();
static void     ProcessHeader();
extern void     Cleanup();
d151 1
d153 2
a154 1
            	printf("-----> WARNING: File has toolow a major revision number of %d\n", TheRevision);
a371 1
    char    *LastDate = NULL;
d375 1
a375 1
    int     done = 0;
@


1.13
log
@Output of copyrights no longer shows the comma which is gone.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.12 91/11/11 11:21:21 peter Exp Locker: peter $
d344 1
a344 1
 * (C) Copyright 1985-1991, Commodore-Amiga, Inc.
d349 1
a349 1
 * delete all subsequent years, and add "-1991" to the copyright.
d402 1
a402 1
	    *out++ = '1';
d404 1
a404 1
	    D( printf("-1991 %s\n", aLine) );
@


1.12
log
@No longer stuffs a comma after copyright.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.11 91/11/08 22:33:08 peter Exp Locker: peter $
d404 1
a404 1
	    D( printf("-1991, %s\n", aLine) );
@


1.11
log
@Commodore copyrights are now emitted as firstyear-1991.
More work will be needed to avoid 1991-1991, and to allow
1992 next year, etc.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.10 90/11/02 23:28:24 Kevin Exp Locker: peter $
a402 1
	    *out++ = ',';
@


1.10
log
@Previously, if no output file was specified, FixHeader tried
to open /dev/null (a hold over and kluge from Unix).  This
no longer happens.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.9 90/11/02 18:51:01 Kevin Exp Locker: Kevin $
d10 2
d123 1
a123 1
                else if (IsCopyright(InputLine))
d313 1
d316 20
d340 27
d372 4
a375 1
    char    *LineSaver;
d377 6
a382 1
    LineSaver = aLine;
d384 2
a385 3
    while (*aLine != '\0')
    {
        if (!strncmp(aLine, "198", 3))
d387 27
a413 16
            LastDate = aLine;
            if (*(aLine+3L) == '9')
            {
                entab(LineSaver);
                if(outfile)
                {
		    fputs(LineSaver, outfile);
		    fputc('\n', outfile);
		}
                return;
            }
            else
                aLine += 3L;
        }
        else
            aLine++;
d416 1
a416 14
    if(LastDate != NULL)
    {
        aLine = LastDate+4L;
        for (LastDate = aLine+strlen(aLine)+5; LastDate > aLine+4L; LastDate--)
        {
            *LastDate = *(LastDate-5L);
        }
        *(aLine++) = ',';
        *(aLine++) = '1';
        *(aLine++) = '9';
        *(aLine++) = '8';
        *(aLine++) = '9';
    }
    entab(LineSaver);
d419 1
a419 1
	fputs(LineSaver, outfile);
@


1.9
log
@Modified to output the warning if the major revision
number of the file is less than 36.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.8 90/11/02 18:49:46 Kevin Exp Locker: Kevin $
d123 1
a123 1
                else
d130 1
a130 1
            else
d227 5
a231 2
    fputs(Outbuffer, Outfile);
    fputc('\n',Outfile);
d239 5
a243 2
    fputs(Outbuffer, Outfile);
    fputc('\n',Outfile);
d263 5
a267 2
        fputs(Outbuffer, Outfile);
	fputc('\n',Outfile);
d281 5
a285 2
        fputs(Outbuffer, Outfile);
	fputc('\n', Outfile);
d334 5
a338 2
                fputs(LineSaver, outfile);
		fputc('\n', outfile);
d362 5
a366 2
    fputs(LineSaver, outfile);
    fputc('\n', outfile);
@


1.8
log
@Modified to output a warning if the major revision
number of the file to be processed is less than 33.
@
text
@d2 1
a2 1
**  $Id: processfile.c,v 1.7 90/07/25 17:30:59 kevin Exp Locker: Kevin $
d46 1
a46 1
#define	MINREVNUMBER	33
@


1.7
log
@Changed the "Can't find $Header" error message to
"Can't find $Id" for Bryce.
@
text
@d2 1
a2 1
**  $Id: $
d46 2
d67 1
d150 3
d251 1
@


1.6
log
@Added the entabbing feature.  this basically
entailed calling entab() before any output to
the output file.
@
text
@d2 1
a2 1
**  $Header: /usr.MC68010/ghostwheel/commodore/src/bin/fixheader/RCS/processfile.c,v 1.5 90/07/10 17:51:35 kevin Exp Locker: kevin $
d145 1
a145 1
                printf("-----> ProcessFile: No $Header line found\n----->\n");
@


1.5
log
@Changed the command line to use the following format:
FixHeader <infilename> [-o <outfilename> <string>]
@
text
@d2 1
a2 1
**  $Header: $
d39 1
a40 1
#define MAXINPUTLINELEN     (1024)
d43 2
a44 4
#define	DeleteFile(x)	unlink(x)
#define	RenameFile(x,y)	rename(x,y)
#define FALSE   (0)
#define TRUE    (!FALSE)
d51 1
a51 1
static int	IsKeyword();
d99 3
a101 1
	{
d109 1
a109 1
	    {
d118 1
a118 1
		else if (IsCopyright(InputLine))
d121 2
d124 2
d128 2
d131 2
d141 1
a141 1
	{
d143 1
a143 1
	    {
d145 2
a146 2
		printf("-----> ProcessFile: No $Header line found\n----->\n");
	    };
d182 2
d191 3
a193 3
	   (*LineBuffer == '\t')   ||
	   (*LineBuffer == '*'))
	WhiteSpaceLeader[Index++] = *(LineBuffer++);
d216 21
a236 3
    fprintf(Outfile,"%s$Filename: %s $\n%s$Release: %s$\n%s$Revision: ",
	WhiteSpaceLeader,InFilename,WhiteSpaceLeader,StringBuffer,
	WhiteSpaceLeader);
d246 12
a257 2
            fputc(*(LineBuffer++), Outfile);
        fprintf (Outfile, " $\n%s$Date: ",WhiteSpaceLeader);
d261 6
a266 2
            fputc(*(LineBuffer++), Outfile);
        fprintf (Outfile, " $\n");
d310 1
a310 1
	{
d313 4
a316 2
	    {
                fprintf(outfile,LineSaver);
d339 3
a341 1
    fprintf(outfile,LineSaver);
@


1.4
log
@Changed DeleteFile and RenameFile into inline macros
in order to save my own sanity (one line functions drive
me batty)
@
text
@d2 1
a2 2
**  $Filename: Utilities.c
**  $Release: 1.0 $
d19 1
a19 3
*           Infilename      Input Filename                      *
*           Outfilename     The current output (temporary) file *
*                           name.                               *
a55 1
static void     EndProcess();
d62 1
a62 2
extern char     *Infilename;
extern char     *Outfilename;
a133 1
            EndProcess(Outfile, Infile);
d135 1
d138 1
a145 23
************************ EndProcess ****************************
****************************************************************
\**************************************************************/

static void EndProcess(Outfile, Infile)
FILE    *Outfile, *Infile;
{
    fclose (Outfile);
    fclose (Infile);

    if (!ErrorFlag)
    {
        DeleteFile(Infilename);
        RenameFile(Outfilename, Infilename);
    }
    else
        DeleteFile(Outfilename);

    Cleanup();
}

/**************************************************************\
****************************************************************
d207 1
a207 1
	WhiteSpaceLeader,Infilename,WhiteSpaceLeader,StringBuffer,
@


1.3
log
@Cleaned up the source code a little in my restless search
for the Bryce-reported bugs dealing with tabs and such.
@
text
@d46 2
a59 2
extern void     DeleteFile();
extern void     RenameFile();
@


1.2
log
@Fixes the coredump problem associated with Copyright
dates that were past 198x.  *sigh* A programmer's
work is never done.

In addition, modified to handle both $Header and $Id
lines.
@
text
@d54 1
d91 2
a92 1
    if ((InputLine = (char *)malloc(MAXINPUTLINELEN)) == NULL) {
d103 4
a106 2
    while(1) {
        if (fgets(InputLine, MAXINPUTLINELEN-1, Infile)) {
d113 2
a114 1
            if (IsComment(InputLine)) {
d116 1
a116 1
                   IsKeyword(InputLine, "Id")) {
a117 1
                }
d121 1
a121 1
                         IsKeyword(InputLine, (WhichPtr = "Date"))) {
d123 1
a123 1
                } else if (IsCopyright(InputLine)) {
a124 1
                }
a125 1
                {
a126 1
                }
a128 1
            {
a129 1
            }
d137 2
a138 1
        if (feof(Infile)) {
d141 2
a142 1
                printf ("----->\n-----> ProcessFile: No $Header line found\n----->\n");
d160 2
a161 1
    if (!ErrorFlag) {
d164 2
a165 1
    } else
d173 1
a173 1
************************* IsHeader *****************************
d181 1
a181 1
    if (strncmp(aLine,"**",2)) {
a182 2
    }

d184 1
a184 3

    for(;(*aLine == ' ') || (*aLine == '\t'); aLine++);
    
a185 1

d207 4
a210 2
    while ((*LineBuffer == ' ') || (*LineBuffer == '\t') || (*LineBuffer == '*'))
        WhiteSpaceLeader[Index++] = *(LineBuffer++);
d213 2
a214 1
    if (*LineBuffer == '\n') {
d224 1
a224 1
    for (;(*LineBuffer != ',') && (*LineBuffer != '\n'); LineBuffer++);
d226 2
a227 1
    if (*LineBuffer == '\n') {
d233 3
a235 1
    fprintf(Outfile,"%s$Filename: %s $\n%s$Release: %s$\n%s$Revision: ",WhiteSpaceLeader,Infilename,WhiteSpaceLeader,StringBuffer, WhiteSpaceLeader);
d239 2
a240 1
    if (*LineBuffer == 'v') {
d267 1
a267 1
    while (*aLine != '\0') {
d270 4
a273 9
        else {
            if (strncmp(aLine, "Copyright", 9))
                aLine++;
            else
            {
                return(TRUE);
            }
        }
    }
d292 4
a295 2
    while (*aLine != '\0') {
        if (!strncmp(aLine, "198", 3)) {
d297 2
a298 1
            if (*(aLine+3L) == '9') {
a302 1
            {
a303 1
            }
a305 1
        {
a306 1
        }
d308 1
@


1.1
log
@Initial revision
@
text
@d110 2
a111 1
                if(IsKeyword(InputLine, "Header"))
d113 1
d119 1
a119 1
                } else if (IsCopyright(InputLine))
d121 1
d123 1
d125 4
a128 1
            } else
d130 1
d137 1
d178 1
a178 1
    if (strncmp(aLine,"**",2))
d180 1
d269 1
d271 1
d298 3
a300 1
            } else
d302 4
a305 1
        } else
d307 1
d309 13
a321 9

    aLine = LastDate+4L;
    for (LastDate = aLine+strlen(aLine)+5; LastDate > aLine+4L; LastDate--)
        *LastDate = *(LastDate-5L);
    *(aLine++) = ',';
    *(aLine++) = '1';
    *(aLine++) = '9';
    *(aLine++) = '8';
    *(aLine++) = '9';
@
