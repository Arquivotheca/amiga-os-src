CALLSYS macro   *
	jsr     LVO\1(A6)
	endm

LVOSupervisor	EQU	-30

	section	text,code

	XDEF	_CacheBoot


;======================================================================
;
;	This is the RAM reboot code, which is called to reset the
;	system into the new ROM, which is of course now in some magic
;	and safe place.  This code assumes that the memory is going
;	to be visable and unmapped when called, and that after the
;	RESET instruction, it'll be visable again at least by the time
;	the OVL bit is reset.
;
;		a2 - tag
;		d2 - ROM jump address
;======================================================================

_CacheBoot:
	move.l	4,a6
	lea.l	RAMBootCode,a5
	CALLSYS	Supervisor
	rts				; Never executed

RAMBootCode:
	move.l	#$F00002,d2

	lea.l	temp,a0
	pmove	tc,(a0)
	and.l	#$7fffffff,(a0)         ; Turn off MMU
	dc.w	$f010			; PMOVE (a0),TC
	dc.w	$4000
	or.l	#$80000000,(a0)         ; Prep for startup
;	move.l	(a0),d7

	move.l	#$0809,d1     		; Make sure inst cache is on + flushed.
	movec	d1,cacr

	move.b	#2,d0
	move.l	#1,d3			; First pass, no delay
	bra	CacheRun

RSTLoop:
	btst	#0,d0
	beq	ReAnim
BootOpt:
	move.l	#$00400000,d3
	reset				; Clobber the system

CacheRun:
	move.w	$dff010,d1		; Magic trick
	subq.l	#1,d3
	bne	CacheRun
	move.b	#3,$bfe201		; Turn off Amiga ROM Overlay
	move.b	#2,$bfe001

	subq.b	#1,d0			; Where do we go?
	btst	#0,d0
	beq	RSTLoop

	move.l	#3,d1			; Freeze the cache
	movec	d1,cacr
	bra	RSTLoop

	nop
	nop

ReAnim:
	move.l	#0,d1			; Turn all caches off
	movec	d1,cacr

	move.l	#30,d1			; Let 'em know we're here
1$	bchg	#1,$bfe001
	move.l	#80000,d0
2$	subq.l	#1,d0
	bne	2$
	dbra	d1,1$

more:
	move.l	#30,d1			; Let 'em know we're here
1$	nop
	move.l	#80000,d0
2$	subq.l	#1,d0
	bne	2$
	dbra	d1,1$

;	move.l	d7,(a0)
	dc.w	$f010			; Turn the MMU on
	dc.w	$4000

again:
	move.l	#30,d1			; Let 'em know we're here
1$	bchg	#1,$bfe001
	move.l	#80000,d0
2$	subq.l	#1,d0
	bne	2$
	dbra	d1,1$

	move.l	d2,a1
	jmp	(a1)                    ; Start up the ROM
	nop
	nop
	nop

temp:
	dc.l	0

	END
