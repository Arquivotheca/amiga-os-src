head     39.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.15
date     93.11.05.14.56.54;  author jesup;  state Exp;
branches ;
next     39.14;

39.14
date     93.08.24.16.44.12;  author peter;  state Exp;
branches ;
next     39.13;

39.13
date     93.08.19.16.34.54;  author peter;  state Exp;
branches ;
next     39.12;

39.12
date     93.07.16.18.23.40;  author peter;  state Exp;
branches ;
next     39.11;

39.11
date     93.06.02.16.56.36;  author peter;  state Exp;
branches ;
next     39.10;

39.10
date     93.06.02.15.49.40;  author peter;  state Exp;
branches ;
next     39.9;

39.9
date     93.05.07.17.05.29;  author peter;  state Exp;
branches ;
next     39.8;

39.8
date     93.05.03.14.37.48;  author peter;  state Exp;
branches ;
next     39.7;

39.7
date     93.04.27.14.38.59;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     93.03.18.16.27.52;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     93.03.10.13.04.44;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.01.08.10.27.25;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.12.03.14.15.55;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.12.03.11.30.22;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.10.30.16.12.34;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.18.25;  author peter;  state Exp;
branches ;
next     ;


desc
@Perform all keyboard bindings.
@


39.15
log
@Added "call"
@
text
@/*
 * Amiga Grand Wack
 *
 * bind.c -- Perform all keyboard bindings.
 *
 * $Id: bind.c,v 39.14 93/08/24 16:44:12 peter Exp Locker: jesup $
 *
 * This file contains all the commands bound at initialization time.
 */

#include <exec/types.h>

#include "sys_proto.h"
#include "define_proto.h"
#include "symload_proto.h"
#include "decode_proto.h"
#include "special_proto.h"
#include "link_proto.h"
#include "ops_proto.h"
#include "show_proto.h"
#include "showi_proto.h"
#include "showg_proto.h"
#include "showd_proto.h"
#include "showlock_proto.h"
#include "find_proto.h"
#include "copper_proto.h"
#include "asm_proto.h"
#include "sat_proto.h"
#include "main_proto.h"
#include "rexxhandler_proto.h"
#include "wackbase_proto.h"
#include "menus_proto.h"
#include "io_proto.h"
#include "parse_proto.h"

#include "bind_proto.h"

void
InitTopMap( void )
{
    /* Miscellaneous commands */
    BindCommand( "help", ShowHelp );
    BindCommand( "?", ShowHelp );
    BindCommand( "quit", Conclude );
    BindCommand( "about", Credits );
    BindCommand( "cls", ClearScreen );
    BindCommand( "protect", ProtectAddresses );
    BindCommand( "capture", Capture  );
    BindCommand( "context", ShowContext );
    BindCommand( "go", ResumeExecution  );
    BindCommand( "call", Call  );
    BindCommand2("system", runCommand, "" );
    BindCommand2("rx", ARexx_Execute, "" );
    BindCommand( "rxs", ARexx_ExecuteString );

    /* Configuration commands */
    BindCommand( "prompt", SetWackPrompt );
    BindCommand( "setdump", setDump );
    BindCommand( "bindconstant", bindConstant );
    BindCommand( "set", bindConstant );
    BindCommand( "bindalias", bindAlias );
    BindCommand( "bindsystem", bindSystem );
    BindCommand( "bindrx", bindRexx );
    BindCommand( "bindxwack", bindXWack );
    BindCommand( "addmenu", bindMenuHeader );
    BindCommand( "addmenuitem", bindMenuItem );
    BindCommand( "addsubitem", bindMenuSub );
    BindCommand( "showhunks", showHunks );
    BindCommand( "bindhunks", bindHunks );
    BindCommand( "bindsymbols", bindSymbols );

    /* Memory commands */
    BindCommand( ",", BackFrame );
    BindCommand( ".", NextFrame );
    BindCommand( "<", BackWord );
    BindCommand( ">", NextWord );
    BindCommand( ";", Disassemble );
    BindCommand( "+", NextCount );
    BindCommand( "-", BackCount );
    BindCommand( ":", SizeFrame );
    BindCommand( "=", AssignMem );
    BindCommand( "!", swapSpareAddr );
    BindCommand( "[", Indirect );
    BindCommand( "]", Exdirect );
    BindCommand( "{", IndirectBptr );	/* } <- for editor's brace matching */
    BindCommand( "dec", ToDec );
    BindCommand( "hex", ToHex );
    BindCommand( "bptr", ShiftBPtr );
    BindCommand( "find",  Find );
    BindCommand( "/", Find );
    BindCommand( "limit",  Limit );
    BindCommand( "stacklimit",  StackLimit );
    BindCommand( "where", ApproxSym );
    BindCommand( "whereis", ApproxSymIndirect );

    /* Exec/DOS commands */
    BindCommand( "execbase", ShowExecBase );
    BindCommand( "nodes", ShowNodes );
    BindCommand( "sem",  ShowSem );
    BindCommand( "sems",  ShowSemList );
    BindCommand( "tasks", ShowTasks );
    BindCommand( "task", ShowTask );
    BindCommand( "interrupts", ShowIntVects );
    BindCommand( "ints", ShowIntVects );
    BindCommand( "devices", ShowDeviceList );
    BindCommand( "devs", ShowDeviceList );
    BindCommand( "ports", ShowPortList );
    BindCommand( "libraries", ShowLibraryList );
    BindCommand( "libs", ShowLibraryList );
    BindCommand( "resources", ShowResourceList );
    BindCommand( "res", ShowResourceList );
    BindCommand( "regions", ShowRegionList );
    BindCommand( "memory", ShowMemoryList );
    BindCommand( "mem", ShowMemoryList );
    BindCommand( "modules", ShowResModules );
    BindCommand( "mods", ShowResModules );

    BindCommand( "dosbase",  ShowDBase );
    BindCommand( "doslist",  ShowDOSList );
    BindCommand( "process", ShowProcess );
    BindCommand( "proc", ShowProcess );

    /* Intuition commands */
    BindCommand( "ibase", ShowIBase );
    BindCommand( "ascreen",  ShowAScreen );
    BindCommand( "screen",  ShowScreen );
    BindCommand( "awindow",  ShowAWindow );
    BindCommand( "window",  ShowWindow );
    BindCommand( "wflags", ShowWindowFlags );
    BindCommand( "firstgad",  ShowFirstGad );
    BindCommand( "gadget",  ShowExtGadget );
    BindCommand( "gadgets",  ShowExtGadgetList );
    BindCommand( "menu", ShowMenu );
    BindCommand( "menus", ShowMenuList );
    BindCommand( "item", ShowMenuItem );
    BindCommand( "items", ShowMenuItemList );
    BindCommand( "requester", ShowRequester );
    BindCommand( "req", ShowRequester );
    BindCommand( "propinfo", ShowPropInfo );
    BindCommand( "image", ShowImage );
    BindCommand( "itext", ShowIntuiText );
    BindCommand( "class",  ShowIClass );
    BindCommand( "object",  ShowObject );
    BindCommand( "lisems",  ShowLayerInfoSems );

    /* Graphics/Layers commands */
    BindCommand( "gfxbase",  ShowGfxBase );
    BindCommand( "view",  ShowView );
    BindCommand( "vextra",  ShowViewExtra );
    BindCommand( "viewport",  ShowViewPort );
    BindCommand( "vp",  ShowViewPort );
    BindCommand( "viewports",  ShowViewPortList );
    BindCommand( "cop", dumpCops );
    BindCommand( "copper", dumpAllCops );
    BindCommand( "copinit", dumpCopHeader );
    BindCommand( "linfo", ShowLayer_Info );
    BindCommand( "layer",  ShowLayer );

#if 0
    /* Trace commands */
    BindCommand( "toggle_trace", ToglTrace );
    BindCommand( "set_breakpoint", SetBreakPoint );
    BindCommand( "resume", Resume );
#endif

    /* Undocumented commands */
    BindCommand( "symbols", ShowTopSymMap );
    BindCommand( "magic", Nothing2 );
    BindCommand( "plugh", Nothing2 );
    BindCommand( "xyzzy", Nothing3 );
}


STRPTR
ShowHelp( char *arg )
{
    if ( arg = parseRemainder( arg ) )
    {
	if ( !stricmp( arg, "misc" ) )
	{
	    ShowMiscHelp();
	}
	else if ( !stricmp( arg, "config" ) )
	{
	    ShowConfigHelp();
	}
	else if ( !stricmp( arg, "memory" ) )
	{
	    ShowMemoryHelp();
	}
	else if ( !stricmp( arg, "exec" ) )
	{
	    ShowExecHelp();
	}
	else if ( !stricmp( arg, "intuition" ) )
	{
	    ShowIntuitionHelp();
	}
	else if ( !stricmp( arg, "graphics" ) )
	{
	    ShowGraphicsHelp();
	}
#if 0
	else if ( !stricmp( arg, "trace" ) )
	{
	    ShowTraceHelp();
	}
#endif
	else
	{
	    ShowGeneralHelp();
	}
    }
    else
    {
	ShowGeneralHelp();
    }
    return( NULL );
}


void
ShowGeneralHelp( void )
{
    PPrintf("Help is available on the following topics:\n");
    PPrintf("\tMISC      - commands to manipulate and control the Wack environment.\n");
    PPrintf("\tCONFIG    - commands to configure Wack.\n");
    PPrintf("\tMEMORY    - commands to view and manipulate memory.\n");
    PPrintf("\tEXEC      - Exec and DOS exploration commands.\n");
    PPrintf("\tINTUITION - Intuition exploration commands.\n");
    PPrintf("\tGRAPHICS  - Graphics and Layers exploration commands.\n");
#if 0
    PPrintf("\tTRACE     - commands to handle tracing and breakpoints.\n");
#endif
    PPrintf("For example, type \"help misc\" to see the environment commands.\n");
    PPrintf("\nThe help descriptions include each command's syntax.  The command is\n");
    PPrintf("shown first.  optional arguments are enclosed in parentheses.\n");
    PPrintf("Any keyword arguments are shown in all capital letters.\n");
    PPrintf("If an optional address argument (shown as \"(addr)\") is omitted,\n");
    PPrintf("the current address will be used instead.\n");
}


void
ShowMiscHelp( void )
{
#if 0
    PPrintf("help (MISC|CONFIG|MEMORY|EXEC|INTUITION|GRAPHICS|TRACE) - show help on topic.\n");
/**/PPrintf("? (MISC|CONFIG|MEMORY|EXEC|INTUITION|GRAPHICS|TRACE) - Same as help.\n");
#else
    PPrintf("help (MISC|CONFIG|MEMORY|EXEC|INTUITION|GRAPHICS) - show help on topic.\n");
/**/PPrintf("? (MISC|CONFIG|MEMORY|EXEC|INTUITION|GRAPHICS) - Same as help.\n");
#endif
    PPrintf("quit    - Exit from Wack.\n");
    PPrintf("about   - Show credits for Wack.\n");
    PPrintf("cls     - Clear the Wack display.\n");
    PPrintf("protect (ON|OFF) - Control protection of invalid addresses from access.\n");
    PPrintf("capture (filename) (OFF) (APPEND) - Capture Wack output to file.\n");
    PPrintf("context - Show context of target system (SAD only).\n");
    PPrintf("go      - Resume execution on target system (SAD only).\n");
    PPrintf("call (addr)      - call a function at the specified or current address.\n");
    PPrintf("system command   - Executes command as a shell program.\n");
    PPrintf("rx script        - Executes ARexx script.\n");
    PPrintf("rxs rexxcommands - Executes ARexx commands.\n");
}


void
ShowConfigHelp( void )
{
    PPrintf("prompt (string) - Set prompt. (*n and \\n are newline, *t and \\t are tab,\n");
    PPrintf("\t*c and \\c expand to the current address).\n");
    PPrintf("setdump (WORD|LONGWORD) (WIDE|NARROW) (ASCII|NOASCII) - Set memory dump options.\n");
    PPrintf("bindconstant label (addr) - Create a label equal to the specified address.\n");
/**/PPrintf("set label (addr) - Same as bindconstant.\n");
    PPrintf("bindalias command1 command2 - Make command1 a synonym for command2.\n");
    PPrintf("bindsystem command program (args) - Make command invoke a shell program\n");
    PPrintf("\twith the specified arguments.\n");
    PPrintf("bindrx command script (args) - Make command invoke an ARexx script\n");
    PPrintf("\twith the specified arguments.\n");
    PPrintf("bindxwack command program (args) - Make command invoke a Wack-extension\n");
    PPrintf("\tprogram passing WACKPORT=Wack's port name and the specified arguments.\n");
    PPrintf("addmenu header - Adds a menu header to the Wack window.\n");
    PPrintf("additem header item command (key) - Adds a menu item to the menu header which\n");
    PPrintf("\tinvokes the specified command, with optional menu key.\n");
    PPrintf("addsubitem header item sub command (key) - Adds a sub-item to the menu item\n");
    PPrintf("\twhich invokes the specified command, with optional menu key.\n");
}


void
ShowMemoryHelp( void )
{
    PPrintf("<Enter> - Show current memory frame.\n");
    PPrintf("(addr)  - Set current address and show that memory frame.\n");
    PPrintf(",       - Go to previous frame (multiple .'s show multiple frames).\n");
    PPrintf(".       - Go to next frame (multiple ,'s show multiple frames).\n");
    PPrintf("<       - Go to previous word (multiple <'s skip multiple words).\n");
    PPrintf(">       - Go to next word (multiple >'s skip multiple words).\n");
    PPrintf(";       - Disassemble current frame (multiple ;'s show multiple frames).\n");
    PPrintf("+h      - Go forward h bytes.\n");
    PPrintf("-h      - Go backward h bytes.\n");
    PPrintf(":h      - Set frame size to h bytes.\n");
    PPrintf("=hhhh   - Set word at current address to hhhh.\n");
    PPrintf("!       - Swap current and spare address pointers.\n");
    PPrintf("[       - Indirect (go to address pointed at by current address).\n");
    PPrintf("]       - Exdirect (undo last indirection).\n");
    PPrintf("{       - BPTR-Indirect (go to address pointed at by BPTR at current address).\n"); /* } */
    PPrintf("dec h   - Converts h (hex) to decimal value.\n");
    PPrintf("hex n   - Converts n (decimal) to hex value.\n");
    PPrintf("bptr b  - Converts BCPL pointer b to hex value.\n");
    PPrintf("find (h)           - Find 16 or 32 bit number between current address and limit.\n");
/**/PPrintf("/ (h)              - Same as find.\n");
    PPrintf("limit (addr)       - Set limit address for find operation.\n");
    PPrintf("stacklimit (addr)  - Set current address and find limit based on specified task.\n");
    PPrintf("where (addr)       - Show nearest symbol to specified address.\n");
    PPrintf("whereis (addr)     - Show nearest symbol to contents of specified address.\n");

    PPrintf("These commands require SegTracker to be running on the target machine:\n");
    PPrintf("showhunks (module) - Show hunks of specified (or all) module(s).\n");
    PPrintf("bindhunks (module) - Make symbols for hunks of specified (or all) module(s).\n");
    PPrintf("bindsymbols symfile (module) - Define every symbol in symfile using\n");
    PPrintf("\tthe actual values of the hunks of the specified module.\n");

    PPrintf("\nThe [, ], {, and ! commands may be followed by another command for\n"); /* } */
    PPrintf("immediate action, for example, \"[task\" would indirect and show that task.\n");
}


void
ShowExecHelp( void )
{
    PPrintf("execbase     - Show ExecBase.\n");
    PPrintf("nodes (addr) - Show nodes on the same list as the specified one.\n");
    PPrintf("sem (addr)   - Show specified semaphore.\n");
    PPrintf("sems (addr)  - Show semaphore list at specified address.\n");
    PPrintf("tasks        - Show all tasks.\n");
    PPrintf("task (addr|name) - Show task at specified address or whose task name\n");
    PPrintf("\tor cli_CommandName partially matches the specified name.\n");
    PPrintf("interrupts   - Show interrupt vectors.\n");
/**/PPrintf("ints         - Same as interrupts.\n");
    PPrintf("devices      - Show all devices.\n");
/**/PPrintf("devs         - Same as devices.\n");
    PPrintf("ports        - Show all public ports.\n");
    PPrintf("libraries    - Show all libraries.\n");
/**/PPrintf("libs         - Same as libraries.\n");
    PPrintf("resources    - Show all resources.\n");
/**/PPrintf("res          - Same as resources.\n");
    PPrintf("regions      - Show all memory regions.\n");
    PPrintf("memory       - Show all memory headers.\n");
/**/PPrintf("mem          - Same as memory.\n");
    PPrintf("modules      - Show all resident modules.\n");
/**/PPrintf("mods         - Same as modules.\n");

    PPrintf("dosbase      - Show DOSBase.\n");
    PPrintf("doslist      - Show DOS device/volume/assign list.\n");
    PPrintf("process (addr|name) - Show task at specified address or whose task name\n");
    PPrintf("\tor cli_CommandName partially matches the specified name.\n");
/**/PPrintf("proc (addr|name)    - Same as process.\n");
}


void
ShowIntuitionHelp( void )
{
    PPrintf("ibase            - Show IntuitionBase.\n");
    PPrintf("ascreen          - Show address of active screen.\n");
    PPrintf("screen (addr)    - Show screen.\n");
    PPrintf("awindow          - Show address of active window.\n");
    PPrintf("window (addr)    - Show window.\n");
    PPrintf("wflags (addr)    - Describe flags of window.\n");
    PPrintf("firstgad (addr)  - Show address of first gadget of window.\n");
    PPrintf("gadget (addr)    - Show gadget.\n");
    PPrintf("gadgets (addr)   - Show all gadgets on this list.\n");
    PPrintf("menu (addr)      - Show Menu header.\n");
    PPrintf("menus (addr)     - Show chain of Menu headers.\n");
    PPrintf("item (addr)      - Show MenuItem or SubItem.\n");
    PPrintf("items (addr)     - Show chain of MenuItems or SubItems.\n");
    PPrintf("requester (addr) - Show requester.\n");
/**/PPrintf("req (addr)       - Same as requester.\n");
    PPrintf("propinfo (addr)  - Show PropInfo structure.\n");
    PPrintf("image (addr)     - Show Image structure.\n");
    PPrintf("itext (addr)     - Show IntuiText structure.\n");
    PPrintf("class (addr)     - Show boopsi class.\n");
    PPrintf("object (addr)    - Show boopsi object.\n");
    PPrintf("lisems           - Show LayerInfo semaphores for all screens.\n");
}


void
ShowGraphicsHelp( void )
{
    PPrintf("gfxbase          - Show GfxBase.\n");
    PPrintf("view (addr)      - Show View structure.\n");
    PPrintf("vextra (addr)    - Show ViewExtra structure.\n");
    PPrintf("viewport (addr)  - Show ViewPort structure.\n");
/**/PPrintf("vp (addr)        - Same as viewport.\n");
    PPrintf("viewports (addr) - Show ViewPort list.\n");
    PPrintf("cop              - Show copper list (omit color table).\n");
    PPrintf("copper           - Show copper list (include color table).\n");
    PPrintf("copinit          - Show copinit copper list.\n");
    PPrintf("linfo (addr)     - Show LayerInfo structure.\n");
    PPrintf("layer (addr)     - Show Layer structure.\n");
}

#if 0
void
ShowTraceHelp( void )
{
    PPrintf("No Trace help is currently available.\n");
}
#endif
@


39.14
log
@Added WORD/LONGWORD options to setdump.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.13 93/08/19 16:34:54 peter Exp Locker: peter $
d51 1
d261 3
a263 2
    PPrintf("system command - Executes command as a shell program.\n");
    PPrintf("rx script - Executes ARexx script.\n");
@


39.13
log
@Removed absent trace help.  Removed "sp" command.  Updated a few help lines.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.12 93/07/16 18:23:40 peter Exp Locker: peter $
d271 1
a271 1
    PPrintf("setdump (WIDE|NARROW) (ASCII|NOASCII) - Set memory dump options.\n");
@


39.12
log
@Added bindhunks, showhunks, and bindsymbols commands.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.11 93/06/02 16:56:36 peter Exp Locker: peter $
a101 1
    BindCommand( "sp", ShowSP );
d202 1
d207 1
d231 1
d233 1
d246 1
d249 4
d271 1
a271 1
    PPrintf("setdump (WIDE|NARROW) (ASCII|NOASCII) (QUIET) - Set memory dump options.\n");
a337 1
    PPrintf("sp           - Show stack pointer of the last task examined.\n");
d369 2
a370 2
    PPrintf("wflags           - Describe window flags of last window shown.\n");
    PPrintf("firstgad         - Show address of first gadget of last window shown.\n");
d396 1
a396 1
    PPrintf("viewports        - Show ViewPort list.\n");
d404 1
a404 1

d410 1
@


39.11
log
@*** empty log message ***
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.10 93/06/02 15:49:40 peter Exp Locker: peter $
d15 1
a27 1
#include "hunks_proto.h"
d67 3
a163 5

    /* Oddball commands */
    BindCommand( "attach", AttachHunks );
    BindCommand( "bindcli", AttachHunks );
    BindCommand( "bindhunks", BindHunks );
d302 12
a313 6
    PPrintf("find (h)          - Find 16 or 32 bit number between current address and limit.\n");
/**/PPrintf("/ (h)             - Same as find.\n");
    PPrintf("limit (addr)      - Set limit address for find operation.\n");
    PPrintf("stacklimit (addr) - Set current address and find limit based on specified task.\n");
    PPrintf("where (addr)      - Show nearest symbol to specified address.\n");
    PPrintf("whereis (addr)    - Show nearest symbol to contents of specified address.\n");
@


39.10
log
@Cleaned up commands.  Moved help code into this module.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.9 93/05/07 17:05:29 peter Exp Locker: peter $
d265 1
a265 1
    PPrintf("setdump (WIDE|NARROW) (ASCII|NOASCII) - Set memory dump mode options.\n");
@


39.9
log
@Renamed BindPrim().  BindKey() is gone, and the key commands are
implemented more like regular ones.  Removed key-command equivs.
Removed "keys".  Added "prompt" and "protect" commands.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.8 93/05/03 14:37:48 peter Exp Locker: peter $
d34 1
d41 3
a43 1
    BindCommand( "help", Help );
d45 69
a114 3
    /* jimm: */
    BindCommand( "newhelp", NewHelp );
    BindCommand( "bindhelp", BindHelp );
d117 4
a120 2
    BindCommand( "class",  ShowIClass );
    BindCommand( "object",  ShowObject );
a121 1
    BindCommand( "awindow",  ShowAWindow );
a122 2
    BindCommand( "gfxbase",  ShowGfxBase );
    BindCommand( "linfo", ShowLayer_Info );
d124 1
a124 11
    BindCommand( "sem",  ShowSem );
    BindCommand( "sems",  ShowSemList );
    BindCommand( "lisems",  ShowLayerInfoSems );
    BindCommand( "limit",  Limit );
    BindCommand( "find",  Find );
    BindCommand( "stacklimit",  StackLimit );
    BindCommand( "view",  ShowView );
    BindCommand( "vextra",  ShowViewExtra );
    BindCommand( "viewport",  ShowViewPort );
    BindCommand( "vp",  ShowViewPort );
    BindCommand( "viewports",  ShowViewPortList );
d127 1
a129 2
    BindCommand( "firstgad",  ShowFirstGad );
    BindCommand( "layer",  ShowLayer );
d139 11
d153 2
d156 2
d161 8
a168 24
    BindCommand( "setdump", setDump );
    BindCommand( "prompt", SetWackPrompt );
    
    BindCommand( "nodes", ShowNodes );
    BindCommand( "execbase", ShowExecBase );
    BindCommand( "tasks", ShowTasks );
    BindCommand( "task", ShowTask );
    BindCommand( "sp", ShowSP );
    BindCommand( "findrom", FindROMAddrs  );
    BindCommand( "ints", ShowIntVects );
    BindCommand( "process", ShowProcess );
    BindCommand( "proc", ShowProcess );
    BindCommand( "devices", ShowDeviceList );
    BindCommand( "devs", ShowDeviceList );
    BindCommand( "ports", ShowPortList );
    BindCommand( "libraries", ShowLibraryList );
    BindCommand( "libs", ShowLibraryList );
    BindCommand( "resources", ShowResourceList );
    BindCommand( "res", ShowResourceList );
    BindCommand( "regions", ShowRegionList );
    BindCommand( "memory", ShowMemoryList );
    BindCommand( "mem", ShowMemoryList );
    BindCommand( "modules", ShowResModules );
    BindCommand( "mods", ShowResModules );
a169 2
    BindCommand( "where", ApproxSym );
    BindCommand( "nop", Nothing1 );
d173 175
a347 14
    BindCommand( "attach", AttachHunks );
    BindCommand( "bindcli", AttachHunks );
    BindCommand( "bindhunks", BindHunks );
    BindCommand( "bptr", ShiftBPtr );
    BindCommand( "dec", ToDec );
    BindCommand( "hex", ToHex );
    BindCommand( "cls", ClearScreen );
    BindCommand( "go", ResumeExecution  );
    BindCommand( "context", ShowContext );
    BindCommand( "about", Credits );
    BindCommand( "protect", ProtectAddresses );
    BindCommand2("rx", ARexx_Execute, "" );
    BindCommand( "rxs", ARexx_ExecuteString );
    BindCommand2("system", runCommand, "" );
a348 4
    BindCommand( ":", SizeFrame );
    BindCommand( "+", NextCount );
    BindCommand( "-", BackCount );
    BindCommand( "=", AssignMem );
d350 25
a374 6
    BindCommand( "bindalias", bindAlias );
    BindCommand( "bindxwack", bindXWack );
    BindCommand( "bindsystem", bindSystem );
    BindCommand( "bindrx", bindRexx );
    BindCommand( "bindconstant", bindConstant );
    BindCommand( "set", bindConstant );
a375 3
    BindCommand( "addmenu", bindMenuHeader );
    BindCommand( "addmenuitem", bindMenuItem );
    BindCommand( "addsubitem", bindMenuSub );
d377 15
a391 1
    BindCommand( "capture", Capture  );
a392 2
    BindCommand( "!", swapSpareAddr );
    BindCommand( "?", Help );
d394 4
a397 11
    BindCommand( ".", NextFrame );
    BindCommand( ",", BackFrame );
    BindCommand( ">", NextWord );
    BindCommand( "<", BackWord );
    BindCommand( ";", Disassemble );
    BindCommand( "/", Find );		/* jimm: */
    BindCommand( "*", Whereis );		/* jimm	*/
    BindCommand( "[", Indirect );
    BindCommand( "]", Exdirect );
    BindCommand( "{", IndirectBptr );	/* } <- for editor's brace matching */
    BindCommand( "$", ApproxSym );		/* kodiak (was '@@') */
@


39.8
log
@Added "set" and "bindconstant" keywords to let constants be defined.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.7 93/04/27 14:38:59 peter Exp Locker: peter $
d40 2
a41 2
    BindPrim ("help", Help);
    BindPrim ("quit", Conclude);
d44 47
a90 57
    BindPrim("newhelp", NewHelp);
    BindPrim("bindhelp", BindHelp);
    BindPrim("swap", swapSpareAddr);
    BindPrim("dosbase",  ShowDBase);
    BindPrim("doslist",  ShowDOSList);
    BindPrim("class",  ShowIClass);
    BindPrim("object",  ShowObject);
    BindPrim("ibase", ShowIBase);
    BindPrim("awindow",  ShowAWindow);
    BindPrim("ascreen",  ShowAScreen);
    BindPrim("gfxbase",  ShowGfxBase);
    BindPrim("linfo", ShowLayer_Info);
    BindPrim("screen",  ShowScreen);
    BindPrim("sem",  ShowSem);
    BindPrim("sems",  ShowSemList);
    BindPrim("lisems",  ShowLayerInfoSems);
    BindPrim("limit",  Limit);
    BindPrim("find",  Find);
    BindPrim("stacklimit",  StackLimit);
    BindPrim("view",  ShowView);
    BindPrim("vextra",  ShowViewExtra);
    BindPrim("viewport",  ShowViewPort);
    BindPrim("vp",  ShowViewPort);
    BindPrim("viewports",  ShowViewPortList);
    BindPrim("window",  ShowWindow);
    BindPrim("wflags", ShowWindowFlags);
    BindPrim("gadget",  ShowExtGadget);
    BindPrim("gadgets",  ShowExtGadgetList);
    BindPrim("firstgad",  ShowFirstGad);
    BindPrim("layer",  ShowLayer);
    BindPrim("menu", ShowMenu);
    BindPrim("menus", ShowMenuList);
    BindPrim("item", ShowMenuItem);
    BindPrim("items", ShowMenuItemList);
    BindPrim("requester", ShowRequester);
    BindPrim("req", ShowRequester);
    BindPrim("propinfo", ShowPropInfo);
    BindPrim("image", ShowImage);
    BindPrim("itext", ShowIntuiText);
    BindPrim("cop", dumpCops);
    BindPrim("copper", dumpAllCops);
    BindPrim("copinit", dumpCopHeader);

    BindPrim ("show_frame", ShowFrame);
    BindPrim ("next_frame", NextFrame);
    BindPrim ("back_frame", BackFrame);
    BindPrim ("next_word", NextWord);
    BindPrim ("back_word", BackWord);
    BindPrim ("disassemble", DisAsm);
    BindPrim ("whereis", Whereis);
    BindPrim ("indirect", Indirect);
    BindPrim ("indirect_bptr", IndirectBptr);
    BindPrim ("exdirect", Exdirect);
    BindPrim ("toggle_trace", ToglTrace);
    BindPrim ("set_breakpoint", SetBreakPoint);
    BindPrim ("resume", Resume);
    BindPrim ("setdump", setDump);
d92 74
a165 75
    BindPrim ("nodes", ShowNodes);
    BindPrim ("execbase", ShowExecBase);
    BindPrim ("tasks", ShowTasks);
    BindPrim ("task", ShowTask);
    BindPrim ("sp", ShowSP);
    BindPrim ("findrom", FindROMAddrs );
    BindPrim ("ints", ShowIntVects);
    BindPrim ("process", ShowProcess);
    BindPrim ("proc", ShowProcess);
    BindPrim ("devices", ShowDeviceList);
    BindPrim ("devs", ShowDeviceList);
    BindPrim ("ports", ShowPortList);
    BindPrim ("libraries", ShowLibraryList);
    BindPrim ("libs", ShowLibraryList);
    BindPrim ("resources", ShowResourceList);
    BindPrim ("res", ShowResourceList);
    BindPrim ("regions", ShowRegionList);
    BindPrim ("memory", ShowMemoryList);
    BindPrim ("mem", ShowMemoryList);
    BindPrim ("modules", ShowResModules);
    BindPrim ("mods", ShowResModules);
    BindPrim ("keys", ShowTopKeyMap);
    BindPrim ("symbols", ShowTopSymMap);
    BindPrim ("where", ApproxSym);
    BindPrim ("nop", Nothing1);
    BindPrim ("magic", Nothing2);
    BindPrim ("plugh", Nothing2);
    BindPrim ("xyzzy", Nothing3);
    BindPrim ("attach", AttachHunks);
    BindPrim ("bindcli", AttachHunks);
    BindPrim ("bindhunks", BindHunks);
    BindPrim ("bptr", ShiftBPtr);
    BindPrim ("dec", ToDec);
    BindPrim ("hex", ToHex);
    BindPrim ("cls", ClearScreen);
    BindPrim ("go", ResumeExecution );
    BindPrim ("context", ShowContext);
    BindPrim ("about", Credits);
    BindPrim2 ("rx", ARexx_Execute, "" );
    BindPrim ("rxs", ARexx_ExecuteString);
    BindPrim2 ("system", runCommand, "" );

    BindPrim (":", SizeFrame);
    BindPrim ("+", NextCount);
    BindPrim ("-", BackCount);
    BindPrim ("=", AssignMem);
    BindPrim ("\"", ARexx_ExecuteQuote);

    BindPrim ("bindalias", bindAlias);
    BindPrim ("bindxwack", bindXWack);
    BindPrim ("bindsystem", bindSystem);
    BindPrim ("bindrx", bindRexx);
    BindPrim ("bindconstant", bindConstant);
    BindPrim ("set", bindConstant);

    BindPrim ("addmenu", bindMenuHeader);
    BindPrim ("addmenuitem", bindMenuItem);
    BindPrim ("addsubitem", bindMenuSub);

    BindPrim ("capture", Capture );
    BindKey ('\n', "TopMap", "nop");
    BindKey ('!', "TopMap", "swap");
    BindKey ('?', "TopMap", "help");

    BindKey ('.', "TopMap", "next_frame");
    BindKey (',', "TopMap", "back_frame");
    BindKey ('>', "TopMap", "next_word");  /* move like cursor keys */
    BindKey ('<', "TopMap", "back_word");
    BindKey (';', "TopMap", "disassemble");
    BindKey ('/', "TopMap", "find");		/* jimm: */
    BindKey ('*', "TopMap", "whereis");		/* jimm	*/
    BindKey ('[', "TopMap", "indirect");
    BindKey ('{', "TopMap", "indirect_bptr");	/* } <- for editor's brace matching */
    BindKey (']', "TopMap", "exdirect");
    BindKey ('$', "TopMap", "where");		/* kodiak (was '@@') */
@


39.7
log
@Rework of link architecture/naming.  New commands:  "doslist", "req".
Renamed:  "vext", "showprocess", rsrcs", "bindheader", "binditem",
"bindsub".  Removed "showtask", "requesters", "captureoff".
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.6 93/03/18 16:27:52 peter Exp Locker: peter $
d154 2
@


39.6
log
@Added context command to bindings.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.5 93/03/10 13:04:44 peter Exp Locker: peter $
d17 1
a17 1
#include "access_proto.h"
d48 1
d64 1
a64 1
    BindPrim("vext",  ShowViewExtra);
d79 1
a79 1
    BindPrim("requesters", ShowRequesterList);
a104 1
    BindPrim ("showtask", ShowTask);
d109 1
a109 1
    BindPrim ("showprocess", ShowProcess);
d117 1
a117 1
    BindPrim ("rsrcs", ShowResourceList);
d137 2
a138 2
    BindPrim ("go", goTarget);
    BindPrim ("context", showContext);
d155 3
a157 3
    BindPrim ("bindheader", bindMenuHeader);
    BindPrim ("binditem", bindMenuItem);
    BindPrim ("bindSub", bindMenuSub);
d159 1
a159 2
    BindPrim ("capture", openCapture );
    BindPrim ("captureoff", closeCapture );
@


39.5
log
@Added "go" and "about" keywords.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.4 93/01/08 10:27:25 peter Exp Locker: peter $
d138 1
@


39.4
log
@Added bindings for capture functions.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.3 92/12/03 14:15:55 peter Exp Locker: peter $
d137 2
@


39.3
log
@Added setdump.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.2 92/12/03 11:30:22 peter Exp Locker: peter $
d156 2
@


39.2
log
@Added ibase keyword.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.1 92/10/30 16:12:34 peter Exp Locker: peter $
d45 1
d99 1
@


39.1
log
@Removed a bunch of effective aliases.
@
text
@d6 1
a6 1
 * $Id: bind.c,v 39.0 92/10/30 15:18:25 peter Exp Locker: peter $
d49 1
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
a48 1
    BindPrim("obj",  ShowObject);
a49 1
    BindPrim("awin",  ShowAWindow);
a50 1
    BindPrim("asc",  ShowAScreen);
a53 1
    BindPrim("sc",  ShowScreen);
a59 1
    BindPrim("sl",  StackLimit);
a64 1
    BindPrim("vps",  ShowViewPortList);
a65 1
    BindPrim("win",  ShowWindow);
a67 1
    BindPrim("gad",  ShowExtGadget);
a68 1
    BindPrim("gads",  ShowExtGadgetList);
a69 1
    BindPrim("fgad",  ShowFirstGad);
d81 1
a81 1
    BindPrim("Cop", dumpAllCops);
a104 1
    BindPrim ("rom", FindROMAddrs );
d147 1
a147 1
    BindPrim ("bindrexx", bindRexx);
@
