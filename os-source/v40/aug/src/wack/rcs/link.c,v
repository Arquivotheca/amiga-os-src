head     39.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.11
date     93.11.05.14.58.56;  author jesup;  state Exp;
branches ;
next     39.10;

39.10
date     93.10.12.23.17.05;  author jesup;  state Exp;
branches ;
next     39.9;

39.9
date     93.06.02.15.50.24;  author peter;  state Exp;
branches ;
next     39.8;

39.8
date     93.05.21.17.33.12;  author peter;  state Exp;
branches ;
next     39.7;

39.7
date     93.05.07.17.06.58;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     93.05.03.14.38.40;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     93.04.27.14.38.32;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.03.18.16.26.34;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.03.10.13.05.04;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.12.03.11.31.23;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.11.02.17.07.51;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.16.30;  author peter;  state Exp;
branches ;
next     ;


desc
@Generic access functions for the target machine.
@


39.11
log
@added Call function
@
text
@/*
 * Amiga Grand Wack
 *
 * link.c -- Generic functions to communicate with the target machine.
 *
 * $Id: link.c,v 39.10 93/10/12 23:17:05 jesup Exp Locker: jesup $
 *
 * These routines connect to the target machine, regardless of
 * connection type.  As well, the memory functions invoke
 * the range-checking tests before proceeding.
 *
 */

#include <exec/types.h>
#include <exec/memory.h>
#include "std.h"
#include "link.h"

#include "sys_proto.h"
#include "asm_proto.h"
#include "main_proto.h"
#include "link_proto.h"
#include "envoylink_proto.h"
#include "sadlink_proto.h"
#include "locallink_proto.h"
#include "validmem_proto.h"
#include "io_proto.h"
#include "parse_proto.h"

#include "linklib_protos.h"
#include "linklib_pragmas.h"
#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>
extern struct Library *SysBase;

extern struct LinkLibBase *LinkLibBase;

extern long remote_error;

short nestcount = 0;
BOOL protect = TRUE;

LONG
ValidAddress( APTR addr )
{
    return( validAddress( LinkLibBase->ll_ValidMem, addr ) );
}

LONG
ValidAddresses( APTR addr, ULONG len )
{
    return( validAddresses( LinkLibBase->ll_ValidMem, addr, len ) );
}

BYTE
ReadByte( APTR addr )
{
    BYTE result = 0;
    if ( ( !protect ) || validAddress( LinkLibBase->ll_ValidMem, addr ) )
    {
	result = LinkReadByte( addr );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
    return( result );
}


WORD
ReadWord( APTR addr )
{
    WORD result = 0;

    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, 2 ) )
    {
	result = LinkReadWord( addr );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }

    return( result );
}


LONG
ReadLong( APTR addr )
{
    LONG result = 0;

    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, 4 ) )
    {
	result = LinkReadLong( addr );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
    return( result );
}


void
ReadBlock( APTR addr, APTR buffer, ULONG size )
{
    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, size ) )
    {
	LinkReadBlock( addr, buffer, size );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
}


ULONG
ReadString( APTR addr, STRPTR buffer, ULONG maxlen )
{
    ULONG result = 0;

    if ( ( !protect ) || validAddress( LinkLibBase->ll_ValidMem, addr ) )
    {
	result = LinkReadString( addr, buffer, maxlen );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
    return( result );
}


void
WriteByte( APTR addr, BYTE value )
{
    if ( ( !protect ) || validAddress( LinkLibBase->ll_ValidMem, addr ) )
    {
	LinkWriteByte( addr, value );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
}


void
WriteWord( APTR addr, WORD value )
{
    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, 2 ) )
    {
	LinkWriteWord( addr, value );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
}


void
WriteLong( APTR addr, LONG value )
{
    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, 4 ) )
    {
	LinkWriteLong( addr, value );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
}

void
WriteBlock( APTR addr, APTR buffer, ULONG size )
{
    if ( ( !protect ) || validAddresses( LinkLibBase->ll_ValidMem, addr, size ) )
    {
	LinkWriteBlock( addr, buffer, size );
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
    }
}


STRPTR
ResumeExecution( void )
{
    if ( LinkResume() )
    {
	PPrintf("Resumed execution on target system\n");
    }
    else
    {
	PPrintf("Cannot resume execution\n");
    }

    return( NULL );
}


STRPTR
CallFunction( APTR addr )
{
    if ( LinkCall(addr) )
    {
	PPrintf("Called function $%lx on target system\n",addr);
    }
    else
    {
	PPrintf("Function $%lx failed to return\n",addr);
    }

    return( NULL );
}


STRPTR
ShowContext( void )
{
    if ( !LinkShowContext() )
    {
	PPrintf("Cannot get context\n");
    }

    return( NULL );
}

/* Obtain an array of node-pointers under Forbid() */
struct Node **
ObtainNodeArray( struct List *addr, ULONG size )
{
    long error;
    struct Node **array;
    long try = TRUE;

    while ( try )
    {
	try = FALSE;
	if ( array = malloc( (size+1) * sizeof( long ) ) )
	{
	    error = LinkReadNodeArray( addr, array, size );
	    if ( error > 0 )
	    {
		/* error > 0 signifies that the array wasn't big
		 * enough, so double its size and try again.
		 */
		free( array );
		array = NULL;
		size *= 2;
		try = TRUE;
	    }
	    else if ( error < 0 )
	    {
		/* error < 0 indicates a problem occurred.
		 * LinkObtainNodeArray() should have set
		 * a remote_error value.
		 */
		free( array );
		array = NULL;
	    }
	}
	else
	{
	    remote_error = WACKERROR_ALLOCFAIL;
	}
    }
    return( array );
}


/* Release an array obtained with ObtainNodeArray() */
void
ReleaseNodeArray( struct Node **array )
{
    free( array );
}


STRPTR
ProtectAddresses( char *arg )
{
    BOOL ok = TRUE;
    if ( arg = parseRemainder( arg ) )
    {
	if ( !stricmp( arg, "on" ) )
	{
	    protect = TRUE;
	}
	else if ( !stricmp( arg, "off" ) )
	{
	    protect = FALSE;
	}
	else
	{
	    PPrintf("Bad syntax.\n");
	    ok = FALSE;
	}
    }

    if ( ok )
    {
	if ( protect )
	{
	    PPrintf("Invalid addresses are protected from access\n");
	}
	else
	{
	    PPrintf("Invalid addresses are accessible\n");
	}
    }

    return( NULL );
}


APTR
OpenLinkLib( STRPTR arg )
{
    struct LinkLibBase *LinkLibBase = NULL;
    struct LinkFakeLibrary *lfl;

    if ( lfl = AllocMem( sizeof( struct LinkFakeLibrary ), MEMF_CLEAR ) )
    {
	long entry = 0;
	long unit;

	initLinkLVO( lfl, entry++, lib_stubReturn );	/* Open */
	initLinkLVO( lfl, entry++, lib_stubReturn );	/* Close */
	initLinkLVO( lfl, entry++, lib_stubReturn );	/* Expunge */
	initLinkLVO( lfl, entry++, lib_stubReturn );	/* Reserved */
	initLinkLVO( lfl, entry++, lib_stubReturn );	/* ARexx */

	if ( !arg )
	{
	    Local_InitLib( lfl );
	}
	else if ( IsDecNum( arg, &unit ) )
	{
	    SAD_InitLib( lfl );
	}
	else
	{
	    Envoy_InitLib( lfl );
	}

	CacheClearU();
	LinkLibBase = &lfl->lfl_LibBase;
    }
    return( LinkLibBase );
}


void
CloseLinkLib( APTR linkbase )
{
    struct LinkFakeLibrary *lfl;

    if ( linkbase )
    {
	lfl = (struct LinkFakeLibrary *)
	    (((ULONG)linkbase) - ((ULONG)&((struct LinkFakeLibrary *)0)->lfl_LibBase));
	FreeMem( lfl, sizeof( struct LinkFakeLibrary ) );
    }
}


void
initLinkLVO( struct LinkFakeLibrary *lfl, ULONG count, APTR funcptr )
{
    ULONG lvo = LINKTABLESIZE - 6*(count+1);
    *((UWORD *)&lfl->lfl_JumpTable[ lvo ]) = 0x4EF9;	/* jump instruction */
    *((ULONG *)&lfl->lfl_JumpTable[ lvo+2 ]) = (ULONG) funcptr;
}


ULONG
lib_stubReturn( void )
{
    return( 0 );
}
@


39.10
log
@added WriteBlock
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.9 93/06/02 15:50:24 peter Exp Locker: jesup $
d202 16
@


39.9
log
@Added ValidAddress() and ValidAddresses() functions.
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.8 93/05/21 17:33:12 peter Exp Locker: peter $
d177 14
@


39.8
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.7 93/05/07 17:06:58 peter Exp Locker: peter $
d42 12
@


39.7
log
@Enabled feature to remove memory protection.  Added ObtainNodeArray()
support.
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.6 93/05/03 14:38:40 peter Exp Locker: peter $
d166 1
a166 1
void
d177 2
d182 1
a182 1
void
d189 2
d244 1
a244 1
void
d276 2
@


39.6
log
@Minor renaming.
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.5 93/04/27 14:38:32 peter Exp Locker: peter $
d28 1
d41 1
a42 1

d47 1
a47 1
    if ( validAddress( LinkLibBase->ll_ValidMem, addr ) )
d64 1
a64 1
    if ( validAddresses( LinkLibBase->ll_ValidMem, addr, 2 ) )
d82 1
a82 1
    if ( validAddresses( LinkLibBase->ll_ValidMem, addr, 4 ) )
d97 1
a97 1
    if ( validAddresses( LinkLibBase->ll_ValidMem, addr, size ) )
d113 1
a113 1
    if ( validAddress( LinkLibBase->ll_ValidMem, addr ) )
d128 1
a128 1
    if ( validAddress( LinkLibBase->ll_ValidMem, addr ) )
d142 1
a142 1
    if ( validAddresses( LinkLibBase->ll_ValidMem, addr, 2 ) )
d156 1
a156 1
    if ( validAddresses( LinkLibBase->ll_ValidMem, addr, 4 ) )
d186 85
@


39.5
log
@Major rework of link architecture/naming.
@
text
@d6 1
a6 1
 * $Id: link.c,v 39.4 93/03/18 16:26:34 peter Exp Locker: peter $
d46 1
a46 1
    if ( validAddress( LinkLibBase->tl_ValidMem, addr ) )
d63 1
a63 1
    if ( validAddresses( LinkLibBase->tl_ValidMem, addr, 2 ) )
d81 1
a81 1
    if ( validAddresses( LinkLibBase->tl_ValidMem, addr, 4 ) )
d96 1
a96 1
    if ( validAddresses( LinkLibBase->tl_ValidMem, addr, size ) )
d112 1
a112 1
    if ( validAddress( LinkLibBase->tl_ValidMem, addr ) )
d127 1
a127 1
    if ( validAddress( LinkLibBase->tl_ValidMem, addr ) )
d141 1
a141 1
    if ( validAddresses( LinkLibBase->tl_ValidMem, addr, 2 ) )
d155 1
a155 1
    if ( validAddresses( LinkLibBase->tl_ValidMem, addr, 4 ) )
d243 1
a243 1
    ULONG lvo = TABLESIZE - 6*(count+1);
@


39.4
log
@Added showContext().  goTarget() now knows it only works from SAD.
@
text
@d4 1
a4 1
 * access.c -- Generic access functions for the target machine.
d6 1
a6 1
 * $Id: access.c,v 39.3 93/03/10 13:05:04 peter Exp Locker: peter $
d8 3
a10 4
 * These routines decide whether to invoke local or remote access
 * routines, based on how Wack is connected to its target.  As
 * well, the memory-access functions invoke the range-checking
 * tests before proceeding.
d15 1
d17 1
d20 1
d22 4
a25 4
#include "access_proto.h"
#include "envoyaccess_proto.h"
#include "sadaccess_proto.h"
#include "localaccess_proto.h"
d29 5
a33 2
extern short remote;
extern long sadremote;
d35 2
a36 1
extern struct MinList *validmem;
d41 3
a43 2
void
wackForbid( void )
d45 4
a48 7
    if ( remote )
    {
	Envoy_Forbid();
    }
    else if ( sadremote )
    {
	SAD_Forbid();
d52 1
a52 1
	Local_Forbid();
d54 1
d57 3
a59 2
void
wackPermit( void )
d61 3
a63 5
    if ( remote )
    {
	Envoy_Permit();
    }
    else if ( sadremote )
d65 1
a65 1
	SAD_Permit();
d69 1
a69 1
	Local_Permit();
d71 2
d75 3
a77 2
char
PutMemB( void *addr, char val )
d79 3
a81 1
    if ( validAddress( validmem, addr ) )
d83 1
a83 12
	if ( remote )
	{
	    Envoy_PutMemB( addr, val );
	}
	else if ( sadremote )
	{
	    SAD_PutMemB( addr, val );
	}
	else
	{
	    Local_PutMemB( addr, val );
	}
d89 2
a91 2
    return (val);
}
d93 2
a94 2
short
PutMem( void *addr, short val )
d96 1
a96 1
    if ( validAddresses( validmem, addr, 2 ) )
d98 1
a98 12
	if ( remote )
	{
	    Envoy_PutMemW( addr, val );
	}
	else if ( sadremote )
	{
	    SAD_PutMemW( addr, val );
	}
	else
	{
	    Local_PutMemW( addr, val );
	}
d104 1
a105 2
    return (val);
}
d107 2
a108 2
long
PutMemL( void *addr, long val )
d110 3
a112 1
    if ( validAddresses( validmem, addr, 4 ) )
d114 1
a114 12
	if ( remote )
	{
	    Envoy_PutMemW( addr, val );
	}
	else if ( sadremote )
	{
	    SAD_PutMemW( addr, val );
	}
	else
	{
	    Local_PutMemW( addr, val );
	}
d120 2
a122 2
    return (val);
}
d124 2
a125 2
char
GetMemB( void *addr )
d127 1
a127 2
    char   temp = 0;
    if ( validAddress( validmem, addr ) )
d129 1
a129 12
	if ( remote )
	{
	    temp = Envoy_GetMemB( addr );
	}
	else if ( sadremote )
	{
	    temp = SAD_GetMemB( addr );
	}
	else
	{
	    temp = Local_GetMemB( addr );
	}
a134 1
    return (temp);
a136 4
short
GetMem( void *addr )
{
    short   temp = 0;
d138 4
a141 1
    if ( validAddresses( validmem, addr, 2 ) )
d143 1
a143 12
	if ( remote )
	{
	    temp = Envoy_GetMemW( addr );
	}
	else if ( sadremote )
	{
	    temp = SAD_GetMemW( addr );
	}
	else
	{
	    temp = Local_GetMemW( addr );
	}
a148 2

    return (temp);
a150 4
long
GetMemL( void *addr )
{
    long temp = 0;
d152 4
a155 1
    if ( validAddresses( validmem, addr, 4 ) )
d157 1
a157 12
	if ( remote )
	{
	    temp = Envoy_GetMemL( addr );
	}
	else if ( sadremote )
	{
	    temp = SAD_GetMemL( addr );
	}
	else
	{
	    temp = Local_GetMemL( addr );
	}
a162 1
    return (temp);
d165 4
a168 6
unsigned long
GetStringBlock( void *addr, char *buffer, long maxlen )
{
    unsigned long temp = 0;

    if ( validAddress( validmem, addr ) )
d170 1
a170 12
	if ( remote )
	{
	    temp = Envoy_GetStringBlock( addr, buffer, maxlen );
	}
	else if ( sadremote )
	{
	    temp = SAD_GetStringBlock( addr, buffer, maxlen );
	}
	else
	{
	    temp = Local_GetStringBlock( addr, buffer, maxlen );
	}
d174 1
a174 1
	remote_error = WACKERROR_ILLEGALACCESS;
a175 1
    return( temp );
d180 1
a180 1
getBlock( void *addr, void *buffer, long size )
d182 1
a182 1
    if ( validAddresses( validmem, addr, size ) )
d184 23
a206 1
	if ( remote )
d208 1
a208 1
	    Envoy_GetBlock( addr, buffer, size );
d210 1
a210 1
	else if ( sadremote )
d212 1
a212 1
	    SAD_GetBlock( addr, buffer, size );
d216 1
a216 1
	    Local_GetBlock( addr, buffer, size );
d218 3
a220 4
    }
    else
    {
	remote_error = WACKERROR_ILLEGALACCESS;
d222 1
d225 3
a227 2
struct MinList *
obtainValidMemList( void )
d229 1
a229 1
    struct MinList *validlist;
d231 1
a231 5
    if ( remote )
    {
	validlist = Envoy_obtainValidMemList();
    }
    else if ( sadremote )
d233 3
a235 1
	validlist = SAD_obtainValidMemList();
a236 5
    else
    {
	validlist = Local_obtainValidMemList();
    }
    return( validlist );
d239 1
d241 1
a241 1
releaseValidMemList( struct MinList *validlist )
d243 3
a245 12
    if ( remote )
    {
	Envoy_releaseValidMemList( validlist );
    }
    else if ( sadremote )
    {
	SAD_releaseValidMemList( validlist );
    }
    else
    {
	Local_releaseValidMemList( validlist );
    }
a247 12
void
goTarget( void )
{
    if ( sadremote )
    {
	SAD_goTarget();
    }
    else
    {
	remote_error = WACKERROR_SADONLY;
    }
}
d250 1
a250 16
getContextAddr( void )
{
    ULONG result = 0;
    if ( sadremote )
    {
	result = SAD_getContextAddr();
    }
    else
    {
	remote_error = WACKERROR_SADONLY;
    }
    return( result );
}

void
showContext( void )
d252 1
a252 8
    if ( sadremote )
    {
	SAD_showContext();
    }
    else
    {
	remote_error = WACKERROR_SADONLY;
    }
@


39.3
log
@Now knows when to go to SAD.  Added goTarget() function.
@
text
@d6 1
a6 1
 * $Id: access.c,v 39.2 92/12/03 11:31:23 peter Exp Locker: peter $
d25 1
d320 19
a338 1
    if ( remote )
d340 1
a340 1
	Envoy_goTarget();
d342 7
a348 1
    else if ( sadremote )
d350 1
a350 1
	SAD_goTarget();
d354 1
a354 1
	Local_goTarget();
@


39.2
log
@Error codes are now #defines.
@
text
@d6 1
a6 1
 * $Id: access.c,v 39.1 92/11/02 17:07:51 peter Exp Locker: peter $
d22 1
d27 1
d41 4
d58 4
d77 4
d103 4
d129 4
d156 4
d183 4
d211 4
d238 4
d264 4
d288 4
d306 4
d313 17
@


39.1
log
@Implemented GetStringBlock().
@
text
@d6 1
a6 1
 * $Id: access.c,v 39.0 92/10/30 15:16:30 peter Exp Locker: peter $
d16 2
d74 1
a74 1
	remote_error = ~0;
d96 1
a96 1
	remote_error = ~0;
d118 1
a118 1
	remote_error = ~0;
d141 1
a141 1
	remote_error = ~0;
d164 1
a164 1
	remote_error = ~0;
d188 1
a188 1
	remote_error = ~0;
d211 1
a211 1
	remote_error = ~0;
d233 1
a233 1
	remote_error = ~0;
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d171 1
a171 1
    long   temp = 0;
d190 24
@
