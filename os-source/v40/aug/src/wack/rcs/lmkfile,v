head     39.27;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.27
date     93.08.26.15.14.52;  author peter;  state Exp;
branches ;
next     39.26;

39.26
date     93.08.23.23.42.39;  author jesup;  state Exp;
branches ;
next     39.25;

39.25
date     93.08.20.18.46.33;  author peter;  state Exp;
branches ;
next     39.24;

39.24
date     93.08.20.16.13.30;  author peter;  state Exp;
branches ;
next     39.23;

39.23
date     93.08.20.15.42.33;  author peter;  state Exp;
branches ;
next     39.22;

39.22
date     93.08.19.17.58.33;  author peter;  state Exp;
branches ;
next     39.21;

39.21
date     93.08.19.17.55.32;  author peter;  state Exp;
branches ;
next     39.20;

39.20
date     93.08.19.17.54.54;  author peter;  state Exp;
branches ;
next     39.19;

39.19
date     93.07.16.18.24.46;  author peter;  state Exp;
branches ;
next     39.18;

39.18
date     93.06.02.17.26.28;  author peter;  state Exp;
branches ;
next     39.17;

39.17
date     93.06.02.17.21.49;  author peter;  state Exp;
branches ;
next     39.16;

39.16
date     93.05.07.17.05.10;  author peter;  state Exp;
branches ;
next     39.15;

39.15
date     93.04.27.14.37.45;  author peter;  state Exp;
branches ;
next     39.14;

39.14
date     93.03.18.16.44.34;  author peter;  state Exp;
branches ;
next     39.13;

39.13
date     93.03.11.18.00.36;  author peter;  state Exp;
branches ;
next     39.12;

39.12
date     93.03.10.18.17.58;  author peter;  state Exp;
branches ;
next     39.11;

39.11
date     93.03.10.18.16.25;  author peter;  state Exp;
branches ;
next     39.10;

39.10
date     93.03.10.18.13.43;  author peter;  state Exp;
branches ;
next     39.9;

39.9
date     93.03.10.13.56.22;  author peter;  state Exp;
branches ;
next     39.8;

39.8
date     93.03.10.13.04.27;  author peter;  state Exp;
branches ;
next     39.7;

39.7
date     92.12.04.10.45.42;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     92.12.03.11.45.05;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     92.10.30.18.27.47;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.10.30.17.01.04;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.10.30.16.53.40;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.10.30.16.48.45;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.10.30.16.12.44;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.27.50;  author peter;  state Exp;
branches ;
next     ;


desc
@Make file for building Amiga Wack.
@


39.27
log
@Unified parallel and serial SAD Wack code.
@
text
@# Amiga Grand Wack
#
# $Id: lmkfile,v 39.26 93/08/23 23:42:39 jesup Exp Locker: peter $
#

VERSION = 40

CFLAGS = -. -b0 -cfist -v -ms -O -d $(MORECFLAGS)
LFLAGS = SMALLCODE SMALLDATA BATCH MAP wack.map X O H S F L plain
LLIBS = lib:lcnb.lib lib:small.lib lib:debug.lib

# Object files are $(FIRSTO), $(OFILES), $(LASTO), split to ensure
# correct compile/link ordering.
# main.o has to be linked first, since that's where our main routine is.
# vers.o should be the last DEPENDENCY, since then the revision number
#        will only be bumped if all compilations/assemblies succeed

FIRSTO = main.o
LASTO = vers.o

MAINOFILES= symload.o decode.o nmprintf.o \
	link.o show.o special.o ops.o bind.o sat.o \
	define.o ishexnum.o parse.o \
	showd.o showg.o showi.o showlock.o find.o copper.o \
	envoylink.o io.o locallink.o validmem.o \
	simplerexx.o wackbase.o rexxhandler.o menus.o

SADOFILES = sadlink.o sadapi.o
SADPAROFILES = sadparlink.o sadparapi.o

OFILES = $(MAINOFILES) $(SADOFILES)
PAROFILES = $(MAINOFILES) $(SADPAROFILES)

# C source files are split so the copy command doesn't barf.
# $(CFILES) = $(CFILES1) $(CFILES2) $(CFILES3)

CFILES1= link.c bind.c copper.c decode.c define.c sadlink.c envoylink.c \
	find.c io.c locallink.c main.c menus.c parse.c

CFILES2= ops.c rexxhandler.c sat.c show.c showd.c showg.c \
	showi.c showlock.c simplerexx.c special.c symload.c

CFILES3= validmem.c wackbase.c sadapi.c

CFILES= $(CFILES1) $(CFILES2) $(CFILES3)

# C header files are split so the copy command doesn't barf.  I've
# placed the proto files separately from the normal headers.
# $(HFILES) = $(HFILES1) $(PROTOHFILES1) $(PROTOHFILES2) $(PROTOHFILES3) $(PROTOHFILES4)

PROTOHFILES1= link_proto.h asm_proto.h bind_proto.h copper_proto.h \
	decode_proto.h define_proto.h envoylink_proto.h find_proto.h

PROTOHFILES2= io_proto.h locallink_proto.h main_proto.h \
	menus_proto.h ops_proto.h rexxhandler_proto.h sat_proto.h parse_proto.h

PROTOHFILES3= showd_proto.h showg_proto.h showi_proto.h showlock_proto.h \
	show_proto.h special_proto.h symload_proto.h

PROTOHFILES4= sys_proto.h validmem_proto.h wackbase_proto.h sadlink_proto.h \
	sadapi_proto.h

HFILES1= sadlink.h envoylink.h simplerexx.h special.h std.h symbols.h validmem.h parse.h link.h wackbase.h

HFILES = $(HFILES1) $(PROTOHFILES1) $(PROTOHFILES2) $(PROTOHFILES3) $(PROTOHFILES4)

AFILES= nmprintf.asm ishexnum.asm vers.asm

# Here we specify miscellaenous and assorted files.
# $(MISCFILES) are public miscellaneous files.
# $(IMISCFILES) are private miscellaneous files.
# $(DEMOFILES) are public Wack examples.
# $(IDEMOFILES) are internal Wack examples.
# $(TOOLFILES) are public Wack support tools.

MISCFILES= startup.wack wack_protos.h wack_pragmas.h Wack.doc

IMISCFILES= wack_lib.sfd linklib_lib.sfd wack.map lmkfile tags

LDFILES= wack.ld.strip wack.ld

EXEFILES= Wack WackServer

DEMOFILES= demos/arexxdemo.wack demos/xwackdemo.c demos/xwackdemo \
	demos/StructureOffset.rexx demos/ShowMember.wack demos/ShowStructure.wack \
	demos/ShowLVO.wack

IDEMOFILES= demos/LoadSym.rexx demos/LoadSym.wack demos/CheckSym.wack \
	demos/isa.wack demos/Member.wack demos/StructureOffset.wack

TOOLFILES= tools/DoSAD.0L tools/DoSAD.0M tools/DoSAD.0R \
	tools/DoSAD.1L tools/DoSAD.1M tools/DoSAD.1R

.c.o:
	lc $(CFLAGS) $*

.asm.o:
	@@echo "*NAssembling $*.asm"
	casm -a $*.asm $(AFLAGS) -o$*.o

all: Wack ParWack wack_protos.h

wack.lha: $(EXEFILES) $(MISCFILES) $(DEMOFILES) $(TOOLFILES)
	@@echo "" >wack.lha
	@@delete wack.lha quiet
	lha a -x wack.lha $(EXEFILES) $(MISCFILES)
	lha a -x wack.lha $(DEMOFILES)
	lha a -x wack.lha $(TOOLFILES)

wack_rev.rev: $(CFILES) $(AFILES) $(HFILES)
	bumprev $(VERSION) wack_rev

sadparlink.o: sadlink.c
	lc $(CFLAGS) -dSAD_PARALLEL=1 -osadparlink.o sadlink.c

sadparapi.o: sadapi.c
	lc $(CFLAGS) -dSAD_PARALLEL=1 -osadparapi.o sadapi.c


parwack.ld:	wack_protos.h linklib_protos.h $(FIRSTO) $(PAROFILES) $(LASTO)
	blink <with <
FROM $(FIRSTO) $(PAROFILES) $(LASTO)
TO parwack.ld
$(LFLAGS)
lib $(LLIBS)
<

parwack.ld.strip: parwack.ld
	blink from parwack.ld to parwack.ld.strip nodebug
	@@echo "*N --> Built ParWack $(VERSION)." NOLINE
	@@type wack_rev.rev

ParWack: parwack.ld.strip
	@@copy parwack.ld.strip ParWack

wack.ld:	wack_protos.h linklib_protos.h $(FIRSTO) $(OFILES) $(LASTO)
	blink <with <
FROM $(FIRSTO) $(OFILES) $(LASTO)
TO wack.ld
$(LFLAGS)
lib $(LLIBS)
<

wack.ld.strip: wack.ld
	blink from wack.ld to wack.ld.strip nodebug
	@@echo "*N --> Built Wack $(VERSION)." NOLINE
	@@type wack_rev.rev

Wack: wack.ld.strip
	@@copy wack.ld.strip Wack

WackServer: server/wackserver.ld.strip
	@@copy server/wackserver.ld.strip WackServer

vers.o: vers.asm wack_rev.rev
	@@echo "*NAssembling $*.asm"
	casm -a $*.asm $(AFLAGS) -o$*.o

wack_protos.h: wack_lib.sfd
	sfd -h wack_lib.sfd
	copy PROTOS/wack_protos.h ""
	copy PRAGMAS/wack_pragmas.h ""

linklib_protos.h: linklib_lib.sfd
	sfd -h linklib_lib.sfd
	copy PROTOS/linklib_protos.h ""
	copy PRAGMAS/linklib_pragmas.h ""

clean:
	delete \#?.(o|ld|ld.strip|map)

internal: wack.lha
	copy $(CFILES1) V$(VERSION):aug/src/wack nopro
	copy $(CFILES2) V$(VERSION):aug/src/wack nopro
	copy $(CFILES3) V$(VERSION):aug/src/wack nopro
	copy $(AFILES) V$(VERSION):aug/src/wack nopro
	copy $(HFILES1) V$(VERSION):aug/src/wack nopro
	copy $(PROTOHFILES1) V$(VERSION):aug/src/wack nopro
	copy $(PROTOHFILES2) V$(VERSION):aug/src/wack nopro
	copy $(PROTOHFILES3) V$(VERSION):aug/src/wack nopro
	copy $(PROTOHFILES4) V$(VERSION):aug/src/wack nopro

	copy $(EXEFILES) V$(VERSION):aug/src/wack nopro
	copy ParWack V$(VERSION):aug/src/wack nopro
	copy $(LDFILES) V$(VERSION):aug/src/wack nopro
	copy $(MISCFILES) V$(VERSION):aug/src/wack nopro
	copy $(IMISCFILES) V$(VERSION):aug/src/wack nopro
	copy $(DEMOFILES) V$(VERSION):aug/src/wack/demos nopro
	copy $(IDEMOFILES) V$(VERSION):aug/src/wack/demos nopro
	copy $(TOOLFILES) V$(VERSION):aug/src/wack/tools nopro
	copy wack.lha V$(VERSION):aug/src/wack nopro

	copy $(EXEFILES) V$(VERSION):aug/bin/wack nopro
	copy ParWack V$(VERSION):aug/bin/wack nopro
	copy $(MISCFILES) V$(VERSION):aug/bin/wack nopro
	copy $(DEMOFILES) V$(VERSION):aug/bin/wack nopro
	copy $(IDEMOFILES) V$(VERSION):aug/bin/wack nopro
	copy $(TOOLFILES) V$(VERSION):aug/bin/wack nopro
	copy wack.lha V$(VERSION):aug/bin/wack nopro

	copy $(EXEFILES) softserve:Public/Wack nopro
	copy $(MISCFILES) softserve:Public/Wack nopro
	copy $(DEMOFILES) softserve:Public/Wack nopro
	copy $(TOOLFILES) softserve:Public/Wack nopro
	copy wack.lha softserve:Public/Wack nopro
@


39.26
log
@added parwack
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.23 93/08/20 15:42:33 peter Exp $
d113 7
d184 1
d194 1
@


39.25
log
@Two .h files were missing
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.24 93/08/20 16:13:30 peter Exp Locker: peter $
d21 1
a21 1
OFILES= symload.o decode.o nmprintf.o \
d25 2
a26 2
	sadlink.o envoylink.o io.o locallink.o validmem.o \
	simplerexx.o wackbase.o rexxhandler.o menus.o sadapi.o
d28 6
d101 1
a101 1
all: Wack wack_protos.h
d112 16
@


39.24
log
@Oops.  Put wack.lha in aug/src/wack/tools by accident. 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.23 93/08/20 15:42:33 peter Exp Locker: peter $
d57 1
a57 1
HFILES1= sadlink.h envoylink.h simplerexx.h special.h std.h symbols.h validmem.h parse.h
@


39.23
log
@More cleanup of file groupings
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.22 93/08/19 17:58:33 peter Exp Locker: peter $
d161 1
a161 1
	copy wack.lha V$(VERSION):aug/src/wack/tools nopro
@


39.22
log
@Added Wack.doc and wack.lha to MISCFILES
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.21 93/08/19 17:55:32 peter Exp Locker: peter $
d12 2
d28 3
d41 4
d63 10
a72 1
MISCFILES= startup.wack wack_lib.sfd linklib_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile tags Wack.doc wack.lha
d74 1
a74 1
EXEFILES= wack.ld.strip wack.ld
d76 2
d82 1
a82 1
INTERNALDEMOS= demos/LoadSym.rexx demos/LoadSym.wack demos/CheckSym.wack \
a87 2
LHAFILES= Wack Wack.doc WackServer startup.wack wack_protos.h wack_pragmas.h

d97 1
a97 1
wack.lha: $(LHAFILES) $(DEMOFILES) $(TOOLFILES)
d100 1
a100 1
	lha a -x wack.lha $(LHAFILES)
d153 3
d157 1
a157 1
	copy $(EXEFILES) V$(VERSION):aug/src/wack nopro
d159 1
a159 1
	copy $(INTERNALDEMOS) V$(VERSION):aug/src/wack/demos nopro
d161 1
d163 2
a164 4
	copy Wack V$(VERSION):aug/bin/wack nopro
	copy WackServer V$(VERSION):aug/bin/wack nopro
	copy Wack.doc V$(VERSION):aug/bin/wack nopro
	copy startup.wack V$(VERSION):aug/bin/wack nopro
d166 1
a166 1
	copy $(INTERNALDEMOS) V$(VERSION):aug/bin/wack nopro
d168 1
d170 2
a171 4
	copy Wack softserve:Public/Wack nopro
	copy WackServer softserve:Public/Wack nopro
	copy Wack.doc softserve:Public/Wack nopro
	copy startup.wack softserve:Public/Wack nopro
a172 1
	copy $(INTERNALDEMOS) softserve:Public/Wack nopro
d174 1
@


39.21
log
@Make internal now assures lha is up-to-date
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.20 93/08/19 17:54:54 peter Exp Locker: peter $
d54 1
a54 1
MISCFILES= startup.wack wack_lib.sfd linklib_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile tags
@


39.20
log
@Now build an archive.  Cleaned up demos. 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.19 93/07/16 18:24:46 peter Exp Locker: peter $
d125 1
a125 1
internal: Wack WackServer
@


39.19
log
@Removed unused files symbols.c, hunks.c, symbols_proto.h, hunks_proto.h.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.18 93/06/02 17:26:28 peter Exp Locker: peter $
d58 2
a59 2
DEMOFILES1= demos/arexxdemo.wack demos/xwackdemo.c demos/xwackdemo \
	demos/LoadSym.rexx demos/LoadSym.wack demos/CheckSym.wack \
a60 3
DEMOFILES2= demos/StructureOffset.rexx demos/StructureOffset.wack \
	demos/ShowMember.wack demos/ShowStructure.wack demos/isa.wack \
	demos/Member.wack
d62 2
a63 2
DEMOFILES3= demos/DoSAD.0L demos/DoSAD.0M demos/DoSAD.0R \
	demos/DoSAD.1L demos/DoSAD.1M demos/DoSAD.1R
d65 5
d77 1
a77 1
all: wack.ld.strip wack_protos.h
d79 6
d102 6
d125 1
a125 1
internal:
d137 3
a139 3
	copy $(DEMOFILES1) V$(VERSION):aug/src/wack/demos nopro
	copy $(DEMOFILES2) V$(VERSION):aug/src/wack/demos nopro
	copy $(DEMOFILES3) V$(VERSION):aug/src/wack/demos nopro
d141 7
a147 6
	copy wack.ld.strip V$(VERSION):aug/bin/wack/wack nopro
	copy server/wackserver.ld.strip V$(VERSION):aug/bin/wack/wackserver nopro
	copy startup.wack V$(VERSION):aug/bin/wack/startup.wack nopro
	copy $(DEMOFILES1) V$(VERSION):aug/bin/wack nopro
	copy $(DEMOFILES2) V$(VERSION):aug/bin/wack nopro
	copy $(DEMOFILES3) V$(VERSION):aug/bin/wack nopro
d149 3
a151 2
	copy wack.ld.strip softserve:Public/Wack/Wack nopro
	copy server/wackserver.ld.strip softserve:Public/Wack/wackserver nopro
d153 3
a155 3
	copy $(DEMOFILES1) softserve:Public/Wack nopro
	copy $(DEMOFILES2) softserve:Public/Wack nopro
	copy $(DEMOFILES3) softserve:Public/Wack nopro
@


39.18
log
@Now put demos in V:aug/src too 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.17 93/06/02 17:21:49 peter Exp Locker: peter $
d20 2
a21 2
	link.o symbols.o show.o special.o ops.o bind.o sat.o \
	define.o ishexnum.o hunks.o parse.o \
d27 1
a27 1
	find.c hunks.c io.c locallink.c main.c menus.c parse.c
d30 1
a30 1
	showi.c showlock.c simplerexx.c special.c symbols.c symload.c
d39 1
a39 1
PROTOHFILES2= hunks_proto.h io_proto.h locallink_proto.h main_proto.h \
d43 1
a43 1
	show_proto.h special_proto.h symbols_proto.h symload_proto.h
@


39.17
log
@Updated DoSAD and file names.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.16 93/05/07 17:05:10 peter Exp Locker: peter $
d123 3
@


39.16
log
@Removed actions.asm/.o since we've upcoded everything that was there.
Added parse.c/.o/.h/_proto.h.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.15 93/04/27 14:37:45 peter Exp Locker: peter $
d54 1
a54 1
MISCFILES= startup.wack wack_lib.sfd link_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile tags
d62 2
a63 1
	demos/ShowMember.wack demos/ShowStructure.wack demos/isa.wack demos/Member.wack
d65 2
a66 1
DEMOFILES3= demos/DoSAD0.ld demos/DoSAD1.ld
@


39.15
log
@Renaming of link-related modules.  Added link_lib.sfd rules.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.14 93/03/18 16:44:34 peter Exp Locker: peter $
d19 1
a19 1
OFILES= actions.o symload.o decode.o nmprintf.o \
d21 1
a21 1
	define.o ishexnum.o hunks.o \
d27 1
a27 1
	find.c hunks.c io.c locallink.c main.c menus.c
d40 1
a40 1
	menus_proto.h ops_proto.h rexxhandler_proto.h sat_proto.h
d48 1
a48 1
HFILES1= sadlink.h envoylink.h simplerexx.h special.h std.h symbols.h validmem.h
d52 1
a52 1
AFILES= actions.asm nmprintf.asm ishexnum.asm vers.asm
@


39.14
log
@Bumped to V40 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.13 93/03/11 18:00:36 peter Exp Locker: peter $
d9 1
a9 1
LFLAGS = SMALLCODE SMALLDATA ADDSYM BATCH MAP wack.map X O H S F L plain
d20 1
a20 1
	access.o symbols.o show.o special.o ops.o bind.o sat.o \
d23 1
a23 1
	sadaccess.o envoyaccess.o io.o localaccess.o validmem.o \
d26 2
a27 2
CFILES1= access.c bind.c copper.c decode.c define.c sadaccess.c envoyaccess.c \
	find.c hunks.c io.c localaccess.c main.c menus.c
d36 2
a37 2
PROTOHFILES1= access_proto.h asm_proto.h bind_proto.h copper_proto.h \
	decode_proto.h define_proto.h envoyaccess_proto.h find_proto.h
d39 1
a39 1
PROTOHFILES2= hunks_proto.h io_proto.h localaccess_proto.h main_proto.h \
d45 1
a45 1
PROTOHFILES4= sys_proto.h validmem_proto.h wackbase_proto.h sadaccess_proto.h \
d48 1
a48 1
HFILES1= sadaccess.h envoyaccess.h simplerexx.h special.h std.h symbols.h validmem.h
d54 1
a54 1
MISCFILES= startup.wack wack_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile tags
d79 1
a79 1
wack.ld:	$(FIRSTO) $(OFILES) $(LASTO)
d100 5
@


39.13
log
@Added ShowStructure.wack to demo files.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.12 93/03/10 18:17:58 peter Exp Locker: peter $
d6 1
a6 1
VERSION = 39
@


39.12
log
@Supposed to be softserve:Public, not :Products
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.11 93/03/10 18:16:25 peter Exp Locker: peter $
d62 1
a62 1
	demos/ShowMember.wack demos/isa.wack demos/Member.wack
@


39.11
log
@Now copy wackserver too 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.10 93/03/10 18:13:43 peter Exp Locker: peter $
d124 6
a129 6
	copy wack.ld.strip softserve:Products/Wack/Wack nopro
	copy server/wackserver.ld.strip softserve:Products/Wack/wackserver nopro
	copy startup.wack softserve:Products/Wack nopro
	copy $(DEMOFILES1) softserve:Products/Wack nopro
	copy $(DEMOFILES2) softserve:Products/Wack nopro
	copy $(DEMOFILES3) softserve:Products/Wack nopro
@


39.10
log
@Make internal now copies to softserve too.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.9 93/03/10 13:56:22 peter Exp Locker: peter $
d118 1
d125 1
@


39.9
log
@Added DoSAD0/1 to demofiles 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.8 93/03/10 13:04:27 peter Exp Locker: peter $
d122 6
@


39.8
log
@Added SAD c files.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.7 92/12/04 10:45:42 peter Exp Locker: peter $
d64 2
d121 1
@


39.7
log
@Now turn on optimizer 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.6 92/12/03 11:45:05 peter Exp Locker: peter $
d23 2
a24 2
	envoyaccess.o io.o localaccess.o validmem.o \
	simplerexx.o wackbase.o rexxhandler.o menus.o
d26 1
a26 1
CFILES1= access.c bind.c copper.c decode.c define.c  envoyaccess.c \
d32 1
a32 1
CFILES3= validmem.c wackbase.c 
d45 2
a46 1
PROTOHFILES4= sys_proto.h validmem_proto.h wackbase_proto.h
d48 1
a48 1
HFILES1= envoyaccess.h simplerexx.h special.h std.h symbols.h validmem.h
@


39.6
log
@Now installs demos.  Now installs into a directory of V39:aug/bin.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.5 92/10/30 18:27:47 peter Exp Locker: peter $
d8 1
a8 1
CFLAGS = -. -b0 -cfist -v -ms -d $(MORECFLAGS)
@


39.5
log
@startup.wack was clobbering wack in make internal 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.4 92/10/30 17:01:04 peter Exp Locker: peter $
d57 6
d114 4
a117 2
	copy wack.ld.strip V$(VERSION):aug/bin/wack nopro
	copy startup.wack V$(VERSION):aug/bin/startup.wack nopro
@


39.4
log
@Now installs startup.wack too 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.3 92/10/30 16:53:40 peter Exp Locker: peter $
d109 1
a109 1
	copy startup.wack V$(VERSION):aug/bin/wack nopro
@


39.3
log
@Make internal now works. 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.2 92/10/30 16:48:45 peter Exp Locker: peter $
d53 1
a53 1
MISCFILES= wack_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile tags
d109 1
@


39.2
log
@Made changes to help make internal succeed 
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.1 92/10/30 16:12:44 peter Exp Locker: peter $
d30 1
a30 2
	showi.c showlock.c simplerexx.c special.c symbols.c symload.c \
	validmem.c wackbase.c 
d32 1
a32 1
CFILES= $(CFILES1) $(CFILES2)
d34 2
d43 3
a45 2
	show_proto.h special_proto.h symbols_proto.h symload_proto.h \
	sys_proto.h validmem_proto.h wackbase_proto.h
d49 1
a49 1
HFILES = $(HFILES1) $(PROTOHFILES1) $(PROTOHFILES2) $(PROTOHFILES3)
d98 1
d104 1
@


39.1
log
@Added tags to MISCFILES.
@
text
@d3 1
a3 1
# $Id: lmkfile,v 39.0 92/10/30 15:27:50 peter Exp Locker: peter $
a6 1
SRCPATH= V${VERSION}/utilities/wack
d26 4
a29 3
CFILES = access.c bind.c copper.c decode.c define.c  envoyaccess.c \
	find.c hunks.c io.c localaccess.c main.c menus.c \
	ops.c rexxhandler.c sat.c show.c showd.c showg.c \
d33 9
a41 5
PROTOHFILES= access_proto.h asm_proto.h bind_proto.h copper_proto.h \
	decode_proto.h define_proto.h envoyaccess_proto.h find_proto.h \
	hunks_proto.h io_proto.h localaccess_proto.h main_proto.h \
	menus_proto.h ops_proto.h rexxhandler_proto.h sat_proto.h \
	showd_proto.h showg_proto.h showi_proto.h showlock_proto.h \
d45 1
a45 1
HFILES= envoyaccess.h simplerexx.h special.h std.h symbols.h validmem.h $(PROTOHFILES)
d47 2
a54 2
#MISCFILES= HOW_TO README wack.notes2

d62 1
a62 1
all: wack.ld.strip wackserver wack_protos.h
d94 11
a104 5
	copy $(CFILES) V$(VERSION):aug/src/wack
	copy $(AFILES) V$(VERSION):aug/src/wack
	copy $(HFILES) V$(VERSION):aug/src/wack
	copy $(MISCFILES) V$(VERSION):aug/src/wack
	copy $(EXEFILES) V$(VERSION):aug/src/wack
@


39.0
log
@Initial RCS check-in.
@
text
@d3 1
a3 1
# $Id: $
d45 1
a45 1
MISCFILES= wack_lib.sfd wack_protos.h wack_pragmas.h wack.map lmkfile
@
