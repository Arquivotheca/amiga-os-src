head     39.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.4
date     93.05.21.17.35.55;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.05.07.17.07.41;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.04.27.14.42.22;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.03.11.30.35;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.26.26;  author peter;  state Exp;
branches ;
next     ;


desc
@Wack extensions common include.
@


39.4
log
@Command functions now return NULL string.
@
text
@/*
 * Amiga Grand Wack
 *
 * special.h - Wack extensions common include.
 *
 * $Id: special.h,v 39.3 93/05/07 17:07:41 peter Exp Locker: peter $
 *
 * Contains macros to help show structures.  Based on a dumpXXX() function
 * you write, SHOWONE() builds a ShowXXX() function.  SHOWSIMPLE() builds
 * both ShowXXX() and ShowXXXList().
 *
 */

/* amiga core address for field in sun-buffered structure */
#define CADDR(base, buffer, field) 	\
    ((APTR)( (ULONG) (base) + ((ULONG) (field) - (ULONG) (buffer)) ))

#define REFRESH (flags = -1)
#define NOREFRESH (flags = 0)

#define IBADDR(a) ((APTR) ((ULONG) (a) - (ULONG)(&IBase) + (ULONG)(ibase)))

/* builds callers to dumpT(addr, ptr) where T is not a node	*/
#define SHOWONE(T) \
	STRPTR Show ## T( char *arg ) \
	{ struct T *w;ULONG dump ## T(); if (parseAddress(arg, (ULONG *)&w)) { \
	doMinNode((struct MinNode *)w, sizeof (struct T), dump ## T); }\
	else BadSyntax(); return( NULL ); }

/* builds callers to dumpT(addr, ptr) where T is a node in a linked list */
#define SHOWSIMPLE(T,newline) \
	STRPTR Show ## T( char *arg ) \
	{ struct T *w;ULONG dump ## T(); if (parseAddress(arg, (ULONG *)&w)) { \
	doMinNode((struct MinNode *)w, sizeof (struct T), dump ## T); }\
	else BadSyntax(); return( NULL ); }\
	\
	STRPTR Show ## T ## List( char *arg ) \
	{ struct T *w;ULONG dump ## T(); if (parseAddress(arg, (ULONG *)&w)) { \
	WalkSimpleList(w, sizeof (struct T), dump ## T, newline); }\
	else BadSyntax(); return( NULL ); }

#if 0 	/* Here's what an example looks like	*/

SHOWSIMPLE( Window, newline ) yields:

STRPTR ShowWindow( char *arg )
{
    struct Window	*w;

    ULONG	dumpWindow();
    if (parseAddress(arg, (ULONG *)&w))
    {
	doMinNode( (struct MinNode *)w, sizeof (struct Window), dumpWindow);
    }
    else BadSyntax();

    return( NULL );
}

STRPTR ShowWindowList( char *arg )
{
    struct Window	*w;

    ULONG	dumpWindow();
    if (parseAddress(arg, (ULONG *)&w))
    {
	WalkSimpleList( w, sizeof (struct Window), dumpWindow, newline );
    }
    else BadSyntax();

    return( NULL );
}

these call dumpWindow(APTR arg, struct Window *window);

#endif
@


39.3
log
@Switched to new parsing routines.
@
text
@d6 1
a6 1
 * $Id: special.h,v 39.2 93/04/27 14:42:22 peter Exp Locker: peter $
a13 2
typedef void (*voidfunc)();

d25 1
a25 1
	void Show ## T( char *arg ) \
d28 1
a28 1
	else BadSyntax(); }
d32 1
a32 1
	void Show ## T( char *arg ) \
d35 1
a35 1
	else BadSyntax(); }\
d37 1
a37 1
	void Show ## T ## List( char *arg ) \
d40 1
a40 1
	else BadSyntax(); }
d46 1
a46 1
void ShowWindow( char *arg )
d56 2
d60 1
a60 1
void ShowWindowList( char *arg )
d70 2
@


39.2
log
@Changed the list walkers to optionally insert NewLine()s between nodes.
@
text
@d6 1
a6 1
 * $Id: special.h,v 39.1 92/12/03 11:30:35 peter Exp Locker: peter $
d28 1
a28 1
	{ struct T *w;ULONG dump ## T(); if (hexArgAddr(arg, (ULONG *)&w)) { \
d35 1
a35 1
	{ struct T *w;ULONG dump ## T(); if (hexArgAddr(arg, (ULONG *)&w)) { \
d40 1
a40 1
	{ struct T *w;ULONG dump ## T(); if (hexArgAddr(arg, (ULONG *)&w)) { \
d53 1
a53 1
    if (hexArgAddr(arg, (ULONG *)&w))
d65 1
a65 1
    if (hexArgAddr(arg, (ULONG *)&w))
@


39.1
log
@AddrArg() renamed to hexArgAddr().
@
text
@d6 1
a6 1
 * $Id: special.h,v 39.0 92/10/30 15:26:26 peter Exp Locker: peter $
d33 1
a33 1
#define SHOWSIMPLE(T) \
d41 1
a41 1
	WalkSimpleList(w, sizeof (struct T), dump ## T); }\
d46 1
a46 1
SHOWSIMPLE( Window ) yields:
d67 1
a67 1
	WalkSimpleList( w, sizeof (struct Window), dumpWindow);
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d28 1
a28 1
	{ struct T *w;ULONG dump ## T(); if (AddrArg(arg, (ULONG *)&w)) { \
d35 1
a35 1
	{ struct T *w;ULONG dump ## T(); if (AddrArg(arg, (ULONG *)&w)) { \
d40 1
a40 1
	{ struct T *w;ULONG dump ## T(); if (AddrArg(arg, (ULONG *)&w)) { \
d53 1
a53 1
    if (AddrArg(arg, (ULONG *)&w))
d65 1
a65 1
    if (AddrArg(arg, (ULONG *)&w))
@
