head     39.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.16
date     93.11.05.14.59.13;  author jesup;  state Exp;
branches ;
next     39.15;

39.15
date     93.08.19.16.35.11;  author peter;  state Exp;
branches ;
next     39.14;

39.14
date     93.07.16.18.38.54;  author peter;  state Exp;
branches ;
next     39.13;

39.13
date     93.07.16.18.24.55;  author peter;  state Exp;
branches ;
next     39.12;

39.12
date     93.06.02.15.50.37;  author peter;  state Exp;
branches ;
next     39.11;

39.11
date     93.05.21.17.33.25;  author peter;  state Exp;
branches ;
next     39.10;

39.10
date     93.05.03.14.38.56;  author peter;  state Exp;
branches ;
next     39.9;

39.9
date     93.04.27.14.41.02;  author peter;  state Exp;
branches ;
next     39.8;

39.8
date     93.03.18.16.28.00;  author peter;  state Exp;
branches ;
next     39.7;

39.7
date     93.03.10.13.04.51;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     93.01.08.10.27.32;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     92.12.03.14.16.03;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.11.24.10.51.14;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.11.06.15.39.51;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.11.02.17.08.37;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.10.30.16.12.48;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.20.44;  author peter;  state Exp;
branches ;
next     ;


desc
@"Main" file for Wack.
@


39.16
log
@added my name
@
text
@/*
 * Amiga Grand Wack
 *
 * main.c -- "Main" file for Wack.
 *
 * $Id: main.c,v 39.15 93/08/19 16:35:11 peter Exp Locker: jesup $
 *
 * This file contains a lot of the Wack globals, and the actual
 * main routine, which calls out a lot of stuff (in particular,
 * initialization in io.c).  Some of the help info is here.
 * 
 */

#include "std.h"
#include "symbols.h"

#include "sys_proto.h"
#include "sat_proto.h"
#include "define_proto.h"
#include "symload_proto.h"
#include "main_proto.h"
#include "link_proto.h"
#include "io_proto.h"

#include "linklib_protos.h"
#include "linklib_pragmas.h"

#define DMA_DEV "/dev/bb0"


char *program;
#if 0
FILE  *SymFile;
#endif

short td = 0;
APTR LinkLibBase = NULL;

extern int errno;
short flags;

short Backup;
short LastToken;
long Accum;
long holdRTS;
long LastNum;
long CurrAddr=0;
/* Swappable address ptr.  Also, some commands set this up. "!" to swap */
long SpareAddr=0;
long DisasmAddr=0;
long HoldNum=0;
long FrameSize=16;
char *InputPtr;

char stream[100];
char *streamp;

long values[20];

long proceed = 1;

extern UWORD far VERSION;
extern UWORD far REVISION;

LONG
mymain( void )
{
#if 0
    char fileName[1024];
#endif
    STRPTR machine;
    STRPTR errorstr;
    LONG rc = 20;

    if ( !( errorstr = openEnvironment() ) )
    {
	machine = getTarget();

	if ( LinkLibBase = OpenLinkLib( machine ) )
	{
	    rc = 10;
	    if ( !( errorstr = LinkConnect( machine ) ) )
	    {
		rc = 20;
		if ( !( errorstr = openWin() ) )
		{
		    rc = 0;
		    Banner();

		    TryIt();

		    clearBPT();

		    executeStartupFile();

		    processInput();
		}
		closeWin();
	    }

	    LinkDisconnect();

	    CloseLinkLib( LinkLibBase );
	}
    }

    UnBindSymbols();

    closeEnvironment( errorstr );

    return( rc );
}


STRPTR
Conclude( void )
{
    proceed = 0;
    return( NULL );
}

void
Banner( void )
{
    PPrintf( "\n  Amiga Wack Local/Remote Debugger (Version %ld.%ld)\n  © Copyright 1988-1993, Commodore-Amiga, Inc.\n", VERSION, REVISION );
}

STRPTR
Credits( void )
{
    Banner();
    NewLine();
    PPrintf("Wack the extensible local/remote Amiga debugger, is the work of many people.\n");
    PPrintf("The mastermind of the current incarnation is\n");
    PPrintf("    Peter Cherna\n");
    PPrintf("who was responsible for most of the design and enhancements of the\n");
    PPrintf("past few years, including the native port and all sorts of nifty features...\n");
    PPrintf("Derived from Sun Grand-Wack, last maintained and generally kept cool by\n");
    PPrintf("    Jim Mackraz\n");
    PPrintf("Other contributors:\n");
    PPrintf("    Mike Sinz (help with ARexx and hunk support)\n");
    PPrintf("    Greg Miller (SAD support and help with Envoy support)\n");
    PPrintf("    Ken Dyke (help with Envoy support)\n");
    PPrintf("    Randell Jesup (parallel support, read/write block, call)\n");

    return( NULL );
}
@


39.15
log
@Consolidated Banner() printing.  Updated credits.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.14 93/07/16 18:38:54 peter Exp Locker: peter $
d144 1
@


39.14
log
@Typo got into file. 
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.13 93/07/16 18:24:55 peter Exp Locker: peter $
a59 4
long LastWindow = 0;

long LastTask = 0;

d88 1
a88 1
		    PPrintf( "Amiga Grand-Wack %ld.%ld\n\n", VERSION, REVISION );
d122 6
d131 4
a134 2
    PPrintf("Amiga Grand-Wack %ld.%ld\n\n", VERSION, REVISION );
    PPrintf("A fine piece of Frankensteinian software, whose current mad scientist is\n");
d137 2
a138 2
    PPrintf("past few years, including the native port and all sorts of cool features...\n");
    PPrintf("Derived from Sun Grand-Wack, last maintained and generally kept hip by\n");
d140 2
a141 2
    PPrintf("Thanks to:\n");
    PPrintf("    Mike Sinz (help with ARexx support)\n");
@


39.13
log
@Removed "internal" banner.  Removed unused hunk code.
@
text
@d1 1
a1 1
i/*
d6 1
a6 1
 * $Id: main.c,v 39.12 93/06/02 15:50:37 peter Exp Locker: peter $
@


39.12
log
@Moved help text out of here.
@
text
@d1 1
a1 1
/*
d6 1
a6 1
 * $Id: main.c,v 39.11 93/05/21 17:33:25 peter Exp Locker: peter $
a92 1
		    PPrintf("  For Commodore-Amiga Internal Use Only!\n");
a94 19

#if 0
		    if (argc-- > 1) {
			sscanf (*argv++, "%s", fileName);
			if ((SymFile = fopen (fileName, "r")) == NULL) {
			    quit ("not opening symbol file");
			}
			SuckSymbols ();
		    }

		    if (argc-- > 1) {
			sscanf (*argv++, "%s", fileName);
			if ((SymFile = fopen (fileName, "r")) == NULL) {
			    quit ("not opening hunk file");
			}
			SuckHunks ();
			FixupTopMap ();
		    }
#endif
@


39.11
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.10 93/05/03 14:38:56 peter Exp Locker: peter $
a93 1
		    PPrintf("  (Type 'newhelp' for Intuition and Graphics commands)\n");
a144 74

STRPTR
Help( void )
{
    PPrintf("Keystrokes:\n");
    PPrintf("    .   forward a frame         ,   backward a frame\n");
    PPrintf("    >   forward a word          <   backward a word\n");
    PPrintf("    +n  forward n bytes         -n  backward n bytes\n");
    PPrintf("    n   set position to n       :n  set frame size to n\n");
    PPrintf("    [   indirect thru current   ]   exdirect to previous\n");
    PPrintf("    {   indirect BPTR thru current\n");	/*}*/
    PPrintf("    ^   set breakpoint (count)  #   toggle trace mode\n");
    PPrintf("    ;   disassemble frame       $   symbol name for current\n");
    PPrintf("    =   assign value            \"   execute as an ARexx string file\n");
    PPrintf("    !   swap current address pointer with spare\n");
    PPrintf("Command Symbols:\n");
    PPrintf("    quit -- return to shell\n");
    PPrintf("    go -- resume execution on target machine (SAD only)\n");
    PPrintf("    context -- show processor context frame (SAD only)\n");
    PPrintf("    setdump -- set dump parameters [narrow|wide] [ascii|noascii] [quiet]\n");
    PPrintf("    nodes -- print list nodes\n");
    PPrintf("    tasks -- show all tasks\n");
    PPrintf("    showtask (=task) -- format current frame as a task\n");
    PPrintf("    showprocess (=proc) -- format current frame as a process\n");
    PPrintf("    sp -- show stack pointer of last task/process looked at\n");
    PPrintf("    attach -- attach symbolmap to task at current frame\n");
    PPrintf("    devices (=devs) -- show all devices\n");
    PPrintf("    libraries (=libs) -- show all libraries\n");
    PPrintf("    resources (=rsrcs) -- show all resources\n");
    PPrintf("    memory (=mem) -- show memory allocation lists\n");
    PPrintf("    regions -- show memory regions\n");
    PPrintf("    modules (=mods) -- show system modules\n");
    PPrintf("    ints -- show all interrupts\n");
    PPrintf("    ports -- show all public ports\n");
    PPrintf("    symbols -- show all symbols\n");
    PPrintf("    bindhunks -- attach symbolmap to current segment list\n");
    PPrintf("    findrom -- show ROM-like addresses starting at current frame\n");
    PPrintf("    keys -- show key bindings\n");
    PPrintf("    dec -- convert to decimal (eg. \"dec abcd\")\n");
    PPrintf("    hex -- convert to hexadecimal (eg. \"hex 1234\")\n");
    PPrintf("    bptr -- convert BPTR to hexadecimal (eg. \"bptr abcd\")\n");
    PPrintf("    rx -- execute an ARexx command\n");
    PPrintf("    rxs -- execute an ARexx string file\n");
    PPrintf("    system -- execute a shell command\n");
    PPrintf("    capture -- capture output to named file (option \"append\" to append)\n");
    PPrintf("    captureoff -- stop output capture\n");
    PPrintf("    about -- show credits\n");
    NewLine();
    PPrintf("    Also see \"newhelp\" and \"bindhelp\"\n");

    return( NULL );
}

STRPTR
BindHelp( void )
{
    PPrintf("Wack binding features:\n\n");
    PPrintf("    bindalias -- bind a new keyword to an old one (eg. bindalias new old)\n");
    PPrintf("    bindrx -- bind a keyword to an ARexx command (eg. bindrx foo \"say hello\")\n");
    PPrintf("    bindsystem -- bind a keyword to a shell command (eg. bindsystem ls c:list)\n");
    PPrintf("    bindxwack -- bind a keyword to an external Wack command\n");
    NewLine();
    PPrintf("    bindheader -- make a menu header\n");
    PPrintf("                  bindheader \"MenuName\"\n");
    PPrintf("    binditem -- bind a keyword to a menu item (creates menu if unknown)\n");
    PPrintf("                binditem \"MenuName\" \"ItemName\" \"function\" [\"commkey\"]\n");
    PPrintf("                binditem \"MenuName\" \"-\"  (make separator bar)\n");
    PPrintf("    bindsub -- bind a keyword to a menu subitem (creates menu/item if unknown)\n");
    PPrintf("               bindsub \"MenuName\" \"ItemName\" \"SubName\" \"function\" [\"commkey\"]\n");
    PPrintf("               bindsub \"MenuName\" \"ItemName\" \"-\"  (make separator bar)\n");

    return( NULL );
}

@


39.10
log
@Minor renaming.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.9 93/04/27 14:41:02 peter Exp Locker: peter $
d140 1
a140 1
void
d144 1
d147 1
a147 1
void
d195 2
d199 1
a199 1
void
d216 2
d221 1
a221 1
void
d235 2
@


39.9
log
@Rework of link architecture/naming.  Rework of startup-conditions:
Link is now established before opening the window.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.8 93/03/18 16:28:00 peter Exp Locker: peter $
d119 1
a119 1
		    doStartup();
d121 1
a121 1
		    Interp();
@


39.8
log
@Added context command to help.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.7 93/03/10 13:04:51 peter Exp Locker: peter $
a13 2
typedef unsigned short uword;

d22 1
a22 3
#include "sadaccess_proto.h"
#include "envoyaccess_proto.h"
#include "access_proto.h"
d25 2
a35 3
short remote = 1;
long sadremote = 0;
long sadunit = 0;
d37 1
a68 2
struct MinList *validmem = NULL;

d76 2
a77 1
    LONG rc = 0;
d79 1
a79 1
    if ( ( machine = init_IO() ) != (STRPTR) -1 )
d81 1
a81 4
	PPrintf( "Amiga Grand-Wack %ld.%ld\n\n", VERSION, REVISION );
	Facts ();

	remote = 0;
d83 1
a83 1
	if ( machine )
d85 2
a86 3
	    remote = 1;
	    PPrintf("Attempting to connect to machine %s... ", machine );
	    if ( !Envoy_Init( machine ) )
d88 9
a96 21
		PPrintf("failed\n");
		rc = 10;
	    }
	    else
	    {
		PPrintf("connected\n");
	    }
	}
	else if ( sadremote )
	{
	    PPrintf("Attempting to use SAD..." );
	    if ( !SAD_Init( sadunit ) )
	    {
		PPrintf("failed\n");
		rc = 10;
	    }
	    else
	    {
		PPrintf("connected\n");
	    }
	}
d98 18
a115 3
	if ( !rc )
	{
	    validmem = obtainValidMemList();
d117 1
a117 1
	    TryIt ();
d119 1
a119 8
#if 0
	    if (argc-- > 1) {
		sscanf (*argv++, "%s", fileName);
		if ((SymFile = fopen (fileName, "r")) == NULL) {
		    quit ("not opening symbol file");
		}
		SuckSymbols ();
	    }
d121 1
a121 4
	    if (argc-- > 1) {
		sscanf (*argv++, "%s", fileName);
		if ((SymFile = fopen (fileName, "r")) == NULL) {
		    quit ("not opening hunk file");
d123 1
a123 2
		SuckHunks ();
		FixupTopMap ();
a124 3
#endif

	    clearBPT ();
d126 1
a126 1
	    doStartup();
d128 1
a128 1
	    Interp();
a130 11
    else
    {
	rc = 20;
    }

    releaseValidMemList( validmem );

    if ( sadremote )
    {
    	SAD_Exit();
    }
a131 5
    if ( remote )
    {
	Envoy_Exit();
    }

d134 1
a134 1
    exit_IO();
a193 1
    NewLine();
a212 1
    NewLine();
a214 7
void
Facts( void )
{
    PPrintf("  For Commodore-Amiga Internal Use Only!\n\n");
    /* jimm: */
    PPrintf("  Type 'newhelp' for Intuition and Graphics commands\n\n");
}
a229 1
    NewLine();
@


39.7
log
@Now handles SAD.  Added credits.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.6 93/01/08 10:27:32 peter Exp Locker: peter $
d199 1
@


39.6
log
@Added help for capture functions.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.5 92/12/03 14:16:03 peter Exp Locker: peter $
d24 1
d26 1
a27 1
#include "access_proto.h"
d39 2
d105 13
d158 5
d198 1
a220 1
    NewLine();
d226 1
d258 17
@


39.5
log
@Added setdump to help, made new BindHelp.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.4 92/11/24 10:51:14 peter Exp Locker: peter $
a194 1
    NewLine();
d203 2
@


39.4
log
@Better handling of failure to connect to remote machine.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.3 92/11/06 15:39:51 peter Exp Locker: peter $
d177 1
d204 9
d215 1
a215 1
    PPrintf("    bindsystem -- bind a keyword to a shell command (eg. bindsystem ls list)\n");
d218 8
a225 1
    PPrintf("    Also see \"newhelp\"\n");
a227 1

@


39.3
log
@Was looking for the incorrect failure result from init_IO().
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.2 92/11/02 17:08:37 peter Exp Locker: peter $
d97 4
a100 1
	    PPrintf("connected\n");
d129 2
@


39.2
log
@Now give positive feedback message when connection is established.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.1 92/10/30 16:12:48 peter Exp Locker: peter $
d81 1
a81 1
    if ( ( machine = init_IO() ) != (STRPTR) 1 )
@


39.1
log
@Updated help text.
@
text
@d6 1
a6 1
 * $Id: main.c,v 39.0 92/10/30 15:20:44 peter Exp Locker: peter $
d90 2
a91 1
	    PPrintf("Attempting to connect to machine %s...\n", machine );
d94 1
a94 1
		PPrintf("Failed to access machine %s\n", machine );
d97 1
a97 1
	    remote = 1;
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d164 1
a164 1
    PPrintf("    {   indirect bptr thru current\n");	/*}*/
d167 1
a167 1
    PPrintf("    =   assign value\n");
d175 1
d187 1
a187 1
    PPrintf("    findrom (=rom) -- show ROM-like addresses starting at current frame\n");
d190 11
a200 3
    PPrintf("    dec -- convert to decimal (eg. \"(dec abcd)\")\n");
    PPrintf("    hex -- convert to hexadecimal (eg. \"(hex 1234)\")\n");
    PPrintf("    bptr -- convert BPTR to hexadecimal (eg. \"(bptr abcd)\")\n");
@
