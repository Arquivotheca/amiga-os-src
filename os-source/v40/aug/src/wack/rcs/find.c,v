head     39.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.6
date     93.08.23.19.31.59;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     93.08.19.16.35.26;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.05.21.17.32.29;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.05.07.17.06.34;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.04.27.14.40.44;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.03.11.29.48;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.19.26;  author peter;  state Exp;
branches ;
next     ;


desc
@Find and limit commands
@


39.6
log
@Find now discerns between word and long by the number of hex digits typed,
instead of by whether the high word of the target is zero or not.
@
text
@/*
 * Amiga Grand Wack
 *
 * find.c -- Find and limit commands
 *
 * $Id: find.c,v 39.5 93/08/19 16:35:26 peter Exp Locker: peter $
 *
 * 
 */

#include "exec/types.h"
#include "exec/nodes.h"
#include "exec/lists.h"
#include "exec/interrupts.h"
#include "exec/memory.h"
#include "exec/ports.h"
#include "exec/libraries.h"
#include "exec/devices.h"
#include "exec/tasks.h"
#include "exec/resident.h"
#include "exec/execbase.h"

#include "libraries/dos.h"
#include "libraries/dosextens.h"

#include "symbols.h"
#include "special.h"

#include "sys_proto.h"
#include "parse_proto.h"
#include "main_proto.h"
#include "link_proto.h"
#include "ops_proto.h"
#include "io_proto.h"
#include "asm_proto.h"
#include "find_proto.h"

#define NAMESIZE 100

extern CPTR	CurrAddr;

static APTR  LimitAddr = 0;
static ULONG FindPat = 0xF4;	/* jimm's favorite	*/
static ULONG FindPatSize = 2;	/* 2: word, 4: long */

/*
 * User's guide to Sun Wack "Find Operations"
 *
 * The relevant commands are:
 *	find (or '/')
 *	limit
 *	stacklimit
 *
 * Each of these takes an argument.  It can be provided by
 * enclosing the command and argument in parentheses
 *	(find f4)
 * or by default, the current address is used except for 'find'.
 *
 * The relevant variables are
 *	find pattern
 *	find pattern size	(2 or 4 bytes)
 *	limit
 *
 * The current values can be seen by asking for extended help ('!').
 *
 * (find pattern) - sets pattern size to 4 if the pattern is
 *	larger than a word, by magnitute.  If no argument
 *	is supplied, will find last pattern.
 *	Then, it looks for the pattern (word or long) between
 *	the current address and the 'limit.'  (NOTE: for now,
 *	the limit is turned off, and it looks up to 200 hex bytes
 *	away.)
 *
 * (limit address) - sets limit (NOTE: actual limit used is
 *	current address + 0x200.)
 *
 * (stacklimit address) - 'address' should be a task.  Sets
 *	current address to USP, limit to stack Upper.
 *	
 */


#if 0
void
FindHelp( void )
{
    PPrintf("    current find pattern: %lx, limit %lx, patsize %ld bytes\n",
	FindPat, LimitAddr, FindPatSize);
}
#endif

STRPTR
Limit( UBYTE *arg )
{
    APTR  limaddr;

    if (parseAddress(arg, (ULONG *) &limaddr)) 
    {
	LimitAddr = (APTR) ( ((ULONG) limaddr) & ~1 );
	PPrintf("limit set to %lx\n", LimitAddr);
    }
    else
    {
	BadSyntax();
    }

    return( NULL );
}

STRPTR
StackLimit( UBYTE *arg )
{
    struct Task  *task;

    if (parseAddress(arg, (ULONG *)&task)) 
    {
	/* set limit to top of stack */
	LimitAddr = ReadPointer(&task->tc_SPUpper);

	/* set curraddr to stack pointer */
	CurrAddr = ReadLong(&task->tc_SPReg);

	PPrintf(" stack limit: %lx\n", LimitAddr);

	ShowFrame();
    }
    else 
    {
	BadSyntax();
    }

    return( NULL );
}

STRPTR
Find( char *arg )
{
    ULONG findpat;
    APTR limit;
    ULONG initial = FALSE;

    if ( parseHexNum( arg, &findpat, &FindPatSize ) )
    {
	FindPat = findpat;
	if ( FindPatSize < 2 )
	{
	    FindPatSize = 2;
	}
	initial = TRUE;
    }

    limit = LimitAddr;
    if ( LimitAddr == 0 )
    {
	limit = (APTR)( (ULONG)CurrAddr + 0x400 );
    }
    find( (UBYTE *)CurrAddr, limit, FindPat, FindPatSize, initial );

    return( NULL );
}

BOOL
match( ULONG *p, ULONG pat, WORD size )
{
    BOOL retval = FALSE;

    switch(size)
    {
     case 2:
	retval = (*((UWORD *) p) == (pat & 0xFFFF));
	break;
     case 4:
	retval = (*((ULONG *) p) == pat);
	break;
     default:
	PPrintf("match: bad size %ld\n", size);
    }

    return (retval);
}

/* 16-bit aligned words and longs */
void
find(
UBYTE	*start,		/* (non-aligned) starting position	*/
UBYTE	*limit,		/* (non-aligned) limit address		*/
ULONG	pat,		/* pattern sought (short or long value)	*/
WORD	size,		/* number of bytes to match		*/
ULONG   initial )	/* If initial search for this pattern   */
{
    BOOL forward;	/* looking through increasing memory?	*/
    UBYTE	*wp;	/* pointer for word comparisons	*/
    BOOL patfound = FALSE; /* pattern was found		*/
    UBYTE	*curpos;	/* current search address (in amiga space) */
    UBYTE	*bufstart;	/* low end of search range	*/
    UBYTE	*buflast;	/* high end of search range	*/
    ULONG	bufsize;	/* size (bytes) of search ranges*/
    WORD	bump;		/* signed incr			*/

#if 0
PPrintf("Find: start %lx, limit %lx, pat %lx, size %lx\n",
    start, limit, pat, size);
#endif

    /* align start and limit */
    start = (UBYTE *) ( ( (ULONG) start ) & ~1 );
    limit = (UBYTE *) ( ( (ULONG) limit ) & ~1 );

    /* determine which direction to go	*/
    if (start == limit)
    {
	PPrintf("Find: start = limit = %lx\n", start);
	return;
    }
    if (start > limit) 
    {
	forward = FALSE;
	if ( !initial )
	{
	    start -= 2;		/* start looking just after current position */
	}
	bufstart = limit;	/* low address of search region is limit */
	bufsize = (ULONG) start - (ULONG) limit + 2;
	buflast = start;
	PPrintf(" searching backward\n");
    }
    else
    {
	forward = TRUE;
	if ( !initial )
	{
	    start += 2;		/* start looking just after current position */
	}
	bufstart = start;	/* low address of search region is limit */
	bufsize = (ULONG) limit - (ULONG) start + 2;
	buflast = limit;
    }
    bump =  forward? 2: -2;

#if 0
PPrintf("forward %lx, newstart %lx, bufstart %lx, buflast %lx, bufsize %lx\n",
    forward, start, bufstart, buflast, bufsize);
#endif

    /* get buffer of find region	*/
    wp = (UBYTE *)malloc( bufsize );
    if ( wp )
    {
	ReadBlock( bufstart, wp, bufsize );

	/* look for pattern	*/
	for (curpos = start; ((curpos <= buflast) && (curpos >= bufstart));
		curpos += bump)
	{
	    if (match((ULONG *)(wp + (curpos - bufstart)), pat, size)) 
	    {
		patfound = TRUE;
		break;
	    }

	}

	/* if found set current address to position 
	 * found, always refresh
	 */
	if (patfound)
	{
	    CurrAddr = (CPTR) curpos;
	}
	else
	{
	    PPrintf(" can't find %lx between addresses %lx and %lx\n", pat, start, limit);
	    CurrAddr = (CPTR)limit;
	}
	ShowFrame();
	free( wp );
    }
    else
    {
	PPrintf("Couldn't get %ld bytes to store find buffer\n", bufsize);
    }
}
@


39.5
log
@Improved behavior of find command to respect frame size and allow
sensible repeat finding.
@
text
@d6 1
a6 1
 * $Id: find.c,v 39.4 93/05/21 17:32:29 peter Exp Locker: peter $
d44 1
a44 1
static	WORD FindPatSize = 2;	/* 2: word, 4: long */
d142 1
a142 1
    if ( parseHexNum( arg, &findpat ) )
d145 4
a148 1
	FindPatSize = findInc(findpat);
a159 18
}

/* for now, determines whether it looks for words or longs only
 * by size of find value.  sorry.
 */
WORD
findInc( ULONG findpat )
{
    WORD retval;

    /* supe this up some day */
    if (findpat & 0xFFFF0000)	/* has high word values */
    {
	retval = 4;
    }
    else retval = 2;

    return (retval);
@


39.4
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: find.c,v 39.3 93/05/07 17:06:34 peter Exp Locker: peter $
d83 1
d90 1
d139 2
d146 1
d149 6
a154 5
#if 0	/* tired of messing with limit. */
    find(CurrAddr, LimitAddr, FindPat, FindPatSize);
#else
    find( (UBYTE *)CurrAddr, (UBYTE *)(CurrAddr + 0x200), FindPat, FindPatSize);
#endif
d203 2
a204 1
WORD	size )		/* number of bytes to match		*/
d212 1
a212 1
    WORD	bufsize;	/* size (bytes) of search ranges*/
d215 1
a215 1
#ifdef DEBUG
d233 4
a236 1
	start -=  2;		/* start looking just before curr. pos */
d245 4
a248 1
	start +=  2;		/* start looking just after curr. pos */
d255 1
a255 1
#ifdef DEBUG
d261 2
a262 2
    wp = (UBYTE *)  malloc(bufsize);
    if (wp == NULL)
d264 11
a274 3
	PPrintf("Couldn't get %ld bytes to store find buffer\n", bufsize);
    }
    ReadBlock(bufstart, wp, bufsize);
d276 1
a276 4
    /* look for pattern	*/
    for (curpos = start; ((curpos <= buflast) && (curpos >= bufstart));
	    curpos += bump)
    {
d278 8
a285 1
	if (match((ULONG *)(wp + (curpos - bufstart)), pat, size)) 
d287 2
a288 2
	    patfound = TRUE;
	    break;
d290 6
a295 1

a296 8

    /* if found set current address to position 
     * found, always refresh
     */
    if (patfound) CurrAddr = (CPTR) curpos;
    else PPrintf(" can't find\n");
    ShowFrame();
    free( wp );
@


39.3
log
@Switched to new parsing routines.
@
text
@d6 1
a6 1
 * $Id: find.c,v 39.2 93/04/27 14:40:44 peter Exp Locker: peter $
d90 1
a90 1
void
d104 2
d108 1
a108 1
void
d129 2
d133 1
a133 1
void
d149 2
@


39.2
log
@Rework of link architecture/naming.
@
text
@d6 1
a6 1
 * $Id: find.c,v 39.1 92/12/03 11:29:48 peter Exp Locker: peter $
d30 1
a30 1
#include "define_proto.h"
d95 1
a95 1
    if (hexArgAddr(arg, (ULONG *) &limaddr)) 
d111 1
a111 1
    if (hexArgAddr(arg, (ULONG *)&task)) 
d134 1
a134 1
    if ( hexArg( arg, &findpat ) )
@


39.1
log
@AddrArg() renamed to hexArgAddr().
@
text
@d6 1
a6 1
 * $Id: find.c,v 39.0 92/10/30 15:19:26 peter Exp Locker: peter $
d32 1
a32 1
#include "access_proto.h"
d114 1
a114 1
	LimitAddr = (APTR) GetMemL(&task->tc_SPUpper);
d117 1
a117 1
	CurrAddr = (CPTR) GetMemL(&task->tc_SPReg);
d247 1
a247 1
    GetBlock(bufstart, wp, bufsize);
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d95 1
a95 1
    if (AddrArg(arg, (ULONG *) &limaddr)) 
d111 1
a111 1
    if (AddrArg(arg, (ULONG *)&task)) 
d130 1
a130 1
Find( char *argStr )
a132 1
    char *arg;
d134 1
a134 1
    if ( ( arg = nextArg( &argStr ) ) && ( IsHexNum( arg, &findpat ) ) )
@
