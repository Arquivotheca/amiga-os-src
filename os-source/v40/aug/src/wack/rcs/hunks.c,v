head     39.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.4
date     93.07.16.18.24.23;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.05.21.17.32.42;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.05.07.17.04.35;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     93.04.27.14.36.52;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.20.06;  author peter;  state Exp;
branches ;
next     ;


desc
@commandsbbbHunk binding code.
@


39.4
log
@File retired.
@
text
@/*
 * Amiga Grand Wack
 *
 * hunks.c -- Hunk binding code.
 *
 * $Id: hunks.c,v 39.3 93/05/21 17:32:42 peter Exp Locker: peter $
 *
 */

FILE RETIRED
@


39.3
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: hunks.c,v 39.2 93/05/07 17:04:35 peter Exp Locker: peter $
d10 1
a10 79
#include "symbols.h"

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/interrupts.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <exec/libraries.h>
#include <exec/devices.h>
#include <exec/tasks.h>
#include <exec/resident.h>

#include <exec/execbase.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>

#define LTOB(b_ptr) ((APTR)(b_ptr << 2))

extern APTR CurrAddr;

#include "sys_proto.h"
#include "asm_proto.h"
#include "define_proto.h"
#include "link_proto.h"
#include "hunks_proto.h"
#include "io_proto.h"

STRPTR
BindHunks( void )
{
    long    hunk_entry;		/* hunk which is part of linked list */
    int     hunk_num = 0;	/* Count of hunks we have seen       */
    char    basename[40];

    if ((ULONG) CurrAddr & 0x3) {
	PPrintf ("  hunks must be long word aligned\n");
    }
    else {
	for (hunk_entry = ((ULONG) CurrAddr >> 2);
		hunk_entry & hunk_entry + 1;/* ???? */
		hunk_entry = ReadLong(LTOB (hunk_entry))) {
	    PPrintf ("hunk %3ld at %08lx\n", hunk_num, LTOB (hunk_entry + 1));
	    sprintf (basename, "`hunk_%lx", hunk_num++);
	    BindValue( basename, ACT_BASE, (long) LTOB (hunk_entry + 1) );
	}
	FixupTopMap ();
    }

    return( NULL );
}



STRPTR
AttachHunks( void )
{
    struct Process  proc;
    struct CommandLineInterface cli;
    long    hunk_entry;		/* hunk which is part of linked list */
    int     hunk_num = 0;	/* Count of hunks we have seen       */
    char    basename[40];

    ReadBlock(CurrAddr, &proc, sizeof (proc));
    ReadBlock(LTOB (proc.pr_CLI), &cli, sizeof (cli));

 /* Hunks are formed with a link list of pointers one word before the
    start of the actual hunk area (hunk_entry[1]) */
    for (hunk_entry = cli.cli_Module;
	    hunk_entry & hunk_entry + 1; /* ??? */
	    hunk_entry = ReadLong(LTOB (hunk_entry))) {
	PPrintf ("hunk %3ld at %08lx\n", hunk_num, LTOB (hunk_entry+1));
	sprintf (basename, "`hunk_%lx", hunk_num++);
	BindValue( basename, ACT_BASE, (long) LTOB (hunk_entry + 1) );
    }
    FixupTopMap ();

    return( NULL );
}
@


39.2
log
@Renamed BindValue() functions.
@
text
@d6 1
a6 1
 * $Id: hunks.c,v 39.1 93/04/27 14:36:52 peter Exp Locker: peter $
d38 1
a38 1
void
d58 2
d64 1
a64 1
void
d86 2
@


39.1
log
@Rework of link architecture/naming.
@
text
@d6 1
a6 1
 * $Id: hunks.c,v 39.0 92/10/30 15:20:06 peter Exp Locker: peter $
d54 1
a54 1
	    BindValue1 (basename, ACT_BASE, (long) LTOB (hunk_entry + 1));
d81 1
a81 1
	BindValue1 (basename, ACT_BASE, (long) LTOB (hunk_entry + 1));
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d34 1
a34 1
#include "access_proto.h"
d51 1
a51 1
		hunk_entry = (long) GetMemL (LTOB (hunk_entry))) {
d71 2
a72 2
    getBlock (CurrAddr, &proc, sizeof (proc));
    getBlock (LTOB (proc.pr_CLI), &cli, sizeof (cli));
d78 1
a78 1
	    hunk_entry = (long) GetMemL (LTOB (hunk_entry))) {
@
