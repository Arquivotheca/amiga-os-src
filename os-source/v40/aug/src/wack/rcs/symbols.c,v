head     39.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.2
date     93.07.16.18.25.16;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     93.05.07.17.06.41;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.22.35;  author peter;  state Exp;
branches ;
next     ;


desc
@Symbol handling
@


39.2
log
@File retired.
@
text
@/*
 * Amiga Grand Wack
 *
 * symbols.c -- Symbol handling
 *
 * $Id: symbols.c,v 39.1 93/05/07 17:06:41 peter Exp Locker: peter $
 *
 * 
 */

FILE RETIRED
@


39.1
log
@Cleaned up struct Symbol, and BindValue() function names.
@
text
@d6 1
a6 1
 * $Id: symbols.c,v 39.0 92/10/30 15:22:35 peter Exp Locker: peter $
d11 1
a11 42

#include "std.h"
#include "special.h"
#include "symbols.h"

#include "define_proto.h"
#include "symbols_proto.h"

extern struct SymbolMap TopSymMap;

extern short Faster;


void
SetOffset( long hunkNum, char *name, long offset )
{
    struct Symbol *sym;

    if (Faster)
    {
	sym = BindValueQuick( name, ACT_OFFSET, offset );
    }
    else
    {
	sym = BindValue( name, ACT_OFFSET, offset );
    }
    sym->sym_Value2 = hunkNum;
}


long
GetValue( char *name )
{
    struct Symbol *sym;
    long result = 0;

    if ( sym = FindSymbol( name, &TopSymMap ) )
    {
	result = sym->sym_Value1;
    }
    return( result );
}
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d27 1
a27 1
    struct Symbol  *sp;
d30 3
a32 1
	sp = BindValue2 (name, ACT_OFFSET, offset);
d34 4
a37 2
	sp = BindValue1 (name, ACT_OFFSET, offset);
    sp -> value2 = hunkNum;
d44 2
a45 1
    struct Symbol  *sp;
d47 3
a49 3
    sp = FindSymbol (name, &TopSymMap);
    if (sp == 0) {
	return (0);
d51 1
a51 1
    return (sp -> value1);
@
