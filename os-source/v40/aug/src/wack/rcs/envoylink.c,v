head     39.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.8
date     93.11.05.15.02.22;  author jesup;  state Exp;
branches ;
next     39.7;

39.7
date     93.05.07.17.07.32;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     93.05.03.14.38.13;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     93.04.27.14.38.23;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.03.18.16.26.57;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.03.10.13.05.16;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.01.08.17.47.11;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.11.02.17.08.04;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.19.16;  author peter;  state Exp;
branches ;
next     ;


desc
@Envoy-based remote system accessor
@


39.8
log
@added stub for envoy Call function
@
text
@/*
 * Amiga Grand Wack
 *
 * envoylink.c -- Routines to handle target connected via Envoy.
 *
 * $Id: envoylink.c,v 39.7 93/05/07 17:07:32 peter Exp Locker: jesup $
 *
 * Routines to perform remote communication via Envoy networking.
 * These routines are called by the generic versions in link.c.
 *
 */

#include <exec/memory.h>
#include <exec/semaphores.h>
#include <utility/tagitem.h>
#include <envoy/nipc.h>
#include <envoy/errors.h>

#include <clib/alib_protos.h>
#include <clib/exec_protos.h>
#include <clib/nipc_protos.h>
#include <pragmas/exec_pragmas.h>
#include <pragmas/nipc_pragmas.h>

#include "link.h"
#include "envoylink.h"
#include "validmem.h"
#include "asm_proto.h"
#include "link_proto.h"
#include "envoylink_proto.h"
#include "io_proto.h"

#include "linklib_protos.h"
#include "linklib_pragmas.h"
extern struct LinkLibBase *LinkLibBase;

extern struct Library *SysBase;

extern long remote_error;
extern struct Task *WackTask;

/*ZZZ move to main loop */LONG __asm Envoy_Reconnect( void );
void __asm Envoy_ReleaseValidMem( register __a0 struct MinList *validlist );

static char envoy_connection[100];
static STRPTR remote_machine;
static struct Library *NIPCBase = NULL;
static struct Entity *entity = NULL;
static struct Entity *remoteentity = NULL;
static struct Transaction *trans = NULL;
static struct MsgPort *transactionport = NULL;
static struct SignalSemaphore transaction_sem;
static struct RemoteWackCommand rwc;

static struct TagItem cetags[] =
{
    ENT_AllocSignal, 0,
    TAG_END, 0
};

struct EnvoyValidMem
{
    struct MinList eml_List;
    struct MemoryBlock *eml_Array;
};


ULONG
doEnvoyTransaction( ULONG action, APTR address, ULONG data, void *response,
    ULONG responselength )
{
    ULONG alien = 0;
    struct MsgPort *port;

    if ( !remote_error )
    {
	Envoy_Reconnect();	/* ZZZ Move to main loop */
	if ( remoteentity )
	{
	    ObtainSemaphore( &transaction_sem );
	    if ( FindTask( NULL ) == WackTask )
	    {
		/* This is Wack itself running, so use its transaction MsgPort */
		port = transactionport;
	    }
	    else
	    {
		/* Someone's called me through the fake library feature,
		 * and they're not my task.  Therefore, I have to allocate
		 * my own MsgPort and use that for replying to.
		 */
		alien = 1;
		if ( !( port = CreateMsgPort() ) )
		{
		    remote_error = MYENVOYERR_ALLOCFAIL;
		}
	    }
	    if ( !remote_error )
	    {
		rwc.rwc_Action = action;
		rwc.rwc_Address = address;
		rwc.rwc_Data = data;
		trans->trans_ResponseData = response;
		trans->trans_RespDataLength = responselength;
		trans->trans_Timeout = 3;
	
		trans->trans_Msg.mn_ReplyPort = port;
		BeginTransaction( remoteentity, entity, trans );
		WaitPort( port );
		GetMsg( port );

		if ( trans->trans_Error )
		{
		    PPrintf("Connection to machine %s broken\n", remote_machine );
		    remote_error = trans->trans_Error;
		    LoseEntity( remoteentity );
		    remoteentity = 0;
		    Envoy_ReleaseValidMem( LinkLibBase->ll_ValidMem );
		    LinkLibBase->ll_ValidMem = 0;
		}
	    }
	    if ( alien )
	    {
		if ( port )
		{
		    DeleteMsgPort( port );
		}
	    }
	    ReleaseSemaphore( &transaction_sem );
	}
	else
	{
	    remote_error = MYENVOYERR_LOSTCONTACT;
	}
    }
    return( trans->trans_RespDataActual );
}


struct MinList * __asm
Envoy_ObtainValidMem( void )
{
    ULONG count;
    struct MemoryBlock *marray;
    struct EnvoyValidMem *validlist = NULL;

    doEnvoyTransaction( RWCA_GETVALIDMEMCOUNT, 0, 0, &count, 4 );

    if ( !remote_error )
    {
	marray = AllocVec( count * sizeof( struct MemoryBlock ), MEMF_CLEAR );
	doEnvoyTransaction( RWCA_GETVALIDMEM, 0, 0, marray,
	    count * sizeof( struct MemoryBlock ) );

	if ( !remote_error )
	{
	    if ( validlist = AllocMem( sizeof( struct EnvoyValidMem ), MEMF_ANY ) )
	    {
		NewList( (struct List *)validlist );
		validlist->eml_Array = marray;

		while ( count-- )	
		{
		    AddTail( (struct List *)validlist, (struct Node *)&marray[ count ] );
		}
	    }
	}
    }
    if ( !validlist )
    {
	FreeVec( marray );
    }
    return( (struct MinList *)validlist );
}


void __asm
Envoy_ReleaseValidMem( register __a0 struct MinList *validlist )
{
    if ( validlist )
    {
	FreeVec( ((struct EnvoyValidMem *)validlist)->eml_Array );
	FreeMem( validlist, sizeof( struct EnvoyValidMem ) );
    }
}


STRPTR __asm
Envoy_Connect( register __a0 STRPTR machine )
{
    STRPTR errorstr = "Failed to open nipc.library";

    remote_machine = machine;
    sprintf( envoy_connection, "Envoy %s", remote_machine);
    InitSemaphore( &transaction_sem );

    if (NIPCBase = OpenLibrary("nipc.library", 0L))
    {
	errorstr = "Envoy allocation failure";
	if ( entity = CreateEntityA( (struct TagItem *) &cetags ) )
	{
	    if ( trans = AllocTransactionA( NULL ) )
	    {
		trans->trans_RequestData = &rwc;
		trans->trans_ReqDataLength = 
		    trans->trans_ReqDataActual = sizeof( struct RemoteWackCommand );

		if ( transactionport = CreateMsgPort() )
		{
		    errorstr = "Remote Wack server not found";
		    if ( remoteentity = FindEntity( remote_machine, "RemoteWack", entity, NULL))
		    {
			errorstr = "Failed to build remote valid memory list";
			if ( LinkLibBase->ll_ValidMem = Envoy_ObtainValidMem() )
			{
			    errorstr = NULL;
			}
		    }
		}
	    }
	}
    }
    return( errorstr );
}


void __asm
Envoy_Disconnect( void )
{
    Envoy_ReleaseValidMem( LinkLibBase->ll_ValidMem );

    if ( remoteentity )
    {
	LoseEntity( remoteentity );
    }
    if ( trans )
    {
	FreeTransaction( trans );
    }
    if ( entity )
    {
	DeleteEntity( entity );
    }
    if ( transactionport )
    {
	DeleteMsgPort( transactionport );
    }
    if ( NIPCBase )
    {
	CloseLibrary( NIPCBase );
    }
}

/* Result is:
 * 0 = was not disconnected in the first place
 * 1 = was disconnected, successfully reconnected
 * -1 = was disconnected, failed to reconnect.
 */
LONG __asm
Envoy_Reconnect( void )
{
    LONG result = 0;	/* Assume no need to reconnect */

    if ( !remoteentity )
    {
	result = -1;	/* Assume failed to reconnect */
	/* attempt to reconnect */
	if ( remoteentity = FindEntity( remote_machine, "RemoteWack", entity, NULL ) )
	{
	    if ( LinkLibBase->ll_ValidMem = Envoy_ObtainValidMem() )
	    {
		result = 1;
	    }
	    else
	    {
		LoseEntity( remoteentity );
		remoteentity = 0;
	    }
	}
    }
    return( result );
}


ULONG __asm
Envoy_Resume( void )
{
    return( 0 );	/* Not supported */
}


ULONG __asm
Envoy_Lock( void )
{
    return( 0 );	/* Not supported */
}


ULONG __asm
Envoy_Unlock( void )
{
    return( 0 );	/* Not supported */
}


BYTE __asm
Envoy_ReadByte( register __a0 APTR addr )
{
    LONG response = 0;

    doEnvoyTransaction( RWCA_READBYTE, addr, 0, &response, 4 );
    return( (BYTE) response );
}


WORD __asm
Envoy_ReadWord( register __a0 APTR addr )
{
    LONG response = 0;

    doEnvoyTransaction( RWCA_READWORD, addr, 0, &response, 4 );
    return( (WORD) response );
}


LONG __asm
Envoy_ReadLong( register __a0 APTR addr )
{
    LONG response = 0;

    doEnvoyTransaction( RWCA_READLONG, addr, 0, &response, 4 );
    return( (LONG) response );
}


void __asm
Envoy_ReadBlock( register __a0 APTR addr, register __a1 APTR buffer,
    register __d0 ULONG size )
{
    doEnvoyTransaction( RWCA_READBLOCK, addr, size, buffer, size );
}


ULONG __asm
Envoy_ReadString( register __a0 APTR addr, register __a1 STRPTR buffer,
    register __d0 ULONG maxlen )
{
    return( doEnvoyTransaction( RWCA_READSTRING, addr, maxlen, buffer, maxlen ) );
}


void __asm
Envoy_WriteByte( register __a0 APTR addr, register __d0 BYTE data )
{
    doEnvoyTransaction( RWCA_WRITEBYTE, addr, data, NULL, 0 );
}


void __asm
Envoy_WriteWord( register __a0 APTR addr, register __d0 WORD data )
{
    doEnvoyTransaction( RWCA_WRITEWORD, addr, data, NULL, 0 );
}


void __asm
Envoy_WriteLong( register __a0 APTR addr, register __d0 LONG data )
{
    doEnvoyTransaction( RWCA_WRITELONG, addr, data, NULL, 0 );
}


ULONG __asm
Envoy_Context( void )
{
    return( 0 );	/* Not supported */
}

ULONG __asm
Envoy_ShowContext( void )
{
    return( 0 );	/* Not supported */
}


STRPTR __asm
Envoy_Connection( void )
{
    return( envoy_connection );
}


/* Perform a protected (i.e. Disable()d) read of an Exec list, filling
 * the supplied array with pointers to the Nodes.
 * The array runs from 0..maxcount inclusive.
 * Return values:
 *	 0 = everything is OK
 *	<0 = an error occurred
 *	>0 = the array is not big enough, feel free to try again.
 */
LONG __asm
Envoy_ReadNodeArray( register __a0 struct List *addr,
    register __a1 struct Node **array, register __d0 ULONG maxcount )
{
    LONG result = 0;

    doEnvoyTransaction( RWCA_READNODEARRAY, addr, maxcount, array, (maxcount+1)*sizeof(long) );
    if ( remote_error )
    {
	result = -1;
    }
    else if ( array[ 0 ] == RWCA_RNA_TOOSMALL )
    {
	array[ 0 ] = 0;
	result = 1;
    }
    return( result );
}


/* We are called with an error number (possibly zero).  If we recognize
 * the error as ours, return an error string, else return NULL.
 */

STRPTR __asm
Envoy_Error( register __d0 ULONG error )
{
    STRPTR errorstr = NULL;

    /* Envoy errors run from 1-1000. 1001-1010 are for my own custom
     * networking errors.
     */
    if ( ( error >= 1 ) && ( error < 1010 ) )
    {
	switch ( error )
	{
	case ENVOYERR_CANTDELIVER:
	    errorstr = "Envoy Error: can't deliver transaction";
	    break;

	case ENVOYERR_TIMEOUT:
	    errorstr = "Envoy Error: transaction timed out";
	    break;

	case MYENVOYERR_ALLOCFAIL:
	    errorstr = "Envoy Error: allocation failure";
	    break;

	case MYENVOYERR_LOSTCONTACT:
	    errorstr = "Envoy Error: connection broken";
	    break;

	default:
	    errorstr = "Envoy Error: unknown error %ld";
	    break;
	}
    }
    return( errorstr );
}


ULONG __asm
Envoy_Symbol( register __a0 APTR addr )
{
    return( 0 );	/* Not supported */
}


void
Envoy_InitLib( APTR lfl )
{
    long entry = LINK_SKIPENTRIES;

    initLinkLVO( lfl, entry++, Envoy_Connect );
    initLinkLVO( lfl, entry++, Envoy_Disconnect );
    initLinkLVO( lfl, entry++, Envoy_Reconnect );
    initLinkLVO( lfl, entry++, Envoy_Resume );

    initLinkLVO( lfl, entry++, Envoy_Lock );
    initLinkLVO( lfl, entry++, Envoy_Unlock );

    initLinkLVO( lfl, entry++, Envoy_ReadByte );
    initLinkLVO( lfl, entry++, Envoy_ReadWord );
    initLinkLVO( lfl, entry++, Envoy_ReadLong );
    initLinkLVO( lfl, entry++, Envoy_ReadBlock );
    initLinkLVO( lfl, entry++, Envoy_ReadString );

    initLinkLVO( lfl, entry++, Envoy_WriteByte );
    initLinkLVO( lfl, entry++, Envoy_WriteWord );
    initLinkLVO( lfl, entry++, Envoy_WriteLong );
    initLinkLVO( lfl, entry++, lib_stubReturn/*Envoy_WriteBlock*/ );
    initLinkLVO( lfl, entry++, lib_stubReturn/*Envoy_WriteString*/ );

    initLinkLVO( lfl, entry++, Envoy_Context );
    initLinkLVO( lfl, entry++, Envoy_ShowContext );
    initLinkLVO( lfl, entry++, Envoy_Connection );
    initLinkLVO( lfl, entry++, Envoy_Error );
    initLinkLVO( lfl, entry++, Envoy_Symbol );
    initLinkLVO( lfl, entry++, Envoy_ReadNodeArray );
    initLinkLVO( lfl, entry++, lib_stubReturn/*Envoy_Call*/ );
}
@


39.7
log
@Support for ReadNodeArray().
@
text
@d6 1
a6 1
 * $Id: envoylink.c,v 39.6 93/05/03 14:38:13 peter Exp Locker: peter $
d500 1
@


39.6
log
@Minor renaming.
@
text
@d6 1
a6 1
 * $Id: envoylink.c,v 39.5 93/04/27 14:38:23 peter Exp Locker: peter $
d393 28
d499 1
@


39.5
log
@Major rework of link architecture/naming.
@
text
@d6 1
a6 1
 * $Id: envoylink.c,v 39.4 93/03/18 16:26:57 peter Exp Locker: peter $
d118 2
a119 2
		    Envoy_ReleaseValidMem( LinkLibBase->tl_ValidMem );
		    LinkLibBase->tl_ValidMem = 0;
d214 1
a214 1
			if ( LinkLibBase->tl_ValidMem = Envoy_ObtainValidMem() )
d230 1
a230 1
    Envoy_ReleaseValidMem( LinkLibBase->tl_ValidMem );
d270 1
a270 1
	    if ( LinkLibBase->tl_ValidMem = Envoy_ObtainValidMem() )
@


39.4
log
@Deleted Envoy_goTarget().
@
text
@d4 1
a4 1
 * envoyaccess.c -- Envoy-based remote system accessor
d6 1
a6 1
 * $Id: envoyaccess.c,v 39.3 93/03/10 13:05:16 peter Exp Locker: peter $
d8 2
a9 2
 * Routines to perform remote access via Envoy networking.  These routines
 * are called by the generic versions in access.c.
d25 2
a26 1
#include "envoyaccess.h"
d28 3
a30 2
#include "access_proto.h"
#include "envoyaccess_proto.h"
d33 4
a37 7
struct Library *NIPCBase = NULL;
struct Entity *entity = NULL;
struct Entity *remoteentity = NULL;
struct Transaction *trans = NULL;
struct MsgPort *transactionport = NULL;

extern struct MinList *validmem;
a40 1
struct SignalSemaphore transaction_sem;
d42 2
a43 1
STRPTR remote_machine = NULL;
d45 9
a53 1
struct RemoteWackCommand rwc;
d55 1
a55 1
struct TagItem cetags[] =
d61 1
a61 2
LONG
Envoy_Init( STRPTR machine )
d63 3
a65 27
    LONG success = 0;

    remote_machine = machine;
    InitSemaphore( &transaction_sem );

    if (NIPCBase = OpenLibrary("nipc.library", 0L))
    {
	if ( entity = CreateEntityA( (struct TagItem *) &cetags ) )
	{
	    if ( trans = AllocTransactionA( NULL ) )
	    {
		trans->trans_RequestData = &rwc;
		trans->trans_ReqDataLength = 
		    trans->trans_ReqDataActual = sizeof( struct RemoteWackCommand );

		if ( transactionport = CreateMsgPort() )
		{
		    if ( remoteentity = FindEntity( remote_machine, "RemoteWack", entity, NULL))
		    {
			success = 1;
		    }
		}
	    }
	}
    }
    return( success );
}
a66 24
void
Envoy_Exit( void )
{
    if ( remoteentity )
    {
	LoseEntity( remoteentity );
    }
    if ( trans )
    {
	FreeTransaction( trans );
    }
    if ( entity )
    {
	DeleteEntity( entity );
    }
    if ( transactionport )
    {
	DeleteMsgPort( transactionport );
    }
    if ( NIPCBase )
    {
	CloseLibrary( NIPCBase );
    }
}
d68 2
a69 2
unsigned long
doEnvoyTransaction( ULONG action, void *address, ULONG data, void *response,
d77 1
a77 13
	if ( !remoteentity )
	{
	    /* attempt to reconnect */
	    if ( remoteentity = FindEntity( remote_machine, "RemoteWack", entity, NULL ) )
	    {
		validmem = obtainValidMemList();
		if ( !validmem )
		{
		    LoseEntity( remoteentity );
		    remoteentity = 0;
		}
	    }
	}
d118 2
a119 2
		    releaseValidMemList( validmem );
		    validmem = 0;
d139 155
a293 2
void
Envoy_Forbid( void )
d295 1
d298 3
a300 2
void
Envoy_Permit( void )
d302 1
d305 3
a307 2
char
Envoy_GetMemB( void *addr )
d309 1
a309 1
    ULONG response = 0;
d312 1
a312 1
    return( (char) response );
d315 3
a317 2
short
Envoy_GetMemW( void *addr )
d319 1
a319 1
    ULONG response = 0;
d322 1
a322 1
    return( (short) response );
d325 3
a327 2
long
Envoy_GetMemL( void *addr )
d329 1
a329 1
    ULONG response = 0;
d332 1
a332 1
    return( (long) response );
d335 4
a338 2
unsigned long
Envoy_GetStringBlock( void *addr, char *buffer, long maxlen )
d340 1
a340 1
    return( doEnvoyTransaction( RWCA_READSTRING, addr, maxlen, buffer, maxlen ) );
d343 4
a346 2
void
Envoy_GetBlock( void *addr, void *buffer, long size )
d348 1
a348 1
    doEnvoyTransaction( RWCA_READBLOCK, addr, size, buffer, size );
d351 3
a353 2
char
Envoy_PutMemB( void *addr, char data )
a355 1
    return( data );
d358 3
a360 2
short
Envoy_PutMemW( void *addr, short data )
a362 1
    return( data );
d365 3
a367 2
long
Envoy_PutMemL( void *addr, long data )
a369 1
    return( data );
a371 5
struct EnvoyMemList
{
    struct MinList eml_List;
    struct MemoryBlock *eml_Array;
};
d373 2
a374 2
struct MinList *
Envoy_obtainValidMemList( void )
d376 1
a376 31
    ULONG count;
    struct MemoryBlock *marray;
    struct EnvoyMemList *validlist = NULL;

    doEnvoyTransaction( RWCA_GETVALIDMEMCOUNT, 0, 0, &count, 4 );

    if ( !remote_error )
    {
	marray = AllocVec( count * sizeof( struct MemoryBlock ), MEMF_CLEAR );
	doEnvoyTransaction( RWCA_GETVALIDMEM, 0, 0, marray,
	    count * sizeof( struct MemoryBlock ) );

	if ( !remote_error )
	{
	    if ( validlist = AllocMem( sizeof( struct EnvoyMemList ), MEMF_ANY ) )
	    {
		NewList( (struct List *)validlist );
		validlist->eml_Array = marray;

		while ( count-- )	
		{
		    AddTail( (struct List *)validlist, (struct Node *)&marray[ count ] );
		}
	    }
	}
    }
    if ( !validlist )
    {
	FreeVec( marray );
    }
    return( (struct MinList *)validlist );
d378 10
a387 3

void
Envoy_releaseValidMemList( struct MinList *validlist )
d389 1
a389 5
    if ( validlist )
    {
	FreeVec( ((struct EnvoyMemList *)validlist)->eml_Array );
	FreeMem( validlist, sizeof( struct EnvoyMemList ) );
    }
d392 1
d394 1
a394 2
 * the error as ours, print a description and return zero, else return
 * the (unknown) error number.
d397 2
a398 2
long
Envoy_ShowError( long error )
d400 2
d410 1
a410 1
	    PPrintf( "Envoy Error: can't deliver transaction\n" );
d414 1
a414 1
	    PPrintf( "Envoy Error: transaction timed out\n" );
d418 1
a418 1
	    PPrintf("Envoy Error: allocation failure\n" );
d422 1
a422 1
	    PPrintf("Envoy Error: connection broken\n" );
d426 1
a426 1
	    PPrintf( "Envoy Error: other (%ld)\n", error );
a428 1
	error = 0;
d430 41
a470 1
    return( error );
@


39.3
log
@Minor change to externalize WackTask.  Added Envoy_goTarget().
@
text
@d6 1
a6 1
 * $Id: envoyaccess.c,v 39.2 93/01/08 17:47:11 peter Exp Locker: peter $
a352 5
}

void
Envoy_goTarget( void )
{
@


39.2
log
@Now handles breaking connections and automatically re-establishing them.
@
text
@d6 1
a6 1
 * $Id: envoyaccess.c,v 39.1 92/11/02 17:08:04 peter Exp Locker: peter $
d41 1
a41 1
struct Task *WackTask;
a59 1
    WackTask = FindTask( NULL );
d353 5
@


39.1
log
@Minor cleanup.  Removed bug in Envoy_GetBlock().  Now handles
transacting when called on another task (i.e.  through fake library
stuff).  Implemented Envoy_GetStringBlock().
@
text
@d6 1
a6 1
 * $Id: envoyaccess.c,v 39.0 92/10/30 15:19:16 peter Exp Locker: peter $
d27 1
d38 2
d44 2
d59 1
d73 1
a73 1
		if ( remoteentity = FindEntity( machine, "RemoteWack", entity, NULL))
d75 1
a75 1
		    if ( transactionport = CreateMsgPort() )
d120 1
a120 2
	ObtainSemaphore( &transaction_sem );
	if ( FindTask( NULL ) == WackTask )
d122 10
a131 2
	    /* This is Wack itself running, so use its transaction MsgPort */
	    port = transactionport;
d133 1
a133 1
	else
d135 2
a136 6
	    /* Someone's called me through the fake library feature,
	     * and they're not my task.  Therefore, I have to allocate
	     * my own MsgPort and use that for replying to.
	     */
	    alien = 1;
	    if ( !( port = CreateMsgPort() ) )
d138 2
a139 1
		remote_error = MYENVOYERR_ALLOCFAIL;
d141 25
a165 14
	}
	if ( !remote_error )
	{
	    rwc.rwc_Action = action;
	    rwc.rwc_Address = address;
	    rwc.rwc_Data = data;
	    trans->trans_ResponseData = response;
	    trans->trans_RespDataLength = responselength;
	    trans->trans_Timeout = 3;

	    trans->trans_Msg.mn_ReplyPort = port;
	    BeginTransaction( remoteentity, entity, trans );
	    WaitPort( port );
	    GetMsg( port );
d167 11
a177 1
	    if ( trans->trans_Error )
d179 4
a182 1
		remote_error = trans->trans_Error;
d184 1
d186 1
a186 1
	if ( alien )
d188 1
a188 4
	    if ( port )
	    {
		DeleteMsgPort( port );
	    }
a189 1
	ReleaseSemaphore( &transaction_sem );
d341 4
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d14 1
d32 2
a33 2
void *entity = NULL;
void *dest = NULL;
d35 1
d37 4
a41 3
ULONG sigbit;

UBYTE cename[]="Wack Client";
a44 2
    ENT_Name, &cename,
    ENT_Public,	    0,
a48 5
struct TagItem ttags[] =
{
    TAG_END, 0
};

d53 3
a55 1
    cetags[2].ti_Data = (ULONG) &sigbit;
d59 1
a59 1
	if (entity = CreateEntityA((struct TagItem *) & cetags))
d61 1
a61 1
	    if (trans = AllocTransactionA((struct TagItem *) & ttags))
d67 1
a67 1
		if (dest = FindEntity( machine, "RemoteWack", entity, NULL))
d69 4
a72 1
		    success = 1;
a76 4
    if ( !success )
    {
	Envoy_Exit();
    }
d83 1
a83 1
    if ( dest )
d85 1
a85 2
	LoseEntity( dest );
	dest = NULL;
a89 1
	trans = NULL;
d94 4
a97 1
	entity = NULL;
a101 1
	NIPCBase = NULL;
d105 1
a105 3
extern long remote_error;

void
d109 3
d114 43
a156 12
	rwc.rwc_Action = action;
	rwc.rwc_Address = address;
	rwc.rwc_Data = data;
	trans->trans_ResponseData = response;
	trans->trans_RespDataLength = responselength;
	trans->trans_Timeout = 3;

	DoTransaction( dest, entity, trans );

	if ( trans->trans_Error )
	{
	    remote_error = trans->trans_Error;
d158 1
d160 1
d200 12
a232 7
void
Envoy_GetBlock( void *addr, void *buffer, long size )
{
    doEnvoyTransaction( RWCA_READBLOCK, addr, size, buffer, size );
    DoTransaction( dest, entity, trans );
}

d293 4
a296 2
    /* Envoy errors run from 1-1000 */
    if ( ( error >= 1 ) && ( error < ENVOYERR_APP ) )
d306 4
@
