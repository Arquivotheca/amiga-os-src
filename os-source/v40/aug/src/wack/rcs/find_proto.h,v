head     39.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.3
date     93.08.23.19.32.17;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.08.19.16.35.34;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     93.05.21.17.32.37;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.24.01;  author peter;  state Exp;
branches ;
next     ;


desc
@Prototypes.
@


39.3
log
@Find now discerns between word and long by the number of hex digits typed,
instead of by whether the high word of the target is zero or not.
@
text
@/*
 * Amiga Grand Wack
 *
 * $Id: find_proto.h,v 39.2 93/08/19 16:35:34 peter Exp Locker: peter $
 *
 */

void FindHelp( void );

STRPTR Limit( UBYTE *arg );

STRPTR StackLimit( UBYTE *arg );

STRPTR Find( char *arg );

BOOL match( ULONG *p, ULONG pat, WORD size );

void find( UBYTE *start, UBYTE *limit, ULONG pat, WORD size, ULONG initial );
@


39.2
log
@Improved behavior of find command.
@
text
@d4 1
a4 1
 * $Id: find_proto.h,v 39.1 93/05/21 17:32:37 peter Exp Locker: peter $
a14 2

WORD findInc( ULONG findpat );
@


39.1
log
@Command functions now return NULL string.
@
text
@d4 1
a4 1
 * $Id: find_proto.h,v 39.0 92/10/30 15:24:01 peter Exp Locker: peter $
d20 1
a20 1
void find( UBYTE *start, UBYTE *limit, ULONG pat, WORD size );
@


39.0
log
@Initial RCS check-in.
@
text
@d4 1
a4 1
 * $Id: $
d10 1
a10 1
void Limit( UBYTE *arg );
d12 1
a12 1
void StackLimit( UBYTE *arg );
d14 1
a14 1
void Find( char *arg );
@
