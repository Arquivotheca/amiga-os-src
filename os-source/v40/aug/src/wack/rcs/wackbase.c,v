head     39.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.11
date     93.11.05.14.57.27;  author jesup;  state Exp;
branches ;
next     39.10;

39.10
date     93.10.08.16.45.38;  author jesup;  state Exp;
branches ;
next     39.9;

39.9
date     93.08.24.16.45.30;  author peter;  state Exp;
branches ;
next     39.8;

39.8
date     93.05.21.17.36.12;  author peter;  state Exp;
branches ;
next     39.7;

39.7
date     93.05.07.17.04.09;  author peter;  state Exp;
branches ;
next     39.6;

39.6
date     93.05.03.14.39.55;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     93.04.27.14.36.21;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.03.18.16.28.23;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.11.06.17.49.00;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.11.02.17.09.25;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.11.02.12.42.13;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.22.58;  author peter;  state Exp;
branches ;
next     ;


desc
@Wack "fake" library handling.
@


39.11
log
@added Call function
@
text
@/*
 * Amiga Grand Wack
 *
 * wackbase.c -- Wack "fake" library handling.
 *
 * $Id: wackbase.c,v 39.10 93/10/08 16:45:38 jesup Exp Locker: jesup $
 *
 * Wack's ARexx port resembles an Exec Library in that it has LVO's
 * located at negative offsets from it.  Those LVO's are usable by
 * external Wack-extension programs (bound with bindxwack).  Such
 * programs receive the name of the Wack ARexx port as their first
 * argument.  They need to FindPort() that port and place the address
 * in WackBase.  They then can use the pragma functions in wack_pragmas.h
 * to call the Wack host's functions.
 *
 */

#include <exec/types.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <dos/dostags.h>
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>

#include "wackbase.h"

#include "linklib_protos.h"
#include "linklib_pragmas.h"
extern APTR LinkLibBase;

extern struct Library *SysBase;
extern struct Library *DOSBase;
extern BPTR inputfh;
extern BPTR outputfh;

extern APTR CurrAddr;
extern APTR SpareAddr;

#include "symbols.h"
#include "simplerexx.h"
#include "parse.h"

#include "parse_proto.h"
#include "sys_proto.h"
#include "asm_proto.h"
#include "wackbase_proto.h"
#include "define_proto.h"
#include "show_proto.h"
#include "io_proto.h"
#include "link_proto.h"
#include "special_proto.h"
#include "ops_proto.h"

extern struct ARexxContext *RexxContext;
extern struct WackLibBase *WackBase;

LONG
SystemTags( STRPTR command, ULONG tag, ... )
{
    return( SystemTagList( command, (struct TagItem *) &tag ) );
}

#define CMDBUFFERSIZE 512
char cmdbuffer[ CMDBUFFERSIZE ];

STRPTR
runCommand( char *arg1, char *arg2 )
{
    LONG error;

    strcpy( cmdbuffer, arg1 );
    if ( ( arg2 ) && ( *arg2 ) )
    {
	strcat( cmdbuffer, " " );
	strcat( cmdbuffer, arg2 );
    }
    error = SystemTags( cmdbuffer,
	SYS_Input, inputfh,
	SYS_Output, outputfh,
	SYS_UserShell, TRUE,
	TAG_DONE );

    if ( error )
    {
	PPrintf("Command returned %ld\n", error );
    }

    return( NULL );
}


/* Runs the specified command, with the ARexx port name as the
 * first argument.  For example, if the command was:
 * "wacksystem intuition window arg", the line passed to
 * System() will be "intuition wack.N window arg"
 */
STRPTR
runWackCommand( char *arg1, char *arg2 )
{
    LONG error;
    char *remainder;

    if ( remainder = parseToken( arg1, cmdbuffer ) )
    {
	strcat( cmdbuffer, " WACKPORT=" );
	strcat( cmdbuffer, WackPortName() );

	if ( remainder = parseRemainder( remainder ) )
	{
	    strcat( cmdbuffer, " ");
	    strcat( cmdbuffer, remainder );
	}
	if ( remainder = parseRemainder( arg2 ) )
	{
	    strcat( cmdbuffer, " ");
	    strcat( cmdbuffer, remainder );
	}
	error = SystemTags( cmdbuffer,
	    SYS_Input, inputfh,
	    SYS_Output, outputfh,
	    SYS_UserShell, TRUE,
	    TAG_DONE );

	if ( error )
	{
	    PPrintf("Command returned %ld\n", error );
	}
    }
    else
    {
	PPrintf("Invalid command\n");
    }

    return( NULL );
}


struct WackLibBase *
InitWackBase( void )
{
    struct WackLibBase *wackbase = NULL;
    struct WackFakeLibrary *wfl;
    ULONG sig;
    char appname[] = "wack";
    ULONG loop;
    ULONG count;
    char *tmp;
    struct MsgPort *foundport;

    sig = AllocSignal(-1);
    if ( sig >= 0 )
    {
	if ( wfl = AllocMem( sizeof( struct WackFakeLibrary ), MEMF_CLEAR ) )
	{
	    long entry = 0;

	    wackbase = &wfl->wfl_LibBase;
	    /*
	     * Set up a port name...
	     */
	    tmp = wackbase->wl_PortNameBuffer;
	    for ( loop = 0; ( loop < 16 ) && ( appname[ loop ] ); loop++ )
	    {
		    *tmp++ = appname[ loop ];
	    }
	    *tmp++ = '.';

	    wackbase->wl_MsgPort.mp_Node.ln_Name = wackbase->wl_PortNameBuffer;
	    wackbase->wl_MsgPort.mp_Node.ln_Type = NT_MSGPORT;
	    wackbase->wl_MsgPort.mp_Flags        = PA_SIGNAL;
	    wackbase->wl_MsgPort.mp_SigBit       = sig;
	    wackbase->wl_MsgPort.mp_SigTask      = FindTask(NULL);

	    /* We need to make a unique port name... */
	    Forbid();
	    count = 1;
	    do
	    {
		sprintf(tmp,"%ld",count);
		foundport = FindPort( wackbase->wl_PortNameBuffer );
		count++;
	    }
	    while ( foundport );

	    AddPort( &wackbase->wl_MsgPort );
	    Permit();

	    initFunction( wfl, entry++, wacklib_stubReturn );	/* Open */
	    initFunction( wfl, entry++, wacklib_stubReturn );	/* Close */
	    initFunction( wfl, entry++, wacklib_stubReturn );	/* Expunge */
	    initFunction( wfl, entry++, wacklib_stubReturn );	/* Reserved */
	    initFunction( wfl, entry++, wacklib_stubReturn );	/* ARexx */
	    initFunction( wfl, entry++, lib_VPrintf );
	    initFunction( wfl, entry++, lib_ReadCurrAddr );
	    initFunction( wfl, entry++, lib_WriteCurrAddr );
	    initFunction( wfl, entry++, lib_ReadSpareAddr );
	    initFunction( wfl, entry++, lib_WriteSpareAddr );
	    initFunction( wfl, entry++, lib_ReadByte );
	    initFunction( wfl, entry++, lib_ReadWord );
	    initFunction( wfl, entry++, lib_ReadLong );
	    initFunction( wfl, entry++, lib_ReadBlock );
	    initFunction( wfl, entry++, lib_WriteByte );
	    initFunction( wfl, entry++, lib_WriteWord );
	    initFunction( wfl, entry++, lib_WriteLong );
	    initFunction( wfl, entry++, lib_FindLibrary );
	    initFunction( wfl, entry++, lib_ReadString );
	    initFunction( wfl, entry++, lib_ReadBSTR );
	    initFunction( wfl, entry++, lib_ReadContextAddr );
	    initFunction( wfl, entry++, lib_WriteBlock );
	    initFunction( wfl, entry++, lib_Call );
	    CacheClearU();
	}
	else
	{
	    FreeSignal( sig );
	}
    }
    return( wackbase );
}

void
FreeWackBase( struct WackLibBase *wackbase )
{
    struct WackFakeLibrary *wfl;

    if ( wackbase )
    {
	FreeSignal( wackbase->wl_MsgPort.mp_SigBit );
	wfl = (struct WackFakeLibrary *)
	    (((ULONG)wackbase) - ((ULONG)&((struct WackFakeLibrary *)0)->wfl_LibBase ));
	RemPort( &wackbase->wl_MsgPort );
	FreeMem( wfl, sizeof( struct WackFakeLibrary ) );
    }
}

STRPTR
WackPortName( void )
{
    return( WackBase->wl_MsgPort.mp_Node.ln_Name );
}

void
initFunction( struct WackFakeLibrary *wfl, ULONG count, APTR funcptr )
{
    ULONG lvo = WACKTABLESIZE - 6*(count+1);
    *((UWORD *)&wfl->wfl_JumpTable[ lvo ]) = 0x4EF9;	/* jump instruction */
    *((ULONG *)&wfl->wfl_JumpTable[ lvo+2 ]) = (ULONG) funcptr;
}


ULONG
wacklib_stubReturn( void )
{
    return( 0 );
}

void __asm
lib_VPrintf( register __a0 STRPTR fmt, register __a1 ULONG *arglist )
{
    VPPrintf( fmt, arglist );
}

APTR __asm
lib_ReadCurrAddr( void )
{
    return( CurrAddr );
}

APTR __asm
lib_WriteCurrAddr( register __a0 APTR address )
{
    APTR oldaddress = CurrAddr;
    CurrAddr = address;
    return( oldaddress );
}

APTR __asm
lib_ReadSpareAddr( void )
{
    return( SpareAddr );
}

APTR __asm
lib_WriteSpareAddr( register __a0 APTR address )
{
    APTR oldaddress = SpareAddr;
    SpareAddr = address;
    return( oldaddress );
}

ULONG __asm
lib_ReadByte( register __a0 APTR address )
{
    return( (ULONG)ReadByte( address ) );
}

ULONG __asm
lib_ReadWord( register __a0 APTR address )
{
    return( (ULONG)ReadWord( address ) );
}

ULONG __asm
lib_ReadLong( register __a0 APTR address )
{
    return( (ULONG)ReadLong( address ) );
}

VOID __asm
lib_ReadBlock( register __a0 APTR address,
	register __a1 APTR buffer,
	register __d0 ULONG size )
{
    ReadBlock( address, buffer, size );
}

void __asm
lib_WriteByte( register __a0 APTR address, register __d0 UBYTE data )
{
    WriteByte( address, data );
}

void __asm
lib_WriteWord( register __a0 APTR address, register __d0 UWORD data )
{
    WriteWord( address, data );
}

void __asm
lib_WriteLong( register __a0 APTR address, register __d0 ULONG data )
{
    WriteLong( address, data );
}

VOID __asm
lib_WriteBlock( register __a0 APTR address,
	register __a1 APTR buffer,
	register __d0 ULONG size )
{
    WriteBlock( address, buffer, size );
}

struct Library * __asm
lib_FindLibrary( register __a0 STRPTR library )
{
    return( FindBase( library ) );
}

ULONG __asm
lib_ReadString( register __a0 APTR address,
	register __a1 APTR buffer,
	register __d0 ULONG maxlen )
{
    return( GetString( address, buffer, maxlen ) );
}

ULONG __asm
lib_ReadBSTR( register __a0 APTR address,
	register __a1 APTR buffer,
	register __d0 ULONG maxlen )
{
    return( GetBSTR( address, buffer, maxlen ) );
}

APTR __asm
lib_ReadContextAddr( void )
{
    return( (APTR)LinkContext() );
}

ULONG __asm
lib_Call( register __a0 APTR address)
{
	return( CallFunction(address) );
}
@


39.10
log
@Added code to support ReadBlock/WriteBlock (for all but envoy)
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.9 93/08/24 16:45:30 peter Exp Locker: jesup $
d212 1
d373 5
@


39.9
log
@Fixed hanging Forbid().
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.8 93/05/21 17:36:12 peter Exp Locker: peter $
d211 1
d334 8
@


39.8
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.7 93/05/07 17:04:09 peter Exp Locker: peter $
d170 6
a186 6
	    wackbase->wl_MsgPort.mp_Node.ln_Name = wackbase->wl_PortNameBuffer;
	    wackbase->wl_MsgPort.mp_Node.ln_Type = NT_MSGPORT;
	    wackbase->wl_MsgPort.mp_Flags        = PA_SIGNAL;
	    wackbase->wl_MsgPort.mp_SigBit       = sig;
	    wackbase->wl_MsgPort.mp_SigTask      = FindTask(NULL);

d188 1
@


39.7
log
@Switched to new parsing routines.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.6 93/05/03 14:39:55 peter Exp Locker: peter $
d68 1
a68 1
void
d89 2
d92 2
d99 1
a99 1
void
d133 1
a133 1
	PPrintf("Invalind command\n");
d135 2
@


39.6
log
@Changes to allow operation without ARexx.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.5 93/04/27 14:36:21 peter Exp Locker: peter $
d43 1
d45 1
a94 1

d99 1
a99 2
    char *src = arg1;
    char *dest = cmdbuffer;
d101 1
a101 1
    while ( !isDelimeter( *src ) )
d103 2
a104 6
	*dest++ = *src++;
    }
    *dest++ = ' ';
    *dest = '\0';
    strcat( cmdbuffer, "WACKPORT=" );
    strcat( cmdbuffer, WackPortName() );
d106 15
a120 8
    strcat( cmdbuffer, src );
    strcat( cmdbuffer, " ");
    strcat( cmdbuffer, arg2 );
    error = SystemTags( cmdbuffer,
	SYS_Input, inputfh,
	SYS_Output, outputfh,
	SYS_UserShell, TRUE,
	TAG_DONE );
d122 6
a127 1
    if ( error )
d129 1
a129 1
	PPrintf("Command returned %ld\n", error );
d132 1
@


39.5
log
@Rework of link architecture/naming.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.4 93/03/18 16:28:23 peter Exp Locker: peter $
d27 2
d45 1
d55 1
a55 1
struct MsgPort *WackBase = NULL;
d108 1
a108 1
    strcat( cmdbuffer, ARexxName( RexxContext ) );
d125 1
a125 36
/* Currently have 16 vectors defined:
 *
 *	VPrintf()
 *	ReadCurrAddr()
 *	WriteCurrAddr()
 *	ReadSpareAddr()
 *	WriteSpareAddr()
 *	ReadByte()
 *	ReadWord()
 *	ReadLong()
 *	ReadBlock()
 *	WriteByte()
 *	WriteWord()
 *	WriteLong()
 *	FindLibrary()
 *	ReadString()
 *	ReadBSTR()
 *	ReadContextAddr()
 */

#define WACK_CUSTOMENTRIES	16

/* Skip 5 vectors: Open, Close, Expunge, Reserved, and ARexx */
#define WACK_SKIPENTRIES 5

#define WACK_ENTRIES ( WACK_SKIPENTRIES + WACK_CUSTOMENTRIES )
#define PAD ( WACK_ENTRIES%2 ? 2 : 0 )

#define TABLESIZE (6 * WACK_ENTRIES + PAD)
struct WackFakeLibrary
{
    UBYTE wfl_JumpTable[ TABLESIZE ];
    struct MsgPort wfl_Port;
};

struct MsgPort *
d128 1
a128 1
    struct MsgPort *wackbase = NULL;
d131 5
d143 30
a172 4
	    wfl->wfl_Port.mp_Node.ln_Type = NT_MSGPORT;
	    wfl->wfl_Port.mp_Flags        = PA_SIGNAL;
	    wfl->wfl_Port.mp_SigBit       = sig;
	    wfl->wfl_Port.mp_SigTask      = FindTask(NULL);
a195 1
	    wackbase = &wfl->wfl_Port;
d206 1
a206 1
FreeWackBase( struct MsgPort *wackbase )
d212 1
a212 1
	FreeSignal( wackbase->mp_SigBit );
d214 2
a215 1
	    (((ULONG)wackbase) - ((ULONG)&((struct WackFakeLibrary *)0)->wfl_Port ));
d220 6
d229 1
a229 1
    ULONG lvo = TABLESIZE - 6*(count+1);
@


39.4
log
@Added Wack_ReadContextAddr().
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.3 92/11/06 17:49:00 peter Exp Locker: peter $
d14 1
a14 1
 * to access the Wack host's functions.
d27 4
d47 1
a47 1
#include "access_proto.h"
d175 5
a179 5
	    initFunction( wfl, entry++, lib_stubReturn );	/* Open */
	    initFunction( wfl, entry++, lib_stubReturn );	/* Close */
	    initFunction( wfl, entry++, lib_stubReturn );	/* Expunge */
	    initFunction( wfl, entry++, lib_stubReturn );	/* Reserved */
	    initFunction( wfl, entry++, lib_stubReturn );	/* ARexx */
d231 1
a231 1
lib_stubReturn( void )
d273 1
a273 1
    return( (ULONG)GetMemB( address ) );
d279 1
a279 1
    return( (ULONG)GetMem( address ) );
d285 1
a285 1
    return( (ULONG)GetMemL( address ) );
d293 1
a293 1
    getBlock( address, buffer, size );
d296 1
a296 1
ULONG __asm
d299 1
a299 1
    return( (ULONG)PutMemB( address, data ) );
d302 1
a302 1
ULONG __asm
d305 1
a305 1
    return( (ULONG)PutMem( address, data ) );
d308 1
a308 1
ULONG __asm
d311 1
a311 1
    return( (ULONG)PutMemL( address, data ) );
d339 1
a339 1
    return( (APTR)getContextAddr() );
@


39.3
log
@Test for AllocSignal() success was off by one.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.2 92/11/02 17:09:25 peter Exp Locker: peter $
d118 1
a118 1
/* Currently have 13 vectors defined:
d135 1
d138 1
a138 1
#define WACK_CUSTOMENTRIES	15
d191 1
d331 7
@


39.2
log
@runWackCommand() now passes WACKPORT=wack.n for the port name parameter,
allowing programs to more easily handle being called from Wack sometimes
and directly from a Shell other times.  Added Wack_ReadString() and
Wack_ReadBSTR() commands.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.1 92/11/02 12:42:13 peter Exp Locker: peter $
d160 1
a160 1
    if ( sig > 0 )
@


39.1
log
@If runCommand() has no second argument, then no space is added to the
command line.
@
text
@d6 1
a6 1
 * $Id: wackbase.c,v 39.0 92/10/30 15:22:58 peter Exp Locker: peter $
d41 1
d100 1
d133 2
d137 1
a137 1
#define WACK_CUSTOMENTRIES	13
d188 2
d312 16
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d64 1
a64 1
    if ( arg2 )
@
