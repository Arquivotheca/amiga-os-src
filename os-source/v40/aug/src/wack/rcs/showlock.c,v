head     39.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.5
date     93.06.02.15.51.33;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.05.21.17.35.32;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.05.07.17.05.04;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     93.04.27.14.37.39;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.03.11.29.55;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.22.09;  author peter;  state Exp;
branches ;
next     ;


desc
@Show semaphores on target machine.
@


39.5
log
@ShowSemList() now accepts an address argument.
@
text
@/*
 * Amiga Grand Wack
 *
 * showlock.c -- Show semaphores on target machine.
 *
 * $Id: showlock.c,v 39.4 93/05/21 17:35:32 peter Exp Locker: peter $
 *
 * Code to display semaphores, owners, and waiters on the target Amiga.
 *
 */

#include "exec/types.h"
#include "exec/nodes.h"
#include "exec/lists.h"
#include "exec/interrupts.h"
#include "exec/memory.h"
#include "exec/ports.h"
#include "exec/libraries.h"
#include "exec/devices.h"
#include "exec/tasks.h"
#include "exec/resident.h"
#include "exec/execbase.h"

#include "libraries/dos.h"
#include "libraries/dosextens.h"

#include "exec/semaphores.h"

#include "symbols.h"
#include "special.h"

#include "sys_proto.h"
#include "parse_proto.h"
#include "special_proto.h"
#include "showlock_proto.h"
#include "ops_proto.h"
#include "io_proto.h"

#define NAMESIZE 100

extern APTR CurrAddr;

#define SEMFMT0 "Address  NestCount    Owner  Queue  Waiters ... <Name>\n"
#define SEMFMT1 "%08lx     %4ld %8lx   %4ld  "

void
semHeader( void )
{
    PPrintf(SEMFMT0);
}

ULONG
dumpSemReq( APTR addr, struct SemaphoreRequest *sr )
{
    PPrintf(" %8lx ", sr->sr_Waiter);
    return (0);
}

ULONG
dumpSem( APTR addr, struct SignalSemaphore *sem, char *name )
{
    /* dump semaphore */
    PPrintf(SEMFMT1, addr, sem->ss_NestCount, sem->ss_Owner, sem->ss_QueueCount);

    /* print out waiters */
    WalkMinList(CADDR(addr, sem, &sem->ss_WaitQueue),
		sizeof(struct SemaphoreRequest), dumpSemReq, FALSE);

    PPrintf("%s\n", name);
    return (0);
}


STRPTR
ShowSem( char *arg )
{
    struct SignalSemaphore	*ss;

    if ( parseAddress( arg, (ULONG *) &ss ) )
    {
	semHeader();
	ShowSemNoHeader( ss );
    }
    else
    {
	BadSyntax();
    }

    return( NULL );
}

void
ShowSemNoHeader( APTR addr )
{
    doNode(addr, sizeof (struct SignalSemaphore), dumpSem);
}

void
ShowSemListNoHeader( APTR addr )
{
    WalkList(addr, sizeof (struct SignalSemaphore), dumpSem, FALSE);
}

STRPTR
ShowSemList( char *arg )
{
    APTR semlist;

    if ( parseAddress( arg, (ULONG *) &semlist ) )
    {
	semHeader();
	ShowSemListNoHeader(semlist);
    }
    return( NULL );
}
@


39.4
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: showlock.c,v 39.3 93/05/07 17:05:04 peter Exp Locker: peter $
d105 1
a105 1
ShowSemList( void )
d107 1
a107 2
    semHeader();
    ShowSemListNoHeader(CurrAddr);
d109 5
@


39.3
log
@Switched to new parsing routines.
@
text
@d6 1
a6 1
 * $Id: showlock.c,v 39.2 93/04/27 14:37:39 peter Exp Locker: peter $
d74 1
a74 1
void
d88 2
d104 1
a104 1
void
d109 2
@


39.2
log
@Changes to handle prompt having newline in it.
@
text
@d6 1
a6 1
 * $Id: showlock.c,v 39.1 92/12/03 11:29:55 peter Exp Locker: peter $
d33 1
a33 1
#include "define_proto.h"
d79 1
a79 1
    if ( hexArgAddr( arg, (ULONG *) &ss ) )
@


39.1
log
@AddrArg() renamed to hexArgAddr().
@
text
@d6 1
a6 1
 * $Id: showlock.c,v 39.0 92/10/30 15:22:09 peter Exp Locker: peter $
d67 1
a67 1
		sizeof(struct SemaphoreRequest), dumpSemReq);
d82 1
a82 2
	showSem( ss );
	NewLine();
d89 1
d91 1
a91 1
showSem( APTR addr )
d97 1
a97 1
showSemList( APTR addr )
d99 1
a99 2
    WalkList(addr, sizeof (struct SignalSemaphore), dumpSem);
    NewLine();
d106 1
a106 1
    showSemList(CurrAddr);
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
d79 1
a79 1
    if ( AddrArg( arg, (ULONG *) &ss ) )
@
