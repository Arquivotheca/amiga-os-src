head     39.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


39.5
date     93.06.02.15.51.45;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.05.21.17.35.48;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     93.04.27.14.39.37;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.12.03.11.30.28;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.10.30.16.12.52;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.10.30.15.22.28;  author peter;  state Exp;
branches ;
next     ;


desc
@Odd routines, used by the Graphics and Intuition displayers

@


39.5
log
@Removed NewHelp().
@
text
@/*
 * Amiga Grand Wack
 *
 * special.c -- Odd routines, used by the Graphics and Intuition displayers
 *
 * $Id: special.c,v 39.4 93/05/21 17:35:48 peter Exp Locker: peter $
 *
 * Contains some odd functions, including a library base finder, and
 * support routines to help walk lists and singly-linked lists and
 * retrieve the structures on those lists for further decoding.
 *
 */

#include "exec/types.h"
#include "exec/nodes.h"
#include "exec/lists.h"
#include "exec/interrupts.h"
#include "exec/memory.h"
#include "exec/ports.h"
#include "exec/libraries.h"
#include "exec/devices.h"
#include "exec/tasks.h"
#include "exec/resident.h"
#include "exec/execbase.h"

#include "libraries/dos.h"
#include "libraries/dosextens.h"

#include "symbols.h"
#include "std.h"

#include "sys_proto.h"
#include "show_proto.h"
#include "find_proto.h"
#include "main_proto.h"
#include "special_proto.h"
#include "link_proto.h"
#include "io_proto.h"

#define NAMESIZE 100

extern APTR CurrAddr;

/*
 * find and return library base address
 */
APTR
FindBase( char *name )
{
    struct Library dev; 
    char libname[NAMESIZE];
    struct ExecBase eb;
    struct Node *node;
    struct Node *succ;
    APTR   base = NULL;

    ReadBlock (ReadPointer( ABSSYSBASE ), &eb, sizeof (eb));
    for (node = (struct Node *) eb.LibList.lh_Head; succ = ReadPointer(node);
				    node = succ )
    {
/*PPrintf("Node at %lx\n", node);*/
	ReadBlock (node, &dev, sizeof (dev));
	GetName (dev.lib_Node.ln_Name, libname);
/*PPrintf("Name: %s\n", libname);*/
	if (!strcmp(name, libname))
	{
/*PPrintf("Got it\n");*/
	    base = (APTR) node;
	    goto OUT;
	}
    }
OUT:
    return (base);
}

void
ShowAddress( char *s, APTR x )
{
    PPrintf("%s at", s);
    if (strlen(s) < 6) PPrintf("\t");
    PPrintf("\t%8lx\n", x);
}

/****************/
/** Exec Lists **/
/****************/

/* walk exec list and call function provided, passing it (Sun) address
 * of list node, and of buffer containing node name ("" if NULL).  if
 *  user function returns non-zero, stop walk and pass return value back.
 */
ULONG
WalkList( struct List *list, int nodesize, ULONG (*nodefunc)(), BOOL newline )
{
    struct Node *node;
    struct Node *succ;
    ULONG  retval;

    /* might want to malloc only once, here, rather than in doNode */

    node = ReadPointer(list);
    succ = ReadPointer(node);

    while ( succ )
    {
	retval = doNode(node, nodesize, nodefunc);
	if (retval) goto OUT;
	node = succ;
	succ = ReadPointer(node);
	if ( ( succ ) && ( newline ) )
	{
	    NewLine();
	}
    }

OUT:
    return (retval);
}

ULONG
doNode( struct Node *node, int nodesize, ULONG (*nodefunc)( struct Node *, APTR, char * ) )
{
    char   *buff;
    char  name[NAMESIZE];
    APTR  nameaddr;	/* node->ln_Name */
    ULONG retval;

    buff = malloc(nodesize);

    /* fetch node */
    ReadBlock( node, buff, nodesize);

    /* fetch name */
    nameaddr = (APTR) ((struct Node *)buff)->ln_Name;
    GetName (nameaddr, name);

    /* call user function */
    retval = (*nodefunc)(node, buff, name);

OUT:
    free(buff);
    return (retval);
}

/***************/
/** Min Lists **/
/***************/

/* same as WalkList, but doesn't fetch node names */
ULONG
WalkMinList( struct MinList *list, int nodesize, ULONG (*nodefunc)(), BOOL newline )
{
    struct MinNode *node;
    struct MinNode *succ;
    ULONG  retval;

    /* might want to malloc only once, here, rather than in doNode */

    node = ReadPointer(list);
    succ = ReadPointer(node);

    while ( succ )
    {
	retval = doMinNode(node, nodesize, nodefunc);
	if (retval) goto OUT;
	node = succ;
	succ = ReadPointer(node);
	if ( ( succ ) && ( newline ) )
	{
	    NewLine();
	}
    }

OUT:
    return (retval);
}


ULONG
doMinNode( struct MinNode *node, int nodesize, ULONG (*nodefunc)( struct MinNode *, APTR ) )
{
    char   *buff;
    ULONG retval;

    buff = malloc(nodesize);

    /* fetch node */
    ReadBlock( node, buff, nodesize);

    /* call user function */
    retval = (*nodefunc)(node, buff);

OUT:
    free(buff);
    return (retval);
}

/************************/
/** Singly linked list **/
/************************/

/* same as WalkList, but doesn't fetch node names */
ULONG
WalkSimpleList( APTR firstnode, int nodesize, ULONG (*nodefunc)(), BOOL newline )
{
    APTR node;
    ULONG retval;

    /* might want to malloc only once, here, rather than in doNode */

    node = firstnode;
    while ( node )
    {
	/* doMinNode can serve double duty */
	retval = doMinNode(node, nodesize, nodefunc);
	if (retval) goto OUT;
        if ( ( node = ReadPointer(node) ) && ( newline ) )
        {
	    NewLine();
	}
    }
OUT:
    return (retval);
}

@


39.4
log
@Command functions now return NULL string.
@
text
@d6 1
a6 1
 * $Id: special.c,v 39.3 93/04/27 14:39:37 peter Exp Locker: peter $
a73 54
}

STRPTR
NewHelp(void )
{
    PPrintf("Extended Command Symbols:\n");
    PPrintf("    * -- indirect whereis\n");
    NewLine();
    PPrintf("    execbase -- show ExecBase\n");
    PPrintf("    dosbase -- show DosBase\n");
    NewLine();

    PPrintf("    ibase -- show public fields of IntuitionBase\n");
    PPrintf("    ascreen -- show address of active screen\n");
    PPrintf("    awindow -- show address of active window\n");
    PPrintf("    screen -- show Screen at current address\n");
    PPrintf("    window -- show window at current address\n");
    PPrintf("    wflags -- show flags/IDCMP flags of window at current address\n");
    PPrintf("    gadget[s] -- show gadget [list] at current address\n");
    PPrintf("    firstgad -- show address of first gadget of last window seen\n");
    PPrintf("    menu[s] -- show menu [strip] at current address\n");
    PPrintf("    item[s] -- show menu item[s] at current address\n");
    PPrintf("    requester[s] -- show requester [list] at current address\n");
    PPrintf("    pinfo -- show PropInfo structure at current address\n");
    PPrintf("    image -- show Image structure at current address\n");
    PPrintf("    itext -- show IntuiText structure at current address\n");
    PPrintf("    class -- show boopsi class at current address\n");
    PPrintf("    object -- show boopsi object at current address\n");
    NewLine();

    PPrintf("    gfxbase -- show GfxBase\n");
    PPrintf("    linfo -- show Layer_Info at current address\n");
    PPrintf("    layer -- show layer\n");
    PPrintf("    view -- show view\n");
    PPrintf("    vext -- show view extra\n");
    PPrintf("    viewport [viewports] (=vp) -- show viewport [list]\n");
    PPrintf("    cop -- active copper list (no color table)\n");
    PPrintf("    copper -- active copper list (inc. color table)\n");
    PPrintf("    copinit -- graphics copper header\n");
    NewLine();

    PPrintf("    sem -- show SignalSemaphore at current address\n");
    PPrintf("    sems -- show  SS's in list whose head is at current address\n");
    PPrintf("    lisems -- show all layerinfo semaphores for intuition screens\n");
    NewLine();

    PPrintf("  The following can also be invoked as (symbol <arg>)\n");
    PPrintf("    limit -- set find limit to current address\n");
    PPrintf("    find  (or \'/\') -- find current pattern between curr. addr. and limit\n");
    PPrintf("    stacklimit (=sl)  -- set limit and curr. addr. for stack of <proc>\n");
    NewLine();
    FindHelp();	/* dump current find/limit setting */

    return( NULL );
@


39.3
log
@Rework of link architecture/naming.  Removed extra newlines.
@
text
@d6 1
a6 1
 * $Id: special.c,v 39.2 92/12/03 11:30:28 peter Exp Locker: peter $
d76 1
a76 1
void
d126 2
@


39.2
log
@Added ibase keyword to newhelp.
@
text
@d6 1
a6 1
 * $Id: special.c,v 39.1 92/10/30 16:12:52 peter Exp Locker: peter $
d37 1
a37 1
#include "access_proto.h"
d54 1
d57 3
a59 5
/*PPrintf("Welcome to FindBase(%s)\n",name);*/
    GetBlock (GetMemP( ABSSYSBASE ), &eb, sizeof (eb));
/*PPrintf("Got eb\n");*/
    for (node = (struct Node *) eb.LibList.lh_Head; GetMemL (node);
				    node = (struct Node *) GetMemL (node))
d62 1
a62 1
	GetBlock (node, &dev, sizeof (dev));
a125 1
    NewLine();
d145 1
a145 1
WalkList( struct List *list, int nodesize, ULONG (*nodefunc)() )
d148 1
d153 4
a156 2
    for (node =  (struct Node *) GetMemL(list); GetMemL (node);
				    node = (struct Node *) GetMemL (node))
d160 6
d183 1
a183 1
    GetBlock( node, buff, nodesize);
d203 1
a203 1
WalkMinList( struct MinList *list, int nodesize, ULONG (*nodefunc)() )
d206 1
d211 4
a214 2
    for (node =  (struct MinNode *) GetMemL(list); GetMemL (node);
				    node = (struct MinNode *) GetMemL (node))
d218 6
d240 1
a240 1
    GetBlock( node, buff, nodesize);
d256 1
a256 1
WalkSimpleList( APTR firstnode, int nodesize, ULONG (*nodefunc)() )
d259 1
a259 1
    ULONG  retval;
d263 2
a264 1
    for (node = firstnode; node; node = (APTR) GetMemL(node))
d269 4
a273 1

@


39.1
log
@Updated help text.
@
text
@d6 1
a6 1
 * $Id: special.c,v 39.0 92/10/30 15:22:28 peter Exp Locker: peter $
d87 1
d105 1
a105 1
    PPrintf("    gfxbase -- show GraphicsBase\n");
@


39.0
log
@Initial RCS check-in.
@
text
@d6 1
a6 1
 * $Id: $
a79 1

d87 4
a90 4
    PPrintf("    ascreen (=asc) -- show address of active screen\n");
    PPrintf("    awindow (=awin) -- show address of active window\n");
    PPrintf("    screen (=sc) -- show Screen at current address\n");
    PPrintf("    window (=win) -- show window at current address\n");
d92 2
a93 2
    PPrintf("    gadget[s] (=gad[s]) -- show gadget [list] at current address\n");
    PPrintf("    firstgad (=fgad) -- show address of first gadget of last window seen\n");
d100 2
d109 1
a109 1
    PPrintf("    viewport [viewports] (=vp [vps]) -- show viewport [list]\n");
d111 1
a111 1
    PPrintf("    Cop -- active copper list (inc. color table)\n");
@
