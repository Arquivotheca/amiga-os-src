#
# smakefile for Enforcer
#

#
# Server directory for the data...
#
REMOTE = V:aug/src/enforcer/RamKick
REMOTEBIN = V:aug/bin
VERSION = 37

#
# Name of the module
#
MODNAME	= Enforcer.RamKick

#
# The ".LD" file we want to produce.
#
LD_FILE		= $(MODNAME).ld
LD_STRIP	= $(MODNAME)

ALL:	$(LD_STRIP)

#
# Compiler, assembler, and linker
#
CC = sc
AS = hx68 -a
LN = slink
LN1= blink

#
# Compiler flags...
#
CFLAGS = IGNORE=306 MEMORYSIZE=HUGE DATA=FARONLY PARAMETERS=REGISTER NOSTACKCHECK NOMULTIPLEINCLUDES STRINGMERGE STRUCTUREEQUIVALENCE MULTIPLECHARACTERCONSTANTS DEBUG=LINE NOVERSION OPTIMIZE OPTIMIZERINLINE OPTIMIZERINLOCAL NOICONS

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -csq -i include: -o

#
# Linker flags
#
LFLAGS		= SMALLCODE SMALLDATA MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16 NOICONS QUIET
LFLAGS_STRIP	= ND NOICONS

#
# System libraries
#
LIBS= LIB:amiga.lib

#
# My headers...
#
MY_HDR	=

#
# My C source...
#
MY_C	=	enforcer.c

#
# My Assebly source...
#
MY_A	=	handler.asm

#
# My object files...
#
MY_OBJS	=	enforcer.o handler.o

#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN1) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the LD file...
#
$(LD_FILE):	$(MY_OBJS) $(MY_LIBS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
$(LFLAGS)
<

#
# Default rules...
#
.c.o:
	$(CC) $(CFLAGS) $*.c

.asm.o:
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Specific rules
#
handler.o:	handler.asm	$(MODNAME)_rev.i

#
# Bump the version...
#
version:
	@bumprev $(VERSION) $(MODNAME)_rev

$(MODNAME)_rev.i:
	@bumprev $(VERSION) $(MODNAME)_rev

#
# Release the current build to the server
#
internal:
	@delete $(REMOTE)/((\#?.(c|h|asm|i|ld|rev|doc|info))|makefile|smakefile|(Enforcer.Readme\#?))
	@protect ((\#?.(c|h|asm|i|ld|rev|doc|info))|makefile|smakefile|(Enforcer.Readme\#?)) +r QUIET
	@copy ((\#?.(c|h|asm|i|ld|rev|doc|info))|makefile|smakefile|(Enforcer.Readme\#?)) $(REMOTE)
	@copy $(LD_STRIP) $(REMOTE)
	@copy $(LD_STRIP) $(REMOTEBIN)

#
# Blow away all files that would need to be rebuilt
#
clean:
	@delete \#?.(o|ld|doc|ps|map|map.info|ld.info|o.info)

#
# Make a complete new release (This still is in testing...)
#
release:
	make clean
	make version
	make doc
	make $(LD_FILE)
	make $(LD_STRIP)
	make internal
