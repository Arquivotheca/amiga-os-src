		 SAS/C Development System for AmigaDOS
			    Version 5.10b

       Copyright (c) 1991 SAS Institute, Inc.  All Rights Reserved.

This file contains introductory information about SAS/C for the Amiga.	It
also contains suggestions, hints, and miscellaneous information that for
whatever reason may not be in the manual.

It is very important to read the contents of this file when installing a
new or updated version of the SAS/C compiler. Most of the information in
this file was compiled after the manual went to press, and so is probably
not included in the standard documentation. Also, for updates that do not
include new documentation, this file will contain a list of enhancements.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
INSTALLATION

*** IMPORTANT  ************************************************************

ARP COMMANDS CAUSE PROBLEMS WITH SAS/C INSTALL SCRIPTS.  IF YOU ARE RUNNING
ARP, REMOVE IT FROM YOUR SYSTEM BEFORE RUNNING THE INSTALL SCRIPT.

***************************************************************************

Installing the Compiler on a HARDDISK:
   1) Copy the s/install_hd on disk 1 to ram:
   2) Type CD ram:
   3) Type execute install_hd DRIVE
	where DRIVE is the destination for the compiler (ie DH0: or a
	partition name)
   4) Change disks when asked to.

***** NOTE ******
If you are running AmigaDOS version 1.3, all assigns and path statements
that the install script instructs you to add to your Startup-Sequence
should be added to s:Startup-Sequence BEFORE Workbench is invoked
(i.e, before the LoadWB command).  If you have AmigaDOS version 2.0, place
your assigns and path statement into s:User-Startup.

Putting the statements in other places may result in Workbench not being
able to find the compiler.

The assigns and path statement are as follows:

	assign lc: DRIVE:lc/c
	assign include: lc:/include
	assign quad: ram:
	assign lib: lc:/lib
	path lc: add

These assigns and path statement are also described at the end of
install_hd.

---------------------------------------------------------------------------
Installing the Compiler on a FLOPPY SYSTEM with 1 MEG or more memory:

**** NOTE:  Have 2 blank, formatted disks ready.

   1) Type 'execute SAS_C_5.1.1:s/install_floppy_1M TO'
      where
	TO	is the name of the destination drive. (the disk
		in this drive should be formatted, and empty).

	for example
		execute SAS_C_5.1.1:s/install_floppy_1M df2:

   2) Copy Disk 1 of the compiler to a blank, formatted disk with the
      DISKCOPY command.  Change the name of the newly copied disk to
      SAS_C_5.1.1. This newly copied disk will be your working boot disk.
      When finished with the installation, store your original compiler
      disks in a safe place.

   3) Edit the file s/startupII on your newly copied disk. Change the
      assigns for LIB: and INCLUDE: so they point to the newly created disk
      and to the correct directory, compacth.

      for example
	assign INCLUDE: disk_install_created:compacth
	assign LIB:	disk_install_created:lib

      You may also remove the echo commands requesting disks 4 and 2.

---------------------------------------------------------------------------
Installing the Compiler on a TWO FLOPPY SYSTEM with 512K memory:

**** NOTE:  Have 2 blank, formatted disks ready.

   1) Type 'execute SAS_C_5.1.1:s/install_floppy TO'
       where
	TO	is the name of the destination drive. (the disk
		in this drive should be formatted, and empty).

       for example
		execute SAS_C_5.1.1:s/install_floppy df2:

   2) Copy Disk 1 of the compiler to a blank, formatted disk with the
      DISKCOPY command.  Change the name of the newly copied disk to
      SAS_C_5.1.1. This newly copied disk will be your working boot disk.
      When finished with the installation, store your original compiler
      disks in a safe place.

   3) Edit the file s/startupII on your newly copied disk. Change the
      assigns for LIB: and INCLUDE: so they point to the newly created disk
      and to the correct directory, compacth.

       for example
	assign INCLUDE: disk_install_created:compacth
	assign LIB:	disk_install_created:lib

      You may also remove the echo commands requesting disks 4 and 2.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
  Contacting Technical Support

  With the transition of the compiler to SAS Institute Inc., you can still
  get the high quality of technical support that you have always received.
  You can contact us in one of many ways:

	* Through BIX:
	  Join us in the sas.c conference.

	* Through our Technical Support Hotline:
	  1-(919)-677-8009

	* Through mail:

	  SAS Institute Inc.
	  ATTN: Amiga C Technical Support
	  SAS Campus Drive
	  Cary, NC 27513

  ***** Please include your registration number and compiler version number
  ***** with all correspondence, so that we may better serve you!!
  *****
  ***** To find the version number of your compiler, type lc1 <return> at a
  ***** cli prompt.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
  IMPORTANT NOTE FOR 1.3 USERS.
  With the 5.10 release we have added support for and taken advantage of some
  2.0 features.  As 2.0 becomes more popular (and available) you will find
  more features of the product open up.  We have gone to great lengths to
  bring as much of the 2.0 functionailty down to the 1.3 users to give you
  a taste of the future.  In particular, the SASCOPTIONS program utilizes
  the 2.0 look and feel for requesters and gadgets.  We will continue in
  this direction for future releases but will continue to support 1.3.

  There is one known problem with 1.3 that you must be aware of.  Whenever
  a program creates an ICON for a file in a window that is currently open
  on the workbench, the icon for that file will NOT appear until you close
  and reopen that window.  If you are ever in doubt, simply close the
  window and reopen it.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

IMPORTANT NOTE FOR 1.2 USERS

With the introduction of version 1.3, a new default directory was added.
This directory has an assign created at boot time named ENV:.  To ensure
all parts of our compiler system work correctly, you need to create this
assign in your startup-sequence.  Simply add the following two lines to
your startup-sequence:

		makedir ram:env
		assign ENV: ram:env

---------------------------------------------------------------------------
---------------------------------------------------------------------------
CONTENTS

This file documents the following enhancements and caveats.  To find
a section by number, search for ###n### where n is the section number.

1) -n option to set maximum length for identifiers

2) -E option on LC to invoke the editor when errors are encountered

3) -ba option to LC and LC1 to enable automatic shifting of near data to
   far

4) Icon creation

5) SASCSETUP program use and documentation

6) How to start up CPR from workbench;	how to debug workbench
   programs from CPR

7) Location of listings

8) New #define symbols

9) LSE AREXX command to read compiler warnings from file

10) Assembling CATCHNR.O from CATCH.O

11) Missing DEBUG.LIB and DDEBUG.LIB

12) Missing PRINTER files

13) Enforcer Now included

14) Features introduced in 5.10a

15) Features introduced in 5.10b


###1## -n option

The -n option now allows a numerical parameter.  The number indicates what
the maximum length should be for identifiers.  The default is 31;  the
maximum is 100. Larger numbers use more memory.  -n works with both LC and
LC1.

lc -n100 myprog


###2### -E option to LC

LC now has an option, -E, to invoke LSE on a .c file when errors occur.
You will be placed on the first line with errors and the error message
displayed on the status line.  You can cycle through all errors with the F5
key.

If LSE is already editing the file, the errors will be sent to the existing
editing session.

In the extras drawer of disk 6 is a program LTOCED written by ASDG Inc.
This program will allow existing Cygnus Ed users to take advantage of the
-E feature to invoke Cygnus Ed instead of LSE.	For any problems with this
program, contact ASDG directly.


###3### -ba option

The new -ba option to LC1 and LC will automatically move NEAR data to FAR
if you declare more than 32k of NEAR data.  No warnings will be produced if
this happens.  If you do not specify -ba and you declare more than 32k of
NEAR data, you will see warning 169 - Too much data for NEAR reference. You
may also get BLINK errors when you try to link the file.


###4### Icon creation

To prevent LSE and BLINK from automatically creating icons, rename the
directory lc:icons to any other name.  To create a default icon for files
with a given extension, copy the icon into lc:icons with the name

   def_extension.info

BLINK uses the icon def_exe.info as its template for new tools.  You can
replace def_exe.info with your own icon if you wish.

LSE uses the icon def_lse.info as its template for all files other than .c,
.a, .h and .lmk files.

SASCSETUP checks for a def_extension.info matching the file it needs an
icon for.  No icon will be produces for files without a def_extension.info.
See below for more information.


###5### SASCSETUP

There is a new program on disk #1 in the 'c' drawer called SASCSETUP.
SASCSETUP takes some of the work out of setting up your C development
directories to use the new workbench interface.  You can run it on existing
development directories to set them up or create new ones.  It can be run
from workbench or from CLI.

SASCSETUP does the following:

  *) Creates an icon file for the directory being set up, if it does not
     already have one.	(Creates the directory if necessary).  The file
     'LC:ICONS.INFO' is used as a template for the directory icon.

  *) Creates icons for files in the directory that need them.  (See below)

  *) Repeats the above for any subdirectories of the original directory.

  *) Copies the contents of the directory "LC:Starter_Project", if present,
     to the directory being set up.  The starter directory will contain a
     BUILD icon, a DEBUG icon, an LSE icon and an OPTIONS icon for setting
     options. You may place any other starter icons or programs you like in
     the starter directory; SASCSETUP will copy your programs or icons with
     its own.

Default icons are supplied for .C files, .H files, .A files, and .LMK
files.	These icons are in the LC:ICONS drawer under the name DEF_C.INFO,
DEF_H.INFO, DEF_A.INFO and DEF_LMK.INFO.  If you like, you can add default
icons for other extensions by copying an icon into LC:ICONS with the
appropriate name (DEF_extension.INFO).

SASCSETUP will never overwrite existing files or icons.  It is always safe
to run it on an existing directory.

|==> USING SASCSETUP FROM WORKBENCH:
|
| If you are setting up an existing drawer, click on its icon.	(Click on
| the actual DRAWER icon, not the file icons in the drawer.)  To select
| additional drawers, hold down the SHIFT key and click on their icons.
| When finished, hold down the SHIFT key and double-click on the SASCSETUP
| icon.
|
| If you want to create a new drawer, double-click on the SASCSETUP icon
| and type the name of the drawer when prompted.
----------

|==> USING SASCSETUP FROM THE CLI:
|
| Type LC:SASCSETUP <dirname1> [<dirname2>...]
|
| where <dirnameN> is the name of a directory to be set up.  If the
| directory does not exist, it will be created.
|
| If no directory names are specified, the current directory will be set
| up.
---------

Once you have set up your directory, you can build by simply clicking on
the 'build' icon.  The 'build' icon will invoke LMK on the directory.  If a
lmkfile or makefile is present, it will be used;  otherwise, all .c files
in the directory will be compiled and linked with the options specified in
SASCOPTIONS.  You can invoke LSE on a file by double-clicking on its icon.
You can invoke the debugger, CPR, by click on the DEBUG icon, holding down
the SHIFT key, and double-clicking on your program's icon.


###6### CPR and workbench

 CPR can now be run from Workbench as well from the CLI.  It can run
 applications in either a CLI or Workbench environment from either
 location.  By default, CPR will run its application in the same type of
 environment that it was invoked from.	To change the default environment,
 two new command-line options have been added:

	-cli	forces the application to be invoked from a cli.
	-wb	forces the application to be invoked from a workbench.

 To allow for ease of debugging from within Workbench, a small stub tool
 called  'DEBUG' can be placed in a project directory along with a
 corresponding tool icon.  DEBUG will invoke CPR and pass it all workbench
 startup messages.

 To invoke CPR from Workbench, select the CPR or DEBUG icon, then while
 holding down the shift key, double click on the application icon.

 To set up CPR command line options, edit the CPR or DEBUG icon from the
 Workbench menu.  Place the CPR command line options in the ToolTypes field
 of the icon.  CPR will parse these options as if they were entered on the
 command line.	The options may be placed on one tooltype edit line, or
 they can be spread across  several lines.

 By default debug invokes "lc:cpr".  If you rename or move cpr, debug can
 find it if you assign the full path name of the debugger to the
 environment variable CPRPATH.	This is easily done using setenv.  For
 example:

	setenv CPRPATH cpr:cpr

 If you wish to run a CLI application from a CPR invoked from Workbench,
 include the -cli option with all other CPR options.  The application
 command name and arguments can also be included in tooltypes after all CPR
 options.

 If you wish to run a workbench program from a cpr invoked from a CLI,
 include the -wb option.  The application command line should consist of
 the set of disk objects that you would normally click on from Workbench.
 Both Tool and Project Icons are supported.


###7### Placement of listing file

When using lc or lc1b to generate a listing, previous versions placed the
listing output in the same directory as the quad file.	The listing is now
placed in the same directory as the source .c file.  In addition, you can
override this choice with the new '=' option to -g.

Specify your normal listing options, for example, -ghfx.  Then append
'=filename' to the end, where 'filename' is the name you want to give the
listing file.

Example:

	lc -ghsx=myfile.lst myprog.c

** Note:  The listing file will NOT be placed in the directory with the .o
file, even if you use the -o option.  It will either be placed in the
directory with the source file (default), or wherever you told the compiler
to put it (-g= option).


###8### New #define symbols

The following identifying preprocessor symbols are defined in this release:

LATTICE      = 1
LATTICE_50   = 1
__SASC	     = 1
__SASC_510   = 1
__VERSION__  = 5
__REVISION__ = 10


###9### LSE AREXX command to read messages from file

If you have redirected compiler errors/warnings to a file, you can load
them into LSE with the AREXX command 'LE':

'LE filename'

Where 'filename' is the name of the file with the errors.

Invoking an AREXX Macro from LSE

The keys ALT-F6 through ATL_F10 were previously used to execute macros
6-10. They are now used to invoke the following rexx scripts.

	ALT-F6		lse_rexx_f6
	ALT-F7		lse_rexx_f7
	ALT-F8		lse_rexx_f8
	ALT-F9		lse_rexx_f9

	ALT-F10 	Prompts for filename of AREXX script.


###10### Assembling CATCHNR.O from CATCH.O

CATCHNR.O is the guru catcher, CATCH.O, without a requester.  CATCHNR.O can
be assembled from the catch.a source in the SOURCE directory on Disk 4.
After a full install on a hard disk, the directory can also be found in
lc:/source.

Assemble the catch.a file using the following command:

	asm -u -iINCLUDE: -dNOREQ -ocatchnr.o catch.a


###11### Missing DEBUG.LIB and DDEBUG.LIB

DEBUG.LIB and DDEBUG.LIB have been left off the distribution disks to make
room for the compiler.	These files may be obtained from the master disks
for older versions of the compiler, as well as directly from Commodore.


###12### Missing PRINTER files

There was no room to include the PRINTER.DEVICE files as we always have in
the past.  We have instead included other files that you may want, leaving
you the option of discarding them and copying the printer.device file from
the system.  We felt this allowed maximum flexibility for our customers.

To place the PRINTER.DEVICE file onto the working disk 1 of the compiler,
certain files will have to be removed to allow room.  The following steps
should be taken:

  1) delete devs/serial.device s/install#?

	from your working disk 1.

  2) Do a directory of the root directory of your working disk 1.
     Unprotect all read.me files with the following command:

	protect read.me rwed

     etc., substituting the names of other read.me type files for
     read.me.

  3) Delete all read.me files with the command

	delete read.me#?

  4) Copy PRINTER.DEVICE from a standard Workbench disk to /devs on
     your working disk 1.

  5) (Optional)  Copy the printer driver for your printer from a
     standard Workbench disk to /devs/printers on your working disk 1.

  6) (Optional) Run preferences program from a standard Workbench disk
     to set printer preferences.


###13### ENFORCER

The Enforcer is now included in the Developement System. Anyone with an MMU
should use this wonderful debugging aid.  Both Enforcer and documentaion
are located on Disk 6 in the Extras directory.


###14### Features introduced in 5.10a:

  -go	Indicates error and warning messages should be sent to the normal
	stderr stream as well as to the listing file.  Useful in
	conjunction with other listing flags to indicate the disposition
	of your messages.

  -ja	Suppresses ANSI escape sequences in compiler errors and warnings.

  -pt	Suppresses the use of typedefs when generating prototypes.
	Implies the -pr flag to generate prototypes - no object file will
	be created, the -o option will specify the location of the
	prototype file instead.

Also, 5.10a allows national characters in identifiers.	Hex codes 0xC0
through 0xFF are treated as normal characters.


###15### Features introduced in 5.10b:

  -j*e Turns ALL warning messages into errors

  -j*i Suppresses ALL warning messages
