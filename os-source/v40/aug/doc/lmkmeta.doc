
	Native Makemeta Notes	Issue 1.3

Changes from issue 1.2

Makefiles and rexx scripts installed in V36:aug/{meta,rexx}.
The convenient alias is now (wshell syntax):
	alias m "lmk -f v36:aug/meta/lmkmeta"

If you want your .with file dependent on lmkmeta, set the METAFILE=
macro to v36:aug/meta/lmkmeta.

New target "all" in your lmk.def is invoked by the default rule
of lmkmeta.

Bumprev is in there.

Stripping of include files (stripc) is in there.

"make zoo" no longer uses wshell/unix pipe syntax, tmp files instead

stripc used in "make header" and "make internal" (invoked by script
mminstall.rexx).

new recommendation is that you use QUAD: rather than RAM: for your
precompiled include directory $(SYMDIR)

Autodocs still not in there, although Bill has been so kind as to
release the autodoc tool.  When we are bic'd, I'll add it in.

****

I have devised a makemeta (lmkmeta) that works well with LMK plus ARexx.

I have tested it with two representative projects: the kickstart library
utility.library, and IPrefs which presently lives in V36:aug.

It uses Kodiak's include trick (my append.rexx trick was just too weird).

This trick works like this: (NEW IMPROVED WAY)
  - your local native makefile must be named lmk.def (which lmk reads in
    automatically)
  - you define a target "all" in your lmk.def file.  The default rule
    in lmkmeta is to build a target named "all" which it gets from you.
  - you say "lmk -f lmkmeta", where lmkmeta will be an absolute
    pathname to some standard place (where?).
  - this picks up lmk.def first, then lmkmeta.
  - you can also say "lmk -f lmkmeta clean" and so on, so the alias
    might be: alias m "lmk -f WHERE?:lmkmeta"

The important "local input file" capability of LMK is used, but can
be replaced by unlimited command lines or a different tmp file scheme.

SO: when we have a make/shell scheme that can do .INCLUDE and handle
either local input files or real long command lines, we can move to it
without difficulty.

The flavor of Sun makemeta is preserved, where possible.  The limitations
of LMK (no fancy Bourne shell available) motivated some changes, but
only a few.  Also, some changes (like DOCDIR) are made to support
making and installing utilities in V36/aug.

Lmkmeta provides:
    - build of standard .ld, .library, .device and commands (no suffix).
      The .ld file has debugging, the others are stripped.
    - precompiled include files (optional)
    - provision for local (ram) copies of includes, libs
    - building _pragma.h's from _lib.fd file
    - useful targets for backup, clean, and zoo
    - .lst.o rules for getting an assembler listing file
    - doc: rule, waiting for implementation
    - bumprev/makevers processing (IN THERE)

Its installation targets manage:
    - headers: external includes to include and include.strip (NO STRIP YET)
    - internal: source, binaries, docs, headers, autofd, and proto/pragmas.

Omissions:
	native include stripping tool (currently, they are copied unstripped)
	native autodoc tool
	make depend
	auto update of local include and library directories 
	RCS verification in make internal
	submakes, subdirectories
	atom, .ocm, .oCm files
	shared-internal include files, INTINCL (are these used?)
	convenient support for local test programs
	don't know good place to keep .rexx scripts.
	don't know where to keep lmkmeta

New, special assigns make building official code independent of lattice
product include and library directory assigns.  The required volumes are:
	V36:		- for installation, mount /usr/commodore/amiga/V36
	VINCLUDE:	- official system includes (e.g., V36:include)
	VLIB:		- official system libraries (e.g., V36:lib)
	MYINCLUDE:	- searched first, will be empty for official build
	RAD:		- (could use RAM:) for precompiled includes
	QUAD:		- for lattice
	LC:		- lattice executables

New tools written:
	- lmkmeta
	  included makefile, using trick described above.

	- mminstall.rexx
	  careful copy of files to installation dir
	  create dir if needed
	  optional destination for stripped version
	  optionally gets files from 'with file'

	- vermacro.rexx
	  verifies that a necessary installation directory macro
	  is defined.  A destination macro like DOCDIR

	- feedzoo.rexx
	  spits contents of LMK local input file a word at a time, for Zoo.

Here is the list of macros that you may/must define (with reasonable choices):

SUBSYSNAME		- module name
MAKEFILE=lmk.def	- your makefile, for dependecy of .with file
SYM=$(SUBSYSNAME).sym	- your precompiled include file
SYMSRC= sysall.h	- "include all" source for precompiled includes
SYMDIR= RAD:		- whatever used must be available during system build

Macros relative to V36:

Example kickstart module
SRCDIR=src/kickstart/$(SUBSYSNAME)	- source home path
DOCDIR=doc			- doc directory
BINDIR=$(SRCDIR)		- for $(BINFILES)
INCDIR=utility			- subdir of 36/include for public includes
				(was SUBSYSGROUP)

Example aug utility
SRCDIR=aug/src/$(SUBSYSNAME)
DOCDIR=aug/doc
BINDIR=aug/bin
INCDIR=				- no public includes for this guy

BACKUPDIR=			- full pathname for "make backup:"

AFILES=				- assembler source
CFILES=				- C source

FIRSTO=				- first object (romtag)
OFILES=				- does NOT include $(FIRSTO)
BINFILES= 			- executables that are copied to BINDIR

MYHFILES=			- private include files
MYIFILES=

EXTERNHFILES=			- public include files
EXTERNIFILES=

PROTOFILES=$(SUBSYSNAME)_proto.h $(SUBSYSNAME)_pragma.h
				- copied to V/include/clib

MISCSRC= 			- installed to src directory
MISCDOC= 			- installed to src and doc directories
MYLIBS= 			- libs scanned before standard system libraries

FDFILE=$(SUBSYSNAME)_lib.fd	- libraries only

CINCL= -iMYINCLUDE: -iVINCLUDE: -iVINCLUDE:lattice
				- this is pretty much the LAW
CFLAGS= -. -v -d -cwus -ml	- you can pick your own.  Note *no* $(CINCL)
AINCL= -i MYINCLUDE: -i VINCLUDE:
AFLAGS=	-cvrf

LFLAGS=BATCH BUFSIZE 1024 QUIET SC SD	- pick your own
STARTUP=VLIB:c.o

Example all: target to build iprefs.sym and iprefs
all: $(SYMDIR)$(SYM) $(SUBSYSNAME)

Example all: target to build utility.library and utility_pragma.h
all: $(SUBSYSNAME).library $(PROTOFILES)

