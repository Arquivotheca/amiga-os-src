
NAME: 	  FOREACH
TEMPLATE: NAME, PATH/K, IN/M, COUNT/K/N, UPTO/K/N, SCRIPT/K, COM/K, 
	  WITH/K, ALL/S,FILES/S, DIRS/S, SORT/S

PURPOSE:  To perform a script loop using local variables to contain loop 
	  values.

The Foreach command allows you to loop within scripts with a loop variable 
set to a value selected from a list of names.  Foreach will execute a script 
of your choice; if no script is given, the foreach command allows you to type 
a temporary one in from the command line.  If used from within a script, the 
foreach command will loop within the script.

The foreach loop is bounded by a END directive (or an EOF).

The foreach loop is executed once for each name specified by the IN keyword.
Full pattern matching is supported.  Names specified with the IN option don't
necessarily have to actually exist as files or directories to be used.


The NAME keyword allows you to pick a variable name; each time through the 
loop, that variable is set to the name currently selected from the list of 
names specified with the IN keyword.

If no name is specified, no local variables will be created.

The PATH keyword allows you to select a local variable name where the PATH 
will be stored; if no PATH keyword is specified, this will be stored in a 
variable with the same name as NAME but with .PATH appended.

The basenme and extension local variables work in a similar manner, except 
that the names are always based on the name specied by the NAME keyword with
an appended extension.  The extension for the basename of the file found 
is .BASE   The extension (if any) will be found in the variable name with 
the .EXT extension.

Remember, to access variables that contain non-alphanumeric characters 
(like a .) on the command line (like a .) you have to surround the name 
with { } like: ${i.base}

The ALL keyword causes any pattern matching used in any member of the IN 
namelist to be recursive.

The FILES keyword is a 'files only' keyword.  When this is used, only files 
(non-directories) will be selected from the list of IN names.

The DIRS keyword is a 'directories only' keyword.  When this is used, only 
directories (non-files) will be selected from the list of IN names.

In either the file only or the directory only mode all names which are 
neither files or directories (ie names that don't exist) are selected as well.

The COM keyword allows you to specify a single command to execute.  Remember
to use quotes around the entire command;  if one of the arguments
inside requires quotes, you must escape those quotes using the *.  Within
the COM argument, all variables must be preceeded by an additional $, to
avoid expansion on the command line before the command is executed.

The SCRIPT keyword allows you to specify a script file to excute.  If no
script keyword is used (and no COM keyword is specified) you will be
prompted to create a temporary script.

The WITH keyword allows you to specify a file containing a list of names. 
This list is used after any command line names are used.


The COUNT and UPTO keywords allow you to specify a numeric range;
the loop variable will be set to each of the values in the range
in turn.  Both are required to be specified to use this feature.

The SORT keyword causes the foreach command to do an alphanumeric sort on 
the name list before doing any script execution.


The foreach command nests.  WARNING:  The same variable name should not be 
used for nested Foreach commands; make sure the inner loop variable name is
not the same as the outside loop variable name.

The foreach command places its temporary files in T:  If T: is not assigned,
:T is used instead.  In that case, if :T does not exist it will be created.


EXAMPLE:

foreach i in qwe1 qwe2 ram:#$
echo "file is $i, path is ${i.path}"
foreach j in test1 test2
echo "subname is $j"
echo "Current local vars are:"
set
end
end

