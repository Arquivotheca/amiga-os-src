                         MemShell 39.3 22-Apr-93
                 Copyright (C) 1993 Commodore-Amiga, Inc.
                        Written by David N. Junod

INTRODUCTION

MemShell is a utility that provides a means for fast and efficient
detection of memory loss within an application.  Using this utility you
can bypass the hassles of Snoop and SnoopStrip.

It also provides a subset of the features of Memoration, but provides the
addition of stack backtrace and SegTracker support.

MemShell should work on V37 on up, but has only been used with V39 on up.


USAGE

MemShell accepts the following arguments.

    FILE/A
    The name of the executable to perform the memory tests on.

    WORKBENCH/S
    Run the command as if it were started from Workbench.  Note that
    ARGUMENTS are ignored when using this switch.  The default is to
    run like shell.

    STACK/K/N
    The amount of stack to give the executable.  Defaults to MemShell's
    stack.

    QUIET/S
    Suppress output about unfreed memory.

    MEMORATION/S
    Provide memory rationing functions.  Note that the allocation number
    is relative to and includes the CreateNewProc() allocations used to
    start the executable.  If the number of allocation denials is zero,
    then MemShell will return with a RETURN_WARN.

	WHICH/K/N
	The memory allocation to deny.

	EVERY/K/N
	Deny every n allocation.

	OVER/K/N
	Deny allocations that are over n bytes.

    ARGUMENTS/F
    The arguements to pass to the executable when it is being run as if
    from the shell.


OUTPUT

After MemShell runs the executable, it will output a list of all memory
that was allocated while the application was run, that is still unfreed.

Note that Commodities and networks constantly allocate and free memory,
so often times there extraneous output lines for them.

The output of unfreed memory allocations can be suppressed using the QUIET
option.  Output can be directed to file, using standard AmigaDOS
redirection.

The following fragment illustrates what the MemShell output for an unfreed
memory allocation looks like.

    TCB:  07CF46A0  Name: 'test'  Memory: 07C647D0,64
    PC:   07C70FAA 'test' Hunk 0000 Offset 0000027A
    Stck: 07C0D9C4 07C718B2 00000001 07C67B0A 07C7158A 0000FFFF 07C31524 07CF46A0
    Stck: 00F9223C 07C007F8 07C796C4 07C79620 00008011 01F1D1AB 00000000 07C79630
    SegT: 07C718B2 'test' Hunk 0000 Offset 00000B82
    SegT: 07C67B0A 'test' Hunk 0001 Offset 00000242
    SegT: 07C7158A 'test' Hunk 0000 Offset 0000085A

After all the unfreed memory allocations are shown, then MemShell will
output the final results---whether a memory loss actually occurred or not.

If memory rationing was enabled, then the number of memory allocations
that were denied is shown.  If the number of denials was zero, then
MemShell will return with a level of RETURN_WARN.

If there was an error return value from the executable, then that is shown
also.

Memoration output is sent to the serial port using kprintf.  A memoration
output line will look like the following.

    Allocation 1 Denied: Size=212, Attributes=PUBLIC
    TCB:  07D1B540  Name: 'test'
    PC:   00F81E20 'exec_AllocVec' Hunk 0000 Offset 0000000C
    Stck: 00F81E20 000000D4 00F92608 07D1B540 00F9502E 00000FA0 07C30BBC 00000001
    Stck: 00000000 00000000 00000000 00000000 00000000 07D1B540 00000000 00000000
    SegT: 00F81E20 'exec_AllocVec' Hunk 0000 Offset 0000000C
    SegT: 00F92608 'dos__AllocVecPub' Hunk 0000 Offset 0000000C
    SegT: 00F9502E 'dos__RunCommand' Hunk 0000 Offset 00000038

The first line of the output shows the allocation number that was denied,
the size of the allocation and any attribute flags that were set.


NOTES

For accurate readings, you should not be actively running other
applications while running MemShell.

WHERE

MemShell is located on:

    SOFTPUBLIC:Commodore/MemShell
    V40:aug/bin
