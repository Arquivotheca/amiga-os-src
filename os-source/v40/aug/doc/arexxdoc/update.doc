
                      Update Notes on ARexx V1.10

Release 1.10 of ARexx incorporates a number of new features, improvements,
and of course bug fixes.  All bugs reported to date have been corrected.


                             -- General --
The REXX server no longer opens a startup window, but simply sends its
copyright notice to the standard output stream (or NIL:) as desired.
RexxMast is also now smarter about the IEEE math library; it attempts to
open the library first and provides an intelligible error message if the
math library can't be opened.

The REXX server now supports an additional host port (named "AREXX") for
launching asynchronous commands.  A command sent to the AREXX port will
return immediately without indicating an error, making it roughly the
same as "run rx <program>" or "runwsh <program>" but without the overhead
of an extra CLI process.

An important change has been made to support the extended ASCII character
set in ARexx programs.  Previously the language interpreter had demanded 
that ARexx programs consist of just ASCII characters.  This made it 
inconvenient (although possible!) to enter characters like "æ" or "å".  
The extended characters are now recognized as ordinary printing characters
and will be correctly mapped from lowercase to uppercase.  They are not
considered as REXX symbol characters, though.

The ARexx interface command parser has been generalized to recognize 
double-delimiter sequences within a (quoted) string file.  The quoting
convention that allows you to enter a REXX program as a string is very
convenient for short programs, but it was easy to run out of quoting
levels in the program.  Note that single- and double-quotes WITHIN a
REXX program are exactly equivalent, but that the external environment
may make a distinction.  For example, AmigaDOS uses only the double-quote
as its quoting character, so string files entered from a CLI must begin
with a double-quote, at least if you wish to include any semicolons.
Example:  1> rx "say ""I can do multiple quotes now!"""

CLI Structure.
Each ARexx task is now given a CLI structure so that ADDRESS COMMAND will
have a directory and path to inherit.  ARexx uses a multiple inheritance
mechanism whereby the task will inherit from its client if the client has
a CLI structure, and otherwise uses the RexxMaster's path.  In the latter
case, the path is that in effect when "rexxmast" is run, by analogy with
WorkBench.  The CLI structure is kept synchronized with changes made to
the current directory via Pragma('D',dirname).

Failure Level for Commands.
Each ARexx task initializes its command failure level to the client's
failure level (usually 10), and this level controls reporting of command
errors.  This will help suppress printing of nuisance command errors.
The failure level can be changed using OPTIONS FAILAT as before.  Command
errors (RC > 0) and failures (RC >= failat) can be separately trapped using
SIGNAL ON ERROR and SIGNAL ON FAILURE.

Rx Command.
The "rx" command can now be launched from either a tool or a project icon.
It accepts tooltype arguments using CONSOLE for a window specification and
CMD for a command string.  If no CMD string is supplied, the command will
attempt to execute the (project) file as an ARexx program.  The "rx" command
will also attempt to start the REXX server (rexxmast) if it's not active.

WaitForPort Command.
A new command utility called "WaitForPort" is included in the :c directory.
It waits for up to 10 seconds for the specified port to appear, and then
returns code 0 if the port was found, or 5 if it doesn't exist.  This is
the preferred way to pause while a new ARexx host (or RexxMast) is started.
It can also be used with the -immediate option to simply test for a message
port without waiting.  Note that port names are case-sensitive.
Examples:  waitforport REXX
           waitforport -immediate REXX


                             -- Instructions --
DO Instruction.
The "DO <expression>" form of the DO instruction is now implemented.  If a
FOR limit is also present, the initial expression is still evaluated, but
the result need not be a positive integer.
Example: "do 5;say hi;end"

OPTIONS Instruction.
The OPTIONS instruction now accepts a NO keyword to reset a selected option
to its default value, making it more convenient to reset the RESULTS
attribute for a single command without having to reset the FAILAT and
PROMPT options.  OPTIONS also accepts a new keyword CACHE that can be used
to enable or disable an internal statement-caching scheme.  The cache is
normally enabled.

PARSE Instruction.
The PARSE SOURCE option now returns the full path name of the ARexx program
file.  Formerly only a relative name was given, which was not sufficient to
locate the program's source file.

TRACE Instruction.
A new trace option called "Background" is now available.  TRACE BACKGROUND
is like TRACE OFF except that it can't be changed by external tracing.
This allows well-tested ARexx programs to run in the background without
being affected by the external tracing flag set by the TS command.


                         -- Built-In Functions --
A number of new built-in functions have been added, and additional options
are available for some of the existing functions.

D2X() Built-In Function.
The new D2X(number,[digits]) function converts a decimal number to
hexadecimal.

DATE()
Usage: DATE([option],[date],[format])
Returns the current date in the specified format.  The default ('Normal')
option returns the date in the form DD MMM YYYY, as in 20 Apr 1988.
The options recognized are:
   Basedate -- the number of days since January 1, 0001
   Century  -- the number of days since January 1 of the century
   Days     -- the number of days since January 1 of the current year
   European -- the date in the form DD/MM/YY
   Internal -- internal system days
   Julian   -- the date in the form YYDDD
   Month    -- the current month (in mixed case)
   Normal   -- the date in the form DD MMM YYYY
   Ordered  -- the date in the form YY/MM/DD
   Sorted   -- the date in the form YYYYMMDD
   USA      -- the date in the form MM/DD/YY
   Weekday  -- the day of the week (in mixed case)
These options can be shortened to just the first character.

In addition, the DATE() function now accepts optional second and third
arguments to supply the date either in the form of internal system days
or in the 'sorted' form YYYYMMDD.  The second argument is an integer
specifying either system days (the default) or a sorted date; the third
argument specifies the form of the date and can be either 'I' or 'S'.
The current date in system days can be retrieved using DATE('Internal').
Examples:
say date()                 ==> 20 Apr 1988
say date('M')              ==> April
say date(s)                ==> 19880420
say date('s',date('i')+21) ==> 19890609
say date('w',19890609,'S') ==> Friday

DIGITS()
Usage: DIGITS()
Returns the current numeric digits setting.
Example:
numeric digits 6
say digits()            ==> 6

FIND() Built-In Function.
Usage: FIND(string,phrase)
The new FIND() function locates a phrase of words in a larger string of
words and returns the word number of the matched position.
Example: say find('Now is the time,'is the') --> 2

FORM()
Usage: FORM()
Returns the current numeric form setting.
Example:
numeric form SCIENTIFIC
say form()              ==> SCIENTIFIC

FUZZ()
Usage: FUZZ()
Returns the current numeric fuzz setting.
Example:
numeric fuzz 3
say fuzz()              ==> 3

LINES()
Usage: LINES(file)
Returns the number of lines queued or typed ahead at the logical file,
which must refer to an interactive stream.  The stream must be managed by 
the ConMan console handler in order for the line count to be available;
it is returned as the secondary result of a WaitForChar() call.
Example:
push 'a line'
push 'another one'
say lines(stdin)        ==> 2

OFFSET()
This function has been moved to the support library.

PRAGMA()
Usage: PRAGMA(option,value)
A couple of changes were made to the existing PRAGMA() function.  A new
option keyword 'Id' will return the task ID (the address of the task block)
as an 8-byte hex string.  The task ID is a unique identifier of the 
particular ARexx invocation and may be used to create a unique name for it.

The PRAGMA('Directory') option has been modified so that it now returns
the full path name of the current directory; this allows the directory to 
be changed and then later restored.  Note that PRAGMA('D') is equivalent
to PRAGMA('D',''); it returns the pathname of the current directory without
changing the directory.

PRAGMA('W',{'Null' | 'WorkBench'}) controls the task's WindowPtr field.
Setting it to 'Null' will suppress any requestors that might otherwise be
generated by a DOS call.

PRAGMA('*',[name]) defines the specified logical name as the current ("*")
console handler, thereby allowing the user to open two streams on one window.
If the name is omitted, the console handler is set to that of the client's
process.
Examples:
say pragma('D','df0:c')      ==> ARexx1.06:
say pragma('D','df1:c')      ==> WorkBench:c
say pragma('Id')             ==> 00221ABC
call pragma '*',STDOUT

SHOW() Built-In Function.
The SHOW('P') option has been changed to agree with its documentation.  It
now returns the names on the system ports list (like SHOWLIST('P')); you
can check for the existence of a host using SHOW('P',address()).  The
internal ports list (less often used) is now selected by SHOW('Internal').
Examples: SHOW('p')           ==> REXX MyPort
          SHOW('I')           ==> MyPort

SOURCELINE()
Usage: SOURCELINE([line])
Returns the text for the specified line of the currently executing ARexx
program.  If the line argument is omitted, the function returns the total
number of lines in the file.  This function is often used to embed "help" 
information in a program.
Examples:
/* A simple test program */
say sourceline()            ==> 3
say sourceline(1)           ==> /* A test program */

TRUNC()
Usage: TRUNC(number,[places])
Returns the integer part of the number argument followed by the specified 
number of decimal places.  The default number of decimal places is 0, and 
the number is padded with zeroes as necessary.
Examples:
say trunc(123.456)         ==> 123
say trunc(123.456,4)       ==> 123.4560

X2D()
Usage: X2D(hex,digits)
Converts a hexadecimal number to decimal.
Example: say x2d('1f')     ==> 31


                       -- Support Library Functions --
One new function, DELAY(), has been added, and some new options have been 
implemented for several others of the support library functions.

BADDR() Support Function.
The new BADDR(BPTR) function converts a BPTR to a real address.

DELAY()
Usage: DELAY(ticks)
The DELAY() function waits for the specified number of ticks (1/50 second)
and then returns.  This function should be used whenever you need to 
suspend the execution of an ARexx program for some amount of time.  While
the program is waiting, the computer is free to execute other tasks.
Example:
call delay 100          /* two seconds */

DELETE() Support Function.
The new DELETE(filename) function deletes a file or directory.

FORBID() Support Function.
Task switching can be controlled by calls to FORBID() and PERMIT().  The
return value is the current nesting count (or -1 if task switching is
enabled).  Since ARexx programs run as separate tasks, no harm is done if
the program ends with task switching forbidden.

MAKEDIR() Support Function.
The new MAKEDIR(dirname) function creates a new directory and returns a
boolean result.  Note that the function does not return an error if the
directory already exists, so the call can be made to ensure that a directory
exists.

NEXT() Support Function.
The new NEXT(address,[offset]) function returns the 4-byte value at the
address (plus offset).  It can be used to follow a EXEC list forwards as
NEXT(address) or backwards as NEXT(address,4).

NULL() Support Function.
The new NULL() function returns a null pointer as a 4-byte string
('0000 0000'x).

OFFSET()
Usage: OFFSET(address,displacement)
Computes a new address as the signed offset from a base address.  The 
address argument must be a 4-byte string, and the displacement argument 
is a decimal integer.  This function provides a convenient way to compute 
the address of a field in a data structure without requiring calls to 
C2D() and D2C().
Example:
say c2x(offset('0000 0000'x,4))   ==> 00000676

PERMIT() Support Function.
Task switching can be controlled by calls to FORBID() and PERMIT().  The
return value is the current nesting count (or -1 if task switching is
enabled).  Since ARexx programs run as separate tasks, no harm is done if
the program ends with task switching forbidden.

RENAME() Support Function.
The new RENAME(oldname,newname) function renames a file and returns a
boolean result.

SHOWDIR()
Usage: SHOWDIR(directory,['All' | 'File' | 'Dir'],[separator])
The SHOWDIR() function now accepts a separator character as the third
argument.  Any character, including a null, can be used as a separator,
so this provides a convenient way to separate filenames with a character 
that can't be used in the filename.
Examples:
say showdir('df1:c')         ==> ts tcc rxc tco hi rxset rx rxlib te
say showdir('df1:c',,';')    ==> ts;tcc;rxc;tco;hi;rxset;rx;rxlib;te

SHOWLIST()
Usage: SHOWLIST(option,[name],[separator],['Address'])
The SHOWLIST() function now accepts a separator character as the third
argument.  The separator can be any character, including a null, so it
provides a convenient way to separate the list node names.

The option list has been expanded in several ways.  The EXEC MemList,
IntrList, ResourceList, and SemaphoreList are now available, and the 
TaskReady list is now indicated by the 'T' option.  In addition, the 
AmigaDOS device list can be examined by specifying 'Assign' (directories), 
'Handlers' (devices), or 'Volumes'.  The option can also be given as the
(4-byte) absolute address of a list header; the function performs several 
tests to make sure that it really is a header.

The optional fourth keyword argument 'Address' specifies that the
function is to return the address of the located node, and is valid
only if a node name (second argument) has been supplied.  The 'Address'
option is valid for both EXEC and DOS lists; the latter are returned as
machine addresses rather than as BPTRs.  DOS list names are always reported
in uppercase, and the supplied node name should be in uppercase.
Examples:
say showlist('Handlers')           ==> DF0 DF1 CON RAW CNC
say showlist('M',,';')             ==> expansion ram;Chip Memory
say showlist('A','FONTS')          ==> 1
SHOWLIST('L','exec.library',,'A')  ==> '0000 0676'x

STATEF()
Usage: STATEF(filename)
The status reported by the STATEF() function now includes the timestamp
associated with the file.  The status string for a file formatted as
   FILE bytes blocks protection-flags days minutes ticks comment
The days field is the number of days since January 1, 1978, the minutes
field is the number of minutes since midnight, and the ticks field is
the number of tick intervals (1/50 of a second) in the minute.  

The protection flags have been extended to include the Archive, Pure, 
Script, and Hidden attributes defined in the upcoming AmigaDOS V1.3 
operating system release.  The protection attributes are always reported
in the order HSPARWED with a dash "-" if the attribute isn't present.
Examples:
say statef('c:')             ==> DIR 0 0 ----RWED 3456 1234 12
say statef(':c/rxc')         ==> FILE 408 1 --P-RWED 3620 1134 1827 


                  -- New External Function Libraries --
Willy Langeveld of the Stanford Linear Accelerator Center has written a
couple of external function libraries for use with ARexx.  The library
rexxmathlib.library contains about two dozen math functions, including
sqrt() and many transcendental functions.  Two versions are available:
one that uses the standard IEEE library and another to use the Microbotics
SBII 68881 math coprocessor.  The library is in :Libraries/RexxMathLib,
and the source code is available in the :Developers/RexxMathLib directory.

The other library, rexxarplib.library, has been greatly expanded in scope
and now supports a wide range of windows and graphics calls.  You can use
it to open screens and windows, attach gadgets, put up requestors, and
display IFF files.  The file and documentation are in :Libraries/RexxArpLib.

The rexxmathlib.library and rexxarplib.library files should be copied to
your LIBS: directory, and each function library must be "mounted" to make 
it known to the language interpreter.  This can be done using the Built-In
function ADDLIB() or the command utility rxlib.  In the latter case, issue
the command (for example)
   rxlib rexxmathlib.library 0 -30 0
to mount the math library at priority 0.  Note that the offset parameter
-30 MUST be given correctly; it is the actual function offset that will be
called by the interperter.  If you specify the wrong value, the machine will
crash when you try to call a library function.  The last 0 in the rxlib
command is the library version, and 0 indicates that any version will do.

The rexxarplib library also uses a couple of auxiliary libraries, including
screenshare.library, arp.library, and iff.library.  These are not callable
directly from ARexx and so don't need to be mounted with "rxlib" --- just
copy them to your LIBS: directory so that they can be opened as required.


                         -- Modula-2 Support --
Developers writing software in Modula-2 can now access the ARexx library.
Thanks go out to Leon Frenkel of Avant-Garde Software, developer of the 
BenchMark Modula-2 compiler, who created the definition files and glue 
routines needed to call the ARexx systems library from Modula-2 programs.
You'll find these files in the :Developers/Bindings_M2 directory of the
distribution disk.


                       -- More Example Programs --
Some ARexx users have started sending in example programs, so I've created
a new directory called "Examples" on the distribution disk.  You'll find
a variety of programs in here, and most are designed to solve real-world
problems rather than as contrived examples.  Programs specific to one host
(e.g. TxEd-Plus) will be found in the appropriate subdirectory.


                            -- Bug Fixes --
The // (integer division) operator did not work correctly in some cases,
but should now be fully functional.  The ~== operator now works correctly.

Signed exponents like '1.23E-4' are now converted properly, and embedded
signs like '123-456' are reported as conversion errors.

ARexx now works with the V1.3 IEEE library to support the 68881 math
coprocessor chip, and a bug in converting -0 has been fixed.

The spurious "Unexpected ELSE" error that occurred with certain control
constructs has been fixed.

The PARSE instruction has been changed to correctly handle the case of a 
pattern match at the beginning of the parse string.  For example,
   PARSE VALUE ':file' WITH device ':' name
will assign the null string to device and the value 'file' to name.

The version string reported by PARSE VERSION now correctly indicates the
video mode (NTSC or PAL) and vertical blanking frequency.

OTHERWISE instructions can now be followed by a list of instructions
without including a DO ... END construct.

A bug in the ARG() function was fixed that returned an improper count.

The DATE() function now properly reports the date of last day of the month.

A bug in the INDEX() and POS() functions causing a spurious match at the
end of a string has been fixed.

A bug in the TIME('C') function was fixed that incorrectly reported times
such as ``12:30PM'' as ``12:30AM''.

The TRIM() function has been fixed.  It had a strange bug that made it work
on my chosen test case, but in few other situations.

The SYMBOL() and VALUE() Built-In functions now work correctly.

The ARexx command parser now correctly processes "string files" declared
with the RXFB_STRING bit.

A bug in WAITPKT() support library function was fixed that sometimes caused
queued messages to be ignored.


                      -- Documentation Corrections --
An unfortunate number of errors remained in the ARexx documentation, in 
spite of repeated proofreadings and editing; a few of the more important
errata are mentioned here.

PARSE EXTERNAL.
The documentation for this PARSE option is incorrect.  PARSE EXTERNAL will
read a line from the STDERR stream, rather than from STDIN, so as not to
disturb any PUSHed or QUEUEd data.  This is in the spirit of the standard
EXTERNAL option.  If STDERR is not defined, PARSE EXTERNAL returns the 
null string.

Trace OFF Option.
The list on page 71 of the manual should include the TRACE OFF option.
This is mentoned elsewhere in the manual, but was inadvertently omitted
from the list of TRACE options.

FREESPACE() Built-In Function.
Calling FREESPACE() with no arguments will return the amount of memory
available in the interpreter's internal pool.

Rxlib Command Utility.
The "rxlib" command was omitted from the documention.  It "mounts" a
function library so that it can be called from ARexx, and can also be
used to list the currently-defined functions.  The command syntax is
      1> rxlib library-name priority offset version
The priority argument gives the search priority and must be in the range
-100 to 100 inclusive.  The offset argument is the actual integer offset
to the library's entry point and should be documented with each library.
The version is the required library version and can usaully be omitted,
as the default is to load any version.

N.B. Do not get the offset value wrong!  Calling a library with a bogus 
entry point will crash the machine.  Anyone developing an external function
library should carefully document the offset to the query (look-up) entry.
Examples:
   1> rxlib rexxsupport.library 0 -30 0
   1> rxlib rexxmathlib.library 5 -30 0

ARexx System Library Functions.
The CVa2i function returns the converted value in D0 and the digit count
in D1.

The CVc2x and CVx2c functions take the mode argument in D0 and the length
argument in D1.

The CVi2arg function does not accept the digits argument in D1 that the 
documentation shows.  Integers are converted at the maximum 12 digits.

The function LengthArgstring() was inadvertently omitted from the list of
library functions.  This function is the recommended way to extract the
length of an argument string.  The calling sequence is
   length = LengthArgstring(argptr)
     D0                       A0


   -- Bill Hawes (May 19, 1989)
