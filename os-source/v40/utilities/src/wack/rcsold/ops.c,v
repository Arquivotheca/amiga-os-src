head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     91.04.24.20.50.06;  author peter;  state Exp;
branches ;
next     1.3;

1.3
date     89.09.21.19.35.35;  author jimm;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.21.13.37.24;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.21.13.08.13;  author jimm;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Added Nextaddr() function.
Changed $Header to $Id.
@
text
@

/***********************************************************************
*
*			   G R A N D W A C K
*
************************************************************************
*
*	Copyright (C) 1985, Commodore-Amiga. All rights reserved.
*
************************************************************************
*
*   Source Control:
*
*	$Id: /usr2/peter/wack/RCS/ops.c,v 1.3 89/09/21 19:35:35 jimm Exp Locker: peter $
*
*	$Locker: peter $
*
*	$Log:	ops.c,v $
 * Revision 1.3  89/09/21  19:35:35  jimm
 * bringing rcs up to sync
 * 
 * Revision 1.2  88/01/21  13:37:24  root
 * kodiak's copy of jimm's version, snapshot jan 21
 * 
*
***********************************************************************/

#include "wack.h"
#include "symbols.h"
#include "watch.h"

#define REFRESH flags = -1;

extern	short watch;

extern long FrameSize;
extern short flags;
extern unsigned long CurrAddr;
extern unsigned long SpareAddr;

long indirStack[MAXINDIR];
short indirCount = 0;


/**********************************************************************/
/* jimm: 4/15/89: whereis: indirect/where/exdirect		      */
Whereis()
{
    if ( Indirect() ) {
	ApproxSym();
	Exdirect();
    }
    flags = 0;		/* don't refresh	*/
}

/**********************************************************************/

Indirect()
{
    if (indirCount < MAXINDIR) {
	indirStack[indirCount++] = CurrAddr;
	CurrAddr = GetMemL (CurrAddr) & 0xfffffe;
	REFRESH
	return ( 1 );
    }
    else {
	PutError ("too many indirections");
	return ( 0 );
    }
}

/**********************************************************************/

IndirectBptr()
{
    if (indirCount < MAXINDIR) {
	indirStack[indirCount++] = CurrAddr;
	CurrAddr = GetMemL (CurrAddr) << 2;
	REFRESH
    }
    else {
	PutError ("too many indirections");
    }
}

/**********************************************************************/

Exdirect()
{
    if (indirCount > 0) {
	CurrAddr = indirStack[--indirCount];
	REFRESH
    }
    else {
	PutError ("no indirections to undo");
    }
}

/**********************************************************************/

/* We now keep a spare address pointer you can swap with the
 * current one.  Also, certain functions that display a particular
 * address (eg.  xxxbase, awindow, etc.) set up the SpareAddr
 * variable.  This routine will swap the current address with
 * the spare one.
 */
swapSpareAddr()
{
    unsigned long temp;

    temp = CurrAddr;
    CurrAddr = SpareAddr;
    SpareAddr = temp;
    REFRESH
    return ( 1 );
}

/**********************************************************************/

Evaluate(sp, argStr)
    struct Symbol *sp;
    char *argStr;
{
    char s[20];
    if (watch & WATCH_EVALUATE) {
	printf ("** evalutating symbol: ");
	ShowSymbol (sp);
	WWAIT;
    }
    switch (sp -> stype) {
	case ACT_CONSTANT: 
	case ACT_BASE: 
	    CurrAddr = sp -> value1;
	    REFRESH
	    break;
	case ACT_PRIM: 
	    Execute (sp -> value1, argStr);
	    break;
	case ACT_OFFSET:
	    CurrAddr = (sp->value2) + (sp -> value1);
	    REFRESH
	    break;
	default: 
	    PutError ("unknown symbol type");
    }
}

/**********************************************************************/

SizeFrame()
{
    putchar (':');
    GetNumber (&FrameSize);
    REFRESH
}

/**********************************************************************/

NextCount()
{
    long i;

    putchar ('+');
    if (GetNumber (&i)) {
	CurrAddr += i;
	REFRESH
    }
    else
        putchar ('\n');
}

/**********************************************************************/

BackCount()
{
    long i;

    putchar ('-');
    if (GetNumber (&i)) {
	CurrAddr -= i;
	REFRESH
    }
    else
        putchar ('\n');
}

/**********************************************************************/

Resume()
{
    putchar ('\n');
    freeCPU();
}

/**********************************************************************/

SetBreakPoint()
{
    long i;

    printf ("%06lx %ld ^", CurrAddr, getBrkCnt (CurrAddr));
    if (GetNumber (&i)) {
	setBrkPt (i);
    }
    else
        putchar ('\n');
}

/**********************************************************************/

AssignMem()
{
    long    i;

    printf ("%06lx ", CurrAddr);

    if (FrameSize > 0)
	printf ("%04lx =", GetMem (CurrAddr) & 0xffff);
    else
	printf ("xxxx =");

    if (GetNumber (&i)) {
	PutMem (CurrAddr, i);
        REFRESH
    }
    else
        putchar ('\n');
}

/**********************************************************************/

Nothing()
{
    puts ("\nnothing happens.");
}

/**********************************************************************/
@


1.3
log
@bringing rcs up to sync
@
text
@d2 1
d15 1
a15 1
*	$Header: ops.c,v 1.2 88/01/21 13:37:24 root Exp $
d17 1
a17 1
*	$Locker: jimm $
d20 3
d40 1
d98 19
@


1.2
log
@kodiak's copy of jimm's version, snapshot jan 21
@
text
@d14 1
a14 1
*	$Header$
d16 1
a16 1
*	$Locker$
d18 4
a21 1
*	$Log$
d42 9
d52 2
d60 1
d64 1
@


1.1
log
@Initial revision
@
text
@a24 1
#include "special.h"
d26 2
d45 1
a45 1
	REFRESH();
d54 14
d72 1
a72 1
	REFRESH();
d95 1
a95 1
	    REFRESH();
d102 1
a102 1
	    REFRESH();
d115 1
a115 1
    REFRESH();
d127 1
a127 1
	REFRESH();
d142 1
a142 1
	REFRESH();
d185 1
a185 1
        REFRESH();
@
