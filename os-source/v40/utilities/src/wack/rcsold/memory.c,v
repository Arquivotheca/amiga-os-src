head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     91.04.24.20.53.27;  author peter;  state Exp;
branches ;
next     1.4;

1.4
date     90.02.21.11.44.30;  author kodiak;  state Exp;
branches ;
next     1.3;

1.3
date     89.11.22.16.24.14;  author kodiak;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.21.13.37.21;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.21.13.08.12;  author jimm;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@Changed $Header to $Id.
@
text
@
/***********************************************************************
*
*			   G R A N D W A C K
*
************************************************************************
*
*	Copyright (C) 1985, Commodore-Amiga. All rights reserved.
*
************************************************************************
*
*   Source Control:
*
*	$Id: /usr2/peter/wack/RCS/memory.c,v 1.4 90/02/21 11:44:30 kodiak Exp Locker: peter $
*
*	$Locker: peter $
*
*	$Log:	memory.c,v $
 * Revision 1.4  90/02/21  11:44:30  kodiak
 * rename dbase to dosbase, and add dos device listing to it
 * 
 * Revision 1.3  89/11/22  16:24:14  kodiak
 * 1.5: Forbid()/Permit() using BGACK hold; "faster" symbol loading option.
 * 
 * Revision 1.2  88/01/21  13:37:21  root
 * kodiak's copy of jimm's version, snapshot jan 21
 * 
*
***********************************************************************/
/***********************************************************************
*
*	Remote Memory Access Functions
*
***********************************************************************/

#include	<sys/ioctl.h>

extern short dd;
extern short remote;
extern short Memory[];

short nestcount = 0;

Forbid()
{
    if (nestcount++ == 0)
	if (ioctl(dd, _IO(B, 3)) == -1)
	    quit("ioctl error");
}

Permit()
{
    if (--nestcount == 0)
	if (ioctl(dd, _IO(B, 2)) == -1)
	    quit("ioctl error");
}

PutMem(addr,val)
    long addr;
    short val;
{
    if (remote) {
	lseek (dd, addr & 0xffffff, 0);

	if (write (dd, &val, 2) <= 0)
	    quit ("write error");
    }
    else {
	Memory[addr] = val;
    }

    return (val);
}

PutMemL(addr,val)
    long addr;
    long val;
{
    if (remote) {
	lseek (dd, addr & 0xffffff, 0);

	if (write (dd, &val, 4) <= 0)
	    quit ("write error");
    }

    return (val);
}

char GetMemB(addr)
    long addr;
{
    char   temp;

    lseek (dd, addr & 0xffffff, 0);

    read (dd, &temp, 1);
    return (temp);
}

short GetMem(addr)
    long addr;
{
    short   temp;

    lseek (dd, addr & 0xffffff, 0);

/*  if (read (dd, &temp, 2) <= 0)
	quit ("read error"); */
    read (dd, &temp, 2);
    return (temp);
}

long GetMemL(addr)
    long addr;
{
    long   temp;

    if (remote) {
	lseek (dd, addr & 0xffffff, 0);

/*	if (read (dd, &temp, 4) <= 0)
	    quit ("read error"); */
	read (dd, &temp, 4);
	return (temp);
    }
}

getBlock(addr,buffer,size)
    long addr;
    char *buffer;
    long size;
{
    if (remote) {
	lseek (dd, addr & 0xffffff, 0);

/*	if (read (dd, buffer, size) <= 0)
	    quit ("read error"); */
	read (dd, buffer, size);
    }
}
@


1.4
log
@rename dbase to dosbase, and add dos device listing to it
@
text
@d14 1
a14 1
*	$Header: memory.c,v 1.3 89/11/22 16:24:14 kodiak Exp $
d16 1
a16 1
*	$Locker:  $
d19 3
@


1.3
log
@1.5: Forbid()/Permit() using BGACK hold; "faster" symbol loading option.
@
text
@d14 1
a14 1
*	$Header: memory.c,v 1.2 88/01/21 13:37:21 root Exp $
d16 1
a16 1
*	$Locker: kodiak $
d19 3
d84 11
@


1.2
log
@kodiak's copy of jimm's version, snapshot jan 21
@
text
@d14 1
a14 1
*	$Header$
d16 1
a16 1
*	$Locker$
d18 4
a21 1
*	$Log$
d30 2
d36 15
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
	lseek (dd, addr, 0);
d39 1
a39 1
	if (write (dd, &val, 2) <= 0) {
a40 1
	}
d54 1
a54 1
	lseek (dd, addr, 0);
d68 1
a68 1
    lseek (dd, addr, 0);
d70 2
a71 4
#ifdef undef
    if (read (dd, &temp, 2) <= 0)
	quit ("read error");
#endif undef
d82 1
a82 1
	lseek (dd, addr, 0);
d84 2
a85 4
#ifdef undef
	if (read (dd, &temp, 4) <= 0)
	    quit ("read error");
#endif undef
d91 1
a91 1
GetBlock(addr,buffer,size)
d97 1
a97 1
	lseek (dd, addr, 0);
d99 2
a100 4
#ifdef undef
	if (read (dd, buffer, size) <= 0)
	    quit ("read error");
#endif undef
@
