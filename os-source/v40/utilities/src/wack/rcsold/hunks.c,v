head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     91.04.24.20.52.56;  author peter;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.21.13.37.07;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.21.13.08.11;  author jimm;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Changed $Header to $Id.
@
text
@
/***********************************************************************
*
*			   G R A N D W A C K
*
************************************************************************
*
*	Copyright (C) 1985, Commodore-Amiga. All rights reserved.
*
************************************************************************
*
*   Source Control:
*
*	$Id: /usr2/peter/wack/RCS/hunks.c,v 1.2 88/01/21 13:37:07 root Exp Locker: peter $
*
*	$Locker: peter $
*
*	$Log:	hunks.c,v $
 * Revision 1.2  88/01/21  13:37:07  root
 * kodiak's copy of jimm's version, snapshot jan 21
 * 
*
***********************************************************************/

#include "symbols.h"

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/interrupts.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <exec/libraries.h>
#include <exec/devices.h>
#include <exec/tasks.h>
#include <exec/resident.h>

#include <exec/execbase.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>

#define LTOB(b_ptr) (b_ptr << 2)

APTR GetMemL();
extern APTR CurrAddr;


BindHunks()
{
    long    hunk_entry;		/* hunk which is part of linked list */
    int     hunk_num = 0;	/* Count of hunks we have seen       */
    char    basename[40];

    puts("");
    if ((ULONG) CurrAddr & 0x3) {
	printf ("  hunks must be long word aligned\n");
    }
    else {
	for (hunk_entry = ((ULONG) CurrAddr >> 2);
		hunk_entry & hunk_entry + 1;/* ???? */
		hunk_entry = (long) GetMemL (LTOB (hunk_entry))) {
	    printf ("hunk %3ld at %06lx\n", hunk_num, LTOB (hunk_entry + 1));
	    sprintf (basename, "`hunk_%lx", hunk_num++);
	    BindValue1 (basename, ACT_BASE, LTOB (hunk_entry + 1));
	}
	FixupTopMap ();
    }
}



AttachHunks()
{
    struct Process  proc;
    struct CommandLineInterface cli;
    long    hunk_entry;		/* hunk which is part of linked list */
    int     hunk_num = 0;	/* Count of hunks we have seen       */
    char    basename[40];

    getBlock (CurrAddr, &proc, sizeof (proc));
    puts (" ");
    getBlock (LTOB (proc.pr_CLI), &cli, sizeof (cli));

 /* Hunks are formed with a link list of pointers one word before the
    start of the actual hunk area (hunk_entry[1]) */
    for (hunk_entry = cli.cli_Module;
	    hunk_entry & hunk_entry + 1; /* ??? */
	    hunk_entry = (long) GetMemL (LTOB (hunk_entry))) {
	printf ("hunk %3ld at %06lx\n", hunk_num, LTOB (hunk_entry+1));
	sprintf (basename, "`hunk_%lx", hunk_num++);
	BindValue1 (basename, ACT_BASE, LTOB (hunk_entry + 1));
    }
    FixupTopMap ();
}
@


1.2
log
@kodiak's copy of jimm's version, snapshot jan 21
@
text
@d14 1
a14 1
*	$Header$
d16 1
a16 1
*	$Locker$
d18 4
a21 1
*	$Log$
@


1.1
log
@Initial revision
@
text
@d77 1
a77 1
    GetBlock (CurrAddr, &proc, sizeof (proc));
d79 1
a79 1
    GetBlock (LTOB (proc.pr_CLI), &cli, sizeof (cli));
@
