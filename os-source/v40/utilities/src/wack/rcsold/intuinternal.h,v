head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     88.01.21.13.42.44;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.21.13.08.19;  author jimm;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@kodiak's copy of jimm's version, snapshot jan 21
@
text
@
#ifndef INTUITION_INTUINTERNAL_H
#define INTUITION_INTUINTERNAL_H TRUE

/*** intuinternal.h **********************************************************
 *
 *  intuition internals
 *
 *  $Header: intuinternal.h,v 35.2 87/10/29 18:19:58 bart Exp $
 *  Confidential Information: Commodore-Amiga Computer, Inc.
 *  Copyright (c) Commodore-Amiga Computer, Inc.
 ****************************************************************************/

#define INTUITIONPRIVATE    /* want IntuitionBase out of intuitionbase.h */
#include "/usr/commodore/amiga/V/internal/src/kickstart/intuition/intuitionbase.h"

#if 1	/* undefine these when making iflow */
#define LOCKSTATE()	lockIBase(ISTATELOCK)
#define LOCKGADGETS()	lockIBase(GADGETSLOCK)
#define LOCKVIEW()	lockIBase(VIEWLOCK)
#define LOCKIBASE()	lockIBase(IBASELOCK)
#define LOCKRP()	lockIBase(RPLOCK)

#define UNLOCKSTATE()	unlockIBase(ISTATELOCK)
#define UNLOCKGADGETS()	unlockIBase(GADGETSLOCK)
#define UNLOCKVIEW()	unlockIBase(VIEWLOCK)
#define UNLOCKIBASE()	unlockIBase(IBASELOCK)
#define UNLOCKRP()	unlockIBase(RPLOCK)
#endif

#define	SIMPLESPRITES	1	/* glory, but with a loophole */


/* ======================================================================== */
/* === DistantEcho ======================================================== */
/* ======================================================================== */
struct DistantEcho
{
    struct DistantEcho *Echo;		/* the echo of another event        */
    struct Window *DistantWindow;	/* the Window of some distant event */
    struct Screen *DistantScreen;	/* the Screen of some distant event */
    struct Task   *DistantTask;		/* only for DISTANTPATROL	    */
    USHORT Flags;			/* the Flags of some distant event  */
};


#if 0	/* use one at a time now jimm: 11/19/85 **/
/* these are the DistantEcho defines. */
#define SILENCE			0x0000	/* blissful silence */
#define DISTANTACTIVE		0x0001
#define DISTANTPATROL		0x0002
#define DISTANTSCREENBAR	0x0004
#define DISTANTNEWPREFS		0x0008
#define DISTANTMOVEWINDOW	0x0010
#define DISTANTSIZEWINDOW	0x0020
#define DISTANTWINDOWFRONT	0x0040
#define DISTANTWINDOWBACK	0x0080
#define DISTANTREQSET		0x0100
#define DISTANTREQCLEAR		0x0200
/** jimm: added 11/10/85 **/
#define DISTANTREQEXCEPT	0x0400	/* when new requester is posted */
#else

/* these are the DistantEcho defines. */
#define SILENCE			0
#define DISTANTACTIVE		1
#define DISTANTPATROL		2
#define DISTANTSCREENBAR	3
#define DISTANTNEWPREFS		4
#define DISTANTMOVEWINDOW	5
#define DISTANTSIZEWINDOW	6
#define DISTANTWINDOWFRONT	7
#define DISTANTWINDOWBACK	8
#define DISTANTREQSET		9
#define DISTANTREQCLEAR		10
/** jimm: added 11/10/85 **/
#define DISTANTREQEXCEPT	11
#define DISTANTUSERACTIVE	12
/** jimm: added 7/22/86 **/

#endif



/* ======================================================================== */
/* === SaveRPort ========================================================== */
/* ======================================================================== */
/* this structure is used for saving and restoring the state of the RPort */
/** MODIFY: jimm: 11/7/85: need to save text related fields **/
struct SaveRPort
{
    USHORT APen, BPen, Mode, Mask;
    struct Layer *Layer;
    struct	TextFont	*Font;
    UBYTE	AlgoStyle;
    UBYTE	TxFlags;
    UWORD	TxHeight;
    UWORD	TxWidth;
    UWORD	TxBaseline;
    /* no need for TxSpacing */
};
#define SAVING 0x0001
#define RESTORING 0x0002

/* non-void contents of rastport (for cloning) */
#ifndef RASTPORTUSED
#define RASTPORTUSED (sizeof (struct RastPort) - (7*2 + 2*4 + 8*1))
#endif


/* ======================================================================== */
/* === Preferences Definitions ============================================ */
/* ======================================================================== */

/* various timing rates */
#define KEYREPSEC	0	/* struct timeval KeyRptSpeed == 0.10 Secs */
#define KEYREPMIC 	100000	/* struct timeval KeyRptSpeed */
#define KEYDELSEC	0	/* struct timeval KeyRptDelay == 0.80 Secs */
#define KEYDELMIC	800000	/* struct timeval KeyRptDelay */
#define MOUSEDBLSEC	1	/* struct timeval DoubleClick == 1.50 Secs */
#define MOUSEDBLMIC	500000	/* struct timeval DoubleClick */

/* Intuition Pointer defaults */
#define POINTERX -2		/* BYTE XOffset; */
#define POINTERY -1		/* BYTE YOffset; */
#define COLOR17	0xD22		/* USHORT color17; */
#define COLOR18	0x000		/* USHORT color18; */
#define COLOR19	0xFCA		/* USHORT color19; */
#define POINTERTICKS 2		/* USHORT PointerTicks; */

/* Workbench Screen colors */
#define COLOR0 0x05A		/* USHORT color0; */
#define COLOR1 0xFFF		/* USHORT color1; */
#define COLOR2 0x002		/* USHORT color2; */
#define COLOR3 0xF80		/* USHORT color3; */

/* positioning data for the Intuition View */
#define VIEWX 0			/* USHORT XScreenOffset; */
#define VIEWY 0			/* USHORT YScreenOffset; */

/* miscellaneous */
#define ENABLECLI FALSE		/* BOOL EnableCLI; is FALSE */

/* printer configurations */
#define PRINTERTYPE EPSON	/* USHORT PrinterType; */

/* print format and quality configurations */
#define PRINTPITCH PICA		/* BYTE PrintPitch; of 10 cps */
#define PRINTQUALITY DRAFT	/* BYTE PrintQuality; is draft */
#define PRINTSPACING SIX_LPI	/* BYTE PrintSpacing;  is 6 lpi */
#define PRINTLEFTMARGIN 5	/* FLOAT PrintLeftMargin; */
#define PRINTRIGHTMARGIN 75	/* FLOAT PrintRightMargin; */
#define PRINTINVERSE 0		/* BYTE PrintInverse; is positive */
#define PRINTASPECT 0		/* BYTE PrintAspect; is horizontal */
#define PRINTSHADE 1		/* BYTE PrintShade; is black & white */
#define PRINTTHRESHOLD 2	/* WORD PrintThreshold; is middle */

/* print paper descriptors */
#define PAPERSIZE N_TRACTOR	/* BYTE PaperSize; is U.S. Letter */
#define PAPERWIDTH 9.5		/* FLOAT PaperWidth; */
#define PAPERLENGTH 66		/* FLOAT PaperLength; */
#define PAPERTYPE FANFOLD	/* BYTE PaperType; is fanfold */

/* default name for the disk-based Preferences file */
#define	PREF_FILE	".prefs"


/* ======================================================================== */
/* ======================================================================== */

/* = global INTUITION declarations ======================================== */

/* these are the IBase->Flags definitions */
#define SKIP_WAIT	0x00000001 /* skip the _WAIT on entry to section */
#define DRAGSELECT	0x00000002 /* currently drag-selecting in menus */
#define GADGETON	0x00000004 /* GRELEASE highlighted flag */
#define SAVERMOUSE	0x00000008 /* Save REPORTMOUSE under FOLLOWMOUSE */
#define DEFERRED	0x00000010 /* temp requester refresh flag */
#define COM_SELECT	0x00000020 /* if COMMAND-SELECT is in effect */
#define COM_MENU	0x00000040 /* if COMMAND-MENU is in effect */
#define ITEMDRAWN    	0x00000080 /* if the menu window is currently drawn */
#define SUBDRAWN     	0x00000100 /* if the submenu is currently drawn */
#define INGADGETSTATE	0x00000200 /* ActiveGadget is currently active */
#define INMENUSTATE  	0x00000400 /* Menus are currently being drawn */
#define RELEASED	0x00000800 /* Double-Click button watcher flag */
#define VIRGINDISPLAY	0x00001000 /* Display not opened by anyone yet */
#define GOODITEMDRAWN	0x00002000 /* the item was successfully drawn */
#define GOODSUBDRAWN	0x00004000 /* the subitem was successfully drawn */
/* jimm: 1/15/85: for locking */
#define HAVELAYERINFO	0x00008000 /* Intuition holds a LayerInfo lock	*/
#define SEENSETPREFS	0x00010000 /* seen at least one SetPrefs */
/* bart: 10/19/87 for 1.3 high resolution modes */
#define HEDLEY_HR		0x00020000 /* Scan converter is active */
#define AGNUS_HR		0x00040000 /* AGNUS HighRes mode is active */

/* commands for theIHighGadgeteer */
#define IHIGH_ON	0
#define IHIGH_OFF	1
#define IHIGH_TOGGLE	2


/* key codes */
#define SHIFTY (IEQUALIFIER_LSHIFT|IEQUALIFIER_RSHIFT/*|IEQUALIFIER_CAPSLOCK*/)


/* these are the defines for the setWindow Exception cases */
#define SWE_REQUEST	0x0001	/* the window being set has a requester */
#define SWE_NOACTIVE	0x0002	/* Active Window set to NULL */

/* these are the defines for where to return from GADGET STATE */
#define GRET_RJM	1	/* return to papa */
#define GRET_REQUEST	2	/* return to REQUEST state */
#define GRET_REQGOTTEN	3	/* Non-Select end of some Gadget (String) */
#define GRET_RJMGOTTEN	4	/* Non-Select end of some Gadget (String) */


/* --- these are the defines for return from INTUIWAIT -------------------- */
#define SRET_RJM	1	/* normal heavenly state */
#define SRET_SMENU	2	/* StartMenu state */
#define SRET_MENU	3	/* Menu state */
#define SRET_GSIZING	4	/* Window-Sizing state */
#define SRET_GWDRAG	5	/* Window-Dragging state */
#define SRET_GRELEASE	6	/* in "get Gadget release" state */
#define SRET_REQ	7	/* in Requester state */
#define SRET_GPROP	8	/* in Proportional-Gadget state */
#define SRET_GSDRAG	9	/* Screen-Dragging state */
#define SRET_STRING	10	/* in the middle of a String Gadget */
#define SRET_CANCELMENU 11	/* jes waitin' for the menu button to go up */
#define SRET_GSIZEDRAG  12	/* combines window sizing-dragging  */
#define SRET_NEWSTRING  13	/* programmer activation of string gadget   */

/* --- some menu MACROS --------------------------------------------------- */
#define SETDMENU(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0xFFE0) | (n & 0x1F)
#define SETDITEM(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0xF81F) | ((n & 0x3F) << 5)
#define SETDSUB(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0x07FF) | ((n & 0x1F) << 11)

#define SETSMENU(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0xFFE0) | (n & 0x1F)
#define SETSITEM(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0xF81F) | ((n & 0x3F) << 5)
#define SETSSUB(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0x07FF) | ((n & 0x1F) << 11)


/* these are the defines for which destination is to be used in 
 * multi-destination operations
 */
#define SCREENDEST 0
#define WINDOWDEST 1
#define REQUESTDEST 2


/* This define is for the pauses between blinks during Alerts.  This is
 * how many times Intuition reads the mouse registers before changing the
 * color of the Alert border.  Also, by wild coincidence, 6809 is also
 * the processor that Jack Haeger, Sam Dicker and I, =RJMical=, did
 * Sinistar on, with Noah Falstein and Rich Witt.  
 */
#define ALERT_COUNTDOWN 0x6809


/* these defines are for the Intuition Alert() numbers */
#define NOGRAPHICS (AT_DeadEnd | AN_Intuition | AG_OpenLib | AO_GraphicsLib)
#define NOLAYERS   (AT_DeadEnd | AN_Intuition | AG_OpenLib | AO_LayersLib)

#define BADGADGET  0x04000001	/* AN_GadgetType made RECOVERY as it should */
#define BADSTATE   0x8400000C	/* Bad State Return entering Intuition */
#define BADMESSAGE 0x8400000D	/* Bad Message received by IDCMP */
#define WEIRDECHO  0x8400000E	/* Weird echo causing incomprehension */
#define NOCONSOLE  0x8400000F	/* couldn't open the Console Device */


/* I won't use this ridiculous name */
#define SwapBits SwapBitsRastPortClipRect


/* === Default sizes for the Intuition display ============================ */
/* These are used for creating and manipulating the Intuition displays */
#define MAXDISPLAYHEIGHT	(IBase->MaxDisplayHeight)
#define MAXDISPLAYROWS		(IBase->MaxDisplayRow)
#define MAXDISPLAYWIDTH		(IBase->MaxDisplayWidth)
#define MAXDISPLAYCOLUMNS	(MAXDISPLAYWIDTH - 1)

/* jimm: july 27 1986: MoveSprite error back in. */
#define SPRITEERROR	(-1)

/* ZZZ: stuff added by jimm: */
#define MAXWINDOWLAYERS	5

#define	IUPFRONT 0
#define IBEHIND  1
#define	OTHERWAY(A) (1 - (A))
#define	WHICHONE(I, N, W) ((W)?(I):((N)-1-(I))) /* note that --i is OK */

#define	IUpFront(A, B)	IDepthArrange( (A), (B), IUPFRONT)
#define	IBehind(A, B)	IDepthArrange( (A), (B), IBEHIND)

#define	MAX(A, B)	(((A)<(B))?(B):(A))
#define	MIN(A, B)	(((A)>(B))?(B):(A))
/*******************/

/* get the address of the IntuitionBase */
#if 0
#define fetchIBase()	((struct IntuitionBase *) *((ULONG *)0xD0))
struct IntuitionBase *fetchIBase();
#else
#define fetchIBase()	(IBaseDefine)
extern struct IntuitionBase *IBaseDefine;
#endif

/* converts pointer to an IBox to a Point */
#define upperLeft(A) (*((struct Point *) (A)))

/* these are the defines for the Intuition default Pointer */
#define IPOINTHEIGHT	16
#define IPOINTHOTX	-1
#define IPOINTHOTY	-1

/* She'll always be Karla to me ... */
#define KARLA	"topaz.font"
/*???#define KARLA	"Karla"*/

#endif
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
 *  $Header: intuinternal.h,v 1.19 86/06/13 03:25:17 jimm Exp $
a11 5
 *				Modification History
 *      date    :   author :    Comments
 *     ------       ------      -------------------------------------
 *     3-1-85	    -=RJ=-	created this file!
 *
d14 2
a15 4
/* define this so that IntuitionBase isn't included twice */
#ifndef INTUITION_INTUITIONBASE_H TRUE
#define INTUITION_INTUITIONBASE_H TRUE
#endif
d17 6
a22 6
/* these are the display modes for which we have corresponding parameter
 *  settings in the config arrays
 */
#define DMODECOUNT	0x0002	/* how many modes there are */
#define HIRESPICK	0x0000
#define LOWRESPICK	0x0001
d24 5
a28 202
#define EVENTMAX 10		/* size of event array */

/* these are the system Gadget defines */
#define RESCOUNT	2
#define HIRESGADGET	0
#define LOWRESGADGET	1

#define GADGETCOUNT	8
#define UPFRONTGADGET	0
#define DOWNBACKGADGET	1
#define SIZEGADGET	2
#define CLOSEGADGET	3
#define DRAGGADGET	4
#define SUPFRONTGADGET	5
#define SDOWNBACKGADGET	6
#define SDRAGGADGET	7

/* jimm: 1/10/86: Intuition Locking */
#define ISTATELOCK	0	/* Intuition() not re-entrant		*/
#define	LAYERINFOLOCK	1	/* dummy lock used to check protocol	*/
#define GADGETSLOCK	2	/* gadget lists, refresh, flags		*/
#define LAYERROMLOCK	3	/* (dummy) for lock layerrom		*/
#define	VIEWLOCK	4	/* access to ViewLord			*/
#define IBASELOCK	5	/* protexts IBase pointers and lists	*/
#define RPLOCK		6	/* use of IBase->RP			*/
#define NUMILOCKS	7

/* TmpRas size */
#define ITMPRAS_SIZE	1024

/* ======================================================================== */
/* === Intuition Geometric Primitives ===================================== */
/* ======================================================================== */

struct IBox {
    SHORT Left;
    SHORT Top;
    SHORT Width;
    SHORT Height;
    };

struct Point {
    SHORT X;
    SHORT Y;
    };

struct PenPair {
    UBYTE DetailPen;
    UBYTE BlockPen;
    };

/* ======================================================================== */
/* === Gadget Environments ================================================ */
/* ======================================================================== */

/* environment for a whole list of gadgets. note that information for both
 * layers of a G00 window are included.
 */
struct GListEnv  {
    struct Screen	*ge_Screen;
    struct Window	*ge_Window;
    struct Requester	*ge_Requester;
    struct RastPort	*ge_RastPort;	/* rastport used to render gadget   */
    struct Layer	*ge_Layer;	/* layer for gadget (border, if G00)*/
    struct Layer	*ge_GZZLayer;	/* interior layer for G00 windows   */
    struct PenPair	 ge_Pens;	/* pens for rendering gadget	    */
    struct IBox		 ge_Domain;
			/* window, screen, requester, rel. to window/screen */
    struct IBox		 ge_GZZdims;	/* interior window area		    */
    };

/* information for a gadget in its environment. includes relatively
 * correct size, container for propgadgets, correct layer for this gadget,
 * and back pointers to the environment and gadget itself
 */
struct GadgetInfo  {
    struct GListEnv	*gi_Environ;	/* environment for this gadget 	    */
    struct Gadget	*gi_Gadget;	/* gadget this info is for	    */
    struct IBox		gi_Box;		/* actual dimensions of gadget	    */
    struct IBox		gi_Container;	/* inner container dimensions	    */
    struct Layer	*gi_Layer;	/* correct layer for this gadget    */
    struct IBox		gi_NewKnob;	/* place to draw new slider knob    */
    };

/* ======================================================================== */
/* === IntuitionBase ====================================================== */
/* = DO NOT CHANGE THE SIZE OF THIS WITHOUT ADJUSTING EQUATES IN IWORK.ASM= */
/* = (this is now handled automatically by offsets.c, and 'make' ========== */
/* ======================================================================== */
struct IntuitionBase
/* This is it, the entire database for Intuition internals.
 * I feel so naked!
 */
{
    struct Library LibNode;

    struct View ViewLord;

    struct Window *ActiveWindow;
    struct Screen *ActiveScreen;

    /* the FirstScreen variable points to the frontmost Screen.  Screens are
     * then maintained in a front to back order using Screen.NextScreen
     */
    struct Screen *FirstScreen; /* for linked list of all screens */

    ULONG Flags;	/* see definitions below */
    WORD MouseY, MouseX;	/* mouse position relative to View */

    ULONG Seconds;	/* timestamp of most current input event */
    ULONG Micros;	/* timestamp of most current input event */

    WORD MinXMouse, MaxXMouse;	/* bounded X position for the mouse */
    WORD MinYMouse, MaxYMouse;	/* bounded Y position for the mouse */

    ULONG StartSecs, StartMicros;	/* measure double clicks */

    /* --------------- base vectors ----------------------------------- */
    /* DO MOVE THESE OFFSETS WITHOUT ADJUSTING EQUATES IN IWORK.ASM 
     * this is automatically handled by standalone program offsets.c
     */
    APTR	SysBase;
    struct GfxBase *GfxBase;
    APTR	LayersBase;
    APTR	ConsoleDevice;

    /* --------------- Sprite Pointer --------------------------------- */
    USHORT *APointer;	/* the ActiveGroup pointer sprite definition	*/
    BYTE APtrHeight;	/* height of the pointer */
    BYTE APtrWidth;	/* width in pixels of the pointer (<= 16!)	*/
    BYTE AXOffset, AYOffset; /* sprite offsets */


    /* ---------------- Menu Rendering and Operation ------------------ */
    USHORT MenuDrawn;	/* menu/item/sub number of current display */
    USHORT MenuSelected;/* menu/item/sub number of selected (and highlights)*/
    USHORT OptionList;			/* menu selection	*/

    /* this is the work RastPort used for building item and subitem displays
     *	you can never count on it being stable, other than that it is
     *	mostly a copy of the active screen's RastPort.
     */
    struct RastPort MenuRPort;
    struct TmpRas	MenuTmpRas;
    struct ClipRect ItemCRect; /* for the item's screen display */
    struct ClipRect SubCRect; /* for the subitem's screen display */
    struct BitMap IBitMap; /* for the item's planes */
    struct BitMap SBitMap; /* for the subitem's planes */
			
    /* ---------------- Input Device Interface ------------------------ */
    struct IOStdReq InputRequest;
    struct Interrupt InputInterrupt;

    /* for dynamically allocated input events */
    struct Remember  *EventKey;
    struct InputEvent *IEvents;

    /* for statically "allocated" input events */
#define NUM_IEVENTS 4
    SHORT  EventCount;
    struct InputEvent IEBuffer[NUM_IEVENTS];

    /* ---------------- Active Gadget Information --------------------- */
    struct Gadget *ActiveGadget;
    struct PropInfo *ActivePInfo;
    struct Image *ActiveImage;
    struct GListEnv GadgetEnv;	/* environment of the active gadget	*/
    struct GadgetInfo GadgetInfo;/* specific information for active gadget*/
    struct Point KnobOffset;	/* position in knob of mouse when selected*/

    /* ---------------- Verify Functions Support ---------------------- */
    /* hold information about getOK wait(), used for breakVerify() */
    struct Window *getOKWindow;
    struct IntuiMessage *getOKMessage;

    /* ---------------- State Machine --------------------------------- */
    USHORT setWExcept, GadgetReturn, StateReturn;

    /* ----------- Intuition's Rendering for Gadgets, Titles, ... ----- */
    /* This will be allocated on init */
    struct RastPort	*RP;
    struct TmpRas	ITmpRas;
    struct Region *OldClipRegion;	/* locks with RPort */
    struct Point    OldScroll;		/* user's Scroll_X/Y*/

    /* ----------- Frame Rendering for Window Size/Drag --------------- */
    struct IBox IFrame;	/* window frame for sizing/dragging	*/
    SHORT hthick, vthick;	/* IFrame thickness		*/
    VOID   (*frameChange)();	/* function to change IFrame	*/
    VOID   (*sizeDrag)();	/* either ISizeWindow or IMoveWindow */
    struct Point FirstPt;	/* point from which s/d started */
    struct Point OldPt;		/* previous point for s/d	*/

    /* ---------------- System Gadget Templates ------------------------ */
    struct Gadget *SysGadgets[RESCOUNT][GADGETCOUNT];
    struct Image *CheckImage[RESCOUNT], *AmigaIcon[RESCOUNT];

    /* ---------------- Window Drag Rendering ------------------------- */
#ifdef OLDPATTERN
    USHORT apattern[3], bpattern[4];
#else
    USHORT apattern[8], bpattern[4];
d31 1
a31 5
    /* --- Preferences Section ---------------------------------------------- */
    USHORT *IPointer;	/* the INTUITION pointer default sprite definition */
    BYTE IPtrHeight;	/* height of the pointer */
    BYTE IPtrWidth;	/* width in pixels of the pointer (<= 16!) */
    BYTE IXOffset, IYOffset; /* sprite offsets */
a32 1
    LONG DoubleSeconds, DoubleMicros; /* for testing double-click timeout */
a33 65
    /* ---------------- Border Widths --------------------------------- */
    BYTE WBorLeft[DMODECOUNT];
    BYTE WBorTop[DMODECOUNT];
    BYTE WBorRight[DMODECOUNT];
    BYTE WBorBottom[DMODECOUNT];

    BYTE BarVBorder[DMODECOUNT];
    BYTE BarHBorder[DMODECOUNT];
    BYTE MenuVBorder[DMODECOUNT];
    BYTE MenuHBorder[DMODECOUNT];

    USHORT color0;
    USHORT color1;
    USHORT color2;
    USHORT color3;
    USHORT color17;
    USHORT color18;
    USHORT color19;

    struct TextAttr SysFont;

    /* WARNING:  you can easily wipe out Intuition by modifying this pointer 
     * or the Preference data pointed to by this!
     */
    struct Preferences *Preferences;

    /* ----------------- Deferred action queue ---------------------- */
    struct DistantEcho *Echoes;

    WORD ViewInitX, ViewInitY;	/* View initial offsets at startup   */

    SHORT CursorDX, CursorDY;	/* for accelerating pointer movement */

    struct KeyMap *KeyMap;	/* for the active String Gadget */
    
    SHORT MouseYMinimum;	/* magic	*/

    SHORT ErrorX, ErrorY;	/* for retaining mouse movement round-off */
    
    struct timerequest IOExcess;

    SHORT HoldMinYMouse;

    struct MsgPort *WBPort, *iqd_FNKUHDPort;
    struct IntuiMessage WBMessage;
    struct Screen *HitScreen;	/* set by hitUpfront() routine */

    /** jimm:dale: 11/25/85, thought we'd take a chance for glory **/
    struct SimpleSprite *SimpleSprite;
    struct SimpleSprite *AttachedSSprite;
    BOOL	GotSprite1;

    /** jimm: 1/6/86: Intuition contention **/
    struct List 		SemaphoreList;	/* chain of the below */
    struct SignalSemaphore	ISemaphore[NUMILOCKS];

    WORD	MaxDisplayHeight;	/* in interlaced mode: 400 or 512 */
    WORD	MaxDisplayRow;		/* MaxDisplayHeight - 1		  */

    ULONG	Reserved[8];	/* cause one never know, do one? */
};

#define	SIMPLESPRITES	1	/* i said glory, but with a loophole */


d42 1
a42 1
    struct Tast   *DistantTask;		/* only for DISTANTPATROL	    */
d78 2
d124 1
a124 1
#define POINTERX -1		/* BYTE XOffset; */
d191 4
d284 1
a284 1
#define MAXDISPLAYWIDTH		640
d286 3
@
