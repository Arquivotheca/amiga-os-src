head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     91.04.24.20.54.13;  author peter;  state Exp;
branches ;
next     1.5;

1.5
date     89.09.21.21.01.09;  author jimm;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.22.13.49.43;  author jimm;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.21.17.21.01;  author jimm;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.21.13.42.53;  author root;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.21.13.08.21;  author jimm;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@Changed $Header to $Id.
@
text
@/* special.h -- wack extensions common include */
/* $Id: /usr2/peter/wack/RCS/special.h,v 1.5 89/09/21 21:01:09 jimm Exp Locker: peter $	*/

typedef void (*voidfunc)();

/* amiga core address for field in sun-buffered structure */
#define CADDR(base, buffer, field) 	\
    ( (ULONG) (base) + ((ULONG) (field) - (ULONG) (buffer)) )

APTR GetMemL();
APTR FindBase();

#define REFRESH flags = -1;

#define IBADDR(a) ((APTR) ((ULONG) (a) - (ULONG)(&IBase) + (ULONG)(ibase)))

/* builds callers to dumpT(addr, ptr) where T is an exec node */
#define SHOWMIN(T) \
	Show/**/T(arg) char *arg; \
	{ struct T *w;ULONG dump/**/T(); if (AddrArg(arg, &w)) { printf("\n");\
	doMinNode(w, sizeof (struct T), dump/**/T); }\
	else puts("\nbad syntax"); }\
	\
	Show/**/T/**/List(arg) char *arg; \
	{ struct T *w;ULONG dump/**/T(); if (AddrArg(arg, &w)) { printf("\n");\
	WalkMinList(w, sizeof (struct T), dump/**/T); }\
	else puts("\nbad syntax"); }


/* builds callers to dumpT(addr, ptr) where T is not a node	*/
#define SHOWONE(T) \
	Show/**/T(arg) char *arg; \
	{ struct T *w;ULONG dump/**/T(); if (AddrArg(arg, &w)) { printf("\n");\
	doMinNode(w, sizeof (struct T), dump/**/T); }\
	else puts("\nbad syntax"); }

/* builds callers to dumpT(addr, ptr) where T is a node in a linked list */
#define SHOWSIMPLE(T) \
	Show/**/T(arg) char *arg; \
	{ struct T *w;ULONG dump/**/T(); if (AddrArg(arg, &w)) { printf("\n");\
	doMinNode(w, sizeof (struct T), dump/**/T); }\
	else puts("\nbad syntax"); }\
	\
	Show/**/T/**/List(arg) char *arg; \
	{ struct T *w;ULONG dump/**/T(); if (AddrArg(arg, &w)) { printf("\n");\
	WalkSimpleList(w, sizeof (struct T), dump/**/T); }\
	else puts("\nbad syntax"); }

#if 0 	/* Here's what an example looks like	*/

SHOWSIMPLE( Window ) yields:

ShowWindow(arg)
char	*arg;
{
    struct Window	*w;

    ULONG	dumpWindow();
    if (AddrArg(arg, &w))
    {
	printf("\n");
	doMinNode( w, sizeof (struct Window), dumpWindow);
    }
    else puts("\nbad syntax");
}

ShowWindowList(arg)
char	*arg;
{
    struct Window	*w;

    ULONG	dumpWindow();
    if (AddrArg(arg, &w))
    {
	printf("\n");
	WalkSimpleList( w, sizeof (struct Window), dumpWindow);
    }
    else puts("\nbad syntax");
}

these call dumpWindow(APTR arg, struct Window *window);

#endif
@


1.5
log
@server compile and re-checkin
@
text
@d2 1
a2 1
/* $Header: $	*/
@


1.4
log
@added new macro SHOWONE(Type)
@
text
@d2 1
@


1.3
log
@just setting things up
@
text
@d16 1
d29 8
@


1.2
log
@kodiak's copy of jimm's version, snapshot jan 21
@
text
@d39 35
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
unsigned long FindBase();
d12 1
a12 1
#define REFRESH() (flags = -1)
@
