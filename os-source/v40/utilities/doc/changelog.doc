
	RCS utility shell scripts			Jim Mackraz
	----------------------------------------------------------
			posted 9/21/89

    INTRODUCTION

    This file documents a suite of shell scripts to help with
    RCS.  They have a few key benefits:

    1) They provide "batch" checkin, so the RCS program 'ci' doesn't
	have to start and start again.

    2) They provide a 'diff' file so that you can see the changes you've
	made while you are writing your release notes or checkin comments.

    3) They have an optional locking scheme that allows two people
	to work on the same module.

    NOTE: THESE SCRIPTS REQUIRE THAT YOU HAVE A $Header: $ LINE
    IN EVERY SOURCE FILE.

	-------------------------------------------

    THE COMMAND SCRIPTS

    changelog - prepares a log file listing changes to a source directory

    difflog - creates massive rcsdiff file for files listed in a log file

    cilog - checks in all changes listed in a log file

    unlocklog - declares that you are completed with a log file made
	by changelog, if you use the "session lock" option

	-------------------------------------------

    COMMAND PARAMETERS

    All of the scripts use several parameters which follow this rule:

	command line parameters override ...
	environment parameters which override ...
	default values burned in the scripts.

    The command switches (where applicable) are:

    command switch:		environment variable:		default:
	-d				RCSDIR			 ./RCS
	-l 				RCSLOCK			RCSLock
	-f				RCSLOG			Log
	-u
	-D				RCSDBUG

    -d  specifies where the RCS files are.  The source files are assumed to
	be in the current directory.

    -l	name of the file in the RCS directory which serves as the lock
	which protects the validity of the log file until you are done
	with it (see LOCKING, below)

    -f	name of the logfile.

    -u  unlock, i.e., do not use locking protocol

    -D turn debugging on

	-------------------------------------------

    THE LOG FILE

    The logfiles created by changelog and used by the other utilities
    list files which should be checked in to RCS, or have conflicts.

    The first line of the file is status information, and subsequent lines
    look something like this:

		Makefile CHANGED 36.38

    This means that Makefile has changed since it's last checked in 
    revision, 36.38.  This file should be checked in.

    The possible "keywords" are:

    CHANGED	-	the file has changed, but is consistent
    MISSING	-	this file must be new, and should be checked in
    NEWVERSION	-	since you last checked the file out, somebody
			else has made changes and bumped the revision
			number.  Fortunately, you haven't changed
			your copy, but you should know about it.
    CONFLICT	-	Like NEWVERSION, except this time you made
			some changes yourself.  You must examine
			the file's conflicts by hand, and make it right.

	-------------------------------------------

    TYPICAL SESSION

	This scheme assumes that after a checkin, you have all the
	source files checked out *unlocked*, which means without
	write permission.

	What you do is manually 'chmod 666' the files you want to
	work on.  I always realize this AFTER I've done some editing,
	so I have a function key in 'vi' which does this:

			    :!chmod 666 %
			    :se noro
			    :w

	It is supposed to be "wrong" to change an unlocked file, but
	doing so is important to the "loosly coupled multi-person
	project" and it works great, anyway.

	    +++++++++++++++++++++++++++++++++++++++++++

	When I want to check in, I say 'make Log', and my makefile has
	this:
		RCSLOG=Log

		$(RCSLOG): $(RCSFILES)
			changelog  -u -f $(RCSLOG) $(RCSFILES)

	This creates a changlog log file for my module.  Note that
	changelog will only test for changes in the files which have
	write permission, assuming that you haven't changed something
	that is still write protected.

	    +++++++++++++++++++++++++++++++++++++++++++

	I run difflog to get a big diff file, with files clearly
	separated:
		difflog >Diffs

	    +++++++++++++++++++++++++++++++++++++++++++

	I say 'more Diffs' in one window and write up my release notes
	in another window.  Release notes are all stashed away
	in a special directory, and posted to amiga.release.

	    +++++++++++++++++++++++++++++++++++++++++++

	I then check everything in by saying 'cilog'.

	Starting a fresh 'more Diffs' shows me what has changed on
	a file-by-file basis as an aid in making reasonable checkin
	comments, as prompted in the 'cilog' process.

	    +++++++++++++++++++++++++++++++++++++++++++

	If using session locking (below), I release the
	lock on the RCS logfile system by saying 'unlocklog'.

	    +++++++++++++++++++++++++++++++++++++++++++

	make internal.

	    +++++++++++++++++++++++++++++++++++++++++++

    LOCKING

	As you can see from the above, the validity of the logfile's
	declaration of conflicts needs to be insured until you are
	done using it, in case someone else tries to invoke a
	changelog session and check in behind your back.

	Changelog inusres this by checking out the RCSLock file in the
	RCS directory.  This makes a dummy RCSLock,v in your RCS directory. 

	Unless used with the -u option, changelog will refuse to run
	on a directory unless it can check out (locked) the RCSLock file.

	The script 'unlocklog' simply checks RCSLock back in.

	-------------------------------------------

    BUGS

	NEWVERSION not checked for files which are still read-only.

	RCS's checkin command, ci, works for multiple files, but
	if you end a checkin comment with ^D (rather than '.'), it
	will blow through all the remaining files without allowing
	you to add comments.

