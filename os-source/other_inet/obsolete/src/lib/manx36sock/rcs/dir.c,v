head     1.2;
branch   ;
access   ;
symbols  Release1:1.1;
locks    ; strict;
comment  @ * @;


1.2
date     91.04.03.10.57.09;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.26.21.52.08;  author martin;  state Exp;
branches ;
next     ;


desc
@   
@


1.2
log
@added autodocs
made more compatible wwith Unix
still needs work to be XPG compat.
@
text
@
/*
** Unix compatible directory routines for the Amiga.
*/

/****** socket/opendir ******************************************
*
*   NAME
*		opendir -- opens a directory
*
*   SYNOPSIS
*		#include <sys/types.h>
*		#include <sys/dir.h>
*
*		dirp = opendir( dirname )
*
*		DIR *opendir (char *); 
*
*   FUNCTION
*		Opens the named directory and returns a pointer to the
*		directory stream.  
*
*   INPUTS
*		dirname		name of the directory
*
*   RESULT
*		Returns a pointer to the directory stream if successful.
*		Returns NULL if dirname cannot be accessed.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*		readdir(), rewinddir(), closedir()
*
******************************************************************************
*
*/

#include <sys/types.h>
#include <sys/dir.h>

#include <libraries/dos.h>

/*
** fib must come first as it is supposed to be longword aligned.
*/
struct directory {
	struct direct d;		/* what Unix application sees	*/
	struct FileInfoBlock fib;	/* FIB we'll use		*/
	long lock;			/* lock associated with dir	*/
};

#define MAKENT(dp)\
	dp->d.d_name = dp->fib.fib_FileName;\
	dp->d.d_namelen = strlen(dp->d.d_name);\
	dp->d.d_ino = dp->fib.fib_DiskKey;


DIR *opendir(path)
	char	*path;
{
	register struct directory *dp;
	extern void *malloc();
	long Lock(), lk;

	if(!(lk = Lock(path, ACCESS_READ))){
		return NULL;
	}
	if(dp = (struct directory *)malloc(sizeof(*dp))){
		if(!Examine(lk, &dp->fib)){
			free(dp);
			return NULL;
		}
		dp->lock = lk;
		MAKENT(dp);
	}

	return (DIR *)dp;
}


/****** socket/readdir ******************************************
*
*   NAME
*		readdir -- reads a directory
*
*   SYNOPSIS
*		#include <sys/types.h>
*		#include <sys/dir.h>
*
*		next_dir = readdir( dirp )
*
*		struct direct *readdir (DIR *); 
*
*   FUNCTION
*		returns a pointer to the next directory entry.
*
*   INPUTS
*		dirp	directory stream from opendir().
*
*   RESULT
*		Returns a pointer to the next directory entry if successful.
*		Returns NULL on end of directory.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*		opendir(), rewinddir(), closedir()
*
******************************************************************************
*
*/

struct direct *readdir(dp)
	DIR *dp;
{
	if(!ExNext(((struct directory *)dp)->lock, &((struct directory *)dp)->fib)){
		return 0;
	}

	MAKENT(((struct directory *)dp));
	return dp;
}


/****** socket/rewinddir ******************************************
*
*   NAME
*		rewinddir -- set position in directory back to beginning.
*
*   SYNOPSIS
*		#include <sys/types.h>
*		#include <sys/dir.h>
*
*		result = rewinddir( dirp )
*
*		int rewinddir (DIR *); 
*
*   FUNCTION
*		Sets the position in the directory stream back to the beginning.
*
*   INPUTS
*		dirp	directory stream from opendir().
*
*   RESULT
*		Returns -1 if unsuccessful.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*		readdir(), opendir(), closedir()
*
******************************************************************************
*
*/


int
rewinddir(dp)
	DIR *dp;
{
	return Examine(((struct directory *)dp)->lock, &((struct directory *)dp)->fib)==0 ? -1:0;
}


/****** socket/closedir ******************************************
*
*   NAME
*		closedir -- closes a directory stream
*
*   SYNOPSIS
*		#include <sys/types.h>
*		#include <sys/dir.h>
*
*		result = closedir( dirp )
*
*		int closedir (DIR *); 
*
*   FUNCTION
*		Closes the named directory stream.
*
*   INPUTS
*		dirp	directory stream from opendir().
*
*   RESULT
*		Returns 0.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*		readdir(), rewinddir(), opendir()
*
******************************************************************************
*
*/


int
closedir(dp)
	DIR *dp;
{
	UnLock(((struct directory *)dp)->lock);
	free(dp);
	return 0;
}
@


1.1
log
@Initial revision
@
text
@d1 1
d6 37
d71 1
a71 1
		return 0;
d76 1
a76 1
			return 0;
d85 39
a123 2
DIR *readdir(dp)
	struct directory *dp;
d125 1
a125 1
	if(!ExNext(dp->lock, &dp->fib)){
d129 2
a130 2
	MAKENT(dp);
	return (DIR *)dp;
d133 37
d172 1
a172 1
	struct directory *dp;
d174 1
a174 1
	return Examine(dp->lock, &dp->fib)==0 ? -1:0;
d177 37
d216 1
a216 1
	struct directory *dp;
d218 1
a218 1
	UnLock(dp->lock);
@
