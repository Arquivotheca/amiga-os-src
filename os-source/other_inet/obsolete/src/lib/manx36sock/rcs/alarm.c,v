head     1.2;
branch   ;
access   ;
symbols  Release1:1.1;
locks    ; strict;
comment  @ * @;


1.2
date     91.04.03.10.40.12;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.26.21.49.59;  author martin;  state Exp;
branches ;
next     ;


desc
@   
@


1.2
log
@fixed timer aborting
@
text
@/*
** Emulation of Unix alarm() function. The idea is to have the process
** Wait(1L<<_alarm_timerbit) somewhere in its main loop.
*/

#include <exec/types.h>
#include <devices/timer.h>

int _alarm_timerbit;

alarm(val)
	int	val;
{
	static struct timerequest tr;
	static int on;

	if(val && !on){
		bzero(&tr, sizeof(tr));
		tr.tr_node.io_Message.mn_Node.ln_Type = NT_MESSAGE;
		tr.tr_node.io_Message.mn_Length = sizeof(tr);
		tr.tr_node.io_Message.mn_ReplyPort = CreatePort(0L, 0L);
		_alarm_timerbit = tr.tr_node.io_Message.mn_ReplyPort->mp_SigBit;
		if (OpenDevice(TIMERNAME, UNIT_VBLANK, &tr, 0L)) {
			DeletePort(tr.tr_node.io_Message.mn_ReplyPort);
			return -1;
		}
		on=1;
	}

	if(val==0 & on){
		AbortIO(&tr);
		WaitIO(&tr);
		SetSignal(0, 1L<<_alarm_timerbit);
	
		CloseDevice(&tr);
		DeletePort(tr.tr_node.io_Message.mn_ReplyPort);
		on = 0;
	}

	if(val && on){
		if(on==2) {
			AbortIO(&tr);
			WaitIO(&tr);
			SetSignal(0, 1L<<_alarm_timerbit);
		}

		tr.tr_node.io_Command = TR_ADDREQUEST;
		tr.tr_time.tv_secs = val;	
		tr.tr_time.tv_micro = 0;
		SendIO(&tr);
		on=2;
	}
}

@


1.1
log
@Initial revision
@
text
@a7 1
#include <bstr.h>
a13 1
	extern struct MsgPort *CreatePort();
d24 1
d27 1
a27 1
		on++;
d31 3
a33 6
		if(!CheckIO(&tr)){
			if(!AbortIO(&tr)){
				WaitIO(&tr);
			}
			SetSignal(0, 1L<<_alarm_timerbit);
		}
d41 3
a43 4
		if(!CheckIO(&tr)){
			if(!AbortIO(&tr)){
				WaitIO(&tr);
			}
d51 1
@
