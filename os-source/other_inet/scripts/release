.key ProgramName/a,maker
.bra {
.ket }
if EXISTS RCS_locks.log
	execute RCS_locks.log	;release locks
	delete  RCS_locks.log
else
	echo "Building a new release, but I don't know about any changed files"
endif
;
;make the new release (with a new version number)
;
co -l {ProgramName}_rev.rev

{maker$make} bump	    ;bump the revision number
{maker$make} {ProgramName}  ;recompile with new revision number
{maker$make} release	    ;copy binaries to whereever they need to go

ci -u {ProgramName}_rev.rev
;
;give a symbolic name for this release to the current RCS versions
;
;copy RCS_link env:ReleaseTemp
;?????  	;delete HOGNET: from front of ReleaseTemp
;copy {ProgramName_rev.rev} env:ReleaseTemp2
;freezer $ReleaseTemp $ReleaseTemp2
;delete env:ReleaseTemp env:ReleaseTemp2 QUIET

;Release a network program/library.  Takes as an argument the ProgramName
;to release and a make program (defaults to 'make', but you might want 'lmk').
;Your makefile (or lmkfile) must have as targets at least: ProgramName,
;'bump' and 'release.'  You must be using 'col' to get locks on any files
;which you edit.
;
;If you get an error during a make, you will want to unlock the
;ProgramName_rev files.  You can do so with "rcs -u ProgramName_rev.XXX"
;
