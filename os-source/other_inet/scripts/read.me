Network Group Source Control/Development Environment Standards

You need the following assigns on your Amiga (see HOGNET:scripts/assigns):
server 		HOGNET:	heartofgold:/usr/commodore/amiga/Other/inet
local source	NETSRC:	your (partial) local copy of HOGNET:
standard header	NETINC:	NETSRC:include_external
inet.lib header	LIBINC:	NETSRC:include_internal
where bins go	NETBIN:	HOGNET:bin
where libs	NETLIB:	NETSRC:bin/lib

HOGNET:src and it's subdirectories should contain only RCS files.  Every
directory in NETSRC: needs an RCS_link file to the appropriate RCS directory
on HOGNET: (i.e. NETSRC:src/c/finger/RCS_link should contain
"HOGNET:src/c/finger/RCS/\n").  We should have a script to set up a new
NETSRC:, but so far I haven't come up with an easy way to do it which hasn't
been thwarted by a bug or deficiency in AmigaDOS.  NETSRC: should probably
contain only src, include_external, bin and possibly (depending on what you
are woking on) doc and include_internal.  I've created one by hand for you
to copy (copy HOGNET:scripts/src_tree to whereever).

When important changes are made to HOGNET:bin/lib, HOGNET:include_external,
HOGNET:include_internal, email should be sent to net (martin, bj, dlarson,
netarch@prodigal) so that we can refresh our local copies.  The script
irefresh (INClude REFresh) will refresh HOGNET:bin/lib and
HOGNET:include_external (but NOT HOGNET:include_internal) for you.

When you want to work on a program, refresh your local copy of the sources
with the refresh script (see below).  The files will all be write protected.
Before you edit any of the files, lock them with the col script (see below).
This prevents other people from making changes to that file, and give you
write access.  When you make changes you want to keep (but which still need
more work), check them into the server (with ci -l filename).  When you are
done making changes (such that you have a stable release), use the release
script (see below) to do the necessary work to generate a release.
---
irefresh [options]

Refreshes local external includes and libraries from the server.  You must
have the standard assigns.  You must have a proper directory tree, including
RCS_link files.

If you get a warning about a writeable file, something is wrong.  Use "rlog
filename" on the file with the error -- you've probably got a lock on that
file, but you might have set locking to non-strict or done something else
naughty.

Options:
Use "-sStab" to get the most recent stable includes.
Use "-dSomeDate" to get the includes current as of SomeDate.
Use "-rrev" to get the includes with the revision number (either RCS
revision number or one of our symbolic revision names) "rev."

---
refresh [pattern] [options]

Refreshes file(s) in the current dir from the server or from the RCS dir.  You
must have the standard assigns if from the server.  If it belongs on the
server, you should not have a local RCS dir and must have an RCS_link file.
The default is to refresh everything but .info files (which probably shouldn't
be in an RCS directory anyway) and dot files (i.e. .rcsfreeze.log).

If you get a warning about a writeable file, something is wrong -- use "rlog
filename" on the file with the error -- you've probably got a lock on that
file, but you might have set locking to non-strict or done something else
naughty.

Use "-sStab" to get the most recent stable includes.
Use "-dSomeDate" to get the includes current as of SomeDate.
Use "-rrev" to get the includes with the revision number (either RCS
revision number or one of our symbolic revision names) "rev."

---
col filename

You must lock a file before editing it.  Use "col filename." to lock a
file.  This not only locks the file, but adds it to the "RCS_locks.log" file
which is used by 'release.'
---
release programname [maker]

1) uses "RCS_locks.log" to check in all locked files with "ci -sStab -u
filename"
2) locks bump_rev stuff
3) calls the bump target in your make file.
4) calls the ProgramName target
5) calls the release target (which should copy new binary to where it belongs)
*6) calls 'freezer' to give a symbolic name to your release

Item 6 is not completed.  For now, once you've done a release, also do
something like:
"freezer src/c/finger TheNumberInThe-ProgramName_rev.rev-File"
---
To update server (though you are continuing to work)

It is highly desireable to check in files you are working on at least daily
in order to provide for backups and in case you want to back out some
revisions.

If you want to check in work you've done even though you aren't finished,
use "ci -l filename."  If the file you are checking in is stable, but you
are going to make additional modifications, use "ci -l -sStab filename."
---
edit

You may want to have your own editing script which looks at the lock file,
locks the file if necessary, edits the file, then checks in the file
(retaining a lock, however).  Using this script for all source editing allows
you not to worry about locks and about backups.  You should not, however, use
it as a way to put off releases.  You should make a release as soon as you
have a stable configuration.
---
What if I decide to back out a change?

If you col a file, edit for a while, then decide you really don't want to
change anything, you can "rcs -u FileName" and delete the line for FileName
from the RCS_locks.log file.  If you checked in the file since obtaining your
original lock, you also need to outdate (rcs -o) all the revision numbers
since your