
Why a shared socket library?

A shared library provides many benefits.  First, it greatly
reduces code size.  Second, it is compiler-independent.  However, the
most important benefit is that it is easily upgradable.  New libraries
with bug fixes, speed improvements, or additional functions can be
utilized by existing code without recompilation.  In the case of the
socket library, this means we can later add support for name resolution,
better configuration, DES, etc.

Who should use this?

Everyone.  The link socket library that received very limited
distribution is obsolete.

Our primary goal in writing this socket library is compatibility.
BSD, SVR4, X/Open, POSIX and OSF sources have been consulted when
necessary.  All standard Unix socket functions, with all their
peculiarities have been faithfully ported :^)  Unfortunately, due
to the fact that these functions were not designed with shared
libraries or the Amiga in mind, some compromises were made.

Now, in order to be compatible, all that has to be done is to
open socket.library and call setup_sockets().


/* your includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/execbase.h>
#include <dos/dos.h>
#include <proto/all.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <errno.h>

/* the next two lines must always be here */
#include <ss/socket.h>
struct Library *SockBase ;

/* this is the maximum number of sockets that you want */
#define MAXSOCKS 10

main()
{

	if((SockBase = OpenLibrary( "inet:libs/socket.library", 1L )) == NULL) {
		printf("Error opening socket.library\n");
		Exit(10);
	}

	setup_sockets( MAXSOCKS, &errno );

	/* normal socket code ... */


	cleanup_sockets();
	CloseLibrary( SockBase ) ;

}


The final minor compatibility problem is the s_close() function.
This must always be used to close sockets.  It can't be #define'd
because most C compilers already have a close() function.  Be careful
to always use s_close() only on sockets and close() only on files.

For a similar reason, the ioctl() function is named s_ioctl().

This same problem is the reason why read() and write() are not
included in the library. Use send() and recv() instead.

