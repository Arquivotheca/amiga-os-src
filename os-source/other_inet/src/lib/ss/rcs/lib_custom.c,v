head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     92.07.21.15.41.33;  author bj;  state Exp;
branches ;
next     1.2;

1.2
date     91.08.06.16.51.26;  author bj;  state Exp;
branches ;
next     1.1;

1.1
date     91.07.02.12.14.24;  author martin;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Now requires inet.library >= 5.0.
NULLs out library bases upon closure.
This was used in socket.library 4.0 and greater. AS225 R2.
@
text
@/* -----------------------------------------------------------------------
 * lib_custom.c
 *
 * $Locker:$
 *
 * $Id:$
 *
 * $Revision:$
 *
 * $Log:$
 *
 * $Header:$
 *
 *------------------------------------------------------------------------
 */
/*
 * Library startup & init
 *
 * July 24, 1992    upped requested inet.library to versions >= 5.0
 */

#include "sslib.h"

BOOL __saveds __asm CustomLibOpen(register __a6 struct SocketLibrary *libbase);
void __saveds __asm CustomLibClose(register __a6 struct SocketLibrary *libbase);

struct ExecBase *SysBase = NULL;
struct DOSBase  *DOSBase = NULL;
struct InetNode *InetBase = NULL;
struct SocketLibrary *SockBase = NULL;
struct Library *UtilityBase = NULL;

extern struct config *init_config(int) ;

BOOL __saveds __asm CustomLibOpen(register __a6 struct SocketLibrary *lib)
{

	SockBase = lib;

	SysBase = (struct ExecBase *)(*((ULONG *)4));

		/* need this for 68040 */
    if(SysBase->LibNode.lib_Version >= 37) 
	{
		CacheClearU();
	}

	if(DOSBase = (struct DOSBase *)OpenLibrary("dos.library", 37L)) 
	{
		if(UtilityBase = (struct Library *)OpenLibrary("utility.library", 0L))
		{
			if(InetBase = (struct InetNode *)OpenLibrary("inet:libs/inet.library", 5L))
			{
				if(lib->ml_origbase->ml_config != NULL )
				{
					return(TRUE) ;
				}
				else
				{
					GETCONFIG(SockBase->ml_origbase->ml_config) ; /* this ultimately goes out! */
					if( SockBase->ml_origbase->ml_config == NULL) 
					{
						SockBase->ml_origbase->ml_config = init_config( 0 ) ;
						if(SockBase->ml_origbase->ml_config)
						{
							return(TRUE) ; 
						}
					}
				}             
				CloseLibrary((struct Library *)InetBase);
				InetBase = NULL;
			}
			CloseLibrary(UtilityBase);
			UtilityBase = NULL;
		}
		CloseLibrary(DOSBase);
		DOSBase = NULL;
	}
	return (FALSE);
}


void __saveds __asm CustomLibClose(register __a6 struct SocketLibrary *lib)
{
	/* close inet.library.  Inet.library will not currently expunge */

	if (InetBase)
		CloseLibrary((struct Library *)InetBase);

	if (UtilityBase)
		CloseLibrary((struct Library *)UtilityBase);

	if(DOSBase)
		CloseLibrary((struct Library *)DOSBase);
}
@


1.2
log
@init_config() call added to this function so that
the first opener forces a call to init_config().
Also, a pointer to the config structure in memory
was added to the library base.
@
text
@d1 15
d18 2
a21 9
#include <exec/types.h>
#include <exec/alerts.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <exec/semaphores.h>
#include <dos/dosextens.h>
#include <dos.h>
#include <proto/exec.h>
#include <proto/dos.h>
a22 2
#define INTERNAL_USE 1
#include <config.h>
d52 1
a52 1
			if(InetBase = (struct InetNode *)OpenLibrary("inet:libs/inet.library", 0L))
d71 1
d74 1
d77 1
a78 1

@


1.1
log
@Initial revision
@
text
@d9 2
d14 3
d27 2
d36 5
a40 2
	/* need this for 68040 */
    if(SysBase->LibNode.lib_Version >= 37) CacheClearU();
d42 4
a45 2
	if(DOSBase = (struct DOSBase *)OpenLibrary("dos.library", 37L)) {
		if(UtilityBase = (struct Library *)OpenLibrary("utility.library", 0L)){
d47 19
a65 1
				return(TRUE);
d78 1
@
