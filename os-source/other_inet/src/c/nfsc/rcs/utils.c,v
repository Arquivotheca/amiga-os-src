head     1.4;
branch   ;
access   ;
symbols  Release1:1.1 R1:1;
locks    ; strict;
comment  @ * @;


1.4
date     92.10.07.14.10.11;  author bj;  state Exp;
branches ;
next     1.3;

1.3
date     91.08.06.16.09.12;  author martin;  state Exp;
branches ;
next     1.2;

1.2
date     91.05.22.13.36.05;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.12.15.53.20;  author bj;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@header change
@
text
@/* -----------------------------------------------------------------------
 * utils.c  nfsc  SAS
 *
 * $Locker:  $
 *
 * $Id: utils.c,v 1.3 91/08/06 16:09:12 martin Exp $
 *
 * $Revision: 1.3 $
 *
 * $Header: as225:src/c/nfsc/RCS/utils.c,v 1.3 91/08/06 16:09:12 martin Exp $
 *
 *------------------------------------------------------------------------
 */



/*
 * various utilities
 */

#include "fs.h"

#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <rpc/types.h>
#include <string.h>

void
bst_to_comm(bst, str)
	char	*bst;
	char	*str;
{
	u_char i, outlen;

	bst = btod(bst, char *);
	outlen = (u_char) *bst;
	bst++;

	for (i=0; i < outlen; i++ ) {
		str[i] = *bst;
		bst++;
	}
	str[outlen] = '\0';
}

struct MsgPort	*CreateMyPort (void)
{
	struct	MsgPort	*port;
	extern BYTE nfs_signal;

	port = (struct MsgPort *)AllocMem(sizeof(struct MsgPort), MEMF_PUBLIC | MEMF_CLEAR);
	if (port == 0) {
		return 0;
	}

	port->mp_Node.ln_Name = 0;
	port->mp_Node.ln_Pri = 1;
	port->mp_Node.ln_Type = NT_MSGPORT;
	port->mp_Flags = PA_SIGNAL;
	port->mp_SigBit = nfs_signal;
	port->mp_SigTask = (struct Task *)FindTask(0L);

	NewList(&(port->mp_MsgList));

	return (port);
}

void DeleteMyPort (struct MsgPort *port)
{
	port->mp_SigTask = (struct Task *) -1;
	port->mp_MsgList.lh_Head = (struct Node *) -1;
	FreeMem(port,(ULONG)sizeof(struct MsgPort));
}



/*
 * Catch fprintf from RPC library
 */
void fprintf(f, fmt, a, b, c, d, e)
{
	(void)requester(0L, " OK ", fmt, a, b, c, d, e);
}

/*
 * Catch abort from RPC library
 */
/*
abort()
{
	requester(0L, " OK ", "NFSc: fatal error: giving up");
	cleanup(1);
}
*/
@


1.3
log
@major revision. Uses 2.0 functions.
@
text
@d6 1
a6 1
 * $Id: utils.c,v 1.1 90/11/12 15:53:20 bj Exp $
d8 1
a8 1
 * $Revision: 1.1 $
d10 1
a10 1
 * $Header: inet2:src/c/nfsc/RCS/utils.c,v 1.1 90/11/12 15:53:20 bj Exp $
@


1.2
log
@cleaned up for SAS compile
@
text
@d21 2
d27 1
a27 16
#include <rpc/rpc.h>
#include <nfs/nfs.h>
#include <errno.h>

#include <exec/types.h>
#include <exec/memory.h>
#include <exec/exec.h>
#include <devices/timer.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>

#include "fs.h"

#ifdef LATTICE
#include <clib/exec_protos.h>
#endif
a28 15
extern  struct DosLibrary *DOSBase;

/* global functions */
void bst_to_comm (char *bst, char *str);
void inf_sttobs(char *p);
struct MsgPort *CreateMyPort (void);
void DeleteMyPort (struct MsgPort *port);
BSTR sttobs(char *p);
void fprintf();

/* external functions */
BOOL requester(UBYTE *positive, UBYTE *negative, char *fmt, ...);



d47 1
a47 15

void inf_sttobs(p)
	char	*p;
{
	int	len, i;

	for (i = len = strlen(p); i >0; i--){
		p[i] = p[i-1];
	}
	p[0] = (u_char) len;
	p[len+1] = '\0';
}

struct MsgPort	*
CreateMyPort ()
d50 1
a50 3
	register struct List *l;
	extern int nfs_signal;
	extern void *calloc();
d64 1
a64 4
	l = &port->mp_MsgList;
	l->lh_Head = (struct Node *)&l->lh_Tail;
	l->lh_TailPred = (struct Node *)&l->lh_Head;
	l->lh_Tail = 0;
d66 1
a66 1
	return port;
d69 1
a69 3
void
DeleteMyPort (port)
	struct	MsgPort	*port;
d71 3
a73 3
	port->mp_Node.ln_Type = 0xff;
	port->mp_MsgList.lh_Head = (struct Node *)-1;
	FreeMem(port,sizeof(struct MsgPort));
a75 15
/*
 * Convert C string to Amiga BSTR
 */
BSTR sttobs(p)
	char	*p;
{
	int	len = strlen(p);
	char	*r;

	if(!(r = (char *)AllocMem(len+2,MEMF_PUBLIC))){
		return 0;
	}
	r[0] = len; 
	bcopy(p, &r[1], len);
	r[len+1]='\0';		/* null terminate (MMH) */
a76 2
	return ((BSTR)(((long)r)>>2));
}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * utils.c  nfsc  manx36
d4 1
a4 1
 * $Locker$
d6 1
a6 1
 * $Id$
d8 1
a8 1
 * $Revision$
d10 1
a10 1
 * $Header$
d39 1
a39 1
#include <proto/exec.h>
a42 1
extern struct Task *FindTask();
d44 14
d75 1
d96 1
a96 1
	port = (struct MsgPort *)calloc(1, sizeof(*port));
d102 1
a102 1
	port->mp_Node.ln_Pri = 0;
d116 1
d122 1
a122 1
	free(port);
d128 1
a128 1
BSTR *sttobs(p)
d134 1
a134 1
	if(!(r = (char *)malloc(len+2))){
d141 1
a141 1
	return ((BSTR *)(((long)r)>>2));
d147 1
a147 1
fprintf(f, fmt, a, b, c, d, e)
d149 1
a149 1
	requester(0L, " OK ", fmt, a, b, c, d, e);
@
