head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     91.10.10.16.34.10;  author martin;  state Exp;
branches ;
next     ;


desc
@small SAS startup code
@



1.1
log
@Initial revision
@
text
@*
* C initial startup procedure under AmigaDOS
*
* Use the following command line to make c.o
* asm -u -iINCLUDE: c.a
*
*
	INCLUDE	"exec/types.i"
	INCLUDE	"exec/alerts.i"
	INCLUDE	"exec/nodes.i"
	INCLUDE	"exec/lists.i"
	INCLUDE	"exec/ports.i"
	INCLUDE	"exec/libraries.i"
	INCLUDE	"exec/tasks.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"exec/execbase.i"
	INCLUDE	"libraries/dos.i"
	INCLUDE	"libraries/dosextens.i"

FUNCDEF         MACRO   * function
_LVO\1          EQU     FUNC_CNT
FUNC_CNT        SET     FUNC_CNT-6
                ENDM

FUNC_CNT        SET     LIB_NONSTD

	INCLUDE	"exec/exec_lib.i"
	INCLUDE	"libraries/dos_lib.i"

MEMFLAGS	EQU	MEMF_CLEAR+MEMF_PUBLIC
AbsExecBase	EQU	4

;;;
;;;   Stack map.
;;;
      OFFSET  0
           ds.b    4
savereg    ds.b    13*4
stackbtm   ds.b    4



; some usefull macros:

callsys macro
	CALLLIB _LVO\1
	endm

	xdef	XCEXIT		* exit(code) is standard way to leave C.
	xdef	@@XCEXIT

	xref	LinkerDB	* linker defined base value
	xref	_BSSBAS		* linker defined base of BSS
	xref	_BSSLEN		* linker defined length of BSS

*       library references

	section text,code

	xref    main			* Name of C program to start with.
	xref    MemCleanup		* Free all allocated memory

start:
	movem.l d1-d6/a0-a6,-(a7)       * save registers

	move.l  a0,a2			* save command pointer
	move.l  d0,d2			* and command length
	lea     LinkerDB,a4		* load base register
	move.l  AbsExecBase.W,a6

	lea     _BSSBAS,a3		* get base of BSS
	moveq   #0,d1
	move.l  #_BSSLEN,d0		* get length of BSS in longwords
	bra.s   clr_lp			* and clear for length given
clr_bss move.l  d1,(a3)+
clr_lp  dbf     d0,clr_bss
	move.l  a7,_StackPtr(A4)       * Save stack ptr
	move.l  a6,SysBase(A4)

clrwb:

*-----  clear any pending signals
	moveq	#0,d0
	move.l	#$00003000,d1
	callsys	SetSignal


*------ attempt to open DOS library:
	lea     DOSName(PC),A1
	moveq.l #0,D0
	callsys OpenLibrary
	move.l  D0,DOSBase(A4)
	bne.s	ok2
	moveq.l #100,d0
	bra.w   return

ok2:

*=======================================================================
*====== CLI Startup Code ===============================================
*=======================================================================
*
* Entry: D2 = command length
*	A2 = Command pointer
fromCLI:
        move.l  a7,D0           * get top of stack
        sub.l   stackbtm(a7),D0 * compute bottom
        add.l   #128,D0         * allow for parms overflow
        move.l  D0,_base(A4)    * save for stack checking

*=============================================
*------ common code --------
*=============================================

mainc
	jsr     main(PC)	       * call C entrypoint
	moveq.l #0,d0		   * set successful status
	bra.s   exit2
*

XCEXIT:
	move.l  4(SP),d0		* extract return code
@@XCEXIT:
exit2:
        movea.l _StackPtr(a4),a7         * restore stack ptr
	move.l  d0,-(a7)
	move.l  _ONEXIT(A4),d0	  * exit trap function?
	beq.s   exit3
	move.l  d0,a0
	jsr     (a0)
exit3:
	jsr     MemCleanup(PC)	  * cleanup leftover memory alloc.

nodofree:
	move.l  DOSBase(A4),a1
	callsys CloseLibrary	    * close Dos library
	move.l  (a7)+,d0

return:
	movem.l (a7)+,d1-d6/a0-a6
	rts


DOSName	 dc.b    'dos.library',0

	section __MERGED,BSS
*
	xref    DOSBase

	xdef    NULL,SysBase
	xdef    curdir,_mbase,_mnext,_msize,_tsize
	xdef    _oserr,_OSERR,_ONERR,_ONEXIT,_ONBREAK
	xdef    _StackPtr,_base

*

NULL		ds.b	4	*
_base		ds.b	4	* base of stack
_mbase		ds.b    4	* base of memory pool
_mnext		ds.b    4	* next available memory location
_msize		ds.b    4	* size of memory pool
_tsize		ds.b    4	* total size?
_oserr		equ     *
_OSERR		ds.b    4
_SIGINT		ds.b    4
_ONERR		ds.b    4
_ONEXIT		ds.b    4
_ONBREAK	ds.b    4
curdir	 	ds.b    4
SysBase		ds.b    4
_StackPtr	ds.b    4
		END
@
