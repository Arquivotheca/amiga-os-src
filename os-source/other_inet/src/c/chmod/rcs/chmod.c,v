head     1.3;
branch   ;
access   ;
symbols  Release1:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     92.11.24.15.51.49;  author bj;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.10.16.40.48;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.12.15.03.56;  author bj;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@binary 37.2

Added wildcard support ala Unix (ie, it won't recurse into
directories.)  

Moved global defines into a new chmod.h file.

removed all references to c.o and the like. Size goes from
4000 to 2000 bytes.

Using MatchFirst/Next now. Full ReadArgs support to come.
@
text
@/* -----------------------------------------------------------------------
 * chmod.c    AS225 release 2
 *
 * $Locker:$
 *
 * $Id:$
 *
 * $Revision:$
 *
 * $Log:$
 *
 * $Header:$
 *
 *------------------------------------------------------------------------
 */

// #define DEBUG 1


#include <exec/types.h>
#include <exec/memory.h>
#include <dos/dos.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/exec_pragmas.h>
#include <string.h>
#include "chmod.h"
#include "chmod_rev.h"

#ifdef DEBUG
int main(void) ;
#endif
int chmod(void) ;
void report( struct AnchorPath *a, struct glob *g ) ;

static char *version = VERSTAG ;

#ifdef DEBUG
int main(void)
#else
int chmod(void)
#endif
{
	struct AnchorPath *ap ;
	ULONG err ;
	struct DosLibrary *DOSBase ;
	struct glob glob ;
	struct RDArgs *ra, *r2 ;
	struct RDArgs ra2 ;
	long opts[OPT_COUNT] ;
	long opts2[OPT_COUNT2] ;
	char *p ;
	char *src, *dest ;
	char perms[128] ;
	char *files ;
	
	memset((char *)&glob, 0, sizeof(struct glob)) ;
	memset((char *)opts, 0, sizeof(opts)) ;
	memset((char *)opts2, 0, sizeof(opts2)) ;
	memset((char *)&ra2	, 0, sizeof(struct RDArgs)) ;
	 
	if(DOSBase = (struct DosLibrary *)OpenLibrary("dos.library", 37L))
	{
		glob.g_DOSBase = DOSBase ;
		
		if(ra = (struct RDargs *)ReadArgs(TEMPLATE, opts, NULL))
		{
#ifdef DODIRS		
			if( opts[OPT_A] )
			{
				glob.g_all = TRUE ;
			}
#endif			
			if( opts[OPT_V] )
			{
				glob.g_verbose = TRUE ;
			}

			dest = perms ;
			src = GetArgStr() ;

			while((*src) && (*src != ' ') && (*src != '\t') )
			{
				*dest++ = *src++ ;
			}
			*dest = '\0' ;
			
			while(*src && *src == ' ')
			{
				src++ ;
			}
			files = src ;

			ra2.RDA_Source.CS_Buffer = files ;
			ra2.RDA_Source.CS_Length = (LONG)strlen(files) ;
			ra2.RDA_Source.CS_CurChr = 0L ;

			if(r2 = (struct RDArgs *)ReadArgs(T2,opts2,&ra2))
			{
				if( opts2[OPT_F2] )
				{
					glob.g_files = (char **)opts2[OPT_F2] ;

					p = glob.g_permissions = perms ;
					if( *p >= '0' && *p <= '7')
					{
						glob.g_mask_is_numeric = TRUE ;
					}

					if (ap = (struct AnchorPath *)AllocMem(sizeof(struct AnchorPath) + 255, MEMF_CLEAR))
					{
						ap->ap_Strlen = 255 ;
						ap->ap_Flags  = APF_DOWILD ;
						ap->ap_BreakBits = SIGBREAKF_CTRL_C ;
		
						do
						{
							if(err = MatchFirst((UBYTE *)*glob.g_files, ap ))
							{
								if((err = IoErr()) != ERROR_NO_MORE_ENTRIES ) 
								{
									PrintFault(err, "chmod" ) ;
								}
							}
							else   /* ok */
							{
								do 
								{
									report(ap, &glob) ;
								}
								while( !MatchNext(ap) ) ;
							}
							glob.g_files++ ;
						}
						while( *(glob.g_files) ) ;
						MatchEnd(ap) ;
						FreeMem(ap, sizeof(struct AnchorPath) + 255) ;
					}
				}
				FreeArgs(r2) ;
			}
			else
			{
				PrintFault(IoErr(), "chmod (internal)") ;
			}
			FreeArgs(ra) ;
		}
		else
		{
			PrintFault(IoErr(), "chmod") ;
		}
		CloseLibrary((struct Library *)DOSBase) ;
	}
	return(0) ;
}
		
void
report( struct AnchorPath *a, struct glob *g )
{
	struct DosLibrary *DOSBase = g->g_DOSBase ;

#ifdef DODIRS
	LONG entrytype = a->ap_Info.fib_DirEntryType ;

	if( a->ap_Flags & APF_DIDDIR )
	{
		a->ap_Flags &= ~APF_DIDDIR ;
		return ;
	}

	setperms(g,a) ;
	
	if(entrytype > 0)
	{
		if( g->g_all )
		{
			a->ap_Flags |= APF_DODIR ;
		}
	}

	else if( entrytype < 0 )
	{
		setperms(g,a) ;
	}

#else
	setperms(g,a) ;
#endif

	if( g->g_verbose )
	{
		PutStr(a->ap_Buf) ;
		PutStr("\n") ;
	}
}

/************************************************
 * test permissions
 ************************************************
 */


int
setperms(struct glob *g, struct AnchorPath *a )
{
	char *p = g->g_permissions ;
	char *fnam, op ;
    ULONG emask, mask, whomask ;
	struct DosLibrary *DOSBase = g->g_DOSBase ;
	LONG foo ;
	
	fnam = a->ap_Buf ;
	foo = (long)&fnam ;

	if( g->g_mask_is_numeric )
	{
//		whomask = 07777 ;
		for(mask = 0 ; *p && (*p >= '0' && *p <= '7') ;p++)
		{
			mask = (mask<<3) + *p - '0' ;
		}
		if( mask > 07777 || *p )
		{
			PutStr("chmod: invalid mode\n") ;
			return(0) ;
		}
	}
	
	
			  /* we're testing the permissions on each file as we go */
	else
	{
		if( !GetUnixProtect(fnam, &mask, g))
		{
			VPrintf("chmod: cannot access '%s', try numeric protections\n", (LONG *)&foo) ; /***/
			return(0) ;
		}
		
		while(*p)
		{
			emask = whomask = 0 ;
			while(*p && *p==',')
			{
				p++ ;
			}
			while(*p && ((*p=='u' && (whomask|=05700)) ||
						 (*p=='g' && (whomask|=03070)) ||
						 (*p=='o' && (whomask|=01007)) ||
						 (*p=='a' && (whomask|=07777))))
			{
				p++ ;
			}
			if(whomask == 0)
			{
				whomask = 07777 ;        /* assume meant a */
			}

			if(*p)
			{
				op = *p++ ;
			}
			else
			{
				return(0) ;
			}
			while(*p && ((*p=='r' && (emask|=00444)) ||
						(*p=='w' && (emask|=00222)) ||
						(*p=='x' && (emask|=00111)) ||
						(*p=='s' && (emask|=06000)) ||
						(*p=='t' && (emask|=01000)) 
						))
			{
				p++ ;
			}
			if(op == '=')
			{
				mask = (mask & ~whomask) | (whomask & emask) ;
			}
			else if(op == '-')
			{
				mask &= ~(whomask & emask) ;
			}
			else if(op == '+')
			{
				mask |= whomask & emask ;
			}
			else 
			{
				PutStr("chmod: invalid operator : ") ;
				return(0) ;
			}
		}
	}
	
	if(!SetUnixProtect(fnam, mask, g))
	{
		VPrintf("chmod: can't change %s\n", (LONG *)&fnam) ;
        return(0) ;
	}
	return(1) ;
}
@


1.2
log
@2.0 version
uses Printf()
@
text
@d2 1
a2 1
 * CHMOD.C
d4 1
a4 1
 * $Locker: martin $
d6 1
a6 1
 * $Id: chmod.c,v 1.1 90/11/12 15:03:56 bj Exp Locker: martin $
d8 1
a8 1
 * $Revision: 1.1 $
d10 1
a10 1
 * $Header: inet2:src/c/chmod/RCS/chmod.c,v 1.1 90/11/12 15:03:56 bj Exp Locker: martin $
d12 2
d17 3
d21 1
d23 56
a78 3
#include <rpc/types.h>
#include <nfs/nfs.h>
#include <proto/all.h>
d80 2
d83 11
a93 6
#include "chmod_rev.h"
static char *vers = VERSTAG ;
char *basename (char *);
u_long GetUnixProtect(char *name, long *maskp);
u_long SetUnixProtect(char *name, long unixmask);
int main(int argc, char **argv);
d95 65
a159 3
main(argc, argv)
	int	argc;
	char	**argv;
d161 42
a202 3
	register char *p;
	char *pname, op;
	u_long	emask, mask, whomask;
d204 34
a237 19
	pname = basename(argv[0]);
	if(argc != 3){
		Printf("Usage: %s [ugoa][+-=][rwxst] filename\n", pname);
		return(0);
	}
	p = argv[1];
	if(*p>='0' && *p<='7'){		/* numeric mask */
		whomask = 07777;
		for(mask = 0; *p && (*p>='0' && *p<='7'); p++)
			mask = (mask<<3) + *p - '0';
		if(mask > 07777 || *p){
			Printf("%s: invalid mode\n", pname);
			return(0);
		}
	} else { 			/* symbolic format */
		if( !GetUnixProtect(argv[2], &mask)){
			Printf("%s: can't access %s, try numeric protections\n"
				, pname, argv[2]);
			return(0);
d239 4
a242 2
		while(*p){
			emask = whomask = 0;
d244 10
a253 8
				p++;
			while(*p && (
				(*p=='u' && (whomask|=05700)) ||
				(*p=='g' && (whomask|=03070)) ||
				(*p=='o' && (whomask|=01007)) ||
				(*p=='a' && (whomask|=07777)) 
				    ))
				p++;
d255 4
a258 1
				whomask = 07777;	/* assume meant a */
d260 3
a262 1
				op = *p++;
d264 12
a275 9
				return(0);
			while(*p && (
				(*p=='r' && (emask|=00444)) ||
				(*p=='w' && (emask|=00222)) ||
				(*p=='x' && (emask|=00111)) ||
				(*p=='s' && (emask|=06000)) ||
				(*p=='t' && (emask|=01000)) 
				    ))
				p++;
d277 3
a279 1
				mask = (mask & ~whomask) | (whomask & emask);
d281 3
a283 1
				mask &= ~(whomask & emask);
d285 2
a286 4
				mask |= whomask & emask;
			else {
				Printf("%s: invalid operator\n", pname);
				return(0);
d288 5
d295 7
a301 3
	if(!SetUnixProtect(argv[2], mask))
		Printf("%s: can't change %s\n", pname, argv[2]);
	return(0);
a302 1

@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Locker$
d6 1
a6 1
 * $Id$
d8 1
a8 1
 * $Revision$
d10 1
a10 1
 * $Header$
d15 2
a16 2

#include <libraries/dos.h>
d19 1
a22 1
static char *compiler = "MANX36 MANX36" ;
d24 4
d34 1
a34 1
	char *pname, *basename(), op;
d39 1
a39 1
		printf("Usage: %s [ugoa][+-=][rwxst] filename\n", pname);
d48 1
a48 1
			printf("%s: invalid mode\n", pname);
d53 1
a53 1
			printf("%s: can't access %s, try numeric protections\n"
d89 1
a89 1
				printf("%s: invalid operator\n", pname);
d95 1
a95 1
		printf("%s: can't change %s\n", pname, argv[2]);
@
