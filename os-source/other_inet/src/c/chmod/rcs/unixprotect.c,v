head     1.3;
branch   ;
access   ;
symbols  Release1:1.1;
locks    ; strict;
comment  @ * @;


1.3
date     92.11.24.15.56.38;  author bj;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.10.16.39.55;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.12.15.04.09;  author bj;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Binary 37.2

Uses new chmod.h include.  Uses a passed global structure.
@
text
@/* -----------------------------------------------------------------------
 * unixprotect.c (chmod)  SAS 5.10a
 *
 * $Locker:  $
 *
 * $Id: unixprotect.c,v 1.2 91/10/10 16:39:55 martin Exp $
 *
 * $Revision: 1.2 $
 *
 * $Header: AS225:src/c/chmod/RCS/unixprotect.c,v 1.2 91/10/10 16:39:55 martin Exp $
 *
 *------------------------------------------------------------------------
 */

// #define DEBUG 1


/*
** SetUnixProt(name, unixmask)
*/
#include <exec/types.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <exec/ports.h>
#include <rpc/types.h>
#include <nfs/nfs.h>
#include <nfs/perm.h>
#include <action.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/exec_pragmas.h>

#include "chmod.h"

u_long GetUnixProtect(char *name, long *maskp, struct glob *g);
u_long SetUnixProtect(char *name, long unixmask, struct glob *g);

u_long SetUnixProtect(char *name, long unixmask, struct glob *g)
{
	REGISTER char *np;
	REGISTER char *cp;
	REGISTER struct MsgPort *dev;
	REGISTER char  *tail;
	REGISTER struct DosLibrary *DOSBase = g->g_DOSBase ;
	u_long amigamask, parent, lock;
	LONG  result = 20L ;
	long  error ;

	if(lock = Lock(name, MODE_OLDFILE))
	{
		if(cp = AllocMem(256L, MEMF_CLEAR))
		{
			parent = ParentDir(lock) ;

			tail = FilePart( name ) ;
			np = &cp[1];
			while(*tail)
			{
				*np++ = *tail++;
			}
			cp[0] = np - &cp[1];
			*np++ = 0;
			dev = btod(lock, struct FileLock *)->fl_Task;
			result = DoPkt(dev, ACTION_CHMOD, 0, parent, dtob(cp), unixmask,0);
            error = IoErr() ;
            DBp2("SUP: result = %ld error = %ld\n", result, error) ;
            
			if((result==0) && (error ==ERROR_ACTION_NOT_KNOWN))
			{
				amigamask = 0;
				if((unixmask & 0400)==0)
					amigamask |= FIBF_READ;
				if((unixmask & 0200)==0)
					amigamask |= FIBF_WRITE;
				if((unixmask & 0100)==0)
					amigamask |= FIBF_EXECUTE;
				result = DoPkt(dev, ACTION_SET_PROTECT, 0, parent, 
						dtob(cp), amigamask,0);
			}
			UnLock(parent);
			FreeMem(cp, 256L) ;
		}
		UnLock(lock);
	}
#ifdef DEBUG	
	else
	{
		DB("SUP: Lock failed\n") ;
	}
#endif	
	return((u_long)result) ;
}

u_long GetUnixProtect(char *name, long *maskp, struct glob *g)
{
	REGISTER u_long mode ;
	REGISTER struct DosLibrary *DOSBase = g->g_DOSBase ;
	REGISTER struct FileInfoBlock *fib;
	struct fattr fa;
	struct MsgPort *dev;
	u_long	result, lock ;

	if((lock = Lock(name, MODE_OLDFILE)) == 0)
	{
		return(0);
	}
	if(fib = AllocMem(sizeof(struct FileInfoBlock), MEMF_CLEAR))
	{
		dev = btod(lock, struct FileLock *)->fl_Task;
		result = DoPkt(dev, ACTION_EX_OBJECT, lock, dtob(fib), (LONG)&fa,0,0);
		if(result==0 && IoErr()==ERROR_ACTION_NOT_KNOWN)
		{
			result = DoPkt(dev, ACTION_EXAMINE_OBJECT, lock, dtob(fib),0,0,0);
			if(fib->fib_EntryType > 0)
				mode = NFSMODE_DIR|0700;
			else
				mode = NFSMODE_REG|0700;
			if(fib->fib_Protection & FIBF_READ)
				mode &= ~0400;
			if(fib->fib_Protection & FIBF_WRITE)
				mode &= ~0200;
			if(fib->fib_Protection & FIBF_EXECUTE)
				mode &= ~0100;
			*maskp = mode;
		} 
		else
		{
			*maskp = fa.mode & 06777;
		}
		FreeMem(fib, sizeof(struct FileInfoBlock)) ;
	}
	UnLock(lock);
	return(result);
}
	
@


1.2
log
@2.0 version
uses DoPkt.
@
text
@d2 1
a2 1
 * unixprotect.c (chmod)  Manx 36
d4 1
a4 1
 * $Locker: martin $
d6 1
a6 1
 * $Id: unixprotect.c,v 1.1 90/11/12 15:04:09 bj Exp Locker: martin $
d8 1
a8 1
 * $Revision: 1.1 $
d10 1
a10 1
 * $Header: inet2:src/c/chmod/RCS/unixprotect.c,v 1.1 90/11/12 15:04:09 bj Exp Locker: martin $
d15 1
a17 1

d29 6
a34 1
#include <proto/all.h>
d36 2
a37 4
#define ALIGNLONG(p) (((long)p) + 4 - (((long)p) & 3))
char *basename(char *);
u_long GetUnixProtect(char *name, long *maskp);
u_long SetUnixProtect(char *name, long unixmask);
d39 1
a39 1
u_long SetUnixProtect(char *name, long unixmask)
d41 49
a89 30
	register char	*np, *cp;
	char	namebuf[256 + 4];
	struct MsgPort *dev;
	u_long	result, amigamask, parent, lock;
	char	*tail;

	cp = (char *)ALIGNLONG(namebuf);
	if((lock = Lock(name, MODE_OLDFILE)) == 0)
		return(0);

	parent = ParentDir(lock);

	tail = basename ( name );
	np = &cp[1];
	while(*tail)
		*np++ = *tail++;
	cp[0] = np - &cp[1];
	*np++ = 0;
	dev = btod(lock, struct FileLock *)->fl_Task;
	result = DoPkt(dev, ACTION_CHMOD, 0, parent, dtob(cp), unixmask,0);
	if(result==0 && IoErr()==ERROR_ACTION_NOT_KNOWN){
		amigamask = 0;
		if((unixmask & 0400)==0)
			amigamask |= FIBF_READ;
		if((unixmask & 0200)==0)
			amigamask |= FIBF_WRITE;
		if((unixmask & 0100)==0)
			amigamask |= FIBF_EXECUTE;
		result = DoPkt(dev, ACTION_SET_PROTECT, 0, parent, 
					dtob(cp), amigamask,0);
d91 2
a92 3
	UnLock(lock);
	UnLock(parent);
	return(result);
d95 1
a95 1
u_long GetUnixProtect(char *name, long *maskp)
d97 3
d102 1
a102 3
	u_long	result, lock, mode;
	char	buf[4+sizeof(struct FileInfoBlock)];
	struct FileInfoBlock *fib;
d105 1
d107 20
a126 7
	fib = (struct FileInfoBlock *)(((long)buf) + 4 - (((long)buf) & 3));
	dev = btod(lock, struct FileLock *)->fl_Task;
	result = DoPkt(dev, ACTION_EX_OBJECT, lock, dtob(fib), &fa,0,0);
	if(result==0 && IoErr()==ERROR_ACTION_NOT_KNOWN){
		result = DoPkt(dev, ACTION_EXAMINE_OBJECT, lock, dtob(fib),0,0,0);
		if(fib->fib_EntryType > 0)
			mode = NFSMODE_DIR|0700;
d128 5
a132 10
			mode = NFSMODE_REG|0700;
		if(fib->fib_Protection & FIBF_READ)
			mode &= ~0400;
		if(fib->fib_Protection & FIBF_WRITE)
			mode &= ~0200;
		if(fib->fib_Protection & FIBF_EXECUTE)
			mode &= ~0100;
		*maskp = mode;
	} else
		*maskp = fa.mode & 06777;
a136 50
/****** socket/basename ******************************************
*
*   NAME
*		basename -- get the filename from the pathname
*
*   SYNOPSIS
*		name = basename( pathname )
*
*		char *basename (char *); 
*
*   FUNCTION
*		Returns pointer to basename in the input string.
*
*	INPUTS
*		pathname	string containing pathname of file.
*
*   RESULT
*		name		pointer to basename in string
*
*   EXAMPLE
*		name = basename("dh0:graphics/pics/car.iff");
*		name points to "car.iff"
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*
******************************************************************************
*
*/

char *basename(p)
	register char *p;
{
	register char *op;

	op = p;
	while(*p){
		if(*p == '/' || *p == ':'){
			op = ++p;
		} else {
			p++;
		}
	}

	return op;
}

@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Locker$
d6 1
a6 1
 * $Id$
d8 1
a8 1
 * $Revision$
d10 1
a10 1
 * $Header$
d21 3
a23 2

#include <libraries/dosextens.h>
d29 1
d32 3
d36 1
a36 3
SetUnixProtect(name, unixmask)
	register char	*name;
	long	unixmask;
d41 2
a42 2
	u_long	result, rslt, dos_packet(), amigamask, parent, lock;
	char	*tail, *basename();
d57 1
a57 1
	result = dos_packet(dev, ACTION_CHMOD, 0, parent, dtob(cp), unixmask);
d66 2
a67 2
		result = dos_packet(dev, ACTION_SET_PROTECT, 0, parent, 
					dtob(cp), amigamask);
d74 1
a74 3
GetUnixProtect(name, maskp)
	register char *name;
	long	*maskp;
d77 2
a78 3
	struct Process *FindTask();
	struct MsgPort *dev, *DeviceProc();
	u_long	result, dos_packet(), lock, mode;
d86 1
a86 1
	result = dos_packet(dev, ACTION_EX_OBJECT, lock, dtob(fib), &fa);
d88 1
a88 1
		result = dos_packet(dev, ACTION_EXAMINE_OBJECT, lock, dtob(fib));
d106 50
@
