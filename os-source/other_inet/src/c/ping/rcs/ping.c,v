head     1.3;
branch   ;
access   ;
symbols  Release1:1.1;
locks    bj:1.3; strict;
comment  @ * @;


1.3
date     93.01.15.13.53.01;  author bj;  state Exp;
branches ;
next     1.2;

1.2
date     91.08.06.15.45.12;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.09.15.07.14;  author bj;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Binary 3.4

Fixes bug where 'ping -l' calculation of average packet trip time
could generate a negative number.

Fixes bug where hitting control-C during certain code areas could cause massive
losses of memory and an eventual crash.

Fixes bug where user could specify a packet size that was too large. This would
crash the machine. User defined packet size limited to 4096 (larger than both
BSD and AT&T ping maximums.)
@
text
@/* ---------------------------------------------------------------------------------
 * PING.C
 *
 * $Locker: $
 *
 * $Id: $
 *
 * $Revision: $
 *
 * $Header: $
 *
 * $Log: $
 *
 *-----------------------------------------------------------------------------------
 */

/* sample internet ping client */

/* This is an advanced sockets program that shows how to use */
/* raw sockets, async I/O, and timers.  This code will only  */
/* work with AmigaDOS 2.0.  To run under 1.3, simply replace */
/* ReadArgs() with your own parsing code and use another     */
/* timer in place of the ReadEClock() calls.                 */

/* to compile with SAS C , type
"lc -cfist -v -inetinc: -fi -Lm ping.c"                      */

/* Written by Martin Hunt, Commodore-Amiga, June 1991        */

/* Parts of this program were based on code by Mike Muuss    */

/* This code is placed in the public domain */

// #define DEBUG 1
#ifdef DEBUG
	#define D(x) printf(x)
#else
	#define D(x) ;
#endif

#include <exec/types.h>
#include <exec/memory.h>
#include <exec/tasks.h>
#include <dos/dos.h>
#include <devices/timer.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <clib/timer_protos.h>

/* shared library stuff */
#include <sys/types.h>
#include <ss/socket.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <signal.h>
#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netdb.h>


/* get version and revision information */
#include "ping_rev.h"

/* This is used with the templates to cause the version string to be */
/* stored in the command.  It depends upon the command having a #include */
/* of the appropriate version file to provide the value for this string */
#define CMDREV  "\0$VER: " VSTRING

/* template for ReadArgs() */
#define TEMPLATE    "-L/S,HOST/A,SIZE/N,COUNT/N" CMDREV
#define OPT_L       0
#define OPT_HOST    1
#define OPT_SIZE    2
#define OPT_COUNT   3
#define OPT_MAX     4

#define MAXPACKET   4096    /* max packet size */
struct Library *SockBase ;
struct Library *TimerBase ;
UBYTE buffer[MAXPACKET];
struct MsgPort *timerport1=NULL;
struct timerequest *timer1=NULL;
u_long ntransmitted = 0, nreceived = 0;
u_long tsum = 0;
u_long tmin = 999999;
u_long tmax = 0;
u_long e_freq;
UWORD ident;
long size,count;
BOOL loop = (BOOL)0;
long return_code = RETURN_ERROR;
int getout = 0 ;

/* prototypes */
UWORD in_cksum(UWORD *addr, int len);
ULONG create_timers(void);
void send_icmp(int s, struct sockaddr_in *to);
char *pr_type( int t );
void read_icmp(int s );
void pr_pack( int cc, struct sockaddr_in *from );

char *inet_ntoa( u_long ) ;
void exit(int) ;

int CXBRK(void)
{
	getout = 1 ;
	return(0) ;
}

void main (void)
{
    char *host, *hostname;
    long timerevent, netevent, event;
    struct RDargs *rdargs;
    int s;
    struct sockaddr_in to;
    struct hostent *hp;
    struct protoent *proto;
    long true = 1;
    char *toaddr = NULL;
    long opts[OPT_MAX];
    UWORD abort = 0;
    u_long ial ;

    memset((char *)opts, 0, sizeof(opts));
    rdargs = ReadArgs(TEMPLATE, opts, NULL);
    if( rdargs == NULL)
    {
        exit(20) ;
    }

    if ((SockBase = OpenLibrary( "inet:libs/socket.library", 1L ))==NULL) {
        printf("Opening of socket library failed.\n");
        goto exit1;
    }

    /* initialize for 5 sockets */
    setup_sockets( 5, &errno );

    /* process arguments */
    if(opts[OPT_COUNT])
        count = *(long *)opts[OPT_COUNT];
    else
        count = 100;

    if(opts[OPT_L])
        loop = (BOOL)opts[OPT_L];
    else
        count = 1;

    if (!(host = (char *)opts[OPT_HOST]))
    	goto exit2;

    if(opts[OPT_SIZE])
    {
        size = max( *(long *)opts[OPT_SIZE], 64);
        if( size > MAXPACKET )
        	size = MAXPACKET ;
        	
        printf("size arg = %ld\n", size) ;
    }
    else
        size = 64;

    /* zero structure */
    memset( (char *)&to, '\0',sizeof(struct sockaddr_in) );
	if(getout)
		goto exit2 ;
    to.sin_family = AF_INET;
    to.sin_addr.s_addr = inet_addr(host);
    if (to.sin_addr.s_addr == INADDR_NONE) {
        hp = gethostbyname(host);
        if (!hp && getout == 0) {
            printf("Error finding host %s\n",host);
            goto exit2;
        }
		if(getout)
			goto exit2 ;
        to.sin_family = hp->h_addrtype;
        memcpy((char *)&to.sin_addr, hp->h_addr, hp->h_length);
        hostname = hp->h_name;
        ial = (long)to.sin_addr.s_addr ;
        
        toaddr = inet_ntoa(ial);
    } else
        hostname = host;

	if(getout)
		goto exit2 ;

    /* ident is used in the ICMP packet so we can tell that its ours */
    ident = (UWORD)((long)FindTask(0L) & 0xFFFF);

    if ((proto = getprotobyname("icmp")) == NULL) {
        printf("icmp: unknown protocol\n");
        goto exit2;
    }
	if(getout)
		goto exit2 ;

    /* open an ICMP socket */
    if ((s = socket(AF_INET, SOCK_RAW, proto->p_proto)) < 0) {
        printf("ping: socket: %s\n",strerror(errno));
        goto exit2;
    }
	if(getout)
		goto exit3 ;    /* switch to exit 3 as we now have a socket */

    /* set socket to ASYNC so we will be signaled when packets arrive */
    if(s_ioctl(s, FIOASYNC, (char *)&true) < 0){
        printf("ping: s_ioctl: %s\n",strerror(errno));
        goto exit3;
    }
    /* set socket to nonblocking */
    if(s_ioctl(s, FIONBIO, (char *)&true) < 0){
        printf("ping: s_ioctl: %s\n",strerror(errno));
        goto exit3;
    }

	if(getout)
		goto exit3 ;

    if(loop) {
        printf("PING %s", hostname);
        if (toaddr)
            printf(" (%s)", toaddr);
        printf(": %ld data bytes\n", size);
    }

    /* setup timer.  timer1 is a 1 second timer for sending packets */

    if(create_timers()) {
        printf("Error setting up timer\n");
        goto exit3;
    }

	if(getout)
		goto exit2 ;

    timerevent = 1L << timerport1->mp_SigBit;
    netevent = 1L << s_getsignal(SIGIO);

    do {
        /* send ICMP echo request */
        send_icmp(s,&to);
        for(;;) {
            /* wait for a response, timeout, or ^C */
            event = Wait(netevent | timerevent | SIGBREAKF_CTRL_C);
            if(event & netevent) {
                read_icmp(s);
                SetSignal(0L,netevent);
                if(!loop) {
                    AbortIO((struct IORequest *)timer1);
                    WaitIO((struct IORequest *)timer1);
                    abort++;
                    break;
                }

            }
            if(event & SIGBREAKF_CTRL_C) {
                AbortIO((struct IORequest *)timer1);
                WaitIO((struct IORequest *)timer1);
                abort++;
                break;
            }
            if(event & timerevent) {
                AbortIO((struct IORequest *)timer1);
                WaitIO((struct IORequest *)timer1);
                SetSignal(0L, timerevent);
                break;
            }
        }

    } while (!abort && (ntransmitted != count) );

    if(loop) {
        printf("\n----%s PING Statistics----\n", hostname );
        printf("%d packets transmitted, ", ntransmitted );
        printf("%d packets received, ", nreceived );
        if (ntransmitted)
            printf("%d%% packet loss",
            (int) (((ntransmitted-nreceived)*100) / ntransmitted ) );
        printf("\n");
        if (nreceived)
        {
            printf("round-trip (ms)  min/avg/max = %#2.2lf/%#2.2lf/%#2.2lf\n",
                (double)tmin/(double)e_freq*1000.0,
                (double)(tsum*1000.0) / (double)(nreceived*((double)e_freq)) ,
                (double)tmax/(double)e_freq*1000.0 );
        }
            
    } else
        if(nreceived)
            printf("%s is alive!\n",host);

exit3:
    fflush(stdout);
    if (s)
        s_close(s);

    if(timerport1)
        DeleteMsgPort(timerport1);
    if(timer1)
        DeleteIORequest(timer1);
exit2:
    cleanup_sockets();
    CloseLibrary(SockBase);
exit1:
    if(rdargs)
        FreeArgs(rdargs);

    exit(return_code);
}

/*
 *          I N _ C K S U M
 *
 * Checksum routine for Internet Protocol family headers (C Version)
 *
 */
UWORD in_cksum(UWORD *addr, int len)
{
    register int nleft = len;
    register UWORD *w = addr;
    register UWORD answer;
    register int sum = 0;
    UWORD odd_byte = 0;

    /*
     *  Our algorithm is simple, using a 32 bit accumulator (sum),
     *  we add sequential 16 bit words to it, and at the end, fold
     *  back all the carry bits from the top 16 bits into the lower
     *  16 bits.
     */
    while( nleft > 1 )  {
        sum += *w++;
        nleft -= 2;
    }

    /* mop up an odd byte, if necessary */
    if( nleft == 1 ) {
        *(u_char *)(&odd_byte) = *(u_char *)w;
        sum += odd_byte;
    }

    /*
     * add back carry outs from top 16 bits to low 16 bits
     */
    sum = (sum >> 16) + (sum & 0xffff); /* add hi 16 to low 16 */
    sum += (sum >> 16);
    answer = ~sum;              /* truncate to 16 bits */
    return (answer);
}


ULONG create_timers(void)
{
    timerport1 = CreateMsgPort();
    if(timerport1 == (struct MsgPort *)0)
        return (1);

    timer1 = (struct timerequest *)CreateIORequest(timerport1,(long)sizeof(struct timerequest));
    if(timer1 == (struct MsgPort *)0)
        return(1);

    if(OpenDevice(TIMERNAME, UNIT_VBLANK, (struct IORequest *)timer1, 0L) != 0L)
        return(1);

    /* set up TimerBase so we can use ReadEClock() */
    TimerBase = (struct Library *)timer1->tr_node.io_Device;

    return(0);
}

/* send an ICMP echo request */
/* the timestamp is written in the first 8 bytes of data */

void send_icmp(int s, struct sockaddr_in *to)
{
    UBYTE *datap;
    struct icmp *icp = (struct icmp *) buffer;
    int i;

    icp->icmp_type = ICMP_ECHO;
    icp->icmp_code = 0;
    icp->icmp_cksum = 0;
    icp->icmp_seq = ntransmitted++;
    icp->icmp_id = ident;

    /* start the 1 second timer */
    timer1->tr_node.io_Command = TR_ADDREQUEST;
    timer1->tr_time.tv_secs = 1L;
    timer1->tr_time.tv_micro = 0L;
    SendIO((struct IORequest *)timer1);


    /* get system time and put it in first 8 bytes of data field */
    /* note that we will be timing filling the packet with data  */
    /* and checksumming it.                                      */

    ReadEClock((struct EClockVal *)(buffer+8));

    datap = (UBYTE *)(buffer+16);   /* skip 8 for header and 8 for timestamp */

    /* fill packet with data */
    for( i=16; i<size; i++)
        *datap++ = i;

    /* Compute ICMP checksum */
    icp->icmp_cksum = in_cksum( (UWORD *)icp, size );

    /* send it */
    i = sendto( s, buffer, size, 0, (struct sockaddr *)to, sizeof(struct sockaddr) );

    if( i < 0 || i != size )  {
        if( i<0 )
            printf("sendto: %s\n",strerror(errno));
        printf("ping: wrote %ld chars, ret=%ld\n",size, i );
    }

}

void read_icmp(int s)
{
    struct sockaddr_in from;
    int fromlen = sizeof (from);
    int cc;

    if ( (cc=recvfrom(s, buffer, MAXPACKET, 0, (struct sockaddr *)&from, &fromlen)) < 0) {
        if( errno == EINTR || errno == EWOULDBLOCK){
            return ;
        }
        printf("ping: recvfrom: %s\n",strerror(errno));
        return ;
    }
    pr_pack( cc, &from );
}


/*
 *          P R _ P A C K
 *
 * Print out the packet, if it came from us.  This logic is necessary
 * because ALL readers of the ICMP socket get a copy of ALL ICMP packets
 * which arrive ('tis only fair).  This permits multiple copies of this
 * program to be run without having intermingled output (or statistics!).
 */
void pr_pack( int cc, struct sockaddr_in *from )
{
    struct ip *ip;
    register struct icmp *icp;
    register long *lp = (long *) buffer;
    register int i;
    struct EClockVal intime, *outtime;
    int hlen;
    u_long triptime;


    e_freq = ReadEClock(&intime);
    from->sin_addr.s_addr = ntohl( from->sin_addr.s_addr );
    ip = (struct ip *)buffer;

    /* get the IP header length */
    hlen = ip->ip_hl << 2;

    if (cc < hlen + ICMP_MINLEN) {
        printf("packet too short (%d bytes) from %s\n", cc,
                inet_ntoa(ntohl(from->sin_addr.s_addr)));
        return;
    }
    cc -= hlen;

    /* the ICMP packet starts after the IP header */
    icp = (struct icmp *)(buffer + hlen);
    if( icp->icmp_type != ICMP_ECHOREPLY )  {
        printf("%d bytes from %s: ", cc,
            inet_ntoa(ntohl(from->sin_addr.s_addr)));
        printf("icmp_type=%d (%s)\n",
            icp->icmp_type, pr_type(icp->icmp_type) );
        for( i=0; i<12; i++)
            printf("x%2.2x: x%8.8x\n", i*sizeof(long), *lp++ );
        printf("icmp_code=%d\n", icp->icmp_code );
        return;
    }
    if( icp->icmp_id != ident )
        return;         /* 'Twas not our ECHO */

    return_code = RETURN_OK;

    outtime = (struct EClockVal *)(&icp->icmp_data[0]);
    triptime = intime.ev_lo-outtime->ev_lo;
//    printf("triptime = %ld\n", triptime) ;

    if(loop) {
        printf("%d bytes from %s: ", cc,inet_ntoa(ntohl(from->sin_addr.s_addr)));
        printf("icmp_seq=%d. ", icp->icmp_seq );
        printf("time=%#2.2lf ms\n", (double)triptime/(double)e_freq*1000.0 );
    }

    /* update total, max, and min times */
    tsum += triptime;
    tmax = max(tmax,triptime);
    tmin = min(tmin,triptime);

    nreceived++;
}

/*
 *          P R _ T Y P E
 *
 * Convert an ICMP "type" field to a printable string.
 */
char *pr_type( int t )
{
    static char *ttab[] = {
        "Echo Reply",
        "ICMP 1",
        "ICMP 2",
        "Dest Unreachable",
        "Source Quench",
        "Redirect",
        "ICMP 6",
        "ICMP 7",
        "Echo",
        "ICMP 9",
        "ICMP 10",
        "Time Exceeded",
        "Parameter Problem",
        "Timestamp",
        "Timestamp Reply",
        "Info Request",
        "Info Reply"
    };

    if( t < 0 || t > 16 )
        return("OUT-OF-RANGE");

    return(ttab[t]);
}
@


1.2
log
@Complete rewrite
uses shared library
uses 2.0 functions
could be rewritten to be smaller, pure
@
text
@d4 1
a4 1
 * $Locker:
d6 1
a6 1
 * $Id:
d8 1
a8 1
 * $Revision:
d10 1
a10 1
 * $Header:
d12 2
d34 7
d49 3
a51 1
#include <proto/all.h>
d54 1
d97 1
d107 9
d129 1
d133 4
d161 1
d163 5
d173 2
a174 1

d179 1
a179 1
        if (!hp) {
d183 2
d188 3
a190 1
        toaddr = inet_ntoa(to.sin_addr.s_addr);
d194 3
d204 3
d212 2
d218 1
a218 1
        goto exit2;
d223 1
a223 1
        goto exit2;
d226 3
d240 1
a240 1
        goto exit2;
d243 3
d291 1
d293 5
a297 3
            (double)tmin/(double)e_freq*1000.0,
            (double)(tsum*1000) / (double)(nreceived*e_freq),
            (double)tmax/(double)e_freq*1000.0 );
d302 1
a303 1

a316 1
    CloseLibrary((struct Library *)DOSBase);
d318 1
a318 1
	exit(return_code);
d419 1
a419 1
    i = sendto( s, buffer, size, 0, to, sizeof(struct sockaddr) );
d435 1
a435 1
    if ( (cc=recvfrom(s, buffer, MAXPACKET, 0, &from, &fromlen)) < 0) {
d494 1
a494 1
	return_code = RETURN_OK;
d498 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 20
/*
 * Copyright (c) 1987 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */


/*
 *			P I N G . C
d4 1
a4 2
 * Using the InterNet Control Message Protocol (ICMP) "ECHO" facility,
 * measure round-trip-delays and packet loss across network paths.
d6 35
a40 15
 * Author -
 *	Mike Muuss
 *	U. S. Army Ballistic Research Laboratory
 *	December, 1983
 * Modified at Uc Berkeley
 *
 * Status -
 *	Public Domain.  Distribution Unlimited.
 *
 * Bugs -
 *	More statistics could always be gathered.
 *	This program has to run SUID to ROOT to access the ICMP socket.
 */

#include <libraries/dos.h>
d42 2
a43 3
#include <stdio.h>
#include <errno.h>
#include <sys/time.h>
a44 2

#include <sys/param.h>
d46 1
a46 2
#include <sys/file.h>

d52 1
a52 1
#include <signal.h>
d54 1
a55 2
static char *compiler = "MANX36 MANX36" ;
static char *vers = VERSTAG ;
d57 4
d62 203
a264 164
#define	MAXWAIT		10	/* max time to wait for response, sec. */
#define	MAXPACKET	4096	/* max packet size */

int	verbose;
u_char	packet[MAXPACKET];
int	options;
extern	int errno;

int s;			/* Socket file descriptor */
struct hostent *hp;	/* Pointer to host info */
struct timezone tz;	/* leftover */

struct sockaddr whereto;/* Who to ping */
int datalen;		/* How much data */

char usage[] = "Usage:  ping [-drv] host [data size] [npackets]\n";

char *hostname;
char hnamebuf[MAXHOSTNAMELEN];
char *inet_ntoa();

int npackets;
int ntransmitted = 0;		/* sequence # for outbound packets = #sent */
int ident;

int nreceived = 0;		/* # of packets we got back */
int timing = 0;
int tmin = 999999999;
int tmax = 0;
int tsum = 0;			/* sum of all times, for doing average */
int finish(), catcher();

/*
 * 			M A I N
 */
main(argc, argv)
char *argv[];
{
	char **av = argv;
	char *toaddr = NULL;
	struct sockaddr_in *to = (struct sockaddr_in *) &whereto;
	int on = 1;
	struct protoent *proto;

	argc--, av++;
	while (argc > 0 && *av[0] == '-') {
		while (*++av[0]) switch (*av[0]) {
			case 'd':
				options |= SO_DEBUG;
				break;
			case 'r':
				options |= SO_DONTROUTE;
				break;
			case 'v':
				verbose++;
				break;
		}
		argc--, av++;
	}
	if( argc < 1)  {
		printf(usage);
		exit(1);
	}

	bzero( (char *)&whereto, sizeof(struct sockaddr) );
	to->sin_family = AF_INET;
	to->sin_addr.s_addr = inet_addr(av[0]);
	if (to->sin_addr.s_addr != -1) {
		strcpy(hnamebuf, av[0]);
		hostname = hnamebuf;
	} else {
		hp = gethostbyname(av[0]);
		if (!hp) {
			fprintf(stderr, "ping: %s: ", av[0]);
			herror((char *)NULL);
			exit(1);
		}
		to->sin_family = hp->h_addrtype;
		bcopy(hp->h_addr, (caddr_t)&to->sin_addr, hp->h_length);
		hostname = hp->h_name;
		toaddr = inet_ntoa(to->sin_addr.s_addr);
	}

	if( argc >= 2 )
		datalen = atoi( av[1] );
	else
		datalen = 64-8;
	if (datalen > MAXPACKET) {
		fprintf(stderr, "ping: packet size too large\n");
		exit(1);
	}
	if (datalen >= sizeof(struct timeval))
		timing = 1;
	if (argc > 2)
		npackets = atoi(av[2]);

	ident = getpid() & 0xFFFF;

	if ((proto = getprotobyname("icmp")) == NULL) {
		fprintf(stderr, "icmp: unknown protocol\n");
		exit(10);
	}
	if ((s = socket(AF_INET, SOCK_RAW, proto->p_proto)) < 0) {
		perror("ping: socket");
		exit(5);
	}
	if (options & SO_DEBUG)
		setsockopt(s, SOL_SOCKET, SO_DEBUG, &on, sizeof(on));
	if (options & SO_DONTROUTE)
		setsockopt(s, SOL_SOCKET, SO_DONTROUTE, &on, sizeof(on));

	/*    ----------- AMIGA -----------------
	** We don't have interruptable system calls on the Amiga, so we
	** set FIOASYNC & FIONBIO - async I/O (signal when done) & non
	** blocking in case we're falsely signalled.
	*/
	{
		long true = -1L;

		if(ioctl(s, FIOASYNC, &true) < 0){
			perror("ping: ioctl");
			exit(5);
		}
		if(ioctl(s, FIONBIO, &true) < 0){
			perror("ping: ioctl");
			exit(5);
		}
	}

	printf("PING %s", hostname);
	if (toaddr)
		printf(" (%s)", toaddr);
	printf(": %d data bytes\n", datalen);
				

	signal( SIGINT, finish );
	signal(SIGALRM, catcher);

	catcher();	/* start things going */

	for (;;) {
		amiga_interrupts();
	}
	/*NOTREACHED*/
}

readit()
{
	struct sockaddr_in from;
	int len = sizeof (packet);
	int fromlen = sizeof (from);
	int cc;

	if ( (cc=recvfrom(s, packet, len, 0, &from, &fromlen)) < 0) {
		if( errno == EINTR || errno == EWOULDBLOCK){
			return ;
		}
		perror("ping: recvfrom");
		return ; 
	}
	pr_pack( packet, cc, &from );
	if (npackets && nreceived >= npackets){
		finish();
	}
d268 3
a270 77
 * 			C A T C H E R
 * 
 * This routine causes another PING to be transmitted, and then
 * schedules another SIGALRM for 1 second from now.
 * 
 * Bug -
 * 	Our sense of time will slowly skew (ie, packets will not be launched
 * 	exactly at 1-second intervals).  This does not affect the quality
 *	of the delay and loss statistics.
 */
catcher()
{
	int waittime;

	pinger();
	if (npackets == 0 || ntransmitted < npackets){
		alarm(1);
	} else {
		if (nreceived) {
			waittime = 2 * tmax / 1000;
			if (waittime == 0)
				waittime = 1;
		} else {
			waittime = MAXWAIT;
		}
		signal(SIGALRM, finish);
		alarm(waittime);
	}
}

/*
 * 			P I N G E R
 * 
 * Compose and transmit an ICMP ECHO REQUEST packet.  The IP packet
 * will be added on by the kernel.  The ID field is our UNIX process ID,
 * and the sequence number is an ascending integer.  The first 8 bytes
 * of the data portion are used to hold a UNIX "timeval" struct in VAX
 * byte-order, to compute the round-trip time.
 */
pinger()
{
	static u_char outpack[MAXPACKET];
	register struct icmp *icp = (struct icmp *) outpack;
	int i, cc;
	register struct timeval *tp = (struct timeval *) &outpack[8];
	register u_char *datap = &outpack[8+sizeof(struct timeval)];

	icp->icmp_type = ICMP_ECHO;
	icp->icmp_code = 0;
	icp->icmp_cksum = 0;
	icp->icmp_seq = ntransmitted++;
	icp->icmp_id = ident;		/* ID */

	cc = datalen+8;			/* skips ICMP portion */

	if (timing)
		gettimeofday( tp, &tz );

	for( i=8; i<datalen; i++)	/* skip 8 for time */
		*datap++ = i;

	/* Compute ICMP checksum here */
	icp->icmp_cksum = in_cksum( icp, cc );

	/* cc = sendto(s, msg, len, flags, to, tolen) */
	i = sendto( s, outpack, cc, 0, &whereto, sizeof(struct sockaddr) );

	if( i < 0 || i != cc )  {
		if( i<0 )  perror("sendto");
		printf("ping: wrote %s %d chars, ret=%d\n",
			hostname, cc, i );
		fflush(stdout);
	}
}

/*
 * 			P R _ T Y P E
a271 1
 * Convert an ICMP "type" field to a printable string.
d273 1
a273 3
char *
pr_type( t )
register int t;
d275 115
a389 22
	static char *ttab[] = {
		"Echo Reply",
		"ICMP 1",
		"ICMP 2",
		"Dest Unreachable",
		"Source Quence",
		"Redirect",
		"ICMP 6",
		"ICMP 7",
		"Echo",
		"ICMP 9",
		"ICMP 10",
		"Time Exceeded",
		"Parameter Problem",
		"Timestamp",
		"Timestamp Reply",
		"Info Request",
		"Info Reply"
	};

	if( t < 0 || t > 16 )
		return("OUT-OF-RANGE");
a390 2
	return(ttab[t]);
}
d393 1
a393 1
 *			P R _ P A C K
d400 1
a400 4
pr_pack( buf, cc, from )
char *buf;
int cc;
struct sockaddr_in *from;
d402 55
a456 52
	struct ip *ip;
	register struct icmp *icp;
	register long *lp = (long *) packet;
	register int i;
	struct timeval tv;
	struct timeval *tp;
	int hlen, triptime;

	from->sin_addr.s_addr = ntohl( from->sin_addr.s_addr );
	gettimeofday( &tv, &tz );

	ip = (struct ip *) buf;
	hlen = ip->ip_hl << 2;
	if (cc < hlen + ICMP_MINLEN) {
		if (verbose)
			printf("packet too short (%d bytes) from %s\n", cc,
				inet_ntoa(ntohl(from->sin_addr.s_addr)));
		return;
	}
	cc -= hlen;
	icp = (struct icmp *)(buf + hlen);
	if( icp->icmp_type != ICMP_ECHOREPLY )  {
		if (verbose) {
			printf("%d bytes from %s: ", cc,
				inet_ntoa(ntohl(from->sin_addr.s_addr)));
			printf("icmp_type=%d (%s)\n",
				icp->icmp_type, pr_type(icp->icmp_type) );
			for( i=0; i<12; i++)
			    printf("x%2.2x: x%8.8x\n", i*sizeof(long), *lp++ );
			printf("icmp_code=%d\n", icp->icmp_code );
		}
		return;
	}
	if( icp->icmp_id != ident )
		return;			/* 'Twas not our ECHO */

	tp = (struct timeval *)&icp->icmp_data[0];
	printf("%d bytes from %s: ", cc,
		inet_ntoa(ntohl(from->sin_addr.s_addr)));
	printf("icmp_seq=%d. ", icp->icmp_seq );
	if (timing) {
		tvsub( &tv, tp );
		triptime = tv.tv_sec*1000+(tv.tv_usec/1000);
		printf("time=%d. ms\n", triptime );
		tsum += triptime;
		if( triptime < tmin )
			tmin = triptime;
		if( triptime > tmax )
			tmax = triptime;
	} else
		putchar('\n');
	nreceived++;
a458 1

d460 1
a460 1
 *			I N _ C K S U M
d462 1
a462 45
 * Checksum routine for Internet Protocol family headers (C Version)
 *
 */
in_cksum(addr, len)
u_short *addr;
int len;
{
	register int nleft = len;
	register u_short *w = addr;
	register u_short answer;
	register int sum = 0;
	u_short odd_byte = 0;

	/*
	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
	 *  we add sequential 16 bit words to it, and at the end, fold
	 *  back all the carry bits from the top 16 bits into the lower
	 *  16 bits.
	 */
	while( nleft > 1 )  {
		sum += *w++;
		nleft -= 2;
	}

	/* mop up an odd byte, if necessary */
	if( nleft == 1 ) {
		*(u_char *)(&odd_byte) = *(u_char *)w;
		sum += odd_byte;
	}

	/*
	 * add back carry outs from top 16 bits to low 16 bits
	 */
	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
	sum += (sum >> 16);			/* add carry */
	answer = ~sum;				/* truncate to 16 bits */
	return (answer);
}

/*
 * 			T V S U B
 * 
 * Subtract 2 timeval structs:  out = out - in.
 * 
 * Out is assumed to be >= in.
d464 1
a464 2
tvsub( out, in )
register struct timeval *out, *in;
d466 22
a487 7
	if(out->tv_usec < in->tv_usec){	/* borrow */
		out->tv_sec--;
		out->tv_usec += 1000000;
	}
	out->tv_usec -= in->tv_usec;
	out->tv_sec -= in->tv_sec;
}
d489 1
a489 53
/*
 *			F I N I S H
 *
 * Print out statistics, and give up.
 * Heavily buffered STDIO is used here, so that all the statistics
 * will be written with 1 sys-write call.  This is nice when more
 * than one copy of the program is running on a terminal;  it prevents
 * the statistics output from becomming intermingled.
 */
finish()
{
	alarm(0);
	printf("\n----%s PING Statistics----\n", hostname );
	printf("%d packets transmitted, ", ntransmitted );
	printf("%d packets received, ", nreceived );
	if (ntransmitted)
	    printf("%d%% packet loss",
		(int) (((ntransmitted-nreceived)*100) / ntransmitted ) );
	printf("\n");
	if (nreceived && timing)
	    printf("round-trip (ms)  min/avg/max = %d/%d/%d\n",
		tmin,
		tsum / nreceived,
		tmax );
	fflush(stdout);
	if (s) close(s);
	exit(0);
}


amiga_interrupts()
{
	register long event, netread, timerevent;
	extern int Enable_Abort, _alarm_timerbit;
	extern int socket_sigio;

	Enable_Abort = 0;
	timerevent = 1L << _alarm_timerbit;
	netread = 1L << socket_sigio;

	for (;;) {
		event = Wait(netread | SIGBREAKF_CTRL_C | timerevent);
		if(event & netread){
			readit();
		}
		if(event & SIGBREAKF_CTRL_C){
			take_signal(SIGQUIT);
			finish();
		}
		if(event & timerevent){
			take_signal(SIGALRM);
		}
	}
a490 1

@
