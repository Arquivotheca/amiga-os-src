/* -----------------------------------------------------------------------
 * term.gbl		Handshake_src
 *
 * $Locker:  $
 *
 * $Id: term.gbl,v 1.1 91/05/09 14:37:11 bj Exp $
 *
 * $Revision: 1.1 $
 *
 * $Header: HOG:Other/inet/src/c/hs/h/RCS/term.gbl,v 1.1 91/05/09 14:37:11 bj Exp $
 *
 * $Log:	term.gbl,v $
Revision 1.1  91/05/09  14:37:11  bj
Initial revision

 *
 *------------------------------------------------------------------------
 */

/*
* CBACK.O Setup Variables.
*/

char *_procname    = "Handshake";
long _stack        = 16384L;
long _priority     = 0L;
long _BackGroundIO = 1L;

/*
* Fast memory Globals
*/

unsigned char        Title_line[80]
= "HandShake V2.20c                             LEDs \xb0 \xb0 \xb0 \xb0           ";

unsigned char        MemMessage[] = "\x00\x14\x19Out of Memory\0\0";

unsigned char        Nvr[257];

unsigned char        Imagefile[257] = "Handshake.image";

unsigned long        Imagefilehandle;
unsigned char        dial_descriptor [ 32 ];
unsigned char        StartMacro[ 257 ];

struct TextAttr      TermFont =
  {
    NULL,
    8,
    FS_NORMAL,
    FPF_DISKFONT
  };

struct   NewScreen   NewScreen = 
  {
    0, 0,               /* Left Edge, Top Edge */
    660, 204,           /* Width, Height       */
    2,                  /* Depth               */
    0, 1,               /* Detail and Block pen*/
    HIRES,              /* Display Modes       */
    CUSTOMSCREEN,       /* Screen Type         */
    &TermFont,          /* Font                */
    Title_line,         /* Screen Title */
    NULL,               /* No Special Gadgets  */
    NULL                /* No Custom bitmap    */
  };

struct  NewWindow    NewWindow =
  {
    0,                  /* LeftEdge     */
    0,                  /* TopEdge      */
    660,                /* Width        */
    204,                /* Height       */
    0,                  /* Detail Pen   */
    1,                  /* Block Pen    */
    MENUPICK      |     /* IDCMPFlags   */
	/*
	MENUVERIFY    |
	*/
    ACTIVEWINDOW  |
    INACTIVEWINDOW|
    GADGETUP,
    SMART_REFRESH |     /* Flags        */
    ACTIVATE      |
    BORDERLESS    | 
    BACKDROP,
    NULL,               /* FirstGadget  */
    NULL,               /* CheckMark    */
    NULL,               /* Title        */
    NULL,               /* Screen       */
    NULL,               /* BitMap       */
    660,                /* MinWidth     */
    204,                /* MinHeight    */
    660,                /* MaxWidth     */
    204,                /* MaxHeight    */
    CUSTOMSCREEN        /* Type         */
  };

struct  NewWindow    NewTWindow =
  {
    39,                 /* LeftEdge     */
    19,                 /* TopEdge      */
    500,                /* Width        */
    55,                 /* Height       */
    0,                  /* Detail Pen   */
    1,                  /* Block Pen    */
    CLOSEWINDOW,        /* IDCMP Flags  */
    SMART_REFRESH |     /* Flags        */
    ACTIVATE      |
    WINDOWDRAG    |
    WINDOWCLOSE,
    NULL,               /* FirstGadget  */
    NULL,               /* CheckMark    */
    NULL,               /* Title        */
    NULL,               /* Screen       */
    NULL,               /* BitMap       */
    500,                /* MinWidth     */
    55,                 /* MinHeight    */
    500,                /* MaxWidth     */
    55,                 /* MaxHeight    */
    CUSTOMSCREEN        /* Type         */
  };

struct  NewWindow    NewWWindow =
  {
    39,                 /* LeftEdge     */
    19,                 /* TopEdge      */
    500,                /* Width        */
    55,                 /* Height       */
    0,                  /* Detail Pen   */
    1,                  /* Block Pen    */
    CLOSEWINDOW,        /* IDCMP Flags  */
    SMART_REFRESH |     /* Flags        */
    WINDOWDEPTH   |
    WINDOWDRAG,
    NULL,               /* FirstGadget  */
    NULL,               /* CheckMark    */
    NULL,               /* Title        */
    NULL,               /* Screen       */
    NULL,               /* BitMap       */
    500,                /* MinWidth     */
    55,                 /* MinHeight    */
    500,                /* MaxWidth     */
    55,                 /* MaxHeight    */
    WBENCHSCREEN        /* Type         */
  };

struct Library       *XProtocolBase;
struct ArpBase       *ArpBase;
struct Library       *IconBase;
struct Library       *DiskfontBase;

struct Screen        *Screen;
struct Window        *Window;
struct Window        *TWindow;
struct Window        *WWindow;
APTR                 window_ptr;



unsigned short int   beeping;
unsigned short int   IDCMP_pending;
unsigned short int	 InvokationNumber;

struct Task          *blink1_task,
                     *ser_in_task,
                     *ser_out_task,
                     *main_task;

VT_message           echo_msg,
                     keyb_msg,
                     blink1_msg,
                     si_msg,
                     so_msg,
                     so2main_msg,
                     si2main_msg;

unsigned char        *blink1_stack,
                     *ser_in_stack,
                     *ser_out_stack;

struct IOExtSer      ser_req,
                     ser_in_req,
                     ser_rp_req,
                     ser_out_req,
                     temp_ser_req;
struct IOStdReq      con_in_req,
                     con_kb_req;

struct MsgPort       *main_task_port,
                     *si_task_port,
                     *so_task_port,
                     *blink1_task_port,

                     *ser_port,
                     *con_in_port,
                     *con_kb_port,
                     *ser_in_port,
                     *ser_rp_port,
                     *ser_out_port,
                     *timeout_port,
                     *so_timeout_port,
                     *temp_ser_port,
                     *blink1_port;

unsigned char        ser_out_buffer[4];
unsigned char        scr_out_buffer[256];
unsigned short int   scr_out_count,
                     scr_out_limit = 1;

struct IntuiMessage  *message;

unsigned long        class;
unsigned short       code;
APTR                 address;
unsigned short       Quitflag;

short                ep[MAXPN];
unsigned short       glset,
                     grset;

VTM                  tmodes;
NVM                  nvmodes;
VCB                  vcb;
FTCB                 ftcb;

/*
* Video ViewPort and RasterPort Globals.
*/

struct ViewPort      *VPort;
struct RastPort      *RPort;

/*
* Timer Variables
*/

struct timerequest   blink1_req,
                     timeout_req,
                     so_timeout_req;

/*
* Font Variables
*/

unsigned char        SoftFontName[4];

struct TextFont      *NormalFont;
struct TextFont      *UKFont;
struct TextFont      *SGCSFont;
struct TextFont      *DSCSFont;
struct TextFont      *SoftFont;
struct TextFont      *CurrentFont;

struct TextFont      **g[4] =
  { &NormalFont, &DSCSFont,
    &NormalFont, &DSCSFont
  };

struct TextFont      **temp_g[4] = 
  { &NormalFont, &DSCSFont,
    &NormalFont, &DSCSFont
  };

struct TextFont      *Normal80;
struct TextFont      *dw40font;
struct TextFont      *topdh40font;
struct TextFont      *botdh40font;
struct TextFont      *ascii128font;
struct TextFont      *dw64font;
struct TextFont      *topdh64font;
struct TextFont      *botdh64font;

struct TextFont      *ansisgcsfont;
struct TextFont      *dwsgcs40font;
struct TextFont      *topdhsgcs40font;
struct TextFont      *botdhsgcs40font;
struct TextFont      *ansisgcs128font;
struct TextFont      *dwsgcs64font;
struct TextFont      *topdhsgcs64font;
struct TextFont      *botdhsgcs64font;

struct TextFont      *dscs80font;
struct TextFont      *dwdscs40font;
struct TextFont      *topdhdscs40font;
struct TextFont      *botdhdscs40font;
struct TextFont      *dscs128font;
struct TextFont      *dwdscs64font;
struct TextFont      *topdhdscs64font;
struct TextFont      *botdhdscs64font;

struct TextFont      *soft80font;
struct TextFont      *dwsoft40font;
struct TextFont      *topdhsoft40font;
struct TextFont      *botdhsoft40font;
struct TextFont      *soft128font;
struct TextFont      *dwsoft64font;
struct TextFont      *topdhsoft64font;
struct TextFont      *botdhsoft64font;

struct TextFont      *vt52sgcsfont;

struct TextFont      **NormFontTab [] =
  {
    &topdh40font,
    &botdh40font,
    &Normal80,
    &dw40font,
    &topdh64font,
    &botdh64font,
    &ascii128font,
    &dw64font
  };

struct TextFont      **SGCSFontTab [] =
  {
    &topdhsgcs40font,
    &botdhsgcs40font,
    &ansisgcsfont,
    &dwsgcs40font,
    &topdhsgcs64font,
    &botdhsgcs64font,
    &ansisgcs128font,
    &dwsgcs64font
  };

struct TextFont      **DSCSFontTab [] =
  {
    &topdhdscs40font,
    &botdhdscs40font,
    &dscs80font,
    &dwdscs40font,
    &topdhdscs64font,
    &botdhdscs64font,
    &dscs128font,
    &dwdscs64font
  };

struct TextFont      **SoftFontTab [] =
  {
    &topdhsoft40font,
    &botdhsoft40font,
    &soft80font,
    &dwsoft40font,
    &topdhsoft64font,
    &botdhsoft64font,
    &soft128font,
    &dwsoft64font
  };

struct KeyMap        KeyMap,
                     OrigKeyMap;

unsigned char        LineAttr[48] =
  {
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5,
    5,5,5,5,5,5
  };
  
unsigned short int   GetLength;

unsigned short int   Print_from_line;
unsigned short int   Print_to_line;
unsigned char        Print_form_feed;
unsigned char        Print_char;
  
unsigned char        *CharAttr;
unsigned char        *ScreenImage;

unsigned long int    mask,
                     IDCMPmask,
                     inputmask,
                     RexxMask;

unsigned long int    timeoutmask,
                     serialmask;

unsigned char        local_echo_char;
unsigned char        close_ports;
unsigned char        home_cursor;
unsigned char        IDCMP_in_progress;
unsigned char        Si_asleep = 1,
                     So_asleep = 1;

unsigned short int   crctbl[ 256 ];

