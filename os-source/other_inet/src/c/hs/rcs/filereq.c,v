head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     91.05.09.15.18.58;  author bj;  state Exp;
branches ;
next     1.1;

1.1
date     91.05.09.15.17.07;  author bj;  state Exp;
branches ;
next     ;


desc
@Original EH file. This module, as written, wants to see ARP library.
This will be changed to use ASL library - asap.
@


1.2
log
@Removed all use of ARP library file requester. For now,
you have to use a simple string gadget requster to enter
filenames.  ASL is on the way.
@
text
@/* -----------------------------------------------------------------------
 * filereq.c		handshake_src
 *
 * $Locker$
 *
 * $Id$
 *
 * $Revision$
 *
 * $Header$
 *
 * $Log$
 *
 *------------------------------------------------------------------------
 */


#include <exec/types.h>
#include "termall.h"

static BYTE Pattern[32] ;

USHORT 
FileReq ( UBYTE *title, UBYTE *fname )
{
	return ( (USHORT) GetStringFromUser ( title, fname, FNAMESIZE)) ;
}
    
/* ===================================================
 * SetPattern()
 * ==================================================
 */


void 
SetPattern ( BYTE *pattern )
{
	strcpy ( Pattern, pattern );
}
@


1.1
log
@Initial revision
@
text
@d17 2
a19 65
#include "libraries/arpbase.h"
#include "arpfunctions.h"

static unsigned char rcsid[] = "$Header: Work:HandShake/RCS/filereq.c,v 1.5 90/06/19 20:43:50 ERH Exp $";

#define MAXPATH     ( (FCHARS * 10) + DSIZE + 1)

static BYTE Prompt[81];
static BYTE Filename[256 + 1];
static BYTE Directory[256];
static BYTE Pattern[32];

static struct FileRequester FR =
  {
    Prompt,
    Filename,
    Directory,
    NULL,
    NULL,
    NULL,
    NULL,
  };


void SetPattern ( pattern )
BYTE *pattern;
  {
    strcpy ( Pattern, pattern );
  }

ULONG __stdargs  FRFunction ( mask, object )
ULONG   mask;
CPTR    object;
  {
    unsigned char           extension[20];
    volatile ULONG          *retptr = &mask;
    
    if ( mask & FRF_DoWildFunc )
      {
        if ( !*Pattern ||
             ((struct FileInfoBlock *)(object+20))->fib_DirEntryType > 0L )
          {
            ((volatile ULONG )*retptr) = 0L;
            return ( *retptr );
          }
            
        if ( *Pattern != '^' )
          {
            stcgfe ( extension,
                    ((struct FileInfoBlock *)(object+20))->fib_FileName );
            ((volatile ULONG)*retptr) = (ULONG) stricmp ( Pattern, extension );
            return ( *retptr );
          }
        else
          {
            ((volatile ULONG)*retptr) = (ULONG) strncmp ( Pattern+1,
                ((struct FileInfoBlock *)(object+20))->fib_FileName,
                strlen ( Pattern + 1 ) );
            return ( *retptr );
          }
      }
    ((volatile ULONG )*retptr) = 0L;
    return ( (volatile ULONG )*retptr );
  }

d21 1
a21 72
void BuildFullName ( fullname, fname )
unsigned char *fullname;
unsigned char *fname;
  {
    unsigned char *sptr;
    unsigned long int       origlock,
                            work1lock,
                            nodelock;
    struct FileInfoBlock    *fib;
    
    origlock = CurrentDir ( (long) "" );
    CurrentDir ( origlock );
    
    fib = (struct FileInfoBlock *) HSAllocMem ( sizeof (struct FileInfoBlock),
                                              MEMF_PUBLIC );
    if ( !fib )
      {
        DisplayAlert ( AG_NoMemory, MemMessage, 60L );
        ShutDown ();
      }
    *fullname = '\0';
    
    if ( access ( fname, 0 ) == -1 )
      {
        work1lock = DupLock ( origlock );
      }
    else
      {
        nodelock = Lock ( fname, ACCESS_READ );
        Examine ( nodelock, fib );
        if ( fib->fib_DirEntryType > 0 )
            strins ( fullname, "/");
        strins ( fullname, fib->fib_FileName );
        work1lock = ParentDir ( nodelock );
        UnLock ( nodelock );
      }
    
    while ( work1lock )
      {
        strins ( fullname, "/" );
        Examine ( work1lock, fib );
        strins ( fullname, fib->fib_FileName );
        nodelock = work1lock;
        work1lock = ParentDir ( work1lock );
        UnLock ( nodelock );
      }
      
    sptr = strchr ( fullname, '/' );
    if ( sptr )
        *sptr = ':';
    else
        strcat (fullname, ":" );
        
    HSFreeMem ( (char *) fib, sizeof(struct FileInfoBlock) );
  }

void FileReqDefaults ( fname )
unsigned char *fname;
  {
    unsigned char           fullname[256];
    
    BuildFullName ( fullname, fname );
    stcgfp ( Directory, fullname );
    stcgfn ( Filename,  fullname );
  }

unsigned short int FileReq ( title, fname )
unsigned char *title;
unsigned char *fname;
  {
    unsigned char   *selection;
    unsigned short int color;
d23 17
a39 37
    if ( !ArpBase || !nvmodes.freqtype )
      {
        return ( (unsigned short int) GetStringFromUser ( title, fname,
                                                          FNAMESIZE ) );
      }
    
    FileReqDefaults ( fname );
    
    if ( Screen->BitMap.Depth == 2 )
      {
        StopBlinkTask ();
        color = nvmodes.color3;
        SetRGB4 ( VPort, ( 1L << Screen->BitMap.Depth ) - 1,
            (long)color >> 8, ( color >> 4 ) & 0xfL, color & 0xfL );
      }
 
    strcpy ( FR.fr_Hail, title );
    FR.fr_Window    = Window;
    FR.fr_FuncFlags = FRF_DoWildFunc;
    FR.fr_Function  = (void *)FRFunction;
    selection = FileRequest( &FR );
    *Pattern = '\0';
    
    if ( Screen->BitMap.Depth == 2 )
        StartBlinkTask ();
 
    if ( selection )
      {
        strcpy ( fname, Directory );
        if ( Directory [ strlen ( Directory ) - 1 ] != ':' )
            strcat ( fname, "/" );
        if ( *selection )
            strcat ( fname, Filename );
        return ( 1 );
      }
    return ( 0 );
  }
@
