head     1.6;
branch   ;
access   ;
symbols  Release1:1.1;
locks    ; strict;
comment  @ * @;


1.6
date     92.10.23.13.12.39;  author bj;  state Exp;
branches ;
next     1.5;

1.5
date     92.10.20.16.59.33;  author bj;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.16.16.36.52;  author martin;  state Exp;
branches ;
next     1.3;

1.3
date     91.09.03.22.15.20;  author martin;  state Exp;
branches ;
next     1.2;

1.2
date     91.09.03.21.15.58;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.09.14.01.16;  author bj;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@Binary version 2.5. Removed errant debug code.
@
text
@/* ---------------------------------------------------------------------------------
 * ROUTE.c
 *
 * $Locker:  $
 *
 * $Id: route.c,v 1.5 92/10/20 16:59:33 bj Exp $
 *
 * $Revision: 1.5 $
 *
 * $Header: AS225:src/c/route/RCS/route.c,v 1.5 92/10/20 16:59:33 bj Exp $
 *
 *-----------------------------------------------------------------------------------
 */




/*
 * Copyright (c) 1983 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */


#include <sys/param.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>

#include <net/route.h>
#include <netinet/in.h>
#include <netns/ns.h>

#include <stdio.h>
#include <errno.h>
#include <ctype.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>

#include <ss/socket.h>
#include <netinet/inet.h>
#include <exec/execbase.h>
#include <exec/memory.h>
#include <dos/dos.h>
#include <proto/all.h>

#include "route_rev.h"

#define CMDREV		"\0$VER: " VSTRING
#define TEMPLATE	"-N=NOSYMS/S,-F=FLUSH/S,CMD/M" CMDREV
#define OPT_N		0
#define OPT_F		1
#define OPT_CMD		2
#define OPT_COUNT	3

struct Library *SockBase ;
struct rtentry route;
int	s;
int nflag;
int errno;

int flushroutes(void);
int main(void);
void routename(struct sockaddr *sa, char *string);
void netname(struct sockaddr *sa, char *string);
int newroute(short argc, char *argv[]);
int getaddr(char *s,struct sockaddr_in *sin,struct hostent **hpp,char *name,int isnet);
int mynlist(struct nlist *nlp);

int main(void)
{
	long opts[OPT_COUNT+1] ;
	struct RDargs *rdargs ;
	char **argv ;
	short argc ;
	int ret_val = RETURN_FAIL ;
	STRPTR args ;
	char buffer[256] ;
	
    memset((char *)opts, 0, sizeof(opts)) ;
	
	if(SockBase = OpenLibrary( "inet:libs/socket.library", 1L )) 
	{
		setup_sockets( 5, &errno ) ;
		if((s = socket(AF_INET, SOCK_RAW, 0)) >= 0)
		{
			if((args = GetArgStr()) && (strlen(args) > 1))
			{
			    if(rdargs = ReadArgs(TEMPLATE, opts, NULL))
				{
					if(opts[OPT_N])
					{
						nflag++ ;
					}

					if(opts[OPT_F]) 
					{
						if (flushroutes() < 0) 
						{
							ret_val = RETURN_WARN ;
							goto getout ;
						}
					}

					if (opts[OPT_CMD]) 
					{
						argv = (char **)(opts[OPT_CMD]) ;
						for(argc=0 ;argv[argc] ;argc++) 
							 ;
						if (strcmp(*argv, "add") == 0)
						{
							ret_val = newroute(argc,argv) ;
						}
						else if (strcmp(*argv, "delete") == 0)
						{
							ret_val = newroute(argc,argv) ;
						}
						else
						{
						    Printf("route: %s:  huh?\n", (LONG)*argv) ;
						}
					}
					FreeArgs(rdargs) ;
				}
				else
				{
					PrintFault(IoErr(), "route" ) ;
				}
			}
			else
			{
				PutStr("route requires an argument\n") ;
			}
getout:		
			s_close(s) ;
		}
		else
		{
			PutStr("route: socket open failed\n") ;
		}
		cleanup_sockets() ;
		CloseLibrary(SockBase) ;
	}
	else
	{
		PutStr("route: Opening of socket library failed.\n") ;
	}
	Exit(ret_val) ;
}


/*
 * Purge all entries in the routing tables not
 * associated with network interfaces.
 */
#include <nlist.h>

struct nlist nl[] = {
#define	N_RTHOST	0
	{ "_rthost" },
#define	N_RTNET		1
	{ "_rtnet" },
#define N_RTHASHSIZE	2
	{ "_rthashsize" },
	"",
};

int flushroutes()
{
	struct mbuf mb;
	register struct rtentry *rt;
	register struct mbuf *m;
	struct mbuf **routehash;
	int i, doinghost = 1;
	short rthashsize;
	char string[MAXHOSTNAMELEN+1];

	if(mynlist(nl) < 0) {
		PutStr("network is not running");
		return (-1);
	}
	if (nl[N_RTHOST].n_value == 0) {
		PutStr("\"rthost\", symbol not in namelist\n");
		return(-1);
	}
	if (nl[N_RTNET].n_value == 0) {
		PutStr("\"rtnet\", symbol not in namelist\n");
		return(-1);
	}
	if (nl[N_RTHASHSIZE].n_value == 0) {
		PutStr("\"rthashsize\", symbol not in namelist\n");
		return(-1);
	}

	memcpy(&rthashsize,nl[N_RTHASHSIZE].n_value,sizeof(rthashsize));
	routehash = (struct mbuf **)AllocMem(rthashsize*sizeof(struct mbuf *),MEMF_ANY);

	memcpy(routehash,nl[N_RTHOST].n_value,rthashsize*sizeof(struct mbuf *));

	PutStr("Flushing routing tables:\n");
again:
	for (i = 0; i < rthashsize; i++) {
		if (routehash[i] == 0)
			continue;
		m = routehash[i];
		while (m) {
			memcpy(&mb,m,sizeof(mb));
			rt = mtod(&mb, struct rtentry *);
			if (rt->rt_flags & RTF_GATEWAY) {
				if(doinghost)
					routename(&rt->rt_dst,string);
				else
					netname(&rt->rt_dst,string);

				Printf("%-20.20s ", (LONG)string);
				routename(&rt->rt_gateway,string);
				Printf("%-20.20s ", (LONG)string);

				if (s_ioctl(s, SIOCDELRT, (caddr_t)rt) < 0) {
					Printf("%s\n",(LONG)strerror(errno));
				} else
					PutStr("done\n");
			}
			m = mb.m_next;
		}
	}
	if (doinghost) {
		memcpy(routehash,nl[N_RTNET].n_value,rthashsize*sizeof(struct mbuf *));
		doinghost = 0;
		goto again;
	}
	FreeMem(routehash,rthashsize*sizeof(struct mbuf *));
	return (0);
}

void routename(struct sockaddr *sa, char *string)
{
	char *cp;
	struct hostent *hp;
	char domain[MAXHOSTNAMELEN + 1];

	if (gethostname(domain, MAXHOSTNAMELEN)==0 && (cp = strchr(domain, '.')))
		(void)strcpy(domain, cp + 1);
	else
		domain[0] = 0;

	if (sa->sa_family==AF_INET) {
		struct in_addr in = ((struct sockaddr_in *)sa)->sin_addr;

		cp = 0;
		if (in.s_addr == INADDR_ANY)
			cp = "default";
		if (cp == 0 && !nflag) {
			hp = gethostbyaddr((char *)&in, sizeof (struct in_addr),AF_INET);
			if (hp) {
				if ((cp = strchr(hp->h_name, '.')) && !strcmp(cp + 1, domain))
					*cp = 0;
				cp = hp->h_name;
			}
		}
		if (cp)
			strcpy(string, cp);
		else {
#define C(x)	((x) & 0xff)
			in.s_addr = ntohl(in.s_addr);
			sprintf(string, "%lu.%lu.%lu.%lu", C(in.s_addr >> 24),
			   C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
		}
	} else {
		u_short *s = (u_short *)sa->sa_data;
		sprintf(string, "af %ld: %lx %lx %lx %lx %lx %lx %lx",
		    sa->sa_family, s[0], s[1], s[2], s[3], s[4], s[5], s[6]);
	}
}

/*
 * Return the name of the network whose address is given.
 * The address is assumed to be that of a net or subnet, not a host.
 */

void netname(struct sockaddr *sa, char *string)
{
	char *cp = 0;
	struct netent *np;
	u_long net, mask;
	register u_long i;
	int subnetshift;

	if (sa->sa_family==AF_INET) {
		struct in_addr in = ((struct sockaddr_in *)sa)->sin_addr;

		i = in.s_addr = ntohl(in.s_addr);
		if (in.s_addr == 0)
			cp = "default";
		else if (!nflag) {
			if (IN_CLASSA(i)) {
				mask = IN_CLASSA_NET;
				subnetshift = 8;
			} else if (IN_CLASSB(i)) {
				mask = IN_CLASSB_NET;
				subnetshift = 8;
			} else {
				mask = IN_CLASSC_NET;
				subnetshift = 4;
			}
			/*
			 * If there are more bits than the standard mask
			 * would suggest, subnets must be in use.
			 * Guess at the subnet mask, assuming reasonable
			 * width subnet fields.
			 */
			while (in.s_addr &~ mask)
				mask = (long)mask >> subnetshift;
			net = in.s_addr & mask;
			while ((mask & 1) == 0)
				mask >>= 1, net >>= 1;
			np = getnetbyaddr(net, AF_INET);
			if (np)
				cp = np->n_name;
		}
		if (cp)
			strcpy(string, cp);
		else if ((in.s_addr & 0xffffff) == 0)
			(void)sprintf(string, "%lu", C(in.s_addr >> 24));
		else if ((in.s_addr & 0xffff) == 0)
			(void)sprintf(string, "%lu.%lu", C(in.s_addr >> 24),
			    C(in.s_addr >> 16));
		else if ((in.s_addr & 0xff) == 0)
			(void)sprintf(string, "%lu.%lu.%lu", C(in.s_addr >> 24),
			    C(in.s_addr >> 16), C(in.s_addr >> 8));
		else
			(void)sprintf(string, "%lu.%lu.%lu.%lu", C(in.s_addr >> 24),
			    C(in.s_addr >> 16), C(in.s_addr >> 8),
			    C(in.s_addr));
	} else {	
		u_short *s = (u_short *)sa->sa_data;

		sprintf(string, "af %ld: %lx %lx %lx %lx %lx %lx %lx",
			sa->sa_family, s[0], s[1], s[2], s[3], s[4], s[5], s[6]);
	}
}

int newroute(short argc, char *argv[])
{
	struct sockaddr_in *sin;
	char *cmd, dest[MAXHOSTNAMELEN+1], gateway[MAXHOSTNAMELEN+1];
	int ishost, metric = 0, ret, attempts, oerrno;
	short forcehost = 0;
	short forcenet = 0;
	struct hostent *hp;

	cmd = argv[0];
	if (argc > 2) {
		if ((strcmp(argv[1], "host")) == 0) {
			forcehost++;
			argc--;
			argv++;
		} else if ((strcmp(argv[1], "net")) == 0) {
			forcenet++;
			argc--;
			argv++;
		}
	}

	if (*cmd == 'a') {
		if (argc != 4) {
			Printf("usage: %s destination gateway metric\n", (LONG)cmd);
			PutStr("(metric of 0 if gateway is this host)\n");
			return(RETURN_WARN);
		}
		metric = atoi(argv[3]);
	} else {
		if (argc < 3) {
			Printf("usage: %s destination gateway\n", (LONG)cmd);
			return(RETURN_WARN);
		}
	}

//	sin = (struct sockaddr_in *)&route.rt_dst;
	ishost = getaddr(argv[1], (struct sockaddr_in *)&route.rt_dst, &hp, dest, forcenet);
	if(ishost==-1)
		return(RETURN_ERROR);
	if (forcehost)
		ishost = 1;
	if (forcenet)
		ishost = 0;
	sin = (struct sockaddr_in *)&route.rt_gateway;
	if(getaddr(argv[2], (struct sockaddr_in *)&route.rt_gateway, &hp, gateway, 0)==-1)
		return(RETURN_ERROR);
	route.rt_flags = RTF_UP;
	if (ishost)
		route.rt_flags |= RTF_HOST;
	if (metric > 0)
		route.rt_flags |= RTF_GATEWAY;
	for (attempts = 1; ; attempts++) {
		errno = 0;
		if ((ret = s_ioctl(s, *cmd == 'a' ? SIOCADDRT : SIOCDELRT,
		     (caddr_t)&route)) == 0)
			break;
		if (errno != ENETUNREACH && errno != ESRCH)
			break;
		if (hp && hp->h_addr_list[1]) {
			hp->h_addr_list++;
			bcopy(hp->h_addr_list[0], (caddr_t)&sin->sin_addr,
			    hp->h_length);
		} else
			break;
	}
	oerrno = errno;
	Printf("%s %s %s: gateway %s", (LONG)cmd, ishost? "host" : "net",dest,gateway);
	if (attempts > 1 && ret == 0)
	    Printf(" (%s)",(LONG)inet_ntoa(((struct sockaddr_in *)&route.rt_gateway)->sin_addr));
	if (ret == 0)
		PutStr("\n");
	else {
		PutStr(": ");
		Printf("%s\n",(LONG)strerror(oerrno));
	}
	return(0);
}


/*
 * Interpret an argument as a network address of some kind,
 * returning 1 if a host address, 0 if a network address.
 */
getaddr(s, sin, hpp, name, isnet)
	char *s;
	struct sockaddr_in *sin;
	struct hostent **hpp;
	char *name;
	int isnet;
{
	struct hostent *hp;
	struct netent *np;
	u_long val;

	*hpp = 0;
	if (strcmp(s, "default") == 0) {
		sin->sin_family = AF_INET;
		sin->sin_addr = inet_makeaddr(0, INADDR_ANY);
		strcpy(name,"default");
		return(0);
	}
	sin->sin_family = AF_INET;
	if (isnet == 0) {
		val = inet_addr(s);
		if (val != -1) {
			sin->sin_addr.s_addr = val;
			strcpy(name,s);
			return(inet_lnaof(sin->sin_addr) != INADDR_ANY);
		}
	}
	val = inet_network(s);
	if (val != -1) {
		sin->sin_addr = inet_makeaddr(val, INADDR_ANY);
		strcpy(name,s);
		return(0);
	}
	np = getnetbyname(s);
	if (np) {
		sin->sin_family = np->n_addrtype;
		sin->sin_addr = inet_makeaddr(np->n_net, INADDR_ANY);
		strcpy(name,np->n_name);
		return(0);
	}
	hp = gethostbyname(s);
	if (hp) {
		*hpp = hp;
		sin->sin_family = hp->h_addrtype;
		bcopy(hp->h_addr, &sin->sin_addr, hp->h_length);
		strcpy(name,hp->h_name);
		return(1);
	}
	Printf("%s: bad value\n", (LONG)s);
	return(-1);
}


/*
** Simple nlist of inet.library
*/

extern struct ExecBase *SysBase;

int mynlist(struct nlist *nlp)
{
	register struct InetNode *ip;
	register struct nlist *kl;
	register i;

	Forbid();
	ip = (struct InetNode *)FindName(&SysBase->LibList, "inet.library");
	if(!ip){
		Permit();
		return -1;
	}

	for(; nlp->n_name && nlp->n_name[0]; nlp++){
		nlp->n_value = 0l;
		kl = ip->names;
		for(i = 0; i < ip->nlsize; i++, kl++){
			if(kl->n_name && (strcmp(nlp->n_name, kl->n_name) == 0)){
				nlp->n_value = kl->n_value;
				nlp->n_type = 1;
				break;
			}
		}
	}
	Permit();

	return 0;
}
@


1.5
log
@
Binary 2.4  AS225 R2

This version fixes the ReadArgs bug (no error checking on the
return from ReadArgs()), adds options to the readargs template
and adds better error reporting.  Main() was restructured.
@
text
@d6 1
a6 1
 * $Id: route.c,v 1.4 91/10/16 16:36:52 martin Exp $
d8 1
a8 1
 * $Revision: 1.4 $
d10 1
a10 1
 * $Header: AS225:src/c/route/RCS/route.c,v 1.4 91/10/16 16:36:52 martin Exp $
a151 2
			sprintf(buffer, "errno = %ld\n", (long)errno) ;
			PutStr(buffer) ;
@


1.4
log
@fixes enforcer hit when "route add"
or "route delete" was entered
@
text
@d4 1
a4 1
 * $Locker: martin $
d6 1
a6 1
 * $Id: route.c,v 1.3 91/09/03 22:15:20 martin Exp Locker: martin $
d8 1
a8 1
 * $Revision: 1.3 $
d10 1
a10 1
 * $Header: inet2:src/c/route/RCS/route.c,v 1.3 91/09/03 22:15:20 martin Exp Locker: martin $
d62 1
a62 1
#define TEMPLATE	"-N/S,-F/S,CMD/M" CMDREV
d84 65
a148 42
	long opts[OPT_COUNT+1];
	struct RDargs *rdargs;
	char **argv;
	short argc;
	long ret_val = RETURN_OK;

    if ((SockBase = OpenLibrary( "inet:libs/socket.library", 1L ))==NULL) {
        PutStr("Opening of socket library failed.\n");
		ret_val = RETURN_FAIL;
        goto exit1;
    }

    /* initialize for 5 sockets */
    setup_sockets( 5, &errno );

	s = socket(AF_INET, SOCK_RAW, 0);
	if (s < 0) {
		PutStr("socket open failed\n");
		ret_val = RETURN_ERROR;
		goto exit2;
	}

    memset((char *)opts, 0, sizeof(opts));
    rdargs = ReadArgs(TEMPLATE, opts, NULL);

	if(opts[OPT_N])
		nflag++;

	if(opts[OPT_F]) {
		if (flushroutes() < 0) {
			ret_val = RETURN_WARN;
			goto exit3;
		}
	}

	if (opts[OPT_CMD]) {
		argv = (char **)(opts[OPT_CMD]);
		for(argc=0;argv[argc];argc++) ;
		if (strcmp(*argv, "add") == 0)
			ret_val = newroute(argc,argv);
		else if (strcmp(*argv, "delete") == 0)
			ret_val = newroute(argc,argv);
d150 7
a156 1
			Printf("%s: huh?\n", *argv);
d158 6
a164 9
exit3:
	FreeArgs(rdargs);
	s_close(s);
exit2:
    cleanup_sockets();
    CloseLibrary(SockBase);
exit1:
	Exit(ret_val);
}
d229 1
a229 1
				Printf("%-20.20s ", string);
d231 1
a231 1
				Printf("%-20.20s ", string);
d234 1
a234 1
					Printf("%s\n",strerror(errno));
d268 1
a268 1
			hp = gethostbyaddr(&in, sizeof (struct in_addr),AF_INET);
d381 1
a381 1
			Printf("usage: %s destination gateway metric\n", cmd);
d388 1
a388 1
			Printf("usage: %s destination gateway\n", cmd);
d393 2
a394 2
	sin = (struct sockaddr_in *)&route.rt_dst;
	ishost = getaddr(argv[1], &route.rt_dst, &hp, dest, forcenet);
d402 1
a402 1
	if(getaddr(argv[2], &route.rt_gateway, &hp, gateway, 0)==-1)
d424 1
a424 1
	Printf("%s %s %s: gateway %s", cmd, ishost? "host" : "net",dest,gateway);
d426 1
a426 1
	    Printf(" (%s)",inet_ntoa(((struct sockaddr_in *)&route.rt_gateway)->sin_addr));
d431 1
a431 1
		Printf("%s\n",strerror(oerrno));
d489 1
a489 1
	Printf("%s: bad value\n", s);
@


1.3
log
@"route add foo foo 1" where foo was unknown produced a bug
version 2.2
@
text
@d6 1
a6 1
 * $Id: route.c,v 1.2 91/09/03 21:15:58 martin Exp Locker: martin $
d8 1
a8 1
 * $Revision: 1.2 $
d10 1
a10 1
 * $Header: inet2:src/c/route/RCS/route.c,v 1.2 91/09/03 21:15:58 martin Exp Locker: martin $
d341 10
a350 8
	if ((strcmp(argv[1], "host")) == 0) {
		forcehost++;
		argc--;
		argv++;
	} else if ((strcmp(argv[1], "net")) == 0) {
		forcenet++;
		argc--;
		argv++;
d352 1
d366 1
@


1.2
log
@version 2.1
major rewrite
SAS version
Now uses ReadArgs()
@
text
@d6 1
a6 1
 * $Id: route.c,v 1.1 90/11/09 14:01:16 bj Exp Locker: martin $
d8 1
a8 1
 * $Revision: 1.1 $
d10 1
a10 1
 * $Header: inet2:src/c/route/RCS/route.c,v 1.1 90/11/09 14:01:16 bj Exp Locker: martin $
d78 1
a78 1
void newroute(short argc, char *argv[]);
d123 1
a123 1
			newroute(argc,argv);
d125 1
a125 1
			newroute(argc,argv);
a203 1
				Flush(Output());
d208 1
a208 1
					Printf("delete: %s\n",strerror(errno));
d226 1
a226 1
	register char *cp;
d235 2
a236 1
	switch (sa->sa_family) {
a237 4
	case AF_INET:
	{	struct in_addr in;
		in = ((struct sockaddr_in *)sa)->sin_addr;

d257 3
a259 9
		break;
	}

//	case AF_NS:
//		return (ns_print((struct sockaddr_ns *)sa));

	default:
	    {	u_short *s = (u_short *)sa->sa_data;
			sprintf(string, "af %ld: %lx %lx %lx %lx %lx %lx %lx",
a260 2
			break;
	    }
d272 1
a272 1
	struct netent *np = 0;
d277 2
a278 5
	switch (sa->sa_family) {

	case AF_INET:
	{	struct in_addr in;
		in = ((struct sockaddr_in *)sa)->sin_addr;
d323 2
a324 2
		break;
	}
d326 1
a326 8
//	case AF_NS:
//		return (ns_print((struct sockaddr_ns *)sa));
//		break;

	default:
	    {	u_short *s = (u_short *)sa->sa_data;

			sprintf(string, "af %ld: %lx %lx %lx %lx %lx %lx %lx",
a327 2
			break;
	    }
d331 1
a331 1
void newroute(short argc, char *argv[])
d354 1
a354 1
			return;
d360 1
a360 1
			return;
d365 2
d372 2
a373 1
	(void) getaddr(argv[2], &route.rt_gateway, &hp, gateway, 0);
d403 1
d460 1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Locker$
d6 1
a6 1
 * $Id$
d8 1
a8 1
 * $Revision$
d10 1
a10 1
 * $Header$
d49 2
d52 1
a53 1
#include <exec/types.h>
d55 3
a57 1
extern struct ExecBase *SysBase;
d59 1
d61 6
a66 3
#include "route_rev.h"
static char *compiler = "MANX36 MANX36" ;
static char *routevers = VERSTAG ;
d68 2
a69 1
struct	rtentry route;
d71 24
a94 4
int	forcehost, forcenet, doflush, nflag;
struct	sockaddr_in sin = { AF_INET };
struct	in_addr inet_makeaddr();
char	*malloc();
d96 3
a98 12
main(argc, argv)
	int argc;
	char *argv[];
{

	if (argc < 2)
		printf("usage: route [ -n ] [ -f ] [ cmd [ net | host ] args ]\n"),
		exit(1);
	if(!inet_up()){
		fprintf(stderr, "route: network is not running.\n");
		exit(1);
	}
d101 3
a103 2
		perror("route: socket");
		exit(1);
d105 12
a116 11
	argc--, argv++;
	for (; argc >  0 && argv[0][0] == '-'; argc--, argv++) {
		for (argv[0]++; *argv[0]; argv[0]++)
			switch (*argv[0]) {
			case 'f':
				doflush++;
				break;
			case 'n':
				nflag++;
				break;
			}
d118 4
a121 3
	if (doflush)
		flushroutes();
	if (argc > 0) {
d123 1
a123 1
			newroute(argc, argv);
d125 1
a125 3
			newroute(argc, argv);
		else if (strcmp(*argv, "change") == 0)
			changeroute(argc-1, argv+1);
d127 1
a127 1
			printf("%s: huh?\n", *argv);
a128 1
}
d130 8
a137 14
static long addr;

kread(fd, buf, size)
{
	bcopy((caddr_t)addr, buf, size);
	addr += size;
}

klseek(fd, off, how)
	int	fd;
	long	off;
	int	how;
{
	addr = off;
d156 1
a156 1
flushroutes()
d162 1
a162 2
	int i, doinghost = 1, kmem;
	char *routename(), *netname();
d164 1
d166 3
a168 2
	if(nlist("/vmunix", nl) < 0){
	fprintf(stderr, "route: network is not running");
d171 2
a172 2
		printf("route: \"rthost\", symbol not in namelist\n");
		exit(1);
d175 2
a176 2
		printf("route: \"rtnet\", symbol not in namelist\n");
		exit(1);
d179 2
a180 2
		printf("route: \"rthashsize\", symbol not in namelist\n");
		exit(1);
d182 3
a184 3
	klseek(kmem, nl[N_RTHASHSIZE].n_value, 0);
	kread(kmem, &rthashsize, sizeof (rthashsize));
	routehash = (struct mbuf **)malloc(rthashsize*sizeof (struct mbuf *));
d186 3
a188 3
	klseek(kmem, nl[N_RTHOST].n_value, 0);
	kread(kmem, routehash, rthashsize*sizeof (struct mbuf *));
	printf("Flushing routing tables:\n");
d195 1
a195 2
			klseek(kmem, m, 0);
			kread(kmem, &mb, sizeof (mb));
d198 2
a199 6
				printf("%-20.20s ", doinghost ?
				    routename(&rt->rt_dst) :
				    netname(&rt->rt_dst));
				printf("%-20.20s ", routename(&rt->rt_gateway));
				if (ioctl(s, SIOCDELRT, (caddr_t)rt) < 0)
					error("delete");
d201 11
a211 1
					printf("done\n");
d217 1
a217 2
		klseek(kmem, nl[N_RTNET].n_value, 0);
		kread(kmem, routehash, rthashsize*sizeof (struct mbuf *));
d221 2
a222 2
	close(kmem);
	free(routehash);
d225 1
a225 3
char *
routename(sa)
	struct sockaddr *sa;
a227 1
	static char line[50];
d229 6
a234 4
	static char domain[MAXHOSTNAMELEN + 1];
	static int first = 1;
	char *index();
	char *ns_print();
a235 8
	if (first) {
		first = 0;
		if (gethostname(domain, MAXHOSTNAMELEN) == 0 &&
		    (cp = index(domain, '.')))
			(void) strcpy(domain, cp + 1);
		else
			domain[0] = 0;
	}
d239 1
a239 1
	    {	struct in_addr in;
d246 1
a246 2
			hp = gethostbyaddr(&in, sizeof (struct in_addr),
				AF_INET);
d248 1
a248 2
				if ((cp = index(hp->h_name, '.')) &&
				    !strcmp(cp + 1, domain))
d254 1
a254 1
			strcpy(line, cp);
d258 1
a258 1
			(void)sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
d262 1
a262 1
	    }
d264 2
a265 2
	case AF_NS:
		return (ns_print((struct sockaddr_ns *)sa));
d269 1
a269 2

		(void)sprintf(line, "af %d: %x %x %x %x %x %x %x",
d271 1
a271 1
		break;
a273 1
	return (line);
d280 2
a281 3
char *
netname(sa)
	struct sockaddr *sa;
a283 1
	static char line[50];
a287 1
	char *ns_print();
d292 1
a292 1
	    {	struct in_addr in;
d325 1
a325 1
			strcpy(line, cp);
d327 1
a327 1
			(void)sprintf(line, "%u", C(in.s_addr >> 24));
d329 1
a329 1
			(void)sprintf(line, "%u.%u", C(in.s_addr >> 24),
d332 1
a332 1
			(void)sprintf(line, "%u.%u.%u", C(in.s_addr >> 24),
d335 1
a335 1
			(void)sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
d339 1
a339 1
	    }
d341 3
a343 3
	case AF_NS:
		return (ns_print((struct sockaddr_ns *)sa));
		break;
d348 3
a350 3
		(void)sprintf(line, "af %d: %x %x %x %x %x %x %x",
		    sa->sa_family, s[0], s[1], s[2], s[3], s[4], s[5], s[6]);
		break;
a352 1
	return (line);
d355 1
a355 3
newroute(argc, argv)
	int argc;
	char *argv[];
d358 1
a358 1
	char *cmd, *dest, *gateway;
d360 2
a362 1
	extern int errno;
d367 2
a368 1
		argc--, argv++;
d371 2
a372 1
		argc--, argv++;
d376 2
a377 2
			printf("usage: %s destination gateway metric\n", cmd);
			printf("(metric of 0 if gateway is this host)\n");
d383 1
a383 1
			printf("usage: %s destination gateway\n", cmd);
d388 1
a388 1
	ishost = getaddr(argv[1], &route.rt_dst, &hp, &dest, forcenet);
d394 1
a394 1
	(void) getaddr(argv[2], &route.rt_gateway, &hp, &gateway, 0);
d402 1
a402 1
		if ((ret = ioctl(s, *cmd == 'a' ? SIOCADDRT : SIOCDELRT,
d415 1
a415 2
	printf("%s %s %s: gateway %s", cmd, ishost? "host" : "net",
		dest, gateway);
d417 1
a417 2
	    printf(" (%s)",
		inet_ntoa(((struct sockaddr_in *)&route.rt_gateway)->sin_addr));
d419 1
a419 1
		printf("\n");
d421 2
a422 31
		printf(": ");
		fflush(stdout);
		errno = oerrno;
		error(0);
	}
}

changeroute(argc, argv)
	int argc;
	char *argv[];
{
	printf("not supported\n");
}

error(cmd)
	char *cmd;
{
	extern int errno;

	switch(errno) {
	case ESRCH:
		fprintf(stderr, "not in table\n");
		break;
	case EBUSY:
		fprintf(stderr, "entry in use\n");
		break;
	case ENOBUFS:
		fprintf(stderr, "routing table overflow\n");
		break;
	default:
		perror(cmd);
a425 14
char *
savestr(s)
	char *s;
{
	char *sav;

	sav = malloc(strlen(s) + 1);
	if (sav == NULL) {
		fprintf("route: out of memory\n");
		exit(1);
	}
	strcpy(sav, s);
	return (sav);
}
d435 1
a435 1
	char **name;
d446 1
a446 1
		*name = "default";
d454 1
a454 1
			*name = s;
d461 1
a461 1
		*name = s;
d468 1
a468 1
		*name = savestr(np->n_name);
d476 1
a476 1
		*name = savestr(hp->h_name);
d479 1
a479 2
	fprintf(stderr, "%s: bad value\n", s);
	exit(1);
a481 26
short ns_nullh[] = {0,0,0};
short ns_bh[] = {-1,-1,-1};

char *
ns_print(sns)
struct sockaddr_ns *sns;
{
	struct ns_addr work;
	union { union ns_net net_e; u_long long_e; } net;
	u_short port;
	static char mybuf[50], cport[10], chost[25];
	char *host = "";
	register char *p; register u_char *q; u_char *q_lim;

	work = sns->sns_addr;
	port = ntohs(work.x_port);
	work.x_port = 0;
	net.net_e  = work.x_net;
	if (ns_nullhost(work) && net.long_e == 0) {
		if (port ) {
			(void)sprintf(mybuf, "*.%xH", port);
			upHex(mybuf);
		} else
			(void)sprintf(mybuf, "*.*");
		return (mybuf);
	}
d483 3
a485 15
	if (bcmp(ns_bh, work.x_host.c_host, 6) == 0) { 
		host = "any";
	} else if (bcmp(ns_nullh, work.x_host.c_host, 6) == 0) {
		host = "*";
	} else {
		q = work.x_host.c_host;
		(void)sprintf(chost, "%02x%02x%02x%02x%02x%02xH",
			q[0], q[1], q[2], q[3], q[4], q[5]);
		for (p = chost; *p == '0' && p < chost + 12; p++);
		host = p;
	}
	if (port)
		(void)sprintf(cport, ".%xH", htons(port));
	else
		*cport = 0;
d487 1
a487 10
	(void)sprintf(mybuf,"%xH.%s%s", ntohl(net.long_e), host, cport);
	upHex(mybuf);
	return(mybuf);
}

upHex(p0)
char *p0;
{
	register char *p = p0;
	for (; *p; p++) switch (*p) {
d489 23
a511 2
	case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		*p += ('A' - 'a');
d513 3
@
