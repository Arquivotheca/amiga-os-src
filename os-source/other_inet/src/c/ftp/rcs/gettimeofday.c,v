head     2.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


2.1
date     92.10.30.11.22.08;  author bj;  state Exp;
branches ;
next     2.0;

2.0
date     92.07.20.15.17.19;  author bj;  state Exp;
branches ;
next     ;


desc
@gettimeofday() function for ftp 2.x. 
@


2.1
log
@
Binary 2.3

Removed extra copyright notice. Registerized args.
@
text
@/* -----------------------------------------------------------------------
 * gettimeofday.c   for as225's FTP  R2
 *
 * $Locker:$
 *
 * $Id:$
 *
 * $Revision:$
 *
 * $Log:$
 *
 * $Header:$
 *
 *------------------------------------------------------------------------
 */
/* Copyright (C) 1990 by Commodore-Amiga */
#include <ss/socket.h>
#include <sys/time.h>
#include <config.h>
#include <exec/types.h>
#include <exec/lists.h>
#include <devices/timer.h>

#ifdef LATTICE
#include <proto/exec.h>
#endif
extern struct ExecBase *SysBase;


gettimeofday(REGISTER struct timeval *tp, REGISTER struct timezone *tzp)
{
    static struct timerequest t;    /* made static MMH */
    static struct timezone tz;
    short offset;

    if (OpenDevice(TIMERNAME, UNIT_VBLANK, (struct IORequest *)&t, 0L)) 
    {
        return -1;
    }

    t.tr_node.io_Message.mn_ReplyPort = CreateMsgPort();
    t.tr_node.io_Command = TR_GETSYSTIME;
    DoIO((struct IORequest *)&t);
    DeleteMsgPort(t.tr_node.io_Message.mn_ReplyPort);
    CloseDevice((struct IORequest *)&t);
    t.tr_time.tv_secs += 252460800;    /* correct to 1 Jan 70 */
    *tp =  t.tr_time;

    if(( offset = get_tz() ) > 0)
    {
        tz.tz_minuteswest = offset;
        tz.tz_dsttime = 0;    /* ignore daylight savings time for now */
        t.tr_time.tv_secs += offset*60;    /* correct for timezone */
    } 
    else 
    {
        tz.tz_minuteswest = 0;
        tz.tz_dsttime = 0;
    }

    return(0);
}

@


2.0
log
@Initial version. Complete rewrite for AS225 R2 (ftp)
MH source.
@
text
@d1 15
d30 1
a30 3
gettimeofday(tp, tzp)
	struct timeval *tp;
	struct timezone	*tzp;
d32 3
a34 3
	static struct timerequest t;	/* made static MMH */
	static struct timezone tz;
	short offset;
d36 24
a59 21
	if (OpenDevice(TIMERNAME, UNIT_VBLANK, (struct IORequest *)&t, 0L)) {
		return -1;
	}

	t.tr_node.io_Message.mn_ReplyPort = CreateMsgPort();
	t.tr_node.io_Command = TR_GETSYSTIME;
	DoIO((struct IORequest *)&t);
	DeleteMsgPort(t.tr_node.io_Message.mn_ReplyPort);
	CloseDevice((struct IORequest *)&t);
	t.tr_time.tv_secs += 252460800;	/* correct to 1 Jan 70 */
	*tp =  t.tr_time;

	offset = get_tz();
	if (offset>0) {
		tz.tz_minuteswest = offset;
		tz.tz_dsttime = 0;	/* ignore daylight savings time for now */
		t.tr_time.tv_secs += offset*60;	/* correct for timezone */
	} else {
		tz.tz_minuteswest = 0;
		tz.tz_dsttime = 0;
	}
d61 1
a61 1
	return(0);
@
