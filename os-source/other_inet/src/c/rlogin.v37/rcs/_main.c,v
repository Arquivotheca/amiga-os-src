head     37.18;
branch   ;
access   ;
symbols  Release1:1.4;
locks    ; strict;
comment  @ * @;


37.18
date     93.02.10.16.52.10;  author bj;  state Exp;
branches ;
next     37.17;

37.17
date     92.05.27.15.54.14;  author bj;  state Exp;
branches ;
next     37.16;

37.16
date     92.05.27.14.28.54;  author bj;  state Exp;
branches ;
next     1.7;

1.7
date     91.08.07.15.22.46;  author bj;  state Exp;
branches ;
next     1.6;

1.6
date     91.08.06.14.51.28;  author bj;  state Exp;
branches ;
next     1.5;

1.5
date     91.04.24.15.18.59;  author bj;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.29.15.12.54;  author bj;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.16.19.57.31;  author bj;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.13.15.47.33;  author bj;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.11.22.14.46;  author bj;  state Exp;
branches ;
next     ;


desc
@@


37.18
log
@Changed <proto/#? to <clib/#?>
@
text
@/* -----------------------------------------------------------------------
 * _main.c  for rlogin  (lattice 5.10)
 *
 * $Locker:  $
 *
 * $Id: _main.c,v 37.17 92/05/27 15:54:14 bj Exp $
 *
 * $Revision: 37.17 $
 *
 * $Header: AS225:src/c/rlogin/RCS/_main.c,v 37.17 92/05/27 15:54:14 bj Exp $
 *
 * $Log:	_main.c,v $
 * Revision 37.17  92/05/27  15:54:14  bj
 * 37.16 descriptions incorrect. This version (and 37,16) simply changed
 * a variable name to "stderr_console_task" which is now seen as a global
 * in rlogin.c
 * 
 * Revision 37.16  92/05/27  14:28:54  bj
 * 1. Changed all references to '.l' files to '.o' files.
 *    (left over from Manx days when we needed to tell Manx
 *     object files from Lattice object files.)
 * 2. Added 'mysprintf' object module to Blink line.
 * 
 * Revision 1.7  91/08/07  15:22:46  bj
 * Fixed major bug in previous version that caused CLI to
 * hang and generated enforcer hits.
 * v 37.11 is hosed. This one (v37.12) is ok.
 * 
 * Revision 1.5  91/04/24  15:18:59  bj
 * No changes.
 * 
 * Revision 1.4  90/11/29  15:12:54  bj
 * backed out to 5.05 lattice compile. Crashes under the new version.
 * Unknown cause at this point.
 * 
 * Revision 1.3  90/11/16  19:57:31  bj
 * Fixed problem where the '*' file was not being closed which,
 * in turn, wouldn't allow the parent CLI to close - ever!
 * 
 * Revision 1.2  90/11/13  15:47:33  bj
 * Fixed things to clone Outout() to stderr so that launching
 * Cli window can close.
 * 
 * Added RCS header.
 * 
 *
 *------------------------------------------------------------------------
 */

  
/*      _main.c         Copyright (C) 1985  Lattice, Inc.       */

#include <stdio.h>
#include <fcntl.h>
#include <ios1.h>
#include <string.h>
#include <stdlib.h>
#include <workbench/startup.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>

#define MAXARG 32              /* maximum command line arguments */
#define QUOTE  '"'

#define isspace(c)      ((c == ' ')||(c == '\t') || (c == '\n'))

#ifndef TINY
extern int _fmode,_iomode;
extern int (*_ONBREAK)();
extern int CXBRK();
#endif

extern struct UFB _ufbs[];
int argc;                       /* arg count */
char **targv, *argv[MAXARG];     /* arg pointers */

#define MAXWINDOW 40
extern struct WBStartup *WBenchMsg;

void main(int, char **);

/**
*
* name         _main - process command line, open files, and call "main"
*
* synopsis     _main(line);
*              char *line;     ptr to command line that caused execution
*
* description   This function performs the standard pre-processing for
*               the main module of a C program.  It accepts a command
*               line of the form
*
*                       pgmname arg1 arg2 ...
*
*               and builds a list of pointers to each argument.  The first
*               pointer is to the program name.  For some environments, the
*               standard I/O files are also opened, using file names that
*               were set up by the OS interface module XCMAIN.
*
**/

APTR stderr_console_task ;

void _main(line)
register char *line;
{
register char **pargv;
register int x;
struct Process *process;
struct FileHandle *handle;
APTR cons ;
/*
*
* Build argument pointer list
*
*/
while (argc < MAXARG)
        {
        while (isspace(*line))  line++;
        if (*line == '\0')      break;
        pargv = &argv[argc++];
        if (*line == QUOTE)
                {
                *pargv = ++line;  /* ptr inside quoted string */
                while ((*line != '\0') && (*line != QUOTE)) line++;
                if (*line == '\0')  _exit(1);
                else                *line++ = '\0';  /* terminate arg */
                }
        else            /* non-quoted arg */
                {       
                *pargv = line;
                while ((*line != '\0') && (!isspace(*line))) line++;
                if (*line == '\0')  break;
                else                *line++ = '\0';  /* terminate arg */
                }
        }  /* while */
        
if(argc == 0) exit(20) ;
targv = (char **)&argv[0];


/*
*
* Open standard files
*
*/

process = (struct Process *)FindTask(0) ;

_ufbs[0].ufbfh = Input();
_ufbs[1].ufbfh = Output();
	/* gimme a different console task so I can close */
	/* the launching CLI window */
cons = process->pr_ConsoleTask;
handle = (struct FileHandle *)Output() ;
process->pr_ConsoleTask=(APTR)((struct FileHandle *)BADDR(handle))->fh_Type;
stderr_console_task = process->pr_ConsoleTask ;
_ufbs[2].ufbfh = Open("*", MODE_OLDFILE);
process->pr_ConsoleTask = cons ;
x = UFB_NC;                     /* do not close CLI defaults    */

_ufbs[0].ufbflg |= UFB_RA | O_RAW | x;
_ufbs[1].ufbflg |= UFB_WA | O_RAW | x;
_ufbs[2].ufbflg |= UFB_WA | UFB_RA | O_RAW ; /* no no_close flag ! */

x = (_fmode) ? 0 : _IOXLAT;
stdin->_file = 0;
stdin->_flag = _IOREAD | x;
stdout->_file = 1;
stdout->_flag = _IOWRT | x;
stderr->_file = 2;
stderr->_flag = _IORW | x;

/*      establish control-c handler */

_ONBREAK = CXBRK;

/*
*
* Call user's main program
*
*/

main(argc,targv);              /* call main function */

process->pr_ConsoleTask=stderr_console_task ;
Close(_ufbs[2].ufbfh) ;
_ufbs[2].ufbflg = 0L ;
process->pr_ConsoleTask = cons ;

exit(0);

}
@


37.17
log
@37.16 descriptions incorrect. This version (and 37,16) simply changed
a variable name to "stderr_console_task" which is now seen as a global
in rlogin.c
@
text
@a0 1
 
d4 1
a4 1
 * $Locker: bj $
d6 1
a6 1
 * $Id: _main.c,v 37.16 92/05/27 14:28:54 bj Exp Locker: bj $
d8 1
a8 1
 * $Revision: 37.16 $
d10 1
a10 1
 * $Header: AS225:src/c/rlogin/RCS/_main.c,v 37.16 92/05/27 14:28:54 bj Exp Locker: bj $
d13 5
d61 2
a62 2
#include <proto/dos.h>
#include <proto/exec.h>
@


37.16
log
@1. Changed all references to '.l' files to '.o' files.
   (left over from Manx days when we needed to tell Manx
    object files from Lattice object files.)
2. Added 'mysprintf' object module to Blink line.
@
text
@d5 1
a5 1
 * $Locker:  $
d7 1
a7 1
 * $Id: _main.c,v 1.7 91/08/07 15:22:46 bj Exp $
d9 1
a9 1
 * $Revision: 1.7 $
d11 1
a11 1
 * $Header: HOG:Other/inet/src/c/rlogin/RCS/_main.c,v 1.7 91/08/07 15:22:46 bj Exp $
d14 6
@


1.7
log
@Fixed major bug in previous version that caused CLI to
hang and generated enforcer hits.
v 37.11 is hosed. This one (v37.12) is ok.
@
text
@d7 1
a7 1
 * $Id: _main.c,v 1.5 91/04/24 15:18:59 bj Exp $
d9 1
a9 1
 * $Revision: 1.5 $
d11 1
a11 1
 * $Header: HOG:Other/inet/src/c/rlogin/RCS/_main.c,v 1.5 91/04/24 15:18:59 bj Exp $
d14 5
d93 3
a103 1
APTR stderr_ct ;
d149 1
a149 1
stderr_ct = process->pr_ConsoleTask ;
d178 1
a178 1
process->pr_ConsoleTask=stderr_ct ;
@


1.6
log
@Stripped Workbench support.
SetConsoleTask() added
exit() handling of _ufbs[2] added (see note!)
@
text
@d1 1
a1 1
                            
d34 1
d69 19
d95 2
a96 2
/* static char window[MAXWINDOW+18]; */

d123 2
a124 2
if(argc == 0) _exit(1) ;
targv = (char **)&argv[0] ;
d133 2
a134 1
process = (struct Process *)FindTask(NULL) ;
d139 4
a142 2
handle = (struct FileHandle *)BADDR(Output()) ;
SetConsoleTask(handle->fh_Type) ;
d144 2
a145 1
SetConsoleTask(process) ;
d147 2
a148 3
x = UFB_NC;                     /* do not close CLI defaults    */
_ufbs[0].ufbflg |= UFB_RA | O_RAW  | x;
_ufbs[1].ufbflg |= UFB_WA | O_RAW  | x;
d171 1
a171 5

       /* we only get here on a CLEAN exit from main() */
       /* any error conditions that cause the program */
       /* to terminate, MUST handle these next two lines in situ ! */

d174 1
@


1.5
log
@No changes.
@
text
@d1 1
a1 1

d3 1
a3 1
 * _main.c  for rlogin  (lattice 5.05)
d7 1
a7 1
 * $Id: _main.c,v 1.4 90/11/29 15:12:54 bj Exp $
d9 1
a9 1
 * $Revision: 1.4 $
d11 1
a11 1
 * $Header: inet2:src/c/rlogin/RCS/_main.c,v 1.4 90/11/29 15:12:54 bj Exp $
d14 3
a33 1

a67 19
/**
*
* name         _main - process command line, open files, and call "main"
*
* synopsis     _main(line);
*              char *line;     ptr to command line that caused execution
*
* description   This function performs the standard pre-processing for
*               the main module of a C program.  It accepts a command
*               line of the form
*
*                       pgmname arg1 arg2 ...
*
*               and builds a list of pointers to each argument.  The first
*               pointer is to the program name.  For some environments, the
*               standard I/O files are also opened, using file names that
*               were set up by the OS interface module XCMAIN.
*
**/
d75 2
a76 3
static char window[MAXWINDOW+18];
APTR cons ;
APTR stderr_ct ;
d102 3
a104 1
targv = (argc == 0) ? (char **)WBenchMsg : (char **)&argv[0];
d113 9
a121 30
process = (struct Process *)FindTask(0) ;

if (argc == 0)          /* running under workbench      */
        {
        strcpy(window, "con:10/10/320/80/");
        strncat(window, WBenchMsg->sm_ArgList->wa_Name,MAXWINDOW);
        _ufbs[0].ufbfh = Open(window,MODE_NEWFILE);
        _ufbs[1].ufbfh = _ufbs[0].ufbfh;
        _ufbs[1].ufbflg = UFB_NC;
        _ufbs[2].ufbfh = _ufbs[0].ufbfh;
        _ufbs[2].ufbflg = UFB_NC;
        handle = (struct FileHandle *)(_ufbs[0].ufbfh << 2);
        process->pr_ConsoleTask = (APTR)handle->fh_Type;
        x = 0;
        }
else                    /* running under CLI            */
        {
        _ufbs[0].ufbfh = Input();
        _ufbs[1].ufbfh = Output();
        	/* gimme a different console task so I can close */
        	/* the launching CLI window */
		cons = process->pr_ConsoleTask;
		handle = (struct FileHandle *)Output() ;
		process->pr_ConsoleTask=
			(APTR)((struct FileHandle *)BADDR(handle))->fh_Type;
		stderr_ct = process->pr_ConsoleTask ;
		_ufbs[2].ufbfh = Open("*", MODE_OLDFILE);
		process->pr_ConsoleTask = cons ;
        x = UFB_NC;                     /* do not close CLI defaults    */
        }
d123 3
a125 2
_ufbs[0].ufbflg |= UFB_RA | O_RAW | x;
_ufbs[1].ufbflg |= UFB_WA | O_RAW | x;
d148 5
a152 1
process->pr_ConsoleTask=stderr_ct ;
a154 1
process->pr_ConsoleTask = cons ;
@


1.4
log
@backed out to 5.05 lattice compile. Crashes under the new version.
Unknown cause at this point.
@
text
@d7 1
a7 1
 * $Id: _main.c,v 1.3 90/11/16 19:57:31 bj Exp $
d9 1
a9 1
 * $Revision: 1.3 $
d11 1
a11 1
 * $Header: HOG:Other/inet/src/c/rlogin/RCS/_main.c,v 1.3 90/11/16 19:57:31 bj Exp $
d14 4
@


1.3
log
@Fixed problem where the '*' file was not being closed which,
in turn, wouldn't allow the parent CLI to close - ever!
@
text
@d1 1
d7 1
a7 1
 * $Id: _main.c,v 1.2 90/11/13 15:47:33 bj Exp $
d9 1
a9 1
 * $Revision: 1.2 $
d11 1
a11 1
 * $Header: HOG:Other/inet/src/c/rlogin/RCS/_main.c,v 1.2 90/11/13 15:47:33 bj Exp $
d14 4
d90 1
a90 1

d150 1
d179 5
@


1.2
log
@Fixed things to clone Outout() to stderr so that launching
Cli window can close.

Added RCS header.
@
text
@d4 1
a4 1
 * $Locker$
d6 1
a6 1
 * $Id$
d8 1
a8 1
 * $Revision$
d10 1
a10 1
 * $Header$
d12 7
a18 1
 * $Log$
d23 1
a23 1

a84 2
struct Process *myproc ;
struct FileHandle *cfh ;
d119 2
a120 1
#ifndef TINY
a131 1
        process = (struct Process *)FindTask(0);
d139 8
a146 1
/*        _ufbs[2].ufbfh = Open("*", MODE_OLDFILE);  */
a149 9
myproc = (struct Process *)FindTask(0L) ;
cons = myproc->pr_ConsoleTask;
cfh = (struct FileHandle *)Output() ;

myproc->pr_ConsoleTask=(APTR)((struct FileHandle *)BADDR(cfh))->fh_Type;
_ufbs[2].ufbfh = Open("*", MODE_OLDFILE);
myproc->pr_ConsoleTask=cons ;


d152 1
a152 1
_ufbs[2].ufbflg |= UFB_WA | UFB_RA | O_RAW | x;
a161 4
/*
setnbf(stdout);
setnbf(stderr);
*/
a165 2
#endif

d173 1
a173 1
#ifndef TINY
d175 1
a175 3
#else
_exit(0);
#endif
@


1.1
log
@Initial revision
@
text
@d2 1
a2 2
 * _main.c for RLOGIN (Lattice 5.05)  This call supplants the one
 *                                    in lc.lib
a3 4
 *   alters stderr (_ufbs[2] ) to be the same file as stdout (_ufbs[1])
 *   and fixes things so that the exit code doesn't try to close 
 *   the file again.  See Lattice "uexit.c" and "exit.c" for details.
 *
d12 2
d18 1
a18 1
 /*      _main.c         Copyright (C) 1985  Lattice, Inc.       */
a32 3
#define ESCAPE '*'
#define ESC '\027'
#define NL '\n'
d43 2
a44 3
static int argc;                       /* arg count */
static char **targv, *argv[MAXARG];     /* arg pointers */
static void badarg(char *program);
d48 3
d73 8
a80 6
   register char **pargv;
   register int x;
   struct Process *process;
   struct FileHandle *handle;
   static char window[MAXWINDOW+18];
	char *argbuf;
d87 2
a88 3
   
   while (argc < MAXARG)
   {
d93 6
a98 28
        {
            argbuf = *pargv = ++line;  /* ptr inside quoted string */
    			while (*line != QUOTE)
				{
				   if (*line == ESCAPE)
					{
					      line++;
						switch (*line)
						{
							case 'E':
								*argbuf++ = ESC;
								break;
							case 'N':
								*argbuf++ = NL;
								break;
							default:
								*argbuf++ = *line;
						}
						line++;
					}
				   else
				   {
				     *argbuf++ = *line++;
				   }
		      }
		      line++;
		      *argbuf++ = '\0';	/* terminate arg */
        }
d100 8
a107 8
        {       
            *pargv = line;
            while ((*line != '\0') && (!isspace(*line))) line++;
            if (*line == '\0')  break;
            else                *line++ = '\0';  /* terminate arg */
        }
   }  /* while */
   targv = (argc == 0) ? (char **)WBenchMsg : (char **)&argv[0];
d117 2
a118 2
   if (argc == 0)          /* running under workbench      */
   {
d130 3
a132 3
   }
   else                    /* running under CLI            */
   {
d135 1
a135 1
        _ufbs[2].ufbfh = Output() ; /***************/
d137 1
a137 1
   }
d139 3
a141 12
   _ufbs[0].ufbflg |= UFB_RA | O_RAW | x;
   _ufbs[1].ufbflg |= UFB_WA | O_RAW | x;
   _ufbs[2].ufbflg |= UFB_RA | UFB_WA | O_RAW | x; /*stderr*/
                                       /****** ^^^ ****/
   x = (_fmode) ? 0 : _IOXLAT;
   stdin->_file = 0;
   stdin->_flag = _IOREAD | x;   
   stdout->_file = 1;
   stdout->_flag = _IOWRT | x;
   stderr->_file = 2;
   stdout->_flag = _IOWRT | x;
/*   stderr->_flag = _IORW | x; orig */
d143 21
d176 1
a176 1
   main(argc,targv);              /* call main function */
d178 1
a178 1
   exit(0);
d180 1
a180 1
_  exit(0);
@
