head     1.2;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @* @;


1.2
date     91.02.02.00.31.07;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.01.19.41.39;  author martin;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@optimized and changed to reg parms
@
text
@;BZERO.ASM
;
;   Uses longword operations if data is aligned on a longword boundry
;   and the size is a mulitple of 4.  Otherwise, uses byte operations.
;A0 = address    
;D0 = byte count 

	xdef  _bzero

_bzero  move.l	d0,d1
	andi.b	#3,d1		;byte count on long word boundry?
	bne.b	loadd
	move.l	a0,d1
	andi.b	#3,d1		;address on longword boundry?
	bne.b	loadd
	bra.b	lwb
loadd	moveq	#0,D1
	bra.b	drop
loop	move.b	D1,(A0)+	;BYTE SET LOOP
drop	dbf.w	D0,loop 	;remember, only effects lower word
	sub.l	#$10000,D0	;for buffers >65535
	bpl.b	loop		;branch to loop because D0.W now is FFFF
	rts

lwb	lsr.l	#2,D0		;byte count / 4 (longword chunks)
	moveq	#0,D1
	bra.b	dropl

loopl	move.l	D1,(A0)+	;LONGWORD LOOP
dropl	dbf.w	D0,loopl	;remember, only effects lower word
	sub.l	#$10000,D0	;for buffers >65535
	bpl.b	loopl		;branch to loop because D0.W now is FFFF
	rts



@


1.1
log
@Initial revision
@
text
@a0 2

;BSET.ASM
d5 2
a7 1
	xdef  _bset
d10 6
a15 12
_bzero
	clr.l	D1
	bra.b	begin
_bset
	move.b	15(A7),D1	;12(A7)-> msb . . lsb	(D1 = data)
begin
	move.l	4(A7),A0	;A0 = address
	move.l	8(A7),D0	;D0 = byte count
	andi.b	#3,11(A7)	;byte count on long word boundry?
	bne.b	drop
	andi.b	#3,7(A7)	;address on longword boundry?
	bne.b	drop
d17 2
d26 1
a26 6
	tst.l	D1		;BZERO
	beq.b	dropl
	move.b	D1,14(A7)	;15(A7) already contains the byte
	move.w	14(A7),D1	;D1 0..15 set
	swap	D1
	move.w	14(A7),D1	;D1 16..31 set
d29 1
a29 1
loopl	move.l	D1,(A0)+	;BYTE SET LOOP
@
