head     1.6;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     92.08.14.14.27.28;  author gregm;  state Exp;
branches ;
next     1.5;

1.5
date     91.11.07.12.43.58;  author gregm;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.21.15.44.05;  author martin;  state Exp;
branches ;
next     1.3;

1.3
date     91.06.20.18.08.27;  author martin;  state Exp;
branches ;
next     1.2;

1.2
date     91.02.02.00.18.51;  author martin;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.01.19.43.42;  author martin;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@It looks like Martin edited this file with an editor that changes spaces to tabs --
but didn't make any changes. 
@
text
@/*
 * This is the standard library init...
 *
 * It calls the custom init routines in examplelib_custom.c
 * The routines in this file should not be changed.
 *
 * Portions of this code were generated from Lattice examples...
 */
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/resident.h>
#include <exec/libraries.h>
#include <exec/execbase.h>
#include <libraries/dos.h>
#include <proto/exec.h>
#include <proto/dos.h>
#include <string.h>
#include "proto.h"
/*
 * This includes the revision information
 */
#include "inet_rev.h"

/*
 * Include the custom init and expunge headers...
 *
 * The MUST be of the type:
 * BOOL __asm __saveds CustomLibInit(register __a6 struct Library *libbase);
 * void __asm __saveds CustomLibExpunge(register __a6 struct Library *libbase);
 *
 */
#include "lib_custom.h"
#include <netinet/inet.h>  /* get definition of InetNode */

typedef LONG (*PFL)();   /* pointer to function returning 32-bit int        */

/* library initialization table, used for AUTOINIT libraries                */
struct InitTable
{
    ULONG   *it_DataSize;       /* library data space size         */
    PFL     *it_FuncTable;      /* table of entry points           */
    APTR    it_DataInit;        /* table of data initializers      */
    PFL     it_InitFunc;        /* initialization function to run  */
};

/* my function table (Generated by Blink) */
extern PFL _LibFuncTab[];

extern char __far RESLEN;
extern long __far NEWDATAL;	/* Generated by BLINK */

#define DATAWORDS ((long)&NEWDATAL)

/* We need to define this for the following table */
ULONG __asm _LibInit(register __a0 APTR seglist,register __d0 struct InetNode *libbase);

struct InitTable __far _LibInitTab =
{
    (long *)(&RESLEN+sizeof(struct InetNode)),
    _LibFuncTab,
    NULL,			/* will initialize my own data */
    _LibInit,
};

/* Need this to determine start of MERGED DATA */
extern long far _Libmergeddata;

/* Supplied by BLink */
extern char __far _LibName[];

/* Supplied as part of our libent.a */
extern char __far _VerString[];

/*
 * The following #define is to give the EXEC call #pragmas
 * (which were changed to "libcall SysBase" to use the
 * absolute location known also as AbsExecBase.  This is
 * needed during the base level expunge call...
 */
#define SysBase ((struct ExecBase *)(*((ULONG *)4)))

/*
 * This function is called when the library is first loaded.
 * It does the library structure initialization and calls
 * the custom library initialization routine which should
 * setup any custom library stuff and open any other libraries
 * that will be needed.
 *
 * Note that this routine can not change as the setup must
 * happen in this order.
 */
ULONG __asm _LibInit(register __a0 APTR seglist,register __d0 struct InetNode *libbase)
{
long *sdata, *reloc;
char *ddata;
long nrelocs;

    libbase->ml_SegList = (ULONG) seglist;

    /* init. library structure (since I don't do automatic data init.) */
    libbase->lib.lib_Node.ln_Type = NT_LIBRARY;
    libbase->lib.lib_Node.ln_Name =  _LibName;
    libbase->lib.lib_Flags = LIBF_SUMUSED | LIBF_CHANGED;
    libbase->lib.lib_Version = VERSION;
    libbase->lib.lib_Revision = REVISION;
    libbase->lib.lib_IdString = (APTR) _VerString;
	libbase->ml_initialized = 0L;

    ddata = (char *)libbase + sizeof(struct InetNode);
    sdata = (long *)&_Libmergeddata;
    memcpy(ddata, (char *)sdata, DATAWORDS*4);

    sdata = sdata + DATAWORDS;
    nrelocs = *sdata++;
    while (nrelocs > 0)
    {
        reloc = (long *)((long)ddata + *sdata++);
        *reloc += (long)ddata;
        nrelocs--;
    }

	/* need this for 68040 */
/*    if(SysBase->LibNode.lib_Version >= 37) CacheClearU(); */

    return((ULONG)libbase);
}

/*
 * This is the entry point that is called when the system
 * wishes that the library free itself.  The library should
 * only free itself if there are no outstanding open libraries.
 * This routine calls the custom expunge routine where any
 * custom resources that need to be freed are.
 *
 *  *** NOTE ***  This routine *MUST* *NEVER* *BREAK* *FORBID*
 *                That is, it must not do *ANYTHING* that could
 *                cause a Wait() to happen...
 *
 *                Also note that it is best to use a little stack
 *                as possible as you are being called from some
 *                other process's context.
 */
ULONG __saveds __asm _LibExpunge( register __a6 struct InetNode *libbase )
{
ULONG seglist = 0;
LONG  libsize;

    libbase->lib.lib_Flags |= LIBF_DELEXP;
    if ( libbase->lib.lib_OpenCnt == 0 )
    {
        CustomLibExpunge((struct Library *)libbase);

        /* really expunge: remove libbase and freemem */

        seglist = libbase->ml_SegList;
        Remove( (struct Node *) libbase);

        libsize = libbase->lib.lib_NegSize + libbase->lib.lib_PosSize;
        FreeMem( (char *) libbase - libbase->lib.lib_NegSize,(LONG) libsize );
    }

    /* return NULL or real seglist */
    return ( (ULONG) seglist );
}

/*
 * This is the entry point that is called when the library is
 * opened by an application.  It mainly changes the OpenCount
 * and the delayed expunge flags...
 */
LONG __asm _LibOpen(register __a6 struct InetNode *libbase)
{
    /* mark us as having another customer */
    libbase->lib.lib_OpenCnt++;

    /* clear delayed expunges (standard procedure) */
    libbase->lib.lib_Flags &= ~LIBF_DELEXP;

	Forbid();
    if (libbase->ml_initialized==0) {
		libbase->ml_initialized=1;
		Permit();
		if (CustomLibOpen((struct Library *)libbase)) {
			return((LONG)libbase);
    	} else 
			return(0L);
	} else
		Permit();

	return((LONG)libbase);

}

/*
 * This is the entry point that is called when the library is
 * closed by an application.  The main use here is to change the
 * open count and to check for delayed expunge calls...
 */
ULONG __asm _LibClose( register __a6 struct InetNode *libbase )
{
ULONG retval = 0;

    if (( --libbase->lib.lib_OpenCnt == 0 ) &&
                    ( libbase->lib.lib_Flags & LIBF_DELEXP ))
    {
        /*
         * no more people have me open,
         * and I have a delayed expunge pending
         */
        retval = _LibExpunge( libbase ); /* return segment list */
    }

    return (retval);
}
@


1.5
log
@*** empty log message ***
@
text
@d50 1
a50 1
extern long __far NEWDATAL;     /* Generated by BLINK */
d61 1
a61 1
    NULL,                       /* will initialize my own data */
d107 1
a107 1
        libbase->ml_initialized = 0L;
d122 2
a123 2
        /* need this for 68040 */
    if(SysBase->LibNode.lib_Version >= 37) CacheClearU();
d179 1
a179 1
        Forbid();
d181 8
a188 8
                libbase->ml_initialized=1;
                Permit();
                if (CustomLibOpen((struct Library *)libbase)) {
                        return((LONG)libbase);
        } else
                        return(0L);
        } else
                Permit();
d190 1
a190 1
        return((LONG)libbase);
@


1.4
log
@moved protocol stack startups to LibOpen()
added ml_initialized flag. (see netinet/inet.h)
@
text
@d50 1
a50 1
extern long __far NEWDATAL;	/* Generated by BLINK */
d61 1
a61 1
    NULL,			/* will initialize my own data */
d107 1
a107 1
	libbase->ml_initialized = 0L;
d122 1
a122 1
	/* need this for 68040 */
d179 1
a179 1
	Forbid();
d181 8
a188 8
		libbase->ml_initialized=1;
		Permit();
		if (CustomLibOpen((struct Library *)libbase)) {
			return((LONG)libbase);
    	} else 
			return(0L);
	} else
		Permit();
d190 1
a190 1
	return((LONG)libbase);
@


1.3
log
@minor updates
added 68040 support
@
text
@d107 1
d125 1
a125 2
    if (CustomLibInit((struct Library *)libbase)) return((ULONG)libbase);
    else return(NULL);
d179 13
a191 1
    return((LONG)libbase);
@


1.2
log
@*** empty log message ***
@
text
@d13 1
d80 1
a80 1
#define SysBase (*((ULONG *)4))
d108 1
a108 2
    /* The +4 is a wasted long word, where _Libmergeddata is. */
    ddata = (char *)&libbase->ml_Data+4;
d120 3
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1

@
