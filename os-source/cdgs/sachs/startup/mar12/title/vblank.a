; :ts=8 
*
*	addvcounter.a -- Vertical Interrupt counter routines.
*
*	William A. Ware			C206
*
*************************************************************************
*   This information is CONFIDENTIAL and PROPRIETARY			*
*   Copyright (C) 1992, Silent Software Incorporated.			*
*   All Rights Reserved.						*
*************************************************************************

	include 	"exec/types.i"
	include		"exec/memory.i"
	include		"exec/interrupts.i"
	include		"macros.i"
	include		"hardware/intbits.i"
	include		"hardware/custom.i"

		CSECT	text

	xref	_LVOAllocMem
	xref	_LVOFreeMem
	xref	_LVOAddIntServer
	xref	_LVORemIntServer
	xref	_LVOSignal

	xref	_custom

	xdef	_VBlankCode

	STRUCTURE	VBlankData,0
		STRUCT	vb_SpriteData,2*2
		STRUCT	vb_SpriteMoveData,8*4
		STRUCT	vb_SpriteData,16*4
		LONG	vb_CountUp
		WORD	vb_DecompFrame
		BYTE	vb_Bank
		LABEL	vb_SIZEOF


_VBlankCode:		   
	move.b		vb_Bank,d0
	blt		nosprite
	
	movem.l		d0-d7/a0,-(sp)

	lea		_custom,a0
	
	move.w		vposr(a0),d0
	bpl.s		1$
	
	movem.l		vb_SpriteData+0(a1),d0-d7
	move.w		#1,vb_DecompFrame(a1)
	bra.s		2$

1$
	movem.l		vb_SpriteData+4*8(a1),d0-d7
	move.w		#0,vb_DecompFrame(a1)

2$
	movem.l		d0-d7,sprpt(a0)
	
	movem.l		(sp)+,d0-d7/a0
	addq.l		#1,vb_CountUp(a1)
	moveq		#0,d0
	rts

nosprite:
	movem.l		d1/a0,-(sp)
	lea		_custom,a0
	move.w		vposr(a0),d0
	bpl.s		1$
	
	move.w		#1,vb_DecompFrame(a1)
	bra.s		2$

1$	move.w		#0,vb_DecompFrame(a1)

2$	movem.l		(sp)+,d1/a0
	moveq		#0,d0
	rts
	


********************************************************************
*
	xdef	_AddVBlank
	xdef	_FreeVBlank

_AddVBlank:	; a0 - data
			movem.l d2/a2-a3/a6,-(sp)
		
			movea.l	a0,a2
		
		; allocate interrupt.
			LSYSBASE
			moveq	#IS_SIZE,d0
			move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1 
			jsr	_LVOAllocMem(a6)
			tst.l	d0
			beq.s	2$
			
		; initilize interrupt.
			movea.l	d0,a3
			move.b	#NT_INTERRUPT,LN_TYPE(a3)
			move.l	a0,LN_NAME(a3)
			move.b	#-60,LN_PRI(a3)
			move.l	a2,IS_DATA(a3)	; in->is_Data = counterloc
			
			lea	_VBlankCode(pc),a0
1$			move.l	a0,IS_CODE(a3)

		; AddIntServer( INTB_VERTB, in );
			moveq	#INTB_VERTB,d0
			movea.l	a3,a1
			LSYSBASE
			jsr	_LVOAddIntServer(a6)
			
			move.l	a3,d0		; put answer in d0

2$	; either everyting added or something failed.
			movem.l	(sp)+,d2/a2-a3/a6
			rts
********************************************************************
*
		xdef	_FreeVBlank

; 'C' source
;
; VOID FreeVCounter( struct Interrupt *in )
; {
;	if (in)
;	{
;		RemIntServer( INTB_VERTB, in );
;		FreeMem( in, sizeof (struct Interrupt ));
;	}
; }

_FreeVBlank:	; a0 interrupt.
			move.l	d2,-(sp)
			move.l	a0,d2
			beq.s	1$	; skip if NULL
			
		; RemIntServer( INTB_VERTB, in );
			LSYSBASE
			moveq	#INTB_VERTB,d0
			movea.l	a0,a1
			jsr	_LVORemIntServer(a6)
		; FreeMem( in, sizeof (struct Interrupt ));
			LSYSBASE
			move.l	d2,a1
			moveq	#IS_SIZE,d0
			jsr	_LVOFreeMem(a6)
		; finish
1$			moveq	#0,d0
			move.l	(sp)+,d2
			rts
		END
