TABLE OF CONTENTS

debox.library/BMInfoSize
debox.library/CenterViewPort
debox.library/CheckHeader
debox.library/CreateView
debox.library/CycleColors
debox.library/CycleRGB32
debox.library/Debox_AllocBitMap
debox.library/Debox_FreeBitMap
debox.library/DecompBitMap
debox.library/DecompBMInfo
debox.library/DecompData
debox.library/DeleteView
debox.library/FreeBMInfo
debox.library/FreeBMInfoRGB32
debox.library/GetBMInfoRGB32
debox.library/GetSpecialData
debox.library/HeaderSize
debox.library/MemSet
debox.library/NextComp
debox.library/PullBMInfoExtColor
debox.library/UnLas
debox.library/BMInfoSize                             debox.library/BMInfoSize

   NAME   
	BMInfoSize -- Returns the size of a picture's BMInfo structure.

   SYNOPSIS
	size = BMInfoSize (header, data)
	 D0	            A0	    A1

	ULONG BMInfoSize (struct CompHeader *, UBYTE *);

   FUNCTION
	Returns the bitmap info size for the current picture.  You would use
	this if you wished to allocate memory for this data yourself instead
	of having DecompBMInfo() allocate the memory automatically.  If 
	you were to do so, you may then pass the structure to 
	DecompBMInfo() while will fill it in with the picture's data.

	The function returns a positive value for success or a negitive
	DEBOXERR value for failure.

   INPUTS
	header	- pointer to a CompHeader structure or NULL.  If NULL then
		  the indata parameter is assumed to point to the CompHeader
		  structure (all sbox'ed data is in the form <header><data>).
	indata	- pointer to the data to be decompressed.  If header is not
		  NULL then indata should be pointing to the <data> and not
		  the <header>.

   RESULT
	size	- size of BMInfo structure, or negative DEBOXERR value if
		  an error occurred.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
	DecompBMInfo(), cdtv/debox.h

debox.library/CenterViewPort                     debox.library/CenterViewPort

   NAME   
	CenterViewPort -- Center a ViewPort on display.

   SYNOPSIS
	CenterViewPort (view, viewport)
			 A0      A1

	void CenterViewPort (struct View *, struct ViewPort *);

   FUNCTION
	Centers a ViewPort based on its modes and the View structure passed.
	GfxBase->NormalDisplayColumns and GfxBase->NormalDisplayRows are
	used to get proper screen placement.

	This routine is automatically called by CreateView().

   INPUTS
	view	 - pointer to a view structure with the DxOffset and
		   DyOffset already set.
	viewport - pointer to an initialized ViewPort structure.

   RESULT

   EXAMPLE

   NOTES
	I found if the (viewport->DyOffset + view->DyOffset) < 13 then the
	view would not be shown.  In CenterViewPort(), I make sure that this
	condition will not occur.

   BUGS
	For screens much larger than normal overscan modes, the positioning
	might be off.

   SEE ALSO
	CreateView()

debox.library/CheckHeader                           debox.library/CheckHeader

   NAME   
	CheckHeader -- Check a debox header structure for validity.

   SYNOPSIS
	error = CheckHeader (header)
			         A0

	BYTE CheckHeader (struct CompHeader *);

   FUNCTION
	Checks to see if 'header' is a valid CompHeader structure.  The
	function returns a non-zero value if the header is invalid.

   INPUTS
	header	- pointer to a CompHeader structure.

   RESULT
	error	- zero (no error) if CompHeader is valid;  non-zero otherwise.

   EXAMPLE

   NOTES
	This will be in there!

   BUGS

   SEE ALSO

debox.library/CreateView                             debox.library/CreateView

   NAME   
	CreateView -- Creates a complete View out of a bitmap.

   SYNOPSIS
	sv = CreateView (sv, bitmap, width, height, modes)
	D0		 A0    A1     D0      D1      D2

	struct SuperView * CreateView (struct SuperView *, struct BitMap *,
				       UWORD, UWORD, UWORD);

   FUNCTION
	Properly sets up a SuperView structure so that a LoadView() needs
	only to be called to display the bitmap.  The width of the view
	must be greater than 16.

	If 'sv' is NULL, the SuperView structure will be allocated by the
	routine.  If this is the case the SuperView structure will have the
	SV_ALLOCATED bit set and will be freed when DeleteView() is called.

	CreateView() calls CenterViewPort() in order to center the picture
	on the screen.  It uses GfxBase->ActiView for its initial
	view->DxOFfset and view->DyOffset values.

   INPUTS
	sv	- a pointer to a SuperView structure or NULL.
	bitmap	- a pointer to properly initialized BitMap structure.
	width	- width of the ViewPort.
	height	- height of the ViewPort.
	modes	- ViewPort modes.  The special modes will be passed on to
		  the View structure. 

   RESULT
	sv	- pointer to a SuperView structure or NULL if there was
		  not enough memory and/or an error occurred.  It will also
		  return a NULL if 'width' <= 16.

   EXAMPLE

   NOTES
	Does the GfxBase initially have a View structure in the ActiView?
	This may be why the it is not running until intuition is run.  I'm
	putting in a check:  If ActiView is NULL it uses the defaults
	returned by InitView().

   BUGS
	Creates bogus views when passed very small bitmaps.  I need to 
	find the smallest sizes before this one will be fixed.

   SEE ALSO
	DeleteView(), CenterViewPort()

debox.library/CycleColors                           debox.library/CycleColors

   NAME   
	CycleColors -- Cycle the colormap according to the BMInfo structure.

   SYNOPSIS
	changed = CycleColors (bminfo, microsec)
	  D0			 A0	  D0

	BOOL CycleColors (struct BMInfo *, ULONG);

   FUNCTION
	Cycle the colors in the BMInfo.bmi_ColorMap according to the
	information contained in bmi_RangeInfo.  Portions in bmi_RangeInfo
	are also modified.

	Each time CycleColors is called each RangeInfo countdown timer is
	modifed by the microsec value passed in D0.  When the RangeInfo
	structure rgi_SecondsLeft and rgi_MicroLeft reach zero the
	bmi_ColorMap is cycled accoring to that RangeInfo's information.  If
	the colormap is modified, the function will return a nonzero
	result.

	The best way to call this is in a vertical blank interrupt.  Pass
	the cycleinfo and microsec equal to 16667 for NTSC or 20000 for PAL.
	If CycleColors() returns nonzero, use LoadRGB4() to load the
	modified palette into the ViewPort.

   INPUTS
	bminfo	 - A properly initilized BMInfo structure.
	microsec - Micro seconds since last call.

   RESULT

   EXAMPLE

   NOTES
	This function does not check to see if the color numbers contained
	in RangeInfo->rgi_CArray are a valid range.  It is up to the program
	or faith to check the RangeInfo structure for validity.  Also this
	assumes the BMInfo and the RangeInfo structures have been correctly
	set up.

	V39 Also takes into account the extended color information that might
	be embedded after the regular color map.  These embedded colors are
	also cycled so succesive calls to GetBMInfoRGB32() will contain the
	correct BMInfo.

   BUGS
	Previous to v1.8 the program would free up too much stack if 
	bmi_NumRanges == 0.  This would, of course, crash the calling 
	program.

   SEE ALSO
	graphics.library/LoadRGB4(), cdtv/debox.h

debox.library/CycleRGB32                             debox.library/CycleRGB32

   NAME   
	CycleRGB32 - Cycles RGB32 Color maps based on the information in BMInfo

   SYNOPSIS
	changed = CycleRGB32 (bminfo, microsec, table, worktable)
	  D0			 A0	  D0	  A1	  A2

	BOOL CycleRGB32( struct BMInfo *,ULONG, ULONG *, ULONG *);

   FUNCTION
	Works like the CycleColors() function execept it works on 
	color tables returned by GetBMInfoRGB32().  Also like CycleColors()
	portions of the bmi_RangeInfo are also modified.

	Each time CycleRGB32 is called each RangeInfo countdown timer is
	modifed by the microsec value passed in D0.  When the RangeInfo
	structure rgi_SecondsLeft and rgi_MicroLeft reach zero the
	'table' is cycled accoring to that RangeInfo's information.  If
	the 'table' is modified, the function will return a nonzero
	result.  The can be passed directly to LoadRGB32().

	The 'worktable' sould be created using the GetBMInfoRGB32(), and must
	contain at least as many entries as 'table'.   An example on how to 
	create this table is in the example below.

   INPUTS
	bminfo - 

   RESULT
	returns a non-zero number if the 'table' was changed.

   EXAMPLE
	ULONG *table,*worktable;

	table = GetBMInfoRGB32( bmi, bmi->bmi_ColorCount, 0 );
	worktable = GetBMInfoRGB32( NULL, bmi->bmi_ColorCount, 0 );
		/* Passing NULL for bmi will create a blank table */

	if (!table || !worktable) cleanExit( "Cannot create color tables");
	
	for (i=0;i<240;i++)	/* Cycle table for about 4 seconds  */
		if (CycleRGB32( bmi, 1000000/60 /* 50 for PAL */,table,worktable ))
			LoadRGB32( viewport,table );

	FreeBMInfoRGB32( worktable );
	FreeBMInfoRGB32( table );

   NOTES
	For the function to cycle properly the table MUST contain all the colors 
	that are cycled in the RangeInfo structures.  A smaller RGB32 table could
	be created if the limits are known.  For example if the RangeInfo structures
	only effect colors 3-10 a call of GetBMInfoRGB32(bmi,8,3) could be called.
	to create the table.

   BUGS

   SEE ALSO
	CycleColors(), debox.h/RangeInfo,GetBMInfoRGB32(), FreeBMInfoRGB32(),
	LoadRGB32().

debox.library/Debox_AllocBitMap               debox.library/Debox_AllocBitMap

   NAME   
	Debox_AllocBitMap -- Allocates a BitMap structure and bitplanes.

   SYNOPSIS
	bitmap = Debox_AllocBitMap (depth, width, height)
	  D0		       D0      D1     D2  

	struct BitMap * Debox_AllocBitMap (ULONG, ULONG, ULONG);

   FUNCTION
	Allocates a bitmap structure and bitplanes (planes are in CHIP
	memory).  If any part of it can't be allocated, NULL is returned,
	and nothing will have been allocated.  Use Debox_FreeBitMap() to
	deallocate the bitmap when finished.

	The routine allocates a standard BitMap structure unless the depth.
	is greater than eight.  If more than eight bitplanes are requested,
	Debox_AllocBitMap() will return a structure with the extra plane pointers at
	the end of the structure.

   INPUTS
	depth	- in planes.
	width	- width in pixels.
	height	- in pixels.

   RESULT
	bitmap	- pointer to BitMap structure, suitably initialized, or NULL
		  if there's not enough memory.  The bitplanes themselves
		  are uninitialized i.e. garbage.

   EXAMPLE

   NOTES
	This function was renamed from AllocBitMap() due to a name conflict
	with AllocBitmap() in graphics.library.

   BUGS

   SEE ALSO
	Debox_FreeBitMap()

debox.library/Debox_FreeBitMap                 debox.library/Debox_FreeBitMap

   NAME   
	Debox_FreeBitMap -- Frees a bitmap created with Debox_AllocBitMap().

   SYNOPSIS
	Debox_FreeBitMap (bitmap)
		      A0

	void Debox_FreeBitMap (struct BitMap *);

   FUNCTION
	Frees everything that Debox_AllocBitMap() created.  The routine will free 
	with a depth >8 bitplanes also.

   INPUTS
	bitmap	- a pointer to a bitmap structure created with
		  Debox_AllocBitMap().

   RESULT

   EXAMPLE

   NOTES
	This falls into the extra category.  Too big, this one goes also.

   BUGS

   SEE ALSO

debox.library/DecompBitMap                         debox.library/DecompBitMap

   NAME   
	DecompBitMap -- Decompress picture data into a BitMap structure.

   SYNOPSIS
	error = DecompBitMap (header, indata, bitmap, mask)
	 D0		        A0      A1      A2     a3

	LONG DecompBitMap (struct CompHeader *, UBYTE *,
			   struct BitMap *, PLANEPTR);

   FUNCTION
	Decompresses picture data from sbox into a BitMap structure.
	Returns zero if everything happened correctly, or a DEBOXERR_#?
	code.

	If the picture has a mask (a flag set in the BMInfo structure),
	the 'mask' parameter must have a pointer to a plane that has the
	same dimensions as the bitmap planes.  If there is no mask, this
	field should be left as NULL.  DEBOXERR_MISSINGPLANE will be
	returned if a mask is needed.

	This routine assumes that the bitmap is the same width, height and
	depth as the decompressed data.  If it is not, it will report an
	error, which might happen to be in the form of a GURU.

	This can be called without calling DecompBMInfo.  However it is the
	caller's responsibility to set up the BitMap correctly.

   INPUTS
	header	- pointer to a CompHeader structure or NULL.  If NULL then
		  the indata parameter is assumed to point to the CompHeader
		  structure (all sbox'ed data is in the form <header><data>).
	indata	- pointer to the start of a picture compressed data area.
		  If header is not NULL then indata should be pointing to the
		  <data> and not the <header>.
	bitmap	- a pointer to a fully initialized BitMap structure that is
		  the same size as the picture to be decompressed.
	mask	- A PLANEPTR to a mask bitplane of the same dimensions as
		  the bitmap's planes.  If a mask is not contained in this
		  picture, mask should be NULL.

   RESULT
	error	- zero if everything went well.  Non-zero otherwise;  check
		  debox.h for DEBOXERR_#? codes.

   EXAMPLE

   NOTES
	Bitplanes need not be in CHIP RAM.

   BUGS

   SEE ALSO
	cdtv/debox.h

debox.library/DecompBMInfo                         debox.library/DecompBMInfo

   NAME   
	DecompBMInfo -- Get info for bitmap compressed data.

   SYNOPSIS
	outbminfo = DecompBMInfo (bminfo,header, indata)
	  D0			   A0      A1      A2

	struct BMInfo * DecompBMInfo (	struct BMInfo *,
					struct CompHeader *, UBYTE *);

   FUNCTION
	Extracts and allocates a BMInfo structure from a sbox-compressed
	picture file, and returns a pointer to it.  If there is any form of
	error (memory shortage, decompression error, et al), NULL will be
	returned.

	The resulting BMInfo structure may be used to prepare a bitmap of
	the correct size, then filled in with DecompBitMap().

	'bminfo' can point to a memory block or be NULL.  If a NULL is passed
	the function will attemp to allocate the BMInfo structure.  This
	allocated structure must be freed using FreeBMInfo().  If 'bminfo'
	point to a block of memory, the block must be at least 
	the size of BMInfoSize().
	
   INPUTS
	bminfo	- an optional pointer to a BMInfo structure. If a NULL is 
		  passed then a bitmap structure will be created by this 
		  function.  The size of the BMInfo structure can be found 
		  by a call to BMInfoSize().
	header	- pointer to a CompHeader structure or NULL.  If NULL then
		  the indata parameter is assumed to point to the CompHeader
		  structure (all sbox'ed data is in the form <header><data>).
	indata	- pointer to the start of a picture compressed data area.
		  If header is not NULL then indata should be pointing to the
		  <data> and not the <header>.

   RESULT
	outbminfo- 	pointer to filled-out BMInfo structure, or NULL if there
		  	was an error.  If bminfo was not NULL.

   EXAMPLE

   NOTES
	I decided to just allocate the entire info structure for the user
	since the amount of data can vary.  The private fields in the
	structure are actually before the returned structure.  I decided to
	use this method because I stored the BMInfo structure plus the all
	the color and range information in one data section.

	There is no informative error return code for this routine.  I could
	not see an eloquent way of returning an error code.  Please give
	input.

   BUGS

   SEE ALSO

debox.library/DecompData                             debox.library/DecompData

   NAME   
	DecompData -- Decompresses squeezed box data segments.

   SYNOPSIS
	result = DecompData (header, indata, outdata)
	 D0		      A0      A1      A2

	LONG DecompData (struct CompHeader *, UBYTE *, UBYTE *);

   FUNCTION
	This is the general decompression function.  If ci_Type
	DEBOX_UNKNOWN, you should use this function to decompress
	the data.

	It is up to you to "know" what to do with the resulting data.

   INPUTS
	header	- pointer to a CompHeader structure or NULL.  If NULL then
		  the indata parameter is assumed to point to the CompHeader
		  structure (all sbox'ed data is in the form <header><data>).
	indata	- pointer to the data to be decompressed.  If header is not
		  NULL then indata should be pointing to the <data> and not
		  the <header>.
	outdata	- pointer to an area of memory to deposit decompressed data.
		  The area must be as large as header->hi_Size.

   RESULT
	result -  Positive for the total number of bytes decompressed
		  or a negitive DEBOXERR code.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO

debox.library/DeleteView                             debox.library/DeleteView

   NAME   
	DeleteView -- Removes and frees a SuperView structure.

   SYNOPSIS
	DeleteView (superview)
		       A0

	VOID DeleteView (struct SuperView *);

   FUNCTION
	Frees everything CreateView() created.  If the SV_ALLOCATED bit
	is set in the SuperView structure, DeleteView() will free it, too.

	Make sure some other view is loaded before calling this routine.
	Otherwise, you may get a garbage display.

   INPUTS
	superview - pointer to a SuperView structure set up or created by
		    CreateView().

   RESULT

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
	CreateView()

debox.library/FreeBMInfo                             debox.library/FreeBMInfo

   NAME
	FreeBMInfo -- Frees the BMInfo structure.

   SYNOPSIS
	FreeBMInfo (bminfo)
		      A0

	void FreeBMInfo (struct BMInfo *);

   FUNCTION
	Frees a BMInfo structure created by DecompBMInfo().  This will free
	the entire area of the BMInfo structure, including the included
	color map and range info section.

   INPUTS
	bminfo	- pointer to a BMInfo structure that was returned from a
		  call to DecompBMInfo().

   RESULT

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
	DecompBMInfo()

debox.library/FreeBMInfoRGB32                   debox.library/FreeBMInfoRGB32

   NAME   
	FreeBMInfoRGB32 - Frees a table returned form GetBMInfoRGB32(). (V39)

   SYNOPSIS
	FreeBMInfoRGB32( table )
			   a0
	void FreeBMInfoRGB32( ULONG * );

   FUNCTION
	Frees the table created by GetBMInfoRGB32().  For this function to 
	work properly, the first ULONG of the Table must not be changed.

   INPUTS
	table		- Table returned by GetBMInfoRGB32().

   EXAMPLE
	rgb32tbl = GetBMInfoRGB32( bmi, bmi->bmi_ColorCount, 0 );
	FreeBMInfoRGB32( rgb32tbl );

   NOTES

   BUGS

   SEE ALSO
	GetBMInfoRGB32(),LoadRGB32().

debox.library/GetBMInfoRGB32                     debox.library/GetBMInfoRGB32

   NAME   
	GetBMInfoRGB32 - Get a table of RGB32 values from a BMInfo structure. (V39)

   SYNOPSIS
	table = GetBMInfoRGB32( bmi, numberofcolors, firstcolor )
	  d0			a0	d1		d2

	ULONG	*GetBMInfoRGB32( struct BMInfo *, UWORD, UWORD );

   FUNCTION
	Returns a table suitable for the LoadRGB32() command.  Sbox 2.x hides
	the full 24 bit color values in the BMInfo structure.

	This function will work with all Sbox pictures, and will, if memory
	is advailable, return a properly formated table even if the BMInfo 
	structure contains only the 12bit information.

	The table returned will always contain the number of colors requested,
	even if they are out of the range of the BMInfo color data.  The table
	entries that cannot be found in the BMInfo structure are filled in 
	with BLACK (0,0,0).

	The table should be freed with the FreeBMInfoRGB32 Command.   Also the
	first LONG word contains the table information.  This information 
	is used by the FreeBMInfoRGB32() command to free the table, DO NOT CHANGE.
	The color values can be changed, and the table can be passed to 
	CycleRGB32().

	'bmi' can NULL.  In this case a "empty" table is created with 
	'numberofcolors' entries and the first color to be loaded 
	set to 'firstcolor'.

   INPUTS
	bmi		- Properly initilized BMInfo structure or NULL if a 
			  "empty" color table is desired.
	numberofcolors	- number of colors desired in this table.
	firstcolor	- first color to be loaded. (normal 0)

   RESULT
	A table of long words formated for use with the LoadRGB32() command:
	        1 Word with the number of colors to load
	        1 Word with the first color to be loaded.
	        3 longwords representing a left justified 32 bit rgb triplet.
	        The list is terminated by a count value of 0.
	or NULL if not enough memory could be allocated.

   EXAMPLE
	rgb32tbl = GetBMInfoRGB32( bmi, bmi->bmi_ColorCount, 0 );

   NOTES

   BUGS

   SEE ALSO
	FreeBMInfoRGB32(),LoadRGB32().

debox.library/GetSpecialData                     debox.library/GetSpecialData

   NAME
	GetSpecialData -- Return special data, if present.

   SYNOPSIS
	data = GetSpecialData( id, baseptr )
	d0 [:d1]               d0    a0

	ULONG __asm GetSpecialData( ULONG, void * );

   FUNCTION
	Retrives hidden data out of a structure, based on the 'id' passed 
	to the routine.  The 'id' is actually a instruction to tell the 
	routine what to do and where to look for the information.

	There are two types of data that could be returned by this function:
	VALUES and POINTERS.  VALUES are passed back as the answer in d0, 
	POINTERS are passed back in d0 as an address.   The documentation
	for each ID will tell what is passed back by the GetSpecialData()
	routine.

	The extra information is stored after the structure.   If the proper
	flags are set in the original structure 

   INPUTS
	id	- an 'SPECIAL_ID' these IDs will be documented in the 
		  header files where they are defined as well as general
		  documentation.
	baseptr	- a pointer to the structure where the data is 'hidden'.

   RESULT
	Returns different things based on the specific 'id'.  
	See documentation, for each defined 'id'.

   EXAMPLE
	#include <cdtv/debox.h>
	ULONG 		modeid;
	struct BMInfo	*bmi;

	\* 
	 * BMISPECIAL_MODEID - is defined in 'debox.h'
	 * it is however set up to return an extended ULONG mode or
	 * the bmi->bmi_Modes (as a ULONG) if that data is not included.
	 * 
	 * This function will work even with SBOX 1.0 returning the value in
	 * bmi->bmi_Mode. 
	 *\
	modeid = GetSpecialData( BMISPECIAL_MODEID, bmi );


   NOTES
	This function is designed to handle unforseen extensions with backward
	capablity.   The 'id' is actually a simple language telling the function
	where to look for the data.  This function will actually work with any
	existing structure where a flag can be set a side in the first 256 bytes
	in the structure and tye structure is less than 512 bytes.

	This function is mainly included so that enhancements to the DEBOX data can
	be made without modifying the Debox.library.

	Here is a brief explanation of the 'id':

	  For both types (VALUE and POINTER) there is information to tell where the
	  EXT_FLAG is in the original structure.   If the EXT_FLAG is not detected
	  in in the structure a default value is determined based on the other
	  information.
	  
	  BOTH		tbbb ---- oooo oooo ---- ---- ssss ssss
		t - type, 0 for VALUE, 1 for POINTER.
		b - bit of EXT_FLAG.
		o - offset into base structure of flag byte where EXT_FLAG is kept.
		s - size of base structure. ((s+1)*2).
	  
	  For VALUEs,if the ID is not found then the id contains an offset into the
	  original structure and the type of data to be retrieved.  This data is 
	  converted to either a LONG or a ULONG and returned.  It the ID is found
	  the next LONG is returned.
	
	  VALUE 	0--- uttq ---- ---- zzzz zzzz ---- ----
		0 - indecates value type.
		u - 0 unsigned, 1 signed.
		t - 0:BYTE, 1:WORD, 2:LONG, 4:QUAD
		q - not used - KEEP ZERO!.
		z - Offset in BYTES into original structure, If this ID is not there.
		    0xff - means return zero!
	  
	  For POINTER IDs, value will be returned.  Also can have a fall back to 
	  the original structure if the ID is not found.
	  
	  POINTER	1--- iiiq ---- ---- zzzz zzzd ---- ----
		i - identifier. for uniquness.
		q - not used - KEEP ZERO!.
		z - Offset in z*2 Bytes into the structure. 0x7f Means return NULL
		    if ID not found.
		d - 0: Include the LONG size in the structure returned.
		    1: return the data after the LONG size.

	Here is an example of how the structure with these extentions would be layed
	out:
		Offset		Notes
		0		BMInfo structure.
		17			bmi_Flags, bit 5 is the EXT_FLAG
		
		56		BMISPECIAL_MODEID  Start of the Special data. 
		60		<modeid>
		64		0 - End of Special modes.

	Here is a look at the BMISPECIAL_MODEID (0x5211120d)

		0101 0010 0001 0001 0001 0010 0000 1101
	        ^<-> ^<>^ <-------> <-------> <------->: Size of struct BMInfo
		| |  || |      |        |		 = (13+1)*2 = 28 bytes  
		| |  || |      |        +-: Offset of 18 Pointing to bmi_Modes
		| |  || |      +-: Offset of 18 Pointing to bmi_Flags
		| |  || +-: Not used 
		| |  |+-: 1 = WORD  \= UWORD
		| |  +-: 0 Unsigned /
		| +-: EXT_FLAG is the 5 bit in bmi_Flags.
		+-: This ID is a VALUE type.

	Right now this is the only ID I support.  But this method could be used
	to provide 32bit Color maps. ( BMISPECIAL_32CMAP Would return a pointer,
	if present, of a 3.0 32bit Colormap ready for loading using LoadRGB32().)

   BUGS
	Right now only lightly tested.  Needs some rewriting.

   SEE ALSO

debox.library/HeaderSize                             debox.library/HeaderSize

   NAME   
	HeaderSize -- Report the size of the header.

   SYNOPSIS
	size = HeaderSize (header)
	 D0		       A0

	ULONG HeaderSize (struct CompHeader *);

   FUNCTION
	Returns the size of the header based on the version.  Right now it
	will only handle version 1 headers.  If a NULL is passed - Version 1
	header size will be returned.

   INPUTS
	header	- pointer to CompHeader structure

   RESULT

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
	HeaderOffset()

debox.library/MemSet                                     debox.library/MemSet

   NAME   
	MemSet -- General purpose memory-setting routine.

   SYNOPSIS
	MemSet (buffer, value, size)
		  A0	 D0     D1

	void MemSet (void *, UBYTE, ULONG);

   FUNCTION
	Fills the 'buffer' with the low order byte of 'value' quickly.  

   INPUTS
	buffer	- a pointer to a buffer to be filled.
	value	- character to fill the buffer.
	size	- size of area to be filled.

   RESULT

   EXAMPLE

   NOTES
	I could not find this routine in any of the libraries.  I need it
	for the decompressor so I though I would include it as a public call.

   BUGS

   SEE ALSO

debox.library/NextComp                                 debox.library/NextComp

   NAME   
	NextComp -- Go to next decompression data area.

   SYNOPSIS
	data = NextComp (header, indata)
	 D0		     A0      A1

	UBYTE * NextComp (struct CompHeader *, UBYTE *);

   FUNCTION
	NextComp() returns a pointer the byte just after the current
	decompression block.  If, for example, DEBOX files were joined
	together and loaded in as one file, NextComp() could be used to
	get the positions of all the "things" in the file.  If an error
	occurs, such as the passed data is invalid, NULL is returned.

   INPUTS
	header	- pointer to a CompHeader structure or NULL.  If NULL then
		  the indata parameter is assumed to point to the CompHeader
		  structure (all sbox'ed data is in the form <header><data>).
	indata	- pointer to the data to be skipped.  If header is not NULL
		  then indata should be pointing to the <data> and not
		  the <header>.

   RESULT
	data	- pointer to next "thing" in file, or NULL if an error
		  occurred.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO

debox.library/PullBMInfoExtColor             debox.library/PullBMInfoExtColor

   NAME   
	PullBMInfoExtColor - Get Extended color information from BMInfo

   SYNOPSIS
	PullBMInfoExtColor( bmi, carr, noc, lower, upper )
			    A0    A1   D0   D1:8   D2:8

	VOID PullBMInfoExtColor( struct BMInfo *, UBYTE *,
				 LONG, UBYTE, UBYTE );

   FUNCTION
	Extracts extended color information out a properly initilized 
	BMInfo structure.  The returned information is stored in the
	'carr' as 3 byte colors (1 byte for red, green, and blue).

	The 'lower' and 'upper' are two bound the colors.  Normaly
	these would be 0 and 255.  However, other values are acceptible.
	If, for example, 1 and 14 are used (NTSC Clipping), all values would
	be scaled down to 1 to 14.

	If 'noc' is larger than the number of colors in the BMInfo structure,
	the remaining colors are filled with the 'lower' value.

   INPUTS
	bmi		- Properly initilized BMInfo structure.
	carr		- At least 'noc * 3' UBYTE array.
	noc		- number of colors to copy.
	lower		- lower limit for color values.
	upper		- upper limit for color values.

   RESULT

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO

debox.library/UnLas                                       debox.library/UnLas

   NAME   
	UnLas - Un las a file.

   SYNOPSIS
	UnLas( indata, size )
		a0      d0

	UnLas( UBYTE *, LONG size );

   FUNCTION
	Un-LAS a file.  This is a private routine.

   INPUTS
	indata - data for input
	size   - size of data

   RESULT
	Modifies the data.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
	HeaderOffset()

