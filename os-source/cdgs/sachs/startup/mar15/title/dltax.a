; :ts=8 
*
*	DLTAX.a - delta decompression machine code
*
*	William A. Ware			C221
*
*************************************************************************
*   This information is CONFIDENTIAL and PROPRIETARY			*
*   Copyright (C) 1992, Silent Software Incorporated.			*
*   All Rights Reserved.						*
*************************************************************************

	CSECT	"DLTAX",code

; The base code is taken from Jim Kent's PD code.  
; 
;   The original routine was called by:  unskip5( in, out, linebytes )
;
;   Mine will be called sligtly differently to make a more general and 
; safer routine:   
;
;	DecompDLTACol( in, out, ytable, col, bpr, rows )
;		       a0   a1   a2      d0   d1   d2
;
;   The 'ytable' must be set up with each line as a UWORD offset for
; each line.  The 'bpr' is the BytesPerRow of the bitmap.  The 'rows' is
; the rows per bitmap. The 'col' is the number of colums in this data.
; for example if the data is smaller than the actual bitmap then a smaller
; number of colums could be used.
;
;   The major difference between this and the original code is that the 
; rows are checked before each COPY, RUN, or SKIP.   If it is overrun the
; code will be trunckated.  More about that in and the actual interals of
; the routine in the autodocs.


; d0 - 'col' count down			a0 - 'in' data 
; d1 - 'bpr' Bytes per row.		a1 - 'out' data
; d2 - 'row' original			a2 - 'ytable'
; d3 - 'row' count down			a3 - 'out' data counter.
; d4 - OP count
; d5 - OP code.
; d6 - temp
; d7 - temp

;VOID __asm DecompDLTAXPlane( 	register __a0 UBYTE *indata,
;				register __a1 UBYTE *outdata,
;				register __a2 UWORD *ytable,
;				register __d0 WORD  col,
;				register __d1 WORD  bpr,
;				register __d2 WORD  rows );

			xdef	_DecompDLTAXPlane
_DecompDLTAXPlane:
		movem.l d2-d7/a2-a3,-(sp)
		bra.w	ecolloopfinal

scolloop	; COL Loop, set up for each column
		
		movea.l	a1,a3		; get copy of DEST pointer
		move.w	d2,d3		; set the row - countdown. (1)
		
		moveq	#0,d4
		move.b	(a0)+,d4	; get OP count
		
		bra.s	eoploop

soploop		; OP Loop, set up for each opcode.
		moveq	#0,d5
		move.b	(a0)+,d5	; Get OP code
		bmi.s	doxcopy		; < 0 xcopy
		beq.s	dosame		; = 0 same

doskip			; SAME op code
		sub.w	d5,d3		; decrease rows count
		ble	endofrow	; branch if it is the end-of-row
		
		add.w	d5,d5		; offset into ytable
		adda.w	0(a2,d5.w),a3
eoploop		dbra	d4,soploop
		bra.w	ecolloop

dosame			; SAME op code
		move.b	(a0)+,d5	; fetch the count
		move.b	(a0)+,d7	; fetch the value to repeat.
		
		sub.w	d5,d3		; decrease rows count
		bge.s	1$		; branch if the rows is >= 0
		
		add.w	d3,d5	; adjust the count so that we do not
				; overrun the rows.
1$		move.w	d5,d6
		asr.w	#3,d6	; d6 holds # of times to loop through tower 
		and.w	#7,d5	; d5 is the remainder.
		add.w	d5,d5
		add.w	d5,d5
		neg.w	d5
		jmp	sametower_base(pc,d5.w)

sametower
		eor.b	d7,(a3)		; 8 times
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
		eor.b	d7,(a3)
		adda.w	d1,a3
sametower_base
		dbra	d6,sametower
		tst.w	d3		; test to see if this was last op 
		ble.s	endofrow
		dbra	d4,soploop
		bra.w	ecolloop

doxcopy			; XCOPY op code
		and.b	#$7f,d5		; modifiy the opcode as the count.
		
		sub.w	d5,d3		; decrease rows count
		bge.s	1$		; branch if the rows is >= 0
		
		add.w	d3,d5	; adjust the count so that we do not
				; overrun the rows.
1$		move.w	d5,d6	; setting up tower as above.
		asr.w	#3,d6	; d6 holds # of times to loop through tower 
		and.w	#7,d5	; d5 is the remainder.
		add.w	d5,d5	;   d5 *= 2
		move.w	d5,d7
		add.w	d5,d5	;   d5 *= 4
		add.w	d7,d5	;   d5 *= 6
		neg.w	d5
		jmp	xcopytower_base(pc,d5.w)
xcopytower
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
		move.b	(a0)+,d7
		eor.b	d7,(a3)
		adda.w	d1,a3
xcopytower_base
		dbra	d6,xcopytower
		tst.w	d3		; test to see if this was last op 
		ble.s	endofrow
		dbra	d4,soploop
		bra.s	ecolloop

endofrow		; row ended - check to see if there is more opts
		bra.s	2$

1$		moveq	#0,d5
		move.b	(a0)+,d5	; Get OP code
		bmi.s	4$		; < 0 xcopy
		beq.s	3$		; = 0 same

2$		; unique - nothing else, decrease opcode.
		dbra	d4,1$
		bra.s	ecolloop

3$		; same - two more op codes.
		addq.w	#2,a0
		dbra	d4,1$
		bra.s	ecolloop

4$		; unique - mask out and add.
		and.b	#$7f,d5		; modifiy the opcode as the count.
		adda.w	d5,a0
		dbra	d4,1$

ecolloop	; end of column
		addq.l	#1,a1		; increase the column
ecolloopfinal	dbra	d0,scolloop	; do it again
		
		; finished.
		movem.l	(sp)+,d2-d7/a2-a3
		rts

		END
