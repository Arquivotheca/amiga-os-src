                             RS decoding
                             ===========

                           Allan Havemose
                          February 20, 1992

This small document outlines the components of the Reed Solomon decoding
algorithm implemented for CD+G.

Files:
======
The release consists of 2 executables

	ecc		decoding algorithm
	matbuild	small utility program to build Hp and Hq


  ecc			stand-alone executable for decoding algorithm
  ecc.h			Main include file
  ecc_protos.h  	prototypes
  synpoly_protos.h	syndec protos
  gf64.def		Tables defining GF64
  gfmath.c		generic math routines for GF64 arithmetics. Not really used.
  			All GF-arithmetics is implemented via C-macros. The
  			corresponding C-functions are in this module.
 			Storage for GF64 tables are allocated here.
  gfsupport.c		Support module for GF operations. Prints nicely formatted
  			vectors, arrays etc.
  main.c		main module for ecc. Contains test code
  poly.asm		syndrome polynomial arithmetic in assembler.
  syndec.c		ALL decoding related functions (except poly.asm). This is
  			were it all happens.

  makefile		makefile for both 'ecc' and 'matbuild'

  matbuild		executable
  matbuild.c		matbuild's main module

  ecc.doc		this excellent document.


Principles of Operation
=======================

The decoding algorithm is based on the Syndrome decoding principle. A vector V is
received and the syndrome S is calculated:

	S = H*V			(vector/matrix equation)

The syndrome S=(s0,s1,s2,s3) is now interpreted as a polynomial, and the algorithm
masages the S(x) to produce what is called a locator polynomial. The locator is
called Gamma(x). The roots in Gamma(x) are the inverse error positions.

After finding the roots in Gamma(x) the error evaluator polynomial Omega(x) is
calculated. Evaluating Omega(x) and Gamma'(x) (differential coefficient) gives
the error value in that position.

The decoding process then finally adds the error vector to the received vector.

The decoding algorithm is able to tell if there is more errors than it can handle
and backs out appropriately. It also makes sure not to correct errors beyond
the length of the received vector.

Depending on whether P or Q codes are decoded some of the internal parameters in the
decoding process are different:

	P	correct any 2 symbol errors	[symbol = GF64 elememnt = byte]
	Q	correct any 1 symbol error


Currently only P-code decoding is implemented. It's easy to add Q decoding as well.

Implementation details:
======================

GF64 elements are represented as UBYTES, but the only accupy the lover 5 bits.
Basic GF64 operations are done via table lookup, since no "standard" math operations
work in finite fields:

	x + y		x XOR y
	x * y		table look-up
	x^-1		table look-up  (inverse element)

Elements in GF64 can be represented in two different ways:

	1. as a number between 0 and 63 (decimal)
	2. by expressing the element using the primitive element from GF64.
	   The element is in effect expressed using the generator for the cyclic
	   group contained in any finite field.

Conversion between the two representations is done via the Log[] and Exp[] tables.


Since both the P and Q codes are designed to correct 2 errors at the most, it's
known that S(x) is of degree 3 at most. For efficiency purposes S(x) is the
often manipulated using 'long word' instructions. Ex:

	for(i=0;i<4;i++)
	  s[i] = 0;

	is implemented as

	moveq.l	#0,(a0)


Optimizations along that line can be found in poly.asm


Open Issues:

1.	Check for error position beyond 24 [ can happen if > 2 errors ]
2.	is data garantied to be 6 bit or can the upper 2 bits be non-zero. ?

Final notes:
===========

This is most likely the shortest description of RS decoding, so ask me if there
are some very unclear points.

The C source is intented as a work-sceleton for down-coding to assembly.



