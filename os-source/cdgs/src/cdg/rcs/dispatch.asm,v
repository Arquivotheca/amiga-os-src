head     1.21;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.21
date     93.02.03.12.01.31;  author darren;  state Exp;
branches ;
next     1.20;

1.20
date     93.02.03.11.43.41;  author darren;  state Exp;
branches ;
next     1.19;

1.19
date     92.04.02.18.48.57;  author darren;  state Exp;
branches ;
next     1.18;

1.18
date     92.03.05.11.23.30;  author darren;  state Exp;
branches ;
next     1.17;

1.17
date     92.03.04.18.20.14;  author darren;  state Exp;
branches ;
next     1.16;

1.16
date     92.03.02.13.40.53;  author darren;  state Exp;
branches ;
next     1.15;

1.15
date     92.02.26.08.46.45;  author darren;  state Exp;
branches ;
next     1.14;

1.14
date     92.02.25.18.45.33;  author darren;  state Exp;
branches ;
next     1.13;

1.13
date     92.02.24.16.35.16;  author darren;  state Exp;
branches ;
next     1.12;

1.12
date     92.02.24.12.19.22;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     92.02.24.11.12.50;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     92.02.21.17.02.02;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     92.02.19.16.56.43;  author darren;  state Exp;
branches ;
next     1.8;

1.8
date     92.02.17.16.19.05;  author darren;  state Exp;
branches ;
next     1.7;

1.7
date     92.02.17.12.49.22;  author darren;  state Exp;
branches ;
next     1.6;

1.6
date     92.02.14.18.00.36;  author darren;  state Exp;
branches ;
next     1.5;

1.5
date     92.01.31.11.30.27;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     92.01.31.11.00.50;  author darren;  state Exp;
branches ;
next     1.3;

1.3
date     92.01.30.18.24.32;  author darren;  state Exp;
branches ;
next     1.2;

1.2
date     92.01.30.16.49.17;  author darren;  state Exp;
branches ;
next     1.1;

1.1
date     92.01.30.16.04.39;  author darren;  state Exp;
branches ;
next     ;


desc
@Initial check-in of ALPHA cdg.library for CDTV-CR
@


1.21
log
@Modify comments re: CDTV
@
text
@**
**	$Id: dispatch.asm,v 1.20 93/02/03 11:43:41 darren Exp Locker: darren $
**
**	CDTV CD+G -- dispatch.asm (dispatch packets)
**
**	(C) Copyright 1992 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
**	
**

** Includes

		INCLUDE	"cdgbase.i"
		INCLUDE	"cdgprefs.i"
		INCLUDE	"debug.i"

** Exports
		SECTION	cdg

		XDEF	CDGDraw
		XDEF	CDGUserPack

**Imports
		XREF	_TVPresetBorder
		XREF	_TVCLUTLow
		XREF	_TVCLUTHigh
		XREF	_TVPresetMemory
		XREF	_TVWriteFont
		XREF	_TVEORFont
		XREF	_TVScrollPreset
		XREF	_TVScrollCopy

		XREF	DecodeRS	;ecc.asm

		XREF	_custom		;amiga.lib
** Equates

						;PQRSTUVW
TV_GRAPHICS_MODE	EQU	(SYMF_T!SYMF_W)	;00001001
MIDI_MODE		EQU	(SYMF_S!SYMF_T)	;00011000

** Assumptions


******* cdg.library/CDGUserPack **************************************
*
*   NAME
*	CDGUserPack -- Call cdg.library with your own PACK data
*   
*   SYNOPSIS
*	VOID CDGUserPack( pack );
*	                   A0
*
*	VOID CDGUserPack( UBYTE * );
*
*   FUNCTION
*	This function is meant for those who want to draw their
*	own graphics on the CD+G screen, or send a custom sequence
*	of MIDI bytes.
*
*	In general it is meant to be used when a CD+G disk, or
*	CD+MIDI disk is not playing.  However given a custom
*	CD+G disk, it is possible to mix real-time CD+G images
*	with software generated images on the same screen.
*
*   INPUTS
*	pack - Pointer to PACK data.  Each symbol in a PACK
*	consists of 6 bits, otherwise known as channels P
*	through W.
*
*	The P and Q channel bits MUST be 0.  The Q0-Q1 parity
*	bytes, and P0-P3 parity bytes are ignored because it
*	is assumed that the PACK you pass to this function is
*	free of bit errors.  Because no error correction is needed,
*	it is possible to draw at a much faster rate than is normally
*	possible with real-time data from a disk.
*
*   RETURNS
*	N/A
*
*   NOTES
*
*   SEE ALSO
*
***********************************************************************
CDGUserPack:
	PRINTF	DBG_ENTRY,<'CDG--CDGUserPack($%lx)'>,A0

		movem.l	a4/a6,-(sp)

		move.l	a0,a4
		move.l	cdg_BaseData(a6),a6

	; check if +G

		moveq	#00,d1
		move.b	(a4),d1
		cmp.b	#TV_GRAPHICS_MODE,d1
		bne.s	CDGUP_Midi

		move.b	cdp_Instruction(a4),d1
		cmpi.b	#INSTR_EOR_FONT,d1	;sanity check
		bhi.s	CDGUP_Exit

		lsl.b	#2,d1			;6->8 bits
		lea	_DispatchTable(pc),a0
		move.l	0(a0,d1.w),a0
		jsr	(a0)

		movem.l	(sp)+,a4/a6
		rts

CDGUP_Midi:
		cmp.b	#MIDI_MODE,d1
		bne.s	CDGUP_Exit

	; cannot do if no resource allocation

		tst.l	cdd_MiscResource(a6)
		beq.s	CDGUP_Exit

		move.l	d3,-(sp)

	; don't allow changes to +G/+MIDI lights via this function

		move.b	cdd_TypeLights(a6),d3	;cache

		swap	d3			;save type lights

		move.w	#CDGF_MIDI,d3		;enable +MIDI

		BSRSELF	CDGMidiPack

		swap	d3			;restore type lights

	; restore +MIDI light

		move.b	d3,cdd_TypeLights(a6)

		move.l	(sp)+,d3
CDGUP_Exit:

		movem.l	(sp)+,a4/a6
		rts

******* cdg.library/CDGDraw ******************************************
*
*   NAME
*	CDGDraw -- Main CD+G PACKET handling routine
*   
*   SYNOPSIS
*	flags=CDGDraw( types );
*	D0		D0
*
*	ULONG CDGDraw( ULONG );
*
*   FUNCTION
*	Process pending packets.  CDGDraw() must be called in
*	a loop from an efficient, relatively high priority task.
*	Failure to call this function often enough will result
*	in CD+G data being lost.
*
*	Currently this function must be called at least once every
*	1/2 a second, but while the CD+G screen is in front, it
*	should be called as frequently as possible.  Ideally it is
*	called in a loop which does little more than check for
*	user input, and use the cd.device to control disk play,
*	stop, pause, etc.
*
*	While a +MIDI disk is playing, your code should call this
*	function at least 75x per second, or the +MIDI output may not be
*	synchronized with the CD audio output.
*
*   INPUTS
*	types - Type(s) of data to process.  See cdgprefs.h/i
*	for defined flags.  For example -
*
*		CDGDraw((ULONG)CDGF_GRAPHICS|CDGF_MIDI);
*
*	Processes +MIDI, and +G PACKS.
*
*		CDGDraw((ULONG)CDGF_GRAPHICS);
*
*	Processes +G PACKS only.
*
*   RETURNS
*	flags - A set of flags as defined in cdgprefs.h/i.  The
*	flags are used by the caller to determine if any +G, or
*	+MIDI PACKS have been processed.
*
*   NOTES
*	Currently this function knows how to process TVGRAPHICS
*	PACKS, and MIDI PACKS.  MIDI PACKS causes data to be sent
*	at MIDI baud rates via the serial port.
*
*	It is also possible to use Wait() instead of calling this
*	function in a pure busy loop.  This requires providing a
*	pointer to a task structure, and signal mask in the CDGPrefs
*	structure when you call CDGBegin().  Because your task
*	will be signaled approximately 75 times per second, your
*	code needs to be efficient.
*
*	In addition, the calling task must be of a high enough
*	priority to avoid long delays.  In the typical CDTV-LIKE
*	application only one task is effectively running, so this may
*	not be a significant problem.  Even short delays can result in
*	rough animation which is undesirable.
*
*	It is allowable to call this function a pure busy loop,
*	and not wait for a signal.  This function will simply
*	return if there are no PACKs to be processed.
*
*   SEE ALSO
*	cdg/cdgprefs.h, cdg/cdgprefs.i
*
***********************************************************************

*	Code scans PACKS stored via an interrupt.  There are 4 PACKS
*	per PACKET.  There is an interrupt routine which duplicates
*	a PACKET at a time using an optimized copy, and the PACKS
*	within those PACKETS are decoded here.  Currently only
*	TV_GRAPHICS_MODE, and MIDI_MODE are recognized.
*
*	PACKETs are stored in a circular buffer, so it is possible
*	to get behind somewhat, and still not lose data.  The maximum
*	buffer size can be set in cdgbase.i.
*
*	I was hoping that the PACKS would be de-interleaved by the
*	4510, but no such luck, so I do it in this code.
*
CDGDraw:

		movem.l	d2-d3/a4-a6,-(sp)

		move.l	d0,d3		;cache 'types'

	; obtain pointer to data

		move.l	cdg_BaseData(a6),a6
		
	; Obtain pointer to PACKET data from circular buffer.
	; The interrupt updates cdd_PutPacket, and this code
	; updates cdd_GetPacket, so there is never any race condition.
	;
	; Typical case is there is only 1 PACKET pending - 2 or more
	; means we are behind, and really shouldn't be.
	;
	; We have to de-interleave this data, so we only take a PACK
	; at a time, and store in a circular bucket buffer.  This
	; means we have a PACK bucket ready, and 7 more being built
	; hence we have to handle each PACK bucket before we can
	; get the next PACK's worth of data, and store it in the
	; PACK buckets.
	;
		move.w	cdd_PackCount(a6),d2

CDGDraw_NextPacket:

		move.l	cdd_GetPacket(a6),a5

	; check for any pending packets

CDGDraw_PrimePack:

		cmp.l	cdd_PutPacket(a6),a5
		beq	CDGDraw_Exit

		cmp.l	cdd_MaxPacket(a6),a5
		bne.s	CDGDraw_Process

		lea	cdd_PacketData(a6),a5

CDGDraw_Process:


	; This is a bucket sorting algolrithim, and ARGHH! adds
	; nearly 80 microseconds of overhead per PACK (ouch).  A
	; brute force approach is used, which turns out to be
	; nearly 4x faster than the the scheme used by the original
	; CD+G code.
	;
	; We could have done something like the original CD+G code
	; too which used a lookup table for the destination offsets,
	; and bumped the pointer for every byte in the source.  Timing
	; turned out to be 3x longer for this kind of code - ACK, need
	; to look at what else might be done to optimize this.
	;
	; The PACKS come in 8x interleaved, hence, 3 bytes per PACK
	; belong to one of 8 different PACKS.  In addition, some bytes
	; are scrambled (bytes 1, 2, 3, 5, 18, and 23)
	; 
	;
		move.l	cdd_NextBucket(a6),a1

		move.b	(a5),cdt_PackData(a1)
		move.b	8(a5),cdt_PackData+8(a1)
		move.b	16(a5),cdt_PackData+16(a1)

		move.l	(a1),a1
                                                      
		move.b	1(a5),cdt_PackData+18(a1)
		move.b	9(a5),cdt_PackData+9(a1)
		move.b	17(a5),cdt_PackData+17(a1)

		move.l	(a1),a1
                                                      
		move.b	2(a5),cdt_PackData+5(a1)
		move.b	10(a5),cdt_PackData+10(a1)
		move.b	18(a5),cdt_PackData+1(a1)

		move.l	(a1),a1

		move.b	3(a5),cdt_PackData+23(a1)
		move.b	11(a5),cdt_PackData+11(a1)
		move.b	19(a5),cdt_PackData+19(a1)

		move.l	(a1),a1

		move.b	4(a5),cdt_PackData+4(a1)
		move.b	12(a5),cdt_PackData+12(a1)
		move.b	20(a5),cdt_PackData+20(a1)

		move.l	(a1),a1

		move.b	5(a5),cdt_PackData+2(a1)
		move.b	13(a5),cdt_PackData+13(a1)                 
		move.b	21(a5),cdt_PackData+21(a1)                  
                                                      
		move.l	(a1),a1

		move.b	6(a5),cdt_PackData+6(a1)
		move.b	14(a5),cdt_PackData+14(a1)                   
		move.b	22(a5),cdt_PackData+22(a1)                 
                                                      
		move.l	(a1),a1

		move.b	7(a5),cdt_PackData+7(a1)
		move.b	15(a5),cdt_PackData+15(a1)                   
		move.b	23(a5),cdt_PackData+3(a1)                 

	; We leave the bucket pointer alone this time, so that
	; the next PACK is not copied to the same place; essentially
	; cdd_NextBucket rolls through all 8 buffers
	;
		move.l	a1,cdd_NextBucket(a6)

		adda.w	#CDGPack_SIZEOF,a5	;skip to next buffered PACK
		move.l	a5,cdd_GetPacket(a6)
		addq.w	#1,d2			;processed 1 pack

	; Check if we have de-interleaved enough PACKS to form at least 1
	; de-interleaved PACK.

		cmpi.w	#15,d2
		bcs	CDGDraw_PrimePack

	; A1 now points to the last bucket we dropped 3 bytes in to.  This
	; also happens to be de-interleaved if the PACK count is large
	; enough.  The actual data is stored after the pointer in the
	; bucket structure.  Unlike cdg.classic, I don't copy this data
	; yet again, but rather pass a pointer to it in register A4 (faster).


		lea	cdt_PackData(a1),a4	;CASM should optimize as ADDQ #4

	; HERE is the perfect spot to call a REED-SOLOMON ERROR CORRECTION 
	; routine with a pointer to the PACK in A4

		bsr	DecodeRS
		beq.s	CDGDraw_skippack	;good pack?

		moveq	#00,d1
		move.b	(a4),d1			;MODE byte

		cmp.b	#TV_GRAPHICS_MODE,d1
		bne.s	CDGDraw_midi		;fast path for TV_GRAPHICS!

		move.b	cdp_Instruction(a4),d1	;INSTRUCTION byte

		cmpi.b	#INSTR_EOR_FONT,d1	;sanity check else we could crash
		bhi.s	CDGDraw_skippack

		lsl.b	#2,d1			; * 4 (6 bits->8 bits)!
		move.l	_DispatchTable(pc,d1.w),a0

		cmp.l	#TVNOP,a0
		beq.s	CDGDraw_skippack

	; mark is +G disk


		subq.b	#1,cdd_GPackCount(a6)
		bpl.s	CDGDraw_MaybeG

		bset	#CDGB_GRAPHICS,cdd_TypeLights(a6)

		clr.b	cdd_GPackCount(a6)

CDGDraw_MaybeG:

	; check if +G enabled

		btst	#CDGB_GRAPHICS,d3
		beq.s	CDGDraw_skippack

		jsr	(a0)

CDGDraw_skippack:

		subq.w	#1,d2			;PACKS -1
		bra	CDGDraw_PrimePack

**
** CD+MIDI handling code
**

CDGDraw_midi:

		cmp.b	#MIDI_MODE,d1
		bne.s	CDGDraw_skippack

	; CD+MIDI only works if we own the SERIAL port, and bits.

		tst.l	cdd_MiscResource(a6)
		beq.s	CDGDraw_skippack

		bsr	CDGMidiPack
	;
		subq.w	#1,d2			;PACKS -1
		bra	CDGDraw_PrimePack

**
** Exit code - Front Panel handling, and RETURN value(s)
**
CDGDraw_Exit:
		move.w	d2,cdd_PackCount(a6)	;cache for next time through

	; Return +G and/or +MIDI bits in D0; also happens to be
	; perfect for poking the VFD (Vac. Flor. Display) control
	; byte.

		moveq	#00,d0
		move.b	cdd_TypeLights(a6),d0

		movem.l	(sp)+,d2-d3/a4-a6
		rts

*****i* cdg.library/CDGNOP ********************************************
*
*   NAME
*	CDGNOP -- Do nothing instruction (unknown)
*   
*   SYNOPSIS
*	VOID CDGNOP ( data, pack )
*			A6   A4
*
*	VOID _CDGNOP( struct CDGData *, struct CDGPack * );
*
*   FUNCTION
*	Do nothing - undefined/unknown instruction.
*
*   RETURNS
*	None.
*
***********************************************************************
CDGNOP:
TVNOP:

	rts

***********************************************************************
**
** PACK INSTRUCTION look-up table.  Unknown/Undefined instructions
** call a NOP function.
**
***********************************************************************

INSTRUCTION	MACRO	;label
		IFND	\1
			XREF	\1
		ENDC
		DC.L	\1
		ENDM

_DispatchTable:
		INSTRUCTION	TVNOP			;0
		INSTRUCTION	_TVPresetMemory		;1
		INSTRUCTION	_TVPresetBorder		;2
		INSTRUCTION	TVNOP			;3
		INSTRUCTION	TVNOP			;4
		INSTRUCTION	TVNOP			;5
		INSTRUCTION	_TVWriteFont		;6
		INSTRUCTION	TVNOP			;7
		INSTRUCTION	TVNOP			;8
		INSTRUCTION	TVNOP			;9
		INSTRUCTION	TVNOP			;10
		INSTRUCTION	TVNOP			;11
		INSTRUCTION	TVNOP			;12
		INSTRUCTION	TVNOP			;13
		INSTRUCTION	TVNOP			;14
		INSTRUCTION	TVNOP			;15
		INSTRUCTION	TVNOP			;16
		INSTRUCTION	TVNOP			;17
		INSTRUCTION	TVNOP			;18
		INSTRUCTION	TVNOP			;19
		INSTRUCTION	_TVScrollPreset		;20
		INSTRUCTION	TVNOP			;21
		INSTRUCTION	TVNOP			;22
		INSTRUCTION	TVNOP			;23
		INSTRUCTION	_TVScrollCopy		;24
		INSTRUCTION	TVNOP			;25
		INSTRUCTION	TVNOP			;26
		INSTRUCTION	TVNOP			;27
		INSTRUCTION	TVNOP			;28
		INSTRUCTION	TVNOP			;29
		INSTRUCTION	_TVCLUTLow		;30
		INSTRUCTION	_TVCLUTHigh		;31
		INSTRUCTION	TVNOP			;32
		INSTRUCTION	TVNOP			;33
		INSTRUCTION	TVNOP			;34
		INSTRUCTION	TVNOP			;35
		INSTRUCTION	TVNOP			;36
		INSTRUCTION	TVNOP			;37
		INSTRUCTION	_TVEORFont		;38

		END


@


1.20
log
@First pass at mods for AA CD Game system
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.19 92/04/02 18:48:57 darren Exp Locker: darren $
d205 3
a207 3
*	priority to avoid long delays.  In the typical CDTV application
*	only one task is effectively running, so this may not be
*	a significant problem.  Even short delays can result in
d215 1
a215 1
*	cdtv/cdgprefs.h, cdtv/cdgprefs.i
@


1.19
log
@Only set +G true bit after N +G packs.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.18 92/03/05 11:23:30 darren Exp Locker: darren $
a15 1
		INCLUDE	"cdtv_cr_hw.i"
a44 3
		IFNE	CDTV_G-CDGF_GRAPHICS
		FAIL	"CDTV_G bit != CDGF_GRAPHICS; recode!"
		ENDC
a45 5
		IFNE	CDTV_MIDI-CDGF_MIDI
		FAIL	"CDTV_MIDI bit != CDGF_MIDI; recode!"
		ENDC


a444 5

	; use OR instead of MOVE should we need to add control bits to
	; this VFD control register.

		or.b	d0,CDTVHARDWARE+VFD_FORMATS
@


1.18
log
@Add new function so programmers can submit their own +G, or +MIDI
PACKS
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.17 92/03/04 18:20:14 darren Exp Locker: darren $
d401 4
d406 4
@


1.17
log
@Update autodocs
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.16 92/03/02 13:40:53 darren Exp Locker: darren $
d23 1
d55 101
d429 1
a429 1
		BSRSELF	CDGMidiPack
@


1.16
log
@Check for +G/+MIDI enabled inside of CDGDraw(); allows us to
selectively disable/enable these features.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.15 92/02/26 08:46:45 darren Exp Locker: darren $
d100 1
a100 1
*       Currently this function knows how to process TVGRAPHICS
d120 3
@


1.15
log
@Simplify return code check from DecodeRS()
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.14 92/02/25 18:45:33 darren Exp Locker: darren $
d60 2
a61 2
*	flags=CDGDraw( VOID );
*	D0
d63 1
a63 1
*	UWORD CDGDraw( VOID );
d82 12
d138 3
a140 1
		movem.l	d2/a4-a6,-(sp)
d290 13
a323 30
	; mark is +MIDI

		bset	#CDGB_MIDI,cdd_TypeLights(a6)
		bne.s	CDGDraw_midibytes

	; Precalc 31500 bps for PAL/NTSC machine.  Based on the
	; numbers given in the Hardware manual -
	;
	; Per Hardware docs -
	;
	; NTSC	112.6 = ((3,579,545/31500)-1)
	;
	; PAL   111.6 = ((3,546,895/31500)-1)
	;
	; Because the difference is less than 1%, for now I will use
	; a constant of 112, which is the average of the two numbers.
	;
	; Doesn't set serper until first MIDI pack is received
	;

CDGSetBPS:
		nop
		move.w	_custom+serdatr,d0
		btst	#12,d0				;TSR Empty?
		beq.s	CDGSetBPS

		move.w	#112,_custom+serper		;set baud rate

CDGDraw_midibytes:

d347 1
a347 1
		movem.l	(sp)+,d2/a4-a6
@


1.14
log
@First pass at use of Error Correction code.  Absolutely must be
a good PACK for +MIDI, but for now does not require perfect data for
+G
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.13 92/02/24 16:35:16 darren Exp Locker: darren $
d261 1
a287 6

	; absolutely require good packs for +MIDI, but we are more
	; tolerant of bad +G packs

		tst.b	d0			;is a good pack?
		beq.s	CDGDraw_skippack
@


1.13
log
@Delay setting of SERPER until first MIDI PACK
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.12 92/02/24 12:19:22 darren Exp Locker: darren $
d34 2
d260 4
a263 2
		moveq	#00,d0
		move.b	(a4),d0			;MODE byte
d265 1
a265 1
		cmp.b	#TV_GRAPHICS_MODE,d0
d268 1
a268 1
		move.b	cdp_Instruction(a4),d0	;INSTRUCTION byte
d270 1
a270 1
		cmpi.b	#INSTR_EOR_FONT,d0	;sanity check else we could crash
d273 2
a274 2
		lsl.b	#2,d0			; * 4 (6 bits->8 bits)!
		move.l	_DispatchTable(pc,d0.w),a0
d288 7
a294 1
		cmp.b	#MIDI_MODE,d0
@


1.12
log
@Comment changes for +MIDI processing.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.11 92/02/24 11:12:50 darren Exp Locker: darren $
d33 2
d291 28
@


1.11
log
@Slight rework of midi handling.  Tracking of data sent is now
done within midi.asm, and I only send ALLNOTESOFF when the disk
is stopped if I've sent midi data since I last sent ALLNOTESOFF.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.10 92/02/21 17:02:02 darren Exp Locker: darren $
d68 1
a68 1
*	3/4 of a second, but while the CD+G screen is in front, it
d74 4
d86 1
a86 3
*	at MIDI baud rates via the serial port.  The first MIDI
*	PACK received also causes MIDI initialization information
*	to be transmitted.
@


1.10
log
@Code for midi installed
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.9 92/02/19 16:56:43 darren Exp Locker: darren $
a287 10
	; Mark is +MIDI

		bset	#CDGB_MIDI,cdd_TypeLights(a6)
		bne.s	CDGDraw_midibytes

	; The +MIDI bit was not already set, so we need to initialize
	; midi devices.

		BSRSELF	CDGMidiQuiet

d295 3
@


1.9
log
@Initial code for +MIDI packs
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.8 92/02/17 16:19:05 darren Exp Locker: darren $
a296 1
		nop
d300 1
@


1.8
log
@Ack, appears to be getting some junk PACKS during deinterleave,
or who knows - for now, just change back to 15 minumum PACKS
to form at least 1 de-interleaved pack.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.7 92/02/17 12:49:22 darren Exp Locker: darren $
a145 2
	DEBUG_TRAP	9

a159 1
	DEBUG_TRAP	$A
a231 2
	DEBUG_TRAP	$B

d236 2
a237 2
	; check if we have decoded enough PACKETS to form at least 1
	; de-interleaved PACK
d243 10
a252 2
	; also happens to be a 
		lea	cdt_PackData(a1),a4
d255 1
a255 1
		move.b	(a4),d0
d260 1
a260 1
		move.b	cdp_Instruction(a4),d0
d262 1
a262 1
		cmpi.b	#INSTR_EOR_FONT,d0
d274 4
d279 1
d281 3
a283 1
		bne.s	CDGDraw_nextpack
d285 7
a291 1
	; do MIDI output inline for speed
d293 4
d299 1
a299 1
CDGDraw_nextpack:
d301 1
d306 1
a306 1
		move.w	d2,cdd_PackCount(a6)
d308 4
d314 4
@


1.7
log
@Reduce de-interleave counter to minimum (eight!)
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.6 92/02/14 18:00:36 darren Exp Locker: darren $
d244 1
a244 1
		cmpi.w	#8,d2
@


1.6
log
@Change cdtv_CR.. to cdtv_cr
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.5 92/01/31 11:30:27 darren Exp Locker: darren $
d244 1
a244 1
		cmpi.w	#15,d2
@


1.5
log
@Now returns +G/+MIDI flags, and turns on +G/+MIDI lights
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.3 92/01/30 18:24:32 darren Exp Locker: darren $
d16 1
a16 1
		INCLUDE	"cdtv:include/internal/cdtv_CR_hw.i"
@


1.4
log
@Changed docs for CDGDraw().
@
text
@d15 2
d39 11
d287 3
a289 1

@


1.3
log
@Notes about how to Wait() in the task which calls this function.
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.2 92/01/30 16:49:17 darren Exp Locker: darren $
d50 2
a51 2
*	a busy loop from an efficient, relatively high priority
*	task.  Failure to call this function often enough will result
d57 3
a59 3
*	called in a busy loop which does little more than check for
*	a user mouse press indicating abort, or can be aborted at anytime
*	by the caller (see CDGEnd() to exit CD+G).
a60 3
*	The caller must first open the cdg.library, and have called
*	CDGBegin() to start CD+G.
*
d74 5
a78 8
*	function in a pure busy loop.  This requires using the
*	cd.device CDTV_FRAMECALL command to install an interrupt
*	which Signal()'s your task every time a new PACKET is available.
*	However be aware that on a 68000 machine, the amount of
*	available CPU bandwith will be very limited (particularly
*	when error correction is enabled).  If you are willing to
*	accept "jerky" graphics, it is possible to wake up less often
*	(see cd.device's CDTV_FRAMECALL command documentation).
d83 6
a88 1
*	a significant problem.
@


1.2
log
@Make 3 branches long
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.1 92/01/30 16:04:39 darren Exp Locker: darren $
d72 1
a72 1
*	at MIDI baud rates via the Serial port.  The first MIDI
d75 15
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
**	$Id: dispatch.asm,v 1.1 92/1/2 08:00:00 darren Exp $
d126 1
a126 1
		BEQ_S	CDGDraw_Exit
d242 1
a242 1
		BRA_S	CDGDraw_PrimePack
d255 1
a255 1
		BRA_S	CDGDraw_PrimePack
@
