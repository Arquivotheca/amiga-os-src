head     1.26;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.26
date     93.04.15.08.43.33;  author darren;  state Exp;
branches ;
next     1.25;

1.25
date     93.02.03.12.00.39;  author darren;  state Exp;
branches ;
next     1.24;

1.24
date     93.02.03.11.45.05;  author darren;  state Exp;
branches ;
next     1.23;

1.23
date     92.04.02.17.07.20;  author darren;  state Exp;
branches ;
next     1.22;

1.22
date     92.03.09.09.33.36;  author darren;  state Exp;
branches ;
next     1.21;

1.21
date     92.03.06.13.02.52;  author darren;  state Exp;
branches ;
next     1.20;

1.20
date     92.03.06.09.26.06;  author darren;  state Exp;
branches ;
next     1.19;

1.19
date     92.03.05.17.13.55;  author darren;  state Exp;
branches ;
next     1.18;

1.18
date     92.03.05.17.11.26;  author darren;  state Exp;
branches ;
next     1.17;

1.17
date     92.03.05.11.24.03;  author darren;  state Exp;
branches ;
next     1.16;

1.16
date     92.03.04.18.18.28;  author darren;  state Exp;
branches ;
next     1.15;

1.15
date     92.02.26.09.00.31;  author darren;  state Exp;
branches ;
next     1.14;

1.14
date     92.02.24.18.28.19;  author darren;  state Exp;
branches ;
next     1.13;

1.13
date     92.02.24.12.04.20;  author darren;  state Exp;
branches ;
next     1.12;

1.12
date     92.02.19.09.19.14;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     92.02.17.14.49.21;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     92.02.17.14.40.05;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     92.02.17.14.38.17;  author darren;  state Exp;
branches ;
next     1.8;

1.8
date     92.02.14.17.33.45;  author darren;  state Exp;
branches ;
next     1.7;

1.7
date     92.02.14.16.08.43;  author darren;  state Exp;
branches ;
next     1.6;

1.6
date     92.02.14.12.45.16;  author darren;  state Exp;
branches ;
next     1.5;

1.5
date     92.02.14.12.00.55;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     92.02.14.11.29.33;  author darren;  state Exp;
branches ;
next     1.3;

1.3
date     92.01.30.17.56.03;  author darren;  state Exp;
branches ;
next     1.2;

1.2
date     92.01.30.16.23.58;  author darren;  state Exp;
branches ;
next     1.1;

1.1
date     92.01.30.16.04.13;  author darren;  state Exp;
branches ;
next     ;


desc
@Initial check-in of ALPHA cdg.library for CDTV-CR
@


1.26
log
@Remove references to cdg sub-directory
@
text
@**
**	$Id: library.asm,v 1.25 93/02/03 12:00:39 darren Exp Locker: darren $
**
**	CDTV CD+G -- main.asm (start-up code)
**
**	(C) Copyright 1992-1993 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
**	
**

** Includes

		INCLUDE	"cdgbase.i"
		INCLUDE "cdgprefs.i"
		INCLUDE	"debug.i"
		INCLUDE	"cdg_rev.i"
** Imports

		XREF	EndModule	;EndModule.asm
		XREF	CDGDraw		;dispatch.asm
		XREF	CDGUserPack

		XREF	_intena		;amiga.lib
		XREF	_intreq
		XREF	_custom		;amiga.lib
		XREF	_LVOPermit

		XREF	CDGChannel	;modes.asm
		XREF	CDGPause
		XREF	CDGStop
		XREF	CDGPlay
		XREF	CDGNextTrack
		XREF	CDGPrevTrack
		XREF	CDGFastForward
		XREF	CDGRewind
		XREF	CDGClearScreen
		XREF	CDGDiskRemoved

** Exports
		XDEF	cdgname

		SECTION	cdg

** ROMTAG

	IFEQ	ROMBUILD

		moveq	#-1,d0
		rts

	ENDC

** ROM TAG for cdg.library

cdgresident:
		dc.w	RTC_MATCHWORD
		dc.l	cdgresident
		dc.l	EndModule
		dc.b	RTF_COLDSTART!RTF_AUTOINIT
		dc.b	VERSION
		dc.b	NT_LIBRARY
		dc.b	7		;before playerprefs (same as classic)
		dc.l	cdgname
		dc.l	ident
		dc.l	CDInitTable


cdgname:
		CDGNAME

ident:
		VSTRING

timername:
		TIMERNAME

utilname:
		UTILITYNAME

version:
		VERSTAG

		ds.w	0

CDFuncInit:
	; library function init

		dc.w	-1
		dc.w	CDGOpen-CDFuncInit
		dc.w	CDGClose-CDFuncInit
		dc.w	CDGExpunge-CDFuncInit
		dc.w	CDGExtFunc-CDFuncInit
		dc.w	CDGBegin-CDFuncInit
		dc.w	CDGEnd-CDFuncInit
		dc.w	CDGFront-CDFuncInit
		dc.w	CDGBack-CDFuncInit
		dc.w	CDGDraw+(*-CDFuncInit)
		dc.w	CDGChannel+(*-CDFuncInit)
		dc.w	CDGPause+(*-CDFuncInit)
		dc.w	CDGStop+(*-CDFuncInit)
		dc.w	CDGPlay+(*-CDFuncInit)
		dc.w	CDGNextTrack+(*-CDFuncInit)
		dc.w	CDGPrevTrack+(*-CDFuncInit)
		dc.w	CDGFastForward+(*-CDFuncInit)
		dc.w	CDGRewind+(*-CDFuncInit)
		dc.w	CDGClearScreen+(*-CDFuncInit)
		dc.w	CDGDiskRemoved+(*-CDFuncInit)
		dc.w	CDGUserPack+(*-CDFuncInit)
		dc.w	CDGAllocPrefs-CDFuncInit
		dc.w	CDGFreePrefs-CDFuncInit
		dc.w	-1
	
CDStructInit:

	; library struct initialization

		INITLONG	LN_NAME,cdgname
		INITLONG	LIB_IDSTRING,ident
		INITWORD	LIB_REVISION,REVISION
		INITWORD	LIB_VERSION,VERSION
		INITBYTE	LN_TYPE,NT_LIBRARY

		dc.w	0
		ds.w	0

CDInitTable:
		dc.l	CDGBase_SIZEOF
		dc.l	CDFuncInit
		dc.l	CDStructInit
		dc.l	CDGMain

*****i* cdg.library/CDGMain *******************************************
*
*   NAME
*	CDGMain -- Main initialization
*   
*   SYNOPSIS
*	VOID CDGMain( CDGBase )
*	                 d0
*
*	VOID CDGMain( struct CDGBase * );
*
*   FUNCTION
*	Main initialization of small library base.  Most memory is
*	allocated when CD+G is started, and freed when ended.
*
*   RETURNS
*	N/A
*
*   NOTES
*
***********************************************************************

CDGMain:
	PRINTF	DBG_ENTRY,<'CDG--CDGMain($%lx)'>,D0

		move.l	d0,a0
		move.l	a6,cdg_ExecLib(a0)	;cache execbase
		rts
		
******* cdg.library/OpenLibrary ***************************************
*
*   NAME
*	OpenLibrary -- Open the cdg.library
*   
*   SYNOPSIS
*	cdgbase = OpenLibrary(libName, version )
*	D0                    A0       D0
*
*	struct Library *OpenLibrary( STRPTR, ULONG );
*
*   FUNCTION
*	Returns pointer to library base if the library has not been
*	previously opened.  Because of limited hardware resources
*	(e.g., sprites, and CPU bandwidth) only one CD+G display
*	is currently feasable.
*
*	Therefore this OpenLibrary() of "cdg.library" returns a
*	pointer to the library base only if some other task has not
*	already opened it.
*	
*	You must call CDGBegin() with a CDGPrefs structure to actually
*	start CD+G.
*
*   INPUTS
*	libName - pointer to string "cdg.library".
*
*	version - Minimum version number requested should be 38.
*
*   RETURNS
*	Library base pointer, or NULL indicating the library is in use
*	or not available.
*
*   NOTES
*	Prior to V39 of this library, there were no public library
*	functions.  V39 provides many new public functions, and is
*	not compatable with the CDTV version of cdg.library.
*
*   SEE ALSO
*	CDGBegin(), exec.library/OpenLibrary, exec.library/CloseLibrary()
*
***********************************************************************

CDGOpen:
	PRINTF	DBG_ENTRY,<'CDG--CDGOpen($%lx)'>,A6

		moveq	#00,d0

	; only allow 1 opener for now

		tst.w	LIB_OPENCNT(a6)
		bne.s	CDGOpen_Inuse

		addq.w	#1,LIB_OPENCNT(a6)

	; typical case is the branch is NEVER taken

		move.l	a6,d0
CDGOpen_Inuse:
		rts


*****i* cdg.library/CDGClose ******************************************
*
*   NAME
*	CDGClose -- Close library
*   
*   SYNOPSIS
*	result = CDGClose( CDGBase )
*	D0                    A6
*
*	ULONG CDGClose( struct CDGBase * );
*
*   FUNCTION
*	
*	Closes the cdg.library.
*
*   RETURNS
*	Always NULL.
*
*   NOTES
*
***********************************************************************

CDGClose:
	PRINTF	DBG_ENTRY,<'CDG--CDGClose($%lx)'>,A6

		subq.w	#1,LIB_OPENCNT(a6)

		; fall through

*****i* cdg.library/CDGExpunge *****************************************
*
*   NAME
*	CDGExpunge -- Expunge library
*   
*   SYNOPSIS
*	result = CDGExpunge( CDGBase )
*	D0                    A6
*
*	ULONG CDGExpunge( struct CDGBase * );
*
*   FUNCTION
*	"cdg.library" does not really ever expunge.  Only a very small
*	piece of memory is used until CDBegin() is called.
*
*   RETURNS
*	Always NULL.
*
*   NOTES
*
***********************************************************************

CDGExpunge

		; fall through

*****i* cdg.library/CDGExtFunc ****************************************
*
*   NAME
*	CDGExtFunc -- Do nothing function
*   
*   SYNOPSIS
*	result = CDGExtFunc( CDGBase )
*	D0                    A6
*
*	ULONG CDGExtFunc( struct CDGBase * );
*
*   FUNCTION
*	Do nothing - reserved function vector.
*
*   RETURNS
*	Always NULL.
*
*   NOTES
*
***********************************************************************

CDGExtFunc:

		moveq	#00,d0
		rts


******* cdg.library/CDGBegin ******************************************
*
*   NAME
*	CDGBegin -- Start the CD+G display system
*   
*   SYNOPSIS
*	result = CDGBegin( CDGPrefs )
*	D0                    A0
*
*	BOOL CDGBegin( struct CDGPrefs * );
*
*   FUNCTION
*	Starts CD+G with given preferences.  You must call CDGFront()
*	to bring the CD+G screen to front.  CD+G uses graphics.library
*	functions, and is not meant to be used in an Intuition
*	screen environment.
*
*   INPUTS
*	CDGPrefs -- pointer to a CDGPrefs structure.  The structure
*	includes the following information -
*
*		Sprite image data for CD+G Channel selection.
*
*		Sprite image data for CD play, pause, etc.
*
*		Sprite height, and color table.
*
*		Top/Left edge corder of CD+G screen.
*
*		Enable/Disable +G and/or +MIDI PACK processing.
*
*		Enable/Disable error correction of PACKS.
*
*		An optional task pointer, and signal mask to
*		Signal() when a new PACKET is available.
*
*   RETURNS
*	TRUE if CD+G started.  FALSE indicates failure, most likely
*	due to lack of memory, or inability to obtain some other
*	resource (e.g, use of sprites 2-5, unable to open the cd.device,
*	etc.)
*
*   NOTES
*	Once started, the CD+G library will start buffering CD+G PACKETS.
*	These packets will be lost if you do not call CDGDraw() often
*	enough.  The CD+G screen can be made visible by calling
*	CDGFront().
*
*   SEE ALSO
*	CDGFront(), cdgprefs.h, cdgprefs.i
*
***********************************************************************

CDGBegin:

	PRINTF	DBG_ENTRY,<'CDG--CDGBegin($%lx)'>,A0

		movem.l	a4/a5,-(sp)

		move.l	a0,a4		;Pass to _CDGInit()
		move.l	a6,a5

		BSRSELF	_CDGInit

		tst.l	d0
		beq.s	CDGBegin_Fail

		move.l	d0,cdg_BaseData(a6)

	; IMPORTANT -- return a BOOL - not the lower word of a data area!!!
	; BOOL's are SHORTS

		moveq	#01,d0

CDGBegin_Fail:
		movem.l	(sp)+,a4/a5

	PRINTF	DBG_EXIT,<'CDG--$%lx=CDGBegin()'>,D0

		rts

******* cdg.library/CDGEnd ********************************************
*
*   NAME
*	CDGEnd -- End CDG playing
*   
*   SYNOPSIS
*	VOID CDGEnd( VOID )
*
*	VOID CDGEnd( VOID );
*
*   FUNCTION
*	Stops CD+G.  All memory is freed.  Should never be called
*	if CDGBegin() failed.
*
*   RETURNS
*	N/A
*
*   NOTES
*
*   SEE ALSO
*	CDGBegin()
*
***********************************************************************

CDGEnd:

	PRINTF	DBG_ENTRY,<'CDG--CDGEnd()'>

		move.l	a5,-(sp)

	; restore SPRITE DMA

		bsr	CDGBack

		move.l	a6,a5

		BSRSELF	_CDGFree

		clr.l	cdg_BaseData(a6)

		move.l	(sp)+,a5
		rts

******* cdg.library/CDGFront ******************************************
*
*   NAME
*	CDGFront -- Bring CDG screen to front
*   
*   SYNOPSIS
*	VOID CDGFront( VOID )
*
*
*	VOID CDGFront( VOID );
*
*   FUNCTION
*	Brings CD+G screen to front.  Programmer must call CDGBegin()
*	first - failure to do so will result in a crash.
*
*   RETURNS
*	N/A
*
*   NOTES
*	Recommend calling CDGDraw() once before calling this function.
*	This will cause the CD+G display to get up to date before
*	its screen is brought to front.  Do not call this function
*	in a busy loop; not needed.
*
*	See CDGBack() which should be called before bringing your
*	own screen to front.
*
*   SEE ALSO
*	CDGDraw(), CDGBegin(), CDGBack()
*
***********************************************************************

CDGFront:
	PRINTF	DBG_ENTRY,<'CDG--CDGFront()'>
		movem.l	d2/d3/a2/a5/a6,-(sp)
		move.l	cdg_BaseData(a6),a5
		move.l	cdd_GfxLib(a5),a6

	; patch up ViewPort color map so that gfx copinit is set-up
	; properly when we bring this screen to front.

		lea	cdd_ViewPort1(a5),a0
		move.l	cdd_BorderPen(a5),a1
		moveq	#00,d0		;pen #
		move.l	d0,d1
		move.w	(a1),d1
		move.l	d1,d2
		move.l	d1,d3
		lsr.w	#8,d1
		lsr.w	#4,d2
		and.w	#$0f,d1		;red
		and.w	#$0f,d2		;green
		and.w	#$0f,d3		;blue

	PRINTF	DBG_OSCALL,<'CDG--SetRGB4($%lx,$%lx,$%lx,$%lx,$%lx)'>,A0,D0,D1,D2,D3

		JSRLIB	SetRGB4

		lea	cdd_View1(a5),a1

	PRINTF	DBG_OSCALL,<'CDG--LoadView($%lx,$%lx)'>,A1,A6

		JSRLIB	LoadView

		lea	cdd_ViewPort1(a5),a0
		lea	cdd_SimpleSprite2(a5),a1
		move.l	cdd_4SpriteData(a5),a2

	PRINTF	DBG_OSCALL,<'CDG--ChangeSprite($%lx,$%lx,$%lx)'>,A0,A1,A2

		JSRLIB	ChangeSprite

		lea	cdd_ViewPort1(a5),a0
		lea	cdd_SimpleSprite3(a5),a1
		move.l	cdd_SpriteData3(a5),a2

	PRINTF	DBG_OSCALL,<'CDG--ChangeSprite($%lx,$%lx,$%lx)'>,A0,A1,A2

		JSRLIB	ChangeSprite

	; ARGG - SPRITE_ATTACHED is not defined in graphics/sprite.i!!!

	IFND	SPRITE_ATTACHED
SPRITE_ATTACHED	EQU	$80
	ENDC

		ori.b	#SPRITE_ATTACHED,3(a2)

		lea	cdd_ViewPort1(a5),a0
		lea	cdd_SimpleSprite4(a5),a1
		move.l	cdd_SpriteData4(a5),a2

	PRINTF	DBG_OSCALL,<'CDG--ChangeSprite($%lx,$%lx,$%lx)'>,A0,A1,A2

		JSRLIB	ChangeSprite

		lea	cdd_ViewPort1(a5),a0
		lea	cdd_SimpleSprite5(a5),a1
		move.l	cdd_SpriteData5(a5),a2

	PRINTF	DBG_OSCALL,<'CDG--ChangeSprite($%lx,$%lx,$%lx)'>,A0,A1,A2

		JSRLIB	ChangeSprite

		ori.b	#SPRITE_ATTACHED,3(a2)

	; Make sure sprite dma is turned ON!  Save old value too since
	; playerprefs tries to turn it off.

		lea	_custom,a0

		move.w	dmaconr(a0),cdd_CacheDMACONR(a5)
		move.w	#(DMAF_SETCLR!DMAF_SPRITE),dmacon(a0)

	; indicate sprite imagery may be displayed

		bclr	#VBFB_BACKSCREEN,cdd_VBlankFlags(a5)

	; reload colors so copinit is also right

		bset	#VBFB_NEWCOLORS,cdd_VBlankFlags(a5)

		movem.l	(sp)+,d2/d3/a2/a5/a6
		rts

******* cdg.library/CDGBack *******************************************
*
*   NAME
*	CDGBack -- Called before you bring your own screen to front.
*   
*   SYNOPSIS
*	VOID CDGBack( VOID )
*
*
*	VOID CDGBack( VOID );
*
*   FUNCTION
*	Tells CD+G you are going to bring your own screen in front
*	of CD+G's screen.  This tells CD+G that it should not display
*	any sprites, or bring its own screen to front.  The programmer
*	must call CDGBegin() first - failure to do so will result in a
*	crash.
*
*   RETURNS
*	N/A
*
*   NOTES
*
*   SEE ALSO
*	CDGBegin(), CDGFront()
*
***********************************************************************

CDGBack:
	PRINTF	DBG_ENTRY,<'CDG--CDGBack()'>

		movem.l	a5/a6,-(sp)

		move.l	cdg_BaseData(a6),a5

	; Tell VBLANK to remove any active sprite at next VBLANK
	;
	; At next VBLANK the active sprite delay counter will roll
	; from 0->1, causing the VBLANK routine to clear the sprite
	; image (if any).  Works out well since the caller will not
	; be able to load his own view until after he has called
	; this function.

		moveq	#01,d0
		move.l	d0,cdd_StartSprite(a5)

	; indicate sprite imagery should not be displayed

		or.b	#(VBFF_BACKSCREEN!VBFF_RESETDMA),cdd_VBlankFlags(a5)	;atomic!

	; wait for VBLANK before returning, and reset of SPRITE DMA before returning

		move.l	cdd_GfxLib(a5),a6
CDGBack_Spin:
		JSRLIB	WaitTOF
		btst	#VBFB_RESETDMA,cdd_VBlankFlags(a5)
		bne.s	CDGBack_Spin

		movem.l	(sp)+,a5/a6


		rts


******* cdg.library/CDGAllocPrefs *************************************
*
*   NAME
*	CDGAllocPrefs -- Used to allocate a CDGPrefs structure
*   
*   SYNOPSIS
*	cdgprefs = CDGAllocPrefs( VOID )
*	D0
*
*	struct CDGPrefs *CDGAllocPrefs( VOID );
*
*   FUNCTION
*	Used to allocate a CDGPrefs structure.  All fields are initialized
*	to NULL.
*
*	For future compatability, this function should be used to
*	allocate a CDGPrefs structure for use with CDGBegin().
*
*   INPUTS
*	N/A
*
*   RETURNS
*	cdgprefs - pointer to CDGPrefs structure, or NULL if the
*	memory could not be allocated.
*
*   NOTES
*
*   SEE ALSO
*	CDGFreePrefs(), CDGBegin(), cdgprefs.h, cdgprefs.i
*
***********************************************************************

CDGAllocPrefs:

	PRINTF	DBG_ENTRY,<'CDG--CDGAllocPrefs()'>

		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1	;accessed by interrupt
		move.l	#CDGPrefs_SIZEOF,d0

		move.l	a6,-(sp)
		move.l	cdg_ExecLib(a6),a6
		JSRLIB	AllocVec
		move.l	(sp)+,a6
		rts

******* cdg.library/CDGFreePrefs **************************************
*
*   NAME
*	CDGFreePrefs -- Used to free a CDGPrefs structure
*   
*   SYNOPSIS
*	VOID CDGFreePrefs( cdgprefs )
*			      A1
*
*	VOID CDGFreePrefs( struct CDGPrefs * );
*
*   FUNCTION
*	Used to free a CDGPrefs structure allocated with CDGAllocPrefs().
*
*	For future compatability, this function should be used to
*	free a CDGPrefs structure.
*
*   INPUTS
*	cdgprefs - pointer to CDGPrefs structure allocated with
*	CDGAllocPrefs().
*
*   RETURNS
*	N/A
*
*   NOTES
*
*   SEE ALSO
*	CDGAllocPrefs()
*
***********************************************************************

CDGFreePrefs:

	PRINTF	DBG_ENTRY,<'CDG--CDGAFreePrefs($%lx)'>,A1

		move.l	a6,-(sp)
		move.l	cdg_ExecLib(a6),a6
		JSRLIB	FreeVec
		move.l	(sp)+,a6
		rts

		END@


1.25
log
@Modify comments 
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.24 93/02/03 11:45:05 darren Exp Locker: darren $
d6 1
a6 1
**	(C) Copyright 1992 Commodore-Amiga, Inc.
d355 1
a355 1
*	CDGFront(), cdg/cdgprefs.h, cdg/cdgprefs.i
d647 1
a647 1
*	CDGFreePrefs(), CDGBegin(), cdg/cdgprefs.h, cdg/cdgprefs.i
@


1.24
log
@First pass at mods for AA CD Game system
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.23 92/04/02 17:07:20 darren Exp Locker: darren $
d196 3
a198 3
*	Prior to V38 of this library, there were no public library
*	functions.  V38 provides many new public functions, and is
*	not compatable with V37 of cdg.library.
d355 1
a355 1
*	CDGFront(), cdtv/cdgprefs.h, cdtv/cdgprefs.i
d647 1
a647 1
*	CDGFreePrefs(), CDGBegin(), cdtv/cdgprefs.h, cdtv/cdgprefs.i
@


1.23
log
@Change CD_ -> CDSK_
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.22 92/03/09 09:33:36 darren Exp Locker: darren $
a15 1
		INCLUDE	"cdtv_cr_hw.i"
a157 4
	; turn off +G/+MIDI lights

		and.b	#(~(CDTV_G!CDTV_MIDI)),CDTVHARDWARE+VFD_FORMATS

a209 5
	; check for necessary hardware

		cmp.l	#'CDTV',CDTVHARDWARE+CDSK_ID
		bne.s	CDGOpen_Inuse

a425 4

	; turn off +G/+MIDI lights

		and.b	#(~(CDTV_G!CDTV_MIDI)),CDTVHARDWARE+VFD_FORMATS
@


1.22
log
@Use SetRGB4 before LoadView to avoid first screen flashing along
top border (e.g., make sure copinit has right color when our
view is loaded so we match our border color).
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.21 92/03/06 13:02:52 darren Exp Locker: darren $
d217 1
a217 1
		cmp.l	#'CDTV',CDTVHARDWARE+CD_ID
@


1.21
log
@Set flag so SPRITE DMA is turned off during VBLANK, and WaitTOF
at least once until sprite DMA has been restored before returning
to caller.  Caller may now safely LoadView() his/her own view.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.20 92/03/06 09:26:06 darren Exp Locker: darren $
d478 1
a478 1
		movem.l	a2/a5/a6,-(sp)
d481 21
d566 1
a566 1
		movem.l	(sp)+,a2/a5/a6
@


1.20
log
@Force color reload for CDGFront() - causes gfx copinit to be updated
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.19 92/03/05 17:13:55 darren Exp Locker: darren $
d28 1
d579 1
a579 1
		move.l	cdg_BaseData(a6),a1
d581 2
d592 1
a592 1
		move.l	d0,cdd_StartSprite(a1)
d596 11
a606 1
		bset	#VBFB_BACKSCREEN,cdd_VBlankFlags(a1)
a607 11
	; Restore sprite DMA; what it was when CDGFront() was called.
	;
	; Need to do this work during VBLANK to avoid a stuck sprite image
	;
	;	move.w  cdd_CacheDMACONR(a1),d0
	;	and.w	#DMAF_SPRITE,d0
	;	bne.s	CDGB_SpriteDMAON
	; Since I turn on sprite DMA, we only need to turn it OFF
	; if the caller of CDGFront() called me with sprite DMA turned
	; OFF - otherwise its no change.
	;	move.w	#(DMAF_SPRITE),_custom+dmacon
a608 1
CDGB_SpriteDMAON:
d610 1
@


1.19
log
@Make memory allocation PUBLIC since an interrupt access it
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.17 92/03/05 11:24:03 darren Exp Locker: darren $
a527 4
	; indicate sprite imagery may be displayed

		bclr	#VBFB_BACKSCREEN,cdd_VBlankFlags(a5)

d535 8
@


1.18
log
@Provide 2 new functions - one of which allocates a CDGPrefs structure,
and the other frees same
@
text
@d642 1
a642 1
		moveq	#MEMF_CLEAR,d1
@


1.17
log
@Add new function so programmers can submit their own +G, or +MIDI
PACKS
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.16 92/03/04 18:18:28 darren Exp Locker: darren $
d110 2
d604 86
@


1.16
log
@Documentation update
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.15 92/02/26 09:00:31 darren Exp Locker: darren $
d23 1
d109 1
a109 1
		dc.w	CDGTest-CDFuncInit
a438 28
		rts

*****i* cdg.library/CDGTest *******************************************
*
*   NAME
*	CDGTest -- Spare vector - no longer does anything at all.
*   
*   SYNOPSIS
*	VOID CDGTest( packet )
*		        A0
*
*	VOID CDGTest( struct CDGPacket *);
*
*   FUNCTION
*	Meant for test purposes only.  Allows caller to submit test
*	packets, however note that the code must be compiled with
*	conditional SIMULATION debugging turned on for this function
*	to work.
*
*   RETURNS
*	N/A
*
*   NOTES
*
***********************************************************************

CDGTest:

@


1.15
log
@Need to restore sprite DMA (off) during VBLANK to avoid a stuck
sprite (per hardware docs), so I need to rethink this idea.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.14 92/02/24 18:28:19 darren Exp Locker: darren $
d163 1
a163 1
******* cdg.library/_CDGOpen ******************************************
d166 1
a166 1
*	CDGOpen -- Open library
d168 3
a170 3
*   SYNOPSIS
*	cdgbase = CDGOpen( CDGBase )
*	D0                    A6
d172 1
a172 1
*	struct CDGBase *CDGOpen( struct CDGBase * );
d187 5
d193 10
a202 3
*	Library base pointer, or NULL indicating the library is in use.
*
*   NOTES
d360 3
d412 3
d495 3
d590 3
@


1.14
log
@Fix dereference of base data in CDGBack()
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.13 92/02/24 12:04:20 darren Exp $
d593 6
a598 8

CDGB_RestoreSpriteDMA:

		move.w  cdd_CacheDMACONR(a1),d0

		and.w	#DMAF_SPRITE,d0
		bne.s	CDGB_SpriteDMAON

d602 1
a602 2

		move.w	#(DMAF_SPRITE),_custom+dmacon
@


1.13
log
@Add CDGDiskRemoved to library base.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.12 92/02/19 09:19:14 darren Exp $
d575 1
a575 1
		move.l	cdd_CDGBase(a6),a1
@


1.12
log
@Initialize +G/+MIDI lights in library init code so they will be
turned off should they have been left on since last reset.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.11 92/02/17 14:49:21 darren Exp Locker: darren $
d37 1
d107 1
@


1.11
log
@Documentation changes
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.10 92/02/17 14:40:05 darren Exp Locker: darren $
d152 4
@


1.10
log
@Move private CDGTest() vector after CDGClearScreen()
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.9 92/02/17 14:38:17 darren Exp Locker: darren $
d316 1
d318 3
d322 7
a328 2
*		Interlaced display (TRUE or FALSE) - does not affect
*		display resolution.
d333 2
a334 1
*	resource.
@


1.9
log
@Add vector for CDGClearScreen()
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.8 92/02/14 17:33:45 darren Exp Locker: darren $
d105 1
a106 1
		dc.w	CDGClearScreen+(*-CDFuncInit)
@


1.8
log
@Code to enable SPRITE DMA, and also cache previous value so
we can turn it off again CDGBack() time.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.7 92/02/14 16:08:43 darren Exp Locker: darren $
d36 1
d106 1
@


1.7
log
@Change priority - before player prefs
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.6 92/02/14 12:45:16 darren Exp Locker: darren $
d26 1
d387 4
d518 8
d557 1
a557 1
		move.l	cdd_CDGBase(a6),a0
d568 1
d572 16
a587 1
		bset	#VBFB_BACKSCREEN,cdd_VBlankFlags(a0)
d589 1
@


1.6
log
@Change to macro for library name; the original cdg.library has
been removed from the build process.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.5 92/02/14 12:00:55 darren Exp Locker: darren $
d59 1
a59 1
		dc.b	-45		;before strap
@


1.5
log
@Add flags during CDGBack/Front to indicate screen is visible, or
in back
Also turn off +G/+MIDI lights at CDGEnd() time, else they might
stay on forever.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.4 92/02/14 11:29:33 darren Exp Locker: darren $
d66 2
a67 2
**		CDGNAME
		dc.b	'cdg2.library',0
@


1.4
log
@Check for CDTV-CR hardware
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.3 92/01/30 17:56:03 darren Exp Locker: darren $
d392 4
a395 1
CDGEndFail:
d509 4
d543 16
@


1.3
log
@Temporarily name cdg.library as cdg2.library until we can kill
the cdg.library in ROM.
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.2 92/01/30 16:23:58 darren Exp Locker: darren $
d16 1
d189 7
@


1.2
log
@Obtain CDGNAME macro from cdgprefs.i
@
text
@d2 1
a2 1
**	$Id: library.asm,v 1.1 92/01/30 16:04:13 darren Exp Locker: darren $
d65 2
a66 2
		CDGNAME

d75 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
**	$Id: main.asm,v 1.1 92/1/2 08:00:00 darren Exp $
d15 1
@
