head     1.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.11
date     93.04.07.16.51.38;  author peter;  state Exp;
branches ;
next     1.10;

1.10
date     93.04.06.15.19.26;  author peter;  state Exp;
branches ;
next     1.9;

1.9
date     93.03.31.15.06.12;  author peter;  state Exp;
branches ;
next     1.8;

1.8
date     93.03.25.19.36.18;  author peter;  state Exp;
branches ;
next     1.7;

1.7
date     93.03.19.19.02.14;  author peter;  state Exp;
branches ;
next     1.6;

1.6
date     93.03.17.16.48.51;  author peter;  state Exp;
branches ;
next     1.5;

1.5
date     93.03.11.16.54.59;  author peter;  state Exp;
branches ;
next     1.4;

1.4
date     93.03.08.18.25.38;  author peter;  state Exp;
branches ;
next     1.3;

1.3
date     93.02.26.19.05.07;  author peter;  state Exp;
branches ;
next     1.2;

1.2
date     93.02.23.15.43.52;  author peter;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.24.13.41.07;  author jerryh;  state Exp;
branches ;
next     ;


desc
@standard playerprefs library include file.
@


1.11
log
@Removed prototype for ResetPlayList().
@
text
@/* $Id: playerprefs.h,v 1.10 93/04/06 15:19:26 peter Exp Locker: peter $ */

#ifndef EXEC_INTERRUPTS_H
#include <exec/interrupts.h>
#endif

#ifndef EXEC_IO_H
#include <exec/io.h>
#endif

#ifndef DEVICES_TIMER_H
#include <devices/timer.h>
#endif

#ifndef CDTVPREFS_H
#include <cdtv/cdtvprefs.h>
#endif

#include <libraries/lowlevel.h>

#include "ppl:basicio/viewmgr.h"

#define MAX_PREFSLANG   15


/*----------------------------------------------------------------------*/

/* Number of vblanks to flash a button for (Intro, Shuffle, etc.) */

#define FLASHLENGTH	20

/* Number of vblanks after the last time the user moved around inside
 * the track table before it becomes allowed for the player to scroll
 * the track table to keep the currently-playing track in view.
 */
#define NOSCROLLTRACKS_TICKS 300

/*----------------------------------------------------------------------*/

/* - DEFINES FOR THE PLAY LISTS - */

/* NENTRIES must be 100, to match amounts in player.library */
#define NENTRIES        100
#define TOCSIZE         (sizeof (struct CDTOC) * NENTRIES)



/*----------------------------------------------------------------------*/

struct CDTV_SEvent {

    UWORD           Qualifier;
    UWORD           Code;
    };

struct CDTVEvent {

    struct Message      cdtve_Msg;
    struct CDTV_SEvent  cdtve_SEvent;
    };


struct CDTVInputInfo {

    struct Interrupt    Inter;
    struct MsgPort      MsgPort;
    
    LONG                MouseWait;
    UWORD               MouseTDist;
    struct timeval      mousetime;
    UWORD               mousemove;
    UBYTE               mousedir;
    UBYTE               CurrButtonPos;  /* button pos based on input events */
    UWORD               mousequal;
    
    struct IOStdReq     *input_io;
    struct MsgPort      returnport;
        
    WORD                MouseXmove, MouseYmove;
    };

/*----------------------------------------------------------------------*/
/* GADGETS - PLAYER PREFS                                                */
/*----------------------------------------------------------------------*/

    /*----------------------------------*
     * structures for different gadgets *
     *----------------------------------*/

struct GADNumberInfo {

    WORD        xloc,yloc;      /* Number location on the button screen */
    WORD        width,height;   /* Dimensions */
    BYTE        xoffset,yoffset;/* offset from upper left corner */
    UBYTE       nwidth;         /* width between each digit */
    UBYTE       ndigits;        /* number of digits */
    UBYTE       offnum;         /* offnum equals */
    UBYTE       pad;
    UBYTE       onewidth,oneoffset; /* Both of these are used if */
    WORD        oneloc,blankoneloc; /* GNIF_LEADONE is set.      */
    ULONG       flags;
    };


#define GNIF_LEADONE    0x1     /* leading number can only be a one */
#define GNIF_HALF       0x8000  /* also in gstate */
#define GNIF_BLANKZERO  0x2     /* zero blank     */
#define GNIF_BLANKLEAD  0x4     /* blank leading zeros */
#define GNIF_BLANKMAX   0x8     /* blank if >= max */


    /*----------------------------------*
     * structures for different boxes   *
     *----------------------------------*/

struct GADImageLoc {

    UBYTE  map; /* 0 - main, 1 - bbm */
    BYTE  mask; /* 0 - main, 1 - bbm, <0 - no mask */ 
    UWORD  xloc,yloc;
    };

struct GADSTDBox {

    WORD    xoffset,yoffset;
    WORD    width,height;
    struct  GADImageLoc offi,oni;
    };


#define INS_END         0
#define INS_PEN         1
#define INS_MOVE        2
#define INS_DRAW        3
#if 0 /* unused */
	#define INS_ON_REDRAW   4  /* all of these are later implementaions */
#endif

#define INS_OFF_REDRAW  5
#if 0 /* unused */
	#define INS_ONSKIP      6
	#define INS_OFFSKIP     7
#endif

#define INS_MAX         8

/* States for the grid gadgets PLGAD_1 - PLGAD_20 (that make up the track table)
 * GRID_CURRENT denotes the current selection in the grid (has a small
 *	white box around it)
 * GRID_DIMMED denotes that the current track is disabled and should
 *	be dimmed.  This corresponds to entries that are not PLEF_ENABLE
 *	in the PlayList.
 */
#define GRID_CURRENT	0x4000
#define GRID_DIMMED	0x8000

/* States for the disk head (PLGAD_COUNTER).
 * COUNTER_LASERON denotes that the laser should be drawn.
 * COUNTER_FLYING denotes a state where the head is travelling vertically,
 *	as part of the disk insertion/removal animation.
 * COUNTER_TRACKNUM is a mask to extract the track number portion
 */
#define COUNTER_LASERON	0x4000
#define COUNTER_FLYING	0x8000
#define COUNTER_TRACKNUM	0x0FFF


    /*----------------------------------*/


/* NB: Order of gadgets IS significant.  The laser from PLGAD_COUNTER can
 * overwrite the disk from PLGAD_DISK, thus PLGAD_DISK must follow
 * PLGAD_COUNTER.  Also, PLGAD_TTRACK intentionally writes over PLGAD_COUNTER,
 * so it too must follow.
 */
enum PLGads {

    PLGAD_DISK,
    PLGAD_COUNTER,
    PLGAD_TTRACK,

    PLGAD_REV,
    PLGAD_PLAY,
    PLGAD_FF,
    PLGAD_STOP,

    PLGAD_GOCDG,
    PLGAD_TIME,
    PLGAD_INTRO,
    PLGAD_SHUFF,
    PLGAD_REPEAT,

    PLGAD_1,
    PLGAD_2,
    PLGAD_3,
    PLGAD_4,
    PLGAD_5,
    PLGAD_6,
    PLGAD_7,
    PLGAD_8,
    PLGAD_9,
    PLGAD_10,
    PLGAD_11,
    PLGAD_12,
    PLGAD_13,
    PLGAD_14,
    PLGAD_15,
    PLGAD_16,
    PLGAD_17,
    PLGAD_18,
    PLGAD_19,
    PLGAD_20,

    PLGAD_MIN,
    PLGAD_SEC,
    PLGAD_NEG,
    PLGAD_CDG,
    PLGAD_COLON,

    PLGAD_NL
    };


#define MAX_PLGAD    		PLGAD_NL
#define PLGAD_FIRSTBUTTON	PLGAD_REV
#define PLGAD_LASTBUTTON	PLGAD_20

/* Function return values:
 * BoxFunc() returns zero if the highlight was drawn/erased normally.
 * 	It returns non-zero if the highlight was suppressed
 *	(see GDFLAGS_DISABLABLE)
 * RenderFunc() returns non-zero if the gadget just drawn is highlightable.
 */
struct GadDir {

    UBYTE       ID,Flags,KeyTrans,routine;
    UWORD       MaxStates;
    UBYTE       Up,Down,Left,Right;
    UWORD       LeftEdge,TopEdge,RightEdge,BottomEdge;
    int         (*BoxFunc)();
        VOID            *BoxData;
    int         (*RenderFunc)();
    VOID        *RenderData;
    };

/* GDFLAGS_SELECTABLE means we support putting the twinkling cursor-box
 * 	over this gadget.
 * GDFLAGS_DISABLABLE means that we can disable this gadget, therefore
 *	disallowing the twinkling cursor box.  Here's how it works:
 *	state = MaxStates-1 means enabled, fully normal.
 *	state = 0 means disabled, and DoBoxMove() must "pass over"
 *		us instead of stopping with the highlight on us.
 *	state between 0 and MaxStates-1 means we're enabled (as far
 *		as DoBoxMove() knows), but the highlight shouldn't be
 *		drawn because we're in a transitionary rendering.
 * ZZZ: Not all infinite-looping conditions are handled, i.e.
 * You can't make a whole row of gadgets have this feature!
 */
#define GDFLAGS_SELECTABLE      0x80
#define GDFLAGS_DISABLABLE	0x40

#define PLFLAGS_SCROLLUP        0x01
#define PLFLAGS_SCROLLDOWN      0x02
#define PLFLAGS_SCROLLLEFT      0x04
#define PLFLAGS_SCROLLRIGHT     0x08

/*----------------------------------------------------------------------*/

/* The RAWKEY_xxx definitions are the raw key codes of those particular
 * keys of interest.
 */
#define RAWKEY_F1	0x50
#define RAWKEY_F2	0x51
#define RAWKEY_F3	0x52
#define RAWKEY_F4	0x53
#define RAWKEY_F5	0x54
#define RAWKEY_F6	0x55
#define RAWKEY_F7	0x56
#define RAWKEY_F8	0x57
#define RAWKEY_F9	0x58
#define RAWKEY_F10	0x59

#define RAWKEY_ENTER	0x43	/* (Numpad) */
#define RAWKEY_RETURN	0x44
#define RAWKEY_ESC	0x45

#define RAWKEY_ARROWUP	0x4C
#define RAWKEY_ARROWDN	0x4D
#define RAWKEY_ARROWRT	0x4E
#define RAWKEY_ARROWLT	0x4F

/* The actual code makes reference to KEY_xxx, GC0_xxx, and GC1_xxx
 * definitions, where these definitions are named by program function,
 * not by actual physical key or controller button.  Thus, this file
 * defines the mapping of physical key/button to function.
 * KEY_xxx = keyboard control.
 * GC0_xxx = game-controller 0 control
 * GC1_xxx = game-controller 0 control
 */

/* Transport control functions:
 * ..._BACK	 = track backward/seek backward
 * ..._PLAYPAUSE = toggle play/pause
 * ..._FWD	 = track forward/seek forward
 * ..._STOP	 = stop
 */
#define KEY_BACK	RAWKEY_F1
#define GC0_BACK	RAWKEY_PORT0_BUTTON_REVERSE
#define GC1_BACK	RAWKEY_PORT1_BUTTON_REVERSE
#define KEY_PLAYPAUSE	RAWKEY_F2
#define GC0_PLAYPAUSE	RAWKEY_PORT0_BUTTON_PLAY
#define GC1_PLAYPAUSE	RAWKEY_PORT1_BUTTON_PLAY
#define KEY_FWD		RAWKEY_F3
#define GC0_FWD		RAWKEY_PORT0_BUTTON_FORWARD
#define GC1_FWD		RAWKEY_PORT1_BUTTON_FORWARD
#define KEY_STOP	RAWKEY_F4
#define GC0_STOP	RAWKEY_PORT0_BUTTON_BLUE
#define GC1_STOP	RAWKEY_PORT1_BUTTON_BLUE

/* Feature controls:
 * ..._GOCDG	 = Re-enter CD+G display
 * ..._TIMEMODE	 = cycle through time modes
 * ..._INTRO	 = toggle Intro mode
 * ..._SHUFFLE	 = initiate shuffle play
 * ..._REPEAT	 = toggle Repeat mode
 */
#define KEY_GOCDG	RAWKEY_F5
#define KEY_TIMEMODE	RAWKEY_F6
#define KEY_INTRO	RAWKEY_F7
#define KEY_SHUFFLE	RAWKEY_F8
#define GC0_SHUFFLE	RAWKEY_PORT0_BUTTON_GREEN
#define GC1_SHUFFLE	RAWKEY_PORT1_BUTTON_GREEN
#define KEY_REPEAT	RAWKEY_F9
#define GC0_REPEAT	RAWKEY_PORT0_BUTTON_YELLOW
#define GC1_REPEAT	RAWKEY_PORT1_BUTTON_YELLOW

/* Navigation controls:
 * ..._SELECT	 = "click" on current user-interface object
 * ..._UP	 = move up
 * ..._DOWN	 = move down
 * ..._RIGHT	 = move right
 * ..._LEFT	 = move left
 * ..._GBUTTON	 = toggle selected track in track table
 * ..._ADVANCE	 = move to next track in track table
 */
#define KEY_SELECT	RAWKEY_RETURN
#define GC0_SELECT	RAWKEY_PORT0_BUTTON_RED
#define GC1_SELECT	RAWKEY_PORT1_BUTTON_RED

#define KEY_UP		RAWKEY_ARROWUP
#define GC0_UP		RAWKEY_PORT0_JOY_UP
#define GC1_UP		RAWKEY_PORT1_JOY_UP
#define KEY_DOWN	RAWKEY_ARROWDN
#define GC0_DOWN	RAWKEY_PORT0_JOY_DOWN
#define GC1_DOWN	RAWKEY_PORT1_JOY_DOWN
#define KEY_RIGHT	RAWKEY_ARROWRT
#define GC0_RIGHT	RAWKEY_PORT0_JOY_RIGHT
#define GC1_RIGHT	RAWKEY_PORT1_JOY_RIGHT
#define KEY_LEFT	RAWKEY_ARROWLT
#define GC0_LEFT	RAWKEY_PORT0_JOY_LEFT
#define GC1_LEFT	RAWKEY_PORT1_JOY_LEFT

#define KEY_GBUTTON	RAWKEY_F10
#define KEY_ADVANCE	RAWKEY_ENTER


/* Player.library echoes keys to us after we submit keystrokes to it.
 * The only echoes we care about are the reverse and forward keys.
 * We _almost_ can do without the echoes entirely, but player.library
 * won't process (hence echo) a key while another key is held.
 *
 * For the CDGS, we modified player.library to put 0xFF in the high
 * byte of the RAWKEY code, to distinguish these keys from similar
 * numbers that lowlevel.library sends when we use the game-controller
 * input-event generator feature.
 */
#define ECHOKEY_PREVTRAK 0xFF74
#define ECHOKEY_NEXTTRAK 0xFF75



/*---------------------------- PREFERENCES DEFINES ----------------------*/

char * __asm OpenLibs(register __a0 struct LibInfo *l);
void __asm  CloseLibs(register __a0 struct LibInfo *l);


UpDateDisplay(VOID);

UWORD GetBoxKey(struct IBuffer *ib, UWORD event);
void BoxMove( struct IBuffer *ib, UWORD event );


/*--------------------------- Globals -----------------------------*/

extern struct CDTVInputInfo input_data;

extern struct CDTVPrefs         CDTVPrefs;


/*-----------------------------------------------------------------*/
/*-------------------------- STUFF FROM TEST.C --------------------*/


enum TimeModes {

    TIME_TRACK,
    TIME_TRACK_REMAIN,
    TIME_LIST,
    TIME_LIST_REMAIN,
    MAX_TIMEMODE
    };

/*--------------------------- TIME ------------------------*/


struct TimeClock {

    WORD    year, month, day, hour, min;
    };

#define SECS_DAY        (60*60*24)
@


1.10
log
@Added PLGAD_COLON so I can turn the colon in the time display on/off.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.9 93/03/31 15:06:12 peter Exp Locker: peter $ */
a393 1
void ResetPlayList( void );
@


1.9
log
@Reordered the gadget list.  Added PLGAD_GOCDG.  Added a few definitions
for clarity.  Added a flag to allow me to disable a button.  Corrected
the key equivalents.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.8 93/03/25 19:36:18 peter Exp Locker: peter $ */
d218 1
@


1.8
log
@Added NOSCROLLTRACKS_TICKS to count down period where player won't
scroll track table because user was playing in there.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.7 93/03/19 19:02:14 peter Exp Locker: peter $ */
d135 4
a138 1
#define INS_ON_REDRAW   4  /* all of these are later implementaions */
d140 4
a143 2
#define INS_ONSKIP      6
#define INS_OFFSKIP     7
d181 1
a181 1
    PLGAD_STOP,
d185 3
d189 1
a190 1
    PLGAD_INTRO,
d192 1
a192 1
    PLGAD_CDG,
d213 1
d217 2
d223 3
a225 1
#define MAX_PLGAD       PLGAD_NL
d227 6
d245 15
a259 1
#define GDFLAGS_BOXOVER         0x80
d320 2
a322 2
 * ..._CDG	 = Re-enter CD+G display
 * ..._TIMEMODE	 = cycle through time modes
d326 3
a328 3
#define KEY_INTRO	RAWKEY_F5
#define KEY_CDG		RAWKEY_F6
#define KEY_TIMEMODE	RAWKEY_F7
a377 1

@


1.7
log
@Removed some unused defines, and cleaned up the way that keyboard
and controller definitions are laid out.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.6 93/03/17 16:48:51 peter Exp Locker: peter $ */
d31 6
@


1.6
log
@Minor adjustments.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.5 93/03/11 16:54:59 peter Exp Locker: peter $ */
d19 2
a75 11
#define BOXMOVE         0x8000  /* bitflag */

#define CURRBUTTONA             (1<<1)  /* in ButtonPos */
#define CURRBUTTONB             (1<<0)  


#define DIR_UP          0x8004
#define DIR_DOWN        0x8008
#define DIR_LEFT        0x8001
#define DIR_RIGHT       0x8002

d147 2
a148 2
 * HEAD_LASERON denotes that the laser should be drawn.
 * HEAD_FLYING denotes a state where the head is travelling vertically,
d150 1
a150 1
 * HEAD_TRACKNUM is a mask to extract the track number portion
d152 3
a154 3
#define HEAD_LASERON	0x4000
#define HEAD_FLYING	0x8000
#define HEAD_TRACKNUM	0x0FFF
d160 5
d167 1
a168 1
    PLGAD_DISK,
d229 110
a339 41
#define RAWKEY_F1       0x50	/* Keyboard RAWKEY value */
#define RAWKEY_F2       0x51	/* Keyboard RAWKEY value */
#define RAWKEY_F3       0x52	/* Keyboard RAWKEY value */
#define RAWKEY_F4       0x53	/* Keyboard RAWKEY value */
#define RAWKEY_F5       0x54	/* Keyboard RAWKEY value */
#define RAWKEY_F6       0x55	/* Keyboard RAWKEY value */
#define RAWKEY_F7       0x56	/* Keyboard RAWKEY value */
#define RAWKEY_F8       0x57	/* Keyboard RAWKEY value */
#define RAWKEY_F9       0x58	/* Keyboard RAWKEY value */
#define RAWKEY_F10      0x59	/* Keyboard RAWKEY value */

#define RAWKEY_ENTER    0x43	/* Keyboard RAWKEY value */
#define RAWKEY_RETURN   0x44	/* Keyboard RAWKEY value */
#define RAWKEY_ESC      0x45	/* Keyboard RAWKEY value */

#define RAWKEY_ARROWUP  0x4C	/* Keyboard RAWKEY value */
#define RAWKEY_ARROWDN  0x4D	/* Keyboard RAWKEY value */
#define RAWKEY_ARROWRT  0x4E	/* Keyboard RAWKEY value */
#define RAWKEY_ARROWLT  0x4F	/* Keyboard RAWKEY value */

#define RAWKEY_STOP     0x72    /* RAWKEY from CDTV-controller or CDTV-cr panel */
#define RAWKEY_PLAY     0x73    /* RAWKEY from CDTV-controller or CDTV-cr panel */
#define RAWKEY_PREVTRAK 0x74    /* RAWKEY from CDTV-controller or CDTV-cr panel */
#define RAWKEY_NEXTTRAK 0x75    /* RAWKEY from CDTV-controller or CDTV-cr panel */
#define RAWKEY_REW      0x76    /* Unused RAWKEY from CDTV-controller or CDTV-cr panel */
#define RAWKEY_FF       0x77    /* Unused RAWKEY from CDTV-controller or CDTV-cr panel */


/* Here we assign keyboard equivalents, in the order things are on the screen */

#define KEY_BACK        RAWKEY_F1
#define KEY_PLAY        RAWKEY_F2
#define KEY_FWD         RAWKEY_F3
#define KEY_STOP        RAWKEY_F4

#define KEY_INTRO       RAWKEY_F5
#define KEY_CDG         RAWKEY_F6

#define KEY_TIMEMODE    RAWKEY_F7
#define KEY_SHUFFLE     RAWKEY_F8
#define KEY_REPEAT      RAWKEY_F9
a340 1
#define KEY_GBUTTON     RAWKEY_F10
@


1.5
log
@Corrected incorrect prototypes.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.4 93/03/08 18:25:38 peter Exp Locker: peter $ */
d96 1
a96 1
    WORD        width,height;   /* Dimentions */
a230 7

struct Render2S_Info {

    APTR    boxinfo;
    UWORD   x,y,scr;
    };

d291 1
a291 3
PowerTen( UBYTE dig );

void ResetPlayList( int clear );
@


1.4
log
@Added state definitions.  Removed unused definitions.  Added key definitions.
@
text
@d1 1
a1 1
/* $Id: playerprefs.h,v 1.3 93/02/26 19:05:07 peter Exp Locker: peter $ */
d294 2
a295 2
UWORD GetBoxKey(struct DisplayFrame *mf, UWORD event);
void BoxMove( struct DisplayFrame *mf, UWORD event );
@


1.3
log
@Major work.  Intuitionized.  Prototyped.  Improved behavior.  Added comments.
@
text
@d1 1
a1 1
/* $Id: $ */
d34 1
d86 1
a86 1
/* GADETS - PLAYER PREFS                                                */
d108 1
a108 1
#define GNIF_LEADONE        0x1     /* leading number can only be a one */
d145 19
d165 1
d238 2
a239 1
/*---------------------------- PREFERENCES DEFINES ----------------------*/
d241 41
a281 1
enum PEGads {
d283 1
a283 20
    PEGAD_HOUR,
    PEGAD_MIN,
    PEGAD_AM,
    PEGAD_MONTH,
    PEGAD_DAY,
    PEGAD_YEAR,
    PEGAD_SCREEN,
    PEGAD_SCRSAVE,
    PEGAD_LACE,
    PEGAD_LANG,
    PEGAD_CLICK,
    PEGAD_PRPRAM,
    PEGAD_PRPCARD,
    PEGAD_CAUTION,
    PEGAD_NL,
    MAX_PEGAD
    };


#define MAX_PEGAD       PEGAD_NL
a284 1
#define PEGAD_MAXLANGSLOTS      15
d286 1
a286 1
/*--------------------------- Prototypes -------------------------*/
a320 19
enum WaitForTypes {

    WFT_NOTYPE,
    WFT_TRACK,
    WFT_POSITION,
    MAX_WFT
    };

enum NextTypes {

    NLI_START = 0,      /*  Initialize for entry 0.                             */
    NLI_MAKESANE,       /*  Re-confirm valid curlistidx.                        */
    NLI_PREVTRACK,      /*  Move to previous list entry.                        */
    NLI_PREVTRACKEND,   /*  Move to previous entry, end of track.               */
    NLI_NEXTTRACK,      /*  Move to next list entry.                            */
    NLI_TAKEOVER,       /*  takeover form of make sane list                     */
    MAX_NLI
    };

a329 27

/*---------------------------Screen ----------------------*/

#define ADJMIN_X        -31
#define ADJMIN_Y        -11
#define ADJMAX_X        0
#define ADJMAX_Y        12

#define ADJSIZE_X       (ADJMAX_X - ADJMIN_X)
#define ADJSIZE_Y       (ADJMAX_Y - ADJMIN_Y)


struct CardStatus {

    UWORD   CardIn;
    UWORD   WasRemoved;
    UBYTE   CStatus;
    UBYTE   CPad;
    };



#define CLIP    #if 0

#define ENDCLIP #endif


@


1.2
log
@Removed PLGAD_PAUSE and PLGAD_GCLR.  Added PLGAD_NEG.  Changed
prototype for ResetPlayList().  Added FLASHLENGTH.  Removed some
unused defines.
@
text
@d1 1
a2 1

a209 26
struct DisplayFrame {

    /* Only need to worry about these in WorkF and CurrentF */
    struct BMInfo       *bmi;
    struct BitMap       *bm;
    struct View         *view;
    struct ViewPort     *vp;
    struct RastPort     *rp;

    /* Worry About these in MasterF */
    struct GadDir       *GadList;
    struct BitMap       *bbm;
    UWORD               MaxGad;
    UBYTE               D0,D1,D2;
    UBYTE               UpDated; /* Set to 1 if still needs to be displayed */
    ULONG               GState1;

    /* Make the same */
    WORD                BoxNo;      /* Gadget is on box num */

        /* Gadget Info */
    UWORD               *gstate;

    UWORD               *cclist[32];    /* Copper color list */  
    };

d245 1
a245 2
VOID __stdargs ToggleFrame(VOID);
VOID __stdargs EndCDTVScreen(VOID);
a247 4
ULONG __asm GetEvent(register __a1 struct InputData *id);
VOID __asm ClearEvent(register __a1 struct InputData *id);
__regargs StartCDTVScreen(struct GadDir *gl, UBYTE *maindata, UBYTE *buttondata, UBYTE initfade);
VOID __regargs LoadDisplayFrame(register struct CycleIntInfo *ci, register struct DisplayFrame *df);
d252 2
a253 2
UWORD __regargs GetBoxKey(register struct DisplayFrame *mf, UWORD event);
void __regargs BoxMove( register struct DisplayFrame *mf, UWORD event );
d256 1
a256 1
__regargs PowerTen( register UBYTE dig );
a260 2
extern struct DisplayFrame *CurrentF,*WorkF,MasterF;
extern struct CycleIntInfo  intdata;
@


1.1
log
@Initial revision
@
text
@d26 6
a33 1
#define FRAMERATE       75
a36 2
#define PLAYF_DISABLED  (1<<0)
#define PLAYF_BLANK     (1<<1)
a38 1

a156 1
    PLGAD_PAUSE,
a158 1
    PLGAD_GCLR,
d184 1
a209 3
#define PLAYF_DISABLED  (1<<0)
#define PLAYF_BLANK     (1<<1)

d289 1
a289 1
void ResetPlayList( int dogad, int clear );
a301 5

#define FRAMERATE   75

#define PLAYF_DISABLED  (1<<0)
#define PLAYF_BLANK (1<<1)
@
