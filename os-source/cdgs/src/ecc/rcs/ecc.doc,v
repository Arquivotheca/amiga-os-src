head     1.3;
branch   ;
access   ;
symbols  ;
locks    havemose:1.3; strict;
comment  @@;


1.3
date     93.02.10.09.39.51;  author havemose;  state Exp;
branches ;
next     1.2;

1.2
date     93.01.14.16.08.11;  author havemose;  state Exp;
branches ;
next     1.1;

1.1
date     93.01.14.16.00.40;  author havemose;  state Exp;
branches ;
next     ;


desc
@Initial release of ecc documentation
@


1.3
log
@updated doc to reflect caching enhancement
@
text
@/* ================================================================================= */
/*
 * $Id: ecc.doc,v 1.2 93/01/14 16:08:11 havemose Exp Locker: havemose $
 *
 * Decoding of Cross Interleaved Reed Solomon codes as used in CDROM.
 * Created: Dec 1, 1992, Allan Havemose
 * See ecc.doc for technical documentation.
 */
/* ================================================================================= */

Decoding CD-ROM ECC:					A. Havemose
====================
	rev 1.0:	11/9/92		original
	rev 1.1:	12/1/92		added c2ptr comment
	rev 1.2:	1/14/93		more c2ptr comments and misc
					corrections
	rev 1.3:	2/10/93		added caching comment

ECCs on CDROM data are achieved by 2 cross-interleaved Reed Solomon codes.
The codes are called P and Q are defined over GF(256) with the primitive
element x^8 + x^4 + x^3 + x^2 + 1, or  1,0001,1101 as binary number.

The parameters for the codes are:

P: 	(26,24)		Correct 1 byte
==
	     (	1     1     1   ...    1  1)
	Hp = ( 	a^25  a^24    	       a  1)

Q: 	(45,43)		Correct 1 byte
==

	     (	1     1     1   ...    1  1)
	Hq = ( 	a^44  a^43    	       a  1)


Cross-interleaving:
==================

	|   0    1    2    3                      41   42 |
     ---+-------------------------------------------------+---
      0	| 0000 0001 0002 0003			0041 0042 |
      1	| 0043 0044 0045 0046			0084 0085 | Header
      2	| 0086 0087 0088 0089			0127 0128 |   +
      3	|						  | User Data
	|                                                 |
	|						  |
     22	| 0946 0047 0948			0987 0988 |
     23	| 0989 0900 0901			1030 1031 |
     ---+-------------------------------------------------+---
     24	| 1032 1033 1034			1073 1074 | P - parity
     25	| 1075 1076 1077			1116 1117 |
     ---+-------------------------------------------------+---
     26	| 1118 1119 1120		1143 |    NOT     | Q - parity
     27	| 1144 1145 1146                1169 |    USED    |
     ---+------------------------------------+------------+---
	|  0    1    2                   25


P codewords are in the colums, ie:
 	  0     1     2          24    25
	(0000, 0043, 0086, ..., 1032, 1075) is the first codeword

Formula:  row: 0 .. 27

	  index = 43*row + N_p	;n_p = code number

Q codewords are in the diagonals, ie:

	  0     1     2          40    41    42    43    44
	(0000, 0044, 0088, ..., 0642, 0686, 0730, 1118, 1144)   1st codeword
	(0043, 0087, 0131,    , 0685, 0729, 0773, 1119, 1145)   2nd codeword

Formula:
	for row: 0 ... 42:

		index = 44*row + 43*N_q	;	N_q = code number

	row 43:	index = 43*26 + N_q
	row 44: index = 44*26 + N_q



Actual data layout:
==================

To complicate matters each frame actually contains 2 complete data matrices
interleaved as low and high byte in words.

So each of the elements in the matrix above are actually 16 bits !
Decoding deals with that by first handeling the left most byte in the word
followed by the rightmost byte. Since there is no correlation between the
bytes the actual order of the decoding does not matter.

This is done by viewing the matrix as UBYTE M[];

The M[] matrix starts after the sync-mark.


Decoding strategy:
=================


Implementation issues:
=====================

o	GF(256) fits in a UBYTE.
o	all indices fits in a UWORD.


Timing:
=======

Each sector is ~ 2k bytes (actually 2352 bytes). We get at least 150k/sec, ie
must be able to decode 75 sectors per second. With 2 complete decodes per sector
this come out to:

	T_decode < 6.6 ms.

Files:
=====

ecc.c        :	complete implementation of decodng algorithm
main.c       :  test program
ecctab.c     :	tables used in ecc.c
ecc.h        :  ecc.h header file
main_protos.h:  prototypes
ecc_protos.h :  prototypes
makefile     :  makefile
ecc.doc      :  technical documentation
readdat.c    :  read raw sector dumps


Known Issues:
============

1.	Currently does not use c2ptr.	(11/31/92)

	Jan 14: It looks like C2PO's doesn't give any useful
	information for CD-DATA. I have examples that prove
	that there exists correctable cases, where there are
	error positions not identified by C2PO. The current
	implementation therefore doesn't use C2PO's.


2.	Added caching to decoding algorithm to avoid calculating
	syndromes already known to indicate correct data.

@


1.2
log
@updated documentation related to C2PO
@
text
@d3 1
a3 1
 * $Id: ecc.doc,v 1.1 93/01/14 16:00:40 havemose Exp Locker: havemose $
d17 1
d146 2
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * $Id:$
d15 2
a17 1

d96 3
d126 2
a127 2
main_proto.h :  prototypes
ecc_proto.h  :  prototypes
d130 1
d133 2
a134 2
Known Problems:
==============
d137 7
@
