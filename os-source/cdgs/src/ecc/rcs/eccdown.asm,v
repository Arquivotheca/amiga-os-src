head     1.1;
branch   ;
access   ;
symbols  ;
locks    havemose:1.1; strict;
comment  @* @;


1.1
date     93.02.10.10.32.22;  author havemose;  state Exp;
branches ;
next     ;


desc
@assembler version of matrix multiply
@



1.1
log
@Initial revision
@
text
@;
; $Id:$
;
; Downcode key parts of ECC algorithm.
;
; NOTE: this is for SMALL memory model. Currently ecc.c is compiled
; 	with DATA=FAR.


	CSECT	eccdown

	XDEF	_Calc_PSyns,_Calc_QSyns
	XREF	_Exp,_Log
	XREF	KPutStr			; Print string over serial


DEBUG	MACRO
	movem.l	a0-a1/d0-d1,-(a7)
	lea	\1,a0			; debug message
	jsr	KPutStr
	movem.l (a7)+,a0-a1/d0-d1
	ENDM


MOD255	MACRO
	cmpi.w	#255,\1			; Pos >= 255
	blt.s	mod\@@
	subi.w	#255,\1			; Pos -= 255;
  mod\@@:
	ENDM


DP_INDEX	EQU	(2*43)
DQ_INDEX	EQU	(2*44)


; ====================================================================
;
; void	Calc_PSyns( register __a0 UBYTE *Buffer,
;		    register __a1 UBYTE *Syn0,
;		    register __a2 UBYTE *Syn1,
;		    register __d0 WORD	Index
;
;	for( Row = 0; Row <= 25; Row++ )
;	{
;		elem  = Buffer[Index];	// Index = 2* ( 43 * Row + P_NO ); at this point
;		if (elem)
;		{
;		   Syn0 ^= elem;
;		   Pos   = (Exp[elem]+ 25-Row);
;		   if (Pos >= 255 ) Pos -= 255;
;		   Syn1 ^= Log[Pos];
;		}
;		Index += 2*43;
;	}
;
; Register assignments:
;
;	d1 = elem	UBYTE
;	d2 = Pos	WORD	(signed!)
;	d3 = Row	WORD	(signed!)
;	a3 = address of Exp
;	a4 = do not touch. Used by compiler
;	a5 = address of Log
;
;
;
_Calc_PSyns:

	movem.l	d2-d3/a3-a5,-(a7)	; save regs

	lea	_Exp(a4),a3
	lea	_Log(a4),a5
	moveq	#0,d1			;
	move.w	d1,(a1)			; Syn0 = 0;
	move.w	d1,(a2)			; Syn1 = 0;

	moveq	#0,d3			; Row = 0
  prow_loop:

	cmpi.w	#25,d3			; for (Row = 0; Row <= 25; Row++ )
	bgt.s	psyn_done


	moveq	#0,d1			; clear everything in d1
	move.b	0(a0,d0.w),d1		; elem = Buffer[Index]
	beq.b	pelem_zero
	; elem != 0

	eor.b	d1,(a1)			; Syn0 ^= elem
	moveq	#0,d2			; Pos = 0
	move.b	0(a3,d1.w),d2		; Pos = Exp[elem]
	add.w	#25,d2			; Pos += 25
	sub.w	d3,d2			; Pos -= Row

	cmpi.w	#255,d2			; Pos >= 255
	blt.s	ppos_less255
	subi.w	#255,d2			; Pos -= 255;

  ppos_less255:

	MOD255 	d2			; as macro

	move.b  0(a5,d2.w),d1		; d1 is not used more in this loop
	eor.b	d1,(a2)			; Syn1 ^= Log[Pos];

  pelem_zero:				; elem == 0

	addi.w	#(2*43),d0			; Index += 2*43
	addq.w	#1,d3			; Row++
	bra.s	prow_loop		; next row

  psyn_done:

	movem.l  (a7)+,d2-d3/a3-a5	; restore regs
	rts


; ====================================================================
;
; void	Calc_QSyns( register __a0 UBYTE *Buffer,
;		    register __a1 UBYTE *Syn0,
;		    register __a2 UBYTE *Syn1,
;		    register __d0 WORD	Index
;
;
;	for( Column = 0; Column <= 42; Column++ )
;	{
;		if (Index >= (2*1118)) Index -= (2*1118);	// Index %= ( 2 * 1118 );
;		elem = Buffer[Index];
;		if (elem)
;		{
;		   Syn0 ^= elem;
;		   Pos   = (Exp[elem]+ 44-Column);
;		   if (Pos >= 255 ) Pos -= 255;
;		   Syn1 ^= Log[Pos];
;		}
;		Index += 2*44;
;	}
;
; Register assignments:
;
;	d1 = elem	UBYTE
;	d2 = Pos	WORD	(signed!)
;	d3 = Row	WORD	(signed!)
;	a3 = address of Exp
;	a4 = do not touch. Used by compiler
;	a5 = address of Log

_Calc_QSyns:

	movem.l	d2-d3/a3-a5,-(a7)	; save regs

	lea	_Exp(a4),a3
	lea	_Log(a4),a5
	moveq	#0,d1			;
	move.w	d1,(a1)			; Syn0 = 0;
	move.w	d1,(a2)			; Syn1 = 0;

	moveq	#0,d3			; Col = 0
  qrow_loop:

	cmpi.w	#42,d3			; for (Col = 0; Col <= 42; Col++ )
	bgt.s	qsyn_done

	cmpi.w	#(2*1118),d0		; if (Index >= (2*1118)) Index -= (2*1118);
	bcs.s	qindex_less
	subi.w	#(2*1118),d0

  qindex_less:

	moveq	#0,d1			; clear everything in d1
	move.b	0(a0,d0.w),d1		; elem = Buffer[Index]
	beq.b	qelem_zero
	; elem != 0

	eor.b	d1,(a1)			; Syn0 ^= elem
	moveq	#0,d2			; Pos = 0
	move.b	0(a3,d1.w),d2		; Pos = Exp[elem]
	add.w	#44,d2			; Pos += 44
	sub.w	d3,d2			; Pos -= Row

	cmpi.w	#255,d2			; Pos >= 255
	blt.s	qpos_less255
	subi.w	#255,d2			; Pos -= 255;

  qpos_less255:

	move.b  0(a5,d2.w),d1		; d1 is not used more in this loop
	eor.b	d1,(a2)			; Syn1 ^= Log[Pos];

  qelem_zero:				; elem == 0

	addi.w	#(2*44),d0		; Index += 2*44
	addq.w	#1,d3			; Row++
	bra.s	qrow_loop		; next row

  qsyn_done:

	movem.l  (a7)+,d2-d3/a3-a5	; restore regs
	rts




	END@
