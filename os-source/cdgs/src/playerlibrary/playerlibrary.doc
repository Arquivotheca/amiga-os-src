TABLE OF CONTENTS

player.library/GetOptions()
player.library/GetPlayerState()
player.library/ModifyPlayList()
player.library/ObtainPlayList()
player.library/SetOptions()
player.library/SubmitKeyStroke()
player.library/GetOptions()                       player.library/GetOptions()

   NAME
       GetOptions -- Retrieve player mode settings

   SYNOPSIS
       success = GetOptions(Options);
       D0                   A1

       UWORD GetOptions(struct PlayerOptions *);

   FUNCTION
       Retrieves current loop mode, intro mode, time display mode,
       and subcode settings from internal player and stores settings
       in PlayerOptions structure.

   RESULTS
       1 = Operation successfull, 0 = Operation failed (do not own
       library).  PlayerOptions structure is updated.

   NOTES
       struct PlayerOptions {

           BYTE    Loop;           /* 0 = Disable, 1 = Enable */

           BYTE    Intro;          /* 0 = Disable, 1 = Enable */

           BYTE    TimeMode;       /* 0 =  Track Relative     */
                                   /* 1 = -Track Relative     */
                                   /* 2 =  Disk Absolute      */
                                   /* 3 = -Disk Absolute      */

           BYTE    Subcode;        /* 0 = Disable, 1 = Enable */
           };

   SEE ALSO
           SetOptions()

player.library/GetPlayerState()               player.library/GetPlayerState()

   NAME
       GetPlayerState -- Determine current state of player

   SYNOPSIS
       Success = GetPlayerState(State)
       D0                       A1

       UWORD GetPlayerState(struct PlayerState *);

   FUNCTION
       Returns the current state of the internal player.

   RESULTS
       1 = Operation successfull, 0 = Operation failed (do not own
       library).

   NOTES
       struct PlayerState {
       
         BYTE   AudioDisk;  /*  1 = An Audio disk is present        */
                            /*  0 = No disk present                 */
                            /* -1 = Non audio disk is present       */
         UBYTE  Tracks;     /* Number of tracks on audio disk       */
         UBYTE  ListIndex;  /* Current position of player in list   */
                            /*   (values = 1-99 & 0 (not selected)) */
         UBYTE  LastModify; /* Last to modify PlayList              */
                            /* (0 = 68000, 1 = internal player)     */
         UBYTE  PlayMode;   /* PLM_NORMAL, PLM_FFWD, PLM_FREV,      */
                            /*   PLM_SKIPFWD, PLM_SKIPREV           */
         UBYTE  PlayState;  /* PLS_STOPPED, PLS_PLAYING, PLS_PAUSED */
   
         UBYTE  Track;      /* Current value in TRACK field of VFD  */
         UBYTE  Minute;     /* Current value in MINUTE field of VFD */
         UBYTE  Second;     /* Current value in HOUR field of VFD   */
                            /*   (values = 0-99 & 100 (blank))      */
         UBYTE  pad;
         };
   
   SEE ALSO
       ObtainPlayList()


player.library/ModifyPlayList()               player.library/ModifyPlayList()

   NAME
       ModifyPlayList - Notify player when PlayList is being modified

   SYNOPSIS
       Success = ModifyPlayList(TrueFalse)
       D0                       D1

       UWORD ModifyPlayList(UWORD state)

   FUNCTION
       When the 68000 wants to modify the PlayList, this function
       should be called with a TRUE state.  The modification can
       then take place, then this function should be called again
       with a FALSE state.

       Since the internal player can modify the playlist too,
       precautions must be taken so that both the 68000 and the
       internal player don't modify the PlayList at the same time.

       If this function is not called before modifying the PlayList
       bazzar things may happen to the list.

   RESULTS
       1 = Operation successfull, 0 = Operation failed (do not own
       library or player is currently busy with PlayList).

   NOTES
   
   SEE ALSO
       ObtainPlayList()

player.library/ObtainPlayList()               player.library/ObtainPlayList()

   NAME
       ObtainPlayList - Obtain pointer to player's PlayList structure

   SYNOPSIS
       List = ObtainPlayList()
       D0

       struct PlayList *ObtainPlayList(void)

   FUNCTION
       Returns pointer to internal player's PlayList structure.
       The playlist may be modified by the application.  Changes will
       take effect immediately.  Only valid tracks should be stored
       in the list.  When modifying the number of entries in the list,
       special care should be taken.  When adding an entry, the entry
       should be added, then the entry count should be incremented.
       When subtracting an entry, the entry count should be
       decremented, then the entry may be destroyed.  When doing a
       modification of multiple entries, the list should first be
       invalidated by setting the entry count to 0, then modified,
       then the entry count should be set to the number of entries
       in the new list.

   RESULTS
       NULL = Operation failed (do not own library), otherwise
              pointer to PlayList structure.

   NOTES
       struct PlayList {
       
           UBYTE   EntryCount; /* Number of items in list */
           UBYTE   Entry[100]; /* List of Tracks to play  */
           UBYTE   pad;
           };
   
   SEE ALSO
       GetPlayerState()

player.library/SetOptions()                       player.library/SetOptions()

   NAME
       SetOptions -- Set one or more player options

   SYNOPSIS
       success = SetOptions(Options);
       D0                   A1

       UWORD SetOptions(struct PlayerOptions *);

   FUNCTION
       Sets current loop mode, intro mode, time display mode, and/or
       subcode settings of internal player based on PlayerOptions
       structure.

   RESULTS
       1 = Operation successfull, 0 = Operation failed (do not own
       library).

   NOTES
       struct PlayerOptions {

           BYTE    Loop;           /*  0 =  Disable            */
                                   /*  1 =  Enable             */
                                   /* -1 =  Don't modify       */

           BYTE    Intro;          /*  0 =  Disable            */
                                   /*  1 =  Enable             */
                                   /* -1 =  Don't modify       */

           BYTE    TimeMode;       /*  0 =  Track Relative     */
                                   /*  1 = -Track Relative     */
                                   /*  2 =  Disk Absolute      */
                                   /*  3 = -Disk Absolute      */
                                   /* -1 =  Don't modify       */

           BYTE    Subcode;        /*  0 =  Disable            */
                                   /*  1 =  Enable             */
                                   /* -1 =  Don't modify       */
           };

   SEE ALSO
       GetOptions()

player.library/SubmitKeyStroke()             player.library/SubmitKeyStroke()

   NAME
       SubmitKeyStroke - Submit up/down player keystrokes to player

   SYNOPSIS
       success = SubmitKeyStroke(keystroke)
       D0                        D1

       UWORD SubmitKeyStroke(UBYTE)

   FUNCTION
       Emulates a player keystroke on the front panel.

   RESULTS
       1 = Operation successfull, 0 = Operation failed (do not own
       library).

   NOTES
       If a second down keystroke is sent before an up keystroke of
       the previous key, an up keystroke is automatically generated
       for that key.

       When a keystroke is submitted, that keystroke will
       automatically be interpretted by the player and echoed to the
       Amiga (just like when a player key on the front panel is
       pressed.

   SEE ALSO

