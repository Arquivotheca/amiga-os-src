head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.5
date     93.03.08.15.10.43;  author jerryh;  state Exp;
branches ;
next     1.4;

1.4
date     93.02.17.14.41.02;  author jerryh;  state Exp;
branches ;
next     1.3;

1.3
date     93.01.07.10.19.27;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.07.30.11.00.15;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.24.14.10.49;  author jerryh;  state Exp;
branches ;
next     ;


desc
@main code for playerresource.
@


1.5
log
@Removed an unnecessary INCDIR statement.
@
text
@
*************************************************************************
*                                                                       *
*       Copyright (C) 1992, Commodore Amiga Inc.  All rights reserved.  *
*                                                                       *
*************************************************************************


        INCLUDE "exec/types.i"
        INCLUDE "exec/resident.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/initializers.i"
        INCLUDE "exec/ables.i"
        INCLUDE "playerlibrary_rev.i"

        INCLUDE "playerlibrary.i"
        INCLUDE "internal.i"
        INCLUDE "cdtv:include/cdtv/cdtv.i"

        XREF    _Main
        XREF    _LibOpen
        XREF    _LibClose
        XREF    _LibExpunge
        XREF    _GetOptions
        XREF    _SetOptions
        XREF    _GetPlayerState
        XREF    _ModifyPlayList
        XREF    _ObtainPlayList
        XREF    _SubmitKeyStroke
        XREF    __EndCode

        XDEF    _initFunc
        XDEF    _initStruct

        INT_ABLES


        SECTION PlayerLibrary

        moveq.l #-1,d0          ; Not Executable
        rts


ROMTAG:                         ;STRUCTURE RT,0
        dc.w    RTC_MATCHWORD   ; UWORD RT_MATCHWORD
        dc.l    ROMTAG          ; APTR  RT_MATCHTAG
        dc.l    __EndCode       ; APTR  RT_ENDSKIP
        dc.b    RTF_COLDSTART   ; UBYTE RT_FLAGS
        dc.b    VERSION         ; UBYTE RT_VERSION
        dc.b    NT_LIBRARY      ; UBYTE RT_TYPE
        dc.b    0               ; BYTE  RT_PRI
        dc.l    PlayerName      ; APTR  RT_NAME
        dc.l    VERSTRING       ; APTR  RT_IDSTRING
        dc.l    InitModule      ; APTR  RT_INIT
                                ; LABEL RT_SIZE

PlayerName:
                PLAYERLIBRARYNAME

VERSTRING:
                VSTRING
                VERSTAG

VERNUM: EQU     VERSION
REVNUM: EQU     REVISION

        ds.w    0



*------ Functions Offsets -------------------------------------

_initFunc:
        dc.l    _LibOpen
        dc.l    _LibClose
        dc.l    _LibExpunge
        dc.l    Reserved
        dc.l    _GetOptions
        dc.l    _SetOptions
        dc.l    _GetPlayerState
        dc.l    _ModifyPlayList
        dc.l    _ObtainPlayList
        dc.l    _SubmitKeyStroke
        dc.l    -1


*------ Initializaton Table -----------------------------------

_initStruct:
        INITLONG        LIB_IDSTRING,VERSTRING
        INITLONG        LN_NAME,PlayerName
        INITWORD        LIB_VERSION,VERNUM
        INITWORD        LIB_REVISION,REVNUM
        INITBYTE        LN_TYPE,NT_LIBRARY
        INITBYTE        LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED

        DC.L            0



InitModule:
        movem.l d2-d7/a2-a6,-(sp)

        jsr     _Main

        movem.l (sp)+,d2-d7/a2-a6
        rts



Reserved:
        moveq   #0,d0
        rts



        section __MERGED,data

        end
        

@


1.4
log
@changed version filename.
@
text
@a8 2
        INCDIR  "CDTV:include+V37:include+include:"

@


1.3
log
@library.asm was the old 4510 player library.  start.asm is
the startup code for the new game system player library (.c).
@
text
@d16 1
a16 1
        INCLUDE "version.i"
@


1.2
log
@Time fields of PlayerStatus are filled with 100 when
the VFD is displaying the time.
@
text
@d18 1
a18 1
        INCLUDE "playerresource.i"
a19 1
        INCLUDE "/dev/cdtv_cr_hw.i"
d22 11
d34 2
a35 1
        XREF    EndCode
d40 1
a40 1
        SECTION PlayerResource
d49 1
a49 1
        dc.l    EndCode         ; APTR  RT_ENDSKIP
d52 1
a52 1
        dc.b    NT_DEVICE       ; UBYTE RT_TYPE
d56 1
a56 1
        dc.l    InitCode        ; APTR  RT_INIT
a58 2


d60 1
a60 1
                PLAYERRESOURCENAME
d64 1
d72 1
d75 11
a85 9
initFuncCDTV:
        dc.l    OwnPlayer
        dc.l    ReleasePlayer
        dc.l    GetOptions
        dc.l    SetOptions
        dc.l    GetPlayerState
        dc.l    ModifyPlayList
        dc.l    ObtainPlayList
        dc.l    SubmitKeyStroke
d88 1
d91 1
a91 1
initStruct:
d96 1
a96 1
        INITBYTE        LN_TYPE,NT_RESOURCE
a101 89
InitCode:
        movem.l a2/a3/a4/a6,-(sp)

        lea     initFuncCDTV(pc),a0                                     ; Make a library
        lea     initStruct(pc),a1
        suba.l  a2,a2
        move.l  #plr_SIZE,d0
        clr.l   d1
        EXEC    MakeLibrary
        move.l  d0,a1
        tst.l   d0
        beq.s   1$

        clr.w   plr_Owned(a1)                                           ; Initialize resource structure

        EXEC    AddResource                                             ; Add the resource to system
1$:
        move.l  a2,d0
        movem.l (sp)+,a2/a3/a4/a6

        rts


*
******* player.resource/OwnPlayer() ***********************************
*
*   NAME
*       OwnPlayer -- Allocate Player resource
*
*   SYNOPSIS
*       success = OwnPlayer()
*       D0
*
*       UWORD OwnPlayer(void);
*
*   FUNCTION
*       Allocate the CDTV internal player.  This device is concurrently
*       shared with the front panel.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (resource
*       already allocated).
*
*   NOTES
*
*   SEE ALSO
*       ReleasePlayer()
*
***********************************************************************

OwnPlayer
        DISABLE a0                                      ; Is the player already owned?
        tst.w   plr_Owned(a6)
        bne     OwnError

        move.w  #1,plr_Owned(a6)                        ; Own the player
        ENABLE  a0
        moveq.l #1,d0
        rts

OwnError
        ENABLE  a0                                      ; Return error
        clr.l   d0
        rts

*
******* player.resource/ReleasePlayer() *******************************
*
*   NAME
*       ReleasePlayer -- Release Player resource
*
*   SYNOPSIS
*       ReleasePlayer()
*
*       void ReleasePlayer(void);
*
*   FUNCTION
*       Releases the CDTV internal player from Amiga control.
*
*   RESULTS
*
*   NOTES
*
*   SEE ALSO
*       OwnPlayer()
*
***********************************************************************

ReleasePlayer
d103 2
a104 58
        clr.w   plr_Owned(a6)                           ; Release the player (no checking to see if owned)
        rts

*
******* player.resource/GetOptions() **********************************
*
*   NAME
*       GetOptions -- Retrieve player mode settings
*
*   SYNOPSIS
*       success = GetOptions(Options);
*       D0                   A1
*
*       UWORD GetOptions(struct PlayerOptions *);
*
*   FUNCTION
*       Retrieves current loop mode, intro mode, time display mode,
*       and subcode settings from internal player and stores settings
*       in PlayerOptions structure.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (do not own
*       resource).  PlayerOptions structure is updated.
*
*   NOTES
*       struct PlayerOptions {
*
*           BYTE    Loop;           /* 0 = Disable, 1 = Enable */
*
*           BYTE    Intro;          /* 0 = Disable, 1 = Enable */
*
*           BYTE    TimeMode;       /* 0 =  Track Relative     */
*                                   /* 1 = -Track Relative     */
*                                   /* 2 =  Disk Absolute      */
*                                   /* 3 = -Disk Absolute      */
*
*           BYTE    Subcode;        /* 0 = Disable, 1 = Enable */
*           };
*
*   SEE ALSO
*           SetOptions()
*
***********************************************************************

GetOptions
        tst.w   plr_Owned(a6)                                           ; Player owned?
        beq     1$

        move.b  CDTVHARDWARE+PL_LOOPMODE,plo_Loop(a1)                   ; Get options
        move.b  CDTVHARDWARE+PL_INTROMODE,plo_Intro(a1)
        move.b  CDTVHARDWARE+PL_TIMEMODE,plo_TimeMode(a1)
        move.b  CDTVHARDWARE+CDSK_SUBCODEDATA,plo_Subcode(a1)

        clr.l   d0                                                      ; Return options
        rts
1$
        moveq.w #1,d0                                                   ; Return error
        rts
d106 1
d108 1
a108 72
*
******* player.resource/SetOptions() **********************************
*
*   NAME
*       SetOptions -- Set one or more player options
*
*   SYNOPSIS
*       success = SetOptions(Options);
*       D0                   A1
*
*       UWORD SetOptions(struct PlayerOptions *);
*
*   FUNCTION
*       Sets current loop mode, intro mode, time display mode, and/or
*       subcode settings of internal player based on PlayerOptions
*       structure.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (do not own
*       resource).
*
*   NOTES
*       struct PlayerOptions {
*
*           BYTE    Loop;           /*  0 =  Disable            */
*                                   /*  1 =  Enable             */
*                                   /* -1 =  Don't modify       */
*
*           BYTE    Intro;          /*  0 =  Disable            */
*                                   /*  1 =  Enable             */
*                                   /* -1 =  Don't modify       */
*
*           BYTE    TimeMode;       /*  0 =  Track Relative     */
*                                   /*  1 = -Track Relative     */
*                                   /*  2 =  Disk Absolute      */
*                                   /*  3 = -Disk Absolute      */
*                                   /* -1 =  Don't modify       */
*
*           BYTE    Subcode;        /*  0 =  Disable            */
*                                   /*  1 =  Enable             */
*                                   /* -1 =  Don't modify       */
*           };
*
*   SEE ALSO
*       GetOptions()
*
***********************************************************************

SetOptions
        tst.w   plr_Owned(a6)                                           ; Player owned?
        beq     9$

        cmp.b   #-1,plo_Loop(a1)                                        ; Set loop mode?
        beq     1$
        move.b  plo_Loop(a1),CDTVHARDWARE+PL_LOOPMODE
1$
        cmp.b   #-1,plo_Intro(a1)                                       ; Set intro mode?
        beq     2$
        move.b  plo_Intro(a1),CDTVHARDWARE+PL_INTROMODE
2$
        cmp.b   #-1,plo_TimeMode(a1)                                    ; Set time mode?
        beq     3$
        move.b  plo_TimeMode(a1),CDTVHARDWARE+PL_TIMEMODE
3$
        cmp.b   #-1,plo_Subcode(a1)                                     ; Alter subcode setting?
        beq     4$
        move.b  plo_Subcode(a1),CDTVHARDWARE+CDSK_SUBCODEDATA
4$
        clr.l   d0                                                      ; Return success
        rts
9$
        moveq.w #1,d0                                                   ; Return error
a110 62
*
******* player.resource/GetPlayerState() ******************************
*
*   NAME
*       GetPlayerState -- Determine current state of player
*
*   SYNOPSIS
*       Success = GetPlayerState(State)
*       D0                       A1
*
*       UWORD GetPlayerState(struct PlayerState *);
*
*   FUNCTION
*       Returns the current state of the internal player.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (do not own
*       resource).
*
*   NOTES
*       struct PlayerState {
*       
*         UBYTE  AudioDisk;  /* An Audio disk is present             */
*         UBYTE  ListIndex;  /* Current position of player in list   */
*                            /*   (values = 1-99 & 0 (not selected)) */
*         UBYTE  LastModify; /* Last to modify PlayList              */
*                            /* (0 = 68000, 1 = internal player)     */
*         UBYTE  PlayMode;   /* PLM_NORMAL, PLM_FFWD, PLM_FREV,      */
*                            /*   PLM_SKIPFWD, PLM_SKIPREV           */
*         UBYTE  PlayState;  /* PLS_STOPPED, PLS_PLAYING, PLS_PAUSED */
*   
*         UBYTE  Track;      /* Current value in TRACK field of VFD  */
*         UBYTE  Minute;     /* Current value in MINUTE field of VFD */
*         UBYTE  Second;     /* Current value in HOUR field of VFD   */
*                            /*   (values = 0-99 & 100 (blank))      */
*         UBYTE  pad;
*         };
*   
*   SEE ALSO
*       ObtainPlayList()
*
*
***********************************************************************

GetPlayerState
        tst.w   plr_Owned(a6)                                           ; Player owned?
        beq     9$

        clr.b   pls_AudioDisk(a1)                                       ; Is there an audio disk in the drive?
        btst.b  #CDPSB_VALIDTOC,CDTVHARDWARE+CDSK_PROCSTATUS
        beq     1$
        move.b  CDTVHARDWARE+CDSK_TOC+5+TOC_CTL,d0
        btst    #6,d0
        bne     1$
        move.b  #1,pls_AudioDisk(a1)
1$
        move.b  CDTVHARDWARE+PL_LISTINDEX,pls_ListIndex(a1)             ; Retrieve ListIndex, LastModify, PlayMode, and PlayState
        move.b  CDTVHARDWARE+PL_LASTMODIFY,pls_LastModify(a1)
        move.b  CDTVHARDWARE+PL_SKIPMODE,pls_PlayMode(a1)
        move.b  CDTVHARDWARE+PL_PLAYSTATE,pls_PlayState(a1)

        move.b  CDTVHARDWARE+VFD_TRACK,pls_Track(a1)                    ; Retrieve Track information
a111 13
        move.b  CDTVHARDWARE+VFD_TIMEMODE,d1                            ; Are we custom mode? If not, time information invalid
        and.b   #%11111111-TMM_MODES,d1
        cmp.b   #TMM_TIME,d1
        beq     2$
        
        move.b  CDTVHARDWARE+VFD_HOUR,pls_Minute(a1)                    ; Retrieve Time information
        move.b  CDTVHARDWARE+VFD_MINUTE,pls_Second(a1)
        bra     3$
2$
        move.b  #100,pls_Minute(a1)                                     ; Time information invalid
        move.b  #100,pls_Second(a1)
3$
        clr.b   pls_pad(a1)                                             ; Clear pad byte
d113 2
a114 1
        clr.l   d0                                                      ; Return options
a115 3
9$
        moveq.w #1,d0                                                   ; Return error
        rts
a116 46
*
******* player.resource/ObtainPlayList() ******************************
*
*   NAME
*       ObtainPlayList - Obtain pointer to player's PlayList structure
*
*   SYNOPSIS
*       List = ObtainPlayList()
*       D0
*
*       struct PlayList *ObtainPlayList(void)
*
*   FUNCTION
*       Returns pointer to internal player's PlayList structure.
*       The playlist may be modified by the application.  Changes will
*       take effect immediately.  Only valid tracks should be stored
*       in the list.  When modifying the number of entries in the list,
*       special care should be taken.  When adding an entry, the entry
*       should be added, then the entry count should be incremented.
*       When subtracting an entry, the entry count should be
*       decremented, then the entry may be destroyed.  When doing a
*       modification of multiple entries, the list should first be
*       invalidated by setting the entry count to 0, then modified,
*       then the entry count should be set to the number of entries
*       in the new list.
*
*   RESULTS
*       NULL = Operation failed (do not own resource), otherwise
*              pointer to PlayList structure.
*
*   NOTES
*       struct PlayList {
*       
*           UBYTE   EntryCount; /* Number of items in list */
*           UBYTE   Entry[100]; /* List of Tracks to play  */
*           UBYTE   pad;
*           };
*   
*   SEE ALSO
*       GetPlayerState()
*
***********************************************************************

ObtainPlayList
        tst.w   plr_Owned(a6)                           ; Player owned?
        beq     1$
a117 5
        move.l  #CDTVHARDWARE+PL_LISTCOUNT,d0           ; Return pointer to PlayList
        rts
1$
        clr.l   d0                                      ; Return NULL pointer
        rts
d119 1
a119 35
*
******* player.resource/ModifyPlayList() ******************************
*
*   NAME
*       ModifyPlayList - Notify player when PlayList is being modified
*
*   SYNOPSIS
*       Success = ModifyPlayList(TrueFalse)
*       D0                       D1
*
*       UWORD ModifyPlayList(int state)
*
*   FUNCTION
*       When the 68000 wants to modify the PlayList, this function
*       should be called with a TRUE state.  The modification can
*       then take place, then this function should be called again
*       with a FALSE state.
*
*       Since the internal player can modify the playlist too,
*       precautions must be taken so that both the 68000 and the
*       internal player don't modify the PlayList at the same time.
*
*       If this function is not called before modifying the PlayList
*       bizzar things may happen to the list.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (do not own
*       resource or player is currently busy with PlayList).
*
*   NOTES
*   
*   SEE ALSO
*       ObtainPlayList()
*
***********************************************************************
d121 1
a121 3
ModifyPlayList
        tst.w   plr_Owned(a6)                           ; Player owned?
        beq     MPL_NotOwned
a122 76
        DISABLE a0                                      ; Allocate or deallocate the playlist?
        tst.b   d1
        beq     MPL_Deallocate

        move.b  #1,CDTVHARDWARE+PL_68000BUSY            ; Try to allocate the playlist

        tst.b   CDTVHARDWARE+PL_PLAYERBUSY              ; Were we successful?
        bne     MPL_Deallocate

        clr.b   CDTVHARDWARE+PL_LASTMODIFY              ; We were the last one to modify the PlayList

        ENABLE  a0                                      ; Allocation successful
        moveq.w #1,d0
        rts

MPL_Deallocate
        clr.b   CDTVHARDWARE+PL_68000BUSY               ; Deallocate the playlist
        ENABLE  a0

MPL_NotOwned
        clr.l   d0                                      ; Return NULL pointer
        rts

*
******* player.resource/SubmitKeyStroke() *****************************
*
*   NAME
*       SubmitKeyStroke - Submit up/down player keystrokes to player
*
*   SYNOPSIS
*       success = SubmitKeyStroke(keystroke)
*       D0                        D1
*
*       UWORD SubmitKeyStroke(UBYTE)
*
*   FUNCTION
*       Emulates a player keystroke on the front panel.
*
*   RESULTS
*       1 = Operation successfull, 0 = Operation failed (do not own
*       resource).
*
*   NOTES
*       If a second down keystroke is sent before an up keystroke of
*       the previous key, an up keystroke is automatically generated
*       for that key.
*
*       When a keystroke is submitted, that keystroke will
*       automatically be interpretted by the player and echoed to the
*       Amiga (just like when a player key on the front panel is
*       pressed.
*
*   SEE ALSO
*
***********************************************************************

SubmitKeyStroke
        tst.w   plr_Owned(a6)                           ; Player owned?
        bne     1$
        moveq.w #1,d0                                   ; - Return error
        rts
1$
        tst.b   CDTVHARDWARE+PL_SUBMITKEY               ; Last keystroke submittion complete?
        beq     3$

        move.l  #100,d0                                 ; Try again in a few micros
2$      dbf     d0,2$
        bra     SubmitKeyStroke
3$
        DISABLE a1                                      ; Submit keystroke
        move.b  d1,CDTVHARDWARE+PL_KEYSTROKE
        move.b  #1,CDTVHARDWARE+PL_SUBMITKEY
        ENABLE  a1

        clr.l   d0                                      ; Return
        rts
@


1.1
log
@Initial revision
@
text
@d373 8
a380 2
        move.b  CDTVHARDWARE+VFD_TRACK,pls_Track(a1)                    ; Retrieve VFD information
        move.b  CDTVHARDWARE+VFD_HOUR,pls_Minute(a1)
d382 5
a386 1

@
