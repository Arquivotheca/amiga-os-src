head     1.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @# @;


1.7
date     93.10.20.13.36.26;  author darren;  state Exp;
branches ;
next     1.6;

1.6
date     93.10.19.15.40.11;  author darren;  state Exp;
branches ;
next     1.5;

1.5
date     93.10.19.10.18.27;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     93.10.19.10.17.06;  author darren;  state Exp;
branches ;
next     1.3;

1.3
date     93.10.13.11.31.31;  author darren;  state Exp;
branches ;
next     1.2;

1.2
date     93.10.06.14.32.49;  author darren;  state Exp;
branches ;
next     1.1;

1.1
date     93.10.06.13.43.48;  author darren;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@*** empty log message ***
@
text
@###############################################################################
#
# lmkfile for MPEG autoconfig initialization ROM
#
###############################################################################

#
# Server directory for the data...
#
VERSION= 40
REMOTE = CDGS:src/mpegroms

#
# Name of the module
#
MODNAME	= mpegrom

#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip

#
# Compiler, assembler, and linker
#
AS = hx68 -a
LN = blink

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -cqsy -i V$(VERSION):include -o

#
# Default rules...
#
.asm.o:
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Linker flags
#
LFLAGS		= SMALLCODE SMALLDATA
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= V$(VERSION):lib/amiga.lib

#
# My headers...
#
MY_HDR	=	autoconfig.i


#
# My Assebly source...
#
MY_A	=	autoconfig.asm


#
# My object files...
#
MY_OBJS	=	autoconfig.o


#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=


ALL:	$(LD_STRIP)

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the various versions
#
$(LD_FILE):	$(MY_OBJS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

#
# Depend...
#
residenttag.o: residenttag.asm $(MY_HDR) $(MODNAME)_rev.i
autoconfig.o:	autoconfig.asm		$(MY_HDR)

#
# Bump the version...
#
version:
	@@bumprev $(VERSION) $(MODNAME)_rev

$(MODNAME)_rev.i:
	@@bumprev $(VERSION) $(MODNAME)_rev

$(MODNAME)_rev.h:
	@@bumprev $(VERSION) $(MODNAME)_rev

#
# Release just the headers
#
headers:	$(PUBLIC_HDR)
	copy $(PUBLIC_HDR) V$(VERSION):include/devices NOPRO

#
# Release the current build to the server
#
internal:
	@@delete $(REMOTE)/((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@@copy ((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile) $(REMOTE)
	@@copy ROM README $(REMOTE)

#
# Blow away all files that would need to be rebuilt
#
clean:
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?)

#
# Make a complete new release
#
release:
	lmk clean
	lmk version
	lmk $(LD_FILE)
	lmk $(LD_STRIP)
	lmk buildrom

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@@protect \#? rwed QUIET
	@@copy $(REMOTE)/\#? ""
	@@protect \#? +r QUIET
	@@protect \#?_rev\#? rwd QUIET
	@@Echo "Local is updated..."

#
# The following rule builds the MPEG ROM in T:
#
buildrom:
	assign HERE: ""
	DoBuild BUILDLIST ROM VERSION 40 REVISION 1 DIR "" AUTOREV mpegrom_rev.rev TO T:MPEG RELOC 00200000 NOCHECKSUM
@


1.6
log
@make build in T:
@
text
@d133 1
a133 1
	@@copy ROM $(REMOTE)
a139 2
	@@delete T:MPEG/\#?
	@@delete T:MPEG
d165 1
a165 1
# The following rule builds the MPEG ROM in current directory
@


1.5
log
@*** empty log message ***
@
text
@d171 1
a171 2
	makedir T:MPEG
	DoBuild BUILDLIST ROM VERSION 40 REVISION 1 DIR "" AUTOREV mpegrom_rev.rev TO T:MPEG/MPEG RELOC 00200000 NOCHECKSUM
@


1.4
log
@mods to ROM buld procedure
@
text
@d140 2
@


1.3
log
@Use new DoBuild with NOCHECKSUM option to build an image which does
not write kickstart specific data to the ROM image
@
text
@d11 1
a11 1
REMOTE = hog:Other/mpegroms
d133 1
d142 1
a142 1
# Make a complete new release (This still is in testing...)
d149 1
d169 2
a170 1
	DoBuild BUILDLIST mpegrombuild VERSION 40 REVISION 1 DIR "" RELOC 00200000 NOCHECKSUM
@


1.2
log
@make mpeg rom build
@
text
@d167 1
a167 1
	DoBuild BUILDLIST mpegrombuild VERSION 40 REVISION 1 DIR "" RELOC 00200000
@


1.1
log
@Initial revision
@
text
@d161 7
@
