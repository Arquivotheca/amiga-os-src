head     1.2;
branch   ;
access   ;
symbols  ;
locks    peter:1.2; strict;
comment  @@;


1.2
date     93.02.23.15.43.44;  author peter;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.24.13.36.54;  author jerryh;  state Exp;
branches ;
next     ;


desc
@code shared by different modules of playerprefs.
@


1.2
log
@Tried to add hysteresis to mouse.
@
text
@
; :ts=8 
*
*       misc.a -- Misc ML routines
*
*       William A. Ware                 AB21
*
*************************************************************************
*   This information is CONFIDENTIAL and PROPRIETARY                    *
*   Copyright (C) 1990, Silent Software Incorporated.                   *
*   All Rights Reserved.                                                *
*************************************************************************
                
                include "exec/types.i"
                include "exec/memory.i" 
                include "exec/io.i"
                include "exec/nodes.i"
                include "exec/ports.i"
                include "devices/timer.i"
                include "devices/input.i"
                include "devices/inputevent.i"
                include 'graphics/view.i'
                
                include "cdtv/debox.i"
                include "internal/deboxfunc.i"

                include "playerprefs.i"


FRAMERATE       EQU     75
                
                SECTION "input",code
                
;---------------------------------------------------------------------
        xdef    _ClearEvent

        xref    _LVOAllocMem
        xref    _LVOFreeMem
        xref    _LVOGetMsg
        xref    _LVOPutMsg
        xref    _LVOReplyMsg
        
_ClearEvent:    ; a1 - inputdata
                move.l  a2,-(sp)
                clr.b   IPD_CurrButtonPos(a1)
                movea.l a1,a2
                
2$              movea.l a2,a1
                jsr     _GetEvent(pc)
                tst.l   d0
                bne.s   2$
                movea.l (sp)+,a2
                rts


;---------------------------------------------------------------------
        xdef    _GetEvent

_GetEvent:      ; a1 - inputdata
                movem.l d2/a2/a6,-(sp)
                movea.l (4).w,a6
                movea.l a1,a2
                lea     IPD_MsgPort(a2),a0
                jsr     _LVOGetMsg(a6)
                tst.l   d0
                beq.s   1$
                movea.l d0,a1
                move.l  cdtve_Qualifier(a1),d2
                jsr     _LVOReplyMsg(a6)
                move.l  d2,d0
                ; check for buttons 
                swap    d2
                tst.w   d2
                bne.s   1$
                swap    d2      ; swap back

                cmpi.w  #IECODE_LBUTTON,d2
                bne     2$
                bset.b  #IPDB_CURRBUTTONA,IPD_CurrButtonPos(a2)

2$              cmpi.w  #IECODE_LBUTTON+IECODE_UP_PREFIX,d2
                bne     3$
                bclr.b  #IPDB_CURRBUTTONA,IPD_CurrButtonPos(a2)

3$              cmpi.w  #IECODE_RBUTTON,d2
                bne     4$
                bset.b  #IPDB_CURRBUTTONB,IPD_CurrButtonPos(a2)

4$              cmpi.w  #IECODE_RBUTTON+IECODE_UP_PREFIX,d2
                bne     1$
                bclr.b  #IPDB_CURRBUTTONB,IPD_CurrButtonPos(a2)

1$

                movem.l (sp)+,d2/a2/a6
                rts
                

                section reboot,CODE

                xref    _LVOSupervisor
                xdef    _REBOOT
                xdef    @@REBOOT
_REBOOT:
@@REBOOT:
                move.l  4,a6                    ; Get a pointer to ExecBase
                lea     MagicResetCode(pc),a5   ; Location of code to run
                jsr     _LVOSupervisor(a6)      ; RUN code in supervisor mode

;---------- MagicResetCode ------ DO NOT CHANGE ------------------

                CNOP    0,4     ; IMPORTANT!  Longword align Do not change

MagicResetCode:
                lea.l   2,a0    ; Point to JMP instruction at start of ROM
                RESET           ; all RAM goes away now
                jmp     (a0)    ; rely on prefetch to execute this




*****i* playerprefs/addMSF ******************************************
*
*   NAME
*       addMSF -- Add two MSF numbers to yield an MSF result.
*
*   SYNOPSIS
*       sum = addMSF (this, that);
*       D0             D0    D1
*
*       LONG    sum, this, that;
*
*   FUNCTION
*       Add two raw MSF numbers to yield an MSF result.  The sum is computed
*       according to the expression   sum = this + that.
*
*   INPUTS
*       this    - Raw MSF value
*       that    - Raw MSF value
*
*   RESULT
*       sum     - Raw MSF result of this+that
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*
*****************************************************************************

                xdef    _addMSF

_addMSF         movem.l d0/d1,-(sp)
                lea     4+3(sp),a1
                lea     3(sp),a0
* Frames
*
                moveq   #FRAMERATE,d1
                move.b  (a1),d0
                subq.w  #1,a1
                add.b   d0,(a0)         ; *this += *that;
                cmp.b   (a0),d1         ; if ( >= FRAMERATE)
                bhi.s   1$
                sub.b   d1,(a0)         ;       *this -= FRAMERATE;
                addq.b  #1,(a1)         ;       (*that)++;
1$              subq.w  #1,a0           ; this--;

* Seconds
*
                moveq   #60,d1
                move.b  (a1),d0
                subq.w  #1,a1
                add.b   d0,(a0)         ; *this += *that;
                cmp.b   (a0),d1         ; if ( >= 60)
                bhi.s   2$
                sub.b   d1,(a0)         ;       *this -= 60;
                addq.b  #1,(a1)         ;       (*that)++;
2$              subq.w  #1,a0           ; this--;

* Minutes
*
                move.b  (a1),d0
                add.b   d0,(a0)         ; *this += *that;

                movem.l (sp)+,d0/d1
                rts

*****i* playerprefs/subMSF ******************************************
*
*   NAME
*       subMSF -- Subtract two MSF numbers to yield an MSF result.
*
*   SYNOPSIS
*       diff = subMSF (this, that);
*        D0             D0    D1
*
*       LONG    diff, this, that;
*
*   FUNCTION
*       Subtract two raw MSF numbers to yield an MSF result.  The sum is
*       computed according to the expression   sum = this - that.
*
*   INPUTS
*       this    - Raw MSF value
*       that    - Raw MSF value
*
*   RESULT
*       diff    - Raw MSF result of this-that.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*
*****************************************************************************

                xdef    _subMSF

_subMSF         movem.l d0/d1,-(sp)
                lea     4+3(sp),a1
                lea     3(sp),a0
* Frames
*
                moveq   #FRAMERATE,d1
                move.b  (a1),d0
                subq.w  #1,a1           ; that--;
                sub.b   d0,(a0)         ; *this -= *that;
                bge.s   1$              ; if ( < 0)
                add.b   d1,(a0)         ;       *this += FRAMERATE;
                addq.b  #1,(a1)         ;       (*that)++;
1$              subq.w  #1,a0           ; this--;

* Seconds
*
                moveq   #60,d1
                move.b  (a1),d0
                subq.w  #1,a1           ; that--;
                sub.b   d0,(a0)         ; *this -= *that;
                bge.s   2$              ; if ( < 0)
                add.b   d1,(a0)         ;       *this += 60;
                addq.b  #1,(a1)         ;       (*that)++;
2$              subq.w  #1,a0           ; this--;

* Minutes
*
                move.b  (a1),d0
                subq.w  #1,a1           ; that--;
                sub.b   d0,(a0)         ; *this -= *that;
                bge.s   3$              ; if ( < 0)
                neg.b   (a0)            ;       *this = -*this;
                move.b  #-1,(a1)        ;       *that = -1;
3$:

                movem.l (sp)+,d0/d1

                rts


putkey:         ; 
                ; a3 - raw event
                movem.l d2/a0-a3/a6,-(sp)
                move.l  d0,d2
                beq.s   dontdo          ; no zero events
                movea.l a0,a2 
                movea.l a1,a3 
                lea     IPD_returnport(a3),a0
                movea.l (4).w,a6
                jsr     _LVOGetMsg(a6)
                tst.l   d0
                bne.s   fillevent
                
makeevent       move.l  #MEMF_CLEAR+MEMF_PUBLIC,d1
                moveq   #cdtve_SIZE,d0
                jsr     _LVOAllocMem(a6)
                tst.l   d0
                beq.s   dontdo
                movea.l d0,a1
                lea     IPD_returnport(a3),a0
                move.l  a0,MN_REPLYPORT(a1)
                move.w  #cdtve_SIZE,MN_LENGTH(a1)

fillevent       movea.l d0,a1
                move.l  d2,cdtve_Qualifier(a1)
                lea     IPD_MsgPort(a3),a0
                jsr     _LVOPutMsg(a6)
dontdo
                movem.l (sp)+,d2/a0-a3/a6
                rts


;---------------------------------------------------------------------
        xdef    _InputHDR

; d0                            a0 - current event
; d1                            a1 - data area
; d2                            a2 - prev event
; d3                            a3
; d4                            a4
; d5                            a5
; d6                            a6
; d7 first event                                

_InputHDR       ; a0 - input chain
                ; a1 - data area
                
                movem.l d2-d7/a2,-(sp)
                move.l  a0,d7
                
evloop          cmpa.w  #0,a0
                beq.s   endinput
                
                move.b  ie_Class(a0),d0
                cmpi.b  #IECLASS_RAWKEY,d0
                beq.s   classkey
                
                cmpi.b  #IECLASS_RAWMOUSE,d0
                beq     classmouse
                bra.s   endev
                
endrm           bsr.s   removeevent

endev           movea.l a0,a2
                movea.l (a0),a0
                bra.s   evloop

endinput        move.l  d7,d0
                movem.l (sp)+,d2-d7/a2
                rts

removeevent     ; a2 holds previous event
                ; d7 holds first event
                cmp.l   a0,d7
                beq.s   0$              ; branch if the event is first.
                move.l  (a0),(a2)       ; prev->ie_NextEvent = curr->ie_Next...
                rts
0$              move.l  (a0),d7         ; first event = curr->ie_NextEvent
                rts
                
;--- the easiest
classkey        ; key event class
                moveq   #0,d2
                moveq   #0,d0
                move.w  ie_Code(a0),d0
                btst.l  #IECODEB_UP_PREFIX,d0
                beq.s   1$              ; not there
                move.w  #IECODE_UP_PREFIX,d2
                bclr.l  #IECODEB_UP_PREFIX,d0
1$              move.w  ie_Qualifier(a0),d1
                cmp.w   #$64,d0
                blt.s   2$
                beq.s   10$
                cmp.w   #$67,d0
                bgt.s   2$
                beq     13$
                cmp.w   #$65,d0
                beq.s   11$
                bra.s   12$
2$              move.l  ie_Code(a0),d0
                swap    d0
                bsr     putkey
                bra.s   endrm           ; *** Destroy all key clicks
;               bra.s   endev           ; *** Pass throuch keys

10$     ; LALT  
                btst.l  #IEQUALIFIERB_LCOMMAND,d1
                beq.s   2$
                move.w  #IECODE_LBUTTON,d0
                bra.s   20$
11$     ; RALT
                btst.l  #IEQUALIFIERB_RCOMMAND,d1
                beq.s   2$
                move.w  #IECODE_RBUTTON,d0
                bra.s   20$
12$     ; LAMIGA
                btst.l  #IEQUALIFIERB_LALT,d1
                beq.s   2$
                move.w  #IECODE_LBUTTON,d0
                bra.s   20$
13$     ; RAMIGA
                btst.l  #IEQUALIFIERB_RALT,d1
                beq.s   2$
                move.w  #IECODE_RBUTTON,d0
20$             or.w    d2,d0
                bsr     putkey
                bra     endrm           ; *** Destroy all key clicks

;--- the hardest
classmouse      ; mouse event class
                ;       There will be two... no three ways a mouse event
                ;       will generate a code:  
                ;               1] mouse buttons
                ;               2] no mouse event for <IPD_microwait>  
                ;               3] change in mouse dir
                ;               4] delta move exceeded.
                
                ; FIRST - Is Button Changed
                move.w  IPD_mousequal(a1),d2
                move.w  ie_Qualifier(a0),d3             
                eor.w   d3,d2           ; check for changes
                beq.s   rawbutton
                btst.l  #IEQUALIFIERB_RBUTTON,d2
                beq.s   0$
                move.w  #IECODE_RBUTTON,d0
                btst.l  #IEQUALIFIERB_RBUTTON,d3
                bne.s   3$
                addi.w  #IECODE_UP_PREFIX,d0
3$              bsr     putkey
0$              btst.l  #IEQUALIFIERB_LEFTBUTTON,d2
                beq.s   1$
                move.w  #IECODE_LBUTTON,d0
                btst.l  #IEQUALIFIERB_LEFTBUTTON,d3
                bne.s   2$
                addi.w  #IECODE_UP_PREFIX,d0
2$              bsr     putkey
1$              move.w  d3,IPD_mousequal(a1)
                bra.s   endbutton

rawbutton
                moveq   #0,d0
                move.w  ie_Code(a0),d0
                cmpi.w  #IECODE_NOBUTTON,d0
                beq.s   endbutton
                
        ; button change
                bsr     putkey
endbutton
                ; FIRST INTERLUDE -- if not moved at all leave
                
                move.l  ie_EventAddress(a0),d2  ; x upper, y lower
                beq     nomevent
                move.l  d2,d3
                swap    d2                      ; d2 = x, d3 = y
                ; add to running move
                add.w   d2,IPD_MouseXmove(a1)
                add.w   d3,IPD_MouseYmove(a1)
                
                moveq   #0,d0
                tst.w   d2              ; test x
                beq.s   2$
                bgt.s   1$
                neg.w   d2              ; x is neg
                moveq   #1,d0
                bra.s   2$
1$              moveq   #2,d0
2$              tst.w   d3              ; test y
                beq.s   4$
                bgt.s   3$
                neg.w   d3              ; y is neg
                ori.b   #4,d0
                bra.s   4$
3$              ori.b   #8,d0
4$              cmp.w   d3,d2           
                beq.s   same
                bgt.s   xwins
                
                        ; y dir movement
ywins           andi.b  #12,d0
; If the mouse travel direction has changed, then re-instate the
; countdown of mouse ticks.  This gives us hysteresis.
		move.b	IPD_mousedir(a1),d1
		andi.b	#12,d1
                cmp.b   d1,d0
                beq.s   sameydir
                move.w  IPD_MouseTDist(a1),IPD_mousemove(a1)

sameydir        sub.w   d3,IPD_mousemove(a1)
                bmi.s   yesmove                 ; moved far enough
                bra.s   deltawait
                        
                        ; x dir movement
xwins           andi.b  #3,d0
; If the mouse travel direction has changed, then re-instate the
; countdown of mouse ticks.  This gives us hysteresis.
		move.b	IPD_mousedir(a1),d1
		andi.b	#3,d1
                cmp.b   d1,d0
                beq.s   samexdir
                move.w  IPD_MouseTDist(a1),IPD_mousemove(a1)

samexdir        sub.w   d2,IPD_mousemove(a1)
                bmi.s   yesmove
                bra.s   deltawait
                        ; x and y equal - diagnal movement
same            move.b  IPD_mousedir(a1),d1
                and.w   d0,d1
                beq.s   xwins
0$              move.b  d1,d4
                andi.w  #3,d0
                bne.s   xwins
                bra.s   ywins
        ; Delta Wait
deltawait
                movem.l ie_TimeStamp(a0),d3/d4
                movem.l IPD_mousetime(a1),d1/d2
                sub.l   d1,d3           ; ie = ie - ipd
                cmpi.l  #1,d3
                bgt.s   yesmove         
                bne.s   0$
                addi.l  #1000000,d4
0$              sub.l   d2,d4
                cmp.l   IPD_MouseWait(a1),d4
                blt     nomevent

yesmove         move.b  d0,IPD_mousedir(a1)
                bset.l  #15,d0
                bsr     putkey
                move.w  IPD_MouseTDist(a1),IPD_mousemove(a1)
nomevent
                movem.l ie_TimeStamp(a0),d0/d1
                movem.l d0/d1,IPD_mousetime(a1)
                bra     endrm
                

                END

@


1.1
log
@Initial revision
@
text
@d464 9
a472 3
;               cmp.b   IPD_mousedir(a1),d0
;               bne.s   yesmove                 ; changed dir
                sub.w   d3,IPD_mousemove(a1)
d478 9
a486 3
;               cmp.b   IPD_mousedir(a1),d0
;               bne.s   yesmove
xmm             sub.w   d2,IPD_mousemove(a1)
@
