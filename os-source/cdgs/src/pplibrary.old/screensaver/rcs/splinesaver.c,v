head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     92.08.20.13.14.52;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.24.09.20.34;  author jerryh;  state Exp;
branches ;
next     ;


desc
@Main spline screen saver code.
@


1.2
log
@spline saver now only has necessary routines.  Spline saver itself will probably
be removed at some point.
@
text
@
/********************************************************************************
*   sdraw2.c
**
**  Purpose: CDTV screen saver
**  Compile&link: SAS/C Lattice-C  v5.10a
**
**  Date: Mar 4, 1992
**  Copyright (C) 1992, 1993 Commodore Amiga Inc.  All rights reserved.
**
********************************************************************************/

#include <exec/types.h>
#include <exec/memory.h>
#include <exec/libraries.h>
#include <libraries/dos.h>
#include <graphics/gfxbase.h>
#include <graphics/view.h>

#include <hardware/custom.h>

#include "/playerprefsbase.h"

#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>

#include <cdtv/debox.h>
#include <cdtv/debox_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/graphics_pragmas.h>

#include <string.h>

#include "splinesaver.h"


/*******************************************************************************/
/*****    E X T E R N A L    F U N C T I O N S    D E C L A R A T I O N    *****/
/*******************************************************************************/

extern struct Custom __far custom;

void __stdargs DrawSpline(LONG oi, LONG x, LONG y, LONG x3, LONG y3);

/* pragma spoofs */
#define SysBase     (G->PPBase->ppb_ExecBase)
#define GfxBase     (G->PPBase->ppb_GfxBase)
#define DeBoxBase   (G->PPBase->ppb_DeBoxBase)

/*******************************************************************************/
/*****    I N T E R N A L    F U N C T I O N S    D E C L A R A T I O N    *****/
/*******************************************************************************/

void  blk(struct SaverGlobals *G);
WORD  Random(struct SaverGlobals *G,WORD);
void  MakeFunc(struct SaverGlobals *G);
void  Draw_S_F(struct SaverGlobals *G,register WORD *,register WORD *);
void  Draw_SF(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawS_F(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawSF(struct SaverGlobals *G,register WORD *,register WORD *);
void  Draw_LF(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawL_F(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawLF(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawnLF(struct SaverGlobals *G,register WORD *,register WORD *);
void  DrawFunc(struct SaverGlobals *G,struct box *);
void  Adv(struct SaverGlobals *G,WORD *,WORD *,WORD *,WORD);
void  AdvanceLines(struct SaverGlobals *G);
void  DrawNew(struct SaverGlobals *G);
void  StartLines(struct SaverGlobals *G);
void  Colors(struct SaverGlobals *G);



/********************************************************************************
**
** void blk(struct SaverGlobals *G)
**
** function:
**  Make view and blank display.
**
********************************************************************************/

void  blk(struct SaverGlobals *G) {

    G->g2->mdelta = -1;
    G->g2->maxlines = MAXLINES/2;
    G->g2->lastanim_secs = G->idata.cursec;                                             /* Process drawing screen saver stuff. */
    }



void UnSetBlanker(struct SaverGlobals *G) {

int i;

    for(i = 0;i < DEPTH;i++) {
        if(G->bm->Planes[i]) FreeRaster(G->bm->Planes[i],WIDTH,HEIGHT);
        }
    }


void SetUpBlanker(struct SaverGlobals *G) {

int i;

    InitBitMap(&G->g2->bitMap,DEPTH,WIDTH,HEIGHT);                                              /* Initialize the BitMaps. */

    for(i = 0;i < DEPTH;i++) G->g2->bitMap.Planes[i] = (PLANEPTR)AllocRaster(WIDTH,HEIGHT);     /* Allocate space for their Planes. */
    
    InitRastPort(&G->g2->rastPort);                                                             /* Initialize the RastPorts and link the BitMaps to them. */

    G->g2->rastPort.BitMap = &G->g2->bitMap;

    SetRast(&G->g2->rastPort,0);                                                                /* Simple form of setting drawing area to color 0. */

    G->g2->gfxbase = GfxBase;
    G->bm = &G->g2->bitMap;
    }



@


1.1
log
@Initial revision
@
text
@a55 1
void  ProcessDraw(struct SaverGlobals *G);
a87 1

a88 4
    SetAPen(&G->g2->rastPort,1);
    MakeFunc(G);
    StartLines(G);
    Colors(G);
a121 429

/********************************************************************************
**
** void ProcessDraw(struct SaverGlobals *G)
**
** function:
**  Process drawing lines.
**
********************************************************************************/

void ProcessDraw(struct SaverGlobals *G) {

int i;

    for(i=0; i< 6; i++) {

        AdvanceLines(G);
        DrawNew(G);
        }

    Colors(G);

    G->g2->anim_secs = G->idata.cursec - G->g2->lastanim_secs;

    if(G->g2->anim_secs >= ANIMINTERVAL) {

        G->g2->lastanim_secs = G->idata.cursec;                                     /* New animation */
        MakeFunc(G);
        SetRast(&G->g2->rastPort,0);
        StartLines(G);
        }

    }

/*******************************************************************************/


WORD Random(struct SaverGlobals *G,WORD i) {

LONG rseed;
LONG rval;

    rseed = G->g2->seed;

    if(rseed == 0)
    rseed = 323214521 + custom.vposr+custom.vhposr;

    rseed = rseed * 123213 + 121;
    rval  = (rseed >> 5) & 65535;
    G->g2->seed  = rseed;
    return((i * rval) >> 16);
    }



/*******************************************************************************/

void MakeFunc(struct SaverGlobals *G) {

WORD i;
WORD goallen;
WORD sofar;
UBYTE *p;
WORD advval[] = {3,2,3,2,1,0,1,0,1};
char *nextpossib;
char *nextlegal[] = {"01458","236","01458","236","01458","23","01458","","0145"};

    G->g2->closed = 2;                                                              /* Random(G,4); */

    switch(G->g2->closed) {

        case 3:
            G->g2->closed = 2;

        case 2:
            goallen = 3 + Random(G,4);
            break;

        case 1:
            goallen = 4 + Random(G,7);
            break;

        case 0:
            goallen = 2 + Random(G,8);
            break;
        }

    while(1) {

        if(G->g2->closed == 0) nextpossib = "0145";
        else                   nextpossib = "0123456";

        sofar = 0;
        p = G->g2->realfunc;

        while(sofar < goallen) {

            i = nextpossib[Random(G,strlen(nextpossib))] - '0';
            *p++ = i;
            nextpossib = nextlegal[i];
            sofar += advval[i];
            }

        if(sofar == goallen) {

            if(G->g2->closed == 0) {
                if(nextpossib[0] == '0')break;
                }

            else {

                if(*nextpossib == '0' || G->g2->realfunc[0] < 4 || *(p-1) < 4) {

                    if((*nextpossib == '0') ? ((G->g2->realfunc[0] & 2) != 0) : ((G->g2->realfunc[0] & 2) == 0)) {

                        if(G->g2->realfunc[0] != 5) {

                            G->g2->realfunc[0] ^= 2;
                            break;
                            }
                        }

                    else break;
                    }
                }
            }
        }

    *p  = 100;
    G->g2->maxpoints = goallen;

    switch(G->g2->closed) {

        case 2:
            for(i=0; i<p-G->g2->realfunc; i++) p[i] = G->g2->realfunc[i];
            p[p-G->g2->realfunc] = 100;
            break;

        case 1:
            break;

        case 0:
            G->g2->maxpoints++;
            break;
        }
    }


/*******************************************************************************/

void Draw_S_F(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    G->g2->oldx = HALF(xptr);
    G->g2->oldy = HALF(yptr);
    OwnBlitter();
    DrawSpline((LONG)&G->g2->oldx,(LONG)xptr,(LONG)yptr,FIXH(xptr+2),FIXH(yptr+2));
    DisownBlitter();
    }

/*******************************************************************************/

void Draw_SF(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    G->g2->oldx = HALF(xptr);
    G->g2->oldy = HALF(yptr);
    OwnBlitter();
    DrawSpline((LONG)&G->g2->oldx,(LONG)xptr,(LONG)yptr,FIX(xptr[3]),FIX(yptr[3]));
    DisownBlitter();
    }

/*******************************************************************************/

void DrawS_F(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    G->g2->oldx = *xptr;
    G->g2->oldy = *yptr;
    OwnBlitter();
    DrawSpline((LONG)&G->g2->oldx,(LONG)xptr,(LONG)yptr,FIXH(xptr+2),FIXH(yptr+2));
    DisownBlitter();
    }

/*******************************************************************************/

void DrawSF(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    G->g2->oldx = *xptr;
    G->g2->oldy = *yptr;
    OwnBlitter();
    DrawSpline((LONG)&G->g2->oldx,(LONG)xptr,(LONG)yptr,FIX(xptr[3]),FIX(yptr[3]));
    DisownBlitter();
    }

/*******************************************************************************/

void Draw_LF(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    Move(&G->g2->rastPort,HALF(xptr),HALF(yptr));
    xptr++;
    yptr++;
    Draw(&G->g2->rastPort,*xptr,*yptr);
    }


void DrawL_F(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    Move(&G->g2->rastPort,*xptr,*yptr);
    Draw(&G->g2->rastPort,HALF(xptr),HALF(yptr));
    }


void DrawLF(struct SaverGlobals *G,register WORD *xptr,register WORD *yptr) {

    Move(&G->g2->rastPort,*xptr,*yptr);
    xptr++;
    yptr++;
    Draw(&G->g2->rastPort,*xptr,*yptr);
    }


void DrawnLF(struct SaverGlobals *G,register WORD *dummya,register WORD *dummyb) {

    }


void DrawFunc(struct SaverGlobals *G,struct box *bptr) {

register LONG i;
register WORD *x,*y;
register unsigned char *p;
WORD advval[] = {3,2,3,2,1,0,1,0,1};

void (*funcs[])(struct SaverGlobals *G,register WORD *,register WORD *) = {

    DrawSF,
    DrawS_F,
    Draw_SF,
    Draw_S_F,
    DrawLF,
    DrawL_F,
    Draw_LF,
    NULL,
    DrawnLF
    };

    G->g2->oldwidth = G->g2->rastPort.BitMap->BytesPerRow;
    G->g2->oldptr   = (LONG)G->g2->rastPort.BitMap->Planes[0];
    switch(G->g2->closed) {

    case 2:

        for(i=0,x=&(bptr->x[0]),y=&(bptr->y[0]); i<G->g2->maxpoints; i++,x++,y++) {

            x[G->g2->maxpoints] = WIDTH - 1 - *x;
            y[G->g2->maxpoints] = HEIGHT - 1 - *y;
            }

        x[G->g2->maxpoints] = bptr->x[0];
        y[G->g2->maxpoints] = bptr->y[0];
        x++,y++;
        x[G->g2->maxpoints] = bptr->x[1];
        y[G->g2->maxpoints] = bptr->y[1];
        break;

    case 1:

        x = &(bptr->x[0]);
        y = &(bptr->y[0]);

        x[G->g2->maxpoints] = bptr->x[0];
        y[G->g2->maxpoints] = bptr->y[0];
        x++,y++;
        x[G->g2->maxpoints] = bptr->x[1];
        y[G->g2->maxpoints] = bptr->y[1];
        break;
        }

    p = G->g2->realfunc;
    x = &(bptr->x[0]);
    y = &(bptr->y[0]);

    while(*p < 10) {

        if(funcs[*p])(funcs[*p])(G,x,y);
        i = advval[*p];
        x += i;
        y += i;
        p++;
        }
    }


void Adv(struct SaverGlobals *G,WORD *o,WORD *d,WORD *n,WORD w) {

    *n = *o + *d;

    if(*n < 0) {

        *n = 0;
        *d = Random(G,6) + 1;
        }

    else if(*n >= w) {

        *n = w - 1;
        *d = - Random(G,6) - 1;
        }
    }



void AdvanceLines(struct SaverGlobals *G) {

WORD i;

    for(i = 0;i < G->g2->maxpoints;i++) {

        Adv(G,G->g2->ox + i,G->g2->dx + i,G->g2->nx + i,WIDTH);
        Adv(G,G->g2->oy + i,G->g2->dy + i,G->g2->ny + i,HEIGHT);
        }
    }


void DrawNew(struct SaverGlobals *G) {

WORD i;
WORD oldpen;
struct box *bptr;

    while(G->g2->numlines >= G->g2->maxlines) {

        oldpen = G->g2->rastPort.FgPen;
        G->g2->oldcol = 0xb0a;

        SetAPen(&G->g2->rastPort,0);
        bptr = G->g2->eptr;
        DrawFunc(G,bptr);
        G->g2->oldcol = 0xbfa;

        SetAPen(&G->g2->rastPort,oldpen);
        G->g2->numlines--;
        bptr++;

        if (bptr == G->g2->store + MAXLINES) bptr = G->g2->store;

        G->g2->eptr = bptr;
        }

    bptr = G->g2->ptr;

    for(i = 0;i < G->g2->maxpoints;i++) {

        bptr->x[i] = G->g2->ox[i] = G->g2->nx[i];
        bptr->y[i] = G->g2->oy[i] = G->g2->ny[i];
        }

    DrawFunc(G,bptr);
    G->g2->numlines++;
    bptr++;

    if(bptr == G->g2->store + MAXLINES) {

        bptr = G->g2->store;

        if(G->g2->mdelta == 1) {

            G->g2->maxlines++;
            if(G->g2->maxlines >= MAXLINES - 1) G->g2->mdelta = -1;
            }

        else {

            G->g2->maxlines--;
            if(G->g2->maxlines <= 2) G->g2->mdelta = 1;
            }
        }

    G->g2->ptr = bptr;
    }


void StartLines(struct SaverGlobals *G) {

register WORD i;

    G->g2->ptr  = G->g2->store;
    G->g2->eptr = G->g2->store;
    G->g2->numlines = 0 ;

    if(G->g2->dx[0] == 0) {

        for(i = 0;i < MAXPOINTS;i++) {

            G->g2->ox[i] = Random(G,WIDTH);
            G->g2->oy[i] = Random(G,HEIGHT);
            G->g2->dx[i] = 2 + Random(G,3);
            G->g2->dy[i] = 2 + Random(G,3);
            }
        }

    G->g2->nr = 0;
    G->g2->ng = 0;
    G->g2->nb = 0;

    G->g2->dr = -3;
    G->g2->dg = 5;
    G->g2->db = 7;

    SetRGB4(G->view->ViewPort,1,(G->g2->nr >> 3),(G->g2->ng >> 3),(G->g2->nb >> 3));

    for(i = 0;i < G->g2->maxlines;i++) {

        AdvanceLines(G);
        DrawNew(G);
        }
    }



void Colors(struct SaverGlobals *G) {

    G->g2->or = G->g2->nr;
    G->g2->og = G->g2->ng;
    G->g2->ob = G->g2->nb;
    Adv(G,&G->g2->or,&G->g2->dr,&G->g2->nr,128);
    Adv(G,&G->g2->og,&G->g2->dg,&G->g2->ng,128);
    Adv(G,&G->g2->ob,&G->g2->db,&G->g2->nb,128);

    SetRGB4(G->view->ViewPort,1,(G->g2->nr >> 3),(G->g2->ng >> 3),(G->g2->nb >> 3));
    }
@
