head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     93.02.26.16.33.37;  author peter;  state Exp;
branches ;
next     1.3;

1.3
date     92.09.21.13.49.34;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.20.13.14.23;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.07.24.09.20.03;  author jerryh;  state Exp;
branches ;
next     ;


desc
@Main CDTV rotating screensaver code.
@


1.4
log
@Stubbed out the screen saver.
@
text
@
#include <exec/types.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <exec/io.h>
#include <exec/memory.h>

#include <devices/input.h>
#include <devices/inputevent.h>

#include <graphics/gfxbase.h>
#include <graphics/view.h>
#include <graphics/rastport.h>
#include <graphics/gfxmacros.h>

#include <hardware/dmabits.h>
#include <hardware/custom.h>

#include <cdtv/debox.h>
#include <cdtv/cdtvprefs.h>

#include "screensaver.h"

#include "/playerprefsbase.h"
#include "/playerprefs_pragmas.h"
#include "/playerprefs_protos.h"
#include "/basicio/viewmgr.h"

#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/dos_protos.h>
#include <cdtv/debox_protos.h>

#include <pragmas/exec_old_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/dos_pragmas.h>

extern struct IOStdReq *installhandler(struct PlayerPrefsBase *, struct Interrupt *);
extern void removehandler(struct PlayerPrefsBase *, struct IOStdReq *, struct Interrupt *);

/* THE ALTLOADVIEW */

int __asm                getloadview(register __a0 void *);
struct LoadView ** __asm TrapLoadView(register __a1 struct GfxBase *);
VOID    __asm            UntrapLoadView(register __a0 struct View **);
VOID    __asm            OrgLoadView(register __a0 struct View **, register __a1 struct View *);
struct BitMap           *openCDTVRotateBm(struct PlayerPrefsBase *);
VOID                     closeCDTVRotateBm(struct PlayerPrefsBase *);
int __asm                rndwseed(register __d0 WORD,register __a0 ULONG *);

extern UWORD volatile __far vhposr;     /*  Custom chip register.  */

void __saveds SetUpBlanker(struct SaverGlobals *G);

extern struct CycleIntInfo  intdata;
struct AltLV
{
struct View *alv_View;
APTR    alv_OldFunc;
struct Library *alv_GfxBase;
};


/*
 * Spoof the #pragmas
 */
#define SysBase     (PlayerPrefsBase->ppb_ExecBase)
#define DeBoxBase   (PlayerPrefsBase->ppb_DeBoxBase)
#define GfxBase     (PlayerPrefsBase->ppb_GfxBase)

#define ROTWIDE     172
#define ROTHIGH     51
#define MINVPX      20
#define MAXVPX      127 /* (320 - ROTWIDE)  1.3 can't take this  */
#define MAXVPY      (210 - ROTHIGH)
/*------------------------------------------------------------------*/

/*
 * Local forward fucntion declarations.  (I hate ANSI.)
 */
LONG __asm __saveds
LIBInstallScreenSaver(register __a6 struct PlayerPrefsBase *);
LONG __asm __saveds
LIBScreenSaverCommand(register __d0 ULONG,
              register __a6 struct PlayerPrefsBase *);
static void __saveds __asm ScreenSave(void);

static int __saveds opensaver(struct SaverGlobals *);
static void closesaver(struct SaverGlobals *);
static int openstuff(struct SaverGlobals *);
static void closestuff(struct SaverGlobals *);
static struct InputEvent * __asm
inputhandler(register __a0 struct InputEvent *,
         register __a1 struct ihd *);

void DoSaverAnim(struct SaverGlobals *);


extern struct Custom    __far custom;
extern char __far _LibName[];



char __far  scrsav[] = SAVEPORTNAME;

/****** playerprefs.library/InstallScreenSaver ****************************
*
*   NAME
*   InstallScreenSaver -- Installs a systemwide screen saver facility.
*
*   SYNOPSIS
*   success = InstallScreenSaver ();
*
*   LONG success;
*
*   FUNCTION
*   This routine installs a screen saver.  After a time of inactivity,
*   the prevailing display is replaced with the CDTV logo moving around
*   on the screen.  This is to keep static images from burning into the
*   user's display.
*
*   This call does NOT nest.
*
*   INPUTS
*
*   RESULT
*   success - non-zero if the screen saver task was successfully
*         started, or is already running.
*
*   EXAMPLE
*
*   NOTES
*   The screen saver is implemented as an autonomous task and input
*   handler.  The input handler monitors input events.  If no meaningful
*   input event occurs after a preset time, a signal is sent to the
*   task which brings up the saver display.
*
*   The input event that takes down the saver display is eaten.
*   You should bear this in mind if you intend to permit the saver to
*   come up while your controls are still "active."
*
*   This screen saver is suitable for programs using the input
*   device.  Programs that go direct to the low level resources
*   should use this blanker in manual mode...by sending blank and
*       unblank commands as needed.
*
*   This facility SetFunction()s LoadView(), thus preventing other Views
*   from being brought to the front while the saver is active.  When the
*   saver takes down its animation, the last View that was set with
*   LoadView() will be loaded and LoadView() will be restored to normal
*   operation.
*
*   The screen saver's resource needs, when quiescent, are very modest;
*   roughly 4K of stack, and less than 1K of dynamically allocated
*   structures.  (It gets *real* big when it kicks in, though...)
*
*   BUGS
*   If the screen saver task fails to start for whatever reason, there's
*   no way to find this out, short of noticing that the task is no
*   longer present.
*
*   SEE ALSO
*   ScreenSaverCommand(), cdtv/screensaver.h
*
*****************************************************************************
*/

LONG __asm __saveds LIBInstallScreenSaver(register __a6 struct PlayerPrefsBase *PlayerPrefsBase) {

    return( 0 );
    }
/****** playerprefs.library/ScreenSaverCommand ****************************
*
*   NAME
*   ScreenSaverCommand -- Send a command to the screen saver facility.
*
*   SYNOPSIS
*   result = ScreenSaverCommand (cmd);
*
*   LONG    result;
*   ULONG   cmd;
*
*   FUNCTION
*   This routine locates the screen saver's IPC port and sends it the
*   command supplied.  This routine is synchronous; it returns after
*   the command has completed.  The result returned is command-specific.
*
*   The commands are:
*
*   SCRSAV_DIE:
*       Kill off the screen saver facility.  If the saver is active,
*       it will take down the saver animation.  All resources are
*       freed, and the task is terminated.  Result is always non-
*       zero.
*
*       NOTE:  This operation does NOT nest!  When you call it,
*       it happens immediately, no matter how many other clients
*       opened it.
*
*   SCRSAV_SAVE:
*       Bring up the saver animation now.  This operation observes
*       the current _FAKEIT setting (q.v.).  If it successfully
*       brought up the saver, result will be non-zero.  If any of
*       the allocations failed, result will be zero.
*
*   SCRSAV_UNSAVE:
*       Take down the saver screen now.  This operation observes the
*       current _FAKEIT setting (q.v.).  The inactivity timer is
*       restarted.  Result is always non-zero.
*
*   SCRSAV_FAKEIT:
*       Keep track of inactive time, and return active/inactive when
*       interrogated with SCRSAV_ISACTIVE (q.v.), but don't
*       *actually* save the screen.  This is so outside programs can
*       poll the saver (don't busy wait!) to see if they should take
*       down their own screens in a special way before letting the
*       saver do it's thing.  This command also inhibits calls to
*       SCRSAV_SAVE.  Result is always non-zero.
*
*   SCRSAV_UNFAKEIT:
*       Cancel the above feature; make the saver behave normally.
*       This operation will bring up the saver animation immediately
*       if it's supposed to be up right now (except that it isn't
*       because you performed SCRSAV_FAKEIT earlier).  In this case,
*       result will be zero if it failed to bring up the saver
*       animation.  Otherwise, in all other cases, result will be
*       non-zero.
*
*   SCRSAV_ISACTIVE:
*       Asks the saver if it's currently displaying the saver
*       animation.  Result is non-zero if the saver is active.
*
*   If cmd is OR'ed with SCRSAV_TIMECMD, then the lower 15 bits of cmd
*   are interpreted as the amount of inactive time to wait before
*   activating the saver animation.  This time value is expressed in
*   seconds.  A time value of zero is interpreted as infinity.  Result
*   is always non-zero.
*
*   INPUTS
*   cmd - Command to saver facility.
*
*   RESULT
*   result  - Command-dependent; see above.
*
*   EXAMPLE
*
*   NOTES
*   If the screen saver facility has not been installed, or the supplied
*   command value is invalid, result is always zero.
*
*   BUGS
*
*   SEE ALSO
*   InstallScreenSaver(), cdtv/screensaver.h
*
*****************************************************************************
*/

LONG __asm __saveds LIBScreenSaverCommand(register __d0 ULONG command,
                                          register __a6 struct PlayerPrefsBase *PlayerPrefsBase) {

    return( 0 );
    }
@


1.3
log
@No effective change.
@
text
@a22 1
#include "splinesaver.h"
d170 1
a170 3
    if (FindTask (scrsav)) return (1);

    return (CreateTask (scrsav, 0, (APTR) ScreenSave, 4096) != NULL);
a171 1

d262 1
a262 324
struct MsgPort  *rport, *fport;
struct Message  msg;

    if (command == SCRSAV_ISACTIVE) return((LONG)PlayerPrefsBase->ppb_Blanked);

    Forbid();

    if ((fport = FindPort(scrsav))) {

        if (rport = (struct MsgPort *)CreatePort (NULL, NULL)) {

            msg.mn_ReplyPort    = rport;
            msg.mn_Node.ln_Type = NT_MESSAGE;
            msg.mn_Length       = command;

            PutMsg(fport, &msg);

            WaitPort(rport);
            DeletePort(rport);

            Permit();

            return((LONG) msg.mn_Length);
            }
        }

    Permit();

    return(0);
    }




void remakeview (register struct View *v, struct View **altlv, register struct PlayerPrefsBase *PlayerPrefsBase) {

register struct ViewPort   *vp;
struct View                 new;

    CopyMem (v, &new, sizeof(new));                              /* Copy existing View, reconstruct all ViewPorts, and remake private copy of view */
    new.LOFCprList = new.SHFCprList = NULL;

    vp = v->ViewPort;
    while (vp) {

        MakeVPort (&new, vp);
        vp = vp->Next;
        }

    MrgCop (&new);

    {
    register struct cprlist *tmp;                               /* Switch the rug while noone's looking. */

        Disable ();
        tmp = new.LOFCprList;
        new.LOFCprList = v->LOFCprList;
        v->LOFCprList = tmp;

        tmp = new.SHFCprList;
        new.SHFCprList = v->SHFCprList;
        v->SHFCprList = tmp;
        }

    if (altlv) OrgLoadView(altlv, v);                           /* Reload view and wait for it to take effect */
    else LoadView (v);                                          /*   then free up old copper lists.           */

    Enable ();

    WaitTOF ();
    FreeCprList (new.LOFCprList);
    FreeCprList (new.SHFCprList);
    }


/*  Additional spoofing for the internal routines.  */
#define PlayerPrefsBase (G->PPBase)

static VOID __asm __saveds ScreenSave(void) {

register struct Message    *msg = NULL;
register LONG               sigwait, sigwake;
struct SaverGlobals         g, *G;
struct MsgPort             *fport;
LONG                        sigblank, sigmsg, sigunblank;
BYTE                        fakeit = 0;
void                       *PPB;
ULONG                       seed;
UWORD                       retval;

#undef  SysBase
#define SysBase     (*(struct Library **) 4)

    G = &g;                                                     /*  Needed for #pragma spoofers.  */
    if (!(g.PPBase = PPB = OpenLibrary(_LibName, 0))) return;

#undef  SysBase
#define SysBase     (PlayerPrefsBase->ppb_ExecBase)

    if (!(fport = (struct MsgPort *)CreatePort (scrsav, 0))) goto xit;

    /* clear out the globals so exit code works */
    MemSet(&g,0,sizeof(struct SaverGlobals));

    rndwseed(-(vhposr & 0x7FFF), &seed);

    g.PPBase            = PPB;/* The MemSet killed it.*/
    g.blanksigbit = g.unblanksigbit = -1;
    g.handlerstuff.is_Node.ln_Type  = NT_INTERRUPT;
    g.handlerstuff.is_Node.ln_Pri   = 70;
    g.handlerstuff.is_Node.ln_Name  = scrsav;
    g.handlerstuff.is_Data          = (APTR) &g.idata;
    g.handlerstuff.is_Code          = (VOID (*)())inputhandler;
    g.fadecnt                       = rndwseed(18, &seed);
    g.SaverType                     = 1;

    if (!openstuff(G)) goto xit;
    
    sigblank = g.idata.blanksig;
    sigunblank = g.idata.unblanksig;
    sigmsg = 1L << fport->mp_SigBit;
    sigwait = sigblank | sigunblank | sigmsg;

    while (1) {
        if (g.altlv) {

            if (GfxBase->ActiView != g.view) {

                closesaver(G);
                continue;   /*  Loop through again.  */
                }

            DoSaverAnim(G);

            Forbid();
            sigwake = SetSignal(0, 0);
            SetSignal(0, sigwake);
            Permit();
            }

        else sigwake = Wait(sigwait);

        if (sigwake & sigblank && !g.altlv) {

            if (!fakeit) {

                if (g.PPBase->ppb_Blanked = opensaver(G)) blk(G);

                else closesaver(G);
                } 

            else g.PPBase->ppb_Blanked = 1;
            }

        if (sigwake & sigunblank) {

            closesaver(G);
            g.PPBase->ppb_Blanked = 0;
            }


        if (sigwake & sigmsg) {
            while (msg = GetMsg(fport)) {

                retval = 1;

                if (msg->mn_Length & SCRSAV_TIMECMD)
                    g.idata.savedelay = msg->mn_Length & ~SCRSAV_TIMECMD;

                else {
                    switch(msg->mn_Length) {
                    case SCRSAV_DIE:
                        msg->mn_Length = 1;
                        goto xit;

                    case SCRSAV_SAVE:
                        if (fakeit) {
                            g.PPBase->ppb_Blanked = 1;
                            break;
                            }

blankit:                if (!g.altlv) {

                            if (g.PPBase->ppb_Blanked = opensaver(G)) {
                                g.idata.lastsec = 0;
                                blk(G);
                                } 

                            else {
                                closesaver (G);
                                retval = 0;
                                }
                            }

                        break;

                    case SCRSAV_UNSAVE:
                        closesaver(G);
                        g.PPBase->ppb_Blanked = 0;
                        g.idata.lastsec = ~0L;
                        break;

                    case SCRSAV_FAKEIT:
                    case SCRSAV_UNFAKEIT:
                        fakeit = msg->mn_Length == SCRSAV_FAKEIT;
                        if (!fakeit && g.PPBase->ppb_Blanked) goto blankit;   /*  Look up.  */
                        if (fakeit && g.altlv)                closesaver (G);
                        break;

                    case SCRSAV_ISACTIVE:
                        retval = g.PPBase->ppb_Blanked;
                        break;

                    default:
                        retval = 0;
                        break;
                    }
                }

            msg->mn_Length = retval;
            ReplyMsg (msg);
            }
        }
    }
xit:
    closestuff(G);

    Forbid();

    if (fport) {

        if (msg) ReplyMsg(msg);
        while (msg = GetMsg(fport)) ReplyMsg(msg);
        DeletePort(fport);
        }

    g.PPBase->ppb_Blanked = 0;

    if (G->PPBase) CloseLibrary(G->PPBase);

/*    Permit();*/
    }


static __saveds opensaver(register struct SaverGlobals *G) {

    if (!(G->g2 = AllocMem(sizeof(struct SGlobal),MEMF_CLEAR))) return 0;

    SetUpBlanker(G);

    if (!(G->view = (struct View *)CreateView (NULL, G->bm, WIDTH, HEIGHT, NULL))) return 0;

    CenterCDTVView (NULL, G->view, WIDTH, HEIGHT);

    if (!(G->altlv = TrapLoadView(GfxBase))) return(0);

    OrgLoadView(G->altlv, G->view);

    Forbid();
    WaitBOVP(G->view->ViewPort);
    OFF_SPRITE
    Permit();

    return(1);
    }


static void closesaver(register struct SaverGlobals *G) {

    if (G->altlv) {

        UntrapLoadView(G->altlv);
        WaitTOF();
        G->altlv = NULL;
        if (G->sprites) ON_SPRITE
        }

    Forbid();

    if (G->view) {

        DeleteView((struct SuperView *)G->view);
        G->view = NULL;
        }

    if (G->bm) {

        UnSetBlanker(G);
        G->bm = NULL;
        }

    if (G->g2) FreeMem(G->g2, sizeof(struct SGlobal));

    G->g2 = NULL;

    Permit();
    }



static openstuff(struct SaverGlobals *G) {   

struct CDTVPrefs cdtvprefs;
    
    if (((G->blanksigbit = AllocSignal(-1)) == -1) || ((G->unblanksigbit = AllocSignal(-1)) == -1)) return (0);
    if (!(G->idreq = installhandler(PlayerPrefsBase, &G->handlerstuff)))                            return (0);
    
    FillCDTVPrefs(&cdtvprefs);

    G->idata.sigtask    = FindTask (NULL);
    G->idata.lastsec    = ~0L;
    G->idata.savedelay  = cdtvprefs.SaverTime * 60; 
    G->idata.blanksig   = 1L << G->blanksigbit;
    G->idata.unblanksig = 1L << G->unblanksigbit;
    }


static void closestuff(register struct SaverGlobals *G) {

    closesaver(G);
    removehandler(PlayerPrefsBase, G->idreq, &G->handlerstuff);

    if (G->blanksigbit >= 0)   FreeSignal(G->blanksigbit);
    if (G->unblanksigbit >= 0) FreeSignal(G->unblanksigbit);
a263 103


/***************************************************************************
 * Input handler.  It grabs input events and determines when a set period of
 * inactivity has elapsed.  The #pragma for _Signal is required because
 * SysBase has no scope in here, even with the funny #defines.
 */
#pragma syscall _Signal 144 902

static struct InputEvent * __asm inputhandler(register __a0 struct InputEvent *ie, register __a1 struct ihd *idat) {

register UBYTE      class;
struct InputEvent   *first = ie;

    /*
     * Special case to initialize 'lastsec' coherently.
     */
    if (idat->lastsec == ~0L && ie) if (ie->ie_TimeStamp.tv_secs) idat->lastsec = ie->ie_TimeStamp.tv_secs;

    while (ie) {

        class = ie->ie_Class;

        if (class == IECLASS_NULL  ||  class == IECLASS_TIMER) {

            /*
             * Check if time has expired.
             */
            if (idat->lastsec && idat->savedelay && ie->ie_TimeStamp.tv_secs - idat->lastsec > idat->savedelay) {
                _Signal(idat->sigtask, idat->blanksig);
                idat->lastsec = 0;
                }
            /* record time for second blanker */
            idat->cursec = ie->ie_TimeStamp.tv_secs;
            }

        else {
            /*
             * Update 'lastsec' with current timestamp.
             */
            if (!idat->lastsec) {
                if((class == IECLASS_RAWKEY)) {
                /* maybe eat the event */
                if( (ie->ie_Code != 0x72) &&
                    (ie->ie_Code != 0x73) &&
                    (ie->ie_Code != 0x74) &&
                    (ie->ie_Code != 0x75)) {
                    ie->ie_Class = IECLASS_NULL;

                    /* only unblank on key up */
                    if((ie->ie_Code & IECODE_UP_PREFIX) == 0)
                        continue;

                    }
                }
                else if((class == IECLASS_RAWMOUSE)) {
                /* eat the event */
                ie->ie_Class = IECLASS_NULL;

                /* only unblank on key up */
                if((ie->ie_Code & IECODE_UP_PREFIX) == 0)
                    continue;

                }
                /*
                 * We sent a blank signal, so send the
                 * unblank signal.
                 */
                _Signal(idat->sigtask, idat->unblanksig);
            }
            /*
             * IECLASS_DISK{INSERTED,REMOVED} have a bug where
             * the timestamp is zero.  This will barf things up
             * unless we filter it.
             */
            if (ie->ie_TimeStamp.tv_secs)
                idat->lastsec = ie->ie_TimeStamp.tv_secs;
            else {
                idat->lastsec = ~0L;
            }
        }
        ie = ie->ie_NextEvent;
    }
    return (first);
}


void DoSaverAnim(struct SaverGlobals *G) {

    WaitTOF();

    SetAPen(&G->g2->rastPort,1);
    SetRGB4(G->view->ViewPort, 1, 15, 15, 15);
/*
    Move(&G->g2->rastPort, 0, 0);
    Draw(&G->g2->rastPort, 200, 200);
*/
    }





@


1.2
log
@Cleaned up screensaver to use only one type.
@
text
@d684 1
d687 1
@


1.1
log
@Initial revision
@
text
@d44 7
a50 1
int __asm getloadview( register __a0 void * ); 
a51 9
struct LoadView ** __asm TrapLoadView(  register __a1 struct GfxBase *);
VOID    __asm UntrapLoadView(   register __a0 struct View ** );
VOID    __asm OrgLoadView(  register __a0 struct View **,
                register __a1 struct View *);
struct BitMap *openCDTVRotateBm( struct PlayerPrefsBase * );
VOID closeCDTVRotateBm( struct PlayerPrefsBase * );

int __asm rndwseed( register __d0 WORD,register __a0 ULONG *);

a88 2
static void movedinkyview (struct SaverGlobals *, LONG, LONG, LONG, LONG);
static void bounce(short *, short *, short, short);
d97 1
a100 2
extern WORD __far PosX[], __far PosY[]; /*  CDTVRotate offsets  */
extern UBYTE    __far cdtvrotate[];     /*  rotating logo  */
a106 48
#define MAX_ROTATECOLORS    (12+6)

UWORD __far CDTVRotateColors[] = {

    0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,
    0x000,0x000,0x000,0x000,0x000,0x000,0x000,0x000,

    0x0000,0x0c00,0x0b00,0x0b00,0x0a00,0x0a00,0x0900,0x0800,        /* jim colors */
    0x0700,0x0600,0x0500,0x0400,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0b20,0x0b02,0x0a03,0x0904,0x0805,0x0705,0x0604,
    0x0504,0x0404,0x0304,0x0203,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0c22,0x0b23,0x0925,0x0826,0x0717,0x0617,0x0516,
    0x0306,0x0206,0x0105,0x0004,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0919,0x0819,0x0719,0x0619,0x0519,0x0419,0x0308,
    0x0207,0x0106,0x0005,0x0004,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x072c,0x061c,0x051b,0x041b,0x031a,0x0219,0x0008,
    0x0007,0x0006,0x0005,0x0004,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x005e,0x004d,0x003c,0x002b,0x002a,0x0029,0x0018,
    0x0007,0x0006,0x0005,0x0004,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0088,0x0077,0x0067,0x0057,0x0047,0x0037,0x0027,
    0x0017,0x0006,0x0005,0x0004,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00a4,0x0095,0x0086,0x0077,0x0067,0x0057,0x0047,
    0x0036,0x0025,0x0014,0x0003,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00a0,0x0090,0x0080,0x0070,0x0060,0x0050,0x0040,
    0x0030,0x0020,0x0010,0x0010,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0a80,0x0880,0x0680,0x0580,0x0380,0x0170,0x0060,
    0x0050,0x0040,0x0030,0x0020,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0c80,0x0c80,0x0b70,0x0a60,0x0950,0x0840,0x0730,
    0x0620,0x0620,0x0510,0x0410,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0b60,0x0b50,0x0b40,0x0a30,0x0920,0x0800,0x0700,
    0x0600,0x0500,0x0500,0x0400,0x0000,0x0000,0x0000,0x0000,

    0x0000,0x0c70,0x0b70,0x0a60,0x0950,0x0840,0x0740,0x0630,        /* new colors */
    0x0630,0x0530,0x0420,0x0310,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x06c6,0x06b6,0x05a5,0x0594,0x0484,0x0373,0x0362,
    0x0341,0x0231,0x0220,0x0110,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0fd0,0x0ec0,0x0db0,0x0bb1,0x0aa1,0x0881,0x0661,
    0x0441,0x0220,0x0110,0x0110,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0f00,0x0d10,0x0c20,0x0b30,0x0a30,0x0940,0x0840,
    0x0640,0x0430,0x0320,0x0110,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0f73,0x0e73,0x0d63,0x0c62,0x0b62,0x0951,0x0851,
    0x0641,0x0430,0x0320,0x0110,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0068,0x0067,0x0056,0x0046,0x0045,0x0034,0x0034,
    0x0023,0x0022,0x0011,0x0011,0x0000,0x0000,0x0000,0x0000,
    };



a345 1
register struct ViewPort   *vp = NULL;
a346 1
register short              i = 0;
d351 1
a351 2
short                       x, y, vx, vy, ovx, ovy;             /* maxvpy; */
BYTE                        flag, fakeit;
d354 1
a355 1

d359 2
a360 4

    G = &g; /*  Needed for #pragma spoofers.  */
    if (!(g.PPBase = PPB = OpenLibrary (_LibName, 0)))
        return;
d365 1
a366 3
    if (!(fport = (struct MsgPort *)CreatePort (scrsav, 0)))
        goto xit;

d370 1
a370 1
    rndwseed (-(vhposr & 0x7FFF), &seed);
d377 4
a380 14
    g.handlerstuff.is_Data      = (APTR) &g.idata;
    g.handlerstuff.is_Code      = (VOID (*)()) inputhandler;
    g.black             = CDTVRotateColors;
    g.rcolors           = &CDTVRotateColors[16];
    g.fadecnt           = rndwseed (MAX_ROTATECOLORS, &seed);

    /* if the rotating image is already open, or we have lots */
    /* of memory, use the nice saver */
    if((g.PPBase->ppb_CROpenCnt > 0) ||
        (AvailMem(MEMF_ANY) > 100000))g.SaverType = 0;
    /* otherwise, use the small saver */
    else g.SaverType    = 1;

    flag = g.PPBase->ppb_Blanked = fakeit = 0;
d382 1
a382 2

    if (!openstuff (G))goto xit;
a388 7
    vx = 2;
    vy = 7;
/*
    maxvpy = MAXVPY;
    if (GfxBase->DisplayFlags & PAL)maxvpy += 56;
*/

a391 3
            /*
             * We're displaying stuff.
             */
d393 4
a396 20
            /*
             * Application is changing its own rug.
             * We give up in this case; no sense in
             * forcing the issue.
             */
            closesaver (G);
            continue;   /*  Loop through again.  */
            }
            WaitTOF ();
            WaitTOF ();

            if(G->SaverType == 0) {
            
            flag ^= 1;
            if (flag)
                vy++;
            ovx = vx;
            ovy = vy;
            bounce (&x, &vx, g.minx, g.maxx);
            bounce (&y, &vy, g.miny, g.maxy);
d398 1
a398 7
            if (vy != ovy  &&  vy < 0) {
                /*
                 * Bounced off floor, create new vy.
                 */
                if (++vy > -5)
                    vy = -(rndwseed (5, &seed) + 10);
            }
d400 4
a403 24
            if (vx != ovx) {
                /*
                 * Change colors.
                 */
                int temp;
                
                g.fade = 0;
                g.fadetimer = 0;
                while ((temp =
                     rndwseed (MAX_ROTATECOLORS, &seed))
                     == g.fadecnt)
                    ;
                g.fadecnt = temp;
                g.oldcmap = g.cmap;
                g.cmap = &G->rcolors[g.fadecnt << 4];
            }
            if (g.fade < 15) {
                /*
                 * Continue fading colors.
                 */
                g.fade++;
                FadeCMap (g.oldcmap,g.cmap,
                      (UWORD *)vp->ColorMap->ColorTable,
                      16,g.fade);
a404 5
            
            movedinkyview (G, x, y, PosX[i], PosY[i]);

            if (vx > 0)i--;
            else i++;
d406 1
a406 2
            if (i >= 24)i = 0;
            else if (i < 0)i = 23;
d408 1
a408 13
            }
            else {
            ProcessDraw(G);
                remakeview (G->view, G->altlv, G->PPBase);
            }
            Forbid();
            sigwake = SetSignal (0, 0);
            SetSignal (0, sigwake);
            Permit();
        }
        else {
            sigwake = Wait(sigwait);
        }
a409 1
        if(sigwake & sigblank  &&  !g.altlv) {
d411 2
a412 5
                /* call init routine for correct saver */
                if (g.PPBase->ppb_Blanked = opensaver (G)) {
                    if(g.SaverType == 0) {
                    vp = g.view->ViewPort;
                    i = 0;
d414 1
a414 5
                    x = vp->DxOffset;
                    y = vp->DyOffset;
                    vy = 7;
                    }
                        else blk(G);
d416 1
a416 2
                else closesaver (G);
            } 
d418 3
a420 1
        }
d422 1
a422 2
        if(sigwake & sigunblank) {
            closesaver (G);
d424 5
a428 1
        }
d430 1
d432 46
a477 4
        if(sigwake & sigmsg) {
            while (msg = GetMsg (fport)) {
/*- - - - - - - - - - - - - - -*/
register UWORD  retval = 1;
d479 4
a482 23

if (msg->mn_Length & SCRSAV_TIMECMD)
    g.idata.savedelay = msg->mn_Length & ~SCRSAV_TIMECMD;
else {
    switch (msg->mn_Length) {
    case SCRSAV_DIE:
        msg->mn_Length = 1;
        goto xit;

    case SCRSAV_SAVE:
        if (fakeit) {
            g.PPBase->ppb_Blanked = 1;
            break;
        }
blankit:    if (!g.altlv)
            if (g.PPBase->ppb_Blanked = opensaver (G)) {
                g.idata.lastsec = 0;
                if(g.SaverType == 0) {
                vp = g.view->ViewPort;
                i = 0;
                x = vp->DxOffset;
                y = vp->DyOffset;
                vy = 7;
a483 7
                else blk(G);
            } 
            else {
                closesaver (G);
                retval = 0;
            }
        break;
d485 2
a486 27
    case SCRSAV_UNSAVE:
        closesaver (G);
        g.PPBase->ppb_Blanked = 0;
        g.idata.lastsec = ~0L;
        break;

    case SCRSAV_FAKEIT:
    case SCRSAV_UNFAKEIT:
        fakeit =  msg->mn_Length == SCRSAV_FAKEIT;
        if (!fakeit  &&  g.PPBase->ppb_Blanked)
            goto blankit;   /*  Look up.  */
        if (fakeit  &&  g.altlv)closesaver (G);
        break;

    case SCRSAV_ISACTIVE:
        retval = g.PPBase->ppb_Blanked;
        break;

    default:
        retval = 0;
        break;
    }
}
msg->mn_Length = retval;
ReplyMsg (msg);
/* msg = NULL; */
/*- - - - - - - - - - - - - - -*/
d491 1
a491 1
    closestuff (G);
d494 1
a495 3
        if (msg)
            /*  Flush message that killed us.  */
            ReplyMsg (msg);
d497 4
a500 3
        /*  Flush the rest.  */
        while (msg = GetMsg (fport))
            ReplyMsg (msg);
a501 2
        DeletePort (fport);
    }
a502 18
    if (G->PPBase)  CloseLibrary (G->PPBase);
}

static void movedinkyview(register struct SaverGlobals  *G,
    LONG vx, LONG vy, LONG rx, LONG ry)
{
    register struct RasInfo     *ri;
    register struct ViewPort    *vp;
    register struct View        *v;

    v = G->view;
    vp = v->ViewPort;
    ri = vp->RasInfo;

    vp->DxOffset = vx;
    vp->DyOffset = vy;
    ri->RxOffset = rx;
    ri->RyOffset = ry;
d504 1
a504 7
    remakeview (v, G->altlv, G->PPBase);
}

static void bounce (short *x, short *dx, short minx, short maxx)
{
    /*  Add offset.  */
    *x += *dx;
d506 1
a506 9
    /*  If outside limits, clip to limits and invert delta.  */
    if (*x < minx) {
        *x = minx;
/*      *x = minx + minx - *x;  */
        goto flip;      /*  Yeah, it's a goto.  So sue me. */
    } else if (*x > maxx) {
        *x = maxx;
/*      *x = maxx + maxx - *x;  */
flip:       *dx = -*dx;
a507 17
}



static __saveds opensaver (register struct SaverGlobals *G)
{
    register UWORD  i;
#if 0
    UWORD  *zap;
#endif

    if(G->SaverType == 0) {
    if (!(G->bm = (struct BitMap *) openCDTVRotateBm (G->PPBase)))
        return (0);
    if (!(G->view = (struct View *)
          CreateView (NULL, G->bm, ROTWIDE, ROTHIGH, NULL)))
        return (0);
d509 10
a518 1
        CenterCDTVView (NULL, G->view, ROTWIDE, ROTHIGH);
d520 1
a520 6
    /*
     * Compute travel limits of viewport.  These have to be within the
     * the 1.3/hardware limits.  These mysterious numbers (255, 256,
     * 129, 13) were derived empirically, and extracted from the
     * Hardware manual.
     */
d522 1
a522 26
    i = G->view->DxOffset;
    G->maxx = 255 - i;
    G->minx = MINVPX + i - 129;
    if (G->minx + i + ROTWIDE < 256)
        G->minx = 256 - ROTWIDE - i;

    i = G->view->DyOffset;
    G->maxy = 210 - ROTHIGH;
    if (i - 10 < 13) G->miny = 13 - i;
    else G->miny = -10;


    G->fade     =
    G->fadetimer    = 0;
    G->oldcmap  = G->black;
    G->cmap     = &G->rcolors[G->fadecnt << 4];
    G->fadeadd  = 3;    /*  Might be different for PAL  */
    LoadRGB4 (G->view->ViewPort, G->oldcmap, 16);
    }
    else {
        if(!(G->g2 = AllocMem(sizeof(struct SGlobal),MEMF_CLEAR)))return 0;
        SetUpBlanker(G);
        if (!(G->view = (struct View *)
            CreateView (NULL, G->bm, WIDTH, HEIGHT, NULL)))return 0;
        CenterCDTVView (NULL, G->view, WIDTH, HEIGHT);
    }
a523 4
    if (!(G->altlv = TrapLoadView (GfxBase)))return (0);
    OrgLoadView (G->altlv, G->view);

    G->sprites = (custom.dmaconr & DMAF_SPRITE) != 0;
d528 2
a529 4
#if 0
    for (i = 8, zap = &custom.spr[0].dataa;  i--; ) {
    *zap++ = 0;  *zap++ = 0;
    zap += 2;
d531 1
a531 3
#endif
    return(1);
}
d533 1
a534 2
static void closesaver (register struct SaverGlobals *G)
{
d536 7
a542 6
    UntrapLoadView (G->altlv);
    WaitTOF();
    G->altlv = NULL;
    if (G->sprites)ON_SPRITE
    }
    /* critical section */
d546 6
a551 3
    DeleteView((struct SuperView *) G->view);
    G->view = NULL;
    }
d553 1
a553 3
    if(G->bm) {
        if(G->SaverType == 0)closeCDTVRotateBm(G->PPBase);
        else UnSetBlanker(G);
d555 4
a558 3
    }
    if(G->SaverType == 1) {
    if(G->g2)FreeMem(G->g2,sizeof(struct SGlobal));
d560 2
d563 4
a566 2
    Permit();
}
d568 1
a568 3
static openstuff (struct SaverGlobals *G)
{   
    struct CDTVPrefs    cdtvprefs;
d570 2
a571 5
    if (((G->blanksigbit = AllocSignal (-1)) == -1)  ||
        ((G->unblanksigbit = AllocSignal (-1)) == -1))
        return (0);
    if (!(G->idreq = installhandler (PlayerPrefsBase, &G->handlerstuff)))
        return (0);
d573 1
a573 1
    FillCDTVPrefs( &cdtvprefs );
d580 4
a583 1
}
d585 2
a586 4
static void closestuff(register struct SaverGlobals *G)
{
    closesaver (G);
    removehandler (PlayerPrefsBase, G->idreq, &G->handlerstuff);
d588 3
a590 3
    if (G->blanksigbit >= 0)    FreeSignal (G->blanksigbit);
    if (G->unblanksigbit >= 0)  FreeSignal (G->unblanksigbit);
}
d600 4
a603 6
static struct InputEvent * __asm inputhandler (
    register __a0 struct InputEvent *ie,
    register __a1 struct ihd    *idat)
{
    register UBYTE      class;
    struct InputEvent   *first = ie;
d608 1
a608 3
    if (idat->lastsec == ~0L  &&  ie)
        if (ie->ie_TimeStamp.tv_secs)
            idat->lastsec = ie->ie_TimeStamp.tv_secs;
d611 1
d613 1
d615 1
d619 2
a620 8
            if (idat->lastsec  &&  idat->savedelay  &&
                ie->ie_TimeStamp.tv_secs - idat->lastsec >
                 idat->savedelay)
            {
                /*
                 * Yup.  Send blank signal.
                 */
                _Signal (idat->sigtask, idat->blanksig);
d622 1
a622 1
            }
d625 2
a626 1
        }
d659 1
a659 1
                _Signal (idat->sigtask, idat->unblanksig);
d676 16
@
