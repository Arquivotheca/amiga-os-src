head     1.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.7
date     94.03.22.10.21.24;  author jerryh;  state Exp;
branches ;
next     1.6;

1.6
date     94.03.22.10.19.23;  author jerryh;  state Exp;
branches ;
next     1.5;

1.5
date     94.03.17.14.29.09;  author jerryh;  state Exp;
branches ;
next     1.4;

1.4
date     94.03.17.14.15.37;  author jerryh;  state Exp;
branches ;
next     1.3;

1.3
date     94.03.17.13.48.24;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     94.03.17.11.20.05;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     94.01.26.10.43.23;  author jerryh;  state Exp;
branches ;
next     ;


desc
@nofastmem.resource source code.
@


1.7
log
@*** empty log message ***
@
text
@**
**      $Filename nofastmem.asm $
**      $Release: 1.0 $
**      $Revision: 1.6 $
**      $Date: 94/03/22 10:19:23 $
**
**      nofastmem resource module
**
**      (C) Copyright 1994 Commodore-Amiga, Inc.
**          All Rights Reserved
**
**      $Id: nofastmem.asm,v 1.6 94/03/22 10:19:23 jerryh Exp Locker: jerryh $

        SECTION nofastmem,code

**      Included Files

        INCLUDE         "exec/types.i"
        INCLUDE         "exec/nodes.i"
        INCLUDE         "exec/lists.i"
        INCLUDE         "exec/execbase.i"
        INCLUDE         "exec/libraries.i"
        INCLUDE         "exec/resident.i"
        INCLUDE         "exec/initializers.i"
        INCLUDE         "exec/memory.i"

        INCLUDE         "nofastmem_rev.i"


**      Local Macros

XLVO    MACRO
        XREF    _LVO\1
        ENDM

**      Imported

        XLVO    AvailMem
        XLVO    AllocMem

************************************************************************
***
***  Standard Macros
***
************************************************************************

clear       macro   data-register
        moveq.l #0,\1
        endm

save        macro   (regs)
        movem.l \1,-(sp)
        endm

restore     macro   (regs)
        movem.l (sp)+,\1
        endm

exec        macro   function
        move.l  a6,-(sp)
        move.l  4,a6
        jsr LVO.\1(A6)
        move.l  (sp)+,a6
        endm

************************************************************************
***
***  Library Vector Offsets (LVO's)
***
************************************************************************

FUNCDEF     macro
LVO.\1      equ LVOFF
LVOFF       set LVOFF-6
        endm
LVOFF       set -5*6
    include "include:exec/exec_lib.i"


**********************************************************************

residentnfmr:
                dc.w    RTC_MATCHWORD
                dc.l    residentnfmr
                dc.l    nfmrEndModule
                dc.b    RTF_AUTOINIT!RTF_COLDSTART
                dc.b    VERSION
                dc.b    NT_RESOURCE
                dc.b    100
                dc.l    nfmrName
                dc.l    nfmrID
                dc.l    nfmrInitTable

nfmrName:
                dc.b    'nofastmem.resource',0

nfmrID:
                VSTRING


nfmrInitTable:
                dc.l    LIB_SIZE
                dc.l    nfmrFuncInit
                dc.l    nfmrStructInit
                dc.l    nfmrInit



RESDEF MACRO
                dc.w    nfmr\1-nfmrFuncInit
        ENDM

nfmrFuncInit:
                dc.w    -1
                RESDEF RemoveFastMem
                RESDEF RestoreFastMem
                dc.w    -1

nfmrStructInit:
                INITBYTE    LN_TYPE,NT_RESOURCE
                INITLONG    LN_NAME,nfmrName
                INITBYTE    LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
                dc.w        0


;------ nofastmem.resource/Init ------------------------------------------
;
;
nfmrInit:
                rts



**********************************************************************
*
* Patch code
*
**********************************************************************

nfmr_Patch:

oldAvailMem:    dc.l    0
oldAllocMem:    dc.l    0

NoFastAvailMem:
    bset    #MEMB_CHIP,d1
    move.l  oldAvailMem(pc),a0
    jmp     (a0)

NoFastAllocMem:
    bset    #MEMB_CHIP,d1
    bclr    #MEMB_FAST,d1
    move.l  oldAllocMem(pc),a0
    jmp     (a0)

nfmr_EndPatch:



******* nofastmem.resource/RemoveFastMem *****************************
*
*   NAME
*       RemoveFastMem -- Remove fast memory from system
*
*   SYNOPSIS
*       RemoveFastMem()
*
*       void RemoveFastMem(void);
*
*   FUNCTION
*       Removes fast memory from system.
*
*   INPUTS
*
*   RESULTS
*       Fast memory is removed.
*
**********************************************************************

nfmrRemoveFastMem:

        exec    Forbid                                                  ; Disable task switching

        move.l  $4,a0                                                   ; Already patched? (this is a questionable test)
        move.l  _LVOAllocMem+2(a0),d0
        sub.l   _LVOAvailMem+2(a0),d0
        cmp.l   #NoFastAllocMem-NoFastAvailMem,d0
        beq     99$

        move.l  #nfmr_EndPatch-nfmr_Patch,d0                            ; Allocate patch memory
        move.l  #MEMF_PUBLIC,d1
        exec    AllocVec
        tst.l   d0
        beq     99$
        move.l  d0,a1

        save    a1                                                      ; Copy patch to memory
        lea     nfmr_Patch(pc),a0
        move.l  #nfmr_EndPatch-nfmr_Patch,d0
        exec    CopyMem
        restore a1

        move.l  $4,a0                                                   ; Prepare and implement patch
        move.l  _LVOAvailMem+2(a0),0(a1)
        move.l  _LVOAllocMem+2(a0),4(a1)
        move.l  #NoFastAvailMem-nfmr_Patch,d0
        add.l   a1,d0
        move.l  d0,_LVOAvailMem+2(a0)
        move.l  #NoFastAllocMem-nfmr_Patch,d0
        add.l   a1,d0
        move.l  d0,_LVOAllocMem+2(a0)
99$
        exec    Permit                                                  ; Reenable task switching
        rts



******* nofastmem.resource/RestoreFastMem ****************************
*
*   NAME
*       RestoreFastMem -- Restore fast memory to system
*
*   SYNOPSIS
*       RestoreFastMem()
*
*       void RestoreFastMem(void);
*
*   FUNCTION
*       Restores fast memory to system.
*
*   INPUTS
*
*   RESULTS
*       Fast memory is restored.
*
**********************************************************************

nfmrRestoreFastMem:

        exec    Forbid                                                  ; Disable task switching

        move.l  $4,a0                                                   ; Patch installed? (this is a questionable test)
        move.l  _LVOAllocMem+2(a0),d0
        sub.l   _LVOAvailMem+2(a0),d0
        cmp.l   #NoFastAllocMem-NoFastAvailMem,d0
        bne     99$

        move.l  _LVOAvailMem+2(a0),a1                                   ; Get patch copy base
        sub.l   #8,a1

        move.l  0(a1),_LVOAvailMem+2(a0)                                ; Restore original patch
        move.l  4(a1),_LVOAllocMem+2(a0)

        exec    FreeVec                                                 ; Free patch memory
99$
        exec    Permit                                                  ; Reenable task switching
        rts



nfmrEndModule:

        END
@


1.6
log
@*** empty log message ***
@
text
@d4 2
a5 2
**      $Revision: 1.5 $
**      $Date: 94/03/17 14:29:09 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 1.5 94/03/17 14:29:09 jerryh Exp Locker: jerryh $
d134 1
a134 1
******* Patch code ***************************************************
d136 1
@


1.5
log
@*** empty log message ***
@
text
@d4 2
a5 2
**      $Revision: 1.4 $
**      $Date: 94/03/17 14:15:37 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 1.4 94/03/17 14:15:37 jerryh Exp Locker: jerryh $
d217 1
a217 1
******* nofastmem.resource/RestoreFastMem *****************************
@


1.4
log
@+w
@
text
@d4 2
a5 2
**      $Revision: 1.3 $
**      $Date: 94/03/17 13:48:24 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 1.3 94/03/17 13:48:24 jerryh Exp Locker: jerryh $
d245 1
a245 1
        beq     99$
@


1.3
log
@library is of size LIB_SIZE.
@
text
@d4 2
a5 2
**      $Revision: 1.2 $
**      $Date: 94/03/17 11:20:05 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 1.2 94/03/17 11:20:05 jerryh Exp Locker: jerryh $
d184 2
a185 2
        move.l  _LVOAllocMem(a0),d0
        sub.l   _LVOAvailMem(a0),d0
d203 2
a204 2
        move.l  _LVOAvailMem(a0),0(a1)
        move.l  _LVOAllocMem(a0),4(a1)
d207 1
a207 1
        move.l  d0,_LVOAvailMem(a0)
d210 1
a210 1
        move.l  d0,_LVOAllocMem(a0)
d242 2
a243 2
        move.l  _LVOAllocMem(a0),d0
        sub.l   _LVOAvailMem(a0),d0
d247 1
a247 1
        move.l  _LVOAvailMem(a0),a1                                     ; Get patch copy base
d250 2
a251 2
        move.l  0(a1),_LVOAvailMem(a0)                                  ; Restore original patch
        move.l  4(a1),_LVOAllocMem(a0)
@


1.2
log
@New patch method.
@
text
@d4 2
a5 2
**      $Revision: 1.1 $
**      $Date: 94/01/26 10:43:23 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 1.1 94/01/26 10:43:23 jerryh Exp Locker: jerryh $
d102 1
a102 1
                dc.l    0
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
**      $Revision: 40.0 $
**      $Date: 91/02/12 11:28:01 $
d12 1
a12 1
**      $Id: nofastmem.asm,v 36.8 91/02/12 11:28:01 jerryh Exp $
d38 2
a79 8
*** Our resource structure

 STRUCTURE      nofastmemResource,LIB_SIZE
    STRUCT      nfmr_List,MLH_SIZE
    UWORD       nfmr_Removed
    LABEL       nfmr_SIZEOF


d102 1
a102 1
                dc.l    nfmr_SIZEOF
a129 6
                lea     nfmr_List+MLH_TAILPRED(a6),a0
                move.l  a0,nfmr_List+MLH_HEAD(a6)
                clr.l   nfmr_List+MLH_TAILPRED(a6)
                lea     nfmr_List+MLH_HEAD(a6),a0
                move.l  a0,nfmr_List+MLH_TAIL(a6)
                clr.w   nfmr_Removed(a6)
d133 26
d181 1
a181 2
        tst.w   nfmr_Removed(a6)                                        ; Already removed?
        bne     10$
d183 12
a194 1
        exec    Forbid                                                  ; Disable task switching
d196 4
a199 12
        move.l  $4,a0                                                   ; Get first node of memory list
        move.l  MemList(a0),a1
        move.l  LH_HEAD(a1),a1
1$
        tst.l   LN_SUCC(a1)                                             ; End of list?
        beq     3$

        move.w  MH_ATTRIBUTES(a1),d0                                    ; Is this chip memory? If not, remove it
        and.w   #MEMF_CHIP,d0
        bne     2$
        save    a1
        exec    Remove
d202 11
a212 11
        save    a1                                                      ; Place node on our memory list
        lea     nfmr_List(a6),a0
        exec    Enqueue
        restore a1
2$
        move.l  LN_SUCC(a1),a1                                          ; Next node
        bra     1$
3$
        exec    Permit                                                  ; All done
        move.w  #1,nfmr_Removed(a6)
10$
d239 1
a239 11
        tst.w   nfmr_Removed(a6)
        beq     10$

        move.l  $4,a0                                                   ; Disable task switching
        exec    Forbid

        move.l  nfmr_List(a6),a1                                        ; Get first node of saved memory list
        move.l  LH_HEAD(a1),a1
1$
        tst.l   LN_SUCC(a1)                                             ; End of list?
        beq     3$
d241 11
a251 3
        save    a1
        exec    Remove
        restore a1
d253 3
a255 12
        save    a1                                                      ; Place back on system memory list
        move.l  $4,a0
        move.l  MemList(a0),a0
        exec    Enqueue
        restore a1
2$
        move.l  LN_SUCC(a1),a1                                          ; Next node
        bra     1$
3$
        exec    Permit                                                  ; All done
        clr.w   nfmr_Removed(a6)
10$
@
