head     1.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.15
date     93.03.23.13.50.39;  author jerryh;  state Exp;
branches ;
next     1.14;

1.14
date     93.03.22.10.24.52;  author jerryh;  state Exp;
branches ;
next     1.13;

1.13
date     93.03.17.13.36.28;  author jerryh;  state Exp;
branches ;
next     1.12;

1.12
date     93.03.12.16.54.17;  author jerryh;  state Exp;
branches ;
next     1.11;

1.11
date     93.03.12.10.22.54;  author jerryh;  state Exp;
branches ;
next     1.10;

1.10
date     93.03.10.13.15.23;  author jerryh;  state Exp;
branches ;
next     1.9;

1.9
date     93.03.10.11.29.24;  author jerryh;  state Exp;
branches ;
next     1.8;

1.8
date     93.02.24.14.16.50;  author jerryh;  state Exp;
branches ;
next     1.7;

1.7
date     93.02.19.16.31.08;  author jerryh;  state Exp;
branches ;
next     1.6;

1.6
date     93.02.09.16.23.03;  author jerryh;  state Exp;
branches ;
next     1.5;

1.5
date     93.01.22.11.58.41;  author jerryh;  state Exp;
branches ;
next     1.4;

1.4
date     92.12.18.11.40.44;  author jerryh;  state Exp;
branches ;
next     1.3;

1.3
date     92.11.20.12.07.23;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.11.17.16.50.48;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.11.16.13.26.09;  author jerryh;  state Exp;
branches ;
next     ;


desc
@Startup animation for CDGS.
@


1.15
log
@this code isn't used anymore.
@
text
@
/***********************************************************************************************
 *                                                                                             *
 *  The following is an example of how the startup animation should operate.  This example is  *
 *  code that is currently used to fade a picture in and out in absence of an actual startup   *
 *  animation.  The animation should be completely self-contained just like this example.      *
 *  ALL animation data should be contained in the animation's object file.                     *
 *                                                                                             *
 *                                                              Jerry Horanoff  11/16/92       *
 *                                                                                             *
 ***********************************************************************************************/

#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/memory.h>
#include <exec/io.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/view.h>
#include <intuition/intuitionbase.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <utility/tagitem.h>
#include <cdtv/debox.h>
#include <libraries/lowlevel.h>

#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <clib/alib_protos.h>
#include <clib/debox_protos.h>
#include <clib/lowlevel_protos.h>

#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/exec_pragmas.h>
#include <pragmas/debox_pragmas.h>
#include <pragmas/lowlevel_pragmas.h>

#include "animation.h"
#include "cdui/cdui.h"
#include "cdui/cdui_protos.h"
#include "cdui/cdui_pragmas.h"

#define STACK_SIZE 8192

#define SysBase (*((LONG *)4))

extern UBYTE * __far strapimage;

extern LONG    __asm FakeOWB(void);

void          SendAnimMessage(int Msg);
void __saveds AnimationTask(void);

void PresentCDUI(ULONG);



/***********************************************************************************************
 *                                                                                             *
 * Set up task data in a form that will allow it to be freed automatically by RemTask()        *
 *                                                                                             *
 ***********************************************************************************************/

struct TaskTask {                                                                               /* Task  */

    struct MemList MemList;
    struct Task    Task;
    };

struct TaskStack {                                                                              /* Stack */

    struct MemList MemList;
    UBYTE          Stack[STACK_SIZE];
    };

struct TaskData {                                                                               /* Name  */

    struct MemList MemList;
    char           Name[18];
    };



/***********************************************************************************************
 *                                                                                             *
 * Fade - Scale luminance of the screen to between 0 and 16                                    *
 *                                                                                             *
 ***********************************************************************************************/

void Fade(UWORD Level, ULONG *ColorTable, struct ViewPort *ViewPort, struct GfxBase *GfxBase) {

ULONG RGBTable[258], i = 1;
ULONG NumColors = ColorTable[0] >> 16;

    do {                                                                                        /* Traverse color table */

        RGBTable[i] = (ColorTable[i++] * Level / 16) * 0x11111111;                              /* Set R, G, & B        */
        RGBTable[i] = (ColorTable[i++] * Level / 16) * 0x11111111; 
        RGBTable[i] = (ColorTable[i++] * Level / 16) * 0x11111111; 

        } while (((i-1)/3) < NumColors);                                                        /* Last color?          */

    RGBTable[i] = 0;                                                                            /* Set table length     */
    RGBTable[0] = ColorTable[0];

    LoadRGB32(ViewPort, RGBTable);                                                              /* Make colors change   */
    }




void FadeTo(LONG Target, LONG *FadeValue, ULONG *ColorTable,
            struct ViewPort *ViewPort, struct GfxBase *GfxBase) {

    if (Target > *FadeValue) {

        for (*FadeValue; *FadeValue<=Target; *FadeValue+=2) {

            Fade(*FadeValue, ColorTable, ViewPort, GfxBase);
            WaitTOF();
            }
        }

    else if (Target < *FadeValue) {

        for (*FadeValue; *FadeValue>=Target; *FadeValue-=2) {

            Fade(*FadeValue, ColorTable, ViewPort, GfxBase);
            WaitTOF();
            }
        }

    *FadeValue = Target;
    }



/*******************************************************************************************
 *                                                                                         *
 * StartAnimation - Start Animation Task                                                   *
 *                                                                                         *
 *******************************************************************************************/

int StartAnimation(void) {

struct TaskTask  *TaskTask;
struct TaskStack *TaskStack;
struct TaskData  *TaskData;

    if (TaskTask = AllocMem(sizeof(struct TaskTask), MEMF_PUBLIC | MEMF_CLEAR)) {           /* Allocate Task structure          */

        if (TaskStack = AllocMem(sizeof(struct TaskStack), MEMF_PUBLIC)) {                  /* Allocate Task stack              */

            if (TaskTask->Task.tc_UserData = (TaskData = AllocMem(sizeof(struct TaskData),  /* Allocate Task name               */
                MEMF_PUBLIC | MEMF_CLEAR)) + sizeof(struct TaskData)) {

                CopyMem("Startup Animation", &TaskData->Name[0], 18);                       /* Create the name                  */

                TaskTask->Task.tc_MemEntry.lh_Head     = (struct Node *)                    /* Initialize MemEntry list         */
                                                         &TaskTask->Task.tc_MemEntry;
                TaskTask->Task.tc_MemEntry.lh_TailPred = (struct Node *)
                                                         &TaskTask->Task.tc_MemEntry;

                TaskTask->MemList.ml_NumEntries           = 1;                              /* Assign Task structure to MemList */
                TaskTask->MemList.ml_ME[0].me_Un.meu_Addr = TaskTask;
                TaskTask->MemList.ml_ME[0].me_Length      = sizeof(struct TaskTask);
                AddHead(&TaskTask->Task.tc_MemEntry, &TaskTask->MemList);

                TaskStack->MemList.ml_NumEntries           = 1;                             /* Add Stack to MemList             */
                TaskStack->MemList.ml_ME[0].me_Un.meu_Addr = TaskStack;
                TaskStack->MemList.ml_ME[0].me_Length      = sizeof(struct TaskStack);
                AddHead(&TaskTask->Task.tc_MemEntry, &TaskStack->MemList);

                TaskData->MemList.ml_NumEntries           = 1;                              /* Add Task name to MemList         */
                TaskData->MemList.ml_ME[0].me_Un.meu_Addr = TaskData;
                TaskData->MemList.ml_ME[0].me_Length      = sizeof(struct TaskData);
                AddHead(&TaskTask->Task.tc_MemEntry, &TaskData->MemList);

                TaskTask->Task.tc_SPLower = &TaskStack->Stack[0];                           /* Initialize Task Stack pointers   */
                TaskTask->Task.tc_SPUpper = 
                TaskTask->Task.tc_SPReg   = &TaskStack->Stack[0] + STACK_SIZE;

                TaskTask->Task.tc_Node.ln_Name = &TaskData->Name[0];                        /* Assign name, type and priority   */
                TaskTask->Task.tc_Node.ln_Type = NT_TASK;
                TaskTask->Task.tc_Node.ln_Pri  = 5;

                AddTask(&TaskTask->Task, AnimationTask, 0);                                 /* Add Task to system list          */

                return(1);                                                                  /* Start of animation successful    */
                }

            FreeMem(TaskStack, sizeof(struct TaskStack));                                   /* Out of memory, free Stack        */
            }

        FreeMem(TaskTask, sizeof(struct TaskTask));                                         /* Out of memory, free Task         */
        }

    return(0);                                                                              /* Start of animation failed        */
    }




/***********************************************************************************************
 *                                                                                             *
 * AnimationTask - Basic animaiton task (for now, this simply displays a picture)              *
 *                                                                                             *
 ***********************************************************************************************/

void __saveds AnimationTask(void) {

struct DeBoxBase     *DeBoxBase;
struct IntuitionBase *IntuitionBase;
struct GfxBase       *GfxBase;
struct Library       *LowLevelBase;
struct Library       *CDUIBase;

struct MsgPort       *MsgPort;
struct Message       *Message, *ShutdownMsg = NULL;

struct BMInfo        *BMInfo;
struct BitMap        *BitMap;
struct NewScreen      NewScreen;
struct Screen        *Screen;

APTR                 OWB;
ULONG                ColorTable[258];
struct ColorSpec     ColorSpec[257];
LONG                 FadeValue = 0;

struct TagItem       TagList[] = {

    { SA_Colors,     0         },
    { SA_Overscan,   OSCAN_MAX },
    { TAG_END,       0         }
    };

LONG                 i, j;
LONG                 PortLong;

    if (MsgPort = CreateMsgPort()) {                                                            /* Create a message port      */

        MsgPort->mp_Node.ln_Name = "Startup Animation";                                         /* Animation MsgPort Name     */

        AddPort(MsgPort);                                                                       /* Add port to system         */

        if (LowLevelBase = OpenLibrary("lowlevel.library", 0)) {

          if (CDUIBase = OpenLibrary("cdui.library", 0)) {

            if (DeBoxBase = (struct DeBoxBase *)OpenLibrary("debox.library", 0)) {              /* Picture decompression      */

              if (IntuitionBase = (struct IntuitionBase *)OpenLibrary("intuition.library", 0)) {/* For RGB stuff              */

                if (GfxBase = (struct GfxBase *)OpenLibrary("graphics.library", 0)) {

                    SetChipRev(SETCHIPREV_BEST);                                                /* Go into AA mode            */

                    if (BMInfo = DecompBMInfo(NULL, NULL, &strapimage)) {                       /* Get Info about picture     */

                        if (BitMap = AllocBitMap(BMInfo->bmi_Width, BMInfo->bmi_Height,         /* Allocate bit map for anim. */
                            BMInfo->bmi_Depth, BMF_DISPLAYABLE, NULL)) {

                            if (!DecompBitMap(NULL, &strapimage, BitMap, NULL)) {               /* Decompress into bit map    */

                                NewScreen.LeftEdge      = 0;                                    /* Describe the anim screen   */
                                NewScreen.TopEdge       = 0;
                                NewScreen.Width         = BMInfo->bmi_Width;
                                NewScreen.Height        = BMInfo->bmi_Height;
                                NewScreen.Depth         = BMInfo->bmi_Depth;
                                NewScreen.ViewModes     = BMInfo->bmi_Modes;
                                NewScreen.Type          = CUSTOMSCREEN|CUSTOMBITMAP|SCREENQUIET;
                                NewScreen.DefaultTitle  = NULL;
                                NewScreen.Gadgets       = NULL;
                                NewScreen.CustomBitMap  = BitMap;

                                for (i=0,j=1; i!=BMInfo->bmi_NumColors; i++) {                  /* Build color tables         */

                                    ColorTable[j++] = (BMInfo->bmi_ColorMap[i] >> 8) & 0x0F;    /* Target colors              */
                                    ColorTable[j++] = (BMInfo->bmi_ColorMap[i] >> 4) & 0x0F;
                                    ColorTable[j++] =  BMInfo->bmi_ColorMap[i]       & 0x0F;

                                    ColorSpec[i].ColorIndex = i;                                /* Initial colors (all black) */
                                    ColorSpec[i].Red        =
                                    ColorSpec[i].Green      =
                                    ColorSpec[i].Blue       = 0;
                                    }

                                ColorTable[j]           = 0;                                    /* Finish tables              */
                                ColorTable[0]           = i<<16;
                                ColorSpec[i].ColorIndex = -1;
                                TagList[0].ti_Data      = (ULONG)&ColorSpec[0];

                                if (Screen = OpenScreenTagList(&NewScreen, &TagList[0])) {      /* Open a screen to our specs */

                                    FadeTo(16, &FadeValue, ColorTable,                          /* Fade to full brightness    */
                                           &Screen->ViewPort, GfxBase);

                                    while (!ShutdownMsg) {                                      /* Should we be running?      */

                                        if (Message = GetMsg(MsgPort)) {                        /* Is there a message for us? */

                                            if (Message->mn_Length == ANIMMSG_SHUTDOWN)         /* If we have a shutdown msg  */
                                                ShutdownMsg = Message;

                                            if (Message->mn_Length == ANIMMSG_BOOTING) {        /* Is a CD title now booting? */

                                                ReplyMsg(Message);                              /* Reply to "booting" message */

                                                /* A bootable disk has been inserted.  Do         */
                                                /* something visually different to indicate this. */

                                                FadeTo(8, &FadeValue, ColorTable,               /* Fade to half brightness    */
                                                       &Screen->ViewPort, GfxBase);
                                                FadeTo(16, &FadeValue, ColorTable,              /* Fade to full brightness    */
                                                       &Screen->ViewPort, GfxBase);
                                                }

                                            if (Message->mn_Length == ANIMMSG_HOLDOFFANIM) {    /* Hold off animation msg?    */

                                                ReplyMsg(Message);                              /* Reply to message           */

                                                /* The drive door has been closed.  Do            */
                                                /* something visually different to indicate this. */

                                                FadeTo(8, &FadeValue, ColorTable,               /* Fade to half brightness    */
                                                       &Screen->ViewPort, GfxBase);
                                                }

                                            if (Message->mn_Length == ANIMMSG_FALSEALARM) {     /* False alarm message?       */

                                                ReplyMsg(Message);                              /* Reply to message           */

                                                /* False alarm.  We can animate again.  */

                                                FadeTo(16, &FadeValue, ColorTable,              /* Fade to full brightness    */
                                                       &Screen->ViewPort, GfxBase);
                                                }
                                            }

                                        PortLong = ReadJoyPort(1);

                                        if (PortLong & JPF_BTN1) {

                                            FadeTo(0, &FadeValue, ColorTable,                   /* Fade to black              */
                                                   &Screen->ViewPort, GfxBase);
                                            PresentCDUI(CDUI_LANGUAGE_SELECTOR);
                                            }

                                        else if (PortLong & JPF_BTN2) {

                                            FadeTo(0, &FadeValue, ColorTable,                   /* Fade to black              */
                                                   &Screen->ViewPort, GfxBase);
                                            PresentCDUI(CDUI_NRAM_EDITOR);
                                            }

                                        /* Handle language selection */

                                        /* Animate screen */

                                        WaitTOF();
                                        }

                                    FadeTo(0, &FadeValue, ColorTable,                           /* Fade to black              */
                                           &Screen->ViewPort, GfxBase);

                                    OWB = SetFunction(IntuitionBase, -0xd2, (APTR)&FakeOWB);    /* Done showing screen        */
                                    CloseScreen(Screen);
                                    SetFunction(IntuitionBase, -0xd2, OWB);
                                    }
                                }

                            FreeBitMap(BitMap);                                                 /* Free animation bit map     */
                            }

                        FreeBMInfo(BMInfo);                                                     /* Free bit map information   */
                        }

                    CloseLibrary(GfxBase);                                                      /* Close graphics library     */
                    }

                CloseLibrary(IntuitionBase);                                                    /* Close intuition            */
                }

              CloseLibrary((struct Library *)DeBoxBase);                                        /* Close debox library        */
              }

            CloseLibrary(CDUIBase);
            }

          CloseLibrary(LowLevelBase);
          }

        RemPort(MsgPort);                                                                       /* Remove and delete MsgPort  */
        DeleteMsgPort(MsgPort);
        }

    Forbid();                                                                                   /* Forbid while expunging     */
    if (ShutdownMsg) ReplyMsg(ShutdownMsg);                                                     /* Signal that we are done    */
    RemTask(NULL);                                                                              /* Remove ourselves           */
    Permit();                                                                                   /* Let 'er rip                */
    Wait(0);
    }


@


1.14
log
@Preliminary rework for incorporating startup anim.
@
text
@d55 1
@


1.13
log
@not compensating for off-center screen anymore.
@
text
@a54 1
void          SendAnimMessage(int Msg);
a203 36



/*******************************************************************************
 *                                                                             *
 * SendAnimMessage - Send a message to animation task                          *
 *                                                                             *
 *******************************************************************************/

void SendAnimMessage(int Msg) {

struct MsgPort *AnimPort;
struct MsgPort *ReplyPort;
struct Message *ShutdownMsg;

    if (AnimPort = FindPort("Startup Animation")) {                             /* See if animation is running */

        if (ReplyPort = CreateMsgPort()) {                                      /* Create a message reply port */

            if (ShutdownMsg = (struct Message *)                                /* Allocate a message to send  */
                AllocMem(sizeof(struct Message), MEMF_PUBLIC | MEMF_CLEAR)) {

                ShutdownMsg->mn_Length    = Msg;                                /* Send this message to anim   */
                ShutdownMsg->mn_ReplyPort = ReplyPort;
                PutMsg(AnimPort, ShutdownMsg);

                WaitPort(ReplyPort);                                            /* Wait for message to return  */
                while(GetMsg(ReplyPort));

                FreeMem(ShutdownMsg, sizeof(struct Message));                   /* Free the message            */
                }

            DeleteMsgPort(ReplyPort);                                           /* Delete MsgPort              */
            }
        }
    }
@


1.12
log
@changed gamecontroller scan to port 1.
@
text
@d306 1
a306 1
                                NewScreen.LeftEdge      = -16;                                  /* Describe the anim screen   */
@


1.11
log
@Scan all joyports for input.
@
text
@d381 3
a383 1
                                        if ((PortLong = ReadJoyPort(-1)) & JPF_BTN1) {
@


1.10
log
@added back cdui calls.
@
text
@d381 1
a381 1
                                        if ((PortLong = ReadJoyPort(1)) & JPF_BTN1) {
d402 3
a441 1

@


1.9
log
@Added cdui code.
@
text
@d58 1
d286 1
a286 1
#if 0
d290 1
a290 1
#endif
d380 1
a380 1
#if 0
d394 1
a394 1
#endif
d422 1
a422 1
#if 0
d428 1
a428 1
#endif
@


1.8
log
@Reworked for sas 6.2
@
text
@d25 1
d33 1
d40 1
d43 3
a46 1

d115 24
d254 2
d268 1
d278 1
d285 2
d288 3
a290 1
        if (DeBoxBase = (struct DeBoxBase *)OpenLibrary("debox.library", 0)) {                  /* Picture decompression      */
d292 1
a292 1
            if (IntuitionBase = (struct IntuitionBase *)OpenLibrary("intuition.library", 0)) {  /* For RGB stuff              */
d335 2
a336 5
                                    for (i=0; i<=16; i+=2) {                                    /* Fade in the picture        */

                                        Fade(i, ColorTable, &Screen->ViewPort, GfxBase);
                                        WaitTOF();
                                        }
d352 4
a355 14
                                                for (i=8; i; i-=2) {                            /* Fade to black              */

                                                    Fade(i, ColorTable, &Screen->ViewPort,
                                                        GfxBase);
                                                    WaitTOF();
                                                    }

                                                for (; i<=16; i+=2) {                           /* Fade to full brightness    */

                                                    Fade(i, ColorTable, &Screen->ViewPort,
                                                        GfxBase);
                                                    WaitTOF();
                                                    }

d365 2
a366 6
                                                for (i=16; i>=8; i-=2) {                        /* Fade to half brightness    */

                                                    Fade(i, ColorTable, &Screen->ViewPort,
                                                        GfxBase);
                                                    WaitTOF();
                                                    }
d375 6
a380 1
                                                for (i=8; i<=16; i+=2) {                        /* Fade to full brightness    */
d382 4
a385 4
                                                    Fade(i, ColorTable, &Screen->ViewPort,
                                                        GfxBase);
                                                    WaitTOF();
                                                    }
d387 1
a387 1
                                                }
d389 3
d393 1
a393 1

a400 6
                                    for (; i>=0; i-=2) {                                        /* Fade to black              */

                                        Fade(i, ColorTable, &Screen->ViewPort, GfxBase);
                                        WaitTOF();
                                        }

d419 4
a422 1
            CloseLibrary((struct Library *)DeBoxBase);                                          /* Close debox library        */
d425 3
d433 1
a433 1
    ReplyMsg(ShutdownMsg);                                                                      /* Signal that we are done    */
@


1.7
log
@messages.
@
text
@d27 6
a33 1
#include <clib/graphics_protos.h>
a34 1
#include <clib/dos_protos.h>
a35 1
#include <clib/exec_protos.h>
d37 1
a37 3
#include <clib/alib_protos.h>
#include <cdtv/debox_protos.h>
#include <cdtv/debox_pragmas.h>
d44 1
a44 1
#define SysBase *((LONG *)4)
d397 1
a397 1
            CloseLibrary(DeBoxBase);                                                            /* Close debox library        */
@


1.6
log
@Removed some kprintfs.
@
text
@a12 5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <workbench/startup.h>
a16 5
#include <exec/interrupts.h>
#include <libraries/dos.h>
#include <libraries/expansion.h>
#include <libraries/expansionbase.h>
#include <intuition/preferences.h>
d20 4
a23 8
#include <hardware/intbits.h>
#include <hardware/custom.h>
#include <devices/input.h>
#include <devices/inputevent.h>
#include <devices/audio.h>
#include <devices/trackdisk.h>
#include <dos/filehandler.h>

d34 1
a34 1

d38 1
a38 5
#include <clib/alib_protos.h>
#include <intuition/intuitionbase.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <utility/tagitem.h>
a39 1
#include "cdstrap.h"
d49 1
a49 2
int           StartAnimation(struct V *V);
void          ShutDownAnimation();
d117 1
a117 1
int StartAnimation(struct V *V) {
d179 1
a179 41
 * ShutDownAnimation - Turn off animation to free up memory so we can          *
 *                     begin our application.                                  *
 *                                                                             *
 *******************************************************************************/

void ShutDownAnimation() {

struct MsgPort *AnimPort;
struct MsgPort *ReplyPort;
struct Message *ShutdownMsg;

    if (AnimPort = FindPort("Startup Animation")) {                             /* See if animation is running */

        if (ReplyPort = CreateMsgPort()) {                                      /* Create a message reply port */

            if (ShutdownMsg = (struct Message *)                                /* Allocate a message to send  */
                AllocMem(sizeof(struct Message), MEMF_PUBLIC | MEMF_CLEAR)) {

                ShutdownMsg->mn_Length    = 0;                                  /* Tell the animation to       */
                ShutdownMsg->mn_ReplyPort = ReplyPort;                          /* shutdown and clean up       */
                PutMsg(AnimPort, ShutdownMsg);

                /* You can use this time to process data while waiting for    */
                /* the animation to fade to black and free itself if you want */

                WaitPort(ReplyPort);                                            /* Wait for message to return  */
                while(GetMsg(ReplyPort));

                FreeMem(ShutdownMsg, sizeof(struct Message));                   /* Free the message            */
                }

            DeleteMsgPort(ReplyPort);                                           /* Delete MsgPort              */
            }
        }
    }


/*******************************************************************************
 *                                                                             *
 * InsertDiskAnimation - Tell animation that a disk has been inserted so that  *
 *                       the animation can do something to indicated this.     *
d183 1
a183 1
void InsertDiskAnimation() {
d196 2
a197 2
                ShutdownMsg->mn_Length    = 1;                                  /* Tell the animation to       */
                ShutdownMsg->mn_ReplyPort = ReplyPort;                          /* indicate disk recognition   */
d307 2
a308 1
                                            if (Message->mn_Length == 0) ShutdownMsg = Message; /* If we have a shutdown msg  */
d310 1
a310 1
                                            if (Message->mn_Length == 1) {                      /* Is a CD title now booting? */
d314 26
d346 3
d350 5
a354 1
                                                for (; i<=16; i+=2) {                           /* Fade to full brightness    */
a360 2
                                                /* A disk has been inserted, do something */
                                                /* visually different to indicate this.   */
d362 1
d372 1
a372 1
                                    for (i=16; i>=0; i-=2) {                                    /* Fade to black              */
@


1.5
log
@Changed to AA screen.
@
text
@d110 1
d118 1
a118 1
        } while (((i-1)/3)<(ColorTable[0]>>16));                                                /* Last color?          */
a320 3

                        kprintf("Width  = %ld\n", BMInfo->bmi_Width);
                        kprintf("Height = %ld\n", BMInfo->bmi_Height);
@


1.4
log
@Removed add and rem port functions.
@
text
@d18 3
d22 16
a37 1
#include <exec/memory.h>
d58 2
d64 1
a64 1
extern UBYTE * __far picture;
d73 1
d298 1
a299 1
    { SA_Colors,     0         },
d317 6
a322 1
                    if (BMInfo = DecompBMInfo(NULL, NULL, &picture)) {                          /* Get Info about picture     */
d327 1
a327 1
                            if (!DecompBitMap(NULL, &picture, BitMap, NULL)) {                  /* Decompress into bit map    */
d329 2
a330 2
                                NewScreen.LeftEdge      = 0;                                    /* Describe the anim screen   */
                                NewScreen.TopEdge       = -16;
d355 1
a355 1
                                TagList[1].ti_Data      = (ULONG)&ColorSpec[0];
@


1.3
log
@added function for telling animation task that a disk is being booted.
@
text
@a191 2
            AddPort(ReplyPort);                                                 /* Add port to system          */

d208 1
a208 2
            RemPort(ReplyPort);                                                 /* Remove and delete MsgPort   */
            DeleteMsgPort(ReplyPort);
a230 2
            AddPort(ReplyPort);                                                 /* Add port to system          */

d244 1
a244 2
            RemPort(ReplyPort);                                                 /* Remove and delete MsgPort   */
            DeleteMsgPort(ReplyPort);
d316 2
a317 2
                                    ColorTable[j++] = (BMInfo->bmi_ColorMap[i] >> 8) & 0x0F;
                                    ColorTable[j++] = (BMInfo->bmi_ColorMap[i] >> 4) & 0x0F;    /* Target colors              */
@


1.2
log
@Made close screen not open workbench screen.
@
text
@d154 3
a156 2
                TaskTask->Task.tc_Node.ln_Type = NT_TASK;                                   /* Assign name and type             */
                TaskTask->Task.tc_Node.ln_Name = &TaskData->Name[0];
d217 39
d355 14
d377 2
@


1.1
log
@Initial revision
@
text
@d46 1
d92 3
a94 3
        RGBTable[i++] = (ColorTable[i] * Level / 16) * 0x11111111;                              /* Set R, G, & B        */
        RGBTable[i++] = (ColorTable[i] * Level / 16) * 0x11111111; 
        RGBTable[i++] = (ColorTable[i] * Level / 16) * 0x11111111; 
d237 1
d292 1
a292 1
                                ColorTable[j]           = 0;                                    /* Finish tablesq             */
d331 3
a333 1
                                    CloseScreen(Screen);                                        /* Done showing screen        */
a334 1

@
