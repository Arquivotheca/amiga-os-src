head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.5
date     93.01.16.13.35.46;  author jerryh;  state Exp;
branches ;
next     1.4;

1.4
date     92.02.21.00.28.55;  author jesup;  state Exp;
branches ;
next     1.3;

1.3
date     92.02.17.00.06.40;  author jesup;  state Exp;
branches ;
next     1.2;

1.2
date     91.12.23.11.10.25;  author bryce;  state Exp;
branches ;
next     1.1;

1.1
date     91.12.22.22.58.54;  author bryce;  state Exp;
branches ;
next     ;


desc
@Secret "direct jump" mode code.  Sits instead of sigtask and filters out
packets for quick action.  Seek implemented.  Read not.
@


1.5
log
@cd.device instead of cdtv.device.
@
text
@************************************************************************
****************                                        ****************
****************        -=   CD FILE SYSTEM   =-        ****************
****************                                        ****************
************************************************************************
***                                                                  ***
***   Written by Bryce Nesbitt for Commodore International, Ltd.     ***
***   Copyright (C) 1991 Commodore-Amiga, Inc. All rights reserved.  ***
***                                                                  ***
***         Confidential and Proprietary System Source Code          ***
***                                                                  ***
************************************************************************

************************************************************************
***
*** "Quick IO" module.  Handles Read & Seek commands on context
*** of caller, saving at least two task switches per transfer.
***
************************************************************************

    INCLUDE "exec/types.i"
    INCLUDE "exec/execbase.i"
    INCLUDE "exec/tasks.i"
    INCLUDE "exec/ports.i"
    INCLUDE "exec/ables.i"
    INCLUDE "dos/dosextens.i"

    XDEF    _Quick_SigTask

    XREF    _QuickSeekFile
    XREF    _QuickReadFile

_LVOPermit  EQU -138        ;!@@#$@@&* Manx
_LVOSignal  EQU -324        ;!@@#$@@&* Manx
_intena     EQU $dff09a     ;!@@#$@@&* Manx

    INT_ABLES   

*
*   We set the filesystem's message port's SigTask to point
*   to our code, and set the port arrival action to "secret direct
*   jump".
*
*   This code is called under DISABLE.  On entry A0 points to our code.
*   A1 points to the message _port_, which is assumed to be embeded in
*   the Process structure of the FileSystem.  A6 points to Exec.
*
*   We have to locate the pointer to the message (it will be the
*   last one on the message list).  If we're the only message, and
*   the task is in state TC_WAIT, we can procede.
*
*   We will almost always pass the only message/task in wait test,
*   so we check packet types first.  Bailing out quickly is important;
*   we can take a few extra cycles in each quick packet type and still
*   be ahead.
*
*   !WARNING! You may have to preserve A6 for calling Manx functions.
*   Some of the assembly functions in the Manx modules seem to assume
*   you can destroy A6!
*
*   !WARNING! PutMsg will do ENABLE after this returns!
*
        ;[A0-DosPacket *]
        ;[A1-MsgPort *]
qk_ACTION_READ: move.l  MP_MSGLIST+LH_TAILPRED(a1),d1    ;Last Msg is ours
        cmp.l   MP_MSGLIST+LH_HEAD(a1),d1    ;Any other msgs at
        bne.s   qk_signalD           ;port? Yes=bail...
        cmp.b   #TS_WAIT,TC_STATE-pr_MsgPort(a1) ;Task active?
        bne.s   qk_signalD           ;Yes=bail...

        ;[A0-Packet *]
        ;[A1-MsgPort *]
        ;[D1-Message]
        FORBID
        ENABLE
        movem.l a1/a4,-(sp)

* Now we need to figure out if the data is in the cache and finished.
* This must be as fast as possible - check SourLock last, as it almost
* never will fail.
* Must track changes to cdio.c! 
        move.l  TC_Userdata-pr_MsgPort(a1),a4    ;Manx global data
        move.l  a0,-(sp)             ;DosPacket *
        jsr _QuickReadFile
        addq.w  #4,sp
        movem.l (sp)+,a1/a4
        tst.l   d0               ;did it hit?
        beq.s   qk_signalE           ;failure (a1 valid)
        DISABLE
        JMP _LVOPermit(a6)  ;exit & take your task switch

* Putting this in the middle lets us use bcc.s

_Quick_SigTask: move.l  MP_MSGLIST+LH_TAILPRED(a1),a0   ;Last Msg is ours   
        move.l  LN_NAME(a0),a0          ;(DosPacket *)
        move.l  dp_Type(a0),d0          ;Randell says "long"
        moveq   #ACTION_READ,d1
        cmp.l   d1,d0
        beq.s   qk_ACTION_READ      
        cmp.l   #ACTION_SEEK,d0
        beq.s   qk_ACTION_SEEK      

qk_signalD: ;prevent task switches, then ENABLE to prevent MIDI problems
        FORBID
        ENABLE

qk_signalE: ;must have already Forbid/Enabled
        MOVE.B  MP_SIGBIT(A1),D1
        SUB.W   #pr_MsgPort,A1  ;Recover our task address
        MOVEQ.L #0,D0
        BSET.L  D1,D0
        JSR _LVOSignal(a6)  ;(A1,D0)
        DISABLE
        JMP _LVOPermit(a6)  ;exit & take your task switch

        ;[A0-DosPacket *]
        ;[A1-MsgPort *]
qk_ACTION_SEEK: ; move.w    #$0f00,$dff180  ;Flash Red

        move.l  MP_MSGLIST+LH_TAILPRED(a1),d1    ;Last Msg is ours
        cmp.l   MP_MSGLIST+LH_HEAD(a1),d1    ;Any other msgs at
        bne.s   qk_signalD           ;port? Yes=bail...
        cmp.b   #TS_WAIT,TC_STATE-pr_MsgPort(a1) ;Task active?
        bne.s   qk_signalD           ;Yes=bail...

        ;[A0-Packet *]
        ;[A1-MsgPort *]
        ;[D1-Message]
        FORBID
        ENABLE
        movem.l a1/a4,-(sp)
        move.l  TC_Userdata-pr_MsgPort(a1),a4    ;Manx global data
        move.l  a0,-(sp)             ;DosPacket *
        jsr _QuickSeekFile
        addq.l  #4,sp
        movem.l (sp)+,a1/a4
        tst.l   d0
        beq.s   qk_signalE          ; failed! in WaitIO!
        DISABLE
        JMP _LVOPermit(a6)  ;exit & take your task switch
@


1.4
log
@No need to save/restore a6
Seek can fail!
@
text
@d3 1
a3 1
****************        -=  CDTV FILE SYSTEM  =-        ****************
d16 2
a17 2
***	"Quick IO" module.  Handles Read & Seek commands on context
***	of caller, saving at least two task switches per transfer.
d21 56
a76 56
	INCLUDE	"exec/types.i"
	INCLUDE "exec/execbase.i"
	INCLUDE	"exec/tasks.i"
	INCLUDE	"exec/ports.i"
	INCLUDE "exec/ables.i"
	INCLUDE	"dos/dosextens.i"

	XDEF	_Quick_SigTask

	XREF	_QuickSeekFile
	XREF	_QuickReadFile

_LVOPermit	EQU	-138		;!@@#$@@&* Manx
_LVOSignal	EQU	-324		;!@@#$@@&* Manx
_intena		EQU	$dff09a		;!@@#$@@&* Manx

	INT_ABLES	

*
*	We set the filesystem's message port's SigTask to point
*	to our code, and set the port arrival action to "secret direct
*	jump".
*
*	This code is called under DISABLE.  On entry A0 points to our code.
*	A1 points to the message _port_, which is assumed to be embeded in
*	the Process structure of the FileSystem.  A6 points to Exec.
*
*	We have to locate the pointer to the message (it will be the
*	last one on the message list).  If we're the only message, and
*	the task is in state TC_WAIT, we can procede.
*
*	We will almost always pass the only message/task in wait test,
*	so we check packet types first.  Bailing out quickly is important;
*	we can take a few extra cycles in each quick packet type and still
*	be ahead.
*
*	!WARNING! You may have to preserve A6 for calling Manx functions.
*	Some of the assembly functions in the Manx modules seem to assume
*	you can destroy A6!
*
*	!WARNING! PutMsg will do ENABLE after this returns!
*
		;[A0-DosPacket *]
		;[A1-MsgPort *]
qk_ACTION_READ:	move.l	MP_MSGLIST+LH_TAILPRED(a1),d1	 ;Last Msg is ours
		cmp.l	MP_MSGLIST+LH_HEAD(a1),d1	 ;Any other msgs at
		bne.s	qk_signalD			 ;port? Yes=bail...
		cmp.b	#TS_WAIT,TC_STATE-pr_MsgPort(a1) ;Task active?
		bne.s	qk_signalD			 ;Yes=bail...

		;[A0-Packet *]
		;[A1-MsgPort *]
		;[D1-Message]
		FORBID
		ENABLE
		movem.l	a1/a4,-(sp)
d82 9
a90 9
		move.l	TC_Userdata-pr_MsgPort(a1),a4	 ;Manx global data
		move.l	a0,-(sp)			 ;DosPacket *
		jsr	_QuickReadFile
		addq.w	#4,sp
		movem.l	(sp)+,a1/a4
		tst.l	d0				 ;did it hit?
		beq.s	qk_signalE			 ;failure (a1 valid)
		DISABLE
		JMP	_LVOPermit(a6)	;exit & take your task switch
d94 47
a140 47
_Quick_SigTask:	move.l	MP_MSGLIST+LH_TAILPRED(a1),a0	;Last Msg is ours	
		move.l	LN_NAME(a0),a0			;(DosPacket *)
		move.l	dp_Type(a0),d0			;Randell says "long"
		moveq	#ACTION_READ,d1
		cmp.l	d1,d0
		beq.s	qk_ACTION_READ		
		cmp.l	#ACTION_SEEK,d0
		beq.s	qk_ACTION_SEEK		

qk_signalD:	;prevent task switches, then ENABLE to prevent MIDI problems
		FORBID
		ENABLE

qk_signalE:	;must have already Forbid/Enabled
		MOVE.B	MP_SIGBIT(A1),D1
		SUB.W	#pr_MsgPort,A1	;Recover our task address
		MOVEQ.L #0,D0
		BSET.L  D1,D0
		JSR	_LVOSignal(a6)	;(A1,D0)
		DISABLE
		JMP	_LVOPermit(a6)	;exit & take your task switch

		;[A0-DosPacket *]
		;[A1-MsgPort *]
qk_ACTION_SEEK:	; move.w	#$0f00,$dff180	;Flash Red

		move.l	MP_MSGLIST+LH_TAILPRED(a1),d1	 ;Last Msg is ours
		cmp.l	MP_MSGLIST+LH_HEAD(a1),d1	 ;Any other msgs at
		bne.s	qk_signalD			 ;port? Yes=bail...
		cmp.b	#TS_WAIT,TC_STATE-pr_MsgPort(a1) ;Task active?
		bne.s	qk_signalD			 ;Yes=bail...

		;[A0-Packet *]
		;[A1-MsgPort *]
		;[D1-Message]
		FORBID
		ENABLE
		movem.l	a1/a4,-(sp)
		move.l	TC_Userdata-pr_MsgPort(a1),a4	 ;Manx global data
		move.l	a0,-(sp)			 ;DosPacket *
		jsr	_QuickSeekFile
		addq.l	#4,sp
		movem.l	(sp)+,a1/a4
		tst.l	d0
		beq.s	qk_signalE			; failed! in WaitIO!
		DISABLE
		JMP	_LVOPermit(a6)	;exit & take your task switch
@


1.3
log
@Added QuickRead
Bryce left a WHOPPER - he was underflowing the Disable count!
turned off debugging
@
text
@d76 1
a76 1
		movem.l	a1/a4/a6,-(sp)		; a6 probably not needed
d86 1
a86 1
		movem.l	(sp)+,a1/a4/a6
a133 2
		move.l	d1,a1				 ;Message *
		REMOVE					 ;Same as GetMsg()
d137 2
@


1.2
log
@Use longword compare instead of matching the rest of CDFS.
@
text
@d31 1
d61 33
a103 1
		MOVE.B	MP_SIGBIT(A1),D1
d106 3
d113 1
a115 8

		;[A0-DosPacket *]
		;[A1-MsgPort *]
qk_ACTION_READ:	move.w	#$000f,$dff180	;Flash Blue
		bra.s	qk_signalD



d118 1
a118 1
qk_ACTION_SEEK:	move.w	#$0f00,$dff180	;Flash Red
d139 1
@


1.1
log
@Initial revision
@
text
@d44 4
a47 2
*	A1 points to the message _port_.  A6 points to Exec.  We
*	have to locate the pointer to the message (it will be the
d62 3
a64 2
		move.w	dp_Type+2(a0),d0		;lower word
		cmp.w	#ACTION_READ,d0
d66 1
a66 1
		cmp.w	#ACTION_SEEK,d0
@
