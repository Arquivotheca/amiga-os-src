head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.5
date     93.02.22.17.28.41;  author jesup;  state Exp;
branches ;
next     1.4;

1.4
date     93.01.16.13.36.41;  author jerryh;  state Exp;
branches ;
next     1.3;

1.3
date     92.06.30.19.41.24;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.17.00.05.52;  author jesup;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.16.09.19.16;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@added stub for replypkt
@
text
@************************************************************************
****************                                        ****************
****************        -=   CD FILE SYSTEM   =-        ****************
****************                                        ****************
************************************************************************
***                                                                  ***
***   Written by Carl Sassenrath for Commodore International, Ltd.   ***
***   Copyright (C) 1990 Commodore-Amiga, Inc. All rights reserved.  ***                                                                  ***
***                                                                  ***
***         Confidential and Proprietary System Source Code          ***
***                                                                  ***
************************************************************************
***                                                                  ***
***                             History                              ***
***                             -------                              ***
***                                                                  ***
***   21.00 24OCT90 Carl Sassenrath      Beta 1.5 Release            ***
***                                                                  ***
************************************************************************

    include "exec/types.i"
    include "exec/memory.i"
    include "exec/io.i"
    include "stddefs.i"
    include "libraries/dosextens.i"
    INCLUDE "expansion.lvo"

    public  _DebugLevel
    public  _ExpBase
    public  _DOSBase

***********************************************************
**
** LIBRARY
**
***********************************************************

************************************************************************
***
***  MonthDays Table
***
*** Given a month, this table converts to the total number
*** of days upto the first day of that month.  These are
*** non-leap values and must be adjusted by the main algorithm.
***
***    Example: March returns 59 days (non-leap)
***
************************************************************************
MonthDays:
    ;------     31,28,31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    dc.w    0,0,31,59,90,120,151,181,212,243,273,304,334,365
    ds.w    0

************************************************************************
***
***  MakeDate
***
*** Make a DOS date-stamp from an ISO directory date array.
*** Adjust properly for leap years and leap centuries.
*** If the year is 0, assume that the ISO date array is not
*** valid and create an invalid DOS date.
***
************************************************************************
    public  _MakeDate
_MakeDate:
        save    d2/d3
        move.l  12(sp),a0   ; DOS date stamp
        move.l  16(sp),a1   ; ISO date array

    ;------ Clear DOS date stamp structure
        clear   d2
        move.l  a0,d0       ; save pointer
        move.l  d2,(a0)+
        move.l  d2,(a0)+
        move.l  d2,(a0)+
        move.l  d0,a0       ; restore pointer

    ;------ Get ISO year:
        move.b  (a1)+,d2    ; year from 1900
        beq.s   9$      ; not valid

    ;------ Is it a leap year?
        move.l  d2,d0
        moveq   #3,d1
        subq.l  #1,d0       
        and.b   d1,d0
        cmp.b   d1,d0
        sne.b   d3      ; leap flag
        
    ;------ Check for leap century!??!?!?!!!!

    ;------ Convert years to days:
        move.l  d2,d0
        sub.l   #78,d0      ; base year
        mulu    #365,d0     ; works for 179 years
        sub.l   #76,d2      ; last leap year before base
        lsr.l   #2,d2       ; /4 = number of leaps since base
        add.l   d2,d0

    ;------ Convert months to days:
        move.b  (a1)+,d2    ; month (upper 24 still clear)
        beq.s   9$      ; not valid
        move.l  d2,d1
        lsl.l   #1,d1
        move.w  MonthDays(pc,d1.w),d1

    ;------ Check and handle Feb 28:
        cmp.b   #3,d2       ; before March?
        bge.s   4$      ; no, count leap
        tst.b   d3      ; leap flag?
        beq.s   4$      ; not leap year anyway
        subq.l  #1,d1       ; too early in year to leap
4$:     add.l   d1,d0

    ;------ Add day of month:
        move.b  (a1)+,d2    ; day (upper 24 still clear)
        add.l   d2,d0
        move.l  d0,(a0)+    ; store DOS days

    ;------ Get hour and minute:
        clear   d0
        move.b  (a1)+,d0    ; hour
        mulu    #60,d0      ; to minutes
        move.b  (a1)+,d2    ; min (upper 24 still clear)
        add.l   d2,d0
        move.l  d0,(a0)+    ; store DOS mins

    ;------ Calc ticks:
        clear   d0
        move.b  (a1)+,d0    ; second
        mulu    #50,d0      ; to ticks
        move.l  d0,(a0)+    ; store DOS mins

9$:     restore d2/d3
        rts

*   Mult(time[0]-78,365) +  /* years */
*     ((time[0]-76) >> 2) +   /* leaps */
*       MonthDays[time[1]] +    /* months */
*         ((leap&&time[1]<3)?-1:0) + /* not yet leap month */
*       + time[2];      /* day of month */
*   fib->fib_Date.ds_Minute = Mult(time[3],24) + time[4];   */
*   fib->fib_Date.ds_Tick = Mult(time[5],TICKS_PER_SECOND); */

************************************************************************
***
***  MakeDate(dirdate,pvddate)
***
*** Converts an ISO PVD date to that which can be used by
*** the MakeDate function.  If the year is zero a FALSE
*** is returned and the date should be considered invalid.
***
************************************************************************
    public  _ConvertDate
_ConvertDate:
        save    d2/a2
        move.l  12(sp),a2   ; ISO dir date form
        move.l  16(sp),a1   ; ISO PVD date str pointer

    ;------ Convert year:
        moveq   #4,d1       ; 4 digit number
        bsr CharToDec   ; D1,A1
        tst.w   d0      ; should not be zero
        beq.s   9$
        sub.w   #1900,d0    ; get year as offset
        move.b  d0,(a2)+

    ;------ Convert month,day,hour,min,sec:
        moveq   #4,d2       ; dbf 5 over all
2$:     moveq   #2,d1       ; two digit numbers
        bsr CharToDec   ; D1,A1
        move.b  d0,(a2)+
        dbf d2,2$

        clr.b   (a2)+       ; GMT offset

9$      restore d2/a2
        rts

************************************************************************
***
***  CompDate
***
*** Compare two DOS date stamps for equality. Return TRUE if same.
***
***********************************************************************/
    public  _CompDate
_CompDate:
        movem.l 4(sp),a0/a1
        clear   d0
        cmp.l   (a0)+,(a1)+
        bne.s   9$
        cmp.l   (a0)+,(a1)+
        bne.s   9$
        cmp.l   (a0)+,(a1)+
        bne.s   9$
        moveq.l #-1,d0
9$:     rts

************************************************************************
***
***  ConvertArgs
***
*** Converts necessary packet args to APTRs from BPTRs.
*** In C:
***     PktArg1 = pkt->dp_Arg1 << ((flags & ARG1) ? 2 : 0);
***
************************************************************************
    public  _ConvertArgs
    public  _Packet,_PktArg1,_PktArg2,_PktArg3,_PktArg4
_ConvertArgs:
    move.l  4(sp),d0        ; conversion flags

    move.l  _Packet,a0      ; global
    add #dp_Arg1,a0     ; set to ARG1

    move.l  (a0)+,d1        ; get Arg1
    lsr #1,d0           ; check first bit
    bcc.s   1$          ; not set
    lsl.l   #2,d1           ; convert to APTR
1$  move.l  d1,_PktArg1     ; save it

    move.l  (a0)+,d1        ; get Arg2
    lsr #1,d0           ; check first bit
    bcc.s   2$          ; not set
    lsl.l   #2,d1           ; convert to APTR
2$  move.l  d1,_PktArg2     ; save it

    move.l  (a0)+,d1        ; get Arg3
    lsr #1,d0           ; check first bit
    bcc.s   3$          ; not set
    lsl.l   #2,d1           ; convert to APTR
3$  move.l  d1,_PktArg3     ; save it

    move.l  (a0)+,d1        ; get Arg4
    lsr #1,d0           ; check first bit
    bcc.s   4$          ; not set
    lsl.l   #2,d1           ; convert to APTR
4$  move.l  d1,_PktArg4     ; save it

    rts

************************************************************************
***
***  CharToDec
***
*** Take N chars of a string and convert to decimal number.
*** Used for the ISO date conversion above.
***
*** Input:
***     D1 == Number of chars
***     A1 -> String
*** Return:
***     D0 == Decimal value
***     A1 -> New string pointer
***
************************************************************************
CharToDec:
        save    d2
        clear   d0
        clear   d2
        bra.s   2$
1$      mulu    #10,d0
        move.b  (a1)+,d2    ; get char
        sub.b   #'0',d2     ; make into num
        add.l   d2,d0
2$      dbf d1,1$
        restore d2
        rts         ; result in D0, A2 updated  


*** Mult -- 16 bit multiply
    public _Mult
_Mult:
        move.l  4(sp),d0
        move.l  8(sp),d1
        muls    d1,d0
        rts

    public _CopyMem     ;source,target,count
_CopyMem:
        move.l  4(sp),a0
        move.l  8(sp),a1
        move.l  12(sp),d0
        exec    CopyMem
        rts
*
* MUST return cleared memory! (at least for COMPLEX_CACHE) - REJ
* Removed +8 since we no longer have a DMA bug!  FIX!!!???
*
    public  _MakeVector
_MakeVector:
        move.l  d2,-(sp)
        move.l  8(sp),d0
        move.l  #MEMF_CLEAR|MEMF_PUBLIC,d1
        addq.l  #4,d0
* FIX!!!!!! remove +8!!!!!
        addq.l  #8,d0       ; V23.1 (for DMA overreading...)
        move.l  d0,d2
        exec    AllocMem
        tst.l   d0
        beq.s   1$
        move.l  d0,a0
        move.l  d2,(a0)+    ; save size
        move.l  a0,d0
1$      move.l  (sp)+,d2
        rts

    public  _FreeVector
_FreeVector:
        move.l  4(sp),d0
        beq.s   1$
        move.l  d0,a1
        move.l  -(a1),d0    ; size of block
        exec    FreeMem
1$:     rts

    public  _AvailMem
_AvailMem:
        move.l  4(sp),d1
        exec    AvailMem
        rts

    public  _ClearMem
_ClearMem:              ; for small mem areas
        move.l  4(sp),a0
        move.l  8(sp),d0
        moveq.l #0,d1
        bra.s   2$
1$:     move.b  d1,(a0)+
2$:     dbf d0,1$
        rts

    public  _Forbid
_Forbid:
        exec    Forbid
        rts

    public  _Permit
_Permit:
        exec    Permit
        rts

    public  _Supervisor
_Supervisor:
        exec    Supervisor
        rts

    public  _AllocSignal
_AllocSignal:
        move.l  4(sp),d0
        exec    AllocSignal
        rts

    public  _FreeSignal
_FreeSignal:
        move.l  4(sp),d0
        exec    FreeSignal
        rts

    public  _OpenDevice
_OpenDevice:
        move.l  4(sp),a0
        movem.l 8(sp),d0/a1
        move.l  16(sp),d1
        exec    OpenDevice
        rts

    public  _CloseDevice
_CloseDevice:
        move.l  4(sp),a1
        exec    CloseDevice
        rts

    public  _FindTask
_FindTask:
        move.l  4(sp),a1
        exec    FindTask
        rts

    public  _FindPort
_FindPort:
        move.l  4(sp),a1
        exec    FindPort
        rts

    public  _WaitPort
_WaitPort:
        move.l  4(sp),a0
        exec    WaitPort
        rts

    public  _NewList
_NewList:
        move.l  4(sp),a1
        NEWLIST a1
        rts

    public  _Enqueue
_Enqueue:
        movem.l 4(sp),a0/a1
        exec    Enqueue
        rts

    public  _Remove
_Remove:    move.l  4(sp),a1
        REMOVE
        rts

    public  _PutMsg
_PutMsg:
        movem.l 4(sp),a0/a1
        exec    PutMsg
        rts

    public  _GetMsg
_GetMsg:
        move.l  4(sp),a0
        exec    GetMsg
        rts

    public  _ReplyMsg
_ReplyMsg:
        move.l  4(sp),a1
        exec    ReplyMsg
        rts

    public  _DoIO
_DoIO:
        move.l  4(sp),a1
        exec    DoIO
        rts

    public  _CheckIO
_CheckIO:
        move.l  4(sp),a1
        exec    CheckIO
        rts

    public  _AbortIO
_AbortIO:
        move.l  4(sp),a1
        exec    AbortIO
        rts

    public  _WaitIO
_WaitIO:
        move.l  4(sp),a1
        exec    WaitIO
        rts

    public  _DoDevIO
    public  _DevIOReq
_DoDevIO:
        lea 4(sp),a0
        lea _DevIOReq,a1
        move.l  (a0)+,d0
        move.w  d0,IO_COMMAND(a1)
        move.l  (a0)+,IO_OFFSET(a1)
        move.l  (a0)+,IO_LENGTH(a1)
        move.l  (a0)+,IO_DATA(a1)
        exec    DoIO
        rts

    public  _StartDevIO
_StartDevIO:
        lea 4(sp),a0
        move.l  (a0)+,a1
        move.l  (a0)+,d0
        move.w  d0,IO_COMMAND(a1)
        move.l  (a0)+,IO_OFFSET(a1)
        move.l  (a0)+,IO_LENGTH(a1)
        move.l  (a0)+,IO_DATA(a1)
        exec    SendIO
        rts

    public  _SendIO
_SendIO:
        move.l  4(sp),a1
        exec    SendIO
        rts

    public  _Wait
_Wait:
        move.l  4(sp),d0
        exec    Wait
        rts

    public  _Signal
_Signal:
        move.l  4(sp),a1
        move.l  8(sp),d0
        exec    Signal
        rts

    public  _FetchA4
_FetchA4:
        move.l  a4,d0
        rts

    public  _AddDosNode
_AddDosNode:
        movem.l 4(sp),d0/d1/a0
        push    a6
        move.l  _ExpBase,a6
        jsr _LVOAddDosNode(a6)
        pop a6
        rts

_LVOCreateProc  equ -138
_LVOLoadSeg equ -150
_LVOReplyPkt equ -258

    public  _CreateProc
_CreateProc:
        save    d3/d4/a6
        movem.l 16(sp),d1-d4
        move.l  _DOSBase,a6
        jsr _LVOCreateProc(a6)
        restore d3/d4/a6
        rts

    public  _LoadSeg
_LoadSeg:
        move.l 4(sp),d1
        push    a6
        move.l  _DOSBase,a6
        jsr _LVOLoadSeg(a6)
        pop a6
        rts

    public  _ReplyPkt
_ReplyPkt:
	save	d2/d3
	movem.l 12(sp),d1-d3
	move.l	_DOSBase,a6
	jsr	_LVOReplyPkt(a6)
	restore d2/d3
	rts

***********************************************************************
***********************************************************************
***********************************************************************

    public  _PutChar
_PutChar:
        move.l  4(sp),d0
rawPutChar: movem.l d0/a0/a6,-(sp)
        move.l  4,a6
        jsr LVO.RawPutChar(a6)
        movem.l (sp)+,d0/a0/a6
        rts

    public Print        a0->format  a1->data
Print:      move.l  a2,-(sp)
        lea rawPutChar,a2
        exec    RawDoFmt
        move.l  (sp)+,a2
        rts

    public  _Debug1
_Debug1:
        moveq.l #1,d0
        bra.s   Debug

    public  _Debug2
_Debug2:
        moveq.l #2,d0
        bra.s   Debug

    public  _Debug3
_Debug3:
        moveq.l #3,d0
        bra.s   Debug

    public  _Debug4
_Debug4:
        moveq.l #4,d0

Debug:
        move.l  _DebugLevel,d1  ; V34.4
        cmp.w   d1,d0       ; V34.4 lower word only!
        bgt.s   dexit

    public  _Debug0
_Debug0:
        move.l  4(sp),a0    ; format
        lea 8(sp),a1    ; data
        bsr Print
dexit:      rts


    XDEF    EndCode
EndCode
        dc.w    0
    END

@


1.4
log
@cd.device instead of cdtv.device.
@
text
@d512 1
d525 1
a525 1
        movem.l 4(sp),d1
d531 9
@


1.3
log
@fixed broken error path in ConvertDate that was crashing
the AB20 disks
@
text
@d3 1
a3 1
****************        -=  CDTV FILE SYSTEM  =-        ****************
d21 6
a26 6
	include	"exec/types.i"
	include	"exec/memory.i"
	include	"exec/io.i"
	include "stddefs.i"
	include "libraries/dosextens.i"
	INCLUDE	"expansion.lvo"
d28 3
a30 3
	public	_DebugLevel
	public	_ExpBase
	public	_DOSBase
d42 3
a44 3
***	Given a month, this table converts to the total number
***	of days upto the first day of that month.  These are
***	non-leap values and must be adjusted by the main algorithm.
d46 1
a46 1
***	   Example: March returns 59 days (non-leap)
d50 3
a52 3
	;------	    31,28,31, 30, 31, 30, 31, 31, 30, 31, 30, 31
	dc.w	0,0,31,59,90,120,151,181,212,243,273,304,334,365
	ds.w	0
d58 4
a61 4
***	Make a DOS date-stamp from an ISO directory date array.
***	Adjust properly for leap years and leap centuries.
***	If the year is 0, assume that the ISO date array is not
***	valid and create an invalid DOS date.
d64 1
a64 1
	public	_MakeDate
d66 3
a68 3
		save	d2/d3
		move.l	12(sp),a0	; DOS date stamp
		move.l	16(sp),a1	; ISO date array
d70 74
a143 74
	;------	Clear DOS date stamp structure
		clear	d2
		move.l	a0,d0		; save pointer
		move.l	d2,(a0)+
		move.l	d2,(a0)+
		move.l	d2,(a0)+
		move.l	d0,a0		; restore pointer

	;------	Get ISO year:
		move.b	(a1)+,d2	; year from 1900
		beq.s	9$		; not valid

	;------	Is it a leap year?
		move.l	d2,d0
		moveq	#3,d1
		subq.l	#1,d0		
		and.b	d1,d0
		cmp.b	d1,d0
		sne.b	d3		; leap flag
		
	;------	Check for leap century!??!?!?!!!!

	;------	Convert years to days:
		move.l	d2,d0
		sub.l	#78,d0		; base year
		mulu	#365,d0		; works for 179 years
		sub.l	#76,d2		; last leap year before base
		lsr.l	#2,d2		; /4 = number of leaps since base
		add.l	d2,d0

	;------	Convert months to days:
		move.b	(a1)+,d2	; month (upper 24 still clear)
		beq.s	9$		; not valid
		move.l	d2,d1
		lsl.l	#1,d1
		move.w	MonthDays(pc,d1.w),d1

	;------	Check and handle Feb 28:
		cmp.b	#3,d2		; before March?
		bge.s	4$		; no, count leap
		tst.b	d3		; leap flag?
		beq.s	4$		; not leap year anyway
		subq.l	#1,d1		; too early in year to leap
4$:		add.l	d1,d0

	;------	Add day of month:
		move.b	(a1)+,d2	; day (upper 24 still clear)
		add.l	d2,d0
		move.l	d0,(a0)+	; store DOS days

	;------	Get hour and minute:
		clear	d0
		move.b	(a1)+,d0	; hour
		mulu	#60,d0		; to minutes
		move.b	(a1)+,d2	; min (upper 24 still clear)
		add.l	d2,d0
		move.l	d0,(a0)+	; store DOS mins

	;------	Calc ticks:
		clear	d0
		move.b	(a1)+,d0	; second
		mulu	#50,d0		; to ticks
		move.l	d0,(a0)+	; store DOS mins

9$:		restore	d2/d3
		rts

*	Mult(time[0]-78,365) +	/* years */
*	  ((time[0]-76) >> 2) +   /* leaps */
*	    MonthDays[time[1]] +	/* months */
*	      ((leap&&time[1]<3)?-1:0) + /* not yet leap month */
*		+ time[2];		/* day of month */
*	fib->fib_Date.ds_Minute = Mult(time[3],24) + time[4];	*/
*	fib->fib_Date.ds_Tick = Mult(time[5],TICKS_PER_SECOND);	*/
d149 3
a151 3
***	Converts an ISO PVD date to that which can be used by
***	the MakeDate function.  If the year is zero a FALSE
***	is returned and the date should be considered invalid.
d154 1
a154 1
	public	_ConvertDate
d156 3
a158 3
		save	d2/a2
		move.l	12(sp),a2	; ISO dir date form
		move.l	16(sp),a1	; ISO PVD date str pointer
d160 19
a178 19
	;------	Convert year:
		moveq	#4,d1		; 4 digit number
		bsr	CharToDec	; D1,A1
		tst.w	d0		; should not be zero
		beq.s	9$
		sub.w	#1900,d0	; get year as offset
		move.b	d0,(a2)+

	;------	Convert month,day,hour,min,sec:
		moveq	#4,d2		; dbf 5 over all
2$:		moveq	#2,d1		; two digit numbers
		bsr	CharToDec	; D1,A1
		move.b	d0,(a2)+
		dbf	d2,2$

		clr.b	(a2)+		; GMT offset

9$		restore	d2/a2
		rts
d184 1
a184 1
***	Compare two DOS date stamps for equality. Return TRUE if same.
d187 1
a187 1
	public	_CompDate
d189 10
a198 10
		movem.l	4(sp),a0/a1
		clear	d0
		cmp.l	(a0)+,(a1)+
		bne.s	9$
		cmp.l	(a0)+,(a1)+
		bne.s	9$
		cmp.l	(a0)+,(a1)+
		bne.s	9$
		moveq.l	#-1,d0
9$:		rts
d204 3
a206 3
***	Converts necessary packet args to APTRs from BPTRs.
***	In C:
***		PktArg1 = pkt->dp_Arg1 << ((flags & ARG1) ? 2 : 0);
d209 2
a210 2
	public	_ConvertArgs
	public	_Packet,_PktArg1,_PktArg2,_PktArg3,_PktArg4
d212 1
a212 1
	move.l	4(sp),d0		; conversion flags
d214 2
a215 2
	move.l	_Packet,a0		; global
	add	#dp_Arg1,a0		; set to ARG1
d217 23
a239 23
	move.l	(a0)+,d1		; get Arg1
	lsr	#1,d0			; check first bit
	bcc.s	1$			; not set
	lsl.l	#2,d1			; convert to APTR
1$	move.l	d1,_PktArg1		; save it

	move.l	(a0)+,d1		; get Arg2
	lsr	#1,d0			; check first bit
	bcc.s	2$			; not set
	lsl.l	#2,d1			; convert to APTR
2$	move.l	d1,_PktArg2		; save it

	move.l	(a0)+,d1		; get Arg3
	lsr	#1,d0			; check first bit
	bcc.s	3$			; not set
	lsl.l	#2,d1			; convert to APTR
3$	move.l	d1,_PktArg3		; save it

	move.l	(a0)+,d1		; get Arg4
	lsr	#1,d0			; check first bit
	bcc.s	4$			; not set
	lsl.l	#2,d1			; convert to APTR
4$	move.l	d1,_PktArg4		; save it
d241 1
a241 1
	rts
d247 2
a248 2
***	Take N chars of a string and convert to decimal number.
***	Used for the ISO date conversion above.
d250 6
a255 6
***	Input:
***		D1 == Number of chars
***		A1 -> String
***	Return:
***		D0 == Decimal value
***		A1 -> New string pointer
d259 11
a269 11
		save	d2
		clear	d0
		clear	d2
		bra.s	2$
1$		mulu	#10,d0
		move.b	(a1)+,d2	; get char
		sub.b	#'0',d2		; make into num
		add.l	d2,d0
2$		dbf	d1,1$
		restore	d2
		rts			; result in D0, A2 updated	
d273 1
a273 1
	public _Mult
d275 4
a278 4
		move.l	4(sp),d0
		move.l	8(sp),d1
		muls	d1,d0
		rts
d280 1
a280 1
	public _CopyMem		;source,target,count
d282 5
a286 5
		move.l	4(sp),a0
		move.l	8(sp),a1
		move.l	12(sp),d0
		exec	CopyMem
		rts
d291 1
a291 1
	public	_MakeVector
d293 4
a296 4
		move.l	d2,-(sp)
		move.l	8(sp),d0
		move.l	#MEMF_CLEAR|MEMF_PUBLIC,d1
		addq.l	#4,d0
d298 10
a307 10
		addq.l	#8,d0		; V23.1 (for DMA overreading...)
		move.l	d0,d2
		exec	AllocMem
		tst.l	d0
		beq.s	1$
		move.l	d0,a0
		move.l	d2,(a0)+	; save size
		move.l	a0,d0
1$		move.l	(sp)+,d2
		rts
d309 1
a309 1
	public	_FreeVector
d311 6
a316 6
		move.l	4(sp),d0
		beq.s	1$
		move.l	d0,a1
		move.l	-(a1),d0	; size of block
		exec	FreeMem
1$:		rts
d318 1
a318 1
	public	_AvailMem
d320 3
a322 3
		move.l	4(sp),d1
		exec	AvailMem
		rts
d324 9
a332 9
	public	_ClearMem
_ClearMem:				; for small mem areas
		move.l	4(sp),a0
		move.l	8(sp),d0
		moveq.l	#0,d1
		bra.s	2$
1$:		move.b	d1,(a0)+
2$:		dbf	d0,1$
		rts
d334 1
a334 1
	public	_Forbid
d336 2
a337 2
		exec	Forbid
		rts
d339 1
a339 1
	public	_Permit
d341 2
a342 2
		exec	Permit
		rts
d344 1
a344 1
	public	_Supervisor
d346 2
a347 2
		exec	Supervisor
		rts
d349 1
a349 1
	public	_AllocSignal
d351 3
a353 3
		move.l	4(sp),d0
		exec	AllocSignal
		rts
d355 1
a355 1
	public	_FreeSignal
d357 3
a359 3
		move.l	4(sp),d0
		exec	FreeSignal
		rts
d361 1
a361 1
	public	_OpenDevice
d363 5
a367 5
		move.l	4(sp),a0
		movem.l	8(sp),d0/a1
		move.l	16(sp),d1
		exec	OpenDevice
		rts
d369 1
a369 1
	public	_CloseDevice
d371 3
a373 3
		move.l	4(sp),a1
		exec	CloseDevice
		rts
d375 1
a375 1
	public	_FindTask
d377 3
a379 3
		move.l	4(sp),a1
		exec	FindTask
		rts
d381 1
a381 1
	public	_FindPort
d383 3
a385 3
		move.l	4(sp),a1
		exec	FindPort
		rts
d387 1
a387 1
	public	_WaitPort
d389 3
a391 3
		move.l	4(sp),a0
		exec	WaitPort
		rts
d393 1
a393 1
	public	_NewList
d395 3
a397 3
		move.l	4(sp),a1
		NEWLIST	a1
		rts
d399 1
a399 1
	public	_Enqueue
d401 3
a403 3
		movem.l	4(sp),a0/a1
		exec	Enqueue
		rts
d405 4
a408 4
	public	_Remove
_Remove:	move.l	4(sp),a1
		REMOVE
		rts
d410 1
a410 1
	public	_PutMsg
d412 3
a414 3
		movem.l	4(sp),a0/a1
		exec	PutMsg
		rts
d416 1
a416 1
	public	_GetMsg
d418 3
a420 3
		move.l	4(sp),a0
		exec	GetMsg
		rts
d422 1
a422 1
	public	_ReplyMsg
d424 3
a426 3
		move.l	4(sp),a1
		exec	ReplyMsg
		rts
d428 1
a428 1
	public	_DoIO
d430 3
a432 3
		move.l	4(sp),a1
		exec	DoIO
		rts
d434 1
a434 1
	public	_CheckIO
d436 3
a438 3
		move.l	4(sp),a1
		exec	CheckIO
		rts
d440 1
a440 1
	public	_AbortIO
d442 3
a444 3
		move.l	4(sp),a1
		exec	AbortIO
		rts
d446 1
a446 1
	public	_WaitIO
d448 3
a450 3
		move.l	4(sp),a1
		exec	WaitIO
		rts
d452 2
a453 2
	public	_DoDevIO
	public	_DevIOReq
d455 9
a463 9
		lea	4(sp),a0
		lea	_DevIOReq,a1
		move.l	(a0)+,d0
		move.w	d0,IO_COMMAND(a1)
		move.l	(a0)+,IO_OFFSET(a1)
		move.l	(a0)+,IO_LENGTH(a1)
		move.l	(a0)+,IO_DATA(a1)
		exec	DoIO
		rts
d465 1
a465 1
	public	_StartDevIO
d467 9
a475 9
		lea	4(sp),a0
		move.l	(a0)+,a1
		move.l	(a0)+,d0
		move.w	d0,IO_COMMAND(a1)
		move.l	(a0)+,IO_OFFSET(a1)
		move.l	(a0)+,IO_LENGTH(a1)
		move.l	(a0)+,IO_DATA(a1)
		exec	SendIO
		rts
d477 1
a477 1
	public	_SendIO
d479 3
a481 3
		move.l	4(sp),a1
		exec	SendIO
		rts
d483 1
a483 1
	public	_Wait
d485 3
a487 3
		move.l	4(sp),d0
		exec	Wait
		rts
d489 1
a489 1
	public	_Signal
d491 4
a494 4
		move.l	4(sp),a1
		move.l	8(sp),d0
		exec	Signal
		rts
d496 1
a496 1
	public	_FetchA4
d498 2
a499 2
		move.l	a4,d0
		rts
d501 1
a501 1
	public	_AddDosNode
d503 6
a508 6
		movem.l	4(sp),d0/d1/a0
		push	a6
		move.l	_ExpBase,a6
		jsr	_LVOAddDosNode(a6)
		pop	a6
		rts
d510 2
a511 2
_LVOCreateProc	equ	-138
_LVOLoadSeg	equ	-150
d513 1
a513 1
	public	_CreateProc
d515 6
a520 6
		save	d3/d4/a6
		movem.l	16(sp),d1-d4
		move.l	_DOSBase,a6
		jsr	_LVOCreateProc(a6)
		restore	d3/d4/a6
		rts
d522 1
a522 1
	public	_LoadSeg
d524 6
a529 6
		movem.l	4(sp),d1
		push	a6
		move.l	_DOSBase,a6
		jsr	_LVOLoadSeg(a6)
		pop	a6
		rts
d535 1
a535 1
	public	_PutChar
d537 13
a549 13
		move.l	4(sp),d0
rawPutChar:	movem.l	d0/a0/a6,-(sp)
		move.l	4,a6
		jsr	LVO.RawPutChar(a6)
		movem.l	(sp)+,d0/a0/a6
		rts

	public Print		a0->format  a1->data
Print:		move.l	a2,-(sp)
		lea	rawPutChar,a2
		exec	RawDoFmt
		move.l	(sp)+,a2
		rts
d551 1
a551 1
	public	_Debug1
d553 2
a554 2
		moveq.l	#1,d0
		bra.s	Debug
d556 1
a556 1
	public	_Debug2
d558 2
a559 2
		moveq.l	#2,d0
		bra.s	Debug
d561 1
a561 1
	public	_Debug3
d563 2
a564 2
		moveq.l	#3,d0
		bra.s	Debug
d566 1
a566 1
	public	_Debug4
d568 1
a568 1
		moveq.l	#4,d0
d571 3
a573 3
		move.l	_DebugLevel,d1	; V34.4
		cmp.w	d1,d0		; V34.4 lower word only!
		bgt.s	dexit
d575 1
a575 1
	public	_Debug0
d577 4
a580 4
		move.l	4(sp),a0	; format
		lea	8(sp),a1	; data
		bsr	Print
dexit:		rts
d583 1
a583 1
	XDEF	EndCode
d585 2
a586 2
		dc.w	0
	END
@


1.2
log
@added some extra stubs for asynch IO functions, Remove.
@
text
@d177 2
a178 2
		restore	d2/a2
9$		rts
@


1.1
log
@Initial revision
@
text
@d287 4
a290 1

d297 1
d405 5
d434 18
d463 12
@
