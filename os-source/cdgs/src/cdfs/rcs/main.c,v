head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     93.03.25.15.10.57;  author jesup;  state Exp;
branches ;
next     1.4;

1.4
date     93.02.22.17.21.24;  author jesup;  state Exp;
branches ;
next     1.3;

1.3
date     93.01.16.13.35.35;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.20.02.50.00;  author jesup;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.16.09.20.18;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@Changes to allow clean failure if the device doesn't open.
@
text
@/***********************************************************************
****************                                        ****************
****************        -=   CD FILE SYSTEM   =-        ****************
****************                                        ****************
************************************************************************
***                                                                  ***
***   Written by Carl Sassenrath for Commodore International, Ltd.   ***
*** Copyright (C) 1991 Commodore Electronics Ltd. All rights reserved***
***                                                                  ***
***         Confidential and Proprietary System Source Code          ***
***                                                                  ***
***********************************************************************/

#include "main.h"

IMPORT  struct Message *GetMsg();

#include "packets.h"

/***********************************************************************
***
***  Main Entry
***
*** This is the main loop for the file handler.  It
*** accepts and interprets packets for as long as the
*** handler is running.
***
***********************************************************************/
Main()
{
/*  if (FSProc != 0x12344321) Debug0("CDFS DATA SEGMENT MISALIGNED!");*/

    if (!Init())
	return;		/* init failed!  Probably no drive there. */

    while (TRUE)
    {
        WaitPacket();
        if (DispatchAction()) ReplyPacket();
    }
}

/***********************************************************************
***
***  WaitPacket
***
*** Wait for the next packet, but also wake up if someone ejects
*** or inserts a disk.
***
***********************************************************************/
WaitPacket()
{
    REG struct Message *msg;

    while (!(msg = GetMsg(FSPort))) 
    {
        /* set the quick-packet-io OK flag */
        QuickPackets = TRUE;
        Wait(1<<(FSPort->mp_SigBit));
        QuickPackets = FALSE;

        if (InsertFlag && InhibitCount == 0) ReMount(); /* V34.2 Inhib added */
    }

    Packet = (struct DosPacket *)(msg->mn_Node.ln_Name);
}

/***********************************************************************
***
***  DispatchAction
***
*** If we can handle the action, dispatch a function to do so.
***
***********************************************************************/
DispatchAction()
{
    REG UWORD action;
    REG struct s_Actions *a = &Actions[0];

    action = (UWORD)(Packet->dp_Type);
    Debug2("\tA%ld\n",action);  

    /* This message comes from within the FS... */
    if (action == ACTION_DISK_CHANGE) /* CES 21.0 */
    {
        InputPends = FALSE;
        return FALSE; /* Just getting return of packet, do not reply! */
    }

    /* Scan action table */
    while (a->action && a->action != action) a++;

    /* Check for a bad packet action */
    if (!a->action)
    {
        PktRes2 = ERROR_ACTION_NOT_KNOWN;
        PktRes1 = DOS_FALSE;
        return TRUE;
    }

    /* Convert and cache args (in data segment) */
    ConvertArgs(a->argflags);

    Debug2("\ta%lx.%lx.%lx\n",PktArg1,PktArg2,PktArg3); 

    /* Execute action function: */
    PktRes2 = NULL;
    PktRes1 = a->func();

    return TRUE;
}

/***********************************************************************
***
***  ReplyPacket
***
*** Provide DOS's screwy method of replying to the packet.
*** Why did I trust Tim King?
***
***********************************************************************/
ReplyPacket()
{
    REG DOSPKT *pkt = Packet;
    REG struct Message *msg;
    REG struct MsgPort *port;

    ReplyPkt(pkt,PktRes1,PktRes2);

/*
    MUST(pkt);
    MUST(msg = pkt->dp_Link);
    MUST(port = pkt->dp_Port);
    pkt->dp_Res1 = PktRes1;
    pkt->dp_Res2 = PktRes2;
    pkt->dp_Port = FSPort; 
    msg->mn_Node.ln_Name = (char *)pkt;
    PutMsg(port,msg); 

    Debug2("\tR%lx.%lx\n",PktRes1,PktRes2);
*/
}
@


1.4
log
@replace private copy of replypkt with V37 Dos ReplyPkt
@
text
@d33 2
a34 1
    Init();
@


1.3
log
@cd.device instead of cdtv.device.
@
text
@d8 1
a8 1
*** Copyright (C) 1991 Commodore Electronics Ltd. All rights reserved***                                                                  ***
d126 3
d139 1
@


1.2
log
@Added protection so QR/QS can only happen when waiting for a packet, not
when waiting for an IOR.
@
text
@d3 1
a3 1
****************        -=  CDTV FILE SYSTEM  =-        ****************
d16 1
a16 1
IMPORT	struct Message *GetMsg();
d24 3
a26 3
***	This is the main loop for the file handler.  It
***	accepts and interprets packets for as long as the
***	handler is running.
d31 1
a31 1
/*	if (FSProc != 0x12344321) Debug0("CDFS DATA SEGMENT MISALIGNED!");*/
d33 1
a33 1
	Init();
d35 5
a39 5
	while (TRUE)
	{
		WaitPacket();
		if (DispatchAction()) ReplyPacket();
	}
d46 2
a47 2
***	Wait for the next packet, but also wake up if someone ejects
***	or inserts a disk.
d52 1
a52 1
	REG struct Message *msg;
d54 6
a59 6
	while (!(msg = GetMsg(FSPort)))	
	{
		/* set the quick-packet-io OK flag */
		QuickPackets = TRUE;
		Wait(1<<(FSPort->mp_SigBit));
		QuickPackets = FALSE;
d61 2
a62 2
		if (InsertFlag && InhibitCount == 0) ReMount(); /* V34.2 Inhib added */
	}
d64 1
a64 1
	Packet = (struct DosPacket *)(msg->mn_Node.ln_Name);
d71 1
a71 1
***	If we can handle the action, dispatch a function to do so.
d76 2
a77 2
	REG UWORD action;
	REG struct s_Actions *a = &Actions[0];
d79 29
a107 29
	action = (UWORD)(Packet->dp_Type);
	Debug2("\tA%ld\n",action);	

	/* This message comes from within the FS... */
	if (action == ACTION_DISK_CHANGE) /* CES 21.0 */
	{
		InputPends = FALSE;
		return FALSE; /* Just getting return of packet, do not reply! */
	}

	/* Scan action table */
	while (a->action && a->action != action) a++;

	/* Check for a bad packet action */
	if (!a->action)
	{
		PktRes2 = ERROR_ACTION_NOT_KNOWN;
		PktRes1 = DOS_FALSE;
		return TRUE;
	}

	/* Convert and cache args (in data segment) */
	ConvertArgs(a->argflags);

	Debug2("\ta%lx.%lx.%lx\n",PktArg1,PktArg2,PktArg3);	

	/* Execute action function: */
	PktRes2 = NULL;
	PktRes1 = a->func();
d109 1
a109 1
	return TRUE;
d116 2
a117 2
***	Provide DOS's screwy method of replying to the packet.
***	Why did I trust Tim King?
d122 3
a124 3
	REG DOSPKT *pkt = Packet;
	REG struct Message *msg;
	REG struct MsgPort *port;
d126 8
a133 8
	MUST(pkt);
	MUST(msg = pkt->dp_Link);
	MUST(port = pkt->dp_Port);
	pkt->dp_Res1 = PktRes1;
	pkt->dp_Res2 = PktRes2;
	pkt->dp_Port = FSPort; 
	msg->mn_Node.ln_Name = (char *)pkt;
	PutMsg(port,msg); 
d135 1
a135 1
	Debug2("\tR%lx.%lx\n",PktRes1,PktRes2);
@


1.1
log
@Initial revision
@
text
@d56 2
d59 1
@
