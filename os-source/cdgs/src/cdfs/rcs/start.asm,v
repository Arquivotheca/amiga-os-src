head     1.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.15
date     93.11.09.01.13.32;  author jesup;  state Exp;
branches ;
next     1.14;

1.14
date     93.03.04.00.31.15;  author jesup;  state Exp;
branches ;
next     1.13;

1.13
date     93.02.22.17.29.00;  author jesup;  state Exp;
branches ;
next     1.12;

1.12
date     93.01.16.13.33.56;  author jerryh;  state Exp;
branches ;
next     1.11;

1.11
date     92.04.03.13.15.28;  author jesup;  state Exp;
branches ;
next     1.10;

1.10
date     92.04.03.12.52.12;  author jesup;  state Exp;
branches ;
next     1.9;

1.9
date     92.03.03.12.40.27;  author jesup;  state Exp;
branches ;
next     1.8;

1.8
date     92.03.02.15.12.07;  author jesup;  state Exp;
branches ;
next     1.7;

1.7
date     91.12.21.23.21.19;  author bryce;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.16.21.45.33;  author bryce;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.13.20.19.41;  author bryce;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.29.19.53.28;  author bryce;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.22.10.23.18;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.16.09.19.21;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.25.11.53.45;  author andy;  state Exp;
branches ;
next     ;


desc
@CDFS start code
@


1.15
log
@pass is_mount to InitGlobals
@
text
@************************************************************************
****************                                        ****************
****************        -=   CD FILE SYSTEM   =-        ****************
****************                                        ****************
************************************************************************
***                                                                  ***
***   Written by Carl Sassenrath for Commodore International, Ltd.   ***
***   Copyright (C) 1990 Commodore-Amiga, Inc. All rights reserved.  ***
***                                                                  ***
***         Confidential and Proprietary System Source Code          ***
***                                                                  ***
************************************************************************

************************************************************************
***
***  CD File System Startup
***
*** Builds BootNode in RAM
***
*** Sets up main entry point as RAM segment
***
*** V24.1 - VERSION, REVISION, & VSTRING now used
***
************************************************************************

***
*** MANX SUCKS EGGS!!!!!!!!!!!!!!!!!!!!!!!!!!!
***
*** It cannot do:
*** DC.W    A-B for relocatables
*** and:
*** MOVE.L  (sp)+,D0/D1   does not create an error
***

    INCLUDE "exec/types.i"
    INCLUDE "exec/memory.i"
    INCLUDE "exec/resident.i"
    INCLUDE "exec/tasks.i"
    INCLUDE "stddefs.i"
    INCLUDE "libraries/configvars.i"
    INCLUDE "libraries/expansionbase.i"
    IFND    BootNode
    INCLUDE "libraries/romboot_base.i"
    ENDC
    INCLUDE "libraries/filehandler.i"
    INCLUDE "dos/dosextens.i"
    INCLUDE "expansion.lvo"
    INCLUDE "cdfs_rev.i"
;    INCLUDE "internal/copyright.i"
    INCLUDE "hardware/custom.i"


    XREF    _DOSBase
    XREF    _LibBase
    XREF    _ExpBase
    XREF    _CDFSBoot
    XREF    _DOSNode
    XREF    _FSProc
    XREF    _DebugLevel
    XREF    _InitGlobals
    XREF    _ValidDisk
    XREF    _NoReset
    XREF    intena
    XREF    _Main
    XREF    _BootMain
    XREF    _BootProc
    XREF    _BootPVDLSN
    XREF    _TMInfo
    XREF    _Supervisor
    XREF    _NoPrefs

***
*** Versions and Revisions
***
VERREV      equ     REVISION|(VERSION<<16)

***
*** Miscellaneous Constants
***
RTAG_PRI    equ 2
BOOT_PRI    equ 2       ; V24.1
JSR_INST    equ $4EB9
STACK_SIZE  equ 2048

***
*** File System Library Data Segment
***
LB_FLAGS    equ LIB_SIZE
LB_DATASEG  equ LB_FLAGS+2
LB_SIZEOF   equ LB_DATASEG+4
GLOBAL_SIZE equ 1024        ; includes C vars as well

;====== obsolete comment for C interface ======================================
; Gets called here when our device is DeviceProc'ed.  Initialise global memory
; and then wait for the startup packet to arrive before calling init.  If init
; fails then we couldn't get some memory or devices and a failure code will be
; sent back in dp_Res1 of the packet.
;==============================================================================
    XDEF    .begin
.begin:
	lea	ResTag(pc),a1
	moveq	#1,d1		; flag that we were started by Dos as a FS.
	exec	InitResident
	rts

Debugging   dc.w    0

***
*** Resident Module Tag
***
    XREF    EndCode         ; V24.1 moved
ResTag:     dc.w    RTC_MATCHWORD
        dc.l    ResTag
        dc.l    EndCode     ; end skip
        dc.b    RTF_COLDSTART|RTF_AUTOINIT
        dc.b    VERSION     ; version
        dc.b    NT_LIBRARY  ; type
        dc.b    RTAG_PRI    ; pri
        dc.l    LibName
        dc.l    ModIdent
        dc.l    InitRes     ; structure below

***
*** Names and Strings
***
*        dc.b    'CD File System',0
*        COPYRIGHT
*        dc.b    'Written by Carl Sassenrath, Ukiah, CA',0
*        ds.w    0

    XDEF    _ModIdent
_ModIdent:
ModIdent:
        VSTRING         ; V24.1 changed
        ds.w    0
LibName:    dc.b    'cdfs.library',0
        ds.w    0
ExpanName:  dc.b    'expansion.library',0
        ds.w    0
DOSName:    dc.b    'dos.library',0
        ds.w    0
    XDEF    _DevName
_DevName:
DevName:    dc.b    'cd.device',0
        ds.w    0
DOSDevName: dc.b    'CD0',0
        ds.w    0
BootProcName:   dc.b    'boot.task',0
        ds.w    0


InitRes:    dc.l    GLOBAL_SIZE
        dc.l    LibFuncs
        dc.l    0
        dc.l    InitModule

***
*** DOS Device Envrionment Table
***
        cnop    0,4     V24.1
DevEnvr:
        dc.l    DOSDevName
        dc.l    DevName
        dc.l    0
        dc.l    0
        ;           DOS Envr Vector:
        dc.l    17      de_TableSize
        dc.l    2048>>2     de_SizeBlock
        dc.l    0       de_SecOrg
        dc.l    1       de_Surfaces
        dc.l    1       de_SectorPerBlock
        dc.l    1       de_BlocksPerTrack
        dc.l    0       de_Reserved
        dc.l    0       de_PreAlloc
        dc.l    0       de_Interleave
        dc.l    0       de_LowCyl
        dc.l    0       de_HighCyl
        dc.l    5       de_NumBuffers
        dc.l    1       de_BufMemType
        dc.l    $100000     de_MaxTransfer
        dc.l    $7FFFFFFE   de_Mask
        dc.l    BOOT_PRI    de_BootPri  V24.1
        dc.l    $43443031   de_DosType = "CD01"


***
*** Dummy Config Dev Node
***
ConfDev:
        dc.l    0,0
        dc.b    0,0
        dc.l    0
        dc.b    0,0     ; flags
        dc.b    ERTF_DIAGVALID,1,0,0  ; expansion ROM
        dc.w    0       ; manufacturer
        dc.l    0       ; serial num
        dc.w    0
        dc.l    CDDiagArea
        ds.l    10

***
*** Dummy Diag Area Structure & Boot code
***
CDDiagArea:
        dc.b    DAC_WORDWIDE|DAC_CONFIGTIME,0
        dc.w    0,0     ; size & diagpoint
        dc.w    DiagArea_SIZEOF ; bootcode must follow diag area
        dc.w    0,0,0
        save    a6/a4
        bsr BindLib     ; bind to CDFS lib CES V22.3
;       tst.l   _NoReset    ; V24.2 check if reset ok
;       blt.s   4$      ; V24.2 no reset - other devs around
        move.l  #1,_NoReset ; V24.2 allow reset
4$:     lea DOSName(pc),a1  ; DOS init (must follow diag area)
        execl   FindResident
        move.l  d0,a0
        move.l  RT_INIT(a0),a0
        restore a6/a4
        jsr (a0)
        rts

fmt     dc.b    '<$%lx>',10,0
        ds.w    0


***     +----------------+
***     |                | <- Boot Seg Structure
***     + - - - - - - - -+
***     |                | <- Actual Data Seg
***     |                |
***     |                |
***     |                | <- A4 (Data Seg Pointer)
***     +----------------+

*** BootSeg Structure:
BS_SEGLEN   equ 0   always zero
BS_NEXTSEG  equ 4   always zero
BS_JSRINST  equ 8   always $4EB9
BS_ENTRY    equ 10  entry point
BS_DATASEG  equ 14  data segment ptr (must follow ENTRY)
BS_SIZEOF   equ 18  data seg starts here

FUNCNT      set 0
LIBFUN      macro
        dc.l    \1
FUNCNT      set FUNCNT+1
        endm

LibFuncs
        LIBFUN  Open        ; -6
        LIBFUN  Close       ; -12
        LIBFUN  Expunge     ; -18
        LIBFUN  Reserved    ; -24
        LIBFUN  ResetComp   ; -30
        LIBFUN  SetDebug    ; -36
        LIBFUN  ValidDisk   ; -42
        LIBFUN  MountFS     ; -48
        LIBFUN  GetTMInfo   ; -54
        LIBFUN  IsNoPrefs   ; -60
    IFNE FUNCNT&1
        LIBFUN  DOSSucks    ; Library Base must be aligned!
    ENDC
        DC.L    -1

************************************************************************
***
*** Resident Module Initialization
***
************************************************************************
InitModule:
        movem.l d0-d7/a0-a6,-(sp)
        move.l  d0,a6       ; library base pointer
	move.l	a0,d7		; "segment" pointer, really flag

    ;------ Setup library structure:
        move.b  #NT_LIBRARY,LN_TYPE(a6)
        lea LibName(pc),a0
        move.l  a0,LN_NAME(a6)
        lea ModIdent(pc),a0
        move.l  a0,LIB_IDSTRING(a6)
        move.b  #LIBF_SUMUSED|LIBF_CHANGED,LIB_FLAGS(a6)
        move.w  #VERSION,LIB_VERSION(a6)
        move.w  #REVISION,LIB_REVISION(a6)

    ;------ Set data segment register:
        move.l  a6,a4
        add #LB_SIZEOF,a4
        move.l  a4,d4       ; save for later
        add.l   #32766+BS_SIZEOF,a4 ; Manx backwords segment
        move.l  a4,LB_DATASEG(a6)
        move.l  a6,_LibBase

        clear   d0
        move.w  Debugging(pc),d0
        move.l  d0,_DebugLevel
        move.l  #$12344321,_FSProc  ; temp test pattern

    ;------ Open Expansion library:
        lea.l   ExpanName(pc),a1
        moveq.l #33,d0      ; 1.2 KS or better
        execl   OpenLibrary
        move.l  d0,_ExpBase ; CES 22.0
        beq exit

    ;------ Is this init time or are we being mounted?
	tst.l	d7
	beq.s	init_time
	move.l	d7,-(sp)	; pass is_mount to initglobals
        jsr	_InitGlobals
	addq.w	#4,sp
	jsr	MainAlternate	; open dos, call _Main (get packet, go)
	bra.s	exit		; it shouldn't return, but...

    ;------ Create new DOS device node:
init_time:
        movea.l d0,a6       for exp lib
        lea DevEnvr(pc),a0  where parameter packet goes
        jsr _LVOMakeDosNode(a6) make the node
        move.l  d0,_DOSNode did we get it?
        beq exit
        move.l  d0,a3

    ;------ Set up boot segment:
        move.l  d4,a1
        move.w  #JSR_INST,BS_JSRINST(a1) ; store a JSR.L instr
        lea MainEntry(pc),a0     ; get entry address
        move.l  a0,BS_ENTRY(a1)      ; store as JSR address
        move.l  a4,BS_DATASEG(a1)

    ;------ Set up rest of device node:
        move.l  a1,d0       ; !!! or +4?
        lsr.l   #2,d0       ; convert to BPTR
        move.l  d0,dn_SegList(a3)
        move.l  #-1,dn_GlobalVec(a3)
        move.l  #STACK_SIZE,dn_StackSize(a3)

    ;------ Setup our Boot Node:
        lea _CDFSBoot,a1
        move.b  #NT_BOOTNODE,LN_TYPE(a1)
        move.b  #BOOT_PRI,LN_PRI(a1)
        lea ConfDev(pc),a0
        move.l  a0,LN_NAME(a1)
        move.l  a3,bn_DeviceNode(a1)

    ;------ Initialize globals:
        move.l  SysBase,a6
	clr.l	-(sp)
        jsr _InitGlobals
	addq.w	#4,sp

;       move.l  #$20000,d0
;2$:        move.w  #$64a,$DFF180   ; set color
;       subq.l  #1,d0
;       bgt 2$

exit:
        movem.l (sp)+,d0-d7/a0-a6
        rts

************************************************************************
***
***  Open Library
***
************************************************************************
Open:
        bclr.b  #LIBB_DELEXP,LIB_FLAGS(a6)
        addq.w  #1,LIB_OPENCNT(a6)
        move.l  a6,d0
        rts

************************************************************************
***
***  Close Library
***
************************************************************************
Close:
        subq.w  #1,LIB_OPENCNT(a6)
Expunge:
Reserved:
DOSSucks:
        clear   d0      ; prevent expunge
        rts

************************************************************************
***
***  SetDebug
***
*** D0 == new debug level
*** Return old level.
***
************************************************************************
SetDebug:
        save    a4
        move.l  LB_DATASEG(a6),a4
        move.l  _DebugLevel,d1
        move.l  d0,_DebugLevel
        move.l  d1,d0
        restore a4
        rts

************************************************************************
***
***  ValidDisk
***
*** Returns TRUE if disk is valid CDFS boot disk.
***
************************************************************************
ValidDisk:
        save    d2-d3/a2-a6
        move.l  LB_DATASEG(a6),a4
        move.l  SysBase,a6
        jsr _ValidDisk
        restore d2-d3/a2-a6
        rts

************************************************************************
***
***  GetTMInfo
***
*** Get Trademark Info pointer.  If zero, then no info found.
***
************************************************************************
GetTMInfo:
        save    d2-d3/a2-a6
        move.l  LB_DATASEG(a6),a4
        lea _TMInfo,a0
        move.l  a0,d0
        restore d2-d3/a2-a6
        rts

************************************************************************
***
***  IsNoPrefs
***
*** Return TRUE if no prefs should be done on startup.
***
************************************************************************
IsNoPrefs:
        save    d2-d3/a2-a6
        move.l  LB_DATASEG(a6),a4
        clear   d0
        move.b  _NoPrefs,d0
        restore d2-d3/a2-a6
        rts

************************************************************************
***
***  MountFS    CES V22.1 V24.2 (all new)
***
*** Add DOS device node for cases where we are not booting from CD.
***
************************************************************************
MountFS:
        save    d2/a2-a6
        move.l  LB_DATASEG(a6),a4
        exec    Forbid

        move.l  _ExpBase,a0
        lea eb_MountList(a0),a0

    ;------ If other volumes around, don't allow reset:
        move.l  (a0),a1     ; check mount list
        tst.l   (a1)        ; is it empty?
        beq.s   no_entries  ; yes

;
;   ;------ allow reset unless they have a hard disk.  Search for
;   ;------ scsi.device units
;devloop        move.l  a1,-(sp)
;       move.l  bn_DeviceNode(a1),a1 ; get the doslist entry
;       move.l  dol_Startup(a1),a0   ; we know this can't be NULL!!!
;       add.l   a0,a0
;       add.l   a0,a0       ; bptr->cptr
;       move.l  fssm_Device(a0),a0   ; we know this can't be NULL!!!
;       add.l   a0,a0
;       add.l   a0,a0
;       moveq   #0,d0
;       move.b  (a0)+,d0    ; null-terminated bstr
;       lea scsiname(pc),a1
;10$        cmp.b   (a0)+,(a1)+ ; is it scsi.device?
;       dbne    d0,10$      ; compares for length+1 (includes null)
;       move.l  (sp)+,a1    ; get bootnode back
;       tst.w   d0      ; did we terminate early?
;       bmi.s   has_harddisk
;
;   ;------ not scsi.device.  try the next one
;       move.l  LN_SUCC(a1),a1
;       tst.l   LN_SUCC(a1) ; end of list?
;       beq.s   no_entries  ; no scsi.device entries, allow reboot
;       bra.s   devloop     ; try next entry

has_harddisk
        move.l  #-1,_NoReset    ; no reset
no_entries:
    ;------ Did we find a bootable volume?
        tst.l   _BootPVDLSN
        beq.s   4$

    ;------ Mount the bootable volume:
        lea _CDFSBoot,a1
        tst.l   (a1)        ; already mounted?
        bne.s   9$      ; yes
        exec    Enqueue     ; a0/a1 (pri already set)
        bra.s   9$

    ;------ Nothing to mount:
4$:     moveq.l #-128,d0    ; low priority V24.2
        moveq.l #1,d1       ; fire up handler
        move.l  _DOSNode,a0 ; node to use
        move.l  _ExpBase,a6
        jsr _LVOAddDosNode(a6)

9$:     exec    Permit
        restore d2/a2-a6
        rts

scsiname:   dc.b    'scsi.device',0
        ds.w    0

************************************************************************
***
*** CDFS Main Entry Point
***
***     Called by AmigaDOS during bootstrap via the dummy
***     segment put into the device node segment list.
***
************************************************************************
MainEntry:
        move.l  (sp)+,a0
        move.l  (a0),a4     ; initial data segment pointer

MainAlternate:		; called if softloaded as a filesystem
        move.l  SysBase,a6

    ;------ Open DOS library:
        lea DOSName(pc),a1
        clear   d0
        exec    OpenLibrary
        move.l  d0,_DOSBase ; MUST OPEN !!!

        jmp _Main


************************************************************************
***
***  BootFileSeg
***
*** Entry code for a new process for booting up a Boot File.
*** This code only gets executed when a boot file is specified
*** as part of a PVD.  It is run after strap as part of the FS
*** startup.
***
************************************************************************
    XDEF    _BootFileSeg
        cnop    0,4     ; for DOS
        dc.l    0
_BootFileSeg:   dc.l    0
    ;------ Get back to CDFS:
        bsr BindLib

    ;------ Enter our C boot code:
        jsr _BootMain   ; C entry point
        clear   d0      ; should not return.
        move.l  SysBase,a6
        exec    Wait        ; wait forever.

************************************************************************
***
***  BindLib
***
*** Bind a "task" to the CDFS main data segment (in A4).
***
************************************************************************
BindLib:
        lea.l   LibName(pc),a1  ; CDFS library
        clear   d0
        move.l  SysBase,a6
        exec    OpenLibrary
        move.l  d0,a0       ; must open.
        move.l  LB_DATASEG(a0),a4
        move.l  SysBase,a6
        rts


        cnop    0,4
    XDEF    ResetAmiga

ResetAmiga: exec    ColdReboot

ResetComp:  move.w  #$4000,intena   ; DISABLE because we don't want to be
                    ; interrupted from here on
        move.l  SysBase,a6
        lea ResetAmiga(pc),a5
        bsr _Supervisor ; does not return
@


1.14
log
@2 tweaks to make it run from Mount.
@
text
@d308 1
d310 1
d347 1
d349 1
@


1.13
log
@Make it usable either from a file or from ROM.  ROM tested, from a file
not tested yet.
Fixed mask.
Removed Carl's string
@
text
@d102 1
a102 1
	moveq	#1,d0		; flag that we were started by Dos as a FS.
d309 1
a309 1
	jsr	_Main		; this will fetch initial packet
d528 1
@


1.12
log
@cd.device instead of cdtv.device.
@
text
@d49 1
a49 1
    INCLUDE "internal/copyright.i"
d93 6
a98 3
***
*** CLI Execution Protection
***
d100 6
a105 1
.begin:     rts
d126 4
a129 4
        dc.b    'CD File System',0
        COPYRIGHT
        dc.b    'Written by Carl Sassenrath, Ukiah, CA',0
        ds.w    0
d181 1
a181 1
        dc.l    $FFFFFFFE   de_Mask
d273 1
d304 7
a310 1
        movea.l d0,a6       for exp lib
d313 2
@


1.11
log
@Turned off scsi test code
@
text
@d3 1
a3 1
****************        -=  CDTV FILE SYSTEM  =-        ****************
d16 1
a16 1
***  CDTV File System Startup
d18 1
a18 1
***	Builds BootNode in RAM
d20 102
a121 102
***	Sets up main entry point as RAM segment
***
***	V24.1 -	VERSION, REVISION, & VSTRING now used
***
************************************************************************

***
***	MANX SUCKS EGGS!!!!!!!!!!!!!!!!!!!!!!!!!!!
***
***	It cannot do:
***	DC.W	A-B	for relocatables
***	and:
***	MOVE.L	(sp)+,D0/D1   does not create an error
***

	INCLUDE	"exec/types.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"exec/resident.i"
	INCLUDE	"exec/tasks.i"
	INCLUDE "stddefs.i"
	INCLUDE	"libraries/configvars.i"
	INCLUDE	"libraries/expansionbase.i"
	IFND	BootNode
	INCLUDE	"libraries/romboot_base.i"
	ENDC
	INCLUDE	"libraries/filehandler.i"
	INCLUDE "dos/dosextens.i"
	INCLUDE	"expansion.lvo"
	INCLUDE "cdfs_rev.i"
	INCLUDE	"internal/copyright.i"
	INCLUDE "hardware/custom.i"


	XREF	_DOSBase
	XREF	_LibBase
	XREF	_ExpBase
	XREF	_CDFSBoot
	XREF	_DOSNode
	XREF	_FSProc
	XREF	_DebugLevel
	XREF	_InitGlobals
	XREF	_ValidDisk
	XREF	_NoReset
	XREF	intena
	XREF	_Main
	XREF	_BootMain
	XREF	_BootProc
	XREF	_BootPVDLSN
	XREF	_TMInfo
	XREF	_Supervisor
	XREF	_NoPrefs

***
***	Versions and Revisions
***
VERREV		equ 	REVISION|(VERSION<<16)

***
***	Miscellaneous Constants
***
RTAG_PRI	equ	2
BOOT_PRI	equ	2		; V24.1
JSR_INST	equ	$4EB9
STACK_SIZE	equ	2048

***
***	File System Library Data Segment
***
LB_FLAGS	equ	LIB_SIZE
LB_DATASEG	equ	LB_FLAGS+2
LB_SIZEOF	equ	LB_DATASEG+4
GLOBAL_SIZE	equ	1024		; includes C vars as well

***
***	CLI Execution Protection
***
	XDEF	.begin
.begin:		rts
Debugging	dc.w	0

***
***	Resident Module Tag
***
	XREF	EndCode			; V24.1 moved
ResTag:		dc.w	RTC_MATCHWORD
		dc.l	ResTag
		dc.l	EndCode		; end skip
		dc.b	RTF_COLDSTART|RTF_AUTOINIT
		dc.b	VERSION		; version
		dc.b	NT_LIBRARY	; type
		dc.b	RTAG_PRI	; pri
		dc.l	LibName
		dc.l	ModIdent
		dc.l	InitRes		; structure below

***
***	Names and Strings
***
		dc.b	'CDTV File System',0
		COPYRIGHT
		dc.b	'Written by Carl Sassenrath, Ukiah, CA',0
		ds.w	0
d123 1
a123 1
	XDEF	_ModIdent
d126 9
a134 9
		VSTRING			; V24.1 changed
		ds.w	0
LibName:	dc.b	'cdfs.library',0
		ds.w	0
ExpanName:	dc.b	'expansion.library',0
		ds.w	0
DOSName:	dc.b	'dos.library',0
		ds.w	0
	XDEF	_DevName
d136 12
a147 12
DevName:	dc.b	'cdtv.device',0
		ds.w	0
DOSDevName:	dc.b	'CD0',0
		ds.w	0
BootProcName:	dc.b	'boot.task',0
		ds.w	0


InitRes:	dc.l	GLOBAL_SIZE
		dc.l	LibFuncs
		dc.l	0
		dc.l	InitModule
d150 1
a150 1
***	DOS Device Envrionment Table
d152 1
a152 1
		cnop	0,4		V24.1
d154 22
a175 22
		dc.l	DOSDevName
		dc.l	DevName
		dc.l	0
		dc.l	0
		;			DOS Envr Vector:
		dc.l	17		de_TableSize
		dc.l	2048>>2		de_SizeBlock
		dc.l	0		de_SecOrg
		dc.l	1		de_Surfaces
		dc.l	1		de_SectorPerBlock
		dc.l	1		de_BlocksPerTrack
		dc.l	0		de_Reserved
		dc.l	0		de_PreAlloc
		dc.l	0		de_Interleave
		dc.l	0		de_LowCyl
		dc.l	0		de_HighCyl
		dc.l	5		de_NumBuffers
		dc.l	1		de_BufMemType
		dc.l	$100000		de_MaxTransfer
		dc.l	$FFFFFFFE	de_Mask
		dc.l	BOOT_PRI	de_BootPri	V24.1
		dc.l	$43443031	de_DosType = "CD01"
d179 1
a179 1
***	Dummy Config Dev Node
d182 10
a191 10
		dc.l	0,0
		dc.b	0,0
		dc.l	0
		dc.b	0,0		; flags
		dc.b	ERTF_DIAGVALID,1,0,0  ; expansion ROM
		dc.w	0		; manufacturer
		dc.l	0		; serial num
		dc.w	0
		dc.l	CDDiagArea
		ds.l	10
d194 1
a194 1
***	Dummy Diag Area Structure & Boot code
d197 29
a225 29
		dc.b	DAC_WORDWIDE|DAC_CONFIGTIME,0
		dc.w	0,0		; size & diagpoint
		dc.w	DiagArea_SIZEOF	; bootcode must follow diag area
		dc.w	0,0,0
		save	a6/a4
		bsr	BindLib		; bind to CDFS lib CES V22.3
;		tst.l	_NoReset	; V24.2 check if reset ok
;		blt.s	4$		; V24.2 no reset - other devs around
		move.l	#1,_NoReset	; V24.2 allow reset
4$:		lea	DOSName(pc),a1	; DOS init (must follow diag area)
		execl	FindResident
		move.l	d0,a0
		move.l	RT_INIT(a0),a0
		restore	a6/a4
		jsr	(a0)
		rts

fmt		dc.b	'<$%lx>',10,0
		ds.w	0


***		+----------------+
***		|                | <- Boot Seg Structure
***		+ - - - - - - - -+
***		|                | <- Actual Data Seg
***		|                |
***		|                |
***		|                | <- A4 (Data Seg Pointer)
***		+----------------+
d228 12
a239 12
BS_SEGLEN	equ	0	always zero
BS_NEXTSEG	equ	4	always zero
BS_JSRINST	equ	8	always $4EB9
BS_ENTRY	equ	10	entry point
BS_DATASEG	equ	14	data segment ptr (must follow ENTRY)
BS_SIZEOF	equ	18	data seg starts here

FUNCNT		set	0
LIBFUN		macro
		dc.l	\1
FUNCNT		set	FUNCNT+1
		endm
d242 15
a256 15
		LIBFUN	Open		; -6
		LIBFUN	Close		; -12
		LIBFUN	Expunge		; -18
		LIBFUN	Reserved	; -24
		LIBFUN	ResetCDTV	; -30
		LIBFUN	SetDebug	; -36
		LIBFUN	ValidDisk	; -42
		LIBFUN	MountFS		; -48
		LIBFUN	GetTMInfo	; -54
		LIBFUN	IsNoPrefs	; -60
	IFNE FUNCNT&1
		LIBFUN	DOSSucks	; Library Base must be aligned!
	ENDC
		DC.L	-1

d259 1
a259 1
***	Resident Module Initialization
d263 2
a264 2
		movem.l	d0-d7/a0-a6,-(sp)
		move.l	d0,a6		; library base pointer
d266 68
a333 68
	;------	Setup library structure:
		move.b	#NT_LIBRARY,LN_TYPE(a6)
		lea	LibName(pc),a0
		move.l	a0,LN_NAME(a6)
		lea	ModIdent(pc),a0
		move.l	a0,LIB_IDSTRING(a6)
		move.b	#LIBF_SUMUSED|LIBF_CHANGED,LIB_FLAGS(a6)
		move.w	#VERSION,LIB_VERSION(a6)
		move.w	#REVISION,LIB_REVISION(a6)

	;------	Set data segment register:
 		move.l	a6,a4
		add	#LB_SIZEOF,a4
		move.l	a4,d4		; save for later
		add.l	#32766+BS_SIZEOF,a4 ; Manx backwords segment
		move.l	a4,LB_DATASEG(a6)
		move.l	a6,_LibBase

		clear	d0
		move.w	Debugging(pc),d0
		move.l	d0,_DebugLevel
		move.l	#$12344321,_FSProc  ; temp test pattern

	;------	Open Expansion library:
		lea.l	ExpanName(pc),a1
		moveq.l	#33,d0		; 1.2 KS or better
		execl	OpenLibrary
		move.l	d0,_ExpBase	; CES 22.0
		beq	exit
		movea.l	d0,a6		for exp lib

	;------	Create new DOS device node:
		lea	DevEnvr(pc),a0  where parameter packet goes
		jsr	_LVOMakeDosNode(a6)	make the node
		move.l	d0,_DOSNode	did we get it?
		beq	exit
		move.l	d0,a3

	;------	Set up boot segment:
		move.l	d4,a1
		move.w	#JSR_INST,BS_JSRINST(a1) ; store a JSR.L instr
		lea	MainEntry(pc),a0	 ; get entry address
		move.l	a0,BS_ENTRY(a1)		 ; store as JSR address
		move.l	a4,BS_DATASEG(a1)

	;------	Set up rest of device node:
		move.l	a1,d0		; !!! or +4?
		lsr.l	#2,d0		; convert to BPTR
		move.l	d0,dn_SegList(a3)
		move.l	#-1,dn_GlobalVec(a3)
		move.l	#STACK_SIZE,dn_StackSize(a3)

	;------	Setup our Boot Node:
		lea	_CDFSBoot,a1
		move.b	#NT_BOOTNODE,LN_TYPE(a1)
		move.b	#BOOT_PRI,LN_PRI(a1)
		lea	ConfDev(pc),a0
		move.l	a0,LN_NAME(a1)
		move.l	a3,bn_DeviceNode(a1)

	;------	Initialize globals:
		move.l	SysBase,a6
		jsr	_InitGlobals

;		move.l	#$20000,d0
;2$:		move.w	#$64a,$DFF180	; set color
;		subq.l	#1,d0
;		bgt	2$
d336 2
a337 2
		movem.l	(sp)+,d0-d7/a0-a6
		rts
d345 4
a348 4
		bclr.b	#LIBB_DELEXP,LIB_FLAGS(a6)
		addq.w	#1,LIB_OPENCNT(a6)
		move.l	a6,d0
		rts
d356 1
a356 1
		subq.w	#1,LIB_OPENCNT(a6)
d360 2
a361 2
		clear	d0		; prevent expunge
		rts
d367 2
a368 2
***	D0 == new debug level
***	Return old level.
d372 7
a378 7
		save	a4
		move.l	LB_DATASEG(a6),a4
		move.l	_DebugLevel,d1
		move.l	d0,_DebugLevel
		move.l	d1,d0
		restore	a4
		rts
d384 1
a384 1
***	Returns TRUE if disk is valid CDFS boot disk.
d388 6
a393 6
		save	d2-d3/a2-a6
		move.l	LB_DATASEG(a6),a4
		move.l	SysBase,a6
		jsr	_ValidDisk
		restore	d2-d3/a2-a6
		rts
d399 1
a399 1
***	Get Trademark Info pointer.  If zero, then no info found.
d403 6
a408 6
		save	d2-d3/a2-a6
		move.l	LB_DATASEG(a6),a4
		lea	_TMInfo,a0
		move.l	a0,d0
		restore	d2-d3/a2-a6
		rts
d414 1
a414 1
***	Return TRUE if no prefs should be done on startup.
d418 10
a427 10
		save	d2-d3/a2-a6
		move.l	LB_DATASEG(a6),a4
		clear	d0
		move.b	_NoPrefs,d0
		restore	d2-d3/a2-a6
		rts

************************************************************************
***
***  MountFS	CES V22.1 V24.2 (all new)
d429 1
a429 1
***	Add DOS device node for cases where we are not booting from CD.
d433 3
a435 3
		save	d2/a2-a6
		move.l	LB_DATASEG(a6),a4
		exec	Forbid
d437 7
a443 7
		move.l	_ExpBase,a0
		lea	eb_MountList(a0),a0

	;------	If other volumes around, don't allow reset:
		move.l	(a0),a1		; check mount list
		tst.l	(a1)		; is it empty?
		beq.s	no_entries	; yes
d446 18
a463 18
;	;------ allow reset unless they have a hard disk.  Search for
;	;------ scsi.device units
;devloop		move.l	a1,-(sp)
;		move.l	bn_DeviceNode(a1),a1 ; get the doslist entry
;		move.l	dol_Startup(a1),a0   ; we know this can't be NULL!!!
;		add.l	a0,a0
;		add.l	a0,a0		; bptr->cptr
;		move.l	fssm_Device(a0),a0   ; we know this can't be NULL!!!
;		add.l	a0,a0
;		add.l	a0,a0
;		moveq	#0,d0
;		move.b	(a0)+,d0	; null-terminated bstr
;		lea	scsiname(pc),a1
;10$		cmp.b	(a0)+,(a1)+	; is it scsi.device?
;		dbne	d0,10$		; compares for length+1 (includes null)
;		move.l	(sp)+,a1	; get bootnode back
;		tst.w	d0		; did we terminate early?
;		bmi.s	has_harddisk
d465 5
a469 5
;	;------ not scsi.device.  try the next one
;		move.l	LN_SUCC(a1),a1
;		tst.l	LN_SUCC(a1)	; end of list?
;		beq.s	no_entries	; no scsi.device entries, allow reboot
;		bra.s	devloop		; try next entry
d472 1
a472 1
		move.l	#-1,_NoReset	; no reset
d474 3
a476 3
	;------	Did we find a bootable volume?
		tst.l	_BootPVDLSN
		beq.s	4$
d478 24
a501 24
	;------	Mount the bootable volume:
		lea	_CDFSBoot,a1
		tst.l	(a1)		; already mounted?
		bne.s	9$		; yes
		exec	Enqueue		; a0/a1 (pri already set)
		bra.s	9$

	;------	Nothing to mount:
4$:		moveq.l	#-128,d0	; low priority V24.2
		moveq.l	#1,d1		; fire up handler
		move.l	_DOSNode,a0	; node to use
		move.l	_ExpBase,a6
		jsr	_LVOAddDosNode(a6)

9$:		exec	Permit
		restore	d2/a2-a6
		rts

scsiname:	dc.b	'scsi.device',0
		ds.w	0

************************************************************************
***
***	CDFS Main Entry Point
d503 2
a504 2
***		Called by AmigaDOS during bootstrap via the dummy
***		segment put into the device node segment list.
d508 2
a509 2
		move.l	(sp)+,a0
		move.l	(a0),a4		; initial data segment pointer
d511 1
a511 1
		move.l	SysBase,a6
d513 7
a519 7
	;------	Open DOS library:
		lea	DOSName(pc),a1
		clear	d0
		exec	OpenLibrary
		move.l	d0,_DOSBase	; MUST OPEN !!!

		jmp	_Main
d526 4
a529 4
***	Entry code for a new process for booting up a Boot File.
***	This code only gets executed when a boot file is specified
***	as part of a PVD.  It is run after strap as part of the FS
***	startup.
d531 13
a543 13
************************************************************************
	XDEF	_BootFileSeg
		cnop	0,4		; for DOS
		dc.l	0
_BootFileSeg:	dc.l	0
	;------	Get back to CDFS:
		bsr	BindLib

	;------	Enter our C boot code:
		jsr	_BootMain	; C entry point
		clear	d0		; should not return.
		move.l	SysBase,a6
		exec	Wait		; wait forever.
d549 1
a549 1
***	Bind a "task" to the CDFS main data segment (in A4).
d553 20
a572 20
		lea.l	LibName(pc),a1	; CDFS library
		clear	d0
		move.l	SysBase,a6
		exec	OpenLibrary
		move.l	d0,a0		; must open.
		move.l	LB_DATASEG(a0),a4
		move.l	SysBase,a6
		rts


		cnop	0,4
	XDEF	ResetAmiga

ResetAmiga:	exec	ColdReboot

ResetCDTV:	move.w	#$4000,intena	; DISABLE because we don't want to be
					; interrupted from here on
		move.l	SysBase,a6
		lea	ResetAmiga(pc),a5
		bsr	_Supervisor	; does not return
@


1.10
log
@Added test for devices named scsi.device in the eb_Mountlist.  If none,
we allow reboot on removal.
@
text
@d445 25
a469 24
	;------ allow reset unless they have a hard disk.  Search for
	;------ scsi.device units
devloop		move.l	a1,-(sp)
		move.l	bn_DeviceNode(a1),a1 ; get the doslist entry
		move.l	dol_Startup(a1),a0   ; we know this can't be NULL!!!
		add.l	a0,a0
		add.l	a0,a0		; bptr->cptr
		move.l	fssm_Device(a0),a0   ; we know this can't be NULL!!!
		add.l	a0,a0
		add.l	a0,a0
		moveq	#0,d0
		move.b	(a0)+,d0	; null-terminated bstr
		lea	scsiname(pc),a1
10$		cmp.b	(a0)+,(a1)+	; is it scsi.device?
		dbne	d0,10$		; compares for length+1 (includes null)
		move.l	(sp)+,a1	; get bootnode back
		tst.w	d0
		bmi.s	has_harddisk

	;------ not scsi.device.  try the next one
		move.l	LN_SUCC(a1),a1
		tst.l	LN_SUCC(a1)	; end of list?
		beq.s	no_entries	; no scsi.device entries, allow reboot
		bra.s	devloop		; try next entry
@


1.9
log
@Leave reset on if we boot off the CD.
@
text
@d46 1
d443 28
a470 1
		beq.s	2$		; yes
d472 1
a472 1
2$:
d494 3
@


1.8
log
@Uses ColdReboot now
@
text
@d202 2
a203 2
		tst.l	_NoReset	; V24.2 check if reset ok
		blt.s	4$		; V24.2 no reset - other devs around
@


1.7
log
@Remove dead code, StopBootProcess, StopEnvr, etc.
@
text
@d534 1
a534 4
ResetAmiga:	exec	SuperState
ResetCode:	sub.l	a0,a0
		move.l	#$4E704EF9,(a0)
		jmp	(a0)
@


1.6
log
@Add conditional for BootNode (don't include romboot_base.i if defined).
@
text
@a138 2
StopName:	dc.b	'***',0
		ds.w	0
d175 1
a175 23
StopEnvr:
		dc.l	StopName
		dc.l	DevName
		dc.l	0
		dc.l	0
		;			DOS Envr Vector:
		dc.l	17		de_TableSize
		dc.l	2048>>2		de_SizeBlock
		dc.l	0		de_SecOrg
		dc.l	1		de_Surfaces
		dc.l	1		de_SectorPerBlock
		dc.l	1		de_BlocksPerTrack
		dc.l	0		de_Reserved
		dc.l	0		de_PreAlloc
		dc.l	0		de_Interleave
		dc.l	0		de_LowCyl
		dc.l	0		de_HighCyl
		dc.l	5		de_NumBuffers
		dc.l	1		de_BufMemType
		dc.l	$100000		de_MaxTransfer
		dc.l	$FFFFFFFE	de_Mask
		dc.l	BOOT_PRI	de_BootPri	V24.1
		dc.l	$43443031	de_DosType = "CD01"
a488 92
************************************************************************
***
***  Crash
***
***	Cannot recover from our problems.
***
************************************************************************
Crash:
		move.l	#$20000,d0
2$:		move.w	#$a00,$DFF180	; set color
		subq.l	#1,d0
		bgt	2$

		rts			; where does it go???

************************************************************************
***
***  StopBootProcess
***
***	Setups up a low priority DOS device node that when executed
***	will terminate the DOS boot process.  This code must be
***	executed prior to DOS booting.
***
***	I hope we can find a better way of doing this before we ship.
***
************************************************************************
	XDEF	_StopBootProcess
_StopBootProcess:
	;------	Create stop-boot device node:
		lea	StopEnvr(pc),a0 ; where parameter packet goes
		move.l	_ExpBase,a6
		jsr	_LVOMakeDosNode(a6)
		move.l	d0,a0

	;------	Set up rest of device node:
		lea	StopDOS(pc),a1
		move.l	a1,d0
		lsr.l	#2,d0		; convert to BPTR
		move.l	d0,dn_SegList(a0)
		move.l	#-1,dn_GlobalVec(a0)
	;	move.l	#4096,dn_StackSize(a0)

	;------	Add node to DOS device list:
		moveq.l	#1,d1		start-proc (now?!!!)
		moveq.l	#-100,d0	boot priority
		jsr	_LVOAddDosNode(a6)  ; d1,d0,a0

		move.l	SysBase,a6
		rts

	;------	Called as last node in boot:
		cnop	0,4
		dc.l	0
StopDOS		dc.l	0		; for DOS
		save	a4/a6

		bsr	BindLib		; (leaves A6->Sysbase)

;		public	_FindTask,_Debug0
;		pea	0
;		bsr	_FindTask
;		addq.l	#4,sp
;		move.l	d0,a0
;		move.l	LN_NAME(a0),-(sp)
;		pea	pr
;		bsr	_Debug0
;		addq.l	#8,sp

	;------	Signal our new Boot Proc and stop current proc:
		move.l	_BootProc,d0
		beq.s	3$
		move.l	d0,a1
		sub.l	#TC_SIZE,a1	; convert to task ptr
		moveq.l	#1,d0		; wake boot proc signal
		exec	Signal

		move.l	#$20000,d0
4$:		move.w	#$a00,$DFF180	; set color
		subq.l	#1,d0
		bgt	4$

	;	public	_BootFile
	;	tst.b	_BootFile
	;	beq.s	3$
	;	jsr	_BootMain	; C entry point

3$:		clear	d0
		exec	Wait		; wait forever.

		restore	a4/a6
		clear	d0
		rts
@


1.5
log
@Fixed reset code. From one code path would trap with Supervisor _then_
call SuperState.  Not a great idea.
@
text
@d41 2
d44 1
a44 1
	INCLUDE	"libraries/expansionbase.i"
@


1.4
log
@Eliminate redundant and conflicting INCLUDEs
Change to internal for copyright.i
@
text
@d8 1
a8 1
***   Copyright (C) 1990 Commodore-Amiga, Inc. All rights reserved.  ***                                                                  ***
d648 2
a649 8
;		lea.l	2,a0
;		reset
;		jmp	(a0)

		CNOP	0,4	; I think longword alignment will work best
ResetAmiga:
		exec	SuperState
		sub.l	a0,a0
d653 1
a653 2
ResetCDTV:
		move.w	#$4000,intena	; DISABLE because we don't want to be
@


1.3
log
@changed to standard include place, standard include names
@
text
@d36 1
a36 1
	INCLUDE	"exec/exec.i"
d46 1
a46 1
	INCLUDE	"cdtv/copyright.i"
d121 2
a122 2
_ModIdent:	
ModIdent:	
d244 1
a244 1
***		|                | 
d248 1
a248 1
*** BootSeg Structure:		
d658 1
a658 1
								
@


1.2
log
@changed reset code to code that should work better
@
text
@d45 2
a46 2
	INCLUDE "cdfs.i"
	INCLUDE	"cdtv:copyright.i"
@


1.1
log
@Initial revision
@
text
@d47 1
d49 1
d60 1
d647 10
a656 3
ResetAmiga:				; V22.4
		lea.l	2,a0
		reset
d658 1
a658 1

d660 2
a664 1

@
