From hedley@crunch Thu Nov 12 15:58:19 1992
Received: by cbmvax.cbm.commodore.com (5.57/UUCP-Project/Commodore 2/8/91)
        id AA14308; Thu, 12 Nov 92 15:58:16 EST
Date: Thu, 12 Nov 92 15:57:06 EST
From: hedley@crunch (Hedley Davis -- Systems Engineering)
Received: from slug.lsidesign (slug.ARPA) by crunch (4.1/3.1.090690-Commodore International Services Corporation)
        id AA11213; Thu, 12 Nov 92 15:57:06 EST
Message-Id: <9211122057.AA11213@crunch>
To: jerryh@cbmvax
Status: R


NEED TO ADD CACHE CONTROL BIT

Rev History:
        11/2/92 Hedley  Reordered BITS register.
                        Add IOPORT.
        10/30/  Hedley  Added CDTXDMA bit
                        Added Zero bit define for terminus word 
                        clipped PBX to 16 bits.
                        
        10/14/  Hedley  Minor memory map changes...
        10/9/92 Hedley  Added CDROM PBX explaination for jerry.
        9/25/92 Hedley  still more cleaning..
        9/12/92 Hedley  more cleanup based on better understanding.
        8/30/92 Hedley  Added IR registers..
        8/20/92 Hedley  Added command control DMA regsiters
        8/13/92 Hedley  Cut 2
        8/11/92 Hedley  First cut

NOTE:
        Due to a modification of drive hardware to reduce the command
        control interface to three wires, we will need to implement
        both the new and old low level CDROM command control interfaces.
        Selection of mode will be hardware rev.


68020 memory map
________________

For all function codes 0,3,4, or 7:

        Create buss error combinatorially from AS_.
        ( Have clock delay on leading edge ).

For function codes 1,2,5 & 6:
        

   addr         size    waits   Function
--------------- --      -----   -----------
$000000-$1FFFFE 32      agnus   Chip Ram        *1
$200000-$B7FFFE 16      Zorro   AutoConfig Space
$B80000-$B87FFE 16      none    internal registers
$B88000-$B8FFFE 16      1186    M1186 local processor interface.
$B90000-$B9FFFF 16      agnus.  Unmolested custom chip registers...
$BA0000-$BDFFFE 16      Zorro   unused
$BE0000-$BEFFFE 16      8520    Always present access to internal 8520s.
$BF0000-$BFCFFE 16      8520    Illegal 8520 access /  unsupported 
$BFDr00         16      8520    8520A   Legal decode for 8520 A register r.
$BFDr02-$BFDrFC 16      8520    Illegal space that may or may not hit 8520 A.
$BFDrFE         16      8520    8520A   Legal decode for 8520 A register r.
$BFEr00         16      8520    8520B   Legal decode for 8520 E register r.
$BFEr02-$BFDrFC 16      8520    Illegal space that may or may not hit 8520 B.
$BFErFE         16      8520    8520B   Legal decode for 8520 B register r.
$BFF000-$BFFFFE 16      8520    Illegal 8520  access / unsupported
$C00000-$DEFFFE 16      Zorro 
$DF0000-$DFFFFE 16      agnus   RGA     The one true location for Amiga chips.
$E00000-$E7FFFF 16      ROM
$E80000-$F7FFFE 16      Zorro   Empty.
$F80000-$FFFFFE 16      ROM     16 bit internal ROM


DMA CHANNELS:
-------------
        There are internal DMA channels.
                CDROM   CDROM data channel 
                CDCOM   CD drive command/control receive channel.
                SUBCODE Subcode data channel.
                IRRX    IR receive data channel.
                IRTX    IR transmit data channel.

SUBCODE DMA CHANNEL:
--------------------

        The subcode DMA channel is strictly used for DMAing subcode
        information into host memory. It has an unusual addressing scheme
        designed to facilitate subcode processing.

        Basically there is a base page pointer which dictates a 256 byte 
        region which subcode dma can occur to. This base page register
        is write only, and never changes except when written. 

        Within the base page are two 128 byte areas of which 98 bytes
        are considered significant. These regions form a double buffer
        for subcode information. Hardware detects subcode frame syncs,
        and causes data to be dmad to one buffer then the other switching
        on a per frame basis.

        When frame syncs do occur, the last received data is dumped to
        memory. Because frames are 98 bytes long, the longword is not
        full. In this case, bogus data is simply written on the extra bytes.
        The actual address of the last byte written can be derived from
        the subcode status register.

DRIVE COMMAND/CONTROL DMA CHANNEL
---------------------------------

        The CDROM drive has a command and control DMA channel for data
        from the drive only. ( Data to the drive can be written one to
        four bytes at a time via the CDTx register ).

        The receive operation is limited to a single 256 byte region of
        memory. This region is set via the RXAd register.

        An address comparitor is provided to allow the software to control
        how many bytes of data must be received before the creation of
        an interupt. This location is RXICmp.

        The intent is that the host software sets the interface to
        interupt on the third byte from the drive. ( Most packets are
        three bytes long ). When the interupt comes, software can
        determine if packet length. If three bytes, job is done. If
        more than three bytes, software can set RXICmp to create interupt
        when last byte of packet is received. Thus software has one 
        one to two interupts per received packet.

IR DMA CHANNEL
--------------

        The IR DMA channel supports both receive and transmission of
        Infrared signals. 

        For receive, the channel DMAs bytes of information corresponding
        to IR edges into a 256 byte circular buffer memory. These bytes
        correspond to edges of the received IR signal after demodulation.

        Details on the register spec can be found in /project/cdg/spec/ir.



CONTROL REGISTERS
-----------------

        A region of memory is carved out to contain several game machine
        specific registers. These are detailed below. These registers
        are typically of length 32 bits.

        The registers are detailed below:
 addr    name    func
----    ------  --------------------------------------------------------
d00      Revision Register.
                B31:0   Read chip revision number... 

                        ( likely to increment often w/ early FGPA
                        prototypes ).

                        The proposed format is YYMMDDTT where
                               YYMMDD is the year month day of when
                                      the logical specification was
                                      created.
                               TT is a Commodore assigned technology
                                  code indicating the embodyment of 
                                  the data ( XYLINX/ACTEL/HP GA/
                                  LSI STD-CELL etc... ).

d04      Status: Status Register         ( read only ).
d08     Int2En                          ( read/write ).
d06     Unused...

        These 3 registers provide interupt control.
        Status indicates which parts of the chip may be requesting
        interupt service.
        Int2En and indicate which bits in status can cause an Int2 interupt.

        The bits are orginized as follows:
        BIT:    Function:               Cleared By:     
a       B31:    Subcode Buffer Change   Read Subcode Addr Buffer latch.
d       B30:    TxD Buffer Empty ( ro ) Write CDTXDATA data register.
ad      B29:    RxD Buffer Full.        Read CDRXDATA register.
a       B28:    RxD Compare Register    Write CDRXCOMP  compare register.
d       B27:    TxD Tx DMA empty.       Change TxD pointer.
a       B26:    CDROM changed PBX:      Write CDROM PBX.
d       B25:    CDROM hung.             Reseek.

a10:    CDROMHIGH:              write only.

        This write only register contains the high order CDROM
        rom data address. Only bits 23:17 are significant.

a14:    DMAHIGH:                write only.

        This write only register contains the high order 14 bits
        of address for the the IR receive page, the CDRX page,
        and the SUBCODE page. Only bits 23:10 are significant.

        The Subcode page is this address w/ B9:8 = 00.
        The CDRX    page is this address w/ B9:8 = 01.
        The CDTX    page is this address w/ B9:8 = 10.

a18:    SubAddr:                Read only.

        This is the page buffer pointer containing the
        low order 8 bits of information assocated with the 
        buffer address of the last byte of subcode information
        written to the buffer by the DMA hardware.

        Only the low order 8 bits are significant.

a19:    CDRXAddr:               Read only.

        This is the page buffer pointer indicating the 
        address of where the next byte of received CDROM
        command channel data would be written two.

a1A:    CDTXAddr:               Read only.

        This is the page buffer pointer indicating the
        address of where the next byte of received CDTX data will be
        sent from. 

a1C:    RXICmp  Write only. Eight bits.

                This register is used to ease interupt overhead of
                CDROM communications. When the low order buffer pointer
                for drive receive DMA equals, or passes this value, a
                status bit is set. This status bit is cleared by writing
                this register.

a1D:    TXICmp  Write only. Eight bit.
                This register is used to point to the Nth plus one byte
                for CDROM transmit communications.

a20:    CDROM PBX:              read/write.

        This is a read write register.
        It contains the CDROM PBX register explained elsewhere.

ad24:   BITS:   Various control bits for the hardware:  read/write.

a       31      SUBCTL  0       Subcode DMA is off. Init.
a                       1       Subcode DMA enabled.
        
a       30      CDTXD   0       Drive Command control TX via prog IO.
a                       1       Command control TX via DMA.

a       29      CDRXD   0       Drive Command RX via progio.
a                       1       Drive Command RX via DMA.

a       28      DCASEN  0       Double cas for ROM DMA to chip ram disabled.
a                       1       Double cas for ROM DMA to chip ram enabled.

a       27      PBXEN   0       PBX disabled, and cleared.
a                       1       PBX enabled. 

a       26      ROMEN   0       Rom data path disabled & RESET.
a                       1       Rom data path enabled.

a       25      ROMRAW  0       SECTOR controller in ROM mode.
a                       1       SECTOR controller in RAW mode.

a       24      ROMMSB  0       CXD2500Q LSB first
a                       1       CXD2500Q MSB first.

d28:     CDTXRX  This is the CD UART register. 

                WRITES:
                One to four bytes of data may be written to this register.
                Once written, the register may not be written again until
                it is empty. This is indicated to software via the TXEmpty
                flag. 

                RECEIVES:
                This register returns one byte of data from the drive
                if there is a byte waiting ( see status register ),
                and if the com interface is in RAW mode. If the 
                interface is in DMA mode, this register returns
                undefined garbage.


a2C:    PortDat
                This is an eight bit general purpose IO port.
                Only two bits ( 7:6 ) are implemented.
                This is the direction register for a general purpose
                IO port.
                Reads always return value at pin.

a2E:    PortDir
                This is the data direction register for PortDat.



Custom Chip Address Notes:
__________________________

In order to support IR receivers, some liberities must be taken
with the custom chip registers that support IO devices.


The kludge is as follows:

        Software that totally takes over the system ( to the point
        of not allowing the keyboard driver to execute ) will not
        be able to take advantage of the IR receiver.

        Software that at least allows the keyboard process to execute
        will be able to take advantage of IR recievers. 

        Software in the host will examine the FIRE button for IR events.
        ( in reality, IR events are pretimed by the hardware and an
        event list is built in ram via hardware. Software needs to examine
        the event list for IR smelling events. ).

        If the software detects IR events, then software will want to 
        somehow cause applications software to think that mouse
        buttons are depressed, the mouse has moved, pot events have
        occured, and keyboard events shall have happened. A variety
        of stratgies are to be employed to trick applications into
        seeing the correct events.

        1)      Keyboard events:
                Keyboard events are simply 'fixed' in software.
                This is easy because it is presumed that 99% of
                developers realized banging the metal for keyboard
                events was not a good plan. ( Bryce, et al ).

        2)      Fire Button Events:

                Special hardware is provided to make the 8520s think
                that the fire buttons are pressed.

        3)      Mouse/Pot events:

                Mouse and pot events are created by remmapping some
                custom chip registers into hardware. The software can
                then control what other software sees when these registers
                are read.


        The magic remapped registers are:

        Joystick:

                JOY0DAT DFC00A  R
                JOY1DAT DFC00C  R
                JOYTEST DFC036  W

                The two read locations are internally replicated as
                two 16 bit registers that can be read and written by
                system software. Joytest writes also affect these
                two registers in the expected fashion.

        Pots:
                POT0DAT DFC012  R
                POT1DAT DFC014  R
                POTGOR  DFC016  R
                POTGO   DFC034  W

                The read locations are emulated in hardware via three
                16 bit writeable locations. Writes to PotGO exhibit
                the expected effects on the read locations.
                
        This remapping can be controlled. It is normally off, assuming that
        normal joysticks are connected. If enough system software is running,
        and if this software sees bonafide IR events, then it can enable the
        remapping to allow it to control the input stream of the application.


CDRROM DMA:

        There are four distinct pieces of hardware involved in CDROM
        DMA. These are the CDROMHIGH register, the PBX, the 
        SECTOR controller/DECODER. Each of these hardware devices is
        responcible for a different portion of the destination
        address.

        CDROMHIGH:
        ----------

        The CDROMHIGH register is a write only 7 bit register.
        It contains the high order 7 bits of the address. This 
        contrains all CDROM dma to the same naturally aligned
        128K byte region of memory.

        PBX:
        ----

        The PBX is a 16 bit read/sort of write memory location. Each bit in
        the PBX corresponds to one 4K region in the 64Kbyte CDROMDMA
        region. Bit zero corresponds to the low order sector buffer
        as pointed to directly by CDROMHIGH, Bit one corresponds
        to that address + 4k, etc....

        Initially, at system reset, the PBXEN bit in the BITS register
        is cleared. This forces the PBX to all zeros. In order to
        to CDROM DMA, software must set bits in the PBX. Once a 
        bit is set in the PBX, system software cannot clear it with
        out reseting the entire PBX. Set bits signify buffers which have
        been 'given' to the hardware for CDROM DMA.

        When the CPU writes to the PBX, bits with a value of zero have
        no effect on the register. Bits with a value of one, forcibly
        set the corresponding PBX bit. Once a bit is written with a
        one, the host should never rewrite that bit with a one ( the
        bit belongs to hardware ), until the bit is cleared by the
        hardware ( the bit belongs to the software ).

        When DMA needs to occur, the hardware picks a random set bit in
        the PBX and uses this bit to create the address for the CDROM
        DMA. When the sector is completed, the hardware clears the 
        corresponding bit in the PBX.  Software, by maintaining a copy
        of the PBX, and xoring it against the current PBX value, can
        easily determine which sector buffers have been returned by
        the hardware. Software then must examine the contents of the
        returned buffers to determine their validity, and which buffers
        contain which sectors.

        An interupt facility is provided to interupt the CPU when a 
        sector is returned to software. This shows up in the interupt
        and status registers. The interupt is cleared by any write to
        the PBX ( including one of all zeros which changes no bits
        in the PBX ).

        SECTOR/DECODER:
        ---------------

        The sector controller is responcible for the actual decoding of
        the CDROM data, performing a EDC check, and for DMAing the 
        the data into the destination sector as selected by the PBX.

        The following bits control this section:

        ROMMSB: 0       data is LSB first.
                1       data is MSB first.

                This bit corresponds to an analogous control bit
                in the M1186. The hardware requires that this bit
                be set to the correct value before taking the ROMEN
                high, and left alone until after ROMEN is low.
                
        ROMCLKR 0       data is clocked in on falling edge of BCLK.
                1       data is clocked in on rising egde of BCLK.

                This bit corresponds to an analogous control bit
                in the M1186. The hardware requires that this bit
                be set to the correct value before taking the ROMEN
                high, and left alone until after ROMEN is low.
                

        ROMRAW  0       Sector controller in ROM mode.
                        Sector controller in RAW mode.

        ROMEN   0       Sector controller in reset & off.
                1       Sector controller on, and running.


        To perform CDROM DMA, the ROMHIGH regsiter, and the PBX
        must both be set up. Then the ROMMSB, ROMCLKR and ROMRAW bits
        must be set up. Then the drive should be made to start 
        spitting out data. Then ROMEN should be set. At this point
        the hardware starts reading CDROM sectors, and DMAING them
        into memory. Note that the only way to stop the hardware
        from grabbing sectors is to take ROMEN low.

        The following status are provided from this section:

        CDROMHUNG:
                0       Everything is cool.
                1       CDROM data path failed to complete
                        DMA in time. Overflow. CDROM datapath
                        locked up. Reset is only fix. ( Probably
                        to much DMA in system for CDROM dma to
                        be able to occur ).

        All other information is contained in the returned sector.

        SECTOR FORMAT ( rom mode ):
        ---------------------------

        Each sector of rom data is formated as follows:

                Addr    Contents:
                ----
                x000    Status Word
                x00C    CDROM header.
                x010    Start of CDROM data.
                xC00    Start of C2P0 data.

        The CDROM header is always DMAd first. It is the four bytes
        of standard CDROM header info.

        Starting at x010, the CDROM data is always DMAd into memory
        in sequential order. A sector is 2352 bytes long consisting
        of 12 bytes of sync, a four byte header, and 2336 bytes of
        other stuff. These 2336 bytes of stuff is dma'd into x010 
        through x92F. 

        At the same time that the CDROM data is read in, the C2P0 information
        is also read into a bit map starting at xC00. The low order bit
        at xC00 corresponds to the first sync byte, and bits continue
        upwards in 32 bit chunks. There is one bit for each CDROM byte,
        and therefore there should be 2352/32 = 73.5 words of C2P0 
        information. Only the 73 whole words are DMAd here.  Note that
        the alignement has been carefully controlled to cause bit positions
        in this region to naturally point to byte positions at an offset
        of 0 from the start of the sector buffer. ( 0x00 ).


        The final word DMAd into memory is the terminus word. It contains
        lots of useful information and is always DMAd to the zeroth location
        in the sector buffer. ( This should make it easy enough to find ).

        The terminus word is defined as follows:

                B31:16  The last 16 bits of C2P0 information. 
                B15:    Always zero.
                B14:10  Undefined. Garbage.
                B9?     set if sync was inserted.
                B8?     set if short sector ( unexpected sync ).
                B7?     set if EDC error for CDI format detected.
                B6?     set if EDC error for normal format detected.
                B5?     C2 summary. Set if any C2 bits were set in the sector.
                B4:0    Sector count since CDROMEN was set.

                Bits marked with a '?' may move.

        Note that because the order in which bits are removed from the PBX
        is undefined, when software finds several sectors have been returned
        to it via the PBX, the only way to determine the order in which
        sectors were returned is to examine the status word at the start of
        each Sector.


        SECTOR FORMAT ( raw mode ):
        ---------------------------

        This is currently imprecisely defined as follows:

        Each returned sector will contain:

                2352 bytes of data corresponding to a sectors worth of 
                music data starting at an offset of x00C.

                73 words of C2PO information starting at xC00. ( NOTE:
                the offset of these bits relative to the data at
                0x00C is broken here. These bits are relative to 0x00C,
                not 0x000. ).

                A terminus word at zero of which only the C2 information,
                the C2 summary, and the sector count are valid.

        There is no defined relationship between the sectors returned
        and 'real' audio sectors. When you turn the device on in RAW mode,
        it simply grabs 2352 bytes of audio per sector, and hands it off.
        This is because there is no sync information in audio data.



M1186DMA:
---------

        DMA from the 1186 is handled as follows:

        There are two control bits and a single address pointer for
        the 1186.

        The address pointer is a full 24 bit write only register located
        at the same location as CDROMHIGH. 

        The bits are located and described in the BITS register above.

        Note that enabling both the 1186, and any of the normal
        CDROM stuff results in undefined unpredictable and undesirable
        behaviour.

        To do that DMA stuff:
                
                M86EN, M86F <= 00.      ( set up internal hardware ).

                Write CDROMHIGH with the 24 bit address for the target.

                M86EN <= 1 .            Enable internal hardware.

                Make the 1186 do however many bytes of DMA you want.

                M86F <= 1.              Flush the last bytes out.

                Wait some indeterminate amount of time for data to flush.

                done.


