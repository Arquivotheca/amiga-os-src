head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.4
date     93.02.11.11.57.44;  author Jim2;  state Exp;
branches ;
next     1.3;

1.3
date     93.02.10.15.25.17;  author Jim2;  state Exp;
branches ;
next     1.2;

1.2
date     93.02.09.12.26.48;  author Jim2;  state Exp;
branches ;
next     1.1;

1.1
date     93.02.09.10.44.34;  author Jim2;  state Exp;
branches ;
next     ;


desc
@How nonvolatile.library functions in different configurations.
@


1.4
log
@Minor nits
@
text
@The following illustrates how the nonvolatile library will act in the
different system configurations.

BACKGROUND
Nonvolatile library defines a set of LVOs that free the developer
of a cdgs application from being concerned about where to store
nonvolatile information.  The following are four basic LVOs:
Store some information in nonvolatile storage;  Read some information
form nonvolatile storage; List the tags (names) associated with the
information in nonvolatile storage; and delete some information from
nonvolatile storage (see the nonvolatile.library autodoc for a more
complete description).

There are two locations for the storing of nonvolatile information.
One is a nonvolatile RAM (NVRAM) chip the other is a disk.

The NVRAM is a serial access 8K bit (1K byte) chip located in the base
game machine unit.  This chip will not be included in the seperate CD
drive.

The disk will only be used if the nonvolatile library can find a file
giving the users preference for which disk/directory should be used.
Also the nonvolatile library must be able to get a lock on this
disk/directory.

Whenever possible nonvolatile library will store first time data on a
disk.  Whenever possible nonvolatile library will store changed
information on the whichever meduim the information currently resides.


STAND ALONE GAME MACHINE
In this configuration only the NVRAM exists.  All writes/reads/information
will be done/come from the NVRAM.

This configuration is determined in the library by not being able to open
the user's preference for storing nonvolatile data.  Also the NVRAM is
detected as present.


COMPUTER w/wo CD DRIVE
In this configuration only the disk exists.  All writes/reads/information
will be done/come from the disk.

This configuration is determined in the the library by being able to open
the user's preference for storing nonvolatile data and being able to lock
this disk/directory.  If the file is opened, but the lock cannot be done,
no information can be accessed.  This open/lock sequence is tried on all
bootable disks until the first success.

GAME MACHINE w/ COMPUTER ATTACHMENT
In this configuration it is possible for both the disk and the NVRAM to
exist.

If disk, other than CD0:, is present; this is the same as the stand alone
game machine.

With both a disk and NVRAM present the disk is always the prefered meduim.

Reads will first be attempted from the disk, if the file does not exist
there the read will be from the NVRAM.  This will allow the user to
'override' anything stored in the NVRAM with the disk.

Since reads come first from the disk then the NVRAM, and writes attempt
to go to the same medium as the read; writes are first attempted to the
disk with MODE_OLDFILE.  If the file does not exist an update is attempted
on the NVRAM.  If this is not successful the write is retried on the
disk, but now the mode will be MODE_NEWFILE.  If this does not work, a
write will be attempted on the NVRAM.

If the final write cannot be done NVERR_FAIL will be returned.

Notice, if the file exists on the disk and there is a failure in writing;
no attempt will be made to write the data to the NVRAM.  However, if
there is a failure updating the data in NVRAM (like it does not fit), the
file will be written to disk.  Thus the next time a read is preformed it
will get the data off the disk.  This also means that if the game machine
is removed from the computer attachement it will fall back to the old
data.  At the same time, it will not be possible to store the larger
amount of data without freeing space in the NVRAM.

If the user does save data on disk and then either removes the disk, or the
entire computer unit; then updates that data it will now be written to NVRAM.
Returning the disk/computer unit will result in orginal disk data being
recovered.  Getting the NVRAM data is possible by removing the disk.  This
is consistant with the possiblity of having multiple save disks.

The listing of AppName/ItemName consists of a merging of the lists from both
the NVRAM and the disk.

If data exists under the same AppName and ItemName on both the disk and the
NVRAM, deletion will occur on both medias.


ALTERNATIVE
If we examine the 'pop the floppy' analogy further we could change the write
philosophy.  In this we say all writes go to the floppy regardless of where
they came from.  Also, if the data exists both places the application/user
will need to invoke delete twice to remove it from both places.



Nonvolatile library will respect the protection bits on the files and
directories that are on the disk.

If a directory/disk is write protected on a write the data will attempt to
be written in the NVRAM.  However, if the file is write protected no such
attempt will be made


The following documents many of the design decision that characterize
the current nonvolatile library.

Nonvolatile library defines a set of LVOs that free the developer
of a cdgs application from being concerned about where to store
nonvolatile information.  The following are four basic LVOs:
Store some information in nonvolatile storage;  Read some information
form nonvolatile storage; List the tags (names) associated with the
information in nonvolatile storage; and delete some information from
nonvolatile storage (see the nonvolatile.library autodoc for a more
complete description).

There are two locations for the storing of nonvolatile information.
One is a nonvolatile RAM (NVRAM) chip the other is a disk.

The NVRAM is a serial access 8K bit (1K byte) chip located in the base
game machine unit.  This chip will not be included in the seperate CD
drive.

The disk will only be used if the nonvolatile library can find a file
giving the users preference for which disk/directory should be used.
Also the nonvolatile library must be able to get a lock on this
disk/directory.


NVRAM
In order to minimize the time spent in retrieving information from the
NVRAM chip, the entire contents of the chip will be copied to RAM when the
library is opened.  The software to access the NVRAM device is divided
into 2 layers.

The first (lowest) level access handles the bit fiddling required to talk
to the NVRAM chip.  This level supports four functions: 1) write 1 byte,
2) read 1 byte, 3) write multiple bytes, and 4) read multiple bytes.
This level's source code is the CDGS:SRC/NONVOLATILE/NVRAM directory,
in files named NVRAM.ASM and NVRAM.I.

The second level handles the structure of data residing in the NVRAM
device.  The data structure to support finding and retrieving data is a
simple binary tree.  This is implemented in a singly linked, linked list
with each node having a string name, and word child pointers.  The standard
list structures in exec/lists.i are not being used in order to conserve
the space required for use of long pointers and double links.  Although
this does make deletion more difficult with only single links.
This level source code is in the CDGS:SRC/NONVOLATILE/NVRAM directory,
in files named NVRAMTREE.ASM and NVRAMTREE.I.

As defined in the library AUTODOC, the user is allowed access to data items
by specifying two strings: AppName and ItemName.  There will be two reserved
App names in the NVRAM device.  The first AppName is "System" and will have one
reserved ItemName "Lang" for storing system language setting.

The NVRAM will coalesce the free space at deletion time.  This should
not aversely affect the life time of part since deletions will only
happen when the NVRAM is too full and more space is needed which would
trigger a write anyway.

DISK
The actual disk location used for storing nonvolatile data will also
be determined at the initial open time for the library.  The file
prefs/env-archive/sys/nv_location will be searched for on all disks
beginning with boot disk.  If this file is found and the path contained
there in can be locked the search will stop.

The contents of this file will be read and NULL terminated upon the first
control character, or the end of file.

If no lock can be optained no other attempt will be made to access a
nonvolatile disk until the library open count drops back to zero.

Currently the contents of nv_location are taken in their entirety as
the directory to lock for writing nonvolatile data.

Before any accesses are attempted on the disk requestors are disabled
by changing the pr_WindowPtr to -1.  The orginal value is stored on the
stack which allows for the possiblity of multiple-simultaneous accesses
to the library without the possiblity of losing the orginal window
pointer for any process.

The structure for storing on the disk is that each AppName will be a
seperate directory on the disk.  Within each directory a file of ItemName
will be created to hold the data for that item.


READ
See discussion above.

WRITE
See discussion above.

LIST
The list of tags in nonvolatile storage will be the merging of the list
of tags for NVRAM and the user selected disk.

DELETE
All deletes will be attempted on both the NVRAM and the disk.  If all of
the Items for a given App are deleted all reference to the App will be
deleted from the nonvolatile device.
@


1.3
log
@Added orginal discussion.
@
text
@d54 2
a55 2
If no bootable disk, other than CD0:, is present; this is the same as the
stand alone game machine.
d162 4
a165 5
The NVRAM will coalesce the free space at deletion time, however, it may
hold off writing data if the deletion is triggered internally.  This
should not aversely affect the life time of part since deletions will
only tend to happen when the NVRAM is too full and more space is needed
to store information.
@


1.2
log
@Actually wrote something
@
text
@d99 110
@


1.1
log
@Initial revision
@
text
@d1 98
@
