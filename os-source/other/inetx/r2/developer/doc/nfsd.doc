
Amiga NFS Server Guide    September 17, 1992
--------------------------------------------

The Amiga NFS server allows files on your Amiga to be available on any type
of computer which has an NFS client.  NFS clients are available for almost
every modern computer.

The first step in setting up an NFS server on your Amiga is to decide what
will be exported.  This means you have to decide what volumes will be made
available to users on the network.  For example, you may decide to export
df0: and dh1:.  You can export any filesystem.

When NFS is started, it will scan the exported volumes and build a
"mapfile" which will contain additional directory information for the NFS
server.  This mapfile contains Unix-like user ids, group ids, and
protection bits.  If a client is talking to a server when the server dies,
the server must have the ability to continue where it left off after it
reboots.  The mapfile also has information that allows this.  If you decide
to build the mapfile in ram: for speed, your server will not be able to
coontinue after a reboot.  All the clients will have to unmount and remount
the server.

The size of the mapfile will be 128 bytes for every file exported, so it
can be very large if you export many files.

The NFSD file server is also an arexx function host. This provides an
ARexx port that is used to control and configure the server.

  In order to run the nfsd file server daemon, you will need to:

  1. Have the 'rexxsupport.library' and the 'rexxsyslib.library' files
     available in your libs: directory.
  1. Have nfsd in your inet:serv directory.
  2. Have the executable "netrexx" in your inet:c directory.
  3. Have the rexx script "startnfsd.rexx" in your rexx: directory.
  4. Edit the user settings in the file "rexx:startnfsd.rexx" to suit
     the needs of the machine the server is on and the desires off the
     sysadmin. (see #6)
  5. remove the line in inet:s/start-inet that runs 'portmapd' as the
     nfsd will deal with that for you (portmapd is pretty pointless
     anyway. You should probably toss it out.) The nfsd executable
     WILL NOT RUN with the inet:serv/portmapd running!
  6. Read the entire "rexx:startnfsd.rexx" file!! There is useful info
     in this.
  7. Have the line "run <nil: >nil: rx startnfsd.rexx" in your 
     'inet:s/start-inet' file.  You can also execute this from the
     command line but failure to redirect to nil: will hang that shell.


Using a text editor, edit the file rexx:startnfsd.rexx.  You will see the 
following:


/* 
 * initialization script for NFSd 
 */

/*----------------------------------------------------------------------*/
/*            USER DEFINABLE PARAMETERS START HERE            */
/*----------------------------------------------------------------------*/

/*
 * The mapfile variable sets the location where the NFS directory will
 * be stored.  It will be of length mapsize*128 bytes.  If the exported
 * filesystems are small enough you may wish to locate the directory in
 * a ram disk.  If the mapentry is kept on slow media, eg floppy disk,
 * be sure to make cachesize large.
 */
mapfile = 'work1:mapfile'

/*
 * The cachesize variable sets the size of the in ram cache of NFS
 * directory entries.  The larger cachesize is set, the better directory
 * read/lookup performance will be.  The amount of ram consumed per entry
 * is about 142 bytes.
 */
cachesize = 1000

/*
 * The exports variable declares the partitions you wish to export.
 */
exports = 'stuff: src:'

/*
 * The mapsize variable declares the maximum number of files the server
 * can export.  A good rule of thumb in setting this variable is to allow
 * one entry per 2048 bytes of disk space.  Note that only one bit is allocated
 * per entry, so a 20000 entry bitmap is 2500 bytes long.
 */
mapsize = 20000

/*
 * The fsentries variable sets the maximum number of Amiga volumes that
 * can be exported.
 */
fsentries = 2

/*
 * syncperiod sets the time between cache/bitmap flushes.  Too small a value
 * and performance suffers; too large a value may damage the NFS directory
 * if a crash occurs between flushes.  Time is specified in seconds.
 */
syncperiod = 30

/*----------------------------------------------------------------------*/
/*                     DO NOT EDIT BEYOND THIS POINT                        */
/*----------------------------------------------------------------------*/

...

Save the file after you have edited the 6 variables listed above.

Now, make sure you are not running "portmapd".  Use "status".  If you are
running it, edit start-inet and remove the line which starts it.  The
functionality of portmapd is built into nfsd.  There is really no reason to
run portmapd anyway, unless you plan to run NFSd, so you can probably just
delete it.

To start the server type "rx startnfsd" or put that in your start-inet
script (near the end). Better yet, put the following in start-inet,  "run
>nil: <nil: rx startnfsd" so you the initial window will go away.

WARNING!  Once you have started the server, it will either use the existing
mapfile, or if it doesn't find one, it will create one. Creating a new
mapfile can take several minutes.  Once the server has built the mapfile,
it will get very confused and eventually crash if you directly modify the
volumes it is exporting.  How do you get around this?  Simple.  You can
just mount the volumes again using NFS. For example, suppose you are
exporting volume "src:" on an Amiga named "Plato".  Now if you want to use
volume "src:" on Plato, you need to enter this on Plato: "nfsmgr mount
plato:src: psrc".  Now you can write to psrc: instead of src:.  Note that
this is not necessary if you just want to read from src:.  

What are the disadvantages of this?  First, access time will be slower
because everything goes through the NFS server before it gets to the
fastfilesystem.  Second, it is easy to forget and write to src:. Ideally we
would disable write access to NFS exported volumes, but that has not been
done yet.  You will just have to be careful.  If you do accidentally delete
or add files on src:, you should stop the server by typing "rx quitnfsd". 
Then delete the mapfile and start the server again.

Suggestion: use the NFS server to export a volume containing only those
files that are needed by multiple machines.  Give that volume a long  name,
like "amiga_nfs_dir1:".  At the end of start-inet add the following (with
your host and volume name):

run >nil: <nil: rx startnfsd
wait 10                        ;let the server get started
nfsmgr mount plato:amiga_nfs_dir1: games

On the clients, put that last line in their start-inet or in the
inet:db/fstab file.  Now everyone has a games: directory.

QUESTIONS:

When I mount an Amiga NFS volume and I do an "ls -l", why do the uid and
gid fields have "-2" in them?  Answer:  Because "-2" is the NFS uid and gid
equivalent for unknown.  No owner was found in the mapfile on the server. 
Files created after the mapfile was built will have a proper uid and gid
(which will be lost if you ever delete the mapfile).

How can I tell what volumes are being exported?  Use "showmount".

-- end --    