		
			NFSd Rexx Callable Functions
			----------------------------
Error handling strategy.  Most functions return 0 to indicate successful
completion, or -1 to indicate that some sort of error occurred.  In cases
where an error has occurred, a specific error code is put in the variable
NFSDERROR.  The error code can be translated into an ascii string by calling
the function nfsderrtxt().  

Running the server.  Edit the file rexx/startnfsd.rexx and change the
following two variables to match the local configuration:

	exports - a string of space separated volume names that will be
		  made available over the network.  For example, to export
		  your sys: and dh0: partitions, exports would be set as
		  follows:
			
			exports = 'sys: dh0:'

	mapfile - location of NFS directory file.  If there is sufficient
		  ram available, it is recommended that the mapfile be
		  placed in a recoverable ram disk.  

There are several tuning parameters that may need to be changed:

	cachesize- sets the number of open filehandles or locks the server
		  maintains.  cachesize should be large on a system that
		  serves several machines.  A good setting for cachesize is
		  128 entries.

	mapsize - the NFS directory file is of fixed size.  The number of
		  files and directories that can be made visible is set
		  by the mapsize variable.  A good rule of thumb is to
		  allow one map entry per 2048 of disk space you will be
		  exporting, eg a 80 mByte disk should have at least
		  39000 map entries.

	fsentries - sets the maximum number of volumes that may be exported.
		  A reasonable value for fsentries is 5.

	syncperiod- sets the time between successive cache flushes in the
		  server.  syncperiod should be no more than about 30 seconds.

To start the NFS server type "run rx startnfsd".  Note that startnfsd does
not exit unless the server is told to quit by another rexx script.


--------------------------
buildmap()

Usage: buildmap(mapfile, mapentries, fsentries)
Instruct the NFS server to build a directory file called in the location
specified by mapfile.  The filesize will be mapentries*128 bytes in
length, and will contain fsentries export slots.  The buildmap call
should be followed by a call to initmap() at server initialization time.

Example:
	
	buildmap('ram:mapfile', 3000, 5') ==> 0

--------------------------
buildvol()

Usage: buildvol(volname)
A call to buildvol causes the NFS server to build an internal data
structure in the mapping file that represents the underlying heirarchy
on disk.  The effect of this call is to make all the files and directories
in a given volume available for access over the network.  Note that since
buildvol() must read each directory in the volume, it may take some time
to execute especially on large filesystems.

Example:

	buildvol('rad:') ==> 0

--------------------------
deletemap()

Usage: deletemap(mapentry)
Causes the NFS directory entry to be deleted.  The underlying heirarchy on
disk is not affected.  Calls to deletemap() are usually made to repair
damage to the NFS directory file after a crash, or to make certain files
invisible to network access.

Example:

	deletemap(10) ==> 0

--------------------------
flushbitmap()

Usage: flushbitmap()
Causes the NFS directory allocation bitmap to be dumped to disk.  flushbitmap
should be called approximately every thirty seconds.

Example:

	flushbitmap() ==> 0

--------------------------
flushcache()

Usage: flushcache()
Causes any open Filehandles and Locks held by NFS to be closed.  flushcache
should be called approximately every thirty seconds.

Example:
	
	flushcache() ==> 0

--------------------------
getpath()

Usage: getpath(mapentry)
Get the full pathname corresponding to a given mapentry.  Low numbered
mapentries may not correspond to a path; the following values are
returned in such cases:

	LABEL:	mapfile label, contains house keeping variables
	BITMAP:	map allocation bitmap entry
	EMPTY-EXPORT-SLOT: unallocated volume export entry

In cases where a particular mapentry is not allocated, "-unused-" is 
returned.  If a nonexistant mapentry is supplied, getpath returns "-1".

Example:

	getpath(0) ==> LABEL
	getpath(100000) ==> -1

--------------------------
initcache()

Usage: initcache(size)
Sizes and then initializes the NFS server cache.  Each cache entry
consumes approximately 142 bytes; this call will allocate size*142
bytes of system memory.

Example:
	
	initcache(256) ==> 0

--------------------------
initmap()

Usage: initmap(mapname)
Read in and initialize the NFS directory map file.  This file is created
by a previous call to buildmap.

Example:
	
	initmap('ram:mapfile') ==> 0

--------------------------
nfsderrtxt()

Usage: nfsderrtxt(code)
Return an error string corresponding to an NFS error code.

Example:
	
	nfsderrtxt(1) ==> "not owner, permission denied"

--------------------------
query()

Usage: query(varname)
Query the server and returns statistics about its usage.  The supplied
argument is used as the stem of a variable.  Statistics currently returned
are:

	varname.MAP_FS		- first volume export slot mapentry
	varname.MAP_NUMFS	- number of volume export slots
	varname.MAP_BITMAP	- first bitmap mapentry
	varname.MAP_BSIZE	- number of bitmap slots
	varname.MAP_NUMMAP	- total number of mapentries in mapfile

	varname.NFSD_CALL	- total number of network requests to NFS server
	varname.NFSD_NULL	- number of calls to null proc
	varname.NFSD_GETATTR	- number of get attribute calls
	varname.NFSD_SETATTR	- number of set attribute calls
	varname.NFSD_ROOT	- number of get root calls
	varname.NFSD_LOOKUP	- number of name lookup calls
	varname.NFSD_READLINK	- number of read link calls
	varname.NFSD_READ	- number of data read calls
	varname.NFSD_WRITECACHE	- number of write cache calls
	varname.NFSD_WRITE	- number of data write calls
	varname.NFSD_CREATE	- number of dir/file create calls
	varname.NFSD_REMOVE	- number of file remove calls
	varname.NFSD_RENAME	- number of file/dir rename calls
	varname.NFSD_LINK	- number of calls to make link
	varname.NFSD_SYMLINK	- number of calls to create sym links
	varname.NFSD_MKDIR	- number of calls to make directory
	varname.NFSD_RMDIR	- number of calls to remove directory
	varname.NFSD_READDIR	- number of read directory calls
	varname.NFSD_STATFS	- number of calls to get filesystem statistics
	varname.NFSD_UNKNOWN	- number of calls to unknown procedures

	varname.MNTD_CALL	- number of calls to mount server
	varname.MNTD_NULL	- number of calls to null proc
	varname.MNTD_MNT	- number of mount requests
	varname.MNTD_DUMP	- number of calls to show mount list
	varname.MNTD_UMNT	- number of unmount requests
	varname.MNTD_UMNTALL	- number of unmount all requests
	varname.MNTD_EXPORT	- number of calls to list exported filesystems
	varname.MNTD_EXPORTALL	- number of calls to list all exp filesystems
	varname.MNTD_UNKNOWN	- number of calls to unknown mount procs

	varname.REXX_CALL	- number of Rexx function invocations to NFSd

Example:
	
	drop stat
	call query(stat)
	say 'Number of NFS reads = ' || stat.nfsd_read	
	say 'Number of Rexx invocations = ' || stat.rexx_call

--------------------------
quit()

Usage: quit()
Cause the server to free its resources and exit.

Example:

	quit()	==> 0

--------------------------
