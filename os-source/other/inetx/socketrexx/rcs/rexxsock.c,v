head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.41.17;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * socket create/destroy
 */

#include <rexxinet.h>

/*
 * socket domain type	- open a socket in the specified domain of given type
 */

static struct {
	char	*domain, *type, d, t;
} socks[] = {
	{"inet", 	"stream", AF_INET, SOCK_STREAM},
	{"inet", 	"dgram",  AF_INET, SOCK_DGRAM},
	/* DECNET stuff    ---\ 		   */
	/* NOVELL stuff    --- |--- maybe someday! */
	/* APPLETALK stuff ---/			   */
	{0}
};

/*
 * socket domain type	- open socket of type <type> in domain <domain>.  Return
 *			  -1 if error, else a small positive integer is 
 *			  returned.
 */
Socket(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	long true;
	int s;

	for(s = 0; socks[s].domain; s++){
		if(strcasecmp(socks[s].domain, rm->rm_Args[1]) == 0
		   && ((socks[s].type == 0) || 
			strcasecmp(socks[s].type, rm->rm_Args[2]) == 0)){
			break;
		}
	}
	if(socks[s].domain == 0){
		seterror(rm, EPROTONOSUPPORT);
		return REPLY;
	}

	s = socket(socks[s].d, socks[s].t, 0);
	if(s < 0){
		seterror(rm, errno);
		return REPLY;
	}

	true = 1;
	if(ioctl(s, FIONBIO, &true) < 0){
		seterror(rm, errno);
		close(s);
	}

	p = newport();
	if(!p){
		seterror(rm, EMFILE);	
		close(s);
		return REPLY;
	}
	p->sock = s;

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = CVi2arg(p - ports, 3);
	}
	return REPLY;
}

/*
 * Close a socket.  freeport() actually does all the work.
 */
Sclose(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	freeport(p);
	return REPLY;
}
@
