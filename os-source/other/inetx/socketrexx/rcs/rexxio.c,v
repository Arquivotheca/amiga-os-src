head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.29.11;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * rexx send/recv primitives
 */

#include <rexxinet.h>

/*
 * send data on a socket, with optional address.  If address is omitted, then
 * it is assumed that the socket has already done a connect().
 * result = sendto(sock, data [,addr])
 */
Ssendto(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	register struct IOExtSer *iop;
	register struct RexxArg *rap;
	int s, cnt;

	rap = (struct RexxArg *)(((long)rm->rm_Args[2]) - 8);

	cnt = send(p->sock, rm->rm_Args[2], rap->ra_Length, 0);
	if(cnt < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
		return REPLY;
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = CVi2arg(cnt, 8);
	}
	return REPLY;
}

/*
 * receive data from a socket; if addr is present, return address of other
 * socket.
 * result = recvfrom(sock, data, cnt [,addr])
 */
Srecvfrom(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	register struct IOExtSer *iop;
	int cnt, bytesread, len;
	struct sockaddr sa;
	char *bufp;

	bufp = 0; bytesread = -1;
	cnt = atoi(rm->rm_Args[3]);
	if(cnt <= 0){
		errno = EINVAL;
		goto rtn;
	}
	
	bufp = (char *)AllocMem(cnt, MEMF_CLEAR|MEMF_PUBLIC);
	if(bufp == 0){
		errno = ENOMEM;
		goto rtn;
	}

	len = sizeof(sa);
	bytesread = recvfrom(p->sock, bufp, cnt, 0, &sa, &len);

	if(bytesread > 0){
		if(setvar(rm, rm->rm_Args[2], bufp, bytesread) < 0){
			bytesread = -1;
		}
	}

rtn:	if(bufp){
		FreeMem(bufp, cnt);
	}

	if(bytesread < 0){ /* error occurred, errno has explanation */
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}
		seterror(rm, errno);
	} else if(rm->rm_Action & RXFF_RESULT){ /* success */
		rm->rm_Result2 = CVi2arg(bytesread, 8);
		if(rm->rm_Args[4]){
			satorvi(&sa, &len, rm, rm->rm_Args[4]);
		}
	}

	return REPLY;
}

@
