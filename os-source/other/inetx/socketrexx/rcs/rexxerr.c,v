head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.28.59;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * error handling routines
 */

#include <rexxinet.h>

/*
 * nettext - return ascii error string for given network error condition
 */
nettext(p, rm)
	struct port *p;
	struct RexxMsg *rm;
{
	int err, i;
	char *msg;

	msg = "Unknown error code";
	if(rm->rm_Args[1] != 0){
		err = atoi(rm->rm_Args[1]);
		if(err < sys_nerr){
			msg = sys_errlist[err];
		}
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(msg, strlen(msg));
	}
	return REPLY;
}

/*
 * seterror - 	set function return to -1, and set RVI variable INETerror
 *	  	to reflect error code.  If the application has not indicated
 *		it wants a result string then just set rm_Result1 to the
 *		error code.
 */
seterror(rm, code)
	struct RexxMsg *rm;
	int code;
{
	char buf[10];

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result1 = 0;
		rm->rm_Result2 = CVi2arg(-1, 8);
	} else {
		rm->rm_Result1 = code;
		rm->rm_Result2 = 0;
	}

	if(CheckRexxMsg(rm)){
		CVi2a(buf, code, 8);
		(void)SetRexxVar(rm, "INETERROR", buf, strlen(buf));
	}
}

@
