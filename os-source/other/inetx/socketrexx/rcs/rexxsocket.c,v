head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.41.21;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * basic socket primitives
 */

#include <rexxinet.h>

/*
 * shutdown part or all of a socket.
 */
Sshutdown(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	int how;

	if(strcasecmp("input", rm->rm_Args[2]) == 0){
		how = 0;
	} else if(strcasecmp("output", rm->rm_Args[2]) == 0){
		how = 1;
	} else if(strcasecmp("both", rm->rm_Args[2]) == 0){
		how = 2;
	} else {
		seterror(rm, EINVAL);
		return REPLY;
	}

	if(shutdown(p->sock, how) < 0){
		seterror(rm, errno);
	}

	return REPLY;
}

/*
 * accept a connection from a socket in the listen state
 */
Saccept(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct sockaddr sa;
	int len, new_s;

	len = sizeof(sa);
	new_s = accept(p->sock, &sa, &len);
	if(new_s < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
		return REPLY;
	}

	if(rm->rm_Args[2] && satorvi(&sa, len, rm, rm->rm_Args[2]) < 0){
		seterror(rm, errno);
		close(new_s);
		return REPLY;
	}

	p = newport();
	if(p == 0){
		close(new_s);
		seterror(rm, EMFILE);
		return REPLY;
	}

	p->sock = new_s;
	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = CVi2arg(p - ports, 3);
	}
	return REPLY;
}

/*
 * cause socket to enter listen state
 */
Slisten(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	int num;

	if(listen(p->sock, atoi(rm->rm_Args[2])) < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
	}

	return REPLY;
}

/*
 * get network address of other socket when socket is in connected
 * state
 */
Sgetpeername(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct sockaddr sa;
	int s, len;

	len = sizeof(sa);
	if(getpeername(p->sock, &sa, &len) < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
	}

	if(satorvi(&sa, len, rm, rm->rm_Args[2]) < 0){
		seterror(rm, errno);
	}
	return REPLY;
}

/*
 * get network address of local socket
 */
Sgetsockname(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct sockaddr_in sa;
	int len;

	len = sizeof(sa);
	if(getsockname(p->sock, &sa, &len) < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
		return REPLY;
	}

	if(satorvi(&sa, len, rm, rm->rm_Args[2]) < 0){
		seterror(rm, errno);
	}
	return REPLY;
}

/*
 * set the network address of local socket
 */
Sbind(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct sockaddr_in sa;

	if(rvitosa(rm, rm->rm_Args[2], &sa, sizeof(sa)) < 0){
		seterror(rm, errno);
		return REPLY;
	}

	if(bind(p->sock, &sa, sizeof(sa)) < 0){
		if(errno == EWOULDBLOCK){
			return HOLD(p-ports);
		}

		seterror(rm, errno);
	}
	return REPLY;
}

/*
 * establish a connection for communications
 */
Sconnect(p, rm, rerun)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct sockaddr_in sa;

	if(rvitosa(rm, rm->rm_Args[2], &sa, sizeof(sa)) < 0){
		seterror(rm, errno);
		return REPLY;
	}

	if(connect(p->sock, &sa, sizeof(sa)) < 0){
		if(errno == EWOULDBLOCK || errno == EINPROGRESS){
			return HOLD(p-ports);
		}

		if(rerun == RERUN && errno == EISCONN){
			return REPLY;
		}

		seterror(rm, errno);
	}
	return REPLY;
}

/*
 * charswaiting port	- return number of characters available to be read
 *			  from given port
 */
charswaiting(p, rm)
	struct port *p;
	struct RexxMsg *rm;
{
	register struct IOExtSer *iop;
	int cnt;

	if(ioctl(p->sock, FIONREAD, &cnt) < 0){
		seterror(rm, errno);
		return REPLY;
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = CVi2arg(cnt, 8);
	}
	return REPLY;
}
@
