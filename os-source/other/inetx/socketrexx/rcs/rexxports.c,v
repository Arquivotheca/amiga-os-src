head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.41.07;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * port allocation/deallocation
 *
 * Note that port 0 is used to catch errors and is never allocated!
 */

#include <rexxinet.h>
#include <ctype.h>

struct port ports[NUMPORTS];

/*
 * initports	- initialize ports structure
 */
void initports()
{
	int i;

	for(i = 0; i < NUMPORTS; i++){
		ports[i].sock = -1;
		ports[i].cmd = -1;
		ports[i].inuse = 0;
	}
}

/*
 * newport	- find a new port to use
 */
struct port *
newport()
{
	int i;
	
	for(i = 1; i < NUMPORTS; i++){
		if(!ports[i].inuse){
			break;
		}
	}

	if(i == NUMPORTS){
		return 0;
	} else {
		ports[i].inuse = 1;
		return &ports[i];
	}
}

/*
 * free a port instance: return pending messages, close socket
 */
freeport(p)
	register struct port *p;
{
	if(p->rm){
		seterror(p->rm, EINTR);
		ReplyMsg(p->rm);
		p->rm = 0;
	}

	if(p->sock > 0){
		FD_CLR(p->sock, &wait);
		close(p->sock);
		p->sock = -1; 
	}

	p->inuse = 0; 
	p->cmd = -1;
}

/*
 * getport	- map first argument of rexxmsg into port specifier.  Set
 *		  EBADF error return if mapping is invalid.  
 */
struct port *
getport(rm)
	register struct RexxMsg *rm;
{
	register int n, c;
	register char *p;

	n = 0; p = (char *)rm->rm_Args[1]; 
	while(c = *p++){
		if(c >= '0' && c <= '9'){
			n = (n<<3) + (n<<2) + c - '0';
		} else if(isspace(c)){
			continue;
		} else {
			n = -1;
			break;
		}			
	}
	if(n <= 0 || n >= NUMPORTS|| !ports[n].inuse){
		seterror(rm, EBADF);
		return 0;
	}
	
	return &ports[n];
}

@
