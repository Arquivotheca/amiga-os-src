head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     91.02.07.10.29.16;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * name binding/lookup primitives
 */

#include <rexxinet.h>
#include <pwd.h>

/*
 * Given service name and protocol, return port number (ie local address)
 * getservbyname(servicename, protocol) ==> number
 */
Sgetservbyname(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct servent *svp;

	svp = getservbyname(rm->rm_Args[1], rm->rm_Args[2]);
	if(rm->rm_Action & RXFF_RESULT){
		if(svp){
			rm->rm_Result2 = CVi2arg(svp->s_port, 8);
		} else {
			rm->rm_Result2 = (long)CreateArgstring("", 1);
		}
	}
	return REPLY;
}

/*
 * given port number, return server name.
 * getservbyport(port) ==> string
 */
Sgetservbyport(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct servent *svp;
	char *port;

	svp = getservbyname(htons(atoi(rm->rm_Args[1])), rm->rm_Args[2]);
	if(svp){
		port = svp->s_name;
	} else {
		port = "";
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(port, strlen(port));
	}
	return REPLY;
}

/*
 * gethostbyname - translate hostname into ascii address. AF_INET specific!
 * gethostbyname(hostname, domainname) ==> string
 */
Sgethostbyname(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct hostent *hvp;
	char *host;

	hvp = gethostbyname(rm->rm_Args[1]);
	if(hvp){
		host = inet_ntoa(*(struct in_addr *)hvp->h_addr_list[0]);
	} else {
		host = "";
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(host, strlen(host));
	}
	return REPLY;
}

/*
 * gethostbyaddr - this instantiation is inet specific since this routine
 *		   needs to know how to translate a stem addr back into
 *		   packed format address.
 * gethostbyaddr(hostaddr) ==> string
 */
Sgethostbyaddr(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	long addr, inet_addr();
	struct hostent *hvp;
	char *host;

	/*
	 * translate address back into a packed format.  AF_INET specific!
	 */
	addr = inet_addr(rm->rm_Args[1]);
	hvp = gethostbyaddr(&addr, sizeof(addr), AF_INET);
	if(hvp){
		host = hvp->h_name;
	} else {
		host = "";
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(host, strlen(host));
	}
	return REPLY;
}

/*
 * gethostname() - return hostname of machine
 */
Sgethostname(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	char host[64];

	if(gethostname(host, sizeof(host)-1) < 0){
		seterror(rm, errno);
		return REPLY;
	}

	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(host, strlen(host));
	}
	return REPLY;
}

/*
 * getuser() - return current user setting
 */
Sgetuser(p, rm)
	struct port *p;
	register struct RexxMsg *rm;
{
	struct passwd *pw;
	char *up;

	up = "";
	pw = getpwuid(getuid());
	if(pw && pw->pw_name){
		up = pw->pw_name;
	}
	if(rm->rm_Action & RXFF_RESULT){
		rm->rm_Result2 = (long)CreateArgstring(up, strlen(up));
	}
	return REPLY;
}

@
