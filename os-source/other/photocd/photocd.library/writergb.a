*   $Id: writergb.a,v 1.1 93/11/29 17:46:19 jjszucs Exp $

        XDEF    _writeRGB

        OPT     P=68020             ; Motorola MC68020 CPU or above

*
*   N.B.:
*
*   This code is heavy magic. In particular, the significance of the constants
*   in YCC tables and in the YCC-to-RGB conversion routine is arcane. The
*   original was extracted from the Photo CD Access Toolkit for Windows source
*   code (in the C language). This is a down-coded version of that code.
*   Detailed documentation was not available at the time of writing and
*   the algorithm is not completely understood. However, it is efficent
*   and effective.
*

        SECTION DATA

*   YCC to RGB conversion tables

ycc5Tab:
        DC.W        0,11,22,33,43,54,65,76
        DC.W    	87,98,109,120,130,141,152,163
	    DC.W        174,185,196,206,217,228,239,250
        DC.W    	261,272,283,293,304,315,326,337
        DC.W    	348,359,369,380,391,402,413,424
        DC.W    	435,446,456,467,478,489,500,511
        DC.W    	522,532,543,554,565,576,587,598
        DC.W    	609,619,630,641,652,663,674,685
        DC.W    	696,706,717,728,739,750,761,772
        DC.W    	782,793,804,815,826,837,848,859
        DC.W    	869,880,891,902,913,924,935,945
        DC.W    	956,967,978,989,1000,1011,1022,1032
        DC.W    	1043,1054,1065,1076,1087,1098,1108,1119
	    DC.W        1130,1141,1152,1163,1174,1185,1195,1206
        DC.W    	1217,1228,1239,1250,1261,1271,1282,1293
        DC.W    	1304,1315,1326,1337,1348,1358,1369,1380
        DC.W    	1391,1402,1413,1424,1434,1445,1456,1467
        DC.W    	1478,1489,1500,1511,1521,1532,1543,1554
        DC.W    	1565,1576,1587,1597,1608,1619,1630,1641
        DC.W    	1652,1663,1674,1684,1695,1706,1717,1728
        DC.W    	1739,1750,1760,1771,1782,1793,1804,1815
	    DC.W        1826,1837,1847,1858,1869,1880,1891,1902
	    DC.W        1913,1923,1934,1945,1956,1967,1978,1989
	    DC.W        2000,2010,2021,2032,2043,2054,2065,2076
        DC.W    	2087,2097,2108,2119,2130,2141,2152,2163
        DC.W    	2173,2184,2195,2206,2217,2228,2239,2250
        DC.W    	2260,2271,2282,2293,2304,2315,2326,2336
	    DC.W        2347,2358,2369,2380,2391,2402,2413,2423
	    DC.W        2434,2445,2456,2467,2478,2489,2499,2510
        DC.W    	2521,2532,2543,2554,2565,2576,2586,2597
        DC.W    	2608,2619,2630,2641,2652,2662,2673,2684
	    DC.W        2695,2706,2717,2728,2739,2749,2760,2771

ycc1Tab:
        DC.W    	0,3,7,10,14,17,21,24
        DC.W    	28,31,34,38,41,45,48,52
        DC.W    	55,59,62,65,69,72,76,79
        DC.W    	83,86,90,93,96,100,103,107
        DC.W    	110,114,117,120,124,127,131,134
	    DC.W        138,141,145,148,151,155,158,162
        DC.W    	165,169,172,176,179,182,186,189
        DC.W    	193,196,200,203,207,210,213,217
        DC.W    	220,224,227,231,234,238,241,244
        DC.W    	248,251,255,258,262,265,269,272
        DC.W    	275,279,282,286,289,293,296,299
        DC.W    	303,306,310,313,317,320,324,327
        DC.W    	330,334,337,341,344,348,351,355
        DC.W    	358,361,365,368,372,375,379,382
        DC.W    	386,389,392,396,399,403,406,410
        DC.W    	413,417,420,423,427,430,434,437
        DC.W    	441,444,448,451,454,458,461,465
        DC.W    	468,472,475,478,482,485,489,492
        DC.W    	496,499,503,506,509,513,516,520
        DC.W    	523,527,530,534,537,540,544,547
        DC.W    	551,554,558,561,565,568,571,575
        DC.W    	578,582,585,589,592,596,599,602
        DC.W    	606,609,613,616,620,623,627,630
        DC.W    	633,637,640,644,647,651,654,657
        DC.W    	661,664,668,671,675,678,682,685
        DC.W        688,692,695,699,702,706,709,713
        DC.W    	716,719,723,726,730,733,737,740
        DC.W    	744,747,750,754,757,761,764,768
        DC.W    	771,775,778,781,785,788,792,795
        DC.W    	799,802,806,809,812,816,819,823
        DC.W    	826,830,833,837,840,843,847,850
        DC.W    	854,857,861,864,867,871,874,878

ycc8Tab:
        DC.W    	0,18,35,53,71,89,106,124
        DC.W    	142,160,177,195,213,231,248,266
        DC.W    	284,302,319,337,355,373,390,408
        DC.W    	426,444,461,479,497,515,532,550
        DC.W    	568,586,603,621,639,656,674,692
        DC.W    	710,727,745,763,781,798,816,834
        DC.W    	852,869,887,905,923,940,958,976
        DC.W    	994,1011,1029,1047,1065,1082,1100,1118
        DC.W    	1136,1153,1171,1189,1207,1224,1242,1260
        DC.W    	1278,1295,1313,1331,1348,1366,1384,1402
        DC.W    	1419,1437,1455,1473,1490,1508,1526,1544
        DC.W    	1561,1579,1597,1615,1632,1650,1668,1686
        DC.W    	1703,1721,1739,1757,1774,1792,1810,1828
        DC.W    	1845,1863,1881,1899,1916,1934,1952,1969
        DC.W    	1987,2005,2023,2040,2058,2076,2094,2111
        DC.W    	2129,2147,2165,2182,2200,2218,2236,2253
        DC.W    	2271,2289,2307,2324,2342,2360,2378,2395
        DC.W    	2413,2431,2449,2466,2484,2502,2520,2537
        DC.W    	2555,2573,2591,2608,2626,2644,2661,2679
        DC.W    	2697,2715,2732,2750,2768,2786,2803,2821
        DC.W    	2839,2857,2874,2892,2910,2928,2945,2963
        DC.W    	2981,2999,3016,3034,3052,3070,3087,3105
        DC.W    	3123,3141,3158,3176,3194,3212,3229,3247
        DC.W    	3265,3282,3300,3318,3336,3353,3371,3389
        DC.W    	3407,3424,3442,3460,3478,3495,3513,3531
        DC.W    	3549,3566,3584,3602,3620,3637,3655,3673
        DC.W    	3691,3708,3726,3744,3762,3779,3797,3815
        DC.W    	3833,3850,3868,3886,3904,3921,3939,3957
        DC.W    	3974,3992,4010,4028,4045,4063,4081,4099
        DC.W    	4116,4134,4152,4170,4187,4205,4223,4241
        DC.W    	4258,4276,4294,4312,4329,4347,4365,4383
        DC.W    	4400,4418,4436,4454,4471,4489,4507,4525

ycc7Tab:
        DC.W    	0,15,29,44,58,73,87,102
        DC.W        117,131,146,160,175,189,204,219
        DC.W	    233,248,262,277,291,306,321,335
        DC.W		350,364,379,393,408,423,437,452
        DC.W		466,481,495,510,525,539,554,568
        DC.W		583,597,612,627,641,656,670,685
        DC.W		699,714,729,743,758,772,787,801
        DC.W		816,831,845,860,874,889,903,918
        DC.W		933,947,962,976,991,1005,1020,1035
        DC.W		1049,1064,1078,1093,1107,1122,1137,1151
        DC.W		1166,1180,1195,1209,1224,1239,1253,1268
        DC.W		1282,1297,1311,1326,1341,1355,1370,1384
        DC.W		1399,1413,1428,1443,1457,1472,1486,1501
        DC.W		1515,1530,1545,1559,1574,1588,1603,1617
        DC.W		1632,1647,1661,1676,1690,1705,1719,1734
        DC.W		1749,1763,1778,1792,1807,1821,1836,1851
        DC.W		1865,1880,1894,1909,1924,1938,1953,1967
        DC.W		1982,1996,2011,2026,2040,2055,2069,2084
        DC.W		2098,2113,2128,2142,2157,2171,2186,2200
        DC.W		2215,2230,2244,2259,2273,2288,2302,2317
        DC.W		2332,2346,2361,2375,2390,2404,2419,2434
        DC.W		2448,2463,2477,2492,2506,2521,2536,2550
        DC.W		2565,2579,2594,2608,2623,2638,2652,2667
        DC.W		2681,2696,2710,2725,2740,2754,2769,2783
        DC.W		2798,2812,2827,2842,2856,2871,2885,2900
        DC.W		2914,2929,2944,2958,2973,2987,3002,3016
        DC.W		3031,3046,3060,3075,3089,3104,3118,3133
        DC.W		3148,3162,3177,3191,3206,3220,3235,3250
        DC.W		3264,3279,3293,3308,3322,3337,3352,3366
        DC.W		3381,3395,3410,3424,3439,3454,3468,3483
        DC.W    	3497,3512,3526,3541,3556,3570,3585,3599
        DC.W	    3614,3628,3643,3658,3672,3687,3701,3716

ycc3Tab:
        DC.W		0,7,15,22,30,37,45,52
        DC.W		59,67,74,82,89,96,104,111
        DC.W		119,126,134,141,148,156,163,171
        DC.W		178,185,193,200,208,215,223,230
        DC.W		237,245,252,260,267,274,282,289
        DC.W		297,304,312,319,326,334,341,349
        DC.W		356,363,371,378,386,393,401,408
        DC.W		415,423,430,438,445,452,460,467
        DC.W		475,482,490,497,504,512,519,527
        DC.W		534,541,549,556,564,571,579,586
        DC.W		593,601,608,616,623,630,638,645
        DC.W		653,660,668,675,682,690,697,705
        DC.W		712,719,727,734,742,749,757,764
        DC.W		771,779,786,794,801,808,816,823
        DC.W		831,838,846,853,860,868,875,883
        DC.W		890,897,905,912,920,927,935,942
        DC.W		949,957,964,972,979,986,994,1001
        DC.W		1009,1016,1024,1031,1038,1046,1053,1061
        DC.W		1068,1075,1083,1090,1098,1105,1113,1120
        DC.W		1127,1135,1142,1150,1157,1164,1172,1179
        DC.W		1187,1194,1202,1209,1216,1224,1231,1239
        DC.W		1246,1253,1261,1268,1276,1283,1291,1298
        DC.W		1305,1313,1320,1328,1335,1342,1350,1357
        DC.W		1365,1372,1380,1387,1394,1402,1409,1417
        DC.W		1424,1431,1439,1446,1454,1461,1469,1476
        DC.W		1483,1491,1498,1506,1513,1520,1528,1535
        DC.W		1543,1550,1558,1565,1572,1580,1587,1595
        DC.W		1602,1609,1617,1624,1632,1639,1647,1654
        DC.W		1661,1669,1676,1684,1691,1698,1706,1713
        DC.W		1721,1728,1736,1743,1750,1758,1765,1773
        DC.W		1780,1787,1795,1802,1810,1817,1825,1832
        DC.W		1839,1847,1854,1862,1869,1876,1884,1891

        SECTION CODE

*       "Shift to the left! Shift to the right!
*       Push up! Pop down!
*       Byte, byte, byte!"
*           - Assembly language programmers' cheer

******************************************************************************
*
*   NAME
*       writeRGB()   -   write one line of RGB data from Y, C1, and C2 source
*                        to client image buffer
*
*   SYNOPSIS
*       void writeRGB(UBYTE *pYSrc,UBYTE *pC1Src,UBYTE *pC2Src,UBYTE *pDest,
*                             a0           a1            a2            a3
*                   UWORD nPixels);
*                          d0              a4
*
*   FUNCTION
*       Write one line of RGB data from raw Y, C1, and C2 source data to
*       client image buffer, interpolating C1 and C2 for pixels without
*       chrominance data and converting to RGB.
*
*   INPUTS
*       pYSrc (A0)      -   Y source data
*       pC1Src (A1)     -   C1 source data
*       pC2Src (A2)     -   C2 source data
*       pDest (A3)      -   Destination image buffer
*       nPixels (D0)    -   Number of pixels to copy
*
*   RESULT
*       All registers preserved.
*
*   EXAMPLE
*
*   NOTES
*       nPixels must be an even number greater than 3.
*
*   BUGS
*
*   SEE ALSO
*
******************************************************************************

*
*   N.B.:
*       This code is carefully optimized and is the result of much
*       discussion between Darren Greenwald (darren@cbmvax) and John J.
*       Szucs (jjszucs@cbmvax). A very strong emphasis has been placed
*       on avoiding memory accesses, which can be locked out by the
*       AGA chipset if a high-bandwidth display mode (such as
*       high-resolution, interlaced, maximum-overscan HAM8) is being
*       used on a chip RAM-only system, such as the CD32.
*
*       Change this code only with extreme care. Remember:
*           "If builders built buildings the way programmers
*           write programs, the first woodpecker would have
*           destroyed civilization."
*

_writeRGB:

        *
        *   Entry
        *

        MOVEM.L     A0-A5/D0-D7,-(SP)       ;   Push A0-A5, D0-D7 to stack

        *
        *   Initialization
        *

        SUBQ.W      #2,D0                   ;   nPixels=nPixels-2
                                            ;   -1 for DBRA (loops until counter
                                            ;       is -1, not 0 as would be expected)
                                            ;   -1 to handle last pixel as
                                            ;       special case

        ;   Pre-load D2 with xx|Y(0)|C1(0)|C2(0)
        MOVEQ       #0,D2                   ;   Clear D2
        MOVE.B      (A0)+,D2                ;   D2(16-23)=Y(0)
        SWAP        D2                      ;   D2( 8-15)=C1(0)
        MOVE.B      (A1)+,D2
        LSL.W       #8,D2                   ;   D2( 0- 7)=C2(0)
        MOVE.B      (A2)+,D2

        *
        *   Start of pixel processing loop
        *

1$:

        *
        *   Copy and interpolate
        *

        *   Register usage in this section of code:
        *       D1  =   x |   Y(n) |   C1(n) |   C2(n)
        *       D2  =   x | Y(n+1) | C1(n+1) | C2(n+1)
        *       D3  =   x | Y(n+2) | C2(n+2) | C2(n+2)
        *       D4  =   scratch
        *       D5  =   scratch

        MOVE.L      D2,D1                   ;   Read x|Y(n)|C1(n)|C2(n) from
                                            ;   n+1 look-ahead

        MOVE.L      D3,D2                   ;   Move n+2 look-ahead to n+1 look-ahead

        BTST        #0,D0                   ;   For even pixels ...
        BNE         99$

        MOVEQ       #0,D2                   ;   Clear D2 and D3
        MOVEQ       #0,D3

        MOVE.B      (A0)+,D2                ;   D2(16-23)=Y(n+2)

        MOVE.B      (A0)+,D3                ;   D3(16-23)=Y(n+2)

        MOVEQ       #0,D4                   ;   D4=C1(n+2)
        MOVE.B      (A1)+,D4
        LSL.L       #8,D3                   ;   D3( 8-15)=D4
        MOVE.B      D4,D3

        MOVE.L      D1,D5                   ;   D5=C1(n)
        LSR.L       #8,D5
        ANDI.W      #$FF,D5

        ADD.W       D5,D4                   ;   D4=(D4+D5)/2
        ASR.W       #1,D4
        LSL.L       #8,D2                   ;   D2( 8-15)=D4
        MOVE.B      D4,D2

        MOVEQ       #0,D4                   ;   D4=C2(n+2)
        MOVE.B      (A2)+,D4
        LSL.L       #8,D3                   ;   D3( 0- 7)=D4
        MOVE.B      D4,D3

        *   N.B.:
        *       D5 is assumed to be 0 based on code above.
*   Was:
*       MOVEQ       #0,D5                   ;   D5=C2(n)
        MOVE.B      D1,D5                   ;   D5=C2(n)

        ADD.W       D5,D4                   ;   D4=(D4+D5)/2
        ASR.W       #1,D4
        LSL.L       #8,D2                   ;   D2( 0- 7)=D4
        MOVE.B      D4,D2

        *
        *   Convert to RGB
        *

99$:
        *   Register usage in this section of code:
        *       D1  =   x |  Y(n) |   C1(n) |  C2(n)
        *       D2  =   unused and preserved
        *       D3  =   unused and preserved
        *       D4  =   R(n)
        *       D5  =   G(n)
        *       D6  =   B(n)
        *       D7  =   scratch
        *       A5  =   YCC-to-RGB table pointer (argument)

        ;   Compute luminance factors in R, G, and B
        LEA         ycc5Tab(PC),A5          ;   A5=ycc5Tab
        SWAP        D1                      ;   Use Y(n) (bits 16-23 of D1)
                                            ;       as index
                                            ;   N.B.: Depends on bits 24-31 of D1
                                            ;       being 0
        MOVE.W      (0,A5,D1.W*2),D4        ;   D4 (R)=ycc5Tab[Y(n)]
        SWAP        D1                      ;   Restore D1 to x|Y|C1|C2
        MOVE.W      D4,D5                   ;   D5 (G)=D4
        MOVE.W      D4,D6                   ;   D6 (B)=D4

        ;   Compute R component
        LEA         ycc7Tab(PC),A5          ;   A5=ycc7Tab
        MOVEQ       #0,D7                   ;   D7=C2(n)
        MOVE.B      D1,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc7Tab[D7]
        ADD.W       D7,D4                   ;   D4=D4+D7
        SUBI.W      #1992,D4                ;   D4=D4-1992
        ASR.W       #3,D4                   ;   D4=D4/8

        ;   Compute G component
        LEA         ycc1Tab(PC),A5          ;   A5=ycc1Tab
        MOVE.W      D1,D7                   ;   D7=C1(n)
        LSR.W       #8,D7
        ANDI.W      #$FF,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc1Tab[D7]
        SUB.W       D7,D5                   ;   D5=D5-D7
        LEA         ycc3Tab(PC),A5          ;   A5=ycc3Tab
        MOVEQ       #0,D7                   ;   D7=C2(n)
        MOVE.B      D1,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc3Tab[D7]
        SUB.W       D7,D5                   ;   D5=D5-D7
        ADDI.W      #1557,D5                ;   D5=D5+1557
        ASR.W       #3,D5                   ;   D5=D5/8

        ;   Compute B component
        LEA         ycc8Tab(PC),A5          ;   A5=ycc8Tab
        MOVE.W      D1,D7                   ;   D7=C1(n)
        LSR.W       #8,D7
        MOVE.W      (0,A5,D7.W*2),D7
        ADD.W       D7,D6                   ;   D6=D6+D7
        SUBI.W      #2763,D6                ;   D6=D6-2763
        ASR.W       #3,D6                   ;   D6=D6/8

        *
        *   Clamp R, G, and B to 0...255
        *

        *   Register usage in this section of code:
        *       D1  =   unused and preserved
        *       D2  =   unused and preserved
        *       D3  =   unused and preserved
        *       D4  =   R(n)
        *       D5  =   G(n)
        *       D6  =   B(n)
        *       D7  =   scratch
        *

        *   Clamp R component
        TST.W       D4                      ;   If D4 R(n) < 0,
        BMI         2$                      ;       go to 2$
        CMP.W       #255,D4                 ;   If D4 R(n) <=255,
        BLE         3$                      ;       clamp next component
        ; D4 R(n) >255
        MOVEQ       #-1,D4                  ;   R(n)=255
        BRA         3$                      ;   Clamp next component
2$:
        MOVEQ       #0,D4                   ;   R(n)=0

3$:
        *   Clamp G component
        TST.W       D5                      ;   If D5 G(n) < 0,
        BMI         4$                      ;       go to 4$
        CMP.W       #255,D5                 ;   If D5 G(n) <=255,
        BLE         5$                      ;       clamp next component
        ; D5 G(n) >255
        MOVEQ       #-1,D5                  ;   G(n)=255
        BRA         5$                      ;   Clamp next component
4$:
        MOVEQ       #0,D5                   ;   G(n)=0

5$:
        *   Clamp B component
        TST.W       D6                      ;   If D6 B(n) < 0,
        BMI         6$                      ;       go to 6$
        CMP.W       #255,D6                 ;   If D6 B(n) <=255,
        BLE         10$                     ;       continue
        ; D6 B(n) >255
        MOVEQ       #-1,D6                  ;   B(n)=255
        BRA         10$                     ;   Continue
6$:
        MOVEQ       #0,D6                   ;   B(n)=255

10$:
        *
        *   Write pixel to image buffer
        *

        *   Register usage in this section of code:
        *       D1 = unused and preserved
        *       D2 = unused and preserved
        *       D3 = unused and preserved
        *       D4 = R(n) | G(n) | B(n)

        *   On entry:
        *       D4 (0-7) = R(n)
        *       D5 (0-7) = G(n)
        *       D6 (0-7) = B(n)

        LSL.L       #8,D4                   ;   D4 bits 8-15 = G(n)
        MOVE.B      D5,D4
        LSL.L       #8,D4                   ;   D4 bits 0- 7 = B(n)
        MOVE.B      D6,D4
        ANDI.L      #$00FFFFFF,D4           ;   Mask out bits 24-31 of D4
        MOVE.L      D4,(A3)+                ;   *(pDest++)=D4

        *
        *   End of pixel processing loop
        *

        DBRA        D0,1$                   ;   Loop until all pixels are processed

        *
        *   Special-case for last pixel
        *

                                            ;   D1 contains xx|Y(n-1)|C1(n-1)|C2(n-1)
                                            ;   and D2 contains xx|Y(n)|junk|junk
                                            ;       at this point

        ROR.L       #8,D1                   ;   Rotate Y(n-1) into D1( 0- 7)
        ROR.L       #8,D1
        ROR.L       #8,D2                   ;   Rotate Y(n) into D2(0 - 7)
        ROR.L       #8,D2
        MOVE.B      D2,D1                   ;   D1( 0- 7)=Y(n)
        ROL.L       #8,D1                   ;   Rotate D1 back to xx|Y(n)|C1(n)|C2(n)
        ROL.L       #8,D1

        *
        *   Convert to RGB
        *

        *   Register usage in this section of code:
        *       D1  =   x |  Y(n) |   C1(n) |  C2(n)
        *       D2  =   unused and preserved
        *       D3  =   unused and preserved
        *       D4  =   R(n)
        *       D5  =   G(n)
        *       D6  =   B(n)
        *       D7  =   scratch
        *       A5  =   YCC-to-RGB table pointer
        *
        *   N.B.:   This code could be improved, since D2 and D3 may now
        *           be destroyed, but the impact is minor, since this
        *           is only run for the last pixel of each line.

        ;   Compute luminance factors in R, G, and B
        LEA         ycc5Tab(PC),A5          ;   A5=ycc5Tab
        SWAP        D1                      ;   Use Y(n) (bits 16-23 of D1)
                                            ;       as index
                                            ;   N.B.: Depends on bits 24-31 of D1
                                            ;       being 0
        MOVE.W      (0,A5,D1.W*2),D4        ;   D4 (R)=ycc5Tab[Y(n)]
        SWAP        D1                      ;   Restore D1 to x|Y|C1|C2
        MOVE.W      D4,D5                   ;   D5 (G)=D4
        MOVE.W      D4,D6                   ;   D6 (B)=D4

        ;   Compute R component
        LEA         ycc7Tab(PC),A5          ;   A5=ycc7Tab
        MOVEQ       #0,D7                   ;   D7=C2(n)
        MOVE.B      D1,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc7Tab[D7]
        ADD.W       D7,D4                   ;   D4=D4+D7
        SUBI.W      #1992,D4                ;   D4=D4-1992
        ASR.W       #3,D4                   ;   D4=D4/8

        ;   Compute G component
        LEA         ycc1Tab(PC),A5          ;   A5=ycc1Tab
        MOVE.L      D1,D7                   ;   D7=C1(n)
        LSR.W       #8,D7
        ANDI.W      #$FF,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc1Tab[D7]
        SUB.W       D7,D5                   ;   D5=D5-D7
        LEA         ycc3Tab(PC),A5          ;   A5=ycc3Tab
        MOVEQ       #0,D7                   ;   D7=C2(n)
        MOVE.B      D1,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc3Tab[D7]
        SUB.W       D7,D5                   ;   D5=D5-D7
        ADDI.W      #1557,D5                ;   D5=D5+1557
        ASR.W       #3,D5                   ;   D5=D5/8

        ;   Compute B component
        LEA         ycc8Tab(PC),A5          ;   A5=ycc8Tab
        MOVE.L      D1,D7                   ;   D7=C1(n)
        LSR.W       #8,D7
        ANDI.W      #$FF,D7
        MOVE.W      (0,A5,D7.W*2),D7        ;   D7=ycc8Tab[D7]
        ADD.W       D7,D6                   ;   D6=D6+D7
        SUBI.W      #2763,D6                ;   D6=D6-2763
        ASR.W       #3,D6                   ;   D6=D6/8

        *
        *   Clamp R, G, and B to 0...255
        *

        *   Register usage in this section of code:
        *       D1  =   unused and preserved
        *       D2  =   unused and preserved
        *       D3  =   unused and preserved
        *       D4  =   R(n)
        *       D5  =   G(n)
        *       D6  =   B(n)
        *       D7  =   scratch
        *

        *   Clamp R component
        TST.W       D4                      ;   If D4 R(n) < 0,
        BMI         11$                     ;       go to 11$
        CMP.W       #255,D4                 ;   If D4 R(n) <=255,
        BLE         12$                     ;       clamp next component
        ; D4 R(n) >255
        MOVEQ       #-1,D4                  ;   R(n)=255
        BRA         12$                     ;   Clamp next component
11$:
        MOVEQ       #0,D4                   ;   R(n)=0

12$:
        *   Clamp G component
        TST.W       D5                      ;   If D5 G(n) < 0,
        BMI         13$                     ;       go to 4$
        CMP.W       #255,D5                 ;   If D5 G(n) <=255,
        BLE         14$                     ;       clamp next component
        ; D5 G(n) >255
        MOVEQ       #-1,D5                  ;   G(n)=255
        BRA         14$                      ;   Clamp next component
13$:
        MOVEQ       #0,D5                   ;   G(n)=0

14$:
        *   Clamp B component
        TST.W       D6                      ;   If D6 B(n) < 0,
        BMI         15$                     ;       go to 6$
        CMP.W       #255,D6                 ;   If D6 B(n) <=255,
        BLE         16$                     ;       continue
        ; D6 B(n) >255
        MOVEQ       #-1,D6                  ;   B(n)=255
        BRA         16$                     ;   Continue
15$:
        MOVEQ       #0,D6                   ;   B(n)=255

16$:
        *
        *   Write last pixel to image buffer
        *

        *   Register usage in this section of code:
        *       D1 = x | R(n) | G(n) | B(n)
        *       D2 = unused and preserved
        *       D3 = unused and preserved
        *       D4 = R(n)
        *       D5 = G(n)
        *       D6 = B(n)

        MOVEQ       #0,D1                   ;   Clear D1
        MOVE.B      D4,D1                   ;   D1(16-23)=R(n)
        LSL.L       #8,D1
        MOVE.B      D5,D1                   ;   D1( 8-15)=G(n)
        LSL.L       #8,D1
        MOVE.B      D6,D1                   ;   D1( 0- 7)=B(n)

        MOVE.L      D1,(A3)+                ;   *(pDest++)=D1

        *
        *   Return
        *

        MOVEM.L     (SP)+,A0-A5/D0-D7       ;   Pop A0-A5, D0-D7 from stack

        RTS                                 ; Return to caller
