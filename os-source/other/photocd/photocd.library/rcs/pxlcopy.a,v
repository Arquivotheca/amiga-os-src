head     1.1;
branch   ;
access   ;
symbols  ;
locks    jjszucs:1.1; strict;
comment  @@;


1.1
date     93.11.19.17.42.32;  author jjszucs;  state Exp;
branches ;
next     ;


desc
@photocd.library
Cache to Image Buffer Pixel Copy Module
@



1.1
log
@Initial revision
@
text
@*   $Id$

        XDEF    _pxlCopy

        SECTION CODE

*       "If you can't do it in C, do it in assembly. If you can't do it
*       in assembly, it's not worth doing." - Programmer's saying

******************************************************************************
*
*   NAME
*       pxlCopy()   -   copy pixel data from Y, C1, and C2 buffers to
*                       client image buffer
*
*   SYNOPSIS
*       void pxlCopy(UBYTE *pYSrc,UBYTE *pC1Src,UBYTE *pC2Src,UBYTE *pDest,
*                           a0           a1            a2            a3
*                   UWORD nPixels)
*                       d0
*
*   FUNCTION
*       Copy Photo CD pixel data from Y, C1, and C2 buffers to client image
*       buffer, interpolating C1 and C2 for pixels without chrominance data.
*
*   INPUTS
*       pYSrc (A0)      -   Y source data
*       pC1Src (A1)     -   C1 source data
*       pC2Src (A2)     -   C2 source data
*       pDest   (A3)    -   Destination image buffer
*       nPixels (D0)    -   Number of pixels to copy
*
*   RESULT
*       All registers preserved.
*
*   EXAMPLE
*
*   NOTES
*       pixels must be an even number
*
*   BUGS
*
*   SEE ALSO
*
******************************************************************************

_pxlCopy:

        ;   Save registers
        MOVEM.L A0-A3/D0-D3,-(SP)   ;   Push A0, A1, A2, A3, D0, D1, D2,
                                    ;   and D3 to stack

        ;   Initialization
        ASR.W   #1,D0       ; nPixels=nPixels/2
                            ;   This function operates on <nPixels/2> two-pixel
                            ;       pairs.
        SUBQ.W  #2,D0       ; nPixels=nPixels-2
                            ;   Subtract 1 from nPixels since last two-pixel
                            ;   pair is a special case, handled after the
                            ;   copy loop. An additional 1 must be subtracted
                            ;   because DBRA loops until the counter is -1
                            ;   (not 0, as would be expected).

1$:                         ; Copy loop

        ;   Copy Y for first pixel
        MOVE.B  (A0)+,(A3)+ ; *(pDest++)=*(pYSrc++)

        ;   Copy C1 for first pixel and store for interpolation on second pixel
        CLR.W   D1          ; D1=0
        MOVE.B  (A1)+,D1    ; D1=*(pC1Src++)
        MOVE.B  D1,(A3)+    ; *(pC1Src++)=D1

        ;   Copy C2 for first pixel and store for interpolation on second pixel
        CLR.W   D2          ; D2=0
        MOVE.B  (A2)+,D2    ; D2=*(pC2Src++)
        MOVE.B  D2,(A3)+    ; *(pC2Src++)=D2

        ;   Copy Y for second pixel
        MOVE.B  (A0)+,(A3)+ ; *(pDest++)=*(pYSrc++)

        ;   Linearly interpolate C1 for second pixel from adjacent pixels,
        ;       using left-side C1 stored during C1 copy for first pixel
        CLR.W   D3          ; D3=0
        MOVE.B  (A1),D3     ; D3=*(pC1Src)
        ADD.W   D3,D1       ; D1=D1+D3
        ASR.W   #1,D1       ; D1=D1/2
        MOVE.B  D1,(A3)+    ; *(pDest++)=D1

        ;   Linearly interpolate C2 for second pixel from adjacent pixels,
        ;       using left-side C2 stored during C2 copy for first pixel
        CLR.W   D3          ; D3=0
        MOVE.B  (A2),D3     ; D3=*(pC2Src)
        ADD.W   D3,D2       ; D2=D2+D3
        ASR.W   #1,D2       ; D2=D2/2
        MOVE.B  D2,(A3)+    ; *(pDest++)=D2

        DBRA    D0,1$       ; Loop until all pixels processed

        ;   After copy loop...

        ;   Copy Y for pixel n-1
        MOVE.B  (A0)+,(A3)+ ; *(pDest++)=(*pYSrc++);

        ;   Copy C1 for pixel n-1
        MOVE.B  (A1),(A3)+  ; *(pDest++)=(*pC1Src);

        ;   Copy C2 for pixel n-1
        MOVE.B  (A2),(A3)+  ; *(pDest++)=(*pC2Src);

        ;   Copy Y for pixel n-1
        MOVE.B  (A0),(A3)+  ; *(pDest++)=(*pYSrc++);

        ;   Duplicate C1 of pixel n-1 for pixel n
        MOVE.B  (A1)+,(A3)+ ; *(pDest++)=*(pC1Src++);

        ;   Duplicate C2 of pixel n-1 for pixel n
        MOVE.B  (A2)+,(A3)+ ; *(pDest++)=*(pC2Src++);

        ;   Restore registers
        MOVEM.L (SP)+,A0-A3/D0-D3   ;   Pop A0, A1, A2, A3, D0, D1, D2, and
                                    ;   D3 from stack

        RTS                 ; Return to caller
@
