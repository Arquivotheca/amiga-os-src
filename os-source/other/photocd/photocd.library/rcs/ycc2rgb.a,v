head     1.1;
branch   ;
access   ;
symbols  ;
locks    jjszucs:1.1; strict;
comment  @@;


1.1
date     93.11.19.17.42.51;  author jjszucs;  state Exp;
branches ;
next     ;


desc
@photocd.library
YCC-to-RGB Conversion Module
@



1.1
log
@Initial revision
@
text
@*   $Id$

*
*   N.B.:
*
*   This code is heavy magic. In particular, the significance of the constants
*   in YCC tables and in the YCC-to-RGB conversion routine is arcane. The
*   original was extracted from the Photo CD Access Toolkit for Windows source
*   code (in the C language). This is a down-coded version of that code.
*   Detailed documentation was not available at the time of writing and
*   the algorithm is not completely understood. However, it is efficent
*   and effective.
*

        XDEF    _ycc2RGB

        OPT     P=68020             ; Motorola MC68020 CPU or above

        SECTION DATA

*
*   N.B.:
*       RGB mapping table is initialized in a C module (image.c). For some
*       unknown reason, code such as
*           rgbLUT:
*               DC.B      2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17
*               DC.B     18,  19,  20,  21,  22,  23,  23,  24,  25,  26,  27,  28,  29,  30,  32,  33
*               DC.B     34,  35,  36,  37,  38,  39,  40,  41,  42,  42,  43,  44,  45,  46,  47,  48
*               ...
*       failed to completely initialize the table when assembled with HX68
*       Version .81. Only the first byte of the table was initialized. The
*       C language version of the table does not have this problem.
*

*   YCC to RGB conversion tables

ycc5Tab:
        DC.W        0,11,22,33,43,54,65,76
        DC.W    	87,98,109,120,130,141,152,163
	    DC.W        174,185,196,206,217,228,239,250
        DC.W    	261,272,283,293,304,315,326,337
        DC.W    	348,359,369,380,391,402,413,424
        DC.W    	435,446,456,467,478,489,500,511
        DC.W    	522,532,543,554,565,576,587,598
        DC.W    	609,619,630,641,652,663,674,685
        DC.W    	696,706,717,728,739,750,761,772
        DC.W    	782,793,804,815,826,837,848,859
        DC.W    	869,880,891,902,913,924,935,945
        DC.W    	956,967,978,989,1000,1011,1022,1032
        DC.W    	1043,1054,1065,1076,1087,1098,1108,1119
	    DC.W        1130,1141,1152,1163,1174,1185,1195,1206
        DC.W    	1217,1228,1239,1250,1261,1271,1282,1293
        DC.W    	1304,1315,1326,1337,1348,1358,1369,1380
        DC.W    	1391,1402,1413,1424,1434,1445,1456,1467
        DC.W    	1478,1489,1500,1511,1521,1532,1543,1554
        DC.W    	1565,1576,1587,1597,1608,1619,1630,1641
        DC.W    	1652,1663,1674,1684,1695,1706,1717,1728
        DC.W    	1739,1750,1760,1771,1782,1793,1804,1815
	    DC.W        1826,1837,1847,1858,1869,1880,1891,1902
	    DC.W        1913,1923,1934,1945,1956,1967,1978,1989
	    DC.W        2000,2010,2021,2032,2043,2054,2065,2076
        DC.W    	2087,2097,2108,2119,2130,2141,2152,2163
        DC.W    	2173,2184,2195,2206,2217,2228,2239,2250
        DC.W    	2260,2271,2282,2293,2304,2315,2326,2336
	    DC.W        2347,2358,2369,2380,2391,2402,2413,2423
	    DC.W        2434,2445,2456,2467,2478,2489,2499,2510
        DC.W    	2521,2532,2543,2554,2565,2576,2586,2597
        DC.W    	2608,2619,2630,2641,2652,2662,2673,2684
	    DC.W        2695,2706,2717,2728,2739,2749,2760,2771

ycc1Tab:
        DC.W    	0,3,7,10,14,17,21,24
        DC.W    	28,31,34,38,41,45,48,52
        DC.W    	55,59,62,65,69,72,76,79
        DC.W    	83,86,90,93,96,100,103,107
        DC.W    	110,114,117,120,124,127,131,134
	    DC.W        138,141,145,148,151,155,158,162
        DC.W    	165,169,172,176,179,182,186,189
        DC.W    	193,196,200,203,207,210,213,217
        DC.W    	220,224,227,231,234,238,241,244
        DC.W    	248,251,255,258,262,265,269,272
        DC.W    	275,279,282,286,289,293,296,299
        DC.W    	303,306,310,313,317,320,324,327
        DC.W    	330,334,337,341,344,348,351,355
        DC.W    	358,361,365,368,372,375,379,382
        DC.W    	386,389,392,396,399,403,406,410
        DC.W    	413,417,420,423,427,430,434,437
        DC.W    	441,444,448,451,454,458,461,465
        DC.W    	468,472,475,478,482,485,489,492
        DC.W    	496,499,503,506,509,513,516,520
        DC.W    	523,527,530,534,537,540,544,547
        DC.W    	551,554,558,561,565,568,571,575
        DC.W    	578,582,585,589,592,596,599,602
        DC.W    	606,609,613,616,620,623,627,630
        DC.W    	633,637,640,644,647,651,654,657
        DC.W    	661,664,668,671,675,678,682,685
        DC.W        688,692,695,699,702,706,709,713
        DC.W    	716,719,723,726,730,733,737,740
        DC.W    	744,747,750,754,757,761,764,768
        DC.W    	771,775,778,781,785,788,792,795
        DC.W    	799,802,806,809,812,816,819,823
        DC.W    	826,830,833,837,840,843,847,850
        DC.W    	854,857,861,864,867,871,874,878

ycc8Tab:
        DC.W    	0,18,35,53,71,89,106,124
        DC.W    	142,160,177,195,213,231,248,266
        DC.W    	284,302,319,337,355,373,390,408
        DC.W    	426,444,461,479,497,515,532,550
        DC.W    	568,586,603,621,639,656,674,692
        DC.W    	710,727,745,763,781,798,816,834
        DC.W    	852,869,887,905,923,940,958,976
        DC.W    	994,1011,1029,1047,1065,1082,1100,1118
        DC.W    	1136,1153,1171,1189,1207,1224,1242,1260
        DC.W    	1278,1295,1313,1331,1348,1366,1384,1402
        DC.W    	1419,1437,1455,1473,1490,1508,1526,1544
        DC.W    	1561,1579,1597,1615,1632,1650,1668,1686
        DC.W    	1703,1721,1739,1757,1774,1792,1810,1828
        DC.W    	1845,1863,1881,1899,1916,1934,1952,1969
        DC.W    	1987,2005,2023,2040,2058,2076,2094,2111
        DC.W    	2129,2147,2165,2182,2200,2218,2236,2253
        DC.W    	2271,2289,2307,2324,2342,2360,2378,2395
        DC.W    	2413,2431,2449,2466,2484,2502,2520,2537
        DC.W    	2555,2573,2591,2608,2626,2644,2661,2679
        DC.W    	2697,2715,2732,2750,2768,2786,2803,2821
        DC.W    	2839,2857,2874,2892,2910,2928,2945,2963
        DC.W    	2981,2999,3016,3034,3052,3070,3087,3105
        DC.W    	3123,3141,3158,3176,3194,3212,3229,3247
        DC.W    	3265,3282,3300,3318,3336,3353,3371,3389
        DC.W    	3407,3424,3442,3460,3478,3495,3513,3531
        DC.W    	3549,3566,3584,3602,3620,3637,3655,3673
        DC.W    	3691,3708,3726,3744,3762,3779,3797,3815
        DC.W    	3833,3850,3868,3886,3904,3921,3939,3957
        DC.W    	3974,3992,4010,4028,4045,4063,4081,4099
        DC.W    	4116,4134,4152,4170,4187,4205,4223,4241
        DC.W    	4258,4276,4294,4312,4329,4347,4365,4383
        DC.W    	4400,4418,4436,4454,4471,4489,4507,4525

ycc7Tab:
        DC.W    	0,15,29,44,58,73,87,102
        DC.W        117,131,146,160,175,189,204,219
        DC.W	    233,248,262,277,291,306,321,335
        DC.W		350,364,379,393,408,423,437,452
        DC.W		466,481,495,510,525,539,554,568
        DC.W		583,597,612,627,641,656,670,685
        DC.W		699,714,729,743,758,772,787,801
        DC.W		816,831,845,860,874,889,903,918
        DC.W		933,947,962,976,991,1005,1020,1035
        DC.W		1049,1064,1078,1093,1107,1122,1137,1151
        DC.W		1166,1180,1195,1209,1224,1239,1253,1268
        DC.W		1282,1297,1311,1326,1341,1355,1370,1384
        DC.W		1399,1413,1428,1443,1457,1472,1486,1501
        DC.W		1515,1530,1545,1559,1574,1588,1603,1617
        DC.W		1632,1647,1661,1676,1690,1705,1719,1734
        DC.W		1749,1763,1778,1792,1807,1821,1836,1851
        DC.W		1865,1880,1894,1909,1924,1938,1953,1967
        DC.W		1982,1996,2011,2026,2040,2055,2069,2084
        DC.W		2098,2113,2128,2142,2157,2171,2186,2200
        DC.W		2215,2230,2244,2259,2273,2288,2302,2317
        DC.W		2332,2346,2361,2375,2390,2404,2419,2434
        DC.W		2448,2463,2477,2492,2506,2521,2536,2550
        DC.W		2565,2579,2594,2608,2623,2638,2652,2667
        DC.W		2681,2696,2710,2725,2740,2754,2769,2783
        DC.W		2798,2812,2827,2842,2856,2871,2885,2900
        DC.W		2914,2929,2944,2958,2973,2987,3002,3016
        DC.W		3031,3046,3060,3075,3089,3104,3118,3133
        DC.W		3148,3162,3177,3191,3206,3220,3235,3250
        DC.W		3264,3279,3293,3308,3322,3337,3352,3366
        DC.W		3381,3395,3410,3424,3439,3454,3468,3483
        DC.W    	3497,3512,3526,3541,3556,3570,3585,3599
        DC.W	    3614,3628,3643,3658,3672,3687,3701,3716

ycc3Tab:
        DC.W		0,7,15,22,30,37,45,52
        DC.W		59,67,74,82,89,96,104,111
        DC.W		119,126,134,141,148,156,163,171
        DC.W		178,185,193,200,208,215,223,230
        DC.W		237,245,252,260,267,274,282,289
        DC.W		297,304,312,319,326,334,341,349
        DC.W		356,363,371,378,386,393,401,408
        DC.W		415,423,430,438,445,452,460,467
        DC.W		475,482,490,497,504,512,519,527
        DC.W		534,541,549,556,564,571,579,586
        DC.W		593,601,608,616,623,630,638,645
        DC.W		653,660,668,675,682,690,697,705
        DC.W		712,719,727,734,742,749,757,764
        DC.W		771,779,786,794,801,808,816,823
        DC.W		831,838,846,853,860,868,875,883
        DC.W		890,897,905,912,920,927,935,942
        DC.W		949,957,964,972,979,986,994,1001
        DC.W		1009,1016,1024,1031,1038,1046,1053,1061
        DC.W		1068,1075,1083,1090,1098,1105,1113,1120
        DC.W		1127,1135,1142,1150,1157,1164,1172,1179
        DC.W		1187,1194,1202,1209,1216,1224,1231,1239
        DC.W		1246,1253,1261,1268,1276,1283,1291,1298
        DC.W		1305,1313,1320,1328,1335,1342,1350,1357
        DC.W		1365,1372,1380,1387,1394,1402,1409,1417
        DC.W		1424,1431,1439,1446,1454,1461,1469,1476
        DC.W		1483,1491,1498,1506,1513,1520,1528,1535
        DC.W		1543,1550,1558,1565,1572,1580,1587,1595
        DC.W		1602,1609,1617,1624,1632,1639,1647,1654
        DC.W		1661,1669,1676,1684,1691,1698,1706,1713
        DC.W		1721,1728,1736,1743,1750,1758,1765,1773
        DC.W		1780,1787,1795,1802,1810,1817,1825,1832
        DC.W		1839,1847,1854,1862,1869,1876,1884,1891

        SECTION CODE

*       "Shift to the left, shift to the right. Push up, pop down.
*       Byte, byte, byte!" - Assembly language programmer's cheer

******************************************************************************
*
*   NAME
*       ycc2RGB()   -   convert YCC to RGB in place
*
*   SYNOPSIS
*       void ycc2RGB(UBYTE *pData,UWORD nPixels,UBYTE *rgbLUT);
*                           a0          d0
*
*   FUNCTION
*       Convert image data from YCC to RGB format in place.
*
*   INPUTS
*       pData (A0)      -   YCC source
*       nPixels (D0)    -   Pixels
*       rgbLUT (A1)     -   RGB look-up table (512 entries)
*
*   RESULT
*       All registers preserved.
*
*       pData contains converted RGB data after return.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*
******************************************************************************

_ycc2RGB:

        ;   Save registers
        MOVEM.L A0-A4/D0-D7,-(SP)   ;   Push A0...A3 and D0...D6 to stack

        ;   Initialization
        MOVE.L  A1,A4       ; A4=rgbLUT

        MOVE.L  D0,D7       ; D7=nPixels
        SUBQ.W  #1,D7       ; nPixels=nPixels-1
                            ;   Subtract 1 from nPixels since DBRA loops
                            ;   until the counter is -1 (not 0, as would
                            ;   be expected).

        MOVE.L  A0,A1       ; pC1=pData+1
        ADDQ.L  #1,A1

        MOVE.L  A0,A2       ; pC2=pData+2
        ADDQ.L  #2,A2

1$:                         ; Conversion loop

        ; Clear lower 16 bits of registers used as indices
        CLR.W   D0          ; D0=0
        CLR.W   D1          ; D1=0
        CLR.W   D2          ; D2=0

        MOVE.B  (A0),D0     ; D0=*A0 (Y)
        MOVE.B  (A1),D1     ; D1=*A1 (C1)
        MOVE.B  (A2),D2     ; D2=*A2 (C2)

        LEA     ycc5Tab(PC),A3  ; A3=ycc5Tab

        ; Begin with luminance data (Y)
        MOVE.W  (0,A3,D0.W*2),D3   ; D3 (R)=yccTab[y]
        MOVE.W  D3,D4           ; D4 (G)=yccTab[y]
        MOVE.W  D3,D5           ; D5 (B)=yccTab[y]

        ; Compute R component
        LEA     ycc7Tab(PC),A3  ; A3=ycc7Tab
        MOVE.W  (0,A3,D2.W*2),D6; D6=ycc7Tab[c2]
        ADD.W   D6,D3           ; D3=D3+D6
        SUBI.W  #1992,D3        ; D3=D3-1992
        ASR.W   #3,D3           ; D3=D3/8

        ; Compute G component
        LEA     ycc1Tab(PC),A3  ; A3=ycc1Tab
        MOVE.W  (0,A3,D1.W*2),D6; D6=ycc1Tab[c1]
        SUB.W   D6,D4           ; D4=D4-D6
        LEA     ycc3Tab(PC),A3  ; A3=ycc3Tab
        MOVE.W  (0,A3,D2.W*2),D6; D6=ycc3Tab[c2]
        SUB.W   D6,D4           ; D4=D4-D6
        ADDI.W  #1557,D4        ; D4=D4+1557
        ASR.W   #3,D4           ; D4=D4/8

        ; Compute B component
        LEA     ycc8Tab(PC),A3  ; A3=ycc8Tab
        MOVE.W  (0,A3,D1.W*2),D6; D6=ycc8Tab[c1]
        ADD.W   D6,D5           ; D5=D5+D6
        SUBI.W  #2763,D5        ; D5=D5-2763
        ASR.W   #3,D5           ; D5=D5/8

        ; Map R component
        MOVE.W  D3,D6           ; D6=D3 (R)
        ANDI.W  #$FE00,D6       ; \ if ( ! (D6 & 0xFE00 ) ) ...
        TST.W   D6              ; |  use value from look-up table for
        BEQ.B   3$              ; /  this component
        TST.W   D3              ; \ if (D3 (R) > 0)
        BPL.B   2$              ; |  use maximum 8-bit value for this
                                ; / component
        MOVEQ.B #0,D3           ; else use 0 for this component
        BRA.B   4$              ; Go to G component mapping
2$:
        MOVEQ.B #$FF,D3         ; Use maximum 8-bit value for this
                                ;  component
        BRA.B   4$              ; Go to G component mapping
3$:
        MOVE.B  0(A4,D3.W),D3    ; R=rgbLUT[R]

        ; Map G component
4$:
        MOVE.W  D4,D6           ; D6=D4 (G)
        ANDI.W  #$FE00,D6       ; \ if ( ! (D6 & 0xFE00 ) ) ...
        TST.W   D6              ; |  use value from look-up table for
        BEQ.B   6$              ; /  this component
        TST.W   D3              ; \ if (D3 (G) > 0)
        BPL.B   5$              ; |  use maximum 8-bit value for this
                                ; / component
        MOVEQ.B #0,D4           ; else use 0 for this component
        BRA.B   7$              ; Go to B component mapping
5$:
        MOVEQ.B #$FF,D4         ; Use maximum 8-bit value for this
                                ;  component
        BRA.B   7$              ; Go to B component mapping
6$:
        MOVE.B  0(A4,D4.W),D4   ; G=rgbLUT[G]

        ; Map B component
7$:
        MOVE.W  D5,D6           ; D6=D5 (B)
        ANDI.W  #$FE00,D6       ; \ if ( ! (D6 & 0xFE00 ) ) ...
        TST.W   D6              ; |  use value from look-up table for
        BEQ.B   9$              ; /  this component
        TST.W   D5              ; \ if (D5 (B) > 0)
        BPL.B   8$              ; |  use maximum 8-bit value for this
                                ; / component
        MOVEQ.B #0,D5           ; else use 0 for this component
        BRA.B   10$             ; Go to write of mapped components
8$:
        MOVEQ.B #$FF,D5         ; Use maximum 8-bit value for this
                                ;  component
        BRA.B   10$             ; Go to write of mapped components
9$:
        MOVE.B  0(A4,D5.W),D5   ; B=rgbLUT[B]

        ; Write mapped RGB components
10$:    MOVE.B  D3,(A0)         ; *A0 (R)=D3
        MOVE.B  D4,(A1)         ; *A1 (G)=D4
        MOVE.B  D5,(A2)         ; *A2 (B)=D5

        ; Advance YUV component pointers
        ADDQ.L  #3,A0           ; A0+=3 (bytes per pixel)
        ADDQ.L  #3,A1           ; A1+=3 (bytes per pixel)
        ADDQ.L  #3,A2           ; A2+=3 (bytes per pixel)

        DBRA    D7,1$       ; Loop until all pixels processed

        ;   After conversion loop

        ;   Restore registers
        MOVEM.L (SP)+,A0-A4/D0-D7   ;   Pop A0...A4 and D0...D7 from stack

        RTS                 ; Return to caller
@
