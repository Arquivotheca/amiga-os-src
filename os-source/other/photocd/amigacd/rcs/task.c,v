head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     94.04.25.10.48.16;  author jjszucs;  state Exp;
branches ;
next     1.1;

1.1
date     94.02.18.15.58.28;  author jjszucs;  state Exp;
branches ;
next     ;


desc
@Custom Task Handling Module
@


1.2
log
@Changes through version 40.17 - see amiga.release for details.
@
text
@

#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <exec/io.h>

#include <clib/exec_protos.h>
#include <clib/alib_protos.h>

#include <pragmas/exec_pragmas.h>

#include "global.h"

#undef SysBase

/***************************************************************************/


#define ME_TASK     0
#define ME_STACK    1
#define NUMENTRIES  2

struct FakeMemEntry
{
    ULONG fme_Reqs;
    ULONG fme_Length;
};

struct FakeMemList
{
    struct Node fml_Node;
    UWORD   fml_NumEntries;
    struct FakeMemEntry fml_ME[NUMENTRIES];
} memTemplate = {
    { 0 },
    NUMENTRIES,
    {
    { MEMF_REVERSE | MEMF_CLEAR, sizeof( struct Task ) },
    { MEMF_REVERSE | MEMF_CLEAR,    0 }                 /* stack */
    }
};


struct Task *customCreateTask(STRPTR name, LONG pri, APTR initPC, ULONG stackSize)
{
struct Task        *newTask;
struct FakeMemList  fakememlist;
struct MemList     *ml;
APTR                result;
struct ExecBase    *SysBase = (*((struct ExecBase **) 4));

    fakememlist = memTemplate;
    fakememlist.fml_ME[ME_STACK].fme_Length = stackSize;

    if (ml = (struct MemList *) AllocEntry((struct MemList *)&fakememlist))
    {
        newTask                  = (struct Task *) ml->ml_ME[ME_TASK].me_Addr;
        newTask->tc_SPLower      = ml->ml_ME[ME_STACK].me_Addr;
        newTask->tc_SPUpper      = (APTR)((ULONG)(newTask->tc_SPLower) + stackSize);
        newTask->tc_SPReg        = newTask->tc_SPUpper;
        newTask->tc_Node.ln_Type = NT_TASK;
        newTask->tc_Node.ln_Pri  = pri;
        newTask->tc_Node.ln_Name = name;
        newTask->tc_UserData     = FindTask(NULL)->tc_UserData;

        NewList(&newTask->tc_MemEntry);
        AddHead(&newTask->tc_MemEntry,ml);

        if (result = AddTask( newTask, initPC, 0 ))
            return(newTask);

        FreeEntry(ml);
    }

    return(NULL);
}
@


1.1
log
@Initial revision
@
text
@d21 3
a23 3
#define ME_TASK 	0
#define ME_STACK	1
#define NUMENTRIES	2
d34 1
a34 1
    UWORD	fml_NumEntries;
d36 1
a36 1
} TaskMemTemplate = {
d40 2
a41 2
	{ MEMF_REVERSE | MEMF_CLEAR, sizeof( struct Task ) },
	{ MEMF_REVERSE | MEMF_CLEAR,	0 }					/* stack */
d54 1
a54 1
    fakememlist = TaskMemTemplate;
@
