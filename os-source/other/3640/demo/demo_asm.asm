*******************************************************************************
*
* $Id: demo_asm.asm,v 1.3 91/07/23 21:58:27 mks Exp $
*
* $Log:	demo_asm.asm,v $
* Revision 1.3  91/07/23  21:58:27  mks
* Cleaned up for release
* 
* Revision 1.2  91/07/23  21:16:58  mks
* Cleaned up for release
*
* Revision 1.1  91/07/22  13:01:37  mks
* Initial revision
*
*******************************************************************************
*
* Options for HX68 to turn on 68040 MODE...
*
		OPT	p=68040
*
*******************************************************************************
*
F_DOSTUFF	MACRO
		move.l		a4,a5		; Save for later...
		fmovem.x	(a4)+,fp0
		move.l		(a4)+,d0
		fmove.x		fp0,fp1
		fmove.x		fp0,fp2
		fmul.x		fp0,fp1
		fadd.x		fp2,fp2
		move.l		d0,(a6)		; Write to memory
		fmove.x		fp0,fp3
		fmove.x		fp0,fp4
		fmul.x		fp0,fp3
		fadd.x		fp4,fp4
		move.l		d0,(a6)		; Write to memory
		fmove.x		fp0,fp1
		fmove.x		fp0,fp2
		fmul.x		fp0,fp1
		fadd.x		fp2,fp2
		move.l		d0,(a6)		; Write to memory
		fmove.x		fp0,fp3
		fmove.x		fp0,fp4
		fmul.x		fp0,fp3
		fadd.x		fp4,fp4
		fmovem.x	fp0,(a5)	; Write to memory
		ENDM
*
*******************************************************************************
*
* The following is a rather "nasty" test of speed.  It should
* take about 4 or 5 seconds to run on a 25MHz 68040.  It assumes you have
* and FPU and a 68020 as a minimum system.
*
_F_SpeedTest:	xdef	_F_SpeedTest
*
* First, we save all of the register in the system...
*
		movem.l		a0-a6/d0-d7,-(sp)
		fmovem.x	fp0-fp7,-(sp)
*
* Now, set up the outer loop...
*
		lea		F_NUM+12(pc),a6
		move.l		#9000,d5	; Main loop counter...
MainLoop:	lea		F_NUM(pc),a4	; Point at table of numbers
		moveq.l		#(128/8)-1,d4	; Number of lines in table
InnerLoop:
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
		F_DOSTUFF	; Do the macro a few times...
*
		dbra		d4,InnerLoop	; Do the whole table...
		dbra		d5,MainLoop	; Go do it some more...
*
* Now, restore everything we saved...
*
		fmovem.x	(sp)+,fp0-fp7
		movem.l		(sp)+,a0-a6/d0-d7
		rts		; We are done!
*
*******************************************************************************
*
I_DOSTUFF	MACRO
		move.l		(a4)+,d0
		move.l		(a4)+,d1
		move.l		(a4)+,d2
		move.l		(a4)+,d3
		divu.w		#123,d0
		add.l		d2,d2
		mulu.w		d1,d0
		divu.w		#456,d3
		add.l		d2,d2
		mulu.w		d1,d3
		move.l		d0,(a6)
		divu.w		#123,d0
		add.l		d2,d2
		mulu.w		d1,d0
		divu.w		#456,d3
		add.l		d2,d2
		mulu.w		d1,d3
		move.l		d0,(a6)
		divu.w		#123,d0
		add.l		d2,d2
		mulu.w		d1,d0
		divu.w		#456,d3
		add.l		d2,d2
		mulu.w		d1,d3
		move.l		d0,(a6)
		divu.w		#123,d0
		add.l		d2,d2
		mulu.w		d1,d0
		divu.w		#456,d3
		add.l		d2,d2
		mulu.w		d1,d3
		move.l		d0,(a6)
		ENDM
*
*******************************************************************************
*
* The following is a rather "nasty" test of speed.  It should
* take about 4 or 5 seconds to run on a 25MHz 68040.  It is fully
* 68000 compatible.  (Integer based)
*
		opt	p=68000
_I_SpeedTest:	xdef	_I_SpeedTest
*
* First save the standard registers...
*
		movem.l		a0-a6/d0-d7,-(sp)
*
* Ok, so we need to do this a few times...
*
		lea		F_NUM+12(pc),a6
		move.l		#6000,d5	; Main loop counter...
I_MainLoop:	lea		F_NUM(pc),a4
		moveq.l		#(128/8)-1,d4	; Number of line in table
I_InnerLoop:
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
		I_DOSTUFF	; Do the macro a few times...
*
		dbra		d4,I_InnerLoop
		dbra		d5,I_MainLoop
*
		movem.l		(sp)+,a0-a6/d0-d7
		rts
*
*******************************************************************************
*
* Here is a table of 64 floating point numbers (3-longwords each)
* plus one long word for integers...
*
F_NUM:	DC.L	$3FFF0000,$80000000,$00000000,$00000000
	DC.L	$3FFF0000,$8164D1F3,$BC030774,$9F841A9B
	DC.L	$3FFF0000,$82CD8698,$AC2BA1D8,$9FC1D5B9
	DC.L	$3FFF0000,$843A28C3,$ACDE4048,$A0728369
	DC.L	$3FFF0000,$85AAC367,$CC487B14,$1FC5C95C
	DC.L	$3FFF0000,$871F6196,$9E8D1010,$1EE85C9F
	DC.L	$3FFF0000,$88980E80,$92DA8528,$9FA20729
	DC.L	$3FFF0000,$8A14D575,$496EFD9C,$A07BF9AF
	DC.L	$3FFF0000,$8B95C1E3,$EA8BD6E8,$A0020DCF
	DC.L	$3FFF0000,$8D1ADF5B,$7E5BA9E4,$205A63DA
	DC.L	$3FFF0000,$8EA4398B,$45CD53C0,$1EB70051
	DC.L	$3FFF0000,$9031DC43,$1466B1DC,$1F6EB029
	DC.L	$3FFF0000,$91C3D373,$AB11C338,$A0781494
	DC.L	$3FFF0000,$935A2B2F,$13E6E92C,$9EB319B0
	DC.L	$3FFF0000,$94F4EFA8,$FEF70960,$2017457D
	DC.L	$3FFF0000,$96942D37,$20185A00,$1F11D537
	DC.L	$3FFF0000,$9837F051,$8DB8A970,$9FB952DD
	DC.L	$3FFF0000,$99E04593,$20B7FA64,$1FE43087
	DC.L	$3FFF0000,$9B8D39B9,$D54E5538,$1FA2A818
	DC.L	$3FFF0000,$9D3ED9A7,$2CFFB750,$1FDE494D
	DC.L	$3FFF0000,$9EF53260,$91A111AC,$20504890
	DC.L	$3FFF0000,$A0B0510F,$B9714FC4,$A073691C
	DC.L	$3FFF0000,$A2704303,$0C496818,$1F9B7A05
	DC.L	$3FFF0000,$A43515AE,$09E680A0,$A0797126
	DC.L	$3FFF0000,$A5FED6A9,$B15138EC,$A071A140
	DC.L	$3FFF0000,$A7CD93B4,$E9653568,$204F62DA
	DC.L	$3FFF0000,$A9A15AB4,$EA7C0EF8,$1F283C4A
	DC.L	$3FFF0000,$AB7A39B5,$A93ED338,$9F9A7FDC
	DC.L	$3FFF0000,$AD583EEA,$42A14AC8,$A05B3FAC
	DC.L	$3FFF0000,$AF3B78AD,$690A4374,$1FDF2610
	DC.L	$3FFF0000,$B123F581,$D2AC2590,$9F705F90
	DC.L	$3FFF0000,$B311C412,$A9112488,$201F678A
	DC.L	$3FFF0000,$B504F333,$F9DE6484,$1F32FB13
	DC.L	$3FFF0000,$B6FD91E3,$28D17790,$20038B30
	DC.L	$3FFF0000,$B8FBAF47,$62FB9EE8,$200DC3CC
	DC.L	$3FFF0000,$BAFF5AB2,$133E45FC,$9F8B2AE6
	DC.L	$3FFF0000,$BD08A39F,$580C36C0,$A02BBF70
	DC.L	$3FFF0000,$BF1799B6,$7A731084,$A00BF518
	DC.L	$3FFF0000,$C12C4CCA,$66709458,$A041DD41
	DC.L	$3FFF0000,$C346CCDA,$24976408,$9FDF137B
	DC.L	$3FFF0000,$C5672A11,$5506DADC,$201F1568
	DC.L	$3FFF0000,$C78D74C8,$ABB9B15C,$1FC13A2E
	DC.L	$3FFF0000,$C9B9BD86,$6E2F27A4,$A03F8F03
	DC.L	$3FFF0000,$CBEC14FE,$F2727C5C,$1FF4907D
	DC.L	$3FFF0000,$CE248C15,$1F8480E4,$9E6E53E4
	DC.L	$3FFF0000,$D06333DA,$EF2B2594,$1FD6D45C
	DC.L	$3FFF0000,$D2A81D91,$F12AE45C,$A076EDB9
	DC.L	$3FFF0000,$D4F35AAB,$CFEDFA20,$9FA6DE21
	DC.L	$3FFF0000,$D744FCCA,$D69D6AF4,$1EE69A2F
	DC.L	$3FFF0000,$D99D15C2,$78AFD7B4,$207F439F
	DC.L	$3FFF0000,$DBFBB797,$DAF23754,$201EC207
	DC.L	$3FFF0000,$DE60F482,$5E0E9124,$9E8BE175
	DC.L	$3FFF0000,$E0CCDEEC,$2A94E110,$20032C4B
	DC.L	$3FFF0000,$E33F8972,$BE8A5A50,$2004DFF5
	DC.L	$3FFF0000,$E5B906E7,$7C8348A8,$1E72F47A
	DC.L	$3FFF0000,$E8396A50,$3C4BDC68,$1F722F22
	DC.L	$3FFF0000,$EAC0C6E7,$DD243930,$A017E945
	DC.L	$3FFF0000,$ED4F301E,$D9942B84,$1F401A5B
	DC.L	$3FFF0000,$EFE4B99B,$DCDAF5CC,$9FB9A9E3
	DC.L	$3FFF0000,$F281773C,$59FFB138,$20744C05
	DC.L	$3FFF0000,$F5257D15,$2486CC2C,$1F773A19
	DC.L	$3FFF0000,$F7D0DF73,$0AD13BB8,$1FFE90D5
	DC.L	$3FFF0000,$FA83B2DB,$722A033C,$A041ED22
	DC.L	$3FFF0000,$FD3E0C0C,$F486C174,$1F853F3A
	DC.L	$3FFF0000,$8164D1F3,$BC030774,$9F841A9B
	DC.L	$3FFF0000,$82CD8698,$AC2BA1D8,$9FC1D5B9
	DC.L	$3FFF0000,$843A28C3,$ACDE4048,$A0728369
	DC.L	$3FFF0000,$85AAC367,$CC487B14,$1FC5C95C
	DC.L	$3FFF0000,$871F6196,$9E8D1010,$1EE85C9F
	DC.L	$3FFF0000,$88980E80,$92DA8528,$9FA20729
	DC.L	$3FFF0000,$8A14D575,$496EFD9C,$A07BF9AF
	DC.L	$3FFF0000,$8B95C1E3,$EA8BD6E8,$A0020DCF
	DC.L	$3FFF0000,$8D1ADF5B,$7E5BA9E4,$205A63DA
	DC.L	$3FFF0000,$8EA4398B,$45CD53C0,$1EB70051
	DC.L	$3FFF0000,$9031DC43,$1466B1DC,$1F6EB029
	DC.L	$3FFF0000,$91C3D373,$AB11C338,$A0781494
	DC.L	$3FFF0000,$935A2B2F,$13E6E92C,$9EB319B0
	DC.L	$3FFF0000,$94F4EFA8,$FEF70960,$2017457D
	DC.L	$3FFF0000,$96942D37,$20185A00,$1F11D537
	DC.L	$3FFF0000,$9837F051,$8DB8A970,$9FB952DD
	DC.L	$3FFF0000,$99E04593,$20B7FA64,$1FE43087
	DC.L	$3FFF0000,$9B8D39B9,$D54E5538,$1FA2A818
	DC.L	$3FFF0000,$9D3ED9A7,$2CFFB750,$1FDE494D
	DC.L	$3FFF0000,$9EF53260,$91A111AC,$20504890
	DC.L	$3FFF0000,$A0B0510F,$B9714FC4,$A073691C
	DC.L	$3FFF0000,$A2704303,$0C496818,$1F9B7A05
	DC.L	$3FFF0000,$A43515AE,$09E680A0,$A0797126
	DC.L	$3FFF0000,$A5FED6A9,$B15138EC,$A071A140
	DC.L	$3FFF0000,$A7CD93B4,$E9653568,$204F62DA
	DC.L	$3FFF0000,$A9A15AB4,$EA7C0EF8,$1F283C4A
	DC.L	$3FFF0000,$AB7A39B5,$A93ED338,$9F9A7FDC
	DC.L	$3FFF0000,$AD583EEA,$42A14AC8,$A05B3FAC
	DC.L	$3FFF0000,$AF3B78AD,$690A4374,$1FDF2610
	DC.L	$3FFF0000,$B123F581,$D2AC2590,$9F705F90
	DC.L	$3FFF0000,$B311C412,$A9112488,$201F678A
	DC.L	$3FFF0000,$B504F333,$F9DE6484,$1F32FB13
	DC.L	$3FFF0000,$B6FD91E3,$28D17790,$20038B30
	DC.L	$3FFF0000,$B8FBAF47,$62FB9EE8,$200DC3CC
	DC.L	$3FFF0000,$BAFF5AB2,$133E45FC,$9F8B2AE6
	DC.L	$3FFF0000,$BD08A39F,$580C36C0,$A02BBF70
	DC.L	$3FFF0000,$BF1799B6,$7A731084,$A00BF518
	DC.L	$3FFF0000,$C12C4CCA,$66709458,$A041DD41
	DC.L	$3FFF0000,$C346CCDA,$24976408,$9FDF137B
	DC.L	$3FFF0000,$C5672A11,$5506DADC,$201F1568
	DC.L	$3FFF0000,$C78D74C8,$ABB9B15C,$1FC13A2E
	DC.L	$3FFF0000,$C9B9BD86,$6E2F27A4,$A03F8F03
	DC.L	$3FFF0000,$CBEC14FE,$F2727C5C,$1FF4907D
	DC.L	$3FFF0000,$CE248C15,$1F8480E4,$9E6E53E4
	DC.L	$3FFF0000,$D06333DA,$EF2B2594,$1FD6D45C
	DC.L	$3FFF0000,$D2A81D91,$F12AE45C,$A076EDB9
	DC.L	$3FFF0000,$D4F35AAB,$CFEDFA20,$9FA6DE21
	DC.L	$3FFF0000,$D744FCCA,$D69D6AF4,$1EE69A2F
	DC.L	$3FFF0000,$D99D15C2,$78AFD7B4,$207F439F
	DC.L	$3FFF0000,$DBFBB797,$DAF23754,$201EC207
	DC.L	$3FFF0000,$DE60F482,$5E0E9124,$9E8BE175
	DC.L	$3FFF0000,$E0CCDEEC,$2A94E110,$20032C4B
	DC.L	$3FFF0000,$E33F8972,$BE8A5A50,$2004DFF5
	DC.L	$3FFF0000,$E5B906E7,$7C8348A8,$1E72F47A
	DC.L	$3FFF0000,$E8396A50,$3C4BDC68,$1F722F22
	DC.L	$3FFF0000,$EAC0C6E7,$DD243930,$A017E945
	DC.L	$3FFF0000,$ED4F301E,$D9942B84,$1F401A5B
	DC.L	$3FFF0000,$EFE4B99B,$DCDAF5CC,$9FB9A9E3
	DC.L	$3FFF0000,$F281773C,$59FFB138,$20744C05
	DC.L	$3FFF0000,$F5257D15,$2486CC2C,$1F773A19
	DC.L	$3FFF0000,$F7D0DF73,$0AD13BB8,$1FFE90D5
	DC.L	$3FFF0000,$FA83B2DB,$722A033C,$A041ED22
	DC.L	$3FFF0000,$FD3E0C0C,$F486C174,$1F853F3A
	DC.L	$3FFF0000,$FA83B2DB,$722A033C,$A041ED22
*
*******************************************************************************
*
		END
