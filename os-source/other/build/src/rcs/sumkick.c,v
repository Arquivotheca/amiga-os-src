head     40.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


40.2
date     93.02.25.15.26.40;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.02.18.15.39.59;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.09.15.15.13.32;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.09.15.14.44.10;  author mks;  state Exp;
branches ;
next     ;


desc
@Generate a 8-bit checksum in 16-bit values...
@


40.2
log
@No longer uses the internal (private) include
@
text
@/*
 * $Id: SumKick.c,v 40.1 93/02/18 15:39:59 mks Exp Locker: mks $
 *
 * $Log:	SumKick.c,v $
 * Revision 40.1  93/02/18  15:39:59  mks
 * CleanUp for SAS/C 6 compile
 *
 * Revision 39.2  92/09/15  15:13:32  mks
 * Added the "double" keyword
 *
 * Revision 39.1  92/09/15  14:44:10  mks
 * First release of the checksum builder...
 *
 */

#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/alerts.h>

#include <string.h>

#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>

#include <utility/tagitem.h>
#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>

#include <dos/dosextens.h>
#include <dos/datetime.h>
#include <dos/dosasl.h>
#include <dos/rdargs.h>

#define DOSLIB	   "dos.library"
#define DOSVER	   37L

#define OPENFAIL { Result2(ERROR_INVALID_RESIDENT_LIBRARY); }
#define EXECBASE (*(struct ExecBase **)4)

#define THISPROC    ((struct Process *)(EXECBASE->ThisTask))
#define Result2(x)  THISPROC->pr_Result2 = x

/******************************************************************************/

#include	<exec/ports.h>
#include	<exec/libraries.h>

#include	<dos/dos.h>
#include	<dos/dosextens.h>

#include	"sumkick_rev.h"

/******************************************************************************/

/*
 * This command saves the VF into a file
 */

/* This is the command template. */
#define TEMPLATE  "FILE/A,DOUBLE/S" VERSTAG

#define	OPT_FILE	0
#define	OPT_DOUBLE	1
#define	OPT_COUNT	2

#define	KS_SIZE	(512*1024)

LONG cmd_savevf(void)
{
struct	Library		*SysBase = (*((struct Library **) 4));
struct	DosLibrary	*DOSBase;
struct	RDArgs		*rdargs;
	LONG		opts[OPT_COUNT];
	LONG		rc;

	rc=RETURN_FAIL;
	if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB,DOSVER))
	{
		memset((char *)opts, 0, sizeof(opts));
		rdargs = ReadArgs(TEMPLATE, opts, NULL);

		if (rdargs == NULL)
		{
			PrintFault(IoErr(),NULL);
		}
		else
		{
		UBYTE	*buffer;

			if (buffer=AllocVec(KS_SIZE,MEMF_PUBLIC))
			{
			BPTR	file;

				if (file=Open((char *)opts[OPT_FILE],MODE_OLDFILE))
				{
					if (KS_SIZE==Read(file,buffer,KS_SIZE))
					{
					ULONG	index;
					ULONG	tmp[2];
					UWORD	Sum0;
					UWORD	Sum1;

						index=0;
						Sum0=0;
						Sum1=0;
						while (index<KS_SIZE)
						{
							Sum0+=buffer[index++];
							Sum0+=buffer[index++];
							Sum1+=buffer[index++];
							Sum1+=buffer[index++];
						}

						if (opts[OPT_DOUBLE])
						{
							Sum0+=Sum0;
							Sum1+=Sum1;
						}

						tmp[0]=Sum0;
						tmp[1]=Sum1;
						VPrintf("Chip 0 sum $%04lx\nChip 1 sum $%04lx\n",tmp);
					}
					else PrintFault(IoErr(),NULL);
					Close(file);
				}
				else PrintFault(IoErr(),NULL);
				FreeVec(buffer);
			}
			else PrintFault(IoErr(),NULL);
			FreeArgs(rdargs);
		}

		CloseLibrary((struct Library *)DOSBase);
	}
	else
	{
		OPENFAIL;
	}
	return(rc);
}
@


40.1
log
@CleanUp for SAS/C 6 compile
@
text
@d2 1
a2 1
 * $Id: sumkick.c,v 39.2 92/09/15 15:13:32 mks Exp Locker: mks $
d4 4
a7 1
 * $Log:	sumkick.c,v $
d16 31
a46 1
#include	<internal/commands.h>
@


39.2
log
@Added the "double" keyword
@
text
@d2 1
a2 1
 * $Id: sumkick.c,v 39.1 92/09/15 14:44:10 mks Exp Locker: mks $
d5 3
d44 1
a44 1
struct	RDargs		*rdargs;
@


39.1
log
@First release of the checksum builder...
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d29 1
a29 1
#define TEMPLATE  "FILE/A" VERSTAG
d32 2
a33 1
#define	OPT_COUNT	1
d81 6
@
