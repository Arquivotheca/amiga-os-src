head     40.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


40.7
date     93.03.09.15.13.59;  author mks;  state Exp;
branches ;
next     40.6;

40.6
date     93.03.04.11.47.54;  author mks;  state Exp;
branches ;
next     40.5;

40.5
date     93.03.04.10.31.41;  author mks;  state Exp;
branches ;
next     40.4;

40.4
date     93.03.03.14.10.27;  author mks;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.03.12.07.41;  author mks;  state Exp;
branches ;
next     40.2;

40.2
date     93.02.25.15.25.31;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.02.18.15.38.55;  author mks;  state Exp;
branches ;
next     1.8;

1.8
date     91.12.13.19.55.58;  author mks;  state Exp;
branches ;
next     1.7;

1.7
date     91.12.11.09.37.39;  author mks;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.06.07.19.17;  author mks;  state Exp;
branches ;
next     1.5;

1.5
date     91.10.18.15.26.54;  author mks;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.17.10.26.15;  author mks;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.15.10.19.47;  author mks;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.11.08.25.15;  author mks;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.10.19.55.59;  author mks;  state Exp;
branches ;
next     1.0;

1.0
date     91.09.16.14.54.06;  author mks;  state Exp;
branches ;
next     ;


desc
@Allocates/clears/removes the VF memory area for the VF build
@


40.7
log
@CDGS code...
@
text
@/*
 * $Id: MakeVF.c,v 40.6 93/03/04 11:47:54 mks Exp Locker: mks $
 *
 * $Log:	MakeVF.c,v $
 * Revision 40.6  93/03/04  11:47:54  mks
 * Added TAG keyword and made it do the split tag and
 * APPEND only does an APPEND version of CLEAR.
 *
 * Revision 40.5  93/03/04  10:31:41  mks
 * Changed APPEND to make room for the version longword
 *
 * Revision 40.4  93/03/03  14:10:27  mks
 * Changed the keyword to Append...
 *
 * Revision 40.3  93/03/03  12:07:41  mks
 * Added the second-half parameter required for multi-512K kickstart
 * builds...
 *
 * Revision 40.2  93/02/25  15:25:31  mks
 * No longer uses the internal (private) include
 *
 * Revision 40.1  93/02/18  15:38:55  mks
 * CleanUp for SAS/C 6 compile
 *
 * Revision 1.8  91/12/13  19:55:58  mks
 * Fixed the VF Clear...  (major broken before)
 *
 * Revision 1.7  91/12/11  09:37:39  mks
 * Added the making of the VF structure in F-space for those
 * cases where the DIRECT keyword was used...
 *
 * Revision 1.6  91/12/06  07:19:17  mks
 * Added support for Direct mapping of the load space
 *
 * Revision 1.5  91/10/18  15:26:54  mks
 * Very minor code cleanup
 *
 * Revision 1.4  91/10/17  10:26:15  mks
 * Cleaned up formatting so it will print nice
 *
 * Revision 1.3  91/10/15  10:19:47  mks
 * Added standard version string to the commands
 *
 * Revision 1.2  91/10/11  08:25:15  mks
 * Moved FreeArgs() call to before the CloseLibrary(DOSBase)
 *
 * Revision 1.1  91/10/10  19:55:59  mks
 * Added the clearing of the global hunk counter
 *
 * Revision 1.0  91/09/16  14:54:06  mks
 * Initial revision
 *
 */

#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/alerts.h>

#include <string.h>

#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>

#include <utility/tagitem.h>
#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>

#include <dos/dosextens.h>
#include <dos/datetime.h>
#include <dos/dosasl.h>
#include <dos/rdargs.h>

#define DOSLIB	   "dos.library"
#define DOSVER	   37L

#define OPENFAIL { Result2(ERROR_INVALID_RESIDENT_LIBRARY); }
#define EXECBASE (*(struct ExecBase **)4)

#define THISPROC    ((struct Process *)(EXECBASE->ThisTask))
#define Result2(x)  THISPROC->pr_Result2 = x

/******************************************************************************/

#include	<exec/ports.h>
#include	<exec/libraries.h>
#include	<exec/semaphores.h>

#include	<dos/dos.h>
#include	<dos/dosextens.h>

#include	"makevf_rev.h"

/******************************************************************************/

#include	"vf.h"

/*
 * This command can make/remove/clear a virtual F space needed for build...
 */

/* This is the command template. */
#define TEMPLATE  "REMOVE/S,CLEAR/S,DIRECT/S,APPEND/S,TAG/S" VERSTAG

#define	OPT_REMOVE	0
#define	OPT_CLEAR	1
#define	OPT_DIRECT	2
#define	OPT_APPEND	3
#define	OPT_TAG		4
#define	OPT_COUNT	5

LONG cmd_makevf(void)
{
struct	Library		*SysBase = (*((struct Library **) 4));
struct	DosLibrary	*DOSBase;
struct	RDArgs		*rdargs;
struct	VF_Sem		*vf;
	LONG		opts[OPT_COUNT];
	LONG		rc;
	LONG		loop;

	rc=RETURN_FAIL;
	if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB,DOSVER))
	{
		memset((char *)opts, 0, sizeof(opts));
		rdargs = ReadArgs(TEMPLATE, opts, NULL);

		if (rdargs == NULL)
		{
			PrintFault(IoErr(),NULL);
		}
		else
		{
			/*
			 * We need to make sure that no one gets
			 * in here for a bit...
			 */
			Forbid();
			if (vf=(struct VF_Sem *)FindSemaphore(VF_NAME))
			{
				/*
				 * If the option to REMOVE the semaphore
				 * is set, we will remove it from the
				 * public list before we continue
				 * to optain it.  This makes sure that others
				 * will not try to obtain after we have...
				 */
				if (opts[OPT_REMOVE]) RemSemaphore((struct SignalSemaphore *)vf);
				ObtainSemaphore((struct SignalSemaphore *)vf);
			}

			/*
			 * If we are not removing the semaphore
			 * and we don't have one, we make one...
			 */
			if ((!opts[OPT_REMOVE]) && (!vf))
			{
				if (opts[OPT_DIRECT])
				{
					vf=VF_FPOS;	/* F-space VF structure */
					vf->Memory=(ULONG *)(0x00F00000);
				}
				else if (vf=AllocVec(VF_SIZE,MEMF_PUBLIC|MEMF_CLEAR))
				{
					vf->Memory=(ULONG *)&(vf->Memory_Start);
				}

				if (vf)
				{
					InitSemaphore((struct SignalSemaphore *)vf);
					strcpy(vf->SemName,VF_NAME);
					vf->Sem.ss_Link.ln_Name=vf->SemName;
					vf->Sem.ss_Link.ln_Pri=-127;	/* Bottom of list */
					AddSemaphore((struct SignalSemaphore *)vf);
					ObtainSemaphore((struct SignalSemaphore *)vf);		/* Get it for us */
				}
			}

			Permit();

			/*
			 * Ok, at this point, if vf is not NULL we
			 * have a semaphore and are ready to play with it...
			 */
			if (vf)
			{
				/*
				 * Check if VF matches the DIRECT mode
				 */
				if (opts[OPT_DIRECT])
				{
					if (VF_FPOS!=vf) PutStr("VF Semaphore is not in direct!\n");
				}
				else
				{
					rc=0;

					if (opts[OPT_CLEAR] || opts[OPT_APPEND])
					{
						if (opts[OPT_CLEAR]) vf->LastHunk=0;
						vf->LastPos=0;
						loop=(512*1024/4);

						if (vf->Memory==(ULONG *)(0x00F00000)) loop-=(sizeof(struct VF_Sem)/4);

						while (loop)
						{
							loop--;
							vf->Memory[loop]=0xFFFFFFFF;
						}
					}

					if (opts[OPT_TAG])
					{
						vf->Memory[0]=0x11144EF9;	/* fill...   JMP    */
						vf->Memory[1]=0x00F80002;	/*           F80002 */
						vf->Memory[2]=0x0000FFFF;	/* Diagnostic value */
						vf->Memory[3]=0xFFFFFFFF;	/* Empty version #  */

						if (vf->LastPos<4) vf->LastPos=4;
					}
				}

				/*
				 * We are done with it now, so release it
				 */
				ReleaseSemaphore((struct SignalSemaphore *)vf);

				/*
				 * Finally, if we are going to remove
				 * it, just call FreeVec()...
				 */
				if (opts[OPT_REMOVE]) if (VF_FPOS!=vf) FreeVec(vf);
			}
			else PutStr("Can not find VF Semaphore.\n");

			FreeArgs(rdargs);
		}

		CloseLibrary((struct Library *)DOSBase);
	}
	else
	{
		OPENFAIL;
	}
	return(rc);
}
@


40.6
log
@Added TAG keyword and made it do the split tag and
APPEND only does an APPEND version of CLEAR.
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 40.5 93/03/04 10:31:41 mks Exp Locker: mks $
d5 4
d219 1
a219 1
						vf->Memory[0]=0x11114EF9;	/* fill...   JMP    */
@


40.5
log
@Changed APPEND to make room for the version longword
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 40.4 93/03/03 14:10:27 mks Exp Locker: mks $
d5 3
d103 1
a103 1
#define TEMPLATE  "REMOVE/S,CLEAR/S,DIRECT/S,APPEND/S" VERSTAG
d109 2
a110 1
#define	OPT_COUNT	4
d211 1
d213 6
a218 4
						if (opts[OPT_APPEND])
						{
							vf->Memory[0]=0x11114EF9;	/* fill...   JMP     */
							vf->Memory[1]=0x00F80002;	/*           F80002  */
d220 1
a220 5
							/*
							 * Location 3 contains the version...
							 */
							vf->LastPos=4;
						}
@


40.4
log
@Changed the keyword to Append...
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 40.3 93/03/03 12:07:41 mks Exp Locker: mks $
d5 3
d212 5
a216 1
							vf->LastPos=2;
@


40.3
log
@Added the second-half parameter required for multi-512K kickstart
builds...
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 40.2 93/02/25 15:25:31 mks Exp Locker: mks $
d5 4
d97 1
a97 1
#define TEMPLATE  "REMOVE/S,CLEAR/S,DIRECT/S,SECONDHALF/S" VERSTAG
d102 1
a102 1
#define	OPT_SECONDHALF	3
d191 1
a191 1
					if (opts[OPT_CLEAR] || opts[OPT_SECONDHALF])
d205 1
a205 1
						if (opts[OPT_SECONDHALF])
@


40.2
log
@No longer uses the internal (private) include
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 40.1 93/02/18 15:38:55 mks Exp Locker: mks $
d5 3
d93 1
a93 1
#define TEMPLATE  "REMOVE/S,CLEAR/S,DIRECT/S" VERSTAG
d98 2
a99 1
#define	OPT_COUNT	3
d181 1
a181 4
					if (VF_FPOS!=vf)
					{
						PutStr("VF Semaphore is not in direct!\n");
					}
d187 1
a187 1
					if (opts[OPT_CLEAR])
d189 1
a190 1
						vf->LastHunk=0;
d193 1
a193 4
						if (vf->Memory==(ULONG *)(0x00F00000))
						{
							loop-=(sizeof(struct VF_Sem)/4);
						}
d200 7
d219 1
a219 7
				if (opts[OPT_REMOVE])
				{
					/*
					 * Check the semaphore for F-space
					 */
					if (VF_FPOS!=vf) FreeVec(vf);
				}
@


40.1
log
@CleanUp for SAS/C 6 compile
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.8 91/12/13 19:55:58 mks Exp Locker: mks $
d5 3
d38 31
a68 1
#include	<internal/commands.h>
@


1.8
log
@Fixed the VF Clear...  (major broken before)
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.7 91/12/11 09:37:39 mks Exp Locker: mks $
d5 3
d68 1
a68 1
struct	RDargs		*rdargs;
d91 1
a91 1
			if (vf=FindSemaphore(VF_NAME))
d100 2
a101 2
				if (opts[OPT_REMOVE]) RemSemaphore(vf);
				ObtainSemaphore(vf);
d122 1
a122 1
					InitSemaphore(vf);
d126 2
a127 2
					AddSemaphore(vf);
					ObtainSemaphore(vf);		/* Get it for us */
d175 1
a175 1
				ReleaseSemaphore(vf);
@


1.7
log
@Added the making of the VF structure in F-space for those
cases where the DIRECT keyword was used...
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.6 91/12/06 07:19:17 mks Exp Locker: mks $
d5 4
d154 8
a161 1
						for (loop=0;loop<(512*1024/4);loop++)
d163 1
@


1.6
log
@Added support for Direct mapping of the load space
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.5 91/10/18 15:26:54 mks Exp Locker: mks $
d5 3
d105 2
a106 4
					if (vf=AllocVec(sizeof(struct VF_Sem),MEMF_PUBLIC|MEMF_CLEAR))
					{
						vf->Memory=(ULONG *)(0x00F00000);
					}
d132 13
a144 1
				rc=0;
d146 1
a146 5
				if (opts[OPT_CLEAR])
				{
					vf->LastPos=0;
					vf->LastHunk=0;
					for (loop=0;loop<(512*1024/4);loop++)
d148 6
a153 1
						vf->Memory[loop]=0xFFFFFFFF;
d166 7
a172 1
				if (opts[OPT_REMOVE]) FreeVec(vf);
@


1.5
log
@Very minor code cleanup
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.4 91/10/17 10:26:15 mks Exp Locker: mks $
d5 3
d47 1
a47 1
#define TEMPLATE  "REMOVE/S,CLEAR/S" VERSTAG
d51 2
a52 1
#define	OPT_COUNT	2
d100 13
a112 1
				if (vf=AllocVec(VF_SIZE,MEMF_PUBLIC|MEMF_CLEAR))
@


1.4
log
@Cleaned up formatting so it will print nice
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.3 91/10/15 10:19:47 mks Exp Locker: mks $
d5 3
d50 1
a50 1
LONG cmd_loadwb(void)
@


1.3
log
@Added standard version string to the commands
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.2 91/10/11 08:25:15 mks Exp Locker: mks $
d5 3
d19 1
a19 1
#include <internal/commands.h>
d23 2
a24 2
#include        <exec/ports.h>
#include        <exec/libraries.h>
d27 2
a28 2
#include        <dos/dos.h>
#include        <dos/dosextens.h>
@


1.2
log
@Moved FreeArgs() call to before the CloseLibrary(DOSBase)
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.1 91/10/10 19:55:59 mks Exp Locker: mks $
d5 3
d27 2
d38 1
a38 1
#define TEMPLATE  "REMOVE/S,CLEAR/S"
@


1.1
log
@Added the clearing of the global hunk counter
@
text
@d2 1
a2 1
 * $Id: MakeVF.c,v 1.0 91/09/16 14:54:06 mks Exp Locker: mks $
d5 3
d128 2
a132 2

		if (rdargs) FreeArgs(rdargs);
@


1.0
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d106 1
@
