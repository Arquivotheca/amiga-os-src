head     40.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


40.3
date     93.03.03.14.06.19;  author mks;  state Exp;
branches ;
next     40.2;

40.2
date     93.02.25.15.25.53;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.02.18.15.39.18;  author mks;  state Exp;
branches ;
next     1.12;

1.12
date     92.06.06.19.39.26;  author mks;  state Exp;
branches ;
next     1.11;

1.11
date     92.06.06.16.04.08;  author mks;  state Exp;
branches ;
next     1.10;

1.10
date     92.06.06.11.56.44;  author mks;  state Exp;
branches ;
next     1.9;

1.9
date     91.10.18.18.41.42;  author mks;  state Exp;
branches ;
next     1.8;

1.8
date     91.10.18.18.36.48;  author mks;  state Exp;
branches ;
next     1.7;

1.7
date     91.10.18.15.31.14;  author mks;  state Exp;
branches ;
next     1.6;

1.6
date     91.10.17.10.26.57;  author mks;  state Exp;
branches ;
next     1.5;

1.5
date     91.10.15.10.19.39;  author mks;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.14.14.11.59;  author mks;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.14.13.54.14;  author mks;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.11.20.47.31;  author mks;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.11.08.28.27;  author mks;  state Exp;
branches ;
next     1.0;

1.0
date     91.09.16.14.54.32;  author mks;  state Exp;
branches ;
next     ;


desc
@Saves the VF buffer to the given file.  Usually only
saves the used part of the VF buffer but it can be told
to save the whole thing.
@


40.3
log
@Added APPEND keyword to let multipart builds work...
@
text
@/*
 * $Id: SaveVF.c,v 40.2 93/02/25 15:25:53 mks Exp Locker: mks $
 *
 * $Log:	SaveVF.c,v $
 * Revision 40.2  93/02/25  15:25:53  mks
 * No longer uses the internal (private) include
 *
 * Revision 40.1  93/02/18  15:39:18  mks
 * CleanUp for SAS/C 6 compile
 *
 * Revision 1.12  92/06/06  19:39:26  mks
 * Added message to end of file...
 *
 * Revision 1.11  92/06/06  16:04:08  mks
 * Changed the header for the ReKick files...
 * They now have an ASCII Copyright in them
 *
 * Revision 1.10  92/06/06  11:56:44  mks
 * Added REKICK and FKICK keywords and removed the KICKIT keyword...
 *
 * Revision 1.9  91/10/18  18:41:42  mks
 * New KickIt support fixed
 *
 * Revision 1.8  91/10/18  18:36:48  mks
 * Added KICKIT option to make KickIt files
 *
 * Revision 1.7  91/10/18  15:31:14  mks
 * Very minor code cleanup
 *
 * Revision 1.6  91/10/17  10:26:57  mks
 * Cleaned up formatting so it will print nice
 *
 * Revision 1.5  91/10/15  10:19:39  mks
 * Added standard version string to the commands
 *
 * Revision 1.4  91/10/14  14:11:59  mks
 * Now closes the SuperKick bonus file too... ;^)
 *
 * Revision 1.3  91/10/14  13:54:14  mks
 * Added the SUPERKICK option for making superkickstart files
 *
 * Revision 1.2  91/10/11  20:47:31  mks
 * Added symbol file completion
 *
 * Revision 1.1  91/10/11  08:28:27  mks
 * Moved FreeArgs() call to before the CloseLibrary(DOSBase)
 *
 * Revision 1.0  91/09/16  14:54:32  mks
 * Initial revision
 *
 */

#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/alerts.h>

#include <string.h>

#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>

#include <utility/tagitem.h>
#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>

#include <dos/dosextens.h>
#include <dos/datetime.h>
#include <dos/dosasl.h>
#include <dos/rdargs.h>

#define DOSLIB	   "dos.library"
#define DOSVER	   37L

#define OPENFAIL { Result2(ERROR_INVALID_RESIDENT_LIBRARY); }
#define EXECBASE (*(struct ExecBase **)4)

#define THISPROC    ((struct Process *)(EXECBASE->ThisTask))
#define Result2(x)  THISPROC->pr_Result2 = x

/******************************************************************************/

#include	<exec/ports.h>
#include	<exec/libraries.h>
#include	<exec/semaphores.h>

#include	<dos/doshunks.h>
#include	<dos/dos.h>
#include	<dos/dosextens.h>

#include	"savevf_rev.h"

/******************************************************************************/

#include	"vf.h"

/*
 * This command saves the VF into a file
 */

/* This is the command template. */
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K,SUPERKICK/K,REKICK/S,FKICK/S,APPEND/S" VERSTAG

#define	OPT_FILE	0
#define	OPT_ALL		1
#define	OPT_SYMBOL	2
#define	OPT_SUPERKICK	3
#define	OPT_REKICK	4
#define	OPT_FKICK	5
#define	OPT_APPEND	6
#define	OPT_COUNT	7

LONG cmd_savevf(void)
{
struct	Library		*SysBase = (*((struct Library **) 4));
struct	DosLibrary	*DOSBase;
struct	RDArgs		*rdargs;
struct	VF_Sem		*vf;
	LONG		opts[OPT_COUNT];
	LONG		rc;

	rc=RETURN_FAIL;
	if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB,DOSVER))
	{
		memset((char *)opts, 0, sizeof(opts));
		rdargs = ReadArgs(TEMPLATE, opts, NULL);

		if (rdargs == NULL)
		{
			PrintFault(IoErr(),NULL);
		}
		else
		{
			/*
			 * We need to make sure that no one gets
			 * in here for a bit...
			 */
			Forbid();
			if (vf=(struct VF_Sem *)FindSemaphore(VF_NAME))
			{
				ObtainSemaphore((struct SignalSemaphore *)vf);
			}
			Permit();

			if (vf)
			{
			BPTR	fh;
			ULONG	size;

				if (fh=Open((char *)opts[OPT_FILE],(opts[OPT_APPEND] ? MODE_OLDFILE : MODE_NEWFILE)))
				{
					if (opts[OPT_APPEND]) Seek(fh,0,OFFSET_END);

					size=(vf->LastPos)*4;
					if (opts[OPT_ALL]) size=FULL_SIZE*4;

					/*
					 * If a FKICK file, we do this
					 */
					if (opts[OPT_FKICK])
					{
					ULONG	tmp[2];

						tmp[0]=0;
						tmp[1]=size;
						Write(fh,tmp,8);
					}
					/*
					 * If a REKICK file, we do this...
					 */
					if (opts[OPT_REKICK])
					{
					ULONG	code;
					ULONG	*current;
					ULONG	bytes;

						Write(fh,"AMIGA ROM Operating System and Libraries: Copyright © 1985-1992 Commodore-Amiga, Inc.  All Rights Reserved.",108);

						/*
						 * Now, encode the file
						 */
						code=0xDEADFEED;
						current=vf->Memory;
						bytes=size;

						while (bytes)
						{
							code^=*current;
							*current=code;
							current++;
							bytes-=4;
						}
					}

					if (size!=Write(fh,vf->Memory,size))
					{
						PrintFault(IoErr(),NULL);
					}
					else if (opts[OPT_REKICK])
					{
						Write(fh,"AMIGA ROM Operating System and Libraries: Copyright © 1985-1992 Commodore-Amiga, Inc.  All Rights Reserved.",108);
						Write(fh,"\0Beta Release!  Do not distribute!\0",36);
						rc=RETURN_OK;
					}
					else if (opts[OPT_SUPERKICK])
					{
					BPTR	sfh;

						if (sfh=Open((char *)opts[OPT_SUPERKICK],MODE_OLDFILE))
						{
						ULONG	*buffer;

							Seek(sfh,0,OFFSET_END);
							size=Seek(sfh,0,OFFSET_BEGINNING);
							if (buffer=AllocVec(size,MEMF_PUBLIC))
							{
								if (size=Read(sfh,buffer,size))
								{
									if (size==Write(fh,buffer,size)) rc=RETURN_OK;
									else PrintFault(IoErr(),NULL);
								}
								else PrintFault(IoErr(),NULL);

								FreeVec(buffer);
							}
							else PrintFault(IoErr(),NULL);

							Close(sfh);
						}
						else PrintFault(IoErr(),NULL);
					}
					else rc=RETURN_OK;

					Close(fh);
					/*
					 * Now, if the user wanted to fix the
					 * symbol file...
					 */
					if (rc==RETURN_OK) if (opts[OPT_SYMBOL])
					{
						if (fh=Open((char *)opts[OPT_SYMBOL],MODE_OLDFILE))
						{
						ULONG	*buffer;

							Seek(fh,0,OFFSET_END);
							size=Seek(fh,0,OFFSET_BEGINNING);
							if (buffer=AllocVec(size,MEMF_PUBLIC))
							{
								if (size=Read(fh,buffer,size))
								{
								ULONG	junk[5];
								ULONG	loop;

									Seek(fh,0,OFFSET_BEGINNING);
									junk[0]=HUNK_HEADER;
									junk[1]=0;
									junk[2]=vf->LastHunk;
									junk[3]=0;
									junk[4]=vf->LastHunk-1;
									FWrite(fh,junk,5*4,1);
									junk[0]=0;
									loop=vf->LastHunk;
									while (loop--) FWrite(fh,junk,4,1);
									Flush(fh);
									Write(fh,buffer,size);
								}
								else PrintFault(IoErr(),"Symbol file read error");
								FreeVec(buffer);
							}
							else PrintFault(IoErr(),NULL);
							Close(fh);
						}
						else PrintFault(IoErr(),"Could not open symbol file");
					}
				}
				else PrintFault(IoErr(),NULL);

				ReleaseSemaphore((struct SignalSemaphore *)vf);
			}
			else PutStr("Can not find VF Semaphore.\n");
			FreeArgs(rdargs);
		}

		CloseLibrary((struct Library *)DOSBase);
	}
	else
	{
		OPENFAIL;
	}
	return(rc);
}
@


40.2
log
@No longer uses the internal (private) include
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 40.1 93/02/18 15:39:18 mks Exp Locker: mks $
d5 3
d106 1
a106 1
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K,SUPERKICK/K,REKICK/S,FKICK/S" VERSTAG
d114 2
a115 1
#define	OPT_COUNT	6
d154 1
a154 1
				if (fh=Open((char *)opts[OPT_FILE],MODE_NEWFILE))
d156 2
@


40.1
log
@CleanUp for SAS/C 6 compile
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.12 92/06/06 19:39:26 mks Exp Locker: mks $
d5 3
d50 31
a80 1
#include	<internal/commands.h>
@


1.12
log
@Added message to end of file...
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.11 92/06/06 16:04:08 mks Exp Locker: mks $
d5 3
d84 1
a84 1
struct	RDargs		*rdargs;
d106 1
a106 1
			if (vf=FindSemaphore(VF_NAME))
d108 1
a108 1
				ObtainSemaphore(vf);
d243 1
a243 1
				ReleaseSemaphore(vf);
@


1.11
log
@Changed the header for the ReKick files...
They now have an ASCII Copyright in them
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.10 92/06/06 11:56:44 mks Exp Locker: mks $
d5 4
d160 6
@


1.10
log
@Added REKICK and FKICK keywords and removed the KICKIT keyword...
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.9 91/10/18 18:41:42 mks Exp Locker: mks $
d5 3
d135 1
a135 2
						code=0x4B49434B;
						Write(fh,&code,4);
@


1.9
log
@New KickIt support fixed
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.8 91/10/18 18:36:48 mks Exp Locker: mks $
d5 3
d60 1
a60 1
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K,SUPERKICK/K,KICKIT/S" VERSTAG
d66 3
a68 2
#define	OPT_KICKIT	4
#define	OPT_COUNT	5
d113 1
a113 1
					 * If a ZKick/KickIt file, we do this
d115 1
a115 1
					if (opts[OPT_KICKIT])
d123 28
@


1.8
log
@Added KICKIT option to make KickIt files
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.7 91/10/18 15:31:14 mks Exp Locker: mks $
d5 3
d111 1
a111 1
					if (opts[OPT_KICKIT)
@


1.7
log
@Very minor code cleanup
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.6 91/10/17 10:26:57 mks Exp Locker: mks $
d5 3
d54 1
a54 1
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K,SUPERKICK/K" VERSTAG
d60 2
a61 1
#define	OPT_COUNT	4
d104 12
@


1.6
log
@Cleaned up formatting so it will print nice
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.5 91/10/15 10:19:39 mks Exp Locker: mks $
d5 3
d59 1
a59 1
LONG cmd_loadwb(void)
@


1.5
log
@Added standard version string to the commands
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.4 91/10/14 14:11:59 mks Exp Locker: mks $
d5 3
d25 1
a25 1
#include <internal/commands.h>
d29 2
a30 2
#include        <exec/ports.h>
#include        <exec/libraries.h>
d34 2
a35 2
#include        <dos/dos.h>
#include        <dos/dosextens.h>
@


1.4
log
@Now closes the SuperKick bonus file too... ;^)
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.3 91/10/14 13:54:14 mks Exp Locker: mks $
d5 3
d34 2
d45 1
a45 1
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K,SUPERKICK/K"
@


1.3
log
@Added the SUPERKICK option for making superkickstart files
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.2 91/10/11 20:47:31 mks Exp Locker: mks $
d5 3
d93 1
a93 1
					else
d95 3
a97 1
						if (opts[OPT_SUPERKICK])
d99 1
a99 1
						BPTR	sfh;
d101 3
a103 1
							if (sfh=Open((char *)opts[OPT_SUPERKICK],MODE_OLDFILE))
d105 1
a105 5
							ULONG	*buffer;

								Seek(sfh,0,OFFSET_END);
								size=Seek(sfh,0,OFFSET_BEGINNING);
								if (buffer=AllocVec(size,MEMF_PUBLIC))
d107 1
a107 5
									if (size=Read(sfh,buffer,size))
									{
										if (size==Write(fh,buffer,size)) rc=RETURN_OK;
										else PrintFault(IoErr(),NULL);
									}
a108 2

									FreeVec(buffer);
d111 2
d115 2
d118 1
a118 1
						else rc=RETURN_OK;
d120 1
@


1.2
log
@Added symbol file completion
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.1 91/10/11 08:28:27 mks Exp Locker: mks $
d5 3
d37 1
a37 1
#define TEMPLATE  "FILE/A,ALL/S,SYMBOL/K"
d42 2
a43 1
#define	OPT_COUNT	3
d90 30
a119 1
					else rc=RETURN_OK;
d125 1
a125 1
					if (opts[OPT_SYMBOL])
a134 1
								FreeVec(buffer);
d154 1
@


1.1
log
@Moved FreeArgs() call to before the CloseLibrary(DOSBase)
@
text
@d2 1
a2 1
 * $Id: SaveVF.c,v 1.0 91/09/16 14:54:32 mks Exp Locker: mks $
d5 3
d34 1
a34 1
#define TEMPLATE  "FILE/A,ALL/S"
d38 2
a39 1
#define	OPT_COUNT	2
d88 40
@


1.0
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d90 1
a93 2

		if (rdargs) FreeArgs(rdargs);
@
