
MakeMeta provides a standardized build environment for system work. It deals
with the protocol of building and releasing software to the server. This
involves compilation, creation of documentation, copying public files
to the correct locations, etc.

MakeMeta is implemented through a standard makefile that other modules must
include. The MakeMeta file should be located on the local machine building
a project as LIB:MakeMeta.

Makefiles for use with MakeMeta are generally quite short and look like:

SYSTEM         = graphics         # name of module being built
VERSION        = 41		  # which version
MODULETYPE     = kickstart	  # module type: kickstrat or workbench
AFILES         = myasmfile.asm    # assembly source files for project
CFILES         = mycfile.c	  # C source files for project
PUBLIC_IFILES  = copper.i         # public .i files for release to developers
PUBLIC_HFILES  = copper.h         # public .h files for release to developers
OTHERFILES_RCS = makefile         # project files under RCS
OTHERFILES     = program_rev.rev  # project files not under RCS

.include LIB:makemeta


As you can see, creating makefiles becomes quite simple. MakeMeta provides
you with all the functionality to handle checking files in and out and
doing server releases.


MakeMeta Variables
------------------

MakeMeta is controlled by a series of make variables. Some of these must
be initialized for each project, but the majority are set to defaults and
do not need to be changed within your makefiles. Here is a list of the
variables used by MakeMeta:


SYSTEM
Name of the project.

VERSION
Version of the project

MODULETYPE
Project type: "kickstart" or "workbench". Default is "kickstart"

SUBSYSNAME
Used by graphics.library. Allows projects to span multiple directories.
Default is none.

SUBSYSTEMS
Used by graphics.library. Allows projects to span multiple directories.
Default is none.

HOMEDIR
Final resting place for this project on the server. Default is
V$(VERSION):src/$(MODULETYPE)/$(SYSTEM)

HOMEINCL
Final resting place for the public include files for this project on
the server. Default is V$(VERSION):include/$(SYSTEM)

HOMESFD
Final resting place for the sfd file for this project on the server.
Default is V$(VERSION):lib/sfd

INCLUDEDIR
Directory on the local machine where include files can be found for
compilation. Default is "include:"

TEMPDIR
Temporary work directory on the local machine used during various operations.
Default is T:.

PRE_COMPILE
A target to be expanded before a make of the main file. this can be used to
bump the revision before compiling, for instance.

PRE_INTERNAL
A target to be expanded before a make internal. For instance, 'rev'.

POST_INTERNAL
A target to be expanded after copying the files for a make internal.

COMPILER
The name of the compiler to use. Default is "SC".

COMPILER_OPTS
Compiler options to use. Default are the compiler defaults.

COMPILER_OPTS_5
Compiler options to use when CVERSION=5. Default are the compiler
defaults.

COMPILER_DEFINES
Identifiers to define during compilation.

ONEPROTOPERFILE
Declaring

CVERSION
Defines which version of the C compiler is being used. The default is "6"
which identifies SAS/C 6.X. The other possible value is "5" which
identifies SAS/C 5.X.

PROTOINC PROTOINC2
Figure out what this does yourself, I'm too lazy.

LINKER
The name of the linker to use. Default is "Slink"

LINKER_LIBS
Link libraries to link in with project. Default is "LIB:amiga.lib"

LINKER_OPTS
Options to used when linking the project

LINKER_OPTS_STRIP
Options to used when linking the project to generate a version without
debugging information.

STARTUP_OBJECT
Startup code for project. Default is "".

ASSEMBLER
The name of the assembler to use. Default is "HX68"

ASSEMBLER_OPTS
Options for the assembler. Default is "OPTIMON 0xfdc00000 ADDSYM DEBUG"

ASM_PREPROCESSOR
Used by graphics.library for historical reasons. Default is "".

AFILES AFILES2 AFILES3
Lists the assembly files used in the project. Default is "".

CFILES
Lists the C files used in the project. Default is "".

CPPFILES
Lists the C++ files used in the project. Default is "".

PUBLIC_HFILES
Lists the public C header files maintained in the project. These are
header files that are to be released to developers.

PUBLIC_IFILES
Lists the public assembly header files maintained in the project. These
are header files that are to be released to developers.

OTHERFILES
Lists all files within this project that ARE under RCS, except for the
files listed in CFILES, AFILES, PUBLIC_HFILES, and PUBLIC_IFILES.

OTHERFILES_NORCS
Lists all files within this project that are NOT under RCS. For example,
bumprev files. These files are copied to the server upon release, but
are not put under RCS.

LIBFILES
Used by graphics.library for multi-directory work.

CLEANFILES
List of ancilliary files that should get deleted when a "make clean" happens.


MakeMeta Targets
----------------

rev
Bump the revision number of the project.

revlabel
Assigns an RCS label to all files in the project. The label name is derived
from: V$(VERSION)_`type $(SYSTEM)_rev.rev`

checkout
Make the RCS_link, and check out all files from the server unlocked.

checkoutlock
Same as checkout, except the files are checked out locked.

checkinlock
Opposite of checkoutlock. All files are checked back to the server and
delete for the local machine. If any files were modified, you are
prompted to enter the RCS change log message.

clean
Delete all .o files.

headers
Copy all public files to the server.

protos
Make a file called $(SUBSYSNAME).protos containing function prototypes for all
C and assembly files.

depend
Make a file called dependencies describing the dependencies of the project.

internal
Update the main file, and copy all files to the server

doc
Make autodocs from source files.

release
Make internal, make headers and make doc

who
Searches through all of the RCS files in all SUBSYSTEMS and prints a list of
locks held ordered by user.  For this rule to work it must be run with a
makefile that has at least one SUBSYSTEMS.
