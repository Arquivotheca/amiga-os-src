head     40.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


40.4
date     94.01.26.11.56.05;  author kcd;  state Exp;
branches ;
next     40.3;

40.3
date     93.10.23.01.04.27;  author kcd;  state Exp;
branches ;
next     40.2;

40.2
date     93.10.21.08.40.48;  author kcd;  state Exp;
branches ;
next     40.1;

40.1
date     93.09.13.21.24.16;  author kcd;  state Exp;
branches ;
next     ;


desc
@L64111 Specific code.
@


40.4
log
@""
@
text
@/*
** $Header: HOG:Other/cd32mpeg/RCS/l64111.c,v 40.3 93/10/23 01:04:27 kcd Exp Locker: kcd $
**
** Amiga MPEG Device Driver
**
** L64111 Specific Code
**
*/

#include <exec/types.h>
#include "mpeg_device.h"
#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>

#ifndef _GENPROTO
#include "l64111_protos.h"
#endif

VOID InitL64111(struct MPEGUnit *mpegUnit)
{
    L64111Regs *l64111Regs = mpegUnit->mu_L64111;

    WrL64111Register(Control_1, ANC_DATA_FIFO_RST | BUF_RST | SOFT_RST);
    {
         int i;
         volatile UBYTE delay;

         for(i = 0; i < 10000; i++)
            delay = *(volatile UBYTE *) 0xbfe001;
    }
    WrL64111Register(Control_1, 0);
    {
         int i;
         volatile UBYTE delay;

         for(i = 0; i < 10000; i++)
            delay = *(volatile UBYTE *) 0xbfe001;
    }
    WrL64111Register(Control_2, SEL_16 | PCM48FS);
    SetL64111AudioID(mpegUnit);
    WrL64111Register(Status_Int_1, 0);
    WrL64111Register(Status_Int_2, 0);
    WrL64111Register(Timer_CountDown, 4);

    /* The remainder values need to be zero for oversampling DAC. */

    WrL64111Register(Timer_OffsetHi, 0);
    WrL64111Register(Timer_OffsetLo, 0);
    return;
}

VOID SetL64111StatusInt1(UWORD intbits, struct MPEGUnit *mpegUnit)
{
    mpegUnit->mu_L64111Int1Bits = intbits;
    WriteL64111Register(Status_Int_1, intbits);
    return;
}

VOID SetL64111StatusInt2(UWORD intbits, struct MPEGUnit *mpegUnit)
{
    mpegUnit->mu_L64111Int2Bits = intbits;
    WriteL64111Register(Status_Int_2, intbits);
    return;
}

VOID SetL64111AudioID(struct MPEGUnit *mpegUnit)
{
    L64111Regs *l64111Regs = mpegUnit->mu_L64111;

    if(mpegUnit->mu_AudioID == 0xffff)
        WrL64111Register(Control_3, 0x80);
    else
    	WrL64111Register(Control_3, mpegUnit->mu_AudioID & 0x1f);
}

VOID PlayL64111(UWORD streamType, struct MPEGUnit *mpegUnit)
{
    L64111Regs *l64111Regs = mpegUnit->mu_L64111;

    if(streamType == MPEGSTREAM_AUDIO)
    {
        WrL64111Register(Control_2, SEL_16 | AUDIO_ONLY | PCM64FS);
    }
    else
    {
      WrL64111Register(Control_2, SEL_16 | PCM64FS);
    }
    WrL64111Register(Control_1, DEC_STRT | RdL64111Register(Control_1));
    return;
}

VOID PauseL64111(struct MPEGUnit *mpegUnit)
{
    WriteL64111Register(Control_1, ReadL64111Register(Control_1) & ~DEC_STRT);
    return;
}
@


40.3
log
@""
@
text
@d2 1
a2 1
** $Header: HOG:Other/cd32mpeg/RCS/l64111.c,v 40.2 93/10/21 08:40:48 kcd Exp Locker: kcd $
@


40.2
log
@""
@
text
@d2 1
a2 1
** $Header: HOG:Other/cd32mpeg/RCS/l64111.c,v 40.1 93/09/13 21:24:16 kcd Exp Locker: kcd $
d29 1
a29 1
            delay = *(UBYTE *) 0xbfe001;
d37 1
a37 1
            delay = *(UBYTE *) 0xbfe001;
d80 8
a87 8
//    if(streamType == MPEGSTREAM_AUDIO)
//    {
//        WrL64111Register(Control_2, SEL_16 | AUDIO_ONLY | PCM64FS);
//    }
//    else
//    {
        WrL64111Register(Control_2, SEL_16 | PCM64FS);
//    }
@


40.1
log
@""
@
text
@d2 1
a2 1
** $Header: HOG:Other/cd32mpeg/RCSl64111.c,v 1.1 93/09/13 21:07:44 kcd Exp Locker: kcd $
d19 1
a19 2
VOID ASM InitL64111(REG(a4) struct MPEGUnit *mpegUnit,
		    REG(a6) struct MPEGDevice *mpegDevice)
d24 7
a30 1
    Delay(5);
d32 9
a40 3
    Delay(5);
    WrL64111Register(Control_2, SEL_16 | PCM64FS);
    WrL64111Register(Control_3, 0);
d52 1
a52 3
VOID ASM SetL64111StatusInt1(REG(d2) UWORD intbits,
			     REG(a4) struct MPEGUnit *mpegUnit,
		             REG(a6) struct MPEGDevice *mpegDevice)
d59 1
a59 3
VOID ASM SetL64111StatusInt2(REG(d2) UWORD intbits,
			     REG(a4) struct MPEGUnit *mpegUnit,
		             REG(a6) struct MPEGDevice *mpegDevice)
d66 1
a66 3
VOID ASM PlayL64111(REG(d2) UWORD streamType,
		    REG(a4) struct MPEGUnit *mpegUnit,
		    REG(a6) struct MPEGDevice *mpegDevice)
d70 2
a71 4
    if(streamType == MPEGSTREAM_AUDIO)
    {
        WrL64111Register(Control_2, SEL_16 | AUDIO_ONLY | PCM64FS);
    }
d73 13
a85 1
    {
d87 1
a87 1
    }
d92 1
a92 2
VOID ASM PauseL64111(REG(a4) struct MPEGUnit *mpegUnit,
		     REG(a6) struct MPEGDevice *mpegDevice)
@
