head     40.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


40.1
date     93.09.13.21.28.33;  author kcd;  state Exp;
branches ;
next     ;


desc
@MPEG Device docs.
@



40.1
log
@""
@
text
@******* mpeg.device/CMD_RESET ************************************************
*
*   NAME
*       CMD_RESET -- restore device to a known state
*
*   FUNCTION
*       CMD_RESET should reset the hardware and/or software of the mpeg device
*       driver to a known state, cancel all pending I/O requests, and reset
*       any error conditions.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to reset
*       io_Command   - command number for CMD_RESET
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       None
*
******************************************************************************
******* mpeg.device/CMD_FLUSH ************************************************
*
*   NAME
*       CMD_FLUSH -- cancel all pending I/O
*
*   FUNCION
*       CMD_FLUSH aborts all CMD_READ or CMD_WRITE requests in progress or
*       queued.  This call will also flush any decoder buffers.  However,
*       the current play state will not be changed.  For the best visual
*       results, the CMD_STOP or MPEGCMD_PAUSE command should be executed
*	first so that decoding won't underflow into an ugly display
*	condition.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to reset
*       io_Command   - command number for CMD_FLUSH
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       None
*
******************************************************************************
******* mpeg.device/CMD_READ *************************************************
*
*   NAME
*       CMD_READ -- normal I/O entry point
*
*   FUNCTION
*       CMD_READ is used to read an MPEG stream that is being recorded by
*       the MPEG device driver.
*
*       If the stream is being recorded with clock information, io_Clock will
*       contain the system clock reference (SCR) at the time the data was
*       recorded.
*
*       Typically, each CMD_READ will correspond to a single audio or video
*       frame.
*
*       For best results, you should query the device to determine the
*       optimal buffer size suggested for the current parameters (video or
*       audio).
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to read data from
*       io_Command   - command number for CMD_READ
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a data buffer to fill with data from the
*                      MPEG stream being recorded
*       io_Length    - The size of the data buffer pointed to by io_Data
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occurred.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*       io_Actual    - The actual amount of data transferred into the
*                      buffer pointed to by io_Data.  Will be less than or
*                      equal to io_Length.
*       iomr_Clock     - The system clock reference associated with this
*                      data.  Only valid if MPEGFLAGF_VALIDSCR is set in
*                      io_MEPGFlags.
*       iomr_MPEGFlags - Status information regarding this data:
*                      MPEGFLAGF_VALIDCLK - io_Clock contains a valid
*                                           timestamp associated with
*                                           this data.
*
*   NOTES
*       For efficient operation, if will probably be best to keep a certain
*       minimum number of CMD_READ requests queued up at any given time.
*       The number and size of these requests will vary depending on what
*       data rate is being used for the recording process.
*
******************************************************************************
******* mpeg.device/CMD_WRITE ************************************************
*
*   NAME
*       CMD_WRITE -- normal I/O entry point
*
*   FUNCTION
*       CMD_WRITE is used to send data to the MPEG device driver when playing
*       back an MPEG stream.
*
*       Depending on the capabilities of the MPEG device driver, the data
*       may be packs from an ISO System stream, or may be raw video and/or
*       audio streams.
*
*	The amount of data the needs to be written to the device depends on
*	the playback mode being used.  For normal rate playback, it would be
*	a good idea to keep a large amount of data queued up in order to
*	avoid video or audio glitches.
*
*	When sending MPEG system streams to the device, each block of data
*	sent by the CMD_WRITE command MUST correspond to exactly one pack
*	of data.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to queue data for
*       io_Command   - command number for CMD_WRITE
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a data buffer that contains valid data
*       iomr_Clock     - A timestamp associated with this data segment.  This
*                      is typically the PTS value if this data segment was
*                      part of a system stream.
*       iomr_MPEGFlags - Status information regarding this data:
*                      MPEGFLAGF_VALIDCLK - io_Clock contains a valid
*                                           timestamp associated with
*                                           this data.
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occurred.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       For efficient operation, it will be best to keep a certain minimum
*       number of CMD_WRITE requests queued up at any given time, otherwise
*       gaps or glitches may appear in the audio and/or video output.
*
******************************************************************************
******* mpeg.device/MPEGCMD_PLAY *********************************************
*
*   NAME
*       MPEGCMD_PLAY -- Start decoding a MPEG stream
*
*   FUNCTION
*       MPEGCMD_PLAY tells the MPEG device driver to begin standard rate MPEG
*       playback.
*
*       The command may also be used to resume normal playback after issuing
*       a MPEGCMD_PAUSE command.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to begin playback on
*       io_Command   - command number for MPEGCMD_PLAY
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       iomr_Clock     - Unused.
*       iomr_StreamType  - Set to one of MPEGSTREAM_VIDEO, MPEGSTREAM_AUDIO
*                      or MPEGSTREAM_SYSTEM depending on the stream type.
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       Best results will be acheived if you queue up some data before
*       sending this command.  See mpeg.device/CMD_WRITE for more details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SETVIDEOPARAMS ***********************************
*
*   NAME
*       MPEGCMD_SETVIDEOPARAMS -- Set parameters for playback/recording
*
*   FUNCTION
*       MPEGCMD_SETVIDEOPARAMS allows you to set such things as picture size,
*	display type (NTSC/PAL), etc.
*
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to set parameters for
*       io_Command   - command number for MPEGCMD_SETVIDEOPARAMS
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a MPEGVideoParams structure.
*	io_Length    - Sizeof(struct MPEGVideoParams)
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       Not all devices can support all features listed in the include files,
*       so please use the MPEGCMD_GETDEVINFO command to determine what the
*       device is actually capable of doing.
*
******************************************************************************
******* mpeg.device/MPEGCMD_GETVIDEOPARAMS ***********************************
*
*   NAME
*       MPEGCMD_GETVIDEOPARAMS -- Get settings for video playback/recording
*
*   FUNCTION
*       MPEGCMD_GETVIDEOPARAMS may be used to determine what the current
*       settings are for playback and/or recording.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to get parameters from
*       io_Command   - command number for MPEGCMD_GETVIDEOPARAMS
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a MPEGVideoParams structure.
*	io_Length    - Sizeof(struct MPEGVideoParams)
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SETAUDIOPARAMS ***********************************
*
*   NAME
*       MPEGCMD_SETAUDIOPARAMS -- Set parameters for playback/recording
*
*   FUNCTION
*       MPEGCMD_SETPARAMS allows you to set such things as DAC attenuation,
*       sample rage, target bitrate for decoding, etc.
*
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to set parameters for
*       io_Command   - command number for MPEGCMD_SETAUDIOPARAMS
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a MPEGAudioParams structure.
*	io_Length    - Sizeof(struct MPEGAudioParams)
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       Not all devices can support all features listed in the include files,
*       so please use the CMD_GETDEVINFO command to determine what the board
*       is actually capable of doing.
*
******************************************************************************
******* mpeg.device/MPEGCMD_GETAUDIOPARAMS ***********************************
*
*   NAME
*       MPEGCMD_GETAUDIOPARAMS -- Get settings for audio playback/recording
*
*   FUNCTION
*       MPEGCMD_GETAUDIOPARAMS may be used to determine what the current
*	settings are for playback and/or recording.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to read parameters from
*       io_Command   - command number for MPEGCMD_GETAUDIOPARAMS
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a MPEGAudioParams structure.
*	io_Length    - Sizeof(struct MPEGAudioParams)
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SINGLESTEP ***************************************
*
*   NAME
*       MPEGCMD_STEP -- Step one video frame
*
*   FUNCTION
*       MPEGCMD_STEP may be used with mpeg device drivers that support it to
*       single step through successive frames of an MPEG movie.  This command
*       will cause the device to enter pause mode if it wasn't already.
*
*       In cases where a device doesn't support it directly, you may be able
*       to use this command for slow-motion playback by sending this command
*	at a constant rate.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to step
*       io_Command   - command number for CMD_STEP
*       iomr_StreamType  - Set to one of MPEGSTREAM_VIDEO, MPEGSTREAM_AUDIO or
*                      MPEGSTREAM_SYSTEM depending on the stream type.
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Length    - Number of frames to step ahead/record.
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SCAN *********************************************
*
*   NAME
*       MPEGCMD_SCAN -- Search for and display the next I-frame.
*
*   FUNCTION
*       MPEGCMD_SCAN may be used (on devices than support it) to implement a
*       visual fast forward and/or rewind function.  This command tells the
*       video decoder to search for and display the firt I-frame encountered
*       in the bitsream.  This command will complete after the I-frame has
*       been displayed and the read queue is flushed.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to step
*       io_Command   - command number for CMD_SCAN
*       iomr_StreamType  - Set to MPEGSTREAM_SYSTEM or MPEGSTREAM_VIDEO.
*       io_Flags     - flags, must be cleared if not used:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SLOWMOTION ***************************************
*
*   NAME
*       MPEGCMD_SLOWMOTION -- Start slow-motion video playback.
*
*   FUNCTION
*       MPEGCMD_SLOWMOTION is used to start slow-motion video playback.
*	(see redundant)
*
*	For this command, iomr_Clock is used to set the slow-motion frame
*	rate.  The display framerate will be equal to (stream frame rate/
*	iomr_Clock).  So a value of 2 would play the stream at half speed,
*	4 would be quarter speed, etc.  A value of 0 or 1 will have
*	essentially the same effect as MPEGCMD_PLAY, except that no audio
*	decoding will happen.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied
*                      from I/O block set by) OpenDevice function
*       io_Unit      - unit number to step
*       io_Command   - command number for CMD_SCAN
*       iomr_StreamType  - Set to MPEGSTREAM_SYSTEM or MPEGSTREAM_VIDEO.
*	iomr_Clock   - see above.
*       io_Flags     - flags, must be cleared if not used:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_RECORD *******************************************
*
*   NAME
*       MPEGCMD_RECORD -- Begin recording an MPEG stream
*
*   FUNCTION
*       MPEGCMD_RECORD is used to begin the MPEG encoding process for video,
*       audio or system streams.
*
*       The command should be called after queueing up a reasonable number
*       of CMD_READ commands (with the MPEGFLAGF_PREROLL flag set) for best
*       results.
*
*       Also, MPEGCMD_SETVIDEOPARAMS and/or MPEGCMD_SETAUDIOPARAMS should be
*       used for setting up things such as target output bitrate, sampling
*       rate for audio, frame rate for video, etc.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to begin playback on
*       io_Command   - command number for CMD_RECORD
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       iomr_Clock     - Time to start recording if MPEGFLAGF_VALIDCLK is set
*                      in io_MPEGFlags, otherwise start playing immediately.
*       iomr_StreamType  - Set to one of MPEGSTREAM_VIDEO, MPEGSTREAM_AUDIO
*                      ot MPEGSTREAM_SYSTEM depending on the stream type that
*                      you wish to record.
*       iomr_MPEGFlags - Flag bits for the CMD_PLAY command.
*                      MPEGFLAGF_VALIDCLK - io_Clock contains a valid
*                                           timestamp to start recording at.
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       Best results will be acheived if you queue up some data before
*       sending this command.  See mpeg.device/CMD_WRITE for more details.
*
******************************************************************************
******* mpeg.device/SetSCR ***************************************************
*
*   NAME
*       SetSCR -- Set the current time
*
*   SYNOPSIS
*       success = SetSCR(clockValue)
*       D0               D0
*
*       BOOL SetSCR(ULONG clockValue);
*
*   FUNCTION
*       This call is used to set the MPEG System Clock Reference for a MPEG
*       device driver.  This is usually used for synchronizing one device
*       driver to another.
*
*   INPUTS
*       clockValue   - The lower 32 bits of the SCR.  The MPEG clock is
*                      specified to be 33 bits, but we only use 32 bits of
*                      that clock.
*
*   OUTPUTS
*	success	     - Whether or not the clock was set.
*
******************************************************************************
******* mpeg.device/GetSCR ***************************************************
*
*   NAME
*       GetSCR -- Get the current System Clock Reference value.
*
*   SYNOPSIS
*       clockValue = GetSCR()
*       D0
*
*       ULONG GetSCR(void);
*
*   FUNCTION
*       This call is used to get the MPEG System Clock Reference from a MPEG
*       device driver.  This is usually used for synchronizing one device
*       driver to another.
*
*   INPUTS
*       None
*
*   OUTPUTS
*       clockValue   - The lower 32 bits of the SCR.  The MPEG clock is
*                      specified to be 33 bits, but we only use 32 bits of
*                      that clock.
*
******************************************************************************
******* mpeg.device/MPEGCMD_GETDEVINFO ***************************************
*
*   NAME
*       MPEGCMD_GETDEVINFO -- Determine the capabilities of an MPEG device
*
*   FUNCTION
*       MPEGCMD_GETDEVINFO is used to determine what types of operations a
*       MPEG device is capable of, as well as getting a short description of
*       that board.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to begin playback on
*       io_Command   - command number for CMD_GETDEVINFO
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       io_Data      - Pointer to a MPEGDevInfo structure to be filled in
*                      by the device.
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
*   NOTES
*       Best results will be acheived if you queue up some data before
*       sending this command.  See mpeg.device/CMD_WRITE for more details.
*
******************************************************************************
******* mpeg.device/CMD_STOP *************************************************
*
*   NAME
*       CMD_STOP -- Stop playback or recording
*
*   FUNCTION
*       CMD_STOP is used to permanently halt the playback or recording
*       process for the current stream.  All state information about the
*       current stream will be lost.  All pending CMD_READ or CMD_WRITE
*       requests will be flushed.
*
*       If this is used to halt a recording session, you will not lose any
*       data not yet returned.  Be sure to check io_Actual on all returned
*       IO requests, as many may not have any valid data.
*
*       This command is different from CMD_PAUSE which is used to
*       suspend the playback or recording process for a short period of
*       time.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to begin playback on
*       io_Command   - command number for CMD_PLAY
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_PAUSE ********************************************
*
*   NAME
*       MPEGCMD_PAUSE -- Temporarily susped stream playback or recording
*
*   FUNCTION
*       MPEGCMD_PAUSE is used to temporarily suspend the playback or recording
*       process of an MPEG stream, the intention being to resume playback at
*       some time.  All state information as well as any unused buffers will
*       be maintained by the device driver.  The last displayed video frame
*	will remain on the screen, and any audio output will be suspended.
*
*       This command is different from CMD_STOP which is used to permanantly
*       halt the playback or recording process of an MPEG stream.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to begin playback on
*       io_Command   - command number for MPEGCMD_PLAY
*       io_Flags     - flags, must be cleared if not use:
*                      IOF_QUICK - (CLEAR) reply I/O request
*       iomr_Clock     - Unused.
*       iomr_StreamType  - Set to one of MPEGSTREAM_VIDEO, MPEGSTREAM_AUDIO or
*                      MPEGSTREAM_SYSTEM depending on the stream type.
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SETWINDOW ****************************************
*
*   NAME
*       MPEGCMD_SETWINDOW -- Set portion of MPEG video to display
*
*   FUNCTION
*       MPEGCMD_SETWINDOW is used to set the portion of a MPEG video stream
*	that will be displayed.  The io_Data parameter must point to a
*	MPEGWindowParams structure that contains offset/size information.
*
*	The fields in the MPEGWindowParams structure are used as follows:
*
*	mwp_XOffset - X Offset into the decoded picture for display start
*	mwp_YOffset - Y Offset into the decoded picture for display start
*	mwp_Width - How wide the displayed portion should be
*	mwp_Height - How high the displayed portion should be
*
*	mwp_XOffset and mwp_Width are specified in Amiga Hi-Res pixels.
*	mwp_YOffset and mwp_Height are specified in non-interlaced scan
*	lines.
*
*	Note: The CL450 is limited to positioning the decode window on
*	lo-res pixel boundaries, so mwp_XOffset will be scaled down by
*	two.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to step
*       io_Command   - command number for MPEGCMD_SETWINDOW
*	io_Data	     - pointer to a MPEGWindowParams structure.
*	io_Length    - sizeof(struct MPEGWindowParams)
*       io_Flags     - flags, must be cleared if not used:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
******* mpeg.device/MPEGCMD_SETBORDER ****************************************
*
*   NAME
*       MPEGCMD_SETBORDER -- Set display position and border color
*
*   FUNCTION
*       MPEGCMD_SETBORDER is used to set the display position and border color
*	for the decoded video stream.
*
*	The io_Data field of the IO request must point to a MPEGBorderParams
*	structure.   That structure should be set up as follows:
*
*	mbp_LeftBorder  - Offset from left of display (Hi-Res pixels)
*	mbp_TopBorder	- Offset from top of display  (NI scanlines)
*	mbp_BorderRed	- 8-bit red value for the border color
*	mbp_BorderGreen - 8-bit green value for the border color
*	mbp_BorderBlue  - 8-bit blue value for the border color
*
*	Values of 0 for mbp_LeftBorder and/or mbp_TopBorder mean that the
*	video should be centered horizontally and/or vertically centered
*	on the display.
*
*   INPUTS
*       mn_ReplyPort - pointer to message port that receives I/O request
*                      if the quick flag (IOF_QUICK) is clear
*       io_Device    - pointer to device node, must be set by (or copied from
*                      I/O block set by) OpenDevice function
*       io_Unit      - unit number to step
*       io_Command   - command number for MPEGCMD_SETBORDER
*	io_Data	     - pointer to a MPEGBorderParams structure.
*	io_Length    - sizeof(struct MPEGWindowParams)
*       io_Flags     - flags, must be cleared if not used:
*                      IOF_QUICK - (CLEAR) reply I/O request
*
*   OUTPUTS
*       io_Error     - If non-zero, then an error of some kind occured.
*                      See <exec/errors.h> and <devices/mpeg.h> for more
*                      details.
*
******************************************************************************
@
