WriteMF.doc              J.W. Lockhart           12 Mar 1992

   WriteMF - Write Memory to File

   WriteMF writes from a block of RAM to the given file,
   x number of times.  It's smart enough to deal with files larger
   than the RAM size, and will do the appropriate Seek()s for proper
   verification (if specified).

Template: FILE/A, MS=MEMSIZE/K/N, MT=MEMTYPE/K, REPS/K/N, FS=FILESIZE/K/N,
          PRI=PRIORITY/K/N, PAT/K/N, VER=VERIFY/S, RM=DELETE/S

Where:
    FILE      - file to write
    MEMSIZE   - Memory size (default 256K)
    MEMTYPE   - Memory type/location/board (see below)
    REPS      - times to repeat test (default: 30)
    FS        - size of file to write
    PRI       - priority program should run at (default: 2)
    PAT       - pattern to write (0..255)  (default: none)
                Try 1716877124 (==0x66557744=='fUwD').
    VER       - whether to verify info (requires 2*RAM) 
                default = off.
    DELETE    - Delete file when finished?  Default = NO.

Requires:
    Memserver, AmigaDOS V37 or better, Shell (not workbench)
    Recommend serial terminal at 9600 baud (for MemServer's use).

Example usage:
    run writemf work:foo ms 1024000 mt any reps 2 fs 10000000 pat 65 ver

Changes:
    12 Mar 92 - Fixed bug where the size of the file created would be the
    size of the memory buffer, if the requested file size was smaller
    than said memory buffer.  Also upgraded the error reporting.  Now
    supports the features in V2.x MemServer for client control and
    enhanced error reporting.

Note on patterns:
    You may use any (decimal) long value for the pattern.  Highly
    recommended is 1716877124, which is hex 66557744 or ascii fUwD.
    This is useful when used in combination with ReadFM; it shows up
    any 'off-by-one-byte' errors, and is easily told from the 0xFF and
    0xEE buffer fill patterns used there.

Note on boards:
    Expansion boards are numbered 1 to n, starting closest to the CPU and
    proceeding to the left.  Non-RAM boards are not counted; neither are
    empty slots.  Alternatively, you may specify any of the following:

                       Board    Meaning
                       -----    -----------
                         MB     MOTHERBOARD 
                         CPU    CPU_BOARD 
                         1      BUS_1 
                         2      BUS_2 
                         3      BUS_3 
                         4      BUS_4 
                         5      BUS_5 
                         6      BUS_6 
                         CHIP   CHIP RAM
                         FAST   FAST RAM
                         ANY    ANY RAM
                         ROM    ROM 

    Be aware that the behavior of these values is highly dependent on the
    current behavior of the MemServer.  As of this writing, Motherboard RAM
    is treated as the first Fast RAM found which is not on the expansion bus.
    ROM currently works.  CPU is equivalent to BUS_1 if a CPU board with
    expansion RAM is present.  See MemServer.doc for any board/location
    numbers you may (rarely) encounter.

This code is residentable.

