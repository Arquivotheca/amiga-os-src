/****** Clients/aprintf ******************************************
*
*   NAME
*           aprintf - small, residentable printf
*
*   SYNOPSIS
*           VOID aprintf(STRPTR fmt, LONG argv, ...);
*
*   FUNCTION
*           Prints string to current output.  Uses dos.library/VPrintf().
*           Just like amiga.lib/Printf(), but residentable.  Use #pragmas
*           to make it so.
*
*   INPUTS
*       fmt - pointer to string to be printed.
*       argv- first value to be incorportated into string.  Use NULL for none.
*
*   RESULT
*       none
*
*   EXAMPLE
*       aprintf("This is example %ld\n", 1L);
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*       dos.library/VPrintf(), amiga.lib/Printf(), exec.library/RawDoFmt()
*
******************************************************************************
*
*/

/****** Clients/findServerPort() ******************************************
*
*   NAME
*       findServerPort() - finds the server's port.
*
*   SYNOPSIS
*       mp = findServerPort()
*       struct MsgPort *findServerPort(VOID);
*
*   FUNCTION
*       Finds the server's port.  Returns NULL if the server is not active.
*       Uses the SERVER_PORT name defined in Common_h.c.
*
*   INPUTS
*       none.
*
*   RESULT
*       Pointer to the server's message port, or NULL if it can't be found.
*
*   EXAMPLE
*
*   NOTES
*       Although the call to FindPort() is protected by a Forbid()/Permit()
*       pair, it is perfectly possible that the server's port could vanish
*       before you could use the returned MsgPort.  This function is intended
*       just to go look and see if the server is active.
*
*   BUGS
*
*   SEE ALSO
*       exec.library/FindPort(), Common_h.c
*
******************************************************************************
*
*/


/****** Clients/createClientPort ******************************************
*
*   NAME
*       createClientPort - create a port for a client.
*
*   SYNOPSIS
*       mp = createClientPort(portName);
*       struct MsgPort *createClientPort(STRPTR portName);
*
*   FUNCTION
*       Takes a name of the form "PortName_" and creates a (currently)
*       unique name of the form "PortName_4".  Returns NULL if a port
*       cannot be created.
*
*   INPUTS
*       portName - pointer to string containing template for the name to
*                  be used.
*
*   RESULT
*       mp - a message port, ready to use.
*
*   EXAMPLE
*       mp = createClientPort("MyPort_");
*
*   NOTES
*       Uses amiga.lib/CreatePort() to do the actual creation.
*
*   BUGS
*
*   SEE ALSO
*       amiga.lib/CreatePort()
*
******************************************************************************
*
*/

/****** Clients/sendMsg ******************************************
*
*   NAME
*       sendMsg - sends a message to the server
*
*   SYNOPSIS
*       success = sendMsg(mr, g)
*       BOOL sendMsg(struct memRequest *mr, struct Globals *g);
*
*   FUNCTION
*       Sends a message to the MemServer.  See Common_h.c for
*       the struct memRequest.  You must have a valid mr->cmd field.
*       Results will be returned in mr->rc and mr->rc2; other data
*       will be altered appropriately for each type of request.
*
*   INPUTS
*       mr - pointer to struct memRequest.
*       g  - pointer to struct Globals.  Globals should be defined within
*            your program, and should contain as a minimum:
*                 struct RDArgs *rdargs;           /* your readargs struct */
*                 struct MsgPort *mp;              /* your message port    */
*                 struct DateTime dt;              /* for timestamping     */
*                 UBYTE  portName[PORT_TEMP_LEN]  /* your port name        */
*                 SHORT  rc                       /* your return code      */
*
*   RESULT
*       TRUE if message was sent, FALSE if server's port has vanished, or
*       if you don't have a return message port.  If FALSE is returned,
*       your message was not sent.  Note well:
*       Failure of this function is sufficient cause to cease execution of
*       your client program.
*
*   EXAMPLE
*       if (!sendMsg(mr, g)) {
*           PutStr("Error sending message!\n");
*           exit(RETURN_FAIL);
*       }
*
*   NOTES
*       This function is used internally by several other functions, and
*       is not really intended to be used by itself.  This function is safe
*       to call even if you don't have a MsgPort; in this case, g->mp should
*       be NULL.  This is so sendMsg may be used in a clean-exit routine.
*       TimeStamping of your message (using g->dt) will occur.
*       This function checks for the existence of the SERVER_PORT before
*       sending a message.  It waits for a single reply to the message,
*       and checks to see if the returned message is the same as the
*       message sent.  Note that the server only replies to messages; it
*       does not originate them.
*       This function sets up your messages mn_Node, mn_Length, and 
*       mn_ReplyPort for you.
*
*   BUGS
*
*   SEE ALSO
*       exec.library/FindPort(), exec.library/PutMsg(),
*       exec.library/WaitPort(), exec.library/GetMsg(),
*       dos.library/DateStamp()
*
******************************************************************************
*
*/

/****** Clients/setBoard ******************************************
*
*   NAME
*       setBoard - look up appropriate value for a string containing the
*                  name of a given board or memory type.
*
*   SYNOPSIS
*       setBoard(name, mr)
*       VOID setBoard(STRPTR name, struct memRequest *mr);
*
*   FUNCTION
*       Using the static lookup table vals, defined in client2server.h,
*       matches a given name-string with the appropriate value for
*       the server's use.  This value is placed in mr->board.
*
*   INPUTS
*       name - pointer to string.
*       mr   - pointer to struct memRequest (defined in common_h.c)
*
*   RESULT
*       Valid board is returned in mr->board; mr->board is set to
*       -2 if the name is not valid.
*
*   EXAMPLE
*       setBoard((STRPTR)Opts[OPT_BOARD], mr);
*       if (mr->board == -2) {
*           PutStr("Board spec not valid!\n");
*           showValidNames();
*           exit(RETURN_FAIL);
*       }
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*       Common_h.c, client2server.h, Clients/showValidNames()
*
******************************************************************************
*
*/

/****** Clients/showValidNames ******************************************
*
*   NAME
*       showValidNames - print a list of valid memory board/type names
*                        to current Output() using aprintf().
*
*   SYNOPSIS
*       showValidNames();
*       VOID showValidNames(VOID);
*
*   FUNCTION
*       Displays list of all currently recognized names for boards
*       and memory types.
*
*   INPUTS
*       None.
*
*   RESULT
*       None.  Prints list, but doesn't check result.
*
*   EXAMPLE
*
*   NOTES
*       Uses static array of structures, vals, defined in client2server.h.
*
*   BUGS
*
*   SEE ALSO
*       common_h.c, client2server.h, aprintf()
*       
*
******************************************************************************
*
*/


/****** Clients/dumpMemReq ******************************************
*
*   NAME
*       dumpMemReq - print contents of a given memRequest.  For debugging.
*
*   SYNOPSIS
*       dumpMemReq(mr)
*       VOID dumpMemReq(struct memRequest *mr);
*
*   FUNCTION
*       prints contents of given memRequest to current output.
*
*   INPUTS
*       mr - pointer to struct memRequest (see Common_h.c)
*
*   RESULT
*       None.  Doesn't check to see if list was actually printed.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*       Doesn't check validity of *mr.  If you pass it NULL, you'll get
*       a ton of Enforcer READ hits.
*
*   SEE ALSO
*       aprintf(), Common_h.c
*
******************************************************************************
*
*/

/****** Clients/servAlloc ******************************************
*
*   NAME
*       servAlloc - ask server to allocate memory
*
*   SYNOPSIS
*       success = servAlloc(bytes, mode, mr, g)
*       BOOL servAlloc(ULONG bytes, LONG mode, struct memRequest *mr,
*                      struct Globals *g);
*
*   FUNCTION
*       Allocate given type of RAM with given protecion mode.
*
*   INPUTS
*       bytes - number of bytes to allocate
*       mode  - one of: OK_WRITE, OK_READ, NC_WRITE, NC_READ (Common_h.c)
*               OK_WRITE is exclusive access; OK_READ guarantees that the
*               memory won't change while you're reading it; NC_WRITE
*               allows you write access, but does not guarantee that the RAM
*               contents will be the same when you read the block again;
*               NC_READ allows you to read the block, but does not guarantee
*               that the contents won't change as you read.
*       mr    - pointer to struct memRequest.  memSize, access, and cmd are
*               filled in for you, but you must fill in the board field.
*       g     - struct Globals, which you must declare and set up.  As
*               a minimum, it should contain:
*                 struct RDArgs *rdargs;           /* your readargs struct */
*                 struct MsgPort *mp;              /* your message port    */
*                 struct DateTime dt;              /* for timestamping     */
*                 UBYTE  portName[PORT_TEMP_LEN]  /* your port name        */
*                 SHORT  rc                       /* your return code      */
*               Your MsgPort, portName, and DateTime fields should be
*               properly set up before calling this function.
*
*   RESULT
*       TRUE if the allocation succeeded, FALSE if it failed; exits
*       using clean-exit routine named GoodBye() if a catastrophic error
*       (such as the server not being there) occurs.  If FALSE is 
*       returned, you can check mr->rc and mr->rc2 for further information.
*       If TRUE is returned, mr->memPtr will contain a pointer to your block
*       of RAM.
*
*   EXAMPLE
*       if (!servAlloc(10240UL, OK_WRITE, mr, g)) {
*           PutStr("Couldn't allocate ram\n");
*           GoodBye(g);
*       }
*
*   NOTES
*       You will get more information about the failure in mr->rc and
*       in mr->rc2.  rc2 is often MEM_NOT_AVAIL, MEM_READ_ONLY, or
*       MEM_NOT_VALID.  (mr->rc is usually RETURN_ERROR on error).
*
*       Incidentally, here's the story on CMD_ABEO:  "abeo" is
*       Latin ab + eo, or "I'm going away".  A bit more appropriate
*       than Latin ex + it (he/she/it goes out), if a tad confusing.
*
*       Function GoodBye() is called if sendMsg() fails.  This function
*       should be written by you, and it should shut down the message
*       port and send a CMD_ABEO to the server.  A typical GoodBye
*       function might look like this:
*       struct Globals {
*                 struct RDArgs *rdargs;           /* your readargs struct */
*                 struct MsgPort *mp;              /* your message port    */
*                 struct DateTime dt;              /* for timestamping     */
*                 UBYTE  portName[PORT_TEMP_LEN]  /* your port name        */
*                 SHORT  rc                       /* your return code      */
*                 struct memRequest mr;           /* a memory request      */
*       }
*
*     VOID GoodBye(struct Globals *g) {
*          SHORT rc = RETURN_FAIL;
*          struct Message *msg=NULL;
*          if (g) {
*             rc = g->rc;
*             if (g->mr.memPtr)
*                servFree(&(g->mr), g);
*             mr->cmd = CMD_ABEO;  /* client exiting */
*             sendMsg(&(g->mr), g);
*             if (g->mp) {
*                while (msg = GetMsg(g->mp)) ;
*                DeletePort(g->mp);
*                g->mp = NULL;
*             }
*             if (g->rdargs) {
*                FreeArgs(g->rdargs);
*                g->rdargs = NULL;
*             }
*             /* and, if you AllocVec'd g, */
*             FreeVec(g);
*             g = NULL;
*          }
*          exit(rc);
*     }
*
*   BUGS
*
*   SEE ALSO
*       sendMsg(), servFree()
*
******************************************************************************
*
*/

/****** Clients/servFree ******************************************
*
*   NAME
*       servFree - free a block of RAM allocated by the server
*
*   SYNOPSIS
*       success = servFree(mr, g)
*       BOOL servFree(struct memRequest *mr, struct Globals *g);
*
*   FUNCTION
*       Frees a block of RAM allocated by the server.  You must
*       have mr->memPtr and mr->memSize set up, as well as valid
*       message ports.
*
*   INPUTS
*       mr - struct memRequest (see Common_h.c)
*       g  - struct Globals (see servAlloc()).
*
*   RESULT
*       TRUE if memory was freed, FALSE otherwise.  g->rc is set
*       to RETURN_ERROR if the sendMsg() fails; however, GoodBye()
*       is NOT called---this makes servFree safe to call from within
*       the GoodBye() exit routine.  A return of FALSE generally means
*       that another client is using the RAM, and should free it when
*       it has finished.  
*
*   EXAMPLE
*       if (servAlloc(10240UL, OK_WRITE, mr, g))
*           servFree(mr, g);
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*       servAlloc(), Common_h.c
*
******************************************************************************
*
*/

/****** Clients/servAccess ******************************************
*
*   NAME
*       servAccess - change access mode to a block of RAM allocated
*                    by the MemServer.
*
*   SYNOPSIS
*       success = servAccess(newMode, mr, g)
*       BOOL servAccess(LONG newMode, struct memRequest *mr, struct Globals *g);
*
*   FUNCTION
*       Attempts to change the access mode on a block of RAM which was
*       allocated earlier by the server using servAlloc().
*
*   INPUTS
*       newMode - one of OK_WRITE, OK_READ, NC_WRITE, or NC_READ.
*                 NC is "no care".  See servAlloc() for details.
*       mr      - pointer to struct memRequest.  See Common_h.c.
*       g       - pointer to struct Globals.  See servAlloc().
*
*   RESULT
*       TRUE if mode is changed; FALSE otherwise, with more information
*       in mr->rc and mr->rc2.  Calls exit routine GoodBye() if 
*       a server communications error occurs (ie, if sendMsg() fails).
*
*   EXAMPLE
*       if (servAlloc(10240UL, OK_WRITE, mr, g)) {
*             ... write to RAM ...
*           servAccess(OK_READ, mr, g);  ... attempt to let others read ...
*             ... more code ...
*           servFree(mr, g);
*       }
*
*   NOTES
*       Changes mr->newAccess, mr->cmd, mr->rc, mr->rc2, mr->status.
*
*   BUGS
*
*   SEE ALSO
*       servAlloc(), servFree(), Common_h.c
*
******************************************************************************
*
*/

/****** Clients/servLog ******************************************
*
*   NAME
*       servLog - request that the server log a message
*
*   SYNOPSIS
*       success = servLog(mr, g, fmt, argv, ...);
*       BOOL servLog(struct memRequest *mr, struct Globals *g, 
*                    STRPTR fmt, LONG argv, ...);
*
*   FUNCTION
*       Printf-style command to have the server place a message in
*       its log.  Your message will be time- and date-stamped, and
*       your mr->clientName used to identify you.
*
*   INPUTS
*       mr   - pointer to struct memRequest; see Common_h.c.
*       g    - pointer to struct Globals; see servAlloc()
*       fmt  - pointer to printf-style string containing formatting
*              information.  See also exec.library/RawDoFmt() and
*              dos.library/VPrintf().
*       argv - first argument, 0L if none.
*       ...  - additional arguments.
*
*   RESULT
*       TRUE if message was logged; FALSE otherwise.  If sendMsg()
*       fails, the exit routine GoodBye() (see servAlloc()) is called.
*       A newline is appended to your string by the server.
*
*   EXAMPLE
*       Simplest case:
*         servLog(mr, g, "This is test %ld", 1L);
*
*       To report an error and get whatever error facilities the
*       Server offers,
*         mr->status = STATUS_CLIENT_ERR;
*         servLog(mr, g, "This is error %ld", 1L);
*
*       To report a serious error and let the server decide if you
*       should exit,
*         mr->status = STATUS_SEVERE_ERR;
*         servLog(mr, g, "This is severe error %ld", 1L);
*         if (mr->status == STATUS_CHECK_CMD)
*            if (mr->cmd == CMD_QUIT)
*               GoodBye(g);
*
*   NOTES
*       String is pre-formatted by bsprintf2() and placed in mr->log1
*       before actual cmd_logIt message is sent.  A temporary buffer
*       is allocated on the stack; its size is LOG_BUF_SIZE, defined
*       in client2server.h.
*
*       servLog is currently the only function which will trigger
*       a STATUS_CHECK_CMD and/or a CMD_QUIT; it will do this ONLY
*       if you set mr->status to STATUS_SEVERE_ERR beforehand.  If
*       the server is set up with the NCQ option (user's choice),
*       you may get CMD_CONTINUE instead of CMD_QUIT.
*
*       Note also that currently, mr->log2 is not used by any
*       server or client function, and is very likely to disappear.
*
*   BUGS
*
*   SEE ALSO
*       servAlloc(), Common_h.c, aprintf(), exec.library/RawDoFmt(),
*       dos.library/VPrintf(), dos.library/VFPrintf(), bsprintf2(),
*       client2server.h, debug.lib/KPrintF(), debug.lib/KPutStr(),
*       server's logMsg() function.
*
******************************************************************************
*
*/

/****** Clients/bsprintf2 ******************************************
*
*   NAME
*       bsprintf2 - small sprintf routine using exec/RawDoFmt() (asm)
*
*   SYNOPSIS
*       bsprintf2(dest, fmt, arg)
*       asm VOID bsprintf2(STRPTR dest, STRPTR fmt, LONG arg);
*
*   FUNCTION
*       Places a formatted string in the destination buffer.
*
*   INPUTS
*       dest - pointer to valid destination buffer
*       fmt  - pointer to format string, printf-style
*       arg  - first argument to be printed.
*
*   RESULT
*       None.
*
*   EXAMPLE
*       VOID myVarArgsFunct(struct myStuff *ms, STRPTR fmt, LONG arg1, ...) {
*           UBYTE buf[256];
*           bsprintf2(buf, fmt, (LONG)&arg1);
*           ... etc ...
*       }
*
*   NOTES
*      Just like the assembler example given in
*      exec.library/RawDoFmt(), except the lea.l for the datastream has
*      been changed to a move.l so that bsprintf2 can be called from within
*      a variable-arguments function.  Use bsprintf() for a more normal sprintf.
*
*   BUGS
*       No length-checking is done.
*
*   SEE ALSO
*       exec.library/RawDoFmt()
*
******************************************************************************
*
*/

