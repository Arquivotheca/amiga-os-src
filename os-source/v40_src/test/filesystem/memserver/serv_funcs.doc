
/****** MemServer/getNumOfBoards ******************************************
*
*   NAME
*       SHORT getNumOfBoards(VOID);
*
*   SYNOPSIS
*       numboards = getNumOfBoards()
*
*       SHORT getNumOfBoards(VOID);
*       
*
*   FUNCTION
*       Find out how many memory boards are in the system.
*
*
*
*   INPUTS
*       None
*
*   RESULT
*       numboards - number of memory boards in the system.  This
*                   includes CPU boards (eg A2630).
*
*
*   EXAMPLE
*
*
*   NOTES
*       Requires previous open of expansion.library.
*
*   BUGS
*
*   SEE ALSO
*       stuffBoards(), printBoardInfo()
******************************************************************************
*
*/



/****** MemServer/printBoardInfo ******************************************
*
*   NAME
*       VOID printBoardInfo(struct boardInfo *bi);
*
*   SYNOPSIS
*       printBoardInfo(bi)
*
*       VOID printBoardInfo(struct boardInfo *bi);
*
*
*   FUNCTION
*       Prints out a previously-setup boardInfo structure.
*       Knows memory boards best.
*
*
*   INPUTS
*       bi - pointer to struct boardInfo.
*
*
*   RESULT
*       Prints info about boards to screen.
*       PutStr / Printf / VPrintf to Output().
*
*
*   EXAMPLE
*       struct boardInfo {
*           ULONG start;
*           ULONG end;
*           ULONG size;
*       }
*       struct boardInfo bi[6];
*       /* fill in structure */
*       printBoardInfo(&bi);
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*       stuffBoards()
******************************************************************************
*
*/

/****** MemServer/allocRange ******************************************
*
*   NAME
*       allocRange() - Allocate mem_size bytes within the given memory
*                      range.
*
*   SYNOPSIS
*       ptr = allocRange(hi, lo, mem_size );
*
*       VOID *allocRange(ULONG hi, ULONG lo, ULONG mem_size);
*
*   FUNCTION
*       Allocates mem_size bytes of RAM between the low address and
*       the high address given.  This is useful for getting a chunk of
*       RAM on a particular RAM board in the system.  See stuffBoards()
*       and printBoardInfo() for details on this.
*
*   INPUTS
*       hi - ULONG for high (maximum) RAM address defining permissible block.
*       lo - ULONG for low (minimum) RAM address defining permissible block.
*    byte_size - ULONG for how many bytes you wish to allocate.
*
*
*   RESULT
*       ptr - pointer to newly-allocated RAM.  NULL if allocation 
*             failed.  You are responsible for freeing this RAM
*             via FreeMem().
*
*
*   EXAMPLE
*       VOID *ptr = NULL;
*       ptr = allocRange(0x00200000, 0x003FFFFF, 10240);
*
*       if (ptr) {
*           /* success */
*       }
*       else {
*           /* failure */
*       }
*
*
*   NOTES
*       This function walks the system memory lists, invoking Forbid()
*       while it's on thin ice.  It uses AllocAbs() for the actual allocation.
*       It depends heavily on two #defines:  FUDGE, which is added to byte_size
*       to define the minimum amount to attempt to allocate; and GRANULARITY,
*       which is added to the attempted absolute address to allocate if the
*       first allocation attempt fails.  Note that allocRange will round
*       off the absolute address before passing off to AllocAbs(), even
*       though AllocAbs() is supposed to round off, too.
*
*
*   BUGS
*       Currently requires graphics and intuition libraries pre-opened,
*       because it does a WaitBOVP() on the frontmost screen, locking 
*       IntuitionBase.  This is an artifact of when Disable() was used for
*       Forbid() in the first version.  It continues to work, so it has
*       been left alone in the mean time.
*
*   SEE ALSO
*       stuffBoards()
******************************************************************************
*
*/

/****** MemServer/addMemItem ******************************************
*
*   NAME
*       VOID addMemItem (struct MinList *l, struct memItem *mi);
*
*   SYNOPSIS
*       addMemItem (minList, memItem);
*
*       VOID addMemItem (struct MinList *l, struct memItem *mi);
*
*   FUNCTION
*       Adds a memory item to a given MinList in LIFO (Last In, First Out)
*       order.  Works in all cases (list head, tail, middle).  TailPred
*       field is ignored.
*
*
*   INPUTS
*       l - pointer to the (memory) MinList in question.
*      mi - pointer to the memItem (which starts with a MinNode).
*           Both l and mi must be prepared properly beforehand.
*           (ie, fill in the fields with appropriate values, NULL
*           where nothing's appropriate)
*
*
*
*   RESULT
*       None.
*
*
*   EXAMPLE
*       struct MinList pool;
*       struct memItem mi;
*
*       addMemItem(&pool, &mi);
*
*
*   NOTES
*       Proto calls for ptrs to structs because that's what's available
*       where this function is most often called.
*
*
*   BUGS
*
*   SEE ALSO
*       allocMoreRam()
******************************************************************************
*
*/

/****** MemServer/matchRequest ******************************************
*
*   NAME
*       struct memItem *matchRequest(struct memRequest *mr, struct MinList *pool);
*
*   SYNOPSIS
*       mi = matchRequest(mr, pool);
*
*       struct memItem *matchRequest(struct memRequest *mr, struct MinList *pool);
*
*   FUNCTION
*       Find a memory item which matches the requested memory item in the given
*       pool.
*
*
*   INPUTS
*       mr - pointer to memRequest.  Usually given by memClient.
*     pool - MinList of memory blocks.
*
*
*   RESULT
*       mi - pointer to matching memory item.
*
*
*   EXAMPLE
*
*
*
*   NOTES
*       If the request has to do with a memory board, this funct. issmart
*       enough to convert the user's request into the internally-stored board
*       format.  That is, users start counting at 1, and the storage starts at
*       zero. 
* 
* 
*   BUGS 
* 
*   SEE ALSO 
*
******************************************************************************
* 
*/ 

 
/****** MemServer/ ****************************************** 
* 
*   NAME
*       BOOL allocMoreRam(struct memRequest *mr, struct MinList *pool, struct
boardInfo *b); 
* 
*   SYNOPSIS 
*       return = func 
*        register use 
*    proto 
* 
*   FUNCTION 
*       Description 
* 
* 
* 
*   INPUTS 
*       Input descr.
* * * *   RESULT *       result descr. * * *   EXAMPLE * * * *   NOTES * * * * 
BUGS * *   SEE ALSO *
******************************************************************************
* 
*/  

/****** MemServer/protections_ok ****************************************** 
* 
*   NAME
*       BOOL protections_ok(struct memItem *mi, struct memRequest *mr, BOOL change_prot); 
* 
*   SYNOPSIS 
*       return = func 
*        register use 
*     proto 
* 
*   FUNCTION 
*       Description 
* 
* 
* 
*   INPUTS 
*       Input descr.

* 
* 
* 
*   RESULT 
*       result descr. 
* 
* 
*   EXAMPLE 
* 
* 
* 
*   NOTES 
* 
* 
* 
* 
BUGS 
* 
*   SEE ALSO 
*
******************************************************************************
* 
*/  

/****** MemServer/logMsg ****************************************** 
* 
*   NAME
*       VOID logMsg(STRPTR fmt, struct DateTime *dt, STRPTR client, LONG arg1, ...); 
* 
*   SYNOPSIS 
*       return = func 
*        register use 
*       proto

* 
*   FUNCTION 
*       Description 
* 
* 
* 
*   INPUTS 
*       Input descr. 
* 
* 
*

*   RESULT 
*       result descr. 
* 
* 
*   EXAMPLE 
* 
* 
* 
*   NOTES 
* 
* 
* 
*   BUGS

* 
*   SEE ALSO 
*
******************************************************************************
* 
*/  

/****** MemServer/stuffBoards ****************************************** 
* 
*   NAME

*       VOID stuffBoards(struct boardInfo *bi); 
* 
*   SYNOPSIS 
*       return =
func 
*        register use 
*       proto 
* 
*   FUNCTION 
*       Description 
* 
*

* 
*   INPUTS 
*       Input descr. 
* 
* 
* 
*   RESULT 
*       result descr. 
* 
* 
*   EXAMPLE 
* 
* 
* 
*   NOTES 
*       Requires previous open of expansion.library.
* 
* 
* 
*   BUGS 
* 
*   SEE ALSO 
*
******************************************************************************
* 
*/
