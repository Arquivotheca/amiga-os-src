TABLE OF CONTENTS

checkpoint.test/Semacise
/****** checkpoint.test/Semacise **********************************************

    NAME
        Semacise -- execercise semaphore / task priority handling

    AUTHOR
        Fred Mitchell, Product Assurance, Commodore-Amiga, Inc.
        John J. Szucs, Systems Assurance, Commodore International Services Company

    VERSION
        1.00    06 Mar 1991 - Inception
        2.00    24 Jun 1992 - Procure/Vacate support added; documentation
                              changes (jjszucs)

    SYNOPSIS
        Semacise

    FUNCTION
        Semacise tests the handling of semaphore/task scheduling
        arbitration. It creates 7 tasks of priorities 0-6, while
        boosting the priority of the parent process to 7. The
        parent (master) process will then issue orders to his
        children to perform certain operations. The operations are:

            0) No-operation                               (.)
            1) Wait for next command                      (W)
            2) BusyWait                                   (U)
            3) Obtain a specified semaphore Shared        (Sx)
            4) Obtain a specified semaphore Exclusive     (Ex)
            5) Attempt to obtain a specified semaphore    (Ax)
            6) Release a specified semaphore              (Rx)
            7) Procure a specified semaphore Exclusive    (Pxy)
               on bid message y
            8) Procure a specified semaphore Shared       (pxy)
               on bid message y
            9) Hold on specified semaphore (after P or p) (Hxy)
               on bid message y
            10) Vacate a specified semaphore              (Vxy)
                on bid message y
            11) Return to beginning of string             (<)

            (There are 26 semaphores, labeled a thru z)

        The master process will continually send these commands
        to his children as instructed by the user.

        When entering new commands, you must first [RESET], then
        type in your commands. If you do not place the
        return-to-beginning command (<) at the end of your string,
        then the messages will stop there for that child task.

        It is not a good idea to modify commands with everything
        running, espcially in the case of semaphore operations.
        Issue a [HALT] first before modifying anything.

        Due to the nature of this test, it is REAL EASY to crash
        your machine, or get it hung up in continuous recoverable
        alerts. For this reason, have NOTHING ELSE running that
        you can't afford to lose. You have been warned.

    CONTROL
        [START] - Start-up the command stream
        [HALT]  - Pause the command stream
        [STEP]  - Single-step all of the tasks.
        [RESET] - Do a [HALT] and reset string pointers back to beginning
        [CLEAR] - Do a [RESET] and clear all strings
        [HELP]  - Open up the help file (Semacise.doc) and send it to
                  a console window.
        [EXIT]  - Close down system, kill all children, and exit.
                  WARN - if there are outstanding semaphores when this
                  is executed, you might crash the system or get an
                  endless stream of recoverable alerts. Be sure all
                  semaphores are resolved BEFORE doing an exit.
        [TASKn] - Single-step this task through the string. Normally,
                  you would only do this during a [HALT] or [RESET].
                  The message indicator may or may not update depending
                  on whether or not the task is already waiting for
                  a semaphore. In that case, the command will simply
                  pile up in the child's port.

    STATUS INDICATORS
        Status indication is performed by the child tasks. There are
        two types - the Message Indicator (the large recessed box)
        that children display what message they've just received, and
        the Busy Box that the child renders a continually changing
        pattern to indicate that the child is executing.

    NOTES
        Children do not wait for a reply. If one comes back, they will
        quietly deallocate it.

    EXAMPLE
        A typical case that has been discussed in amiga.software:

            TASK1   SaSbRaRb<
            TASK2   ..U<
            TASK3   EaEbRaRb<

    EXAMPLE
        A Deadlock situation (warning - this might kill your machine):
            TASK1   EaEbRaRb<
            TASK2   EbEaRbRa<

******************************************************************************/
