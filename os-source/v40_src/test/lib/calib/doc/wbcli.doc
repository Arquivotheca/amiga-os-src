Subject: WBCliArgs() - Replacement for ReadArgs()

WBCliArgs() is a near drop-in replacement for ReadArgs(), and will allow,
without any extra effort, the ReadArgs() template to double for
Workbench ToolTypes if the program is launched from there. It also
allows the filenames of multiple-selects to be placed in a string array
for '/M' templates. A great way to add ToolTypes to any Cli program
for almost no effort. And since the ToolTypes are the equivalent of the
ReadArgs() template, it makes it self-documenting and consistent.

WBCliArgs() is in linked-library form right now. If you are interested,
contact me. (mitchell@cbmvax). Autodocs follow.

-------------------------------------------------------------------------------

TABLE OF CONTENTS

CALib.library/FreeWBCli
CALib.library/WBCliArgs
CALib.library/FreeWBCli                               CALib.library/FreeWBCli

    NAME
        FreeWBCli -- Free up the resources used by WBCliArgs()

    AUTHOR
        Fred Mitchell, Products Assurance, Commodore-Amiga, Inc.

    SYNOPSIS
        void FreeWBCli(struct WBCli *wbcli)

    FUNCTION
        Releases all resources associated with WBCliArgs().

    INPUTS
        wbcli   - PRIVATE structure returned by WBCliArgs(). Can be NULL,
                  in which case it will be ignored.

    SEE ALSO
        WBCliArgs()

CALib.library/WBCliArgs                               CALib.library/WBCliArgs

    NAME
        WBCliArgs -- Argument processing for WorkBench tooltypes and CLI

    AUTHOR
        Fred Mitchell, Products Assurance, Commodore-Amiga, Inc.

    SYNOPSIS
        struct WBCli *WBCliArgs(struct TagItem *array)
        struct WBCli *WBCliArgsTags(ULONG tag1, (void *) data, ...)

    FUNCTION
        WBCLIArgs processes arguments either from ToolTypes
        or ReadArgs(). It allows a uniformity and therefore
        transparency as how these arguments are to be processed.
        The same labels used for ReadArgs can also be used for
        Workbench ToolTypes without the programmer doing extra
        work. The ToolTypes, if exists, can be used as defaults
        for CLI ReadArgs if the appopriate information is given.

    INPUTS
        array       - Array of TagItems
        tag1, ...   - TagItems
        data, ...   - Data required by Tag

    TAGITEMS
        WC_Template     - (char *) Template of the same format that
                          ReadArgs() wants. Required.

        WC_Args         - (long *) Array of arguments, corresponding to
                          the placement in the template, ReadArgs()-style.
                          Required.

        WC_Startup      - (struct WBStartup *) Startup message to process.
                          Will use first argument's ToolTypes for default
                          (if WC_DiskObject is not specified), and the rest
                          as parameters to the first /M template. Thus, an
                          array of fully qualified pathnames are created.

        WC_TrustStartup - (BOOL) Whether to trust WC_Startup as
                          valid. Default is TRUE. This is useful for
                          using "argv" and "argc" directly. Therefore,
                          this is an indication to WBCliArgs() that
                          the program started from Workbench or CLI.

                          The way one would normally use this with a normal
                          main() startup is as follows:
                            ...
                                WC_Startup, argv,
                                WC_TrustStartup, !argc,
                            ...

                          NOTE that if WC_Startup is not present or
                          NULL that WBCliArgs() will assume CLI startup.

        WC_DiskObject   - (struct DiskObject *) DiskObject to process
                          for ToolTypes. Overrides the object given in
                          WC_Startup. Only reads information from this;
                          you are still responsible for the cleanup.

        WC_DiskObjectName - Synonym for WC_DiskObject, name of the icon
                          to read for ToolTypes. WBCliArgs() in this
                          case acquires and unloads the disk object
                          on its own.

        WC_Help         - (char *) NULL-terminated help string to
                          use if user types second '?' from CLI.

    RESULT
        Returns a handle, a pointer to a PRIVATE structure if successful,
        or NULL. Handle must be passed to FreeWBCli() to release
        resources ONLY WHEN you are finished using the args array.
        Memory is dynamically allocated by WBCliArgs()
        to fill in some of the arguments in the args array, so do
        not FreeWBCli() until you are finished with using the
        args.

    NOTES
        We may, at a future date, have WBCliArgs() open its own
        libraries. Do not depend on this, however.

    NOTES
        The modifier '/N' has slightly different behavior for ToolTypes
        than for ReadArgs(). '/N' for ToolTypes can be either decimal,
        hexadecimal, or octal following the 'C' convention of denoting
        radix of numbers. Since ReadArgs() does not recognize this
        convention, ReadArgs() will still try to convert them as
        decimal.

    BUGS
        We have made every effort to make this call crash-proof. However,
        there are some low-memory or other error conditions that do
        not properly back out of operations yet. Those areas of
        concern are marked by three ampersands in the source code,
        and will be addressed shortly.

    LIBRARIES
        Requires the following libraries to be opened:
            intuition.library   (IntuitionBase)
            utility.library     (UtilityBase)
            icon.library        (IconBase)
            dos.library         (DOSBase)
            exec.library

    SEE ALSO
        FreeWBCli()
