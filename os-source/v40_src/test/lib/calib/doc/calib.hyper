@database "CALib.hyper"
@master "Work:STD/CALib/docs/CALib.doc"

@Node Main "CALib.doc"
    @{" DestroyRDA() " Link "DestroyRDA()"}
    @{" MakeRDA() " Link "MakeRDA()"}
    @{" RXPrintf() " Link "RXPrintf()"}
@EndNode

@Node "DestroyRDA()" "CALib.library/DestroyRDA"

    NAME
        DestroyRDA -- Deallocate memory used by @{"MakeRDA()" Link "MakeRDA()"}

    SYNOPSIS
        void DestroyRDA(struct RDArgs *rda)

    FUNCTION
        Frees memory used by @{"MakeRDA()" Link "MakeRDA()"}, returning it back to the system.
        DOES NOT do a @{"FreeArgs()" Link "WORK:doc/dos.hyper/FreeArgs()"} - you must do that yourself (see @{"MakeRDA()" Link "MakeRDA()"}).

    INPUTS
        rda - The RDArgs structure allocated by @{"MakeRDA()" Link "MakeRDA()"}.

    RESULTS
        Nothing's returned.

    SEE ALSO
        @{"MakeRDA()" Link "MakeRDA()"}.

@EndNode

@Node "MakeRDA()" "CALib.library/MakeRDA"

    NAME
        MakeRDA -- Make an RDArgs structure for scanning a buffer

    AUTHOR
        Fred Mitchell

    SYNOPSIS
        struct RDArgs *MakeRDA(char *buf)

    FUNCTION
        Sets up an RDArgs structure for parsing a NULL-terminated
        buffer by @{"ReadArgs()" Link "WORK:doc/dos.hyper/ReadArgs()"}.

    INPUTS
        buf - pointer to a NULL-terminated buffer to be parsed.
              A copy of buf will be made.

    RESULTS
        Returns a pointer to a RDArgs structure, which must be freed
        by calling @{"DestroyRDA()" Link "DestroyRDA()"}. Returns a NULL pointer if out of
        memory.

    EXAMPLE
        if (rda = MakeRDA(buf))
        {
            if (ReadArgs(TEMPLATE, &args, rda))
            {
                ...
                FreeArgs(rda);
            }
            DestroyRDA(rda);
        }
        ...

    SEE ALSO
        @{"DestroyRDA()" Link "DestroyRDA()"}

@EndNode

@Node "RXPrintf()" "CALib.library/RXPrintf"

    NAME
        RXPrintf -- formats an Argstring.

    AUTHOR
        Fred Mitchell

    SYNOPSIS
        UBYTE *RXPrintf(char *fmt, ULONG p1, ...)

    FUNCTION
        Uses @{"RawDoFmt()" Link "WORK:doc/exec.hyper/RawDoFmt()"} to format an Argstring for ARexx. Follows all of the
        conventions of @{"RawDoFmt()" Link "WORK:doc/exec.hyper/RawDoFmt()"}.

    INPUTS
        fmt     - the format string
        p1, ... - The list of parameters

    RESULTS
        returns a pointer to an ARexx Argstring, which can be passed
        back to ARexx as a result string.

    NOTE
        To use this function, the rexxsyslib.library MUST be opened!!!

    SEE ALSO
        @{"exec/RawDoFmt" Link "WORK:doc/exec.hyper/RawDoFmt()"}

@EndNode

