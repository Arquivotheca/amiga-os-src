@database "ErrRpt"
@master "Ram Disk:t1/ErrRpt.doc"

@Node Main "ErrRpt.doc"
    @{" configRpt() " Link "configRpt()"}
    @{" errARpt() " Link "errARpt()"}
    @{" errRpt() " Link "errRpt()"}
    @{" forceAErrRpt() " Link "forceAErrRpt()"}
    @{" forceARpt() " Link "forceARpt()"}
    @{" forceErrRpt() " Link "forceErrRpt()"}
    @{" forceRpt() " Link "forceRpt()"}
    @{" freeTstData() " Link "freeTstData()"}
    @{" initTstData() " Link "initTstData()"}
    @{" quickARpt() " Link "quickARpt()"}
    @{" quickRpt() " Link "quickRpt()"}
@EndNode

@Node "configRpt()" "TestManager.library/configRpt"

   NAME
      configRpt - configure default test data information for
                  use with @{"TestManager.library/quickRpt()" Link "quickRpt()"}

   SYNOPSIS
      success = configRpt(ErrReport, errLevel, errType, errCode)

      BOOL configRpt(struct errReport *, UWORD, BYTE, LONG);

   FUNCTION
       configRpt() allows you to set up a lot of progress reports
       without having to continually repeat parameters, as you
       would have to with @{"errRpt()" Link "errRpt()"}.  This lets you skip three
       parameters so that you can use @{"quickRpt()" Link "quickRpt()"} as you would
       fprintf():  quickRpt(ErrReport, fmt, arg, ...);

   INPUTS
      errReport- pointer to structure previously initialized by
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, you will
                 receive FALSE back.
      errLevel - see tmgr_common.h.  This describes what your message
                 means to the user:  error or progress report,
                 additional information, or even debugging information.
                 Currently defined values:
                    LVL_PROG for a progress report;
                    LVL_ERR  for an error message;
                    LVL_ERR2 for addtional error information;
                    LVL_VB1  for optional information (VB2 and VB3 as well);
                    LVL_DB1  for debugging information (DB2 and DB3 as well).
                 Note that LVL_ERR or LVL_ERR2 will cause the Test Manager
                 to display a "Test Failed!" message, with appropriate
                 bells and whistles.
      errType  - describes what errCode means.  
                    PROB_NONE   for no problem;
                    PROB_IOERR  for a standard IoErr()-type error code;
                    PROB_CUSTOM for a custom error code (strongly
                                discouraged!).
      errCode  - a numerical description of your problem.

   RESULT
      success    - TRUE (1) if successful, FALSE (0) if not.  Since
                   the only way you'll get FALSE is if you pass
                   NULL for ErrReport, you shouldn't have to worry.

   EXAMPLE
      struct errReport *test;
      BYTE rc;
      int i;

      if (test = initTstData("MyTest",NULL)) {
         configRpt(test, LVL_PROG, PROB_NONE, NULL);
         for (i = 0; i < MAX_TESTS; i++) {
           /* ... perform test... */
           if (test_ok) {
               /* report progress */
               rc = quickRpt(test, "Test %ld went OK\n", (LONG) i);
               if (rc != RPT_OK)
                  CleanUpAndExit(test); /* must freeTstData(test) ! */
           }
           else {
               /* report error */
               rc = errRpt(test, LVL_ERR, PROB_IOERR, @{"IoErr()" Link "dos/IoErr()"},
                       "Test %ld failed: %s\n", (LONG)i, MY_ERR_MSG);
               if (rc != RPT_OK)
                  CleanUpAndExit(test);  /* must freeTstData(test) ! */
           }
         }  
         freeTstData(test);
      }

   NOTES
    - Messages are automatically time-stamped, identified, and
      reported according to the settings of the Test Manager.
    - Information stored by configRpt() is NOT altered by @{"errRpt()" Link "errRpt()"}.

   BUGS
      None yet.

   SEE ALSO
      tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"quickRpt()" Link "quickRpt()"}

@EndNode

@Node "errARpt()" "TestManager.library/errARpt"

   NAME
      errARpt - log an error, progress, informational, or debugging message

   SYNOPSIS
      error = errRpt(ErrReport, errLevel, errType, errCode, fmt, arg1, ...)

      BYTE errRpt(struct errReport *, UWORD, BYTE, LONG, STRPTR, APTR, ...);

   FUNCTION
      Exactly like @{"errRpt()" Link "errRpt()"}, but uses a pointer to the 1st arg so
      that this function call may be nested inside a varargs function.

      Sends information off to test manager task.  This includes
      a string for the user to see, codes describing the problem,
      a code describing the severity of the problem (if any).

   INPUTS
      errReport- pointer to structure previously initialized by
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will
                 be sent and you will receive RPT_NO_SERV back.
      errLevel - see tmgr_common.h.  This describes what your message
                 means to the user:  error or progress report,
                 additional information, or even debugging information.
                 Currently defined values:
                    LVL_PROG for a progress report;
                    LVL_ERR  for an error message;
                    LVL_ERR2 for addtional error information;
                    LVL_VB1  for optional information (VB2 and VB3 as well);
                    LVL_DB1  for debugging information (DB2 and DB3 as well).
                 Note that LVL_ERR or LVL_ERR2 will cause the Test Manager
                 to display a "Test Failed!" message, with appropriate
                 bells and whistles.
      errType  - describes what errCode means.  
                    PROB_NONE   for no problem;
                    PROB_IOERR  for a standard IoErr()-type error code;
                    PROB_CUSTOM for a custom error code (strongly
                                discouraged!).
      errCode  - a numerical description of your problem.
      fmt      - printf-style formatting string of the type described
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}.
      arg1     - pointer to the first of the arguments to plug into the 
                 fmt string, or NULL.

   RESULT
      error    - described in tmgr_common.h.  If you get anything other
                 than RPT_OK back, you should exit immediately after
                 freeing your resources.  Other possible returns
                 are RPT_ABORT if the TestManager has requested that
                 you abort, or RPT_NO_SERV if the TestManager has
                 exited.  This permits cute games to be played,
                 but such practice is discouraged, especially if 
                 RPT_NO_SERV is encountered.

   EXAMPLE
      See @{"errRpt()" Link "errRpt()"} or @{"forceARpt()" Link "forceARpt()"} or @{"quickARpt()" Link "quickARpt()"}.

   NOTES
      Messages are automatically time-stamped, identified, and
      reported according to the settings of the Test Manager.
      As of V37.4 ErrReport.lib, this preserves the report configuration
      found in the struct errReport prior to the call.  This is so you
      can use @{"quickRpt()" Link "quickRpt()"} for humdrum messages and @{"errRpt()" Link "errRpt()"} for the
      occasional problem.

   BUGS
      None yet.

   SEE ALSO
      tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}

@EndNode

@Node "errRpt()" "TestManager.library/errRpt"

   NAME
      errRpt - log an error, progress, informational, or debugging message

   SYNOPSIS
      error = errRpt(ErrReport, errLevel, errType, errCode, fmt, arg1, ...)

      BYTE errRpt(struct errReport *, UWORD, BYTE, LONG, STRPTR, LONG, ...);

   FUNCTION
      Sends information off to test manager task.  This includes
      a string for the user to see, codes describing the problem,
      a code describing the severity of the problem (if any).

   INPUTS
      errReport- pointer to structure previously initialized by
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will
                 be sent and you will receive RPT_NO_SERV back.
      errLevel - see tmgr_common.h.  This describes what your message
                 means to the user:  error or progress report,
                 additional information, or even debugging information.
                 Currently defined values:
                    LVL_PROG for a progress report;
                    LVL_ERR  for an error message;
                    LVL_ERR2 for addtional error information;
                    LVL_VB1  for optional information (VB2 and VB3 as well);
                    LVL_DB1  for debugging information (DB2 and DB3 as well).
                 Note that LVL_ERR or LVL_ERR2 will cause the Test Manager
                 to display a "Test Failed!" message, with appropriate
                 bells and whistles.
      errType  - describes what errCode means.  
                    PROB_NONE   for no problem;
                    PROB_IOERR  for a standard IoErr()-type error code;
                    PROB_CUSTOM for a custom error code (strongly
                                discouraged!).
      errCode  - a numerical description of your problem.
      fmt      - printf-style formatting string of the type described
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}.
      arg1     - first of the arguments to plug into the fmt string,
                 or NULL.

   RESULT
      error    - described in tmgr_common.h.  If you get anything other
                 than RPT_OK back, you should exit immediately after
                 freeing your resources.  Other possible returns
                 are RPT_ABORT if the TestManager has requested that
                 you abort, or RPT_NO_SERV if the TestManager has
                 exited.  This permits cute games to be played,
                 but such practice is discouraged, especially if 
                 RPT_NO_SERV is encountered.

   EXAMPLE
      struct errReport *test;
      BYTE rc;
      int i;

      if (test = initTstData("MyTest",NULL)) {
         for (i = 0; i < MAX_TESTS; i++) {
           /* ... perform test... */
           if (test_ok) {
               /* report progress */
               rc = errRpt(test, LVL_PROG, PROB_NONE, NULL,
                       "Test %ld went OK\n", (LONG) i);
               if (rc != RPT_OK)
                  CleanUpAndExit(test); /* must freeTstData(test) ! */
           }
           else {
               /* report error */
               rc = errRpt(test, LVL_ERR, PROB_IOERR, @{"IoErr()" Link "dos/IoErr()"},
                       "Test %ld failed: %s\n", (LONG)i, MY_ERR_MSG);
               if (rc != RPT_OK)
                  CleanUpAndExit(test);  /* must freeTstData(test) ! */
           }
         }  
         freeTstData(test);
      }

   NOTES
      Messages are automatically time-stamped, identified, and
      reported according to the settings of the Test Manager.
      As of V37.4 ErrReport.lib, this preserves the report configuration
      found in the struct errReport prior to the call.  This is so you
      can use @{"quickRpt()" Link "quickRpt()"} for humdrum messages and errRpt() for the
      occasional problem.

   BUGS
      None yet.

   SEE ALSO
      tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}

@EndNode

@Node "forceAErrRpt()" "TestManager.library/forceAErrRpt"

   NAME
      forceAErrRpt - log an error, progress, informational, or 
                     debugging message

   SYNOPSIS
      error = forceAErrRpt(ErrReport, errLevel, errType, errCode, fmt, 
                           arg1, ...)

      BYTE forceAErrRpt(struct errReport *, UWORD, BYTE, LONG, STRPTR, 
                        APTR, ...);

   FUNCTION
      Exactly like @{"forceErrRpt()" Link "forceErrRpt()"}, but uses the address of the first argument
      instead.  See @{"forceErrRpt()" Link "forceErrRpt()"}.  Implemented this way so that you
      can call it from within a varargs function.  See the example at
      @{"quickARpt()" Link "quickARpt()"}.

   INPUTS
      errReport- pointer to structure previously initialized by
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will
                 be sent, @{"VPrintf()" Link "dos/VPrintf()"} will be attempted, and you will 
                 receive RPT_NO_SERV back.
      errLevel - see tmgr_common.h.  This describes what your message
                 means to the user:  error or progress report,
                 additional information, or even debugging information.
                 Currently defined values:
                    LVL_PROG for a progress report;
                    LVL_ERR  for an error message;
                    LVL_ERR2 for addtional error information;
                    LVL_VB1  for optional information (VB2 and VB3 as well);
                    LVL_DB1  for debugging information (DB2 and DB3 as well).
                 Note that LVL_ERR or LVL_ERR2 will cause the Test Manager
                 to display a "Test Failed!" message, with appropriate
                 bells and whistles.
      errType  - describes what errCode means.  
                    PROB_NONE   for no problem;
                    PROB_IOERR  for a standard IoErr()-type error code;
                    PROB_CUSTOM for a custom error code (strongly
                                discouraged!).
      errCode  - a numerical description of your problem.
      fmt      - printf-style formatting string of the type described
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}.
      arg1     - pointer to the first of the arguments to plug into the 
                 fmt string, or NULL.

   RESULT
      error    - described in tmgr_common.h.  If you get RPT_ABORT
                 back, you should exit immediately after
                 freeing your resources.  Other possible returns
                 are RPT_OK if a message was successfully sent,
                 or RPT_NO_SERV if the TestManager has
                 exited.  

   EXAMPLE
      See @{"errRpt()" Link "errRpt()"} or @{"forceARpt()" Link "forceARpt()"} or @{"quickARpt()" Link "quickARpt()"}.

   NOTES
      Messages are automatically time-stamped, identified, and
      reported according to the settings of the Test Manager, if and
      only if the Test Manager is running.

      As of V37.4 ErrReport.lib, this preserves the report configuration
      found in the struct errReport prior to the call.  This is so you
      can use @{"quickRpt()" Link "quickRpt()"} for humdrum messages and @{"errRpt()" Link "errRpt()"} for the
      occasional problem.

      If the TstMgr isn't running, you should have a valid @{"Output()" Link "dos/Output()"}.
      The following will be attempted:
           VPrintf("Error %ld!\n, &errCode);
           VPrintf(fmt, &arg1);

   BUGS
      None yet.

   SEE ALSO
      tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"errRpt()" Link "errRpt()"}, @{"forceRpt()" Link "forceRpt()"},
      @{"forceErrRpt()" Link "forceErrRpt()"}

@EndNode

@Node "forceARpt()" "TestManager.library/forceARpt"

   NAME
      forceARpt - log another message of the same type previously reported.
                  Forces output of one form or another...

   SYNOPSIS
      error = forceARpt(ErrReport, fmt, arg1, ...)

      BYTE forceARpt(struct errReport *, STRPTR, APTR, ...);

   FUNCTION
      This is exactly the same as @{"forceRpt()" Link "forceRpt()"}, except it takes
      the address of the first argument.  If TstMgr isn't running,
      forceARpt() attempts to call @{"dos.library/VPrintf()" Link "dos/VPrintf()"} to give you
      some form of output.  You should have a valid @{"Output()" Link "dos/Output()"} before
      using this function.

      The intended use of this function is to use it within a varargs
      function of the following form:
         VOID myRpt(STRPTR fmt, LONG arg1, ...) {
           /* relies on global struct ErrReport *er */
           if (RPT_ABORT == forceARpt(er, fmt, &arg1)) {
              /* anything else you wish to do on exit... */
              cleanExit();
           }
         }

   INPUTS 
      errReport- pointer to structure previously initialized by 
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will 
                 be sent, @{"VPrintf()" Link "dos/VPrintf()"} will be attempted, and you will 
                 receive RPT_NO_SERV back. 
      fmt      - printf-style formatting string of the type described 
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}. 
      arg1     - pointer to the first of the arguments to plug into the 
                 fmt string, or NULL.  Note that additional args must
                 follow the first on the stack (as above, in myRpt()).
 
   RESULT 
      error   - described in tmgr_common.h.  If you get RPT_ABORT
                back, you should exit immediately after 
                freeing your resources.  Other possible returns 
                are RPT_OK if the report went to TestManager OK,
                or RPT_NO_SERV if the TestManager has 
                exited.  

   EXAMPLE 
      See @{"forceRpt()" Link "forceRpt()"}, or above.
 
   NOTES 
      Messages are automatically time-stamped, identified, and 
      reported according to the settings of the Test Manager. 
 
   BUGS 
      None yet. 
 
   SEE ALSO 
   tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"configRpt()" Link "configRpt()"}, @{"errRpt()" Link "errRpt()"}, quickR
pt()

@EndNode

@Node "forceErrRpt()" "TestManager.library/forceErrRpt"

   NAME
      forceErrRpt - log an error, progress, informational, or 
                    debugging message

   SYNOPSIS
      error = forceErrRpt(ErrReport, errLevel, errType, errCode, fmt, 
                          arg1, ...)

      BYTE forceErrRpt(struct errReport *, UWORD, BYTE, LONG, STRPTR, 
                       LONG, ...);

   FUNCTION
      Exactly like @{"errRpt()" Link "errRpt()"}, but will attempt to print output
      via @{"VPrintf()" Link "dos/VPrintf()"} if the server can't be found.  You should be sure
      to check the return code for RPT_ABORT if the server is running.

      Sends information off to test manager task.  This includes
      a string for the user to see, codes describing the problem,
      a code describing the severity of the problem (if any).

   INPUTS
      errReport- pointer to structure previously initialized by
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will
                 be sent, @{"VPrintf()" Link "dos/VPrintf()"} will be attempted, and you will 
                 receive RPT_NO_SERV back.
      errLevel - see tmgr_common.h.  This describes what your message
                 means to the user:  error or progress report,
                 additional information, or even debugging information.
                 Currently defined values:
                    LVL_PROG for a progress report;
                    LVL_ERR  for an error message;
                    LVL_ERR2 for addtional error information;
                    LVL_VB1  for optional information (VB2 and VB3 as well);
                    LVL_DB1  for debugging information (DB2 and DB3 as well).
                 Note that LVL_ERR or LVL_ERR2 will cause the Test Manager
                 to display a "Test Failed!" message, with appropriate
                 bells and whistles.
      errType  - describes what errCode means.  
                    PROB_NONE   for no problem;
                    PROB_IOERR  for a standard IoErr()-type error code;
                    PROB_CUSTOM for a custom error code (strongly
                                discouraged!).
      errCode  - a numerical description of your problem.
      fmt      - printf-style formatting string of the type described
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}.
      arg1     - the first of the arguments to plug into the 
                 fmt string, or NULL.

   RESULT
      error    - described in tmgr_common.h.  If you get RPT_ABORT
                 back, you should exit immediately after
                 freeing your resources.  Other possible returns
                 are RPT_OK if a message was successfully sent,
                 or RPT_NO_SERV if the TestManager has
                 exited.  

   EXAMPLE
      See @{"errRpt()" Link "errRpt()"} or @{"forceARpt()" Link "forceARpt()"} or @{"quickARpt()" Link "quickARpt()"}.

   NOTES
      Messages are automatically time-stamped, identified, and
      reported according to the settings of the Test Manager, if and
      only if the Test Manager is running.

      As of V37.4 ErrReport.lib, this preserves the report configuration
      found in the struct errReport prior to the call.  This is so you
      can use @{"quickRpt()" Link "quickRpt()"} for humdrum messages and @{"errRpt()" Link "errRpt()"} for the
      occasional problem.

      If the TstMgr isn't running, you should have a valid @{"Output()" Link "dos/Output()"}.
      The following will be attempted:
           VPrintf("Error %ld!\n, &errCode);
           VPrintf(fmt, &arg1);

   BUGS
      None yet.

   SEE ALSO
      tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"errRpt()" Link "errRpt()"}, @{"forceRpt()" Link "forceRpt()"}

@EndNode

@Node "forceRpt()" "TestManager.library/forceRpt"

   NAME
      forceRpt - log another message of the same type previously reported.
                 Forces output of one form or another...

   SYNOPSIS
      error = forceRpt(ErrReport, fmt, arg1, ...)

      BYTE forceRpt(struct errReport *, STRPTR, LONG, ...);

   FUNCTION
      This is exactly the same as @{"quickRpt()" Link "quickRpt()"}, except that on failure,
      it will attempt to use @{"dos.library/VPrintf()" Link "dos/VPrintf()"} so that you
      get some form of output.  Of course, it helps if @{"Output()" Link "dos/Output()"} is
      valid...


   INPUTS 
      errReport- pointer to structure previously initialized by 
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will 
                 be sent, @{"VPrintf()" Link "dos/VPrintf()"} will be attempted, and you will 
                 receive RPT_NO_SERV back. 
      fmt      - printf-style formatting string of the type described 
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}. 
      arg1     - the first of the arguments to plug into the 
                 fmt string, or NULL.
 
   RESULT 
      error   - described in tmgr_common.h.  
                Note that you should check for RPT_ABORT as a return,
                in which case there IS a running server and the
                tester wants you to QUIT, and QUIT NOW.
                Other possible returns are RPT_OK or RPT_NO_SERV.
 
   EXAMPLE 
      See @{"quickRpt()" Link "quickRpt()"}.
 
   NOTES 
      Messages are automatically time-stamped, identified, and 
      reported according to the settings of the Test Manager. 
      If the Test Manager isn't running, you get no ID or time-stamping,
      but you will get the equivalent of Printf(fmt, arg1, ...) instead.
 
   BUGS 
      None yet. 
 
   SEE ALSO 
   tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"configRpt()" Link "configRpt()"}, @{"errRpt()" Link "errRpt()"}, 
   @{"quickRpt()" Link "quickRpt()"}

@EndNode

@Node "freeTstData()" "TestManager.library/freeTstData"

   NAME
     freeTstData - free errReport created by @{"initTstData()" Link "initTstData()"}

   SYNOPSIS
     freeTstData(test)

     void freeTstData(struct errReport *test);

   FUNCTION
     Sends exit message to Test Manager, and
     frees all allocations made by @{"initTstData()" Link "initTstData()"}.
     @{"Message" Link "exec/ports.h/Main" 48} port is, of course, cleaned up properly.

   INPUTS
     test - struct errReport allocated by @{"initTstData()" Link "initTstData()"}.
            Passing NULL is not an error; freeTstData will merely return
            without attempting to do anything.

   RESULT
     Exit message is sent, @{"MsgPort" Link "exec/ports.h/Main" 29} is cleaned up and deleted, and
     all allocations made by @{"initTstData()" Link "initTstData()"} are freed.  Pointer passed in
     is no longer valid, and is set to NULL.

   EXAMPLE
      if (RPT_OK != errRpt(er, LVL_PROG, PROB_NONE, 0, 
                               "Starting up...\n", 0L)) 
      {
          freeTstData(er);
          return(NULL);
      }

     Also, see @{"initTstData()" Link "initTstData()"}.

   NOTES
     Your pointer is NULLed by this function.

   BUGS
     None.

   SEE ALSO
     @{"initTstData()" Link "initTstData()"}, tmgr_common.h.

@EndNode

@Node "initTstData()" "TestManager.library/initTstData"

   NAME
      initTstData - initialize test data-reporting mechanism

   SYNOPSIS
      tstData = initTstData(my_name, testMgrName)

      struct errReport *initTstData(STRPTR, STRPTR);

   FUNCTION
      Allocates a struct errReport for you and properly
      initializes it.  This includes forming a unique name for
      your program, creating a @{"MsgPort" Link "exec/ports.h/Main" 29}, and setting up reasonable
      defaults.  It also puts a startup message into the testlog.

   INPUTS
      my_name - a template to use to create a unique program name.
                This should be the same as the name of your test
                program.  If you supply NULL for this value, you
                will be known as "Test_Prog".
    tstMgrName- Name of the test manager program you would like
                to talk to.  This is often NULL, in which case the
                default, "TestMgr", is used.

   RESULT
     tstData - a pointer to a struct errReport which you may use
               with calls to @{"errRpt()" Link "errRpt()"}.  THIS STRUCTURE MUST BE
               FREED BY A MATCHING CALL TO freeTstData()!!!
               Returns NULL for failure, in which case you should
               exit, as your test will be useless without any
               results displayed...

   EXAMPLE
      struct errReport *test;
      BYTE rc;
      int i;

      if (test = initTstData("MyTest",NULL)) {
         for (i = 0; i < MAX_TESTS; i++) {
            /* ... perform test... */
           if (test_ok) {
               /* report progress */
               rc = errRpt(test, LVL_PROG, PROB_NONE, NULL,
                       "Test %ld went OK\n", (LONG) i);
               if (rc != RPT_OK)
                  CleanUpAndExit(test); /* must freeTstData(test) ! */
           }
           else {
               /* report error */
               rc = errRpt(test, LVL_ERR, PROB_IOERR, @{"IoErr()" Link "dos/IoErr()"},
                       "Test %ld failed: %s\n", (LONG)i, MY_ERR_MSG);
               if (rc != RPT_OK)
                  CleanUpAndExit(test);  /* must freeTstData(test) ! */
           }
         }  
         freeTstData(test);
      }

   NOTES
    - An invocation of TestManager MUST be running before this
      function is called, else it will (gracefully) fail.
    - This function MUST be called before any other TestManager.library
      functions, otherwise the other functions WILL (gracefully) fail.
    - @{"freeTstData()" Link "freeTstData()"} MUST be called on exit, else you will drip RAM.
    - This function will request an ID number from the TestManager,
      and form the unique name from that plus the name you supply.
    - As of V37.4 ErrReport.lib, default values will be set up so
      you can use @{"quickRpt()" Link "quickRpt()"} right away.  These values are:
      LVL_PROG (progress report), PROB_NONE (no problem), 0 (no error).

   BUGS
     None.

   SEE ALSO
     tmgr_common.h, @{"errRpt()" Link "errRpt()"}, @{"freeTstData()" Link "freeTstData()"}

@EndNode

@Node "quickARpt()" "TestManager.library/quickARpt"

   NAME
      quickARpt - log another message of the same type previously reported.

   SYNOPSIS
      error = quickARpt(ErrReport, fmt, arg1, ...)

      BYTE quickARpt(struct errReport *, STRPTR, APTR, ...);

   FUNCTION
      This is exactly the same as @{"quickRpt()" Link "quickRpt()"}, except it takes
      the address of the first argument.

      The intended use of this function is to use it within a varargs
      function of the following form:
         VOID myRpt(STRPTR fmt, LONG arg1, ...) {
           /* relies on global struct ErrReport *er */
           if (RPT_OK != quickARpt(er, fmt, &arg1)) {
              /* anything else you wish to do on failure... */
              cleanExit();
           }
         }

   INPUTS 
      errReport- pointer to structure previously initialized by 
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will 
                 be sent and you will receive RPT_NO_SERV back. 
      fmt      - printf-style formatting string of the type described 
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}. 
      arg1     - pointer to the first of the arguments to plug into the 
                 fmt string, or NULL.  Note that additional args must
                 follow the first on the stack (as above, in myRpt()).
 
   RESULT 
      error   - described in tmgr_common.h.  If you get anything other 
                than RPT_OK back, you should exit immediately after 
                freeing your resources.  Other possible returns 
                are RPT_ABORT if the TestManager has requested that 
                you abort, or RPT_NO_SERV if the TestManager has 
                exited.  This permits cute games to be played, 
                but such practice is discouraged, especially if 
                RPT_NO_SERV is encountered. 
 
   EXAMPLE 
      See @{"quickRpt()" Link "quickRpt()"}.
 
   NOTES 
      Messages are automatically time-stamped, identified, and 
      reported according to the settings of the Test Manager. 
 
   BUGS 
      None yet. 
 
   SEE ALSO 
   tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"configRpt()" Link "configRpt()"}, @{"errRpt()" Link "errRpt()"}, 
   @{"quickRpt()" Link "quickRpt()"}

@EndNode

@Node "quickRpt()" "TestManager.library/quickRpt"

   NAME
      quickRpt - log another message of the same type previously reported.

   SYNOPSIS
      error = quickRpt(ErrReport, fmt, arg1, ...)

      BYTE quickRpt(struct errReport *, STRPTR, LONG, ...);

   FUNCTION
      Sends information off to test manager task.  This includes
      a string for the user to see, codes describing the problem,
      a code describing the severity of the problem (if any).
      Previous ErrLevel, ErrCode, and ErrType values are used.
      These values are whatever has been stored in your 
      ErrReport structure, either by @{"configRpt()" Link "configRpt()"} or @{"initTstData()" Link "initTstData()"}.
      Note that @{"errRpt()" Link "errRpt()"} is not affected by, and does not affect,
      quickRpt() ErrLevel, ErrCode, or ErrType values.
 
   INPUTS 
      errReport- pointer to structure previously initialized by 
                 @{"initTstData()" Link "initTstData()"}.  If you pass NULL, no report will 
                 be sent and you will receive RPT_NO_SERV back. 
      fmt      - printf-style formatting string of the type described 
                 in @{"exec.library/RawDoFmt()" Link "exec/RawDoFmt()"}. 
      arg1     - first of the arguments to plug into the fmt string, 
                 or NULL. 
 
   RESULT 
      error   - described in tmgr_common.h.  If you get anything other 
                than RPT_OK back, you should exit immediately after 
                freeing your resources.  Other possible returns 
                are RPT_ABORT if the TestManager has requested that 
                you abort, or RPT_NO_SERV if the TestManager has 
                exited.  This permits cute games to be played, 
                but such practice is discouraged, especially if 
                RPT_NO_SERV is encountered. 
 
   EXAMPLE 
   struct errReport *test; 
      BYTE rc; 
      int i; 
 
      if (test = initTstData("MyTest",NULL)) { 
         for (i = 0; i < MAX_TESTS; i++) { 
         /* ... perform test... */ 
           if (test_ok) { 
               /* report progress */ 
               /* default is LVL_PROG, PROB_NONE, 0 */
               rc = quickRpt(test, "Test %ld went OK\n", (LONG) i); 
               if (rc != RPT_OK) 
                  CleanUpAndExit(test); /* must freeTstData(test) ! */ 
           } 
           else { 
               /* report error, no effect on quickRpt() params */ 
               rc = errRpt(test, LVL_ERR, PROB_IOERR, @{"IoErr()" Link "dos/IoErr()"}, 
                          "Test %ld failed: %s\n", (LONG)i, MY_ERR_MSG); 
               if (rc != RPT_OK) 
                 CleanUpAndExit(test);  /* must freeTstData(test) ! */ 
           } 
         } 
         freeTstData(test); 
      } 
 
   NOTES 
      Messages are automatically time-stamped, identified, and 
      reported according to the settings of the Test Manager. 
 
   BUGS 
      None yet. 
 
   SEE ALSO 
   tmgr_common.h, @{"initTstData()" Link "initTstData()"}, @{"freeTstData()" Link "freeTstData()"}, @{"configRpt()" Link "configRpt()"}, @{"errRpt()" Link "errRpt()"}

@EndNode

