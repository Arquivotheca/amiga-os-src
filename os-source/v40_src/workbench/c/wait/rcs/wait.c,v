head     1.7;
branch   ;
access   ;
symbols  ;
locks    chrisg:1.7; strict;
comment  @*   @;


1.7
date     91.04.05.04.07.39;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     91.04.05.04.00.53;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     91.02.18.01.52.41;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.12.29.14.34.23;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.09.06.19.50.29;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.25.14.30.53;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.01.20.02.58;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.01.22.19.40.23;  author andy;  state Exp;
branches ;
next     ;


desc
@Wait command for cdos.
@


1.7
log
@Corrected wait with no arguments
@
text
@; /* 
lc -d -j73 -O -o/obj/Wait.o -i/include -v -rr -csf Wait
blink /obj/Wait.o to /bin/Wait sc sd nd lib lib:lcr.lib
protect /bin/Wait +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker   Mike Witcher */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*------------------------------------------------------------------------*/
/* Command: wait                                                          */
/* Author:  Mary Ellen Toebes                                             */
/* Change History:                                                        */
/*  Date    Person        Action                                          */
/* -------  ------------- -----------------                               */
/*                                                                        */
/* 20Oct89  Mary Ellen Toebes Initial Creation                            */
/* 20May90  Mary Ellen Toebes Readjust what time every sec incase Low pri */
/* 20May90  Mary Ellen Toebes Have checked for bad RC related bugs        */
/* 27dec90  Mary Ellen Toebes Work with no arguments                      */
/* 03apr91  Mary Ellen Toebes wait no args should wait 1 sec              */
/*                                                                        */
/* Format: Wait<n>[Sec|Secs][Min|Mins][Until<HH:MM>]                      */
/*                                                                        */
/*------------------------------------------------------------------------*/

#include "internal/commands.h"
#include "wait_rev.h"

#define MSG_BADHHMM  "Time should be HH:MM\n"
#define MSG_BADNUM   "Error in number\n"
#define MSG_ADJUSTED "Adjusted time\n"

#define TEMPLATE    "/N,SEC=SECS/S,MIN=MINS/S,UNTIL/K"  CMDREV
#define OPT_N       0             /* Numeric <n>         */
#define OPT_SECS    1             /* Keyword SEC or SECS */
#define OPT_MIN     2             /* Keyword MIN or MINS */
#define OPT_UNTIL   3             /* Keyword UNTIL       */
#define OPT_COUNT   4 

#define TPSEC  50                 /* Ticks per second    */
#define TPMIN  60 * 50            /* Ticks per minute    */                
#define TPHOUR 60 * 60 * 50       /* Ticks per hour      */
#define TPDAY  24 * 60 * 60 * 50  /* Ticks per day       */

int cmd_wait(void)
{
   struct Library *SysBase = (*((struct Library **) 4));
   struct DosLibrary *DOSBase;
   struct Library    *UtilityBase;
   struct RDargs     *rdargs;
   long   opts[OPT_COUNT];
   int    rc;
   char  *p;
   short  num;
   short  colon;
   long   hours;
   long   minutes;
   long   ticks;
   long   v[3];
   long   until_time, until_day;
   long   now_time, now_day;

   rc = RETURN_FAIL;

   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) &&
       (UtilityBase = OpenLibrary("utility.library", 0))) 
   {
      memset((char *)opts, 0, OPT_COUNT * sizeof(long));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);

      if (rdargs == NULL)
      {
         PrintFault(IoErr(), NULL);
      }
      else
      {
         rc = RETURN_OK;

         /* Get the current time */
         DateStamp(v);
         now_time = (SMult32(v[1],TPMIN)  + v[2]);
         now_day  = v[0];
         
         /* Wait until HH:MM */
         if (opts[OPT_UNTIL]) 
         {
            /* Read Args does not strip leading blanks for /K */
            for (p = (char *)opts[OPT_UNTIL]; (*p == ' ');  p++);

            /* Parse HH:MM string */
            colon = num = 0;
            while(*p && rc == RETURN_OK)
            {
               /* Colon found. Assign accumulated number to hours */
               if (*p == ':')
               {
                  if (colon++ > 1)    /* What ? more than 1 colon */
                     rc = RETURN_FAIL;
                  hours = (long)num;
                  num = 0;
               }
 
               /* Digit found. Add it to the number being ccumulated */
               else if (*p < '0' || *p > '9')
               {
                  rc = RETURN_FAIL;
               }
               else
               {
                  num *= 10;
                  num += (*p - '0');
               }
               p++;
            }
            minutes = (long)num;

            if((colon != 1) || 
               (rc == RETURN_FAIL) ||
               (hours < 0) || (hours > 23) || 
               (minutes < 0) || (minutes > 59))
            {
               PutStr(MSG_BADHHMM);
               rc = RETURN_FAIL;
            }
            else 
            {
               until_day  = now_day;
               until_time = SMult32(hours,TPHOUR) + SMult32(minutes,TPMIN);

               /* has until_time already passed? Then wait until same time*/
               /* next day.                                               */  
               if (now_time > until_time) until_day++;
            }
         }
         else
         {
            ticks = 1;
	    if (opts[OPT_N])
               ticks = *((long *)opts[OPT_N]);

            /* wait <n> minutes */
            if (opts[OPT_MIN]) ticks = SMult32(ticks,TPMIN);

            /* Wait <n> seconds  (default unit)  */
            else ticks = SMult32(ticks,TPSEC);

            until_day  = now_day;
            until_time = ticks + now_time;
            if (until_time >= TPDAY)
            {
               until_time -= TPDAY;
               until_day++;
            }
                        
            /* Check sign of tick number */
            if (ticks < 0)
            {
               PutStr(MSG_BADNUM);
               rc = RETURN_FAIL;
            }
         }

         if (rc == RETURN_OK)
         {
            while ((now_day < until_day) ||
                   (now_day == until_day && now_time < until_time))
            {
               /* check for CNTRL-C */
               if (CheckSignal(SIGBREAKF_CTRL_C))
               {
                  PrintFault(ERROR_BREAK, NULL);
                  rc = RETURN_WARN;
                  break;
               } 

               /* Wait a second at a time */
               Delay(TPSEC);

               /* Readjust incase we are running at a lo]w priority */
               DateStamp(v);
               now_day  = v[0];
               now_time = SMult32(v[1],TPMIN) + v[2];
            }
         }
         FreeArgs(rdargs);
      }

      CloseLibrary((struct Library *)DOSBase);
      CloseLibrary(UtilityBase);
   }
   else
   {
      /* We couldn't open DOS or utility so let them know */
      if (DOSBase) CloseLibrary((struct Library *)DOSBase);
      OPENFAIL;
   }


   return(rc);
}
@


1.6
log
@wait no args should wait 1 sec
@
text
@d74 1
a74 1
   long   now_time, now_day, days;
d148 1
a148 1
         else if (opts[OPT_N])
d150 3
a152 1
            ticks = *((long *)opts[OPT_N]);
a174 2
         else 
            ticks = TPSEC;
@


1.5
log
@Corrected the Wait forever problem when crossing MidNight
@
text
@d33 1
d174 1
a174 1
            rc = RETURN_FAIL;
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
; /*
d72 2
a73 2
   long   until_time;
   long   now_time;
d94 2
a95 1

d139 1
d144 1
a144 1
               if (now_time > until_time) now_time += TPDAY;
d157 8
a164 2
            until_time = now_time + ticks;

d176 3
a178 1
            while (now_time < until_time)   
d191 1
a191 1
               /* Readjust incase we are running at a low priority */
d193 2
a194 1
               now_time = (SMult32(v[1],TPMIN)  + v[2]);
d196 1
a196 1

@


1.3
log
@release 2.0 version
@
text
@d31 2
a32 1
/* 20May90  Mary Elleb Toebes Have checked for bad RC related bugs        */
d145 1
a145 1
         else 
d164 2
@


1.2
log
@new version from the Software Distillery
wait until now works
@
text
@d58 1
@


1.1
log
@version number update
@
text
@d23 1
a23 1
/* Command: wait                                                           */
d30 2
d42 1
d70 2
d89 3
a91 1
         ticks = *((long *)opts[OPT_N]);
d93 1
a93 7
         /* wait <n> minutes */
         if (opts[OPT_MIN]) ticks = SMult32(ticks,TPMIN);

         /* Wait <n> seconds  (default unit)  */
         else ticks = SMult32(ticks,TPSEC);

         /* Wait until of HH:MM */
a132 1
               ticks = 0;
d136 1
a136 1
               DateStamp(v);
a137 4
               /* ticks = until_time - now */
               ticks= SMult32(hours,TPHOUR) + SMult32(minutes,TPMIN)
                      - (SMult32(v[1],TPMIN)  + v[2]);

d140 1
a140 1
               if (ticks < 0) ticks += TPDAY;
d143 9
d153 8
a160 5
         /* Check sign of ticks number */
         if (ticks < 0) 
         {
            PutStr(MSG_BADNUM);
            rc = RETURN_FAIL;
d163 2
a164 3
         else 
         {
            while (ticks > 0)   /* Wait a second at a time */
d166 1
d173 7
a179 2
               Delay(50);
               ticks -= 50;
d181 1
a181 1
         }
@


1.0
log
@added to rcs
@
text
@@
