This version of search.doc is now cumulative, and contains 
documents for all versions of Search to date.  I is not a user
manual but contains both the information necessary to update the
manual and information for C=A to administer releases of search
or request alternatives to design choices made to date. 

Search Revision 1.14 suppresses printing the file name when the
search path is an unambiguous single file.  For compatibility
with Dos 1.3, it prints a blank line instead.  If it is decided 
that the blank line is unnecessary, define NOBLANKLINE when
compiling search.c (or remove comments around the statement
#define NOBLANKNAME in the source file).

Revision 1.14 also changes the way Search determines that it is
supposed to act as a filter.  Filter mode is invoked if the input
is redirected, and an alternate template is used for the
arguments.  Now if the redirected input is interactive, Search
checks to see if it is using the same console handler as the
CLI's standard input, and if so functions as if the input were
not redirected.  This was done in response to B10867 to allow
Search to work as most users would expect when invoked from
AREXX.  An alternative would be to invoke filter mode by a
specific command argument, but that would require a bug fix to
ReadArgs.  At present, if a single argument is given to search,
it is assigned to the path, FROM instead of the string, SEARCH,
even though PATH is not a /A argument and SEARCH is.

Search revision 1.13 allows the QUICK and QUIET options to work
together.  In order to avoid an ambiguity (QUICK always displays
names, but QUIET only displays names of matching files), the last
unmatched filename displayed with QUICK in effect is now erased
when Search terminates.

Revision 1.13 also checks the length of the SEARCH string
argument and exits with an error if the string exceeds 255
characters.  This prevents memory overwrites when making copies
of the SEARCH string, and is consistent with normal console
operation which does not allow input lines to exceed 255 chars. 
In any case, Search would not match a line longer than 255
characters, and may fail to find strins longer than 127
characters in binary files.

Search revision 1.11 corrects a bug introduced into revision 1.10
as part of the handling of binary files: the most significant bit
of a character was stripped before printing, so the extended
character set was not handled correctly when reporting lines that
match the search pattern.  This bug has not yet been reported or
given a bug number.

Lmkfile Revision 1.6 restores the -rr option.  (Note that 
the -O option was restored with revision 1.10 of search.)  I have
tested fairly extensively, and believe that previous problems
with -rr and -O may have been caused by a stack overflow. 
Starting with revision 1.10, search uses about 500 bytes less
stack and allocates about 500 more bytes instead.  I have
compiled with Lattice C 5.04.

Lmkfile Revision 1.5 restores -O option.  It appears likely that
versions of search before 1.10 pushed the limits of allowable 
stack size.  Search.c version 1.10 moves a couple of
line buffers from local variables to allocated memory, reducing
the amount of stack used from about 1500 bytes to under 1000.
 
RCS version 1.10 of Search adds support for searching binary
files.  Search remains a text oriented utility, so the object is
to find text strings even in binary files.  To support this,
Search deals primarily with 'lines' terminated by either a
newline character or a null.  Strings in binary files are likely
to be null terminated, so this often reduces extraneous output. 
If a line exceeds 256 characters, Search steps through the line
in 128 character increments to guarantee that any string up to
126 characters will be found regardless of where it falls in
relation to 256 byte boundaries.  On output, Search truncates all
characters to 7 bits and replaces all ASCII control characters 
except TAB with a dot (.) to avoid strange behavior of the
screen.  Since previous behavior of ADos Search for binary files
was somewhat ill defined, I have chosen to implement this
approach and would be willing to consider suggestions for
alternatives.  However, I would never see Search being modified
to compete with hex file editors and the like.

The following text describes versions of search older than 1.10

This version of search introduces the following changes and bugfixes to
version 36.8 which was released with Amigados 2.0 and corresponds to 
source version searchb6.c of March 14 1990.

Allow operation as a filter, with a revised template.  If input is
redirected then search will apply template "SEARCH/A,PATTERN/S,NONUM/s"
and will treat the input stream as a file to be matched for contents,
printing each line which matches the SEARCH argument.

Fix bug B9072 (?): Search doesn't set WARN flag.  This behavior of
Search prior to Amigados 2.0 was not documented.  Now if search finds no
matches for the SEARCH argument, it will return WARN.  If Search returns
OK it means that at least one match was found in at least one file if
multiple files were searched.  This also applies to the filter method of
operation described above.

Fix bug NEW3: Output lines containing "%s" were not printed correctly.

This version also changes the main template so that the FROM argument is
now optional.  If ommitted, it defaults to the current directory. 
NOTE: Due to a problem in ReadArgs, the command:
search fred
will print "error required argument missing" at the present time.
search search fred
(ie keyword present) will correctly search the current directory.  This
change is intended to prevent the need to type commands such as:
search #? fred
or:
search "" fred
if the user wishes to search the current directory.

This version also supresses printing of a blank directory name at the
start of a search if the FROM template is a blank string or a device:
search "" fred
or:
search : fred
used to produce one line of output:
      (dir)
since that is what MatchFirst() returns for that input.  It would be 
preferable for MatchFirst to return the directory name in such cases.

The following documents the oldest release of Search for Dos 1.4 aka 2.0

This version of Search includes one new switch argument, PATTERN.  When
PATTERN is specified on the command line, the SEARCH string will be
treated as a Dos Pattern with wildcards to match contents of lines in
the file being searched.  Also, the SEARCH string will always be treated
as a pattern when the FILE switch is specified.

There have been some changes in formatting.  The traditional indenting
when entering subdirectories with the ALL option works as before, but
when the QUICK, QUIET or FILE switches are specified, each filename will
be preceded by its full path, without indenting.  This replaces the
earlier convention where the full path was printed if the FROM string
contained a wildcard, and the QUICK, QUIET and FILE options produced a
list of unqualified file names with no indication of path at all.

At the present time, when Control-C is hit to halt execution, the
message "error 304" is printed instead of the traditional "***Break". 
This will no doubt be changed for the release version.

