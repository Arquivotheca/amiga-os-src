head     39.1;
branch   ;
access   ;
symbols  ;
locks    davidj:39.1; strict;
comment  @ * @;


39.1
date     92.06.29.00.22.33;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.09.45.44;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.1
log
@removed kprintf's
@
text
@/* readlist.c
 *
 */

#include "adddatatypes.h"

/*****************************************************************************/

/* Properties that we can deal with */
static LONG list_props[] =
{
    ID_DTYP, ID_DTHD,
    ID_DTYP, ID_CODE,
};

static LONG list_collections[] =
{
    ID_DTYP, ID_TOOL,
};

/*****************************************************************************/

static struct DataType * ASM GetLIST (REG (a6) struct GlobalData * gd, REG (a0) struct IFFHandle * iff)
{
    struct DataType *dtn = NULL;
    BOOL going = TRUE;

    if (OpenIFF (iff, IFFF_READ) == 0)
    {
	PropChunks (iff, list_props, 2);
	CollectionChunks (iff, list_collections, 1);
	if (StopOnExit (iff, ID_DTYP, ID_FORM) == 0)
	{
	    while (going)
	    {
		going = FALSE;
		switch (ParseIFF (iff, IFFPARSE_SCAN))
		{
		    case IFFERR_EOC:
			if (dtn = GetDTYPForm (gd, iff))
			{
			    if (AddDataTypeA (gd, dtn, NULL))
				going = TRUE;
			}
			break;

		    case IFFERR_EOF:
			break;

		    default:
			FreeVec (dtn);
			dtn = NULL;
			break;

		}
	    }
	}

	/* Close the IFF handle */
	CloseIFF (iff);
    }

    return (dtn);
}

/*****************************************************************************/

struct DataType * ASM ReadDataTypeList (REG (a6) struct GlobalData *gd, REG (d0) STRPTR name)
{
    struct DataType *dtn = NULL;
    struct IFFHandle *iff;

    if (iff = AllocIFF ())
    {
	if (iff->iff_Stream = Open (name, MODE_OLDFILE))
	{
	    InitIFFasDOS (iff);
	    dtn = GetLIST (gd, iff);
	    Close (iff->iff_Stream);
	}
	FreeIFF (iff);
    }
    else
    {
	SetIoErr (ERROR_NO_FREE_STORE);
    }
    return (dtn);
}
@


39.0
log
@initial RCS
@
text
@a8 4
#define	DB(x)	;

/*****************************************************************************/

a27 1
    DB (kprintf ("OpenIFF\n"));
a29 1
	DB (kprintf ("PropChunks\n"));
a30 1
	DB (kprintf ("CollectionChunks\n"));
a31 1
	DB (kprintf ("StopOnExit\n"));
a36 1
		DB (kprintf ("ParseIFF\n"));
a39 1
			DB (kprintf ("GetDTYPForm\n"));
a41 1
			    DB (kprintf ("AddDataTypeA\n"));
a72 1
    DB (kprintf ("AllocIFF\n"));
a74 1
	DB (kprintf ("Open [%s]\n", name));
a76 1
	    DB (kprintf ("InitIFFasDOS\n"));
a77 1
	    DB (kprintf ("GetList\n"));
a78 1
	    DB (kprintf ("Close\n"));
a80 1
	DB (kprintf ("FreeIFF\n"));
a86 2

    DB (kprintf ("returns 0x%lx\n", dtn));
@
