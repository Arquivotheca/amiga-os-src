head     1.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.8
date     91.03.25.22.46.39;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     91.02.18.02.47.01;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.12.29.00.30.00;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.01.07.02.53;  author Mary_Ellen_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.20.07.40.14;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.04.18.12.16.57;  author Unknown;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.12.20.17.14;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.01.19.28.32;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.01.22.19.29.57;  author andy;  state Exp;
branches ;
next     ;


desc
@Eval command for cdos
@


1.8
log
@Add code to support eval x.y as x
@
text
@/*
lc -d -j73 -o/obj/Eval.o -i/include -v -csf Eval
blink /obj/Eval.o to /bin/Eval sc sd nd
protect /bin/Eval +p
quit
*/
  
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker   Mike Witcher */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved  
**/ 
  
/*------------------------------------------------------------------------*/
/* Command: Eval                                                          */
/* Author:  Mary Ellen Toebes                                             */
/* Change History:                                                        */
/*  Date    Person        Action                                          */
/* -------  ------------- -----------------                               */
/* 19MAR89  John Toebes   Initial Creation                                */
/* 30Nov89  Mary Ellen Toebes added % for mod function                    */
/* 13Apr90  Mary Ellen Toebes Changed to parse and evaluate L to R        */
/* 27dec90  Mary Ellen Toebes at JAT request support lformats of %N%N%N%N */
/*          usefull for printing out number in hex, octal, decimal, char  */
/* 03mar91  Mary Ellen Toebes Do not stop evaluating because of missing   */
/*          paren                                                         */
/* 03mar91  Mary Ellen Toebes Truncate string if invalid operator found   */
/*          But do not print warning and do print questionable result     */
/*------------------------------------------------------------------------*/

#include "internal/commands.h"
#include "eval_rev.h"

#define MSG_BADFILE "Cannot open output file %s\n"
#define MSG_BADPREN "Mismatched parenthesis\n"
#define MSG_FORMAT  "%n\n"
#define MSG_BADMEM  "Out of Memory\n"
#define MSG_BADLFORMAT "Invalid LFORMAT string\n"


#define TEMPLATE    "VALUE1/A,OP,VALUE2/M,TO/K,LFORMAT/K" CMDREV
#define OPT_VAL1    0
#define OPT_OP      1
#define OPT_VAL2    2
#define OPT_TO      3
#define OPT_FORM    4
#define OPT_COUNT   5

/* return codes from parse_num */
#define VALID_NUM     0x0000
#define WARN_UNMPAREN 0x0001

/* return codes from parse_op */
#define VALID_OP      0x0000
#define MISSING_OP    0x0010
#define END_OF_EXP    0x0100 

int  eval     ( char **, long *, struct DOSLibrary *, struct Library *);
int  parse_num( char **, long *, struct DosLibrary *, struct Library *);
int  parse_op ( char **, char *);

int cmd_eval(void)
{
   struct Library *SysBase = (*((struct Library **) 4));
   struct DosLibrary *DOSBase;
   struct Library    *UtilityBase;
   struct RDargs     *rdargs;
   long   opts[OPT_COUNT];
   int    rc;
   long   length = 0L;
   long   result = 0L;
   long   result_array[4];
   BPTR   fh;
   char   *error_msg;
   char   *expression = NULL;
   char   *from, *to, **token;

   rc  = RETURN_FAIL;
   error_msg = NULL;
   
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) &&
       (UtilityBase = OpenLibrary("utility.library",0)))
      {
      memset((char *)opts, 0, sizeof(opts));

      rdargs = ReadArgs(TEMPLATE, opts, NULL);

      if (rdargs == NULL)
      {
         PrintFault(IoErr(), NULL);
      }
      else
      {
         /*--------------------------------------------------------------*/
         /* Open output file                                             */
         /*--------------------------------------------------------------*/
         if (opts[OPT_TO])
         {
            if (!(fh = Open((char *)opts[OPT_TO], MODE_NEWFILE)))
            {
               error_msg = MSG_BADFILE;
               goto ERROR;
            }
         }
         else
         {
            fh = Output();
         }
         rc = RETURN_OK;

         /*--------------------------------------------------------------*/
         /* Allocate memory to hold concatenated expression              */
         /*--------------------------------------------------------------*/
         from     = (char *)opts[OPT_VAL1]; length = strlen(from)+1;
         if (from = (char *)opts[OPT_OP])   length += strlen(from)+1;
         if (token = (char **)opts[OPT_VAL2])
            while(from = *token++)
               length += strlen(from)+1;

         if (!(expression = AllocMem(length,  0)))
         {
            error_msg = MSG_BADMEM;
            goto ERROR;
         }
         
         /*--------------------------------------------------------------*/
         /* Concatinate value1, op, value2 together and parse R to L     */
         /*--------------------------------------------------------------*/
         to = expression;
         from     = (char *)opts[OPT_VAL1]; while (*from) *to++ = *from++;
         if (from = (char *)opts[OPT_OP])   while (*from) *to++ = *from++;
         if (opts[OPT_VAL2])
         if (token = (char **)opts[OPT_VAL2])
            for(; *token; token++)
            {
               int len;
               len = strlen(*token);
               memcpy( to, (*token), len);
               to += len;
               *to++ = ' ';
            }
         *to = '\0';            /* sentinal at end of string */

         /*--------------------------------------------------------------*/
         /* Evaluate expression                                          */
         /*--------------------------------------------------------------*/
         to = expression;
         eval(&to, &result, DOSBase, UtilityBase);

         /*--------------------------------------------------------------*/
         /* Validate Lformat if one given                                */
         /*--------------------------------------------------------------*/
         if (opts[OPT_FORM])
         {
            int special = 0;
            for( from=(char *)opts[OPT_FORM]; *from; from++)
               if (*from == '%')
               {
                  switch(*++from)
                  {
                     case 'n': case 'N':
                     case 'o': case 'O':
                     case 'c': case 'C':
                     case 'x': case 'X':
                               if (special++ < 4) break;
                     default:  error_msg = MSG_BADLFORMAT;
                               goto ERROR;
                  }
               }
         }
         else 
            opts[OPT_FORM] = (long)MSG_FORMAT;
         
         /*--------------------------------------------------------------*/
         /* Print result - if no format specified use "%n\n"             */
         /*--------------------------------------------------------------*/
         result_array[0] = result_array[1] = 
         result_array[2] = result_array[3] = result;
         VFWritef(fh, (char *)opts[OPT_FORM], result_array);

         if (opts[OPT_TO])
            Close(fh);
ERROR:
         FreeArgs(rdargs);
      }

      if (error_msg)
         VPrintf( error_msg, &opts[OPT_TO]);

      if (expression)
         FreeMem(expression, length);
         
      CloseLibrary(UtilityBase);
      CloseLibrary((struct Library *)DOSBase);
   }
   else
   {
      /* We couldn't open DOS.library so give them an alert */
      OPENFAIL;
   }

return(rc);
}

/*---------------------------------------------------------------------*/
/* Name: Eval                                                          */
/* Pupose: Evaluate an expression                                      */
/* Returns: 1- mismatched parenthesis                                  */
/*          0- End of expression                                       */
/* Note: recursive function. This function call parse_num which may    */
/*       call eval.                                                    */
/*---------------------------------------------------------------------*/
int eval(str, result, DOSBase, UtilityBase)
char **str;
long *result;
struct DosLibrary *DOSBase;
struct Library *UtilityBase;
{
   int  rc;
   long rh;
   char op;

  /*--------------------------------------------------------------------*/
  /* Get left hand side of expression.                                  */
  /*--------------------------------------------------------------------*/
   rc = parse_num(str, result, DOSBase, UtilityBase);

   while(rc == VALID_NUM)
   {
     /*------------------------------------------------------------------*/
     /* Get Operator                                                     */
     /*------------------------------------------------------------------*/
      if (rc = parse_op(str, &op)) break;
      
     /*------------------------------------------------------------------*/
     /* Get right hand side of expression                                */
     /*------------------------------------------------------------------*/
      if (rc = parse_num(str, &rh, DOSBase, UtilityBase)) break;
            
     /*------------------------------------------------------------------*/
     /* Evaluate expression                                              */
     /*------------------------------------------------------------------*/
      switch (op)
      {
         case '*': *result = SMult32(*result, rh);             break;
         case '/': *result = (rh==0)? 0: SDiv32(*result, rh);  break;
         case '+': *result = *result + rh;                     break;
         case '-': *result = *result - rh;                     break;
         case '%':
         case 'M':
         case 'm': *result = (rh==0)? 0: SMod32(*result, rh);  break;
         case '&': *result =  *result & rh;                    break;
         case '|': *result =  *result | rh;                    break;
         case '~': *result = ~rh;                              break;
         case 'r':
         case 'R': *result =  *result >> rh;                   break;
         case 'l':
         case 'L': *result =  *result << rh;                   break;
         case 'X':
         case 'x': *result =  (*result ^ rh);                  break;
         case 'E':
         case 'e': *result = ~(*result ^ rh);                  break;
         default : rc = END_OF_EXP;                            break;
      }
   }

   return(rc);
}

/*---------------------------------------------------------------------*/
/* Name: Parse_num                                                     */
/* Purpose: To parse a number of the form: 3, 0x3, 03, #x3, #3, 'a     */
/*---------------------------------------------------------------------*/

int parse_num(str, value, DOSBase, UtilityBase)
char **str;
long *value;
struct DosLibrary *DOSBase;
struct Library *UtilityBase;
{
   int  rc = VALID_NUM;   
   long v  = 0L;
   long nv;
   long base;
   long sign;
   char c;
   char *p = *str;

   /*--------------------------------------------------------------------*/
   /* Scan right to left skipping over blanks                            */
   /*--------------------------------------------------------------------*/
   while (*p == ' ') p++;

   /*--------------------------------------------------------------------*/
   /* Look for sign                                                      */
   /*--------------------------------------------------------------------*/
   if (*p == '-')
   {
      p++;
      sign = -1;
   }
   else if (*p == '+')
   {
      p++;
      sign = +1;
   }
   else
      sign = 0;
   
   /*--------------------------------------------------------------------*/
   /* Number is an expression call eval to evaluate it                   */
   /*--------------------------------------------------------------------*/
   if (*p == '(')
   {
      p++;                                    
      if (eval(&p, &v, DOSBase, UtilityBase) == WARN_UNMPAREN) 
         p++;
      else
         VPrintf( MSG_BADPREN, NULL );
   }

   /*--------------------------------------------------------------*/
   /* Number is a character constant of the form 'c                */
   /*--------------------------------------------------------------*/
   else if (*p == '\'') 
   {
      v = *(p+1);
      p += 2;
   }

   /*--------------------------------------------------------------*/
   /* Number is a base 8,10, or 16 number                          */
   /*--------------------------------------------------------------*/
   else
   {
      /*--------------------------------------------------------------*/
      /* Determine Base- 0Xdd is base 16, 0dd is base 8, dd is base 10*/
      /*                 #Xdd is base 16, #dd is base 8, dd is base 10*/
      /*--------------------------------------------------------------*/
      if ( (*p == '#') || (*p == '0') )
      {
         p++;
         if ( (*p == 'x') || (*p == 'X') )
         {
            p++;
            base = 16L;
         }
         else
            base = 8L;
      }
      else
         base = 10L;

      /*--------------------------------------------------------------*/
      /* Scan right to left accumulating number in v.                 */
      /*--------------------------------------------------------------*/
      while (c = *p)
      {
         nv = SMult32(v, base);
         if      ((c>='0') && (c<='7'))               v=nv+(c - '0');                     
         else if ((c>='8') && (c<='9') && (base!= 8)) v=nv+(c - '0');
         else if ((c>='a') && (c<='f') && (base==16)) v=nv+(c - 'a')+10;
         else if ((c>='A') && (c<='F') && (base==16)) v=nv+(c - 'A')+10;
         else break;
         p++;
      }
   }

   if (sign)
      v = SMult32(v, sign);
   *value = v;
   *str = p;
   return(rc);
}



int parse_op(str, op)
char **str;
char *op;
{
   char *p = *str;
   int  rc = VALID_OP;

   /* strip trailing blanks */
   while (*p == ' ') p++;

   *op = *p;

   if (*op == '\0')       rc = END_OF_EXP;
   else if (*op == '(')   rc = MISSING_OP;
   else if (*op == ')')   rc = WARN_UNMPAREN;

   /* found an operator */
   else if ((*p     == 'M' || *p     == 'm') && 
            (*(p+1) == 'O' || *(p+1) == 'o') && 
            (*(p+2) == 'D' || *(p+2) == 'd'))
            p += 3;
   else if ((*p     == 'X' || *p     == 'x') && 
            (*(p+1) == 'O' || *(p+1) == 'o') && 
            (*(p+2) == 'R' || *(p+2) == 'r'))
            p += 3;
   else if ((*p     == 'E' || *p     == 'e') && 
            (*(p+1) == 'Q' || *(p+1) == 'q') && 
            (*(p+2) == 'V' || *(p+2) == 'v'))
            p += 3;
   else if ((*p     == 'R' || *p     == 'r') && 
            (*(p+1) == 'S' || *(p+1) == 's') && 
            (*(p+2) == 'H' || *(p+2) == 'h'))
            p += 3;
   else if ((*p     == 'L' || *p     == 'l') && 
            (*(p+1) == 'S' || *(p+1) == 's') && 
            (*(p+2) == 'H' || *(p+2) == 'h'))
            p += 3;
   else 
            p++;

   *str = p;
   return(rc);
}


@


1.7
log
@Fixed B12073 - Support arguments with multiple spaces in them
Fixed B11843 - change bit shift operators to not conflict with redirection
FIXED B11050 - Eval enforcer hits.
@
text
@d19 3
a21 3
 **	    All Rights Reserved
**/

d33 4
a44 1
#define MSG_BADOPT  "Invalid operation\n"
d48 1
d58 2
a59 2
#define VALID_NUM     0x000
#define WARN_UNMPAREN 0x001
a65 3
/* return code from eval */
#define INVALID_OP    0x1000

a77 1
   int    rc2;
d156 1
a156 4
         if ((rc2 = eval(&to, &result, DOSBase, UtilityBase)) & WARN_UNMPAREN)
            error_msg = MSG_BADPREN;
         else if (rc2 & INVALID_OP)
            error_msg = MSG_BADOPT;
d241 1
a241 1
      rc |= parse_op(str, &op);
a242 2
      if (rc != VALID_OP) break;

d246 1
a246 3
      rc |= parse_num(str, &rh, DOSBase, UtilityBase);

      if (rc != VALID_NUM) break;
d271 1
a271 1
         default : rc |= INVALID_OP;                           break;
d274 1
d324 1
a324 1
      if (eval(&p, &v, DOSBase, UtilityBase) & WARN_UNMPAREN) 
d327 1
a327 1
         rc = WARN_UNMPAREN;                  /* Warning-unmatched paren.*/
@


1.6
log
@*** empty log message ***
@
text
@d7 1
a7 1

d42 2
a43 1
#define MSG_BADMEM  "Out of Memory"
d45 1
a45 1
#define TEMPLATE    "VALUE1/A,OP,VALUE2,TO/K,LFORMAT/K" CMDREV
a52 3
#define DIGIT(c)  ((c>='0') && (c<='9'))
#define EXP_LEN 256

d84 1
a84 1
   char   *from, *to;
a92 1
      opts[OPT_FORM] = (long)MSG_FORMAT;
d122 6
a127 5
         from     = (char *)opts[OPT_VAL1]; while (*from) {length++;from++;}
         if (from = (char *)opts[OPT_OP])   while (*from) {length++;from++;}
         if (from = (char *)opts[OPT_VAL2]) while (*from) {length++;from++;}
         length++;
         
d140 10
a149 1
         if (from = (char *)opts[OPT_VAL2]) while (*from) *to++ = *from++;
d162 24
d270 4
a273 1
         case '<': *result =  *result << rh;                   break;
d420 8
@


1.5
log
@Corrected B10667, B10726, B10741 - Out of memory problems, ~ evaluation
problems and operator parsing problems.
@
text
@d1 1
a1 1
; /*
d31 2
d44 1
a44 1
#define TEMPLATE    "VALUE1/A,OP,VALUE2,TO,LFORMAT/K" CMDREV
d82 1
d109 1
a109 1
	 {
d114 1
a114 1
	    }
d157 3
a159 1
         VFWritef(fh, (char *)opts[OPT_FORM], &result);
a199 1
   int  rc2;
d214 1
d221 1
@


1.4
log
@fixed crash when MOD was used (divide by 0 problem)
@
text
@d39 2
d58 3
a60 4
#define VALID_OP      0x000
/*      WARN_UNMPAREN 0x001   */
#define MISSING_OP    0x010
#define END_OF_EXP    0x100 
d62 3
d77 2
a79 1

d82 1
a82 1
   char   expression[EXP_LEN];
d87 1
a87 1

d118 15
a132 1
   
d136 1
a136 1
         to = &expression[0];
d145 2
a146 2
         to = &expression[0];
         if (eval(&to, &result, DOSBase, UtilityBase) & WARN_UNMPAREN)
d148 2
d165 3
d204 1
a204 1
   while(TRUE)
d209 3
a211 3
      rc |= (rc2=parse_op(str, &op));
      if (rc2 & (END_OF_EXP | WARN_UNMPAREN)) break;
   
d216 2
a217 1
      
d232 1
a232 1
         case '~': *result = ~*result;                         break;
d238 1
a238 1
         default :                                             break;
d367 16
a382 1
   else                   p++;
@


1.3
log
@new version from Mary-Ellen...fixes order of ops
also fixes operation parsing
@
text
@d204 1
a204 1
         case 'm': *result = SMod32(*result, rh);              break;
@


1.2
log
@major changes, no more gurus
@
text
@d30 1
a37 1
#define MSG_OPS     "- */+%Mm&|~<>Ee"
a49 1
#define OPS_LEN 16   /* include \0 at end in length */
d51 12
a63 2
int  parse_num( char **, long *, struct DosLibrary *, struct Library *);
int  eval     ( char **, long *, struct DOSLibrary *, struct Library *);
d67 1
d117 1
a117 2
         expression[0] = '\0';  /* sentinal at start of string */
         to = &expression[1];
a121 1
         to--;
d126 2
a127 1
         if (eval(&to, &result, DOSBase, UtilityBase))
d158 5
a162 5
/* Pupose: to evaluate and expression                                  */
/* Returns: 1- a '(' caused our return                                 */
/*          0- End of string                                           */
/* Note: recursive function. This function call parse_num which calls  */
/*       eval.                                                         */
d170 3
a172 2
   int  rc = 0;
   long v;
d175 4
a178 4
   /*--------------------------------------------------------------------*/
   /* Get right hand side of expression                                  */
   /*--------------------------------------------------------------------*/
   rc |= parse_num(str, result, DOSBase, UtilityBase);
d180 10
a189 4
   while (parse_op(str, &op))
   {
     /*------------------------------------------------------------------*/
     /* Get left hand side of expression                                 */
d191 2
a192 3
      v = *result;
      rc |= parse_num(str, result, DOSBase, UtilityBase);

d198 4
a201 4
         case '*': *result = SMult32(*result, v);             break;
         case '/': *result = (v==0)? 0: SDiv32(*result, v);   break;
         case '+': *result = *result + v;                     break;
         case '-': *result = *result - v;                     break;
d204 5
a208 5
         case 'm': *result = SMod32(*result, v);              break;
         case '&': *result = *result & v;                     break;
         case '|': *result = *result | v;                     break;
         case '~': *result = ~(*result);                      break;
         case '<': *result = *result << v;                    break;
d210 1
a210 1
         case 'x': *result = (*result ^ v);                   break;
d212 2
a213 2
         case 'e': *result = ~(*result ^ v);                  break;
         default :                                   break;
d221 1
a221 1
/* Purpose: To parse a number of the form: 3, 0x3, 03, 'a              */
d230 3
a232 2
   long v     = 0L;
   long sign  = 1;
d234 1
a234 1
   int  rc = 0;
d236 6
a241 3
   char *p;
   char *ops;
   int  i;
d244 19
a262 15
   /* Scan left stripping trailing blanks                                */
   /*--------------------------------------------------------------------*/
   p = *str;
   while (*p == ' ') p--;

   /*--------------------------------------------------------------------*/
   /* Place a sentinal '\0' at the current poition which is also the end */
   /* of the number                                                      */
   /*--------------------------------------------------------------------*/
   *(p+1) = '\0';

   /*--------------------------------------------------------------------*/
   /* If expression found - evaluate it and return result                */
   /*--------------------------------------------------------------------*/
   if (*p == ')')
d264 3
a266 3
      p--;
      if (eval(&p, &v, DOSBase, UtilityBase)) /* returns pointing at ( */
         p--;
d268 2
a269 1
         rc = 1L;     /* Error - unmatched paren.  */
d271 4
a274 12
      *str = p;
      *value = v;
      return(rc);
   }

   /*--------------------------------------------------------------------*/
   /* Else, scan left until a valid operator character is found. The     */
   /* characters composing the number are now deliniated by the sentinal */
   /* '\0' placed in the string earlier and the current pointer p.       */
   /*--------------------------------------------------------------------*/
   ops  = MSG_OPS;
   while (1)
d276 3
a278 17
      if (*p == '(')
      {
         *str = p;
         p++;
         rc = 1;   /* Note that there maybe mismatched parenthesis */
         break;
      }
      else for (i=0; (i<OPS_LEN); i++)
         if (*p == ops[i])    /* null is considered an op */
            {
            *str = p;
            *p++;  /* scan forward 1 char to start of number */
            goto FOUND_OP;
            }
      p--;
   }
FOUND_OP:
d280 4
a283 2

   if (*p)
d285 5
a289 7
      if (*p == '\'') 
         {
         v = *(p+1);
         p += 2;
         *str = p;
         }
      else
d291 2
a292 5
         /*--------------------------------------------------------------*/
         /* Determine Base- 0Xdd is base 16, 0dd is base 8, dd is base 10*/
         /*                 #Xdd is base 16, #dd is base 8, dd is base 10*/
         /*--------------------------------------------------------------*/
         if ( (*p == '#') || (*p == '0') )
d295 1
a295 7
            if ( (*p == 'x') || (*p == 'X') )
            {
               p++;
               base = 16L;
            }
            else
               base = 8L;
d298 4
a301 1
            base = 10L;
d303 12
a314 13
         /*--------------------------------------------------------------*/
         /* scan forward accumulating number in v.                       */
         /*--------------------------------------------------------------*/
         while (c = *p)
         {
            v = SMult32(v, base);
            if (DIGIT(c))                                v += (c - '0');
            else if ((c>='a') && (c<='f') && (base==16)) v += (c - 'a')+10;
            else if ((c>='A') && (c<='F') && (base==16)) v += (c - 'A')+10;
            else { v = 0; break; }
            p++;
         }
         v = SMult32(v, sign);
d316 1
a316 1
   } /* end while */
d318 2
d321 1
d332 1
a332 1
   int  rc = 1;
d335 1
a335 1
   while (*p == ' ') p--;
d337 6
a342 5
   /* If operator is '(' return */
   if (((*op = *p) == '\0') || (*op == '('))
      rc = 0;
   else
      p--;
d347 1
@


1.1
log
@version number update
@
text
@d90 7
a96 5
         if (opts[OPT_TO] &&
             !(fh = Open((char *)opts[OPT_TO], MODE_NEWFILE)))
         {
            error_msg = MSG_BADFILE;
            goto ERROR;
d103 1
a103 1

d127 1
a127 1
               Close(fh);
d184 1
a184 1
         case '/': *result = SDiv32(*result, v);              break;
d242 1
a242 1
      if (eval(&p, &v, DOSBase, UtilityBase))
d268 1
a268 1
         if (*p == ops[i])
d275 1
a275 1
      }
d281 1
a281 1
      if (*p == '\'')
d291 1
d293 1
a293 1
         if (*p == '0')
d321 2
a322 1
   }
@


1.0
log
@added to rcs
@
text
@@
