head     39.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.4
date     92.08.13.16.06.25;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.08.02.18.48.40;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.10.10.02.13;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.15.15.27.31;  author vertex;  state Exp;
branches ;
next     ;


desc
@Offer a choice to the user using an EasyRequest()
@


39.4
log
@CHanged templates from GADGETS/A to GADGETS/M
@
text
@
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/memory.h>
#include <dos/dos.h>
#include <dos/rdargs.h>
#include <intuition/intuition.h>
#include <string.h>
#include <stdio.h>

#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/intuition_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/intuition_pragmas.h>

#include "requestchoice_rev.h"


/*****************************************************************************/


#define TEMPLATE      "TITLE/A,BODY/A,GADGETS/M,PUBSCREEN/K" VERSTAG
#define OPT_TITLE     0
#define OPT_BODY      1
#define OPT_GADGETS   2
#define OPT_PUBSCREEN 3
#define OPT_COUNT     4


/*****************************************************************************/


struct Window *GetWindow(struct Library *IntuitionBase, ULONG tags, ...);


/*****************************************************************************/


LONG main(VOID)
{
struct Library    *SysBase = (*((struct Library **) 4));
struct Library    *DOSBase;
struct Library    *IntuitionBase;
LONG               opts[OPT_COUNT];
struct RdArgs     *rdargs;
LONG               failureCode;
LONG               failureLevel;
struct EasyStruct  es;
struct Window     *window;
STRPTR             body;
STRPTR            *gadgets;
STRPTR             gad;
UWORD              len;
UWORD              i;
UWORD              j;
STRPTR             newbody;
STRPTR             newgadgets;
char               buf[16];

    failureCode  = ERROR_INVALID_RESIDENT_LIBRARY;
    failureLevel = RETURN_FAIL;

    if (DOSBase = OpenLibrary("dos.library",37))
    {
        if (IntuitionBase = OpenLibrary("intuition.library",37))
        {
            memset(opts,0,sizeof(opts));
            if (rdargs = ReadArgs(TEMPLATE,opts,NULL))
            {
                body    = (STRPTR)opts[OPT_BODY];
                gadgets = (STRPTR *)opts[OPT_GADGETS];

                if (gadgets && *gadgets)
                {
                    len = strlen(body);
                    while (gad = *gadgets)
                    {
                        len += strlen(gad) + 1;

                        i = 0;
                        while (gad[i])
                            if (gad[i++] == '%')
                                len++;

                        gadgets++;
                    }

                    i = 0;
                    while (body[i])
                        if (body[i++] == '%')
                            len++;

                    failureCode = ERROR_NO_FREE_STORE;
                    if (newbody = AllocVec(len+1,MEMF_ANY))
                    {
                        i = 0;
                        j = 0;
                        while (body[i])
                        {
                            newbody[j++] = body[i];
                            if (body[i++] == '%')
                                newbody[j++] = '%';
                        }
                        newbody[j++] = 0;
                        newgadgets = &newbody[j];

                        gadgets = (STRPTR *)opts[OPT_GADGETS];
                        while (gad = *gadgets)
                        {
                            i = 0;
                            while (gad[i])
                            {
                                newbody[j++] = gad[i];
                                if (gad[i++] == '%')
                                    newbody[j++] = '%';
                            }
                            gadgets++;

                            if (*gadgets)
                                newbody[j++] = '|';
                        }
                        newbody[j] = 0;

                        if (window = GetWindow(IntuitionBase,WA_PubScreenName, opts[OPT_PUBSCREEN],
                                                             WA_Left,          0,
                                                             WA_Top,           0,
                                                             WA_Width,         16,
                                                             WA_Height,        16,
                                                             WA_Backdrop,      TRUE,
                                                             WA_Borderless,    TRUE,
                                                             WA_NoCareRefresh, TRUE,
                                                             WA_RMBTrap,       TRUE,
                                                             TAG_DONE))
                        {
                            es.es_StructSize   = sizeof(struct EasyStruct);
                            es.es_Flags        = 0;
                            es.es_Title        = (STRPTR)opts[OPT_TITLE];
                            es.es_TextFormat   = newbody;
                            es.es_GadgetFormat = newgadgets;

                            failureCode  = EasyRequestArgs(window,&es,NULL,NULL);
                            failureLevel = RETURN_OK;

                            sprintf(buf,"%ld\n",failureCode);
                            PutStr(buf);

                            CloseWindow(window);
                        }
                    }
                }
                else
                {
                    failureCode = ERROR_REQUIRED_ARG_MISSING;
                }
            }
            else
            {
                failureCode = IoErr();
            }

            CloseLibrary(IntuitionBase);
        }

        SetIoErr(failureCode);
        if (failureLevel != RETURN_OK)
            PrintFault(failureCode,NULL);

        CloseLibrary(DOSBase);
    }

    return(failureLevel);
}


/*****************************************************************************/


struct Window *GetWindow(struct Library *IntuitionBase, ULONG tags, ...)
{
    return(OpenWindowTagList(NULL,(struct TagItem *)&tags));
}
@


39.3
log
@Now outputs number of selected gadget to console
@
text
@d25 1
a25 1
#define TEMPLATE      "TITLE/A,BODY/A,GADGETS/A,PUBSCREEN/K" VERSTAG
d54 3
a56 2
STRPTR             gadgets;
UWORD              percent;
d74 1
a74 2
                gadgets = (STRPTR)opts[OPT_GADGETS];
                percent = 0;
d76 1
a76 12
                i = 0;
                while (body[i])
                    if (body[i++] == '%')
                        percent++;

                i = 0;
                while (gadgets[i])
                    if (gadgets[i++] == '%')
                        percent++;

                failureCode = ERROR_NO_FREE_STORE;
                if (newbody = AllocVec(strlen(body)+1+strlen(gadgets)+1+percent,MEMF_ANY))
d78 2
a79 3
                    i = 0;
                    j = 0;
                    while (body[i])
d81 8
a88 3
                        newbody[j++] = body[i];
                        if (body[i++] == '%')
                            newbody[j++] = '%';
a89 2
                    newbody[j++] = 0;
                    newgadgets = &newbody[j];
d92 3
a94 7
                    while (gadgets[i])
                    {
                        newbody[j++] = gadgets[i];
                        if (gadgets[i++] == '%')
                            newbody[j++] = '%';
                    }
                    newbody[j] = 0;
d96 2
a97 10
                    if (window = GetWindow(IntuitionBase,WA_PubScreenName, opts[OPT_PUBSCREEN],
                                                         WA_Left,          0,
                                                         WA_Top,           0,
                                                         WA_Width,         16,
                                                         WA_Height,        16,
                                                         WA_Backdrop,      TRUE,
                                                         WA_Borderless,    TRUE,
                                                         WA_NoCareRefresh, TRUE,
                                                         WA_RMBTrap,       TRUE,
                                                         TAG_DONE))
d99 50
a148 11
                        es.es_StructSize   = sizeof(struct EasyStruct);
                        es.es_Flags        = 0;
                        es.es_Title        = (STRPTR)opts[OPT_TITLE];
                        es.es_TextFormat   = newbody;
                        es.es_GadgetFormat = newgadgets;

                        failureCode  = EasyRequestArgs(window,&es,NULL,NULL);
                        failureLevel = RETURN_OK;

                        sprintf(buf,"%ld\n",failureCode);
                        PutStr(buf);
d150 2
a151 1
                        CloseWindow(window);
d153 4
@


39.2
log
@Fixed problem with strings containing % formatting commands
@
text
@d9 1
d60 1
d128 3
@


39.1
log
@Initial V39 RCS checkin
@
text
@d4 1
d52 7
d70 3
a72 16
                if (window = GetWindow(IntuitionBase,WA_PubScreenName, opts[OPT_PUBSCREEN],
                                                     WA_Left,          0,
                                                     WA_Top,           0,
                                                     WA_Width,         16,
                                                     WA_Height,        16,
                                                     WA_Backdrop,      TRUE,
                                                     WA_Borderless,    TRUE,
                                                     WA_NoCareRefresh, TRUE,
                                                     WA_RMBTrap,       TRUE,
                                                     TAG_DONE))
                {
                    es.es_StructSize   = sizeof(struct EasyStruct);
                    es.es_Flags        = 0;
                    es.es_Title        = (STRPTR)opts[OPT_TITLE];
                    es.es_TextFormat   = (STRPTR)opts[OPT_BODY];
                    es.es_GadgetFormat = (STRPTR)opts[OPT_GADGETS];
d74 9
a82 2
                    failureCode  = EasyRequestArgs(window,&es,NULL,NULL);
                    failureLevel = RETURN_OK;
d84 2
a85 3
                    CloseWindow(window);
                }
                else
d87 42
a128 2
                    failureCode = ERROR_NO_FREE_STORE;
                    PrintFault(failureCode,NULL);
a133 1
                PrintFault(failureCode,NULL);
d140 2
@
