head     38.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.8
date     92.02.13.16.39.07;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.11.17.31.46;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.11.22.13.18.08;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.11.20.10.14.29;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.28.09.44.10;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.09.23.11.55.20;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.09.23.10.47.35;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.09.18.15.21.57;  author vertex;  state Exp;
branches ;
next     ;


desc
@Run scripts from the Workbench
@


38.8
log
@Fixed input from started shell
Made default window be full screen width
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/dostags.h>
#include <workbench/startup.h>
#include <workbench/workbench.h>
#include <workbench/icon.h>
#include <utility/tagitem.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/icon_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/icon_pragmas.h>

#include "iconx_rev.h"


/*****************************************************************************/


char *version = VERSTAG;

LONG SystemStub(struct Library *DOSBase, STRPTR cmdLine, ULONG tag, ...);
LONG WB2CLI(struct WBStartup *wbmsg, ULONG defaultStack, struct Library *DOSBase);


/*****************************************************************************/


LONG main(VOID)
{
struct Library    *IconBase;
struct Library    *DOSBase;
struct Library    *SysBase = (*((struct Library **) 4));
struct Process    *process;
struct WBStartup  *WBenchMsg;
struct DiskObject *diskObj;
struct WBArg      *wbArg;
LONG               argCnt;
STRPTR             ttype;
LONG               failureLevel = RETURN_FAIL;
BPTR               oldCD;
char               ioName[256];
BPTR               ioFile;
LONG               delay;
char               args[1024];
UWORD              len0,len1;
ULONG              stackSize;
BOOL               userShell;

    process = (struct Process *)FindTask(NULL);
    if (!(process->pr_CLI))
    {
        WaitPort(&process->pr_MsgPort);
        WBenchMsg = (struct WBStartup *) GetMsg(&process->pr_MsgPort);

        if (DOSBase = OpenLibrary("dos.library",37))
        {
            failureLevel = RETURN_ERROR;
            delay        = 2*TICKS_PER_SECOND;
            stackSize    = 4096;
            userShell    = FALSE;
            strcpy(ioName,"CON:0/50//80/IconX/AUTO");

            wbArg        = WBenchMsg->sm_ArgList;
            argCnt       = WBenchMsg->sm_NumArgs;

            if (argCnt > 1)
            {
                wbArg++;
                oldCD = CurrentDir(wbArg->wa_Lock);

                if (IconBase = OpenLibrary("icon.library",37))
                {
                    if (diskObj = GetDiskObject(wbArg->wa_Name))
                    {
                        if (ttype = FindToolType(diskObj->do_ToolTypes,"WINDOW"))
                            strncpy(ioName,ttype,sizeof(ioName));

                        if (ttype = FindToolType(diskObj->do_ToolTypes,"STACK"))
                            StrToLong(ttype,&stackSize);

                        if (ttype = FindToolType(diskObj->do_ToolTypes,"USERSHELL"))
                            userShell = MatchToolValue(ttype,"YES");

                        if (ttype = FindToolType(diskObj->do_ToolTypes,"WAIT"))
                        {
                            StrToLong(ttype,&delay);
                            delay = delay * TICKS_PER_SECOND;
                            if (!delay)
                                strcat(ioName,"/CLOSE/WAIT");
                        }
                        else if (ttype = FindToolType(diskObj->do_ToolTypes,"DELAY"))
                        {
                            StrToLong(ttype,&delay);
                            if (!delay)
                                strcat(ioName,"/CLOSE/WAIT");
                        }
                        FreeDiskObject(diskObj);
                    }
                    CloseLibrary(IconBase);
                }

                /* Turn us into a CLI process */
                WB2CLI(WBenchMsg,stackSize,DOSBase);

                sprintf(args,"FailAt 100\nExecute \"%s\"",wbArg->wa_Name);

                while (argCnt > 2)
                {
                    wbArg++;
                    strcat(args," \"");
                    len0 = strlen(args);
                    NameFromLock(wbArg->wa_Lock,&args[len0],sizeof(args)-len0);
                    len1 = strlen(args);
                    AddPart(&args[len0],wbArg->wa_Name,sizeof(args)-len1);
                    strcat(args,"\"");
                    argCnt--;
                }

                strcat(args,"\n");

                if (ioFile = Open(ioName,MODE_OLDFILE))
                {
                    SystemStub(DOSBase,args,SYS_Output,    NULL,
                                            SYS_Input,     ioFile,
                                            SYS_UserShell, userShell,
                                            TAG_DONE);

                    if (delay)
                        Delay(delay);

                    Close(ioFile);
                }
                CurrentDir(oldCD);
            }
            CloseLibrary(DOSBase);
        }

    	Forbid();
    	ReplyMsg(WBenchMsg);
    }

    return(failureLevel);
}


/*****************************************************************************/


LONG SystemStub(struct Library *DOSBase, STRPTR cmdLine, ULONG tag, ...)
{
    return(System(cmdLine,(struct TagItem *)&tag));
}


/*****************************************************************************/


LONG WB2CLI(struct WBStartup *wbMsg, ULONG defaultStack, struct Library *DOSBase)
{
struct Library              *SysBase = (*((struct ExecBase **) 4));
struct Process		    *process;
struct CommandLineInterface *cli;
struct MsgPort		    *wbPort;
struct Process		    *wbProc;
struct CommandLineInterface *wbCLI;
ULONG			    *wbPath;
ULONG			    *lastPath;
ULONG			    *tmp;
STRPTR                      prompt;

    process = (struct Process *)FindTask(NULL);
    cli     = BADDR(process->pr_CLI);

    if (!cli && wbMsg && (cli = AllocDosObjectTagList(DOS_CLI,NULL)))
    {
        cli->cli_DefaultStack  = ((defaultStack+3) / 4);
        process->pr_CLI        = MKBADDR(cli);
        process->pr_Flags     |= PRF_FREECLI;

        Forbid();

        if (wbPort = wbMsg->sm_Message.mn_ReplyPort)
        {
            if ((wbPort->mp_Flags & PF_ACTION) == PA_SIGNAL)
            {
                if (wbProc = wbPort->mp_SigTask)
                {
                    if (wbProc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
                    {
                        if (wbCLI = BADDR(wbProc->pr_CLI))
                        {
			    prompt = BADDR(wbCLI->cli_Prompt);
                            if (prompt)
                                SetPrompt(&(prompt[1]));

                            wbPath   = BADDR(wbCLI->cli_CommandDir);
                            lastPath = &(cli->cli_CommandDir);
                            while (wbPath)
                            {
                                if (wbPath[1])
                                {
                                    if (tmp = AllocVec(8,MEMF_CLEAR|MEMF_PUBLIC))
                                    {
                                        if (!(tmp[1] = DupLock(wbPath[1])))
                                        {
                                            FreeVec(tmp);
                                            break;
                                        }
                                        lastPath[0] = MKBADDR(tmp);
                                        lastPath    = tmp;
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }

                                wbPath = BADDR(wbPath[0]);
                            }
                        }
                    }
                }
            }
        }

        Permit();
    }

    return((LONG)cli);
}
@


38.7
log
@DELAY now works in 50th of a second like in 2.04
WAIT was added to wait in seconds
The started process now inherits Workbench's prompt string
@
text
@d57 2
a58 2
char               outputName[256];
BPTR               outputFile;
d77 1
a77 1
            strcpy(outputName,"CON:0/50/640/80/IconX/AUTO");
d92 1
a92 1
                            strncpy(outputName,ttype,sizeof(outputName));
d105 1
a105 1
                                strcat(outputName,"/CLOSE/WAIT");
d111 1
a111 1
                                strcat(outputName,"/CLOSE/WAIT");
d137 1
a137 1
                if (outputFile = Open(outputName,MODE_OLDFILE))
d139 2
a140 1
                    SystemStub(DOSBase,args,SYS_Output,    outputFile,
d147 1
a147 1
                    Close(outputFile);
@


38.6
log
@Reverted to 38.4 version
@
text
@d74 1
a74 1
            delay        = 2;
d100 1
a100 1
                        if (ttype = FindToolType(diskObj->do_ToolTypes,"DELAY"))
d103 1
d107 6
d144 1
a144 1
                        Delay(delay*TICKS_PER_SECOND);
d184 1
d207 4
@


38.5
log
@Now has a BOOTSHELL tooltype instead of the USERSHELL tooltype
@
text
@d63 1
a63 1
BOOL               bootShell;
d76 1
a76 1
            bootShell    = FALSE;
d97 2
a98 2
                        if (ttype = FindToolType(diskObj->do_ToolTypes,"BOOTSHELL"))
                            bootShell = MatchToolValue(ttype,"YES");
d133 1
a133 1
                                            SYS_UserShell, !bootShell,
@


38.4
log
@Fixed DELAY tooltype
@
text
@d63 1
a63 1
BOOL               userShell;
d76 1
a76 1
            userShell    = FALSE;
d97 2
a98 2
                        if (ttype = FindToolType(diskObj->do_ToolTypes,"USERSHELL"))
                            userShell = MatchToolValue(ttype,"YES");
d133 1
a133 1
                                            SYS_UserShell, userShell,
@


38.3
log
@Default window spec now includes /AUTO to avoid useless windows
@
text
@d38 1
a38 3
LONG __asm WB2CLI(register __a0 struct WBStartup *wbmsg,
                  register __d0 ULONG DefaultStack,
                  register __a1 struct Library *DOSBase);
d74 1
a74 1
            delay        = 100;
d137 1
a137 1
                        Delay(delay);
d166 1
a166 3
LONG __asm WB2CLI(register __a0 struct WBStartup *wbmsg,
                  register __d0 ULONG DefaultStack,
                  register __a1 struct Library *DOSBase)
d168 9
a176 130
struct	ExecBase		*SysBase = (*((struct ExecBase **) 4));
struct	Process			*process;
struct	CommandLineInterface	*cli;
struct	MsgPort			*wbport;
struct	Process			*wbproc;
struct	CommandLineInterface	*wbcli;
	ULONG			*wbpath=NULL;
	ULONG			*lastpath;
	ULONG			*tmp;

	process=(struct Process *)FindTask(NULL);
	cli=BADDR(process->pr_CLI);

	/*
	 * Check if we already have a CLI or no WBStartup
	 */
	if ((!cli) && (wbmsg)) if (cli=AllocDosObjectTagList(DOS_CLI,NULL))
	{
		/*
		 * Set the default stack for the CLI...
		 */
		cli->cli_DefaultStack=((DefaultStack+3)>>2);

		/*
		 * Connect the CLI to the process
		 */
		process->pr_CLI=MKBADDR(cli);

		/*
		 * Tell DOS that it will free the CLI...
		 */
		process->pr_Flags|=PRF_FREECLI;

		/*
		 * At this point, we "worked"  We now try to get the path
		 * but it may not be there or it may be NULL or it
		 * may be impossible to copy it...
		 */
		Forbid();	/* This is needed for current systems */

		/*
		 * Now, find our launching process (usually Workbench)
		 * There are lots of checks here to make sure it is safe.
		 *
		 * Check for a reply port
		 */
		if (wbport=wbmsg->sm_Message.mn_ReplyPort)
		{	/*
			 * Check that it is a PA_SIGNAL
			 */
			if (((wbport->mp_Flags)&PF_ACTION) == PA_SIGNAL)
			{	/*
				 * Check to make sure there is a SigTask
				 */
				if (wbproc=wbport->mp_SigTask)
				{	/*
					 * Make sure it is a process
					 */
					if (wbproc->pr_Task.tc_Node.ln_Type==NT_PROCESS)
					{	/*
						 * Make sure the process is a CLI
						 */
						if (wbcli=BADDR(wbproc->pr_CLI))
						{	/*
							 * Get the pointer to the path
							 */
							wbpath=BADDR(wbcli->cli_CommandDir);
						}
					}
				}
			}
		}

		/*
		 * Did we get a path to copy?
		 */
		if (wbpath)
		{
			/*
			 * Cute trick to point as first pointer...
			 */
			lastpath=&(cli->cli_CommandDir);

			/*
			 * Now, start the copy...
			 *
			 * It is very important to do this as given here
			 * as the system will then deallocate the path and
			 * it must be in the right form.
			 *
			 * Also, we check for NULL path entries and do not
			 * copy them (they are used in workbench as "to be
			 * released" entries)
			 */
			while (wbpath) if (wbpath[1])
			{	/*
				 * Allocate the next entry in the lock list
				 */
				if (tmp=AllocVec(8,MEMF_CLEAR|MEMF_PUBLIC))
				{	/*
					 * If the lock did not DupLock, we
					 * abort the rest of the path copy
					 */
					if (!(tmp[1]=DupLock(wbpath[1])))
					{
						FreeVec(tmp);
						tmp=NULL;
					}

					/*
					 * Advance the workbench path pointer
					 * to the next entry...
					 */
					wbpath=BADDR(wbpath[0]);
				}

				/*
				 * Now, we have the next lock element...
				 * so link it in if it exists.  If not,
				 * we just stop copying...
				 */
				if (tmp)
				{
					lastpath[0]=MKBADDR(tmp);
					lastpath=tmp;
				}
				else wbpath=NULL;
			}
			else wbpath=BADDR(wbpath[0]);
		}
d178 53
a230 2
		Permit();
	}
d232 1
a232 1
	return((LONG)cli);
@


38.2
log
@Now inherits WB's path
Supports a STACK tooltype
Supports a USERSHELL tooltype
@
text
@d79 1
a79 1
            strcpy(outputName,"CON:0/50/640/80/IconX");
@


38.1
log
@Initial V38 RCS checkin
@
text
@a1 6
/* The sections of code that are commented out are to allow path inheritance by
 * the IconX. When the code is uncommented, IconX works fine the first time
 * around and the path is inherited, but the second time it is run, the
 * Execute command gives enforcer hits.
 */

d38 3
d64 2
a65 2
struct Process              *wb;
struct CommandLineInterface *cli;
d77 2
d96 6
d113 3
d132 1
a132 6
                /* Result:  FailAt 100
                 *          Execute "scriptName" arg(s)
                 */

/*
                if (wb = (struct Process *)FindTask("Workbench"))
d134 3
a136 7
                    cli = (struct CommandLineInterface *)((ULONG)wb->pr_CLI << 2);
*/
                    if (outputFile = Open(outputName,MODE_OLDFILE))
                    {
                        SystemStub(DOSBase,args,SYS_Output, outputFile,
/*                                                NP_Path,    cli->cli_CommandDir, */
                                                TAG_DONE);
d138 2
a139 2
                        if (delay)
                            Delay(delay);
d141 1
a141 3
                        Close(outputFile);
                    }
/*
a142 2
*/

d162 145
@
