head     1.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.9
date     90.09.06.19.48.40;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.05.30.13.08.24;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.05.29.22.59.06;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.12.17.49.08;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.04.08.00.34.16;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.07.22.36.56;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.26.22.18.05;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.10.19.06.44;  author rsbx;  state Exp;
branches ;
next     1.1;

1.1
date     89.10.27.22.40.41;  author rsbx;  state Exp;
branches ;
next     ;


desc
@Alfred, the replacement for SetClock.
@


1.9
log
@release 2.0 version
@
text
@/* $Header: V36:src/workbench/c/setclock/RCS/setclock.c,v 1.8 90/05/30 13:08:24 andy Exp Locker: andy $
 *
 * Alfred - the program that takes care of BattClock.resource and
 *	BattMem.resource. Also, the replacement for SetClock.
 *
 * $Author: andy $
 *
 * $Date: 90/05/30 13:08:24 $
 *
 * $Id: setclock.c,v 1.8 90/05/30 13:08:24 andy Exp Locker: andy $
 *
 * $Locker: andy $
 *
 * $RCSfile: setclock.c,v $
 *
 * $Revision: 1.8 $
 *
 * $Source: V36:src/workbench/c/setclock/RCS/setclock.c,v $
 *
 * $State: Exp $
 *
 * $Log:	setclock.c,v $
 * Revision 1.8  90/05/30  13:08:24  andy
 * fixed error return
 * 
 * Revision 1.7  90/05/29  22:59:06  andy
 * removed incorrect initialization of message
 * 
 * Revision 1.6  90/04/12  17:49:08  andy
 * returns RETURN_OK if no error, rather than a 20
 * 
 * Revision 1.2  89/12/10  19:06:44  rsbx
 * Change in error message.
 * 
 * Revision 1.1  89/10/27  22:40:41  rsbx
 * Initial revision
 * 
 *
 */
#include <exec/types.h>
#include <exec/ports.h>
#include <exec/io.h>
#include <exec/devices.h>
#include <devices/timer.h>
#include <resources/battclock.h>
#include <dos/dos.h>

#include "pragmas/battclock_pragmas.h"

#include "string.h"
#include "internal/commands.h"
#include "setclock_rev.h"

extern struct Library *OpenLibrary();
extern void aprintf();



#define TEMPLATE    "LOAD/S,SAVE/S,RESET/S" CMDREV

#define OPT_LOAD    	0
#define OPT_SAVE        1
#define OPT_RESET       2

#define OPT_COUNT	3



long cmd_setclock(void)
{
    struct Library *SysBase = (*((struct Library **) 4));
    struct Resource *BattClockBase;
    struct DosLibrary *DOSBase;
    long rc=RETURN_FAIL;
    struct timerequest *timermsg=0;
    long opts[OPT_COUNT],td= -1;
    struct RDargs *rdargs;

    if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
    	memset((char *)opts, 0, sizeof(opts));
      	rdargs = ReadArgs(TEMPLATE, opts, NULL);
        if (rdargs == NULL) {
   	    PrintFault(IoErr(), NULL);
	    goto err;
	}

	if (!(BattClockBase = OpenResource(BATTCLOCKNAME))) {
	    aprintf("Can't find battery-backed up clock\n");
	    goto err;
	}
	timermsg=AllocMem(sizeof(struct timerequest),MEMF_PUBLIC|MEMF_CLEAR);
 	if(!timermsg)goto err;

	if (td=(long)OpenDevice( TIMERNAME, 0, timermsg, 0 )) {
	    aprintf("Could not open timer.device\n");
    	    goto err;
	}
	rc=RETURN_OK;

	timermsg->tr_node.io_Message.mn_Node.ln_Type = 0;
	timermsg->tr_node.io_Message.mn_Node.ln_Pri = 0;
	timermsg->tr_node.io_Message.mn_Node.ln_Name = NULL;	
	timermsg->tr_node.io_Message.mn_ReplyPort = NULL;
	timermsg->tr_time.tv_micro = 0;

	if(opts[OPT_LOAD]) {
		timermsg->tr_time.tv_secs = ReadBattClock();
		timermsg->tr_node.io_Command = TR_SETSYSTIME;
		DoIO(timermsg);
	}
	else if(opts[OPT_RESET])ResetBattClock();
	else if(opts[OPT_SAVE]) {
    		timermsg->tr_node.io_Command = TR_GETSYSTIME;
		DoIO(timermsg);
		WriteBattClock(timermsg->tr_time.tv_secs);
	}

err:    if(rdargs)FreeArgs(rdargs);
	if(!td)CloseDevice( timermsg );
	if(timermsg)FreeMem(timermsg,sizeof(struct timerequest));
        CloseLibrary((struct Library *)DOSBase);
	}
	else {OPENFAIL}

    return(rc);
}

void aprintf( fmt, args )
char *fmt, *args;
{
   struct Library *SysBase = (*((struct Library **) 4));
   struct Library *DOSBase;
   if(DOSBase=OpenLibrary(DOSLIB,DOSVER)) {
       VFPrintf( Output(), fmt, (LONG *)&args );
       CloseLibrary(DOSBase);
   }
}
@


1.8
log
@fixed error return
@
text
@d1 1
a1 1
/* $Header: V36:src/workbench/c/setclock/RCS/setclock.c,v 1.7 90/05/29 22:59:06 andy Exp Locker: andy $
d8 1
a8 1
 * $Date: 90/05/29 22:59:06 $
d10 1
a10 1
 * $Id: setclock.c,v 1.7 90/05/29 22:59:06 andy Exp Locker: andy $
d16 1
a16 1
 * $Revision: 1.7 $
d23 3
d76 1
a76 1
    long opts[OPT_COUNT],td=0;
@


1.7
log
@removed incorrect initialization of message
@
text
@d1 1
a1 1
/* $Header: V36:src/workbench/c/setclock/RCS/setclock.c,v 1.6 90/04/12 17:49:08 andy Exp Locker: andy $
d8 1
a8 1
 * $Date: 90/04/12 17:49:08 $
d10 1
a10 1
 * $Id: setclock.c,v 1.6 90/04/12 17:49:08 andy Exp Locker: andy $
d16 1
a16 1
 * $Revision: 1.6 $
d23 3
d73 1
a73 1
    long opts[OPT_COUNT],td;
@


1.6
log
@returns RETURN_OK if no error, rather than a 20
@
text
@d1 1
a1 1
/* $Header: Q80-S:projects/alfred/RCS/alfred.c,v 1.2 89/12/10 19:06:44 rsbx Exp $
d6 1
a6 1
 * $Author: rsbx $
d8 1
a8 1
 * $Date: 89/12/10 19:06:44 $
d10 5
a14 5
 * $Id: alfred.c,v 1.2 89/12/10 19:06:44 rsbx Exp $
 *
 * $Locker:  $
 *
 * $RCSfile: alfred.c,v $
d16 1
a16 1
 * $Revision: 1.2 $
d18 1
a18 1
 * $Source: Q80-S:projects/alfred/RCS/alfred.c,v $
d22 4
a25 1
 * $Log:	alfred.c,v $
a71 1
  /*  struct FileHandle *file; */
d94 1
a94 1
	timermsg->tr_node.io_Message.mn_Node.ln_Type = NT_MESSAGE;
@


1.5
log
@fixed aprint routine
@
text
@d90 2
a101 7
/*
		file=Open("*",MODE_OLDFILE);
		if(file) {
		    Execute("Date",0,file);
		    Close(file);
		}
*/
@


1.4
log
@switched to new Sysbase
@
text
@d129 5
a133 3
   struct Library *DOSBase=OpenLibrary(DOSLIB,DOSVER);
   VFPrintf( Output(), fmt, (LONG *)&args );
   CloseLibrary(DOSBase);
@


1.3
log
@Changed to use ReadArgs, changed error message, discovered
bug in GO, so until it is fixed, optimizer can't be used
@
text
@d62 3
a68 2
    struct DosLibrary *DOSBase;
    struct Resource *BattClockBase;
d128 1
@


1.2
log
@Change in error message.
@
text
@d1 1
a1 1
/* $Header: Q80-S:projects/alfred/RCS/alfred.c,v 1.1 89/10/27 22:40:41 rsbx Exp $
d8 1
a8 1
 * $Date: 89/10/27 22:40:41 $
d10 1
a10 1
 * $Id: alfred.c,v 1.1 89/10/27 22:40:41 rsbx Exp $
d16 1
a16 1
 * $Revision: 1.1 $
d23 3
a30 2


d37 1
a37 1
#include <stdio.h>
d39 1
a39 2
extern APTR OpenResource(char *name);
void usage( void );
d41 3
d45 2
a46 1
APTR BattClockBase;
a48 4
void main(int argc, char **argv)
	{
	int function = 0;
	struct timerequest timermsg;
d50 1
a50 7
	
	if (!(BattClockBase = OpenResource(BATTCLOCKNAME)))
		{
		fprintf(stderr, "It would appear that I am unable to assertain the");
		fprintf(stderr, "whereabouts of the Battery-backed clock resource.\n");
		exit(20);
		}
d52 3
a54 4
	if (argc != 2)
		{
		usage();
		}
d56 1
a56 18
	if (!stricmp("l", argv[1]) || !stricmp("load", argv[1]))
		{
		function = 1;
		}
	else
		{
		if (!stricmp("s", argv[1]) || !stricmp("save", argv[1]))
			{
			function = 2;
			}
		else
			{
			if (!stricmp("r", argv[1]) || !stricmp("reset", argv[1]))
				{
				function = 3;
				}
			}
		}
a57 10
	if (OpenDevice( TIMERNAME, 0, &timermsg, 0 ))
		{
		fprintf(stderr, "OpenDevice on %s failed\n", TIMERNAME);
		exit(100);
		}
	timermsg.tr_node.io_Message.mn_Node.ln_Type = NT_MESSAGE;
	timermsg.tr_node.io_Message.mn_Node.ln_Pri = 0;
	timermsg.tr_node.io_Message.mn_Node.ln_Name = NULL;	
	timermsg.tr_node.io_Message.mn_ReplyPort = NULL;
	timermsg.tr_time.tv_micro = 0;
d59 45
a103 17
	switch(function)
		{
		case 1: /* load */
			timermsg.tr_time.tv_secs = ReadBattClock();
			timermsg.tr_node.io_Command = TR_SETSYSTIME;
			DoIO(&timermsg);
			break;
		case 3: /* reset */
			ResetBattClock();
		case 2: /* save */
			timermsg.tr_node.io_Command = TR_GETSYSTIME;
			DoIO(&timermsg);
			WriteBattClock(timermsg.tr_time.tv_secs);
			break;
		default:
			CloseDevice( &timermsg );
			usage();
d105 1
a105 1
	CloseDevice( &timermsg );
d107 6
d114 6
d121 10
a130 7
void usage( void )
	{
	fprintf(stderr, "Usage: Alfred load|save|reset\n");
	fprintf(stderr, "    load -- loads system date/time from clock chip\n");
	fprintf(stderr, "    save -- saves system date/time to clock chip\n");
	exit(10);
	}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Header$
d6 1
a6 1
 * $Author$
d8 1
a8 1
 * $Date$
d10 16
a25 9
 * $Id$
 *
 * $Locker$
 *
 * $RCSfile$
 *
 * $Revision$
 *
 * $Source$
a26 4
 * $State$
 *
 * $Log$
 *
d53 2
a54 1
		fprintf(stderr, "Battery-backed clock resource not found.\n");
@
