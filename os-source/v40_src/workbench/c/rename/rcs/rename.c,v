head     1.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.11
date     91.05.30.15.53.10;  author vertex;  state Exp;
branches ;
next     1.10;

1.10
date     90.06.09.21.02.26;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.04.18.22.40.48;  author Unknown;  state Exp;
branches ;
next     1.8;

1.8
date     90.04.18.21.44.05;  author Unknown;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.18.18.09.54;  author Unknown;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.17.21.23.15;  author Unknown;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.12.20.17.34;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.05.20.32.00;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.03.16.32.40;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.01.19.40.49;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.01.22.19.50.45;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.01.22.11.09.13;  author andy;  state Exp;
branches ;
next     ;


desc
@Rename command for cdos
@


1.11
log
@Fixed bug with not doing MatchEnd() on most failure conditions.
Also cleaned up exit code as FreeVec()/FreeArgs()/UnLock() take NULL arguments safely
@
text
@; /*
lc -d -j73 -O -o/obj/Rename.o -i/include -v -csf Rename
blink /obj/Rename.o to /bin/Rename sc sd nd
protect /bin/Rename +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker                */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*-----------------------------------------------------------------------*/
/* Command: Rename                                                       */
/* Author:  Gordon Keener                                                */
/* Change History:                                                       */
/*  Date    Person        Action                                         */
/* -------  ------------- -----------------                              */
/* 19MAR89  John Toebes   Initial Creation                               */
/* 25Apr89  Gordon Keener Actual Implementation                          */
/* 20Oct89  Gordon Keener ..and again                                    */
/* 12Dec89  Jay Denebeim  Added wildcards                                */
/* 07Jan90  Gordon Keener (thanks, Jay!) Bug fixes                       */
/* 09Jan90  Gordon Keener Bug fixes, stole more of Jay's code from copy  */
/* Notes:                                                                */
/*-----------------------------------------------------------------------*/

#include "internal/commands.h"
#include "rename_rev.h"

#define MSG_CATCHALL    "Can't rename %s as %s because "
#define MSG_NODIR       "Destination \"%s\" is not a directory.\n"
#define MSG_RENAME      "Renaming %s as %s\n"

#define TEMPLATE    "FROM/A/M,TO=AS/A,QUIET/S" CMDREV
#define OPT_FROM    0
#define OPT_TO      1
#define OPT_QUIET   2
#define OPT_COUNT   3

/*---------------------------------------------------------------------------*/
/* Structure used by the pattern matching routines.                          */
/*---------------------------------------------------------------------------*/
struct uAnchor {
  struct AnchorPath uA_AP;
  BYTE uA_Path[256];
};
#define  MAX_PATH 256

int cmd_rename(void)
{
   struct Library *SysBase = (*((struct Library **) 4));
   struct DosLibrary *DOSBase;
   int               rc;
   int               res2=0;
   int		     loopc;
   long              opts[OPT_COUNT];
   struct RDargs     *rdargs = NULL;
   struct uAnchor    *ua = NULL;
   char              *msgbuf = NULL;
   char              *destpath = NULL;
   char              *srcname = NULL;
   BPTR              destlock = NULL;
   char              **argptr, *cur;
   char              *destname;
   char              fibstr[sizeof(struct FileInfoBlock) + 3];
   struct FileInfoBlock *fib;
   int               msgblock[2], destisdir,sourcelock;

   rc = RETURN_FAIL;

   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
      if( CheckSignal( SIGBREAKF_CTRL_C ) ){
         PrintFault(ERROR_BREAK,NULL);
         goto Done;
      }

      /*-------------------------------------------------------------*/
      /* Allocate memory to use with the pattern match stuff.        */
      /*-------------------------------------------------------------*/
      if ((msgbuf = AllocVec(MSGBUFSIZE, NULL))              == NULL ||
          (ua = AllocVec(sizeof(struct uAnchor),MEMF_CLEAR)) == NULL ||
          (srcname  = AllocVec(MAX_PATH, NULL      ))        == NULL ||
          (destpath = AllocVec(MAX_PATH, MEMF_CLEAR))        == NULL ) {
         PrintFault(ERROR_NO_FREE_STORE, NULL);
         goto Done;
      }

      /*-------------------------------------------------------------*/
      /* It's time to parse our arguments!!!                         */
      /*-------------------------------------------------------------*/
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);

      if (rdargs == NULL) {
         res2 = IoErr();
         goto ErrFail;
      }

      rc = RETURN_OK;

      /*----------------------------------------------------------*/
      /* Now we have to set up the pattern match structure.       */
      /*                                                          */
      /* Tell the pattern routines that we want them to return up */
      /* to 255 chars of the full path to any matches.            */
      /*----------------------------------------------------------*/
      ua->uA_AP.ap_Strlen = 255;
      /*----------------------------------------------------------*/
      /* Set the flag which tells the pattern matcher to decode   */
      /* wild cards.                                              */
      /*----------------------------------------------------------*/
      ua->uA_AP.ap_Flags = APF_DOWILD;
      /*----------------------------------------------------------*/
      /* Tell the matcher to stop if the user presses Ctrl-C.     */
      /*----------------------------------------------------------*/
      ua->uA_AP.ap_BreakBits = SIGBREAKF_CTRL_C;

      /*----------------------------------------------------------*/
      /* We need to check for multiple arguments/wildcards. If we */
      /* get more than one source, we need to require a directory */
      /* for the destination.                                     */
      /*----------------------------------------------------------*/
      argptr = (char **)opts[OPT_FROM];
      if (MatchFirst(*argptr, (struct AnchorPath *)ua)) {
         res2 = IoErr();
         if(res2 == ERROR_OBJECT_NOT_FOUND) {
	    opts[OPT_FROM] = (long)*argptr;
            VPrintf(MSG_CATCHALL, opts);
	 }
         goto ErrFail;
      }

      /* We need to determine up front whether or not our     */
      /* destination is a directory. If it is, We need to go  */
      /* thru the multi/wildcard path, even if there is only  */
      /* one source file. Granted, I could add code to the    */
      /* simple case, but why duplicate the code for so little*/
      /* gain?                                                */
      /* and the answer is, so directories can be renamed ! */
      destisdir = FALSE;
      destlock = Lock((char *)opts[OPT_TO], SHARED_LOCK);
      if (destlock) {
         /* We need this to get a word-aligned fib pointer */
         fib = (struct FileInfoBlock *)(((long)fibstr + 3) & ~3);
         if (Examine(destlock, fib) && (fib->fib_DirEntryType > 0))
	     destisdir = TRUE;
      }
      /* Sanity check. If we're going to use multiargs and/or */
      /* wildcards, we'd better be renaming to a directory.   */
      if ((!destisdir)                                 &&
          (((ua->uA_AP.ap_Flags & APF_ITSWILD) != 0)   ||
           (argptr[1] != NULL)))
      {
         VPrintf(MSG_NODIR,&opts[OPT_TO]);
         goto Done;
      }

     if(destisdir && !argptr[1]) {
         sourcelock=Lock((char *)argptr[0], SHARED_LOCK);
         if(sourcelock) { /* we're just renaming a directory */
	    if( (SameLock(sourcelock,destlock))==LOCK_SAME)destisdir=FALSE;
            UnLock(sourcelock);
	 }
     }
      /* Done with our up-front test */
      MatchEnd((struct AnchorPath *)ua);

      /* We now have two cases to handle. If the destination  */
      /* isn't a directory, we use a simple Rename() call to  */
      /* act just like the 1.3 Rename.                        */
      if (!destisdir) {
	 ParsePattern((char *)*argptr,srcname,MAX_PATH);
/*         if (! Rename((char *)*argptr, (char *)opts[OPT_TO])) { */
         if (! Rename(srcname, (char *)opts[OPT_TO])) {
            /* If rename fails for any reason, no matter */
            /* what, print this stupid message           */
            res2 = IoErr();
            opts[OPT_FROM] = (long)*argptr;
            VPrintf(MSG_CATCHALL, opts);
            SetIoErr(res2);
         }
      }
      else {
         /* Get the full pathname for the destination. Here,  */
         /* we know destlock is OK.                           */
         NameFromLock(destlock, destpath, MAX_PATH);

         destname = &destpath[strlen(destpath)];

         /* If the path is not a device name, it's a directory, */
         /* and we need to add a trailing '/' so later cats     */
         /* work.                                               */
         if (destname[-1] != ':') {
            *destname++ = '/';
         }

         while (cur = *argptr++) {  /* assign */
            if (MatchFirst(cur, (struct AnchorPath *)ua)) {
               res2 = IoErr();
               goto ErrFail;
            }
            /* Loop thru each match for this arg. */
            do {
               /* Build our full pathname for the destination  */
               strcpy(destname, ua->uA_AP.ap_Info.fib_FileName);

               /* Copy out the srcname, because the MatchNext  */
               /* is going to clobber ua                       */
               strcpy(srcname,  ua->uA_AP.ap_Buf);

               /* Go to the next match here. MatchNext() gets  */
               /* confused if you rename its file out from     */
               /* under it.                                    */
               loopc = MatchNext((struct AnchorPath *)ua);

               /* Build msgblock for a VPrintf, for verbosity  */
               /* or for error.                                */
               msgblock[0] = (int)srcname;
               msgblock[1] = (int)destpath;

               /* Information message, unless we are shut up */
               if (! opts[OPT_QUIET])VPrintf(MSG_RENAME, msgblock);

               if (! Rename( (char *)srcname, destpath)) {
                  /* If rename fails for any reason, no matter */
                  /* what, print this message                  */
                  res2 = IoErr();
                  VPrintf(MSG_CATCHALL, msgblock);
                  SetIoErr(res2);
                  goto ErrFail;
               }
            } while (loopc == NULL);
            MatchEnd((struct AnchorPath *)ua);
         }
      }
ErrFail:
   if(res2) {
        MatchEnd((struct AnchorPath *)ua);
/*	GetProgramName( msgbuf, MSGBUFSIZE ); */
   	PrintFault(res2, NULL);
        rc = RETURN_FAIL;
  }
Done:
   if (rdargs)     FreeArgs(rdargs);
   UnLock(destlock);
   FreeVec(ua);
   FreeVec(msgbuf);
   FreeVec(destpath);
   FreeVec(srcname);

   CloseLibrary((struct Library *)DOSBase);
   }
   else {OPENFAIL;}
   return(rc);
}

@


1.10
log
@handles pattern parsing on single file renames fnow
@
text
@d57 1
a57 1
   struct Library *SysBase = (*((struct Library **) 4));   
d130 1
a130 1
      if (MatchFirst(*argptr, &ua->uA_AP)) {
d172 1
a172 1
      MatchEnd(ua);
d204 1
a204 1
            if (MatchFirst(cur, ua)) {
d220 2
a221 2
               loopc = MatchNext(ua);
	
d239 1
a239 1
            MatchEnd(ua);
d244 1
d247 1
a247 1
        rc = RETURN_FAIL; 
d251 5
a255 5
   if (destlock)   UnLock(destlock);
   if (ua)         FreeVec(ua);
   if (msgbuf)     FreeVec(msgbuf);
   if (destpath)   FreeVec(destpath);
   if (srcname)    FreeVec(srcname);
d262 1
a262 1
 
@


1.9
log
@put back name in error message
@
text
@d36 1
a36 1
#define MSG_CATCHALL    "Can't rename %s as %s\n"
d132 4
d178 3
a180 1
         if (! Rename((char *)*argptr, (char *)opts[OPT_TO])) {
d244 3
a246 3
	GetProgramName( msgbuf, MSGBUFSIZE );
   	PrintFault(res2, msgbuf);
        if (rc == RETURN_OK)rc = RETURN_FAIL; 
@


1.8
log
@no longer prints fake error message when things went well
@
text
@d238 2
a239 2
/*	GetProgramName( msgbuf, MSGBUFSIZE ); */
   	PrintFault(res2, NULL);
@


1.7
log
@Removed the rather strange case where it would close Dos Library
after making DOS calls.  Also...
now it doesn't consider NO_MORE_ENTRIES an error.
@
text
@d60 2
a61 1
   int               res2;
d163 1
a163 1
	    if( (res2=SameLock(sourcelock,destlock))==LOCK_SAME)destisdir=FALSE;
d214 2
a215 2
               res2 = MatchNext(ua);

d232 1
a232 1
            } while (res2 == NULL);
a233 1
	    if(res2 == ERROR_NO_MORE_ENTRIES)res2=0;
d238 2
a239 2
	GetProgramName( msgbuf, MSGBUFSIZE );
   	PrintFault(res2, msgbuf);
@


1.6
log
@fixed the rename of a single directory
(it no longer tried to rename it into itself)
@
text
@d34 1
d40 1
a40 1
#define TEMPLATE    "FROM/A/M,TO=AS/A,QUIET/S"
d76 1
a76 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d88 1
a88 2
          (destpath = AllocVec(MAX_PATH, MEMF_CLEAR))        == NULL )
      {
d99 1
a99 2
      if (rdargs == NULL)
      {
d129 1
a129 2
      if (MatchFirst(*argptr, &ua->uA_AP))
      {
d172 2
a173 4
      if (!destisdir)
      {
         if (! Rename((char *)*argptr, (char *)opts[OPT_TO]))
         {
a179 1
            goto ErrFail;
d182 1
a182 2
      else
      {
d192 1
a192 2
         if (destname[-1] != ':')
         {
d196 2
a197 4
         while (cur = *argptr++)   /* assign */
         {
            if (MatchFirst(cur, ua))
            {
d202 1
a202 2
            do
            {
d221 1
a221 4
               if (! opts[OPT_QUIET])
               {
                  VPrintf(MSG_RENAME, msgblock);
               }
d223 1
a223 2
               if (! Rename( (char *)srcname, destpath))
               {
d225 1
a225 1
                  /* what, print this stupid message           */
a231 1

d233 1
a235 10

      CloseLibrary((struct Library *)DOSBase);
   }
   else
   {
      OPENFAIL;
      rc = RETURN_FAIL;
   }
   goto Done;

d237 5
a241 5
   GetProgramName( msgbuf, MSGBUFSIZE );
   PrintFault(res2, msgbuf);
   if (rc == RETURN_OK)
      rc = RETURN_FAIL;

d250 3
d255 1
@


1.5
log
@JT update
@
text
@d56 1
d71 1
a71 1
   int               msgblock[2], destisdir;
d143 1
d146 2
a147 3
      if (destlock)
      {
         /* We need this to get a word-alinged fib pointer */
d150 1
a150 1
            destisdir = TRUE;
a151 1

d162 7
@


1.4
log
@fixed memory header corruption problem when no args used
@
text
@d11 5
a15 5
/* | .	| || the authors:			      BBS: (919) 382-8265    */
/* | o	| ||   Dave Baker      Alan Beale	  Jim Cooper		     */
/* |  . |//    Jay Denebeim    Bruce Drake	  Gordon Keener 	     */
/* ======      John Mainwaring Andy Mercier	  Jack Rouse		     */
/*	       John Toebes     Mary Ellen Toebes  Doug Walker		     */
d19 8
a26 8
/* Command: Rename							 */
/* Author:  Gordon Keener						 */
/* Change History:							 */
/*  Date    Person	  Action					 */
/* -------  ------------- -----------------				 */
/* 19MAR89  John Toebes   Initial Creation				 */
/* 25Apr89  Gordon Keener Actual Implementation 			 */
/* 20Oct89  Gordon Keener ..and again					 */
d29 2
a30 1
/* Notes:								 */
a33 1
#include "rename_rev.h"
d35 3
a37 3
#define MSG_CATCHALL	"Can't rename %s as %s\n"
#define	MSG_NODIR	"Destination \"%s\" is not a directory.\n"
#define	MSG_RENAME	"Renaming %s as %s\n"
d39 1
a39 1
#define TEMPLATE    "FROM/A/M,TO=AS/A,QUIET/S" CMDREV
d41 1
a41 1
#define OPT_TO	    1
d57 4
a60 3
   int		     rc, res2;
   long 	     opts[OPT_COUNT];
   struct RDargs     *rdargs;
d62 6
a67 3
   char              **argptr, *cur, *destpath = NULL, *srcname = NULL;
   char  	     *destname;
   BPTR		     destlock = NULL;
d76 20
d101 2
a102 1
	 PrintFault(IoErr(), NULL);
d104 67
a170 7
      else {
         /*-------------------------------------------------------------*/
         /* Allocate memory to use with the pattern match stuff.        */
         /*-------------------------------------------------------------*/
         if ((ua = AllocVec(sizeof(struct uAnchor),MEMF_CLEAR)) == NULL ||
             (srcname  = AllocVec(MAX_PATH, NULL      ))        == NULL ||
             (destpath = AllocVec(MAX_PATH, MEMF_CLEAR))        == NULL )
d172 7
a178 1
            PrintFault(IoErr(),NULL);
d180 13
a192 1
         else
d194 2
a195 1
            rc = RETURN_OK;
d197 3
a199 24
            /*----------------------------------------------------------*/
            /* Now we have to set up the pattern match structure.       */
            /*                                                          */
            /* Tell the pattern routines that we want them to return up */
            /* to 255 chars of the full path to any matches.            */
            /*----------------------------------------------------------*/
            ua->uA_AP.ap_Strlen = 255;
            /*----------------------------------------------------------*/
            /* Set the flag which tells the pattern matcher to decode   */
            /* wild cards.                                              */
            /*----------------------------------------------------------*/
            ua->uA_AP.ap_Flags = APF_DOWILD;
            /*----------------------------------------------------------*/
            /* Tell the matcher to stop if the user presses Ctrl-C.     */
            /*----------------------------------------------------------*/
            ua->uA_AP.ap_BreakBits = SIGBREAKF_CTRL_C;

            /*----------------------------------------------------------*/
            /* We need to check for multiple arguments/wildcards. If we */
            /* get more than one source, we need to require a directory */
            /* for the destination.                                     */
            /*----------------------------------------------------------*/
            argptr = (char **)opts[OPT_FROM];
            if (MatchFirst(*argptr, &ua->uA_AP))
d201 1
d204 2
a205 10

            /* We need to determine up front whether or not our     */
            /* destination is a directory. If it is, We need to go  */
            /* thru the multi/wildcard path, even if there is only  */
            /* one source file. Granted, I could add code to the    */
            /* simple case, but why duplicate the code for so little*/
            /* gain?                                                */
            destisdir = FALSE;
            destlock = Lock((char *)opts[OPT_TO], SHARED_LOCK);
            if (destlock)
d207 2
a208 6
               /* We need this to get a word-alinged fib pointer */
               fib = (struct FileInfoBlock *)(((long)fibstr + 3) & ~3);
               if (Examine(destlock, fib) && (fib->fib_DirEntryType > 0))
                  destisdir = TRUE;
               
            }
d210 3
a212 9
            /* Sanity check. If we're going to use multiargs and/or */
            /* wildcards, we'd better be renaming to a directory.   */
            if ((!destisdir)                                 &&
                (((ua->uA_AP.ap_Flags & APF_ITSWILD) != 0)   ||
                 (argptr[1] != NULL)))
            {
               VPrintf(MSG_NODIR,&opts[OPT_TO]);
               goto Done;
            }
d214 4
a217 7
            /* We now have two cases to handle. If the destination  */
            /* isn't a directory, we use a simple Rename() call to  */
            /* act just like the 1.3 Rename.                        */
            if (!destisdir)
            {
               /* We have only one file to rename. */
               MatchEnd(ua);
d219 4
a222 11
               if (! Rename((char *)*argptr, (char *)opts[OPT_TO]))
	       {
	          /* If rename fails for any reason, no matter what,*/
	          /* print this stupid message			    */
                  opts[OPT_FROM] = (long)*argptr;
                  VPrintf(MSG_CATCHALL, opts);
	       }
            }
            else
            {
               MatchEnd(ua);
d224 5
a228 3
               /* Get the full pathname for the destination. Here,  */
               /* we know destlock is OK.                           */
               NameFromLock(destlock,destpath,MAX_PATH);
d230 1
a230 6
               destname = &destpath[strlen(destpath)];

               /* If the path is not a device name, it's a directory, */
               /* and we need to add a trailing '/' so later cats     */
               /* work.                                               */
               if (destname[-1] != ':')
d232 6
a237 1
                  *destname++ = '/';
d239 1
a239 13
               
               while (cur = *argptr++)   /* assign */
               {
                  if (MatchFirst(cur, ua))
                  {
                     res2 = IoErr();
                     goto ErrFail;
                  }
                  /* Loop thru each match for this arg. */
                  do
                  {
                     /* Build our full pathname for the destination  */
                     strcpy(destname, ua->uA_AP.ap_Info.fib_FileName);
d241 2
a242 36
                     /* Copy out the srcname, because the MatchNext  */
                     /* is going to clobber ua                       */
                     strcpy(srcname,  ua->uA_AP.ap_Buf);

                     /* Go to the next match here. MatchNext() gets  */
                     /* confused if you rename its file out from     */
                     /* under it.                                    */
                     res2 = MatchNext(ua);

                     /* Build msgblock for a VPrintf, for verbosity  */
                     /* or for error.                                */
                     msgblock[0] = (int)srcname;
                     msgblock[1] = (int)destpath;

                     /* Information message, unless we are shut up */
                     if (! opts[OPT_QUIET])
                     {
                        VPrintf(MSG_RENAME, msgblock);
                     }

                     if (! Rename( (char *)srcname, destpath))
                     {
	                /* If rename fails for any reason, no matter */
                        /* what, print this stupid message           */
	                res2 = IoErr();
	                VPrintf(MSG_CATCHALL, msgblock);
	                SetIoErr(res2);
                        goto ErrFail;
	             }

                  } while (res2 == NULL);

                  MatchEnd(ua);
               }
            }
	 }
d247 3
a249 1
   else { OPENFAIL;
d255 4
a258 2
   PrintFault(res2, NULL);
   if (rc == RETURN_OK) rc = RETURN_FAIL;
d264 1
@


1.3
log
@added missing version number
@
text
@d61 2
a62 1
   char              **argptr, *cur, *destpath = NULL, *srcname, *destname;
d79 1
a79 2
      else
      {
d235 1
a235 3
   else
   {
      OPENFAIL;
@


1.2
log
@version number update
@
text
@d33 1
d39 1
a39 1
#define TEMPLATE    "FROM/A/M,TO=AS/A,QUIET/S"
@


1.1
log
@new version of command
@
text
@@


1.0
log
@added to rcs
@
text
@d11 5
a15 4
/* | .  | || the authors:                             BBS: (919) 481-6436    */
/* | o  | ||   John Toebes     John Mainwaring    Jim Cooper                 */
/* |  . |//    Bruce Drake     Gordon Keener      Dave Baker                 */
/* ======      Doug Walker                                                   */
d19 11
a29 9
/* Command: Rename                                                       */
/* Author:  Gordon Keener                                                */
/* Change History:                                                       */
/*  Date    Person        Action                                         */
/* -------  ------------- -----------------                              */
/* 19MAR89  John Toebes   Initial Creation                               */
/* 25Apr89  Gordon Keener Actual Implementation                          */
/* 20Oct89  Gordon Keener ..and again                                    */
/* Notes:                                                                */
d32 1
a32 1
#include "commands.h"
d35 2
d38 1
a38 1
#define TEMPLATE    "FROM/A,TO=AS/A"
d40 3
a42 2
#define OPT_TO      1
#define OPT_COUNT   2
d44 9
d56 2
a57 2
   int               rc;
   long              opts[OPT_COUNT];
d59 6
d70 1
d72 1
a72 1
      
d79 150
a228 7
         rc = RETURN_OK;
         if (! Rename((char *)opts[0], (char *)opts[1]))
	 {
            rc = IoErr();
	    BPrintf(MSG_CATCHALL, opts);
            SetIoErr(rc);
	    rc = RETURN_FAIL;
a229 2

	 FreeArgs(rdargs);
d237 1
d239 12
@
