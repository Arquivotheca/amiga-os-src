head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.5
date     91.01.02.00.55.52;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.12.09.20.26.38;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.09.06.19.37.40;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.22.22.19.41;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.06.19.46.48;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.01.22.19.54.30;  author andy;  state Exp;
branches ;
next     ;


desc
@ED text editor for 1.4
@


1.5
log
@Corrected enforcer hit on large windows that exceeded MAXLINES in length.
This fix still allows the windows to grow in arbitrary size BUT ed will
only use up to MAXLINES worth of height on them.  For width we are already
limited so this is not a problem.
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 481-6436    */
/* | o  | ||   John Toebes     John Mainwaring    Jim Cooper                 */
/* |  . |//    Bruce Drake     Gordon Keener      Dave Baker                 */
/* ======      Doug Walker                                                   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*----------------------------------------------------------------------*/
/* Command: Ed2.c                                                       */
/* Author:  John A. Toebes, VIII                                        */
/* Change History:                                                      */
/*  Date    Person        Action                                        */
/* -------  ------------- -----------------                             */
/* 23NOV89  John Toebes   Initial Creation                              */
/* 12MAR90  John Toebes   Added arbitrary control keys                  */
/* 01APR90  John Toebes   Added menu support                            */
/* 18APR90  John Toebes   Fixed phantom file is changed bug             */
/* 30MAY90  John Toebes   Changed close window to use push_command      */
/* 29DEC90  John Toebes   Corrected enforcer hit on large windows       */
/* Notes:                                                               */
/*----------------------------------------------------------------------*/
#include "ed.h"
#include "pragmas/intuition_pragmas.h"

/************************************************************************/
/*                                                                      */
/* Screen editor. Immediate command decoding.                           */
/*                                                                      */
/* Certain commands require the current line to be extracted from the   */
/* line store.  Others cause the line to be replaced.                   */
/*                                                                      */
/************************************************************************/

void edit()
{
   int ch;
   long args[8];
   struct MenuItem *item;

   for(;;)
   {
      ch = display(TRUE);               /* Update screen & return char */

      move_cursor(log_x,log_y);

      /* In the SWITCH, break; means data has changed, continue no change  */

      switch(ch)
      {
      case 0x9B:                 /* Escape leadin       */
         ch = parse_ansi(display(TRUE), args);  /* Get character        */
         switch (ch)
         {
            case '@@':  execute_pfkey(PFKEY_RIGHT);      break;                            break;
            case 'A': 
                     if (args[0])
                        execute_pfkey(PFKEY_LEFT);
                     else
                     { do_replace();  cursor_up(); }    break;
            case 'B':  do_replace();  cursor_down();    break;
            case 'D':                 cursor_left();    break;
            case 'C':                 cursor_right();   break;
            case 'T':  execute_pfkey(PFKEY_UP);         break;
            case 'S':  execute_pfkey(PFKEY_DOWN);       break;
            case '~':  if ((args[0] >= 0) && (args[0] < MAX_PFKEY))
                          execute_pfkey(args[0]);
                       else
                          msg(ERROR_INVALID);           break;
            case '|':  switch(args[0])
                       {
                          case 2:    /* Mouse event */
                             if ((args[3] & IEQUALIFIER_LEFTBUTTON) &&
                                 (window != NULL))
                             {
                                do_replace();
                                log_x = (window->MouseX-window->BorderLeft)/
                                         window->RPort->Font->tf_XSize;
                                log_y = (window->MouseY-window->BorderTop)/
                                         window->RPort->Font->tf_YSize;
                                if (log_y > line_num) log_y = line_num;
                             }
                             break;
                          case 10: /* Menu Event */
                             /* args[2] is the menu number */
                             while(menu != NULL && args[2] != MENUNULL)
                             {
                                item = ItemAddress(menu, args[2]);
                                push_command(((char *)(MENU_USERDATA(item))) + 1,
                                             ((char *)(MENU_USERDATA(item)))[0]);
                                args[2] = item->NextSelect;
                             }
                             break;
                          case 11:  /* Close window */
                             /* For now we make it seem as if they typed */
                             /* 'XQ'                                     */
                             push_command("XQ",2);
                             break;
                          case 12: /* Resize Window */
                             do_replace();
                             resize_window();
                             break;
                          default:
                             msg(ERROR_UNKNOWN);
                             break;
                       }
                       break;
            default: 
               msg(ERROR_UNKNOWN);
         }
         continue;
      case C_RUBOUT:
        execute_pfkey(PFKEY_DEL);
        break;
      case C_AREXX:
         continue;
      default:
         if ((ch < ' ') || ((ch >= 0x7F) && (ch < 0xA0)))
         {
            /* Map the alted control keys to the same as the control keys */
            execute_pfkey(PFKEY_CTRL2+(ch & 0x1F));
         }
         else
         {
            do_extract();
            do_ins(ch);
            data_changed = TRUE;
         }
      }
   }
}

/***
*
* Having got a '0x9B' check to see if this is a message from
* the console.device telling us the window has been resized.
* Check the sequence and return TRUE if it's a resize.
*
***/

BOOL window_event(ch)
int ch;
{
   long args[8];

   ch = parse_ansi(ch, args);

   if (ch != '|' ||
       args[0] != 12)
      return(FALSE);

   return(TRUE);
}

/***
*
* Parse an incomming ANSI escape sequence
*
***/
int parse_ansi(ch, args)
int ch;
long args[8];
{
   int arg;

   arg = 0;
   memset(args, 0, 8*sizeof(long));

   for(;;)
   {
      if ((ch < ' ') || (ch > '?'))
         return(ch);

      if (ch >= '0' && ch <= '9')
      {
         args[arg] *= 10;
         args[arg] += ch - '0';
      }
      else
      {
         if (ch == '?')
            args[arg] = -1;
         else if (ch == ' ')
            { if (args[arg] == 0) args[arg] = -2; }
         else if (ch != ';')
            args[arg] = ch;            
         if (arg < 8) arg++;
      }
      ch = vud_rdch(TRUE);
   }
}

/***
*
* Get new window parameters & redraw window
*
***/
void resize_window()
{
   line_max     = VDU_LENGTH() - 2;
   if (line_max >= MAXLINES) line_max = MAXLINES-1;
   screen_width = VDU_WIDTH() - 1;
   if (line_num > line_max)     line_num = line_max;
   if (log_y    > line_max)     log_y    = line_max;
   if (log_x    > screen_width) log_x = screen_width;
   /* Reset display to be from current first line       */
   set_pointers( line_ptr[0] );
   do_replace();
   do_verify();
}

/***
*
* Replace current line in store if it is extracted
*
***/
void do_replace()
{
   if (extracted)
   {
      extracted = FALSE;
      replace_current(log_y);
   }
}

/***
*
* Extract current line unless already
*
***/
void do_extract()
{
   if (extracted != TRUE)
   {
      extracted = TRUE;
      extract_current(log_y);
   }
}

/***
*
* Perform verify
*
***/
void do_verify()
{
   int i;

   VDU_CLEAR();
   phys_x = phys_y = 0;
   VDU_SETCURSOR(0, 0);
   for (i = 0; i <= line_num; i++)
      flag_line(i);
}

void do_invertcase()
{
   int p = log_x + window_base;
   if (p <= current_size)
   {
      int c = current_line[p];
      if ((c >= 'A') && (c <= 'Z')) c += 'a'-'A';
      else if ((c >= 'a') && (c <= 'z')) c = capitalch(c);
      current_line[p] = c;
      vud_wrch(c);
      phys_x++;
   }
   cursor_right();
}

/***
*
* Move cursor to end(s) of line
*
***/
void cursor_eol()
{
   int eol  = current_size+1;
   int base = window_base;

   if (log_x + base == eol)     /* already there       */
   {
      log_x = 0;
      base = 0;
   }
   else
   {
      for (;;)
      {
         /* Move to end of line, and scroll horizontal if required    */
         log_x = eol-base;
         if (log_x < 0)         /* end of line on left of screen       */
         {
            base -= 10;
            continue;
         }
         if (log_x <= screen_width) break;      /* end of line on screen */
         base += 10;    /* end of line on right of screen       */
      }
   }
   set_screen_window(base);
}

/***
*
* Move cursor to top or bottom of page
*
***/
void cursor_eop()
{
   if ((log_x != 0) || (log_y != 0))  /* move to top       */
   {
      log_x = log_y = 0;
      set_screen_window(0);
      return;
   }
   /* Move to end of last line, and scroll horizontal if required       */
   extract_current(line_num);/* Make last line on screen current        */
   extracted = TRUE;
   log_y = line_num;
   log_x = 0;    /* so that cursor_eol will work  */
   cursor_eol(); /* move to end of line, and possibly scroll    */
}

/***
*
* Handle horizontal scrolling.
*   This resets the window base and shifts screen if required.
*   Could be made clever for a memory mapped vud.
*
***/
void set_screen_window(col)
int col;
{
   if (window_base != col)
   {
      window_base = col;
      /* flag for redraw before poss error in replace_current       */
      do_verify();
      if (extracted)    /* put back current line  */
         replace_current(log_y);
   }
}
@


1.4
log
@Corrected problem when a menu message came in after the menus have been
cleared.  It is not clear how this situation can happen exactly, but it
needs to be protected anyway.
@
text
@d25 1
d206 1
@


1.3
log
@Release 2.0 version
@
text
@d90 1
a90 1
                             while(args[2] != MENUNULL)
@


1.2
log
@new version from John
@
text
@d23 2
d28 1
d100 2
a101 5
                             /* 'Q'                                      */
                             cmdline[0] = 2;
                             cmdline[1] = 'X';
                             cmdline[2] = 'Q';
                             execute_extended(0);
d131 1
a131 1
  	    data_changed = TRUE;
@


1.1
log
@*** empty log message ***
@
text
@d22 1
d40 1
d71 41
a111 33
            case '|':
                     if (args[0] == 12)
                     {
                        do_replace();
                        resize_window();
                     }
                     else if (args[0] == 11)  /* Close window */
                     {
                        /* For now we make it seem as if they typed */
                        /* 'Q'                                      */
                        cmdline[0] = 2;
                        cmdline[1] = 'X';
                        cmdline[2] = 'Q';
                        execute_extended(0);
                     }
                     else if (args[0] == 2)   /* Mouse event */
                     {
                        if ((args[3] & IEQUALIFIER_LEFTBUTTON) &&
                           (window != NULL))
                        {
                           do_replace();
                           log_x = 
                               (window->MouseX-window->BorderLeft)/
                                   window->RPort->Font->tf_XSize;
                           log_y = 
                               (window->MouseY-window->BorderTop)/
                                   window->RPort->Font->tf_YSize;
                           if (log_y > line_num) log_y = line_num;
                        }
                     }
                     else
                        msg(ERROR_LINESTR);
                     break;
d131 1
a133 1
      data_changed = TRUE;
@


1.0
log
@added to rcs
@
text
@d14 10
a23 9
/*-----------------------------------------------------------------------*/
/* Command: Ed2.c                                                        */
/* Author:  John A. Toebes, VIII                                         */
/* Change History:                                                       */
/*  Date    Person        Action                                         */
/* -------  ------------- -----------------                              */
/* 23NOV89  John Toebes   Initial Creation                               */
/* Notes:                                                                */
/*-----------------------------------------------------------------------*/
d54 1
a54 3
            case '@@':  do_extract();  
                       log_x = 0;     window_base = 0;
                       cursor_eol();                    break;                            break;
d57 3
a59 6
                     { 
                       do_extract();
                       log_x = 0;
                       set_screen_window(0);            break;
                     }
                       do_replace();  cursor_up();      break;
d63 2
a64 2
            case 'T':  do_replace();  do_prevline(12);  break;
            case 'S':  do_replace();  do_nextline(12);  break;
d86 2
a87 1
                        if (window != NULL)
d106 4
a109 2
      case C_TAB:     /* cursor to next tab position   */
         do_tab();
a110 65
      case C_EOL:     /* cursor to end of line */
         do_extract();
         cursor_eol();
         continue;
      case C_EOP:     /* cursor to end of page */
         do_replace();
         cursor_eop();
         continue;
      case C_NEXTWORD: /* cursor to next word  */
         do_extract();
         cursor_nxw();
         continue;
      case C_PREVWORD: /* cursor to previous word      */
         do_extract();
         cursor_prw();
         continue;
      case C_CR:       /* return       */
         do_extract();
         do_cr();
         break;
      case C_OPEN:     /* Open next line (like CR but does not split)  */
         do_replace();
         insert_line(log_y);
         break;
      case C_DEOL:    /* delete to end of line */
         do_extract();
         do_deol();
         break;
      case C_DEL:      /* delete line  */
         do_replace();
         delete_line(log_y);
         break;
      case '\b':       /* delete to left of cursor     */
         if (!cursor_left()) continue;  /* ignore at start of line */
         move_cursor(log_x,log_y); /* drop through after setting cursor correct  */
      case C_RUBOUT:   /* delete at cursor     */
         do_extract();
         do_delch();
         break;
      case C_DELW:    /* delete word   */
         do_extract();
         do_delw();
         break;
      case C_VERIFY:    /* Redisplay text      */
         do_replace();
         do_verify();
         continue;
      case C_PREVP:     /* Previous page       */
         do_replace();
         do_prevline(12);       /* Move 12 lines      */
         continue;
      case C_NEXTP:     /* Next page   */
         do_replace();
         do_nextline(12);       /* Move 12 lines      */
         continue;
      case C_ESC:       /* Handle extended command     */
         do_extended();
         continue;
      case C_EXECUTE:   /* Perform current extended command line       */
         execute_extended(0);
         continue;
      case 0x06:        /* Ctrl/f - invert case        */
         do_extract();
         do_invertcase();
         break;
d113 4
a116 1
            msg(ERROR_UNKNOWN);
@
