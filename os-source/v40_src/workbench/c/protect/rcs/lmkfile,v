head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.6
date     93.03.12.16.58.01;  author vertex;  state Exp;
branches ;
next     1.5;

1.5
date     92.12.03.12.06.02;  author vertex;  state Exp;
branches ;
next     1.4;

1.4
date     91.01.10.14.48.55;  author eric;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.17.16.37.18;  author jesup;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.03.18.49.38;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.18.17.36.42;  author Unknown;  state Exp;
branches ;
next     1.0;

1.0
date     90.03.01.19.38.22;  author andy;  state Exp;
branches ;
next     ;


desc
@native makefile
@


1.6
log
@*** empty log message ***
@
text
@
MODNAME	          = protect
VERSION		  = 40

REMOTE		  = V$(VERSION):src/workbench/c/protect

LD_FILE	          = $(MODNAME).ld
LD_STRIP          = $(MODNAME).ld.strip

C_COMPILER        = LC
C_COMPILER_OPTS   = -b0 -ms -v -rr -O -cfistqmcwu -d1

ASSEMBLER         = HX68 -a
ASSEMBLER_OPTS    = -csy -i include: -o

LINKER            = Blink
LINKER_OPTS	  = ADDSYM SMALLCODE SMALLDATA MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
LINKER_OPTS_STRIP = ND

C_SOURCES   = protect.c
ASM_SOURCES =
OBJECTS     = protect.o
STARTUP     =
LIBS        = LIB:debug.lib LIB:amiga.lib LIB:lcr.lib


##############################################################################
# Build the stripped load file...
#
$(LD_STRIP):	$(LD_FILE)
		$(LINKER) FROM $(LD_FILE) TO $(LD_STRIP) $(LINKER_OPTS_STRIP)


##############################################################################
# Build the load file...
#
$(LD_FILE):	$(OBJECTS) $(LIBS)
		$(LINKER) FROM $(STARTUP) $(OBJECTS) TO $(LD_FILE) LIB $(LIBS) $(LINKER_OPTS)


##############################################################################
# Default rules...
#
.c.o:
	$(C_COMPILER) $(C_COMPILER_OPTS) $*.c

.asm.o:
	$(ASSEMBLER) $*.asm $(ASSEMBLER_OPTS) $*.o


##############################################################################
# All dependencies...
#
protect.o: protect.c $(MODNAME)_rev.rev


##############################################################################
# Bump the version...
#
version:
	@@BumpRev $(VERSION) $(MODNAME)_rev


##############################################################################
# Delete all object files
#
clean:
	@@delete \#?.o
	@@delete $(LD_FILE) $(LD_STRIP) $(MODNAME).map


##############################################################################
# Release the current build to the server...
#
internal:
	@@Delete $(REMOTE)/((\#?.(c|h|asm|i|ld|rev|doc|library))|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc))|lmkfile|$(LD_STRIP)) +r quiet
	@@copy \#?.(strip|ld|doc|library) \#?_rev.\#? $(REMOTE)
@


1.5
log
@Redid using standard make file
@
text
@d3 1
a3 1
VERSION		  = 39
@


1.4
log
@Added VERSION, changed V36 references to V
@
text
@a0 20
SUBSYSNAME = protect
VERSION = 37
HDRS=
AHDRS=
REVH=	$(SUBSYSNAME)_rev.h
MYLIBS= V:lib/lattice/lcr.lib

LOCAL = SYS:devel/$(SUBSYSNAME)
REMOTE = V:src/workbench/c/$(SUBSYSNAME)

LC = lc
ASM = asm

RCSFILES= lmkfile $(SUBSYSNAME).c

LFLAGS= ND BATCH SMALLCODE SMALLDATA

AFLAGS = -iV:include

LCFLAGS = -cimsf -d -O -rr -v -j73 -iV:include -iV:inc.lattice
d2 2
a3 2
$(SUBSYSNAME).ld:	$(SUBSYSNAME).o
	blink FROM $(SUBSYSNAME).o TO $(SUBSYSNAME).ld $(LFLAGS) LIB $(MYLIBS)
d5 39
d45 1
a45 1
	$(LC) $(LCFLAGS) $*.c
d48 1
a48 1
	$(ASM) $(AFLAGS) $*.asm
d51 4
a54 1
$(SUBSYSNAME).o: $(SUBSYSNAME).c $(REVH) $(HDRS)
a55 7
release:
	copy $(REMOTE)/$(SUBSYSNAME)_rev.rev $(SUBSYSNAME)_rev.rev
	bumprev $(VERSION) $(SUBSYSNAME)_rev
	lmk
	copy (\#?.ld|\#?rev.\#?) $(REMOTE)
	delete $(SUBSYSNAME)_rev.rev
	rlog -L -R $(RCSFILES)
d57 3
d61 1
a61 1
	@@bumprev $(VERSION) $(SUBSYSNAME)_rev
a62 2
internal:
	@@copy (\#?.c|\#?.asm|\#?.h|\#?.i|makefile|lmkfile|\#?.ld|\#?.rev) $(REMOTE)
d64 3
d68 11
a78 1
	@@delete (\#?.o \#?.ld)
@


1.3
log
@Fixed .rev stuff, added (), etc
@
text
@d1 3
a3 1
HDRS= protect_rev.h
d5 2
a6 2
REVH= protect_rev.h
MYLIBS= V36:lib/lattice/lcr.lib
d8 2
a9 2
LOCAL = SYS:devel/protect
REMOTE = V36:src/workbench/c/protect
d14 2
d18 1
a18 3
AFLAGS = -iINCLUDE:

LCFLAGS = -cimsf -d -O -rr -v -j73 -iV36:include -iV36:inc.lattice
d20 1
a20 2
protect.ld:	protect.o
	blink FROM protect.O TO protect.ld $(LFLAGS) LIB $(MYLIBS)
d22 2
d32 1
a32 4
protect.o:	protect.c $(HDRS) $(REVH)

version:
	@@bumprev 36 protect_rev
d35 2
a36 2
	copy $(REMOTE)/protect_rev.rev protect_rev.rev
	bumprev 36 protect_rev
d38 6
a43 2
	copy (\#?.ld|\#?_rev.\#?) $(REMOTE)
	delete protect_rev.rev
d46 1
a46 1
	@@copy (\#?.c|\#?.asm|\#?.h|\#?.i|makefile|lmkfile|\#?.ld) $(REMOTE)
d49 1
a49 1
	@@delete (\#?.o|\#?.ld)
@


1.2
log
@fixed autobumprev
@
text
@d3 2
a4 1
MYLIBS= LIB:lcr.lib
d29 1
a29 1
protect.o:	protect.c $(HDRS)
d35 5
a39 2
	@@copy (\#?.ld|\#?_rev.\#?) $(REMOTE)
	@@bumprev 36 protect_rev
d42 1
a42 1
	@@copy (\#?.c|\#?.asm|\#?.h|\#?.i|makefile|lmkfile|\#?.ld|\#?.rev) $(REMOTE)
d45 1
a45 1
	@@delete \#?.o|\#?.ld
@


1.1
log
@added release function, needed parens
@
text
@d19 1
a19 1
	@@bumprev 36 protect_rev
d30 3
d35 1
@


1.0
log
@added to rcs
@
text
@d1 1
a1 1
HDRS=
d19 1
d30 2
a31 5
version:
	@@bumprev 36 protect_rev

local:
	@@copy $(REMOTE)/\#?.c|\#?.asm|\#?.h|\#?.i|makefile|lmkfile|\#?.ld $(LOCAL)
d34 1
a34 1
	@@copy \#?.c|\#?.asm|\#?.h|\#?.i|makefile|lmkfile|\#?.ld $(REMOTE)
@
