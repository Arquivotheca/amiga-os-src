head     39.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.5
date     92.08.10.16.38.12;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.07.29.14.37.17;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.07.16.12.58;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.01.18.53.27;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.23.15.01.03;  author vertex;  state Exp;
branches ;
next     ;


desc
@Reset the WB screen to allow preferences changes
@


39.5
log
@Changes to support the new "split the seglist in half" trick.
@
text
@
/* includes */
#include <exec/types.h>
#include <intuition/intuitionbase.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <dos.h>

/* prototypes */
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>

/* direct ROM interface */
#include <pragmas/dos_pragmas.h>
#include <pragmas/exec_pragmas.h>
#include <pragmas/intuition_pragmas.h>

/* application includes */
#include "resetwb.h"
#include "texttable.h"
#include "iprefs.h"


/*****************************************************************************/


extern struct IntuitionBase *IntuitionBase;
extern struct Library       *SysBase;
extern struct Library	    *DOSBase;
extern struct Task          *parentTask;
extern char far              WBName[];


/*****************************************************************************/


#define POLL_NUMTRIES	(3)

/* global counts retries due to snooping */
LONG trycount;


/*****************************************************************************/


/* return screen pointer of Workbench if the screen is currently opened */
static struct Screen *FindWorkbench(VOID)
{
struct Screen        *wb = NULL;
struct PubScreenNode *node;

    if (node = (struct PubScreenNode *)FindName(LockPubScreenList(),WBName))
        wb = node->psn_Screen;

    UnlockPubScreenList();

    return(wb);
}


/*****************************************************************************/


struct Screen *LockWB(VOID)
{
ULONG          ilock;
struct Screen *wb;

    ilock = LockIBase(0);

    if (wb = FindWorkbench())
        wb = LockPubScreen(WBName);

    UnlockIBase(ilock);

    return(wb);
}


/*****************************************************************************/


BOOL CouldCloseWB(struct Window *refwindow)
{
ULONG          lock;
struct Screen *sp;
struct Window *wp;
BOOL           result = TRUE;

    geta4();     /* since we're called from CloseWorkBench() */

    lock = LockIBase(0);

    if (sp = FindWorkbench())
    {
	/* look for windows which are not either:
	 * - WBENCHWINDOWS
	 * - refwindow
	 */
	for (wp = sp->FirstWindow; wp; wp = wp->NextWindow)
	{
	    if ( (!(wp->Flags & WBENCHWINDOW)) && (wp != refwindow))
	    {
		result = FALSE;
		break;
	    }
	}
    }

    UnlockIBase(lock);
    return(result);
}


/*****************************************************************************/


/* pulls easy-request but keeps checking for
 * conditions where it thinks it might be able
 * to resetwb successfully.  When that happens,
 * it will pull down the autorequest and return TRUE,
 * just as it will if the user selects RETRY in the
 * requester.
 */
static LONG RequestPoll(VOID)
{
struct Window    *wp;
LONG 	          result;
struct EasyStruct ez;

    OpenCat();

    ez.es_StructSize    = sizeof(struct EasyStruct);
    ez.es_Flags         = 0;
    ez.es_Title         = NULL;
    ez.es_TextFormat    = GetString(MSG_IP_CLOSEWINDOW_PROMPT);
    ez.es_GadgetFormat  = GetString(MSG_IP_CLOSEWINDOW_GADGETS);

    SignalParent();

    wp = BuildEasyRequestArgs(NULL,&ez,0,NULL);

    while (TRUE)
    {
         Delay(5);

         result = SysReqHandler(wp,NULL,FALSE);

         /* return if Retry selected */
         if (result >= 0)
            break;

         if ((trycount < POLL_NUMTRIES) && CouldCloseWB(wp))
         {
             trycount++;
             result = 1;         /* pretend that Retry was selected */
             break;
         }
    }

    FreeSysRequest(wp);

    CloseCat();

    return(result);
}


/*****************************************************************************/


BOOL ResetWB(VOID)
{
BOOL result = FALSE;

    trycount = 0;

    do
    {
	if (CloseWorkBench())
	{
	    OpenWorkBench();
	    result = TRUE;
	    break;
	}
	else if (FindWorkbench() == NULL)
	{
	    /* don't open WB if it's not already open */
	    result = TRUE;
	    break;
	}
    } while (RequestPoll());

    return(result);
}
@


39.4
log
@Added geta4() to CouldCloseWB()
@
text
@d32 1
d48 1
a48 1
struct Screen *FindWorkbench(VOID)
d53 1
a53 1
    if (node = (struct PubScreenNode *)FindName(LockPubScreenList(),"Workbench"))
d73 1
a73 1
        wb = LockPubScreen("Workbench");
d126 1
a126 1
LONG RequestPoll(VOID)
@


39.3
log
@CHanged a var name
@
text
@d7 1
d89 2
@


39.2
log
@Added LockWB() code
Made ResetWB() return a boolean
@
text
@d48 1
a48 1
struct Screen        *wp = NULL;
d52 1
a52 1
        wp = node->psn_Screen;
d56 1
a56 1
    return(wp);
@


39.1
log
@Initial V39 RCS checkin
@
text
@a30 4
extern BOOL                  gotSMP;
extern BOOL                  gotOP;
extern BOOL                  gotFP;
extern BOOL                  gotPP;
d39 1
a39 1
LONG trycount = 0;
d48 1
a48 1
struct Screen        *sp = NULL;
d52 1
a52 1
        sp = node->psn_Screen;
d56 20
a75 1
    return(sp);
@
