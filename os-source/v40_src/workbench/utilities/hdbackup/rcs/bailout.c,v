head     37.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.1
date     91.01.30.14.56.59;  author eric;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.30.14.56.56;  author eric;  state Exp;
branches ;
next     ;


desc
@@


37.1
log
@New from Don Meyer 30 Jan 1991
@
text
@/************************************************************************
 *									*
 *	Copyright (c) 1989 Enhanced Software Technologies, Inc.		*
 *			   All Rights Reserved				*
 *									*
 *	This software and/or documentation is protected by U.S.		*
 *	Copyright Law (Title 17 United States Code).  Unauthorized	*
 *	reproduction and/or sales may result in imprisonment of up	*
 *	to 1 year and fines of up to $10,000 (17 USC 506).		*
 *	Copyright infringers may also be subject to civil liability.	*
 *									*
 ************************************************************************
 */

#include "standard.h"

#include <workbench/startup.h>

#include "bailout.h"
#include "brushell.h"
#include "mainwin.h"
#include "dbug.h"



extern struct WBStartup *WBenchMsg;



static int myreq( char *string, char *buttons )
{
	static struct EasyStruct es = {
		sizeof( struct EasyStruct ),
		0,
		"HDBackup",
		NULL,
		NULL
	};

	es.es_TextFormat = string;
	es.es_GadgetFormat = buttons;
	
	return(  (int)EasyRequest( mainwin, &es, NULL, 0 )  );
}



/*
 * display the string and either quit no matter what (mode==1) or
 * let the user decide if a retry is in order (mode==0)
 */

static int inner_bailout( char *string, ERRORCODE code, int mode )
{
    char *buttontext;
    int rc;
    char buf[100];

    
    DBUG_ENTER ("inner_bailout");

    /* decide wether to display try again in one of the gadgets */
    if( mode )
	{
		buttontext = "Leave Program";
    }
	else
	{
		buttontext = "Try Again|Leave Program";
    }
    
    if( IntuitionBase )
	{
		/* 
		 * if intuition has been opened, put up an autorequester
		 * with our error message
		 */
		sprintf (buf, "%s   [ %04x ]", string, code);

		/* and post it */
		rc = myreq( buf, buttontext );
    }
	else
	{
		/* 
		 * Unable to use intuition, see if we were started from
		 * CLI and can print the error that way.  If not, then we
		 * have no way to talk to the user.  Just cleanup and exit.
		 */
		if( WBenchMsg == NULL )
		{
		    puts (string);
		}
		
		rc = 0;			/* don't ask, just exit the program */
    }

    /* 
     * if this is a query bailout and the user said try again, do not
     * exit, just return to caller
     */
    if(  ( mode == 0 ) && rc )
	{
		DBUG_RETURN( 0 );
    }
    
    /* Execute the programs standard cleanup routine and exit */
    cleanup();
    
    exit( RETURN_FAIL );

    DBUG_RETURN( 0 );
}



/* This will display the string and exit */

void bailout( char *string, ERRORCODE code )
{
    DBUG_ENTER ("bailout");
    inner_bailout (string, code, 1);
    DBUG_VOID_RETURN;
}



/*
 * This one will display the string and return to the calling function
 * if the user says too (assuming intuition is open)
 *
 * Usage would be as thus:
 *
 *		while(  ! (someBase = OpenLibrary("some.library",0L))  )
 *		{
 *			querybailout("Unable to open some Library");
 *		}
 *
 */

void querybailout( char *string, ERRORCODE code )
{
    DBUG_ENTER ("querybailout");
    inner_bailout (string, code, 0);
    DBUG_VOID_RETURN;
}



#if 0
void _abort ()
{
    DBUG_ENTER ("_abort");
    bailout ("Control 'C' termination by user.", ERC_NONE | ERR10);
    DBUG_VOID_RETURN;
}
#endif



int mention_error( char *string, ERRORCODE code )
{
    char buf[256];


    DBUG_ENTER ("mention_error");

    sprintf( buf, "%s   [ %04x ]", string, code);

    DBUG_RETURN(  myreq( buf, "OK" )  );
}



int retry_error( char *string, ERRORCODE code )
{
    char buf[256];


    DBUG_ENTER ("retry_error");
    sprintf( buf, "%s   [ %04x ]", string, code );
    DBUG_RETURN (  myreq( buf, "Try Again|Proceed Anyway" )  );
}



int ask_question( char *string )
{
    DBUG_ENTER ("ask_question");
    DBUG_RETURN(  myreq( string, "Yes|No" )  );
}



void tell_user( char *string )
{
    DBUG_ENTER ("tell_user");
    (void)myreq( string, "OK" );
    DBUG_VOID_RETURN;
}
@


37.0
log
@added to rcs
@
text
@a14 5
/*
 *  My standard error handling routines.
 *  May put these in my library at some point.
 */

a23 1
static int inner_bailout PROTO((char *, ERRORCODE, int));
d25 1
a27 8
#define TITLE		0
#define PROMPT		1
#define TRY_AGAIN	2
#define LEAVE_PGM	3
#define OKAY		4
#define YES		5
#define NO		6
#define PROCEED		7
a28 10
struct IntuiText bailtext[] = {
    { 2, 0, JAM1, 5, 10, NULL, (UBYTE *) "BRUshell Error", &bailtext[1] },
    { 2, 0, JAM1, 15, 5, NULL, RTB, NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "Try Again", NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "Leave Program", NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "Okay", NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "Yes", NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "No", NULL },
    { 2, 0, JAM1, 5, 3, NULL, (UBYTE *) "Proceed Anyway", NULL }
};
d30 1
a30 11
/*
 * This is my normal very simple requester routine.  Size is
 * calculated based upon the width of the bodytext, with a minimum of
 * 300 and a maximum of 640.  This should be used mainly for simple error
 * reporting and user information.
 */

int MyRequest (bodytxt, postxt, negtxt)
struct IntuiText *bodytxt;
struct IntuiText *postxt;
struct IntuiText *negtxt;
d32 7
a38 2
    LONG width;
    int rtnval;
d40 4
a43 7
    DBUG_ENTER ("MyRequest");
    width = IntuiTextLength (bodytxt) + 50;
    width = MAX (width, 300);
    width = MIN (width, 640);
    rtnval = AutoRequest (mainwin, bodytxt, postxt, negtxt, NULL, NULL,
			  width, 60L);
    DBUG_RETURN (rtnval);
d46 2
d53 1
a53 4
static int inner_bailout (string, code, mode)
char *string;
ERRORCODE code;
int mode;
d55 1
a55 1
    int truetext;
d59 1
d61 1
d63 3
a65 4
    if (mode) {
	truetext = LEAVE_PGM;
    } else {
	truetext = TRY_AGAIN;
d67 3
a69 20
    if (IntuitionBase) {
	/* 
	 * if intuition has been opened, put up an autorequester
	 * with our error message
	 */
	sprintf (buf, "%s   [ %04x ]", string, code);
	bailtext[PROMPT].IText = (UBYTE *) buf;
	/* and post it */
	rc = MyRequest (&bailtext[PROMPT], &bailtext[truetext],
			&bailtext[LEAVE_PGM]);
    } else {
	/* 
	 * Unable to use intuition, see if we were started from
	 * CLI and can print the error that way.  If not, then we
	 * have no way to talk to the user.  Just cleanup and exit.
	 */
	if (WBenchMsg == NULL) {
	    puts (string);
	}
	rc = 0;			/* don't ask, just exit the program */
d71 27
d102 3
a104 2
    if ((mode == 0) && rc) {
	DBUG_RETURN (0);
d106 1
d108 5
a112 3
    cleanup ();
    exit (30);
    DBUG_RETURN (0);
d115 2
d119 1
a119 3
void bailout (string, code)
char *string;
ERRORCODE code;
d126 2
d141 1
a141 3
void querybailout (string, code)
char *string;
ERRORCODE code;
d149 2
d157 1
a158 1
/* Re-entrant! */
d160 2
a161 3
int mention_error (string, code)
char *string;
ERRORCODE code;
d163 1
a163 3
    char buf[100];
    struct IntuiText pt;
    int rtnval;
d165 1
d167 4
a170 11
    pt.FrontPen = AUTOFRONTPEN;
    pt.BackPen = AUTOBACKPEN;
    pt.DrawMode = AUTODRAWMODE;
    pt.LeftEdge = AUTOLEFTEDGE;
    pt.TopEdge = AUTOTOPEDGE;
    pt.ITextFont = AUTOITEXTFONT;
    pt.IText = (UBYTE *) buf;
    pt.NextText = NULL;
    sprintf (buf, "%s   [ %04x ]", string, code);
    rtnval = MyRequest (&pt, &bailtext[OKAY], &bailtext[OKAY]);
    DBUG_RETURN (rtnval);
a172 1
/* Re-entrant! */
d174 2
a175 3
int retry_error (string, code)
char *string;
ERRORCODE code;
d177 1
a177 3
    char buf[100];
    struct IntuiText pt;
    int rtnval;
d179 1
d181 2
a182 11
    pt.FrontPen = AUTOFRONTPEN;
    pt.BackPen = AUTOBACKPEN;
    pt.DrawMode = AUTODRAWMODE;
    pt.LeftEdge = AUTOLEFTEDGE;
    pt.TopEdge = AUTOTOPEDGE;
    pt.ITextFont = AUTOITEXTFONT;
    pt.IText = (UBYTE *) buf;
    pt.NextText = NULL;
    sprintf (buf, "%s   [ %04x ]", string, code);
    rtnval = MyRequest (&pt, &bailtext[TRY_AGAIN], &bailtext[PROCEED]);
    DBUG_RETURN (rtnval);
a184 1
/* Re-entrant! */
d186 2
a187 2
int ask_question (string)
char *string;
d189 3
a191 3
    char buf[100];
    struct IntuiText pt;
    int rtnval;
d193 7
a199 12
    DBUG_ENTER ("ask_question");
    pt.FrontPen = AUTOFRONTPEN;
    pt.BackPen = AUTOBACKPEN;
    pt.DrawMode = AUTODRAWMODE;
    pt.LeftEdge = AUTOLEFTEDGE;
    pt.TopEdge = AUTOTOPEDGE;
    pt.ITextFont = AUTOITEXTFONT;
    pt.IText = (UBYTE *) buf;
    pt.NextText = NULL;
    sprintf (buf, "%s", string);
    rtnval = MyRequest (&pt, &bailtext[YES], &bailtext[NO]);
    DBUG_RETURN (rtnval);
@
