head     38.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.3
date     93.08.13.12.09.29;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     92.06.01.12.04.55;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.02.16.36.21;  author vertex;  state Exp;
branches ;
next     ;


desc
@Sketchpad tools for IconEdit
@


38.3
log
@*** empty log message ***
@
text
@
/* includes */
#include <exec/types.h>
#include <intuition/intuition.h>
#include <libraries/gadtools.h>

/* prototypes */
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/gadtools_protos.h>

/* direct ROM interface */
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/gadtools_pragmas.h>

/* application includes */
#include "sp_tools.h"
#include "iemain.h"


/*****************************************************************************/


extern struct Library *IntuitionBase;
extern struct Library *GfxBase;
extern struct Library *GadToolsBase;


/*****************************************************************************/


USHORT __chip GadRend1[] =
{				/* Fast Draw */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC300, 0x0300, 0xC030, 0x0300,
    0xC000, 0x0300, 0xC003, 0x0300, 0xC000, 0x0300, 0xC000, 0xC300,
    0xC000, 0x0300, 0xC000, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC300, 0x0300, 0xC030, 0x0300,
    0xC000, 0x0300, 0xC003, 0x0300, 0xC000, 0x0300, 0xC000, 0xC300,
    0xC000, 0x0300, 0xC000, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend2[] =
{				/* Circle */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC38F, 0xC300,
    0xC60F, 0xE300, 0xCC0F, 0xF300, 0xCC0F, 0xF300, 0xC60F, 0xE300,
    0xC38F, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC38F, 0xC300,
    0xC60F, 0xE300, 0xCC0F, 0xF300, 0xCC0F, 0xF300, 0xC60F, 0xE300,
    0xC38F, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend3[] =
{				/* Line */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xCC00, 0x0300, 0xC300, 0x0300,
    0xC0C0, 0x0300, 0xC030, 0x0300, 0xC00C, 0x0300, 0xC003, 0x0300,
    0xC000, 0xC300, 0xC000, 0x3300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xCC00, 0x0300, 0xC300, 0x0300,
    0xC0C0, 0x0300, 0xC030, 0x0300, 0xC00C, 0x0300, 0xC003, 0x0300,
    0xC000, 0xC300, 0xC000, 0x3300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend4[] =
{				/* Cut */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC700, 0x0300, 0xD8C0, 0x0300,
    0xD8C0, 0x7B00, 0xC773, 0xC300, 0xC03E, 0x0300, 0xC773, 0xC300,
    0xD8C0, 0x7B00, 0xD8C0, 0x0300, 0xC700, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC700, 0x0300, 0xD8C0, 0x0300,
    0xD8C0, 0x7B00, 0xC773, 0xC300, 0xC03E, 0x0300, 0xC773, 0xC300,
    0xD8C0, 0x7B00, 0xD8C0, 0x0300, 0xC700, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend5[] =
{				/* Slow draw */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC3C0, 0x0300, 0xCC30, 0x0300,
    0xD818, 0x0300, 0xC018, 0x0300, 0xC018, 0x0300, 0xC018, 0x1B00,
    0xC00C, 0x3300, 0xC007, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC3C0, 0x0300, 0xCC30, 0x0300,
    0xD818, 0x0300, 0xC018, 0x0300, 0xC018, 0x0300, 0xC018, 0x1B00,
    0xC00C, 0x3300, 0xC007, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend6[] =
{				/* Rectangle */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC60F, 0xE300,
    0xC60F, 0xE300, 0xC60F, 0xE300, 0xC60F, 0xE300, 0xC60F, 0xE300,
    0xC60F, 0xE300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC60F, 0xE300,
    0xC60F, 0xE300, 0xC60F, 0xE300, 0xC60F, 0xE300, 0xC60F, 0xE300,
    0xC60F, 0xE300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend7[] =
{				/* Fill Bucket */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC06E, 0x0300,
    0xC18F, 0x8300, 0xC60F, 0xE300, 0xC18F, 0x8300, 0xC06E, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC06E, 0x0300,
    0xC18F, 0x8300, 0xC60F, 0xE300, 0xC18F, 0x8300, 0xC06E, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip GadRend8[] =
{				/* Text */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC01C, 0x0300, 0xC03E, 0x0300,
    0xC03E, 0x0300, 0xC067, 0x0300, 0xC067, 0x0300, 0xC07F, 0x0300,
    0xC0C3, 0x8300, 0xC0C3, 0x8300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC01C, 0x0300, 0xC03E, 0x0300,
    0xC03E, 0x0300, 0xC067, 0x0300, 0xC067, 0x0300, 0xC07F, 0x0300,
    0xC0C3, 0x8300, 0xC0C3, 0x8300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};


/*****************************************************************************/


USHORT __chip SelRend1[] =
{				/* Fast Draw */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC300, 0x0300, 0xC030, 0x0300,
    0xC000, 0x0300, 0xC003, 0x0300, 0xC000, 0x0300, 0xC000, 0xC300,
    0xC000, 0x0300, 0xC000, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC300, 0x0300, 0xC030, 0x0300,
    0xC000, 0x0300, 0xC003, 0x0300, 0xC000, 0x0300, 0xC000, 0xC300,
    0xC000, 0x0300, 0xC000, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend2[] =
{				/* Circle Unfilled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC381, 0xC300,
    0xC600, 0x6300, 0xCC00, 0x3300, 0xCC00, 0x3300, 0xC600, 0x6300,
    0xC381, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC381, 0xC300,
    0xC600, 0x6300, 0xCC00, 0x3300, 0xCC00, 0x3300, 0xC600, 0x6300,
    0xC381, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend3[] =
{				/* Line */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xCC00, 0x0300, 0xC300, 0x0300,
    0xC0C0, 0x0300, 0xC030, 0x0300, 0xC00C, 0x0300, 0xC003, 0x0300,
    0xC000, 0xC300, 0xC000, 0x3300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xCC00, 0x0300, 0xC300, 0x0300,
    0xC0C0, 0x0300, 0xC030, 0x0300, 0xC00C, 0x0300, 0xC003, 0x0300,
    0xC000, 0xC300, 0xC000, 0x3300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend4[] =
{				/* Cut */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC700, 0x0300, 0xD8C0, 0x0300,
    0xD8C0, 0x7B00, 0xC773, 0xC300, 0xC03E, 0x0300, 0xC773, 0xC300,
    0xD8C0, 0x7B00, 0xD8C0, 0x0300, 0xC700, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC700, 0x0300, 0xD8C0, 0x0300,
    0xD8C0, 0x7B00, 0xC773, 0xC300, 0xC03E, 0x0300, 0xC773, 0xC300,
    0xD8C0, 0x7B00, 0xD8C0, 0x0300, 0xC700, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend5[] =
{				/* Slow draw */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC3C0, 0x0300, 0xCC30, 0x0300,
    0xD818, 0x0300, 0xC018, 0x0300, 0xC018, 0x0300, 0xC018, 0x1B00,
    0xC00C, 0x3300, 0xC007, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC3C0, 0x0300, 0xCC30, 0x0300,
    0xD818, 0x0300, 0xC018, 0x0300, 0xC018, 0x0300, 0xC018, 0x1B00,
    0xC00C, 0x3300, 0xC007, 0xC300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend6[] =
{				/* Rectangle Unfilled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC600, 0x6300,
    0xC600, 0x6300, 0xC600, 0x6300, 0xC600, 0x6300, 0xC600, 0x6300,
    0xC600, 0x6300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC600, 0x6300,
    0xC600, 0x6300, 0xC600, 0x6300, 0xC600, 0x6300, 0xC600, 0x6300,
    0xC600, 0x6300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend7[] =
{				/* Fill Unfilled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC066, 0x0300,
    0xC181, 0x8300, 0xC600, 0x6300, 0xC181, 0x8300, 0xC066, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC066, 0x0300,
    0xC181, 0x8300, 0xC600, 0x6300, 0xC181, 0x8300, 0xC066, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip SelRend8[] =
{				/* Text */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC01C, 0x0300, 0xC03E, 0x0300,
    0xC03E, 0x0300, 0xC067, 0x0300, 0xC067, 0x0300, 0xC07F, 0x0300,
    0xC0C3, 0x8300, 0xC0C3, 0x8300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC01C, 0x0300, 0xC03E, 0x0300,
    0xC03E, 0x0300, 0xC067, 0x0300, 0xC067, 0x0300, 0xC07F, 0x0300,
    0xC0C3, 0x8300, 0xC0C3, 0x8300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};


/*****************************************************************************/


USHORT __chip AltRend2[] =
{				/* Circle Filled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC3FF, 0xC300,
    0xC7FF, 0xE300, 0xCFFF, 0xF300, 0xCFFF, 0xF300, 0xC7FF, 0xE300,
    0xC3FF, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC07E, 0x0300, 0xC3FF, 0xC300,
    0xC7FF, 0xE300, 0xCFFF, 0xF300, 0xCFFF, 0xF300, 0xC7FF, 0xE300,
    0xC3FF, 0xC300, 0xC07E, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip AltRend6[] =
{				/* Rectangle Filled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC7FF, 0xE300,
    0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC7FF, 0xE300,
    0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC7FF, 0xE300, 0xC7FF, 0xE300,
    0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC7FF, 0xE300,
    0xC7FF, 0xE300, 0xC7FF, 0xE300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};

USHORT __chip AltRend7[] =
{				/* Fill Filled */
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC07E, 0x0300,
    0xC1FF, 0x8300, 0xC7FF, 0xE300, 0xC1FF, 0x8300, 0xC07E, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC018, 0x0300, 0xC07E, 0x0300,
    0xC1FF, 0x8300, 0xC7FF, 0xE300, 0xC1FF, 0x8300, 0xC07E, 0x0300,
    0xC038, 0x0300, 0xC070, 0x0300, 0xC7FC, 0x0300, 0xFFFF, 0xFF00
};


/*****************************************************************************/


USHORT __chip EmptyData[] =
{
    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300,
    0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300,
    0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00,

    0xFFFF, 0xFF00, 0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300,
    0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300,
    0xC000, 0x0300, 0xC000, 0x0300, 0xC000, 0x0300, 0xFFFF, 0xFF00
};


/*****************************************************************************/


struct Image TIG[] =
{
    {0, 0, 24, 12, 2, GadRend1, 0x0001, 0x0000, NULL},
    {0, 0, 24, 12, 2, GadRend2, 0x0001, 0x0000, NULL},
    {0, 0, 24, 12, 2, GadRend3, 0x0001, 0x0000, NULL},
    {0, 0, 24, 12, 2, GadRend5, 0x0001, 0x0000, NULL},
    {0, 0, 24, 12, 2, GadRend6, 0x0001, 0x0000, NULL},
    {0, 0, 24, 12, 2, GadRend7, 0x0001, 0x0000, NULL},
};

struct Image TIS[] =
{
    {0, 0, 24, 12, 2, SelRend1, 0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, SelRend2, 0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, SelRend3, 0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, SelRend5, 0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, SelRend6, 0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, SelRend7, 0x0003, 0x0000, NULL},
};

struct Image TIA[] =
{
    {0, 0,  0,  0, 0, NULL,     0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, AltRend2, 0x0003, 0x0000, NULL},
    {0, 0,  0,  0, 0, NULL,     0x0003, 0x0000, NULL},
    {0, 0,  0,  0, 0, NULL,     0x0003, 0x0000, NULL},
    {0, 0, 24, 12, 2, AltRend6, 0x0003, 0x0000, NULL},
    {0, 0,  0,  0, 0, NULL,     0x0003, 0x0000, NULL},
};

struct Image Empty =
{0, 0, 24, 12, 2, EmptyData, 0x0003, 0x0000, NULL};


/*****************************************************************************/


struct Gadget TBox[] =
{
    {NULL,     0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    {&TBox[0], 0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    {&TBox[1], 0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    {&TBox[2], 0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    {&TBox[3], 0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    {&TBox[4], 0, 0, 0, 0, NULL, NULL, BOOLGADGET, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
};


/*****************************************************************************/


/* Tool Box Position & Sizing */
#define	TOOL_WIDTH	 24
#define	TOOL_HEIGHT	 12


/*****************************************************************************/


static VOID RedoBevelBox (struct Image * im, VOID * vi, BOOL dir)
{
struct Image *im2 = &Empty;
struct RastPort rp1, rp2;
struct BitMap bm1, bm2;
SHORT i1, planes1;
LONG image_data1;

    if (im->Depth > 0)
    {
	InitBitMap (&bm1, im->Depth, im->Width, im->Height);
	InitRastPort (&rp1);
	rp1.BitMap = &bm1;
	image_data1 = (LONG) im->ImageData;
	planes1 = RASSIZE (im->Width, im->Height);
	for (i1 = 0L; i1 < im->Depth; ++i1)
	    bm1.Planes[i1] = (PLANEPTR) (image_data1 + i1 * planes1);
	if (dir)		/* Pushed In */
	{
	    /* Selected in Color 3 & pushed in appearance */
	    im->PlanePick = 0x0003;
	    DrawBevelBox (&rp1,
			  0, 0, im->Width, im->Height,
			  GT_VisualInfo, vi,
			  GTBB_Recessed, TRUE,
			  TAG_DONE);

	}
	else
	{
	    /* Non-Selected in Color 1 & pushed out appearance */
	    InitBitMap (&bm2, im->Depth, im->Width, im->Height);
	    InitRastPort (&rp2);
	    rp2.BitMap = &bm2;
	    image_data1 = (LONG) im2->ImageData;
	    planes1 = RASSIZE (im->Width, im->Height);
	    for (i1 = 0L; i1 < im->Depth; ++i1)
		bm2.Planes[i1] = (PLANEPTR) (image_data1 + i1 * planes1);
	    im->PlanePick = 0x0001;
	    DrawImage (&rp2, im, 0, 0);
	    DrawImage (&rp1, im2, 0, 0);
	    im->PlanePick = 0x0003;
	    DrawBevelBox (&rp1,
			  0, 0, im->Width, im->Height,
			  GT_VisualInfo, vi,
			  TAG_DONE);
	}
    }
}


/*****************************************************************************/


VOID AddToolBox(struct SketchPad * sp, WORD LeftEdge, WORD TopEdge)
{
struct Window *win = sp->Window;
SHORT i, x, y;

    x = LeftEdge + 4;
    y = TopEdge;
    for (i = 0; i < 6; i++)
    {
	TBox[i].LeftEdge     = x;
	TBox[i].TopEdge      = y;
	TBox[i].Width        = TOOL_WIDTH;
	TBox[i].Height       = TOOL_HEIGHT;
	TBox[i].Flags        = GADGIMAGE | GADGHIMAGE;
	TBox[i].Activation   = GADGIMMEDIATE;
	TBox[i].GadgetRender = (APTR) &TIG[i];
	TBox[i].SelectRender = (APTR) &TIS[i];
	TBox[i].GadgetID     = SPTOOLS_ID;
	TBox[i].UserData     = (APTR) i;

	RedoBevelBox(&TIG[i],sp->Visual,FALSE);
	RedoBevelBox(&TIS[i],sp->Visual,TRUE);
	RedoBevelBox(&TIA[i],sp->Visual,TRUE);

	if (i == 2)
	{
	    x += (TOOL_WIDTH + 5);
	    y = TopEdge;
	}
	else
	    y += (TOOL_HEIGHT + 1);
    }
    TBox[0].Flags |= SELECTED;
    sp->Active_Tool = &TBox[0];

    AddGList (win, &TBox[5], ((USHORT) - 1), ((USHORT) - 1), NULL);
}


/*****************************************************************************/


VOID SPSelectToolGad(struct SketchPad * sp, UWORD num)
{
struct IntuiMessage msg = {0};
UWORD id, ofs;

    id  = num;
    ofs = 0;
    if (num > 5)
    {
	id  -= 6;
	ofs += 14;
    }

    msg.IAddress    = &TBox[id];
    msg.IDCMPWindow = sp->Window;
    msg.MouseX      = TBox[id].LeftEdge + ofs;
    msg.MouseY      = TBox[id].TopEdge;
    SPSelectTool(sp,&msg);
}


/*****************************************************************************/


SHORT SPSelectTool(struct SketchPad * sp, struct IntuiMessage * msg)
{
struct Gadget *gad = (struct Gadget *) msg->IAddress;
struct Window *win = msg->IDCMPWindow;
UWORD pos;
WORD x;
SHORT id, oldID;
struct Image *im;

    pos = RemoveGList(win,gad,1L);
    gad->Flags |= SELECTED;

    x  = msg->MouseX - gad->LeftEdge;
    id = oldID = (SHORT) gad->UserData;
    im = &TIA[id];

    if (id > 2)
    {
	id++;
    }

    if (im->Width > 0)
    {
	if (x < TOOL_WIDTH / 2)
	{
	    im = &TIS[oldID];
	}
	else
	{
	    im = &TIA[oldID];
	    id += 8;
	}
	gad->SelectRender = (APTR) im;
    }
    sp->Draw_Mode = id;

    AddGList(win,gad,(LONG)pos,1L,NULL);
    RefreshGList(gad,win,NULL,1L);

    if (gad != sp->Active_Tool)
    {
	pos = RemoveGList(win,sp->Active_Tool,1L);
	sp->Active_Tool->Flags &= ~SELECTED;
	AddGList(win,sp->Active_Tool,(LONG)pos,1L,NULL);
	RefreshGList(sp->Active_Tool,win,NULL,1L);
    }

    sp->Active_Tool = gad;

    if (win->RPort->BitMap->Depth == 1)
    {
        SetDrMd(win->RPort,COMPLEMENT);
        RectFill(win->RPort,gad->LeftEdge,gad->TopEdge,
                            gad->LeftEdge+gad->Width-1,gad->TopEdge+gad->Height-1);
    }

    return((SHORT)sp->Draw_Mode);
}
@


38.2
log
@*** empty log message ***
@
text
@d33 1
a33 1
USHORT chip GadRend1[] =
d44 1
a44 1
USHORT chip GadRend2[] =
d55 1
a55 1
USHORT chip GadRend3[] =
d66 1
a66 1
USHORT chip GadRend4[] =
d77 1
a77 1
USHORT chip GadRend5[] =
d88 1
a88 1
USHORT chip GadRend6[] =
d99 1
a99 1
USHORT chip GadRend7[] =
d110 1
a110 1
USHORT chip GadRend8[] =
d125 1
a125 1
USHORT chip SelRend1[] =
d136 1
a136 1
USHORT chip SelRend2[] =
d147 1
a147 1
USHORT chip SelRend3[] =
d158 1
a158 1
USHORT chip SelRend4[] =
d169 1
a169 1
USHORT chip SelRend5[] =
d180 1
a180 1
USHORT chip SelRend6[] =
d191 1
a191 1
USHORT chip SelRend7[] =
d202 1
a202 1
USHORT chip SelRend8[] =
d217 1
a217 1
USHORT chip AltRend2[] =
d228 1
a228 1
USHORT chip AltRend6[] =
d239 1
a239 1
USHORT chip AltRend7[] =
d254 1
a254 1
USHORT chip EmptyData[] =
@


38.1
log
@Initial V38 RCS checkin
@
text
@a385 1
SHORT id;
d387 1
a387 1
    x = LeftEdge;
d408 1
a408 1
	    x += (TOOL_WIDTH + 3);
d471 1
a471 1
	if (x < 13)
@
