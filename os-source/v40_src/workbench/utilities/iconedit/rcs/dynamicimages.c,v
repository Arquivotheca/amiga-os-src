head     38.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.3
date     93.02.08.16.57.09;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     92.06.19.15.40.05;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.02.16.42.35;  author vertex;  state Exp;
branches ;
next     ;


desc
@Resizeable image support for IconEdit
@


38.3
log
@rounds tmpras to nearest 64 bytes
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <string.h>

/* prototypes */
#include <clib/macros.h>
#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/layers_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/layers_pragmas.h>

/* application includes */
#include "dynamicimages.h"

/*****************************************************************************/

#define	DB(x)	;

/*****************************************************************************/

extern struct Library *SysBase;
extern struct Library *LayersBase;
extern struct Library *GfxBase;

/*****************************************************************************/

VOID InitDynamicImage (DynamicImagePtr di, USHORT d, USHORT w, USHORT h)
{
    WORD i;

    di->di_Image.LeftEdge = 0;
    di->di_Image.TopEdge = 0;
    di->di_Image.Width = w;
    di->di_Image.Height = h;
    di->di_Image.Depth = d;
    di->di_Image.ImageData = NULL;
    di->di_Image.PlanePick = (1 << d) - 1;
    di->di_Image.PlaneOnOff = 0;
    di->di_Image.NextImage = NULL;
    di->di_RasWork = NULL;
    di->di_LayerInfo = NULL;
    di->di_Layer = NULL;

    InitBitMap (&di->di_BMap, (BYTE) d, (SHORT) w, (SHORT) h);
    InitRastPort (&di->di_RPort);
    InitArea (&di->di_Area, di->di_AreaWork, AREA_SIZE / 5);

    di->di_RPort.BitMap = &di->di_BMap;
    di->di_RPort.AreaInfo = &di->di_Area;

    for (i = 0; i < AREA_SIZE; i++)
	di->di_AreaWork[i] = 0;
}

/*****************************************************************************/

BOOL AllocDynamicImage (DynamicImagePtr di)
{
    USHORT depth = di->di_Image.Depth;
    struct BitMap *bm = &di->di_BMap;
    USHORT width = di->di_Image.Width;
    USHORT height = di->di_Image.Height;
    ULONG i, planes, data;

    planes = RASSIZE (width, height);

    if (!(data = (ULONG) AllocVec (planes * depth, MEMF_CHIP | MEMF_CLEAR)))
    {
	return (FALSE);
    }

    di->di_Image.ImageData = (APTR) data;

    for (i = 0; i < di->di_Image.Depth; i++)
    {
	bm->Planes[i] = (PLANEPTR) (data + i * planes);
    }

    if (di->di_Flags & DI_LAYER)
    {
	if (!(di->di_LayerInfo = NewLayerInfo ()))
	{
	    FreeDynamicImage (di);
	    return (FALSE);
	}

	if (!(di->di_Layer = CreateUpfrontLayer (di->di_LayerInfo, &di->di_BMap,
					      0, 0, (width - 1), (height - 1),
						 LAYERSIMPLE, NULL)))
	{
	    FreeDynamicImage (di);
	    return (FALSE);
	}

	di->di_RPort.Layer = di->di_Layer;
    }

    if (di->di_Flags & DI_FILL)
    {
	DB (kprintf ("Width=%ld, %ld\n", (LONG)width, (LONG) ((width + 63) & ~63) ));

	if (!(di->di_RasWork = AllocRaster (((width + 63) & ~63), height)))
	{
	    FreeDynamicImage (di);
	    return (FALSE);
	}

	InitTmpRas (&di->di_TmpRas, di->di_RasWork, planes);
	di->di_RPort.TmpRas = &di->di_TmpRas;
    }

    return (TRUE);
}

/*****************************************************************************/

VOID FreeDynamicImage (DynamicImagePtr di)
{
    if (di)
    {
	if (di->di_LayerInfo)
	{
	    if (di->di_Layer)
	    {
		DeleteLayer (NULL, di->di_Layer);
	    }
	    DisposeLayerInfo (di->di_LayerInfo);
	}

	if (di->di_RasWork)
	{
	    FreeRaster (di->di_RasWork, ((di->di_Image.Width + 63) & ~63), di->di_Image.Height);
	}

	FreeVec (di->di_Image.ImageData);

	di->di_Layer = NULL;
	di->di_LayerInfo = NULL;
	di->di_Image.ImageData = NULL;
	di->di_RasWork = NULL;
    }
}
@


38.2
log
@*** empty log message ***
@
text
@d22 3
a27 1

a31 1

a33 1

d107 3
a109 1
	if (!(di->di_RasWork = AllocRaster (width, height)))
a121 1

a123 1

a125 1

d139 1
a139 1
	    FreeRaster (di->di_RasWork, di->di_Image.Width, di->di_Image.Height);
@


38.1
log
@Initial entry point for IconEdit
@
text
@d9 1
d34 1
a34 1
VOID InitDynamicImage(DynamicImagePtr di, USHORT d, USHORT w, USHORT h)
d36 1
a36 1
WORD i;
d38 7
a44 7
    di->di_Image.LeftEdge   = 0;
    di->di_Image.TopEdge    = 0;
    di->di_Image.Width      = w;
    di->di_Image.Height     = h;
    di->di_Image.Depth      = d;
    di->di_Image.ImageData  = NULL;
    di->di_Image.PlanePick  = (1 << d) - 1;
d46 4
a49 4
    di->di_Image.NextImage  = NULL;
    di->di_RasWork          = NULL;
    di->di_LayerInfo        = NULL;
    di->di_Layer            = NULL;
d51 3
a53 3
    InitBitMap(&di->di_BMap, (BYTE)d, (SHORT)w, (SHORT)h);
    InitRastPort(&di->di_RPort);
    InitArea(&di->di_Area,di->di_AreaWork,AREA_SIZE/5);
d55 1
a55 1
    di->di_RPort.BitMap   = &di->di_BMap;
a61 1

d64 1
a64 2

BOOL AllocDynamicImage(DynamicImagePtr di)
d66 5
a70 5
struct BitMap *bm      = &di->di_BMap;
USHORT         depth   = di->di_Image.Depth;
USHORT         width   = di->di_Image.Width;
USHORT         height  = di->di_Image.Height;
ULONG          i,planes,data;
d72 1
a72 1
    planes = RASSIZE(width,height);
d74 1
a74 1
    if (!(data = (ULONG)AllocVec(planes*depth,MEMF_CHIP|MEMF_CLEAR)))
d76 1
a76 1
        return(FALSE);
d79 1
a79 1
    di->di_Image.ImageData = (APTR)data;
d81 1
a81 1
    for (i = 0; i < depth; i++)
d83 1
a83 1
        bm->Planes[i] = (PLANEPTR) (data + i * planes);
d88 13
a100 13
        if (!(di->di_LayerInfo = NewLayerInfo()))
        {
            FreeDynamicImage(di);
            return(FALSE);
        }

        if (!(di->di_Layer = CreateUpfrontLayer(di->di_LayerInfo,&di->di_BMap,
                                                0,0,(width - 1),(height - 1),
                                                LAYERSIMPLE, NULL)))
        {
            FreeDynamicImage(di);
            return(FALSE);
        }
d102 1
a102 1
        di->di_RPort.Layer = di->di_Layer;
d107 5
a111 5
        if (!(di->di_RasWork = AllocRaster(width,height)))
        {
            FreeDynamicImage(di);
            return(FALSE);
        }
d113 1
a113 1
	InitTmpRas(&di->di_TmpRas,di->di_RasWork,planes);
d117 1
a117 1
    return(TRUE);
d124 1
a124 1
VOID FreeDynamicImage(DynamicImagePtr di)
d126 1
d133 1
a133 1
		DeleteLayer(NULL,di->di_Layer);
d135 1
a135 1
	    DisposeLayerInfo(di->di_LayerInfo);
d140 1
a140 1
	    FreeRaster(di->di_RasWork,di->di_Image.Width,di->di_Image.Height);
d143 1
a143 1
        FreeVec(di->di_Image.ImageData);
d145 2
a146 2
	di->di_Layer           = NULL;
	di->di_LayerInfo       = NULL;
d148 1
a148 1
	di->di_RasWork         = NULL;
@
