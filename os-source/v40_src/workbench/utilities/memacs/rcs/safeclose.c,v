head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     91.04.18.17.42.13;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.30.11.01.26;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@prototype changes...fully prototyped to catch problems.
@
text
@#include "ed.h"

#if AMIGA
#include "exec/types.h"
#include "exec/nodes.h"
#include "exec/lists.h"
#include "exec/ports.h"
#include "intuition/intuition.h"

/* this function closes an intuition window that shares a port with
* other intuition windows.
*
* It is careful to set the UserPort to null before closing, and to
* free any messages that it might have been sent.
*/

void CloseWindowSafely( win )
struct Window *win;
{
	/* we forbid here to keep out of race conditions with intuition */
    Forbid();

	/* send back any messages for this window 
	* that have not yet been processed
	*/
    StripIntuiMessages( win->UserPort, win );

	/* clear UserPort so intuition will not free it */
    /*win->UserPort = NULL;*/

	/* tell inuition to stop sending more messages */
    ModifyIDCMP( win, 0 );

	/* turn tasking back on */
    Permit();

	/* and really close the window */

    CloseWindow( win );
}

void StripIntuiMessages( mp, win )
struct MsgPort *mp;
struct Window *win;
{
struct IntuiMessage *msg;
struct IntuiMessage *succ;

msg = (struct IntuiMessage *)mp->mp_MsgList.lh_Head;

while( succ = (struct IntuiMessage *)msg->ExecMessage.mn_Node.ln_Succ ) {

	if( msg->IDCMPWindow ==  win ) {
	/* intuition is about to rudely free this message.
	* Make sure that we have politely sent it back.
	*/
	Remove( msg );

	ReplyMsg( msg );
	}

msg = succ;
}
}
#endif
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
CloseWindowSafely( win )
d21 1
a21 1
Forbid();
d26 1
a26 1
StripIntuiMessages( win->UserPort, win );
d29 1
a29 1
/*win->UserPort = NULL;*/
d32 1
a32 1
ModifyIDCMP( win, 0 );
d35 1
a35 1
Permit();
d39 1
a39 1
CloseWindow( win );
d42 1
a42 1
StripIntuiMessages( mp, win )
d49 1
a49 1
msg = mp->mp_MsgList.lh_Head;
d51 1
a51 1
while( succ = msg->ExecMessage.mn_Node.ln_Succ ) {
@
