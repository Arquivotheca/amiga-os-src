head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     91.04.18.17.41.39;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.30.11.01.02;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@prototype changes...fully prototyped to catch problems.
@
text
@#include "ed.h"

#if	AMIGA

/* trying a real simple allocate/free scheme for awhile */

UBYTE *malloc(size)
LONG size; {
    LONG *p = NULL;
    LONG asize = size+4;

    if (size > 0) p = (LONG *)AllocMem(asize,MEMF_CLEAR|MEMF_PUBLIC);
    if (p != NULL) *p++ = asize; /* post-bump p to point at start of memory */
    return((UBYTE *)p);
}

void free(p)
UBYTE *p; 
{
    if (p != NULL) {
	p -= 4;
	FreeMem(p, *((LONG *)p));
    }
}

#endif
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
UBYTE *malloc(size) 
d17 1
a17 1
free(p) 
a23 1
    return(0);
@
