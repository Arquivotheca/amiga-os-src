head     1.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.8
date     91.05.02.09.15.15;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.05.01.20.27.09;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.04.22.18.50.16;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.04.22.09.15.09;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     91.04.18.17.42.17;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.15.15.40.18;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.30.15.08.27;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.30.11.00.39;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.8
log
@fixed interlace mode
@
text
@#include "ed.h"

WORD	*BindKey;
WORD	*TBindKey;

#if	AMIGA
#include "workbench/startup.h"
#include "memacs_rev.h"

#define IS_PAL (((struct GfxBase *)GfxBase)->DisplayFlags & PAL)

#define BLUE 0
#define WHITE 1

struct MinList paste;
struct MinNode *pastenode;
LONG pcount;

UBYTE screenname[30]="MEMACS_01";
UBYTE *PointerData;
UBYTE *PrefBuffer;
UBYTE *lineBuffer;
int linecounter;
int LaceFlag;
int fullsize;
UBYTE *fkm[35];
UBYTE *fileBuffer;
UBYTE *copybuffer;
struct FileInfoBlock *finfo;
struct TextFont *tf;
BOOL oflag;


extern UBYTE *fkmdef[35];
extern int gotoLine;
extern LONG opts[OPT_COUNT];
extern int version;
extern struct RDargs *rdargs;
extern struct MenuItem edititems[];
extern struct WBStartup *WBenchMsg;
extern struct Library *OpenLibrary();
extern struct MsgPort consoleMsgPort;
extern struct Menu menus[];
extern int RememberFile;

extern EWINDOW *wheadp;   /* EWINDOW listhead */

struct Screen *OpenScreen();
struct Window *OpenWindow();
struct Screen *screen;
struct Window *window;

extern LONG  OrigDir;
extern struct WBArg *Arg;

struct IntuiMessage *message;
struct Remember *RememberKey;

struct Library *IntuitionBase=NULL;
struct Library *DOSBase=NULL;
struct Library *GfxBase=NULL;
struct Library *IFFParseBase=NULL;

struct ExtNewScreen ns = {
	0,0,
	640,200,1, /* & depth */
	BLUE,WHITE,
	HIRES,	/* viewmodes */
	CUSTOMSCREEN|NS_EXTENDED,
	NULL, /* default font */
	"MicroEMACS V2.1",
	NULL, /* no user gadgets */
	NULL, /* default bit map */
	NULL}; /* for extension tags */

struct NewWindow nw = {
        0, 10,        	/* starting position (left,top) */
	640,190,        /* width, height */
        BLUE,WHITE,    /* detailpen, blockpen */
        MENUPICK|MOUSEBUTTONS|INACTIVEWINDOW,	/* flags for idcmp */
        SMART_REFRESH|ACTIVATE|BORDERLESS, /* window gadget flags */
        NULL,           /* pointer to 1st user gadget */
        NULL,           /* pointer to user check */
	NULL,		 /* no title */
        NULL,           /* pointer to window screen (add after it is open */
        NULL,           /* pointer to super bitmap */
        100,50,         /* min width, height */
        ~0,~0,        /* max width, height */
        CUSTOMSCREEN};

void aStart(argc,argv)
int argc;
UBYTE **argv;
{
int i;

screen=NULL;
window=NULL;
IntuitionBase=NULL;
GfxBase=NULL;
RememberKey=NULL;
fileBuffer=NULL;
PointerData=NULL;
PrefBuffer=NULL;
lineBuffer=NULL;
BindKey=NULL;
TBindKey=NULL;
finfo=NULL;
tf=NULL;
oflag=FALSE;
fullsize=FALSE;
copybuffer=NULL;
pcount=0;
pastenode=0;
rdargs=NULL;
NewList(&paste);
RememberFile=0;

if((IntuitionBase=(struct IntuitionBase *)OpenLibrary("intuition.library",33))== NULL)
	errorExit(10);
if((GfxBase = (struct GfxBase *)OpenLibrary("graphics.library", 0)) ==NULL)
	errorExit(10);

if(argc) {
    if(version >= 36) {
        if(! (rdargs = ReadArgs(TEMPLATE,opts,NULL))) {
	    PrintFault(IoErr(),NULL);
	    errorExit(10);
	}

	if(opts[OPT_OPT]) {
	    if (( ((UBYTE *)opts[OPT_OPT])[0]&0x5F) == 'F')fullsize=TRUE;
	        SetForWindow();
	}
        /* check for window full size specifiers */
        if(opts[OPT_GOTO]) {
	    if((gotoLine=atoi((UBYTE *)opts[OPT_GOTO])) > 0) gotoLine--;
	}
	/* check if conclip is running.  If not, turn off paste menu item */
	if(!FindPort("ConClip.rendezvous")) {
		/* maybe zapping the command byte would be better ? */
		/* this turns the menuitem off */
		edititems[16].NextItem = NULL;
	}
    }
  else {
	/* limited pre V36 argument code */
	if(((argc==3) && !stricmp(argv[1],"OPT")) ||
	 ((argc > 3) && !stricmp(argv[2],"OPT"))) {
	    if(!stricmp(argv[argc-1],"F"))fullsize=TRUE;
	    SetForWindow();
  	}
  }
}

if(!(fileBuffer = (UBYTE *)
    AllocRemember(&RememberKey,MAXFILEBUF+4,MEMF_PUBLIC|MEMF_CLEAR)))
	errorExit(10);
if(!(PointerData=(UBYTE *)AllocRemember(&RememberKey,128,MEMF_CHIP|MEMF_CLEAR)))
     errorExit(10);
if(!(PrefBuffer=(UBYTE *)AllocRemember(&RememberKey,128,MEMF_CHIP|MEMF_CLEAR)))
    errorExit(10);
if(!(lineBuffer=(UBYTE *)
    AllocRemember(&RememberKey,MAXLINE+1,MEMF_PUBLIC|MEMF_CLEAR)))
	errorExit(10);
if(!(BindKey=(WORD *)
    AllocRemember(&RememberKey,NBINDW,MEMF_PUBLIC|MEMF_CLEAR)))errorExit(10);
if(!(TBindKey=(WORD *)
    AllocRemember(&RememberKey,NBINDW,MEMF_PUBLIC|MEMF_CLEAR)))errorExit(10);

if(!(finfo=(struct FileInfoBlock *)
	AllocRemember(&RememberKey,sizeof(struct FileInfoBlock),
	MEMF_PUBLIC|MEMF_CLEAR)))errorExit(10);

if(!(copybuffer=(UBYTE *)AllocMem(2048,MEMF_PUBLIC|MEMF_CLEAR)))errorExit(10);

OrigDir=NULL;
linecounter=0;

for(i=0; i<35; i++) {
    if(!(fkm[i] = (UBYTE *)AllocRemember(&RememberKey,80,MEMF_PUBLIC|MEMF_CLEAR)))
	errorExit(10);
}

InitFunctionKeys(0,0);
LaceFlag=GetWindow(-1); /* So, how big is it, Sir ? */
}




struct Rectangle rect = {0,0,0,0};

UWORD mypens[]={~0};
struct TagItem tags[] = {
	{SA_PubName,NULL},
	{SA_DisplayID,NULL},	
	{SA_Pens,(ULONG)mypens},
	{TAG_DONE,}
};

int GetWindow(flag)
int flag;
{

USHORT height,width;
UBYTE *sbuffer;
struct Process *process;
struct Screen *pscreen;
int localLace,maxh=200;
int i=1;
LONG id;

if(IS_PAL) maxh=256;

if(!(sbuffer=(UBYTE *)AllocMem(sizeof(struct Screen),MEMF_PUBLIC)))
	errorExit(10);
GetScreenData(sbuffer, sizeof(struct Screen), WBENCHSCREEN, NULL);

localLace= ((struct Screen *)sbuffer)->ViewPort.Modes | HIRES;
height=(SHORT)((struct Screen *)sbuffer)->Height;
width=(SHORT)((struct Screen *)sbuffer)->Width;
FreeMem(sbuffer,sizeof(struct Screen));

if(version >= 36) {
    pscreen=LockPubScreen(NULL); /* go to default */
    if(pscreen) {

        id=GetVPModeID(&pscreen->ViewPort);
	/* use old style lace bit */
/*        localLace= pscreen->ViewPort.Modes | HIRES; */

        if(id != INVALID_ID)QueryOverscan(id,&rect,OSCAN_TEXT);
	UnlockPubScreen(NULL,pscreen);
    }
    height=rect.MaxY-rect.MinY+1;
    width=rect.MaxX-rect.MinX+1;
}

nw.Width=ns.Width=width;
if (flag == -1) { /* Initial size calculations */
		  /* figure out LACE, but we were told the height */
    ns.ViewModes = localLace;	/* match their WB viewmodes */
}
if(localLace & LACE) maxh *= 2; /* pick proper max height */

if(nw.Type != WBENCHSCREEN) {   /* on a custom screen */
    /* only allow them to switch lace modes on custom screen */
    if(!flag) { /* we want to leave interlace */
        if (localLace & LACE) height /= 2;
    }
    else if(flag > 0) { /* we are trying to enter interlace */
        if(!(localLace & LACE)) { /* if not already in interlace */ 
	    height *= 2;
	    maxh *= 2;
	}
    }
	/* now entering the Hedley Zone */
    if (height >= 800 ) {
	tags[1].ti_Tag = TAG_IGNORE; /* let's not open another hedley */
	height = maxh; /* hedley screen kluge */
	if(width > 1000) {
	    nw.Width=ns.Width=640;
    	}
    }
    ns.Height=height;

    ns.Extension=tags;
    if(version >= 36) {
	/* find an unused name slot */
	while(screen=LockPubScreen(screenname)) {
	    UnlockPubScreen(screenname,NULL);
	    itoa(&screenname[6],2,++i);
	    screenname[6]='_';
	}
        tags[0].ti_Data=(ULONG)screenname;
	if(flag==1)id |= (USHORT)INTERLACE;
        tags[1].ti_Data=(ULONG)id;
    }

    if((screen=OpenScreen(&ns)) == NULL)errorExit(10);
    if(version >= 36) {
	PubScreenStatus(screen,0);
    }
    nw.TopEdge=screen->BarHeight;
    nw.Height=(SHORT)height-screen->BarHeight; /*-(screen->BarHeight/2); */
    nw.Screen=screen;
}

else {	/* take what they have the workbench set to (almost) */
    nw.Height=height;
    nw.Screen=screen=NULL;
    /* don''t open full screen unless they specifically request it */
    if(!fullsize & (height>maxh)) {
	if((height/2)>maxh) nw.Height=height/2;
	else nw.Height=maxh;
	if(width >= 656) nw.Width=656;
    }
}

if((window=OpenWindow(&nw)) == NULL)errorExit(10); 

SetDrMd(window->RPort,JAM2);
SetAPen(window->RPort,WHITE);
SetBPen(window->RPort,BLUE);

SetMenuStrip(window,&menus[0]);
SetMyPointer();
process = (struct Process *)FindTask(NULL); /* set error window */
process->pr_WindowPtr=(APTR)window;

GetWindowSize();

if(localLace&LACE)return(TRUE);
return(FALSE);
}

void GetWindowSize()
{
long awidth,aheight;

     if(!(tf=window->IFont)) {
         tf=(struct TextFont *)OpenFont(window->WScreen->Font);
         SetFont(window->RPort, tf);	/* set same font here */
         oflag=TRUE;
     }

   if(tf) {
        FontWidth=tf->tf_XSize;
        FontHeight=tf->tf_YSize;
   }
    else {
	FontWidth=8;
	FontHeight=8;
    }
    awidth=window->BorderLeft+window->BorderRight;
    aheight=window->BorderTop+window->BorderBottom;
    term.t_nrow=
      ((window->Height-aheight)/FontHeight)-1;
    if(nw.Type == WBENCHSCREEN) {
       term.t_nrow -=2;
       term.t_ncol = 
    	   (window->Width - awidth)/FontWidth;
    }
    else term.t_ncol=window->Width/FontWidth;
    RightMargin = term.t_ncol;

    WindowLimits(window,
	(FontWidth+awidth)*4,(FontHeight+aheight)*3,~0,~0);
}

void Cleanup()
{
struct Process *process;

if(OrigDir)CurrentDir(OrigDir); 
process = (struct Process *)FindTask(NULL); /* reset error window */
process->pr_WindowPtr=NULL;

if(window){
    ClearPointer(window);
    ClearMenuStrip(window);
    CloseWindowSafely(window);
}
if(screen) {
    if(version>= 36)PubScreenStatus(screen,PSNF_PRIVATE);
    CloseScreen(screen);
}
if(pastenode)KillPaste();

if(GfxBase !=0) {
    if(oflag && tf) CloseFont(tf);
    CloseLibrary(GfxBase);
}
if(IntuitionBase) {
    if(RememberKey)FreeRemember(&RememberKey, TRUE);
    OpenWorkBench(); /* just in case */
    CloseLibrary(IntuitionBase);
}
if(copybuffer)FreeMem(copybuffer,2048);
if(rdargs)FreeArgs(rdargs);
}

#endif

void errorExit(error)
int error;
{
#if AMIGA
if(IntuitionBase) {
    DisplayBeep(NULL);
}


Cleanup();
#endif
exit(error);
}

#if AMIGA
int CXBRK()
{
return(0);
}

void SetForWindow()
{
	nw.Type = WBENCHSCREEN;
	nw.IDCMPFlags = CLOSEWINDOW|NEWSIZE|MENUPICK|MOUSEBUTTONS|INACTIVEWINDOW;
	nw.Flags=WINDOWDEPTH|WINDOWDRAG|WINDOWSIZING|WINDOWCLOSE|
		SMART_REFRESH|ACTIVATE;
	nw.Title = ns.DefaultTitle;
	nw.TopEdge=0;
}
#endif
@


1.7
log
@fixed memoration crash and burn
@
text
@d277 1
@


1.6
log
@lastfile fix
@
text
@d115 1
a363 1

a373 1

d380 1
a390 1
    DisplayBeep(NULL);
d392 2
@


1.5
log
@Fixed PAL/NTSC problems...it comes up in PAL on a PAL system.
Fixed crash when used under 1.3
@
text
@d44 1
d116 1
@


1.4
log
@prototype changes...fully prototyped to catch problems.
@
text
@a0 1

d8 1
d15 5
d28 1
a29 1

d33 1
d36 4
a39 1

d61 1
d63 1
a63 1
struct NewScreen ns = {
d68 1
a68 1
	CUSTOMSCREEN,
d72 2
a73 1
	NULL}; /* default bit map */
d90 1
a90 1
void aStart(argc,opts)
d92 1
a92 1
long *opts;
d96 4
a99 26
   if(argc) {
    if(opts[OPT_OPT]) {
      if( (((UBYTE *)opts[OPT_OPT])[0]&0x5F) == 'W') {
	fullsize=FALSE;
	nw.Type = WBENCHSCREEN;
	nw.IDCMPFlags = CLOSEWINDOW|NEWSIZE|MENUPICK|MOUSEBUTTONS|INACTIVEWINDOW;
	nw.Flags=WINDOWDEPTH|WINDOWDRAG|WINDOWSIZING|WINDOWCLOSE|
		SMART_REFRESH|ACTIVATE;
	nw.Title = ns.DefaultTitle;
	nw.TopEdge=0;
      }
        /* check for window full size specifiers */
        if( (((UBYTE *)opts[OPT_OPT])[0]&0x5F) == 'F') {
	    fullsize=TRUE;
    	}
    }
    if(opts[OPT_GOTO]) {
	if((gotoLine=atoi((UBYTE *)opts[OPT_GOTO])) > 0) gotoLine--;
    }
  }

if((IntuitionBase=(struct IntuitionBase *)OpenLibrary("intuition.library",33))== NULL)
	errorExit(10);
if((GfxBase = (struct GfxBase *)OpenLibrary("graphics.library", 0)) ==NULL)
	errorExit(10);

d110 42
d172 2
d187 12
d202 1
d206 1
d208 4
d220 16
a235 1
if(IS_PAL) maxh=256;
a237 2
FreeMem(sbuffer,sizeof(struct Screen));

d255 8
a262 1
    if (height > maxh ) height = maxh; /* hedley screen kluge */
d264 13
d278 3
d361 18
a378 6
if(screen)CloseScreen(screen);
OpenWorkBench(); /* just in case */
if(oflag && tf)CloseFont(tf);
FreeRemember(&RememberKey, TRUE);
if(GfxBase !=0)CloseLibrary(GfxBase);
if(IntuitionBase !=0)CloseLibrary(IntuitionBase);
d380 1
a382 1

d387 4
a390 2
DisplayBeep(NULL);
DisplayBeep(NULL);
d395 17
@


1.3
log
@changed title bar
@
text
@d1 1
a2 5
#include "memacs_rev.h"


#include "memacs_rev.h"
#define CMDREV  "\0$VER: " VSTRING
a27 5
extern void aStart();
extern void GetWindowSize();
extern void Cleanup();
extern void errorExit();

d49 3
d79 1
a79 1
void aStart(argc,argv)
d81 1
a81 1
UBYTE *argv[];
d85 3
a87 9
if(argc) {
    if(*argv[argc-1] == '?') {
    	printf("Usage: %s [<file>] OPT/K [w]\n" CMDREV,argv[0]);
    	exit(0);
    }
}

for (i = 1; i < argc; ++i) {
    if(!strcmpi(argv[i],"opt") && ((*argv[i+1]&0x5F) == 'W')) {
d95 15
a109 15
	if(i == 1) *argv[1]=0;	/* to avoid having a file name of opt */

	/* check for window full size specifiers */
	if( (argv[i+1][1]) == 'f') fullsize=TRUE;
	i++;
    }
    else if(!strcmpi(argv[i],"goto")&&(*argv[i+1] >= '0')&&(*argv[i+1] <= '9')) {
	if((gotoLine=atoi(argv[i+1])) > 0) gotoLine--;
	if(i == 1) *argv[1]=0;
	i++;
    }
}

if((IntuitionBase=(struct IntuitionBase *)OpenLibrary("intuition.library",33)) == NULL)errorExit();
if((GfxBase = (struct GfxBase *)OpenLibrary("graphics.library", 0)) ==NULL) errorExit();
d123 2
a124 1
    AllocRemember(&RememberKey,MAXFILEBUF+4,MEMF_PUBLIC|MEMF_CLEAR))) errorExit();
d126 1
a126 1
     errorExit();
d128 1
a128 1
    errorExit();
d130 2
a131 1
    AllocRemember(&RememberKey,MAXLINE+1,MEMF_PUBLIC|MEMF_CLEAR))) errorExit();
d133 1
a133 1
    AllocRemember(&RememberKey,NBINDW,MEMF_PUBLIC|MEMF_CLEAR))) errorExit();
d135 1
a135 1
    AllocRemember(&RememberKey,NBINDW,MEMF_PUBLIC|MEMF_CLEAR))) errorExit();
d137 3
a139 1
if(!(finfo=(struct FileInfoBlock *)AllocRemember(&RememberKey,sizeof(struct FileInfoBlock),MEMF_PUBLIC|MEMF_CLEAR))) errorExit();
d146 1
a146 1
	errorExit();
d149 1
a149 1
InitFunctionKeys();
d162 2
a163 1
if(!(sbuffer=(UBYTE *)AllocMem(sizeof(struct Screen),MEMF_PUBLIC)))errorExit();
d193 1
a193 1
    if((screen=OpenScreen(&ns)) == NULL)errorExit(1);
d210 1
a210 1
if((window=OpenWindow(&nw)) == NULL)errorExit(2); 
d292 1
a292 1
exit(20);
@


1.2
log
@uses new font sizing method.
@
text
@d2 1
a2 1

d66 1
a66 1
	"MicroEMACS V1.4",
@


1.1
log
@Initial revision
@
text
@d29 3
d58 1
d99 1
a99 1
    if(!strcmpi(argv[i],"opt") && (*argv[i+1] == 'w')) {
d131 2
d236 1
a236 1
struct TextFont *tf;
d238 16
a253 4
if(tf=(struct TextFont *)OpenFont(window->WScreen->Font)) {
    SetFont(window->RPort, tf);	/* set same font here */
    FontWidth=tf->tf_XSize;
    FontHeight=tf->tf_YSize;
d255 1
a255 2
     ((window->Height-window->BorderTop-window->BorderBottom)/FontHeight)-1;

d259 1
a259 1
    	   (window->Width - window->BorderLeft-window->BorderRight)/FontWidth;
d263 3
a265 1
    CloseFont(tf);
a266 2
else errorExit();
}
d272 1
a272 3
if(OrigDir != NULL)CurrentDir(OrigDir); 

FreeRemember(&RememberKey, TRUE);
d276 9
a284 4
ClearPointer(window);
ClearMenuStrip(window);

if(window !=0)CloseWindowSafely(window);
d286 1
a286 3
if(screen !=0)CloseScreen(screen);
OpenWorkBench(); /* just in case */
if(IntuitionBase !=0)CloseLibrary(IntuitionBase); /* its last, ok Kodiak ? */
@
