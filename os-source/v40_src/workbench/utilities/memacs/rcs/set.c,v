head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     91.04.22.18.50.52;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     91.04.22.09.19.38;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     91.04.18.17.47.54;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.30.11.01.33;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@lastfile fix
@
text
@/*
 * This file contains the set
 * command processing functions
 */
#include	"ed.h"

extern int      tabsize;     /* Tab size (0: use real tabs)  */
extern int	CheckCase;
extern int	indentsize;
extern int	nkeybound;	/* number of keys bound */
extern int	RememberFile;

int set(f,n)
    int f,n;
{
UBYTE buffer[80];
int s,i,j;
EWINDOW *wp;

    if((s=mlreply("Set what: ",buffer,78))!=TRUE)return(FALSE);
	if((i=nwspace(buffer) <0))return(FALSE); /* eat leading white space */

        j=nextarg(&buffer[i]);	/* find first argument */
	if(!strnicmp(&buffer[i],"wrap",4)) {
		i=j;
		if(!i)s=mlgetnumber("Column: ",fillcol);
                else s=atoi(&buffer[i]);
		if(s>=0)fillcol=s;
 	}
    	else if(!strnicmp("case",&buffer[i],4)) {
	    i=j;
	    if(!i) s=mlreply("Check case: ",buffer,78);
	    if((s)&&(!strnicmp(&buffer[i],"on",2)))CheckCase=TRUE;
	    else CheckCase=FALSE;
	}
    	else if(!strnicmp(&buffer[i],"backup",6)) {
	    i=j;
	    if(!i) s=mlreply("Backup: ",buffer,78);
	    if((s)&&(!strnicmp(&buffer[i],"safe",4)))BackupBefore=0;
	    else if((s)&&(!strnicmp(&buffer[i],"on",2)))BackupBefore= -1;
	    else BackupBefore=1;
	}
    	else if(!strnicmp(&buffer[i],"tab",3)) {
	    i=j;
	    if(!i)s=mlgetnumber("Tab: ",tabsize);
            else s=atoi(&buffer[i]);
	    if(s >= 0)tabsize=s;
	}
    	else if(!strnicmp(&buffer[i],"indent",6)) {
	    i=j;
	    if(!i)s=mlgetnumber("Indent: ",indentsize);
            else s=atoi(&buffer[i]);
	    if(s >= 0)indentsize=s;
	}
    	else if(!strnicmp(&buffer[i],"left",4)) {
	    i=j;
	    if(!i)s=mlgetnumber("Left margin: ",LeftMargin);
            else s=atoi(&buffer[i]);
	    if( (s<0) || (s>=RightMargin)) return(FALSE);
	    LeftMargin = s;
	    curwp->w_flag |= WFHARD;
	    lmargin();
	}
    	else if(!strnicmp(&buffer[i],"right",5)) {
	    i=j;
	    if(!i)s=mlgetnumber("Right margin: ",RightMargin);
            else s=atoi(&buffer[i]);
	    if ((s<LeftMargin) || (s < 0)) return(FALSE);
	    if (s > term.t_ncol) RightMargin= term.t_ncol;
	    else RightMargin = s;
	    curwp->w_flag |= WFHARD;
	    lmargin();
	    wp = wheadp;                            /* Update mode lines.   */
	    while (wp != NULL) {
	    if (wp->w_bufp == curbp)
		wp->w_flag |= WFMODE;
		wp = wp->w_wndp;
	    }
	}
#if AMIGA
	else if(!strnicmp(&buffer[i],"screen",6)) {
		return(SetLace(TRUE,3));
	}
	else if(!strnicmp(&buffer[i],"interlace",9)) {
	    if(!(i=j))SetLace(FALSE,0);
	    else if(!strnicmp(&buffer[i],"on",2)) SetLace(TRUE,2);
	    else SetLace(TRUE,1);
	}
	else if(!strnicmp(&buffer[i],"lastfile",8)) {
	    i=j;
	    if(!i) s=mlreply("Remember last file: ",buffer,78);
	    if((s)&&(!strnicmp(&buffer[i],"on",2)))RememberFile=TRUE;
	    else RememberFile=FALSE;
	}
#endif
	else if(!strnicmp(&buffer[i],"mode",4)) {
	    i=j;
	    if(!i) if( (s=mlreply("Mode: ",buffer,78))==ABORT)return(FALSE);
    	    if (!s)curbp->b_mode=0;   
	    else {
		while (i < strlen(buffer)) { 
	    	    if((buffer[i]==' ') || (buffer[i]=='|')) i++;
	    	    if(buffer[i]=='-') {
			i++;
    			if(!strnicmp(&buffer[i],"cmode",5)) {
		    	curbp->b_mode &= ~CMODE;
		    	i +=5;
			}
    			else if(!strnicmp(&buffer[i],"wrap",4)) {
		    	curbp->b_mode &= ~WRAPMODE;
		    	i += 4;
			}
		    }
    	    	    else {
    			if(!strnicmp(&buffer[i],"cmode",5)) {
		    	curbp->b_mode |= CMODE;
		    	i += 5;
			}
    			else if(!strnicmp(&buffer[i],"wrap",4)) {
		    	curbp->b_mode |= WRAPMODE;
		    	i += 4;
			}
		        else i++;
		    }

		}
	    }
    	curwp->w_flag |= WFMODE;
	}
        else {
	    mlwrite("Error: unknown variable to set");
	    return(FALSE);
	}
        return(TRUE);
}
@


1.3
log
@enforcer hit/crash when setting illegal variable fixed.
tab -1 no longer corrupts memory.
@
text
@d11 1
d88 6
@


1.2
log
@prototype changes...fully prototyped to catch problems.
@
text
@d25 3
a27 2
		if(!i)fillcol=mlgetnumber("Column: ",fillcol);
                else fillcol=atoi(&buffer[i]);
d44 3
a46 2
	    if(!i)tabsize=mlgetnumber("Tab: ",tabsize);
            else tabsize=atoi(&buffer[i]);
d50 3
a52 2
	    if(!i)indentsize=mlgetnumber("Indent: ",indentsize);
            else indentsize=atoi(&buffer[i]);
d67 1
a67 1
	    if (s<LeftMargin) return(FALSE);
d123 4
a126 1
        else return(FALSE);
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
int f,n;
d16 1
a16 1
int s=TRUE,i=0,j=0;
d21 1
d23 1
a23 1
	if(!strcmpi(&buffer[i],"wrap")) {
d28 1
a28 1
    	else if(!strcmpi(&buffer[i],"case")) {
d31 1
a31 1
	    if((s)&&(!strcmpi(&buffer[i],"on")))CheckCase=TRUE;
d34 1
a34 1
    	else if(!strcmpi(&buffer[i],"backup")) {
d37 2
a38 2
	    if((s)&&(!strcmpi(&buffer[i],"safe")))BackupBefore=0;
	    else if((s)&&(!strcmpi(&buffer[i],"on")))BackupBefore= -1;
d41 1
a41 1
    	else if(!strcmpi(&buffer[i],"tab")) {
d46 1
a46 1
    	else if(!strcmpi(&buffer[i],"indent")) {
d51 1
a51 1
    	else if(!strcmpi(&buffer[i],"left")) {
d60 1
a60 1
    	else if(!strcmpi(&buffer[i],"right")) {
d77 1
a77 1
	else if(!strcmpi(&buffer[i],"screen")) {
d80 1
a80 1
	else if(!strcmpi(&buffer[i],"interlace")) {
d82 1
a82 1
	    else if(!strcmpi(&buffer[i],"on")) SetLace(TRUE,2);
d86 1
a86 1
	else if(!strcmpi(&buffer[i],"mode")) {
d95 1
a95 1
    			if(!strcmpi(&buffer[i],"cmode")) {
d99 1
a99 1
    			else if(!strcmpi(&buffer[i],"wrap")) {
d105 1
a105 1
    			if(!strcmpi(&buffer[i],"cmode")) {
d109 1
a109 1
    			else if(!strcmpi(&buffer[i],"wrap")) {
@
