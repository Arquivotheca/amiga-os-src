head     36.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.11
date     94.01.06.21.01.18;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     93.03.11.14.18.56;  author kaori;  state Exp;
branches ;
next     36.9;

36.9
date     92.12.02.11.09.54;  author kaori;  state Exp;
branches ;
next     36.8;

36.8
date     92.08.20.15.21.42;  author kaori;  state Exp;
branches ;
next     36.7;

36.7
date     92.08.13.13.50.03;  author kaori;  state Exp;
branches ;
next     36.6;

36.6
date     92.07.31.15.25.46;  author kaori;  state Exp;
branches ;
next     36.5;

36.5
date     92.07.07.13.47.54;  author kaori;  state Exp;
branches ;
next     36.4;

36.4
date     92.06.23.19.04.01;  author kaori;  state Exp;
branches ;
next     36.3;

36.3
date     92.06.16.09.40.10;  author kaori;  state Exp;
branches ;
next     36.2;

36.2
date     91.02.26.16.42.03;  author jerryh;  state Exp;
branches ;
next     36.1;

36.1
date     90.04.20.07.11.53;  author jesup;  state Exp;
branches ;
next     ;


desc
@main().  
@


36.11
log
@changed to not require V39...
@
text
@/* prep window test program */

#include <exec/types.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/gfxmacros.h>
#include <intuition/intuition.h>
#include <workbench/startup.h>
#include <workbench/icon.h>
#include <workbench/workbench.h>
#include <libraries/gadtools.h>

#include <dos.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* for lattice */
#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/intuition_protos.h>
#include <clib/icon_protos.h>
#include <clib/gadtools_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/icon_pragmas.h>
#include <pragmas/gadtools_pragmas.h>

#include "hdtoolbox_rev.h"

#include "refresh.h"
#include "protos.h"
#include <clib/alib_protos.h>

#include "global.h"

#include "gadgetids.h"
#include "gadgets.h"
#include "windows.h"

extern struct IntuitionBase *IntuitionBase;
extern struct GfxBase *GfxBase;
       struct Library *IconBase;
       struct Library *GadToolsBase;

char St506Text[6];			// from newprep.c

extern struct WBStartup *WBenchMsg;

#define BG_COLOR	0
#define GAD_COLOR	0
#define BORDER_COLOR	1
#define DS_COLOR	1

char *Vers = VERSTAG;

ULONG colors[4] = { BG_COLOR,GAD_COLOR,BORDER_COLOR,DS_COLOR };

void main (int,char **);

//
void *vi = NULL;
UWORD XtraTop;
extern struct Gadget *glist1;
//

struct TextAttr TOPAZ80 = {	/* 39.13 */
	(STRPTR)"topaz.font",
	TOPAZ_EIGHTY,0,0
};

struct TextFont *tfont = NULL;	/* 39.13 */

void PutTextFont(struct StringExtend *tf)	/* 39.13 */
{
	tf->Font = tfont;
}

void
main(argc,argv)
	int argc;
	char *argv[];
{
	struct Window *w;
	struct DiskObject *diskobj = NULL;
	char *str,*wbname;

	struct Screen *screen = NULL;		// for gadtools
	UWORD ZoomSize[4] = { 0, 0, 200, 0 };	// for OpenWindowTags()

#ifdef MEMCHECK
	mem_init(2048L);
#endif
	IntuitionBase = (struct IntuitionBase *)
			OpenLibrary("intuition.library",37L);
	if (!IntuitionBase)
		_exit(200);

	GfxBase = (struct GfxBase *)
		  OpenLibrary("graphics.library",37L);
	if (!GfxBase)
	{
		CloseLibrary((struct Library *) IntuitionBase);
		_exit(100);
	}
	IconBase = OpenLibrary("icon.library",37L);
	if (!IconBase)
	{
		CloseLibrary((struct Library *) IntuitionBase);
		CloseLibrary((struct Library *) GfxBase);
		_exit(50);
	}

// These stuff is for gadtools.library and 2.0 types gadgetes.
	GadToolsBase = OpenLibrary("gadtools.library",37L);
	if (!GadToolsBase)
	{
		CloseLibrary((struct Library *) IntuitionBase);
		CloseLibrary((struct Library *) GfxBase);
		CloseLibrary((struct Library *) IconBase);
		_exit(50);
	}

	/* Open topaz 8 font: 39.13 */
	if (!(tfont = OpenFont(&TOPAZ80)))
	{
		CloseLibrary((struct Library *) IntuitionBase);
		CloseLibrary((struct Library *) GfxBase);
		CloseLibrary((struct Library *) IconBase);
		CloseLibrary((struct Library *) GadToolsBase);
		_exit(50);
	}

	screen = LockPubScreen(NULL);
	if (!screen)
	{
		CloseLibrary((struct Library *) IntuitionBase);
		CloseLibrary((struct Library *) GfxBase);
		CloseLibrary((struct Library *) IconBase);
		CloseLibrary((struct Library *) GadToolsBase);
		CloseFont(tfont);
		_exit(50);
	}
	vi = GetVisualInfo(screen, TAG_DONE);
	if (!vi)
	{
		CloseLibrary((struct Library *) IntuitionBase);
		CloseLibrary((struct Library *) GfxBase);
		CloseLibrary((struct Library *) IconBase);
		CloseLibrary((struct Library *) GadToolsBase);
		CloseFont(tfont);
		UnlockPubScreen(NULL, screen);
		_exit(50);
	}
//

	/* parse arguements, read (optionally) scsi device name,addrs,luns */
	/* works for both WB and CLI */
	if (argc > 1)
	{
		if (argc > 5)
		{
			printf("Bad arguements!\n");
			_exit(20);
		}
	        if (*argv[1] == '?') {
                  printf("Usage: %s [driver.device] [MaxID] [MaxLUN] [XT.device]\n",
                    argv[0]);
                  _exit(0);
                  }

		stccpy(scsi_device,argv[1],33);
		if (argc > 2)
			scsi_addrs  = atoi(argv[2]) + 1;
		if (argc > 3)
			scsi_luns   = atoi(argv[3]) + 1;
		if (argc > 4)
			stccpy(xt_name,argv[4],7);
	} else {
		if (argc == 1)
		{
			/* read WBObject anyway to get defaults */
			wbname = argv[1];
		} else if (argc == 0) {
			/* argv == WBenchMsg */
			wbname = WBenchMsg->sm_ArgList->wa_Name;
		}
		if (wbname && (diskobj = GetDiskObject(wbname)))
		{
			str = FindToolType(diskobj->do_ToolTypes,
					   "SCSI_DEVICE_NAME");
			if (str)
				stccpy(scsi_device,str,33);

			str = FindToolType(diskobj->do_ToolTypes,
					   "SCSI_MAX_ADDRESS");
			if (str)
				scsi_addrs = atoi(str) + 1;

			str = FindToolType(diskobj->do_ToolTypes,
					   "SCSI_MAX_LUN");
			if (str)
				scsi_luns = atoi(str) + 1;

			str = FindToolType(diskobj->do_ToolTypes,
					   "XT_NAME");
			if (str)
				stccpy(xt_name,str,7);
		}
	}

	/* set st-506/xt gadget on prep screen to right text */
//	St506_IText.IText = xt_name;
	strcpy(St506Text,xt_name);

	/* null out so we can use HandleScreen (which adds them) */
//	gad = NewWindowStructure1.FirstGadget;
//	NewWindowStructure1.FirstGadget = NULL;

//	w = OpenWindow(&NewWindowStructure1);

	/* For new gadtools type gadgets */
	XtraTop = screen->WBorTop + (screen->Font->ta_YSize + 1) - 11;
	ZoomSize[3] = XtraTop + 11;
	do_reposition(&IntuiTextList2);
	do_repositionRequester(&RequesterStructure6);
	do_repositionRequester(&RequesterStructure7);
	do_repositionRequester(&RequesterStructure77);
	do_repositionRequester(&RequesterStructure9);
	do_repositionRequester(&RequesterStructure11);
	do_repositionRequester(&RequesterStructure13);
//	PutTextFont(&StringExt);
	StringExt.Font = tfont;

	w = OpenWindowTags(&NewWindowStructure1,
			WA_Zoom, ZoomSize,
			WA_InnerWidth, NewWindowStructure1.Width - 8,
			WA_InnerHeight, NewWindowStructure1.Height - 24,
			WA_AutoAdjust, TRUE,
			WA_PubScreen, screen,
			TAG_DONE);

	GT_RefreshWindow(w,NULL);
//
	if (w) {
		struct Gadget *gtmp = NULL;
//		SetMenuStrip(w,&MenuList1);	// Right now, no menu.

		HandleWindowNew(w,NULL,&glist1,
				NewWindowStructure1.Title,
				NewWindowStructure1.IDCMPFlags,	// 39.10
				HandlePrep,
				NULL,
				PrepInit,
				CreateAllGadgets1,&gtmp,NULL);
//		ClearMenuStrip(w);		// Right now, no menu.

		/* we're exiting, clean up */
		FreeEverything();
		CloseWindow(w);
	}

	if (diskobj)
		FreeDiskObject(diskobj);

	/* Clean up gadtools stuff */
	FreeVisualInfo(vi);
	CloseLibrary((struct Library *) GadToolsBase);
	if (screen) UnlockPubScreen(NULL, screen);
	if (tfont) CloseFont(tfont);	/* 39.13 */
//
	CloseLibrary((struct Library *) IconBase);
	CloseLibrary((struct Library *) GfxBase);
	CloseLibrary((struct Library *) IntuitionBase);

#ifdef MEMCHECK
	mem_free();
#endif
}

void
FreeEverything ()
{
	register struct Drive *d,*nextd = NULL;
	register struct DriveDef *dd,*nextdd = NULL;

	for (d = FirstDrive; d; d = nextd)
	{
		nextd = d->NextDrive;
		FreeRDB(d->rdb);
		FreeRDB(d->oldrdb);

		FreeBad(d->bad);
		FreeMem((char *) d, sizeof(*d));
	}

	for (dd = SCSI_Defs; dd; dd = nextdd)
	{
		nextdd = dd->Succ;
		FreeRDB(dd->Initial_RDB);
		FreeMem((char *) dd, sizeof(*dd));
	}

	for (dd = St506_Defs; dd; dd = nextdd)
	{
		nextdd = dd->Succ;
		FreeRDB(dd->Initial_RDB);
		FreeMem((char *) dd, sizeof(*dd));
	}

	FreeCommit();
}

/* allocate 80 chars per line of commit text that will be used */

int
AllocCommit ()
{
	register short i;

	if (CommitText[FIRST_LINE] =
		AllocMem((LAST_LINE - FIRST_LINE + 1) * 80,
			 MEMF_CLEAR|MEMF_PUBLIC))
	{
		for (i = FIRST_LINE+1; i <= LAST_LINE; i++)
			CommitText[i] = CommitText[FIRST_LINE] +
					(i - FIRST_LINE) * 80;

		return TRUE;
	}
	return FALSE;
}

void
FreeCommit ()
{
	if (CommitText[FIRST_LINE])
		FreeMem(CommitText[FIRST_LINE],
			(LAST_LINE - FIRST_LINE + 1) * 80);
	CommitText[FIRST_LINE] = NULL;
}


#if 0
void delay(long time)
{
	long i;

	for (i = 0L; i != time*2000; i++);
}
#endif

#if 0
int  window_size = 0;	/* 1 means window is small */
char OldWindowTitle[100];


/* handle menu selections - returns whether it made the window big */

int HandleMenus(struct Window *w, struct IntuiMessage *msg)
{
    UWORD menunumber;
    struct MenuItem *Item;
    int made_small = FALSE;
    int made_big   = FALSE;

    /* stop selections while handling - note: may still get a second */

    ClearMenuStrip(w);

    menunumber = msg->Code;
    while (menunumber != MENUNULL)
    {
	Item = ItemAddress(&MenuList1,menunumber);

	if (window_size == 0 && ITEMNUM(menunumber) == 0)
	{
	    /* make smaller */

	    if (w->Width == NewWindowStructure1.Width)
	    {
		SizeWindow(w, -NewWindowStructure1.Width + 104,
				-NewWindowStructure1.Height + 11);
		MenuItem1.Flags &= ~ITEMENABLED;
		MenuItem2.Flags |= ITEMENABLED;
	    }

	    made_small = TRUE;
	    window_size = 1;
	}

	else if (window_size == 1 && ITEMNUM(menunumber) == 1)
	{
	    /* make bigger */

	    if (w->Width != NewWindowStructure1.Width)
	    {
	        /* must first move to upper left corner.  REAL dangerous!! */

		MoveWindow(w,-(w->LeftEdge),-(w->TopEdge));
		SizeWindow(w, NewWindowStructure1.Width - 104,
				NewWindowStructure1.Height - 11);
		MenuItem1.Flags |= ITEMENABLED;
		MenuItem2.Flags &= ~ITEMENABLED;
	    }

	    made_big = TRUE;
	    window_size = 0;
	}

	menunumber = Item->NextSelect;
    }

    SetMenuStrip(w,&MenuList1);

    /* put up a little display, eat input other than menus */
    /* initial msg variable isn't needed, reuse */

    if (made_small)
    {
	LittleDisplay(w);

	while (made_small)
	{
	    WaitPort(w->UserPort);
	    while (made_small && (msg = (struct IntuiMessage *)GetMsg(w->UserPort)) != NULL)
	    {
	    /* exit when Handlemenus returns TRUE */

		if (msg->Class == MENUPICK)
		    made_small = !(HandleMenus(w,msg));
		ReplyMsg((struct Message *) msg);
	    }
	}
	SetWindowTitles(w,OldWindowTitle,(char *) -1);
    }

    return (made_big);
}

void LittleDisplay (struct Window *w)
{
    char *Title, *OldTitle = OldWindowTitle;

    Title = (char *)w->Title;

    do {
	*OldTitle++ = *Title;
    } while (*Title++);

    SetWindowTitles(w,"HDToolBox",(char *) -1);
}
#endif
@


36.10
log
@Fix tooltype parsing part.(scsi_addr->scsi_luns).
@
text
@d97 1
a97 1
			OpenLibrary("intuition.library",39L);
d102 1
a102 1
		  OpenLibrary("graphics.library",39L);
d108 1
a108 1
	IconBase = OpenLibrary("icon.library",39L);
d117 1
a117 1
	GadToolsBase = OpenLibrary("gadtools.library",39L);
@


36.9
log
@Open topaz 8 font for hard code of INTEGER and STRING gadgets.
Well, it's not good, but requester gadgets need this at this point
@
text
@d176 1
a176 1
			scsi_addrs  = atoi(argv[2]);
d178 1
a178 1
			scsi_luns   = atoi(argv[3]);
d205 1
a205 1
				scsi_addrs = atoi(str) + 1;
@


36.8
log
@use standard version string format
@
text
@d69 12
d97 1
a97 1
			OpenLibrary("intuition.library",36L);
d101 2
a102 2
	GfxBase = (struct GfxBase *) 
		  OpenLibrary("graphics.library",36L);
d108 1
a108 1
	IconBase = OpenLibrary("icon.library",36L);
d116 2
a117 2
// These stuff is for gadtools.library and 2.0 types gadgtes.
	GadToolsBase = OpenLibrary("gadtools.library",36L);
d125 11
d143 1
d153 1
d224 1
a224 1
//	For new gadtools type gadgets
d234 2
d249 1
a249 1
//		SetMenuStrip(w,&MenuList1);// Right now, I don't want to use menu.
d255 1
a255 1
				NULL,//prep_draw,	//MMM
d258 1
a258 1
//		ClearMenuStrip(w);	// Right now, I don't want to use menu.
d268 1
a268 1
//      Clean up gadtools stuff
d271 2
a272 1
	if(screen) UnlockPubScreen(NULL, screen);
d328 1
a328 1
			CommitText[i] = CommitText[FIRST_LINE] + 
d346 1
a346 1

d353 1
d355 1
a355 1

d361 1
a361 1
#if 0
@


36.7
log
@Path IDCMPFlags argument in HandleWindowNew()
@
text
@a51 1
//#define BG_COLOR	2
d57 1
a57 2
//char *Vers = "\0$VER: HDToolBox " HDTVERSION;
char *Vers = "\0$VER: " VERS;
@


36.6
log
@Add GetTypeHandler(), GetFileSys() and change MakeFileSys().

@
text
@d228 1
@


36.5
log
@No longer reference of NULL pointer
@
text
@d207 1
@


36.4
log
@Change window size.
@
text
@d222 1
d230 1
a230 1
				CreateAllGadgets1,NULL,NULL);
d332 1
a332 1

a413 1

d426 1
a426 2


@


36.3
log
@update gadtools gadgets
@
text
@d46 1
a46 1
       struct Library *GadToolsBase;	// Kaori
d48 1
a48 1
char St506Text[6];			// Kaori --- from newprep.c
d53 1
a53 1
#define BG_COLOR	0	// Kaori
d59 1
d65 5
a69 3
void *vi = NULL;		// Kaori
UWORD XtraTop;			// Kaori
extern struct Gadget *glist1;	// Kaori
d80 2
a81 2
	struct Screen *screen = NULL;		// Kaori
	UWORD ZoomSize[4] = { 0, 0, 200, 0 };	// Kaori
d105 2
a106 1
// Kaori
d200 2
a201 1
// Kaori
d205 6
a210 1
	do_reposition(&IntuiTextList4);
d214 1
a214 1
			WA_InnerHeight, NewWindowStructure1.Height - 16,
d226 4
a229 2
				HandlePrep,prep_draw,PrepInit,
				CreateAllGadgets1,NULL,NULL);	// Kaori
d239 2
a240 1
// Kaori
@


36.2
log
@updated to compile under lc 5.10a.
Corrected "Small Window" refresh problem.
Version string now included.
@
text
@d11 1
d23 1
d29 1
d31 2
d46 3
d52 2
a53 1
#define BG_COLOR	2
d58 1
a58 1
char *Vers = "\0$VER: HDToolBox " HDTVERSION;
d64 4
a73 1
	struct Gadget *gad;
d77 3
d84 1
a84 1
			OpenLibrary("intuition.library",33L);
d89 1
a89 1
		  OpenLibrary("graphics.library",0L);
d95 1
a95 1
	IconBase = OpenLibrary("icon.library",0L);
d102 29
d188 2
a189 1
	St506_IText.IText = xt_name;
d192 16
a207 2
	gad = NewWindowStructure1.FirstGadget;
	NewWindowStructure1.FirstGadget = NULL;
d209 2
a210 1
	w = OpenWindow(&NewWindowStructure1);
d212 1
a212 4
		SetMenuStrip(w,&MenuList1);
		HandleWindow(w,&IntuiTextList1,gad,NewWindowStructure1.Title,
			     HandlePrep,prep_draw,PrepInit);
		ClearMenuStrip(w);
d214 6
d227 5
a231 1

d305 3
a307 1
void delay(long time) {
d309 2
a310 4
long i;

  for (i=0L; i!=time*2000; i++);
  }
a312 2


d319 6
a324 1
int HandleMenus (struct Window *w, struct IntuiMessage *msg) {
d326 43
a368 50
UWORD menunumber;
struct MenuItem *Item;
int made_small = FALSE;
int made_big   = FALSE;

  /* stop selections while handling - note: may still get a second */

  ClearMenuStrip(w);

  menunumber = msg->Code;
  while (menunumber != MENUNULL) {

    Item = ItemAddress(&MenuList1,menunumber);

    if (window_size == 0 && ITEMNUM(menunumber) == 0) {

      /* make smaller */

      if (w->Width == NewWindowStructure1.Width) {
        SizeWindow(w, -NewWindowStructure1.Width + 104,
          -NewWindowStructure1.Height + 11);
        MenuItem1.Flags &= ~ITEMENABLED;
        MenuItem2.Flags |= ITEMENABLED;
        }

      made_small = TRUE;
      window_size = 1;

      }

    else if (window_size == 1 && ITEMNUM(menunumber) == 1) {

      /* make bigger */

      if (w->Width != NewWindowStructure1.Width) {

        /* must first move to upper left corner.  REAL dangerous!! */

        MoveWindow(w,-(w->LeftEdge),-(w->TopEdge));

        SizeWindow(w, NewWindowStructure1.Width - 104,
          NewWindowStructure1.Height - 11);

        MenuItem1.Flags |= ITEMENABLED;
        MenuItem2.Flags &= ~ITEMENABLED;
        }

      made_big = TRUE;
      window_size = 0;
      }
d370 1
a370 1
    menunumber = Item->NextSelect;
d373 1
a373 1
  SetMenuStrip(w,&MenuList1);
d375 2
a376 2
  /* put up a little display, eat input other than menus */
  /* initial msg variable isn't needed, reuse */
d378 17
a394 15
  if (made_small) {
    LittleDisplay(w);

    while (made_small) {
      WaitPort(w->UserPort);
      while (made_small && (msg = (struct IntuiMessage *)
      GetMsg(w->UserPort)) != NULL) {

        /* exit when Handlemenus returns TRUE */

        if (msg->Class == MENUPICK) made_small = !(HandleMenus(w,msg));
        ReplyMsg((struct Message *) msg);
        }
      }
    SetWindowTitles(w,OldWindowTitle,(char *) -1);
d397 2
a398 2
  return (made_big);
  }
d401 3
d405 1
d407 3
d411 2
a412 14

void    LittleDisplay (struct Window *w) {

  char *Title, *OldTitle = OldWindowTitle;

  Title = (char *)w->Title;

  do {
    *OldTitle++ = *Title;
    }  while (*Title++);

  SetWindowTitles(w,"HDToolBox",(char *) -1);

  }
@


36.1
log
@initial check in
@
text
@d18 4
a21 3
#include <proto/exec.h>
#include <proto/graphics.h>
#include <proto/intuition.h>
d23 5
d30 1
d49 2
d53 1
a53 3
char *FindToolType(char **,char *);
struct DiskObject *GetDiskObject(char *);
void FreeDiskObject(struct DiskObject *);
d97 6
a235 1
int window_size = 0;	/* 1 means window is small */
d237 2
a238 1
/* handle menu selections - returns whether it made the window big */
d240 1
a240 9
int
HandleMenus (w,msg)
	struct Window *w;
	struct IntuiMessage *msg;
{
	UWORD menunumber;
	struct MenuItem *Item;
	int made_small = FALSE;
	int made_big   = FALSE;
d242 5
a246 37
	/* stop selections while handling - note: may still get a second */
	ClearMenuStrip(w);

	menunumber = msg->Code;
	while (menunumber != MENUNULL)
	{
		Item = ItemAddress(&MenuList1,menunumber);
		if (window_size == 0 && ITEMNUM(menunumber) == 0)
		{
			/* make smaller */
			if (w->Width == NewWindowStructure1.Width)
			{
				SizeWindow(w,-NewWindowStructure1.Width  + 100,
					     -NewWindowStructure1.Height + 50);
				MenuItem1.Flags &= ~ITEMENABLED;
				MenuItem2.Flags |= ITEMENABLED;
			}
			made_small = TRUE;
			window_size = 1;

		} else if (window_size == 1 && ITEMNUM(menunumber) == 1) {
			/* make bigger */
			if (w->Width != NewWindowStructure1.Width)
			{
				/* must first move to upper left corner */
				/* REAL dangerous!! */
				MoveWindow(w,-(w->LeftEdge),-(w->TopEdge));
				SizeWindow(w,NewWindowStructure1.Width  - 100,
					     NewWindowStructure1.Height - 50);
				MenuItem1.Flags |= ITEMENABLED;
				MenuItem2.Flags &= ~ITEMENABLED;
			}
			made_big = TRUE;
			window_size = 0;
		}
		menunumber = Item->NextSelect;
	}
d248 2
a249 1
	SetMenuStrip(w,&MenuList1);
a250 6
	/* put up a little display, eat input other than menus */
	/* initial msg variable isn't needed, reuse */

	if (made_small)
	{
		LittleDisplay(w);
d252 1
a252 20
		while (made_small)
		{
			WaitPort(w->UserPort);
			while (made_small &&
			       (msg = (struct IntuiMessage *)
			              GetMsg(w->UserPort)) != NULL)
			{
				/* exit when Handlemenus returns TRUE */
				if (msg->Class == MENUPICK)
					made_small = !(HandleMenus(w,msg));
				else if (msg->Class == REFRESHWINDOW)
				{
					BeginRefresh(w);
					LittleDisplay(w);
					EndRefresh(w,TRUE);
				}
				ReplyMsg((struct Message *) msg);
			}
		}
	}
d254 1
a254 2
	return (made_big);
}
d256 95
a350 5
void
LittleDisplay (w)
	struct Window *w;
{
	struct RastPort *rp;
d352 1
a352 1
	rp = w->RPort;
a353 5
	SetAPen(rp,2);
	SetDrMd(rp,JAM1);
	SetAfPt(rp,NULL,0);
	RectFill(rp,w->BorderLeft,w->BorderTop,
		 w->Width - w->BorderRight - 1,w->Height - w->BorderBottom - 1);
a354 4
	SetAPen(rp,1);
	Move(rp,8,30);
	Text(rp,"HD Prep",7L);
}
@
