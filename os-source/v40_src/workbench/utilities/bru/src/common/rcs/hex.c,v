head     37.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.2
date     91.02.15.14.13.11;  author eric;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.23.16.54.32;  author eric;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.23.16.54.29;  author eric;  state Exp;
branches ;
next     ;


desc
@@


37.2
log
@New from Fred Fish 12 Feb 91
@
text
@/************************************************************************
 *									*
 *	Copyright (c) 1988 Enhanced Software Technologies, Inc.		*
 *			     All Rights Reserved			*
 *									*
 *	This software and/or documentation is protected by U.S.		*
 *	Copyright Law (Title 17 United States Code).  Unauthorized	*
 *	reproduction and/or sales may result in imprisonment of up	*
 *	to 1 year and fines of up to $10,000 (17 USC 506).		*
 *	Copyright infringers may also be subject to civil liability.	*
 *									*
 ************************************************************************
 */


/*
 *  FILE
 *
 *	hex.c    routines to convert to/from hex
 *
 *  SCCS
 *
 *	@@(#)hex.c	12.8	11 Feb 1991
 *
 *  DESCRIPTION
 *
 *	For greater portability across machine boundries, all
 *	numeric information in the archive header blocks is
 *	stored in ascii hex form.  These routines convert between
 *	the external and internal forms.
 *
 *  NOTE
 *
 *	Up until version 12.1, bru generated and expected archives
 *	with lowercase hex (I.E. "abcdef" instead of "ABCDEF").  No
 *	known released version of bru ever generated uppercase hex,
 *	and in fact, due to a coding oversight, would not have been
 *	able to read it's own archives if it did.  The current code
 *	now accepts archives with either upper or lowercase hex.
 *
 */

#include "globals.h"

#define GETBITS(x) (isdigit(x) ? ((x)-'0') : ((s_tolower(x))-'a'+10))


/*
 *  FUNCTION
 *
 *	fromhex    convert from hex to internal format
 *
 *  SYNOPSIS
 *
 *	S32BIT fromhex (cpin, insize)
 *	char *cpin;
 *	int insize;
 *
 *  DESCRIPTION
 *
 *	Given pointer to an ascii hex string and the size of the
 *	string, converts the string to a signed 32 bit number and
 *	returns the result.  Note that the string may not be null
 *	terminated, therefore its size is determined by "insize".
 *
 *	Note that previous versions of this routine have used
 *	sscanf or strtol.  Profiling indicated that bru
 *	was spending a significant percentage of it's time in
 *	these routines so the conversion is now handled "brute force".
 *
 *	Note that this version is now less portable since it assumes
 *	that the native character set is ascii and that integers
 *	have "normal" bit patterns so they can be built by shifts and
 *	masks in the order coded in.  These potential problems would
 *	have been hidden in strtol() or sscanf().
 *
 */


/*
 *  PSEUDO CODE
 *
 *	Begin fromhex
 *	    Initialize result accumulator to zero
 *	    If string pointer is bad or size is bad then
 *		Inform user about bug
 *	    Else
 *		While there is leading whitespace
 *		    Skip the whitespace character
 *		    One less character to convert
 *		End while
 *		While there are more characters that are hex
 *		    Shift result left to make room for four bits
 *		    Mask in the lower bits
 *		    Skip to next input character
 *		End while
 *	    End if
 *	    Return result
 *	End fromhex
 *
 */

S32BIT fromhex (cpin, insize)
char *cpin;
int insize;
{
    S32BIT result;

    result = 0L;
    if (cpin == NULL || insize > 8 || insize < 1) {
	bru_message (MSG_BUG, "fromhex");
    } else {
	while (isspace (*cpin)) {
	    ++cpin;
	    --insize;
	}
	while (insize-- && isxdigit (*cpin)) {
	    result <<= 4;
	    result |= GETBITS (*cpin);
	    ++cpin;
	}
    }
    return (result);
}


/*
 *  FUNCTION
 *
 *	tohex    convert from internal format to ascii hex
 *
 *  SYNOPSIS
 *
 *	VOID tohex (out, val, outsize)
 *	char *out;
 *	S32BIT val;
 *	int outsize;
 *
 *  DESCRIPTION
 *
 *	Given pointer to place to store ascii string (out), value
 *	to convert to ascii hex (val), and the size of the output
 *	buffer, converts the value to hex and saves in the the
 *	specified buffer.  Note that the result is not null terminated.
 *
 */


/*
 *  PSEUDO CODE
 *
 *	Begin tohex
 *	    If no output buffer or bad buffer size
 *		Inform user about bug
 *	    Else
 *		Convert value to hex string
 *		Copy string to output
 *	    End if
 *	End tohex
 *
 */

VOID tohex (out, val, outsize)
char *out;
S32BIT val;
int outsize;
{
    char buf[9];
    char *bufp;

    if (out == NULL || outsize > 8 || outsize < 1) {
	bru_message (MSG_BUG, "tohex");
    } else {
	(VOID) s_sprintf (buf, "%*lx", outsize, val);
	for (bufp = buf; *bufp; bufp++) {
	    *bufp = s_tolower (*bufp);
	}
	(VOID) s_memcpy (out, buf, outsize);
    }
}

@


37.1
log
@New version January 1991
@
text
@d23 1
a23 1
 *	@@(#)hex.c	12.6	01 Jan 1991
@


37.0
log
@added to rcs
@
text
@d23 1
a23 1
 *	@@(#)hex.c	11.20	10/10/89
d32 9
d43 1
a43 1
#include "autoconfig.h"
d45 1
a45 2
#include <stdio.h>
#include <ctype.h>
a46 17
#if (unix || xenix)
#  include <sys/types.h>
#else
#  include "sys.h"
#endif

#include "typedefs.h"
#include "dbug.h"
#include "manifest.h"
#include "usermsg.h"

#define GETBITS(x) (isdigit(x) ? ((x)-'0') : ((x)-'a'+10))

extern char *s_memcpy ();	/* Copy strings around */
extern int s_sprintf ();	/* Formatted print to buffer */
extern VOID bru_message ();	/* Report an error to user */

d56 2
a57 2
 *	register char *cpin;
 *	register int insize;
d67 1
a67 1
 *	s_sscanf or s_strtol.  Profiling indicated that bru
d104 2
a105 2
register char *cpin;
register int insize;
d107 1
a107 1
    register S32BIT result;
d135 3
a137 3
 *	register char *out;
 *	register S32BIT val;
 *	register int outsize;
d164 3
a166 3
register char *out;
register S32BIT val;
register int outsize;
d168 2
a169 1
    auto char buf[9];
d175 3
@
