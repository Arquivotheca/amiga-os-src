head     37.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.2
date     91.02.15.13.49.01;  author eric;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.23.16.13.47;  author eric;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.23.16.13.43;  author eric;  state Exp;
branches ;
next     ;


desc
@@


37.2
log
@New from Fred Fish 12 Feb 91
@
text
@/************************************************************************
 *									*
 *	Copyright (c) 1988 Enhanced Software Technologies, Inc.		*
 *			   All Rights Reserved				*
 *									*
 *	This software and/or documentation is protected by U.S.		*
 *	Copyright Law (Title 17 United States Code).  Unauthorized	*
 *	reproduction and/or sales may result in imprisonment of up	*
 *	to 1 year and fines of up to $10,000 (17 USC 506).		*
 *	Copyright infringers may also be subject to civil liability.	*
 *									*
 ************************************************************************
 */


/*
 *  FILE
 *
 *	sys.h    header file to fake all stuff normally found in unix headers
 *
 *  SCCS
 *
 *	@@(#)sys.h	12.8	11 Feb 1991
 *
 *  DESCRIPTION
 *
 *	This header file fakes the stuff normally found in the unix header
 *	files, like the definition for the stat structure, typedefs like
 *	"ushort", etc.
 *
 */

#if !unix && !xenix	/* Just in case we try to include this anyway! */

#define O_CTG	0	/* Found in <fcntl.h> on Masscomps */

/*  Normally found in <sys/types.h> */
#if 0	/* is in new Lattice for AmigaDOS */
typedef unsigned short ushort;
typedef long off_t;
typedef short dev_t;
typedef ushort ino_t;
typedef long time_t;
#endif

/* Normally found in <grp.h> */

struct group {
    char *gr_name;
    char *gr_passwd;
    int gr_gid;
    char **gr_mem;
};

/* Normally found in <pwd.h> */

struct passwd {
    char *pw_name;
    char *pw_passwd;
    int pw_uid;
    int pw_gid;
    char *pw_age;
    char *pw_comment;
    char *pw_gecos;
    char *pw_dir;
    char *pw_shell;
};

/*  Define away some errno values that may not be defined */

#if !EPERM
#  define EPERM 1000	/* Bogus value that should never happen */
#endif

#if !EINTR
#  define EINTR 1000	/* Bogus value that should never happen */
#endif

#endif
@


37.1
log
@New version January 1991
@
text
@d23 1
a23 1
 *	@@(#)sys.h	12.6	01 Jan 1991
@


37.0
log
@added to rcs
@
text
@d23 1
a23 1
 *	@@(#)sys.h	11.20	10/10/89
d35 1
a35 1
/*  Normally found in <fcntl.h> */
a36 13
#define O_RDONLY 	00000		/* Read only */
#define O_WRONLY	00001		/* Write only */
#define O_RDWR		00002		/* Read and Write */
#define O_NDELAY	00004		/* Nonblocking IO */
#define O_CREAT		00400		/* Create if necessary */
#define O_TRUNC		01000		/* Truncate to zero length */
#define O_CTG

#if LATTICE		/* bug fix, lattice 3.10 leaves file locked */
#  undef O_NDELAY	/* even after fclose() if open()'d with O_NDELAY */
#  define O_NDELAY 0
#endif

d38 1
d40 2
a42 2
typedef short dev_t;
typedef long off_t;
a43 44

/*  Normally found in <sys/stat.h> */
#define S_IFMT		0170000		/* Mask for file type */
#define S_IEXEC		0000100		/* Owner Execute/search permission */
#define S_IWRITE	0000200		/* Owner Write permission */
#define S_IREAD		0000400		/* Owner Read permission */
#define S_ISVTX		0001000		/* Save swapped text after use */
#define S_ISGID		0002000		/* Set group id on execution */
#define S_ISUID		0004000		/* Set user id on execution */
#define S_IFIFO		0010000		/* A fifo */
#define S_IFCHR		0020000		/* A character special file */
#define S_IFDIR		0040000		/* A directory file */
#define S_IFBLK		0060000		/* A block special file */
#define S_IFREG		0100000		/* A a regular file */
#define S_IFLNK		0120000		/* A symbolic link (BSD) */

struct stat {
    ushort st_mode;	/* File mode as used by mknod */
    ino_t st_ino;	/* Inode number */
    dev_t st_dev;	/* Major device number of device containing file */
    dev_t st_rdev;	/* Minor device number of device containing file */
    short st_nlink;	/* Number of links */
    ushort st_uid;	/* File owner's user ID number */
    ushort st_gid;	/* File owner's group ID number */
    off_t st_size;	/* File size in bytes */
    time_t st_atime;	/* Timestamp of last access to file's contents */
    time_t st_mtime;	/* Timestamp of last modification of file */
    time_t st_ctime;    /* Timestamp of file creation */
};
    
/*  Normally found in <time.h> */

struct tm {
    int tm_sec;		/* Seconds (0-59) */
    int tm_min;		/* Minutes (0-59) */
    int tm_hour;	/* Hours (0-23) */
    int tm_mday;	/* Day of the month (1-31) */
    int tm_mon;		/* Month of the year (0-11) */
    int tm_year;	/* Year - 1900 */
    int tm_wday;	/* Day of the week (Sunday is 0) */
    int tm_yday;	/* Day of the year (0-365) */
    int tm_isdst;	/* Non-zero if Daylight Savings Time */
#if amiga
    int tm_notused;
a44 49
};

#if MANX

/*
 * Just to make things interesting, Manx C defines the tm structure
 * similarly to the standard tm structure, but uses *shorts* for each
 * member.  Thus we convert between the internal tm form and the manx tm
 * form at each library call (ick!).
 */

struct manx_tm {
    short tm_sec;	/* Seconds (0-59) */
    short tm_min;	/* Minutes (0-59) */
    short tm_hour;	/* Hours (0-23) */
    short tm_mday;	/* Day of the month (1-31) */
    short tm_mon;	/* Month of the year (0-11) */
    short tm_year;	/* Year - 1900 */
    short tm_wday;	/* Day of the week (Sunday is 0) */
    short tm_yday;	/* Day of the year (0-365) */
    short tm_isdst;	/* Non-zero if Daylight Savings Time */
#if amiga
    short tm_notused;
#endif
};

#endif	/* MANX */

/*  Normally found in <signal.h> */

#if amiga
#ifndef SIG_DFL
#  define SIG_DFL (int (*)())0		/* default action */
#endif
#ifndef SIG_IGN
#  define SIG_IGN (int (*)())1		/* ignore the signal */
#endif
#endif

#if LATTICE
#  define SIG_ERR (int (*)())(-1)	/* error return */
#else
#ifndef SIG_IGN
#  define SIG_IGN (int (*)())0
#endif
#endif

#define SIGINT		2	/* Interrupt */
#define SIGQUIT		3	/* Quit */
@
