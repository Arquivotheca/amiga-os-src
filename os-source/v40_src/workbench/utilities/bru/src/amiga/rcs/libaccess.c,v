head     37.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.2
date     91.02.15.13.48.02;  author eric;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.23.16.16.21;  author eric;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.23.16.16.17;  author eric;  state Exp;
branches ;
next     ;


desc
@@


37.2
log
@New from Fred Fish 12 Feb 91
@
text
@/************************************************************************
 *									*
 *	Copyright (c) 1988 Enhanced Software Technologies, Inc.		*
 *			     All Rights Reserved			*
 *									*
 *	This software and/or documentation is protected by U.S.		*
 *	Copyright Law (Title 17 United States Code).  Unauthorized	*
 *	reproduction and/or sales may result in imprisonment of up	*
 *	to 1 year and fines of up to $10,000 (17 USC 506).		*
 *	Copyright infringers may also be subject to civil liability.	*
 *									*
 ************************************************************************
 */


/*
 *  FILE
 *
 *	libaccess.c    emulation of Unix access library routine
 *
 *  SCCS
 *
 *	@@(#)libaccess.c	12.8	11 Feb 1991
 *
 *  DESCRIPTION
 *
 *	Unix compatible emulation of the access() library routine.
 *
 *	Neither Manx nor Lattice seem to get this right, so we
 *	roll our own.
 *
 *	Note that the original amiga versions of bru fully implemented
 *	access protections on files, I.E. it honored the read and write
 *	protection bits and would not attempt to read a read-protected
 *	file or write a write-protected file.  However, by CBM's request,
 *	it was modified to subvert the file protections.
 *
 */

#include "globals.h"

int access (path, mode)
char *path;
int mode;
{
    long lck;
    struct FileInfoBlock *fp;
    int rtnval = 0;
    long prot;

    DBUG_ENTER ("access");
    if ((path == 0) || ((lck = Lock (path, (long) ACCESS_READ)) == 0)) {
	DBUG_PRINT ("acc", ("path == 0 or can't get lock"));
	rtnval = -1;
	errno = ENOENT;
    } else {
	DBUG_PRINT ("lck", ("got lock for '%s'", path));
	fp = (struct FileInfoBlock *)
		AllocMem ((long) sizeof (struct FileInfoBlock),
		(long) (MEMF_CLEAR | MEMF_CHIP));
	if (Examine (lck, fp) == 0) {
	    DBUG_PRINT ("xmn", ("can't examine lock"));
	    rtnval = -1;
	    errno = EACCES;
	} else {
	    prot = fp -> fib_Protection;
	    DBUG_PRINT ("prot", ("fp -> fib_Protection = %x, mode = %x", prot, mode));
	    if (  ((mode & 1) && (prot & FIBF_EXECUTE))
#if 0
	       || ((mode & 2) && (prot & FIBF_WRITE))
	       || ((mode & 4) && (prot & FIBF_READ))
#endif
	       ) {
		    rtnval = -1;
		    errno = EACCES;
	    }
	}
	(VOID) FreeMem (fp, (long) sizeof (struct FileInfoBlock));
	(VOID) UnLock (lck);
    }
    DBUG_PRINT ("access", ("access returns %d", rtnval));
    DBUG_RETURN (rtnval);
}
@


37.1
log
@New version January 1991
@
text
@d23 1
a23 1
 *	@@(#)libaccess.c	12.6	01 Jan 1991
d32 5
a36 14
 *	Note that the Lattice runtime environment enforces some
 *	of AmigaDOS's permission bits.  In particular, if a file is
 *	not marked readable, the Lattice read() will return an I/O
 *	error when attempting to read it.  Thus it does us no good
 *	to disable the protection checking code in this module, as
 *	we still will not be able to read the file, and the error
 *	messages will be even less obvious.  For example, with the
 *	checking here, bru will not even try to read a non-readable
 *	marked file and will produce a message about not being denied
 *	read access to the file.  Without this checking, bru will
 *	attempt to read the file, which will fail in the Lattice 
 *	runtime, and result in a message about an I/O error and the
 *	file being truncated.  To the user, this looks more like a disk
 * 	problem than a permissions problem.
d69 1
d71 3
a73 1
	       || ((mode & 4) && (prot & FIBF_READ))) {
@


37.0
log
@added to rcs
@
text
@d23 1
a23 1
 *	@@(#)libaccess.c	11.20	10/10/89
d32 15
d49 1
a49 1
#include <stdio.h>
a50 22
#if LATTICE
#  undef NULL		/* Incompatible defs in <stdio.h> and <exec/types.h> */
#endif

#include <exec/types.h>	  /* For Lattice 3.10, must be before exec.h! */
#include <exec/exec.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>
#include <errno.h>
#undef TRUE
#undef FALSE

#include "sys.h"
#include "manifest.h"
#include "dbug.h"

extern long Lock ();
extern long UnLock ();
extern VOID *AllocMem ();
extern long FreeMem ();
extern long Examine ();

d58 1
a58 1
    register long prot;
@
