head     37.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


37.0
date     91.01.23.16.16.54;  author eric;  state Exp;
branches ;
next     ;


desc
@@


37.0
log
@added to rcs
@
text
@/************************************************************************
 *									*
 *	Copyright (c) 1988 Enhanced Software Technologies, Inc.		*
 *			    All Rights Reserved				*
 *									*
 *	This software and/or documentation is protected by U.S.		*
 *	Copyright Law (Title 17 United States Code).  Unauthorized	*
 *	reproduction and/or sales may result in imprisonment of up	*
 *	to 1 year and fines of up to $10,000 (17 USC 506).		*
 *	Copyright infringers may also be subject to civil liability.	*
 *									*
 ************************************************************************
 */


/*
 *  FILE
 *
 *	extio.c    extended IO request routines
 *
 *  SCCS
 *
 *	@@(#)extio.c	11.20	10/10/89
 *
 *  DESCRIPTION
 *
 *	Extended IO request routines.  Heavily modified from
 *	version in ROM Kernel Manual.
 *
 *  AUTHOR
 *
 *	Fred Fish
 *	Tempe, Arizona
 *
 */
 
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <exec/interrupts.h>
#include <exec/ports.h>
#include <exec/libraries.h>
#include <exec/io.h>
#include <exec/tasks.h>
#include <exec/execbase.h>
#include <stdio.h>
#include "dbug.h"

long _DExtIOVal = 0;	/* Extension to DeleteExtIO() */


/*
 *
 *   NAME
 *
 *	CreateExtIO() -- create an Extended IO request
 *
 *   SYNOPSIS
 *
 *	ioReq = CreateExtIO (ioReplyPort, size);
 *
 *   FUNCTION
 *
 *	Allocates memory for and initializes a new IO request block
 *	of a user-specified number of bytes.
 *
 *   INPUTS
 *
 *	ioReplyPort - a pointer to an already initialized
 *	        message port to be used for this IO request's reply port.
 *
 *   RESULT
 *
 *	Returns a pointer to the new block.  Pointer is of the type
 *	struct IORequest.
 *
 *	0 indicates inability to allocate enough memory for the request block
 *	or not enough signals available.
 *
 *   EXAMPLE
 *
 *	struct IORequest *myBlock;
 *	if( (myBlock = CreateExtIO(myPort,LSIZE(struct IOExtTD)) == NULL)
 *	        exit(NO_MEM_OR_SIGNALS);
 *
 *	example used to allocate space for IOExtTD (trackdisk driver
 *	IO Request block for extended IO operations).
 *
 *   SEE ALSO
 *
 *	DeleteExtIO
 *
 */
 
#define ALLOCFLAGS (long) (MEMF_CLEAR | MEMF_PUBLIC | MEMF_CHIP)

struct IORequest *CreateExtIO (ioReplyPort, size)
struct MsgPort *ioReplyPort;
LONG size;
{
    register struct IORequest *ioReq = NULL;
    extern VOID *AllocMem ();
 
    DBUG_ENTER ("CreateExtIO");
    if (ioReplyPort != NULL) {
	ioReq = (struct IORequest *) AllocMem (size, ALLOCFLAGS);
	if (ioReq != NULL) {
	    ioReq -> io_Message.mn_Node.ln_Type = NT_MESSAGE;
	    ioReq -> io_Message.mn_Node.ln_Pri = 0;
	    ioReq -> io_Message.mn_ReplyPort = ioReplyPort;
	}
    }
    DBUG_RETURN (ioReq);
}
  

/*
 *
 *   NAME
 *
 *	DeleteExtIO() - return memory allocated for extended IO request
 *
 *   SYNOPSIS
 *
 *	DeleteExtIO(ioReq,size);
 *
 *   FUNCTION
 *
 *	See summary line at NAME.  Also frees the signal bit which
 *	had been allocated by the call to CreateExtIO.
 *
 *   INPUTS
 *
 *	A pointer to the IORequest block whose resources are to be freed.
 *
 *   RESULT
 *
 *	Frees the memory.
 *	For compatibilty with version defined in ROM kernel manual, and
 *	as implemented by most compiler venders, does not return any
 *	valid value.  As an enhancement, places a result code in the
 *	external long variable "_DExtIOVal" as follows:
 *
 *		0		Success
 *		1		Bogus ioReq pointer
 *
 *   EXAMPLE
 *
 *	struct IORequest *myBlock;
 *	DeleteExtIO(myBlock,(sizeof(struct IOExtTD)));
 *
 *	example shows that CreateExtIO had been used to create a trackdisk
 *	(extended) IO Request block.
 *
 *   SEE ALSO
 *
 *	CreateExtIO
 *
 */
  
VOID DeleteExtIO (ioExt, size)
struct IORequest *ioExt;
LONG size;
{
    extern LONG _DExtIOVal;

    DBUG_ENTER ("DeleteExtIO");
    if (ioExt == NULL) {
	_DExtIOVal = 1;
    } else {
	ioExt -> io_Message.mn_Node.ln_Type = 0xff;	/* or -1 ? */
	ioExt -> io_Device = (struct Device *) -1;
	ioExt -> io_Unit = (struct Unit *) -1;
	FreeMem (ioExt, size);
    }
    DBUG_VOID_RETURN;
}
@
