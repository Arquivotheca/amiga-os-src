head     39.8;
branch   ;
access   ;
symbols  ;
locks    davidj:39.8; strict;
comment  @ * @;


39.8
date     92.11.12.10.15.24;  author davidj;  state Exp;
branches ;
next     39.7;

39.7
date     92.08.03.16.53.17;  author davidj;  state Exp;
branches ;
next     39.6;

39.6
date     92.07.30.15.42.52;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     92.07.14.15.31.35;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.06.23.03.07.23;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.22.03.55.00;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.19.04.33.05;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.05.04.33.38;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.51.04;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.8
log
@snapshot name is now public screen name.
@
text
@/* snapshot.c
 *
 */

#include "multiview.h"

/*****************************************************************************/

#define	DB(x)	;
#define	DT(x)	;

/*****************************************************************************/

/* The extension for window snapshots */
#define	USE_DIR		"ENV:MultiView"
#define	SAVE_DIR	"ENVARC:MultiView"

#define	NAME		"MultiView"

/* Simple scaling of coordinates */
#define SCALE(a,b,c) (((b) * (c)) / (a))

/*****************************************************************************/

struct TPrefs
{
    struct Prefs	tp_Prefs;
    UBYTE		tp_Pad;
};

/*****************************************************************************/

BOOL LoadSnapShot (struct GlobalData * gd)
{
    struct Rectangle rect;
    BOOL retval = FALSE;
    struct TPrefs tp;
    UBYTE name[128];
    ULONG mode;
    LONG len;

    /* Provide defaults */
    mode = GetVPModeID (&gd->gd_Screen->ViewPort);
    QueryOverscan (mode, &rect, OSCAN_TEXT);
    gd->gd_Prefs.p_Window.Top     = gd->gd_Screen->BarHeight + 1;
    gd->gd_Prefs.p_Window.Width   = MIN (gd->gd_Screen->Width, rect.MaxX - rect.MinX + 1) - 26;
    gd->gd_Prefs.p_Window.Height  = MIN (gd->gd_Screen->Height, rect.MaxY - rect.MinY + 1) - ((gd->gd_Prefs.p_Window.Top * 2) + 12);
    gd->gd_Prefs.p_FileReq.Top    = gd->gd_Prefs.p_Window.Top;
    gd->gd_Prefs.p_FileReq.Width  = 320;
    gd->gd_Prefs.p_FileReq.Height = gd->gd_Prefs.p_Window.Height;

    /* load user preferences */
#if 1
    DT (kprintf ("load \"%s\"\n", gd->gd_ScreenNameBuffer));
    sprintf (name, "%s/%s", NAME, gd->gd_ScreenNameBuffer);
#else
    sprintf (name, "%s/%s", NAME, gd->gd_Screen->DefaultTitle);
#endif

    len = GetVar (name, (char *) &tp, sizeof (struct TPrefs), GVF_GLOBAL_ONLY | GVF_BINARY_VAR | GVF_DONT_NULL_TERM);

    DB (kprintf ("%ld=GetVar (%ld)\n", len, sizeof (struct Prefs)));

    if (len == sizeof (struct Prefs))
    {
	/* see if the screen size has changed */
	if ((tp.tp_Prefs.p_SWidth != gd->gd_Screen->Width) || (tp.tp_Prefs.p_SHeight != gd->gd_Screen->Height))
	{
	    /* calculate new upper-left coordinates */
	    tp.tp_Prefs.p_Window.Left = (WORD) SCALE (tp.tp_Prefs.p_SWidth, gd->gd_Screen->Width, tp.tp_Prefs.p_Window.Left);
	    tp.tp_Prefs.p_Window.Top = (WORD) SCALE (tp.tp_Prefs.p_SHeight, gd->gd_Screen->Height, tp.tp_Prefs.p_Window.Top);

	    tp.tp_Prefs.p_Window.Width = (WORD) SCALE (tp.tp_Prefs.p_SWidth, gd->gd_Screen->Width, tp.tp_Prefs.p_Window.Width);
	    tp.tp_Prefs.p_Window.Height = (WORD) SCALE (tp.tp_Prefs.p_SHeight, gd->gd_Screen->Height, tp.tp_Prefs.p_Window.Height);
	}

	/* make sure we fit on the screen */
	if ((tp.tp_Prefs.p_Window.Left + tp.tp_Prefs.p_Window.Width) > gd->gd_Screen->Width)
	    tp.tp_Prefs.p_Window.Left -= (tp.tp_Prefs.p_Window.Left + tp.tp_Prefs.p_Window.Width - gd->gd_Screen->Width);
	if ((tp.tp_Prefs.p_Window.Top + tp.tp_Prefs.p_Window.Height) > gd->gd_Screen->Height)
	    tp.tp_Prefs.p_Window.Top -= (tp.tp_Prefs.p_Window.Top + tp.tp_Prefs.p_Window.Height - gd->gd_Screen->Height);

	/* Copy the structure */
	memcpy (&gd->gd_Prefs, &tp.tp_Prefs, sizeof (struct Prefs));

	retval = TRUE;
    }

    return (retval);
}

/*****************************************************************************/

BOOL SaveSnapShot (struct GlobalData * gd)
{
    struct Window *win = gd->gd_Window;
    struct Prefs *p = &gd->gd_Prefs;
    UBYTE name[128];
    BOOL retval;
    BPTR lock;

    p->p_SWidth = gd->gd_Screen->Width;
    p->p_SHeight = gd->gd_Screen->Height;

    if (!(gd->gd_Window->Flags & WFLG_ZOOMED))
    {
	p->p_Window = *((struct IBox *) & win->LeftEdge);
	p->p_Window.Width -= (win->BorderLeft + win->BorderRight + 4);
	p->p_Window.Height -= (win->BorderTop + win->BorderBottom + 2);
    }

    /* ENV: */
    if (lock = CreateDir (USE_DIR))
	UnLock (lock);
    if (lock = CreateDir (SAVE_DIR))
	UnLock (lock);
#if 1
    DT (kprintf ("save \"%s\"\n", gd->gd_ScreenNameBuffer));
    sprintf (name, "%s/%s", NAME, gd->gd_ScreenNameBuffer);
#else
    sprintf (name, "%s/%s", NAME, win->WScreen->DefaultTitle);
#endif
    retval = SetVar (name, (char *)p, sizeof (struct Prefs), GVF_GLOBAL_ONLY | GVF_SAVE_VAR | GVF_BINARY_VAR | GVF_DONT_NULL_TERM);

    DB (kprintf ("%ld=SetVar (%ld)\n", len, sizeof (struct Prefs)));

    return (retval);
}
@


39.7
log
@no change!!!
@
text
@d7 2
d10 1
d53 4
d58 1
d117 4
d122 1
@


39.6
log
@gets correct size when on virtual screen.
@
text
@d27 2
@


39.5
log
@*** empty log message ***
@
text
@d41 2
a42 2
    gd->gd_Prefs.p_Window.Width   = MIN (gd->gd_Screen->Width, rect.MaxX - rect.MinX + 1) - 22;
    gd->gd_Prefs.p_Window.Height  = MIN (gd->gd_Screen->Height, rect.MaxY - rect.MinY + 1) - (gd->gd_Screen->BarHeight + 1 + gd->gd_Prefs.p_Window.Top);
a87 1
    BOOL retval = FALSE;
d89 1
a90 1
    LONG len;
@


39.4
log
@now uses dos.library routines for loading and saving of Env vars.
@
text
@d40 5
a44 5
    gd->gd_Prefs.p_Window.Top = gd->gd_Screen->BarHeight + 1;
    gd->gd_Prefs.p_Window.Width = MIN (gd->gd_Screen->Width, rect.MaxX - rect.MinX + 1) - 22;
    gd->gd_Prefs.p_Window.Height = MIN (gd->gd_Screen->Height, rect.MaxY - rect.MinY + 1) - (gd->gd_Screen->BarHeight + 1 + gd->gd_Prefs.p_Window.Top);
    gd->gd_Prefs.p_FileReq.Top = gd->gd_Prefs.p_Window.Top;
    gd->gd_Prefs.p_FileReq.Width = 320;
@


39.3
log
@now saves zoom size also
@
text
@d7 2
d12 4
a15 1
#define	NAME	"ENV:MultiView"
d22 6
d32 1
a32 1
    struct Prefs p;
d35 1
a35 1
    BPTR fh;
d40 5
a44 5
    gd->gd_Prefs.p_Window.Top     = gd->gd_Screen->BarHeight + 1;
    gd->gd_Prefs.p_Window.Width   = MIN (gd->gd_Screen->Width,  rect.MaxX - rect.MinX + 1) - 22;
    gd->gd_Prefs.p_Window.Height  = MIN (gd->gd_Screen->Height, rect.MaxY - rect.MinY + 1) - (gd->gd_Screen->BarHeight + 1 + gd->gd_Prefs.p_Window.Top);
    gd->gd_Prefs.p_FileReq.Top    = gd->gd_Prefs.p_Window.Top;
    gd->gd_Prefs.p_FileReq.Width  = 320;
d49 6
a54 1
    if (fh = Open (name, MODE_OLDFILE))
d56 2
a57 1
	if (Read (fh, (char *) &p, sizeof (struct Prefs)) == sizeof (struct Prefs))
d59 7
a65 16
	    /* see if the screen size has changed */
	    if ((p.p_SWidth != gd->gd_Screen->Width) || (p.p_SHeight != gd->gd_Screen->Height))
	    {
		/* calculate new upper-left coordinates */
		p.p_Window.Left = (WORD) SCALE (p.p_SWidth, gd->gd_Screen->Width, p.p_Window.Left);
		p.p_Window.Top = (WORD) SCALE (p.p_SHeight, gd->gd_Screen->Height, p.p_Window.Top);

		p.p_Window.Width = (WORD) SCALE (p.p_SWidth, gd->gd_Screen->Width, p.p_Window.Width);
		p.p_Window.Height = (WORD) SCALE (p.p_SHeight, gd->gd_Screen->Height, p.p_Window.Height);
	    }

	    /* make sure we fit on the screen */
	    if ((p.p_Window.Left + p.p_Window.Width) > gd->gd_Screen->Width)
		p.p_Window.Left -= (p.p_Window.Left + p.p_Window.Width - gd->gd_Screen->Width);
	    if ((p.p_Window.Top + p.p_Window.Height) > gd->gd_Screen->Height)
		p.p_Window.Top -= (p.p_Window.Top + p.p_Window.Height - gd->gd_Screen->Height);
d67 5
a71 2
	    /* Copy the structure */
	    memcpy (&gd->gd_Prefs, &p, sizeof (struct Prefs));
d73 2
a74 2
	    retval = TRUE;
	}
d76 1
a76 2
	/* close the file */
	Close (fh);
d78 1
d91 1
a91 1
    BPTR fh;
d93 2
a94 2
    if (lock = CreateDir (NAME))
	UnLock (lock);
d96 1
a96 2
    sprintf (name, "%s/%s", NAME, win->WScreen->DefaultTitle);
    if (fh = Open (name, MODE_NEWFILE))
d98 4
a101 2
	p->p_SWidth  = gd->gd_Screen->Width;
	p->p_SHeight = gd->gd_Screen->Height;
d103 7
a109 14
	if (!(gd->gd_Window->Flags & WFLG_ZOOMED))
	{
	    if (gd->gd_Flags & GDF_SNAPSHOT)
	    {
		p->p_Window = *((struct IBox *) & win->LeftEdge);
		p->p_Window.Width  -= (win->BorderLeft + win->BorderRight + 4);
		p->p_Window.Height -= (win->BorderTop + win->BorderBottom + 2);
	    }
	    else
	    {
		p->p_Window.Left = win->LeftEdge;
		p->p_Window.Top  = win->TopEdge;
	    }
	}
d111 1
a111 2
	if (Write (fh, p, sizeof (struct Prefs)) == sizeof (struct Prefs))
	    retval = TRUE;
a112 3
	/* close the file */
	Close (fh);
    }
@


39.2
log
@now does file requester rectangle
@
text
@d7 2
d15 3
a17 1
struct IBox *LoadSnapShot (struct GlobalData * gd, struct IBox * box)
d20 2
a21 1
    SHORT Width, Height;
d26 10
d37 1
a37 1
    sprintf (name, "%s/%s.win", NAME, gd->gd_Screen->DefaultTitle);
d40 1
a40 18
	/* read in the screen width */
	Read (fh, (UBYTE *) & (Width), sizeof (SHORT));

	/* read in the screen height */
	Read (fh, (UBYTE *) & (Height), sizeof (SHORT));

	/* read in the window rectangle */
	Read (fh, (UBYTE *) box, sizeof (struct IBox));

	gd->gd_FRMemory.Width = 320;
	gd->gd_FRMemory.Height = 175;
	Read (fh, (UBYTE *) &gd->gd_FRMemory, sizeof (struct IBox));

	/* close the file */
	Close (fh);

	/* validate the screen pointer */
	if (gd->gd_Screen)
d43 1
a43 1
	    if ((Width != gd->gd_Screen->Width) || (Height != gd->gd_Screen->Height))
d46 2
a47 2
		box->Left = (WORD) SCALE (Width, gd->gd_Screen->Width, box->Left);
		box->Top = (WORD) SCALE (Height, gd->gd_Screen->Height, box->Top);
d49 2
a50 2
		box->Width = (WORD) SCALE (Width, gd->gd_Screen->Width, box->Width);
		box->Height = (WORD) SCALE (Height, gd->gd_Screen->Height, box->Height);
d54 9
a62 4
	    if ((box->Left + box->Width) > gd->gd_Screen->Width)
		box->Left -= (box->Left + box->Width - gd->gd_Screen->Width);
	    if ((box->Top + box->Height) > gd->gd_Screen->Height)
		box->Top -= (box->Top + box->Height - gd->gd_Screen->Height);
a63 6
    }
    else
    {
	box->Top = 1;
	box->Width = gd->gd_Screen->Width;
	box->Height = gd->gd_Screen->Height - 1;
d65 2
a66 8
	if ((mode = GetVPModeID (&gd->gd_Screen->ViewPort)) != INVALID_ID)
	{
	    QueryOverscan (mode, &rect, OSCAN_TEXT);
	    box->Width  = MIN (gd->gd_Screen->Width,  rect.MaxX - rect.MinX + 1);
	    box->Height = MIN (gd->gd_Screen->Height, rect.MaxY - rect.MinY + 1) - 1;
	}
	box->Width  -= 22;
	box->Height -= (gd->gd_Screen->BarHeight + 11);
d68 2
d71 1
a71 3
    /* return what was passed */
    return (box);
}
d73 1
a73 1
BOOL SaveSnapShot (struct GlobalData * gd, struct Window * win, BOOL snap)
d75 2
a77 1
    struct IBox box;
a79 1
    LONG len;
d85 1
a85 1
    sprintf (name, "%s/%s.win", NAME, win->WScreen->DefaultTitle);
d88 17
a104 3
	    box = * ((struct IBox *)&win->LeftEdge);
	    box.Width -= (win->BorderLeft + win->BorderRight + 4);
	    box.Height -= (win->BorderTop + win->BorderBottom + 2);
d106 2
a107 8
	    if (!snap)
		box = *(&gd->gd_Snapshot);

	    len = 2L * sizeof (SHORT);
	    if ((Write (fh, (UBYTE *) & (gd->gd_Screen->Width), len)) == len)
		if ((Write (fh, (UBYTE *) &box, sizeof (struct IBox))) == sizeof (struct IBox))
		    if ((Write (fh, (UBYTE *)&gd->gd_FRMemory, sizeof (struct IBox))) == sizeof (struct IBox))
			retval = TRUE;
d109 2
a110 2
	    /* close the file */
	    Close (fh);
@


39.1
log
@*** empty log message ***
@
text
@d34 4
d82 1
a82 1
BOOL SaveSnapShot (struct GlobalData * gd, struct Window * win)
d101 3
d107 2
a108 1
		    retval = TRUE;
@


39.0
log
@initial RCS
@
text
@d8 1
a8 1
#define	NAME	"ENV:MultiView/MultiView.win"
d17 1
d22 2
a23 1
    if (fh = Open (NAME, MODE_OLDFILE))
d82 1
d87 5
a91 1
    if (win)
a92 5
	if (lock = CreateDir ("ENV:MultiView"))
	    UnLock (lock);

	if (fh = Open (NAME, MODE_NEWFILE))
	{
a103 1
	}			/* end of if opened pref file */
@
