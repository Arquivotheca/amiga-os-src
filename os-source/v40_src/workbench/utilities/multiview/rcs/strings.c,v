head     39.8;
branch   ;
access   ;
symbols  ;
locks    davidj:39.8; strict;
comment  @ * @;


39.8
date     93.04.26.14.35.35;  author davidj;  state Exp;
branches ;
next     39.7;

39.7
date     93.03.23.14.27.42;  author davidj;  state Exp;
branches ;
next     39.6;

39.6
date     92.07.14.15.28.38;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     92.07.01.00.41.32;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.06.23.23.35.14;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.23.03.06.04;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.22.03.53.31;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.19.04.32.06;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.50.18;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.8
log
@fixed problem with null global data.
@
text
@/* strings.c
 *
 */

#define STRINGARRAY	TRUE

#include "multiview.h"

/*****************************************************************************/

#undef	SysBase

/*****************************************************************************/

STRPTR GetString (struct GlobalData * gd, LONG id)
{
    STRPTR local = NULL;
    UWORD i;

    i = 0;
    while (!local)
    {
	if (AppStrings[i].as_ID == id)
	    local = AppStrings[i].as_Str;
	i++;
    }

    if (gd && gd->gd_LocaleBase)
	local = GetCatalogStr (gd->gd_Catalog, id, local);

    return (local);
}

/*****************************************************************************/

#undef	DOSBase
#undef	IntuitionBase

/*****************************************************************************/

VOID PrintF (struct GlobalData * gd, LONG mode, LONG id, STRPTR arg1,...)
{
    struct ExecBase *SysBase = (*((struct ExecBase **) 4));
    struct Window *win = (gd) ? gd->gd_Window : NULL;
    struct Library *IntuitionBase;
    struct Library *DOSBase;
    struct EasyStruct es;
    STRPTR ermsg = NULL;
    UBYTE buffer[128];

    if (id == 0)
	return;

    if (DOSBase = OpenLibrary ("dos.library", 36))
    {
	IntuitionBase = OpenLibrary ("intuition.library", 36);

	if (id < 990)
	{
	    if (Fault (id, NULL, buffer, sizeof (buffer)))
		ermsg = buffer;
	}
	else if ((id >= 2000) && (id <= 2999))
	{
	    ermsg = GetDTString (id);
	}
	else if (((id >= 990) && (id <= 999)) || ((id >= 7000) && (id <= 7999)))
	{
	    ermsg = GetString (gd, id);
	}

	if (ermsg)
	{
	    if ((mode == 2) && win)
	    {
		sprintf (gd->gd_Title, ermsg, (LONG *) arg1);
		SetWindowTitles (gd->gd_Window, gd->gd_Title, "MultiView");
	    }
	    else if ((mode == 0) && ((gd == NULL) || (gd && gd->gd_Process->pr_CLI)))
	    {
		VPrintf (ermsg, (LONG *) & arg1);
		VPrintf ("\n", NULL);
	    }
	    else if (win)
	    {
		es.es_StructSize = sizeof (struct EasyStruct);
		es.es_Flags = 0;
		es.es_Title = GetString (gd, MV_TITLE_MULTIVIEW);
		es.es_TextFormat = ermsg;
		es.es_GadgetFormat = GetString (gd, MV_LABEL_CONTINUE);

		EasyRequestArgs (win, &es, NULL, &arg1);
	    }
	}

	CloseLibrary (IntuitionBase);
	CloseLibrary (DOSBase);
    }
}
@


39.7
log
@added SysBase
@
text
@d11 4
d27 1
d30 1
d43 1
d49 1
d60 2
a61 4
	    if (Fault (id, NULL, gd->gd_TempBuffer, 510))
	    {
		ermsg = gd->gd_TempBuffer;
	    }
d74 1
a74 1
	    if ((mode == 2) && gd->gd_Window)
d79 1
a79 1
	    else if ((mode == 0) && gd && gd->gd_Process->pr_CLI)
d84 1
a84 1
	    else
@


39.6
log
@new strings
@
text
@a10 6
#undef	SysBase
#undef	DOSBase
#undef	IntuitionBase

/*****************************************************************************/

d30 5
a36 1
    struct ExecBase *SysBase = (*((struct ExecBase **) 4));
a39 1
    UBYTE namebuffer[64];
d68 1
a68 1
	    if ((mode == 2) && gd->gd_WindowObj)
d70 2
a71 2
		sprintf (namebuffer, ermsg, (LONG *) arg1);
		setattrs (gd, gd->gd_WindowObj, WOA_Title, (ULONG) namebuffer, TAG_DONE);
@


39.5
log
@printer error messages weren't using the correct offset
@
text
@d85 1
a85 1
		es.es_Title = GetString (gd, TITLE_MULTIVIEW);
d87 1
a87 1
		es.es_GadgetFormat = GetString (gd, LABEL_CONTINUE);
@


39.4
log
@use new string id's
@
text
@d64 1
a64 1
	else if ((id >= 7000) && (id <= 7999))
d74 1
a74 1
		setattrs (gd, gd->gd_WindowObj, DTA_Title, (ULONG) namebuffer, TAG_DONE);
@


39.3
log
@now displays datatypes.library strings also.
@
text
@d17 1
a17 5
STRPTR null = "";

/*****************************************************************************/

STRPTR GetString (struct GlobalData *gd, LONG id)
d19 2
a20 2
    STRPTR local;
    UWORD  i;
d22 2
a23 1
    for (i = 0, local = null; (local == null); i++)
d25 3
a27 2
        if (AppStrings[i].as_ID == id)
            local = AppStrings[i].as_Str;
a28 1

d30 2
a31 5
    {
        local = GetCatalogStr (gd->gd_Catalog, id, local);
    }

    return(local);
d44 1
a44 1
    STRPTR ermsg = "";
d46 1
a46 1
    if (id==0)
d53 1
a53 12
	switch (id)
	{
	    case ERROR_INVALID_RESIDENT_LIBRARY:
		id = ERROR_COULDNT_LOCATE_DATATYPE;
		break;

	    case ERROR_OBJECT_NOT_FOUND:
		id = ERROR_COULDNT_OPEN_FILE;
		break;
	}

	if (id < 5000)
d60 1
a60 1
	else if (id >= 10000)
d64 1
a64 1
	else
d69 1
a69 1
	if ((mode == 2) && gd->gd_WindowObj)
d71 17
a87 15
	    sprintf (namebuffer, ermsg, (LONG *)arg1);
	    setattrs (gd, gd->gd_WindowObj, DTA_Title, (ULONG) namebuffer, TAG_DONE);
	}
	else if ((mode == 0) && gd && gd->gd_Process->pr_CLI)
	{
	    VPrintf (ermsg, (LONG *) & arg1);
	    VPrintf ("\n", NULL);
	}
	else
	{
	    es.es_StructSize   = sizeof (struct EasyStruct);
	    es.es_Flags        = 0;
	    es.es_Title        = GetString (gd, TITLE_MULTIVIEW);
	    es.es_TextFormat   = ermsg;
	    es.es_GadgetFormat = GetString (gd, LABEL_CONTINUE);
d89 2
a90 1
	    EasyRequestArgs (win, &es, NULL, &arg1);
@


39.2
log
@errors can now be shown in the window title bar
@
text
@d77 4
d88 1
a88 1
	    sprintf (namebuffer, ermsg, FilePart (gd->gd_NameBuffer));
@


39.1
log
@added window pointer
@
text
@d48 1
d82 6
a87 1
	if (gd && gd->gd_Process->pr_CLI && (mode == 0))
@


39.0
log
@initial RCS
@
text
@d45 1
d51 3
d58 11
d94 1
a94 1
	    EasyRequestArgs (NULL, &es, NULL, &arg1);
@
