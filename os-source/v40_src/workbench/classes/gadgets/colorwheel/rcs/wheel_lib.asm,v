head     39.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.4
date     92.11.16.13.13.45;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.21.15.25.34;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.22.12.39.23;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.18.13.38.16;  author vertex;  state Exp;
branches ;
next     ;


desc
@Colorwheel class system interface
@


39.4
log
@Fixed crash under 1.3/2.0
@
text
@        OPTIMON

;---------------------------------------------------------------------------

        NOLIST

        INCLUDE "exec/types.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/lists.i"
        INCLUDE "exec/alerts.i"
        INCLUDE "exec/initializers.i"
        INCLUDE "exec/resident.i"
        INCLUDE "libraries/dos.i"
        INCLUDE "utility/hooks.i"

        INCLUDE "colorwheel_rev.i"
        INCLUDE "wheelbase.i"

        LIST

;---------------------------------------------------------------------------

	XREF	@@CreateClass
	XREF	@@DestroyClass

	XREF	_LVOSMult32
	XREF    _LVOUMult32
	XREF	_LVOSDivMod32
	XREF	_LVOUDivMod32

	XREF	_ConvertRGBToHSBLVO
	XREF	_ConvertHSBToRGBLVO

        XREF    ENDCODE

;---------------------------------------------------------------------------

        XDEF    LibInit
        XDEF    LibOpen
        XDEF    LibClose
        XDEF    LibExpunge
        XDEF	LibReserved
        XDEF	@@CallCHook

;---------------------------------------------------------------------------

; First executable location, must return an error to the caller
Start:
        moveq   #-1,d0
        rts

;-----------------------------------------------------------------------

ROMTAG:
        DC.W    RTC_MATCHWORD           ; UWORD RT_MATCHWORD
        DC.L    ROMTAG                  ; APTR  RT_MATCHTAG
        DC.L    ENDCODE                 ; APTR  RT_ENDSKIP
        DC.B    RTF_AUTOINIT            ; UBYTE RT_FLAGS
        DC.B    VERSION                 ; UBYTE RT_VERSION
        DC.B    NT_LIBRARY              ; UBYTE RT_TYPE
        DC.B    0                       ; BYTE  RT_PRI
        DC.L    LibName                 ; APTR  RT_NAME
        DC.L    LibId                   ; APTR  RT_IDSTRING
        DC.L    LibInitTable            ; APTR  RT_INIT

LibName DC.B 'colorwheel.gadget',0
LibId   VSTRING

        CNOP    0,4

LibInitTable:
        DC.L    WheelLib_SIZEOF
        DC.L    LibFuncTable
        DC.L    0
        DC.L    LibInit

V_DEF	MACRO
	DC.W	\1+(*-LibFuncTable)
	ENDM

LibFuncTable:
	DC.W	-1
        V_DEF	LibOpen
        V_DEF	LibClose
        V_DEF	LibExpunge
        V_DEF	LibReserved
        V_DEF	_ConvertHSBToRGBLVO
        V_DEF	_ConvertRGBToHSBLVO
        DC.W   -1

;-----------------------------------------------------------------------

; Library Init entry point called when library is first loaded in memory
; On entry, D0 points to library base, A0 has lib seglist, A6 has SysBase
; Returns 0 for failure or the library base for success.
LibInit:
        movem.l a0/a5/d7,-(sp)
        move.l  d0,a5
        move.l  a6,wb_SysBase(a5)
        move.l  a0,wb_SegList(a5)

        move.w	#REVISION,LIB_REVISION(a5)

        move.l  #AO_GraphicsLib,d7
        lea     GfxName(pc),a1
        bsr.s	OpenLib
        move.l  d0,wb_GfxBase(a5)

        move.l  #AO_Intuition,d7
        lea     IntuitionName(pc),a1
        bsr.s	OpenLib
        move.l  d0,wb_IntuitionBase(a5)

        move.l  #AO_UtilityLib,d7
        lea     UtilityName(pc),a1
        bsr.s	OpenLib
        move.l  d0,wb_UtilityBase(a5)

; now initialize the four math function pointers
	move.l	d0,a1			; load UtilityBase
	lea	_LVOSMult32(a1),a1	; get address of first jump vector
	lea	wb_SMult32(a5),a0	; load target address of first vector
	moveq	#3,d0
1$:
	move.l	a1,(a0)+
	subq.l	#6,a1
	dbra	d0,1$

        move.l  a5,d0
        movem.l (sp)+,a0/a5/d7
        rts

OpenLib:
        moveq   #LIBVERSION,d0
        CALL    OpenLibrary
        move.l	(sp)+,a0	; pop return address
        tst.l   d0		; did lib open?
        beq.s   FailInit	; nope, so exit
        jmp	(a0)		; yes, so return

FailInit:
        bsr     CloseLibs
        or.l    #AG_OpenLib,d7
        CALL	Alert
        movem.l (sp)+,a0/a5/d7
        moveq   #0,d0
        rts

LIBVERSION    EQU  39
GfxName       DC.B "graphics.library",0
IntuitionName DC.B "intuition.library",0
UtilityName   DC.B "utility.library",0

        CNOP    0,2

;-----------------------------------------------------------------------

; Library open entry point called every OpenLibrary()
; On entry, A6 has WheelBase, task switching is disabled
; Returns 0 for failure, or WheelBase for success.
LibOpen:
	tst.w	LIB_OPENCNT(a6)
	bne.s	1$

	bsr	@@CreateClass
	tst.w	d0
	bne.s	1$

	moveq	#0,d0
	rts

1$:
        addq.w  #1,LIB_OPENCNT(a6)
        bclr    #LIBB_DELEXP,LIB_FLAGS(a6)
        move.l  a6,d0
        rts

;-----------------------------------------------------------------------

; Library close entry point called every CloseLibrary()
; On entry, A6 has WheelBase, task switching is disabled
; Returns 0 normally, or the library seglist when lib should be expunged
;   due to delayed expunge bit being set
LibClose:
	subq.w	#1,LIB_OPENCNT(a6)
	bne.s	1$			; if openers, don't remove class

	bsr	@@DestroyClass		; zero openers, so try to remove class

1$:
	; if delayed expunge bit set, then try to get rid of the library
	btst	#LIBB_DELEXP,LIB_FLAGS(a6)
	bne.s	CloseExpunge

	; delayed expunge not set, so stick around
	moveq	#0,d0
	rts

CloseExpunge:
	; if no library users, then just remove the library
	tst.w	LIB_OPENCNT(a6)
	beq.s	DoExpunge

	; still some library users, so forget about flushing
	bclr	#LIBB_DELEXP,LIB_FLAGS(a6)
	moveq	#0,d0
	rts

;-----------------------------------------------------------------------

; Library expunge entry point called whenever system memory is lacking
; On entry, A6 has WheelBase, task switching is disabled
; Returns the library seglist if the library open count is 0, returns 0
; otherwise and sets the delayed expunge bit.
LibExpunge:
        tst.w   LIB_OPENCNT(a6)
        beq.s   DoExpunge

        tst.l   wb_Class(a6)
        beq.s   DoExpunge

        bset    #LIBB_DELEXP,LIB_FLAGS(a6)
        moveq   #0,d0
        rts

DoExpunge:
        movem.l d2/a5/a6,-(sp)
        move.l  a6,a5
        move.l  wb_SegList(a5),d2

        move.l  a5,a1
        REMOVE

        move.l  wb_SysBase(a5),a6
        bsr.s   CloseLibs

        move.l  a5,a1
        moveq   #0,d0
        move.w  LIB_NEGSIZE(a5),d0
        sub.l   d0,a1
        add.w   LIB_POSSIZE(a5),d0
        CALL    FreeMem

        move.l  d2,d0
        movem.l (sp)+,d2/a5/a6
        rts

;-----------------------------------------------------------------------

LibReserved:
        moveq   #0,d0
        rts

;-----------------------------------------------------------------------

CloseLibs:
        move.l  wb_GfxBase(a5),a1
        CALL    CloseLibrary

        move.l  wb_IntuitionBase(a5),a1
        CALL    CloseLibrary

        move.l  wb_UtilityBase(a5),a1
        GO	CloseLibrary

;-----------------------------------------------------------------------


; Restores context and calls high-level language hook
@@CallCHook:
	movem.l	a5/a6,-(sp)
	movem.l	h_SubEntry(a0),a5/a6	; h_SubEntry into A5, h_Data into A6
	jsr	(a5)			; call HLL
	movem.l	(sp)+,a5/a6
	rts

;-----------------------------------------------------------------------

        END
@


39.3
log
@Added two new LVOs
@
text
@d74 1
a74 1
        DC.L    LibDataTable
a90 6
LibDataTable:
        INITWORD   LIB_REVISION,REVISION
        DC.W       0

        CNOP    0,4

d97 1
a97 1
        movem.l a0/a5/a6/d7,-(sp)
d102 2
d130 1
a130 1
        movem.l (sp)+,a0/a5/a6/d7
d154 1
a154 1
        CNOP    0,4
@


39.2
log
@Changed rom tag name to colorwheel.gadget
@
text
@d31 3
d87 2
@


39.1
log
@Initial V39 RCS checkin
@
text
@d63 1
a63 1
LibName DC.B 'colorwheel.class',0
@
