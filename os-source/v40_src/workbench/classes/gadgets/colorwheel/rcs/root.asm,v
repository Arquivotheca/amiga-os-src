head     39.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.2
date     92.06.22.11.49.11;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.18.13.36.20;  author vertex;  state Exp;
branches ;
next     ;


desc
@Integer square root routines
@


39.2
log
@Cleaned things up, removed dead code
@
text
@	OPTIMON

;---------------------------------------------------------------------------

	XDEF	_RndSqRoot

;---------------------------------------------------------------------------

; This routine returns the root of the nearest perfect root to its
; argument i.e. it rounds instead of truncating.
; note - remainder is also adjusted and can be negative.
;
; LONG ASM RndSqRoot(REG(d1) LONG i);

_RndSqRoot:
            move.l  d2,a0 		; save these
            move.l  d3,a1

            moveq.l #15,d2              ; number of iterations
            moveq   #0,d3               ; clear the remainder
            moveq   #0,d0               ; clear trial value and final result

1$          lsl.l   #1,d0               ; double partial result
            addq.l  #1,d0               ; guess next bit is a 1
            lsl.l   #1,d1               ; fetch 2 new bits
            roxl.l  #1,d3               ; from argument
            lsl.l   #1,d1
            roxl.l  #1,d3
            sub.l   d0,d3               ; do a trial subtraction
            bcc.s   2$                  ; guess was right,
                                        ; append a 1 bit
            add.l   d0,d3               ; guess was wrong, put it back
            subq.l  #1,d0               ; and clean up for next pass
            dbra    d2,1$
            bra.s   3$                  ; go scale result
2$          addq.l  #1,d0               ; convert xxxx01 to xxxx10, i.e.
                                        ; append a 1 bit
            dbra    d2,1$
3$          asr.l   #1,d0               ; divide by 2 to get actual root

            move.w  d0,d2               ; get result in d2
            add.w   d2,d2               ; double it.
            cmp.w   d2,d3               ; compare root*2 with remainder
            bge.s   4$                  ; if remainder less than twice root
            sub.w   d0,d3               ; subtract (d0 + (d0+1)) from remainder
            addq.w  #1,d0               ; then add 1 to result.
            sub.w   d0,d3               ; as above
            move.l  d3,d1               ; and move to d1

4$          move.l  a0,d2		; restore these
	    move.l  a1,d3
            rts

;---------------------------------------------------------------------------

	END
@


39.1
log
@Initial V39 RCS checkin
@
text
@a4 1
	XDEF	_IntSqRoot
d9 3
a11 11
;   root = IntSqRoot(i) - fast integer square root
;   by Talin.
;
;   This routine calculates the square root of the argument, returning an
;   integer with fractions truncated.
;
;   Also, d3 returns the 'remainder' of the root, the difference between the
;   i and the nearest perfect root below i.
;
;   Also, the routine 'RndSqRoot' returns the root of the nearest perfect
;   root to i, i.e. it rounds instead of truncating.
d13 1
a13 27
;   All these routines use d0-d1

;---------------------------------------------------------------------------

; this is the entry point for doing 'rounded' roots.
; note - remainder is also adjusted and can be negative.

_RndSqRoot: move.l  4(sp),d1            ; argument into d1
            bra.s   doroundroot         ; do rounded root

RndSqRoot:  move.l  d0,d1               ; argument into d1
doroundroot:
            movem.l d2/d3,-(sp)
            bsr.s   doroot              ; do a root.
            move.w  d0,d2               ; get result in d2
            add.w   d2,d2               ; double it.
            cmp.w   d2,d3               ; compare root*2 with remainder
            bge.s   1$                  ; if remainder less than twice root
            sub.w   d0,d3               ; subtract (d0 + (d0+1)) from remainder
            addq.w  #1,d0               ; then add 1 to result.
            sub.w   d0,d3               ; as above
            move.l  d3,d1               ; and move to d1
1$          movem.l (sp)+,d2/d3
            rts


;---------------------------------------------------------------------------
d15 3
a17 1
; this is the actual square root routine.
a18 11
_IntSqRoot: move.l  4(sp),d1            ; argument into d1
            bra.s   doroot              ; do it

IntSqRoot:
            move.l  d0,d1               ; argument into d1
            movem.l d2/d3,-(sp)
            bra.s   doroot
            movem.l (sp)+,d2/d3
            rts

doroot
d40 12
@
