head     39.2;
branch   ;
access   ;
symbols  ;
locks    davidj:39.2; strict;
comment  @ * @;


39.2
date     93.09.27.09.50.44;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.07.23.17.53.06;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.22.04.09.54;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial rcs login
@


39.2
log
@clean up
@
text
@/* drawbox.c
 *
 */

#include "textbase.h"

#define	DB(x)	;

/*****************************************************************************/

VOID DrawBox (struct TextLib * txl, Class * cl, Object * o, struct RastPort * rp, struct IBox * box, struct IBox * sel, LONG status)
{
    struct DTSpecialInfo *si = (struct DTSpecialInfo *) G (o)->SpecialInfo;
    struct localData *lod = INST_DATA (cl, o);
    LONG topY, bottomY;
    LONG width, height;
    LONG lastX, lastY;
    LONG curX, curY;
    LONG numLines;
    LONG tx, bx;
    LONG i, l;

    if (status == DBS_SCROLL1)
	return;

    if (status == DBS_SCROLL2)
	return;

    /* Initialize drawing area */
    SetDrMd (rp, COMPLEMENT);
    SetAPen (rp, ~0);
    rp->Mask = 0x1;

    /* Initialize coordinates */
    curX     = box->Left + sel->Width - si->si_TopHoriz;
    curY     = box->Top + ((sel->Height - si->si_TopVert) * si->si_VertUnit);
    lastX    = box->Left + sel->Left - si->si_TopHoriz;
    lastY    = box->Top + ((sel->Top - si->si_TopVert) * si->si_VertUnit);
    numLines = ABS (curY - lastY);
    topY     = MIN (lastY, curY);
    bottomY  = MAX (lastY, curY);
    width    = box->Left + box->Width - 1;
    height   = box->Top + box->Height - 1;

    /* Only one line? */
    if (numLines <= 1)
    {
	if (curX <= lastX)
	{
	    tx = curX;
	    bx = lastX + si->si_HorizUnit - 1;
	}
	else
	{
	    tx = lastX;
	    bx = curX - 1;
	}
	tx = MAX (tx, box->Left);
	bx = MIN (bx, width);
	RectFill (rp, tx, curY, bx, curY + si->si_VertUnit - 1);

	topY    = curY - si->si_VertUnit;
	bottomY = curY + 1;
    }
    else if ((bottomY >= box->Top) && (topY <= height))
    {
	if (status != DBS_MOVE)
	{
	    RectFill (rp, box->Left, topY + si->si_VertUnit, width, bottomY - 1);
	}

	if (curY < lastY)
	{
	    bx = MIN (lastX + si->si_HorizUnit - 1, width);
	    if (curY >= box->Top)
		RectFill (rp, MAX (curX, box->Left), curY, width, curY + si->si_VertUnit - 1);
	    RectFill (rp, box->Left, lastY, bx, lastY + si->si_VertUnit - 1);
	}
	else
	{
	    tx = MAX (lastX, box->Left);
	    bx = MIN (curX - 1, width);

	    if (curY + si->si_VertUnit - 1 < height)
		RectFill (rp, box->Left, curY, bx, curY + si->si_VertUnit - 1);
	    RectFill (rp, tx, lastY, width, lastY + si->si_VertUnit - 1);
	}

	topY    = MAX (topY, box->Top - si->si_VertUnit);
	bottomY = MIN (bottomY, height);
    }

    if (status == DBS_MOVE)
    {
	for (i = 0; i < si->si_TotVert; i++)
	{
	    l = box->Top + (i * si->si_VertUnit);
	    if ((l >= topY + si->si_VertUnit) && (l < bottomY - 1))
	    {
		if (lod->lod_Selected[i] == 0)
		{
		    RectFill (rp, box->Left, l, width, l + si->si_VertUnit - 1);
		    lod->lod_Selected[i] = 1;
		}
	    }
	    else
	    {
		if (lod->lod_Selected[i] == 1)
		{
		    RectFill (rp, box->Left, l, width, l + si->si_VertUnit - 1);
		    lod->lod_Selected[i] = 0;
		}
	    }
	}
    }
    else
    {
	memset (lod->lod_Selected, 0, (sizeof (ULONG) * (si->si_VisVert + 1)));
    }

    rp->Mask = 0xFF;
}
@


39.1
log
@*** empty log message ***
@
text
@a19 1
    LONG i, j, l;
d21 1
a96 1
	    j = 0;
@


39.0
log
@initial rcs login
@
text
@d7 1
a7 1
#define	DB(x)	x
d11 1
a11 1
VOID DrawBox (struct TextLib *txl, Class *cl, Object *o, struct RastPort *rp, struct IBox *box, struct IBox *sel, LONG status)
d15 1
a15 7
    LONG lx = box->Left + sel->Left - si->si_TopHoriz;
    LONG ly = box->Top + ((sel->Top - si->si_TopVert) * si->si_VertUnit);
    LONG x = box->Left + sel->Width - si->si_TopHoriz;
    LONG y = box->Top + ((sel->Height - si->si_TopVert) * si->si_VertUnit);
    LONG h = ABS (y - ly);
    LONG ty = MIN (ly, y);
    LONG by = MAX (ly, y);
d17 3
a19 1
    BOOL clear = TRUE;
d23 7
d34 10
a43 2
    width = box->Left + box->Width - 1;
    height = box->Top + box->Height - 1;
d45 2
a46 1
    if (h <= 1)
d48 1
a48 1
	if (x <= lx)
d50 2
a51 2
	    tx = x;
	    bx = lx + si->si_HorizUnit - 1;
d55 2
a56 2
	    tx = lx;
	    bx = x - 1;
d60 4
a63 1
	RectFill (rp, tx, y, bx, y + si->si_VertUnit - 1);
d65 1
a65 1
    else if ((by >= box->Top) && (ty <= height))
d67 13
a79 1
	if (h > si->si_VertUnit)
d81 11
a91 2
	    ty = MAX (ty, box->Top - si->si_VertUnit);
	    by = MIN (by, height);
d93 7
a99 4
#if 1
	    RectFill (rp, box->Left, ty + si->si_VertUnit, width, by - 1);
#else
	    if (status == DBS_MOVE)
d101 1
a101 2
		clear = FALSE;
		for (i = 0; i < si->si_TotVert; i++)
d103 2
a104 18
		    j = 0;
		    l = box->Top + (i * si->si_VertUnit);
		    if ((l >= ty + si->si_VertUnit) && (l < by - 1))
		    {
			if (lod->lod_Selected[i] == 0)
			{
			    RectFill (rp, box->Left, l, width, l + si->si_VertUnit - 1);
			    lod->lod_Selected[i] = 1;
			}
		    }
		    else
		    {
			if (lod->lod_Selected[i] == 1)
			{
			    RectFill (rp, box->Left, l, width, l + si->si_VertUnit - 1);
			    lod->lod_Selected[i] = 0;
			}
		    }
d109 5
a113 1
		RectFill (rp, box->Left, ty + si->si_VertUnit, width, by - 1);
a114 18
#endif
	}

	if (y < ly)
	{
	    bx = MIN (lx + si->si_HorizUnit - 1, width);
	    if (y >= box->Top)
		RectFill (rp, MAX (x, box->Left), y, width, y + si->si_VertUnit - 1);
	    RectFill (rp, box->Left, ly, bx, ly + si->si_VertUnit - 1);
	}
	else
	{
	    tx = MAX (lx, box->Left);
	    bx = MIN (x - 1, width);

	    if (y + si->si_VertUnit - 1 < height)
		RectFill (rp, box->Left, y, bx, y + si->si_VertUnit - 1);
	    RectFill (rp, tx, ly, width, ly + si->si_VertUnit - 1);
d117 1
a117 2

    if (clear)
d119 1
a119 2
	for (i = 0; i < si->si_VisVert; i++)
	    lod->lod_Selected[i] = 0;
@
