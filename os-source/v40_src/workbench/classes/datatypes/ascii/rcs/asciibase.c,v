head     39.7;
branch   ;
access   ;
symbols  ;
locks    davidj:39.7; strict;
comment  @ * @;


39.7
date     93.09.27.09.50.26;  author davidj;  state Exp;
branches ;
next     39.6;

39.6
date     93.04.13.17.06.08;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     92.09.02.14.50.08;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.07.23.17.32.54;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.24.02.47.30;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.23.03.43.43;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.19.03.58.09;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.10.58;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.7
log
@clean p
@
text
@/* asciibase.c
 *
 */

#define	LIBRARY_PRIMITIVES	TRUE

#include "asciibase.h"

/****** ascii.datatype/ascii.datatype ****************************************
*
*    NAME
*	ascii.datatype -- data type for ANSI text.
*
*    FUNCTION
*	The ASCII data type, a sub-class of the text.datatype, is used
*	to load ANSI text files.
*
*    METHODS
*	OM_NEW -- Create a new text object from ANSI characters.  The
*	    source may be either a file or the clipboard.
*
*    SEE ALSO
*	text.datatype.
*
*******************************************************************************
*
* Created:  27-Feb-92, David N. Junod
*
*/

/*****************************************************************************/

Class *ASM ObtainASCIIEngine (REG (a6) struct ASCIILib * ascii)
{
    return (ascii->ascii_Class);
}

/*****************************************************************************/

struct Library *ASM LibInit (REG (d0) struct ASCIILib * ascii, REG (a0) BPTR seglist, REG (a6) struct Library * sysbase)
{
    ascii->ascii_SegList = seglist;
    ascii->ascii_SysBase = sysbase;

    if (ascii->ascii_IntuitionBase = OpenLibrary ("intuition.library", 39))
    {
	ascii->ascii_GfxBase = OpenLibrary ("graphics.library", 39);
	ascii->ascii_DOSBase = OpenLibrary ("dos.library", 39);
	ascii->ascii_UtilityBase = OpenLibrary ("utility.library", 39);
	ascii->ascii_LayersBase = OpenLibrary ("layers.library", 39);
	InitSemaphore (&(ascii->ascii_Lock));
	return (ascii);
    }

    return (NULL);
}

/*****************************************************************************/

LONG ASM LibOpen (REG (a6) struct ASCIILib * ascii)
{
    LONG retval = (LONG) ascii;
    BOOL success = TRUE;

    ObtainSemaphore (&ascii->ascii_Lock);

    /* Use an internal use counter */
    ascii->ascii_Lib.lib_OpenCnt++;
    ascii->ascii_Lib.lib_Flags &= ~LIBF_DELEXP;

    if (ascii->ascii_Lib.lib_OpenCnt == 1)
    {
	if (ascii->ascii_Class == NULL)
	{
	    success = FALSE;
	    if (ascii->ascii_DataTypesBase = OpenLibrary ("datatypes.library", 0))
		if (ascii->ascii_SuperClassBase = OpenLibrary ("datatypes/text.datatype", 0))
		    if (ascii->ascii_Class = initClass (ascii))
			success = TRUE;
	}
    }

    if (!success)
    {
	CloseLibrary (ascii->ascii_SuperClassBase);
	CloseLibrary (ascii->ascii_DataTypesBase);
	ascii->ascii_DataTypesBase = ascii->ascii_SuperClassBase = NULL;
	ascii->ascii_Lib.lib_OpenCnt--;
	retval = NULL;
    }

    ReleaseSemaphore (&ascii->ascii_Lock);

    return (retval);
}

/*****************************************************************************/

LONG ASM LibClose (REG (a6) struct ASCIILib * ascii)
{
    LONG retval = NULL;

    ObtainSemaphore (&ascii->ascii_Lock);

    if (ascii->ascii_Lib.lib_OpenCnt)
	ascii->ascii_Lib.lib_OpenCnt--;

    if ((ascii->ascii_Lib.lib_OpenCnt == 0) && ascii->ascii_Class)
    {
	if (FreeClass (ascii->ascii_Class))
	{
	    CloseLibrary (ascii->ascii_SuperClassBase);
	    CloseLibrary (ascii->ascii_DataTypesBase);
	    ascii->ascii_Class = NULL;
	}
	else
	    ascii->ascii_Lib.lib_Flags |= LIBF_DELEXP;
    }

    if (ascii->ascii_Lib.lib_Flags & LIBF_DELEXP)
	retval = LibExpunge (ascii);

    ReleaseSemaphore (&ascii->ascii_Lock);

    return retval;
}

/*****************************************************************************/

LONG ASM LibExpunge (REG (a6) struct ASCIILib * ascii)
{
    BPTR seg = ascii->ascii_SegList;

    if (ascii->ascii_Lib.lib_OpenCnt)
    {
	ascii->ascii_Lib.lib_Flags |= LIBF_DELEXP;
	return (NULL);
    }

    Remove ((struct Node *) ascii);

    CloseLibrary (ascii->ascii_UtilityBase);
    CloseLibrary (ascii->ascii_DOSBase);
    CloseLibrary (ascii->ascii_LayersBase);
    CloseLibrary (ascii->ascii_GfxBase);
    CloseLibrary (ascii->ascii_IntuitionBase);

    FreeMem ((APTR)((ULONG)(ascii) - (ULONG)(ascii->ascii_Lib.lib_NegSize)), ascii->ascii_Lib.lib_NegSize + ascii->ascii_Lib.lib_PosSize);

    return ((LONG) seg);
}
@


39.6
log
@cleaned.
@
text
@d125 1
a125 1
    return (NULL);
@


39.5
log
@added autodoc
@
text
@d45 1
a45 1
    if (ascii->ascii_IntuitionBase = OpenLibrary ("intuition.library", 37))
d47 4
a50 3
	ascii->ascii_GfxBase = OpenLibrary ("graphics.library", 37);
	ascii->ascii_DOSBase = OpenLibrary ("dos.library", 37);
	ascii->ascii_UtilityBase = OpenLibrary ("utility.library", 37);
d134 1
a134 1
    if (ascii->ascii_UsageCnt)
d144 1
@


39.4
log
@expunge wasn't freeing library base.
@
text
@d8 22
@


39.3
log
@changed the classname and the superclass name
@
text
@d109 8
d124 3
a126 1
    return ((LONG) ascii->ascii_SegList);
@


39.2
log
@now opens superclass relative to datatypes/
@
text
@d62 3
@


39.1
log
@take advantage of LIBS: multi-assign
@
text
@d54 1
a54 1
		if (ascii->ascii_SuperClassBase = OpenLibrary ("text.class", 0))
@


39.0
log
@initial RCS
@
text
@d54 1
a54 1
		if (ascii->ascii_SuperClassBase = OpenLibrary ("sys:classes/datatypes/text.class", 0))
@
