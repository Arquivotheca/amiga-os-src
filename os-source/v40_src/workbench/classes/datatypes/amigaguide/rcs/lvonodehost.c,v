head     39.5;
branch   ;
access   ;
symbols  ;
locks    davidj:39.5; strict;
comment  @ * @;


39.5
date     93.04.30.16.11.10;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     93.03.22.16.27.54;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.08.14.14.58.09;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.08.13.13.35.01;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.23.03.56.49;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.20.09.35.52;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS login
@


39.5
log
@clean up
@
text
@/* lvonodehost.c
 *
 */

#include "amigaguidebase.h"
#include "hosthandle.h"

/*****************************************************************************/

#define	DB(x)	;
#define	DH(x)	;

/*****************************************************************************/

ULONG ASM LVOAddAGHostA (REG (a6) struct AGLib * ag, REG (a0) struct Hook * h, REG (d0) STRPTR name, REG (a1) struct TagItem * attrs)
{
    struct DatabaseData *dbd;
    struct HostHandle *hh;
    Object *member;
    Object *ostate;

    /* Lock the global data */
    ObtainSemaphore (&ag->ag_Lock);

    /* Search through the database list for a matching database */
    ostate = (Object *) ag->ag_DatabaseList.mlh_Head;
    while (member = NextObject (&ostate))
    {
	/* Convert the member to a database object */
	dbd = INST_DATA (ag->ag_DatabaseClass, member);

	/* See if it matches */
	if (Stricmp (dbd->dbd_Name, name) == 0)
	{
	    /* Release the global data */
	    ReleaseSemaphore (&ag->ag_Lock);
	    return NULL;
	}
    }

    /* Allocate the memory required for the node host */
    if (hh = AllocVec (HHSIZE, MEMF_CLEAR))
    {
        /* Initialize the dispatcher */
        hh->hh_Dispatcher = *h;

        /* Create a database object */
        if (hh->hh_DB = newobject (ag, ag->ag_DatabaseClass, NULL,
                                   DBA_Name,		name,
                                   DBA_HostHandle,	hh,
                                   TAG_DONE))
        {
            /* Add the node host to the list */
            AddTail ((struct List *) &ag->ag_HostList, (struct Node *) hh);
        }
	else
	{
            /* Free the host handle */
            FreeVec (hh);
	    hh = NULL;
	}
    }

    /* Release the global data */
    ReleaseSemaphore (&ag->ag_Lock);

    return ((ULONG) hh);
}

/*****************************************************************************/

LONG ASM LVORemoveAGHostA (REG (a6) struct AGLib * ag, REG (a0) VOID * handle, REG (a1) struct TagItem * attrs)
{
    struct HostHandle *hh = (struct HostHandle *)handle;
    struct DatabaseData *dbd;
    LONG retval = -1;

    if (hh)
    {
	/* Lock the global data */
	ObtainSemaphore (&ag->ag_Lock);

	/* Get a pointer to the database object */
	dbd = INST_DATA (ag->ag_DatabaseClass, hh->hh_DB);

	/* Make sure we can close down */
	if ((retval = dbd->dbd_UseCnt) == 1)
	{
	    /* Must close the database! */
	    DisposeObject (hh->hh_DB);

	    /* Remove the host from the Host list */
	    Remove ((struct Node *) hh);

	    /* Free the handle */
	    FreeVec (hh);

	    /* Indicate success */
	    retval = 0L;
	}

	/* Release the global data */
	ReleaseSemaphore (&ag->ag_Lock);
    }

    return retval;
}
@


39.4
log
@clean up
@
text
@d26 1
a26 1
    ostate = (Object *) ag->ag_DatabaseList.lh_Head;
d54 1
a54 1
            AddTail (&ag->ag_HostList, (struct Node *) hh);
@


39.3
log
@David - you need a login message.
Spence
@
text
@a21 2
    DB (kprintf ("AGC: AddAGHost h=0x%lx name=%s attrs=0x%lx\n", h, name, attrs));

a34 2
	    DB (kprintf ("%s already exists!\n", name));

a47 1
	DH (kprintf ("create dynamic node host database\n"));
a53 1
            DH (kprintf ("successful : hh=0x%lx\n", hh));
a58 1
	    DH (kprintf ("failure\n"));
a77 2
    DB (kprintf ("AGC: RemoveAGhost h=0x%lx attrs=0x%lx\n", hh, attrs));

a84 1
	DB (kprintf ("usecnt=%ld\n", dbd->dbd_UseCnt));
a99 4
	}
	else
	{
	    DB (kprintf ("too many users!\n"));
@


39.2
log
@tracks help group
@
text
@d11 1
d52 1
d59 1
a60 6

            /* Release the global data */
            ReleaseSemaphore (&ag->ag_Lock);

            DB (kprintf ("successful : hh=0x%lx\n", hh));
            return (ULONG) hh;
d62 7
a68 2
        /* Free the host handle */
        FreeVec (hh);
d74 1
a74 1
    return NULL;
@


39.1
log
@*** empty log message ***
@
text
@a15 1
    struct HostHandle *hh = NULL;
d17 1
@


39.0
log
@initial RCS login
@
text
@d52 2
a53 2
                                   DBA_Name,        name,
                                   DBA_HostHandle,  hh,
@
