head     39.14;
branch   ;
access   ;
symbols  ;
locks    davidj:39.14; strict;
comment  @ * @;


39.14
date     93.06.17.14.10.22;  author davidj;  state Exp;
branches ;
next     39.13;

39.13
date     93.04.30.16.09.34;  author davidj;  state Exp;
branches ;
next     39.12;

39.12
date     93.04.27.11.52.16;  author davidj;  state Exp;
branches ;
next     39.11;

39.11
date     93.04.27.09.44.37;  author davidj;  state Exp;
branches ;
next     39.10;

39.10
date     93.03.22.16.26.19;  author davidj;  state Exp;
branches ;
next     39.9;

39.9
date     92.08.14.14.52.19;  author davidj;  state Exp;
branches ;
next     39.8;

39.8
date     92.08.13.13.30.50;  author davidj;  state Exp;
branches ;
next     39.7;

39.7
date     92.08.03.16.59.11;  author davidj;  state Exp;
branches ;
next     39.6;

39.6
date     92.06.26.03.09.16;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     92.06.23.03.54.39;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.06.22.11.10.52;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.19.04.12.12;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.05.04.26.54;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.03.02.45.48;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.36.52;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.14
log
@*** empty log message ***
@
text
@/* findnode.c
 *
 */

#include "amigaguidebase.h"
#include <intuition/icclass.h>
#include "hosthandle.h"

/*****************************************************************************/

#define	DB(x)	;

/*****************************************************************************/

Object *ObtainNode (struct AGLib *ag, Class *cl, Object *o, STRPTR name, LONG line, LONG column)
{
    struct DTSpecialInfo *si = (struct DTSpecialInfo *) G (o)->SpecialInfo;
    struct ClientData *cd = INST_DATA (cl, o);
    struct DatabaseData *dbd;
    struct TextAttr *tattr;
    struct HostHandle *dnh;
    struct MinList *mlh;
    struct NodeData *nd;
    struct IBox *domain;
    BOOL found = FALSE;
    struct XRef *xr;
    Object *member;
    Object *ostate;
    STRPTR dbname;
    Object *ndbo;

    DB (kprintf ("obtain '%s'\n", name));

    getdtattrs (ag, o,
		DTA_Domain,	(ULONG *)&domain,
	        DTA_TextAttr,	(ULONG *)&tattr,
	        TAG_DONE);

    dbd = INST_DATA (ag->ag_DatabaseClass, cd->cd_CurrentDatabase);
    stcgfp (cd->cd_WorkPath, name);
    stcgfn (cd->cd_WorkNode, name);
    dnh = NULL;

    /*********************************/
    /* SEARCH THE IMMEDIATE DATABASE */
    /*********************************/
    if ((cd->cd_WorkPath[0] == 0) ||
	((cd->cd_WorkPath[0] != 0) && (Stricmp (cd->cd_WorkPath, dbd->dbd_Name) == 0)))
    {
        /* Search through local database first */
        ostate = (Object *)dbd->dbd_NodeList.mlh_Head;
        while ((member = NextObject (&ostate)) && !found)
        {
            nd = INST_DATA (ag->ag_NodeClass, member);
            if (Stricmp (nd->nd_Name, cd->cd_WorkNode) == 0)
            {
		dnh = dbd->dbd_HH;
                found = TRUE;
            }
        }
    }

    /******************************************/
    /* SEARCH THE GLOBAL CROSS REFERENCE LIST */
    /******************************************/
    if (!found)
    {
	/* Search through global cross reference list */
	mlh = &(ag->ag_Token->agt_XRefList);
	if (xr = (struct XRef *) FindNameI ((struct List *) mlh, name))
	{
	    si->si_TopVert = line = xr->xr_Line;
	    switch (xr->xr_Node.ln_Type)
	    {
		case XR_INCLUDE:
		case XR_MACRO:
		case XR_STRUCT:
		case XR_FIELD:
		case XR_TYPEDEF:
		case XR_DEFINE:
		    strcpy (cd->cd_WorkPath, xr->xr_File);
		    strcpy (cd->cd_WorkNode, "Main");
		    break;

		default:
		    strcpy (cd->cd_WorkPath, xr->xr_File);
		    strcpy (cd->cd_WorkNode, xr->xr_Name);
		    break;
	    }
	    found = TRUE;
	}
    }

    /************************************/
    /* SEARCH THE GLOBAL NODE HOST LIST */
    /************************************/
    if (!found)
    {
	ULONG (*ASM he) (REG (a0) struct Hook * h, REG (a2) VOID * obj, REG (a1) VOID * msg);
	struct DatabaseData *hdbd;
	struct TagItem tags[4];
	struct HostHandle *hh;
	struct opFindHost ofh;
	struct Rectangle rect;
	BOOL search = TRUE;
	struct Node *node;
	Object *no;

	/* Initialize the tag list */
	tags[0].ti_Tag  = AGA_HelpGroup;
	tags[0].ti_Data = cd->cd_HelpGroup;
	tags[1].ti_Tag  = TAG_DONE;

	/* If we have a window, then we have more tags */
	if (cd->cd_Window)
	{
	    rect = *((struct Rectangle *)&cd->cd_Window->LeftEdge);
	    tags[1].ti_Tag  = HTNA_Screen;
	    tags[1].ti_Data = (ULONG) cd->cd_Window->WScreen;
	    tags[2].ti_Tag  = HTNA_Rectangle;
	    tags[2].ti_Data = (ULONG) &rect;
	    tags[3].ti_Tag  = TAG_DONE;
	}

	/* Prepare the message structure */
	memset (&ofh, 0, sizeof (struct opFindHost));
	ofh.MethodID  = HM_FINDNODE;
	ofh.ofh_Attrs = tags;
	ofh.ofh_Node  = name;
	ofh.ofh_Title = name;

	mlh = &ag->ag_HostList;
	if (mlh->mlh_TailPred != (struct Node *) mlh)
	{
	    /* Step through the list of hosts */
	    for (node = (struct Node *) mlh->mlh_Head; (node->ln_Succ && search); node = node->ln_Succ)
	    {
		/* Cast the node to a HostHandle */
		hh = (struct HostHandle *) node;

		/* Get a pointer to the entry point */
		he = hh->hh_Dispatcher.h_Entry;

		/* Get a pointer to the database object */
		hdbd = INST_DATA (ag->ag_DatabaseClass, hh->hh_DB);

		/* Ask the node host if it belongs to it. */
		if ((*he) (hh, hdbd->dbd_Name, &ofh))
		{
		    /* Create the node object. */
		    if (no = newobject (ag, ag->ag_NodeClass, NULL,
					HNA_Name,	(ULONG) ofh.ofh_Node,
					HNA_TOC,	(ULONG) ofh.ofh_TOC,
					HNA_Title,	(ULONG) ofh.ofh_Title,
					HNA_Next,	(ULONG) ofh.ofh_Next,
					HNA_Previous,	(ULONG) ofh.ofh_Prev,
					HNA_Database, 	hh->hh_DB,
					HNA_HostHandle,	hh,
					TAG_DONE))
		    {
			/* Remember the names */
			strcpy (cd->cd_WorkPath, hdbd->dbd_Name);
			strcpy (cd->cd_WorkNode, ofh.ofh_Node);
			dnh = hh;

			/* Show that we found it successfully. */
			found = TRUE;
		    }

		    /* Found it, so don't search anymore */
		    search = FALSE;
		}
	    }
	}
    }

    if (!found)
    {
	/* No other checks */
    }

    /* External database? */
    if (strlen (cd->cd_WorkPath))
    {
	dbname = cd->cd_WorkPath;
	DB (kprintf ("WorkPath='%s'\n", dbname));
    }
    else
    {
	dbd    = INST_DATA (ag->ag_DatabaseClass, cd->cd_CurrentDatabase);
	dbname = dbd->dbd_Name;
	dnh    = dbd->dbd_HH;
	DB (kprintf ("WorkPath=NULL, dbd_Name='%s'\n", dbname));
    }

    /* Attempt to open the database */
    DB (kprintf ("open database '%s', cd=%08lx, dnh=%08lx\n", dbname, cd, dnh));
    if (ndbo = newobject (ag, ag->ag_DatabaseClass, NULL,
			  DBA_Name,		dbname,
			  DBA_ClientData,	cd,
			  DBA_HostHandle,	dnh,
			  TAG_DONE))
    {
        /* Get a pointer to the current database data */
        dbd = INST_DATA (ag->ag_DatabaseClass, ndbo);

        /* Search through the list for the node */
        ostate = (Object *)dbd->dbd_NodeList.mlh_Head;
        while (member = NextObject (&ostate))
        {
            nd = INST_DATA (ag->ag_NodeClass, member);
            if (Stricmp (nd->nd_Name, cd->cd_WorkNode) == 0)
            {
		/* See if we have a command to run on open */
		if (nd->nd_OnOpen)
		{
		    STRPTR buffer;
		    ULONG msize;
		    LONG i = 10;

		    msize = strlen (nd->nd_OnOpen) + strlen (dbd->dbd_FullName) + strlen (nd->nd_Name) + 5;
		    if (buffer = AllocMem (msize, MEMF_PUBLIC))
		    {
			sprintf (buffer, "%s %s %s", nd->nd_OnOpen, dbd->dbd_FullName, nd->nd_Name);
			i = m_sendCmd (ag, buffer);
			FreeMem (buffer, msize);
		    }

		    if (i > 0)
			break;
		}

		ObtainSemaphore (&nd->nd_Lock);
		nd->nd_UseCnt++;
		ReleaseSemaphore (&nd->nd_Lock);

		cd->cd_CurrentNode = member;

		si->si_TopVert  = line;
		si->si_TopHoriz = column;

		if (nd->nd_Object)
		{
		    if (cd->cd_Window)
		    {
			RectFill (&cd->cd_Clear,
				  domain->Left,
				  cd->cd_Top,
				  domain->Left + domain->Width - 1,
				  domain->Top + domain->Height - 1);

		    }

		    /* Connect the object */
#if 0
		    tattr = (tattr) ? tattr : &nd->nd_TextAttr;
#endif
		    setattrs (ag, nd->nd_Object,
				  DTA_TopVert,	line,
				  DTA_TopHoriz,	column,
				  DTA_TextAttr,	tattr,
				  ICA_TARGET,	cd->cd_Glue,
				  TAG_DONE);

		    /* Tell the model who the embedded object is */
		    setattrs (ag, cd->cd_Glue, DBA_EmbeddedObject, nd->nd_Object, TAG_DONE);
		}

		cd->cd_Flags |= AGF_RENDER;

		/* Set the new settings */
		si->si_TopVert  = line;
		si->si_TopHoriz = column;

		DB (kprintf ("return %08lx\n", member));
                return (member);
            }
        }

	DB (kprintf ("couldn't open '%s'\n", name));
	cd->cd_ErrorLevel  = RETURN_WARN;
	cd->cd_ErrorNumber = DTERROR_COULDNT_OPEN;
	cd->cd_ErrorString = (ULONG) name;

	/* Dispose of the object */
	DisposeObject (ndbo);
    }
    else
    {
	DB (kprintf ("couldn't open database '%s'\n", dbname));
    }

    return (NULL);
}

/*****************************************************************************/

VOID ReleaseNode (struct AGLib *ag, Class *cl, Object *o, Object *node)
{
    ULONG (*ASM he) (REG (a0) struct Hook * h, REG (a2) VOID * obj, REG (a1) VOID * msg);
    struct ClientData *cd = INST_DATA (cl, o);
    struct DatabaseData *dbd;
    struct DTSpecialInfo *si;
    struct NodeData *nd;
    struct IBox *domain;

    if (node)
    {
	nd  = INST_DATA (ag->ag_NodeClass, node);
	dbd = INST_DATA (ag->ag_DatabaseClass, nd->nd_Database);

	if (nd->nd_Object)
	{
	    si = (struct DTSpecialInfo *) G(nd->nd_Object)->SpecialInfo;

	    /* Tell the model that there is no embedded object */
	    setattrs (ag, cd->cd_Glue, DBA_EmbeddedObject, NULL, TAG_DONE);

	    /* Remove it from the glue */
	    setattrs (ag, nd->nd_Object, ICA_TARGET, NULL, TAG_DONE);

	    if (cd->cd_Window)
	    {
		getdtattrs (ag, o, DTA_Domain, (ULONG *)&domain, TAG_DONE);
		RectFill (&cd->cd_Clear,
			  domain->Left,
			  cd->cd_Top,
			  domain->Left + domain->Width - 1,
			  domain->Top + domain->Height - 1);
	    }

	    /* Can't remove object while it is still laying out.  Still a window for layout to
	     * to start before we actually remove the object. */
	    while (si->si_Flags & (DTSIF_LAYOUTPROC))
		Delay (2);

	    /* Tell the object it is being removed */
	    DoMethod (nd->nd_Object, DTM_REMOVEDTOBJECT, NULL);
	}

	/* See if we have a command to run on close */
	if (nd->nd_OnClose)
	{
	    STRPTR buffer;
	    ULONG msize;

	    msize = strlen (nd->nd_OnClose) + strlen (dbd->dbd_FullName) + strlen (nd->nd_Name) + 5;
	    if (buffer = AllocMem (msize, MEMF_PUBLIC))
	    {
		sprintf (buffer, "%s %s %s", nd->nd_OnClose, dbd->dbd_FullName, nd->nd_Name);
		m_sendCmd (ag, buffer);
		FreeMem (buffer, msize);
	    }
	}

	ObtainSemaphore (&nd->nd_Lock);
	if (nd->nd_UseCnt)
	    nd->nd_UseCnt--;

	/* SHOULD THIS BE OVER IN NDDISPATCH.C IN THE OM_DISPOSE SECTION??? */
	if ((nd->nd_UseCnt == 0) && (dbd->dbd_HH))
	{
	    struct TagItem tags[2];

	    /* Initialize the tag list */
	    tags[0].ti_Tag  = AGA_HelpGroup;
	    tags[0].ti_Data = cd->cd_HelpGroup;
	    tags[1].ti_Tag  = TAG_DONE;

	    /* Prepare the message */
	    nd->nd_ONM.MethodID  = HM_CLOSENODE;
	    nd->nd_ONM.onm_Attrs = tags;
	    nd->nd_ONM.onm_Node  = nd->nd_Name;
	    nd->nd_ONM.onm_Flags = nd->nd_Flags;

	    /* Get a pointer to the entry point */
	    he = dbd->dbd_HH->hh_Dispatcher.h_Entry;
	    (*he) (dbd->dbd_HH, dbd->dbd_Name, &nd->nd_ONM);

	    /* Clear the buffer */
	    if (nd->nd_Flags & HNF_FREEBUFFER)
		FreeVec (nd->nd_Buffer);
	    nd->nd_Buffer = NULL;
	    nd->nd_BufferLen = 0;
	}

	if (!DoMethod (nd->nd_Database, OM_DISPOSE))
	    ReleaseSemaphore (&nd->nd_Lock);
    }
}
@


39.13
log
@clean up
@
text
@d11 4
d32 2
d186 1
d193 1
d197 1
d275 1
d280 1
d287 4
@


39.12
log
@problems with node hosts
@
text
@d18 1
a21 1
    struct List *list;
d45 1
a45 1
        ostate = (Object *)dbd->dbd_NodeList.lh_Head;
d63 2
a64 2
	list = &(ag->ag_Token->agt_XRefList);
	if (xr = (struct XRef *) FindNameI (list, name))
d126 2
a127 2
	list = &ag->ag_HostList;
	if (list->lh_TailPred != (struct Node *) list)
d130 1
a130 1
	    for (node = list->lh_Head; (node->ln_Succ && search); node = node->ln_Succ)
d199 1
a199 1
        ostate = (Object *)dbd->dbd_NodeList.lh_Head;
d205 19
a275 1

d324 15
@


39.11
log
@now passes nodehost information to open database.
@
text
@a14 1
    struct HostHandle *dnh = NULL;
d17 1
d36 1
d51 1
d185 1
@


39.10
log
@clean up
@
text
@a8 6
#define	DB(x)	;
#define	DH(x)	;
#define	DF(x)	;
#define	DL(x)	;
#define	DN(x)	;

d15 1
d156 1
d189 1
d254 1
d256 1
@


39.9
log
@David - you need a login message.
Spence
@
text
@a19 1
    struct List *list = &(ag->ag_Token->agt_XRefList);
d26 1
a32 2
    DF (kprintf ("ObtainNode [%s] %ld, %ld\n", name, line, column));

a40 1
    DL (kprintf ("path=[%s] node=[%s] : local=[%s]\n", cd->cd_WorkPath, cd->cd_WorkNode, dbd->dbd_Name));
a48 1
	DL (kprintf ("search local\n"));
a54 1
                DB (kprintf ("ag : found %s local\n", cd->cd_WorkNode));
d66 1
a66 1
	DB (kprintf ("search global cross reference list\n"));
d69 1
a69 2
	    DB (kprintf ("ag : found %s xref %s : %s : %ld\n", name, xr->xr_File, xr->xr_Name, xr->xr_Line));
	    line = xr->xr_Line + 1;
a122 1
	DB (kprintf ("search global node host list\n"));
a132 1
	    DH (kprintf ("search node hosts for '%s'\n", name));
a144 1
		DH (kprintf ("look in '%s'...", hdbd->dbd_Name));
a147 1
		    DH (kprintf ("found\ncreate '%s' node object : title='%s'\n", ofh.ofh_Node, ofh.ofh_Title));
a168 4
		else
		{
		    DH (kprintf ("not found\n"));
		}
a170 4
	else
	{
	    DH (kprintf ("no Node Hosts\n"));
	}
a189 1
    DB (kprintf ("search in %s\n", dbname));
a202 1
	    DB (kprintf ("compare [%s] to node [%s]\n", cd->cd_WorkNode, nd->nd_Name));
a226 1
		    DN (kprintf ("ag : set embeded attrs %ld, %ld ***\n", line, column));
d234 1
d236 3
a238 1
		    DoMethod (cd->cd_Glue, OM_ADDMEMBER, (LONG)nd->nd_Object);
d242 5
a250 1
	DF (kprintf ("couldn't find node [%s] in database [%s]\n", cd->cd_WorkNode, dbname));
a257 6
    else
    {
	DF (kprintf ("couldn't open database [%s]\n", dbname));
    }

    DB (kprintf ("ag : couldn't find %s\n", name));
d270 1
d281 16
a299 1
	    {
a300 4
	    }

	    /* Unglue them */
	    DoMethod (cd->cd_Glue,   OM_REMMEMBER, (LONG)nd->nd_Object);
a310 2

	DB (kprintf ("node %s use count = %ld\n", nd->nd_Name, nd->nd_UseCnt));
a327 1
	    DH (kprintf ("close host '%s' object '%s'\n", dbd->dbd_Name, nd->nd_Name));
@


39.8
log
@tracks help group
@
text
@d152 1
d160 1
d162 2
d168 1
d171 2
d331 4
a334 4
	    nd->nd_ONM.MethodID      = HM_CLOSENODE;
	    nd->nd_ONM.onm_Attrs     = tags;
	    nd->nd_ONM.onm_Node      = nd->nd_Name;
	    nd->nd_ONM.onm_Flags     = nd->nd_Flags;
@


39.7
log
@*** empty log message ***
@
text
@d104 1
a104 1
	struct TagItem tag[4];
d108 1
d112 16
d132 1
a135 15
	/* Prepare the tags */
	if (cd->cd_Window)
	{
	    rect = *((struct Rectangle *)&cd->cd_Window->LeftEdge);
	    tag[0].ti_Tag  = HTNA_Screen;
	    tag[0].ti_Data = (ULONG) cd->cd_Window->WScreen;
	    tag[1].ti_Tag  = HTNA_Rectangle;
	    tag[1].ti_Data = (ULONG) &rect;
	    tag[2].ti_Tag  = TAG_DONE;
	}
	else
	{
	    tag[0].ti_Tag  = TAG_DONE;
	}

d141 1
a141 1
	    for (node = list->lh_Head; node->ln_Succ; node = node->ln_Succ)
d168 3
d184 5
d215 1
a215 1
	    DH (kprintf ("compare [%s] to node [%s]\n", cd->cd_WorkNode, nd->nd_Name));
d260 1
a260 1
	cd->cd_ErrorString = name;
a281 1
    struct opNodeIO onm;
d313 1
a313 1
	DH (kprintf ("node %s use count = %ld\n", nd->nd_Name, nd->nd_UseCnt));
d316 7
d324 4
a327 2
	    onm.MethodID = HM_CLOSENODE;
	    onm.onm_Node = nd->nd_Name;
d332 1
a332 1
	    (*he) (dbd->dbd_HH, dbd->dbd_Name, &onm);
@


39.6
log
@enforcer hit on search node host
@
text
@d13 1
d229 4
a232 1
		    DB (kprintf ("ag : set embeded attrs %ld, %ld\n", line, column));
@


39.5
log
@error returns are now setup
@
text
@d70 1
d111 1
d118 13
a130 6
	rect = *((struct Rectangle *)&cd->cd_Window->LeftEdge);
	tag[0].ti_Tag  = HTNA_Screen;
	tag[0].ti_Data = (ULONG) cd->cd_Window->WScreen;
	tag[1].ti_Tag  = HTNA_Rectangle;
	tag[1].ti_Data = (ULONG) &rect;
	tag[2].ti_Tag  = TAG_DONE;
d189 1
@


39.4
log
@*** empty log message ***
@
text
@d180 4
a183 1
    if (ndbo = newobject (ag, ag->ag_DatabaseClass, NULL, DBA_Name, dbname, TAG_DONE))
d231 1
d233 3
@


39.3
log
@added node host abilities
@
text
@d118 1
a118 1
	tag[0].ti_Data = cd->cd_Window->WScreen;
d120 1
a120 1
	tag[1].ti_Data = &rect;
@


39.2
log
@*** empty log message ***
@
text
@d7 1
d10 3
d32 2
d39 4
a42 1
    cd->cd_WorkPath[0] = cd->cd_WorkNode[0] = 0;
d44 5
a48 4
    /* Search through local database first */
    dbd = INST_DATA (ag->ag_DatabaseClass, cd->cd_CurrentDatabase);
    ostate = (Object *)dbd->dbd_NodeList.lh_Head;
    while ((member = NextObject (&ostate)) && !found)
d50 12
a61 7
	nd = INST_DATA (ag->ag_NodeClass, member);
	if (Stricmp (nd->nd_Name, name) == 0)
	{
	    strcpy (cd->cd_WorkNode, name);
	    DB (kprintf ("ag : found %s local\n", name));
	    found = TRUE;
	}
d64 3
d91 70
d164 1
a164 2
	    stcgfp (cd->cd_WorkPath, name);
	    stcgfn (cd->cd_WorkNode, name);
d190 1
d228 2
d233 5
d246 1
d248 1
d250 1
d255 3
a257 1
	nd = INST_DATA (ag->ag_NodeClass, node);
d279 22
@


39.1
log
@changed TDTA_TextAttr to DTA_TextAttr
@
text
@d8 1
a8 1
#define	DL(x)	;
d12 1
a12 1
struct TagItem emb_map[] =
d14 1
a14 12
    {GA_ID,	HNA_EmbedID},
    {GA_Left,	TAG_IGNORE},
    {GA_Top,	TAG_IGNORE},
    {GA_Width,	TAG_IGNORE},
    {GA_Height,	TAG_IGNORE},
    {TAG_DONE,},
};

/*****************************************************************************/

Object *ObtainNode (struct AGLib *ag, Class *cl, Object *o, STRPTR name)
{
d33 1
a42 1
	    cd->cd_WorkPath[0] = 0;
d44 1
d54 19
a72 2
	    strcpy (cd->cd_WorkPath, xr->xr_File);
	    strcpy (cd->cd_WorkNode, xr->xr_Name);
d111 3
d127 1
d129 2
a131 2
				  ICA_TARGET,	cd->cd_Glue,
				  ICA_MAP,	emb_map,
d136 1
d143 1
@


39.0
log
@initial RCS
@
text
@d41 1
a41 1
	        TDTA_TextAttr,	(ULONG *)&tattr,
d118 1
a118 1
				  TDTA_TextAttr,tattr,
@
