head     40.2;
branch   ;
access   ;
symbols  ;
locks    davidj:40.2; strict;
comment  @ * @;


40.2
date     93.05.25.11.59.14;  author davidj;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.22.14.49.29;  author davidj;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.12.16.03.19;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.42.48;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


40.2
log
@removed kprintf's
@
text
@/* classbase.c
 *
 */

#include "classbase.h"

/*****************************************************************************/

#define	DB(x)	;

/****** anim.datatype/anim.datatype ****************************************
*
*    NAME
*	anim.datatype -- data type for ANIM movies.
*
*    FUNCTION
*	The anim data type, a sub-class of the movie.datatype, is used
*	to load ANIM files.
*
*    METHODS
*	OM_NEW -- Create a new movie object from an ANIM.  The
*	    source may be either a file or the clipboard.
*
*    SEE ALSO
*	animation.datatype
*
*******************************************************************************
*
* Created:  27-Feb-92, David N. Junod
*
*/

/*****************************************************************************/

Class *ASM ObtainAnimEngine (REG (a6) struct ClassBase *cb)
{
    return (cb->cb_Class);
}

/*****************************************************************************/

struct Library *ASM LibInit (REG (d0) struct ClassBase *cb, REG (a0) BPTR seglist, REG (a6) struct Library * sysbase)
{
    cb->cb_SegList = seglist;
    SysBase = (struct ExecBase *) sysbase;
    InitSemaphore (&cb->cb_Lock);
    if (((struct Library *)SysBase)->lib_Version >= 39)
    {
	IntuitionBase = OpenLibrary ("intuition.library",39);
	GfxBase       = OpenLibrary ("graphics.library", 39);
	DOSBase       = OpenLibrary ("dos.library",      39);
	UtilityBase   = OpenLibrary ("utility.library",  39);
	return (struct Library *) cb;
    }
    else
    {
	return NULL;
    }
}

/*****************************************************************************/

LONG ASM LibOpen (REG (a6) struct ClassBase *cb)
{
    LONG retval = (LONG) cb;
    BOOL success = TRUE;

    ObtainSemaphore (&cb->cb_Lock);

    /* Use an internal use counter */
    cb->cb_Lib.lib_OpenCnt++;
    cb->cb_Lib.lib_Flags &= ~LIBF_DELEXP;

    if (cb->cb_Lib.lib_OpenCnt == 1)
    {
	if (cb->cb_Class == NULL)
	{
	    success = FALSE;
	    IFFParseBase = OpenLibrary ("iffparse.library", 0);
	    DataTypesBase = OpenLibrary ("datatypes.library", 0);

	    if (DataTypesBase && IFFParseBase)
	    {
		if (cb->cb_SuperClassBase = OpenLibrary ("datatypes/animation.datatype", 39))
		{
		    if (cb->cb_Class = initClass (cb))
		    {
			success = TRUE;
		    }
		    else
		    {
			DB (kprintf ("can't init anim class\n"));
		    }
		}
		else
		{
		    DB (kprintf ("can't open datatypes/animation.datatype\n"));
		}
	    }
	    else
	    {
		DB (kprintf ("can't open datatypes.library or iffparse.library\n"));
	    }
	}
    }

    if (!success)
    {
	CloseLibrary (cb->cb_SuperClassBase);
	CloseLibrary (DataTypesBase);
	CloseLibrary (IFFParseBase);
	IFFParseBase = DataTypesBase = NULL;
	cb->cb_Lib.lib_OpenCnt--;
	retval = NULL;
    }

    ReleaseSemaphore (&cb->cb_Lock);

    return (retval);
}

/*****************************************************************************/

LONG ASM LibClose (REG (a6) struct ClassBase *cb)
{
    LONG retval = NULL;

    ObtainSemaphore (&cb->cb_Lock);

    if (cb->cb_Lib.lib_OpenCnt)
	cb->cb_Lib.lib_OpenCnt--;

    if ((cb->cb_Lib.lib_OpenCnt == 0) && cb->cb_Class)
    {
	if (FreeClass (cb->cb_Class))
	{
	    CloseLibrary (cb->cb_SuperClassBase);
	    CloseLibrary (DataTypesBase);
	    CloseLibrary (IFFParseBase);
	    cb->cb_Class = NULL;
	}
	else
	{
	    cb->cb_Lib.lib_Flags |= LIBF_DELEXP;
	}
    }

    if (cb->cb_Lib.lib_Flags & LIBF_DELEXP)
	retval = LibExpunge (cb);

    ReleaseSemaphore (&cb->cb_Lock);

    return (retval);
}

/*****************************************************************************/

LONG ASM LibExpunge (REG (a6) struct ClassBase *cb)
{
    BPTR seg = cb->cb_SegList;

    if (cb->cb_Lib.lib_OpenCnt)
    {
	cb->cb_Lib.lib_Flags |= LIBF_DELEXP;
	return (NULL);
    }

    Remove ((struct Node *) cb);

    CloseLibrary (UtilityBase);
    CloseLibrary (DOSBase);
    CloseLibrary (GfxBase);
    CloseLibrary (IntuitionBase);

    FreeMem ((APTR)((ULONG)(cb) - (ULONG)(cb->cb_Lib.lib_NegSize)), cb->cb_Lib.lib_NegSize + cb->cb_Lib.lib_PosSize);

    return ((LONG) seg);
}
@


40.1
log
@clean up
@
text
@d7 4
d91 3
a93 1
			kprintf ("can't init anim class\n");
d96 3
a98 1
		    kprintf ("can't open datatypes/animation.datatype\n");
d101 3
a103 1
		kprintf ("can't open datatypes.library or iffparse.library\n");
@


40.0
log
@initial RCS
@
text
@d49 1
a49 1
	return cb;
@


39.0
log
@initial RCS
@
text
@d7 22
d31 1
a31 1
Class *ASM ObtainCBEngine (REG (a6) struct ClassBase * cb)
d38 1
a38 1
struct Library *ASM LibInit (REG (d0) struct ClassBase * cb, REG (a0) BPTR seglist, REG (a6) struct Library * sysbase)
a39 1
    /* Initicbize the library base */
d41 1
a41 1
    cb->cb_SysBase = sysbase;
d43 1
a43 3

    /* Make sure we're running on the correct version of the OS */
    if (sysbase->lib_Version >= 39)
d45 2
a46 1
	/* Open the ROM libraries */
d49 5
a53 4
	LayersBase    = OpenLibrary ("layers.library",   39);
	GfxBase       = OpenLibrary ("graphics.library", 39);
	IntuitionBase = OpenLibrary ("intuition.library",39);
	return (cb);
a54 2

    return (NULL);
d59 1
a59 1
LONG ASM LibOpen (REG (a6) struct ClassBase * cb)
a60 1
    struct ExecBase *eb = (struct ExecBase *) cb->cb_SysBase;
a62 1
    BYTE nest;
a63 1
    /* FORBID() */
a64 2
    nest = eb->TDNestCnt;
    Permit ();
d67 1
a67 1
    cb->cb_UseCnt++;
d70 1
a70 1
    if ((cb->cb_UseCnt == 1) && (cb->cb_Class == NULL))
d72 23
a94 5
	success = FALSE;
	if (cb->cb_DataTypesBase = OpenLibrary ("datatypes.library", 0))
	    if (cb->cb_IFFParseBase = OpenLibrary ("iffparse.library", 0))
		if (cb->cb_Class = initClass (cb))
		    success = TRUE;
d99 5
a103 1
	cb->cb_UseCnt--;
a106 2
    /* PERMIT() */
    eb->TDNestCnt = nest;
d114 1
a114 1
LONG ASM LibClose (REG (a6) struct ClassBase * cb)
d116 3
a118 2
    if (cb->cb_UseCnt)
	cb->cb_UseCnt--;
d120 4
a123 1
    if ((cb->cb_UseCnt == 0) && cb->cb_Class)
d127 3
a129 3
	    CloseLibrary (cb->cb_IFFParseBase);
	    CloseLibrary (cb->cb_DataTypesBase);
	    cb->cb_IFFParseBase = cb->cb_DataTypesBase = NULL;
d139 3
a141 1
	return (LibExpunge (cb));
d143 1
a143 1
    return (NULL);
d148 1
a148 1
LONG ASM LibExpunge (REG (a6) struct ClassBase * cb)
d150 3
a152 1
    if (cb->cb_UseCnt)
a157 16
    if (cb->cb_Class)
    {
	if (FreeClass (cb->cb_Class))
	{
	    CloseLibrary (cb->cb_IFFParseBase);
	    CloseLibrary (cb->cb_DataTypesBase);
	    cb->cb_IFFParseBase = cb->cb_DataTypesBase = NULL;
	    cb->cb_Class = NULL;
	}
	else
	{
	    cb->cb_Lib.lib_Flags |= LIBF_DELEXP;
	    return (NULL);
	}
    }

a159 3
    CloseLibrary (IntuitionBase);
    CloseLibrary (GfxBase);
    CloseLibrary (LayersBase);
d162 4
d167 1
a167 1
    return ((LONG) cb->cb_SegList);
@
