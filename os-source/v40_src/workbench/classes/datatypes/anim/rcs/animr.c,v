head     40.1;
branch   ;
access   ;
symbols  ;
locks    davidj:40.1; strict;
comment  @ * @;


40.1
date     93.03.22.14.52.32;  author davidj;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.12.16.02.52;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.02.08.46.08;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


40.1
log
@took out anim op-8 support
@
text
@/* animr.c
 *
 */

#include "classbase.h"

/*****************************************************************************/

#define	DB(x)	;
#define	DC(x)	;

/*****************************************************************************/

LONG ASM DecodeVKPlane (REG (a0) unsigned char *in, REG (a2) unsigned char *out, REG (d2) LONG linebytes, REG (a3) WORD * ytable);
LONG ASM DecodeXORPlane (REG (a0) unsigned char *in, REG (a2) unsigned char *out, REG (d2) LONG linebytes, REG (a3) WORD * ytable);
LONG ASM Decode8VKPlane (REG (a0) unsigned char *in, REG (a2) unsigned char *out, REG (d2) LONG BytesPerRow, REG (a3) WORD *ytable, REG (d4) LONG xcount);
void ASM PlayDLTA(REG (a2) struct BitMap *bm, REG (a1) LONG *buff, REG (a3) WORD *table, REG (d4) UWORD ImageWidth, REG (d5) UWORD ImageDepth);

/*****************************************************************************/

LONG LoadDelta (struct ClassBase * cb, struct IFFHandle * iff, WORD * ytable,
		 struct BitMap * bm, struct AnimHeader * ah, LONG * deltalong)
{
    BYTE *deltabyte = (BYTE *) deltalong;
    unsigned char *in, *out;
    struct ContextNode *cn;
    LONG i, x, linebytes;
    LONG retval = 0;
    BOOL xor;

    /* Get a pointer to the current chunk */
    cn = CurrentChunk (iff);

    /* Make sure we have a delta chunk */
    if ((cn->cn_Type == ID_ILBM) && (cn->cn_ID == ID_DLTA))
    {
	/* Read the whole delta into our buffer */
	if (ReadChunkBytes (iff, deltalong, cn->cn_Size) == cn->cn_Size)
	{
	    if (ah->ah_Operation == 8)
	    {
#if 0
#if 0
		/* Get the bytes per line for the destination bitmap */
		linebytes = (LONG) bm->BytesPerRow;

		/* Get the width */
		x = GetBitMapAttr (bm, BMA_WIDTH);

		/* Step through the planes */
		for (i = 0; i < bm->Depth; i++)
		{
		    if (deltalong[i])
		    {
			in  = (unsigned char *) (deltabyte + deltalong[i]);
			out = (unsigned char *) (bm->Planes[i]);

kprintf ("%08lx, %08lx, %ld, %08lx, %ld : ", in, out, linebytes, ytable, x);
			Decode8VKPlane (in, out, linebytes, ytable, x);
kprintf ("done\n");
		    }
		}
#else
		if (ah->ah_Flags & 1)
		{
		    PlayDLTA (bm, deltalong, ytable, ((UWORD)(GetBitMapAttr (bm, BMA_WIDTH))), (UWORD) bm->Depth);
		}
#endif
#endif
	    }
	    else
	    {
		/* Are we XOR or not */
		xor = FALSE;
		/* DPaint anim brush */
		if ((ah->ah_Operation == 5) && (ah->ah_Interleave == 1))
		    xor = TRUE;
		else if ((ah->ah_Operation == 5) && (ah->ah_Flags & 1))
		    xor = TRUE;
		else if (ah->ah_Operation == 1)
		    xor = TRUE;

		/* Get the bytes per line for the destination bitmap */
		linebytes = (LONG) bm->BytesPerRow;

		/* Step through the planes */
		for (i = 0; i < bm->Depth; i++)
		{
		    if (deltalong[i])
		    {
			in = (unsigned char *) (deltabyte + deltalong[i]);

			out = (unsigned char *) (bm->Planes[i]);
			DB (kprintf ("%ld) %08lx (%ld), %08lx %s\n", i, in, deltalong[i], out, ((xor) ? "XOR" : "Opt5")));
			if (xor)
			    DecodeXORPlane (in, out, linebytes, ytable);
			else
			    DecodeVKPlane (in, out, linebytes, ytable);
		    }
		}
		DB (kprintf ("\n"));
	    }
	    retval = 1;
	}
    }
    return (retval);
}

/*****************************************************************************/

WORD *AllocYTable (struct ClassBase * cb, struct BitMap * bm)
{
    WORD linebytes;
    WORD *pt, acc;
    WORD *ytable;
    WORD height;
    ULONG msize;

    height = (WORD) bm->Rows;
    linebytes = (WORD) bm->BytesPerRow;
    msize = (LONG) height * sizeof (WORD);

    if (ytable = AllocVec (msize, MEMF_PUBLIC))
    {
	pt = ytable;
	acc = 0;

	while (--height >= 0)
	{
	    *pt++ = acc;
	    acc += linebytes;
	}
    }
    return (ytable);
}

/*****************************************************************************/

VOID FreeYTable (struct ClassBase * cb, WORD * ytable)
{

    FreeVec (ytable);
}
@


40.0
log
@initial RCS
@
text
@d16 1
d27 1
a27 1
    LONG i, linebytes;
d42 28
a69 1
		PlayDLTA (bm, deltalong, ytable, (UWORD)GetBitMapAttr (bm, BMA_WIDTH), (UWORD) bm->Depth);
d121 1
a121 1
    msize = (LONG) height *sizeof (WORD);
@


39.0
log
@initial RCS
@
text
@a1 1
 * decodes opcode 5 ANIM dlta data into a bitmap
d7 2
d10 7
d20 2
a21 1
LONG LoadDelta (struct ClassBase *cb, struct IFFHandle *iff, WORD *ytable, struct BitMap *bm, struct AnimHeader *anhd, LONG *dltabuffer)
d23 2
a24 3
    register unsigned char *out;
    register unsigned char *in;
    register long i, linebytes;
d26 3
a28 1
    LONG retval = 25;
d30 1
d33 1
d36 2
a37 1
	if (ReadChunkBytes (iff, dltabuffer, cn->cn_Size) == cn->cn_Size)
d39 1
a39 3
	    linebytes = (long) bm->BytesPerRow;
	    DB (kprintf ("0x%04lx %ld,%ld,%ld,%ld\n", (ULONG)anhd->mask, (LONG)anhd->x, (LONG)anhd->y, (ULONG)anhd->w, (ULONG)anhd->h));
	    for (i = 0; i < bm->Depth; i++)
d41 19
a59 1
		if (dltabuffer[i])
d61 11
a71 6
		    in  = (unsigned char *) dltabuffer + dltabuffer[i];
		    out = (unsigned char *) (bm->Planes[i]);
		    if (anhd->bits & 2)
			DecodeXORPlane (in, out, linebytes, ytable);
		    else
			DecodeVKPlane  (in, out, linebytes, ytable);
d73 1
d75 1
a75 1
	    retval = 0;
d83 1
a83 1
WORD *AllocYTable (struct ClassBase *cb, WORD width, register WORD height)
d85 2
a86 2
    register WORD linebytes;
    register WORD *pt, acc;
d88 1
d91 3
a93 2
    linebytes = (((width + 15) >> 4) << 1);
    msize = height * sizeof (WORD);
d111 1
a111 1
VOID FreeYTable (struct ClassBase *cb, WORD *ytable)
d113 1
@
