head     40.1;
branch   ;
access   ;
symbols  ;
locks    davidj:40.1; strict;
comment  @ * @;


40.1
date     93.04.27.17.21.04;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.09.02.09.24.00;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.07.23.16.51.18;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.23.03.34.26;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.19.03.49.34;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.02.14.24.07;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.01.15.54.24;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


40.1
log
@Totally new async design
@
text
@/* classbase.c
 *
 */

#include "classbase.h"
#include "ilbm_rev.h"

/****** ilbm.datatype/ilbm.datatype ****************************************
*
*    NAME
*	ilbm.datatype -- data type for ILBM pictures.
*
*    FUNCTION
*	The ILBM data type, a sub-class of the picture.datatype, is used
*	to load ILBM IFF picture files.
*
*    METHODS
*	OM_NEW -- Create a new picture object from an ILBM IFF.  The
*	    source may be either a file or the clipboard.
*
*    SEE ALSO
*	picture.datatype.
*
*******************************************************************************
*
* Created:  27-Feb-92, David N. Junod
*
*/

/*****************************************************************************/

Class *ASM ObtainILBMEngine (REG (a6) struct ClassBase *cb)
{
    return (cb->cb_Class);
}

/*****************************************************************************/

struct Library *ASM LibInit (REG (d0) struct ClassBase *cb, REG (a0) BPTR seglist, REG (a6) struct Library * sysbase)
{
    cb->cb_SegList = seglist;
    cb->cb_SysBase = sysbase;
    cb->cb_Lib.lib_Revision = REVISION;
    InitSemaphore (&cb->cb_Lock);
    if (cb->cb_SysBase->lib_Version >= 39)
    {
	cb->cb_IntuitionBase = OpenLibrary ("intuition.library",39);
	cb->cb_GfxBase       = OpenLibrary ("graphics.library", 39);
	cb->cb_DOSBase       = OpenLibrary ("dos.library",      39);
	cb->cb_UtilityBase   = OpenLibrary ("utility.library",  39);
	return cb;
    }
    else
    {
	return NULL;
    }
}

/*****************************************************************************/

LONG ASM LibOpen (REG (a6) struct ClassBase *cb)
{
    LONG retval = (LONG) cb;
    BOOL success = TRUE;

    ObtainSemaphore (&cb->cb_Lock);

    /* Use an internal use counter */
    cb->cb_Lib.lib_OpenCnt++;
    cb->cb_Lib.lib_Flags &= ~LIBF_DELEXP;

    if (cb->cb_Lib.lib_OpenCnt == 1)
    {
	if (cb->cb_Class == NULL)
	{
	    success = FALSE;
	    if (cb->cb_IFFParseBase = OpenLibrary ("iffparse.library", 0))
		if (cb->cb_DataTypesBase = OpenLibrary ("datatypes.library", 0))
		    if (cb->cb_SuperClassBase = OpenLibrary ("datatypes/picture.datatype", 0))
			if (cb->cb_Class = initClass (cb))
			    success = TRUE;
	}
    }

    if (!success)
    {
	cb->cb_Lib.lib_OpenCnt--;
	retval = NULL;
    }

    ReleaseSemaphore (&cb->cb_Lock);

    return (retval);
}

/*****************************************************************************/

LONG ASM LibClose (REG (a6) struct ClassBase *cb)
{
    LONG retval = NULL;

    ObtainSemaphore (&cb->cb_Lock);

    if (cb->cb_Lib.lib_OpenCnt)
	cb->cb_Lib.lib_OpenCnt--;

    if ((cb->cb_Lib.lib_OpenCnt == 0) && cb->cb_Class)
    {
	if (FreeClass (cb->cb_Class))
	{
	    cb->cb_Class = NULL;
	    CloseLibrary (cb->cb_SuperClassBase);
	    CloseLibrary (cb->cb_DataTypesBase);
	    CloseLibrary (cb->cb_IFFParseBase);
	}
	else
	{
	    cb->cb_Lib.lib_Flags |= LIBF_DELEXP;
	}
    }

    if (cb->cb_Lib.lib_Flags & LIBF_DELEXP)
	retval = LibExpunge (cb);

    ReleaseSemaphore (&cb->cb_Lock);

    return (retval);
}

/*****************************************************************************/

LONG ASM LibExpunge (REG (a6) struct ClassBase *cb)
{
    BPTR seg = cb->cb_SegList;

    if (cb->cb_Lib.lib_OpenCnt)
    {
	cb->cb_Lib.lib_Flags |= LIBF_DELEXP;
	return (NULL);
    }

    Remove ((struct Node *) cb);

    CloseLibrary (cb->cb_UtilityBase);
    CloseLibrary (cb->cb_DOSBase);
    CloseLibrary (cb->cb_GfxBase);
    CloseLibrary (cb->cb_IntuitionBase);

    FreeMem ((APTR)((ULONG)(cb) - (ULONG)(cb->cb_Lib.lib_NegSize)), cb->cb_Lib.lib_NegSize + cb->cb_Lib.lib_PosSize);

    return ((LONG) seg);
}
@


39.5
log
@added autodoc.
@
text
@d6 1
d43 1
d136 1
a136 1
    if (cb->cb_UsageCnt)
@


39.4
log
@expunge wasn't freeing library base
@
text
@d7 21
a27 3
/*****************************************************************************/

#define	DB(x)	;
@


39.3
log
@changed the superclass name.
@
text
@d114 8
d129 3
a131 1
    return ((LONG) cb->cb_SegList);
@


39.2
log
@now uses LIBS: multi-assign
@
text
@d59 1
a59 1
		    if (cb->cb_SuperClassBase = OpenLibrary ("picture.class", 0))
@


39.1
log
@cleaned up retval.
@
text
@d59 1
a59 1
		    if (cb->cb_SuperClassBase = OpenLibrary ("sys:classes/datatypes/picture.class", 0))
@


39.0
log
@initial RCS
@
text
@d80 1
a80 1
    ULONG retval = NULL;
@
