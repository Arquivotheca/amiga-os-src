head     40.1;
branch   ;
access   ;
symbols  ;
locks    davidj:40.1; strict;
comment  @ * @;


40.1
date     93.04.27.17.19.07;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     93.02.15.10.40.43;  author davidj;  state Exp;
branches ;
next     39.6;

39.6
date     92.08.10.16.28.44;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     92.08.03.16.35.40;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     92.06.29.14.02.21;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.19.03.50.56;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.10.12.25.07;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.02.14.33.27;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.01.15.55.24;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


40.1
log
@Totally new async design
@
text
@/* getilbm.c
 *
 */

#include "classbase.h"

/*****************************************************************************/

#define	DB(x)	;
#define	DC(x)	;
#define	DR(x)	;
#define	DM(x)	;

/*****************************************************************************/

/* Properties that we can deal with */
LONG ilbmprops[] =
{
    ID_ILBM, ID_BMHD,
    ID_ILBM, ID_CMAP,
    ID_ILBM, ID_CAMG,
    ID_ILBM, ID_GRAB,
    ID_ILBM, ID_NAME,
};

/*****************************************************************************/

BOOL ASM GetILBM (REG (a6) struct ClassBase * cb, REG (a0) Class * cl, REG (a2) Object * o, REG (a1) struct TagItem * attrs)
{
    struct StoredProperty *sp;
    struct BitMapHeader *bmhd;
    struct IFFHandle *iff;
    struct BitMap *bm;
    ULONG modeid = 0;
    Point *point;
    STRPTR title;

    title = (STRPTR) GetTagData (DTA_Name, NULL, attrs);

    getdtattrs (cb, o,
		DTA_Handle, &iff,
		PDTA_BitMapHeader, &bmhd,
		PDTA_Grab, &point,
		TAG_DONE);

    /* IFF handle is already opened for reading */
    PropChunks (iff, ilbmprops, 5);
    StopChunk (iff, ID_ILBM, ID_BODY);

    DM (kprintf ("\n\nGetILBM\n"));

    if (ParseIFF (iff, IFFPARSE_SCAN) == 0L)
    {
	if (sp = FindProp (iff, ID_ILBM, ID_BMHD))
	{
	    CopyMem (sp->sp_Data, bmhd, sizeof (struct BitMapHeader));

	    if (bmhd->bmh_Depth > 8)
	    {
		DB (kprintf ("  can't handle depth of %ld\n", (ULONG) bmhd->bmh_Depth));
		SetIoErr (ERROR_OBJECT_WRONG_TYPE);
	    }
	    else
	    {
		/* Allocate a bitmap to hold the image */
		if (bm = AllocBitMap ((ULONG) bmhd->bmh_Width, (ULONG) bmhd->bmh_Height, (ULONG) bmhd->bmh_Depth, BMF_INTERLEAVED | BMF_DISPLAYABLE, NULL))
		{
		    if (sp = FindProp (iff, ID_ILBM, ID_NAME))
		    {
			DM (kprintf ("  name 0x%lx\n", sp));
			title = (STRPTR) sp->sp_Data;
		    }

		    /* Find the Grab chunk */
		    if (sp = FindProp (iff, ID_ILBM, ID_GRAB))
		    {
			DM (kprintf ("  grab 0x%lx\n", sp));
			*point = *((Point *) sp->sp_Data);
		    }

		    /* Prepare the Mode ID */
		    if (sp = FindProp (iff, ID_ILBM, ID_CAMG))
		    {
			DM (kprintf ("  camg 0x%lx\n", sp));
			modeid = *((ULONG *) sp->sp_Data);
			DM (kprintf ("  camg modeid = 0x%lx\n", modeid));
			if ((!(modeid & MONITOR_ID_MASK)) ||
			    ((modeid & EXTENDED_MODE) &&
			     (!(modeid & 0xFFFF0000))))
			{
			    modeid &= (~(EXTENDED_MODE | SPRITES | GENLOCK_AUDIO | GENLOCK_VIDEO | VP_HIDE));
			    DM (kprintf ("  unmasked modeid = 0x%lx\n", modeid));
			}
			if ((modeid & 0xFFFF0000) && (!(modeid & 0x00001000)))
			{
			    modeid = 0L;
			    DM (kprintf ("  garbage, so setting to zero\n"));
			}
		    }

		    if (modeid == 0L)
		    {
			modeid = LORES_KEY;
			if (bmhd->bmh_Width >= 640)
			    modeid = HIRES;
			if (bmhd->bmh_Height >= 400)
			    modeid |= LACE;
			DM (kprintf ("  new modeid = 0x%lx\n", modeid));
		    }

		    setdtattrs (cb, o,
				DTA_ObjName, title,
				DTA_NominalHoriz, bmhd->bmh_Width,
				DTA_NominalVert, bmhd->bmh_Height,
				PDTA_BitMap, bm,
				PDTA_ModeID, modeid,
				TAG_DONE);

		    /* Get the color information */
		    if (sp = FindProp (iff, ID_ILBM, ID_CMAP))
		    {
			struct ColorRegister *rgb, *cmap, *ccmap;
			WORD i, ncolors;
			LONG *cregs;

			i = ncolors = MAX ((sp->sp_Size / 3L), (1 << bmhd->bmh_Depth));

			DC (kprintf ("  Create %ld color entries\n", (LONG) ncolors));
			setdtattrs (cb, o, PDTA_NumColors, ncolors, TAG_DONE);

			getdtattrs (cb, o,
				    PDTA_ColorRegisters, (ULONG) & cmap,
				    PDTA_CRegs, &cregs,
				    TAG_DONE);

			rgb = (struct ColorRegister *) sp->sp_Data;
			ccmap = cmap;
			while (i--)
			{
			    *cmap = *rgb;
			    cmap++;
			    rgb++;
			}

			cmap = ccmap;
			DR (kprintf ("  ilbm.class\n"));
			for (i = 0; i < ncolors; i++)
			{
			    cregs[i * 3 + 0] = (LONG) (cmap[i].red   << 24) | (cmap[i].red << 16) | (cmap[i].red << 8) | cmap[i].red;
			    cregs[i * 3 + 1] = (LONG) (cmap[i].green << 24) | (cmap[i].green << 16) | (cmap[i].green << 8) | cmap[i].green;
			    cregs[i * 3 + 2] = (LONG) (cmap[i].blue  << 24) | (cmap[i].blue << 16) | (cmap[i].blue << 8) | cmap[i].blue;
			    DR (kprintf ("  %2ld) r=0x%02lx g=0x%02lx b=0x%02lx : r=0x%08lx g=0x%08lx b=0x%08lx\n",
				(LONG)i,
				(ULONG)cmap[i].red, (ULONG)cmap[i].green, (ULONG)cmap[i].blue,
				cregs[i * 3 + 0], cregs[i * 3 + 1], cregs[i * 3 + 2]));
			}
			DR (kprintf ("\n"));
		    }
		    else
		    {
			DC (kprintf ("  No color map!  Creating %ld entries\n", (LONG) (1 << bmhd->bmh_Depth)));
			setdtattrs (cb, o, PDTA_NumColors, (1 << bmhd->bmh_Depth), TAG_DONE);
		    }

		    if (GetBody (cb, iff, bmhd, bm) == 1)
			return (TRUE);
		    SetIoErr (DTERROR_COULDNT_OPEN);
		}
		else
		{
		    DB (kprintf ("  couldn't allocate bitmap\n"));
		    SetIoErr (ERROR_NO_FREE_STORE);
		}
	    }
	}
	else
	{
	    DB (kprintf ("  couldn't find BMHD\n"));
	    SetIoErr (ERROR_REQUIRED_ARG_MISSING);
	}
    }
    else
    {
	DB (kprintf ("  couldn't scan iff\n"));
	SetIoErr (ERROR_SEEK_ERROR);
    }

    return (FALSE);
}
@


39.7
log
@added error strings
@
text
@a34 1
    ULONG bmflags;
a37 2
    bmflags = BMF_DISPLAYABLE;

d66 1
a66 1
		if (bm = AllocBitMap ((ULONG) bmhd->bmh_Width, (ULONG) bmhd->bmh_Height, (ULONG) bmhd->bmh_Depth, bmflags, NULL))
d149 3
a151 3
			    cregs[i * 3 + 0] = (LONG) cmap[i].red   << 24;
			    cregs[i * 3 + 1] = (LONG) cmap[i].green << 24;
			    cregs[i * 3 + 2] = (LONG) cmap[i].blue  << 24;
a158 1
#if 1
a163 1
#endif
@


39.6
log
@added error check.
@
text
@d7 2
d63 1
d174 5
d181 10
@


39.5
log
@sets the BMF_DISPLAYABLE bit when allocating the bitmap
@
text
@d167 1
a167 2
		    if (GetBody (cb, iff, bmhd, bm))
		    {
d169 1
a169 1
		    }
@


39.4
log
@camg wasn't initialize properly
@
text
@d33 1
d37 2
d66 1
a66 1
		if (bm = AllocBitMap ((ULONG) bmhd->bmh_Width, (ULONG) bmhd->bmh_Height, (ULONG) bmhd->bmh_Depth, NULL, NULL))
@


39.3
log
@*** empty log message ***
@
text
@d10 1
d32 1
a33 1
    ULONG modeid;
d48 2
d66 2
d69 1
d74 1
d81 1
d83 1
a83 1
			DB (kprintf ("camg modeid = 0x%lx\n", modeid));
d89 1
a89 1
			    DB (kprintf ("unmasked modeid = 0x%lx\n", modeid));
d94 1
a94 1
			    DB (kprintf ("garbage, so setting to zero\n"));
d97 1
d105 1
a105 1
			DB (kprintf ("new modeid = 0x%lx\n", modeid));
d125 1
a125 1
			DC (kprintf ("Create %ld color entries\n", (LONG) ncolors));
d143 1
a143 1
			DR (kprintf ("ilbm.class\n"));
d149 1
a149 1
			    DR (kprintf ("%2ld) r=0x%02lx g=0x%02lx b=0x%02lx : r=0x%08lx g=0x%08lx b=0x%08lx\n",
d159 1
a159 1
			DC (kprintf ("No color map!  Creating %ld entries\n", (LONG) (1 << bmhd->bmh_Depth)));
@


39.2
log
@wasn't asking for right depth on HAM pictures
@
text
@d7 4
d25 1
a25 1
BOOL ASM GetILBM (REG (a6) struct ClassBase *cb, REG (a0) Class * cl, REG (a2) Object * o, REG (a1) struct TagItem * attrs)
d38 3
a40 3
		DTA_Handle,		&iff,
		PDTA_BitMapHeader,	&bmhd,
		PDTA_Grab,		&point,
d53 5
a57 4
	    bmhd->bmh_Depth = MIN (bmhd->bmh_Depth, MAXSRCPLANES);

	    /* Allocate a bitmap to hold the image */
	    if (bm = AllocBitMap ((ULONG) bmhd->bmh_Width, (ULONG) bmhd->bmh_Height, (ULONG) bmhd->bmh_Depth, NULL, NULL))
d59 5
a63 2
		if (sp = FindProp (iff, ID_ILBM, ID_NAME))
		    title = (STRPTR)sp->sp_Data;
d65 5
a69 5
		/* Find the Grab chunk */
		if (sp = FindProp (iff, ID_ILBM, ID_GRAB))
		{
		    *point = *((Point *)sp->sp_Data);
		}
d71 19
a89 7
		/* Prepare the Mode ID */
		if (sp = FindProp (iff, ID_ILBM, ID_CAMG))
		{
		    modeid = *((ULONG *) sp->sp_Data);
		    if ((!(modeid & MONITOR_ID_MASK)) ||
			((modeid & EXTENDED_MODE) &&
			 (!(modeid & 0xFFFF0000))))
d91 6
a96 1
			modeid &= (~(EXTENDED_MODE | SPRITES | GENLOCK_AUDIO | GENLOCK_VIDEO | VP_HIDE));
a97 11
		    if ((modeid & 0xFFFF0000) && (!(modeid & 0x00001000)))
			modeid = 0L;
		}
		if (modeid == 0L)
		{
		    modeid = LORES_KEY;
		    if (bmhd->bmh_Width >= 640)
			modeid = HIRES;
		    if (bmhd->bmh_Height >= 400)
			modeid |= LACE;
		}
d99 1
a99 1
		setdtattrs (cb, o,
d107 6
a112 6
		/* Get the color information */
		if (sp = FindProp (iff, ID_ILBM, ID_CMAP))
		{
		    struct ColorRegister *rgb, *cmap, *ccmap;
		    WORD i, ncolors;
		    LONG *cregs;
d114 40
a153 8
		    i = ncolors = MAX ((sp->sp_Size / 3L), (1 << bmhd->bmh_Depth));

		    setdtattrs (cb, o, PDTA_NumColors, ncolors, TAG_DONE);

		    getdtattrs (cb, o,
				PDTA_ColorRegisters, (ULONG) & cmap,
				PDTA_CRegs, &cregs,
				TAG_DONE);
d155 1
a155 3
		    rgb = (struct ColorRegister *) sp->sp_Data;
		    ccmap = cmap;
		    while (i--)
d157 1
a157 11
			*cmap = *rgb;
			cmap++;
			rgb++;
		    }

		    cmap = ccmap;
		    for (i = 0; i < ncolors; i++)
		    {
			cregs[i * 3 + 0] = (LONG) cmap[i].red << 24;
			cregs[i * 3 + 1] = (LONG) cmap[i].green << 24;
			cregs[i * 3 + 2] = (LONG) cmap[i].blue << 24;
a158 5
		}

		if (GetBody (cb, iff, bmhd, bm))
		{
		    return (TRUE);
@


39.1
log
@added ID_GRAB support
@
text
@d100 1
a100 1
		    i = ncolors = sp->sp_Size / 3L;
@


39.0
log
@initial RCS
@
text
@d15 1
d27 1
d34 3
a36 2
		DTA_Handle, &iff,
		PDTA_BitMapHeader, &bmhd,
d40 1
a40 1
    PropChunks (iff, ilbmprops, 4);
d49 1
a49 1
	    bmhd->nplanes = MIN (bmhd->nplanes, MAXSRCPLANES);
d52 1
a52 1
	    if (bm = AllocBitMap ((ULONG) bmhd->w, (ULONG) bmhd->h, (ULONG) bmhd->nplanes, NULL, NULL))
d57 6
d79 1
a79 1
		    if (bmhd->w >= 640)
d81 1
a81 1
		    if (bmhd->h >= 400)
d87 2
a88 2
				DTA_NominalHoriz, bmhd->w,
				DTA_NominalVert, bmhd->h,
@
