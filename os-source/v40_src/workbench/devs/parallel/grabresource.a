; Copied from resource grabbing example, Amiga Mail, author Bryce Nesbitt

	INCLUDE	"exec/types.i"
	INCLUDE "resources/misc.i"
	INCLUDE "libraries/dos.i"	

_AbsExecBase	EQU 	4
OpenResource	EQU 	-$01F2

JSRLIB	macro	*
	jsr	\1(a6)
	endm

GURU	macro	*
	move.l	_AbsExecBase,a6		; Load ExecBase address
	move.l	#\1,d7			; Load Guru number
	JSRLIB	Alert
	endm

	SECTION firstsection

;	csect	text,0,,0,4

	XDEF	_ObtainParallelResource
	XDEF	_ReleaseParallelResource


_ObtainParallelResource:
	movem.l	d7/a6,-(sp)		; Save these registers
	move.l	_AbsExecBase,a6		; Load ExecBase address
	lea.l	MiscName(pc),a1		; Load Misc.resource name
	JSRLIB	OpenResource		; OpenResource("misc.resource")
	move.l	d0,d7			; Save the resource base
	bne.s	0$			; Branch if open succeeded
	moveq	#RETURN_FAIL,d0		; Load error code
	movem.l	(sp)+,d7/a6		; Restore these registers
	rts
0$
	exg.l	d7,a6			; Put resource base in a6
	move.l	#MR_PARALLELBITS,d0	; Load the bits to be grabbed
	lea.l	ParName(pc),a1		; Load the name of the grabber
	jsr	MR_ALLOCMISCRESOURCE(a6)
	tst.l	d0			; Did the call succeed?
	bne.s	2$			; Branch if not

	move.l	#MR_PARALLELPORT,d0	; Load the bits to be grabbed
	lea.l	ParName(pc),a1		; Load the name of the grabber
	jsr	MR_ALLOCMISCRESOURCE(a6)
	tst.l	d0			; Did the call succeed?
	beq.s	3$			; Branch if so
1$
	move.l	#MR_PARALLELBITS,d0	; Load the bits to be released
	jsr	MR_FREEMISCRESOURCE(a6)
2$
	moveq	#RETURN_FAIL,d0		; Load error code = 20 (OK = 0)
3$
	movem.l	(sp)+,d7/a6		; Restore these registers
	rts

_ReleaseParallelResource:
	movem.l	d7/a6,-(sp)		; Save these registers
	move.l	_AbsExecBase,a6		; Load ExecBase
	lea.l	MiscName(pc),a1		; Load Misc.resource name
	JSRLIB	OpenResource		; OpenResource("misc.resource")
	move.l	d0,d7			; Save the resource base
	bne.s	0$			; Branch if open succeded
	moveq	#RETURN_FAIL,d0		; Load error code
	movem.l	(sp)+,d7/a6		; Restore these registers
	rts
0$
	exg.l	d7,a6			; Put resource base in a6
	move.l	#MR_PARALLELBITS,d0	; Load the bits to be released
	jsr	MR_FREEMISCRESOURCE(a6)

	move.l	#MR_PARALLELPORT,d0	; Load the bits to be released
	jsr	MR_FREEMISCRESOURCE(a6)
	movem.l	(sp)+,d7/a6		; Restore these registers
	rts

MiscName
	dc.b	'misc.resource',0
ParName
	dc.b	'parallel.device',0
	dc.w	0
	END
