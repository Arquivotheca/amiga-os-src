***************************************************************************
** Copyright 1991 CONSULTRON
*
*       raw.a --  MFM raw data decode/encode subroutines
*
***************************************************************************
        INCLUDE "mfm.i"

*** MACRO defs ***

*** Calculate CRC MACRO ; Bytewise CRC calculations
**Inputs to macro:
;DATAr   EQUR    \1     /* Data in register WILL get trashed */
;CRCr    EQUR    \2     /* CRC in register WILL get updated to next CRC */
;XTBLr   EQUR    \3     /* X CRC table pointer */

CALC_CRC8    macro           ; Calculate CRC words
        asl.l   #UBYTE_BSIZE,\2  ;move high byte of CRC reg into next word.
        swap    \2              ;swap CRC reg bytes
        eor.b   \2,\1           ;find X value (X = (CRCr[15:8]) ^ (INPUT[7:0]) 
        andi.w  #$00FF,\1       ;zero out high byte of lower word
        asl.w   #1,\1           ;mult 2 to get word index of X value.
        move.w  0(\3,\1.w),\1   ;put X value in low word of data regsiter
        swap    \2              ;put low byte of CRC reg back in low word
        eor.w   \1,\2           ;find next CRC reg value
     endm

MOD_32  equ     $1F     ;mask value for modulo 32

        section   mfm_raw
;
;--------------------------------------------------------------------------
;
; find_sync() -- Find sync pattern of 4 bytes (must be word aligned)
;
; The routine checks for 1 of 2 sync patterns of 4 bytes in any word
; boundries within the track buffer given.  It returns with the address to 
; the byte AFTER where the pattern is found.
;
; It is ASSUMED that the data has been read into the track buffer with WORDSYNC on.
;
; The routine has the pattern to be compared in register a0.  
; The data to be searched is loaded into registers d0 and d1.
;
; Inputs:
; =======
; d0 = track input buffer count (15:0)
; d1 = track input buffer start address
;
; Results:
; ========
; d0      ;= address of byte of the field following pattern.
;                        = 0 if search pattern not found.
; d1      ;= search pattern found.
;
;       register usage:
;       ================
TBufC   EQUR    d0      ;= track input buffer count
DLw     EQUR    d1      ;= data longword to be compared #1
Sync1   EQUR    d2      ;= sync longword #1. Address mark
Sync2   EQUR    d3      ;= sync longword #2  Data mark
TBufS   EQUR    a5      ;= track input buffer start and current address
;
;--------------------------------------------------------------------------

        XDEF    find_sync

MM_find_sync   REG     d2/d3/a5

find_sync:
        movem.l MM_find_sync,-(SP)  ;push regs on stack

;----- move starting values
        bclr    #0,ArgD1        ;force starting buffer address to be on word
                                ; boundry (force a zero on :0 bit)
        move.l  ArgD1,TBufS     ;move starting buffer address from temp reg
        move.l  #MFM_SYNC_A1FE,Sync1  ;put sync1
        move.l  #MFM_SYNC_A1FB,Sync2  ;put Sync2

        moveq.l #0,DLw          ; clr Data LW reg

next_lw:
        cmp.l   2(TBufS),DLw    ; check current Data Lw against next LW
        bne.s   next_word       ; if not equal con't checking via word
                                ; else zoom past this LW
        add.l   #4,TBufS        ;inc buffer pointer to next LW
        subq.w  #4,TBufC        ;dec buffer counter by LW count

        bra.s   next_lw         ; check next LW

next_word:
        move.l  (TBufS),DLw     ;load data longword to be compared
        add.l   #2,TBufS        ;inc buffer pointer to next word
        subq.w  #2,TBufC        ;dec buffer counter by word count
                                ; chk if past last data to be searched.
        blt.s   pat_not_found   ;go if sync not found within block.

cmp_syncs:
        cmp.l   DLw,Sync1       ;chk sync #1
        beq.s   found_match1    ;found match of sync to data

        cmp.l   DLw,Sync2       ;chk sync #2
        beq.s   found_match2    ;found match of sync to data
no_match:
        bra.s   next_lw         ; no match go to next longword

pat_not_found:
        moveq.l #0,RetD0        ;set return code to 0 for error
        bra.s   pat_end         ;finish

found_match2:
        move.l  Sync2,RetD1     ;put sync pattern found
        bra.s   Sync_fini
found_match1:
        move.l  Sync1,RetD1     ;put sync pattern found

Sync_fini:
        add.l   #2,TBufS        ;point to next data after sync word
        move.l  TBufS,RetD0     ;put sync ptr ;load return value

pat_end:
        movem.l (SP)+,MM_find_sync  ;pop regs off stack
        rts                     ;return


;
;--------------------------------------------------------------------------
;
; MFM decode -- MFM IBM system 34 format (must be word aligned)
;
; The routine converts the specified buffer from MFM IBM 
; System 34 format to real data.
; It strips the clock bit off and reconstructs the data.
;
; Inputs:
; =======
; d0 = address of the start of the MFM data to decode (the track buffer).
; d1 = data buffer byte count not including CRC
; d2 = address of the decoded data buffer.
; d3 = address of CRC word (sector header or data) with starting CRC value
;
; Results:
; ========
; d0 =  CRC value from calculation; should = 0 in most cases (15:0)
;
;       Register usage:
;       ================
DData   EQUR    d0      ;= decoded data
DBufC   EQUR    d1      ;= decoded data buffer count
CRCFlag EQUR    d2      ;= CRC flag register
MData   EQUR    d3      ;= undecoded MFM data
CRC     EQUR    d6      ;= CRC register
CRCAdd  EQUR    a0      ;= address of CRC word (sector header or data)
XTable  EQUR    a1      ;= X value table pointer (to calculate bytewize CRC )
DBuf    EQUR    a4      ;= address of the decoded data buffer.
TBuf    EQUR    a5      ;= address of the track buffer.
;--------------------------------------------------------------------------
        XDEF    dmfm_s34
MM_dmfm_s34     REG     d1/d2/d3/d6/a4/a5

dmfm_s34:
        movem.l MM_dmfm_s34,-(SP)   ;push regs on stack

;----- move starting values
        move.l  ArgD0,TBuf          ;move track buffer ptr

        move.l  ArgD2,DBuf          ;move decoded data buffer ptr

; ArgD1 = DBufC

        move.l  ArgD3,CRCAdd        ;move CRC address
        move.w  (CRCAdd),CRC        ;move starting CRC value
        moveq.l #0,CRCFlag          ;start with 0 in CRC flag register

        movea.l #crcx_tbl,XTable    ;load address of CRC X table

next_data:
        move.b  (TBuf)+,DData          ;load MFM data byte to be decoded

        andi.w  #$007F,DData        ; mask off all but bits 6 thru 0

d_high_nibble:
        move.b  dmfm_tbl(pc,DData.w),DData    ; get decoded MFM from table
        lsl.b   #4,DData            ; shift high nibble into high nibble

nxt_data:
        move.b  (TBuf)+,MData       ;load MFM data byte to be decoded

        andi.w  #$007F,MData        ; mask off all but bits 6 thru 0

d_low_nibble:
        add.b  dmfm_tbl(pc,MData.w),DData    ; get decoded MFM from table

put_data:
        move.b  DData,(DBuf)+   ;put decoded data in data buffer
c_crc:
        CALC_CRC8 DData,CRC,XTable ; go calculate next CRC value

        subq.w  #1,DBufC        ;dec byte count & chk if past last data to be searched.
        bgt.s   next_data       ;decode next data byte

;------ check if CRC flag set. If not set, load CRC location and byte count
        tst     CRCFlag         ;test CRC flag reg
        beq.s   get_CRC         ;get CRC data     

dmfm_done:                      ;all data decoded
        move.w CRC,RetD0        ;load return value
dmfm_end:
        movem.l (SP)+,MM_dmfm_s34  ;pop regs off stack
        rts                     ;return

get_CRC:
        addq.b  #1,CRCFlag      ;inc CRC flag reg
        move.l  CRCAdd,DBuf     ;move ptr of CRC word to decoded data buffer ptr
        moveq.w #UWORD_SIZE,DBufC       ;end address of CRC data
        bra.s   next_data       ;decode next data byte

dmfm_tbl:                       ;table of decoded MFM values
    dc.b    $0,$1,$0,$1,$2,$3,$2,$3,$0,$1,$0,$1,$2,$3,$2,$3
    dc.b    $4,$5,$4,$5,$6,$7,$6,$7,$4,$5,$4,$5,$6,$7,$6,$7
    dc.b    $0,$1,$0,$1,$2,$3,$2,$3,$0,$1,$0,$1,$2,$3,$2,$3
    dc.b    $4,$5,$4,$5,$6,$7,$6,$7,$4,$5,$4,$5,$6,$7,$6,$7
    dc.b    $8,$9,$8,$9,$A,$B,$A,$B,$8,$9,$8,$9,$A,$B,$A,$B
    dc.b    $C,$D,$C,$D,$E,$F,$E,$F,$C,$D,$C,$D,$E,$F,$E,$F
    dc.b    $8,$9,$8,$9,$A,$B,$A,$B,$8,$9,$8,$9,$A,$B,$A,$B
    dc.b    $C,$D,$C,$D,$E,$F,$E,$F,$C,$D,$C,$D,$E,$F,$E,$F

crcx_tbl:                       ;table of CRC X values (word values)
    dc.w    $0000,$1021,$2042,$3063,$4084,$50A5,$60C6,$70E7,$8108,$9129,$A14A,$B16B,$C18C,$D1AD,$E1CE,$F1EF
    dc.w    $1231,$0210,$3273,$2252,$52B5,$4294,$72F7,$62D6,$9339,$8318,$B37B,$A35A,$D3BD,$C39C,$F3FF,$E3DE
    dc.w    $2462,$3443,$0420,$1401,$64E6,$74C7,$44A4,$5485,$A56A,$B54B,$8528,$9509,$E5EE,$F5CF,$C5AC,$D58D
    dc.w    $3653,$2672,$1611,$0630,$76D7,$66F6,$5695,$46B4,$B75B,$A77A,$9719,$8738,$F7DF,$E7FE,$D79D,$C7BC
    dc.w    $48C4,$58E5,$6886,$78A7,$0840,$1861,$2802,$3823,$C9CC,$D9ED,$E98E,$F9AF,$8948,$9969,$A90A,$B92B
    dc.w    $5AF5,$4AD4,$7AB7,$6A96,$1A71,$0A50,$3A33,$2A12,$DBFD,$CBDC,$FBBF,$EB9E,$9B79,$8B58,$BB3B,$AB1A
    dc.w    $6CA6,$7C87,$4CE4,$5CC5,$2C22,$3C03,$0C60,$1C41,$EDAE,$FD8F,$CDEC,$DDCD,$AD2A,$BD0B,$8D68,$9D49
    dc.w    $7E97,$6EB6,$5ED5,$4EF4,$3E13,$2E32,$1E51,$0E70,$FF9F,$EFBE,$DFDD,$CFFC,$BF1B,$AF3A,$9F59,$8F78
    dc.w    $9188,$81A9,$B1CA,$A1EB,$D10C,$C12D,$F14E,$E16F,$1080,$00A1,$30C2,$20E3,$5004,$4025,$7046,$6067
    dc.w    $83B9,$9398,$A3FB,$B3DA,$C33D,$D31C,$E37F,$F35E,$02B1,$1290,$22F3,$32D2,$4235,$5214,$6277,$7256
    dc.w    $B5EA,$A5CB,$95A8,$8589,$F56E,$E54F,$D52C,$C50D,$34E2,$24C3,$14A0,$0481,$7466,$6447,$5424,$4405
    dc.w    $A7DB,$B7FA,$8799,$97B8,$E75F,$F77E,$C71D,$D73C,$26D3,$36F2,$0691,$16B0,$6657,$7676,$4615,$5634
    dc.w    $D94C,$C96D,$F90E,$E92F,$99C8,$89E9,$B98A,$A9AB,$5844,$4865,$7806,$6827,$18C0,$08E1,$3882,$28A3
    dc.w    $CB7D,$DB5C,$EB3F,$FB1E,$8BF9,$9BD8,$ABBB,$BB9A,$4A75,$5A54,$6A37,$7A16,$0AF1,$1AD0,$2AB3,$3A92
    dc.w    $FD2E,$ED0F,$DD6C,$CD4D,$BDAA,$AD8B,$9DE8,$8DC9,$7C26,$6C07,$5C64,$4C45,$3CA2,$2C83,$1CE0,$0CC1
    dc.w    $EF1F,$FF3E,$CF5D,$DF7C,$AF9B,$BFBA,$8FD9,$9FF8,$6E17,$7E36,$4E55,$5E74,$2E93,$3EB2,$0ED1,$1EF0
;
    IFND    READONLY
;--------------------------------------------------------------------------
;
; MFM encode -- MFM IBM system 34 format (must be word aligned)
;
; The routine converts the specified data buffer to MFM IBM 
; System 34 format.
; It places a clock bit between each bit of the data.
;
; Inputs:
; =======
; d0 = address of the start of the MFM data to encode (the track buffer).
; d1 = data buffer byte count not including CRC
; d2 = address of the decoded data buffer.
; d3 = address of CRC word (sector header or data) with starting CRC value
;
; Results:
; ========
; d0 =  CRC value from calculation; should = 0 in most cases
;
;       Register usage:
;       ================
;DData    EQUR    d0      ;= buffer Data (decoded data)
;DBufC   EQUR    d1      ;= decoded data buffer count
;CRCFlag EQUR    d2      ;= CRC flag register
;MData    EQUR    d3      ;= (high byte)encoded data;(low byte)unencoded MFM data
TData   EQUR    d4      ;= temp data
;CRC     EQUR    d6      ;= CRC register
;CRCAdd  EQUR    a0      ;= address of CRC word (sector header or data)
;XTable  EQUR    a1      ;= X value table pointer (to calculate bytewize CRC )
;DBuf    EQUR    a4      ;= address of the encoded data buffer.
;TBuf    EQUR    a5      ;= address of the track buffer.
;--------------------------------------------------------------------------
        XDEF    emfm_s34
MM_emfm_s34     REG     d1/d2/d3/d4/d6/a4/a5


emfm_s34:
        movem.l MM_emfm_s34,-(SP)       ;push regs on stack

;----- move starting values
        move.l  ArgD0,TBuf      ;move track buffer ptr

        move.l  ArgD2,DBuf      ;move encoded data buffer ptr

; ArgD1 = DBufC

        move.l  ArgD3,CRCAdd    ;move CRC address
        move.w  (CRCAdd),CRC    ;move starting CRC value
        moveq.l #0,CRCFlag         ;start with 0 in CRC flag register

        movea.l #crcx_tbl,XTable    ;load address of CRC X table

        move.b  -1(TBuf),MData   ;load prev MFM data byte to be encoded

get_data:
        moveq.l #0,DData        ; clear reg
        move.b  (DBuf)+,DData    ;put buffer data in decode data register

calc_crc:
        move.b  DData,TData     ; move data byte into temp reg
        CALC_CRC8 TData,CRC,XTable ; go calculate next CRC value

encode:
        lsl.w   #1,DData        ; make DData into index for emfm table
        move.w  emfm_tbl(pc,DData.w),TData    ; get encoded MFM from table

emfm_fix_clock_bit:
        btst    #0,MData        ; check if lowest MFM bit of prev byte = 1 or 0
        beq.s   stor_MFM        ; =0 go store MFM
    ; =1; clear high bit of MFM byte
        bclr    #15,TData       ; clear bit 15 of MFM data word

stor_MFM:
        move.w  TData,MData     ; move MFM word into MFM data reg.
        move.w  MData,(TBuf)+   ;store encoded MFM data byte

check_data_cnt:
        subq.w  #1,DBufC        ;dec data buffer count
        bgt.s   get_data        ;encode next data byte

;------ check if CRC flag set. If not set, load CRC location and byte count
        tst     CRCFlag         ;test CRC flag reg
        beq.s   put_CRC         ;get CRC data     

        cmpi.b  #3,CRCFlag      ; check if second pass thru flag
        bge.s   emfm_done       ; already thru second pass

;------ Fix write splice area after last CRC word
emfm_ws_fix:
        addq.b  #1,CRCFlag      ;inc CRC flag reg
        move.w  #$4E,DData      ;set MFM NULL word after CRC
        moveq.w #UBYTE_SIZE,DBufC       ;cnt of NULL data
        bra.s   encode          ; go encode NULL word

emfm_done:                      ;all data encoded
        move.w CRC,RetD0        ;load return value
emfm_end:
        movem.l (SP)+,MM_emfm_s34  ;pop regs off stack
        rts                     ;return

put_CRC:
        addq.b  #1,CRCFlag      ;inc CRC flag reg
        move.w  CRC,(CRCAdd)    ;move current CRC into CRC buffer
        move.l  CRCAdd,DBuf     ;move ptr of CRC word to data buffer ptr
        moveq.w #UWORD_SIZE,DBufC       ;cnt of CRC data
        bra.s   get_data        ;encode next data byte

    ENDC

emfm_tbl:                       ;table of encoded MFM values (word values)
    dc.w    $AAAA,$AAA9,$AAA4,$AAA5,$AA92,$AA91,$AA94,$AA95,$AA4A,$AA49,$AA44,$AA45,$AA52,$AA51,$AA54,$AA55
    dc.w    $A92A,$A929,$A924,$A925,$A912,$A911,$A914,$A915,$A94A,$A949,$A944,$A945,$A952,$A951,$A954,$A955
    dc.w    $A4AA,$A4A9,$A4A4,$A4A5,$A492,$A491,$A494,$A495,$A44A,$A449,$A444,$A445,$A452,$A451,$A454,$A455
    dc.w    $A52A,$A529,$A524,$A525,$A512,$A511,$A514,$A515,$A54A,$A549,$A544,$A545,$A552,$A551,$A554,$A555
    dc.w    $92AA,$92A9,$92A4,$92A5,$9292,$9291,$9294,$9295,$924A,$9249,$9244,$9245,$9252,$9251,$9254,$9255
    dc.w    $912A,$9129,$9124,$9125,$9112,$9111,$9114,$9115,$914A,$9149,$9144,$9145,$9152,$9151,$9154,$9155
    dc.w    $94AA,$94A9,$94A4,$94A5,$9492,$9491,$9494,$9495,$944A,$9449,$9444,$9445,$9452,$9451,$9454,$9455
    dc.w    $952A,$9529,$9524,$9525,$9512,$9511,$9514,$9515,$954A,$9549,$9544,$9545,$9552,$9551,$9554,$9555
    dc.w    $4AAA,$4AA9,$4AA4,$4AA5,$4A92,$4A91,$4A94,$4A95,$4A4A,$4A49,$4A44,$4A45,$4A52,$4A51,$4A54,$4A55
    dc.w    $492A,$4929,$4924,$4925,$4912,$4911,$4914,$4915,$494A,$4949,$4944,$4945,$4952,$4951,$4954,$4955
    dc.w    $44AA,$44A9,$44A4,$44A5,$4492,$4491,$4494,$4495,$444A,$4449,$4444,$4445,$4452,$4451,$4454,$4455
    dc.w    $452A,$4529,$4524,$4525,$4512,$4511,$4514,$4515,$454A,$4549,$4544,$4545,$4552,$4551,$4554,$4555
    dc.w    $52AA,$52A9,$52A4,$52A5,$5292,$5291,$5294,$5295,$524A,$5249,$5244,$5245,$5252,$5251,$5254,$5255
    dc.w    $512A,$5129,$5124,$5125,$5112,$5111,$5114,$5115,$514A,$5149,$5144,$5145,$5152,$5151,$5154,$5155
    dc.w    $54AA,$54A9,$54A4,$54A5,$5492,$5491,$5494,$5495,$544A,$5449,$5444,$5445,$5452,$5451,$5454,$5455
    dc.w    $552A,$5529,$5524,$5525,$5512,$5511,$5514,$5515,$554A,$5549,$5544,$5545,$5552,$5551,$5554,$5555
;
;--------------------------------------------------------------------------
;
;   fill_index()    -- fill with Index given the address to start at
;   fill_index_sec() -- fill with Index given the address to the
;                           beginning of the first sector.
;   Fills the track buffer with the Index header
;
; Inputs:
; =======
; if fill_index()
; d0 = trackbuff ptr to actual beginning of index section
; if fill_index_sec()
; d0 = trackbuff ptr to first sector address
;       The actual beginning of the start of Index info must be calculated
;       from this given address.
;
; Results:
; ========
; d0 = start address of index section in buffer
;
;       register usage:
;       ================
LWCnt   EQUR    d0      ;= LongWord Counter
FillLW  EQUR    d1      ;= Fill LW
TBufI   EQUR    a0      ;= track input buffer start and current address
;--------------------------------------------------------------------------

    IFND    READONLY

        XDEF    fill_index
        XDEF    fill_index_sec

fill_index_sec:           ; ( d0: TrkBuff ptr based on 1st sector )
;------ move params into regs
        sub.l   #(I_AM_GAP_MSZ),ArgD0    ; calc Start of index info
fill_index:           ; ( d0: TrkBuff ptr based on actual begin)
        move.l  ArgD0,-(SP)             ; push start of index in buffer on stack
        move.l  ArgD0,TBufI             ; put TrkBuff pointer start

make_index_mark:
    ; put MFM NULLs in PREINDEX
        move.l  #(IP_IM_NULL_LSZ-1),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_4E4E,FillLW        ; store MFM Fill longword
ip_null_fill:
        move.l  FillLW,(TBufI)+         ; put MFM Fill
        dbf     LWCnt,ip_null_fill      ; loop until fill

    ; put MFM ZEROs in PREINDEX
        move.l  #(IP_IM_ZERO_LSZ-1),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_0000,FillLW        ; store MFM Fill longword
im_zero_fill:
        move.l  FillLW,(TBufI)+         ; put MFM Fill
        dbf     LWCnt,im_zero_fill      ; loop until fill

im_fill:
    ; put MFM INDEX Mark
        move.l  #MFM_SYNC_C2C2,(TBufI)+ ; store MFM longword 1
        move.l  #MFM_SYNC_C2FC,(TBufI)+ ; store MFM longword 2

    ; put MFM NULLs in POSTINDEX
        move.l  #(IM_AM_NULL_LSZ-1),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_4E4E,FillLW        ; store MFM Fill longword
im_null_fill:
        move.l  FillLW,(TBufI)+         ; put MFM Fill
        dbf     LWCnt,im_null_fill      ; loop until fill

; d1 = end address of index section in buffer
        move.l  (SP)+,ArgD0             ; retrieve start of index in buffer from stack
        rts

    ENDC


;--------------------------------------------------------------------------
;
;   format_track()
;   Formats the physical track specified and places sector information in the
;               header array.
;
; Inputs:
; =======
; d0 = trackbuff struct ptr
;
; Results:
; ========
; d0 = 0 if no error.
;    != 0 if error.  IO_ERROR set to correct value.
;
;       register usage:
;       ================
;LWCnt   EQUR    d0      ;= LongWord Counter
;FillLW  EQUR    d1      ;= Fill LW
GapSize  EQUR    d6      ;= gap size
HdArrC  EQUR    d7      ;= # elements in head array counter
CRCAdr  EQUR    a0      ;= CRC word address
SecHdr  EQUR    a2      ;= sector header array ptr to current element
TrkStrt EQUR    a4      ;= trackbuff struct ptr 
;TBufS   EQUR    a5      ;= track input buffer start and current address
;--------------------------------------------------------------------------

    IFND    READONLY

        XDEF    format_track
MM_format_track         REG     d2/d3/d6/d7/a2/a4/a5

format_track:
        movem.l MM_format_track,-(SP)   ; push regs on stack

;------ move params into regs
        move.l  ArgD0,TrkStrt           ; move TrkStrt struct pointer
        move.w  num_sec_trk(TrkStrt),HdArrC  ; move # of elements of sector header array

        move.l  trk_buf(TrkStrt),TBufS   ; pass start of track buffer pointer

        move.l  head(TrkStrt),SecHdr     ; move sec header array start

        move.l  slct_trk(TrkStrt),h_track(SecHdr)
        move.b  sec_off(TrkStrt),h_sec(SecHdr)
                        ; copy track,head,sec & sec len in sector header array

        move.l  TBufS,GapSize           ; temp store sector gap begin

    ;*** Fill in index prior to first sector
        move.l  TBufS,ArgD0             ; pass pointer to first sector
        bsr     fill_index_sec          ; go fill index part of track buffer

        move.l  RetD0,trk_start(TrkStrt)    ; store start of track incl index

mk_sector_address:
    ; put MFM ZEROs in PRE-ADDRESS
        move.l  #(DM_AM_ZERO_LSZ-1),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_0000,FillLW        ; store MFM Fill longword
        
am_zero_fill:
        move.l  FillLW,(TBufS)+         ; put MFM Fill
        dbf     LWCnt,am_zero_fill      ; loop until fill

am_fill:
    ; put MFM ADDRESS Mark
        move.l  #MFM_SYNC_A1A1,(TBufS)+ ; store MFM longword 1
        move.l  #MFM_SYNC_A1FE,(TBufS)+ ; store MFM longword 2

        sub.l   TBufS,GapSize           ; calc gap between sectors
        neg.w   GapSize                 ; make into positive size
        move.w  GapSize,h_sec_gap(SecHdr) ; put gap between sectors
        move.l  TBufS,GapSize           ; put sector header gap begin

;------ pass sec address params
                        ; copy track,head,sec & sec len in sector header array
        move.l  TBufS,ArgD0             ; pass address block location
        move.l  #head_size,ArgD1        ; pass sector head size
        move.l  SecHdr,ArgD2            ; pass sector header array elem ptr

;------ pass CRC location and starting value
        lea.l   h_crc16(SecHdr),CRCAdr  ; calc CRC word ptr.
        move.w  #CRC_A1A1A1FE,(CRCAdr)      ; put starting CRC value.
        move.l  CRCAdr,ArgD3                ; pass CRC word ptr.

        bsr     emfm_s34                ; go address data

        addq.l  #4,RetD1        ; add CRC word (+2) to returning byte count
        lsl.l   #1,RetD1        ; make into MFM bytes
        adda.l  RetD1,TBufS     ; readjust track buffer ptr

    ; put MFM NULLs in POST-ADDRESS portion of track buffer
        move.l  #(AM_DM_NULL_LSZ-2),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_4E4E,FillLW        ; store MFM Fill longword
am_null_fill:
        move.l  FillLW,(TBufS)+         ; put MFM Fill
        dbf     LWCnt,am_null_fill      ; loop until fill

mk_sector_data:
    ; put MFM ZEROs in PREDATA
        move.l  #(AM_DM_ZERO_LSZ-1),LWCnt   ; # longwords of MFM Fill
        move.l  #MFM_0000,FillLW        ; store MFM Fill longword
dm_zero_fill:
        move.l  FillLW,(TBufS)+         ; put MFM Fill
        dbf     LWCnt,dm_zero_fill      ; loop until fill

dm_fill:
    ; put MFM DATA Mark
        move.l  #MFM_SYNC_A1A1,(TBufS)+ ; store MFM longword 1
        move.l  #MFM_SYNC_A1FB,(TBufS)+ ; store MFM longword 2

;------ put ZEROs data params
        move.l  TBufS,d0                ; put data block location in temp store
        move.l  TBufS,h_data(SecHdr)    ; put data block location
        sub.l   GapSize,d0              ; calc sector addr mark to data mark gap
        move.b  d0,h_amdm_gap(SecHdr)   ; put sector addr mark to data mark gap

        move.w  sec_len(TrkStrt),LWCnt   ; get current sector length
        lsr.w   #1,LWCnt                ; make into MFM LW size
        sub.w   #1,LWCnt                ; correct for MFM LW count
        move.l  #MFM_0000,FillLW        ; store MFM Fill longword
data_fill:
        move.l  FillLW,(TBufS)+         ; put MFM Fill
        dbf     LWCnt,data_fill         ; loop until fill

    ; put CRC word
        move.l  #CRC_DATA_ZEROS,(TBufS)+  ; put MFM CRC for zeros in data

        move.l  TBufS,GapSize           ; temp store sector gap begin

    ; put MFM NULLs in POST-DATA portion of track buffer
        move.w  sec_gap_opti(TrkStrt),LWCnt   ; # bytes of MFM gap (optimum)
        lsr.w   #2,LWCnt                ; make into # LW of MFM gap
        sub.w   #(DM_AM_ZERO_LSZ+AM_SYNC_LSZ+1),LWCnt    ; remove ZEROs and Addr sync in gap
        move.l  #MFM_4E4E,FillLW        ; store MFM Fill longword
dm_null_fill:
        move.l  FillLW,(TBufS)+         ; put MFM Fill
        dbf     LWCnt,dm_null_fill      ; loop until fill

mk_nxt_sec:
        subq.w  #1,HdArrC               ; dec sec head array element counter
        ble.s   format_fini             ; finish with no error

        move.l  SecHdr,a0               ; temp store ptr to current sector header
        add.l   #header_sz,SecHdr   ; inc to next sector header
        move.l  h_track(a0),h_track(SecHdr) ; move sector params into next sector
        addi.b  #1,h_sec(SecHdr)        ; increment to next sector
        bra     mk_sector_address       ; go make next sector

format_fini:
    ;*** Determine actual track write size
        suba.l  trk_start(TrkStrt),TBufS    ; subtract the last address from the first
        move.l  TBufS,trk_writesz(TrkStrt)  ; store the track write size

        ori.b   #(MDUF_TRK_MOD|MDUF_TRK_SYNCED|MDUF_TRK_FIXED),mdu_DFLAGS(Unit)  ; set disk flags
        moveq.l #0,RetD0                ; set no error
        movem.l (SP)+,MM_format_track   ; pop regs from stack
        rts

    ENDC
;
;--------------------------------------------------------------------------
;
; Sector Search in current track using IBM system 34 format
;
; The routine finds and stores the locations of all the sectors in the
; header array.
;
; Inputs:
; =======
; d0 = trackbuff struct ptr
; a3 = Unit ptr
;
; Results:
; ========
; d0 = 0 if no error.
;    != 0 if error.  IO_ERROR set to correct value.
;
;       register usage:
;       ================
MFMSecLen EQUR    d2      ;= MFM sector length reg
Slct_Trk EQUR    d5      ;= selected track
;GapSize  EQUR    d6      ;= gap size
;HdArrC  EQUR    d7      ;= # elements in head array counter
;CRCAdr  EQUR    a0      ;= CRC word address
;SecHdr  EQUR    a2      ;= sector header array ptr to current element
;TrkStrt EQUR    a4      ;= trackbuff struct ptr 
HeadArr EQUR    a3      ;= sector header array ptr start
;TBufS   EQUR    a5      ;= track input buffer start and current address
TBufE   EQUR    a6      ;= track input buffer end address
;--------------------------------------------------------------------------
        XDEF    sec_srch_mfm
MM_sec_srch_mfm         REG     d2/d3/d5/d6/d7/a2/a3/a4/a5/a6

sec_srch_mfm:
        movem.l MM_sec_srch_mfm,-(SP)   ; push regs on stack

;------ move params into regs
        move.l  ArgD0,TrkStrt           ; move TrkStrt struct pointer
        move.w  num_sec_trk(TrkStrt),HdArrC  ; move # of elements of sector header array

        move.l  trk_buf(TrkStrt),TBufS   ; pass start of track buffer pointer
        move.l  TBufS,TBufE
        adda.l  trk_read_size(TrkStrt),TBufE    ; store in reg

        move.l  head(TrkStrt),HeadArr    ; move sector header array pointer
        move.l  HeadArr,SecHdr          ; move sec header array start

        bset    #MDUB_TRK_WRONG,mdu_DFLAGS(Unit)  ; set TRACK WRONG flag
        move.b  slct_trk(TrkStrt),Slct_Trk        ; get selected track

        move.l  TBufS,GapSize           ; temp store sector gap begin
find_sec:
        move.l  TBufS,ArgD1             ; pass current ptr in track buffer
        move.l  #(SEC_DFT_MSZ*2),ArgD0    ; pass count of track buffer search
                                        ; = 2 * sectors
        bsr     find_sync               ; go find sector pattern

        tst.l   RetD0
        beq     sec_srch_error          ; sector search error

        move.l  RetD0,TBufS             ; update track buffer pointer
chk_addr_sync:
        cmpi.l  #MFM_SYNC_A1FE,RetD1    ; chk if Address sync
        bne     sec_head_not_found      ; go find next sector

addr_sync:      ;decode_sec
    ; make sure first LW before sync LW is MFM_SYNC_A1A1
        move.l  RetD0,a0
        sub.l   RetD0,GapSize           ; calc gap between sectors
        neg.w   GapSize                 ; make into positive size
        move.w  GapSize,h_sec_gap(SecHdr) ; put gap between sectors
        move.l  RetD0,GapSize           ; temp store sector header gap begin

        move.l  #head_size,ArgD1        ; pass sector head size
        move.l  SecHdr,ArgD2            ; pass sector header array elem ptr
        lea.l   h_crc16(SecHdr),CRCAdr  ; calc CRC word ptr.
        move.w  #CRC_A1A1A1FE,(CRCAdr)  ; put starting CRC value.
        move.l  CRCAdr,ArgD3            ; pass CRC word ptr.
        bsr     dmfm_s34                ; go decode sector header

        tst.w   RetD0
        beq.s   find_data               ; go if CRC OK

sec_crc_error:      ; CRC should = 0 but did not.
        move.b  #TDERR_BadHdrSum,RetD0  ; bad sector header CRC

find_data:
        move.b  RetD0,h_sec_err(SecHdr) ; put CRC error

        cmp.b   h_track(SecHdr),Slct_Trk ; compare for correct track
                                        ; in first element of header array
        bne.s   skip_DM_gap             ; go if not correct track

        bclr    #MDUB_TRK_WRONG,mdu_DFLAGS(Unit)  ; clear TRACK WRONG flag

skip_DM_gap:
        adda.l  #(ADDR_MSZ+AM_DM_ZERO_MSZ),TBufS
                                        ; add address header + zero before DM
        move.l  TBufS,ArgD1             ; pass current ptr in track buffer
        move.l  TBufE,ArgD0             ; get end ptr of track buffer
        sub.l   ArgD1,ArgD0             ; pass count of track buffer search
        bsr     find_sync               ; go find sector pattern

        tst.l   RetD0
        beq.s   sec_srch_error          ; data block search error

        cmpi.l  #MFM_SYNC_A1FB,RetD1    ; chk if Data sync
        bne.s   chk_addr_sync           ; error if not data sync

;------ put sector data block location params in sector header array.
    ; make sure first LW before sync LW is MFM_SYNC_A1A1
        move.l  RetD0,a0
        move.l  RetD0,h_data(SecHdr)    ; put sector data block location
        sub.l   GapSize,RetD0           ; calc sector addr mark to data mark gap
        move.b  RetD0,h_amdm_gap(SecHdr) ; put sector addr mark to data mark gap


;------ this is to SPEED-UP searches of sectors
data_skip:
    ; adjust data length by subtracting sector length.
        moveq.l #8,d1                   ;correct for 0=256 normalized sec len (MFM)
        add.b   h_sec_len(SecHdr),d1    ; add sec length value (0=128; 1=256 etc)
        moveq.l #CRC_MSZ,MFMSecLen      ; include CRC MFM size (4 bytes)
        bset    d1,MFMSecLen            ; calc actual MFM sector byte length

        move.l  a0,d0                   ; put current track buffer pointer in temp reg
        add.l   MFMSecLen,d0            ; add MFM data cnt to advance search
        move.l  d0,GapSize              ; temp store sector gap begin
        add.l   sec_gap_min(TrkStrt),d0  ; add min MFM gap cnt to advance search
        cmp.l   TBufE,d0                ; chk if start address >= end address
        bge.s   sec_srch_error          ; sector header search error

        move.l  d0,TBufS                ; update current ptr to track buff

;------ determine if we are done looking for more sectors
find_nxt_sec:
        subq.w  #1,HdArrC               ; dec sec head array element counter
        ble.s   sec_srch_no_error       ; finish with no error

        add.l   #header_sz,SecHdr   ; inc to next sector header
        bra     find_sec                ; go find next sector

sec_srch_no_error:
sec_srch_fini:
        moveq.l #0,RetD0                ; pass no error return value
sec_srch_track_cmp:
;*** compare if track is the correct physical (and logical) track.
        btst    #MDUB_TRK_WRONG,mdu_DFLAGS(Unit)  ; chk TRACK WRONG flag
        beq.s   sec_srch_index_cmp      ; go if on correct track

        move.b  #MDERR_WrongTrack,RetD0 ; bad sector preamble (index)

        bra.s   sec_srch_end            ; go to end

sec_srch_index_cmp:
;*** compare if first sector found starts at proper sector offset number
        move.b  sec_off(TrkStrt),d1      ; get correct first sector
        cmp.b   h_sec(HeadArr),d1       ; compare for correct first sector
        beq.s   sec_srch_end            ; go if index mark synced on track

        move.b  #TDERR_BadSecPreamble,RetD0  ; bad sector preamble (index)
sec_srch_end:
        movem.l (SP)+,MM_sec_srch_mfm   ; pop regs from stack
        rts

sec_head_not_found:
        move.l  #DM_AM_ZERO_MSZ,sec_gap_min(TrkStrt)
                                        ; set new sector gap minimum
                                        ; for further sector header searches
        move.l  #NOSECTOR,h_track(SecHdr) ; put NOSECTOR in sector header array element
        bra.s   find_nxt_sec            ; go find next sector

sec_srch_error:
data_srch_error:
nxt_invalid_sec:
        move.l  #DM_AM_ZERO_MSZ,sec_gap_min(TrkStrt)
                                        ; set new sector gap minimum
                                        ; for further sector header searches
        move.l  #NOSECTOR,h_track(SecHdr) ; put NOSECTOR in sector header array element
        subq.w  #1,HdArrC               ; dec sec head array element counter
        ble.s   sec_srch_fini           ; go finish

        add.l   #header_sz,SecHdr   ; inc to next sector header
        bra.s   nxt_invalid_sec

    IFND    READONLY
;--------------------------------------------------------------------------
;
; Fix Pre - (Address or Data) Mark
;
; The routine fixes the pre address or data mark (which are MFM 0000s) because
; the WORDSYNC read of the track may mungle this area.  This area must be
; fixed to insure proper operation on an actual commercial disk controller.
;
; Inputs:
; =======
; a0 = address in track buffer of sync mark
;
; Registers used:
; ===============
; d1 = temp reg
;
;--------------------------------------------------------------------------
        XDEF    fix_premark

fix_premark:
    ; a0 = address of sync mark
        move.l  #MFM_0000,d1            ; put MFM_0000 in pre mark area
        move.l  d1,-$20(a0)
        move.l  d1,-$1C(a0)
        move.l  d1,-$18(a0)
        move.l  d1,-$14(a0)
        move.l  d1,-$10(a0)
        move.l  d1,-$C(a0)
        move.l  #MFM_SYNC_A1A1,-8(a0)   ; put MFM_SYNC_A1A1 in first Sync LW
        rts
    ENDC

;
    IFND    READONLY
;--------------------------------------------------------------------------
;
; Write Sector Data in current track using IBM system 34 format
;
; The routine converts the data in the specified buffer to MFM bytes and stores
; them in the track buffer.
;
; Inputs:
; =======
; d0 = element ptr in header array
; d1 = data length
; d2 = data buffer ptr
; a2 = IORequest ptr
; a3 = Unit ptr
;
;--------------------------------------------------------------------------
        XDEF    write_data_mfm

write_data_mfm:
        bset    #MDUB_TRK_MOD,mdu_DFLAGS(Unit)  ; set TRACK MODIFIED flag
        lea     emfm_s34(pc),a0         ; load ptr to encode sector data routine
        bra.s   block_data_mfm

    ENDC
       
;--------------------------------------------------------------------------
;
; Read Sector Data in current track using IBM system 34 format
;
; The routine converts the required sector data from MFM to bytes and stores
; them in the buffer specified.
;
; Inputs:
; =======
; d0 = element ptr in header array
; d1 = data length
; d2 = data buffer ptr
; a2 = IORequest ptr
; a3 = Unit ptr
;
;--------------------------------------------------------------------------
        XDEF    read_data_mfm

read_data_mfm:
        lea     dmfm_s34(pc),a0         ; load ptr to decode sector data routine
       
;--------------------------------------------------------------------------
;
; Block Sector Operation Data in current track using IBM system 34 format
;
; The routine reads or writes the sector data between the specified buffer
; and the track buffer.
;
; Inputs:
; =======
; d0 = element ptr in header array
; d1 = data length
; d2 = data buffer ptr
; a2 = IORequest ptr
; a3 = Unit ptr
;
; Results:
; ========
; d0 = 0 if no CRC error
;    = calculated CRC if error
;
;       register usage:
;       ================
DataAdd         equr    d2      ;= data buffer ptr
SecHdrElmt      equr    a4      ;= element ptr in sector header array
BlockMFMOp      equr    a5      ;= Block MFM operation ptr
;--------------------------------------------------------------------------
MM_block_data_mfm        REG     d3/d4/a4/a5

block_data_mfm:
        movem.l MM_block_data_mfm,-(SP)  ; push regs on stack

;------ move params into regs
        move.l  ArgD0,SecHdrElmt        ; move sector header array pointer
; ArgD1 = data length
; ArgD2 = data buffer pointer
        move.l  a0,BlockMFMOp           ; point ot Block MFM Operation

;------ pass sec data params
        move.l  h_data(SecHdrElmt),ArgD0    ; pass sector data block location

;------ pass CRC location and starting value
        lea.l   h_datacrc16(SecHdrElmt),CRCAdr  ; calc CRC word ptr.
        move.w  #CRC_A1A1A1FB,(CRCAdr)  ; put starting CRC value.
        move.l  CRCAdr,ArgD3            ; pass CRC word ptr.

        jsr     (BlockMFMOp)            ; go decode/encode sector data

        and.l   #$0FFFF,RetD0           ; clear upper word of reg

block_data_end:
        movem.l (SP)+,MM_block_data_mfm ; pop regs from stack
        rts

        end
