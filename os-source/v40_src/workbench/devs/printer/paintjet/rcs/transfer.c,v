head     1.6;
branch   ;
access   ;
symbols  L35_49:1.4;
locks    ; strict;
comment  @ * @;


1.6
date     90.04.06.20.16.17;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.05.02.30.33;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.11.56.19;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.48.24;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.28.42;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.31.23;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.6
log
@for rcs 4.x header change
@
text
@/*
	Transfer routine for HP_PaintJet driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, colors)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
UWORD *colors; /* indexes to color buffers */
{
	extern struct PrinterData *PD;

	static UBYTE and_table[8] =
		{0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe};
	static UBYTE or_table[] = {128, 64, 32, 16, 8, 4, 2, 1};
	UBYTE *dmatrix, *yptr, *mptr, *cptr;
	UBYTE dvalue, Black, Yellow, Magenta, Cyan, threshold, color, bit;
	union colorEntry *ColorInt;
	UWORD x, width, sx, *sxptr, byte;

	/* pre-compute */
	/* printer specific */
	cptr = ptr + colors[0];
	mptr = ptr + colors[1];
	yptr = ptr + colors[2];
	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos; /* get starting x position */
	ColorInt = PInfo->pi_ColorInt; /* get ptr to color intensities */
	sxptr = PInfo->pi_ScaleX; /* get ptr to x scale info */
	width = PInfo->pi_width; /* get # of source pixels */

	/* pre-compute threshold; are we thresholding? */
	if (threshold = PInfo->pi_threshold) { /* thresholding */
		dvalue = threshold ^ 15; /* yes, so compute dither value */
		do { /* for all source pixels */
			/* pre-compute intensity values for Black component */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++; /* bump ptr for next time */

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				/* if should render black */
				if (Black > dvalue) {
					*(ptr + (x >> 3)) |= or_table[x & 7];
				}
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
	else { /* not thresholding, pre-compute ptr to dither matrix */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		if (PD->pd_Preferences.PrintShade == SHADE_GREYSCALE) {
			do { /* for all source pixels */
				/* compute intensity vals for Black */
				Black = ColorInt->colorByte[PCMBLACK];
				ColorInt++; /* bump ptr for next time */

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					/* if should render black */
					if (Black > dmatrix[x & 3]) {
						*(ptr + (x >> 3)) |=
							or_table[x & 7];
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
		else { /* color */
			do { /* for all source pixels */
				/* compute intensity values for each color */
				Black = ColorInt->colorByte[PCMBLACK];
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				ColorInt++; /* bump ptr for next time */

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					/* compute 'byte to modify' offset */
					byte = x >> 3;
					/* pre-compute 'bit to clear' value */
					bit = and_table[x & 7];
					/* pre-compute dither value */
					dvalue = dmatrix[x & 3];
					/* if should render black */
					if (Black > dvalue) {
						*(yptr + byte) &= bit;
						*(mptr + byte) &= bit;
						*(cptr + byte) &= bit;
					}
					else  { /* no black, check color */
						/* if should render yellow */
						if (Yellow > dvalue) {
							*(yptr + byte) &= bit;
						}
						/* if should render magenta */
						if (Magenta > dvalue) {
							*(mptr + byte) &= bit;
						}
						/* if should render cyan */
						if (Cyan > dvalue) {
							*(cptr + byte) &= bit;
						}
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
	}
}
@


1.5
log
@converted bw and gs dumps to 1 bit plane
V1.3 Gamma 10 release
@
text
@@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d19 1
a19 1
	static UBYTE bit_table[8] =
d21 1
d40 1
a40 1
		dvalue = threshold ^ 15; /* yes, so pre-compute dither value */
d49 3
a51 6
				byte = x >> 3; /* pre-compute 'byte to modify' offset */
				bit = bit_table[x & 7]; /* pre-compute 'bit to clear' value */
				if (Black > dvalue) { /* if should render black */
					*(yptr + byte) &= bit; /* clear bit in yellow buffer */
					*(mptr + byte) &= bit; /* clear bit in magenta buffer */
					*(cptr + byte) &= bit; /* clear bit cyan buffer */
d61 1
a61 1
				/* pre-compute intensity values for Black component */
d68 4
a71 7
					byte = x >> 3; /* pre-compute 'byte to modify' offset */
					/* pre-compute 'bit to clear' value */
					bit = bit_table[x & 7];
					if (Black > dmatrix[x & 3]) { /* if should render black */
						*(yptr + byte) &= bit; /* clear bit in yellow buf */
						*(mptr + byte) &= bit; /* clear bit in magenta buf */
						*(cptr + byte) &= bit; /* clear bit cyan buf */
d79 1
a79 1
				/* pre-compute intensity values for each color component */
d89 2
a90 1
					byte = x >> 3; /* pre-compute 'byte to modify' offset */
d92 8
a99 6
					bit = bit_table[x & 7];
					dvalue = dmatrix[x & 3]; /* pre-compute dither value */
					if (Black > dvalue) { /* if should render black */
						*(yptr + byte) &= bit; /* clear bit in yellow buf */
						*(mptr + byte) &= bit; /* clear bit in magenta buf */
						*(cptr + byte) &= bit; /* clear bit cyan buf */
d101 4
a104 3
					else  { /* black not rendered, check color */
						if (Yellow > dvalue) { /* if should render yellow */
							*(yptr + byte) &= bit; /* clear bit in yellow */
d106 3
a108 2
						if (Magenta > dvalue) { /* if should render magenta */
							*(mptr + byte) &= bit; /* clear bit in magenta */
d110 3
a112 2
						if (Cyan > dvalue) { /* if should render cyan */
							*(cptr + byte) &= bit; /* clear bit in cyan */
@


1.3
log
@separated BW, GREYSCALE, and COLOR printing
V1.3 gamma 1 check-in
@
text
@d24 1
a24 2
	UWORD x, width, sx, xmult, xmod, byte;
	WORD etx, etx2;
d34 1
a34 3
	xmult = PInfo->pi_xmult; /* get x multiplier */
	xmod = PInfo->pi_xmod; /* get x modulas */
	etx = etx2 = PInfo->pi_etx; /* get x error term (twice) */
d45 1
a45 7
			/* scale pixel (DONT CHANGE THIS CODE) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d67 1
a67 7
				/* scale pixel (DONT CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
d91 1
a91 7
				/* scale pixel (DONT CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d3 1
d41 1
a41 1
	if (threshold = PInfo->pi_threshold) {
d43 24
d70 5
a74 3
	}
	/* set flag for whether or not we are doing a color printout */
	color = PD->pd_Preferences.PrintShade == SHADE_COLOR;
d76 7
a82 7
	do { /* for all source pixels */
		/* pre-compute intensity values for each color component */
		Black = ColorInt->colorByte[PCMBLACK];
		Yellow = ColorInt->colorByte[PCMYELLOW];
		Magenta = ColorInt->colorByte[PCMMAGENTA];
		Cyan = ColorInt->colorByte[PCMCYAN];
		ColorInt++; /* bump ptr for next time */
d84 12
a95 6
		/* scale pixel (DON'T CHANGE THIS CODE) */
		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
d97 8
d106 14
a119 14
		do { /* use this pixel 'sx' times */
			byte = x >> 3; /* pre-compute 'byte to modify' offset */
			bit = bit_table[x & 7]; /* pre-compute 'bit to clear' value */
			if (!threshold) { /* if we're not thresholding */
                   dvalue = dmatrix[x & 3]; /* pre-compute dither value */
			}
			if (Black > dvalue) { /* if should render black */
				*(yptr + byte) &= bit; /* clear bit in yellow buffer */
				*(mptr + byte) &= bit; /* clear bit in magenta buffer */
				*(cptr + byte) &= bit; /* clear bit cyan buffer */
			}
			else  { /* black not rendered, check color */
				if (color) { /* if this is a color printout */
					if (Yellow > dvalue) { /* if should render yellow */
a120 2
					}
					if (Magenta > dvalue) { /* if should render magenta */
d122 1
d124 10
a133 2
					if (Cyan > dvalue) { /* if should render cyan */
						*(cptr + byte) &= bit; /* clear bit in cyan buf */
d135 5
a139 5
				}
			}
			++x; /* done 1 more printer pixel */
		} while (--sx);
	} while (--width);
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
#include "../printer/prtprivate.h"
d32 6
a37 6
	x = PInfo->xpos; /* get starting x position */
	ColorInt = PInfo->ColorInt; /* get ptr to color intensities */
	xmult = PInfo->xmult; /* get x multiplier */
	xmod = PInfo->xmod; /* get x modulas */
	etx = etx2 = PInfo->etx; /* get x error term (twice) */
	width = PInfo->width; /* get # of source pixels */
d40 1
a40 1
	if (threshold = PInfo->threshold) {
d44 1
a44 1
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
@
