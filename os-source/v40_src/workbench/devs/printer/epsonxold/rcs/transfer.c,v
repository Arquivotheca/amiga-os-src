head     1.1;
branch   ;
access   ;
symbols  L35_5:1.0 L35_4:1.0 L35_1:1.0;
locks    ; strict;
comment  @*   @;


1.1
date     90.04.09.09.29.40;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     88.04.04.21.26.47;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to RCS
V1.3 Gamma 10 release
@


1.1
log
@for rcs 4.x header change - file is obsolete, now using transfer.asm
@
text
@/*
	Transfer routine for EpsonX driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
{
	extern struct PrinterData *PD;

	static UWORD bit_table[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	UBYTE *dmatrix, Black, dvalue, threshold;
	union colorEntry *ColorInt;
	UWORD x, width, sx, *sxptr, bit;

	/* pre-compute */
	/* printer specific */
	bit = bit_table[y & 7];
	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;

	/* pre-compute threshold; are we thresholding? */
	if (threshold = PInfo->pi_threshold) { /* thresholding */
		dvalue = threshold ^ 15;
		ptr += x;
		do { /* for all source pixels */
			/* pre-compute intensity values for Black component */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				if (Black > dvalue) {
					*ptr |= bit;
				}
				ptr++; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
	else { /* not thresholding, grey-scaling */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		do { /* for all source pixels */
			/* pre-compute intensity values for Black component */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				if (Black > dmatrix[x & 3]) {
					*(ptr + x) |= bit;
				}
				x++; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
}
@


1.0
log
@added to rcs
@
text
@d11 1
a11 1
Transfer(PInfo, y, ptr, colors)
a14 1
UWORD *colors; /* indexes to color buffers */
d19 1
d21 1
a21 3
	UBYTE *bptr, *yptr, *mptr, *cptr, Black, Yellow, Magenta, Cyan;
	UBYTE *dmatrix, dvalue, threshold;
	UWORD x, width, sx, *sxptr, color, bit, x3;
a24 4
	bptr = ptr + colors[0];
	yptr = ptr + colors[1];
	mptr = ptr + colors[2];
	cptr = ptr + colors[3];
d35 1
a35 1
		bptr += x;
d45 1
a45 1
					*bptr |= bit;
d47 1
a47 1
				bptr++; /* done 1 more printer pixel */
d51 1
a51 1
	else { /* not thresholding, pre-compute ptr to dither matrix */
d53 4
a56 6
		if (PD->pd_Preferences.PrintShade == SHADE_GREYSCALE) {
			bptr += x;
			do { /* for all source pixels */
				/* pre-compute intensity values for Black component */
				Black = ColorInt->colorByte[PCMBLACK];
				ColorInt++;
d58 1
a58 1
				sx = *sxptr++;
d60 7
a66 40
				do { /* use this pixel 'sx' times */
					if (Black > dmatrix[x & 3]) {
						*(bptr + x) |= bit;
					}
					x++; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
		else { /* color */
			do { /* for all source pixels */
				/* pre-compute intensity values for each color component */
				Black = ColorInt->colorByte[PCMBLACK];
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					x3 = x >> 3;
					dvalue = dmatrix[x & 3];
					if (Black > dvalue) {
						*(bptr + x) |= bit;
					}
					else  { /* black not rendered */
						if (Yellow > dvalue) {
							*(yptr + x) |= bit;
						}
						if (Magenta > dvalue) {
							*(mptr + x) |= bit;
						}
						if (Cyan > dvalue) {
							*(cptr + x) |= bit;
						}
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
@
