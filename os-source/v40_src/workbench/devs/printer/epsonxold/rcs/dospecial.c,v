head     1.5;
branch   ;
access   ;
symbols  V38_13:1.5 L34_10:1.4 L35_8:1.3 L35_5:1.1 L35_4:1.1 L35_1:1.0;
locks    ; strict;
comment  @*   @;


1.5
date     91.07.10.16.40.29;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     88.08.15.11.29.31;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.05.18.09.53;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.18.11.49.10;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.19.14.15.32;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     88.04.04.21.25.24;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to RCS
V1.3 Gamma 10 release
@


1.5
log
@Obtain includes from standard includes directory.
@
text
@/*
	DoSpecial for EpsonXOld (copy of EpsonX) driver.
	David Berezowski - March/88.

	Modified to make less assumptions about how
	"Epson compatbile" the printer might be.
	by Bryce Nesbitt - Thu Jun  2 18:07:53 EDT 1988

*/

#include "exec/types.h"
#include "devices/printer.h"
#include "devices/prtbase.h"

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
/* Warning: the Gemini-10X uses \033P for vertical tabbing,
   sets default tabs to 10, and is offset by 1 character on
   all tabs */

extern struct PrinterData *PD;

int x = 0, y = 0;
	/*
		00-02	\033x\001	select nlq mode
		03-04	\0332		select 6 lpi
		05-05	\022		cancel condensed mode
		06-07	\0335		italics off
		08-10	\033-\000	turn underline off
		11-12	\033F		cancel emphasized mode
		13-15	\033W\000	turn off double width
		16-17	\033T		cancel subscript
		18-18	\015		carriage return
	*/
static char initThisPrinter[19] =
"\033x\001\0332\022\0335\033-\000\033F\033W\000\033T\015";

	if (*command == aRIN) {
		while (x < 19) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}

		if (PD->pd_Preferences.PrintQuality == DRAFT) {
			outputBuffer[2] = 0;
		}

		*currentVMI = 12; /* assume 1/6 line spacing (12/72 => 1/6) */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[4] = '0';
			*currentVMI = 9; /* 9/72 => 1/8 */
		}


		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[5] = '\017'; /* Set condensed */
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[5] = '\017'; /* Set condensed */
		}

		return(x);
	}

	if (*command == aPLU) {
		if (*vline == 0) {
			*vline = 1;
			*command = aSUS2;
			return(0);
		}
		if (*vline < 0) {
			*vline = 0;
			*command = aSUS3;
			return(0);
		}
		return(-1);
	}

	if (*command == aPLD) {
		if (*vline == 0) {
			*vline = -1;
			*command = aSUS4;
			return(0);
		}
		if (*vline > 0) {
			*vline = 0;
			*command = aSUS1;
			return(0);
		}
		return(-1);
	}

	if (*command == aSUS0) {
		*vline = 0;
	}
	if (*command == aSUS1) {
		*vline = 0;
	}
	if (*command == aSUS2) {
		*vline = 1;
	}
	if (*command == aSUS3) {
		*vline = 0;
	}
	if (*command == aSUS4) {
		*vline = -1;
	}

	if (*command == aVERP0) {
		*currentVMI = 9;
	}

	if (*command == aVERP1) {
		*currentVMI = 12;
	}

	if (*command == aRIS) {
		PD->pd_PWaitEnabled = 253;
	}

	return(0);
}
@


1.4
log
@removed tab setting code from initialization sequence since the Epson_RX-80
chokes on this command.
V1.3 Gamma 23
@
text
@d12 2
a13 2
#include "../printer/printer.h"
#include "../printer/prtbase.h"
@


1.3
log
@V1.3 Gamma 15        
@
text
@d41 2
a42 3
static char initThisPrinter[19+15] =
"\033x\001\0332\022\0335\033-\000\033F\033W\000\033T\015\
\033D\010\020\030\040\050\060\070\100\110\120\130\000\000";
d45 1
a45 1
		while (x < 19+15) {
@


1.2
log
@fixed clear margins command
V1.3 Gamma 15
@
text
@d4 5
a8 2
	(Copy of EpsonX driver except for removal of linefeed and
	 reverse linefeed commands, and adjustments to currentVMI).
d23 3
a25 1
	extern struct PrinterData *PD;
d27 3
a29 1
	int x = 0, y = 0;
d31 1
a31 8
		00-00	\375	wait
		01-03	\033lL	set left margin
		04-06	\033Qq	set right margin
		07-07	\375	wait
	*/
	static char initMarg[8] = "\375\033lL\033Qq\375";
	/*
		00-02	\033x\000	select nlq mode
d34 6
a39 6
		06-07	\033P		select pica (10 cpi)
		08-09	\0335		automatic linefeed off
		10-12	\033-\000	turn underline off
		13-14	\033F		cancel emphasized mode
		15-15	\015		carriage return
		16-17	\033W		turn off double width
d41 3
a43 3
	static char initThisPrinter[18] =
		"\033x\001\0332\022\033P\0335\033-\376\033F\015\033W";
	static BYTE ISOcolorTable[10] = {0, 5, 6, 4, 3, 1, 2, 0};
d46 1
a46 1
		while (x < 18) {
a49 2
		outputBuffer[12] = 0; /* underline off */
		outputBuffer[x++] = 0; /* double width off */
d61 1
d63 1
a63 1
			outputBuffer[7] = 'M';
d66 1
a66 1
			outputBuffer[x++] = '\017';
a68 23
		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command = aSLRM;
	}

	if (*command == aCAM) {
		Parms[0] = 0;
		Parms[1] = 255;
		*command = aSLRM;
	}

	if (*command == aSLRM) {
		PD->pd_PWaitEnabled = 253;
		if (Parms[0] == 0) {
			initMarg[3] = 0;
		}
		else {
			initMarg[3] = Parms[0] - 1;
		}
		initMarg[6] = Parms[1];
		while (y < 8) {
			outputBuffer[x++] = initMarg[y++];
		}
a121 24
	}

	if (*command == aSFC) {
		if (Parms[0] == 39) {
			Parms[0] = 30; /* set defaults */
		}
		if (Parms[0] > 37) {
			return(0); /* ni or background color change */
		}
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'r';
		outputBuffer[x++] = ISOcolorTable[Parms[0] - 30];
		/*
		Kludge to get this to work on a CBM_MPS-1250  which interprets
		'ESCr' as go into reverse print mode.  The 'ESCt' tells it to
		get out of reverse print mode.  The 'NULL' is ignored by the
		CBM_MPS-1250 and required by all Epson printers as the
		terminator for the 'ESCtNULL' command which means select
		normal char set (which has no effect).
		*/
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 't';
		outputBuffer[x++] = 0;
		return(x);
@


1.1
log
@V1.3 Gamma 13
@
text
@d75 6
a89 18
		while (y < 8) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aCAM) {
		PD->pd_PWaitEnabled = 253;
		initMarg[3] = 0;
		if (PD->pd_Preferences.PrintPitch == FINE) {
			initMarg[6] = 96;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			initMarg[6] = 137;
		}
		else {
			initMarg[6] = 80; 
		}
@


1.0
log
@added to rcs
@
text
@d1 6
a6 8
/* EpsonX special commands */
 
/****** printer.device/printers/EpsonX_special_functions ***********
 *
 *   NAME
 *   EpsonX special functions
 * 
 ************************************************************************/
d8 1
a8 1
#include	"exec/types.h"
d12 7
a18 10
extern struct PrinterData *PD;

DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];

d20 1
a20 5
    int x=0;
    int y=0;
   static char initMarg[]="\375\033lL\033Qq\375";
static char 
    initThisPrinter[]="\033x\001\0332\022\033P\0335\033-\376\033F\015\033W";
d22 22
a43 1
   static BYTE ISOcolorTable[10]= {0,5,6,4,3,1,2,0};
d45 7
a51 4
if(*command==aRIN) {
    while(x<18){outputBuffer[x]=initThisPrinter[x];x++;}
    outputBuffer[12]='\000';
    outputBuffer[x++]='\000';
d53 3
a55 1
   if((PD->pd_Preferences.PrintQuality)==DRAFT)outputBuffer[2]='\000';
d57 5
a61 9
   *currentVMI=36; /* assume 1/6 line spacing */
   if((PD->pd_Preferences.PrintSpacing)==EIGHT_LPI) { /* wrong again */
	outputBuffer[4]='0';
	*currentVMI=27;
   }
   if((PD->pd_Preferences.PrintPitch)!=PICA)outputBuffer[x++]='\033';
	if((PD->pd_Preferences.PrintPitch)==ELITE)outputBuffer[x++]='M';
   	else if((PD->pd_Preferences.PrintPitch)==FINE)
	    outputBuffer[x++]='\017';
d63 6
a68 4
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}
d70 4
a73 8
if(*command==aSLRM) {
	PD->pd_PWaitEnabled=253;
	if(Parms[0]==0)initMarg[3]=0;
        else initMarg[3]=Parms[0]-1;
        initMarg[6]=Parms[1];
        while(y<8)outputBuffer[x++]=initMarg[y++];
        return(x);
}
d75 14
a88 9
if(*command==aCAM) {
	PD->pd_PWaitEnabled=253;
        initMarg[3]=0;
	if(PD->pd_Preferences.PrintPitch == FINE)initMarg[6]=96;
	else if(PD->pd_Preferences.PrintPitch == ELITE)initMarg[6]=137;
	else initMarg[6]=80; 
        while(y<8)outputBuffer[x++]=initMarg[y++];
        return(x);
}
d90 16
a105 5
if(*command==aPLU)
	{
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
a106 5
if(*command==aPLD) {
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}
d108 13
a120 5
if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);
d122 13
a134 1
if(*command==aVERP0) *currentVMI=27;
d136 15
a150 1
if(*command==aVERP1) *currentVMI=36;
d152 3
d156 3
a158 6
if(*command==aIND) {
	outputBuffer[x++]='\033';
	outputBuffer[x++]='J';
	outputBuffer[x++]= *currentVMI;
	return(x);
}
a159 7
if(*command==aRI) {
	outputBuffer[x++]='\033';
	outputBuffer[x++]='j';
	outputBuffer[x++]= *currentVMI;
	return(x);
}

d171 6
a176 6
			Kludge to get this to work on a CBM_MPS-1250  which interprets
			'ESCr' as go into reverse print mode.  The 'ESCt' tells it to
			get out of reverse print mode.  The 'NULL' is ignored by the
			CBM_MPS-1250 and required by all Epson printers as the terminator
			for the 'ESCtNULL' command which means select normal char
			set (which has no effect).
d184 3
a186 1
if(*command==aRIS) PD->pd_PWaitEnabled=253;
d188 1
a188 1
return(0);
@
