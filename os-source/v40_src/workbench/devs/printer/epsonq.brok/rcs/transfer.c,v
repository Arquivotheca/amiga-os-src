head     1.3;
branch   ;
access   ;
symbols  L35_22:1.1;
locks    ; strict;
comment  @*   @;


1.3
date     90.09.13.17.04.52;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.09.09.27.58;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.30.11.54.19;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.10.27.15.27.38;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs
V1.3 gamma 1 check-in
@


1.3
log
@bye, bye
@
text
@/*
	Transfer routine for EpsonQ driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, colors)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
UWORD *colors; /* indexes to color buffers */
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	static UWORD bit_table[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	union colorEntry *ColorInt;
	UBYTE *bptr, *yptr, *mptr, *cptr, Black, Yellow, Magenta, Cyan;
	UBYTE *dmatrix, dvalue, threshold;
	UWORD x, width, sx, *sxptr, color, bit, x3, ymod;

	/* pre-compute */
	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;
	/* printer specific */
	x3 = x * 3;
	ymod = y % PED->ped_NumRows;
	bit = bit_table[ymod & 7];
	ptr += ymod >> 3;
	bptr = ptr + colors[0];
	yptr = ptr + colors[1];
	mptr = ptr + colors[2];
	cptr = ptr + colors[3];

	/* pre-compute threshold; are we thresholding? */
	if (threshold = PInfo->pi_threshold) { /* thresholding */
		dvalue = threshold ^ 15;
		bptr += x3;
		do { /* for all source pixels */
			/* pre-compute intensity values for each component */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				if (Black > dvalue) {
					*bptr |= bit;
				}
				bptr += 3;
			} while (--sx);
		} while (--width);
	}
	else { /* not thresholding, pre-compute ptr to dither matrix */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		if (PD->pd_Preferences.PrintShade == SHADE_GREYSCALE) { 
			bptr += x3;
			do { /* for all source pixels */
				/* compute intensity val for each component */
				Black = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					if (Black > dmatrix[x & 3]) {
						*bptr |= bit;
					}
					x++; /* done 1 more printer pixel */
					bptr += 3;
				} while (--sx);
			} while (--width);
		}
		else { /* color */
			do { /* for all source pixels */
				/* compute intensity val for each component */
				Black = ColorInt->colorByte[PCMBLACK];
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					dvalue = dmatrix[x & 3];
					if (Black > dvalue) {
						*(bptr + x3) |= bit;
					}
					else  { /* black not rendered */
						if (Yellow > dvalue) {
							*(yptr + x3) |= bit;
						}
						if (Magenta > dvalue) {
							*(mptr + x3) |= bit;
						}
						if (Cyan > dvalue) {
							*(cptr + x3) |= bit;
						}
					}
					x++; /* done 1 more printer pixel */
					x3 += 3;
				} while (--sx);
			} while (--width);
		}
	}
}
@


1.2
log
@for rcs 4.x header change (note this file is obsolete - replaced by transfer.asm)
@
text
@@


1.1
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d11 1
a11 1
Transfer(PInfo, y, ptr, colors, NumRows)
a15 1
UWORD NumRows;
d18 1
d34 1
a34 1
	ymod = y % NumRows;
d47 1
a47 1
			/* pre-compute intensity values for each Black component */
d66 1
a66 1
				/* pre-compute intensity values for each Black component */
d83 1
a83 1
				/* pre-compute intensity values for each color component */
@


1.0
log
@added to rcs
@
text
@d24 1
a24 2
	UWORD x, width, sx, xmult, xmod, color, bit, x3, ymod;
	WORD etx, etx2;
d30 1
a30 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d51 1
a51 7
			/* scale pixel (DON T CHANGE THIS CODE) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d70 1
a70 7
				/* scale pixel (DON T CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
d90 1
a90 7
				/* scale pixel (DON T CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
@
