head     1.7;
access   ;
symbols  L35_32:1.7 L35_31:1.7 L35_28:1.5 L35_27:1.5 L35_23:1.4 L35_22:1.3;
locks    ; strict;
comment  @ * @;


1.7
date     88.06.05.18.02.50;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.05.18.11.44.12;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.18.14.25.14;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.04.21.21.39;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.03.11.13.37.46;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.26.19;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.14.34;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.7
log
@V1.3 Gamma 15
@
text
@/*
	DoSpecial for EpsonQ driver.
	David Berezowski - March/88.
*/

#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
	extern struct PrinterData *PD;

	int x = 0, y = 0;
	/*
		00-01	\0335		italics off
		02-04	\033-\000	underline off
		05-06	\033F		boldface off
		07-08	\033P		elite off
		09-09	\022		condensed fine off
		10-12	\033W\000	enlarge off
		13-14	\033H		double strike off
		15-17	\033x\000	NLQ off
		18-19	\033T		normalize the line
		20-22	\033R\000	US char set
		23-25	\033p0		proportional off
		26-27	\0332		6 lpi
		28-28	\015		carriage-return
	*/
	static char initThisPrinter[29] =
"\0335\033-\376\033F\033P\022\033W\376\033H\033x\376\033T\033R\376\033p0\0332\015";
	static char initMarg[] = "\375\033lL\033QR\375";
	static BYTE ISOcolorTable[] = {0, 5, 6, 4, 3, 1, 2, 0};

	if (*command == aRIN) { /* initialize */
		while(x < 29) {
			if ((outputBuffer[x] = initThisPrinter[x]) == -2) {
				outputBuffer[x] = 0;
			}
			x++;
		}

		if (PD->pd_Preferences.PrintQuality == LETTER) {
			outputBuffer[17] = 1;
		}

		*currentVMI = 30; /* assume 1/6 line spacing */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[27] = '0';
			*currentVMI = 22;
		}

		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[8] = 'M';
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[9] = 15;
		}

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command=aSLRM;
	}

	if (*command == aCAM) { /* cancel margins */
		y = PD->pd_Preferences.PaperSize == W_TRACTOR ? 136 : 80;
		if (PD->pd_Preferences.PrintPitch == PICA) {
			Parms[1] = (10 * y) / 10;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			Parms[1] = (12 * y) / 10;
		}
		else { /* fine */
			Parms[1] = (17 * y) / 10;
		}
		Parms[0] = 1;
		y = 0;
		*command = aSLRM;
	}

	if (*command == aSLRM) { /* set left&right margins */
		PD->pd_PWaitEnabled = 253; /* wait after this character */
		if (Parms[0] == 0) {
			initMarg[3] = 0;
		}
		else {
			initMarg[3] = Parms[0] - 1;
		}
		initMarg[6] = Parms[1];
		while (y < 8) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aPLU) { /* partial line up */
		if (*vline == 0) {
			*vline = 1;
			*command = aSUS2;
			return(0);
		}
		if (*vline < 0) {
			*vline = 0;
			*command = aSUS3;
			return(0);
		}
		return(-1);
	}

	if (*command == aPLD) { /* partial line down */
		if (*vline == 0) {
			*vline = -1;
			*command = aSUS4;
			return(0);
		}
		if (*vline > 0) {
			*vline = 0;
			*command = aSUS1;
			return(0);
		}
		return(-1);
	}

	if (*command == aSUS0) { /* normalize the line */
		*vline = 0;
	}

	if (*command == aSUS1) { /* superscript off */
		*vline = 0;
	}

	if (*command == aSUS2) { /* superscript on */
		*vline = 1;
	}

	if (*command == aSUS3) { /* subscript off */
		*vline = 0;
	}

	if (*command == aSUS4) { /* subscript on */
		*vline = -1;
	}

	if (*command == aVERP0) { /* 8 LPI */
		*currentVMI = 22;
	}

	if (*command == aVERP1) { /* 6 LPI */
		*currentVMI = 30;
	}

	if (*command == aSFC) { /* set foreground/background color */
		if (Parms[0] == 39) {
			Parms[0] = 30; /* set default (black) */
		}
		if (Parms[0] > 37) {
			return(0); /* ni or background color change */
		}
		outputBuffer[x++] = 27;
		outputBuffer[x++] = 'r';
		outputBuffer[x++] = ISOcolorTable[Parms[0] - 30];
		return(x);
	}

	if (*command == aSLPP) { /* set form length */
		outputBuffer[x++] = 27;
		outputBuffer[x++] = 'C';
		outputBuffer[x++] = Parms[0];
		return(x);
	}

	if (*command == aPERF) { /* perf skip n */
		outputBuffer[x++] = 27;
		outputBuffer[x++] = 'N';
		outputBuffer[x++] = Parms[0];
		return(x);
	}

	if (*command == aRIS) { /* reset */
		PD->pd_PWaitEnabled = 253;
	}

	return(0);
}
@


1.6
log
@fixed clear margins command to work with wide tractor paper
V1.3 Gamma 15
@
text
@d34 1
d36 2
a37 2
	static char initThisPrinter[] =
"\0335\033-\376\033F\033P\022\033W\376\033H\033x\376\033T\033R\376\033p0\0332";
d42 1
a42 1
		while(x < 28) {
d71 13
a83 3
	if (*command == aCAM) {
		Parms[0] = 0;
		Parms[1] = 255;
@


1.5
log
@changed '== 254' to '== -2' to fix init bug
V1.3 Gamma 13
@
text
@d70 6
a84 18
		while (y < 8) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aCAM) { /* cancel all margins */
		PD->pd_PWaitEnabled = 253;
		initMarg[3] = 0;
		if (PD->pd_Preferences.PrintPitch == FINE) {
			initMarg[6] = 96;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			initMarg[6] = 137;
		}
		else {
			initMarg[6]=80;
		}
@


1.4
log
@fixed VMI bug
V1.3 Gamma 10 release
@
text
@d42 1
a42 1
			if ((outputBuffer[x] = initThisPrinter[x]) == 254) {
@


1.3
log
@added better comments
V1.3 Gamma 9 release
@
text
@d52 1
a52 1
		*currentVMI=36; /* assume 1/6 line spacing */
d55 1
a55 1
			*currentVMI=27;
d152 1
a152 1
		*currentVMI=27;
d156 1
a156 1
		*currentVMI=36;
@


1.2
log
@V1.3 gamma 1 check-in
@
text
@d1 4
a4 8
/* EpsonQ special commands */
 
/****** printer.device/printers/EpsonQ_special_functions ******************
 *
 *   NAME
 *   EpsonQ special functions
 * 
 ************************************************************************/
d6 1
a6 1
#include	"exec/types.h"
d10 9
a18 1
extern struct PrinterData *PD;
d20 19
a38 7
DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];
d40 7
a46 7
{
   int x=0;
   int y=0;
   static char initMarg[]="\375\033lL\033Qq\375";
static char
    initThisPrinter[]="\033x\001\0332\022\0335\033P\033-\376\033F\015\033W";
   static BYTE ISOcolorTable[10]= {0,5,6,4,3,1,2,0};
d48 3
d52 5
a56 4
if(*command==aRIN) {
    while(x<18){outputBuffer[x]=initThisPrinter[x];x++;}
    outputBuffer[x++]='\000';
    outputBuffer[12]='\000';
d58 6
a63 1
    if((PD->pd_Preferences.PrintQuality)==DRAFT)outputBuffer[2]='\000';
d65 4
a68 9
    *currentVMI=36; /* assume 1/6 line spacing */
    if((PD->pd_Preferences.PrintSpacing)==EIGHT_LPI) { /* wrong again */
	outputBuffer[4]='0';
	*currentVMI=27;
    }
    if ((PD->pd_Preferences.PrintPitch) != PICA)outputBuffer[x++]='\033';
    if((PD->pd_Preferences.PrintPitch)==ELITE)outputBuffer[x++]='M';
	else if((PD->pd_Preferences.PrintPitch)==FINE)
	outputBuffer[x++]='\017';
d70 14
a83 4
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}
d85 17
a101 8
if(*command==aSLRM) {
	PD->pd_PWaitEnabled=253; /* wait after this character */
	if(Parms[0]==0)initMarg[3]=0;
	else initMarg[3]=Parms[0]-1;
	initMarg[6]=Parms[1];
	while(y<8)outputBuffer[x++]=initMarg[y++];
	return(x);
}
d103 13
a115 9
if(*command==aCAM) {
	PD->pd_PWaitEnabled=253;
	initMarg[3]=0;
if(PD->pd_Preferences.PrintPitch == FINE)initMarg[6]=96;
else if(PD->pd_Preferences.PrintPitch == ELITE)initMarg[6]=137;
else initMarg[6]=80;
	while(y<8)outputBuffer[x++]=initMarg[y++];
	return(x);
}
d117 13
a129 5
if(*command==aPLU) {
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
}
d131 3
a133 5
if(*command==aPLD) {
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}
d135 3
a137 5
if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);
d139 3
a141 1
if(*command==aVERP0) *currentVMI=27;
d143 3
a145 1
if(*command==aVERP1) *currentVMI=36;
d147 3
a149 6
if(*command==aIND) {
	outputBuffer[x++]='\033';
	outputBuffer[x++]='J';
	outputBuffer[x++]= *currentVMI;
	return(x);
}
d151 2
a152 3
if (*command == aSFC) { /* set foreground/background color */
	if (Parms[0] == 39) {
		Parms[0] = 30; /* set default (black) */
d154 3
a156 2
	if (Parms[0] > 37) {
		return(0); /* ni or background color change */
a157 5
	outputBuffer[x++] = '\033';
	outputBuffer[x++] = 'r';
	outputBuffer[x++] = ISOcolorTable[Parms[0] - 30];
	return(x);
}
d159 12
a170 1
if(*command==aRIS) PD->pd_PWaitEnabled=253;
d172 19
a190 1
return(0);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* epson X80 special commands */
d3 1
a3 1
/****** printer.device/printers/Epson_special_functions ******************
d6 1
a6 1
 *   Epson X80 special functions
d29 2
a30 1
    initThisPrinter[]="\033x\001\0332\022\0335\033P\033-\376\033F\n\033W";
d100 13
@
