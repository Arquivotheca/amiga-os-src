head     1.12;
branch   ;
access   ;
symbols  V38_4:1.11 V37_603:1.11 V36_603:1.9 V36_599:1.9 V36_596:1.9 V36_587:1.9 V36_579:1.9 V36_575:1.9 V36_573:1.9 V36_572:1.9 V36_570:1.9 L34_564:1.9 L34_563:1.9 L34_562:1.9 L35_560:1.8 L35_559:1.8 L35_558:1.8 L35_556:1.7 L35_548:1.4 L35_547:1.4 L35_544:1.2 L35_543:1.2 L35_541:1.2 L35_539:1.2 L35_534:1.2 L35_528:1.2 L35_522:1.2 L35_517:1.2;
locks    ; strict;
comment  @*   @;


1.12
date     92.01.28.14.23.49;  author davidj;  state Exp;
branches ;
next     1.11;

1.11
date     91.02.18.13.37.17;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     91.02.14.15.25.21;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     88.08.16.16.37.45;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.06.07.19.48.15;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.06.06.01.18.02;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.05.16.11.08.14;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.05.16.11.07.04;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.18.17.58.39;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.18.11.35.28;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.31.20;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.09.06.50.07;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.20.32;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.12
log
@compiled native
@
text
@#include <exec/types.h>
#include "printer.h"
#include "prtbase.h"

#include "printer_iprotos.h"

#define DEBUGOA		0
#define DEBUGPCP	0
#define DEBUGTC		0

extern struct PrinterData *PD;
extern struct PrinterExtendedData *PED;

extern UBYTE InputBuffer[];
extern BYTE vline;
extern BYTE crlfFlag;
extern UBYTE currentVMI;
extern int Counter;
extern int ParmCount;
extern int RawCount;

USHORT AprintPitch;
USHORT AprintQuality;
UWORD AprintSpacing;
UWORD AprintLeftMargin;
UWORD AprintRightMargin;
UWORD ApaperLength;
int HoldPrefs=0;

VOID OpenAlpha(start)
int start; /* 0-first open, 1-already open */
{
	vline=0;
	crlfFlag=0;
	PD->pd_PWaitEnabled=0;
	Counter=0;
	RawCount = 0;
	if ((!start) || (HoldPrefs) || (cmppPref())) {
		savepPref();
		HoldPrefs = 1;
		/* force a read from the preferences */
		Counter = 3;
		InputBuffer[0] = '\033';
		InputBuffer[1] = '#';
		InputBuffer[2] = '1'; /* initialize */
	}
#if DEBUGOA
	kprintf("OA: PWaitEnabled = %ld\n", PD->pd_PWaitEnabled);
#endif DEBUGOA
}

savepPref()
{
	AprintPitch = PD->pd_Preferences.PrintPitch;
	AprintQuality = PD->pd_Preferences.PrintQuality;
	AprintSpacing = PD->pd_Preferences.PrintSpacing;
	AprintLeftMargin = PD->pd_Preferences.PrintLeftMargin;
	AprintRightMargin = PD->pd_Preferences.PrintRightMargin;
	ApaperLength = PD->pd_Preferences.PaperLength;
	return (0);
}


cmppPref()
{
	if ((AprintPitch != PD->pd_Preferences.PrintPitch) ||
		(AprintQuality != PD->pd_Preferences.PrintQuality) ||
		(AprintSpacing != PD->pd_Preferences.PrintSpacing) ||
		(AprintLeftMargin != PD->pd_Preferences.PrintLeftMargin) ||
		(AprintRightMargin != PD->pd_Preferences.PrintRightMargin) ||
		(ApaperLength != PD->pd_Preferences.PaperLength)) {
		return(-1);
	}
	return(0);
}

/****** printer.device/PRD_PRTCOMMAND ***************************************
*
*   NAME
*       PRD_PRTCOMMAND -- send a command to the printer
*
*   FUNCTION
*      This function sends a command to either the parallel or serial
*      device.  The printer device maps this command to the control
*      code set of the current printer.  The commands supported can
*      be found with the printer.device/Write command.  All printers
*      may not support all functions.
*
*   IO REQUEST IOPrtCmdReq
*       io_Message      mn_ReplyPort set
*       io_Device       preset by OpenDevice
*       io_Unit         preset by OpenDevice
*       io_Command      PRD_PRTCOMMAND
*       io_PrtCommand   the actual command number
*       io_Parm0        parameter for the command
*       io_Parm1        parameter for the command
*       io_Parm2        parameter for the command
*       io_Parm3        parameter for the command
*
*   RESULTS
*       Errors: if the PRD_PRTCOMMAND succeeded, then io_Error will be zero.
*       Otherwise io_Error will be non-zero.  An error of -1 indicates that
*       the command is not supported by the current printer driver.  This
*       could be used to check if the connected printer supports a particular
*       command (italics for example).
*
*   SEE ALSO
*       printer.device/Write printer.h, parallel.device, Preferences
*
************************************************************************/


BYTE PCPrtCommand(ior)
struct IOPrtCmdReq *ior;
{
	int length, status, command;
	char output[P_BUFSIZE + 1];
	UBYTE Params[4];
	char *ptrstart;
	char EnPWait;
	char *ptr;

	Params[0] = ior->io_Parm0;
	Params[1] = ior->io_Parm1;
	Params[2] = ior->io_Parm2;
	Params[3] = ior->io_Parm3;
	command = ior->io_PrtCommand;

#if DEBUGPCP
	kprintf("PCPC: cmd=%ld, P0=%ld, P1=%ld, P2=%ld, P3=%ld\n",
		command, Params[0], Params[1], Params[2], Params[3]);
#endif DEBUGPCP
	if (command == aRAW) {
		RawCount = Params[0];
#if DEBUGPCP
		kprintf("PCPC: aRAW, RawCount=%ld\n", RawCount);
#endif DEBUGPCP
		return(0);
	}
	length = translateCommand(ior->io_PrtCommand, output, Params);
#if DEBUGPCP
	kprintf("PCPC: translateCommand returned %ld\n", length);
#endif DEBUGPCP
	if (length < 1) {
		return((BYTE)length);
	}
	status = 0;
	if (command == aRIS) { /* reset */
		status = PWait(1, 0);
	}
	if (status == 0) {
		EnPWait = PD->pd_PWaitEnabled;
#if DEBUGPCP
		kprintf("PCP: EnPWait=%ld\n", EnPWait);
#endif DEBUGPCP
		if (EnPWait == 0) {
			status = PWrite(output, length);
			if (status == 0) {
				status=PBothReady(); /* wait until buffer is empty */
			}
		}
		else {
			ptr = output;
			do {
				ptrstart = ptr; /* reset start to current position */
				/* go until encountered PWait char or at end of string */
				while ((*ptr != EnPWait) && length) {
					ptr++; /* advance to next char */
					length--; /* one less chat to check */
				}
				/* send partial string */
				status = PWrite(ptrstart, ptr - ptrstart);
				if (status == 0) {
					status=PBothReady(); /* wait until buffer is empty */
				}
				if (*ptr == EnPWait) { /* did we encounter the PWait char? */
#if DEBUGPCP
					kprintf("PCP: waiting...");
#endif DEBUGPCP
					PWait(1, 0); /* yes, so wait */
#if DEBUGPCP
					kprintf("ok\n");
#endif DEBUGPCP
					ptr++; /* skip over PWaitEnabled char */
					length--; /* one less char to check */
				}
			} while (length && (status == 0));
		}
	}
	/* if 'reset' and status ok */
	if ((command == aRIS) && (status == 0)) {
		status = PWait(1, 0);
	}
	return((BYTE)status);
}

translateCommand(point, outputBuffer, Parms)
char outputBuffer[];
UWORD point;
UBYTE Parms[];
{
	char inchar;
	int x;
	int status;
	char *CommandPoint;

	x = 0;
	/* do special stuff */
	status = (*(PED->ped_DoSpecial))(&point, outputBuffer, &vline, &currentVMI, &crlfFlag, Parms);
#if DEBUGTC
	kprintf("TC: DoSpecial returned %ld\n", status);
#endif DEBUGTC
	if (status != 0) {
#if DEBUGTC
		kprintf("TC: returning 0\n", x);
#endif DEBUGTC
		return(status);
	}
	CommandPoint = (char *)((PED->ped_Commands)[point]); /* get ptr to cmd string */
	/* for all chars in the cmd */
	while ((inchar = CommandPoint[x]) != 0 ) {
		if (inchar == -1) { /* '\377' */
			return(-1);	/* printer doesnt have this one */
		}
		if (inchar == -2) { /* '\376' */
			inchar= '\000'; /* kludge for 0 */
		}
		outputBuffer[x++] = inchar; /* copy char to output buffer */
	}
	/* if 'set proportional offset', 'set form length' or 'perf skip n' */
	if ((point == aTSS) || (point == aSLPP) || (point == aPERF)) {
		outputBuffer[x++] = Parms[0]; /* insert single parameter */
	}
#if DEBUGTC
	kprintf("TC: returning %ld\n", x);
#endif DEBUGTC
	return(x);
}
@


1.11
log
@Remove leading space before asterisks in autodocs - autodoc was
leaving the leading asterisk in.
@
text
@d5 2
a32 2
	int length, status;

d60 1
d82 1
a82 1
*   FUNCTION 
d88 1
a88 1
* 
d113 1
a113 2
UBYTE
PCPrtCommand(ior)
d117 1
a117 1
	char output[P_BUFSIZE + 1], *ptrstart, *ptr, EnPWait;
d119 3
d145 1
a145 1
		return(length);
d194 2
a195 2
	return(status);
}  
d209 1
a209 2
	status = (*(PED->ped_DoSpecial))
		(&point, outputBuffer, &vline, &currentVMI, &crlfFlag, Parms);
d219 1
a219 1
	CommandPoint = (PED->ped_Commands)[point]; /* get ptr to cmd string */
d238 1
a238 1
}  
@


1.10
log
@Autodoc stuff
@
text
@d77 33
a109 33
 *
 *   NAME
 *       PRD_PRTCOMMAND -- send a command to the printer
 *
 *   FUNCTION 
 *      This function sends a command to either the parallel or serial
 *      device.  The printer device maps this command to the control
 *      code set of the current printer.  The commands supported can
 *      be found with the printer.device/Write command.  All printers
 *      may not support all functions.
 * 
 *   IO REQUEST IOPrtCmdReq
 *       io_Message      mn_ReplyPort set
 *       io_Device       preset by OpenDevice
 *       io_Unit         preset by OpenDevice
 *       io_Command      PRD_PRTCOMMAND
 *       io_PrtCommand   the actual command number
 *       io_Parm0        parameter for the command
 *       io_Parm1        parameter for the command
 *       io_Parm2        parameter for the command
 *       io_Parm3        parameter for the command
 *
 *   RESULTS
 *       Errors: if the PRD_PRTCOMMAND succeeded, then io_Error will be zero.
 *       Otherwise io_Error will be non-zero.  An error of -1 indicates that
 *       the command is not supported by the current printer driver.  This
 *       could be used to check if the connected printer supports a particular
 *       command (italics for example).
 *
 *   SEE ALSO
 *       printer.device/Write printer.h, parallel.device, Preferences
 *
 ************************************************************************/
@


1.9
log
@made changes to autodoc(s)
@
text
@d79 1
a79 1
 *       PCPRD_PRTCOMMAND -- send a command to the printer
@


1.8
log
@V1.3 Gamma 16
@
text
@d76 1
a76 1
/****** printer.device/PrtCommand ***************************************
d79 1
a79 1
 *       PCPrtCommand -- send a command to the printer
d100 1
a100 1
 *       Errors: if the PCPrtCommand succeeded, then io_Error will be zero.
@


1.7
log
@V1.3 Gamma 15
@
text
@d100 5
a104 2
 *       Errors: if the PCPrtCommand succeeded, then Error will be zero.
 *           Otherwise the Error will be non-zero.
a125 1
	if ((length = translateCommand(ior->io_PrtCommand,output,Params)) < 1) {
d127 2
a128 1
		kprintf("PCPC: translateCommand returned '%ld'\n", length);
d130 12
d208 7
a214 1
	if (status !=0) {
a216 3
#if DEBUGTC
	kprintf("TC: DoSpecial returned '%ld'\n", status);
#endif DEBUGTC
d218 2
a219 1
	while ((inchar = CommandPoint[x]) != 0 ) { /* for all chars in the cmd */
d228 1
a228 1
	/* if 'set proportional offset' or 'set form length' or 'perf skip n' */
d232 3
@


1.6
log
@V1.3 Gamma 15
@
text
@d7 1
d124 3
d154 1
a154 1
				status = PWrite(ptrstart, ptrstart - ptr);
d160 1
a160 1
					kprintf("PCP: waiting...\n");
d163 3
d196 3
@


1.5
log
@fixed incorrect external declaration for InputBuffer which was causing a
write to memory location $0 on opening the device.
@
text
@@


1.4
log
@i/o buffers now user P_BUFSIZE as their size and range check value
V1.3 Gamma 13
@
text
@d11 1
a11 1
extern UBYTE *InputBuffer;
@


1.3
log
@changed 'extern UBYTE InputBuffer[257]' to 'extern UBYTE InputBuffer[513]'
this should have been changed way back before the Beta 4 release
V1.3 Gamma 13 release
@
text
@d11 1
a11 1
extern UBYTE InputBuffer[513];
d113 1
a113 1
	char output[512], *ptrstart, *ptr, EnPWait;
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d11 1
a11 1
extern UBYTE InputBuffer[257];
@


1.1
log
@fixed justify logic in translateCommand
increased buffer size from 256 to 512
@
text
@d5 3
a13 1
extern BYTE centerFlag;
a33 1
	centerFlag=0;
d46 3
d113 1
a113 1
	char output[512];
d121 1
d130 34
a163 1
		status = PWrite(output, length);
d167 1
a167 1
		status = PWait(3, 0);
d178 1
a178 1
	int x = 0;
d182 1
a187 14
	}
	/* if this is one of the justify commands */
	if ((point == aJFY5) || (point == aJFY7) || (point == aJFY6)) {
		centerFlag = 1; /* flag that justification is on */
	}
	else if (point == aJFY0) { /* if this is the justify off command */
		centerFlag = 0; /* flag that justification is off */
	}
	/*
		if 'word fill (auto center)' or 'letter space (justify)'
		and justification is on.
	*/
	if ((point == aJFY1) || (point == aJFY3) && (centerFlag != 0)) {
		return(0); /* eat the command */
@


1.0
log
@added to rcs
@
text
@d109 1
a109 1
	char output[256];
d144 1
d150 3
a152 4
	/* if 'word fill (justify)' or 'letter space (justify)' */
	if ((point == aJFY1) || (point == aJFY3)) {
		centerFlag = point & 1;
		return(0);
d154 2
a155 3
	/* if 'auto full justify' and centering flag is on */
	if ((point == aJFY6) && (centerFlag == 1)) {
		point=aJFY1; /* cmd is 'word fill (justify)' */
d157 9
a165 2
	CommandPoint = (PED->ped_Commands)[point];
	while ((inchar = CommandPoint[x]) !=0 ) {
d172 1
a172 1
		outputBuffer[x++] = inchar;
@
