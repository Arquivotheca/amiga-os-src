head     1.6;
branch   ;
access   ;
symbols  V38_4:1.5 V37_603:1.5 V36_603:1.5 V36_599:1.5 V36_596:1.5 V36_587:1.5 V36_579:1.5 V36_575:1.5 V36_573:1.5 V36_572:1.5 V36_570:1.4 L34_564:1.4 L34_563:1.4 L34_562:1.4 L35_560:1.4 L35_559:1.4 L35_558:1.4 L35_556:1.4 L35_548:1.4 L35_547:1.4 L35_544:1.4 L35_543:1.4 L35_541:1.4 L35_539:1.4 L35_534:1.4 L35_528:1.4 L35_522:1.4 L35_517:1.4;
locks    ; strict;
comment  @*   @;


1.6
date     92.01.28.14.26.26;  author davidj;  state Exp;
branches ;
next     1.5;

1.5
date     90.04.06.19.24.07;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.12.08.03;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.12.21.10.50.31;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.55.22;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.09.33.26;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.23.11;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.6
log
@compiled native
@
text
@#include <exec/types.h>
#include <graphics/rastport.h>

#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>

#include "prtgfx.h"
#include "internal.h"

#include "printer_iprotos.h"

#define DEBUG0	0
#define DEBUG2	0

/*
	Read an array of color index values.
*/
MyReadPixelArray(y, PInfo, buf)
UWORD y;
struct PrtInfo *PInfo;
WORD *buf;
{
	struct RastPort *rp;
	WORD *bufsav, x, width, width2;

#if DEBUG0
	kprintf("MRPA: y=%ld, buf=%lx, flags=%lx\n", y, buf, PInfo->pi_flags);
#endif DEBUG0

	bufsav = buf; /* save ptr to buffer start */

	if (PInfo->pi_flags & PRT_INVERT) { /* inverted, use ReadPixel */
		rp = PInfo->pi_rp;
		x = PInfo->pi_xstart;
		width = PInfo->pi_width;
		do {
			/* get color lookup code (if pixel obscured) */
			if ((*buf = ReadPixel(rp, y, x--)) < 0) {
				*buf = 0; /* make it the background color */
			}
			buf++;
		} while (--width);
	}
	else { /* not inverted BUT we may not be able to use ReadPixelLine */
		/* cant use ReadPixelLine, must call ReadPixel */
		if (PInfo->pi_flags & PRT_NORPL) {
			rp = PInfo->pi_rp;
			x = PInfo->pi_xstart;
			width = PInfo->pi_width;
			do {
				/* get color lookup code (if obscured) */
				if ((*buf = ReadPixel(rp, x++, y)) < 0) {
					*buf = 0; /* make it the background color */
				}
				buf++;
			} while (--width);
		}
		else { /* use the super duper read pixel line routine */
			rp = PInfo->pi_rp;
			x = PInfo->pi_xstart;
			width2 = PInfo->pi_width;
			do {
				width = width2 < MAXBLITSIZE ? width2 : MAXBLITSIZE;
#if DEBUG0
	kprintf(
		"rp=%lx, x=%ld, y=%ld, width=%ld, buf=%lx, temprp=%lx, flags=%lx\n",
		rp, x, y, width, buf, PInfo->pi_temprp, PInfo->pi_flags & PRT_NOBLIT);
#endif DEBUG0
				ReadPixelLine(rp, x, y, width, buf, PInfo->pi_temprp,
					PInfo->pi_flags & PRT_NOBLIT);
				width2 -= MAXBLITSIZE;
				x += MAXBLITSIZE;
				buf += MAXBLITSIZE;
			} while (width2 > 0);
#if DEBUG2
			rp = PInfo->pi_rp;
			x = PInfo->pi_xstart;
			width = PInfo->pi_width;
			buf = bufsav;
			do {
				if (*buf != ReadPixel(rp, x, y)) {
					kprintf("ERROR in RPL: x=%ld, *buf=%ld, RP=%ld\n",
						x, *buf, ReadPixel(rp, x, y));
					/* display source plane ptrs */
					width = rp->BitMap->Depth - 1;
					kprintf("Source Plane Ptrs :\n");
					do {
						kprintf("Planes[%02ld]=%08lx\n",
							width, rp->BitMap->Planes[width]);
					} while (--width >= 0);
					/* dump ReadPixel info */
					x = PInfo->pi_xstart;
					width = PInfo->pi_width;
					kprintf("ReadPixel :\n");
					do {
						kprintf("%04ld ", ReadPixel(rp, x++, y));
					} while (--width);
					/* dump RPL info */
					width = PInfo->pi_width;
					buf = bufsav;
					kprintf("\nReadPixelLine :\n");
					do {
						kprintf("%04ld ", *buf++);
					} while (--width);
					kprintf("\n");
					/* call Wack */
					Debug();
					break;
				}
				else {
					buf++;
					x++;
				}
			} while (--width);
#endif DEBUG2
		}
	}
}
@


1.5
log
@for rcs 4.x header change
@
text
@d3 5
d11 3
a13 1
#define DEBUG	0
d27 1
a27 1
#if DEBUG
d29 1
a29 1
#endif DEBUG
d65 1
a65 1
#if DEBUG
d69 2
a70 2
#endif DEBUG
				ReadPixelLine(rp, x, y, width, buf, PInfo->pi_temprp, 
@


1.4
log
@V1.3 Gamma 7 release
@
text
@@


1.3
log
@V1.3 Gamma 5 release
@
text
@d58 5
@


1.2
log
@added support for non-obscured non-chip ram
V1.3 gamma 1 check-in
@
text
@d7 1
d18 1
a18 1
	WORD *buf2, x, width, width2;
d21 1
a21 1
	kprintf("MRPA: y=%ld, buf=%lx, flags=%lx ", y, buf, PInfo->pi_flags);
d24 2
a25 1
	buf2 = buf;
d53 1
a55 1
			rp = PInfo->pi_rp;
d64 41
a106 3
#if DEBUG
	kprintf("MRPA: exit\n");
#endif DEBUG
@


1.1
log
@rp->width > MAXBLITSIZE now broken into multiple ReadPixelLine calls
@
text
@a6 2
#define DEBUG1	0
#define DEBUGN	0
d11 1
a11 1
MyReadPixelArray(y, PInfo)
d14 1
d17 1
a17 1
	WORD *buf, x, width, width2;
d20 1
a20 1
	kprintf("RPA: y=%ld, flags=%lx ", y, PInfo->pi_flags);
d23 1
a23 7
	/* restore width and x scaling vars if we messed them up */
	if (PInfo->pi_width != PInfo->pi_tempwidth) {
		PInfo->pi_width = PInfo->pi_tempwidth;
		PInfo->pi_xmult = PInfo->pi_tempxmult;
		PInfo->pi_xmod = PInfo->pi_tempxmod;
		PInfo->pi_etx = PInfo->pi_tempetx;
	}
a24 1
		buf = (WORD *)PInfo->pi_RowBuf;
d36 3
a38 4
	else { /* not inverted BUT we may not be able to use the blitter */
		/* cant use the blitter, must call ReadPixel */
		if (PInfo->pi_flags & PRT_NOBLIT) {
			buf = (WORD *)PInfo->pi_RowBuf;
a52 1
			buf = PInfo->pi_RowBuf;
d56 2
a57 1
				ReadPixelLine(rp, x, y, width, buf, PInfo->pi_temprp);
a61 23
#if DEBUG1
			buf = (WORD *)PInfo->pi_RowBuf;
			rp = PInfo->pi_rp;
			x = PInfo->pi_xstart;
			width = PInfo->pi_width;
			do {
				if (ReadPixel(rp, x, y) != ReadPixel(PInfo->pi_temprp, x, 0)) {
					kprintf("rp != temprp, x=%ld, y=%ld, RP=%ld, TRP=%ld\n",
						x, y, ReadPixel(rp, x, y),
						ReadPixel(PInfo->pi_temprp, x, 0));
					Debug();
					break;
				}
/*				if (ReadPixel(rp, x, y) != *buf) {
					kprintf("x=%ld, y=%ld, width=%ld, RPL=%ld, RP=%ld\n",
						x, y, width, *buf, ReadPixel(rp, x, y));
					Debug();
					break;
				}
*/				x++;
				buf++;
			} while (--width);
#endif DEBUG1
a63 9
#if DEBUGN
	width = PInfo->pi_width;
	buf = PInfo->pi_RowBuf + width;
	while (*(--buf) == 0 && --width);
	if (width) {
		kprintf("not ");
	}
	kprintf("NULL, width=%ld, ", width);
#endif DEBUGN
d65 1
a65 1
	kprintf("RPA: exit\n");
@


1.0
log
@added to rcs
@
text
@d3 2
a5 2
#include "prtprivate.h"

d18 1
a18 2
	WORD *buf;
	UWORD x, width;
d21 1
a21 1
	kprintf("RPA: y=%ld, flags=%lx ", y, PInfo->flags);
d25 5
a29 5
	if (PInfo->width != PInfo->tempwidth) {
		PInfo->width = PInfo->tempwidth;
		PInfo->xmult = PInfo->tempxmult;
		PInfo->xmod = PInfo->tempxmod;
		PInfo->etx = PInfo->tempetx;
d31 5
a35 5
	if (PInfo->flags & PRT_INVERT) { /* inverted, use ReadPixel */
		buf = (WORD *)PInfo->RowBuf;
		rp = PInfo->rp;
		x = PInfo->xstart;
		width = PInfo->width;
d46 5
a50 5
		if (PInfo->flags & PRT_NOBLIT) {
			buf = (WORD *)PInfo->RowBuf;
			rp = PInfo->rp;
			x = PInfo->xstart;
			width = PInfo->width;
d60 11
a70 2
			ReadPixelLine(PInfo->rp, PInfo->xstart, y, PInfo->width,
				PInfo->RowBuf, PInfo->temprp);
d72 4
a75 4
			buf = (WORD *)PInfo->RowBuf;
			rp = PInfo->rp;
			x = PInfo->xstart;
			width = PInfo->width;
d77 1
a77 1
				if (ReadPixel(rp, x, y) != ReadPixel(PInfo->temprp, x, 0)) {
d80 1
a80 1
						ReadPixel(PInfo->temprp, x, 0));
d97 2
a98 2
	width = PInfo->width;
	buf = PInfo->RowBuf + width;
@
