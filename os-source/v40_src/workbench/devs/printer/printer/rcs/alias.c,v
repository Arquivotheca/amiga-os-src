head     1.6;
branch   ;
access   ;
symbols  V38_4:1.5 V37_603:1.5 V36_603:1.5 V36_599:1.5 V36_596:1.5 V36_587:1.5 V36_579:1.5 V36_575:1.5 V36_573:1.5 V36_572:1.5 V36_570:1.4 L34_564:1.4 L34_563:1.4 L34_562:1.4 L35_560:1.4 L35_559:1.4 L35_558:1.4 L35_556:1.4 L35_548:1.4 L35_547:1.4 L35_544:1.4 L35_543:1.4 L35_541:1.4 L35_539:1.4 L35_534:1.4 L35_528:1.4 L35_522:1.4 L35_517:1.4;
locks    ; strict;
comment  @*   @;


1.6
date     92.01.28.14.28.02;  author davidj;  state Exp;
branches ;
next     1.5;

1.5
date     90.04.06.19.22.40;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.12.06.05;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.15.15.59.11;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.29.16.50.24;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.29.15.20.29;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.10.27.15.53.06;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs
V1.3 gamma 1 check-in
@


1.6
log
@compiled native
@
text
@#include <exec/types.h>

#include "printer.h"
#include "prtbase.h"
#include "prtgfx.h"

#include "printer_iprotos.h"

#define DEBUGAPA	0
#define DEBUGAPA2	0

AliasSwapBufs(PInfo)
struct PrtInfo *PInfo;
{
	UWORD *buf;

	buf = PInfo->pi_TopBuf;
	PInfo->pi_TopBuf = PInfo->pi_RowBuf;
	PInfo->pi_RowBuf = PInfo->pi_BotBuf;
	PInfo->pi_BotBuf = buf;
}

AliasPixelArray(y, sy, PInfo, flag)
UWORD y, sy;
struct PrtInfo *PInfo;
int flag;
{
	union colorEntry *ColorInt, *Dest1Int;
	UWORD *RowBuf, *TopBuf, *BotBuf;
	UWORD width, x, x2, *sxptr, sx, sx1, sy1, sxy1, sxy2, sy2;
	UWORD left, right, upleft, upright;
	UWORD up, dn, dnleft, dnright;
#if DEBUGAPA
	union colorEntry *Dest2Int;
#endif DEBUGAPA

	if (flag) { /* yexe or yrxe */
		FixScalingVars(PInfo);
	}

	RowBuf = PInfo->pi_RowBuf;
	TopBuf = PInfo->pi_TopBuf;
	BotBuf = PInfo->pi_BotBuf;
	ColorInt = PInfo->pi_ColorInt;
	Dest1Int = PInfo->pi_Dest1Int;
	width = PInfo->pi_width;
	sxptr = PInfo->pi_ScaleX;

#if DEBUGAPA
	kprintf("APA: enter, y=%ld, sy=%ld, RowBuf=%lx, TopBuf=%lx, BotBuf=%lx\n",
		y, sy, RowBuf, TopBuf, BotBuf);
	kprintf("ColorInt=%lx, Dest1Int=%lx, width=%ld, flag=%ld\n",
		ColorInt, Dest1Int, width, flag);
#endif DEBUGAPA

	sx = *sxptr++; /* transfer first pixel; ie. do not alias it */
	do {
		Dest1Int->colorLong = ColorInt->colorLong;
		Dest1Int++; /* advance to next destination pixel */
	} while (--sx);
	RowBuf++; /* advance to next source pixel on this line */
	TopBuf++; /* advance to next source pixel on line above us */
	BotBuf++; /* advance to next source pixel on line below us */
	ColorInt++; /* advance to next source pixel (color intensity) */
	width -=2; /* less the leftmost and rightmost pixel */
#if DEBUGAPA
	kprintf("APA: transferred first pixel, now doing main logic\n");
#endif DEBUGAPA

	do { /* for each source pixel (less the leftmost and rightmost one) */
#if DEBUGAPA
		kprintf("APA: computing directions\n");
#endif DEBUGAPA
		up = *TopBuf;
		dn = *BotBuf;
		left = *(RowBuf - 1);
		right = *(RowBuf + 1);
		upleft = *(TopBuf - 1);
		upright = *(TopBuf + 1);
		dnleft = *(BotBuf - 1);
		dnright = *(BotBuf + 1);

#if DEBUGAPA
		kprintf("APA: scaling pixel\n");
#endif DEBUGAPA
		x2 = sx = *sxptr++; /* use this pixel 'sx' times */

#if DEBUGAPA
		kprintf("APA: duplicating pixel %ld times\n", x2);
#endif DEBUGAPA
		do {
			Dest1Int->colorLong = ColorInt->colorLong;
			Dest1Int++; /* advance to next destination pixel */
		} while (--x2);

#if DEBUGAPA
		kprintf("APA: computing 'sx' values, Dest1Int=%lx\n", Dest1Int);
#endif DEBUGAPA
		sx1 = sx - 1;
		sy1 = sy - 1;
		sxy1 = (sx1 * sy1) / 2; /* MUST divide AFTER multiple */
		sxy2 = (sx1 * sy1 * 3) / 2; /* MUST divide AFTER multiple */
		sy2 = sy1 / 2;

		if (sy1) { /* if not 1:1 y scaling */
#if DEBUGAPA
			kprintf("APA: not 1:1 y scaling\n");
#endif DEBUGAPA
			/* top half and not 2:1 y scaling */
			if ((y <= sy2) && (sy1 > 1)) {
#if DEBUGAPA
				kprintf("APA: top half and not 2:1 y scaling\n");
#endif DEBUGAPA
				/* if diagonal upleft */
				if ((left == up) && ((upright != up) || (dnleft != up))) {
#if DEBUGAPA
					kprintf("APA: diagonal upleft\n");
					Dest2Int = Dest1Int;
#endif DEBUGAPA
					Dest1Int -= sx;
					x = x2 = (sxy1 - y * sx1) / sy1;
					while (x--) {
						/* use pixel to the left of us */
						Dest1Int->colorLong = (ColorInt - 1)->colorLong;
						Dest1Int++; /* advance to next destination pixel */
					}
					x = sx - x2;
					Dest1Int += x;
#if DEBUGAPA
					if (Dest1Int != Dest2Int) {
						kprintf("ERROR: Dest1Int=%lx, Dest2Int=%lx\n",
							Dest1Int, Dest2Int);
	kprintf("sx=%ld, sx1=%ld, sy1=%ld, sxy1=%ld, sxy2=%ld, sy2=%ld, x2=%ld\n",
		sx, sx1, sy1, sxy1, sxy2, sy2, x2);
						Debug();
					}
#endif DEBUGAPA
				}
				/* if diagonal upright */
				if ((right == up) && ((upleft != up) || (dnright != up))) {
#if DEBUGAPA
					kprintf("APA: diagonal upright\n");
					Dest2Int = Dest1Int;
#endif DEBUGAPA
					Dest1Int -= sx;
					x = x2 = (sxy1 + y * sx1) / sy1 + 1;
					Dest1Int += x;
					x = sx - x2;
					while (x--) {
						/* use pixel to the right of us */
						Dest1Int->colorLong = (ColorInt + 1)->colorLong;
						Dest1Int++; /* advance to next destination pixel */
					}
#if DEBUGAPA
					if (Dest1Int != Dest2Int) {
						kprintf("ERROR: Dest1Int=%lx, Dest2Int=%lx\n",
							Dest1Int, Dest2Int);
	kprintf("sx=%ld, sx1=%ld, sy1=%ld, sxy1=%ld, sxy2=%ld, sy2=%ld, x2=%ld\n",
		sx, sx1, sy1, sxy1, sxy2, sy2, x2);
						Debug();
					}
#endif DEBUGAPA
				}
			}
			else if (y > sy2) { /* bottom half */
#if DEBUGAPA
				kprintf("APA: bottom half\n");
#endif DEBUGAPA
				/* if diagonal downleft */
				if ((left == dn) && ((dnright != dn) || (upleft != dn))) {
#if DEBUGAPA
					kprintf("APA: diagonal downleft\n");
					Dest2Int = Dest1Int;
#endif DEBUGAPA
					Dest1Int -= sx;
					x = x2 = (-sxy1 + y * sx1) / sy1;
					while (x--) {
						/* use pixel to the left of us */
						Dest1Int->colorLong = (ColorInt - 1)->colorLong;
						Dest1Int++; /* advance to next destination pixel */
					}
					x = sx - x2;
					Dest1Int += x;
#if DEBUGAPA
					if (Dest1Int != Dest2Int) {
						kprintf("ERROR: Dest1Int=%lx, Dest2Int=%lx\n",
							Dest1Int, Dest2Int);
	kprintf("sx=%ld, sx1=%ld, sy1=%ld, sxy1=%ld, sxy2=%ld, sy2=%ld, x2=%ld\n",
		sx, sx1, sy1, sxy1, sxy2, sy2, x2);
						Debug();
					}
#endif DEBUGAPA
				}
				/* if diagonal downright */
				if ((right == dn) && ((dnleft != dn) || (upright != dn))) {
#if DEBUGAPA
					kprintf("APA: diagonal downright\n");
					Dest2Int = Dest1Int;
#endif DEBUGAPA
					Dest1Int -= sx;
					x = x2 = (sxy2 - y * sx1) / sy1 + 1;
					Dest1Int += x;
					x = sx - x2;
					while (x--) {
						/* use pixel to the right of us */
						Dest1Int->colorLong = (ColorInt + 1)->colorLong;
						Dest1Int++; /* advance to next destination pixel */
					}
#if DEBUGAPA
					if (Dest1Int != Dest2Int) {
						kprintf("ERROR: Dest1Int=%lx, Dest2Int=%lx\n",
							Dest1Int, Dest2Int);
	kprintf("sx=%ld, sx1=%ld, sy1=%ld, sxy1=%ld, sxy2=%ld, sy2=%ld, x2=%ld\n",
		sx, sx1, sy1, sxy1, sxy2, sy2, x2);
						Debug();
					}
#endif DEBUGAPA
				}
			}
		}
		RowBuf++; /* advance to next source pixel on this line */
		TopBuf++; /* advance to next source pixel on line above us */
		BotBuf++; /* advance to next source pixel on line below us */
		ColorInt++; /* advance to next source pixel (color intensity) */
#if DEBUGAPA
		kprintf("APA: bottom of loop, bumping pointers\n");
		kprintf("RowBuf=%lx, TopBuf=%lx, BotBuf=%lx\n",
			RowBuf, TopBuf, BotBuf);
		kprintf("Dest1Int=%lx, ColorInt=%lx\n", Dest1Int, ColorInt);
#endif DEBUGAPA
	} while (--width);
#if DEBUGAPA
	kprintf("APA: done main logic, transferring last pixel\n");
#endif DEBUGAPA

	sx = *sxptr++; /* transfer last pixel; ie. do not alias it */
	do {
		Dest1Int->colorLong = ColorInt->colorLong;
		Dest1Int++; /* advance to next destination pixel */
	} while (--sx);

#if DEBUGAPA
	kprintf("elapsed : RowBuf=%ld, ColorInt=%ld, Dest1Int=%ld\n",
		RowBuf - PInfo->pi_RowBuf, ColorInt - PInfo->pi_ColorInt,
		Dest1Int - PInfo->pi_Dest1Int);
#endif DEBUGAPA

	SwapInts(PInfo); /* swap ColorInt and Dest1Int ptrs */

	if (flag) {
		Force1to1Scaling(PInfo); /* force 1:1 scaling */
	}

#if DEBUGAPA
	kprintf("APA: bye\n");
#endif DEBUGAPA
}
@


1.5
log
@for rcs 4.x header change
@
text
@d7 2
d20 1
a20 1
	PInfo->pi_BotBuf = buf;	
d55 1
a55 1
	
d235 1
a235 1
	
@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@@


1.3
log
@V1.3 Gamma 6 release
@
text
@d8 1
d21 1
a21 1
AliasPixelArray(y, sy, PInfo)
d24 1
d28 1
a28 2
	UWORD width, x, x2, xmult, xmod, sx, sx1, sy1, sxy1, sxy2, sy2;
	WORD etx, etx2;
d35 4
d44 2
a45 4
	width = PInfo->pi_tempwidth;
	xmult = PInfo->pi_tempxmult;
	xmod = PInfo->pi_tempxmod;
	etx = etx2 = PInfo->pi_tempetx;
d50 2
a51 2
	kprintf("ColorInt=%lx, Dest1Int=%lx, width=%ld\n",
		ColorInt, Dest1Int, width);
d53 2
a54 2
	/* transfer first pixel; ie. do not alias it */
	sx = Scale(xmult, xmod, etx2, &etx);
d84 1
a84 8
		/* scale pixel (DONT CHANGE THIS CODE!) */
		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
		}
		x2 = sx;
d233 2
a234 2
	/* transfer last pixel; ie. do not alias it */
	sx = Scale(xmult, xmod, etx2, &etx);
d245 1
d247 5
a251 4
#if DEBUGAPA
	kprintf("APA: forcing 1:1 scaling\n");
#endif DEBUGAPA
	Force1to1Scaling(PInfo); /* force 1:1 x scaling */
@


1.2
log
@fixed symetry code bug
V1.3 Gamma 1 check-in
@
text
@a29 1

d31 1
a31 2
	kprintf("APA: enter, y=%ld, sy=%ld, calling Debug()\n", y, sy);
	Debug();
d33 1
d44 6
d61 3
d66 3
d78 3
d90 3
d98 3
d108 3
d113 3
d118 4
d131 9
d143 4
d156 9
d168 3
d173 4
d186 9
d198 4
d211 9
d227 6
d234 3
a236 1

d250 3
d254 3
@


1.1
log
@added symetry correcting code
V1.3 Gamma 1 check-in (again)
@
text
@d87 3
a89 2
		if (sy1) { /* if not 1:1 scaling */
			if (y < sy2) { /* top half */
d93 1
a93 1
					x = x2 = (sxy1 - y * sx1 + sy2) / sy1;
d105 1
a105 1
					x = x2 = (sxy1 + y * sx1 + sy2 + 1) / sy1;
d119 1
a119 1
					x = x2 = (-sxy1 + y * sx1 + sy2) / sy1;
d131 1
a131 1
					x = x2 = (sxy2 - y * sx1 + sy2 + 1) / sy1;
@


1.0
log
@added to rcs
@
text
@d26 1
a26 1
	UWORD width, x, x2, xmult, xmod, sx, sx1, sy1;
d29 1
a29 2
	UWORD up, downleft, downright;
	BOOL top, bot;
d59 1
d64 2
a65 2
		downleft = *(BotBuf - 1);
		downright = *(BotBuf + 1);
d83 3
d87 26
a112 7
		top = (left == up) && ((upright != up) || (downleft != up)) && sy1;
		if (top) { /* if diagonal upright/downleft */
			Dest1Int -= sx;
			x = x2 = (sx1 * (sy1 - y) + sy1 / 2) / sy1;
			while (x--) {
				Dest1Int->colorLong = (ColorInt - 1)->colorLong;
				Dest1Int++; /* advance to next destination pixel */
d114 25
a138 12
			x = sx - x2;
			Dest1Int += x;
		}
		bot = (right == up) && ((upleft != up) || (downright != up)) && sy1;
		if (bot) { /* if diagonal upleft/downright */
			Dest1Int -= sx;
			x = x2 = (sx1 * y + sy1 / 2 + 1) / sy1;
			Dest1Int += x;
			x = sx - x2;
			while (x--) {
				Dest1Int->colorLong = (ColorInt + 1)->colorLong;
				Dest1Int++; /* advance to next destination pixel */
a140 1

@
