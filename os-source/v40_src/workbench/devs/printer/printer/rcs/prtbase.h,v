head     1.10;
branch   ;
access   ;
symbols  V38_4:1.10 V37_603:1.10 V36_603:1.10 V36_599:1.9 V36_596:1.9 V36_587:1.9 V36_579:1.9 V36_575:1.7 V36_573:1.7 V36_572:1.7 V36_570:1.4 L34_564:1.4 L34_563:1.4 L34_562:1.4 L35_560:1.4 L35_559:1.4 L35_558:1.4 L35_556:1.4 L35_548:1.4 L35_547:1.4 L35_544:1.2 L35_543:1.2 L35_541:1.2 L35_539:1.1 L35_534:1.1 L35_528:1.1 L35_522:1.1 L35_517:1.1;
locks    ; strict;
comment  @*   @;


1.10
date     90.11.02.16.12.46;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     90.07.26.16.57.02;  author valentin;  state Exp;
branches ;
next     1.8;

1.8
date     90.07.26.16.21.00;  author valentin;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.30.12.50.50;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.06.19.24.32;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.12.14.35.19;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.18.17.57.36;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.18.11.28.19;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     88.04.10.14.31.59;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.11.23.39;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.30.56;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.10
log
@Fix reference to DOSEXTENS_I -> change to _H
@
text
@#ifndef  DEVICES_PRTBASE_H
#define  DEVICES_PRTBASE_H
/*
**	$Id: prtbase.h,v 1.9 90/07/26 16:57:02 valentin Exp Locker: darren $
**
**	printer.device base structure definitions
**
**	(C) Copyright 1987, 1988, 1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef  EXEC_TYPES_H
#include "exec/types.h"
#endif
#ifndef  EXEC_NODES_H
#include "exec/nodes.h"
#endif
#ifndef  EXEC_LISTS_H
#include "exec/lists.h"
#endif
#ifndef  EXEC_PORTS_H
#include "exec/ports.h"
#endif
#ifndef  EXEC_LIBRARIES_H
#include "exec/libraries.h"
#endif
#ifndef  EXEC_TASKS_H
#include "exec/tasks.h"
#endif

#ifndef  DEVICES_PARALLEL_H
#include "devices/parallel.h"
#endif
#ifndef  DEVICES_SERIAL_H
#include "devices/serial.h"
#endif
#ifndef  DEVICES_TIMER_H
#include "devices/timer.h"
#endif
#ifndef  LIBRARIES_DOSEXTENS_H
#include "libraries/dosextens.h"
#endif
#ifndef  INTUITION_INTUITION_H
#include "intuition/intuition.h"
#endif


struct DeviceData {
    struct Library dd_Device; /* standard library node */
    APTR dd_Segment;          /* A0 when initialized */
    APTR dd_ExecBase;         /* A6 for exec */
    APTR dd_CmdVectors;       /* command table for device commands */
    APTR dd_CmdBytes;         /* bytes describing which command queue */
    UWORD   dd_NumCommands;   /* the number of commands supported */
};

#define P_OLDSTKSIZE	0x0800	/* stack size for child task (OBSOLETE) */
#define P_STKSIZE	0x1000	/* stack size for child task */
#define P_BUFSIZE	256	/* size of internal buffers for text i/o */
#define P_SAFESIZE	128	/* safety margin for text output buffer */

struct   PrinterData {
	struct DeviceData pd_Device;
	struct MsgPort pd_Unit;	/* the one and only unit */
	BPTR pd_PrinterSegment;	/* the printer specific segment */
	UWORD pd_PrinterType;	/* the segment printer type */
				/* the segment data structure */
	struct PrinterSegment *pd_SegmentData;
	UBYTE *pd_PrintBuf;	/* the raster print buffer */
	int (*pd_PWrite)();	/* the write function */
	int (*pd_PBothReady)();	/* write function's done */
	union {			/* port I/O request 0 */
		struct IOExtPar pd_p0;
		struct IOExtSer pd_s0;
	} pd_ior0;

#define  pd_PIOR0 pd_ior0.pd_p0
#define  pd_SIOR0 pd_ior0.pd_s0

	union {			/*   and 1 for double buffering */
		struct IOExtPar pd_p1;
		struct IOExtSer pd_s1;
	} pd_ior1;

#define  pd_PIOR1 pd_ior1.pd_p1
#define  pd_SIOR1 pd_ior1.pd_s1

	struct timerequest pd_TIOR;	/* timer I/O request */
	struct MsgPort pd_IORPort;	/* and message reply port */
	struct Task pd_TC;		/* write task */
	UBYTE pd_OldStk[P_OLDSTKSIZE];	/* and stack space (OBSOLETE) */
	UBYTE pd_Flags;			/* device flags */
	UBYTE pd_pad;			/* padding */
	struct Preferences pd_Preferences;	/* the latest preferences */
	UBYTE pd_PWaitEnabled;		/* wait function switch */
	/* new fields for V2.0 */
	UBYTE pd_Flags1;		/* padding */
	UBYTE pd_Stk[P_STKSIZE];	/* stack space */
};

/* Printer Class */
#define PPCB_GFX	0	/* graphics (bit position) */
#define PPCF_GFX	0x1	/* graphics (and/or flag) */
#define PPCB_COLOR	1	/* color (bit position) */
#define PPCF_COLOR	0x2	/* color (and/or flag) */

#define PPC_BWALPHA	0x00	/* black&white alphanumerics */
#define PPC_BWGFX	0x01	/* black&white graphics */
#define PPC_COLORALPHA	0x02	/* color alphanumerics */
#define PPC_COLORGFX	0x03	/* color graphics */

/* Color Class */
#define	PCC_BW		0x01	/* black&white only */
#define	PCC_YMC		0x02	/* yellow/magenta/cyan only */
#define	PCC_YMC_BW	0x03	/* yellow/magenta/cyan or black&white */
#define	PCC_YMCB	0x04	/* yellow/magenta/cyan/black */
#define	PCC_4COLOR	0x04	/* a flag for YMCB and BGRW */
#define	PCC_ADDITIVE	0x08	/* not ymcb but blue/green/red/white */
#define	PCC_WB		0x09	/* black&white only, 0 == BLACK */
#define	PCC_BGR		0x0A	/* blue/green/red */
#define	PCC_BGR_WB	0x0B	/* blue/green/red or black&white */
#define	PCC_BGRW	0x0C	/* blue/green/red/white */
/*
	The picture must be scanned once for each color component, as the
	printer can only define one color at a time.  ie. If 'PCC_YMC' then
	first pass sends all 'Y' info to printer, second pass sends all 'M'
	info, and third pass sends all C info to printer.  The CalComp
	PlotMaster is an example of this type of printer.
*/
#define PCC_MULTI_PASS	0x10	/* see explanation above */

struct PrinterExtendedData {
	char    *ped_PrinterName;    /* printer name, null terminated */
	VOID    (*ped_Init)();       /* called after LoadSeg */
	VOID    (*ped_Expunge)();    /* called before UnLoadSeg */
	int     (*ped_Open)();       /* called at OpenDevice */
	VOID    (*ped_Close)();      /* called at CloseDevice */
	UBYTE   ped_PrinterClass;    /* printer class */
	UBYTE   ped_ColorClass;      /* color class */
	UBYTE   ped_MaxColumns;      /* number of print columns available */
	UBYTE   ped_NumCharSets;     /* number of character sets */
	UWORD   ped_NumRows;         /* number of 'pins' in print head */
	ULONG   ped_MaxXDots;        /* number of dots max in a raster dump */
	ULONG   ped_MaxYDots;        /* number of dots max in a raster dump */
	UWORD   ped_XDotsInch;       /* horizontal dot density */
	UWORD   ped_YDotsInch;       /* vertical dot density */
	char    ***ped_Commands;     /* printer text command table */
	int     (*ped_DoSpecial)();  /* special command handler */
	int     (*ped_Render)();     /* raster render function */
	LONG    ped_TimeoutSecs;     /* good write timeout */
	/* the following only exists if the segment version is >= 33 */
	char    **ped_8BitChars;     /* conv. strings for the extended font */
	LONG	ped_PrintMode;       /* set if text printed, otherwise 0 */
	/* the following only exists if the segment version is >= 34 */
	/* ptr to conversion function for all chars */
	int	(*ped_ConvFunc)();
};

struct PrinterSegment {
    ULONG   ps_NextSegment;      /* (actually a BPTR) */
    ULONG   ps_runAlert;         /* MOVEQ #0,D0 : RTS */
    UWORD   ps_Version;          /* segment version */
    UWORD   ps_Revision;         /* segment revision */
    struct  PrinterExtendedData ps_PED;   /* printer extended data */
};
#endif
@


1.9
log
@To make FixHeader happy
@
text
@d4 1
a4 1
**	$Id: $
d40 1
a40 1
#ifndef  LIBRARIES_DOSEXTENS_I
@


1.8
log
@Added $Id: $ line
@
text
@a0 12
/********************************************************************/
/*               Commodore-Amiga, Inc.                              */
/*               prtbase.h                                          */
/********************************************************************/
/*********************************************************************
 *
 * printer device data definition
 *
 * $Id: $
 *
 ********************************************************************/

d3 8
@


1.7
log
@renamed P_STKSIZE to P_OLDSTKSIZE.
renamed pd_Stk[P_STKSIZE] to pd_OldStk[P_OLDSTKSIZE].
added 'UBYTE pd_Pad1' at end of PrinterData struct.
added new P_STKSIZE of 0x1000.
added new pd_Stk[P_STKSIZE] at end of PrinterData struct.
all the above changes were made to allow the printer device
to work under V2.0.  The call to AutoRequest in pwrite.asm
overran the old stack.

@
text
@d9 2
@


1.6
log
@for rcs 4.x header change
@
text
@d59 2
a60 1
#define P_STKSIZE	0x0800	/* stack size for child task */
d91 1
a91 1
	struct MsgPort pd_IORPort;	/*   and message reply port */
d93 1
a93 1
	UBYTE pd_Stk[P_STKSIZE];	/*   and stack space */
d95 1
a95 1
	UBYTE pd_pad;
d97 4
a100 1
	UBYTE   pd_PWaitEnabled;	/* wait function switch */
@


1.5
log
@now includes exec/types.h
@
text
@@


1.4
log
@added P_BUFSIZE and P_SAFESIZE defines
V1.3 Gamma 13
@
text
@d14 3
@


1.3
log
@changed stack size from $0800 to $1000 to fix expunge bug
V1.3 Gamma 13 release
@
text
@d56 3
a58 2

#define  P_STKSIZE   0x1000	/* stack size for child task */
@


1.2
log
@V1.3 Gamma 10 release
@
text
@d57 1
a57 1
#define  P_STKSIZE   0x0800
@


1.1
log
@V1.3 Beta 4 release
@
text
@d64 4
a67 3
	struct PrinterSegment *pd_SegmentData;	/* the segment data structure */
	UBYTE *pd_PrintBuf;		/* the raster print buffer */
	int (*pd_PWrite)();		/* the write function */
d69 1
a69 1
	union {					/* port I/O request 0 */
d77 1
a77 1
	union {					/*   and 1 for double buffering */
d87 1
a87 1
	struct Task pd_TC;			/* write task */
d89 1
a89 1
	UBYTE pd_Flags;				/* device flags */
a94 5
#define PPCB_GFX	0		/* graphics (bit position) */
#define PPCF_GFX	0x1		/* graphics (and/or flag) */
#define PPCB_COLOR	1		/* color (bit position) */
#define PPCF_COLOR	0x2		/* color (and/or flag) */

d96 4
d101 2
a102 2
#define PPC_BWALPHA		0x00	/* black&white alphanumerics */
#define PPC_BWGFX		0x01	/* black&white graphics */
d107 5
a111 6

#define	PCC_BW			0x01	/* black&white only */
#define	PCC_YMC			0x02	/* yellow/magenta/cyan only */
#define	PCC_YMC_BW		0x03	/* yellow/magenta/cyan or black&white */
#define	PCC_YMCB		0x04	/* yellow/magenta/cyan/black */
#define	PCC_4COLOR		0x04	/* a flag for YMCB and BGRW */
d113 4
a116 4
#define	PCC_WB			0x09	/* black&white only, 0 == BLACK */
#define	PCC_BGR			0x0A	/* blue/green/red */
#define	PCC_BGR_WB		0x0B	/* blue/green/red or black&white */
#define	PCC_BGRW		0x0C	/* blue/green/red/white */
d118 5
a122 5
	The picture must be scanned once for each color component, as the printer
can only define one color at a time.  ie. If 'PCC_YMC' then first pass
sends all 'Y' info to printer, second pass sends all 'M' info, and third pass
sends all C info to printer.  The CalComp PlotMaster is an example of this
type of printer.
d136 3
a138 3
	UWORD   ped_NumRows;         /* number of raster rows in a raster dump */
	ULONG   ped_MaxXDots;        /* number of dots maximum in a raster dump */
	ULONG   ped_MaxYDots;        /* number of dots maximum in a raster dump */
d145 1
a145 1
	/* the following only exists if the segment version is 33 or greater */
d147 4
a150 3
	LONG	ped_PrintMode;		 /* set if text printed, otherwise 0 */
	/* the following only exists if the segment version is 34 or greater */
	int		(*ped_ConvFunc)();	/* ptr to conversion function for all chars */
@


1.0
log
@added to rcs
@
text
@@
