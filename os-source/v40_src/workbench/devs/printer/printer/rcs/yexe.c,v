head     1.11;
branch   ;
access   ;
symbols  V38_4:1.10 V37_603:1.10 V36_603:1.10 V36_599:1.10 V36_596:1.10 V36_587:1.10 V36_579:1.10 V36_575:1.10 V36_573:1.10 V36_572:1.10 V36_570:1.8 L34_564:1.8 L34_563:1.8 L34_562:1.8 L35_560:1.8 L35_559:1.8 L35_558:1.8 L35_556:1.8 L35_548:1.8 L35_547:1.8 L35_544:1.8 L35_543:1.8 L35_541:1.7 L35_539:1.7 L35_534:1.7 L35_528:1.5 L35_522:1.5 L35_517:1.4;
locks    ; strict;
comment  @*   @;


1.11
date     92.01.28.14.24.42;  author davidj;  state Exp;
branches ;
next     1.10;

1.10
date     90.04.30.12.49.31;  author daveb;  state Exp;
branches ;
next     1.9;

1.9
date     90.04.06.19.26.13;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.04.13.12.00.48;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.03.08.18.35.37;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.03.08.17.39.40;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.03.04.10.12.34;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.02.02.16.00.45;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.30.12.32.50;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.17.05.04;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.09.35.58;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.24.04;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.11
log
@compiled native
@
text
@#include <exec/types.h>
#include <intuition/intuition.h>

#include "printer.h"
#include "prtbase.h"
#include "prtgfx.h"

#include "internal.h"

#include "printer_iprotos.h"

#define DEBUG0	0
#define TCDEBUG	0

#if TCDEBUG
#include "timing.h"
#endif TCDEBUG

YEnlargeXEnlarge(PInfo, pass)
struct PrtInfo *PInfo;
int pass;
{
#if TCDEBUG
	extern void ReadVertTime(), ElapsedVertTime(), PrintAvgTime();
#endif TCDEBUG
	extern struct PrinterData *PD;

	int err;
	UWORD y, ypos, sy, height, ymult, ymod, *buf, sy2, width;
	WORD ety, ety2;
	BOOL Alias, Floyd;
#if TCDEBUG
	struct mytimeval RPATime, CPATime, FPATime, TPATime, CBTime, TotalTime;
	struct mytimeval rpa1, rpa2, cpa1, cpa2, fpa1, fpa2, tpa1, tpa2, cb1, cb2;
	RPATime.row = RPATime.col = RPATime.count = 0;
	CPATime.row = CPATime.col = CPATime.count = 0;
	FPATime.row = FPATime.col = FPATime.count = 0;
	TPATime.row = TPATime.col = TPATime.count = 0;
	CBTime.row = CBTime.col = CBTime.count = 0;
#endif TCDEBUG
#if DEBUG0
	kprintf("yexe: enter\n");
#endif

	/* init local variables */
	err = 0;
	ypos = 0;
	y = PInfo->pi_ystart;
	height = PInfo->pi_height;
	ymult = PInfo->pi_ymult;
	ymod = PInfo->pi_ymod;
	ety = ety2 = PInfo->pi_ety;
	Alias = PInfo->pi_PrefsFlags & ANTI_ALIAS;
	Floyd = (PInfo->pi_PrefsFlags & FLOYD_DITHERING) &&
				(PD->pd_Preferences.PrintShade != SHADE_BW);

	/* for each source row */
	do {
		FixScalingVars(PInfo);
#if TCDEBUG
		Disable();
		ReadVertTime(&rpa1);
#endif TCDEBUG
		if (Alias) {
			AliasSwapBufs(PInfo);
			/* if on last line and there is not a line below us */
			if ((height == 1) && !(PInfo->pi_flags & PRT_BELOW)) {
				width = PInfo->pi_width;
				buf = PInfo->pi_BotBuf;
#if DEBUG0
				kprintf("yexe: filling BotBuf @@ %lx with %lx, %ld times\n",
					buf, ~0, width);
#endif
				do { /* fill BotBuf with an invalid value */
					*buf++ = ~0;
				} while (--width);
			}
			else {
				/* get entire row (below) of color code info into BotBuf */
				MyReadPixelArray(y + 1, PInfo, PInfo->pi_BotBuf);
			}
		}
		else {
			/* read entire row of color code info into RowBuf */
			MyReadPixelArray(y, PInfo, PInfo->pi_RowBuf);
		}
#if TCDEBUG
		ReadVertTime(&rpa2);
		Enable();
		ElapsedVertTime(&rpa1, &rpa2, &RPATime);
		Disable();
		ReadVertTime(&cpa1);
#endif TCDEBUG
		/* convert entire row to YMCB intensity values */
		ConvertPixelArray(PInfo, y - PInfo->pi_ystart, 0);
#if TCDEBUG
		ReadVertTime(&cpa2);
		Enable();
		ElapsedVertTime(&cpa1, &cpa2, &CPATime);
#endif TCDEBUG
		/* Hedley scan convert */
		if (PInfo->pi_PrefsFlags & GREY_SCALE2) {
			ScanConvertPixelArray(PInfo, y);
		}
		/* if want to fix color(s) and in HAM mode and doing a color dump */
		if ((PInfo->pi_PrefsFlags & CORRECT_RGB_MASK) &&
			(PInfo->pi_flags & PRT_HAM) &&
			(PD->pd_Preferences.PrintShade == SHADE_COLOR)) {
#if TCDEBUG
			Disable();
			ReadVertTime(&fpa1);
#endif TCDEBUG
			FixColorsPixelArray(PInfo); /* fix all colors for this row */
#if TCDEBUG
			ReadVertTime(&fpa2);
			Enable();
			ElapsedVertTime(&fpa1, &fpa2, &FPATime);
#endif TCDEBUG
		}
		sy = sy2 = Scale(ymult, ymod, ety2, &ety);
		do { /* use this row 'sy' times */
			/* CANNOT ALIAS AND FLOYD! */
			if (Alias) {
				AliasPixelArray(sy2 - sy, sy2, PInfo, 1);
			}
			else if (Floyd) {
				FloydPixelArray(PInfo, 1);
			}
#if TCDEBUG
			Disable();
			ReadVertTime(&tpa1);
#endif TCDEBUG
			/* scale, dither, and render entire row of pixels */
			TransferPixelArray(ypos, PInfo, pass);
#if TCDEBUG
			ReadVertTime(&tpa2);
			Enable();
			ElapsedVertTime(&tpa1, &tpa2, &TPATime);
			Disable();
			ReadVertTime(&cb1);
#endif TCDEBUG
			/* restore ptrs */
			if (Alias) {
				SwapInts(PInfo);
			}
			else if (Floyd) {
				SwapInts(PInfo);
				FloydSwapDest(PInfo);
			}
			/* restore ptrs */
			/* dump buffer if neccessary */
			if (err = CheckBuf(++ypos, PInfo->pi_render, 0)) {
				break;
			}
#if TCDEBUG
			ReadVertTime(&cb2);
			Enable();
			ElapsedVertTime(&cb1, &cb2, &CBTime);
#endif TCDEBUG
		} while (--sy);
		if (err) {
			break;
		}
		y++;
	} while (--height);
	if (!err) {
		/* dump partial buffer if neccessary */
		err = CheckBuf(ypos, PInfo->pi_render, 1);
	}
#if TCDEBUG
	TotalTime.col = RPATime.col + CPATime.col + FPATime.col + TPATime.col +
		CBTime.col;
	TotalTime.row = TotalTime.col / 228;
	TotalTime.col = TotalTime.col % 228;
	TotalTime.row += RPATime.row + CPATime.row + FPATime.row + TPATime.row +
		CBTime.row;
	PrintAvgTime("\011MyReadPixelArray", &RPATime, &TotalTime);
	PrintAvgTime("\011ConvertPixelArray", &CPATime,  &TotalTime);
	PrintAvgTime("\011FixColorsPixelArray", &FPATime,  &TotalTime);
	PrintAvgTime("\011TransferPixelArray", &TPATime,  &TotalTime);
	PrintAvgTime("\011CheckBuf", &CBTime,  &TotalTime);
	kprintf("\011TotalTime=%ld:%ld\n", TotalTime.row, TotalTime.col);
#endif TCDEBUG
#if DEBUG0
	kprintf("yexe: ypos=%ld, exit\n", ypos);
#endif
	return(err);
}
@


1.10
log
@changed '"../intuition.h"' to '<intuition/intuition.h>'
@
text
@d10 3
a12 1
#define DEBUG	0
d41 1
a41 1
#if DEBUG
d70 1
a70 1
#if DEBUG
d169 1
a169 1
	}				
d184 1
a184 1
#if DEBUG
@


1.9
log
@for rcs 4.x header change
@
text
@d2 1
a2 1
#include "../intuition.h"
@


1.8
log
@added code to check for line below during anti-aliasing
V1.3 Gamma 11 release
@
text
@@


1.7
log
@V1.3 Gamma 8 release
@
text
@d64 2
a65 1
			if (height == 1) { /* if on last line */
@


1.6
log
@V1.3 Gamma 8 check-in
@
text
@d10 1
a10 1
#define DEBUG	1
@


1.5
log
@V1.3 Gamma 8 check-in
@
text
@d10 1
a10 1
#define DEBUG	0
@


1.4
log
@V1.3 Gamma 7 release
@
text
@d2 1
a2 1
#include <intuition/intuition.h>
@


1.3
log
@V1.3 Gamma 7 release
@
text
@d2 1
a2 1
#include "../intuition.h"
@


1.2
log
@V1.3 gamma 1 release
@
text
@d121 1
a121 1
				AliasPixelArray(sy2 - sy, sy2, PInfo);
@


1.1
log
@V1.3 beta 4 check-in
@
text
@d1 2
a2 1
#include <intuition/intuition.h>
a7 1
#include "prtprefs.h"
d27 1
a27 1
	UWORD y, ypos, sy, height, ymult, ymod;
d29 1
d51 3
d57 1
d62 22
a83 2
		/* read entire row of color code info in RowBuf */
		MyReadPixelArray(y, PInfo);
d98 4
d117 1
a117 1
		sy = Scale(ymult, ymod, ety2, &ety);
d119 7
d139 9
@


1.0
log
@added to rcs
@
text
@d5 2
a6 1
#include "prtprivate.h"
d8 1
d45 5
a49 5
	y = PInfo->ystart;
	height = PInfo->height;
	ymult = PInfo->ymult;
	ymod = PInfo->ymod;
	ety = ety2 = PInfo->ety;
d67 1
a67 1
		ConvertPixelArray(PInfo, y - PInfo->ystart, 0);
d74 2
a75 2
		if ((PInfo->PrefsFlags & CORRECT_RGB_MASK) &&
			(PInfo->flags & PRT_HAM) &&
d104 1
a104 1
			if (err = CheckBuf(++ypos, PInfo->render, 0)) {
d120 1
a120 1
		err = CheckBuf(ypos, PInfo->render, 1);
@
