head     1.10;
branch   ;
access   ;
symbols  V38_4:1.6 V37_603:1.6 V36_603:1.6 V36_599:1.6 V36_596:1.6 V36_587:1.6 V36_579:1.6 V36_575:1.6 V36_573:1.6 V36_572:1.6 V36_570:1.5 L34_564:1.5 L34_563:1.5 L34_562:1.5 L35_560:1.5 L35_559:1.5 L35_558:1.5 L35_556:1.5 L35_548:1.5 L35_547:1.5 L35_544:1.5 L35_543:1.5 L35_541:1.5 L35_539:1.5 L35_534:1.5 L35_528:1.5 L35_522:1.5 L35_517:1.4;
locks    ; strict;
comment  @*   @;


1.10
date     92.04.24.10.23.23;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     92.02.07.17.21.54;  author davidj;  state Exp;
branches ;
next     1.8;

1.8
date     92.02.07.15.46.44;  author davidj;  state Exp;
branches ;
next     1.7;

1.7
date     92.01.28.14.16.51;  author davidj;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.06.19.23.15;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.03.04.10.10.32;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.12.21.10.59.15;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.11.25.15.20.58;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.11.17.12.31.18;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.27.15.53.38;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.21.22;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.10
log
@no more compiler warnings
@
text
@#include "exec/types.h"
#include "exec/errors.h"

#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/intuition_protos.h>

#include "printer.h"
#include "prtbase.h"

#include "printer_iprotos.h"

#define OPDEBUG	0

#define	DB(x)	;
void kprintf (void *, ...);

extern struct PrinterData *PD;
extern struct PrinterExtendedData *PED;
extern struct PrinterExtendedData PEDDefault;
extern LoadedPrinterFile[];

#define	KNOWNPTYPES	2

#define COND1	1

static char *printKnownNames[KNOWNPTYPES] =
{
    0,				/* Custom is index 0 */
    "generic",
};

OpenPrinter ()
{
    UBYTE printer_name[64];
    char *pFileName;
    ULONG special;
    UWORD pType;
    char *s1;				/* ptr to user selected printer file */
    char *s2;				/* ptr to previously loaded printer file (may be NULL) */
    char *s3;

#if COND1
#else
	LONG prevCurrDir;
	LONG fontDir;
#endif

    GetPrefs (&(PD->pd_Preferences), sizeof (PD->pd_Preferences));
    pType = PD->pd_Preferences.PrinterType;
    if (pType == 0)
	s1 = pFileName = PD->pd_Preferences.PrinterFilename;
    else
	s1 = pFileName = printKnownNames[1];

    if (*s1 == '\0')
	return (IOERR_OPENFAIL);	/* for null custom printer */

    special = 0;
    GetSpecialDensity (&special);
    s2 = (char *)LoadedPrinterFile;
    if (strcmpnc (s1, s2) == 0)
    {				/* names match, printer file already open */
	OpenAlpha (1);
	if (PD->pd_SegmentData->ps_Version >= 35)
	{			/* if >= V1.3 */
	    PED->ped_PrintMode = 0;	/* clear mode flag (assume graphics) */
	}
	/* init special stuff (density, etc.) */
	/* the 5th parameter here is for V1.0 compatability */
	(*(PED->ped_Render)) (0, special, 0, 5, special);
	return (0);
    }

    /* if this far then loading a new printer specific file */
    if (PD->pd_PrinterSegment != 0)
    {				/* if previously loaded a segment */
	UnLoadSeg (PD->pd_PrinterSegment);	/* unload old segment */
	PD->pd_PrinterSegment = 0;	/* flag no segment loaded */
	PD->pd_PrinterType = -1;/* flag no printer loaded */
    }

#if COND1
    sprintf (printer_name, "PRINTERS:%s", pFileName);
    PD->pd_PrinterSegment = (BPTR) LoadSeg (printer_name);

    if (!PD->pd_PrinterSegment)
    {
	sprintf (printer_name, "DEVS:printers/%s", pFileName);
	PD->pd_PrinterSegment = (BPTR) LoadSeg (printer_name);
    }

    if (PD->pd_SegmentData = (struct PrinterSegment *) ((ULONG) (PD->pd_PrinterSegment) << 2))
    {
	PED = &(PD->pd_SegmentData->ps_PED);

	/* init printer specific code */
	(*(PED->ped_Init))(PD);
	OpenAlpha (0);
	PD->pd_PrinterType = pType;
	s2 = (char *)LoadedPrinterFile;

        /* s3 = PED->ped_PrinterName;*/
	/* use the name of the file we just loaded */
	s3 = pFileName;

	while (*s2++ = *s3++) ;	    /* ?????? */

	if (PD->pd_SegmentData->ps_Version >= 35)
	{		    /* if >= V1.3 */
	    PED->ped_PrintMode = 0; /* clear mode flag (assume gfx) */
	}

	/* init	special	stuff (density,	etc.) */
	/* the 5th parameter here is for V1.0 compatability */
	(*(PED->ped_Render)) (0, special, 0, 5,	special);
	return (0);
    }

#else
    if ((fontDir = Lock ("DEVS:printers", SHARED_LOCK)) != 0)
    {
	prevCurrDir = CurrentDir (fontDir);
	/* load printer specific segment */
	PD->pd_PrinterSegment = (BPTR) LoadSeg (pFileName);
	if (PD->pd_SegmentData = (struct PrinterSegment *)
	    ((ULONG) (PD->pd_PrinterSegment) << 2))
	{			/* if loaded */
	    PED = &(PD->pd_SegmentData->ps_PED);
	    (*(PED->ped_Init)) (PD);	/* init printer specific code */
	    OpenAlpha (0);
	    PD->pd_PrinterType = pType;
	    s2 = LoadedPrinterFile;
/*			s3 = PED->ped_PrinterName;*/
	    s3 = pFileName;	/* use the name of the file we just loaded */
	    while (*s2++ = *s3++) ;	/* ?????? */
	    CurrentDir (prevCurrDir);
	    UnLock (fontDir);
	    if (PD->pd_SegmentData->ps_Version >= 35)
	    {			/* if >= V1.3 */
		PED->ped_PrintMode = 0;	/* clear mode flag (assume gfx) */
	    }
	    /* init special stuff (density, etc.) */
	    /* the 5th parameter here is for V1.0 compatability */
	    (*(PED->ped_Render)) (0, special, 0, 5, special);
	    return (0);
	}
	CurrentDir (prevCurrDir);
	UnLock (fontDir);
    }
#endif
    return (IOERR_OPENFAIL);
}

ExpungePrinter ()
{

    if (PD->pd_PrinterSegment != 0)
    {				/* if we have one loaded */
	(*(PED->ped_Expunge)) ();	/* expunge it */
	UnLoadSeg (PD->pd_PrinterSegment);	/* unload it */
    }
}

strcmpnc (s1, s2)		/* string compare, no case */
    char *s1, *s2;
{
    char c1, c2;

    do
    {
	c1 = *s1++;
	c2 = *s2++;
	if (c1 >= 'a' && c1 <= 'z')
	{
	    c1 -= 0x20;
	}
	if (c2 >= 'a' && c2 <= 'z')
	{
	    c2 -= 0x20;
	}
    } while (c1 == c2 && c1 && c2);
    if (c1 == c2)
    {
	return (0);
    }
    else
    {
	return (c1 == 0 ? -1 : 1);
    }
}
@


1.9
log
@removed obsolete name table.
@
text
@d26 2
a36 1
    LONG prevCurrDir;
a38 1
    LONG fontDir;
d44 6
d62 1
a62 1
    s2 = LoadedPrinterFile;
d84 1
a84 1
#if 1
d102 1
a102 1
	s2 = LoadedPrinterFile;
@


1.8
log
@changed EPSON to generic
@
text
@d24 1
a24 1
#define	KNOWNPTYPES	13
a28 6
    "ALPHACOM_ALPHAPRO_101",
    "BROTHER_HR-15XL",
    "CBM_MPS1000",
    "DIABLO_630",
    "DIABLO_ADVANTAGE_D25",
    "DIABLO_C-150",
a29 5
    "EPSON_JX-80",
    "OKIMATE_20",
    "QUME_LETTERPRO_20",
    "HP_LASERJET",
    "HP_LASERJET_PLUS"
a43 1
    DB (kprintf ("GetPrefs\n"));
d46 2
a47 8
    DB (kprintf ("Type=%ld (%ld)\n", (ULONG)pType, KNOWNPTYPES));
    if (pType < KNOWNPTYPES)
    {
	if (pType == 0)
	    s1 = pFileName = PD->pd_Preferences.PrinterFilename;
	else
	    s1 = pFileName = printKnownNames[pType];
    }
d49 1
a49 4
    {
	DB (kprintf ("bad type!\n"));
	return (IOERR_OPENFAIL);
    }
a51 2
    {
	DB (kprintf ("NULL custom printer!\n"));
a52 2
    }
    DB (kprintf ("Printer file name=[%s]\n", pFileName));
a58 1
	DB (kprintf ("OpenAlpha 1\n"));
a65 1
	DB (kprintf ("ped_Render=0x%lx\n", PED->ped_Render));
a66 1
	DB (kprintf ("return 0\n"));
a72 1
	DB (kprintf ("UnLoadSeg previous segment\n"));
a79 1
    DB (kprintf ("LoadSeg %s\n", printer_name));
a84 1
	DB (kprintf ("LoadSeg %s\n", printer_name));
a92 1
	DB (kprintf ("init=0x%lx\n", PED->ped_Init));
a93 1
	DB (kprintf ("OpenAlpha 0\n"));
a110 1
	DB (kprintf ("render=0x%lx\n", PED->ped_Render));
a111 1
	DB (kprintf ("return 0\n"));
a140 1
	    DB (kprintf ("return 0\n"));
a146 1
    DB (kprintf ("return IOERR_OPENFAIL\n"));
@


1.7
log
@native compile
@
text
@d4 1
d6 1
d16 3
d25 1
d35 1
a35 1
    "EPSON",
d55 1
d58 1
d67 2
d70 1
d73 2
d76 2
d84 1
d92 1
d94 1
a94 3
#if OPDEBUG
	kprintf ("OP: _RPL=%lx, _rp2rp=%lx\n", &ReadPixelLine (), &rp2rp ());
#endif	/* DEBUGOP */
d101 1
d109 1
d115 1
d124 1
d126 1
d144 1
d146 1
d176 1
a176 3
#if OPDEBUG
	    kprintf ("OP: _RPL=%lx, _rp2rp=%lx\n", ReadPixelLine, rp2rp);
#endif	/* DEBUGOP */
d183 1
a183 1

@


1.6
log
@for rcs 4.x header change
@
text
@d1 2
a2 2
#include	"exec/types.h"
#include	"exec/errors.h"
d4 5
a8 2
#include	"printer.h"
#include	"prtbase.h"
d10 2
d20 15
a34 14
static char *printKnownNames[KNOWNPTYPES] = {
	0, /* Custom is index 0 */
	"ALPHACOM_ALPHAPRO_101",
	"BROTHER_HR-15XL",
	"CBM_MPS1000",
	"DIABLO_630",
	"DIABLO_ADVANTAGE_D25",
	"DIABLO_C-150",
	"EPSON",
	"EPSON_JX-80",
	"OKIMATE_20",
	"QUME_LETTERPRO_20",
	"HP_LASERJET",
	"HP_LASERJET_PLUS"
d37 1
a37 1
OpenPrinter()
d39 65
a103 6
	UWORD pType;
	LONG fontDir, prevCurrDir;
	char *s1; /* ptr to user selected printer file */
	char *s2; /* ptr to previously loaded printer file (may be NULL) */
	char *pFileName, *s3;
	ULONG special;
d105 4
a108 21
	GetPrefs(&(PD->pd_Preferences), sizeof(PD->pd_Preferences));
	pType = PD->pd_Preferences.PrinterType;
#if OPDEBUG
	kprintf("OP: pType=%ld\n", pType);
#endif
	if (pType < KNOWNPTYPES) {
		if (pType == 0) {
			s1 = pFileName = PD->pd_Preferences.PrinterFilename;
		}
		else {
			s1 = pFileName = printKnownNames[pType];
		}
	}
	else {
		return(IOERR_OPENFAIL);
	}
	if(*s1 == '\0') {
		return(IOERR_OPENFAIL); /* for null custom printer */
	}
	special = 0;
	GetSpecialDensity(&special);
d110 32
a141 30
	if (strcmpnc(s1, s2) == 0) { /* names match, printer file already open */
		OpenAlpha(1);
		if (PD->pd_SegmentData->ps_Version >= 35) { /* if >= V1.3 */
			PED->ped_PrintMode = 0; /* clear mode flag (assume graphics) */
		}
		/* init special stuff (density, etc.) */
		/* the 5th parameter here is for V1.0 compatability */
		(*(PED->ped_Render))(0, special, 0, 5, special);
#if OPDEBUG
		kprintf("OP: _RPL=%lx, _rp2rp=%lx\n", &ReadPixelLine(), &rp2rp());
#endif DEBUGOP
		return(0);
	}
	/* if this far then loading a new printer specific file */
	if (PD->pd_PrinterSegment != 0) { /* if previously loaded a segment */
		UnLoadSeg(PD->pd_PrinterSegment); /* unload old segment */
		PD->pd_PrinterSegment = 0; /* flag no segment loaded */
		PD->pd_PrinterType = -1; /* flag no printer loaded */
	}
	if ((fontDir = Lock("DEVS:printers", SHARED_LOCK)) != 0) {
		prevCurrDir = CurrentDir(fontDir);
		/* load printer specific segment */
		PD->pd_PrinterSegment = (BPTR)LoadSeg(pFileName);
		if (PD->pd_SegmentData = (struct PrinterSegment *)
			((ULONG)(PD->pd_PrinterSegment) << 2)) { /* if loaded */
			PED = &(PD->pd_SegmentData->ps_PED);
			(*(PED->ped_Init))(PD); /* init printer specific code */
			OpenAlpha(0);
			PD->pd_PrinterType = pType;
			s2 = LoadedPrinterFile;
d143 11
a153 10
			s3 = pFileName; /* use the name of the file we just loaded */
			while (*s2++ = *s3++); /* ?????? */
			CurrentDir(prevCurrDir);
			UnLock(fontDir);
			if (PD->pd_SegmentData->ps_Version >= 35) { /* if >= V1.3 */
				PED->ped_PrintMode = 0; /* clear mode flag (assume gfx) */
			}
			/* init special stuff (density, etc.) */
			/* the 5th parameter here is for V1.0 compatability */
			(*(PED->ped_Render))(0, special, 0, 5, special);
d155 3
a157 6
			kprintf("OP: _RPL=%lx, _rp2rp=%lx\n", ReadPixelLine, rp2rp);
#endif DEBUGOP
			return(0);
		}
		CurrentDir(prevCurrDir);
		UnLock(fontDir);
d159 6
a164 1
	return(IOERR_OPENFAIL);
d167 1
a167 1
ExpungePrinter()
d169 6
a174 4
	if (PD->pd_PrinterSegment != 0) { /* if we have one loaded */
		(*(PED->ped_Expunge))(); /* expunge it */
		UnLoadSeg(PD->pd_PrinterSegment); /* unload it */
	}
d177 2
a178 2
strcmpnc(s1, s2) /* string compare, no case */
char *s1, *s2;
d180 1
a180 1
	char c1, c2;
d182 21
a202 16
	do {
		c1 = *s1++;
		c2 = *s2++;
		if (c1 >= 'a' && c1 <= 'z') {
			c1 -= 0x20;
		}
		if (c2 >= 'a' && c2 <= 'z') {
			c2 -= 0x20;
		}
	} while (c1 == c2 && c1 && c2);
	if (c1 == c2) {
		return(0);
	}
	else {
		return(c1 == 0 ? -1 : 1);
	}
@


1.5
log
@added version check to PED->ped_PrintMode access, this makes the
printer device compatible with drivers that don't have this field.
V1.3 Gamma 8 check-in
@
text
@@


1.4
log
@V1.3 Gamma 5 release
@
text
@d64 3
a66 1
		PED->ped_PrintMode = 0; /* clear mode flag (assume graphics) */
d97 3
a99 1
			PED->ped_PrintMode = 0; /* clear mode flag (assume graphics) */
@


1.3
log
@fixed case 5 render call to incorporate special flags
added 2nd case 5 render call so that it gets called regardless of whether
a new printer driver get s loaded or not.  This assures that changes to
preferences get noticed in the case 5 render call.
V1.3 Gamma 4 release
@
text
@d68 3
d99 3
@


1.2
log
@added density init render call (case 5) after printer segment is loaded
V1.3 Gamma 3 release
@
text
@d38 1
d59 2
d65 3
d95 1
a95 1
			(*(PED->ped_Render))(0, 0, 0, 5, 0);
@


1.1
log
@fixed bug with accessing PED->ped_PrintMode prematurly
V1.3 gamma 1 check-in
@
text
@d87 3
@


1.0
log
@added to rcs
@
text
@a38 1
	PED->ped_PrintMode = 0; /* clear mode flag (assume graphics) */
d61 1
d86 1
@
