head     1.14;
branch   ;
access   ;
symbols  V38_4:1.12 V37_603:1.12 V36_603:1.12 V36_599:1.12 V36_596:1.12 V36_587:1.12 V36_579:1.11 V36_575:1.11 V36_573:1.11 V36_572:1.11 V36_570:1.8 L34_564:1.8 L34_563:1.8 L34_562:1.7 L35_560:1.7 L35_559:1.7 L35_558:1.7 L35_556:1.6 L35_548:1.6 L35_547:1.6 L35_544:1.6 L35_543:1.6 L35_541:1.6 L35_539:1.6 L35_534:1.6 L35_528:1.6 L35_522:1.6 L35_517:1.6;
locks    ; strict;
comment  @*   @;


1.14
date     92.04.24.10.27.53;  author darren;  state Exp;
branches ;
next     1.13;

1.13
date     92.01.28.14.25.01;  author davidj;  state Exp;
branches ;
next     1.12;

1.12
date     90.08.29.16.26.14;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     90.04.06.19.23.39;  author daveb;  state Exp;
branches ;
next     1.10;

1.10
date     90.03.12.14.39.28;  author daveb;  state Exp;
branches ;
next     1.9;

1.9
date     90.03.12.14.34.11;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.10.24.14.29.58;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.06.07.19.51.21;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.01.30.12.34.18;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.12.21.16.40.09;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.12.21.11.51.05;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.16.18.11;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.33.00;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.09.06.52.12;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.22.46;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.14
log
@make compiler happy
@
text
@#include <exec/types.h>
#include <exec/errors.h>
#include <graphics/rastport.h>

#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>

#include "printer.h"
#include "prtbase.h"
#include "prtgfx.h"
#include "internal.h"

#include "printer_iprotos.h"

#define DEBUG0		0	/* general debuging */
#define FREEDEBUG	0	/* debugging of freed memory */

int Backout(error, ior, PInfo)
int error; /* the reason why we are here */
struct IODRPReq *ior;  /* pointer to the input request */
struct PrtInfo *PInfo; /* all kinds of useful info */
{
	extern void FreeMem();

	struct RastPort *rp;
	struct BitMap *bm;
	UBYTE *mem;
	BYTE err;

#if DEBUG0
	extern struct PrinterData *PD;

	kprintf(
		"BO: enter, PrintBuf=%08lx, flags=%08lx\n", PD->pd_PrintBuf, PInfo->pi_flags);
#endif
	if ((err = error) == PDERR_TOOKCONTROL) { /* if special abort error */

#if DEBUG0
		kprintf("BO: err was TOOKCONTROL, switching to NOERR\n");
#endif

		err = PDERR_NOERR; /* pretend that there was no error */
	}
	/* fix up any vars the driver may have temporarely altered */
#if DEBUG0
	kprintf("BO: calling render to fix up vars\n");
#endif
	(*PInfo->pi_render)(0, 0, 0, 7);

	/* release any memory we may have allocated */
	if ((rp = PInfo->pi_temprp) != NULL) { /* if we allocated this */
		if ((bm = rp->BitMap) != NULL) { /* if we allocated this */
			if ((mem = bm->Planes[0]) != NULL) { /* if we allocated this */
#if FREEDEBUG
				kprintf("BO: freeing %ld bytes for Planes @@ %lx\n",
					bm->BytesPerRow * bm->Depth, mem);
#endif
				FreeMem(mem, bm->BytesPerRow * bm->Depth);
			}
#if FREEDEBUG
			kprintf("BO: freeing %ld bytes for bm @@ %lx\n",
				sizeof(struct BitMap) + bm->Depth * sizeof(PLANEPTR), bm);
#endif
			FreeMem(bm, sizeof(struct BitMap) + bm->Depth * sizeof(PLANEPTR));
		}
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for rp @@ %lx\n",
			sizeof(struct RastPort), rp);
#endif
		FreeMem(rp, sizeof(struct RastPort));
	}
	if (PInfo->pi_ColorMap != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for ColorMap @@ %lx\n",
			PInfo->pi_ColorMapSize, PInfo->pi_ColorMap);
#endif
		FreeMem(PInfo->pi_ColorMap, PInfo->pi_ColorMapSize); /* release the mem */
	}
	if (PInfo->pi_RowBuf != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for RowBuf @@ %lx\n",
			PInfo->pi_RowBufSize, PInfo->pi_RowBuf);
#endif
		FreeMem(PInfo->pi_RowBuf, PInfo->pi_RowBufSize); /* release the mem */
	}

	if (PInfo->pi_TopBuf != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for TopBuf @@ %lx\n",
			PInfo->pi_RowBufSize, PInfo->pi_TopBuf);
#endif
		FreeMem(PInfo->pi_TopBuf, PInfo->pi_RowBufSize); /* release the mem */
	}
	if (PInfo->pi_BotBuf != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for BotBuf @@ %lx\n",
			PInfo->pi_RowBufSize, PInfo->pi_BotBuf);
#endif
		FreeMem(PInfo->pi_BotBuf, PInfo->pi_RowBufSize); /* release the mem */
	}

	if (PInfo->pi_Dest1Int != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for Dest1Int @@ %lx\n",
			PInfo->pi_Dest1IntSize, PInfo->pi_Dest1Int);
#endif
		FreeMem(PInfo->pi_Dest1Int, PInfo->pi_Dest1IntSize); /* release mem */
	}
	if (PInfo->pi_Dest2Int != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for Dest2Int @@ %lx\n",
			PInfo->pi_Dest2IntSize, PInfo->pi_Dest2Int);
#endif
		FreeMem(PInfo->pi_Dest2Int, PInfo->pi_Dest2IntSize); /* release mem */
	}

	if (PInfo->pi_ColorInt != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for ColorInt @@ %lx\n",
			PInfo->pi_ColorIntSize, PInfo->pi_ColorInt);
#endif
		FreeMem(PInfo->pi_ColorInt, PInfo->pi_ColorIntSize); /* release the mem */
	}
	if (PInfo->pi_HamInt != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for HamInt @@ %lx\n",
			PInfo->pi_HamIntSize, PInfo->pi_HamInt);
#endif
		FreeMem(PInfo->pi_HamInt, PInfo->pi_HamIntSize); /* release the mem */
	}
	if (PInfo->pi_HamBuf != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for HamBuf @@ %lx\n",
			PInfo->pi_HamBufSize, PInfo->pi_HamBuf);
#endif
		FreeMem(PInfo->pi_HamBuf, PInfo->pi_HamBufSize); /* release the mem */
	}
	if (PInfo->pi_ScaleX != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for ScaleX @@ %lx\n",
			PInfo->pi_ScaleXSize, PInfo->pi_ScaleX);
#endif
		FreeMem(PInfo->pi_ScaleX, PInfo->pi_ScaleXSize); /* release the mem */
	}
	if (PInfo->pi_ScaleXAlt != NULL) { /* if we allocated this */
#if FREEDEBUG
		kprintf("BO: freeing %ld bytes for ScaleXAlt @@ %lx\n",
			PInfo->pi_ScaleXAltSize, PInfo->pi_ScaleXAlt);
#endif
		FreeMem(PInfo->pi_ScaleXAlt, PInfo->pi_ScaleXAltSize);
	}
	if (PInfo->pi_flags & PRT_RENDER0) { /* if allocated this */
#if DEBUG0
		kprintf("BO: freeing up render mem\n");
#endif
		(*PInfo->pi_render)(err, PInfo->pi_special, 0, 4); /* release the mem */
	}
	ior->io_Error = err; /* set error code for calling application */
#if DEBUG0
	kprintf("BO: error=%ld, err=%ld, ior=%lx, PInfo=%lx  ",
		error, err, ior, PInfo);
	if (err == PDERR_NOERR) {
		kprintf("BO: PDERR_NOERR  ");
	}
	else if (err == PDERR_CANCEL) {
		kprintf("BO: PDERR_CANCEL  ");
	}
	else if (err == IOERR_ABORTED) {
		kprintf("BO: IOERR_ABORTED  ");
	}
	else if (err == PDERR_BUFFERMEMORY) {
		kprintf("BO: PDERR_BUFFERMEMORY");
	}
	else if (err == PDERR_INTERNALMEMORY) {
		kprintf("BO: PDERR_INTERNALMEMORY");
	}
	else if (err == PDERR_BADDIMENSION) {
		kprintf("BO: PDERR_BADDIMENSION");
	}
	else if (err == PDERR_NOTGRAPHICS) {
		kprintf("BO: PDERR_NOTGRAPHICS");
	}
	kprintf(" BO: exit\n");
#endif DEBUG0
	return((int)err);
}
@


1.13
log
@compiled native
@
text
@d186 1
a186 1
	return(err);
@


1.12
log
@kprintf() found outside of
conditional DEBUG code.
@
text
@d5 4
d14 3
a16 1
#define DEBUG		0	/* general debuging */
d31 1
a31 1
#if DEBUG
d39 1
a39 1
#if DEBUG
d46 1
a46 1
#if DEBUG
d50 1
a50 1
	
d154 1
a154 1
#if DEBUG
d160 1
a160 1
#if DEBUG
d185 1
a185 1
#endif DEBUG
@


1.11
log
@for rcs 4.x header change
@
text
@d32 2
d35 2
@


1.10
log
@accidentely left debugging on
@
text
@@


1.9
log
@added some debugging.
@
text
@d10 2
a11 2
#define DEBUG		1	/* general debuging */
#define FREEDEBUG	1	/* debugging of freed memory */
@


1.8
log
@added 'case 7' call in error.c
@
text
@d10 2
a11 2
#define DEBUG	0
#define DEBUG2	0
d29 1
a29 1
		"PrintBuf=%08lx, flags=%08lx\n", PD->pd_PrintBuf, PInfo->pi_flags);
d32 1
d45 2
a46 2
#if DEBUG2
				kprintf("freeing %ld bytes for Planes @@ %lx\n",
d51 2
a52 2
#if DEBUG2
			kprintf("freeing %ld bytes for bm @@ %lx\n",
d57 2
a58 2
#if DEBUG2
		kprintf("freeing %ld bytes for rp @@ %lx\n",
d64 2
a65 2
#if DEBUG2
		kprintf("freeing %ld bytes for ColorMap @@ %lx\n",
d71 2
a72 2
#if DEBUG2
		kprintf("freeing %ld bytes for RowBuf @@ %lx\n",
d79 2
a80 2
#if DEBUG2
		kprintf("freeing %ld bytes for TopBuf @@ %lx\n",
d86 2
a87 2
#if DEBUG2
		kprintf("freeing %ld bytes for BotBuf @@ %lx\n",
d94 2
a95 2
#if DEBUG2
		kprintf("freeing %ld bytes for Dest1Int @@ %lx\n",
d101 2
a102 2
#if DEBUG2
		kprintf("freeing %ld bytes for Dest2Int @@ %lx\n",
d109 2
a110 2
#if DEBUG2
		kprintf("freeing %ld bytes for ColorInt @@ %lx\n",
d116 2
a117 2
#if DEBUG2
		kprintf("freeing %ld bytes for HamInt @@ %lx\n",
d123 2
a124 2
#if DEBUG2
		kprintf("freeing %ld bytes for HamBuf @@ %lx\n",
d130 2
a131 2
#if DEBUG2
		kprintf("freeing %ld bytes for ScaleX @@ %lx\n",
d137 2
a138 2
#if DEBUG2
		kprintf("freeing %ld bytes for ScaleXAlt @@ %lx\n",
d154 3
a157 3
	}
	else if (err == PDERR_NOERR) {
		kprintf("BO: PDERR_NOERR  ");
@


1.7
log
@V1.3 Gamma 16
@
text
@d34 6
@


1.6
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@@


1.5
log
@V1.3 Gamma 5 release
@
text
@d122 14
@


1.4
log
@changed special case 0 error code to 'PDERR_TOOKCOTROL'
V1.3 Gamma 5 release
@
text
@d128 1
d132 2
a133 42
#endif
	switch (err) {
		case PDERR_CANCEL: /* user cancelled */
#if DEBUG
			kprintf("BO: PDERR_CANCEL  ");
#endif
		case PDERR_NOERR: /* no error */
#if DEBUG
			if (err == PDERR_NOERR) {
				kprintf("BO: PDERR_NOERR  ");
			}
#endif
		case IOERR_ABORTED: /* stopped via an AbortIO */
#if DEBUG
			if (err == IOERR_ABORTED) {
				kprintf("BO: IOERR_ABORTED  ");
			}
#endif
		case PDERR_BUFFERMEMORY:
#if DEBUG
			if (err == PDERR_BUFFERMEMORY) {
				kprintf("BO: PDERR_BUFFERMEMORY");
			}
#endif
		case PDERR_INTERNALMEMORY:
#if DEBUG
			if (err == PDERR_INTERNALMEMORY) {
				kprintf("BO: PDERR_INTERNALMEMORY");
			}
#endif
		case PDERR_BADDIMENSION:
#if DEBUG
			if (err == PDERR_BADDIMENSION) {
				kprintf("BO: PDERR_BADDIMENSION");
			}
#endif
		case PDERR_NOTGRAPHICS:
#if DEBUG
			if (err == PDERR_NOTGRAPHICS) {
				kprintf("BO: PDERR_NOTGRAPHICS");
			}
#endif
d135 18
a152 2
	ior->io_Error = err; /* set error code for calling application */
#if DEBUG
d154 1
a154 1
#endif
@


1.3
log
@V1.3 gamma 1 check-in
@
text
@d31 1
a31 1
	if ((err = error) == IOERR_NOCMD) { /* if special abort error */
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d70 31
@


1.1
log
@V1.3 beta 3 release
@
text
@d7 2
a8 1
#include "prtprivate.h"
d28 2
a29 1
	kprintf("PrintBuf=%08lx, flags=%08lx\n", PD->pd_PrintBuf, PInfo->flags);
d35 1
a35 1
	if ((rp = PInfo->temprp) != NULL) { /* if we allocated this */
d56 1
a56 1
	if (PInfo->ColorMap != NULL) { /* if we allocated this */
d59 1
a59 1
			PInfo->ColorMapSize, PInfo->ColorMap);
d61 1
a61 1
		FreeMem(PInfo->ColorMap, PInfo->ColorMapSize); /* release the mem */
d63 1
a63 1
	if (PInfo->RowBuf != NULL) { /* if we allocated this */
d66 1
a66 1
			PInfo->RowBufSize, PInfo->RowBuf);
d68 1
a68 1
		FreeMem(PInfo->RowBuf, PInfo->RowBufSize); /* release the mem */
d70 1
a70 1
	if (PInfo->ColorInt != NULL) { /* if we allocated this */
d73 1
a73 1
			PInfo->ColorIntSize, PInfo->ColorInt);
d75 1
a75 1
		FreeMem(PInfo->ColorInt, PInfo->ColorIntSize); /* release the mem */
d77 1
a77 1
	if (PInfo->HamInt != NULL) { /* if we allocated this */
d80 1
a80 1
			PInfo->HamIntSize, PInfo->HamInt);
d82 1
a82 1
		FreeMem(PInfo->HamInt, PInfo->HamIntSize); /* release the mem */
d84 1
a84 1
	if (PInfo->HamBuf != NULL) { /* if we allocated this */
d87 1
a87 1
			PInfo->HamBufSize, PInfo->HamBuf);
d89 1
a89 1
		FreeMem(PInfo->HamBuf, PInfo->HamBufSize); /* release the mem */
d91 1
a91 1
	if (PInfo->flags & PRT_RENDER0) { /* if allocated this */
d95 1
a95 1
		(*PInfo->render)(err, PInfo->special, 0, 4); /* release the mem */
@


1.0
log
@added to rcs
@
text
@d27 1
a27 1
	kprintf("PrintBuf=%08lx, flags=%08lx", PD->pd_PrintBuf, PInfo->flags);
d54 7
a67 7
	if (PInfo->HamBuf != NULL) { /* if we allocated this */
#if DEBUG2
		kprintf("freeing %ld bytes for HamBuf @@ %lx\n",
			PInfo->HamBufSize, PInfo->HamBuf);
#endif
		FreeMem(PInfo->HamBuf, PInfo->HamBufSize); /* release the mem */
	}
d82 1
a82 1
	if (PInfo->ColorMap != NULL) { /* if we allocated this */
d84 2
a85 2
		kprintf("freeing %ld bytes for ColorMap @@ %lx\n",
			PInfo->ColorMapSize, PInfo->ColorMap);
d87 1
a87 1
		FreeMem(PInfo->ColorMap, PInfo->ColorMapSize); /* release the mem */
@
