head     1.12;
branch   ;
access   ;
symbols  V38_4:1.9 V37_603:1.9 V36_603:1.9 V36_599:1.9 V36_596:1.9 V36_587:1.9 V36_579:1.9 V36_575:1.9 V36_573:1.9 V36_572:1.9 V36_570:1.8 L34_564:1.8 L34_563:1.8 L34_562:1.8 L35_560:1.8 L35_559:1.8 L35_558:1.8 L35_556:1.8 L35_548:1.8 L35_547:1.8 L35_544:1.8 L35_543:1.8 L35_541:1.8 L35_539:1.8 L35_534:1.8 L35_528:1.7 L35_522:1.7 L35_517:1.7;
locks    ; strict;
comment  @*   @;


1.12
date     92.04.24.08.53.41;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     92.04.23.15.08.15;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     92.01.28.14.20.46;  author davidj;  state Exp;
branches ;
next     1.9;

1.9
date     90.04.06.19.24.11;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.03.08.17.42.02;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.01.30.12.08.30;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     87.12.21.11.00.01;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.11.17.11.13.47;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.29.03.25.09;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.55.49;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.34.09;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.07.14.28.00;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.08.21.17.23.24;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2 release
@


1.12
log
@Cast / make compiler happy
@
text
@#include <exec/types.h>
#include <graphics/rastport.h>

#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>

#include "printer.h"
#include "prtbase.h"
#include "prtgfx.h"
#include "internal.h"

#include "printer_iprotos.h"

#define CPDEBUG	0
#define TPDEBUG	0
#define CBDEBUG	0
#define CMDEBUG	0

/*
	Initialize the Ham array to RGB values.
	(this allows any xstart,ystart Ham picture to be printed)
*/
InitHamArray(PInfo)
struct PrtInfo *PInfo;
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	UWORD *HamBuf;
	union colorEntry *cm, *ArrayInt, oldcolor;
	struct RastPort *rp;
	WORD x, xend, y, yend, yinc;
	int color, color2, additive;

	int HamNormal;
	int HamMBlue;
	int HamMRed;
	int HamShift;

	cm = PInfo->pi_ColorMap;
	rp = PInfo->pi_rp;
	additive = (PED->ped_ColorClass & PCC_ADDITIVE) ? 0 : 15;
	additive ^= (PD->pd_Preferences.PrintImage == IMAGE_NEGATIVE) ? 15 : 0;

	if(rp->BitMap->Depth <= 6)
	{
		HamShift = 0;
		HamNormal = 16;
		HamMBlue = 32;
		HamMRed = 48;
	}
	else
	{
		HamShift = 2;		/* reduce to 4 bits */
		HamNormal = 64;
		HamMBlue = 128;
		HamMRed = 192;
	}


	if (PInfo->pi_flags & PRT_INVERT) { /* inverted */
		ArrayInt = PInfo->pi_ColorInt;
		y = PInfo->pi_xstart;
		yend = y - PInfo->pi_width;
		yinc = -1;
		xend = PInfo->pi_ystart;
	}
	else { /* non-inverted */
		ArrayInt = PInfo->pi_HamInt;
		y = PInfo->pi_ystart;
		yend = y + PInfo->pi_height;
		yinc = 1;
		xend = PInfo->pi_xstart;
	}

	if (xend) { /* if not starting at left edge */
		for (; y != yend; y += yinc) { /* for each row */
			oldcolor.colorLong = cm->colorLong; /* init to background color */
			HamBuf = PInfo->pi_HamBuf; /* read entire line into HamBuf */
			ReadPixelLine(PInfo->pi_rp, 0, y, xend, HamBuf, PInfo->pi_temprp,
					PInfo->pi_flags & PRT_NOBLIT);
			/* compute color of first used pixel */
			for (x=0; x<xend; x++) {
				/* get color lookup code */
				if ((color = *HamBuf++) < HamNormal ) { /* normal lookup */
					oldcolor.colorLong = (cm + color)->colorLong;
				}
				else { /* modify one of the color components */
					color2 = ((color >> HamShift) & 0x0f) ^ additive;
					if (color < HamMBlue) { /* modify blue/yellow */
						oldcolor.colorByte[PCMYELLOW] = color2;
					}
					else if (color < HamMRed) { /* modify red/cyan */
						oldcolor.colorByte[PCMCYAN] = color2;
					}
					else { /* modify green/magenta */
						oldcolor.colorByte[PCMMAGENTA] = color2;
					}
				}
			}
			/* calculate black */
			GetBlack(&oldcolor, PInfo->pi_flags);
			ArrayInt->colorLong = oldcolor.colorLong; /* save pixel color */
			ArrayInt++;
		}
	}
	else { /* starting at left edge (simple case) */
		for (; y != yend; y += yinc) { /* for each row */
			/* init to background color */
			ArrayInt->colorLong = cm->colorLong;
			/* calculate black */
			GetBlack((union ColorEntry *)&ArrayInt->colorLong, PInfo->pi_flags);
			ArrayInt++; /* go on to next row */
		}
	}
}

/*
	Converts a row of pixels to hedley scan convert mode
*/
ScanConvertPixelArray(PInfo, y)
struct PrtInfo *PInfo;
UWORD y;
{
	union colorEntry *ColorInt;
	UWORD width, color;

	ColorInt = PInfo->pi_ColorInt;
	width = PInfo->pi_width;
	do {
		if (y & 1) { /* odd lines */
			color = (ColorInt->colorByte[PCMMAGENTA] & 8) ? 2 : 0;
			color |= (ColorInt->colorByte[PCMYELLOW] & 1) ? 1 : 0;
		}
		else { /* even lines */
			color = (ColorInt->colorByte[PCMCYAN] & 8) ? 2 : 0;
			color |= (ColorInt->colorByte[PCMYELLOW] & 8) ? 1 : 0;
		}
		if (color == 1) { /* kludge to an even number */
			ColorInt->colorByte[PCMBLACK] = 6;
		}
		else {
			ColorInt->colorByte[PCMBLACK] = color * 4 + color; /* x5 */
		}
		ColorInt++;
	} while (--width);
}

/*
	Converts a row of pixels (stored as indexes into color registers)
	into color intensities.
*/
ConvertPixelArray(PInfo, y, sum)
struct PrtInfo *PInfo;
UWORD y;
int sum;
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	UWORD *RowBuf; /* row of color indecies */
	union colorEntry *cm, *ColorInt, oldcolor, *HamInt;
	UWORD color, color2, width;
	int additive;

	int HamNormal;
	int HamShift;

	cm = PInfo->pi_ColorMap;
	width = PInfo->pi_width;
	RowBuf = PInfo->pi_RowBuf;
	ColorInt = PInfo->pi_ColorInt;
	HamInt = PInfo->pi_HamInt;
	additive = (PED->ped_ColorClass & PCC_ADDITIVE) ? 0 : 15;
	additive ^= (PD->pd_Preferences.PrintImage == IMAGE_NEGATIVE) ? 15 : 0;


	if(PInfo->pi_rp->BitMap->Depth <= 6)
	{
		HamShift = 0;
		HamNormal = 16;
	}
	else
	{
		HamShift = 2;		/* reduce to 4 bits */
		HamNormal = 64;
	}



#if CPDEBUG
	kprintf("CPA: PInfo=$%lx, y=%ld, flags=$%lx, width=%ld",
		PInfo, y, PInfo->pi_flags, width);
#endif
	if (PInfo->pi_flags & PRT_HAM) { /* ham picture */
#if CPDEBUG
		kprintf("HAM, ");
#endif
		if (!(PInfo->pi_flags & PRT_INVERT)) {
			oldcolor.colorLong = (PInfo->pi_HamInt + y)->colorLong;
		}
		if (sum) {
			do {
				if (PInfo->pi_flags & PRT_INVERT) {
					oldcolor.colorLong = ColorInt->colorLong;
				}
				color = *RowBuf++; /* get color lookup code */
				if (color < HamNormal) { /* normal lookup */
					oldcolor.colorLong = (cm + color)->colorLong;
				}
				else { /* modify one of the color components */
					color2 = ((color >> HamShift) & 0x0f) ^ additive;
					switch(color >> (HamShift+4)) {
						case 1 : /* modify blue/yellow */
							oldcolor.colorByte[PCMYELLOW] = color2;
							break;
						case 2 : /* modify red/cyan */
							oldcolor.colorByte[PCMCYAN] = color2;
							break;
						default : /* modify green/magenta */
							oldcolor.colorByte[PCMMAGENTA] = color2;
							break;
					}
					/* re-calculate black */
					GetBlack(&oldcolor, PInfo->pi_flags);
				}
				ColorInt->colorLong += oldcolor.colorLong;
				ColorInt++;
			} while (--width);
		}
		else {
			do {
				if (PInfo->pi_flags & PRT_INVERT) {
					oldcolor.colorLong = ColorInt->colorLong;
				}
				color = *RowBuf++; /* get color lookup code */
				if (color < HamNormal) { /* normal lookup */
					oldcolor.colorLong = (cm + color)->colorLong;
				}
				else { /* modify one of the color components */
					color2 = ((color >> HamShift)& 0x0f) ^ additive;
					switch(color >> (HamShift+4)) {
						case 1 : /* modify blue/yellow */
							oldcolor.colorByte[PCMYELLOW] = color2;
							break;
						case 2 : /* modify red/cyan */
							oldcolor.colorByte[PCMCYAN] = color2;
							break;
						default : /* modify green/magenta */
							oldcolor.colorByte[PCMMAGENTA] = color2;
							break;
					}
					/* re-calculate black */
					GetBlack(&oldcolor, PInfo->pi_flags);
				}
				ColorInt->colorLong = oldcolor.colorLong;
				ColorInt++;
			} while (--width);
		}
	}
	else { /* non HAM picture */
#if CPDEBUG
		kprintf("!HAM, ");
#endif
		if (sum) {
			do {
				ColorInt->colorLong += (cm + *RowBuf++)->colorLong;
				ColorInt++;
			} while (--width);
		}
		else {
			do {
				ColorInt->colorLong = (cm + *RowBuf++)->colorLong;
				ColorInt++;
			} while (--width);
		}
	}
#if CPDEBUG
	kprintf("CPA: exit\n");
#endif
}

/*
	Compact an entire row of pixels; used for x reductions.
*/
CompactPixelArray(PInfo, sytotal)
struct PrtInfo *PInfo; /* printer info */
UWORD sytotal;
{
	union colorEntry *ColorInt1, *ColorInt2;
	UWORD width, sx, sx1, sx2, *sxptr;
	UWORD Black, Yellow, Magenta, Cyan;

	width = PInfo->pi_width;
	ColorInt1 = ColorInt2 = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
#if CMDEBUG
	kprintf("CM: width=%ld, sytotal=%ld, ", width, sytotal);
#endif CMDEBUG
	/* if color OR non-color and printer has no black */
	if ((PInfo->pi_flags & PRT_BW_BLACKABLE) != PRT_BW_BLACKABLE) {
		do {
			Black = Yellow = Magenta = Cyan = 0;
			sx = sx2 = *sxptr++;
			do {
				/* get color info */
				Black += ColorInt1->colorByte[PCMBLACK];
				Yellow += ColorInt1->colorByte[PCMYELLOW];
				Magenta += ColorInt1->colorByte[PCMMAGENTA];
				Cyan += ColorInt1->colorByte[PCMCYAN];
				ColorInt1++;
			} while (--sx2);
			/* average color values */
			sx1 = sx + sytotal;
			sx2 = sx1 >> 1;
			ColorInt2->colorByte[PCMBLACK] = (Black + sx2) / sx1;
			ColorInt2->colorByte[PCMYELLOW] = (Yellow + sx2) / sx1;
			ColorInt2->colorByte[PCMMAGENTA] = (Magenta + sx2) / sx1;
			ColorInt2->colorByte[PCMCYAN] = (Cyan + sx2) / sx1;
			ColorInt2++;
			width -= sx;
		} while (width);
	}
	else { /* non-color and printer has black */
		do {
			Black = 0;
			sx = sx2 = *sxptr++;
			do {
				/* get color info */
				Black += ColorInt1->colorByte[PCMBLACK];
				ColorInt1++;
			} while (--sx2);
			/* average color values */
			sx1 = sx + sytotal;
			ColorInt2->colorByte[PCMBLACK] = (Black + (sx1 >> 1)) / sx1;
			ColorInt2++;
			width -= sx;
		} while (width);
	}
	Force1to1Scaling(PInfo);
}

/*
	Transfer an entire pixel row to the render routine.  This is done by
	scaling, dithering/thresholding and conditionally rendering each pixel.
*/
TransferPixelArray(ypos, PInfo, pass)
UWORD ypos; /* row number */
struct PrtInfo *PInfo; /* printer info */
int pass;
{
	extern struct PrinterData *PD;

	union colorEntry *ColorInt;
	UWORD xpos, sx, *sxptr, width;
	UBYTE Black, Yellow, Magenta, Cyan; /* color intensity values */
	int (*render)();
	UBYTE threshold15, threshold, blackable, dvalue, *dmatrix;

	render = PInfo->pi_render;
#if TPDEBUG
kprintf("TPA: ypos=%ld, PInfo=$%lx, flags=$%lx, render=$%lx, Ver=%ld, Rev=%ld",
	ypos, PInfo, PInfo->pi_flags, render, PD->pd_SegmentData->ps_Version,
	PD->pd_SegmentData->ps_Revision);
#endif

	/* if a V1.3 or greater driver */
	if (PD->pd_SegmentData->ps_Version >= 35) {
#if TPDEBUG
		kprintf("calling render once for entire line, ");
#endif
		(*render)(PInfo, pass, ypos, 1);
		return;
	}

#if TPDEBUG
	kprintf("TPA: Ver=%ld, Rev=%ld, <35\n", PD->pd_SegmentData->ps_Version,
		PD->pd_SegmentData->ps_Revision);
#endif
	dmatrix = PInfo->pi_dmatrix + ((ypos & 3) << 2);
	sxptr = PInfo->pi_ScaleX;
	threshold = PInfo->pi_threshold;
	threshold15 = threshold ^ 15;
	xpos = PInfo->pi_xpos;
	width = PInfo->pi_width;
	ColorInt = PInfo->pi_ColorInt;
	blackable = PInfo->pi_flags & PRT_BLACKABLE;

	 /* if non-color and printer has black */
	if ((PInfo->pi_flags & PRT_BW_BLACKABLE) == PRT_BW_BLACKABLE) {
#if TPDEBUG
		kprintf("non-color & printer has black, ");
#endif
		if (threshold) { /* thresholding */
#if TPDEBUG
			kprintf("thresholding, ");
#endif
			do { /* for each source column */
				sx = *sxptr++;
				/* get color info, if not null */
				if (Black = ColorInt->colorByte[PCMBLACK]) {
					/* scale, threshold, and render pixel */
					do { /* use this pixel 'sx' times */
						if (Black > threshold15) {
							(*render)(0, xpos, ypos, 1); /* render black */
						}
						++xpos; /* done 1 more printer pixel */
					} while (--sx);
				}
				else {
					xpos += sx; /* done sx more printer pixels */
				}
				ColorInt++;
			} while (--width);
		}
		else { /* not thresholding (ie. dithering) */
#if TPDEBUG
			kprintf("dithering, ");
#endif
			do { /* for each source column */
				sx = *sxptr++;
				/* get color info, if not null */
				if (Black = ColorInt->colorByte[PCMBLACK]) {
					/* scale, dither, and render pixel */
					do { /* use this pixel 'sx' times */
						if (Black > *(dmatrix + (xpos & 3))) {
							(*render)(0, xpos, ypos, 1); /* render black */
						}
						++xpos; /* done 1 more printer pixel */
					} while (--sx);
				}
				else {
					xpos += sx; /* done sx more printer pixels */
				}
				ColorInt++;
			} while (--width);
		}
	}
	else { /* color OR non-color and printer has no black */
#if TPDEBUG
		kprintf("color OR non-color and printer has no black, ");
#endif
		if (threshold) { /* thresholding */
#if TPDEBUG
			kprintf("thresholding, ");
#endif
			do {
				/* get color info */
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				/* scale, threshold, and render pixel */
				sx = *sxptr++;
				do { /* use this pixel 'sx' times */
					if (Yellow > threshold15) {
						(*render)(1, xpos, ypos, 1); /* render yellow */
					}
					if (Magenta > threshold15) {
						(*render)(2, xpos, ypos, 1); /* render magenta */
					}
					if (Cyan > threshold15) {
						(*render)(3, xpos, ypos, 1); /* render cyan */
					}
					++xpos; /* done 1 more printer pixel */
				} while (--sx);
				ColorInt++;
			} while (--width);
		}
		else { /* not thresholding (ie. dithering) */
#if TPDEBUG
			kprintf("dithering, ");
#endif
			do { /* for each source column */
				/* get color info */
				Black = ColorInt->colorByte[PCMBLACK];
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				/* scale, dither, and render pixel */
				sx = *sxptr++;
				do { /* use this pixel 'sx' times */
					/* get dither value */
					dvalue = *(dmatrix + (xpos & 3));
					if (blackable && Black > dvalue) {
						(*render)(0, xpos, ypos, 1); /* render black */
					}
					else { /* black not rendered */
						if (Yellow > dvalue) {
							(*render)(1, xpos, ypos, 1); /* render yellow */
						}
						if (Magenta > dvalue) {
							(*render)(2, xpos, ypos, 1); /* render magenta */
						}
						if (Cyan > dvalue) {
							(*render)(3, xpos, ypos, 1); /* render cyan */
						}
					}
					++xpos; /* done 1 more printer pixel */
				} while (--sx);
				ColorInt++;
			} while (--width);
		}
	}
#if TPDEBUG
	kprintf("TPA: exit\n");
#endif
}

CheckBuf(y, render, flag)
UWORD y;
int (*render)();
int flag;
{
	extern struct PrinterExtendedData *PED;

	UWORD mod;
	int err = 0;

	mod = y % PED->ped_NumRows;
#if CBDEBUG
	kprintf("CB: y=%ld, mod=%ld, flag=%ld ", y, mod, flag);
#endif
	/* if time to dump buffer OR we are forcing the issue */
	if ((!mod && !flag) || (mod && flag)) {
#if CBDEBUG
		kprintf("CB: DUMPED ");
#endif
		if (!mod) {
			mod = PED->ped_NumRows;
		}
		if ((err = (*render)(0, 0, mod, 2)) == 0) { /* dump it, if no error */
			(*render)(0, 0, 0, 3); /* clear and init buffer */
		}
	}
#if CBDEBUG
	kprintf("CB: exit\n");
#endif
	return(err);
}

GetBlack(ce, flags)
union colorEntry *ce;
UWORD flags;
{
	extern struct PrinterData *PD;

	UWORD black;

	/* if doing a non-color picture */
	if (PD->pd_Preferences.PrintShade != SHADE_COLOR) {
		/* white = red * .299 + green * .587 + blue * .114 */
		black = (ce->colorByte[PCMCYAN] * 77 +
			ce->colorByte[PCMMAGENTA] * 150 +
			ce->colorByte[PCMYELLOW] * 29 + 128) >> 8;
	}
	else { /* if doing a color picture */
		/* black is the minimum of ymc */
		black = ce->colorByte[PCMYELLOW];
		if (ce->colorByte[PCMMAGENTA] < black) {
			black = ce->colorByte[PCMMAGENTA];
		}
		if (ce->colorByte[PCMCYAN] < black) {
			black = ce->colorByte[PCMCYAN];
		}
	}

	if (PD->pd_Preferences.LaceWB & 128) { /* Hedley 4-color hi-res */
		black >>= 2;
		black = black * 4 + black; /* x5 */
	}

	ce->colorByte[PCMBLACK] = black;
}

SwapScaleX(PInfo) /* swap ScaleX and ScaleXAlt vars */
struct PrtInfo *PInfo;
{
	UWORD *ptr, size;

	ptr = PInfo->pi_ScaleX;
	PInfo->pi_ScaleX = PInfo->pi_ScaleXAlt;
	PInfo->pi_ScaleXAlt = ptr;
	size = PInfo->pi_ScaleXSize;
	PInfo->pi_ScaleXSize = PInfo->pi_ScaleXAltSize;
	PInfo->pi_ScaleXAltSize = size;
}

FixScalingVars(PInfo)
struct PrtInfo *PInfo;
{
	/* restore width and scalex array if we messed them up */
	if (PInfo->pi_width != PInfo->pi_tempwidth) {
		PInfo->pi_width = PInfo->pi_tempwidth;
		SwapScaleX(PInfo);
	}
}

Force1to1Scaling(PInfo)
struct PrtInfo *PInfo;
{
	/* force 1:1 scaling if we have not already */
	if (PInfo->pi_width == PInfo->pi_tempwidth) {
		PInfo->pi_width = PInfo->pi_pc - PInfo->pi_xpos;
		SwapScaleX(PInfo);
	}
}

SwapInts(PInfo) /* swap ColorInt and Dest1Int ptrs */
struct PrtInfo *PInfo;
{
	union colorEntry *ce;

	ce = PInfo->pi_ColorInt;
	PInfo->pi_ColorInt = PInfo->pi_Dest1Int;
	PInfo->pi_Dest1Int = ce;
}
@


1.11
log
@Code for 8 bit AA HAM mode support
 
Simple change so we understand a new range of true vs modified colors
for more than 6 bitplane HAM ... no intended change for 6 or less
bit HAM (incase someone was doing 5 bit HAM).  8 bit mode drops
2 least significant bits of modified r/g/b so we are still only
doing 12 bits of color ... argh, too deeply ingrained in printer.device
for this pass, and within the range of most printers.
@
text
@d113 1
a113 1
			GetBlack(&ArrayInt->colorLong, PInfo->pi_flags);
@


1.10
log
@compiled native
@
text
@d36 5
d46 16
d86 1
a86 1
				if ((color = *HamBuf++) < 0x10) { /* normal lookup */
d90 2
a91 2
					color2 = (color & 0x0f) ^ additive;
					if (color < 32) { /* modify blue/yellow */
d94 1
a94 1
					else if (color < 48) { /* modify red/cyan */
d167 3
d177 15
d209 1
a209 1
				if (color < 0x10) { /* normal lookup */
d213 2
a214 2
					color2 = (color & 0x0f) ^ additive;
					switch(color >> 4) {
d238 1
a238 1
				if (color < 0x10) { /* normal lookup */
d242 2
a243 2
					color2 = (color & 0x0f) ^ additive;
					switch(color >> 4) {
@


1.9
log
@for rcs 4.x header change
@
text
@d4 4
d13 2
d334 1
a334 1
		(*render)(PInfo, pass, ypos, 1);	
@


1.8
log
@fixed bug in Force1to1Scaling which didn't account for a non-zero xpos.
This would screw up aliased, f-s dither, or x reductions for centered
or left offsetted pictures.
@
text
@@


1.7
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@a139 3
#if CPDEBUG
	kprintf("CPA: PInfo=%lx, flags=%lx, ", PInfo, PInfo->pi_flags);
#endif
d147 4
a150 1

d318 1
a318 1
kprintf("TPA: ypos=%ld, PInfo=%lx, flags=%lx, render=%lx, Ver=%ld, Rev=%ld",
d559 1
a559 1
		PInfo->pi_width = PInfo->pi_pc;
@


1.6
log
@fixed bug in InitHamArray which had an incorrect call to ReadPixelLine
forgot to initialize width in ScanConvertPixelArray
V1.3 Gamma 5 release
@
text
@d247 1
a247 2
	UWORD width, sx, sx1, sx2, xmult, xmod;
	WORD etx, etx2;
d252 1
a252 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d254 1
a254 2
	kprintf("CM: width=%ld, xmult=%ld, xmod=%ld, etx=%ld, sytotal=%ld, ",
		width, xmult, xmod, etx, sytotal);
d260 1
a260 1
			sx = sx2 = Scale(xmult, xmod, etx2, &etx);
d283 1
a283 1
			sx = sx2 = Scale(xmult, xmod, etx2, &etx);
d296 1
a296 7
	PInfo->pi_width = ColorInt2 - PInfo->pi_ColorInt; /* set new width */
	PInfo->pi_xmult = 1;
	PInfo->pi_xmod = 0;
	PInfo->pi_etx = 1; /* force 1:1 x scaling */
#if CMDEBUG
	kprintf("width=%ld, exit\n", PInfo->pi_width);
#endif CMDEBUG
d311 1
a311 2
	UWORD xpos, sx, width, xmult, xmod;
	WORD etx, etx2;
d337 1
a337 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d355 1
a355 1
				sx = Scale(xmult, xmod, etx2, &etx);
d377 1
a377 1
				sx = Scale(xmult, xmod, etx2, &etx);
d409 1
a409 1
				sx = Scale(xmult, xmod,  etx2, &etx);
d436 1
a436 1
				sx = Scale(xmult, xmod, etx2, &etx);
d531 13
d547 1
a547 1
	/* restore width and x scaling vars if we messed them up */
d550 1
a550 3
		PInfo->pi_xmult = PInfo->pi_tempxmult;
		PInfo->pi_xmod = PInfo->pi_tempxmod;  
		PInfo->pi_etx = PInfo->pi_tempetx;    
d557 5
a561 4
	PInfo->pi_width = PInfo->pi_pc;
	PInfo->pi_xmult = 1;
	PInfo->pi_xmod = 0;
	PInfo->pi_etx = 1;
@


1.5
log
@converted a mod of 0 to PED->ped_NumRows in CheckBuf
V1.3 Gamma 3 release
@
text
@d35 1
a35 1
	if (PInfo->pi_flags & PRT_INVERT) {
d40 1
d42 1
a42 1
	else {
d47 1
d50 6
a55 13
	for (; y != yend; y += yinc) { /* for each row */
		oldcolor.colorLong = cm->colorLong; /* init to background color */
		/* compute x end position */
		if (PInfo->pi_flags & PRT_INVERT) {
			xend = PInfo->pi_ystart;
		}
		else {
			xend = PInfo->pi_xstart;
		}
		if (xend) { /* if not starting at left edge */
			/* read entire line into HamBuf */
			HamBuf = PInfo->pi_HamBuf;
			ReadPixelLine(PInfo->pi_rp, 0, y, xend, HamBuf, 0, PInfo->pi_temprp);
d75 4
a79 4
		/* re-calculate black */
		GetBlack(&oldcolor, PInfo->pi_flags);
		ArrayInt->colorLong = oldcolor.colorLong; /* save color of pixel */
		ArrayInt++;
d81 9
d103 1
d329 3
a331 2
	kprintf("TPA: ypos=%ld, PInfo=%lx, flags=%lx, render=%lx, ",
		ypos, PInfo, PInfo->pi_flags, render);
d343 4
@


1.4
log
@V1.3 Gamma 1 check-in (again)
@
text
@d487 3
@


1.3
log
@added support routines for aliasing and floyding
added support for hedley hi-res
V1.3 gamma 1 check-in
@
text
@@


1.2
log
@added partial support for Hedley HiRes
@
text
@d89 30
d524 2
a525 1
		black = (black >> 2) * 5;
d529 31
@


1.1
log
@changed 1.3 version check from 34 to 35.
@
text
@d6 2
a7 1
#include "prtprivate.h"
d30 2
a31 2
	cm = PInfo->ColorMap;
	rp = PInfo->rp;
d35 4
a38 4
	if (PInfo->flags & PRT_INVERT) {
		ArrayInt = PInfo->ColorInt;
		y = PInfo->xstart;
		yend = y - PInfo->width;
d42 3
a44 3
		ArrayInt = PInfo->HamInt;
		y = PInfo->ystart;
		yend = y + PInfo->height;
d51 2
a52 2
		if (PInfo->flags & PRT_INVERT) {
			xend = PInfo->ystart;
d55 1
a55 1
			xend = PInfo->xstart;
d59 2
a60 2
			HamBuf = PInfo->HamBuf;
			ReadPixelLine(PInfo->rp, 0, y, xend, HamBuf, 0, PInfo->temprp);
d82 1
a82 1
		GetBlack(&oldcolor, PInfo->flags);
d106 1
a106 1
	kprintf("CPA: PInfo=%lx, flags=%lx, ", PInfo, PInfo->flags);
d108 5
a112 5
	cm = PInfo->ColorMap;
	width = PInfo->width;
	RowBuf = PInfo->RowBuf;
	ColorInt = PInfo->ColorInt;
	HamInt = PInfo->HamInt;
d116 1
a116 1
	if (PInfo->flags & PRT_HAM) { /* ham picture */
d120 2
a121 2
		if (!(PInfo->flags & PRT_INVERT)) {
			oldcolor.colorLong = (PInfo->HamInt + y)->colorLong;
d125 1
a125 1
				if (PInfo->flags & PRT_INVERT) {
d146 1
a146 1
					GetBlack(&oldcolor, PInfo->flags);
d154 1
a154 1
				if (PInfo->flags & PRT_INVERT) {
d175 1
a175 1
					GetBlack(&oldcolor, PInfo->flags);
d216 5
a220 5
	width = PInfo->width;
	ColorInt1 = ColorInt2 = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
d226 1
a226 1
	if ((PInfo->flags & PRT_BW_BLACKABLE) != PRT_BW_BLACKABLE) {
d265 4
a268 4
	PInfo->width = ColorInt2 - PInfo->ColorInt; /* set new width */
	PInfo->xmult = 1;
	PInfo->xmod = 0;
	PInfo->etx = 1; /* force 1:1 x scaling */
d270 1
a270 1
	kprintf("width=%ld, exit\n", PInfo->width);
d292 1
a292 1
	render = PInfo->render;
d295 1
a295 1
		ypos, PInfo, PInfo->flags, render);
d307 5
a311 5
	dmatrix = PInfo->dmatrix + ((ypos & 3) << 2);
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	threshold = PInfo->threshold;
d313 4
a316 4
	xpos = PInfo->xpos;
	width = PInfo->width;
	ColorInt = PInfo->ColorInt;
	blackable = PInfo->flags & PRT_BLACKABLE;
d319 1
a319 1
	if ((PInfo->flags & PRT_BW_BLACKABLE) == PRT_BW_BLACKABLE) {
d492 5
@


1.0
log
@added to rcs
@
text
@d298 1
a298 1
	if (PD->pd_SegmentData->ps_Version >= 34) {
@
