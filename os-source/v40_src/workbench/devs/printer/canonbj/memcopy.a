;---------------------------------------------------------------------
; void * = MemCopy(void *, void *, long)   -- a faster version
; enddest+1 *           dest *, source *, count
;  a0                     a0      a1       d0
;---------------------------------------------------------------------

		XDEF	@MemCopy
		SECTION CODE
@MemCopy:
; a1 = from
; a0 = to
; d0 = count

;**************	cmp.l	a1,d1 ********** Changed per Wolf Faust Apr-21-92
		cmp.l	a1,a0
		beq nocopy		; no copy needed...
		cmp.l	#7,d0
		ble	finish		;* too small, don't bother with optimization

		move.l	a1,d1
		btst	#0,d1		;*  even or odd
		beq	ineven		;*  it's even already
		move.b	(a1)+,(a0)+	;*  now it's even
		subq.l	#1,d0
ineven:
		move.l	a0,d1
		btst	#0,d1		;*  how about output
		beq	outeven

outodd:
;     unfortunately, the output address is not word-aligned, so we will
;     load a long word, and store it as four bytes
		cmp.l	#7,d0
		ble	finish

		move.l	(a1)+,d1	;copy first longword
		move.b	d1,3(a0)
		lsr.w	#8,d1
		move.b	d1,2(a0)
		swap	d1
		move.b	d1,1(a0)
		lsr.w	#8,d1
		move.b	d1,(a0)
		addq.l	#4,a0
		move.l	(a1)+,d1	;now copy second longword
		move.b	d1,3(a0)
		lsr.w	#8,d1
		move.b	d1,2(a0)
		swap	d1
		move.b	d1,1(a0)
		lsr.w	#8,d1
		move.b	d1,(a0)
		addq.l	#4,a0
		subq.l	#8,d0		;decrease count by 8
		bra	outodd

outeven:
;		ideal situation; we can load and store longwords
		cmp.l	#15,d0
		ble	finish

		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		sub.l	#16,d0
		bra	outeven

finish:
		cmp.b	#0,d0
		ble     really
		move.b	(a1)+,(a0)+
		dbf	d0,finish

really:
		move.l	a0,d0	;return end of target address
		rts		;goodbye

nocopy:
		add.l a0,d0   ; calc and return end of target address
		addq.l  #1,d0
		rts

		END
