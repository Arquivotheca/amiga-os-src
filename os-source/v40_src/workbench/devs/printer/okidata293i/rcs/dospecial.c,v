head     1.5;
branch   ;
access   ;
symbols  V36_22:1.4 L35_20:1.4 L35_19:1.4 L35_17:1.3 L35_16:1.3 L35_15:1.3 L35_11:1.3;
locks    ; strict;
comment  @ * @;


1.5
date     90.04.06.20.13.14;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.05.18.11.46.16;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.42.03;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.24.53;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.24.08;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.5
log
@for rcs 4.x header change
@
text
@/* Okidata_292I special commands */

/****** printer.device/printers/Okidata_292I_special_functions ***********
 *
 *   NAME
 *   Okidata_292I special functions implemented:
 * 
 ************************************************************************/

#include	"exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

#define NUMINIT	22

extern struct PrinterData *PD;
extern char *CommandTable[];

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];

{
	int x, y;
	char *point, inchar;
	static unsigned char initMarg[] = "\033Xlr";
	/*
		Cmds are:

	    0 -  2	ESC%H		- stop italics
	    3 -  5	ESC-NULL	- stop underline
	    6 -  7	ESCF		- stop emphasized
	    8 - 10	ESCWNULL	- stop double width
	   11 - 12	ESCH		- stop enhanced
	   13 - 15	ESCI1		- utility (draft) quality
	   16 - 17	ESCT		- stop super/sub script
	   18 - 20	ESC%Q		- proportional spacing off
	   21 - 21	CR			- carriage-return (no lf)
	*/
	static char initThisPrinter[NUMINIT] =
		"\033%H\033-\376\033F\033W\376\033H\033I1\033T\033%Q\015";
   static BYTE ISOcolorTable[10]= {0,5,6,4,3,1,2,0};

	x = y = 0;

	if (*command == aRIN) { /* initialize */
		while (x < NUMINIT) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}
		outputBuffer[5] = 0; /* stop under line */
		outputBuffer[10] = 0; /* double width off */

		if (PD->pd_Preferences.PrintQuality == LETTER) {
			outputBuffer[15] = 0;
		}

		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = 0;
			*currentVMI = 27; /* 216/27 => 8 */
		}
		else { /* 6 LPI */
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = 'A';
			outputBuffer[x++] = '\014';
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = '2';
			*currentVMI=36; /* 216/36 => 6 */
		}

		if (PD->pd_Preferences.PrintPitch == PICA) {
			outputBuffer[x++] = '\022'; /* 10 CPI */
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = ':'; /* 12 CPI */
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[x++] = '\017'; /* 17 CPI */
		}

		point = CommandTable[aTBSALL];
		while ((inchar = point[y++]) !=0) {
			if (inchar == -2) {
				inchar = '\000'; /*kludge for 0 */
			}
			outputBuffer[x++] = inchar;
		}
		y=0;

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command=aSLRM;
	}

	if (*command == aCAM) {
		Parms[0] = 1;
		Parms[1] = 255;
		*command = aSLRM;
	}

	if (*command == aSLRM) { /* set left and right margins */
		initMarg[2] = Parms[0];
		initMarg[3] = Parms[1];
		while (y < 4) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aPLU) { /* partial line up */
		if (*vline == 0) {
			*vline = 1;
			*command = aSUS2; /* superscript on */
			return(0);
		}
		if (*vline < 0) {
			*vline = 0;
			*command = aSUS3; /* subscript off */
			return(0);
		}
		return(-1);
	}

	if (*command == aPLD) { /* partial line down */
		if (*vline == 0) {
			*vline = -1;
			*command = aSUS4; /* subscript on */
			return(0);
		}
		if (*vline > 0) {
			*vline = 0;
			*command = aSUS1; /* superscript off */
			return(0);
		}
		return(-1);
	}

	if (*command == aSUS0) { /* normalize the line */
		*vline = 0;
	}
	else if (*command == aSUS1) { /* superscript off */
		*vline = 0;
	}
	else if (*command == aSUS2) { /* superscript on */
		*vline = 1;
	}
	else if (*command == aSUS3) { /* subscript off */
		*vline = 0;
	}
	else if (*command == aSUS4) { /* subscript on */
		*vline = -1;
	}

	if (*command == aVERP0) { /* 1/8 inch line spacing */
		*currentVMI=27;
	}
	else if (*command == aVERP1) { /* 1/6 inch line spacing */
		*currentVMI=36;
	}

	if (*command == aIND) { /* linefeed */
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'J';
		outputBuffer[x++] = *currentVMI;
		return(x);
	}

	if (*command == aRIS) { /* reset */
		PD->pd_PWaitEnabled=253;
	}

	if (*command == aSFC) {
		if (Parms[0] == 39) {
			Parms[0] = 30; /* set defaults */
		}
		if (Parms[0] > 37) {
			return(0); /* ni or background color change */
		}
        outputBuffer[x++] = '\033';
        outputBuffer[x++] = 'r';
        outputBuffer[x++] = ISOcolorTable[Parms[0] - 30];
	   return(x);
   }

	return(0);
}
@


1.4
log
@fixed clear margins command
V1.3 Gamma 15
@
text
@@


1.3
log
@V1.3 gamma 1 check-in
@
text
@d101 6
a109 17
		while (y < 4) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aCAM) { /* cancel all margins */
		initMarg[2] = 1;
		if (PD->pd_Preferences.PrintPitch == FINE) {
			initMarg[3] = 96;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			initMarg[3] = 137;
		}
		else {
			initMarg[3] = 80; 
		}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d1 1
a1 1
/* okidata_292 special commands */
d3 1
a3 1
/****** printer.device/printers/Okidata_292_special_functions ***********
d6 1
a6 1
 *   Okidata_292 special functions implemented:
d14 2
d31 2
a32 2
	static char initThisPrinter[] =
		"\033x\001\0332\022\0335\376\033-\376\033F\n\033W";
d34 14
d51 1
a51 1
		while (x < 17) {
d55 2
a56 3
		outputBuffer[11] = 0;
		outputBuffer[8] = 0;
		outputBuffer[x++] = 0;
d58 2
a59 2
		if (PD->pd_Preferences.PrintQuality == DRAFT) {
			outputBuffer[2] ='\000';
d61 5
a65 4
		*currentVMI=36; /* assume 1/6 line spacing */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) { /* wrong again */
			outputBuffer[4] ='0';
			*currentVMI = 27;
d67 1
a67 1
		if (PD->pd_Preferences.PrintPitch != PICA) {
d69 5
d75 3
a77 2
		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[x++] = ':';
d79 4
d84 1
a84 1
			outputBuffer[x++] = '\017';
d188 13
@


1.1
log
@Initial revision
@
text
@@
