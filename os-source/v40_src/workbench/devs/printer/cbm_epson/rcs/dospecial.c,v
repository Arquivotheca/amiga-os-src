head     1.5;
branch   ;
access   ;
symbols  V38_48:1.5 V36_43:1.3 L35_40:1.3 L35_39:1.2 L35_38:1.2 L35_36:1.2 L35_34:1.2 L35_27:1.2;
locks    ; strict;
comment  @ * @;


1.5
date     91.07.08.14.19.56;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.06.19.30.17;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.05.17.45.23;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.09.43;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.19.20.17.55;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.5
log
@Change for Euro Ax paper size (aCAM sequence uses calced maximum
paper width).
@
text
@/*** cbm_epson/dospecial.c *********************************************
 *
 * dospecial.c -- do anything which cannot be handled via data 
 *
 *	$Id: dospecial.c,v 1.4 91/07/08 11:00:00 darren Exp $
 *
 *	Copyright (c) 1988,1991 Commodore-Amiga, Inc.
 *	All Rights Reserved
 *
 **********************************************************************/

#include <exec/types.h>
#include <devices/printer.h>
#include <devices/prtbase.h>

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;
	extern char *CommandTable[];

	int x = 0, y = 0, z;
	char *point, inchar;
	static unsigned char initMarg[4] = "\033Xlr";
	/*
		00-02	\033x\001	NLQ on
		03-04	\0332		6 lpi
		05-05	\022		condensed off
		06-08	\0335\000	auto linefeed off
		09-11	\033-\000	underline off
		12-13	\033F		boldface off
		14-14	\015		carriage return
		15-17	\033W\000	enlarge off
		18-19	\033T		subscript off
	*/
	static char initThisPrinter[20] = 
		"\033x\001\0332\022\0335\000\033-\000\033F\015\033W\000\033T";

	if(*command==aRIN) {
		while(x < 20) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}
		if (PD->pd_Preferences.PrintQuality == DRAFT) {
			outputBuffer[2] = 0;
		}
		*currentVMI = 36; /* assume 1/6 line spacing */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[4] = '0';
			*currentVMI=27;
		}
		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[x++]='\033';
			outputBuffer[x++] = ':';
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[5] = '\017';
		}

		point = CommandTable[aTBSALL];
		while ((inchar = point[y++]) !=0) {
			if (inchar == -2) {
				inchar= 0; /*kludge for 0 */
			}
			outputBuffer[x++] = inchar;
		}
		y=0;

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command=aSLRM;
	}

	if(*command==aCAM) {
		Parms[0] = 1;
		z = PED->ped_MaxColumns;

		if (PD->pd_Preferences.PrintPitch == FINE) {
			Parms[1] = (z * 12)/10;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			Parms[1] = (z * 17)/10;
		}
		else {
			Parms[1] = z; 
		}
		*command = aSLRM;
	}

if(*command==aSLRM) {
        initMarg[2]=Parms[0];
        initMarg[3]=Parms[1];
        while(y<4)outputBuffer[x++]=initMarg[y++];
	return(x);
}

if(*command==aPLU) {
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
}
if(*command==aPLD) {
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}

if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);

if(*command==aVERP0) *currentVMI=27;

if(*command==aVERP1) *currentVMI=36;


if(*command==aIND) {
	outputBuffer[x++]='\033';
	outputBuffer[x++]='J';
	outputBuffer[x++]= *currentVMI;
	return(x);
}
if(*command==aRIS) PD->pd_PWaitEnabled=253;

return(0);
}
@


1.4
log
@for rcs 4.x header change
@
text
@d1 10
a10 4
/*
	DoSpecial for CBM_MPS-1000 driver.
	David Berezowski - May/88.
*/
d12 3
a14 3
#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"
d25 1
d28 1
a28 1
	int x = 0, y = 0;
d82 2
d85 1
a85 1
			Parms[1] = 96;
d88 1
a88 1
			Parms[1] = 137;
d91 1
a91 1
			Parms[1] = 80; 
@


1.3
log
@V1.3 Gamma 15
@
text
@@


1.2
log
@removed linefeed from initialization (aRIN) code
V1.3 gamma 1 check-in
@
text
@d1 4
a4 1
/* cbm mps-1000 special commands */
d6 1
a6 8
/****** printer.device/printers/CBM_MPS1000_special_functions ***********
 *
 *   NAME
 *   CBM MPS-1000 special functions implemented:
 * 
 ************************************************************************/

#include	"exec/types.h"
d10 10
a19 2
extern struct PrinterData *PD;
extern char *CommandTable[];
d21 16
a36 7
DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];
d38 20
a57 8
{
int x=0;
int y=0;
char *point;
char inchar;
static unsigned char initMarg[]="\033Xlr";
static char 
    initThisPrinter[]="\033x\001\0332\022\0335\376\033-\376\033F\015\033W";
d59 8
a66 5
if(*command==aRIN) {
   while(x<17){outputBuffer[x]=initThisPrinter[x];x++;}
   outputBuffer[11]=0;
   outputBuffer[8]=0;
   outputBuffer[x++]=0;
d68 4
a71 10
   if((PD->pd_Preferences.PrintQuality)==DRAFT)outputBuffer[2]='\000';
   *currentVMI=36; /* assume 1/6 line spacing */
   if((PD->pd_Preferences.PrintSpacing)==EIGHT_LPI) { /* wrong again */
	outputBuffer[4]='0';
	*currentVMI=27;
   }
   	if ((PD->pd_Preferences.PrintPitch) != PICA)outputBuffer[x++]='\033';
   	if((PD->pd_Preferences.PrintPitch)==ELITE)outputBuffer[x++]=':';
   	   else if ((PD->pd_Preferences.PrintPitch)==FINE)
		outputBuffer[x++]='\017';
d73 13
a85 6
    point=CommandTable[aTBSALL];
    while ((inchar= point[y++]) !=0) {
      if (inchar == -2 ) inchar= '\000'; /*kludge for 0 */
      outputBuffer[x++]=inchar;
    }
    y=0;
a86 5
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}

a91 9
}

if(*command==aCAM) {
        initMarg[2]=1;
	if(PD->pd_Preferences.PrintPitch == FINE)initMarg[3]=96;
	else if(PD->pd_Preferences.PrintPitch == ELITE)initMarg[3]=137;
	else initMarg[3]=80; 
        while(y<4)outputBuffer[x++]=initMarg[y++];
        return(x);
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
    initThisPrinter[]="\033x\001\0332\022\0335\376\033-\376\033F\n\033W";
@
