head     1.8;
branch   ;
access   ;
symbols  L35_39:1.7 L35_38:1.7 L35_36:1.7 L35_34:1.5 L35_27:1.4;
locks    ; strict;
comment  @ * @;


1.8
date     90.04.06.19.30.42;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.04.14.12.33.33;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.04.14.12.24.53;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.04.21.16.06;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.11.47.19;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.12.42;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.10.14;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.19.20.19.05;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2

@


1.8
log
@for rcs 4.x header change
@
text
@/*
	Transfer routine for CBM_Epson driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, BufOffset)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
ULONG BufOffset;
{
	extern struct PrinterExtendedData *PED;

	UBYTE *dmatrix, Black, dvalue, threshold;
	union colorEntry *ColorInt;
	UWORD x, width, sx, *sxptr, bit;

	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos; /* x offset */
	ColorInt = PInfo->pi_ColorInt; /* array of color intensities */
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width; /* width of SOURCE pixels */

	/* printer specific code. */
	if (PED->ped_YDotsInch == 216) {
		BufOffset *= y % 3;
		y /= 3;
	}
	else if (PED->ped_YDotsInch == 144) {
		BufOffset *= y & 1;
		y /= 2;
	}
	else {
		BufOffset = 0;
	}
	bit = 1 << ((y & 7) ^ 7); /* bit value is a constant */
	ptr += x + BufOffset;

	if (threshold = PInfo->pi_threshold) { /* if thresholding */
		dvalue = threshold ^ 15; /* dither value is a constant */
		do { /* loop through all SOURCE pixels */
			/* get color info */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++; /* advance to next SOURCE pixel */

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				/* if pixel should be rendered */
				if (Black > dvalue) {
					*ptr |= bit; /* set bit in the buf */
				}
				ptr++; /* advance to next DESTINATION byte */
			} while (--sx);
		} while (--width);
	}
	/* not thresholding, grey-scaling */
	else { /* init pointer to dither matrix */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		do { /* loop through all SOURCE pixels */
			/* get color info */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++; /* advance to next SOURCE pixel */

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				dvalue = dmatrix[x & 3]; /* get dither value */
				/* if pixel should be rendered */
				if (Black > dvalue) {
					*ptr |= bit; /* set bit in the buf */
				}
				ptr++; /* advance to next DESTINATION byte */
				x++; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
}
@


1.7
log
@V1.3 Gamma 11 release
@
text
@@


1.6
log
@V1.3 Gamma 11 release
@
text
@d16 1
a16 1
	extern struct PrinterData *PED;
@


1.5
log
@added 108 and 216 ydpi support
V1.3 Gamma 10 release
@
text
@d33 1
a33 1
	else if (PED->ped_YDotsInch == 108) {
@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d2 1
a2 1
	Transfer routine for Epson driver.
d7 1
d10 1
a10 1
Transfer(PInfo, y, ptr)
d14 1
d16 2
d22 1
a22 4
	/*
		The following piece of code MUST be the same for each printer.
		DO NOT CHANGE THIS CODE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	*/
d28 12
a39 2
	/* Printer specific code. */
	ptr += x; /* account for x offset */
d41 1
d47 1
a47 1
			Black = ColorInt->colorByte[PCMBLACK]; /* get black value */
d53 3
a55 2
				if (Black > dvalue) { /* if pixel should be rendered */
					*ptr |= bit; /* set its bit in the buffer */
d66 1
a66 1
			Black = ColorInt->colorByte[PCMBLACK]; /* get black value */
d73 3
a75 2
				if (Black > dvalue) { /* if pixel should be rendered */
					*ptr |= bit; /* set its bit in the buffer */
@


1.3
log
@separated BW, GREYSCALE, and COLOR printing
V1.3 gamma 1 check-in
@
text
@d16 1
a16 2
	UWORD x, width, sx, xmult, xmod, bit;
	WORD etx, etx2;
d24 1
a24 3
	xmult = PInfo->pi_xmult; /* x multiplier */
	xmod = PInfo->pi_xmod; /* x modulas */
	etx = etx2 = PInfo->pi_etx; /* x error term */
d38 1
a38 7
			/* scale pixel (DONT CHANGE THIS CODE!) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d56 1
a56 7
			/* scale pixel (DONT CHANGE THIS CODE!) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d3 1
d29 5
d36 20
d57 1
d60 4
a63 1
	}
d65 7
a71 5
	/*
		Printer specific code.
	*/
	ptr += x; /* account for x offset */
	bit = 1 << ((y & 7) ^ 7); /* bit value is a constant */
d73 1
a73 15
	do { /* loop through all SOURCE pixels */
		/* get color info */
		Black = ColorInt->colorByte[PCMBLACK]; /* get black value */
		ColorInt++; /* advance to next SOURCE pixel */

		/* scale pixel (DONT CHANGE THIS CODE!) */
		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
		}

		do { /* use this pixel 'sx' times */
			if (!threshold) { /* if not thresholding */
d75 8
a82 13
			}
			if (Black > dvalue) { /* if pixel should be rendered */
				*ptr |= bit; /* set its bit in the buffer */
			}
			ptr++; /* advance to next DESTINATION byte */
			x++; /* done 1 more printer pixel */
		} while (--sx);
	} while (--width);

	/*
		V1.2 code (illustrates how the above is achieved)
		PD->pd_PrintBuf[dataoffset + x] |= 1 << ((y & 7) ^ 7);
	*/
@


1.1
log
@Initial revision
@
text
@d1 4
d6 1
a7 2
#include "../printer/prtprivate.h"

d10 2
a11 2
UWORD y;
UBYTE *ptr;
a16 1
/*	int (*Scale)();
d18 12
a29 9
	Scale = PInfo->scale;
*/	x = PInfo->xpos;
	ColorInt = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	width = PInfo->width;
	if (threshold = PInfo->threshold) {
		dvalue = threshold ^ 15;
d31 2
a32 2
	else {
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
d35 5
a39 4
	/* printer specific */
	ptr += x;
	bit = 1 << ((y & 7) ^ 7);
	/* end */
d41 1
a41 1
	do {
d43 5
a47 5
		Black = ColorInt->colorByte[PCMBLACK];
		ColorInt++;
		/* scale, dither, and render pixel */
/*		sx = (*Scale)(xmult, xmod, etx2, &etx);
*/		sx = xmult;
d53 1
d55 2
a56 2
			if (!threshold) {
				dvalue = dmatrix[x & 3];
d58 2
a59 2
			if (Black > dvalue) {
				*ptr |= bit;
d61 1
a61 1
			ptr++;
d66 4
a69 3
	/* v1.2 code */
/*	PD->pd_PrintBuf[dataoffset + x] |= bit_table[y & 7];
*/
@
