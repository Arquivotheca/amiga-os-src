head     1.12;
branch   ;
access   ;
symbols  V38_48:1.12 V36_43:1.9 L35_40:1.9 L35_39:1.8 L35_38:1.8 L35_36:1.8 L35_34:1.7 L35_27:1.6;
locks    ; strict;
comment  @ * @;


1.12
date     91.07.09.14.37.14;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     91.07.08.14.21.40;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     90.04.06.19.30.31;  author daveb;  state Exp;
branches ;
next     1.9;

1.9
date     88.06.05.17.45.35;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.04.14.12.24.38;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.04.04.21.16.32;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     87.11.17.12.09.55;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.10.28.09.40.18;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.27.15.10.51;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.01.09.09.57;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.09.02.18.05.31;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.19.20.18.56;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.12
log
@Comment change only
@
text
@/*** cbm_epson/render.c ***********************************************
 *
 * render.c -- graphics rendering
 *
 *	$Id: render.c,v 1.11 91/07/08 14:21:40 darren Exp Locker: darren $
 *
 *	Copyright (c) 1987,1991 Commodore-Amiga, Inc.
 *	All Rights Reserved
 *
 **********************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>

#include <devices/printer.h>
#include <devices/prtbase.h>
#include <devices/prtgfx.h>

/*
	CBM_Epson driver.
	David Berezowski - May/87
*/

#define NUMSTARTCMD	4	/* # of cmd bytes before binary data */
#define NUMENDCMD	0	/* # of cmd bytes after binary data */
#define NUMTOTALCMD (NUMSTARTCMD + NUMENDCMD)	/* total of above */
#define NUMLFCMD	4	/* # of cmd bytes for linefeed */

#define STARTLEN	14
#define PITCH		1
#define CONDENSED	2
#define LMARG		8
#define RMARG		9
#define DIREC		13

static ULONG TwoBufSize;
static UWORD RowSize, dpi_code, spacing;

Render(ct, x, y, status)
long ct, x, y, status;
{
	extern void *AllocMem(), FreeMem();

	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	UBYTE *CompactBuf();
	static ULONG BufSize, TotalBufSize, dataoffset;
	/*
		00-01	\003P		set pitch (10 or 12 cpi)
		02-02	\022		set condensed fine (on or off)
		03-05	\033W\000	enlarge off
		06-09	\033Xlr		set left and right margin
		10-10	\015		carriage return
		11-13	\033U1		set uni-directional mode
	*/
	static UBYTE StartBuf[STARTLEN] =
		"\033P\022\033W\000\033Xlr\015\033U1";
	UBYTE *ptr, *ptrstart;
	int i, err;

	switch(status) {
		case 0 : /* Master Initialization */
			/*
				ct	- pointer to IODRPReq structure.
				x	- width of printed picture in pixels.
				y	- height of printed picture in pixels.
			*/
			RowSize = x;
			BufSize = RowSize + NUMTOTALCMD + NUMLFCMD;
			if (PED->ped_YDotsInch == 216) {
				TwoBufSize = BufSize * 3;
				TotalBufSize = BufSize * 6;
			}
			else if (PED->ped_YDotsInch == 144) {
				TwoBufSize = BufSize * 2;
				TotalBufSize = BufSize * 4;
			}
			else {
				TwoBufSize = BufSize * 1;
				TotalBufSize = BufSize * 2;
			}
			PD->pd_PrintBuf = AllocMem(TotalBufSize, MEMF_PUBLIC);
			if (PD->pd_PrintBuf == NULL) {
				err = PDERR_BUFFERMEMORY; /* no mem */
			}
			else {
				dataoffset = NUMSTARTCMD;
				/*
					This printer prints graphics within its
					text margins.  This code makes sure the
					printer is in 10 cpi and then sets the
					left and right margins to their minimum
					and maximum values (respectively).  A
					carriage return is sent so that the
					print head is at the leftmost position
					as this printer starts printing from
					the print head's position.  The printer
					is put into unidirectional mode to
					reduce wavy vertical lines.
				*/
				StartBuf[PITCH] = 'P'; /* 10 cpi */
				StartBuf[CONDENSED] = '\022'; /* off */
				StartBuf[LMARG] = 1; /* left margin of 1 */
				/* right margin of 80 or 136 (or other Ax size */
				StartBuf[RMARG] = PED->ped_MaxColumns;
				StartBuf[DIREC] = '1'; /* uni-direct mode */
				err = (*(PD->pd_PWrite))(StartBuf, STARTLEN);
			}
			break;

		case 1 : /* Scale, Dither and Render */
			/*
				ct	- pointer to PrtInfo structure.
				x	- 0.
				y	- row.
			*/
			Transfer(ct, y, &PD->pd_PrintBuf[dataoffset],
				BufSize);
			err = PDERR_NOERR; /* all ok */
			break;

		case 2 : /* Dump Buffer to Printer */
			/*
				ct	- 0.
				x	- 0.
				y	- # of rows sent (1 to NumRows).
			*/
			ptrstart = &PD->pd_PrintBuf[dataoffset - NUMSTARTCMD];
			if (PED->ped_YDotsInch == 72) {
				/* y range : 1 to 8 */
				y = y * 3 - spacing;
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, y, 1);
			}
			else if (PED->ped_YDotsInch == 144) {
				/* y range : 1 to 16 */
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, 2, 1);
				if (y > 1) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize], ptr,
						y * 3 / 2 - 2, 0);
				}
			}
			else if (PED->ped_YDotsInch == 216) {
				/* y range : 1 to 24 */
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, 1, 1);
				if (y > 1) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize],
						ptr, 1, 0);
				}
				if (y > 2) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize * 2],
						ptr, y - 2, 0);
				}
			}
			err = (*(PD->pd_PWrite))(ptrstart, ptr - ptrstart);
			if (err == PDERR_NOERR) {
				dataoffset = (dataoffset == NUMSTARTCMD ?
					TwoBufSize : 0) + NUMSTARTCMD;
			}
			break;

		case 3 : /* Clear and Init Buffer */
			/*
				ct	- 0.
				x	- 0.
				y	- 0.
			*/
			ClearAndInit(&PD->pd_PrintBuf[dataoffset]);
			err = PDERR_NOERR; /* all ok */
			break;

		case 4 : /* Close Down */
			/*
				ct	- error code.
				x	- io_Special flag from IODRPReq.
				y	- 0.
			*/
			err = PDERR_NOERR; /* assume all ok */
			/* if user did not cancel print */
			if (ct != PDERR_CANCEL) {
				/* restore preferences pitch and margins */
				if (PD->pd_Preferences.PrintPitch == ELITE) {
					StartBuf[PITCH] = ':'; /* 12 cpi */
				}
				else if (PD->pd_Preferences.PrintPitch == FINE) {
					StartBuf[CONDENSED] = '\017'; /* on */
				}
				StartBuf[LMARG] =
					PD->pd_Preferences.PrintLeftMargin;
				StartBuf[RMARG] =
					PD->pd_Preferences.PrintRightMargin;
				StartBuf[DIREC] = '0'; /* bi-directional */
				err = (*(PD->pd_PWrite))(StartBuf, STARTLEN);
			}
			(*(PD->pd_PBothReady))();
			if (PD->pd_PrintBuf != NULL) {
				FreeMem(PD->pd_PrintBuf, TotalBufSize);
			}
			break;

		case 5 :  /* Pre-Master Initialization */
			/*
				ct	- 0 or pointer to IODRPReq structure.
				x	- io_Special flag from IODRPReq.
				y	- 0.
			*/
			/* kludge for sloppy tractor mechanism */
			spacing = PD->pd_Preferences.PaperType == SINGLE ?
				1 : 0;
			dpi_code = SetDensity(x & SPECIAL_DENSITYMASK);
			err = PDERR_NOERR; /* all ok */
			break;
	}
	return(err);
}


UBYTE *CompactBuf(ptrstart, ptr2start, y, flag)
UBYTE *ptrstart, *ptr2start; /* source, dest */
long y;
int flag; /* 0 - not first pass, !0 - first pass */
{
	static int x;
	UBYTE *ptr, *ptr2;
	long ct;
	int i;

	ptr2 = ptr2start; /* where to put the compacted data */
	if (flag) {
		x = 0; /* flag no transfer required yet */
	}
	i = RowSize;
	ptr = ptrstart + i -1;
	while (i > 0 && *ptr == 0) {
		i--;
		ptr--;
	}
	if (i != 0) { /* if data */
		ptr = ptrstart - NUMSTARTCMD;
		*ptr++ = 27;
		*ptr++ = dpi_code;		/* density */
		*ptr++ = i & 0xff;
		*ptr++ = i >> 8;		/* size */
		i += NUMTOTALCMD;
		if (x != 0) { /* if must transfer data */
			ptr = ptrstart - NUMSTARTCMD; /* get src start */
			do { /* transfer and update dest ptr */
				*ptr2++ = *ptr++;
			} while (--i);
		}
		else { /* no transfer required */
			ptr2 += i; /* update dest ptr */
		}
	}
	if (i != RowSize + NUMTOTALCMD) { /* if compacted or 0 */
		x = 1; /* flag that we need to transfer next time */
	}
	*ptr2++ = 27;
	*ptr2++ = 'J';
	*ptr2++ = y; /* y/216 lf */
	*ptr2++ = 13; /* cr */
	return(ptr2);
}

ClearAndInit(ptr)
UBYTE *ptr;
{
	ULONG *lptr, i, j;

	/*
		Note : Since 'NUMTOTALCMD + NUMLFCMD' is > 3 bytes if is safe
		to do the following to speed things up.
	*/
	i = TwoBufSize - NUMTOTALCMD - NUMLFCMD;
	j = (ULONG)ptr;
	if (!(j & 1)) { /* if on a word boundary, clear by longs */
		i = (i + 3) / 4;
		lptr = (ULONG *)ptr;
		do {
			*lptr++ = 0;
		} while (--i);
	}
	else { /* clear by bytes */
		do {
			*ptr++ = 0;
		} while (--i);
	}
}
@


1.11
log
@Set max margins based on calced maximum margins (for Euro Ax
paper support).
@
text
@d1 1
a1 1
/*** nec24/render.c ***************************************************
d5 1
a5 1
 *	$Id: render.c,v 1.10 91/07/08 11:00:00 darren Exp $
@


1.10
log
@for rcs 4.x header change
@
text
@d1 10
a10 4
/*
	CBM_Epson driver.
	David Berezowski - May/87
*/
a15 2
#include "../printer/printer.h"
#include "../printer/prtbase.h"
d17 9
d107 2
a108 1
				StartBuf[RMARG] = 80; /* right margin of 80 */
@


1.9
log
@V1.3 Gamma 15
@
text
@@


1.8
log
@V1.3 Gamma 11 release
@
text
@d18 7
d38 10
d78 19
a96 2
				/* cr, uni-directional mode on */
				err = (*(PD->pd_PWrite))("\015\033U1", 4);
d175 13
a187 2
				/* uni-directional mode off */
				err = (*(PD->pd_PWrite))("\033U0", 3);
@


1.7
log
@added 108 and 216 ydpi support
V1.3 Gamma 10 release
@
text
@d47 1
a47 1
			else if (PED->ped_YDotsInch == 108) {
d90 1
a90 1
			else if (PED->ped_YDotsInch == 108) {
@


1.6
log
@removed 'y == 0' check in case 2
V1.3 Gamma 3 release
@
text
@d2 1
a2 1
	Epson driver.
d14 1
a14 1
#define NUMENDCMD	4	/* # of cmd bytes after binary data */
d16 1
d18 3
d29 3
a31 4
	static UWORD RowSize, BufSize, TotalBufSize, dataoffset;
	static UWORD dpi_code, spacing;
	static char CRLF[] = "\015\033J "; /* n/216 line spacing */
	UBYTE *ptr;
d37 1
a37 1
				ct	- pointer to IODRPReq structure (use with caution!).
d42 13
a54 2
			BufSize = RowSize + NUMTOTALCMD;
			TotalBufSize = BufSize * 2;
d57 1
a57 1
				err = PDERR_BUFFERMEMORY; /* couldn't get the memory */
a59 4
				*PD->pd_PrintBuf = 0x1b;
				*(PD->pd_PrintBuf + 1) = dpi_code;
				*(PD->pd_PrintBuf + BufSize) = 0x1b;
				*(PD->pd_PrintBuf + BufSize + 1) = dpi_code;
d69 1
a69 1
				x	- NA
d72 2
a73 1
			Transfer(ct, y, &PD->pd_PrintBuf[dataoffset]);
d79 3
a81 6
				ct	- NA.
				x	- NA.
				y	- # of rows sent (1 to PED->ped_NumRows).

				White-space strip.  Scan backwards through the buffer for
				the first non-zero data byte.  Send up to this point only.
d83 6
a88 5
			i = RowSize;
			ptr = &PD->pd_PrintBuf[dataoffset + i - 1];
			while (i > 0 && *ptr == 0) {
				i--;
				ptr--;
d90 9
a98 5
			y *= 3; /* convert from 72nds to 216ths */
			y -= spacing; /* kludge for sloppy tractor mechanisms */
			if (i == 0) { /* if no data to send, just send <CR><LF> */
				CRLF[3] = y;
				err = (*(PD->pd_PWrite))(CRLF, NUMENDCMD); /* y/216 spacing */
d100 14
a113 10
			else {
				PD->pd_PrintBuf[dataoffset - 2] = i & 0xff;
				PD->pd_PrintBuf[dataoffset - 1] = i >> 8;
				PD->pd_PrintBuf[dataoffset + i++] = 0x0d;
				PD->pd_PrintBuf[dataoffset + i++] = 0x1b;
				PD->pd_PrintBuf[dataoffset + i++] = 'J';
				PD->pd_PrintBuf[dataoffset + i++] = y; /* n/216 spacing */
				err = (*(PD->pd_PWrite))
					(&(PD->pd_PrintBuf[dataoffset - NUMSTARTCMD]),
					i + NUMSTARTCMD);
d115 1
d117 2
a118 2
				dataoffset =
					(dataoffset == NUMSTARTCMD ? BufSize : 0) + NUMSTARTCMD;
d124 3
a126 3
				ct	- NA.
				x	- NA.
				y	- NA.
d128 1
a128 5
			ptr = &PD->pd_PrintBuf[dataoffset];
			i = RowSize;
			do {
				*ptr++ = 0;
			} while (--i);
d135 2
a136 2
				x	- io_Special flag from IODRPReq structure.
				y	- NA.
d139 2
a140 1
			if (ct != PDERR_CANCEL) { /* if user did not cancel print */
d144 1
a144 1
			(*(PD->pd_PBothReady))(); /* wait for both buffers to empty */
d146 1
a146 1
				FreeMem(PD->pd_PrintBuf, TotalBufSize); /* free buffer mem */
d152 3
a154 3
				ct	- NA.
				x	- io_Special flag from IODRPReq structure.
				y	- NA.
d157 2
a158 1
			spacing = PD->pd_Preferences.PaperType == SINGLE ? 1 : 0;
d164 73
@


1.5
log
@changed spacing kludge from CUSTOM to SINGLE
V1.3 Gamma 1 check-in
@
text
@d70 1
a70 1
				y	- # of rows sent.
d81 2
a82 4
			if (!(y *= 3)) {
				y = 24;
			}
			y -= spacing;
@


1.4
log
@selected uni-directional mode for graphic prints
V1.3 gamma 1 check-in
@
text
@d144 1
a144 1
			spacing = PD->pd_Preferences.PaperSize == CUSTOM ? 1 : 0;
@


1.3
log
@added 120 and 240 dpi
@
text
@d51 2
a52 1
				err = PDERR_NOERR; /* all ok */
d126 5
a134 1
			err = PDERR_NOERR; /* all ok */
@


1.2
log
@fixed white-space carriage return bug
@
text
@a11 1
#include "../printer/prtprivate.h"
d25 2
a26 1
	static UWORD RowSize, BufSize, TotalBufSize, dataoffset, spacing;
d47 1
a47 1
				*(PD->pd_PrintBuf + 1) = 'L';			/* double density */
d49 1
a49 1
				*(PD->pd_PrintBuf + BufSize + 1) = 'L';	/* double density */
d140 1
@


1.1
log
@Initial revision
@
text
@d86 1
@
