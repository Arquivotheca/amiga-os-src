head     1.5;
branch   ;
access   ;
symbols  V36_23:1.4 L35_22:1.4 L35_19:1.4 L35_18:1.4 L35_17:1.4 L35_16:1.4;
locks    ; strict;
comment  @ * @;


1.5
date     90.04.06.20.12.18;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.11.55.41;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.45.21;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.26.42;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.26.36;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.5
log
@for rcs 4.x header change
@
text
@/*
	Transfer routine for Okidata92.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr)
struct PrtInfo *PInfo;
UWORD y;
UBYTE *ptr;
{
	UBYTE *dmatrix, Black, dvalue, threshold;
	union colorEntry *ColorInt;
	UWORD x, width, sx, *sxptr, bit;

	/* printer non-specific */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;

	/* printer specific */
	ptr += x;
	bit = 1 << (y % 7);

	if (threshold = PInfo->pi_threshold) { /* thresholding */
		dvalue = threshold ^ 15;
		do { /* for all source pixels */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				if (Black > dvalue) {
					*ptr |= bit;
				}
				ptr++;
			} while (--sx);
		} while (--width);
	}
	else { /* greyscale */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		do { /* for all sourcev pixels */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				dvalue = dmatrix[x & 3];
				if (Black > dvalue) {
					*ptr |= bit;
				}
				ptr++;
				x++; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
}
@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@@


1.3
log
@separated BW, GREYSCALE, and COLOR printing
V1.3 gamma 1 check-in
@
text
@d16 1
a16 2
	UWORD x, width, sx, xmult, xmod, bit;
	WORD etx, etx2;
d21 1
a21 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d34 1
a34 7
			/* scale, dither, and render pixel */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d50 1
a50 7
			/* scale, dither, and render pixel */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d1 5
a8 2
#define DEBUG	0

a17 1
/*	int (*Scale)();
d19 2
a20 2
	Scale = PInfo->pi_scale;
*/	x = PInfo->pi_xpos;
a25 6
	if (threshold = PInfo->pi_threshold) {
		dvalue = threshold ^ 15;
	}
	else {
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
	}
a29 1
	/* end */
d31 12
a42 18
#if DEBUG
	kprintf("\nPInfo=%lx, y=%ld, ptr=%ld, x=%ld, ", PInfo, y, ptr, x);
#endif DEBUG
	do {
		/* get color info */
		Black = ColorInt->colorByte[PCMBLACK];
		ColorInt++;
		/* scale, dither, and render pixel */
/*		sx = (*Scale)(xmult, xmod, etx2, &etx);
*/		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
		}
		do { /* use this pixel 'sx' times */
			if (!threshold) {
				dvalue = dmatrix[x & 3];
d44 21
a64 2
			if (Black > dvalue) {
				*ptr |= bit;
d66 11
a76 10
			ptr++;
			x++; /* done 1 more printer pixel */
		} while (--sx);
	} while (--width);
#if DEBUG
	kprintf("ptr=%ld, x=%ld, ", ptr, x);
#endif DEBUG
	/* v1.2 code */
/*	PD->pd_PrintBuf[dataoffset + x] |= 1 << (y % 7);
*/
@


1.1
log
@Initial revision
@
text
@d2 1
a3 2
#include "../printer/prtprivate.h"

d17 8
a24 8
	Scale = PInfo->scale;
*/	x = PInfo->xpos;
	ColorInt = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	width = PInfo->width;
	if (threshold = PInfo->threshold) {
d28 1
a28 1
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
@
