head     1.5;
branch   ;
access   ;
symbols  V36_23:1.4 L35_22:1.4 L35_19:1.3 L35_18:1.3 L35_17:1.3 L35_16:1.3;
locks    ; strict;
comment  @ * @;


1.5
date     90.04.06.20.11.59;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.06.05.18.21.09;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.43.27;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.26.08;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.26.19;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.5
log
@for rcs 4.x header change
@
text
@/*
	DoSpecial for Okidata_92 driver.
	David Berezowski - June/88.
*/

#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

#define PITCH	4
#define QUALITY	6
#define LPI	12
#define INITLEN	14

#define LMARG	3
#define MARGLEN	6

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
	extern struct PrinterData *PD;

	int x = 0, y = 0, z = 0;
	/*
		00-05	\033%C001	- set left margin to 1.
	*/
	static char initMarg[MARGLEN] = "\033%C001";
	/*
		00-01	\033D	- underline off
		02-03	\033I	- boldface off
		04-04	\036	- 10 cpi
		05-06	\0330	- draft
		07-08	\033K	- superscript off
		09-10	\033M	- subscript off
		11-12	\0336	- 6 lpi
		13-13	\015	- carriage-return
	*/
	static char initThisPrinter[INITLEN] =
		"\033D\033I\036\0330\033K\033M\0336\015";
	static UBYTE pitch = 100;

	if (*command == aRIS) { /* reset */
		PD->pd_PWaitEnabled = 253;
	}

	if (*command==aRIN) { /* init */
		while (x < INITLEN) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}

		if (PD->pd_Preferences.PrintQuality == LETTER) {
			outputBuffer[QUALITY] = '1';
		}

		*currentVMI = 36; /* assume 1/6 line spacing */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[LPI] = '8';
			*currentVMI = 27;
		}

		if (PD->pd_Preferences.PrintPitch == PICA) {
			pitch = 100;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[PITCH] = '\034';
			pitch = 120;
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[PITCH] = '\035';
			pitch = 171;
		}

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		*command=aSLRM;
	}

	if (*command == aCAM) { /* clear margins */
		Parms[0] = 1;
		*command = aSLRM;
	}

	if (*command == aSLRM) { /* set left&right margin(s) */
		/* convert from 120ths/inch to chars @@ current cpi */
		z = (Parms[0] - 1) * 1200 / pitch + 1;
		initMarg[LMARG] = ((z % 1000) / 100) | '0';
		initMarg[LMARG + 1] = ((z % 100) / 10) | '0';
		initMarg[LMARG + 2] = (z % 10) | '0';
		while (y < MARGLEN) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aSLPP) { /* set form length */
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'F';
		outputBuffer[x++] = ((Parms[0] % 100) / 10) | '0';
		outputBuffer[x++] = (Parms[0] % 10) | '0';
		return(x);
	}

if(*command==aPLU) { /* partial line up */
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
}
if(*command==aPLD) { /* partial line down */
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}

if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);

if(*command==aVERP0) *currentVMI=27;

if(*command==aVERP1) *currentVMI=36;

	if (*command==aIND) { /* linefeed */
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = '\022';
		return(x);
	}
 
	/* normal char set, elite off, condensed off, enlarge off */
	if (*command == aSHORP0 || *command == aSHORP1 ||
		*command == aSHORP3 || *command == aSHORP5) {
		pitch = 100;
	}
	else if (*command == aSHORP2) { /* ELITE, 12 cpi */
		pitch = 120;
	}
	else if (*command == aSHORP4) { /* FINE, 17.1 cpi */
		pitch = 171;
	}

	return(0);
}
@


1.4
log
@V1.3 Gamma 15        
@
text
@@


1.3
log
@removed linefeed from init (aRIN) code
V1.3 gamma 1 check-in
@
text
@d1 4
a4 1
/* Okidata_92 special commands */
d6 1
a6 8
/****** printer.device/printers/OKIDATA_92_special_functions ***********
 *
 *   NAME
 *   CBM MPS-1000 special functions implemented:
 * 
 ************************************************************************/

#include	"exec/types.h"
d10 4
a13 2
extern struct PrinterData *PD;
extern char *CommandTable[];
d15 2
a16 7
DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];
d18 7
d26 1
a26 11
int x=0;
int y=0;
char *point;
char inchar;
static unsigned char initMarg[]="\033%C001";
/*
   correspondence quality, 6 lpi, 10 cpi, underlining off,
   emphasized/enhanced off, superscript off, subscript off
*/
static char initThisPrinter[]="\0331\0336\036\033D\033I\033K\033M\015";
static char pitch = 100;
d28 18
a45 5
if (*command == aRIS) {
	PD->pd_PWaitEnabled = 253;
}
if(*command==aRIN) { /* init */
   while(x<14){outputBuffer[x]=initThisPrinter[x];x++;}
d47 2
a48 9
   if((PD->pd_Preferences.PrintQuality)==DRAFT)outputBuffer[1]='0';
   *currentVMI=36; /* assume 1/6 line spacing */
   if((PD->pd_Preferences.PrintSpacing)==EIGHT_LPI) { /* wrong again */
	outputBuffer[3]='8';
	*currentVMI=27;
   }

	if (PD->pd_Preferences.PrintPitch == PICA) {
		pitch = 100;
a49 8
	else if (PD->pd_Preferences.PrintPitch == ELITE) {
		outputBuffer[x++]='\034';
		pitch = 120;
	}
	else if (PD->pd_Preferences.PrintPitch == FINE) {
		outputBuffer[x++]='\035';
		pitch = 171;
	}
d51 5
a55 1
    y=0;
d57 3
a59 4
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}
d61 4
a64 8
	if (*command == aSLRM) { /* set left&right margin(s) */
		/* convert from 120ths/inch to chars @@ current cpi */
		Parms[0] = (Parms[0] - 1) * 1200 / pitch;
		initMarg[3] = ((Parms[0] % 1000) / 100) | '0';
		initMarg[4] = ((Parms[0] % 100) / 10) | '0';
		initMarg[5] = (Parms[0] % 10) | '0';
		while (y < 6) {
			outputBuffer[x++] = initMarg[y++];
d66 15
a80 1
		return(x);
d84 11
a94 4
		initMarg[3] = '0';
		initMarg[4] = '0';
		initMarg[5] = '1'; /* left margin to 1 */
		while(y < 6) {
d129 5
a133 5
if(*command==aIND) { /* linefeed */
   outputBuffer[x++]='\033';
   outputBuffer[x++]='\022';
   return(x);
}
d135 3
a137 2
	/* normal char set (PICA, 10 cpi), elite off, condensed off */
	if (*command == aSHORP0 || *command == aSHORP1 || *command == aSHORP3) {
d140 1
a140 1
	if (*command == aSHORP2) { /* ELITE, 12 cpi */
d143 1
a143 1
	if (*command == aSHORP4) { /* FINE, 17.1 cpi */
d147 1
a147 1
return(0);
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d1 1
a1 1
/* okidata_u92 special commands */
d3 1
a3 1
/****** printer.device/printers/OKIDATA_u92_special_functions ***********
d35 2
a36 1
static char initThisPrinter[]="\0331\0336\036\033D\033I\033K\033M\n";
a49 6
   	if((PD->pd_Preferences.PrintPitch)==ELITE) {
			outputBuffer[x++]='\034';
		}
		else if ((PD->pd_Preferences.PrintPitch)==FINE) {
			outputBuffer[x++]='\035';
		}
d51 12
d70 11
a80 10
if(*command==aSLRM) { /* set left&right margin(s) */
   initMarg[3] = Parms[0] / 100;
   initMarg[4] = Parms[0] - ((initMarg[3] * 100) / 10);
   initMarg[5] = Parms[0] - (initMarg[3]*100) - (initMarg[4]*10);
   while(y<6) outputBuffer[x++]=initMarg[y++];
	outputBuffer[x-1] |= '0';
	outputBuffer[x-2] |= '0';
	outputBuffer[x-3] |= '0';
	return(x);
}
d82 9
a90 7
if(*command==aCAM) { /* clear margins */
        initMarg[3]='0';
        initMarg[4]='0';
        initMarg[5]='1';
        while(y<6)outputBuffer[x++]=initMarg[y++];
        return(x);
}
d92 8
d127 10
a136 9
if(*command==aSLPP) { /* set form length */
	outputBuffer[x++]='\033';
	outputBuffer[x++]='F';
	outputBuffer[x++]=Parms[0] / 10;
	outputBuffer[x++]=Parms[0] - ((Parms[0] / 10) * 10);
	outputBuffer[x-1] |= '0';
	outputBuffer[x-2] |= '0';
	return(x);
}
@


1.1
log
@Initial revision
@
text
@d37 3
@
