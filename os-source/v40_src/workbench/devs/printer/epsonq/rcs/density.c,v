head     1.14;
branch   ;
access   ;
symbols  V38_71:1.14 V38_70:1.14 V37_48:1.10 L35_32:1.7 L35_31:1.7 L35_28:1.7 L35_27:1.7 L35_23:1.7 L35_22:1.7;
locks    ; strict;
comment  @ * @;


1.14
date     91.07.08.10.35.53;  author darren;  state Exp;
branches ;
next     1.13;

1.13
date     91.07.08.09.45.53;  author darren;  state Exp;
branches ;
next     1.12;

1.12
date     91.07.03.15.08.08;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     91.07.03.11.30.50;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     91.04.15.15.13.42;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     91.04.15.12.14.04;  author darren;  state Exp;
branches ;
next     1.8;

1.8
date     91.04.15.11.22.21;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     87.10.28.13.14.36;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     87.10.28.09.49.43;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.10.27.15.26.10;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.01.09.17.46;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.09.04.09.37.54;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.08.21.10.03.57;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.14.58;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.14
log
@Comment change
@
text
@/*** epsonQ/density.c ***************************************************
 *
 * density.c -- calc density settings (maximums)
 *
 *	$Id: density.c,v 1.13 91/07/08 09:45:53 darren Exp Locker: darren $
 *
 *	Copyright (c) 1987,1991 Commodore-Amiga, Inc.
 *	All Rights Reserved
 *
 **********************************************************************/

#include <exec/types.h>
#include <devices/printer.h>
#include <devices/prtbase.h>
#include <intuition/preferences.h>


#ifdef  DEBUG
#define D(a) KPrintF a
#else
#define D(a)
#endif


/* (30.5cm/ft) * (10mm/cm)					*/
#define MMPERFT		305

/* Half inches per ft						*/

#define HALFINCHPERFT 24

/* Inches per ft						*/

#define INCHPERFT 12

/* Characters per ft at 10 CPI					*/

#define CHARSPERFT 120

/* MM per 1/2 inch 						*/

#define HALFINCH ((MMPERFT)/HALFINCHPERFT)

/* MM per inch							*/

#define INCH ((MMPERFT)/INCHPERFT)

/* Sparse table for paper sizes - offset constant		*/

#define PSIZE_OFFSET 16


SetDensity(density_code)
ULONG density_code;
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	/* SPECIAL_DENSITY     0   1   2    3    4    5    6    7 */
	static int XDPI[8] = {90, 90, 120, 180, 360, 360, 360, 360};
	static char codes[8] = {38, 38, 33, 39, 40, 40, 40, 40};

	static int PaperXSizes[] = {
	/* Paper sizes in inches x 10		*/

		80,			/* US_LETTER */
		80,			/* US_LEGAL  */
		80,			/* N_TRACTOR */
		136,			/* W_TRACTOR */
		80,			/* CUSTOM    */

	/* Euro Ax sizes follow						*/
	/* Paper size in millimeters - 1/2 inch 			*/
	/* Subtract 1/2 inch to be consistent with US size behavior	*/
		841 - HALFINCH,		/* A0	*/
		594 - HALFINCH,		/* A1	*/
		420 - HALFINCH,		/* A2	*/
		297 - HALFINCH,		/* A3	*/
		210 - HALFINCH,		/* A4	*/
		148 - HALFINCH,		/* A5	*/
		105 - HALFINCH,		/* A6	*/
		74  - HALFINCH,		/* A7	*/
		52  - HALFINCH,		/* A8	*/

		};

	/* Calculate max dots based on paper size selection */

	UWORD psize;
        ULONG maxwidth;
	ULONG maxcols;

	/* reference array (constant steps of 16) */
	/* Any new in-between sizes will be rounded down */

	psize = PD->pd_Preferences.PaperSize;

	maxwidth =  (ULONG)PaperXSizes[psize/PSIZE_OFFSET];

	D(("psize = %ld  maxwidth = %ld\n",(long)psize,(long)maxwidth));

	/* Math - be precise as possible!  No change in precision for	*/
	/* existing INCH specified paper sizes				*/

	density_code /= SPECIAL_DENSITY1;

	if(psize <= CUSTOM)
	{
		PED->ped_MaxColumns = maxwidth;

		/* default is 80 chars (8.0 in.), W_TRACTOR is 136 chars (13.6 in.) */

		PED->ped_MaxXDots = (XDPI[density_code] * maxwidth) / 10;

	}
	else
	{
		/* calculate max X dots based on millimeters		*/

		/* Millimeters:						*/
		/*							*/
		/* (X mm) * 12 inches/ft * dots/inch			*/
		/* ------------------------------ = Dots		*/
		/* 305 mm/ft						*/


		PED->ped_MaxXDots =
			(maxwidth * INCHPERFT *	XDPI[density_code])/MMPERFT;

		/* calculate max columns based on millimeters, and	*/
		/* 10 CPI like inch based calculations above.		*/
		/* Plus round-up to nearest whole column position so we */
		/* don't clip when printing graphics			*/

                /*							*/
		/* (X mm) * 12 inches/ft * 10 chars/inch +		*/
		/* -------------------------------------     = Chars	*/
		/* 305 mm/ft						*/

		maxcols = ((maxwidth * CHARSPERFT)+(MMPERFT - 1))/MMPERFT;

		/* A0 sizes can overflow UBYTE MaxColumns.		*/


		PED->ped_MaxColumns = maxcols <= 136 ? maxcols : 136;
	}
		
	D(("ped_MaxXDots = %ld ped_MaxColumns = %ld\n",
		(long)PED->ped_MaxXDots, (long)PED->ped_MaxColumns));

	PED->ped_XDotsInch = XDPI[density_code];
	return(codes[density_code]);
}
@


1.13
log
@Round up max column calculation for Euro A sizes - so we don't
clip graphic dumps (calcs based on 10 CPI which may work out to
some inexact number of columns when calculating from
millimeters).
@
text
@d5 1
a5 1
 *	$Id: density.c,v 1.12 91/07/03 15:08:08 darren Exp Locker: darren $
a26 6

/* Margins: minus 1/2" width, minus 1" height (== US diffs)	*/
/*								*/
/* Left            Right           Top           Bottom		*/
/* 50/300 = 1/6    100/300 = 1/3   60/300 = 1/5  60/300 = 1/5	*/
/* 								*/
@


1.12
log
@Comment change
@
text
@d5 1
a5 1
 *	$Id: density.c,v 1.11 91/07/03 11:30:50 darren Exp Locker: darren $
d17 1
d138 3
d142 2
a143 2
		/* (X mm) * 12 inches/ft * 10 chars/inch		*/
		/* ------------------------------------- = Chars	*/
d146 1
a146 1
		maxcols = (maxwidth * CHARSPERFT)/MMPERFT;
a149 5
		/* MaxColums is only really used to cancel margins - 	*/
		/* the EpsonQ driver cancels via reseting margins	*/
		/* based on print pitch - WIDE TRACTOR width is the max	*/
		/* width that works without overflowing the L/R margin	*/
		/* settings command supported by the EpsonQ.		*/
@


1.11
log
@First pass at A4 paper support in the EpsonQ driver (to be tested).
Support for all Euro A sizes (within the realms of what the printer
will handle), header change, reference include files from standard
include directory, comment changes.
@
text
@d5 1
a5 1
 *	$Id: density.c,v 1.10 91/07/02 11:40:00 darren Exp $
d147 1
a147 1
		/* the EpsonQ driver cancels via reseting margins to	*/
@


1.10
log
@*** empty log message ***
@
text
@d1 10
a10 4
/*
	Density module for EpsonQ driver.
	David Berezowski - October/87
*/
d13 3
a15 2
#include "../printer/printer.h"
#include "../printer/prtbase.h"
d17 41
d68 42
a109 2
	PED->ped_MaxColumns = 
		PD->pd_Preferences.PaperSize == W_TRACTOR ? 136 : 80;
d111 47
a157 2
	/* default is 80 chars (8.0 in.), W_TRACTOR is 136 chars (13.6 in.) */
	PED->ped_MaxXDots = (XDPI[density_code] * PED->ped_MaxColumns) / 10;
@


1.9
log
@No change - argg; someone made changes to this file (change from
240->360 dpi), but never checked it in.
@
text
@@


1.8
log
@360 dpi
@
text
@@


1.7
log
@added support for narrow and wide tractor paper
V1.3 Gamma 1 check-in
@
text
@d17 1
a17 1
	static int XDPI[8] = {90, 90, 120, 180, 240, 240, 240, 240};
@


1.6
log
@added narrow and wide tractor paper support
V1.3 GAMMA 1 check-in
@
text
@d13 1
@


1.5
log
@V1.3 gamma 1 check-in
@
text
@d19 2
d22 2
a23 1
	PED->ped_MaxXDots = (XDPI[density_code] * 136) / 10; /* 13.6 inches */
@


1.4
log
@V1.3 beta 4 check-in
@
text
@d2 2
a3 2
	Density module for Epson24
	David Berezowski - June/87
@


1.3
log
@dropped support of 60 dpi as it is too sparse
@
text
@d7 1
a8 1
#include "../printer/printer.h"
d15 3
a17 1
	int code;
d19 4
a22 21
	if (density_code < SPECIAL_DENSITY2) {
		PED->ped_MaxXDots = 1224;
		PED->ped_XDotsInch = 90;
		code = 38;
	}
	else if (density_code < SPECIAL_DENSITY3) {
		PED->ped_MaxXDots = 1632;
		PED->ped_XDotsInch = 120;
		code = 33;
	}
	else if (density_code < SPECIAL_DENSITY4) {
		PED->ped_MaxXDots = 2448;
		PED->ped_XDotsInch = 180;
		code = 39;
	}
	else { /* assume SPECIAL_DENSITY4 or higher */
		PED->ped_MaxXDots = 4896;
		PED->ped_XDotsInch = 360;
		code = 40;
	}
	return(code);
@


1.2
log
@added 360 dpi mode.
@
text
@a17 5
		PED->ped_MaxXDots = 816;
		PED->ped_XDotsInch = 60;
		code = 32;
	}
	else if (density_code < SPECIAL_DENSITY3) {
d22 1
a22 1
	else if (density_code < SPECIAL_DENSITY4) {
d27 1
a27 1
	else if (density_code < SPECIAL_DENSITY5) {
d32 1
a32 1
	else { /* assume SPECIAL_DENSITY5 or higher */
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
	else { /* assume SPECIAL_DENSITY4 or higher */
d36 5
@
