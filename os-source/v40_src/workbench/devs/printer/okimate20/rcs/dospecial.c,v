head     1.5;
branch   ;
access   ;
symbols  L35_30:1.4 L35_29:1.4 L35_26:1.3 L35_25:1.3;
locks    ; strict;
comment  @ * @;


1.5
date     90.04.06.20.14.37;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.15.16.49.23;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.46.02;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.27.31;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.28.35;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.5
log
@for rcs 4.x header change
@
text
@/*
	DoSpecial for Okimate-20 driver.
	David Berezowski - March/88.
*/

#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	int x = 0, i = 0;
	static char initThisPrinter[] =
		"\033I\001\022\0330\033%H\033-\376\015\033W";
	static BYTE ISOcolTable[10] = {2, 1, 0, 0, 2, 1, 2, 0, 2, 2};

	if (*command == aRIN) {
		while(x < 15) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}
		outputBuffer[11] = '\000';
		outputBuffer[x++] = '\000';

		if (PD->pd_Preferences.PrintQuality == LETTER) {
			outputBuffer[2] = '\002';
		}

		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = ':';
		}
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[x++] = '\017';
		}

		*currentVMI = 27; /* assume 8 lpi (27/216 = 1/8) */
		if (PD->pd_Preferences.PrintSpacing == SIX_LPI) {
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = 'A';
			outputBuffer[x++] = '\014';
			outputBuffer[x++] = '\033';
			outputBuffer[x++] = '2';
			*currentVMI = 36; /* 36/216 = 1/6 */
		}
		return(x);
	}

	if (*command == aNEL) {
		outputBuffer[x++] = '\015';
		outputBuffer[x++] = '\012';
		return(x);
	}

	if (*command == aPLU) {
		if (*vline == 0) {
			*vline = 1;
			*command = aSUS2;
			return(0);
		}
		if (*vline < 0) {
			*vline = 0;
			*command = aSUS3;
			return(0);
		}
		return(-1);
	}

	if (*command == aPLD) {
		if (*vline == 0) {
			*vline = -1;
			*command = aSUS4;
			return(0);
		}
		if (*vline > 0) {
			*vline = 0;
			*command = aSUS1;
			return(0);
		}
		return(-1);
	}	

	if (*command == aSUS0) {
		*vline = 0;
	}
	if (*command == aSUS1) {
		*vline = 0;
	}
	if (*command == aSUS2) {
		*vline = 1;
	}
	if (*command == aSUS3) {
		*vline = 0;
	}
	if (*command == aSUS4) {
		*vline = -1;
	}

	if (*command == aVERP0) {
		*currentVMI = 27;
	}
	if (*command == aVERP1) {
		*currentVMI = 36;
	}

	return(0);
}
@


1.4
log
@fixed docs for devcon
V1.3 Gamma 13
@
text
@@


1.3
log
@removed linefeed from init (aRIN) code
V1.3 gamma 1 check-in
@
text
@d1 6
a6 9
/* okimate 20 special commands */
 
/****** printer.device/printers/Okimate_20_special_functions ***********
 *
 *   NAME
 *   Okimate 20 special functions
 * 
 ************************************************************************/
#include	"exec/types.h"
d10 7
a16 11
extern struct PrinterData *PD;
extern struct PrinterExtendedData *PED;

DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];

d18 2
a19 4
   int x=0;
   static char initThisPrinter[]="\033I\001\022\0330\033%H\033-\376\015\033W";
   int i = 0;
   static BYTE ISOcolTable[10] = {2, 1, 0, 0, 2, 1, 2, 0, 2, 2};
d21 4
a24 5
if(*command==aRIN)
   {
   while(x<15){outputBuffer[x]=initThisPrinter[x];x++;}
    outputBuffer[11]='\000';
   outputBuffer[x++]='\000';
d26 7
a32 1
   if((PD->pd_Preferences.PrintQuality)==LETTER)outputBuffer[2]='\002';
d34 3
a36 5
   if((PD->pd_Preferences.PrintPitch)==ELITE) {
   	outputBuffer[x++]='\033';
	outputBuffer[x++]=':';
   }
   else if((PD->pd_Preferences.PrintPitch)==FINE)outputBuffer[x++]='\017';
d38 7
a44 11
   *currentVMI=27; /* assume 1/8 line spacing */
   if((PD->pd_Preferences.PrintSpacing)==SIX_LPI) { /* wrong again */
	outputBuffer[x++]='\033';
	outputBuffer[x++]='A';
	outputBuffer[x++]='\014';
	outputBuffer[x++]='\033';
	outputBuffer[x++]='2';
	*currentVMI=36;
   }
   return(x);
   }
d46 11
a56 6
if(*command == aNEL)
{
    outputBuffer[x++] = '\015';
    outputBuffer[x++] = '\012';
   return(x);
}
d58 5
a62 5
if(*command==aPLU) {
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
}
d64 13
a76 5
if(*command==aPLD) {
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}	
d78 13
a90 5
if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);
d92 15
a106 1
if(*command==aVERP0) *currentVMI=27;
d108 6
a113 1
if(*command==aVERP1) *currentVMI=36;
d115 1
a115 1
return(0);
@


1.2
log
@added cr/lf to initialize code
V1.3 beta 4 check-in
@
text
@d26 1
a26 1
   static char initThisPrinter[]="\033I\001\022\0330\033%H\033-\376\n\033W";
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
   static char initThisPrinter[]="\033I\001\022\0330\033%H\033-\376\r\033W";
@
