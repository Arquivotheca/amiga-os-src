head     1.6;
access   ;
symbols  L35_30:1.6 L35_29:1.6 L35_26:1.5 L35_25:1.5;
locks    ; strict;
comment  @ * @;


1.6
date     88.04.15.16.50.04;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.01.30.11.56.00;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.12.21.10.46.57;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.01.09.28.07;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.09.09.06.37.46;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.29.01;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.6
log
@fixed docs for devcon
V1.3 Gamma 13
@
text
@/*
	Transfer routine for Okimate_20.
	David Berezowski - October/87.
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, colors)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
UWORD *colors; /* indexes to color buffers */
{
	extern struct PrinterData *PD;

	static UWORD bit_table[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	union colorEntry *ColorInt;
	UBYTE *dmatrix, *yptr, *mptr, *cptr, y24, bit;
	UBYTE dvalue, Yellow, Magenta, Cyan, threshold;
	UWORD x, x3, width, sx, *sxptr;

	/* pre-compute */
	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;
	/* pre-compute ptr to dither matrix */
	dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);

	/* printer specific */
	bit = bit_table[y & 7];
	y24 = (y % 24) >> 3;


	if (PD->pd_Preferences.PrintShade == SHADE_COLOR) {
		yptr = ptr + y24 + colors[0];
		mptr = ptr + y24 + colors[1];
		cptr = ptr + y24 + colors[2];
		x3 = x * 3;
		do { /* for all source pixels */
			/* compute intensity values for each color component */
			Yellow = ColorInt->colorByte[PCMYELLOW];
			Magenta = ColorInt->colorByte[PCMMAGENTA];
			Cyan = ColorInt->colorByte[PCMCYAN];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				dvalue = dmatrix[x & 3];
				if (Yellow > dvalue) {
					*(yptr + x3) |= bit;
				}
				if (Magenta > dvalue) {
					*(mptr + x3) |= bit;
				}
				if (Cyan > dvalue) {
					*(cptr + x3) |= bit;
				}
				++x; /* done 1 more printer pixel */
				x3 += 3;
			} while (--sx);
		} while (--width);
	}
	else { /* b&w or grey_scale printout */
		ptr += y24+ colors[0];
		/* are we thresholding? */
		if (threshold = PInfo->pi_threshold) {
			/* yes, so pre-compute dither value */
			dvalue = threshold ^ 15;
			do { /* for all source pixels */
				Yellow = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					if (Yellow > dvalue) {
						*ptr |= bit;
					}
					ptr += 3;
				} while (--sx);
			} while (--width);
		}
		else { /* greyscale */
			do { /* for all source pixels */
				Yellow = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					dvalue = dmatrix[x & 3];
					if (Yellow > dvalue) {
						*ptr |= bit;
					}
					ptr += 3;
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
	}
}
@


1.5
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d3 1
a3 1
	David Berezowski - October/87
d39 1
a39 1
	if (PD->pd_Preferences.PrintShade == SHADE_COLOR) { /* color printout */
d45 1
a45 1
			/* pre-compute intensity values for each color component */
d71 4
a74 2
		if (threshold = PInfo->pi_threshold) { /* are we thresholding? */
			dvalue = threshold ^ 15; /* yes, so pre-compute dither value */
@


1.4
log
@V1.3 Gamma 5 release
@
text
@d23 1
a23 2
	UWORD x, x3, width, sx, xmult, xmod;
	WORD etx, etx2;
d29 1
a29 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d51 1
a51 7
			/* scale pixel (DONT CHANGE THIS CODE!)*/
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d77 1
a77 7
				/* scale pixel (DONT CHANGE THIS CODE!)*/
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
d92 1
a92 7
				/* scale pixel (DONT CHANGE THIS CODE!)*/
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
@


1.3
log
@V1.3 beta 4 check-in
@
text
@d3 1
a3 1
	David Berezowski - Sept/87
d22 1
a22 1
	UBYTE dvalue, Yellow, Magenta, Cyan, threshold, color;
a26 16
	/* set flag for whether or not we are doing a color printout */
	color = PD->pd_Preferences.PrintShade == SHADE_COLOR;
	/* printer specific */
	bit = bit_table[y & 7];
	y24 = (y % 24) >> 3;
	if (color) { /* color printout */
		yptr = ptr + y24 + colors[0];
		mptr = ptr + y24 + colors[1];
		cptr = ptr + y24 + colors[2];
	}
	else { /* b&w or grey-scale printout */
		ptr += y24+ colors[0];
		if (threshold = PInfo->pi_threshold) { /* are we thresholding? */
			dvalue = threshold ^ 15; /* yes, so pre-compute dither value */
		}
	}
d37 9
a45 1
	if (color) { /* if doing a color printout */
d79 6
a84 3
		do { /* for all source pixels */
			Yellow = ColorInt->colorByte[PCMBLACK];
			ColorInt++;
d86 7
a92 7
			/* scale pixel (DONT CHANGE THIS CODE!)*/
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d94 22
a115 2
			do { /* use this pixel 'sx' times */
				if (!threshold) { /* if we're not thresholding */
d117 8
a124 8
				}
				if (Yellow > dvalue) {
					*ptr |= bit;
				}
				ptr += 3;
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
a125 5

	/* v1.2 */
/*	PD->pd_PrintBuf[dataoffset + ((y % 24) >> 3) + (x << 1) + x +
		colors[ct - 1]] |= bit_table[y & 7];
*/
@


1.2
log
@fixed color and b&w/greyscale printing for beta 3 release
@
text
@d9 1
a9 1
#include "../printer/prtprivate.h"
d39 1
a39 1
		if (threshold = PInfo->threshold) { /* are we thresholding? */
d44 6
a49 6
	x = PInfo->xpos;
	ColorInt = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	width = PInfo->width;
d51 1
a51 1
	dmatrix = PInfo->dmatrix + ((y & 3) << 2);
@


1.1
log
@Initial revision
@
text
@d3 1
d5 112
@
