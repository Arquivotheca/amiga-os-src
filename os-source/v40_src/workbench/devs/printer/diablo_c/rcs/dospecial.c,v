head     1.4;
branch   ;
access   ;
symbols  L35_30:1.3 L35_29:1.2 L35_28:1.2 L35_26:1.2 L35_25:1.2;
locks    ; strict;
comment  @ * @;


1.4
date     90.04.06.20.02.48;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.05.17.51.49;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.23.10;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.09.28;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.4
log
@for rcs 4.x header change
@
text
@/*
	DoSpecial for Diablo_C-150 driver.
	David Berezowski - June/88.
*/

#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

#define INITLEN		1
#define TABLEN		34

#define LMARG		2
#define RMARG		7
#define MARGLEN		10
/*
	00-04	\033l00\015	- set left margin to '00'	LMARG
	05-09	\033r00\015	- set right margin to '00'	RMARG
*/
UBYTE MargBuf[MARGLEN] = "\033l00\015\033r00\015";

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
UBYTE *currentVMI; /* used for color on this printer */
BYTE *crlfFlag;
UBYTE Parms[];
{
	extern struct PrinterData *PD;

	int x = 0, y= 0;
	static BYTE ISOcolorTable[10] =
		{49, 51, 53, 52, 55, 50, 54, 48, 49, 49};
	/*       K   R   G   Y   B   M   C   W   K   K */

	/*
		00-00	\015	- carriage return
	*/
	static char initThisPrinter[INITLEN] = "\015";
	static unsigned char initTabs[TABLEN] =
		"\033i9 17 25 33 41 49 57 65 73 81 89\015";

	if (*command == aRIN) {
		while(x < INITLEN) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}
		while (y < TABLEN) {
			outputBuffer[x++] = initTabs[y++];
		}
		y = 0;

		*currentVMI = 0x70; /* white background, black text */

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command = aSLRM;
	}

	if (*command == aCAM) {
		Parms[0] = 1;
		Parms[1] = (90 * 10 + 5) / 10; /* max is 9.0 inches @@ 10 cpi */
		*command = aSLRM;
	}

	if (*command == aSLRM) {
		CalcMarg(Parms[0], Parms[1]);
		while (y < MARGLEN) {
			outputBuffer[x++] = MargBuf[y++];
		}
		return(x);
	}

	if (*command == aSFC) { /* set foreground/background color */
		if (Parms[0] == 39) {
			Parms[0] = 30; /* set defaults */
		}
		if (Parms[0] == 49) {
			Parms[0] = 47;
		}
		if (Parms[0] < 40) {
			*currentVMI = (*currentVMI & 240) + (Parms[0] - 30);
		}
		else {
			*currentVMI = (*currentVMI & 15) + (Parms[0] - 40) *
				16;
		}
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = '@@';
		outputBuffer[x++] = ISOcolorTable[*currentVMI & 15];
		outputBuffer[x++] = ISOcolorTable[(*currentVMI & 240) / 16];
		return(x);
	}

	if (*command == aRIS) {
		PD->pd_PWaitEnabled = 253;
	}

	return(0);
}

CalcMarg(left, right)
int left, right;
{
	int i, j, offset, max;

	/*
		The minimum left margin on the Diablo_C-150 is .5 inches.
		Thus a left margin of 1 (ie. no left margin) is 5/10 => .5.
		The maximum print width is 9.0 inches.
	*/
	offset = 40;
	max = (90 * 10 + 5) / 10;
	if ((i = (left * 10 + offset + 5) / 10) > max) {
		i = max;
	}
	MargBuf[LMARG + 0] = ((i % 100) / 10) + '0';
	MargBuf[LMARG + 1] = (i % 10) + '0';
	if ((i = (right * 10 + offset + 15) / 10) > max) {
		i = max;
	}
	MargBuf[RMARG + 0] = ((i % 100) / 10) + '0';
	MargBuf[RMARG + 1] = (i % 10) + '0';
	return(MARGLEN);
}
@


1.3
log
@V1.3 Gamma 15
@
text
@@


1.2
log
@removed linefeed from init (aRIN) code
V1.3 gamma 1 check-in
@
text
@d1 4
a4 8
/* diablo C-150 special printer functions */
 
/****** printer.device/printers/Diablo_C-150_special_functions **********
 *
 *   NAME
 *   Diablo C-150 special functions implemented:
 * 
 ************************************************************************/
d6 1
a6 1
#include	"exec/types.h"
d10 2
a11 1
extern struct PrinterData *PD;
d13 8
a20 3
DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
d22 7
a28 4
   BYTE *vline;
   UBYTE *currentVMI; /* used for color on this printer */
   BYTE *crlfFlag;
   UBYTE Parms[];
d30 1
a30 4
    int x=0;
    int y=0;
    static BYTE ISOcolorTable[10]= {49,51,53,52,55,50,54,48,49,49};
    static unsigned char initMarg[]="\033l00\015\033r00\015";
d32 4
a35 3
if(*command==aRIN) {
   *currentVMI=0x70; /* white background, black text */
    outputBuffer[x++]='\015';
d37 6
a42 4
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}
d44 4
a47 4
	if (*command == aSLRM) {
		Parms[0] += 4;
		if (Parms[0] > 90) {
			Parms[0] = 90;
d49 2
a50 3
		Parms[1] += 5;
		if (Parms[1] > 90) {
			Parms[1] = 90;
d52 19
a70 6
		initMarg[2] = (Parms[0] / 10) | '0'; 
		initMarg[3] = (Parms[0] % 10) | '0';
		initMarg[7] = (Parms[1] / 10) | '0'; 
		initMarg[8] = (Parms[1] % 10) | '0';
		while(y < 10) {
			outputBuffer[x++] = initMarg[y++];
d75 20
a94 4
if(*command==aSFC)
	{
if(Parms[0]==39)Parms[0]=30; /* set defaults */
if(Parms[0]==49)Parms[0]=47;
d96 2
a97 8
if(Parms[0]<40) *currentVMI=((*currentVMI)&240)+(Parms[0]-30);
else *currentVMI=((*currentVMI)&15)+((Parms[0]-40)*16);

	outputBuffer[x++]='\033';
	outputBuffer[x++]='@@';
	outputBuffer[x++]=ISOcolorTable[(*currentVMI)&15];
	outputBuffer[x++]=ISOcolorTable[(((*currentVMI)&240)/16)];
	return(x);
d100 2
a101 1
if(*command==aRIS) PD->pd_PWaitEnabled=253;
d103 23
a125 1
return(0);
@


1.1
log
@Initial revision
@
text
@a32 1
    outputBuffer[x++]='\012';
a37 3
if(*command==aSLRM) {
    Parms[0]=Parms[0]+4;
    if(Parms[0]<5)Parms[0]=5;
d39 18
a56 2
    Parms[1]=Parms[1]+5;
    if(Parms[1]>90)Parms[1]=90;
a57 7
    initMarg[2]=(char)((Parms[0]/10)+'0'); 
    initMarg[3]=(char)((Parms[0]-(UBYTE)(Parms[0]/10)*10)+'0');
    initMarg[7]=(char)((Parms[1]/10)+'0'); 
    initMarg[8]=(char)((Parms[1]-(UBYTE)(Parms[1]/10)*10)+'0');
    while(y<10)outputBuffer[x++]=initMarg[y++];
    return(x);
}
@
