head     1.11;
branch   ;
access   ;
symbols  V38_59:1.10 V38_57:1.10 V36_46:1.9 V36_43:1.9 L35_41:1.8 L35_40:1.7 L35_39:1.7 L35_37:1.6 L35_36:1.6;
locks    ; strict;
comment  @ * @;


1.11
date     92.05.13.15.01.26;  author davidj;  state Exp;
branches ;
next     1.10;

1.10
date     91.06.28.14.11.49;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     90.04.06.20.08.21;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.06.10.15.23.31;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.04.15.16.58.10;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     87.11.17.13.38.46;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.10.27.15.32.58;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.01.09.22.41;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.09.09.06.44.27;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.08.24.18.34.29;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.19.21;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.11
log
@CmdStart wasn't NULL terminated.
@
text
@/*** hp/render.c ********************************************************
 *
 * render.c -- graphics rendering
 *
 *	$Id: render.c,v 1.10 91/06/28 14:11:49 darren Exp Locker: davidj $
 *
 *	Copyright (c) 1987,1991 Commodore-Amiga, Inc.
 *	All Rights Reserved
 *
 **********************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <devices/printer.h>
#include <devices/prtbase.h>

#define NUMSTARTCMD	7	/* # of cmd bytes before binary data */
#define NUMENDCMD	0	/* # of cmd bytes after binary data */
#define NUMTOTALCMD (NUMSTARTCMD + NUMENDCMD)	/* total of above */

extern SetDensity();
/*
	00-04	\033&l0L	perf skip mode off
	05-11	\033*t075R	set raster graphics resolution (dpi)
	12-16	\033*r0A	start raster graphics
*/
char StartCmd[18] = "\033&l0L\033*t075R\033*r0A";

Render(ct, x, y, status)
long ct, x, y, status;
{
	extern void *AllocMem(), FreeMem();

	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	static UWORD RowSize, BufSize, TotalBufSize, dataoffset;
	static UWORD huns, tens, ones; /* used to program buffer size */
	UBYTE *ptr, *ptrstart;
	int i, err;

	/* set to NOERR for cases which do not set err */

	err=PDERR_NOERR;

	switch(status) {
		case 0 : /* Master Initialization */
			/*
				ct	- pointer to IODRPReq structure.
				x	- width of printed picture in pixels.
				y	- height of printed picture in pixels.
			*/
			RowSize = (x + 7) / 8;
			BufSize = RowSize + NUMTOTALCMD;
			TotalBufSize = BufSize * 2;
			PD->pd_PrintBuf = AllocMem(TotalBufSize, MEMF_PUBLIC);
			if (PD->pd_PrintBuf == NULL) {
				err = PDERR_BUFFERMEMORY; /* no mem */
			}
			else {
				ptr = PD->pd_PrintBuf;
				*ptr++ = 27;
				*ptr++ = '*';
				*ptr++ = 'b';	/* transfer raster graphics */
				*ptr++ = huns | '0';
				*ptr++ = tens | '0';
				*ptr++ = ones | '0';	/* printout width */
				*ptr = 'W';		/* terminator */
				ptr = &PD->pd_PrintBuf[BufSize];
				*ptr++ = 27;
				*ptr++ = '*';
				*ptr++ = 'b';	/* transfer raster graphics */
				*ptr++ = huns | '0';
				*ptr++ = tens | '0';
				*ptr++ = ones | '0';	/* printout width */
				*ptr = 'W';		/* terminator */
				dataoffset = NUMSTARTCMD;
			/* perf skip mode off, set dpi, start raster gfx */
				err = (*(PD->pd_PWrite))(StartCmd, 17);
			}
			break;

		case 1 : /* Scale, Dither and Render */
			/*
				ct	- pointer to PrtInfo structure.
				x	- 0.
				y	- row # (0 to Height - 1).
			*/
			Transfer(ct, y, &PD->pd_PrintBuf[dataoffset]);
			err = PDERR_NOERR; /* all ok */
			break;

		case 2 : /* Dump Buffer to Printer */
			/*
				ct	- 0.
				x	- 0.
				y	- # of rows sent (1 to NumRows).

				White-space strip.
			*/
			i = RowSize;
			ptrstart = &PD->pd_PrintBuf[dataoffset - NUMSTARTCMD];
			ptr = ptrstart + NUMSTARTCMD + i - 1;
			while (i > 0 && *ptr == 0) {
				i--;
				ptr--;
			}
			ptr = ptrstart + 3; /* get ptr to density info */
			*ptr++ = (huns = i / 100) | '0';
			*ptr++ = (i - huns * 100) / 10 | '0';
			*ptr = i % 10 | '0'; /* set printout width */
			err = (*(PD->pd_PWrite))(ptrstart, i + NUMTOTALCMD);
			if (err == PDERR_NOERR) {
				dataoffset = (dataoffset == NUMSTARTCMD ?
					BufSize : 0) + NUMSTARTCMD;
			}
			break;

		case 3 : /* Clear and Init Buffer */
			/*
				ct	- 0.
				x	- 0.
				y	- 0.
			*/
			ptr = &PD->pd_PrintBuf[dataoffset];
			i = RowSize;
			do {
				*ptr++ = 0;
			} while (--i);
			break;

		case 4 : /* Close Down */
			/*
				ct	- error code.
				x	- io_Special flag from IODRPReq struct
				y	- 0.
			*/
			err = PDERR_NOERR; /* assume all ok */
			/* if user did not cancel the print */
			if (ct != PDERR_CANCEL) {
				/* end raster graphics, perf skip mode on */
				if ((err = (*(PD->pd_PWrite))
					("\033*rB\033&l1L", 9)) == PDERR_NOERR) {
					/* if want to unload paper */
					if (!(x & SPECIAL_NOFORMFEED)) {
						/* eject paper */
						err = (*(PD->pd_PWrite))
							("\014", 1);
					}
				}
			}
			/*
				flag that there is no alpha data waiting that
				needs a formfeed (since we just did one)
			*/
			PED->ped_PrintMode = 0;
			 /* wait for both buffers to empty */
			(*(PD->pd_PBothReady))();
			if (PD->pd_PrintBuf != NULL) {
				FreeMem(PD->pd_PrintBuf, TotalBufSize);
			}
			break;

		case 5 : /* Pre-Master Initialization */
			/*
				ct	- 0 or pointer to IODRPReq structure.
				x	- io_Special flag from IODRPReq struct
				y	- 0.
			*/
			/* select density */
			SetDensity(x & SPECIAL_DENSITYMASK);
			break;
	}
	return(err);
}
@


1.10
log
@Change header, refer to public include files in the include
dir instead of relative to this directory, and make sure
'err' is set to NOERR for cases which do not set 'err' as
they should (or could).
@
text
@d5 1
a5 1
 *	$Id: render.c,v 1.9 91/06/28 14:10:00 darren Exp $
d29 1
a29 1
char StartCmd[17] = "\033&l0L\033*t075R\033*r0A";
@


1.9
log
@for rcs 4.x header change
@
text
@d1 10
a10 4
/*
	HP_LaserJet driver.
	David Berezowski - May/87.
*/
d16 2
a17 2
#include "../printer/prtbase.h"
#include "../printer/printer.h"
d43 4
@


1.8
log
@V1.3 Gamma 16
@
text
@@


1.7
log
@fixed docs for devcon
V1.3 Gamma 13
fixed docs for devcon
@
text
@d127 1
a127 1
				x	- io_Special flag from IODRPReq struct.
d159 1
a159 1
				x	- io_Special flag from IODRPReq struct.
@


1.6
log
@V1.3 Gamma 3 release
@
text
@d2 2
a3 2
	HP_LaserJet driver
	David Berezowski - May/87
d19 2
a20 2
	0-4		\033&l0L	perf skip mode off
	5-11	\033*t075R	set raster graphics resolution (dpi)
d41 1
a41 1
				ct	- pointer to IODRPReq structure (use with caution!).
d50 1
a50 1
				err = PDERR_BUFFERMEMORY; /* couldn't get the memory */
d56 1
a56 1
				*ptr++ = 'b';			/* transfer raster graphics */
d60 1
a60 1
				*ptr = 'W';				/* terminator */
d64 1
a64 1
				*ptr++ = 'b';			/* transfer raster graphics */
d68 1
a68 1
				*ptr = 'W';				/* terminator */
d70 1
a70 1
				/* perf skip mode off, set dpi, start raster graphics */
d78 2
a79 2
				x	- NA
				y	- row.
d87 3
a89 3
				ct	- NA.
				x	- NA.
				y	- # of rows sent (1 to PED->ped_NumRows).
d91 1
a91 2
				White-space strip.  Scan backwards through the buffer for
				the first non-zero data byte.  Send up to this point only.
d106 2
a107 2
				dataoffset =
					(dataoffset == NUMSTARTCMD ? BufSize : 0) + NUMSTARTCMD;
d113 3
a115 3
				ct	- NA.
				x	- NA.
				y	- NA.
d127 2
a128 2
				x	- io_Special flag from IODRPReq structure.
				y	- NA.
d131 2
a132 1
			if (ct != PDERR_CANCEL) { /* if user did not cancel the print */
d134 2
a135 2
				if ((err = (*(PD->pd_PWrite))("\033*rB\033&l1L", 9)) ==
					PDERR_NOERR) {
d138 3
a140 1
						err = (*(PD->pd_PWrite))("\014", 1); /* eject paper */
d145 2
a146 2
				flag that there is no alpha data waiting that needs
				a formfeed (since we just did one)
d149 2
a150 1
			(*(PD->pd_PBothReady))(); /* wait for both buffers to empty */
d158 3
a160 3
				ct	- NA.
				x	- io_Special flag from IODRPReq structure.
				y	- NA.
d162 2
a163 1
			SetDensity(x & SPECIAL_DENSITYMASK); /* select density */
@


1.5
log
@V1.3 gamma 1 check-in
@
text
@d89 1
a89 1
				y	- # of rows sent.
@


1.4
log
@V1.3 beta 4 check-in
@
text
@d19 3
a21 2
	0-6		\033*t075R	set raster graphics resolution (dpi)
	7-11	\033*r0A	start raster graphics
d23 1
a23 1
char StartCmd[] = "\033*t075R\033*r0A";
d70 2
a71 2
				/* set dpi, start raster graphics */
				err = (*(PD->pd_PWrite))(StartCmd, 12);
d133 3
a135 2
				/* end raster graphics */
				if ((err = (*(PD->pd_PWrite))("\033*rB", 4)) == PDERR_NOERR) {
d138 1
a138 1
						err = (*(PD->pd_PWrite))("\014", 1); /* unload paper */
@


1.3
log
@moved PWrite from case 5 to case 0.
@
text
@a11 1
#include "../printer/prtprivate.h"
@


1.2
log
@moved PWrite of density from case 5 to case 0
@
text
@d33 1
a33 1
	static UWORD RowSize, BufSize, TotalBufSize, dataoffset, ;
@


1.1
log
@Initial revision
@
text
@d19 5
a23 1
char density[8] = "\033*t075R"; /* set raster graphics resolution (dpi) */
d33 1
a33 1
	static UWORD RowSize, BufSize, TotalBufSize, dataoffset;
d70 2
a71 2
				/* start raster graphics */
				err = (*(PD->pd_PWrite))("\033*r0A", 5);
a158 1
			err = (*(PD->pd_PWrite))(density, 7); /* set density */
@
