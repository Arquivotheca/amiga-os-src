head     1.6;
branch   ;
access   ;
symbols  L35_44:1.4;
locks    ; strict;
comment  @ * @;


1.6
date     90.04.06.19.32.02;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.10.12.14.56;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.11.49.44;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.15.09;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.12.00;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.19.20.10.29;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs
V1.3 beta 2
@


1.6
log
@for rcs 4.x header change
@
text
@/*
	Transfer routine for CalComp ColorMaster driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, pcm)
struct PrtInfo *PInfo;	/* ptr to PrtInfo struct */
UWORD y;				/* row # */
UBYTE *ptr;				/* ptr to buffer */
UWORD pcm;				/* pcm color code (Yellow, Magenta, or Cyan) */
{
	extern struct PrinterData *PD;

	static UBYTE bit_table[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	UBYTE *dmatrix, Color, dvalue, threshold, bit;
	union colorEntry *ColorInt;
	UWORD x, width, sx, *sxptr;

	/* pre-compute */
	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos; /* get starting x position */
	ColorInt = PInfo->pi_ColorInt; /* get ptr to color intensities */
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width; /* get # of source pixels */

	/* pre-compute threshold; are we thresholding? */
	if (threshold = PInfo->pi_threshold) {
		dvalue = threshold ^ 15; /* yes, so pre-compute dither value */
		do { /* for all source pixels */
			/* pre-compute intensity value for this color */
			Color = ColorInt->colorByte[pcm];
			ColorInt++; /* bump ptr for next time */

			sx = *sxptr++;

			/* dither and render pixel */
			do { /* use this pixel 'sx' times */
				if (Color > dvalue) { /* if we should render this color */
					/* set bit in buffer */
					*(ptr + (x >> 3)) |= bit_table[x & 7];
				}
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
	else { /* not thresholding, pre-compute ptr to dither matrix */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		do { /* for all source pixels */
			/* pre-compute intensity value for this color */
			Color = ColorInt->colorByte[pcm];
			ColorInt++; /* bump ptr for next time */

			sx = *sxptr++;
	
			/* dither and render pixel */
			do { /* use this pixel 'sx' times */
				dvalue = dmatrix[x & 3]; /* pre-compute dither value */
				if (Color > dvalue) { /* if we should render this color */
					/* set bit in buffer */
					*(ptr + (x >> 3)) |= bit_table[x & 7];
				}
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
}
@


1.5
log
@*** empty log message ***
@
text
@@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@@


1.3
log
@separated BW, GREYSCALE, and COLOR printing
V1.3 gamma 1 check-in
@
text
@d22 1
a22 2
	UWORD x, width, sx, xmult, xmod;
	WORD etx, etx2;
d28 1
a28 3
	xmult = PInfo->pi_xmult; /* get x multiplier */
	xmod = PInfo->pi_xmod; /* get x modulas */
	etx = etx2 = PInfo->pi_etx; /* get x error term (twice) */
d39 1
a39 7
			/* scale pixel (DON'T CHANGE THIS CODE) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d58 1
a58 7
			/* scale pixel (DON'T CHANGE THIS CODE) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d3 1
d37 22
d62 4
a65 1
	}
d67 10
a76 16
	do { /* for all source pixels */
		/* pre-compute intensity value for this color */
		Color = ColorInt->colorByte[pcm];
		ColorInt++; /* bump ptr for next time */

		/* scale pixel (DON'T CHANGE THIS CODE) */
		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
		}

		/* dither and render pixel */
		do { /* use this pixel 'sx' times */
			if (!threshold) { /* if we are not thresholding */
d78 8
a85 7
			}
			if (Color > dvalue) { /* if we should render this color */
				*(ptr + (x >> 3)) |= bit_table[x & 7]; /* set bit in buffer */
			}
			++x; /* done 1 more printer pixel */
		} while (--sx);
	} while (--width);
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
#include "../printer/prtprivate.h"
d26 6
a31 6
	x = PInfo->xpos; /* get starting x position */
	ColorInt = PInfo->ColorInt; /* get ptr to color intensities */
	xmult = PInfo->xmult; /* get x multiplier */
	xmod = PInfo->xmod; /* get x modulas */
	etx = etx2 = PInfo->etx; /* get x error term (twice) */
	width = PInfo->width; /* get # of source pixels */
d34 1
a34 1
	if (threshold = PInfo->threshold) {
d38 1
a38 1
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
@
