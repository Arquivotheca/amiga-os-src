head     1.4;
branch   ;
access   ;
symbols  V36_56:1.3 L35_54:1.3 L35_53:1.3 L35_51:1.2 L35_50:1.1 L35_49:1.1 L35_45:1.0 L35_44:1.0;
locks    ; strict;
comment  @*   @;


1.4
date     90.04.06.19.31.49;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.26.17.54.55;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.05.20.00.43;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.15.17.05.35;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     88.01.15.15.54.18;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to RCS
V1.3 Gamma 6 release
@


1.4
log
@for rcs 4.x header change
@
text
@#include <exec/types.h>
#include <exec/execbase.h>
#include <devices/parallel.h>
#include <devices/serial.h>
#include <hardware/cia.h>
#include "../printer/prtbase.h"

#define PRTFLAGS	(CIAF_PRTRSEL | CIAF_PRTRPOUT | CIAF_PRTRBUSY)

#define DEBUG	0

/*
	This routine is a special kludge required for this printer
	due to a problem with communications hand shaking between multiple
	dumps.  This code checks to make sure that the communication port is
	SELECTED, NOT OUT OF PAPER, and NOT BUSY before returning control.
*/
PrinterReady()
{
	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;
	extern struct ExecBase *SysBase;

	union {
		struct IOExtPar par;
		struct IOExtSer ser;
	} ioreq;
	LONG timeout;
	UWORD status;

	timeout = PED->ped_TimeoutSecs * SysBase->VBlankFrequency;
#if DEBUG
	kprintf("timeout=%ld", timeout);
#endif DEBUG
	if (PD->pd_Preferences.PrinterPort == PARALLEL_PRINTER) {
		ioreq.par = PD->pd_ior0.pd_p0; /* copy io request */
		ioreq.par.IOPar.io_Command = PDCMD_QUERY;
		do { /* wait until timeout or printer ready */
#if DEBUG
			kprintf("+");
#endif DEBUG
			DoIO(&ioreq); /* check parallel printer status */
#if DEBUG
			kprintf("-");
#endif DEBUG
			status = ioreq.par.io_Status;
			if ((status & PRTFLAGS) != CIAF_PRTRSEL) {
#if DEBUG
					kprintf("(");
#endif DEBUG
					WaitTOF();
#if DEBUG
					kprintf(") ");
#endif DEBUG
			}
			else {
				break;
			}
		} while (--timeout);
	}
	else { /* SERIAL_PRINTER */
		ioreq.ser = PD->pd_ior0.pd_s0; /* copy io request */
		ioreq.ser.IOSer.io_Command = SDCMD_QUERY;
		do { /* wait until timeout or printer ready */
#if DEBUG
			kprintf("+");
#endif DEBUG
			DoIO(&ioreq);
#if DEBUG
			kprintf("-");
#endif DEBUG
			status = ioreq.ser.io_Status;
			if (status & CIAF_COMCTS) {
#if DEBUG
					kprintf("(");
#endif DEBUG
					WaitTOF();
#if DEBUG
					kprintf(") ");
#endif DEBUG
			}
			else {
				break;
			}
		} while (--timeout);
	}
#if DEBUG
	if ((status & PRTFLAGS) != CIAF_PRTRSEL) {
		kprintf("end: busy\n");
	}
	else {
		kprintf("end: ready\n");
	}
#endif DEBUG
}
@


1.3
log
@changed PWait call to WaitTOF to fix cancel bug
V1.3 Gamma 20
@
text
@@


1.2
log
@V1.3 Gamma 15
@
text
@d2 1
d13 1
a13 1
	This routine is a special kludge required for the CalComp Colormaster
d22 1
d31 4
a34 1
	timeout = PED->ped_TimeoutSecs * 10;
d39 3
d43 3
d49 1
a49 1
				kprintf("busy, ");
d51 4
a54 1
				PWait(0, 100); /* wait for 1/10 second */
d56 4
a59 1
		} while (--timeout && (status & CIAF_PRTRBUSY));
d65 3
d69 3
d75 1
a75 1
				kprintf("busy, ");
d77 4
a80 1
				PWait(0, 100); /* wait for 1/10 second */
d82 4
a85 1
		} while (--timeout && (status & CIAF_COMCTS));
d88 5
a92 2
	if (timeout < PED->ped_TimeoutSecs - 1) {
		kprintf("ready\n");
@


1.1
log
@fixed docs for devcon
@
text
@d29 1
a29 1
	timeout = PED->ped_TimeoutSecs;
d40 1
a40 1
				PWait(1, 0); /* wait for 1 second */
d54 1
a54 1
				PWait(1, 0); /* wait for 1 second */
@


1.0
log
@added to rcs
@
text
@d12 3
a14 3
	This routine is a special kludge required for the CalComp Colormaster due
	to a problem with communications hand shaking between multiple dumps.
	This code checks to make sure that the communication port is
@
