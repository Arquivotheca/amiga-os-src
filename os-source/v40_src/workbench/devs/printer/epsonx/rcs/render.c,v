head     1.11;
branch   ;
access   ;
symbols  V38_42:1.11 V36_38:1.10 L35_36:1.9 L35_35:1.9 L35_34:1.9 L35_30:1.7 L35_29:1.7 L35_27:1.7 L35_26:1.6 L35_18:1.5;
locks    ; strict;
comment  @ * @;


1.11
date     91.07.10.11.32.06;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     90.04.06.20.04.45;  author daveb;  state Exp;
branches ;
next     1.9;

1.9
date     88.06.05.18.05.17;  author daveb;  state Exp;
branches ;
next     1.8;

1.8
date     88.05.18.13.17.44;  author daveb;  state Exp;
branches ;
next     1.7;

1.7
date     88.04.14.12.04.07;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.04.04.21.14.34;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     87.11.17.12.24.07;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     87.10.27.15.30.42;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.01.09.20.58;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.09.01.12.53.21;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.17.13;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.11
log
@Change for Euor Ax paper size support - used calced max columns
instead of hard-coded 80 or 136
@
text
@/*** epsonX/render.c *************************************************
 *
 * render.c -- graphics rendering
 *
 *	$Id: render.c,v 1.12 91/07/09 14:00:00 darren Exp $
 *
 *	Copyright (c) 1987,1991 Commodore-Amiga, Inc.
 *	All Rights Reserved
 *
 **********************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>

#include <devices/printer.h>
#include <devices/prtbase.h>
#include <devices/prtgfx.h>

/*
	EpsonX (EX/FX/JX/LX/MX/RX) driver.
	David Berezowski - October/87.
*/

#define NUMSTARTCMD	7	/* # of cmd bytes before binary data */
#define NUMENDCMD	1	/* # of cmd bytes after binary data */
#define NUMTOTALCMD 	(NUMSTARTCMD + NUMENDCMD)	/* total of above */
#define NUMLFCMD	4	/* # of cmd bytes for linefeed */
#define MAXCOLORBUFS	4	/* max # of color buffers */

#define STARTLEN	19
#define PITCH		1
#define CONDENSED	2
#define LMARG		8
#define RMARG		11
#define DIREC		15

static ULONG TwoBufSize;
static UWORD RowSize, ColorSize, NumColorBufs, dpi_code, spacing;
static UWORD colorcodes[MAXCOLORBUFS];

Render(ct, x, y, status)
long ct, x, y, status;
{
	extern void *AllocMem(), FreeMem();

	extern struct PrinterData *PD;
	extern struct PrinterExtendedData *PED;

	UBYTE *CompactBuf();
	static ULONG BufSize, TotalBufSize, dataoffset;
	static UWORD spacing, colors[MAXCOLORBUFS];
	/*
		00-01	\003P		set pitch (10 or 12 cpi)
		02-02	\022		set condensed fine (on or off)
		03-05	\033W\000	enlarge off
		06-08	\033ln		set left margin to n
		09-11	\033Qn		set right margin to n
		12-12	\015		carriage return
		13-15	\033U1		set uni-directional mode
		16-18	\033t\000	see kludge note below
		Kludge to get this to work on a CBM_MPS-1250  which interprets
		'ESCr' as go into reverse print mode.  The 'ESCt' tells it to
		get out of reverse print mode.  The 'NULL' is ignored by the
		CBM_MPS-1250 and required by all Epson printers as the
		terminator for the 'ESCtNULL' command which means select
		normal char set (which has no effect).
	*/
	static UBYTE StartBuf[STARTLEN] =
		"\033P\022\033W\000\033ln\033Qn\015\033U1\033t\000";
	UBYTE *ptr, *ptrstart;
	int i, err;

	switch(status) {
		case 0 : /* Master Initialization */
			/*
				ct	- pointer to IODRPReq structure.
				x	- width of printed picture in pixels.
				y	- height of printed picture in pixels.
			*/
			RowSize = x;
			ColorSize = RowSize + NUMTOTALCMD;
			if (PD->pd_Preferences.PrintShade == SHADE_COLOR) {
				NumColorBufs = MAXCOLORBUFS;
				colors[0] = ColorSize * 3; /* Black */
				colors[1] = ColorSize * 0; /* Yellow */
				colors[2] = ColorSize * 1; /* Magenta */
				colors[3] = ColorSize * 2; /* Cyan */
				colorcodes[0] = 4; /* Yellow */
				colorcodes[1] = 1; /* Magenta */
				colorcodes[2] = 2; /* Cyan */
				colorcodes[3] = 0; /* Black */
			}
			else { /* grey-scale or black&white */
				NumColorBufs = 1;
				colors[0] = ColorSize * 0; /* Black */
				colorcodes[0] = 0; /* Black */
			}
			BufSize = ColorSize * NumColorBufs + NUMLFCMD;
			if (PED->ped_YDotsInch == 216) {
				TwoBufSize = BufSize * 3;
				TotalBufSize = BufSize * 6;
			}
			else if (PED->ped_YDotsInch == 144) {
				TwoBufSize = BufSize * 2;
				TotalBufSize = BufSize * 4;
			}
			else {
				TwoBufSize = BufSize * 1;
				TotalBufSize = BufSize * 2;
			}
			PD->pd_PrintBuf = AllocMem(TotalBufSize, MEMF_PUBLIC);
			if (PD->pd_PrintBuf == NULL) {
				err = PDERR_BUFFERMEMORY;
			}
			else {
				dataoffset = NUMSTARTCMD;
				/*
					This printer prints graphics within its
					text margins.  This code makes sure the
					printer is in 10 cpi and then sets the
					left and right margins to their minimum
					and maximum values (respectively).  A
					carriage return is sent so that the
					print head is at the leftmost position
					as this printer starts printing from
					the print head's position.  The printer
					is put into unidirectional mode to
					reduce wavy vertical lines.
				*/
				StartBuf[PITCH] = 'P'; /* 10 cpi */
				StartBuf[CONDENSED] = '\022'; /* off */
				/* left margin of 1 */
				StartBuf[LMARG] = 0;
				/* right margin of 80 or 136 (or other Ax size) */
				StartBuf[RMARG] = PED->ped_MaxColumns;
				/* uni-directional mode */
				StartBuf[DIREC] = '1';
				err = (*(PD->pd_PWrite))(StartBuf, STARTLEN);
			}
			break;

		case 1 : /* Scale, Dither and Render */
			/*
				ct	- pointer to PrtInfo structure.
				x	- 0.
				y	- row # (0 to Height - 1).
			*/
			Transfer(ct, y, &PD->pd_PrintBuf[dataoffset], colors,
				BufSize);
			err = PDERR_NOERR; /* all ok */
			break;

		case 2 : /* Dump Buffer to Printer */
			/*
				ct	- 0.
				x	- 0.
				y	- # of rows sent (1 to NumRows).

			*/
			/* white-space strip */
			ptrstart = &PD->pd_PrintBuf[dataoffset - NUMSTARTCMD];
			if (PED->ped_YDotsInch == 72) {
				/* y range : 1 to 8 */
				y = y * 3 - spacing;
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, y, 1);
			}
			else if (PED->ped_YDotsInch == 144) {
				/* y range : 1 to 16 */
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, 2, 1);
				if (y > 1) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize],
						ptr, y * 3 / 2 - 2, 0);
				}
			}
			else if (PED->ped_YDotsInch == 216) {
				/* y range : 1 to 24 */
				ptr = CompactBuf(ptrstart + NUMSTARTCMD,
					ptrstart, 1, 1);
				if (y > 1) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize],
						ptr, 1, 0);
				}
				if (y > 2) {
					ptr = CompactBuf(&PD->pd_PrintBuf[
						dataoffset + BufSize * 2],
						ptr, y - 2, 0);
				}
			}
			err = (*(PD->pd_PWrite))(ptrstart, ptr - ptrstart);
			if (err == PDERR_NOERR) {
				dataoffset = (dataoffset == NUMSTARTCMD ?
					TwoBufSize : 0) + NUMSTARTCMD;
			}
			break;

		case 3 : /* Clear and Init Buffer */
			/*
				ct	- 0.
				x	- 0.
				y	- 0.
			*/
			ClearAndInit(&PD->pd_PrintBuf[dataoffset]);
			err = PDERR_NOERR;
			break;

		case 4 : /* Close Down */
			/*
				ct	- error code.
				x	- io_Special flag from IODRPReq.
				y	- 0.
			*/
			err = PDERR_NOERR; /* assume all ok */
			/* if user did not cancel print */
			if (ct != PDERR_CANCEL) {
				/* restore preferences pitch and margins */
				if (PD->pd_Preferences.PrintPitch == ELITE) {
					StartBuf[PITCH] = 'M'; /* 12 cpi */
				}
				else if (PD->pd_Preferences.PrintPitch == FINE) {
					StartBuf[CONDENSED] = '\017'; /* on */
				}
				StartBuf[LMARG] =
					PD->pd_Preferences.PrintLeftMargin - 1;
				StartBuf[RMARG] =
					PD->pd_Preferences.PrintRightMargin;
				StartBuf[DIREC] = '0'; /* bi-directional */
				err = (*(PD->pd_PWrite))(StartBuf, STARTLEN);
			}
			(*(PD->pd_PBothReady))();
			if (PD->pd_PrintBuf != NULL) {
				FreeMem(PD->pd_PrintBuf, TotalBufSize);
			}
			break;

		case 5 :  /* Pre-Master Initialization */
			/*
				ct	- 0 or pointer to IODRPReq structure.
				x	- io_Special flag from IODRPReq.
				y	- 0.
			*/
			/* kludge for sloppy tractor mechanism */
			spacing = PD->pd_Preferences.PaperType == SINGLE ?
				1 : 0;
			dpi_code = SetDensity(x & SPECIAL_DENSITYMASK);
			err = PDERR_NOERR;
			break;
	}
	return(err);
}

UBYTE *CompactBuf(ptrstart, ptr2start, y, flag)
UBYTE *ptrstart, *ptr2start;
long y;
int flag; /* 0 - not first pass, !0 - first pass */
{
	static int x;
	UBYTE *ptr, *ptr2;
	long ct;
	int i;

	ptr2 = ptr2start; /* where to put the compacted data */
	if (flag) {
		x = 0; /* flag no transfer required yet */
	}
	for (ct=0; ct<NumColorBufs; ct++, ptrstart += ColorSize) {
		i = RowSize;
		ptr = ptrstart + i - 1;
		while (i > 0 && *ptr == 0) {
			i--;
			ptr--;
		}
		if (i != 0) { /* if data */
			*(++ptr) = 13;			/* <cr> */
			ptr = ptrstart - NUMSTARTCMD;
			*ptr++ = 27;
			*ptr++ = 'r';
			*ptr++ = colorcodes[ct];	/* color */
			*ptr++ = 27;
			*ptr++ = dpi_code;		/* density */
			*ptr++ = i & 0xff;
			*ptr++ = i >> 8;		/* size */
			i += NUMTOTALCMD;
			if (x != 0) { /* if must transfer data */
				/* get src start */
				ptr = ptrstart - NUMSTARTCMD;
				do { /* transfer and update dest ptr */
					*ptr2++ = *ptr++;
				} while (--i);
			}
			else { /* no transfer required */
				ptr2 += i; /* update dest ptr */
			}
		}
		if (i != RowSize + NUMTOTALCMD) { /* if compacted or 0 */
			x = 1; /* flag that we need to transfer next time */
		}
	}
	*ptr2++ = 13; /* cr */
	*ptr2++ = 27;
	*ptr2++ = 'J';
	*ptr2++ = y; /* y/216 lf */
	return(ptr2);
}

ClearAndInit(ptr)
UBYTE *ptr;
{
	ULONG *lptr, i, j;

	/*
		Note : Since 'NUMTOTALCMD + NUMLFCMD' is > 3 bytes if is safe
		to do the following to speed things up.
	*/
	i = TwoBufSize - NUMTOTALCMD - NUMLFCMD;
	j = (ULONG)ptr;
	if (!(j & 1)) { /* if on a word boundary, clear by longs */
		i = (i + 3) / 4;
		lptr = (ULONG *)ptr;
		do {
			*lptr++ = 0;
		} while (--i);
	}
	else { /* clear by bytes */
		do {
			*ptr++ = 0;
		} while (--i);
	}
}
@


1.10
log
@for rcs 4.x header change
@
text
@d1 10
a10 4
/*
	EpsonX (EX/FX/JX/LX/MX/RX) driver.
	David Berezowski - October/87.
*/
a15 2
#include "../printer/printer.h"
#include "../printer/prtbase.h"
d17 9
d136 2
a137 3
				/* right margin of 80 or 136 */
				StartBuf[RMARG] = PD->pd_Preferences.
					PaperSize == W_TRACTOR ? 136 : 80;
@


1.9
log
@V1.3 Gamma 15
@
text
@@


1.8
log
@clear and restore margins before and after graphic dumps
V1V1.3 Gamma 15
@
text
@d19 6
a24 4
#define STARTLEN	10
#define LMARG		1
#define RMARG		4
#define DIREC		9
d42 14
a55 4
		00-02	\033\000L	set left margin to 0
		03-05	\033\377q	set right margin to 255
		06-06	\015		carriage return
		07-09	\033U1		set uni-directional mode
d57 2
a58 1
	static UBYTE StartCmd[STARTLEN] = "\033\000L\033\377q\015\033U1";
d106 21
a126 2
				StartBuf[LMARG] = 1;
				StartBuf[RMARG] = 255;
a127 1
				/* set margins, cr, uni-directional mode on */
d209 7
d217 1
a217 1
					PD->pd_Preferences.PrintLeftMargin;;
d220 1
a220 2
				StartBuf[DIREC] = '0';
				/* reset margins, cr, bi-directional mode on */
@


1.7
log
@V1.3 Gamma 11 release
@
text
@d19 5
d39 7
d93 5
a97 2
				/* cr, uni-directional mode on */
				err = (*(PD->pd_PWrite))("\015\033U1", 4);
d178 7
a184 2
				/* uni-directional mode off */
				err = (*(PD->pd_PWrite))("\033U0", 3);
@


1.6
log
@added 108 and 216 ydpi support
V1.3 Gamma 10 release
@
text
@d3 1
a3 1
	David Berezowski - October/87
a18 2
#define DEBUG0	0

d40 1
a40 1
				ct	- 
d67 1
a67 1
			else if (PED->ped_YDotsInch == 108) {
a74 5
#if DEBUG0
			kprintf("RS=%ld, CS=%ld, BS=%ld, 2BS=%ld, TBS=%ld\n",
				RowSize, ColorSize, BufSize,
				TwoBufSize, TotalBufSize);
#endif DEBUG0
d90 1
a90 1
				y	- row.
d104 1
d112 1
a112 1
			else if (PED->ped_YDotsInch == 108) {
@


1.5
log
@removed 'y == 0' check from case 2
V1.3 Gamma 3 release
@
text
@d13 2
a14 2
#define NUMSTARTCMD		7	/* # of cmd bytes before binary data */
#define NUMENDCMD		1	/* # of cmd bytes after binary data */
d16 1
a16 1
#define NUMLFCMD		4	/* # of cmd bytes for linefeed */
d19 6
d33 4
a36 6
	static UWORD RowSize, ColorSize, BufSize, TotalBufSize;
	static UWORD dataoffset, spacing, dpi_code;
	static UWORD colors[MAXCOLORBUFS]; /* color ptrs */
	static UWORD colorcodes[MAXCOLORBUFS]; /* printer color codes */
	static UWORD NumColorBufs; /* actually number of color buffers req. */
	UBYTE *ptr, *ptrstart, *ptr2, *ptr2start;
d42 1
a42 1
				ct	- pointer to IODRPReq structure (use with caution!).
d47 2
a48 2
			ColorSize = RowSize + NUMTOTALCMD; /* size of each color buf */
			if (PD->pd_Preferences.PrintShade == SHADE_COLOR) { /* color */
d65 17
a81 1
			TotalBufSize = BufSize * 2;
d96 1
a96 1
head     1.4;
access   ;
symbols  L35_541:1.4 L35_539:1.3 L35_534:1.3 L35_528:1.3 L35_522:1.3 L35_517:1.3;
locks    ; strict;
comment  @ * @;


1.4
date     88.04.10.14.32.37;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.30.12.46.14;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.28.13.52.30;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.11.24.36;  author daveb;  state Exp;
branches ;
next     ;


desc
@V1.3 Beta 4 release
@


1.4
log
@V1.3 Gamma 10 release
@
text
@/********************************************************************/
/*               Commodore-Amiga, Inc.                              */
/*               prtgfx.h                                           */
/********************************************************************/

#ifndef  DEVICES_PRTGFX_H
#define  DEVICES_PRTGFX_H

#define	PCMYELLOW	0		/* byte index for yellow */
#define	PCMMAGENTA	1		/* byte index for magenta */
#define	PCMCYAN		2		/* byte index for cyan */
#define	PCMBLACK	3		/* byte index for black */
#define PCMBLUE		PCMYELLOW	/* byte index for blue */
#define PCMGREEN	PCMMAGENTA	/* byte index for green */
#define PCMRED		PCMCYAN		/* byte index for red */
#define PCMWHITE	PCMBLACK	/* byte index for white */

union colorEntry {
	ULONG colorLong;	/* quick access to all of YMCB */
	UBYTE colorByte[4];	/* 1 entry for each of YMCB */
	BYTE colorSByte[4];	/* ditto (except signed) */
};

struct PrtInfo { /* printer info */
	int (*pi_render)();		/* ptr to render function */
	struct RastPort *pi_rp;		/* source rastport */
	struct RastPort *pi_temprp;	/* temp 1-line high rastport */
	UWORD *pi_RowBuf;		/* array of color codes */
	UWORD *pi_HamBuf;		/* array of HAM color codes */
	union colorEntry *pi_ColorMap;	/* rastport colormap in YMCB values */
	union colorEntry *pi_ColorInt;	/* color intensities for entire row */
	union colorEntry *pi_HamInt;	/* HAM color ints for entire row */
	union colorEntry *pi_Dest1Int;	/* color intensities for dest1 row */
	union colorEntry *pi_Dest2Int;	/* color intensities for dest2 row */
	UWORD *pi_ScaleX;		/* array of scale values for x */
	UWORD *pi_ScaleXAlt;		/* alt array of scale values for x */
	UBYTE *pi_dmatrix;		/* ptr to dither matrix */
	UWORD *pi_TopBuf;		/* color codes for line above us */
	UWORD *pi_BotBuf;		/* color codes for line below us */

	UWORD pi_RowBufSize;		/* size of RowBuf array */
	UWORD pi_HamBufSize;		/* size of HamBuf array */
	UWORD pi_ColorMapSize;		/* size of ColorMap array */
	UWORD pi_ColorIntSize;		/* size of Color Intensities array */
	UWORD pi_HamIntSize;		/* size of Ham Intensities array */
	UWORD pi_Dest1IntSize;		/* size of Dest1Int array */
	UWORD pi_Dest2IntSize;		/* size of Dest2Int array */
	UWORD pi_ScaleXSize;		/* size of ScaleX array */
	UWORD pi_ScaleXAltSize;		/* size of ScaleXAlt array */

	UWORD pi_PrefsFlags;		/* copy of Preferences 'PrintFlags' */
	ULONG pi_special;		/* copy of io_Special bits */
	UWORD pi_xstart;		/* source x origin to print from */
	UWORD pi_ystart;		/* source y origin to print from */
	UWORD pi_width;			/* source width */
	UWORD pi_height;		/* source height */
	UWORD pi_pc;			/* dest width (Print Cols) */
	UWORD pi_pr;			/* dest height (Print Rows) */
	UWORD pi_ymult;			/* y multiple (used for y scaling) */
	UWORD pi_ymod;			/* y modulas (used for y scaling) */
	WORD pi_ety;			/* y error term (for y scaling) */
	UWORD pi_xpos;			/* left offset print position */
	UWORD pi_threshold;		/* threshold value (from prefs) */
	UWORD pi_tempwidth;		/* temp var for width */
	UWORD pi_flags;			/* internal flags */
};
#endif  DEVICES_PRTGFX_H
@


1.3
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d9 8
a16 4
#define	PCMYELLOW	0	/* byte index for blue/yellow */
#define	PCMMAGENTA	1	/* byte index for green/magenta */
#define	PCMCYAN		2	/* byte index for red/cyan */
#define	PCMBLACK	3	/* byte index for white/black */
d19 3
a21 3
    ULONG colorLong;	/* quick access to all of YMCB */
    UBYTE colorByte[4]; /* 1 entry for each of YMCB */
    BYTE colorSByte[4]; /* ditto (except signed) */
d25 1
a25 1
	int (*pi_render)();			/* ptr to printer specific render function */
d28 2
a29 2
	UWORD *pi_RowBuf;			/* array of color codes */
	UWORD *pi_HamBuf;			/* array of HAM color codes */
d35 1
a35 1
	UWORD *pi_ScaleX;			/* array of scale values for x */
d37 3
a39 3
	UBYTE *pi_dmatrix;			/* ptr to dither matrix */
	UWORD *pi_TopBuf;			/* array of color codes for line above us */
	UWORD *pi_BotBuf;			/* array of color codes for line below us */
d52 14
a65 10
	ULONG pi_special;			/* copy of io_Special bits */
	UWORD pi_xstart, pi_ystart;	/* source x,y origin to print from */
	UWORD pi_width, pi_height;	/* source width, height */
	UWORD pi_pc, pi_pr;			/* destination width, height */
	UWORD pi_ymult, pi_ymod;	/* y multiple and modulas (for y scaling) */
	WORD pi_ety;				/* y error term (for y scaling) */
	UWORD pi_xpos;				/* offset to start printing pict on paper */
	UWORD pi_threshold;			/* copy of threshold value (from prefs) */
	UWORD pi_tempwidth;			/* temp var for width */
	UWORD pi_flags;				/* internal flags */
@


1.2
log
@V1.3 Gamma 1 check-in
@
text
@a21 1
	int (*pi_scale)();			/* ptr to scaling function */
d29 4
d34 3
a36 10
	ULONG pi_special;			/* copy of io_Special bits */
	UWORD pi_xstart, pi_ystart;	/* source x,y origin to print from */
	UWORD pi_width, pi_height;	/* source width, height */
	UWORD pi_flags;				/* internal flags */
	UWORD pi_threshold;			/* copy of threshold value (from prefs) */
	WORD pi_etx, pi_ety;		/* x,y error terms (for x scaling) */
	UWORD pi_xmult, pi_xmod;	/* x multiple and modulas (for x scaling) */
	UWORD pi_ymult, pi_ymod;	/* y multiple and modulas (for y scaling) */
	UWORD pi_xpos;				/* offset to start printing pict on paper */
	UWORD pi_ColorMapSize;		/* size of ColorMap array */
d39 1
d42 5
a46 2
	UWORD pi_tempwidth, pi_tempxmult, pi_tempxmod; /* tmp vars for x scale */
	WORD pi_tempetx;			/* temp var for x scaling */
d48 3
d52 6
a57 6
	union colorEntry *pi_Dest1Int;	/* color intensities for dest1 row */
	union colorEntry *pi_Dest2Int;	/* color intensities for dest2 row */
	UWORD pi_Dest1IntSize;		/* size of Dest1Int array */
	UWORD pi_Dest2IntSize;		/* size of Dest2Int array */
	UWORD *pi_TopBuf;			/* array of color codes for line above us */
	UWORD *pi_BotBuf;			/* array of color codes for line below us */
@


1.1
log
@Initial revision
@
text
@d15 3
a17 2
    ULONG colorLong;
  