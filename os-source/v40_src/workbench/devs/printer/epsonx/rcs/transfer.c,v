head     1.7;
branch   ;
access   ;
symbols  L35_18:1.4;
locks    ; strict;
comment  @*   @;


1.7
date     90.08.29.15.22.49;  author darren;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.06.20.04.56;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.04.21.15.02;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.01.30.11.54.42;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.27.15.30.56;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.01.09.21.12;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.01.12.53.46;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.09.01.10.19.12;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.2 beta 3
@


1.7
log
@*** empty log message ***
@
text
@/*
	Transfer routine for EpsonX driver.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, colors, BufOffset)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
UWORD *colors; /* indexes to color buffers */
ULONG BufOffset;
{
	extern struct PrinterData *PD;
	extern struct PrinterData *PED;

	static UWORD bit_table[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	union colorEntry *ColorInt;
	UBYTE *bptr, *yptr, *mptr, *cptr, Black, Yellow, Magenta, Cyan;
	UBYTE *dmatrix, dvalue, threshold;
	UWORD x, width, sx, *sxptr, color, bit, x3;

	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;

	/* printer specific */
	if (PED->ped_YDotsInch == 216) {
		BufOffset *= y % 3;
		y /= 3;
	}
	else if (PED->ped_YDotsInch == 108) {
		BufOffset *= y & 1;
		y /= 2;
	}
	else {
		BufOffset = 0;
	}
	bit = bit_table[y & 7];
	bptr = ptr + colors[0] + BufOffset;
	yptr = ptr + colors[1] + BufOffset;
	mptr = ptr + colors[2] + BufOffset;
	cptr = ptr + colors[3] + BufOffset;

	/* pre-compute threshold; are we thresholding? */
	if (threshold = PInfo->pi_threshold) { /* thresholding */
		dvalue = threshold ^ 15;
		bptr += x;
		do { /* for all source pixels */
			/* pre-compute intensity values for Black component */
			Black = ColorInt->colorByte[PCMBLACK];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				if (Black > dvalue) {
					*bptr |= bit;
				}
				bptr++; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
	else { /* not thresholding, pre-compute ptr to dither matrix */
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		if (PD->pd_Preferences.PrintShade == SHADE_GREYSCALE) {
			bptr += x;
			do { /* for all source pixels */
				/* pre-compute intensity values for Black component */
				Black = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					if (Black > dmatrix[x & 3]) {
						*(bptr + x) |= bit;
					}
					x++; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
		else { /* color */
			do { /* for all source pixels */
				/* pre-compute intensity values for each color component */
				Black = ColorInt->colorByte[PCMBLACK];
				Yellow = ColorInt->colorByte[PCMYELLOW];
				Magenta = ColorInt->colorByte[PCMMAGENTA];
				Cyan = ColorInt->colorByte[PCMCYAN];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					x3 = x >> 3;
					dvalue = dmatrix[x & 3];
					if (Black > dvalue) {
						*(bptr + x) |= bit;
					}
					else  { /* black not rendered */
						if (Yellow > dvalue) {
							*(yptr + x) |= bit;
						}
						if (Magenta > dvalue) {
							*(mptr + x) |= bit;
						}
						if (Cyan > dvalue) {
							*(cptr + x) |= bit;
						}
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
	}
}
@


1.6
log
@for rcs 4.x header change
@
text
@@


1.5
log
@added 108 and 216 ydpi supprt
@
text
@@


1.4
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@d11 1
a11 1
Transfer(PInfo, y, ptr, colors)
d16 1
d19 1
a26 7
	/* pre-compute */
	/* printer specific */
	bptr = ptr + colors[0];
	yptr = ptr + colors[1];
	mptr = ptr + colors[2];
	cptr = ptr + colors[3];
	bit = bit_table[y & 7];
d32 18
@


1.3
log
@V1.3 gamma 1 check-in
@
text
@d23 1
a23 2
	UWORD x, width, sx, xmult, xmod, color, bit, x3;
	WORD etx, etx2;
d35 1
a35 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d47 1
a47 7
			/* scale pixel (DONT CHANGE THIS CODE) */
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d66 1
a66 7
				/* scale pixel (DONT CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
d85 1
a85 7
				/* scale pixel (DONT CHANGE THIS CODE) */
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
@


1.2
log
@V1.3 beta 4 check-in
@
text
@d2 2
a3 1
	Transfer routine for Epson_JX-80 driver.
d42 1
a42 1
	if (threshold = PInfo->pi_threshold) {
d44 21
d68 6
a73 3
	}
	/* set flag for whether or not we are doing a color printout */
	color = PD->pd_Preferences.PrintShade == SHADE_COLOR;
d75 7
a81 7
	do { /* for all source pixels */
		/* pre-compute intensity values for each color component */
		Black = ColorInt->colorByte[PCMBLACK];
		Yellow = ColorInt->colorByte[PCMYELLOW];
		Magenta = ColorInt->colorByte[PCMMAGENTA];
		Cyan = ColorInt->colorByte[PCMCYAN];
		ColorInt++;
d83 7
a89 6
		/* scale pixel (DON'T CHANGE THIS CODE) */
		sx = xmult;
		etx -= xmod;
		if (etx <= 0) {
			etx += etx2;
			sx++;
d91 8
d100 13
a112 15
		do { /* use this pixel 'sx' times */
			x3 = x >> 3;
			if (!threshold) {
				dvalue = dmatrix[x & 3];
			}
			if (Black > dvalue) {
				*(bptr + x) |= bit;
			}
			else  { /* black not rendered */
				if (color) {
					if (Yellow > dvalue) {
						*(yptr + x) |= bit;
					}
					if (Magenta > dvalue) {
						*(mptr + x) |= bit;
d114 10
a123 2
					if (Cyan > dvalue) {
						*(cptr + x) |= bit;
d125 5
a129 9
				}
			}
			++x; /* done 1 more printer pixel */
		} while (--sx);
	} while (--width);

/*	v1.2
	PD->pd_PrintBuf[dataoffset + x + colors[ct]] |= bit_table[y & 7];
*/
@


1.1
log
@added 'x' variable
@
text
@d8 1
a8 1
#include "../printer/prtprivate.h"
d33 6
a38 6
	x = PInfo->xpos;
	ColorInt = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	width = PInfo->width;
d41 1
a41 1
	if (threshold = PInfo->threshold) {
d45 1
a45 1
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
@


1.0
log
@added to rcs
@
text
@d22 1
a22 1
	UWORD width, sx, xmult, xmod, color, bit, x3;
@
