head     1.8;
branch   ;
access   ;
symbols  V38_42:1.8 V36_38:1.7 L35_36:1.6 L35_35:1.6 L35_34:1.5 L35_30:1.4 L35_29:1.4 L35_27:1.4 L35_26:1.3 L35_18:1.2;
locks    ; strict;
comment  @ * @;


1.8
date     91.07.10.11.30.21;  author darren;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.06.20.04.18;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.06.13.09.02.35;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.06.05.18.04.51;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.14.12.01.04;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.07.13.41.47;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.29.52;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.08.20.11.16.57;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 2
@


1.8
log
@Fix for upper-case-I-acute-accent (was printing as grave).
@
text
@/*
	Data.c table for EpsonX driver.
	David Berezowski - March/88.
*/

char *CommandTable[] ={
	"\375\033@@\375",/* 00 aRIS reset			*/
	"\377",		/* 01 aRIN initialize			*/
	"\012",		/* 02 aIND linefeed			*/
	"\015\012",	/* 03 aNEL CRLF				*/
	"\377",		/* 04 aRI reverse LF			*/

			/* 05 aSGR0 normal char set		*/
	"\0335\033-\376\033F",
	"\0334",	/* 06 aSGR3 italics on			*/
	"\0335",	/* 07 aSGR23 italics off		*/
	"\033-\001",	/* 08 aSGR4 underline on		*/
	"\033-\376",	/* 09 aSGR24 underline off		*/
	"\033E",	/* 10 aSGR1 boldface on			*/
	"\033F",	/* 11 aSGR22 boldface off		*/
	"\377",		/* 12 aSFC set foreground color		*/
	"\377",		/* 13 aSBC set background color		*/

			/* 14 aSHORP0 normal pitch		*/
	"\033P\022\033W\376",
			/* 15 aSHORP2 elite on			*/
	"\033M\022\033W\376",
	"\033P",	/* 16 aSHORP1 elite off			*/
			/* 17 aSHORP4 condensed fine on		*/
	"\017\033P\033W\376",
	"\022",		/* 18 aSHORP3 condensed fine off	*/
	"\033W\001",	/* 19 aSHORP6 enlarge on		*/
	"\033W\376",	/* 20 aSHORP5 enlarge off		*/

	"\377",		/* 21 aDEN6 shadow print on		*/
	"\377",		/* 22 aDEN5 shadow print off		*/
	"\033G",	/* 23 aDEN4 double strike on		*/
	"\033H",	/* 24 aDEN3 double strike off		*/
	"\033x\001",	/* 25 aDEN2 NLQ on			*/
	"\033x\376",	/* 26 aDEN1 NLQ off			*/

	"\033S\376",	/* 27 aSUS2 superscript on		*/
	"\033T",	/* 28 aSUS1 superscript off		*/
	"\033S\001",	/* 29 aSUS4 subscript on		*/
	"\033T",	/* 30 aSUS3 subscript off		*/
	"\033T",	/* 31 aSUS0 normalize the line		*/
	"\377",		/* 32 aPLU partial line up		*/
	"\377",		/* 33 aPLD partial line down		*/

	"\033R\376",	/* 34 aFNT0 Typeface 0			*/
	"\033R\001",	/* 35 aFNT1 Typeface 1			*/
	"\033R\002",	/* 36 aFNT2 Typeface 2			*/
	"\033R\003",	/* 37 aFNT3 Typeface 3			*/
	"\033R\004",	/* 38 aFNT4 Typeface 4			*/
	"\033R\005",	/* 39 aFNT5 Typeface 5			*/
	"\033R\006",	/* 40 aFNT6 Typeface 6			*/
	"\033R\007",	/* 41 aFNT7 Typeface 7			*/
	"\033R\010",	/* 42 aFNT8 Typeface 8			*/
	"\033R\011",	/* 43 aFNT9 Typeface 9			*/
	"\033R\012",	/* 44 aFNT10 Typeface 10		*/

	"\033p1",	/* 45 aPROP2 proportional on		*/
	"\033p0",	/* 46 aPROP1 proportional off		*/
	"\377",		/* 47 aPROP0 proportional clear		*/
	"\377",		/* 48 aTSS set proportional offset	*/
	"\377",		/* 49 aJFY5 auto left justify		*/
	"\377",		/* 50 aJFY7 auto right justify		*/
	"\377",		/* 51 aJFY6 auto full jusitfy		*/
	"\377",		/* 52 aJFY0 auto jusity off		*/
	"\377",		/* 53 aJFY3 letter space		*/
	"\377",		/* 54 aJFY1 word fill			*/

	"\0330",	/* 55 aVERP0 1/8" line spacing		*/
	"\0332",	/* 56 aVERP1 1/6" line spacing		*/
	"\033C",	/* 57 aSLPP set form length		*/
	"\033N",	/* 58 aPERF perf skip n (n > 0)		*/
	"\033O",	/* 59 aPERF0 perf skip off		*/

	"\377",		/* 60 aLMS set left margin		*/
	"\377",		/* 61 aRMS set right margin		*/
	"\377",		/* 62 aTMS set top margin 		*/
	"\377",		/* 63 aBMS set bottom margin		*/
	"\377",		/* 64 aSTBM set T&B margins		*/
	"\377",		/* 65 aSLRM set L&R margins		*/
	"\377",		/* 66 aCAM clear margins		*/

	"\377",		/* 67 aHTS set horiz tab		*/
	"\377",		/* 68 aVTS set vert tab			*/
	"\377",		/* 69 aTBC0 clear horiz tab		*/
	"\033D\376",	/* 70 aTBC3 clear all horiz tabs	*/
	"\377",		/* 71 aTBC1 clear vert tab		*/
	"\033B\376",	/* 72 aTBC4 clear all vert tabs		*/
			/* 73 aTBCALL clear all h & v tabs	*/
	"\033D\376\033B\376",
			/* 74 aTBSALL set default tabs		*/
	"\033D\010\020\030\040\050\060\070\100\110\120\130\376",

	"\377",		/* 75 aEXTEND extended commands		*/
	"\377"		/* 76 aRAW next 'n' chars are raw	*/
};

/*
   For each character from character 160 to character 255, there is
   an entry in this table, which is used to print (or simulate printing of)
   the full Amiga character set. (see AmigaDos Developer's Manual, pp A-3)
   This table is used only if there is a valid pointer to this table
   in the PEDData table in the printertag.asm file, and the VERSION is
   33 or greater.  Otherwise, a default table is used instead.
   To place non-printable characters in this table, you can either enter
   them as in C strings (ie \011, where 011 is an octal number, or as
   \\000 where 000 is any decimal number, from 1 to 3 digits.  This is
   usually used  to enter a NUL into the array (C has problems with it
   otherwise.), or if you forgot your octal calculator.  On retrospect,
   was a poor choice for this function, as you must say \\\\ to enter a
   backslash as a backslash.  Live and learn...
*/
char *ExtendedCharTable[] = {
	" ",					/* NBSP*/
	"\033R\007[\033R\\0",			/* i */
	"c\010|",				/* c| */
	"\033R\003#\033R\\0",			/* L- */
	"\033R\005$\033R\\0",			/* o */
	"\033R\010\\\\\033R\\0",		/* Y- */
	"|",					/* | */
	"\033R\002@@\033R\\0",			/* SS */

	"\033R\001~\033R\\0",			/* " */
	"c", 					/* copyright */
	"\033S\\0a\010_\033T",			/* a_ */
	"<",					/* << */
	"~",					/* - */
	"-",					/* SHY */
	"r",					/* registered trademark */
	"-",					/* - */

	"\033R\001[\033R\\0",			/* degrees */
	"+\010_",				/* +_ */
	"\033S\\0002\033T",			/* 2 */
	"\033S\\0003\033T",			/* 3 */
	"'",					/* ' */
	"u",					/* u */
	"P",					/* reverse P */
	"\033S\\000.\033T",			/* . */

	",",					/* , */
	"\033S\\0001\033T",			/* 1 */
	"\033R\001[\033R\\0\010-",		/* o_ */
	">",					/* >> */
	"\033S\\0001\033T\010-\010\033S\0014\033T",	/* 1/4 */
	"\033S\\0001\033T\010-\010\033S\0012\033T",	/* 1/2 */
	"\033S\\0003\033T\010-\010\033S\0014\033T",	/* 3/4 */
	"\033R\007]\033R\\0",			/* upside down ? */

	"A\010`",				/* `A */
	"A\010'",				/* 'A */
	"A\010^",				/* ^A */
	"A\010~",				/* ~A */
	"\033R\002[\033R\\0",			/* "A */
	"\033R\004]\033R\\0",			/* oA */
	"\033R\004[\033R\\0",			/* AE */
	"C\010,",				/* C, */

	"E\010`",				/* `E */
	"\033R\011@@\033R\\0",			/* 'E */
	"E\010^",				/* ^E */
	"E\010\033R\001~\033R\\0",		/* "E */
	"I\010`",				/* `I */
	"I\010'",				/* 'I */
	"I\010^",				/* ^I */
	"I\010\033R\001~\033R\\0",		/* "I */

	"D\010-",				/* -D */
	"\033R\007\\\\\033R\\0",		/* ~N */
	"O\010`",				/* `O */
	"O\010'",				/* 'O */
	"O\010^",				/* ^O */
	"O\010~",				/* ~O */
	"\033R\002\\\\\033R\\0",		/* "O */
	"x",					/* x */

	"\033R\004\\\\\033R\\0",		/* 0 */
	"U\010`",				/* `U */
	"U\010'",				/* 'U */
	"U\010^",				/* ^U */
	"\033R\002]\033R\\0",			/* "U */
	"Y\010'",				/* 'Y */
	"T",					/* Thorn */
	"\033R\002~\033R\\0",			/* B */

	"\033R\001@@\033R\\0",			/* `a */
	"a\010'",				/* 'a */
	"a\010^",				/* ^a */
	"a\010~",				/* ~a */
	"\033R\002{\033R\\0",			/* "a */
	"\033R\004}\033R\\0",			/* oa */
	"\033R\004{\033R\\0",			/* ae */
	"\033R\001\\\\\033R\\0",		/* c, */

	"\033R\001}\033R\\0",			/* `e */
	"\033R\001{\033R\\0",			/* 'e */
	"e\010^",				/* ^e */
	"e\010\033R\001~\033R\\0",		/* "e */
	"\033R\006~\033R\\0",			/* `i */
	"i\010'",				/* 'i */
	"i\010^",				/* ^i */
	"i\010\033R\001~\033R\\0",		/* "i */

	"d",					/* d */
	"\033R\007|\033R\\0",			/* ~n */
	"\033R\006|\033R\\0",			/* `o */
	"o\010'",				/* 'o */
	"o\010^",				/* ^o */
	"o\010~",				/* ~o */
	"\033R\002|\033R\\0",			/* "o */
	":\010-"				/* :- */

	"\033R\004|\033R\\0",			/* o/ */
	"\033R\001|\033R\\0",			/* `u */
	"u\010'",				/* 'u */
	"u\010^",				/* ^u */
	"\033R\002}\033R\\0",			/* "u */
	"y\010'",				/* 'y */
	"t",					/* thorn */
	"y\010\033R\001~\033R\\0"		/* "y */
};
@


1.7
log
@for rcs 4.x header change
@
text
@d168 1
a168 1
	"I\010`",				/* 'I */
@


1.6
log
@changed extended characters (i' o' and u') to use char-backspace-char
instead of characters from the 'Spain II' or 'Latin America' character
set since they are not found in all EpsonX.  This gives us compatibility
with the CBM_MPS-1250, CBM_MPS-1500, and CBM_MPS-1550.
V1.3 Gamma 17
@
text
@@


1.5
log
@V1.3 Gamma 15
@
text
@d204 1
a204 1
	"\033R\013{\033R\\0",			/* 'i */
d211 1
a211 1
	"\033R\013}\033R\\0",			/* 'o */
d219 1
a219 1
	"\033R\013~\033R\\0",			/* 'u */
@


1.4
log
@V1.3 Gamma 10 release
@
text
@d26 2
a27 1
	"\033M",	/* 15 aSHORP2 elite on			*/
d29 2
a30 1
	"\017",		/* 17 aSHORP4 condensed fine on		*/
@


1.3
log
@enhanced codes 160-255
V1.3 Gamma 10 release
@
text
@d1 4
a4 20
/****** printer.device/printers/EpsonX_functions ******************
 *
 *   NAME
 *   EpsonX functions implemented: 
 *  
 *      aRIS, aIND, aNEL, aSGR0, aSGR3, aSGR23, aSGR4, aSGR24, aSGR1, aSGR22,
 *      aSHORP0, aSHORP1, aSHORP2, aSHORP3, aSHORP4, aSHORP5, aSHORP6,
 *      aDEN1, aDEN2, aDEN3, aDEN4,
 *      aSUS0, aSUS1, aSUS2, aSUS3, aSUS4,
 *      aFNT0, aFNT1, aFNT2, aFNT3, aFNT4, aFNT5, aFNT6, aFNT7, aFNT8
 *      aFNT9, aFNT10,
 *      aPROP1, aPROP2, aRI
 *      aVERP0, aVERP1, aSLPP, aPERF, aPERF0,
 *      aTBC3, aTBC4, aTBCALL, aTBSALL
 *
 *      special functions implemented:
 *      aRIN, aRI, aSUS0, aSUS1, aSUS2, aSUS3, aSUS4, aCAM
 *      aPLU, aPLD, aSLRM, aSFC, aSBC
 *
 ************************************************************************/
d7 5
a11 5
         "\375\033@@\375",       /*reset              RIS      ESCc */
         "\377",        /*initialize*/
         "\012",        /* lf                IND      ESCD */
         "\015\012",    /* return,lf         NEL      ESCE */
         "\377",        /* reverse lf        RI       ESCM */
d13 10
a22 10
		        /*normal char set    SGR 0    ESC[0m */
         "\0335\033-\376\033F",
         "\0334",       /*italics on         SGR 3    ESC[3m */
         "\0335",       /*italics off        SGR 23   ESC[23m */
         "\033-\001",   /*underline on       SGR 4    ESC[4m */
         "\033-\376",   /*underline off      SGR 24   ESC[24m */
         "\033E",       /*boldface on        SGR 1    ESC[1m */
         "\033F",       /*boldface off       SGR 22   ESC[22m */
         "\377",        /* set foreground color */
         "\377",        /* set background color */
d24 8
a31 8
			/* normal char set   SHORP    ESC[0w */
	 "\033P\022\033W\376",
         "\033M",       /*elite on           SHORP    ESC[2w */
         "\033P",       /*elite off          SHORP    ESC[1w */
         "\017",        /*condensed(fine) on SHORP    ESC[4w */
         "\022",        /*condensed off      SHORP    ESC[3w */
         "\033W\001",   /*enlarged on        SHORP    ESC[6w */
         "\033W\376",   /*enlarged off       SHORP    ESC[5w */
d33 6
a38 6
         "\377",        /*shadow print on    DEN6     ESC[6"z */
         "\377",        /*shadow print off   DEN5     ESC[5"z */
         "\033G",       /*doublestrike on    DEN4     ESC[4"z */
         "\033H",       /*doublestrike off   DEN3     ESC[3"z */
         "\033x\001",   /* NLQ on            DEN2     ESC[2"z */
         "\033x\376",   /* NLQ off 	     DEN1     ESC[1"z */
d40 7
a46 7
         "\033S\376",   /*superscript on              ESC[2u */
         "\033T",       /*superscript off	      ESC[1u */
         "\033S\001",   /*subscript on   	      ESC[4u */
         "\033T",       /*subscript off  	      ESC[3u */
	 "\033T",	/*normalize		      ESC[0u */
         "\377",        /* partial line up   PLU      ESCL */
         "\377",        /* partial line down PLD      ESCK */
d48 11
a58 22
         "\033R\376",   /*US char set        FNT0     ESC(B */
         "\033R\001",   /*French char set    FNT1     ESC(R */
         "\033R\002",   /*German char set    FNT2     ESC(K */
         "\033R\003",   /*UK char set        FNT3     ESC(A */
         "\033R\004",   /*Danish I char set  FNT4     ESC E */
         "\033R\005",   /*Sweden char set    FNT5     ESC(H */
         "\033R\006",   /*Italian char set   FNT6     ESC(Y */
         "\033R\007",   /*Spanish char set   FNT7     ESC(Z */
         "\033R\010",   /*Japanese char set  FNT8     ESC(J */
         "\033R\011",   /*Norweign char set  FNT9     ESC(6 */
         "\033R\012",   /*Danish II char set FNT10    ESC(C */
                              
         "\033p1",   /*proportional on    PROP     ESC[2p */
         "\033p0",   /*proportional off   PROP     ESC[1p */
         "\377",        /*proportional clear PROP     ESC[0p */
         "\377",        /*set prop offset    TSS */
         "\377",   /*auto left justify  JFY5     ESC[5 F */
         "\377",   /*auto right justify JFY7     ESC[7 F */
         "\377",   /*auto full justify  JFY6     ESC[6 F */
         "\377",   /*auto justify/center off   ESC[0 F */
         "\377",        /*place holder       JFY3     ESC[3 F */
         "\377",   /*auto center on     JFY2     ESC[2 F */
d60 10
a69 13
         "\0330",       /* 1/8" line space   VERP     ESC[0z */
         "\0332",       /* 1/6" line spacing VERP     ESC[1z */
         "\033C",       /* set form length   SLPP     ESC[Pnt */
         "\033N",       /* perf skip n 		      ESC[nq */
         "\033O",       /* perf skip off              ESC[0q */
                        
         "\377",        /* Left margin set  	      ESC[2x */
         "\377",        /* Right margin set   	      ESC[3x */
         "\377",        /* top margin set 	      ESC[4x */
         "\377",        /* Bottom marg set 	      ESC[5x */
         "\377",        /* T&B margin set   STBM      ESC[Pn1;Pn2r */
         "\377",        /* L&R margin set   SLRM      ESC[Pn1;Pn2s */
         "\377",        /* Clear margins 	      ESC[0x */
d71 5
a75 11
         "\377",	/* Set horiz tab     HTS      ESCH */
         "\377",        /* Set vertical tab  VTS      ESCJ */
         "\377",	/* Clr horiz tab     TBC 0    ESC[0g */
         "\033D\376",	/* Clear all h tabs  TBC 3    ESC[3g */ 
         "\377",        /* Clr vertical tab  TBC 1    ESC[1g */
         "\033B\376",   /* Clr all v tabs    TBC 4    ESC[4g */
         "\033D\376\033B\376",
		        /* Clr all h & v tabs  	      ESC#4 */
	 "\033D\010\020\030\040\050\060\070\100\110\120\130\376",
			/* set default tabs  	      ESC#5 */
	 "\377"		/* entended command */
d77 21
d161 63
a223 4
	"E\010`",pos=%ld, PInfo=%lx, flags=%lx, render=%lx, Ver=%ld, Rev=%ld",
d559 1
a559 1
		PInfo->pi_width = PInfo->pi_pc;
@


1.6
log
@fixed bug in InitHamArray which had an incorrect call to ReadPixelLine
forgot to initialize width in ScanConvertPixelArray
V1.3 Gamma 5 release
@
text
@d247 1
a247 2
	UWORD width, sx, sx1, sx2, xmult, xmod;
	WORD etx, etx2;
d252 1
a252 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d254 1
a254 2
	kprintf("CM: width=%ld, xmult=%ld, xmod=%ld, etx=%ld, sytotal=%ld, ",
		width, xmult, xmod, etx, sytotal);
d260 1
a260 1
			sx = sx2 = Scale(xmult, xmod, etx2, &etx);
d283 1
a283 1
			sx = sx2 = Scale(xmult, xmod, etx2, &etx);
d296 1
a296 7
	PInfo->pi_width = ColorInt2 - PInfo->pi_ColorInt; /* set new width */
	PInfo->pi_xmult = 1;
	PInfo->pi_xmod = 0;
	PInfo->pi_etx = 1; /* force 1:1 x scaling */
#if CMDEBUG
	kprintf("width=%ld, exit\n", PInfo->pi_width);
#endif CMDEBUG
d311 1
a311 2
	UWORD xpos, sx, width, xmult, xmod;
	WORD etx, etx2;
d337 1
a337 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d355 1
a355 1
				sx = Scale(xmult, xmod, etx2, &etx);
d377 1
a377 1
				sx = Scale(xmult, xmod, etx2, &etx);
d409 1
a409 1
				sx = Scale(xmult, xmod,  etx2, &etx);
d436 1
a436 1
				sx = Scale(xmult, xmod, etx2, &etx);
d531 13
d547 1
a547 1
	/* restore width and x scaling vars if we messed them up */
d550 1
a550 3
		PInfo->pi_xmult = PInfo->pi_tempxmult;
		PInfo->pi_xmod = PInfo->pi_tempxmod;  
		PInfo->pi_etx = PInfo->pi_tempetx;    
d557 5
a561 4
	PInfo->pi_width = PInfo->pi_pc;
	PInfo->pi_xmult = 1;
	PInfo->pi_xmod = 0;
	PInfo->pi_etx = 1;
@


1.5
log
@converted a mod of 0 to PED->ped_NumRows in CheckBuf
V1.3 Gamma 3 release
@
text
@d35 1
a35 1
	if (PInfo->pi_flags & PRT_INVERT) {
d40 1
d42 1
a42 1
	else {
d47 1
d50 6
a55 13
	for (; y != yend; y += yinc) { /* for each row */
		oldcolor.colorLong = cm->colorLong; /* init to background color */
		/* compute x end position */
		if (PInfo->pi_flags & PRT_INVERT) {
			xend = PInfo->pi_ystart;
		}
		else {
			xend = PInfo->pi_xstart;
		}
		if (xend) { /* if not starting at left edge */
			/* read entire line into HamBuf */
			HamBuf = PInfo->pi_HamBuf;
			ReadPixelLine(PInfo->pi_rp, 0, y, xend, HamBuf, 0, PInfo->pi_temprp);
d75 4
a79 4
		/* re-calculate black */
		GetBlack(&oldcolor, PInfo->pi_flags);
		ArrayInt->colorLong = oldcolor.colorLong; /* save color of pixel */
		ArrayInt++;
d81 9
d103 1
d329 3
a331 2
	kprintf("TPA: ypos=%ld, PInfo=%lx, flags=%lx, render=%lx, ",
		ypos, PInfo, PInfo->pi_flags, render);
d343 4
@


1.4
log
@V1.3 Gamma 1 check-in (again)
@
text
@d487 3
@


1.3
log
@added support routines for aliasing and floyding
added support for hedley hi-res
V1.3 gamma 1 check-in
@
text
@@


1.2
log
@added partial support for Hedley HiRes
@
text
@d89 30
d524 2
a525 1
		black = (black >> 2) * 5;
d529 31
@


1.1
log
@changed 1.3 version check from 34 to 35.
@
text
@d6 2
a7 1
#include "prtprivate.h"
d30 2
a31 2
	cm = PInfo->ColorMap;
	rp = PInfo->rp;
d35 4
a38 4
	if (PInfo->flags & PRT_INVERT) {
		ArrayInt = PInfo->ColorInt;
		y = PInfo->xstart;
		yend = y - PInfo->width;
d42 3
a44 3
		ArrayInt = PInfo->HamInt;
		y = PInfo->ystart;
		yend = y + PInfo->height;
d51 2
a52 2
		if (PInfo->flags & PRT_INVERT) {
			xend = PInfo->ystart;
d55 1
a55 1
			xend = PInfo->xstart;
d59 2
a60 2
			HamBuf = PInfo->HamBuf;
			ReadPixelLine(PInfo->rp, 0, y, xend, HamBuf, 0, PInfo->temprp);
d82 1
a82 1
		GetBlack(&oldcolor, PInfo->flags);
d106 1
a106 1
	kprintf("CPA: PInfo=%lx, flags=%lx, ", PInfo, PInfo->flags);
d108 5
a112 5
	cm = PInfo->ColorMap;
	width = PInfo->width;
	RowBuf = PInfo->RowBuf;
	ColorInt = PInfo->ColorInt;
	HamInt = PInfo->HamInt;
d116 1
a116 1
	if (PInfo->flags & PRT_HAM) { /* ham picture */
d120 2
a121 2
		if (!(PInfo->flags & PRT_INVERT)) {
			oldcolor.colorLong = (PInfo->HamInt + y)->colorLong;
d125 1
a125 1
				if (PInfo->flags & PRT_INVERT) {
d146 1
a146 1
					GetBlack(&oldcolor, PInfo->flags);
d154 1
a154 1
				if (PInfo->flags & PRT_INVERT) {
d175 1
a175 1
					GetBlack(&oldcolor, PInfo->flags);
d216 5
a220 5
	width = PInfo->width;
	ColorInt1 = ColorInt2 = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
d226 1
a226 1
