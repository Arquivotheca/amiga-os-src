head     1.5;
branch   ;
access   ;
symbols  L35_37:1.3;
locks    ; strict;
comment  @*   @;


1.5
date     90.09.13.17.04.24;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.06.19.58.31;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.01.30.11.51.02;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.16.56;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.09.12.41;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.09.09.06.47.46;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 3 release
@


1.5
log
@*** empty log message ***
@
text
@/*
	Transfer routine for CalComp_ColorMaster2.
	David Berezowski - October/87
*/

#include <exec/types.h>
#include "../printer/printer.h"
#include "../printer/prtbase.h"
#include "../printer/prtgfx.h"

Transfer(PInfo, y, ptr, colors, RowSize)
struct PrtInfo *PInfo;
UWORD y;	/* row # */
UBYTE *ptr;	/* ptr to buffer */
ULONG *colors; /* indexes to color buffers */
UWORD RowSize; /* size of one row buffer */
{
	extern struct PrinterData *PD;

	static UBYTE bit_table[] = {128, 64, 32, 16, 8, 4, 2, 1};
	union colorEntry *ColorInt;
	UBYTE *dmatrix, *yptr, *mptr, *cptr;
	UBYTE dvalue, Yellow, Magenta, Cyan, threshold, bit;
	UWORD x, x3, width, sx, *sxptr;

	/* printer non-specific, MUST DO FOR EVERY PRINTER */
	x = PInfo->pi_xpos;
	ColorInt = PInfo->pi_ColorInt;
	sxptr = PInfo->pi_ScaleX;
	width = PInfo->pi_width;
	dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);

	if (PD->pd_Preferences.PrintShade == SHADE_COLOR) { /* color */
		yptr = ptr + colors[0] + y * RowSize;
		mptr = ptr + colors[1] + y * RowSize;
		cptr = ptr + colors[2] + y * RowSize;
		do { /* for each source pixel */
			/* pre-compute intensity values for each color component */
			Yellow = ColorInt->colorByte[PCMYELLOW];
			Magenta = ColorInt->colorByte[PCMMAGENTA];
			Cyan = ColorInt->colorByte[PCMCYAN];
			ColorInt++;

			sx = *sxptr++;

			do { /* use this pixel 'sx' times */
				dvalue = dmatrix[x & 3];
				x3 = x >> 3;
				bit = bit_table[x & 7];
				if (Yellow > dvalue) {
					*(yptr + x3) |= bit;
				}
				if (Magenta > dvalue) {
					*(mptr + x3) |= bit;
				}
				if (Cyan > dvalue) {
					*(cptr + x3) |= bit;
				}
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
	}
	else { /* doing a b&w or greyscale printout */
		ptr += colors[0] + y * RowSize;
		if (threshold = PInfo->pi_threshold) { /* if thresholding */
			dvalue = threshold ^ 15;
			do { /* for each source pixel */
				/* pre-compute intensity values for Black component */
				Yellow = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
					if (Yellow > dvalue) {
						*(ptr + (x >> 3)) |= bit_table[x & 7];
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
		else { /* grey-scale */
			do { /* for each source pixel */
				/* pre-compute intensity values for Black component */
				Yellow = ColorInt->colorByte[PCMBLACK];
				ColorInt++;

				sx = *sxptr++;

				do { /* use this pixel 'sx' times */
       	            dvalue = dmatrix[x & 3];
					if (Yellow > dvalue) {
						*(ptr + (x >> 3)) |= bit_table[x & 7];
					}
					++x; /* done 1 more printer pixel */
				} while (--sx);
			} while (--width);
		}
	}
}
@


1.4
log
@for rcs 4.x header change
@
text
@@


1.3
log
@added ScaleX logic
V1.3 Gamma 7 release
@
text
@@


1.2
log
@separated BW, GREYSCALE, and COLOR printing
V1.3 gamma 1 check-in
@
text
@d24 1
a24 2
	UWORD x, x3, width, sx, xmult, xmod;
	WORD etx, etx2;
d29 1
a29 3
	xmult = PInfo->pi_xmult;
	xmod = PInfo->pi_xmod;
	etx = etx2 = PInfo->pi_etx;
d44 1
a44 7
			/* scale pixel (DONT CHANGE THIS CODE!)*/
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d72 1
a72 7
				/* scale pixel (DONT CHANGE THIS CODE!)*/
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
d88 1
a88 7
				/* scale pixel (DONT CHANGE THIS CODE!)*/
				sx = xmult;
				etx -= xmod;
				if (etx <= 0) {
					etx += etx2;
					sx++;
				}
@


1.1
log
@V1.3 beta 4 check-in
@
text
@d3 1
a3 1
	David Berezowski - Sept/87
d22 1
a22 1
	UBYTE *dmatrix, *yptr, *mptr, *cptr, color;
a26 2
	/* set flag for whether or not we are doing a color printout */
	color = PD->pd_Preferences.PrintShade == SHADE_COLOR;
d34 1
d36 1
a36 1
	if (color) { /* if doing a color printout */
d40 2
a41 2
		dmatrix = PInfo->pi_dmatrix + ((y & 3) << 2);
		do {
d74 1
a74 1
		if (threshold = PInfo->pi_threshold) {
d76 20
d97 5
a101 3
		do {
			Yellow = ColorInt->colorByte[PCMBLACK];
			ColorInt++;
d103 7
a109 7
			/* scale pixel (DONT CHANGE THIS CODE!)*/
			sx = xmult;
			etx -= xmod;
			if (etx <= 0) {
				etx += etx2;
				sx++;
			}
d111 9
a119 10
			do { /* use this pixel 'sx' times */
				if (!threshold) {
                    dvalue = dmatrix[x & 3];
				}
				if (Yellow > dvalue) {
					*(ptr + (x >> 3)) |= bit_table[x & 7];
				}
				++x; /* done 1 more printer pixel */
			} while (--sx);
		} while (--width);
@


1.0
log
@added to rcs
@
text
@d9 1
a9 1
#include "../printer/prtprivate.h"
d30 6
a35 6
	x = PInfo->xpos;
	ColorInt = PInfo->ColorInt;
	xmult = PInfo->xmult;
	xmod = PInfo->xmod;
	etx = etx2 = PInfo->etx;
	width = PInfo->width;
d41 1
a41 1
		dmatrix = PInfo->dmatrix + ((y & 3) << 2);
d75 1
a75 1
		if (threshold = PInfo->threshold) {
@
