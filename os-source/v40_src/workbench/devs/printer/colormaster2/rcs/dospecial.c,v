head     1.7;
branch   ;
access   ;
symbols  V36_50:1.7 L35_48:1.6 L35_47:1.6 L35_44:1.6 L35_43:1.5 L35_42:1.5 L35_38:1.2 L35_37:1.2;
locks    ; strict;
comment  @*   @;


1.7
date     90.04.06.19.58.01;  author daveb;  state Exp;
branches ;
next     1.6;

1.6
date     88.06.05.19.55.50;  author daveb;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.19.12.13.25;  author daveb;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.18.16.13.22;  author daveb;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.15.17.21.07;  author daveb;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.27.15.16.26;  author daveb;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.01.09.12.19;  author daveb;  state Exp;
branches ;
next     1.0;

1.0
date     87.09.09.06.46.59;  author daveb;  state Exp;
branches ;
next     ;


desc
@added to rcs / V1.3 beta 3 release
@


1.7
log
@for rcs 4.x header change
@
text
@/*
	DoSpecial for CalComp_ColorMaster driver.
	David Berezowski - March/88.
	(copy of EpsonX driver except for removal of aSFC and addition of
	 Close and ConvFunc routines)
*/

#include "exec/types.h"
#include "../printer/printer.h"
#include "../printer/prtbase.h"

#define LMARG	3
#define RMARG	6
#define MARGLEN	9

#define CONDENSED	7
#define PITCH		9
#define QUALITY		17
#define LPI		24
#define INITLEN		26

extern struct PrinterData *PD;
extern struct PrinterExtendedData *PED;

DoSpecial(command, outputBuffer, vline, currentVMI, crlfFlag, Parms)
char outputBuffer[];
UWORD *command;
BYTE *vline;
BYTE *currentVMI;
BYTE *crlfFlag;
UBYTE Parms[];
{
	int x = 0, y = 0;
	/*
		00-00	\375	wait
		01-03	\033lL	set left margin
		04-06	\033Qq	set right margin
		07-07	\375	wait
		08-08	\015	carriage return
	*/
	static char initMarg[MARGLEN] = "\375\033lL\033Qq\375\015";
	/*
		00-01	\0335		italics off
		02-04	\033-\000	underline off
		05-06	\033F		boldface off
		07-07	\022		cancel condensed mode
		08-09	\033P		select pica (10 cpi)
		10-12	\033W\000	enlarge off
		13-14	\033H		doublestrike off
		15-17	\033x\000	draft
		18-19	\033T		super/sub script off
		20-22	\033p0		proportional off
		23-24	\0332		6 lpi
		25-25	\015		carriage return
	*/
	static char initThisPrinter[INITLEN] =
"\0335\033-\000\033F\022\033P\033W\000\033H\033x\000\033T\033p0\0332\015";

	if (*command == aRIN) {
		while (x < INITLEN) {
			outputBuffer[x] = initThisPrinter[x];
			x++;
		}

		if (PD->pd_Preferences.PrintQuality == LETTER) {
			outputBuffer[QUALITY] = 1;
		}

		*currentVMI = 36; /* assume 1/6 line spacing (36/216 => 1/6) */
		if (PD->pd_Preferences.PrintSpacing == EIGHT_LPI) {
			outputBuffer[LPI] = '0';
			*currentVMI = 27; /* 27/216 => 1/8 */
		}

		if (PD->pd_Preferences.PrintPitch == ELITE) {
			outputBuffer[PITCH] = 'M';
		}
		else if (PD->pd_Preferences.PrintPitch == CONDENSED) {
			outputBuffer[CONDENSED] = '\017'; /* condensed */
			outputBuffer[PITCH] = 'P'; /* pica condensed */
		}

		Parms[0] = PD->pd_Preferences.PrintLeftMargin;
		Parms[1] = PD->pd_Preferences.PrintRightMargin;
		*command = aSLRM;
	}

	if (*command == aCAM) { /* cancel margins */
		y = PD->pd_Preferences.PaperSize == W_TRACTOR ? 136 : 80;
		if (PD->pd_Preferences.PrintPitch == PICA) {
			Parms[1] = (10 * y) / 10;
		}
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			Parms[1] = (12 * y) / 10;
		}
		else { /* fine */
			Parms[1] = (17 * y) / 10;
		}
		Parms[0] = 1;
		y = 0;
		*command = aSLRM;
	}

	if (*command == aSLRM) { /* set left and right margins */
		PD->pd_PWaitEnabled = 253;
		if (Parms[0] == 0) {
			initMarg[LMARG] = 0;
		}
		else {
			initMarg[LMARG] = Parms[0] - 1;
		}
		initMarg[RMARG] = Parms[1];
		while (y < MARGLEN) {
			outputBuffer[x++] = initMarg[y++];
		}
		return(x);
	}

	if (*command == aPLU) {
		if (*vline == 0) {
			*vline = 1;
			*command = aSUS2;
			return(0);
		}
		if (*vline < 0) {
			*vline = 0;
			*command = aSUS3;
			return(0);
		}
		return(-1);
	}

	if (*command == aPLD) {
		if (*vline == 0) {
			*vline = -1;
			*command = aSUS4;
			return(0);
		}
		if (*vline > 0) {
			*vline = 0;
			*command = aSUS1;
			return(0);
		}
		return(-1);
	}

	if (*command == aSUS0) {
		*vline = 0;
	}
	if (*command == aSUS1) {
		*vline = 0;
	}
	if (*command == aSUS2) {
		*vline = 1;
	}
	if (*command == aSUS3) {
		*vline = 0;
	}
	if (*command == aSUS4) {
		*vline = -1;
	}

	if (*command == aVERP0) {
		*currentVMI = 27;
	}

	if (*command == aVERP1) {
		*currentVMI = 36;
	}

	if (*command == aIND) { /* lf */
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'J';
		outputBuffer[x++] = *currentVMI;
		return(x);
	}

	if (*command == aRI) { /* reverse lf */
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'j';
		outputBuffer[x++] = *currentVMI;
		return(x);
	}

	if (*command == aRIS) {
		PD->pd_PWaitEnabled = 253;
	}

	return(0);
}

ConvFunc(buf, c, flag)
char *buf, c;
int flag; /* expand lf into lf/cr flag (0-yes, else no ) */
{
	if (c == '\014') { /* if formfeed (page eject) */
		PED->ped_PrintMode = 0; /* no data to print */
	}
	return(-1); /* pass all chars back to the printer device */
}

Close(ior)
struct printerIO *ior;
{
	if(PED->ped_PrintMode) { /* if data has been printed */
		(*(PD->pd_PWrite))("\014",1); /* eject page */
		(*(PD->pd_PBothReady))(); /* wait for it to finish */
		PED->ped_PrintMode = 0; /* no data to print */
	}
	return(0);
}
@


1.6
log
@V1.3 Gamma 15
@
text
@@


1.5
log
@V1.3 Gamma 13
@
text
@d2 1
a2 1
	DoSpecial for CalComp_ColorMaster (copy of EpsonX) driver.
d4 2
a5 2
	(Copy of EpsonX driver except for removal of set foreground/background
	 color command and addition of Close routine)
d12 13
a32 2
	extern struct PrinterData *PD;

d39 1
d41 1
a41 1
	static char initMarg[8] = "\375\033lL\033Qq\375";
d43 12
a54 9
		00-02	\033x\001	select nlq mode
		03-04	\0332		select 6 lpi
		05-05	\022		cancel condensed mode
		06-07	\033P		select pica (10 cpi)
		08-09	\0335		automatic linefeed off
		10-12	\033-\000	turn underline off
		13-14	\033F		cancel emphasized mode
		15-15	\015		carriage return
		16-17	\033W		turn off double width
d56 2
a57 3
	static char initThisPrinter[18] =
		"\033x\001\0332\022\033P\0335\033-\376\033F\015\033W";
	static BYTE ISOcolorTable[10] = {0, 5, 6, 4, 3, 1, 2, 0};
d60 1
a60 1
		while (x < 18) {
a63 2
		outputBuffer[12] = 0; /* underline off */
		outputBuffer[x++] = 0; /* double width off */
d65 2
a66 2
		if (PD->pd_Preferences.PrintQuality == DRAFT) {
			outputBuffer[2] = 0;
d71 1
a71 1
			outputBuffer[4] = '0';
d76 1
a76 1
			outputBuffer[7] = 'M';
d78 3
a80 2
		else if (PD->pd_Preferences.PrintPitch == FINE) {
			outputBuffer[x++] = '\017';
d88 4
a91 4
	if (*command == aSLRM) {
		PD->pd_PWaitEnabled = 253;
		if (Parms[0] == 0) {
			initMarg[3] = 0;
d93 2
a94 2
		else {
			initMarg[3] = Parms[0] - 1;
d96 2
a97 3
		initMarg[6] = Parms[1];
		while (y < 8) {
			outputBuffer[x++] = initMarg[y++];
d99 3
a101 1
		return(x);
d104 1
a104 1
	if (*command == aCAM) {
d106 2
a107 3
		initMarg[3] = 0;
		if (PD->pd_Preferences.PrintPitch == FINE) {
			initMarg[6] = 96;
a108 3
		else if (PD->pd_Preferences.PrintPitch == ELITE) {
			initMarg[6] = 137;
		}
d110 1
a110 1
			initMarg[6] = 80; 
d112 2
a113 1
		while (y < 8) {
d192 9
a204 2
	extern struct PrinterExtendedData *PED;

d208 1
@


1.4
log
@got new copy of EpsonX code
V1.3 Gamma 13
@
text
@d4 2
d31 1
a31 1
		00-02	\033x\000	select nlq mode
a170 24
		return(x);
	}

	if (*command == aSFC) {
		if (Parms[0] == 39) {
			Parms[0] = 30; /* set defaults */
		}
		if (Parms[0] > 37) {
			return(0); /* ni or background color change */
		}
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 'r';
		outputBuffer[x++] = ISOcolorTable[Parms[0] - 30];
		/*
		Kludge to get this to work on a CBM_MPS-1250  which interprets
		'ESCr' as go into reverse print mode.  The 'ESCt' tells it to
		get out of reverse print mode.  The 'NULL' is ignored by the
		CBM_MPS-1250 and required by all Epson printers as the
		terminator for the 'ESCtNULL' command which means select
		normal char set (which has no effect).
		*/
		outputBuffer[x++] = '\033';
		outputBuffer[x++] = 't';
		outputBuffer[x++] = 0;
@


1.3
log
@fixed docs for devcon 
V1.3 Gamma 13
@
text
@d21 19
a39 2
	static char initMarg[] = "\375\033lL\033Qq\375";
	static char initThisPrinter[] =
d48 2
a49 2
		outputBuffer[12] = 0;
		outputBuffer[x++] = 0;
a60 3
		if (PD->pd_Preferences.PrintPitch != PICA) {
			outputBuffer[x++] = '\033';
		}
d62 1
a62 1
			outputBuffer[x++] = 'M';
d202 1
@


1.2
log
@removed linefeed from init (aRIN) code
V1.3 gamma 1 check-in
@
text
@d1 4
a4 8
/* epson X80 special commands */
 
/****** printer.device/printers/Epson_special_functions ******************
 *
 *   NAME
 *   Epson X80 special functions
 * 
 ************************************************************************/
d6 1
a6 1
#include	"exec/types.h"
d10 9
a18 2
extern struct PrinterData *PD;
extern struct PrinterExtendedData *PED;
d20 5
a24 7
DoSpecial(command,outputBuffer,vline,currentVMI,crlfFlag,Parms)
   char outputBuffer[];
   UWORD *command;
   BYTE *vline;
   BYTE *currentVMI;
   BYTE *crlfFlag;
   UBYTE Parms[];
d26 7
a32 6
{
   int x=0;
   int y=0;
   static char initMarg[]="\375\033lL\033Qq\375";
static char
    initThisPrinter[]="\033x\001\0332\022\0335\033P\033-\376\033F\033W";
d34 3
d38 5
a42 5
if(*command==aRIN) {
    while(x<17){outputBuffer[x]=initThisPrinter[x];x++;}
    outputBuffer[x++]='\000';
    outputBuffer[12]='\000';
	outputBuffer[x++]='\015';
d44 9
a52 1
    if((PD->pd_Preferences.PrintQuality)==DRAFT)outputBuffer[2]='\000';
d54 4
a57 9
    *currentVMI=36; /* assume 1/6 line spacing */
    if((PD->pd_Preferences.PrintSpacing)==EIGHT_LPI) { /* wrong again */
	outputBuffer[4]='0';
	*currentVMI=27;
    }
    if ((PD->pd_Preferences.PrintPitch) != PICA)outputBuffer[x++]='\033';
    if((PD->pd_Preferences.PrintPitch)==ELITE)outputBuffer[x++]='M';
	else if((PD->pd_Preferences.PrintPitch)==FINE)
	outputBuffer[x++]='\017';
d59 14
a72 4
    Parms[0]=(PD->pd_Preferences.PrintLeftMargin);
    Parms[1]=(PD->pd_Preferences.PrintRightMargin);
    *command=aSLRM;
}
d74 17
a90 8
if(*command==aSLRM) {
	PD->pd_PWaitEnabled=253; /* wait after this character */
	if(Parms[0]==0)initMarg[3]=0;
	else initMarg[3]=Parms[0]-1;
	initMarg[6]=Parms[1];
	while(y<8)outputBuffer[x++]=initMarg[y++];
	return(x);
}
d92 13
a104 9
if(*command==aCAM) {
	PD->pd_PWaitEnabled=253;
	initMarg[3]=0;
if(PD->pd_Preferences.PrintPitch == FINE)initMarg[6]=96;
else if(PD->pd_Preferences.PrintPitch == ELITE)initMarg[6]=137;
else initMarg[6]=80;
	while(y<8)outputBuffer[x++]=initMarg[y++];
	return(x);
}
d106 13
a118 5
if(*command==aPLU) {
	if((*vline)==0){(*vline)=1; *command=aSUS2; return(0);}
	if((*vline)<0){(*vline)=0; *command=aSUS3; return(0);}
	return(-1);
}
d120 15
a134 5
if(*command==aPLD) {
	if((*vline)==0){(*vline)=(-1); *command=aSUS4; return(0);}
	if((*vline)>0){(*vline)=0; *command=aSUS1; return(0);}
	return(-1);
}
d136 3
a138 5
if(*command==aSUS0) *vline=0;
if(*command==aSUS1) *vline=0;
if(*command==aSUS2) *vline=1;
if(*command==aSUS3) *vline=0;
if(*command==aSUS4) *vline=(-1);
d140 3
a142 1
if(*command==aVERP0) *currentVMI=27;
d144 6
a149 1
if(*command==aVERP1) *currentVMI=36;
d151 6
a156 6
if(*command==aIND) {
	outputBuffer[x++]='\033';
	outputBuffer[x++]='J';
	outputBuffer[x++]= *currentVMI;
	return(x);
}
d158 23
a180 1
if(*command==aRIS) PD->pd_PWaitEnabled=253;
d182 5
a186 1
return(0);
d192 2
@


1.1
log
@V1.3 beta 4 check-in
@
text
@d30 1
a30 1
    initThisPrinter[]="\033x\001\0332\022\0335\033P\033-\376\033F\n\033W";
d34 1
a34 1
    while(x<18){outputBuffer[x]=initThisPrinter[x];x++;}
a37 1
	outputBuffer[x++]='\012';
@


1.0
log
@added to rcs
@
text
@d37 2
@
