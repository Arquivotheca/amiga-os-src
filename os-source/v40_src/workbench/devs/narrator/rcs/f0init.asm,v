head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.4
date     90.08.21.15.47.54;  author eric;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.20.10.55.27;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.03.12.04.26;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.02.16.39.25;  author andy;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@New version: 36.10
@
text
@	TTL	'F0INIT.ASM'


*************************************************************************	
*                                                                    	*
*   Copyright 1990, Joseph Katz/Mark Barton.  All rights reserved.	*
*   No part of this program may be reproduced, transmitted, or stored   *
*   in any language or computer system, in any form, whatsoever,	*
*   without the prior written permission of the authors.   		*
*                                                                    	*
*************************************************************************

*************************************************************************
*                                                                    	*
*                        F0 CONTOUR INITIALIZATION                   	*
*                                                                    	*
*									*
*	All registers destroyed.					*
*									*
*   5/1/89  --  JK	PARSE inserts an initial QX into the phon,	*
*			stress, and dur arrays.  This first QX as well	*
*			as the next phon is marked as start of syllable *
*			which causes the count of number of syllables	*
*			to be 1 too high.  F0INIT used to just ignore	*
*			the first two blanks that PARSE inserted, now	*
*			it also ignores the initial QX.  See Note 1.	*
*									*
* 10/14/89  --  JK	Modified to dynamically allocate memory for 	*
*			the various F0 arrays.  If overflow, return	*
*			error ND_NoMem.					*
*									*
*************************************************************************

          SECTION      speech



	INCLUDE 'assembly.i'
 	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE 'exec/lists.i'
	INCLUDE 'exec/strings.i'
	INCLUDE 'exec/initializers.i'
	INCLUDE 'exec/memory.i'
	INCLUDE 'exec/interrupts.i'
	INCLUDE 'exec/ports.i'
	INCLUDE 'exec/libraries.i'
	INCLUDE 'exec/devices.i'
	INCLUDE 'exec/io.i'
	INCLUDE 'exec/tasks.i'
	INCLUDE 'exec/resident.i'
	INCLUDE 'hardware/custom.i'
	INCLUDE 'hardware/dmabits.i'
	INCLUDE 'exec/execbase.i'
	INCLUDE 'exec/ables.i'
	INCLUDE 'exec/errors.i'
	INCLUDE 'devices/audio.i'

          INCLUDE   'gloequs.i'
          INCLUDE   'featequ.i'
          INCLUDE   'pcequs.i'
          INCLUDE   'f0equs.i'
	  INCLUDE   'narrator.i'
	  INCLUDE   'private.i'

	  EXTERN_SYS AllocMem

          XREF      FEAT
          XDEF      F0INIT

_AbsExecBase	EQU	4



F0INIT	  MOVE.L    _AbsExecBase,A6		;Setup Exec base address

*	  ;-------- Allocate memory for the F0 arrays.  If no memory
	  ;	    available, return ND_NoMem error to main.

	  MOVEQ	    #0,D0			;Initialize count of syllables
	  CLR.W     F0TOTSYL(A5)		;   in D0 and globals area
	  MOVE.L    STRESS(A5),A0		;Get pointer to stress array

F0CountSyls:
	  MOVE.B    (A0)+,D1			;Get STRESS element
	  BPL.S	    F0CountSyls			;Nothing interesting
	  ADDQ.W    #1,D0			;Increment number of syllables
	  CMP.B	    #$FF,D1			;End of input?
	  BNE.S	    F0CountSyls			;No, keep looking
	  ADDQ.W    #1,D0			;Don't count the $FF as a syl,
						;  but add 2 bytes so F0HLS
						;  doesn't need to check for
						;  beginning of array while
						;  playing with syl to the left
						;  of the current syllable.
	  LSL.L	    #3,D0			;There are eight F0 arrays
	  MOVE.L    D0,D7			;Save (AllocMem destroys D0)
	  MOVE.L    #MEMF_PUBLIC+MEMF_CLEAR,D1	;Alloc flags
	  CALLSYS   AllocMem			;Get the memory
	  TST.L	    D0				;Got it?
	  BNE.S	    F0AllocOK			;  Yes
	  MOVEQ	    #ND_NoMem,D3		;  No, mark as error and return
  	  RTS


*	  ;-------- Got our memory, now we must initialize the various F0
	  ;	    array pointers.  The arrays that begin with "F0" are
	  ;	    "clause local" (ie they track the syllables on a clause
	  ; 	    by clause basis.  The other F0 arrays pointers store 
	  ;	    the absolute beginning of the arrays.  Each F0 array
	  ;	    starts 2 bytes in from the beginning.  This eliminates
	  ;	    the need to boundary check array indices in F0HLS and LLS.
F0AllocOK:
	  MOVE.W    D7,F0TOTSYL(A5)			;Length of F0 arrays

	  MOVE.L    PHON(A5),F0PHON(A5)			;Copy PHON pointer
	  MOVE.L    STRESS(A5),F0STRESS(A5)		;     STRESS
	  MOVE.L    DUR(A5),F0DUR(A5)			;     DUR

	  LSR.L	    #3,D7				;Length of each F0 array
	  ADDQ.L    #2,D0
	  MOVE.L    D0,F0START(A5)
	  MOVE.L    D0,START(A5)
	  ADD.L	    D7,D0
	  MOVE.L    D0,F0PEAK(A5)
	  MOVE.L    D0,PEAK(A5)
	  ADD.L	    D7,D0
	  MOVE.L    D0,F0END(A5)
	  MOVE.L    D0,FEND(A5)
	  ADD.L	    D7,D0
	  MOVE.L    D0,F0RISE(A5)
	  MOVE.L    D0,RISE(A5)
	  ADD.L	    D7,D0
	  MOVE.L    D0,F0FALL(A5)
	  MOVE.L    D0,FALL(A5)
	  ADD.L	    D7,D0
          MOVE.L    D0,F0CRBRK(A5)
          MOVE.L    D0,CRBRK(A5)
	  ADD.L	    D7,D0
          MOVE.L    D0,F0TUNELV(A5)
          MOVE.L    D0,TUNELV(A5)
	  ADD.L	    D7,D0
	  MOVE.L    D0,F0ACCENT(A5)
	  MOVE.L    D0,ACCENT(A5)



*	  ;-------- Ignore 1st two blanks and initial QX.

          ADDQ.L    #3,F0PHON(A5)				;*** Note 1
          ADDQ.L    #3,F0STRESS(A5)
          ADDQ.L    #3,F0DUR(A5)			



*	  ;-------- Clear syllable variables.

          CLR.W     F0NUMCLS(A5)        ;CLAUSE NUMBER
          CLR.W     F0NUMSYL(A5)        ;NUMBER OF SYLLABLES IN THIS CLAUSE
          CLR.W     F0NUMAS(A5)         ;NUMBER OF ACCENTED SYLLABLES
          CLR.W     F01STAS(A5)         ;POSITION OF 1ST ACCENTED SYLLABLE
          CLR.W     F0LASTAS(A5)        ;POSITION OF LAST ACCENTED SYLLABLE
          CLR.W     F0NUMPHS(A5)        ;PHRASE NUMBER

	  MOVEQ	    #0,D3		;Good return
          RTS

          END 
@


1.3
log
@new version from Softvoice
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d3 8
d12 2
a15 8
*                                                                    	*
*   Copyright 1986, Joseph Katz/Mark Barton.  All rights reserved.   	*
*   No part of this program may be reproduced, transmitted,          	*
*   transcribed, stored in retrieval system, or translated into      	*
*   any language or computer language, in any form or by any         	*
*   means, electronic, mechanical, magnetic, optical, chemical,      	*
*   manual or otherwise, without the prior written permission of     	*
*   the authors.						     	*
@


1.1
log
@Initial revision
@
text
@d1 31
a31 24
	TTL	'$Header: f0init.asm,v 32.1 86/01/22 00:23:42 sam Exp $'
**********************************************************************
*                                                                    *
*   Copyright 1986, Commodore-Amiga Inc.   All rights reserved.      *
*   No part of this program may be reproduced, transmitted,          *
*   transcribed, stored in retrieval system, or translated into      *
*   any language or computer language, in any form or by any         *
*   means, electronic, mechanical, magnetic, optical, chemical,      *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030                                     *
*                                                                    *
**********************************************************************
*
* $Header: f0init.asm,v 32.1 86/01/22 00:23:42 sam Exp $
*
* $Locker:  $
*
* $Log:	f0init.asm,v $
* Revision 32.1  86/01/22  00:23:42  sam
* placed under source control
* 
*
**********************************************************************
a34 7
*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*                                                                             ;
*                        F0 CONTOUR INITIALIZATION                            ;
*                                                                             ;
*                         ALL REGISTERS DESTROYED                             ;
*                                                                             ;
*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
d36 20
d61 2
d64 2
d69 1
a70 1
*-------- Initialize pointers to various arrays to start of those arrays
a71 22
F0INIT    LEA       DUR(A5),A0
          MOVE.L    A0,F0DUR(A5)
          LEA       STRESS(A5),A0
          MOVE.L    A0,F0STRESS(A5)
          LEA       PHON(A5),A0
          MOVE.L    A0,F0PHON(A5)
          LEA       ACCENT(A5),A0
          MOVE.L    A0,F0ACCENT(A5)
          LEA       PEAK(A5),A0
          MOVE.L    A0,F0PEAK(A5)
          LEA       FALL(A5),A0
          MOVE.L    A0,F0FALL(A5)
          LEA       RISE(A5),A0
          MOVE.L    A0,F0RISE(A5)
          LEA       CRBRK(A5),A0
          MOVE.L    A0,F0CRBRK(A5)
          LEA       TUNELV(A5),A0
          MOVE.L    A0,F0TUNELV(A5)
          LEA       START(A5),A0
          MOVE.L    A0,F0START(A5)
          LEA       FEND(A5),A0
          MOVE.L    A0,F0END(A5)
d73 1
d75 2
a76 1
*         Ignore 1st two blanks in arrays
d78 3
a80 3
          ADDQ.L    #2,F0DUR(A5)
          ADDQ.L    #2,F0STRESS(A5)
          ADDQ.L    #2,F0PHON(A5)
d82 20
a102 1
*-------- Clear syllable variables
d104 9
a112 7
          CLR.W     F0NUMCLS(A5)        ;CLAUSE NUMBER
          CLR.W     F0NUMAS(A5)         ;NUMBER OF ACCENTED SYLLABLES
          CLR.W     F01STAS(A5)         ;POSITION OF 1ST ACCENTED SYLLABLE
          CLR.W     F0LASTAS(A5)        ;POSITION OF LAST ACCENTED SYLLABLE
          CLR.W     F0NUMSYL(A5)        ;NUMBER OF SYLLABLES
          CLR.W     F0NUMPHS(A5)        ;PHRASE NUMBER
          CLR.W     F0TOTSYL(A5)        ;TOTAL NUMBER OF SYLLABLES IN SENTENCE
d114 3
d118 25
a142 1
*-------- Clear all syllable arrays
a143 6
          MOVE.L    F0ACCENT(A5),A0     ;GET ADDRESSES
          MOVE.L    F0PEAK(A5),A1
          MOVE.L    F0RISE(A5),A2
          MOVE.L    F0FALL(A5),A3
          MOVE.L    F0START(A5),A4
          MOVE.L    F0END(A5),A6
a144 8
          MOVE.W    #(F0MAXLEN-4)/4,D0  ;SET COUNT
F0CLEAR1  CLR.L     (A0)+               ;CLEAR EACH LONG
          CLR.L     (A1)+
          CLR.L     (A2)+
          CLR.L     (A3)+
          CLR.L     (A4)+
          CLR.L     (A6)+
          DBF       D0,F0CLEAR1
d146 1
a146 2
          MOVE.L    F0TUNELV(A5),A0
          MOVE.L    F0CRBRK(A5),A1
d148 3
a150 4
          MOVE.W    #(F0MAXLEN-4)/4,D0   ;SET COUNT
F0CLEAR2  CLR.L     (A0)+               ;CLEAR EACH LONG
          CLR.L     (A1)+
          DBF       D0,F0CLEAR2
d152 12
a164 1

@
