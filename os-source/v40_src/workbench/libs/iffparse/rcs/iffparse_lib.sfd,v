head     39.1;
branch   ;
access   ;
symbols  ;
locks    davidj:39.1; strict;
comment  @@;


39.1
date     92.06.01.17.52.48;  author vertex;  state Exp;
branches ;
next     ;


desc
@iffparse.library super FD fileinterface
@



39.1
log
@Initial V39 RCS checkin
@
text
@==id $Id: iffparse_lib.sfd,v 38.0 92/02/06 10:48:35 eric Exp $
* "iffparse.library"
==base _IFFParseBase
==bias 30
==public
==include <exec/types.h>
==include <libraries/iffparse.h>
==version 36
*
* Basic functions
*
struct IFFHandle *AllocIFF() ()
LONG OpenIFF( struct IFFHandle *iff, LONG rwMode ) (a0,d0)
LONG ParseIFF( struct IFFHandle *iff, LONG control ) (a0,d0)
VOID CloseIFF( struct IFFHandle *iff ) (a0)
VOID FreeIFF( struct IFFHandle *iff ) (a0)
*
* Read/Write functions
*
LONG ReadChunkBytes( struct IFFHandle *iff, APTR buf, LONG numBytes ) (a0,a1,d0)
LONG WriteChunkBytes( struct IFFHandle *iff, APTR buf, LONG numBytes ) (a0,a1,d0)
LONG ReadChunkRecords( struct IFFHandle *iff, APTR buf, LONG bytesPerRecord, LONG numRecords ) (a0,a1,d0,d1)
LONG WriteChunkRecords( struct IFFHandle *iff, APTR buf, LONG bytesPerRecord, LONG numRecords ) (a0,a1,d0,d1)
*
* Context entry/exit
*
LONG PushChunk( struct IFFHandle *iff, LONG type, LONG id, LONG size ) (a0,d0,d1,d2)
LONG PopChunk( struct IFFHandle *iff ) (a0)
==reserve 1
*
* Low-level handler installation
*
LONG EntryHandler( struct IFFHandle *iff, LONG type, LONG id, LONG position, struct Hook *handler, APTR object ) (a0,d0,d1,d2,a1,a2)
LONG ExitHandler( struct IFFHandle *iff, LONG type, LONG id, LONG position, struct Hook *handler, APTR object ) (a0,d0,d1,d2,a1,a2)
*
* Built-in chunk/property handlers
*
LONG PropChunk( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
LONG PropChunks( struct IFFHandle *iff, LONG *propArray, LONG numPairs ) (a0,a1,d0)
LONG StopChunk( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
LONG StopChunks( struct IFFHandle *iff, LONG *propArray, LONG numPairs) (a0,a1,d0)
LONG CollectionChunk( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
LONG CollectionChunks( struct IFFHandle *iff, LONG *propArray, LONG numPairs ) (a0,a1,d0)
LONG StopOnExit( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
*
* Context utilities
*
struct StoredProperty *FindProp( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
struct CollectionItem *FindCollection( struct IFFHandle *iff, LONG type, LONG id ) (a0,d0,d1)
struct ContextNode *FindPropContext( struct IFFHandle *iff ) (a0)
struct ContextNode *CurrentChunk( struct IFFHandle *iff ) (a0)
struct ContextNode *ParentChunk( struct ContextNode *contextNode ) (a0)
*
* LocalContextItem support functions
*
struct LocalContextItem *AllocLocalItem( LONG type, LONG id, LONG ident, LONG dataSize ) (d0,d1,d2,d3)
APTR LocalItemData( struct LocalContextItem *localItem ) (a0)
VOID SetLocalItemPurge( struct LocalContextItem *localItem, struct Hook *purgeHook ) (a0,a1)
VOID FreeLocalItem( struct LocalContextItem *localItem ) (a0)
struct LocalContextItem *FindLocalItem( struct IFFHandle *iff, LONG type, LONG id, LONG ident ) (a0,d0,d1,d2)
LONG StoreLocalItem( struct IFFHandle *iff, struct LocalContextItem *localItem, LONG position ) (a0,a1,d0)
VOID StoreItemInContext( struct IFFHandle *iff, struct LocalContextItem *localItem, struct ContextNode *contextNode ) (a0,a1,a2)
*
* IFFHandle initialization
*
VOID InitIFF( struct IFFHandle *iff, LONG flags, struct Hook *streamHook ) (a0,d0,a1)
VOID InitIFFasDOS( struct IFFHandle *iff ) (a0)
VOID InitIFFasClip( struct IFFHandle *iff ) (a0)
*
* Internal clipboard support
*
struct ClipboardHandle *OpenClipboard( LONG unitNumber ) (d0)
VOID CloseClipboard( struct ClipboardHandle *clipHandle ) (a0)
*
* Miscellaneous
*
LONG GoodID( LONG id ) (d0)
LONG GoodType( LONG type ) (d0)
STRPTR IDtoStr( LONG id, STRPTR buf ) (d0,a0)
==end
@
