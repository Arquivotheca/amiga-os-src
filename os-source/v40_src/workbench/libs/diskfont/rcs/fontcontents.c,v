head     37.3;
branch   ;
access   ;
symbols  V36_167:36.9 V36_162:36.8 V36_160:36.8 V36_157:36.8 V36_139:36.7 V36_137:36.7 V36_135:36.7 V36_125:36.6 V36_124:36.6 V36_122:36.6 V36_121:36.6 V36_116:36.6 V36_111:36.5 V36_97:36.4 V36_86:36.3 L36_84:36.3 L36_70:36.0;
locks    ; strict;
comment  @*   @;


37.3
date     92.03.26.11.54.29;  author davidj;  state Exp;
branches ;
next     37.2;

37.2
date     91.01.31.14.39.39;  author kodiak;  state Exp;
branches ;
next     37.1;

37.1
date     90.11.26.12.14.36;  author kodiak;  state Exp;
branches ;
next     37.0;

37.0
date     90.10.26.10.20.47;  author kodiak;  state Exp;
branches ;
next     36.11;

36.11
date     90.05.01.02.11.20;  author kodiak;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.09.05.47.43;  author kodiak;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.12.14.39.33;  author kodiak;  state Exp;
branches ;
next     36.8;

36.8
date     90.02.23.13.09.53;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.01.30.13.00.45;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     89.09.11.12.27.45;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     89.09.08.12.01.19;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     89.05.17.12.17.21;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     88.11.25.16.31.21;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     88.05.27.16.05.06;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     88.05.27.12.46.42;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.05.26.17.09.38;  author kodiak;  state Exp;
branches ;
next     35.0;

35.0
date     87.12.27.14.11.35;  author kodiak;  state Exp;
branches ;
next     ;


desc
@New and DisposeFontContents
@


37.3
log
@changed reference to diskfonttag.h
@
text
@/*
**	$Id: fontcontents.c,v 37.2 91/01/31 14:39:39 kodiak Exp Locker: davidj $
**
**      diskfont.library NewFontContents function
**
**	(C) Copyright 1990 Robert R. Burns
**	    All Rights Reserved
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
*/

/*	Debug switches */

#ifdef	DEBUG
#define	D(a)	kprintf a
#else
#define	D(a)
#endif


/*	Includes */

#include <exec/types.h>

#include "diskfont.h"
#include <diskfont/diskfonttag.h>
#include "dfdata.h"

#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <libraries/dos.h>
#include <graphics/text.h>
#include <utility/tagitem.h>

#include <string.h>
#undef    strcat
#undef    strcmp
#undef    strcpy
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/utility_protos.h>
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/utility_pragmas.h>

/*	Imports */

#define	SysBase		dfl->dfl_SysBase
#define	DOSBase		dfl->dfl_DOSBase
#define	UtilityBase	dfl->dfl_UtilityBase


/****** diskfont.library/NewFontContents *****************************
*
*   NAME
*	NewFontContents -- Create a FontContents image for a font. (V34)
*
*   SYNOPSIS
*	fontContentsHeader = NewFontContents(fontsLock,fontName)
*       D0                                   A0        A1
*
*	struct FontContentsHeader *NewFontContents( BPTR, char * );
*
*   FUNCTION
*	This function creates a new array of FontContents entries
*	that describe all the fonts associated with the fontName,
*	specifically, all those in the font directory whose name
*	is that of the font sans the ".font" suffix.
*
*   INPUTS
*	fontsLock - a DOS lock on the FONTS: directory (or other
*	    directory where the font contents file and associated
*	    font directory resides).
*	fontName - the font name, with the ".font" suffix, which
*	    is also the name of the font contents file.
*
*   RESULT
*	fontContentsHeader - a struct FontContentsHeader pointer.
*
*   EXCEPTIONS
*	This command was first made available as of version 34.
*
*	D0 is zero if the fontName is does not have a ".font" suffix,
*	if the fontName is too long, if a DOS error occurred, or if
*	memory could not be allocated for the fontContentsHeader.
*
*   SEE ALSO
*	DisposeFontContents to free the structure acquired here.
*
*********************************************************************/
struct TempFontEntry {
    struct TempFontEntry *tfe_Next;
    struct TFontContents tfe_TFC;
};

struct FontContentsHeader * __asm DFNewFontContents(
	register __a6 struct DiskfontLibrary *dfl,
	register __a0 BPTR fontsLock, register __a1 char *fontName)
{
    struct FileInfoBlock *fib;
    char fontDirName[MAXFONTNAME];
    LONG prevCurrDir, otagLock, diskfontDir, fontSeg;
    LONG count;
    struct TempFontEntry *tfeHead, *tfeNext, *tfe;
    struct DiskFontHeader *dfh;
    struct FontContentsHeader *fch;
    struct TFontContents *tfc;
    WORD fileID, namePad, tagItemCount;
    struct TagItem *tagEntry, *tagList1, *tagList2;
    char *b;

    D(("NewFontContents(0x%lx, \"%s\")\n", fontsLock, fontName));

    fib = 0;
    tfeHead = 0;
    tfeNext = (struct TempFontEntry *) &tfeHead;
    fch = 0;
    otagLock = 0;
    diskfontDir = 0;
    fontSeg = 0;
    count = 0;
    fileID = FCH_ID;			/* guess no tags */
    prevCurrDir = CurrentDir(fontsLock);

    /* construct font directory name from font name sans .font suffix */
    if (strlen(fontName) > 30)
	goto ENDGAME;				/* font name too long */
    strcpy(fontDirName, fontName);
    if ((b = (char *) strrchr(fontDirName, '.')) == 0)
	goto ENDGAME;				/* no . for .font suffix */
    if (strcmp(b, ".font") != 0)
	goto ENDGAME;		 		/* suffix not .font */

    /* look for .otag file */
    strcpy(b, OTSUFFIX);
    otagLock = Lock(fontDirName, SHARED_LOCK);
    *b = '\0';					/* null terminate at . */

    /* look for font directory */
    if (!(diskfontDir = Lock(fontDirName, SHARED_LOCK)))
	goto OTAGCHECK;

    /* allocate the necessary FileInfoBlock */
    if ((fib = (struct FileInfoBlock *) AllocDosObject(DOS_FIB, 0)) == 0)
	goto ENDGAME;				/* out of memory */

    /* look at all the files in the directory */
    CurrentDir(diskfontDir);

    if (Examine(diskfontDir, fib) == 0)
	goto ENDGAME;
    while (ExNext(diskfontDir, fib)) {
	if ((fib->fib_DirEntryType < 0) &&	/* entry is file */
		(fontSeg = LoadSeg(fib->fib_FileName))) {
	    dfh = (struct DiskFontHeader *) ((fontSeg<<2) + 8);
	    if ((dfh->dfh_FileID & 0xfff0) == DFH_ID) {
		tfe = (struct TempFontEntry *)
			AllocVec(sizeof(struct TempFontEntry), MEMF_CLEAR);
		if (tfe == 0)
		    goto ENDGAME;		/* out of memory */
		/* link temporary entry into entry list */
		tfeNext->tfe_Next = tfe;
		tfe->tfe_Next = 0;
		tfeNext = tfe;
		/* build the entry for this diskfont */
		strcpy(tfe->tfe_TFC.tfc_FileName, fontDirName);
		strcat(tfe->tfe_TFC.tfc_FileName, "/");
		strcat(tfe->tfe_TFC.tfc_FileName, fib->fib_FileName);
		D(("  tfc_FileName \"%s\"\n", tfe->tfe_TFC.tfc_FileName));
		namePad = MAXFONTPATH - strlen(tfe->tfe_TFC.tfc_FileName) - 3;
		D(("namePad %ld\n", namePad));
		if (namePad < 0)
		    goto ENDGAME;		/* name too long */
		tfe->tfe_TFC.tfc_YSize = dfh->dfh_TF.tf_YSize;
		tfe->tfe_TFC.tfc_Style = dfh->dfh_TF.tf_Style;
		tfe->tfe_TFC.tfc_Flags = (dfh->dfh_TF.tf_Flags & ~FPF_ROMFONT) |
			FPF_DISKFONT;
		tfe->tfe_TFC.tfc_TagCount = 0;
		if (dfh->dfh_TF.tf_Style & FSF_TAGGED) {
		    tagList1 = (struct TagItem *) dfh->dfh_Segment;
		    tagItemCount = 0;
		    while (NextTagItem(&tagList1)) {
			tagItemCount++;
			namePad -= 8;
		    }
		    D(("  TAGGED (n = %ld)\n", tagItemCount));
		    if (tagItemCount) {
			if (namePad < 8) {
			    D(("namePad %ld too long\n"));
			    goto ENDGAME;	/* name or tags too long */
			}
			tagItemCount++;
			tfe->tfe_TFC.tfc_TagCount = tagItemCount;
			tagList1 = (struct TagItem *) dfh->dfh_Segment;
			tagList2 = (struct TagItem *)
				&tfe->tfe_TFC.tfc_FileName[MAXFONTPATH-
				(tagItemCount*sizeof(struct TagItem))];
			while (tagEntry = (struct TagItem *)
				NextTagItem(&tagList1)) {
			    *tagList2++ = *tagEntry;
			    D(("    tag 0x%08lx value 0x%08lx\n",
				    tagEntry->ti_Tag, tagEntry->ti_Data));
			}
			tagList2->ti_Tag = TAG_DONE;
			fileID = TFCH_ID;	/* tags exist */
		    }
		}
		count++;
	    }			/* if dfh_FileID */
	    UnLoadSeg(fontSeg);
	    fontSeg = 0;
	}				/* file & LoadSeg */
    }					/* while ExNext */
    if (IoErr() != ERROR_NO_MORE_ENTRIES)
	goto ENDGAME;

OTAGCHECK:
    if (otagLock) {
	D((".otag exists\n"));
	fileID = OFCH_ID;
    }
    else
	if (!fib)
	    goto ENDGAME;

    /* allocate a buffer for the font contents */
    D(("  %ld tfc entries\n", count));
    if ((fch = (struct FontContentsHeader *)
	    AllocVec(sizeof(struct FontContentsHeader) +
	    (count * sizeof(struct TFontContents)), MEMF_PUBLIC)) == 0)
	goto ENDGAME;

    fch->fch_FileID = fileID;
    fch->fch_NumEntries = count;
    tfc = (struct TFontContents *) &fch[1];
    tfe = tfeHead;
    while (tfe) {
	*tfc++ = tfe->tfe_TFC;
	tfe = tfe->tfe_Next;
    }

ENDGAME:
    if (fontSeg != 0)
	UnLoadSeg(fontSeg);
    tfe = tfeHead;
    while (tfe) {
	tfeNext = tfe->tfe_Next;
	FreeVec(tfe);
	tfe = tfeNext;
    }
    UnLock(diskfontDir);			/* null is OK for UnLock */
    if (fib != 0)
	FreeDosObject(DOS_FIB, fib);
    UnLock(otagLock);				/* null is OK for UnLock */
    CurrentDir(prevCurrDir);

    return(fch);
}


/****** diskfont.library/DisposeFontContents *************************
*
*   NAME
*	DisposeFontContents -- Free the result from NewFontContents. (V34)
*
*   SYNOPSIS
*	DisposeFontContents(fontContentsHeader)
*			    A1
*
*	VOID DisposeFontContents( struct FontContentsHeader * );
*
*   FUNCTION
*	This function frees the array of FontContents entries
*	returned by NewFontContents.
*
*   INPUTS
*	fontContentsHeader - a struct FontContentsHeader pointer
*	    returned by NewFontContents.
*
*   EXCEPTIONS
* 	This command was first made available as of version 34.
*
*	A fontContentsHeader other than one acquired by a call
*	NewFontContents will crash.
*
*   SEE ALSO
*	NewFontContents to get structure freed here.
*
*********************************************************************/
void __asm DFDisposeFontContents(register __a6 struct DiskfontLibrary *dfl,
	register __a1 struct FontContentsHeader * fontContentsHeader)
{
    FreeVec(fontContentsHeader);
}
@


37.2
log
@create empty .font if .otag exists
@
text
@d2 1
a2 1
**	$Id: fontcontents.c,v 37.1 90/11/26 12:14:36 kodiak Exp Locker: kodiak $
d23 1
a23 1
#include        <exec/types.h>
d25 11
a35 11
#include        "diskfont.h"
#include	"diskfonttag.h"
#include        "dfdata.h"

#include        <exec/nodes.h>
#include        <exec/lists.h>
#include	<exec/memory.h>
#include        <exec/ports.h>
#include        <libraries/dos.h>
#include        <graphics/text.h>
#include        <utility/tagitem.h>
d37 1
a37 1
#include	<string.h>
d41 6
a46 6
#include	<clib/exec_protos.h>
#include	<clib/dos_protos.h>
#include	<clib/utility_protos.h>
#include	<pragmas/exec_pragmas.h>
#include	<pragmas/dos_pragmas.h>
#include	<pragmas/utility_pragmas.h>
d77 1
a77 1
*	    is also the name of the font contents file.  
@


37.1
log
@alpha 2 Bullet
@
text
@d2 1
a2 1
**	$Id$
d26 1
d104 1
a104 1
    LONG prevCurrDir, diskfontDir, fontSeg;
d120 1
d128 1
a128 1
    if (strlen(fontName) > MAXFONTNAME-3)
d135 4
d141 4
a148 5
    /* look for font directory */
    diskfontDir = Lock(fontDirName, SHARED_LOCK);
    if (diskfontDir == 0)
	goto ENDGAME;

d172 2
a173 1
		namePad = MAXFONTNAME - strlen(tfe->tfe_TFC.tfc_FileName) - 3;
d190 2
a191 1
			if (namePad < 8)
d193 1
d198 1
a198 1
				&tfe->tfe_TFC.tfc_FileName[MAXFONTNAME-
d219 9
d256 1
@


37.0
log
@initialize fontSeg for empty directory case
@
text
@d2 1
a2 1
**	$Header: Q2500:Src/Bullet/Diskfont/RCS/fontcontents.c,v 36.11 90/05/01 02:11:20 kodiak Exp Locker: kodiak $
d6 2
d37 4
d42 2
d45 1
a46 1

d49 3
a51 1
#define	DOSBase	dfl->dfl_DOSBase
@


36.11
log
@use Lattice strrchr instead of private rindex
@
text
@d2 1
a2 1
**	$Header: V36:src/workbench/libs/diskfont/RCS/fontcontents.c,v 36.10 90/04/09 05:47:43 kodiak Exp Locker: kodiak $
d110 1
@


36.10
log
@convert to both new rcs and native build
@
text
@d2 1
a2 1
**	$Header: Q:Src/diskfont/RCS/fontcontents.c,v 36.9 90/03/12 14:39:33 kodiak Exp $
d34 1
d118 1
a118 1
    if ((b = (char *) rindex(fontDirName, '.')) == 0)
@


36.9
log
@fix tfcNext list maintainance for > 1 entry in the list
@
text
@d2 1
a2 1
**	$Header: fontcontents.c,v 36.8 90/02/23 13:09:53 kodiak Exp $
d9 3
d18 2
a19 8
#include        "exec/types.h"
#include        "exec/nodes.h"
#include        "exec/lists.h"
#include	"exec/memory.h"
#include        "exec/ports.h"
#include        "libraries/dos.h"
#include        "graphics/text.h"
#include        "utility/tagitem.h"
d21 2
d26 16
d86 3
a88 4
struct FontContentsHeader *
DFCNewFontContents(fontsLock, fontName)
BPTR fontsLock;
char *fontName;
d262 2
a263 2
DFCDisposeFontContents(fontContentsHeader)
struct FontContentsHeader *fontContentsHeader;
@


36.8
log
@use AllocVec, and don't assume directory doesn't change
@
text
@d2 1
a2 1
**	$Header$
d135 1
@


36.7
log
@obsolete XFCH, introduce TFCH, and create just FCH if no tags exist
@
text
@d1 14
a26 4
struct MemFontContents {
    LONG allocBytes;
    struct FontContentsHeader fch;
};
d66 5
d79 3
a81 2
    LONG size, exnext;
    struct MemFontContents *mfc;
d84 1
a84 2
    struct DiskFontHeader *dfh;
    WORD namePad, tagItemCount;
d88 2
d91 2
a92 1
    mfc = 0;
d95 2
a98 5
    /* allocate the necessary FileInfoBlock */
    if ((fib = (struct FileInfoBlock *)
	    AllocMem(sizeof(*fib), MEMF_PUBLIC)) == 0)
	goto ENDGAME;				/* out of memory */

d109 4
a116 4
    /* count the files in this directory */
    size = 0;
    if (Examine(diskfontDir, fib) == 0)
	goto ENDGAME;
a117 13
    while (ExNext(diskfontDir, fib)) size++;
    if (IoErr() != ERROR_NO_MORE_ENTRIES)
	goto ENDGAME;

    /* allocate a buffer for the font contents */
    size = sizeof(*mfc)+(size*sizeof(*tfc));
    if ((mfc = (struct FontContentsHeader *)
	    AllocMem(size, MEMF_PUBLIC | MEMF_CLEAR)) == 0)
	goto ENDGAME;
    mfc->allocBytes = size;
    mfc->fch.fch_FileID = FCH_ID;	/* guess no tags */
    mfc->fch.fch_NumEntries = 0;

d120 1
d123 38
a160 23
    do {
	exnext = ExNext(diskfontDir, fib);
	if ((exnext != 0) && (fib->fib_DirEntryType < 0)) {
	    /* load at this file to see if it is a diskfont */
	    fontSeg = LoadSeg(fib->fib_FileName);
	    if (fontSeg != 0) {
		dfh = (struct DiskFontHeader *) ((fontSeg<<2) + 8);
		if ((dfh->dfh_FileID & 0xfff0) == DFH_ID) {
		    /* make an entry for this diskfont */
		    tfc = &((struct TFontContents *)
			    &(&mfc->fch)[1])[mfc->fch.fch_NumEntries++];
		    strcpy(tfc->tfc_FileName, fontDirName);
		    strcat(tfc->tfc_FileName, "/");
		    strcat(tfc->tfc_FileName, fib->fib_FileName);
		    namePad = MAXFONTNAME - strlen(tfc->tfc_FileName) - 3;
		    if (namePad < 0)
			goto ENDGAME;		/* name too long */
		    tfc->tfc_YSize = dfh->dfh_TF.tf_YSize;
		    tfc->tfc_Style = dfh->dfh_TF.tf_Style;
		    tfc->tfc_Flags = (dfh->dfh_TF.tf_Flags & ~FPF_ROMFONT) |
			    FPF_DISKFONT;
		    tfc->tfc_TagCount = 0;
		    if (dfh->dfh_TF.tf_Style & FSF_TAGGED) {
d162 8
a169 4
			tagItemCount = 0;
			while (NextTagItem(&tagList1)) {
			    tagItemCount++;
			    namePad -= 8;
d171 2
a172 15
			if (tagItemCount) {
			    if (namePad < 8)
				goto ENDGAME;	/* name or tags too long */
			    tagItemCount++;
			    tfc->tfc_TagCount = tagItemCount;
			    tagList1 = (struct TagItem *) dfh->dfh_Segment;
			    tagList2 = (struct TagItem *) &tfc->tfc_FileName[
				    MAXFONTNAME-
				    (tagItemCount*sizeof(struct TagItem))];
			    while (tagEntry = (struct TagItem *)
				    NextTagItem(&tagList1))
				*tagList2++ = *tagEntry;
			    tagList2->ti_Tag = TAG_DONE;
			    mfc->fch.fch_FileID = TFCH_ID;	/* tags exist */
			}
d174 7
a180 7
		}			/* if dfh_FileID */
		UnLoadSeg(fontSeg);
		fontSeg = 0;
	    }				/* if fontSeg */
	}				/* if exnext */
    }					/* do */
	while (exnext != 0);
d184 6
a189 2
    /* get result */
    fch = &mfc->fch;
d191 9
d203 5
a207 3
    if (fch == 0) {
	/* error occurred, free mfc if allocated */
	if (mfc != 0) FreeMem(mfc, size);
d209 1
a209 2
    if (diskfontDir != 0)
	UnLock(diskfontDir);
d211 1
a211 1
	FreeMem(fib, sizeof(*fib));
d250 1
a250 5
    struct MemFontContents *mfc;

    mfc = (struct MemFontContents *)
	    (((LONG) fontContentsHeader) - sizeof(mfc->allocBytes));
    FreeMem(mfc, mfc->allocBytes);
@


36.6
log
@(rename to new DFC prefix for external functions)
@
text
@d8 1
d49 2
a50 2
*	or a DOS error occurred, or memory could not be allocated for
*	the fontContentsHeader.
d67 1
a67 1
    struct XFontContents *xfc;
d69 2
d108 1
a108 1
    size = sizeof(*mfc)+(size*sizeof(*xfc));
d113 1
a113 1
    mfc->fch.fch_FileID = XFCH_ID;
d127 1
a127 1
		if (dfh->dfh_FileID == DFH_ID) {
d129 1
a129 1
		    xfc = &((struct XFontContents *)
d131 34
a164 8
		    strcpy(xfc->xfc_FileName, fontDirName);
		    strcat(xfc->xfc_FileName, "/");
		    strcat(xfc->xfc_FileName, fib->fib_FileName);
		    xfc->xfc_XSize = dfh->dfh_TF.tf_XSize;
		    xfc->xfc_YSize = dfh->dfh_TF.tf_YSize;
		    xfc->xfc_Style = dfh->dfh_TF.tf_Style;
		    xfc->xfc_Flags = (dfh->dfh_TF.tf_Flags &
			    ~(FPF_XTEXTATTR | FPF_ROMFONT)) | FPF_DISKFONT;
d167 1
d179 2
@


36.5
log
@updated autodoc
@
text
@d56 1
a56 1
NewFontContents(fontsLock, fontName)
d192 1
a192 1
DisposeFontContents(fontContentsHeader)
@


36.4
log
@ensure font flags: ROMFONT clear DISKFONT set REMOVED clear
@
text
@d20 1
a20 1
*       NewFontContents - create a FontContents structs for a font
d26 2
d166 1
a166 1
*	DisposeFontContents - free the result from NewFontContents
d171 2
@


36.3
log
@autodoc changes

@
text
@d80 1
a80 1
    if (strlen(fontName) > MAXFONTNAME-1)
d129 1
d132 2
a133 2
		    xfc->xfc_Flags = dfh->dfh_TF.tf_Flags & ~FPF_XTEXTATTR;
		    xfc->xfc_XSize = dfh->dfh_TF.tf_XSize;
@


36.2
log
@do not set XTEXTATTR in flags of font contents, because X is not in the
position like XTextAttr.  Just use the XFCH_ID to determine if X is valid.
@
text
@a40 2
*	    The longword preceeding this header contains the size
*	    of the header + 4.
d43 2
d178 3
a180 1
*	a fontContentsHeader other than one acquired by a call
@


36.1
log
@document size at long *[-1]
make XFCH_IDs instead of FCH_IDs
@
text
@d131 1
a131 1
		    xfc->xfc_Flags = dfh->dfh_TF.tf_Flags | FPF_XTEXTATTR;
@


36.0
log
@remove unused reference to diskfont library base
@
text
@d41 2
d64 1
a64 1
    struct FontContents *fc;
d103 1
a103 1
    size = sizeof(*mfc)+(size*sizeof(*fc));
d108 1
a108 1
    mfc->fch.fch_FileID = FCH_ID;
d124 1
a124 1
		    fc = &((struct FontContents *)
d126 7
a132 6
		    strcpy(fc->fc_FileName, fontDirName);
		    strcat(fc->fc_FileName, "/");
		    strcat(fc->fc_FileName, fib->fib_FileName);
		    fc->fc_YSize = dfh->dfh_TF.tf_YSize;
		    fc->fc_Style = dfh->dfh_TF.tf_Style;
		    fc->fc_Flags = dfh->dfh_TF.tf_Flags;
@


35.0
log
@new for V35
@
text
@a11 2
extern struct DiskfontLibrary *DFL;

@
