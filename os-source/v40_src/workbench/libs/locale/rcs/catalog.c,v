head     38.14;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.14
date     92.04.27.09.29.39;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     92.03.23.09.19.22;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     92.03.16.11.58.44;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     92.03.12.16.55.26;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     92.01.27.10.41.36;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.10.11.10.31.50;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.10.02.13.08.22;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.08.27.13.23.11;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.27.11.59.32;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.07.18.15.42.12;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.07.16.11.08.20;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.02.17.02.41;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.02.16.03.29;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.26.15.20.38;  author vertex;  state Exp;
branches ;
next     ;


desc
@Catalog handling for locale.library
@


38.14
log
@Fixed OC_Version tag
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/memory.h>
#include <exec/lists.h>
#include <exec/libraries.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <libraries/iffparse.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/utility_protos.h>
#include <clib/locale_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/locale_pragmas.h>

/* application includes */
#include "localebase.h"
#include "catalog.h"


/*****************************************************************************/


#define ID_CTLG MAKE_ID('C','T','L','G')
#define ID_STRS MAKE_ID('S','T','R','S')
#define ID_CSET MAKE_ID('C','S','E','T')
#define ID_LANG MAKE_ID('L','A','N','G')
#define ID_FVER MAKE_ID('F','V','E','R')

#define IFFPrefChunkCnt 4
static LONG far IFFPrefChunks[] =
{
    ID_CTLG, ID_STRS,
    ID_CTLG, ID_CSET,
    ID_CTLG, ID_FVER,
    ID_CTLG, ID_LANG
};


/*****************************************************************************/


struct CodeSet
{
    ULONG cs_CodeSet;
    ULONG cs_Reserved[7];
};


/*****************************************************************************/


extern struct LocaleLib * far LocBase;


/*****************************************************************************/


static BOOL LoadCatalog(struct ExtCatalog *catalog, STRPTR name,
                        STRPTR language, ULONG reqVersion)
{
struct IFFHandle   *iff;
struct ContextNode *cn;
BOOLEAN             dataFlag = FALSE;
BOOL		    result = FALSE;
LONG                error;
struct Library     *IFFParseBase;
LONG		    bufSize;
ULONG		   *ptr,*lastpoke;
ULONG		    len;
struct CodeSet      codeset;
char		    buffer[100];
ULONG		    version,revision;
LONG		    chars;
UWORD		    i;

    if (!(IFFParseBase = OpenLibrary("iffparse.library",37)))
    {
        SetIoErr(ERROR_INVALID_RESIDENT_LIBRARY);
        return(FALSE);
    }

    if (iff = AllocIFF())
    {
        if (iff->iff_Stream = (ULONG)Open(name,MODE_OLDFILE))
        {
            InitIFFasDOS(iff);

            if (!OpenIFF(iff,IFFF_READ))
            {
                if (!ParseIFF(iff,IFFPARSE_STEP))
                {
                    cn = CurrentChunk(iff);
                    if (cn->cn_ID == ID_FORM && cn->cn_Type == ID_CTLG)
                    {
                        if (!StopChunks(iff,IFFPrefChunks,IFFPrefChunkCnt))
                        {
                            while (TRUE)
                            {
                                if (error = ParseIFF(iff,IFFPARSE_SCAN))
                                {
                                    if (error == IFFERR_EOF)
                                        result = dataFlag;

                                    break;
                                }

                                cn = CurrentChunk(iff);

                                if (cn->cn_ID == ID_STRS && cn->cn_Type == ID_CTLG)
                                {
                                    if (bufSize = cn->cn_Size)
                                    {
                                        if (!(catalog->ec_Strings = AllocVecFlush(bufSize,MEMF_PUBLIC)))
                                            break;

                                        if (ReadChunkBytes(iff,catalog->ec_Strings,bufSize) != bufSize)
                                            break;
                                    }
                                    dataFlag = TRUE;
                                }
                                else if (cn->cn_ID == ID_LANG && cn->cn_Type == ID_CTLG)
                                {
                                    if (cn->cn_Size > 32)
                                        break;

                                    if (ReadChunkBytes(iff,catalog->ec_Language,cn->cn_Size) != cn->cn_Size)
                                        break;

                                    if (strcmp(language,catalog->ec_Language) != 0)
                                        break;
                                }
                                else if (cn->cn_ID == ID_FVER && cn->cn_Type == ID_CTLG)
                                {
                                    if (cn->cn_Size > 100)
                                        break;

                                    if (ReadChunkBytes(iff,buffer,cn->cn_Size) != cn->cn_Size)
                                        break;

                                    buffer[99] = 0;
                                    i = 0;
                                    while (buffer[i] && (buffer[i] != ' '))
                                        i++;
                                    while (buffer[i] && (buffer[i] == ' '))
                                        i++;
                                    while (buffer[i] && (buffer[i] != ' '))
                                        i++;

                                    if (buffer[i])
                                    {
                                        if ((chars = StrToLong(&buffer[i],&version)) < 0)
                                            break;

                                        i += chars;
                                        if (buffer[i++])
                                        {
                                            if (StrToLong(&buffer[i],&revision) < 0)
                                                break;
                                        }

                                        catalog->ec_Catalog.cat_Version  = version;
                                        catalog->ec_Catalog.cat_Revision = revision;

                                        if (reqVersion && (version != reqVersion))
                                            break;
                                    }
                                }
                                else if (cn->cn_ID == ID_CSET && cn->cn_Type == ID_CTLG)
                                {
                                    if (ReadChunkBytes(iff,&codeset,sizeof(struct CodeSet)) != sizeof(struct CodeSet))
                                        break;

                                    catalog->ec_Catalog.cat_CodeSet = codeset.cs_CodeSet;
                                }
                            }
                        }
                    }
                }
                CloseIFF(iff);
            }
            Close(iff->iff_Stream);
        }
        FreeIFF(iff);
    }
    else
    {
        SetIoErr(ERROR_NO_FREE_STORE);
    }

    CloseLibrary(IFFParseBase);

    if (result)
    {
        catalog->ec_Catalog.cat_Language = catalog->ec_Language;

        /* now zip through buffer, changing the length longs to be pointers
         * to the next string instead. This speeds up the string searching
         * code as it doesn't need to add and compensate for padding as we do
         * that here.
         */

        if (ptr = catalog->ec_Strings)
        {
            lastpoke = NULL;
            while (bufSize)
            {
                ptr++;                      // skip id longword
                len = *ptr;                 // get length
                len = ((len+3) / 4) * 4;    // round up to multiple of 4
                *ptr = (ULONG)ptr+len+4;    // change length to point to next string
                lastpoke = ptr;
                ptr = (ULONG *)*ptr;
                bufSize -= len+8;
            }

            if (lastpoke)
                *lastpoke = NULL;
        }
    }
    else
    {
        FreeVec(catalog->ec_Strings);
        catalog->ec_Strings = NULL;
    }

    return(result);
}


/*****************************************************************************/


struct ExtCatalog * ASM OpenCatalogALVO(REG(a0) struct ExtLocale *locale,
				        REG(a1) STRPTR name,
				        REG(a2) struct TagItem *tags)
{
struct LocaleLib  *lib = LocaleBase;
struct ExtCatalog *result = NULL;
struct Process    *process;
char		   path[100];
UWORD		   i,maxLoop;
STRPTR             lang;
STRPTR             builtInLanguage;
UWORD		   version;
BOOLEAN		   openedLoc = FALSE;
BPTR               lock;
BOOLEAN            doProgDir;
UBYTE              cnt;
APTR               oldWP;

    if (!locale)
    {
        locale    = (struct ExtLocale *)OpenLocale(NULL);
        openedLoc = TRUE;
    }

/*
    builtInCodeSet  = (ULONG) GetTagData(OC_BuiltInCodeSet,0,tags);
*/
    builtInLanguage = (STRPTR)GetTagData(OC_BuiltInLanguage,(ULONG)"english",tags);
    version         = (UWORD) GetTagData(OC_Version,0,tags);
    lang            = (STRPTR)GetTagData(OC_Language,0,tags);

    maxLoop = 10;
    if (lang)
        maxLoop++;

    LockLib();

    for (i=0; i<maxLoop; i++)
    {
        if (lang)
        {
            if (builtInLanguage && (strcmp(lang,builtInLanguage) == 0))
            {
                /* preferred language matches built-in language */
                break;
            }
            else
            {
                /* is the needed catalog already in memory? */
                result = (struct ExtCatalog *)LocaleBase->lb_Catalogs.mlh_Head;
                while (result->ec_Catalog.cat_Link.ln_Succ)
                {
                    if (Stricmp(name,result->ec_Catalog.cat_Link.ln_Name) == 0)
                    {
                        if (((version == 0) || (result->ec_Catalog.cat_Version == version))
                        && (Stricmp(lang,result->ec_Catalog.cat_Language) == 0))
                            break;
                    }

                    result = (struct ExtCatalog *)result->ec_Catalog.cat_Link.ln_Succ;
                }

                /* did we actually find it in memory? */
                if (result->ec_Catalog.cat_Link.ln_Succ)
                {
                    /* make it faster to find this node the next time around */
                    Remove(result); /* added at head of list on exit of the loop */
                    break;
                }

                if (!(result = AllocVecFlush(sizeof(struct ExtCatalog)+strlen(name)+1,MEMF_PUBLIC|MEMF_CLEAR)))
                    break;

                result->ec_Catalog.cat_Link.ln_Name = (STRPTR)((ULONG)result+sizeof(struct ExtCatalog));
                strcpy(result->ec_Catalog.cat_Link.ln_Name,name);

                process = (struct Process *)FindTask(NULL);
                oldWP = process->pr_WindowPtr;
                process->pr_WindowPtr = (APTR)-1;

                doProgDir = TRUE;
                if (!(lock = Lock("PROGDIR:",ACCESS_READ)))
                    if (lock = Lock("LOCALE:",ACCESS_READ))
                        doProgDir = FALSE;
                UnLock(lock);

                process->pr_WindowPtr = oldWP;

                cnt = 3;
                while (--cnt)
                {
                    if (doProgDir)
                    {
                        doProgDir = FALSE;
                        strcpy(path,"PROGDIR:Catalogs");
                        AddPart(path,lang,sizeof(path));
                        AddPart(path,name,sizeof(path));

                        if (GetProgramDir() && LoadCatalog(result,path,lang,version))
                            break;
                    }
                    else
                    {
                        doProgDir = TRUE;
                        strcpy(path,"LOCALE:Catalogs");
                        AddPart(path,lang,sizeof(path));
                        AddPart(path,name,sizeof(path));

                        if (LoadCatalog(result,path,lang,version))
                            break;
                    }
                }

                /* we found something! */
                if (cnt)
                    break;

                FreeVec(result);
                result = NULL;
            }
        }

        if (i < 10)
            lang = locale->el_Locale.loc_PrefLanguages[i];
    }

    if (result)
    {
        AddHead((struct List *)&lib->lb_Catalogs,result);
        result->ec_UsageCnt++;
    }

    UnlockLib();

    if (openedLoc)
        CloseLocale(locale);

    return(result);
}


/*****************************************************************************/


VOID ASM CloseCatalogLVO(REG(a0) struct ExtCatalog *catalog)
{
    if (catalog)
        catalog->ec_UsageCnt--;
}


/*****************************************************************************/


/* WARNING: This routine is called from the library's expunge vector and so
 *          runs under Forbid().
 *
 *	    It is also called, and must be called, with the library
 *	    semaphore locked.
 */
VOID ASM FlushCatalogs(VOID)
{
struct ExtCatalog *node;
struct ExtCatalog *next;

    node = (struct ExtCatalog *)LocaleBase->lb_Catalogs.mlh_Head;
    while (next = (struct ExtCatalog *)node->ec_Catalog.cat_Link.ln_Succ)
    {
        if (!node->ec_UsageCnt)
        {
            Remove(node);
            FreeVec(node->ec_Strings);
            FreeVec(node);
        }

        node = next;
    }
}
@


38.13
log
@Uses AllocVecFlush()
No longer locks the semaphore from within the Flush function, this is done by
  the caller
No longer uses the Catalog semaphore, just uses the new LockLib() call
LoadCatalog() now sets IoErr() correctly when AllocIFF() fails
@
text
@d160 2
a161 1
                                    if (!buffer[i])
d165 6
a170 4
                                    i += chars;
                                    if (!buffer[i++])
                                        if (StrToLong(&buffer[i],&revision) < 0)
                                            break;
d172 2
a173 2
                                    catalog->ec_Catalog.cat_Version  = version;
                                    catalog->ec_Catalog.cat_Revision = revision;
d175 3
a177 2
                                    if (reqVersion && (version != reqVersion))
                                        break;
@


38.12
log
@Changed some BOOLs to BOOLEANs
@
text
@d69 2
a70 2
BOOL LoadCatalog(struct ExtCatalog *catalog, STRPTR name,
                 STRPTR language, ULONG reqVersion)
a112 1
                                    {
d114 1
a114 1
                                    }
d124 1
a124 1
                                        if (!(catalog->ec_Strings = AllocVec(bufSize,MEMF_PUBLIC)))
d192 5
d275 1
a275 1
    ObtainSemaphore(&lib->lb_CatLock);
d310 1
a310 3
                if (!(result = AllocVec(sizeof(struct ExtCatalog)+strlen(name)+1,MEMF_PUBLIC|MEMF_CLEAR)))
                {
                    SetIoErr(ERROR_NO_FREE_STORE);
d312 1
a312 1
                }
d335 2
a336 2
                        AddPart(path,lang,100);
                        AddPart(path,name,100);
a338 1
                        {
a339 1
                        }
d345 2
a346 2
                        AddPart(path,lang,100);
                        AddPart(path,name,100);
a348 1
                        {
a349 1
                        }
d372 1
a372 1
    ReleaseSemaphore(&lib->lb_CatLock);
d396 3
a403 1
struct LocaleLib  *lib = LocaleBase;
d405 9
a413 11
     if (AttemptSemaphore(&lib->lb_CatLock))
     {
         node = (struct ExtCatalog *)lib->lb_Catalogs.mlh_Head;
         while (next = (struct ExtCatalog *)node->ec_Catalog.cat_Link.ln_Succ)
         {
             if (!node->ec_UsageCnt)
             {
                 Remove(node);
                 FreeVec(node->ec_Strings);
                 FreeVec(node);
             }
d415 2
a416 4
             node = next;
         }
         ReleaseSemaphore(&lib->lb_CatLock);
     }
@


38.11
log
@Now checks version numbers and language names for disk-loaded catalogs
@
text
@d74 1
a74 1
BOOL                dataFlag = FALSE;
d248 1
a248 1
BOOL		   openedLoc = FALSE;
d250 1
a250 1
BOOL               doProgDir;
@


38.10
log
@Fixed catalog caching
@
text
@d69 2
a70 1
BOOL LoadCatalog(struct ExtCatalog *catalog, STRPTR name)
a125 1
                                        {
a126 1
                                        }
a128 3
                                        {
                                            FreeVec(catalog->ec_Strings);
                                            catalog->ec_Strings = NULL;
a129 1
                                        }
d139 3
a141 1
                                    {
a142 1
                                    }
a149 1
                                    {
d151 1
a151 1
                                    }
d172 3
a178 1
                                    {
d180 1
a180 1
                                    }
d218 1
d223 5
d336 1
a336 1
                        if (GetProgramDir() && LoadCatalog(result,path))
d348 1
a348 1
                        if (LoadCatalog(result,path))
@


38.9
log
@Now correctly looks into PROGDIR: and LOCALE: for catalogs
@
text
@d200 1
a200 3
        catalog->ec_Catalog.cat_Language     = catalog->ec_Language;
        catalog->ec_Catalog.cat_Link.ln_Name = catalog->ec_Name;
        strcpy(catalog->ec_Name,FilePart(name));
d282 2
a283 2
                result = (struct ExtCatalog *)&LocaleBase->lb_Catalogs;
                while (result = (struct ExtCatalog *)FindName((struct List *)result,name))
d285 8
a292 3
                    if (((version == 0) || (result->ec_Catalog.cat_Version == version))
                    && (strcmp(lang,result->ec_Catalog.cat_Language) == 0))
                        break;
d296 1
a296 1
                if (result)
d303 1
a303 1
                if (!(result = AllocVec(sizeof(struct ExtCatalog),MEMF_PUBLIC|MEMF_CLEAR)))
d308 2
@


38.8
log
@Changed the way PROGDIR: and LOCALE: are scanned, now tries whichever is available
  on-line first, which reduces disk swaps a LOT.
@
text
@d318 2
a319 2
                cnt = 2;
                while (cnt--)
@


38.7
log
@Made FlushCatalog into an ASM-style function
@
text
@d8 1
d241 1
d248 4
d306 3
a308 3
                strcpy(path,"PROGDIR:Catalogs");
                AddPart(path,lang,100);
                AddPart(path,name,100);
d310 10
a319 1
                if (GetProgramDir() && LoadCatalog(result,path))
d321 6
a326 7
                    break;
                }
                else
                {
                    strcpy(path,"LOCALE:Catalogs");
                    AddPart(path,lang,100);
                    AddPart(path,name,100);
d328 6
a333 1
                    if (LoadCatalog(result,path))
d335 9
a343 1
                        break;
d346 5
@


38.6
log
@Removed LocaleBase as a parameter to all functions, compiler tracks this for us
@
text
@d359 1
a359 1
VOID FlushCatalogs(VOID)
@


38.5
log
@Now looks in LOCALE:Catalogs/languageName for catalogs
@
text
@d62 7
a68 3
BOOL ASM LoadCatalog(REG(a0) struct ExtCatalog *catalog,
		     REG(a1) STRPTR name,
		     REG(a6) struct LocaleBase *LocaleBase)
d236 1
a236 2
				        REG(a2) struct TagItem *tags,
				        REG(a6) struct LocaleBase *LocaleBase)
d238 1
d264 1
a264 1
    ObtainSemaphore(&LocaleBase->lb_CatLock);
d304 1
a304 1
                if (GetProgramDir() && LoadCatalog(result,path,LocaleBase))
d314 1
a314 1
                    if (LoadCatalog(result,path,LocaleBase))
d330 1
a330 1
        AddHead((struct List *)&LocaleBase->lb_Catalogs,result);
d334 1
a334 1
    ReleaseSemaphore(&LocaleBase->lb_CatLock);
d346 1
a346 2
VOID ASM CloseCatalogLVO(REG(a0) struct ExtCatalog *catalog,
		         REG(a6) struct LocaleBase *LocaleBase)
d359 1
a359 1
VOID ASM FlushCatalogs(REG(a6) struct LocaleBase *LocaleBase)
d363 1
d365 1
a365 1
     if (AttemptSemaphore(&LocaleBase->lb_CatLock))
d367 1
a367 1
         node = (struct ExtCatalog *) LocaleBase->lb_Catalogs.mlh_Head;
d379 1
a379 1
         ReleaseSemaphore(&LocaleBase->lb_CatLock);
@


38.4
log
@Added support for OC_Language tag
@
text
@d296 2
a297 2
                strcpy(path,"PROGDIR:");
                strcat(path,lang);
d306 2
a307 2
                    strcpy(path,"LOCALE:");
                    strcat(path,lang);
@


38.3
log
@Reverted to same thing as 38.1
@
text
@d235 1
a235 1
struct ExtCatalog *result;
d237 1
a237 1
UWORD		   i;
d249 3
a252 1
/*    builtInCodeSet  = (ULONG) GetTagData(OC_BuiltInCodeSet,0,tags); */
d254 1
d256 4
d262 1
a262 2
    result = NULL;
    for (i=0; i<10; i++)
d264 1
a264 1
        if (lang = locale->el_Locale.loc_PrefLanguages[i])
d316 1
d319 3
a321 1
        result = NULL;
@


38.2
log
@Changed the way longword padding is calculated, it was not doing the right thing
when the length was a multiple of four (it wasn't adding any padding, even
though the padding is indeed needed in order to null-terminate things)
@
text
@d212 1
a212 2
                len = len
                len = len + 4 - (len % 4);  // round up to multiple of 4
@


38.1
log
@Initial V38 RCS checkin
@
text
@d212 2
a213 1
                len = ((len+3) / 4) * 4;    // round up to multiple of 4
@
