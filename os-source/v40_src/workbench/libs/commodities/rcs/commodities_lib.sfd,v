head     38.4;
branch   ;
access   ;
symbols  ;
locks    vertex:38.4; strict;
comment  @@;


38.4
date     92.02.27.17.04.37;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.24.10.20.11;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.33.12;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.25.22;  author vertex;  state Exp;
branches ;
next     ;


desc
@Function definitions for commodities
@


38.4
log
@*** empty log message ***
@
text
@==id $Id: commodities_lib.sfd,v 38.3 91/10/24 10:20:11 vertex Exp Locker: vertex $
* "commodities.library"
==base _CxBase
==bias 30
==public
==include <exec/types.h>
==include <exec/nodes.h>
==include <libraries/commodities.h>
==include <devices/inputevent.h>
==include <devices/keymap.h>
==version 36
*
*  OBJECT UTILITIES
*
CxObj *CreateCxObj(ULONG type,LONG arg1,LONG arg2) (D0,A0,A1)
CxObj *CxBroker(struct NewBroker *nb,LONG *error) (A0,D0)
LONG ActivateCxObj(CxObj *co,LONG true) (A0,D0)
VOID DeleteCxObj(CxObj *co) (A0)
VOID DeleteCxObjAll(CxObj *co) (A0)
ULONG CxObjType(CxObj *co) (A0)
LONG CxObjError(CxObj *co) (A0)
VOID ClearCxObjError(CxObj *co) (A0)
LONG SetCxObjPri(CxObj *co,LONG pri) (A0,D0)
*
*  OBJECT ATTACHMENT
*
VOID AttachCxObj(CxObj *headObj,CxObj *co) (A0,A1)
VOID EnqueueCxObj(CxObj *headObj,CxObj *co) (A0,A1)
VOID InsertCxObj(CxObj *headObj,CxObj *co,CxObj *pred) (A0,A1,A2)
VOID RemoveCxObj(CxObj *co) (A0)
*
*  TYPE SPECIFIC
*
==private
VOID CxReserved0( ) ()
==public
VOID SetTranslate(CxObj *translator,struct InputEvent *events) (A0,A1)
VOID SetFilter(CxObj *filter,STRPTR text) (A0,A1)
VOID SetFilterIX(CxObj *filter,IX *ix) (A0,A1)
LONG ParseIX(STRPTR description,IX *ix) (A0,A1)
*
*  COMMON MESSAGE
*
ULONG CxMsgType(CxMsg *cxm) (A0)
APTR CxMsgData(CxMsg *cxm) (A0)
LONG CxMsgID(CxMsg *cxm) (A0)
*
*  MESSAGE ROUTING
*
VOID DivertCxMsg(CxMsg *cxm,CxObj *headObj,CxObj *returnObj) (A0,A1,A2)
VOID RouteCxMsg(CxMsg *cxm,CxObj *co) (A0,A1)
VOID DisposeCxMsg(CxMsg *cxm) (A0)
*
*  INPUT EVENT HANDLING
*
BOOL InvertKeyMap(ULONG ansiCode,struct InputEvent *event,struct KeyMap *km) (D0,A0,A1)
VOID AddIEvents(struct InputEvent *events) (A0)
==private
*
* FOR USE ONLY BY CONTROLLER PROGRAM
*
LONG CopyBrokerList(struct List *blist) (A0)
VOID FreeBrokerList(struct List *list) (A0)
LONG BrokerCommand(STRPTR name,LONG id) (A0,D0)
==public
==version 38
*  MORE INPUT EVENT HANDLING
BOOL MatchIX(struct InputEvent *event, IX *ix) (A0,A1)
==private
*
* Reserved entries
*
VOID CxReserved1( ) ()
VOID CxReserved2( ) ()
VOID CxReserved3( ) ()
VOID CxReserved4( ) ()
VOID CxReserved5( ) ()
==end
@


38.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
==id $Id: commodities_lib.sfd,v 38.2 91/10/21 11:33:12 vertex Exp $
d35 1
a35 1
CxObj *FindBroker(STRPTR name) (A0)
a72 1
VOID CxReserved0( ) ()
d77 1
@


38.2
log
@Added reserved vectors
Added vector for MatchIX()
Added return value for SetCxObjPri()
@
text
@d1 1
a1 1
==id $Id: commodities_lib.sfd,v 38.1 91/10/07 15:25:22 vertex Exp Locker: vertex $
d66 1
@


38.1
log
@Initial V38 RCS checkin
@
text
@d1 1
a1 1
==id $Id: commodities_lib.sfd,v 37.5 91/04/15 15:24:13 vertex Exp Locker: vertex $
d23 1
a23 1
VOID SetCxObjPri(CxObj *co,LONG pri) (A0,D0)
d66 11
@
