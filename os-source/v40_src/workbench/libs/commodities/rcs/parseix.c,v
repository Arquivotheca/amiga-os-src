head     38.12;
branch   ;
access   ;
symbols  ;
locks    vertex:38.12; strict;
comment  @ * @;


38.12
date     92.10.16.18.00.05;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     92.08.10.16.54.15;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.02.10.19.52;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     92.02.25.13.11.51;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     92.02.19.17.50.01;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.19.17.38.19;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.11.16.22.33;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.12.10.16.36.31;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.22.12.40.40;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.21.11.01.59;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.08.12.12.05;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.24.41;  author vertex;  state Exp;
branches ;
next     ;


desc
@Input expression parsing
@


38.12
log
@Added NEWPOINTERPOS class
Changes for SAS/C 6.0
@
text
@
#include <devices/inputevent.h>
#include <string.h>

#include <clib/exec_protos.h>
#include <clib/utility_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/utility_pragmas.h>

#include "commoditiesbase.h"
#include "parseix.h"


/*****************************************************************************/


struct Keyword
{
    STRPTR word;
    LONG   id;
};


/*****************************************************************************/


/* table of classes */
static const struct Keyword Classes[] =
{
    {"DISKINSERTED",  IECLASS_DISKINSERTED},
    {"DISKREMOVED",   IECLASS_DISKREMOVED},
    {"EVENT",         IECLASS_EVENT},
    {"NEWPOINTERPOS", IECLASS_NEWPOINTERPOS},
    {"NEWPREFS",      IECLASS_NEWPREFS},
    {"POINTERPOS",    IECLASS_POINTERPOS},
    {"RAWKEY",        IECLASS_RAWKEY},
    {"RAWMOUSE",      IECLASS_RAWMOUSE},
    {"TIMER",         IECLASS_TIMER}
};
#define NUMCLASSES (sizeof(Classes) / sizeof(struct Keyword))


/*****************************************************************************/


/* table of qualifiers */
static const struct Keyword Qualifiers[] =
{
    {"CAPSLOCK",      IEQUALIFIER_CAPSLOCK},
    {"CAPS_LOCK",     IEQUALIFIER_CAPSLOCK},
    {"CONTROL",       IEQUALIFIER_CONTROL},
    {"CTRL",          IEQUALIFIER_CONTROL},
    {"LALT",          IEQUALIFIER_LALT},
    {"LAMIGA",        IEQUALIFIER_LCOMMAND},
    {"LBUTTON",       IEQUALIFIER_LEFTBUTTON},
    {"LCOMMAND",      IEQUALIFIER_LCOMMAND},
    {"LEFTBUTTON",    IEQUALIFIER_LEFTBUTTON},
    {"LEFT_ALT",      IEQUALIFIER_LALT},
    {"LEFT_AMIGA",    IEQUALIFIER_LCOMMAND},
    {"LEFT_BUTTON",   IEQUALIFIER_LEFTBUTTON},
    {"LEFT_COMMAND",  IEQUALIFIER_LCOMMAND},
    {"LEFT_SHIFT",    IEQUALIFIER_LSHIFT},
    {"LSHIFT",        IEQUALIFIER_LSHIFT},
    {"MBUTTON",       IEQUALIFIER_MIDBUTTON},
    {"MIDBUTTON",     IEQUALIFIER_MIDBUTTON},
    {"MIDDLEBUTTON",  IEQUALIFIER_MIDBUTTON},
    {"MIDDLE_BUTTON", IEQUALIFIER_MIDBUTTON},
    {"NUMERICPAD",    IEQUALIFIER_NUMERICPAD},
    {"NUMERIC_PAD",   IEQUALIFIER_NUMERICPAD},
    {"NUMPAD",        IEQUALIFIER_NUMERICPAD},
    {"NUM_PAD",       IEQUALIFIER_NUMERICPAD},
    {"RALT",          IEQUALIFIER_RALT},
    {"RAMIGA",        IEQUALIFIER_RCOMMAND},
    {"RBUTTON",       IEQUALIFIER_RBUTTON},
    {"RCOMMAND",      IEQUALIFIER_RCOMMAND},
    {"RELATIVEMOUSE", IEQUALIFIER_RELATIVEMOUSE},
    {"REPEAT",        IEQUALIFIER_REPEAT},
    {"RIGHTBUTTON",   IEQUALIFIER_RBUTTON},
    {"RIGHT_ALT",     IEQUALIFIER_RALT},
    {"RIGHT_AMIGA",   IEQUALIFIER_RCOMMAND},
    {"RIGHT_BUTTON",  IEQUALIFIER_RBUTTON},
    {"RIGHT_COMMAND", IEQUALIFIER_RCOMMAND},
    {"RIGHT_SHIFT",   IEQUALIFIER_RSHIFT},
    {"RSHIFT",        IEQUALIFIER_RSHIFT}
};
#define NUMQUALS (sizeof(Qualifiers) / sizeof(struct Keyword))


/*****************************************************************************/


/* Qualifier Synonyms */
static const struct Keyword QualifierSynonyms[] =
{
    {"ALT",   IXSYM_ALT},
    {"CAPS",  IXSYM_CAPS},
    {"SHIFT", IXSYM_SHIFT}
};
#define NUMSYNS (sizeof(QualifierSynonyms) / sizeof(struct Keyword))


/*****************************************************************************/


/* upstroke qualifier */
static const struct Keyword UpPfxs[] =
{
   {"UPSTROKE", 1}
};
#define NUMUPFX (sizeof(UpPfxs) / sizeof(struct Keyword))


/*****************************************************************************/


static const struct Keyword HiKeys[] =
{
    {"BACKSPACE",   0x41},
    {"BREAK",       0x6e},
    {"COMMA",       0x38},
    {"CURSOR_DOWN", 0x4d},
    {"CURSOR_LEFT", 0x4f},
    {"CURSOR_RIGHT",0x4e},
    {"CURSOR_UP",   0x4c},
    {"DEL",         0x46},
    {"DELETE",      0x46},
    {"DOWN",        0x4d},
    {"END",         0x71},
    {"ENTER",       0x43},
    {"ESC",         0x45},
    {"ESCAPE",      0x45},
    {"F1",          0x50},
    {"F10",         0x59},
    {"F11",         0x4b},
    {"F12",         0x6f},
    {"F2",          0x51},
    {"F3",          0x52},
    {"F4",          0x53},
    {"F5",          0x54},
    {"F6",          0x55},
    {"F7",          0x56},
    {"F8",          0x57},
    {"F9",          0x58},
    {"HELP",        0x5f},
    {"HOME",        0x70},
    {"INSERT",      0x47},
    {"LEFT",        0x4f},
    {"PAGE_DOWN",   0x49},
    {"PAGE_UP",     0x48},
    {"PAUSE",       0x6e},
    {"RETURN",      0x44},
    {"RIGHT",       0x4e},
    {"SPACE",       0x40},
    {"SPACEBAR",    0x40},
    {"TAB",         0x42},
    {"UP",          0x4c}
};
#define NUMHIKEYS (sizeof(HiKeys) / sizeof(struct Keyword))


/*****************************************************************************/


static const struct Keyword MouseKeys[] =
{
    {"MOUSE_LEFTPRESS",   IECODE_LBUTTON},
    {"MOUSE_MIDDLEPRESS", IECODE_MBUTTON},
    {"MOUSE_RIGHTPRESS",  IECODE_RBUTTON}
};
#define NUMMOUSEKEYS (sizeof(MouseKeys) / sizeof(struct Keyword))


/*****************************************************************************/


static const struct Keyword NumericKeys[] =
{
    {"(", 0x5a},
    {")", 0x5b},
    {"*", 0x5d},
    {"+", 0x5e},
    {"-", 0x4a},
    {".", 0x3c},
    {"/", 0x5c},
    {"0", 0x0f},
    {"1", 0x1d},
    {"2", 0x1e},
    {"3", 0x1f},
    {"4", 0x2d},
    {"5", 0x2e},
    {"6", 0x2f},
    {"7", 0x3d},
    {"8", 0x3e},
    {"9", 0x3f}
};
#define NUMNUMERICKEYS (sizeof(NumericKeys) / sizeof(struct Keyword))


/*****************************************************************************/


#define NOCARE_PREFIX   '-'
#define NOMATCH         -1
#define PARSEBUFLEN	257


/*****************************************************************************/


static WORD BinSearch(STRPTR token, UWORD tokenLen,
                      const struct Keyword *keywords, WORD numKeywords)
{
WORD l,r,x;
WORD comp;

    l = 0;
    r = numKeywords-1;

    do
    {
        x = (l+r) / 2;

        comp = Strnicmp(token,keywords[x].word,tokenLen);
        if (comp < 0)
            r = x-1;
        else if (comp > 0)
            l = x+1;
        else if (strlen(keywords[x].word) != tokenLen)
            r = x-1;
        else
            return((WORD)keywords[x].id);
    }
    while (l <= r);

    return(NOMATCH);
}


/*****************************************************************************/


static BOOL IsSeparator(char ch)
{
    return((BOOL) ((ch == ' ') || (ch == '\t') || (ch == ',') || (ch == '\n')));
}


/*****************************************************************************/


static STRPTR GetToken(STRPTR buf, UWORD *resultLen)
{
STRPTR result;

    while (IsSeparator(*buf))
        buf++;

    result = NULL;
    *resultLen = 0;

    if (*buf)
    {
        result = buf;
        while (!IsSeparator(*buf) && (*buf))
        {
            buf++;
            *resultLen = *resultLen+1;
        }
    }

    return(result);
}


/*****************************************************************************/


LONG ASM ParseIXLVO(REG(a0) STRPTR string,
                    REG(a1) struct InputXpression *ix)
{
   /* Returns:  0 if OK
    *          -1 if tokens after end (code spec)
    *          -2 if null string 'string'
    */

STRPTR            token;
UWORD             tokenLen;
LONG              cc;
WORD              qualadd;
LONG              dontcare;
struct InputEvent ievent;

    ix->ix_Class     = IECLASS_RAWKEY;
    ix->ix_Code      = 0;
    ix->ix_CodeMask  = 0xFFFF;
    ix->ix_Qualifier = 0;
    ix->ix_QualMask  = 0x73FF;   /* note no RELATIVEMOUSE */
    ix->ix_QualSame  = 0;

    if (!string || (string[0] == 0))
    {
        ix->ix_Code = 0xFFFF;     /* nothing will ever match this */
        return (-2);
    }

    /* check for a class specificier */

    if (token = GetToken(string,&tokenLen))
    {
        if ((cc = BinSearch(token,tokenLen,Classes,NUMCLASSES)) != NOMATCH)
        {
            ix->ix_Class = cc;
            token = GetToken(&token[tokenLen],&tokenLen);
        }

        /* check for qualifiers and synonyms */

        while (token)
        {
            /* check "don't care" prefix: e.g. -shift */
            if (dontcare = (token[0] == NOCARE_PREFIX))
            {
                token++;
                tokenLen--;
            }

            if ((cc = BinSearch(token,tokenLen,Qualifiers,NUMQUALS)) != NOMATCH)
            {
                if (dontcare)
                    ix->ix_QualMask &= ~cc;
                else
                    ix->ix_Qualifier |= cc;
            }
            else if ((cc = BinSearch(token,tokenLen,QualifierSynonyms,NUMSYNS)) != NOMATCH)
            {
                ix->ix_QualSame |= cc;
                switch (cc)
                {
                    case IXSYM_SHIFT: qualadd = IXSYM_SHIFTMASK;
                                      break;

                    case IXSYM_CAPS : qualadd = IXSYM_CAPSMASK;
                                      break;

                    case IXSYM_ALT  : qualadd = IXSYM_ALTMASK;
                                      break;
                }

                if (dontcare)
                    ix->ix_QualMask &= ~qualadd;
                else
                    ix->ix_Qualifier |= qualadd;
            }
            else
            {
                if (dontcare)
                {
                    /* We noted the "don't care" prefix above, but it wasn't
                     * attached to a qualifier or synonym, so we'd better
                     * back up so we can catch it below, when we test uppfxs
                     */
                    token--;
                    tokenLen++;
                }
                break;   /* try function code, below */
            }
            token = GetToken(&token[tokenLen],&tokenLen);
        }

        /* check IECODE_UP_PREFIX */

        if (token)
        {
            if (dontcare = (token[0] == NOCARE_PREFIX))
            {
                token++;
                tokenLen--;
            }

            if ((cc = BinSearch(token,tokenLen,UpPfxs,NUMUPFX)) != NOMATCH)
            {
                if (dontcare)
                {
                    ix->ix_CodeMask &= ~IECODE_UP_PREFIX;
                }
                else
                {
                    ix->ix_Code |= IECODE_UP_PREFIX;
                }
                token = GetToken(&token[tokenLen],&tokenLen);
            }
        }

        if (token)
        {
            /* need a mousecode now */
            if (ix->ix_Class == IECLASS_RAWMOUSE)
            {
                if ((cc = BinSearch(token,tokenLen,MouseKeys,NUMMOUSEKEYS)) != NOMATCH)
                {
                    ix->ix_Code |= cc;
                    token = GetToken(&token[tokenLen],&tokenLen);
                }
            }
            /* or a keycode */
            else if (ix->ix_Class == IECLASS_RAWKEY)
            {
                if ((cc = BinSearch(token,tokenLen,HiKeys,NUMHIKEYS)) != NOMATCH)
                {
                    ix->ix_Code |= cc;
                    token = GetToken(&token[tokenLen],&tokenLen);
                }
                else if (strlen(token) == 1)      /* invert the keycode */
                {
                    if (ix->ix_Qualifier & IEQUALIFIER_NUMERICPAD)
                    {
                        cc= BinSearch(token,tokenLen,NumericKeys,NUMNUMERICKEYS);
                        if (cc != NOMATCH)
                        {
                            ix->ix_Code |= cc;
                        }
                    }
                    else if (InvertKeyMap((ULONG)token[0],&ievent,NULL))
                    {
                        ix->ix_Code      |= ievent.ie_Code;
                        ix->ix_Qualifier |= ievent.ie_Qualifier;
                        /* kludge to get numeric pad keys */
                    }
                    token = GetToken(&token[tokenLen],&tokenLen);
                }
            }
        }
    }

    return ((LONG)token? -1: 0);   /* if I got here by NULL, it's OK   */
}
@


38.11
log
@Fixed alphabetical order of numeric keypad keys
@
text
@d29 1
a29 1
struct Keyword Classes[] =
d31 9
a39 8
    {"DISKINSERTED",IECLASS_DISKINSERTED},
    {"DISKREMOVED", IECLASS_DISKREMOVED},
    {"EVENT",       IECLASS_EVENT},
    {"NEWPREFS",    IECLASS_NEWPREFS},
    {"POINTERPOS",  IECLASS_POINTERPOS},
    {"RAWKEY",      IECLASS_RAWKEY},
    {"RAWMOUSE",    IECLASS_RAWMOUSE},
    {"TIMER",       IECLASS_TIMER}
d48 1
a48 1
struct Keyword Qualifiers[] =
d94 1
a94 1
struct Keyword QualifierSynonyms[] =
d107 1
a107 1
struct Keyword UpPfxs[] =
d117 1
a117 1
struct Keyword HiKeys[] =
d165 1
a165 1
struct Keyword MouseKeys[] =
d177 1
a177 1
struct Keyword NumericKeys[] =
d211 2
a212 2
WORD BinSearch(STRPTR token, UWORD tokenLen,
               struct Keyword *keywords, WORD numKeywords)
d232 1
a232 1
            return(keywords[x].id);
d243 1
a243 1
BOOL IsSeparator(char ch)
d245 1
a245 1
    return((ch == ' ') || (ch == '\t') || (ch == ',') || (ch == '\n'));
d252 1
a252 1
STRPTR GetToken(STRPTR buf, UWORD *resultLen)
@


38.10
log
@The mouse button qualifiers now work...
@
text
@d178 7
d194 1
a194 8
    {"9", 0x3f},
    {".", 0x3c},
    {"(", 0x5a},
    {")", 0x5b},
    {"/", 0x5c},
    {"*", 0x5d},
    {"-", 0x4a},
    {"+", 0x5e}
d419 1
d421 1
@


38.9
log
@Finally handles failures of ParseIX() correctly
@
text
@d297 1
a297 1
    ix->ix_QualMask  = 0x3FF;   /* note no RELATIVEMOUSE */
@


38.8
log
@*** empty log message ***
@
text
@d294 1
a294 1
    ix->ix_Code      = 0xFFFF;
d300 3
a302 1
    if (!string)
d304 1
d370 1
a370 1
        /* check iecode_up_prefix */
a429 4
        }
        else
        {
            ix->ix_Code = 0;
@


38.7
log
@Fixed bug with initializing default IX to match everything instead of nothing
@
text
@d296 1
a296 1
    ix->ix_Qualifier = 0xFFFF;
d391 1
a391 2
        /* need a mousecode now */
        if (ix->ix_Class == IECLASS_RAWMOUSE)
d393 2
a394 4
            if (!token)
                return(-3);

            if ((cc = BinSearch(token,tokenLen,MouseKeys,NUMMOUSEKEYS)) != NOMATCH)
d396 30
a425 2
                ix->ix_Code |= cc;
                token = GetToken(&token[tokenLen],&tokenLen);
d428 1
a428 2
        /* or a keycode */
        else if (ix->ix_Class == IECLASS_RAWKEY)
d430 1
a430 24
            if (!token)
                return(-3);

            if ((cc = BinSearch(token,tokenLen,HiKeys,NUMHIKEYS)) != NOMATCH)
            {
                ix->ix_Code |= cc;
                token = GetToken(&token[tokenLen],&tokenLen);
            }
            else if (strlen(token) == 1)      /* invert the keycode */
            {
                if (ix->ix_Qualifier & IEQUALIFIER_NUMERICPAD)
                {
                    cc= BinSearch(token,tokenLen,NumericKeys,NUMNUMERICKEYS);
                    if (cc != NOMATCH)
                        ix->ix_Code |= cc;
                }
                else if (InvertKeyMap((ULONG)token[0],&ievent,NULL))
                {
                    ix->ix_Code      |= ievent.ie_Code;
                    ix->ix_Qualifier |= ievent.ie_Qualifier;
                    /* kludge to get numeric pad keys */
                }
                token = GetToken(&token[tokenLen],&tokenLen);
            }
@


38.6
log
@Swapped values for MOUSE_MIDDLEPRESS and MOUSE_RIGHTPRESS
@
text
@d294 1
a294 1
    ix->ix_Code      = 0;
d296 1
a296 1
    ix->ix_Qualifier = 0;
d391 14
a404 1
        if (token)
d406 9
a414 2
            /* need a keycode now */
            if (ix->ix_Class == IECLASS_RAWMOUSE)
d416 7
a422 1
                if ((cc = BinSearch(token,tokenLen,MouseKeys,NUMMOUSEKEYS)) != NOMATCH)
d424 3
a426 26
                    ix->ix_Code |= cc;
                    token = GetToken(&token[tokenLen],&tokenLen);
                }
            }
            else if (ix->ix_Class == IECLASS_RAWKEY)
            {
                if ((cc = BinSearch(token,tokenLen,HiKeys,NUMHIKEYS)) != NOMATCH)
                {
                    ix->ix_Code |= cc;
                    token = GetToken(&token[tokenLen],&tokenLen);
                }
                else if (strlen(token) == 1)      /* invert the keycode */
                {
                    if (ix->ix_Qualifier & IEQUALIFIER_NUMERICPAD)
                    {
                        cc= BinSearch(token,tokenLen,NumericKeys,NUMNUMERICKEYS);
                        if (cc != NOMATCH)
                            ix->ix_Code |= cc;
                    }
                    else if (InvertKeyMap((ULONG)token[0],&ievent,NULL))
                    {
                        ix->ix_Code      |= ievent.ie_Code;
                        ix->ix_Qualifier |= ievent.ie_Qualifier;
                        /* kludge to get numeric pad keys */
                    }
                    token = GetToken(&token[tokenLen],&tokenLen);
d428 1
@


38.5
log
@Added <rawmouse> codes
@
text
@d166 3
a168 3
    {"MOUSE_LEFTPRESS",   0x68},
    {"MOUSE_MIDDLEPRESS", 0x69},
    {"MOUSE_RIGHTPRESS",  0x6a}
@


38.4
log
@Added F10 to the key list!
@
text
@d164 12
d394 1
a394 6
            if ((cc = BinSearch(token,tokenLen,HiKeys,NUMHIKEYS)) != NOMATCH)
            {
                ix->ix_Code |= cc;
                token = GetToken(&token[tokenLen],&tokenLen);
            }
            else if (strlen(token) == 1)      /* invert the keycode */
d396 1
a396 7
                if (ix->ix_Qualifier & IEQUALIFIER_NUMERICPAD)
                {
                    cc= BinSearch(token,tokenLen,NumericKeys,NUMNUMERICKEYS);
                    if (cc != NOMATCH)
                        ix->ix_Code |= cc;
                }
                else if (InvertKeyMap((ULONG)token[0],&ievent,NULL))
d398 26
a423 3
                    ix->ix_Code      |= ievent.ie_Code;
                    ix->ix_Qualifier |= ievent.ie_Qualifier;
                    /* kludge to get numeric pad keys */
a424 1
                token = GetToken(&token[tokenLen],&tokenLen);
@


38.3
log
@InvertKeyMap actually returns a BOOL, treat it that way
@
text
@d133 1
@


38.2
log
@Uses new reentrant tokenizer
Uses binary search instead of linear search
Has many new synonyms for keyboard sequences and event qualifiers
@
text
@a1 1

d394 1
a394 1
                else if (0 <= InvertKeyMap((ULONG)token[0],&ievent,NULL))
@


38.1
log
@Initial V38 RCS checkin
@
text
@d7 2
d10 1
d29 2
a30 2
/* table of classes      */
struct Keyword classes[] =
d32 56
a87 34
    {"rawkey",      IECLASS_RAWKEY},
    {"rawmouse",    IECLASS_RAWMOUSE},
    {"event",       IECLASS_EVENT},
    {"pointerpos",  IECLASS_POINTERPOS},
    {"timer",       IECLASS_TIMER},
    {"newprefs",    IECLASS_NEWPREFS},
    {"diskremoved", IECLASS_DISKREMOVED},
    {"diskinserted",IECLASS_DISKINSERTED}
};
#define NUMCLASSES (sizeof(classes) / sizeof(struct Keyword))


/*****************************************************************************/


/* table of qualifiers   */
struct Keyword quals[] =
{
    {"lshift",        IEQUALIFIER_LSHIFT},
    {"rshift",        IEQUALIFIER_RSHIFT},
    {"capslock",      IEQUALIFIER_CAPSLOCK},
    {"control",       IEQUALIFIER_CONTROL},
    {"lalt",          IEQUALIFIER_LALT},
    {"ralt",          IEQUALIFIER_RALT},
    {"lcommand",      IEQUALIFIER_LCOMMAND},
    {"rcommand",      IEQUALIFIER_RCOMMAND},
    {"numericpad",    IEQUALIFIER_NUMERICPAD},
    {"repeat",        IEQUALIFIER_REPEAT},
    {"midbutton",     IEQUALIFIER_MIDBUTTON},
    {"rbutton",       IEQUALIFIER_RBUTTON},
    {"leftbutton",    IEQUALIFIER_LEFTBUTTON},
    {"relativemouse", IEQUALIFIER_RELATIVEMOUSE}
};
#define NUMQUALS (sizeof(quals) / sizeof(struct Keyword))
d94 1
a94 1
struct Keyword qualsyns[] =
d96 5
a100 5
    {"shift", IXSYM_SHIFT},
    {"caps",  IXSYM_CAPS},
    {"alt",   IXSYM_ALT}
};
#define NUMSYNS (sizeof(qualsyns) / sizeof(struct Keyword))
d107 1
a107 1
struct Keyword uppfxs[] =
d109 1
a109 1
   {"upstroke", 1}
d111 50
a160 35
#define NUMUPFX (sizeof(uppfxs) / sizeof(struct Keyword))


/*****************************************************************************/


struct Keyword hikeys[] =
{
    {"comma",     0x38},
    {"space",     0x40},
    {"backspace", 0x41},
    {"tab",       0x42},
    {"enter",     0x43},
    {"return",    0x44},
    {"esc",       0x45},
    {"del",       0x46},
    {"up",        0x4c},
    {"down",      0x4d},
    {"right",     0x4e},
    {"left",      0x4f},
    {"f1",        0x50},
    {"f2",        0x51},
    {"f3",        0x52},
    {"f4",        0x53},
    {"f5",        0x54},
    {"f6",        0x55},
    {"f7",        0x56},
    {"f8",        0x57},
    {"f9",        0x58},
    {"f10",       0x59},
    {"help",      0x5f}
};
#define NUMHIKEYS (sizeof(hikeys) / sizeof(struct Keyword))


d164 1
a164 1
struct Keyword numerickeys[] =
d184 1
a184 1
#define NUMNUMERICKEYS (sizeof(numerickeys) / sizeof(struct Keyword))
a189 2
static char delim[] = ", \t\n";

d198 2
a199 1
int instr(char c, char *str)
d201 9
a209 1
   /* NULL character is in every (delimiter) string   */
d211 11
a221 4
   do
   {
      if (c == *str) return (1);   /* get to compare c to '\0'   */
   } while (*str++);
d223 1
a223 1
   return (0);
d230 3
a232 35
/* YOU MUST hold the CxStatic semaphore when using this function.
 * Obtain it before the first call, and hold it across any
 * calls to strtok(NULL,...).
 * delim = NULL-terminated string consisting of all possible
 * delimiters.  Returns pointer to NULL-terminated token-string
 * (from first non-delimeter up until next delimeter)
 * or NULL if no more tokens.
 */
char *strtok(STRPTR buf, STRPTR delim)
{
   static   char   b[PARSEBUFLEN];
   static   char   *cp;         /* current position in buff   */
   char         *tok;         /* start of token         */

   if (buf)
   {
      /* initialize for new buffer   */
      cp = b;
      while (*cp++ = *buf++);
      cp = b;
   }

   /* get beginning of token   */
   for (tok = NULL; instr(*cp, delim); ++cp)
   {
      if (*cp == '\0') goto OUT;   /* no token left   */
   }
   tok = cp++;

   /* find end of token      */
   while (!instr(*cp, delim)) ++cp;
   if (*cp) *cp++ = '\0';      /* terminate that token   */

OUT:
   return (tok);
d239 1
a239 1
static int match(char *str1,char *str2)
d241 1
a241 11
   /* expect str2 to be lower case, will match either case   */
   do
   {
      if ((*str1 != *str2) &&
         /* try *str1 lower case   */
         ((*str1 < 'A') || (*str1 > 'Z') || (*str1 + ('a' - 'A') != *str2 )))
      {
         return (0);
      }
      *str2++;
   } while (*str1++);
d243 2
a244 2
   return (1);
}
d246 2
d249 9
a257 1
/*****************************************************************************/
d259 1
a259 19

LONG matchtok(char *tok,struct Keyword *kw, int num)
{
   int      i;
   long   code = NOMATCH;

   if (tok)
   {
      for (i = 0; i < num; ++i)
      {
         if (match(tok, kw->word))
         {
            code = kw->id;
            break;
         }
         kw++;
      }
   }
   return (code);
d266 1
a266 1
LONG ASM ParseIXLVO(REG(a0) STRPTR *s,
d274 2
a275 2
struct CxLib     *cx = CxBase;
STRPTR            tok;
d281 1
a281 8
    if (!s)
        return (-2);

    ObtainSemaphore(&cx->cx_Static);

    tok = strtok(s, delim);

    ix->ix_Class   = IECLASS_RAWKEY;
d283 4
a286 4
    ix->ix_CodeMask   = 0xFFFF;
    ix->ix_Qualifier= 0;
    ix->ix_QualMask = 0x3FF;   /* note no RELATIVEMOUSE   */
    ix->ix_QualSame   = 0;
d288 2
a289 12
    /* check for class specificier    */
    if ((cc = matchtok(tok, classes, NUMCLASSES)) != NOMATCH)
    {
       ix->ix_Class = cc;
       tok = (UBYTE *) strtok(NULL, delim);      /* fetch next */
    }

    /* check for qualifiers and synonyms   */
    while (tok)
    {
       /* check "don't care" prefix: e.g. -shift   */
       if (dontcare =  (tok[0] == NOCARE_PREFIX)) tok++;
d291 1
a291 52
       if ((cc = matchtok(tok, quals, NUMQUALS)) != NOMATCH)
       {
          if (dontcare)   ix->ix_QualMask &= ~cc;
          else   ix->ix_Qualifier |= cc;
       }
       else  if ((cc = matchtok(tok, qualsyns, NUMSYNS)) != NOMATCH)
       {
          ix->ix_QualSame |= cc;
          switch (cc)      /* ok, so this needs a table   */
          {
          case IXSYM_SHIFT:
             qualadd = IXSYM_SHIFTMASK;
             break;
          case IXSYM_CAPS:
             qualadd = IXSYM_CAPSMASK;
             break;
          case IXSYM_ALT:
             qualadd = IXSYM_ALTMASK;
             break;
          }
          if (dontcare)   ix->ix_QualMask &= ~qualadd;
          else         ix->ix_Qualifier |= qualadd;
       }
       else
       {
          if (dontcare)
          {
             /* We noted the "don't care" prefix above, but it wasn't
              * attached to a qualifier or synonym, so we'd better
              * back up so we can catch it below, when we test uppfxs
              */
             tok--;
          }
          break;   /* try function code, below   */
       }
       tok = (UBYTE *) strtok(NULL, delim);
    }

    /* check iecode_up_prefix   */
    if ( dontcare =  ( (tok) && ( tok[0] == NOCARE_PREFIX ) ) ) tok++;
    if ((cc = matchtok(tok, uppfxs, NUMUPFX)) != NOMATCH)
    {
       if (dontcare)
       {
          ix->ix_CodeMask &= ~IECODE_UP_PREFIX;
       }
       else
       {
          ix->ix_Code |= IECODE_UP_PREFIX;
       }
       tok = (UBYTE *) strtok(NULL, delim);
    }
d293 1
a293 2
    /* need a keycode now   */
    if ((cc= matchtok(tok, hikeys, NUMHIKEYS)) != NOMATCH)
d295 109
a403 2
       ix->ix_Code |= cc;
       tok = (UBYTE *) strtok(NULL, delim);
a404 20
    else if ( ( tok ) && ( strlen(tok) == 1 ) )      /* invert the keycode   */
    {

       if(ix->ix_Qualifier & IEQUALIFIER_NUMERICPAD)
       {
          cc= matchtok(tok, numerickeys, NUMNUMERICKEYS);
          if(cc != NOMATCH)
             ix->ix_Code |= cc;
       }
       else

       if (0 <= InvertKeyMap((ULONG) tok[0], &ievent, NULL))
       {
          ix->ix_Code        |= ievent.ie_Code;
          ix->ix_Qualifier   |= ievent.ie_Qualifier;
          /* kludge to get numeric pad keys */
       }
       tok = (UBYTE *) strtok(NULL, delim);
    }
    /** ZZZ: else numeral?   ***/
d406 1
a406 2
    ReleaseSemaphore(&cx->cx_Static);
    return ((LONG) tok? -1: 0);   /* if I got here by NULL, it's OK   */
a407 5

/* grammar:
      [class] [{[-](qual|sym)}] [[-]upstroke] [highmap|ansicode|number]
   Perform your other codemask operations directly on ix.
 */
@
