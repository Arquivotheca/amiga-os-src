head     38.7;
branch   ;
access   ;
symbols  ;
locks    vertex:38.7; strict;
comment  @ * @;


38.7
date     92.10.16.18.06.55;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.27.17.09.04;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.10.24.10.23.12;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.21.13.24.16;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.21.11.07.47;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.08.12.17.06;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.30.23;  author vertex;  state Exp;
branches ;
next     ;


desc
@Commodities startup and termination code
@


38.7
log
@Changes for SAS/C 6.0
No longer calls InitPools() function, this happens automatically
@
text
@
#include <exec/memory.h>
#include <exec/semaphores.h>

#include <devices/input.h>

#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include "commoditiesbase.h"
#include "ihandlerstub.h"
#include "pool.h"
#include "messages.h"


/*****************************************************************************/


BOOL InitCommodities(VOID)
{
struct CxLib *cx = CxBase;

    InitSemaphore(&cx->cx_LibLock);

    NewList((struct List *)&CxBase->cx_Messages);
    NewList((struct List *)&CxBase->cx_Objects);

    CxBase->cx_EventReply.mp_Node.ln_Type = NT_MSGPORT;
    CxBase->cx_EventReply.mp_Flags        = PA_IGNORE;
    NewList(&CxBase->cx_EventReply.mp_MsgList);

    if (CxBase->cx_Zero = CreateCxObj(CX_ZERO,0,0))
        return(TRUE);

    return(FALSE);
}


/*****************************************************************************/


VOID ShutdownCommodities(VOID)
{
struct CxLib      *cx = CxBase;
struct Message    *msg;
struct InputEvent *ptr;
struct InputEvent *next;

    while (msg = GetMsg(&cx->cx_EventReply))
        FreeCxMsg(msg);

    ptr = cx->cx_ReturnChain;
    while (ptr)
    {
        next = ptr->ie_NextEvent;
        FreePoolMem(ptr);
        ptr = next;
    }
    cx->cx_ReturnChain = NULL;

    DeleteCxObj(cx->cx_Zero);

    FlushPools();
}


/*****************************************************************************/


typedef VOID (* VOIDFUNC)();


VOID AttachIHandler(VOID)
{
struct CxLib *cx = CxBase;

    cx->cx_IHandlerPort.mp_Node.ln_Type = NT_MSGPORT;
    cx->cx_IHandlerPort.mp_Flags        = PA_SIGNAL;
    cx->cx_IHandlerPort.mp_SigBit       = SIGB_SINGLE;
    cx->cx_IHandlerPort.mp_SigTask      = FindTask(NULL);
    NewList(&cx->cx_IHandlerPort.mp_MsgList);

    cx->cx_IHandlerReq.io_Message.mn_Node.ln_Type = NT_REPLYMSG;
    cx->cx_IHandlerReq.io_Message.mn_Length       = sizeof(struct IOStdReq);
    cx->cx_IHandlerReq.io_Message.mn_ReplyPort    = &cx->cx_IHandlerPort;

    if (OpenDevice("input.device",0,&cx->cx_IHandlerReq,0) == 0)
    {
        cx->cx_IHandlerNode.is_Code         = (VOIDFUNC)IHandlerStub;
        cx->cx_IHandlerNode.is_Data         = cx;
        cx->cx_IHandlerNode.is_Node.ln_Pri  = 53;
        cx->cx_IHandlerNode.is_Node.ln_Name = cx->cx_Lib.lib_Node.ln_Name;
        cx->cx_IHandlerReq.io_Command       = IND_ADDHANDLER;
        cx->cx_IHandlerReq.io_Data          = (APTR)&cx->cx_IHandlerNode;

        DoIO(&cx->cx_IHandlerReq);
    }
}


/*****************************************************************************/


VOID RemoveIHandler(VOID)
{
struct CxLib *cx = CxBase;

    if (cx->cx_IHandlerReq.io_Device)
    {
        cx->cx_IHandlerPort.mp_SigTask = FindTask(NULL);
        cx->cx_IHandlerReq.io_Command  = IND_REMHANDLER;
        DoIO(&cx->cx_IHandlerReq);
        CloseDevice(&cx->cx_IHandlerReq);
        cx->cx_IHandlerReq.io_Device = NULL;
    }
}


/*****************************************************************************/


VOID LockCX(VOID)
{
struct CxLib *cx = CxBase;

    ObtainSemaphore(&cx->cx_LibLock);
}


/*****************************************************************************/


VOID UnlockCX(VOID)
{
struct CxLib *cx = CxBase;

    ReleaseSemaphore(&cx->cx_LibLock);
}


/*****************************************************************************/


VOID NewList(struct List *list)
{
    list->lh_Head     = (struct Node *)&list->lh_Tail;
    list->lh_Tail     = NULL;
    list->lh_TailPred = (struct Node *)list;
}
@


38.6
log
@*** empty log message ***
@
text
@a13 1
#include "cxpools.h"
d28 3
a30 3
    CxBase->cx_EMsgReply.mp_Node.ln_Type = NT_MSGPORT;
    CxBase->cx_EMsgReply.mp_Flags        = PA_IGNORE;
    NewList(&CxBase->cx_EMsgReply.mp_MsgList);
a31 2
    InitPools();

d49 2
a50 2
    while (msg = GetMsg(&cx->cx_EMsgReply))
        FreeEMsg(msg);
d70 3
d89 1
a89 1
        cx->cx_IHandlerNode.is_Code         = (VOID(*))IHandlerStub;
@


38.5
log
@Clean up and speed up
@
text
@d73 1
a73 1
BOOL AttachIHandler(VOID)
d87 8
a94 2
    if (OpenDevice("input.device",0,&cx->cx_IHandlerReq,0))
        return(FALSE);
d96 2
a97 10
    cx->cx_IHandlerNode.is_Code         = (VOID(*))IHandlerStub;
    cx->cx_IHandlerNode.is_Data         = cx;
    cx->cx_IHandlerNode.is_Node.ln_Pri  = 53;
    cx->cx_IHandlerNode.is_Node.ln_Name = cx->cx_Lib.lib_Node.ln_Name;
    cx->cx_IHandlerReq.io_Command       = IND_ADDHANDLER;
    cx->cx_IHandlerReq.io_Data          = (APTR)&cx->cx_IHandlerNode;

    DoIO(&cx->cx_IHandlerReq);

    return(TRUE);
@


38.4
log
@*** empty log message ***
@
text
@d26 2
a27 2
    NewList(&CxBase->cx_Control.cxc_Messages);
    NewList(&CxBase->cx_Control.cxc_Objects);
a33 1
    CxBase->cx_Control.cxc_Zero = CreateCxObj(CX_ZERO,0,0);
d35 2
a36 2
    if (!CxBase->cx_Control.cxc_Zero)
        return(FALSE);
d38 1
a38 1
    return(TRUE);
d47 4
a50 2
struct CxLib   *cx = CxBase;
struct Message *msg;
d55 2
a56 3
    DeleteCxObj(cx->cx_Control.cxc_Zero);

    if (CxBase->cx_PreviousEvent)
d58 3
a60 2
        FreePoolMem(CxBase->cx_PreviousEvent);
        CxBase->cx_PreviousEvent = NULL;
d62 1
d64 2
a112 1

d116 1
@


38.3
log
@No longer creates pool as the new pool manager is used
@
text
@d57 1
d59 2
@


38.2
log
@No longer attaches and removes the input handler. This is now done at object
  creation/deletion time
@
text
@a1 1

d33 1
a33 5
    CxBase->cx_CxMsgPool        = CreatePool(CxMsgLength(CXM_IEVENT),CXMP_STATIC);
    CxBase->cx_IEPool           = CreatePool(IEP_SIZE,IEP_STATIC);
    CxBase->cx_EMsgPool         = CreatePool(EMSGP_SIZE,EMSGP_STATIC);
    CxBase->cx_CxObjPool        = CreatePool(CXOP_SIZE,CXOP_STATIC);
    CxBase->cx_StackPool        = CreatePool(40,5);
d36 1
a36 1
    if ((!CxBase->cx_CxMsgPool) || (!CxBase->cx_IEPool) || (!CxBase->cx_EMsgPool) || (!CxBase->cx_CxObjPool) || (!CxBase->cx_StackPool) || (!CxBase->cx_Control.cxc_Zero))
a51 1
    {
a52 1
    }
d56 4
a59 6
    EmptyPool(cx->cx_IEPool);
    DisposePool(cx->cx_IEPool);
    DisposePool(cx->cx_CxMsgPool);
    DisposePool(cx->cx_EMsgPool);
    DisposePool(cx->cx_CxObjPool);
    DisposePool(cx->cx_StackPool);
@


38.1
log
@Initial V38 RCS checkin
@
text
@a25 1
    InitSemaphore(&cx->cx_Static);
d44 1
a44 1
    return(AttachIHandler());
a54 2

    RemoveIHandler();
@
