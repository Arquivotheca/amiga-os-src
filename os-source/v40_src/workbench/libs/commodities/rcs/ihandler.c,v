head     38.11;
branch   ;
access   ;
symbols  ;
locks    vertex:38.11; strict;
comment  @ * @;


38.11
date     93.02.11.12.40.13;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     92.11.24.15.18.05;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     92.11.23.11.01.37;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     92.11.20.09.32.59;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.10.16.18.03.52;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.27.17.07.53;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.10.24.10.22.13;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.21.13.07.00;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.21.11.06.10;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.08.12.15.53;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.29.01;  author vertex;  state Exp;
branches ;
next     ;


desc
@Commodities input handler
@


38.11
log
@Rename Dispatch() to CxDispatch() to avoid conflict with Exec function
@
text
@
#include <clib/exec_protos.h>

#include <pragmas/exec_pragmas.h>

#include "commoditiesbase.h"
#include "ihandler.h"
#include "messages.h"
#include "dispatch.h"
#include "pool.h"
#include "serialout.h"


/*****************************************************************************/


/*
#define ICOLOR(c) (*((SHORT *)0xdff180)=(c))
#include <clib/graphics_protos.h>
#include <pragmas/graphics_pragmas.h>
*/


/*****************************************************************************/


#if 0
VOID DumpIE(struct InputEvent *ie)
{
    if (ie->ie_Class != IECLASS_TIMER)
    {
        kprintf("Class       : ");
        switch (ie->ie_Class)
        {
            case IECLASS_NULL           : kprintf("IECLASS_NULL\n");
                                          break;

            case IECLASS_RAWKEY         : kprintf("IECLASS_RAWKEY\n");
                                          break;

            case IECLASS_RAWMOUSE       : kprintf("IECLASS_RAWMOUSE\n");        break;
            case IECLASS_EVENT          : kprintf("IECLASS_EVENT\n");           break;
            case IECLASS_POINTERPOS     : kprintf("IECLASS_POINTERPOS\n");      break;
            case IECLASS_TIMER          : kprintf("IECLASS_TIMER\n");           break;
            case IECLASS_GADGETDOWN     : kprintf("IECLASS_GADGETDOWN\n");      break;
            case IECLASS_GADGETUP       : kprintf("IECLASS_GADGETUP\n");        break;
            case IECLASS_REQUESTER      : kprintf("IECLASS_REQUESTER\n");       break;
            case IECLASS_MENULIST       : kprintf("IECLASS_MENULIST\n");        break;
            case IECLASS_CLOSEWINDOW    : kprintf("IECLASS_CLOSEWINDOW\n");     break;
            case IECLASS_SIZEWINDOW     : kprintf("IECLASS_SIZEWINDOW\n");      break;
            case IECLASS_REFRESHWINDOW  : kprintf("IECLASS_REFRESHWINDOW\n");   break;
            case IECLASS_NEWPREFS       : kprintf("IECLASS_NEWPREFS\n");        break;
            case IECLASS_DISKREMOVED    : kprintf("IECLASS_DISKREMOVED\n");     break;
            case IECLASS_DISKINSERTED   : kprintf("IECLASS_DISKINSERTED\n");    break;
            case IECLASS_ACTIVEWINDOW   : kprintf("IECLASS_ACTIVEWINDOW\n");    break;
            case IECLASS_INACTIVEWINDOW : kprintf("IECLASS_INACTIVEWINDOW\n");  break;
            case IECLASS_NEWPOINTERPOS  : kprintf("IECLASS_NEWPOINTERPOS\n");   break;
            case IECLASS_MENUHELP       : kprintf("IECLASS_MENUHELP\n");        break;
            case IECLASS_CHANGEWINDOW   : kprintf("IECLASS_CHANGEWINDOW\n");    break;
            default                     : kprintf("Unknown class\n");
        }
        kprintf("SubClass    : %lx\nCode        : %lx\nQualifier   : %lx\nEventAddress: %lx\n\n------\n\n",ie->ie_SubClass,ie->ie_Code,ie->ie_Qualifier,ie->ie_EventAddress);
    }
}
#endif


#if 0
VOID DumpObjList(struct MinList *list, UWORD indent)
{
struct CxObj *co;
UWORD         i;

    co = (struct CxObj *)list->mlh_Head;
    while (co->co_Succ)
    {
        for (i = 0; i < indent; i++) kprintf(" ");
        kprintf("Name : %s\n",co->co_Name);

        for (i = 0; i < indent; i++) kprintf(" ");
        switch (CO_TYPE(co))
        {
            case CX_INVALID     : kprintf("Type : CX_INVALID     \n"); break;
            case CX_FILTER      : kprintf("Type : CX_FILTER      \n"); break;
            case CX_TYPEFILTER  : kprintf("Type : CX_TYPEFILTER  \n"); break;
            case CX_SEND        : kprintf("Type : CX_SEND        \n"); break;
            case CX_SIGNAL      : kprintf("Type : CX_SIGNAL      \n"); break;
            case CX_TRANSLATE   : kprintf("Type : CX_TRANSLATE   \n"); break;
            case CX_BROKER      : kprintf("Type : CX_BROKER      \n"); break;
            case CX_DEBUG       : kprintf("Type : CX_DEBUG       \n"); break;
            case CX_CUSTOM      : kprintf("Type : CX_CUSTOM      \n"); break;
            case CX_ZERO        : kprintf("Type : CX_ZERO        \n"); break;
            default             : kprintf("Type : Unknown (%ld)\n", CO_TYPE(co)); break;
        }

        for (i = 0; i < indent; i++) kprintf(" ");
        kprintf("Flags: ");
        if (COF_INLIST & CO_FLAGS(co))
            kprintf("COF_INLIST ");
        if (COF_ENABLE & CO_FLAGS(co))
            kprintf("COF_ENABLE ");
        if (COF_SHOW_HIDE & CO_FLAGS(co))
            kprintf("COF_SHOW_HIDE ");

        if (CO_FLAGS(co) == 0)
            kprintf("None");

        kprintf("\n");

        for (i = 0; i < indent; i++) kprintf(" ");
        kprintf("----------\n");

        DumpObjList(CO_LIST(co),indent+4);

        co = (struct CxObj *)co->co_Succ;
    }
}


VOID DumpNetwork(VOID)
{
    LockCX();
    DumpObjList(&CxBase->cx_Objects,0);
    kprintf("\n**************************************************************\n\n");
    UnlockCX();
}
#endif


/*****************************************************************************/


static VOID Cx_Send(struct CxMsg *cxm, struct CxObj *sender)
{
   /* copies cxm into an exec message from pool and sends it.
    * original CxMsg is not swallowed, nor re-routed
    */

struct CxMsg      *msg;
struct MsgPort    *port;
struct InputEvent *ie;

    if (port = SENDER_PORT(sender))
    {
        ie = (struct InputEvent *)CXMSGDATA(cxm);
        if (ie->ie_SubClass)
        {
            if ((ie->ie_Class != IECLASS_NEWPOINTERPOS) || (ie->ie_SubClass > IESUBCLASS_NEWTABLET))
                ie->ie_Class = IECLASS_NULL;
        }

        if (msg = (struct CxMsg *)CreateCxMsg(CXM_IEVENT,ie))
        {
            CopyMem(cxm,msg,sizeof(struct CxMsg));

            /* fix up Data pointer */
            CXMSGDATA((struct CxMsg *) msg) = (char *) &((struct CxMsg *) msg)[1];

            /* copy user id into message */
            CXMSGID(msg) = SENDER_ID(sender);

            PutMsg(port,&msg->cxm_Msg);
        }
    }
}


/*****************************************************************************/


static VOID Cx_Debug(struct CxMsg *cxm, struct CxObj *db)
{
struct InputEvent *ie;

    kprintf("\n----\nDEBUG NODE: %lx, ID: %lx\n", db, (LONG) DEBUGD(db));
    kprintf("\tCxMsg: %lx, type: %x, data %lx destination %lx\n",cxm, CXMSGTYPE(cxm), CXMSGDATA(cxm), CXMSGDESTINATION(cxm));

    if (CXMSGTYPE(cxm) == CXM_IEVENT)
    {
	ie = (struct InputEvent *)CXMSGDATA(cxm);
        kprintf("dump IE: %lx\n\tClass %lx\n\tCode %lx\n\tQualifier %lx\n\tEventAddress %lx\n",ie,ie->ie_Class,ie->ie_Code,ie->ie_Qualifier,ie->ie_EventAddress);
    }
}


/*****************************************************************************/


static VOID Cx_Zero(struct CxMsg *cxm, struct CxObj *co)
{
struct InputEvent *ie;

    if (ie = AllocPoolMem(IESize((struct InputEvent *)CXMSGDATA(cxm))))
    {
        CopyIE((struct InputEvent *)CXMSGDATA(cxm),ie);
        CxBase->cx_EndChain->ie_NextEvent = ie;
        CxBase->cx_EndChain               = ie;
    }

    DisposeCxMsg(cxm);
}


/*****************************************************************************/


static VOID Cx_Translate(struct CxMsg *original, struct CxObj *xl)
{
   /* regardless of CxMsgType, replaces message with a chain of
    * clones with type CXM_IEVENT, one for each input event in chain
    * pointed to by xl.  Special case of NULL xl events
    * has effect of swallowing all CXM_IEVENT messages
    */

struct InputEvent *ie;
struct CxMsg      *cxm;
UWORD              i;
struct List       *list;

    ie   = XLATE_IE(xl);
    list = (struct List *)CXMSGLIST;

    /* convert all input events to a series of CxMsg */
    while (ie)
    {
        if (cxm = CreateCxMsg(CXM_IEVENT,ie))
        {
            /* stamp all translated events with the time of the original event */
            ((struct InputEvent *)CXMSGDATA(cxm))->ie_TimeStamp = ((struct InputEvent *)CXMSGDATA(original))->ie_TimeStamp;

            i = cxm->cxm_StackIndex;
            while (i > 0)
            {
                i--;
                cxm->cxm_RoutingStack[i] = original->cxm_RoutingStack[i];
            }
            cxm->cxm_StackIndex = original->cxm_StackIndex;

            ROUTECXMSG(cxm,CXMSGDESTINATION(original));
            CXMSGID(cxm) = CXMSGID(original);
            AddHead(list,cxm);
        }

        ie = ie->ie_NextEvent;
    }
    DisposeCxMsg(original);
}


/*****************************************************************************/


struct InputEvent * ASM CxHandler(REG(a0) struct InputEvent *ie)
{
struct CxMsg      *cxm;
struct CxMsg      *succxm;
struct CxObj      *firstBroker;
struct CxLib      *cx = CxBase;
struct Message    *msg;
struct CxObj      *target;
struct InputEvent *ptr;
struct InputEvent *next;

    if (ie && !IsListEmpty((struct List *)CXOBJLIST))
    {
/*
        while (VBeamPos() < 150);
        ICOLOR(0xfff);
*/

        LockCX();

        ptr = CxBase->cx_ReturnChain;
        while (ptr)
        {
            next = ptr->ie_NextEvent;
            FreePoolMem(ptr);
            ptr = next;
        }
        CxBase->cx_ReturnChain = NULL;
        CxBase->cx_EndChain    = (struct InputEvent *)&CxBase->cx_ReturnChain;

        while (msg = GetMsg(&cx->cx_EventReply))
            FreeCxMsg(msg);

        firstBroker = (struct CxObj *) CXOBJLIST->mlh_Head;
        for (cxm = (struct CxMsg *) CXMSGLIST->mlh_Head; succxm = (struct CxMsg *) cxm->cxm_Succ; cxm = succxm)
            ROUTECXMSG(cxm,firstBroker);

        AddIEvents(ie);

	/* send all messages through the object network */
        while (TRUE)
        {
            cxm = (struct CxMsg *) CXMSGLIST->mlh_Head;
            if (!cxm->cxm_Succ)
                break;

            target = CXMSGDESTINATION(cxm);
            if (cxm->cxm_Echo > CXM_TOOMANYECHOS)
            {
                target = NULL;
            }

            /* If target is a tail node, pop stack to find
             * next target (successor of popped object)
             */
            while (target && !target->co_Succ)
            {
                if (cxm->cxm_StackIndex)
                {
                    if (target = cxm->cxm_RoutingStack[--cxm->cxm_StackIndex])
                        target = (struct CxObj *) target->co_Succ;
                }
                else
                {
                    target = NULL;
                }
            }

            if (!target)
            {
                Cx_Zero(cxm,CxBase->cx_Zero);
            }
            else
            {
                ROUTECXMSG(cxm, (struct CxObj *) target->co_Succ);

                if (CO_FLAGS(target) & COF_ENABLE)
                {
                    cxm->cxm_Echo++;
                    switch(CO_TYPE(target))
                    {
                        case CX_FILTER    : if ((CXMSGTYPE(cxm) == CXM_IEVENT) && MatchIX((struct InputEvent *)CXMSGDATA(cxm),(IX *)FILTER_IX(target)))
                                                DivertCxMsg(cxm,target,target);
                                            break;

                        case CX_TYPEFILTER: if (TFD(target) & CXMSGTYPE(cxm))
                                                DivertCxMsg(cxm,target,target);
                                            break;

                        case CX_SEND      : Cx_Send(cxm,target);
                                            break;

                        case CX_SIGNAL    : Signal(SIGNAL_TASK(target), 1L << SIGNAL_SIGNAL(target));
                                            break;

                        case CX_TRANSLATE : Cx_Translate(cxm,target);
                                            break;

                        case CX_BROKER    : DivertCxMsg(cxm,target,target);
                                            break;

                        case CX_DEBUG     : Cx_Debug(cxm,target);
                                            break;

                        case CX_CUSTOM    : CXMSGID(cxm) = CUSTOM_ID(target);
                                            CxDispatch((LONG)CUSTOM_ACTION(target),cxm,target);
                                            break;

                        case CX_ZERO      : Cx_Zero(cxm,target);
                                            break;

                        case CX_INVALID   :
                        default           : break;
                    }
                }
            }
        }

        UnlockCX();

/*
        ICOLOR(0x001);
*/

        return(CxBase->cx_ReturnChain);
    }

    return(ie);
}
@


38.10
log
@Sender objects now convert events with bogus sub-classes into events of type 
  IECLASS_NULL
@
text
@d358 1
a358 1
                                            Dispatch((LONG)CUSTOM_ACTION(target),cxm,target);
@


38.9
log
@No longer nulls out ie_NextEvent in sender objects, this is taken care of
  by CopyIE(). Er, make that in the zero object...

The sender object type no longer touches the reply port of the commodity
  messages. This is done by CreateCxMsg()
@
text
@d27 106
d139 3
a141 2
struct CxMsg   *msg;
struct MsgPort *port;
d145 8
a152 1
        if (msg = (struct CxMsg *)CreateCxMsg(CXM_IEVENT,(struct InputEvent *)CXMSGDATA(cxm)))
d160 1
a160 1
            ((struct CxMsg *) msg)->cxm_ID = SENDER_ID(sender);
@


38.8
log
@Events generated by a translator object are now time stamped with the same time as
  the event that triggered the translator
@
text
@a34 1
struct MsgPort *reply_save;
a39 2
            /* copy data (overwrites message node) */
            reply_save = msg->cxm_Msg.mn_ReplyPort;
a44 3
            /* fix up reply port */
            msg->cxm_Msg.mn_ReplyPort = reply_save;

a81 1
        ie->ie_NextEvent = NULL;
d97 1
a97 1
    * pointed to by CxObjLocal.  Special case of NULL CxObjLocal
@


38.7
log
@Changes for SAS/C 6.0
Calls functions to copy input events now in order to account for extended
  input event types
@
text
@d121 3
@


38.6
log
@AttachIHandler() no longer returns a value
@
text
@d11 1
a11 1
#include "cxpools.h"
d27 1
a27 1
VOID Cx_Send(struct CxMsg *cxm, struct CxObj *sender)
d33 1
a33 1
struct Message *msg;
d39 1
a39 1
        if (msg = GetEMsg(CXMSG_IEVENT_SIZE))
d42 2
a43 2
            reply_save = msg->mn_ReplyPort;
            CopyMem(cxm,msg,CXMSG_IEVENT_SIZE);
d49 1
a49 1
            msg->mn_ReplyPort = reply_save;
d51 1
a51 1
            /* copy user data into message */
d54 1
a54 1
            PutMsg(port,msg);
d63 1
a63 1
VOID Cx_Debug(struct CxMsg *cxm, struct CxObj *db)
d73 1
a73 5
        kprintf("dump IE: %lx\n", ie);
        kprintf("\tClass %lx\n",ie->ie_Class);
        kprintf("\tCode %lx\n",ie->ie_Code);
        kprintf("\tQualifier %lx\n",ie->ie_Qualifier);
        kprintf("\tEventAddress %lx\n", ie->ie_EventAddress);
d81 1
a81 1
VOID Cx_Zero(struct CxMsg *cxm, struct CxObj *co)
d85 1
a85 1
    if (ie = GetIE())
d87 1
a87 1
        *ie = *((struct InputEvent *)CXMSGDATA(cxm));
d100 1
a100 1
VOID Cx_Translate(struct CxMsg *original, struct CxObj *xl)
d119 1
a119 1
        if (cxm = CreateCxMsg())
a128 1
            *((struct InputEvent *)CXMSGDATA(cxm)) = *ie;
d173 2
a174 2
        while (msg = GetMsg(&cx->cx_EMsgReply))
            FreeEMsg(msg);
@


38.5
log
@Clean up and speed up
@
text
@d159 1
a159 1
    if (ie && cx->cx_ObjectCount > 1)
@


38.4
log
@*** empty log message ***
@
text
@a8 1
#include "msgstack.h"
a35 1
LONG            length;
d39 5
a43 25
        /* get exec message from pool */
        length = CxMsgLength(CXMSGTYPE(cxm));

        if (!(msg = CreateEMsg(length)))
            return;

        /* copy data (overwrites message node)   */
        reply_save = msg->mn_ReplyPort;
        CopyMem(cxm,msg,length);

        /* fix up Data pointer */
        CXMSGDATA((struct CxMsg *) msg) = (char *) &((struct CxMsg *) msg)[1];

        /* fix up reply port */
        msg->mn_ReplyPort = reply_save;

        /* copy user data into message */
        ((struct CxMsg *) msg)->cxm_ID = SENDER_ID(sender);

        PutMsg(port,msg);
    }
}


/*****************************************************************************/
d45 5
a49 11

VOID Cx_Translate(struct CxMsg *cxm_original, struct CxObj *xl)
{
   /* regardless of CxMsgType, replaces message with a chain of
    * clones with type CXM_IEVENT, one for each input event in chain
    * pointed to by CxObjLocal.  Special case of NULL CxObjLocal
    * has effect of swallowing all CXM_IEVENT messages
    */

struct InputEvent *ie;
struct CxMsg      *cxm;
d51 2
a52 1
    ie = XLATE_IE(xl);
d54 1
a54 10
    /* convert all input events to CxMessages   */
    while (ie)
    {
        cxm = CreateCxMsg((LONG) CXM_IEVENT);
        if (cxm)
        {
            CopyCxmStack(cxm_original, cxm);
            *((struct InputEvent *)CXMSGDATA(cxm)) = *ie;
            ROUTECXMSG(cxm,CXMSGDESTINATION(cxm));  /* ??? This sets destination = destination ?? */
            INSERTCXMSG(CXMSGLIST,cxm);
a55 2

        ie = ie->ie_NextEvent;
a56 1
    DisposeCxMsg(cxm_original);
d89 33
a121 1
    if (CXMSGTYPE(cxm) == CXM_IEVENT)
d123 1
a123 1
        if (ie = GetIE())
d125 12
a136 5
            CxBase->cx_PreviousEvent = ie;
            *ie = *((struct InputEvent *)CXMSGDATA(cxm));
            ie->ie_NextEvent = NULL;
            CxBase->cx_EndChain->ie_NextEvent = ie;
            CxBase->cx_EndChain               = ie;
d138 2
d141 1
a141 2

    DisposeCxMsg(cxm);
a154 1
struct InputEvent *returnChain;
d156 2
d168 9
a176 2
        returnChain         = NULL;
        CxBase->cx_EndChain = (struct InputEvent *)&returnChain;
d181 2
a182 8
        if (CxBase->cx_PreviousEvent)
        {
            FreePoolMem(CxBase->cx_PreviousEvent);
            CxBase->cx_PreviousEvent = NULL;
        }

        firstBroker = (struct CxObj *) CXOBJLIST->lh_Head;
        for (cxm = (struct CxMsg *) CXMSGLIST->lh_Head; succxm = (struct CxMsg *) cxm->cxm_Succ; cxm = succxm)
d190 1
a190 1
            cxm = (struct CxMsg *) CXMSGLIST->lh_Head;
d196 1
d198 1
d205 9
a213 2
                if (target = (struct CxObj *) CxmPop(cxm))
                    target = (struct CxObj *) target->co_Succ;
d217 3
a219 1
                target = CxBase->cx_Control.cxc_Zero;
d221 1
d224 1
a224 4
            if (CO_FLAGS(target) & COF_ENABLE)
            {
                cxm->cxm_Echo++;
                switch(CO_TYPE(target))
d226 32
a257 29
                    case CX_FILTER    : if ((CXMSGTYPE(cxm) == CXM_IEVENT) && MatchIX((struct InputEvent *)CXMSGDATA(cxm),(IX *)FILTER_IX(target)))
                                            DivertCxMsg(cxm,target,target);
                                        break;

                    case CX_TYPEFILTER: if (TFD(target) & CXMSGTYPE(cxm))
                                            DivertCxMsg(cxm,target,target);
                                        break;

                    case CX_SEND      : Cx_Send(cxm,target);
                                        break;

                    case CX_SIGNAL    : Signal(SIGNAL_TASK(target), 1L << SIGNAL_SIGNAL(target));
                                        break;

                    case CX_TRANSLATE : Cx_Translate(cxm,target);
                                        break;

                    case CX_BROKER    : DivertCxMsg(cxm,target,target);
                                        break;

                    case CX_DEBUG     : Cx_Debug(cxm,target);
                                        break;

                    case CX_CUSTOM    : CXMSGID(cxm) = CUSTOM_ID(target);
                                        Dispatch((LONG)CUSTOM_ACTION(target),cxm,target);
                                        break;

                    case CX_ZERO      : Cx_Zero(cxm,target);
                                        break;
d259 3
a261 2
                    case CX_INVALID   :
                    default           : break;
d272 1
a272 1
        return(returnChain);
@


38.3
log
@Integrated control.c and actions.c
@
text
@d173 1
d175 2
@


38.2
log
@*** empty log message ***
@
text
@a1 1

d8 3
a12 1
#include "control.h"
d25 122
d155 1
a165 1
        EmptyPool(cx->cx_IEPool);
d172 3
d177 6
d184 61
a244 1
            RouteCxMsg(cxm,firstBroker);
a245 3

        AddIEvents(ie);
        while (LaunchCxMsg()) {}
@


38.1
log
@Initial V38 RCS checkin
@
text
@d33 1
a33 1
    if (ie && cx->cx_Lib.lib_OpenCnt)
@
