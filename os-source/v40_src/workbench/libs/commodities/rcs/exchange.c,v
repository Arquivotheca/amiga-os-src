head     38.5;
branch   ;
access   ;
symbols  ;
locks    vertex:38.5; strict;
comment  @ * @;


38.5
date     92.10.16.18.07.44;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.27.17.09.58;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.24.10.24.05;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.09.24;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.32.50;  author vertex;  state Exp;
branches ;
next     ;


desc
@Exchange program support
@


38.5
log
@Changes for SAS/C 6.0
@
text
@
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>

#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include "commoditiesbase.h"
#include "exchange.h"


/*****************************************************************************/


struct cxBrokerCopy
{
    struct Node cxbc_Node;
    BROKERD     cxbc_BrokerD;
    LONG        cxbc_Flags;
};


/*****************************************************************************/


LONG ASM CopyBrokerListLVO(REG(a0) struct List *blist)
{
struct Node         *node;
struct cxBrokerCopy *bcopy;
BROKERD             *bdata;
LONG                 count = 0;

    FreeBrokerList(blist);

    LockCX();

    /* walk broker list */
    node = (struct Node *)CXOBJLIST->mlh_Head;
    while (node->ln_Succ)
    {
        if (!(bcopy = AllocMem(sizeof(struct cxBrokerCopy),MEMF_ANY)))
           break;

        bdata                    = (BROKERD *) ((struct CxObj *) node)->co_Data;
        bcopy->cxbc_BrokerD      = *bdata;
        bcopy->cxbc_Node.ln_Name = bcopy->cxbc_BrokerD.cbd_Name;
        bcopy->cxbc_Flags        = ((struct CxObj *)node)->co_Flags;

        AddTail(blist,(struct Node *)bcopy);
        count++;
        node = node->ln_Succ;
    }

    UnlockCX();

    return (count);
}


/*****************************************************************************/


VOID ASM FreeBrokerListLVO(REG(a0) struct List *list)
{
struct Node *node;

    while (node = RemHead(list))
        FreeMem(node,sizeof(struct cxBrokerCopy));
}
@


38.4
log
@*** empty log message ***
@
text
@d43 1
a43 1
        if (!(bcopy = AllocMem(sizeof(struct cxBrokerCopy),MEMF_PUBLIC)))
@


38.3
log
@Clean up and speed up
@
text
@a16 7
#pragma libcall CxBase FreeBrokerList c0 801
VOID FreeBrokerList(struct List *list);


/*****************************************************************************/


d33 1
a33 1
int                  count = 0;
@


38.2
log
@*** empty log message ***
@
text
@d47 1
a47 1
    node = CXOBJLIST->lh_Head;
@


38.1
log
@Initial V38 RCS checkin
@
text
@a1 1

@
