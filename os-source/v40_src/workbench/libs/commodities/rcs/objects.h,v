head     38.3;
branch   ;
access   ;
symbols  ;
locks    vertex:38.3; strict;
comment  @ * @;


38.3
date     91.10.24.10.21.41;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.05.37;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.28.04;  author vertex;  state Exp;
branches ;
next     ;


desc
@Commodity object management
@


38.3
log
@Clean up and speed up
@
text
@#ifndef OBJECTS_H
#define OBJECTS_H


/*****************************************************************************/


#include <exec/types.h>
#include "commoditiesbase.h"


/*****************************************************************************/


struct CxObj * ASM CreateCxObjLVO(REG(d0) ULONG type, REG(a0) LONG arg1, REG(a1) LONG arg2);
VOID ASM DeleteCxObjLVO(REG(a0) struct CxObj *co);
VOID ASM DeleteCxObjAllLVO(REG(a0) struct CxObj *co);
LONG ASM ActivateCxObjLVO(REG(a0) struct CxObj *co, REG(d0) LONG true);
ULONG ASM CxObjTypeLVO(REG(a0) struct CxObj *co);
LONG ASM CxObjErrorLVO(REG(a0) struct CxObj *co);
VOID ASM ClearCxObjErrorLVO(REG(a0) struct CxObj *co);
LONG ASM SetCxObjPriLVO(REG(a0) struct CxObj *co, REG(d0) LONG pri);
VOID ASM SetTranslateLVO(REG(a0) struct CxObj *co, REG(a1) struct InputXpression *ie);
VOID ASM SetFilterIXLVO(REG(a0) struct CxObj *co, REG(a1) struct InputXpression *ix);
VOID ASM SetFilterLVO(REG(a0) struct CxObj *co, REG(a1) STRPTR descr);
VOID ASM SetCxObjAttrsALVO(REG(a0) struct CxObj *co, REG(a2) struct TagItem *attrs);


/*****************************************************************************/


#endif /* OBJECTS_H */
@


38.2
log
@Uses macros whenever possible
AttachCxObj() will no longer crash if there is not enough memory
EnqueueCxObj() and InsertCxObj() now delete the object if the list is NULL
All calls only do BrokerCommand() when the list actually changes
@
text
@d23 4
@


38.1
log
@Initial V38 RCS checkin
@
text
@d22 1
a22 1
VOID ASM SetCxObjPriLVO(REG(a0) struct CxObj *co, REG(d0) LONG pri);
@
