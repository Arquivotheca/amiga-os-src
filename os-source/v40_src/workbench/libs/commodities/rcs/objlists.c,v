head     38.5;
branch   ;
access   ;
symbols  ;
locks    vertex:38.5; strict;
comment  @ * @;


38.5
date     92.10.16.18.02.57;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.27.17.05.49;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.24.10.21.29;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.34.30;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.27.39;  author vertex;  state Exp;
branches ;
next     ;


desc
@Commodity object list management
@


38.5
log
@Changes for SAS/C 6.0
@
text
@
#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>

#include "commoditiesbase.h"
#include "objlists.h"
#include "broker.h"


/*****************************************************************************/


VOID ASM AttachCxObjLVO(REG(a0) struct CxObj *headObj,
                        REG(a1) struct CxObj *co)
{
    if (headObj)
    {
        if (co)
        {
            LockCX();

            AddTail((struct List *)CO_LIST(headObj),(struct Node *)co);
            CO_FLAGS(co) |= COF_INLIST;

            UnlockCX();
        }
        else
        {
            CO_ERROR(headObj) |= COERR_NULLATTACH;
        }
    }
    else
    {
        DeleteCxObjAll(co);
    }
}


/*****************************************************************************/


VOID ASM EnqueueCxObjLVO(REG(a0) struct CxObj *headObj,
                         REG(a1) struct CxObj *co)
{
    if (headObj)
    {
        if (co)
        {
            LockCX();

            Enqueue((struct List *)CO_LIST(headObj),(struct Node *)co);
            CO_FLAGS(co) |= COF_INLIST;

            UnlockCX();
        }
        else
        {
            CO_ERROR(headObj) |= COERR_NULLATTACH;
        }
    }
    else
    {
        DeleteCxObjAll(co);
    }
}


/*****************************************************************************/


VOID ASM InsertCxObjLVO(REG(a0) struct CxObj *headObj,
                        REG(a1) struct CxObj *co,
                        REG(a2) struct CxObj *pred)
{
    if (headObj)
    {
        if (co)
        {
            LockCX();

            Insert((struct List *)CO_LIST(headObj),(struct Node *)co,(struct Node *)pred);
            CO_FLAGS(co) |= COF_INLIST;

            UnlockCX();
        }
        else
        {
            CO_ERROR(headObj) |= COERR_NULLATTACH;
        }
    }
    else
    {
        DeleteCxObjAll(co);
    }
}


/*****************************************************************************/


/* WARNING! CxWalk in objects.c simply calls RemHead() on the objects
 * in an object list instead of calling this routine, For speed
 * reasons.
 */

VOID ASM RemoveCxObjLVO(REG(a0) struct CxObj *co)
{
    if (co)
    {
        if (CO_FLAGS(co) & COF_INLIST)
        {
            LockCX();

            Remove((struct Node *)co);
            CO_FLAGS(co) &= ~COF_INLIST;

            UnlockCX();

            if (CO_TYPE(co) == CX_BROKER)
            {
                if (IsListEmpty((struct List *)CXOBJLIST))
                    RemoveIHandler();
                else
                    BrokerCommand(NULL,CXCMD_LIST_CHG);
            }
        }
    }
}
@


38.4
log
@No longer checks for brokers when attaching objects since a broker can't be
  added in that way
No longer keeps a count of the number of objects created
Now checks if the broker list is empty to determine when to remove the input
  handler.
@
text
@d22 1
a22 1
            AddTail(CO_LIST(headObj),(struct Node *)co);
d51 1
a51 1
            Enqueue(CO_LIST(headObj),(struct Node *)co);
d81 1
a81 1
            Insert(CO_LIST(headObj),(struct Node *)co,(struct Node *)pred);
@


38.3
log
@Clean up and speed up
@
text
@d7 1
a17 2
        LockCX();

d20 2
d25 1
a25 2
            if (CO_TYPE(co) == CX_BROKER)
                BrokerCommand(NULL,CXCMD_LIST_CHG);
a30 2

        UnlockCX();
a46 2
        LockCX();

d49 2
d54 1
a54 2
            if (CO_TYPE(co) == CX_BROKER)
                BrokerCommand(NULL,CXCMD_LIST_CHG);
a59 2

        UnlockCX();
a76 2
        LockCX();

d79 2
d84 1
a84 2
            if (CO_TYPE(co) == CX_BROKER)
                BrokerCommand(NULL,CXCMD_LIST_CHG);
a89 2

        UnlockCX();
a109 2
        LockCX();

d112 2
d117 2
d120 6
a125 1
                BrokerCommand(NULL,CXCMD_LIST_CHG);
a126 2

        UnlockCX();
@


38.2
log
@*** empty log message ***
@
text
@d25 1
a25 1
                BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
d57 1
a57 1
                BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
d90 1
a90 1
                BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
d119 1
d126 1
a126 1
                BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
d128 1
@


38.1
log
@Initial V38 RCS checkin
@
text
@a1 1

a20 1
            co->co_Flags |= COF_INLIST;
d22 4
a35 6
        /*
         * if headObj is NULL, delete the thing you attach,
         * complete subtree.
         * 'co' becomes invalid and dangerous until you check
         * CxObjError()
         */
a37 3

    if (CxObjType(co) == CX_BROKER)
        BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
a52 1
            co->co_Flags |= COF_INLIST;
d54 4
d65 4
a68 3

        if (CxObjType(co) == CX_BROKER)
            BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
a85 1
            co->co_Flags |= COF_INLIST;
d87 4
d98 4
a101 3

        if (CxObjType(co) == CX_BROKER)
            BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
d109 5
d119 1
a119 1
        if (co->co_Flags & COF_INLIST)
a120 1
            co->co_Flags &= ~COF_INLIST;
d122 4
a128 3

    if (CxObjType(co) == CX_BROKER)
        BrokerCommand(NULL,(LONG)CXCMD_LIST_CHG);
@
