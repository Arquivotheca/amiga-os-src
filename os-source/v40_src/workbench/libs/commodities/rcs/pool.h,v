head     38.3;
branch   ;
access   ;
symbols  ;
locks    vertex:38.3; strict;
comment  @ * @;


38.3
date     92.10.16.17.57.02;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.00.05;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.21.29;  author vertex;  state Exp;
branches ;
next     ;


desc
@General-purpose memory pool handling for commodities
@


38.3
log
@Removed InitPools() function
@
text
@#ifndef POOL_H
#define POOL_H


/*****************************************************************************/


#include <exec/types.h>


/****************************************************************************/


VOID FlushPools(VOID);
APTR AllocPoolMem(ULONG size);
VOID FreePoolMem(APTR memory);


/*****************************************************************************/


#endif /* POOL_H */
@


38.2
log
@Redid this sucker!
@
text
@a13 1
VOID InitPools(VOID);
@


38.1
log
@Initial V38 RCS checkin
@
text
@a8 3
#include <exec/lists.h>
#include <exec/nodes.h>
#include <exec/semaphores.h>
d11 1
a11 1
/*****************************************************************************/
d14 4
a17 20
struct PoolHead
{
    struct MinList         ph_FreeList;         /* free nodes         */
    struct MinList         ph_OutList;          /* allocated nodes    */
    struct SignalSemaphore ph_Lock;
    UWORD                  ph_DefaultMemSize;   /* size of most nodes */
};

#define Pool struct PoolHead *


/*****************************************************************************/


struct PoolHead *CreatePool(UWORD defSize, WORD staticParts);
VOID EmptyPool(struct PoolHead *ph);
APTR AllocPoolMem(struct PoolHead *ph, ULONG size);
VOID FreePoolMem(struct PoolHead *ph, APTR memory);

#define DisposePool(ph) FreeVec(ph)
@
