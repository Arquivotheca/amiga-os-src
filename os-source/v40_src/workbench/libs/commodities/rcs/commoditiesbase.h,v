head     38.8;
branch   ;
access   ;
symbols  ;
locks    vertex:38.8; strict;
comment  @ * @;


38.8
date     92.10.16.18.04.32;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.27.17.08.32;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.10.24.10.22.48;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.10.21.17.01.23;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.21.11.35.30;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.21.11.07.10;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.08.12.16.21;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.30.00;  author vertex;  state Exp;
branches ;
next     ;


desc
@Commodities library base definitions
@


38.8
log
@Changes for SAS/C 6.0
Added NUMPOOLS definition, and CxBase->cx_Pools field
@
text
@#ifndef COMMODITIES_BASE_H
#define COMMODITIES_BASE_H


/*****************************************************************************/


#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/semaphores.h>
#include <exec/io.h>
#include <exec/interrupts.h>
#include <devices/inputevent.h>
#include <dos.h>

#include "pool.h"
#include "commodities.h"


/*****************************************************************************/


typedef IX FILTERD;

typedef struct
{
    struct MsgPort *sender_port;
    LONG            sender_id;
} SENDD;

typedef struct
{
    struct Task *signal_task;
    UBYTE        signal_signal;
} SIGNALD;

/**** ZZZ: note a copy of this is in the controller program ***/
typedef struct CxBrokerData
{
    char            cbd_Name[CBD_NAMELEN];     /* (internal) node name      */
    char            cbd_Title[CBD_TITLELEN];   /* user-visible title        */
    char            cbd_Descr[CBD_DESCRLEN];   /* user-visible description  */
    struct Task    *cbd_Task;                  /* who created this broker?  */
    struct MsgPort *cbd_Port;		       /* where to send CXM_COMMAND */
    WORD            cbd_Channel;
} BROKERD;

typedef struct
{
   LONG (*custom_action)();
   LONG custom_id;
} CUSTOMD;

union CxObjData
{
    FILTERD d_fd;
    SENDD   d_sendd;
    SIGNALD d_sigd;
    BROKERD d_brd;
    CUSTOMD d_cusd;
};


/*****************************************************************************/


struct CxObj
{
    struct Node      co_Node;
    UBYTE            co_Flags;
    UBYTE            co_Error;
    struct MinList   co_List;
    union CxObjData *co_Data;
};

/* CxObj Flags */
#define COF_INLIST    1
#define COF_ENABLE    2
#define COF_SHOW_HIDE 4

/* access to object common data   */
#define co_Succ      co_Node.ln_Succ
#define co_Type      co_Node.ln_Type
#define co_Name      co_Node.ln_Name
#define co_Pri       co_Node.ln_Pri
#define CO_TYPE(co)  (((co)->co_Type))
#define CO_LIST(co)  (&((co)->co_List))
#define CO_ERROR(co) (((co)->co_Error))
#define CO_DATA(co)  (((co)->co_Data))
#define CO_FLAGS(co) (((co)->co_Flags))
#define CO_PRI(co)   (((co)->co_Pri))

/* access to type specific data   */
#define FILTER_IX(filter)       ((IX *) CO_DATA(filter))
#define TFD(tf)                 ((LONG) CO_DATA(tf))
#define SENDER_PORT(s)          (CO_DATA(s)->d_sendd.sender_port)
#define SENDER_ID(s)            (CO_DATA(s)->d_sendd.sender_id)
#define SIGNAL_TASK(s)          (CO_DATA(s)->d_sigd.signal_task)
#define SIGNAL_SIGNAL(s)        (CO_DATA(s)->d_sigd.signal_signal)
#define XLATE_IE(xl)            ((struct InputEvent *) CO_DATA(xl))
#define ASSIGN_XLATE_IE(xl,new) (CO_DATA(xl) = (union CxObjData *)(new))
#define BROKER_DATA(b)          ((struct CxBrokerData *)CO_DATA(b))
#define DEBUGD(db)              ((LONG) CO_DATA(db))
#define CUSTOM_ACTION(c)        (CO_DATA(c)->d_cusd.custom_action)
#define CUSTOM_ID(c)            (CO_DATA(c)->d_cusd.custom_id)


/*****************************************************************************/


/* If CxMsg is made bigger, also make the value of NUMPOOLS (defined below)
 * bigger
 */

#define STACKSLOTS 50


struct CxMsg
{
    struct Message  cxm_Msg;           /* system linkage, or sent to port */
    struct CxObj   *cxm_Destination;
    LONG            cxm_ID;            /* copied from sending object   */
    UWORD           cxm_Echo;          /* how many times has this message been sent?   */
    UBYTE           cxm_Type;
    UBYTE	    cxm_StackIndex;
    struct CxObj   *cxm_RoutingStack[STACKSLOTS];
};

#define cxm_Node              cxm_Msg.mn_Node
#define cxm_Succ              cxm_Node.ln_Succ
#define cxm_Length            cxm_Msg.mn_Length
#define CXMSGTYPE(cxm)        ((cxm)->cxm_Type)
#define CXMSGDATA(cxm)        ((cxm)->cxm_Node.ln_Name)
#define CXMSGDESTINATION(cxm) ((cxm)->cxm_Destination)
#define CXMSGID(cxm)          ((cxm)->cxm_ID)

#define ROUTECXMSG(cxm, co)   ((cxm)->cxm_Destination = (co))

#define CXM_TOOMANYECHOS      1024


/*****************************************************************************/


struct CxObj *CreateCxObj( unsigned long type, long arg1, long arg2 );
struct CxObj *CxBroker( struct NewBroker *nb, LONG *error );
LONG ActivateCxObj(struct CxObj *co, long true );
void DeleteCxObj(struct CxObj *co );
void DeleteCxObjAll(struct CxObj *co );
ULONG CxObjType(struct CxObj *co );
LONG CxObjError(struct CxObj *co );
void ClearCxObjError(struct CxObj *co );
void SetCxObjPri(struct CxObj *co, long pri );
void AttachCxObj(struct CxObj *headobj,struct CxObj *co );
void EnqueueCxObj(struct CxObj *headobj,struct CxObj *co );
void InsertCxObj(struct CxObj *headobj,struct CxObj *co,struct CxObj *pred );
void RemoveCxObj(struct CxObj *co );
void SetTranslate(struct CxObj *translator, struct InputEvent *events );
void SetFilter(struct CxObj *filter, STRPTR text );
void SetFilterIX(struct CxObj *filter, IX *ix );
LONG ParseIX(STRPTR description, IX *ix );
ULONG CxMsgTyp(struct CxMsg *cxm );
UBYTE *CxMsgData(struct CxMsg *cxm );
LONG CxMsgID(struct CxMsg *cxm );
void DivertCxMsg(struct CxMsg *cxm,struct CxObj *headobj,struct CxObj *ret );
void RouteCxMsg(struct CxMsg *cxm,struct CxObj *co );
void DisposeCxMsg(struct CxMsg *cxm );
BOOL InvertKeyMap( unsigned long ansicode, struct InputEvent *event, struct KeyMap *km );
void AddIEvents( struct InputEvent *events );
LONG BrokerCommand( STRPTR name, LONG longcommand );
BOOL MatchIX(struct InputEvent *ie, IX *ix );
VOID FreeBrokerList(struct List *list);


/*****************************************************************************/


#pragma libcall CxBase CreateCxObj 1e 98003
#pragma libcall CxBase CxBroker 24 0802
#pragma libcall CxBase ActivateCxObj 2a 0802
#pragma libcall CxBase DeleteCxObj 30 801
#pragma libcall CxBase DeleteCxObjAll 36 801
#pragma libcall CxBase CxObjType 3c 801
#pragma libcall CxBase CxObjError 42 801
#pragma libcall CxBase ClearCxObjError 48 801
#pragma libcall CxBase SetCxObjPri 4e 0802
#pragma libcall CxBase AttachCxObj 54 9802
#pragma libcall CxBase EnqueueCxObj 5a 9802
#pragma libcall CxBase InsertCxObj 60 A9803
#pragma libcall CxBase RemoveCxObj 66 801
#pragma libcall CxBase SetTranslate 2 9802
#pragma libcall CxBase SetFilter 78 9802
#pragma libcall CxBase SetFilterIX 7e 9802
#pragma libcall CxBase ParseIX 84 9802
#pragma libcall CxBase CxMsgType 8a 801
#pragma libcall CxBase CxMsgData 90 801
#pragma libcall CxBase CxMsgID 96 801
#pragma libcall CxBase DivertCxMsg 9c A9803
#pragma libcall CxBase RouteCxMsg a2 9802
#pragma libcall CxBase DisposeCxMsg a8 801
#pragma libcall CxBase InvertKeyMap ae 98003
#pragma libcall CxBase AddIEvents b4 801
#pragma libcall CxBase CopyBrokerList ba 801
#pragma libcall CxBase FreeBrokerList c0 801
#pragma libcall CxBase BrokerCommand c6 0802
#pragma libcall CxBase MatchIX cc 9802


/*****************************************************************************/


#define NUMPOOLS 33


/*****************************************************************************/


struct CxLib
{
    struct Library          cx_Lib;
    UWORD		    cx_UsageCnt;
    APTR                    cx_UtilityBase;
    APTR                    cx_KeymapBase;
    APTR                    cx_SysBase;
    APTR		    cx_GfxBase;
    ULONG                   cx_SegList;

    struct IOStdReq         cx_IHandlerReq;
    struct Interrupt        cx_IHandlerNode;
    struct MsgPort          cx_IHandlerPort;

    struct MinList	    cx_Objects;
    struct MinList   	    cx_Messages;
    struct CxObj           *cx_Zero;       /* to send messages if end of chain */

    struct SignalSemaphore  cx_LibLock;
    WORD		    cx_Pad0;       /* long align */

    struct InputEvent      *cx_EndChain;
    struct InputEvent      *cx_ReturnChain;

    APTR                    cx_Pools[NUMPOOLS];

    struct MsgPort          cx_EventReply;
};


#define ASM         __asm
#define REG(x)	    register __ ## x

#define CxBase      ((struct CxLib *)getreg(REG_A6))
#define SysBase     CxBase->cx_SysBase
#define GfxBase     CxBase->cx_GfxBase
#define UtilityBase CxBase->cx_UtilityBase
#define KeymapBase  CxBase->cx_KeymapBase

#define CXOBJLIST   (&CxBase->cx_Objects)
#define CXMSGLIST   (&CxBase->cx_Messages)

sprintf(STRPTR,...);


/*****************************************************************************/


/* These should be macros, but SAS/C 5.10 and 6.00 barf on them...
#define LockCX()   ObtainSemaphore(&CxBase->cx_LibLock)
#define UnlockCX() ReleaseSemaphore(&CxBase->cx_LibLock)
*/


/*****************************************************************************/


BOOL InitComodities(VOID);
VOID ShutdownCommodities(VOID);

VOID AttachIHandler(VOID);
VOID RemoveIHandler(VOID);

VOID LockCX(VOID);
VOID UnlockCX(VOID);

VOID NewList(struct List *list);


/*****************************************************************************/


#endif /* COMMODITIES_BASE_H */
@


38.7
log
@Removed ObjectCount field from library base.
@
text
@d94 14
a107 13
#define FILTER_IX(filter)  ((IX *) CO_DATA(filter))
#define TFD(tf)            ((LONG) CO_DATA(tf))
#define SENDER_PORT(s)     (CO_DATA(s)->d_sendd.sender_port)
#define SENDER_ID(s)       (CO_DATA(s)->d_sendd.sender_id)
#define SIGNAL_TASK(s)     (CO_DATA(s)->d_sigd.signal_task)
#define SIGNAL_SIGNAL(s)   (CO_DATA(s)->d_sigd.signal_signal)
#define XLATE_IE(xl)       ((struct InputEvent *) CO_DATA(xl))
#define BROKER_DATA(b)     ((struct CxBrokerData *) CO_DATA(b))
#define DEBUGD(db)         ((LONG) CO_DATA(db))
#define CUSTOM_ACTION(c)   (CO_DATA(c)->d_cusd.custom_action)
#define CUSTOM_ID(c)       (CO_DATA(c)->d_cusd.custom_id)


d111 2
a112 2
/* If CxMsg is made bigger, also make the value of NUMPOOLS in
 * pool.c
a140 3
#define CXMSG_CMD_SIZE        (sizeof(struct CxMsg)+sizeof(WORD))
#define CXMSG_IEVENT_SIZE     (sizeof(struct CxMsg)+sizeof(struct InputEvent))

d212 6
d242 3
a244 1
    struct MsgPort          cx_EMsgReply;
a259 1
kprintf(STRPTR,...);
d266 3
a268 3
/* These should be macros, but the SAS 5.10b barfs on it...
#define LockCX()   ObtainSemaphore(&CxBase->cx_LibLock);
#define UnlockCX() ReleaseSemaphore(&CxBase->cx_LibLock);
@


38.6
log
@Clean up and speed up
@
text
@a172 1
struct CxObj *FindBroker(STRPTR name );
d174 1
a192 1
#pragma libcall CxBase FindBroker 6c 801
a227 1
    ULONG		    cx_ObjectCount;
d273 1
a273 1
BOOL AttachIHandler(VOID);
@


38.5
log
@*** empty log message ***
@
text
@d110 7
a120 1
    APTR            cxm_Stack;
a121 1
    STRPTR          cxm_Data;
d124 2
a125 1
    UBYTE	    cxm_Pad;	       /* to long align */
a130 1
#define cxm_Name              cxm_Node.ln_Name
d132 1
a132 1
#define CXMSGDATA(cxm)        ((cxm)->cxm_Data)
a136 1
#define INSERTCXMSG(list,cxm) Insert((struct List *)list,(struct CxMsg *)cxm,NULL)
d140 2
d143 1
a214 14
struct CxControl
{
    struct List   cxc_Objects;
    struct List   cxc_Messages;
    struct CxObj *cxc_Zero;     /* to send messages if end of chain */
};

#define CXOBJLIST (&CxBase->cx_Control.cxc_Objects)
#define CXMSGLIST (&CxBase->cx_Control.cxc_Messages)


/*****************************************************************************/


d225 2
a227 2
    struct Interrupt        cx_IHandlerNode;
    struct IOStdReq         cx_IHandlerReq;
d229 4
a232 1
    struct CxControl        cx_Control;
d235 1
a235 1
    UWORD		    cx_Pad2;	/* long align */
d238 1
a238 3
    struct InputEvent      *cx_PreviousEvent;

    ULONG		    cx_ObjectCount;
d244 8
a251 2
#define ASM           __asm
#define REG(x)	      register __ ## x
d253 2
a254 5
#define CxBase        ((struct CxLib *)getreg(REG_A6))
#define SysBase       CxBase->cx_SysBase
#define GfxBase       CxBase->cx_GfxBase
#define UtilityBase   CxBase->cx_UtilityBase
#define KeymapBase    CxBase->cx_KeymapBase
a255 2
#define D_S(type,name) char a_##name[sizeof(type)+3]; \
		       ype *name = (type *)((LONG)(a_##name+3) & ~3);
@


38.4
log
@*** empty log message ***
@
text
@d45 1
@


38.3
log
@Removed many useless fields in CxObj and CxMsg
Removed pool references
@
text
@a220 12
#define CXMP_STATIC  5
#define IEP_SIZE     sizeof(struct InputEvent)
#define IEP_STATIC   5
#define EMSGP_SIZE   sizeof(struct CxMsg) + sizeof(struct InputEvent)
#define EMSGP_STATIC 5
#define CXOP_SIZE    sizeof(struct CxObj) + sizeof(union CxObjData)
#define CXOP_STATIC  10


/*****************************************************************************/


d224 2
a225 2
    UWORD		    cx_Pad;  /* long align */
    APTR                   cx_UtilityBase;
@


38.2
log
@Removed CxStatic semaphore
Added ObjectCount object counter
@
text
@d40 5
a44 7
    char            cbd_Name[CBD_NAMELEN];     /* (internal) node name     */
    char            cbd_Title[CBD_TITLELEN];   /* user-visible title       */
    char            cbd_Descr[CBD_DESCRLEN];   /* user-visible description */
    LONG            cbd_Task;                  /* who created this broker? */

    struct MsgPort *cbd_Port;
    WORD            cbd_Channel;
d69 3
a71 3
    struct List      co_List;
    ULONG            co_Flags;
    WORD             co_Error;
a112 1
    struct List    *cxm_List;          /* the list I am linked into      */
a113 2
    UBYTE           cxm_Type;
    WORD            cxm_Echo;          /* how many times has this message been sent?   */
d116 3
d131 1
d156 1
a156 1
ULONG CxMsgType(struct CxMsg *cxm );
d165 2
a166 1
struct CxObj *FindBroker(STRPTR name);
d186 1
a186 1
#pragma libcall CxBase SetTranslate 72 9802
d201 1
d237 1
a237 1
    APTR                    cx_UtilityBase;
d253 1
a253 6

    struct PoolHeader      *cx_IEPool;
    struct PoolHeader      *cx_CxMsgPool;
    struct PoolHeader      *cx_CxObjPool;
    struct PoolHeader      *cx_EMsgPool;
    struct PoolHeader      *cx_StackPool;
d271 1
a271 1
		       type *name = (type *)((LONG)(a_##name+3) & ~3);
d288 1
a288 1
BOOL InitCommodities(VOID);
@


38.1
log
@Initial V38 RCS checkin
@
text
@d249 1
a249 1
    struct SignalSemaphore  cx_Static;
d259 2
d294 1
@
