head     38.6;
branch   ;
access   ;
symbols  ;
locks    vertex:38.6; strict;
comment  @ * @;


38.6
date     92.11.23.10.51.56;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     92.10.16.17.58.08;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.24.10.18.31;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.21.13.04.26;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.21.11.00.20;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.07.15.21.56;  author vertex;  state Exp;
branches ;
next     ;


desc
@General-purpose memory pool handling for commodities
@


38.6
log
@Removed useless Forbid()/Permit() around FlushPools()
@
text
@
#include <exec/types.h>
#include <exec/memory.h>
#include <exec/nodes.h>
#include <exec/lists.h>

#include <clib/exec_protos.h>

#include <pragmas/exec_pragmas.h>

#include "commoditiesbase.h"
#include "pool.h"


/*****************************************************************************/


/* In this module, all instances of the local variable "pools" are
 * there strictly to avoid a compiler bug in SAS/C 5.10, where the value
 * of CxBase was being lost. When compiling under latter versions of SAS/C,
 * simply replace all references to pools by CxBase->cx_Pools
 */


/*****************************************************************************/


/* This function must be called under Forbid(), and must not break Forbid(),
 * since it is called from the library's expunge vector
 */
VOID FlushPools(VOID)
{
UWORD  i;
ULONG  size;
APTR   memory;
APTR   next;
APTR  *pools;

    pools = CxBase->cx_Pools;

    for (i=0; i<NUMPOOLS; i++)
    {
        size   = i*8+8;
        memory = pools[i];
        while (memory)
        {
            next = *(APTR *)memory;
            FreeMem(memory,size);
            memory = next;
        }
        pools[i] = NULL;
    }
}


/*****************************************************************************/


APTR AllocPoolMem(ULONG size)
{
ULONG  i;
APTR   memory;
ULONG *ptr;
APTR  *pools;

    i      = ((size+4)+7) / 8 - 1;   /* get a pool number    */
    size   = i*8+8;                  /* size things up...    */
    memory = NULL;
    pools  = CxBase->cx_Pools;

    if (i < NUMPOOLS)
    {
        Forbid();
        if (memory = pools[i])
            pools[i] = *(APTR *)memory;  /* address of next node in list */
        Permit();
    }

    if (memory)
    {
        i   = size / 4;
        ptr = memory;
        while (i)
            ptr[--i] = 0;
    }
    else
    {
        memory = AllocMem(size,MEMF_CLEAR);
    }

    if (memory)
    {
        *(ULONG *)memory = size;
        memory = (APTR)((ULONG)memory + 4);
    }

    return(memory);
}


/*****************************************************************************/


VOID FreePoolMem(APTR memory)
{
ULONG  size;
ULONG  i;
APTR  *pools;

    if (memory)
    {
        memory = (APTR)((ULONG)memory - 4);  /* get real memory pointer  */
        size   = *(ULONG *)memory;           /* get size of memory block */
        i      = (size / 8) - 1;             /* in which pool does the block go? */
        pools  = CxBase->cx_Pools;

        if (i < NUMPOOLS)
        {
            Forbid();
            *(APTR *)memory = pools[i];
            pools[i] = memory;
            Permit();
        }
        else
        {
            FreeMem(memory,size);
        }
    }
}
@


38.5
log
@Removed useless "memsize" global.
Moved "pools" variable inside library base
@
text
@d28 3
a40 2
    Forbid();

a52 2

    Permit();
@


38.4
log
@Clean up and speed up
@
text
@d18 5
a22 1
#define NUMPOOLS 33
a23 1
APTR far pools[NUMPOOLS];
a24 1

d28 1
a28 1
VOID InitPools(VOID)
d30 5
a34 6
UWORD i;

    for (i=0; i<NUMPOOLS; i++)
        pools[i] = NULL;
}

d36 1
a36 9
/*****************************************************************************/


VOID FlushPools(VOID)
{
UWORD i;
ULONG size;
APTR  memory;
APTR  next;
a59 2
ULONG far maxSize;

d65 1
d70 1
d89 1
a89 1
        memory = AllocMem(size,MEMF_PUBLIC|MEMF_CLEAR);
d107 3
a109 2
ULONG size;
ULONG i;
d116 1
@


38.3
log
@*** empty log message ***
@
text
@a5 1
#include <exec/semaphores.h>
d18 2
a19 1
#define NUMPOOLS           10
d67 2
d91 2
a92 2
        while (--i)
            ptr[i] = 0;
@


38.2
log
@Redid this sucker!
Much faster/smaller
Takes up less memory
@
text
@d115 5
a119 3
    memory = (APTR)((ULONG)memory - 4);  /* get real memory pointer  */
    size   = *(ULONG *)memory;		 /* get size of memory block */
    i      = (size / 8) - 1;		 /* in which pool does the block go? */
d121 11
a131 10
    if (i < NUMPOOLS)
    {
        Forbid();
        *(APTR *)memory = pools[i];
        pools[i] = memory;
        Permit();
    }
    else
    {
        FreeMem(memory,size);
@


38.1
log
@Initial V38 RCS checkin
@
text
@d19 2
a20 9
struct PoolGuy
{
    struct MinNode pg_Node;       /* on one of PoolHead lists   */
    BOOL           pg_Static;
    UWORD          pg_Pad;        /* to long align */
};


/*****************************************************************************/
a22 4
#define LOCKPH(ph)   ObtainSemaphore(&ph->ph_Lock);
#define UNLOCKPH(ph) ReleaseSemaphore(&ph->ph_Lock);


d26 1
a26 1
struct PoolHead *CreatePool(UWORD defSize, WORD staticParts)
d28 1
a28 13
LONG             guySize;
struct PoolHead *ph;
struct PoolGuy  *pg;

    defSize = ((defSize+3) / 4) * 4;  /* long align */

    guySize  = defSize + sizeof(struct PoolGuy);

    if (ph = AllocVec(sizeof(struct PoolHead) + staticParts*guySize,MEMF_PUBLIC))
    {
        NewList((struct List *)&ph->ph_FreeList);
        NewList((struct List *)&ph->ph_OutList);
        InitSemaphore(&ph->ph_Lock);
d30 2
a31 12
        ph->ph_DefaultMemSize = defSize;

        pg = (struct PoolGuy *)((ULONG)ph + sizeof(struct PoolHead));
        while (staticParts-- > 0)
        {
            pg->pg_Static = TRUE;
            AddTail((struct List *)&ph->ph_FreeList,(struct Node *)pg);
            pg = (struct PoolGuy *) (((UBYTE *) pg) + guySize);
        }
    }

    return(ph);
d38 1
a38 1
VOID EmptyPool(struct PoolHead *ph)
d40 4
a43 1
struct PoolGuy *pg;
d45 3
a47 1
    if (ph)
d49 3
a51 3
        LOCKPH(ph);

        while (pg = (struct PoolGuy *)RemHead((struct List *)&ph->ph_OutList))
d53 3
a55 8
            if (pg->pg_Static)
            {
                AddTail((struct List *)&ph->ph_FreeList,(struct Node *)pg);
            }
            else
            {
                FreeVec(pg);
            }
d57 2
d60 1
a60 2
        UNLOCKPH(ph);
    }
d67 1
a67 1
APTR AllocPoolMem(struct PoolHead *ph, ULONG size)
d69 3
a71 1
struct PoolGuy *pg;
d73 23
a95 1
    LOCKPH(ph);
d97 4
a100 14
    if (size <= ph->ph_DefaultMemSize && (pg = (struct PoolGuy *)RemHead((struct List *)&ph->ph_FreeList)))
    {
        AddTail((struct List *)&ph->ph_OutList,(struct Node *)pg);
        UNLOCKPH(ph);
	{ ULONG i; for(i=0;i<size;i++){((UBYTE *)&pg[1])[i]=0; } }
        return(&pg[1]);
    }

    if (pg = AllocVec(sizeof(struct PoolGuy) + size, MEMF_PUBLIC|MEMF_CLEAR))
    {
/*        pg->pg_Static = FALSE;  done by MEMF_CLEAR */
        AddTail((struct List *)&ph->ph_OutList,(struct Node *)pg);
        UNLOCKPH(ph);
        return(&pg[1]);
d103 1
a103 3
    UNLOCKPH(ph);

    return(NULL);
d110 1
a110 1
VOID FreePoolMem(struct PoolHead *ph, APTR memory)
d112 2
a113 3
struct PoolGuy *pg = ((struct PoolGuy *) memory) - 1;

    LOCKPH(ph);
d115 10
a124 5
    Remove((struct Node *)pg);   /* remove from ph_OutList   */

    if (pg->pg_Static)
    {
        AddTail((struct List *)&ph->ph_FreeList,(struct Node *)pg);
d128 1
a128 1
        FreeVec(pg);
a129 2

    UNLOCKPH(ph);
@
