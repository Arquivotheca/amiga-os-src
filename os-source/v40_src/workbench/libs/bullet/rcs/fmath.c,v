head     8.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


8.0
date     91.03.24.12.16.54;  author kodiak;  state Exp;
branches ;
next     7.0;

7.0
date     91.03.19.18.36.01;  author kodiak;  state Exp;
branches ;
next     3.0;

3.0
date     90.11.09.17.09.19;  author kodiak;  state Exp;
branches ;
next     1.0;

1.0
date     90.10.10.03.13.12;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


8.0
log
@Phase 2 Beta 1 (38.2)
@
text
@/* fmath.c */
/* Copyright (C) Agfa Compugraphic, 1989. All rights reserved. */

#include "debug.h"
#include "port.h"
#include "fmath.h"
#include "math.h"

/* WARNING: these macros assume x is a ULONG, not a LONG */

#define FLO(x)  (x & 0xffff)
#define FHI(x)  (x >> 16)

GLOBAL BOOLEAN  fmath_error;

/*------------------*/
/*     ifmul        */
/*------------------*/
/*  Multiply a WORD by a FIXED, return a rounded WORD  */
GLOBAL WORD
ifmul(x, y)
    WORD  x;
    FIXED y;
{
    WORD sign;
    UWORD xx;
    ULONG yy;
    ULONG p1, p2;
    WORD m;

    DBG3("ifmul(%x, %x.%04lx)", x, (WORD)FHI(y), FLO(y));

    sign = 1;
    if(x < 0)
    {
        sign = -sign;
        x = -x;
    }
    if(y < 0)
    {
        sign = -sign;
        y = -y;
    }

    xx = (UWORD)x;
    yy = (ULONG)y;

    p1 = xx * FLO(yy) + 0x8000;   /* 0x8000 rounds  */
    p2 = xx * FHI(yy);

    m = (WORD)(FHI(p1) + FLO(p2));

    if((m < 0) || FHI(p2))
    {
        DBG(" (overflow) ");
        fmath_error = TRUE;		/* FMATH_MUL_OV */
    }

    if(sign < 0) m = -m;

    DBG1(" = %x\n", m);
    return m;
}




/*------------------*/
/*      fmul        */
/*------------------*/
/*  Multiply a FIXED by a FIXED, return a FIXED  */
GLOBAL FIXED
fmul(x, y)
    FIXED x,y;
{
    double res1;
    FIXED res2;

    DBG4("fmul(%ld.%04ld, %ld.%04ld): ",
	    DBINT(x), DBFRAC(x), DBINT(y), DBFRAC(y));
    res1 = DShift(LMul(x, y), -16);
    res2 = DLoToL(res1);
    if (DHiToL(res1) != ((res2<0)?0x0000ffff:0)) {
	fmath_error = TRUE;		/* FMATH_MUL_OV */
	return(0);
    }
    DBG2("%ld.%04ld\n", DBINT(res2), DBFRAC(res2));
    return(res2);
}


/*------------------*/
/*      fdiv        */
/*------------------*/
/*  Divide a FIXED by a FIXED, return a FIXED  */
GLOBAL FIXED
fdiv(x,y)
    FIXED x,y;
{
    double res1;
    FIXED res2;

    DBG4("fdiv(%ld.%04ld, %ld.%04ld): ",
	    DBINT(x), DBFRAC(x), DBINT(y), DBFRAC(y));
    if (y == 0) {
	DBG("divide by zero\n");
	fmath_error = TRUE;		/* FMATH_DIV0 */
	return(0);
    }
    res1 = DDiv(DShift(LToD(x),16),LToD(y));
    DBG2("  $%08lx:%08lx  ", DHiToL(res1), DLoToL(res1));
    res2 = DLoToL(res1);
    if (DHiToL(res1) != ((res2<0)?-1:0)) {
	DBG("overflow\n");
	fmath_error = TRUE;		/* FMATH_DIV_OV */
	return(0);
    }
    DBG2("%ld.%04ld\n", DBINT(res2), DBFRAC(res2));
    return(res2);
}
@


7.0
log
@after Amigaizing memory, lists, and adding UniCode.  Before cache work.
@
text
@d7 1
d76 2
a77 4
    WORD  sign;
    ULONG xx, yy;
    ULONG p1, p2, p3, p4;
    ULONG m1, m2, m;
d79 7
a85 8
    DBG4("fmul(%x.%04lx, %x.%04lx)",
               (WORD)FHI(x), FLO(x), (WORD)FHI(y), FLO(y));

    sign = 1;
    if(x < 0)
    {
        sign = -sign;
        x = -x;
d87 2
a88 29
    if(y < 0)
    {
        sign = -sign;
        y = -y;
    }

    xx = (ULONG)x;
    yy = (ULONG)y;

    p1 = FLO(xx) * FLO(yy);
    p2 = FLO(xx) * FHI(yy);
    p3 = FHI(xx) * FLO(yy);
    p4 = FHI(xx) * FHI(yy);

    m1 = FHI(p1) + FLO(p2) + FLO(p3);
    m2 = FHI(p2) + FHI(p3) + p4;

    m = m1 + (FLO(m2) << 16);

    if((m & 0x80000000) || FHI(p4))
    {
        DBG(" (overflow) ");
        fmath_error = TRUE;		/* FMATH_MUL_OV */
    }

    if(sign < 0) m = (ULONG)(-(LONG)m);

    DBG2(" = %x.%04lx\n", (WORD)FHI(m), FLO(m));
    return (FIXED)m;
d100 2
a101 4
    WORD sign;
    FIXED q;
    ULONG w, d;   /* q = w/d */
    UWORD qct;
d103 6
a108 8
    DBG4("fdiv(%x.%04lx, %x.%04lx)",
               (WORD)FHI(x), FLO(x), (WORD)FHI(y), FLO(y));

    if(!y)
    {
        DBG("    divide by 0\n");
        fmath_error = TRUE;		/* FMATH_DIV0 */
        return 0L;
d110 7
a116 9
    if(!x)  return 0L;

  /*  We'll divide two positive numbers so remember sign of quotient */

    sign = 1;      /* assume positiv */
    if(x < 0)
    {
        sign = -sign;
        x = -x;
d118 2
a119 46
    if(y < 0)
    {
        sign = -sign;
        y = -y;
    }

    w = x;  d = y;
    qct = 17;
    while(w<d)
    {
        w <<= 1;
        qct--;
    }
    while(d<=w)
    {
        d <<= 1;
        qct++;
    }
    d >>= 1;
    qct--;

    if(qct > 31)
    {
        DBG("    divide overflow\n");
        fmath_error = TRUE;		/* FMATH_DIV_OV */
        return 0L;
    }

    q = 0;
    while(qct)
    {
        q <<= 1;
        if(d<=w)
        {
            w -= d;
            q |= 1;
        }
        w <<= 1;
        qct--;
    }


    if(sign < 0) q = -q;

    DBG2(" = %x.%04lx\n", (WORD)FHI(q), FLO(q));
    return q;
a120 1

@


3.0
log
@Kodiak's Alpha 1
@
text
@a13 1
GLOBAL UWORD    fmath_code;
d55 1
a55 2
        fmath_error = TRUE;
        fmath_code  = FMATH_MUL_OV;
d111 1
a111 2
        fmath_error = TRUE;
        fmath_code  = FMATH_MUL_OV;
d140 1
a140 2
        fmath_error = TRUE;
        fmath_code  = FMATH_DIV0;
d177 1
a177 2
        fmath_error = TRUE;
        fmath_code  = FMATH_DIV_OV;
@


1.0
log
@from AGFA Bullet 1.10, 30-Mar-90
@
text
@a3 1
#include <stdio.h>
@
