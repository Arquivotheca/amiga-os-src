head     3.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


3.0
date     90.11.09.17.10.08;  author kodiak;  state Exp;
branches ;
next     2.0;

2.0
date     90.10.10.04.16.36;  author kodiak;  state Exp;
branches ;
next     1.0;

1.0
date     90.10.10.03.13.05;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


3.0
log
@Kodiak's Alpha 1
@
text
@/*
**	$Id$
**
**	(C) Copyright 1990 Robert R. Burns
**	    All Rights Reserved
**
**	$Log$
*/
/************************************************************************
**    imath.c                                                          **
**    -------------------------------------------------------------    **
**    Copyright 1986-90 by Agfa Compugraphic. All rights reserved.     **
*************************************************************************/
/*
 *  04-Jun90  awr  changed nx() and ny() to scale "move as" if v is
 *                 outside original interval.
 *
 */

#include "debug.h"
#include "port.h"
#include "adj_skel.h"
#include "tr_type.h"
#include "fmath.h"
#include "if_type.h"

EXTERN IF_DATA  d;
EXTERN TRAN    x_tran,y_tran;

/*  tx() and ty() tranform from the design space to the working
 *  power of two space.
 */

/*-------------------*/
/*    tx             */
/*-------------------*/
GLOBAL WORD
tx(v)
    WORD v;
{
    union {
              LONG l;
#if BYTEORDER == LOHI
              struct {WORD lo, hi;} w;
#else
              struct {WORD hi, lo;} w;
#endif
           } val;

    DBG1("tx(%ld)",v);

    val.w.lo = 0;
    val.w.hi = v;
    val.l = val.l >> 4;
    DBG1(" = %ld\n", (WORD)((val.l + d.x.p_half_pix) / d.x.p_pixel));
    return (WORD)((val.l + d.x.p_half_pix) / d.x.p_pixel);
}

/*-------------------*/
/*    ty             */
/*-------------------*/
GLOBAL WORD
ty(v)
    WORD v;
{
    union {
              LONG l;
#if BYTEORDER == LOHI
              struct {WORD lo, hi;} w;
#else
              struct {WORD hi, lo;} w;
#endif
           } val;

    DBG1("ty(%ld)",v);

    val.w.lo = 0;
    val.w.hi = v;
    val.l = val.l >> 4;
    DBG1(" = %ld\n", (WORD)((val.l + d.y.p_half_pix) / d.y.p_pixel));
    return (WORD)((val.l + d.y.p_half_pix) / d.y.p_pixel);

}




/*------------------*/
/*    nx            */
/*------------------*/
GLOBAL WORD
nx(v)
  WORD v;
{
return
    (WORD)( ( (  (LONG)(v-x_tran.old0) * (LONG)x_tran.num + x_tran.half_den )
                                 /x_tran.den
          )   + x_tran.new0);
}


/*------------------*/
/*    ny            */
/*------------------*/
GLOBAL WORD
ny(v)
  WORD v;
{
return
    (WORD)( ( (  (LONG)(v-y_tran.old0) * (LONG)y_tran.num + y_tran.half_den )
                                 /y_tran.den
          )   + y_tran.new0);
}


/*-------------------------------------------------------------------*/
/*        multiply_i_i()                                             */
/*-------------------------------------------------------------------*/

LONG
multiply_i_i (x, y)

        WORD x;
        WORD y;
{
        return ((LONG)x * (LONG)y);
}



/*-------------------------------------------------------------------*/
/*        scale_iii()                                                */
/*-------------------------------------------------------------------*/

WORD
scale_iii (x, y, z)

        WORD x,y,z;
{
        return (
                  (WORD)(
                           ( (LONG)x  * (LONG)y ) / (LONG)z
                        )
               );
}




/*-------------------*/
/*  scale_rem        */
/*-------------------*/
GLOBAL WORD
scale_rem(a, p, q, ptr_rem, ptr_deltax1)
    WORD a,p, q;
    WORD *ptr_rem;
    WORD *ptr_deltax1;
{
    WORD x, rem, deltax1;

    DBG3("scale_rem(%ld, %ld, %ld)\n", a, p, q);

    x   = scale_iii(a, p, q);
    rem = (WORD)((LONG)a * (LONG)p  -  (LONG)x * (LONG)q);
    DBG2("    x %ld   rem  %ld\n", x, rem);

    rem <<= 1;
    if(rem <0) rem = - rem;
    *ptr_rem = rem;

  /*  deltax1 */

    if(x>0)              deltax1 = x + 1;
    else if(x<0)         deltax1 = x -1;
    else /* x == 0 */
    {
        if(p>0) deltax1 = x + 1;
        else    deltax1 = x -1;
    }

    *ptr_deltax1 = deltax1;
    return x;
}

@


2.0
log
@from AGFA Bullet 1.20Beta, 02-Oct-90
@
text
@d1 8
a19 1
#include "stdio.h"
d50 1
a50 1
    DBG1("tx(%d)",v);
d55 1
a55 1
    DBG1(" = %d\n", (WORD)((val.l + d.x.p_half_pix) / d.x.p_pixel));
d75 1
a75 1
    DBG1("ty(%d)",v);
d80 1
a80 1
    DBG1(" = %d\n", (WORD)((val.l + d.y.p_half_pix) / d.y.p_pixel));
d96 1
a96 1
    (WORD)(  (  (LONG)(v-x_tran.old0) * (LONG)x_tran.num + x_tran.half_den )
d98 1
a98 1
          )   + x_tran.new0;
d110 1
a110 1
    (WORD)(  (  (LONG)(v-y_tran.old0) * (LONG)y_tran.num + y_tran.half_den )
d112 1
a112 1
          )   + y_tran.new0;
d161 1
a161 1
    DBG3("scale_rem(%d, %d, %d)\n", a, p, q);
d165 1
a165 1
    DBG2("    x %d   rem  %d\n", x, rem);
@


1.0
log
@from AGFA Bullet 1.10, 30-Mar-90
@
text
@d4 1
a4 1
**    Copyright 1986 by Compugraphic, Inc. All rights reserved.        **
d6 5
a19 4

EXTERN BOOLEAN no_skel;


a21 3
EXTERN MATRIX  tran;
EXTERN BOOLEAN rotate_on;
EXTERN WORD    ttx, tty;
a22 2


d36 5
a40 1
              WORD w[2];
a41 1
    WORD newval;
d43 1
a43 1
    DBG1("tx   v = %d\n",v);
d45 2
a46 4
    val.w[0] = 0;
    val.w[1] = v;
    DBG3("  w0 %x    w1 %x   l %lx\N", val.w[0], val.w[1], val.l);
/*    val.l = val.l >> 2; */
d48 2
a49 5
    DBG1("  shifted val.l  %lx\n", val.l);
    newval = (WORD)    (val.l / d.x.p_pixel);
    DBG1("    newval = %d\n", newval);

    return newval;
d61 5
a65 1
              WORD w[2];
a66 1
    WORD newval;
d68 1
a68 1
    DBG1("ty   v = %d\n",v);
d70 2
a71 4
    val.w[0] = 0;
    val.w[1] = v;
    DBG3("  w0 %x    w1 %x   l %lx\N", val.w[0], val.w[1], val.l);
/*    val.l = val.l >> 2; */
d73 2
a74 3
    DBG1("  shifted val.l  %lx\n", val.l);
    newval = (WORD)    (val.l / d.y.p_pixel);
    DBG1("    newval = %d\n", newval);
a75 1
    return newval;
d88 4
a91 2
  return(   (WORD)(((long)(v - x_tran.old0)*(long)x_tran.num)
                                      / x_tran.den) + x_tran.rnd  );
d102 4
a105 2
  return(   (WORD)(((LONG)(v - y_tran.old0)*(LONG)y_tran.num)
                                        /y_tran.den) + y_tran.rnd   );
@
