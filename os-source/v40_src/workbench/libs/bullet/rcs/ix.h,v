head     7.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


7.0
date     91.03.19.18.36.37;  author kodiak;  state Exp;
branches ;
next     5.1;

5.1
date     91.03.18.09.00.50;  author kodiak;  state Exp;
branches ;
next     3.0;

3.0
date     90.11.09.17.10.51;  author kodiak;  state Exp;
branches ;
next     2.0;

2.0
date     90.10.10.23.02.26;  author kodiak;  state Exp;
branches ;
next     1.0;

1.0
date     90.10.10.22.00.07;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


7.0
log
@after Amigaizing memory, lists, and adding UniCode.  Before cache work.
@
text
@/* ix.h */
/*  01-Apr-90  awr  Expanded SS_DIRECTORY to include pcleo info
 *  12-Apr-90  jfd  Added handles for Typeface Header and Font
 *                    Alias segments to BUCKET structure
 *  07-Jun-90  dah  Added input_filetype to INDEX_ENTRY and BUCKET structs.
 *  01-Jul-90  awr  Corrected comments, added bit flag definitions and
 *                  screen font definitions.
 *  15-Aug-90  awr  added BUCKET's handle to BUCKET structure.
 *  17-Sep-90  jfd  Changed CHARBUFSIZE from 2048 to 4096
 */

#define MAX_CC_PARTS  10    /* maximum number of parts in a compound ch. */
#define MAX_UC_MAPS    4    /* maximum # of CG codes mapped to one UniCode */

#define CHARBUFSIZE  4096   /* character buffer size */

/* Bucket Types */

#define  TF_SENSITIVE    0
#define  LIM_SENSITIVE   1
#define  UNIVERSAL       2

/*  Typeface number definitions for generic screen faces and plugin faces */

#define FACE_S_SCR       5500L  /* serif screen font                     */
#define FACE_SS_SCR      5501L  /* sans serif screen font                */
#define FACE_UNIV        5719L  /* Universals                            */
#define FACE_LS_S_NORM   5720L  /* Limited sensitive  serif,      normal */
#define FACE_LS_S_BOLD   5721L  /*                    serif,      bold   */
#define FACE_LS_SS_NORM  5723L  /*                    sans-serif, normal */
#define FACE_LS_SS_BOLD  5724L  /*                    sans-serif, bold   */

/*--------------------------------*/
/*       font index entry         */
/*--------------------------------*/

#define B_BOLD          0x0001
#define B_SANS_SERIF    0x0002
#define B_ITALIC        0x0004
#define B_COMPRESS      0x8000

typedef struct
{
    LONG    tfnum;        /* typeface number                          */
    UWORD   name_off;     /* offset to full path name of library file */
    ULONG   fhoff;        /* offset in library file for face header   */
    UWORD   fhcount;      /* BYTE count of face header                */
    WORD    bucket_num;   /* Bit flags
                           *
                           *   Bit 15 = 0    Normal library file
                           *            1    Compressed library file
                           *
                           *
                           *   Bit definitions:
                           *      bit         0           1
                           *       0         normal      bold
                           *       1         serif       sans-serif
                           *       2         non-italic  italic
                           *       3-14      reserved
                           *
                           * Associated limited sensitive face:
                           *     0 = 5720    Serif         Normal
                           *     1 = 5721    Serif         Bold
                           *     2 = 5723    Sans-serif    Normal
                           *     3 = 5724    Sans-serif    Bold
                           */
} INDEX_ENTRY;


/*--------------------------------*/
/*     FONTINDEX                  */
/*--------------------------------*/
/*  Memory for the entire font index file and this structure is obtained
 *  ... The font index file is read into the
 *  beginning of this block. The following structure is at the end of the
 *  block.
 */
typedef struct
{
    UBYTE       *fnt_index;      /* font index buffer                    */
    WORD         entry_ct;        /* number of entries in index           */
    INDEX_ENTRY *index_entry;     /* font index entries                   */
    char        *libnames;        /* path names of library files in index */

  /*  The current typeface. */

    LONG         cur_tf_num;      /* current type face number             */
    INDEX_ENTRY *cur_index[3];   /* Index entrie handles for the three
                                   * buckets for the current typeface.
                                   */
} FONTINDEX;

/*--------------------------------*/
/*     BUCKET                     */
/*--------------------------------*/
/*  106 BYTEs  */

typedef struct
{
    struct MinNode mn;
    BOOLEAN   file_open;       /* Library file is open                   */
    LONG      tfnum;    
    ULONG     f;               /* (really BPTR) File handle */
    UWORD     bucket_num;      /* Copy of ix->buket_num */

  /*  character directory  (face header segment) */

    UBYTE         *pface_header_seg;
    struct _CH_DIR_ENTRY *pchar_dir;     /* Character directory  */
    UWORD          ch_count;             /* Number of characters */

  /*  face global segment */

    UBYTE     *pfgseg;           /* Handle of face global segment */
    UWORD      sfgseg;
    UBYTE     *pgif;              /* Global Intellifont segment */
    UWORD      gifct;
    UBYTE     *ptrack_kern_seg;   /* track kerning              */
    UWORD      strack_kern_seg;
    UBYTE     *ptext_kern_seg;    /* text kerning               */
    UWORD      stext_kern_seg;
    UBYTE     *pdesign_kern_seg;  /* designer kerning           */
    UWORD      sdesign_kern_seg;
    struct _CHARWIDTH *pwidth_seg;        /* character width segment    */
    UWORD      swidth_seg;
    struct _FACE_ATT  *pattribute;        /* Attribute header           */
    UWORD      sattribute;
    UBYTE     *prast;             /* Raster parameter           */
    UWORD      srast;
    UBYTE     *ptf_header_seg;    /* Typeface Header segment    */
    UWORD      stf_header_seg;
    UBYTE     *pcompound_seg;     /* Compound character         */
    UWORD      scompound_seg;
    struct _DISPLAY   *pdisplay;          /* Display header             */
    UWORD      sdisplay;
    UBYTE     *pfont_alias_seg;   /* Font Alias segment         */
    UWORD      sfont_alias_seg;
    UBYTE     *pcopy;             /* Copyright notice           */
    UWORD      scopy;
} BUCKET;

/*--------------------------------*/
/*--------------------------------*/

typedef struct
{
    UWORD cgnum;
    UWORD bucknum;
    WORD  index;
    WORDPOINT    offset;
    WORDPOINT    bmorigin;
} CHR_DEF;


/*--------------------------------*/
/*        Symbol set entry        */
/*--------------------------------*/

typedef struct
{
    UWORD unicode;
    UWORD cgnum;
} SS_ENTRY;
@


5.1
log
@eliminate old style symbol table lookup
@
text
@d13 1
a66 7
#if 0
    /* Added by Kodiak... */
    UBYTE   serifFlag;
    UBYTE   stemWeight;
    UBYTE   slantStyle;
    UBYTE   horizStyle;
#endif
d74 1
a74 1
 *  from MEMalloc(BUFFER_POOL, ). The font index file is read into the
d80 1
a80 1
    MEM_HANDLE   hfnt_index;      /* font index buffer                    */
d82 2
a83 2
    MEM_HANDLE   hindex_entry;     /* font index entries                   */
    MEM_HANDLE   hlibnames;        /* path names of library files in index */
d88 1
a88 1
    MEM_HANDLE   hcur_index[3];   /* Index entrie handles for the three
a92 2
typedef MEM_HANDLE HBUCKET;

d100 1
a100 2
    DLL       link;
    HBUCKET    my_handle;       /* memory handle of this structure */
d108 2
a109 2
    MEM_HANDLE     hface_header_seg;
    MEM_HANDLE     hchar_dir;             /* Character directory  */
d114 1
a114 1
    MEM_HANDLE hfgseg;           /* Handle of face global segment */
d116 1
a116 1
    MEM_HANDLE hgif;              /* Global Intellifont segment */
d118 1
a118 1
    MEM_HANDLE htrack_kern_seg;   /* track kerning              */
d120 1
a120 1
    MEM_HANDLE htext_kern_seg;    /* text kerning               */
d122 1
a122 1
    MEM_HANDLE hdesign_kern_seg;  /* designer kerning           */
d124 1
a124 1
    MEM_HANDLE hwidth_seg;        /* character width segment    */
d126 1
a126 1
    MEM_HANDLE hattribute;        /* Attribute header           */
d128 1
a128 1
    MEM_HANDLE hrast;             /* Raster parameter           */
d130 1
a130 1
    MEM_HANDLE htf_header_seg;    /* Typeface Header segment    */
d132 1
a132 1
    MEM_HANDLE hcompound_seg;     /* Compound character         */
d134 1
a134 1
    MEM_HANDLE hdisplay;          /* Display header             */
d136 1
a136 1
    MEM_HANDLE hfont_alias_seg;   /* Font Alias segment         */
d138 1
a138 1
    MEM_HANDLE hcopy;             /* Copyright notice           */
a152 18



/*--------------------------------*/
/* Symbol set file directoy entry */
/*--------------------------------*/
/* Bullet 1.20 -  */
typedef struct
{
    UWORD ss_code;    /* symbol set code */
    UWORD symSetCode; /* 32 * PCLnum + (short)PCLchar - 64 */
    UWORD type;
    UWORD class;
    UWORD num_codes;  /* number of codes */
    ULONG offset;     /* offset to symbol set in symbol set file */

}  SS_DIRECTORY;

@


3.0
log
@Kodiak's Alpha 1
@
text
@a167 11
/* Bullet 1.00 - 1.10 */
#if 0
typedef struct
{
    UWORD ss_code;    /* symbol set code */
    UWORD first_code; /* first code */
    UWORD num_codes;  /* number of codes */
    ULONG offset;     /* offset to symbol set in symbol set file */
}  SS_DIRECTORY;
#endif

a174 1
    UWORD first_code; /* first code */
d188 1
a189 1
    UWORD bucket_type;   /* no longer used */
@


2.0
log
@from AGFA Bullet 1.20Beta, 02-Oct-90
@
text
@d66 7
d112 1
a112 1
    WORD      f;               /* File handle */
@


1.0
log
@from AGFA Bullet 1.10, 30-Mar-90
@
text
@d2 9
d14 2
d22 1
d24 8
d36 5
d47 18
a64 5
    WORD    bucket_num;   /* Associated limited sensitive face:
                           *     0 = 5720
                           *     1 = 5721
                           *     2 = 5723
                           *     3 = 5724
d92 1
a93 1

d97 1
a97 1
/*  64 BYTEs  */
d102 1
d106 1
d117 1
d119 3
d123 1
d125 1
a125 1
    UWORD      gifct;
d127 1
d129 1
d131 3
d135 1
d137 5
d161 10
d172 1
d176 3
d182 1
d194 1
a194 1
    UWORD bucket_type;  /* should be a BYTE when I learn packed structures */
@
