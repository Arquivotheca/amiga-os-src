MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          1         include "float.i"
                                          1 *******************************************************************************
                                          2 *
                                          3 *       $Header:
                                          4 *
                                          5 *******************************************************************************
                                          6
0000'                                     7         section mathieeedoubbas
                                          8         xref    do_trapv
                                          9         xref    do_div0
                                         10
                                         11 ;ALLOW_TRAPS    equ 1
                                         12
                                         13 ;       overflow trap
                                         14 fptrap  macro
                                         15 ;       overfloat trap
                                         16         ifd ALLOW_TRAPS
                                         17                 ifeq \1-2
                                         18                         bsr     do_trapv
                                         19                 endc
                                         20 ;               underfloat is ignored
                                         21                 ifeq \1-1
                                         22                 endc
                                         23 ; divide by zero
                                         24                 ifeq \1-3
                                         25                         bsr     do_div0
                                         26                 endc
                                         27 ; indefinate trap
                                         28                 ifeq \1-4
                                         29 ;                       bsr     do_trapv
                                         30                 endc
                                         31                 ifne \1-4
                                         32                         ifne \1-1
                                         33                                 ifne \1-2
                                         34                                         ifne \1-3
                                         35                                                 fail
                                         36                                         endc
                                         37                                 endc
                                         38                         endc
                                         39                 endc
                                         40         endc
                                         41         endm
                                         42
                                         43 sdebug  macro
                                         44 ;       move.l  \1,-(sp)
                                         45 ;       move.l  \2,-(sp)
                                         46 ;       addq.l  #8,sp
                                         47         endm
                                         48
                                          2         xref    _CXREN5         ; Renormalize operand
                                          3         xref    _cxadj5         ; Adjust after multiply/divide
                                          4         xref    _cxovf5         ; Overflow handler
                                          5         xref    _cxnan5         ; NAN handler
                                          6         xref    _cxind5         ; Indefinite handler
                                          7         xref    _cxinf5         ; Infinite handler
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          8         xref    _cxzer5         ; Zero handler
          =00000007                       9 PRESHIFT        equ     7
0000'                                    10 mul20_bar:
0000'      B042                          11         cmp.w   d2,d0           ; Y higher precedence?
0002'      6D18                          12         blt.s   mul13           ; - why yes
0004'      B088                          13         cmp.l   a0,d0   ; Test upper mantissa
0006'      6604                          14         bne.s   mul11           ; - NAN
0008'      4A81                          15         tst.l   d1              ; Test lower mantissa
000A'      6704                          16         beq.s   mul12           ; - INF
000C'                                    17 mul11:
000C'                                    18 donan:
000C'      6000  0000                    19         bra     _cxnan5         ; Process NAN
0010'                                    20 mul12:
0010'      B447                          21         cmp.w   d7,d2           ; Y Exponent NAN or INF?
0012'      6D0E                          22         blt.s   mul14           ; - nope
0014'      B488                          23         cmp.l   a0,d2   ; Test upper mantissa
0016'      6604                          24         bne.s   mul13           ; - INF
0018'      4A83                          25         tst.l   d3              ; Test lower mantissa
001A'      6706                          26         beq.s   mul14           ; - INF
001C'                                    27 mul13:
001C'      2002                          28         move.l  d2,d0           ; Process NAN
001E'      2203                          29         move.l  d3,d1
0020'      60EA                          30         bra.s   mul11
0022'                                    31 mul14:
0022'      4A82                          32         tst.l   d2              ; Test upper Y
0024'      6606                          33         bne.s   mul15           ; - non-zero
0026'      4A83                          34         tst.l   d3              ; Test lower Y
0028'      6700  0000                    35         beq     _cxind5         ; Indefinate
002C'                                    36 mul15:
002C'                                    37 doinf:
002C'      6000  0000                    38         bra     _cxinf5         ; Infinite
0030'                                    39 mul30_bar:
0030'      B488                          40         cmp.l   a0,d2   ; Test Y upper
0032'      6604                          41         bne.s   mul21           ; - NAN
0034'      4A83                          42         tst.l   d3              ; Test Y lower
0036'      6706                          43         beq.s   mul22           ; - INF
0038'                                    44 mul21:
0038'      2002                          45         move.l  d2,d0
003A'      2203                          46         move.l  d3,d1
003C'      60CE                          47         bra     donan
003E'                                    48 mul22:
003E'      4A80                          49         tst.l   d0              ; Test X upper
0040'      66EA                          50         bne.s   doinf           ; - non-zero
0042'      4A81                          51         tst.l   d1              ; Test X lower
0044'      66E6                          52         bne.s   doinf           ; - non-zero
0046'      6000  0000                    53         bra     _cxind5         ; Indefinite result
                                         54         xdef    MIIEEEDPMul
004A'                                    55 MIIEEEDPMul:
004A'      48E7  3F00                    56         movem.l d2-d7,-(a7)     ; Save d2-d7
004E'      3C3C  8000                    57         move.w  #$8000,d6       ; Sign mask
0052'      307C  7FF0                    58         move.w  #$7ff0,a0       ; sign extends
0056'      3E08                          59         move.w  a0,d7           ; Exponent mask
0058'      4840                          60         swap    d0              ; Swap mantissas
005A'      4842                          61         swap    d2
005C'      3800                          62         move.w  d0,d4           ; Isolate sign X
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


005E'      C846                          63         and.w   d6,d4           ; and magnitude X
0060'      B940                          64         eor.w   d4,d0
0062'      CC42                          65         and.w   d2,d6           ; Isolate sign Y
0064'      BD42                          66         eor.w   d6,d2           ; and magnitude Y
0066'      BD44                          67         eor.w   d6,d4           ; Get result sign
0068'                                    68 mul10:
0068'      B047                          69         cmp.w   d7,d0           ; Exponent NAN or INF?
006A'      6C94                          70         bge.s   mul20_bar       ; - yes
006C'                                    71 mul20:
006C'      B447                          72         cmp.w   d7,d2           ; Exponent NAN or INF?
006E'      6CC0                          73         bge.s   mul30_bar       ; - yes
0070'                                    74 mul30:
0070'      3A00                          75         move.w  d0,d5           ; Unpack exponent
0072'      CA47                          76         and.w   d7,d5
0074'      6634                          77         bne.s   mul32           ; - non-zero; jump forward
0076'      4A80                          78         tst.l   d0              ; Test upper mantissa
0078'      6608                          79         bne.s   mul31           ; - non-zero
007A'      4A81                          80         tst.l   d1              ; Test lower mantissa
007C'      6604                          81         bne.s   mul31           ; - non-zero
007E'      6000  0000                    82         bra     _cxzer5
0082'                                    83 mul31:
0082'      6100  0000                    84         bsr     _CXREN5         ; Renormalize zero exponent
0086'      6028                          85         bra.s   mul40
0088'                                    86 mul42_bar:
0088'      4A82                          87         tst.l   d2              ; Test upper mantissa
008A'      6608                          88         bne.s   mul41           ; - non-zero
008C'      4A83                          89         tst.l   d3              ; Test lower mantissa
008E'      6604                          90         bne.s   mul41           ; - non-zero
0090'      6000  0000                    91         bra     _cxzer5         ; Return signed zero
0094'                                    92 mul41:
0094'      C142                          93         exg     d0,d2           ; Switch X,Y for denormalize
0096'      C343                          94         exg     d1,d3
0098'      CB47                          95         exg     d5,d7
009A'      6100  0000                    96         bsr     _CXREN5         ; Renormalize zero exponent
009E'      C142                          97         exg     d0,d2           ; Switch back
00A0'      C343                          98         exg     d1,d3
00A2'      CB47                          99         exg     d5,d7
00A4'      6014                         100         bra.s   mul50
00A6'                                   101 doovf:
00A6'      6000  0000                   102         bra     _cxovf5
00AA'                                   103 mul32:
00AA'      BB40                         104         eor.w   d5,d0           ; Get mantissa
00AC'      0A40  0010                   105         eor.w   #$0010,d0       ; Add hidden bit
00B0'                                   106 mul40:
00B0'      CE42                         107         and.w   d2,d7           ; Get exponent Y
                                        108         ;bne.s  mul42           ; - non-zero
00B2'      67D4                         109         beq.s   mul42_bar       ; - non-zero
00B4'                                   110 mul42:
00B4'      BF42                         111         eor.w   d7,d2           ; Get mantissa
00B6'      0042  0010                   112         or.w    #$0010,d2       ; Add hidden bit
00BA'                                   113 mul50:
00BA'      0445  3FF0                   114         sub.w   #$3ff0,d5       ; Subtract exponent base
00BE'      DA47                         115         add.w   d7,d5
00C0'      69E4                         116         bvs.s   doovf           ; - no overflow
00C2'                                   117 mul51:
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


00C2'      4840                         118         swap    d0              ; Left justify X
00C4'      4842                         119         swap    d2              ; Left justify Y
00C6'                                   120 mul60:
00C6'      2E01                         121         move.l  d1,d7
                                        122 *>      if =    .extend                 ; x2/x3=#0?
00C8'      6600  0084                   123         bne   _if00000
00CC'      EF88                         124                 lsl.l   #PRESHIFT,d0            ; do fast justify
00CE'      2E03                         125                 move.l  d3,d7
                                        126 *>              if =                    ; y2/y3=#0?
00D0'      6628                         127                 bne.s _if00001
00D2'      EF8A                         128                         lsl.l   #PRESHIFT,d2    ; do fast justify
00D4'      3200                         129                         move.w  d0,d1
00D6'      C2C2                         130                         mulu    d2,d1           ; (x1*y1)
00D8'      3E00                         131                         move.w  d0,d7
00DA'      3C02                         132                         move.w  d2,d6
00DC'      4842                         133                         swap    d2              ; y1/y0
00DE'      CEC2                         134                         mulu    d2,d7           ; (y0*x1)
00E0'      4840                         135                         swap    d0              ; x1/x0
00E2'      CCC0                         136                         mulu    d0,d6           ; (y1*x0)
00E4'      DE86                         137                         add.l   d6,d7           ; no carry
00E6'      C0C2                         138                         mulu    d2,d0           ; (x0 * y0)
00E8'      4841                         139                         swap    d1
00EA'      D247                         140                         add.w   d7,d1
00EC'      4247                         141                         clr.w   d7
00EE'      4847                         142                         swap    d7
00F0'      D187                         143                         addx.l  d7,d0
00F2'      4841                         144                         swap    d1
00F4'      6000  0000                   145                         bra     _cxadj5         ; adjust the result
                                        146 *>              else
00F8'      6050                         147                bra.s _if00002
00FA'                                   148 _if00001:
00FA'      EF8A                         149                         lsl.l   #PRESHIFT,d2
00FC'      EF8B                         150                         lsl.l   #PRESHIFT,d3
00FE'      EF9F                         151                         rol.l   #PRESHIFT,d7
0100'      B747                         152                         eor.w   d3,d7
0102'      BF42                         153                         eor.w   d7,d2
0104'                                   154 go_half_fast:
0104'      4840                         155                         swap    d0              ; x1/x0
0106'      3203                         156                         move.w  d3,d1
0108'      C2C0                         157                         mulu    d0,d1           ; y3*x0
010A'      4843                         158                         swap    d3              ; y3/y2
010C'      4840                         159                         swap    d0              ; x0/x1
010E'      3C03                         160                         move.w  d3,d6
0110'      CCC0                         161                         mulu    d0,d6           ; y2*x1
0112'      D286                         162                         add.l   d6,d1           ; z2/z3 += (y2*x1)
0114'      4241                         163                         clr.w   d1
0116'      4841                         164                         swap    d1
0118'      2C00                         165                         move.l  d0,d6           ; d6 = x0/x1
011A'      4840                         166                         swap    d0              ; x1/x0
011C'      4842                         167                         swap    d2              ; y1/y0
011E'      C6C0                         168                         mulu    d0,d3           ; x0*y2
0120'      D383                         169                         addx.l  d3,d1           ; z2/z3 += (x0*y2)
0122'      3E02                         170                         move.w  d2,d7
0124'      C0C2                         171                         mulu    d2,d0           ; (x0*y0)
0126'      4842                         172                         swap    d2              ; y0/y1
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


0128'      3606                         173                         move.w  d6,d3
012A'      C6C2                         174                         mulu    d2,d3           ; (x1*y1)
012C'      D283                         175                         add.l   d3,d1           ; z2/z3 += (x1*y1)
012E'      4283                         176                         clr.l   d3
0130'      D183                         177                         addx.l  d3,d0
0132'      CEC6                         178                         mulu    d6,d7           ; (x1*y0)
0134'      4846                         179                         swap    d6              ; x1/x0
0136'      CCC2                         180                         mulu    d2,d6           ; (x0*y1)
0138'      DE86                         181                         add.l   d6,d7           ; (x0*y1)+(x1*y0)
013A'      4841                         182                         swap    d1
013C'      D247                         183                         add.w   d7,d1
013E'      4247                         184                         clr.w   d7
0140'      4847                         185                         swap    d7
0142'      D187                         186                         addx.l  d7,d0
0144'      4841                         187                         swap    d1
0146'      6000  0000                   188                         bra     _cxadj5         ; adjust the result
                                        189 *>              endif
014A'                                   190 _if00002:
                                        191 *>      else .extend
014A'      6000  0082                   192                bra   _if00003
014E'                                   193 _if00000:
014E'      EF88                         194                 lsl.l   #PRESHIFT,d0
0150'      EF89                         195                 lsl.l   #PRESHIFT,d1
0152'      EF9F                         196                 rol.l   #PRESHIFT,d7
0154'      B347                         197                 eor.w   d1,d7
0156'      BF40                         198                 eor.w   d7,d0
0158'      2E03                         199                 move.l  d3,d7
                                        200 *>              if =                    ; is y2/y3=#0?
015A'      6608                         201                 bne.s _if00004
015C'      C142                         202                         exg.l   d0,d2
015E'      2601                         203                         move.l  d1,d3
0160'      EF88                         204                         lsl.l   #PRESHIFT,d0    ; quick justify
0162'      60A0                         205                         bra     go_half_fast
                                        206 *>              endif
0164'                                   207 _if00004:
0164'      EF8A                         208                 lsl.l   #PRESHIFT,d2
0166'      EF8B                         209                 lsl.l   #PRESHIFT,d3
0168'      EF9F                         210                 rol.l   #PRESHIFT,d7
016A'      B747                         211                 eor.w   d3,d7
016C'      BF42                         212                 eor.w   d7,d2
016E'      4840                         213                 swap    d0              ; x1/x0
0170'      4842                         214                 swap    d2              ; y1/y0
0172'      3E01                         215                 move.w  d1,d7
0174'      CEC2                         216                 mulu    d2,d7           ; x3*y0
0176'      3C03                         217                 move.w  d3,d6
0178'      CCC0                         218                 mulu    d0,d6           ; y3*x0
017A'      DE86                         219                 add.l   d6,d7
017C'      4247                         220                 clr.w   d7
017E'      4847                         221                 swap    d7              ; (y3*x0)+(x3*y0)  -> z2/z3
0180'      4841                         222                 swap    d1              ; x3/x2
0182'      4843                         223                 swap    d3              ; y3/y2
0184'      4840                         224                 swap    d0              ; x0/x1
0186'      4842                         225                 swap    d2              ; y0/y1
0188'      3C02                         226                 move.w  d2,d6
018A'      CCC1                         227                 mulu    d1,d6           ; x2*y1
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


018C'      4246                         228                 clr.w   d6
018E'      4846                         229                 swap    d6
0190'      DE86                         230                 add.l   d6,d7           ; z2/z3 += (x2*y1)
0192'      3C03                         231                 move.w  d3,d6
0194'      CCC0                         232                 mulu    d0,d6           ; y2*x1
0196'      4246                         233                 clr.w   d6
0198'      4846                         234                 swap    d6
019A'      DE86                         235                 add.l   d6,d7           ; z2/z3 += (y2*x1)
019C'      2C00                         236                 move.l  d0,d6           ; x0/x1
019E'      4840                         237                 swap    d0              ; x1/x0
01A0'      4842                         238                 swap    d2              ; y1/y0
01A2'      C2C2                         239                 mulu    d2,d1           ; y0*x2
01A4'      D287                         240                 add.l   d7,d1           ; z2/z3 += (y0*x2)
01A6'      C6C0                         241                 mulu    d0,d3           ; x0*y2
01A8'      D283                         242                 add.l   d3,d1           ; z2/z3 += (x0*y2)
01AA'      3E02                         243                 move.w  d2,d7
01AC'      C0C2                         244                 mulu    d2,d0           ; (x0*y0)
01AE'      4842                         245                 swap    d2              ; y0/y1
01B0'      3606                         246                 move.w  d6,d3
01B2'      C6C2                         247                 mulu    d2,d3           ; (x1*y1)
01B4'      D283                         248                 add.l   d3,d1           ; z2/z3 += (x1*y1)
01B6'      4283                         249                 clr.l   d3
01B8'      D183                         250                 addx.l  d3,d0
01BA'      CEC6                         251                 mulu    d6,d7           ; (x1*y0)
01BC'      4846                         252                 swap    d6              ; x1/x0
01BE'      CCC2                         253                 mulu    d2,d6           ; (x0*y1)
01C0'      DE86                         254                 add.l   d6,d7           ; (x0*y1)+(x1*y0)
01C2'      4841                         255                 swap    d1
01C4'      D247                         256                 add.w   d7,d1
01C6'      4247                         257                 clr.w   d7
01C8'      4847                         258                 swap    d7
01CA'      D187                         259                 addx.l  d7,d0
01CC'      4841                         260                 swap    d1
                                        261 *>      endif
01CE'                                   262 _if00003:
01CE'      6000  0000                   263         bra     _cxadj5         ; adjust the result
                                        264         end



No errors found in this Assembly
