MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          1         include "float.i"
                                          1 *******************************************************************************
                                          2 *
                                          3 *       $Header:
                                          4 *
                                          5 *******************************************************************************
                                          6
0000'                                     7         section mathieeedoubbas
                                          8         xref    do_trapv
                                          9         xref    do_div0
                                         10
                                         11 ;ALLOW_TRAPS    equ 1
                                         12
                                         13 ;       overflow trap
                                         14 fptrap  macro
                                         15 ;       overfloat trap
                                         16         ifd ALLOW_TRAPS
                                         17                 ifeq \1-2
                                         18                         bsr     do_trapv
                                         19                 endc
                                         20 ;               underfloat is ignored
                                         21                 ifeq \1-1
                                         22                 endc
                                         23 ; divide by zero
                                         24                 ifeq \1-3
                                         25                         bsr     do_div0
                                         26                 endc
                                         27 ; indefinate trap
                                         28                 ifeq \1-4
                                         29 ;                       bsr     do_trapv
                                         30                 endc
                                         31                 ifne \1-4
                                         32                         ifne \1-1
                                         33                                 ifne \1-2
                                         34                                         ifne \1-3
                                         35                                                 fail
                                         36                                         endc
                                         37                                 endc
                                         38                         endc
                                         39                 endc
                                         40         endc
                                         41         endm
                                         42
                                         43 sdebug  macro
                                         44 ;       move.l  \1,-(sp)
                                         45 ;       move.l  \2,-(sp)
                                         46 ;       addq.l  #8,sp
                                         47         endm
                                         48
                                          2         xref    _cxnrm5         ; Normalize
                                          3         xref    _cxunf5         ; Underflow handler
                                          4         xref    _cxovf5         ; Overflow handler
                                          5         xref    _cxnan5         ; NAN handler
                                          6         xref    _cxind5         ; Indefinite handler
                                          7         xref    _cxinf5         ; Infinite handler
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          8         xref    _cxzer5         ; Zero handler
                                          9         xdef    MIIEEEDPSub
0000'                                    10 MIIEEEDPSub:
0000'      0842  001F                    11         bchg    #31,d2
0004'      6106                          12         bsr.s   add0            ; Subtract operands
0006'      0842  001F                    13         bchg    #31,d2
000A'      4E75                          14         rts
                                         15         xdef MIIEEEDPAdd
000C'                                    16 MIIEEEDPAdd:
000C'                                    17 add0:
000C'      48E7  3F00                    18         movem.l d2-d7,-(a7)     ; Save d2-d7
0010'      307C  0010                    19         move.w  #16,a0          ; preload common constants
0014'      327C  7FF0                    20         move.w  #$7ff0,a1
0018'      4840                          21         swap    d0              ; Swap for unpack
001A'      4842                          22         swap    d2
001C'      3C3C  8000                    23         move.w  #$8000,d6       ; Setup mask
0020'      3E09                          24         move.w  a1,d7
0022'      3800                          25         move.w  d0,d4           ; Get sign(X)
0024'      C846                          26         and.w   d6,d4
0026'      B940                          27         eor.w   d4,d0
0028'      3A00                          28         move.w  d0,d5           ; Get exponent(X)
002A'      CA47                          29         and.w   d7,d5
002C'      BB40                          30         eor.w   d5,d0           ; Get mantissa(X)
002E'                                    31 add2:
002E'      CC42                          32         and.w   d2,d6           ; Get sign(Y)
0030'      BD42                          33         eor.w   d6,d2
0032'      CE42                          34         and.w   d2,d7           ; Get exponent(Y)
0034'      BF42                          35         eor.w   d7,d2           ; Get mantissa(Y)
0036'      BA47                          36         cmp.w   d7,d5           ; compare exponents
0038'      6600  00C0                    37         bne     add40           ; - not equal
003C'                                    38 add10:
003C'      BA49                          39         cmp.w   a1,d5   ; Check for wierd exponent
003E'      6620                          40         bne.s   add14           ; - Regular number
0040'      B042                          41         cmp.w   d2,d0           ; Test NAN precedence
0042'      6D0C                          42         blt.s   add11           ; - precedence(X) < precedence(Y)
0044'      2E00                          43         move.l  d0,d7           ; Mantissa zero?
0046'      8E81                          44         or.l    d1,d7
0048'      660A                          45         bne.s   add12           ; - NAN
004A'      2E02                          46         move.l  d2,d7           ; Mantissa(Y) zero?
004C'      8E83                          47         or.l    d3,d7
004E'      6708                          48         beq.s   add13           ; - INF
0050'                                    49 add11:
0050'      2002                          50         move.l  d2,d0           ; Set to return Y
0052'      2203                          51         move.l  d3,d1
0054'                                    52 add12:
0054'      6000  0000                    53         bra     _cxnan5
0058'                                    54 add13:
0058'      BC44                          55         cmp.w   d4,d6           ; Sign of infinity equal?
005A'      6770                          56         beq.s   add24           ; - yes
005C'      6000  0000                    57         bra     _cxind5         ; - no
                                         58
0060'                                    59 add14:
0060'      4A45                          60         tst.w   d5              ; Zero exponent?
0062'      663E                          61         bne.s   add18           ; - no
0064'      4840                          62         swap    d0              ; Test X mantissa
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


0066'      6624                          63         bne.s   add16           ; - nonzero
0068'      4A81                          64         tst.l   d1
006A'      6620                          65         bne.s   add16           ; - nonzero
006C'      4842                          66         swap    d2              ; Test Y mantissa
006E'      660A                          67         bne.s   add15           ; - nonzero
0070'      4A83                          68         tst.l   d3
0072'      6606                          69         bne.s   add15           ; - nonzero
0074'      C846                          70         and.w   d6,d4           ; Form result sign
0076'      6000  0000                    71         bra     _cxzer5         ; return signed zero
007A'                                    72 add15:
007A'      2002                          73         move.l  d2,d0           ; Restore & return Y
007C'      2203                          74         move.l  d3,d1
007E'      4840                          75         swap    d0
0080'      BD40                          76         eor.w   d6,d0
0082'      BF40                          77         eor.w   d7,d0
0084'      4840                          78         swap    d0
0086'      4CDF  00FC                    79         movem.l (a7)+,d2-d7     ; Restore d2-d7
008A'      4E75                          80         rts
008C'                                    81 add16:
008C'      4842                          82         swap    d2              ; Test Y mantissa
008E'      661C                          83         bne.s   add19           ; - nonzero
0090'      4A83                          84         tst.l   d3
0092'      6618                          85         bne.s   add19           ; - nonzero
0094'      4840                          86         swap    d0              ; Restore X
0096'      B940                          87         eor.w   d4,d0
0098'      BB40                          88         eor.w   d5,d0
009A'      4840                          89         swap    d0
009C'      4CDF  00FC                    90         movem.l (a7)+,d2-d7     ; Restore d2-d7
00A0'      4E75                          91         rts
00A2'                                    92 add18:                  ; put in hidden bit
00A2'      9A48                          93         sub.w   a0,d5
00A4'      D048                          94         add.w   a0,d0
00A6'      D448                          95         add.w   a0,d2
00A8'      4840                          96         swap    d0              ; Unswap mantissas
00AA'      4842                          97         swap    d2
00AC'                                    98 add19:
00AC'      BC44                          99         cmp.w   d4,d6           ; Same sign?
00AE'      6720                         100         beq.s   add30           ; - add
00B0'                                   101 add20:
00B0'      9283                         102         sub.l   d3,d1           ; Subtract LSB
00B2'      660A                         103         bne.s   add21           ; - LSB different
00B4'      9182                         104         subx.l  d2,d0           ; Subtract MSB
00B6'      6608                         105         bne.s   add22           ; - MSB different
00B8'      4CDF  00FC                   106         movem.l (a7)+,d2-d7     ; Restore d2-d7
00BC'      4E75                         107         rts                     ; Return 0
00BE'                                   108 add21:
00BE'      9182                         109         subx.l  d2,d0           ; Subtract MSB
00C0'                                   110 add22:
00C0'      6A06                         111         bpl.s   add23           ; - X >= Y
00C2'      4481                         112         neg.l   d1              ; Change result sign
00C4'      4080                         113         negx.l  d0
00C6'      3806                         114         move.w  d6,d4
00C8'                                   115 add23:
00C8'      6000  0000                   116         bra     _cxnrm5         ; Normalize
00CC'                                   117 add24:
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


00CC'      6000  0000                   118         bra     _cxinf5         ; Handle infinite
                                        119
00D0'                                   120 add30:
00D0'      D283                         121         add.l   d3,d1           ; Add LSB
00D2'      D182                         122         addx.l  d2,d0           ; Add MSB
00D4'      0C80  0020  0000             123         cmp.l   #$00200000,d0   ; Need to shift right?
00DA'      6D0A                         124         blt.s   add31           ; - no
00DC'      E288                         125         lsr.l   #1,d0           ; Shift right
00DE'      E291                         126         roxr.l  #1,d1
00E0'      DA48                         127         add.w   a0,d5   ; Compensate exponent a0==16
00E2'      0C45  7FE0                   128         cmp.w   #$7fe0,d5       ; Test overflow
00E6'                                   129 add31:
00E6'      6504                         130         bcs.s   add32           ; - return value
00E8'      6000  0000                   131         bra     _cxovf5         ; Process overflow
00EC'                                   132 add32:
00EC'      4840                         133         swap    d0              ; Add in exponent
00EE'      D045                         134         add.w   d5,d0
00F0'      8044                         135         or.w    d4,d0
00F2'      4840                         136         swap    d0
00F4'      4CDF  00FC                   137         movem.l (a7)+,d2-d7     ; Restore d2-d7
00F8'      4E75                         138         rts
00FA'                                   139 add40:
00FA'      6E08                         140         bgt.s   add41           ; - X larger
00FC'      C142                         141         exg     d0,d2
00FE'      C343                         142         exg     d1,d3
0100'      C946                         143         exg     d4,d6
0102'      CB47                         144         exg     d5,d7
0104'                                   145 add41:
0104'      BA49                         146         cmp.w   a1,d5   ; Wierd exponent?
0106'      6728                         147         beq.s   add43           ; - yes
0108'      4A47                         148         tst.w   d7              ; Smaller value denormalized?
010A'      6634                         149         bne.s   add45           ; - no
010C'      4842                         150         swap    d2              ; Smaller value zero?
010E'      6610                         151         bne.s   add42           ; - no
0110'      4A83                         152         tst.l   d3
0112'      660C                         153         bne.s   add42           ; - no
0114'      B940                         154         eor.w   d4,d0           ; Put in sign
0116'      BB40                         155         eor.w   d5,d0           ; Put in exponent
0118'      4840                         156         swap    d0
011A'      4CDF  00FC                   157         movem.l (a7)+,d2-d7     ; Restore d2-d7
011E'      4E75                         158         rts                     ; Return larger number
0120'                                   159 add42:
0120'      D683                         160         add.l   d3,d3           ; Shift left
0122'      D582                         161         addx.l  d2,d2
0124'      4A45                         162         tst.w   d5              ; Larger operand normalized?
0126'      661C                         163         bne.s   add46           ; - yes
0128'      4840                         164         swap    d0              ; Unswap mantissa
012A'      D281                         165         add.l   d1,d1           ; Shift left
012C'      D180                         166         addx.l  d0,d0
012E'      6018                         167         bra.s   add50
0130'                                   168 add43:
0130'      4A80                         169         tst.l   d0              ; NAN?
0132'      6608                         170         bne.s   add44           ; - yes
0134'      4A81                         171         tst.l   d1
0136'      6604                         172         bne.s   add44           ; - yes
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


0138'      6000  0000                   173         bra     _cxinf5         ; Handle INF
013C'                                   174 add44:
013C'      6000  0000                   175         bra     _cxnan5         ; Handle NAN
                                        176
0140'                                   177 add45:
0140'      D448                         178         add.w   a0,d2   ; Add hidden bit to smaller
0142'      4842                         179         swap    d2              ; Unswap mantissa
0144'                                   180 add46:
0144'      D048                         181         add.w   a0,d0   ; Add hidden bit to larger
0146'      4840                         182         swap    d0              ; Unswap mantissa
0148'                                   183 add50:
0148'      9E45                         184         sub.w   d5,d7           ; Difference between exponents
014A'      4647                         185         not.w   d7
014C'      E847                         186         asr.w   #4,d7
014E'      0445  0020                   187         sub.w   #$0020,d5       ; Adjust exponent
0152'      D281                         188         add.l   d1,d1           ; Shift LSB, MSB
0154'      D180                         189         addx.l  d0,d0
0156'      BE48                         190         cmp.w   a0,d7           ; Shift 16 first?
0158'      6F30                         191         ble.s   add54           ; - nope
015A'      0C47  0020                   192         cmp.w   #32,d7          ; Shift 0-32 ?
015E'      6F1C                         193         ble.s   add53           ; - yes
                                        194 *>      if #52<d7.w
0160'      0C47  0034                   195         cmp.w #52,d7
0164'      6F04                         196         ble.s _if00000
0166'      3E3C  0034                   197                 move.w  #52,d7
                                        198 *>      endif
016A'                                   199 _if00000:
016A'                                   200 add51:
016A'      2602                         201         move.l  d2,d3           ; Shift right 32
016C'      7400                         202         moveq   #0,d2
016E'      0447  0020                   203         sub.w   #32,d7          ; Decrement shift count
0172'      EEAB                         204         lsr.l   d7,d3           ; Shift right 1-20
0174'      7400                         205         moveq   #0,d2
0176'      BC44                         206         cmp.w   d4,d6           ; Signs equal?
0178'      6658                         207         bne.s   add70           ; - subtract operands
017A'      601E                         208         bra.s   add60
017C'                                   209 add53:
017C'      BE48                         210         cmp.w   a0,d7           ; Shift 16 first?
017E'      6F0A                         211         ble.s   add54           ; - nope
0180'      3602                         212         move.w  d2,d3           ; Shift right 16
0182'      4843                         213         swap    d3
0184'      4242                         214         clr.w   d2
0186'      4842                         215         swap    d2
0188'      9E48                         216         sub.w   a0,d7           ; Decrement shift count
018A'                                   217 add54:
018A'      BC44                         218         cmp.w   d4,d6           ; Signs equal?
018C'      6638                         219         bne.s   add69           ; - subtract operands
018E'      2C02                         220         move.l  d2,d6           ; Shift right 0-16 places
0190'      EEAA                         221         lsr.l   d7,d2
0192'      EEBE                         222         ror.l   d7,d6
0194'      EEAB                         223         lsr.l   d7,d3
0196'      B586                         224         eor.l   d2,d6
0198'      BD83                         225         eor.l   d6,d3
019A'                                   226 add60:
019A'      D283                         227         add.l   d3,d1           ; Do the add
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


019C'      D182                         228         addx.l  d2,d0
019E'      DA48                         229         add.w   a0,d5   ; Adjust exponent
01A0'      E288                         230         lsr.l   #1,d0           ; Shift off guard bit
01A2'      E291                         231         roxr.l  #1,d1
01A4'      0800  0015                   232         btst    #21,d0
                                        233 *>      if <>
01A8'      6706                         234         beq.s _if00001
01AA'      DA48                         235                 add.w   a0,d5   ; Adjust exponent
01AC'      E288                         236                 lsr.l   #1,d0           ; Shift again
01AE'      E291                         237                 roxr.l  #1,d1
                                        238 *>      endif
01B0'                                   239 _if00001:
01B0'                                   240 add61:
01B0'      4840                         241         swap    d0              ; Add in exponent
01B2'      D045                         242         add.w   d5,d0
01B4'      BA49                         243         cmp.w   a1,d5   ; Overflow?
01B6'      640A                         244         bcc.s   add62           ; - yes
01B8'      8044                         245         or.w    d4,d0           ; Add in sign
01BA'      4840                         246         swap    d0
01BC'      4CDF  00FC                   247         movem.l (a7)+,d2-d7     ; Restore d2-d7
01C0'      4E75                         248         rts
01C2'                                   249 add62:
01C2'      6000  0000                   250         bra     _cxovf5         ; Handle overflow
01C6'                                   251 add69:
01C6'      2C02                         252         move.l  d2,d6           ; Shift right 0-16 places
01C8'      EEAA                         253         lsr.l   d7,d2
01CA'      EEBE                         254         ror.l   d7,d6
01CC'      EEAB                         255         lsr.l   d7,d3
01CE'      B586                         256         eor.l   d2,d6
01D0'      BD83                         257         eor.l   d6,d3
01D2'                                   258 add70:
01D2'      9283                         259         sub.l   d3,d1           ; Subtract mantissas
01D4'      9182                         260         subx.l  d2,d0
01D6'      0800  0015                   261         btst    #21,d0
01DA'      6700  0000                   262         beq     _cxnrm5
01DE'      E288                         263         lsr.l   #1,d0           ; Shift right
01E0'      E291                         264         roxr.l  #1,d1
01E2'      DA48                         265         add.w   a0,d5   ; Adjust exponent
01E4'      4840                         266         swap    d0              ; Add in exponent
01E6'      D045                         267         add.w   d5,d0
01E8'      8044                         268         or.w    d4,d0           ; Add sign and return
01EA'      4840                         269         swap    d0
01EC'      4CDF  00FC                   270         movem.l (a7)+,d2-d7     ; Restore d2-d7
01F0'      4E75                         271         rts
                                        272         end



No errors found in this Assembly
