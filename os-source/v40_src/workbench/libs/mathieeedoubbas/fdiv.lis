MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          1         include "float.i"
                                          1 *******************************************************************************
                                          2 *
                                          3 *       $Header:
                                          4 *
                                          5 *******************************************************************************
                                          6
0000'                                     7         section mathieeedoubbas
                                          8         xref    do_trapv
                                          9         xref    do_div0
                                         10
                                         11 ;ALLOW_TRAPS    equ 1
                                         12
                                         13 ;       overflow trap
                                         14 fptrap  macro
                                         15 ;       overfloat trap
                                         16         ifd ALLOW_TRAPS
                                         17                 ifeq \1-2
                                         18                         bsr     do_trapv
                                         19                 endc
                                         20 ;               underfloat is ignored
                                         21                 ifeq \1-1
                                         22                 endc
                                         23 ; divide by zero
                                         24                 ifeq \1-3
                                         25                         bsr     do_div0
                                         26                 endc
                                         27 ; indefinate trap
                                         28                 ifeq \1-4
                                         29 ;                       bsr     do_trapv
                                         30                 endc
                                         31                 ifne \1-4
                                         32                         ifne \1-1
                                         33                                 ifne \1-2
                                         34                                         ifne \1-3
                                         35                                                 fail
                                         36                                         endc
                                         37                                 endc
                                         38                         endc
                                         39                 endc
                                         40         endc
                                         41         endm
                                         42
                                         43 sdebug  macro
                                         44 ;       move.l  \1,-(sp)
                                         45 ;       move.l  \2,-(sp)
                                         46 ;       addq.l  #8,sp
                                         47         endm
                                         48
                                          2         xref    _CXREN5         ; Renormalize number
                                          3         xref    _cxadj5         ; Adjust after mult/divide
                                          4         xref    _cxovf5         ; Overflow handler
                                          5         xref    _cxnan5         ; NAN handler
                                          6         xref    _cxind5         ; Indefinite handler
                                          7         xref    _cxinf5         ; Infinite handler
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          8         xref    _cxzer5         ; Zero handler
                                          9         xdef    MIIEEEDPDiv
0000'                                    10 MIIEEEDPDiv:
0000'      48E7  3F00                    11         movem.l d2-d7,-(a7)     ; Save d2-d7
0004'      3C3C  8000                    12         move.w  #$8000,d6       ; Sign mask
0008'      3E3C  7FF0                    13         move.w  #$7ff0,d7       ; Exponent mask
000C'      3047                          14         move.w  d7,a0           ; will be used again, sign extends also
000E'      4840                          15         swap    d0              ; Swap mantissas
0010'      4842                          16         swap    d2
0012'      3800                          17         move.w  d0,d4           ; Isolate sign X
0014'      C846                          18         and.w   d6,d4           ; and magnitude X
0016'      B940                          19         eor.w   d4,d0
0018'      CC42                          20         and.w   d2,d6           ; Isolate sign Y
001A'      BD42                          21         eor.w   d6,d2           ; and magnitude Y
001C'      BD44                          22         eor.w   d6,d4           ; Get result sign
001E'                                    23 div10:
001E'      B047                          24         cmp.w   d7,d0           ; Exponent NAN or INF?
0020'      6D42                          25         blt.s   div20           ; - nope
0022'      B042                          26         cmp.w   d2,d0           ; Y higher precedence?
0024'      6D18                          27         blt.s   div13           ; - why yes
0026'      B088                          28         cmp.l   a0,d0           ; Test upper mantissa
0028'      6604                          29         bne.s   div11           ; - NAN
002A'      4A81                          30         tst.l   d1              ; Test lower mantissa
002C'      6704                          31         beq.s   div12           ; - INF
002E'                                    32 div11:
002E'      6000  0000                    33         bra     _cxnan5         ; Process NAN
0032'                                    34 div12:
0032'      B447                          35         cmp.w   d7,d2           ; Y Exponent NAN or INF?
0034'      6D14                          36         blt.s   div15           ; - nope
0036'      B488                          37         cmp.l   a0,d2           ; Test upper mantissa
0038'      6604                          38         bne.s   div13           ; - NAN
003A'      4A83                          39         tst.l   d3              ; Test lower mantissa
003C'      6708                          40         beq.s   div14           ; - INF
003E'                                    41 div13:
003E'      2002                          42         move.l  d2,d0           ; Process NAN
0040'      2203                          43         move.l  d3,d1
0042'      6000  0000                    44         bra     _cxnan5
0046'                                    45 div14:
0046'      6000  0000                    46         bra     _cxind5         ; Process indefinite.
004A'                                    47 div15:
004A'      4A82                          48         tst.l   d2              ; Test upper Y
004C'      6612                          49         bne.s   div17           ; - non-zero
004E'      4A83                          50         tst.l   d3              ; Test lower Y
0050'      660E                          51         bne.s   div17           ; - non-zero
0052'                                    52 div16:
                                         53         fptrap  3               ; Divide by zero
                                         53+;       overfloat trap
           False                         53+        ifd ALLOW_TRAPS
                                         53+                ifeq 3-2
0052'                                    53+                        bsr     do_trapv
                                         53+                endc
                                         53+;               underfloat is ignored
                                         53+                ifeq 3-1
                                         53+                endc
                                         53+; divide by zero
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                         53+                ifeq 3-3
0052'                                    53+                        bsr     do_div0
                                         53+                endc
                                         53+; indefinate trap
                                         53+                ifeq 3-4
                                         53+;                       bsr     do_trapv
                                         53+                endc
                                         53+                ifne 3-4
                                         53+                        ifne 3-1
                                         53+                                ifne 3-2
                                         53+                                        ifne 3-3
                                         53+                                                fail
                                         53+                                        endc
                                         53+                                endc
                                         53+                        endc
                                         53+                endc
                                         53+        endc
0052'      2008                          54         move.l  a0,d0   ; Construct INF
0054'      B940                          55         eor.w   d4,d0
0056'      7200                          56         moveq   #0,d1
0058'      4840                          57         swap    d0
005A'      4CDF  00FC                    58         movem.l (sp)+,d2-d7
005E'      4E75                          59         rts
0060'                                    60 div17:
0060'      6000  0000                    61         bra     _cxinf5         ; Infinite
0064'                                    62 div20:
0064'      B447                          63         cmp.w   d7,d2           ; Exponent NAN or INF?
0066'      6D14                          64         blt.s   div30           ; - no
0068'      B488                          65         cmp.l   a0,d2   ; Test Y upper
006A'      6604                          66         bne.s   div21           ; - NAN
006C'      4A83                          67         tst.l   d3              ; Test Y lower
006E'      6708                          68         beq.s   div22           ; - INF
0070'                                    69 div21:
0070'      2002                          70         move.l  d2,d0           ; process NAN
0072'      2203                          71         move.l  d3,d1
0074'      6000  0000                    72         bra     _cxnan5
0078'                                    73 div22:
0078'      6000  0000                    74         bra     _cxzer5         ; Return signed zero
007C'                                    75 div30:
007C'      3A00                          76         move.w  d0,d5           ; Unpack exponent
007E'      CA47                          77         and.w   d7,d5
0080'      661E                          78         bne.s   div33           ; - non-zero
0082'      4A80                          79         tst.l   d0              ; Test upper mantissa
0084'      6614                          80         bne.s   div32           ; - non-zero
0086'      4A81                          81         tst.l   d1              ; Test lower mantissa
0088'      6610                          82         bne.s   div32           ; - non-zero
008A'      4A82                          83         tst.l   d2              ; Test Y upper mantissa
008C'      6608                          84         bne.s   div31           ; - non-zero
008E'      4A83                          85         tst.l   d3              ; Test Y lower mantissa
0090'      6604                          86         bne.s   div31           ; - non-zero
0092'      6000  0000                    87         bra     _cxind5
0096'                                    88 div31:
0096'      6000  0000                    89         bra     _cxzer5         ; Return signed zero
009A'                                    90 div32:
009A'      6100  0000                    91         bsr     _CXREN5         ; Renormalize zero exponent
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


009E'      6006                          92         bra.s   div40
00A0'                                    93 div33:
00A0'      BB40                          94         eor.w   d5,d0           ; Get mantissa
00A2'      0A40  0010                    95         eor.w   #$0010,d0       ; Add hidden bit
00A6'                                    96 div40:
00A6'      CE42                          97         and.w   d2,d7           ; Get exponent Y
00A8'      661C                          98         bne.s   div42           ; - non-zero
00AA'      4A82                          99         tst.l   d2              ; Test upper mantissa
00AC'      6606                         100         bne.s   div41           ; - non-zero
00AE'      4A83                         101         tst.l   d3              ; Test lower mantissa
00B0'      6602                         102         bne.s   div41           ; - non-zero
00B2'      609E                         103         bra.s   div16           ; Zero divide
00B4'                                   104 div41:
00B4'      C142                         105         exg     d0,d2           ; Switch X,Y for denormalize
00B6'      C343                         106         exg     d1,d3
00B8'      CB47                         107         exg     d5,d7
00BA'      6100  0000                   108         bsr     _CXREN5         ; Renormalize zero exponent
00BE'      C142                         109         exg     d0,d2           ; Switch back
00C0'      C343                         110         exg     d1,d3
00C2'      CB47                         111         exg     d5,d7
00C4'      6006                         112         bra.s   div50
00C6'                                   113 div42:
00C6'      BF42                         114         eor.w   d7,d2           ; Get mantissa
00C8'      0A42  0010                   115         eor.w   #$0010,d2       ; Add hidden bit
00CC'                                   116 div50:
00CC'      0447  3FE0                   117         sub.w   #$3fe0,d7       ; Form new exponent
00D0'      9A47                         118         sub.w   d7,d5
00D2'      6804                         119         bvc.s   div51           ; - no overflow
00D4'      6000  0000                   120         bra     _cxovf5         ; Divide overflow
00D8'                                   121 div51:
00D8'      4840                         122         swap    d0              ; Shift X left 4
00DA'      E381                         123         asl.l   #1,d1
00DC'      E390                         124         roxl.l  #1,d0
00DE'      4842                         125         swap    d2              ; Shift Y left 11
00E0'      2E03                         126         move.l  d3,d7
00E2'      7C0B                         127         moveq   #11,d6
00E4'      EDAA                         128         lsl.l   d6,d2
00E6'      EDAB                         129         lsl.l   d6,d3
00E8'      EDBF                         130         rol.l   d6,d7
00EA'      B747                         131         eor.w   d3,d7
00EC'      BF42                         132         eor.w   d7,d2
00EE'      4844                         133         swap    d4              ; Save lsb d4,d5
00F0'      3805                         134         move.w  d5,d4
00F2'      2244                         135         move.l  d4,a1
                                        136         sdebug  d0,d1
                                        136+;       move.l  d0,-(sp)
                                        136+;       move.l  d1,-(sp)
                                        136+;       addq.l  #8,sp
                                        137         sdebug  d2,d3
                                        137+;       move.l  d2,-(sp)
                                        137+;       move.l  d3,-(sp)
                                        137+;       addq.l  #8,sp
00F4'                                   138 div60:
00F4'      4842                         139         swap    d2              ; q0 = x01 % y0
00F6'      80C2                         140         divu    d2,d0
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


00F8'      3800                         141         move.w  d0,d4
00FA'      4841                         142         swap    d1              ; r03 = x01 % y * m3 + x23 * m
00FC'      3001                         143         move.w  d1,d0
00FE'      4241                         144         clr.w   d1
0100'      4842                         145         swap    d2              ; q0 * y1
0102'      3A02                         146         move.w  d2,d5
0104'      CAC4                         147         mulu    d4,d5
0106'      4843                         148         swap    d3              ; q0 * y2
0108'      3C03                         149         move.w  d3,d6
010A'      CCC4                         150         mulu    d4,d6
010C'      4843                         151         swap    d3              ; q0 * y3
010E'      3E03                         152         move.w  d3,d7
0110'      CEC4                         153         mulu    d4,d7
0112'      4847                         154         swap    d7              ; q0 * y13
0114'      DE46                         155         add.w   d6,d7
0116'      4847                         156         swap    d7
0118'      4246                         157         clr.w   d6
011A'      4846                         158         swap    d6
011C'      DD85                         159         addx.l  d5,d6
011E'      9287                         160         sub.l   d7,d1           ; r03 -= q0 * y13
0120'      9186                         161         subx.l  d6,d0
0122'      6400  0008                   162         bcc     div6_end        ; - result >= 0
0126'      5344                         163         subq.w  #1,d4           ; q0 -= 1
0128'      D283                         164         add.l   d3,d1           ; r03 += y03
012A'      D182                         165         addx.l  d2,d0
012C'                                   166 div6_end:
012C'      3F04                         167         move.w  d4,-(sp)        ;save q0 on stack
012E'      4285                         168         clr.l   d5              ;set r4 to 0
0130'                                   169 div70:
                                        170         sdebug  d0,d1
                                        170+;       move.l  d0,-(sp)
                                        170+;       move.l  d1,-(sp)
                                        170+;       addq.l  #8,sp
                                        171         sdebug  d2,d3
                                        171+;       move.l  d2,-(sp)
                                        171+;       move.l  d3,-(sp)
                                        171+;       addq.l  #8,sp
0130'      2C00                         172         move.l  d0,d6           ; q1 = r01 / y0
0132'      4842                         173         swap    d2
0134'      80C2                         174         divu    d2,d0
0136'      6814                         175         bvc.s   div71           ; - no overflow
0138'      4244                         176         clr.w   d4              ; q1 = m % m
013A'      2006                         177         move.l  d6,d0           ; r02 = r03 - m * y02
013C'      9283                         178         sub.l   d3,d1
013E'      4842                         179         swap    d2
0140'      9182                         180         subx.l  d2,d0
0142'      4840                         181         swap    d0
0144'      4841                         182         swap    d1
0146'      3001                         183         move.w  d1,d0
0148'      4241                         184         clr.w   d1
                                        185         sdebug  d0,d1
                                        185+;       move.l  d0,-(sp)
                                        185+;       move.l  d1,-(sp)
                                        185+;       addq.l  #8,sp
014A'      602C                         186         bra.s   div72
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


014C'                                   187 div71:
014C'      3800                         188         move.w  d0,d4           ; r02 = (r01 % y0) * m2 + r23
014E'      4841                         189         swap    d1
0150'      3001                         190         move.w  d1,d0
0152'      4241                         191         clr.w   d1
0154'      4842                         192         swap    d2              ; q1 * y1
0156'      3A02                         193         move.w  d2,d5
0158'      CAC4                         194         mulu    d4,d5
015A'      4843                         195         swap    d3              ; q1 * y2
015C'      3C03                         196         move.w  d3,d6
015E'      CCC4                         197         mulu    d4,d6
0160'      4843                         198         swap    d3              ; q1 * y3
0162'      3E03                         199         move.w  d3,d7
0164'      CEC4                         200         mulu    d4,d7
                                        201
0166'      4847                         202         swap    d7              ; q1 * y13
0168'      DE46                         203         add.w   d6,d7
016A'      4847                         204         swap    d7
016C'      4246                         205         clr.w   d6
016E'      4846                         206         swap    d6
0170'      DD85                         207         addx.l  d5,d6
0172'      9287                         208         sub.l   d7,d1           ; r02 -= q1 * y12
0174'      9186                         209         subx.l  d6,d0
0176'      640E                         210         bcc.s   div7_end        ; - r02 >= 0
0178'                                   211 div72:
0178'      5344                         212         subq.w  #1,d4           ; q1 -= 1
017A'      D283                         213         add.l   d3,d1           ; r02 += y02
017C'      D182                         214         addx.l  d2,d0
017E'      6506                         215         bcs.s   div7_end        ; - r02 >= 0
0180'      5344                         216         subq.w  #1,d4           ; q1 -= 1
0182'      D283                         217         add.l   d3,d1           ; r02 += y02
0184'      D182                         218         addx.l  d2,d0
0186'                                   219 div7_end:
0186'      3F04                         220         move.w  d4,-(sp)        ;save q1 on stack
0188'                                   221 div80:
                                        222         sdebug  d0,d1
                                        222+;       move.l  d0,-(sp)
                                        222+;       move.l  d1,-(sp)
                                        222+;       addq.l  #8,sp
                                        223         sdebug  d2,d3
                                        223+;       move.l  d2,-(sp)
                                        223+;       move.l  d3,-(sp)
                                        223+;       addq.l  #8,sp
0188'      2C00                         224         move.l  d0,d6           ; q2 = r01 / y0
018A'      4842                         225         swap    d2
018C'      80C2                         226         divu    d2,d0
018E'      6812                         227         bvc.s   div81           ; - no overflow
0190'      4244                         228         clr.w   d4              ; q2 = m % m
0192'      2006                         229         move.l  d6,d0           ; r01 = (r02 - m * y01)
0194'      9283                         230         sub.l   d3,d1           ; Dale addition
0196'      4842                         231         swap    d2
0198'      9182                         232         subx.l  d2,d0           ; was sub.w     d2,d0   Dale
019A'      4840                         233         swap    d0
019C'      4841                         234         swap    d1
019E'      3001                         235         move.w  d1,d0
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


01A0'      602C                         236         bra.s   div82
01A2'                                   237 div81:
01A2'      3800                         238         move.w  d0,d4           ; r01 = (r01 % y0) * m + r2
01A4'      4841                         239         swap    d1
01A6'      3001                         240         move.w  d1,d0
01A8'      4241                         241         clr.w   d1
01AA'      4842                         242         swap    d2              ; q1 * y1
01AC'      3A02                         243         move.w  d2,d5
01AE'      CAC4                         244         mulu    d4,d5
01B0'      4843                         245         swap    d3              ; q1 * y2
01B2'      3C03                         246         move.w  d3,d6
01B4'      CCC4                         247         mulu    d4,d6
01B6'      4843                         248         swap    d3              ; q1 * y3
01B8'      3E03                         249         move.w  d3,d7
01BA'      CEC4                         250         mulu    d4,d7
                                        251
01BC'      4847                         252         swap    d7              ; q1 * y13
01BE'      DE46                         253         add.w   d6,d7
01C0'      4847                         254         swap    d7
01C2'      4246                         255         clr.w   d6
01C4'      4846                         256         swap    d6
01C6'      DD85                         257         addx.l  d5,d6
01C8'      9287                         258         sub.l   d7,d1           ; r02 -= q1 * y12
01CA'      9186                         259         subx.l  d6,d0
01CC'      640C                         260         bcc.s   div8_end        ; - r01 >= 0
01CE'                                   261 div82:
01CE'      0444  0001                   262         sub.w   #1,d4           ; q2 -= 1
01D2'      D082                         263         add.l   d2,d0           ; r01 += y01
01D4'      6504                         264         bcs.s   div8_end        ; - r01 >= 0
01D6'      5344                         265         subq.w  #1,d4           ; q2 -= 1
01D8'      D082                         266         add.l   d2,d0           ; r01 += y01
01DA'                                   267 div8_end:
01DA'      3F04                         268         move.w  d4,-(sp)        ;save q2 on stack
01DC'                                   269 div90:
                                        270         sdebug  d0,d1
                                        270+;       move.l  d0,-(sp)
                                        270+;       move.l  d1,-(sp)
                                        270+;       addq.l  #8,sp
                                        271         sdebug  d2,d3
                                        271+;       move.l  d2,-(sp)
                                        271+;       move.l  d3,-(sp)
                                        271+;       addq.l  #8,sp
01DC'      4842                         272         swap    d2              ; q3 = r01 / y0
01DE'      80C2                         273         divu    d2,d0
01E0'      6804                         274         bvc.s   div91
01E2'      7800                         275         moveq   #0,d4           ; q3 = m-1
01E4'      602C                         276         bra.s   div92
01E6'                                   277 div91:                          ; calc last bit of remainder
01E6'      3800                         278         move.w  d0,d4           ; q3 in d4
01E8'      4841                         279         swap    d1
01EA'      3001                         280         move.w  d1,d0           ; r0 = (r01 % y0) *m + r2
01EC'      4241                         281         clr.w   d1
01EE'      4842                         282         swap    d2              ; q1 * y1
01F0'      3A02                         283         move.w  d2,d5
01F2'      CAC4                         284         mulu    d4,d5
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


01F4'      4843                         285         swap    d3              ; q1 * y2
01F6'      3C03                         286         move.w  d3,d6
01F8'      CCC4                         287         mulu    d4,d6
01FA'      4843                         288         swap    d3              ; q1 * y3
01FC'      3E03                         289         move.w  d3,d7
01FE'      CEC4                         290         mulu    d4,d7
                                        291         sdebug  d4,d5
                                        291+;       move.l  d4,-(sp)
                                        291+;       move.l  d5,-(sp)
                                        291+;       addq.l  #8,sp
                                        292         sdebug  d6,d7
                                        292+;       move.l  d6,-(sp)
                                        292+;       move.l  d7,-(sp)
                                        292+;       addq.l  #8,sp
                                        293
0200'      4847                         294         swap    d7              ; q1 * y13
0202'      DE46                         295         add.w   d6,d7
0204'      4847                         296         swap    d7
0206'      4246                         297         clr.w   d6
0208'      4846                         298         swap    d6
020A'      DD85                         299         addx.l  d5,d6
                                        300         sdebug  d0,d1
                                        300+;       move.l  d0,-(sp)
                                        300+;       move.l  d1,-(sp)
                                        300+;       addq.l  #8,sp
                                        301         sdebug  d6,d7
                                        301+;       move.l  d6,-(sp)
                                        301+;       move.l  d7,-(sp)
                                        301+;       addq.l  #8,sp
020C'      9287                         302         sub.l   d7,d1           ; r02 -= q1 * y12
020E'      9186                         303         subx.l  d6,d0
0210'      6404                         304         bcc.s   div9_end        ; - r01 >= 0
0212'                                   305 div92:
0212'      0444  0001                   306         sub.w   #1,d4           ;q3 -= 1
0216'                                   307 div9_end:
0216'      3F04                         308         move.w  d4,-(sp)
0218'                                   309 div100:
0218'      221F                         310         move.l  (sp)+,d1
021A'      201F                         311         move.l  (sp)+,d0
021C'      4840                         312         swap    d0
021E'      4841                         313         swap    d1
0220'      2809                         314         move.l  a1,d4           ; restore d4,d5
0222'      3A04                         315         move.w  d4,d5
0224'      4844                         316         swap    d4
0226'      E381                         317         asl.l   #1,d1
0228'      E390                         318         roxl.l  #1,d0
022A'      6000  0000                   319         bra     _cxadj5
                                        320         end



No errors found in this Assembly
