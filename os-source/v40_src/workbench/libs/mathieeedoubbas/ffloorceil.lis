MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


0000'                                     1         SECTION         mathieeedoubbas
                                          2         xdef    MIIEEEDPFloor,MIIEEEDPCeil
          =80000000                       3 sign    equ     $80000000       sign bit mask
          =0000001F                       4 signb   equ     31              sign bit no.
          =7FFFFFFF                       5 notsign equ     $7fffffff       everything but sign
          =0000                           6 zero    equ     $00000000       IEEE double precision 0.0 (lower half)
          =3FF00000                       7 one     equ     $3FF00000       IEEE double precision 1.0 (lower half)
          =BFF00000                       8 neg_one equ     one+sign        negative one
                                          9         xref    _LVOIEEEDPAdd
                                         10         xref    _LVOIEEEDPFloor
0000'                                    11 MIIEEEDPCeil:
0000'      0840  001F                    12         bchg    #31,d0
0004'      4EAE  0000                    13         jsr     _LVOIEEEDPFloor(a6)
                                         14 *>      if d0=#0.l
0008'      4A80                          15         tst.l d0
000A'      6604                          16         bne.s _if00000
000C'      4A81                          17                 tst.l   d1
000E'      6704                          18                 beq.s   QUICKZ  ; do not make -0.0
                                         19 *>      endif
0010'                                    20 _if00000:
0010'      0840  001F                    21         bchg    #31,d0
0014'      4E75                          22 QUICKZ: rts
0016'                                    23 MQUICKZ:
0016'      4281                          24         clr.l   d1
0018'      4E75                          25         rts
001A'                                    26 nearzero:
                                         27 *>      if (sp)<#0.w
001A'      4A57                          28         tst.w (sp)
001C'      6C08                          29         bge.s _if00001
001E'      203C  BFF0  0000              30                 move.l  #neg_one,d0     ; return -1.0
                                         31 *>      else
0024'      6002                          32                bra.s _if00002
0026'                                    33 _if00001:
0026'      4280                          34                 clr.l   d0      ; return 0.0
                                         35 *>      endif
0028'                                    36 _if00002:
0028'      4281                          37         clr.l   d1
002A'      508F                          38         addq.l  #8,sp
002C'      4E75                          39         rts
002E'                                    40 MIIEEEDPFloor:
002E'      4A80                          41         tst.l   d0              ; is it a zero?
0030'      67E4                          42         beq     MQUICKZ         ; yup, just return
0032'      2F01                          43         move.l  d1,-(sp)        ; operate on copy on stack
0034'      2F00                          44         move.l  d0,-(sp)
0036'      4840                          45         swap    d0
0038'      0240  7FF0                    46         and.w   #$7ff0,d0       ; extract exponent
003C'      67DC                          47         beq     nearzero        ; unnormalized?
003E'      E840                          48         asr.w   #4,d0           ; align to work with it
0040'      0440  03FF                    49         sub.w   #1023,d0        ; unbias it
0044'      6DD4                          50         blt     nearzero        ; range is -1.0 < x < 1.0
                                         51 *>      if #52>d0.w     ; any fraction bits to eliminate?
0046'      0C40  0034                    52         cmp.w #52,d0
004A'      6C58                          53         bge.s _if00003
004C'      4440                          54                 neg.w   d0
004E'      0640  0034                    55                 add.w   #52,d0  ; how many bits to clear
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                         56                                 ; starting from right end
0052'      2057                          57                 move.l  (sp),a0
0054'      226F  0004                    58                 move.l  4(sp),a1
                                         59 *>              if #32<=d0.w
0058'      0C40  0020                    60                 cmp.w #32,d0
005C'      6D12                          61                 blt.s _if00004
005E'      42AF  0004                    62                         clr.l   4(sp)   ; zap 32 bits right away
0062'      0440  0020                    63                         sub.w   #32,d0
0066'      E548                          64                         lsl.w   #2,d0   ; access a table
0068'      203B  0040                    65                         move.l  table(PC,d0.w),d0
006C'      C197                          66                         and.l   d0,(sp)
                                         67 *>              else    only have to clear last word
006E'      600A                          68                bra.s _if00005
0070'                                    69 _if00004:
0070'      E548                          70                         lsl.w   #2,d0   ; access a table
0072'      203B  0036                    71                         move.l  table(PC,d0.w),d0
0076'      C1AF  0004                    72                         and.l   d0,4(sp)
                                         73 *>              endif
007A'                                    74 _if00005:
          =00000001                      75 WORKING equ 1
                                         76 *>              if (sp)<#0.w
007A'      4A57                          77                 tst.w (sp)
007C'      6C26                          78                 bge.s _if00006
                                         79 *>                      if (sp)=a0.l
007E'      B1D7                          80                         cmp.l (sp),a0
0080'      6608                          81                         bne.s _if00007
                                         82 *>                              if 4(sp)=a1.l
0082'      B3EF  0004                    83                                 cmp.l 4(sp),a1
0086'      6602                          84                                 bne.s _if00008
0088'      601A                          85                                         bra.s   no_change
                                         86 *>                              endif
008A'                                    87 _if00008:
                                         88 *>                      endif
008A'                                    89 _if00007:
008A'      201F                          90                         move.l  (sp)+,d0
008C'      221F                          91                         move.l  (sp)+,d1
008E'      48E7  3000                    92                         movem.l d2/d3,-(sp)     ; save these away
0092'      243C  BFF0  0000              93                         move.l  #neg_one,d2
0098'      4283                          94                         clr.l   d3
009A'      4EAE  0000                    95                         jsr     _LVOIEEEDPAdd(a6)
009E'      4CDF  000C                    96                         movem.l (sp)+,d2/d3     ; restore temps
00A2'      4E75                          97                         rts             ; stack already ok
                                         98 *>              endif
00A4'                                    99 _if00006:
00A4'                                   100 no_change:
                                        101 *>      endif
00A4'                                   102 _if00003:
00A4'      201F                         103         move.l  (sp)+,d0
00A6'      221F                         104         move.l  (sp)+,d1
00A8'      4E75                         105         rts
00AA'                                   106 table:                          ;used to clear fraction bits
00AA'      FFFF  FFFF                   107         dc.l    $ffffffff
00AE'      FFFF  FFFE                   108         dc.l    $fffffffe
00B2'      FFFF  FFFC                   109         dc.l    $fffffffc
00B6'      FFFF  FFF8                   110         dc.l    $fffffff8
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


00BA'      FFFF  FFF0                   111         dc.l    $fffffff0
00BE'      FFFF  FFE0                   112         dc.l    $ffffffe0
00C2'      FFFF  FFC0                   113         dc.l    $ffffffc0
00C6'      FFFF  FF80                   114         dc.l    $ffffff80
00CA'      FFFF  FF00                   115         dc.l    $ffffff00
00CE'      FFFF  FE00                   116         dc.l    $fffffe00
00D2'      FFFF  FC00                   117         dc.l    $fffffc00
00D6'      FFFF  F800                   118         dc.l    $fffff800
00DA'      FFFF  F000                   119         dc.l    $fffff000
00DE'      FFFF  E000                   120         dc.l    $ffffe000
00E2'      FFFF  C000                   121         dc.l    $ffffc000
00E6'      FFFF  8000                   122         dc.l    $ffff8000
00EA'      FFFF  0000                   123         dc.l    $ffff0000
00EE'      FFFE  0000                   124         dc.l    $fffe0000
00F2'      FFFC  0000                   125         dc.l    $fffc0000
00F6'      FFF8  0000                   126         dc.l    $fff80000
00FA'      FFF0  0000                   127         dc.l    $fff00000
00FE'      FFE0  0000                   128         dc.l    $ffe00000
0102'      FFC0  0000                   129         dc.l    $ffc00000
0106'      FF80  0000                   130         dc.l    $ff800000
010A'      FF00  0000                   131         dc.l    $ff000000
010E'      FE00  0000                   132         dc.l    $fe000000
0112'      FC00  0000                   133         dc.l    $fc000000
0116'      F800  0000                   134         dc.l    $f8000000
011A'      F000  0000                   135         dc.l    $f0000000
011E'      E000  0000                   136         dc.l    $e0000000
0122'      C000  0000                   137         dc.l    $c0000000
0126'      8000  0000                   138         dc.l    $80000000
                                        139       end



No errors found in this Assembly
