MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          1         include "float.i"
                                          1 *******************************************************************************
                                          2 *
                                          3 *       $Header:
                                          4 *
                                          5 *******************************************************************************
                                          6
0000'                                     7         section mathieeedoubbas
                                          8         xref    do_trapv
                                          9         xref    do_div0
                                         10
                                         11 ;ALLOW_TRAPS    equ 1
                                         12
                                         13 ;       overflow trap
                                         14 fptrap  macro
                                         15 ;       overfloat trap
                                         16         ifd ALLOW_TRAPS
                                         17                 ifeq \1-2
                                         18                         bsr     do_trapv
                                         19                 endc
                                         20 ;               underfloat is ignored
                                         21                 ifeq \1-1
                                         22                 endc
                                         23 ; divide by zero
                                         24                 ifeq \1-3
                                         25                         bsr     do_div0
                                         26                 endc
                                         27 ; indefinate trap
                                         28                 ifeq \1-4
                                         29 ;                       bsr     do_trapv
                                         30                 endc
                                         31                 ifne \1-4
                                         32                         ifne \1-1
                                         33                                 ifne \1-2
                                         34                                         ifne \1-3
                                         35                                                 fail
                                         36                                         endc
                                         37                                 endc
                                         38                         endc
                                         39                 endc
                                         40         endc
                                         41         endm
                                         42
                                         43 sdebug  macro
                                         44 ;       move.l  \1,-(sp)
                                         45 ;       move.l  \2,-(sp)
                                         46 ;       addq.l  #8,sp
                                         47         endm
                                         48
                                          2         xdef    _cxnrm5         ; Double Normalize
                                          3         xref    _CXUNF5         ; Underflow handler
                                          4         xref    _CXOVF5         ; Overflow handler
                                          5         xref    _CXNAN5         ; NAN handler
                                          6         xref    _CXIND5         ; Indefinite handler
                                          7         xref    _CXINF5         ; Infinite handler
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


                                          8         xref    _CXZER5         ; Zero handler
0000'                                     9 _cxnrm5:
0000'                                    10 norm:
0000'      0C80  0000  0020              11         cmp.l   #$20,d0         ; 16 bit normalize?
0006'      6C30                          12         bge.s   norm10          ; - nope
0008'      4840                          13         swap    d0              ; Do 16 bit shift
000A'      4841                          14         swap    d1
000C'      3001                          15         move.w  d1,d0
000E'      4241                          16         clr.w   d1
0010'      0445  0100                    17         sub.w   #16*16,d5       ; Decrement exponent
0014'      6CEA                          18         bge.s   norm            ; - no underflow
0016'      6062                          19         bra.s   norm20          ; Negative exponent
0018'                                    20 _CXTAB5:
0018'      0504  0303  0202  0202        21         dc.b    5,4,3,3,2,2,2,2,1,1,1,1,1,1,1,1
           0101  0101  0101  0101
0028'      0000  0000  0000  0000        22         dc.b    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
           0000  0000  0000  0000
0038'                                    23 norm10:
0038'      7600                          24         moveq   #0,d3           ; Initialize shift count
003A'      0C80  0000  2000              25         cmp.l   #$2000,d0       ; 8 bit normalize
0040'      6C04                          26         bge.s   norm11          ; - nope
0042'      E188                          27         lsl.l   #8,d0           ; Shift d0
0044'      5043                          28         addq.w  #8,d3           ; Adjust count
0046'                                    29 norm11:
0046'      4840                          30         swap    d0              ; Swap for convenience
0048'      4A40                          31         tst.w   d0              ; 4 bit normalize
004A'      6604                          32         bne.s   norm12          ; - nope
004C'      E998                          33         rol.l   #4,d0           ; Shift d0
004E'      5843                          34         addq.w  #4,d3           ; Adjust count
0050'                                    35 norm12:
0050'      7400                          36         moveq   #0,d2           ; Get final shift count
0052'      143B  00C4                    37         move.b  _CXTAB5(d0.w),d2
0056'      E5B8                          38         rol.l   d2,d0           ; Do rotate
0058'      D642                          39         add.w   d2,d3
005A'      4840                          40         swap    d0
005C'      2401                          41         move.l  d1,d2           ; Shift left by saved count
005E'      E7A9                          42         lsl.l   d3,d1
0060'      E7BA                          43         rol.l   d3,d2
0062'      B342                          44         eor.w   d1,d2
0064'      B540                          45         eor.w   d2,d0
0066'      E94B                          46         lsl.w   #4,d3           ; Compute exponent
0068'      9A43                          47         sub.w   d3,d5
006A'      6D0E                          48         blt.s   norm20          ; - negative exponent
006C'      4840                          49         swap    d0              ; Add in exponent and sign
006E'      D045                          50         add.w   d5,d0
0070'      8044                          51         or.w    d4,d0
0072'      4840                          52         swap    d0
0074'      4CDF  00FC                    53         movem.l (sp)+,d2-d7
0078'      4E75                          54         rts
007A'                                    55 norm20:
007A'      4445                          56         neg.w   d5              ; Get denorm shift count
007C'      E84D                          57         lsr.w   #4,d5
007E'      2400                          58         move.l  d0,d2           ; Shift right
0080'      EAA8                          59         lsr.l   d5,d0
0082'      EABA                          60         ror.l   d5,d2
MC68000 ASSEMBLER VERSION 11.183                                                                                                   

   LOC              OBJECT             STMT            SOURCE STATEMENT


0084'      EAA9                          61         lsr.l   d5,d1
0086'      B182                          62         eor.l   d0,d2
0088'      B581                          63         eor.l   d2,d1
008A'      4840                          64         swap    d0              ; Form return operand
008C'      B940                          65         eor.w   d4,d0
008E'      4840                          66         swap    d0
0090'      4CDF  00FC                    67         movem.l (sp)+,d2-d7
0094'      4E75                          68         rts
                                         69         end



No errors found in this Assembly
