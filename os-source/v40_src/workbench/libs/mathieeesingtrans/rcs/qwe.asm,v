head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     90.04.08.01.29.48;  author dale;  state Exp;
branches ;
next     ;


desc
@
@



1.1
log
@Initial revision
@
text
@;  3-26-90 newer cordic algorithm from Al Aburto

; new algorithm from "Collected Algorithms of the ACM"
; Algorthim 650: Efficient Square Root Implementation
; on the 68000
; Kenneth C. Johnson
; sorry, I did not type in the comments if there were any.
; You will need to look it up yourself if there are problems.

******* mathieeesingtrans.library/IEEESPSqrt ********************************
*
*   NAME
*	IEEESPSqrt -- compute the square root of a number
*
*   SYNOPSIS
*	  x   = IEEESPSqrt(  y  );
*	 d0 	             d0
*
*	float	x,y;
*
*   FUNCTION
*	Compute square root of y in IEEE single precision
*
*   INPUTS
*	y - IEEE single precision floating point value
*
*   RESULT
*	x - IEEE single precision floating point value
*
*   BUGS
*
*   SEE ALSO
**************************************************************************/

********************* SWFP_SPSqrt.asm ***********************************
*************************************************************************
*** Program:  SWFP_SPSqrt.asm
*** Function: Computes in Software the IEEESP Sqrt(x), where 'x'
***           is an IEEE Format Single Precision Floating-Point number.
***
*** Date:     23 Nov 1988 --- Initial Version.
***           10 Oct 1989 --- Revised program so it exits quicker on
***                           x = +0.0 .
***           12 Oct 1989 --- Revised program so that it returns NAN
***                           ($7F880000) when x < 0.0  (even -0.0).
***
*** By:       Alfred A. Aburto Jr.
***           3016 Forrester Court
***           San Diego, Calif, 92123
***           (619) 553-1495 (Work)
***           (619) 278-8521 (Home)
***
*** Input:    IEEESP x in D0.
*** Output:   IEEESP sqrt(x) in D0.
***
*** Bugs:
***           (a) Zero is defined with Exponent = 0, AND the Mantissa = 0,
***               with the Sign = 0 (Positive) or 1 (Negative).  I exit
***               the program whenever x is negative (even -0.0) and I just
***               return NAN as $7F880000.  +0.0 is detected by testing
***               the ENTIRE IEEESP FP Word for zero and I just exit
***               right away on +0.0.  Perhaps I should just test the
***               Exponent for zero and ignore the Mantissa?  The problem
***               is (since I test the entire FF Word for Zero) that
***               things like x = $00400000 will fall through and be
***               calculated erroneously. These are the so-called
***               'denormalized numbers' and the program does nothing
***               to handle them at this time --- it could though ...
***
*** Timing (microseconds) for 'JSR SWFP_SPSqrt':
***
***                      68020 14.32 MHz     68000  7.16 MHz    Error
***                     32-bit Mem,ICache       16-bit Mem
*** SPSqrt( x < 0.0)         2.4 usec            10.2 usec       ---
*** SPSqrt( 0.0 )            2.3 usec            10.5 usec       0.0
*** SPSqrt( 1.0 )            7.8 usec            30.6 usec       0.0
*** SPSqrt( 2**N ), N Even  10.6 usec            47.6 usec       0.0
*** SPSqrt( 2**N ), N Odd   13.0 usec            52.6 usec       0.0
***
*** Special Near Integer Cases Like:
*** SPSqrt( 3.9999 )        17.0 usec            64.6 usec
***
*** All Other Non-Special Cases:
*** SPSqrt( 3.9998 )        35.4 usec           135.6 usec
*** SPSqrt( pi )            35.8 usec           151.0 usec
*** SPSqrt( e )             35.4 usec           152.6 usec
*** SPSqrt( 5.0 )           35.6 usec           154.2 usec
***
*************************************************************************
***
NAN:	move.l	d3,d0	; sqrt(nan)=nan sqrt(inf)=inf
        MOVEM.L  (A7)+,D3-D5
	rts
nonnorm:
;	enter d0 = 0 (0 exponent)
;	enter d1 = mantissa
	moveq	#1,d3
	move.l	d3,d0
	repeat
		sub.w	d3,d0
		add.l	d1,d1
		btst	#23,d1
	until <>
	lsl.l	#8,d1
	bra normal
Sqrt_Neg:
	add.l	d0,d0	; check for -0.0
	beq.s	Sqrt_Zero
	MOVE.L   #$7F880000,D0
exit:
Sqrt_Zero:  RTS

peek	macro
;	move.l	\1,-(sp)
;	addq.l	#4,sp
	endm


	xdef	_rsqrt
_rsqrt:	move.l	4(sp),d0	; C interface
*				; fall into the real routine

*************************************************************************
	xdef	MIIEEESPSqrt
MIIEEESPSqrt:
SWFP_SPSqrt:
            MOVE.L   D0,D1
            BEQ.S    Sqrt_Zero            ;Yes, Just Exit then.
	bmi.s	Sqrt_Neg

            MOVEM.L  D3-D5,-(A7)

	move.l	#$7f800000,d3
	and.l	d3,d0
	beq.s	nonnorm
	cmp.l	d3,d0
	beq.s	NAN

	move.l	#$007FFFFF,d4
	and.l	d4,d1
	moveq    #1,d5		(pwr2 + e)
	cmp.l    d5,d1
        BLE      Sqrt_PTwo            ;Yes.


            LSL.L    #$08,D1              ;Mantissa in D1.
            BSET.L   #$001F,D1            ;Set the upper bit.

            SWAP     D0
            ROR.L    #$07,D0
;           ANDI.L   #$000000FF,D0        ;e (in the lower byte).
normal:
	moveq	#$7e,d5
            SUB.W   d5,D0            ;e - bias + 1

            BTST.L   #$0000,D0            ;e - bias + 1 Even?
            BEQ.S    S901                 ;Yes.

            ADDQ.W   #$01,D0              ;e - bias + 2 (Its Even Now).
            LSR.L    #$01,D1              ;Adjust Mantissa too.

S901:       ASR.W    #$01,D0              ;Exponent / 2.
            ADD.W   d5,D0            ;Final Exponent.

            CMPI.L   #$FFFE0000,D1        ;Check for near integer number.
                                          ;Note first 9-bits not part of the
                                          ;Original Mantissa.
            BCS.S    S902                 ;Nope.

            MOVE.L   D1,D3                ;Special case, near integer number.
            LSL.L    #$01,D3              ;set the x-bit and
            BRA.S      S904                 ;skip to end of program.

S902:       MOVEQ.L  #$00,D4              ;Note: f = fu : fl
	peek d1
            MOVE.W   #$9715,D4            ;B = INT( 0.59016 * 65536 )
            SWAP     D1                   ;Setup for B * fu.
            MULU.W   D1,D4                ;B * fu
	peek d4
            SWAP     D1                   ;f
            SWAP     D4                   ;Setup for A + B * fu.
            ADDI.W   #$6AD5,D4            ;A = INT( 0.41713 * 65536 )
	peek d4
                                          ;y0 = A + B * fu  in lower word.
                                          ;Only about 3 bits accuracy here.
            BCC.S    S903
            MOVEQ.L   #-1,D4            ;Set all bits in this case.

S903:       MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y0
	peek d4
	peek d5
            ADD.W    D5,D4                ;y0 + f / y0
	peek d4
            ROXR.W   #$01,D4              ;y1 = ( y0 + f / y0 ) / 2
	peek d4
                                          ;Minimum of 7-bits accuracy now.

            MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y1
	peek d5
            ADD.W    D5,D4                ;y1 + f / y1
	peek d4
            ROXR.W   #$01,D4              ;y2 = ( y1 + f / y1 ) / 2
;	clr.w	d3
;	addx.w	d3,d4		; round up on last shift
	peek d4
                                          ;14 to 15-bits accuracy now. I
                                          ;took no special steps to preserve
                                          ;15-bits in all cases.

            MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y2
	peek d5
            MOVE.W   D5,D1                ;f / y2.
            CLR.W    D5                   ;Clear old quotient so we can
                                          ;do another divide by y2 on the
                                          ;Remainder.

            DIVU.W   D4,D5                ;Remainder / y2. Lower word of
	peek d5
                                          ;sqrt(f).

            ADD.W    D4,D1                ;y2 + f / y2. sqrt(f) Upper word.
	peek d1
            SWAP     D1
            MOVE.W   D5,D1                ;sqrt(f). 29 to 31-bits accuracy
	peek d1
                                          ;but we only need 23-bits. 

S904:       CLR.W    D3                   ;Dummy holder of the x-bit.
            ADDI.L   #$00000100,D1        ;Round up the result since we
	peek d1
                                          ;have 29 to 31-bits accuracy,
                                          ;but we only need 23-bits.

            ADDX.W   D3,D0                ;Adjust Exponent if necessary.
	peek d0
            ANDI.W   #$FE00,D1            ;Clear lower 9-bits so we can
	peek d1
                                          ;put in the sign (0) bit and the
                                          ;Exponent.
            OR.W     D0,D1                ;Set the sign and Exponent.
	peek d1
            SWAP     D1
	peek d1
            ROL.L    #$07,D1
	peek d1
            MOVE.L   D1,D0                ;Final result in D0.

            MOVEM.L  (A7)+,D3-D5
            RTS


Sqrt_PTwo:
            CMPI.L   #$3F800000,D0        ;x = 1.0 ?
            BEQ.S      Sqrt_One             ;Yes, Just Return Then.

            SWAP     D0
            LSR.L    #$07,D0              ;e = Biased Exponent.
            SUBI.W   #$007F,D0            ;g = e - bias = Exponent.

            BTST.L   #$0000,D0            ;Test Exponent LSB.
            BNE.S      Exp_Odd              ;Exponent is Odd.
                                          ;Exponent is Even.
Exp_Even:
            ASR.W    #$01,D0              ;g --> g / 2 , Since g is Even.
            ADDI.W   #$007F,D0            ;e = g + bias.
            LSL.L    #$07,D0
            SWAP     D0                   ;SPSqrt(2**N), N Even.
            MOVEM.L  (A7)+,D3-D5
            RTS

Exp_Odd:
            ADDI.W   #$0001,D0            ;g --> g + 1  , Makes it Even.
            ASR.W    #$01,D0              ;( g + 1 ) / 2
            MOVE.L   D0,D1
            MOVE.L   #$04F33F35,D0        ;SPSqrt(0.5) pre-SWAP'd.
            MOVE.L   #$6A00007E,D3        ;#$00003F35  pre-ROR.L'd by 7.
            ADD.W    D1,D3                ;Fix-up the Exponent.
            ROL.L    #$07,D3
            MOVE.W   D3,D0
            SWAP     D0
Sqrt_One:   MOVEM.L  (A7)+,D3-D5
            RTS

***************** End of SWFP_SPSqrt.asm Code ***************************

	end
@
