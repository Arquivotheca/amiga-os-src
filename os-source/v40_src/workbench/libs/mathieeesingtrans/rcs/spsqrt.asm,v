head     36.5;
branch   ;
access   ;
symbols  V37_1:36.5 V36_20:36.5 V36_21:36.5 V36_13:36.1 V36_12:36.1 V36_7:36.0;
locks    ; strict;
comment  @*   @;


36.5
date     90.04.11.02.25.25;  author dale;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.11.02.20.57;  author dale;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.08.01.30.32;  author dale;  state Exp;
branches ;
next     36.2;

36.2
date     90.04.05.23.02.07;  author dale;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.17.21.32.05;  author dale;  state Exp;
branches ;
next     36.0;

36.0
date     89.06.05.15.46.25;  author dale;  state Exp;
branches ;
next     ;


desc
@@


36.5
log
@comment changes
@
text
@;  3-26-90 newer cordic algorithm from Al Aburto

******* mathieeesingtrans.library/IEEESPSqrt ********************************
*
*   NAME
*	IEEESPSqrt -- compute the square root of a number
*
*   SYNOPSIS
*	  x   = IEEESPSqrt(  y  );
*	 d0 	             d0
*
*	float	x,y;
*
*   FUNCTION
*	Compute square root of y in IEEE single precision
*
*   INPUTS
*	y - IEEE single precision floating point value
*
*   RESULT
*	x - IEEE single precision floating point value
*
*   BUGS
*
*   SEE ALSO
**************************************************************************/

********************* SWFP_SPSqrt ***************************************
*************************************************************************
*** Program:  SWFP_SPSqrt.asm
*** Function: Computes in Software the IEEESP Sqrt(x), where 'x'
***           is an IEEE Format Single Precision Floating-Point number.
***
*** INPUT:    D0, an IEEESP floating-point number.
***
*** OUTPUT:   D0 = Sqrt(D0), an IEEESP floating-point number.
***
*** Date:     23 Nov 1988 --- Initial Version.
***           10 Oct 1989 --- Revised program so it exits quicker on
***                           x = +0.0 .
***           12 Oct 1989 --- Revised program so that it returns NAN
***                           ($7F880000) when x < 0.0  (even -0.0).
***           30 Mar 1990 --- Revised program to handle case where
***                           SQRT( 2 ** e * (1.0 + epsilon) )   =
***                           2 ** (e/2) * SQRT( 1.0 + epsilon ) =
***                           2 ** (e/2) to first order where epsilon
***                           is the least significant bit of mantissa.
***           08 Apr 1990 --- Revised program to not round up for numbers in
***                           the range of $XX7FFE00 through $XX7FFFFF! I
***                           did this to bring this results in line with
***                           the 68881/68882 results. Now, for example
***                           Sqrt($3F7FFFFF) = $3F7FFFFF instead of the
***                           previous result of $3F800000.  Note: these are
***                           near power of two numbers and we compute them
***                           quickly.
*** Dale Changes:
***		sqrt(-0.0) is 0.0
***		denormalized numbers are handled properly now.
***		   They are normalized and the sqrted.
***		Changed some register usage to speed up abit.
***		Handles NAN and INF properly
***		sped up exponent calculation a bit
***		Many modifications to speed up pieces.
***		dropped usage to 4 data registers, now can save
***		them in address registers while working
***
*** By:       Alfred A. Aburto Jr.
***           3016 Forrester Court
***           San Diego, Calif, 92123
***           (619) 553-1495 (Work)
***           (619) 278-8521 (Home)
***
*** Input:    IEEESP x in D0.
*** Output:   IEEESP sqrt(x) in D0.
***
*** Bugs:
***
*** Following timings are from initial version.
*** Timing (microseconds) for 'JSR SWFP_SPSqrt':
***
***                      68020 14.32 MHz     68000  7.16 MHz    Error
***                     32-bit Mem,ICache       16-bit Mem
*** SPSqrt( x < 0.0)         2.4 usec            10.2 usec       ---
*** SPSqrt( 0.0 )            2.3 usec            10.5 usec       0.0
*** SPSqrt( 1.0 )            7.8 usec            30.6 usec       0.0
*** SPSqrt( 2**N ), N Even  10.6 usec            47.6 usec       0.0
*** SPSqrt( 2**N ), N Odd   13.0 usec            52.6 usec       0.0
***
*** Special Near Integer Cases Like:
*** SPSqrt( 3.9999 )        17.0 usec            64.6 usec
***
*** All Other Non-Special Cases:
*** SPSqrt( 3.9998 )        35.4 usec           135.6 usec
*** SPSqrt( pi )            35.8 usec           151.0 usec
*** SPSqrt( e )             35.4 usec           152.6 usec
*** SPSqrt( 5.0 )           35.6 usec           154.2 usec
***
*************************************************************************
***
NAN:	move.l	d1,d0	; sqrt(nan)=nan sqrt(inf)=inf
	move.l	a0,d4
	move.l	a1,d5
	rts
nonnorm:
;	enter d0 = 0 (0 exponent)
;	enter d1 = mantissa
	moveq	#1,d5
	move.l	d5,d0
	repeat
		sub.w	d5,d0
		add.l	d1,d1
		btst	#23,d1
	until <>
	lsl.l	#8,d1
	bra normal
Sqrt_Neg:
	add.l	d0,d0	; check for -0.0
	beq.s	Sqrt_Zero
	MOVE.L   #$7F880000,D0	; create NAN
exit:
Sqrt_Zero:  RTS

peek	macro
;	move.l	\1,-(sp)
;	addq.l	#4,sp
	endm


	xdef	_rsqrt
_rsqrt:	move.l	4(sp),d0	; C interface
*				; fall into the real routine

*************************************************************************
	xdef	MIIEEESPSqrt
MIIEEESPSqrt:
SWFP_SPSqrt:
            MOVE.L   D0,D1
            BEQ.S    Sqrt_Zero            ;Yes, Just Exit then.
	bmi.s	Sqrt_Neg

	move.l	d4,a0		; save registers here
	move.l	d5,a1

*			play with exponent first
	move.l	#$7f800000,d5
	and.l	d5,d0
	beq.s	nonnorm
	cmp.l	d5,d0
	beq.s	NAN

*			play with mantissa now
	not.l	d5	; d5 = $807FFFFF
	and.l	d5,d1	; we already know that d1 < 0
	moveq    #1,d5		(pwr2 + e)
	cmp.l    d5,d1
        BLE      Sqrt_PTwo            ;Yes.


            LSL.L    #$08,D1              ;Mantissa in D1.
            BSET.L   #$001F,D1            ;Set the upper bit.

            SWAP     D0
            ROR.W    #$07,D0
normal:
	moveq	#$7e,d5
	sub.w	d5,d0			; unbias exponent
	asr.w	#1,d0			; /2 and test for odd
	bcc.s	waseven
	addq.w	#1,d0			; adjust for odd exponent
	lsr.l	#1,d1			; and mantissa too

waseven:
	add.w	d5,d0			; rebias
            CMPI.L   #$FFFE0000,D1        ;Check for near power of two,
                                          ;where all Mantissa bits are set,
                                          ;except those indicated.  Note:
                                          ;first 9-bits of D1 are not part
                                          ;of the Original Mantissa.
            BCS.S      S902
                                          ;Near power of two case ...

            SUBI.L   #$00000100,D1        ;Reduce least significant bit of
                                          ;Mantissa to bring our results
                                          ;in line with the 68881/68882.
; Dale - original code had these here, they look like they don't do
;        anything significant when you look at what S904 does
;            MOVE.L   D1,D3                ;Special case, near integer number.
;            LSL.L    #$01,D3              ;set the x-bit and
            BRA.S      S904               ;skip to end of program.

S902:       		              ;Note: f = fu : fl
	peek d1

	move.l	d1,d4
	swap	d4
	mulu.w	#$9715,d4		; B = INT( 0.59016 * 65536 ) (B * fu)
	swap	d4			; setup for A + B * fu.
	addi.w	#$6ad5,d4		; A = INT( 0.41713 * 65536) =$6ad5

                                          ;Only about 3 bits accuracy here.
            BCC.S    S903
            MOVEQ.L   #-1,D4            ;Set all bits in this case.

S903:       MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y0
	peek d4
	peek d5
            ADD.W    D5,D4                ;y0 + f / y0
	peek d4
            ROXR.W   #$01,D4              ;y1 = ( y0 + f / y0 ) / 2
	peek d4
                                          ;Minimum of 7-bits accuracy now.

            MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y1
	peek d5
            ADD.W    D5,D4                ;y1 + f / y1
	peek d4
            ROXR.W   #$01,D4              ;y2 = ( y1 + f / y1 ) / 2
	peek d4
                                          ;14 to 15-bits accuracy now. I
                                          ;took no special steps to preserve
                                          ;15-bits in all cases.

            MOVE.L   D1,D5                ;f
            DIVU.W   D4,D5                ;f / y2
	peek d5
            MOVE.W   D5,D1                ;f / y2.
            CLR.W    D5                   ;Clear old quotient so we can
                                          ;do another divide by y2 on the
                                          ;Remainder.

            DIVU.W   D4,D5                ;Remainder / y2. Lower word of
	peek d5
                                          ;sqrt(f).

            ADD.W    D4,D1                ;y2 + f / y2. sqrt(f) Upper word.
	peek d1
            SWAP     D1
            MOVE.W   D5,D1                ;sqrt(f). 29 to 31-bits accuracy
	peek d1
                                          ;but we only need 23-bits. 

S904:	move.b	d0,d1	; bring everything together
	ror.l	#8,d1	; get bit close, get ready to round
	addq.l	#1,d1	; round off, overflow into exponent
	lsr.l	#1,d1	; shove everything right and clear sign bit
	move.l	d1,d0	; done

	move.l	a0,d4
	move.l	a1,d5

            RTS


Sqrt_PTwo:
;	checking for sqrt one probably will slow down the other
;	powers of two too much I feel so let's compute it.
;	It does not take very long anyway

            SWAP     D0
            LSR.L    #$07,D0              ;e = Biased Exponent.

	moveq	#$7f,d5
	sub.w	d5,d0
	asr.w	#1,d0
	bcs	exp_odd
;		is even, simple just return with exp/2
		add.w	d5,d0
		lsl.w	#7,d0
		swap	d0
		move.l	a0,d4
		move.l	a1,d5
		rts

exp_odd:
;		almost as easy return with exp/2 and sqrt(2) in mantissa
	add.w	d5,d0
	lsl.w	#7,d0
	swap	d0
	or.l	#$003504F3,d0
	move.l	a0,d4
	move.l	a1,d5
	rts


***************** End of SWFP_SPSqrt.asm Code ***************************

	end
@


36.4
log
@Proper fix for sqrt(1.0-eps) being equal to 1.0-eps
Also several speed up modifications (micro tuning) shaved about
10 usec of 68000 timing. About 5%
@
text
@a2 7
; new algorithm from "Collected Algorithms of the ACM"
; Algorthim 650: Efficient Square Root Implementation
; on the 68000
; Kenneth C. Johnson
; sorry, I did not type in the comments if there were any.
; You will need to look it up yourself if there are problems.

d63 3
@


36.3
log
@new RCS
@
text
@d35 1
a35 1
********************* SWFP_SPSqrt.asm ***********************************
d41 4
d50 20
a80 12
***           (a) Zero is defined with Exponent = 0, AND the Mantissa = 0,
***               with the Sign = 0 (Positive) or 1 (Negative).  I exit
***               the program whenever x is negative (even -0.0) and I just
***               return NAN as $7F880000.  +0.0 is detected by testing
***               the ENTIRE IEEESP FP Word for zero and I just exit
***               right away on +0.0.  Perhaps I should just test the
***               Exponent for zero and ignore the Mantissa?  The problem
***               is (since I test the entire FF Word for Zero) that
***               things like x = $00400000 will fall through and be
***               calculated erroneously. These are the so-called
***               'denormalized numbers' and the program does nothing
***               to handle them at this time --- it could though ...
d82 1
d104 3
a106 2
NAN:	move.l	d3,d0	; sqrt(nan)=nan sqrt(inf)=inf
        MOVEM.L  (A7)+,D3-D5
d111 2
a112 2
	moveq	#1,d3
	move.l	d3,d0
d114 1
a114 1
		sub.w	d3,d0
d123 1
a123 1
	MOVE.L   #$7F880000,D0
d145 2
a146 1
            MOVEM.L  D3-D5,-(A7)
d148 3
a150 2
	move.l	#$7f800000,d3
	and.l	d3,d0
d152 1
a152 1
	cmp.l	d3,d0
d155 3
a157 2
	move.l	#$007FFFFF,d4
	and.l	d4,d1
a160 3
	if d1=d4.l
		subq.l	#1,d1		; cheat?
	endif
d167 1
a167 2
            ROR.L    #$07,D0
;           ANDI.L   #$000000FF,D0        ;e (in the lower byte).
d170 5
a174 1
            SUB.W   d5,D0            ;e - bias + 1
d176 9
a184 2
            BTST.L   #$0000,D0            ;e - bias + 1 Even?
            BEQ.S    S901                 ;Yes.
d186 8
a193 2
            ADDQ.W   #$01,D0              ;e - bias + 2 (Its Even Now).
            LSR.L    #$01,D1              ;Adjust Mantissa too.
d195 2
a196 2
S901:       ASR.W    #$01,D0              ;Exponent / 2.
            ADD.W   d5,D0            ;Final Exponent.
d198 5
a202 4
            CMPI.L   #$FFFE0000,D1        ;Check for near integer number.
                                          ;Note first 9-bits not part of the
                                          ;Original Mantissa.
            BCS.S    S902                 ;Nope.
a203 15
            MOVE.L   D1,D3                ;Special case, near integer number.
            LSL.L    #$01,D3              ;set the x-bit and
            BRA.S      S904                 ;skip to end of program.

S902:       MOVEQ.L  #$00,D4              ;Note: f = fu : fl
	peek d1
            MOVE.W   #$9715,D4            ;B = INT( 0.59016 * 65536 )
            SWAP     D1                   ;Setup for B * fu.
            MULU.W   D1,D4                ;B * fu
	peek d4
            SWAP     D1                   ;f
            SWAP     D4                   ;Setup for A + B * fu.
            ADDI.W   #$6AD5,D4            ;A = INT( 0.41713 * 65536 )
	peek d4
                                          ;y0 = A + B * fu  in lower word.
a223 2
;	clr.w	d3
;	addx.w	d3,d4		; round up on last shift
d248 5
a252 5
S904:       CLR.W    D3                   ;Dummy holder of the x-bit.
            ADDI.L   #$00000100,D1        ;Round up the result since we
	peek d1
                                          ;have 29 to 31-bits accuracy,
                                          ;but we only need 23-bits.
d254 2
a255 13
            ADDX.W   D3,D0                ;Adjust Exponent if necessary.
	peek d0
            ANDI.W   #$FE00,D1            ;Clear lower 9-bits so we can
	peek d1
                                          ;put in the sign (0) bit and the
                                          ;Exponent.
            OR.W     D0,D1                ;Set the sign and Exponent.
	peek d1
            SWAP     D1
	peek d1
            ROL.L    #$07,D1
	peek d1
            MOVE.L   D1,D0                ;Final result in D0.
a256 1
            MOVEM.L  (A7)+,D3-D5
d261 3
a263 2
            CMPI.L   #$3F800000,D0        ;x = 1.0 ?
            BEQ.S      Sqrt_One             ;Yes, Just Return Then.
a266 1
            SUBI.W   #$007F,D0            ;g = e - bias = Exponent.
d268 11
a278 10
            BTST.L   #$0000,D0            ;Test Exponent LSB.
            BNE.S      Exp_Odd              ;Exponent is Odd.
                                          ;Exponent is Even.
Exp_Even:
            ASR.W    #$01,D0              ;g --> g / 2 , Since g is Even.
            ADDI.W   #$007F,D0            ;e = g + bias.
            LSL.L    #$07,D0
            SWAP     D0                   ;SPSqrt(2**N), N Even.
            MOVEM.L  (A7)+,D3-D5
            RTS
d280 10
a289 12
Exp_Odd:
            ADDI.W   #$0001,D0            ;g --> g + 1  , Makes it Even.
            ASR.W    #$01,D0              ;( g + 1 ) / 2
            MOVE.L   D0,D1
            MOVE.L   #$04F33F35,D0        ;SPSqrt(0.5) pre-SWAP'd.
            MOVE.L   #$6A00007E,D3        ;#$00003F35  pre-ROR.L'd by 7.
            ADD.W    D1,D3                ;Fix-up the Exponent.
            ROL.L    #$07,D3
            MOVE.W   D3,D0
            SWAP     D0
Sqrt_One:   MOVEM.L  (A7)+,D3-D5
            RTS
@


36.2
log
@Completely new cordic algorithm. One known bug.
Improperly rounds 3f7fffff
@
text
@d144 3
@


36.1
log
@Added autodoc source.
@
text
@d1 2
d35 58
a92 1
quickexit:
d94 18
d113 4
d118 1
d120 4
a124 3
_rsqrt:
	move.l	4(sp),d0

d126 4
a129 3
	move.l	d0,d1		; use d1 to store exponent
	beq	quickexit	; sqrt of zero is zero
	bmi.s	negative	; branch to negative if sign bit=1
d131 1
a131 2
	move.l	d2,a0		; save registers here
	move.l	d3,a1
d133 5
a137 3
	move.l	d0,d2
	move.l	#$7f800000,d0	; mask for exponent field
	and.l	d0,d1		; clear fraction field of d1
d139 5
a143 1
	beq.s	nonnorm		; branch to nonnorm if normalized arg
a144 2
	cmp.l	d0,d1		; compare if INF or NAN
	beq.s	NAN		; branch to NAN if arg is NAN or INF
d146 2
a147 1
;	argument is normalized and >0
d149 6
a154 15
	sub.l	d1,d2		; clear exponent field in d2
reenter:
	moveq	#23,d3		; stash #23 in d3
	bset	d3,d2		; restore implicit 1 in bit 23
				; (d2 = x = significand*2**23)
	addi.l	#$3f800000,d1	; d1 = (m + 2*7fh)*2**23
	lsr.l	#1,d1
	bclr	#22,d1		; new exponent
	beq.s	dollar0		; branch to $0 if even
	add.l	d2,d2		; double x if m is odd
dollar0:
	move.b	d3,d1		; 23->d1
	moveq	#22,d3
	subi.l	#$007fffff,d2
	move.l	#$017fffff,d0	; construct it in d0.l
d156 2
a157 1
UNRAVELED	equ	1
d159 2
a160 7
	ifd	SHORT
;	this was the original algorithm
dollar1:
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar2
d162 2
a163 7
	sub.l	d0,d2
	bset	d1,d0
dollar2:
	move.b	d3,d1
	subq.b	#1,d3
	bcc.s	dollar1
	endc
d165 4
a168 12
	ifd	UNRAVELED
;	first even it up
;	We go through the loop 23 times so lets pull one out
;	and then double the size of the resulting loop body.
;	This removes 11 bcc.s as well as we can now ping pong
;	two tracking registers and save more time.
;	Total increase in speed is about 13% with UNRAVELED set
dollar01:
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar02
d170 3
a172 5
	sub.l	d0,d2
	bset	d1,d0
dollar02:
	move.b	d3,d1
	subq.b	#1,d3
d174 14
a187 8
;	now enter the body of the loop
dollar1:
; the following identity is true
;		d1 = d3+1
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar2
d189 9
a197 11
	sub.l	d0,d2
	bset	d1,d0
dollar2:
	subq.b	#2,d1		; leap frog = ping pong
dollar10:
; now the following is true
;		d3 = d1+1
	add.l	d2,d2
	bclr	d1,d0
	cmp.l	d0,d2
	bls.s	dollar20
d199 12
a210 6
	sub.l	d0,d2
	bset	d3,d0
dollar20:
	subq.b	#2,d3		; ping pong back
	bcc.s	dollar1
	endc
d212 7
a218 7
	lsr.l	#1,d0
	bclr	#23,d0
	or.l	d1,d0
exit:
	move.l	a0,d2		; restore registers used
	move.l	a1,d3
	rts
d220 3
a222 5
negative:
	add.l	d0,d0		; check for 0x80000000
	beq.s	exit		; -0.0? yes return with 0.0
	move.l	#$7f880000,d0	; contruct NAN
	bra	exit
d224 6
a229 3
NAN:
	move.l	d2,d0		; just return input for NAN,INF
	bra	exit
d231 57
a287 15
nonnorm:
;	enter d2 = unnormalized mantissa
;	d1 = 0
;	d0,d3 = scratch
;	exit with d2 = normalized number
;	d1 = proper exponent
	move.w	#$80,d3
	move.w	d3,d1
	repeat
		sub.w	d3,d1	; decrement exponent
		add.l	d2,d2	; shift left one
		btst	#23,d2	; proper bit lit up yet?
	until <>
	swap	d1
	bra	reenter
@


36.0
log
@*** empty log message ***
@
text
@d8 25
@
