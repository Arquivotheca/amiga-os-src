head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     90.04.08.01.31.10;  author dale;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@; new algorithm from "Collected Algorithms of the ACM"
; Algorthim 650: Efficient Square Root Implementation
; on the 68000
; Kenneth C. Johnson
; sorry, I did not type in the comments if there were any.
; You will need to look it up yourself if there are problems.

******* mathieeesingtrans.library/IEEESPSqrt ********************************
*
*   NAME
*	IEEESPSqrt -- compute the square root of a number
*
*   SYNOPSIS
*	  x   = IEEESPSqrt(  y  );
*	 d0 	             d0
*
*	float	x,y;
*
*   FUNCTION
*	Compute square root of y in IEEE single precision
*
*   INPUTS
*	y - IEEE single precision floating point value
*
*   RESULT
*	x - IEEE single precision floating point value
*
*   BUGS
*
*   SEE ALSO
**************************************************************************/

quickexit:
	rts


	xdef	_rsqrt
	xdef	MIIEEESPSqrt
_rsqrt:
	move.l	4(sp),d0

MIIEEESPSqrt:
	move.l	d0,d1		; use d1 to store exponent
	beq	quickexit	; sqrt of zero is zero
	bmi.s	negative	; branch to negative if sign bit=1

	move.l	d2,a0		; save registers here
	move.l	d3,a1

	move.l	d0,d2
	move.l	#$7f800000,d0	; mask for exponent field
	and.l	d0,d1		; clear fraction field of d1

	beq.s	nonnorm		; branch to nonnorm if normalized arg

	cmp.l	d0,d1		; compare if INF or NAN
	beq.s	NAN		; branch to NAN if arg is NAN or INF

;	argument is normalized and >0

	sub.l	d1,d2		; clear exponent field in d2
reenter:
	moveq	#23,d3		; stash #23 in d3
	bset	d3,d2		; restore implicit 1 in bit 23
				; (d2 = x = significand*2**23)
	addi.l	#$3f800000,d1	; d1 = (m + 2*7fh)*2**23
	lsr.l	#1,d1
	bclr	#22,d1		; new exponent
	beq.s	dollar0		; branch to $0 if even
	add.l	d2,d2		; double x if m is odd
dollar0:
	move.b	d3,d1		; 23->d1
	moveq	#22,d3
	subi.l	#$007fffff,d2
	move.l	#$017fffff,d0	; construct it in d0.l

UNRAVELED	equ	1

	ifd	SHORT
;	this was the original algorithm
dollar1:
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar2

	sub.l	d0,d2
	bset	d1,d0
dollar2:
	move.b	d3,d1
	subq.b	#1,d3
	bcc.s	dollar1
	endc

	ifd	UNRAVELED
;	first even it up
;	We go through the loop 23 times so lets pull one out
;	and then double the size of the resulting loop body.
;	This removes 11 bcc.s as well as we can now ping pong
;	two tracking registers and save more time.
;	Total increase in speed is about 13% with UNRAVELED set
dollar01:
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar02

	sub.l	d0,d2
	bset	d1,d0
dollar02:
	move.b	d3,d1
	subq.b	#1,d3

;	now enter the body of the loop
dollar1:
; the following identity is true
;		d1 = d3+1
	add.l	d2,d2
	bclr	d3,d0
	cmp.l	d0,d2
	bls.s	dollar2

	sub.l	d0,d2
	bset	d1,d0
dollar2:
	subq.b	#2,d1		; leap frog = ping pong
dollar10:
; now the following is true
;		d3 = d1+1
	add.l	d2,d2
	bclr	d1,d0
	cmp.l	d0,d2
	bls.s	dollar20

	sub.l	d0,d2
	bset	d3,d0
dollar20:
	subq.b	#2,d3		; ping pong back
	bcc.s	dollar1
	endc

	lsr.l	#1,d0
	bclr	#23,d0
	or.l	d1,d0
exit:
	move.l	a0,d2		; restore registers used
	move.l	a1,d3
	rts

negative:
	add.l	d0,d0		; check for 0x80000000
	beq.s	exit		; -0.0? yes return with 0.0
	move.l	#$7f880000,d0	; contruct NAN
	bra	exit

NAN:
	move.l	d2,d0		; just return input for NAN,INF
	bra	exit

nonnorm:
;	enter d2 = unnormalized mantissa
;	d1 = 0
;	d0,d3 = scratch
;	exit with d2 = normalized number
;	d1 = proper exponent
	move.w	#$80,d3
	move.w	d3,d1
	repeat
		sub.w	d3,d1	; decrement exponent
		add.l	d2,d2	; shift left one
		btst	#23,d2	; proper bit lit up yet?
	until <>
	swap	d1
	bra	reenter

	end
@
