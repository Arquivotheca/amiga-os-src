head     36.1;
branch   ;
access   ;
symbols  V36_13:36.0 V36_12:36.0 V36_7:36.0;
locks    ; strict;
comment  @*   @;


36.1
date     90.04.08.01.26.53;  author dale;  state Exp;
branches ;
next     36.0;

36.0
date     89.06.05.15.47.24;  author dale;  state Exp;
branches ;
next     ;


desc
@@


36.1
log
@new RCS
@
text
@/*
    Math Runtime library - Copyright 1983,1984,1985,1986 by Green Hills Software Inc.
    This program is the property of Green Hills Software, Inc,
    its contents are proprietary information and no part of it
    is to be disclosed to anyone except employees of Green Hills
    Software, Inc., or as agreed in writing signed by the President
    of Green Hills Software, Inc.
*/

#include "math.h"
/****** mathieeesingtrans.library/IEEESPExp ********************************
*
*   NAME
*	IEEESPExp -- compute the exponential of e
*
*   SYNOPSIS
*	  x   = IEEESPExp(  y  );
*	d0	          d0
*
*	float	x,y;
*
*   FUNCTION
*	Compute e^y in IEEE single precision
*
*   INPUTS
*	y - IEEE single precision floating point value
*
*   RESULT
*	x - IEEE single precision floating point value
*
*   BUGS
*
*   SEE ALSO
*	IEEESPLog()
**************************************************************************/

/* this is e^x, and is implemented by converting it to 2^(x/log2)
	we split this into integer and fraction parts, apply the
	transformation from HART 1069 to get 2 raised to the
	fractional part, and the multiply by 2^integer part
*/


float rexp(x)
float x;
{
    float temp;
    float f0, f1, f2;
    int i;

    x *= 1.4426950408889634073599247;
    if (x == 0)
	return(1.0);
    if (x < MINIMUMFLOATEXPONENT-1)
	return(0.0);
    if (x >= MAXIMUMFLOATEXPONENT) {
	/*errno = ERANGE;*/
	return(HUGEFLOAT);
    }
    i = x;
    if (x < 0 && x != i)
	i--;
    x -= i;
    x -= 0.5;
    f1 = x*x;
    f0 = 0.576900723731e-1;
    f0 *= f1;
    f0 += 0.72152891511493e+1;
    x *= f0;
    f2 = f1;
    f2 += 0.208189237930062e+2;
    f1 = f2;
    f2 -= x;
    x += f1;
    x /= f2;
    x *= 1.41421356237309504880167887;
    if (x == 0.0)
	return(x);
    else {
#ifdef KNOWN_FLOATING_POINT_FORMAT
	temp = x;
	i += EXTRACTFLOATEXPONENT(temp);
	if (i < MINIMUMFLOATEXPONENT)
	    return(0.0);
	else if (i > MAXIMUMFLOATEXPONENT)
	    return(HUGEFLOAT);
	else {
	    SETFLOATEXPONENT(temp, i);
	    return(temp);
	}
#else
	return(rldexp(x, i));
#endif
    }
}
@


36.0
log
@*** empty log message ***
@
text
@@
