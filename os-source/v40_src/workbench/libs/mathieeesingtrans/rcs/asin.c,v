head     36.1;
branch   ;
access   ;
symbols  V36_13:36.0 V36_12:36.0 V36_7:36.0;
locks    ; strict;
comment  @*   @;


36.1
date     90.04.08.00.48.18;  author dale;  state Exp;
branches ;
next     36.0;

36.0
date     89.06.05.15.47.07;  author dale;  state Exp;
branches ;
next     ;


desc
@@


36.1
log
@new RCS
@
text
@/*
    Math Runtime library - Copyright 1983,1984,1985,1986 by Green Hills Software Inc.
    This program is the property of Green Hills Software, Inc,
    its contents are proprietary information and no part of it
    is to be disclosed to anyone except employees of Green Hills
    Software, Inc., or as agreed in writing signed by the President
    of Green Hills Software, Inc.
*/
/****** mathieeesingtrans.library/IEEESPAsin ********************************
*
*   NAME
*	IEEESPAsin -- compute the arcsine of a number
*
*   SYNOPSIS
*	  x   = IEEESPAsin(  y  );
*	d0	           d0
*
*	float	x,y;
*
*   FUNCTION
*	Compute the arc sine of y in IEEE single precision
*
*   INPUTS
*	y - IEEE single precision floating point value
*
*   RESULT
*	x - IEEE single precision floating point value
*
*   BUGS
*
*   SEE ALSO
*	IEEESPSin(), IEEESPAtan(), IEEESPAcos()
**************************************************************************/

#include "math.h"
#define PI2	1.57079632679489661923

single	rsqrt(),ratan();

single rasin(x)
single x ;
{
    /* I use the identity that asin(x)=atan(1/sqrt(1/x^2-1)) */

    /* assumes e-30 is not an underflow (at least 8 bit binary exponent) */
    if (x >= 0.0) {
	if (x < 1.0e-15)
	    return(x);		/* prevent underflow: arc sin(x)=x */
	x *= x;
	if (x >= 1.0) {
	    if (x == 1.0)
		return(PI2);
	    return(0.0);
	}
	x = rsqrt(x / (1.0 - x));
    } else {
	if (x > -1.0e-15)
	    return(x);		/* prevent underflow: arc sin(x)=x */
	x *= x;
	if (x >= 1.0) {
	    if (x == 1.0)
		return(-PI2);
	    return(0.0);
	}
	x = -rsqrt(x / (1.0 - x));
    }
    return(ratan(x));
}
@


36.0
log
@*** empty log message ***
@
text
@@
