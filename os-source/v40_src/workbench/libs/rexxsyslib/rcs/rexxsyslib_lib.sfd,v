head     36.3;
branch   ;
access   ;
symbols  LOCKDOWN_2_04:36.3 V36_23:36.3 V36_21:36.3;
locks    ; strict;
comment  @@;


36.3
date     91.02.19.11.30.00;  author mks;  state Exp;
branches ;
next     36.2;

36.2
date     91.02.19.11.27.22;  author mks;  state Exp;
branches ;
next     36.1;

36.1
date     91.02.12.14.56.04;  author mks;  state Exp;
branches ;
next     36.0;

36.0
date     91.02.12.14.37.21;  author mks;  state Exp;
branches ;
next     ;


desc
@RexxSysLib sfd file
@


36.3
log
@One more time...  Fixed the CreateRexxMsg() prototype
@
text
@==id $Id: rexxsyslib_lib.sfd,v 36.2 91/02/19 11:27:22 mks Exp Locker: mks $
* "rexxsyslib.library"
==base _RexxSysBase
==bias 30
==version 33
==include <exec/types.h>
==include <rexx/rxslib.h>
==include <rexx/rexxio.h>
*
==private
==reserve 16
==public
*
UBYTE *CreateArgstring(UBYTE *string,ULONG length) (A0,D0)
VOID DeleteArgstring(UBYTE *argstring) (A0)
ULONG LengthArgstring(UBYTE *argstring) (A0)
struct RexxMsg *CreateRexxMsg(struct MsgPort *port,UBYTE *extension,UBYTE *host) (A0,A1,D0)
VOID DeleteRexxMsg(struct RexxMsg *packet) (A0)
VOID ClearRexxMsg(struct RexxMsg *msgptr,ULONG count) (A0,D0)
BOOL FillRexxMsg(struct RexxMsg *msgptr,ULONG count,ULONG mask) (A0,D0,D1)
BOOL IsRexxMsg(struct RexxMsg *msgptr) (A0)
*
==private
==reserve 46
==public
*
VOID LockRexxBase(ULONG resource) (D0)
VOID UnlockRexxBase(ULONG resource) (D0)
*
==end
@


36.2
log
@Fixed CreateRexxMsg() prototype
@
text
@d1 1
a1 1
==id $Id: rexxsyslib_lib.sfd,v 36.1 91/02/12 14:56:04 mks Exp Locker: mks $
d17 1
a17 1
struct RexxMsg *CreateRexxMsg(struct MsgPort *port,UBYTE *string,UBYTE *string) (A0,A1,D0)
@


36.1
log
@Initial release of the SFD file for ARexx
@
text
@d1 1
a1 1
==id $Id: rexxsyslib_lib.sfd,v 36.0 91/02/12 14:37:21 mks Exp Locker: mks $
d17 1
a17 1
UBYTE *CreateRexxMsg(struct MsgPort *port,UBYTE *string,UBYTE *string) (A0,A1,D0)
@


36.0
log
@Initial pass
@
text
@d1 1
a1 1
==id $Id$
a10 3
*
* The following are private entry points.
*
d12 1
a12 20
*
* Rexx()
* rxParse()
* rxInstruct()
* rxSuspend()
* EvalOp()
* AssignValue()
* EnterSymbol()
* FetchValue()
* LookUpValue()
* SetValue()
* SymExpand()
* ErrorMsg()
* BOOL IsSymbol(UBYTE *string) (A0)
* APTR CurrentEnv(struct RexxTask *rxtptr) (A0)
* APTR GetSpace(APTR envptr,ULONG length) (A0,D0)
* VOID FreeSpace(APTR envptr,APTR block,ULONG length) (A0,A1,D0)
*
*
* Public entry points
a13 2
==public

d22 1
a22 1

d24 2
a25 2

== reserve 46
a26 51
* struct RexxRsrc *AddRsrcNode(struct List *list,UBYTE *name,ULONG length) (A0,A1,D0)
* struct RexxRsrc *FindRsrcNode(struct List *list,UBYTE *name,ULONG type) (A0,A1,D0)
* VOID RemRsrcList(struct List *list) (A0)
* VOID RemRsrcNode(struct RexxRsrc *node) (A0)
* struct RexxRsrc *OpenPublicPort(struct List *list,UBYTE *name) (A0,A1)
* VOID ClosePublicPort(struct RexxRsrc *node) (A0)
* UBYTE *ListNames(struct List *list,UBYTE separator) (A0,D0)
* VOID ClearMem(APTR address,ULONG length) (A0,D0)
* VOID InitList(struct List *list) (A0)
* ULONG InitPort(struct MsgPort *port,UBYTE *name) (A0,A1)
* VOID FreePort(struct MsgPort *port) (A0)
* CmpString(UBYTE *ss1,UBYTE *ss2) (A0,A1)
* VOID StcToken(UBYTE *string,struct Token *token) (A0,A1)
* LONG StrcmpN(UBYTE *string1,UBYTE *string2,UWORD length) (A0,A1,D0)
* LONG StrcmpU(UBYTE *string1,UBYTE *string2,UWORD length) (A0,A1,D0)
* UBYTE StrcpyA(UBYTE *destination,UBYTE *source,UWORD length) (A0,A1,D0)
* UBYTE StrcpyN(UBYTE *destination,UBYTE *source,UWORD length) (A0,A1,D0)
* UBYTE StrcpyU(UBYTE *destination,UBYTE *source,UWORD length) (A0,A1,D0)
* VOID StrflipN(UBYTE *string,UWORD length) (A0,D0)
* ULONG Strlen(UBYTE *string) (A0)
* UBYTE ToUpper(UBYTE character) (D0)
* VOID CVa2i(UBYTE *buffer) (A0)
* LONG CVi2a(UBYTE *buffer,LONG value,ULONG digits) (A0,D0,D1)
* CVi2arg(value) (D0)
* CVi2az(buffer,value,digits) (A0,D0,D1)
* CVc2x(outbuff,string,mode,length) (A0,A1,D0,D1)
* CVx2c(outbuff,string,mode,length) (A0,A1,D0,D1)
* OpenF(list,filename,mode,logical)(A0,A1,D0,D1)
* CloseF(IoBuff)(A0)
* ReadStr(IoBuff,buffer,length)(A0,A1,D0)
* ReadF(IoBuff,buffer,length)(A0,A1,D0)
* WriteF(IoBuff,buffer,length)(A0,A1,D0)
* SeekF(IoBuff,offset,anchor)(A0,D0,D1)
* QueueF(IoBuff,buffer,length)(A0,A1,D0)
* StackF(IoBuff,buffer,length)(A0,A1,D0)
* ExistF(filename)(A0)
* DOSCommand(string,filehandle(A0,A1)
* DOSRead(filehandle,bffer,length)(A0,A1,D0)
* DOSWrite(filehandle,bffer,length)(A0,A1,D0)
* CreateDOSPkt()
* DeleteDOSPkt(message)(A0)
* SendDOSPkt()
* WaitDOSPkt()
* FindDevice(devicename,type)(A0,D0)
* AddClipNode(list,name,length,value)(A0/A1,D0/D1)
* RemClipNode(node)(A0)
*
* More public functions
*
== public

d29 1
a29 1

@
