head     39.3;
branch   ;
access   ;
symbols  ;
locks    davidj:39.3; strict;
comment  @ * @;


39.3
date     93.03.22.16.47.43;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.08.03.16.55.49;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.23.03.12.53;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.01.12.16.45;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.3
log
@now uses public screen name.
@
text
@/* snapshot.c
 *
 */

#include "amigaguidebase.h"

/*****************************************************************************/

/* The extension for window snapshots */
#define	USE_DIR		"ENV:AmigaGuide"
#define	SAVE_DIR	"ENVARC:AmigaGuide"
#define	NAME		"AmigaGuide"

/* Simple scaling of coordinates */
#define SCALE(a,b,c) (((b) * (c)) / (a))

/*****************************************************************************/

struct TPrefs
{
    struct Prefs	tp_Prefs;
    UBYTE		tp_Pad;
};

/*****************************************************************************/

BOOL LoadSnapShot (struct AmigaGuideLib * ag, struct Client * cl)
{
    struct Rectangle rect;
    BOOL retval = FALSE;
    struct TPrefs tp;
    UBYTE name[128];
    ULONG mode;
    LONG len;

    /* Provide defaults */
    mode = GetVPModeID (&cl->cl_Screen->ViewPort);
    QueryOverscan (mode, &rect, OSCAN_TEXT);
    cl->cl_Prefs.p_Window.Top     = cl->cl_Screen->BarHeight + 1;
    cl->cl_Prefs.p_Window.Width   = MIN (cl->cl_Screen->Width, rect.MaxX - rect.MinX + 1) - 26;
    cl->cl_Prefs.p_Window.Height  = MIN (cl->cl_Screen->Height, rect.MaxY - rect.MinY + 1) - ((cl->cl_Prefs.p_Window.Top * 2) + 12);
    cl->cl_Prefs.p_FileReq.Top    = cl->cl_Prefs.p_Window.Top;
    cl->cl_Prefs.p_FileReq.Width  = 320;
    cl->cl_Prefs.p_FileReq.Height = cl->cl_Prefs.p_Window.Height;

    /* load user preferences */
#if 1
    sprintf (name, "%s/%s", NAME, cl->cl_ScreenNameBuffer);
#else
    sprintf (name, "%s/%s", NAME, cl->cl_Screen->DefaultTitle);
#endif

    len = GetVar (name, (char *) &tp, sizeof (struct TPrefs), GVF_GLOBAL_ONLY | GVF_BINARY_VAR | GVF_DONT_NULL_TERM);

    if (len == sizeof (struct Prefs))
    {
	/* see if the screen size has changed */
	if ((tp.tp_Prefs.p_SWidth != cl->cl_Screen->Width) || (tp.tp_Prefs.p_SHeight != cl->cl_Screen->Height))
	{
	    /* calculate new upper-left coordinates */
	    tp.tp_Prefs.p_Window.Left = (WORD) SCALE (tp.tp_Prefs.p_SWidth, cl->cl_Screen->Width, tp.tp_Prefs.p_Window.Left);
	    tp.tp_Prefs.p_Window.Top = (WORD) SCALE (tp.tp_Prefs.p_SHeight, cl->cl_Screen->Height, tp.tp_Prefs.p_Window.Top);

	    tp.tp_Prefs.p_Window.Width = (WORD) SCALE (tp.tp_Prefs.p_SWidth, cl->cl_Screen->Width, tp.tp_Prefs.p_Window.Width);
	    tp.tp_Prefs.p_Window.Height = (WORD) SCALE (tp.tp_Prefs.p_SHeight, cl->cl_Screen->Height, tp.tp_Prefs.p_Window.Height);
	}

	/* make sure we fit on the screen */
	if ((tp.tp_Prefs.p_Window.Left + tp.tp_Prefs.p_Window.Width) > cl->cl_Screen->Width)
	    tp.tp_Prefs.p_Window.Left -= (tp.tp_Prefs.p_Window.Left + tp.tp_Prefs.p_Window.Width - cl->cl_Screen->Width);
	if ((tp.tp_Prefs.p_Window.Top + tp.tp_Prefs.p_Window.Height) > cl->cl_Screen->Height)
	    tp.tp_Prefs.p_Window.Top -= (tp.tp_Prefs.p_Window.Top + tp.tp_Prefs.p_Window.Height - cl->cl_Screen->Height);

	/* Copy the structure */
	memcpy (&cl->cl_Prefs, &tp.tp_Prefs, sizeof (struct Prefs));

	retval = TRUE;
    }

    return (retval);
}

/*****************************************************************************/

BOOL SaveSnapShot (struct AmigaGuideLib * ag, struct Client * cl)
{
    struct Window *win = cl->cl_Window;
    struct Prefs *p = &cl->cl_Prefs;
    UBYTE name[128];
    BOOL retval;
    BPTR lock;

    p->p_SWidth = cl->cl_Screen->Width;
    p->p_SHeight = cl->cl_Screen->Height;

    if (!(cl->cl_Window->Flags & WFLG_ZOOMED))
    {
	p->p_Window = *((struct IBox *) & win->LeftEdge);
	p->p_Window.Width -= (win->BorderLeft + win->BorderRight + 4);
	p->p_Window.Height -= (win->BorderTop + win->BorderBottom + 2);
    }

    /* ENV: */
    if (lock = CreateDir (USE_DIR))
	UnLock (lock);
    if (lock = CreateDir (SAVE_DIR))
	UnLock (lock);
#if 1
    sprintf (name, "%s/%s", NAME, cl->cl_ScreenNameBuffer);
#else
    sprintf (name, "%s/%s", NAME, win->WScreen->DefaultTitle);
#endif
    retval = SetVar (name, (char *)p, sizeof (struct Prefs), GVF_GLOBAL_ONLY | GVF_SAVE_VAR | GVF_BINARY_VAR | GVF_DONT_NULL_TERM);

    return (retval);
}
@


39.2
log
@updated to use dos setenv/getenv
@
text
@d47 3
d51 1
d108 3
d112 1
@


39.1
log
@save to ENVARC: also
@
text
@d10 3
a12 2
#define	USE_NAME	"ENV:AmigaGuide"
#define	SAVE_NAME	"ENVARC:AmigaGuide"
d19 1
a19 1
struct IBox *LoadSnapShot (struct AmigaGuideLib * ag, struct Client * cl, struct IBox * box)
d21 8
d30 2
a31 1
    SHORT Width, Height;
d34 11
a44 1
    BPTR fh;
d47 1
a47 5
    sprintf (name, "%s/%s.win", USE_NAME, cl->cl_Screen->DefaultTitle);
    if (fh = Open (name, MODE_OLDFILE))
    {
	/* read in the screen width */
	Read (fh, (UBYTE *) & (Width), sizeof (SHORT));
d49 1
a49 5
	/* read in the screen height */
	Read (fh, (UBYTE *) & (Height), sizeof (SHORT));

	/* read in the window rectangle */
	Read (fh, (UBYTE *) box, sizeof (struct IBox));
d51 2
a52 3
	/* close the file */
	Close (fh);

d54 1
a54 1
	if ((Width != cl->cl_Screen->Width) || (Height != cl->cl_Screen->Height))
d57 2
a58 2
	    box->Left = (WORD) SCALE (Width, cl->cl_Screen->Width, box->Left);
	    box->Top = (WORD) SCALE (Height, cl->cl_Screen->Height, box->Top);
d60 2
a61 2
	    box->Width = (WORD) SCALE (Width, cl->cl_Screen->Width, box->Width);
	    box->Height = (WORD) SCALE (Height, cl->cl_Screen->Height, box->Height);
d65 7
a71 10
	if ((box->Left + box->Width) > cl->cl_Screen->Width)
	    box->Left -= (box->Left + box->Width - cl->cl_Screen->Width);
	if ((box->Top + box->Height) > cl->cl_Screen->Height)
	    box->Top -= (box->Top + box->Height - cl->cl_Screen->Height);
    }
    else
    {
	box->Top = 1;
	box->Width = cl->cl_Screen->Width;
	box->Height = cl->cl_Screen->Height - 1;
d73 1
a73 8
	if ((mode = GetVPModeID (&cl->cl_Screen->ViewPort)) != INVALID_ID)
	{
	    QueryOverscan (mode, &rect, OSCAN_TEXT);
	    box->Width = MIN (cl->cl_Screen->Width, rect.MaxX - rect.MinX + 1);
	    box->Height = MIN (cl->cl_Screen->Height, rect.MaxY - rect.MinY + 1) - 1;
	}
	box->Width -= 22;
	box->Height -= (cl->cl_Screen->BarHeight + 11);
d76 1
a76 2
    /* return what was passed */
    return (box);
d84 1
a84 2
    BOOL retval = FALSE;
    struct IBox box;
d86 1
a87 7
    LONG len;
    BPTR fh;

    if (lock = CreateDir (USE_NAME))
	UnLock (lock);
    if (lock = CreateDir (SAVE_NAME))
	UnLock (lock);
d89 2
a90 4
    box = *((struct IBox *) & win->LeftEdge);
    box.Width  -= (win->BorderLeft + win->BorderRight  + 4);
    box.Height -= (win->BorderTop  + win->BorderBottom + 2);
    len = 2L * sizeof (SHORT);
d92 1
a92 2
    sprintf (name, "%s/%s.win", USE_NAME, cl->cl_Screen->DefaultTitle);
    if (fh = Open (name, MODE_NEWFILE))
d94 3
a96 6
	if ((Write (fh, (UBYTE *) & (cl->cl_Screen->Width), len)) == len)
	    if ((Write (fh, (UBYTE *) & box, sizeof (struct IBox))) == sizeof (struct IBox))
		retval = TRUE;

	/* close the file */
	Close (fh);
d99 7
a105 10
    sprintf (name, "%s/%s.win", SAVE_NAME, cl->cl_Screen->DefaultTitle);
    if (fh = Open (name, MODE_NEWFILE))
    {
	if ((Write (fh, (UBYTE *) & (cl->cl_Screen->Width), len)) == len)
	    if ((Write (fh, (UBYTE *) & box, sizeof (struct IBox))) == sizeof (struct IBox))
		retval = TRUE;

	/* close the file */
	Close (fh);
    }
@


39.0
log
@initial RCS
@
text
@d10 2
a11 1
#define	NAME	"ENV:AmigaGuide"
d27 1
a27 1
    sprintf (name, "%s/%s.win", NAME, cl->cl_Screen->DefaultTitle);
d91 1
a91 1
    if (lock = CreateDir (NAME))
d93 7
d101 1
a101 1
    sprintf (name, "%s/%s.win", NAME, cl->cl_Screen->DefaultTitle);
d104 7
a110 3
	box = *((struct IBox *) & win->LeftEdge);
	box.Width  -= (win->BorderLeft + win->BorderRight  + 4);
	box.Height -= (win->BorderTop  + win->BorderBottom + 2);
d112 3
a114 1
	len = 2L * sizeof (SHORT);
d121 2
a122 1
    }				/* end of if opened pref file */
@
