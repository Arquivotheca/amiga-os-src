head     39.6;
branch   ;
access   ;
symbols  ;
locks    davidj:39.6; strict;
comment  @ * @;


39.6
date     93.06.17.14.08.34;  author davidj;  state Exp;
branches ;
next     39.5;

39.5
date     93.03.23.16.14.47;  author davidj;  state Exp;
branches ;
next     39.4;

39.4
date     93.03.22.16.49.14;  author davidj;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.23.17.22.36;  author davidj;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.26.03.04.28;  author davidj;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.05.04.03.08;  author davidj;  state Exp;
branches ;
next     39.0;

39.0
date     92.06.01.12.18.02;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


39.6
log
@*** empty log message ***
@
text
@/* misc.c
 *
 */

#include "amigaguidebase.h"

/*****************************************************************************/

struct Window *openwindowtags (struct AmigaGuideLib * ag, Tag tag1,...)
{
    return (OpenWindowTagList (NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

VOID setwindowpointer (struct AmigaGuideLib * ag, struct Window * win, Tag tag1,...)
{
    return (SetWindowPointerA (win, (struct TagItem *) & tag1));
}

/*****************************************************************************/

BOOL layoutmenus (struct AmigaGuideLib * ag, VOID * vi, struct Menu * menus, ULONG tag1,...)
{
    return (LayoutMenusA (menus, vi, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG easyrequest (struct AmigaGuideLib * ag, struct Window * win, struct EasyStruct * es, ULONG data,...)
{
    return ((ULONG) EasyRequestArgs (win, es, NULL, (ULONG *) & data));
}

/*****************************************************************************/

BOOL aslrequesttags (struct AmigaGuideLib * ag, struct FileRequester * fr, Tag tag1,...)
{
    return (AslRequest (fr, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG setattrs (struct AmigaGuideLib *ag, Object *o, Tag tag1, ...)
{
    return (SetAttrsA (o, (struct TagItem *)&tag1));
}

/*****************************************************************************/

VOID CloseWindowSafely (struct AmigaGuideLib * ag, struct Window * win)
{
    struct IntuiMessage *msg, *succ;

    Forbid ();

    msg = (struct IntuiMessage *) win->UserPort->mp_MsgList.lh_Head;
    while (succ = (struct IntuiMessage *) msg->ExecMessage.mn_Node.ln_Succ)
    {
	if (msg->IDCMPWindow == win)
	{
	    Remove ((struct Node *) msg);
	    ReplyMsg ((struct Message *) msg);
	}
	msg = succ;
    }
    win->UserPort = NULL;
    ModifyIDCMP (win, NULL);

    Permit ();

    /* clear the menu strip */
    if (win->MenuStrip)
	ClearMenuStrip (win);

    /* close the window */
    CloseWindow (win);
}

/*****************************************************************************/

struct MsgPort *CreatePort (struct AmigaGuideLib * ag, STRPTR name, BYTE pri)
{
    struct MsgPort *mp;

    if (mp = CreateMsgPort ())
    {
	mp->mp_Node.ln_Name = name;
	mp->mp_Node.ln_Pri = pri;

	Forbid ();
	if (!FindPort (name))
	{
	    AddPort (mp);
	}
	else
	{
	    DeleteMsgPort (mp);
	    mp = NULL;
	}
	Permit ();
    }
    return (mp);
}

/*****************************************************************************/

VOID DeletePort (struct AmigaGuideLib * ag, struct MsgPort * mp)
{

    if (mp)
    {
	RemPort (mp);
	DeleteMsgPort (mp);
    }
}

/*****************************************************************************/

VOID *AllocPVec (struct AmigaGuideLib * ag, void *pool, ULONG byteSize)
{
#if 1
    return (AllocVec (byteSize, MEMF_CLEAR));
#else
    ULONG realSize;
    ULONG *mem;

    realSize = byteSize + sizeof (ULONG);
    if (mem = AllocPooled (pool, realSize))
	*mem++ = realSize;
    return ((void *) mem);
#endif
}

/*****************************************************************************/

VOID FreePVec (struct AmigaGuideLib * ag, void *pool, void *memoryBlock)
{
#if 1
    FreeVec (memoryBlock);
#else
    ULONG *mem;

    if (memoryBlock)
    {
	mem = ((ULONG *) memoryBlock) - 1;
	FreePooled (pool, mem, *mem);
    }
#endif
}

/*****************************************************************************/

/* Martin Taillefer's block pointer */
static UWORD chip Block_sdata[] =
{
    0x0000, 0x0000,		/* reserved, must be NULL */

    0x0000, 0x0100,
    0x0100, 0x0280,
    0x0380, 0x0440,
    0x0100, 0x0280,
    0x0100, 0x0ee0,
    0x0000, 0x2828,
    0x2008, 0x5834,
    0x783c, 0x8002,
    0x2008, 0x5834,
    0x0000, 0x2828,
    0x0100, 0x0ee0,
    0x0100, 0x0280,
    0x0380, 0x0440,
    0x0100, 0x0280,
    0x0000, 0x0100,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,

    0x0000, 0x0000,		/* reserved, must be NULL */
};

VOID SetBlockPointer (struct AmigaGuideLib * ag, struct Window * win)
{
    SetPointer (win, Block_sdata, 32, 16, -8, -7);
}

/*****************************************************************************/

VOID PrintF (struct AmigaGuideLib * ag, struct Client * cl, LONG mode, LONG id, STRPTR arg1,...)
{
    struct EasyStruct es;
    UBYTE namebuffer[64];
    STRPTR ermsg = NULL;

    if (id == 0)
	return;

    if (id < 990)
    {
	if (Fault (id, NULL, cl->cl_WorkText, 510))
	{
	    ermsg = cl->cl_WorkText;
	}
    }
    else if ((id >= 2000) && (id <= 2999))
    {
	ermsg = GetDTString (id);
    }
    else
    {
	ermsg = GetAmigaGuideStringLVO (ag, id);
    }

    if (ermsg)
    {
	if ((mode == 2) && cl->cl_WinObject)
	{
	    sprintf (namebuffer, ermsg, (LONG *) arg1);
	    setattrs (ag, cl->cl_WinObject, WOA_Title, (ULONG) namebuffer, TAG_DONE);
	}
	else if (cl->cl_Process->pr_CLI && (mode == 0))
	{
	    VPrintf (ermsg, (LONG *) & arg1);
	    VPrintf ("\n", NULL);
	}
	else
	{
	    es.es_StructSize = sizeof (struct EasyStruct);
	    es.es_Flags = 0;
	    es.es_Title = GetAmigaGuideStringLVO (ag, TITLE_AMIGAGUIDE);
	    es.es_TextFormat = ermsg;
	    es.es_GadgetFormat = GetAmigaGuideStringLVO (ag, LABEL_CONTINUE);

	    EasyRequestArgs (cl->cl_Window, &es, NULL, &arg1);
	}
    }
}
@


39.5
log
@*** empty log message ***
@
text
@a8 35
struct Process *createnewproc (struct AmigaGuideLib * ag, Tag tag1,...)
{
    return (CreateNewProc ((struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG setgadgetattrs (struct AmigaGuideLib * ag, struct Gadget * g, struct Window * w, Tag tag1,...)
{
    return (SetGadgetAttrsA (g, w, NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG getdtattrs (struct AmigaGuideLib * ag, Object * o, Tag tag1,...)
{
    return (GetDTAttrsA (o, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG setdtattrs (struct AmigaGuideLib * ag, Object * o, struct Window * w, Tag tag1,...)
{
    return (SetDTAttrsA (o, w, NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

APTR newobject (struct AmigaGuideLib * ag, Class * cl, STRPTR name, Tag tag1,...)
{
    return (NewObjectA (cl, name, (struct TagItem *) & tag1));
}

/*****************************************************************************/

a11 7
}

/*****************************************************************************/

APTR newdtobject (struct AmigaGuideLib * ag, STRPTR name, Tag tag1,...)
{
    return (NewDTObjectA (name, (struct TagItem *) & tag1));
@


39.4
log
@removed debugging
@
text
@d9 22
a30 1
ULONG easyrequest (struct AmigaGuideLib * ag, struct Window * win, struct EasyStruct * es, ULONG data,...)
d32 2
d35 5
a39 1
    return ((ULONG) EasyRequestArgs (win, es, NULL, (ULONG *) & data));
d44 1
a44 1
BOOL aslrequesttags (struct AmigaGuideLib * ag, struct FileRequester * fr, Tag tag1,...)
d46 2
d49 5
a53 1
    return (AslRequest (fr, (struct TagItem *) & tag1));
d58 1
a58 1
ULONG setattrs (struct AmigaGuideLib *ag, Object *o, Tag tag1, ...)
d60 1
a60 1
    return (SetAttrsA (o, (struct TagItem *)&tag1));
d65 1
a65 1
WORD GetLabelsExtent (struct AmigaGuideLib * ag, struct TextAttr * ta, LONG min, LONG max, struct IBox * box)
d67 2
a68 8
    struct TextFont *font;
    struct RastPort rp;
    WORD retval = 0;
    STRPTR label;
    WORD w = 0;
    WORD tlen;
    WORD len;
    LONG i;
d70 1
a70 4
    if (ta && box)
    {
	/* Clear the rastport */
	InitRastPort (&rp);
d72 4
a75 2
	/* Clear the upper-left corner */
	box->Left = box->Top = 0;
d77 1
a77 5
	/* Open the font that we're going to use */
	if (font = OpenFont (ta))
	{
	    /* Set the font into our temporary rastport */
	    SetFont (&rp, font);
d79 4
a82 22
	    /* Compute the height of the label, plus the gadget border. */
	    box->Height = font->tf_YSize + 4;

	    /* Get the length of the underline */
	    len = TextLength (&rp, "_", 1);

	    /* Check each label */
	    for (i = min; i <= max; i++)
	    {
		/* Get the string to use */
		label = GetAmigaGuideStringLVO (ag, i);

		/* Remember the maximum width label */
		tlen = TextLength (&rp, label, strlen (label)) - len;
		w = MAX (w, tlen);

		/* Increment the label counter */
		retval++;
	    }

	    /* Add in a little extra space, plus the gadget border. */
	    box->Width = w + TextLength (&rp, "  ", 2);
d84 1
a84 4
	    /* Close the font */
	    CloseFont (font);
	}
    }
d86 3
a88 1
    return retval;
a163 1

a180 1

a195 105
struct Process *createnewproc (struct AmigaGuideLib * ag, Tag tag1,...)
{

    return (CreateNewProc ((struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG setgadgetattrs (struct AmigaGuideLib * ag, struct Gadget * g, struct Window * w, Tag tag1,...)
{

    return (SetGadgetAttrsA (g, w, NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG getdtattrs (struct AmigaGuideLib * ag, Object * o, Tag tag1,...)
{

    return (GetDTAttrsA (o, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG setdtattrs (struct AmigaGuideLib * ag, Object * o, struct Window * w, Tag tag1,...)
{

    return (SetDTAttrsA (o, w, NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

APTR newobject (struct AmigaGuideLib * ag, Class * cl, STRPTR name, Tag tag1,...)
{

    return (NewObjectA (cl, name, (struct TagItem *) & tag1));
}

/*****************************************************************************/

struct Window *openwindowtags (struct AmigaGuideLib * ag, Tag tag1,...)
{

    return (OpenWindowTagList (NULL, (struct TagItem *) & tag1));
}

/*****************************************************************************/

APTR newdtobject (struct AmigaGuideLib * ag, STRPTR name, Tag tag1,...)
{

    return (NewDTObjectA (name, (struct TagItem *) & tag1));
}

/*****************************************************************************/

VOID setwindowpointer (struct AmigaGuideLib * ag, struct Window * win, Tag tag1,...)
{

    return (SetWindowPointerA (win, (struct TagItem *) & tag1));
}

/*****************************************************************************/

BOOL layoutmenus (struct AmigaGuideLib * ag, VOID * vi, struct Menu * menus, ULONG tag1,...)
{

    return (LayoutMenusA (menus, vi, (struct TagItem *) & tag1));
}

/*****************************************************************************/

LONG internal_atoi (STRPTR s)
{
    LONG num = 0;
    LONG neg = 0;

    if (*s == '+')
	s++;
    else if (*s == '-')
    {
	neg = 1;
	s++;
    }

    while (*s >= '0' && *s <= '9')
    {
	num = num * 10 + *s++ - '0';
    }

    if (neg)
	return (-num);
    return (num);
}

/*****************************************************************************/

ULONG IParseLine (struct AmigaGuideLib * ag, STRPTR line, STRPTR * argv)
{

    return (ParsePathStringLVO (ag, line, argv, MAXARG));
}

/*****************************************************************************/

a238 1

@


39.3
log
@*** empty log message ***
@
text
@d39 1
d70 2
a71 1
		w = MAX (w, (TextLength (&rp, label, strlen (label)) - len));
@


39.2
log
@*** empty log message ***
@
text
@d377 1
a377 1
	    setattrs (ag, cl->cl_WinObject, DTA_Title, (ULONG) namebuffer, TAG_DONE);
@


39.1
log
@*** empty log message ***
@
text
@d9 1
a9 1
ULONG easyrequest (struct AmigaGuideLib *ag, struct Window *win, struct EasyStruct * es, ULONG data,...)
d11 1
d17 9
a25 1
BOOL aslrequesttags (struct AmigaGuideLib *ag, struct FileRequester *fr, Tag tag1, ...)
d27 1
a27 1
    return (AslRequest (fr, (struct TagItem *)&tag1));
d32 1
a32 1
WORD GetLabelsExtent (struct AmigaGuideLib *ag, struct TextAttr * ta, LONG min, LONG max, struct IBox * box)
d88 1
a88 1
VOID CloseWindowSafely (struct AmigaGuideLib *ag, struct Window * win)
d119 1
a119 1
struct MsgPort *CreatePort (struct AmigaGuideLib *ag, STRPTR name, BYTE pri)
d126 1
a126 1
	mp->mp_Node.ln_Pri  = pri;
d128 1
a128 1
	Forbid();
d138 1
a138 1
	Permit();
d145 1
a145 1
VOID DeletePort (struct AmigaGuideLib *ag, struct MsgPort *mp)
d147 1
d157 1
a157 1
VOID *AllocPVec (struct AmigaGuideLib *ag, void *pool, ULONG byteSize)
d159 1
d175 1
a175 1
VOID FreePVec (struct AmigaGuideLib *ag, void *pool, void *memoryBlock)
d177 1
d193 1
a193 1
struct Process *createnewproc (struct AmigaGuideLib *ag, Tag tag1, ...)
d195 2
a196 1
    return (CreateNewProc ((struct TagItem *)&tag1));
d201 1
a201 1
ULONG setgadgetattrs (struct AmigaGuideLib *ag, struct Gadget *g, struct Window *w, Tag tag1, ...)
d203 2
a204 1
    return (SetGadgetAttrsA (g, w, NULL, (struct TagItem *) &tag1));
d209 1
a209 1
ULONG getdtattrs (struct AmigaGuideLib *ag, Object *o, Tag tag1, ...)
d211 2
a212 1
    return (GetDTAttrsA (o, (struct TagItem *) &tag1));
d217 1
a217 1
ULONG setdtattrs (struct AmigaGuideLib *ag, Object *o, struct Window *w, Tag tag1, ...)
d219 2
a220 1
    return (SetDTAttrsA (o, w, NULL, (struct TagItem *) &tag1));
d225 1
a225 1
APTR newobject (struct AmigaGuideLib *ag, Class *cl, STRPTR name, Tag tag1, ...)
d227 2
a228 1
    return (NewObjectA (cl, name, (struct TagItem *)&tag1));
d233 1
a233 1
struct Window *openwindowtags (struct AmigaGuideLib *ag, Tag tag1, ...)
d235 2
a236 1
    return (OpenWindowTagList (NULL, (struct TagItem *) &tag1));
d243 1
d249 1
a249 1
VOID setwindowpointer (struct AmigaGuideLib *ag, struct Window *win, Tag tag1, ...)
d251 2
a252 1
    return (SetWindowPointerA (win, (struct TagItem *)&tag1));
d257 1
a257 1
BOOL layoutmenus (struct AmigaGuideLib * ag, VOID *vi, struct Menu * menus, ULONG tag1,...)
d259 1
d265 1
a265 1
LONG internal_atoi(STRPTR s)
d267 15
a281 2
   LONG num = 0;
   LONG neg = 0;
d283 4
a286 13
   if( *s == '+' ) s++;
   else if( *s == '-' ) {
       neg = 1;
       s++;
   }

   while( *s >= '0' && *s <= '9' ) {
       num = num * 10 + *s++ - '0';
   }

   if( neg ) return( - num );
   return( num );
}
d290 1
a290 1
ULONG IParseLine (struct AmigaGuideLib *ag, STRPTR line, STRPTR * argv)
d292 1
d341 1
d347 1
a347 1
VOID PrintF (struct AmigaGuideLib * ag, struct Client *cl, LONG mode, LONG id, STRPTR arg1,...)
d350 5
a354 1
    STRPTR ermsg = "";
d356 3
a358 1
	if (id < 5000)
d360 1
a360 4
	    if (Fault (id, NULL, cl->cl_WorkText, 510))
	    {
		ermsg = cl->cl_WorkText;
	    }
d362 13
a374 1
	else
d376 2
a377 1
	    ermsg = GetAmigaGuideStringLVO (ag, id);
d379 1
a379 2

	if (cl->cl_Process->pr_CLI && (mode == 0))
d386 4
a389 4
	    es.es_StructSize   = sizeof (struct EasyStruct);
	    es.es_Flags        = 0;
	    es.es_Title        = GetAmigaGuideStringLVO (ag, TITLE_AMIGAGUIDE);
	    es.es_TextFormat   = ermsg;
d392 1
a392 1
	    EasyRequestArgs (NULL, &es, NULL, &arg1);
d394 1
@


39.0
log
@initial RCS
@
text
@d9 14
d195 7
d237 7
d316 36
@
