head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     90.04.08.16.15.42;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     89.09.08.19.58.06;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     89.09.08.19.02.03;  author dale;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@rcs change
@
text
@/*
    Math Runtime library - Copyright 1983,1984,1985,1986 by Green Hills Software Inc.
    This program is the property of Green Hills Software, Inc,
    its contents are proprietary information and no part of it
    is to be disclosed to anyone except employees of Green Hills
    Software, Inc., or as agreed in writing signed by the President
    of Green Hills Software, Inc.
*/

#include <math.h>
#include <errno.h>
int errno;
#define PI	3.14159265358979323846
#define LOGS2PI 0.91893853320467274178

double negamma(), posgamma(), largamma();

int signgam = 0;

/*
 *  Returns the logarithem of the absolute value of the gamma function, the
 *  sign is returned in the external variable signgam, which is 1/-1
 *  (or maybe 0 on an error)
*/

double gamma(x)
double x;
{
    signgam = 1;
    if (x <= 0.0)
	return(negamma(x));
    else if (x < 8.0)
	return(posgamma(x));
    else
	return(largamma(x));
}

static double negamma(x)
double x;
/*
 *  Use the following identity for negative values
 *  	gamma(z) = PI/(sin(PI*z) * (-z) * gamma(-z))
 */
{
    double temp;

    temp = -sin(PI*x)*x;
    if (temp == 0.0 || x == floor(x)) {
	errno = EDOM;
	return(0.0);
    }
    if (temp < 0.0) {
	signgam = -1;
	temp = -temp;
    }
    return(log(PI/temp) - gamma(-x));
}

static double largamma(x)
double x;
/* Stirling's formula, coeficients from Hart 5404 */
{
    double sum, xsq;

    xsq = 1.0/(x*x);
    sum = -.1633436431e-2;
    sum *= xsq;
    sum += .83645878922e-3;
    sum *= xsq;
    sum += -.5951896861197e-3;
    sum *= xsq;
    sum += .793650576493454e-3;
    sum *= xsq;
    sum += -.277777777735865004e-2;
    sum *= xsq;
    sum += .833333333333331018375e-1;
    return((x-0.5)*log(x) - x + LOGS2PI + sum/x);
}

static double posgamma(x)
double x;
/* Coeficients from Hart #5243 */
{
    double sum;
    double ret = 1.0; 

    if (x == 1.0 || x == 2.0)
	return(0.0);
    while (x >= 3.0) {
	x--;
	ret *= x;
    }
    while (x < 2.0) {
	ret /= x;
	x++;
    }
    x -= 2.0;
    sum = -.67449507245925289918083e1;
    sum *= x;
    sum += -.501086937529709530159044e2;
    sum *= x;
    sum += -.4393304440600256761394109e3;
    sum *= x;
    sum += -.20085274013072791214669443e4;
    sum *= x;
    sum += -.87627102978521489560976106e4;
    sum *= x;
    sum += -.208868617892698873643119676e5;
    sum *= x;
    sum += -.423536895097440896471976416e5;
    ret *= sum;

    sum = x;
    sum += -.230815515245801245621624e2;
    sum *= x;
    sum += .1894982341570280164182074e3;
    sum *= x;
    sum += -.4990285266214390483429395e3;
    sum *= x;
    sum += -.1528607273779522024828658e4;
    sum *= x;
    sum += .99403074150827709015210114e4;
    sum *= x;
    sum += -.29803853309256649932413027e4;
    sum *= x;
    sum += -.423536895097440900102391757e5;
    ret /= sum;
    return(log(ret));
}
@


1.2
log
@tidy up
@
text
@@


1.1
log
@Initial revision
@
text
@@
