head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     90.04.08.16.15.27;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     89.09.08.19.57.57;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     89.09.08.19.01.59;  author dale;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@rcs change
@
text
@/*
    Math Runtime library - Copyright 1983,1984,1985,1986 by Green Hills Software Inc.
    This program is the property of Green Hills Software, Inc,
    its contents are proprietary information and no part of it
    is to be disclosed to anyone except employees of Green Hills
    Software, Inc., or as agreed in writing signed by the President
    of Green Hills Software, Inc.
*/
#include <math.h>
#include <errno.h>
int errno;
#define PI	3.14159265358979323846

/* all coeficients from Computer Approximations by Hart et al. */
/*  for small x (<8) j0 is evaluated by JZER0 5849
	for large x (>8) j0 is evaluated by PZERO 6549 and QZERO 6949
*/
/*  for small x (<8) y0 is evaluated by YZER0 6049
	for large x (>8) y0 is evaluated by PZERO 6549 and QZERO 6949
*/

static double asym0(x, z)
double x, z;
{
    double sum, psum, qsum;

    qsum = psum = sqrt((2.0/PI) / x);
    x = 8./x;
    qsum *= x;
    qsum *= cos(z);
    psum *= sin(z);
    x *= x;

    sum = 0.2485271928957404011288128951e4;
    sum *= x;
    sum += 0.1539826532623911470917825993e6;
    sum *= x;
    sum += 0.2016135283049983642487182349e7;
    sum *= x;
    sum += 0.8413041456550439208464315611e7;
    sum *= x;
    sum += 0.1233238476817638145232406055e8;
    sum *= x;
    sum += 0.5393485083869438325262122897e7;
    psum *= sum;

    sum = x;
    sum += 0.2615700736920839685159081813e4;
    sum *= x;
    sum += 0.1560017276940030940592769933e6;
    sum *= x;
    sum += 0.2025066801570134013891035236e7;
    sum *= x;
    sum += 0.8426449050629797331554404810e7;
    sum *= x;
    sum += .1233831022786324960844856182e8;
    sum *= x;
    sum += 0.5393485083869438325560444960e7;
    psum /= sum ;

    sum = -0.4887199395841261531199129300e1;
    sum *= x;
    sum += -0.2262630641933704113967255053e3;
    sum *= x;
    sum += -0.2365956170779108192723612816e4;
    sum *= x;
    sum += -0.8239066313485606568803548860e4;
    sum *= x;
    sum += -0.1038141698748464093880530341e5;
    sum *= x;
    sum += -0.3984617357595222463506790588e4;
    qsum *= sum;

    sum = x;
    sum += 0.4087714673983499223402830260e3;
    sum *= x;
    sum += 0.1570489191515395519392882766e5;
    sum *= x;
    sum += 0.1560213206679291652539287109e6;
    sum *= x;
    sum += 0.5332913634216897168722255057e6;
    sum *= x;
    sum += 0.6667454239319826986004038103e6;
    sum *= x;
    sum += 0.2550155108860942382983170882e6;

    qsum /= sum;
    psum += qsum;
    return(psum);
}

double j0(x)
double x;
{
    double psum, qsum, f0, f1;

    if (x < 0.)
	x = -x;
    if (x < 8.0) {
	x *= x;
	f0 = 0.2685786856980014981415848441e5;
	f0 *= x;
	f0 += -0.4050412371833132706360663322e8;
	f0 *= x;
	f0 += 0.2507158285536881945555156435e11;
	f0 *= x;
	f0 += -0.8085222034853793871199468171e13;
	f0 *= x;
	f0 += 0.1434354939140344111664316553e16;
	f0 *= x;
	f0 += -0.1367620353088171386865416609e18;
	f0 *= x;
	f0 += 0.6382059341072356562289432465e19;
	f0 *= x;
	f0 += -0.11791576291076105360384408e21;
	f0 *= x;
	f0 += 0.4933787251794133561816813446e21;

	f1 = x;
	f1 += 0.1363063652328970604442810507e4;
	f1 *= x;
	f1 += 0.1114636098462985378182402543e7;
	f1 *= x;
	f1 += 0.6699987672982239671814028660e9;
	f1 *= x;
	f1 += 0.3123043114941213172572469442e12;
	f1 *= x;
	f1 += 0.1127756739679798507056031594e15;
	f1 *= x;
	f1 += 0.3024635616709462698627330784e17;
	f1 *= x;
	f1 += 0.5428918384092285160200195092e19;
	f1 *= x;
	f1 += 0.4933787251794133562113278438e21;
	f0 /= f1;
	return(f0);
    } else
	return(asym0(x, x + (PI/4.0)));
}

double y0(x)
double x;
{
    double psum, qsum, f0, f1, f2 ;

    if ( x <= 0. ) {
	errno = EDOM ;
	return( 0.0 );
    }
    if (x < 8.0) {
	f2 = j0(x);
	f1 = log(x);
	f2 *= f1;
	f2 *= (2.0/PI);
	x *= x;
	f0 = 0.2157005807808836412437323737e6;
	f0 *= x;
	f0 += -0.4322070111754509283576952951e9;
	f0 *= x;
	f0 += 0.3626112371023781263507858047e12;
	f0 *= x;
	f0 += -0.1630388704719033222414474226e15;
	f0 *= x;
	f0 += 0.4198535264896044127221217976e17;
	f0 *= x;
	f0 += -0.6166463755967882455848436005e19;
	f0 *= x;
	f0 += 0.4867235042898163780309467558e21;
	f0 *= x;
	f0 += -0.1797501535351026323743332233e23;
	f0 *= x;
	f0 += 0.2221795171464734959461033921e24;
	f0 *= x;
	f0 += -0.9271040364331778065997077567e23;
	f1 = x;
	f1 += 0.1877893230795989427041920381e4;
	f1 *= x;
	f1 += 0.2068779667854516822965618638e7;
	f1 *= x;
	f1 += 0.1672209200208482972518502400e10;
	f1 *= x;
	f1 += 0.1060973970586885270806820407e13;
	f1 *= x;
	f1 += 0.5365328846624175107302324905e15;
	f1 *= x;
	f1 += 0.2127990247831028575645069270e18;
	f1 *= x;
	f1 += 0.6301243461119941981938406355e20;
	f1 *= x;
	f1 += 0.1250632231601396786528969274e23;
	f1 *= x;
	f1 += 0.1256165423798014008016381865e25;
	f0 /= f1;
	f0 += f2;
	return(f0);
    } else
	return(asym0(x, x - (PI/4.0)));
}

/* all constants/coeficients from Computer Approximations by Hart et al. */
/*  for small x (<8) j0 is evaluated by JONE 6050
	for large x (>8) j0 is evaluated by PONE 6750 and QONE 7150
*/
/*  for small x (<8) y0 is evaluated by YONE 6447
	for large x (>8) y0 is evaluated by PONE 6750 and QONE 7150
*/

static double asym1(x, z)
double x;
double z;
{
    double sum, psum, qsum;

    psum = qsum = sqrt((2.0/PI)/x);
    x = 8./x;
    qsum *= x;
    psum *= sin(z);
    qsum *= cos(z);
    x *= x;

    sum = -.1611616644324610116477412898e4;
    sum *= x;
    sum += -.1098240554345934672737413139e6;
    sum *= x;
    sum += -.1523529351181137383255105722e7;
    sum *= x;
    sum += -.6603373248364939109255245434e7;
    sum *= x;
    sum += -.9942246505077641195658377899e7;
    sum *= x;
    sum += -.4435757816794127857114720794e7;
    psum *= sum;

    sum = x;
    sum += -.1455009440190496182453565068e4;
    sum *= x;
    sum += -.1072638599110382011903063867e6;
    sum *= x;
    sum += -.1511809506634160881644546358e7;
    sum *= x;
    sum += -.6585339479723087072826915069e7;
    sum *= x;
    sum += -.9934124389934585658967556309e7;
    sum *= x;
    sum += -.4435757816794127856828016962e7;
    psum /= sum;

    sum = .3526513384663603218592175580e2;
    sum *= x;
    sum += .1706375429020768002061283546e4;
    sum *= x;
    sum += .1849426287322386679652009819e5;
    sum *= x;
    sum += .6617883658127083517939992166e5;
    sum *= x;
    sum += .8514516067533570196555001171e5;
    sum *= x;
    sum += .3322091340985722351859704442e5;

    qsum *= sum;

    sum = x;
    sum += .8638367769604990967475517183e3;
    sum *= x;
    sum += .3789022974577220264142952256e5;
    sum *= x;
    sum += .4002944358226697511708610813e6;
    sum *= x;
    sum += .1419460669603720892855755253e7;
    sum *= x;
    sum += .1819458042243997298924553839e7;
    sum *= x;
    sum += .7087128194102874357375502472e6;
    qsum /= sum;
    psum += qsum;
    return(psum);
}

double j1(x)
double x;
{
    double psum, qsum, sum, xsq;

    if (x < 8.0 && x > -8.0) {
	xsq = x*x ;
	sum = .2701122710892323414856790990e4;
	sum *= xsq;
	sum += -.4695753530642995859767162166e7;
	sum *= xsq;
	sum += .3413234182301700539091292655e10;
	sum *= xsq;
	sum += -.1322983480332126453125473247e13;
	sum *= xsq;
	sum += .2908795263834775409737601689e15;
	sum *= xsq;
	sum += -.3588817569910106050743641413e17;
	sum *= xsq;
	sum += .2316433580634002297931815435e19;
	sum *= xsq;
	sum += -.6672106568924916298020941484e20;
	sum *= xsq;
	sum += .5811993540016061439280508090e21;
	x *= sum;
	sum = xsq;
	sum += 0.1606931573481487801970916749e4;
	sum *= xsq;
	sum += 0.1501793594998585505921097578e7;
	sum *= xsq;
	sum += 0.1013863514358673989967045588e10;
	sum *= xsq;
	sum += 0.5243710262167649715406728642e12;
	sum *= xsq;
	sum += 0.2081661221307607351240184229e15;
	sum *= xsq;
	sum += 0.6092061398917521746105196863e17;
	sum *= xsq;
	sum += 0.1185770712190320999837113348e20;
	sum *= xsq;
	sum += 0.1162398708003212287858529400e22;
	x /= sum;
	return(x);
    } else {
	if (x < 0.) {
	    x = -x;
	    return(-asym1(x, x-(PI/4.0)));
	} else
	    return(asym1(x, x-(PI/4.0)));
    }
}

double y1(x)
double x;
{
    double xsq, sum, ret;

    if (x <= 0.) {
	errno = EDOM;
	return(0.0);
    }
    if (x < 8.0) {
	ret = (2.0/PI)*(j1(x)*log(x)-1.0/x);
	xsq = x*x;
	sum = -.2108847540133123652824139923e7;
	sum *= xsq;
	sum += 0.3639488548124002058278999428e10,
	sum *= xsq;
	sum += -.2580681702194450950541426399e13,
	sum *= xsq;
	sum += 0.9569930239921683481121552788e15,
	sum *= xsq;
	sum += -.1965887462722140658820322248e18,
	sum *= xsq;
	sum += 0.2193107339917797592111427556e20,
	sum *= xsq;
	sum += -.1212297555414509577913561535e22,
	sum *= xsq;
	sum += 0.2655473831434854326894248968e23,
	sum *= xsq;
	sum += -.9963753424306922225996744354e23,
	x *= sum;
	sum = xsq;
	sum += 0.1612361029677000859332072312e4,
	sum *= xsq;
	sum += 0.1563282754899580604737366452e7,
	sum *= xsq;
	sum += 0.1128686837169442121732366891e10,
	sum *= xsq;
	sum += 0.6465340881265275571961681500e12,
	sum *= xsq;
	sum += 0.2976632125647276729292742282e15,
	sum *= xsq;
	sum += 0.1082258259408819552553850180e18,
	sum *= xsq;
	sum += 0.2954987935897148674290758119e20,
	sum *= xsq;
	sum += 0.5435310377188854170800653097e22,
	sum *= xsq;
	sum += 0.5082067366941243245314424152e24,
	x /= sum;
	ret += x;
	return(ret);
    } else
	return(asym1(x, x-(3.0*PI/4.0)));
}

/* compute jn & yn nth bessel functions of 1st and 2nd kind */
/* for jn:
	first range reduce things so that everything is non-negative
	check for the special cases of 
		n==0 => call j0
		n==1 => call j1
		x==0.=> return 0. (unless n==0 => return 1. )
	then for x<n use the obvious power series
		jn(x)= sum( ( (-1)^k * (x/2)^(k+n) ) / ( k! * (n+k)! ) )
	and for x>=n use the recurance
		j(n+1)(x) = 2nJn(x)/x - J(n-1)(x)
*/
/* for yn:
	range reduce, and check that x is positive
	then check for special cases n=0,1 and call y0,y1
	always use the recurance, there is no nice power series
*/

static double __jn(n, x)
int n;
double x;
{
    register double sum, fact;
    register int i, r0;

    x /= 2.0;
    for (i=1, fact=1.0; i<=n; i++) {
	fact *= x;
	fact /= i;
    }
    sum = fact;
    x *= x;
    for (i=1 ; sum+fact != sum; i++ ) {
	fact *= x;
	r0 = -i;
	r0 -= n;
	r0 *= i;
	fact /= r0;
	sum += fact;
    }
    return(sum);
}

double jn(n,x)
int n;
double x;
{
    int neg = 0, i;
    double val, val1, temp;

    if (n < 0) {
	n = -n;
	if (n&1)
	    neg = 1;
    }
    if (x < 0.0) {
	x = -x;
	if (n&1)
	    neg = ! neg;
    }
    if (n == 0)
	val = j0(x);
    else if (n == 1)
	val = j1(x);
    else if (x == 0.0)
	return(0.0);
    else if (x < n)
	val = __jn(n, x);
    else {
	val1 = j0(x);
	val = j1(x);
	for (i=1; i < n; i++) {
	    temp = 2 * i;
	    temp *= val;
	    temp /= x;
	    temp -= val1;
	    val1 = val;
	    val = temp;
	}
    }
    if (neg)
	val = -val;
    return(val);
}

double yn(n,x)
int n;
double x;
{
    int neg = 0, i;
    double val, val1, temp;

    if (n < 0) {
	n = -n;
	if (n&1)
	    neg = 1;
    }
    if (x <= 0.0) {
	errno = EDOM;
	return(0.0);
    }
    if (n == 0)
	val = y0(x);
    else if (n == 1)
	val = y1(x);
    else {
	val1 = y0(x);
	val = y1(x);
	for (i=1; i < n; i++) {
	    temp = 2 * i;
	    temp *= val;
	    temp /= x;
	    temp -= val1;
	    val1 = val;
	    val = temp;
	}
    }
    if (neg)
	val = -val;
    return(val);
}
@


1.2
log
@tidy up
@
text
@@


1.1
log
@Initial revision
@
text
@@
