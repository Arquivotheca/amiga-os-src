head     37.1;
branch   ;
access   ;
symbols  V37_1:37.1 V36_16:1.3 V36_14:1.2;
locks    ; strict;
comment  @ * @;


37.1
date     91.01.21.15.20.27;  author mks;  state Exp;
branches ;
next     1.3;

1.3
date     90.04.08.16.16.27;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     89.09.08.19.50.43;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     89.09.08.19.02.14;  author dale;  state Exp;
branches ;
next     ;


desc
@@


37.1
log
@V37 cleanup for make internal
@
text
@/**********************************************************************
*								     *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.	     *
*   No part of this program may be reproduced, transmitted,	     *
*   transcribed, stored in retrieval system, or translated into	     *
*   any language or computer language, in any form or by any	     *
*   means, electronic, mechanical, magnetic, optical, chemical,	     *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030				     *
*								     *
**********************************************************************
*
*   $Id$
*
**********************************************************************/

/* compute sin/cos if double at same time */
/* currently just hack it */
/****** mathieeedoubtrans.library/IEEEDPSincos ********************************
*
*   NAME
*	IEEEDPSincos -- compute the arc tangent of a floating point number
*
*   SYNOPSIS
*	  x   = IEEEDPSincos( z ,  y  );
*	d0/d1		     a0  d0/d1
*
*	double	x,y,*z;
*
*   FUNCTION
*	Compute sin and cosine of y in IEEE double precision.
*	Store the cosine in *z. Return the sine of y.
*
*   INPUTS
*	y - IEEE double precision floating point value
*	z - pointer to IEEE double precision floating point number
*
*   RESULT
*	x - IEEE double precision floating point value
*
*   BUGS
*
*   SEE ALSO
*	IEEEDPSin(), IEEEDPCos()
**************************************************************************/

double sin(),cos();

double sincos(f0,pcos)
double f0;
double *pcos;
{
	*pcos = cos(f0);
	return(sin(f0));
}
@


1.3
log
@rcs change
@
text
@d14 1
a14 3
*   Source Control
*   --------------
*   $Header: /usr2/dale/src/amiga/libs/mathieeedoubtrans/RCS/sincos.c,v 1.2 89/09/08 19:50:43 dale Exp Locker: dale $
a15 1
*
d23 1
a23 1
*	IEEEDPSincos -- compute the arc tangent of a floating point number 
@


1.2
log
@tidy up
@
text
@d16 1
a16 1
*   $Header: sincos.c,v 36.0 89/09/08 16:11:18 dale Exp $
@


1.1
log
@Initial revision
@
text
@d1 19
a19 1

@
