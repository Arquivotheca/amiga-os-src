head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     90.04.08.16.26.14;  author dale;  state Exp;
branches ;
next     ;


desc
@original Al Aburto algorithm
@



1.1
log
@Initial revision
@
text
@*This is the final version of the DPSqrt(x) routine.  I decided this is it
*as further attempts to 'improve' the run time results in loss of accuracy
*for special situations ( such as sqrt(1.999998) ). Well, I could handle it
*Ok but it would require extra logic and code which I don't (now) think is
*worth the effort. Anyway I'm very happy with the code below.  I hope you
*can find time to check it out and if Ok include in the Library.
* 
*                  Run Times In Microseconds.
*                  Alpha2      New Routine
*DPSqrt(5.0)       4383        1147
*DPSqrt(0.999998)  4441        1070
*DPSqrt(2**N)      4318         250  (N ODD  Integer)
*DPSqrt(2**N)      4211          56  (N EVEN Integer)
*.More..
*DPSqrt(1.0)       4213          48
* 
*Al Aburto
**************************** DPSqrt(D0:D1) ******************************
************ IEEE Double Precision Square Root Routine.
************ Input:  D0:D1    ,x
************ Output: D0:D1    ,SQRT( x )
************ Bugs: Just Returns 0.0 When x < 0.0 . Routine Should Cause
************       Some Sort Of Error Report, or Fault, In This Case.
* Originally written by Al Aburto, adapted to the amiga library
* by Dale Luck. This code here is provided under non-exclusive license
* to Commodore-Amiga, Inc.

******* mathieeedoubtrans.library/IEEEDPSqrt ********************************
*
*   NAME
*	IEEEDPSqrt -- compute the square root of a number
*
*   SYNOPSIS
*	  x   = IEEEDPSqrt(  y  );
*	d0/d1 	           d0/d1
*
*	double	x,y;
*
*   FUNCTION
*	Compute square root of y in IEEE double precision
*
*   INPUTS
*	y - IEEE double precision floating point value
*
*   RESULT
*	x - IEEE double precision floating point value
*
*   BUGS
*
*   SEE ALSO
**************************************************************************/
NEWCODE1	equ 1

	xref	_LVOIEEEDPAdd
	xref	_LVOIEEEDPMul
	xref	_LVOIEEEDPDiv
	xref	_MathIeeeDoubBasBase

L0009:      ADDI.W   #$0010,D2               ;e --> e + 1 . e EVEN Now.
            ASR.W    #$01,D2                 ;( e + 1 ) / 2
            ADDI.W   #$3FF0,D2
            SWAP     D2
            MOVE.L   D2,D0
            MOVE.L   #$3FE6A09E,D2           ;DPSqrt( 0.5 ) .
            MOVE.L   #$667F3BCC,D3
            JSR      _LVOIEEEDPMul(A6)
            MOVEM.L  (A7)+,D2-D6/A6
            RTS

Sqrt_Neg:                                    ;Error x < 0 .
 
Sqrt_Zero:
	    MOVEQ.L  #$00,D0                 ;Come Here If e = 0 .
            MOVEQ.L  #$00,D1
            MOVEM.L  (A7)+,D2-D6/A6
            RTS

;	special for even powers of two
Sqrt_PTwo:  CMPI.W   #$3FF0,D2               ;Check For 1.0
            BEQ.s    L0008                   ;Just Return On x = 1.0
 
	tst.w	d4
	beq	Sqrt_Zero	; definately
            SUBI.W   #$3FF0,D2               ;DPSqrt( 2**N ) Routine.
            BTST.L   #$0004,D2               ;Test Exponent LSB.
            BNE.s    L0009                   ;Branch On Exponent ODD.

            ASR.W    #$01,D2                 ;e / 2 , Since Exponent EVEN.
            ADDI.W   #$3FF0,D2
            SWAP     D2
            MOVE.L   D2,D0
L0008:      MOVEM.L  (A7)+,D2-D6/A6
            RTS

check_unnorm:
;	first guess
;	must renormalize
	MOVE.L   D0,D6                   ;Put Mantissa in D6:D7
	move.l	d1,d4
	bclr	#20,d6
	repeat
		sub.w	#$10,d2	; decrement exponent
		asl.l	#1,d4
		roxl.l	#1,d6
		btst	#20,d6
	until <>
	move.l	d6,d3
	swap	d3
	SWAP     D6                      ;Minus 4-Bits Still In
	SWAP     D4
	MOVE.W   D4,D6
	bra reenter

	xdef	_sqrt
	xdef	MIIEEEDPSqrt
_sqrt:
	move.l	4(sp),d0	; get dp arg from stack
	move.l  8(sp),d1
*	fall into rest of routine
 
MIIEEEDPSqrt:
	MOVEM.L  D2-D6/A6,-(A7)
	MOVEA.L  _MathIeeeDoubBasBase,A6
 
	MOVE.L   D0,D2
	SWAP     D2                      ;Setup For Exponent Word.
	MOVE.W   D2,D4

	ANDI.W   #$7FF0,D4               ;e + Bias
;           BEQ.s    Sqrt_Zero	   ;Exit On Zero.

	MOVE.W   D2,D3
	MOVE.W   D2,D5
 
	ANDI.W   #$FFF0,D2               ;e + Bias
	BMI.s    Sqrt_Neg                ;Exit On Negative.
 
	ANDI.W   #$000F,D5               ;Check For Special Cases,
	BNE.s     L0001                   ;2**N and 1.0  .
	TST.W    D0
	BNE.s    L0001
	TST.L    D1
	BEQ    Sqrt_PTwo
L0001:
	SUBI.W   #$3FE0,D2               ;e + 1
	tst.w	d4
	beq	check_unnorm		; maybe
 
	MOVE.L   D0,D6                   ;Put Mantissa in D6:D7
	SWAP     D6                      ;Minus 4-Bits Still In
	MOVE.L   D1,D4                   ;The Exponent Word.
	SWAP     D4
	MOVE.W   D4,D6
reenter:
	                                 ;In D7.lw .

	MOVEQ.L  #$04,D4                 ;Get Mantissa Upper 5-Bits.
L0002:      LSR.W    #$01,D3	     ;Exponent.w Lower 5-bits
	ROXR.L   #$01,D6                 ;Shifted To D6:D7 .
	DBF      D4,L0002
	BSET.L   #$001F,D6               ;This Bit Must Always Be
	                                 ;Set In The De-Normalized FP
	                                 ;Format. D3 Is Scratch Now.
	                                 ;D2.w = Exponent = e + 1 .
 
	BTST.L   #$0004,D2               ;Is Exponent EVEN?
	BEQ.s    L0003                   ;Branch On EVEN.

	ADDI.W   #$0010,D2               ;Its ODD. (e + 1)-->(e + 2).
	LSR.L    #$01,D6                 ;Adjust Mantissa Too.
 
L0003:      ASR.W    #$01,D2	     ;Divide Exponent By 2 Now.
	ADDI.W   #$3FE0,D2               ;New e + Bias - 1

 
	CMPI.L   #$FFFE0000,D6           ;Check Near Integer Situation.
	BCS.s    L0004
;           LSL.L    #$01,D6	     ;Number Close To Integer, skip
	    ADD.L    D6,D6		     ;lsl.l #1,d6: but quicker
	BRA.s    L0006                   ;To Last 2 Iterations Then.

	                                 ;Now Perform Low Accuracy
	                                 ;(3-bit) Estimate Of sqrt(f).
L0004:      MOVE.W   #$9715,D3	   ;B = INT( 0.59016 * 65536 )
	SWAP     D6                      ;Set Up For B * f.w
	MULU.W   D6,D3                   ;B * f.w
	SWAP     D6
	SWAP     D3                      ;Set Up For A + B * f.w
	ADDI.W   #$6AD5,D3               ;A = INT( 0.41713 * 65536 )
	                                 ;D3.w = y0 = A + B * f
	BCC.s    L0005
	MOVE.W   #$FFFF,D3
 
L0005:      MOVE.L   D6,D4	       ;f
	DIVU.W   D3,D4                   ;f/y0
	ADD.W    D4,D3                   ;y0 + f/y0
	ROXR.W   #$01,D3                 ;y1 = ( y0 + f/y0 ) / 2   .
	                                 ;Min Of 7-bit Accuracy Now.
 
	MOVE.L   D6,D4                   ;f
	DIVU.W   D3,D4                   ;f/y1
	ADD.W    D4,D3                   ;y1 + f/y1
	LSR.W    #$01,D3                 ;y2 = ( y1 + f/y1 ) / 2   .
	                                 ;Min Of 15-bit Accuracy Now.
 
	SWAP     D3                      ;Put Our Decomposed FP Number
;           LSL.L    #$01,D3	     ;Back Into IEEE DP Format.
	ADD.L    D3,D3		     ;fast lsl.l #1,d3
	MOVE.L   D3,D6

L0006:
	    moveq	#15,d3
	    rol.l	#4,d6
	    and.w	d6,d3
	    and.w	#$fff0,d6

	OR.W     D3,D2
 
	SWAP     D2
	SWAP     D6
	MOVE.W   D6,D2
	CLR.W    D6
	MOVE.L   D6,D3                   ;y2 In D2:D3 Standard Format.
 
	MOVE.L   D0,D4                   ;x  In D0:D1 And D4:D5
	MOVE.L   D1,D5
 
	JSR      _LVOIEEEDPDiv(A6)       ;x/y2               In D0:D1
	JSR      _LVOIEEEDPAdd(A6)       ;y2 + x/y2          In D0:D1
	    MOVEQ    #$0010,D6
	    SWAP     D6			     ;to get 00100000 to 
	SUB.L   D6,D0                    ;y3 = (y2 + x/y2)/2 In D0:D1
	                                 ;31-bit Accuracy Now.
 
	MOVE.L   D0,D2                   ;y3
	MOVE.L   D1,D3
	MOVE.L   D4,D0                   ;x
	MOVE.L   D5,D1
	JSR      _LVOIEEEDPDiv(A6)       ;x/y3
	JSR      _LVOIEEEDPAdd(A6)       ;y3 + x/y3
	SUB.L   D6,D0                    ;y4 = (y3 + x/y3)/2 In D0:D1
	                                 ;63-bit Accuracy Now.
	MOVEM.L  (A7)+,D2-D6/A6
	RTS

	end
@
