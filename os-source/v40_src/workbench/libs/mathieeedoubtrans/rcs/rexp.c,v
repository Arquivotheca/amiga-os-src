head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     90.04.08.16.16.16;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     89.09.08.19.02.11;  author dale;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@rcs change
@
text
@/*
    Math Runtime library - Copyright 1983,1984,1985,1986 by Green Hills Software Inc.
    This program is the property of Green Hills Software, Inc,
    its contents are proprietary information and no part of it
    is to be disclosed to anyone except employees of Green Hills
    Software, Inc., or as agreed in writing signed by the President
    of Green Hills Software, Inc.
*/

#include <math.h>
#include <errno.h>
int errno;

/* this is e^x, and is implemented by converting it to 2^(x/log2)
        we split this into integer and fraction parts, apply the
        transformation from HART 1022 to get 2 raised to the
        fractional part, and the multiply by 2^integer part
*/

float temp;

float rexp(x)
float x;
{
    float f0, t;
    int i;

    x *= 1.4426950408889634073599247;
    if (x > 0) {
        if (x >= MAXIMUMFLOATEXPONENT) {
            errno = ERANGE;
            return(HUGEFLOAT);
        }
        i = x;
        t = i;
	x -= t;
        if (x > 0.5) {
            x += -0.5;
            f0 = .15839365528589e-2;
            f0 *= x;
            f0 += .94751738582817e-2;
            f0 *= x;
            f0 += .5554097230882444e-1;
            f0 *= x;
            f0 += .24022226124619363e0;
            f0 *= x;
            f0 += .69314735730637872e0;
            f0 *= x;
            f0 += .999999998825884004e0;
            f0 *= 1.41421356237309504880167887;
	    if (f0 != 0) {
		temp = f0;
		AUGMENTFLOATEXPONENT(temp, i);
		f0 = temp;
	    }
	    return(f0);
        } else {
            f0 = .15839365528589e-2;
            f0 *= x;
            f0 += .94751738582817e-2;
            f0 *= x;
            f0 += .5554097230882444e-1;
            f0 *= x;
            f0 += .24022226124619363e0;
            f0 *= x;
            f0 += .69314735730637872e0;
            f0 *= x;
            f0 += .999999998825884004e0;
	    if (f0 != 0) {
		temp = f0;
		AUGMENTFLOATEXPONENT(temp, i);
		f0 = temp;
	    }
	    return(f0);
        }
    } else if (x < 0) {
        if (x < MINIMUMFLOATEXPONENT-1)
            return(0.0);
        i = x;
        t = i;
        x -= t;
        i--;
        if (x < -0.5) {
            x += 1.0;
            f0 = .15839365528589e-2;
            f0 *= x;
            f0 += .94751738582817e-2;
            f0 *= x;
            f0 += .5554097230882444e-1;
            f0 *= x;
            f0 += .24022226124619363e0;
            f0 *= x;
            f0 += .69314735730637872e0;
            f0 *= x;
            f0 += .999999998825884004e0;
	    if (f0 != 0) {
		temp = f0;
		AUGMENTFLOATEXPONENT(temp, i);
		f0 = temp;
	    }
	    return(f0);
        } else {
            x += 0.5;
            f0 = .15839365528589e-2;
            f0 *= x;
            f0 += .94751738582817e-2;
            f0 *= x;
            f0 += .5554097230882444e-1;
            f0 *= x;
            f0 += .24022226124619363e0;
            f0 *= x;
            f0 += .69314735730637872e0;
            f0 *= x;
            f0 += .999999998825884004e0;
            f0 *= 1.41421356237309504880167887;
	    if (f0 != 0) {
		temp = f0;
		AUGMENTFLOATEXPONENT(temp, i);
		f0 = temp;
	    }
	    return(f0);
        }
    } else
        return(1.0);
}
@


1.1
log
@Initial revision
@
text
@@
