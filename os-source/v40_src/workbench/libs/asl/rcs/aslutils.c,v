head     38.3;
branch   ;
access   ;
symbols  ;
locks    davidj:38.3; strict;
comment  @ * @;


38.3
date     92.03.03.13.37.41;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.02.12.55.34;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     92.01.16.16.33.45;  author vertex;  state Exp;
branches ;
next     ;


desc
@ASL utility functions
@


38.3
log
@*** empty log message ***
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/memory.h>
#include <intuition/intuition.h>
#include <intuition/sghooks.h>
#include <utility/tagitem.h>
#include <graphics/text.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/utility_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/graphics_protos.h>
#include <clib/intuition_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/intuition_pragmas.h>

#include "asl.h"
#include "aslbase.h"
#include "aslutils.h"


/*****************************************************************************/


struct Window *AslOpenWindow(ULONG tag,...)
{
    return(OpenWindowTagList(NULL,(struct TagItem *) &tag));
}


/*****************************************************************************/


VOID AslCloseWindow(struct Window *wp, BOOL others)
{
struct IntuiMessage *msg;
struct Node         *succ;

    ClearMenuStrip(wp);

    if (wp->UserPort)
    {
        Forbid();

        msg = (struct IntuiMessage *) wp->UserPort->mp_MsgList.lh_Head;
        while (succ = msg->ExecMessage.mn_Node.ln_Succ)
        {
            if (msg->IDCMPWindow == wp)
            {
                Remove(msg);
                ReplyMsg(msg);
            }
            msg = (struct IntuiMessage *) succ;
        }

        if (others)
            wp->UserPort = NULL;

        ModifyIDCMP(wp,NULL);
        Permit();
    }

    CloseWindow(wp);
}


/*****************************************************************************/


ULONG AslPackBoolTags(ULONG flags, struct TagItem *tags, ULONG mappers, ...)
{
    return(PackBoolTags(flags,tags,(struct TagItem *)&mappers));
}


/*****************************************************************************/


VOID AslDrawBevelBox(struct Window *wp, WORD x, WORD y, WORD w, WORD h, ULONG tags, ...)
{
    DrawBevelBoxA(wp->RPort,x+wp->BorderLeft,y+wp->BorderTop,
                            w,h,(struct TagItem *)&tags);
}


/*****************************************************************************/


VOID StripExtension(STRPTR name, STRPTR extension)
{
UWORD nlen,xlen;

    nlen = strlen(name);
    xlen = strlen(extension);
    if (nlen >= xlen)
        if (Stricmp(&name[nlen-xlen],extension) == 0)
            name[nlen-xlen] = 0;
}


/*****************************************************************************/


VOID BtoC(APTR bstr, STRPTR string)
{
STRPTR ptr;
UBYTE  i;
UBYTE  len;

    ptr = bstr;
    len = ptr[0];
    i   = 0;
    while (i < len)
    {
        string[i] = ptr[++i];
    }
    string[i] = 0;
}
@


38.2
log
@Removed edit hook functions
@
text
@d106 20
@


38.1
log
@Initial V38 RCS checkin
@
text
@a106 58


/*****************************************************************************/


ULONG ASM TextEditHook(REG(a0) struct Hook *hook, REG(a2) struct SGWork *sgw,
                       REG(a1) ULONG *msg)
{
/*
    if (*msg == SGH_KEY)
    {
        if (sgw->IEvent->ie_Code == CURSORUP)
        {
            sgw->Actions |= SGA_REUSE | SGA_END;
        }
        else if (sgw->IEvent->ie_Code == CURSORDOWN)
        {
            sgw->Actions |= SGA_REUSE | SGA_END;
        }
        return(1);
    }
    else
    {
        return(0);
    }
*/
}


/*****************************************************************************/


ULONG ASM NumberEditHook(REG(a0) struct Hook *hook, REG(a2) struct SGWork *sgw,
                         REG(a1) ULONG *msg)
{
/*
    if (*msg == SGH_KEY)
    {
        if (sgw->IEvent->ie_Code == CURSORUP)
        {
            sprintf(sgw->WorkBuffer,"%ld",++sgw->LongInt);
            sgw->NumChars = strlen(sgw->WorkBuffer);
            sgw->Actions |= SGA_REDISPLAY;
        }
        else if (sgw->IEvent->ie_Code == CURSORDOWN)
        {
            sprintf(sgw->WorkBuffer,"%ld",--sgw->LongInt);
            sgw->NumChars = strlen(sgw->WorkBuffer);
            sgw->Actions |= SGA_REDISPLAY;
        }
        return(1);
    }
    else
    {
        return(0);
    }
*/
}
@
