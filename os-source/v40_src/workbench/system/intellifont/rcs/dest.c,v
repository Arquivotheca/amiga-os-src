head     40.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


40.0
date     93.04.19.14.10.27;  author darren;  state Exp;
branches ;
next     37.7;

37.7
date     92.02.07.11.52.09;  author davidj;  state Exp;
branches ;
next     37.6;

37.6
date     91.03.11.14.22.04;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


40.0
log
@Free un-freed lock in SelectDDir().  Fix memory
loss bug.
@
text
@/*
**	$Id: dest.c,v 37.7 92/02/07 11:52:09 davidj Exp Locker: darren $
**
**	Fountain/dest.c -- handle destination font list
**
**	(C) Copyright 1990 Robert R. Burns
**	    All Rights Reserved
*/

#include  "fountain.h"

#define	DB(x)	;

extern struct Library *SysBase;
extern struct Library *DOSBase;
extern struct Library *GadToolsBase;
extern struct Library *IntuitionBase;
extern struct Library *UtilityBase;

extern union StaticPool S;

extern char *GDDirNames[MAXDDIRS + 4];
extern struct Window *Window;
extern struct RastPort *RastPort;
extern struct Gadget *GPDDirNext;
extern struct Gadget *GPDDir;
extern struct Gadget *GPDFace;
extern struct Gadget *GPModify;
extern struct MinList FontsList;
extern int LastDDirIndex;
extern int CurrDDirIndex;
extern struct FontsEntry *CurrDDir;

extern struct MinList DFaceList;

RedisplayDFace ()
{
    struct FontEntry *fe;
    int num = 0;

    DB (kprintf ("RedisplayDFace()\n\n"));
    GT_SetGadgetAttrs (GPDFace, Window, 0, GTLV_Labels, ~0L, TAG_DONE);
    FreeList (&DFaceList);

    if (CurrDDir)
    {
	for (fe = (struct FontEntry *) CurrDDir->fcList.mlh_Head;
	     fe->node.mln_Succ;
	     fe = (struct FontEntry *) fe->node.mln_Succ)
	{
	    num++;
	    AddFace (&DFaceList, fe->amigaName, fe);
	}
    }
    GT_SetGadgetAttrs (GPModify, Window, 0, GA_Disabled, ((num) ? FALSE : TRUE), TAG_DONE);
    GT_SetGadgetAttrs (GPDFace, Window, 0, GTLV_Labels, &DFaceList, TAG_DONE);
}

SelectDDirNext (int newDDirNum)
{
    DB (kprintf ("SelectDDirNext\n"));
    if (LastDDirIndex >= 0)
    {
	if ((CurrDDir == 0) || (newDDirNum > LastDDirIndex))
	{
	    if (CurrDDirIndex > (LastDDirIndex / 2))
	    {
		CurrDDirIndex = 0;	/* roll up to zero */
		CurrDDir = (struct FontsEntry *) FontsList.mlh_Head;
	    }
	    else
	    {
		CurrDDirIndex = LastDDirIndex;	/* roll back to last */
		CurrDDir = (struct FontsEntry *) FontsList.mlh_TailPred;
	    }
	    DB (kprintf ("GTCY_Active, %ld\n", CurrDDirIndex));
	    GT_SetGadgetAttrs (GPDDirNext, Window, 0,
			       GTCY_Active, CurrDDirIndex, TAG_DONE);
	}
	else
	{
	    if (CurrDDirIndex > newDDirNum)
	    {
		while (CurrDDirIndex != newDDirNum)
		{
		    CurrDDir = (struct FontsEntry *) CurrDDir->node.mln_Pred;
		    CurrDDirIndex--;
		}
	    }
	    else
	    {
		while (CurrDDirIndex != newDDirNum)
		{
		    CurrDDir = (struct FontsEntry *) CurrDDir->node.mln_Succ;
		    CurrDDirIndex++;
		}
	    }
	    CurrDDirIndex = newDDirNum;
	}

	GT_SetGadgetAttrs (GPDDir, Window, 0, GTST_String, CurrDDir->assignPath, TAG_DONE);
	DB (kprintf ("CurrDDir->assignPath \"%s\"\n", CurrDDir->assignPath));
    }

    RedisplayDFace ();
}

SelectDDir ()
{
    BPTR lock;

    DB (kprintf ("\nSelectDDir\n"));
    CurrDDir = 0;
    if (lock = Lock (((struct StringInfo *) GPDDir->SpecialInfo)->Buffer, SHARED_LOCK))
    {
	if (NameFromLock (lock, S.t.TempBuffer, 256))
	{
	    GT_SetGadgetAttrs (GPDDir, Window, 0, GTST_String, S.t.TempBuffer, TAG_DONE);

	    DB (kprintf ("S.t.TempBuffer \"%s\"\n", S.t.TempBuffer));
	    for (CurrDDirIndex = 0,
		 CurrDDir = (struct FontsEntry *) FontsList.mlh_Head;
		 CurrDDir->node.mln_Succ;
		 CurrDDirIndex++,
		 CurrDDir = (struct FontsEntry *) CurrDDir->node.mln_Succ)
	    {
		if (StrEquNC (S.t.TempBuffer, CurrDDir->assignPath))
		{
		    if (CurrDDirIndex > LastDDirIndex)
		    {
			DB (kprintf ("previously accessed non-Fonts: drawer %s\n", S.t.TempBuffer));
			CurrDDirIndex = MAXDDIRS;
		    }
		    goto srdUpdate;
		}
	    }

	    if (CurrDDir = (struct FontsEntry *) AddFontsEntry (lock, FALSE))
	    {
		CurrDDirIndex = MAXDDIRS;
		if (LastDDirIndex < (MAXDDIRS - 1))
		{
		    LastDDirIndex++;
		    GDDirNames[CurrDDirIndex=LastDDirIndex] = LzS[GADGET_NotFontsPath];
		}
		goto srdUpdate;
	    }
	}
    }

    /* indicate failure */
    CurrDDirIndex = MAXDDIRS + 1;

  srdUpdate:
    DB (kprintf ("GTCY_Active, %ld\n", CurrDDirIndex));
    if(lock)	UnLock (lock);
    GT_SetGadgetAttrs (GPDDirNext, Window, 0, GTCY_Active, CurrDDirIndex, TAG_DONE);
    RedisplayDFace ();
}

SelectDDirReq ()
{
    DirRequester (GPDDir, TITLE_DestinationDrawer);
    SelectDDir ();
}

ValidateDest ()
{
    if ((!CurrDDir) ||
	strcmp (CurrDDir->assignPath, ((struct StringInfo *)GPDDir->SpecialInfo)->Buffer))
    {
	SelectDDir ();
    }
}
@


37.7
log
@bug fixes
@
text
@d2 1
a2 1
**	$Id: dest.c,v 37.6 91/03/11 14:22:04 kodiak Exp Locker: davidj $
a148 1
	UnLock (lock);
d156 1
@


37.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
**	$Id$
d12 2
d22 1
d28 1
d36 1
a36 3


RedisplayDFace()
d39 1
d41 3
a43 3
    DBG("RedisplayDFace()\n");
    GT_SetGadgetAttrs(GPDFace, Window, 0, GTLV_Labels, ~0L, TAG_DONE);
    FreeList(&DFaceList);
d45 2
a46 1
    if (CurrDDir) {
d48 5
a52 3
		fe->node.mln_Succ;
		fe = (struct FontEntry *) fe->node.mln_Succ) {
	    AddFace(&DFaceList, fe->amigaName, fe);
d55 2
a56 1
    GT_SetGadgetAttrs(GPDFace, Window, 0, GTLV_Labels, &DFaceList, TAG_DONE);
d59 1
a59 3

SelectDDirNext(newDDirNum)
int newDDirNum;
d61 8
a68 5
    DBG("SelectDDirNext\n");
    if (LastDDirIndex >= 0) {
	if ((CurrDDir == 0) || (newDDirNum > LastDDirIndex)) {
	    if (CurrDDirIndex > (LastDDirIndex/2)) {
		CurrDDirIndex = 0;			/* roll up to zero */
d71 2
a72 1
	    else {
d76 3
a78 2
	    GT_SetGadgetAttrs(GPDDirNext, Window, 0,
		    GTCY_Active, CurrDDirIndex, TAG_DONE);
d80 6
a85 3
	else {
	    if (CurrDDirIndex > newDDirNum) {
		while (CurrDDirIndex != newDDirNum) {
d90 4
a93 2
	    else {
		while (CurrDDirIndex != newDDirNum) {
d100 3
a102 3
	GT_SetGadgetAttrs(GPDDir, Window, 0,
		GTST_String, CurrDDir->assignPath, TAG_DONE);
	DBG1("CurrDDir->assignPath \"%s\"\n", CurrDDir->assignPath);
d104 2
a105 1
    RedisplayDFace();
d108 1
a108 2

SelectDDir()
d112 1
a112 1
    DBG("SelectDDir\n");
d114 7
a120 6
    if (lock = Lock(((struct StringInfo *) GPDDir->SpecialInfo)->Buffer,
	    SHARED_LOCK)) {
	if (NameFromLock(lock, S.t.TempBuffer, 256)) {
	    GT_SetGadgetAttrs(GPDDir, Window, 0,
			GTST_String, S.t.TempBuffer, TAG_DONE);
	    DBG1("S.t.TempBuffer \"%s\"\n", S.t.TempBuffer);
d122 10
a131 8
		    CurrDDir = (struct FontsEntry *) FontsList.mlh_Head;
		    CurrDDir->node.mln_Succ;
		    CurrDDirIndex++,
		    CurrDDir = (struct FontsEntry *) CurrDDir->node.mln_Succ) {
		if (StrEquNC(S.t.TempBuffer, CurrDDir->assignPath)) {
		    if (CurrDDirIndex > LastDDirIndex) {
			DBG1("previously accessed non-Fonts: drawer %s\n",
				S.t.TempBuffer);
d137 3
a139 1
	    if (CurrDDir = (struct FontsEntry *) AddFontsEntry(lock, FALSE)) {
d141 5
d149 1
a149 1
	UnLock(lock);
d153 1
a153 1
    CurrDDirIndex = MAXDDIRS+1;
d155 4
a158 4
srdUpdate:
    GT_SetGadgetAttrs(GPDDirNext, Window, 0,
		    GTCY_Active, CurrDDirIndex, TAG_DONE);
    RedisplayDFace();
d161 1
a161 2

SelectDDirReq()
d163 2
a164 2
    DirRequester(GPDDir, TITLE_DestinationDrawer);
    SelectDDir();
d167 1
a167 1
ValidateDest()
d169 5
a173 3
    if ((!CurrDDir) || strcmp(CurrDDir->assignPath, ((struct StringInfo *)
	    GPDDir->SpecialInfo)->Buffer))
	SelectDDir();
@
