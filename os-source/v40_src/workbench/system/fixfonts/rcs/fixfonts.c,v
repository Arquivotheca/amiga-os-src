head     36.13;
branch   ;
access   ;
symbols  V37_1:36.7 V36_12:36.7 V36_11:36.6;
locks    ; strict;
comment  @*   @;


36.13
date     92.12.17.16.22.12;  author vertex;  state Exp;
branches ;
next     36.12;

36.12
date     92.12.17.15.53.09;  author vertex;  state Exp;
branches ;
next     36.11;

36.11
date     92.02.26.17.30.23;  author vertex;  state Exp;
branches ;
next     36.10;

36.10
date     91.08.30.10.01.27;  author vertex;  state Exp;
branches ;
next     36.9;

36.9
date     91.04.10.12.47.33;  author vertex;  state Exp;
branches ;
next     36.8;

36.8
date     91.02.18.12.35.54;  author vertex;  state Exp;
branches ;
next     36.7;

36.7
date     90.06.09.15.13.50;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.24.11.40.42;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.18.17.44.24;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.05.09.17.42;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.15.40.50;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.23.13.05.22;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.06.13.41.47;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.07.07.10.46.12;  author kodiak;  state Exp;
branches ;
next     ;


desc
@Build font contents (.font) files from fonts in a directory
@


36.13
log
@*** empty log message ***
@
text
@
/* FixFonts - update the font contents files in FONTS: */

/* TODO: output error messages! */

/* includes */
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <exec/ports.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/exall.h>
#include <graphics/text.h>
#include <libraries/diskfont.h>
#include <workbench/startup.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/diskfont_protos.h>
#include <clib/dos_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/diskfont_pragmas.h>
#include <pragmas/dos_pragmas.h>

/* application includes */
#include "fixfonts_rev.h"


/*****************************************************************************/


#define	LIB_VERSION 36


/*****************************************************************************/


int main(int argc, char *argv[])
{
UBYTE                       exAllBuffer[1500];
struct ExAllControl        *eac;
struct ExAllData           *ead;
struct DevProc             *dvp;
struct MsgPort             *prevFS;
LONG                        prevCurrDir,fontFile;
char                        fontName[MAXFONTNAME];
struct FontContentsHeader  *fch;
LONG                        result;
struct Process	           *process;
BOOL			    more;
BPTR                        lock;

struct Library *SysBase = (*((struct Library **) 4));
struct Library *DOSBase;
struct Library *DiskfontBase;
struct WBStartup *WBenchMsg = NULL;


    process = (struct Process *)FindTask(NULL);
    if (!(process->pr_CLI))
    {
        WaitPort(&process->pr_MsgPort);
        WBenchMsg = (struct WBStartup *) GetMsg(&process->pr_MsgPort);
    }

    result = 20;

    if (DOSBase = OpenLibrary(DOSNAME VERSTAG,LIB_VERSION))
    {
        if (DiskfontBase = OpenLibrary("diskfont.library",34))
        {
            if (eac = (struct ExAllControl *) AllocDosObject(DOS_EXALLCONTROL,0))
            {
                result = 0;

                /* get FONTS: DevProc entry */
                dvp = (struct DevProc *) GetDeviceProc("FONTS:",0);

                while (dvp && (!(SetSignal(0,0) & SIGBREAKF_CTRL_C)) && (result == 0))
                {
                    prevFS      = SetFileSysTask(dvp->dvp_Port);
                    prevCurrDir = CurrentDir(dvp->dvp_Lock);

                    if (lock = DupLock(dvp->dvp_Lock))
                    {
                        eac->eac_LastKey = 0;

                        /* look in all directories in FONTS: directory */
                        do
                        {
                            more = ExAll(lock,(struct ExAllData *)exAllBuffer,sizeof(exAllBuffer),ED_TYPE,eac);
                            if ((!more) && (IoErr() != ERROR_NO_MORE_ENTRIES))
                            {
                                break;
                            }

                            if ((eac->eac_Entries > 0) && (result == 0))
                            {
                                ead = (struct ExAllData *) exAllBuffer;
                                do
                                {
                                    if ((ead->ed_Type > 0) && (strlen(ead->ed_Name) <= 25) && (!(SetSignal(0,0) & SIGBREAKF_CTRL_C)))
                                    {
                                        strcpy(fontName,ead->ed_Name);
                                        strcat(fontName,".font");

                                        if (fch = NewFontContents(dvp->dvp_Lock,fontName))
                                        {
                                            if (fch->fch_NumEntries > 0)
                                            {
                                                if (fontFile = Open(fontName,MODE_NEWFILE))
                                                {
                                                    /* write out font contents file */
                                                    if (Write(fontFile,fch,((LONG *) fch)[-1] - 4) < 0)
                                                    {
                                                        result = 10;
                                                    }
                                                    Close(fontFile);
                                                    SetProtection(fontName,FIBF_EXECUTE);
                                                }
                                                else
                                                {
                                                    result = 10;
                                                }
                                            }
                                            else
                                            {
                                                DeleteFile(fontName);
                                            }
                                            DisposeFontContents(fch);
                                        }
                                        else
                                        {
                                            result = 10;
                                        }
                                    }
                                    ead = ead->ed_Next;
                                }
                                while (ead);
                            }
                        }
                        while (more);

                        UnLock(lock);
                    }
                    CurrentDir(prevCurrDir);
                    SetFileSysTask(prevFS);
                    dvp = GetDeviceProc("FONTS:",dvp);
                }

                if (dvp)
                    FreeDeviceProc(dvp);

                FreeDosObject(DOS_EXALLCONTROL,eac);
            }
            CloseLibrary(DiskfontBase);
        }
        CloseLibrary(DOSBase);
    }

    if (WBenchMsg)
    {
    	Forbid();
    	ReplyMsg(WBenchMsg);
    }

    return(result);
}
@


36.12
log
@Now brings up a requester asking for the disk containing FONTS: instead
of just failing.
@
text
@d54 1
a54 1
struct FontContentsHeader * fch;
d56 1
a56 1
struct Process	          * process;
d58 1
d88 4
a91 1
                    if (dvp->dvp_Lock)
a92 3
                        prevFS      = SetFileSysTask(dvp->dvp_Port);
                        prevCurrDir = CurrentDir(dvp->dvp_Lock);

d98 1
a98 1
                            more = ExAll(dvp->dvp_Lock,(struct ExAllData *)exAllBuffer,sizeof(exAllBuffer),ED_TYPE,eac);
d151 1
a151 2
                        CurrentDir(prevCurrDir);
                        SetFileSysTask(prevFS);
d153 2
a158 1
                {
a159 1
                }
@


36.11
log
@Now clears the E protection bits on the .font files it generates
@
text
@a44 16
char *verTag = VERSTAG;


/*****************************************************************************/


typedef struct ExAllData	* ExAllDataPtr;
typedef struct ExAllControl	* ExAllControlPtr;
typedef struct DevProc		* DevProcPtr;


/*****************************************************************************/


kprintf(STRPTR,...);

d48 5
a52 4
ExAllControlPtr             eac;
ExAllDataPtr                ead;
DevProcPtr                  dvp;
LONG                        fontsDir,prevCurrDir,fontFile;
d74 1
a74 1
    if (DOSBase = OpenLibrary(DOSNAME,LIB_VERSION))
d87 1
a87 3
                    /* get lock on current dvp */
                    eac->eac_LastKey = 0;                     /* use now as null BSTR */
                    if (fontsDir = DoPkt3(dvp->dvp_Port,ACTION_LOCATE_OBJECT,dvp->dvp_Lock,MKBADDR(&eac->eac_LastKey),SHARED_LOCK))
d89 4
a92 1
                        prevCurrDir = CurrentDir(fontsDir);
d97 1
a97 1
                            more = ExAll(fontsDir,(ExAllDataPtr)exAllBuffer,sizeof(exAllBuffer),ED_TYPE,eac);
d105 1
a105 1
                                ead = (ExAllDataPtr) exAllBuffer;
d113 1
a113 1
                                        if (fch = NewFontContents(fontsDir,fontName))
d151 1
a151 1
                        UnLock(fontsDir);
@


36.10
log
@*** empty log message ***
@
text
@d139 1
@


36.9
log
@Fixed FreeDosObject of wrong type
@
text
@@


36.8
log
@Size went from 3452 to 832 bytes and executable now pure
Fixed enforcer problems on low-memory
Fixed bad handling of CTRL-C (wasn't freeing resources)
Moved from Sun build to Amiga
General rewrite of the whole shebang
@
text
@d174 1
a174 1
                FreeDosObject(DOS_FIB, eac);
@


36.7
log
@fixes DoPkt3 lock name to be address of null BSTR, not null for BSTR
@
text
@a0 26
/*
**	$Id: fixfonts.c,v 36.6 90/04/24 11:40:42 kodiak Exp Locker: kodiak $
**
**      FixFonts - update the font contents files in FONTS:
**
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
*/
#ifdef	DEBUG
#define	D(a)	kprintf a
#else
#define	D(a)
#endif

#include        "exec/types.h"
#include        "exec/nodes.h"
#include        "exec/lists.h"
#include        "exec/memory.h"
#include        "exec/ports.h"
#include        "dos/dos.h"
#include	"dos/dosextens.h"
#include	"dos/exall.h"
#include        "graphics/text.h"
#include        "libraries/diskfont.h"

#include	"fixfonts_rev.h"
d2 1
a2 2
extern struct Library *SysBase;
extern struct Library *DOSBase;
d4 1
a4 2
char *verTag = VERTAG;
struct Library *DiskfontBase;
d6 51
a56 1
ULONG ExAllData[100*3];		/* enough for 100 entries */
a57 20
/****** FixFonts *****************************************************
*
*   NAME
*       FixFonts - update the font contents files in FONTS:
*
*   FUNCTION
*       This function looks at all directories in the FONTS:
*       directory and updates the appropriate font contents files.
*       Each directory is searched for disk fonts.
*
*********************************************************************/
main()
{
  struct ExAllControl *eac;
  struct ExAllData *ead;
  struct DevProc *dvp;
  LONG fontsDir, prevCurrDir, fontFile;
  char fontName[MAXFONTNAME];
  struct FontContentsHeader *fch;
  int result, more, length, actual;
d59 1
a59 99
  result = 20;
  D(("0x%06lx FixFonts\n", FindTask(0)));
  if ((SysBase->lib_Version < 36) || (DOSBase->lib_Version < 36))
    return(result);
  if (!(DiskfontBase = (struct Library *) OpenLibrary("diskfont.library", 34)))
    return(result);
  D(("0x%06lx diskfont.library 34 opened\n", FindTask(0)));
  /* allocate the necessary buffers */
  eac = (struct ExAllControl *) AllocDosObject(DOS_EXALLCONTROL, 0);
  if (eac) {
    D(("0x%06lx eac allocated\n", FindTask(0)));
    result = 10;
    /* get FONTS: DevProc entry */
    dvp = (struct DevProc *) GetDeviceProc("FONTS:", 0);
    D(("initial dvp 0x%lx\n", dvp));
    while (dvp && (!(SetSignal(0, 0) & SIGBREAKF_CTRL_C))) {
      /* get lock on current dvp */
      eac->eac_LastKey = 0;			/* use now as null BSTR */
      fontsDir = DoPkt3(dvp->dvp_Port, ACTION_LOCATE_OBJECT,
	  dvp->dvp_Lock, MKBADDR(&eac->eac_LastKey), SHARED_LOCK);
      D(("fontsDir 0x%lx\n", fontsDir));
      if (fontsDir) {
        D(("0x%06lx FONTS: locked\n", FindTask(0)));
        prevCurrDir = CurrentDir(fontsDir);
	/* look in all directories in FONTS: directory */
	result = 0;
	more = 1;
	while ((result == 0) && (more) &&
	    (!(SetSignal(0, 0) & SIGBREAKF_CTRL_C))) {
	  more = ExAll(fontsDir, ExAllData, sizeof(ExAllData), ED_TYPE, eac);
	  if ((!more) && (IoErr() != ERROR_NO_MORE_ENTRIES)) {
	    result = 10;
	    break;
	  }
	  if (eac->eac_Entries == 0) {
	    continue;
	  }
	  ead = (struct ExAllData *) ExAllData;
	  do {
	    if ((ead->ed_Type > 0) && (strlen(ead->ed_Name) <= 25)) {
	      D(("0x%06lx   \"%s\" is a potential directory\n", FindTask(0),
		  ead->ed_Name));
	      strcpy(fontName, ead->ed_Name);
	      strcat(fontName, ".font");
	      D(("0x%06lx   association with font \"%s\"\n", FindTask(0),
		  fontName));
	      if (fch = (struct FontContentsHeader *)
		  NewFontContents(fontsDir, fontName)) {
		D(("0x%06lx     NewFontContents was successful\n",
		    FindTask(0)));
		if (fch->fch_NumEntries > 0) {
		  D(("0x%06lx     %ld entries\n", FindTask(0),
		      fch->fch_NumEntries));
		  if (fontFile = Open(fontName, MODE_NEWFILE)) {
		    D(("0x%06lx     new contents file opened\n", FindTask(0)));
		    /* write out font contents file */
		    length = ((LONG *) fch)[-1] - 4;
		    actual = Write(fontFile, fch, length);
		    if (length != actual) {
		      D(("0x%06lx     write error\n", FindTask(0)));
		      result = 10;	/* terminate */
		    }
		    D(("0x%06lx     new contents file written\n",
			FindTask(0)));
		    Close(fontFile);
		    D(("0x%06lx     new contents file closed\n",
			FindTask(0)));
		  } /* Open */
		  else {
		    result = 10;
		  }
		} /* n > 0 */
		else {
		  D(("0x%06lx     no entries, font contents deleted\n",
		      FindTask(0)));
		  DeleteFile(fontName);
		}
		DisposeFontContents(fch);
	      } /* NewFontContents */
	      else {
		result = 10;
	      }
	    } /* directory & name len OK */
	    ead = ead->ed_Next;
	  } /* do */
	    while (ead);
	} /* while more ExAll */
        CurrentDir(prevCurrDir);
      } /* fontsDir locked */
      UnLock(fontsDir);
      dvp = (struct DevProc *) GetDeviceProc("FONTS:", dvp);
      D(("next dvp 0x%lx\n", dvp));
    } /* while dvp */
    FreeDosObject(DOS_FIB, eac);
  } /* AllocDosObject */
  CloseLibrary(DiskfontBase);
  D(("0x%06lx result %ld\n", FindTask(0), result));
  return(result);
}
d61 1
a61 10
strcpy( to, from )
register char *to, *from;
{
    do {
	*to++ = *from;
    } while( *from++ );
}
    
strcat( to, from )
register char *to, *from;
d63 10
a72 1
    while( *to ) to++;
d74 4
a77 2
    strcpy( to, from );
}
a78 4
strlen( s )
register char *s;
{
    register i = 0;
d80 106
a185 1
    while( *s++ ) i++;
d187 1
a187 1
    return( i );
a188 1

@


36.6
log
@add $VER string
@
text
@d2 1
a2 1
**	$Id: fixfonts.c,v 36.5 90/04/18 17:44:24 kodiak Exp $
d76 1
a76 1
	  dvp->dvp_Lock, MKBADDR(eac->eac_LastKey), SHARED_LOCK);
@


36.5
log
@second cut at ExAll code, tested a little and working
@
text
@d2 1
a2 1
**	$Id$
d26 2
d30 2
@


36.4
log
@first cut at ExAll code, w/ redundant checking & initialization
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/WB/fixfonts/RCS/fixfonts.c,v 36.3 90/04/02 15:40:50 kodiak Exp Locker: kodiak $
a8 1
#define	DEBUG
a44 1
  struct FileInfoBlock *fib;
d51 1
a51 1
  int entries, result, length, actual;
a60 1
  fib = (struct FileInfoBlock *) AllocDosObject(DOS_FIB, 0);
d62 2
a63 2
  if (fib && eac) {
    D(("0x%06lx fib & eac allocated\n", FindTask(0)));
d70 1
a70 1
      fib->fib_FileName[0] = 0;			/* use now as null BSTR */
d72 1
a72 1
	  dvp->dvp_Lock, MKBADDR(fib->fib_FileName), SHARED_LOCK);
d74 2
a75 3
      if (fontsDir && Examine(fontsDir, fib) &&
          (fib->fib_DirEntryType >= 0)) {
        D(("0x%06lx FONTS: locked, examined, & is a directory\n", FindTask(0)));
d79 11
a89 5
	eac->eac_LastKey = 0;
	eac->eac_MatchString = 0;
	eac->eac_MatchFunc = 0;
	while ((result == 0) && (!(SetSignal(0, 0) & SIGBREAKF_CTRL_C)) &&
	    ExAll(fontsDir, ExAllData, sizeof(ExAllData), ED_TYPE, eac)) {
d91 1
a91 1
	  for (entries = eac->eac_Entries; entries > 0; entries--) {
d93 2
a94 2
	      D(("0x%06lx   \"%s\" is a potential directory\n", ead->ed_Name,
		  FindTask(0)));
d137 3
a139 4
	  } /* for ExAll entries */
	} /* while ExAll */
	if ((result == 0) && (IoErr() != ERROR_NO_MORE_ENTRIES))
	  result = 10;
d141 2
a142 2
      } /* locked, examined, and is directory */
      UnLock(fontsDir);				/* (can be null) */
d146 1
a146 1
    FreeDosObject(DOS_FIB, fib);
@


36.3
log
@for rcs 4.x header change
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/WB/fixfonts/RCS/fixfonts.c,v 36.2 90/02/23 13:05:22 kodiak Exp Locker: kodiak $
d9 1
d23 1
d31 2
d47 2
d53 1
a53 1
  int exnext, result, length, actual;
d62 5
a66 3
  /* allocate the necessary FileInfoBlocks */
  if (fib = (struct FileInfoBlock *) AllocDosObject(DOS_FIB, 0)) {
    D(("0x%06lx fib allocated\n", FindTask(0)));
d73 2
a74 2
      fib->fib_FileName[0] = 0;			/* create null BSTR */
      fontsDir = DoPkt(dvp->dvp_Port, ACTION_LOCATE_OBJECT,
d83 3
d87 7
a93 6
	    ExNext(fontsDir, fib)) {
	  if (fib->fib_DirEntryType > 0) {
	    D(("0x%06lx   ExNext is a directory\n", FindTask(0)));
	    /* this is a potential font directory */
	    strcpy(fontName, fib->fib_FileName);
	    if (strlen(fontName) <= 25) {
d133 4
a136 3
	    } /* name len OK */
	  } /* is directory */
	} /* while ExNext */
@


36.2
log
@supports assign paths in FONTS:
requires V36
@
text
@d2 1
a2 1
**	$Header$
@


36.1
log
@turn off debugging
@
text
@d1 11
a11 1
/* #define	D(a)	kprintf a */
d13 1
d20 2
a22 2
#include        "libraries/dos.h"
#include	"libraries/dosextens.h"
d25 2
d43 1
d51 21
a71 9
  if (DiskfontBase = (struct Library *) OpenLibrary("diskfont.library", 34)) {
    D(("0x%06lx diskfont.library 34 opened\n", FindTask(0)));
    /* allocate the necessary FileInfoBlocks */
    if (fib = (struct FileInfoBlock *) AllocMem(sizeof(*fib), MEMF_PUBLIC)) {
      D(("0x%06lx fib allocated\n", FindTask(0)));
      result = 10;
      /* get the directory of FONTS: assign */
      if (fontsDir = Lock("FONTS:", SHARED_LOCK)) {
        D(("0x%06lx FONTS: locked\n", FindTask(0)));
d73 29
a101 20
        if (Examine(fontsDir, fib) != 0) {
          D(("0x%06lx FONTS: examined\n", FindTask(0)));
          if (fib->fib_DirEntryType >= 0) {
            D(("0x%06lx FONTS: is a directory\n", FindTask(0)));
            /* look in all directories in FONTS: directory */
            result = 0;
            do {
              exnext = ExNext(fontsDir, fib);
              D(("0x%06lx   next entry in FONTS:\n", FindTask(0)));
              if ((exnext != 0) && (fib->fib_DirEntryType > 0)) {
                D(("0x%06lx   entry is a directory\n", FindTask(0)));
                /* this is a potential font directory */
                strcpy(fontName, fib->fib_FileName);
                if (strlen(fontName) <= 25) {
                  strcat(fontName, ".font");
		  D(("0x%06lx   association with font \"%s\"\n", FindTask(0),
		      fontName));
                  if (fch = (struct FontContentsHeader *)
                      NewFontContents(fontsDir, fontName)) {
		    D(("0x%06lx     NewFontContents was successful\n",
d103 6
a108 27
		    if (fch->fch_NumEntries > 0) {
		      D(("0x%06lx     %ld entries\n", FindTask(0),
			  fch->fch_NumEntries));
                      fontFile = Open(fontName, MODE_NEWFILE);
                      if (fontFile != 0) {
			D(("0x%06lx     new contents file opened\n",
			    FindTask(0)));
                        /* write out font contents file */
			length = ((LONG *) fch)[-1] - 4;
                        actual = Write(fontFile, fch, length);
			if (length != actual) {
			  D(("0x%06lx     write error\n", FindTask(0)));
			  exnext = 0;	/* terminate */
			}
			D(("0x%06lx     new contents file written\n",
			    FindTask(0)));
                        Close(fontFile);
			D(("0x%06lx     new contents file closed\n",
			    FindTask(0)));
		      }
                      else {
			result = 10;
			exnext=0;
		      }
		    }
		    else DeleteFile(fontName);
                    DisposeFontContents(fch);
d110 16
a125 9
                  else result = 10;
                }
              }
            }
              while ((exnext != 0) && (!(SetSignal(0, 0) & SIGBREAKF_CTRL_C)));
            if ((exnext == 0) && (IoErr() != ERROR_NO_MORE_ENTRIES))
              result = 10;
          }
        }
d127 8
a134 6
        UnLock(fontsDir);
      }
      FreeMem(fib, sizeof(*fib));
    }
    CloseLibrary(DiskfontBase);
  }
@


36.0
log
@initial from 1.3 gamma 8
@
text
@d1 3
a3 3
/*#define	D(f)	f	*/
/*#define	dprintf	kprintf	*/
#define	D(f)
d36 1
a36 1
  D(dprintf("FixFonts\n"));
d38 1
a38 1
    D(dprintf("diskfont.library 34 opened\n"));
d41 1
a41 1
      D(dprintf("fib allocated\n"));
d45 1
a45 1
        D(dprintf("FONTS: locked\n"));
d48 1
a48 1
          D(dprintf("FONTS: examined\n"));
d50 1
a50 1
            D(dprintf("FONTS: is a directory\n"));
d55 1
a55 1
              D(dprintf("  next entry in FONTS:\n"));
d57 1
a57 1
                D(dprintf("  entry is a directory\n"));
d62 2
a63 1
		  D(dprintf("  association with font \"%s\"\n", fontName));
d66 2
a67 1
		    D(dprintf("    NewFontContents was successful\n"));
d69 2
a70 1
		      D(dprintf("    %ld entries\n", fch->fch_NumEntries));
d73 2
a74 1
			D(dprintf("    new contents file opened\n"));
d79 1
a79 1
			  D(dprintf("    write error\n"));
d82 2
d85 2
d112 1
a112 1
  D(dprintf("result %ld\n", result));
@
