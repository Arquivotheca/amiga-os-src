head     38.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


38.7
date     92.07.24.11.35.23;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.26.17.27.55;  author davidj;  state Exp;
branches ;
next     38.5;

38.5
date     91.12.13.16.40.36;  author davidj;  state Exp;
branches ;
next     38.4;

38.4
date     91.12.13.10.02.39;  author davidj;  state Exp;
branches ;
next     38.3;

38.3
date     91.12.12.15.30.22;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     91.12.12.15.17.56;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.26.12.26.08;  author davidj;  state Exp;
branches ;
next     38.0;

38.0
date     91.11.26.11.30.08;  author eric;  state Exp;
branches ;
next     ;


desc
@Icon positioning tool.
@


38.7
log
@*** empty log message ***
@
text
@
#include <exec/types.h>
#include <intuition/intuition.h>
#include <workbench/workbench.h>
#include <internal/commands.h>
#include <string.h>
#include <stdio.h>

#include <clib/icon_protos.h>
#include <pragmas/icon_pragmas.h>

#include "iconpos_rev.h"


/*****************************************************************************/


#define TEMPLATE	"FILE/A,XPOS/N,YPOS/N,TYPE/K,DXPOS/N,DYPOS/N,DWIDTH/N,DHEIGHT/N,CREATE/S,FREEX/S,FREEY/S,IMAGE/K" CMDREV
#define OPT_FILE	0
#define OPT_XPOS	1
#define OPT_YPOS	2
#define OPT_TYPE	3
#define	OPT_DX		4
#define	OPT_DY		5
#define	OPT_DW		6
#define	OPT_DH		7
#define	OPT_CREATE	8
#define	OPT_FREEX	9
#define	OPT_FREEY	10
#define	OPT_IMAGE	11
#define OPT_COUNT	12


/*****************************************************************************/


LONG main(VOID)
{
struct Library    *SysBase = (*((struct Library **) 4));
struct DosLibrary *DOSBase;
struct Library    *IconBase;
struct DiskObject *tdobj = NULL;
struct DiskObject *dobj;
struct DrawerData *dd;
struct RDargs     *rdargs;
long               opts[OPT_COUNT];
char               buffer[256];
int rc, num, len, newtype = 0, newpos = 0;

    char *inames[] =
    {
	"UNKNOWN",
	"DISK",
	"DRAWER",
	"TOOL",
	"PROJECT",
	"GARBAGE",
	"DEVICE",
	"KICK",
	"APPICON",
	"OTHER"
    };

    rc = RETURN_FAIL;
    if (((DOSBase = (struct DosLibrary *) OpenLibrary ("dos.library", 36))) &&
	((IconBase = OpenLibrary ("icon.library", 0))))
    {

	memset ((char *) opts, 0, sizeof (opts));
	rdargs = ReadArgs (TEMPLATE, opts, NULL);
	if (rdargs == NULL)
	{
	    PrintFault (IoErr (), NULL);
	}
	else
	{
	    rc = RETURN_OK;

	    if (opts[OPT_TYPE])
	    {
		if (!stricmp ((char *) opts[OPT_TYPE], "disk"))
		    newtype = WBDISK;
		if (!stricmp ((char *) opts[OPT_TYPE], "drawer"))
		    newtype = WBDRAWER;
		if (!stricmp ((char *) opts[OPT_TYPE], "tool"))
		    newtype = WBTOOL;
		if (!stricmp ((char *) opts[OPT_TYPE], "project"))
		    newtype = WBPROJECT;
		if (!stricmp ((char *) opts[OPT_TYPE], "garbage"))
		    newtype = WBGARBAGE;
	    }

	    if ((len = strlen ((char *) opts[OPT_FILE])) > 5)
	    {
		if (!strnicmp (&((char *) opts[OPT_FILE])[len - 5], ".info", 5))
		{
		    ((char *) opts[OPT_FILE])[len - 5] = 0;
		}
	    }

	    dobj = GetDiskObject ((char *) opts[OPT_FILE]);

	    if (opts[OPT_IMAGE])
	    {
		if (!(tdobj = GetDiskObject ((char *) opts[OPT_IMAGE])))
		{
		    PutStr("Couldn't open image source!\n");
		    rc = RETURN_FAIL;
		}
	    }

	    if (rc == RETURN_OK)
	    {
		if (!dobj && opts[OPT_CREATE])
		{
		    if (newtype)
		    {
			if (dobj = GetDefDiskObject (newtype))
			{
			    PutStr("Create icon\n");
			}
		    }
		    else
		    {
			PutStr("Must specify icon type!\n");
		    }
		}

		if (dobj)
		{
		    if (opts[OPT_XPOS])
		    {
			num = *(long *) opts[OPT_XPOS];
			dobj->do_CurrentX = (num < 0) ? NO_ICON_POSITION : num;
			newpos = TRUE;
		    }

		    if (opts[OPT_FREEX])
		    {
			dobj->do_CurrentX = NO_ICON_POSITION;
			newpos = TRUE;
		    }

		    if (opts[OPT_YPOS])
		    {
			num = *(long *) opts[OPT_YPOS];
			dobj->do_CurrentY = (num < 0) ? NO_ICON_POSITION : num;
			newpos = TRUE;
		    }

		    if (opts[OPT_FREEY])
		    {
			dobj->do_CurrentY = NO_ICON_POSITION;
			newpos = TRUE;
		    }

		    if (opts[OPT_TYPE])
		    {
			dobj->do_Type = newtype;
		    }

		    sprintf (buffer,"%s type=%s ",
			     (char *) opts[OPT_FILE], inames[dobj->do_Type]);
                    PutStr(buffer);

		    if (dobj->do_CurrentX == NO_ICON_POSITION)
		    {
			PutStr("FREEX FREEY");
		    }
		    else
		    {
			sprintf(buffer,"%ld %ld", (long) dobj->do_CurrentX, (long) dobj->do_CurrentY);
			PutStr(buffer);
		    }

		    if (dd = dobj->do_DrawerData)
		    {
			if (opts[OPT_DX])
			{
			    num = *(long *) opts[OPT_DX];
			    dd->dd_NewWindow.LeftEdge = num;
			    newpos = TRUE;
			}

			if (opts[OPT_DY])
			{
			    num = *(long *) opts[OPT_DY];
			    dd->dd_NewWindow.TopEdge = num;
			    newpos = TRUE;
			}

			if (opts[OPT_DW])
			{
			    num = *(long *) opts[OPT_DW];
			    dd->dd_NewWindow.Width = num;
			    newpos = TRUE;
			}

			if (opts[OPT_DH])
			{
			    num = *(long *) opts[OPT_DH];
			    dd->dd_NewWindow.Height = num;
			    newpos = TRUE;
			}

			sprintf (buffer," DXPOS %ld DYPOS %ld DWIDTH %ld DHEIGHT %ld\n",
				 (LONG) dd->dd_NewWindow.LeftEdge,
				 (LONG) dd->dd_NewWindow.TopEdge,
				 (LONG) dd->dd_NewWindow.Width,
				 (LONG) dd->dd_NewWindow.Height);
                        PutStr(buffer);
		    }
		    PutStr("\n");

		    if (tdobj)
		    {
			dobj->do_Gadget.GadgetRender = tdobj->do_Gadget.GadgetRender;
			dobj->do_Gadget.SelectRender = tdobj->do_Gadget.SelectRender;
			dobj->do_Gadget.Width = tdobj->do_Gadget.Width;
			dobj->do_Gadget.Height = tdobj->do_Gadget.Height;
			newtype = TRUE;
		    }

		    if (newtype || newpos)
		    {
			PutDiskObject ((char *) opts[OPT_FILE], dobj);
		    }

		    FreeDiskObject (dobj);
		}
		else
		{
		    PrintFault (IoErr (), NULL);
		}

		if (tdobj)
		    FreeDiskObject (tdobj);
	    }
	}

	CloseLibrary (IconBase);
	CloseLibrary ((struct Library *) DOSBase);
    }
    else
    {
	OPENFAIL
    };

    return (rc);
}
@


38.6
log
@Added IMAGE keyword for change the image.
@
text
@d1 2
d5 3
a7 1
#include "string.h"
d9 2
a10 1
#include "internal/commands.h"
d12 1
a12 2
#include "clib/icon_protos.h"
#include "pragmas/icon_pragmas.h"
d15 1
a15 3
#include "iconpos_rev.h"

void vprintf ();
a16 1
#define TEMPLATE   "FILE/A,XPOS/N,YPOS/N,TYPE/K,DXPOS/N,DYPOS/N,DWIDTH/N,DHEIGHT/N,CREATE/S,FREEX/S,FREEY/S,IMAGE/K" CMDREV
d18 1
d33 5
a37 1
int cmd_iconpos (void)
d39 10
a48 9
    struct Library *SysBase = (*((struct Library **) 4));
    int rc, num, len, newtype = 0, newpos = 0;
    struct DiskObject *tdobj = NULL;
    struct DosLibrary *DOSBase;
    struct Library *IconBase;
    struct DiskObject *dobj;
    struct DrawerData *dd;
    struct RDargs *rdargs;
    long opts[OPT_COUNT];
d107 1
a107 1
		    vprintf ("couldn't open image source!\n", NULL);
d120 1
a120 1
			    vprintf ("create icon\n", NULL);
d125 1
a125 1
			vprintf ("must specify icon type!\n", NULL);
d162 1
a162 1
		    vprintf ("%s type=%s ",
d164 1
d168 1
a168 1
			vprintf ("FREEX FREEY");
d172 2
a173 1
			vprintf ("%ld %ld", (long) dobj->do_CurrentX, (long) dobj->do_CurrentY);
d206 1
a206 1
			vprintf (" DXPOS %ld DYPOS %ld DWIDTH %ld DHEIGHT %ld\n",
d211 1
d213 1
a213 1
		    vprintf ("\n", NULL);
a249 13
}


void vprintf (char *fmt, char *args)
{
    struct Library *SysBase = (*((struct Library **) 4));
    struct Library *DOSBase;

    if (DOSBase = OpenLibrary ("dos.library", 36))
    {
	VFPrintf (Output (), fmt, (LONG *) & args);
	CloseLibrary (DOSBase);
    }
@


38.5
log
@changed output string
@
text
@d15 1
a15 1
#define TEMPLATE   "FILE/A,XPOS/N,YPOS/N,TYPE/K,DXPOS/N,DYPOS/N,DWIDTH/N,DHEIGHT/N,CREATE/S,FREEX/S,FREEY/S" CMDREV
d28 2
a29 1
#define OPT_COUNT	11
d35 1
d95 2
a96 1
	    if (!dobj && opts[OPT_CREATE])
d98 1
a98 8
		if (newtype)
		{
		    if (dobj = GetDefDiskObject (newtype))
		    {
			vprintf ("create icon\n", NULL);
		    }
		}
		else
d100 2
a101 1
		    vprintf ("must specify icon type!\n", NULL);
d105 1
a105 1
	    if (dobj)
d107 1
a107 1
		if (opts[OPT_XPOS])
d109 11
a119 3
		    num = *(long *) opts[OPT_XPOS];
		    dobj->do_CurrentX = (num < 0) ? NO_ICON_POSITION : num;
		    newpos = TRUE;
d122 1
a122 1
		if (opts[OPT_FREEX])
d124 6
a129 3
		    dobj->do_CurrentX = NO_ICON_POSITION;
		    newpos = TRUE;
		}
d131 5
a135 6
		if (opts[OPT_YPOS])
		{
		    num = *(long *) opts[OPT_YPOS];
		    dobj->do_CurrentY = (num < 0) ? NO_ICON_POSITION : num;
		    newpos = TRUE;
		}
d137 6
a142 5
		if (opts[OPT_FREEY])
		{
		    dobj->do_CurrentY = NO_ICON_POSITION;
		    newpos = TRUE;
		}
d144 5
a148 4
		if (opts[OPT_TYPE])
		{
		    dobj->do_Type = newtype;
		}
d150 4
a153 2
		vprintf ("%s type=%s ",
			 (char *) opts[OPT_FILE], inames[dobj->do_Type]);
d155 2
a156 8
		if (dobj->do_CurrentX == NO_ICON_POSITION)
		{
		    vprintf ("FREEX FREEY");
		}
		else
		{
		    vprintf ("%ld %ld", (long) dobj->do_CurrentX, (long) dobj->do_CurrentY);
		}
d158 5
a162 3
		if (dd = dobj->do_DrawerData)
		{
		    if (opts[OPT_DX])
d164 1
a164 3
			num = *(long *) opts[OPT_DX];
			dd->dd_NewWindow.LeftEdge = num;
			newpos = TRUE;
d167 1
a167 1
		    if (opts[OPT_DY])
d169 33
a201 3
			num = *(long *) opts[OPT_DY];
			dd->dd_NewWindow.TopEdge = num;
			newpos = TRUE;
d203 1
d205 1
a205 1
		    if (opts[OPT_DW])
d207 5
a211 3
			num = *(long *) opts[OPT_DW];
			dd->dd_NewWindow.Width = num;
			newpos = TRUE;
d214 1
a214 1
		    if (opts[OPT_DH])
d216 1
a216 3
			num = *(long *) opts[OPT_DH];
			dd->dd_NewWindow.Height = num;
			newpos = TRUE;
d219 1
a219 5
		    vprintf (" DXPOS %ld DYPOS %ld DWIDTH %ld DHEIGHT %ld\n",
			     (LONG) dd->dd_NewWindow.LeftEdge,
			     (LONG) dd->dd_NewWindow.TopEdge,
			     (LONG) dd->dd_NewWindow.Width,
			     (LONG) dd->dd_NewWindow.Height);
d221 1
a221 3
		vprintf ("\n", NULL);

		if (newtype || newpos)
d223 1
a223 1
		    PutDiskObject ((char *) opts[OPT_FILE], dobj);
d226 2
a227 5
		FreeDiskObject (dobj);
	    }
	    else
	    {
		PrintFault (IoErr (), NULL);
@


38.4
log
@added FREEX/S and FREEY/S
@
text
@a109 37
		if (dd = dobj->do_DrawerData)
		{
		    if (opts[OPT_DX])
		    {
			num = *(long *) opts[OPT_DX];
			dd->dd_NewWindow.LeftEdge = num;
			newpos = TRUE;
		    }

		    if (opts[OPT_DY])
		    {
			num = *(long *) opts[OPT_DY];
			dd->dd_NewWindow.TopEdge = num;
			newpos = TRUE;
		    }

		    if (opts[OPT_DW])
		    {
			num = *(long *) opts[OPT_DW];
			dd->dd_NewWindow.Width = num;
			newpos = TRUE;
		    }

		    if (opts[OPT_DH])
		    {
			num = *(long *) opts[OPT_DH];
			dd->dd_NewWindow.Height = num;
			newpos = TRUE;
		    }

		    vprintf ("drawerdata %ld,%ld,%ld,%ld\n",
			     (LONG) dd->dd_NewWindow.LeftEdge,
			     (LONG) dd->dd_NewWindow.TopEdge,
			     (LONG) dd->dd_NewWindow.Width,
			     (LONG) dd->dd_NewWindow.Height);
		}

d146 1
a146 1
		    vprintf ("-1 -1\n");
d150 38
a187 1
		    vprintf ("%ld %ld\n", (long) dobj->do_CurrentX, (long) dobj->do_CurrentY);
d189 1
@


38.3
log
@added create/s keyword
@
text
@d15 1
a15 1
#define TEMPLATE   "FILE/A,XPOS/N,YPOS/N,TYPE/K,DXPOS/N,DYPOS/N,DWIDTH/N,DHEIGHT/N,CREATE/S" CMDREV
d26 3
a28 1
#define OPT_COUNT	9
d154 6
d164 6
@


38.2
log
@added CREATE/S keyword
@
text
@d93 1
a93 1
		if (dobj = GetDefDiskObject (newtype))
d95 8
a102 1
		    vprintf ("create icon\n", NULL);
@


38.1
log
@added drawer position & size control.
@
text
@d15 1
a15 1
#define TEMPLATE   "FILE/A,XPOS/N,YPOS/N,TYPE/K,DXPOS/N,DYPOS/N,DWIDTH/N,DHEIGHT/N" CMDREV
d25 2
a26 1
#define OPT_COUNT	8
d90 10
a99 1
	    if (dobj = GetDiskObject ((char *) opts[OPT_FILE]))
@


38.0
log
@added to rcs
@
text
@d13 1
a13 1
void vprintf();
d15 1
a15 1
#define TEMPLATE   "FILE/A,XPOS/N,YPOS/N,TYPE/K" CMDREV
d17 9
a25 5
#define OPT_FILE  0
#define OPT_XPOS  1
#define OPT_YPOS  2
#define OPT_TYPE  3
#define OPT_COUNT   4
d27 10
d38 2
a39 11
int cmd_iconpos(void)
{
   struct Library *SysBase = (*((struct Library **) 4));
   struct DosLibrary *DOSBase;
   struct Library *IconBase;
   int rc, num,len,newtype=0, newpos=0;
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   struct DiskObject *dobj;
   
    char *inames[] = {
d50 1
a50 1
};
d52 10
a61 17
   rc = RETURN_FAIL;
   if (((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) &&
      ((IconBase = OpenLibrary("icon.library", 0)))) {

      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL)PrintFault(IoErr(), NULL);

      else {
	rc=RETURN_OK;

	if(opts[OPT_TYPE]) {
	    if( !stricmp((char *)opts[OPT_TYPE],"disk"))newtype = WBDISK;
	    if( !stricmp((char *)opts[OPT_TYPE],"drawer"))newtype = WBDRAWER;
	    if( !stricmp((char *)opts[OPT_TYPE],"tool"))newtype = WBTOOL;
	    if( !stricmp((char *)opts[OPT_TYPE],"project"))newtype = WBPROJECT;
	    if( !stricmp((char *)opts[OPT_TYPE],"garbage"))newtype = WBGARBAGE;
d63 106
a168 4
	len=strlen((char *)opts[OPT_FILE]);
	if(len>5) {
	    if(!strnicmp( &((char *)opts[OPT_FILE])[len-5],".info",5)) {
		((char *)opts[OPT_FILE])[len-5]=0;
d171 10
a180 34
	dobj = GetDiskObject((char *)opts[OPT_FILE]);
	if(dobj) {
	   if(opts[OPT_XPOS]) {
		num= *(long *)opts[OPT_XPOS];
		dobj->do_CurrentX = (num <0)  ? NO_ICON_POSITION : num;
		newpos=TRUE;
	   }

	   if(opts[OPT_YPOS]) {
		num= *(long *)opts[OPT_YPOS];
		dobj->do_CurrentY = (num <0)  ? NO_ICON_POSITION : num;
		newpos=TRUE;
	   }

	   if(opts[OPT_TYPE])dobj->do_Type = newtype;

	   vprintf("%s type=%s ",
		(char *)opts[OPT_FILE],inames[dobj->do_Type]);
	   if(dobj->do_CurrentX == NO_ICON_POSITION)vprintf("-1 -1\n");
	   else vprintf("%ld %ld\n",(long)dobj->do_CurrentX,(long)dobj->do_CurrentY);

	   if(newtype || newpos){
		PutDiskObject((char *)opts[OPT_FILE], dobj);
	   }
	   FreeDiskObject(dobj);
      	}
	else PrintFault(IoErr(),NULL);

      }
      if(IconBase)CloseLibrary(IconBase);
      CloseLibrary((struct Library *)DOSBase);
      }
  else {OPENFAIL};
  return(rc);
d184 1
a184 3
void vprintf( fmt, args )

char *fmt, *args;
d186 2
a187 2
   struct Library *SysBase = (*((struct Library **) 4));
   struct Library *DOSBase=OpenLibrary("dos.library",36);
d189 5
a193 1
   if(DOSBase)VFPrintf( Output(), fmt, (LONG *)&args );
@
