head	40.18;
access;
symbols;
locks; strict;
comment	@ * @;


40.18
date	93.05.20.22.52.18;	author LPOMA;	state Exp;
branches;
next	38.15;

38.15
date	92.12.16.01.15.14;	author LPOMA;	state Exp;
branches;
next	38.14;

38.14
date	92.11.25.13.00.14;	author LPOMA;	state Exp;
branches;
next	38.10;

38.10
date	92.08.07.01.15.13;	author LPOMA;	state Exp;
branches;
next	38.9;

38.9
date	92.06.23.00.45.27;	author LPOMA;	state Exp;
branches;
next	38.5;

38.5
date	92.03.30.13.53.59;	author LPOMA;	state Exp;
branches;
next	38.1;

38.1
date	91.12.04.18.18.08;	author LPOMA;	state Exp;
branches;
next	;


desc
@CrossDOS for AmigaDOS V2.1
@


40.18
log
@Changed the way I handle and create a Key value for the lock. It is now
more comprehensive and expandable. The lock is guaranteed to be unique.
The constants of the objet are now stored in a struct which is being
pointed to by the Key of the lock.

Added the ability to create a lock for a dummy object. This is needed to
support the default "Disk.info".
@
text
@/* Lock.c **************************************************************
** Copyright 1991 CONSULTRON
*
*      Lock related functions.
*
*************************************************************************/

#include "FS:FS.h"

extern struct ExecBase  *SysBase;
extern struct FS  *fsys;
extern int DOSerror;
extern struct IOStdReq      *diskreq;
extern struct MsgPort       *StatusPort;

static void Add2LockList(struct MLock *lock, struct MLock *newlock );

/*************
* MakeLock()  --- Allocate lock memory and fill minimum values.
*************/
struct MLock *MakeLock(lock, mfib, mode)
struct MLock *lock;
register struct MFileInfoBlock *mfib;
LONG mode;
{
F();
    register struct MLock *newlock;
    register struct MLock *samelock=0;
    register struct KeyPtr *KeyPtr;

    if(fsys->f_LockList)
    {
        samelock=(struct MLock *)&(fsys->f_LockList);
            /* search for other locks */
        while( samelock = (struct MLock *)BADDR(samelock->ml_Link))
        {       /* check if Lock already availiable. If so return with NO LOCK */
            if( (samelock->ml_KeyPtr->kp_dir_ent == mfib->mfib_DiskDirEntry)
                && (samelock->ml_KeyPtr->kp_dir_clust == mfib->mfib_DiskCluster))
            {
                if( (mode == EXCLUSIVE_LOCK)
                    || (samelock->ml_Access == EXCLUSIVE_LOCK))
                {
                    DOSerror = ERROR_OBJECT_IN_USE;   /* found another Lock return NO LOCK */
                    return(DOSFALSE);
                }
                  else break;   /* break out of while loop */
            }
        }
    }

    if(samelock)
    {
        newlock = CopyLock(samelock);
            /* do not inherit filter flags from other locks */
        newlock->ml_lock_ext.le_filt_flags     = mfib->mfib_FileFlags;
        return(newlock);
    }

/*  else   No lock found on the same object */
    if( !(KeyPtr = (struct KeyPtr *)AllocVec(sizeof(struct KeyPtr),MEMF_PUBLIC|MEMF_CLEAR)))
    {
        DOSerror = ERROR_NO_FREE_STORE;
        return(DOSFALSE);
    }

    if( !(newlock = (struct MLock *)AllocVec(sizeof(struct MLock),MEMF_PUBLIC|MEMF_CLEAR)))
    {
        DOSerror = ERROR_NO_FREE_STORE;
        return(DOSFALSE);
    }
      KeyPtr->kp_lock_count                 = 1;
      KeyPtr->kp_dir_ent                    = mfib->mfib_DiskDirEntry;
    if((KeyPtr->kp_dir_clust = mfib->mfib_DiskCluster) == ILLEGAL_CLUST)
    {
        KeyPtr->kp_file_name = *(BSTR *)(mfib->mfib_FileName);
    }
      KeyPtr->kp_file_size                  = mfib->mfib_Size;
      KeyPtr->kp_start_clust                = mfib->mfib_start_clust;
    if( mfib->mfib_Protection & FIBF_WRITE )
    {
        KeyPtr->kp_flags |= FILE_WRITE_PROT_F;
    }

      newlock->ml_KeyPtr                    = KeyPtr;
      newlock->ml_Volume                    = MKBPTR(fsys->f_VolumeNode);
      newlock->ml_Task                      = StatusPort;
      newlock->ml_lock_ext.le_filt_flags    = mfib->mfib_FileFlags;
      newlock->ml_lock_ext.le_file_pos      = 0;

    if( mode != EXCLUSIVE_LOCK) mode        = SHARED_LOCK;
      newlock->ml_Access            = mode;
    Add2LockList(lock, newlock);

    return( newlock );
}


/*************
* CompareVolNode()  --- Make sure Volume node of lock == current Volume node.
*************/
int CompareVolNode(lock)
register struct MLock *lock;
{
F();
    if(lock)
    {
        if(fsys->f_VolumeNode != (struct DosList *)BADDR(lock->ml_Volume))
        {
            DOSerror = ERROR_DEVICE_NOT_MOUNTED;
            return(DOSFALSE);
        }
    }
      else if((fsys->f_FSflags & MF_NODISK))
    {
        DOSerror = ERROR_NO_DISK;
        return(DOSFALSE);
    }
      else if(!(fsys->f_FSflags & MF_FSDISK))
    {
        DOSerror = ERROR_NOT_A_DOS_DISK;
        return(DOSFALSE);
    }
    return(DOSTRUE);
}


/*************
* CompareVolNode_Write()  --- Make sure Volume node of lock ==
*       current Volume node and not write protected.
*************/
int CompareVolNode_Write(lock)
register struct MLock *lock;
{
F();
    int bool = DOSTRUE;

    if((bool = CompareVolNode(lock)) == DOSTRUE)
    {
        if(fsys->f_Diskflags & WRITE_PROT_F)
        {
            DOSerror = ERROR_DISK_WRITE_PROTECTED;
            bool=DOSFALSE;
        }
         else if(lock && (lock->ml_KeyPtr->kp_flags & FILE_WRITE_PROT_F))
        {
            DOSerror = ERROR_WRITE_PROTECTED;   /* Set the DOS error but
                                            return no error from function */
        }
    }
    return(bool);
}


/**********************************************************************
*   Find_File_Mod()  --- Find if any file is modified given the locklist.
*   If file found to be modified - return(DOSTRUE)
*   If file not found to be modified - return(DOSFALSE)
**********************************************************************/
int Find_File_Mod(locklist)
register BPTR locklist;
{
F();
    register struct MLock *lk;
    register BPTR lk_next = locklist;

    while (lk = (struct MLock *) BADDR(lk_next))
    {
        lk_next = lk->ml_Link;
        if(lk->ml_KeyPtr->kp_flags & FILE_MOD_F)
        {   /* Found modified file */
            return(DOSTRUE);
        }
    }
    return(DOSFALSE);
}


/*************
* GetLock()  --- Find specified directory or file and allocate lock.
*************/
struct MLock *GetLock(lock, name, mode)
register struct MLock *lock;
UCHAR *name;    /* BADDR(BSTR) */
LONG mode;
{
F();
    register struct MFileInfoBlock *mfib = (struct MFileInfoBlock *)fsys->f_scratch;
    register struct MLock *newlock = DOSFALSE;
    register struct MFileInfoBlock *newmfib;

    newmfib = FindObject(lock, name, mfib); 
#ifdef MFS
    if(!(newmfib)
        && (mode == SHARED_LOCK)
        && (newmfib = GetDummyObject(name, mfib)));
#endif
    if(newmfib)
    {
        newlock = MakeLock(lock, mfib, mode);
    }
    return(newlock);
}


/**********************************************************************
*   Add2LockList() -- Add the new lock to the current lock list.
*
*   The current lock list is determined by the following criteria in order
*   of priorty:
*   - The dol_LockList of the volume node of the associated lock passed.
*   - The f_LockList of the struct FS.
**********************************************************************/
static void Add2LockList(struct MLock *lock, struct MLock *newlock )
{
F();
    ULONG *locklist;
    register struct DosList *volnode;

    if(     lock
        &&  (volnode = (struct DosList *)BADDR(lock->ml_Volume))
        &&  (volnode->dol_Type == DLT_VOLUME)
        &&  *(locklist = &(volnode->dol_misc.dol_volume.dol_LockList)));
    else locklist = &(fsys->f_LockList);
DPRTF(KPrintF( "\nAdd2LockList: locklist=%lx",locklist));
    newlock->ml_Link            = *locklist;
    *locklist                   = MKBPTR(newlock);
}


/*************
* CopyLock()  --- Duplicate and link specified lock.
*************/
struct MLock *CopyLock(lock)
register struct MLock *lock;
{
F();
    struct MLock *newlock=DOSFALSE;


    if(!lock)       /* lock = 0; get lock on root of filesystem */
    {
        if(!(newlock = GetLock(0,"",SHARED_LOCK)))
        {
            DOSerror = ERROR_OBJECT_IN_USE;   /* if not a shared Lock return NO LOCK */
            return(DOSFALSE);
        }
    }
    else if(lock->ml_Access == SHARED_LOCK)
    {
        if( !(newlock = (struct MLock *)AllocVec(sizeof(struct MLock),MEMF_PUBLIC))) 
        {
            DOSerror = ERROR_NO_FREE_STORE;
            return(DOSFALSE);
        }
        CopyMem( (UBYTE *)lock, (UBYTE *)newlock, sizeof(struct MLock));
        newlock->ml_lock_ext.le_file_pos    = 0;
        newlock->ml_KeyPtr->kp_lock_count++;
        Add2LockList(lock, newlock);
    }
    if(!newlock) DOSerror = ERROR_OBJECT_IN_USE;

    return( newlock );
}


/*************
* FreeLock()  --- Unlink and deallocate lock
*************/
int FreeLock(lock)
register struct MLock *lock;
{
F();
    register struct MLock *lk_prev=0;
    register struct MLock *lk;
    BPTR lk_next;
    register struct DosList *vol;

    if(!lock)
    {
        return(DOSTRUE);
    }

    if(CompareVolNode(lock))
    {       /* if lock from current volume -- use f_LockList */
        vol = fsys->f_VolumeNode;
        lk_prev = (struct MLock *)&(fsys->f_LockList);
    }
     else
    {       /* Lock not from current volume.  Free only if dol_Type is DLT_VOLUME */
        vol = (struct DosList *)BADDR(lock->ml_Volume);
        if(vol->dol_Type == DLT_VOLUME) lk_prev = (struct MLock *)&(vol->dol_misc.dol_volume.dol_LockList);
    }

    if(lk_prev)
    {
        lk = (struct MLock *) BADDR(lk_prev->ml_Link);

        while (lk)
        {
            lk_next = lk->ml_Link;
            if(lk == lock)
            {
                lk_prev->ml_Link = lk_next;   /* unlink from single-link list */

        /* unlink lock from lock list of same object */
                if(--lock->ml_KeyPtr->kp_lock_count == 0)
                {
                    FreeVec((UBYTE *)(lock->ml_KeyPtr));
                }
        /****/
                FreeVec((UBYTE *)lock);

                if( (fsys->f_VolumeNode != vol) && !(vol->dol_misc.dol_volume.dol_LockList))
                {   /* Volume Node should be removed -- Only if:
                    - Not the current Volume and
                    - No outstanding locks */
                    DeleteVolNode(vol);
                }

                return(DOSTRUE);
            }
            lk_prev = lk;
            lk = (struct MLock *) BADDR(lk_next);
        }
    }

    DOSerror = ERROR_INVALID_LOCK;
    return(DOSFALSE);
}


/********************
* Parent()  --- Find Parent directory of the specified lock.  
*   Return new lock to parent or 0 if already at root dir.
*************/
struct MLock *Parent(lock)
register struct MLock *lock;
{
F();
    register struct MFileInfoBlock *mfib = (struct MFileInfoBlock *)fsys->f_scratch;
    register struct MLock *parentlock=0;

    if(!CompareVolNode(lock)) return(DOSFALSE);

    if( !lock )
    {                 /* lock = 0; already at root of filesystem */
        DOSerror = 0;
        return(DOSFALSE);
    }

    mfib->mfib_DiskCluster   = lock->ml_KeyPtr->kp_dir_clust;
    mfib->mfib_DiskDirEntry  = lock->ml_KeyPtr->kp_dir_ent;
    mfib->mfib_DirEntStatus  = MLDE_DIR;

    if(FindParent(mfib) )
    {
        parentlock = MakeLock(lock, mfib, SHARED_LOCK);
    }

    return(parentlock);
}


/*************
* Change_Mode()  --- Change the mode of a FileHandle or FileLock
*               Used for ACTION_CHANGE_MODE
*************/
LONG Change_Mode(type, obj, mode)
LONG type;
LONG obj;
LONG mode;
{
F();
    struct MLock *lock;

    if(type == CHANGE_FH)
    {
        lock = (struct MLock *)((struct FileHandle *)obj)->fh_Arg1;
    }
    else    /* type = CHANGE_LOCK */
    {
        lock = (struct MLock *)((struct FileHandle *)obj);
    }
    if(!CompareVolNode(lock)) return(DOSFALSE);

/* At this time only SHARED_LOCK and EXCLUSIVE_LOCK modes are supported */
/* You can always change an EXCLUSIVE_LOCK to a SHARED_LOCK but not visa-versa */
    switch(mode)
    {
    case EXCLUSIVE_LOCK:
        /* Check if any other open locks of the same object.  If the circular list points to itself then there is no other of the same lock */
        if(lock->ml_KeyPtr->kp_lock_count >= 1)
        {
            DOSerror = ERROR_OBJECT_IN_USE;
            return(DOSFALSE);   /* return fail because another lock on the same object exists */
        }
        break;

    case SHARED_LOCK:
    default:        /* default to shared lock */
        break;
    }
    lock->ml_Access = mode;

    return(DOSTRUE);
}

@


38.15
log
@Make nonexternal functions static for future inlining under SAS C 6.1.
@
text
@d26 1
d29 1
d35 1
a35 1
        while( samelock = (struct MLock *)BADDR(samelock->ml_lock.fl_Link))
d37 2
a38 2
            if( (samelock->ml_lock_ext.le_dir_ent == mfib->mfib_DiskDirEntry)
                && (samelock->ml_lock_ext.le_dir_clust == mfib->mfib_DiskCluster))
d41 1
a41 1
                    || (samelock->ml_lock.fl_Access == EXCLUSIVE_LOCK))
d60 1
a60 1
    if( !(newlock = (struct MLock *)AllocMem(sizeof(struct MLock),MEMF_PUBLIC|MEMF_CLEAR)))
d65 22
a86 9
      newlock->ml_lock.fl_Key               = mfib->mfib_DiskKey;
      ((UBYTE *)&(newlock->ml_lock.fl_Key))[0]  = 
        (UBYTE)((mfib->mfib_DiskDirEntry)%(fsys->f_dirents_block));

      newlock->ml_lock.fl_Volume            = MKBPTR(fsys->f_VolumeNode);
      newlock->ml_lock.fl_Task              = StatusPort;
      newlock->ml_lock_ext.le_dir_clust     = mfib->mfib_DiskCluster;
      newlock->ml_lock_ext.le_dir_ent       = mfib->mfib_DiskDirEntry;
      newlock->ml_lock_ext.le_start_clust   = mfib->mfib_start_clust;
a87 1
      newlock->ml_lock_ext.le_file_size     = mfib->mfib_Size;
d91 1
a91 1
      newlock->ml_lock.fl_Access            = mode;
a93 4
      newlock->ml_lock_ext.le_samelock.mln_Succ =
      newlock->ml_lock_ext.le_samelock.mln_Pred =
        (struct MinNode *)&(newlock->ml_lock_ext);

d104 1
d107 1
a107 1
        if(fsys->f_VolumeNode != (struct DosList *)BADDR(lock->ml_lock.fl_Volume))
d134 1
d144 1
a144 1
         else if(lock && (lock->ml_lock_ext.le_flags & FILE_WRITE_PROT_F))
d162 1
d168 2
a169 2
        lk_next = lk->ml_lock.fl_Link;
        if(lk->ml_lock_ext.le_flags & FILE_MOD_F)
d186 1
d189 1
d191 7
a197 1
    if( FindObject(lock, name, mfib) )
d215 1
d220 1
a220 1
        &&  (volnode = (struct DosList *)BADDR(lock->ml_lock.fl_Volume))
d225 1
a225 1
    newlock->ml_lock.fl_Link    = *locklist;
d236 1
a238 1
    DOSerror = ERROR_OBJECT_IN_USE;   /* if not a shared Lock return NO LOCK */
d244 1
d248 1
a248 1
    else if(lock->ml_lock.fl_Access == SHARED_LOCK)
d250 1
a250 1
        if( !(newlock = (struct MLock *)AllocMem(sizeof(struct MLock),MEMF_PUBLIC))) 
d257 1
d260 1
a260 17
/* Link locks of the same object together in a circular list */
/*### A circular list does not have a list header.  It is basically a double-linked list
    with all the nodes in the list linked so that proceeding in the list forwards or
    backwards always brings you back to the node you started with.  To keep you from
    going in circles forever during list checks, keep a copy of the original node you
    started with and compare it to the node being currently checked.
###*/
/*### The following lines of code are equivalent to Insert() for this use of a circular list
    if(newlock)
    {
        newlock->ml_lock_ext.le_samelock.mln_Succ = (struct MinNode *)&(lock->ml_lock_ext.le_samelock.mln_Succ);
        (newlock->ml_lock_ext.le_samelock.mln_Pred = lock->ml_lock_ext.le_samelock.mln_Pred)->mln_Succ =
            (struct MinNode *)&(newlock->ml_lock_ext.le_samelock.mln_Succ);
        lock->ml_lock_ext.le_samelock.mln_Pred = (struct MinNode *)&(newlock->ml_lock_ext.le_samelock.mln_Succ);
    }
###*/
    if(newlock) Insert(0,(struct Node *)&(newlock->ml_lock_ext),(struct Node *)&(lock->ml_lock_ext));
d272 1
d290 1
a290 1
        vol = (struct DosList *)BADDR(lock->ml_lock.fl_Volume);
d296 1
a296 1
        lk = (struct MLock *) BADDR(lk_prev->ml_lock.fl_Link);
d300 1
a300 1
            lk_next = lk->ml_lock.fl_Link;
d303 1
a303 1
                lk_prev->ml_lock.fl_Link = lk_next;   /* unlink from single-link list */
d306 4
a309 1
                Remove((struct Node *)&(lock->ml_lock_ext));
d311 1
a311 1
                FreeMem((UBYTE *)lock, sizeof(struct MLock));
d339 1
d347 1
a347 1
        DOSerror =0;
d351 2
a352 2
    mfib->mfib_DiskCluster   = lock->ml_lock_ext.le_dir_clust;
    mfib->mfib_DiskDirEntry  = lock->ml_lock_ext.le_dir_ent;
d373 1
d391 2
a392 2
        /* Check if any other locks of the same object.  If the circular list points to itself then there is no other of the same lock */
        if(&(lock->ml_lock_ext) != (struct Lock_ext *)(lock->ml_lock_ext.le_samelock.mln_Succ))
d403 1
a403 1
    lock->ml_lock.fl_Access = mode;
@


38.14
log
@Changed MakeLock() to add another input argument. It now supports freeing
locks from volumes not currently mounted. It also duplicates locks of
unmounted volumes.
@
text
@d10 1
d16 1
a78 2
//      newlock->ml_lock.fl_Link              = fsys->f_LockList;
//      fsys->f_LockList                      = MKBPTR(newlock);
d192 1
a192 1
void Add2LockList(struct MLock *lock, struct MLock *newlock )
@


38.10
log
@Fixed missing ')'.
@
text
@d19 2
a20 1
struct MLock *MakeLock(mfib, mode)
a25 1
    extern struct MLock *CopyLock();
d76 3
a78 2
      newlock->ml_lock.fl_Link              = fsys->f_LockList;
      fsys->f_LockList                      = MKBPTR(newlock);
d178 1
a178 1
        newlock = MakeLock(mfib, mode);
d184 24
a232 1
        newlock->ml_lock.fl_Link            = fsys->f_LockList;
d234 1
a234 1
        fsys->f_LockList                    = MKBPTR(newlock);
d264 1
a264 1
    register struct MLock *lk_prev;
d275 1
a275 1
    {       /* if lock from current volume -- use m_LockList */
d280 1
a280 1
    {       /* Lock not from current volume.  Free only if compatible DOSTYPE */
d282 1
a282 11
        if(    (vol->dol_misc.dol_volume.dol_DiskType == ID_MSDOS_DISK)
            || (vol->dol_misc.dol_volume.dol_DiskType == ID_MSDOS_DISK_HD)
            || (vol->dol_misc.dol_volume.dol_DiskType == ID_MSDOS_DISK_DS))
        {       /* DOS type of Volume is MSDOS */
            lk_prev = (struct MLock *)&(vol->dol_misc.dol_volume.dol_LockList);
        }
         else   /* DOS type of Volume is not same Dostype */
        {
            DOSerror = ERROR_UNLOCK_ERROR;
            return(DOSFALSE);
        }
d285 3
a287 1
    lk = (struct MLock *) BADDR(lk_prev->ml_lock.fl_Link);
d289 1
a289 4
    while (lk)
    {
        lk_next = lk->ml_lock.fl_Link;
        if(lk == lock)
d291 4
a294 1
            lk_prev->ml_lock.fl_Link = lk_next;   /* unlink from single-link list */
d296 13
a308 10
    /* unlink lock from lock list of same object */
            Remove((struct Node *)&(lock->ml_lock_ext));
    /****/
            FreeMem((UBYTE *)lock, sizeof(struct MLock));

            if( (fsys->f_VolumeNode != vol) && !(vol->dol_misc.dol_volume.dol_LockList))
            {   /* Volume Node should be removed -- Only if:
                - Not the current Volume and
                - No outstanding locks */
                DeleteVolNode(vol);
d310 2
a311 2

            return(DOSTRUE);
a312 2
        lk_prev = lk;
        lk = (struct MLock *) BADDR(lk_next);
d344 1
a344 1
        parentlock = MakeLock(mfib,SHARED_LOCK);
@


38.9
log
@Added Change_Mode() function for ACTION_CHANGE_MODE
@
text
@d353 1
a353 1
    if(!CompareVolNode(lock) return(DOSFALSE);
@


38.5
log
@Maintenance.
@
text
@d332 45
@


38.1
log
@Original CrossDOS souce submitted to CBM
@
text
@a60 1

d133 2
a134 2
            DOSerror = ERROR_WRITE_PROTECTED;
            bool=DOSFALSE;
@
