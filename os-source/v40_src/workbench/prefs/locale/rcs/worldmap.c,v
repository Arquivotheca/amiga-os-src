head     38.11;
branch   ;
access   ;
symbols  ;
locks    davidj:38.11; strict;
comment  @ * @;


38.11
date     92.05.06.08.34.45;  author davidj;  state Exp;
branches ;
next     38.10;

38.10
date     92.03.10.11.36.45;  author davidj;  state Exp;
branches ;
next     38.9;

38.9
date     92.01.29.16.18.28;  author davidj;  state Exp;
branches ;
next     38.8;

38.8
date     92.01.10.17.29.24;  author davidj;  state Exp;
branches ;
next     38.7;

38.7
date     92.01.10.17.19.30;  author davidj;  state Exp;
branches ;
next     38.6;

38.6
date     91.12.02.14.58.58;  author davidj;  state Exp;
branches ;
next     38.5;

38.5
date     91.11.21.14.00.36;  author Unknown;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.20.22.36.14;  author Unknown;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.19.19.37.10;  author Unknown;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.06.18.05.29;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.21.13.36.59;  author vertex;  state Exp;
branches ;
next     ;


desc
@Worldmap handling for Locale prefs editor
@


38.11
log
@minor cosmetic.
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/gfxmacros.h>
#include <intuition/intuition.h>
#include <libraries/locale.h>

/* prototypes */
#include <clib/macros.h>
#include <clib/exec_protos.h>
#include <clib/graphics_protos.h>
#include <clib/layers_protos.h>
#include <clib/intuition_protos.h>

/* pragmas */
#include <pragmas/exec_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/layers_pragmas.h>
#include <pragmas/intuition_pragmas.h>

/* application includes */
#include "worldmap.h"
#include "pe_utils.h"

#define SysBase ed->ed_SysBase;

#pragma libcall GfxBase BltBitMapRastPort 25E 65432910809

/*****************************************************************************/

#define	DB(x)	x

/*****************************************************************************/

/* VERTICAL UNPACKER */
VOID unpacker (BYTE * source, BYTE * pDest, LONG BytesPerRow, LONG Rows)
{
    LONG minus128 = -128L;	/* get the compiler to generate a CMP.W */
    register LONG n;
    register BYTE c;
    LONG dstbytes;
    WORD column;
    BYTE *dest;
    WORD row;

    dstbytes = BytesPerRow * Rows;

    row = column = 0;
    dest = &pDest[0];

    while (dstbytes > 0)
    {
	n = (LONG) * source++;

	if (n >= 0L)
	{
	    n += 1L;

	    dstbytes -= n;

	    do
	    {
		*dest = *source++;
		dest += BytesPerRow;
		row++;
		if (row >= Rows)
		{
		    row = 0;
		    column++;
		    dest = &pDest[column];
		}
	    } while (--n > 0L);
	}
	else if (n != minus128)
	{
	    n = -n + 1L;

	    dstbytes -= n;

	    c = *source++;

	    do
	    {
		*dest = c;
		dest += BytesPerRow;
		row++;
		if (row >= Rows)
		{
		    row = 0;
		    column++;
		    dest = &pDest[column];
		}
	    } while (--n > 0L);
	}
    }
}

/*****************************************************************************/

BOOL InitMapData (EdDataPtr ed)
{
    register WORD i;
    ULONG msize;

    msize = (ULONG) (WorldI.BitMap->BytesPerRow * WorldI.BitMap->Rows * 4);
    if (WorldI.BitMap->Planes[0] = AllocVec (msize, MEMF_CLEAR | MEMF_CHIP))
    {
	unpacker (WorldI.Compress, WorldI.BitMap->Planes[0], (LONG) WorldI.BitMap->BytesPerRow, (LONG) WorldI.BitMap->Rows);
	msize = (ULONG) (MasksI.BitMap->BytesPerRow * MasksI.BitMap->Rows * 4);
	if (MasksI.BitMap->Planes[1] = AllocVec (msize, MEMF_CLEAR | MEMF_CHIP))
	{
	    unpacker (MasksI.Compress, MasksI.BitMap->Planes[1], (LONG) MasksI.BitMap->BytesPerRow, (LONG) MasksI.BitMap->Rows);
	}
	else
	{
	    FreeVec (WorldI.BitMap->Planes[0]);
	    WorldI.BitMap->Planes[0] = NULL;
	    return (FALSE);
	}

	/* Map it down to the first bitplane */
	MasksI.BitMap->Planes[0] = MasksI.BitMap->Planes[1];

	return (TRUE);
    }
    return (FALSE);
}

/*****************************************************************************/

VOID FreeMapData (EdDataPtr ed)
{
    register WORD i;

    FreeVec (WorldI.BitMap->Planes[0]);
    FreeVec (MasksI.BitMap->Planes[1]);
}

/*****************************************************************************/

#define TZ_SLICE (WM_IMAGEWIDTH / 24)

VOID PutMap (EdDataPtr ed)
{
    struct Window *win = ed->ed_Window;
    struct RastPort crp;
    WORD minterm;
    WORD h;

    if (ed->ed_VZoneScroller && (ed->ed_CurrentMsg.IAddress == ed->ed_VZoneScroller))
	ed->ed_ZoneYOffset = ed->ed_CurrentMsg.Code;

    /* Only do it if it changed */
    if ((ed->ed_Zone == ed->ed_PreviousZone) &&	(ed->ed_ZoneYOffset == ed->ed_PreviousYOffset))
	return;

    ed->ed_PreviousZone    = ed->ed_Zone;
    ed->ed_PreviousYOffset = ed->ed_ZoneYOffset;

    /* Clone the rastport */
    crp = *win->RPort;

    /* Copy the map over */
    BltBitMapRastPort (&World, 0, ed->ed_ZoneYOffset + 1,
		       &crp,
		       ed->ed_WM_LEFT + 2 + win->BorderLeft,
		       WM_TOP + 2 + win->BorderTop,
		       WM_WIDTH - 6 - WM_SCROLLERWIDTH,
		       ed->ed_ZoneHeight - 4,
		       0xC0);

    if (win->WScreen->BitMap.Depth == 1)
    {
	minterm = ANBC | ABNC;
    }
    else
    {
	minterm = 0x00C0;

	/* We only want to modify the second plane */
	crp.Mask = 0x02;

	/* Erase the previous highlight */
	SetAPen (&crp, 0);

	/* Clear the previously selected zone */
	RectFill (&crp, ed->ed_WM_LEFT + win->BorderLeft + 2,
		  WM_TOP + win->BorderTop + 2,
		  ed->ed_WM_LEFT + WM_WIDTH + win->BorderLeft - 3 - WM_SCROLLERWIDTH,
		  WM_TOP + ed->ed_ZoneHeight + win->BorderTop - 3);
    }

    h = MIN (ed->ed_ZoneHeight - 4, MasksI.Height - ed->ed_ZoneYOffset - 1);
    if (h > 0)
    {
	/* Draw the highlighted time zone */
	BltBitMapRastPort (MasksI.BitMap, Masks_images[ed->ed_Zone].i_Offset, ed->ed_ZoneYOffset + 1,
			   &crp,
			   ed->ed_WM_LEFT + win->BorderLeft + Masks_images[ed->ed_Zone].i_XPad + 2,
			   WM_TOP + win->BorderTop + 2,
			   Masks_images[ed->ed_Zone].i_Width,
			   h,
			   minterm);
    }
}

/*****************************************************************************/

VOID PickTimeZone (EdDataPtr ed, USHORT x, USHORT y)
{
    register WORD tx, bx;
    struct RastPort crp;
    register WORD i;

    InitRastPort (&crp);

    x -= ed->ed_Window->BorderLeft;
    if (x < ed->ed_WM_LEFT)
	x = ed->ed_WM_LEFT;
    if (x >= ed->ed_WM_LEFT + WM_WIDTH - WM_SCROLLERWIDTH - 3)
	x = ed->ed_WM_LEFT + WM_WIDTH - WM_SCROLLERWIDTH - 4;
    x -= ed->ed_WM_LEFT + 2;

    y -= ed->ed_Window->BorderTop;
    if (y < WM_TOP)
	y = WM_TOP;
    if (y >= WM_TOP + ed->ed_ZoneHeight - 3)
	y = WM_TOP + ed->ed_ZoneHeight - 4;
    y -= WM_TOP + 2;

    crp.BitMap = MasksI.BitMap;

    for (i = 0; i < MAX_ZONES; i++)
    {
	tx = Masks_images[i].i_XPad;
	bx = tx + Masks_images[i].i_Width;

	if ((x >= tx) && (x <= bx))
	{
	    if (ReadPixel (&crp, (Masks_images[i].i_Offset + x - tx), (y + ed->ed_ZoneYOffset)) != 0)
	    {
		ed->ed_PrefsWork.lp_GMTOffset = Masks_images[i].i_Data;
		ed->ed_Zone = i;
		return;
	    }
	}
    }
}
@


38.10
log
@wasn't checking if vscroller was non-NULL.
@
text
@d33 4
d156 1
a156 2
    if ((ed->ed_Zone == ed->ed_PreviousZone) &&
	(ed->ed_ZoneYOffset == ed->ed_PreviousYOffset))
d158 2
a159 1
    ed->ed_PreviousZone = ed->ed_Zone;
@


38.9
log
@wasn't clearing old map completely
@
text
@d148 1
a148 2
    if (ed->ed_CurrentMsg.IAddress == ed->ed_VZoneScroller)
    {
a149 1
    }
@


38.8
log
@*** empty log message ***
@
text
@d189 1
a189 1
		  ed->ed_WM_LEFT + WM_WIDTH + win->BorderLeft - 4 - WM_SCROLLERWIDTH,
@


38.7
log
@free partially alloced map
@
text
@d114 2
a115 2
	    FreeVec (WorldI.BitMap->Planes[1]);
	    WorldI.BitMap->Planes[1] = NULL;
@


38.6
log
@use one large bitmap instead of many small ones
@
text
@a102 3
#if 0
    WorldI.BitMap->Depth = MasksI.BitMap->Depth = 2;
#endif
a106 1

a107 1

d114 2
d166 1
a166 1
		       WM_LEFT + 3 + win->BorderLeft,
d187 1
a187 1
	RectFill (&crp, WM_LEFT + win->BorderLeft + 3,
d189 1
a189 1
		  WM_LEFT + WM_WIDTH + win->BorderLeft - 4 - WM_SCROLLERWIDTH,
d199 1
a199 1
			   WM_LEFT + win->BorderLeft + Masks_images[ed->ed_Zone].i_XPad + 3,
d218 5
a222 5
    if (x < WM_LEFT)
	x = WM_LEFT;
    if (x >= WM_LEFT + WM_WIDTH - WM_SCROLLERWIDTH - 3)
	x = WM_LEFT + WM_WIDTH - WM_SCROLLERWIDTH - 4;
    x -= WM_LEFT + 3;
@


38.5
log
@small masks would cause crash when scrolled off viewing area
@
text
@a32 44
#define	MAX_ZONES	33

struct BitMapImage *zones[] =
{
    &zone11I,			/* 1 */
    &zone10I,			/* 2 */
    &zone9I,			/* 3 */
    &zone8I,			/* 4 */
    &zone7I,			/* 5 */
    &zone6I,			/* 6 */
    &zone5I,			/* 7 */
    &zone4I,			/* 8 */
    &zone3I,			/* 9 */
    &zone2I,			/* 10 */
    &zone1I,			/* 11 */

    &zone0I,			/* 12 */

    &zonem1I,			/* 13 */
    &zonem2I,			/* 14 */
    &zonem3I,			/* 15 */
    &zonem4I,			/* 16 */
    &zonem5I,			/* 17 */
    &zonem6I,			/* 18 */
    &zonem7I,			/* 19 */
    &zonem8I,			/* 20 */
    &zonem9I,			/* 21 */
    &zonem10I,			/* 22 */
    &zonem11I,			/* 23 */
    &zonem12I,			/* 24 */
    &zonem13I,			/* 25 */

    &zonee3I,
    &zonee9I,
    &zoneem3I,
    &zoneem4I,
    &zoneem5I,
    &zoneem6I,
    &zoneem9I,
    &zoneem12I,
};

/*****************************************************************************/

d64 1
a64 1
		if (row > Rows)
d85 1
a85 1
		if (row > Rows)
d103 9
a111 5
    worldI.BitMap->Depth = 2;
    msize = (ULONG) (worldI.BitMap->BytesPerRow * worldI.BitMap->Rows * 4);
    if (worldI.BitMap->Planes[0] = AllocVec (msize, MEMF_CLEAR | MEMF_CHIP))
    {
	unpacker (worldI.Compress[0], worldI.BitMap->Planes[0], (LONG) worldI.BitMap->BytesPerRow, (LONG) worldI.BitMap->Rows);
d113 5
a117 1
	for (i = 0; i < MAX_ZONES; i++)
d119 2
a120 13
	    /* Don't forget about the special zones!!! */
	    zones[i]->BitMap->Depth = 2;

	    msize = (ULONG) (zones[i]->BitMap->BytesPerRow * zones[i]->BitMap->Rows * 4);

	    if (zones[i]->BitMap->Planes[1] = AllocVec (msize, MEMF_CLEAR | MEMF_CHIP))
	    {
		unpacker (zones[i]->Compress[1], zones[i]->BitMap->Planes[1], (LONG) zones[i]->BitMap->BytesPerRow, (LONG) zones[i]->BitMap->Rows);
	    }
	    else
	    {
		return (FALSE);
	    }
d122 2
a123 3
	    /* Map it down to the first bitplane */
	    zones[i]->BitMap->Planes[0] = zones[i]->BitMap->Planes[1];
	}
d136 2
a137 6
    FreeVec (worldI.BitMap->Planes[0]);

    for (i = 0; i < MAX_ZONES; i++)
    {
	FreeVec (zones[i]->BitMap->Planes[1]);
    }
a148 1
    WORD zone;
a150 3
    /* What zone are we in? */
    zone = ed->ed_PrefsWork.lp_GMTOffset + 10 + 1;

d157 1
a157 1
    if ((zone == ed->ed_PreviousZone) &&
d160 1
a160 1
    ed->ed_PreviousZone = zone;
d167 1
a167 1
    BltBitMapRastPort (&world, 0, ed->ed_ZoneYOffset + 1,
d196 1
a196 2
    h = MIN (ed->ed_ZoneHeight - 4, zones[zone]->Height - ed->ed_ZoneYOffset - 1);

d200 1
a200 1
	BltBitMapRastPort (zones[zone]->BitMap, 0, ed->ed_ZoneYOffset + 1,
d202 1
a202 1
			   WM_LEFT + win->BorderLeft + zones[zone]->LeftEdge + 3,
d204 1
a204 1
			   zones[zone]->Width,
d234 2
d238 2
a239 2
	tx = zones[i]->LeftEdge;
	bx = tx + zones[i]->Width;
d243 1
a243 3
	    crp.BitMap = zones[i]->BitMap;

	    if (ReadPixel (&crp, (x - tx), (y + ed->ed_ZoneYOffset)) != 0)
d245 2
a246 1
		ed->ed_PrefsWork.lp_GMTOffset = i - 11;
@


38.4
log
@revised world map
@
text
@d254 11
a264 11
    if (h < 0)
	return;

    /* Draw the highlighted time zone */
    BltBitMapRastPort (zones[zone]->BitMap, 0, ed->ed_ZoneYOffset + 1,
		       &crp,
		       WM_LEFT + win->BorderLeft + zones[zone]->LeftEdge + 3,
		       WM_TOP + win->BorderTop + 2,
		       zones[zone]->Width,
		       h,
		       minterm);
@


38.3
log
@new world map with masks for time zones
@
text
@d3 2
d11 2
d18 1
d27 2
d33 1
a33 18
extern UBYTE chip world_P0[];

struct BitMap world =
{
    40,			/* BytesPerRow (320) */
    172,		/* Rows */
    0x0,		/* Flags */
    2,			/* Depth */
    NULL,		/* Pad */

    /* Planes */
    world_P0,
    0x00000000,
};

/*****************************************************************************/

#define	MAX_ZONES	24
d37 9
a45 10
    &zone12I,			/*  0 */
    &zone11I,			/*  1 */
    &zone10I,			/*  2 */
    &zone9I,			/*  3 */
    &zone8I,			/*  4 */
    &zone7I,			/*  5 */
    &zone6I,			/*  6 */
    &zone5I,			/*  7 */
    &zone4I,			/*  8 */
    &zone3I,			/*  9 */
d62 11
d77 117
d196 1
a196 1
VOID PutMap(EdDataPtr ed)
d202 1
d209 1
a209 1
        ed->ed_ZoneYOffset = ed->ed_CurrentMsg.Code;
d223 7
a229 7
    BltBitMapRastPort(&world,0,ed->ed_ZoneYOffset,
                      &crp,
                      WM_LEFT+3+win->BorderLeft,
                      WM_TOP+2+win->BorderTop,
                      WM_WIDTH-6-WM_SCROLLERWIDTH,
                      ed->ed_ZoneHeight-4,
                      0xC0);
a230 2
    kprintf ("zone %ld\n", (LONG)zone);

a233 3

	/* Map it down to the first bitplane */
	zones[zone]->BitMap->Planes[0] = zones[zone]->BitMap->Planes[1];
d246 4
a249 4
	RectFill(&crp,WM_LEFT+win->BorderLeft+3,
                                 WM_TOP+win->BorderTop+2,
                                 WM_LEFT+WM_WIDTH+win->BorderLeft-4-WM_SCROLLERWIDTH,
                                 WM_TOP+ed->ed_ZoneHeight+win->BorderTop-3);
d252 5
d258 1
a258 1
    BltBitMapRastPort (zones[zone]->BitMap, 0, ed->ed_ZoneYOffset,
d263 1
a263 1
		       ed->ed_ZoneHeight - 4,
d269 7
d277 6
a282 14
VOID PickTimeZone(EdDataPtr ed, USHORT x, USHORT y)
{
   register WORD tx, bx;
   struct RastPort crp;
   register WORD i;

   InitRastPort (&crp);

   x -= ed->ed_Window->BorderLeft;
   if (x < WM_LEFT)
       x = WM_LEFT;
   if (x >= WM_LEFT+WM_WIDTH-WM_SCROLLERWIDTH-3)
       x = WM_LEFT+WM_WIDTH-WM_SCROLLERWIDTH-4;
   x -= WM_LEFT + 3;
d284 2
a285 2
   y -= ed->ed_Window->BorderTop;
   if (y < WM_TOP)
d287 3
a289 3
   if (y >= WM_TOP+ed->ed_ZoneHeight-3)
	y = WM_TOP+ed->ed_ZoneHeight-4;
   y -= WM_TOP + 2;
d291 2
a292 2
   for (i = 0; i < MAX_ZONES; i++)
   {
a297 1
	    zones[i]->BitMap->Planes[0] = zones[i]->BitMap->Planes[1];
d306 1
a306 1
   }
@


38.2
log
@Changes for new prefs shell
@
text
@d24 16
d43 1
d45 1
a45 1
UWORD chip WorldMapData[] =
d47 26
a72 433
    0x0000,0x0000,0x0000,0x0001,0x1FFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFF8,0x0000,0x03FF,0x0001,0xF9FF,0xC000,0x00FF,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x8FDF,0xFF03,0xFFFF,0xFFFF,0xFF00,0x0000,0x7FFF,0x0000,
    0x0000,0x0000,0x007F,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0FEF,0xFC07,0xFFFF,0xFFFF,
    0xFF00,0x0000,0x7F7E,0x0000,0x0000,0x0000,0x003F,0x8000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x007C,
    0x0FEF,0xFC0F,0xFFFF,0xFFFF,0xFE00,0x0000,0x7F98,0x0000,
    0x0000,0x0000,0x001F,0x7000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x007C,0x8FCF,0xF83F,0xFFFF,0xFFFF,
    0xFE00,0x0000,0x3FC0,0x0000,0x0000,0x0000,0x000F,0x7800,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x003E,
    0xCFFF,0xF8FF,0xFFFF,0xFFFF,0xFC00,0x0000,0x3FE0,0x0000,
    0x0000,0x0000,0x0000,0xF800,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3E3E,0xE7BF,0xF9FF,0xFFFF,0xFFFF,
    0xFE00,0x0000,0x3FA0,0x0000,0x0000,0x0000,0x0000,0xF800,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0C0F,
    0xE77F,0xFBFF,0xFFFF,0xFFFF,0xFC00,0x0000,0x0FB0,0x0000,
    0x0000,0x0000,0x0000,0xE000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x7C22,0x3C7F,0xC07F,0xFFFF,0xFFFF,
    0xFE00,0x0000,0x1F3C,0x0000,0x0000,0x0000,0x0000,0x0800,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x9860,
    0x387F,0xC03F,0xFFFF,0xFFFF,0xFE00,0x0000,0x0F30,0x0000,
    0x0000,0x0000,0x0000,0x3C00,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x000F,0x8020,0x007F,0xC0FF,0xFFFF,0xFFFF,
    0xFF00,0x0000,0x0E00,0x0000,0x0000,0x0000,0x0000,0x3800,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x001F,0x0200,
    0x30FF,0xE0FF,0xFFFF,0xFFFF,0xFF00,0x0000,0x0600,0x0000,
    0x0000,0x3800,0x0000,0x7E00,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x003F,0x8637,0x3EFF,0xC03F,0xFFFF,0xFFFF,
    0xF800,0x0000,0x0200,0x0000,0x0000,0x7800,0x0001,0xFFF0,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x007C,0xF71F,
    0x9711,0x003F,0xFFFF,0xFFFF,0xFC00,0x0000,0x0000,0x0000,
    0x0003,0xF000,0x000D,0xFFF8,0x0000,0x1400,0x0000,0x0000,
    0x0000,0x0000,0x003B,0xF7DF,0x8318,0x0008,0x3FFF,0xFFFF,
    0xFC00,0x0000,0x0000,0x0000,0x000F,0xC000,0x007F,0xFFF8,
    0x0000,0x7F00,0x0000,0x0000,0x0000,0x0000,0x0001,0xFFCF,
    0xB7FF,0x8000,0x1FFF,0xFFFF,0xFC00,0x0000,0x0000,0x0000,
    0x003F,0x0000,0x01FF,0xFFF8,0x0000,0x7FA0,0x0000,0x0000,
    0x0000,0x0000,0x0001,0xFFB3,0x37FF,0x8000,0x0FFF,0xFFFF,
    0xFD00,0x0000,0x0000,0x0000,0x007E,0x0000,0x03FF,0xFFF0,
    0x0000,0x7F3C,0x0000,0x0000,0x0000,0x0000,0x0000,0x7800,
    0x37FF,0x0000,0x07FF,0xFFFF,0xFE00,0x0000,0x0000,0x0000,
    0x0078,0x0000,0x0FFF,0xFFE0,0x0000,0x3A0C,0x0000,0x0000,
    0x0000,0x0000,0x0018,0x1000,0x0030,0x0000,0x07FF,0xFFFF,
    0xFE00,0x0000,0x0000,0x0000,0x00F0,0x0000,0x0FFF,0xFFF0,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x007F,0x0003,
    0x9E00,0x0000,0x07FF,0xFFFF,0xF800,0x0000,0x0000,0x0000,
    0x00F0,0x0000,0x0FFF,0xFFC0,0x0000,0x0800,0x0000,0x0000,
    0x0000,0x0000,0x007F,0x8067,0xBE77,0xF000,0x03FF,0xFFFF,
    0xFC00,0x0000,0x0000,0x0000,0x00E0,0x0001,0xFFFF,0xFE7F,
    0x8700,0x0E00,0x0000,0x0000,0x0000,0x0000,0x007F,0x60E7,
    0x9EEE,0xF000,0x03FF,0xFFFF,0xF000,0x0000,0x0000,0x0000,
    0x01C0,0x0641,0xFFFF,0xFFFF,0xC7C0,0x0600,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFCF,0xDCFF,0xB000,0x03FF,0xFFFF,
    0xF000,0x0000,0x0000,0x0000,0x03C0,0x0721,0xFFFF,0xFFFF,
    0xFFE0,0x0F00,0x0000,0x0000,0x0000,0x0000,0x00FF,0xFFC7,
    0xD9FF,0xFC00,0x03FF,0xFFFF,0xF000,0x0000,0x0000,0x0000,
    0x0380,0x0F2F,0xFFFF,0xFFFF,0xFFE0,0x1FF0,0x0000,0x0000,
    0x0000,0x0000,0x00FF,0xFFC3,0xD1FF,0xFC00,0x03FF,0xFFFF,
    0xF000,0x0000,0x0000,0x0000,0x0780,0x0F7F,0x7FFF,0xFFFF,
    0xFFC4,0x1FF8,0x0000,0x0000,0x0008,0x0000,0x007B,0xFFE1,
    0x38FF,0xFF00,0x03FF,0xFFFF,0xF000,0x0000,0x0000,0x0000,
    0x0380,0x1FFF,0xFFFF,0xFFFF,0xFFE7,0xFFFE,0x0000,0x01C0,
    0x001F,0x0000,0x0003,0xFFE0,0x3C7F,0xFF80,0x007F,0xFFFF,
    0xB000,0x0000,0x000E,0xC000,0x01C0,0x1F7F,0xFFFF,0xFFFF,
    0xFFF7,0xFFFE,0xF800,0x0380,0x007F,0xF000,0x0400,0x1FF8,
    0x7C7F,0xFFE0,0x01FF,0xFFFF,0x7000,0x0000,0x001F,0xE000,
    0x0040,0x1F7F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFC00,0x0000,
    0x01FF,0xFF80,0x3601,0xFFFC,0x3C1F,0xFFF0,0x01FF,0xFFFF,
    0xF000,0x0000,0x00FF,0xC800,0x000C,0x1F7F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFC05,0xC000,0x03FF,0xFFF1,0xFFF8,0xFFF8,
    0xDE1C,0x9FF0,0x01BF,0xFFFF,0xC000,0x0000,0x03FF,0xFC00,
    0x1007,0x1F7F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFD,0xFE00,
    0x07FF,0xFFFF,0xFFFF,0xBF79,0xDE9E,0x0FE0,0x003F,0xFFFF,
    0x8000,0x0000,0x07FF,0xFF80,0x1103,0xEF7F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFD,0xFF00,0x0FFF,0xFFFF,0xFFFF,0xC1C0,
    0xDFDE,0x07E0,0x007F,0xFFFE,0x0000,0x0000,0x0FFF,0xFFC3,
    0x03FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFC0,
    0x0FFF,0xFFFF,0xFFFF,0xEDF9,0xFFBE,0x19FC,0x00FF,0xFFE0,
    0x0000,0x0000,0x07FF,0xFFF1,0x9FFF,0xFFBF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFE0,0x03FF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0x19FF,0x01FF,0xFFC0,0x0000,0x0000,0x0FFF,0xFFF3,
    0x3FFF,0xFF7F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF0,
    0x03FF,0xFFFF,0xFFE3,0xFFFF,0xFFFE,0x03FF,0x80FF,0xFFC0,
    0x0000,0x0000,0x1FFF,0xFFF1,0xFFFF,0xFE7F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFE,0x0DFF,0xFFFF,0xFF81,0xFFFF,
    0xFFE8,0x07FF,0x80FF,0xFF80,0x31E0,0x0000,0x1FFF,0xFFF7,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0x3FFF,0xFFFF,0xFFC3,0xFFFF,0xFFF0,0x03F7,0x00FF,0xFE00,
    0x3FE0,0x0000,0x3FFF,0xFE1F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFF7F,0x1FFF,0xFFFF,0xFFC7,0xFFFF,
    0xFFDC,0x3FFA,0x007F,0xF000,0x1FF0,0x0000,0x3FE3,0xFEDF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF1E,
    0x0EFF,0xFFFF,0xFFFF,0xFFFF,0xFFDE,0x3FFC,0x007F,0xF000,
    0x0FE0,0x0000,0x7FE7,0xFEFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFC0C,0x00FF,0xFFFF,0xFFFF,0xFFFF,
    0xFFBF,0x03FC,0x003F,0xF000,0x1F80,0x0001,0xFFCF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFC00,
    0xC1FF,0xFFFF,0xFFFF,0xFFFF,0xFE10,0x01EE,0x003F,0xE000,
    0x0000,0x0001,0xFF9F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFE00,0x07FF,0xFFFF,0xFFFF,0xF1FF,
    0xFC06,0x2070,0x001F,0xC000,0x0000,0x0007,0xFF3F,0xFDFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFE00,
    0x0FFF,0xFFFF,0xFFFF,0x8FFF,0xFC00,0xBF18,0x001F,0xC000,
    0x0000,0x400F,0xFE3F,0xFCFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xF000,0x0FFF,0xFFFF,0xFFFE,0x1FFF,
    0xF000,0x3F00,0x000F,0xC000,0x0000,0x000F,0xFE3F,0xC6FF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE67F,0xC000,
    0x07FF,0x77FF,0xFFFF,0xFFFF,0xF000,0x3FC0,0x0003,0xC000,
    0x0000,0x020F,0xFF3F,0xE7FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xC1FF,0x0000,0x1AFF,0xF1FF,0xFFFF,0xFDFF,
    0xF000,0x3FC6,0x0000,0x8000,0x0000,0x020F,0xFF08,0xEFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0x83C0,0x0000,
    0x01FE,0xC00F,0xFFFF,0xF8FF,0xF000,0x7FC7,0x0000,0x0000,
    0x0000,0x080F,0xFF1F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFE33,0xC3C0,0x0000,0x001E,0x0007,0xFFFF,0xFFFF,
    0xF800,0x3FEF,0x0000,0x0000,0x0000,0x1806,0x7E1F,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF800,0x0780,0x0000,
    0x001B,0x0003,0xFFFF,0xFFF7,0xF800,0x1FFF,0x8000,0x0000,
    0x0000,0x3C00,0xBF17,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xF000,0x1F80,0x0000,0x0032,0x0001,0xFFFF,0xFFF7,
    0xFF80,0x1FFF,0x8000,0x0000,0x0000,0x3C01,0xBC3F,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE000,0x3F80,0x0000,
    0x00E0,0x0001,0xFFFF,0xFFFF,0xFFC0,0xDFFF,0x8000,0x0000,
    0x0000,0x3803,0xBC3F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xC000,0x7F80,0x0000,0x0300,0x0000,0x7FFF,0xFFFF,
    0xFFFC,0x3FFF,0xE000,0x0000,0x0000,0xFC01,0xF83F,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFF7F,0xFFFF,0xC000,0x7E00,0x0000,
    0x0400,0x0000,0x1FFF,0xFFFF,0xFFFC,0x7FFF,0xF800,0x0000,
    0x0001,0xFE01,0xF7FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF7F,
    0xFFFF,0x8200,0x3E00,0x0000,0x5000,0x0000,0x5FFF,0xFFFE,
    0x7FFE,0x7FFF,0xFC00,0x0000,0x0003,0xC707,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFE7F,0xFFFF,0xFA00,0x3C00,0x0000,
    0x0000,0x0000,0x2FFF,0xFFFD,0x7FFF,0x7FFF,0xFC00,0x0000,
    0x0001,0xDF9F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFCFF,
    0xFFFF,0xFE00,0x3800,0x4000,0x0000,0x0000,0x07FF,0xFFFC,
    0x3FFF,0x7FFF,0xFC00,0x0000,0x0003,0x9F9F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xF3FF,0xFFFF,0xFE00,0x3000,0x0460,
    0x0000,0x0000,0x03FF,0xFFFE,0xBFFF,0xFFFF,0xF400,0x0000,
    0x0000,0x1FFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFA00,0x0000,0x0000,0x0000,0x0000,0x03FF,0xFFFE,
    0x7FFF,0xFFFF,0xCC00,0x0000,0x0000,0x20FF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFB00,0x4000,0x0000,
    0x0000,0x0000,0x01FF,0xFFFF,0xFFBF,0xFFFD,0x9F00,0x0000,
    0x0000,0x03FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xF700,0x0000,0x0000,0x0000,0x0000,0x00DF,0xFFFF,
    0xFF1F,0xFFFC,0x1F80,0x0000,0x0000,0x1FFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF001,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFFF,0xFC0F,0xFFFC,0x4380,0x0000,
    0x0000,0x07FF,0xFFFF,0xFF9F,0xF9FF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xE600,0x0000,0x0000,0x0000,0x0000,0x007F,0xFFFF,
    0xFFC1,0xFFFF,0x6000,0x0000,0x0000,0x03FF,0xFFFF,0xC43F,
    0xC1F3,0xFF83,0xFFFF,0xFFFF,0xFFFF,0xC404,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFFF,0xFF88,0xFFFB,0x8000,0x0000,
    0x0000,0x03FF,0xDFFF,0xC07F,0x80E1,0xFFBF,0xFFFF,0xFFFF,
    0xFFFF,0x8430,0x0000,0x0000,0x0000,0x0000,0x007F,0xFFFF,
    0xFF99,0xCFEC,0x0000,0x0000,0x0000,0x03FF,0xE7FF,0x803F,
    0x87E3,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0x07C0,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFFF,0xFF9D,0x1F80,0x0000,0x0000,
    0x0001,0xFFFC,0x73FF,0x000F,0x87FF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0x0F80,0x0000,0x0000,0x0000,0x0000,0x007F,0xFFFF,
    0xFF98,0x7FC0,0x0000,0x0000,0x0001,0xFFE1,0x78FF,0x0007,
    0xC1FF,0xFFFF,0xFFFF,0xFFFF,0xFFF0,0x1A00,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFFF,0xFFFF,0xFF00,0x0000,0x0000,
    0x0000,0xFF81,0x1EFF,0x9F0F,0xE0FF,0xFFFF,0xFFFF,0xFFFF,
    0xFFE0,0x0800,0x0000,0x0000,0x0000,0x0000,0x007F,0xFFFF,
    0xFFFF,0xFC00,0x0000,0x0000,0x0001,0xFF01,0x0779,0xFFFF,
    0xE1FF,0xFFFF,0xFFFF,0xFFFF,0xFFC0,0x0C00,0x0000,0x0000,
    0x0000,0x0000,0x007F,0xFFFF,0xFFFF,0xF800,0x0000,0x0001,
    0x0001,0xFF81,0x0639,0xFFFF,0xE0FF,0xFFFF,0xFFFF,0xFFFF,
    0x11C0,0x1C00,0x0000,0x0000,0x0000,0x0000,0x003F,0xFFFF,
    0xFFFF,0xF800,0x0000,0x0000,0x8001,0xFE00,0x3C3D,0xFFFF,
    0xE0FF,0xFFFF,0xFFFF,0xFFFF,0xA1E0,0x5800,0x0000,0x0000,
    0x0000,0x0000,0x001F,0xFFFF,0xFFFF,0xF000,0x0000,0x0000,
    0x0000,0x3CFF,0x8810,0xFFFF,0xF2FF,0xFFFF,0xFFFF,0xFFFF,
    0xF0E0,0xF800,0x0000,0x0000,0x0000,0x0000,0x000F,0xFFFF,
    0xFFFF,0xF800,0x0000,0x0000,0x0000,0x3BFF,0xC00F,0x05FF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xC0E7,0xF800,0x0000,0x0000,
    0x0000,0x0000,0x0007,0xFFFF,0xFFFF,0xE000,0x0000,0x0000,
    0x0000,0x7FFF,0x8000,0x01FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xE00F,0x8000,0x0000,0x0000,0x0000,0x0000,0x0001,0xFFFF,
    0xFFFF,0x8000,0x0000,0x0000,0x0001,0xFFFF,0xE000,0x03FF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE03E,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0001,0xFFFF,0xFFFF,0x0000,0x0000,0x0000,
    0x0001,0xFFFF,0xF87E,0x03FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xF018,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xDFFF,
    0xFFFE,0x0000,0x0000,0x0000,0x0001,0xFFFF,0xFF7F,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF010,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0xFFFF,0xF797,0x0000,0x0000,0x0000,
    0x0013,0xFFFF,0xFFFF,0xFFFF,0xEFFF,0xFFFF,0xFFFF,0xFFFF,
    0xF000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x7FFF,
    0xC003,0x0000,0x0000,0x0000,0x00CF,0xFFFF,0xFFFF,0xFFFF,
    0xE7FF,0xFFFF,0xFFFF,0xFFFF,0xF020,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x37FF,0x8003,0xE000,0x0000,0x0000,
    0x001F,0xFFFF,0xFFFF,0xFDFF,0xF3FF,0xFFFF,0xFFFF,0xFFFF,
    0xE040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0BFF,
    0x8001,0x1000,0x0000,0x0000,0x003F,0xFFFF,0xFFFF,0xFCFF,
    0xFC7F,0xFFFF,0xFFFF,0xFFFF,0xC000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0CFF,0x8000,0x2C00,0x0000,0x0000,
    0x003F,0xFFFF,0xFFFF,0xFE7F,0xFFE0,0x1FFF,0xFFFF,0xFFFF,
    0xB400,0x0000,0x8000,0x0000,0x0100,0x0000,0x0000,0x047F,
    0x8007,0x8400,0x0000,0x0000,0x007F,0xFFFF,0xFFFF,0xFF3F,
    0xFFF8,0x0FFF,0xFFFF,0xFFFE,0x3000,0x0000,0x0000,0x0000,
    0x0040,0x0000,0x0000,0x007F,0x80EC,0xE380,0x0000,0x0000,
    0x00FF,0xFFFF,0xFFFF,0xFFBF,0xFFF8,0x07FF,0xFF7F,0xFFF0,
    0x0000,0x0000,0x0000,0x0000,0x000C,0x0000,0x0000,0x007F,
    0xC1C0,0x3C00,0x0000,0x0000,0x007F,0xFFFF,0xFFFF,0xFFBF,
    0xFFF0,0x00FF,0xF83F,0xFC40,0x0000,0x0000,0x0000,0x0000,
    0x0004,0x0000,0x0000,0x003F,0xE7C0,0x01E2,0x0000,0x0000,
    0x007F,0xFFFF,0xFFFF,0xFF8F,0xFFE0,0x00FF,0xE03F,0xFCC0,
    0x0000,0x0000,0x0010,0x0000,0x0000,0x0000,0x0000,0x0007,
    0xFFC0,0x3001,0x0000,0x0000,0x007F,0xFFFF,0xFFFF,0xFFCF,
    0xFFC0,0x00FF,0xC01F,0xFE00,0x3000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0001,0xFF80,0x0000,0x8000,0x0000,
    0x007F,0xFFFF,0xFFFF,0xFFE7,0xFE00,0x00FF,0x801F,0xFF00,
    0x3000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x07FC,0x0000,0x0000,0x0000,0x20FF,0xFFFF,0xFFFF,0xFFF7,
    0xF800,0x007E,0x0003,0xFF80,0x3000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x01FC,0x0000,0x2000,0x0000,
    0x00FF,0xFFFF,0xE7FF,0xFFFB,0xC000,0x003E,0x0001,0xFF80,
    0x3C00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0038,0x0160,0x8000,0x0000,0x00FF,0xFFFF,0xFFFF,0xFFFC,
    0x0900,0x003E,0x0001,0xBF80,0x0A00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x001C,0x0FFB,0xC000,0x0000,
    0x003F,0xFFFF,0xFFFF,0xFFFF,0xF800,0x001E,0x0041,0x1F00,
    0x4E00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0007,0xFFFF,0xC000,0x0000,0x001F,0xFFFF,0xFFFF,0xFFFF,
    0xF800,0x001F,0x0001,0x0C00,0x8F00,0x2000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0005,0xBFFF,0xF000,0x0000,
    0x000F,0xFFFF,0xFFFF,0xFFFF,0xF000,0x000B,0x0001,0x8000,
    0x0F00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x3FFF,0xF800,0x0000,0x0007,0xFFFF,0xFFFF,0xFFFF,
    0xF000,0x0003,0x0000,0xC001,0x0700,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x3FFF,0xFF80,0x0000,
    0x0001,0xFE0F,0xFFFF,0xFFFF,0xE000,0x0000,0x000E,0x7007,
    0xC000,0x0000,0x0080,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x3FFF,0xFFC0,0x0000,0x0000,0x0001,0xFFFF,0xFFFF,
    0xC000,0x0000,0x0007,0x700F,0x0000,0x0000,0x0000,0x0000,
    0x0010,0x0000,0x0000,0x0000,0x0000,0x7FFF,0xFFE0,0x0000,
    0x0000,0x0000,0xFFFF,0xFFFF,0x0000,0x0000,0x0007,0xF03F,
    0x8040,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0xFFFF,0xFFE0,0x0000,0x0000,0x0001,0xFFFF,0xFFFE,
    0x0000,0x0000,0x0003,0xF0FF,0xFEC0,0x0000,0x0000,0x0020,
    0x0040,0x0000,0x0000,0x0000,0x0201,0xFFFF,0xFFFC,0x0000,
    0x0000,0x0001,0xFFFF,0xE3F8,0x0000,0x0000,0x0001,0x78FF,
    0x7C5E,0x8000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0001,0xFFFF,0xFFFF,0x4000,0x0000,0x0001,0xFFFF,0xE3F0,
    0x0000,0x0000,0x0000,0x7F7E,0x700E,0x7820,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0001,0xFFFF,0xFFFF,0xFC00,
    0x0000,0x0000,0x7FFF,0xBFE0,0x0000,0x0000,0x0000,0x3C1E,
    0x79F7,0xFF03,0x0000,0x0008,0x0000,0x0000,0x0000,0x0000,
    0x0001,0xFFFF,0xFFFF,0xFF00,0x0000,0x0000,0x3FFF,0xBFC0,
    0x0000,0x0000,0x0000,0x1C00,0x7800,0x7F83,0x0000,0x0008,
    0x0000,0x0000,0x0000,0x0000,0x0001,0xFFFF,0xFFFF,0xFF80,
    0x0000,0x0000,0x3FFF,0x9FE0,0x0000,0x0000,0x0000,0x07A0,
    0x0002,0x3FEC,0x6000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x7FFF,0xFFFF,0xFF80,0x0020,0x0000,0x1FFF,0xDFE0,
    0x0000,0x0000,0x0000,0x01FC,0xA308,0x3FE0,0x1800,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x7FFF,0xFFFF,0xFF00,
    0x0000,0x0000,0x1FFF,0xFFE0,0x0000,0x0000,0x0000,0x0003,
    0x6700,0x0678,0x0600,0x0003,0x0080,0x0000,0x0000,0x0000,
    0x0000,0x3FFF,0xFFFF,0xFF00,0x0000,0x0000,0x1FFF,0xFFF0,
    0x0000,0x0000,0x0000,0x0400,0x0400,0x000C,0x0100,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x1FFF,0xFFFF,0xFC00,
    0x0000,0x0000,0x1FFF,0xFDF0,0x1000,0x0000,0x0000,0x0000,
    0x001F,0x4600,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0FFF,0xFFFF,0xF800,0x0000,0x0000,0x1FFF,0xFDF0,
    0x3000,0x0000,0x0000,0x0000,0x001F,0x8600,0x0000,0x0002,
    0x0000,0x0200,0x0000,0x0000,0x0000,0x0FFF,0xFFFF,0xF800,
    0x0000,0x0000,0x3FFF,0xFFF0,0x7000,0x0000,0x0000,0x0000,
    0x01FF,0x0780,0x0010,0x0000,0x0000,0x8000,0x0000,0x0000,
    0x0000,0x03FF,0xFFFF,0xF800,0x0000,0x2000,0x3FFF,0xFFE1,
    0xF000,0x0000,0x0000,0x0000,0x07FF,0xE780,0x0008,0x0200,
    0x0000,0x2000,0x0000,0x0000,0x0000,0x00FF,0xFFFF,0xF800,
    0x0000,0x0000,0x3FFF,0xFF83,0xF000,0x0000,0x0000,0x0000,
    0x0FFF,0xFFC0,0x0000,0x0600,0x8040,0x0000,0x0000,0x0000,
    0x0000,0x007F,0xFFFF,0xF800,0x0000,0x0000,0x3FFF,0xFF01,
    0xE000,0x0000,0x0000,0x0000,0x1FFF,0xFFC0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x007F,0xFFFF,0xF004,
    0x0000,0x0000,0x1FFF,0xFE03,0xE020,0x0000,0x0000,0x0000,
    0xFFFF,0xFFF0,0x0040,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x007F,0xFFFF,0xE000,0x0000,0x0000,0x0FFF,0xFE03,
    0xE080,0x0000,0x0000,0x0007,0xFFFF,0xFFF8,0x0030,0x0000,
    0x0000,0x0001,0x0000,0x0000,0x0000,0x007F,0xFFFF,0xC000,
    0x0000,0x0000,0x0FFF,0xFE03,0xC000,0x0000,0x0000,0x000F,
    0xFFFF,0xFFFC,0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,
    0x0000,0x007F,0xFFFE,0x0000,0x0000,0x0000,0x0FFF,0xFE03,
    0xC000,0x0000,0x0000,0x000F,0xFFFF,0xFFFE,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00FF,0xFFF8,0x0000,
    0x0000,0x0000,0x0FFF,0xF801,0x0000,0x0000,0x0000,0x000F,
    0xFFFF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00FF,0xFFF8,0x0000,0x0000,0x0000,0x07FF,0xF800,
    0x0000,0x0000,0x0000,0x000F,0xFFFF,0xFFFF,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00FF,0xFFF8,0x0000,
    0x0000,0x0000,0x07FF,0xF800,0x0000,0x0000,0x0000,0x0007,
    0xFFFF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00FF,0xFFE0,0x0000,0x0000,0x0000,0x03FF,0xF000,
    0x0000,0x0000,0x0000,0x0007,0xFFFF,0xFFFF,0x0000,0x0040,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00FF,0xFFE0,0x0000,
    0x0000,0x0000,0x01FF,0xE000,0x0000,0x0000,0x0000,0x0003,
    0xFFFF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00FF,0xFFC0,0x0000,0x0000,0x0000,0x01FF,0xC000,
    0x0000,0x0000,0x0000,0x0003,0xFFFF,0xFFFF,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00FF,0xFF80,0x0000,
    0x0000,0x0000,0x01FF,0x8000,0x0000,0x0000,0x0000,0x0003,
    0xFE01,0xFFFE,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x01FF,0xFF00,0x0000,0x0000,0x0000,0x00FE,0x0000,
    0x0000,0x0000,0x0000,0x0003,0xC001,0xFFFC,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x01FF,0xF800,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x7FFC,0x0000,0x6000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x03FF,0xF800,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x1FF8,0x0000,0x3000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x03FF,0xF800,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0008,0x0000,0x0000,
    0x0000,0x0FF8,0x0000,0x1C00,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x03FF,0xF000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0008,0x0000,0x0000,0x0000,0x0240,0x0000,0x3C00,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x03FF,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1800,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x03FF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00F0,0x0000,0xD000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x07FE,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x00F0,0x0000,0xC000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x07FE,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0060,0x0003,0xC000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x07FC,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0007,0x8020,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x07F8,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x000F,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x07F0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0400,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x001E,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x07F8,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0008,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0FF8,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0FF0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0400,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0FE0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0FC0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x07E0,0x7000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x07E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x03E0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x01F8,0x0000,0x0300,0x0000,0x0020,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00F0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0003,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x1000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x1C00,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x7800,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0003,0x4800,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,0x8000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0003,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0300,0x0000,0x0000,0x2018,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0007,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x07E0,0x0000,0x0000,0xFC3C,
    0x089F,0xC000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x003E,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0FC0,0x0000,0x1FFF,0xFFFF,0xFFDF,0xFE00,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x003C,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x3FFD,0x8000,0x7FFF,0xFFFF,
    0xFFFF,0xFF40,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x000C,0x0000,0x0000,0x0000,0x0000,0x0000,0x0007,
    0xFFFF,0xFC03,0xFFFF,0xFFFF,0xFFFF,0xFFC0,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x000C,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x001F,0xFFFF,0xFC07,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0x8000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x008F,0x0000,0x0000,0x0000,0x0000,0x0000,0x061F,
    0xFFFF,0xFC0F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x00FF,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1FDF,0xFFFF,0xFC9F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFC00,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0CFF,0x8000,0x0000,0x0000,0x0007,0x6000,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFE80,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0CFF,0x8000,0x0000,
    0x0000,0x0C3F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFE0,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0FFF,0x8000,0x0000,0x0002,0x647F,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF8,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x1FFF,0xC000,0x0000,
    0x000F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0x0000,0x0000,0x0000,0x0000,0x0007,
    0x4000,0x0FEF,0x8000,0x0000,0x0007,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFE,0x0000,
    0x0000,0x0000,0x0000,0x0001,0xE000,0x23EF,0xC000,0x0000,
    0x0007,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFE,0x0000,
a74 1

a76 1

a78 1

d81 4
a84 1
struct BitMap bMap;
d86 3
d94 15
a108 6
    InitBitMap(&bMap,1,WM_IMAGEWIDTH,WM_IMAGEHEIGHT);
    bMap.Planes[0] = (PLANEPTR)WorldMapData;
    BltBitMapRastPort(&bMap,0,ed->ed_ZoneYOffset,
                      ed->ed_Window->RPort,
                      WM_LEFT+3+ed->ed_Window->BorderLeft,
                      WM_TOP+2+ed->ed_Window->BorderTop,
d110 28
a137 2
                      WM_HEIGHT-4,
                      192); /* 192 is straight copy */
d139 8
a146 13
   SetAPen(ed->ed_Window->RPort,0);
   SetWrMsk(ed->ed_Window->RPort,254);
   RectFill(ed->ed_Window->RPort,WM_LEFT+ed->ed_Window->BorderLeft+3,
                                 WM_TOP+ed->ed_Window->BorderTop+2,
                                 WM_LEFT+WM_WIDTH+ed->ed_Window->BorderLeft-4-WM_SCROLLERWIDTH,
                                 WM_TOP+WM_HEIGHT+ed->ed_Window->BorderTop-3);
   SetWrMsk(ed->ed_Window->RPort,255);
   SetDrMd(ed->ed_Window->RPort,COMPLEMENT);
   RectFill(ed->ed_Window->RPort, WM_LEFT+ed->ed_Window->BorderLeft+(ed->ed_PrefsWork.lp_GMTOffset+10)*TZ_SLICE+3,
                                  WM_TOP+ed->ed_Window->BorderTop+2,
                                  WM_LEFT+ed->ed_Window->BorderLeft+((ed->ed_PrefsWork.lp_GMTOffset+10)+1)*TZ_SLICE,
                                  WM_TOP+ed->ed_Window->BorderTop+WM_HEIGHT-3);
   SetDrMd(ed->ed_Window->RPort,JAM2);
a148 1

d154 6
a160 1

a162 1

d165 1
d167 24
a190 2
   x -= WM_LEFT;
   ed->ed_PrefsWork.lp_GMTOffset = (x / TZ_SLICE)-10;
@


38.1
log
@Initial V38 RCS checkin
@
text
@d476 1
a476 1
    if (ed->ed_CurrentMsg)
d478 1
a478 4
        if (ed->ed_CurrentMsg->IAddress == ed->ed_VZoneScroller)
        {
            ed->ed_ZoneYOffset = ed->ed_CurrentMsg->Code;
        }
@
