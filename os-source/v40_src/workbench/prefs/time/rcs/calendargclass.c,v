head     38.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.8
date     92.05.05.16.08.29;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.27.11.37.52;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.12.11.30.12;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.11.17.51.45;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     92.01.10.12.52.10;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.12.05.12.44.04;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.11.16.42.47;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.08.15.27.31;  author vertex;  state Exp;
branches ;
next     ;


desc
@Calendar class
@


38.8
log
@Now does strumming
Now supports RMB cancelling
Correctly handles moving off to the RHS
@
text
@
#include <exec/types.h>
#include <exec/memory.h>
#include <exec/libraries.h>
#include <intuition/intuition.h>
#include <intuition/classes.h>
#include <intuition/classusr.h>
#include <intuition/cghooks.h>
#include <intuition/gadgetclass.h>
#include <intuition/imageclass.h>
#include <intuition/icclass.h>
#include <intuition/screens.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/gfxmacros.h>
#include <libraries/gadtools.h>
#include <utility/tagitem.h>
#include <utility/date.h>
#include <string.h>
#include <stdio.h>

#include <clib/macros.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/utility_protos.h>
#include <clib/gadtools_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/gadtools_pragmas.h>

#include "pe_custom.h"
#include "calendargclass.h"


/*****************************************************************************/


#define G(o) ((struct Gadget *)(o))

struct localObjData
{
    struct ClockData lod_CData;	           /* Current calendar time */
    UWORD            lod_FirstWeekday;
    UWORD            lod_DaysInMonth;      /* Number of days in the month */
    UWORD            lod_WDay;             /* First day of the month */
    UWORD            lod_HDay;             /* Last highlighted day */
    UWORD	     lod_BackupDay;
    UWORD            lod_Width;            /* Width of each cell */
    UWORD            lod_Height;           /* Height of each cell */
    UWORD            lod_CalLefts[7];      /* Left offset of each cell */
    UWORD            lod_CalTops[6];       /* Top offset of each cell */
    UWORD            lod_FontHeight;
};

#define SECS_PER_DAY (86400)


ULONG __stdargs DispatchCalendarG(Class * cl, Object * o, Msg msg);
ULONG RenderCalendarG(Class * cl, Object * o, struct gpRender * msg);
ULONG SetCalendarGAttrs(Class * cl, Object * o, struct opSet * msg);
ULONG HandleCalendarG(Class * cl, Object * o, struct gpInput * msg);
UWORD GetDay(Class * cl, Object * o, WORD x, WORD y);

/* Class prototypes */
ULONG __stdargs DoMethod (Object * o, ULONG methodID,...);
ULONG __stdargs DoSuperMethod (Class * cl, Object * o, ULONG methodID,...);
ULONG __stdargs CoerceMethod (Class * cl, Object * o, ULONG methodID,...);
ULONG __stdargs CM (Class * cl, Object * o, Msg msg);
ULONG __stdargs DM (Object * o, Msg msg);
ULONG __stdargs DSM (Class * cl, Object * o, Msg msg);
ULONG __stdargs SetSuperAttrs (Class * cl, Object * o, ULONG data,...);


/*****************************************************************************/


#define SUPERCLASSID "gadgetclass"


/*****************************************************************************/


UWORD GetDaysInMonth(EdDataPtr ed, UWORD n_month, UWORD n_year)
{
struct ClockData cd;
ULONG            d1,d2;

    cd.sec   = 0;
    cd.min   = 0;
    cd.wday  = 0;
    cd.hour  = 1;
    cd.mday  = 1;
    cd.month = n_month;
    cd.year  = n_year;

    d1 = Date2Amiga(&cd);

    if ((++cd.month) > 12)
    {
	cd.month = 1;
	cd.year++;
    }

    d2 = Date2Amiga (&cd);

    return ((UWORD) ((d2 - d1) / SECS_PER_DAY));
}


/*****************************************************************************/


Class *InitCalendarGClass(EdDataPtr ed)
{
ULONG hookEntry ();
Class           *cl;

    if (cl = MakeClass(NULL,SUPERCLASSID,NULL,sizeof(struct localObjData),0))
    {
	cl->cl_Dispatcher.h_Entry    = hookEntry;
	cl->cl_Dispatcher.h_SubEntry = DispatchCalendarG;
	cl->cl_UserData              = (ULONG)ed;
    }

    return (cl);
}


/*****************************************************************************/


VOID FreeCalendarGClass(Class *cl)
{
EdDataPtr ed = (EdDataPtr)cl->cl_UserData;

    FreeClass(cl);
}


/*****************************************************************************/


ULONG __stdargs DispatchCalendarG(Class * cl, Object * o, Msg msg)
{
EdDataPtr            ed = (EdDataPtr)cl->cl_UserData;
struct localObjData *lod = INST_DATA (cl, o);
struct RastPort     *rp;
ULONG                result = 0;
Object              *newobj;
UWORD                i;

    switch (msg->MethodID)
    {
	case OM_NEW        : if (newobj = (Object *) DSM (cl, o, msg))
                             {
                                 lod = INST_DATA(cl,newobj);

			 	 lod->lod_FirstWeekday = 0;
                                 lod->lod_DaysInMonth  = 31;
                                 lod->lod_WDay         = 1;
                                 lod->lod_HDay         = 99;
                                 lod->lod_FontHeight   = ed->ed_Font->tf_YSize+1;

                                 SetCalendarGAttrs(cl,newobj,(APTR)msg);
                             }

                             result = (ULONG) newobj;
                             break;

	case OM_UPDATE     :
	case OM_SET        : DSM (cl, o, msg);
                             SetCalendarGAttrs (cl, o, (APTR)msg);

                             if (rp = ObtainGIRPort (((struct opSet *) msg)->ops_GInfo))
                             {
                                 struct gpRender gpr = {NULL};

                                 gpr.MethodID   = GM_RENDER;
                                 gpr.gpr_GInfo  = ((struct opSet *) msg)->ops_GInfo;
                                 gpr.gpr_RPort  = rp;
                                 gpr.gpr_Redraw = GREDRAW_REDRAW;

                                 DM(o, &gpr);

                                 ReleaseGIRPort (rp);
                             }
                             break;

	case GM_RENDER     : lod->lod_Width  = G(o)->Width / 7;
                             lod->lod_Height = (G(o)->Height - lod->lod_FontHeight) / 6;

                             for (i = 0; i < 7; i++)
                                 lod->lod_CalLefts[i] = G(o)->LeftEdge + (i * lod->lod_Width);

                             for (i = 0; i < 6; i++)
                                 lod->lod_CalTops[i] = G(o)->TopEdge + lod->lod_FontHeight + (i * lod->lod_Height);

                             RenderCalendarG(cl,o,(APTR)msg);
                             break;

	case GM_HITTEST    : if (GetDay(cl,o,((struct gpHitTest *)msg)->gpht_Mouse.X,((struct gpHitTest *)msg)->gpht_Mouse.Y - lod->lod_FontHeight) != 99)
                                 result = GMR_GADGETHIT;
                             else
                                 result = 0;
                             break;

	case GM_GOACTIVE   : lod->lod_BackupDay = lod->lod_CData.mday;
	case GM_HANDLEINPUT: result = HandleCalendarG(cl,o,(APTR)msg);
                             break;

	case OM_DISPOSE    :
	default            : result = (ULONG) DSM (cl, o, msg);
                             break;
    }

    return (result);
}


/*****************************************************************************/


VOID CalDrawBB(EdDataPtr ed, struct RastPort *rp, WORD x, WORD y,
                                                  WORD w, WORD h, ULONG tags, ...)
{
    DrawBevelBoxA(rp,x,y,w,h,(struct TagItem *)&tags);
}


/*****************************************************************************/


ULONG SetCalendarGAttrs(Class * cl, Object * o, struct opSet * msg)
{
EdDataPtr            ed = (EdDataPtr)cl->cl_UserData;
struct localObjData *lod = INST_DATA (cl, o);
struct TagItem      *tags = msg->ops_AttrList;
struct TagItem      *tstate;
struct ClockData     cd;
struct TagItem      *tag;
ULONG                refresh = 0L;
ULONG                tidata;

    tstate = tags;
    while (tag = NextTagItem (&tstate))
    {
	tidata = tag->ti_Data;
	switch (tag->ti_Tag)
	{
            case BOA_ClockData   : lod->lod_CData       = *((struct ClockData *) tidata);
                                   lod->lod_DaysInMonth = GetDaysInMonth(ed,lod->lod_CData.month, lod->lod_CData.year);

                                   /* First day of month falls on which weekday? */
                                   cd.sec   = 0;
                                   cd.min   = 0;
                                   cd.wday  = 0;
                                   cd.hour  = 1;
                                   cd.mday  = 1;
                                   cd.month = lod->lod_CData.month;
                                   cd.year  = lod->lod_CData.year;
                                   Amiga2Date ((Date2Amiga (&cd)), &cd);
                                   lod->lod_WDay = cd.wday;
                                   refresh = 1;
                                   break;

            case BOA_Day         : lod->lod_CData.mday = (UWORD) tidata;
                                   refresh = 1;
                                   break;

            case BOA_FirstWeekday: lod->lod_FirstWeekday = (UWORD) tidata;
                                   refresh = 1;
                                   break;
	}
    }

    return (refresh);
}


/*****************************************************************************/


UWORD GetDay(Class * cl, Object * o, WORD x, WORD y)
{
struct localObjData *lod = INST_DATA (cl, o);
WORD                 firstCellColumn;
UWORD                day;

    if ((x < 0) || (x >= lod->lod_Width * 7))
    {
        x = -1;
    }
    else
    {
        x /= lod->lod_Width;
    }

    if ((y < 0) || (y >= lod->lod_Height * 6))
    {
        y = -1;
    }
    else
    {
        y /= lod->lod_Height;
    }

    firstCellColumn = lod->lod_WDay - lod->lod_FirstWeekday;
    if (lod->lod_WDay < lod->lod_FirstWeekday)
        firstCellColumn += 7;

    if ((y == 0) && (x >= 0) && (x < firstCellColumn))
    {
        x = -1;
    }

    day = 99;
    if ((x >= 0) && (y >= 0))
    {
        day = (y * 7) + x - firstCellColumn + 1;

        if (day > lod->lod_DaysInMonth)
        {
            day = 99;
        }
    }

    return(day);
}


/*****************************************************************************/


ULONG HandleCalendarG(Class * cl, Object * o, struct gpInput * msg)
{
struct localObjData *lod = INST_DATA (cl, o);
struct InputEvent   *ie = msg->gpi_IEvent;
ULONG                result = 0;
UWORD                day;

    /* Gadget selected? */
    if (ie->ie_Class == IECLASS_RAWMOUSE)
    {
        if (ie->ie_Code == IECODE_RBUTTON)
            day = lod->lod_BackupDay;
        else
            day = GetDay(cl,o,msg->gpi_Mouse.X,msg->gpi_Mouse.Y - lod->lod_FontHeight);

	/* Do we have a valid, new cell? */
	if (day != 99)
	{
	    /* Show which one needs to be un-highlighted */
	    lod->lod_HDay = lod->lod_CData.mday;

            if (lod->lod_CData.mday != day)
            {
                /* Remember the currently selected day */
                lod->lod_CData.mday = day;

                /* Update the graphics to reflect the current state. */
                RenderCalendarG(cl, o, (struct gpRender *) msg);
            }
	}

        if (ie->ie_Code == (IECODE_LBUTTON | IECODE_UP_PREFIX))
        {
            result = GMR_NOREUSE | GMR_VERIFY;

            /* Return the current day */
            *msg->gpi_Termination = (0xFFFFL & lod->lod_CData.mday);
        }
        else if (ie->ie_Code == IECODE_RBUTTON)
        {
            result = GMR_NOREUSE;
        }
    }

    return (result);
}


/*****************************************************************************/


ULONG RenderCalendarG(Class * cl, Object * o, struct gpRender * msg)
{
EdDataPtr            ed = (EdDataPtr)cl->cl_UserData;
struct localObjData *lod = INST_DATA(cl, o);
struct GadgetInfo   *gi = msg->gpr_GInfo;
struct DrawInfo     *di = gi->gi_DrInfo;
struct RastPort     *rp;
ULONG                result = 0;
BOOL                 refresh;
BOOL                 clear;
BOOL                 high;
UWORD                x, y;
UWORD                row, col;
LONG                 draw;
UWORD                i;
char                 dayText[4];
STRPTR               day;

    draw = (msg->MethodID == GM_RENDER) ? msg->gpr_Redraw : GREDRAW_UPDATE;

    if (rp = ObtainGIRPort(msg->gpr_GInfo))
    {
	SetDrMd(rp,JAM1);
	SetFont(rp,ed->ed_Font);

	if (draw == GREDRAW_REDRAW)
	{
	    SetAPen(rp,di->dri_Pens[BACKGROUNDPEN]);
	    RectFill(rp,G(o)->LeftEdge,
                        G(o)->TopEdge,
                        G(o)->LeftEdge + G(o)->Width - 1,
		        G(o)->TopEdge + G(o)->Height - 1);

	    SetAPen(rp,di->dri_Pens[TEXTPEN]);
	    for (i = 0; i < 7; i++)
	    {
                day = ed->ed_Days[(i+lod->lod_FirstWeekday) % 7];
		y = G(o)->TopEdge + rp->TxBaseline;
		x = lod->lod_CalLefts[i] + ((lod->lod_Width - TextLength(rp,day,strlen(day))) / 2);
		Move (rp, x, y);
		Text (rp, day,strlen(day));
	    }
	}

	row = 0;
        col = lod->lod_WDay - lod->lod_FirstWeekday;
        if (lod->lod_WDay < lod->lod_FirstWeekday)
            col += 7;

	for (i = 1; i <= lod->lod_DaysInMonth; i++)
	{
	    x = lod->lod_CalLefts[col];
	    y = lod->lod_CalTops[row];

	    high    = FALSE;
            clear   = FALSE;
            refresh = FALSE;

	    if (draw == GREDRAW_REDRAW)
	    {
		refresh = TRUE;
	    }

	    if (i == lod->lod_HDay)
	    {
		lod->lod_HDay = 99;
		SetAPen(rp,di->dri_Pens[BACKGROUNDPEN]);
		clear = TRUE;
	    }

	    if (i == lod->lod_CData.mday)
	    {
		SetAPen(rp,di->dri_Pens[FILLPEN]);
		clear = TRUE;
                high  = TRUE;
	    }

	    if (clear)
	    {
	        refresh = TRUE;
		RectFill(rp, (x + 2),
                             (y + 1),
			     (x + lod->lod_Width - 3),
                             (y + lod->lod_Height - 2));
	    }

	    if (refresh)
	    {
		if (high)
		{
		    SetAPen(rp,di->dri_Pens[FILLTEXTPEN]);
		    CalDrawBB(ed,rp,x,y,lod->lod_Width,lod->lod_Height,
                                    GTBB_Recessed, TRUE,
                                    GT_VisualInfo, ed->ed_VisualInfo,
                                    TAG_DONE);
                }
		else
		{
		    SetAPen(rp,di->dri_Pens[TEXTPEN]);
		    CalDrawBB(ed,rp,x,y,lod->lod_Width,lod->lod_Height,
                                    GT_VisualInfo, ed->ed_VisualInfo,
                                    TAG_DONE);
                }

		sprintf(dayText,"%ld",i);
		Move(rp,x+3,y+3+rp->TxBaseline);
		Text(rp,dayText,strlen(dayText));
	    }

	    if (++col > 6)
	    {
		col = 0;
		row++;
	    }
	}

	result = 1;
	ReleaseGIRPort (rp);
    }

    return (result);
}
@


38.7
log
@GA_HITTEST now returns 0 if a mouse click is not in valid day
@
text
@d51 1
d211 1
a211 1
	case GM_GOACTIVE   :
d293 1
a293 1
    if ((x < 0) || (x > G(o)->Width))
d302 1
a302 1
    if ((y < 0) || (y > G(o)->Height))
d342 1
a342 1
ULONG                result = GMR_NOREUSE;
d346 1
a346 1
    if (ie && (ie->ie_Class == IECLASS_RAWMOUSE) && (ie->ie_Code == SELECTDOWN))
d348 4
a351 1
        day = GetDay(cl,o,msg->gpi_Mouse.X,msg->gpi_Mouse.Y - lod->lod_FontHeight);
a355 3
	    /* Normal end of the gadget activation */
	    result |= GMR_VERIFY;

d368 12
a380 3

    /* Return the current top */
    *msg->gpi_Termination = (0xFFFFL & lod->lod_CData.mday);
@


38.6
log
@*** empty log message ***
@
text
@d65 1
d204 4
a207 1
	case GM_HITTEST    : result = GMR_GADGETHIT;
d286 1
a286 1
ULONG HandleCalendarG(Class * cl, Object * o, struct gpInput * msg)
d289 1
a289 3
struct InputEvent   *ie = msg->gpi_IEvent;
ULONG                result = GMR_NOREUSE;
WORD                 x, y;
d291 27
a317 1
WORD                 firstCellColumn;
d319 2
a320 2
    /* Gadget selected? */
    if (ie && (ie->ie_Class == IECLASS_RAWMOUSE) && (ie->ie_Code == SELECTDOWN))
d322 7
a328 3
	/* Figure out which cell the mouse is over */
	x = msg->gpi_Mouse.X;
	y = msg->gpi_Mouse.Y - lod->lod_FontHeight;
d330 2
a331 8
	if ((x < 0) || (x > G(o)->Width))
	{
	    x = -1;
	}
	else
	{
	    x /= lod->lod_Width;
	}
a332 8
	if ((y < 0) || (y > G(o)->Height))
	{
	    y = -1;
	}
	else
	{
	    y /= lod->lod_Height;
	}
d334 1
a334 3
        firstCellColumn = lod->lod_WDay - lod->lod_FirstWeekday;
        if (lod->lod_WDay < lod->lod_FirstWeekday)
            firstCellColumn += 7;
a335 4
	if ((y == 0) && (x >= 0) && (x < firstCellColumn))
	{
	    x = -1;
	}
d337 6
a342 4
	day = 99;
	if ((x >= 0) && (y >= 0))
	{
	    day = (y * 7) + x - firstCellColumn + 1;
d344 4
a347 5
            if (day > lod->lod_DaysInMonth)
            {
                day = 99;
            }
        }
@


38.5
log
@Fixed problem with clicking on the already selected day
@
text
@a261 6

                                   if (lod->lod_CData.mday > lod->lod_DaysInMonth)
                                   {
                                       lod->lod_CData.mday = 1;
                                   }

@


38.4
log
@*** empty log message ***
@
text
@d294 1
a294 1
WORD                 day;
a334 1
	}
d336 5
a340 4
	if (day > lod->lod_DaysInMonth)
	{
	    day = 99;
	}
d343 1
a343 1
	if ((day != 99) && (lod->lod_CData.mday != day))
d351 4
a354 2
	    /* Remember the currently selected day */
	    lod->lod_CData.mday = day;
d356 3
a358 2
	    /* Update the graphics to reflect the current state. */
	    RenderCalendarG(cl, o, (struct gpRender *) msg);
@


38.3
log
@Added BOA_FirstWeekday tag and support
@
text
@d222 10
a368 10
VOID DrawBB(EdDataPtr ed, struct RastPort *rp, WORD x, WORD y,
                                               WORD w, WORD h, ULONG tags, ...)
{
    DrawBevelBoxA(rp,x,y,w,h,(struct TagItem *)&tags);
}


/*****************************************************************************/


d460 4
a463 4
		    DrawBB(ed,rp,x,y,lod->lod_Width,lod->lod_Height,
                                 GTBB_Recessed, TRUE,
                                 GT_VisualInfo, ed->ed_VisualInfo,
                                 TAG_DONE);
d468 3
a470 3
		    DrawBB(ed,rp,x,y,lod->lod_Width,lod->lod_Height,
                                 GT_VisualInfo, ed->ed_VisualInfo,
                                 TAG_DONE);
@


38.2
log
@Optimized code size
@
text
@d47 1
d160 5
a164 4
                                 lod->lod_DaysInMonth = 31;
                                 lod->lod_WDay        = 1;
                                 lod->lod_HDay        = 99;
                                 lod->lod_FontHeight  = ed->ed_Font->tf_YSize+1;
d166 1
a166 1
                                 SetCalendarGAttrs(cl,newobj,msg);
d174 1
a174 1
                             SetCalendarGAttrs (cl, o, msg);
d200 1
a200 1
                             RenderCalendarG(cl,o,msg);
d207 1
a207 1
	case GM_HANDLEINPUT: result = HandleCalendarG(cl,o,msg);
d239 2
a240 2
	    case BOA_ClockData: lod->lod_CData       = *((struct ClockData *) tidata);
                                lod->lod_DaysInMonth = GetDaysInMonth(ed,lod->lod_CData.month, lod->lod_CData.year);
d242 22
a263 18
                                /* First day of month falls on which weekday? */
                                cd.sec   = 0;
                                cd.min   = 0;
                                cd.wday  = 0;
                                cd.hour  = 1;
                                cd.mday  = 1;
                                cd.month = lod->lod_CData.month;
                                cd.year  = lod->lod_CData.year;
                                Amiga2Date ((Date2Amiga (&cd)), &cd);
                                lod->lod_WDay = cd.wday;

                                if (lod->lod_CData.mday > lod->lod_DaysInMonth)
                                {
                                    lod->lod_CData.mday = 1;
                                }

                                refresh = 1;
                                break;
d265 3
a267 3
	    case BOA_Day      : lod->lod_CData.mday = (UWORD) tidata;
                                refresh = 1;
                                break;
d285 1
d312 5
a316 1
	if ((y == 0) && (x >= 0) && (x < lod->lod_WDay))
d324 1
a324 1
	    day = (y * 7) + x - lod->lod_WDay + 1;
d405 1
a405 1
                day = ed->ed_Days[i];
a412 1
	col = lod->lod_WDay;
d414 3
@


38.1
log
@Initial V38 RCS checkin
@
text
@d27 1
d33 1
d42 1
a42 1
#define G(o)		((struct Gadget *)(o))
a43 2
#define	FRAMEICLASS	"frameiclass"

d46 9
a54 16
    struct ClockData lod_CData;	/* Current calendar time */
    UWORD lod_DaysInMonth;	/* Number of days in the month */
    UWORD lod_WDay;		/* First day of the month */
    UWORD lod_HDay;		/* Last highlighted day */
    UWORD lod_Width;		/* Width of each cell */
    UWORD lod_Height;		/* Height of each cell */
    UWORD lod_CalLefts[7];	/* Left offset of each cell */
    UWORD lod_CalTops[6];	/* Top offset of each cell */
    struct TextFont *lod_Font;	/* Font that we use */
    Object *lod_Frame;		/* Class allocated frame */
    struct IBox lod_Domain;	/* Domain of the gadget */
    struct
    {
	WORD V;
	WORD H;
    } lod_FMargins;		/* Margins for frame */
d60 4
a63 7
ULONG __stdargs dispatchCalendarG (Class * cl, Object * o, Msg msg);
ULONG renderCalendarG (Class * cl, Object * o, struct gpRender * msg);
ULONG setCalendarGAttrs (Class * cl, Object * o, struct opSet * msg);
ULONG getCalendarGAttrs (Class * cl, Object * o, struct opGet * msg);
ULONG activeCalendarG (Class * cl, Object * o, struct gpInput * msg);
ULONG handleCalendarG (Class * cl, Object * o, struct gpInput * msg);
LONG GetVisualState (struct Gadget * g, struct GadgetInfo * gi);
a72 1
VOID gadgetBox (struct Gadget * g, struct IBox * domain, struct IBox * box);
d77 5
a81 36

#define SUPERCLASSID	"gadgetclass"


/*****************************************************************************/


VOID gadgetBox (struct Gadget * g, struct IBox * domain, struct IBox * box)
{

    /* Set the 'normal' rectangle */
    box->Left = domain->Left + g->LeftEdge;
    box->Top = domain->Top + g->TopEdge;
    box->Width = g->Width;
    box->Height = g->Height;

    /* Check for relativity */
    if (g->Flags & GRELRIGHT)
	box->Left += domain->Width - 1;
    if (g->Flags & GRELBOTTOM)
	box->Top += domain->Height - 1;
    if (g->Flags & GRELWIDTH)
	box->Width += domain->Width;
    if (g->Flags & GRELHEIGHT)
	box->Height += domain->Height;

}


/*****************************************************************************/


UWORD GetDaysInMonth (EdDataPtr ed, UWORD n_month, UWORD n_year)
{
    struct ClockData cd;
    ULONG Date1, Date2;
d83 11
a93 3
    cd.sec = cd.min = cd.wday = (UWORD) 0;
    cd.hour = 1;
    cd.mday = 1;
d95 1
a95 1
    cd.year = n_year;
d97 1
a97 1
    Date1 = Date2Amiga (&cd);
d105 1
a105 1
    Date2 = Date2Amiga (&cd);
d107 1
a107 1
    return ((UWORD) ((Date2 - Date1) / SECS_PER_DAY));
d116 2
a117 2
    ULONG hookEntry ();
    Class *cl;
d122 1
a122 1
	cl->cl_Dispatcher.h_SubEntry = dispatchCalendarG;
d144 1
a144 1
ULONG __stdargs dispatchCalendarG (Class * cl, Object * o, Msg msg)
d146 6
a151 7
EdDataPtr ed = (EdDataPtr)cl->cl_UserData;
    struct localObjData *lod = INST_DATA (cl, o);
    struct IBox *box = &(lod->lod_Domain);
    struct RastPort *rp;
    ULONG retval = 0L;
    Object *newobj;
    UWORD i;
d155 3
a157 169
	case OM_NEW:
	    /* Allow our superclass to create the base */
	    if (newobj = (Object *) DSM (cl, o, msg))
	    {
		struct TagItem *attrs = ((struct opSet *) msg)->ops_AttrList;
		struct DrawInfo *drinfo;
		struct TagItem tg[3];

		/* Get the object's instance data */
		lod = INST_DATA (cl, newobj);

		/* Get the DrawInfo to use */
		drinfo = (struct DrawInfo *) GetTagData (GA_DrawInfo, NULL, attrs);

		lod->lod_Font = ed->ed_Font;

		/* Provide reasonable defaults */
		lod->lod_DaysInMonth = 31;
		lod->lod_WDay = 1;
		lod->lod_HDay = 99;

		/* Fill in the tags that we need */
		tg[0].ti_Tag = (drinfo) ? GA_DrawInfo : TAG_IGNORE;
		tg[0].ti_Data = (ULONG) drinfo;
		tg[1].ti_Tag = IA_EdgesOnly;
		tg[1].ti_Data = TRUE;
		tg[2].ti_Tag = TAG_DONE;

		/* Create the frame */
		if (lod->lod_Frame =
		    NewObjectA (NULL, FRAMEICLASS, tg))
		{
		    /* Get the margins of the frame */
		    if (!(DoMethod (lod->lod_Frame, OM_GET,
				    IA_LINEWIDTH, &(lod->lod_FMargins))))
		    {
			lod->lod_FMargins.V = 1;
			lod->lod_FMargins.H = 1;
		    }
		}

		/* Set the attributes */
		setCalendarGAttrs (cl, newobj, msg);
	    }

	    retval = (ULONG) newobj;
	    break;

	case OM_GET:
	    retval = getCalendarGAttrs (cl, o, msg);
	    break;

	case OM_UPDATE:
	case OM_SET:
	    /* Do the superclass first */
	    retval = DSM (cl, o, msg);

	    /* Call our set routines */
	    retval += setCalendarGAttrs (cl, o, msg);

	    /* See if we should refresh */
	    if (retval && (OCLASS (o) == cl))
	    {
		/* Get a pointer to the rastport */
		if (rp = ObtainGIRPort (((struct opSet *) msg)->ops_GInfo))
		{
		    struct gpRender gpr = {NULL};

		    /* Force a redraw */
		    gpr.MethodID = GM_RENDER;
		    gpr.gpr_GInfo = ((struct opSet *) msg)->ops_GInfo;
		    gpr.gpr_RPort = rp;
		    gpr.gpr_Redraw = GREDRAW_REDRAW;

		    /* Redraw... */
		    DM (o, &gpr);

		    /* Release the temporary rastport */
		    ReleaseGIRPort (rp);
		}

		/* Clear the return value */
		retval = 0L;
	    }
	    break;

	/* Render the graphics */
	case GM_RENDER:
	    /* Compute the gadget domain */
	    gadgetBox (G (o), &((struct gpRender *) msg)->gpr_GInfo->gi_Domain, box);

	    /* Calculate the size of the cells */
	    lod->lod_Width = box->Width / 7;
	    lod->lod_Height = (box->Height - (lod->lod_Font->tf_YSize + 1)) / 6;

	    /* Precalculate the offset of each cell */
	    for (i = 0; i < 7; i++)
		lod->lod_CalLefts[i] = box->Left + (i * lod->lod_Width);
	    for (i = 0; i < 6; i++)
		lod->lod_CalTops[i] = box->Top + (lod->lod_Font->tf_YSize + 1) + (i * lod->lod_Height);

	    /* Render the button */
	    renderCalendarG (cl, o, msg);

	    break;

	/* Always respond to hit */
	case GM_HITTEST:
	    retval = GMR_GADGETHIT;
	    break;

	/* Handle input */
	case GM_GOACTIVE:
	case GM_HANDLEINPUT:
	    /* Handle the input */
	    retval = handleCalendarG (cl, o, msg);
	    break;

	/* Delete ourself */
	case OM_DISPOSE:
	    /* See if we have a frame to dispose */
	    if (lod->lod_Frame)
	    {
		/* Delete our frame */
		DisposeObject (lod->lod_Frame);
	    }

	    /* Pass it up to the superclass */
	    retval = (ULONG) DSM (cl, o, msg);
	    break;

	/* Let the superclass handle everything else */
	default:
	    retval = (ULONG) DSM (cl, o, msg);
	    break;
    }

    return (retval);
}


/*****************************************************************************/


/* Inquire attributes of an object */
ULONG getCalendarGAttrs (Class * cl, Object * o, struct opGet * msg)
{
    struct localObjData *lod = INST_DATA (cl, o);

    switch (msg->opg_AttrID)
    {
	case BOA_Day:
	    *msg->opg_Storage = (ULONG) lod->lod_CData.mday;
	    break;

	case BOA_ClockData:
	    *msg->opg_Storage = (ULONG) & lod->lod_CData;
	    break;

	    /* Let the superclass try */
	default:
	    return ((ULONG) DSM (cl, o, msg));
    }

    return (1L);
}


/*****************************************************************************/
d159 71
a230 13
/* Set attributes of an object */
ULONG setCalendarGAttrs (Class * cl, Object * o, struct opSet * msg)
{
EdDataPtr ed = (EdDataPtr)cl->cl_UserData;
    struct localObjData *lod = INST_DATA (cl, o);
    struct TagItem *tags = msg->ops_AttrList;
    struct TagItem *tstate;
    struct ClockData cd;
    struct TagItem *tag;
    ULONG refresh = 0L;
    ULONG tidata;

    /* process rest */
d237 2
a238 24
	    case BOA_ClockData:
		/* Copy the clock data */
		lod->lod_CData = *((struct ClockData *) tidata);

		/* Get the number of days in the current month */
		lod->lod_DaysInMonth = GetDaysInMonth (ed,lod->lod_CData.month, lod->lod_CData.year);

		/*
		 * Find out on which day of the week the first of the month
		 * falls
		 */
		cd.sec = cd.min = cd.wday = (UWORD) 0;
		cd.hour = 1;
		cd.mday = 1;
		cd.month = lod->lod_CData.month;
		cd.year = lod->lod_CData.year;
		Amiga2Date ((Date2Amiga (&cd)), &cd);
		lod->lod_WDay = cd.wday;

		/* Make it a valid day */
		if (lod->lod_CData.mday > lod->lod_DaysInMonth)
		{
		    lod->lod_CData.mday = 1;
		}
d240 22
a261 8
		/* Need to redraw */
		refresh = 1L;
		break;

	    case BOA_Day:
		lod->lod_CData.mday = (UWORD) tidata;
		refresh = 1L;
		break;
d272 1
a272 1
ULONG handleCalendarG (Class * cl, Object * o, struct gpInput * msg)
d274 5
a278 6
    struct localObjData *lod = INST_DATA (cl, o);
    struct InputEvent *ie = msg->gpi_IEvent;
    struct IBox *box = &(lod->lod_Domain);
    ULONG retval = GMR_NOREUSE;
    WORD x, y;
    WORD day;
d285 1
a285 1
	y = msg->gpi_Mouse.Y - (lod->lod_Font->tf_YSize + 1);
d287 1
a287 1
	if ((x < 0) || (x > box->Width))
d296 1
a296 1
	if ((y < 0) || (y > box->Height))
d325 1
a325 1
	    retval |= GMR_VERIFY;
d334 1
a334 1
	    renderCalendarG (cl, o, (struct gpRender *) msg);
d341 1
a341 1
    return (retval);
d346 29
a374 24


ULONG renderCalendarG (Class * cl, Object * o, struct gpRender * msg)
{
EdDataPtr ed = (EdDataPtr)cl->cl_UserData;
    struct localObjData *lod = INST_DATA (cl, o);
    struct GadgetInfo *gi = msg->gpr_GInfo;
    struct IBox *box = &(lod->lod_Domain);
    struct DrawInfo *di = gi->gi_DrInfo;
    UWORD vm = lod->lod_FMargins.V;
    UWORD hm = lod->lod_FMargins.H;
    struct impDraw imp = {NULL};
    struct RastPort *rp;
    ULONG retval = 0L;
    BOOL refresh;
    BOOL clear;
    UWORD x, y;
    BOOL high;
    UWORD row;
    UWORD col;
    LONG draw;
    UWORD i;
    char dayText[4];
    STRPTR day;
a375 1
    /* Cache drawing mode */
d378 1
a378 2
    /* Get the rastport that we're going to write into. */
    if (rp = ObtainGIRPort (msg->gpr_GInfo))
d380 2
a381 11
	/* Initialize the draw message */
	imp.MethodID = IM_DRAWFRAME;
	imp.imp_RPort = rp;
	imp.imp_State = IDS_NORMAL;
	imp.imp_DrInfo = gi->gi_DrInfo;
	imp.imp_Dimensions.Width = lod->lod_Width;
	imp.imp_Dimensions.Height = lod->lod_Height;

	/* Prepare for drawing */
	SetFont (rp, lod->lod_Font);
	SetDrMd (rp, JAM1);
a382 1
	/* Are we redrawing? */
d385 5
a389 5
	    /* Clear the entire gadget background */
	    SetAPen (rp, di->dri_Pens[BACKGROUNDPEN]);
	    RectFill (rp, box->Left, box->Top,
		      box->Left + box->Width - 1,
		      box->Top + box->Height - 1);
d391 1
a391 4
	    /* Get ready to draw text */
	    SetAPen (rp, di->dri_Pens[TEXTPEN]);

	    /* Print the names of the days */
d395 1
a395 1
		y = box->Top + rp->TxBaseline;
a401 1
	/* Initialize the row & column variables */
d405 1
a405 2
	/* Step through the months */
	for (i = 0; i < lod->lod_DaysInMonth; i++)
d407 2
a408 6
	    /* Get the cell offsets */
	    x = imp.imp_Offset.X = lod->lod_CalLefts[col];
	    y = imp.imp_Offset.Y = lod->lod_CalTops[row];

	    /* Set to normal state */
	    imp.imp_State = IDS_NORMAL;
d410 3
a412 2
	    /* Clear the draw states */
	    high = clear = refresh = FALSE;
a413 1
	    /* Should we draw? */
d419 1
a419 2
	    /* Does it need to be cleared? */
	    if (i == (lod->lod_HDay - 1))
a420 1
		/* Unset it */
d422 3
a424 3

		/* Highlight the box */
		SetAPen (rp, di->dri_Pens[BACKGROUNDPEN]);
d426 5
a430 12
		/* Need to clear it */
		refresh = clear = TRUE;
	    }

	    /* Does it need to be highlighted? */
	    if (i == (lod->lod_CData.mday - 1))
	    {
		/* Highlight the box */
		SetAPen (rp, di->dri_Pens[FILLPEN]);

		/* Need to highlight it */
		refresh = clear = high = TRUE;
d435 5
a439 2
		RectFill (rp, (x + vm), (y + hm),
			  (x + lod->lod_Width - (2 * vm)), (y + lod->lod_Height - (2 * hm)));
a443 6
		/* Draw the cell's frame */
		DM (lod->lod_Frame, &imp);

		/* Draw the cell's number */
		SetAPen (rp, di->dri_Pens[TEXTPEN]);

d446 16
a461 6
		    SetAPen (rp, di->dri_Pens[FILLTEXTPEN]);
		}
		y += vm + 1 + rp->TxBaseline;
		x += hm + 2;
		sprintf(dayText,"%ld",i+1);
		Move(rp,x,y);
d472 1
a472 4
	/* Indicate success */
	retval = 1L;

	/* Release the rastport */
d476 1
a476 1
    return (retval);
@
