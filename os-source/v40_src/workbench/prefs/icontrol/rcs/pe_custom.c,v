head     38.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.16
date     92.10.22.17.06.40;  author vertex;  state Exp;
branches ;
next     38.15;

38.15
date     92.10.01.12.43.15;  author vertex;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.25.11.49.08;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     92.06.03.17.17.59;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     92.03.24.17.43.40;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     92.03.02.10.43.19;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     92.01.21.12.38.03;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.11.22.15.12.07;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.11.15.16.42.45;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.11.11.12.05.30;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.09.19.16.01.57;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.27.11.26.36;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.20.10.14.15;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.12.13.22.17;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.06.17.23.27;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.19.12.03.48;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - IControl custom interface
@


38.16
log
@Mode promotion is now on by default
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <devices/keymap.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <graphics/text.h>
#include <graphics/gfxbase.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/locale.h>
#include <dos/dos.h>
#include <dos/exall.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/asl_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"


#define SysBase ed->ed_SysBase


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_ICTL,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
};


/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
    ed->ed_PrefsDefaults.ic_TimeOut     = 50;
    ed->ed_PrefsDefaults.ic_MetaDrag    = IEQUALIFIER_LCOMMAND;
    ed->ed_PrefsDefaults.ic_Flags       = ICF_COERCE_LACE | ICF_STRGAD_FILTER | ICF_MENUSNAP | ICF_MODEPROMOTE;
    ed->ed_PrefsDefaults.ic_WBtoFront   = 'N';
    ed->ed_PrefsDefaults.ic_FrontToBack = 'M';
    ed->ed_PrefsDefaults.ic_ReqTrue     = 'V';		/* CKey: Requester TRUE		*/
    ed->ed_PrefsDefaults.ic_ReqFalse    = 'B';

    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

    return(ES_NORMAL);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (cn->cn_ID != ID_ICTL || cn->cn_Type != ID_PREF)
        return(ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct IControlPrefs)) == sizeof(struct IControlPrefs))
        return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
{
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
}


/*****************************************************************************/


EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (!PushChunk(iff,0,ID_ICTL,sizeof(struct IControlPrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct IControlPrefs)) == sizeof(struct IControlPrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
{
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
}


/*****************************************************************************/


#define NW_WIDTH     420
#define NW_HEIGHT    117
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | IDCMP_INTUITICKS | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP | LISTVIEWIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

struct EdMenu far EM[] = {
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN, 0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP, 0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE, 0},

    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},

    {NM_END,    MSG_NOTHING,                EC_NOP, 0}
};

/* main display gadgets */
struct EdGadget far EG[] = {
    {BUTTON_KIND,   8,   100, 87,  14, MSG_SAVE_GAD,       EC_SAVE,    0},
    {BUTTON_KIND,   166, 100, 87,  14, MSG_USE_GAD,        EC_USE,     0},
    {BUTTON_KIND,   325, 100, 87,  14, MSG_CANCEL_GAD,     EC_CANCEL,  0},

    {CHECKBOX_KIND, 10, 25,  87,  14, MSG_NOTHING,        EC_SHIFT,   PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 10, 39,  87,  14, MSG_ICTL_CTRL_GAD,  EC_CTRL,    PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 10, 53,  87,  14, MSG_ICTL_ALT_GAD,   EC_ALT,     PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 10, 67,  87,  14, MSG_NOTHING,        EC_AMIGA,   PLACETEXT_RIGHT},

    {CHECKBOX_KIND, 386, 25,  87,  14, MSG_ICTL_MENUSNAP_GAD,        EC_MENUSNAP,       0},
    {CHECKBOX_KIND, 386, 39,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0},
    {CHECKBOX_KIND, 386, 53,  87,  14, MSG_ICTL_AVOIDFLICKER_GAD,    EC_AVOIDFLICKER,   0},
    {CHECKBOX_KIND, 386, 67,  87,  14, MSG_ICTL_MODEPROMOTE_GAD,     EC_MODEPROMOTE,    0}
};


/*****************************************************************************/


BOOL CreateDisplay(EdDataPtr ed)
{
UWORD zoomSize[4];

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);

    RenderGadgets(ed);

    if ((ed->ed_LastAdded)
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_ICTL_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
    {
        return(TRUE);
    }

    DisposeDisplay(ed);
    return(FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay(EdDataPtr ed)
{
    if (ed->ed_Window)
    {
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
    }
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/


WORD chip ShiftSymbolData[] =
{
    0x0300,		/* ......**........ */
    0x0780,		/* .....****....... */
    0x0cc0,		/* ....**..**...... */
    0x1860,		/* ...**....**..... */
    0x3cf0,		/* ..****..****.... */
    0x0cc0,		/* ....**..**...... */
    0x0cc0,		/* ....**..**...... */
    0x0fc0 		/* ....******...... */
};


WORD chip AmigaSymbolData[] =
{
    0x01c0,		/* .......***...... */
    0x03c0,		/* ......****...... */
    0x06c0,		/* .....**.**...... */
    0x0cc0,		/* ....**..**...... */
    0x1fc0,		/* ...*******...... */
    0x30c0,		/* ..**....**...... */
    0xf9e0 		/* *****..****..... */
};


/*****************************************************************************/


struct Image far ShiftSymbol =
{
    0, 0, 12, 8, 1, ShiftSymbolData, 0x01, 0x00, NULL
};

struct Image far AmigaSymbol =
{
    0, 0, 12, 7, 1, AmigaSymbolData, 0x01, 0x00, NULL
};


/*****************************************************************************/


VOID PutLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w, BOOL center)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    if (center)
        Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
                 window->BorderTop+y);
    else
        Move(rp,window->BorderLeft+x,window->BorderTop+y);

    Text(rp,str,len);
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
{
struct RastPort *rp;

    rp = ed->ed_Window->RPort;
    SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
    SetBPen(rp,ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);

    PutLine(ed,rp,MSG_ICTL_SCRDRAG_HDR,10,20,194,TRUE);
    PutLine(ed,rp,MSG_ICTL_MISC_HDR,202,20,200,TRUE);

    SetAPen(rp,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);

    PutLine(ed,rp,MSG_ICTL_SHIFT_GAD,57,33,0,FALSE);
    PutLine(ed,rp,MSG_ICTL_LAMIGA_GAD,57,75,0,FALSE);

    DrawImage(rp,&ShiftSymbol,42+window->BorderLeft,27+window->BorderTop);
    DrawImage(rp,&AmigaSymbol,42+window->BorderLeft,69+window->BorderTop);
}


/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
    ed->ed_Shift = DoPrefsGadget(ed,&EG[3],ed->ed_Shift,
                                           GTCB_Checked,IEQUALIFIER_LSHIFT & ed->ed_PrefsWork.ic_MetaDrag,
                                           TAG_DONE);

    ed->ed_Ctrl = DoPrefsGadget(ed,&EG[4],ed->ed_Ctrl,
                                          GTCB_Checked,IEQUALIFIER_CONTROL & ed->ed_PrefsWork.ic_MetaDrag,
                                          TAG_DONE);

    ed->ed_Alt = DoPrefsGadget(ed,&EG[5],ed->ed_Alt,
                                         GTCB_Checked,IEQUALIFIER_LALT & ed->ed_PrefsWork.ic_MetaDrag,
                                         TAG_DONE);

    ed->ed_Amiga = DoPrefsGadget(ed,&EG[6],ed->ed_Amiga,
                                           GTCB_Checked,IEQUALIFIER_LCOMMAND & ed->ed_PrefsWork.ic_MetaDrag,
                                           TAG_DONE);

    ed->ed_MenuSnap = DoPrefsGadget(ed,&EG[7],ed->ed_MenuSnap,
                                              GTCB_Checked,ICF_MENUSNAP & ed->ed_PrefsWork.ic_Flags,
                                              TAG_DONE);

    ed->ed_GadgetFilter = DoPrefsGadget(ed,&EG[8],ed->ed_GadgetFilter,
                                                  GTCB_Checked,ICF_STRGAD_FILTER & ed->ed_PrefsWork.ic_Flags,
                                                  TAG_DONE);

    ed->ed_AvoidFlicker = DoPrefsGadget(ed,&EG[9],ed->ed_AvoidFlicker,
                                                  GTCB_Checked,ICF_COERCE_LACE & ed->ed_PrefsWork.ic_Flags,
                                                  TAG_DONE);

#undef GfxBase

    if (((struct GfxBase *)ed->ed_GfxBase)->ChipRevBits0 & GFXF_AA_ALICE)
        ed->ed_ModePromote = DoPrefsGadget(ed,&EG[10],ed->ed_ModePromote,
                                                      GTCB_Checked,ICF_MODEPROMOTE & ed->ed_PrefsWork.ic_Flags,
                                                      TAG_DONE);

#define GfxBase ed->ed_GfxBase
}


/*****************************************************************************/


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
struct Gadget *gadget;
BOOL           selected;

    gadget   = ed->ed_CurrentMsg.IAddress;
    selected = (gadget->Flags & SELECTED);

    switch (ec)
    {
        case EC_SHIFT         : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LSHIFT);
                                if (selected)
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LSHIFT;
                                break;

        case EC_CTRL          : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_CONTROL);
                                if (selected)
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_CONTROL;
                                break;

        case EC_ALT           : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LALT);
                                if (selected)
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LALT;
                                break;

        case EC_AMIGA         : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LCOMMAND);
                                if (selected)
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LCOMMAND;
                                break;

        case EC_AVOIDFLICKER  : ed->ed_PrefsWork.ic_Flags &= ~(ICF_COERCE_LACE);
                                if (selected)
                                    ed->ed_PrefsWork.ic_Flags |= ICF_COERCE_LACE;
                                break;

        case EC_MENUSNAP      : ed->ed_PrefsWork.ic_Flags &= ~(ICF_MENUSNAP);
                                if (selected)
                                    ed->ed_PrefsWork.ic_Flags |= ICF_MENUSNAP;
                                break;

        case EC_GADGETFILTER  : ed->ed_PrefsWork.ic_Flags &= ~(ICF_STRGAD_FILTER);
                                if (selected)
                                    ed->ed_PrefsWork.ic_Flags |= ICF_STRGAD_FILTER;
                                break;

        case EC_MODEPROMOTE   : ed->ed_PrefsWork.ic_Flags &= ~(ICF_MODEPROMOTE);
                                if (selected)
                                    ed->ed_PrefsWork.ic_Flags |= ICF_MODEPROMOTE;
                                break;

        default               : break;
    }
}


/*****************************************************************************/


VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{
    state->cs_Available = TRUE;
    state->cs_Selected  = FALSE;
}
@


38.15
log
@Removed "Preserve Colors" gadget
@
text
@d86 1
a86 1
    ed->ed_PrefsDefaults.ic_Flags       = ICF_COERCE_LACE | ICF_STRGAD_FILTER | ICF_MENUSNAP;
@


38.14
log
@Only puts the Mode Promotion gadget if running on an AA machine
@
text
@d86 1
a86 1
    ed->ed_PrefsDefaults.ic_Flags       = ICF_COERCE_COLORS | ICF_COERCE_LACE | ICF_STRGAD_FILTER | ICF_MENUSNAP;
d144 1
a144 1
#define NW_HEIGHT    127
d173 3
a175 3
    {BUTTON_KIND,   8,   110, 87,  14, MSG_SAVE_GAD,       EC_SAVE,    0},
    {BUTTON_KIND,   166, 110, 87,  14, MSG_USE_GAD,        EC_USE,     0},
    {BUTTON_KIND,   325, 110, 87,  14, MSG_CANCEL_GAD,     EC_CANCEL,  0},
d182 5
a186 6
    {CHECKBOX_KIND, 386, 15,  87,  14, MSG_ICTL_AVOIDFLICKER_GAD,    EC_AVOIDFLICKER,   0},
    {CHECKBOX_KIND, 386, 29,  87,  14, MSG_ICTL_PRESERVECOLORS_GAD,  EC_PRESERVECOLORS, 0},
    {CHECKBOX_KIND, 386, 63,  87,  14, MSG_ICTL_MENUSNAP_GAD,        EC_MENUSNAP,       0},
    {CHECKBOX_KIND, 386, 77,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0},
    {CHECKBOX_KIND, 386, 91,  87,  14, MSG_ICTL_MODEPROMOTE_GAD,     EC_MODEPROMOTE,    0}
};
d325 1
a325 2
    PutLine(ed,rp,MSG_ICTL_COERCION_HDR,202,10,200,TRUE);
    PutLine(ed,rp,MSG_ICTL_MISC_HDR,202,59,200,TRUE);
d358 3
a360 3
    ed->ed_PreserveColors = DoPrefsGadget(ed,&EG[7],ed->ed_PreserveColors,
                                                    GTCB_Checked,ICF_COERCE_LACE & ed->ed_PrefsWork.ic_Flags,
                                                    TAG_DONE);
d362 2
a363 2
    ed->ed_AvoidFlicker = DoPrefsGadget(ed,&EG[8],ed->ed_AvoidFlicker,
                                                  GTCB_Checked,ICF_COERCE_COLORS & ed->ed_PrefsWork.ic_Flags,
d366 3
a368 7
    ed->ed_MenuSnap = DoPrefsGadget(ed,&EG[9],ed->ed_MenuSnap,
                                              GTCB_Checked,ICF_MENUSNAP & ed->ed_PrefsWork.ic_Flags,
                                              TAG_DONE);

    ed->ed_GadgetFilter = DoPrefsGadget(ed,&EG[10],ed->ed_GadgetFilter,
                                                   GTCB_Checked,ICF_STRGAD_FILTER & ed->ed_PrefsWork.ic_Flags,
                                                   TAG_DONE);
d373 1
a373 1
        ed->ed_ModePromote = DoPrefsGadget(ed,&EG[11],ed->ed_ModePromote,
a416 5
                                break;

        case EC_PRESERVECOLORS: ed->ed_PrefsWork.ic_Flags &= ~(ICF_COERCE_COLORS);
                                if (selected)
                                    ed->ed_PrefsWork.ic_Flags |= ICF_COERCE_COLORS;
@


38.13
log
@Reenabled promotion gadget
@
text
@d13 1
d376 3
a378 1
    if (IntuitionBase->lib_Version >= 39)
d382 2
@


38.12
log
@Removed WA_Left and WA_Top
@
text
@d184 2
a185 2
    {CHECKBOX_KIND, 386, 77,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0}
/*    {CHECKBOX_KIND, 362, 91,  87,  14, MSG_ICTL_MODEPROMOTE_GAD,     EC_MODEPROMOTE,    0} */
a374 1
/*
d377 1
a377 1
                                                      GTCB_Checked,ICF_MODEPROMOTION & ed->ed_PrefsWork.ic_Flags,
a378 1
*/
d434 2
a435 2
/*
        case EC_MODEPROMOTE   : ed->ed_PrefsWork.ic_Flags &= ~(ICF_MODEPROMOTION);
d437 1
a437 1
                                    ed->ed_PrefsWork.ic_Flags |= ICF_MODEPROMOTION;
d439 1
a439 1
*/
@


38.11
log
@No longer touches the IEQUALIFIER_RSHIFT and RALT bits in the
  prefs file
@
text
@a141 2
#define NW_LEFT      0
#define NW_TOP       0
d196 2
a197 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
d210 1
a210 3
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
@


38.10
log
@Made window a bit wider for better localization
@
text
@d401 1
a401 1
        case EC_SHIFT         : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT);
d403 1
a403 1
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT;
d411 1
a411 1
        case EC_ALT           : ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LALT | IEQUALIFIER_RALT);
d413 1
a413 1
                                    ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LALT | IEQUALIFIER_RALT;
@


38.9
log
@*** empty log message ***
@
text
@d144 1
a144 1
#define NW_WIDTH     396
d175 2
a176 2
    {BUTTON_KIND,   154, 110, 87,  14, MSG_USE_GAD,        EC_USE,     0},
    {BUTTON_KIND,   301, 110, 87,  14, MSG_CANCEL_GAD,     EC_CANCEL,  0},
d183 4
a186 4
    {CHECKBOX_KIND, 362, 15,  87,  14, MSG_ICTL_AVOIDFLICKER_GAD,    EC_AVOIDFLICKER,   0},
    {CHECKBOX_KIND, 362, 29,  87,  14, MSG_ICTL_PRESERVECOLORS_GAD,  EC_PRESERVECOLORS, 0},
    {CHECKBOX_KIND, 362, 63,  87,  14, MSG_ICTL_MENUSNAP_GAD,        EC_MENUSNAP,       0},
    {CHECKBOX_KIND, 362, 77,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0}
d328 3
a330 3
    PutLine(ed,rp,MSG_ICTL_SCRDRAG_HDR,10,20,170,TRUE);
    PutLine(ed,rp,MSG_ICTL_COERCION_HDR,182,10,200,TRUE);
    PutLine(ed,rp,MSG_ICTL_MISC_HDR,182,59,200,TRUE);
@


38.8
log
@Fixed "Avoid Flicker" and "Preserve Colors" gadgets
@
text
@d85 1
a85 1
    ed->ed_PrefsDefaults.ic_Flags       = ICF_COERCE_COLORS | ICF_COERCE_LACE | ICF_STRGAD_FILTER | ICF_MENUSNAP | ICF_MODEPROMOTION;
d186 2
a187 2
    {CHECKBOX_KIND, 362, 77,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0},
    {CHECKBOX_KIND, 362, 91,  87,  14, MSG_ICTL_MODEPROMOTE_GAD,     EC_MODEPROMOTE,    0}
d379 1
d384 1
d440 1
a440 1

d445 1
a445 1

@


38.7
log
@Changes for new prefs shell
@
text
@d364 1
a364 1
                                                    GTCB_Checked,ICF_COERCE_COLORS & ed->ed_PrefsWork.ic_Flags,
d368 1
a368 1
                                                  GTCB_Checked,ICF_COERCE_LACE & ed->ed_PrefsWork.ic_Flags,
@


38.6
log
@Added SyncTextGadgets() support
Changes for new pe_iff
@
text
@a80 8
VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj)
{
}


/*****************************************************************************/


a100 8
VOID CleanUpEdData(EdDataPtr ed)
{
}


/*****************************************************************************/


a388 8
VOID SyncTextGadgets(EdDataPtr ed)
{
}


/*****************************************************************************/


a445 9
}


/*****************************************************************************/


EdCommand GetCommand(EdDataPtr ed)
{
    return(EC_NOP);
@


38.5
log
@Added Mode Promotion support
@
text
@d55 26
d131 1
a131 1
    return(ReadIFF(ed,name,ReadPrefs));
d151 1
a151 1
    return(WriteIFF(ed,name,WritePrefs));
a218 5
    if (!(ed->ed_Menus = CreatePrefsMenus(ed,EM)))
    {
	return(FALSE);
    }

d226 19
a244 23
    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_ICTL_NAME),
                                             WA_NewLookMenus,TRUE,
                                             WA_Gadgets,     ed->ed_Gadgets,
                                             TAG_DONE)))
d246 1
a246 2
        DisposeDisplay(ed);
	return(FALSE);
d249 2
a250 1
    return(TRUE);
d399 8
@


38.4
log
@Now uses DoPrefsGadget instead of CreatePrefsGadget for better look upon window
  opening
@
text
@d67 1
a67 1
    ed->ed_PrefsDefaults.ic_Flags       = ICF_COERCE_COLORS | ICF_COERCE_LACE | ICF_STRGAD_FILTER | ICF_MENUSNAP;
d135 1
a135 1
#define NW_HEIGHT    119
d164 3
a166 3
    {BUTTON_KIND,   8,   102, 87,  14, MSG_SAVE_GAD,       EC_SAVE,    0},
    {BUTTON_KIND,   154, 102, 87,  14, MSG_USE_GAD,        EC_USE,     0},
    {BUTTON_KIND,   301, 102, 87,  14, MSG_CANCEL_GAD,     EC_CANCEL,  0},
d176 2
a177 1
    {CHECKBOX_KIND, 362, 77,  87,  14, MSG_ICTL_GADGETFILTER_GAD,    EC_GADGETFILTER,   0}
d377 5
d436 5
@


38.3
log
@Now uses WA_Gadgets to add the gadgets to the window
@
text
@d198 3
a200 3
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);
d202 1
a202 8
    ed->ed_Shift          = CreatePrefsGadget(ed,&EG[3],TAG_DONE);
    ed->ed_Ctrl           = CreatePrefsGadget(ed,&EG[4],TAG_DONE);
    ed->ed_Alt            = CreatePrefsGadget(ed,&EG[5],TAG_DONE);
    ed->ed_Amiga          = CreatePrefsGadget(ed,&EG[6],TAG_DONE);
    ed->ed_AvoidFlicker   = CreatePrefsGadget(ed,&EG[7],TAG_DONE);
    ed->ed_PreserveColors = CreatePrefsGadget(ed,&EG[8],TAG_DONE);
    ed->ed_MenuSnap       = CreatePrefsGadget(ed,&EG[9],TAG_DONE);
    ed->ed_GadgetFilter   = CreatePrefsGadget(ed,&EG[10],TAG_DONE);
d345 3
a347 2
    SetGadgetAttr(ed,ed->ed_Shift,GTCB_Checked,IEQUALIFIER_LSHIFT & ed->ed_PrefsWork.ic_MetaDrag,
                                  TAG_DONE);
d349 3
a351 5
    SetGadgetAttr(ed,ed->ed_Ctrl,GTCB_Checked,IEQUALIFIER_CONTROL & ed->ed_PrefsWork.ic_MetaDrag,
                                 TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Alt,GTCB_Checked,IEQUALIFIER_LALT & ed->ed_PrefsWork.ic_MetaDrag,
                                TAG_DONE);
d353 3
a355 2
    SetGadgetAttr(ed,ed->ed_Amiga,GTCB_Checked,IEQUALIFIER_LCOMMAND & ed->ed_PrefsWork.ic_MetaDrag,
                                  TAG_DONE);
d357 2
a358 1
    SetGadgetAttr(ed,ed->ed_PreserveColors,GTCB_Checked,ICF_COERCE_COLORS & ed->ed_PrefsWork.ic_Flags,
d361 3
a363 2
    SetGadgetAttr(ed,ed->ed_AvoidFlicker,GTCB_Checked,ICF_COERCE_LACE & ed->ed_PrefsWork.ic_Flags,
                                         TAG_DONE);
d365 7
a371 2
    SetGadgetAttr(ed,ed->ed_MenuSnap,GTCB_Checked,ICF_MENUSNAP & ed->ed_PrefsWork.ic_Flags,
                                     TAG_DONE);
d373 3
a375 2
    SetGadgetAttr(ed,ed->ed_GadgetFilter,GTCB_Checked,ICF_STRGAD_FILTER & ed->ed_PrefsWork.ic_Flags,
                                         TAG_DONE);
@


38.2
log
@Changes for new prefs shell
@
text
@d197 20
d232 1
d235 1
a235 1
        FreeMenus(ed->ed_Menus);
a238 20
    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);

    ed->ed_Shift          = CreatePrefsGadget(ed,&EG[3],TAG_DONE);
    ed->ed_Ctrl           = CreatePrefsGadget(ed,&EG[4],TAG_DONE);
    ed->ed_Alt            = CreatePrefsGadget(ed,&EG[5],TAG_DONE);
    ed->ed_Amiga          = CreatePrefsGadget(ed,&EG[6],TAG_DONE);
    ed->ed_AvoidFlicker   = CreatePrefsGadget(ed,&EG[7],TAG_DONE);
    ed->ed_PreserveColors = CreatePrefsGadget(ed,&EG[8],TAG_DONE);
    ed->ed_MenuSnap       = CreatePrefsGadget(ed,&EG[9],TAG_DONE);
    ed->ed_GadgetFilter   = CreatePrefsGadget(ed,&EG[10],TAG_DONE);

    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

d248 5
a252 2
    ClearMenuStrip(ed->ed_Window);
    CloseWindow(ed->ed_Window);
@


38.1
log
@Initial V38 RCS checkin
@
text
@d96 1
a96 1
    if (ReadChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct IControlPrefs)) == sizeof(struct IControlPrefs))
d103 1
a103 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs)
a104 1
    ed->ed_PrefsIO = destPrefs;
d115 1
a115 1
        if (WriteChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct IControlPrefs)) == sizeof(struct IControlPrefs))
d123 1
a123 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs)
a124 1
    ed->ed_PrefsIO = sourPrefs;
d234 1
a234 3
        CloseWindow(ed->ed_Window);
        FreeMenus(ed->ed_Menus);
        FreeGadgets(ed->ed_Gadgets);
a237 6
    SetFont(ed->ed_Window->RPort,ed->ed_Font);
    SetMenuStrip(ed->ed_Window,ed->ed_Menus);
    AddGList(ed->ed_Window,ed->ed_Gadgets,-1,-1,NULL);
    RefreshGList(ed->ed_Gadgets,ed->ed_Window,NULL,-1);
    GT_RefreshWindow(ed->ed_Window,NULL);

d299 2
a300 2
VOID CenterLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w)
d308 6
a313 2
    Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
            window->BorderTop+y);
a323 2
STRPTR str;
UWORD  len;
d329 3
a331 3
    CenterLine(ed,rp,MSG_ICTL_SCRDRAG_HDR,10,20,170);
    CenterLine(ed,rp,MSG_ICTL_COERCION_HDR,182,10,200);
    CenterLine(ed,rp,MSG_ICTL_MISC_HDR,182,59,200);
d335 2
a336 9
    str = GetString(&ed->ed_LocaleInfo,MSG_ICTL_SHIFT_GAD);
    len = strlen(str);
    Move(rp,57 + window->BorderLeft,33+window->BorderTop);
    Text(rp,str,len);

    str = GetString(&ed->ed_LocaleInfo,MSG_ICTL_LAMIGA_GAD);
    len = strlen(str);
    Move(rp,57 + window->BorderLeft,75+window->BorderTop);
    Text(rp,str,len);
d379 6
d387 39
a425 47
        case EC_SHIFT         : if (ed->ed_PrefsWork.ic_MetaDrag & IEQUALIFIER_LSHIFT)
                                     ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT);
                                 else
                                     ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT;
                                 break;

        case EC_CTRL          :  if (ed->ed_PrefsWork.ic_MetaDrag & IEQUALIFIER_CONTROL)
                                     ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_CONTROL);
                                 else
                                     ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_CONTROL;
                                 break;

        case EC_ALT           : if (ed->ed_PrefsWork.ic_MetaDrag & IEQUALIFIER_LALT)
                                     ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LALT | IEQUALIFIER_RALT);
                                 else
                                     ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LALT | IEQUALIFIER_RALT;
                                 break;

        case EC_AMIGA         : if (ed->ed_PrefsWork.ic_MetaDrag & IEQUALIFIER_LCOMMAND)
                                     ed->ed_PrefsWork.ic_MetaDrag &= ~(IEQUALIFIER_LCOMMAND);
                                 else
                                     ed->ed_PrefsWork.ic_MetaDrag |= IEQUALIFIER_LCOMMAND;
                                 break;

        case EC_AVOIDFLICKER  : if (ed->ed_PrefsWork.ic_Flags & ICF_COERCE_LACE)
                                     ed->ed_PrefsWork.ic_Flags &= ~(ICF_COERCE_LACE);
                                 else
                                     ed->ed_PrefsWork.ic_Flags |= ICF_COERCE_LACE;
                                 break;

        case EC_PRESERVECOLORS: if (ed->ed_PrefsWork.ic_Flags & ICF_COERCE_COLORS)
                                     ed->ed_PrefsWork.ic_Flags &= ~(ICF_COERCE_COLORS);
                                 else
                                     ed->ed_PrefsWork.ic_Flags |= ICF_COERCE_COLORS;
                                 break;

        case EC_MENUSNAP      : if (ed->ed_PrefsWork.ic_Flags & ICF_MENUSNAP)
                                     ed->ed_PrefsWork.ic_Flags &= ~(ICF_MENUSNAP);
                                 else
                                     ed->ed_PrefsWork.ic_Flags |= ICF_MENUSNAP;
                                 break;

        case EC_GADGETFILTER  : if (ed->ed_PrefsWork.ic_Flags & ICF_STRGAD_FILTER)
                                     ed->ed_PrefsWork.ic_Flags &= ~(ICF_STRGAD_FILTER);
                                 else
                                     ed->ed_PrefsWork.ic_Flags |= ICF_STRGAD_FILTER;
                                 break;
a447 3

    if (ec == EC_SAVEICONS)
        state->cs_Selected = ed->ed_SaveIcons;
@
