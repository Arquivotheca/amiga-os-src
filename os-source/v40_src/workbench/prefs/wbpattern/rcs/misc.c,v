head     38.4;
branch   ;
access   ;
symbols  ;
locks    davidj:38.4; strict;
comment  @ * @;


38.4
date     92.06.16.15.02.36;  author davidj;  state Exp;
branches ;
next     38.3;

38.3
date     92.06.10.02.22.17;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.26.13.38.41;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.12.10.55.41;  author Unknown;  state Exp;
branches ;
next     ;


desc
@bitmap manipulations
@


38.4
log
@now does magic bitmaps
@
text
@/* misc.c
 * misc. for pointer
 *
 */

#include "wbpattern.h"

/*****************************************************************************/

VOID SetPrefsRast (EdDataPtr ed, UWORD pen)
{
    SetAPen (&(ed->ed_PrefsWork.ep_RPort), pen);
    RectFill (&(ed->ed_PrefsWork.ep_RPort),
	      ed->ed_Which, 0,
	      ed->ed_Which + ed->ed_Width - 1, ed->ed_Height - 1);
}

/*****************************************************************************/

BOOL allocplanes (EdDataPtr ed, struct BitMap * bm, PLANEPTR * planes, UWORD width)
{
    register WORD i;

    /* Allocate the rasters */
    for (i = 0; i < bm->Depth; i++)
    {
	if (i < 3)
	{
	    if (!(planes[i] = (PLANEPTR) AllocRaster (width, bm->Rows)))
	    {
		return (FALSE);
	    }
	    BltClear (planes[i], (((ULONG) bm->Rows << 16L) | (ULONG) bm->BytesPerRow), 0x2L);
	}
	else
	{
	    planes[i] = planes[2];
	}
    }
    return (TRUE);
}

/*****************************************************************************/

VOID freeplanes (EdDataPtr ed, struct BitMap * bm, PLANEPTR * planes, UWORD width)
{
    register WORD i;

    /* Allocate the rasters */
    for (i = 0; i < 3; i++)
    {
	if (planes[i])
	{
	    FreeRaster (planes[i], width, bm->Rows);
	    planes[i] = NULL;
	}
    }
}

/*****************************************************************************/

BOOL allocbitmap (EdDataPtr ed, struct BitMap * bm, UWORD depth, UWORD width, UWORD height)
{
    /* Initialize the BitMap */
    InitBitMap (bm, depth, width, height);

    /* Allocate the rasters */
    return (allocplanes (ed, bm, bm->Planes, width));
}

/*****************************************************************************/

VOID freebitmap (EdDataPtr ed, struct BitMap * bm, UWORD width, UWORD height)
{
    freeplanes (ed, bm, bm->Planes, width);
}

/*****************************************************************************/

EdStatus allocpp (EdDataPtr ed, struct ExtPrefs * pp)
{
    EdStatus result = ES_NO_MEMORY;

    if (allocbitmap (ed, &pp->ep_BMap, ed->ed_Depth, (ed->ed_Width * 3) + 2, ed->ed_Height))
    {
	/* Initialize the rastport */
	InitRastPort (&(pp->ep_RPort));
	pp->ep_RPort.BitMap = &pp->ep_BMap;

	result = ES_NORMAL;
    }

    return result;
}
@


38.3
log
@*** empty log message ***
@
text
@d20 1
a20 1
VOID SwapBitMaps (struct BitMap *sbm, struct BitMap *dbm)
a21 15
    PLANEPTR tempplane;
    WORD plane;

    for (plane = 0; plane < sbm->Depth; plane++)
    {
	tempplane = sbm->Planes[plane];
	sbm->Planes[plane] = dbm->Planes[plane];
	dbm->Planes[plane] = tempplane;
    }
}

/*****************************************************************************/

BOOL allocplanes (EdDataPtr ed, struct BitMap *bm, PLANEPTR *planes, UWORD width)
{
d27 9
a35 1
	if (!(planes[i] = (PLANEPTR) AllocRaster (width, bm->Rows)))
d37 1
a37 1
	    return (FALSE);
a38 1
	BltClear (planes[i], (((ULONG)bm->Rows << 16L) | (ULONG)bm->BytesPerRow), 0x2L);
d45 1
a45 1
VOID freeplanes (EdDataPtr ed, struct BitMap *bm, PLANEPTR *planes, UWORD width)
d50 1
a50 1
    for (i = 0; i < bm->Depth; i++)
@


38.2
log
@fixed ed_Which problem
@
text
@d12 2
a13 2
    SetAPen (&(ed->ed_PrefsWork.wp_RPort), pen);
    RectFill (&(ed->ed_PrefsWork.wp_RPort),
d88 1
a88 1
EdStatus allocpp (EdDataPtr ed, struct WBPatternPrefs * pp)
d92 1
a92 5
    pp->wp_Width = ed->ed_Width;
    pp->wp_Height = ed->ed_Height;
    pp->wp_Depth = ed->ed_Depth;

    if (allocbitmap (ed, &pp->wp_BMap, ed->ed_Depth, (ed->ed_Width << 1) + 2, ed->ed_Height))
d95 2
a96 2
	InitRastPort (&(pp->wp_RPort));
	pp->wp_RPort.BitMap = &pp->wp_BMap;
@


38.1
log
@initial rcs checkin
@
text
@a11 5
    UWORD tx, bx;

    tx = (ed->ed_Width << ed->ed_Which);
    bx = tx + ed->ed_Width - 1;

d14 2
a15 2
	      tx, 0,
	      bx, ed->ed_Height - 1);
@
