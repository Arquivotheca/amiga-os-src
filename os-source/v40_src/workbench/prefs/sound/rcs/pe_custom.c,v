head     38.23;
branch   ;
access   ;
symbols  ;
locks    davidj:38.23; strict;
comment  @ * @;


38.23
date     93.01.25.14.20.15;  author davidj;  state Exp;
branches ;
next     38.22;

38.22
date     92.07.31.16.28.05;  author davidj;  state Exp;
branches ;
next     38.21;

38.21
date     92.06.10.14.33.45;  author davidj;  state Exp;
branches ;
next     38.20;

38.20
date     92.03.24.18.02.45;  author vertex;  state Exp;
branches ;
next     38.19;

38.19
date     92.01.13.12.44.15;  author vertex;  state Exp;
branches ;
next     38.18;

38.18
date     92.01.09.16.30.46;  author vertex;  state Exp;
branches ;
next     38.17;

38.17
date     92.01.02.16.41.44;  author vertex;  state Exp;
branches ;
next     38.16;

38.16
date     91.11.25.16.23.14;  author davidj;  state Exp;
branches ;
next     38.15;

38.15
date     91.11.25.14.40.13;  author Unknown;  state Exp;
branches ;
next     38.14;

38.14
date     91.11.11.14.59.44;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     91.09.19.16.14.56;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     91.08.20.11.43.58;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     91.08.12.12.45.39;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.08.06.17.38.35;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.07.23.10.15.59;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.07.15.11.56.22;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.07.10.17.42.10;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.06.28.17.49.42;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.06.25.13.47.11;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.06.25.11.03.25;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.06.24.16.39.40;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.06.24.15.41.22;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.13.30.00;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - Sound custom interface
@


38.23
log
@shows directories once more.
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <datatypes/datatypes.h>
#include <datatypes/datatypesclass.h>
#include <datatypes/soundclass.h>
#include <graphics/text.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/locale.h>
#include <dos/dos.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>
#include <clib/datatypes_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/asl_pragmas.h>
#include <pragmas/datatypes_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"
#include "8svx.h"


#define SysBase ed->ed_SysBase


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_SOND,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,				/* version */
    0,				/* type    */
    0				/* flags   */
};

/*****************************************************************************/

APTR newdtobject (EdDataPtr ed, STRPTR name, Tag tag1,...)
{
    return (NewDTObjectA (name, (struct TagItem *) & tag1));
}

/*****************************************************************************/

ULONG getdtattrs (EdDataPtr ed, Object * o, ULONG data,...)
{
    return (GetDTAttrsA (o, (struct TagItem *) & data));
}

/*****************************************************************************/

ULONG setdtattrs (EdDataPtr ed, Object * o, ULONG data,...)
{
    return (SetDTAttrsA (o, NULL, NULL, (struct TagItem *) & data));
}

/*****************************************************************************/

EdStatus InitEdData (EdDataPtr ed)
{
    EdStatus status = ES_NORMAL;

    ed->ed_PrefsDefaults.sop_DisplayQueue = TRUE;
    ed->ed_PrefsDefaults.sop_AudioQueue = FALSE;
    ed->ed_PrefsDefaults.sop_AudioType = SPTYPE_BEEP;
    ed->ed_PrefsDefaults.sop_AudioVolume = 64;
    ed->ed_PrefsDefaults.sop_AudioPeriod = 1500;
    ed->ed_PrefsDefaults.sop_AudioDuration = 10;

    ed->ed_PrefsWork = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

    ed->ed_PeriodStash = ed->ed_PrefsDefaults.sop_AudioPeriod;
    ed->ed_DurationStash = ed->ed_PrefsDefaults.sop_AudioDuration;

    ed->ed_FilterHook.h_Entry = Filter;
    ed->ed_FilterHook.h_Data = ed;

    if (!(ed->ed_DataTypesBase = OpenLibrary ("datatypes.library", 39)))
	status = ES_REQUIRES_DATATYPES;

    return (status);
}


/*****************************************************************************/


VOID CleanUpEdData (EdDataPtr ed)
{
    if (ed->ed_DataObject)
	DisposeDTObject (ed->ed_DataObject);
    CloseLibrary (ed->ed_DataTypesBase);
    FreeAslRequest (ed->ed_SoundReq);
}


/*****************************************************************************/


EdStatus ReadPrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
{
    if (cn->cn_ID != ID_SOND || cn->cn_Type != ID_PREF)
	return (ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes (iff, &ed->ed_PrefsWork, sizeof (struct SoundPrefs)) == sizeof (struct SoundPrefs))
    {
	ed->ed_PeriodStash = ed->ed_PrefsWork.sop_AudioPeriod;
	ed->ed_DurationStash = ed->ed_PrefsWork.sop_AudioDuration;

	if (strlen (ed->ed_PrefsWork.sop_AudioFileName) > 0)
	{
	    if (ed->ed_DataObject = newdtobject (ed, ed->ed_PrefsWork.sop_AudioFileName,
					     DTA_SourceType, DTST_FILE,
					     TAG_DONE))
	    {
	    }
	    else
	    {
		/* Couldn't find the sample! */
		ed->ed_ErrorFileName = ed->ed_PrefsWork.sop_AudioFileName;
		return (ES_DOSERROR);
	    }
	}

	return (ES_NORMAL);
    }

    return (ES_IFFERROR);
}


EdStatus OpenPrefs (EdDataPtr ed, STRPTR name)
{

    return (ReadIFF (ed, name, IFFPrefChunks, IFFPrefChunkCnt, ReadPrefs));
}


/*****************************************************************************/


EdStatus WritePrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
{

    if (!PushChunk (iff, 0, ID_SOND, sizeof (struct SoundPrefs)))
	if (WriteChunkBytes (iff, &ed->ed_PrefsWork, sizeof (struct SoundPrefs)) == sizeof (struct SoundPrefs))
	    if (!PopChunk (iff))
		return (ES_NORMAL);

    return (ES_IFFERROR);
}


EdStatus SavePrefs (EdDataPtr ed, STRPTR name)
{

    return (WriteIFF (ed, name, &IFFPrefHeader, WritePrefs));
}


/*****************************************************************************/


struct EdMenu far EM[] =
{
    {NM_TITLE, MSG_PROJECT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_OPEN, EC_OPEN, 0},
    {NM_ITEM, MSG_PROJECT_SAVE_AS, EC_SAVEAS, 0},
    {NM_ITEM, MSG_NOTHING, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_QUIT, EC_CANCEL, 0},

    {NM_TITLE, MSG_EDIT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
    {NM_ITEM, MSG_EDIT_LAST_SAVED, EC_LASTSAVED, 0},
    {NM_ITEM, MSG_EDIT_RESTORE, EC_RESTORE, 0},

    {NM_TITLE, MSG_OPTIONS_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_OPTIONS_SAVE_ICONS, EC_SAVEICONS, CHECKIT | MENUTOGGLE},

    {NM_END, MSG_NOTHING, EC_NOP, 0}
};

#define NW_WIDTH     397
#define NW_HEIGHT    145
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

/* main display gadgets */
struct EdGadget far EG[] =
{
    {BUTTON_KIND, 8, 128, 87, 14, MSG_SAVE_GAD, EC_SAVE, 0},
    {BUTTON_KIND, 152, 128, 87, 14, MSG_USE_GAD, EC_USE, 0},
    {BUTTON_KIND, 303, 128, 87, 14, MSG_CANCEL_GAD, EC_CANCEL, 0},

    {CHECKBOX_KIND, 8, 4, 12, 14, MSG_SND_FLASH_GAD, EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 190, 4, 12, 14, MSG_SND_MAKESOUND_GAD, EC_TOGGLESOUND, PLACETEXT_RIGHT},

    {BUTTON_KIND, 190, 108, 200, 14, MSG_SND_TEST_GAD, EC_TEST, 0},
    {CYCLE_KIND, 190, 19, 200, 14, MSG_SND_SOUNDTYPE_GAD, EC_SOUNDTYPE, 0},

    {SLIDER_KIND, 238, 35, 152, 11, MSG_SND_VOLUME_GAD, EC_VOLUME, 0},
    {SLIDER_KIND, 238, 48, 152, 11, MSG_SND_PITCH_GAD, EC_PITCH, 0},
    {SLIDER_KIND, 238, 61, 152, 11, MSG_SND_DURATION_GAD, EC_DURATION, 0},

    {TEXT_KIND, 190, 90, 200, 14, MSG_SND_SAMPLENAME_GAD, EC_NOP, 0},
    {BUTTON_KIND, 190, 74, 200, 14, MSG_SND_SELECTSAMPLE_GAD, EC_SELECTSAMPLE, 0}
};


BOOL CreateDisplay (EdDataPtr ed)
{
    UWORD zoomSize[4];

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    ed->ed_CycleLabels[0] = GetString (&ed->ed_LocaleInfo, MSG_SND_BEEP);
    ed->ed_CycleLabels[1] = GetString (&ed->ed_LocaleInfo, MSG_SND_SAMPLEDSOUND);
    ed->ed_CycleLabels[2] = NULL;

    ed->ed_LastAdded = CreateContext (&ed->ed_Gadgets);
    DoPrefsGadget (ed, &EG[0], NULL, TAG_DONE);
    DoPrefsGadget (ed, &EG[1], NULL, TAG_DONE);
    DoPrefsGadget (ed, &EG[2], NULL, TAG_DONE);

    RenderGadgets (ed);

    if ((ed->ed_LastAdded)
	&& (ed->ed_Menus = CreatePrefsMenus (ed, EM))
	&& (ed->ed_Window = OpenPrefsWindow (ed, WA_InnerWidth, NW_WIDTH,
					     WA_InnerHeight, NW_HEIGHT,
					     WA_MinWidth, NW_MINWIDTH,
					     WA_MinHeight, NW_MINHEIGHT,
					     WA_MaxWidth, NW_MAXWIDTH,
					     WA_MaxHeight, NW_MAXHEIGHT,
					     WA_IDCMP, NW_IDCMP,
					     WA_Flags, NW_FLAGS,
					     WA_Zoom, zoomSize,
					     WA_AutoAdjust, TRUE,
					     WA_PubScreen, ed->ed_Screen,
					     WA_Title, GetString (&ed->ed_LocaleInfo, MSG_SND_NAME),
					     WA_NewLookMenus, TRUE,
					     WA_Gadgets, ed->ed_Gadgets,
					     TAG_DONE)))
    {
	return (TRUE);
    }

    DisposeDisplay (ed);

    return (FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay (EdDataPtr ed)
{

    if (ed->ed_Window)
    {
	ClearMenuStrip (ed->ed_Window);
	CloseWindow (ed->ed_Window);
    }
    FreeMenus (ed->ed_Menus);
    FreeGadgets (ed->ed_Gadgets);
}


/*****************************************************************************/


VOID RenderGadgets (EdDataPtr ed)
{
    BOOL disabled = TRUE;

    if (ed->ed_PrefsWork.sop_AudioQueue)
    {
	if ((strlen (ed->ed_PrefsWork.sop_AudioFileName) > 0)
	    || (ed->ed_PrefsWork.sop_AudioType == SPTYPE_BEEP))
	    disabled = FALSE;
    }

    ed->ed_FlashDisplay = DoPrefsGadget (ed, &EG[3], ed->ed_FlashDisplay,
					 GTCB_Checked, ed->ed_PrefsWork.sop_DisplayQueue,
					 TAG_DONE);

    ed->ed_MakeSound = DoPrefsGadget (ed, &EG[4], ed->ed_MakeSound,
				      GTCB_Checked, ed->ed_PrefsWork.sop_AudioQueue,
				      TAG_DONE);

    ed->ed_TestSound = DoPrefsGadget (ed, &EG[5], ed->ed_TestSound,
				      GA_Disabled, disabled,
				      TAG_DONE);

    ed->ed_SoundType = DoPrefsGadget (ed, &EG[6], ed->ed_SoundType,
				      GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				      GTCY_Active, ed->ed_PrefsWork.sop_AudioType,
				      GTCY_Labels, ed->ed_CycleLabels,
				      TAG_DONE);

    ed->ed_Volume = DoPrefsGadget (ed, &EG[7], ed->ed_Volume,
				   GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				   GTSL_Level, ed->ed_PrefsWork.sop_AudioVolume,
				   GTSL_Min, 0,
				   GTSL_Max, 64,
				   GTSL_MaxLevelLen, 4,
				   GTSL_LevelFormat, "%4lu",
				   GA_Immediate, TRUE,
				   GA_RelVerify, TRUE,
				   TAG_DONE);

    ed->ed_Pitch = DoPrefsGadget (ed, &EG[8], ed->ed_Pitch,
				  GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				  GTSL_Level, 3000 - (ed->ed_PrefsWork.sop_AudioPeriod - 135),
				  GTSL_Min, 1,
				  GTSL_Max, 3000,
				  GTSL_MaxLevelLen, 4,
				  GTSL_LevelFormat, "%4lu",
				  GA_Immediate, TRUE,
				  GA_RelVerify, TRUE,
				  TAG_DONE);

    ed->ed_Duration = DoPrefsGadget (ed, &EG[9], ed->ed_Duration,
				     GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
				     GTSL_Level, ed->ed_PrefsWork.sop_AudioDuration,
				     GTSL_Min, 1,
				     GTSL_Max, 100,
				     GTSL_MaxLevelLen, 4,
				     GTSL_LevelFormat, "%4lu",
				     GA_Immediate, TRUE,
				     GA_RelVerify, TRUE,
				     TAG_DONE);

    ed->ed_SampleName = DoPrefsGadget (ed, &EG[10], ed->ed_SampleName,
				       GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
				       GTTX_Text, FilePart (ed->ed_PrefsWork.sop_AudioFileName),
				       GTTX_Border, TRUE,
				       TAG_DONE);

    ed->ed_SelectSample = DoPrefsGadget (ed, &EG[11], ed->ed_SelectSample,
					 GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
					 TAG_DONE);
}


/*****************************************************************************/

ULONG ASM Filter (REG (a0) struct Hook * h, REG (a2) struct FileRequester * fr, REG (a1) struct AnchorPath * ap)
{
    EdDataPtr ed = (EdDataPtr) h->h_Data;
    struct DataType *dtn;
    ULONG use = FALSE;
    UBYTE buffer[300];
    BPTR lock;

    strncpy (buffer, fr->fr_Drawer, sizeof (buffer));
    AddPart (buffer, ap->ap_Info.fib_FileName, sizeof (buffer));
    if (lock = Lock (buffer, ACCESS_READ))
    {
	    if (ap->ap_Info.fib_DirEntryType < 0)
	    {
		if (dtn = ObtainDataTypeA (DTST_FILE, (APTR) lock, NULL))
		{
		    if (dtn->dtn_Header->dth_GroupID == GID_SOUND)
			use = TRUE;
		    ReleaseDataType (dtn);
		}
	    }
	    else
		use = TRUE;

	UnLock (lock);
    }

    return (use);
}

/*****************************************************************************/

BOOL SelectSound (EdDataPtr ed, ULONG tag1,...)
{

    if (!ed->ed_SoundReq)
	ed->ed_SoundReq = AllocAslRequest (ASL_FileRequest, NULL);

    return (AslRequest (ed->ed_SoundReq, (struct TagItem *) & tag1));
}

/*****************************************************************************/

#define ASM __asm
#define REG(x) register __## x

VOID ASM IntuiHook (REG (a0) struct Hook *, REG (a2) struct FileRequester *, REG (a1) struct IntuiMessage *);

/*****************************************************************************/

VOID ProcessSpecialCommand (EdDataPtr ed, EdCommand ec)
{
    char path[NAMEBUFSIZE];
    struct Gadget *gadget;
    struct Requester req;
    struct Hook hook;
    EdStatus result;
    ULONG duration;
    ULONG period;
    BOOL refresh;
    UWORD icode;
    BPTR lock;
    BOOL bool;

    icode = ed->ed_CurrentMsg.Code;
    gadget = ed->ed_CurrentMsg.IAddress;
    refresh = FALSE;

    switch (ec)
    {
	case EC_TOGGLEFLASH:
	    ed->ed_PrefsWork.sop_DisplayQueue = (SELECTED & gadget->Flags);
	    break;

	case EC_TOGGLESOUND:
	    ed->ed_PrefsWork.sop_AudioQueue = (SELECTED & gadget->Flags);
	    refresh = TRUE;
	    break;

	case EC_SOUNDTYPE:
	    ed->ed_PrefsWork.sop_AudioType = icode;
	    period = ed->ed_PrefsWork.sop_AudioPeriod;
	    duration = ed->ed_PrefsWork.sop_AudioDuration;
	    ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_PeriodStash;
	    ed->ed_PrefsWork.sop_AudioDuration = ed->ed_DurationStash;
	    ed->ed_PeriodStash = period;
	    ed->ed_DurationStash = duration;
	    refresh = TRUE;
	    break;

	case EC_TEST:
	    InitRequester (&req);
	    bool = Request (&req, window);

	    if ((result = DoAudio (ed, ed->ed_PrefsWork.sop_AudioFileName, TRUE)) != ES_NORMAL)
	    {
		ShowError2 (ed, result);
	    }

	    if (bool)
		EndRequest (&req, window);

	    break;

	case EC_VOLUME:
	    ed->ed_PrefsWork.sop_AudioVolume = icode;
	    break;

	case EC_PITCH:
	    ed->ed_PrefsWork.sop_AudioPeriod = (3000 - icode) + 135;
	    break;

	case EC_DURATION:
	    ed->ed_PrefsWork.sop_AudioDuration = icode;
	    break;

	case EC_SELECTSAMPLE:
	    strcpy (path, ed->ed_PrefsWork.sop_AudioFileName);
	    *PathPart (path) = 0;
	    hook.h_Entry = IntuiHook;

	    if (SelectSound (ed, ASLFR_TitleText, GetString (&ed->ed_LocaleInfo, MSG_SND_REQ_LOAD_SOUND),
			     ASLFR_Window, ed->ed_Window,
			     ASLFR_InitialDrawer, path,
			     ASLFR_InitialFile, FilePart (ed->ed_PrefsWork.sop_AudioFileName),
			     ASLFR_IntuiMsgFunc, &hook,
			     ASLFR_SleepWindow, TRUE,
			     ASLFR_RejectIcons, TRUE,
			     ASLFR_FilterFunc, ((DataTypesBase) ? &ed->ed_FilterHook : NULL),
			     TAG_DONE))
	    {
		result = ES_DOSERROR;

		strcpy (path, ed->ed_SoundReq->fr_Drawer);
		AddPart (path, ed->ed_SoundReq->fr_File, sizeof (path));

		if (ed->ed_DataObject)
		    DisposeDTObject (ed->ed_DataObject);

		if (ed->ed_DataObject = newdtobject (ed, path,
						     DTA_SourceType, DTST_FILE,
						     DTA_GroupID, GID_SOUND,
						     TAG_DONE))
		{
		    getdtattrs (ed, ed->ed_DataObject,
				SDTA_Period, (ULONG *)&ed->ed_SamplePeriod,
				TAG_DONE);
		    ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_SamplePeriod;

		    if (lock = Lock (path, ACCESS_READ))
		    {
			if (NameFromLock (lock, path, sizeof (path)))
			{
			    strcpy (ed->ed_PrefsWork.sop_AudioFileName, path);
			    result = ES_NORMAL;
			    refresh = TRUE;
			}
			UnLock (lock);
		    }
		}

		if (!refresh)
		{
		    ed->ed_SecondaryResult = IoErr ();
		    switch (ed->ed_SecondaryResult)
		    {
			case 2000:	/* Unknown datatype */
			    result = ES_IFF_NOT_8SVX;
			    break;

			case 2002:	/* Couldn't open */
			    ed->ed_SecondaryResult = ERROR_OBJECT_NOT_FOUND;
			    break;
		    }
		    ed->ed_ErrorFileName = path;
		    ShowError2 (ed, result);
		}
	    }

	    break;


	default:
	    break;
    }

    if (refresh)
	RenderGadgets (ed);
}

/*****************************************************************************/


VOID GetSpecialCmdState (EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{

    state->cs_Available = TRUE;
    state->cs_Selected = FALSE;
}
@


38.22
log
@shows correct error messages when sample couldn't be loaded
@
text
@a135 1

d415 10
a424 3
	if (dtn = ObtainDataTypeA (DTST_FILE, (APTR) lock, NULL))
	{
	    if (dtn->dtn_Header->dth_GroupID == GID_SOUND)
a426 2
	    ReleaseDataType (dtn);
	}
@


38.21
log
@now uses datatypes for sound playing
@
text
@a148 1

d167 2
d445 1
a445 3
VOID ASM IntuiHook (REG (a0) struct Hook * hook,
		     REG (a2) struct FileRequester * fr,
		     REG (a1) struct IntuiMessage * intuiMsg);
d447 1
d449 1
a449 1
    VOID ProcessSpecialCommand (EdDataPtr ed, EdCommand ec)
a450 2
    UWORD icode;
    BOOL refresh;
d452 3
d456 4
a460 1
    struct Requester req;
a461 4
    struct Gadget *gadget;
    ULONG duration;
    ULONG period;
    struct Hook hook;
d530 2
d540 1
d553 1
d559 2
a560 1
		else
d562 11
a587 1

@


38.20
log
@Removed WA_Left and WA_Top
@
text
@d11 3
d32 1
d43 1
d81 8
d90 5
d97 6
d104 1
a104 1
EdStatus InitEdData(EdDataPtr ed)
d106 7
a112 5
    ed->ed_PrefsDefaults.sop_DisplayQueue  = TRUE;
    ed->ed_PrefsDefaults.sop_AudioQueue    = FALSE;
    ed->ed_PrefsDefaults.sop_AudioType     = SPTYPE_BEEP;
    ed->ed_PrefsDefaults.sop_AudioVolume   = 64;
    ed->ed_PrefsDefaults.sop_AudioPeriod   = 1500;
d115 1
a115 1
    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
d118 1
a118 1
    ed->ed_PeriodStash   = ed->ed_PrefsDefaults.sop_AudioPeriod;
d121 7
a127 1
    return (ES_NORMAL);
d134 1
a134 1
VOID CleanUpEdData(EdDataPtr ed)
d136 5
a140 1
    FreeAslRequest(ed->ed_SoundReq);
d147 1
a147 1
EdStatus ReadPrefs (EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
d149 1
d151 1
a151 1
	return(ES_IFF_UNKNOWNCHUNK);
d153 1
a153 1
    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct SoundPrefs)) == sizeof(struct SoundPrefs))
d155 17
a171 3
        ed->ed_PeriodStash   = ed->ed_PrefsWork.sop_AudioPeriod;
        ed->ed_DurationStash = ed->ed_PrefsWork.sop_AudioDuration;
	return(ES_NORMAL);
d174 1
a174 1
    return(ES_IFFERROR);
d178 1
a178 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
d180 2
a181 1
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
d188 1
a188 1
EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
d200 1
a200 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
d202 2
a203 1
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
d212 10
a221 10
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP,       0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN,      0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS,    0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP,       0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL,    0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP,       0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL,  0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE,   0},
d223 2
a224 2
    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP,       0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT | MENUTOGGLE},
d226 1
a226 1
    {NM_END,    MSG_NOTHING,                EC_NOP,       0}
d242 3
a244 3
    {BUTTON_KIND,    8, 128,  87, 14, MSG_SAVE_GAD,           EC_SAVE,        0},
    {BUTTON_KIND,  152, 128,  87, 14, MSG_USE_GAD,            EC_USE,         0},
    {BUTTON_KIND,  303, 128,  87, 14, MSG_CANCEL_GAD,         EC_CANCEL,      0},
d246 9
a254 9
    {CHECKBOX_KIND,  8,   4,  12, 14, MSG_SND_FLASH_GAD,      EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND,190,   4,  12, 14, MSG_SND_MAKESOUND_GAD,  EC_TOGGLESOUND, PLACETEXT_RIGHT},

    {BUTTON_KIND,  190, 108, 200, 14, MSG_SND_TEST_GAD,       EC_TEST,        0},
    {CYCLE_KIND,   190,  19, 200, 14, MSG_SND_SOUNDTYPE_GAD,  EC_SOUNDTYPE,   0},

    {SLIDER_KIND,  238,  35, 152, 11, MSG_SND_VOLUME_GAD,     EC_VOLUME,      0},
    {SLIDER_KIND,  238,  48, 152, 11, MSG_SND_PITCH_GAD,      EC_PITCH,       0},
    {SLIDER_KIND,  238,  61, 152, 11, MSG_SND_DURATION_GAD,   EC_DURATION,    0},
d256 2
a257 2
    {TEXT_KIND,    190,  90, 200, 14, MSG_SND_SAMPLENAME_GAD, EC_NOP,         0},
    {BUTTON_KIND,  190,  74, 200, 14, MSG_SND_SELECTSAMPLE_GAD, EC_SELECTSAMPLE, 0}
d261 1
a261 1
BOOL CreateDisplay(EdDataPtr ed)
d263 1
a263 1
UWORD zoomSize[4];
d274 4
a277 4
    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);
d279 1
a279 1
    RenderGadgets(ed);
d282 26
a307 26
	&& (ed->ed_Menus = CreatePrefsMenus(ed,EM))
	&& (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,   NW_WIDTH,
                                               WA_InnerHeight,  NW_HEIGHT,
                                               WA_MinWidth,     NW_MINWIDTH,
                                               WA_MinHeight,    NW_MINHEIGHT,
                                               WA_MaxWidth,     NW_MAXWIDTH,
                                               WA_MaxHeight,    NW_MAXHEIGHT,
                                               WA_IDCMP,        NW_IDCMP,
                                               WA_Flags,        NW_FLAGS,
                                               WA_Zoom,         zoomSize,
                                               WA_AutoAdjust,   TRUE,
                                               WA_PubScreen,    ed->ed_Screen,
                                               WA_Title,        GetString (&ed->ed_LocaleInfo, MSG_SND_NAME),
                                               WA_NewLookMenus, TRUE,
                                               WA_Gadgets,      ed->ed_Gadgets,
                                               TAG_DONE)))
    {
	return(TRUE);
    }

    DisposeDisplay(ed);

    return(FALSE);
}


d311 1
a311 1
VOID DisposeDisplay(EdDataPtr ed)
d313 1
d316 2
a317 2
	ClearMenuStrip(ed->ed_Window);
	CloseWindow(ed->ed_Window);
d319 2
a320 2
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
d327 1
a327 1
VOID RenderGadgets(EdDataPtr ed)
d329 1
a329 1
BOOL disabled = TRUE;
d334 1
a334 1
        ||  (ed->ed_PrefsWork.sop_AudioType == SPTYPE_BEEP))
d338 3
a340 3
    ed->ed_FlashDisplay = DoPrefsGadget(ed,&EG[3], ed->ed_FlashDisplay,
                                        GTCB_Checked, ed->ed_PrefsWork.sop_DisplayQueue,
                                        TAG_DONE);
d342 3
a344 3
    ed->ed_MakeSound = DoPrefsGadget(ed,&EG[4],ed->ed_MakeSound,
				     GTCB_Checked, ed->ed_PrefsWork.sop_AudioQueue,
				     TAG_DONE);
d346 3
a348 3
    ed->ed_TestSound = DoPrefsGadget(ed,&EG[5],ed->ed_TestSound,
				     GA_Disabled, disabled,
				     TAG_DONE);
d350 5
a354 5
    ed->ed_SoundType = DoPrefsGadget(ed,&EG[6],ed->ed_SoundType,
				     GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				     GTCY_Active,  ed->ed_PrefsWork.sop_AudioType,
				     GTCY_Labels,  ed->ed_CycleLabels,
				     TAG_DONE);
d356 16
a371 5
    ed->ed_Volume = DoPrefsGadget(ed,&EG[7],ed->ed_Volume,
				  GA_Disabled,     !ed->ed_PrefsWork.sop_AudioQueue,
				  GTSL_Level,       ed->ed_PrefsWork.sop_AudioVolume,
				  GTSL_Min,         0,
				  GTSL_Max,         64,
d374 2
a375 2
				  GA_Immediate,     TRUE,
				  GA_RelVerify,     TRUE,
d378 32
a409 21
    ed->ed_Pitch = DoPrefsGadget(ed,&EG[8],ed->ed_Pitch,
				 GA_Disabled,     !ed->ed_PrefsWork.sop_AudioQueue,
				 GTSL_Level,       3000 - (ed->ed_PrefsWork.sop_AudioPeriod - 135),
				 GTSL_Min,         1,
				 GTSL_Max,         3000,
				 GTSL_MaxLevelLen, 4,
				 GTSL_LevelFormat, "%4lu",
				 GA_Immediate,     TRUE,
				 GA_RelVerify,     TRUE,
				 TAG_DONE);

    ed->ed_Duration = DoPrefsGadget(ed,&EG[9],ed->ed_Duration,
			            GA_Disabled,      (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
                                    GTSL_Level,       ed->ed_PrefsWork.sop_AudioDuration,
                                    GTSL_Min,         1,
                                    GTSL_Max,         100,
                                    GTSL_MaxLevelLen, 4,
                                    GTSL_LevelFormat, "%4lu",
                                    GA_Immediate,     TRUE,
                                    GA_RelVerify,     TRUE,
                                    TAG_DONE);
d411 13
a423 5
    ed->ed_SampleName = DoPrefsGadget(ed,&EG[10],ed->ed_SampleName,
			              GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
				      GTTX_Text,   FilePart(ed->ed_PrefsWork.sop_AudioFileName),
				      GTTX_Border, TRUE,
				      TAG_DONE);
d425 1
a425 3
    ed->ed_SelectSample = DoPrefsGadget(ed,&EG[11],ed->ed_SelectSample,
                                        GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
                                        TAG_DONE);
a427 1

d430 2
a432 2
BOOL SelectSound(EdDataPtr ed, ULONG tag1, ...)
{
d434 1
a434 1
        ed->ed_SoundReq = AllocAslRequest(ASL_FileRequest,NULL);
d436 1
a436 1
    return(AslRequest(ed->ed_SoundReq,(struct TagItem *) &tag1));
a438 1

a440 1

d444 3
a446 3
VOID ASM IntuiHook(REG(a0) struct Hook *hook,
                   REG(a2) struct FileRequester *fr,
                   REG(a1) struct IntuiMessage *intuiMsg);
d449 13
a461 13
VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD             icode;
BOOL              refresh;
char              path[NAMEBUFSIZE];
EdStatus          result;
BPTR              lock;
struct Requester  req;
BOOL              bool;
struct Gadget    *gadget;
ULONG             duration;
ULONG             period;
struct Hook       hook;
d463 2
a464 2
    icode   = ed->ed_CurrentMsg.Code;
    gadget  = ed->ed_CurrentMsg.IAddress;
d469 3
a471 2
        case EC_TOGGLEFLASH : ed->ed_PrefsWork.sop_DisplayQueue = (SELECTED & gadget->Flags);
                              break;
d473 90
a562 71
        case EC_TOGGLESOUND : ed->ed_PrefsWork.sop_AudioQueue = (SELECTED & gadget->Flags);
                              refresh = TRUE;
                              break;

        case EC_SOUNDTYPE   : ed->ed_PrefsWork.sop_AudioType     = icode;
                              period                             = ed->ed_PrefsWork.sop_AudioPeriod;
                              duration                           = ed->ed_PrefsWork.sop_AudioDuration;
                              ed->ed_PrefsWork.sop_AudioPeriod   = ed->ed_PeriodStash;
                              ed->ed_PrefsWork.sop_AudioDuration = ed->ed_DurationStash;
                              ed->ed_PeriodStash                 = period;
                              ed->ed_DurationStash               = duration;
                              refresh = TRUE;
                              break;

        case EC_TEST        : InitRequester(&req);
                              bool = Request(&req,window);

                              if ((result = DoAudio (ed, ed->ed_PrefsWork.sop_AudioFileName,TRUE)) != ES_NORMAL)
                              {
                                  ShowError2(ed,result);
                              }

                              if (bool)
                                  EndRequest(&req,window);

                              break;

        case EC_VOLUME      : ed->ed_PrefsWork.sop_AudioVolume = icode;
                              break;

        case EC_PITCH       : ed->ed_PrefsWork.sop_AudioPeriod = (3000 - icode) + 135;
                              break;

        case EC_DURATION    : ed->ed_PrefsWork.sop_AudioDuration = icode;
                              break;

	case EC_SELECTSAMPLE: strcpy(path,ed->ed_PrefsWork.sop_AudioFileName);
                              *PathPart(path) = 0;
                              hook.h_Entry = IntuiHook;

                              if (SelectSound(ed,ASLFR_TitleText,     GetString(&ed->ed_LocaleInfo,MSG_SND_REQ_LOAD_SOUND),
                                                 ASLFR_Window,        ed->ed_Window,
                                                 ASLFR_InitialDrawer, path,
                                                 ASLFR_InitialFile,   FilePart(ed->ed_PrefsWork.sop_AudioFileName),
                                                 ASLFR_IntuiMsgFunc,  &hook,
                                                 ASLFR_SleepWindow,   TRUE,
                                                 ASLFR_RejectIcons,   TRUE,
                                                 TAG_DONE))
                              {
                                  strcpy(path,ed->ed_SoundReq->fr_Drawer);
                                  AddPart(path,ed->ed_SoundReq->fr_File,sizeof(path));
                                  if ((result = DoAudio(ed,path,FALSE)) == ES_NORMAL)
                                  {
                                      if (lock = Lock(path,ACCESS_READ))
                                      {
                                          if (NameFromLock(lock,path,sizeof(path)))
                                          {
                                              strcpy(ed->ed_PrefsWork.sop_AudioFileName,path);
                                              ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_SamplePeriod;
                                              refresh = TRUE;
                                          }
                                          UnLock(lock);
                                      }
                                  }
                                  else
                                  {
                                      ShowError2(ed,result);
                                  }
                              }

                              break;
d565 2
a566 1
	default             : break;
d570 1
a570 1
	RenderGadgets(ed);
d581 1
a581 1
    state->cs_Selected  = FALSE;
@


38.19
log
@*** empty log message ***
@
text
@a175 2
#define NW_LEFT      0
#define NW_TOP       0
d212 2
a213 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
d230 1
a230 3
	&& (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,         NW_LEFT,
                                               WA_Top,          NW_TOP,
                                               WA_InnerWidth,   NW_WIDTH,
@


38.18
log
@*** empty log message ***
@
text
@d102 9
d354 1
a354 4
#undef SysBase

struct IntuiMessage __stdargs *FRRefresh(ULONG mask, struct IntuiMessage *intuiMsg,
					 struct FileRequester *freq)
d356 2
a357 14
EdDataPtr        ed;
struct ExecBase *SysBase = (*((struct ExecBase **) 4));

    if (intuiMsg->Class == IDCMP_REFRESHWINDOW)
    {
	ed = (EdDataPtr)SysBase->ThisTask->tc_UserData;
	GT_BeginRefresh(window);
	RenderDisplay(ed);
	GT_EndRefresh(window,TRUE);
    }

    return (intuiMsg);
}

d359 13
a371 1
/*****************************************************************************/
d381 1
a382 1
struct Requester  req;
d386 1
d435 1
a435 3

                              if (!ed->ed_FileReq)
                                  ed->ed_FileReq = AllocAslRequest(ASL_FileRequest,NULL);
d437 8
a444 10
                              InitRequester(&req);
                              bool = Request(&req,window);

                              if (RequestPrefsFile(ed,ASL_FuncFlags, FILF_DOMSGFUNC,
                                                      ASL_Hail,      GetString(&ed->ed_LocaleInfo,MSG_SND_REQ_LOAD_SOUND),
                                                      ASL_Window,    ed->ed_Window,
                                                      ASL_Dir,       path,
                                                      ASL_File,      FilePart(ed->ed_PrefsWork.sop_AudioFileName),
                                                      ASL_HookFunc,  FRRefresh,
                                                      TAG_DONE))
d446 2
a447 2
                                  strcpy(path,ed->ed_FileReq->rf_Dir);
                                  AddPart(path,ed->ed_FileReq->rf_File,sizeof(path));
a465 3

                              if (bool)
                                  EndRequest(&req,window);
@


38.17
log
@*** empty log message ***
@
text
@d92 3
d108 3
d112 1
a119 1

d192 3
a194 3
    {SLIDER_KIND,  238,  48, 152, 11, MSG_SND_VOLUME_GAD,     EC_VOLUME,      0},
    {SLIDER_KIND,  238,  61, 152, 11, MSG_SND_PITCH_GAD,      EC_PITCH,       0},
    {SLIDER_KIND,  238,  35, 152, 11, MSG_SND_DURATION_GAD,   EC_DURATION,    0},
d378 2
d394 7
a400 1
        case EC_SOUNDTYPE   : ed->ed_PrefsWork.sop_AudioType = icode;
@


38.16
log
@disable Test gadget if sampled sound selected & no name loaded.
@
text
@d80 1
a80 1
EdStatus InitEdData (EdDataPtr ed)
d82 5
a86 6

    ed->ed_PrefsDefaults.sop_DisplayQueue = TRUE;
    ed->ed_PrefsDefaults.sop_AudioQueue = FALSE;
    ed->ed_PrefsDefaults.sop_AudioType = SPTYPE_BEEP;
    ed->ed_PrefsDefaults.sop_AudioVolume = 64;
    ed->ed_PrefsDefaults.sop_AudioPeriod = 1500;
d89 1
a89 1
    ed->ed_PrefsWork = ed->ed_PrefsDefaults;
d99 1
a99 1
EdStatus ReadPrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
a100 1

d102 1
a102 1
	return (ES_IFF_UNKNOWNCHUNK);
d104 2
a105 2
    if (ReadChunkBytes (iff, &ed->ed_PrefsWork, sizeof (struct SoundPrefs)) == sizeof (struct SoundPrefs))
	return (ES_NORMAL);
d107 1
a107 1
    return (ES_IFFERROR);
d111 1
a111 1
EdStatus OpenPrefs (EdDataPtr ed, STRPTR name)
d114 1
a114 1
    return (ReadIFF (ed, name, IFFPrefChunks, IFFPrefChunkCnt, ReadPrefs));
d121 1
a121 1
EdStatus WritePrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
d133 1
a133 1
EdStatus SavePrefs (EdDataPtr ed, STRPTR name)
d135 1
a135 2

    return (WriteIFF (ed, name, &IFFPrefHeader, WritePrefs));
d144 10
a153 10
    {NM_TITLE, MSG_PROJECT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_OPEN, EC_OPEN, 0},
    {NM_ITEM, MSG_PROJECT_SAVE_AS, EC_SAVEAS, 0},
    {NM_ITEM, MSG_NOTHING, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_QUIT, EC_CANCEL, 0},

    {NM_TITLE, MSG_EDIT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
    {NM_ITEM, MSG_EDIT_LAST_SAVED, EC_LASTSAVED, 0},
    {NM_ITEM, MSG_EDIT_RESTORE, EC_RESTORE, 0},
d155 2
a156 2
    {NM_TITLE, MSG_OPTIONS_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_OPTIONS_SAVE_ICONS, EC_SAVEICONS, CHECKIT | MENUTOGGLE},
d158 1
a158 1
    {NM_END, MSG_NOTHING, EC_NOP, 0}
a160 1
#if 1
d176 3
a178 3
    {BUTTON_KIND,    8, 128,  87, 14, MSG_SAVE_GAD, EC_SAVE, 0},
    {BUTTON_KIND,  152, 128,  87, 14, MSG_USE_GAD, EC_USE, 0},
    {BUTTON_KIND,  303, 128,  87, 14, MSG_CANCEL_GAD, EC_CANCEL, 0},
d180 9
a188 9
    {CHECKBOX_KIND,  8,   4,  12, 14, MSG_SND_FLASH_GAD, EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND,190,   4,  12, 14, MSG_SND_MAKESOUND_GAD, EC_TOGGLESOUND, PLACETEXT_RIGHT},

    {BUTTON_KIND,  190, 108, 200, 14, MSG_SND_TEST_GAD, EC_TEST, 0},
    {CYCLE_KIND,   190,  19, 200, 14, MSG_SND_SOUNDTYPE_GAD, EC_SOUNDTYPE, 0},

    {SLIDER_KIND,  238,  48, 152, 11, MSG_SND_VOLUME_GAD, EC_VOLUME, 0},
    {SLIDER_KIND,  238,  61, 152, 11, MSG_SND_PITCH_GAD, EC_PITCH, 0},
    {SLIDER_KIND,  238,  35, 152, 11, MSG_SND_DURATION_GAD, EC_DURATION, 0},
d190 1
a190 1
    {TEXT_KIND,    190,  90, 200, 14, MSG_SND_SAMPLENAME_GAD, EC_NOP, 0},
a193 33
#else
#define NW_LEFT      0
#define NW_TOP       0
#define NW_WIDTH     353
#define NW_HEIGHT    176
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

/* main display gadgets */
struct EdGadget far EG[] =
{
    {BUTTON_KIND, 8, 159, 87, 14, MSG_SAVE_GAD, EC_SAVE, 0},
    {BUTTON_KIND, 133, 159, 87, 14, MSG_USE_GAD, EC_USE, 0},
    {BUTTON_KIND, 259, 159, 87, 14, MSG_CANCEL_GAD, EC_CANCEL, 0},

    {CHECKBOX_KIND, 8, 4, 12, 14, MSG_SND_FLASH_GAD, EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 8, 19, 12, 14, MSG_SND_MAKESOUND_GAD, EC_TOGGLESOUND, PLACETEXT_RIGHT},

    {BUTTON_KIND, 190, 12, 156, 14, MSG_SND_TEST_GAD, EC_TEST, 0},
    {CYCLE_KIND, 190, 44, 156, 14, MSG_SND_SOUNDTYPE_GAD, EC_SOUNDTYPE, 0},
    {SLIDER_KIND, 190, 60, 156, 11, MSG_SND_VOLUME_GAD, EC_VOLUME, 0},
    {SLIDER_KIND, 190, 73, 156, 11, MSG_SND_PITCH_GAD, EC_PITCH, 0},
    {SLIDER_KIND, 190, 95, 156, 11, MSG_SND_DURATION_GAD, EC_DURATION, 0},
    {TEXT_KIND, 160, 129, 186, 14, MSG_SND_SAMPLENAME_GAD, EC_NOP, PLACETEXT_ABOVE},
    {BUTTON_KIND, 8, 129, 147, 14, MSG_SND_SELECTSAMPLE_GAD, EC_SELECTSAMPLE, 0}

};
#endif
d195 1
a195 1
BOOL CreateDisplay (EdDataPtr ed)
d197 1
a197 1
    UWORD zoomSize[4];
d208 4
a211 4
    ed->ed_LastAdded = CreateContext (&ed->ed_Gadgets);
    DoPrefsGadget (ed, &EG[0], NULL, TAG_DONE);
    DoPrefsGadget (ed, &EG[1], NULL, TAG_DONE);
    DoPrefsGadget (ed, &EG[2], NULL, TAG_DONE);
d213 1
a213 1
    RenderGadgets (ed);
d216 18
a233 18
	&& (ed->ed_Menus = CreatePrefsMenus (ed, EM))
	&& (ed->ed_Window = OpenPrefsWindow (ed, WA_Left, NW_LEFT,
					     WA_Top, NW_TOP,
					     WA_InnerWidth, NW_WIDTH,
					     WA_InnerHeight, NW_HEIGHT,
					     WA_MinWidth, NW_MINWIDTH,
					     WA_MinHeight, NW_MINHEIGHT,
					     WA_MaxWidth, NW_MAXWIDTH,
					     WA_MaxHeight, NW_MAXHEIGHT,
					     WA_IDCMP, NW_IDCMP,
					     WA_Flags, NW_FLAGS,
					     WA_Zoom, zoomSize,
					     WA_AutoAdjust, TRUE,
					     WA_PubScreen, ed->ed_Screen,
					     WA_Title, GetString (&ed->ed_LocaleInfo, MSG_SND_NAME),
					     WA_NewLookMenus, TRUE,
					     WA_Gadgets, ed->ed_Gadgets,
					     TAG_DONE)))
d235 1
a235 1
	return (TRUE);
d238 3
a240 2
    DisposeDisplay (ed);
    return (FALSE);
d247 1
a247 1
VOID DisposeDisplay (EdDataPtr ed)
a248 1

d251 2
a252 2
	ClearMenuStrip (ed->ed_Window);
	CloseWindow (ed->ed_Window);
d254 2
a255 2
    FreeMenus (ed->ed_Menus);
    FreeGadgets (ed->ed_Gadgets);
d262 1
a262 1
VOID RenderGadgets (EdDataPtr ed)
d264 1
a264 1
    ULONG disable = 1L;
d268 3
a270 3
	if ((strlen (ed->ed_PrefsWork.sop_AudioFileName) > 0) ||
	    (ed->ed_PrefsWork.sop_AudioType == SPTYPE_BEEP))
	    disable = 0L;
d273 3
a275 3
    ed->ed_FlashDisplay = DoPrefsGadget (ed, &EG[3], ed->ed_FlashDisplay,
					 GTCB_Checked, ed->ed_PrefsWork.sop_DisplayQueue,
					 TAG_DONE);
d277 3
a279 3
    ed->ed_MakeSound = DoPrefsGadget (ed, &EG[4], ed->ed_MakeSound,
				      GTCB_Checked, ed->ed_PrefsWork.sop_AudioQueue,
				      TAG_DONE);
d281 3
a283 3
    ed->ed_TestSound = DoPrefsGadget (ed, &EG[5], ed->ed_TestSound,
				      GA_Disabled, disable,
				      TAG_DONE);
d285 5
a289 5
    ed->ed_SoundType = DoPrefsGadget (ed, &EG[6], ed->ed_SoundType,
				      GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				      GTCY_Active, ed->ed_PrefsWork.sop_AudioType,
				      GTCY_Labels, ed->ed_CycleLabels,
				      TAG_DONE);
d291 5
a295 15
    ed->ed_Volume = DoPrefsGadget (ed, &EG[7], ed->ed_Volume,
				   GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				   GTSL_Level, ed->ed_PrefsWork.sop_AudioVolume,
				   GTSL_Min, 0,
				   GTSL_Max, 64,
				   GTSL_MaxLevelLen, 4,
				   GTSL_LevelFormat, "%4lu",
				   GA_Immediate, TRUE,
				   TAG_DONE);

    ed->ed_Pitch = DoPrefsGadget (ed, &EG[8], ed->ed_Pitch,
				  GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
				  GTSL_Level, 3000 - (ed->ed_PrefsWork.sop_AudioPeriod - 135),
				  GTSL_Min, 1,
				  GTSL_Max, 3000,
d298 2
a299 1
				  GA_Immediate, TRUE,
d302 27
a328 9
    ed->ed_Duration = DoPrefsGadget (ed, &EG[9], ed->ed_Duration,
			       GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
				     GTSL_Level, ed->ed_PrefsWork.sop_AudioDuration,
				     GTSL_Min, 1,
				     GTSL_Max, 100,
				     GTSL_MaxLevelLen, 4,
				     GTSL_LevelFormat, "%4lu",
				     GA_Immediate, TRUE,
				     TAG_DONE);
d330 4
a333 10
    ed->ed_SampleName = DoPrefsGadget (ed, &EG[10], ed->ed_SampleName,
			     GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
				       GTTX_Text, FilePart (ed->ed_PrefsWork.sop_AudioFileName),
				       GTTX_Border, TRUE,
				       TAG_DONE);

    ed->ed_SelectSample = DoPrefsGadget (ed, &EG[11], ed->ed_SelectSample,
			     GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
					 TAG_DONE);
}
d341 2
a342 2
struct IntuiMessage __stdargs *FRRefresh (ULONG mask, struct IntuiMessage * intuiMsg,
					   struct FileRequester * freq)
d344 2
a345 2
    EdDataPtr ed;
    struct ExecBase *SysBase = (*((struct ExecBase **) 4));
d349 4
a352 4
	ed = (EdDataPtr) SysBase->ThisTask->tc_UserData;
	GT_BeginRefresh (window);
	RenderDisplay (ed);
	GT_EndRefresh (window, TRUE);
d362 1
a362 1
VOID ProcessSpecialCommand (EdDataPtr ed, EdCommand ec)
d364 8
a371 8
    UWORD icode;
    BOOL refresh;
    char path[NAMEBUFSIZE];
    EdStatus result;
    BPTR lock;
    BOOL bool;
    struct Requester req;
    struct Gadget *gadget;
d373 2
a374 3
    icode = ed->ed_CurrentMsg.Code;
    gadget = ed->ed_CurrentMsg.IAddress;

d379 73
a451 3
	case EC_TOGGLEFLASH:
	    ed->ed_PrefsWork.sop_DisplayQueue = (SELECTED & gadget->Flags);
	    break;
d453 1
a453 79
	case EC_TOGGLESOUND:
	    ed->ed_PrefsWork.sop_AudioQueue = (SELECTED & gadget->Flags);
	    refresh = TRUE;
	    break;

	case EC_SOUNDTYPE:
	    ed->ed_PrefsWork.sop_AudioType = icode;
	    refresh = TRUE;
	    break;

	case EC_TEST:
	    InitRequester (&req);
	    bool = Request (&req, window);

	    if ((result = DoAudio (ed, ed->ed_PrefsWork.sop_AudioFileName, TRUE)) != ES_NORMAL)
	    {
		ShowError2 (ed, result);
	    }

	    if (bool)
		EndRequest (&req, window);

	    break;

	case EC_VOLUME:
	    ed->ed_PrefsWork.sop_AudioVolume = icode;
	    break;

	case EC_PITCH:
	    ed->ed_PrefsWork.sop_AudioPeriod = (3000 - icode) + 135;
	    break;

	case EC_DURATION:
	    ed->ed_PrefsWork.sop_AudioDuration = icode;
	    break;

	case EC_SELECTSAMPLE:
	    strcpy (path, ed->ed_PrefsWork.sop_AudioFileName);
	    *PathPart (path) = 0;

	    if (!ed->ed_FileReq)
		ed->ed_FileReq = AllocAslRequest (ASL_FileRequest, NULL);

	    InitRequester (&req);
	    bool = Request (&req, window);

	    if (RequestPrefsFile (ed, ASL_FuncFlags, FILF_DOMSGFUNC,
				  ASL_Hail, GetString (&ed->ed_LocaleInfo, MSG_SND_REQ_LOAD_SOUND),
				  ASL_Window, ed->ed_Window,
				  ASL_Dir, path,
				  ASL_File, FilePart (ed->ed_PrefsWork.sop_AudioFileName),
				  ASL_HookFunc, FRRefresh,
				  TAG_DONE))
	    {
		strcpy (path, ed->ed_FileReq->rf_Dir);
		AddPart (path, ed->ed_FileReq->rf_File, sizeof (path));
		if ((result = DoAudio (ed, path, FALSE)) == ES_NORMAL)
		{
		    if (lock = Lock (path, ACCESS_READ))
		    {
			if (NameFromLock (lock, path, sizeof (path)))
			{
			    strcpy (ed->ed_PrefsWork.sop_AudioFileName, path);
			    ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_SamplePeriod;
			    refresh = TRUE;
			}
			UnLock (lock);
		    }
		}
		else
		{
		    ShowError2 (ed, result);
		}
	    }

	    if (bool)
		EndRequest (&req, window);

	    break;
d456 1
a456 2
	default:
	    break;
d460 1
a460 1
	RenderGadgets (ed);
d471 1
a471 1
    state->cs_Selected = FALSE;
@


38.15
log
@changed window around.
@
text
@d301 1
d303 7
d319 1
a319 1
				      GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
@


38.14
log
@Changes for new prefs shell
@
text
@d71 3
a73 3
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
d80 1
a80 1
EdStatus InitEdData(EdDataPtr ed)
a81 6
    ed->ed_PrefsDefaults.sop_DisplayQueue  = TRUE;
    ed->ed_PrefsDefaults.sop_AudioQueue    = FALSE;
    ed->ed_PrefsDefaults.sop_AudioType     = SPTYPE_BEEP;
    ed->ed_PrefsDefaults.sop_AudioVolume   = 64;
    ed->ed_PrefsDefaults.sop_AudioPeriod   = 1500;
    ed->ed_PrefsDefaults.sop_AudioDuration = 90;
d83 8
a90 1
    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
d93 1
a93 1
    return(ES_NORMAL);
d100 1
a100 1
EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
d102 1
d104 1
a104 1
        return(ES_IFF_UNKNOWNCHUNK);
d106 2
a107 2
    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct SoundPrefs)) == sizeof(struct SoundPrefs))
        return(ES_NORMAL);
d109 1
a109 1
    return(ES_IFFERROR);
d113 1
a113 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
d115 2
a116 1
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
d123 1
a123 1
EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
a124 4
    if (!PushChunk(iff,0,ID_SOND,sizeof(struct SoundPrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct SoundPrefs)) == sizeof(struct SoundPrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);
d126 6
a131 1
    return(ES_IFFERROR);
d135 1
a135 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
d137 2
a138 1
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
d145 20
d167 2
a168 2
#define NW_WIDTH     353
#define NW_HEIGHT    176
d177 16
a192 11
struct EdMenu far EM[] = {
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN, 0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP, 0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE, 0},
d194 3
a196 2
    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},
d198 12
a209 2
    {NM_END,    MSG_NOTHING,                EC_NOP, 0}
};
d212 16
a227 4
struct EdGadget far EG[] = {
    {BUTTON_KIND,   8,   159, 87,  14, MSG_SAVE_GAD,         EC_SAVE,        0},
    {BUTTON_KIND,   133, 159, 87,  14, MSG_USE_GAD,          EC_USE,         0},
    {BUTTON_KIND,   259, 159, 87,  14, MSG_CANCEL_GAD,       EC_CANCEL,      0},
a228 9
    {CHECKBOX_KIND, 8,   4,   12,  14, MSG_SND_FLASH_GAD,        EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 8,   19,  12,  14, MSG_SND_MAKESOUND_GAD,    EC_TOGGLESOUND, PLACETEXT_RIGHT},
    {BUTTON_KIND,   190, 12,  156, 14, MSG_SND_TEST_GAD,         EC_TEST,        0},
    {CYCLE_KIND,    190, 44,  156, 14, MSG_SND_SOUNDTYPE_GAD,    EC_SOUNDTYPE,   0},
    {SLIDER_KIND,   190, 60,  156, 11, MSG_SND_VOLUME_GAD,       EC_VOLUME,      0},
    {SLIDER_KIND,   190, 73,  156, 11, MSG_SND_PITCH_GAD,        EC_PITCH,       0},
    {SLIDER_KIND,   190, 95,  156, 11, MSG_SND_DURATION_GAD,     EC_DURATION,    0},
    {TEXT_KIND,     160, 129, 186, 14, MSG_SND_SAMPLENAME_GAD,   EC_NOP,         PLACETEXT_ABOVE},
    {BUTTON_KIND,   8,   129, 147, 14, MSG_SND_SELECTSAMPLE_GAD, EC_SELECTSAMPLE,0}
d230 1
d232 1
a232 2

BOOL CreateDisplay(EdDataPtr ed)
d234 1
a234 1
UWORD  zoomSize[4];
d241 2
a242 2
    ed->ed_CycleLabels[0] = GetString(&ed->ed_LocaleInfo,MSG_SND_BEEP);
    ed->ed_CycleLabels[1] = GetString(&ed->ed_LocaleInfo,MSG_SND_SAMPLEDSOUND);
d245 4
a248 4
    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);
d250 1
a250 1
    RenderGadgets(ed);
d253 18
a270 18
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SND_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
d272 1
a272 1
        return(TRUE);
d275 2
a276 2
    DisposeDisplay(ed);
    return(FALSE);
d283 1
a283 1
VOID DisposeDisplay(EdDataPtr ed)
d285 1
d288 2
a289 2
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
d291 2
a292 2
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
d296 64
a359 63
/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
    ed->ed_FlashDisplay = DoPrefsGadget(ed,&EG[3],ed->ed_FlashDisplay,
                                                  GTCB_Checked,ed->ed_PrefsWork.sop_DisplayQueue,
                                                  TAG_DONE);

    ed->ed_MakeSound = DoPrefsGadget(ed,&EG[4],ed->ed_MakeSound,
                                               GTCB_Checked,ed->ed_PrefsWork.sop_AudioQueue,
                                               TAG_DONE);

    ed->ed_TestSound = DoPrefsGadget(ed,&EG[5],ed->ed_TestSound,
                                               GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
                                               TAG_DONE);

    ed->ed_SoundType = DoPrefsGadget(ed,&EG[6],ed->ed_SoundType,
                                               GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
                                               GTCY_Active, ed->ed_PrefsWork.sop_AudioType,
                                               GTCY_Labels, ed->ed_CycleLabels,
                                               TAG_DONE);

    ed->ed_Volume = DoPrefsGadget(ed,&EG[7],ed->ed_Volume,
                                            GA_Disabled,     !ed->ed_PrefsWork.sop_AudioQueue,
                                            GTSL_Level,       ed->ed_PrefsWork.sop_AudioVolume,
                                            GTSL_Min,         0,
                                            GTSL_Max,         64,
                                            GTSL_MaxLevelLen, 4,
                                            GTSL_LevelFormat, "%4lu",
                                            GA_Immediate,     TRUE,
                                            TAG_DONE);

    ed->ed_Pitch = DoPrefsGadget(ed,&EG[8],ed->ed_Pitch,
                                           GA_Disabled,     !ed->ed_PrefsWork.sop_AudioQueue,
                                           GTSL_Level,       3000-(ed->ed_PrefsWork.sop_AudioPeriod-135),
                                           GTSL_Min,         1,
                                           GTSL_Max,         3000,
                                           GTSL_MaxLevelLen, 4,
                                           GTSL_LevelFormat, "%4lu",
                                           GA_Immediate,     TRUE,
                                           TAG_DONE);

    ed->ed_Duration = DoPrefsGadget(ed,&EG[9],ed->ed_Duration,
                                              GA_Disabled,    (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
                                              GTSL_Level,       ed->ed_PrefsWork.sop_AudioDuration/5,
                                              GTSL_Min,         1,
                                              GTSL_Max,         100,
                                              GTSL_MaxLevelLen, 4,
                                              GTSL_LevelFormat, "%4lu",
                                              GA_Immediate,     TRUE,
                                              TAG_DONE);

    ed->ed_SampleName = DoPrefsGadget(ed,&EG[10],ed->ed_SampleName,
                                                 GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
                                                 GTTX_Text,   FilePart(ed->ed_PrefsWork.sop_AudioFileName),
                                                 GTTX_Border, TRUE,
    						 TAG_DONE);

    ed->ed_SelectSample = DoPrefsGadget(ed,&EG[11],ed->ed_SelectSample,
                                                   GA_Disabled,(!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
                                                   TAG_DONE);
}
d367 2
a368 2
struct IntuiMessage __stdargs *FRRefresh(ULONG mask, struct IntuiMessage *intuiMsg,
                                         struct FileRequester *freq)
d370 2
a371 2
EdDataPtr        ed;
struct ExecBase *SysBase = (*((struct ExecBase **) 4));
d375 4
a378 4
        ed = (EdDataPtr)SysBase->ThisTask->tc_UserData;
        GT_BeginRefresh(window);
        RenderDisplay(ed);
        GT_EndRefresh(window,TRUE);
d381 1
a381 1
    return(intuiMsg);
d386 12
a397 12


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD            icode;
BOOL             refresh;
char             path[NAMEBUFSIZE];
EdStatus         result;
BPTR             lock;
BOOL             bool;
struct Requester req;
struct Gadget   *gadget;
d399 1
a399 1
    icode  = ed->ed_CurrentMsg.Code;
d406 3
a408 2
        case EC_TOGGLEFLASH : ed->ed_PrefsWork.sop_DisplayQueue = (SELECTED & gadget->Flags);
                              break;
d410 79
a488 70
        case EC_TOGGLESOUND : ed->ed_PrefsWork.sop_AudioQueue = (SELECTED & gadget->Flags);
                              refresh = TRUE;
                              break;

        case EC_SOUNDTYPE   : ed->ed_PrefsWork.sop_AudioType = icode;
                              refresh = TRUE;
                              break;

        case EC_TEST        : InitRequester(&req);
                              bool = Request(&req,window);

                              if ((result = DoAudio(ed,ed->ed_PrefsWork.sop_AudioFileName,TRUE)) != ES_NORMAL)
                              {
                                  ShowError2(ed,result);
                              }

                              if (bool)
                                  EndRequest(&req,window);

                              break;

        case EC_VOLUME      : ed->ed_PrefsWork.sop_AudioVolume = icode;
                              break;

        case EC_PITCH       : ed->ed_PrefsWork.sop_AudioPeriod = (3000-icode)+135;
                              break;

        case EC_DURATION    : ed->ed_PrefsWork.sop_AudioDuration = icode * 5;
        		      break;

        case EC_SELECTSAMPLE: strcpy(path,ed->ed_PrefsWork.sop_AudioFileName);
                              *PathPart(path) = 0;

                              if (!ed->ed_FileReq)
                                  ed->ed_FileReq = AllocAslRequest(ASL_FileRequest,NULL);

                              InitRequester(&req);
                              bool = Request(&req,window);

                              if (RequestPrefsFile(ed,ASL_FuncFlags, FILF_DOMSGFUNC,
                                                      ASL_Hail,      GetString(&ed->ed_LocaleInfo,MSG_SND_REQ_LOAD_SOUND),
                                                      ASL_Window,    ed->ed_Window,
                                                      ASL_Dir,       path,
                                                      ASL_File,      FilePart(ed->ed_PrefsWork.sop_AudioFileName),
                                                      ASL_HookFunc,  FRRefresh,
                                                      TAG_DONE))
                              {
                                  strcpy(path,ed->ed_FileReq->rf_Dir);
                                  AddPart(path,ed->ed_FileReq->rf_File,sizeof(path));
                                  if ((result = DoAudio(ed,path,FALSE)) == ES_NORMAL)
                                  {
                                      if (lock = Lock(path,ACCESS_READ))
                                      {
                                          if (NameFromLock(lock,path,sizeof(path)))
                                          {
                                              strcpy(ed->ed_PrefsWork.sop_AudioFileName,path);
                                              ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_SamplePeriod;
                                              refresh = TRUE;
                                          }
                                          UnLock(lock);
                                      }
                                  }
                                  else
                                  {
                                      ShowError2(ed,result);
                                  }
                              }

                              if (bool)
                                  EndRequest(&req,window);
a489 1
                              break;
d491 2
a492 2

        default             : break;
d496 1
a496 1
        RenderGadgets(ed);
d503 1
a503 1
VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
d505 1
d507 1
a507 1
    state->cs_Selected  = FALSE;
@


38.13
log
@Added SyncTextGadgets() support
Changes for new pe_iff
@
text
@a79 8
VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj)
{
}


/*****************************************************************************/


a98 8
VOID CleanUpEdData(EdDataPtr ed)
{
}


/*****************************************************************************/


a253 8
VOID RenderDisplay(EdDataPtr ed)
{
}


/*****************************************************************************/


d281 1
d291 1
d301 1
a318 8
VOID SyncTextGadgets(EdDataPtr ed)
{
}


/*****************************************************************************/


a441 9
}


/*****************************************************************************/


EdCommand GetCommand(EdDataPtr ed)
{
    return(EC_NOP);
@


38.12
log
@Now uses DoPrefsGadget() instead of CreatePrefsGadget() for better visuals upon window
  opening
@
text
@d54 26
d129 1
a129 1
    return(ReadIFF(ed,name,ReadPrefs));
d149 1
a149 1
    return(WriteIFF(ed,name,WritePrefs));
a212 5
    if (!(ed->ed_Menus = CreatePrefsMenus(ed,EM)))
    {
	return(FALSE);
    }

d224 19
a242 23
    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SND_NAME),
                                             WA_NewLookMenus,TRUE,
                                             WA_Gadgets,     ed->ed_Gadgets,
                                             TAG_DONE)))
d244 1
a244 2
        DisposeDisplay(ed);
	return(FALSE);
d247 2
a248 1
    return(TRUE);
d334 8
@


38.11
log
@Now uses WA_Gadgets to add the gadgets to the window
@
text
@d197 3
a199 34
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);
    ed->ed_FlashDisplay = CreatePrefsGadget(ed,&EG[3],TAG_DONE);
    ed->ed_MakeSound    = CreatePrefsGadget(ed,&EG[4],TAG_DONE);
    ed->ed_TestSound    = CreatePrefsGadget(ed,&EG[5],TAG_DONE);

    ed->ed_SoundType    = CreatePrefsGadget(ed,&EG[6],GTCY_Labels, ed->ed_CycleLabels,
                                                      GTCY_Active, ed->ed_PrefsWork.sop_AudioType,
                                                      TAG_DONE);

    ed->ed_Volume       = CreatePrefsGadget(ed,&EG[7],GTSL_Min,         0,
                                                      GTSL_Max,         64,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       ed->ed_PrefsWork.sop_AudioVolume,
                                                      TAG_DONE);

    ed->ed_Pitch        = CreatePrefsGadget(ed,&EG[8],GTSL_Min,         1,
                                                      GTSL_Max,         3000,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       3000-(ed->ed_PrefsWork.sop_AudioPeriod-135),
                                                      TAG_DONE);

    ed->ed_Duration     = CreatePrefsGadget(ed,&EG[9],GTSL_Min,         1,
                                                      GTSL_Max,         100,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       ed->ed_PrefsWork.sop_AudioDuration/5,
                                                      TAG_DONE);

    ed->ed_SampleName   = CreatePrefsGadget(ed,&EG[10],GTTX_Border, TRUE,
    						       TAG_DONE);
d201 1
a201 1
    ed->ed_SelectSample = CreatePrefsGadget(ed,&EG[11],TAG_DONE);
d263 3
a265 2
    SetGadgetAttr(ed,ed->ed_FlashDisplay,GTCB_Checked,ed->ed_PrefsWork.sop_DisplayQueue,
				         TAG_DONE);
d267 46
a312 25
    SetGadgetAttr(ed,ed->ed_MakeSound,GTCB_Checked,ed->ed_PrefsWork.sop_AudioQueue,
				      TAG_DONE);

    SetGadgetAttr(ed,ed->ed_TestSound,GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
				      TAG_DONE);

    SetGadgetAttr(ed,ed->ed_SoundType,GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
                                      GTCY_Active,ed->ed_PrefsWork.sop_AudioType,
				      TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Volume,GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
                                   GTSL_Level,  ed->ed_PrefsWork.sop_AudioVolume,
				   TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Pitch,GA_Disabled, !ed->ed_PrefsWork.sop_AudioQueue,
    				  GTSL_Level,  3000-(ed->ed_PrefsWork.sop_AudioPeriod-135),
				  TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Duration,GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
    				     GTSL_Level,  ed->ed_PrefsWork.sop_AudioDuration/5,
				     TAG_DONE);

    SetGadgetAttr(ed,ed->ed_SampleName,GA_Disabled, (!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
    				       GTTX_Text,   FilePart(ed->ed_PrefsWork.sop_AudioFileName),
				       TAG_DONE);
d314 3
a316 2
    SetGadgetAttr(ed,ed->ed_SelectSample,GA_Disabled,(!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
				         TAG_DONE);
@


38.10
log
@Changes for new prefs shell
@
text
@a191 21
    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SND_NAME),
                                             WA_NewLookMenus,TRUE,
                                             TAG_DONE)))
    {
        FreeMenus(ed->ed_Menus);
	return(FALSE);
    }

d240 22
d271 5
a275 2
    ClearMenuStrip(ed->ed_Window);
    CloseWindow(ed->ed_Window);
d349 3
@


38.9
log
@Froze main window gadgets when opening file req and when playing sound.
@
text
@d94 1
a94 1
    if (ReadChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct SoundPrefs)) == sizeof(struct SoundPrefs))
d101 1
a101 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs)
a102 1
    ed->ed_PrefsIO = destPrefs;
d113 1
a113 1
        if (WriteChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct SoundPrefs)) == sizeof(struct SoundPrefs))
d121 1
a121 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs)
a122 1
    ed->ed_PrefsIO = sourPrefs;
d165 1
d225 2
a226 2
    ed->ed_SoundType    = CreatePrefsGadget(ed,&EG[6],GTCY_Labels,ed->ed_CycleLabels,
                                                      GTCY_Active,ed->ed_PrefsWork.sop_AudioType,
d229 5
a233 5
    ed->ed_Volume       = CreatePrefsGadget(ed,&EG[7],GTSL_Min,0,
                                                      GTSL_Max,64,
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,ed->ed_PrefsWork.sop_AudioVolume,
d236 5
a240 5
    ed->ed_Pitch        = CreatePrefsGadget(ed,&EG[8],GTSL_Min,1,
                                                      GTSL_Max,3000,
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,3000-(ed->ed_PrefsWork.sop_AudioPeriod-135),
d243 5
a247 5
    ed->ed_Duration     = CreatePrefsGadget(ed,&EG[9],GTSL_Min,1,
                                                      GTSL_Max,100,
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,ed->ed_PrefsWork.sop_AudioDuration/5,
d250 2
a251 3
    ed->ed_SampleName   = CreatePrefsGadget(ed,&EG[10],GTTX_Border,TRUE,
    						       GTTX_Text,FilePart(ed->ed_PrefsWork.sop_AudioFileName),
                                                       TAG_DONE);
d257 1
a257 3
        CloseWindow(ed->ed_Window);
        FreeMenus(ed->ed_Menus);
        FreeGadgets(ed->ed_Gadgets);
a260 6
    SetFont(ed->ed_Window->RPort,ed->ed_Font);
    SetMenuStrip(ed->ed_Window,ed->ed_Menus);
    AddGList(ed->ed_Window,ed->ed_Gadgets,-1,-1,NULL);
    RefreshGList(ed->ed_Gadgets,ed->ed_Window,NULL,-1);
    GT_RefreshWindow(ed->ed_Window,NULL);

d303 2
a304 2
    SetGadgetAttr(ed,ed->ed_Volume,GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
                                   GTSL_Level,ed->ed_PrefsWork.sop_AudioVolume,
d307 2
a308 2
    SetGadgetAttr(ed,ed->ed_Pitch,GA_Disabled,!ed->ed_PrefsWork.sop_AudioQueue,
    				  GTSL_Level,3000-(ed->ed_PrefsWork.sop_AudioPeriod-135),
d311 2
a312 2
    SetGadgetAttr(ed,ed->ed_Duration,GA_Disabled,(!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
    				     GTSL_Level,ed->ed_PrefsWork.sop_AudioDuration/5,
d315 2
a316 2
    SetGadgetAttr(ed,ed->ed_SampleName,GA_Disabled,(!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_SAMPLE),
    				       GTTX_Text,FilePart(ed->ed_PrefsWork.sop_AudioFileName),
d329 2
a330 2
struct IntuiMessage *FRRefresh(ULONG mask, struct IntuiMessage *intuiMsg,
                               struct FileRequester *freq)
d349 8
a356 6
UWORD    icode;
BOOL     refresh;
char     path[NAMEBUFSIZE];
EdStatus result;
BPTR     lock;
BOOL     bool;
d358 3
a360 1
    icode   = ed->ed_CurrentMsg->Code;
d365 1
a365 1
        case EC_TOGGLEFLASH : ed->ed_PrefsWork.sop_DisplayQueue = !ed->ed_PrefsWork.sop_DisplayQueue;
d368 1
a368 1
        case EC_TOGGLESOUND : ed->ed_PrefsWork.sop_AudioQueue = !ed->ed_PrefsWork.sop_AudioQueue;
d376 2
a377 2
        case EC_TEST        : InitRequester(&ed->ed_SleepReq);
                              bool = Request(&ed->ed_SleepReq,window);
d385 1
a385 1
                                  EndRequest(&ed->ed_SleepReq,window);
d404 2
a405 2
                              InitRequester(&ed->ed_SleepReq);
                              bool = Request(&ed->ed_SleepReq,window);
d437 1
a437 1
                                  EndRequest(&ed->ed_SleepReq,window);
a465 3

    if (ec == EC_SAVEICONS)
        state->cs_Selected = ed->ed_SaveIcons;
@


38.8
log
@Changes for new pe_strings.c prefs shell module
@
text
@d364 1
d382 4
a385 1
        case EC_TEST        : if ((result = DoAudio(ed,ed->ed_PrefsWork.sop_AudioFileName,TRUE)) != ES_NORMAL)
d389 4
d410 3
d441 4
@


38.7
log
@Changes for new prefs shell
@
text
@d42 1
a42 1
#include "texttable.h"
d167 9
a175 9
    {CHECKBOX_KIND, 8,   4,   12,  14, MSG_FLASH_GAD,        EC_TOGGLEFLASH, PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 8,   19,  12,  14, MSG_MAKESOUND_GAD,    EC_TOGGLESOUND, PLACETEXT_RIGHT},
    {BUTTON_KIND,   190, 12,  156, 14, MSG_TEST_GAD,         EC_TEST,        0},
    {CYCLE_KIND,    190, 44,  156, 14, MSG_SOUNDTYPE_GAD,    EC_SOUNDTYPE,   0},
    {SLIDER_KIND,   190, 60,  156, 11, MSG_VOLUME_GAD,       EC_VOLUME,      0},
    {SLIDER_KIND,   190, 73,  156, 11, MSG_PITCH_GAD,        EC_PITCH,       0},
    {SLIDER_KIND,   190, 95,  156, 11, MSG_DURATION_GAD,     EC_DURATION,    0},
    {TEXT_KIND,     160, 129, 186, 14, MSG_SAMPLENAME_GAD,   EC_NOP,         PLACETEXT_ABOVE},
    {BUTTON_KIND,   8,   129, 147, 14, MSG_SELECTSAMPLE_GAD, EC_SELECTSAMPLE,0}
d206 1
a206 1
                                             WA_Title,       EDITOR_NAME,
d214 2
a215 2
    ed->ed_CycleLabels[0] = GetString(&ed->ed_LocaleInfo,MSG_BEEP);
    ed->ed_CycleLabels[1] = GetString(&ed->ed_LocaleInfo,MSG_SAMPLEDSOUND);
d403 1
a403 1
                                                      ASL_Hail,      GetString(&ed->ed_LocaleInfo,MSG_REQ_LOAD_SOUND),
@


38.6
log
@Added CleanUpEdData routine
@
text
@d54 8
a82 1
    return;
@


38.5
log
@Now expands sampled sound's paths before storing them
@
text
@d73 9
d409 1
a409 1
                                          if (NameFromLock(lock,path,sizeof(path))
@


38.4
log
@Corrected handling of pitch
@
text
@d347 1
d398 10
a407 3
                                      strcpy(ed->ed_PrefsWork.sop_AudioFileName,path);
                                      ed->ed_PrefsWork.sop_AudioPeriod = ed->ed_SamplePeriod;
                                      refresh = TRUE;
@


38.3
log
@EC_RESTORE now also restores the Sound Type gadget contents
"Test Sound" gadget is now ghosted when "Make Sound" is not selected
@
text
@d222 1
a222 1
                                                      GTSL_Max,1000,
d225 1
a225 1
                                                      GTSL_Level,1000-((ed->ed_PrefsWork.sop_AudioPeriod-127) / 50),
d236 1
a236 1
    						       GTTX_Text,ed->ed_PrefsWork.sop_AudioFileName,
d302 1
a302 1
    				  GTSL_Level,1000-((ed->ed_PrefsWork.sop_AudioPeriod-127)/50),
d310 1
a310 1
    				       GTTX_Text,ed->ed_PrefsWork.sop_AudioFileName,
d373 1
a373 1
        case EC_PITCH       : ed->ed_PrefsWork.sop_AudioPeriod = (1000-icode)*50+127;
@


38.2
log
@No longer ghost Pitch gadget when in Sampled Sound mode
Copy sampled sound period to prefs file after loading a sample
@
text
@d64 1
a64 1
    ed->ed_PrefsVirtual = ed->ed_PrefsDefaults;
d208 1
a208 1
    CreatePrefsGadget(ed,&EG[5],TAG_DONE);
d290 3
d294 1
@


38.1
log
@Initial V38 RCS checkin
@
text
@d156 1
a156 1
    {SLIDER_KIND,   190, 82,  156, 11, MSG_PITCH_GAD,        EC_PITCH,       0},
d297 1
a297 1
    SetGadgetAttr(ed,ed->ed_Pitch,GA_Disabled,(!ed->ed_PrefsWork.sop_AudioQueue) || (ed->ed_PrefsWork.sop_AudioType != SPTYPE_BEEP),
d394 1
@
