head     38.14;
branch   ;
access   ;
symbols  ;
locks    davidj:38.14; strict;
comment  @ * @;


38.14
date     92.06.10.14.34.22;  author davidj;  state Exp;
branches ;
next     38.13;

38.13
date     92.01.13.12.44.34;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     92.01.09.16.31.04;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     91.11.11.15.00.10;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.09.19.16.15.07;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.08.06.17.38.44;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.07.23.10.16.27;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.07.15.11.56.29;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.07.10.17.42.23;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.07.01.12.23.20;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.06.28.17.49.56;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.06.24.16.40.49;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.06.24.15.42.06;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.13.30.52;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - Sound custom interface
@


38.14
log
@*** empty log message ***
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/execbase.h>
#include <datatypes/datatypes.h>
#include <datatypes/datatypesclass.h>
#include <intuition/intuition.h>
#include <intuition/classusr.h>
#include <intuition/classes.h>
#include <intuition/screens.h>
#include <graphics/text.h>
#include <utility/hooks.h>
#include <libraries/asl.h>
#include <workbench/workbench.h>
#include <prefs/sound.h>
#include <prefs/prefhdr.h>
#include <string.h>

/* application includes */
#include "sound_rev.h"
#include "pe_strings.h"


/*****************************************************************************/


/* define the editor's command-line template here
 * OPT_FROM, OPT_EDIT, OPT_USE, OPT_SAVE, OPT_SCREEN and OPT_COUNT must all
 * be defined. If any of these do not apply, artificially bump OPT_COUNT
 * by one, and set the value of the unused arguments to OPT_COUNT-1
 */
#define TEMPLATE     "FROM,EDIT/S,USE/S,SAVE/S,PUBSCREEN/K" VERSTAG
#define OPT_FROM     0
#define OPT_EDIT     1
#define OPT_USE      2
#define OPT_SAVE     3
#define OPT_SCREEN   4
#define OPT_COUNT    5


/*****************************************************************************/


/* You don't generally touch these */
#define NAMEBUFSIZE  512
#define PROGPATHSIZE 256


/*****************************************************************************/


/* Fill-in these values for the editor */
#define PORT_NAME   "Sound_Prefs"
#define ENV_NAME    "ENV:Sys/sound.prefs"
#define ARC_NAME    "ENVARC:Sys/sound.prefs"
#define PRESET_DIR  "SYS:Prefs/Presets"
#define PRESET_NAME ""


/*****************************************************************************/


/* This is the global data structure containing all global variables used by
 * the editor. The first part of the structure should not change from editor to
 * editor, while the second part can be changed to whatever the current editor
 * needs
 *
 * This structure is normally passed to you as a parameter. In exceptional
 * cases, the pointer call also be found in the tc_UserData field of the
 * task structure.
 */
typedef struct EdData
{
    /* all the libraries opened automatically by the common code */
    struct ExecBase      *ed_SysBase;
    struct Library       *ed_IntuitionBase;
    struct Library       *ed_DOSBase;
    struct Library       *ed_GfxBase;
    struct Library       *ed_AslBase;
    struct Library       *ed_IFFParseBase;
    struct Library       *ed_IconBase;
    struct Library       *ed_GadToolsBase;
    struct Library       *ed_UtilityBase;
    struct Library	 *ed_LocaleBase;
    struct Library	 *ed_WorkbenchBase;

    /* execution environment details, can be looked at anytime */
    struct RDArgs	 *ed_RdArgs;
    ULONG		  ed_Args[OPT_COUNT];
    char	          ed_ProgramPath[PROGPATHSIZE];
    STRPTR		  ed_PubScreenName;
    char		  ed_ScreenNameBuf[32];
    APTR		  ed_OldWindowPtr;

    /* message port used to detect other running instances of this program.
     * This is used by the common code, do not touch
     */
    struct MsgPort        ed_RendezVous;

    /* data needed for the AppWindow and AppMenu */
    struct MsgPort	  ed_AppPort;
    struct AppWindow     *ed_AppWindow;
    struct AppMenu       *ed_AppMenu;

    /* another private field used by the common code's gadget creation
     * function
     */
    struct Gadget        *ed_LastAdded;

    /* display attributes for this editor */
    struct Window        *ed_Window;
    struct Screen        *ed_Screen;
    struct Menu          *ed_Menus;
    struct Gadget        *ed_Gadgets;
    struct Font          *ed_Font;
    struct DrawInfo      *ed_DrawInfo;
    struct FileRequester *ed_FileReq;
    APTR                  ed_VisualInfo;
    struct TextAttr       ed_TextAttr;

    /* when processing a command, this will point to the Intuition message
     * that caused this command to be executed. Do NOT reply this message
     * yourself, the common code does this
     */
    struct IntuiMessage   ed_CurrentMsg;

    /* various read/write state flags */
    BOOL		  ed_Quit;           /* set to TRUE to quit */
    BOOL		  ed_Cancelled;
    BOOL		  ed_InitFail;       /* set to TRUE when InitEdData fails */
    BOOL                  ed_CheckCmdState;  /* tell the main code to validate the state of menus and gadgets */
    BOOL                  ed_SaveIcons;      /* should we save icons? */
    LONG                  ed_SecondaryResult;/* pr_Result2 for this program */
    STRPTR		  ed_ErrorFileName;  /* name for IO error displays */

    /* this should be changed to be of the current editor's favorite type */
    struct SoundPrefs     ed_PrefsDefaults;
    struct SoundPrefs     ed_PrefsWork;
    struct SoundPrefs     ed_PrefsInitial;

    /* used by file requester calls */
    char                  ed_NameBuf[NAMEBUFSIZE];

    /* information used for localization */
    struct LocaleInfo     ed_LocaleInfo;

    /* the rest of this structure is editor-specific and is not used by the
     * common code
     */

    struct Library	 *ed_DataTypesBase;
    Object		 *ed_DataObject;	/* The sound file */
    struct Hook		  ed_FilterHook;	/* Used to show sound files only */

    struct Gadget        *ed_FlashDisplay;
    struct Gadget        *ed_MakeSound;
    struct Gadget	 *ed_TestSound;
    struct Gadget        *ed_SoundType;
    struct Gadget        *ed_Volume;
    struct Gadget        *ed_Pitch;
    struct Gadget        *ed_Duration;
    struct Gadget        *ed_SampleName;
    struct Gadget        *ed_SelectSample;
    struct FileRequester *ed_SoundReq;

    STRPTR                ed_CycleLabels[3];
    ULONG                 ed_SamplePeriod;

    ULONG                 ed_DurationStash;
    ULONG                 ed_PeriodStash;

} EdData;

typedef EdData *EdDataPtr;

#define DOSBase       ed->ed_DOSBase
#define IntuitionBase ed->ed_IntuitionBase
#define AslBase       ed->ed_AslBase
#define IFFParseBase  ed->ed_IFFParseBase
#define IconBase      ed->ed_IconBase
#define GfxBase	      ed->ed_GfxBase
#define GadToolsBase  ed->ed_GadToolsBase
#define UtilityBase   ed->ed_UtilityBase
#define LocaleBase    ed->ed_LocaleBase
#define WorkbenchBase ed->ed_WorkbenchBase
#define window        ed->ed_Window
#define	DataTypesBase ed->ed_DataTypesBase

/* state the editor can be in, ES_NORMAL to ES_DOSERROR are required,
 * everything else is optional
 */
typedef enum EdStatus
{
    ES_NORMAL,
    ES_NO_MEMORY,
    ES_IFF_UNKNOWNCHUNK,
    ES_IFF_UNKNOWNVERSION,
    ES_IFFERROR,
    ES_DOSERROR,

    ES_REQUIRES_DATATYPES,
    ES_IFF_NOT_8SVX,

} EdStatus;


/* commands this editor supports */
typedef enum EdCommand
{
    /* standard prefs editor commands */
    EC_NOP,
    EC_OPEN,
    EC_SAVE,
    EC_SAVEAS,
    EC_LASTSAVED,
    EC_RESTORE,
    EC_RESETALL,
    EC_SAVEICONS,
    EC_USE,
    EC_CANCEL,
    EC_ACTIVATE,

    /* custom editor commands */

    EC_TOGGLEFLASH,
    EC_TOGGLESOUND,
    EC_TEST,
    EC_SOUNDTYPE,
    EC_VOLUME,
    EC_PITCH,
    EC_DURATION,
    EC_SELECTSAMPLE
} EdCommand;


/* this describes the state of an editor command */
typedef struct CmdState
{
    BOOL cs_Available;
    BOOL cs_Selected;
} CmdState;

typedef CmdState *CmdStatePtr;


/*****************************************************************************/

#define ASM           __asm
#define REG(x)	      register __ ## x

/*****************************************************************************/

EdStatus InitEdData(EdDataPtr ed);
VOID CleanUpEdData(EdDataPtr ed);

EdStatus OpenPrefs(EdDataPtr ed, STRPTR name);
EdStatus SavePrefs(EdDataPtr ed, STRPTR name);

BOOL CreateDisplay(EdDataPtr ed);
VOID DisposeDisplay(EdDataPtr ed);
VOID RenderGadgets(EdDataPtr ed);

VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec);
VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state);


#define ProcessArgs(ed,diskObj) {}
#define CopyPrefs(ed,p1,p2)     (*p1 = *p2)
#define InitDisp(ed)            (TRUE)
#define RenderDisplay(ed)       {}
#define SyncTextGadgets(ed)     {}
#define GetCommand(ed)          (EC_NOP)

ULONG ASM Filter (REG (a0) struct Hook *h, REG (a2) struct FileRequester *fr, REG (a1) struct AnchorPath *ap);

@


38.13
log
@*** empty log message ***
@
text
@d7 2
d10 2
d14 1
d153 4
d173 1
d189 1
a190 1

d203 3
a205 1
    ES_IFF_NOT_8SVX
d250 2
d253 2
d275 3
@


38.12
log
@*** empty log message ***
@
text
@d157 1
d240 1
a252 1
#define CleanUpEdData(ed)       {}
@


38.11
log
@Changes for new prefs shell
@
text
@d160 3
@


38.10
log
@Added SyncTextGadgets() support
Changes for new pe_iff
@
text
@a235 2
VOID CleanUpEdData(EdDataPtr ed);
VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj);
a241 1
VOID RenderDisplay(EdDataPtr ed);
a242 1
VOID SyncTextGadgets(EdDataPtr ed);
a244 1
EdCommand GetCommand(EdDataPtr ed);
d246 9
@


38.9
log
@Changes for new prefs shell
@
text
@a59 26
/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_SOND,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
};


/*****************************************************************************/


d246 1
@


38.8
log
@a
Changes for new pe_main.c
@
text
@d116 1
a135 1
    struct Requester      ed_SleepReq;
a143 5
    /* allocate memory using AllocRemember() and attach it here. This gets
     * freed upon program exit
     */
    struct Remember      *ed_Tracker;

d148 1
a148 1
    struct IntuiMessage  *ed_CurrentMsg;
d152 1
a154 1
    BOOL                  ed_PrefsChanged;   /* the user changed the prefs? */
a173 4
    APTR                  ed_PrefsIO;
    STRPTR                ed_CycleLabels[3];
    ULONG                 ed_SamplePeriod;

d183 3
d265 2
a266 2
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs);
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs);
@


38.7
log
@Changes for new pe_strings.c prefs shell module
@
text
@d135 1
@


38.6
log
@Changes for new prefs shell
@
text
@d18 1
a18 1
#include "texttable.h"
d50 1
a50 1
#define EDITOR_NAME "Sound Prefs"
@


38.5
log
@Changes needed for AppWindow/Menu support
@
text
@d11 1
d114 2
d268 1
@


38.4
log
@Added CleanUpEdData routine
@
text
@d49 1
a49 1
#define EDITOR_NAME "Sound Preferences"
d107 1
d119 5
d201 1
d205 2
a206 2
/* state the editor can be in, ES_NORMAL is required, everything else is
 * optional
d214 2
a215 1
    ES_IFF_NOT_8SVX,
d217 1
a217 2
    ES_IFFERROR,
    ES_DOSERROR
d235 1
@


38.3
log
@Added ed_TestSound field
@
text
@d256 2
@


38.2
log
@Added ed_SamplePeriod field
@
text
@d157 1
a157 1
    struct SoundPrefs     ed_PrefsVirtual;
d175 1
@


38.1
log
@Initial V38 RCS checkin
@
text
@d171 1
@
