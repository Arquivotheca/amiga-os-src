head     39.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.5
date     92.12.28.11.17.45;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.12.01.11.29.42;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.31.16.47.56;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.08.20.58.55;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.22.16.26.05;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     92.03.17.15.26.40;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     92.02.10.10.45.58;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.11.11.13.50.10;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.09.20.11.08.42;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.08.28.12.06.14;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.08.27.11.09.50;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.06.17.12.08;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.06.17.04.39;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.07.19.17.10.16;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.15.10.57.14;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.17.31.28;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.10.08.26;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - Palette custom interface
@


39.5
log
@*** empty log message ***
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/execbase.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <graphics/text.h>
#include <libraries/asl.h>
#include <workbench/workbench.h>
#include <prefs/prefhdr.h>
#include <prefs/palette.h>
#include <utility/hooks.h>
#include <string.h>

/* application includes */
#include "palette_rev.h"
#include "pe_strings.h"


/*****************************************************************************/


/* define the editor's command-line template here
 * OPT_FROM, OPT_EDIT, OPT_USE, OPT_SAVE, OPT_SCREEN and OPT_COUNT must all
 * be defined. If any of these do not apply, artificially bump OPT_COUNT
 * by one, and set the value of the unused arguments to OPT_COUNT-1
 */
#define TEMPLATE     "FROM,EDIT/S,USE/S,SAVE/S" VERSTAG
#define OPT_FROM     0
#define OPT_EDIT     1
#define OPT_USE      2
#define OPT_SAVE     3
#define OPT_SCREEN   4
#define OPT_COUNT    5


/*****************************************************************************/


/* You don't generally touch these */
#define NAMEBUFSIZE  512
#define PROGPATHSIZE 256


/*****************************************************************************/


/* Fill-in these values for the editor */
#define PORT_NAME   "Palette_Prefs"
#define ENV_NAME    "ENV:Sys/palette.prefs"
#define ARC_NAME    "ENVARC:Sys/palette.prefs"
#define PRESET_DIR  "SYS:Prefs/Presets"
#define PRESET_NAME ""


/*****************************************************************************/


#define MAXDEPTH        3
#define MAXCOLORS       8
#define MAXWHEELPENS    98
#define MAXGRADIENTPENS 32
#define LOWBITSPERGUN   2
#define HIGHBITSPERGUN  16   /* only 16 because of ColorSpec */
#define NUM_KNOWNPENS   12   /* changing this requires changing stuff in many places! */


/*****************************************************************************/


/* This is the global data structure containing all global variables used by
 * the editor. The first part of the structure should not change from editor to
 * editor, while the second part can be changed to whatever the current editor
 * needs
 *
 * This structure is normally passed to you as a parameter. In exceptional
 * cases, the pointer call also be found in the tc_UserData field of the
 * task structure.
 */
typedef struct EdData
{
    /* all the libraries opened automatically by the common code */
    struct ExecBase      *ed_SysBase;
    struct Library       *ed_IntuitionBase;
    struct Library       *ed_DOSBase;
    struct Library       *ed_GfxBase;
    struct Library       *ed_AslBase;
    struct Library       *ed_IFFParseBase;
    struct Library       *ed_IconBase;
    struct Library       *ed_GadToolsBase;
    struct Library       *ed_UtilityBase;
    struct Library	 *ed_LocaleBase;
    struct Library	 *ed_WorkbenchBase;

    /* execution environment details, can be looked at anytime */
    struct RDArgs	 *ed_RdArgs;
    ULONG		  ed_Args[OPT_COUNT];
    char	          ed_ProgramPath[PROGPATHSIZE];
    STRPTR		  ed_PubScreenName;
    char		  ed_ScreenNameBuf[32];
    APTR		  ed_OldWindowPtr;

    /* message port used to detect other running instances of this program.
     * This is used by the common code, do not touch
     */
    struct MsgPort        ed_RendezVous;

    /* data needed for the AppWindow and AppMenu */
    struct MsgPort	  ed_AppPort;
    struct AppWindow     *ed_AppWindow;

    /* another private field used by the common code's gadget creation
     * function
     */
    struct Gadget        *ed_LastAdded;

    /* display attributes for this editor */
    struct Window        *ed_Window;
    struct Screen        *ed_Screen;
    struct Menu          *ed_Menus;
    struct Gadget        *ed_Gadgets;
    struct Font          *ed_Font;
    struct DrawInfo      *ed_DrawInfo;
    struct FileRequester *ed_FileReq;
    APTR                  ed_VisualInfo;
    struct TextAttr       ed_TextAttr;

    /* when processing a command, this will point to the Intuition message
     * that caused this command to be executed. Do NOT reply this message
     * yourself, the common code does this
     */
    struct IntuiMessage   ed_CurrentMsg;

    /* various read/write state flags */
    BOOL		  ed_Quit;           /* set to TRUE to quit */
    BOOL		  ed_Cancelled;
    BOOL		  ed_InitFail;       /* set to TRUE when InitEdData fails */
    BOOL                  ed_CheckCmdState;  /* tell the main code to validate the state of menus and gadgets */
    BOOL                  ed_SaveIcons;      /* should we save icons? */
    LONG                  ed_SecondaryResult;/* pr_Result2 for this program */
    STRPTR		  ed_ErrorFileName;  /* name for IO error displays */

    /* this should be changed to be of the current editor's favorite type */
    struct PalettePrefs   ed_PrefsDefaults;
    struct PalettePrefs   ed_PrefsWork;
    struct PalettePrefs   ed_PrefsInitial;

    /* used by file requester calls */
    char                  ed_NameBuf[NAMEBUFSIZE];

    /* information used for localization */
    struct LocaleInfo     ed_LocaleInfo;

    /* the rest of this structure is editor-specific and is not used by the
     * common code
     */

    struct Screen        *ed_WBScreen;

    struct Library       *ed_ColorWheelBase;
    struct Library       *ed_GradientSliderBase;

    struct Gadget        *ed_Pens;
    struct Gadget        *ed_ColorPalette;
    struct Gadget	 *ed_Slider1;
    struct Gadget	 *ed_Slider2;
    struct Gadget	 *ed_Slider3;
    struct Gadget        *ed_PenPalette;
    struct Gadget        *ed_ColorWheel;
    struct Gadget        *ed_GradientSlider;
    struct Gadget        *ed_ColorMode;

    ULONG		  ed_CurrentRed;
    ULONG		  ed_CurrentGreen;
    ULONG		  ed_CurrentBlue;
    UWORD		  ed_CurrentColor;
    UWORD                 ed_CurrentPen;

    UWORD                 ed_RedBits;
    UWORD		  ed_GreenBits;
    UWORD		  ed_BlueBits;

    UBYTE                 ed_ColorTable[MAXCOLORS];
    WORD                  ed_NumColorsAllocated;
    WORD                  ed_GradPens[MAXGRADIENTPENS];
    WORD                  ed_NumGradPensAllocated;
    WORD                  ed_FirstGradPen;

    struct List           ed_PenList;
    struct Node           ed_PenNodes[NUM_KNOWNPENS];
    struct Hook           ed_PenCallBack;

    BOOL                  ed_EmbeddedSample;
    struct Window        *ed_SampleWindow;
    struct RastPort      *ed_SampleRastPort;
    WORD                  ed_SampleLeft;
    WORD                  ed_SampleTop;
    WORD                  ed_Depth;      /* 2 or 3 only */
    BOOL                  ed_SlidersRGB;
    BOOL                  ed_4ColorMode;

    UWORD                 ed_LeftBorder;
    UWORD                 ed_TopBorder;

    struct Window        *ed_WheelWindow;
    struct Screen        *ed_WheelScreen;
    struct DrawInfo      *ed_WheelDrawInfo;
    struct Gadget        *ed_WheelGadgets;
    struct Gadget        *ed_WheelLastAdded;
    APTR                  ed_WheelVisualInfo;
    UWORD                 ed_WheelSamplePen;
    BOOL                  ed_DoWheelScreen;
    struct ColorSpec      ed_WheelBackup;

    struct Requester      ed_SleepReq;
    BOOL                  ed_ASleep;

    STRPTR                ed_ColorModeLabels[3];

    struct BitMap        *ed_ClickMap;
    struct RastPort       ed_ClickRP;
} EdData;

typedef EdData *EdDataPtr;

#define DOSBase        ed->ed_DOSBase
#define IntuitionBase  ed->ed_IntuitionBase
#define AslBase        ed->ed_AslBase
#define IFFParseBase   ed->ed_IFFParseBase
#define IconBase       ed->ed_IconBase
#define GfxBase	       ed->ed_GfxBase
#define GadToolsBase   ed->ed_GadToolsBase
#define UtilityBase    ed->ed_UtilityBase
#define LocaleBase     ed->ed_LocaleBase
#define WorkbenchBase  ed->ed_WorkbenchBase
#define ColorWheelBase ed->ed_ColorWheelBase
#define window         ed->ed_Window


/* state the editor can be in, ES_NORMAL to ES_DOSERROR are required,
 * everything else is optional
 */
typedef enum EdStatus
{
    ES_NORMAL,
    ES_NO_MEMORY,
    ES_IFF_UNKNOWNCHUNK,
    ES_IFF_UNKNOWNVERSION,
    ES_IFFERROR,
    ES_DOSERROR,

    ES_NO_COLORWHEEL,
    ES_NO_GRADIENT
} EdStatus;


/* commands this editor supports */
typedef enum EdCommand
{
    /* standard prefs editor commands */
    EC_NOP,
    EC_OPEN,
    EC_SAVE,
    EC_SAVEAS,
    EC_LASTSAVED,
    EC_RESTORE,
    EC_RESETALL,
    EC_SAVEICONS,
    EC_USE,
    EC_CANCEL,
    EC_ACTIVATE,
    EC_CLOSEGADGET,

    /* custom editor commands */

    EC_SHOWSAMPLE,
    EC_COLORMODE,

    EC_COLORWHEEL,
    EC_GRADIENTSLIDER,

    EC_PENS,
    EC_PENPALETTE,

    EC_COLORPALETTE,
    EC_SLIDER1,
    EC_SLIDER2,
    EC_SLIDER3,

    EC_RGBMODEL,
    EC_HSBMODEL,

    EC_PRESET1,
    EC_PRESET2,
    EC_PRESET3,
    EC_PRESET4,
    EC_PRESET5,
    EC_PRESET6,
    EC_PRESET7,
    EC_PRESET8,
    EC_PRESET9,

    EC_SHOWWHEEL,
    EC_WHEELOK,
    EC_WHEELCANCEL,

    EC_SAMPLECLICK
} EdCommand;


#define SEND_EC_CLOSEGADGET   /* since we support EC_CLOSEGADGET */
#define USES_OWN_SCREEN


/* this describes the state of an editor command */
typedef struct CmdState
{
    BOOL cs_Available;
    BOOL cs_Selected;
} CmdState;

typedef CmdState *CmdStatePtr;


/*****************************************************************************/


BOOL InitDisp(EdDataPtr ed);
EdStatus InitEdData(EdDataPtr ed);
VOID CleanUpEdData(EdDataPtr ed);

EdStatus OpenPrefs(EdDataPtr ed, STRPTR name);
EdStatus SavePrefs(EdDataPtr ed, STRPTR name);

BOOL CreateDisplay(EdDataPtr ed);
VOID DisposeDisplay(EdDataPtr ed);
VOID RenderGadgets(EdDataPtr ed);

VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec);
VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state);

VOID RenderDisplay(EdDataPtr ed);

EdCommand GetCommand(EdDataPtr ed);

#define ProcessArgs(ed,diskObj) {}
#define CopyPrefs(ed,p1,p2)     (*p1 = *p2)
#define SyncTextGadgets(ed)     {}
@


39.4
log
@*** empty log message ***
@
text
@a121 1
    struct Requester      ed_SleepReq;
d216 3
@


39.3
log
@Increase MAXWHEELCOLORS by 1
@
text
@d201 1
a201 1
    WORD                  ed_Depth;      /* 1, 2, or 3 only */
d205 13
d219 3
d226 12
a237 11
#define DOSBase       ed->ed_DOSBase
#define IntuitionBase ed->ed_IntuitionBase
#define AslBase       ed->ed_AslBase
#define IFFParseBase  ed->ed_IFFParseBase
#define IconBase      ed->ed_IconBase
#define GfxBase	      ed->ed_GfxBase
#define GadToolsBase  ed->ed_GadToolsBase
#define UtilityBase   ed->ed_UtilityBase
#define LocaleBase    ed->ed_LocaleBase
#define WorkbenchBase ed->ed_WorkbenchBase
#define window        ed->ed_Window
d301 7
a307 1
    EC_PRESET9
@


39.2
log
@*** empty log message ***
@
text
@d63 1
a63 1
#define MAXWHEELPENS    97
@


39.1
log
@*** empty log message ***
@
text
@d61 7
a67 5
#define MAXDEPTH       3
#define MAXCOLORS      8
#define LOWBITSPERGUN  2
#define HIGHBITSPERGUN 16   /* only 16 because of ColorSpec */
#define NUM_KNOWNPENS  12   /* changing this requires changing stuff in many places! */
d167 1
d174 1
d188 1
a188 1
    WORD                  ed_GradPens[32];
d203 3
d260 1
@


38.12
log
@Now supports N bits per gun, for N < 8
@
text
@d13 2
a19 1
#include "ilbm.h"
d52 2
a53 2
#define ENV_NAME    "ENV:Sys/palette.ilbm"
#define ARC_NAME    "ENVARC:Sys/palette.ilbm"
d61 2
a62 2
#define MAXDEPTH       4
#define MAXCOLORS      16
d64 2
a65 1
#define HIGHBITSPERGUN 8   /* only 8 because of CMAP IFF chunk */
a67 6
struct PalettePrefs
{
    struct ColorRegister pp_Colors[MAXCOLORS];
};


a110 1
    struct AppMenu       *ed_AppMenu;
d159 12
a170 3
    struct Gadget	 *ed_Red;
    struct Gadget	 *ed_Green;
    struct Gadget	 *ed_Blue;
d172 6
d182 17
a198 5
    ULONG		  ed_CurrentColor;
    ULONG		  ed_CurrentRed;
    ULONG		  ed_CurrentGreen;
    ULONG		  ed_CurrentBlue;
    struct Screen        *ed_WBScreen;
d226 4
a229 1
    ES_DOSERROR
d248 1
d252 16
a267 4
    EC_PALETTE,
    EC_RED,
    EC_GREEN,
    EC_BLUE,
d280 4
d297 1
a299 1
VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj);
d311 7
a317 5
#define CopyPrefs(ed,p1,p2) (*p1 = *p2)
#define InitDisp(ed)        (TRUE)
#define RenderDisplay(ed)   {}
#define SyncTextGadgets(ed) {}
#define GetCommand(ed)      (EC_NOP)
@


38.11
log
@*** empty log message ***
@
text
@d62 1
a62 1
#define LOWBITSPERGUN  4
@


38.10
log
@Changes for new prefs shell
@
text
@d60 2
a61 2
#define MAXDEPTH       8
#define MAXCOLORS      256
@


38.9
log
@Added SyncTextGadgets() support
@
text
@a263 1
VOID RenderDisplay(EdDataPtr ed);
a264 1
VOID SyncTextGadgets(EdDataPtr ed);
a266 1
EdCommand GetCommand(EdDataPtr ed);
d268 6
@


38.8
log
@Added ed_WBScreen field
@
text
@a59 13
/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 1
static LONG far IFFPrefChunks[] =
{
    ID_ILBM, ID_CMAP,
};


/*****************************************************************************/


d266 1
@


38.7
log
@*** empty log message ***
@
text
@d189 1
@


38.6
log
@No longer uses EC_CUSTOMCANCEL
@
text
@d73 2
a74 2
#define MAXDEPTH       4
#define MAXCOLORS      16
@


38.5
log
@Changes for new prefs shell
@
text
@a237 1
    EC_CUSTOMCANCEL,
@


38.4
log
@Added ed_SleepReq field for new pe_main.c
@
text
@d118 1
a146 5
    /* allocate memory using AllocRemember() and attach it here. This gets
     * freed upon program exit
     */
    struct Remember      *ed_Tracker;

d151 1
a151 1
    struct IntuiMessage  *ed_CurrentMsg;
d155 1
a157 1
    BOOL                  ed_PrefsChanged;   /* the user changed the prefs? */
d272 2
a273 2
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs);
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs);
@


38.3
log
@Changes for new pe_strings.c prefs shell module
@
text
@d137 1
@


38.2
log
@Changes for new prefs shell
@
text
@d17 1
a17 1
#include "texttable.h"
d50 1
a50 1
#define EDITOR_NAME "Palette Prefs"
@


38.1
log
@Initial V38 RCS checkin
@
text
@d11 1
d116 2
d273 1
@
