head     39.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.7
date     92.12.03.18.40.33;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.11.04.15.10.59;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.08.25.14.07.50;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.08.19.13.06.03;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.16.16.39.20;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.15.16.59.01;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.22.17.46.49;  author vertex;  state Exp;
branches ;
next     38.33;

38.33
date     92.06.02.16.47.31;  author vertex;  state Exp;
branches ;
next     38.32;

38.32
date     92.06.02.16.43.33;  author vertex;  state Exp;
branches ;
next     38.31;

38.31
date     92.03.24.17.42.46;  author vertex;  state Exp;
branches ;
next     38.30;

38.30
date     92.03.24.16.44.12;  author vertex;  state Exp;
branches ;
next     38.29;

38.29
date     92.03.20.14.48.10;  author vertex;  state Exp;
branches ;
next     38.28;

38.28
date     92.03.19.10.31.07;  author vertex;  state Exp;
branches ;
next     38.27;

38.27
date     92.03.17.11.05.15;  author vertex;  state Exp;
branches ;
next     38.26;

38.26
date     92.03.13.13.04.29;  author vertex;  state Exp;
branches ;
next     38.25;

38.25
date     92.03.10.09.34.31;  author vertex;  state Exp;
branches ;
next     38.24;

38.24
date     92.03.05.13.02.53;  author vertex;  state Exp;
branches ;
next     38.23;

38.23
date     92.03.02.11.22.24;  author vertex;  state Exp;
branches ;
next     38.22;

38.22
date     92.02.17.16.00.34;  author vertex;  state Exp;
branches ;
next     38.21;

38.21
date     92.01.27.13.05.33;  author vertex;  state Exp;
branches ;
next     38.20;

38.20
date     92.01.21.13.49.18;  author vertex;  state Exp;
branches ;
next     38.19;

38.19
date     92.01.13.11.31.35;  author vertex;  state Exp;
branches ;
next     38.18;

38.18
date     92.01.09.17.34.16;  author vertex;  state Exp;
branches ;
next     38.17;

38.17
date     91.12.30.14.32.14;  author vertex;  state Exp;
branches ;
next     38.16;

38.16
date     91.11.26.14.28.14;  author vertex;  state Exp;
branches ;
next     38.15;

38.15
date     91.11.24.18.39.08;  author vertex;  state Exp;
branches ;
next     38.14;

38.14
date     91.11.11.14.11.02;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     91.11.11.12.55.11;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     91.11.07.10.12.23;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     91.11.06.18.00.49;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.11.04.13.26.17;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.10.25.09.31.04;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.10.24.16.28.04;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.09.26.09.12.18;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.09.20.10.12.16;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.20.09.43.22;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.12.13.42.42;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.06.18.20.22;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.06.14.22.29;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.08.05.17.11.12;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - ScreenMode custom interface
@


39.7
log
@Uses GTLV_MakeVisible when needed
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <devices/keymap.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <graphics/text.h>
#include <graphics/displayinfo.h>
#include <graphics/monitor.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/screenmode.h>
#include <dos/dos.h>
#include <dos/exall.h>
#include <string.h>
#include <stdio.h>
#include "V39:src/kickstart/graphics/displayinfo_internal.h"

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>
#include <clib/icon_protos.h>
#include <clib/locale_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/asl_pragmas.h>
#include <pragmas/icon_pragmas.h>
#include <pragmas/locale_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"


#define SysBase          ed->ed_SysBase
#define MONITOR_PART(id) ((id) & MONITOR_ID_MASK)


/*****************************************************************************/


struct DispMode
{
    struct Node dm_Node;
    ULONG       dm_ID;
    char        dm_Name[DISPLAYNAMELEN*2];
};

#define VISIBLESIZE_PID   0
#define MAXIMUMSIZE_PID   1
#define MINIMUMSIZE_PID   2
#define MAXIMUMCOLORS_PID 3
#define INTERLACE_PID     4
#define ECS_PID           5
#define GENLOCK_PID       6
#define NOGENLOCK_PID     7
#define DRAGGABLE_PID     8
#define NODRAGGABLE_PID   9
#define SPLIT_PID         10
#define SCANRATES_PID     11


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_SCRM,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
};


/*****************************************************************************/


/* private calls in gfx lib */
#pragma libcall GfxBase SetDisplayInfoData 2ee 2109805
#pragma libcall GfxBase AddDisplayInfoDataA 2e8 2109805

ULONG SetDisplayInfoData( DisplayInfoHandle handle, UBYTE * buf, ULONG size, ULONG tagID, ULONG displayID );
ULONG AddDisplayInfoDataA( DisplayInfoHandle handle, UBYTE * buf, ULONG size, ULONG tagID, ULONG displayID );


/*****************************************************************************/


VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj)
{
    ed->ed_PubScreenName = "Workbench";
}


/*****************************************************************************/


BOOL AddMode(EdDataPtr ed, struct List *list, ULONG modeID,
             struct DisplayInfo *dispInfo, struct DimensionInfo *dimInfo,
             struct NameInfo *nameInfo)
{
struct MonitorInfo  monInfo;
struct DispMode    *dm;
STRPTR              str1,str2;
ULONG               nomwidth, nomheight;
char                name[DISPLAYNAMELEN+1];
UWORD               len;
struct Node        *node;

    if (!(dm = AllocRemember(&ed->ed_Tracker,sizeof(struct DispMode),MEMF_CLEAR)))
	return(FALSE);

    dm->dm_ID = modeID;
    strncpy(dm->dm_Name,nameInfo->Name,DISPLAYNAMELEN);
    dm->dm_Node.ln_Name = dm->dm_Name;

    if (*dm->dm_Name == '\0')
    {
        name[0] = 0;
        if (GetDisplayInfoData(FindDisplayInfo(modeID),(APTR)&monInfo,sizeof(struct MonitorInfo),DTAG_MNTR,INVALID_ID))
        {
            if ((monInfo.Mspc) && (monInfo.Mspc->ms_Node.xln_Name))
            {
                strcpy(name,monInfo.Mspc->ms_Node.xln_Name);
                len = strlen(name);
                if ((len > 8) && (Stricmp(&name[len-8],".monitor")==0))
                    name[len-8] = 0;
                strcat(name,":");
                while (len>0)
                    name[--len] = ToUpper(name[len]);
            }
        }

	nomwidth  = dimInfo->Nominal.MaxX - dimInfo->Nominal.MinX + 1;
	nomheight = dimInfo->Nominal.MaxY - dimInfo->Nominal.MinY + 1;

	if (dispInfo->PropertyFlags & DIPF_IS_LACE)
        {
            str1 = " ";
	    str2 = GetString(&ed->ed_LocaleInfo,MSG_SM_INTERLACE_PROP);
	}
	else
	{
	    str1 = "";
	    str2 = "";
        }

        /* we need a length limited sprintf()! */
	sprintf(dm->dm_Name,"%s%lu x %lu%s%s",name,nomwidth,nomheight,str1,str2);
    }

    node = list->lh_Head;
    while (node->ln_Succ)
    {
        if (Stricmp(node->ln_Name,dm->dm_Node.ln_Name) >= 0)
            break;
        node = node->ln_Succ;
    }
    Insert(list,(struct Node *)dm,node->ln_Pred);

    return(TRUE);
}


/*****************************************************************************/


EdStatus BuildList(EdDataPtr ed, struct List *list)
{
ULONG                modeID;
struct NameInfo      nameInfo;
struct DimensionInfo dimInfo;
struct DisplayInfo   dispInfo;
DisplayInfoHandle    dh;

    NewList(list);

    modeID = INVALID_ID;
    while ((modeID = NextDisplayInfo(modeID)) != INVALID_ID)
    {
	if (MONITOR_PART(modeID) != DEFAULT_MONITOR_ID)
	{
            dh = FindDisplayInfo(modeID);

            nameInfo.Name[0] = '\0';
            GetDisplayInfoData(dh,(APTR)&nameInfo,sizeof(struct NameInfo),DTAG_NAME,INVALID_ID);

            if (GetDisplayInfoData(dh,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,INVALID_ID)
	    &&  GetDisplayInfoData(dh,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,INVALID_ID))
	    {
                if ((dispInfo.PropertyFlags & DIPF_IS_WB) && (!dispInfo.NotAvailable))
                {
		    if (!AddMode(ed,list,modeID,&dispInfo,&dimInfo,&nameInfo))
		    {
			return(ES_NO_MEMORY);
		    }
		}
	    }
	}
    }

    return(ES_NORMAL);
}


/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
UWORD i;

    for (i=0; i<10; i++)
        ed->ed_PropNodes[i].ln_Name = GetString(&ed->ed_LocaleInfo,i+MSG_SM_VISIBLESIZE_PROP);

    ed->ed_PropNodes[VISIBLESIZE_PID].ln_Name   = ed->ed_VisibleSize;
    ed->ed_PropNodes[MAXIMUMSIZE_PID].ln_Name   = ed->ed_MaximumSize;
    ed->ed_PropNodes[MINIMUMSIZE_PID].ln_Name   = ed->ed_MinimumSize;
    ed->ed_PropNodes[MAXIMUMCOLORS_PID].ln_Name = ed->ed_MaximumColors;
    ed->ed_PropNodes[SCANRATES_PID].ln_Name     = ed->ed_ScanRates;

    if (GfxBase->DisplayFlags & NTSC)
        ed->ed_PrefsDefaults.smp_DisplayID = HIRES_KEY | NTSC_MONITOR_ID;
    else if (GfxBase->DisplayFlags & PAL)
        ed->ed_PrefsDefaults.smp_DisplayID = HIRES_KEY | PAL_MONITOR_ID;

    ed->ed_PrefsDefaults.smp_Width     = -1;
    ed->ed_PrefsDefaults.smp_Height    = -1;
    ed->ed_PrefsDefaults.smp_Depth     = 2;
    ed->ed_PrefsDefaults.smp_Control   = 1;

    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

    NewList(&ed->ed_Properties);

    return(BuildList(ed,&ed->ed_DisplayModes));
}


/*****************************************************************************/


VOID CleanUpEdData(EdDataPtr ed)
{
    FreeRemember(&ed->ed_Tracker,TRUE);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (cn->cn_ID != ID_SCRM || cn->cn_Type != ID_PREF)
        return(ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct ScreenModePrefs)) == sizeof(struct ScreenModePrefs))
    {
        /* we do this for compatibility with <V39 prefs files */
        if (MONITOR_PART(ed->ed_PrefsWork.smp_DisplayID) == DEFAULT_MONITOR_ID)
        {
            if (GfxBase->DisplayFlags & NTSC)
                ed->ed_PrefsWork.smp_DisplayID |= NTSC_MONITOR_ID;
            else if (GfxBase->DisplayFlags & PAL)
                ed->ed_PrefsWork.smp_DisplayID |= PAL_MONITOR_ID;
        }

        return(ES_NORMAL);
    }

    return(ES_IFFERROR);
}


EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
{
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
}


/*****************************************************************************/


EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (!PushChunk(iff,0,ID_SCRM,sizeof(struct ScreenModePrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct ScreenModePrefs)) == sizeof(struct ScreenModePrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
{
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
}


/*****************************************************************************/


ULONG __stdargs DepthToColors(struct Gadget *gadget, WORD level)
{
    return ((ULONG)(1L << level));
}


/*****************************************************************************/


#define NW_WIDTH     596
#define NW_HEIGHT    182
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | IDCMP_INTUITICKS | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP | LISTVIEWIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

struct EdMenu far EM[] = {
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP,    0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN,   0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP,    0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP,      0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED,0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE,  0},

    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP,       0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},

    {NM_END,    MSG_NOTHING,                EC_NOP, 0}
};

/* main display gadgets */
struct EdGadget far EG[] = {
    {BUTTON_KIND,   8,   163,  87,  14, MSG_SAVE_GAD,           EC_SAVE,     0},
    {BUTTON_KIND,   254, 163,  87,  14, MSG_USE_GAD,            EC_USE,      0},
    {BUTTON_KIND,   501, 163,  87,  14, MSG_CANCEL_GAD,         EC_CANCEL,   0},

    {LISTVIEW_KIND, 8,   18,  296, 78, MSG_SM_DISPLAY_MODE_GAD, EC_MODELIST,  0},
    {INTEGER_KIND,  106, 95,  68,  14, MSG_SM_WIDTH_GAD,        EC_WIDTH,     0},
    {INTEGER_KIND,  106, 111, 68,  14, MSG_SM_HEIGHT_GAD,       EC_HEIGHT,    0},
    {CHECKBOX_KIND, 182, 97,  90,  11, MSG_SM_DEFAULT_GAD,      EC_DEFWIDTH,  PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 182, 113, 90,  11, MSG_SM_DEFAULT_GAD,      EC_DEFHEIGHT, PLACETEXT_RIGHT},
    {SLIDER_KIND,   138, 129, 166, 11, MSG_SM_COLORS_GAD,       EC_COLORS,    0},
    {CHECKBOX_KIND, 106, 143, 90,  11, MSG_SM_AUTOSCROLL_GAD,   EC_AUTOSCROLL,0}
};


/*****************************************************************************/


BOOL CreateDisplay(EdDataPtr ed)
{
UWORD zoomSize[4];

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);

    RenderGadgets(ed);

    if ((ed->ed_LastAdded)
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SM_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
    {
        return(TRUE);
    }

    DisposeDisplay(ed);
    return(FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay(EdDataPtr ed)
{
    if (ed->ed_Window)
    {
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
    }
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/


VOID CenterLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
            window->BorderTop+y);
    Text(rp,str,len);
}


/*****************************************************************************/


VOID DrawBB(EdDataPtr ed, SHORT x, SHORT y, SHORT w, SHORT h, ULONG tags, ...)
{
    DrawBevelBoxA(ed->ed_Window->RPort,x+ed->ed_Window->BorderLeft,
                                       y+ed->ed_Window->BorderTop,
                                       w,h,(struct TagItem *)&tags);
}


/*****************************************************************************/


VOID RenderProps(EdDataPtr ed)
{
struct DispMode *node;
UWORD            y;

    y    = 30+window->BorderTop;
    node = (struct DispMode *)ed->ed_Properties.lh_Head;
    while (y < 150)
    {
        Move(window->RPort,325+window->BorderLeft,y);

        if (node->dm_Node.ln_Succ)
        {
            if (node->dm_Node.ln_Name)
                Text(window->RPort,node->dm_Node.ln_Name,strlen(node->dm_Node.ln_Name));
            node = (struct DispMode *)node->dm_Node.ln_Succ;
        }

        if (window->RPort->cp_x < 585+window->BorderLeft)
        {
            SetAPen(window->RPort,0);
            RectFill(window->RPort,window->RPort->cp_x,    y-6,
                                   585+window->BorderLeft, y+1);
            SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);
        }

        y += 9;
    }
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
{
    SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);
    SetBPen(window->RPort,ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);
    SetDrMd(window->RPort,JAM2);

    CenterLine(ed,window->RPort,MSG_SM_PROPS_GAD,318,12,270);
    DrawBB(ed,318,18,270,135,GTBB_Recessed, TRUE,
                             GT_VisualInfo, ed->ed_VisualInfo,
                             TAG_DONE);
    RenderProps(ed);
}


/*****************************************************************************/


VOID DoRenderGadgets(EdDataPtr ed, BOOL full)
{
struct DispMode      *node;
struct DimensionInfo  dimInfo;
struct DisplayInfo    dispInfo;
struct MonitorInfo    monInfo;
struct List          *list;
WORD                  minWidth,maxWidth,defWidth,curWidth;
WORD                  minHeight,maxHeight,defHeight,curHeight;
WORD                  maxDepth;
WORD                  nodeNum;
ULONG                 props;
DisplayInfoHandle     dh;
struct MonitorSpec   *mspec;
ULONG                 vscan;
ULONG                 hscan;
ULONG                 hscandec;
ULONG                 visTag;
STRPTR                decPoint;
struct Locale        *locale;

    nodeNum = 0;
    node    = (struct DispMode *)ed->ed_DisplayModes.lh_Head;
    while (node->dm_Node.ln_Succ && (node->dm_ID != ed->ed_PrefsWork.smp_DisplayID))
    {
        node = (struct DispMode *)node->dm_Node.ln_Succ;
        nodeNum++;
    }

    if (!node->dm_Node.ln_Succ)
    {
        nodeNum                        = 0;
        node                           = (struct DispMode *)ed->ed_DisplayModes.lh_Head;
        ed->ed_PrefsWork.smp_DisplayID = node->dm_ID;
    }

    dh = FindDisplayInfo(node->dm_ID);
    GetDisplayInfoData(dh,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,INVALID_ID);
    GetDisplayInfoData(dh,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,INVALID_ID);
    GetDisplayInfoData(dh,(APTR)&monInfo,sizeof(struct MonitorInfo),DTAG_MNTR,INVALID_ID);

    defWidth    = dimInfo.TxtOScan.MaxX - dimInfo.TxtOScan.MinX + 1;
    defHeight   = dimInfo.TxtOScan.MaxY - dimInfo.TxtOScan.MinY + 1;
    minWidth    = dimInfo.MinRasterWidth;
    maxWidth    = dimInfo.MaxRasterWidth;
    minHeight   = dimInfo.MinRasterHeight;
    maxHeight   = dimInfo.MaxRasterHeight;
    maxDepth    = dimInfo.MaxDepth;
    curWidth    = defWidth;
    curHeight   = defHeight;

    if (ed->ed_PrefsWork.smp_Width != -1)
        curWidth = ed->ed_PrefsWork.smp_Width;

    if (ed->ed_PrefsWork.smp_Height != -1)
        curHeight = ed->ed_PrefsWork.smp_Height;

    if (minWidth < 640)
        minWidth = 640;

    if (minHeight < 200)
        minHeight = 200;

    if (curWidth < minWidth)
        curWidth = minWidth;

    if (curWidth > maxWidth)
        curWidth = maxWidth;

    if (curHeight < minHeight)
        curHeight = minHeight;

    if (curHeight > maxHeight)
        curHeight = maxHeight;

    if (ed->ed_PrefsWork.smp_Depth > maxDepth)
        ed->ed_PrefsWork.smp_Depth = maxDepth;

    if ((node != ed->ed_LastMode) || (!ed->ed_ModeList))
    {
        if (ed->ed_ModeList)
        {
            visTag = GTLV_MakeVisible;
            if (!full)
                visTag = TAG_IGNORE;

            DoPrefsGadget(ed,&EG[3],ed->ed_ModeList,GTLV_ShowSelected, NULL,
                                                    GTLV_Labels,       &ed->ed_DisplayModes,
                                                    LAYOUTA_SPACING,   1,
                                                    GTLV_ScrollWidth,  18,
                                                    GTLV_Selected,     nodeNum,
                                                    visTag,            nodeNum,
                                                    TAG_DONE);
        }
        else
        {
            ed->ed_ModeList = DoPrefsGadget(ed,&EG[3],ed->ed_ModeList,
                                                      GTLV_ShowSelected, NULL,
                                                      GTLV_Labels,       &ed->ed_DisplayModes,
                                                      LAYOUTA_SPACING,   1,
                                                      GTLV_ScrollWidth,  18,
                                                      GTLV_Selected,     nodeNum,
                                                      GTLV_MakeVisible,  nodeNum,
                                                      TAG_DONE);
        }

        ed->ed_LastMode = node;

        sprintf(ed->ed_VisibleSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_VISIBLESIZE_PROP),(ULONG)defWidth,(ULONG)defHeight);
        sprintf(ed->ed_MaximumSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_MAXSIZE_PROP),(ULONG)maxWidth,(ULONG)maxHeight);
        sprintf(ed->ed_MinimumSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_MINSIZE_PROP),(ULONG)minWidth,(ULONG)minHeight);
        sprintf(ed->ed_MaximumColors,GetString(&ed->ed_LocaleInfo,MSG_SM_MAXCOLORS_PROP),(ULONG)1<<maxDepth);

        list  = &ed->ed_Properties;
        props = dispInfo.PropertyFlags;
        NewList(list);
        AddTail(list,&ed->ed_PropNodes[VISIBLESIZE_PID]);
        AddTail(list,&ed->ed_PropNodes[MINIMUMSIZE_PID]);
        AddTail(list,&ed->ed_PropNodes[MAXIMUMSIZE_PID]);
        AddTail(list,&ed->ed_PropNodes[MAXIMUMCOLORS_PID]);
        AddTail(list,&ed->ed_PropNodes[SPLIT_PID]);

        if (props & DIPF_IS_LACE)
            AddTail(list,&ed->ed_PropNodes[INTERLACE_PID]);

        if (props & DIPF_IS_ECS)
            AddTail(list,&ed->ed_PropNodes[ECS_PID]);

        if (props & DIPF_IS_GENLOCK)
            AddTail(list,&ed->ed_PropNodes[GENLOCK_PID]);
        else
            AddTail(list,&ed->ed_PropNodes[NOGENLOCK_PID]);

        if (props & DIPF_IS_DRAGGABLE)
            AddTail(list,&ed->ed_PropNodes[DRAGGABLE_PID]);
        else
            AddTail(list,&ed->ed_PropNodes[NODRAGGABLE_PID]);

        decPoint = ".";
        locale   = NULL;
        if (LocaleBase)
        {
            locale = OpenLocale(NULL);
            decPoint = locale->loc_DecimalPoint;
        }

        mspec = monInfo.Mspc;
        vscan = 1000000000 / ((ULONG)mspec->total_colorclocks * 280 * (ULONG)mspec->total_rows);
        hscan = vscan * mspec->total_rows;
        hscandec = (hscan % 1000) / 10;
        hscan = hscan / 1000;
        sprintf(ed->ed_ScanRates,"%luHz, %lu%s%02lukHz",vscan,hscan,decPoint,hscandec);
        AddTail(list,&ed->ed_PropNodes[SCANRATES_PID]);

        if (locale)
            CloseLocale(locale);

        if (ed->ed_Window)
            RenderProps(ed);
    }

    ed->ed_Width = DoPrefsGadget(ed,&EG[4],ed->ed_Width,
                                           GTIN_MaxChars, 6,
                                           GTIN_Number,   curWidth,
                                           GA_Disabled,   (ed->ed_PrefsWork.smp_Width == -1),
                                           TAG_DONE);

    ed->ed_Height = DoPrefsGadget(ed,&EG[5],ed->ed_Height,
                                            GTIN_MaxChars, 6,
                                            GTIN_Number,   curHeight,
                                            GA_Disabled,   (ed->ed_PrefsWork.smp_Height == -1),
                                            TAG_DONE);

    ed->ed_DefWidth = DoPrefsGadget(ed,&EG[6],ed->ed_DefWidth,
                                              GTCB_Checked,(ed->ed_PrefsWork.smp_Width == -1),
                                              TAG_DONE);

    ed->ed_DefHeight = DoPrefsGadget(ed,&EG[7],ed->ed_DefHeight,
                                               GTCB_Checked,(ed->ed_PrefsWork.smp_Height == -1),
                                               TAG_DONE);

    ed->ed_Colors = DoPrefsGadget(ed,&EG[8],ed->ed_Colors,
                                            GTSL_MaxLevelLen, 10,
                                            GTSL_LevelFormat, "%3lu",
                                            GTSL_DispFunc,    (ULONG)DepthToColors,
                                            GTSL_Level,       (WORD)ed->ed_PrefsWork.smp_Depth,
                                            GTSL_Min,         1,
                                            GTSL_Max,         maxDepth,
                                            GA_Immediate,     TRUE,
                                            TAG_DONE);

    ed->ed_AutoScroll = DoPrefsGadget(ed,&EG[9],ed->ed_AutoScroll,
                                                GTCB_Checked,ed->ed_PrefsWork.smp_Control & 1,
                                                TAG_DONE);
}


/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
    DoRenderGadgets(ed,TRUE);
}


/*****************************************************************************/


VOID ProcessTextGadget(EdDataPtr ed, EdCommand ec, BOOL screenStuff)
{
LONG                  num;
struct Gadget        *act;
BOOL                  beep;
struct DimensionInfo  dimInfo;
WORD                  maxWidth, maxHeight;
WORD                  minWidth, minHeight;

    GetDisplayInfoData(FindDisplayInfo(ed->ed_PrefsWork.smp_DisplayID),(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,INVALID_ID);

    minWidth  = dimInfo.MinRasterWidth;
    maxWidth  = dimInfo.MaxRasterWidth;
    minHeight = dimInfo.MinRasterHeight;
    maxHeight = dimInfo.MaxRasterHeight;

    if (minWidth < 640)
        minWidth = 640;

    if (minHeight < 200)
        minHeight = 200;

    beep = FALSE;
    act  = NULL;
    switch (ec)
    {
        case EC_WIDTH      : num = ((struct StringInfo *)ed->ed_Width->SpecialInfo)->LongInt;
                             if (num < minWidth)
                             {
                                 num  = minWidth;
                                 act  = ed->ed_Width;
                                 beep = TRUE;
                             }
                             else if (num > maxWidth)
                             {
                                 num  = maxWidth;
                                 act  = ed->ed_Width;
                                 beep = TRUE;
                             }
                             else if (ed->ed_PrefsWork.smp_Height != -1)
                             {
                                 act = ed->ed_Height;
                             }

                             if (screenStuff)
                             {
                                 ed->ed_PrefsWork.smp_Width = num;
                                 if (beep)
                                 {
                                     SetGadgetAttr(ed,ed->ed_Width,GTIN_Number,num,
                                                                   TAG_DONE);
                                 }
                             }
                             else if (ed->ed_PrefsWork.smp_Width != -1)
                             {
                                 ed->ed_PrefsWork.smp_Width = num;
                             }
                             break;

        case EC_HEIGHT     : num = ((struct StringInfo *)ed->ed_Height->SpecialInfo)->LongInt;
                             if (num < minHeight)
                             {
                                 num  = minHeight;
                                 act  = ed->ed_Height;
                                 beep = TRUE;
                             }

                             else if (num > maxHeight)
                             {
                                 num  = maxHeight;
                                 act  = ed->ed_Height;
                                 beep = TRUE;
                             }
                             else if (ed->ed_PrefsWork.smp_Width != -1)
                             {
                                 act = ed->ed_Width;
                             }

                             if (screenStuff)
                             {
                                 ed->ed_PrefsWork.smp_Height = num;
                                 if (beep)
                                 {
                                     SetGadgetAttr(ed,ed->ed_Height,GTIN_Number,num,
                                                                    TAG_DONE);
                                 }
                             }
                             else if (ed->ed_PrefsWork.smp_Height != -1)
                             {
                                 ed->ed_PrefsWork.smp_Height = num;
                             }
                             break;
    }

    if (screenStuff)
    {
        if (act)
            ActivateGadget(act,window,NULL);

        if (beep)
            DisplayBeep(window->WScreen);
    }
}


/*****************************************************************************/


VOID SyncTextGadgets(EdDataPtr ed)
{
    ProcessTextGadget(ed,EC_WIDTH,FALSE);
    ProcessTextGadget(ed,EC_HEIGHT,FALSE);
}


/*****************************************************************************/


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD            icode;
struct DispMode *node;
struct Gadget   *gadget;

    icode  = ed->ed_CurrentMsg.Code;
    gadget = ed->ed_CurrentMsg.IAddress;

    switch (ec)
    {
        case EC_MODELIST   : node = (struct DispMode *)ed->ed_DisplayModes.lh_Head;
                             while (icode--)
                                 node = (struct DispMode *)node->dm_Node.ln_Succ;
                             ed->ed_PrefsWork.smp_DisplayID = node->dm_ID;
                             DoRenderGadgets(ed,FALSE);
                             break;

        case EC_COLORS     : ed->ed_PrefsWork.smp_Depth = icode;
                             break;

        case EC_WIDTH      :
        case EC_HEIGHT     : ProcessTextGadget(ed,ec,TRUE);
                             break;

        case EC_DEFWIDTH   : if (SELECTED & gadget->Flags)
                             {
                                 ed->ed_PrefsWork.smp_Width = -1;
                                 DoRenderGadgets(ed,FALSE);
                             }
                             else
                             {
                                 ed->ed_PrefsWork.smp_Width = ((struct StringInfo *) (ed->ed_Width->SpecialInfo))->LongInt;
                                 SetGadgetAttr(ed,ed->ed_Width,GA_Disabled,FALSE,
                                                               TAG_DONE);
                                 ActivateGadget(ed->ed_Width,window,NULL);
                             }
                             break;

        case EC_DEFHEIGHT  : if (SELECTED & gadget->Flags)
                             {
                                 ed->ed_PrefsWork.smp_Height = -1;
                                 DoRenderGadgets(ed,FALSE);
                             }
                             else
                             {
                                 ed->ed_PrefsWork.smp_Height = ((struct StringInfo *) (ed->ed_Height->SpecialInfo))->LongInt;
                                 SetGadgetAttr(ed,ed->ed_Height,GA_Disabled,FALSE,
                                                                TAG_DONE);
                                 ActivateGadget(ed->ed_Height,window,NULL);
                             }
                             break;

        case EC_AUTOSCROLL : ed->ed_PrefsWork.smp_Control &= ~1;
                             if (ed->ed_AutoScroll->Flags & SELECTED)
                             {
                                 ed->ed_PrefsWork.smp_Control |= 1;
                             }
                             break;

        default            : break;
    }
}


/*****************************************************************************/


VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{
    state->cs_Available = TRUE;
    state->cs_Selected  = FALSE;
}
@


39.6
log
@Fixed formatting string for horizontal scan rate so it prints 29.02 as such
  instead of 29.2
@
text
@d537 1
a537 1
VOID RenderGadgets(EdDataPtr ed)
d554 1
d619 4
d628 1
d639 1
a639 1
                                                      GTLV_Top,          nodeNum,
d737 9
d879 1
a879 1
                             RenderGadgets(ed);
d892 1
a892 1
                                 RenderGadgets(ed);
d906 1
a906 1
                                 RenderGadgets(ed);
@


39.5
log
@*** empty log message ***
@
text
@d682 1
a682 1
        sprintf(ed->ed_ScanRates,"%luHz, %lu%s%lukHz",vscan,hscan,decPoint,hscandec);
@


39.4
log
@*** empty log message ***
@
text
@a622 1
                                                    GA_Disabled,       ed->ed_PrefsWork.smp_Width == (-1),
d897 1
a897 1
                                                               TAG_DONE);
@


39.3
log
@Fixed reset to default 
@
text
@d623 1
@


39.2
log
@Can now load V38 screen mode prefs files
@
text
@d258 5
a262 1
    ed->ed_PrefsDefaults.smp_DisplayID = HIRES_KEY;
@


39.1
log
@Now skips default monitor instead of skipping PAL or NTSC
@
text
@d258 5
a262 5
    ed->ed_PrefsDefaults.sm_DisplayID = HIRES_KEY;
    ed->ed_PrefsDefaults.sm_Width     = -1;
    ed->ed_PrefsDefaults.sm_Height    = -1;
    ed->ed_PrefsDefaults.sm_Depth     = 2;
    ed->ed_PrefsDefaults.sm_Control   = 1;
d291 10
d302 1
d555 1
a555 1
    while (node->dm_Node.ln_Succ && (node->dm_ID != ed->ed_PrefsWork.sm_DisplayID))
d563 3
a565 3
        nodeNum                       = 0;
        node                          = (struct DispMode *)ed->ed_DisplayModes.lh_Head;
        ed->ed_PrefsWork.sm_DisplayID = node->dm_ID;
d583 2
a584 2
    if (ed->ed_PrefsWork.sm_Width != -1)
        curWidth = ed->ed_PrefsWork.sm_Width;
d586 2
a587 2
    if (ed->ed_PrefsWork.sm_Height != -1)
        curHeight = ed->ed_PrefsWork.sm_Height;
d607 2
a608 2
    if (ed->ed_PrefsWork.sm_Depth > maxDepth)
        ed->ed_PrefsWork.sm_Depth = maxDepth;
d691 1
a691 1
                                           GA_Disabled,   (ed->ed_PrefsWork.sm_Width == -1),
d697 1
a697 1
                                            GA_Disabled,   (ed->ed_PrefsWork.sm_Height == -1),
d701 1
a701 1
                                              GTCB_Checked,(ed->ed_PrefsWork.sm_Width == -1),
d705 1
a705 1
                                               GTCB_Checked,(ed->ed_PrefsWork.sm_Height == -1),
d712 1
a712 1
                                            GTSL_Level,       (WORD)ed->ed_PrefsWork.sm_Depth,
d719 1
a719 1
                                                GTCB_Checked,ed->ed_PrefsWork.sm_Control & 1,
d736 1
a736 1
    GetDisplayInfoData(FindDisplayInfo(ed->ed_PrefsWork.sm_DisplayID),(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,INVALID_ID);
d766 1
a766 1
                             else if (ed->ed_PrefsWork.sm_Height != -1)
d773 1
a773 1
                                 ed->ed_PrefsWork.sm_Width = num;
d780 1
a780 1
                             else if (ed->ed_PrefsWork.sm_Width != -1)
d782 1
a782 1
                                 ed->ed_PrefsWork.sm_Width = num;
d800 1
a800 1
                             else if (ed->ed_PrefsWork.sm_Width != -1)
d807 1
a807 1
                                 ed->ed_PrefsWork.sm_Height = num;
d814 1
a814 1
                             else if (ed->ed_PrefsWork.sm_Height != -1)
d816 1
a816 1
                                 ed->ed_PrefsWork.sm_Height = num;
d859 1
a859 1
                             ed->ed_PrefsWork.sm_DisplayID = node->dm_ID;
d863 1
a863 1
        case EC_COLORS     : ed->ed_PrefsWork.sm_Depth = icode;
d872 1
a872 1
                                 ed->ed_PrefsWork.sm_Width = -1;
d877 1
a877 1
                                 ed->ed_PrefsWork.sm_Width = ((struct StringInfo *) (ed->ed_Width->SpecialInfo))->LongInt;
d886 1
a886 1
                                 ed->ed_PrefsWork.sm_Height = -1;
d891 1
a891 1
                                 ed->ed_PrefsWork.sm_Height = ((struct StringInfo *) (ed->ed_Height->SpecialInfo))->LongInt;
d898 1
a898 1
        case EC_AUTOSCROLL : ed->ed_PrefsWork.sm_Control &= ~1;
d901 1
a901 1
                                 ed->ed_PrefsWork.sm_Control |= 1;
@


38.33
log
@*** empty log message ***
@
text
@a206 1
ULONG                skipID;
a213 6
    /* avoid duplicating default.monitor entries when iterating */
    if (GfxBase->DisplayFlags & NTSC)
	skipID = NTSC_MONITOR_ID;
    else if (GfxBase->DisplayFlags & PAL)
	skipID =  PAL_MONITOR_ID;

d217 1
a217 1
	if (MONITOR_PART(modeID) != skipID)
@


38.32
log
@Renders the property list using JAM2

Activates the string gadget when clicking on the Default checkbox.
@
text
@d890 1
a890 1
                                 ActivateGadget(ed->ed_Width,window,NULL);
@


38.31
log
@*** empty log message ***
@
text
@d516 1
d876 1
d890 1
@


38.30
log
@Removed WA_Left and WA_Top
@
text
@d393 2
a394 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
@


38.29
log
@Fixed default gadget
@
text
@a341 2
#define NW_LEFT      0
#define NW_TOP       0
d407 1
a407 3
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
@


38.28
log
@Changed KHz to kHz
@
text
@d749 1
d765 1
a765 1
                             else
d792 1
d799 1
a799 1
                             else
d822 3
a824 1
        ActivateGadget(act,window,NULL);
a825 1
        {
a826 1
        }
@


38.27
log
@Added display of scan rate and refresh rate of the current mode in the property
  display area
@
text
@d677 1
a677 1
        sprintf(ed->ed_ScanRates,"%luHz, %lu%s%luKHz",vscan,hscan,decPoint,hscandec);
@


38.26
log
@Removed the monitor naming code
@
text
@d14 1
d82 1
d263 1
d537 1
d545 6
d570 1
d663 19
@


38.25
log
@Now names the modes on startup
Now ghosts the Width/Height gadgets whenever the Default gadgets are checked
@
text
@a209 4
struct Catalog      *catalog;
struct RawNameInfo   info;
struct QueryHeader   header;
STRPTR               modeName;
a212 4
    catalog = NULL;
    if (LocaleBase)
        catalog = OpenCatalogA(NULL,"sys/monitors.catalog",NULL);

a221 26
        dh = FindDisplayInfo(modeID);

        if (catalog)
        {
            if (GetDisplayInfoData(dh,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,INVALID_ID))
            {
                if (!dispInfo.NotAvailable)
                {
                    if (GetDisplayInfoData(dh,(APTR)&header,sizeof(header),DTAG_NAME,INVALID_ID))
                    {
                        if (modeName = GetCatalogStr(catalog,modeID,NULL))
                        {
                            memset(&info,0,sizeof(info));
                            info.Header.StructID  = DTAG_NAME;
                            info.Header.SkipID    = TAG_SKIP;
                            info.Header.Length    = 4;
                            info.Header.DisplayID = modeID;
                            strncpy(info.Name,modeName,sizeof(info.Name));

                            SetDisplayInfoData(NULL,(APTR)&info,sizeof(info),DTAG_NAME,modeID);
                        }
                    }
                }
            }
        }

d224 2
a241 3

    if (LocaleBase)
        CloseCatalog(catalog);
@


38.24
log
@Correctly picks up changes to string gadgets even when the user doesn't hit RETURN in
  them
@
text
@d22 1
d35 1
d47 1
d112 11
d210 4
d217 4
d230 26
a258 1
            dh = FindDisplayInfo(modeID);
d275 3
d695 1
d701 1
a773 1
                             ed->ed_PrefsWork.sm_Width = num;
d776 1
a781 2
                                 SetGadgetAttr(ed,ed->ed_DefWidth,GTCB_Checked,FALSE,
                                                                  TAG_DONE);
d783 4
a806 1
                             ed->ed_PrefsWork.sm_Height = num;
d809 1
d815 4
a818 2
                                 SetGadgetAttr(ed,ed->ed_DefHeight,GTCB_Checked,FALSE,
                                                                   TAG_DONE);
d880 2
d893 2
@


38.23
log
@Positions the selected screen mode in the visible region of the listview when the
  program is first brought up
@
text
@d722 1
a724 1
                                 ed->ed_PrefsWork.sm_Width = num;
d753 1
a755 1
                                 ed->ed_PrefsWork.sm_Height = num;
@


38.22
log
@No longer call GetDisplayInfoData() with a NULL first argument, as this is broken in
  KS 37.175
@
text
@d585 20
a604 7
        ed->ed_ModeList = DoPrefsGadget(ed,&EG[3],ed->ed_ModeList,
                                                  GTLV_ShowSelected, NULL,
                                                  GTLV_Labels,       &ed->ed_DisplayModes,
                                                  LAYOUTA_SPACING,   1,
                                                  GTLV_ScrollWidth,  18,
                                                  GTLV_Selected,     nodeNum,
                                                  TAG_DONE);
@


38.21
log
@*** empty log message ***
@
text
@d140 1
a140 1
        if (GetDisplayInfoData(NULL,(APTR)&monInfo,sizeof(struct MonitorInfo),DTAG_MNTR,modeID))
d195 1
d211 2
a212 1
            GetDisplayInfoData(NULL,(APTR)&nameInfo,sizeof(struct NameInfo),DTAG_NAME,modeID);
d214 2
a215 2
            if (GetDisplayInfoData(NULL,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,modeID)
	    &&  GetDisplayInfoData(NULL,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,modeID))
d525 1
d542 3
a544 2
    GetDisplayInfoData(NULL,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,node->dm_ID);
    GetDisplayInfoData(NULL,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,node->dm_ID);
d675 1
a675 1
    GetDisplayInfoData(NULL,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,ed->ed_PrefsWork.sm_DisplayID);
@


38.20
log
@*** empty log message ***
@
text
@d363 1
a363 1
    {SLIDER_KIND,   194, 129, 110, 11, MSG_SM_COLORS_GAD,       EC_COLORS,    0},
a522 1
STRPTR                colorFormat;
a523 4
    colorFormat = "%10lu";
    if (ed->ed_LocaleInfo.li_LocaleBase)
        colorFormat = "%10lU";

d645 1
a645 1
                                            GTSL_LevelFormat, (ULONG)colorFormat,
@


38.19
log
@*** empty log message ***
@
text
@d64 1
a64 1
    char        dm_Name[DISPLAYNAMELEN];
d134 1
a134 1
    stccpy(dm->dm_Name,nameInfo->Name, DISPLAYNAMELEN);
d168 1
@


38.18
log
@Changes behavior of Default gadgets
@
text
@d60 1
a60 1
struct DisplayMode
d123 1
a123 1
struct DisplayMode *dm;
d130 1
a130 1
    if (!(dm = AllocRemember(&ed->ed_Tracker,sizeof(struct DisplayMode),MEMF_CLEAR)))
d463 2
a464 2
struct DisplayMode *node;
UWORD               y;
d467 1
a467 1
    node = (struct DisplayMode *)ed->ed_Properties.lh_Head;
d476 1
a476 1
            node = (struct DisplayMode *)node->dm_Node.ln_Succ;
d513 1
a513 1
struct DisplayMode   *node;
d529 1
a529 1
    node    = (struct DisplayMode *)ed->ed_DisplayModes.lh_Head;
d532 1
a532 1
        node = (struct DisplayMode *)node->dm_Node.ln_Succ;
d539 1
a539 1
        node                          = (struct DisplayMode *)ed->ed_DisplayModes.lh_Head;
d780 3
a782 3
UWORD               icode;
struct DisplayMode *node;
struct Gadget      *gadget;
d789 1
a789 1
        case EC_MODELIST   : node = (struct DisplayMode *)ed->ed_DisplayModes.lh_Head;
d791 1
a791 1
                                 node = (struct DisplayMode *)node->dm_Node.ln_Succ;
@


38.17
log
@Now keeps mode list in alphabetical order
@
text
@d546 9
a554 9
    defWidth  = dimInfo.TxtOScan.MaxX - dimInfo.TxtOScan.MinX + 1;
    defHeight = dimInfo.TxtOScan.MaxY - dimInfo.TxtOScan.MinY + 1;
    minWidth  = dimInfo.MinRasterWidth;
    maxWidth  = dimInfo.MaxRasterWidth;
    minHeight = dimInfo.MinRasterHeight;
    maxHeight = dimInfo.MaxRasterHeight;
    maxDepth  = dimInfo.MaxDepth;
    curWidth  = defWidth;
    curHeight = defHeight;
a579 6
    if (curWidth != defWidth)
        ed->ed_PrefsWork.sm_Width = curWidth;

    if (curHeight != defHeight)
        ed->ed_PrefsWork.sm_Height = curHeight;

a671 1
WORD                  defWidth, defHeight;
a676 2
    defWidth  = dimInfo.TxtOScan.MaxX - dimInfo.TxtOScan.MinX + 1;
    defHeight = dimInfo.TxtOScan.MaxY - dimInfo.TxtOScan.MinY + 1;
a760 8
    }
    else
    {
        if (((struct StringInfo *)(ed->ed_Width->SpecialInfo))->LongInt != defWidth)
            ed->ed_PrefsWork.sm_Width = ((struct StringInfo *) (ed->ed_Width->SpecialInfo))->LongInt;

        if (((struct StringInfo *)(ed->ed_Height->SpecialInfo))->LongInt != defHeight)
            ed->ed_PrefsWork.sm_Height = ((struct StringInfo *) (ed->ed_Height->SpecialInfo))->LongInt;
@


38.16
log
@Made property window larger for localization
@
text
@d128 1
d171 8
a178 1
    AddTail(list,(struct Node *)dm);
@


38.15
log
@*** empty log message ***
@
text
@d315 1
a315 1
#define NW_WIDTH     590
d346 2
a347 2
    {BUTTON_KIND,   251, 163,  87,  14, MSG_USE_GAD,            EC_USE,      0},
    {BUTTON_KIND,   495, 163,  87,  14, MSG_CANCEL_GAD,         EC_CANCEL,   0},
d471 7
a477 4
        SetAPen(window->RPort,0);
        RectFill(window->RPort,window->RPort->cp_x,    y-6,
                               579+window->BorderLeft, y+1);
        SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);
d492 2
a493 2
    CenterLine(ed,window->RPort,MSG_SM_PROPS_GAD,318,12,264);
    DrawBB(ed,318,18,264,135,GTBB_Recessed, TRUE,
@


38.14
log
@*** empty log message ***
@
text
@a541 9

    ed->ed_DefWidth = DoPrefsGadget(ed,&EG[6],ed->ed_DefWidth,
                                              GTCB_Checked,(ed->ed_PrefsWork.sm_Width == -1),
                                              TAG_DONE);

    ed->ed_DefHeight = DoPrefsGadget(ed,&EG[7],ed->ed_DefHeight,
                                               GTCB_Checked,(ed->ed_PrefsWork.sm_Height == -1),
                                               TAG_DONE);

d569 6
d633 8
@


38.13
log
@Changes for new prefs shell
Now bounds check the Width and Height string gadget values
@
text
@d644 1
@


38.12
log
@Restored filtering of default monitor to match 2.04 behavior
@
text
@d655 1
a655 1
VOID SyncTextGadgets(EdDataPtr ed)
d657 3
d662 2
d669 62
d732 35
a766 2
    if (((struct StringInfo *)(ed->ed_Width->SpecialInfo))->LongInt != defWidth)
        ed->ed_PrefsWork.sm_Width = ((struct StringInfo *) (ed->ed_Width->SpecialInfo))->LongInt;
d768 4
a771 2
    if (((struct StringInfo *)(ed->ed_Height->SpecialInfo))->LongInt != defHeight)
        ed->ed_PrefsWork.sm_Height = ((struct StringInfo *) (ed->ed_Height->SpecialInfo))->LongInt;
d799 2
a800 10
        case EC_WIDTH      : ed->ed_PrefsWork.sm_Width = ((struct StringInfo *) (gadget->SpecialInfo))->LongInt;
                             SetGadgetAttr(ed,ed->ed_DefWidth,GTCB_Checked,FALSE,
                                                              TAG_DONE);
                             ActivateGadget(ed->ed_Height,window,NULL);
                             break;

        case EC_HEIGHT     : ed->ed_PrefsWork.sm_Height = ((struct StringInfo *) (gadget->SpecialInfo))->LongInt;
                             SetGadgetAttr(ed,ed->ed_DefHeight,GTCB_Checked,FALSE,
                                                               TAG_DONE);
                             ActivateGadget(ed->ed_Width,window,NULL);
a833 9
}


/*****************************************************************************/


EdCommand GetCommand(EdDataPtr ed)
{
    return(EC_NOP);
@


38.11
log
@*** empty log message ***
@
text
@d182 1
d189 6
d198 1
a198 1
	if (MONITOR_PART(modeID))
@


38.10
log
@Better mode naming code
Simpler code to avoid default monitor
@
text
@@


38.9
log
@Removed previous change...
@
text
@d53 2
a54 1
#define SysBase ed->ed_SysBase
d118 1
a118 1
BOOL AddMode(EdDataPtr ed, struct List *list, ULONG id,
d122 1
d125 3
a127 1
LONG                nomwidth, nomheight;
d132 1
a132 1
    dm->dm_ID = id;
d138 15
d158 1
a158 1
            str1 = ", ";
d167 1
a167 1
	sprintf(dm->dm_Name,"%lu x %lu%s%s", (LONG)nomwidth, (LONG)nomheight,str1,str2);
d181 1
a181 2
ULONG                next;
ULONG                skip = INVALID_ID;
d188 2
a189 8
    /* avoid duplicating default.monitor entries when iterating */
    if (GfxBase->DisplayFlags & NTSC)
	skip = NTSC_MONITOR_ID;
    else if (GfxBase->DisplayFlags & PAL)
	skip =  PAL_MONITOR_ID;

    next = INVALID_ID;
    while ((next = NextDisplayInfo(next)) != INVALID_ID)
d191 1
a191 1
	if ((next & MONITOR_ID_MASK) != skip)
d194 1
a194 1
            GetDisplayInfoData(NULL,(APTR)&nameInfo,sizeof(struct NameInfo),DTAG_NAME,next);
d196 2
a197 2
            if (GetDisplayInfoData(NULL,(APTR)&dispInfo,sizeof(struct DisplayInfo),DTAG_DISP,next)
	    &&  GetDisplayInfoData(NULL,(APTR)&dimInfo,sizeof(struct DimensionInfo),DTAG_DIMS,next))
d201 1
a201 1
		    if (!AddMode(ed,list,next,&dispInfo,&dimInfo,&nameInfo))
@


38.8
log
@Now makes sure current mode is visible in listview when first loading up
@
text
@a569 1
                                                  GTLV_Top,          nodeNum,
@


38.7
log
@Corrected problems with handling of the default gadgets
@
text
@d570 1
@


38.6
log
@Added SyncTextGadgets() support
Changes for new pe_iff
@
text
@d423 1
a423 2
VOID DrawBB(EdDataPtr ed, SHORT x, SHORT y,
                                     SHORT w, SHORT h, ULONG tags, ...)
d487 2
a488 2
WORD                  minWidth,maxWidth,defWidth;
WORD                  minHeight,maxHeight,defHeight;
d524 17
d547 2
a548 2
    if (ed->ed_PrefsWork.sm_Width == -1)
       ed->ed_PrefsWork.sm_Width = defWidth;
d550 5
a554 17
    if (ed->ed_PrefsWork.sm_Height == -1)
       ed->ed_PrefsWork.sm_Height = defHeight;

    if (ed->ed_DoDefaults && (SELECTED & ed->ed_DefWidth->Flags))
        ed->ed_PrefsWork.sm_Width = defWidth;

    if (ed->ed_DoDefaults && (SELECTED & ed->ed_DefHeight->Flags))
        ed->ed_PrefsWork.sm_Height = defHeight;

    if (ed->ed_PrefsWork.sm_Width < minWidth)
        ed->ed_PrefsWork.sm_Width = minWidth;

    if (ed->ed_PrefsWork.sm_Width > maxWidth)
        ed->ed_PrefsWork.sm_Width = maxWidth;

    if (ed->ed_PrefsWork.sm_Height < minHeight)
        ed->ed_PrefsWork.sm_Height = minHeight;
d556 2
a557 2
    if (ed->ed_PrefsWork.sm_Height > maxHeight)
        ed->ed_PrefsWork.sm_Height = maxHeight;
d610 1
a610 1
                                           GTIN_Number,   ed->ed_PrefsWork.sm_Width,
d615 1
a615 1
                                            GTIN_Number,   ed->ed_PrefsWork.sm_Height,
a617 10
    if ((ed->ed_PrefsWork.sm_Width != defWidth) || (!ed->ed_DefWidth))
        ed->ed_DefWidth = DoPrefsGadget(ed,&EG[6],ed->ed_DefWidth,
                                                  GTCB_Checked,(ed->ed_PrefsWork.sm_Width == defWidth),
                                                  TAG_DONE);

    if ((ed->ed_PrefsWork.sm_Height != defHeight) || (!ed->ed_DefHeight))
        ed->ed_DefHeight = DoPrefsGadget(ed,&EG[7],ed->ed_DefHeight,
                                                   GTCB_Checked,(ed->ed_PrefsWork.sm_Height == defHeight),
                                                   TAG_DONE);

a629 6

    if (ed->ed_DoDefaults && (SELECTED & ed->ed_DefWidth->Flags))
        ed->ed_PrefsWork.sm_Width = -1;

    if (ed->ed_DoDefaults && (SELECTED & ed->ed_DefHeight->Flags))
        ed->ed_PrefsWork.sm_Height = -1;
d638 13
a650 2
    ed->ed_PrefsWork.sm_Width = ((struct StringInfo *) (ed->ed_Width->SpecialInfo))->LongInt;
    ed->ed_PrefsWork.sm_Height = ((struct StringInfo *) (ed->ed_Height->SpecialInfo))->LongInt;
a671 1
                             ed->ed_DoDefaults = TRUE;
d673 1
a673 2
                             ed->ed_DoDefaults = FALSE;
			     break;
d679 2
a680 1
                             RenderGadgets(ed);
d685 2
a686 1
                             RenderGadgets(ed);
d690 20
a709 4
        case EC_DEFWIDTH   :
        case EC_DEFHEIGHT  : ed->ed_DoDefaults = TRUE;
                             RenderGadgets(ed);
                             ed->ed_DoDefaults = FALSE;
d714 1
d716 1
@


38.5
log
@Now uses DoPrefsGadget instead of CreatePrefsGadget for better look upon window
  opening
@
text
@d82 26
d258 1
a258 1
    return(ReadIFF(ed,name,ReadPrefs));
d278 1
a278 1
    return(WriteIFF(ed,name,WritePrefs));
a351 5
    if (!(ed->ed_Menus = CreatePrefsMenus(ed,EM)))
    {
	return(FALSE);
    }

d359 26
a384 30
    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SM_NAME),
                                             WA_NewLookMenus,TRUE,
                                             WA_Gadgets,     ed->ed_Gadgets,
                                             TAG_DONE)))
    {
        DisposeDisplay(ed);
	return(FALSE);
    }

    return(TRUE);
}
d642 10
@


38.4
log
@Now uses WA_Gadgets to add the gadgets to the window
@
text
@d281 2
a282 2
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN, 0},
d284 1
a284 1
      {NM_ITEM, MSG_NOTHING,                EC_NOP, 0},
d287 1
a287 1
    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP, 0},
d289 2
a290 2
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE, 0},
d292 1
a292 1
    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP, 0},
d319 1
a319 2
UWORD  zoomSize[4];
STRPTR colorFormat;
a330 4
    colorFormat = "%10lu";
    if (ed->ed_LocaleInfo.li_LocaleBase)
        colorFormat = "%10lU";

d332 3
a334 15
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);

    ed->ed_ModeList = CreatePrefsGadget(ed,&EG[3],GTLV_ShowSelected, NULL,
                                                  GTLV_Labels,       &ed->ed_DisplayModes,
                                                  LAYOUTA_SPACING,   1,
                                                  GTLV_ScrollWidth,  18,
                                                  TAG_DONE);

    ed->ed_Width = CreatePrefsGadget(ed,&EG[4],GTIN_MaxChars, 6,
                                               TAG_DONE);

    ed->ed_Height = CreatePrefsGadget(ed,&EG[5],GTIN_MaxChars, 6,
                                                TAG_DONE);
d336 1
a336 12
    ed->ed_DefWidth = CreatePrefsGadget(ed,&EG[6],GTCB_Checked, TRUE,
                                                  TAG_DONE);

    ed->ed_DefHeight = CreatePrefsGadget(ed,&EG[7],GTCB_Checked, TRUE,
                                                   TAG_DONE);

    ed->ed_Colors = CreatePrefsGadget(ed,&EG[8],GTSL_MaxLevelLen, 10,
                                                GTSL_LevelFormat, (ULONG)colorFormat,
                                                GTSL_DispFunc,    (ULONG)DepthToColors,
                                                TAG_DONE);

    ed->ed_AutoScroll = CreatePrefsGadget(ed,&EG[9],TAG_DONE);
d406 12
d429 6
a434 2
        if (node->dm_Node.ln_Succ && node->dm_Node.ln_Name)
            Text(window->RPort,node->dm_Node.ln_Name,strlen(node->dm_Node.ln_Name));
a441 3

        if (node->dm_Node.ln_Succ)
            node = (struct DisplayMode *)node->dm_Node.ln_Succ;
d455 3
a457 3
    DrawPrefsBevelBox(ed,318,18,264,135,GTBB_Recessed, TRUE,
                                        GT_VisualInfo, ed->ed_VisualInfo,
                                        TAG_DONE);
d476 5
d541 1
a541 1
    if (node != ed->ed_LastMode)
d543 8
a550 2
        SetGadgetAttr(ed,ed->ed_ModeList,GTLV_Selected,nodeNum,
                                         TAG_DONE);
d583 2
a584 1
        RenderProps(ed);
d587 28
a614 18
    SetGadgetAttr(ed,ed->ed_Width,GTIN_Number,ed->ed_PrefsWork.sm_Width,
                                  TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Height,GTIN_Number,ed->ed_PrefsWork.sm_Height,
                                   TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Colors,GTSL_Level, (WORD)ed->ed_PrefsWork.sm_Depth,
                                   GTSL_Min,   1,
                                   GTSL_Max,   maxDepth,
                                   TAG_DONE);

    if (ed->ed_PrefsWork.sm_Width != defWidth)
        SetGadgetAttr(ed,ed->ed_DefWidth,GTCB_Checked,FALSE,
                                         TAG_DONE);

    if (ed->ed_PrefsWork.sm_Height != defHeight)
        SetGadgetAttr(ed,ed->ed_DefHeight,GTCB_Checked,FALSE,
                                          TAG_DONE);
d616 3
a618 2
    SetGadgetAttr(ed,ed->ed_AutoScroll,GTCB_Checked,ed->ed_PrefsWork.sm_Control & 1,
                                       TAG_DONE);
a624 1

@


38.3
log
@Changed some gadget sizes/positions for better appearance
@
text
@a331 21
    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SM_NAME),
                                             WA_NewLookMenus,TRUE,
                                             TAG_DONE)))
    {
        FreeMenus(ed->ed_Menus);
	return(FALSE);
    }

d372 22
d403 5
a407 2
    ClearMenuStrip(ed->ed_Window);
    CloseWindow(ed->ed_Window);
@


38.2
log
@Changes for new prefs shell
Correctly updates property list display when damage occurs
@
text
@d271 1
a271 1
#define NW_HEIGHT    185
d300 3
a302 3
    {BUTTON_KIND,   8,   166,  87,  14, MSG_SAVE_GAD,           EC_SAVE,     0},
    {BUTTON_KIND,   251, 166,  87,  14, MSG_USE_GAD,            EC_USE,      0},
    {BUTTON_KIND,   495, 166,  87,  14, MSG_CANCEL_GAD,         EC_CANCEL,   0},
d305 6
a310 6
    {INTEGER_KIND,  106, 98,  68,  14, MSG_SM_WIDTH_GAD,        EC_WIDTH,     0},
    {INTEGER_KIND,  106, 114, 68,  14, MSG_SM_HEIGHT_GAD,       EC_HEIGHT,    0},
    {CHECKBOX_KIND, 182, 100, 90,  11, MSG_SM_DEFAULT_GAD,      EC_DEFWIDTH,  PLACETEXT_RIGHT},
    {CHECKBOX_KIND, 182, 116, 90,  11, MSG_SM_DEFAULT_GAD,      EC_DEFHEIGHT, PLACETEXT_RIGHT},
    {SLIDER_KIND,   194, 132, 110, 11, MSG_SM_COLORS_GAD,       EC_COLORS,    0},
    {CHECKBOX_KIND, 106, 146, 90,  11, MSG_SM_AUTOSCROLL_GAD,   EC_AUTOSCROLL,0}
d364 2
a365 1
                                                  LAYOUTA_SPACING,   2,
d385 1
a385 2
    ed->ed_AutoScroll = CreatePrefsGadget(ed,&EG[9],GTCB_Checked, TRUE,
                                                    TAG_DONE);
d449 1
a449 1
        y += 10;
d466 2
a467 2
    DrawPrefsBevelBox(ed,318,18,264,138,GTBB_Recessed,TRUE,
                                        GT_VisualInfo,ed->ed_VisualInfo,
@


38.1
log
@Initial V38 RCS checkin
@
text
@a99 1
    {
a100 1
    }
d200 1
a200 1
    BuildList(ed,&ed->ed_DisplayModes);
d202 1
a202 1
    return(ES_NORMAL);
d211 1
d223 1
a223 1
    if (ReadChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct ScreenModePrefs)) == sizeof(struct ScreenModePrefs))
d230 1
a230 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs)
a231 1
    ed->ed_PrefsIO = destPrefs;
d242 1
a242 1
        if (WriteChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct ScreenModePrefs)) == sizeof(struct ScreenModePrefs))
d250 1
a250 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs)
a251 1
    ed->ed_PrefsIO = sourPrefs;
d364 1
a364 1
                                                  LAYOUTA_SPACING, 2,
d367 1
a367 2
    ed->ed_Width = CreatePrefsGadget(ed,&EG[4],GTIN_Number,   0,
                                               GTIN_MaxChars, 6,
d370 1
a370 2
    ed->ed_Height = CreatePrefsGadget(ed,&EG[5],GTIN_Number,   0,
                                                GTIN_MaxChars, 6,
a381 1
                                                GA_RELVERIFY,     TRUE,
a392 6
    SetFont(ed->ed_Window->RPort,ed->ed_Font);
    SetMenuStrip(ed->ed_Window,ed->ed_Menus);
    AddGList(ed->ed_Window,ed->ed_Gadgets,-1,-1,NULL);
    RefreshGList(ed->ed_Gadgets,ed->ed_Window,NULL,-1);
    GT_RefreshWindow(ed->ed_Window,NULL);

d430 30
d469 1
a481 1
ULONG                 props;
d486 1
a486 1
WORD                  y;
d553 5
a560 6

	sprintf(ed->ed_VisibleSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_VISIBLESIZE_PROP),(ULONG)defWidth,(ULONG)defHeight);
	sprintf(ed->ed_MaximumSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_MAXSIZE_PROP),(ULONG)maxWidth,(ULONG)maxHeight);
	sprintf(ed->ed_MinimumSize,  GetString(&ed->ed_LocaleInfo,MSG_SM_MINSIZE_PROP),(ULONG)minWidth,(ULONG)minHeight);
	sprintf(ed->ed_MaximumColors,GetString(&ed->ed_LocaleInfo,MSG_SM_MAXCOLORS_PROP),(ULONG)1<<maxDepth);

d583 1
a583 16
        y = 30+window->BorderTop;
        while (y < 150)
        {
            node = (struct DisplayMode *)RemHead(list);
            Move(window->RPort,325+window->BorderLeft,y);

            if (node && node->dm_Node.ln_Name)
                Text(window->RPort,node->dm_Node.ln_Name,strlen(node->dm_Node.ln_Name));

            SetAPen(window->RPort,0);
            RectFill(window->RPort,window->RPort->cp_x,    y-6,
                                   579+window->BorderLeft, y+1);
            SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);

            y += 10;
        }
d626 2
a627 2
    icode  = ed->ed_CurrentMsg->Code;
    gadget = ed->ed_CurrentMsg->IAddress;
a684 3

    if (ec == EC_SAVEICONS)
        state->cs_Selected = ed->ed_SaveIcons;
@
