head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     92.01.20.13.02.24;  author vertex;  state Exp;
branches ;
next     1.2;

1.2
date     92.01.15.16.09.12;  author vertex;  state Exp;
branches ;
next     1.1;

1.1
date     92.01.10.12.19.38;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial rcs login
@


1.3
log
@Fixed incorrect registers in parameter list
@
text
@
#include <exec/types.h>
#include <exec/memory.h>
#include <exec/libraries.h>
#include <intuition/intuition.h>
#include <intuition/gadgetclass.h>
#include <intuition/sghooks.h>
#include <libraries/gadtools.h>
#include <devices/inputevent.h>
#include <utility/hooks.h>
#include <stdio.h>
#include <string.h>

#include <clib/alib_protos.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/gadtools_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/gadtools_pragmas.h>

#include "pe_custom.h"
#include "edithook.h"
#include "conversion.h"


/*****************************************************************************/


#define	RETURN	(0x44)
#define	TAB	(0x42)


/*****************************************************************************/


ULONG ASM FloatHook(REG(a0) struct Hook *hook,
                    REG(a2) struct SGWork *sgw,
                    REG(a1) ULONG *msg)
{
LONG  numdec  = (LONG)sgw->Gadget->UserData;
BOOL  exiting = FALSE;
LONG  tmplong;
LONG  tmpdec;
ULONG result;
UBYTE buffer[32];

    result = 0;
    if (*msg == SGH_KEY)
    {
        result = 1;
        switch (sgw->IEvent->ie_Code)
        {
            case TAB   :
            case RETURN: exiting = TRUE;
        }

        if (CheckNumber(sgw->WorkBuffer, &tmplong, &tmpdec, numdec, exiting))
        {
            if (exiting)
            {
                sprintf(buffer,"%%ld.%%0%ldld",numdec);
                sprintf(sgw->WorkBuffer, buffer,tmplong,tmpdec);
                sgw->NumChars  = strlen(sgw->WorkBuffer);
                sgw->BufferPos = 0;
            }
        }
        else
        {
            sgw->EditOp  = EO_BADFORMAT;
            sgw->Actions = SGA_BEEP;
        }
    }

    return (result);
}
@


1.2
log
@*** empty log message ***
@
text
@d38 3
a40 2
ULONG ASM FloatHook(REG(a0) struct Hook *hook, REG(a1) struct SGWork *sgw,
                    REG(a2) ULONG *msg)
@


1.1
log
@Initial revision
@
text
@d1 1
d11 1
a11 1
#include <stdlib.h>
d24 2
a25 5

#define UPARROW		(0x4c)
#define DOWNARROW	(0x4d)
#define	RETURN		(0x44)
#define	TAB		(0x42)
a26 7
ULONG __stdargs floath (struct Hook * hook, struct SGWork * sgw, ULONG * msg)
{
    LONG numdec = (LONG)sgw->Gadget->UserData;
    BOOL exiting = FALSE;
    LONG tmplong, tmpdec;
    ULONG retval = 0L;
    UBYTE buffer[32];
d28 8
a35 30
    switch (*msg)
    {
	case SGH_KEY:
	    retval = 1L;
	    switch (sgw->IEvent->ie_Code)
	    {
		case TAB:
		case RETURN:
		    exiting = TRUE;
		    break;
	    }

	    if (checknumber (sgw->WorkBuffer, &tmplong, &tmpdec, numdec, exiting))
	    {
		if (exiting)
		{
		    sprintf (buffer, "%%ld.%%0%ldld", numdec);
		    sprintf (sgw->WorkBuffer, buffer, tmplong, tmpdec);
		    sgw->NumChars = strlen (sgw->WorkBuffer);
		    sgw->BufferPos = 0;
		}
	    }
	    else
	    {
		sgw->EditOp = EO_BADFORMAT;
		sgw->Actions = SGA_BEEP;
	    }
	    break;
    }
    return (retval);
a36 1
}
d38 2
a39 1
ULONG __stdargs numberh (struct Hook * hook, struct SGWork * sgw, ULONG * msg)
d41 6
a46 1
    ULONG retval = 0L;
d48 2
a49 1
    switch (*msg)
d51 22
a72 20
	case SGH_KEY:
	    retval = 1L;
	    switch (sgw->IEvent->ie_Code)
	    {
		case TAB:
		case RETURN:
		    sgw->BufferPos = 0;
		    break;

		case UPARROW:
		    sprintf (sgw->WorkBuffer, "%ld", ++sgw->LongInt);
		    sgw->NumChars = strlen (sgw->WorkBuffer);
		    break;

		case DOWNARROW:
		    sprintf (sgw->WorkBuffer, "%ld", --sgw->LongInt);
		    sgw->NumChars = strlen (sgw->WorkBuffer);
		    break;
	    }
	    break;
a73 6
    return (retval);
}

void initHook (struct Hook * hook, ULONG (*ccode) ())
{
    extern ULONG HookEntry ();
d75 1
a75 3
    hook->h_Entry = HookEntry;
    hook->h_SubEntry = (ULONG (*) ()) ccode;
    hook->h_Data = 0;
@
