head     39.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


39.5
date     93.01.12.13.51.43;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.12.29.11.21.08;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.08.04.11.27.15;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.08.02.16.54.31;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.08.09.23.00;  author vertex;  state Exp;
branches ;
next     ;


desc
@Documentation for MakeWB

@


39.5
log
@*** empty log message ***
@
text
@
                           MakeWB 39.13 (12.1.93)
                           ======================

MakeWB is a tool to simplify the process of creating Workbench disk sets. In
minutes, a complete up to date Workbench disk tree can be created on any
machine having access to the source server. MakeWB will:

  - Create a local directory containing an image of the current Workbench
    disk set, with all protection bits, dates, comments, icon positions, etc...
    By simply copying the directories to floppies, a complete up to date
    Workbench disk set can be created.

  - Automatically create archives, removing copyrigthed files, adding
    copyright notices, etc... The results are a series of archives ready to
    upload to BIX and ADSP.

  - Greatly simplify the task of maintaining and updating the Workbench disk
    set. The entire process is data driven, eliminating complicated scripts,
    eliminating the need for Suns, and making the whole build process much
    faster.

  - Enable the creation of multiple parallel disk sets, specifically useful
    to create different localized disk sets.

Operation
---------

MakeWB's main function is to copy files off of the source server and adjust all
file attributes. You tell MakeWB what to copy, and how to copy it, with a
build list file. The file describes exactly where each file is located on the
server, where it should be copied to, what its protection bits are, etc...

The command-line template for MakeWB is:

    BUILDLIST/A,TO,LOGFILE/K,SYMBOL/M,QUIET/S,MAKEARCS/S

    BUILDLIST
    Specifies the name of the build list. The format of the build list is
    described in the following section

    TO
    Specifies where the resulting disk set or archive set should be created.

    LOGFILE
    Specifies the name of a file that will receive a complete log of the build
    process. This includes versions and locations of all files processed.

    SYMBOL
    Specifies any number of symbols that control which file gets processed
    and how. This is used in conjunction with the build list's IFDEF and
    IFNDEF keywords. Using this option, it becomes easy to create different
    Workbench disk sets by simply providing something like:

         MakeWB V:WB_BuildList TO Work:WBDisks600 SYMBOL MACHINE_A600
         MakeWB V:WB_BuildList TO Work:WBDisks4000 SYMBOL MACHINE_A4000

    This would create two complete disk sets, one for the A600 and one
    for the A4000. Or better yet would be:

         MakeWB V:WB_BuildList TO Work:WBDisksD SYMBOL DEUTSCH
         MakeWB V:WB_BuildList TO Work:WBDisksF SYMBOL FRANCAIS

    which would create a German and a French disk set.

    QUIET
    Prevents MakeWB from outputting status information while it operates.
    Any errors or warnings are always output, regardless of this option.

    MAKEARCS
    When this option is specified, archives are automatically created
    containing the files specified in the build list. The "DISK" build
    list entry determines the name of the archive to which a given file
    is added. The archives are put in the directory specified by the "TO"
    command-line option. You need the LhA program in your path for this
    option to work.


The Build List
--------------

The build list is a regular ASCII file containing a series of file descriptors.
There is one file descriptor for each file to process. A file descriptor
indicates the location of the file on the server, its destination on the WB
disk, its protection bits, date, comment, etc... Here is a sample file
descriptor:

SOURCE		= V:src/workbench/prefs/locale/locale.ld.strip
DISK		= Extras2.1
DESTINATION     = Prefs/Locale
PROTECTION	= wprd
DATE		= 21-Jul-92
TIME		= 12:00:00
COMMENT		= "This is a comment"
ICONPOS         = 72,35
DRAWERPOS	= 182,184
DRAWERSIZE      = 213,412
#COPYFILE

Each line defines a specific attribute of the file. Most lines are optional.
The #COPYFILE command marks the end of the descriptor and causes that file to
be processed. A build list file is made up of many of these file descriptors.
Standard C comments can be embedded anywhere in the build list file. Here is a
description of each possible keyword in a file descriptor:

    SOURCE = <server path>
    This specifies the complete path to the original file to process.
    This will almost always be a file taken from the source server.

    DISK = <disk name>
    Specifies the name of the disk this file is supposed to go to. This also
    the name of the archive this file or directory will be put in when the
    MAKEARCS option is specified. When this keyword is not specified, then the
    current value of #DEFAULTDISK is used instead (see below)

    #DEFAULTDISK = <disk name>
    Works exactly like the DISK keyword, except that is it somewhat global.
    It sets the default value for the DISK keyword for any file descriptor
    not having the DISK keyword. This lets a single #DEFAULTDISK keyword be
    specified, with multiple file descriptors all going to the same disk.

    DESTINATION = <destination path>
    This specifies the path where the file will end up on the final
    disk set. This path is added to the TO path specified on the command-line
    when MakeWB was run, to determine where the file will be copied when
    performing a normal build. So for example, if "Work:WBDisks" was provided
    as argument to the TO command-line option, DISK specifies "Extras2.1",
    and DESTINATION specifies "Prefs/Locale", the file will be copied to
    "Work:WBDisks/Extras2.1/Prefs/Locale"

    PROTECTION = <bits>
    This specifies the protection bits to assign the file or directory. If
    this keyword is not present, then the "rwed" is used for executables and
    "rwd" is used for everything else.

    DATE = DD-MMM-YY
    This specifies the date that the file or directory should have. If this
    keyword is not present, the date when MakeWB was started is used.

    TIME = HH:MM:SS
    This specifies the time that the file or directory should have. If this
    keyword is not present, the time when MakeWB was started is used.

    COMMENT = <comment string>
    This specifies the comment that should be attached to the file or
    directory. If this keyword is not present, then there is no comment.

    ICONPOS = X,Y
    When copying an icon, this specifies the X and Y coordinates of the icon.
    This is specified in the format X,Y with no spaces allowed. If this is
    not provided, the default is to have the icon unsnapshotted.

    DRAWERPOS = X,Y
    When copying a drawer icon, this specifies the X and Y coordinates
    of the drawer window. This is specified in the format X,Y with no spaces
    allowed.

    DRAWERSIZE = W,H
    When copying a drawer icon, this specifies the width and height of the
    drawer window. This is specified in the format W,H with no spaces allowed.

    RCSTAG = <name>
    When copying a text file, this instructs MakeWB to scan the file for
    standard RCS $Date and $Revision keywords, and replace them with a
    corresponding $VER keyword. The format of the keywords searched for is:

       $Date: 92/12/29 11:21:08 $ $Revision: 39.4 $

    which gets replaced by:

       $VER: <name> 39.4 (1.12.92)

    IFDEF = <symbol>
    This file or directory will only be processed if <symbol> was specified
    on the command-line using the SYMBOL option. This enables different
    disk sets to be build depending on which command-line argument is
    given. Any number of IFDEF keywords can be specified per file
    descriptor.

    IFNDEF = <symbol>
    This file or directory will only be processed if <symbol> was NOT specified
    on the command-line using the SYMBOL option. This enables different
    disk sets to be build depending on which command-line argument is
    given. Any number of IFNDEF keywords can be specified per file
    descriptor.

    #COPYFILE
    This indicates the end of a file descriptor. When this keyword is
    encountered, the file copy is performed, and all options are applied.
    When an executable is copied, it is automatically stripped from symbols
    and debugging information. Following a COPYFILE keyword, you can start
    another file descriptor.

    #CREATEDIR
    This indicates the end of a file descriptor. When this keyword is
    specifies then path specified for DESTINATION is created as a directory.
    You cannot specify this keyword when the SOURCE keywords has been used
    in a file descriptor.

    #DEFINE = <symbol>
    Allows a symbol to be defined within a build list. From that point
    on, the symbol is active. The scope of the symbol is for all subsequent
    file descriptors, not just the current one.

    #UNDEF = <symbol>
    Allows a symbol to be undefined within a build list.
@


39.4
log
@Added support for the RCSTAG keyword
@
text
@d2 2
a3 2
                           MakeWB 39.10 (29.12.92)
                           =======================
d114 1
a114 1
    current value of DEFAULTDISK is used instead (see below)
d116 1
a116 1
    DEFAULTDISK = <disk name>
d119 1
a119 1
    not having the DISK keyword. This lets a single DEFAULTDISK keyword be
d167 1
a167 1
       $Date: 92/12/01 17:02:08 $ $Revision: 39.4 $
@


39.3
log
@*** empty log message ***
@
text
@d2 2
a3 2
                             MakeWB 39.6 (4.8.92)
                             ====================
d161 11
@


39.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
                             MakeWB 39.4 (1.8.92)
d36 1
a36 1
    BUILDLIST/A,TO,SYMBOL/M,QUIET/S,MAKEARCS/S
d45 4
a97 1
STRIPSYMBOLS
d113 8
a120 1
    MAKEARCS option is specified.
d133 2
a134 1
    this keyword is not present, then the usual "rwed" is assumed.
a175 4
    STRIPSYMBOLS
    This indicates that the debugging symbols of a binary file should be
    stripped before being copied over.

d179 3
a181 1
    Following a COPYFILE keyword, you can start another file descriptor.
@


39.1
log
@Initial V39 RCS checkin
@
text
@d2 1
a2 1
                             MakeWB 39.3 (8.6.92)
a13 5
  - Automatically update a hard drive to the latest Workbench by reading the
    files from the source server and installing them in the right locations,
    taking into account customized files such as startup-sequence, mountlist,
    etc...

d46 2
a47 2
    Specifies any number of symbols which control which file gets processed
    and how. This is used in conjuction with the build list's IFDEF and
d49 1
a49 1
    Workbench disk sets by symply providing something like:
d51 2
a52 2
         MakeWB V:WB_BuildList TO Work:WBDisks600 SYMBOL MACHINE_A500
         MakeWB V:WB_BuildList TO Work:WBDisks3000 SYMBOL MACHINE_A3000
d54 2
a55 2
    This would create two complete disk sets, one for the A500 and one
    for the A3000. Or better yet would be:
d60 1
a60 8
    which would create a German and a French disk set. Something else which
    symbols can be used for is:

         MakeWB V:WB_BuildList TO SYS: SYMBOL INSTALL

    which would update a machine with the latest Workbench files, directly
    from the server, taking into consideration files such as the
    startup-sequence, etc...
a120 6
    INSTALLATION = <installation path>
    This keyword serves the same purpose as the DESTINATION keyword. It is
    used instead of the DESTINATION keyword whenever the INSTALL symbol
    is defined. This allows files to be installed in directories that differ
    from the ones they will end up on the complete disk set.

d139 2
a140 1
    This is specified in the format X,Y with no spaces allowed.
d163 1
a163 4
    descriptor. The INSTALL symbol is automatically defined whenever the
    INSTALL command-line option is specified when starting MakeWB. This
    allows certain files to not be copied such as startup-sequences or
    mountlists
@
