%% ----------------------------------------------------------------------
%% (C) 1991 Commodore-Amiga (written by L. Vanhelsuwe and P. Jones)
%% ----------------------------------------------------------------------
%% Amiga Postscript "pstack", "stack", '==' and '=' support file.
%% This file creates the internal dictionary of type-printing procedures.
%% The procedures are ordered the same way they're listed in the Red Book
%% under the operator description for "type".
%% ----------------------------------------------------------------------

systemdict begin				% define private dictionary in systemdict

	/statusdict 100 dict def

	statusdict begin
	/letter (LETTER) def
	/lettertray {(Lettertray called\n) print} def
	/lettersmall (LETTERSMALL) def
	end

%%	/serverdict 100 dict def

	/promptstr (APS>) def
	/prompt { promptstr print flush} def

	/version (0.11) def				% define version of this release
	
	/typedict 26 dict def			% create room for library of procedures
	
	typedict begin					% enter following procedures in this dict.
	%-----------------------------
	/arraytype
		{dup rcheck					% print contents only if readable
			{dup xcheck				% is this array a procedure ?
				{ ({) termprint {typeprint} forall (} ) termprint } bind % print using curlies
				{ ([) termprint {typeprint} forall (] ) termprint } bind % else using brackets
				ifelse } bind
			{pop (-array- ) termprint } bind
			ifelse } bind
	def
	%-----------------------------
	/booleantype
		{cvsprint}					% use cvs to do the gruntwork
	def
	%-----------------------------
	/conditiontype
		{pop (-condition- ) termprint } bind
	def
	%-----------------------------
	/dicttype
		{pop (-dictionary- ) termprint } bind
	def
	%-----------------------------
	/filetype
		{pop (-filestream- ) termprint } bind
	def
	%-----------------------------
	/fonttype
		{pop (-fontid- ) termprint } bind
	def
	%-----------------------------
	/gstatetype
		{pop (-gstate- ) termprint } bind
	def 
	%-----------------------------
	/integertype
		{cvsprint}
	def
	%-----------------------------
	/locktype
		{pop (-lock- ) termprint } bind
	def
	%-----------------------------
	/marktype
		{pop (-mark- ) termprint } bind
	def
	%-----------------------------
	/nametype
		{dup xcheck not
			{ (/) termprint } bind
			if
		cvsprint } bind
	def
	%-----------------------------
	/nulltype
		{pop (-null- )termprint } bind
	def
	%-----------------------------
	/operatortype
		{ (--) termprint
		   =string cvs termprint
		  (--) termprint } bind
	def
	%-----------------------------
	/packedarraytype
	{dup rcheck 
		{dup xcheck 
			{ (>{) termprint {typeprint} bind forall (}< ) termprint } bind
			{ (>[) termprint {typeprint} bind forall (]< ) termprint } bind
			ifelse } bind
		{pop (-packedarray- ) termprint } bind 
		ifelse } bind
	def
	%-----------------------------
	/realtype
		{cvsprint} bind
	def
	%-----------------------------
	/savetype
		{pop (-savelevel- ) termprint } bind
	def
	%-----------------------------
	/stringtype
		{dup rcheck								% if readable,
			{ (\() termprint termprint (\)) termprint } bind	% print out string contents
			{ pop (-string- )termprint } bind
			ifelse } bind
	def
	
%----------------------------------------------------------------------
% Support procedures for the above follow...
%----------------------------------------------------------------------

	/NL (\n) def
	/cp 13 def
	/rmargin 72 def
	/==dict	typedict def

	%-----------------------------
	/typeprint
		{dup type exec } bind
	def
	%-----------------------------
	/termprint									% terminal print
		{dup length cp add rmargin gt
			{NL print
			/cp 0 def } bind if
		dup length cp add /cp exch def
		print } bind
	def
	%-----------------------------
	/cvsprint
		{=string cvs termprint spc termprint } bind
	def

%-----------------------------
% Now pop our private procedures library dict off dict stack.
% Systemdict again becomes currentdict.
%-----------------------------
	
	end			% Pooof..

%----------------------------------------------------------------------
% Define user-accessible procedures in systemdict (pstack, stack, == and =).
%----------------------------------------------------------------------

/=string 22 string def
/spc ( ) def

%-----------------------------
/== 
	{typedict begin		% goto type-printing procedures library...
	/cp 0 def			% start printing at terminal column 0
	typeprint			% do the business.
	NL print	
	end					% return to previous currentdict
	} bind
def
%-----------------------------
/=
	{ { dup  type /stringtype ne
		{ =string cvs } bind
		if print } bind exec
	 (\n) print } bind
def
%-----------------------------
/pstack
	{count dup 1 add copy {==}repeat pop } bind
def
%-----------------------------
/stack
	{count dup 1 add copy {{ dup type /stringtype ne
		{=string cvs } bind
		if print } bind exec (\n) print } bind repeat
	 pop } bind
def
%----------------------------------------------------------------------
% Everything is done: pop systemdict off dict stack.
% Dict stack will now again contain the usual userdict & systemdict.
%----------------------------------------------------------------------

end							% return dictstack to default programming model.

%======================================================================
%=== Debugging code to check for typedict overflow...

% (typedict maxlength =) print typedict maxlength =
% (typedict length =) print typedict length =
