Amiga Postscript Documentation			(C) 1991 Commodore-Amiga
------------------------------			------------------------

Currently (02-AUG-1991) the following aspects of standard Postscript are not
supported or are only partially supported.

In order of relative importance:

- save and restore	(no memory reclamation at all)
- device interface (internal issue)
- font cache (part of device interface)
- clipping
- image and imagemask
- some linecaps and linejoin modes (mitre joins and butt caps)

Detailed list per operator class (see Red Book):

1) Operand stack manipulation		: fully supported
2) Arithmetic operators			: fully supported (incl. overflow)
3) Array operators			: fully supported (incl. packed arrays)
4) Dictionary operators			: fully supported
5) String operators			: fully supported
6) Relational, Boolean & bitwise	: fully supported
7) Program control operators		: fully supported except for 'quit'
8) Type, attribute & conversion ops 	: fully supported
9) File operators			: mostly supported
	Not implemented		- bytesavailable
				- resetfile
				- echo

A) Virtual Memory operators			: only 'vmstatus'
B) Miscellaneous operators			: fully supported
C) Graphic State operators			: mostly supported
	not implemented		- grestoreall
				- setscreen
				- settransfer

D) Coordinate system & Matrix ops	: fully supported
E) Path Construction operators		: fully supported except for 'arcto',
	'reversepath', 'initclip', 'clip' and 'eoclip'

F) Painting operators		: 'erasepage', 'eofill', 'image' and
	'imagemask' has not been implemented yet
	
G) Device setup and output operators: none supported
H) Character & font operators		: fully supported
I) Font cache operators				: none except 'setcharwidth'
	not implemented		- cachedevice
				- banddevice
				- nulldevice


Non-Standard additions
----------------------
We have added a few convenience operators to aid developement.  You may
find them useful when playing with the interpreter.

	- klugeoff -	closes the screen.  Any rendering operators will
			automatically open it again.

	- debugon -	opens a useful little postscript debugging tool that
			shows the current state of the postscript stacks.

	- debugoff -	closes the debugging window


Known bugs in Amiga Postscript....
----------------------------------

- The 3-D plot demo in the demo suite contains (or brings out) a bug.
  (Stray lines appear sometimes)
- Some conversion routines don't perform proper access checks (cvrs,..)
- Bind doesn't support packed arrays yet.
- We don't yet have a watertight mechanism to handle stack overflows in the
  scanner (our NEC SilentWriter also bombs out easily when the o-stack is full
  or nearly full !).  Stack overflow handling IS solid for the individual
  operators and the main interpreter loop.

The screen output is a horrendous kluge.  Since the device interface has not
been nailed down yet, we simply open a screen and call graphics.library directly
from within the interpreter.  The Screen pointer (and tmpras etc) are held
in globals directly in postscript.library.  For this reason, the library will
not multitask yet.  We really only made it into a library to see if it could
be done anyway.  This will be fixed when the device stuff is completed.  The
default imaging region is 640 by 400 with 0,0 at the bottom left of the screen.

- memory loss.  Occasionally the library will eat memory.  This is due to
  some random printfs and fprintfs that get called but generate no output
  (because they are being called in the library environment and not as a
  DOS process).  Since we are able to compile postscript as a simple executable
  too, we have left these in place.

Since there is no font cache, character rendering is very slow.  Each character
that has to be rendered involves running the postscript procedure for generating
the character path (interpreted) and then stroking or filling the result.  When
the font cache is implemented, character rendering could be anything up to 100
times faster.  You'll have to make do with handwriting speed for now :-)


Scanner
-------
The scanner now supports all nescessary number formats, eg +.23e10 (floating
point), 15#50(radix notation) etc...

The scanner will also accept immediately evaluated names, eg //repeat.
(N.B) see red book for a description on how to use immediately evaluated
names correctly.

Current Limitations
-------------------
Strings generated with the (...) sequence are limited to a length of 1K. 
However, strings generated with the ' n string ' command are limited to 
0..n bytes.


Programs in the tools directory
-------------------------------

COMPRESS
--------
This program is used to compress the Postscript system names into a more compact
form.
Compress doesn't take any arguments but looks for the file 'sysenc.dat' in
the current directory.
It produces a file 'systemnames.c' in the current directory.

'Systemnames.c' is a 'C' file containing two large constant structures.
The first structure is a byte stream with the compressed names encoded in it.
The second structure is an array of pointers to operator functions.
For more detailed information, refer to compress.c which is amply commented.

USAGE: 1> compress


Binary Token Support
--------------------

There are two utilities for handling binary token files.

      - ascbt <ASCII file> <binary token file>
      - btasc <binary token file> <ascii file>

(Each routine takes two arguments, the input/output filename.)

The former routine, ascbt, will convert any ASCII encoded PostScript file
and generate an equivalent binary encoded token file. The reduction in size 
is usually in the range 40%-50%.( only a rough figure !)

The later routine, btasc, does the opposite. It generates an ASCII encoded
file from the given binary token file. The size of this file can increase
significantly, especially if floating point numbers are encoded in it.

Current Limitations
-------------------
Encodings generated by 'ascbt' :
    - Floating point Big Endian IEEE format (Native real) numbers
    - Integer Big Endian numbers (8,16 & 32 bit)
    - character strings no larger than 4K (8 & 32 bit length value)
    - public executable system name encodings (the first 256)

Encodings which are not generated by 'ascbt' :
    - private executable system name encodings
    - literal name encodings (private/public)
    - Homogeneous number arrays
    - Little Endian number format (real & integer)
    - Fixed point numbers (16 & 32 bit)
    - boolean tokens

Binary Object sequences are not supported yet.
    
(NB) Do not attempt to encode immediately evaluated names (eg //for) as
this will produce incorrect code. However, immediately evaluated names are
available in normal ASCII encoding format.



