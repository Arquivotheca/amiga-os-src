head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     93.04.26.12.38.54;  author Unknown;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@*************************************************************************
*                                                                       *
*   stricmp.asm
*                                                                       *
*   Copyright (C) 1990 Commodore Amiga Inc.  All rights reserved. 	*
*                                                                       *
*   $Id: string_functions.a,v 1.1 93/04/26 11:27:24 Unknown Exp $
*   $Id: string_functions.a,v 1.1 93/04/26 11:27:24 Unknown Exp $
*************************************************************************

	include	'exec/types.i'
;	include	'hooks.i'

    section text,code

	xdef @@stricmp
	xdef @@strnicmp
	xdef @@toupper
	xdef @@tolower

******* utility.library/stricmp *****************************************
*
*    NAME
*	stricmp	--  Case-insensitive string compare. (V37)
*
*    SYNOPSIS
*	res = stricmp(string1, string2)
*	D0		A0       A1
*
*	LONG stricmp(char *, char *);
*
*    FUNCTION
*	stricmp compares two strings, ignoring case.  It handles all
*	internationalization issues.  If the strings have different lengths,
*	the shorter is treated as if it were extended with zeros.
*
*    INPUTS
*	string1, string2 - strings to be compared
*
*    RESULT
*	res - negative if string1 is below string2, 0 if they're the same, and
*	      positive if string1 is above string2.
*
*    NOTES
*	Commodore is planning a localization library which will take care
*	of most details pertaining to system integration into different
*	cultures, locales, and territories.
*
*	This function will automatically be replaced by a localized version
*	whenever the locale.library is loaded in memory. As such, the
*	collating order may change depending on the locale currently
*	defined by the user. Take this fact into consideration when using
*	this function, and do not rely on obtaining specific collating
*	sequences.
*
*    BUGS
*
*    SEE ALSO
*	strnicmp()
*
*****************************************************************************
*
* int __regargs stricmp (char * s1, char * s2)
* int __regargs strnicmp (char * s1, char * s2, long len)
* strcmp ignoring case, <0 = s1<s2, 0 = equal, >0 = s1>s2
*

@@stricmp:
	move.l	#$7fffffff,d0		; infinite length
	;-- fall through!

******* utility.library/strnicmp *****************************************
*
*    NAME
*	strnicmp--  Case-insensitive string compare, length-limited. (V37)
*
*    SYNOPSIS
*	res = strnicmp(string1, string2, length)
*	D0		A0       A1	   D0
*
*	LONG strnicmp(char *, char *, LONG length);
*
*    FUNCTION
*
*	strnicmp compares two strings, ignoring case.  It handles all
*	internationalization issues.  If the strings have different lengths,
*	the shorter is treated as if it were extended with zeros.  It never
*	compares more than <length> characters.
*
*    INPUTS
*	string1, string2 - strings to be compared
*	length		 - maximum number of characters to examine
*
*    RESULT
*	res - negative if string1 is below string2, 0 if they're the same, and
*	      positive if string1 is above string2.
*
*    NOTES
*	Commodore is planning a localization library which will take care
*	of most details pertaining to system integration into different
*	cultures, locales, and territories.
*
*	This function will automatically be replaced by a localized version
*	whenever the locale.library is loaded in memory. As such, the
*	collating order may change depending on the locale currently
*	defined by the user. Take this fact into consideration when using
*	this function, and do not rely on obtaining specific collating
*	sequences.
*
*    BUGS
*
*    SEE ALSO
*	stricmp()
*
*****************************************************************************

	;-- note: stricmp falls through to here
@@strnicmp:
	movem.l	d2/d3/d4,-(a7)	; d4 for check_sub use
	move.l	d0,d3		; save length
	beq.s	exit		; if length == 0, return SAME
	moveq	#0,d0		; clear high 3 bytes, set equal if len=0

caseloop:
	subq.l	#1,d3		; done yet?
	bmi.s	make_res	; if done, make result
	move.b	(a0)+,d1	; Deal with either string ending first
	move.b	(a1)+,d2	; must fetch both for comparison, even if d0==0
	beq.s	make_res	; exit if *s2 == 0
	move.b	d1,d0
	beq.s	make_res	; exit if *s1 == 0

	bsr.s	check_sub_toupper
	beq.s	1$
	sub.b	#'a'-'A',d1
1$:
	move.b	d2,d0
	bsr.s	check_sub_toupper
	beq.s	2$
	sub.b	#'a'-'A',d2

2$:
	cmp.b	d2,d1		; do the comparison (must
	beq.s	caseloop	; check next character (after checking size)

make_res:
	move.b	d1,d0
	sub.b	d2,d0		; generate return value
exit:
	ext.w	d0
	ext.l	d0		; return LONG!!!
	movem.l	(a7)+,d2/d3/d4
	rts

*
* returns d0 = 0 if no sub needed, = 1 if needed (cc's set!!!!)
* can't touch d1/d2/d3, d4 is scratch, d0 has character/return
*
check_sub_tolower:
	move.l	#'^@@ZA',d4	; load up 4 characters for compares
	bra.s	check_common	; @@ <- à, ^ <- þ
check_sub_toupper:
	move.l	#'~`za',d4	; load up 4 characters for compares
check_common:
	cmp.b	#$f7,d0		; these are special
	beq.s	no
				; Z/z and A/a in low 16 bits
	bclr 	#7,d0		; clear high bit
	beq.s	normal_char
	swap	d4		; Þ/þ and À/à are the highest in the upper area
				; (~ = þ, ' = à minus bit 7)
normal_char:
	cmp.b	d4,d0		; a or à(`)  (or A or À)
	blt.s	no
	lsr.l	#8,d4		; get upper bound
	cmp.b	d4,d0		; z or þ(~)  (or Z or Þ)
	bgt.s	no
	moveq	#1,d0
	rts
no:	moveq	#0,d0
	rts

******* utility.library/toupper *****************************************
*
*    NAME
*	toupper - Convert a character to uppercase. (V37)
*
*    SYNOPSIS
*	char = toupper(char)
*	D0		D0
*
*	char toupper(char);
*
*    FUNCTION
*	Converts a character to uppercase, handling international character
*	sets.
*
*    INPUTS
*	char - character to be converted.
*
*    RESULT
*	char - uppercase version of input character.
*
*    NOTES
*	Commodore is planning a localization library which will take care
*	of most details pertaining to system integration into different
*	cultures, locales, and territories.
*
*	This function will automatically be replaced by a localized version
*	whenever the locale.library is loaded in memory. As such, the
*	resulting converted character may change depending on the locale
*	currently defined by the user. Take this fact into consideration when
*	using this function, and do not rely on obtaining specific
*	conversions.
*
*    BUGS
*
*    SEE ALSO
*
*****************************************************************************

@@toupper:
	movem.l	d2-d4,-(sp)
	move.b	#'A'-'a',d3	; amount to add (negative in this case)
	lea	check_sub_toupper(pc),a0

	;-- common routine
toxxx:
	move.l	d0,d2		; save character
	jsr	(a0)		; check_sub_xxxx
	beq.s	1$		; returns cc's, hits d4
	add.b	d3,d2		; + or - ('a'-'A')
1$:
	moveq	#0,d0
	move.b	d2,d0		; make sure the return is good
	movem.l	(sp)+,d2-d4
	rts

******* utility.library/tolower *****************************************
*
*    NAME
*	tolower - Convert a character to lowercase. (V37)
*
*    SYNOPSIS
*	char = tolower(char)
*	D0		D0
*
*	char tolower(char);
*
*    FUNCTION
*	Converts a character to lowercase, handling international character
*	sets.
*
*    INPUTS
*	char - character to be converted.
*
*    RESULT
*	char - lowercase version of input character.
*
*    NOTES
*	Commodore is planning a localization library which will take care
*	of most details pertaining to system integration into different
*	cultures, locales, and territories.
*
*	This function will automatically be replaced by a localized version
*	whenever the locale.library is loaded in memory. As such, the
*	resulting converted character may change depending on the locale
*	currently defined by the user. Take this fact into consideration when
*	using this function, and do not rely on obtaining specific
*	conversions.
*
*    BUGS
*
*    SEE ALSO
*
*****************************************************************************

@@tolower:
	movem.l	d2-d4,-(sp)
	lea	check_sub_tolower(pc),a0
	move.b	#'a'-'A',d3			; amount to add
	bra.s	toxxx

    end
@
