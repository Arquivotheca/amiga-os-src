head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     93.04.20.10.24.53;  author kaori;  state Exp;
branches ;
next     1.1;

1.1
date     92.12.17.12.03.29;  author kaori;  state Exp;
branches ;
next     ;


desc
@jcc.library allocate free tag stuff.
@


1.2
log
@Fix bugs for searching binary string.
@
text
@/*
 *  jcc.c - These are the actual library functions...
 *
 */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/memory.h>

#include <clib/exec_protos.h>
#include <clib/utility_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/utility_pragmas.h>

#include <dos.h>
#include <string.h>

#include "jcc.h"
#include "jccbase.h"

#define JCCBase		((struct JCCLibrary *)getreg(REG_A6))
#define SysBase		(JCCBase->jl_SysBase)
#define UtilityBase	(JCCBase->jl_UtilityBase)

/**********    debug macros     **********/
#define MYDEBUG  0
void kprintf(UBYTE *fmt,...);
#define bug kprintf
#if MYDEBUG
#define D(x) (x);
#else
#define D(x) ;
#endif /* MYDEBUG */
/********** end of debug macros **********/

struct JConversionCodeSet * __saveds __asm
LIBAllocConversionHandleA(register __a0 struct TagItem *taglist)
{
	struct JConversionCodeSet *jcc = NULL;
	LONG whatinputcode = GetTagData(JCC_WhatInputCode, -1 ,taglist);
	LONG whatoutputcode = GetTagData(JCC_WhatOutputCode, -1 ,taglist);
	UBYTE firstbyte = GetTagData(JCC_FirstByte, 0xff ,taglist);
	LONG shiftedin = GetTagData(JCC_ShiftedIn, -1 ,taglist);
	union x
	{
		ULONG esc_l;
		UBYTE esc_c[4];
	} x;
	union y
	{
		ULONG hankata_l;
		UBYTE hankata_c[4];
	} y;
	x.esc_l = GetTagData(JCC_ESC, 0xffffffff ,taglist);
	y.hankata_l = GetTagData(JCC_HanKata, 0xffffffff ,taglist);

	if (jcc = AllocMem(sizeof(struct JConversionCodeSet),
				MEMF_PUBLIC|MEMF_CLEAR))
	{
		if (whatinputcode != -1)
			jcc->jcc_WhatInputCode = whatinputcode;
		if (whatoutputcode != -1)
			jcc->jcc_WhatOutputCode = whatoutputcode;
		if (firstbyte != 0xff)
			jcc->jcc_FirstByte = firstbyte;
		if (x.esc_l != 0xffffffff)
		{
			int i;
			for (i = 0; i < 4; i++)
				jcc->jcc_ESC[i] = x.esc_c[i];
		}
		if (y.hankata_l != 0xffffffff)
		{
			int i;
			for (i = 0; i < 4; i++)
				jcc->jcc_HanKata[i] = y.hankata_c[i];
		}
		if (shiftedin != -1)
			jcc->jcc_ShiftedIn = shiftedin;

#if 0
		D(bug("jcc_whatinput = %ld\n", jcc->jcc_WhatInputCode));
		D(bug("jcc_whatoutput = %ld\n", jcc->jcc_WhatOutputCode));
		D(bug("jcc_firstbyte = 0x%lx\n", jcc->jcc_FirstByte));
		D(bug("jcc_esc = 0x%02x\n", jcc->jcc_ESC[0]));
		D(bug("jcc_hankata = 0x%02x\n", jcc->jcc_HanKata[0]));
		D(bug("jcc_shiftedin = %ld\n", jcc->jcc_ShiftedIn));
#endif
		return(jcc);
	}
	else
	{
		return(NULL);
	}
}

void __saveds __asm
LIBFreeConversionHandle(register __a0 struct JConversionCodeSet *jcc)
{
	if (jcc) FreeMem(jcc, sizeof(struct JConversionCodeSet));
	jcc = NULL;
}

LONG __saveds __asm
getpt(register __a0 void *v)
{
	return(v);
}

LONG __saveds __asm
LIBGetJConversionAttrsA(register __a0 struct JConversionCodeSet *jcc,
                        register __a1 struct TagItem *taglist)
{
	LONG numproc = 0;
	struct TagItem *tstate = taglist;
	struct TagItem *tag;

	D(bug("taglist = $%lx\n", taglist));

	while (tag = NextTagItem(&tstate))
	{
		LONG pt;

		switch (tag->ti_Tag)
		{
		case JCC_WhatInputCode:
			pt = getpt(&jcc->jcc_WhatInputCode);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;
		case JCC_WhatOutputCode:
			pt = getpt(&jcc->jcc_WhatOutputCode);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;
		case JCC_FirstByte:
			pt = getpt(&jcc->jcc_FirstByte);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;
		case JCC_ESC:
			pt = getpt(&jcc->jcc_ESC);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;
		case JCC_HanKata:
			pt = getpt(&jcc->jcc_HanKata);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;
		case JCC_ShiftedIn:
			pt = getpt(&jcc->jcc_ShiftedIn);
			*((LONG *)(tag->ti_Data)) = *((LONG *)pt);
			numproc++;
			break;

		}
	}
	return(numproc);
}

VOID __saveds __asm
LIBSetJConversionAttrsA(register __a0 struct JConversionCodeSet *jcc,
                        register __a1 struct TagItem *taglist)
{
	LONG whatinputcode = GetTagData(JCC_WhatInputCode, -1 ,taglist);
	LONG whatoutputcode = GetTagData(JCC_WhatOutputCode, -1 ,taglist);
	UBYTE firstbyte = GetTagData(JCC_FirstByte, 0xff ,taglist);
	LONG shiftedin = GetTagData(JCC_ShiftedIn, -1 ,taglist);
	union x
	{
		ULONG esc_l;
		UBYTE esc_c[4];
	} x;
	union y
	{
		ULONG hankata_l;
		UBYTE hankata_c[4];
	} y;
	x.esc_l = GetTagData(JCC_ESC, 0xffffffff ,taglist);
	y.hankata_l = GetTagData(JCC_HanKata, 0xffffffff ,taglist);

	if (whatinputcode != -1)
		jcc->jcc_WhatInputCode = whatinputcode;
	if (whatoutputcode != -1)
		jcc->jcc_WhatOutputCode = whatoutputcode;
	if (firstbyte != 0xff)
		jcc->jcc_FirstByte = firstbyte;
	if (x.esc_l != 0xffffffff)
	{
		int i;
		for (i = 0; i < 4; i++)
			jcc->jcc_ESC[i] = x.esc_c[i];
	}
	if (y.hankata_l != 0xffffffff)
	{
		int i;
		for (i = 0; i < 4; i++)
			jcc->jcc_HanKata[i] = y.hankata_c[i];
	}
	if (shiftedin != -1)
		jcc->jcc_ShiftedIn = shiftedin;
#if 0
	D(bug("jcc_whatinput = %ld\n", jcc->jcc_WhatInputCode));
	D(bug("jcc_whatoutput = %ld\n", jcc->jcc_WhatOutputCode));
	D(bug("jcc_firstbyte = 0x%lx\n", jcc->jcc_FirstByte));
	D(bug("jcc_esc = 0x%02x\n", jcc->jcc_ESC[0]));
	D(bug("jcc_hankata = 0x%02x\n", jcc->jcc_HanKata[0]));
	D(bug("jcc_shiftedin = %ld\n", jcc->jcc_ShiftedIn));
#endif
}

extern VOID __saveds __asm
pop(register __a0 LONG *p,
    register __a1 UBYTE *jcc_b);

LONG __saveds __asm
LIBIdentifyCodeSet(register __a0 struct JConversionCodeSet *jcc,
                   register __a1 UBYTE *inbuf,
                   register __d0 LONG length)
{
	LONG p1, p2, p3;
	LONG rcnt = 0;
	LONG rlen;
	LONG whatcode = CTYPE_ASCII;
	LONG whatcode_save = CTYPE_UNKNOWN;

	if (length == -1)
		rlen = strlen(inbuf);
	else
		rlen = length;
 
	if (length == -1)
	{
		if (jcc->jcc_FirstByte)
		{
			pop(&p1, &jcc->jcc_FirstByte);
			goto SECONDBYTE;
		}
		if (jcc->jcc_ESC[0] == ESC)
		{
			pop(&p1, &(jcc->jcc_ESC[0]));
			if (jcc->jcc_ESC[1] == '$'
			 || jcc->jcc_ESC[1] == '(')
			{
				pop(&p2, &(jcc->jcc_ESC[1]));
				goto ESC_3;
			}
			goto ESC_2;
		}
	}

	while (rcnt < rlen)
	{
		p1 = inbuf[rcnt++];
		if (p1 == ESC)
		{
			if (rcnt >= rlen)
			{
				if (length == -1)
				{
					jcc->jcc_ESC[0] = p1;
					whatcode = CTYPE_CONTINUE;
					break;
				}
				else
					break;
			}
ESC_2:
			p2 = inbuf[rcnt++];
			if (p2 == '$')
			{
				if (rcnt >= rlen)
				{
					if (length == -1)
					{
						jcc->jcc_ESC[0] = p1;
						jcc->jcc_ESC[1] = p2;
						whatcode = CTYPE_CONTINUE;
						break;
					}
					else
						break;
				}
ESC_3:
				p3 = inbuf[rcnt++];
				if (p3 == 'B')
				{
					whatcode_save = CTYPE_NEWJIS;
					continue;
				}
				else if (p3 == '@@')
				{
					whatcode_save = CTYPE_OLDJIS;
					continue;
				}
			}
			else if (p2 == 'K')
			{
				whatcode_save = CTYPE_NECJIS;
				continue;
			}
		}
		else if ((p1 >= 0x81) && (p1 <= 0xfe))
		{
			if (rcnt >= rlen)
			{
				if (length == -1)
				{
					if (whatcode_save != CTYPE_SJIS)
					{
						whatcode = CTYPE_CONTINUE;
						jcc->jcc_FirstByte = p1;
					}
					break;
				}
				else
					break;
			}
SECONDBYTE:
			p2 = inbuf[rcnt++];

			if (IS_NOT_EUC(p1, p2))
			{
				whatcode_save = CTYPE_SJIS;
				continue;
			}
			else if (IS_EUC_BYTE(p1) && IS_EUC_BYTE(p2))
			{
				if (whatcode_save != CTYPE_SJIS)
					whatcode_save = CTYPE_EUC;
				continue;
			}
			else if (((p1 == 0x8e)) && IS_HANKATA(p2))
			{
				if (whatcode_save != CTYPE_SJIS)
					whatcode_save = CTYPE_EUC;
				continue;
			}
		}
		/* 0x1a is at tail of PC98 text file */
		else if ((p1 >= 0x00) && (p1 < 0x08)
		      || (p1 >  0x0d) && (p1 < 0x1a))
		{
			whatcode = CTYPE_BINARY;
			break;
		}
	}

D(bug("whatcode,save = %02ld,%02ld\n",whatcode,whatcode_save));
	if (whatcode == CTYPE_ASCII)
		if (whatcode_save != CTYPE_UNKNOWN)
			whatcode = whatcode_save;

	return whatcode;
}
@


1.1
log
@Initial revision
@
text
@d25 4
a28 2
/************************** My debug stuff ***************************/
#define MYDEBUG	0
d30 1
a30 5
#define DBFLAG	0
#include <stdio.h>
void kprintf(UBYTE *, ...);
UBYTE b[40];
#define D(FMT,ARG) if(DBFLAG) {sprintf(b,FMT,ARG);kprintf("%s\n",b);}
d32 3
a34 3
#define D(FMT,ARG) ;
#endif
/*********************************************************************/
d44 12
d66 12
d81 8
a88 5
		D("jcc_whatinput = %ld", jcc->jcc_WhatInputCode);
		D("jcc_whatoutput = %ld", jcc->jcc_WhatOutputCode);
		D("jcc_firstbyte = 0x%lx", jcc->jcc_FirstByte);
		D("jcc_shiftedin = %ld", jcc->jcc_ShiftedIn);

d101 1
d112 1
a112 1
			register __a1 struct TagItem *taglist)
d118 1
a118 1
	D("taglist = $%lx", taglist);
d141 10
d164 1
a164 1
			register __a1 struct TagItem *taglist)
d170 12
d189 12
d203 9
d213 3
a215 5
	D("jcc_whatinput = %ld", jcc->jcc_WhatInputCode);
	D("jcc_whatoutput = %ld", jcc->jcc_WhatOutputCode);
	D("jcc_firstbyte = 0x%lx", jcc->jcc_FirstByte);
	D("jcc_shiftedin = %ld", jcc->jcc_ShiftedIn);
}
d219 2
a220 2
		   register __a1 UBYTE *inbuf,
		   register __d0 LONG length)
d222 1
a222 1
	UBYTE p1, p2, p3;
d224 1
a224 1
	LONG rlen = strlen(inbuf);
d226 1
d229 5
a233 3
		length = rlen;

	if (jcc->jcc_FirstByte)
d235 16
a250 13
		pop(&p1, &jcc->jcc_FirstByte);
		goto SECONDBYTE;
	}
	if (jcc->jcc_ESC[0] == ESC)
	{
		pop(&p1, &(jcc->jcc_ESC[0]));
		if (jcc->jcc_ESC[1] == '$'
		 || jcc->jcc_ESC[1] == '(')
		{
			pop(&p2, &(jcc->jcc_ESC[1]));
			goto ESC_3;
		}
		goto ESC_2;
d253 1
a253 1
	while (rcnt < rlen && rcnt < length)
d258 1
a258 1
			if (rcnt >= rlen || rcnt >= length)
d260 8
a267 3
				jcc->jcc_ESC[0] = p1;
				whatcode = CTYPE_CONTINUE;
				break;
d273 1
a273 1
				if (rcnt >= rlen || rcnt >= length)
d275 9
a283 4
					jcc->jcc_ESC[0] = p1;
					jcc->jcc_ESC[1] = p2;
					whatcode = CTYPE_CONTINUE;
					break;
d289 2
a290 2
					whatcode = CTYPE_NEWJIS;
					break;
d294 2
a295 2
					whatcode = CTYPE_OLDJIS;
					break;
d300 2
a301 2
				whatcode = CTYPE_NECJIS;
				break;
d306 1
a306 1
			if (rcnt >= rlen || rcnt >= length)
d308 11
a318 3
				jcc->jcc_FirstByte = p1;
				whatcode = CTYPE_CONTINUE;
				break;
d325 2
a326 2
				whatcode = CTYPE_SJIS;
				break;
d330 3
a332 1
				whatcode = CTYPE_EUC;
d336 3
a338 1
				whatcode = CTYPE_EUC;
d341 3
a343 2
		else if ((p1 > 0x00) && (p1 < 0x08)
		      || (p1 > 0x0d) && (p1 < 0x1b))
d349 5
@
