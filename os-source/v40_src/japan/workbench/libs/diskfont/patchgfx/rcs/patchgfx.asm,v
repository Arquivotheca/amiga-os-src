head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.2
date     93.12.14.12.10.18;  author darren;  state Exp;
branches ;
next     1.1;

1.1
date     93.02.01.12.26.23;  author darren;  state Exp;
branches ;
next     ;


desc
@Temporary kludges until these can be folded into graphics.library
@


1.2
log
@new comments
@
text
@**
**      $Id: patchgfx.asm,v 1.1 93/12/14 12:32:28 darren Exp $
**
**      diskfont.library -- temporary code to patch graphics.library
**		(this functionality must eventually go in graphics.library)
**
**      (C) Copyright 1992-1993 Commodore-Amiga, Inc.
**          All Rights Reserved
**

        SECTION diskfont


*
* includes
*

		INCLUDE	"exec/types.i"
		INCLUDE	"exec/tasks.i"
		INCLUDE "exec/resident.i"
                INCLUDE "exec/execbase.i"
		INCLUDE	"exec/memory.i"
		INCLUDE	"exec/io.i"
		INCLUDE	"exec/ports.i"
		INCLUDE "exec/ables.i"
		INCLUDE "exec/alerts.i"
		INCLUDE "exec/macros.i"
		INCLUDE "exec/semaphores.i"

		INCLUDE "exec/macros.i"
		INCLUDE	"hardware/intbits.i"

		INCLUDE "devices/audio.i"

		INCLUDE "graphics/gfxbase.i"
		INCLUDE "graphics/rastport.i"
		INCLUDE "/vecfont.i"
		INCLUDE "/text.i"

		INCLUDE	"utility/tagitem.i"
		INCLUDE	"diskfont/diskfonttag.i"

		INCLUDE "/ddebug.i"

		INCLUDE "txtdata.i"
		INCLUDE "macros.i"
*
* xrefs
*
		XREF	_LVOAlert
		XREF	_LVOFreeVec
		XREF	_LVOAllocVec
		XREF	_LVOFreeMem
		XREF	_LVOAllocMem

		XREF	_LVOExtendFont
		XREF	_LVOStripFont
		XREF	_LVOText
		XREF	_LVOPermit
		XREF	_LVOCloseFont
		XREF	_LVOTextLength
		XREF	_LVOFontExtent
		XREF	_LVOTextExtent
		XREF	_LVOTextFit

		XREF	_LVOMove

*
* macros
*

* equates
*

EXECBASE		EQU		4

*
* This is a bunch of kludged patches to graphics.library to enable
* support for vectored fonts.  The key components are:
*
*	ExtendFont() - allocates an additional pointer to
*		store a vector table
*
*	StripFont() - deallocates the larger font extension
*
*	CloseFont() is now revectored so that a vectored font
*		can perform customized closing a font
*
*	Move() is now revectored so that a rp_dummy can be
*		cleared for multi-byte font support (kludge)
*
*	Support revectoring of --
*
*	Text()
*	TextLength()
*	FontExtent()
*	TextFit()
*	TextLength()
*
*
		XDEF	_InstallGfxPatches

_InstallGfxPatches:


	PRINTF	DBG_FLOW,<'DF--Install Graphics Patches'>

		movem.l	a2/a6,-(sp)

		movea.l	EXECBASE,a6

		moveq	#39,d0
		lea	gfxname(pc),a1

		JSRLIB	OpenLibrary
		tst.l	d0
		beq	failed

		FORBID

	; install WeighTAMatch patch first, followed by OpenFont which
	; relies on it

		movea.l		d0,a2
		movea.l		d0,a1
		move.w		#_LVOExtendFont,a0
		move.l		#_ExtendFont,d0

		JSRLIB	SetFunction


		movea.l		a2,a1
		move.w		#_LVOStripFont,a0
		move.l		#_StripFont,d0

		JSRLIB	SetFunction


		movea.l		a2,a1
		move.w		#_LVOText,a0
		move.l		#_Text,d0

		JSRLIB	SetFunction

		move.l		d0,oldText

		movea.l		a2,a1
		move.w		#_LVOCloseFont,a0
		move.l		#_CloseFont,d0

		JSRLIB	SetFunction

		move.l		d0,oldClose

		movea.l		a2,a1
		move.w		#_LVOTextLength,a0
		move.l		#_TextLength,d0

		JSRLIB	SetFunction

		move.l		d0,oldTextLength

		movea.l		a2,a1
		move.w		#_LVOFontExtent,a0
		move.l		#_FontExtent,d0

		JSRLIB	SetFunction

		move.l		d0,oldFontExtent

		movea.l		a2,a1
		move.w		#_LVOTextExtent,a0
		move.l		#_TextExtent,d0

		JSRLIB	SetFunction

		move.l		d0,oldTextExtent

		movea.l		a2,a1
		move.w		#_LVOTextFit,a0
		move.l		#_TextFit,d0

		JSRLIB	SetFunction

		move.l		d0,oldTextFit



		movea.l		a2,a1
		move.w		#_LVOMove,a0
		move.l		#_Move,d0

		JSRLIB	SetFunction

		move.l		d0,oldMove

		JSRLIB	CacheClearU
		PERMIT

	PRINTF	DBG_FLOW,<'DF-Graphics Patches Installed'>

failed:

		movem.l	(sp)+,a2/a6
		rts


*
* patches
*
******* Move() hook function ****************************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_Move:
		cmp.w	rp_cp_x(a1),d0
		bne.s	clearprechar

		cmp.w	rp_cp_y(a1),d1
		beq.s	noclearprechar
clearprechar:
		clr.b	rp_Dummy(a1)
noclearprechar:
		dc.w	$4ef9			;jmp
oldMove
		dc.l	0
		rts

******* FontExtent() hook function ******************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_FontExtent:
		movem.l	d2/a3/a5-a6,-(sp)

		move.l	a0,a3
		move.l	tf_Extension(a3),d2
		beq.s	notextended6

		move.l	d2,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended6
		cmp.l	tfe_BackPtr(a5),a3
		bne.s	notextended6

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended6

		move.l	tfe_VectoredFont(a5),a3
		move.l	oldFontExtent(pc),a5		;pointer to real function
		
		move.l	txv_FontExtentFunc(a3),d2
		beq.s	notextended6

		move.l	txv_UserData(a3),a6
		move.l	d2,a3

		jsr	(a3)

		movem.l	(sp)+,d2/a3/a5-a6
		rts

notextended6:
		movem.l	(sp)+,d2/a3/a5-a6

		dc.w	$4ef9			;jmp
oldFontExtent:
		dc.l	0
		rts

******* TextFit() hook function ******************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_TextFit:
		movem.l	d4/a4/a5-a6,-(sp)

		move.l	rp_Font(a1),a4
		move.l	tf_Extension(a4),d4
		beq.s	notextended5

		move.l	d4,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended5
		cmp.l	tfe_BackPtr(a5),a4
		bne.s	notextended5

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended5

		move.l	tfe_VectoredFont(a5),a4
		move.l	oldTextFit(pc),a5		;pointer to real function
		
		move.l	txv_TextFitFunc(a4),d4
		beq.s	notextended5

		move.l	txv_UserData(a4),a6
		move.l	d4,a4

		jsr	(a4)

		movem.l	(sp)+,d4/a4/a5-a6
		rts

notextended5:
		movem.l	(sp)+,d4/a4/a5-a6

		dc.w	$4ef9			;jmp
oldTextFit:
		dc.l	0
		rts

******* TextExtent() hook function ******************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_TextExtent:
		movem.l	d2/a3/a5-a6,-(sp)

		move.l	rp_Font(a1),a3
		move.l	tf_Extension(a3),d2
		beq.s	notextended4

		move.l	d2,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended4
		cmp.l	tfe_BackPtr(a5),a3
		bne.s	notextended4

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended4

		move.l	tfe_VectoredFont(a5),a3
		move.l	oldTextLength(pc),a5		;pointer to real function
		
		move.l	txv_TextExtentFunc(a3),d2
		beq.s	notextended4

		move.l	txv_UserData(a3),a6
		move.l	d2,a3

		jsr	(a3)

		movem.l	(sp)+,d2/a3/a5-a6
		rts

notextended4:
		movem.l	(sp)+,d2/a3/a5-a6

		dc.w	$4ef9			;jmp
oldTextExtent:
		dc.l	0
		rts

******* TextLength() hook function ******************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_TextLength:
		movem.l	d2/a2/a5-a6,-(sp)

		move.l	rp_Font(a1),a2
		move.l	tf_Extension(a2),d2
		beq.s	notextended3

		move.l	d2,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended3
		cmp.l	tfe_BackPtr(a5),a2
		bne.s	notextended3

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended3

		move.l	tfe_VectoredFont(a5),a2
		move.l	oldTextLength(pc),a5		;pointer to real function
		
		move.l	txv_TextLengthFunc(a2),d2
		beq.s	notextended3

		move.l	txv_UserData(a2),a6
		move.l	d2,a2

		jsr	(a2)

		movem.l	(sp)+,d2/a2/a5-a6
		rts

notextended3:
		movem.l	(sp)+,d2/a2/a5-a6
calloldTextLength:
		dc.w	$4ef9			;jmp
oldTextLength:
		dc.l	0
		rts

******* CloseFont() hook function ******************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC

_CloseFont:
		movem.l	d2/a2/a5-a6,-(sp)

		move.l	a1,a2
		move.l	tf_Extension(a2),d2
		beq.s	notextended2

		move.l	d2,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended2
		cmp.l	tfe_BackPtr(a5),a2
		bne.s	notextended2

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended2

		move.l	tfe_VectoredFont(a5),a2
		move.l	oldClose(pc),a5		;pointer to real function
		
		move.l	txv_CloseFunc(a2),d2
		beq.s	notextended2

		move.l	txv_UserData(a2),a6
		move.l	d2,a2

		jsr	(a2)

		movem.l	(sp)+,d2/a2/a5-a6
		rts

notextended2:
		movem.l	(sp)+,d2/a2/a5-a6
calloldClose:
		dc.w	$4ef9			;jmp
oldClose:
		dc.l	0
		rts

******* Text() hook function *************************************************
*
*

        IFND    TE0B_VECTORED
                BITDEF  TE0,VECTORED,4  ; vectored font
        ENDC
_Text:
		movem.l	d2/a2/a5-a6,-(sp)

		move.l	rp_Font(a1),a2
		move.l	tf_Extension(a2),d2
		beq.s	notextended

		move.l	d2,a5
		cmp.w	#TE_MATCHWORD,(a5)
		bne.s	notextended
		cmp.l	tfe_BackPtr(a5),a2
		bne.s	notextended

		btst	#TE0B_VECTORED,tfe_Flags0(a5)
		beq.s	notextended

		move.l	tfe_VectoredFont(a5),a2
		move.l	oldText(pc),a5		;pointer to real function
		
		move.l	txv_TextFunc(a2),d2
		beq.s	notextended

		move.l	txv_UserData(a2),a6
		move.l	d2,a2

		jsr	(a2)

		movem.l	(sp)+,d2/a2/a5-a6
		rts

notextended:
		movem.l	(sp)+,d2/a2/a5-a6
calloldText:
		dc.w	$4ef9			;jmp
oldText:
		dc.l	0
		rts

** ASSUMES that ROM fonts can never be closed, and that diskfont.library
** MUST be opened to support patching of any newly opened fonts ... therefore,
** StripFont will never be called for a font which has not been extended
** with the new size.

******* graphics.library/ExtendFont *******************************************
*
*   NAME
*	ExtendFont -- ensure tf_Extension has been built for a font (V36)
*
*   SYNOPSIS
*	success = ExtendFont(font, fontTags)
*	D0                   A0    A1
*
*	ULONG ExtendFont(struct TextFont *, struct TagItem *);
*
*	success = ExtendFontTags(font, Tag1, ...)  (V39)
*
*	ULONG ExtendFontTags(struct TextFont *, ULONG, ...);
*
*   FUNCTION
*	To extend a TextFont structure.
*
*   INPUTS
*	font - The font to extend.
*	fontTags - An optional taglist.  If NULL, then a default is used.
*	           Currently, the only tag defined is TA_DeviceDPI.
*
*   RESULT
*	success - 1 if the TextFont was properly extended, else 0.
*
*   NOTES
*	The varargs stub was missing from amiga.lib until V39.
*
*   SEE ALSO
*	graphics/text.h
*
*******************************************************************************
_ExtendFont:
		;-- check quickly if this font has been compiled yet
		move.l	a1,d0
		move.l	tf_Extension(a0),d1
		beq.s	efUncompiled
		move.l	d1,a1
		cmp.w	#TE_MATCHWORD,(a1)	; tfe_MatchWord(a1)
		bne.s	efUncompiled
		cmp.l	tfe_BackPtr(a1),a0
		bne.s	efUncompiled
		moveq	#1,d0
		rts


efDefaultTags:
		dc.l	0
		dc.l	efTallDotTags
		dc.l	efWideDotTags
		dc.l	0

efTallDotTags:
		dc.l	TA_DeviceDPI,(100<<16)!50
		dc.l	TAG_DONE

efWideDotTags:
		dc.l	TA_DeviceDPI,(50<<16)!100
		dc.l	TAG_DONE


;
;   d0	temporary, e.g. origin
;   d1	temporary, e.g. size
;   d2	temporary, e.g. fontTags, #8, space
;   d3	kern
;   d4	decrementing character count
;   d5	tf_XSize
;   d6	tf_Modulo*8
;
;   a0	
;   a1	
;   a2	
;   a3	TextFont
;   a4	TextFontExtension
;
efUncompiled:
		movem.l	d2-d6/a2-a4,-(a7)
		move.l	a0,a3		; save font
		move.l	d0,d2		; and fontTags

		addq.w	#1,tf_Accessors(a3)	; ensure not expunged

		;-- get memory for TextFontExtension
		moveq	#tfe_SIZEOF,d0
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		LINKEXE	AllocMem

		tst.l	d0
		beq	efDone

		;-- initialize TextFontExtension
		move.l	d0,a4
		move.w	#TE_MATCHWORD,(a4)	; tfe_MatchWord(a4)
		move.l	a3,tfe_BackPtr(a4)
		move.l	tf_Extension(a3),tfe_OrigReplyPort(a4)
		move.l	d2,tfe_Tags(a4)
		bne.s	efCompileFlags0

		;-- use default tags if TALLDOT or WIDEDOT
		move.b	tf_Flags(a3),d0
		and.w	#FPF_TALLDOT!FPF_WIDEDOT,d0
		lsr.w	#FPB_TALLDOT-2,d0
		move.l	efDefaultTags(pc,d0.w),tfe_Tags(a4)

efCompileFlags0:
		moveq	#8,d2
		move.w	tf_XSize(a3),d5
		move.w	tf_Modulo(a3),d6
		lsl.w	#3,d6			; pixel width: origin bound
		;-- look to see if it's a byte font
		btst	#FPB_PROPORTIONAL,tf_Flags(a3)
		bne.s	efChkKernless
		btst	#FSB_COLORFONT,tf_Style(a3)
		bne.s	efChkKernless
		cmp.w	d2,d5
		bne.s	efChkKernless
		;--	check for byte fonts
		tst.l	tf_CharKern(a3)
		bne.s	efChkKernless
		tst.l	tf_CharSpace(a3)
		bne.s	efChkKernless

		;-- perform the longest bytefont test
		moveq	#0,d4
		move.b	tf_HiChar(a3),d4
		sub.b	tf_LoChar(a3),d4
		move.l	tf_CharLoc(a3),a0
efChkSize8:
		move.w	(a0)+,d0		; check for start location
		cmp.w	d6,d0			;   within strike font
		bge.s	efChkKernless
		andi.w	#7,d0			;   and byte offset
		bne.s	efChkKernless
		cmp.w	(a0)+,d2		; check for byte size
		dbne	d4,efChkSize8
		bne.s	efChkKernless

		;-- this is a bytefont (which is also kernless)
		move.b	#TE0F_KERNLESS!TE0F_BYTECELL,tfe_Flags0(a4)
		bra.s	efCompiled

	    ;-- look harder to see if it's a kernless font
efChkKernless:
		moveq	#0,d4
		move.b	tf_HiChar(a3),d4
		sub.b	tf_LoChar(a3),d4
		move.l	tf_CharLoc(a3),a0
		move.l	tf_CharKern(a3),d0
		beq.s	efNoKern
		move.l	tf_CharSpace(a3),d1
		beq	efOSpace

		;-- both
		move.l	d0,a1
		move.l	d1,a2
efBothLoop:
		move.w	(a0)+,d0	; origin
		move.w	(a0)+,d1	; size
		move.w	(a2)+,d2	; space
		move.w	(a1)+,d3	; kern
		bmi.s	efNotKernless	; negative kern
		add.w	d2,d3
		cmp.w	d3,d5
		bne.s	efNotKernless	; width != tf_XSize
		cmp.w	d1,d2
		blt.s	efNotKernless	; space < bit width
		tst.w	d1
		beq.s	efBothDBF	; no width, so don't care where
		add.w	d1,d0
		cmp.w	d6,d0
efBothDBF:
		dbgt	d4,efBothLoop
		ble.s	efKernless

		;--	bad offset but kernless so far
efBadKernlessOffset:
		tst.w	d4		; for undefined character?
;13Jun90    for EA's ShangHai's gene.font -- don't obsolete it.
;13Jun90	bne	efObsoleteFont
		bne.s	efKernless
		;--	patch bad undefined character by making it the same
		;	as the HiChar itself
		subq.b	#1,tf_HiChar(a3)
		bra.s	efKernless


		;-- no kern & ?
efNoKern:
		tst.l	tf_CharSpace(a3)
		bne.s	efOKern

		;-- neither
efNeitherLoop:
		move.w	(a0)+,d0	; origin
		move.w	(a0)+,d1	; size
		beq.s	efNeitherDBF	; no width, so don't care where
		cmp.w	d1,d5
		blt.s	efOKernSpace	; space < bit width
		add.w	d1,d0
		cmp.w	d6,d0
efNeitherDBF:
		dbgt	d4,efNeitherLoop
		bgt.s	efBadKernlessOffset

efKernless:
		move.b	#TE0F_KERNLESS,tfe_Flags0(a4)

efCompiled:
		move.l	a4,tf_Extension(a3)
**************  removed for 2.03 -- bart ****************************
*	
* the problem was that old programs are initializing textattr structs
* with the first n bytes of a textfont, to force it to remain open.
* however they were getting the tagged bit set in the style so that
* an improper parsing of non-existant tags was taking place.
*	
*		bset	#FSB_TAGGED,tf_Style(a3)
*	
**************  removed for 2.03 -- bart ****************************
		moveq	#1,d0

efDone:
		subq.w	#1,tf_Accessors(a3)

		movem.l	(a7)+,d2-d6/a2-a4
		rts


efnkLoop:
		move.w	(a0)+,d0
		move.w	(a0)+,d1
efNotKernless:
		tst.w	d1
		beq.s	efnkDBF		; no width, so don't care where
		add.w	d1,d0
		cmp.w	d6,d0
efnkDBF:
		dbgt	d4,efnkLoop
		ble.s	efCompiled

		tst.w	d4		; for undefined character?
;13Jun90    for EA's ShangHai's gene.font -- don't obsolete it.
;13Jun90	bne.s	efObsoleteFont
		bne.s	efCompiled
		;--	patch bad undefined character by making it the same
		;	as the HiChar itself
		subq.b	#1,tf_HiChar(a3)
		bra.s	efCompiled


efOKernSpace:
		bsr.s	efOAllocVec
		move.l	a0,tfe_OFontPatchK(a4)
		move.l	a0,tf_CharKern(a3)
		;--	default kern is zero so no initialization needed

efOSpace:
		bsr.s	efOAllocVec
		move.l	a0,tfe_OFontPatchS(a4)
		move.l	a0,tf_CharSpace(a3)
		move.w	d4,d1
efOBuildSpace:
		move.w	d5,(a0)+
		dbf	d1,efOBuildSpace
		bra.s	efOPatched

efOKern:
		bsr.s	efOAllocVec
		move.l	a0,tfe_OFontPatchK(a4)
		move.l	a0,tf_CharKern(a3)
		;--	default kern is zero so no initialization needed

efOPatched:
		move.l	tf_CharLoc(a3),a0
		move.l	tf_CharKern(a3),a1
		move.l	tf_CharSpace(a3),a2
		bra	efBothLoop

efOAllocVec:
		moveq	#0,d4
		move.b	tf_HiChar(a3),d4
		sub.b	tf_LoChar(a3),d4
		move.l	d4,d0
		addq.l	#1,d0
		add.l	d0,d0
		move.l	#MEMF_CLEAR,d1
		LINKEXE	AllocVec
		move.l	d0,a0
		move.l	(a7)+,a1
		tst.l	d0
		beq.s	efObsoleteFont
		jmp	(a1)

		;-- font is obsolete and unpatchable
efObsoleteFont:
		movem.l	d7/a6,-(a7)
		move.l	#AN_ObsoleteFont,d7
		move.l	gb_ExecBase(a6),a6
		CALLLVO	Alert
		move.l	tfe_OFontPatchS(a4),a1
		CALLLVO	FreeVec
		move.l	tfe_OFontPatchK(a4),a1
		CALLLVO	FreeVec
		move.l	a4,a1
		moveq	#tfe_SIZEOF,d0
		CALLLVO	FreeMem
		movem.l	(a7)+,d7/a6
		moveq	#0,d0
		bra	efDone


******* graphics.library/StripFont ***********************************
*
*   NAME
*	StripFont -- remove the tf_Extension from a font (V36)
*
*   SYNOPSIS
*	StripFont(font)
*	          A0
*
*	VOID StripFont(struct TextFont *);
*
**********************************************************************
_StripFont:
		;-- check if this font has been compiled
		move.l	tf_Extension(a0),d1
		beq.s	sfRts
		move.l	d1,a1
		cmp.w	#TE_MATCHWORD,(a1)	; tfe_MatchWord(a1)
		bne.s	sfRts
		cmp.l	tfe_BackPtr(a1),a0
		bne.s	sfRts

		movem.l	a2/a3/a6,-(a7)
		move.l	a0,a2
		move.l	a1,a3
		move.l	gb_ExecBase(a6),a6
		;--	put original reply port back in font message
		move.l	tfe_OrigReplyPort(a3),tf_Extension(a2)
		move.l	tfe_OFontPatchS(a3),d0
		beq.s	sfUnPatchK
		clr.l	tf_CharSpace(a2)
		move.l	d0,a1
		CALLLVO	FreeVec
sfUnPatchK:
		move.l	tfe_OFontPatchK(a3),d0
		beq.s	sfUnVec
		clr.l	tf_CharKern(a2)
		move.l	d0,a1
		CALLLVO	FreeVec
sfUnVec:
		move.l	tfe_VectoredFont(a3),d0
		beq.s	sfFreeTFE
		move.l	d0,a1
		CALLLVO	FreeVec
sfFreeTFE:
		move.l	a3,a1
		moveq	#tfe_SIZEOF,d0
		CALLLVO	FreeMem
		movem.l	(a7)+,a2/a3/a6

sfRts:
		rts



gfxname:	dc.b	'graphics.library',0

		END
@


1.1
log
@Initial revision
@
text
@d1 11
a11 3
*
* Graphics patches -- used during development
* 
d75 1
a75 1
EXECBASE	EQU		4
d78 22
a99 1
* code
d110 1
a110 1
		movea.l		EXECBASE,a6
a118 1

d211 1
a211 1
******* Move() function ****************************************************
d233 1
a233 1
******* FontExtenthook function ******************************************
d507 5
@
