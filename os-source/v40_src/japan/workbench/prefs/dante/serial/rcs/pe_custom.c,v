head     38.18;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.18
date     93.01.25.09.39.27;  author delarge;  state Exp;
branches ;
next     38.17;

38.17
date     92.11.11.16.01.38;  author vertex;  state Exp;
branches ;
next     38.16;

38.16
date     92.11.06.13.52.57;  author vertex;  state Exp;
branches ;
next     38.15;

38.15
date     92.03.24.17.50.21;  author vertex;  state Exp;
branches ;
next     38.14;

38.14
date     92.01.27.14.24.31;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     91.12.11.09.19.50;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     91.11.11.11.24.57;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     91.11.11.11.04.03;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.09.19.16.10.59;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.09.19.15.54.18;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.09.19.13.26.57;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.08.20.09.58.16;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.12.13.03.39;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.06.15.24.23;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.07.15.12.14.46;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.11.14.40.31;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.19.09.47;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.17.19.02;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - Serial custom interface
@


38.18
log
@corrected Japan support per Kaori request
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <devices/keymap.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <graphics/text.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/serial.h>
#include <dos/dos.h>
#include <dos/exall.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>
#include <clib/icon_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/asl_pragmas.h>
#include <pragmas/icon_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"


#define SysBase ed->ed_SysBase


/*****************************************************************************/


UWORD BaudToSlider(UWORD baudRate);
UWORD BufferToSlider(ULONG bufSize);
ULONG __stdargs SliderToBaud(struct Gadget *gadget, UWORD sliderLevel);
ULONG __stdargs SliderToBuffer(struct Gadget *gadget, UWORD sliderLevel);


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_SERL,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
};


/*****************************************************************************/


VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj)
{
    if (diskObj)
    {
        if (FindToolType(diskObj->do_ToolTypes,"UNIT"))
        {
            ed->ed_ShowUnits = TRUE;
        }
    }
    else
    {
        ed->ed_ShowUnits = ed->ed_Args[OPT_UNIT];
    }
}


/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
    ed->ed_PrefsDefaults.sp_Unit0Map        = 1;
    ed->ed_PrefsDefaults.sp_BaudRate        = 9600;
    ed->ed_PrefsDefaults.sp_InputBuffer     = 512;
    ed->ed_PrefsDefaults.sp_OutputBuffer    = 512;
    ed->ed_PrefsDefaults.sp_InputHandshake  = HSHAKE_XON;
    ed->ed_PrefsDefaults.sp_OutputHandshake = HSHAKE_XON;
    ed->ed_PrefsDefaults.sp_Parity          = PARITY_NONE;
    ed->ed_PrefsDefaults.sp_BitsPerChar     = 8;
    ed->ed_PrefsDefaults.sp_StopBits        = 1;

    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

    return(ES_NORMAL);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (cn->cn_ID != ID_SERL || cn->cn_Type != ID_PREF)
        return(ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct SerialPrefs)) == sizeof(struct SerialPrefs))
        return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
{
EdStatus result;

    result = ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs);

    if (ed->ed_PrefsWork.sp_Unit0Map == 0)
        ed->ed_PrefsWork.sp_Unit0Map = 1;

    return(result);
}


/*****************************************************************************/


EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (!PushChunk(iff,0,ID_SERL,sizeof(struct SerialPrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct SerialPrefs)) == sizeof(struct SerialPrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
{
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
}


/*****************************************************************************/


#define NW_WIDTH     485
#define NW_HEIGHT    185
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | IDCMP_INTUITICKS | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP | LISTVIEWIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

struct EdMenu far EM[] = {
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN, 0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP, 0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE, 0},

    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},

    {NM_END,    MSG_NOTHING,                EC_NOP, 0}
};

/* main display gadgets */
struct EdGadget far EG[] = {
    {BUTTON_KIND,   8,   160,  87,  20, MSG_SAVE_GAD,         EC_SAVE,     0},
    {BUTTON_KIND,   191, 160,  87,  20, MSG_USE_GAD,          EC_USE,      0},
    {BUTTON_KIND,   375, 160,  87,  20, MSG_CANCEL_GAD,       EC_CANCEL,   0},

    {SLIDER_KIND,   300, 8,    150, 11, MSG_SER_BAUDRATE_GAD,     EC_BAUDRATE, 0},
    {SLIDER_KIND,   300, 26,   150, 11, MSG_SER_INPUTBUF_GAD,     EC_INPUTBUF, 0},

    {MX_KIND,       100, 65,   110, 11, MSG_SER_HANDSHAKING_GAD,  EC_HANDSHAKING, 0},
    {MX_KIND,       210, 65,   110, 11, MSG_SER_PARITY_GAD,       EC_PARITY,      0},
    {MX_KIND,       320, 65,   110, 11, MSG_SER_DATABITS_GAD,     EC_DATABITS,    0},
    {MX_KIND,       430, 65,   110, 11, MSG_SER_STOPBITS_GAD,     EC_STOPBITS,    0},

    {INTEGER_KIND,  400, 93,   46,  14, MSG_SER_DEFAULTUNIT_GAD,  EC_DEFAULTUNIT, 0}
};


/*****************************************************************************/


BOOL CreateDisplay(EdDataPtr ed)
{
UWORD              zoomSize[4];
struct LocaleInfo *li;

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    li = &ed->ed_LocaleInfo;
    ed->ed_HandshakingLabels[0]  = GetString(li,MSG_SER_XON_XOFF);
    ed->ed_HandshakingLabels[1]  = GetString(li,MSG_SER_RTS_CTS);
    ed->ed_HandshakingLabels[2]  = GetString(li,MSG_SER_NONE);
    ed->ed_ParityLabels[0]       = GetString(li,MSG_SER_PNONE);
    ed->ed_ParityLabels[1]       = GetString(li,MSG_SER_EVEN);
    ed->ed_ParityLabels[2]       = GetString(li,MSG_SER_ODD);
    ed->ed_ParityLabels[3]       = GetString(li,MSG_SER_MARK);
    ed->ed_ParityLabels[4]       = GetString(li,MSG_SER_SPACE);
    ed->ed_DataBitsLabels[0]     = "7";
    ed->ed_DataBitsLabels[1]     = "8";
    ed->ed_StopBitsLabels[0]     = "1";
    ed->ed_StopBitsLabels[1]     = "2";

    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);

    RenderGadgets(ed);

    if ((ed->ed_LastAdded)
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SER_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
    {
        return(TRUE);
    }

    DisposeDisplay(ed);
    return(FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay(EdDataPtr ed)
{
    if (ed->ed_Window)
    {
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
    }
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/


ULONG far BaudRates[8] = {110, 300,  1200, 2400, 4800, 9600,  19200, 31250};
ULONG far BufferSizes[8] = {512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};


/*****************************************************************************/


UWORD BaudToSlider(UWORD baudRate)
{
UWORD i;

    for (i = 0; i < 8; i++)
    {
	if (baudRate == BaudRates[i])
	    return(i);
    }
    return(0);
}


/*****************************************************************************/


ULONG __stdargs SliderToBaud(struct Gadget *gadget, UWORD sliderLevel)
{
    return(BaudRates[sliderLevel]);
}


/*****************************************************************************/


UWORD BufferToSlider(ULONG bufSize)
{
UWORD i;

    for (i = 0; i < 8; i++)
    {
	if (bufSize == BufferSizes[i])
	    return(i);
    }

    return(0);
}


/*****************************************************************************/


ULONG __stdargs SliderToBuffer(struct Gadget *gadget, UWORD sliderLevel)
{
    return(BufferSizes[sliderLevel]);
}


/*****************************************************************************/


VOID RightAlign(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    Move(rp,x - TextLength(rp,str,len) + window->BorderLeft+5,
            window->BorderTop+y);
    Text(rp,str,len);
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
{
struct RastPort *rp;

    rp = ed->ed_Window->RPort;
    SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
    SetBPen(rp,ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);

    RightAlign(ed,rp,MSG_SER_HANDSHAKING_GAD,105,60);
    RightAlign(ed,rp,MSG_SER_PARITY_GAD,215,60);
    RightAlign(ed,rp,MSG_SER_DATABITS_GAD,325,60);
    RightAlign(ed,rp,MSG_SER_STOPBITS_GAD,435,60);
}


/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
STRPTR ptr;

    ptr = "%7lu";
    if (LocaleBase)
        ptr = "%7lU";

    ed->ed_BaudRate = DoPrefsGadget(ed,&EG[3],ed->ed_BaudRate,
                                              GTSL_Level,       BaudToSlider(ed->ed_PrefsWork.sp_BaudRate),
                                              GTSL_Max,         7,
                                              GTSL_MaxLevelLen, 7,
                                              GTSL_LevelFormat, ptr,
                                              GTSL_DispFunc,    SliderToBaud,
                                              GA_Immediate,     TRUE,
                                              TAG_DONE);

    ed->ed_InputBuf = DoPrefsGadget(ed,&EG[4],ed->ed_InputBuf,
                                              GTSL_Level,       BufferToSlider(ed->ed_PrefsWork.sp_InputBuffer),
                                              GTSL_Max,         7,
                                              GTSL_MaxLevelLen, 7,
                                              GTSL_LevelFormat, ptr,
                                              GTSL_DispFunc,    SliderToBuffer,
                                              GA_Immediate,     TRUE,
                                              TAG_DONE);

    ed->ed_Handshaking = DoPrefsGadget(ed,&EG[5],ed->ed_Handshaking,
                                                 GTMX_Active,     ed->ed_PrefsWork.sp_InputHandshake,
                                                 GTMX_Labels,     ed->ed_HandshakingLabels,
                                                 LAYOUTA_SPACING, 8,
                                                 TAG_DONE);

    ed->ed_Parity = DoPrefsGadget(ed,&EG[6],ed->ed_Parity,
                                            GTMX_Active,     ed->ed_PrefsWork.sp_Parity,
                                            GTMX_Labels,     ed->ed_ParityLabels,
                                            LAYOUTA_SPACING, 8,
                                            TAG_DONE);

    ed->ed_DataBits = DoPrefsGadget(ed,&EG[7],ed->ed_DataBits,
                                              GTMX_Active,     ed->ed_PrefsWork.sp_BitsPerChar-7,
                                              GTMX_Labels,     ed->ed_DataBitsLabels,
                                              LAYOUTA_SPACING, 8,
                                              TAG_DONE);

    ed->ed_StopBits = DoPrefsGadget(ed,&EG[8],ed->ed_StopBits,
                                              GTMX_Active,     ed->ed_PrefsWork.sp_StopBits-1,
                                              GTMX_Labels,     ed->ed_StopBitsLabels,
                                              LAYOUTA_SPACING, 8,
                                              TAG_DONE);

    if (ed->ed_ShowUnits)
        ed->ed_DefaultUnit = DoPrefsGadget(ed,&EG[9],ed->ed_DefaultUnit,
                                                     GTIN_Number,   ed->ed_PrefsWork.sp_Unit0Map,
                                                     GTIN_MaxChars, 3,
						     TAG_DONE);
}


/*****************************************************************************/


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD icode;
LONG  num;

    icode = ed->ed_CurrentMsg.Code;

    switch (ec)
    {
        case EC_BAUDRATE   : ed->ed_PrefsWork.sp_BaudRate = SliderToBaud(NULL,icode);
                             break;

        case EC_INPUTBUF   : ed->ed_PrefsWork.sp_InputBuffer = SliderToBuffer(NULL,icode);
                             break;

        case EC_HANDSHAKING: ed->ed_PrefsWork.sp_InputHandshake = icode;
                             break;

        case EC_PARITY     : ed->ed_PrefsWork.sp_Parity = icode;
                             break;

        case EC_DATABITS   : ed->ed_PrefsWork.sp_BitsPerChar = icode+7;
                             break;

        case EC_STOPBITS   : ed->ed_PrefsWork.sp_StopBits = icode+1;
                             break;

        case EC_DEFAULTUNIT: num = ((struct StringInfo *)ed->ed_DefaultUnit->SpecialInfo)->LongInt;
                             if (num < 0)
                             {
                                 num = 0;
                                 DisplayBeep(window->WScreen);
                                 RenderGadgets(ed);
                             }
                             else if (num > 255)
                             {
                                 num = 255;
                                 DisplayBeep(window->WScreen);
                                 RenderGadgets(ed);
                             }
                             ed->ed_PrefsWork.sp_Unit0Map = num;
                             break;

        default            : break;
    }
}


/*****************************************************************************/


VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{
    state->cs_Available = TRUE;
    state->cs_Selected  = FALSE;
}
@


38.17
log
@ADDED JAPAN SUPPORT
@
text
@d181 1
a181 1
#define NW_WIDTH     470
d372 1
a372 1
    Move(rp,x - TextLength(rp,str,len) + window->BorderLeft,
d389 4
a392 4
    RightAlign(ed,rp,MSG_SER_HANDSHAKING_GAD,100,60);
    RightAlign(ed,rp,MSG_SER_PARITY_GAD,210,60);
    RightAlign(ed,rp,MSG_SER_DATABITS_GAD,320,60);
    RightAlign(ed,rp,MSG_SER_STOPBITS_GAD,430,60);
@


38.16
log
@Added Japan Support
@
text
@d182 1
a182 1
#define NW_HEIGHT    175
d211 3
a213 3
    {BUTTON_KIND,   8,   150,  87,  20, MSG_SAVE_GAD,         EC_SAVE,     0},
    {BUTTON_KIND,   191, 150,  87,  20, MSG_USE_GAD,          EC_USE,      0},
    {BUTTON_KIND,   375, 150,  87,  20, MSG_CANCEL_GAD,       EC_CANCEL,   0},
d216 1
a216 1
    {SLIDER_KIND,   300, 24,   150, 11, MSG_SER_INPUTBUF_GAD,     EC_INPUTBUF, 0},
d218 4
a221 4
    {MX_KIND,       100, 60,   110, 11, MSG_SER_HANDSHAKING_GAD,  EC_HANDSHAKING, 0},
    {MX_KIND,       210, 60,   110, 11, MSG_SER_PARITY_GAD,       EC_PARITY,      0},
    {MX_KIND,       320, 60,   110, 11, MSG_SER_DATABITS_GAD,     EC_DATABITS,    0},
    {MX_KIND,       430, 60,   110, 11, MSG_SER_STOPBITS_GAD,     EC_STOPBITS,    0},
d389 4
a392 4
    RightAlign(ed,rp,MSG_SER_HANDSHAKING_GAD,100,53);
    RightAlign(ed,rp,MSG_SER_PARITY_GAD,210,53);
    RightAlign(ed,rp,MSG_SER_DATABITS_GAD,320,53);
    RightAlign(ed,rp,MSG_SER_STOPBITS_GAD,430,53);
@


38.15
log
@Removed WA_Left and WA_Top
@
text
@d182 1
a182 1
#define NW_HEIGHT    143
d211 3
a213 3
    {BUTTON_KIND,   8,   126,  87,  14, MSG_SAVE_GAD,         EC_SAVE,     0},
    {BUTTON_KIND,   191, 126,  87,  14, MSG_USE_GAD,          EC_USE,      0},
    {BUTTON_KIND,   375, 126,  87,  14, MSG_CANCEL_GAD,       EC_CANCEL,   0},
d215 7
a221 7
    {SLIDER_KIND,   300, 5,    150, 11, MSG_SER_BAUDRATE_GAD,     EC_BAUDRATE, 0},
    {SLIDER_KIND,   300, 17,   150, 11, MSG_SER_INPUTBUF_GAD,     EC_INPUTBUF, 0},

    {MX_KIND,       100, 51,   110, 11, MSG_SER_HANDSHAKING_GAD,  EC_HANDSHAKING, 0},
    {MX_KIND,       210, 51,   110, 11, MSG_SER_PARITY_GAD,       EC_PARITY,      0},
    {MX_KIND,       320, 51,   110, 11, MSG_SER_DATABITS_GAD,     EC_DATABITS,    0},
    {MX_KIND,       430, 51,   110, 11, MSG_SER_STOPBITS_GAD,     EC_STOPBITS,    0},
d389 4
a392 4
    RightAlign(ed,rp,MSG_SER_HANDSHAKING_GAD,100,45);
    RightAlign(ed,rp,MSG_SER_PARITY_GAD,210,45);
    RightAlign(ed,rp,MSG_SER_DATABITS_GAD,320,45);
    RightAlign(ed,rp,MSG_SER_STOPBITS_GAD,430,45);
d428 1
a428 1
                                                 LAYOUTA_SPACING, 4,
d434 1
a434 1
                                            LAYOUTA_SPACING, 4,
d440 1
a440 1
                                              LAYOUTA_SPACING, 4,
d446 1
a446 1
                                              LAYOUTA_SPACING, 4,
@


38.14
log
@*** empty log message ***
@
text
@a180 2
#define NW_LEFT      0
#define NW_TOP       0
d235 2
a236 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
d263 1
a263 3
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
@


38.13
log
@*** empty log message ***
@
text
@d367 2
a368 2
VOID CenterLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w)
d376 1
a376 1
    Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
d393 4
a396 4
    CenterLine(ed,rp,MSG_SER_HANDSHAKING_GAD,25,45,110);
    CenterLine(ed,rp,MSG_SER_PARITY_GAD,135,45,110);
    CenterLine(ed,rp,MSG_SER_DATABITS_GAD,245,45,110);
    CenterLine(ed,rp,MSG_SER_STOPBITS_GAD,355,45,110);
@


38.12
log
@*** empty log message ***
@
text
@d102 1
d104 1
d151 1
a151 1
    if (ed->ed_PrefsWork.sp_Unit0Map)
@


38.11
log
@Changes for new prefs shell
@
text
@a512 9
EdCommand GetCommand(EdDataPtr ed)
{
    return(EC_NOP);
}


/*****************************************************************************/


@


38.10
log
@Added SyncTextGadgets() support
Changes for new pe_iff
@
text
@a130 8
VOID CleanUpEdData(EdDataPtr ed)
{
}


/*****************************************************************************/


d415 1
d424 1
a455 8
}


/*****************************************************************************/


VOID SyncTextGadgets(EdDataPtr ed)
{
@


38.9
log
@Added SyncTextGadgets() support
@
text
@a247 5
    if (!(ed->ed_Menus = CreatePrefsMenus(ed,EM)))
    {
	return(FALSE);
    }

d269 19
a287 23
    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SER_NAME),
                                             WA_NewLookMenus,TRUE,
                                             WA_Gadgets,     ed->ed_Gadgets,
                                             TAG_DONE)))
d289 1
a289 2
        DisposeDisplay(ed);
	return(FALSE);
d292 2
a293 1
    return(TRUE);
@


38.8
log
@Simple changes needed for new pe_iff.h
@
text
@d476 3
@


38.7
log
@Now uses DoPrefsGadget instead of CreatePrefsGadget for better look upon window
  opening
@
text
@d66 26
d155 1
a155 1
    result = ReadIFF(ed,name,ReadPrefs);
d180 1
a180 1
    return(WriteIFF(ed,name,WritePrefs));
a240 1
STRPTR             ptr;
@


38.6
log
@Now uses WA_Gadgets to add the gadgets to the window
@
text
@a241 4
    ptr = "%7lu";
    if (LocaleBase)
        ptr = "%7lU";

d243 3
a245 17
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);

    ed->ed_BaudRate = CreatePrefsGadget(ed,&EG[3],GTSL_Max,         7,
                                                  GTSL_MaxLevelLen, 7,
                                                  GTSL_LevelFormat, ptr,
                                                  GTSL_DispFunc,    SliderToBaud,
                                                  GTSL_Level,       BaudToSlider(ed->ed_PrefsWork.sp_BaudRate),
                                     		  TAG_DONE);

    ed->ed_InputBuf = CreatePrefsGadget(ed,&EG[4],GTSL_Max,         7,
                                                  GTSL_MaxLevelLen, 7,
                                                  GTSL_LevelFormat, ptr,
                                                  GTSL_DispFunc,    SliderToBuffer,
                                                  GTSL_Level,       BufferToSlider(ed->ed_PrefsWork.sp_InputBuffer),
                                     		  TAG_DONE);
d247 1
a247 26
    ed->ed_Handshaking = CreatePrefsGadget(ed,&EG[5],GTMX_Active,     ed->ed_PrefsWork.sp_InputHandshake,
                                                     GTMX_Labels,     ed->ed_HandshakingLabels,
                                                     LAYOUTA_SPACING, 4,
						     TAG_DONE);

    ed->ed_Parity      = CreatePrefsGadget(ed,&EG[6],GTMX_Active,     ed->ed_PrefsWork.sp_Parity,
                                                     GTMX_Labels,     ed->ed_ParityLabels,
                                                     LAYOUTA_SPACING, 4,
                                                     TAG_DONE);

    ed->ed_DataBits    = CreatePrefsGadget(ed,&EG[7],GTMX_Active,     ed->ed_PrefsWork.sp_BitsPerChar-7,
                                                     GTMX_Labels,     ed->ed_DataBitsLabels,
                                                     LAYOUTA_SPACING, 4,
                                                     TAG_DONE);

    ed->ed_StopBits    = CreatePrefsGadget(ed,&EG[8],GTMX_Active,     ed->ed_PrefsWork.sp_StopBits-1,
                                                     GTMX_Labels,     ed->ed_StopBitsLabels,
                                                     LAYOUTA_SPACING, 4,
                                                     TAG_DONE);

    if (ed->ed_ShowUnits)
    {
        ed->ed_DefaultUnit = CreatePrefsGadget(ed,&EG[9],GTIN_MaxChars, 3,
							 GTIN_Number,   ed->ed_PrefsWork.sp_Unit0Map,
                                                         TAG_DONE);
    }
d395 27
a421 2
    SetGadgetAttr(ed,ed->ed_BaudRate,GTSL_Level,BaudToSlider(ed->ed_PrefsWork.sp_BaudRate),
                                     TAG_DONE);
d423 5
a427 11
    SetGadgetAttr(ed,ed->ed_InputBuf,GTSL_Level,BufferToSlider(ed->ed_PrefsWork.sp_InputBuffer),
                                     TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Handshaking,GTMX_Active,ed->ed_PrefsWork.sp_InputHandshake,
                                        TAG_DONE);

    SetGadgetAttr(ed,ed->ed_Parity,GTMX_Active,ed->ed_PrefsWork.sp_Parity,
                                   TAG_DONE);

    SetGadgetAttr(ed,ed->ed_DataBits,GTMX_Active,ed->ed_PrefsWork.sp_BitsPerChar-7,
                                     TAG_DONE);
d429 11
a439 2
    SetGadgetAttr(ed,ed->ed_StopBits,GTMX_Active,ed->ed_PrefsWork.sp_StopBits-1,
                                     TAG_DONE);
d442 4
a445 2
        SetGadgetAttr(ed,ed->ed_DefaultUnit,GTIN_Number,ed->ed_PrefsWork.sp_Unit0Map,
                                            TAG_DONE);
@


38.5
log
@Changes for new prefs shell
@
text
@a227 21
    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_SER_NAME),
                                             WA_NewLookMenus,TRUE,
                                             TAG_DONE)))
    {
        FreeMenus(ed->ed_Menus);
	return(FALSE);
    }

d298 22
d329 5
a333 2
    ClearMenuStrip(ed->ed_Window);
    CloseWindow(ed->ed_Window);
@


38.4
log
@*** empty log message ***
@
text
@d118 1
a118 1
    if (ReadChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct SerialPrefs)) == sizeof(struct SerialPrefs))
d125 1
a125 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs)
a128 1
    ed->ed_PrefsIO = destPrefs;
d131 2
a132 2
    if (!((struct SerialPrefs *)destPrefs)->sp_Unit0Map)
        ((struct SerialPrefs *)destPrefs)->sp_Unit0Map = 1;
d144 1
a144 1
        if (WriteChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct SerialPrefs)) == sizeof(struct SerialPrefs))
d152 1
a152 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs)
a153 1
    ed->ed_PrefsIO = sourPrefs;
d214 3
a216 2
UWORD  zoomSize[4];
STRPTR ptr;
d249 9
a257 8
    ed->ed_HandshakingLabels[0]  = GetString(&ed->ed_LocaleInfo,MSG_SER_XON_XOFF);
    ed->ed_HandshakingLabels[1]  = GetString(&ed->ed_LocaleInfo,MSG_SER_RTS_CTS);
    ed->ed_HandshakingLabels[2]  = GetString(&ed->ed_LocaleInfo,MSG_SER_NONE);
    ed->ed_ParityLabels[0]       = GetString(&ed->ed_LocaleInfo,MSG_SER_PNONE);
    ed->ed_ParityLabels[1]       = GetString(&ed->ed_LocaleInfo,MSG_SER_EVEN);
    ed->ed_ParityLabels[2]       = GetString(&ed->ed_LocaleInfo,MSG_SER_ODD);
    ed->ed_ParityLabels[3]       = GetString(&ed->ed_LocaleInfo,MSG_SER_MARK);
    ed->ed_ParityLabels[4]       = GetString(&ed->ed_LocaleInfo,MSG_SER_SPACE);
d276 2
a277 1
						  TAG_DONE);
d283 2
a284 1
						  TAG_DONE);
d286 2
a287 2
    ed->ed_Handshaking = CreatePrefsGadget(ed,&EG[5],GTMX_Active,ed->ed_PrefsWork.sp_InputHandshake,
                                                     GTMX_Labels,ed->ed_HandshakingLabels,
d291 2
a292 2
    ed->ed_Parity      = CreatePrefsGadget(ed,&EG[6],GTMX_Active,ed->ed_PrefsWork.sp_Parity,
                                                     GTMX_Labels,ed->ed_ParityLabels,
d296 2
a297 2
    ed->ed_DataBits    = CreatePrefsGadget(ed,&EG[7],GTMX_Active,ed->ed_PrefsWork.sp_BitsPerChar-7,
                                                     GTMX_Labels,ed->ed_DataBitsLabels,
d301 2
a302 2
    ed->ed_StopBits    = CreatePrefsGadget(ed,&EG[8],GTMX_Active,ed->ed_PrefsWork.sp_StopBits-1,
                                                     GTMX_Labels,ed->ed_StopBitsLabels,
d309 1
a309 1
							 GTIN_Number,   1,
d315 1
a315 3
        CloseWindow(ed->ed_Window);
        FreeMenus(ed->ed_Menus);
        FreeGadgets(ed->ed_Gadgets);
a318 6
    SetFont(ed->ed_Window->RPort,ed->ed_Font);
    SetMenuStrip(ed->ed_Window,ed->ed_Menus);
    AddGList(ed->ed_Window,ed->ed_Gadgets,-1,-1,NULL);
    RefreshGList(ed->ed_Gadgets,ed->ed_Window,NULL,-1);
    GT_RefreshWindow(ed->ed_Window,NULL);

d466 1
a466 1
    icode = ed->ed_CurrentMsg->Code;
a524 3

    if (ec == EC_SAVEICONS)
        state->cs_Selected = ed->ed_SaveIcons;
@


38.3
log
@Fixed bug where the baud rate and buffer size were not displayed in machines
  without locale.library
@
text
@d46 1
a46 1
#include "texttable.h"
d199 2
a200 2
    {SLIDER_KIND,   300, 5,    150, 11, MSG_BAUDRATE_GAD,     EC_BAUDRATE, 0},
    {SLIDER_KIND,   300, 17,   150, 11, MSG_INPUTBUF_GAD,     EC_INPUTBUF, 0},
d202 4
a205 4
    {MX_KIND,       100, 51,   110, 11, MSG_HANDSHAKING_GAD,  EC_HANDSHAKING, 0},
    {MX_KIND,       210, 51,   110, 11, MSG_PARITY_GAD,       EC_PARITY,      0},
    {MX_KIND,       320, 51,   110, 11, MSG_DATABITS_GAD,     EC_DATABITS,    0},
    {MX_KIND,       430, 51,   110, 11, MSG_STOPBITS_GAD,     EC_STOPBITS,    0},
d207 1
a207 1
    {INTEGER_KIND,  400, 93,   46,  14, MSG_DEFAULTUNIT_GAD,  EC_DEFAULTUNIT, 0}
d242 1
a242 1
                                             WA_Title,       EDITOR_NAME,
d250 8
a257 8
    ed->ed_HandshakingLabels[0]  = GetString(&ed->ed_LocaleInfo,MSG_XON_XOFF);
    ed->ed_HandshakingLabels[1]  = GetString(&ed->ed_LocaleInfo,MSG_RTS_CTS);
    ed->ed_HandshakingLabels[2]  = GetString(&ed->ed_LocaleInfo,MSG_NONE);
    ed->ed_ParityLabels[0]       = GetString(&ed->ed_LocaleInfo,MSG_PNONE);
    ed->ed_ParityLabels[1]       = GetString(&ed->ed_LocaleInfo,MSG_EVEN);
    ed->ed_ParityLabels[2]       = GetString(&ed->ed_LocaleInfo,MSG_ODD);
    ed->ed_ParityLabels[3]       = GetString(&ed->ed_LocaleInfo,MSG_MARK);
    ed->ed_ParityLabels[4]       = GetString(&ed->ed_LocaleInfo,MSG_SPACE);
d402 1
a402 1
VOID CenterLine(EdDataPtr ed, struct RastPort *rp, enum AppStringsID id,
d428 4
a431 4
    CenterLine(ed,rp,MSG_HANDSHAKING_GAD,25,45,110);
    CenterLine(ed,rp,MSG_PARITY_GAD,135,45,110);
    CenterLine(ed,rp,MSG_DATABITS_GAD,245,45,110);
    CenterLine(ed,rp,MSG_STOPBITS_GAD,355,45,110);
@


38.2
log
@Changes device unit gadget from slider to integer kind
@
text
@d216 2
a217 1
UWORD zoomSize[4];
d263 4
d274 1
a274 1
                                                  GTSL_LevelFormat, "%7lU",
d280 1
a280 1
                                                  GTSL_LevelFormat, "%7lU",
@


38.1
log
@Initial V38 RCS checkin
@
text
@d207 1
a207 1
    {SLIDER_KIND,   280, 102,  150, 11, MSG_DEFAULTUNIT_GAD,  EC_DEFAULTUNIT, PLACETEXT_ABOVE}
d301 2
a302 5
        ed->ed_DefaultUnit = CreatePrefsGadget(ed,&EG[9],GTSL_Min,         1,
							 GTSL_Max,         8,
                                                         GTSL_MaxLevelLen, 1,
                                                         GTSL_Level,       1,
                                                         GTSL_LevelFormat, "%1lu",
d454 1
a454 1
        SetGadgetAttr(ed,ed->ed_DefaultUnit,GTSL_Level,ed->ed_PrefsWork.sp_Unit0Map,
d465 1
d489 14
a502 1
        case EC_DEFAULTUNIT: ed->ed_PrefsWork.sp_Unit0Map = icode;
@
