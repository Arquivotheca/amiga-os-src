head     38.17;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.17
date     93.01.25.09.52.36;  author delarge;  state Exp;
branches ;
next     38.16;

38.16
date     92.11.10.09.11.06;  author vertex;  state Exp;
branches ;
next     38.15;

38.15
date     92.07.02.10.52.24;  author vertex;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.08.19.09.15;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     92.05.30.16.46.04;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     92.05.26.14.36.44;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     92.05.13.11.15.11;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     92.03.24.18.01.35;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     92.03.06.11.18.00;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.04.11.30.16;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.24.10.30.18;  author davidj;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.11.08.59.49;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     92.01.22.12.30.04;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     92.01.15.16.07.57;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.13.11.53.37;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.10.12.17.06;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.12.19.11.02.31;  author vertex;  state Exp;
branches ;
next     ;


desc
@PostScript - prefs editor shell

@


38.17
log
@corrected Japan support per Kaori request
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <devices/keymap.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <graphics/text.h>
#include <graphics/gfxmacros.h>
#include <graphics/layers.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/printerps.h>
#include <dos/dos.h>
#include <dos/exall.h>
#include <string.h>
#include <stdio.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/locale_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>
#include <clib/icon_protos.h>
#include <clib/layers_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/locale_pragmas.h>
#include <pragmas/asl_pragmas.h>
#include <pragmas/icon_pragmas.h>
#include <pragmas/layers_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"
#include "conversion.h"
#include "edithook.h"


#define SysBase	ed->ed_SysBase


/*****************************************************************************/


struct PaperSize
{
    LONG Width;
    LONG Height;
};

struct PaperSize sizes[] =
{
    {85 * 72 * 100,      11 * 72 * 1000},	/* 0 : US Letter */
    {85 * 72 * 100,      14 * 72 * 1000},	/* 1 : US Legal */
    {595276,             841890},		/* 2 : DIN A4, 210mm x 297mm */
};


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_PSPD,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,				/* version */
    0,				/* type    */
    0				/* flags   */
};


/*****************************************************************************/


#ifndef GTST_EditHook
#define GTST_EditHook GT_TagBase+55
#endif

#ifndef GTIN_EditHook
#define GTIN_EditHook GT_TagBase+55
#endif


/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
EdStatus       result = ES_NO_MEMORY;
struct Locale *locale;

    if (ed->ed_PlanePtr = AllocRaster(RASWIDTH,RASHEIGHT))
    {
	InitArea(&ed->ed_AreaInfo,ed->ed_AreaBuffer,NUMVECTORS);
	InitTmpRas(&ed->ed_TmpRas, ed->ed_PlanePtr,RASSIZE(RASWIDTH,RASHEIGHT));

	ed->ed_PrefsDefaults.ps_DriverMode    = DM_POSTSCRIPT;
	ed->ed_PrefsDefaults.ps_PaperFormat   = 0;		/* Letter */
	ed->ed_PrefsDefaults.ps_Copies        = 1;
	ed->ed_PrefsDefaults.ps_PaperWidth    = 85 * 72 * 100;	/* 8.5 inches */
	ed->ed_PrefsDefaults.ps_PaperHeight   = 11 * 72 * 1000;	/* 11 inches  */
	ed->ed_CurPaperWidth                  = 85 * 72 * 100;	/* 8.5 inches */
	ed->ed_CurPaperHeight                 = 11 * 72 * 1000;	/* 11 inches  */
	ed->ed_PrefsDefaults.ps_HorizontalDPI = 300;
	ed->ed_PrefsDefaults.ps_VerticalDPI   = 300;
	ed->ed_PrefsDefaults.ps_Font          = FONT_COURIER;
	ed->ed_PrefsDefaults.ps_Pitch         = PITCH_NORMAL;
	ed->ed_PrefsDefaults.ps_Orientation   = ORIENT_PORTRAIT;
	ed->ed_PrefsDefaults.ps_Tab           = TAB_INCH;
	ed->ed_PrefsDefaults.ps_LeftMargin    = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_RightMargin   = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_TopMargin     = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_BottomMargin  = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_FontPointSize = 10 * 1000;
	ed->ed_PrefsDefaults.ps_Leading       = 2  * 1000;
	ed->ed_PrefsDefaults.ps_Aspect        = ASP_HORIZ;
	ed->ed_PrefsDefaults.ps_ScalingType   = ST_ASPECT_BOTH;
	ed->ed_PrefsDefaults.ps_ScalingMath   = SM_FRACTIONAL;
	ed->ed_PrefsDefaults.ps_Centering     = CENT_BOTH;
	ed->ed_PrefsDefaults.ps_LeftEdge      = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_TopEdge       = 10 * 72 * 100;	/* 1.0 inches */
	ed->ed_PrefsDefaults.ps_Width         = 55 * 72 * 100;	/* 6.5 inches */
	ed->ed_PrefsDefaults.ps_Height        = 90 * 72 * 100;	/* 9 inches */
	ed->ed_PrefsDefaults.ps_Image         = IM_POSITIVE;
	ed->ed_PrefsDefaults.ps_Shading       = SHAD_GREYSCALE;
	ed->ed_PrefsDefaults.ps_Dithering     = DITH_DEFAULT;
	ed->ed_PrefsDefaults.ps_Transparency  = TRANS_WHITE;

	ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
	ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

	ed->ed_FloatHook.h_Entry = FloatHook;

	if (LocaleBase && (locale = OpenLocale (NULL)))
	{
	    ed->ed_CurrentSystem = (locale->loc_MeasuringSystem != MS_ISO) ? 1 : 0;
	    CloseLocale(locale);
	}

	result = ES_NORMAL;
    }

    return(result);
}


/*****************************************************************************/


VOID CleanUpEdData(EdDataPtr ed)
{
    FreeRaster(ed->ed_PlanePtr,RASWIDTH,RASHEIGHT);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (cn->cn_ID != ID_PSPD || cn->cn_Type != ID_PREF)
	return (ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct PrinterPSPrefs)) == sizeof(struct PrinterPSPrefs))
    {
	ed->ed_CurPaperWidth = ed->ed_PrefsDefaults.ps_PaperWidth;
	ed->ed_CurPaperHeight = ed->ed_PrefsDefaults.ps_PaperHeight;
	return(ES_NORMAL);
    }

    return (ES_IFFERROR);
}


EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
{

    return (ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
}


/*****************************************************************************/


EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (!PushChunk(iff,0,ID_PSPD,sizeof(struct PrinterPSPrefs)))
	if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct PrinterPSPrefs)) == sizeof(struct PrinterPSPrefs))
	    if (!PopChunk(iff))
		return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
{

    return (WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
}


/*****************************************************************************/


#define NW_WIDTH     656
#define NW_HEIGHT    220
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | IDCMP_INTUITICKS | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP | LISTVIEWIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

struct EdMenu far EM[] =
{
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP,       0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN,      0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS,    0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP,       0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL,    0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP,       0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL,  0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE,   0},

    {NM_TITLE,   MSG_OPTIONS_MENU,          EC_NOP,       0},
      {NM_ITEM,  MSG_OPTIONS_SAVE_ICONS,    EC_SAVEICONS, CHECKIT | MENUTOGGLE},
      {NM_ITEM,  MSG_PS_OPTIONS_SYSTEM,     EC_CM,        0},
        {NM_SUB, MSG_PS_OPTIONS_CM,         EC_CM,        CHECKIT},
        {NM_SUB, MSG_PS_OPTIONS_INCHES,     EC_INCHES,    CHECKIT},
        {NM_SUB, MSG_PS_OPTIONS_POINTS,     EC_POINTS,    CHECKIT},

    {NM_END, MSG_NOTHING, EC_NOP, 0}
};

/* main display gadgets */
struct EdGadget far EG[] =
{
    {BUTTON_KIND,  8,   194, 87, 20, MSG_SAVE_GAD,             EC_SAVE,        0},
    {BUTTON_KIND,  279, 194, 87, 20, MSG_USE_GAD,              EC_USE,         0},
    {BUTTON_KIND,  541, 194, 87, 20, MSG_CANCEL_GAD,           EC_CANCEL,      0},

    {CYCLE_KIND,   152, 8,   167, 18, MSG_PS_DRIVERMODE_GAD,   EC_DRIVERMODE,  0},
    {SLIDER_KIND,  176, 28,  111, 11, MSG_PS_COPIES_GAD,       EC_COPIES,      0},
    {CYCLE_KIND,   152, 43,  135, 18, MSG_PS_PAPERFORMAT_GAD,  EC_PAPERFORMAT, 0},
    {STRING_KIND,  152, 63,  135, 20, MSG_PS_PAPERWIDTH_GAD,   EC_PAPERWIDTH,  0},
    {STRING_KIND,  152, 84,  135, 20, MSG_PS_PAPERHEIGHT_GAD,  EC_PAPERHEIGHT,  0},
    {INTEGER_KIND, 152, 105, 135, 20, MSG_PS_HORIZDPI_GAD,     EC_HORIZONTALDPI,0},
    {INTEGER_KIND, 152, 126, 135, 20, MSG_PS_VERTDPI_GAD,      EC_VERTICALDPI, 0},
    {CYCLE_KIND,   381, 8,   223, 18, MSG_NOTHING,             EC_PANEL,       0},

    {CYCLE_KIND,  456, 28,  163, 18, MSG_PS_FONT_GAD,          EC_PRINTFONT,   0},
    {CYCLE_KIND,  456, 47,  163, 18, MSG_PS_PITCH_GAD,         EC_PITCH,       0},
    {CYCLE_KIND,  456, 66,  163, 18, MSG_PS_ORIENTATION_GAD,   EC_ORIENTATION, 0},
    {CYCLE_KIND,  456, 85,  163, 18, MSG_PS_TAB_GAD,           EC_TAB,         0},

    {STRING_KIND, 516, 28,  103, 20, MSG_PS_LEFTMARGIN_GAD,    EC_LEFTMARGIN,  0},
    {STRING_KIND, 516, 49,  103, 20, MSG_PS_RIGHTMARGIN_GAD,   EC_RIGHTMARGIN, 0},
    {STRING_KIND, 516, 70,  103, 20, MSG_PS_TOPMARGIN_GAD,     EC_TOPMARGIN,   0},
    {STRING_KIND, 516, 91,  103, 20, MSG_PS_BOTTOMMARGIN_GAD,  EC_BOTTOMMARGIN, 0},
    {STRING_KIND, 516, 112,  103, 20, MSG_PS_FONTPOINTSIZE_GAD, EC_FONTPOINTSIZE,0},
    {STRING_KIND, 516, 133, 103, 20, MSG_PS_LINELEADING_GAD,   EC_LINELEADING, 0},
    {TEXT_KIND,   516, 154, 103, 18, MSG_PS_LINESPERINCH_GAD,  EC_LINESPERINCH,0},
    {TEXT_KIND,   516, 173, 103, 18, MSG_PS_LINESPERPAGE_GAD,  EC_LINESPERPAGE,0},

    {STRING_KIND, 516, 28,  103, 20, MSG_PS_LEFTEDGE_GAD,      EC_LEFTEDGE,    0},
    {STRING_KIND, 516, 49,  103, 20, MSG_PS_TOPEDGE_GAD,       EC_TOPEDGE,     0},
    {STRING_KIND, 516, 70,  103, 20, MSG_PS_WIDTH_GAD,         EC_WIDTH,       0},
    {STRING_KIND, 516, 91,  103, 20, MSG_PS_HEIGHT_GAD,        EC_HEIGHT,      0},
    {CYCLE_KIND,  456, 112,  163, 18, MSG_PS_IMAGE_GAD,         EC_IMAGE,       0},
    {CYCLE_KIND,  456, 131, 163, 18, MSG_PS_SHADING_GAD,       EC_SHADING,     0},
    {CYCLE_KIND,  456, 150, 163, 18, MSG_PS_DITHERING_GAD,     EC_DITHERING,   0},
    {CYCLE_KIND,  456, 169, 163, 18, MSG_PS_TRANSPARENT_GAD,   EC_TRANSPARENT, 0},

    {CYCLE_KIND,  456, 28, 163, 18, MSG_PS_ASPECT_GAD,         EC_ASPECT,      0},
    {CYCLE_KIND,  456, 47, 163, 18, MSG_PS_SCALINGTYPE_GAD,    EC_SCALINGTYPE, 0},
    {CYCLE_KIND,  456, 66, 163, 18, MSG_PS_SCALINGMATH_GAD,    EC_SCALINGMATH, 0},
    {CYCLE_KIND,  456, 85, 163, 18, MSG_PS_CENTERING_GAD,      EC_CENTERING,   0}
};


/*****************************************************************************/


VOID InitLabels(EdDataPtr ed, STRPTR *ptr, ULONG arraySize, ULONG start)
{
    arraySize = (arraySize / 4);
    while (--arraySize)
	*ptr++ = GetString (&ed->ed_LocaleInfo, start++);
}


/*****************************************************************************/


BOOL CreateDisplay(EdDataPtr ed)
{
UWORD            zoomSize[4];
struct MenuItem *item1;
struct MenuItem *item2;
struct MenuItem *item3;

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    InitLabels(ed,&ed->ed_DriverModeLabels[0],  sizeof(ed->ed_DriverModeLabels),  MSG_PS_MODE_1);
    InitLabels(ed,&ed->ed_PaperFormatLabels[0], sizeof(ed->ed_PaperFormatLabels), MSG_PS_FORMAT_1);
    InitLabels(ed,&ed->ed_PanelLabels[0],       sizeof(ed->ed_PanelLabels),       MSG_PS_PANEL_1);

    InitLabels(ed,&ed->ed_PrintFontLabels[0],   sizeof(ed->ed_PrintFontLabels),   MSG_PS_FONT_1);
    InitLabels(ed,&ed->ed_PitchLabels[0],       sizeof(ed->ed_PitchLabels),       MSG_PS_PITCH_1);
    InitLabels(ed,&ed->ed_OrientationLabels[0], sizeof(ed->ed_OrientationLabels), MSG_PS_ORIENTATION_1);
    InitLabels(ed,&ed->ed_TabLabels[0],         sizeof(ed->ed_TabLabels),         MSG_PS_TAB_1);

    InitLabels(ed,&ed->ed_AspectLabels[0],      sizeof(ed->ed_AspectLabels),      MSG_PS_ASPECT_1);
    InitLabels(ed,&ed->ed_ScalingTypeLabels[0], sizeof(ed->ed_ScalingTypeLabels), MSG_PS_SCALINGTYPE_1);
    InitLabels(ed,&ed->ed_ScalingMathLabels[0], sizeof(ed->ed_ScalingMathLabels), MSG_PS_SCALINGMATH_1);
    InitLabels(ed,&ed->ed_CenteringLabels[0],   sizeof(ed->ed_CenteringLabels),   MSG_PS_CENTERING_1);

    InitLabels(ed,&ed->ed_ImageLabels[0],       sizeof(ed->ed_ImageLabels),       MSG_PS_IMAGE_1);
    InitLabels(ed,&ed->ed_ShadingLabels[0],     sizeof(ed->ed_ShadingLabels),     MSG_PS_SHADING_1);
    InitLabels(ed,&ed->ed_DitheringLabels[0],   sizeof(ed->ed_DitheringLabels),   MSG_PS_DITHERING_1);
    InitLabels(ed,&ed->ed_TransparentLabels[0], sizeof(ed->ed_TransparentLabels), MSG_PS_TRANSPARENT_1);

    RenderGadgets(ed);

    if ((ed->ed_LastAdded)
    && (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    && (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,   NW_WIDTH,
                                           WA_InnerHeight,  NW_HEIGHT,
                                           WA_MinWidth,     NW_MINWIDTH,
                                           WA_MinHeight,    NW_MINHEIGHT,
                                           WA_MaxWidth,     NW_MAXWIDTH,
                                           WA_MaxHeight,    NW_MAXHEIGHT,
                                           WA_IDCMP,        NW_IDCMP,
                                           WA_Flags,        NW_FLAGS,
                                           WA_Zoom,         zoomSize,
                                           WA_AutoAdjust,   TRUE,
                                           WA_PubScreen,    ed->ed_Screen,
                                           WA_Title,        GetString(&ed->ed_LocaleInfo, MSG_PS_NAME),
                                           WA_NewLookMenus, TRUE,
                                           WA_Gadgets,      ed->ed_Gadgets,
                                           TAG_DONE)))
    {
	if (ed->ed_Menus)
	{
            item1 = ItemAddress(ed->ed_Menus,FULLMENUNUM(2,1,0));
            item2 = ItemAddress(ed->ed_Menus,FULLMENUNUM(2,1,1));
            item3 = ItemAddress(ed->ed_Menus,FULLMENUNUM(2,1,2));

            item1->MutualExclude  = 6;
            item2->MutualExclude  = 5;
            item3->MutualExclude  = 3;

	    item1->Flags &= ~CHECKED;
	    item2->Flags &= ~CHECKED;
	    item3->Flags &= ~CHECKED;

	    if (ed->ed_CurrentSystem == 0)
		item1->Flags |= CHECKED;
	    else if (ed->ed_CurrentSystem == 1)
		item2->Flags |= CHECKED;
	    else
		item3->Flags |= CHECKED;
	}

	ed->ed_Window->RPort->AreaInfo = &ed->ed_AreaInfo;
	ed->ed_Window->RPort->TmpRas   = &ed->ed_TmpRas;

	return(TRUE);
    }

    DisposeDisplay(ed);

    return(FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay(EdDataPtr ed)
{
    if (ed->ed_Window)
    {
	ClearMenuStrip(ed->ed_Window);
	CloseWindow(ed->ed_Window);
    }
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/


UWORD far pattern[] = {0xaaaa, 0x5555};


VOID RenderBox(EdDataPtr ed,
               UWORD areaLeft, UWORD areaTop, UWORD areaWidth, UWORD areaHeight,
               UWORD boxWidth, UWORD boxHeight,
               UWORD xScale, UWORD yScale,
	       BOOL centerX, BOOL centerY,
	       BOOL sideways, BOOL blankPage, BOOL stacked)
{
BOOL inrefresh = (window->Flags & WINDOWREFRESH) ? TRUE : FALSE;
struct RastPort *rp;
struct DrawInfo *di;
UWORD left, top, width, height;
struct Region *newRegion;
struct Region *oldRegion;
struct Rectangle Rect;
UWORD i;

    rp = ed->ed_Window->RPort;
    di = ed->ed_DrawInfo;

    areaLeft += window->BorderLeft;
    areaTop += window->BorderTop;

    for (i = 0; i < 2; i++)
    {
        if (!blankPage)
            i = 1;

        if (i == 1)
        {
            if (stacked)
                areaTop += areaHeight + 2;
            else
                areaLeft += areaWidth + 4;
        }

        if (i == 1)
        {
            if (newRegion = NewRegion ())
            {
                left = areaLeft;
                top = areaTop;
                width = boxWidth;
                height = boxHeight;

                Rect.MinX = areaLeft;
                Rect.MinY = areaTop;
                Rect.MaxX = areaLeft + areaWidth - 1;
                Rect.MaxY = areaTop + areaHeight - 1;

                if (OrRectRegion (newRegion, &Rect))
                {
                    if (inrefresh)
                        EndRefresh (window, FALSE);
                    oldRegion = InstallClipRegion (rp->Layer, newRegion);
                    if (inrefresh)
                        BeginRefresh (window);

                    if (centerX)
                        left += (areaWidth - boxWidth) / 2;

                    if (centerY)
                        top += (areaHeight - boxHeight) / 2;

                    if ((left != areaLeft) || (top != areaTop) || (left + width != areaLeft + areaWidth) || (top + height != areaTop + areaHeight))
                    {
                        SetAPen(rp,di->dri_Pens[FILLPEN]);
                        SetAfPt(rp,pattern,1);
                        RectFill(rp,areaLeft,areaTop,areaLeft + areaWidth - 1,areaTop + areaHeight - 1);
                        SetAfPt(rp,NULL,0);
                    }

                    if (window->WScreen->BitMap.Depth == 1)
                        SetAPen(rp, di->dri_Pens[BACKGROUNDPEN]);
                    else
                        SetAPen(rp, di->dri_Pens[SHADOWPEN]);

                    RectFill(rp, left, top, left + width - 1, top + height - 1);

                    left += xScale;
                    top += yScale;
                    width -= (xScale * 2);
                    height -= (yScale * 2);

                    SetAPen(rp, di->dri_Pens[SHINEPEN]);
                    RectFill(rp, left, top, left + width - 1, top + height - 1);

                    left += xScale;
                    top += yScale;
                    width -= (xScale * 2);
                    height -= (yScale * 2);

                    if (window->WScreen->BitMap.Depth == 1)
                        SetAPen(rp, di->dri_Pens[BACKGROUNDPEN]);
                    else
                        SetAPen(rp, di->dri_Pens[SHADOWPEN]);

                    if (sideways)
                    {
                        Move (rp, left, top + height - 1);
                        Draw (rp, left + width - 1, top);
                        Draw (rp, left + width - 1, top + height - 1);
                        Draw (rp, left, top);

                        AreaMove (rp, left, top);   /* > */
                        AreaDraw (rp, left + (width >> 1) - 1, top + (height >> 1) - 1);
                        AreaDraw (rp, left, top + height - 1);
                    }
                    else
                    {
                        Move (rp, left, top);
                        Draw (rp, left + width - 1, top + height - 1);
                        Draw (rp, left, top + height - 1);
                        Draw (rp, left + width - 1, top);

                        AreaMove (rp, left, top);   /* V */
                        AreaDraw (rp, left + (width >> 1) - 1, top + (height >> 1) - 1);
                        AreaDraw (rp, left + width - 1, top);
                    }
                    AreaEnd (rp);

                    if (inrefresh)
                        EndRefresh (window, FALSE);
                    InstallClipRegion (rp->Layer, oldRegion);
                    if (inrefresh)
                        BeginRefresh (window);
                }
                DisposeRegion (newRegion);
            }
        }
        else
        {
            SetAPen(rp,di->dri_Pens[FILLPEN]);
            SetAfPt(rp,pattern,1);
            RectFill(rp,areaLeft,areaTop,areaLeft + areaWidth - 1,areaTop + areaHeight - 1);
            SetAfPt(rp,NULL,0);
        }
    }
}


/*****************************************************************************/


struct Dimensions
{
    UWORD Width;
    UWORD Height;
};

struct Dimensions samples[] =
{
 /* 14,14    42,20    20,42    42,42					 */
    {24, 24},
    {24, 24},
    {24, 24},
    {24, 24},			/* None		 */
    {14, 14},
    {42, 42},
    {20, 20},
    {42, 42},			/* Aspect : Width	 */
    {14, 14},
    {20, 20},
    {42, 42},
    {42, 42},			/* Aspect : Height	 */
    {14, 14},
    {20, 20},
    {20, 20},
    {42, 42},			/* Aspect : Both	 */
    {14, 14},
    {42, 20},
    {20, 20},
    {42, 42},			/* Fits : Width	 */
    {14, 14},
    {20, 20},
    {20, 42},
    {42, 42},			/* Fits : Height	 */
    {14, 14},
    {42, 20},
    {20, 42},
    {42, 42}			/* Fits : Both	 */
};


/*****************************************************************************/


VOID CenterLine(EdDataPtr ed, struct RastPort * rp, AppStringsID id,
		UWORD x, UWORD y, UWORD w)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    Move(rp,(w - TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
	 window->BorderTop + y);
    Text(rp,str,len);
}


/*****************************************************************************/


VOID DrawBB(EdDataPtr ed, UWORD x, UWORD y, UWORD w, UWORD h, ULONG tag,...)
{
    DrawBevelBoxA(ed->ed_Window->RPort, x + window->BorderLeft, y + window->BorderTop, w, h, (struct TagItem *) & tag);
}


/*****************************************************************************/


VOID DoRenderDisplay(EdDataPtr ed, BOOL complete)
{
BOOL               centerX, centerY, sideways;
struct Dimensions *dims;
struct RastPort   *rp;
UWORD              borLeft;
UWORD              borTop;

    if (ed->ed_CurrentPanel == 3)
    {
	dims = &samples[ed->ed_PrefsWork.ps_ScalingType * 4];

	centerX  = (ed->ed_PrefsWork.ps_Centering == CENT_HORIZ) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
	centerY  = (ed->ed_PrefsWork.ps_Centering == CENT_VERT) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
	sideways = (ed->ed_PrefsWork.ps_Aspect == ASP_VERT);
	rp       = window->RPort;
	borLeft  = window->BorderLeft;
	borTop   = window->BorderTop;

	SetAPen(rp,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);

        if (complete)
        {
            DrawBB(ed,375,127,243,50,GTBB_Recessed, TRUE,
                                     GT_VisualInfo, ed->ed_VisualInfo,
                                     TAG_DONE);

            CenterLine(ed,rp,MSG_PS_SAMPLEPICTURE_HDR,294,120,68);
            CenterLine(ed,rp,MSG_PS_SAMPLESCALING_HDR,375,120,243);

            RectFill(rp, 349+borLeft, 134+borTop, 361+borLeft, 137+borTop);
            RectFill(rp, 362+borLeft, 131+borTop, 362+borLeft, 140+borTop);
            RectFill(rp, 363+borLeft, 132+borTop, 363+borLeft, 139+borTop);
            RectFill(rp, 364+borLeft, 133+borTop, 364+borLeft, 138+borTop);
            RectFill(rp, 365+borLeft, 134+borTop, 365+borLeft, 137+borTop);
            RectFill(rp, 366+borLeft, 135+borTop, 366+borLeft, 136+borTop);

            SetAfPt(rp,pattern,1);
            RectFill(rp, 416+borLeft, 128+borTop, 416+borLeft, 175+borTop);
            RectFill(rp, 467+borLeft, 127+borTop, 467+borLeft, 174+borTop);
            RectFill(rp, 520+borLeft, 128+borTop, 520+borLeft, 175+borTop);
            SetAfPt(rp,NULL,0);

            RenderBox(ed,284,130,24,24,24,24,1,1,TRUE,TRUE,FALSE,FALSE,FALSE);
        }

	RenderBox(ed,380,145,14,14,dims[0].Width,dims[0].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,421,131,42,20,dims[1].Width,dims[1].Height,1,1,centerX,centerY,sideways,complete,TRUE);
	RenderBox(ed,472,131,20,42,dims[2].Width,dims[2].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,525,131,42,42,dims[3].Width,dims[3].Height,1,1,centerX,centerY,sideways,complete,FALSE);
    }
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
{
    DoRenderDisplay(ed,TRUE);
}


/*****************************************************************************/


VOID UpdateTextDisplay(EdDataPtr ed)
{
    if (ed->ed_CurrentPanel == 1)
    {
        sprintf(ed->ed_LinesPerInchBuf,"%ld",72000 / (ed->ed_PrefsWork.ps_Leading+ed->ed_PrefsWork.ps_FontPointSize));
        ed->ed_LinesPerInch = DoPrefsGadget(ed,&EG[21],ed->ed_LinesPerInch,
                                            GTTX_Text,   ed->ed_LinesPerInchBuf,
                                            GTTX_Border, TRUE,
                                            TAG_DONE);

        sprintf(ed->ed_LinesPerPageBuf,"%ld",(ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin - ed->ed_PrefsWork.ps_TopMargin) / (ed->ed_PrefsWork.ps_Leading+ed->ed_PrefsWork.ps_FontPointSize));
        ed->ed_LinesPerPage = DoPrefsGadget(ed,&EG[22],ed->ed_LinesPerPage,
                                            GTTX_Text,   ed->ed_LinesPerPageBuf,
                                            GTTX_Border, TRUE,
                                            TAG_DONE);
    }
}


/*****************************************************************************/


VOID CopyPrefs(EdDataPtr ed, struct PrinterPSPrefs *p1, struct PrinterPSPrefs *p2)
{
    *p1 = *p2;
    DoRenderDisplay(ed,FALSE);
}


/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
UWORD i;

    for (i = 0; i < 3; i++)
    {
        if ((ed->ed_PrefsWork.ps_PaperWidth == sizes[i].Width) &&
            (ed->ed_PrefsWork.ps_PaperHeight == sizes[i].Height))
            break;
    }

    if (!ed->ed_LastAdded)
    {
	ed->ed_LastAdded = CreateContext (&ed->ed_Gadgets);
	DoPrefsGadget (ed, &EG[0], NULL, TAG_DONE);
	DoPrefsGadget (ed, &EG[1], NULL, TAG_DONE);
	DoPrefsGadget (ed, &EG[2], NULL, TAG_DONE);

	ed->ed_DriverMode    = NULL;
	ed->ed_Copies        = NULL;
	ed->ed_PaperFormat   = NULL;
	ed->ed_PaperWidth    = NULL;
	ed->ed_PaperHeight   = NULL;
	ed->ed_HorizontalDPI = NULL;
	ed->ed_VerticalDPI   = NULL;
	ed->ed_Panel         = NULL;
	ed->ed_PrintFont     = NULL;
	ed->ed_Pitch         = NULL;
	ed->ed_Orientation   = NULL;
	ed->ed_Tab           = NULL;
	ed->ed_LeftMargin    = NULL;
	ed->ed_RightMargin   = NULL;
	ed->ed_TopMargin     = NULL;
	ed->ed_BottomMargin  = NULL;
	ed->ed_FontPointSize = NULL;
	ed->ed_LineLeading   = NULL;
	ed->ed_LinesPerInch  = NULL;
	ed->ed_LinesPerPage  = NULL;
	ed->ed_Aspect        = NULL;
	ed->ed_ScalingType   = NULL;
	ed->ed_ScalingMath   = NULL;
	ed->ed_Centering     = NULL;
	ed->ed_LeftEdge      = NULL;
	ed->ed_TopEdge       = NULL;
	ed->ed_Width         = NULL;
	ed->ed_Height        = NULL;
	ed->ed_Image         = NULL;
	ed->ed_Shading       = NULL;
	ed->ed_Dithering     = NULL;
	ed->ed_Transparent   = NULL;
    }

    ed->ed_DriverMode = DoPrefsGadget(ed,&EG[3],ed->ed_DriverMode,
				      GTCY_Labels, ed->ed_DriverModeLabels,
				      GTCY_Active, ed->ed_PrefsWork.ps_DriverMode,
				      TAG_DONE);

    ed->ed_Copies = DoPrefsGadget(ed,&EG[4],ed->ed_Copies,
				  GTSL_Min,         1,
				  GTSL_Max,         99,
				  GTSL_Level,       ed->ed_PrefsWork.ps_Copies,
				  GTSL_MaxLevelLen, 2,
				  GTSL_LevelFormat, "%2lu",
				  GA_RelVerify,     TRUE,
				  GA_Immediate,     TRUE,
				  TAG_DONE);

    ed->ed_PaperFormat = DoPrefsGadget(ed,&EG[5],ed->ed_PaperFormat,
				       GTCY_Labels, ed->ed_PaperFormatLabels,
				       GTCY_Active, ed->ed_PrefsWork.ps_PaperFormat,
				       TAG_DONE);

    if (ed->ed_PaperWidth = DoPrefsGadget(ed,&EG[6],ed->ed_PaperWidth,
					  GA_Disabled,   ed->ed_PrefsWork.ps_PaperFormat != 3,
					  GTST_String,   FromMille(ed,ed->ed_PrefsWork.ps_PaperWidth,2),
					  GTST_EditHook, &ed->ed_FloatHook,
					  TAG_DONE))
	ed->ed_PaperWidth->UserData = (APTR) 2;

    if (ed->ed_PaperHeight = DoPrefsGadget(ed,&EG[7],ed->ed_PaperHeight,
					   GA_Disabled,   ed->ed_PrefsWork.ps_PaperFormat != 3,
					   GTST_String,   FromMille(ed,ed->ed_PrefsWork.ps_PaperHeight,2),
					   GTST_EditHook, &ed->ed_FloatHook,
					   TAG_DONE))
	ed->ed_PaperHeight->UserData = (APTR) 2;

    ed->ed_HorizontalDPI = DoPrefsGadget(ed,&EG[8],ed->ed_HorizontalDPI,
					 GTIN_Number, ed->ed_PrefsWork.ps_HorizontalDPI,
					 TAG_DONE);

    ed->ed_VerticalDPI = DoPrefsGadget(ed,&EG[9],ed->ed_VerticalDPI,
				       GTIN_Number, ed->ed_PrefsWork.ps_VerticalDPI,
				       TAG_DONE);

    ed->ed_Panel = DoPrefsGadget(ed,&EG[10],ed->ed_Panel,
				 GTCY_Labels, ed->ed_PanelLabels,
				 GTCY_Active, ed->ed_CurrentPanel,
				 TAG_DONE);

    if (ed->ed_CurrentPanel == 0)
    {
	ed->ed_PrintFont = DoPrefsGadget(ed,&EG[11],ed->ed_PrintFont,
					 GTCY_Labels, ed->ed_PrintFontLabels,
					 GTCY_Active, ed->ed_PrefsWork.ps_Font,
					 TAG_DONE);

	ed->ed_Pitch = DoPrefsGadget(ed,&EG[12],ed->ed_Pitch,
				     GTCY_Labels, ed->ed_PitchLabels,
				     GTCY_Active, ed->ed_PrefsWork.ps_Pitch,
				     TAG_DONE);

	ed->ed_Orientation = DoPrefsGadget(ed,&EG[13],ed->ed_Orientation,
					   GTCY_Labels, ed->ed_OrientationLabels,
					   GTCY_Active, ed->ed_PrefsWork.ps_Orientation,
					   TAG_DONE);

	ed->ed_Tab = DoPrefsGadget(ed,&EG[14],ed->ed_Tab,
				   GTCY_Labels, ed->ed_TabLabels,
				   GTCY_Active, ed->ed_PrefsWork.ps_Tab,
				   TAG_DONE);
    }
    else if (ed->ed_CurrentPanel == 1)
    {
	if (ed->ed_LeftMargin = DoPrefsGadget(ed,&EG[15],ed->ed_LeftMargin,
					      GTST_String,   FromMille(ed,ed->ed_PrefsWork.ps_LeftMargin,2),
					      GTST_EditHook, &ed->ed_FloatHook,
					      TAG_DONE))
	    ed->ed_LeftMargin->UserData = (APTR) 2;

	if (ed->ed_RightMargin = DoPrefsGadget(ed,&EG[16],ed->ed_RightMargin,
					       GTST_String,   FromMille(ed,ed->ed_PrefsWork.ps_RightMargin,2),
					       GTST_EditHook, &ed->ed_FloatHook,
					       TAG_DONE))
	    ed->ed_RightMargin->UserData = (APTR) 2;


	if (ed->ed_TopMargin = DoPrefsGadget(ed,&EG[17],ed->ed_TopMargin,
					     GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_TopMargin, 2),
					     GTST_EditHook, &ed->ed_FloatHook,
					     TAG_DONE))
	    ed->ed_TopMargin->UserData = (APTR) 2;

	if (ed->ed_BottomMargin = DoPrefsGadget(ed,&EG[18],ed->ed_BottomMargin,
						GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_BottomMargin, 2),
						GTST_EditHook, &ed->ed_FloatHook,
						TAG_DONE))
	    ed->ed_BottomMargin->UserData = (APTR) 2;

	if (ed->ed_FontPointSize = DoPrefsGadget(ed,&EG[19],ed->ed_FontPointSize,
						 GTST_String,   FromMilleNC (ed, ed->ed_PrefsWork.ps_FontPointSize, 1),
						 GTST_EditHook, &ed->ed_FloatHook,
						 TAG_DONE))
	    ed->ed_FontPointSize->UserData = (APTR) 1;

	if (ed->ed_LineLeading = DoPrefsGadget(ed,&EG[20],ed->ed_LineLeading,
					       GTST_String,   FromMilleNC (ed, ed->ed_PrefsWork.ps_Leading, 1),
					       GTST_EditHook, &ed->ed_FloatHook,
					       TAG_DONE))
	    ed->ed_LineLeading->UserData = (APTR) 1;

	UpdateTextDisplay(ed);
    }
    else if (ed->ed_CurrentPanel == 2)
    {
	if (ed->ed_LeftEdge = DoPrefsGadget(ed,&EG[23],ed->ed_LeftEdge,
					    GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_LeftEdge, 2),
					    GTST_EditHook, &ed->ed_FloatHook,
					    TAG_DONE))
	    ed->ed_LeftEdge->UserData = (APTR) 2;


	if (ed->ed_TopEdge = DoPrefsGadget(ed, &EG[24],ed->ed_TopEdge,
					   GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_TopEdge, 2),
					   GTST_EditHook, &ed->ed_FloatHook,
					   TAG_DONE))
	    ed->ed_TopEdge->UserData = (APTR) 2;

	if (ed->ed_Width = DoPrefsGadget(ed,&EG[25],ed->ed_Width,
				         GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_Width, 2),
					 GTST_EditHook, &ed->ed_FloatHook,
					 TAG_DONE))
	    ed->ed_Width->UserData = (APTR) 2;

	if (ed->ed_Height = DoPrefsGadget(ed,&EG[26],ed->ed_Height,
				          GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_Height, 2),
					  GTST_EditHook, &ed->ed_FloatHook,
					  TAG_DONE))
	    ed->ed_Height->UserData = (APTR) 2;

	ed->ed_Image = DoPrefsGadget(ed,&EG[27],ed->ed_Image,
				     GTCY_Labels, ed->ed_ImageLabels,
				     GTCY_Active, ed->ed_PrefsWork.ps_Image,
				     TAG_DONE);

	ed->ed_Shading = DoPrefsGadget(ed,&EG[28],ed->ed_Shading,
				       GTCY_Labels, ed->ed_ShadingLabels,
				       GTCY_Active, ed->ed_PrefsWork.ps_Shading,
				       TAG_DONE);

	ed->ed_Dithering = DoPrefsGadget(ed,&EG[29],ed->ed_Dithering,
					 GA_Disabled, ed->ed_PrefsWork.ps_Shading != SHAD_GREYSCALE,
					 GTCY_Labels, ed->ed_DitheringLabels,
					 GTCY_Active, ed->ed_PrefsWork.ps_Dithering,
					 TAG_DONE);

	ed->ed_Transparent = DoPrefsGadget(ed,&EG[30],ed->ed_Transparent,
					 GA_Disabled, ed->ed_PrefsWork.ps_Shading == SHAD_BW,
					 GTCY_Labels, ed->ed_TransparentLabels,
					 GTCY_Active, ed->ed_PrefsWork.ps_Transparency,
					 TAG_DONE);
    }
    else if (ed->ed_CurrentPanel == 3)
    {
	ed->ed_Aspect = DoPrefsGadget(ed,&EG[31],ed->ed_Aspect,
				      GTCY_Labels, ed->ed_AspectLabels,
				      GTCY_Active, ed->ed_PrefsWork.ps_Aspect,
				      TAG_DONE);

	ed->ed_ScalingType = DoPrefsGadget(ed,&EG[32],ed->ed_ScalingType,
					   GTCY_Labels, ed->ed_ScalingTypeLabels,
					   GTCY_Active, ed->ed_PrefsWork.ps_ScalingType,
					   TAG_DONE);

	ed->ed_ScalingMath = DoPrefsGadget(ed,&EG[33],ed->ed_ScalingMath,
					   GA_Disabled, ed->ed_PrefsWork.ps_ScalingType == ST_ASPECT_ASIS,
					   GTCY_Labels, ed->ed_ScalingMathLabels,
					   GTCY_Active, ed->ed_PrefsWork.ps_ScalingMath,
					   TAG_DONE);

	ed->ed_Centering = DoPrefsGadget(ed,&EG[34],ed->ed_Centering,
					 GTCY_Labels, ed->ed_CenteringLabels,
					 GTCY_Active, ed->ed_PrefsWork.ps_Centering,
					 TAG_DONE);
    }
}


/*****************************************************************************/


VOID ProcessTextGadget(EdDataPtr ed, EdCommand ec, BOOL screenStuff)
{
BOOL           shift;
LONG           num;
struct Gadget *act;
BOOL           beep;

    shift = (IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT) & ed->ed_CurrentMsg.Qualifier;
    beep = FALSE;

    switch (ec)
    {
	case EC_PAPERWIDTH: num = ToMille (ed, ((struct StringInfo *) ed->ed_PaperWidth->SpecialInfo)->Buffer);
                            if (num < 0)
                            {
                                num = 0;
                                act = ed->ed_PaperWidth;
                                beep = TRUE;
                            }
                            else
                            {
                                if (shift)
                                    act = ed->ed_VerticalDPI;
                                else
                                    act = ed->ed_PaperHeight;
                            }
                            ed->ed_PrefsWork.ps_PaperWidth = num;

                            if (ed->ed_PrefsWork.ps_PaperFormat == 3)
                                ed->ed_CurPaperWidth = num;

                            if (screenStuff)
                                SetGadgetAttr (ed, ed->ed_PaperWidth,
                                               GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperWidth, 2),
                                               TAG_DONE);
                            break;

	case EC_PAPERHEIGHT: num = ToMille (ed, ((struct StringInfo *) ed->ed_PaperHeight->SpecialInfo)->Buffer);
                             if (num < 0)
                             {
                                 num = 0;
                                 act = ed->ed_PaperHeight;
                                 beep = TRUE;
                             }
                             else
                             {
                                 if (shift)
                                     act = ed->ed_PaperWidth;
                                 else
                                     act = ed->ed_HorizontalDPI;
                             }
                             ed->ed_PrefsWork.ps_PaperHeight = num;

                             if (ed->ed_PrefsWork.ps_PaperFormat == 3)
                                 ed->ed_CurPaperHeight = num;

                             if (screenStuff)
                                 SetGadgetAttr (ed, ed->ed_PaperHeight,
                                                GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperHeight, 2),
                                                TAG_DONE);
                             break;

	case EC_HORIZONTALDPI: num = ((struct StringInfo *) ed->ed_HorizontalDPI->SpecialInfo)->LongInt;
                               if (num < 0)
                               {
                                   num = 0;
                                   act = ed->ed_HorizontalDPI;
                                   beep = TRUE;
                               }
                               else
                               {
                                   if (shift)
                                       act = (ed->ed_PaperHeight->Flags & GFLG_DISABLED) ? ed->ed_VerticalDPI : ed->ed_PaperHeight;
                                   else
                                       act = ed->ed_VerticalDPI;
                               }
                               ed->ed_PrefsWork.ps_HorizontalDPI = num;
                               if (screenStuff)
                                   SetGadgetAttr (ed, ed->ed_HorizontalDPI,
                                                  GTIN_Number, num,
                                                  TAG_DONE);
                               break;

	case EC_VERTICALDPI: num = ((struct StringInfo *) ed->ed_VerticalDPI->SpecialInfo)->LongInt;
                             if (num < 0)
                             {
                                 num = 0;
                                 act = ed->ed_VerticalDPI;
                                 beep = TRUE;
                             }
                             else
                             {
                                 if (shift)
                                     act = ed->ed_HorizontalDPI;
                                 else
                                     act = (ed->ed_PaperWidth->Flags & GFLG_DISABLED) ? ed->ed_HorizontalDPI : ed->ed_PaperWidth;
                             }
                             ed->ed_PrefsWork.ps_VerticalDPI = num;
                             if (screenStuff)
                                 SetGadgetAttr (ed, ed->ed_VerticalDPI,
                                                GTIN_Number, num,
                                                TAG_DONE);
                             break;

        /****************/

	case EC_LEFTMARGIN: num = ToMille (ed, ((struct StringInfo *) ed->ed_LeftMargin->SpecialInfo)->Buffer);
                            act = ed->ed_LeftMargin;
                            if (num < 0)
                            {
                                num = 0;
                                beep = TRUE;
                            }
                            else if (num > ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_RightMargin)
                            {
                                num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_RightMargin;
                                beep = TRUE;
                            }
                            else
                            {
                                if (shift)
                                    act = ed->ed_LineLeading;
                                else
                                    act = ed->ed_RightMargin;
                            }
                            ed->ed_PrefsWork.ps_LeftMargin = num;

                            if (screenStuff)
                                SetGadgetAttr (ed, ed->ed_LeftMargin,
                                               GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftMargin, 2),
                                               TAG_DONE);
                            break;

	case EC_RIGHTMARGIN: num = ToMille (ed, ((struct StringInfo *) ed->ed_RightMargin->SpecialInfo)->Buffer);
                             act = ed->ed_RightMargin;
                             if (num < 0)
                             {
                                 num = 0;
                                 beep = TRUE;
                             }
                             else if (num > ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftMargin)
                             {
                                 num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftMargin;
                                 beep = TRUE;
                             }
                             else
                             {
                                 if (shift)
                                     act = ed->ed_LeftMargin;
                                 else
                                     act = ed->ed_TopMargin;
                             }
                             ed->ed_PrefsWork.ps_RightMargin = num;

                             if (screenStuff)
                                 SetGadgetAttr (ed, ed->ed_RightMargin,
                                                GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightMargin, 2),
                                                TAG_DONE);
                             break;

	case EC_TOPMARGIN: num = ToMille (ed, ((struct StringInfo *) ed->ed_TopMargin->SpecialInfo)->Buffer);
                           act = ed->ed_TopMargin;
                           if (num < 0)
                           {
                               num = 0;
                               beep = TRUE;
                           }
                           else if (num > ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin)
                           {
                               num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin;
                               beep = TRUE;
                           }
                           else
                           {
                               if (shift)
                                   act = ed->ed_RightMargin;
                               else
                                   act = ed->ed_BottomMargin;
                           }
                           ed->ed_PrefsWork.ps_TopMargin = num;

                           if (screenStuff)
                               SetGadgetAttr (ed, ed->ed_TopMargin,
                                              GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopMargin, 2),
                                              TAG_DONE);
                           break;

	case EC_BOTTOMMARGIN: num = ToMille (ed, ((struct StringInfo *) ed->ed_BottomMargin->SpecialInfo)->Buffer);
                              act = ed->ed_BottomMargin;
                              if (num < 0)
                              {
                                  num = 0;
                                  beep = TRUE;
                              }
                              else if (num > ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin)
                              {
                                  num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin;
                                  beep = TRUE;
                              }
                              else
                              {
                                  if (shift)
                                      act = ed->ed_TopMargin;
                                  else
                                      act = ed->ed_FontPointSize;
                              }
                              ed->ed_PrefsWork.ps_BottomMargin = num;

                              if (screenStuff)
                                  SetGadgetAttr (ed, ed->ed_BottomMargin,
                                                 GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomMargin, 2),
                                                 TAG_DONE);
                              break;

	case EC_FONTPOINTSIZE: num = ToMilleNC (ed, ((struct StringInfo *) ed->ed_FontPointSize->SpecialInfo)->Buffer);
                               if (num < 0)
                               {
                                   num = 0;
                                   act = ed->ed_FontPointSize;
                                   beep = TRUE;
                               }
                               else
                               {
                                   if (shift)
                                       act = ed->ed_BottomMargin;
                                   else
                                       act = ed->ed_LineLeading;
                               }
                               ed->ed_PrefsWork.ps_FontPointSize = num;

                               if (screenStuff)
                                   SetGadgetAttr (ed, ed->ed_FontPointSize,
                                                  GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_FontPointSize, 1),
                                                  TAG_DONE);
                               break;

	case EC_LINELEADING: num = ToMilleNC (ed, ((struct StringInfo *) ed->ed_LineLeading->SpecialInfo)->Buffer);
                             if (num < 0)
                             {
                                 num = 0;
                                 act = ed->ed_LineLeading;
                                 beep = TRUE;
                             }
                             else
                             {
                                 if (shift)
                                     act = ed->ed_FontPointSize;
                                 else
                                     act = ed->ed_LeftMargin;
                             }
                             ed->ed_PrefsWork.ps_Leading = num;

                             if (screenStuff)
                                 SetGadgetAttr (ed, ed->ed_LineLeading,
                                                GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_Leading, 1),
                                                TAG_DONE);
                             break;

        /****************/

	case EC_LEFTEDGE: num = ToMille (ed, ((struct StringInfo *) ed->ed_LeftEdge->SpecialInfo)->Buffer);
                          act = ed->ed_LeftEdge;
                          if (num < 0)
                          {
                              num = 0;
                              beep = TRUE;
                          }
                          else if (num > ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_Width)
                          {
                              num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_Width;
                              beep = TRUE;
                          }
                          else
                          {
                              if (shift)
                                  act = ed->ed_Height;
                              else
                                  act = ed->ed_TopEdge;
                          }
                          ed->ed_PrefsWork.ps_LeftEdge = num;

                          if (screenStuff)
                              SetGadgetAttr (ed, ed->ed_LeftEdge,
                                             GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftEdge, 2),
                                             TAG_DONE);
                          break;

	case EC_TOPEDGE: num = ToMille (ed, ((struct StringInfo *) ed->ed_TopEdge->SpecialInfo)->Buffer);
                         act = ed->ed_TopEdge;
                         if (num < 0)
                         {
                             num = 0;
                             beep = TRUE;
                         }
                         else if (num > ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_Height)
                         {
                             num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_Height;
                             beep = TRUE;
                         }
                         else
                         {
                             if (shift)
                                 act = ed->ed_LeftEdge;
                             else
                                 act = ed->ed_Width;
                         }
                         ed->ed_PrefsWork.ps_TopEdge = num;

                         if (screenStuff)
                             SetGadgetAttr (ed, ed->ed_TopEdge,
                                            GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopEdge, 2),
                                            TAG_DONE);
                         break;

	case EC_WIDTH: num = ToMille (ed, ((struct StringInfo *) ed->ed_Width->SpecialInfo)->Buffer);
                       act = ed->ed_Width;
                       if (num < 0)
                       {
                           num = 0;
                           beep = TRUE;
                       }
                       else if (num > ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge)
                       {
                           num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge;
                           beep = TRUE;
                       }
                       else
                       {
                           if (shift)
                               act = ed->ed_TopEdge;
                           else
                               act = ed->ed_Height;
                       }
                       ed->ed_PrefsWork.ps_Width = num;

                       if (screenStuff)
                           SetGadgetAttr (ed, ed->ed_Width,
                                          GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_Width, 2),
                                          TAG_DONE);
                       break;

	case EC_HEIGHT: num = ToMille (ed, ((struct StringInfo *) ed->ed_Height->SpecialInfo)->Buffer);
                        act = ed->ed_Height;
                        if (num < 0)
                        {
                            num = 0;
                            beep = TRUE;
                        }
                        else if (num > ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopEdge)
                        {
                            num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopEdge;
                            beep = TRUE;
                        }
                        else
                        {
                            if (shift)
                                act = ed->ed_Width;
                            else
                                act = ed->ed_LeftEdge;
                        }
                        ed->ed_PrefsWork.ps_Height = num;

                        if (screenStuff)
                            SetGadgetAttr (ed, ed->ed_Height,
                                           GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_Height, 2),
                                           TAG_DONE);
                        break;

    }

    if (screenStuff)
    {
	if (!(act->Flags & GFLG_DISABLED))
	    ActivateGadget(act,window,NULL);

	if (beep)
	    DisplayBeep (window->WScreen);

	UpdateTextDisplay (ed);
    }
}


/*****************************************************************************/


VOID SyncTextGadgets(EdDataPtr ed)
{
    ProcessTextGadget(ed, EC_PAPERWIDTH,    FALSE);
    ProcessTextGadget(ed, EC_PAPERHEIGHT,   FALSE);
    ProcessTextGadget(ed, EC_VERTICALDPI,   FALSE);
    ProcessTextGadget(ed, EC_HORIZONTALDPI, FALSE);

    if (ed->ed_CurrentPanel == 1)
    {
	ProcessTextGadget(ed, EC_LEFTMARGIN,    FALSE);
	ProcessTextGadget(ed, EC_RIGHTMARGIN,   FALSE);
	ProcessTextGadget(ed, EC_TOPMARGIN,     FALSE);
	ProcessTextGadget(ed, EC_BOTTOMMARGIN,  FALSE);
	ProcessTextGadget(ed, EC_FONTPOINTSIZE, FALSE);
	ProcessTextGadget(ed, EC_LINELEADING,   FALSE);
    }
    else if (ed->ed_CurrentPanel == 2)
    {
	ProcessTextGadget(ed, EC_LEFTEDGE,  FALSE);
	ProcessTextGadget(ed, EC_TOPEDGE,   FALSE);
	ProcessTextGadget(ed, EC_WIDTH,     FALSE);
	ProcessTextGadget(ed, EC_HEIGHT,    FALSE);
    }
}


/*****************************************************************************/


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD icode;

    icode = ed->ed_CurrentMsg.Code;

    switch (ec)
    {
	case EC_PANEL      : RemoveGList (window, ed->ed_Gadgets, -1);

                             SetAPen (window->RPort, ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);
                             RectFill (window->RPort, window->BorderLeft +
280, window->BorderTop + 28, window->Width - window->BorderRight - 1, window->Height - window->BorderBottom - 20);

                             FreeGadgets (ed->ed_Gadgets);
                             ed->ed_Gadgets = NULL;
                             ed->ed_LastAdded = NULL;

                             ed->ed_CurrentPanel = icode;
                             RenderGadgets (ed);
                             if (ed->ed_LastAdded)
                             {
                                 AddGList (window, ed->ed_Gadgets, -1, -1, NULL);
                                 RefreshGList (ed->ed_Gadgets, window, NULL, -1);
                                 GT_RefreshWindow (window, NULL);
                             }
                             RenderDisplay (ed);
                             break;

	case EC_CM         :
        case EC_INCHES     :
	case EC_POINTS     : icode = ec - EC_CM;
                             if (ed->ed_CurrentSystem != icode)
                             {
                                 ed->ed_CurrentSystem = icode;
                                 RenderGadgets(ed);
                             }
                             break;

        /****************/

	case EC_DRIVERMODE : ed->ed_PrefsWork.ps_DriverMode = icode;
                             break;

	case EC_COPIES     : ed->ed_PrefsWork.ps_Copies = icode;
                             break;

	case EC_PAPERFORMAT: ed->ed_PrefsWork.ps_PaperFormat = icode;
                             SetGadgetAttr(ed,ed->ed_PaperWidth,GA_Disabled, icode != 3,
                                                                TAG_DONE);
                             SetGadgetAttr(ed,ed->ed_PaperHeight,GA_Disabled, icode != 3,
                                                                 TAG_DONE);
                             if (icode < 3)
                             {
                                 ed->ed_PrefsWork.ps_PaperWidth = sizes[icode].Width;
                                 ed->ed_PrefsWork.ps_PaperHeight = sizes[icode].Height;
                             }
                             else
                             {
                                 ed->ed_PrefsWork.ps_PaperWidth = ed->ed_CurPaperWidth;
                                 ed->ed_PrefsWork.ps_PaperHeight = ed->ed_CurPaperHeight;
                             }

                             SetGadgetAttr(ed,ed->ed_PaperWidth,
					   GA_Disabled, icode != 3,
					   GTST_String, FromMille(ed,ed->ed_PrefsWork.ps_PaperWidth,2),
					   TAG_DONE);

                             SetGadgetAttr(ed,ed->ed_PaperHeight,
					   GA_Disabled,   icode != 3,
					   GTST_String,   FromMille(ed,ed->ed_PrefsWork.ps_PaperHeight,2),
					   TAG_DONE);

                             UpdateTextDisplay(ed);
                             break;

	case EC_PAPERWIDTH     :
	case EC_PAPERHEIGHT    :
	case EC_HORIZONTALDPI  :
	case EC_VERTICALDPI    : ProcessTextGadget(ed,ec,TRUE);
                                 break;

        /****************/

	case EC_PRINTFONT  : ed->ed_PrefsWork.ps_Font = icode;
                             break;

	case EC_PITCH      : ed->ed_PrefsWork.ps_Pitch = icode;
                             break;

	case EC_ORIENTATION: ed->ed_PrefsWork.ps_Orientation = icode;
                             break;

	case EC_TAB        : ed->ed_PrefsWork.ps_Tab = icode;
                             break;

        /****************/

	case EC_LEFTMARGIN   :
	case EC_RIGHTMARGIN  :
	case EC_TOPMARGIN    :
	case EC_BOTTOMMARGIN :
	case EC_FONTPOINTSIZE:
	case EC_LINELEADING  : ProcessTextGadget(ed,ec,TRUE);
                               UpdateTextDisplay(ed);
                               break;

        /****************/

	case EC_LEFTEDGE    :
	case EC_TOPEDGE     :
	case EC_WIDTH       :
	case EC_HEIGHT      : ProcessTextGadget(ed,ec,TRUE);
                              break;

	case EC_IMAGE       : ed->ed_PrefsWork.ps_Image = icode;
                              break;

	case EC_SHADING     : ed->ed_PrefsWork.ps_Shading = icode;
                              SetGadgetAttr(ed,ed->ed_Dithering,GA_Disabled, icode != SHAD_GREYSCALE,
                                                                TAG_DONE);
                              SetGadgetAttr(ed,ed->ed_Transparent,GA_Disabled, icode == SHAD_BW,
                                                                TAG_DONE);
	                      break;

	case EC_DITHERING   : ed->ed_PrefsWork.ps_Dithering = icode;
                              break;

	case EC_TRANSPARENT : ed->ed_PrefsWork.ps_Transparency = icode;
                              break;

        /****************/

	case EC_ASPECT     : ed->ed_PrefsWork.ps_Aspect = icode;
                             DoRenderDisplay(ed,FALSE);
                             break;

	case EC_SCALINGTYPE: ed->ed_PrefsWork.ps_ScalingType = icode;
                             SetGadgetAttr(ed,ed->ed_ScalingMath,GA_Disabled, icode == ST_ASPECT_ASIS,
                                                                 TAG_DONE);
                             DoRenderDisplay(ed,FALSE);
                             break;

	case EC_SCALINGMATH: ed->ed_PrefsWork.ps_ScalingMath = icode;
                             break;

	case EC_CENTERING  : ed->ed_PrefsWork.ps_Centering = icode;
                             DoRenderDisplay(ed,FALSE);
                             break;

	default            : break;
    }
}


/*****************************************************************************/


VOID GetSpecialCmdState (EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{

    state->cs_Available = TRUE;
    state->cs_Selected = (((ec == EC_CM) && (ed->ed_CurrentSystem == 0)) ||
			  ((ec == EC_INCHES) && (ed->ed_CurrentSystem == 1)) ||
			  ((ec == EC_POINTS) && (ed->ed_CurrentSystem == 2)));
}
@


38.16
log
@ADDED JAPAN SUPPORT
@
text
@d240 1
a240 1
#define NW_WIDTH     626
d277 2
a278 2
    {BUTTON_KIND,  269, 194, 87, 20, MSG_USE_GAD,              EC_USE,         0},
    {BUTTON_KIND,  531, 194, 87, 20, MSG_CANCEL_GAD,           EC_CANCEL,      0},
d280 1
a280 1
    {CYCLE_KIND,   152, 8,   135, 18, MSG_PS_DRIVERMODE_GAD,   EC_DRIVERMODE,  0},
d287 1
a287 1
    {CYCLE_KIND,   381, 8,   207, 18, MSG_NOTHING,             EC_PANEL,       0},
@


38.15
log
@No longer calls LockLayerInfo() in the render code, relies on the prefs shell to do it
@
text
@d241 1
a241 1
#define NW_HEIGHT    185
d276 3
a278 3
    {BUTTON_KIND,  8,   168, 87, 14, MSG_SAVE_GAD,             EC_SAVE,        0},
    {BUTTON_KIND,  269, 168, 87, 14, MSG_USE_GAD,              EC_USE,         0},
    {BUTTON_KIND,  531, 168, 87, 14, MSG_CANCEL_GAD,           EC_CANCEL,      0},
d280 31
a310 31
    {CYCLE_KIND,   152, 8,   135, 14, MSG_PS_DRIVERMODE_GAD,   EC_DRIVERMODE,  0},
    {SLIDER_KIND,  176, 31,  111, 11, MSG_PS_COPIES_GAD,       EC_COPIES,      0},
    {CYCLE_KIND,   152, 51,  135, 14, MSG_PS_PAPERFORMAT_GAD,  EC_PAPERFORMAT, 0},
    {STRING_KIND,  152, 67,  135, 14, MSG_PS_PAPERWIDTH_GAD,   EC_PAPERWIDTH,  0},
    {STRING_KIND,  152, 83,  135, 14, MSG_PS_PAPERHEIGHT_GAD,  EC_PAPERHEIGHT,  0},
    {INTEGER_KIND, 152, 106, 135, 14, MSG_PS_HORIZDPI_GAD,     EC_HORIZONTALDPI,0},
    {INTEGER_KIND, 152, 122, 135, 14, MSG_PS_VERTDPI_GAD,      EC_VERTICALDPI, 0},
    {CYCLE_KIND,   381, 8,   207, 14, MSG_NOTHING,             EC_PANEL,       0},

    {CYCLE_KIND,  456, 35,  163, 14, MSG_PS_FONT_GAD,          EC_PRINTFONT,   0},
    {CYCLE_KIND,  456, 51,  163, 14, MSG_PS_PITCH_GAD,         EC_PITCH,       0},
    {CYCLE_KIND,  456, 67,  163, 14, MSG_PS_ORIENTATION_GAD,   EC_ORIENTATION, 0},
    {CYCLE_KIND,  456, 83,  163, 14, MSG_PS_TAB_GAD,           EC_TAB,         0},

    {STRING_KIND, 516, 35,  103, 14, MSG_PS_LEFTMARGIN_GAD,    EC_LEFTMARGIN,  0},
    {STRING_KIND, 516, 49,  103, 14, MSG_PS_RIGHTMARGIN_GAD,   EC_RIGHTMARGIN, 0},
    {STRING_KIND, 516, 63,  103, 14, MSG_PS_TOPMARGIN_GAD,     EC_TOPMARGIN,   0},
    {STRING_KIND, 516, 77,  103, 14, MSG_PS_BOTTOMMARGIN_GAD,  EC_BOTTOMMARGIN, 0},
    {STRING_KIND, 516, 93,  103, 14, MSG_PS_FONTPOINTSIZE_GAD, EC_FONTPOINTSIZE,0},
    {STRING_KIND, 516, 107, 103, 14, MSG_PS_LINELEADING_GAD,   EC_LINELEADING, 0},
    {TEXT_KIND,   516, 121, 103, 14, MSG_PS_LINESPERINCH_GAD,  EC_LINESPERINCH,0},
    {TEXT_KIND,   516, 135, 103, 14, MSG_PS_LINESPERPAGE_GAD,  EC_LINESPERPAGE,0},

    {STRING_KIND, 516, 35,  103, 14, MSG_PS_LEFTEDGE_GAD,      EC_LEFTEDGE,    0},
    {STRING_KIND, 516, 49,  103, 14, MSG_PS_TOPEDGE_GAD,       EC_TOPEDGE,     0},
    {STRING_KIND, 516, 63,  103, 14, MSG_PS_WIDTH_GAD,         EC_WIDTH,       0},
    {STRING_KIND, 516, 77,  103, 14, MSG_PS_HEIGHT_GAD,        EC_HEIGHT,      0},
    {CYCLE_KIND,  456, 93,  163, 14, MSG_PS_IMAGE_GAD,         EC_IMAGE,       0},
    {CYCLE_KIND,  456, 107, 163, 14, MSG_PS_SHADING_GAD,       EC_SHADING,     0},
    {CYCLE_KIND,  456, 121, 163, 14, MSG_PS_DITHERING_GAD,     EC_DITHERING,   0},
    {CYCLE_KIND,  456, 135, 163, 14, MSG_PS_TRANSPARENT_GAD,   EC_TRANSPARENT, 0},
d312 4
a315 4
    {CYCLE_KIND,  456, 35, 163, 14, MSG_PS_ASPECT_GAD,         EC_ASPECT,      0},
    {CYCLE_KIND,  456, 49, 163, 14, MSG_PS_SCALINGTYPE_GAD,    EC_SCALINGTYPE, 0},
    {CYCLE_KIND,  456, 63, 163, 14, MSG_PS_SCALINGMATH_GAD,    EC_SCALINGMATH, 0},
    {CYCLE_KIND,  456, 77, 163, 14, MSG_PS_CENTERING_GAD,      EC_CENTERING,   0}
d675 1
a675 1
            DrawBB(ed,375,111,243,50,GTBB_Recessed, TRUE,
d679 2
a680 2
            CenterLine(ed,rp,MSG_PS_SAMPLEPICTURE_HDR,294,106,68);
            CenterLine(ed,rp,MSG_PS_SAMPLESCALING_HDR,375,106,243);
d690 3
a692 3
            RectFill(rp, 416+borLeft, 112+borTop, 416+borLeft, 159+borTop);
            RectFill(rp, 467+borLeft, 112+borTop, 467+borLeft, 159+borTop);
            RectFill(rp, 520+borLeft, 112+borTop, 520+borLeft, 159+borTop);
d695 1
a695 1
            RenderBox(ed,284,124,24,24,24,24,1,1,TRUE,TRUE,FALSE,FALSE,FALSE);
d698 4
a701 4
	RenderBox(ed,380,129,14,14,dims[0].Width,dims[0].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,421,115,42,20,dims[1].Width,dims[1].Height,1,1,centerX,centerY,sideways,complete,TRUE);
	RenderBox(ed,472,115,20,42,dims[2].Width,dims[2].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,525,115,42,42,dims[3].Width,dims[3].Height,1,1,centerX,centerY,sideways,complete,FALSE);
d1416 2
a1417 1
                             RectFill (window->RPort, window->BorderLeft + 289, window->BorderTop + 30, window->Width - window->BorderRight - 1, window->Height - window->BorderBottom - 20);
@


38.14
log
@Changed some defaults
@
text
@a489 2
                    LockLayerInfo(&window->WScreen->LayerInfo);

a563 2

                    UnlockLayerInfo(&window->WScreen->LayerInfo);
@


38.13
log
@Made window a bit wider for the SPanish folks
@
text
@d152 1
a152 1
	ed->ed_PrefsDefaults.ps_ScalingMath   = SM_INTEGER;
d159 1
a159 1
	ed->ed_PrefsDefaults.ps_Shading       = SHAD_BW;
d161 1
a161 1
	ed->ed_PrefsDefaults.ps_Transparency  = TRANS_COLOR0;
@


38.12
log
@Fixed bad rendering
@
text
@d240 1
a240 1
#define NW_WIDTH     622
d277 2
a278 2
    {BUTTON_KIND,  267, 168, 87, 14, MSG_USE_GAD,              EC_USE,         0},
    {BUTTON_KIND,  527, 168, 87, 14, MSG_CANCEL_GAD,           EC_CANCEL,      0},
d280 31
a310 31
    {CYCLE_KIND,   148, 8,   135, 14, MSG_PS_DRIVERMODE_GAD,   EC_DRIVERMODE,  0},
    {SLIDER_KIND,  172, 31,  111, 11, MSG_PS_COPIES_GAD,       EC_COPIES,      0},
    {CYCLE_KIND,   148, 51,  135, 14, MSG_PS_PAPERFORMAT_GAD,  EC_PAPERFORMAT, 0},
    {STRING_KIND,  148, 67,  135, 14, MSG_PS_PAPERWIDTH_GAD,   EC_PAPERWIDTH,  0},
    {STRING_KIND,  148, 83,  135, 14, MSG_PS_PAPERHEIGHT_GAD,  EC_PAPERHEIGHT,  0},
    {INTEGER_KIND, 148, 106, 135, 14, MSG_PS_HORIZDPI_GAD,     EC_HORIZONTALDPI,0},
    {INTEGER_KIND, 148, 122, 135, 14, MSG_PS_VERTDPI_GAD,      EC_VERTICALDPI, 0},
    {CYCLE_KIND,   377, 8,   207, 14, MSG_NOTHING,             EC_PANEL,       0},

    {CYCLE_KIND,  452, 35,  163, 14, MSG_PS_FONT_GAD,          EC_PRINTFONT,   0},
    {CYCLE_KIND,  452, 51,  163, 14, MSG_PS_PITCH_GAD,         EC_PITCH,       0},
    {CYCLE_KIND,  452, 67,  163, 14, MSG_PS_ORIENTATION_GAD,   EC_ORIENTATION, 0},
    {CYCLE_KIND,  452, 83,  163, 14, MSG_PS_TAB_GAD,           EC_TAB,         0},

    {STRING_KIND, 512, 35,  103, 14, MSG_PS_LEFTMARGIN_GAD,    EC_LEFTMARGIN,  0},
    {STRING_KIND, 512, 49,  103, 14, MSG_PS_RIGHTMARGIN_GAD,   EC_RIGHTMARGIN, 0},
    {STRING_KIND, 512, 63,  103, 14, MSG_PS_TOPMARGIN_GAD,     EC_TOPMARGIN,   0},
    {STRING_KIND, 512, 77,  103, 14, MSG_PS_BOTTOMMARGIN_GAD,  EC_BOTTOMMARGIN, 0},
    {STRING_KIND, 512, 93,  103, 14, MSG_PS_FONTPOINTSIZE_GAD, EC_FONTPOINTSIZE,0},
    {STRING_KIND, 512, 107, 103, 14, MSG_PS_LINELEADING_GAD,   EC_LINELEADING, 0},
    {TEXT_KIND,   512, 121, 103, 14, MSG_PS_LINESPERINCH_GAD,  EC_LINESPERINCH,0},
    {TEXT_KIND,   512, 135, 103, 14, MSG_PS_LINESPERPAGE_GAD,  EC_LINESPERPAGE,0},

    {STRING_KIND, 512, 35,  103, 14, MSG_PS_LEFTEDGE_GAD,      EC_LEFTEDGE,    0},
    {STRING_KIND, 512, 49,  103, 14, MSG_PS_TOPEDGE_GAD,       EC_TOPEDGE,     0},
    {STRING_KIND, 512, 63,  103, 14, MSG_PS_WIDTH_GAD,         EC_WIDTH,       0},
    {STRING_KIND, 512, 77,  103, 14, MSG_PS_HEIGHT_GAD,        EC_HEIGHT,      0},
    {CYCLE_KIND,  452, 93,  163, 14, MSG_PS_IMAGE_GAD,         EC_IMAGE,       0},
    {CYCLE_KIND,  452, 107, 163, 14, MSG_PS_SHADING_GAD,       EC_SHADING,     0},
    {CYCLE_KIND,  452, 121, 163, 14, MSG_PS_DITHERING_GAD,     EC_DITHERING,   0},
    {CYCLE_KIND,  452, 135, 163, 14, MSG_PS_TRANSPARENT_GAD,   EC_TRANSPARENT, 0},
d312 4
a315 4
    {CYCLE_KIND,  452, 35, 163, 14, MSG_PS_ASPECT_GAD,         EC_ASPECT,      0},
    {CYCLE_KIND,  452, 49, 163, 14, MSG_PS_SCALINGTYPE_GAD,    EC_SCALINGTYPE, 0},
    {CYCLE_KIND,  452, 63, 163, 14, MSG_PS_SCALINGMATH_GAD,    EC_SCALINGMATH, 0},
    {CYCLE_KIND,  452, 77, 163, 14, MSG_PS_CENTERING_GAD,      EC_CENTERING,   0}
d679 1
a679 1
            DrawBB(ed,371,111,243,50,GTBB_Recessed, TRUE,
d683 2
a684 2
            CenterLine(ed,rp,MSG_PS_SAMPLEPICTURE_HDR,290,106,68);
            CenterLine(ed,rp,MSG_PS_SAMPLESCALING_HDR,371,106,243);
d686 6
a691 6
            RectFill(rp, 345+borLeft, 134+borTop, 357+borLeft, 137+borTop);
            RectFill(rp, 358+borLeft, 131+borTop, 358+borLeft, 140+borTop);
            RectFill(rp, 359+borLeft, 132+borTop, 359+borLeft, 139+borTop);
            RectFill(rp, 360+borLeft, 133+borTop, 360+borLeft, 138+borTop);
            RectFill(rp, 361+borLeft, 134+borTop, 361+borLeft, 137+borTop);
            RectFill(rp, 362+borLeft, 135+borTop, 362+borLeft, 136+borTop);
d694 3
a696 3
            RectFill(rp, 412+borLeft, 112+borTop, 412+borLeft, 159+borTop);
            RectFill(rp, 463+borLeft, 112+borTop, 463+borLeft, 159+borTop);
            RectFill(rp, 516+borLeft, 112+borTop, 516+borLeft, 159+borTop);
d702 4
a705 4
	RenderBox(ed,376,129,14,14,dims[0].Width,dims[0].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,417,115,42,20,dims[1].Width,dims[1].Height,1,1,centerX,centerY,sideways,complete,TRUE);
	RenderBox(ed,468,115,20,42,dims[2].Width,dims[2].Height,1,1,centerX,centerY,sideways,complete,FALSE);
	RenderBox(ed,521,115,42,42,dims[3].Width,dims[3].Height,1,1,centerX,centerY,sideways,complete,FALSE);
d1420 1
a1420 1
                             RectFill (window->RPort, window->BorderLeft + 285, window->BorderTop + 30, window->Width - window->BorderRight - 1, window->Height - window->BorderBottom - 20);
@


38.11
log
@Sample Scalings display is now always updated when it should be
The Lines Per Page and Lines Per Inch displays are now updated whenever the Paper
  Format gadget is clicked
The built-in defaults make more sense
@
text
@d724 14
a737 11
    sprintf(ed->ed_LinesPerInchBuf,"%ld",72000 / (ed->ed_PrefsWork.ps_Leading+ed->ed_PrefsWork.ps_FontPointSize));
    ed->ed_LinesPerInch = DoPrefsGadget(ed,&EG[21],ed->ed_LinesPerInch,
					GTTX_Text,   ed->ed_LinesPerInchBuf,
					GTTX_Border, TRUE,
					TAG_DONE);

    sprintf(ed->ed_LinesPerPageBuf,"%ld",(ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin - ed->ed_PrefsWork.ps_TopMargin) / (ed->ed_PrefsWork.ps_Leading+ed->ed_PrefsWork.ps_FontPointSize));
    ed->ed_LinesPerPage = DoPrefsGadget(ed,&EG[22],ed->ed_LinesPerPage,
					GTTX_Text,   ed->ed_LinesPerPageBuf,
					GTTX_Border, TRUE,
					TAG_DONE);
d1372 1
a1372 2
	if (ed->ed_CurrentPanel == 1)
	    UpdateTextDisplay (ed);
@


38.10
log
@Removed WA_Left and WA_Top
@
text
@d144 6
a149 6
	ed->ed_PrefsDefaults.ps_LeftMargin    = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_RightMargin   = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_TopMargin     = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_BottomMargin  = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_FontPointSize = 15 * 1000;
	ed->ed_PrefsDefaults.ps_Leading       = 17 * 1000;
d154 2
a155 2
	ed->ed_PrefsDefaults.ps_LeftEdge      = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_TopEdge       = 15 * 72 * 100;	/* 1.5 inches */
d157 1
a157 1
	ed->ed_PrefsDefaults.ps_Height        = 80 * 72 * 100;	/* 8 inches */
d741 10
d911 1
a911 1
	UpdateTextDisplay (ed);
d1478 2
@


38.9
log
@Added LayerInfo locking to sample scaling display refresh code
@
text
@a239 2
#define NW_LEFT      0
#define NW_TOP       0
d340 2
a341 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
d368 1
a368 3
    && (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,         NW_LEFT,
                                           WA_Top,          NW_TOP,
                                           WA_InnerWidth,   NW_WIDTH,
@


38.8
log
@Sample scalings now look OK in monochrome
@
text
@d494 2
d570 2
@


38.7
log
@save paper format
ghost transparent, and dithering
@
text
@d514 4
a517 2
                    SetAPen (rp, di->dri_Pens[SHADOWPEN]);
                    RectFill (rp, left, top, left + width - 1, top + height - 1);
d519 2
d526 2
a527 2
                    SetAPen (rp, di->dri_Pens[SHINEPEN]);
                    RectFill (rp, left, top, left + width - 1, top + height - 1);
d534 5
a538 1
                    SetAPen (rp, di->dri_Pens[SHADOWPEN]);  /* BACKGROUNDPEN */
@


38.6
log
@Removed Paper Type gadget
Renamed RightEdge and BottomEdge gadgets to Width and Height
Improved rendering of scaling samples. Now flickers much less
Fixed some bounds-checking bugs
@
text
@d132 1
a742 1
    ed->ed_CurrentFormat = i;
d802 1
a802 1
				       GTCY_Active, ed->ed_CurrentFormat,
d806 1
a806 1
					  GA_Disabled,   ed->ed_CurrentFormat != 3,
d813 1
a813 1
					   GA_Disabled,   ed->ed_CurrentFormat != 3,
d933 1
a933 1
					 GA_Disabled, ed->ed_PrefsWork.ps_Shading == SHAD_BW,
d939 4
a942 3
					   GTCY_Labels, ed->ed_TransparentLabels,
					   GTCY_Active, ed->ed_PrefsWork.ps_Transparency,
					   TAG_DONE);
d1001 1
a1001 1
                            if (ed->ed_CurrentFormat == 3)
d1026 1
a1026 1
                             if (ed->ed_CurrentFormat == 3)
d1435 1
a1435 1
	case EC_PAPERFORMAT: ed->ed_CurrentFormat = icode;
d1505 3
a1507 1
                              SetGadgetAttr(ed,ed->ed_Dithering,GA_Disabled, icode == SHAD_BW,
@


38.5
log
@*** empty log message ***
@
text
@a131 1
	ed->ed_PrefsDefaults.ps_PaperType     = PT_CONTINUOUS;
a153 1
	ed->ed_PrefsDefaults.ps_RightEdge     = 15 * 72 * 100;	/* 1.5 inches */
d155 2
a156 1
	ed->ed_PrefsDefaults.ps_BottomEdge    = 15 * 72 * 100;	/* 1.5 inches */
d282 6
a287 7
    {SLIDER_KIND,  172, 24,  111, 11, MSG_PS_COPIES_GAD,       EC_COPIES,      0},
    {CYCLE_KIND,   148, 41,  135, 14, MSG_PS_PAPERTYPE_GAD,    EC_PAPERTYPE,   0},
    {CYCLE_KIND,   148, 57,  135, 14, MSG_PS_PAPERFORMAT_GAD,  EC_PAPERFORMAT, 0},
    {STRING_KIND,  148, 73,  135, 14, MSG_PS_PAPERWIDTH_GAD,   EC_PAPERWIDTH,  0},
    {STRING_KIND,  148, 89,  135, 14, MSG_PS_PAPERHEIGHT_GAD,  EC_PAPERHEIGHT,  0},
    {INTEGER_KIND, 148, 109, 135, 14, MSG_PS_HORIZDPI_GAD,     EC_HORIZONTALDPI,0},
    {INTEGER_KIND, 148, 125, 135, 14, MSG_PS_VERTDPI_GAD,      EC_VERTICALDPI, 0},
d305 3
a307 3
    {STRING_KIND, 512, 49,  103, 14, MSG_PS_RIGHTEDGE_GAD,     EC_RIGHTEDGE,   0},
    {STRING_KIND, 512, 63,  103, 14, MSG_PS_TOPEDGE_GAD,       EC_TOPEDGE,     0},
    {STRING_KIND, 512, 77,  103, 14, MSG_PS_BOTTOMEDGE_GAD,    EC_BOTTOMEDGE,  0},
a347 1
    InitLabels(ed,&ed->ed_PaperTypeLabels[0],   sizeof(ed->ed_PaperTypeLabels),   MSG_PS_TYPE_1);
d442 15
a456 15
VOID RenderBox (EdDataPtr ed,
		 UWORD areaLeft, UWORD areaTop, UWORD areaWidth, UWORD areaHeight,
		 UWORD boxWidth, UWORD boxHeight,
		 UWORD xScale, UWORD yScale,
		 BOOL centerX, BOOL centerY,
		 BOOL sideways, BOOL blankPage, BOOL stacked)
{
    BOOL inrefresh = (window->Flags & WINDOWREFRESH) ? TRUE : FALSE;
    struct RastPort *rp;
    struct DrawInfo *di;
    UWORD left, top, width, height;
    struct Region *newRegion;
    struct Region *oldRegion;
    struct Rectangle Rect;
    UWORD i;
d466 3
a474 5

        }
        else if (!blankPage)
        {
            i = 1;
a476 5
        SetAPen (rp, di->dri_Pens[FILLPEN]);
        SetAfPt (rp, pattern, 1);
        RectFill (rp, areaLeft, areaTop, areaLeft + areaWidth - 1, areaTop + areaHeight - 1);
        SetAfPt (rp, NULL, 0);

d505 8
d563 7
d626 2
a627 2
    str = GetString (&ed->ed_LocaleInfo, id);
    len = strlen (str);
d629 4
a632 4
    Move (rp, (w - TextLength (rp, str, len)) / 2 + window->BorderLeft + x,
	  window->BorderTop + y);
    Text (rp, str, len);
}
d647 1
a647 1
VOID RenderDisplay(EdDataPtr ed)
d666 34
a699 3
	DrawBB(ed,371,111,243,50,GTBB_Recessed, TRUE,
                                 GT_VisualInfo, ed->ed_VisualInfo,
                                 TAG_DONE);
d701 1
a701 1
	SetAPen(rp,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);
a702 2
	CenterLine(ed,rp,MSG_PS_SAMPLEPICTURE_HDR,290,106,68);
	CenterLine(ed,rp,MSG_PS_SAMPLESCALING_HDR,371,106,243);
d704 4
a707 20
	RectFill(rp, 345+borLeft, 134+borTop, 357+borLeft, 137+borTop);
	RectFill(rp, 358+borLeft, 131+borTop, 358+borLeft, 140+borTop);
	RectFill(rp, 359+borLeft, 132+borTop, 359+borLeft, 139+borTop);
	RectFill(rp, 360+borLeft, 133+borTop, 360+borLeft, 138+borTop);
	RectFill(rp, 361+borLeft, 134+borTop, 361+borLeft, 137+borTop);
	RectFill(rp, 362+borLeft, 135+borTop, 362+borLeft, 136+borTop);

	SetAfPt(rp,pattern,1);
	RectFill(rp, 412+borLeft, 112+borTop, 412+borLeft, 159+borTop);
	RectFill(rp, 463+borLeft, 112+borTop, 463+borLeft, 159+borTop);
	RectFill(rp, 516+borLeft, 112+borTop, 516+borLeft, 159+borTop);
	SetAfPt(rp,NULL,0);

	RenderBox(ed,312,124,24,24,24,24,1,1,TRUE,TRUE,FALSE,FALSE,FALSE);
	RenderBox(ed,376,129,14,14,dims[0].Width,dims[0].Height,1,1,centerX,centerY,sideways,TRUE,FALSE);
	RenderBox(ed,417,115,42,20,dims[1].Width,dims[1].Height,1,1,centerX,centerY,sideways,TRUE,TRUE);
	RenderBox(ed,468,115,20,42,dims[2].Width,dims[2].Height,1,1,centerX,centerY,sideways,TRUE,FALSE);
	RenderBox(ed,521,115,42,42,dims[3].Width,dims[3].Height,1,1,centerX,centerY,sideways,TRUE,FALSE);
    }
}
d716 1
a716 1
    ed->ed_LinesPerInch = DoPrefsGadget(ed,&EG[22],ed->ed_LinesPerInch,
d722 1
a722 1
    ed->ed_LinesPerPage = DoPrefsGadget(ed,&EG[23],ed->ed_LinesPerPage,
a752 1
	ed->ed_PaperType     = NULL;
a775 1
	ed->ed_RightEdge     = NULL;
d777 2
a778 1
	ed->ed_BottomEdge    = NULL;
d800 1
a800 6
    ed->ed_PaperType = DoPrefsGadget(ed,&EG[5],ed->ed_PaperType,
				     GTCY_Labels, ed->ed_PaperTypeLabels,
				     GTCY_Active, ed->ed_PrefsWork.ps_PaperType,
				     TAG_DONE);

    ed->ed_PaperFormat = DoPrefsGadget(ed,&EG[6],ed->ed_PaperFormat,
d805 1
a805 1
    if (ed->ed_PaperWidth = DoPrefsGadget(ed,&EG[7],ed->ed_PaperWidth,
d812 1
a812 1
    if (ed->ed_PaperHeight = DoPrefsGadget(ed,&EG[8],ed->ed_PaperHeight,
d819 1
a819 1
    ed->ed_HorizontalDPI = DoPrefsGadget(ed,&EG[9],ed->ed_HorizontalDPI,
d823 1
a823 1
    ed->ed_VerticalDPI = DoPrefsGadget(ed,&EG[10],ed->ed_VerticalDPI,
d827 1
a827 1
    ed->ed_Panel = DoPrefsGadget(ed,&EG[11],ed->ed_Panel,
d834 1
a834 1
	ed->ed_PrintFont = DoPrefsGadget(ed,&EG[12],ed->ed_PrintFont,
d839 1
a839 1
	ed->ed_Pitch = DoPrefsGadget(ed,&EG[13],ed->ed_Pitch,
d844 1
a844 1
	ed->ed_Orientation = DoPrefsGadget(ed,&EG[14],ed->ed_Orientation,
d849 1
a849 1
	ed->ed_Tab = DoPrefsGadget(ed,&EG[15],ed->ed_Tab,
d856 1
a856 1
	if (ed->ed_LeftMargin = DoPrefsGadget(ed,&EG[16],ed->ed_LeftMargin,
d862 1
a862 1
	if (ed->ed_RightMargin = DoPrefsGadget(ed,&EG[17],ed->ed_RightMargin,
d869 1
a869 1
	if (ed->ed_TopMargin = DoPrefsGadget(ed,&EG[18],ed->ed_TopMargin,
d875 1
a875 1
	if (ed->ed_BottomMargin = DoPrefsGadget(ed,&EG[19],ed->ed_BottomMargin,
d881 1
a881 1
	if (ed->ed_FontPointSize = DoPrefsGadget(ed,&EG[20],ed->ed_FontPointSize,
d887 1
a887 1
	if (ed->ed_LineLeading = DoPrefsGadget(ed,&EG[21],ed->ed_LineLeading,
d897 1
a897 1
	if (ed->ed_LeftEdge = DoPrefsGadget(ed,&EG[24],ed->ed_LeftEdge,
d904 1
a904 7
	if (ed->ed_RightEdge = DoPrefsGadget(ed,&EG[25],ed->ed_RightEdge,
					     GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_RightEdge, 2),
					     GTST_EditHook, &ed->ed_FloatHook,
					     TAG_DONE))
	    ed->ed_RightEdge->UserData = (APTR) 2;

	if (ed->ed_TopEdge = DoPrefsGadget(ed, &EG[26],ed->ed_TopEdge,
d910 11
a920 5
	if (ed->ed_BottomEdge = DoPrefsGadget(ed,&EG[27],ed->ed_BottomEdge,
					      GTST_String,   FromMille (ed, ed->ed_PrefsWork.ps_BottomEdge, 2),
					      GTST_EditHook, &ed->ed_FloatHook,
					      TAG_DONE))
	    ed->ed_BottomEdge->UserData = (APTR) 2;
d922 1
a922 1
	ed->ed_Image = DoPrefsGadget(ed,&EG[28],ed->ed_Image,
d927 1
a927 1
	ed->ed_Shading = DoPrefsGadget(ed,&EG[29],ed->ed_Shading,
d932 1
a932 1
	ed->ed_Dithering = DoPrefsGadget(ed,&EG[30],ed->ed_Dithering,
d938 1
a938 1
	ed->ed_Transparent = DoPrefsGadget(ed,&EG[31],ed->ed_Transparent,
d945 1
a945 1
	ed->ed_Aspect = DoPrefsGadget(ed,&EG[32],ed->ed_Aspect,
d950 1
a950 1
	ed->ed_ScalingType = DoPrefsGadget(ed,&EG[33],ed->ed_ScalingType,
d955 1
a955 1
	ed->ed_ScalingMath = DoPrefsGadget(ed,&EG[34],ed->ed_ScalingMath,
d961 1
a961 1
	ed->ed_Centering = DoPrefsGadget(ed,&EG[35],ed->ed_Centering,
d1085 1
a1085 1
                            else if (num > (ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_RightMargin))
d1107 1
a1107 1
                             if ((ed->ed_PrefsWork.ps_PaperWidth - num) < ed->ed_PrefsWork.ps_LeftMargin)
d1109 1
a1109 1
                                 num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftMargin;
d1112 1
a1112 1
                             else if (num > ed->ed_PrefsWork.ps_PaperWidth)
d1114 1
a1114 1
                                 num = ed->ed_PrefsWork.ps_PaperWidth;
d1139 1
a1139 1
                           else if (num > (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin))
d1161 1
a1161 1
                              if ((ed->ed_PrefsWork.ps_PaperHeight - num) < ed->ed_PrefsWork.ps_TopMargin)
d1163 1
a1163 1
                                  num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin;
d1166 1
a1166 1
                              else if (num > ed->ed_PrefsWork.ps_PaperHeight)
d1168 1
a1168 1
                                  num = ed->ed_PrefsWork.ps_PaperHeight;
d1239 1
a1239 1
                          else if (num > (ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge))
d1241 1
a1241 1
                              num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge;
d1247 1
a1247 1
                                  act = ed->ed_BottomEdge;
d1249 1
a1249 1
                                  act = ed->ed_RightEdge;
a1258 27
	case EC_RIGHTEDGE: num = ToMille (ed, ((struct StringInfo *) ed->ed_RightEdge->SpecialInfo)->Buffer);
                           act = ed->ed_RightEdge;
                           if ((ed->ed_PrefsWork.ps_PaperWidth - num) < ed->ed_PrefsWork.ps_LeftEdge)
                           {
                               num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge;
                               beep = TRUE;
                           }
                           else if (num > ed->ed_PrefsWork.ps_PaperWidth)
                           {
                               num = ed->ed_PrefsWork.ps_PaperWidth;
                               beep = TRUE;
                           }
                           else
                           {
                               if (shift)
                                   act = ed->ed_LeftEdge;
                               else
                                   act = ed->ed_TopEdge;
                           }
                           ed->ed_PrefsWork.ps_RightEdge = num;

                           if (screenStuff)
                               SetGadgetAttr (ed, ed->ed_RightEdge,
                                              GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightEdge, 2),
                                              TAG_DONE);
                           break;

d1266 1
a1266 1
                         else if (num > (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomEdge))
d1268 1
a1268 1
                             num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomEdge;
d1274 1
a1274 1
                                 act = ed->ed_RightEdge;
d1276 1
a1276 1
                                 act = ed->ed_BottomEdge;
d1286 43
a1328 12
	case EC_BOTTOMEDGE: num = ToMille (ed, ((struct StringInfo *) ed->ed_BottomEdge->SpecialInfo)->Buffer);
                            act = ed->ed_BottomEdge;
                            if ((ed->ed_PrefsWork.ps_PaperHeight - num) < ed->ed_PrefsWork.ps_TopEdge)
                            {
                                num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopEdge;
                                beep = TRUE;
                            }
                            else if (num > ed->ed_PrefsWork.ps_PaperHeight)
                            {
                                num = ed->ed_PrefsWork.ps_PaperHeight;
                                beep = TRUE;
                            }
d1330 3
a1332 7
                            {
                                if (shift)
                                    act = ed->ed_TopEdge;
                                else
                                    act = ed->ed_LeftEdge;
                            }
                            ed->ed_PrefsWork.ps_BottomEdge = num;
d1334 5
a1338 5
                            if (screenStuff)
                                SetGadgetAttr (ed, ed->ed_BottomEdge,
                                               GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomEdge, 2),
                                               TAG_DONE);
                            break;
a1377 1
	ProcessTextGadget(ed, EC_RIGHTEDGE, FALSE);
d1379 2
a1380 1
	ProcessTextGadget(ed, EC_BOTTOMEDGE, FALSE);
d1422 1
a1422 1
                                 RenderGadgets (ed);
a1430 3
	case EC_PAPERTYPE  : ed->ed_PrefsWork.ps_PaperType = icode;
                             break;

a1494 1
	case EC_RIGHTEDGE   :
d1496 2
a1497 1
	case EC_BOTTOMEDGE  : ProcessTextGadget(ed,ec,TRUE);
d1517 1
a1517 1
                             RenderDisplay (ed);
d1523 1
a1523 1
                             RenderDisplay(ed);
d1530 1
a1530 1
                             RenderDisplay (ed);
@


38.4
log
@*** empty log message ***
@
text
@a194 2
WORD i;

a201 8

	for (i = 0; i < 3; i++)
	{
	    if ((ed->ed_PrefsWork.ps_PaperWidth == sizes[i].Width) &&
		(ed->ed_PrefsWork.ps_PaperHeight == sizes[i].Height))
		break;
	}
	ed->ed_CurrentFormat = i;
d615 2
a616 2
VOID CenterLine (EdDataPtr ed, struct RastPort * rp, AppStringsID id,
		  UWORD x, UWORD y, UWORD w)
d618 2
a619 2
    STRPTR str;
    UWORD len;
d633 1
a633 1
VOID DrawBB (EdDataPtr ed, UWORD x, UWORD y, UWORD w, UWORD h, ULONG tag,...)
d635 1
a635 2

    DrawBevelBoxA (ed->ed_Window->RPort, x + window->BorderLeft, y + window->BorderTop, w, h, (struct TagItem *) & tag);
d697 1
a697 1
    sprintf(ed->ed_LinesPerInchBuf,"%ld",72000 / ed->ed_PrefsWork.ps_Leading);
d703 1
a703 1
    sprintf(ed->ed_LinesPerPageBuf,"%ld",(ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin - ed->ed_PrefsWork.ps_TopMargin) / ed->ed_PrefsWork.ps_Leading);
d716 10
d770 1
a770 1
				      GTCY_Active, 0,
d1440 10
a1449 1
                             RenderGadgets(ed);
@


38.3
log
@update lines-per-page, extreme margins
@
text
@d1 1
d22 1
d56 3
d60 1
a61 1
#define SysBase		ed->ed_SysBase
a64 20
#if 0
/* PaperSize (all paper sizes have a zero in the lowest nybble) */
#define US_LETTER	0x00
#define US_LEGAL	0x10
#define N_TRACTOR	0x20
#define W_TRACTOR	0x30
#define CUSTOM		0x40

/* New PaperSizes for V36: */
#define EURO_A0         0x50	/* European size A0: 841 x 1189 mm */
#define EURO_A1         0x60	/* European size A1: 594 x 841 mm */
#define EURO_A2         0x70	/* European size A2: 420 x 594 mm */
#define EURO_A3         0x80	/* European size A3: 297 x 420 mm */
#define EURO_A4         0x90	/* European size A4: 210 x 297 mm */
#define EURO_A5         0xA0	/* European size A5: 148 x 210 mm */
#define EURO_A6         0xB0	/* European size A6: 105 x 148 mm */
#define EURO_A7         0xC0	/* European size A7: 74 x 105 mm */
#define EURO_A8         0xD0	/* European size A8: 52 x 74 mm */

#endif
d74 3
a76 3
    {85 * 72 * 100, 11 * 72 * 1000},	/* 0 : US Letter */
    {85 * 72 * 100, 14 * 72 * 1000},	/* 1 : US Legal */
    {210 * 28333, 297 * 28333},	/* 2 : DIN A4 */
d79 1
d109 13
a121 1
EdStatus InitEdData (EdDataPtr ed)
d123 2
a124 8
    EdStatus result = ES_NO_MEMORY;
    struct Locale *locale;
    UWORD i;

    if (ed->ed_PlanePtr = AllocRaster (TMP_WIDTH, TMP_HEIGHT))
    {
	for (i = 0; i < AREA_SIZE; i++)
	    ed->ed_AreaBuffer[i] = 0;
d126 12
a137 11
	InitArea (&ed->ed_AreaInfo, ed->ed_AreaBuffer, (AREA_SIZE * 2) / 5);
	InitTmpRas (&ed->ed_TmpRas, ed->ed_PlanePtr, RASSIZE (TMP_WIDTH, TMP_HEIGHT));

	ed->ed_LayersBase = OpenLibrary ("layers.library", 36);
	ed->ed_PrefsDefaults.ps_DriverMode = DM_POSTSCRIPT;
	ed->ed_PrefsDefaults.ps_PaperType = PT_CONTINUOUS;
	ed->ed_PrefsDefaults.ps_Copies = 1;
	ed->ed_PrefsDefaults.ps_PaperWidth = 85 * 72 * 100;	/* 8.5 inches */
	ed->ed_PrefsDefaults.ps_PaperHeight = 11 * 72 * 1000;	/* 11 inches  */
	ed->ed_CurPaperWidth = 85 * 72 * 100;	/* 8.5 inches */
	ed->ed_CurPaperHeight = 11 * 72 * 1000;	/* 11 inches  */
d139 9
a147 9
	ed->ed_PrefsDefaults.ps_VerticalDPI = 300;
	ed->ed_PrefsDefaults.ps_Font = FONT_COURIER;
	ed->ed_PrefsDefaults.ps_Pitch = PITCH_NORMAL;
	ed->ed_PrefsDefaults.ps_Orientation = ORIENT_PORTRAIT;
	ed->ed_PrefsDefaults.ps_Tab = TAB_INCH;
	ed->ed_PrefsDefaults.ps_LeftMargin = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_RightMargin = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_TopMargin = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_BottomMargin = 15 * 72 * 100;	/* 1.5 inches */
d149 13
a161 13
	ed->ed_PrefsDefaults.ps_Leading = 17 * 1000;
	ed->ed_PrefsDefaults.ps_Aspect = ASP_HORIZ;
	ed->ed_PrefsDefaults.ps_ScalingType = ST_ASPECT_BOTH;
	ed->ed_PrefsDefaults.ps_ScalingMath = SM_INTEGER;
	ed->ed_PrefsDefaults.ps_Centering = CENT_BOTH;
	ed->ed_PrefsDefaults.ps_LeftEdge = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_RightEdge = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_TopEdge = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_BottomEdge = 15 * 72 * 100;	/* 1.5 inches */
	ed->ed_PrefsDefaults.ps_Image = IM_POSITIVE;
	ed->ed_PrefsDefaults.ps_Shading = SHAD_BW;
	ed->ed_PrefsDefaults.ps_Dithering = DITH_DEFAULT;
	ed->ed_PrefsDefaults.ps_Transparency = TRANS_COLOR0;
d163 1
a163 1
	ed->ed_PrefsWork = ed->ed_PrefsDefaults;
d166 1
a166 2
	initHook (&ed->ed_FloatHook, floath);
	initHook (&ed->ed_NumberHook, numberh);
d171 1
a171 1
	    CloseLocale (locale);
d177 1
a177 1
    return (result);
d180 1
d183 2
a184 1
VOID CleanUpEdData (EdDataPtr ed)
d186 2
a188 4
    if (ed->ed_PlanePtr)
	FreeRaster (ed->ed_PlanePtr, TMP_WIDTH, TMP_HEIGHT);
    CloseLibrary (ed->ed_LayersBase);
}
d193 1
a193 1
EdStatus ReadPrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
d195 1
a195 1
    WORD i;
d200 1
a200 1
    if (ReadChunkBytes (iff, &ed->ed_PrefsWork, sizeof (struct PrinterPSPrefs)) == sizeof (struct PrinterPSPrefs))
d212 1
a212 1
	return (ES_NORMAL);
d219 1
a219 1
EdStatus OpenPrefs (EdDataPtr ed, STRPTR name)
d222 1
a222 1
    return (ReadIFF (ed, name, IFFPrefChunks, IFFPrefChunkCnt, ReadPrefs));
d229 1
a229 1
EdStatus WritePrefs (EdDataPtr ed, struct IFFHandle * iff, struct ContextNode * cn)
d231 4
d236 1
a236 6
    if (!PushChunk (iff, 0, ID_PSPD, sizeof (struct PrinterPSPrefs)))
	if (WriteChunkBytes (iff, &ed->ed_PrefsWork, sizeof (struct PrinterPSPrefs)) == sizeof (struct PrinterPSPrefs))
	    if (!PopChunk (iff))
		return (ES_NORMAL);

    return (ES_IFFERROR);
d240 1
a240 1
EdStatus SavePrefs (EdDataPtr ed, STRPTR name)
d243 1
a243 1
    return (WriteIFF (ed, name, &IFFPrefHeader, WritePrefs));
d264 17
a280 17
    {NM_TITLE, MSG_PROJECT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_OPEN, EC_OPEN, 0},
    {NM_ITEM, MSG_PROJECT_SAVE_AS, EC_SAVEAS, 0},
    {NM_ITEM, MSG_NOTHING, EC_NOP, 0},
    {NM_ITEM, MSG_PROJECT_QUIT, EC_CANCEL, 0},

    {NM_TITLE, MSG_EDIT_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
    {NM_ITEM, MSG_EDIT_LAST_SAVED, EC_LASTSAVED, 0},
    {NM_ITEM, MSG_EDIT_RESTORE, EC_RESTORE, 0},

    {NM_TITLE, MSG_OPTIONS_MENU, EC_NOP, 0},
    {NM_ITEM, MSG_OPTIONS_SAVE_ICONS, EC_SAVEICONS, CHECKIT | MENUTOGGLE},
    {NM_ITEM, MSG_PS_OPTIONS_SYSTEM, EC_CM, 0},
    {NM_SUB, MSG_PS_OPTIONS_CM, EC_CM, CHECKIT},
    {NM_SUB, MSG_PS_OPTIONS_INCHES, EC_INCHES, CHECKIT},
    {NM_SUB, MSG_PS_OPTIONS_POINTS, EC_POINTS, CHECKIT},
d288 3
a290 3
    {BUTTON_KIND, 8, 168, 87, 14, MSG_SAVE_GAD, EC_SAVE, 0},
    {BUTTON_KIND, 267, 168, 87, 14, MSG_USE_GAD, EC_USE, 0},
    {BUTTON_KIND, 527, 168, 87, 14, MSG_CANCEL_GAD, EC_CANCEL, 0},
d292 41
a332 41
    {CYCLE_KIND, 148, 8, 135, 14, MSG_PS_DRIVERMODE_GAD, EC_DRIVERMODE, 0},
    {SLIDER_KIND, 172, 24, 111, 11, MSG_PS_COPIES_GAD, EC_COPIES, 0},
    {CYCLE_KIND, 148, 41, 135, 14, MSG_PS_PAPERTYPE_GAD, EC_PAPERTYPE, 0},
    {CYCLE_KIND, 148, 57, 135, 14, MSG_PS_PAPERFORMAT_GAD, EC_PAPERFORMAT, 0},
    {STRING_KIND, 148, 73, 135, 14, MSG_PS_PAPERWIDTH_GAD, EC_PAPERWIDTH, 0},
    {STRING_KIND, 148, 89, 135, 14, MSG_PS_PAPERHEIGHT_GAD, EC_PAPERHEIGHT, 0},
    {INTEGER_KIND, 148, 109, 135, 14, MSG_PS_HORIZDPI_GAD, EC_HORIZONTALDPI, 0},
    {INTEGER_KIND, 148, 125, 135, 14, MSG_PS_VERTDPI_GAD, EC_VERTICALDPI, 0},
    {CYCLE_KIND, 377, 8, 207, 14, MSG_NOTHING, EC_PANEL, 0},

    {CYCLE_KIND, 452, 35, 163, 14, MSG_PS_FONT_GAD, EC_PRINTFONT, 0},
    {CYCLE_KIND, 452, 51, 163, 14, MSG_PS_PITCH_GAD, EC_PITCH, 0},
    {CYCLE_KIND, 452, 67, 163, 14, MSG_PS_ORIENTATION_GAD, EC_ORIENTATION, 0},
    {CYCLE_KIND, 452, 83, 163, 14, MSG_PS_TAB_GAD, EC_TAB, 0},

    {STRING_KIND, 512, 35, 103, 14, MSG_PS_LEFTMARGIN_GAD, EC_LEFTMARGIN, 0},
    {STRING_KIND, 512, 49, 103, 14, MSG_PS_RIGHTMARGIN_GAD, EC_RIGHTMARGIN, 0},
    {STRING_KIND, 512, 63, 103, 14, MSG_PS_TOPMARGIN_GAD, EC_TOPMARGIN, 0},
    {STRING_KIND, 512, 77, 103, 14, MSG_PS_BOTTOMMARGIN_GAD, EC_BOTTOMMARGIN, 0},
    {STRING_KIND, 512, 93, 103, 14, MSG_PS_FONTPOINTSIZE_GAD, EC_FONTPOINTSIZE, 0},
    {STRING_KIND, 512, 107, 103, 14, MSG_PS_LINELEADING_GAD, EC_LINELEADING, 0},
    {TEXT_KIND, 512, 121, 103, 14, MSG_PS_LINESPERINCH_GAD, EC_LINESPERINCH, 0},
    {TEXT_KIND, 512, 135, 103, 14, MSG_PS_LINESPERPAGE_GAD, EC_LINESPERPAGE, 0},

    {STRING_KIND, 512, 35, 103, 14, MSG_PS_LEFTEDGE_GAD, EC_LEFTEDGE, 0},
    {STRING_KIND, 512, 49, 103, 14, MSG_PS_RIGHTEDGE_GAD, EC_RIGHTEDGE, 0},
    {STRING_KIND, 512, 63, 103, 14, MSG_PS_TOPEDGE_GAD, EC_TOPEDGE, 0},
    {STRING_KIND, 512, 77, 103, 14, MSG_PS_BOTTOMEDGE_GAD, EC_BOTTOMEDGE, 0},
    {CYCLE_KIND, 452, 93, 163, 14, MSG_PS_IMAGE_GAD, EC_IMAGE, 0},
    {CYCLE_KIND, 452, 107, 163, 14, MSG_PS_SHADING_GAD, EC_SHADING, 0},
    {CYCLE_KIND, 452, 121, 163, 14, MSG_PS_DITHERING_GAD, EC_DITHERING, 0},
    {CYCLE_KIND, 452, 135, 163, 14, MSG_PS_TRANSPARENT_GAD, EC_TRANSPARENT, 0},

    {CYCLE_KIND, 452, 35, 163, 14, MSG_PS_ASPECT_GAD, EC_ASPECT, 0},
    {CYCLE_KIND, 452, 49, 163, 14, MSG_PS_SCALINGTYPE_GAD, EC_SCALINGTYPE, 0},
    {CYCLE_KIND, 452, 63, 163, 14, MSG_PS_SCALINGMATH_GAD, EC_SCALINGMATH, 0},
    {CYCLE_KIND, 452, 77, 163, 14, MSG_PS_CENTERING_GAD, EC_CENTERING, 0}
};


/*****************************************************************************/
d335 1
a335 1
VOID InitLabels (EdDataPtr ed, STRPTR * ptr, ULONG arraySize, ULONG start)
a336 1

d346 1
a346 1
BOOL CreateDisplay (EdDataPtr ed)
d348 4
a351 1
    UWORD zoomSize[4];
d358 4
a361 4
    InitLabels (ed, &ed->ed_DriverModeLabels[0], sizeof (ed->ed_DriverModeLabels), MSG_PS_MODE_1);
    InitLabels (ed, &ed->ed_PaperFormatLabels[0], sizeof (ed->ed_PaperFormatLabels), MSG_PS_FORMAT_1);
    InitLabels (ed, &ed->ed_PaperTypeLabels[0], sizeof (ed->ed_PaperTypeLabels), MSG_PS_TYPE_1);
    InitLabels (ed, &ed->ed_PanelLabels[0], sizeof (ed->ed_PanelLabels), MSG_PS_PANEL_1);
d363 14
a376 14
    InitLabels (ed, &ed->ed_PrintFontLabels[0], sizeof (ed->ed_PrintFontLabels), MSG_PS_FONT_1);
    InitLabels (ed, &ed->ed_PitchLabels[0], sizeof (ed->ed_PitchLabels), MSG_PS_PITCH_1);
    InitLabels (ed, &ed->ed_OrientationLabels[0], sizeof (ed->ed_OrientationLabels), MSG_PS_ORIENTATION_1);
    InitLabels (ed, &ed->ed_TabLabels[0], sizeof (ed->ed_TabLabels), MSG_PS_TAB_1);

    InitLabels (ed, &ed->ed_AspectLabels[0], sizeof (ed->ed_AspectLabels), MSG_PS_ASPECT_1);
    InitLabels (ed, &ed->ed_ScalingTypeLabels[0], sizeof (ed->ed_ScalingTypeLabels), MSG_PS_SCALINGTYPE_1);
    InitLabels (ed, &ed->ed_ScalingMathLabels[0], sizeof (ed->ed_ScalingMathLabels), MSG_PS_SCALINGMATH_1);
    InitLabels (ed, &ed->ed_CenteringLabels[0], sizeof (ed->ed_CenteringLabels), MSG_PS_CENTERING_1);

    InitLabels (ed, &ed->ed_ImageLabels[0], sizeof (ed->ed_ImageLabels), MSG_PS_IMAGE_1);
    InitLabels (ed, &ed->ed_ShadingLabels[0], sizeof (ed->ed_ShadingLabels), MSG_PS_SHADING_1);
    InitLabels (ed, &ed->ed_DitheringLabels[0], sizeof (ed->ed_DitheringLabels), MSG_PS_DITHERING_1);
    InitLabels (ed, &ed->ed_TransparentLabels[0], sizeof (ed->ed_TransparentLabels), MSG_PS_TRANSPARENT_1);
d378 1
a378 1
    RenderGadgets (ed);
d381 18
a398 18
	&& (ed->ed_Menus = CreatePrefsMenus (ed, EM))
	&& (ed->ed_Window = OpenPrefsWindow (ed, WA_Left, NW_LEFT,
					     WA_Top, NW_TOP,
					     WA_InnerWidth, NW_WIDTH,
					     WA_InnerHeight, NW_HEIGHT,
					     WA_MinWidth, NW_MINWIDTH,
					     WA_MinHeight, NW_MINHEIGHT,
					     WA_MaxWidth, NW_MAXWIDTH,
					     WA_MaxHeight, NW_MAXHEIGHT,
					     WA_IDCMP, NW_IDCMP,
					     WA_Flags, NW_FLAGS,
					     WA_Zoom, zoomSize,
					     WA_AutoAdjust, TRUE,
					     WA_PubScreen, ed->ed_Screen,
					     WA_Title, GetString (&ed->ed_LocaleInfo, MSG_PS_NAME),
					     WA_NewLookMenus, TRUE,
					     WA_Gadgets, ed->ed_Gadgets,
					     TAG_DONE)))
d402 7
a408 3
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 0)))->MutualExclude = 6;
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 1)))->MutualExclude = 5;
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 2)))->MutualExclude = 3;
d410 3
a412 3
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 0)))->Flags &= ~CHECKED;
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 1)))->Flags &= ~CHECKED;
	    (ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 2)))->Flags &= ~CHECKED;
d415 1
a415 1
		(ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 0)))->Flags |= CHECKED;
d417 1
a417 1
		(ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 1)))->Flags |= CHECKED;
d419 1
a419 1
		(ItemAddress (ed->ed_Menus, FULLMENUNUM (2, 1, 2)))->Flags |= CHECKED;
d423 1
a423 1
	ed->ed_Window->RPort->TmpRas = &ed->ed_TmpRas;
d425 1
a425 1
	return (TRUE);
d428 3
a430 2
    DisposeDisplay (ed);
    return (FALSE);
d437 1
a437 1
VOID DisposeDisplay (EdDataPtr ed)
a438 1

d441 2
a442 2
	ClearMenuStrip (ed->ed_Window);
	CloseWindow (ed->ed_Window);
d444 5
a448 5
    FreeMenus (ed->ed_Menus);
    FreeGadgets (ed->ed_Gadgets);
}


a450 2
UWORD far pattern[] =
{0xaaaa, 0x5555};
d452 3
d471 2
a472 7
    if (ed->ed_Window)
    {
	rp = ed->ed_Window->RPort;
	di = ed->ed_DrawInfo;

	areaLeft += window->BorderLeft;
	areaTop += window->BorderTop;
d474 103
a576 101
	for (i = 0; i < 2; i++)
	{
	    if (i == 1)
	    {
		if (stacked)
		    areaTop += areaHeight + 2;
		else
		    areaLeft += areaWidth + 4;

	    }
	    else if (!blankPage)
	    {
		i = 1;
	    }

	    SetAPen (rp, di->dri_Pens[FILLPEN]);
	    SetAfPt (rp, pattern, 1);
	    RectFill (rp, areaLeft, areaTop, areaLeft + areaWidth - 1, areaTop + areaHeight - 1);
	    SetAfPt (rp, NULL, 0);

	    if (i == 1)
	    {
		if (newRegion = NewRegion ())
		{
		    left = areaLeft;
		    top = areaTop;
		    width = boxWidth;
		    height = boxHeight;

		    Rect.MinX = areaLeft;
		    Rect.MinY = areaTop;
		    Rect.MaxX = areaLeft + areaWidth - 1;
		    Rect.MaxY = areaTop + areaHeight - 1;

		    if (OrRectRegion (newRegion, &Rect))
		    {
			if (inrefresh)
			    EndRefresh (window, FALSE);
			oldRegion = InstallClipRegion (rp->Layer, newRegion);
			if (inrefresh)
			    BeginRefresh (window);

			if (centerX)
			    left += (areaWidth - boxWidth) / 2;

			if (centerY)
			    top += (areaHeight - boxHeight) / 2;

			SetAPen (rp, di->dri_Pens[SHADOWPEN]);
			RectFill (rp, left, top, left + width - 1, top + height - 1);

			left += xScale;
			top += yScale;
			width -= (xScale * 2);
			height -= (yScale * 2);

			SetAPen (rp, di->dri_Pens[SHINEPEN]);
			RectFill (rp, left, top, left + width - 1, top + height - 1);

			left += xScale;
			top += yScale;
			width -= (xScale * 2);
			height -= (yScale * 2);

			SetAPen (rp, di->dri_Pens[SHADOWPEN]);	/* BACKGROUNDPEN */
			if (sideways)
			{
			    Move (rp, left, top + height - 1);
			    Draw (rp, left + width - 1, top);
			    Draw (rp, left + width - 1, top + height - 1);
			    Draw (rp, left, top);

			    AreaMove (rp, left, top);	/* > */
			    AreaDraw (rp, left + (width >> 1) - 1, top + (height >> 1) - 1);
			    AreaDraw (rp, left, top + height - 1);
			}
			else
			{
			    Move (rp, left, top);
			    Draw (rp, left + width - 1, top + height - 1);
			    Draw (rp, left, top + height - 1);
			    Draw (rp, left + width - 1, top);

			    AreaMove (rp, left, top);	/* V */
			    AreaDraw (rp, left + (width >> 1) - 1, top + (height >> 1) - 1);
			    AreaDraw (rp, left + width - 1, top);
			}
			AreaEnd (rp);

			if (inrefresh)
			    EndRefresh (window, FALSE);
			InstallClipRegion (rp->Layer, oldRegion);
			if (inrefresh)
			    BeginRefresh (window);
		    }
		    DisposeRegion (newRegion);
		}
	    }
	}
    }
}
d581 1
d652 2
a653 1
VOID RenderDisplay (EdDataPtr ed)
d655 5
a659 2
    BOOL centerX, centerY, sideways;
    struct Dimensions *dims;
d665 2
a666 2
	centerX = (ed->ed_PrefsWork.ps_Centering == CENT_HORIZ) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
	centerY = (ed->ed_PrefsWork.ps_Centering == CENT_VERT) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
d668 3
d672 41
a712 3
	DrawBB (ed, 371, 111, 243, 50, GTBB_Recessed, TRUE,
		GT_VisualInfo, ed->ed_VisualInfo,
		TAG_DONE);
d714 6
a719 63
	SetAPen (window->RPort, ed->ed_DrawInfo->dri_Pens[TEXTPEN]);

	CenterLine (ed, window->RPort, MSG_PS_SAMPLEPICTURE_HDR, 290, 106, 68);
	CenterLine (ed, window->RPort, MSG_PS_SAMPLESCALING_HDR, 371, 106, 243);

	RectFill (window->RPort, 345 + window->BorderLeft, 134 + window->BorderTop,
		  357 + window->BorderLeft, 137 + window->BorderTop);

	RectFill (window->RPort, 358 + window->BorderLeft, 131 + window->BorderTop,
		  358 + window->BorderLeft, 140 + window->BorderTop);

	RectFill (window->RPort, 359 + window->BorderLeft, 132 + window->BorderTop,
		  359 + window->BorderLeft, 139 + window->BorderTop);

	RectFill (window->RPort, 360 + window->BorderLeft, 133 + window->BorderTop,
		  360 + window->BorderLeft, 138 + window->BorderTop);

	RectFill (window->RPort, 361 + window->BorderLeft, 134 + window->BorderTop,
		  361 + window->BorderLeft, 137 + window->BorderTop);

	RectFill (window->RPort, 362 + window->BorderLeft, 135 + window->BorderTop,
		  362 + window->BorderLeft, 136 + window->BorderTop);

	SetAfPt (window->RPort, pattern, 1);
	RectFill (window->RPort, 412 + window->BorderLeft, 112 + window->BorderTop,
		  412 + window->BorderLeft, 159 + window->BorderTop);
	RectFill (window->RPort, 463 + window->BorderLeft, 112 + window->BorderTop,
		  463 + window->BorderLeft, 159 + window->BorderTop);
	RectFill (window->RPort, 516 + window->BorderLeft, 112 + window->BorderTop,
		  516 + window->BorderLeft, 159 + window->BorderTop);
	SetAfPt (window->RPort, NULL, 0);

	RenderBox (ed, 312, 124, 24, 24, 24, 24, 1, 1, TRUE, TRUE, FALSE, FALSE, FALSE);

	RenderBox (ed, 376, 129, 14, 14, dims[0].Width, dims[0].Height,
		   1, 1, centerX, centerY, sideways, TRUE, FALSE);

	RenderBox (ed, 417, 115, 42, 20, dims[1].Width, dims[1].Height,
		   1, 1, centerX, centerY, sideways, TRUE, TRUE);

	RenderBox (ed, 468, 115, 20, 42, dims[2].Width, dims[2].Height,
		   1, 1, centerX, centerY, sideways, TRUE, FALSE);

	RenderBox (ed, 521, 115, 42, 42, dims[3].Width, dims[3].Height,
		   1, 1, centerX, centerY, sideways, TRUE, FALSE);
    }
}


/*****************************************************************************/

VOID UpdateTextDisplay (EdDataPtr ed)
{
    UBYTE buffer[32];
    LONG lpi, lpp;

    lpi = 72000 / ed->ed_PrefsWork.ps_Leading;
    sprintf (buffer, "%ld", lpi);
    ed->ed_LinesPerInch = DoPrefsGadget (ed, &EG[22], ed->ed_LinesPerInch,
					 GTTX_Text, buffer,
					 GTTX_CopyText, TRUE,
					 GTTX_Border, TRUE,
					 TAG_DONE);
a720 9
    lpp = (ed->ed_PrefsWork.ps_PaperHeight - (ed->ed_PrefsWork.ps_BottomMargin + ed->ed_PrefsWork.ps_TopMargin))
	  / ed->ed_PrefsWork.ps_Leading;
    sprintf (buffer, "%ld", lpp);
    ed->ed_LinesPerPage = DoPrefsGadget (ed, &EG[23], ed->ed_LinesPerPage,
					 GTTX_Text, buffer,
					 GTTX_CopyText, TRUE,
					 GTTX_Border, TRUE,
					 TAG_DONE);
}
d724 2
a725 1
VOID RenderGadgets (EdDataPtr ed)
a726 1

d734 6
a739 6
	ed->ed_DriverMode = NULL;
	ed->ed_Copies = NULL;
	ed->ed_PaperType = NULL;
	ed->ed_PaperFormat = NULL;
	ed->ed_PaperWidth = NULL;
	ed->ed_PaperHeight = NULL;
d741 10
a750 10
	ed->ed_VerticalDPI = NULL;
	ed->ed_Panel = NULL;
	ed->ed_PrintFont = NULL;
	ed->ed_Pitch = NULL;
	ed->ed_Orientation = NULL;
	ed->ed_Tab = NULL;
	ed->ed_LeftMargin = NULL;
	ed->ed_RightMargin = NULL;
	ed->ed_TopMargin = NULL;
	ed->ed_BottomMargin = NULL;
d752 15
a766 15
	ed->ed_LineLeading = NULL;
	ed->ed_LinesPerInch = NULL;
	ed->ed_LinesPerPage = NULL;
	ed->ed_Aspect = NULL;
	ed->ed_ScalingType = NULL;
	ed->ed_ScalingMath = NULL;
	ed->ed_Centering = NULL;
	ed->ed_LeftEdge = NULL;
	ed->ed_RightEdge = NULL;
	ed->ed_TopEdge = NULL;
	ed->ed_BottomEdge = NULL;
	ed->ed_Image = NULL;
	ed->ed_Shading = NULL;
	ed->ed_Dithering = NULL;
	ed->ed_Transparent = NULL;
d769 14
a782 4
    ed->ed_DriverMode = DoPrefsGadget (ed, &EG[3], ed->ed_DriverMode,
				       GTCY_Labels, ed->ed_DriverModeLabels,
				       GTCY_Active, 0,
				       TAG_DONE);
d784 4
a787 9
    ed->ed_Copies = DoPrefsGadget (ed, &EG[4], ed->ed_Copies,
				   GTSL_Min, 1,
				   GTSL_Max, 99,
				   GTSL_Level, ed->ed_PrefsWork.ps_Copies,
				   GTSL_MaxLevelLen, 2,
				   GTSL_LevelFormat, "%2lu",
				   GA_RelVerify, TRUE,
				   GA_Immediate, TRUE,
				   TAG_DONE);
d789 4
a792 4
    ed->ed_PaperType = DoPrefsGadget (ed, &EG[5], ed->ed_PaperType,
				      GTCY_Labels, ed->ed_PaperTypeLabels,
				      GTCY_Active, ed->ed_PrefsWork.ps_PaperType,
				      TAG_DONE);
d794 6
a799 4
    ed->ed_PaperFormat = DoPrefsGadget (ed, &EG[6], ed->ed_PaperFormat,
					GTCY_Labels, ed->ed_PaperFormatLabels,
					GTCY_Active, ed->ed_CurrentFormat,
					TAG_DONE);
d801 3
a803 3
    if (ed->ed_PaperWidth = DoPrefsGadget (ed, &EG[7], ed->ed_PaperWidth,
					   GA_Disabled, ed->ed_CurrentFormat != 3,
					   GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperWidth, 2),
d806 1
a806 1
	ed->ed_PaperWidth->UserData = (APTR) 2;
d808 3
a810 6
    if (ed->ed_PaperHeight = DoPrefsGadget (ed, &EG[8], ed->ed_PaperHeight,
					    GA_Disabled, ed->ed_CurrentFormat != 3,
					    GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperHeight, 2),
					    GTST_EditHook, &ed->ed_NumberHook,
					    TAG_DONE))
	ed->ed_PaperWidth->UserData = (APTR) 2;
d812 3
a814 9
    ed->ed_HorizontalDPI = DoPrefsGadget (ed, &EG[9], ed->ed_HorizontalDPI,
					  GTIN_Number, ed->ed_PrefsWork.ps_HorizontalDPI,
					  GTST_EditHook, &ed->ed_NumberHook,
					  TAG_DONE);

    ed->ed_VerticalDPI = DoPrefsGadget (ed, &EG[10], ed->ed_VerticalDPI,
					GTIN_Number, ed->ed_PrefsWork.ps_VerticalDPI,
					GTST_EditHook, &ed->ed_NumberHook,
					TAG_DONE);
d816 4
a819 4
    ed->ed_Panel = DoPrefsGadget (ed, &EG[11], ed->ed_Panel,
				  GTCY_Labels, ed->ed_PanelLabels,
				  GTCY_Active, ed->ed_CurrentPanel,
				  TAG_DONE);
d823 4
a826 4
	ed->ed_PrintFont = DoPrefsGadget (ed, &EG[12], ed->ed_PrintFont,
					  GTCY_Labels, ed->ed_PrintFontLabels,
					  GTCY_Active, ed->ed_PrefsWork.ps_Font,
					  TAG_DONE);
d828 4
a831 4
	ed->ed_Pitch = DoPrefsGadget (ed, &EG[13], ed->ed_Pitch,
				      GTCY_Labels, ed->ed_PitchLabels,
				      GTCY_Active, ed->ed_PrefsWork.ps_Pitch,
				      TAG_DONE);
d833 4
a836 4
	ed->ed_Orientation = DoPrefsGadget (ed, &EG[14], ed->ed_Orientation,
					    GTCY_Labels, ed->ed_OrientationLabels,
					    GTCY_Active, ed->ed_PrefsWork.ps_Orientation,
					    TAG_DONE);
d838 4
a841 4
	ed->ed_Tab = DoPrefsGadget (ed, &EG[15], ed->ed_Tab,
				    GTCY_Labels, ed->ed_TabLabels,
				    GTCY_Active, ed->ed_PrefsWork.ps_Tab,
				    TAG_DONE);
d845 8
a852 2
	if (ed->ed_LeftMargin = DoPrefsGadget (ed, &EG[16], ed->ed_LeftMargin,
					       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftMargin, 2),
a854 6
	    ed->ed_LeftMargin->UserData = (APTR) 2;

	if (ed->ed_RightMargin = DoPrefsGadget (ed, &EG[17], ed->ed_RightMargin,
						GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightMargin, 2),
						GTST_EditHook, &ed->ed_FloatHook,
						TAG_DONE))
d858 4
a861 4
	if (ed->ed_TopMargin = DoPrefsGadget (ed, &EG[18], ed->ed_TopMargin,
					      GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopMargin, 2),
					      GTST_EditHook, &ed->ed_FloatHook,
					      TAG_DONE))
d864 8
a871 2
	if (ed->ed_BottomMargin = DoPrefsGadget (ed, &EG[19], ed->ed_BottomMargin,
						 GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomMargin, 2),
a873 6
	    ed->ed_BottomMargin->UserData = (APTR) 2;

	if (ed->ed_FontPointSize = DoPrefsGadget (ed, &EG[20], ed->ed_FontPointSize,
						  GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_FontPointSize, 1),
						  GTST_EditHook, &ed->ed_FloatHook,
						  TAG_DONE))
d876 4
a879 4
	if (ed->ed_LineLeading = DoPrefsGadget (ed, &EG[21], ed->ed_LineLeading,
						GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_Leading, 1),
						GTST_EditHook, &ed->ed_FloatHook,
						TAG_DONE))
d886 4
a889 4
	if (ed->ed_LeftEdge = DoPrefsGadget (ed, &EG[24], ed->ed_LeftEdge,
					     GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftEdge, 2),
					     GTST_EditHook, &ed->ed_FloatHook,
					     TAG_DONE))
d893 4
a896 4
	if (ed->ed_RightEdge = DoPrefsGadget (ed, &EG[25], ed->ed_RightEdge,
					      GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightEdge, 2),
					      GTST_EditHook, &ed->ed_FloatHook,
					      TAG_DONE))
d899 4
a902 4
	if (ed->ed_TopEdge = DoPrefsGadget (ed, &EG[26], ed->ed_TopEdge,
					    GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopEdge, 2),
					    GTST_EditHook, &ed->ed_FloatHook,
					    TAG_DONE))
d905 4
a908 4
	if (ed->ed_BottomEdge = DoPrefsGadget (ed, &EG[27], ed->ed_BottomEdge,
					       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomEdge, 2),
					       GTST_EditHook, &ed->ed_FloatHook,
					       TAG_DONE))
d911 9
a919 4
	ed->ed_Image = DoPrefsGadget (ed, &EG[28], ed->ed_Image,
				      GTCY_Labels, ed->ed_ImageLabels,
				      GTCY_Active, ed->ed_PrefsWork.ps_Image,
				      TAG_DONE);
d921 5
a925 4
	ed->ed_Shading = DoPrefsGadget (ed, &EG[29], ed->ed_Shading,
					GTCY_Labels, ed->ed_ShadingLabels,
					GTCY_Active, ed->ed_PrefsWork.ps_Shading,
					TAG_DONE);
d927 4
a930 10
	ed->ed_Dithering = DoPrefsGadget (ed, &EG[30], ed->ed_Dithering,
					  GA_Disabled, ed->ed_PrefsWork.ps_Shading == SHAD_BW,
					  GTCY_Labels, ed->ed_DitheringLabels,
					  GTCY_Active, ed->ed_PrefsWork.ps_Dithering,
					  TAG_DONE);

	ed->ed_Transparent = DoPrefsGadget (ed, &EG[31], ed->ed_Transparent,
					    GTCY_Labels, ed->ed_TransparentLabels,
					    GTCY_Active, ed->ed_PrefsWork.ps_Transparency,
					    TAG_DONE);
d934 25
a958 4
	ed->ed_Aspect = DoPrefsGadget (ed, &EG[32], ed->ed_Aspect,
				       GTCY_Labels, ed->ed_AspectLabels,
				       GTCY_Active, ed->ed_PrefsWork.ps_Aspect,
				       TAG_DONE);
a959 4
	ed->ed_ScalingType = DoPrefsGadget (ed, &EG[33], ed->ed_ScalingType,
					    GTCY_Labels, ed->ed_ScalingTypeLabels,
					    GTCY_Active, ed->ed_PrefsWork.ps_ScalingType,
					    TAG_DONE);
d961 6
a966 23
	ed->ed_ScalingMath = DoPrefsGadget (ed, &EG[34], ed->ed_ScalingMath,
					    GA_Disabled, ed->ed_PrefsWork.ps_ScalingType == ST_ASPECT_ASIS,
					    GTCY_Labels, ed->ed_ScalingMathLabels,
					    GTCY_Active, ed->ed_PrefsWork.ps_ScalingMath,
					    TAG_DONE);

	ed->ed_Centering = DoPrefsGadget (ed, &EG[35], ed->ed_Centering,
					  GTCY_Labels, ed->ed_CenteringLabels,
					  GTCY_Active, ed->ed_PrefsWork.ps_Centering,
					  TAG_DONE);
    }
}


/*****************************************************************************/


VOID ProcessTextGadget (EdDataPtr ed, EdCommand ec, BOOL screenStuff)
{
    BOOL shift;
    LONG num;
    struct Gadget *act;
    BOOL beep;
d973 355
a1327 371
/*****************************************************************************/

	case EC_PAPERWIDTH:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_PaperWidth->SpecialInfo)->Buffer);
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_PaperWidth;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_VerticalDPI;
		else
		    act = ed->ed_PaperHeight;
	    }
	    ed->ed_PrefsWork.ps_PaperWidth = num;

	    if (ed->ed_CurrentFormat == 3)
		ed->ed_CurPaperWidth = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_PaperWidth,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperWidth, 2),
			       TAG_DONE);
	    break;

	case EC_PAPERHEIGHT:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_PaperHeight->SpecialInfo)->Buffer);
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_PaperHeight;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_PaperWidth;
		else
		    act = ed->ed_HorizontalDPI;
	    }
	    ed->ed_PrefsWork.ps_PaperHeight = num;

	    if (ed->ed_CurrentFormat == 3)
		ed->ed_CurPaperHeight = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_PaperHeight,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_PaperHeight, 2),
			       TAG_DONE);
	    break;

	case EC_HORIZONTALDPI:
	    num = ((struct StringInfo *) ed->ed_HorizontalDPI->SpecialInfo)->LongInt;
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_HorizontalDPI;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = (ed->ed_PaperHeight->Flags & GFLG_DISABLED) ? ed->ed_VerticalDPI : ed->ed_PaperHeight;
		else
		    act = ed->ed_VerticalDPI;
	    }
	    ed->ed_PrefsWork.ps_HorizontalDPI = num;
	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_HorizontalDPI,
			       GTIN_Number, num,
			       TAG_DONE);
	    break;

	case EC_VERTICALDPI:
	    num = ((struct StringInfo *) ed->ed_VerticalDPI->SpecialInfo)->LongInt;
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_VerticalDPI;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_HorizontalDPI;
		else
		    act = (ed->ed_PaperWidth->Flags & GFLG_DISABLED) ? ed->ed_HorizontalDPI : ed->ed_PaperWidth;
	    }
	    ed->ed_PrefsWork.ps_VerticalDPI = num;
	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_VerticalDPI,
			       GTIN_Number, num,
			       TAG_DONE);
	    break;

/*****************************************************************************/

	case EC_LEFTMARGIN:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_LeftMargin->SpecialInfo)->Buffer);
	    act = ed->ed_LeftMargin;
	    if (num < 0)
	    {
		num = 0;
		beep = TRUE;
	    }
	    else if (num > (ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_RightMargin))
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_RightMargin;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_LineLeading;
		else
		    act = ed->ed_RightMargin;
	    }
	    ed->ed_PrefsWork.ps_LeftMargin = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_LeftMargin,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftMargin, 2),
			       TAG_DONE);
	    break;

	case EC_RIGHTMARGIN:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_RightMargin->SpecialInfo)->Buffer);
	    act = ed->ed_RightMargin;
	    if ((ed->ed_PrefsWork.ps_PaperWidth - num) < ed->ed_PrefsWork.ps_LeftMargin)
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftMargin;
		beep = TRUE;
	    }
	    else if (num > ed->ed_PrefsWork.ps_PaperWidth)
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_LeftMargin;
		else
		    act = ed->ed_TopMargin;
	    }
	    ed->ed_PrefsWork.ps_RightMargin = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_RightMargin,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightMargin, 2),
			       TAG_DONE);
	    break;

	case EC_TOPMARGIN:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_TopMargin->SpecialInfo)->Buffer);
	    act = ed->ed_TopMargin;
	    if (num < 0)
	    {
		num = 0;
		beep = TRUE;
	    }
	    else if (num > (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin))
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomMargin;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_RightMargin;
		else
		    act = ed->ed_BottomMargin;
	    }
	    ed->ed_PrefsWork.ps_TopMargin = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_TopMargin,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopMargin, 2),
			       TAG_DONE);
	    break;

	case EC_BOTTOMMARGIN:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_BottomMargin->SpecialInfo)->Buffer);
	    act = ed->ed_BottomMargin;
	    if ((ed->ed_PrefsWork.ps_PaperHeight - num) < ed->ed_PrefsWork.ps_TopMargin)
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin;
		beep = TRUE;
	    }
	    else if (num > ed->ed_PrefsWork.ps_PaperHeight)
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_TopMargin;
		else
		    act = ed->ed_FontPointSize;
	    }
	    ed->ed_PrefsWork.ps_BottomMargin = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_BottomMargin,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomMargin, 2),
			       TAG_DONE);
	    break;

	case EC_FONTPOINTSIZE:
	    num = ToMilleNC (ed, ((struct StringInfo *) ed->ed_FontPointSize->SpecialInfo)->Buffer);
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_FontPointSize;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_BottomMargin;
		else
		    act = ed->ed_LineLeading;
	    }
	    ed->ed_PrefsWork.ps_FontPointSize = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_FontPointSize,
			       GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_FontPointSize, 1),
			       TAG_DONE);
	    break;

	case EC_LINELEADING:
	    num = ToMilleNC (ed, ((struct StringInfo *) ed->ed_LineLeading->SpecialInfo)->Buffer);
	    if (num < 0)
	    {
		num = 0;
		act = ed->ed_LineLeading;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_FontPointSize;
		else
		    act = ed->ed_LeftMargin;
	    }
	    ed->ed_PrefsWork.ps_Leading = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_LineLeading,
			       GTST_String, FromMilleNC (ed, ed->ed_PrefsWork.ps_Leading, 1),
			       TAG_DONE);
	    break;

/*****************************************************************************/

	case EC_LEFTEDGE:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_LeftEdge->SpecialInfo)->Buffer);
	    act = ed->ed_LeftEdge;
	    if (num < 0)
	    {
		num = 0;
		beep = TRUE;
	    }
	    else if (num > (ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge))
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_BottomEdge;
		else
		    act = ed->ed_RightEdge;
	    }
	    ed->ed_PrefsWork.ps_LeftEdge = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_LeftEdge,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_LeftEdge, 2),
			       TAG_DONE);
	    break;

	case EC_RIGHTEDGE:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_RightEdge->SpecialInfo)->Buffer);
	    act = ed->ed_RightEdge;
	    if ((ed->ed_PrefsWork.ps_PaperWidth - num) < ed->ed_PrefsWork.ps_LeftEdge)
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth - ed->ed_PrefsWork.ps_LeftEdge;
		beep = TRUE;
	    }
	    else if (num > ed->ed_PrefsWork.ps_PaperWidth)
	    {
		num = ed->ed_PrefsWork.ps_PaperWidth;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_LeftEdge;
		else
		    act = ed->ed_TopEdge;
	    }
	    ed->ed_PrefsWork.ps_RightEdge = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_RightEdge,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_RightEdge, 2),
			       TAG_DONE);
	    break;

	case EC_TOPEDGE:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_TopEdge->SpecialInfo)->Buffer);
	    act = ed->ed_TopEdge;
	    if (num < 0)
	    {
		num = 0;
		beep = TRUE;
	    }
	    else if (num > (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomEdge))
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_BottomEdge;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_RightEdge;
		else
		    act = ed->ed_BottomEdge;
	    }
	    ed->ed_PrefsWork.ps_TopEdge = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_TopEdge,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_TopEdge, 2),
			       TAG_DONE);
	    break;

	case EC_BOTTOMEDGE:
	    num = ToMille (ed, ((struct StringInfo *) ed->ed_BottomEdge->SpecialInfo)->Buffer);
	    act = ed->ed_BottomEdge;
	    if ((ed->ed_PrefsWork.ps_PaperHeight - num) < ed->ed_PrefsWork.ps_TopEdge)
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopEdge;
		beep = TRUE;
	    }
	    else if (num > ed->ed_PrefsWork.ps_PaperHeight)
	    {
		num = ed->ed_PrefsWork.ps_PaperHeight;
		beep = TRUE;
	    }
	    else
	    {
		if (shift)
		    act = ed->ed_TopEdge;
		else
		    act = ed->ed_LeftEdge;
	    }
	    ed->ed_PrefsWork.ps_BottomEdge = num;

	    if (screenStuff)
		SetGadgetAttr (ed, ed->ed_BottomEdge,
			       GTST_String, FromMille (ed, ed->ed_PrefsWork.ps_BottomEdge, 2),
			       TAG_DONE);
	    break;
d1334 1
a1334 3
	{
	    ActivateGadget (act, window, NULL);
	}
a1336 1
	{
a1337 1
	}
d1348 1
a1348 1
VOID SyncTextGadgets (EdDataPtr ed)
d1350 4
a1353 5

    ProcessTextGadget (ed, EC_PAPERWIDTH, FALSE);
    ProcessTextGadget (ed, EC_PAPERHEIGHT, FALSE);
    ProcessTextGadget (ed, EC_VERTICALDPI, FALSE);
    ProcessTextGadget (ed, EC_HORIZONTALDPI, FALSE);
d1357 6
a1362 6
	ProcessTextGadget (ed, EC_LEFTMARGIN, FALSE);
	ProcessTextGadget (ed, EC_RIGHTMARGIN, FALSE);
	ProcessTextGadget (ed, EC_TOPMARGIN, FALSE);
	ProcessTextGadget (ed, EC_BOTTOMMARGIN, FALSE);
	ProcessTextGadget (ed, EC_FONTPOINTSIZE, FALSE);
	ProcessTextGadget (ed, EC_LINELEADING, FALSE);
d1366 4
a1369 4
	ProcessTextGadget (ed, EC_LEFTEDGE, FALSE);
	ProcessTextGadget (ed, EC_RIGHTEDGE, FALSE);
	ProcessTextGadget (ed, EC_TOPEDGE, FALSE);
	ProcessTextGadget (ed, EC_BOTTOMEDGE, FALSE);
d1371 2
a1372 3
}

/*****************************************************************************/
d1374 4
a1377 1
VOID ProcessSpecialCommand (EdDataPtr ed, EdCommand ec)
d1379 1
a1379 1
    UWORD icode;
d1385 1
a1385 2

/*****************************************************************************/
d1387 2
a1388 2
	case EC_PANEL:
	    RemoveGList (window, ed->ed_Gadgets, -1);
d1390 75
a1464 88
	    SetAPen (window->RPort, ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);
	    RectFill (window->RPort, window->BorderLeft + 285, window->BorderTop + 30, window->Width - window->BorderRight - 1, window->Height - window->BorderBottom - 20);

	    FreeGadgets (ed->ed_Gadgets);
	    ed->ed_Gadgets = NULL;
	    ed->ed_LastAdded = NULL;

	    ed->ed_CurrentPanel = icode;
	    RenderGadgets (ed);
	    if (ed->ed_LastAdded)
	    {
		AddGList (window, ed->ed_Gadgets, -1, -1, NULL);
		RefreshGList (ed->ed_Gadgets, window, NULL, -1);
		GT_RefreshWindow (window, NULL);
	    }
	    RenderDisplay (ed);
	    break;

	case EC_CM:
	case EC_INCHES:
	case EC_POINTS:
	    icode = ec - EC_CM;
	    if (ed->ed_CurrentSystem != icode)
	    {
		ed->ed_CurrentSystem = icode;
		RenderGadgets (ed);
	    }
	    break;

/*****************************************************************************/

	case EC_DRIVERMODE:
	    ed->ed_PrefsWork.ps_DriverMode = icode;
	    break;

	case EC_PAPERTYPE:
	    ed->ed_PrefsWork.ps_PaperType = icode;
	    break;

	case EC_COPIES:
	    ed->ed_PrefsWork.ps_Copies = icode;
	    break;

	case EC_PAPERFORMAT:
	    ed->ed_CurrentFormat = icode;
	    SetGadgetAttr (ed, ed->ed_PaperWidth, GA_Disabled, icode != 3,
			   TAG_DONE);
	    SetGadgetAttr (ed, ed->ed_PaperHeight, GA_Disabled, icode != 3,
			   TAG_DONE);
	    if (icode < 3)
	    {
		ed->ed_PrefsWork.ps_PaperWidth = sizes[icode].Width;
		ed->ed_PrefsWork.ps_PaperHeight = sizes[icode].Height;
	    }
	    else
	    {
		ed->ed_PrefsWork.ps_PaperWidth = ed->ed_CurPaperWidth;
		ed->ed_PrefsWork.ps_PaperHeight = ed->ed_CurPaperHeight;
	    }
	    RenderGadgets (ed);
	    break;

	case EC_PAPERWIDTH:
	case EC_PAPERHEIGHT:
	case EC_HORIZONTALDPI:
	case EC_VERTICALDPI:
	    ProcessTextGadget (ed, ec, TRUE);
	    break;

/*****************************************************************************/

	case EC_PRINTFONT:
	    ed->ed_PrefsWork.ps_Font = icode;
	    break;

	case EC_PITCH:
	    ed->ed_PrefsWork.ps_Pitch = icode;
	    break;

	case EC_ORIENTATION:
	    ed->ed_PrefsWork.ps_Orientation = icode;
	    break;

	case EC_TAB:
	    ed->ed_PrefsWork.ps_Tab = icode;
	    break;

/*****************************************************************************/
d1466 4
a1469 4
	case EC_LEFTMARGIN:
	case EC_RIGHTMARGIN:
	case EC_TOPMARGIN:
	case EC_BOTTOMMARGIN:
d1471 3
a1473 6
	case EC_LINELEADING:
	    ProcessTextGadget (ed, ec, TRUE);
	    UpdateTextDisplay (ed);
	    break;

/*****************************************************************************/
d1475 43
a1517 62
	case EC_LEFTEDGE:
	case EC_RIGHTEDGE:
	case EC_TOPEDGE:
	case EC_BOTTOMEDGE:
	    ProcessTextGadget (ed, ec, TRUE);
	    break;

	case EC_IMAGE:
	    ed->ed_PrefsWork.ps_Image = icode;
	    break;

	case EC_SHADING:
	    ed->ed_PrefsWork.ps_Shading = icode;
	    SetGadgetAttr (ed, ed->ed_Dithering, GA_Disabled, icode == SHAD_BW,
			   TAG_DONE);
	    break;

	case EC_DITHERING:
	    ed->ed_PrefsWork.ps_Dithering = icode;
	    break;

	case EC_TRANSPARENT:
	    ed->ed_PrefsWork.ps_Transparency = icode;
	    break;

/*****************************************************************************/

	case EC_ASPECT:
	    ed->ed_PrefsWork.ps_Aspect = icode;
	    RenderDisplay (ed);
	    break;

	case EC_SCALINGTYPE:
	    ed->ed_PrefsWork.ps_ScalingType = icode;
	    SetGadgetAttr (ed, ed->ed_ScalingMath, GA_Disabled, icode == ST_ASPECT_ASIS,
			   TAG_DONE);
	    RenderDisplay (ed);
	    break;

	case EC_SCALINGMATH:
	    ed->ed_PrefsWork.ps_ScalingMath = icode;
	    break;

	case EC_CENTERING:
	    ed->ed_PrefsWork.ps_Centering = icode;
	    RenderDisplay (ed);
	    break;

/*****************************************************************************/

	default:
	    break;
    }
}


/*****************************************************************************/

EdCommand GetCommand (EdDataPtr ed)
{

    return (EC_NOP);
d1522 1
@


38.2
log
@finished graphics & UI.
@
text
@d152 1
a152 1
	ed->ed_PrefsDefaults.ps_RightMargin = 6 * 72 * 1000;	/* 6.0 inches */
d154 1
a154 1
	ed->ed_PrefsDefaults.ps_BottomMargin = 95 * 72 * 100;	/* 9.5 inches */
d162 1
a162 1
	ed->ed_PrefsDefaults.ps_RightEdge = 6 * 72 * 1000;	/* 6.0 inches */
d164 1
a164 1
	ed->ed_PrefsDefaults.ps_BottomEdge = 95 * 72 * 100;	/* 9.5 inches */
d724 24
a750 2
    UBYTE buffer[32];
    LONG lpi, lpp;
d909 1
a909 16
	lpi = 72000 / ed->ed_PrefsWork.ps_Leading;
	sprintf (buffer, "%ld", lpi);
	ed->ed_LinesPerInch = DoPrefsGadget (ed, &EG[22], ed->ed_LinesPerInch,
					     GTTX_Text, buffer,
					     GTTX_CopyText, TRUE,
					     GTTX_Border, TRUE,
					     TAG_DONE);

	lpp = (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin - ed->ed_PrefsWork.ps_BottomMargin)
	  / ed->ed_PrefsWork.ps_Leading / 10;
	sprintf (buffer, "%ld", lpp);
	ed->ed_LinesPerPage = DoPrefsGadget (ed, &EG[23], ed->ed_LinesPerPage,
					     GTTX_Text, buffer,
					     GTTX_CopyText, TRUE,
					     GTTX_Border, TRUE,
					     TAG_DONE);
a993 2
    UBYTE buffer[32];
    LONG lpi, lpp;
d1108 1
a1108 1
	    else if (num > ed->ed_PrefsWork.ps_RightMargin)
d1110 1
a1110 1
		num = ed->ed_PrefsWork.ps_RightMargin;
d1131 1
a1131 1
	    if (num < ed->ed_PrefsWork.ps_LeftMargin)
d1133 1
a1133 1
		num = ed->ed_PrefsWork.ps_LeftMargin;
d1164 1
a1164 1
	    else if (num > ed->ed_PrefsWork.ps_BottomMargin)
d1166 1
a1166 1
		num = ed->ed_PrefsWork.ps_BottomMargin;
d1187 1
a1187 1
	    if (num < ed->ed_PrefsWork.ps_TopMargin)
d1189 1
a1189 1
		num = ed->ed_PrefsWork.ps_TopMargin;
d1268 1
a1268 1
	    else if (num > ed->ed_PrefsWork.ps_LeftEdge)
d1270 1
a1270 1
		num = ed->ed_PrefsWork.ps_LeftEdge;
d1291 1
a1291 1
	    if (num < ed->ed_PrefsWork.ps_LeftEdge)
d1293 1
a1293 1
		num = ed->ed_PrefsWork.ps_LeftEdge;
d1324 1
a1324 1
	    else if (num > ed->ed_PrefsWork.ps_BottomEdge)
d1326 1
a1326 1
		num = ed->ed_PrefsWork.ps_BottomEdge;
d1347 1
a1347 1
	    if (num < ed->ed_PrefsWork.ps_TopEdge)
d1349 1
a1349 1
		num = ed->ed_PrefsWork.ps_TopEdge;
d1387 3
a1389 20
	{
	    lpi = 72000 / ed->ed_PrefsWork.ps_Leading;
	    sprintf (buffer, "%ld", lpi);
	    ed->ed_LinesPerInch = DoPrefsGadget (ed, &EG[22], ed->ed_LinesPerInch,
						 GTTX_Text, buffer,
						 GTTX_CopyText, TRUE,
						 GTTX_Border, TRUE,
						 TAG_DONE);

	    lpp = (ed->ed_PrefsWork.ps_PaperHeight - ed->ed_PrefsWork.ps_TopMargin - ed->ed_PrefsWork.ps_BottomMargin)
	      / ed->ed_PrefsWork.ps_Leading / 10;
	    sprintf (buffer, "%ld", lpp);
	    ed->ed_LinesPerPage = DoPrefsGadget (ed, &EG[23], ed->ed_LinesPerPage,
						 GTTX_Text, buffer,
						 GTTX_CopyText, TRUE,
						 GTTX_Border, TRUE,
						 TAG_DONE);
	}
    }
}
d1533 1
@


38.1
log
@Initial V38 RCS checkin
@
text
@a0 1

d13 1
d29 1
d34 1
d44 1
d47 1
d56 3
a58 1
#define SysBase ed->ed_SysBase
d60 33
d114 3
a116 3
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
d120 82
a201 46
/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
    ed->ed_PrefsDefaults.ps_DriverMode         = DM_POSTSCRIPT;
    ed->ed_PrefsDefaults.ps_PaperType          = PT_CONTINUOUS;
    ed->ed_PrefsDefaults.ps_Copies             = 1;
    ed->ed_PrefsDefaults.ps_PaperWidth         = 85*72*100;   /* 8.5 inches */
    ed->ed_PrefsDefaults.ps_PaperHeight        = 11*72*1000;  /* 11 inches  */
    ed->ed_PrefsDefaults.ps_HorizontalDPI      = 300;
    ed->ed_PrefsDefaults.ps_VerticalDPI        = 300;
    ed->ed_PrefsDefaults.ps_Font               = FONT_COURIER;
    ed->ed_PrefsDefaults.ps_Pitch              = PITCH_NORMAL;
    ed->ed_PrefsDefaults.ps_Orientation        = ORIENT_PORTRAIT;
    ed->ed_PrefsDefaults.ps_Tab                = TAB_INCH;
    ed->ed_PrefsDefaults.ps_LeftMargin         = 5;
    ed->ed_PrefsDefaults.ps_RightMargin        = 5;
    ed->ed_PrefsDefaults.ps_TopMargin          = 5*72*1000;
    ed->ed_PrefsDefaults.ps_BottomMargin       = 5*72*1000;
    ed->ed_PrefsDefaults.ps_FontPointSize      = 15*1000;
    ed->ed_PrefsDefaults.ps_Leading            = 17*1000;
    ed->ed_PrefsDefaults.ps_Aspect             = ASP_HORIZ;
    ed->ed_PrefsDefaults.ps_ScalingType        = ST_ASPECT_BOTH;
    ed->ed_PrefsDefaults.ps_ScalingMath        = SM_INTEGER;
    ed->ed_PrefsDefaults.ps_Centering          = CENT_BOTH;
    ed->ed_PrefsDefaults.ps_LeftEdge           = 5*72*1000;
    ed->ed_PrefsDefaults.ps_RightEdge          = 5*72*1000;
    ed->ed_PrefsDefaults.ps_TopEdge            = 5*72*1000;
    ed->ed_PrefsDefaults.ps_BottomEdge         = 5*72*1000;
    ed->ed_PrefsDefaults.ps_Image              = IM_POSITIVE;
    ed->ed_PrefsDefaults.ps_Shading            = SHAD_BW;
    ed->ed_PrefsDefaults.ps_Dithering          = DITH_DEFAULT;
    ed->ed_PrefsDefaults.ps_Transparency       = TRANS_COLOR0;

    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;

    return(ES_NORMAL);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
d203 2
d206 6
a211 1
        return(ES_IFF_UNKNOWNCHUNK);
d213 9
a221 2
    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct PrinterPSPrefs)) == sizeof(struct PrinterPSPrefs))
        return(ES_NORMAL);
d223 1
a223 1
    return(ES_IFFERROR);
d227 1
a227 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
d229 2
a230 1
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
d237 1
a237 1
EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
d239 5
a243 4
    if (!PushChunk(iff,0,ID_PSPD,sizeof(struct PrinterPSPrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct PrinterPSPrefs)) == sizeof(struct PrinterPSPrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);
d245 1
a245 1
    return(ES_IFFERROR);
d249 1
a249 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
d251 2
a252 1
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
d273 17
a289 17
    {NM_TITLE,   MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM,  MSG_PROJECT_OPEN,           EC_OPEN, 0},
      {NM_ITEM,  MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM,  MSG_NOTHING,                EC_NOP, 0},
      {NM_ITEM,  MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,   MSG_EDIT_MENU,              EC_NOP, 0},
      {NM_ITEM,  MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM,  MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM,  MSG_EDIT_RESTORE,           EC_RESTORE, 0},

    {NM_TITLE,   MSG_OPTIONS_MENU,           EC_NOP, 0},
      {NM_ITEM,  MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},
      {NM_ITEM,  MSG_PS_OPTIONS_SYSTEM,      EC_CM, 0},
        {NM_SUB, MSG_PS_OPTIONS_CM,          EC_CM,     CHECKIT|MENUTOGGLE},
        {NM_SUB, MSG_PS_OPTIONS_INCHES,      EC_INCHES, CHECKIT|MENUTOGGLE},
        {NM_SUB, MSG_PS_OPTIONS_POINTS,      EC_POINTS, CHECKIT|MENUTOGGLE},
d291 1
a291 1
    {NM_END,     MSG_NOTHING,                EC_NOP, 0}
d297 3
a299 3
    {BUTTON_KIND,   8,   168,  87,  14, MSG_SAVE_GAD,            EC_SAVE,         0},
    {BUTTON_KIND,   267, 168,  87,  14, MSG_USE_GAD,             EC_USE,          0},
    {BUTTON_KIND,   527, 168,  87,  14, MSG_CANCEL_GAD,          EC_CANCEL,       0},
d301 41
a341 41
    {CYCLE_KIND,    148, 8,    135, 14, MSG_PS_DRIVERMODE_GAD,   EC_DRIVERMODE,   0},
    {SLIDER_KIND,   172, 24,   111, 11, MSG_PS_COPIES_GAD,       EC_COPIES,       0},
    {CYCLE_KIND,    148, 41,   135, 14, MSG_PS_PAPERTYPE_GAD,    EC_PAPERTYPE,    0},
    {CYCLE_KIND,    148, 57,   135, 14, MSG_PS_PAPERFORMAT_GAD,  EC_PAPERFORMAT,  0},
    {STRING_KIND,   148, 73,   135, 14, MSG_PS_PAPERWIDTH_GAD,   EC_PAPERWIDTH,   0},
    {STRING_KIND,   148, 89,   135, 14, MSG_PS_PAPERHEIGHT_GAD,  EC_PAPERHEIGHT,  0},
    {INTEGER_KIND,  148, 109,  135, 14, MSG_PS_HORIZDPI_GAD,     EC_HORIZONTALDPI,0},
    {INTEGER_KIND,  148, 125,  135, 14, MSG_PS_VERTDPI_GAD,      EC_VERTICALDPI,  0},
    {CYCLE_KIND,    377, 8,    207, 14, MSG_NOTHING,             EC_PANEL,        0},

    {CYCLE_KIND,    452, 35,   163, 14, MSG_PS_FONT_GAD,         EC_PRINTFONT,    0},
    {CYCLE_KIND,    452, 51,   163, 14, MSG_PS_PITCH_GAD,        EC_PITCH,        0},
    {CYCLE_KIND,    452, 67,   163, 14, MSG_PS_ORIENTATION_GAD,  EC_ORIENTATION,  0},
    {CYCLE_KIND,    452, 83,   163, 14, MSG_PS_TAB_GAD,          EC_TAB,          0},

    {STRING_KIND,   512, 35,   103, 14, MSG_PS_LEFTMARGIN_GAD,   EC_LEFTMARGIN,   0},
    {STRING_KIND,   512, 49,   103, 14, MSG_PS_RIGHTMARGIN_GAD,  EC_RIGHTMARGIN,  0},
    {STRING_KIND,   512, 63,   103, 14, MSG_PS_TOPMARGIN_GAD,    EC_TOPMARGIN,    0},
    {STRING_KIND,   512, 77,   103, 14, MSG_PS_BOTTOMMARGIN_GAD, EC_BOTTOMMARGIN, 0},
    {STRING_KIND,   512, 93,   103, 14, MSG_PS_FONTPOINTSIZE_GAD,EC_FONTPOINTSIZE,0},
    {STRING_KIND,   512, 107,  103, 14, MSG_PS_LINELEADING_GAD,  EC_LINELEADING,  0},
    {TEXT_KIND,     512, 121,  103, 14, MSG_PS_LINESPERINCH_GAD, EC_LINESPERINCH, 0},
    {TEXT_KIND,     512, 135,  103, 14, MSG_PS_LINESPERPAGE_GAD, EC_LINESPERPAGE, 0},

    {STRING_KIND,   512, 35,   103, 14, MSG_PS_LEFTEDGE_GAD,     EC_LEFTEDGE,     0},
    {STRING_KIND,   512, 49,   103, 14, MSG_PS_RIGHTEDGE_GAD,    EC_RIGHTEDGE,    0},
    {STRING_KIND,   512, 63,   103, 14, MSG_PS_TOPEDGE_GAD,      EC_TOPEDGE,      0},
    {STRING_KIND,   512, 77,   103, 14, MSG_PS_BOTTOMEDGE_GAD,   EC_BOTTOMEDGE,   0},
    {CYCLE_KIND,    452, 93,   163, 14, MSG_PS_IMAGE_GAD,        EC_IMAGE,        0},
    {CYCLE_KIND,    452, 107,  163, 14, MSG_PS_SHADING_GAD,      EC_SHADING,      0},
    {CYCLE_KIND,    452, 121,  163, 14, MSG_PS_DITHERING_GAD,    EC_DITHERING,    0},
    {CYCLE_KIND,    452, 135,  163, 14, MSG_PS_TRANSPARENT_GAD,  EC_TRANSPARENT,  0},

    {CYCLE_KIND,    452, 35,   163, 14, MSG_PS_ASPECT_GAD,       EC_ASPECT,       0},
    {CYCLE_KIND,    452, 49,   163, 14, MSG_PS_SCALINGTYPE_GAD,  EC_SCALINGTYPE,  0},
    {CYCLE_KIND,    452, 63,   163, 14, MSG_PS_SCALINGMATH_GAD,  EC_SCALINGMATH,  0},
    {CYCLE_KIND,    452, 77,   163, 14, MSG_PS_CENTERING_GAD,    EC_CENTERING,    0}
};


/*****************************************************************************/
d344 1
a344 1
VOID InitLabels(EdDataPtr ed, STRPTR *ptr, ULONG arraySize, ULONG start)
d346 1
d349 1
a349 1
        *ptr++ = GetString(&ed->ed_LocaleInfo,start++);
d356 1
a356 1
BOOL CreateDisplay(EdDataPtr ed)
d358 1
a358 1
UWORD zoomSize[4];
d365 4
a368 4
    InitLabels(ed,&ed->ed_DriverModeLabels[0],sizeof(ed->ed_DriverModeLabels),MSG_PS_MODE_1);
    InitLabels(ed,&ed->ed_PaperFormatLabels[0],sizeof(ed->ed_PaperFormatLabels),MSG_PS_FORMAT_1);
    InitLabels(ed,&ed->ed_PaperTypeLabels[0],sizeof(ed->ed_PaperTypeLabels),MSG_PS_TYPE_1);
    InitLabels(ed,&ed->ed_PanelLabels[0],sizeof(ed->ed_PanelLabels),MSG_PS_PANEL_1);
d370 14
a383 14
    InitLabels(ed,&ed->ed_PrintFontLabels[0],sizeof(ed->ed_PrintFontLabels),MSG_PS_FONT_1);
    InitLabels(ed,&ed->ed_PitchLabels[0],sizeof(ed->ed_PitchLabels),MSG_PS_PITCH_1);
    InitLabels(ed,&ed->ed_OrientationLabels[0],sizeof(ed->ed_OrientationLabels),MSG_PS_ORIENTATION_1);
    InitLabels(ed,&ed->ed_TabLabels[0],sizeof(ed->ed_TabLabels),MSG_PS_TAB_1);

    InitLabels(ed,&ed->ed_AspectLabels[0],sizeof(ed->ed_AspectLabels),MSG_PS_ASPECT_1);
    InitLabels(ed,&ed->ed_ScalingTypeLabels[0],sizeof(ed->ed_ScalingTypeLabels),MSG_PS_SCALINGTYPE_1);
    InitLabels(ed,&ed->ed_ScalingMathLabels[0],sizeof(ed->ed_ScalingMathLabels),MSG_PS_SCALINGMATH_1);
    InitLabels(ed,&ed->ed_CenteringLabels[0],sizeof(ed->ed_CenteringLabels),MSG_PS_CENTERING_1);

    InitLabels(ed,&ed->ed_ImageLabels[0],sizeof(ed->ed_ImageLabels),MSG_PS_IMAGE_1);
    InitLabels(ed,&ed->ed_ShadingLabels[0],sizeof(ed->ed_ShadingLabels),MSG_PS_SHADING_1);
    InitLabels(ed,&ed->ed_DitheringLabels[0],sizeof(ed->ed_DitheringLabels),MSG_PS_DITHERING_1);
    InitLabels(ed,&ed->ed_TransparentLabels[0],sizeof(ed->ed_TransparentLabels),MSG_PS_TRANSPARENT_1);
d385 1
a385 1
    RenderGadgets(ed);
d388 49
a436 28
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_PS_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
    {
        return(TRUE);
    }

    DisposeDisplay(ed);
    return(FALSE);
}


/*****************************************************************************/
d439 1
a439 1
VOID DisposeDisplay(EdDataPtr ed)
d441 1
d444 2
a445 2
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
d447 25
a471 23
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/



UWORD far pattern[] = {0xaaaa,0x5555};


VOID RenderBox(EdDataPtr ed,
               UWORD areaLeft, UWORD areaTop, UWORD areaWidth, UWORD areaHeight,
               UWORD boxWidth, UWORD boxHeight,
               UWORD xScale, UWORD yScale,
               BOOL centerX, BOOL centerY,
               BOOL sideways, BOOL blankPage, BOOL stacked)
{
struct RastPort *rp;
struct DrawInfo *di;
UWORD            left, top, width, height;
UWORD            i;
d475 2
a476 2
        rp = ed->ed_Window->RPort;
        di = ed->ed_DrawInfo;
d478 104
a581 71
        areaLeft += window->BorderLeft;
        areaTop  += window->BorderTop;

        for (i=0; i<2; i++)
        {
            if (i == 1)
            {
                if (stacked)
                    areaTop  += areaHeight+2;
                else
                    areaLeft += areaWidth+4;

            }
            else if (!blankPage)
            {
                i = 1;
            }

            SetAPen(rp,di->dri_Pens[FILLPEN]);
            SetAfPt(rp,pattern,1);
            RectFill(rp,areaLeft,areaTop,areaLeft+areaWidth-1,areaTop+areaHeight-1);
            SetAfPt(rp,NULL,0);

            if (i == 1)
            {
                left   = areaLeft;
                top    = areaTop;
                width  = boxWidth;
                height = boxHeight;

                if (centerX)
                    left += (areaWidth-boxWidth)/2;

                if (centerY)
                    top  += (areaHeight-boxHeight)/2;

                SetAPen(rp,di->dri_Pens[SHADOWPEN]);
                RectFill(rp,left,top,left+width-1,top+height-1);

                left   += xScale;
                top    += yScale;
                width  -= (xScale * 2);
                height -= (yScale * 2);

                SetAPen(rp,di->dri_Pens[SHINEPEN]);
                RectFill(rp,left,top,left+width-1,top+height-1);

                left   += xScale;
                top    += yScale;
                width  -= (xScale * 2);
                height -= (yScale * 2);

                SetAPen(rp,di->dri_Pens[BACKGROUNDPEN]);
                if (sideways)
                {
                    Move(rp,left,top+height-1);
                    Draw(rp,left+width-1,top);
                    Draw(rp,left+width-1,top+height-1);
                    Draw(rp,left,top);
                }
                else
                {
                    Move(rp,left,top);
                    Draw(rp,left+width-1,top+height-1);
                    Draw(rp,left,top+height-1);
                    Draw(rp,left+width-1,top);
                }
            }
        }
    }
}
a585 1

d594 63
a656 41
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10},
    {10,10}, {10,10}, {10,10}, {10,10}
};


/*****************************************************************************/


VOID CenterLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
            window->BorderTop+y);
    Text(rp,str,len);
}


/*****************************************************************************/


VOID DrawBB(EdDataPtr ed, UWORD x, UWORD y, UWORD w, UWORD h, ULONG tag, ...)
{
    DrawBevelBoxA(ed->ed_Window->RPort,x+window->BorderLeft,y+window->BorderTop,w,h,(struct TagItem *)&tag);
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
d658 2
a659 2
struct Dimensions *dims;
BOOL               centerX, centerY, sideways;
d663 1
a663 1
        RenderBox(ed,312,124,24,24,24,24,1,1,TRUE,TRUE,FALSE,FALSE,FALSE);
d665 64
a728 59
        dims = &samples[ed->ed_PrefsWork.ps_ScalingType*4];

        centerX  = (ed->ed_PrefsWork.ps_Centering == CENT_HORIZ) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
        centerY  = (ed->ed_PrefsWork.ps_Centering == CENT_VERT) || (ed->ed_PrefsWork.ps_Centering == CENT_BOTH);
        sideways = (ed->ed_PrefsWork.ps_Aspect == ASP_VERT);

        DrawBB(ed,371,111,243,50,GTBB_Recessed, TRUE,
                                 GT_VisualInfo, ed->ed_VisualInfo,
                                 TAG_DONE);

        SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[TEXTPEN]);

        CenterLine(ed,window->RPort,MSG_PS_SAMPLEPICTURE_HDR,290,106,68);
        CenterLine(ed,window->RPort,MSG_PS_SAMPLESCALING_HDR,371,106,243);

        RectFill(window->RPort,345+window->BorderLeft,134+window->BorderTop,
                               357+window->BorderLeft,137+window->BorderTop);

        RectFill(window->RPort,358+window->BorderLeft,131+window->BorderTop,
                               358+window->BorderLeft,140+window->BorderTop);

        RectFill(window->RPort,359+window->BorderLeft,132+window->BorderTop,
                               359+window->BorderLeft,139+window->BorderTop);

        RectFill(window->RPort,360+window->BorderLeft,133+window->BorderTop,
                               360+window->BorderLeft,138+window->BorderTop);

        RectFill(window->RPort,361+window->BorderLeft,134+window->BorderTop,
                               361+window->BorderLeft,137+window->BorderTop);

        RectFill(window->RPort,362+window->BorderLeft,135+window->BorderTop,
                               362+window->BorderLeft,136+window->BorderTop);

        SetAfPt(window->RPort,pattern,1);
        RectFill(window->RPort,412+window->BorderLeft,112+window->BorderTop,
                               412+window->BorderLeft,159+window->BorderTop);
        RectFill(window->RPort,463+window->BorderLeft,112+window->BorderTop,
                               463+window->BorderLeft,159+window->BorderTop);
        RectFill(window->RPort,516+window->BorderLeft,112+window->BorderTop,
                               516+window->BorderLeft,159+window->BorderTop);
        SetAfPt(window->RPort,NULL,0);

        RenderBox(ed,376,129,14,14,dims[0].Width,dims[0].Height,
                     1,1,centerX,centerY,sideways,TRUE,FALSE);

        RenderBox(ed,417,115,42,20,dims[1].Width,dims[1].Height,
                     1,1,centerX,centerY,sideways,TRUE,TRUE);

        RenderBox(ed,468,115,20,42,dims[2].Width,dims[2].Height,
                     1,1,centerX,centerY,sideways,TRUE,FALSE);

        RenderBox(ed,521,115,42,42,dims[3].Width,dims[3].Height,
                     1,1,centerX,centerY,sideways,TRUE,FALSE);
    }
}


/*****************************************************************************/

a729 2
VOID RenderGadgets(EdDataPtr ed)
{
d732 4
a735 4
        ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
        DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
        DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
        DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);
d737 88
a824 80
	ed->ed_DriverMode	= NULL;
	ed->ed_Copies		= NULL;
	ed->ed_PaperType	= NULL;
	ed->ed_PaperFormat	= NULL;
	ed->ed_PaperWidth	= NULL;
	ed->ed_PaperHeight	= NULL;
	ed->ed_HorizontalDPI	= NULL;
	ed->ed_VerticalDPI	= NULL;
	ed->ed_Panel		= NULL;
	ed->ed_PrintFont	= NULL;
	ed->ed_Pitch		= NULL;
	ed->ed_Orientation	= NULL;
	ed->ed_Tab		= NULL;
	ed->ed_LeftMargin       = NULL;
	ed->ed_RightMargin      = NULL;
	ed->ed_TopMargin        = NULL;
	ed->ed_BottomMargin     = NULL;
	ed->ed_FontPointSize    = NULL;
	ed->ed_LineLeading      = NULL;
	ed->ed_LinesPerInch     = NULL;
	ed->ed_LinesPerPage     = NULL;
	ed->ed_Aspect		= NULL;
	ed->ed_ScalingType	= NULL;
	ed->ed_ScalingMath	= NULL;
	ed->ed_Centering	= NULL;
	ed->ed_LeftEdge         = NULL;
	ed->ed_RightEdge        = NULL;
	ed->ed_TopEdge          = NULL;
	ed->ed_BottomEdge       = NULL;
	ed->ed_Image            = NULL;
	ed->ed_Shading		= NULL;
	ed->ed_Dithering	= NULL;
	ed->ed_Transparent	= NULL;
    }

    ed->ed_DriverMode = DoPrefsGadget(ed,&EG[3],ed->ed_DriverMode,
                                                GTCY_Labels, ed->ed_DriverModeLabels,
                                                GTCY_Active, 0,
                                                TAG_DONE);

    ed->ed_Copies = DoPrefsGadget(ed,&EG[4],ed->ed_Copies,
                                            GTSL_Min,         1,
                                            GTSL_Max,         99,
                                            GTSL_Level,       ed->ed_PrefsWork.ps_Copies,
                                            GTSL_MaxLevelLen, 2,
                                            GTSL_LevelFormat, "%2lu",
                                            GA_RelVerify,     TRUE,
                                            GA_Immediate,     TRUE,
                                            TAG_DONE);

    ed->ed_PaperType = DoPrefsGadget(ed,&EG[5],ed->ed_PaperType,
                                               GTCY_Labels, ed->ed_PaperTypeLabels,
                                               GTCY_Active, ed->ed_PrefsWork.ps_PaperType,
                                               TAG_DONE);

    ed->ed_PaperFormat = DoPrefsGadget(ed,&EG[6],ed->ed_PaperFormat,
                                                 GTCY_Labels, ed->ed_PaperFormatLabels,
                                                 GTCY_Active, ed->ed_CurrentFormat,
                                                 TAG_DONE);

    ed->ed_PaperWidth = DoPrefsGadget(ed,&EG[7],ed->ed_PaperWidth,
                                                GA_Disabled, ed->ed_CurrentFormat != 3,
                                                TAG_DONE);

    ed->ed_PaperHeight = DoPrefsGadget(ed,&EG[8],ed->ed_PaperHeight,
                                                 GA_Disabled, ed->ed_CurrentFormat != 3,
                                                 TAG_DONE);

    ed->ed_HorizontalDPI = DoPrefsGadget(ed,&EG[9],ed->ed_HorizontalDPI,
                                                   GTIN_Number, ed->ed_PrefsWork.ps_HorizontalDPI,
                                                   TAG_DONE);

    ed->ed_VerticalDPI = DoPrefsGadget(ed,&EG[10],ed->ed_VerticalDPI,
                                                  GTIN_Number, ed->ed_PrefsWork.ps_VerticalDPI,
                                                  TAG_DONE);

    ed->ed_Panel = DoPrefsGadget(ed,&EG[11],ed->ed_Panel,
                                            GTCY_Labels, ed->ed_PanelLabels,
                                            GTCY_Active, ed->ed_CurrentPanel,
                                            TAG_DONE);
d828 4
a831 4
        ed->ed_PrintFont = DoPrefsGadget(ed,&EG[12],ed->ed_PrintFont,
                                                    GTCY_Labels, ed->ed_PrintFontLabels,
                                                    GTCY_Active, ed->ed_PrefsWork.ps_Font,
                                                    TAG_DONE);
d833 14
a846 14
        ed->ed_Pitch = DoPrefsGadget(ed,&EG[13],ed->ed_Pitch,
                                                GTCY_Labels, ed->ed_PitchLabels,
                                                GTCY_Active, ed->ed_PrefsWork.ps_Pitch,
                                                TAG_DONE);

        ed->ed_Orientation = DoPrefsGadget(ed,&EG[14],ed->ed_Orientation,
                                                      GTCY_Labels, ed->ed_OrientationLabels,
                                                      GTCY_Active, ed->ed_PrefsWork.ps_Orientation,
                                                      TAG_DONE);

        ed->ed_Tab = DoPrefsGadget(ed,&EG[15],ed->ed_Tab,
                                              GTCY_Labels, ed->ed_TabLabels,
                                              GTCY_Active, ed->ed_PrefsWork.ps_Tab,
                                              TAG_DONE);
d850 53
a902 33
        ed->ed_LeftMargin = DoPrefsGadget(ed,&EG[16],ed->ed_LeftMargin,
                                                     GTST_String, "",
                                                     TAG_DONE);

        ed->ed_RightMargin = DoPrefsGadget(ed,&EG[17],ed->ed_RightMargin,
                                                      GTST_String, "",
                                                      TAG_DONE);

        ed->ed_TopMargin = DoPrefsGadget(ed,&EG[18],ed->ed_TopMargin,
                                                    GTST_String, "",
                                                    TAG_DONE);

        ed->ed_BottomMargin = DoPrefsGadget(ed,&EG[19],ed->ed_BottomMargin,
                                                       GTST_String, "",
                                                       TAG_DONE);

        ed->ed_FontPointSize = DoPrefsGadget(ed,&EG[20],ed->ed_FontPointSize,
                                                        GTST_String, "",
                                                        TAG_DONE);

        ed->ed_LineLeading = DoPrefsGadget(ed,&EG[21],ed->ed_LineLeading,
                                                      GTST_String, "",
                                                      TAG_DONE);

        ed->ed_LinesPerInch = DoPrefsGadget(ed,&EG[22],ed->ed_LinesPerInch,
                                                       GTTX_Text,   "",
                                                       GTTX_Border, TRUE,
                                                       TAG_DONE);

        ed->ed_LinesPerPage = DoPrefsGadget(ed,&EG[23],ed->ed_LinesPerPage,
                                                       GTTX_Text,   "",
                                                       GTTX_Border, TRUE,
                                                       TAG_DONE);
d906 45
a950 36
        ed->ed_LeftEdge = DoPrefsGadget(ed,&EG[24],ed->ed_LeftEdge,
                                                   GTST_String, "",
                                                   TAG_DONE);

        ed->ed_RightEdge = DoPrefsGadget(ed,&EG[25],ed->ed_RightEdge,
                                                    GTST_String, "",
                                                    TAG_DONE);

        ed->ed_TopEdge = DoPrefsGadget(ed,&EG[26],ed->ed_TopEdge,
                                                  GTST_String, "",
                                                  TAG_DONE);

        ed->ed_BottomEdge = DoPrefsGadget(ed,&EG[27],ed->ed_BottomEdge,
                                                     GTST_String, "",
                                                     TAG_DONE);

        ed->ed_Image = DoPrefsGadget(ed,&EG[28],ed->ed_Image,
                                                GTCY_Labels, ed->ed_ImageLabels,
                                                GTCY_Active, ed->ed_PrefsWork.ps_Image,
                                                TAG_DONE);

        ed->ed_Shading = DoPrefsGadget(ed,&EG[29],ed->ed_Shading,
                                                  GTCY_Labels, ed->ed_ShadingLabels,
                                                  GTCY_Active, ed->ed_PrefsWork.ps_Shading,
                                                  TAG_DONE);

        ed->ed_Dithering = DoPrefsGadget(ed,&EG[30],ed->ed_Dithering,
                                                    GA_Disabled, ed->ed_PrefsWork.ps_Shading == SHAD_BW,
                                                    GTCY_Labels, ed->ed_DitheringLabels,
                                                    GTCY_Active, ed->ed_PrefsWork.ps_Dithering,
                                                    TAG_DONE);

        ed->ed_Transparent = DoPrefsGadget(ed,&EG[31],ed->ed_Transparent,
                                                      GTCY_Labels, ed->ed_TransparentLabels,
                                                      GTCY_Active, ed->ed_PrefsWork.ps_Transparency,
                                                      TAG_DONE);
d954 4
a957 4
        ed->ed_Aspect = DoPrefsGadget(ed,&EG[32],ed->ed_Aspect,
                                                 GTCY_Labels, ed->ed_AspectLabels,
                                                 GTCY_Active, ed->ed_PrefsWork.ps_Aspect,
                                                 TAG_DONE);
d959 30
a988 4
        ed->ed_ScalingType = DoPrefsGadget(ed,&EG[33],ed->ed_ScalingType,
                                                      GTCY_Labels, ed->ed_ScalingTypeLabels,
                                                      GTCY_Active, ed->ed_PrefsWork.ps_ScalingType,
                                                      TAG_DONE);
d990 2
a991 5
        ed->ed_ScalingMath = DoPrefsGadget(ed,&EG[34],ed->ed_ScalingMath,
                                                      GA_Disabled, ed->ed_PrefsWork.ps_ScalingType == ST_ASPECT_ASIS,
                                                      GTCY_Labels, ed->ed_ScalingMathLabels,
                                                      GTCY_Active, ed->ed_PrefsWork.ps_ScalingMath,
                                                      TAG_DONE);
d993 2
a994 8
        ed->ed_Centering = DoPrefsGadget(ed,&EG[35],ed->ed_Centering,
                                                    GTCY_Labels, ed->ed_CenteringLabels,
                                                    GTCY_Active, ed->ed_PrefsWork.ps_Centering,
                                                    TAG_DONE);
    }
}


d997 437
a1433 16

VOID ProcessTextGadget(EdDataPtr ed, EdCommand ec, BOOL screenStuff)
{
}


/*****************************************************************************/


VOID SyncTextGadgets(EdDataPtr ed)
{
}


/*****************************************************************************/

d1435 1
a1435 1
VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
d1437 1
a1437 1
UWORD icode;
a1442 1
	case EC_PANEL	    : RemoveGList(window,ed->ed_Gadgets,-1);
d1444 4
a1447 2
	                      SetAPen(window->RPort,ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);
	                      RectFill(window->RPort,window->BorderLeft+285,window->BorderTop+30,window->Width-window->BorderRight-1,window->Height-window->BorderBottom-20);
d1449 165
a1613 100
                              FreeGadgets(ed->ed_Gadgets);
                              ed->ed_Gadgets = NULL;
                              ed->ed_LastAdded = NULL;

	                      ed->ed_CurrentPanel = icode;
	                      RenderGadgets(ed);
	                      if (ed->ed_LastAdded)
	                      {
	                          AddGList(window,ed->ed_Gadgets,-1,-1,NULL);
	                          RefreshGList(ed->ed_Gadgets,window,NULL,-1);
	                          GT_RefreshWindow(window,NULL);
	                      }
	                      RenderDisplay(ed);
	                      break;

        case EC_PAPERFORMAT : ed->ed_CurrentFormat = icode;
                              SetGadgetAttr(ed,ed->ed_PaperWidth,GA_Disabled,icode != 3,
                                                                 TAG_DONE);
                              SetGadgetAttr(ed,ed->ed_PaperHeight,GA_Disabled,icode != 3,
                                                                  TAG_DONE);
                              break;

        case EC_SCALINGTYPE : ed->ed_PrefsWork.ps_ScalingType = icode;
                              SetGadgetAttr(ed,ed->ed_ScalingMath,GA_Disabled,icode == ST_ASPECT_ASIS,
                                                                  TAG_DONE);
                              break;

        case EC_DRIVERMODE  : ed->ed_PrefsWork.ps_DriverMode = icode;
                              break;

        case EC_COPIES      : ed->ed_PrefsWork.ps_Copies = icode;
                              break;

        case EC_PAPERTYPE   : ed->ed_PrefsWork.ps_PaperType = icode;
                              break;

        case EC_PAPERWIDTH  :
        case EC_PAPERHEIGHT :
        case EC_HORIZONTALDPI:
        case EC_VERTICALDPI : break;

        case EC_PRINTFONT   : ed->ed_PrefsWork.ps_Font = icode;
                              break;

        case EC_PITCH       : ed->ed_PrefsWork.ps_Pitch = icode;
                              break;

        case EC_ORIENTATION : ed->ed_PrefsWork.ps_Orientation = icode;
                              break;

        case EC_TAB         : ed->ed_PrefsWork.ps_Tab = icode;
                              break;

        case EC_ASPECT      : ed->ed_PrefsWork.ps_Aspect = icode;
                              RenderDisplay(ed);
                              break;

        case EC_SCALINGMATH : ed->ed_PrefsWork.ps_ScalingMath = icode;
                              break;

        case EC_CENTERING   : ed->ed_PrefsWork.ps_Centering = icode;
                              RenderDisplay(ed);
                              break;

        case EC_IMAGE       : ed->ed_PrefsWork.ps_Image = icode;
                              break;

        case EC_SHADING     : ed->ed_PrefsWork.ps_Shading = icode;
                              SetGadgetAttr(ed,ed->ed_Dithering,GA_Disabled,icode == SHAD_BW,
                                                                TAG_DONE);
                              break;

        case EC_DITHERING   : ed->ed_PrefsWork.ps_Dithering = icode;
                              break;

        case EC_TRANSPARENT : ed->ed_PrefsWork.ps_Transparency = icode;
                              break;

        case EC_CM          : ed->ed_CurrentSystem = 0;
                              RenderGadgets(ed);
                              break;

        case EC_INCHES      : ed->ed_CurrentSystem = 1;
                              RenderGadgets(ed);
                              break;

        case EC_POINTS      : ed->ed_CurrentSystem = 2;
                              RenderGadgets(ed);
                              break;

        case EC_LEFTEDGE    :
        case EC_RIGHTEDGE   :
        case EC_TOPEDGE     :
        case EC_BOTTOMEDGE  : break;

        default             : break;
    }
}


d1616 2
a1618 2
VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{
d1620 3
a1622 3
    state->cs_Selected  = (((ec == EC_CM) && (ed->ed_CurrentSystem == 0)) ||
                           ((ec == EC_INCHES) && (ed->ed_CurrentSystem == 1)) ||
                           ((ec == EC_POINTS) && (ed->ed_CurrentSystem == 2)));
@
