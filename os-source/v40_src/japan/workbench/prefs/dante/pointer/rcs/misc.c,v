head     38.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.3
date     92.07.31.17.48.07;  author davidj;  state Exp;
branches ;
next     38.2;

38.2
date     92.06.24.02.09.32;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.11.08.52.45;  author davidj;  state Exp;
branches ;
next     ;


desc
@bitmap related functions
@


38.3
log
@remove ed_Offset
@
text
@/* misc.c
 * misc. for pointer
 *
 */

#include "pointer.h"

#define	DB(x)	;

/*****************************************************************************/

VOID UpdateSketch (EdDataPtr ed)
{
    if (ed->ed_GSketch)
    {
	/* Show that the bitmap has been updated */
	setgadgetattrs (ed, ed->ed_GSketch, SPA_Update, TRUE, TAG_DONE);
    }
}

/*****************************************************************************/

VOID SetPrefsRast (EdDataPtr ed, UWORD pen)
{
    SetAPen (&ed->ed_PrefsWork.ep_RPort, pen);
    RectFill (&ed->ed_PrefsWork.ep_RPort,
	      (ed->ed_Which * MAXWIDTH), 0,
	      (ed->ed_Which * MAXWIDTH) + MAXWIDTH - 1, MAXHEIGHT - 1);
}

/*****************************************************************************/

EdStatus allocpp (EdDataPtr ed, struct ExtPrefs * ep)
{
    EdStatus result = ES_NO_MEMORY;

    if (ep->ep_BMap = AllocBitMap ((MAXWIDTH * 2), MAXHEIGHT, ed->ed_Depth, BMF_DISPLAYABLE | BMF_STANDARD | BMF_CLEAR, NULL))
    {
	/* Initialize the rastport */
	InitRastPort (&ep->ep_RPort);
	ep->ep_RPort.BitMap = ep->ep_BMap;
	result = ES_NORMAL;
    }

    return result;
}

/*****************************************************************************/

UWORD ReMap (EdDataPtr ed, struct ExtPrefs * ep, WORD adj)
{
    register UWORD c, x, y;
    UWORD w, h;

    /* How wide do we want to be */
    w = MAXWIDTH * 2;
    h = MAXHEIGHT;

    /* Remap our image */
    for (y = 0; y < h; y++)
    {
	for (x = 0; x < w; x++)
	{
	    if ((c = ReadPixel (&ep->ep_RPort, x, y)) != 0)
	    {
		if (adj > 0)
		{
		    c = ed->ed_ColorTable[c];
		    DB (kprintf ("%2ld.", (ULONG)c));
		    SetAPen (&ep->ep_RPort, c);
		}
		else
		{
		    c = GetIndex (ed, c);
		    DB (kprintf ("%2ld.", (ULONG)c));
		    SetAPen (&ep->ep_RPort, c);
		}
		WritePixel (&ep->ep_RPort, x, y);
	    }
	    else
	    {
		DB (kprintf ("  ."));
	    }
	}
	DB (kprintf ("\n"));
    }
    return (0);
}
@


38.2
log
@*** empty log message ***
@
text
@a59 1
    DB (kprintf ("offset=%ld\n", ed->ed_PenOffset));
d68 1
a68 1
		    c = ed->ed_ColorTable[c - ed->ed_PenOffset];
d74 1
a74 1
		    c = GetIndex (ed, c - ed->ed_PenOffset);
@


38.1
log
@initial rcs login
@
text
@d8 1
a8 3
BOOL allocplanes (EdDataPtr ed, struct BitMap *bm, PLANEPTR *planes, UWORD width)
{
    register WORD i;
d10 1
a10 11
    /* Allocate the rasters */
    for (i = 0; i < bm->Depth; i++)
    {
	if (!(planes[i] = (PLANEPTR) AllocRaster (width, bm->Rows)))
	{
	    return (FALSE);
	}
	BltClear (planes[i], (((ULONG)bm->Rows << 16L) | (ULONG)bm->BytesPerRow), 0x2L);
    }
    return (TRUE);
}
d12 1
a12 1
VOID freeplanes (EdDataPtr ed, struct BitMap *bm, PLANEPTR *planes, UWORD width)
d14 1
a14 4
    register WORD i;

    /* Allocate the rasters */
    for (i = 0; i < bm->Depth; i++)
d16 2
a17 5
	if (planes[i])
	{
	    FreeRaster (planes[i], width, bm->Rows);
	    planes[i] = NULL;
	}
d21 3
a23 1
BOOL allocbitmap (EdDataPtr ed, struct BitMap * bm, UWORD depth, UWORD width, UWORD height)
d25 4
a28 5
    /* Initialize the BitMap */
    InitBitMap (bm, depth, width, height);

    /* Allocate the rasters */
    return (allocplanes (ed, bm, bm->Planes, width));
d31 1
a31 4
VOID freebitmap (EdDataPtr ed, struct BitMap * bm, UWORD width, UWORD height)
{
    freeplanes (ed, bm, bm->Planes, width);
}
d33 1
a33 1
EdStatus allocpp (EdDataPtr ed, struct PointerPrefs * pp)
d37 1
a37 5
    pp->pp_Width = ed->ed_Width;
    pp->pp_Height = ed->ed_Height;
    pp->pp_Depth = ed->ed_Depth;

    if (allocbitmap (ed, &pp->pp_BMap, ed->ed_Depth, ed->ed_Width, ed->ed_Height))
d40 2
a41 3
	InitRastPort (&(pp->pp_RPort));
	pp->pp_RPort.BitMap = &pp->pp_BMap;

d46 43
@
