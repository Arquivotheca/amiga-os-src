head     38.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.10
date     92.11.11.10.10.58;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     92.08.27.16.13.01;  author davidj;  state Exp;
branches ;
next     38.8;

38.8
date     92.07.09.22.35.14;  author davidj;  state Exp;
branches ;
next     38.7;

38.7
date     92.06.24.02.18.42;  author davidj;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.02.12.43.03;  author davidj;  state Exp;
branches ;
next     38.5;

38.5
date     92.01.22.17.10.43;  author davidj;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.21.15.56.07;  author Unknown;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.15.21.04.42;  author Unknown;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.11.16.31.31;  author davidj;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.11.08.52.48;  author davidj;  state Exp;
branches ;
next     ;


desc
@sketchpad specific to the pointer preference editor
@


38.10
log
@ADDED JAPN SUPPORT
@
text
@/* sketchgclass.c --- sketch boopsi object
 * Copyright (C) 1991 Commodore-Amiga, Inc.
 * All Rights Reserved Worldwide
 * Written by David N. Junod
 *
 * This gadget class is tightly weaved with the
 * Pointer preference editor.  It can not
 * standalone.
 *
 */

#include "pointer.h"

/* classface.asm */
ULONG __stdargs DoMethod (Object * o, ULONG methodID,...);
ULONG __stdargs DoSuperMethod (Class * cl, Object * o, ULONG methodID,...);
ULONG __stdargs CoerceMethod (Class * cl, Object * o, ULONG methodID,...);
ULONG __stdargs CoerceMethodA (Class * cl, Object * o, Msg msg);
ULONG __stdargs DoMethodA (Object * o, Msg msg);
ULONG __stdargs DoSuperMethodA (Class * cl, Object * o, Msg msg);
ULONG __stdargs SetSuperAttrs (Class * cl, Object * o, ULONG data,...);

#define	DB(x)	;
#define G(o)		((struct Gadget *)(o))
#define	VM	1
#define	HM	1

struct localObjData
{
    struct BitMap	*lod_BMap;		/* Work bitmap */
    UWORD	 	 lod_Width;		/* Width of work bitmap */
    UWORD	 	 lod_Height;		/* Height of work bitmap */
    UBYTE		 lod_Depth;		/* Depth of work bitmap */
};

#define SUPERCLASSID	"gadgetclass"

/*****************************************************************************/

Class *initsketchGClass (EdDataPtr ed)
{
    ULONG HookEntry ();
    Class *cl;

    /* Make the class */
    if (cl = MakeClass (SKETCHCLASSID, SUPERCLASSID, NULL,
			(LONG) sizeof (struct localObjData), 0L))
    {
	/* Fill in the callback hook */
	cl->cl_Dispatcher.h_Entry = HookEntry;
	cl->cl_Dispatcher.h_SubEntry = dispatchsketchG;
	cl->cl_UserData = (ULONG) ed;
    }

    /* Return the public class */
    return (cl);
}

/*****************************************************************************/

ULONG freesketchGClass (EdDataPtr ed, Class * cl)
{

    /* Try to free the public class */
    return ((ULONG) FreeClass (cl));
}

/*****************************************************************************/

ULONG __stdargs dispatchsketchG (Class * cl, Object * o, Msg msg)
{
    struct localObjData *lod = INST_DATA (cl, o);
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    struct RastPort *rp;
    Object *newobj;

    switch (msg->MethodID)
    {
	case OM_NEW:
	    /* Allow our superclass to create the base */
	    if (newobj = (Object *) DoSuperMethodA (cl, o, msg))
	    {
		if (initsketchGAttrs (cl, newobj, (struct opSet *) msg))
		{
		    /* Set the attributes */
		    setsketchGAttrs (cl, newobj, (struct opSet *) msg);
		}
		else
		{
		    /* Free what's there if failure */
		    CoerceMethod (cl, newobj, OM_DISPOSE);
		    newobj = NULL;
		}
	    }

	    return ((ULONG) newobj);
	    break;

	case OM_UPDATE:
	case OM_SET:
	    /* Do the superclass first */
	    DoSuperMethodA (cl, o, msg);

	    /* Call our set routines */
	    setsketchGAttrs (cl, o, (struct opSet *) msg);

	    /* Get a pointer to the rastport */
	    if (rp = ObtainGIRPort (((struct opSet *) msg)->ops_GInfo))
	    {
		struct gpRender gpr;

		/* Force a redraw */
		gpr.MethodID   = GM_RENDER;
		gpr.gpr_GInfo  = ((struct opSet *) msg)->ops_GInfo;
		gpr.gpr_RPort  = rp;
		gpr.gpr_Redraw = GREDRAW_REDRAW;

		/* Redraw... */
		DoMethodA (o, &gpr);

		/* Release the temporary rastport */
		ReleaseGIRPort (rp);
	    }
	    break;

	    /* Render the graphics */
	case GM_RENDER:
	    /* Render the button */
	    rendersketchG (cl, o, (struct gpRender *) msg, 0, 0, FALSE);
	    break;

	    /* Handle input */
	case GM_GOACTIVE:
	case GM_HANDLEINPUT:
	    /* Handle the input */
	    return (handlesketchG (cl, o, (struct gpInput *) msg));
	    break;

	    /* Delete ourself */
	case OM_DISPOSE:
	    /* Free the bitmaps that we use */
	    WaitBlit ();
	    lod->lod_BMap->Depth = ed->ed_Depth;
	    FreeBitMap (lod->lod_BMap);

	    /* Pass it up to the superclass */
	    return ((ULONG) DoSuperMethodA (cl, o, msg));
	    break;

	    /* Let the superclass handle everything else */
	default:
	    return ((ULONG) DoSuperMethodA (cl, o, msg));
	    break;
    }

    return (0L);
}

/*****************************************************************************/

/* initialize attributes of an object */
ULONG initsketchGAttrs (Class * cl, Object * o, struct opSet * msg)
{
    struct localObjData *lod = INST_DATA (cl, o);
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    UWORD i;

    lod->lod_Width  = MAXWIDTH  * 12;
    lod->lod_Height = MAXHEIGHT * 12;

    if (lod->lod_BMap = AllocBitMap (lod->lod_Width, lod->lod_Height, ed->ed_Depth, BMF_DISPLAYABLE | BMF_STANDARD | BMF_CLEAR, NULL))
    {
	lod->lod_BMap->Depth = lod->lod_Depth = MAX (ed->ed_Depth, ed->ed_Screen->RastPort.BitMap->Depth);
	for (i = ed->ed_Depth; i < 8; i++)
	    lod->lod_BMap->Planes[i] = NULL;
	return TRUE;
    }
    return FALSE;
}

/*****************************************************************************/

/* CHANGE ALL THESE TO METHODS!!! */
/* Set attributes of an object */
ULONG setsketchGAttrs (Class * cl, Object * o, struct opSet * msg)
{
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    struct TagItem *tags = msg->ops_AttrList;
    struct TagItem *tstate;
    struct TagItem *tag;
    WORD pen;

    /* process rest */
    tstate = tags;
    while (tag = NextTagItem (&tstate))
    {
	switch (tag->ti_Tag)
	{
	    case SPA_Store:
		Store (ed);
		break;

	    case SPA_Restore:
		Restore (ed);
		break;

	    case SPA_Clear:
		pen = ed->ed_APen;
		if (pen == 4)
		    pen = 0;
		SetPrefsRast (ed, pen);
		break;

	    case SPA_Erase:
		SetPrefsRast (ed, 0);
		break;
	}
    }

    return (1L);
}

/*****************************************************************************/

ULONG handlesketchG (Class * cl, Object * o, struct gpInput * msg)
{
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    struct InputEvent *ie = msg->gpi_IEvent;
    ULONG retval = GMR_MEACTIVE;
    BOOL refresh = FALSE;
    BOOL valid = FALSE;
    BOOL fast = FALSE;
    BOOL draw = FALSE;
    WORD x, y;
    WORD pen;

    pen = ed->ed_APen;
    if (pen == 4)
	pen = 0;

    /* Figure out which cell the mouse is over */
    x = msg->gpi_Mouse.X - (VM * 2);
    y = msg->gpi_Mouse.Y - (HM * 2);

    if ((x < 0) || (x > (G (o)->Width - (VM * 4))))
    {
	x = -1;
    }
    else
    {
	x /= ed->ed_XMag;
    }

    if ((y < 0) || (y > (G (o)->Height - (HM * 4))))
    {
	y = -1;
    }
    else
    {
	y /= ed->ed_YMag;
    }

    /* Do we have a valid, new cell? */
    if ((x >= 0) && (y >= 0))
    {
	valid = TRUE;
	if (((UWORD) ReadPixel (&ed->ed_PrefsWork.ep_RPort, (ed->ed_Which*MAXWIDTH) + x, y)) != pen)
	{
	    draw = TRUE;
	}
    }

    /* Determine what to do... */
    switch (ie->ie_Class)
    {
	case IECLASS_RAWMOUSE:
	    switch (ie->ie_Code)
	    {
		    /* Select button pressed */
		case SELECTDOWN:
		    /* Select button */
		    if (valid)
		    {
			Store (ed);
			fast = refresh = TRUE;

			if (ed->ed_GSetPoint->Flags & GFLG_SELECTED)
			{
			    retval = (GMR_NOREUSE | GMR_VERIFY);
			    ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_X = -(x);
			    ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_Y = -(y);
			    fast = FALSE;
			}
		    }
		    else
		    {
			retval = GMR_NOREUSE;
		    }
		    break;

		    /* Menu button pressed */
		case MENUDOWN:
		    Restore (ed);
		    refresh = TRUE;

		    /* This event ends it */
		    retval = GMR_NOREUSE;
		    break;

		    /* Select button released */
		case SELECTUP:
		    retval = (GMR_NOREUSE | GMR_VERIFY);

		    /* Continue giving me input */
		default:
		    if (draw)
		    {
			fast = refresh = TRUE;
		    }
		    break;
	    }
	    break;
    }

    if (refresh)
    {
	/* Update the graphics to reflect the current state. */
	rendersketchG (cl, o, (struct gpRender *) msg, x, y, fast);
    }

    return (retval);
}

/*****************************************************************************/

VOID WriteChunkyPixel (Class * cl, Object * o, struct RastPort * srp, struct DrawInfo *dri, UWORD x, UWORD y, UWORD mode)
{
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    WORD echo_w = MAXWIDTH + 4;
    WORD echo_h = MAXHEIGHT + 4;
    UBYTE pen = ed->ed_APen;
    register WORD i, ox, oy;
    WORD tx, ty, bx, by;
    UBYTE rpen;

    if (pen == 4)
	pen = 0;

    /* Draw the magnified pixel */
    tx = G (o)->LeftEdge + (VM * 2) + (x * ed->ed_XMag);
    ty = G (o)->TopEdge + (HM * 2) + (y * ed->ed_YMag);
    bx = tx + ed->ed_XMag - 2;
    by = ty + ed->ed_YMag - 2;
    bx = MIN (bx, G (o)->LeftEdge + G (o)->Width - (VM * 2) - 1);
    by = MIN (by, G (o)->TopEdge + G (o)->Height - (HM * 2) - 1);

    if (mode == 0)
    {
	/* Draw the normal pixel */
	SetAPen (&ed->ed_PrefsWork.ep_RPort, pen);
	WritePixel (&ed->ed_PrefsWork.ep_RPort, (ed->ed_Which*MAXWIDTH) + x, y);

	ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 7 + 2;
	oy = ed->ed_GSketch->TopEdge + 2 + 2;

	for (i = 0; i < 4; i++, ox += echo_w)
	{
	    if (i == 2)
	    {
		oy += echo_h;
		ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 7 + 2;
	    }

	    if ((rpen = ed->ed_APen) == 0)
		rpen = i;

	    SetAPen (ed->ed_Window->RPort, rpen);
	    WritePixel (ed->ed_Window->RPort, ox + x, oy + y);
	}

	/* Draw the magnified pixel */
	SetAPen (srp, pen);
	RectFill (srp, tx, ty, bx, by);
    }
    else
    {
	SetAPen (srp, dri->dri_Pens[FILLPEN]);
	tx--; ty--;
	bx++; by++;
	Move (srp, tx, ty);
	Draw (srp, bx, ty);
	Draw (srp, bx, by);
	Draw (srp, tx, by);
	Draw (srp, tx, ty);
    }
}

/*****************************************************************************/

ULONG rendersketchG (Class * cl, Object * o, struct gpRender * msg, WORD x, WORD y, BOOL fast)
{
    struct localObjData *lod = INST_DATA (cl, o);
    EdDataPtr ed = (EdDataPtr) cl->cl_UserData;
    struct RastPort *rp;
    ULONG retval = 0L;

    /* Get the rastport that we're going to write into. */
    if (rp = ObtainGIRPort (msg->gpr_GInfo))
    {
	if (fast)
	{
	    WriteChunkyPixel (cl, o, rp, msg->gpr_GInfo->gi_DrInfo, x, y, 0);
	}
	else
	{
	    /* CHANGE MAGNIFY TO START AT A PARTICULAR PIXEL!!! */
	    /* Copy from the preference record to temporary record */
	    bltbm (ed->ed_PrefsWork.ep_BMap, (ed->ed_Which * MAXWIDTH), 0,
		   ed->ed_TempBM,
		   0, 0, MAXWIDTH, MAXHEIGHT,
		   0xC0, 0xFF, NULL, ed->ed_GfxBase);
	    WaitBlit ();

	    /* Magnify the bitmap */
	    lod->lod_BMap->Depth = ed->ed_Depth;
	    MagnifyBitMap (ed->ed_TempBM, lod->lod_BMap,
			   ed->ed_XMag, ed->ed_YMag,
			   MAXWIDTH, TRUE);
	    lod->lod_BMap->Depth = lod->lod_Depth;

	    /* Blit from the work BitMap to the window */
	    bltbmrp (lod->lod_BMap, 0, 0,
		     rp,
		     G (o)->LeftEdge + (VM * 2),
		     G (o)->TopEdge + (HM * 2),
		     G (o)->Width - (VM * 4),
		     G (o)->Height - (HM * 4),
		     0xC0, ed->ed_GfxBase);

	    /* Clear that blank area around the edges (just in case the hot spot indicator was there */
	    SetAPen (rp, 0);
	    Move (rp, G(o)->LeftEdge + 1, G(o)->TopEdge + 1);
	    Draw (rp, G(o)->LeftEdge + G(o)->Width - 2, G(o)->TopEdge + 1);
	    Draw (rp, G(o)->LeftEdge + G(o)->Width - 2, G(o)->TopEdge + G(o)->Height - 2);
	    Draw (rp, G(o)->LeftEdge + 1, G(o)->TopEdge + G(o)->Height - 2);
	    Draw (rp, G(o)->LeftEdge + 1, G(o)->TopEdge + 1);

	    RefreshRepeats (ed);
	}

	/* Write the hotspot */
	WriteChunkyPixel (cl, o, rp, msg->gpr_GInfo->gi_DrInfo, -(ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_X), -(ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_Y), 1);

	/* Indicate success */
	retval = 1L;

	/* Release the rastport */
	ReleaseGIRPort (rp);
    }

    return (retval);
}

VOID Store (EdDataPtr ed)
{
    /* Copy to the undo buffer */
    bltbm (ed->ed_PrefsWork.ep_BMap, (ed->ed_Which*MAXWIDTH), 0,
	   ed->ed_UndoBM, 0, 0, MAXWIDTH, MAXHEIGHT,
	   0xC0, 0xFF, NULL, ed->ed_GfxBase);
}

VOID Restore (EdDataPtr ed)
{
    /* Copy from the undo buffer */
    bltbm (ed->ed_UndoBM, 0, 0,
	   ed->ed_TempBM, 0, 0, MAXWIDTH, MAXHEIGHT,
	   0xC0, 0xFF, NULL, ed->ed_GfxBase);

    /* Copy from the undo buffer */
    bltbm (ed->ed_PrefsWork.ep_BMap, (ed->ed_Which*MAXWIDTH), 0,
	   ed->ed_UndoBM, 0, 0, MAXWIDTH, MAXHEIGHT,
	   0xC0, 0xFF, NULL, ed->ed_GfxBase);

    /* Copy from the undo buffer */
    bltbm (ed->ed_TempBM, 0, 0,
	   ed->ed_PrefsWork.ep_BMap, (ed->ed_Which*MAXWIDTH), 0, MAXWIDTH, MAXHEIGHT,
	   0xC0, 0xFF, NULL, ed->ed_GfxBase);
}
@


38.9
log
@cleaned up hot spot indicator
@
text
@d168 2
a169 2
    lod->lod_Width  = MAXWIDTH  * 6;
    lod->lod_Height = MAXHEIGHT * 6;
@


38.8
log
@*** empty log message ***
@
text
@a27 2
#define	GRAB_PEN	3

d31 3
a33 2
    UWORD	 	 lod_WorkWidth;		/* Width of work bitmap */
    UWORD	 	 lod_WorkHeight;		/* Height of work bitmap */
d143 1
d166 1
d168 2
a169 2
    lod->lod_WorkWidth  = MAXWIDTH  * 6;
    lod->lod_WorkHeight = MAXHEIGHT * 6;
d171 1
a171 1
    if (lod->lod_BMap = AllocBitMap (lod->lod_WorkWidth, lod->lod_WorkHeight, ed->ed_Depth, BMF_DISPLAYABLE | BMF_STANDARD | BMF_CLEAR, NULL))
d173 3
d336 1
a336 1
VOID WriteChunkyPixel (Class * cl, Object * o, struct RastPort * srp, UWORD x, UWORD y, UWORD mode)
d380 4
d387 9
a395 9
	pen = GRAB_PEN;
	tx++;
	ty++;
	bx--;
	by--;
    }

    SetAPen (srp, pen);
    RectFill (srp, tx, ty, bx, by);
d412 1
a412 1
	    WriteChunkyPixel (cl, o, rp, x, y, 0);
d425 1
d429 1
d440 8
d452 1
a452 1
	WriteChunkyPixel (cl, o, rp, -(ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_X), -(ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_Y), 1);
@


38.7
log
@*** empty log message ***
@
text
@d143 1
d167 2
a168 2
    lod->lod_WorkWidth = MAXWIDTH * ed->ed_XMag;
    lod->lod_WorkHeight = MAXHEIGHT * ed->ed_YMag;
d286 2
a287 2
			    ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_X = x;
			    ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_Y = y;
d335 2
a336 2
    WORD echo_w = ed->ed_Width + 4;
    WORD echo_h = ed->ed_Height + 4;
d434 1
a434 1
	WriteChunkyPixel (cl, o, rp, ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_X, ed->ed_PrefsWork.ep_PP[ed->ed_Which].pp_Y, 1);
@


38.6
log
@repeats done correctly
@
text
@d32 3
a34 3
    struct BitMap lod_Work;	/* Work bitmap */
    UWORD lod_WWidth;		/* Width of work bitmap */
    UWORD lod_WHeight;		/* Height of work bitmap */
d111 1
a111 1
		struct gpRender gpr = {NULL};
d114 3
a116 3
		gpr.MethodID = GM_RENDER;
		gpr.gpr_GInfo = ((struct opSet *) msg)->ops_GInfo;
		gpr.gpr_RPort = rp;
d143 1
a143 1
	    freebitmap (ed, &lod->lod_Work, lod->lod_WWidth, lod->lod_WHeight);
d166 2
a167 2
    lod->lod_WWidth = ed->ed_Width * ed->ed_XMag;
    lod->lod_WHeight = ed->ed_Height * ed->ed_YMag;
d169 1
a169 1
    if (allocbitmap (ed, &lod->lod_Work, ed->ed_Depth, lod->lod_WWidth, lod->lod_WHeight))
d171 3
a173 3
	return (TRUE);
    }
    return (FALSE);
d206 1
a206 1
		SetRast (&(ed->ed_PrefsWork.pp_RPort), pen);
d210 1
a210 1
		SetRast (&(ed->ed_PrefsWork.pp_RPort), 0);
d262 1
a262 1
	if (((UWORD) ReadPixel (&(ed->ed_PrefsWork.pp_RPort), x, y)) != pen)
d285 2
a286 2
			    ed->ed_PrefsWork.pp_Grab.x = x;
			    ed->ed_PrefsWork.pp_Grab.y = y;
d334 2
a335 2
    WORD echo_w = ed->ed_Width + 7 + 4;
    WORD echo_h = ed->ed_Height + 3 + 2;
d355 2
a356 2
	SetAPen (&(ed->ed_PrefsWork.pp_RPort), pen);
	WritePixel (&(ed->ed_PrefsWork.pp_RPort), x, y);
d358 1
a358 1
	ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 8 + 4;
d366 1
a366 1
		ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 8 + 4;
d369 1
a369 2
	    rpen = ed->ed_APen;
	    if (rpen == 4)
d407 8
d416 1
a416 1
	    MagnifyBitMap (&(ed->ed_PrefsWork.pp_BMap), &lod->lod_Work,
d418 1
a418 1
			   ed->ed_Width, TRUE);
d421 1
a421 1
	    bltbmrp (&lod->lod_Work, 0, 0,
d433 1
a433 1
	WriteChunkyPixel (cl, o, rp, ed->ed_PrefsWork.pp_Grab.x, ed->ed_PrefsWork.pp_Grab.y, 1);
d448 2
a449 2
    bltbm (&(ed->ed_PrefsWork.pp_BMap), 0, 0,
	   &ed->ed_Undo, 0, 0, ed->ed_Width, ed->ed_Height,
d455 9
a463 3
#if 1
    PLANEPTR tempplane;
    WORD plane;
a464 7
    for (plane = 0; plane < ed->ed_PrefsWork.pp_BMap.Depth; plane++)
    {
	tempplane = ed->ed_PrefsWork.pp_BMap.Planes[plane];
	ed->ed_PrefsWork.pp_BMap.Planes[plane] = ed->ed_Undo.Planes[plane];
	ed->ed_Undo.Planes[plane] = tempplane;
    }
#else
d466 2
a467 2
    bltbm (&ed->ed_Undo, 0, 0,
	   &(ed->ed_PrefsWork.pp_BMap), 0, 0, ed->ed_Width, ed->ed_Height,
a468 1
#endif
@


38.5
log
@added Undo Undo.
@
text
@d358 2
a359 2
	ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 16;
	oy = ed->ed_GSketch->TopEdge + 4;
d366 1
a366 1
		ox = ed->ed_GSketch->LeftEdge + ed->ed_GSketch->Width + 16;
@


38.4
log
@changed to use the amiga.lib routines instead of hookface.asm & classface.asm
@
text
@a439 1

d448 3
d452 7
d463 1
@


38.3
log
@added repeat images
@
text
@d14 9
d43 1
a43 1
    ULONG hookEntry ();
d51 1
a51 1
	cl->cl_Dispatcher.h_Entry = hookEntry;
d82 1
a82 1
	    if (newobj = (Object *) DSM (cl, o, msg))
d103 1
a103 1
	    DSM (cl, o, msg);
d120 1
a120 1
		DM (o, &gpr);
d146 1
a146 1
	    return ((ULONG) DSM (cl, o, msg));
d151 1
a151 1
	    return ((ULONG) DSM (cl, o, msg));
@


38.2
log
@got rid of unused variables
@
text
@d30 2
d51 2
d60 2
a66 1
    ULONG retval = 0L;
d88 1
a88 1
	    retval = (ULONG) newobj;
d94 1
a94 1
	    retval = DSM (cl, o, msg);
d97 1
a97 1
	    retval += setsketchGAttrs (cl, o, (struct opSet *) msg);
d99 2
a100 2
	    /* See if we should refresh */
	    if (retval && (OCLASS (o) == cl))
d102 1
a102 5
		/* Get a pointer to the rastport */
		if (rp = ObtainGIRPort (((struct opSet *) msg)->ops_GInfo))
		{
		    struct gpRender gpr =
		    {NULL};
d104 8
a111 8
		    /* Force a redraw */
		    gpr.MethodID = GM_RENDER;
		    gpr.gpr_GInfo = ((struct opSet *) msg)->ops_GInfo;
		    gpr.gpr_RPort = rp;
		    gpr.gpr_Redraw = GREDRAW_REDRAW;

		    /* Redraw... */
		    DM (o, &gpr);
d113 2
a114 6
		    /* Release the temporary rastport */
		    ReleaseGIRPort (rp);
		}

		/* Clear the return value */
		retval = 0L;
a121 6

	    break;

	    /* Always respond to hit */
	case GM_HITTEST:
	    retval = GMR_GADGETHIT;
d128 1
a128 1
	    retval = handlesketchG (cl, o, (struct gpInput *) msg);
d137 1
a137 1
	    retval = (ULONG) DSM (cl, o, msg);
d142 1
a142 1
	    retval = (ULONG) DSM (cl, o, msg);
d146 1
a146 1
    return (retval);
d149 2
d157 2
a158 2
	lod->lod_WWidth = ed->ed_Width * ed->ed_XMag;
	lod->lod_WHeight = ed->ed_Height * ed->ed_YMag;
d160 4
a163 6
	if (allocbitmap (ed, &lod->lod_Work, ed->ed_Depth, lod->lod_WWidth, lod->lod_WHeight))
	{
	    return (TRUE);
	}
	freebitmap (ed, &lod->lod_Work, lod->lod_WWidth, lod->lod_WHeight);

d167 2
d177 1
a177 1
    ULONG refresh = 0L;
a186 1
		refresh = 1;
a190 1
		refresh = 1;
d194 4
a197 2
		SetRast (&(ed->ed_PrefsWork.pp_RPort), ed->ed_APen);
		refresh = 1;
a201 5
		refresh = 1;
		break;

	    case SPA_Update:
		refresh = 1;
d206 1
a206 1
    return (refresh);
d209 2
d221 5
d253 1
a253 1
	if (((UWORD) ReadPixel (&(ed->ed_PrefsWork.pp_RPort), x, y)) != ed->ed_APen)
a310 3
    /* No change */
    G (o)->SpecialInfo = (APTR) 0xFFFFFFFFL;

a314 3

	/* Show where */
	G (o)->SpecialInfo = (APTR) ((((ULONG) x) << 16) | ((ULONG) y));
d320 2
d325 2
d328 1
d330 4
d348 19
d381 2
d412 2
d431 1
d440 1
@


38.1
log
@initial rcs login
@
text
@a179 1
    struct localObjData *lod = INST_DATA (cl, o);
a222 1
    struct localObjData *lod = INST_DATA (cl, o);
@
