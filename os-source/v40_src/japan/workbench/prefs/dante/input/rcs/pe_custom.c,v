head     38.30;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


38.30
date     93.01.25.09.29.20;  author delarge;  state Exp;
branches ;
next     38.29;

38.29
date     92.11.11.15.31.21;  author vertex;  state Exp;
branches ;
next     38.28;

38.28
date     92.11.06.16.47.03;  author vertex;  state Exp;
branches ;
next     38.27;

38.27
date     92.10.01.14.51.44;  author vertex;  state Exp;
branches ;
next     38.26;

38.26
date     92.07.16.12.52.54;  author vertex;  state Exp;
branches ;
next     38.25;

38.25
date     92.06.27.14.47.14;  author vertex;  state Exp;
branches ;
next     38.24;

38.24
date     92.05.12.18.06.42;  author vertex;  state Exp;
branches ;
next     38.23;

38.23
date     92.03.24.17.44.42;  author vertex;  state Exp;
branches ;
next     38.22;

38.22
date     92.03.09.10.49.02;  author vertex;  state Exp;
branches ;
next     38.21;

38.21
date     92.01.27.09.44.00;  author vertex;  state Exp;
branches ;
next     38.20;

38.20
date     92.01.21.13.23.14;  author vertex;  state Exp;
branches ;
next     38.19;

38.19
date     92.01.10.11.14.08;  author vertex;  state Exp;
branches ;
next     38.18;

38.18
date     92.01.10.10.07.12;  author vertex;  state Exp;
branches ;
next     38.17;

38.17
date     91.11.20.10.17.04;  author vertex;  state Exp;
branches ;
next     38.16;

38.16
date     91.11.11.12.10.28;  author vertex;  state Exp;
branches ;
next     38.15;

38.15
date     91.10.25.10.46.50;  author vertex;  state Exp;
branches ;
next     38.14;

38.14
date     91.10.24.16.19.42;  author vertex;  state Exp;
branches ;
next     38.13;

38.13
date     91.10.01.17.39.49;  author vertex;  state Exp;
branches ;
next     38.12;

38.12
date     91.10.01.14.42.09;  author vertex;  state Exp;
branches ;
next     38.11;

38.11
date     91.09.19.16.05.47;  author vertex;  state Exp;
branches ;
next     38.10;

38.10
date     91.09.19.15.51.02;  author vertex;  state Exp;
branches ;
next     38.9;

38.9
date     91.09.19.13.20.46;  author vertex;  state Exp;
branches ;
next     38.8;

38.8
date     91.08.20.10.51.10;  author vertex;  state Exp;
branches ;
next     38.7;

38.7
date     91.08.20.10.29.11;  author vertex;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.12.12.57.48;  author vertex;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.06.15.08.34;  author vertex;  state Exp;
branches ;
next     38.4;

38.4
date     91.07.15.11.16.15;  author vertex;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.10.17.36.51;  author vertex;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.02.15.49.57;  author vertex;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.28.17.46.56;  author vertex;  state Exp;
branches ;
next     ;


desc
@Prefs editor shell - Input custom interface
@


38.30
log
@correct Japan support per Kaori request
@
text
@
/* includes */
#include <exec/types.h>
#include <exec/libraries.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <devices/keymap.h>
#include <intuition/intuition.h>
#include <intuition/screens.h>
#include <intuition/gadgetclass.h>
#include <graphics/text.h>
#include <libraries/asl.h>
#include <libraries/gadtools.h>
#include <libraries/locale.h>
#include <prefs/locale.h>
#include <dos/dos.h>
#include <dos/exall.h>
#include <string.h>

/* prototypes */
#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/alib_protos.h>
#include <clib/utility_protos.h>
#include <clib/asl_protos.h>

/* direct ROM interface */
#include <pragmas/exec_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/iffparse_pragmas.h>
#include <pragmas/gadtools_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/graphics_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/asl_pragmas.h>

/* application includes */
#include "pe_custom.h"
#include "pe_strings.h"
#include "pe_utils.h"
#include "pe_iff.h"


#define SysBase ed->ed_SysBase

VOID FreeKeyMap(EdDataPtr ed, struct KeyMapNode *kn);
VOID SetInputPrefs(EdDataPtr ed, struct InputPrefs *ip);


/*****************************************************************************/


/* The IFF chunks known to this prefs editor. IFFPrefChunkCnt says how many
 * chunks there are
 */
#define IFFPrefChunkCnt 2
static LONG far IFFPrefChunks[] =
{
    ID_PREF, ID_PRHD,
    ID_PREF, ID_INPT,
};


/*****************************************************************************/


/* The PrefHeader structure this editor outputs */
static struct PrefHeader far IFFPrefHeader =
{
    0,   /* version */
    0,   /* type    */
    0    /* flags   */
};


/*****************************************************************************/


struct KeyNode
{
    struct Node kn_Node;
    char        kn_RealName[16];
};


STRPTR far stupidKludge[] =
{
     "cdn",  "Canadien Français",
     "ch1",  "Suisse",
     "ch2",  "Schweiz",
     "d",    "Deutsch",
     "dk",   "Dansk",
     "e",    "Español",
     "f",    "Français",
     "gb",   "British",
     "i",    "Italiana",
     "n",    "Norsk",
     "po",   "Português",
     "s",    "Svenskt",
     "usa0", "American (A1000)",
     "usa2", "Dvorak",
     "usa3", "American (A600)",
     NULL,   NULL
};


EdStatus BuildList(EdDataPtr ed, struct List *list, STRPTR pattern, WORD strip)
{
UBYTE                exAllBuffer[512];
struct ExAllControl *eac;
struct ExAllData    *ead;
BPTR                 lock;
BPTR                 oldCD;
BOOL                 more;
char                 pat[20];
BOOL                 ok;
BOOL                 nomem = FALSE;
UWORD                len;
STRPTR		     name;
struct KeyNode      *node;
struct KeyNode      *new;
UWORD                i;
struct DevProc      *dvp;

    NewList(list);

    len = strlen("American");
    if (new = AllocVec(sizeof(struct KeyNode)+len+1,MEMF_PUBLIC|MEMF_CLEAR))
    {
        strcpy(new->kn_RealName,"usa1");
        new->kn_Node.ln_Name = (STRPTR)((ULONG)new + sizeof(struct KeyNode));
        CopyMem("American",new->kn_Node.ln_Name,len);
        AddHead(list,(struct Node *)new);
    }

    ok = FALSE;
    if (eac = (struct ExAllControl *) AllocDosObject(DOS_EXALLCONTROL,0))
    {
        ParsePatternNoCase(pattern,pat,20);
        eac->eac_LastKey     = 0;
        eac->eac_MatchString = pat;

        dvp = (struct DevProc *) GetDeviceProc("KEYMAPS:",0);
        while (dvp)
        {
            eac->eac_LastKey = 0;                     /* use now as null BSTR */
            if (lock = DoPkt3(dvp->dvp_Port,ACTION_LOCATE_OBJECT,dvp->dvp_Lock,MKBADDR(&eac->eac_LastKey),SHARED_LOCK))
            {
                oldCD = CurrentDir(lock);

                ok = TRUE;
                do
                {
                    more = ExAll(lock,(struct ExAllData *)exAllBuffer,sizeof(exAllBuffer),ED_TYPE,eac);
                    if ((!more) && (IoErr() != ERROR_NO_MORE_ENTRIES))
                    {
                        ok = FALSE;
                        break;
                    }

                    if (eac->eac_Entries > 0)
                    {
                        ead = (struct ExAllData *) exAllBuffer;
                        do
                        {
                            if (ead->ed_Type < 0)
                            {
                                name = (STRPTR)ead->ed_Name;
                                len  = strlen(name) - strip;

                                i = 0;
                                while (stupidKludge[i])
                                {
                                    if (Strnicmp(name,stupidKludge[i],len) == 0)
                                    {
                                        name = stupidKludge[i+1];
                                        len = strlen(name);
                                        break;
                                    }
                                    i = i + 2;
                                }

                                if (new = AllocVec(sizeof(struct KeyNode)+len+1,MEMF_PUBLIC|MEMF_CLEAR))
                                {
                                    CopyMem((STRPTR)ead->ed_Name,new->kn_RealName,15);
                                    new->kn_Node.ln_Name = (STRPTR)((ULONG)new + sizeof(struct KeyNode));
                                    CopyMem(name,new->kn_Node.ln_Name,len);

                                    node = (struct KeyNode *)list->lh_Head;
                                    while (node->kn_Node.ln_Succ)
                                    {
                                        if (Stricmp(node->kn_Node.ln_Name,new->kn_Node.ln_Name) >= 0)
                                            break;
                                        node = (struct KeyNode *)node->kn_Node.ln_Succ;
                                    }
                                    Insert(list,new,node->kn_Node.ln_Pred);
                                }
                                else
                                {
                                    nomem = TRUE;
                                    break;
                                }
                            }
                            ead = ead->ed_Next;
                        }
                        while (ead);
                    }
                }
                while (more);

                CurrentDir(oldCD);
                UnLock(lock);
            }
            dvp = GetDeviceProc("KEYMAPS:",dvp);
        }
        FreeDosObject(DOS_EXALLCONTROL,eac);
    }

    if (nomem)
    {
        SetIoErr(ERROR_NO_FREE_STORE);
        ok = FALSE;
    }

    if (ok)
      return(ES_NORMAL);

    return(ES_DOSERROR);
}


/*****************************************************************************/


EdStatus InitEdData(EdDataPtr ed)
{
    strcpy(ed->ed_PrefsDefaults.ip_Keymap,"usa1");
    ed->ed_PrefsDefaults.ip_PointerTicks         = 1;
    ed->ed_PrefsDefaults.ip_DoubleClick.tv_secs  = 1;
    ed->ed_PrefsDefaults.ip_DoubleClick.tv_micro = 500000;
    ed->ed_PrefsDefaults.ip_KeyRptDelay.tv_secs  = 0;
    ed->ed_PrefsDefaults.ip_KeyRptDelay.tv_micro = 600000;
    ed->ed_PrefsDefaults.ip_KeyRptSpeed.tv_secs  = 0;
    ed->ed_PrefsDefaults.ip_KeyRptSpeed.tv_micro = 50000;
    ed->ed_PrefsDefaults.ip_MouseAccel           = 0;

    ed->ed_PrefsWork    = ed->ed_PrefsDefaults;
    ed->ed_PrefsInitial = ed->ed_PrefsDefaults;
    ed->ed_FirstClick   = TRUE;

    return(ES_NORMAL);
}


/*****************************************************************************/


VOID CleanUpEdData(EdDataPtr ed)
{
struct Node *node;

    FreeKeyMap(ed,ed->ed_Keymap);

    if (ed->ed_Cancelled)
        SetInputPrefs(ed,&ed->ed_PrefsInitial);

    while (node = RemHead(&ed->ed_AvailKeymaps))
        FreeVec(node);
}


/*****************************************************************************/


EdStatus ReadPrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (cn->cn_ID != ID_INPT || cn->cn_Type != ID_PREF)
        return(ES_IFF_UNKNOWNCHUNK);

    if (ReadChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct InputPrefs)) == sizeof(struct InputPrefs))
        return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus OpenPrefs(EdDataPtr ed, STRPTR name)
{
    return(ReadIFF(ed,name,IFFPrefChunks,IFFPrefChunkCnt,ReadPrefs));
}


/*****************************************************************************/


EdStatus WritePrefs(EdDataPtr ed, struct IFFHandle *iff, struct ContextNode *cn)
{
    if (!PushChunk(iff,0,ID_INPT,sizeof(struct InputPrefs)))
        if (WriteChunkBytes(iff,&ed->ed_PrefsWork,sizeof(struct InputPrefs)) == sizeof(struct InputPrefs))
            if (!PopChunk(iff))
                return(ES_NORMAL);

    return(ES_IFFERROR);
}


EdStatus SavePrefs(EdDataPtr ed, STRPTR name)
{
    return(WriteIFF(ed,name,&IFFPrefHeader,WritePrefs));
}


/*****************************************************************************/


#define MIN_DOUBLECLICK	1 	/* =  .20 s (in 50th's of a second) */
#define MAX_DOUBLECLICK	200	/* = 4.00 s (in 50th's of a second) */
#define MIN_KEYDELAY	1 	/* =  .20 s (in 50th's of a second) */
#define MAX_KEYDELAY	75	/* = 1.50 s (in 50th's of a second) */
#define MIN_KEYSPEED	1	/* =    2 s (in 500th's of a second) */
#define MAX_KEYSPEED	125	/* =  .25 s (in 500th's of a second) */

/*  Conversion factors for DOS ticks: */
#define TICKS_PER_SEC	50
#define	USECS_PER_TICK	20000

/*  Conversion factors for kspeed units (1/500 sec): */
#define	KSUS_PER_SEC	500
#define	USECS_PER_KSU	2000
#define MICROS_PER_SEC	1000000


/*****************************************************************************/


#define NW_WIDTH     586
#define NW_HEIGHT    255
#define	NW_IDCMP     (IDCMP_MOUSEBUTTONS | IDCMP_MENUPICK | IDCMP_REFRESHWINDOW | IDCMP_INTUITICKS | BUTTONIDCMP | CHECKBOXIDCMP | SLIDERIDCMP | CYCLEIDCMP | TEXTIDCMP | LISTVIEWIDCMP)
#define	NW_FLAGS     (WFLG_ACTIVATE | WFLG_DEPTHGADGET | WFLG_DRAGBAR | WFLG_SIMPLE_REFRESH)
#define NW_MINWIDTH  NW_WIDTH
#define NW_MINHEIGHT NW_HEIGHT
#define NW_MAXWIDTH  NW_WIDTH
#define NW_MAXHEIGHT NW_HEIGHT
#define ZOOMWIDTH    200

struct EdMenu far EM[] = {
    {NM_TITLE,  MSG_PROJECT_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_OPEN,           EC_OPEN, 0},
      {NM_ITEM, MSG_PROJECT_SAVE_AS,        EC_SAVEAS, 0},
      {NM_ITEM, MSG_NOTHING,                EC_NOP, 0},
      {NM_ITEM, MSG_PROJECT_QUIT,           EC_CANCEL, 0},

    {NM_TITLE,  MSG_EDIT_MENU,              EC_NOP, 0},
      {NM_ITEM, MSG_EDIT_RESET_TO_DEFAULTS, EC_RESETALL, 0},
      {NM_ITEM, MSG_EDIT_LAST_SAVED,        EC_LASTSAVED, 0},
      {NM_ITEM, MSG_EDIT_RESTORE,           EC_RESTORE, 0},

    {NM_TITLE,  MSG_OPTIONS_MENU,           EC_NOP, 0},
      {NM_ITEM, MSG_OPTIONS_SAVE_ICONS,     EC_SAVEICONS, CHECKIT|MENUTOGGLE},

    {NM_END,    MSG_NOTHING,                EC_NOP, 0}
};

/* main display gadgets */
struct EdGadget far EG[] = {
    {BUTTON_KIND,   8,   230, 87,  20, MSG_SAVE_GAD,         EC_SAVE,            0},
    {BUTTON_KIND,   244, 230, 87,  20, MSG_USE_GAD,          EC_USE,             0},
    {BUTTON_KIND,   476, 230, 87,  20, MSG_CANCEL_GAD,       EC_CANCEL,          0},

    {SLIDER_KIND,   216, 24,  180, 11, MSG_INP_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
    {CHECKBOX_KIND, 216, 36,  12,  14, MSG_INP_ACCELERATION_GAD, EC_ACCELERATION,    0},
    {SLIDER_KIND,   216, 58,  180, 11, MSG_INP_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
    {BUTTON_KIND,   10,  76,  207, 20, MSG_INP_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   10,  99,  207, 20, MSG_INP_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
    {TEXT_KIND,     219, 99,  155, 20, MSG_NOTHING,	         EC_NOP,             0},

    {SLIDER_KIND,   216, 155, 156, 11, MSG_INP_KEYDELAY_GAD,     EC_KEYREPEATDELAY, 0},
    {SLIDER_KIND,   216, 171, 156, 11, MSG_INP_KEYRATE_GAD,      EC_KEYREPEATRATE,  0},
    {STRING_KIND,   187, 189, 188, 20, MSG_INP_KEYTEST_GAD,      EC_NOP,            0},

    {LISTVIEW_KIND, 405, 25,  156, 184,MSG_INP_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
};

#define DCSHOW_LEFT   219
#define DCSHOW_TOP    76
#define DCSHOW_WIDTH  155
#define DCSHOW_HEIGHT 20


/*****************************************************************************/


BOOL CreateDisplay(EdDataPtr ed)
{
UWORD zoomSize[4];

    BuildList(ed,&ed->ed_AvailKeymaps,"~(#?.info)",0);

    zoomSize[0] = -1;
    zoomSize[1] = -1;
    zoomSize[2] = ZOOMWIDTH;
    zoomSize[3] = ed->ed_Screen->WBorTop + ed->ed_Screen->Font->ta_YSize + 1;

    ed->ed_LastAdded = CreateContext(&ed->ed_Gadgets);
    DoPrefsGadget(ed,&EG[0],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[1],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[2],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[6],NULL,TAG_DONE);
    DoPrefsGadget(ed,&EG[7],NULL,TAG_DONE);

    ed->ed_DoubleClickTest = DoPrefsGadget(ed,&EG[8],NULL,GTTX_Border,TRUE,
							  TAG_DONE);

    ed->ed_KeyTest = DoPrefsGadget(ed,&EG[11],NULL,GTST_MaxChars,100,
                                                   TAG_DONE);

    RenderGadgets(ed);

    if ((ed->ed_LastAdded)
    &&  (ed->ed_Menus = CreatePrefsMenus(ed,EM))
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_InnerWidth,  NW_WIDTH,
                                            WA_InnerHeight, NW_HEIGHT,
                                            WA_MinWidth,    NW_MINWIDTH,
                                            WA_MinHeight,   NW_MINHEIGHT,
                                            WA_MaxWidth,    NW_MAXWIDTH,
                                            WA_MaxHeight,   NW_MAXHEIGHT,
                                            WA_IDCMP,       NW_IDCMP,
                                            WA_Flags,       NW_FLAGS,
                                            WA_Zoom,        zoomSize,
                                            WA_AutoAdjust,  TRUE,
                                            WA_PubScreen,   ed->ed_Screen,
                                            WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_INP_NAME),
                                            WA_NewLookMenus,TRUE,
                                            WA_Gadgets,     ed->ed_Gadgets,
                                            TAG_DONE)))
    {
        return(TRUE);
    }

    DisposeDisplay(ed);
    return(FALSE);
}


/*****************************************************************************/


VOID DisposeDisplay(EdDataPtr ed)
{
    if (ed->ed_Window)
    {
        ClearMenuStrip(ed->ed_Window);
        CloseWindow(ed->ed_Window);
    }
    FreeMenus(ed->ed_Menus);
    FreeGadgets(ed->ed_Gadgets);
}


/*****************************************************************************/


VOID CenterLine(EdDataPtr ed, struct RastPort *rp, AppStringsID id,
                UWORD x, UWORD y, UWORD w)
{
STRPTR str;
UWORD  len;

    str = GetString(&ed->ed_LocaleInfo,id);
    len = strlen(str);

    Move(rp,(w-TextLength(rp,str,len)) / 2 + window->BorderLeft + x,
            window->BorderTop+y);
    Text(rp,str,len);
}


/*****************************************************************************/


VOID DrawBB(EdDataPtr ed, SHORT x, SHORT y,
                                     SHORT w, SHORT h, ULONG tags, ...)
{
    DrawBevelBoxA(ed->ed_Window->RPort,x+ed->ed_Window->BorderLeft,
                                       y+ed->ed_Window->BorderTop,
                                       w,h,(struct TagItem *)&tags);
}


/*****************************************************************************/


VOID RenderDisplay(EdDataPtr ed)
{
struct RastPort *rp;

    DrawBB(ed,DCSHOW_LEFT,DCSHOW_TOP,DCSHOW_WIDTH,DCSHOW_HEIGHT,
              GT_VisualInfo, ed->ed_VisualInfo,
              GTBB_Recessed, TRUE,
              TAG_DONE);

    rp = ed->ed_Window->RPort;
    SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
    SetBPen(rp,ed->ed_DrawInfo->dri_Pens[BACKGROUNDPEN]);

    CenterLine(ed,rp,MSG_INP_MOUSE_HDR,8,20,362);
    CenterLine(ed,rp,MSG_INP_KEYBOARD_HDR,20,138,362);
}


/*****************************************************************************/


VOID SetInputPrefs(EdDataPtr ed, struct InputPrefs *ip)
{
struct Preferences prefs;

    GetPrefs(&prefs,sizeof(struct Preferences));

    prefs.PointerTicks = ip->ip_PointerTicks;
    prefs.DoubleClick  = ip->ip_DoubleClick;
    prefs.KeyRptDelay  = ip->ip_KeyRptDelay;
    prefs.KeyRptSpeed  = ip->ip_KeyRptSpeed;

    prefs.EnableCLI    &= (~MOUSE_ACCEL);
    if (ip->ip_MouseAccel)
        prefs.EnableCLI |= MOUSE_ACCEL;

    SetPrefs(&prefs,sizeof(struct Preferences),FALSE);
}


/*****************************************************************************/


struct Node *FindNameNC(EdDataPtr ed, struct List *list, STRPTR name)
{
struct Node *node;
WORD         result;

    node = list->lh_Head;
    while (node->ln_Succ)
    {
        result = Stricmp(name,node->ln_Name);
        if (result == 0)
            return(node);

	node = node->ln_Succ;
    }

    return(NULL);
}


/*****************************************************************************/


struct KeyMapNode *GetKeyMap(EdDataPtr ed, STRPTR name)
{
char                   fileName[100];
BPTR                   segment;
struct KeyMapResource *kr;
struct KeyMapNode     *kn;

    if (!name[0])
        return(NULL);

    if (!(kr = (struct KeyMapResource *)OpenResource("keymap.resource")))
        return(FALSE);

    Forbid();
    kn = (struct KeyMapNode *)FindNameNC(ed,&kr->kr_List,name);
    Permit();

    if (!kn)
    {
        strcpy(fileName,"KEYMAPS:");
        AddPart(fileName,name,100);

        if (segment = LoadSeg(fileName))
        {
            kn = (struct KeyMapNode *)((segment << 2) + sizeof(BPTR));
            kn->kn_Node.ln_Succ = NULL;

            if (!TypeOfMem(kn->kn_Node.ln_Name) || (Stricmp(name,kn->kn_Node.ln_Name) != 0))
            {
                UnLoadSeg(segment);
                return(NULL);
            }
        }
    }

    return(kn);
}


/*****************************************************************************/


VOID FreeKeyMap(EdDataPtr ed, struct KeyMapNode *kn)
{
    if (kn && (!kn->kn_Node.ln_Succ))
        UnLoadSeg( (BPTR) (((ULONG)kn - sizeof(BPTR)) >> 2) );
}


/*****************************************************************************/


VOID RenderGadgets(EdDataPtr ed)
{
ULONG           ticks;
UWORD           i;
struct KeyNode *node;
struct KeyMap  *km;

    ticks = 4-ed->ed_PrefsWork.ip_PointerTicks;
    if (ticks == 0)
        ticks = 1;

    ed->ed_MouseSpeed = DoPrefsGadget(ed,&EG[3],ed->ed_MouseSpeed,
                                                GTSL_Level,       ticks,
                                                GTSL_Min,         1,
                                                GTSL_Max,         3,
                                                GTSL_MaxLevelLen, 4,
                                                GTSL_LevelFormat, "%4lu",
                                                GA_RelVerify,     TRUE,
                                                GA_Immediate,     TRUE,
                                                TAG_DONE);

    ed->ed_Acceleration = DoPrefsGadget(ed,&EG[4],ed->ed_Acceleration,
                                                  GTCB_Checked,ed->ed_PrefsWork.ip_MouseAccel,
                                                  TAG_DONE);

    ed->ed_DoubleClick = DoPrefsGadget(ed,&EG[5],ed->ed_DoubleClick,
                                                 GTSL_Level,       ((ed->ed_PrefsWork.ip_DoubleClick.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_DoubleClick.tv_micro / USECS_PER_TICK)),
                                                 GTSL_Min,         1,
                                                 GTSL_Max,         200,
                                                 GTSL_MaxLevelLen, 4,
                                                 GTSL_LevelFormat, "%4lu",
                                                 GA_RelVerify,     TRUE,
                                                 GA_Immediate,     TRUE,
                                                 TAG_DONE);

    ed->ed_KeyDelay = DoPrefsGadget(ed,&EG[9],ed->ed_KeyDelay,
                                              GTSL_Level,       ((ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptDelay.tv_micro / USECS_PER_TICK)),
                                              GTSL_Min,         1,
                                              GTSL_Max,         75,
                                              GTSL_MaxLevelLen, 4,
                                              GTSL_LevelFormat, "%4lu",
                                              GA_RelVerify,     TRUE,
                                              GA_Immediate,     TRUE,
                                              TAG_DONE);

    ed->ed_KeyRate = DoPrefsGadget(ed,&EG[10],ed->ed_KeyRate,
                                              GTSL_Level,125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
				              GTSL_Min,         1,
                                              GTSL_Max,         125,
                                              GTSL_MaxLevelLen, 4,
                                              GTSL_LevelFormat, "%4lu",
                                              GA_RelVerify,     TRUE,
                                              GA_Immediate,     TRUE,
                                              TAG_DONE);

    i    = 0;
    node = (struct KeyNode *)ed->ed_AvailKeymaps.lh_Head;
    while (node->kn_Node.ln_Succ)
    {
        if (Stricmp(ed->ed_PrefsWork.ip_Keymap,node->kn_RealName) == 0)
            break;
        i++;
        node = (struct KeyNode *)node->kn_Node.ln_Succ;
    }

    if (!node->kn_Node.ln_Succ)
    {
        node = (struct KeyNode *)ed->ed_AvailKeymaps.lh_Head;
        i = 0;
    }

    ed->ed_KeyboardType = DoPrefsGadget(ed,&EG[12],ed->ed_KeyboardType,
                                                   GTLV_Labels,       &ed->ed_AvailKeymaps,
                                                   GTLV_Selected,     i,
                                                   GTLV_MakeVisible,  i,
                                                   GTLV_ShowSelected, NULL,
                                                   LAYOUTA_SPACING,   4,
                                                   GTLV_ScrollWidth,  18,
                                                   TAG_DONE);

    SetInputPrefs(ed,&ed->ed_PrefsWork);

    if (!(ed->ed_Keymap = GetKeyMap(ed,node->kn_RealName)))
    {
        ShowError1(ed,MSG_INP_ERROR_NO_KEYMAP);
    }
    else
    {
        km = &ed->ed_Keymap->kn_KeyMap;
        ((struct StringInfo *)ed->ed_KeyTest->SpecialInfo)->AltKeyMap = km;
        ed->ed_KeyTest->Activation |= GACT_ALTKEYMAP;
    }
    strcpy(ed->ed_PrefsWork.ip_Keymap,node->kn_RealName);
}


/*****************************************************************************/


VOID ProcessSpecialCommand(EdDataPtr ed, EdCommand ec)
{
UWORD            icode;
struct RastPort *rp;
BOOL             setprefs;
BOOL             actstr;
struct KeyNode  *node;
struct KeyMap   *km;
struct Gadget   *gadget;

    if (ed->ed_CurrentMsg.Class == IDCMP_MOUSEMOVE)
        return;                         

    icode     = ed->ed_CurrentMsg.Code;
    rp        = window->RPort;
    gadget    = ed->ed_CurrentMsg.IAddress;
    setprefs  = FALSE;
    actstr    = FALSE;

    switch (ec)
    {
        case EC_MOUSESPEED     : icode = 4-icode;
                                 if (icode == 3)
                                     icode = 4;
                                 ed->ed_PrefsWork.ip_PointerTicks = icode;
                                 setprefs = TRUE;
                                 break;

        case EC_ACCELERATION   : ed->ed_PrefsWork.ip_MouseAccel = (SELECTED & gadget->Flags);
                                 setprefs = TRUE;
                                 break;

        case EC_DOUBLECLICK    : ed->ed_PrefsWork.ip_DoubleClick.tv_secs  = icode / TICKS_PER_SEC;
		                 ed->ed_PrefsWork.ip_DoubleClick.tv_micro = (icode % TICKS_PER_SEC) * USECS_PER_TICK;
		                 setprefs = TRUE;
                                 break;

        case EC_SHOWDOUBLECLICK: if (!ed->ed_SampleClick)
                                 {
                                     SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
                                     RectFill(rp,DCSHOW_LEFT+8,
                                                 DCSHOW_TOP+window->BorderTop+2,
                                                 DCSHOW_LEFT+DCSHOW_WIDTH-1,
                                                 DCSHOW_TOP+DCSHOW_HEIGHT+window->BorderTop-3);
                                     ed->ed_SampleClick   = TRUE;
                                     ed->ed_SampleSeconds = ed->ed_CurrentMsg.Seconds;
                                     ed->ed_SampleMicros  = ed->ed_CurrentMsg.Micros;
                                 }
                                 break;

        case EC_TESTDOUBLECLICK: if (ed->ed_FirstClick)
        			 {
        			     if (!ed->ed_IntuiCounter)
        			     {
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_INP_CLICKAGAIN),
                                                                                 TAG_DONE);
                                         ed->ed_ClickSeconds = ed->ed_CurrentMsg.Seconds;
                                         ed->ed_ClickMicros  = ed->ed_CurrentMsg.Micros;
                                         ed->ed_IntuiCounter = 30;
                                     }
        			 }
        			 else
                                 {
                                     if (DoubleClick(ed->ed_ClickSeconds,ed->ed_ClickMicros,
                                                     ed->ed_CurrentMsg.Seconds,ed->ed_CurrentMsg.Micros))
                                     {
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_INP_DCYES),
                                                                                 TAG_DONE);
                                     }
                                     else
                                     {
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_INP_DCNO),
                                                                                 TAG_DONE);
                                     }
                                     ed->ed_IntuiCounter = 10;
                                 }
        			 ed->ed_FirstClick = !ed->ed_FirstClick;
				 break;

        case EC_KEYREPEATDELAY : ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs  = icode / TICKS_PER_SEC;
		                 ed->ed_PrefsWork.ip_KeyRptDelay.tv_micro = (icode % TICKS_PER_SEC) * USECS_PER_TICK;
		                 setprefs = TRUE;
		                 actstr   = TRUE;
                                 break;

        case EC_KEYREPEATRATE  : icode = 125-icode;
				 ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs  = icode / KSUS_PER_SEC;
		                 ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro = (icode % KSUS_PER_SEC) * USECS_PER_KSU;
		                 setprefs = TRUE;
		                 actstr   = TRUE;
                                 break;

        case EC_KEYBOARDTYPE   : ed->ed_KeyTest->Activation &= (~GACT_ALTKEYMAP);
                                 ((struct StringInfo *)ed->ed_KeyTest->SpecialInfo)->AltKeyMap = NULL;

                                 node = (struct KeyNode *)ed->ed_AvailKeymaps.lh_Head;
                                 while (icode--)
                                 {
                                     node = (struct KeyNode *)node->kn_Node.ln_Succ;
                                 }
                                 FreeKeyMap(ed,ed->ed_Keymap);

                                 if (!(ed->ed_Keymap = GetKeyMap(ed,node->kn_RealName)))
                                 {
                                     ShowError1(ed,MSG_INP_ERROR_NO_KEYMAP);
                                 }
                                 else
                                 {
                                     km = &ed->ed_Keymap->kn_KeyMap;
                                     ((struct StringInfo *)ed->ed_KeyTest->SpecialInfo)->AltKeyMap = km;
                                     ed->ed_KeyTest->Activation |= GACT_ALTKEYMAP;
                                 }
                                 strcpy(ed->ed_PrefsWork.ip_Keymap,node->kn_RealName);
                                 actstr = TRUE;
                                 break;

        case EC_TIMER          : if (ed->ed_IntuiCounter)
                                 {
                                     if (!--ed->ed_IntuiCounter)
                                     {
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,NULL,
                                                                                 TAG_DONE);
                                         ed->ed_FirstClick = TRUE;
                                     }
                                 }

                                 if (ed->ed_SampleClick)
                                 {
                                     if (!DoubleClick(ed->ed_SampleSeconds,ed->ed_SampleMicros,
                                                      ed->ed_CurrentMsg.Seconds,ed->ed_CurrentMsg.Micros))
                                     {
                                         SetAPen(rp,0);
                                         RectFill(rp,DCSHOW_LEFT+8,
                                                     DCSHOW_TOP+window->BorderTop+2,
                                                     DCSHOW_LEFT+DCSHOW_WIDTH-1,
                                                     DCSHOW_TOP+DCSHOW_HEIGHT+window->BorderTop-3);
                                         ed->ed_SampleClick = FALSE;
                                     }
                                 }
                                 break;

        default                : break;
    }

    if (setprefs)
        SetInputPrefs(ed,&ed->ed_PrefsWork);

    if (actstr)
    {
        SetGadgetAttr(ed,ed->ed_KeyTest,GTST_String,NULL,
                                        TAG_DONE);
	ActivateGadget(ed->ed_KeyTest,window,NULL);
    }
}


/*****************************************************************************/


EdCommand GetCommand(EdDataPtr ed)
{
    if (ed->ed_CurrentMsg.Class == IDCMP_INTUITICKS)
        return(EC_TIMER);

    return(EC_NOP);
}


/*****************************************************************************/


VOID GetSpecialCmdState(EdDataPtr ed, EdCommand ec, CmdStatePtr state)
{
    state->cs_Available = TRUE;
    state->cs_Selected  = FALSE;
}
@


38.29
log
@ADDED JAPAN SUPPORT
@
text
@d341 1
a341 1
#define NW_WIDTH     556
d372 2
a373 2
    {BUTTON_KIND,   234, 230, 87,  20, MSG_USE_GAD,          EC_USE,             0},
    {BUTTON_KIND,   461, 230, 87,  20, MSG_CANCEL_GAD,       EC_CANCEL,          0},
d375 1
a375 1
    {SLIDER_KIND,   216, 24,  156, 11, MSG_INP_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
d377 1
a377 1
    {SLIDER_KIND,   216, 58,  156, 11, MSG_INP_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
d386 1
a386 1
    {LISTVIEW_KIND, 382, 25,  164, 184,MSG_INP_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
@


38.28
log
@Add Japan Support
@
text
@d342 1
a342 1
#define NW_HEIGHT    215
d371 3
a373 3
    {BUTTON_KIND,   8,   195, 87,  20, MSG_SAVE_GAD,         EC_SAVE,            0},
    {BUTTON_KIND,   234, 195, 87,  20, MSG_USE_GAD,          EC_USE,             0},
    {BUTTON_KIND,   461, 195, 87,  20, MSG_CANCEL_GAD,       EC_CANCEL,          0},
d375 10
a384 10
    {SLIDER_KIND,   216, 20,  156, 11, MSG_INP_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
    {CHECKBOX_KIND, 216, 34,  12,  14, MSG_INP_ACCELERATION_GAD, EC_ACCELERATION,    0},
    {SLIDER_KIND,   216, 56,  156, 11, MSG_INP_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
    {BUTTON_KIND,   10,  73,  207, 20, MSG_INP_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   10,  95,  207, 20, MSG_INP_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
    {TEXT_KIND,     219, 95,  155, 20, MSG_NOTHING,	         EC_NOP,             0},

    {SLIDER_KIND,   216, 140, 156, 11, MSG_INP_KEYDELAY_GAD,     EC_KEYREPEATDELAY, 0},
    {SLIDER_KIND,   216, 156, 156, 11, MSG_INP_KEYRATE_GAD,      EC_KEYREPEATRATE,  0},
    {STRING_KIND,   187, 170, 188, 20, MSG_INP_KEYTEST_GAD,      EC_NOP,            0},
d386 1
a386 1
    {LISTVIEW_KIND, 382, 25,  166, 137, MSG_INP_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
d390 1
a390 1
#define DCSHOW_TOP    73
d511 2
a512 2
    CenterLine(ed,rp,MSG_INP_MOUSE_HDR,8,16,362);
    CenterLine(ed,rp,MSG_INP_KEYBOARD_HDR,20,132,362);
d725 1
a725 1
        return;
@


38.27
log
@Added GTLV_MakeVisible tag
@
text
@d342 1
a342 1
#define NW_HEIGHT    179
d371 3
a373 3
    {BUTTON_KIND,   8,   162, 87,  14, MSG_SAVE_GAD,         EC_SAVE,            0},
    {BUTTON_KIND,   234, 162, 87,  14, MSG_USE_GAD,          EC_USE,             0},
    {BUTTON_KIND,   461, 162, 87,  14, MSG_CANCEL_GAD,       EC_CANCEL,          0},
d375 10
a384 10
    {SLIDER_KIND,   216, 16,  156, 11, MSG_INP_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
    {CHECKBOX_KIND, 216, 29,  12,  14, MSG_INP_ACCELERATION_GAD, EC_ACCELERATION,    0},
    {SLIDER_KIND,   216, 42,  156, 11, MSG_INP_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
    {BUTTON_KIND,   10,  58,  207, 14, MSG_INP_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   10,  74,  207, 14, MSG_INP_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
    {TEXT_KIND,     217, 74,  155, 14, MSG_NOTHING,	         EC_NOP,             0},

    {SLIDER_KIND,   216, 112, 156, 11, MSG_INP_KEYDELAY_GAD,     EC_KEYREPEATDELAY, 0},
    {SLIDER_KIND,   216, 125, 156, 11, MSG_INP_KEYRATE_GAD,      EC_KEYREPEATRATE,  0},
    {STRING_KIND,   184, 138, 188, 14, MSG_INP_KEYTEST_GAD,      EC_NOP,            0},
d386 1
a386 1
    {LISTVIEW_KIND, 382, 16,  166, 137, MSG_INP_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
d389 2
a390 2
#define DCSHOW_LEFT   217
#define DCSHOW_TOP    58
d392 1
a392 1
#define DCSHOW_HEIGHT 14
d511 2
a512 2
    CenterLine(ed,rp,MSG_INP_MOUSE_HDR,8,10,362);
    CenterLine(ed,rp,MSG_INP_KEYBOARD_HDR,8,107,362);
d691 1
a691 1
                                                   LAYOUTA_SPACING,   1,
@


38.26
log
@Added support for async "show double-click"
@
text
@d689 1
@


38.25
log
@Selecting "Reset to Defaults" updates the keymap in the sample string gadget
@
text
@a721 2
BOOL             bool;
struct Requester req;
d750 11
a760 18
        case EC_SHOWDOUBLECLICK: InitRequester(&req);
        			 bool = Request(&req,window);

				 SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
                                 RectFill(rp,DCSHOW_LEFT+8,
                                             DCSHOW_TOP+window->BorderTop+2,
                                             DCSHOW_LEFT+DCSHOW_WIDTH-1,
                                             DCSHOW_TOP+DCSHOW_HEIGHT+window->BorderTop-3);
                                 Delay((ed->ed_PrefsWork.ip_DoubleClick.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_DoubleClick.tv_micro / USECS_PER_TICK));
                                 SetAPen(rp,0);
                                 RectFill(rp,DCSHOW_LEFT+8,
                                             DCSHOW_TOP+window->BorderTop+2,
                                             DCSHOW_LEFT+DCSHOW_WIDTH-1,
                                             DCSHOW_TOP+DCSHOW_HEIGHT+window->BorderTop-3);

                                 if (bool)
                                     EndRequest(&req,window);

d836 14
@


38.24
log
@Now puts up a requester when showing the double-click sample. Should also have
  a busy pointer, but that'll wait for 3.0
@
text
@d620 1
d661 1
a661 3
                                              GTSL_Level,
125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC)
+ (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
d681 2
d684 1
d695 12
@


38.23
log
@Removed WA_Left and WA_Top
@
text
@d708 2
d738 4
a741 1
        case EC_SHOWDOUBLECLICK: SetAPen(rp,ed->ed_DrawInfo->dri_Pens[HIGHLIGHTTEXTPEN]);
d752 4
@


38.22
log
@No longer uses AllocRemember() to track the list of keymaps
Now scans the keymap list using a case-insensitive search
Does minimal checking of a selected keymap before using it
@
text
@a340 2
#define NW_LEFT      0
#define NW_TOP       0
d404 2
a405 2
    zoomSize[0] = NW_LEFT;
    zoomSize[1] = NW_TOP;
d426 1
a426 3
    &&  (ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                            WA_Top,         NW_TOP,
                                            WA_InnerWidth,  NW_WIDTH,
@


38.21
log
@*** empty log message ***
@
text
@d133 1
a133 1
    if (new = AllocRemember(&ed->ed_Tracker,sizeof(struct KeyNode)+len+1,MEMF_PUBLIC|MEMF_CLEAR))
d188 1
a188 1
                                if (new = AllocRemember(&ed->ed_Tracker,sizeof(struct KeyNode)+len+1,MEMF_PUBLIC|MEMF_CLEAR))
d265 2
d268 1
d271 3
a273 1
    FreeRemember(&ed->ed_Tracker,TRUE);
d545 22
d581 1
a581 1
    kn = (struct KeyMapNode *)FindName(&kr->kr_List,name);
d593 6
@


38.20
log
@Changed "Svenska" to "Svenskt"
@
text
@d103 1
a103 1
     "po",   "Portugues",
@


38.19
log
@Added "usa3" to the list of known keymaps
@
text
@d104 1
a104 1
     "s",    "Svenska",
@


38.18
log
@Improved behavior of "Test Double Click" gadget
@
text
@d107 1
@


38.17
log
@Now looks in KEYMAPS: instead of KEYBOARDS:
@
text
@d721 8
a728 5
        			     SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_INP_CLICKAGAIN),
                                                                             TAG_DONE);
                                     ed->ed_ClickSeconds = ed->ed_CurrentMsg.Seconds;
                                     ed->ed_ClickMicros  = ed->ed_CurrentMsg.Micros;
                                     ed->ed_IntuiCounter = 0;
d786 1
d788 1
d791 3
@


38.16
log
@Changes for new prefs shell
@
text
@d147 1
a147 1
        dvp = (struct DevProc *) GetDeviceProc("KEYBOARDS:",0);
d218 1
a218 1
            dvp = GetDeviceProc("KEYBOARDS:",dvp);
d558 1
a558 1
        strcpy(fileName,"KEYBOARDS:");
@


38.15
log
@*** empty log message ***
@
text
@a83 8
VOID ProcessArgs(EdDataPtr ed, struct DiskObject *diskObj)
{
}


/*****************************************************************************/


a662 8
}


/*****************************************************************************/


VOID SyncTextGadgets(EdDataPtr ed)
{
@


38.14
log
@Fixed reading of key repeat rate gadget
@
text
@a664 1
                                                   GTLV_Top,          i,
@


38.13
log
@Now scans the assign list for KEYBOARDS:
@
text
@d109 1
a109 1
     "i",    "Italiano",
d638 3
a640 1
                                              GTSL_Level,       125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
d665 1
d769 2
a770 2
				 ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs  = icode / TICKS_PER_SEC;
		                 ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro = (icode % TICKS_PER_SEC) * USECS_PER_TICK;
@


38.12
log
@Now looks in KEYBOARDS: for keymaps
@
text
@d119 1
a119 2
EdStatus BuildList(EdDataPtr ed, struct List *list, STRPTR directory,
		   STRPTR pattern, WORD strip)
d125 1
d135 1
d155 2
a156 1
        if (lock = Lock(directory,ACCESS_READ))
d158 2
a159 2
            ok = TRUE;
            do
d161 4
a164 2
                more = ExAll(lock,(struct ExAllData *)exAllBuffer,sizeof(exAllBuffer),ED_TYPE,eac);
                if ((!more) && (IoErr() != ERROR_NO_MORE_ENTRIES))
d166 6
a171 3
                    ok = FALSE;
                    break;
                }
d173 1
a173 4
                if (eac->eac_Entries > 0)
                {
                    ead = (struct ExAllData *) exAllBuffer;
                    do
d175 2
a176 1
                        if (ead->ed_Type < 0)
d178 16
a193 2
		            name = (STRPTR)ead->ed_Name;
		    	    len  = strlen(name) - strip;
d195 5
a199 17
			    i = 0;
			    while (stupidKludge[i])
			    {
			        if (Strnicmp(name,stupidKludge[i],len) == 0)
			        {
			            name = stupidKludge[i+1];
			            len = strlen(name);
			            break;
			        }
			        i = i + 2;
			    }

			    if (new = AllocRemember(&ed->ed_Tracker,sizeof(struct KeyNode)+len+1,MEMF_PUBLIC|MEMF_CLEAR))
		            {
		                CopyMem((STRPTR)ead->ed_Name,new->kn_RealName,15);
			        new->kn_Node.ln_Name = (STRPTR)((ULONG)new + sizeof(struct KeyNode));
                                CopyMem(name,new->kn_Node.ln_Name,len);
d201 10
a210 2
                                node = (struct KeyNode *)list->lh_Head;
                                while (node->kn_Node.ln_Succ)
d212 2
a213 3
                                    if (Stricmp(node->kn_Node.ln_Name,new->kn_Node.ln_Name) >= 0)
                                        break;
                                    node = (struct KeyNode *)node->kn_Node.ln_Succ;
a214 6
                                Insert(list,new,node->kn_Node.ln_Pred);
			    }
                            else
                            {
                                nomem = TRUE;
                                break;
d216 1
d218 1
a218 1
                        ead = ead->ed_Next;
a219 1
                    while (ead);
d221 4
d226 1
a226 3
            while (more);

            UnLock(lock);
d406 1
a406 1
    BuildList(ed,&ed->ed_AvailKeymaps,"KEYBOARDS:","~(#?.info)",0);
@


38.11
log
@Changes for new pe_iff
Added SyncTextGadgets() support
@
text
@d396 1
a396 1
    BuildList(ed,&ed->ed_AvailKeymaps,"DEVS:Keymaps","~(#?.info)",0);
d556 1
a556 1
        strcpy(fileName,"DEVS:keymaps/");
@


38.10
log
@Added SyncTextGadgets() support
@
text
@a402 5
    if (!(ed->ed_Menus = CreatePrefsMenus(ed,EM)))
    {
	return(FALSE);
    }

d418 19
a436 23
    if (!ed->ed_LastAdded)
    {
        DisposeDisplay(ed);
        return(FALSE);
    }

    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_INP_NAME),
                                             WA_NewLookMenus,TRUE,
                                             WA_Gadgets,     ed->ed_Gadgets,
                                             TAG_DONE)))
d438 1
a438 2
        DisposeDisplay(ed);
	return(FALSE);
d441 2
a442 1
    return(TRUE);
@


38.9
log
@Simple changes needed for new pe_iff.h
@
text
@d673 3
@


38.8
log
@Smaller/faster alphebetic insertion loop
@
text
@d58 26
d111 1
d286 1
a286 1
    return(ReadIFF(ed,name,ReadPrefs));
d306 1
a306 1
    return(WriteIFF(ed,name,WritePrefs));
d372 3
a374 3
    {BUTTON_KIND,   10,  58,  210, 14, MSG_INP_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   10,  74,  210, 14, MSG_INP_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
    {TEXT_KIND,     220, 74,  152, 14, MSG_NOTHING,	         EC_NOP,             0},
d380 1
a380 1
    {LISTVIEW_KIND, 384, 16,  164, 137, MSG_INP_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
d383 1
a383 1
#define DCSHOW_LEFT   220
d385 1
a385 1
#define DCSHOW_WIDTH  152
d508 2
a509 2
              GT_VisualInfo,ed->ed_VisualInfo,
              GTBB_Recessed,TRUE,
@


38.7
log
@Now uses DoPrefsGadget instead of CreatePrefsGadget for better look upon window
  opening
@
text
@d105 1
a105 2
struct KeyNode      *current;
struct KeyNode      *previous;
d167 8
a174 16
                        	current  = (struct KeyNode *)list->lh_Head;
                        	previous = (struct KeyNode *)list;

                        	while (current->kn_Node.ln_Succ)
                        	{
                            	    if (Stricmp(current->kn_Node.ln_Name,new->kn_Node.ln_Name) > 0)
                                    {
                                	Insert(list,new,previous);
                                	break;
	                            }
        	                    previous = current;
                	            current  = (struct KeyNode *)current->kn_Node.ln_Succ;
                        	}

		        	if (!current->kn_Node.ln_Succ)
		            	    AddTail(list,new);
@


38.6
log
@Now uses WA_Gadgets to add the gadgets to the window
@
text
@d391 11
a401 3
    CreatePrefsGadget(ed,&EG[0],TAG_DONE);
    CreatePrefsGadget(ed,&EG[1],TAG_DONE);
    CreatePrefsGadget(ed,&EG[2],TAG_DONE);
d403 1
a403 52
    ed->ed_MouseSpeed   = CreatePrefsGadget(ed,&EG[3],GTSL_Min,         1,
                                                      GTSL_Max,         3,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       ed->ed_PrefsWork.ip_PointerTicks,
                                                      GA_RelVerify,     TRUE,
                                                      GA_Immediate,     TRUE,
                                                      TAG_DONE);

    ed->ed_Acceleration = CreatePrefsGadget(ed,&EG[4],TAG_DONE);

    ed->ed_DoubleClick  = CreatePrefsGadget(ed,&EG[5],GTSL_Min,1,
                                                      GTSL_Max,200,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       ((ed->ed_PrefsWork.ip_DoubleClick.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_DoubleClick.tv_micro / USECS_PER_TICK)),
                                                      GA_RelVerify,     TRUE,
                                                      GA_Immediate,     TRUE,
                                                      TAG_DONE);

    CreatePrefsGadget(ed,&EG[6],TAG_DONE);
    CreatePrefsGadget(ed,&EG[7],TAG_DONE);

    ed->ed_DoubleClickTest = CreatePrefsGadget(ed,&EG[8],GTTX_Border,TRUE,
							 TAG_DONE);

    ed->ed_KeyDelay     = CreatePrefsGadget(ed,&EG[9],GTSL_Min,         1,
                                                      GTSL_Max,         75,
                                                      GTSL_MaxLevelLen, 4,
                                                      GTSL_LevelFormat, "%4lu",
                                                      GTSL_Level,       ((ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptDelay.tv_micro / USECS_PER_TICK)),
                                                      GA_RelVerify,     TRUE,
                                                      GA_Immediate,     TRUE,
                                                      TAG_DONE);

    ed->ed_KeyRate      = CreatePrefsGadget(ed,&EG[10],GTSL_Min,         1,
                                                       GTSL_Max,         125,
                                                       GTSL_MaxLevelLen, 4,
                                                       GTSL_LevelFormat, "%4lu",
                                                       GTSL_Level,       125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
                                                       GA_RelVerify,     TRUE,
                                                       GA_Immediate,     TRUE,
                                                       TAG_DONE);

    ed->ed_KeyTest      = CreatePrefsGadget(ed,&EG[11],GTST_MaxChars,100,
                                                       TAG_DONE);

    ed->ed_KeyboardType = CreatePrefsGadget(ed,&EG[12],GTLV_Labels,       &ed->ed_AvailKeymaps,
                                                       GTLV_ShowSelected, NULL,
                                                       LAYOUTA_SPACING,   1,
                                                       GTLV_ScrollWidth,  18,
                                                       TAG_DONE);
d473 12
d489 4
a492 4
    DrawPrefsBevelBox(ed,DCSHOW_LEFT,DCSHOW_TOP,DCSHOW_WIDTH,DCSHOW_HEIGHT,
                         GT_VisualInfo,ed->ed_VisualInfo,
                         GTBB_Recessed,TRUE,
                         TAG_DONE);
d584 23
a606 2
    SetGadgetAttr(ed,ed->ed_MouseSpeed,GTSL_Level,ticks,
				       TAG_DONE);
d608 19
a626 8
    SetGadgetAttr(ed,ed->ed_Acceleration,GTCB_Checked,ed->ed_PrefsWork.ip_MouseAccel,
				         TAG_DONE);

    SetGadgetAttr(ed,ed->ed_DoubleClick,GTSL_Level,((ed->ed_PrefsWork.ip_DoubleClick.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_DoubleClick.tv_micro / USECS_PER_TICK)),
				        TAG_DONE);

    SetGadgetAttr(ed,ed->ed_KeyDelay,GTSL_Level,((ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptDelay.tv_micro / USECS_PER_TICK)),
				     TAG_DONE);
a627 3
    SetGadgetAttr(ed,ed->ed_KeyRate,GTSL_Level,125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
				    TAG_DONE);

a632 4
        {
            SetGadgetAttr(ed,ed->ed_KeyboardType,GTLV_Labels, &ed->ed_AvailKeymaps,
                                                 GTLV_Selected, i,
                                                 TAG_DONE);
a633 1
        }
d637 11
@


38.5
log
@Changes for new prefs shell
Added GTLV_ScrollWidth and LAYOUTA_SPACING to improve look of list view
@
text
@a389 21
    if (!(ed->ed_Window = OpenPrefsWindow(ed,WA_Left,        NW_LEFT,
                                             WA_Top,         NW_TOP,
                                             WA_InnerWidth,  NW_WIDTH,
                                             WA_InnerHeight, NW_HEIGHT,
                                             WA_MinWidth,    NW_MINWIDTH,
                                             WA_MinHeight,   NW_MINHEIGHT,
                                             WA_MaxWidth,    NW_MAXWIDTH,
                                             WA_MaxHeight,   NW_MAXHEIGHT,
                                             WA_IDCMP,       NW_IDCMP,
                                             WA_Flags,       NW_FLAGS,
                                             WA_Zoom,        zoomSize,
                                             WA_AutoAdjust,  TRUE,
                                             WA_PubScreen,   ed->ed_Screen,
                                             WA_Title,       GetString(&ed->ed_LocaleInfo,MSG_INP_NAME),
                                             WA_NewLookMenus,TRUE,
                                             TAG_DONE)))
    {
        FreeMenus(ed->ed_Menus);
	return(FALSE);
    }

d395 7
a401 7
    ed->ed_MouseSpeed   = CreatePrefsGadget(ed,&EG[3],GTSL_Min,1,
                                                      GTSL_Max,3,
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,ed->ed_PrefsWork.ip_PointerTicks,
                                                      GA_RelVerify,TRUE,
                                                      GA_Immediate,TRUE,
d408 5
a412 5
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,((ed->ed_PrefsWork.ip_DoubleClick.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_DoubleClick.tv_micro / USECS_PER_TICK)),
                                                      GA_RelVerify,TRUE,
                                                      GA_Immediate,TRUE,
d421 7
a427 7
    ed->ed_KeyDelay     = CreatePrefsGadget(ed,&EG[9],GTSL_Min,1,
                                                      GTSL_Max,75,
                                                      GTSL_MaxLevelLen,4,
                                                      GTSL_LevelFormat,"%4lu",
                                                      GTSL_Level,((ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs * TICKS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptDelay.tv_micro / USECS_PER_TICK)),
                                                      GA_RelVerify,TRUE,
                                                      GA_Immediate,TRUE,
d430 7
a436 7
    ed->ed_KeyRate      = CreatePrefsGadget(ed,&EG[10],GTSL_Min,1,
                                                       GTSL_Max,125,
                                                       GTSL_MaxLevelLen,4,
                                                       GTSL_LevelFormat,"%4lu",
                                                       GTSL_Level,125-((ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs * KSUS_PER_SEC) + (ed->ed_PrefsWork.ip_KeyRptSpeed.tv_micro / USECS_PER_KSU)),
                                                       GA_RelVerify,TRUE,
                                                       GA_Immediate,TRUE,
a447 4
/*
    CreatePrefsGadget(ed,&EG[13],TAG_DONE);
*/

d454 22
d485 5
a489 2
    ClearMenuStrip(ed->ed_Window);
    CloseWindow(ed->ed_Window);
@


38.4
log
@Changes for new pe_strings.c prefs shell module
@
text
@d245 3
a247 1
    SetInputPrefs(ed,&ed->ed_PrefsInitial);
d259 1
a259 1
    if (ReadChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct InputPrefs)) == sizeof(struct InputPrefs))
d266 1
a266 1
EdStatus OpenPrefs(EdDataPtr ed, STRPTR name, APTR destPrefs)
a267 1
    ed->ed_PrefsIO = destPrefs;
d278 1
a278 1
        if (WriteChunkBytes(iff,ed->ed_PrefsIO,sizeof(struct InputPrefs)) == sizeof(struct InputPrefs))
d286 1
a286 1
EdStatus SavePrefs(EdDataPtr ed, STRPTR name, APTR sourPrefs)
a287 1
    ed->ed_PrefsIO = sourPrefs;
d356 1
a356 1
    {TEXT_KIND,     220, 74,  152, 14, MSG_NOTHING,	     EC_NOP,             0},
d465 2
d475 1
a475 3
        CloseWindow(ed->ed_Window);
        FreeMenus(ed->ed_Menus);
        FreeGadgets(ed->ed_Gadgets);
a478 6
    SetFont(ed->ed_Window->RPort,ed->ed_Font);
    SetMenuStrip(ed->ed_Window,ed->ed_Menus);
    AddGList(ed->ed_Window,ed->ed_Gadgets,-1,-1,NULL);
    RefreshGList(ed->ed_Gadgets,ed->ed_Window,NULL,-1);
    GT_RefreshWindow(ed->ed_Window,NULL);

d498 18
a517 2
STRPTR           str;
UWORD            len;
d529 2
a530 13
    str  = GetString(&ed->ed_LocaleInfo,MSG_INP_MOUSE_HDR);
    len  = strlen(str);

    Move(rp,(362-TextLength(rp,str,len)) / 2 + ed->ed_Window->BorderLeft + 8,
            ed->ed_Window->BorderTop+10);
    Text(rp,str,len);

    str  = GetString(&ed->ed_LocaleInfo,MSG_INP_KEYBOARD_HDR);
    len  = strlen(str);

    Move(rp,(362-TextLength(rp,str,len)) / 2 + ed->ed_Window->BorderLeft + 8,
            ed->ed_Window->BorderTop+107);
    Text(rp,str,len);
d573 4
a576 1
    if (!(kn = (struct KeyMapNode *)FindName(&kr->kr_List,name)))
a586 1
    Permit();
a644 1

d660 1
d662 1
a662 1
    if (ed->ed_CurrentMsg->Class == IDCMP_MOUSEMOVE)
d665 1
a665 1
    icode     = ed->ed_CurrentMsg->Code;
d667 1
d680 1
a680 1
        case EC_ACCELERATION   : ed->ed_PrefsWork.ip_MouseAccel = !ed->ed_PrefsWork.ip_MouseAccel;
d684 1
a684 1
        case EC_DOUBLECLICK    : ed->ed_PrefsWork.ip_DoubleClick.tv_secs = icode / TICKS_PER_SEC;
d706 2
a707 2
                                     ed->ed_ClickSeconds = ed->ed_CurrentMsg->Seconds;
                                     ed->ed_ClickMicros  = ed->ed_CurrentMsg->Micros;
d713 1
a713 1
                                                     ed->ed_CurrentMsg->Seconds,ed->ed_CurrentMsg->Micros))
d728 1
a728 1
        case EC_KEYREPEATDELAY : ed->ed_PrefsWork.ip_KeyRptDelay.tv_secs = icode / TICKS_PER_SEC;
d735 1
a735 1
				 ed->ed_PrefsWork.ip_KeyRptSpeed.tv_secs = icode / TICKS_PER_SEC;
d791 1
a791 1
    if (ed->ed_CurrentMsg->Class == IDCMP_INTUITICKS)
a804 3

    if (ec == EC_SAVEICONS)
        state->cs_Selected = ed->ed_SaveIcons;
@


38.3
log
@Changes for new prefs shell
@
text
@d44 1
a44 1
#include "texttable.h"
a232 2

    BuildList(ed,&ed->ed_AvailKeymaps,"DEVS:Keymaps","~(#?.info)",0);
d351 5
a355 5
    {SLIDER_KIND,   216, 16,  156, 11, MSG_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
    {CHECKBOX_KIND, 216, 29,  12,  14, MSG_ACCELERATION_GAD, EC_ACCELERATION,    0},
    {SLIDER_KIND,   216, 42,  156, 11, MSG_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
    {BUTTON_KIND,   10,  58,  210, 14, MSG_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   10,  74,  210, 14, MSG_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
d358 3
a360 3
    {SLIDER_KIND,   216, 112, 156, 11, MSG_KEYDELAY_GAD,     EC_KEYREPEATDELAY, 0},
    {SLIDER_KIND,   216, 125, 156, 11, MSG_KEYRATE_GAD,      EC_KEYREPEATRATE,  0},
    {STRING_KIND,   184, 138, 188, 14, MSG_KEYTEST_GAD,      EC_NOP,            0},
d362 1
a362 1
    {LISTVIEW_KIND, 384, 16,  164, 137, MSG_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
d378 2
d403 1
a403 1
                                             WA_Title,       EDITOR_NAME,
d519 1
a519 1
    str  = GetString(&ed->ed_LocaleInfo,MSG_MOUSE_HDR);
d526 1
a526 1
    str  = GetString(&ed->ed_LocaleInfo,MSG_KEYBOARD_HDR);
d702 1
a702 1
        			     SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_CLICKAGAIN),
d713 1
a713 1
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_DCYES),
d718 1
a718 1
                                         SetGadgetAttr(ed,ed->ed_DoubleClickTest,GTTX_Text,GetString(&ed->ed_LocaleInfo,MSG_DCNO),
d751 1
a751 1
                                     ShowError1(ed,MSG_ERROR_NO_KEYMAP);
@


38.2
log
@Made window a tad larger for easier localization
@
text
@d58 8
a654 1
BOOL             refresh;
a664 1
    refresh   = FALSE;
d772 1
a772 3
    if (refresh)
        RenderGadgets(ed);
    else if (setprefs)
@


38.1
log
@Initial V38 RCS checkin
@
text
@d311 1
a311 1
#define NW_WIDTH     554
d342 2
a343 2
    {BUTTON_KIND,   233, 162, 87,  14, MSG_USE_GAD,          EC_USE,             0},
    {BUTTON_KIND,   459, 162, 87,  14, MSG_CANCEL_GAD,       EC_CANCEL,          0},
d345 10
a354 10
    {SLIDER_KIND,   214, 16,  156, 11, MSG_MOUSESPEED_GAD,   EC_MOUSESPEED,      0},
    {CHECKBOX_KIND, 214, 29,  12,  14, MSG_ACCELERATION_GAD, EC_ACCELERATION,    0},
    {SLIDER_KIND,   214, 42,  156, 11, MSG_DOUBLECLICK_GAD,  EC_DOUBLECLICK,     0},
    {BUTTON_KIND,   8,   58,  210, 14, MSG_SHOW_GAD,         EC_SHOWDOUBLECLICK, 0},
    {BUTTON_KIND,   8,   74,  210, 14, MSG_TEST_GAD,         EC_TESTDOUBLECLICK, 0},
    {TEXT_KIND,     218, 74,  152, 14, MSG_NOTHING,	     EC_NOP,             0},

    {SLIDER_KIND,   214, 112, 156, 11, MSG_KEYDELAY_GAD,     EC_KEYREPEATDELAY, 0},
    {SLIDER_KIND,   214, 125, 156, 11, MSG_KEYRATE_GAD,      EC_KEYREPEATRATE,  0},
    {STRING_KIND,   182, 138, 188, 14, MSG_KEYTEST_GAD,      EC_NOP,            0},
d356 1
a356 1
    {LISTVIEW_KIND, 382, 16,  164, 137, MSG_KEYBOARDTYPE_GAD, EC_KEYBOARDTYPE,   NG_HIGHLABEL}
d359 1
a359 1
#define DCSHOW_LEFT   218
@
