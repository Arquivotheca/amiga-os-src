###############################################################################
#
# lmkfile for console.device
#
###############################################################################

#
# Server directory for the data...
#
VERSION= 40
RELVERSION= 40
REMOTE = V$(VERSION):src/kickstart/console

#
# Name of the module
#
MODNAME	= console

#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip

#
# Compiler, assembler, and linker
#
CC = lc
AS = hx68 -a
LN = blink

#
# Compiler flags...
#
CFLAGS	= -. -b0 -v -ms -cfistqm -d1 -O

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -cqsy -i V$(VERSION):include -o

#
# Default rules...
#
.c.o:
	$(CC) $(CFLAGS) $*.c

.asm.o:
	@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Linker flags
#
LFLAGS		= ADDSYM SMALLCODE SMALLDATA
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= V$(VERSION):lib/small.lib V$(VERSION):lib/debug.lib V$(VERSION):lib/lattice/lc.lib

#
# My headers...
#
PUBLIC_HDR =	console.i conunit.i console.h conunit.h

MY_HDR	=	cddata.i debug.i macros.i conmap.i conmap.h $(PUBLIC_HDR)

#
# My C source...
#
MY_C	=	pack.c

#
# My Assebly source...
#
MY_A	=	residenttag.asm \
dev.asm \
beginio.asm \
unsupported.asm \
stop.asm \
able.asm \
buffer.asm \
clear.asm \
clip.asm \
cursor.asm \
highlight.asm \
inputhandler.asm \
keymap.asm \
open.asm \
pack.asm \
rawconvert.asm \
read.asm \
refresh.asm \
scroll.asm \
snip.asm \
tab.asm \
task.asm \
wreset.asm \
write.asm \
debug.asm \
endmodule.asm


#
# My object files...
#
MY_OBJS	=	residenttag.o \
dev.o \
beginio.o \
unsupported.o \
stop.o \
able.o \
buffer.o \
clear.o \
clip.o \
cursor.o \
highlight.o \
inputhandler.o \
keymap.o \
open.o \
pack.o \
rawconvert.o \
read.o \
refresh.o \
scroll.o \
snip.o \
tab.o \
task.o \
wreset.o \
write.o \
debug.o \
endmodule.o


#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=


ALL:	$(LD_STRIP)

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the various versions
#
$(LD_FILE):	$(MY_OBJS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

#
# Depend...
#
residenttag.o: residenttag.asm $(MY_HDR) $(MODNAME)_rev.i

dev.o:          dev.asm			$(MY_HDR)
beginio.o:      beginio.asm		$(MY_HDR)
unsupported.o:  unsupported.asm		$(MY_HDR)
stop.o:         stop.asm		$(MY_HDR)
able.o:         able.asm		$(MY_HDR)
buffer.o:       buffer.asm		$(MY_HDR)
clear.o:        clear.asm		$(MY_HDR)
clip.o:         clip.asm		$(MY_HDR)
cursor.o:       cursor.asm		$(MY_HDR)
highlight.o:    highlight.asm		$(MY_HDR)
inputhandler.o: inputhandler.asm	$(MY_HDR)
keymap.o:       keymap.asm		$(MY_HDR)
open.o:         open.asm		$(MY_HDR)
pack.o:         pack.asm		$(MY_HDR)
rawconvert.o:   rawconvert.asm		$(MY_HDR)
read.o:         read.asm		$(MY_HDR)
refresh.o:      refresh.asm		$(MY_HDR)
scroll.o:       scroll.asm		$(MY_HDR)
snip.o:         snip.asm		$(MY_HDR)
tab.o:          tab.asm			$(MY_HDR)
task.o:         task.asm		$(MY_HDR)
wreset.o:       wreset.asm		$(MY_HDR)
write.o:        write.asm		$(MY_HDR)
debug.o:	debug.asm		debug.i
endmodule.o:    endmodule.asm		$(MY_HDR)

#
# Bump the version...
#
version:
#	@bumprev $(VERSION) $(MODNAME)_rev
	@bumprev $(RELVERSION) $(MODNAME)_rev

$(MODNAME)_rev.i:
#	@bumprev $(VERSION) $(MODNAME)_rev
	@bumprev $(RELVERSION) $(MODNAME)_rev

$(MODNAME)_rev.h:
#	@bumprev $(VERSION) $(MODNAME)_rev
	@bumprev $(RELVERSION) $(MODNAME)_rev

#
# Release just the headers
#
headers:	$(PUBLIC_HDR)
	copy $(PUBLIC_HDR) V$(VERSION):include/devices NOPRO

#
# Release the current build to the server
#
internal:
	@delete $(REMOTE)/((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile)
	@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@copy ((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile) $(REMOTE)
	@copy \#?.doc V$(VERSION):doc NOPRO
	@copy \#?.sfd V$(VERSION):lib/sfd NOPRO

#
# Blow away all files that would need to be rebuilt
#
clean:
	@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?)

#
# Make the AutoDocs
#
doc:	$(MODNAME).doc

$(MODNAME).doc:	$(MY_C) $(MY_A)
	@Echo "Making $(MODNAME).doc"
	@JOIN <as RAM:$(MODNAME).cat ~? ~< <
	$(MY_A) $(MY_C) ;
	<
	@AutoDoc >$(MODNAME).doc -a -C -s -l78 RAM:$(MODNAME).cat
	@Delete RAM:$(MODNAME).cat QUIET
	@Protect $(MODNAME).doc +rwd

#
# Make a complete new release (This still is in testing...)
#
release:
	lmk clean
	lmk version
	lmk doc
	lmk $(LD_FILE)
	lmk $(LD_STRIP)

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@protect \#? rwed QUIET
	@copy $(REMOTE)/\#? ""
	@protect \#? +r QUIET
	@protect \#?_rev\#? rwd QUIET
	@Echo "Local is updated..."
