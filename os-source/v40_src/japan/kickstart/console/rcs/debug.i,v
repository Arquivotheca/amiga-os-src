head     36.4;
branch   ;
access   ;
symbols  V39_4:36.3 V37_157:36.3 V37_149:36.3 V37_136:36.3 V37_133:36.3 V37_110:36.3 V37_98:36.2 V37_85:36.2 V37_63:36.2 V37_36:36.2 V37_15:36.2 V37_10:36.2 V37_7:36.2 V37_2:36.2 V36_558:36.2 V36_554:36.2 V36_552:36.2 V36_549:36.2 V36_548:36.2 V36_547:36.2 V36_546:36.2 V36_545:36.2 V36_544:36.2 V36_543:36.2 V36_542:36.2 V36_540:36.2 V36_539:36.2 V36_538:36.2 V36_537:36.2 V36_536:36.2 V36_529:36.2 V36_527:36.2 V36_525:36.2 V36_524:36.2 V36_523:36.2 V36_522:36.2 V36_521:36.2 V36_520:36.2 V36_519:36.2 V36_518:36.2 V36_495:36.2 V36_491:36.2 V36_486:36.2 V36_482:36.2 V36_476:36.2 V36_471:36.2 V36_465:36.2 V36_463:36.2 V36_461:36.2 V36_460:36.2 V36_453:36.2 V36_447:36.2 V36_442:36.2 V36_429:36.2 V36_423:36.2 V36_413:36.2 V36_394:36.1 V36_387:36.1 V36_382:36.1 V36_381:36.1 V36_379:36.0 V36_373:36.0 V36_367:36.0 V36_361:36.0 V36_359:36.0 V36_357:36.0 V36_353:36.0 V36_346:36.0 V36_343:36.0 V36_338:36.0 V36_332:36.0 V36_327:36.0 V36_321:36.0 V36_319:36.0 V36_318:36.0 V36_316:36.0 V36_313:36.0 V36_311:36.0 V36_310:36.0 V36_300:36.0 V36_299:36.0 V36_297:36.0 V36_295:36.0 V36_278:36.0 V36_274:36.0 V36_221:36.0 V36_205:36.0 V36_171:36.0 V36_167:36.0 V36_165:36.0 V36_153:36.0 V36_146:36.0 V36_140:36.0 V36_129:36.0;
locks    ; strict;
comment  @*   @;


36.4
date     92.03.17.09.38.32;  author darren;  state Exp;
branches ;
next     36.3;

36.3
date     91.04.10.14.54.57;  author darren;  state Exp;
branches ;
next     36.2;

36.2
date     90.04.13.13.33.24;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.04.02.10.48.02;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     89.06.30.12.40.26;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.4
log
@Add lots of good stuff for use with exec/macros PRINTF MACRO
@
text
@**
**      $Id: debug.i,v 36.3 91/04/10 14:54:57 darren Exp Locker: darren $
**
**      debug equates
**
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**

	INCLUDE	"exec/types.i"
	INCLUDE "exec/macros.i"

**
** Darren's debug stuff
**

* Set debug level of -
*
*	0	: No debugging code
*
*	>= 1	: Debugging code generated (requires debug.lib)
*
*	Even	: Even numbers print LF/CR at end of line
*
*	Odd	: Odd numbers do not print LF/CR at end of line
*
* See exec/macros.i for PRINTF macro
*

* Useful equates for setting debug level

DBG_BASIC	EQU	2		; very basic level of reporting

DBG_ENTRY	EQU	10		; report entry to routine

DBG_EXIT	EQU	100		; report exit from routine

DBG_FLOW	EQU	500		; report flow

DBG_OSCALL	EQU	1000		; debug OS call going in, or out

DBG_HARDWARE	EQU	10000		; report when poking hardware

DBG_INTERRUPT	EQU	20000		; report within an interrupt
					; add to lower-level DBGging

DBG_ALL		EQU	40000		; report everything

*DEBUG_DETAIL	SET	DBG_ALL
DEBUG_DETAIL	SET	0

* Push BYTE on stack as long

PUSHBYTE	MACRO
		IFNE	DEBUG_DETAIL
		clr.l	-(sp)
		move.b	\1,3(sp)
		ENDC
		ENDM
* Push WORD on stack as a long

PUSHWORD	MACRO
		IFNE	DEBUG_DETAIL
		clr.l	-(sp)
		move.w	\1,2(sp)
		ENDC
		ENDM

* Push LONG on stack as a long

PUSHLONG	MACRO
		IFNE	DEBUG_DETAIL
		move.l	\1,-(sp)
		ENDC
		ENDM

* PULL LONG off of stack

POPLONG		MACRO	;number of longs to pop
		IFNE	DEBUG_DETAIL
POPCOUNTER	SET	\1*4
		lea.l	POPCOUNTER(sp),sp
		ENDC
		ENDM

* Extend byte on stack

EXTBYTE		MACRO
		IFNE	DEBUG_DETAIL
		move.l	d0,-(sp)
		move.l	4(sp),d0
		ext.w	d0
		ext.l	d0
		move.l	d0,4(sp)
		move.l	(sp)+,d0
		ENDC
		ENDM

* Extend word on stack

EXTWORD		MACRO
		IFNE	DEBUG_DETAIL
		move.l	d0,-(sp)
		move.l	4(sp),d0
		ext.l	d0
		move.l	d0,4(sp)
		move.l	(sp)+,d0
		ENDC
		ENDM


* Useful macro for checking that stack hasn't been corrupted

STACKCHECK	MACRO
	PRINTF	DBG_FLOW,<'***SP=$%lx (SP)=$%lx***'>,sp,(sp)
		ENDM

** Traps

DEBUG_TRAP	MACRO	;value stored at $0
		IFNE	DEBUG_DETAIL
		move.w	#\1,$0
		ENDC
		ENDM

* Short branch conditional macros (too bad CAPE doesn't have a swtich
* to do this)


BSR_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bsr	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bsr.s	\1
		ENDC
		ENDM

BEQ_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		beq	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		beq.s	\1
		ENDC
		ENDM

BNE_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bne	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bne.s	\1
		ENDC
		ENDM



BRA_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bra	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bra.s	\1
		ENDC
		ENDM

BLS_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bls	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bls.s	\1
		ENDC
		ENDM

BLE_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		ble	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		ble.s	\1
		ENDC
		ENDM

BMI_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bmi	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bmi.s	\1
		ENDC
		ENDM

BHI_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bhi	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bhi.s	\1
		ENDC
		ENDM

BCS_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bcs	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bcs.s	\1
		ENDC
		ENDM

BCC_S		MACRO	;label
		IFNE	DEBUG_DETAIL
		bcc	\1
		ENDC
		IFEQ	DEBUG_DETAIL
		bcc.s	\1
		ENDC
		ENDM

**
** Kodiak debug stuff
**
DEBUG	EQU	0

D_LOCKIRPORT	EQU	0
D_LOCKDRPORT	EQU	1
D_UNLOCKRPORT	EQU	2
D_USURPLOCK	EQU	3
D_LOCKLAYER	EQU	4
D_UNLOCKLAYER	EQU	5

DINIT	MACRO
	IFNE	DEBUG
	IFND	DInit
	XREF	DInit
	ENDC
		bsr	DInit
	ENDC
	ENDM

DTRACE	MACRO
	IFNE	DEBUG
	IFND	DTrace
	XREF	DTrace
	ENDC
		bsr	DTrace
		dc.w	\1
	ENDC
	ENDM

D_TEXT	MACRO
\@@D_TEXT	EQU	*
		dc.w	\@@D_LOCKIRPORT-\@@D_TEXT
		dc.w	\@@D_LOCKDRPORT-\@@D_TEXT
		dc.w	\@@D_UNLOCKRPORT-\@@D_TEXT
		dc.w	\@@D_USURPLOCK-\@@D_TEXT
		dc.w	\@@D_LOCKLAYER-\@@D_TEXT
		dc.w	\@@D_UNLOCKLAYER-\@@D_TEXT
\@@D_LOCKIRPORT	dc.b	'LockIRPort',0
\@@D_LOCKDRPORT	dc.b	'LockDRPort',0
\@@D_UNLOCKRPORT dc.b	'UnLockRPort',0
\@@D_USURPLOCK	dc.b	'(usurp lock)',0
\@@D_LOCKLAYER	dc.b	'(locklayer)',0
\@@D_UNLOCKLAYER	dc.b	'(unlocklayer)',0
	ENDM

@


36.3
log
@No change
@
text
@d2 1
a2 1
**      $Id: debug.i,v 36.2 90/04/13 13:33:24 kodiak Exp Locker: darren $
d10 215
d268 1
@


36.2
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**      $Id$
@


36.1
log
@for 4.x rcs
@
text
@d2 1
a2 1
**      $Header: /usr2/kodiak/src/KS/console/RCS/debug.i,v 36.0 89/06/30 12:40:26 kodiak Exp Locker: kodiak $
@


36.0
log
@*** empty log message ***
@
text
@d2 1
a2 1
**      $Header$
@
