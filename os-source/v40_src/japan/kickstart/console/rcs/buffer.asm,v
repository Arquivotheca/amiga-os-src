head     36.12;
branch   ;
access   ;
symbols  V39_4:36.11 V37_157:36.11 V37_149:36.11 V37_136:36.11 V37_133:36.11 V37_110:36.11 V37_98:36.11 V37_85:36.11 V37_63:36.11 V37_36:36.11 V37_15:36.11 V37_10:36.11 V37_7:36.11 V37_2:36.10 V36_558:36.10 V36_554:36.10 V36_552:36.10 V36_549:36.10 V36_548:36.10 V36_547:36.10 V36_546:36.10 V36_545:36.10 V36_544:36.10 V36_543:36.10 V36_542:36.10 V36_540:36.9 V36_539:36.9 V36_538:36.9 V36_537:36.9 V36_536:36.9 V36_529:36.9 V36_527:36.9 V36_525:36.9 V36_524:36.9 V36_523:36.9 V36_522:36.9 V36_521:36.9 V36_520:36.8 V36_519:36.8 V36_518:36.8 V36_495:36.8 V36_491:36.8 V36_486:36.8 V36_482:36.8 V36_476:36.7 V36_471:36.6 V36_465:36.6 V36_463:36.6 V36_461:36.6 V36_460:36.6 V36_453:36.6 V36_447:36.6 V36_442:36.6 V36_429:36.5 V36_423:36.5 V36_413:36.5 V36_394:36.4 V36_387:36.4 V36_382:36.4 V36_381:36.4 V36_379:36.3 V36_373:36.3 V36_367:36.3 V36_361:36.3 V36_359:36.3 V36_357:36.3 V36_353:36.3 V36_346:36.3 V36_343:36.3 V36_338:36.3 V36_332:36.3 V36_327:36.3 V36_321:36.3 V36_319:36.3 V36_318:36.3 V36_316:36.3 V36_313:36.3 V36_311:36.3 V36_310:36.3 V36_300:36.3 V36_299:36.3 V36_297:36.3 V36_295:36.3 V36_278:36.3 V36_274:36.3 V36_221:36.2 V36_205:36.2 V36_171:36.1 V36_167:36.1 V36_165:36.0 V36_153:36.0 V36_146:36.0 V36_140:36.0 V36_129:36.0 V36_113:36.0 V36_56:36.0 V36_53:36.0 V36_51:36.0 V36_45:36.0 L36_42:36.0;
locks    ; strict;
comment  @*   @;


36.12
date     92.04.15.10.25.34;  author darren;  state Exp;
branches ;
next     36.11;

36.11
date     91.01.16.17.26.08;  author darren;  state Exp;
branches ;
next     36.10;

36.10
date     90.11.20.18.43.49;  author darren;  state Exp;
branches ;
next     36.9;

36.9
date     90.07.31.10.59.53;  author darren;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.24.16.36.30;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.22.10.28.50;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.20.09.44.28;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.13.13.32.18;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.02.10.47.07;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.02.11.36.20;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.04.09.45.06;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.15.15.35.40;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.09.06.19.51.17;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.12
log
@return actual in d3 after pasting aRAV so that we are sure
to get a satisfy to a read request
@
text
@**
**	$Id: buffer.asm,v 36.11 91/01/16 17:26:08 darren Exp Locker: darren $
**
**      buffer management routines
**
**      (C) Copyright 1989,1990 Commodore-Amiga, Inc.
**          All Rights Reserved
**
	SECTION	console

**	Includes

	INCLUDE	"cddata.i"
	INCLUDE	"exec/ables.i"


**	Exports

	XDEF	GetReadIO
	XDEF	PutReadData
	XDEF	PutReadByte
	XDEF	PutReadSnip


**	Imports

	XLVO	FreeVec			; Exec
	XLVO	ObtainSemaphore		;
	XLVO	Permit			;
	XLVO	ReleaseSemaphore	;


**	Assumptions

	IFNE	cu_ReadLastOut-cu_ReadLastIn-2
	FAIL	"cu_ReadLastOut does not follow cu_ReadLastIn"
	ENDC
	IFNE	cu_ReadData-cu_ReadLastOut-2
	FAIL	"cu_ReadData does not follow cu_ReadLastOut"
	ENDC

**	Equates

aRAVLEN	EQU	4			;sequence is 4 long

	IFNE	aRAVLEN-4
	FAIL	"aRAV length not equal to 4; recode"
	ENDC


;	read buffer
;	    o   circular
;	
;	    o   typed based on top token n
;		1 <= n <= 255
;		    next n are characters
;		0 == n
;		    indirect to buffer
;		    long1   buffer length (decrementing)
;		    long2   buffer data (incrementing)
;		    long3   buffer snip address
;	
;	    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;	     1c1			<- 1 character in buffer
;	     2cc2			<- 2 characters in buffer
;	     2cc20<l1><l2><l3>0		<- 2 characters + a snip
;	      1c10<l1><l2><l3>0		<- if we read 1, it would be like so
;	         0<l1><l2><l3>0		
;	         0<l1><l2><l3>01c1
;	         0<l1><l2><l3>02cc2
;	                       2cc2
;	    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;

;------ GetReadIO ---------------------------------------------------
;
;	actual = GetReadIO(conUnit, ioReq), consoleBase
;	d0                 a2       a3      a6
;
;	fill the ioReq with data from the read buffer
;
;--------------------------------------------------------------------
;
;   d2	running ReadLastOut
;   d3	actual ReadLastOut to cache later
;   d4	decrementing destination length
;   a0  read data buffer base
;   a2	console unit
;   a3	io request
;   a4	incrementing destination data pointer
;   a6	console device
;
GetReadIO:
		movem.l	d2-d5/a4-a5,-(a7)
		move.l	cd_ExecLib(a6),a0
		FORBID	a0,NOFETCH

		movem.l	IO_LENGTH(a3),d4/a4	; and IO_DATA

		lea	cu_ReadLastOut(a2),a0
		move.w	(a0),d2
		cmp.w	-2(a0),d2
		beq.s	griBailOut

griLoop:        move.w	d2,d3
		;-- check for end conditions
		;--	check for remaining length
		tst.l	d4
		beq.s	griDone

		bsr	griNextD2	;.s!
		;--	check for remaining buffer contents
		beq.s	griDone

		;-- figure out what type of span this is
		moveq	#0,d5
		move.b	2(a0,d2.w),d5
		beq	griSnipSpan	;.s!

		;-- is aRAV sequence in buffer?

		cmpi.b	#aRAVLEN,d5		;is span long enough?
		blt.s	notaRAVLEN		;if not, forget it

		movem.l	d0-d3,-(sp)
		bsr	griFillD0

		cmp.l	#(($9b<<24)!('0'<<16)!(' '<<8)!('v')),d0
		bne.s	notaRAV
		bset	#IOB_SPECIAL,IO_FLAGS(a3)

notaRAV:
		movem.l	(sp)+,d0-d3
		
notaRAVLEN:
		;-- read from the char span <n><c1><c2>...<cn><n'>
		move.w	d5,d0		; guess whole span will fit
		sub.l	d5,d4
		bge.s	griSpanDBF
		add.w	d4,d0		; limit to remaining length
		clr.l	d4		;
		bra.s	griSpanDBF
griSpanLoop:
		move.w	d2,d3		; cache current index
		bsr.s	griNextD2
		move.b	2(a0,d2.w),(a4)+
		subq.w	#1,d5		; update remaining chars in span
griSpanDBF:
		dbf	d0,griSpanLoop

		;-- update span borders
		tst.b	d5
		beq.s	griFlushCSpan

		;--	part of span remains, only if no remaining destination
		move.b	d5,2(a0,d2.w)	; update span count <n>
		add.w	d5,d2
		addq.w	#1,d2
		cmp.w	#READBSIZE,d2
		blt.s	griUpdateBounded
		sub.w	#READBSIZE,d2
griUpdateBounded:
		move.b	d5,2(a0,d2.w)	; update span count <n'>
		bra.s	griDone

griFlushCSpan:
		;--	span is gone, flush <n'>
		bsr.s	griNextD2
		bne.s	griLoop
		move.w	d2,d3

griDone:
		move.w	d3,(a0)		; update ReadLastOut

griBailOut:
		move.l	cd_ExecLib(a6),a0
		PERMIT	a0,NOFETCH

		move.l	IO_LENGTH(a3),d0
		sub.l	d4,d0		; construct actual
		movem.l	(a7)+,d2-d5/a4-a5
		rts


griNextD2:
		;--	bump ReadLastOut
		addq.w	#1,d2		; bump to next location
		cmp.w	#READBSIZE,d2	; compare w/ read buffer size
		blt.s	griBoundedLastOut
		clr.w	d2
griBoundedLastOut:
		cmp.w	-2(a0),d2
		rts

		;-- read from snip span 0<l1><l2><l3>0
griSnipSpan:
		bsr.s	griFillD0
		move.l	d0,d5		; buffer length (decrementing)
		bsr.s	griFillD0
		move.l	d0,a1		; buffer data (incrementing)
		bsr.s	griFillD0
		move.l	d0,a5		; buffer snip address

		move.l	d5,d0
		sub.l	d5,d4
		bge.s	griSnipLoop
		add.l	d4,d0		; limit to remaining length
		clr.l	d4		;
griSnipLoop:
		move.b	(a1)+,d1
		cmp.b	#10,d1		; LF?
		bne.s	griPutSnipCh
		moveq	#13,d1		; LF -> CR
griPutSnipCh:
		move.b	d1,(a4)+
		subq.l	#1,d5
		subq.l	#1,d0
		bgt.s	griSnipLoop

griSnipDone:
		tst.l	d5
		beq.s	griFlushSnip

		;-- update <l1><l2>
		move.w	d3,d2
		bsr.s	griNextD2
		move.l	d5,d0
		bsr	prsFillD0
		move.l	a1,d0
		bsr	prsFillD0
		bra.s	griDone

griFlushSnip:
		;--	snip is gone, flush it
		;--	BUG fix here
		;--	Fixes corrupt read data
		;--	when doing io_Length > 1
		;--	and fixes read mem loc 0 bug
		;--	in revisons prior to 36.521

		subq.w	#1,snip_Access(a5)
		bpl	griFlushCSpan
		move.l	a5,a1
		LINKEXE	FreeVec
		lea	cu_ReadLastOut(a2),a0
		bra	griFlushCSpan


griFillD0:
		moveq	#0,d0
		moveq	#3,d1
grifLoop:
		bsr	griNextD2
		lsl.l	#8,d0
		move.b	2(a0,d2.w),d0
		dbf	d1,grifLoop
		rts


;------ PutReadData -------------------------------------------------
;
;	actual = PutReadData(len, data, conUnit), consoleBase
;	d0                   d0.w a0    a2        a6
;
;	Put bytes in the read buffer from the data buffer supplied
;	-- all or none.
;
;--------------------------------------------------------------------
PutReadData:
		movem.l	d2-d3/a3,-(a7)
		move.l	d0,d2
		beq.s	prdEmpty
		move.l	a0,a3
		move.l	cd_ExecLib(a6),a0
		FORBID	a0,NOFETCH

		;-- figure out if new border bytes needed for span
		lea	cu_ReadLastIn(a2),a0
		move.w	(a0)+,d1	; cu_ReadLastIn
		;--	check for empty buffer
		cmp.w	(a0),d1		; cu_ReadLastOut
		beq.s	prdNeedBorder
		;--	check for char span in progress
prdChkSpanning:
		tst.b	2(a0,d1.w)
		bne.s	prdChkSpace
prdNeedBorder:
		addq.w	#2,d0		; need border bytes

		;-- calculate number of bytes used in buffer already
prdChkSpace:
		sub.w	(a0),d1		; cu_ReadLastOut
		bpl.s	prdHaveUsed
		add.w	#READBSIZE,d1

		;-- see if there are enough for this data
prdHaveUsed:
		add.w	d0,d1
		cmp.w	#READBSIZE-1,d1
		bge.s	prdDone		; no, bail out
		move.w	d2,d3
		bra.s	prdDBF

prdLoop:
		move.b	(a3)+,d0
		bsr.s	PutReadByte
prdDBF:
		dbf	d3,prdLoop

prdDone:
		move.l	cd_ExecLib(a6),a0
		PERMIT	a0,NOFETCH
prdEmpty:
		move.l	d2,d0
		movem.l	(a7)+,d2-d3/a3
		rts


;------ PutReadByte -------------------------------------------------
;
;	PutReadByte(byte, conUnit), consoleBase
;	            d0    a2        a6
;
;	Put a byte in the read buffer
;
;--------------------------------------------------------------------
PutReadByte:
		movem.l	d2-d3,-(a7)
		move.l	cd_ExecLib(a6),a0
		FORBID	a0,NOFETCH
		;-- check for empty buffer
		lea	cu_ReadLastIn(a2),a0
		move.w	(a0)+,d2	; cu_ReadLastIn
		cmp.w	(a0),d2		; cu_ReadLastOut
		beq.s	prbNewSpan

		;-- check for char span in progress
		moveq	#0,d1
		move.b	2(a0,d2.w),d1
		beq.s	prbNewSpan	; no, a buffer preceeds this

		;-- add to the char span <n><c1><c2>...<cn><n'>
		move.w	d2,d3		; save this location old <n'>
		bsr.s	prbNextD2
		beq.s	prbDone		; full: don't add byte

		;--	update bytes at head
		move.b	d0,2(a0,d3.w)	; put new byte in old <n'>
		addq.w	#1,d1
		move.b	d1,2(a0,d2.w)	; put new count in new <n'>
		;--	calculate tail end of char span
		sub.w	d1,d3		; calculate <n>
		bpl.s	prbFoundN
		add.w	#READBSIZE,d3
prbFoundN:
		addq.b	#1,2(a0,d3.w)	; update <n>

prbUpdate:
		move.w	d2,-(a0)	; update cu_ReadLastIn

prbDone:
		move.l	cd_ExecLib(a6),a0
		PERMIT	a0,NOFETCH
		movem.l	(a7)+,d2-d3
		rts

		;-- start a new char span of size 1
prbNewSpan:
		bsr.s	prbNextD2
		beq.s	prbDone
		move.b	#1,2(a0,d2.w)
		bsr.s	prbNextD2
		beq.s	prbDone
		move.b	d0,2(a0,d2.w)
		bsr.s	prbNextD2
		beq.s	prbDone
		move.b	#1,2(a0,d2.w)
		bra.s	prbUpdate


prbNextD2:
		addq.w	#1,d2		; bump to next free location
		cmp.w	#READBSIZE,d2	; compare w/ read buffer size
		blt.s	prbBoundedLastIn
		clr.w	d2
prbBoundedLastIn:
		cmp.w	(a0),d2		; cu_ReadLastOut
		rts


;------ PutReadSnip -------------------------------------------------
;
;	success = PutReadSnip(), consoleBase
;	d0                       a6
;
;	Paste to the read buffer
;
;--------------------------------------------------------------------
PutReadSnip:
		movem.l	d2-d3,-(a7)
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ObtainSemaphore
		move.l	cd_ExecLib(a6),a0
		FORBID	a0,NOFETCH

		;-- test if any hook(s) have been installed
		;-- if so, the clipboard.device is suppose
		;-- to be used, meaning that we disable
		;-- the internal pasting capability.

		tst.b	cd_Hooks(a6)
		beq.s	pastesnip

		;-- Put private control sequence into read
		;-- buffer <CSI>0 v means user pressed
		;-- RIGHT AMIGA V (paste text).
		;
		;-- <CSI>[parameter 0-9] v where future
		;-- numbers are reserved.  Possible
		;-- uses - e.g., <CSI>1 v meaning paste
		;-- graphics, overstrike paste, etc.


		moveq	#04,d0		;length
		lea	aRAV(pc),a0
		bsr	PutReadData
		move.l	d0,d3
		bra.s	prsDone

pastesnip:
		;-- check for appropriate snip buffer
		move.l	cd_SelectionSnip(a6),d3
		beq.s	prsDone
		move.l	d3,a1
		moveq	#0,d3
		move.w	snip_Length(a1),d3
		beq.s	prsDone

		;-- put snip record in read buffer
		lea	cu_ReadLastIn(a2),a0
		move.w	(a0)+,d2	; cu_ReadLastIn
		bsr.s	prbNextD2
		beq.s	prsFull		; full: don't add byte
		move.b	#0,2(a0,d2.w)
		move.l	d3,d0
		bsr.s	prsFillD0
		move.l	a1,d0
		addq.l	#snip_Data,d0
		bsr.s	prsFillD0
		move.l	a1,d0
		bsr.s	prsFillD0
		bsr.s	prbNextD2
		beq.s	prsFull		; full: don't add byte
		move.b	#0,2(a0,d2.w)

		move.w	d2,-(a0)	; update cu_ReadLastIn
		addq.w	#1,snip_Access(a1) ; show snip in use

prsDone:
		move.l	cd_ExecLib(a6),a0
		PERMIT	a0,NOFETCH
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ReleaseSemaphore
		move.l	d3,d0
		movem.l	(a7)+,d2-d3
		rts

prsPopFull:
		addq.l	#4,a7
prsFull:
		moveq	#0,d3
		bra.s	prsDone

prsFillD0:
		moveq	#3,d1
prsfLoop:
		bsr	prbNextD2
		beq.s	prsPopFull
		rol.l	#8,d0
		move.b	d0,2(a0,d2.w)
		dbf	d1,prsfLoop
		rts

		;-- RIGHT AMIGA V sequence
		;-- parameter 0 == text snip

aRAV:		dc.b	$9b,$30,$20,$76		;<CSI>0 v

	END
@


36.11
log
@First go at pre-seek into read buffer; sets an io_request
bit saying that a paste sequence is coming (checked for only
if there is a character span of 4, or more, and only at the
start of the read request (if you ask for 80 bytes, and there
are 80 bytes or less, only the first 4 characters may be checked
for paste sequence).  Done for RAW: mode in CON:
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.10 90/11/20 18:43:49 darren Exp Locker: darren $
d427 1
@


36.10
log
@Now checks to see if there is a hook installed.  If so,
pastes are inhibited, and "<CSI>0 v" is broadcast via
the console.device readstream.  Used for console to clipboard
mechanism - applications which see this sequence should read the
clipboard, and paste the text themselves.
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.9 90/07/31 10:59:53 darren Exp Locker: darren $
d42 1
d44 7
d111 1
a111 1
		bsr.s	griNextD2
d118 1
a118 1
		beq.s	griSnipSpan
d120 16
@


36.9
log
@Fixed read data corruption bug
and read mem loc 0 bug as a
bonus.  No change in code size
required.
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.8 90/05/24 16:36:30 kodiak Exp Locker: darren $
d56 5
a60 5
;	     1c1
;	     2cc2
;	     2cc20<l1><l2><l3>0
;	      1c10<l1><l2><l3>0
;	         0<l1><l2><l3>0
d65 1
d381 25
d458 5
@


36.8
log
@stop scanning read buffer when char span & buffer end simulaneously
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.7 90/05/22 10:28:50 kodiak Exp Locker: kodiak $
d6 1
a6 1
**      (C) Copyright 1989 Commodore-Amiga, Inc.
d96 1
a96 2
griLoop:
		move.w	d2,d3
d101 1
a146 1

d210 6
a215 1
		bsr.s	griNextD2
d217 1
a217 1
		bpl	griLoop
d221 2
a222 1
		bra	griLoop
@


36.7
log
@fixes read of a byte stream ending in a null
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.6 90/04/20 09:44:28 kodiak Exp Locker: kodiak $
d144 2
a145 1
		bra.s	griLoop
@


36.6
log
@first semi-tested big clip support
@
text
@d2 1
a2 1
**	$Id: buffer.asm,v 36.5 90/04/13 13:32:18 kodiak Exp Locker: kodiak $
d239 1
a239 1
		movem.l	d2/a3,-(a7)
d270 1
d277 1
a277 1
		dbf	d2,prdLoop
d283 2
a284 1
		movem.l	(a7)+,d2/a3
@


36.5
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d14 1
d19 4
a22 5
	XDEF		PutBBuff
	XDEF		GetBBuff
	XDEF		PutWBuff
	XDEF		GetWBuff
	XDEF		SizeBuff
d25 1
a25 19
*------ PutBBuff ----------------------------------------------------
*
*   NAME
*	PutBBuff - put byte to buffer
*
*   SYNOPSIS
*	PutBBuff(buffer)
*		 a0
*
*--------------------------------------------------------------------
PutBBuff:
		move.w	(a0),d1		; bf_LastIn(a0)
		addq.w	#1,d1
		cmp.w	bf_StoreSize(a0),d1
		blt.s	pbb1
		clr.w	d1
pbb1:
		cmp.w	bf_LastOut(a0),d1
		beq.s	pbb2
d27 130
a156 3
		move.b	d0,bf_Storage(a0,d1.w)
		move.w	d1,(a0)		; bf_LastIn(a0)
		moveq	#0,d0
d159 9
a167 2
pbb2:
		moveq	#1,d0
d170 8
d179 15
a193 22
*------ PutWBuff ----------------------------------------------------
*
*   NAME
*	PutWBuff - put word to buffer
*
*   SYNOPSIS
*	PutWBuff(buffer)
*		 a0
*
*   NOTE
*       This buffer is assumed to be used exclusively for word access
*
*--------------------------------------------------------------------
PutWBuff:
		move.w	(a0),d1		; bf_LastIn(a0)
		addq.w	#2,d1
		cmp.w	bf_StoreSize(a0),d1
		blt.s	pwb1
		clr.w	d1
pwb1:
		cmp.w	bf_LastOut(a0),d1
		beq.s	pwb2
d195 24
a218 2
		move.w	d0,bf_Storage(a0,d1.W)
		move.w	d1,(a0)		; bf_LastIn(a0)
d220 6
d228 55
a282 2
pwb2:
		moveq	#2,d0
d286 30
a315 14
*------ GetBBuff ----------------------------------------------------
*
*   NAME
*	GetBBuff - get byte from buffer
*
*   SYNOPSIS
*	GetBBuff(buffer)
*		 a0
*
*--------------------------------------------------------------------
GetBBuff:
		move.w	bf_LastOut(a0),d1
		cmp.w	(a0),d1		; bf_LastIn(a0)
		beq.s	emptyBuff
d317 15
a331 7
		cmp.w	bf_StoreSize(a0),d1
		blt.s	gbb1
		clr.w	d1
gbb1:
		moveq	#0,d0
		move.b	bf_Storage(a0,d1.w),d0
		move.w	d1,bf_LastOut(a0)
d334 21
a354 2
emptyBuff:
		moveq	#-1,d0
d358 49
a406 25
*------ GetWBuff ----------------------------------------------------
*
*   NAME
*	GetWBuff - get word from buffer
*
*   SYNOPSIS
*	GetWBuff(buffer)
*		 a0
*
*   NOTE
*       This buffer is assumed to be used exclusively for word access
*
*--------------------------------------------------------------------
GetWBuff:
		move.w	bf_LastOut(a0),d1
		cmp.w	(a0),d1		; bf_LastIn(a0)
		beq.s	emptyBuff
		addq.w	#2,d1
		cmp.w	bf_StoreSize(a0),d1
		blt.s	gwb1
		clr.w	d1
gwb1:
		moveq	#0,d0
		move.w	bf_Storage(a0,d1.W),d0
		move.w	d1,bf_LastOut(a0)
d409 5
d415 8
a422 17
*------ SizeBuff ----------------------------------------------------
*
*   NAME
*	SizeBuff - count number of bytes in buffer
*
*   SYNOPSIS
*	SizeBuff(buffer)
*		 a0
*
*--------------------------------------------------------------------
SizeBuff:
		moveq	#0,d0
		move.w	(a0),d0		; bf_LastIn(a0)
		sub.w	bf_LastOut(a0),d0
		bpl.s	sb1
		add.w	bf_StoreSize(a0),d0
sb1:
@


36.4
log
@for 4.x rcs
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/console/RCS/buffer.asm,v 36.3 89/12/02 11:36:20 kodiak Exp Locker: kodiak $
@


36.3
log
@checkpoint after line buffer coding completed,
and just after start of line length coding
@
text
@d2 1
a2 1
**	$Header$
@


36.2
log
@make all labels explicit
@
text
@d1 9
a9 34
	TTL    '$Header: buffer.asm,v 36.1 89/09/15 15:35:40 kodiak Exp $'
**********************************************************************
*								     *
*   Copyright 1986, Commodore-Amiga Inc.   All rights reserved.	     *
*   No part of this program may be reproduced, transmitted,	     *
*   transcribed, stored in retrieval system, or translated into	     *
*   any language or computer language, in any form or by any	     *
*   means, electronic, mechanical, magnetic, optical, chemical,	     *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030				     *
*								     *
**********************************************************************
*
*   buffer management routines
*
*   Source Control
*   --------------
*   $Header: buffer.asm,v 36.1 89/09/15 15:35:40 kodiak Exp $
*
*   $Locker: kodiak $
*
*   $Log:	buffer.asm,v $
*   Revision 36.1  89/09/15  15:35:40  kodiak
*   fix SizeBuff
*   
*   Revision 36.0  88/09/06  19:51:17  kodiak
*   *** empty log message ***
*   
*   Revision 35.0  87/10/26  11:11:46  kodiak
*   initial from V34, but w/ stripped log
*   
*
**********************************************************************
d11 1
a11 1
	SECTION		rawinput
d13 1
a13 1
*------ Included Files -----------------------------------------------
a14 1
	INCLUDE		"cddata.i"
d16 1
a16 2

*------ Exported Functions -------------------------------------------
@


36.1
log
@fix SizeBuff
@
text
@d1 1
a1 1
	TTL    '$Header: buffer.asm,v 36.0 88/09/06 19:51:17 kodiak Exp $'
d19 1
a19 1
*   $Header: buffer.asm,v 36.0 88/09/06 19:51:17 kodiak Exp $
d24 3
d66 1
a66 1
		blt.s	1$
d68 1
a68 1
1$
d70 1
a70 1
		beq.s	2$
d77 1
a77 1
2$
d99 1
a99 1
		blt.s	1$
d101 1
a101 1
1$
d103 1
a103 1
		beq.s	2$
d110 1
a110 1
2$
d131 1
a131 1
		blt.s	1$
d133 1
a133 1
1$
d163 1
a163 1
		blt.s	1$
d165 1
a165 1
1$
d186 1
a186 1
		bpl.s	1$
d188 1
a188 1
1$
@


36.0
log
@*** empty log message ***
@
text
@d1 1
a1 1
	TTL    '$Header: buffer.asm,v 35.0 87/10/26 11:11:46 kodiak Exp $'
d19 1
a19 1
*   $Header: buffer.asm,v 35.0 87/10/26 11:11:46 kodiak Exp $
d21 1
a21 1
*   $Locker:  $
d24 3
d56 1
a56 1
*		 A0
d60 5
a64 5
		MOVE.W	(A0),D1		; bf_LastIn(A0)
		ADDQ.W	#1,D1
		CMP.W	bf_StoreSize(A0),D1
		BLT.S	1$
		CLR.W	D1
d66 2
a67 2
		CMP.W	bf_LastOut(A0),D1
		BEQ.S	2$
d69 4
a72 4
		MOVE.B	D0,bf_Storage(A0,D1.W)
		MOVE.W	D1,(A0)		; bf_LastIn(A0)
		MOVEQ	#0,D0
		RTS
d75 2
a76 2
		MOVEQ	#1,D0
		RTS
d86 1
a86 1
*		 A0
d93 5
a97 5
		MOVE.W	(A0),D1		; bf_LastIn(A0)
		ADDQ.W	#2,D1
		CMP.W	bf_StoreSize(A0),D1
		BLT.S	1$
		CLR.W	D1
d99 2
a100 2
		CMP.W	bf_LastOut(A0),D1
		BEQ.S	2$
d102 4
a105 4
		MOVE.W	D0,bf_Storage(A0,D1.W)
		MOVE.W	D1,(A0)		; bf_LastIn(A0)
		MOVEQ	#0,D0
		RTS
d108 2
a109 2
		MOVEQ	#2,D0
		RTS
d119 1
a119 1
*		 A0
d123 7
a129 7
		MOVE.W	bf_LastOut(A0),D1
		CMP.W	(A0),D1		; bf_LastIn(A0)
		BEQ.S	emptyBuff
		ADDQ.W	#1,D1
		CMP.W	bf_StoreSize(A0),D1
		BLT.S	1$
		CLR.W	D1
d131 4
a134 4
		MOVEQ	#0,D0
		MOVE.B	bf_Storage(A0,D1.W),D0
		MOVE.W	D1,bf_LastOut(A0)
		RTS
d137 2
a138 2
		MOVEQ	#-1,D0
		RTS
d148 1
a148 1
*		 A0
d155 7
a161 7
		MOVE.W	bf_LastOut(A0),D1
		CMP.W	(A0),D1		; bf_LastIn(A0)
		BEQ.S	emptyBuff
		ADDQ.W	#2,D1
		CMP.W	bf_StoreSize(A0),D1
		BLT.S	1$
		CLR.W	D1
d163 4
a166 4
		MOVEQ	#0,D0
		MOVE.W	bf_Storage(A0,D1.W),D0
		MOVE.W	D1,bf_LastOut(A0)
		RTS
d176 1
a176 1
*		 A0
d180 5
a184 5
		MOVEQ	#0,D0
		MOVE.W	bf_LastOut(A0),D0
		SUB.W	(A0),D0		; bf_LastIn(A0)
		BPL.S	1$
		ADD.W	bf_StoreSize(A0),D0
d186 1
a186 1
		RTS
@
