head     36.8;
branch   ;
access   ;
symbols  V39_4:36.8 V37_157:36.8 V37_149:36.8 V37_136:36.8 V37_133:36.8 V37_110:36.8 V37_98:36.8 V37_85:36.8 V37_63:36.8 V37_36:36.8 V37_15:36.8 V37_10:36.8 V37_7:36.8 V37_2:36.8 V36_558:36.8 V36_554:36.8 V36_552:36.8 V36_549:36.8 V36_548:36.8 V36_547:36.8 V36_546:36.8 V36_545:36.8 V36_544:36.8 V36_543:36.8 V36_542:36.8 V36_540:36.7 V36_539:36.7 V36_538:36.6 V36_537:36.6 V36_536:36.6 V36_529:36.6 V36_527:36.5 V36_525:36.5 V36_524:36.5 V36_523:36.5 V36_522:36.5 V36_521:36.5 V36_520:36.5 V36_519:36.5 V36_518:36.4 V36_495:36.4 V36_491:36.4 V36_486:36.4 V36_482:36.4 V36_476:36.4 V36_471:36.4 V36_465:36.4 V36_463:36.3 V36_461:36.3 V36_460:36.3 V36_453:36.3 V36_447:36.3 V36_442:36.3 V36_429:36.2 V36_423:36.2 V36_413:36.2 V36_394:36.1 V36_387:36.1 V36_382:36.1 V36_381:36.1 V36_379:36.0 V36_373:36.0 V36_367:36.0 V36_361:36.0 V36_359:36.0 V36_357:36.0 V36_353:36.0;
locks    ; strict;
comment  @*   @;


36.8
date     90.11.20.18.45.42;  author darren;  state Exp;
branches ;
next     36.7;

36.7
date     90.11.07.15.49.42;  author darren;  state Exp;
branches ;
next     36.6;

36.6
date     90.10.22.17.06.32;  author darren;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.19.18.19.54;  author darren;  state Exp;
branches ;
next     36.4;

36.4
date     90.05.15.17.24.56;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.20.09.45.38;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.04.13.13.32.53;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.04.02.10.47.39;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     90.02.26.20.29.21;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.8
log
@Now increments/decrements a counter when a snip hook is added,
and removed.  The counter is used as a flag - if a hook is
installed, transparent pasting into console windows is
suppressed, and "<CSI>0 v" is broadcast via the read
stream.
@
text
@**
**	$Id: snip.asm,v 36.7 90/11/07 15:49:42 darren Exp $
**
**      console.device snip manipulation commands
**
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**
	SECTION	console

**	Includes

	INCLUDE	"cddata.i"


**	Exports

	XDEF	GetConSnip
	XDEF	SetConSnip
	XDEF	AddConSnipHook
	XDEF	RemConSnipHook


**	Imports

	XLVO	AddTail			; Exec
	XLVO	AllocVec		;
	XLVO	FreeVec			;
	XLVO	ObtainSemaphore		;
	XLVO	ReleaseSemaphore	;
	XLVO	Remove			;


*****i* console.device/GetConSnip ************************************
*
*   NAME
*	GetConSnip -- Get a copy of the current console snip (V36)
*
*   SYNOPSIS
*	snip = GetConSnip();
*	D0
*
*	char *GetConSnip( void );
*
*   FUNCTION
*	This command allocates a buffer for the current console snip
*	using exec's AllocVec function, fills the buffer with the
*	current snip, and returns the pointer to the buffer.  The
*	snip is null terminated.  It is the responsibility of the
*	caller to FreeVec the buffer when it is no longer in use.
*	Note that there is no linkage between the snip returned and
*	the actual console snip that prevents the latter from
*	changing after this call returns.
*
*   RESULT
*	snip -- the data the console device would use for a paste.
*	     A null result indicates either there is no snip or
*	     there was no memory to allocate a copy of it.
*
**********************************************************************
GetConSnip:
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ObtainSemaphore
		move.l	cd_SelectionSnip(a6),d0
		beq.s	gcsRelease
		move.l	d0,a0
		moveq	#0,d0
		move.w	snip_Length(a0),d0
		addq.l	#1,d0
		moveq	#0,d1
		LINKEXE	AllocVec
		tst.l	d0
		beq.s	gcsRelease

		move.l	d0,a1
		move.l	cd_SelectionSnip(a6),a0
		move.w	snip_Length(a0),d1
		addq.l	#snip_Data,a0
		bra.s	gcsCopyDBF
gcsCopyLoop:
		move.b	(a0)+,(a1)+
gcsCopyDBF:
		dbf	d1,gcsCopyLoop
		clr.b	(a1)

gcsRelease:
		move.l	d0,-(a7)
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ReleaseSemaphore
		move.l	(a7)+,d0
		rts


*****i* console.device/SetConSnip ************************************
*
*   NAME
*	SetConSnip -- Set the current console snip (V36)
*
*   SYNOPSIS
*	success = SetConSnip(snip);
*	D0                   A0
*
*	BOOL SetConSnip( char * );
*
*   FUNCTION
*	This command copies the provided null terminated snip buffer
*	into the console's private snip.  The snip is null terminated.
*	Note that there is no linkage between the snip provided and
*	the actual console snip -- changing the former after this call
*	has no effect on the latter.
*
*   INPUT
*	snip -- a null terminated snip whose length is <= 65535.
*
*   RESULT
*	success -- usually true.  false if out of memory.
*
**********************************************************************
SetConSnip:
		movem.l	d2/a2,-(a7)
		move.l	a0,a2
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ObtainSemaphore

		;-- release old snip
		move.l	cd_SelectionSnip(a6),d0
		beq.s	scsSizeSnip
		move.l	d0,a1
		subq.w	#1,snip_Access(a1)
		bpl.s	scsSizeSnip
		LINKEXE	FreeVec

		;-- determine snip length
scsSizeSnip:
		move.l	a2,a0
		moveq	#-1,d2
scsSnipLen:
		tst.b	(a0)+
		dbeq	d2,scsSnipLen
		not.l	d2

		;-- acquire new snip
		move.l	d2,d0
		addq.l	#snip_Data,d0
		moveq	#0,d1
		LINKEXE	AllocVec
		move.l	d0,cd_SelectionSnip(a6)
		bne.s	scsCopySnip
		moveq	#0,d2
		bra.s	scsRelease

scsCopySnip:
		move.l	d0,a1
		clr.w	snip_Access(a1)
		move.w	d2,snip_Length(a1)
		moveq	#1,d2
		addq.l	#snip_Data,a1
scsCopyLoop:
		move.b	(a2)+,d0
		beq.s	scsRelease
		move.b	d0,(a1)+
		bra.s	scsCopyLoop

scsRelease:
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ReleaseSemaphore
		move.l	d2,d0
		movem.l	(a7)+,d2/a2
		rts


*****i* console.device/AddConSnipHook ********************************
*
*   NAME
*	AddConSnipHook -- Install a console snip hook
*
*   SYNOPSIS
*	AddConSnipHook(hook)
*	               A0
*
*	void AddConSnipHook( struct Hook * );
*
*   FUNCTION
*	This command installs a hook that is called from the console
*	task to inform an application when a selection is available.
*	This notification occurs after the selection is complete, it
*	does not occur while the selection is in progress.  The hook
*	code may not in turn initiate any console functions or
*	commands, but the hook data is available while the hook itself
*	is called.
*
*   INPUT
*	hook - a standard hook.  Note that the h_MinNode is used by
*	    the console device, so must not be used by the hook owner.
*
*   HOOK ENVIRONMENT
*	hook message - a SnipHookMsg, as defined in devices/console.h
*	    shm_Type - 0, indicating that the message has the
*		following fields:
*	    shm_SnipLen - the length of the snip (not including the
*		null termination)
*	    shm_Snip - the null terminated snip.
*	hook object - the IO_UNIT associated with the source of the
*		selection.
*
*   NOTES
*	Intended for PRIVATE use only - generally only 1 hook should
*	be installed; there is a maximum of 255 hooks allowed - once
*	again though due to poor arbitration, the hook functions
*	are intended for private use only.  The addition of a
*	counter has been added to act as both a FLAG, and some
*	minimal protection without actually intending to serve
*	as an error condition.  Assuming we call this function
*	more then once in the future, the counter will suffice.
*
*	The only intended use of this function is to install a
*	program which copies text snips to the clipboard.device.
*	This utility will also have a read feature which CON:
*	will use.  Once a ConSnipHook is installed, the
*	internal pasting (into the circular buffer) is disabled.
*	This preserves V36 behavior, but also allows us to start
*	using the clipboard.device.
*
**********************************************************************
AddConSnipHook:
		move.l	a0,-(a7)
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ObtainSemaphore

		move.l	(a7)+,a1
		lea	cd_SelectionHooks(a6),a0
		LINKEXE	AddTail

		addq.b	#1,cd_Hooks(a6)

		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ReleaseSemaphore
		rts


*****i* console.device/RemConSnipHook ********************************
*
*   NAME
*	RemConSnipHook -- Remove a console snip hook
*
*   SYNOPSIS
*	RemConSnipHook(hook)
*	               A0
*
*	void RemConSnipHook( struct Hook * );
*
*   FUNCTION
*	This command removes a hook installed by AddConSnipHook.
*	The hook will not be called after this function returns.
*
*   INPUT
*	hook - the hook passed to AddConSnipHook.
*
**********************************************************************
RemConSnipHook:
		move.l	a0,-(a7)
		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ObtainSemaphore

		move.l	(a7)+,a1
		LINKEXE	Remove

		subq.b	#1,cd_Hooks(a6)

		lea	cd_SelectionSemaphore(a6),a0
		LINKEXE	ReleaseSemaphore
		rts

	END
@


36.7
log
@Hide the autodocs for the 4 functions in this module.
@
text
@d2 1
a2 1
**	$Id: snip.asm,v 36.6 90/10/22 17:06:32 darren Exp Locker: darren $
d206 18
d234 2
d267 2
@


36.6
log
@Release (public) info for
the 4 console.device functions in
this module.
@
text
@d2 1
a2 1
**	$Id: snip.asm,v 36.5 90/07/19 18:19:54 darren Exp Locker: darren $
d34 1
a34 1
******* console.device/GetConSnip ************************************
d94 1
a94 1
******* console.device/SetConSnip ************************************
d172 1
a172 1
******* console.device/AddConSnipHook ********************************
d221 1
a221 1
******* console.device/RemConSnipHook ********************************
@


36.5
log
@Set autodocs to internal.  Development
team agrees console mapping/snip
capabilities are private at this time.
@
text
@d2 1
a2 1
**	$Id: snip.asm,v 36.4 90/05/15 17:24:56 kodiak Exp Locker: darren $
d34 1
a34 1
*****i* console.device/GetConSnip ************************************
d94 1
a94 1
*****i* console.device/SetConSnip ************************************
d172 1
a172 1
*****i* console.device/AddConSnipHook ********************************
d221 1
a221 1
*****i* console.device/RemConSnipHook ********************************
@


36.4
log
@fix bad branch direction in GetConSnip
@
text
@d2 1
a2 1
**	$Id: snip.asm,v 36.3 90/04/20 09:45:38 kodiak Exp Locker: kodiak $
d34 1
a34 1
******* console.device/GetConSnip ************************************
d94 1
a94 1
******* console.device/SetConSnip ************************************
d172 1
a172 1
******* console.device/AddConSnipHook ********************************
d221 1
a221 1
******* console.device/RemConSnipHook ********************************
@


36.3
log
@first semi-tested big clip support
@
text
@d2 1
a2 1
**	$Id: snip.asm,v 36.2 90/04/13 13:32:53 kodiak Exp Locker: kodiak $
d73 1
a73 1
		bne.s	gcsRelease
@


36.2
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
a26 1
	XLVO	AllocMem		;
d28 1
a28 1
	XLVO	FreeMem			;
d56 3
a58 1
*	snip -- the data the console device would use for a paste
d64 3
d68 1
a68 1
		move.w	cd_SelectionActual(a6),d0
d76 3
a78 2
		move.l	cd_SelectionText(a6),a0
		move.w	cd_SelectionActual(a6),d1
d125 8
d134 1
d137 1
a137 1
scsSnipLen
d142 1
a142 9
		cmp.l	cd_SelectionSize(a6),d2
		ble.s	scsCopySnip

		;-- free old clip and allocate one big enough
		move.l	cd_SelectionSize(a6),d0
		beq.s	scsNoOldClip
		move.l	cd_SelectionText(a6),a1
		LINKEXE	FreeMem
scsNoOldClip:
d144 1
d146 2
a147 2
		LINKEXE	AllocMem
		move.l	d0,cd_SelectionText(a6)
d153 3
a155 1
		move.w	d2,cd_SelectionActual(a6)
d157 1
a157 1
		move.l	cd_SelectionText(a6),a1
@


36.1
log
@for 4.x rcs
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/console/RCS/snip.asm,v 36.0 90/02/26 20:29:21 kodiak Exp Locker: kodiak $
@


36.0
log
@initial version
@
text
@d2 1
a2 1
**	$Header$
@
