head     1.11;
branch   ;
access   ;
symbols  ;
locks    jerryh:1.11; strict;
comment  @ * @;


1.11
date     93.08.12.13.44.48;  author jerryh;  state Exp;
branches ;
next     1.10;

1.10
date     93.08.03.09.50.57;  author jerryh;  state Exp;
branches ;
next     1.9;

1.9
date     93.04.08.10.17.55;  author jerryh;  state Exp;
branches ;
next     1.8;

1.8
date     93.03.01.14.53.38;  author jerryh;  state Exp;
branches ;
next     1.7;

1.7
date     93.01.15.15.39.36;  author jerryh;  state Exp;
branches ;
next     1.6;

1.6
date     93.01.07.09.35.38;  author jerryh;  state Exp;
branches ;
next     1.5;

1.5
date     92.12.12.17.43.57;  author jerryh;  state Exp;
branches ;
next     1.4;

1.4
date     92.12.04.10.18.05;  author jerryh;  state Exp;
branches ;
next     1.3;

1.3
date     92.11.23.09.20.46;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.11.02.13.30.40;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.10.21.15.00.44;  author jerryh;  state Exp;
branches ;
next     ;


desc
@public include file for cd.device
<devices/cd.h>
@


1.11
log
@Includes proper .h files now.
@
text
@
#ifndef DEVICES_CD_H
#define DEVICES_CD_H
/*
**      $Id: cd.h,v 1.10 93/08/03 09:50:57 jerryh Exp Locker: jerryh $
**
**      cd.device include file
**
**      (C) Copyright 1992 Commodore-Amiga, Inc.
**          All Rights Reserved
*/

#include <exec/types.h>
#include <exec/nodes.h>


/**************************************************************************
 *                                                                        *
 *   CD Commands                                                          *
 *                                                                        *
 **************************************************************************/

#define CD_RESET             1
#define CD_READ              2
#define CD_WRITE             3
#define CD_UPDATE            4
#define CD_CLEAR             5
#define CD_STOP              6
#define CD_START             7
#define CD_FLUSH             8
#define CD_MOTOR             9
#define CD_SEEK             10
#define CD_FORMAT           11
#define CD_REMOVE           12
#define CD_CHANGENUM        13
#define CD_CHANGESTATE      14
#define CD_PROTSTATUS       15

#define CD_GETDRIVETYPE     18
#define CD_GETNUMTRACKS     19
#define CD_ADDCHANGEINT     20
#define CD_REMCHANGEINT     21
#define CD_GETGEOMETRY      22
#define CD_EJECT            23


#define CD_INFO             32
#define CD_CONFIG           33
#define CD_TOCMSF           34
#define CD_TOCLSN           35

#define CD_READXL           36

#define CD_PLAYTRACK        37
#define CD_PLAYMSF          38
#define CD_PLAYLSN          39
#define CD_PAUSE            40
#define CD_SEARCH           41

#define CD_QCODEMSF         42
#define CD_QCODELSN         43
#define CD_ATTENUATE        44

#define CD_ADDFRAMEINT      45
#define CD_REMFRAMEINT      46


/**************************************************************************
 *                                                                        *
 *   Device Driver Error Codes                                            *
 *                                                                        *
 **************************************************************************/

#define CDERR_OPENFAIL       (-1) /* device/unit failed to open           */
#define CDERR_ABORTED        (-2) /* request terminated early             */
#define CDERR_NOCMD          (-3) /* command not supported by device      */
#define CDERR_BADLENGTH      (-4) /* invalid length (IO_LENGTH/IO_OFFSET) */
#define CDERR_BADADDRESS     (-5) /* invalid address (IO_DATA misaligned) */
#define CDERR_UNITBUSY       (-6) /* device opens ok, but unit is busy    */
#define CDERR_SELFTEST       (-7) /* hardware failed self-test            */

#define CDERR_NotSpecified   20   /* general catchall                     */
#define CDERR_NoSecHdr       21   /* couldn't even find a sector          */
#define CDERR_BadSecPreamble 22   /* sector looked wrong                  */
#define CDERR_BadSecID       23   /* ditto                                */
#define CDERR_BadHdrSum      24   /* header had incorrect checksum        */
#define CDERR_BadSecSum      25   /* data had incorrect checksum          */
#define CDERR_TooFewSecs     26   /* couldn't find enough sectors         */
#define CDERR_BadSecHdr      27   /* another "sector looked wrong"        */
#define CDERR_WriteProt      28   /* can't write to a protected disk      */
#define CDERR_NoDisk         29   /* no disk in the drive                 */
#define CDERR_SeekError      30   /* couldn't find track 0                */
#define CDERR_NoMem          31   /* ran out of memory                    */
#define CDERR_BadUnitNum     32   /* asked for a unit > NUMUNITS          */
#define CDERR_BadDriveType   33   /* not a drive cd.device understands    */
#define CDERR_DriveInUse     34   /* someone else allocated the drive     */
#define CDERR_PostReset      35   /* user hit reset; awaiting doom        */
#define CDERR_BadDataType    36   /* data on disk is wrong type           */
#define CDERR_InvalidState   37   /* invalid cmd under current conditions */

#define CDERR_Phase          42   /* illegal or unexpected SCSI phase     */
#define CDERR_NoBoard        50   /* open failed for non-existant board   */



/**************************************************************************
 *                                                                        *
 * Configuration                                                          *
 *                                                                        *
 *       The drive is configured by TagList items defined as follows:     *
 *                                                                        *
 **************************************************************************/

#define TAGCD_PLAYSPEED         0x0001
#define TAGCD_READSPEED         0x0002
#define TAGCD_READXLSPEED       0x0003
#define TAGCD_SECTORSIZE        0x0004
#define TAGCD_XLECC             0x0005
#define TAGCD_EJECTRESET        0x0006


/**************************************************************************
 *                                                                        *
 * Information                                                            *
 *                                                                        *
 *      Information/Status structure describes current speed settings     *
 *      for read and play commands, sector size, audio attenuation        *
 *      precision, and drive status.                                      *
 *                                                                        *
 **************************************************************************/

struct CDInfo {
                            /*                                Default     */
    UWORD   PlaySpeed;      /* Audio play speed               (75)        */
    UWORD   ReadSpeed;      /* Data-rate of CD_READ command   (Max)       */
    UWORD   ReadXLSpeed;    /* Data-rate of CD_READXL command (75)        */
    UWORD   SectorSize;     /* Number of bytes per sector     (2048)      */
    UWORD   XLECC;          /* CDXL ECC enabled/disabled                  */
    UWORD   EjectReset;     /* Reset on eject enabled/disabled            */
    UWORD   Reserved1[4];   /* Reserved for future expansion              */

    UWORD   MaxSpeed;       /* Maximum speed drive can handle (75, 150)   */
    UWORD   AudioPrecision; /* 0 = no attenuator, 1 = mute only,          */
                            /* other = (# levels - 1)                     */
    UWORD   Status;         /* See flags below                            */
    UWORD   Reserved2[4];   /* Reserved for future expansion              */
    };


/* Flags for Status */

#define CDSTSB_CLOSED    0 /* Drive door is closed                        */
#define CDSTSB_DISK      1 /* A disk has been detected                    */
#define CDSTSB_SPIN      2 /* Disk is spinning (motor is on)              */
#define CDSTSB_TOC       3 /* Table of contents read.  Disk is valid.     */
#define CDSTSB_CDROM     4 /* Track 1 contains CD-ROM data                */
#define CDSTSB_PLAYING   5 /* Audio is playing                            */
#define CDSTSB_PAUSED    6 /* Pause mode (pauses on play command)         */
#define CDSTSB_SEARCH    7 /* Search mode (Fast Forward/Fast Reverse)     */
#define CDSTSB_DIRECTION 8 /* Search direction (0 = Forward, 1 = Reverse) */

#define CDSTSF_CLOSED    0x0001
#define CDSTSF_DISK      0x0002
#define CDSTSF_SPIN      0x0004
#define CDSTSF_TOC       0x0008
#define CDSTSF_CDROM     0x0010
#define CDSTSF_PLAYING   0x0020
#define CDSTSF_PAUSED    0x0040
#define CDSTSF_SEARCH    0x0080
#define CDSTSF_DIRECTION 0x0100


/* Modes for CD_SEARCH */

#define CDMODE_NORMAL   0         /* Normal play at current play speed    */
#define CDMODE_FFWD     1         /* Fast forward play (skip-play forward)*/
#define CDMODE_FREV     2         /* Fast reverse play (skip-play reverse)*/


/**************************************************************************
 *                                                                        *
 * Position Information                                                   *
 *                                                                        *
 *      Position information can be described in two forms: MSF and LSN   *
 *      form.  MSF (Minutes, Seconds, Frames) form is a time encoding.    *
 *      LSN (Logical Sector Number) form is frame (sector) count.         *
 *      The desired form is selected using the io_Flags field of the      *
 *      IOStdReq structure.  The flags and the union are described        *
 *      below.                                                            *
 *                                                                        *
 **************************************************************************/

struct RMSF {

    UBYTE   Reserved;       /* Reserved (always zero) */
    UBYTE   Minute;         /* Minutes (0-72ish)      */
    UBYTE   Second;         /* Seconds (0-59)         */
    UBYTE   Frame;          /* Frame   (0-74)         */
    };

union LSNMSF {

    struct  RMSF MSF;       /* Minute, Second, Frame  */
    ULONG   LSN;            /* Logical Sector Number  */      
    };


/**************************************************************************
 *                                                                        *
 * CD Transfer Lists                                                      *
 *                                                                        *
 *      A CDXL node is a double link node; however only single linkage    *
 *      is used by the device driver.  If you wish to construct a         *
 *      transfer list manually, it is only neccessary to define the       *
 *      mln_Succ pointer of the MinNode.  You may also use the Exec       *
 *      list functions by defining a List or MinList structure and by     *
 *      using the AddHead/AddTail functions to create the list.  This     *
 *      will create a double-linked list.  Although a double-linked       *
 *      list is not required by the device driver, you may wish use it    *
 *      for your own purposes.  Don't forget to initialize the            *
 *      the List/MinList before using it!                                 *
 *                                                                        *
 **************************************************************************/

struct  CDXL {

    struct MinNode    Node;            /* double linkage                  */
    char             *Buffer;          /* data destination (word aligned) */
    LONG              Length;          /* must be even # bytes            */
    LONG              Actual;          /* bytes transferred               */
    APTR              IntData;         /* interrupt server data segment   */
    VOID              (*IntCode)();    /* interrupt server code entry     */
    };


/**************************************************************************
 *                                                                        *
 * CD Table of Contents                                                   *
 *                                                                        *
 *      The CD_TOC command returns an array of CDTOC entries.             *
 *      Entry zero contains summary information describing how many       *
 *      tracks the disk has and the play-time of the disk.                *
 *      Entries 1 through N (N = Number of tracks on disk) contain        *
 *      information about the track.                                      *
 *                                                                        *
 **************************************************************************/

struct TOCSummary {

    UBYTE        FirstTrack; /* First track on disk (always 1)            */
    UBYTE        LastTrack;  /* Last track on disk                        */
    union LSNMSF LeadOut;    /* Beginning of lead-out track (end of disk) */
    };


struct TOCEntry {

    UBYTE        CtlAdr;     /* Q-Code info                  */
    UBYTE        Track;      /* Track number                 */
    union LSNMSF Position;   /* Start position of this track */
    };


union CDTOC {

    struct TOCSummary Summary;  /* First entry (0) is summary information */
    struct TOCEntry   Entry;    /* Entries 1-N are track entries          */
    };



/**************************************************************************
 *                                                                        *
 * Q-Code Packets                                                         *
 *                                                                        *
 *      Q-Code packets are only returned when audio is playing.           *
 *      Currently, only position packets are returned (ADR_POSITION)      *
 *      The other ADR_ types are almost never encoded on the disk         *
 *      and are of little use anyway.  To avoid making the QCode          *
 *      structure a union, these other ADR_ structures are not defined.   *
 *                                                                        *
 **************************************************************************/

struct QCode {

    UBYTE        CtlAdr;        /* Data type / QCode type           */
    UBYTE        Track;         /* Track number                     */
    UBYTE        Index;         /* Track subindex number            */
    UBYTE        Zero;          /* The "Zero" byte of Q-Code packet */
    union LSNMSF TrackPosition; /* Position from start of track     */
    union LSNMSF DiskPosition;  /* Position from start of disk      */
    };


#define CTLADR_CTLMASK 0xF0   /* Control field */

#define CTL_CTLMASK    0xD0   /* To be ANDed with CtlAdr before compared  */

#define CTL_2AUD       0x00   /* 2 audio channels without preemphasis     */
#define CTL_2AUDEMPH   0x10   /* 2 audio channels with preemphasis        */
#define CTL_4AUD       0x80   /* 4 audio channels without preemphasis     */
#define CTL_4AUDEMPH   0x90   /* 4 audio channels with preemphasis        */
#define CTL_DATA       0x40   /* CD-ROM Data                              */

#define CTL_COPYMASK   0x20   /* To be ANDed with CtlAdr before compared  */

#define CTL_COPY       0x20   /* When true, this audio/data can be copied */

#define CTLADR_ADRMASK 0x0F   /* Address field                            */

#define ADR_POSITION   0x01   /* Q-Code is position information           */
#define ADR_UPC        0x02   /* Q-Code is UPC information (not used)     */
#define ADR_ISRC       0x03   /* Q-Code is ISRC (not used)                */
#define ADR_HYBRID     0x05   /* This disk is a hybrid disk               */


#endif
@


1.10
log
@added proper header.
@
text
@d5 1
a5 1
**      $Id: $
d13 4
d121 1
a121 1

d179 1
a179 1

d235 1
a235 1

d271 1
a271 1

@


1.9
log
@no effective change.
@
text
@d2 10
a11 2
#ifndef CD_H
#define CD_H
@


1.8
log
@modified to be 80 columns.
@
text
@d164 2
a165 2
#define CDMODE_FFWD     1         /* Fast forward play (skip-play forward */
#define CDMODE_FREV     2         /* Fast reverse play (skip-play reverse */
@


1.7
log
@check for HYBRID disk made now.
@
text
@d5 5
a9 5
/************************************************************************
 *                                                                      *
 *   CD Commands                                                        *
 *                                                                      *
 ************************************************************************/
d56 45
a100 46
/************************************************************************
 *                                                                      *
 *   Device Driver Error Codes                                          *
 *                                                                      *
 ************************************************************************/

#define CDERR_OPENFAIL          (-1)    /* device/unit failed to open                  */
#define CDERR_ABORTED           (-2)    /* request terminated early [after AbortIO()]  */
#define CDERR_NOCMD             (-3)    /* command not supported by device             */
#define CDERR_BADLENGTH         (-4)    /* not a valid length (IO_LENGTH or IO_OFFSET) */
#define CDERR_BADADDRESS        (-5)    /* invalid address (IO_DATA misaligned)        */
#define CDERR_UNITBUSY          (-6)    /* device opens ok, but requested unit is busy */
#define CDERR_SELFTEST          (-7)    /* hardware failed self-test                   */


#define CDERR_NotSpecified      20      /* general catchall                           */
#define CDERR_NoSecHdr          21      /* couldn't even find a sector                */
#define CDERR_BadSecPreamble    22      /* sector looked wrong                        */
#define CDERR_BadSecID          23      /* ditto                                      */
#define CDERR_BadHdrSum         24      /* header had incorrect checksum              */
#define CDERR_BadSecSum         25      /* data had incorrect checksum                */
#define CDERR_TooFewSecs        26      /* couldn't find enough sectors               */
#define CDERR_BadSecHdr         27      /* another "sector looked wrong"              */
#define CDERR_WriteProt         28      /* can't write to a protected disk            */
#define CDERR_NoDisk            29      /* no disk in the drive                       */
#define CDERR_SeekError         30      /* couldn't find track 0                      */
#define CDERR_NoMem             31      /* ran out of memory                          */
#define CDERR_BadUnitNum        32      /* asked for a unit > NUMUNITS                */
#define CDERR_BadDriveType      33      /* not a drive that cd.device understands     */
#define CDERR_DriveInUse        34      /* someone else allocated the drive           */
#define CDERR_PostReset         35      /* user hit reset; awaiting doom              */
#define CDERR_BadDataType       36      /* data on disk is wrong type                 */
#define CDERR_InvalidState      37      /* command not valid under current conditions */

#define CDERR_Phase             42      /* illegal or unexpected SCSI phase           */
#define CDERR_NoBoard           50      /* open failed for non-existant board         */



/************************************************************************
 *                                                                      *
 * Configuration                                                        *
 *                                                                      *
 *       The drive is configured by TagList items defined as follows:   *
 *                                                                      *
 ************************************************************************/
d110 9
a118 9
/************************************************************************
 *                                                                      *
 * Information                                                          *
 *                                                                      *
 *      Information/Status structure describes current speed settings   *
 *      for read and play commands, sector size, audio attenuation      *
 *      precision, and drive status.                                    *
 *                                                                      *
 ************************************************************************/
d121 14
a134 13

    UWORD   PlaySpeed;      /* Audio play speed                      (Default = 75)         */
    UWORD   ReadSpeed;      /* Data-rate of CD_READ command          (Default = MaxSpeed)   */
    UWORD   ReadXLSpeed;    /* Data-rate of CD_READXL command        (Default = 75)         */
    UWORD   SectorSize;     /* Number of bytes per sector            (Default = 2048)       */
    UWORD   XLECC;          /* CDXL ECC enabled/disabled                                    */
    UWORD   EjectReset;     /* Reset on eject enabled/disabled                              */
    UWORD   Reserved1[4];   /* Reserved for future expansion                                */

    UWORD   MaxSpeed;       /* Maximum speed drive can handle (Blocks/second - 75, 150)     */
    UWORD   AudioPrecision; /* 0 = no attenuator, 1 = mute only, other = (# levels - 1)     */
    UWORD   Status;         /* See flags below                                              */
    UWORD   Reserved2[4];   /* Reserved for future expansion                                */
d140 19
a158 19
#define CDSTSB_CLOSED       0           /* Drive door is closed                                      */
#define CDSTSB_DISK         1           /* A disk has been detected                                  */
#define CDSTSB_SPIN         2           /* Disk is spinning (motor is on)                            */
#define CDSTSB_TOC          3           /* Table of contents has been read.  Disk is valid.          */
#define CDSTSB_CDROM        4           /* Track 1 contains CD-ROM data (only valid if TOC is valid) */
#define CDSTSB_PLAYING      5           /* Audio is playing                                          */
#define CDSTSB_PAUSED       6           /* Pause mode (is paused/will pause on play command)         */
#define CDSTSB_SEARCH       7           /* Search mode (Fast Forward/Fast Reverse)                   */
#define CDSTSB_DIRECTION    8           /* Search direction (0 = Forward, 1 = Reverse)               */

#define CDSTSF_CLOSED       0x0001
#define CDSTSF_DISK         0x0002
#define CDSTSF_SPIN         0x0004
#define CDSTSF_TOC          0x0008
#define CDSTSF_CDROM        0x0010
#define CDSTSF_PLAYING      0x0020
#define CDSTSF_PAUSED       0x0040
#define CDSTSF_SEARCH       0x0080
#define CDSTSF_DIRECTION    0x0100
d163 3
a165 3
#define CDMODE_NORMAL   0       /* Normal play at current play speed    */
#define CDMODE_FFWD     1       /* Fast forward play (skip-play forward */
#define CDMODE_FREV     2       /* Fast reverse play (skip-play reverse */
d168 12
a179 12
/************************************************************************
 *                                                                      *
 * Position Information                                                 *
 *                                                                      *
 *      Position information can be described in two forms: MSF and LSN *
 *      form.  MSF (Minutes, Seconds, Frames) form is a time encoding.  *
 *      LSN (Logical Sector Number) form is frame (sector) count.       *
 *      The desired form is selected using the io_Flags field of the    *
 *      IOStdReq structure.  The flags and the union are described      *
 *      below.                                                          *
 *                                                                      *
 ************************************************************************/
d191 2
a192 2
    struct  RMSF MSF;       /* Minute, Second, Frame */
    ULONG   LSN;            /* Logical Sector Number */      
d196 16
a211 16
/************************************************************************
 *                                                                      *
 * CD Transfer Lists                                                    *
 *                                                                      *
 *      A CDXL node is a double link node; however only single linkage  *
 *      is used by the device driver.  If you wish to construct a       *
 *      transfer list manually, it is only neccessary to define the     *
 *      mln_Succ pointer of the MinNode.  You may also use the Exec     *
 *      list functions by defining a List or MinList structure and by   *
 *      using the AddHead/AddTail functions to create the list.  This   *
 *      will create a double-linked list.  Although a double-linked     *
 *      list is not required by the device driver, you may wish use it  *
 *      for your own purposes.  Don't forget to initialize the          *
 *      the List/MinList before using it!                               *
 *                                                                      *
 ************************************************************************/
d215 6
a220 6
    struct MinNode    Node;             /* double linkage                  */
    char             *Buffer;           /* data destination (word aligned) */
    LONG              Length;           /* must be even # bytes            */
    LONG              Actual;           /* bytes transferred               */
    APTR              IntData;          /* interrupt server data segment   */
    VOID              (*IntCode)();     /* interrupt server code entry     */
d224 11
a234 11
/************************************************************************
 *                                                                      *
 * CD Table of Contents                                                 *
 *                                                                      *
 *      The CD_TOC command returns an array of CDTOC entries.           *
 *      Entry zero contains summary information describing how many     *
 *      tracks the disk has and the play-time of the disk.              *
 *      Entries 1 through N (N = Number of tracks on disk) contain      *
 *      information about the track.                                    *
 *                                                                      *
 ************************************************************************/
d238 3
a240 3
    UBYTE        FirstTrack;    /* First track on disk (always 1)                 */
    UBYTE        LastTrack;     /* Last track on disk                             */
    union LSNMSF LeadOut;       /* Beginning of lead-out track (i.e. end of disk) */
d246 3
a248 3
    UBYTE        CtlAdr;        /* Q-Code info                  */
    UBYTE        Track;         /* Track number                 */
    union LSNMSF Position;      /* Start position of this track */
d260 11
a270 11
/************************************************************************
 *                                                                      *
 * Q-Code Packets                                                       *
 *                                                                      *
 *      Q-Code packets are only returned when audio is playing.         *
 *      Currently, only position packets are returned (ADR_POSITION)    *
 *      The other ADR_ types are almost never encoded on the disk       *
 *      and are of little use anyway.  To avoid making the QCode        *
 *      structure a union, these other ADR_ structures are not defined. *
 *                                                                      *
 ************************************************************************/
d283 1
a283 1
#define CTLADR_CTLMASK  0xF0    /* Control field */
d285 1
a285 1
#define CTL_CTLMASK     0xD0    /* To be ANDed with CtlAdr before compared with the following */
d287 11
a297 11
#define CTL_2AUD        0x00    /* 2 audio channels without preemphasis                       */
#define CTL_2AUDEMPH    0x10    /* 2 audio channels with preemphasis                          */
#define CTL_4AUD        0x80    /* 4 audio channels without preemphasis                       */
#define CTL_4AUDEMPH    0x90    /* 4 audio channels with preemphasis                          */
#define CTL_DATA        0x40    /* CD-ROM Data                                                */

#define CTL_COPYMASK    0x20    /* To be ANDed with CtlAdr before compared with the following */

#define CTL_COPY        0x20    /* When true, this audio/data can be copied                   */

#define CTLADR_ADRMASK  0x0F    /* Address field */
d299 4
a302 4
#define ADR_POSITION    0x01    /* Q-Code is position information                             */
#define ADR_UPC         0x02    /* Q-Code is Universal Product Code information (not used)    */
#define ADR_ISRC        0x03    /* Q-Code is International Standard Recording Code (not used) */
#define ADR_HYBRID      0x05    /* This disk is a hybrid disk (for multi-session support)     */
@


1.6
log
@Change value of some tag items.
@
text
@d302 1
@


1.5
log
@fields to CDINFO structure.
@
text
@d103 6
a108 6
#define TAGCD_PLAYSPEED         (TAG_USER|0x0001)
#define TAGCD_READSPEED         (TAG_USER|0x0002)
#define TAGCD_READXLSPEED       (TAG_USER|0x0003)
#define TAGCD_SECTORSIZE        (TAG_USER|0x0004)
#define TAGCD_XLECC             (TAG_USER|0x0005)
#define TAGCD_EJECTRESET        (TAG_USER|0x0006)
d278 1
a279 1
    union LSNMSF TrackPosition; /* Position from start of track     */
@


1.4
log
@removed some fields in CDINFO
@
text
@d127 2
@


1.3
log
@Added comments.
@
text
@d37 2
a38 1
#define CD_TOC              34
d40 1
a40 1
#define CD_READXL           35
d42 9
a50 7
#define CD_PLAYTRACK        36
#define CD_PLAY             37
#define CD_PAUSE            38
#define CD_SEARCH           39

#define CD_QCODE            40
#define CD_ATTENUATE        41
d52 2
a53 2
#define CD_ADDFRAMEINT      42
#define CD_REMFRAMEINT      43
a126 2
    UWORD   XLECC;          /* ECC configuration of ReadXL command   (Default = 1)          */
    UWORD   EjectReset      /* Reset computer on CD eject            (Default = 0)          */
a177 3

IOB_LSNFORM     6           /* Select LSN format for time encoding (used in IOStdReq.io_Flags) */
IOF_LSNFORM     0x20
@


1.2
log
@all kinds of new stuff.
@
text
@d92 25
a116 9
************************************************************************
*                                                                      *
* Configuration                                                        *
*                                                                      *
*       The configuration structure is used to set or report drive     *
*       speeds and/or sector sizes.  Configurations are set using      *
*       the CD_CONFIG command and are read using the CD_INFO command.  *
*                                                                      *
************************************************************************
a117 19
struct CDConfig {

    UWORD PlaySpeed;    /* Audio play speed               (Default = 75)       */
    UWORD ReadSpeed;    /* Data-rate of CD_READ command   (Default = MaxSpeed) */
    UWORD ReadXLSpeed;  /* Data-rate of CD_READXL command (Default = 75)       */
    UWORD SectorSize;   /* Number of bytes per sector                          */
    }

*
************************************************************************
*                                                                      *
* Information                                                          *
*                                                                      *
*      Information/Status structure describes current speed settings   *
*      for read and play commands, sector size, audio attenuation      *
*      precision, and drive status.                                    *
*                                                                      *
************************************************************************

d120 7
a126 1
    STRUCT CDConfig Config;         /* Current drive speeds and sector size                     */
d128 4
a131 3
    UWORD           MaxSpeed;       /* Maximum speed drive can handle (Blocks/second - 75, 150) */
    UWORD           AudioPrecision; /* 0 = no attenuator, 1 = mute only, other = (# levels - 1) */
    UWORD           Status;         /* See flags below                                          */
@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
/* CD Commands */
d5 6
d36 2
a37 1
#define CD_TOC              33
d39 1
a39 1
#define CD_READXL           34
d41 7
a47 11
#define CD_PLAYTRACK        35
#define CD_PLAY             36
#define CD_PAUSE            37
#define CD_PLAYMODE         38

#define CD_QCODE            39
#define CD_ATTENUATE        40

#define CD_PLAYSPEED        41
#define CD_READSPEED        42
#define CD_READXLSPEED      43
d49 2
a50 2
#define CD_ADDFRAMEINT      44
#define CD_REMFRAMEINT      45
d53 6
d92 28
a119 9
/************************************************************************
 *                                                                      *
 * Information                                                          *
 *                                                                      *
 *      Information/Status structure describes current speed settings   *
 *      for read and play commands, play mode and state, and drive      *
 *      status.                                                         *
 *                                                                      *
 ************************************************************************/
d123 1
a123 4
    UWORD MaxSpeed;         /* Maximum speed drive can handle (Blocks/second - 75, 150) */
    UWORD PlaySpeed;        /* Audio play speed               (Default = 75)            */
    UWORD ReadSpeed;        /* Data-rate of CD_READ command   (Default = MaxSpeed)      */
    UWORD ReadXLSpeed;      /* Data-rate of CD_READXL command (Default = 75)            */
d125 3
a127 5
    UWORD AudioPrecision;   /* Number of attenuation levels - 1.  0 = no attenuator     */
                            /* 1 = mute only, other = precision.                        */
    UWORD Status;           /* See flags below                                          */

    ULONG Reserved[5];      /* Reserved for future use                                  */
d133 9
a141 10
#define CDSTSB_CLOSED       0   /* Drive door is closed                              */
#define CDSTSB_DISK         1   /* A disk has been detected                          */
#define CDSTSB_SPIN         2   /* Disk is spinning (motor is on)                    */
#define CDSTSB_TOC          3   /* Table of contents has been read.  Disk is valid.  */
#define CDSTSB_CDROM        4   /* Track 1 contains CD-ROM data                      */
#define CDSTSB_READING      5   /* Data is being read                                */
#define CDSTSB_PLAYING      6   /* Audio is playing                                  */
#define CDSTSB_PAUSED       7   /* Pause mode (is paused/will pause on play command) */
#define CDSTSB_SEARCH       8   /* Search mode (Fast Forward/Fast Reverse)           */
#define CDSTSB_DIRECTION    9   /* Search direction (0 = Forward, 1 = Reverse)       */
d148 4
a151 5
#define CDSTSF_READING      0x0020
#define CDSTSF_PLAYING      0x0040
#define CDSTSF_PAUSED       0x0080
#define CDSTSF_SEARCH       0x0100
#define CDSTSF_DIRECTION    0x0200
d154 1
a154 1
/* Modes for PlayMode */
d196 10
a205 3
 *      To create transfer lists, use an Exec List or MinList structure *
 *      and AddHead/AddTail nodes of the transfer structure below.      *
 *      Don't forget to initialize the List/MinList before using it!    *
d211 6
a216 5
    struct  MinNode Node;       /* double linkage       */
    char   *Buffer;             /* data (word aligned)  */
    LONG    Length;             /* must be even # bytes */
    void    (*DoneFunc)();      /* called when done     */
    LONG    Actual;             /* bytes transferred    */
d281 1
a281 1
#define CTL_DATAMASK    0xD0    /* To be ANDed with CtlAdr before compared with the following */
d300 1
a300 1

@
