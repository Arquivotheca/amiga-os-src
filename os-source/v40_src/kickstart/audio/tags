ADALLOC_MAXPREC	audio.h 21
ADALLOC_MINPREC	audio.h 20
ADAbortIO	device.asm	/^ADAbortIO/
ADBeginIO	device.asm	/^ADBeginIO/
ADCMD_ALLOCATE	audio.h 29
ADCMD_FINISH	audio.h 25
ADCMD_FREE	audio.h 23
ADCMD_LOCK	audio.h 27
ADCMD_PERVOL	audio.h 26
ADCMD_SETPREC	audio.h 24
ADCMD_WAITCYCLE	audio.h 28
ADClose	device.asm	/^ADClose/
ADDEVB_EXPUNGE	device.h 35
ADDEVB_UPDATEALLOC	device.h 37
ADDEVF_EXPUNGE	device.h 36
ADDEVF_UPDATEALLOC	device.h 38
ADEndModule	endmodule.asm	/^ADEndModule/
ADExpunge	device.asm	/^ADExpunge/
ADExtFunc	device.asm	/^ADExtFunc/
ADHARD_CHANNELS	audio.h 18
ADIOB_NOWAIT	audio.h 35
ADIOB_PERVOL	audio.h 31
ADIOB_SYNCCYCLE	audio.h 33
ADIOB_WRITEMESSAGE	audio.h 37
ADIOERR_ALLOCFAILED	audio.h 41
ADIOERR_CHANNELSTOLEN	audio.h 42
ADIOERR_NOABORT	device.h 28
ADIOERR_NOALLOCATION	audio.h 40
ADIOF_NOWAIT	audio.h 36
ADIOF_PERVOL	audio.h 32
ADIOF_SYNCCYCLE	audio.h 34
ADIOF_WRITEMESSAGE	audio.h 38
ADOpen	device.asm	/^ADOpen/
ADUNITB_STOPPED	device.h 30
ADUNITB_WAITLIST	device.h 32
ADUNITF_STOPPED	device.h 31
ADUNITF_WAITLIST	device.h 33
AUDIONAME	audio.h 16
AudioDevice	device.h 64
AudioUnit	device.h 40
CADAbortIO	cbeginio.c	/^CADAbortIO(ioa, ad)$/
CADBeginIO	cbeginio.c	/^CADBeginIO(ioa, ad)$/
CADClose	cdevice.c	/^CADClose(ioa, ad)$/
CADExpunge	cdevice.c	/^CADExpunge(ad)$/
CADExtFunc	cdevice.c	/^CADExtFunc()$/
CADInit	cdevice.c	/^struct AudioDevice *CADInit(ad, segList)$/
CADOpen	cdevice.c	/^CADOpen(num, ioa, flags, ad)$/
IOAudio	audio.h 44
_ADName	residenttag.asm	/^_ADName/
_AudioInterrupt	interrupt.asm	/^_AudioInterrupt/
_CLastCycle	interrupt.asm	/^_CLastCycle/
_CQueueReplyList	interrupt.asm	/^_CQueueReplyList/
_CReplyQueue	interrupt.asm	/^_CReplyQueue/
_CStopWrite	interrupt.asm	/^_CStopWrite/
_Cycles	interrupt.asm	/^_Cycles/
_NewPlay	interrupt.asm	/^_NewPlay/
_PerVol	interrupt.asm	/^_PerVol/
_Restart	interrupt.asm	/^_Restart/
_SoftInterrupt	interrupt.asm	/^_SoftInterrupt/
_SysBase	sysbase.asm	/^_SysBase/
abortBuffer	cbeginio.c	/^abortBuffer(chan)$/
abortFromList	cbeginio.c	/^abortFromList(ioa, list, ad)$/
abortNext	cbeginio.c	/^abortNext(chan, ad)$/
alloc	cbeginio.c	/^alloc(ioa, ad)$/
flush	cbeginio.c	/^flush(chan, ad)$/
newKey	cbeginio.c	/^newKey(ioa, ad)$/
queueAbortIO	cbeginio.c	/^queueAbortIO(ioa, ad)$/
queueAbortList	cbeginio.c	/^queueAbortList(list, ad)$/
reset	cbeginio.c	/^reset(chan, ad)$/
