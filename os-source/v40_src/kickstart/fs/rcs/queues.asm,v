head     1.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.9
date     92.07.10.17.30.32;  author jesup;  state Exp;
branches ;
next     1.8;

1.8
date     92.04.09.00.50.55;  author jesup;  state Exp;
branches ;
next     1.7;

1.7
date     90.06.05.13.05.25;  author steveb;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.06.15.21.15;  author steveb;  state Exp;
branches ;
next     1.5;

1.5
date     89.12.08.01.08.08;  author steveb;  state Exp;
branches ;
next     1.4;

1.4
date     89.12.06.10.55.59;  author steveb;  state Exp;
branches ;
next     1.3;

1.3
date     89.06.26.16.33.24;  author steveb;  state Exp;
branches ;
next     1.2;

1.2
date     89.04.10.17.07.23;  author steveb;  state Exp;
branches ;
next     1.1;

1.1
date     89.03.13.16.47.01;  author steveb;  state Exp;
branches ;
next     ;


desc
@1.3.1
@


1.9
log
@.s opt
@
text
@		SECTION	filesystem,CODE

		NOLIST
		INCLUDE	"exec/types.i"
		INCLUDE	"exec/io.i"
		INCLUDE	"globals.i"
		INCLUDE	"private.i"
		INCLUDE	"printf.mac"
		LIST

;		DEBUGENABLE

		XDEF	AddHash,UnHash,FindHash,FreeBuffer

;==============================================================================
; FreeBuffer( Buffer )
;	    	a0
; Removes the buffer from whatever queue it's on, UnHashes it, and frees it
;==============================================================================
FreeBuffer:	move.l	a0,a1
		move.l	a1,d1			Remove doesn't touch this
		REMOVE
		movea.l	d1,a0			remove from hash table too
		bsr.s	UnHash
		movea.l	d0,a0
		clr.w	cb_QueueType(a0)
		move.l	FreeBufferQueue(a5),(a0)
		move.l	a0,FreeBufferQueue(a5)
		rts

;==============================================================================
; AddHash( Buffer )
;	     a0
;
; Inserts a cache buffer into the hash table based on the key number contained
; in the cache buffer header.  Nothing is done to the queues that this cache
; buffer belongs to.  This is handled by EnQueue and DeQueue.
;==============================================================================
AddHash		movea.l	CacheHash(a5),a1	address of hash table
		moveq.l	#127,d0			calculate hash address
		and.w	cb_Key+2(a0),d0		(key & 127)<<2
		lsl.w	#2,d0
		adda.w	d0,a1			a1 points to first entry
		move.l	(a1),cb_NextHash(a0)	link us to the next
		move.l	a0,(a1)			and put us in the table
		rts

;==============================================================================
; Buffer = UnHash( Buffer )
;   d0		     a0
;
; Removes a buffer from the hash table but does not affect the queue links.
; The buffer MUST be in the hash table or this routine will crash dismally.
;==============================================================================
UnHash		movea.l	CacheHash(a5),a1	address of hash table
		moveq.l	#127,d0			calculate hash address
	IFD DEBUG_CODE
	  moveq #0,d1
	ENDC
		and.w	cb_Key+2(a0),d0		(key & 127)<<2
		lsl.w	#2,d0
		adda.w	d0,a1			a1 points to first entry
UHLoop		cmpa.l	(a1),a0			is this the one we want
		beq.s	FoundBuffer
		movea.l	(a1),a1
	IFD DEBUG_CODE
	  move.l a1,d0
	  bne.s  1$
 printf <'BAD UnHash of $%lx (block %ld), q/state $%lx'>,a0,cb_Key(a0),cb_QueueType(a0)
	  moveq	#1,d1
	  move.l a0,d0
	  rts
1$:
	ENDC
		lea.l	cb_NextHash(a1),a1
		bra.s	UHLoop
FoundBuffer
		move.l	cb_NextHash(a0),(a1)	unlink us
		move.l	a0,d0			return address of buffer
		rts

;==============================================================================
; Buffer = FindHash( Keynum )
;   d0		       d0
;
; Locates a buffer containing the given key if it exists else returns 0.  The
; queue that this buffer is on is determined by the cb_QueueType field.
;==============================================================================
FindHash	moveq.l	#127,d1
		and.w	d0,d1
		lsl.w	#2,d1			calculate the entry offset
		movea.l	CacheHash(a5),a0
		move.l	0(a0,d1.w),d1		and get the first buffer ptr
		beq.s	FindDone
FindHLoop	movea.l	d1,a0
		cmp.l	cb_Key(a0),d0		correct key ?
		beq.s	FindDone		yep, we found our buffer
		move.l	cb_NextHash(a0),d1	nope, try for another
		bne.s	FindHLoop
FindDone	move.l	d1,d0			return 0 or buffer address
		rts

		END


@


1.8
log
@Added FreeBuffer, debugs
@
text
@d24 1
a24 1
		bsr	UnHash
@


1.7
log
@
@
text
@d13 18
a30 1
		XDEF	AddHash,UnHash,FindHash
d57 3
d66 9
d77 2
a78 1
FoundBuffer	move.l	cb_NextHash(a0),(a1)	unlink us
@


1.6
log
@changed everything to use exec lists (except cache hash chains) faster now
@
text
@@


1.5
log
@
@
text
@d13 1
a13 2
		XDEF	AddHash,UnHash,FindHash,EnQueue,DeQueue

a14 7
; The following routines have been added into the fast filing system pretty
; late in developement.  They are for speeding up the cache buffer allocation
; and searching routines.  Because of these routines, there may be a little
; redundancy in some other sections of the code.  Oh well!
;==============================================================================

;==============================================================================
d63 3
a65 3
		movea.l	0(a0,d1.w),a0		and get the first buffer ptr
FindHLoop	cmpa.w	#0,a0			are we finished ?
		beq.s	FindDone		yep, buffer not there
d68 3
a70 3
		movea.l	cb_NextHash(a0),a0	nope, try for another
		bra.s	FindHLoop
FindDone	move.l	a0,d0			return 0 or buffer address
a71 78

;==============================================================================
; EnQueue( queue, buffer )
;	     a0	    a1
;
; Appends a buffer to the end of the given queue.  Note: the cb_QueueType field
; MUST be filled in before calling this routine.  a0 is actually a pointer to
; queue header pointer itself. ie. lea.l ValidBufferQueue(a5),a0.  This only
; works with queues that have the tail pointer following the head pointer.
; Doesn't add the buffer into the hash table, this must be done separately.
;==============================================================================
EnQueue		move.l	a2,-(sp)
		movea.l	a0,a2			save queue pointer
		clr.l	cb_NextBuff(a1)		no links right now
		move.l	4(a2),cb_PrevBuff(a1)	last becomes previous to this
		bne.s	10$			it was not an empty list
		move.l	a1,(a2)			make ourselves the first
		bra.s	20$			and last
10$		movea.l	4(a2),a0
		move.l	a1,cb_NextBuff(a0)	link us into previous
20$		move.l	a1,4(a2)		and we are now last
		movea.l	(sp)+,a2
		rts

;==============================================================================
; queue = DeQueue( queue, buffer )
;   d0		     a0	    a1
;
; Takes a buffer from the given queue.  Only works with queues that have a tail
; pointer following the head pointer in memory.  Doesn't remove the buffer from
; the cache buffer hash table, this must be done separately.  The buffer MUST
; be in the queue for this routine to work properly.
;==============================================================================
DeQueue		move.l	a2,-(sp)
		tst.l	cb_PrevBuff(a1)		are we first
		bne.s	10$			no
		move.l	cb_NextBuff(a1),(a0)	yes, copy link back
		bra.s	20$
10$		movea.l	cb_PrevBuff(a1),a2
		move.l	cb_NextBuff(a1),cb_NextBuff(a2)
20$		tst.l	cb_NextBuff(a1)		are we last
		bne.s	30$			nope
		move.l	cb_PrevBuff(a1),4(a0)	yes, previous is now last
		bra.s	40$
30$		movea.l	cb_NextBuff(a1),a2
		move.l	cb_PrevBuff(a1),cb_PrevBuff(a2)
40$		move.l	a1,d0			return address of buffer
		move.l	(sp)+,a2
		rts

;==============================================================================
;Debug routine to show a lot of info about buffers currently on the valid queue
;==============================================================================
	IFD DEBUG_CODE
		XDEF	ShowBuffers
ShowBuffers	printf <'Current state of cache buffers on the valid queue\n'>
		printf <'=================================================\n'>
		movea.l	ValidBufferQueue(a5),a0

ShowBuffLoop	cmpa.w	#0,a0			at the end ?
		beq	BuffersShown		yep, quit now
		tst.w	cb_Size(a0)
		beq.s	ShowData
		printf <'(%lx HDR ) '>,a0	show address and type
		bra.s	ShowOther
ShowData	printf <'(%lx DATA) '>,a0	show address and type
ShowOther	printf <'Next=%lx Prev=%lx '>,cb_NextBuff(a0),cb_PrevBuff(a0)
		cmpi.w	#HASHVALID,cb_QueueType(a0)
		beq.s	RightQueue
		printf <'**INVALID BUFFER**\n'>
		bra.s	ShowNext
RightQueue	printf <'Buff=%lx Key=%ld\n'>,cb_Buff(a0),cb_Key(a0)
ShowNext	movea.l	(a0),a0
		bra	ShowBuffLoop

BuffersShown	printf <'=================================================\n\n'>
		rts
	ENDC
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@
@
text
@@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
		XDEF	AddHash,UnHash,FindHash,EnQueue,DeQueue,CodeEnd
a158 1
CodeEnd:
@
