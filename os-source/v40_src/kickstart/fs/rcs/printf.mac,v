head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @; @;


1.3
date     92.04.09.01.52.59;  author jesup;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.06.10.58.16;  author steveb;  state Exp;
branches ;
next     1.1;

1.1
date     89.03.13.16.50.53;  author steveb;  state Exp;
branches ;
next     ;


desc
@1.3.1
@


1.3
log
@*** empty log message ***
@
text
@;===========================================================================
; MACRO to provide a printf debugging call, use it like the 'C' version. ie.
;
;	printf	<'value=%ld pointer=%lx count=%d\n'>,d0,a0,d1
;	printf	<'program name = %s\n'>,#ProgName
;	printf	<'port name = %s\n'>,a0
;	printf	<'character received = \t%c\n'>,d0
;	printf	<'Program length = %d\n'>,#(ProgEnd-ProgStart)
;	printf	<'%c'>,#7
;	printf	<'ffp value = %f\n'>,d0
;
; Your program must include this macro file and link with sprintf.lib to
; work correctly with serial output.  If you want output to go to the CLI
; window then you must link with cprintf.lib instead.  Whichever version
; you decide to use, you must FIRST execute the DEBUGINIT macro before
; making use of the printf macro.  If you linked with cprintf.lib then you
; must also execute the DEBUGKILL macro before exiting your program. (this
; is because the cprintf function uses the DOS library).  A maximum of 8
; arguments can be sent to the printf function.  Executing DEBUGENABLE sets
; a constant called DEBUG_CODE which is tested by the debug macros to see
; if macro expansion should be performed.  This means you can leave all of
; your diagnostic printf's in place and just comment out the DEBUGENABLE call
; to strip all debug code from your program.  This works because all of the
; actual code for the printf functions is contained in libraries and is
; only linked to your program if a routine in this library is referenced.
;
; IMPORTANT NOTE:
; You should only call DEBUGINIT once in your program (usually in the first
; module).  If you need to use printf in other object modules of the same
; program then you should just use the DEBUGENABLE macro.  This merely sets
; the DEBUG_CODE variable and does not try to call the init routine again.
; On the same note, you should only call DEBUGKILL once in your program
; too (usually just before exiting your code).
;==========================================================================

printf	MACRO
	IFD DEBUG_CODE				; only if DEBUGINIT called
	NOLIST
		movem.l	d0/d1/a0/a1,-(sp)
; first stack up to eight arguments for the printf routine
	IFGE	NARG-9
		LIST
		move.l	\9,-(sp)		; stack arg8
		NOLIST
	ENDC
	IFGE	NARG-8
		LIST
		move.l	\8,-(sp)		; stack arg7
		NOLIST
	ENDC
	IFGE	NARG-7
		LIST
		move.l	\7,-(sp)		; stack arg6
		NOLIST
	ENDC
	IFGE	NARG-6
		LIST
		move.l	\6,-(sp)		; stack arg5
		NOLIST
	ENDC
	IFGE	NARG-5
		LIST
		move.l	\5,-(sp)		; stack arg4
		NOLIST
	ENDC
	IFGE	NARG-4
		LIST
		move.l	\4,-(sp)		; stack arg3
		NOLIST
	ENDC
	IFGE	NARG-3
		LIST
		move.l	\3,-(sp)		; stack arg2
		NOLIST
	ENDC
	IFGE	NARG-2
		LIST
		move.l	\2,-(sp)		; stack arg1
		NOLIST
	ENDC
; Now the actual printf call itself, only if there is an argument string
	IFGE	NARG-1
STKOFF	SET	NARG<<2				; actual stack space used
	XREF	_kprintf				; in case not used before
		LIST
		pea.l	str\@@			; push string address
		jsr	_kprintf			; call printf function
		lea.l	STKOFF(sp),sp		; scrap stuff on stack
		movem.l	(sp)+,d0/d1/a0/a1
		NOLIST
		SECTION	debug,DATA
str\@@		dc.b	\1,$0a,0		; the actual string
		CNOP	0,2
		SECTION	filesystem,CODE		; change this for other sects
	ENDC
	LIST
	ENDC					; end DEBUG_CODE conditional
	ENDM

;===========================================================================
; MACRO to enable all of the debug routines.  If not called, no extra code.
;===========================================================================

DEBUGENABLE	MACRO
DEBUG_CODE	SET	1
		ENDM

;===========================================================================
; MACRO to initialise debug routines, works for cprintf.lib and sprintf.lib.
;===========================================================================

DEBUGINIT	MACRO
		IFD	DEBUG_CODE
		NOLIST
		XREF	_DebugInit
		LIST
		jsr	_DebugInit
		ENDC
		ENDM

;==========================================================================
; MACRO to kill debug routines and libraries if cprintf.obj was linked with
;==========================================================================

DEBUGKILL	MACRO
		IFD	DEBUG_CODE
		NOLIST
		XREF	_DebugKill
		LIST
		jsr	_DebugKill
		ENDC
		ENDM

@


1.2
log
@*** empty log message ***
@
text
@d9 2
d12 8
a19 2
; Your program must include this macro file and link with printf.lib to use.
; A maximum of 8 arguments can be used with printf.  Executing DEBUGENABLE sets
d24 1
a24 1
; actual code for the printf function is contained in a library and is
d26 8
d35 1
d39 1
d84 1
a84 1
	XREF	_printf				; in case not used before
d87 1
a87 1
		jsr	_printf			; call printf function
d89 1
d92 1
a92 1
str\@@		dc.b	\1,0			; the actual string
d103 1
d109 1
a109 2
; MACRO to identify the last routine called before a crash.  Stores a given
; 4 byte (character) identifier into location 0.  This will survive reboot.
d111 21
a131 8
LASTCODE	MACRO
	IFD DEBUG_CODE				; only if DEBUGINIT called
	move.l	$cc,$ce
	move.l	$c8,$ca
	move.l	$c4,$c6
	move.l	$c0,$c2
	move.w	#\1,$c0				; should be safe
	ENDC
d133 1
@


1.1
log
@Initial revision
@
text
@@
