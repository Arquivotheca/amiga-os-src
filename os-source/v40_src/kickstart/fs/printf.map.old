;===========================================================================
; MACRO to provide a printf debugging call, use it like the 'C' version. ie.
;
;	printf	<'value=%ld pointer=%lx count=%d\n'>,d0,a0,d1
;	printf	<'program name = %s\n'>,#ProgName
;	printf	<'port name = %s\n'>,a0
;	printf	<'character received = \t%c\n'>,d0
;	printf	<'Program length = %d\n'>,#(ProgEnd-ProgStart)
;
; Your program must include this macro file and link with printf.lib to use.
; A maximum of 8 arguments can be used with printf.  Executing DEBUGENABLE sets
; a constant called DEBUG_CODE which is tested by the debug macros to see
; if macro expansion should be performed.  This means you can leave all of
; your diagnostic printf's in place and just comment out the DEBUGENABLE call
; to strip all debug code from your program.  This works because all of the
; actual code for the printf function is contained in a library and is
; only linked to your program if a routine in this library is referenced.
;==========================================================================
printf	MACRO
	IFD DEBUG_CODE				; only if DEBUGINIT called
	NOLIST
; first stack up to eight arguments for the printf routine
	IFGE	NARG-9
		LIST
		move.l	\9,-(sp)		; stack arg8
		NOLIST
	ENDC
	IFGE	NARG-8
		LIST
		move.l	\8,-(sp)		; stack arg7
		NOLIST
	ENDC
	IFGE	NARG-7
		LIST
		move.l	\7,-(sp)		; stack arg6
		NOLIST
	ENDC
	IFGE	NARG-6
		LIST
		move.l	\6,-(sp)		; stack arg5
		NOLIST
	ENDC
	IFGE	NARG-5
		LIST
		move.l	\5,-(sp)		; stack arg4
		NOLIST
	ENDC
	IFGE	NARG-4
		LIST
		move.l	\4,-(sp)		; stack arg3
		NOLIST
	ENDC
	IFGE	NARG-3
		LIST
		move.l	\3,-(sp)		; stack arg2
		NOLIST
	ENDC
	IFGE	NARG-2
		LIST
		move.l	\2,-(sp)		; stack arg1
		NOLIST
	ENDC
; Now the actual printf call itself, only if there is an argument string
	IFGE	NARG-1
STKOFF	SET	NARG<<2				; actual stack space used
	XREF	_printf				; in case not used before
		LIST
		pea.l	str\@			; push string address
		jsr	_printf			; call printf function
		lea.l	STKOFF(sp),sp		; scrap stuff on stack
		NOLIST
		SECTION	debug,DATA
str\@		dc.b	\1,0			; the actual string
		CNOP	0,2
		SECTION	filesystem,CODE		; change this for other sects
	ENDC
	LIST
	ENDC					; end DEBUG_CODE conditional
	ENDM

;===========================================================================
; MACRO to enable all of the debug routines.  If not called, no extra code.
;===========================================================================
DEBUGENABLE	MACRO
DEBUG_CODE	SET	1
		ENDM

;===========================================================================
; MACRO to identify the last routine called before a crash.  Stores a given
; 4 byte (character) identifier into location 0.  This will survive reboot.
;===========================================================================
LASTCODE	MACRO
	IFD DEBUG_CODE				; only if DEBUGINIT called
	move.l	$cc,$ce
	move.l	$c8,$ca
	move.l	$c4,$c6
	move.l	$c0,$c2
	move.w	#\1,$c0				; should be safe
	ENDC
		ENDM
