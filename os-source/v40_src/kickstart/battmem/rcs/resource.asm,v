head     39.1;
branch   ;
access   ;
symbols  V39_1:39.1 V37_3:36.8 V37_2:36.7 V37_1:36.6 V36_14:36.6 V36_10:36.5 V36_9:36.5 V36_8:36.5 V36_5:36.3 V36_4:36.3 V36_2:36.2;
locks    ; strict;
comment  @* @;


39.1
date     92.01.20.13.20.02;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     92.01.14.13.42.53;  author mks;  state Exp;
branches ;
next     36.9;

36.9
date     91.11.05.17.45.26;  author peter;  state Exp;
branches ;
next     36.8;

36.8
date     91.03.04.14.24.27;  author rsbx;  state Exp;
branches ;
next     36.7;

36.7
date     91.02.15.13.21.48;  author rsbx;  state Exp;
branches ;
next     36.6;

36.6
date     90.05.29.16.45.57;  author rsbx;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.28.16.34.17;  author rsbx;  state Exp;
branches ;
next     36.4;

36.4
date     90.02.26.16.14.25;  author rsbx;  state Exp;
branches ;
next     36.3;

36.3
date     89.11.29.13.38.01;  author rsbx;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.11.16.30.15;  author rsbx;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.11.16.19.11;  author rsbx;  state Exp;
branches ;
next     ;


desc
@BattMem.resource.
@


39.1
log
@Moved the priority to above graphics
@
text
@*************************************************************************
*									*
*	Copyright (C) 1989, Commodore Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************


*************************************************************************
*
* $Id: resource.asm,v 39.0 92/01/14 13:42:53 mks Exp Locker: mks $
*
* $Log:	resource.asm,v $
* Revision 39.0  92/01/14  13:42:53  mks
* Initial work on taking BattMem native for V39
*
*************************************************************************

	SECTION	BattMem

	INCLUDE	'internal.i'

*------	Imported Functions ------------------------------------------

	XSYS	InitSemaphore
	XSYS	ObtainSemaphore
	XSYS	ReleaseSemaphore
	XSYS	MakeLibrary
	XSYS	AddResource
	XSYS	OpenResource
	XSYS	ReadBattClockMem
	XSYS	WriteBattClockMem

*--------------------------------------------------------------------

initDDescrip:		     	;STRUCTURE RT,0
	dc.w	RTC_MATCHWORD	; UWORD RT_MATCHWORD
	dc.l	initDDescrip	; APTR  RT_MATCHTAG
	dc.l	BattMemEnd	; APTR  RT_ENDSKIP
	dc.b	RTF_COLDSTART	; UBYTE RT_FLAGS
	dc.b	VERSION		; UBYTE RT_VERSION
	dc.b	NT_RESOURCE	; UBYTE RT_TYPE
	dc.b	69		; BYTE  RT_PRI
	dc.l	BattMemName	; APTR  RT_NAME
	dc.l	VERSTRING	; APTR  RT_IDSTRING
	dc.l	InitCode	; APTR  RT_INIT
				; LABEL RT_SIZE



BattMemName:
		BATTMEMNAME

BattClockName:
		BATTCLOCKNAME

VERSTRING:
		VSTRING

VERNUM:	EQU	VERSION
REVNUM:	EQU	REVISION

	ds.w	0


*------ Functions Offsets -------------------------------------
V_DEF	MACRO
	dc.W	\1+(*-initFunc)
	ENDM

initFunc:
	dc.w	-1
	V_DEF	ObtainBattSemaphore
	V_DEF	ReleaseBattSemaphore
	V_DEF	ReadBattMem
	V_DEF	WriteBattMem
	dc.w	-1


*------ Initializaton Table -----------------------------------

initStruct:
	INITBYTE	LN_TYPE,NT_RESOURCE
	INITLONG	LN_NAME,BattMemName
	INITBYTE	LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
	INITWORD	LIB_VERSION,VERNUM
	INITWORD	LIB_REVISION,REVNUM
	INITLONG	LIB_IDSTRING,VERSTRING

	DC.L		0


*****i* battmem.resource/internal/InitCode ***************************
*
*   NAME
*	InitCode -- Initialize the resource from nothing.
*
*   SYNOPSIS
*	InitCode()
*
*	void InitCode( );
*
*   FUNCTION
*	This routine initializes the battmem.resource from nothing.
*
*   INPUTS
*
*   RESULTS
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*	A3 -- battclock.resource pointer
*	A2 -- battmem.resource pointer
*

InitCode:
	movem.l	d2/a2/a3/a6,-(sp)
	move.l	#0,a2		; for no resource case

	lea	BattClockName,a1	; find the the clock
	CALLSYS	OpenResource
	tst.l	d0
	beq.s	InitEnd
	move.l	d0,a3		; battclockLib base

	lea	initFunc,a0	; point to correct set of offsets
	lea	initStruct,a1	; initialize the library node
	suba.l	a2,a2
	move.l	#BTM_SIZE,d0
	CALLSYS	MakeLibrary	; make us a playpen
	move.l	d0,a2		; save the base
	tst.l	d0		; was there a hitch?
	beq.s	InitEnd		; damn

	move.l	#0,BTM_Magic(a2)	; for BattMem
	move.l	a6,BTM_Exec(a2)		; set our data
	move.l	a3,BTM_BattClock(a2)
	lea	BTM_Semaphore(a2),a0	; to prevent conflicts
	CALLSYS	InitSemaphore
	move.l	a2,a1
	CALLSYS	AddResource	; yea! we made it
	move.l	a2,a6		; a6 now has BattClockBase

	moveq.l	#0,d1
	moveq.l	#1,d2
	bsr.s	ReadBattMem	; do a read so to set checksum

InitEnd:
	move.l	a2,d0		; battclockbase or NULL
	movem.l	(sp)+,d2/a2/a3/a6
	rts


******* battmem.resource/ObtainBattSemaphore *************************
*
*   NAME
*	ObtainBattSemaphore -- Obtain access to nonvolatile ram. (V36)
*
*   SYNOPSIS
*	ObtainBattSemaphore( )
*
*	void ObtainBattSemaphore( void );
*
*   FUNCTION
*	Aquires exclusive access to the system nonvolatile ram.
*
*   INPUTS
*
*   RESULTS
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

ObtainBattSemaphore:
	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ObtainSemaphore
	rts


******* battmem.resource/ReleaseBattSemaphore ************************
*
*   NAME
*	ReleaseBattSemaphore -- Allow nonvolatile ram to others.  (V36)
*
*   SYNOPSIS
*	ReleaseBattSemaphore( )
*
*	void ReleaseBattSemaphore( void );
*
*   FUNCTION
*	Relinquish exclusive access to the system nonvolatile ram.
*
*   INPUTS
*
*   RESULTS
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

ReleaseBattSemaphore:
	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ReleaseSemaphore
	rts


******* battmem.resource/ReadBattMem *********************************
*
*   NAME
*	ReadBattMem -- Read a bitstring from nonvolatile ram.  (V36)
*
*   SYNOPSIS
*	Error = ReadBattMem( Buffer, Offset, Len )
*	D0                   A0      D0      D1
*
*	ULONG ReadBattMem( APTR, ULONG, ULONG );
*
*   FUNCTION
*	Read a bitstring from nonvolatile ram.
*
*   INPUTS
*	Buffer          Where to put the bitstring.
*	Offset          Bit offset of first bit to read.
*	Len             Length of bitstring to read.
*
*   RESULTS
*	Error           Zero if no error.
*
*   NOTES
*	The battery-backed memory is checksummed. If a checksum error
*	is detected, all bits in the battery-backed memory are
*	silently set to zero.
*
*	Bits in the battery-backed memory that do not exist are read
*	as zero.
*
*	Partial byte reads (less than 8 bits) result in the bits read
*	being put in the low-order bits of the destination byte.
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

ReadBattMem:
	movem.l	d0-d1/a0,-(sp)
	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ObtainSemaphore
	movem.l	(sp)+,d0-d1/a0

	movem.l	d2-d5/a2,-(sp)
	move.l	a0,a2			; buffer
	move.l	d0,d5			; offset
	move.l	d1,d3
	move.l	d1,d4
	andi.l	#7,d4			; len%8
	lsr.l	#3,d3			; len/8 (byte count)
	beq.s	RBMremainder
	moveq.l	#8,d2
RBMloop
	move.l	d5,d1			; offset
	LINKLIB	_LVOReadBattClockMem,BTM_BattClock(a6)
	move.b	d0,(a2)+
	addq.l	#8,d5			; offset
	subq.l	#1,d3			; len (byte)
	bne.s	RBMloop
RBMremainder
	move.l	d4,d2			; len (bit)
	beq.s	RBMdone
	move.l	d5,d1			; offset
	LINKLIB	_LVOReadBattClockMem,BTM_BattClock(a6)
	move.b	d0,(a2)+
RBMdone
	movem.l	(sp)+,d2-d5/a2

	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ReleaseSemaphore
	moveq.l	#0,d0
	rts


******* battmem.resource/WriteBattMem ********************************
*
*   NAME
*	WriteBattMem -- Write a bitstring to nonvolatile ram.  (V36)
*
*   SYNOPSIS
*	Error = WriteBattMem( Buffer, Offset, Len )
*	D0                    A0      D0      D1
*
*	ULONG WriteBattMem( APTR, ULONG, ULONG );
*
*   FUNCTION
*	Write a bitstring to the nonvolatile ram.
*
*   INPUTS
*	Buffer          Where to get the bitstring.
*	Offset          Bit offset of first bit to write.
*	Len             Length of bitstring to write.
*
*   RESULTS
*	Error           Zero if no error.
*
*   NOTES
*	The battery-backed memory is checksummed. If a checksum error
*	is detected, all bits in the battery-backed memory are
*	silently set to zero.
*
*	Partial byte writes (less than 8 bits) result in the bits
*	written being read from the low-order bits of the source byte.
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

WriteBattMem:
	movem.l	d0-d1/a0,-(sp)
	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ObtainSemaphore
	movem.l	(sp)+,d0-d1/a0

	movem.l	d2-d5/a2,-(sp)
	move.l	a0,a2			; buffer
	move.l	d0,d5			; offset
	move.l	d1,d3
	move.l	d1,d4
	andi.l	#7,d4			; len%8
	lsr.l	#3,d3			; len/8 (byte count)
	beq.s	WBMremainder
	moveq.l	#8,d2
WBMloop
	move.l	d5,d1			; offset
	move.b	(a2)+,d0
	LINKLIB	_LVOWriteBattClockMem,BTM_BattClock(a6)
	addq.l	#8,d5			; offset
	subq.l	#1,d3			; len (byte)
	bne.s	WBMloop
WBMremainder
	move.l	d4,d2			; len (bit)
	beq.s	WBMdone
	move.l	d5,d1			; offset
	move.b	(a2)+,d0
	LINKLIB	_LVOWriteBattClockMem,BTM_BattClock(a6)
WBMdone
	movem.l	(sp)+,d2-d5/a2

	lea	BTM_Semaphore(a6),a0	; grab the semaphore
	LINKSYS	ReleaseSemaphore
	moveq.l	#0,d0
	rts

BattMemEnd:	; For the EndSkip
	end
@


39.0
log
@Initial work on taking BattMem native for V39
@
text
@d10 1
a10 1
* $Id$
d12 4
a15 1
* $Log$
d42 1
a42 1
	dc.b	44		; BYTE  RT_PRI
@


36.9
log
@Deleted parens from autodoc header lines.
@
text
@d10 1
a10 1
* asmsupp.asm
d12 1
a12 6
* Source Control
* ------ -------
* 
* $Id: resource.asm,v 36.8 91/03/04 14:24:27 rsbx Exp Locker: peter $
*
*
a29 4
*------	Exported ----------------------------------------------------

	XREF	EndCode

a31 3
	moveq.l	#-1,d0
	rts

d35 1
a35 1
	dc.l	EndCode		; APTR  RT_ENDSKIP
d63 3
d68 6
a73 5
	dc.l	ObtainBattSemaphore
	dc.l	ReleaseBattSemaphore
	dc.l	ReadBattMem
	dc.l	WriteBattMem
	dc.l	-1
d129 2
a130 2
	beq	InitEnd
	move.l	d0,a3		; battclockLib base	
d152 1
a152 1
	bsr	ReadBattMem	; do a read so to set checksum
d394 1
a394 1

@


36.8
log
@Doc and SFD fix.
@
text
@d15 1
a15 1
* $Id: resource.asm,v 36.7 91/02/15 13:21:48 rsbx Exp Locker: rsbx $
d168 1
a168 1
******* battmem.resource/ObtainBattSemaphore() ***********************
d205 1
a205 1
******* battmem.resource/ReleaseBattSemaphore() **********************
d242 1
a242 1
******* battmem.resource/ReadBattMem() *******************************
d324 1
a324 1
******* battmem.resource/WriteBattMem() ******************************
@


36.7
log
@NT_DEVICE should have been NT_RESOURCE. Autodoc changes.
@
text
@d15 1
a15 1
* $Id: resource.asm,v 36.6 90/05/29 16:45:57 rsbx Exp Locker: rsbx $
d208 1
a208 1
*	ObtainBattSemaphore -- Allow nonvolatile ram to others.  (V36)
d333 1
a333 1
*	void WriteBattMem( APTR, ULONG, ULONG );
@


36.6
log
@ReadBattMem and WriteBattMem changed to read/write from a buffer in
memory.
@
text
@d15 1
a15 1
* $Id$
d50 1
a50 1
	dc.b	NT_DEVICE	; UBYTE RT_TYPE
d171 1
a171 1
*	ObtainBattSemaphore -- Obtain access to the nonvolatile ram.  (V36)
d176 1
a176 1
*	void ObtainBattSemaphore( );
d208 1
a208 1
*	ObtainBattSemaphore -- Allow nonvolatile ram access to others.  (V36)
d213 1
a213 1
*	void ReleaseBattSemaphore( );
d257 3
a259 3
*	Buffer -- Where to put the bitstring.
*	Offset -- Bit offset of first bit to read.
*	Len -- Length of bitstring to read.
d262 1
a262 1
*	Error -- Zero if no error.
d266 2
a267 2
*	is detected, all bits in the battery-backed memory are silently
*	set to zero.
d339 3
a341 3
*	Buffer -- Where to get the bitstring.
*	Offset -- Bit offset of first bit to write.
*	Len -- Length of bitstring to write.
d344 1
a344 1
*	Error -- Zero if no error.
d348 2
a349 2
*	is detected, all bits in the battery-backed memory are silently
*	set to zero.
d351 2
a352 2
*	Partial byte writes (less than 8 bits) result in the bits written
*	being read from the low-order bits of the source byte.
@


36.5
log
@RCS version change.
@
text
@d15 1
a15 1
* $Header: /usr/professor/rsbx/battmem.resource/RCS/resource.asm,v 36.4 90/02/26 16:14:25 rsbx Exp Locker: rsbx $
a16 2
* $Locker: rsbx $
* 
d248 2
a249 2
*	Data = ReadBattMem( Offset, Len )
*	D0                       D1      D2
d251 1
a251 1
*	ULONG ReadBattMem( ULONG, ULONG );
d257 1
d262 1
a262 1
*	Data -- Bitstring read, right justified.
d265 3
a267 5
*	This operation will "clip" the write to the memory available
*	    in the clock chip and return 0s for bits outside memory
*	    available.
*	Lengths greater than 32 are set to 32.
*	This operation is protected by a semaphore.
d269 6
d288 1
a288 1
	move.l	d1,-(sp)
d291 1
a291 1
	move.l	(sp)+,d1
d293 11
d305 12
a317 1
	move.l	d0,-(sp)
d320 1
a320 1
	move.l	(sp)+,d0
d330 2
a331 2
*	WriteBattMem( Data, Offset, Len )
*	                   D0    D1      D2
d333 1
a333 1
*	void WriteBattMem( ULONG, ULONG, ULONG );
d339 1
a339 1
*	Data -- Bitstring to write, right justified.
d344 1
d347 3
a349 4
*	This operation will "clip" the write to the memory available
*	    in the clock chip.
*	Lengths greater than 32 are set to 32.
*	This operation is protected by a semaphore.
d351 3
d367 1
a367 1
	movem.l	d0-d1,-(sp)
d370 1
a370 1
	movem.l	(sp)+,d0-d1
d372 12
d385 11
d399 1
@


36.4
log
@Init now does a read so that the memory will have a valid checksum after
power-up/reset.
@
text
@d15 1
a15 1
* $Header: resource.asm,v 36.3 89/11/29 13:38:01 rsbx Exp $
@


36.3
log
@
@
text
@d15 1
a15 1
* $Header: resource.asm,v 36.2 89/10/11 16:30:15 rsbx Exp $
d133 1
a133 1
	movem.l	a2/a3/a6,-(sp)
d160 4
d166 1
a166 1
	movem.l	(sp)+,a2/a3/a6
@


36.2
log
@Fixed autodocs.
@
text
@d15 1
a15 1
* $Header: resource.asm,v 36.1 89/10/11 16:19:11 rsbx Exp $
d286 1
a286 5
	move.l	a6,-(sp)
	move.l	BTM_BattClock(a6),a6
*$*	CALLSYS	ReadBattClockMem
	jsr	-24(a6)
	move.l	(sp)+,a6
d340 1
a340 5
	move.l	a6,-(sp)
	move.l	BTM_BattClock(a6),a6
*$*	CALLSYS	WriteBattClockMem
	jsr	-30(a6)
	move.l	(sp)+,a6
@


36.1
log
@Initial checkin.
@
text
@d15 1
a15 1
* $Header$
d17 1
a17 1
* $Locker$
d243 1
a243 1
*	ReadBattCLockMem -- Read a bitstring from nonvolatile ram.
d246 1
a246 1
*	Data = ReadBattClockMem( Offset, Len )
d249 1
a249 1
*	ULONG ReadBattCLockMem( ULONG, ULONG );
d302 1
a302 1
*	WriteBattCLockMem -- Write a bitstring to nonvolatile ram.
d305 1
a305 1
*	WriteBattClockMem( Data, Offset, Len )
d308 1
a308 1
*	void WriteBattCLockMem( ULONG, ULONG, ULONG );
@
