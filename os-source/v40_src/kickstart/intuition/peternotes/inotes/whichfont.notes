This text explains how Intuition establishes a screen's font and
what font it uses where.  I've posted it verbatim to the net on a
number of occasions when people seemed confused.

    What you tell OpenScreen  Screen's Font           Windows' RPort's Font

A.  NewScreen.Font = myfont   myfont                  myfont
B.  NewScreen.Font = NULL     GfxBase->DefaultFont    GfxBase->DefaultFont
C.  {SA_Font, myfont}         myfont                  myfont
D.  {SA_SysFont, 0}           GfxBase->DefaultFont    GfxBase->DefaultFont
E.  {SA_SysFont, 1}           Font Prefs Screen text  GfxBase->DefaultFont


Notes:

A and B are the options that existed in releases prior to Release 2.0.

C and D are new Release 2.0 tags that are equivalent to A and B respectively.

E is a NEW option for Release 2.0.  The Workbench screen uses this option.

GfxBase->DefaultFont will always be monospace.  This is the "System
Default Text" from Font Preferences.

The "Screen Text" choice from Font Preferences can be monospace or
proportional.

'myfont' can be any font of the programmer's choosing, including a
proportional one.  This is true under all releases of the OS.

The menu bar, window titles, menu-items, and the contents of a string
gadget use the screen's font.  The font used for menu items can be
overridden in the item's IntuiText structure.  Under Release 2.0 and
higher, the font used in a string gadget can be overridden through the
StringExtend structure.  The font of the menu bar and window titles
cannot be overridden.

The screen's font may not legally be changed after a screen is opened.

IntuiText rendered into a window (either through PrintIText() or as a
gadget's GadgetText) defaults to the Window RastPort font, but can be
overridden using its ITextFont field.  Text rendered with the Text()
graphics.library call appears in the Window RastPort font.

The Window's RPort's font shown above is the _initial_ font that
Intuition sets for you in your window's RastPort.  It is legal to
change that subsequently with SetFont().
