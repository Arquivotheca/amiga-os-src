==========
amiga.test/main #136, from talin, 8940 chars, Sat Apr 11 01:10:35 1992
Comment(s). 
----------
TITLE: Some Proposed ideas for Libs/Classes:

    -- Note:  all classes have a mechanism for supporting keyboard equivalents.
    -- Note: Classes marked with a '*' are ones I have written.
        (Actually, I have done most of these but not as BOOPSI).
    -- Note: I would also like to see all classes support the IM_DRAWARGS idea
        (See below for description).
    -- Note: Each library should also contain a way to easily create the
        gadgets, hook them up to standard imagery, and add them to a
        disposal list.

Class Libraries:

Palettes
~~~~~~~~
    Color Palette   --  as GadTools, but also supports optional scroller

    Image Palette   --  each selection in the palette is an image supplied
                        by the program.

    Glyph Palette   --  as above, but single plane only, drawn in the color
                        of the application's choice, and DrawMode. (i.e.
                        BltTemplate is used)

Strings
~~~~~~~
    String Gadget   --  as per GadTools, but supports drag highlighting and
                        can be cut and pasted (with help from the app).

*   TextEdit Gadget --  multi-line word-wrapping string gadget.

    Text Gadget     --  Read-only text gadget. Handles Numbers as a special
                        case (Different tag). Also handles fixed point as
                        another tag.

*   Fixed           --  Floating / Fixed Point string Gadget, also handles
                        integers as a subset.
    
    TemplateString  --  String gadget that accepts a template: "(999)-999-9999"

        (Note: All string classes can eventually support a popup menu next
            to the string gadget to fill in with commonly used choices. See
            my popup menu demo for style guide).

Images
~~~~~~
    Bevel           --  like Framiclass, but also supports additional options.
    
    PosText         --  Able to position a text string relative to a frame using
                        the standard GadTools PLACETEXT_LEFT and such. Also
                        renders keyboard equivalents correctly.

    PosImage        --  as above, but for images
    
    PosGlyph        --  as above, but for Glyphs
    
    Chisel          --  a double-border, like a string gadget, can be reversed.
                        knows how to draw itself "outside" of a box.

    ChangeBar       --  this is used to indicate that a gadget in a requester ha
s
                        been changed by the user.

        In addition to the classes, this library may contain standardized
        lists of image instances.

Lists
~~~~~
    List Gadget     --  As per GadTools, but supports multiple selection and
                        rendering hook.

    Multi-Column    --  David Junod's Multi-column list gadget

Cyclers
~~~~~~~
    CycleButton     --  As per GadTools CycleGadgets, but also support popups.

    CycleImage      --  as above, but can cycle through images (popup will
                        support images and glyphs as well).

Buttons
~~~~~~~
    Button          --  As per GadTools, but supports image as well as text
                        labels.

    Default         --  A standard button, but also has a visual indicator
                        meaning "default button", either a return glyph or
                        a thin, pushed-in bevel surrounding the button. Note
                        that default buttons can still have a normal keyboard
                        equivalent.
    
    Check           --  As per Gadtools, but also supports "indeterminate state"
                        (when multiple objects are selected) and "change bar"
                        (to indicate that this control has been changed)
                        
    Radio           --  As per Gadtools, plus additions mentioned above.

    Display         --  A pushed-in bevel box with an image. Non-selectable.

Arrows
~~~~~~
*   Arrows          --  A set of slider arrows without the slider, plus optional
                        acceleration over time.
                        Also, can optionally have a numeric display of the curre
nt
                        state (looking like a NUMBER_KIND gadget) abutting the
                        arrows.
                        
*   Accelerator     --  A gadget which accelerates based on mouse position.
                        Can be two-dimensional.

Sliders
~~~~~~~
    Slider          --  As per Gadtools, except all values are LONG
    
    Scroller        --  As per Gadtools, but all values are LONG
    
    Pan             --  Knows how to light up when in the border, used for
                        windows with border sliders.

*   FuelGauge       --  A progress indicator gauge.

ColorWheel
~~~~~~~~~~
*   Wheel           --  A Mac-style color wheel gadget, escept using HLS instead
                        of HSB color space.

DrawingPad
~~~~~~~~~~
    Pad             --  A "painting" area, like in IconEdit.

Other classes the might be done in the future:
    Envelope -- for editing of attack/decay envelopes for music, or for
        3-d modeling programs.

==============================================================================
The IM_DRAWARGS method.

    IM_DRAWARGS is an extension of the IM_DRAWFRAME message used by BOOPSI
gadgets to send messages to BOOPSI images.

    IM_DRAWFRAME contains the information on where and how to draw the image,
and what size to draw it. IM_DRAWARGS adds one additional field, an "arglist"
supplied by the gadget.

    This arglist is similar to the "args" that you pass to a printf statement.
It points to an array of longwords set up by the gadget. Each longword can
contain a pointer to a text string, an intuition Image, or anything else.

    For normal gadgets, the array will contain two entries: arglist[0] will
contain the a copy of the gadget's SelectRender field, and arglist[1] will
contain a copy of the gadget's GadgetText field. BOOPSI Gadgets can add
additional fields by using a longer array, and by having additional fields
in their instance data to fill in those fields.

    When an Image Class receives an IM_DRAWARGS method, it should render
itself, just like an IM_DRAFRAME message, with on exception: The data to
be rendered (text string or image) is taken from the arglist in the message
rather than from the image class structure or instance data. After rendering
is complete, the image class should increment the arglist pointer to
point to the next argument.

    Note that the image class is allowed to use more than one argument from
the arglist, and in such cases should increment the arglist pointer as
appropriate.

Example Use:

    Let's say I have a button which has three rendered components:
    
        1. A bevel box around the button.
        2. A text label, perhaps "Play"
        3. An image centered in the bevel box, perhaps a "play" symbol.
        
    I attach to this button a list of BOOPSI images. There are three images,
each corresponding to the three rendering components above. The list looks
like this:

        Gadget ---> Bevel ---> PosText ---> PosImage ---> 0

    Now, if I had 5 different gadgets, each with a different text label and
different image in the center, I would have to have five of the above lists.
However, in this case, I tell the gadget I'm going to use IM_DRAWARGS. In
addition, I put a pointer to the text string "Play" in the SelectRender
field of the gadget, and I put a pointer to the image data for the "play"
glyph into the GadgetText field.

    When the gadget is rendered, the following happens:
    
    First, the BevelBox is called. It doesn't use any of the args, so it
just draws normally. Note that the bevel's size is relative to the gadget's
size, because IM_DRAWARGS is an extension of IM_DRAWFRAME, not IM_DRAW.

    Second, the PosText is called. It takes the first argument (the contents
of the SelectRender field, which points to the string "Play") and renders it.

    Thirdly, the PosImage is called. It takes the remaining argument (the
pointer to the play glyph) and renders it as an image.

    The result: I can have five different gadgets, with different sizes,
different labels, and different images, and they can all point to the same
string of BOOPSI images. That list no longer represents a SPECIFIC image,
but instead represents a STYLE of imagery, and that list can be SHARED by
all gadgets that are rendered in the same style.
==============================================================================
Note on Glyphs:
    'Glyph' is a structure I use in a lot of my applications:
    
struct Glyph {
    WORD                gl_Width,
                        gl_Height;
    PLANEPTR            gl_Data;
};

    It is designed to be drawn with BltTemplate, so that the function rendering
the glyph is free to choose a DrawMode, APen, BPen, Area Fill Pattern, etc.
(Which can't be done with an Image structure).
