When coercion happens:

Screen depth arrangement:
* If the monitor or LACE changed, then all screens are coerced

New screen opens:
* The new screen is coerced
* If the monitor or LACE changed, then all screens are coerced
* all screens are coerced

Screen closes:
* If the monitor or LACE changed, then all screens are coerced
* all screens are coerced

MakeScreen
* If screen mode poked, coerce that screen
* If the monitor or LACE changed, then all screens are coerced

Screen sliding:
* If the monitor or LACE changed, then all screens are coerced

RethinkDisplay():
* If the monitor or LACE changed, then all screens are coerced

RemakeDisplay()
* If the monitor or LACE changed, then all screens are coerced
* all screens are coerced

/* monitorCheck()
 *	<- modeVerify()
 *
 * Check if active monitor changed.  Set new active monitor.
 * Return MEGAFORCE if so, else return NOFORCE.
 */
monitorCheck()
{
    if ( active monitor changed )
    {
	return( MEGAFORCE );
    }
    else
    {
	return( NOFORCE );
    }
}

/* setupMonitor()
 *	<- modeVerify()
 *
 * set up active monitor, and coerce all screens(force)
 */
setupMonitor( force )
{
    Set up active monitor;
    coerceScreens( NULL, force );
}

/* modeSnoop()
 *	<- MakeScreen()
 *	<- RemakeDisplay()
 *
 * Detect screen-mode-pokers; re-coerce this screen
 */
modeSnoop( screen )
{
    if ( somebody poked the mode )
    {
	Do stuff;
	coerceScreens( screen, NOFORCE )
    }
}

/* coerceScreens()
 *	<- modeSnoop()
 *	<- IOpenScreen()
 *	<- setupMonitor()
 *	<- rethinkVPorts()
 *
 * Handle view tracking.
 * coerce this or all screens to front ID.
 */
coerceScreens( onescreen, force )
{
    if ( MEGAFORCE )
    {
	Reset view tracking;
	Set MouseScaleY;
    }
    else
    {
	Detect View-shifters and update overscan prefs;
    }

    figure compatibility;
    coerceScreenGrunt( one or all screens );
    reportMouse( FALSE );
}

/* coerceScreenGrunt()
 *	<- coerceScreens()
 *
 * Figure out and set up coerced mode and compatibility
 */
coerceScreenGrunt()
{
    figure coerced mode for this screen;
    inform graphics;

    figure if this screen is compatible with frontmost;

    if ( yes )
    {
	mark as not SCREENEXCLUDE;
	scale the VPExtra->DisplayClip incorrectly :-(;
	stash some stuff, eg. resolution, properties, sprite res;
	enforce screenLegalPosition() for this screen;
    }
    else
    {
	mark as SCREENEXCLUDE;
    }
}

/* modeVerify()
 *	<- initIntuition() TRUE!
 *	<- MakeScreen()  NOFORCE
 *	<- RemakeDisplay() FORCE
 *	<- RethinkDisplay() NOFORCE
 *
 * Recalc scan-rate and LACE, rebuild as necessary or
 * as requested by 'force'
 */
modeVerify( force )
{
    if ( monitor changed )
    {
	setupMonitor( MEGAFORCE );
	setup lace;
	rethinkVPorts( MEGAFORCE );
    }
    else if ( ( force ) || ( lace changed ) )
    {
	setupMonitor( NOFORCE );
	setup lace;
	rethinkVPorts( FORCE );
    }
}


/* IOpenScreen()
 *
 * state-machine synchronous screen linking during OpenScreen()
 */
IOpenScreen( sc )
{
    ...;
    coerceScreens( sc, NOFORCE );
}


/* MakeScreen()
 *	<- doMoveScreen()
 *
 */
MakeScreen( screen )
{
    modeSnoop( screen );
    set VP_HIDE (causes copper lists to be remade!)
    modeVerify( NOFORCE );
    ensure rethinkVPorts( NOFORCE );
}

/* RemakeDisplay()
 *	<- setIPrefs
 *	<- ICloseScreen
 *	<- OpenScreenTagList
 *	<- setIBasePrefs
 *
 */
RemakeDisplay()
{
    modeSnoop( each screen );
    modeVerify( FORCE );
    remakeCopList();
}

/* RethinkDisplay()
 *	<- IMoveScreen
 *	<- IScreenDepth
 *	<- DisplayAlert
 *
 */
RethinkDisplay()
{
    modeVerify( NOFORCE );
    ensure rethinkVPorts( NOFORCE );
    remakeCopList();
}

/* rethinkVPorts()
 *	<- modeVerify
 *	<- MakeScreen
 *	<- RethinkDisplay
 *
 *
 */
rethinkVPorts()
{
    for each screen:
    {
	if excluded or dragged to an invisible point
	{
	    mark as VP_HIDE
	}
	else
	{
	    if ( force > NOFORCE ) or
	       ( ViewPort height changed ) or
	       ( MEGAFORCE & screen moved ) or
	       ( VP_HIDE is set )
	    {
		if ( someone poked ViewPort Dx/yOffset )
		{
		    offsetRect( DClip ) and coerceScreens( sc, NOFORCE )
		}
		MakeVPort();
	    }
	    clear VP_HIDE
	}
    }

/* initIntuition()
 *
 */
