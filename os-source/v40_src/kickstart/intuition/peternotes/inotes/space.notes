Ideas on reducing Intuition's ROM usage.  NB:  Most of the good ones
have been taken.  This list therefore contains more marginal or
dubious ideas.

---------------------------------------------------------------------------

Don't know if this'll save space or not, but it would be a definite
code improvement:

hitUpfront() fills in the layer pointer it receives, and also returns a
window pointer.  If the hit is in the screen's barlayer, it returns the
active window as its window pointer, and also sets the HIT_BARLAYER
IBase->Flag.  This is ugly.  First off, if you call:

	hitUpfront( &hitlayer )

then the HIT_BARLAYER flag is equivalent to the following test:

	( hitlayer == IBase->HitScreen->BarLayer )

Second, maybe hitUpfront() should return ~0 if the barlayer is hit.

---------------------------------------------------------------------------

menu.c/showMStrip() shouldn't bother calling obtainRP(), or else
we should call obtainRP(s->BarLayer->rp, s->BarLayer), and use
rp everywhere we currently use s->BarLayer->rp.

---------------------------------------------------------------------------

misc.c/ReleaseGIRPort() just calls freeRP().

---------------------------------------------------------------------------

Could fold VIEWCPRLOCK in such a way that VIEWCPRLOCK is nothing but
the ObtainSemaphore() in gfx.

---------------------------------------------------------------------------

If I keep the new-style new-look props, maybe I can drop
JOINS_LOWER_RIGHT_WINS from embossedBoxTrim() code.

---------------------------------------------------------------------------

setScreenDisplayID() sets a number of parameters that coerceScreenGrunt()
will override.  Could check to see if these "safe initial values" are
necessary. (XSC(s)->ScaleFactor, PixelSpeed, etc.)

---------------------------------------------------------------------------

The close, zoom, and window-depth gadgets have an extra groove rendered
for them, which is actually part of the title-bar area.  That complicates
the vectorclass processing.  We could try to drop the line-rendering
into the window-border redraw code, and simplify vectorclass a bunch.

---------------------------------------------------------------------------

Could play some tricks inside genv.c/gadgetHook() based on equating
the index of the IIHooks[] array with the gadget type 1,2,4, or
somesuch.

---------------------------------------------------------------------------

fold setIBasePrefs() in line

---------------------------------------------------------------------------

genv.c/gListDomain():
We see these lines, but I think Domain.Left/Top are zero, so
a simple "=" can replace "+="

	    if ( TESTFLAG( window->Flags, GIMMEZEROZERO ) )
	    {
		ge->ge_Domain.Left += window->BorderLeft;
		ge->ge_Domain.Top  += window->BorderTop;
	    }

---------------------------------------------------------------------------

vectorclass.c:  this module contains a routine to draw an embossed
box, but we already have that as embossedBoxTrim().  However, vector
images have funky behavior at the joins.  All that needs to be figured
out, but if it was, we could drop the Draw1P3Border() routine.

tx+w-1,0	-> tx,0
tx,0		-> tx,h-2

tx,h-1		-> tx+w-1, h-1
tx+w-1		-> tx+w-1, 1


WwwwwwwwwwwwwwwwwW
w                b
w                b
w                b
w                b
w                b
W                b
BbbbbbbbbbbbbbbbbB

3 callers

VIB_3D: (screen depth)
	0, width, height

VIB_VERT: (up, down)
	0, width, height
	TR -> shadow
	BL -> shine
	mono edge visibling

VIB_HORIZ: (left, right)
	0, width, height
	mono edge visibling

VIB_BRCORN: (size)
	0, width, height
	TR -> shadow
	mono edge visibling

VIB_HLEFT: (close)
	0, w-1, h
	BL -> shine
	right-side groove
	mono groove-removal?
	w-border continuation

VIB_HRIGHT: (window depth, zoom)
	1, w-1, h
	left-side groove
	mono groove-removal?
	w-border continuation

VIB_BOTTOMBORDER (was VIB_HORIZ)
VIB_RIGHTBORDER (was VIB_VERT)
VIB_BOTTOMRIGHTCORNER (was VIB_BRCORN)
VIB_TOPLEFTCORNER (was VIB_HLEFT)
VIB_TOPRIGHTCORNER (was VIB_HRIGHT)
VIB_BEVEL (was VIB_3D)
VIB_GADTOOLS (was VIB_THICK3D)
VIB_MENU (was VIB_INMENU)


#define VIBF_SHADOWBL	0x80	/* Bottom-left pixel of 3d border must be in shadow */
#define VIBF_SHADOWTR	0x40	/* TOP-right pixel of 3d border must be in shadow */
#define VIBF_FILL	0x20	/* This guy must be filled */
#define VIBF_BOX	0x10	/* Put a box around it */

#define VIB_BOTTOMBORDER	0 | VIBF_SHADOWBL | VIBF_FILL | VIBF_BOX
#define VIB_RIGHTBORDER		1 | VIBF_SHADOWTR | VIBF_FILL | VIBF_BOX
#define VIB_BOTTOMRIGHTCORNER	2 | VIBF_SHADOWTR | VIBF_SHADOWBL | VIBF_FILL | VIBF_BOX
#define VIB_TOPLEFTCORNER	3 | VIBF_FILL
#define VIB_TOPRIGHTCORNER	4 | VIBF_SHADOWBL | VIBF_FILL
#define VIB_BEVEL		5 | VIBF_BOX
#define VIB_GADTOOLS		6
#define VIB_MENU		7 | VIBF_FILL

---------------------------------------------------------------------------

Does BorderPatrol() need to itself do LockLayerInfo() and Unlock?
It seems to me that the caller must have already taken care of
this, in order not to violate the locking order wrt. assertLock(LOCKIBASE).
IRequest() calls BP() without LockLayerInfo()!!  (Maybe also
removeMStrip()).

modclass and ggclass pass the node's list to OM_REMOVE, but
that method doesn't need nor is defined as taking a list as well
as an object.

BorderPatrol() need not call knownScreen() since it's always called
from within the state-machine.

gadclass.c/setGadgetAttrs() function allows setting GA_PREVIOUS but
this is a create-only attribute apparently handled in OM_NEW.

state-machine:  it_Object1 is sometimes cached as itwindow.  Some
states use it_Object1 as something else.  ((struct Screen *)itwindow)
is smaller than ((struct Screen *)IT->it_Object1)

IBase->ActiveWindow->WScreen is used, where IBase->ActiveScreen
might suffice?

isdefault.c/itCLOSEWIN, windows.c/closeWindowCommon()?
BorderPatrol() may be invoked twice, once in isdefault.c, and
once through sendISM.

isupport.c/OpenIntuition() doesn't need to set MenuDrawn to MENUNULL,
because that's done in smenu.c/realStartMenu().

thing.c/previousLink() is only called in two places.  It could be
replaced by a direct call to previousThing().  CAREFUL: watch the
initial test, it may be special

vectorclass.c/RefreshImageData():  These lines should be unneeded:
    if (IM(o)->Depth != CUSTOMIMAGEDEPTH)
	IM(o)->Depth = vi->vi_Depth;


windows.c/freeSysGadgets():  There shouldn't be any old-style gadgets
to FreeMem().

-------------------------------------------------------------------------------

In ModifyIDCMP(), there's no need to copy either port into tmpport,
since all messaging is shut off in a state-machine-synchronous way,
and all message-posting is state-machine-synchronous.  Not true
about hacks posting messages to others' IDCMPs.

sgadget.c:  Could create function abortGadget() which does
a {turnOffGadget(TRUE); reuseToken(); (*IBase->GadgetReturn)(0);}

activate.c/ActivateGadget():  The 'request' parameter is only slightly
used.  sidlewindow.c and srequester.c use it to tell if the gadget is
in the active window proper or in the correct requester.  sgadget.c
sets it up.

strings.c/displayString():  the 2 calls to BackFit() (reverse TextFit)
may be similar enough in form to wrap into one routine that handles
some of the commonality.

-------------------------------------------------------------------------------

vectorclass:

It may be cheaper to pass vi around instead of re-calculating
INST_DATA.  However, all routines that receive cl and o use o.
Several use cl, too.

Here are a list of routines that call INST_DATA.  All use 'o'.
Their use of 'cl' is shown.  They're called as shown.

dispatchVectorI()		*CL:
	from boopsi-dispatcher
setVectorIAttrs() beginning	 CL: INST_DATA, RefreshImageData
	from dispatchVectorI().
drawVectorI() beginning		*CL: INST_DATA, SetVIVState, SSM
	from dispatchVectorI().
AllocWorkData() beginning	+CL: INST_DATA, cl->cl_UserData
	from RefreshImageData().
AllocVInstData() beginning	 CL: INST_DATA SetVIVState
	from RefreshImageData().
SetVIVState() beginning		+CL: INST_DATA, cl->cl_UserData
	from drawVectorI(), AllocVInstData(), RefreshImageData()/
RefreshImageData() beginning	+CL: INST_DATA, cl->UserData, AllocVInstData, AllocWorkData, SetVIVState
	from setVectorIAttrs().


The re-drawing in RefreshImageData() should be unnecessary.

-------------------------------------------------------------------------------

Users of vi:

drawVectorI(): vi is unused (now removed)
AllocWorkData() vi->Depth only is used
FreeWorkData() vi is unused
AllocVInstData() OK
setVIVState() OK
RefreshImageData() used

-------------------------------------------------------------------------------

Users of VCD:
	VCDAllocFill		(passed in)
	AllocWorkData		gets vcd from cl_UserData
		- called by RefreshImageData()
	FreeWorkData		(passed in)
	SetVIVState		gets vcd from cl_UserData
		- called TRUE by RefreshImageData()
	RefreshImageData	gets vcd from cl_UserData
		- called by SetVectorIAttrs()

-------------------------------------------------------------------------------

AllocWorkData(cl,o) 		->	AllocWorkData(o,vi,vcd)
SetVIVState(cl,o,state,needbm)	->	SetVIVState(o,vi,state,vcd?)
RefreshImageData(cl,o,msg)	->	RefreshImageData(o,vi,msg)
setVectorIAttrs(cl,o,msg)	->	setVectorIAttrs(o,vi,msg)
drawVectorI(cl,o,msg)		->	drawVectorI(o,vi,msg)
AllocVInstData(cl,o)		->	AllocVInstData(o,vi)

-------------------------------------------------------------------------------

All SA_ and WA_ tags are gotten with GetUserTagData().  No other
optimizations were done.

GA_Dummy	0x30000
STRINGA_Dummy	0x32000
VIA_Dummy	0x21000
IA_Dummy	0x20000

Tags passed to ordinary GetTagData():
GA_DRAWINFO
GA_DRAWINFO
GA_PREVIOUS
GA_IMAGE
STRINGA_MaxChars
STRINGA_Buffer
STRINGA_EditModes
VIA_Packet
SYSIA_Which
SYSIA_Size
SYSIA_DrawInfo
SYSIA_ReferenceFont
IA_WIDTH
IA_HEIGHT

FindTagItem
ICSPECIAL_CODE
ICA_MAP
ICA_TARGET
NSTAG_EXT
SA_Left
SA_Top
WA_Zoom
WA_CustomScreen
WA_PubScreenName

-------------------------------------------------------------------------------
