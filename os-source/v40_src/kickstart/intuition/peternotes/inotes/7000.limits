The magic limits of 7000 appear in a bunch of places in Intuition.
The intent was to have an unrealistically large number, which exceeded
any reasonable value, but that you could add a reasonable number to
without it overflowing signed short-words.  I've always believed that
the number was intended to be $7000, instead of decimal 7000.

Starting with 2.0, it's possible to have some real numbers in the
range of 7000.  There are no tragic consequences to this, but it does
limit window size to 7000 pixels (the system otherwise should handle
larger windows just fine).  There may be other effects, too.


scsupp.c: VBIG
- In IMoveScreen(), this is the MaxY of the legal screen position
(effectively unbounded).


strings.c: VBIG
- VBIG is used to TextFit() the string gadget contents without a y-constraint


windows.c: VBIG
- VBIG is used to TextFit() the window title without a y-constraint


intuinternal.h: REALBIG
- Defined here.


swsizedrag.c: VBIG
- Used to keep max position for sizing under control.  rethinkMouseLimits()
  clips against the DClip before scaling into mouse coordinates, so there
  should be no problem here.  The comment about doubling is bogus.


wtags.c: REALBIG
- REALBIG is the largest "big zoom" size if a window opens at its minimum.


zoom.c: REALBIG
- windowSizeLimits() maxes the window max-dims to REALBIG.
- legalWindowBox()  maxes the window max-dims to REALBIG.


swsizedrag.c and zoom.c also make reference to 0x8000





scsupp.c:#define VBIG   (7000)
scsupp.c:    legal_positions.MaxY = VBIG;
strings.c:#define VBIG  (7000)
strings.c:          gadwidth - extrawidth, VBIG );
strings.c:              gadwidth - extrawidth, VBIG);
strings.c:              gadwidth - extrawidth, VBIG);
windows.c:#define VBIG  (7000)
windows.c:          textright - textleft, VBIG );
ezreq.h: *      VBIGSPACE
ezreq.h:#define VBIGSPACE       (4)     /* space above frame, below gadgets     */

swsizedrag.c:       || (worklimits.MaxX > 7000) )
swsizedrag.c:       worklimits.MaxX = 7000;
swsizedrag.c:       || (worklimits.MaxY > 7000) )
swsizedrag.c:       worklimits.MaxY = 7000;
intuinternal.h:#define REALBIG  (7000)  /* bigger than any window or screen */

wtags.c:        XWINDOW(window)->ZoomBox.Width = imin( REALBIG, window->MaxWidth );
wtags.c:        XWINDOW(window)->ZoomBox.Height = imin( REALBIG, window->MaxHeight );
wtags.c:    XWINDOW(window)->ZoomBox.Width = imin( REALBIG, window->MaxWidth );
wtags.c:    XWINDOW(window)->ZoomBox.Height = imin( REALBIG, window->MaxHeight );
zoom.c:     || ( rect->MaxX > REALBIG ) )
zoom.c:     rect->MaxX = REALBIG;
zoom.c:     || ( rect->MaxY > REALBIG ) ) {
zoom.c:     rect->MaxY = REALBIG;
zoom.c:     ( maxsize.X > REALBIG ) )
zoom.c:     maxsize.X = REALBIG;
zoom.c:     ( maxsize.Y > REALBIG ) )
zoom.c:     maxsize.Y = REALBIG;
zoom.c: maxsize.X = maxsize.Y = REALBIG;





Also, for screen dragging, the mouse limits are stored in mouse-ticks,
but they're not dclip limited.  This is why you can only drag a screen
so far over (about 3000 pixels), or whatever corresponds to 32K ticks.
