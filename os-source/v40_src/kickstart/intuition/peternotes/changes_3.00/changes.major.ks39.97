(changes since KS 39.82)

SCREENS

If OpenScreen() is unable to attach screens (due to illegal
hierarchies, etc.), the screen used to open unattached.  Now, the
screen fails to open, with secondary error OSERR_ATTACHFAIL.  (Some
intermediate betas accidentally returned OSERR_NOMONITOR instead).

Trying to open a screen as the parent of an existing screen that
already has children now fails, instead of resulting in confusion.

A screen would only autoscroll if the mouse was already at the extreme
of the screen.  If the mouse was say 5 pixels from the left screen
edge, and an input event caused it to jump 20 pixels left, it would
only move 5.  Now it moves 5 and autoscrolls 15.  This wasn't very
noticable with ordinary mouse events, but the fix is needed to
correctly support programmed input events, especially non-relative
ones (like tablets).

The SDEPTH_INFAMILY flag now can be used to depth-arranges a parent
within its family.  (It used to only affect child screens).

On SA_LikeWorkbench screens, Intuition now guarantees that pens ~0 and
~1 are allocated.


WINDOWS

It is no longer possible to deadlock Intuition by judicious playing
with menus or window dragging while another window attempts to open.

Fixed the long-standing bug V39 where if a new window tries to open
active while the user is holding down some other gadget, the new
window's borders and gadgets weren't being rendered until the user let
go.

Fixed another window of vulnerability which could result in unrendered
gadgets in a newly opened window.

Setting a negative minimum width or height with WindowLimits() no
longer allows you to crash the computer by turning a window inside
out.

If you opened a really big window (size greater than 0x7FFF), the
system would crash due to a signed math error.

If you open a window of the same HelpGroup ID as an existing window,
the newly opened window takes its HelpControl() state from the
existing one.

Implemented WA_HelpGroupWindow, needed by ASL.

SetWindowTitles() now properly erases remnants of the previous title.

The window rubber-band is once again rendered into all planes.

WA_AutoAdjust no longer attempts to move the window onto the DClip.
A better solution will appear in some future version...


GADGETS

Fixed a deadlock condition in DoGadgetMethod() and SetGadgetAttrsA().
This was caused by the "exception to the rule" of Intuition locking
order.

SetGadgetAttrs() to a proportional gadget no longer can cause the
window's installed clip-region to be lost.

The boopsi strgadclass was ignoring most of its tags, due to an error
introduced during optimizations.  Now fixed.

If gadget help is turned on, and the mouse is still over the same
gadget, a new IDCMP_GADGETHELP message is now sent if the gadget
reports a different help code.  Boopsi gadgets may return different
codes depending where the mouse is.  This change allows the
application to hear those different codes.

When an active string-gadget is refreshed, its imagery is no longer
rendered in IDS_SELECTED state.


MENUS

Ghosting of the menu-headers is now done through a layered RastPort,
to fix a bug which occurs when using very wide fonts.

The flag which indicates whether a window is using NewLook menus is
now public (WFLG_NEWLOOKMENUS).

The code which copies the TextAttr used for the menu command-key's
font now deals correctly with TTextAttrs.

Menu-lending now works for menu command-key equivalents.


INTUITION PEN/COLORS SCHEME

The special values for DrawInfo pens (PEN_C0 ..  PEN_C3) were supposed
to be evaluated to specific pen numbers.  This was only happening if
the pens came from SA_Pens, and not if they came from Preferences.
The result was Intuition failed to ObtainPen() some pens on
SA_LikeWorkbench screens.

The new menu pens are now compatibly initialized.  If your SA_Pens
array is empty (i.e.  just ~0), then you get the new menu colors.  If
you specify any pens in SA_Pens, then you'll look just like 2.0.

Pens and colors are now set correctly on HAM and extra-halfbrite
screens.


TABLET SUPPORT

If an input event is a new tablet event, boopsi gadgets now get a
pointer to the TabletData structure in the gpInput structure they
receive through the GM_GOACTIVE and GM_HANDLEINPUT methods.

When a tablet driver sends a new tablet event and the active window is
tablet-aware, IDCMP_MOUSEMOVE events are sent to that window even if
the mouse-position is apparently unchanged.  This is to allow
applications to hear changes in sub-pixel position or other parameters
such as pressure.  Applications that don't request the attribute
{WA_TabletMessages, TRUE} or input events stemming from other than the
tablet are unaffected.  This means that tablet drivers must be careful
to only send events when something actually changed.

Fixed a bug where if an IESUBCLASS_NEWTABLET input event arrived when
no screens were open, enforcer hits would result.

The default tablet scaling routine now correctly provides sub-pixel
position.

Intuition's internal mouse-position variables are now long words
instead of short words.  This is needed to prevent overflow when
mapping a new tablet event to an autoscroll screen which is more than
a few times larger than normal.

The thd_ScreenChanged field of the TabletHookData structure is now
properly established.

Documentation now specifies tablet hook return value (must be zero for
now).

The documentation is now clear on the definition of the fields
TabletData->td_RangeX/Y, and IENewTablet->ient_RangeX/Y (if the tablet
runs from 0-999, the Range value should be 1000).

Defined TABLETA_Pressure to be unsigned.  Defined new
TABLETA_InProximity to handle the stylus entering/leaving proximity.


SPRITE SUPPORT

Due to a missing RTS, ClearPointer() was falling into CloseScreen().
This has been wrong since April, but a twist of fate kept it hidden
until the weekend.

The code in Intuition to manage sprite scan-doubling is now enabled.

Intuition now obtains the three sprite pens (as shared).

The internal call which allows IPrefs to change the pointer now returns
the BitMap to be freed in all cases.

Intuition recently started to fail to obtain sprite zero.  This has
been fixed.

On AA systems where BootMenu was used to select ECS or original
chipset emulation, Intuition will no longer attempt to use a sprite of
higher bandwidth than permitted.

The ROM busy pointer is now lores by default.

Intuition now correctly initializes and obtains sprite zero.

Intuition now correctly handles y-resolution flags for old mouse
pointers.

Intuition now blanks the pointer around size/shape changes, so it
looks better.

The SetPrefs() of devs:system-configuration now changes the pointer,
like in V37.  Subsequent SetPrefs() are ignored.

The pointer information returned by GetPrefs() is now the ROM default
pointer, instead of blank.  (Keeping GetPrefs() up to date with
pointer changes is no longer reasonably feasible).

The ROM default pointers as well as pointers that come in through
the old SetPointer() call are now POINTERXRESN_LORES.  This gives them
a better appearance on 320 wide 31 kHz screens.

There was a vulnerability in SetPointer() and ClearPointer() which
could result in enforcer hits if either was called while Intuition was
regenerating the pointer.

When the mouse-pointer image is in 140 ns mode, the sprite-hotspot
calculation was off by 1/4.

A rounding error in the sprite's vertical hot-spot calculation put the
sprite off by one in 31 kHz scan-doubled modes when the sprite was in
high vertical resolution.

Changing Pointer Preferences no longer causes a permanent 40 byte
memory loss.


MISCELLANEOUS

Fixed the bug which prevented the system from booting in PAL.
Intuition accidentally overwrote a flag and thought the system was
NTSC.  This bug turns out to be in 2.04, but for various reasons is of
no real consequence there.

Minor documentation clarifications to ScreenDepth(), ScreenPosition(),
struct DrawInfo, tag POINTERA_BitMap, and flag SDEPTH_CHILDONLY.

Fixed a bug which could keep hidden viewports from being properly
remade when made visible.  A third-party tester did stumble across
the bug, and it is now fixed.

The radio-button imagery no longer has gaps when it is scaled large.

The imagery for the screen depth gadget, radio button, and checkmark
gadget are now filled with BACKGROUNDPEN instead of pen zero.

The width of the scaled menu-checkmark and Amiga-key symbol has been
reduced to look better.

The Preferences->LaceWB field is now kept up-to-date based on the
screen mode.  This had been pulled to save space, but its absence
causes compatibility problems.

The Preferences LaceWB field (and whether the pretend screen mode from
GetScreenData() is lace or not) now solely depends on the height of
the TextOverscan of the true mode of the Workbench.  This helps older
applications opening on modes such as double-NTSC 640x400.

Intuition is supposed to set up initial preferences based on
devs:system-configuration, then override with new preferences
information from SetPrefs() or IPrefs.  Intuition was ignoring font
and screen mode information from devs:system-configuration.  (These
fields in SetPrefs() are supposed to be heeded exactly once only).

For sysiclass images, the default value of SYSIA_Size now comes from
the DrawInfo.  This helps Workbench look good on lores screens.

Improved Intuition's locking of the graphics ActiViewCprSemaphore.

Intuition now handles MakeVPort() failure.  Intuition will blank any
failed ViewPort, and attempt to remake it at each opportunity.
MakeScreen(), RethinkDisplay(), and RemakeDisplay() now have return
codes that reflect MakeVPort() failure.

When promotion is on, changing Overscan preferences no longer affects
old struct Preferences.


OPTIMIZATIONS

Took a bunch of major space optimizations:

Downcoded versions of a bunch of miscellaneous and rectangle routines.

Even though Intuition can render scaled images for the menu checkmark
and Amiga-key, it still kept the hand-drawn versions of each in two
sizes.  Those defaults now come from sysiclass.  (The result is a
slight change in appearance (but with compatible dimensions) on lores
screens).

MoveScreen(), WBenchToFront(), WBenchToBack() have been downcoded.

Changing the screen mode no longer affects the old Preferences LACEWB
bit, since that bit doesn't really have a clear meaning any more.

The windowObscured() function (used to determine whether clicking on
the depth gadget should send the window to the front or back) has been
downcoded.

Simplified how OpenScreen() and OpenWindow() deal with the presence or
absence of a NewScreen/NewWindow structure.

Now use the math functions from utility.library, instead of including
linked-library versions.

