The following are minor changes to Intuition for V39:

SCREENS

OpenScreen() now allocates an appropriate-sized ColorMap for new
modes.  The SA_ColorMapEntries tag can override this, to let the
application increase the ColorMap size if needed.

OpenScreen() can no longer can lose sizeof(RasInfo) bytes if it fails.

The SA_Draggable and SA_Exclusive tags are designed to help implement
"game screens" that co-exist with Intuition.  {SA_Draggable,FALSE}
allows the caller to make a screen non-draggable.  {SA_Exclusive,TRUE}
allows the caller to make a screen exclusive, meaning it will never
share the display with another screen.  Dragging down a screen that's
in front of this screen won't reveal this screen, and vice-versa.
Exclusive screens can autoscroll, but they can't be pulled down below
their natural top (since nothing would have been visible behind).

The new ScreenPosition() function extends the functionality of
MoveScreen() to also include absolute screen positioning and
forced movement of {SA_Draggable,FALSE} screens.  The hope is
that only the screen's opener (and not any commodity-type programs)
would force-move a non-draggable screen.  As well, ScreenPosition()
allows you to specify a rectangle in screen coordinates which
you wish to be made visible.  Oversized screens will be scrolled
such that the rectangle you supply will be on the visible part
of the display.

The new ScreenDepth() function unifies ScreenToFront() and
ScreenToBack() while adding some controls needed to manage child
screens effectively.

NextPubScreen() was writing a zero-byte one byte past the end of the
buffer the caller supplies.  It no longer does this.  Further, the
NextPubScreen() autodoc and screens.h and screens.i advise passing a
buffer one character bigger than previously requested.

The bar-layer of each screen no longer does any backfill processing,
since Intuition fully re-renders the screen bar anyway.  For
bar-layers and menu clip-layers, OpenScreen() now uses the new
LAYERS_NOBACKFILL magic constant instead of a stub do-nothing hook.

OpenScreen() installs a no-op layer-info backfill hook instead of
letting CloseScreen() poke the RastPort mask to zero.  This was
necessary so that disposing the menu-layer didn't clear the underlying
bits.  The new method is legal.

OpenScreen() now supports the new SA_BackFill tag, to install a
LayerInfo backfill hook.

Intuition now ensures that WB screen is at least 640x200.  We need
this to safely allow low-res (and other odd resolution) Workbenches.

OpenScreen() and the routine which open the Workbench now call
OpenScreenTagList() through the LVO, which will allow some useful
SetFunctioning.

Made a small change to properly support oversized scrollable Hedley
screens.  There is no point in being able to pull a MCOMPAT_NOBODY
screen down below its DClip top (since you can't see any other screens
behind an MCOMPAT_NOBODY screen).  Intuition now enforces this, since
it's sensible, and easier than teaching Hedley mode how to work when
pulled down.  (Remember that there are a bunch of differences between
a screen pulled down below its nominal position and an oversized
screen which is moved around, but its DClip is always full).

When Intuition allocates a BitMap (i.e.  a non-CUSTOMBITMAP screen),
it now uses AllocBitMap(), and copies the struct BitMap into
screen->BitMap, instead of performing AllocBitMapData() on
&screen->BitMap.  This is the direction we're headed anyways for RTG,
and is needed for double-buffering.  Intuition internally now uses the
real bitmap (screen->RastPort.BitMap) instead of &screen->BitMap.

The new SA_Colors32 tag can be used to provide 32-bit color
information at OpenScreen() time.  ti_Data points to a longword-array
that Intuition will pass to LoadRGB32().  See the autodoc for
LoadRGB32() for details.

The new SA_VideoControl tag allows an application to provide a taglist
which Intuition will pass to VideoControl() after opening the screen.
This can be useful to turn on border-sprites, for example.


WINDOWS / REQUESTERS

The new ScrollWindowRaster() function implements ScrollRasterBF()
at the Intuition level.  You will receive an IDCMP_REFRESHWINDOW
event if there is damage to your window.

When you supply the "alternate-size" rectangle for zooming using the
WA_Zoom tag, you can now specify (-1,-1) for the Left and Top edges.
This instructs Intuition to perform size-only zooming.  Whereever the
window is placed, zooming will toggle size but not affect position
(unless moving the window would be required to keep it on-screen).
Using (-1,-1) under V37 is safe, and equivalent to using (0,0).

Windows that have the WA_AutoAdjust property are now moved to the
visible portion of an oversized screen if they try to open above or to
the left of the display-clip.

Clicking in the no-window area of a screen now activates that screen
(for purposes of autoscrolling).

The WindowPort is now embedded in the extended-window structure.  The
most commonly used way in which ModifyIDCMP() could fail is when you
set the window->UserPort to your shared port, then call ModifyIDCMP()
to create the WindowPort.  This case can no longer fail.

The new OpenWindow() tag WA_NotifyDepth allows a window to request
IDCMP_CHANGEWINDOW messages when that window is depth-arranged.  These
messages arrive with a Code value of CWCODE_DEPTH (1) to distinguish
them from move/size IDCMP_CHANGEWINDOW messages, which have a Code
value of CW_MOVESIZE (0).

Intuition has always forced backdrop windows to have no system gadgets
except close.  Zoom had been forgotten.

Fixed a long-standing bug where REQCLEAR messages weren't being sent
when a requester having no layer is taken down while other requesters
are still up in the window.

When inactive, window borders are filled with BACKGROUNDPEN, instead
of pen zero.  There are presumably more places when pen zero is used,
but they're going to be hard to track down.

Major optimizations for space and speed (without sacrificing
appearance) of the window sizing/dragging rubber-band box.  Intuition
had support for variable-thickness rubber bands, but this was unused.
As well, the vertical strokes were rendered with two lines each,
instead of a RectFill() each, which would be faster.  Also, there was
unnecessary clipping code (which was incorrect for interleaved
BitMaps).


GADGETS/IMAGERY

There is a new boopsi function in Intuition called DoGadgetMethodA(),
which invokes the specified method, but includes a valid GadgetInfo
structure if possible.  SetGadgetAttrsA() now uses DoGadgetMethodA().
Two SetGadgetAttrsA() bugs were fixed in the process.  First, if
a requester is off-window, it has no layer.  SGA() of a gadget in such
a requester wasn't being sent to the gadget.  OM_SET is now sent
with a GadgetInfo of NULL.  Second, there was no locking around the
call.

FrameIClass now supports the standard frame types used by GadTools and
recommended by the Style Guide, including the standard GadTools-style
bevelled box, the GadTools string-gadget ridge, and the AppWindow icon
drop-box specified by the Amiga User-Interface Style Guide.

I fixed a scaling error in the vector image-class stuff that made the
resulting images a bit too small.

Trying to get an attribute unknown to imageclass no longer invokes the
superclass twice.

The standard system arrows are improved (and take less ROM).

A ghosted string gadget no longer causes patterning in string gadgets
that precede it in the list and have a non-zero container
background-pen.

NewModifyProp() of a disabled prop gadget no longer clears away
part of the ghosting.

The GadTools checkbox and GadTools radio-button imagery is now marked
as scaling, to allow GadTools to support scaled checkboxes and
radio-buttons.

If a prop gadget's knob was all the way up (or left), but the pot
value was not zero, 2.0 gave no way to drag it to zero without first
dragging it down (or right).  It now behaves correctly (like 1.3).

The default string edit hook now ignores Return or Enter keystrokes
that have the repeat-qualifier set.

Intuition's gadget and interconnect classes now select the MapTags()
option to preserve unknown tags.  This is reasonable and necessary,
and under V37, a utility.library bug gave Intuition this option even
though it had requested tossing unknown tags.

The DrawImageState()/EraseImage() routines weren't cloning the
RastPort, meaning that RastPort settings could be affected by boopsi
images.

The basic gadget types (classic prop, bool, string) now support
GFLG_LABELIMAGE.


MENUS

Menus now use AllocBitMap() and FreeBitMap(), which saves ROM space,
as well as allows menus on interleaved-bitmap screens.

The ProPage transparent-menus fix needs to be in two places in
Intuition.  I added it to the second place (fairly rare case, though).


SPRITE

The mouse-pointer no longer blanks in the first gap when three
interlaced screens up.

In certain screen mode changes (eg.  promotion on/off), the sprite
used to jump.  This happened because MoveSprite() was called after the
viewports were reworked, but before the copper lists were regenerated
and installed.  Now, if the copper lists are going to be rebuilt,
MoveSprite() isn't called until right after the LoadView().

The ROM default sprite pointer now is the 2.0 one, instead of the 1.3
one.


COERCION, etc.

Changing IControl coercion settings now causes the coercion to be
refigured immediately, instead of waiting for the next screen shuffle.

DClips of coerced ViewPorts are finally scaled correctly.

Fixed bug where ViewPort offsets were only being set up when the
ViewPort was visible and MEGAFORCE was in effect.  This had caused
problems with scaling DClips, where ViewPort offsets need setting even
if the ViewPort is invisible.

Coercion is no longer recalculated just because the global LACE mode
changes.

Fixed bug where ViewPort offsets were only being set up when the
ViewPort was visible and MEGAFORCE was in effect.  This had caused
problems with scaling DClips, where ViewPort offsets need setting even
if the ViewPort is invisible.


MISCELLANEOUS

There is new alert code which allows for time-out of alerts, and
regularizes the flashing speed (the death of 0x6809!).

Intuition no longer uses AllocRemember(), and never ever uses
FreeRemember(FALSE).

In struct Preferences, the unused WorkName[] field is now split into
PrtDevName[], DefaultSerUnit, and DefaultPrtUnit, for multi-serial
preferences and more flexible printer-preferences.

To avoid collision with C++ keywords, intuition_lib.sfd no longer use
the variable named "class".

DisplayBeep() now saves and restores 32 bit-per-gun colors, and is
smaller as a result.

Now use SetABPenDrMd() instead of individual calls, when possible.

The endcode pointer in Intuition's romtag is now correct.

Added missing WaitBlit()s in three places:  before screen's bitmap is
freed, before system-image-class data is freed, and before that
class's TmpRas is freed.  Should fix Martin's report of trashed
menu-checkmark.  (Under 2.0x, only the GadTools radio button was
vulnerable to this bug).

Two LVOs (that exist but do nothing under V37) have been reserved for
IPrefs to implement a Reset-WB handler, which would allow applications
to get notified to shut-down / re-open when the Workbench is reset.


DOCUMENTATION

Includes and autodocs updated to include various V39 features,
and to fix reported bugs from V37 set.

In intuition.h/.i, WA_BackFill is no longer marked as unimplemented.

The missing MIDDLEDOWN, MIDDLEUP, KEYCODE_Z, SCREEN_DRAG, and
MOUSE_ACCEL definitions have been added to intuition.i and
preferences.i.

The V36 beta-only names have been removed from iobsolete.h.

Fixed documentation of struct ColorSpec.

