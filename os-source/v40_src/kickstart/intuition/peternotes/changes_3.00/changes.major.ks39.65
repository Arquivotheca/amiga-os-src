NEWLOOK TITLEBAR AND MENUS

On aware screens, the title-bar has a nicer appearance.

There are three new pens in the DrawInfo:

BARDETAILPEN - pen to use for details like text in the screen-bar and menus
BARBLOCKPEN - pen to fill the screen-bar and menus with
BARTRIMPEN - pen to use for the trim-line under the screen-bar

The intended colors are:
	BARDETAILPEN & BARTRIMPEN: black
	BARBLOCKPEN: white

These pens default to the old Screen->DetailPen and ->BlockPen, for
compatibility.  However, if you set them when you open your screen,
your titlebar will carry the new appearance.

Intuition now provides control over the colors used for menu
rendering, and also provides scaling of the Amiga-key and checkmark
symbols.

To request NewLook menus, set the (new) WA_NewLookMenus tag to TRUE.
This instructs Intuition to use the new BARDETAILPEN and BARBLOCKPEN
for rendering the elements of your menus.  (Be sure to use these pens
yourself when you make up your menu items.)

The "sysiclass" image-class can now generate the Amiga-key and
checkmark images.

Per screen, the Amiga-key and checkmark images used will be
appropriately colored and scaled to the screen's font.  (You can find
pointers to their imagery in the DrawInfo structure for that screen).

"sysiclass" recognizes a new tag, SYSIA_ReferenceFont, which you can
use to make a checkmark or Amiga-key appropriately sized for your
chosen font.  You can then use the (V36) WA_CheckMark tag or the new
WA_AmigaKey tag to override the imagery Intuition will use in the
menus.

HIGHCOMP menu items in NewLook menus complement in such a way that
BARDETAILPEN and BARBLOCKPEN are interchanged one with the other.


ATTACHED SCREENS

Intuition now supports attached screens.  OpenScreenTags() now
supports the SA_Parent tag to attach a new child to an existing
parent.  The SA_FrontChild and SA_BackChild tags can be used to attach
an existing child in front of or behind a new parent.  When opening a
parent screen you can specify multiple SA_xxxChild tags, in order to
attach multiple children.  Child screens can be dragged independently
of each other and their parent (though never above their parent).
Pulling down the parent below its natural top causes the child screens
to move as well.

There are times when a parent and child screen are supposed to
masquerade strongly as a single screen.  Set the new SA_Draggable tag
to FALSE to get a child-screen which drags the parent (when dragged
through MoveScreen(), its drag-bar, or mouse-screen-drag).  The new
ScreenPosition() function allows the application to independently move
even such a screen.

Attached screens also depth-arrange as a group, whenever the user does
the depth-arranging.  Programmatic depth arrangement of the parent or
child does the same.  The new ScreenDepth() function allows
programmatic depth arrangement of a child with respect to its family.

To complement attached screens, a feature called "menu lending" has
been implemented.  This allows menu button presses in one window
to activate the menus of a different window.  The idea is to allow
unification of the menu strips of attached screens.

An attached-screens demo has been released to V39:aug/bin/asdemo,
V39:aug/doc/asdemo.doc, and V39:aug/src/asdemo.c.


SPRITE SUPPORT

The Intuition pointer now supports the various new sprite modes of the
AA chipset.  This includes 16, 32, and 64-bit wide sprites, as well
as the sprite-pixel resolution control.

For applications, there is a new boopsi class called "pointerclass",
which is used to create Intuition pointer objects.  The new pointer.h
include file contains definitions for the attributes that pointerclass
supports, including:

	POINTERA_BitMap - bitmap to use for sprite imagery
	POINTERA_XOffset, POINTERA_YOffset - sprite hot-spot
	POINTERA_WordWidth - intended width in words of this pointer
	POINTERA_Resolution - intended resolution of this pointer

The resolution can be any of the hardware resolutions (ECS-compatible,
140 ns, 70 ns, or 35 ns), but Intuition also adds choices for
	- sprite resolution to match screen pixel resolution
	- sprite resolution to be "always lores"
	- sprite resolution to be "always hires"

There are is a new call, SetWindowPointerA(), which takes a window and
a taglist.  The WA_Pointer tag is used to set the pointer to a custom
pointer obtained from pointer class or to restore the default pointer.
The WA_BusyPointer tag requests the system default busy pointer (!).
The WA_PointerDelay tag requests that changing the pointer be deferred
a short while.  The pointer-change will be called off by a subsequent
call to SetWindowPointerA(), SetPointer(), or ClearPointer().  This is
very useful for applications that don't know how long they'll be busy
for.  The same three tags are now recognized by OpenWindowTagList(),
so you can now open a window with a custom (or standard busy) pointer
in place.

The old SetPointer() and ClearPointer() still work.

>From the Preferences side, Intuition now accepts wide sprites from
IPrefs.  As well, Intuition accepts new Preferences busy-pointers
from IPrefs.  The changes I made to IPrefs need to be integrated
into V39 IPrefs.

Intuition is now doing its part of the sprite-compatibility game.
Basically, if an application requests a sprite of its own whose mode
is incompatible with the Intuition pointer, then Graphics will blank
the pointer and notify Intuition.  Intuition will rebound by putting
up a new pointer which is compatible.

What doesn't work:
- Using attached sprites for the Intuition pointer is currently
  broken.
- There are some hot-spot scaling issues not yet addressed
- The pointer information returned by GetPrefs() is no longer kept
  up-to-date.  I think GetDefPrefs() is also returning weird stuff
  for the pointer part.
- Calling SetPointer() or ClearPointer() from an input handler is now
  unsafe.


DOUBLE-BUFFERING SUPPORT FOR SCREENS

Intuition now has most of the support for double (or multiple)
buffering inside an Intuition screen, with full support for menus, and
full support for gadgets whose imagery returns to the initial state
when you release them (eg.  buttons).  To use other kinds of gadgets
(eg.  sliders) you need to put them on a separate screen, which can be
an attached screen.

The AllocScreenBuffer() call allows you to create alternate buffers
for your screen, while ChangeScreenBuffer() attempts to install the
new buffer.  ChangeScreenBuffer() will fail if Intuition is
temporarily unable to make the change (say while gadgets or menus are
active).  Intuition builds these functions on the new graphics.library
ChangeVPBitMap() function, so the signalling information that graphics
provides is also available to the Intuition user.  To clean up, call
FreeScreenBuffer().  Consult the autodocs for full details.


EXTENDED GADGETS, GADGET HELP, and SPECIAL GADGET RELATIVITY

The gadget structure has been extended to include a new long-word of
flags and a bounding box.  "gadgetclass" (hence all its subclasses)
are now ExtGadgets.  The bounding box is used for size damage and
gadget help processing (it defaults to the same as the gadget box).
The GA_Bounds tag is supported for setting these bounds.

Intuition now supports Gadget Help.  If a window is opened with
WA_GadgetHelp,TRUE, and the user hits the help key over the bounding
box of a gadget which has the GMORE_GADGETHELP property, then
an IDCMP_GADGETHELP event will be sent.  There is a corresponding
boopsi GM_HELPTEST method which boopsi gadgets can use to refine
their hit areas or to delegate hit-testing to member gadgets.  Boopsi
gadgets can also return values for the IntuiMessage Code field of
the IDCMP_GADGETHELP message.

The routine that manages erasing and redrawing GREL gadgets during
window resizing now uses the bounding box instead of the gadget box.
This means that you can finally have GREL gadgets which have imagery
(eg.  a gadget label) extending outside of the select box.  As well,
there is a new boopsi GM_LAYOUT method.  If your gadget has any of the
GREL properties, it will receive a GM_LAYOUT method when the gadget is
first added (or the window containing the gadget is first opened), as
well as whenever the window size changes.  At GM_LAYOUT time, the
gadget can change its gadget select box and/or bounding box.  It can
re-allocate or change its image dimensions if it likes.  If it's a
group-gadget, it can move its members around.  To round this all out,
there is a new "special relativity" property, GFLG_RELSPECIAL or
GA_RelSpecial.  This property doesn't affect the interpretation of the
gadget box, but it does allow your gadget to receive GM_LAYOUT
methods, hence have arbitrary layout power.


NEW TABLET SUPPORT

There is a new subclass of IECLASS_NEWPOINTERPOS called
IESUBCLASS_NEWTABLET.  This subclass should hopefully solve tablet
handling quite nicely.  The tablet driver fills out a few
tablet-oriented properties (like the current value and range in X and
Y), and then Intuition calls the driver back through a hook once it
has established what the active screen is and what the rectangle the
tablet should scale itself to should be.  This handles screen
resolution changes, autoscroll screens, pulled down screens (as well
as possible), and attached screens.  The tablet can then scale
according to some tablet preferences settings it manages (eg.
preserve aspect, center, best fit horizontal, best fit vertical) The
tablet can leave the hook NULL and reasonable default scaling will
occur.

Windows that request the new WA_TabletMessages property receive
extended IntuiMessages, which include a pointer to a TabletData
structure that has some information such as sub-pixel position.  In
addition, there is a pointer to a taglist, and we have definitions for
standard tags such as pressure, tilt, more buttons, and a
Z-coordinate.


IMAGE-DISABLE

If an image-class of a gadget's image returns TRUE for the new
IA_SupportsDisable tag, then Intuition doesn't ghost the gadget
itself, but passes the IDS_DISABLED or (the new) IDS_SELECTEDDISABLED
state to DrawImageState().


PEN-SHARING

Intuition now uses the graphics.library pen-sharing scheme.  Pens
found in the DrawInfo->dri_Pens are obtained as sharable.  For regular
public and custom screens, all other pens are allocated as exclusive.
For custom screens and public screens that set the new SA_SharePens
tag to TRUE, all other pens are left unallocated.  On the Workbench
screen, pens 0 to 3 and ~0 to ~3 are guaranteed to be sharable.
Screens with SA_SharePens set to TRUE will have the new PENSHARED bit
set in the screen->Flags field.

The sprite pens are not yet allocated (they will be allocated as
shared, we expect).


IVG->GRAPHICS

Intuition now relies on graphics.library CalcIVG() to determine the
inter-screen gap.


WINDOW-DEPTHING

The window depth-gadget now correctly determines whether a click
should send the window to front or to back, based on whether the
window is obscured or not, rather than on whether it's the top layer.


COERCION->GRAPHICS

Intuition no longer has coercion tables.  Rather, it lets
graphics.library figure out the correct coercion, through the new
CoerceMode() function call.  Coercion routines now rely on
graphics.library to handle exclusion based on monitor-compatibility
flags.


PROMOTION

Intuition introduces the first part of promotion.  Crudely speaking,
promotion is flicker-fixing in software for new chipset machines.
Intuition is now capable of displaying the front screen in a mode
other than the one the programmer requested, based on Preferences
Promotion settings and the CoerceMode() call in graphics.

Currently, IControl supports a single on/off promotion option.  If
this option is on (and the double-NTSC monitor is available), then
NTSC modes will be shown as their double-NTSC (i.e.  de-interlaced)
equivalents.

Some work still needs to be done to perfect graphics/CoerceMode().
(Intuition relies entirely on graphics to pick the best mode to coerce
to).  Also, some of the doubleNTSC modes don't always work right yet
(eg.  the 320x200 equivalent one).  Also, doublePAL does not exist
yet.

As well, we need to present the user with the appropriate promotion
choices.  I believe these choices will be:

- no promotion
- promote to 31 KHz family (i.e. Productivity family, doubleNTSC,
  or doublePAL) when reasonable
- promote to 31 KHz family always
- promote to a particular monitor (eg. Super72) always


SYNCHRONOUS WINDOW ACTIVATION

When a WFLG_ACTIVATE window is opened, Intuition now activates it
synchronously.  The big benefit is that the window's border isn't
first drawn inactive, then activated.

Known problem:  if a window tries to open active while the user is
holding down a gadget, the layer opens blank, and then Intuition waits
for the user to let go.


WINDOW TITLE TEXTFIT OPTIMIZATION

Every time a window border was redrawn, Intuition used to perform a
TextFit() to figure out how many characters of the window's title were
displayable.  To speed things up, that result is now stored and only
recalculated when the window's size or title changes.


INTERLEAVED SCREEN BITMAPS

The new {SA_Interleaved,TRUE} tag allows applications to request that
their custom or public screen have an interleaved bitmap.

Workbench is now interleaved by default.  The idea is that early
releases should go out like this so we can explore compatibility
aspects of interleaved bitmaps.  The NoInterleaveWB program turns this
off.


EASYREQUEST/AUTOREQUEST IN A WINDOW

EasyRequests and AutoRequests used to consist of a window with a
requester inside, which meant two layers.  This consumed memory and
slowed down requester and other window operations.  Now, the gadgets
and imagery are brought up directly in the window, saving a layer.
