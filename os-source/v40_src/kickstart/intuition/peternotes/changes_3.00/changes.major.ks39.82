PROMOTION

The "all-new" promotion scheme is now done.  In the last release,
Intuition did most of the work by substituting a VGA-mode for the
requested PAL or NTSC mode.  One problem with that is that enquiries
into the graphics database gave the information for PAL or NTSC, which
wasn't what was appearing.

In this release, the promotion flag instructs Intuition to tell
graphics to change the mapping of the default monitor.  Database-aware
programs will now receive information about the double-NTSC or
double-PAL mode when enquiring about the default monitor.  Of course,
if the user changes the promotion setting after the application is
open, not everything it learned from the database will still be true.
The new method also means that an application can request to never be
promoted by asking for explicit NTSC or explicit PAL, instead of the
default monitor.

The IControl Promotion option is only heeded when the system is an
enabled AA system.


SCROLLRASTER DAMAGE DETECTION FOR GADGETS

Intuition now notices and repairs damage when boopsi gadgets use
ScrollRaster().  (Such damage occurs when the gadget is in a
simple-refresh window and part of the scrolled area is obscured).
Such gadgets MUST set GMORE_SCROLLRASTER in order to benefit from this
magic repair feature.  (Note that ScrollWindowRaster() is for
applications.  Boopsi gadgets ought to use ScrollRaster() or
ScrollRasterBF()).


INTUITION PEN/COLORS SCHEME

The SA_LikeWorkbench tag gives you a screen just like the Workbench.
This was basically a consequence of getting pens settable through
preferences while keeping NewLook menus on the Workbench screen.

When the SA_Pens pen-array is evaluated, pens are masked to the number
of available colors.  As well, special definitions of pen-number
(PEN_C3, PEN_C2, PEN_C1, and PEN_C0) mean the complementary pen
numbers of pens 0-3.

Preferences now listens to only 8 colors for the bitmap, which
Intuition will set as the first four and the last four colors of the
Workbench or any "Workbench-like" screen (those having the
SA_FullPalette or SA_LikeWorkbench attributes).

The way the DrawInfo pens are determined is Intuition picks a default
pen-array.  Then, any pens you supply with SA_Pens override the
defaults, up until the ~0 in your array.  If the screen is monochrome
or old-look, the default will be the standard two-color pens.  If the
screen is two or more planes deep, the default will be the standard
four-color pens, which now include the new-look menu colors.

If the screen has the SA_LikeWorkbench property, the default will be
the user's preferred pen-array, changeable through preferences.  There
is a preferred pen-array for four colors, and one for eight or more
colors.


GADGET HELP

Gadget help has been reworked because the previous approach was
incorrect.  Gadget help is now a window state, and help messages are
sent when the mouse is over a gadget that chooses to respond.  No
mouse-click or help-keystroke is required to trigger gadget help
events.  This state does not affect any other operations.  You call
the HelpControl() function to turn gadget help on or off.  When
enabled, you only need to pass the mouse over a gadget and
IDCMP_GADGETHELP will be sent.

Basically, you use HelpControl(win,flag) to turn it on and off for
your window.  There will be style guidelines on what sort of user
action should make you call HelpControl() (eg.  a menu or keystroke).

Like AutoPoint, if the mouse has travelled any great distance since
the last timer event, gadget help is not checked.  Also, if the mouse
has not moved at all since the last gadget help check, gadget help is
not rechecked.  If Intuition discovers that the mouse is still over
same gadget as the last one that sent gadget help, no new IntuiMessage
is sent.  All this is to maximize performance.

When the mouse is over a GMORE_GADGETHELP gadget, you get a message
whose IAddress points to the gadget.  When the mouse is over the
window but not over any help-aware gadget, you get a message whose
IAddress is the window itself.  When the mouse is not over the window,
Intuition sends a message whose IAddress is zero.

Ordinarily, gadget help only applies to the active window.  However, a
multi-window application can mark all its windows as being in a group
(using the WA_HelpGroup tag), which makes Intuition test gadget help
in all windows of the group when any one of them is the active one.
There is a new utility.library function called GetUniqueID() which
must be used to provide an ID for WA_HelpGroup.  If you have only one
window, there is no need to pass WA_HelpGroup.

	helpgroup = GetUniqueID();

	for ( each window )
	{
	    win[x] = OpenWindowTags(...,
	        WA_HelpGroup, helpgroup,
	        TAG_DONE );
	}

Inactive windows whose WA_HelpGroup matches the active window's are
also subject to gadget help testing.  IDCMP_GADGETHELP messages are
sent to the window the mouse is over.  The GADGETHELP message with an
IAddress of zero means the mouse is not over the active window or any
other window of the same group.  It is always sent to the active
window (which is not necessarily the window in your group that last
got a message).
