*** Rendering Optimizations

Several important rendering optimizations make Intuition appear
snappier and cleaner.  Here is a partial list:

o When a WFLG_ACTIVATE window is opened, Intuition now activates it
  synchronously.  The big benefit is that the window's border isn't
  first drawn inactive, then activated.

o EasyRequests and AutoRequests used to consist of a window with a
  requester inside, which meant two layers.  This consumed memory and
  slowed down requester and other window operations.  Now, the gadgets
  and imagery are brought up directly in the window, saving a layer.

o The window sizing/dragging rubber-band box is now much faster.

o The bar-layer of each screen no longer does any backfill processing,
  since Intuition fully re-renders the screen bar anyway.

o Intuition now avoids spurious border and gadget refresh and sending
  a spurious IDCMP_REFRESHWINDOW event.  Formerly, if an application
  had not cleared its window's damage, and any other damage-causing
  operation (eg.  menus, window sizing/movement) occurred on the same
  screen, another round of refresh was performed.  Intuition now can
  tell if the window's layer had been damaged since the last
  IDCMP_REFRESHWINDOW message went out.

o Menus are brought on-screen somewhat faster than before, and are
  removed very much faster than before.  (3.01 and up only)

o A lot of work has been done to reduce window border and gadget
  flashing during window resize operations.  (3.01 and up only)


*** Bug Fixes

NextPubScreen() could write a zero-byte one byte past the end of the
buffer the caller supplies.  It no longer does this.

Clicking in the no-window area of a screen now makes that screen the
active screen (for purposes of autoscrolling).

Fixed a long-standing bug where REQCLEAR messages weren't being sent
when a requester having no layer is taken down while other requesters
are still up in the window.

Setting a negative minimum width or height with WindowLimits() no
longer allows you to crash the computer by turning a window inside
out.

SetWindowTitles() now properly erases remnants of the previous title,
even when odd extenders happen.

A ghosted string gadget no longer causes patterning in string gadgets
that precede it in the list and have a non-zero container
background-pen.

NewModifyProp() of a disabled prop gadget no longer clears away part
of the ghosting.

If a proportional gadget's knob was all the way up (or left), but the
Pot value was not zero, 2.0 gave no way to drag it to zero without
first dragging it down (or right).  It now behaves correctly (like
1.3 did).

SetGadgetAttrs() to a proportional gadget no longer can cause the
window's installed clip-region to be lost.

The mouse-pointer no longer blanks in the first gap when three
interlaced screens up.

Several causes of sprite-pointer jumping have been fixed.

The ROM default sprite pointer now is the 2.0/3.0 one, instead of the
1.3 one.

DClips of coerced ViewPorts are finally scaled as correctly as
possible.

If you used a boopsi string gadget as an integer gadget, with
Intuition supplying the buffer, and you specified a STRINGA_MaxChars
of > 15, you would get a mismatched FreeMem() when the gadget is
disposed.  This is now fixed.

There is a bug in 3.0 (not in 2.0x and fixed in 3.01) where the autoscroll
boundary was inadvertently switched to be the DClip of the active
screen, where it used to be the "hull" of the DClips of all the
screens.  If there are two screens in the system with different
DClips, the mouse can be way outside the DClip of the smaller screen.
If that screen is active, it will AutoScroll at a ridiculous rate.
For example, if the mouse is seventeen pixels below its DClip, moving
it down one pixel causes the screen to autoscroll by eighteen, instead
of one.  This is now fixed.

Intuition now updates its internal time values based on (nearly) _any_
InputEvent it receives, instead of just IECLASS_TIMER ones.  The
problem was that outgoing IntuiMessages get their time from this
internal time, which meant that IntuiMessage time was the time-stamp
of the most recent timer tick, instead of the time-stamp of the event
that actually triggered this IntuiMessage.  This problem completely
precludes correlating an IntuiMessage with the InputEvent that caused
it, which is important for tablet people, for example.

After creating the BarLayer of a SCREENQUIET screen, Intuition now
changes its backfill hook to the screen's LayerInfo backfill hook.
This fixes the bug where the part of a window obscuring the title-bar
area of a SCREENQUIET screen wasn't erased when the window was closed.
(Effectively, Intuition was relying on a layers side-effect that was
optimized out for V39).

When Intuition splits a single InputEvent into button and movement
components, the button event is now sent first.  This fixes some
inconsistencies with extended input information like pressure, as well
as odd behavior of the qualifiers, in particular IEQUALIFIER_MIDBUTTON.
