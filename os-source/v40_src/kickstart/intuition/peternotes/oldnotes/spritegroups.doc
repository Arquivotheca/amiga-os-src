SpriteGroups - A proposal to solve sprite-compatibility issues while
adding desirable functionality.

Revised: 5-Aug-91

---------------------------------------------------------------------------
---------------------------------------------------------------------------

OVERVIEW
- What are SpriteGroups?

NAMING
- Some nomenclature assumptions and suggestions

GRAPHICS FUNCTIONS
- New graphics.library functions for SpriteGroups

INTUITION FEATURES
- SpriteGroup support in Intuition

QUESTIONS AND PROBLEMS
- General open issues for SpriteGroups

"OLD VS. NEW" ARBITRATION ISSUES
- Issues and discussion of SpriteGroups vs. old GetSprite()

SPECIAL INTUITION ISSUES
- Issues particular to Intuition's compatibility goals

---------------------------------------------------------------------------
---------------------------------------------------------------------------

OVERVIEW:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

SpriteGroups are a way to solve the compatibility issues surrounding
sprites.  The basic problem is that old-mode and new-mode sprites
cannot co-exist in an Amiga, yet we would like to allow the Intuition
pointer to exist in any mode, while maintaining compatibility and the
ability of applications to use suitable sprites.

A SpriteGroup is a context owned by an application.  Individual
sprites can be allocated from a SpriteGroup, independent of other
SpriteGroups.  These sprites are called GSprites.  SpriteGroups may be
active or inactive.  An active SpriteGroup has its GSprites displayed.
The GSprites of inactive SpriteGroups are not displayed.  A
SpriteGroup is allocated in a particular sprite-mode.  SpriteGroups of
incompatible modes can co-exist because only one SpriteGroup is active
at any given time.  (Future versions of graphics may allow multiple
compatible sprite-groups to be active.)

Graphics.library provides calls to allocate and free SpriteGroups, and
calls to allocate, free, change or move GSprites of a given
SpriteGroup.  As well, there are calls that control which
SpriteGroup(s) are to be active.

SpriteGroups are generally exclusive with old-sprites (those obtained
through GetSprite()).  GetSprite() or AllocSpriteGroup() can fail if
the "other way" is currently in effect.

Under Intuition, the pointer image is tied to the active window.
Typically, most applications do not use sprites other than the
pointer, so Intuition is free to set the sprite-mode in a manner
suitable for the pointer.  The sprite-mode will be determined from the
user's Preferences or by the application's call to some
NewSetPointer() call.

However, an application that wishes to use sprites could cause a
conflict with the pointer sprite.  This problem can be solved by tying
the active SpriteGroup to the active window, and requiring that an
application supply a pointer-image which is compatible with the mode
of its SpriteGroup.

When an application (for example, any existing one that uses sprites)
calls GetSprite(), Intuition will recognize this occurrence (through a
SetFunction()).  Intuition will have an old-mode (1X-width) pointer
image and wait-pointer image it can fall back on (for use when the
desired pointer is other than 1X-width).  When the application
releases its sprites through FreeSprite(), Intuition will return to
normal behavior.

Further, Intuition will grow some supplemental features, because while
SpriteGroups must necessarily depend on the active window, that is not
sufficient to create "game screens", which are basically complete
Intuition-integrated environments.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

NAMING:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

I don't know what the function that converts a bitmap to a sprite will
be called, but for now I'll assume it's called BitMapToSprite(), and
returns a struct SpriteData *.  Maybe it'd be fair to call it

    struct SpriteData *AllocSpriteData( struct BitMap *, flags? )

and then have

    void FreeSpriteData( struct SpriteData * )

I played with names for the context, and SpriteGroup is OK.  I had
originally called an individual sprite within a context a GroupSprite,
but that's confusable with SpriteGroup, so I settled on GSprite.  Its
biggest drawback is that it rhymes with VSprite.  Perhaps we can use
"SpriteSet" after all, since the actual sprites would then be called
SSprites.  For that to happen, all we have to do is find new names for
SetSpriteSet() and ClearSpriteSet().

---------------------------------------------------------------------------
---------------------------------------------------------------------------

GRAPHICS FUNCTIONS:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

AllocSpriteGroup() -- Allocate a context to manage application sprites.

    void *sg = AllocSpriteGroup( mode )

    mode = some encoding of sprite-resolution and width

AllocSpriteGroup() allocates and initializes a "SpriteGroup", which is
a context for application sprites.  Sprites within this context are
called GSprites, and are independent of GSprites in other SpriteGroups
(even those that may share the same physical engine).  When a
SpriteGroup is active, its GSprites are on the display.  The GSprites
of inactive SpriteGroups are not displayed.  Hardware properties
determine how many SpriteGroups may be active, but for regular and AA
Amigas, only one SpriteGroup is active at a time.

---------------------------------------------------------------------------

FreeSpriteGroup() -- Free a SpriteGroup obtained with AllocSpriteGroup().

    void FreeSpriteGroup( void *sg )

    sg = SpriteGroup obtained with AllocSpriteGroup(), or NULL.

FreeSpriteGroup() is used to release the resources obtained via
AllocSpriteGroup().

---------------------------------------------------------------------------

SetSpriteGroup() -- Set a new active SpriteGroup.  May inactivate a
	previously-active SpriteGroup.

    success = SetSpriteGroup( void *sg )

The holder of graphics' SpriteGroup semaphore may change which
SpriteGroup is active.  That SpriteGroup's GSprites will appear on the
display.  If another SpriteGroup is deactivated, its GSprites will
vanish.  This call will fail if the caller is not the holder of
the SpriteGroup semaphore.

When running under Intuition, applications never need to worry about
this function.

---------------------------------------------------------------------------

ClearSpriteGroup() -- Inactivate a particular SpriteGroup.

    void ClearSpriteGroup( void *sg )

Ensures that the given SpriteGroup is not currently being displayed.
Call this before calling FreeSpriteGroup().

When running under Intuition, applications never need to worry about
this function.

---------------------------------------------------------------------------

GetGSprite() -- Attempt to get a sprite from the specified SpriteGroup.

    WORD num = GetGSprite( void *sg, struct SimpleSprite *ss, WORD num )

    sg = SpriteGroup handle obtained from AllocSpriteGroup().
    ss = Pointer to SimpleSprite structure to use.
    num = Desired sprite-number, or -1 for "any".

Obtain use of a GSprite from within the specifed SpriteGroup.  Pass in
the desired sprite-number, or -1 if you don't care.  Be sure to
FreeGSprite() when done.

---------------------------------------------------------------------------

FreeGSprite() -- Release a sprite back to its SpriteGroup.

    void FreeGSprite( void *sg, WORD num )

    sg = SpriteGroup handle obtained from AllocSpriteGroup().
    num = sprite-number of sprite to free.  Function has no effect if
	-1 is passed in.

Release a GSprite, marking it as unallocated within the specified
SpriteGroup.  This GSprite must have been obtained through
GetGSprite().

---------------------------------------------------------------------------

ChangeGSprite() -- Change the imagery of a GSprite.

    void ChangeGSprite( void *sg, struct ViewPort *vp,
	struct SimpleSprite *ss, struct SpriteData *newdata )

    sg = SpriteGroup handle obtained from AllocSpriteGroup().
    vp = ViewPort to position sprite relative to, or NULL if
	View-relative positioning is desired.
    ss = Simple-sprite structure (handle to sprite in question).
    newdata = Sprite-data as obtained from BitMapToSprite().

Changes the imagery of a GSprite.  For imagery, you supply a pointer
to a SpriteData structure you obtained by sending a BitMap to the
BitMapToSprite() function.  If this GSprite's SpriteGroup is currently
active, then the imagery will change immediately (i.e., on-screen).
Otherwise, the new imagery will appear the next time that SpriteGroup
becomes active.

---------------------------------------------------------------------------

MoveGSprite() -- Reposition a GSprite.

    void MoveGSprite( void *sg, struct ViewPort *vp,
	struct SimpleSprite *ss, WORD x, WORD y )

    sg = SpriteGroup handle obtained from AllocSpriteGroup().
    vp = ViewPort to position sprite relative to, or NULL if
	View-relative positioning is desired.
    ss = Simple-sprite structure (handle to sprite in question).
    x,y = New coordinates of sprite.

Re-position a GSprite.  If this GSprite's SpriteGroup is currently
active, then the position will change immediately (i.e., on-screen).
Otherwise, the new position will become apparent the next time that
SpriteGroup becomes active.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

INTUITION FEATURES:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

The SpriteGroup needs to be associated with windows for pointer
reasons.

We want some way of associating SpriteGroups with screens, so that the
sprites go away when the screen depth-arranged out of the way.

Here are some tags for OpenScreen():

(new) SA_Draggable:  If FALSE, this tag allows you to make a screen
which is non-draggable.  This tag should be used sparingly.  It is
primarily intended for games or other programs that may legitimately
"hog the display".  Defaults to TRUE.

(new) SA_Exclusive:  If TRUE, this tag ensures that this screen in
question is the sole screen on the display.  If this screen is pulled
down, other screens will not show behind.  If screens in front of this
one are pulled down, this screen will not show.  This tag should be
used sparingly.  It is primarily intended for games or other programs
that may legitimately "hog the display".  Defaults to FALSE.

(new) SA_ScreenActivation:  If TRUE, this tag asks Intuition to
activate a window on this screen whenever this screen comes to the
front, and deactivate any window on this screen when the screen no
longer is frontmost.  This tag should be used sparingly.  It is
primarily intended for use with SpriteGroups.

Combined together,

	{SA_Draggable, FALSE},
	{SA_Exclusive, TRUE},
	{SA_ScreenActivation, TRUE},


would produce a perfect "game-screen" with sprite-support under
Intuition.

---------------------------------------------------------------------------

There will also be a WA_SpriteGroup tag, used to associate a
SpriteGroup with a window.

---------------------------------------------------------------------------

There will be an IAllocSpriteGroup() call, which will call graphics'
AllocSpriteGroup(), and then possibly GetGSprite(0) and (1).  This
would give Intuition access to a sprite (or two) to use as the pointer
when this SpriteGroup is active.  There would be a way to ask for a
pointerless group, leaving all sprites to the application.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

QUESTIONS AND PROBLEMS:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

Should a SpriteGroup handle be black-box, i.e., "void *" ?  The
question is really which things if any might be useful as public info,
but don't merit a "Get" function.  For example, is it valid to know if
this SpriteGroup is currently active?

---------------------------------------------------------------------------

If there's no guarantee that SetSpriteGroup() will remove the
previously active SpriteGroup (which we discussed as the
multiple-monitor or the multiple-SpriteGroup-per-display issue) then
there needs to be a way to explicitly turn off an arbitrary
SpriteGroup, both for visuals (in case you want the group off), and
also before freeing a SpriteGroup.  Thus, it seems like a
ClearSpriteGroup() call is in order.  This call would have been
unnecessary in a "no more than one group active" model.

Q:  Is it required that one owns the SpriteGroup semaphore before
calling ClearSpriteGroup()?

---------------------------------------------------------------------------

There needs to be some arbitration to restrict who gets to change
SpriteGroups using SetSpriteGroup().  I had originally considered some
semaphore.  However, Chris needs to meditate on how the potential for
multiple active SpriteGroups might be arbitrated...

Maybe the answer is to have a global SpriteGroupSemaphore, and in the
future add "per-whatever" (sub)Semaphores.

---------------------------------------------------------------------------

Assuming we went with a semaphore, we could let people operate on a
semaphore stuck into GfxBase, eg.:

    ObtainSemaphore( GfxBase->SpriteGroupSemaphore )

or add a function that returns the semaphore

    ObtainSemaphore( SpriteGroupSemaphore() )

or we can add individual ObtainSpriteGroupSemaphore(),
ReleaseSpriteGroupSemaphore(), and AttemptSpriteGroupSemaphore()
functions.

I don't know what is stylistically the best.  Individual functions
provide the most flexibility (that is, in case more work needs to
happen at the time the semaphore is grabbed/released).  I guess for
safety we should thus opt for individual functions.

---------------------------------------------------------------------------

For old-sprites, the concept of "handle" was split.  GetSprite() and
FreeSprite() dealt in sprite-numbers (0..7), while ChangeSprite() and
MoveSprite() extracted the number from a supplied SimpleSprite's "num"
field.  We should decide what the correct handle for "modern" GSprites
is.  It could be any of:

- as before, i.e. sometimes a number and sometimes a user-allocated
  simple-sprite.  This requires that ChangeGSprite() and
  MoveGSprite() take a SpriteGroup-pointer.

- a graphics.library-allocated structure (call it XSimpleSprite, for
  reference), that might just begin with struct SimpleSprite.  This
  structure could hold the SpriteGroup pointer, simplifying calls to
  ChangeGSprite() and MoveGSprite().  AllocGSprite() would return this
  structure.

Note that programmers need the sprite-numbers along with
hardware-dependent rules in order to determine which colors are the
sprite-colors.  If we move away from the number or SimpleSprite->num
(or XSimpleSprite->num), there needs to be some color-inquiry
function.

---------------------------------------------------------------------------

GetGSprite(), FreeGSprite(), ChangeGSprite(), and MoveGSprite() could
have logic to handle a NULL SpriteGroup pointer (they would just call
the old GetSprite() etc., family of functions).  Is that worthwhile?
Facts for "yes":  it's easy, and provides a nice form.  Facts for
"no":  we should be discouraging old-style sprite access since its
global nature obstructs SpriteGroup behavior.

---------------------------------------------------------------------------

Should it be required to FreeGSprite() each GSprite obtained with
GetGSprite(), or can we let the programmer throw it all away with a
simple call to FreeSpriteGroup()?

FreeSpriteGroup() might also call ClearSpriteGroup() for you...

---------------------------------------------------------------------------

Should GetGSprite() be named AllocGSprite() instead?  (Alloc/Free is a
natural pair, while Get is usually associated with Get/Set) Maybe they
should be ObtainGSprite() and ReleaseGSprite()...?

---------------------------------------------------------------------------

Would it be meaningful for SetSpriteGroup() to return a pointer to the
previously active SpriteGroup?  This is complicated by the fact that
zero or one (or I guess any other number of) SpriteGroups may have
been inactivated by this particular call.  SetSpriteGroup() would then
have to return ~0 for failure.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

"OLD VS. NEW" ARBITRATION ISSUES:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

Arbitration issues between old sprite calls (GetSprite()/FreeSprite())
and new sprite calls (AllocSpriteGroup()/FreeSpriteGroup()):

2X and 4X SpriteGroups cannot co-exist with old-sprites.  1X
SpriteGroups with new sprite-resolutions co-exist with visual oddities
(wrong widths).  As well, since we have per-group sprite-engine
allocation, there can be sprite-engine conflicts between old-sprites
and SpriteGroups.  For simplicity, I'd recommend that _any_
SpriteGroup be considered to conflict with old-sprites, even though
specific combinations could work.

Since the new calls are all about sharing, and since by default no
SpriteGroups are in use, I recommend that the new calls take
precedence.  That is to say, GetSprite() should be made to fail if any
SpriteGroups exist.  (The alternative would be to disable the display
of all SpriteGroups so long as old-sprites are allocated).

Now, we have a choice of what to do if AllocSpriteContext() is called
while old-sprites are currently in use.  It would be possible to
allocate the group but to keep its display disabled until the last
old-sprite was freed.  However, I recommend the simpler action of
failing the AllocSpriteGroup() call outright.  This has the advantage
of assuring the program that uses SpriteGroups that its sprites will
be visible at the right time.

---------------------------------------------------------------------------
---------------------------------------------------------------------------

SPECIAL INTUITION ISSUES:

---------------------------------------------------------------------------
---------------------------------------------------------------------------

Intuition is smarter and craftier about sprite issues than any other
customer will be.  This is necessary for compatibility.  In
particular, when no application SpriteGroups are allocated, Intuition
will be changing sprite-width and sprite-resolution as it desires
(i.e., based on the pointer in the active window).  Further, if
old-sprites get allocated, Intuition will drop back to a 1X, regular
width arrow-pointer or wait-pointer.

Intuition will be the holder of the SpriteGroup semaphore.  There will
be a call in Intuition to relinquish this semaphore, for games that
want control of the system.

Intuition will change the active SpriteGroup based on the active
window.  Intuition will grow optional new behavior so that the
SpriteGroup can change with the displayed screen, which is a
requirement if we want to have "game screens".

Intuition will own old-sprite zero.  As always, it will attempt to own
old-sprite one when an attached pointer is desired.  The ownership of
these old-sprites must not interfere with the SpriteGroup mechanism
(normally, GetSprite() does interfere).

SpriteGroups for use under Intuition will typically yield ownership of
GSprites zero (and sometimes one) to Intuition, though we will
probably introduce pointerless windows, which leave the full
complement of GSprites at the command of the application.  This will
be done through the new IAllocSpriteGroup() call.  I imagine we'll
also have IFreeSpriteGroup(), by necessity or at least for symmetry.

When normal applications are running, there will be "no" SpriteGroup.
We must choose to implement this as an actual absence of a
SpriteGroup, or if we'd rather have some kind of "default"
SpriteGroup.

I envision that it will be publicly illegal to change the sprite-width
or sprite-resolution of a SpriteGroup, that is, these are properties
of the SpriteGroup itself.  However, Intuition will be privately
allowed to change these properties for the "default" SpriteGroup.
Again, this might just be done as an absence of SpriteGroup, and
direct calls to SpriteControl() (or wherever the sprite controls
reside).  (Of course, Intuition could keep nine SpriteGroups, one for
each of the combinations of sprite-width and sprite-resolution...)

Intuition will have to SetFunction GetSprite() and FreeSprite().  The
patches would let the original incarnations of these functions run
their course.  In the event GetSprite() succeeds, Intuition would drop
its "default" SpriteGroup to 1X-width, ECS-like sprite-resolution.
When the last FreeSprite() happens, Intuition's "default" SpriteGroup
will once again be free-running.

---------------------------------------------------------------------------
---------------------------------------------------------------------------
