In ROM, Intuition keeps a default 1X pointer (traditional) and
busy-pointer (new).  The defaults can be overridden with new defaults
for either pointer (settable through Preferences).  Any window can
supply its own pointer through SetPointer() or NewSetPointer().

Normally, nobody has any other sprites in use, so Intuition does as
it pleases with the sprite width and sprite pixel-speed in order
to produce the optimum pointer.

Now one trick is that even when you provide custom imagery to
NewSetPointer(), you tell Intuition whether it's supposed to be a
regular pointer or a busy pointer.  That way, if Intuition has to fall
back to 1X sprites, it can put up the default pointer or busy pointer,
as appropriate.  It might consider using the one from Preferences if
it was a 1X pointer, but in any case it always has the ROM defaults
available.

The above gives us maximum flexibility for the pointer-sprite, plus
full compatibility with existing applications that use GetSprite().

What we don't have breaks down into two categories:

1.  The ability to "hog" the display with an Intuition screen and
bring up sprites of any desired mode.

2.  The ability to have new-mode sprites that really co-exist across a
full-blown Intuition environment.

The first is important, the second less so.  The following proposal
will allow full satisfaction of 1, with a very broad definition of
"hog" (we end up equating "hog" to "hold input focus").  The proposal
doesn't allow new-mode sprites to co-exist across a full-blown
Intuition environment, but it does allow them to _exist_ in such an
environment.

Now, a Sprite Manager really belongs in graphics.library, but we're
not going to have that before 4.0.  However, we could put a miniature
Sprite Manager into Intuition, if we do it carefully.  By "carefully",
I mean we choose a design that does not restrict the goals of
graphics.library, and hopefully choose a design that means that when
we get to do 4.0, Intuition can drop most if its manager-code and call
graphics almost directly.  Graphics would have to buy into some
concepts that Intuition requires, but this would be necessary come 4.0
anyways.

The principal new concept is some kind of sprite context.  The idea is
that your sprites only appear when your context is active.  Under
Intuition, a context would be a window or set of windows.  Whenever a
window is active, the sprites of its context would be displayed.  When
a context is de-activated, its sprites go invisible.  It is the
responsibility of the context owner to NewSetPointer() a
pointer-sprite into his window that is of a compatible mode to the
context.

When you call AllocSpriteContext(), you would pass in the desired
sprite mode, and perhaps other information (eg.  perhaps whether you'd
like Intuition to relinquish its sprite during that context).
However, if any application holds sprite resources through
GetSprite(), then ASC() would behave in one of these ways (needs to be
decided):

1.  Fail outright.

2.  Succeed only if a 1X context was requested.

or

3.  Succeed with a warning code, but sprites of this context will not
    be displayed until the last sprite is returned with FreeSprite().

When an application calls GetSprite() and someone is holding a
SpriteContext, the following would happen (needs to be decided):

1.  GetSprite() fails outright.

or

2.  GetSprite() fails if there is any context that is not 1X, or the
    requested sprite number is in use in any context.


Now given that Intuition now has a sprite context, what other features
will developers demand?

1.  Sprite allocation on a per-context basis.  This makes a lot of
    sense, and is not hard.  Each context could have a full complement
    of sprites (6 or 7 with a pointer, or 8 without).

2.  Sprites that move when a screen is dragged.  This sounds nice,
    and does not appear to be hard, but the implication for Graphics 4.0
    needs to be studied.

3.  Sprite clipping to screen limits.  This is unlikely because it's
    hard.  However, we already have "all-or-nothing" clipping against
    ViewPorts, so we're not totally empty here.

4.  Per-context sprite colors.

It also sounds like we'll need some sprite functions that operate
in context, eg. ContextMoveSprite(), ContextChangeSprite().


The result would be pretty good.  The only restriction would be you
cannot go directly to graphics.library to get new-mode sprites while
Intuition is up.  There may need to be a Surrender() function for
Intuition.

We need some consideration of what this means for 4.0, and whether
we're on the right track!

The "rule" that we tried to follow is:
When a method exists, go through Intuition to access graphics.library
features.  We strive to offer compatibility with software written
before Intuition grew a wrapper.

    Peter

(With help from Spence, Mike, Martin, and Bart)



The SpriteGroup needs to be associated with windows for pointer
reasons.

We want some way of associating SpriteGroups with screens, so that
the sprites go away when the screen depth-arranged out of the way.

Here are some tags for OpenScreen():

(new) SA_Draggable:  If FALSE, this tag allows you to make a screen
which is non-draggable.  This tag should be used sparingly.  It is
primarily intended for games or other programs that may legitimately
"hog the display".  Defaults to TRUE.

(new) SA_Exclusive:  If TRUE, this tag ensures that this screen in
question is the sole screen on the display.  If this screen is pulled
down, other screens will not show behind.  If screens in front of this
one are pulled down, this screen will not show.  This tag should be
used sparingly.  It is primarily intended for games or other programs
that may legitimately "hog the display".  Defaults to FALSE.

(new) SA_ScreenActivation:  If TRUE, this tag asks Intuition to
activate a window on this screen whenever this screen comes to the
front, and deactivate any window on this screen when the screen no
longer is frontmost.  This tag should be used sparingly.  It is
primarily intended for use with SpriteGroups.

Combined together,

	{SA_Draggable, FALSE},
	{SA_Exclusive, TRUE},
	{SA_ScreenActivation, TRUE},


would produce a perfect "game-screen" with sprite-support under
Intuition.

Here are rambling thoughts one what's needed.

New graphics functions:

To allocate, free, or change the active SpriteGroup:
- AllocSpriteGroup( ... )
- FreeSpriteGroup( ... )
- SetSpriteGroup( ... )

Plus a semaphore...

To manipulate sprites within a SpriteGroup:
- GetGroupSprite( group, simplesprite???, num )
- FreeGroupSprite( group, num )
- ChangeGroupSprite( group, vp, s, newdata )
- MoveGroupSprite( group, vp, sprite, x, y )

Graphics takes care of making GetSprite() fail when SpriteGroups
(other than the default one) have been allocated, and making
AllocSpriteGroup() fail when sprites have been obtained through
GetSprite().  (???:  How do we manage Intuition's obtaining of sprite
0 and 1?)

There needs to be a semaphore for SpriteGroup control.  Intuition
would have to hold this semaphore and release it only upon special
request (eg. a StealIntuition() type function).  

SetSpriteGroup() must:
- Remove all sprites of the previously set Group
- Establish new sprite-FMode and sprite-resolution
- ChangeSprite() and MoveSprite() each sprite of the new SpriteGroup

In order for Intuition to manage sprite zero in each suitable SpriteGroup:

Mike Sinz suggests IAllocSpriteGroup() which would call
AllocSpriteGroup() and then GetGroupSprite(0 and 1).
Alternately, you could make the appropriate sequence:

	gfx/AllocSpriteGroup()
	intui/AttachPointer(Group)

What has to happen:

When Intuition wants to change the SpriteGroup, it must:

	/* Update pointer in new Group if necessary */
	if ( newGroup's pointer is default )
	{
	    ChangeGroupSprite( newGroup, sprite-0, newdefault );
	}
	/* Put pointer in newGroup at up-to-date place */
	MoveGroupSprite( newGroup, vp, sprite-0, x, y );
	/* Switch to new Group */
	SetSpriteGroup( newGroup );

When no explicit SpriteGroup is active, what really happens?  Well,
Intuition keeps a default SpriteGroup, in which it may set FMode and
SpriteRes.  (I had originally planned that SpriteGroups would have to
be fixed with respect to these parameters...).  Intuition still has to
SetFunction() GetSprite() and FreeSprite() to know when to fall back
to 1X.  Also, GetSprite() needs to recognize that the default
SpriteGroup is owned by a "smart" owner (Intuition), thus GetSprite()
need not fail on account of the default SpriteGroup.


My general impression is that it now sucks.  It was a lot simpler
under Intuition, because Intuition has fuller knowledge and control,
for example the mess about the default SpriteGroup not blocking
GetSprite() but other Groups doing so.

Which is not to say that this stuff should be moved back into
Intuition, because that would only defer the above problems until 4.0.

The three alternatives I see are:

1: Fix up the above until it's acceptable
2: Decide that it's fair for Intuition to own and manage sprites, and
   put the SpriteGroup stuff in Intuition, with smarts to back off if
   someone has called GetSprite() (i.e. the initial proposal, without
   the problems discovered above).  Kiss off substantial pieces of
   sprite management even in 4.0 (or get very creative then).
3: Decide that the KISS principle needs to apply.  The consequence of
   which is that we don't allow new-mode sprites under Intuition.
   If you want to use new-mode sprites, you ask Intuition to
   relinquish control, and you be sure to hog the machine.


Peter


Chris states that AllocSpriteGroup() needs to refer to the device
that the sprites will appear on (4.0).  That's usually through a
BitMap.  Same for BitMapToSprite().

