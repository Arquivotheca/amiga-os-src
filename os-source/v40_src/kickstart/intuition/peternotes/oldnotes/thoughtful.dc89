Thoughtful Interface Design

Thoughtful interface design is essential to the success of your
application.  A powerful program whose user interface behaves in awkward
and unpredictable ways soon loses its appeal, and a user will often turn to
a less powerful but easier to use program.  The user interface should be a
gateway to your application, not a barrier.

In this document we present several relatively simple points to be aware
of.  Many of these are simple to do, and can greatly enhance the look and
feel of your program.  They are pointed out because too often they are
ignored.


MENU SHORTCUTS.  Programs should provide a full set of menu shortcuts.
Menus are, after all, one of the simplest forms of on-line help.  For
rarely used functions, whose key equivalents would not likely be learned,
the menu is a useful and reasonable approach.  For frequently used
operations, especially in a program which is largely keyboard based, moving
to the menu is not all that efficient.  Providing keyboard equivalents
makes the user's life much easier, and it certainly couldn't be easier to
program, as Intuition takes care of all the handling.


WINDOW REFRESH.  If your application believes it must refresh its window
due to a size change, it should first check to see if the size was
unchanged.  The user might have played with the sizing gadget but changed
his mind and brought it back before releasing the mouse button.  Consider
also ignoring very small changes of a few pixels if your refresh is lengthy
or visually active.


REAL-TIME PROPORTIONAL GADGETS.  If your application uses proportional
gadgets to display a list or anything else that can be redrawn quickly, use
the gadget Activation flag FOLLOWMOUSE to provide real-time scrolling.  A
good technique is to set the GADGIMMEDIATE, RELVERIFY, and FOLLOWMOUSE
Activation flags of your proportional gadgets.  When you get the GADGETDOWN
message for that gadget, you know that all the incoming MOUSEMOVE messages
pertain to your proportional gadget until you receive the GADGETUP message.

For each MOUSEMOVE message, you may then check the VertPot or HorizPot
value of your proportional gadget, and see how far the user moved it.  You
should only refresh your imagery if the gadget has moved sufficiently far
to require a change.  Don't keep redrawing the same imagery for each
MOUSEMOVE;  your interface will seem "sticky".


BODY VALUES FOR PROPORTIONAL GADGETS.  An application that uses
proportional gadgets to present a list (like a file requester, etc.) should
base its HorizBody or VertBody value on the number of displayed elements
less one.  This way, if the user scrolls through the list by clicking in
the scroll gadget's container, then one line from the previous view of the
list will still be visible in the new view.  This "proves" to the paranoid
user that the program hasn't misbehaved and scrolled n+1 lines by accident.
In other words, if you can display ten lines at a time, you want to scroll
nine lines per "page".


TOOL TYPES.  Tool types are an analogous mechanism to command line
parameters.  It is very important and not too difficult for your
application to support all its command parameters as tool types.


EXTENDED MENU SELECTION.  Intuition allows the user to make extended menu
selections through two mechanisms.  The user may, while holding down the
menu (right) button, click on the menu selections desired with the
selection (left) button.  Equally well, the user can drag-select in the
menus by holding the menu button, pressing and holding the selection button
and dragging it across several menu items.  Unfortunately, most
applications do not support extended menu selection.  The Intuition
Reference Manual gives example code for processing multiple menu selection;
it really only means adding a single while loop to your code.


INSTALLING APPLICATIONS.  Installing applications on hard disks or
elsewhere must be one of the hardest things the average user has to do.
There are several strategies you can take to make your application easier
to install.

MOST IMPORTANT STRATEGY:  As much as possible, programs should run
correctly even if the system isn't booted off the program disk, without
requiring any extra work on the part of the user.  This means avoid any
fancy footwork in the startup-sequence.  As well, don't look for parts of
your program relative to SYS:, as in "SYS:foo".  Never assume that anything
will be on the root, either, so don't look for something as ":foo".  And
don't assume that the disk is in df0:, or df1:, so don't try to find a file
with "df0:foo".

As much as possible, all references to parts of your application should be
made RELATIVE to the location of the application ("foo" for the same
directory, "foo/bar" for a subdirectory, or "/foo" for a parent).

It is less desirable but acceptable to make all references to parts of your
application relative to the volume name, as in "foo:bar".  "foo:" might
then be the name of your distribution disk, and a hard disk owner can
assign foo: to the correct place.  Assigned labels are less desirable
because the novice user will still have difficulty setting up his assigns,
and moving applications requires changing the assigns.  As well, many hard
disk owners have literally dozens of assigned labels to make all their
programs work.

If your application needs great flexibility, include a configuration file,
which can be placed in the same directory as the application, and which
contains the paths that the user chose for each part or group of parts.  A
simple configuration program which is a screen full of string gadgets would
make editing this configuration file easy.

If it is not possible to successfully install a program by dragging its
icons to the desired place, do include an installation script that runs
from the CLI and from the Workbench.  Do not assume that all hard disk
users want to install the application in DH0:.  Give them the choice of the
destination.


BE CONSIDERATE TO THE MULTITASKING ENVIRONMENT.
Do not open large or full-sized windows on the Workbench screen that cannot
be shrunk or removed easily.
Programs where mouse clicks can have great significance and which have no
"safe" place to click (such as a paint program with the toolbox removed)
should throw away the first click they receive when they are re-activated.


PREVENT MISTAKES FROM OCCURING.  The easiest way to prevent the user from
making mistakes or being frustrated by an application that does not seem to
be reacting is to remove invalid choices.  Intuition provides On/OffGadget()
and On/OffMenu() functions to make it easy for you to ghost out invalid
choices.  Use these, rather than let the user select them and have nothing
happen.  Ghosting out an option is an efficient way to note its
meaninglessness.  Extend this concept to visual objects you maintain, such
as a cursor.  Ghost out the cursor in text editor if that window is not
active.


HELP THE USER MOVE THROUGH REQUESTERS.  Generally, if your requesters have
string gadgets, the first one should be activated when the requester is
brought up.  If a requester has several string gadgets, then pressing
<ENTER> in one should activate the next one in sequence.  Consider closing
down the requester when <ENTER> is pressed in the last string gadget.
Programming hint:  When you open your window, wait for the ACTIVEWINDOW
IDCMP message before you call ActivateGadget().  If you don't, your gadget
may not get activated.


MAKE YOUR APPLICATION LOOK GOOD.  Good layout and imagery can greatly enhance
the appearance of your product.  Remember a few good rules.  First, single
pixel wide lines don't always look that clear on most monitors.  This is
why the Topaz font (and most of the others) have fairly thick vertical
strokes.  Don't use imagery that will cause excessive flicker in interlace
mode - the old (1.1 and earlier) window title bars were a good example of a
poor choice (alternating single rows of white and blue).

Realize that raster art is a medium just like oil painting and watercolor
are, and require a specific expertise.  Icon art (trying to make a clear
symbol in a small space given a small set of colors) is a special
discipline within raster art.  With practice an artist can acquire many of
the techniques to succeed in this medium.  It should be relatively easy to
find a fine arts or commercial art student at a university or college who
has experience in raster art whom you could hire to do your visual imagery.


/*/ FindPropValues()
 *
 * Function to calculate the Body and Pot values of a proportional gadget
 * given the three values total, visible, and first, representing the
 * total number of items in a list, the number of items visible at one
 * time, and the first item to be displayed.  For example, a file requester
 * may be able to display 10 entries at a time.  The directory has 20
 * entries in it, and the first one visible is number 3 (the fourth one,
 * counting from zero), then total = 20, visible = 10, and first = 3.
 *
 */

VOID FindPropValues(total,visible,first,body,pot)

    USHORT total, visible, first;
    USHORT *body, *pot;
    {
    /*  If we're too far down, reduce first: */

    if (first > (total - visible))
       first = MAX(total - visible,0);

    /*  body is the relative size of the proportional gadget's body.
        Its size in the container represents the fraction of the total
        that is in view.  If there are zero or one lines total, body
        should be full-size (0xFFFF).  Otherwise, body should be the
        fraction of (the number of displayed lines - 1) over
        (the total number of lines - 1).  The "-1" is so that when the
        user scrolls by clicking in the container of the scroll gadget,
        then there is a one line overlap between the two views. */

    if (total <= 1)
        (*body) = 0xFFFF;
    else
        (*body) = (USHORT) (((MIN(visible-1, total-1) << 16L) - 1) /
            (total-1));

    /*  pot is the position of the proportional gadget body, with zero
        meaning that the scroll gadget is all the way up (or left),
        and full (0xFFFF) meaning that the scroll gadget is all the way
        down (or right).  If we can see all the lines, pot should be zero.
        Otherwise, pot is the number of lines first at the beginning
        divided by the number of unseen lines (total - visible). */

    if (visible >= total)
        (*pot) = 0;
    else
        (*pot) = (USHORT) MIN(0xFFFF, (first << 16L) / (total - visible));
    }


/*/ FindPropFirst()
 *
 * Function to calculate the first line that is visible in a proportional
 * gadget, given the total number of items in the list and the number
 * visible, as well as the HorizPot or VertPot value.
 *
 */

USHORT FindPropFirst(total,visible,pot)

    USHORT total;
    USHORT visible;
    USHORT pot;

    {
    USHORT first;

    first = ((total - MIN(total, visible)) * ((LONG) pot) +
        (1L << 15)) >> 16;

    /*  Once you get back the new value of first, only redraw your list
        if first changed from its previous value.  The proportional gadget
        may not have moved far enough to change the value of first. */

    return(first);
    }
