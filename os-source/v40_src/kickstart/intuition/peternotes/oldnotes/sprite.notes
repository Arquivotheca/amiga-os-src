Overview:

We can set sprite pixel speed to 140ns, 70ns, or 35ns.

We can set the sprite width to 16, 32, or 64 pixels (1x, 2x, or 4x
widths).  Old sprites for 16-pixel mode are not compatible with 32 or
64-pixel modes, and vice versa.  Not all machines necessarily support
4x width.

The sprite width and sprite resolution settings are global.

Chris wants:

Pointer mode to begin as 1x width.  As soon as a wider pointer is
req'd, we jump to 4x width (or 2x if 4x isn't possible), and stay
there.  All pointer requests are converted (i.e.  scaled).

Benefits:  increased predictability of the sprite modes.  "Typically",
but not always, the sprite mode will be 2x or 4x width, in "random"
sprite-speed.

Costs:  SetPointer() can now fail, but it couldn't before!  We lose
pointer animation.  Existing applications that use sprites will likely
break unless you go through a special reboot.

Unknowns:  is this "predictability" of sprite modes good enough for
applications to use sprites?


Peter wants:

Pointer mode set to 1x or 4x (or 2x if 4x isn't possible) depending on
the active pointer.

Benefits:  Maximum compatibility with old applications.  Best pointer
behavior (animation of old pointers still works).

Costs:  Sprite mode is unpredictable.

Mitigating factors:  we could add some kind of system call that would
instruct Intuition to relinquish its sprite and stop playing with the
sprite modes.  V39 applications could use this to regain predictable
sprites.



Peter & Martin's proposal (sic):

In the absence of other sprite customers, Intuition is to be most
flexible.  It will set the sprite width and pixel-speed as it chooses.
(Pretty much as Peter envisioned).  However, the first sprite-customer
other than Intuition who comes along can request sprites of a
particular width, and Intuition will coerce its sprites to match.  Any
subsequent sprite-customer

Graphics grows a new call:

	actual_width = NewGetSprite( num, desired_width )

where you provide the sprite-width you seek, and graphics returns the
best it can do.  The returned width can differ if you ask for 4x
sprites on a 2x-only machine, or if some other application besides
Intuition already has a sprite in use.

The old GetSprite() would fail if the current sprite-mode is not 1x.

Now, there would be another bit of sprite_width information, which
means that even though a particular sprite-mode is in effect (for
Intuition), Intuition is able to change on the fly.  That way,

When someone calls GetSprite() or NewGetSprite() then because
Intuition has SetFunctioned these graphics calls, Intuition coerces
all pointer imagery under its control to the possible width.


Simplification of Above:

We add the assumption that we're going to discourage other sprites
co-existing with Intuition.  This means:

Intuition has a default 1x pointer and busy-pointer, but uses whatever
pointers are supplied to it via Preferences or NewSetPointer().  If
anybody calls GetSprite(), Intuition falls back to a 1x pointer.  If
anybody has passed other than 1x-data to NewSetPointer(), then
Intuition will use the ROM-default pointer or busy pointer as
appropriate, which are 1x guys.  (Could opt to use the ones from Prefs
instead, if they're also 1x).

Then, there is some kind of StealISprite() call that causes Intuition
to release its pointer, and also stop dicking with the modes.

Therefore, there is no need for NewGetSprite().


Complication of above:

Instead of StealISprite(), we put a little sprite manager into
Intuition.  Now, the Sprite Manager really belongs in
graphics.library, but we ain't going to get that for 3.0.  So we add a
little level in Intuition, taking great care to not bind the choices
of graphics.library.  I.e. graphics could still add its SM, and
Intuition's code would be simplified greatly, and largely devolve into
nearly direct calls to graphics (we hope).

Intuition would support some kind of sprite context, which would
roughly be a window or set of windows.  Whenever a "context" was
active, the context owner's sprites will be displayed.  The context
owner is responsible for putting up a pointer-sprite that is in a
compatible mode.  Whenever a context is deactivated, those sprites
would be disabled.

Additional features we could grow:
Per-context sprite allocation.  There's no reason you shouldn't
be able to share a sprite engine across different contexts.

Sprites that move when the screen is dragged

Sprite clipping - unlikely to happen better than the crude
all-or-nothing ViewPort clipping we have now.

Per-context sprite colors?

What does AllocSpriteContext() do when other sprites have been gotten
with GetSprite?

Work if ASC() was asked for a 1x context...
else
A.  Fail immediately
B.  Succeed (with warning RC) and context-sprites remain invisible so
long as other sprites are still alloc'd directly.

What does GetSprite() do when someone has AllocSpriteContext()?
* Fail immediately (if any context has that sprite number used)
A Fail if any contexts are other than 1X (or maybe any contexts at all?)
or
B Shut off those contexts that are other than 1X

Now we need per-context MoveSprite(), ChangeSprite(), SpriteOn(),
SpriteOff().
