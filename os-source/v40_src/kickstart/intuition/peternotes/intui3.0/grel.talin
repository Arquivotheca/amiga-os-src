
 
Memo #51522 
From: talin 
Date: Fri,  3 Apr 92 15:16:39 EST 
To: pcherna 
Message-Id: <memo.51522> 
In-Reply-To: <memo.51434> 
Subject:  
 
   OK, lots of stuff: 
   First of all, I always assumed that the image class would _not_ throw 
away it's dimensions, but would instead add them to the box supplied by 
the gadget. Now, I realize that the existing frame classes don't do this 
but I think it would be easier to define a new subclass of frame class 
that does this then to define a bunch of new methods for every image class. 
(In my SliderClass, I do it different, and actually have a seperate bounding 
box for the frame, which is settable via tag, but that's probably the wrong 
solution). 
   BTW, One thing I always wanted was the ability to pass either an image 
or text string to the frame class and have it automatically center it in 
the box, rather than sticking "text-drawing" smarts into the gadget handling 
code, but that WOULD require a new message type. 
  
   Group Gadgets: Personally, I don't care for, and don't use, the "group 
gadget" idea. I think that the overhead is too much to be bopping up and 
down all those layers. For example, most of my layouts require at least 
5 levels of hierarchy. 
   Instead, what I do is maintain the layout information as a parallel 
data structure, which points to a "flattened" gadget list. Thus we can 
still maintain the fast performance of a non-hierarchical gadget list. 
We a re-size occurs, I have to destroy and re-create the gadgets, but that's 
life. Also, I generally limit the gadget relativity to simple "GREL" 
as well, I really have no need for complex resizing "panes". In the case 
where we have a three-d program with sliders for each of the four "views", 
it would be OK to hand-resize the sliders on a window resize. 
   Bounding box: Please use an IBox rather than seperate fields. In fact, 
I would prefer IBoxes used everywhere instead of seperate left, top, etc... 
fields. I have a BUNCH of routines which operate on Iboxes (which, BTW, 
are all in hand-coded, optimized assembly and would make a nice library): 
 
    /* safe rectfill with relative width and height (and mac-style pixel math) * 
/ 
void PaintIBox(struct RastPort *rp, struct IBox *b); 
  
 
    /*  Fill in an IBox with the specified coordinates -- note that this 
    	routine is actually FASTER without regargs :) 
    */ 
struct IBox *SetRect(struct IBox *b, WORD top, WORD left, WORD width, WORD heigh 
t); 
 
    /* determine if a point is inside of an IBox */ 
BOOL PtInRect(struct IBox *b,SHORT x, SHORT y); 
 
    /* expand or shrink an IBox on all sides, and return IBox address */ 
struct IBox *ExpandIBox(struct IBox *b, int dx, int dy); 
 
	/* expand or shrink an IBox on all sides, and return IBox address */ 
struct IBox *ExpandIBox(struct IBox *b, int dx, int dy); 
 
	/* 	Constrain the size and position of a rectangle to fit inside another one */ 
struct IBox *RectFit(struct IBox *outer, struct IBox *inner,struct IBox *result) 
; 
 
  
	/* 	Adjust rectangle to have positive width and height, and return address */ 
struct IBox *NormalizeRect(struct IBox *b); 
 
	/* 	Surround two rectangles with a larger rectangle, and return result */ 
struct IBox *UnionRect(struct IBox *a, struct IBox *b, struct IBox *c); 
 
	/* 	Calculate the intersection of two rectangles (return TRUE if any) */ 
BOOL SectRect(struct IBox *a, struct IBox *b, struct IBox *c); 
 
	/* 	Constrain the size and position of a rectangle to fit inside another one */ 
BOOL RectOverlap(struct IBox *a, struct IBox *b); 
 
	/* compute window-relative box for gadgets */ 
void SetupGadgetBox(struct Gadget *gadget,struct IBox *domain, struct IBox *box) 
; 
 
	/* compute gadget-relative box for image classes */ 
void SetupImageIBox(struct IBox *box, struct Image *img, struct impDraw *msg); 
 
    /* draw bevel box, quickly */ 
  
void ThinBevel(struct RastPort *rp, struct IBox *, LONG, LONG); 
 
    /* draw bevel box with thicker sides */ 
void QuickBevel(struct RastPort *rp, struct IBox *, LONG, LONG); 
 
    /* get the visible area of a virtual (or normal) screen */ 
void GetDClip(struct Screen *s, struct IBox *result); 
 
	Gadget Help: I think it would probably be OK if ALL gadgets broadcast help. 
After all, there needs to be a way for me to identify the gadget anyway (when 
it gets hit), so identifying it for help reasons is the same deal. 
	The way I do gadgets is that all of the UserData fields point to a table entry 
in a dispatch table (which also holds the ARexx command names). It would 
be easy to add a localized help string (or NULL if that gadget didn't have 
help) to the table entry. In the GadgetID field, I get even stranger: The top 
8 bits are used to store the "kind" of that gadget, either the gadget kind, 
or one of my special kinds: (DEFAULT_KIND, PANSLIDER_KIND, IMAGE_PALETTE_KIND, 
INCREMENT_KIND, IMAGE_BUTTON_KIND, READONLY_IMAGE_KIND, FUELGAUGE_KIND), 
and the lower 8 bits are used to store the keyboard equivalent for the gadget 
(since more than one gadget can point to the same dispatch table entry on 
  
different windows). 
 
	Select Box / Bounding Box: Some folks would argue that a hit on the text 
string (such as a check box or radio button) should be considered a hit on the 
gadget (This is the way it works on the Mac and people like it a lot, because 
it gives a much bigger hit area, less work positioning the mouse, etc.) 
	Perhaps the bounding box could be defined as relative to the select box 
(i.e. allow negative numbers in left/top). Then the mouse coordinates would 
be relative to both boxes (well, it would be relative to the select box, and 
inthe same coordinate system as the bounds box). I realize that makes the 
hit test more complex, but now the default bound box is { 0,0,0,0 } :-) 
 
	Erasing: I think a lot of the problem lies in the clumsiness of the 
interaction between clipregions and damage regions. It would be nice if these 
two could be made completely independent, and that a simple rectangular clip 
region could be made quickly, on the fly, as needed, in any rendering state. 
	However, this is mostly an area that hadn't been bothering me, so I 
don't have many opinions on the subject. 
 
	My main push for gadgets is to maximize the re-usability of components. 
  
I tend to build very large applications with hundreds and hundreds of buttons, 
and the overhead of having a seperate image structure and IntuiText for each 
gadget rapidly builds up. Often, I have a mandate from a publisher stating that 
the program has to fit in a particular memory size as well. 
read/action:


 
Memo #51688 
From: talin 
Date: Fri,  3 Apr 92 18:44:35 EST 
To: pcherna 
Message-Id: <memo.51688> 
In-Reply-To: <memo.51623> 
Subject:    
 
   Using IBoxes: Actually, I guess what I was suggesting was instead of 
extending the existing gadget structure, define a whole new one with the 
fields in the same positions but done 'right' :-) 
 
>How about a standard settable image attribute... 
   Also, the LAYOUTF flags in the gadget structure might be worth thinking 
about in this context, I dunno. Right now they are a special case for 
EasyRequest, but that need not always be so. (At least that's my understanding)( 
) 
 
>Sometimes there are a few more gadgets around than meet the eye? 
    Why can't those be handled exactly the same way as a normal hit on 
the gadget? It's gadtools' responsibility to merge hits from several objects 
  
into a single one, why shouldn't help function the same way? Also, I suspect 
that there actually _won't_ be multiple objects for a single "control" 
in the future, but rather using a group class... (One of the cases where 
I will go ahead and use a group class is if the buttons are supposed to look 
like a single "thing". 
 
>Simple GREL can't handle three buttons in a row. 
   Really, the only place where I personally want to use resizeability 
is in gadgets that are naturally variable sized, sich as sliders, 
listviews, and drawing regions. None of my layouts have buttons that 
change size or spacing based on window size, and the idea kind of 
disturbs me, from a visual / aesthetic point of view. And I wouldn't 
put three string gadgets in a row, or three sliders, etc. 
   Let me put it another way: Generally the only time I allow a window to 
have a sizing gadget is if there is some large, naturally resizeable 
gadget that dominates the window, such as a scrolling list or drawing 
region / document area. All the other gadgets tend to be lined up near 
the border, justfied away from the sizing gadget, or even in the border 
in many cases. 
   OTOH, I guess ASL re-aligns the buttons at the bottom based on the 
  
window size, and I haven't really noticed it. (Actually, it seems to me 
that what is needed is the ability to specify that the leftedge and width 
UWORDS are not in pixels, but are in fact fractions of the window interior 
area...but that's another story). 
 
   One problem I'm having is that a lot of this stuff is in a completely 
different direction than what I've been thinking about lately in terms of 
gadgets, and it will take a while to sink in. Not too long, I hope... 
 
   Thinking about frame methods again: 
   Actually, I think a subclass would be better, and here's why: Take string 
gadgets. Suppose we make a generic "string gadget image class" called 
"ridgeiclass" or something. You send it a box, and it always knows to 
draw a "ridge" just outside of that box. I can't think of a single case 
where you would want to draw a ridge _inside_ of a box. That would be work 
for a different subclass, say "chiseliclass". Now, it's true that both 
ridgeclass and chiselclass could be made up of two frameiclasses, and 
in that case it would require the application to set the image class 
attribute bit; In addition, the application would also have to hand-tweak 
the two classes dimensions to account for the thickness of the lines. 
  
Say we are running on an super-res monitor, and we decide we want each 
line of the bevel to be 3 and 2 instead of 2 and 1. With a frameiclass, 
the application then has to adjust the left, top, width and height of 
the innermost framiclass by 1 outwards, and for the outermost bevel it 
has to do it by two. With ridgeclass, he just plugs in the numbers 3 and 
2 and the class does all the work for him, since it knows about "in/out" 
relationships. Of course, there's no reason why this can't be done by 
a bit saying "the dimension box I gave you refers to your inside dimension" 
for ridgeclass; but it can't be done by frameiclass without more work on 
the app's part. 
 
   Maybe my problem is that I've gotten so used to the constraints of the 
system in terms of my design style, that now that you're offering to lift 
those constraints I don't know what to to use that... :-) 
read/action:

Memo #55046 
From: talin 
Date: Tue,  7 Apr 92 01:35:44 EDT 
To: pcherna 
Message-Id: <memo.55046> 
Subject: More thoughts on gadgets... 
 
   I really like the "Libs:classes/" idea. Given that, there should be 
no reason to add any new classes to ROM; The only thing that is needed 
is for the classes that are now in ROM to work as correctly and flexibly 
as they can. I kind of which that some of those classes, such as 
frameiclass, had not been in ROM for 2.0, except that I realize that 
the system itself uses them. The reason is because they are easily done as 
a libs: or linked library, and easier to update. 
 
   Another thing: I would like to see more of the classes support 
GFLG_LABELITEXT, GFLG_LABELSTRING and GFLG_LABELIMAGE. This gives an 
even greater memory savings, since I can just attach a raw string to 
a gadget and cut the cost of an IntuiText structure. 
 
   Something I use a lot around here is 'Glyphs'. Glyphs are like a 
stripped down Image (they only have width, height, and data), and 
are drawn with BltTemplate, using APen, BPen and Drawing mode (and pattern 
if applicable). Like text, they can change color based on state 
(which is difficult with an image). I have a "bevel-box" style class 
that also accepts a glyph and centers it. 
   Actually, when I _really_ want to go crazy and save memory, I go 
a step beyond IM_DRAWFRAME, and have IM_DRAWOBJECT, which is my own 
message defined as meaning "call the drawing routine with this object." 
   Here's why: The canonical form of a BOOPSI gadget / image relationship 
is that for each screen control, you have 1 gadget, 1 intuitext structure, 
1 text string (localized), 1 bevel box object structure, 1 image structure, 
1 image data per object. (Assume that the bevel box image struct is lin 



Memo #55560 
From: talin 
Date: Tue,  7 Apr 92 15:06:37 EDT 
To: pcherna 
Message-Id: <memo.55560> 
In-Reply-To: <memo.55294> 
Subject:   More thoughts on gadgets... 
 
Jeez, bix really thrashed my message. Let's see if I can pick up where 
I left off. 
   Let's assume that we have a button with three image components: a 
bevel box surrounding the button, a text label to the left and a glyph 
in the center. To do this in the "traditional" boopsi way requires 
4 structures plus two other data objects (the string and the image data) 
_per button_. 
   With a bit of cleverness, however, some of those objects can be shared. 
For example, the the Image Class objects could all be globally shared 
by all buttons of the same "style" _if_ there was a way to pass the 
specific data to be drawn (text string, image data, etc.). The problem 
comes when you try to link the images together into a list -- which data 
item goes to which class? 
   One solution would be to use a "printf-like" philosophy. The gadget 
handler would create an arglist of pointers. For a normal (non-extended) 
gadget, arglist[0] would be filled in with SelectRender, and arglist[1] 
would be filled in with GadgetText. GadgetRender would be used to hol 
hold the head of the image class list. 
   When rendering time comes, the arglist is built, and the address of 
this list is stuffed into an IM_DRAWxxx (whatever) message. Each image 
class that gets the IM_DRAWxxx message "eats" however parameters it 
needs, just as the "%ld" in a printf "eats" one longword. 
   So, assume that we have an image list of three objects: A frameiclass 
image, followed by a image which puts the text on the left side 
(lefttext), followed by a class to center an image in the box  
("centerimage"). The last two each "eat" one parameter. Now, the gadget 
sets up a message, let's call it IM_DRAWARGS. It sets up the frame 
variables, and then sets up an array of { GadgetText, SelectRender }. 
The application has apready placed the text string address into gadget 
text and the image data pointer (along with width / height info, that's 
why I hav the Glyph structure to encapsulate all of that) into Select 
Render. So as a result, "lefttext" looks at arglist[0], which is the 
pointer to the string, and "centerimage" sees the next arg which is 
the pointer to the image. 
    As a result, we now only have 1 gadget structure, 1 text string, and 
1 image data per gadget, plus we have 3 image objects per _style_ of 
gadget. Assuming that there are many less styles then there are gadgets, 
we have just saved a significant amount of memory. 

M:Memo #56247 
From: talin 
Date: Wed,  8 Apr 92 03:29:50 EDT 
To: pcherna 
Message-Id: <memo.56247> 
Subject: Strange Suggestion... 
 
   It occurs to me that this whole Gadget issue is something that is 
very fertile and volitile at this point in time. Which suggests to 
me that perhaps the greater part f development effort shouldn't go in 
ROM at all, but rather into libs:classes. 
   That is to say: Encourage applications to ONLY use soft-loaded 
gadget classes. (A set of libraries that emulate all of the ROM classes 
would be needed, of course). Then you can make any change you want, 
any time you want, without waiting for a ROM release. The existing 
classes are still in ROM for compatability, but would only be worked on 
in a) cases where a global change was needed, b) When a soft-loaded 
class had stabilized enough, or c) when something was needed by other 
parts of the ROM, or d) when a ROM class would be "broken" by a change 
to another part of the ROM. 
   Anyway, it's just an idea. 
