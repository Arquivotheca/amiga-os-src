                        Intuition V39 Documentation


CONFIDENTIAL AND PROPRIETARY, AND SUBJECT TO CHANGE, SO THERE.

Introduction:

The V39 Intuition update consists primarily of features to support the
new chip set and V39 graphics.library features.  In addition, a small
number of pure Intuition features have been added.  By and large, we
have concentrated on features that do not introduce compatibility
burdens on the developer disproportionate to the benefit returned.
For example, the requests for several of the V39 features are cleanly
ignored by Release 2.0 (V36 or V37 ROM).

(NB:  At the end of this document, there is a short section describing
some of the more important changes made to Intuition for V37.  These
changes were not described at previous DevCons).

NewLook Menus and Screen Bar:

The menus and screen bar were one key visual element not re-visited
during NewLook development for V36/V37.  In particular, the new color
scheme now means relatively ugly grey on black menus.  This has now
been addressed by adding additional color control.  At the same time,
the Amiga-key and checkmark symbols are now scalable.

To receive the full-blown NewLook menus, the screen opener must be
aware of new pens in the SA_Pens array, and the window opener must be
aware of NewLook menus.  Unaware windows behave entirely as before.
Aware windows on unaware screens will get the Amiga-key and checkmark
scaling in the traditional color scheme.

How to open a screen which has a NewLook screen bar and supports
NewLook menus (this code also works perfectly under V36/V37):

UWORD mypens[] =
{
    ...	/* pens as before */

    1,	/* BARDETAILPEN */			/* NEW */
    2,	/* BARBLOCKPEN */			/* NEW */
    1,  /* BARTRIMPEN */			/* NEW */
    ~0,	/* Terminator, as before */
};

    myScreen = OpenScreenTags( &myNewScreen,
		...,
		SA_Pens, mypens,
		...,
		TAG_DONE );


The simplest way to open a window which will have NewLook menus is to
use GadTools.  Note that this code works perfectly under V36/V37):


    myWindow = OpenWindowTags( &myNewWindow,
		...,
		WA_NewLookMenus, TRUE,		/* NEW */
		...,
		TAG_DONE );

    menu = CreateMenus( myNewMenu,
		...,
		TAG_DONE );

    LayoutMenus( menu,
		...
		GTMN_NewLookMenus, TRUE,	/* NEW */
		TAG_DONE );

New or changed tags to OpenScreenTags():

(changed) SA_Pens (UWORD *):  There are now three new pens,
BARDETAILPEN, BARBLOCKPEN, and BARTRIMPEN, used for rendering
text/graphics, filled areas, and trim of the menus and title-bar,
respectively.  They default to the screen's detail, block, and block
pens respectively.  The intended use is to make BARDETAILPEN and
BARTRIMPEN black and BARBLOCKPEN white.  The screen's title-bar will
be rendered out of these pens.  These additional pens are ignored by
V36 and V37.

New or changed tags to OpenWindowTags():

(new) WA_NewLookMenus (BOOL):  Requests NewLook menu treatment
(defaults to FALSE).  Menu colors are derived from new screen pens,
instead of window detail and block pens.  Ignored by V36/V37.

(changed) WA_Checkmark (struct Image *):  Image to use as a checkmark
in menus.  If WA_NewLookMenus is not specified, the default will be
the traditional checkmark in the original colors.  If you have
requested WA_NewLookMenus, then the default will be an appropriately
colored checkmark, scaled to the screen's font.  Alternately, you can
provide a custom one, which you can design yourself or get from
sysiclass (see below - use this if your menu-font is different from
the screen's font).

(new) WA_AmigaKey (struct Image *):  Image to use as the Amiga-key
symbol in menus.  If WA_NewLookMenus is not specified, the default
will be the traditional Amiga-key symbol in the original colors.  If
you've requested WA_NewLookMenus, then the default will be an
appropriately colored Amiga-key, scaled to the screen's font.
Alternately, you can provide a custom one, which you can design
yourself or get from sysiclass (see below - use this if your
menu-font is different from the screen's font).  Ignored by V36/V37.

New or changed tags for sysiclass:

(new) SYSIA_ReferenceFont (struct TextFont *):  Some sysiclass images
can be scaled to a size appropriate for a particular font.  Use this
tag to specify the font to use.  If omitted, the SYSIA_DrawInfo
dri_Font will be used.  Make no assumptions as to the size of the
resulting image, but rather read its dimensions after creation
(image->Width and image->Height).  Ignored by V36/V37.

	/* Use this if your menu-items have a custom font different
	 * from the screen's font (don't forget to check for failure,
	 * and call DisposeObject() when done):
	 */
	check_image = NewObject(NULL, "sysiclass",
	    SYSIA_DrawInfo, drawinfo,
	    SYSIA_Which, MENUCHECK,
	    SYSIA_ReferenceFont, customfont,
	    TAG_DONE);

	amigakey_image = NewObject(NULL, "sysiclass",
	    SYSIA_DrawInfo, drawinfo,
	    SYSIA_Which, AMIGAKEY,
	    SYSIA_ReferenceFont, customfont,
	    TAG_DONE);


Matching changes to GadTools:

New or changed tags for LayoutMenu{Item}s():

(new) GTMN_NewLookMenus (BOOL):  If you ask for WA_NewLookMenus for
your window, you should ask for this tag as well.  This informs
GadTools to use the appropriate checkmark, Amiga-key, and colors.
Ignored by V36/V37.

(new) GTMN_Checkmark (struct Image *):  If you are using a custom
image for a checkmark (WA_Checkmark), also pass it to GadTools, so it
can lay the menus out accordingly.  Ignored by V36/V37.

(new) GTMN_AmigaKey (struct Image *):  If you are using a custom image
for the Amiga-key in menus (WA_AmigaKey), also pass it to GadTools, so
it can lay the menus out accordingly.  Ignored by V36/V37.

(new) GTMN_FrontPen (ULONG):  This tag has existed for CreateMenus(),
but now it's heeded by LayoutMenu{Item}s(), too.  If a legitimate pen
number is supplied, it is used for coloring the menu items (in
preference to anything passed to CreateMenus()).  If GTMN_NewLookMenus
has been specified, this tag defaults to using the screen's
BARDETAILPEN, else it defaults to "do nothing".  Ignored by V36/V37.

NewLook menus without GadTools:

If you intend to lay out your own menus (instead of using GadTools)
here is what you need to know.  For windows that do not specify
{WA_NewLookMenus,TRUE}, their menu's Amiga-key symbol and checkmark
will default to a width of COMMWIDTH (or LOWCOMMWIDTH) and CHECKWIDTH
(or LOWCHECKWIDTH) as before.  For windows with NewLook menus, you may
find the default Amiga-key image and checkmark image in the DrawInfo
dri_CheckMark and dri_AmigaKey field, and read the image widths from
there.  These fields were NULL under V36 and V37.  These images are
scaled to match the screen's font.  If you wish to use some other font
for your menu-items, you may create suitable Amiga-key and checkmark
images as shown above.

For NewLook menus, you should use the screen's DrawInfo BARDETAILPEN
and BARBLOCKPEN for the imagery in your items.
Chipset Support Issues

Consult the graphics database to see what modes and depths are
available.  You can now pass new values to SA_Depth (up to depth 8)
and SA_DisplayID.

Many other features are available through graphics.library/VideoControl(),
SpriteControl(), etc.

Inter-screen gap is now variable per screen, instead of three non-lace
lines.
New Sprite Support

At the time of writing, details for sprite-support had not been
finalized.  Thus, only a brief general discussion is provided.

The new chipset offers sprites in low-speed, high-speed, or super-speed
pixels (140 ns, 70 ns, or 35 ns pixels), and in 16, 32, and 64 bit
widths.  We intend to allow the Intuition pointer to take advantage of
these features.

Graphics is providing sprite-control functions, as well as a function
that accepts sprite-data in the form of a regular BitMap.  Graphics
will internally massage the BitMap into whatever private form the
hardware needs.  Intuition clients are expected to use the
graphics.library conversion functions, and pass the processed form to
Intuition.

There will be a new call akin to SetPointer() which permits specifying
new modes.

There will be a system-default wait-pointer, which the user will be
able to change through Preferences.

We are striving for high compatibility with applications that use
existing sprite features under Intuition.  It is essential that such
applications call GetSprite() and FreeSprite() as appropriate.

Co-existence of new-mode sprites (other than the pointer) and Intuition
is not assured, but is a goal.  It will certainly be possible to bring
up any sprites after "taking over" from Intuition.
New Palette/Color Support

ColorMap:

Intuition will determine the appropriate sized ColorMap for your
screen.  It will contain ( 1<<depth ) colors, but never less than 32.
If you intend to use bitplane or sprite color-banking (which could
increase the required depth), pass {SA_ColorMapEntries, depth} to
override.  SA_ColorMapEntries is safely ignored under V36/V37.

To enable features such as bitplane-banking and sprite-banking, etc.,
turn them on with graphics calls after opening your screen but prior
to bringing it to the front.

Screen Colors:

The new SA_Colors16 tag accepts a ColorSpec structure where the color
data is 16 bits-per-gun left-justified-truncated (SA_Colors took a
ColorSpec with 6 bits-per-gun right-justified).  Though both
SA_Colors16 and SA_Colors may be specified, SA_Colors16 takes
precedence.  SA_Colors16 is completely ignored by V36/V37.

(NB:  We may end up instead with SA_Colors32 and a new ColorMap32
structure.  This would be more agreeable with the new
graphics.library/SetRGB32(), but it does chew more space.)

Default colors beyond 32 come from graphics.library/GetColorMap().
The defaults for the first 32 colors are, as always:

- For all screens, colors 0-3 and 17-19 (sprites)) come from Preferences,
- For SA_FullPalette screens, colors 0-31 come from Preferences.

To set the colors of your screen once opened, use any of the old or
new color setting calls from graphics, including SetRGB32(),
SetRGB4(), LoadRGB4().

Palette-sharing:

The graphics.library now has functions for sharing colors on a screen.
Color sharing allows multiple applications that co-exist on one screen
to allocate colors for themselves, or to share similar colors with
other users.  In the graphics scheme, a color pen may be exclusive or
shared.  Shared pens are available to other applications needing a
similar-enough color.  Nobody may change the color of a shared pen.
Exclusive pens are for the owner's use only, and may be changed at the
owner's will.  It is possible to allocate a color as absolute (by
specific pen number) or not (any free pen will be used).

For public screens, the default will be:

	Pens in SA_Pens: allocated as absolute-shared
	All other pens:  allocated as absolute-exclusive

The reasoning is thus:

Any pen given in SA_Pens is, by definition, shareable, since other
applications are supposed to look there for pen information.  Other
pens are not shareable, and can legitimately be changed by the
screen's owner (e.g., a paint program).

The new SA_NoAllocPalette tag allows an application to instruct
Intuition to leave all pens other than those in SA_Pens unallocated.
The use of this tag will be strongly encouraged.  With
SA_NoAllocPalette, the scheme becomes:

	Pens in SA_Pens:     allocated as absolute-shared
	All other pens:      not allocated

The application may then allocate pens as needed.  A paint package,
for example, would allocate all colors it uses as exclusive.  Other
applications might allocate several colors as shared or exclusive.
Since Intuition opens all public screens in private state, the
application has a chance to allocate its colors before making the
screen available to visitors (see SetPubScreenModes()).

For regular custom screens, there is no issue because only the
application itself exists there.  Since the arrangement chosen doesn't
matter, the most forward-looking default is chosen, which is just like
{SA_NoAllocPalette, TRUE}.

	Pens in SA_Pens:     allocated as absolute-shared
	All other pens:      not allocated

The situation on the Workbench screen is more complex, since it is
highly desirable that there be free colors.  Perhaps the best idea is
to allocate SA_Pens as shared, and 0-3 as exclusive.  Some
consideration should possibly be given to ~0 to ~3.

New tag for OpenScreenTags():

(new) SA_NoAllocPalette (BOOL):  For public screens, controls which
palette entries are allocated through the graphics AllocPalette()
function.  Intuition always allocates (as shared) those pens given in
SA_Pens.  If TRUE, asks Intuition to leave all other palette entries
unallocated.  If FALSE, then all other palette entries will be
allocated as exclusive.  Defaults to FALSE, for compatibility.  We
encourage public screen owners to use the graph¡cs palette-management
functions, and to set this attribute to TRUE.
Attached Screens

It is becoming increasingly popular to have multiple screens open
simultaneously.  A typical use is an application that has a full-sized
screen (perhaps in HAM-mode) as a canvas, and a short screen as a
control panel or palette.  Since it is desirable that these screens
slide together, Intuition now provides the ability to attach screens
together.

First, you must open the parent screen, which would typically be the
canvas, main screen, highest on the display, or other large screen.
child screens can then be attached to the parent screen through the
use of a new tag.

Child screens are otherwise opened in the usual way, that is to say
they don't inherit any properties from their parent, and they live on
the regular screen list (IntuitionBase->FirstScreen->...).  In
particular this means you can run the same code under V36/V37 and
you'll just lose the depth-arrangement and dragging relationships.
That would yield the best situation under those versions, and no
conditional code is required on your part.

Dragging Attached Screens:

Screens can move in two similar ways.  First, any screen may be pulled
up or down below its natural top edge, concealing or revealing screens
that are behind it.  Second, oversized screens may be moved in any
direction to reveal hidden areas.  Attached screens slide together
when the parent screen is pulled up or down below its natural top
edge, but they slide independently otherwise.

Moving a child screen does not affect the parent screen (or any other
child screens), but does change its position relative to the parent.
This allows the user or programmer free control to position things
such as control panels.  A child screen can never be moved higher than
its parent.

It is quite possible and reasonable to have an oversized (scrolling)
parent screen, with one or more child screens attached.  Scrolling the
previously hidden portions of the parent screen into view doesn't
affect the position of the child screens.

Depth-Arranging Attached Screens:

Whenever the user depth-arranges any child or parent screen (i.e.,
with the depth gadget or by pressing Amiga-M or Amiga-N), that
screen's whole family is depth-arranged as a unit.  Likewise, if the
programmer depth-arranges a parent screen, that screen's whole family
moves as a unit.  Since the depth gadgets of each member of a screen
family are fully equivalent, we recommend that only one depth gadget
exists among the members of a single screen family.

Example -- User presses Amiga-M:

(back)		Other			/ Child-3
		/ Child-3		Parent
		Parent			\ Child-2
		\ Child-2		\ Child-1
(front)		\ Child-1		Other

However, when the programmer depth-arranges a child screen (i.e.,
using ScreenToFront() or ScreenToBack()), that screen moves to the
front or to the very back among the other screens in its family.  It
will not go behind (or in front) of another screen it wasn't already
behind (or in front of).  This allows the program to show or hide
various toolbox screens.

Example -- ScreenToBack(Child-1):

(back)		Other			Other
		/ Child-3		/ Child-1
		Parent			/ Child-3
		\ Child-2		Parent
(front)		\ Child-1		\ Child-2


A parent screen may have several child screens.  However, a child
screen may not itself have children.

You must close any child screens before closing the parent screen.

New or changed tags to OpenScreenTags():

(new) SA_Attach (struct Screen *):  Pointer to a parent screen that
you wish to attach this screen to, for purposes of depth-arrangement
and dragging (Ignored by V36/V37).
Eliminate Intuition's use of AllocRemember()

Intuition no longer uses FreeRemember( FALSE ) when windows and
screens are opened.  This should help reduce memory fragmentation
somewhat.
Fix Depth-Gadget for Fully-Visible Windows

In V36/V37, when the single window depth gadget replaced the two
gadgets that existed in V35 and earlier, its behavior was "if the
window is frontmost, send it to the back, otherwise send it to the
front".  As well, shift-clicking on the depth gadget could be used to
force a window to the back.

The confusing part is that it is possible to have a non-obscured
window that is not frontmost, but clicking on its depth gadget appears
to have no effect (it sends it to the front, but the visuals don't
change).  Such windows are now sent to the back as if they had been
frontmost.
IDS_DISABLED Support for Gadget Images

V36 Intuition introduced custom images.  Even though the custom image
mechanism allowed for disabled image states, the gadget mechanism was
still responsible for performing the ghosting.  It is reasonable to
ask Intuition to allow the image to perform its own ghosting, if it
wanted something fancier than Intuition provides (for example, the
ghosting pattern could be restricted to a non-rectangular area).

There is a new boolean image attribute, IA_SupportsDisable, which an
imageclass should return if it knows how to handle its own disabled
rendering.  Under V39, whenever a gadget is added to a window (through a
window-opening or gadget-adding call), Intuition will ask the gadget's
image (via GetAttr()) about this new attribute.  The new gadget flag
GFLG_IMAGEDISABLE will be set accordingly (do NOT set this flag
yourself!).

If this flag is set, then the gadget-rendering code will never render
the ghosting pattern.  Instead, the disabled-state is passed to the
image class.  (The image class will be called with the IDS_DISABLED
state or the new IDS_SELECTEDDISABLED state, as appropriate).  The
Amiga User-Interface Style Guide recommends that the ghosting pattern
be performed using the SHADOWPEN (see struct DrawInfo).  The standard
pattern for ghosting is as follows:

	UWORD ghost_pattern[2] =
	{
	    0x4444,
	    0x1111,
	    };

	SetAfPt( rport, ghost_pattern, 1 );
	SetDrMd( rport, JAM1 );

#define	   IDS_SELECTEDDISABLED (8L)	/* disabled and selected    */

System support for Double-Buffering

There is a new function in graphics.library that swaps the BitMap
associated with a ViewPort at the appropriate time.  It can signal you
when the previous bitmap is detached.

There is an Intuition wrapper function that normally does the same
thing, but when menus are up, or when a gadget is active, it fails
immediately, and does not swap the bitmaps.  That way, menus
automatically stop the animation, which will resume as soon as the
user lets go the menu button.

The new Intuition call is ChangeScreenBitMap(), which takes a screen
pointer, bitmap pointer, and a graphics DBufStruct, and it invokes the
underlying graphics.library function as appropriate.

During menu or gadget state, calls to ChangeScreenBitMap() won't take
effect.  The call will return immediately with a failure code.

This design is sufficient to make menus work, since menus always leave
the bitmap unaltered.

For gadgets, there are basically three cases in double-buffered
screens:

A)  When you don't really need it.

Intuition now allows screens to be attached, meaning you can put your
gadgets into a control panel which is attached to a double-buffered
screen that has no gadgets.  (This even means that the animation can
continue to roll while the user plays with the gadgets!) The problem
is instantly solved by virtue of it never coming into being.

B)  Gadgets whose imagery is unaltered when done

A number of people will want to double-buffer but have a screen
drag-bar and depth-gadget.  Now the depth-gadget (and many other
gadgets) have the property that when the user is done with them, the
pixels remain unaltered from the original case.  So ignoring calls to
ChangeScreenBitMap() means that such gadgets work, provided the
application performs one preparatory step, namely that after opening
the screen, it must copy the bits in the screen into the other
bitmap(s).  This way it doesn't matter which buffer is displayed when
the gadget stuff happens, since the bits always come back to the same
thing when the user is done.

C)  Gadgets whose imagery is altered when done

Many kinds of gadget (eg.  strings, prop gadgets, or toggling buttons)
don't return to their initial visual state when the user is finished
with them.  It would be hard to support double-buffering screens that
contain such gadgets, for synchronization reasons (the application
may end up calling ChangeScreenBitMap() after the user has played with
a gadget but before the application has become aware of that).  It
seems reasonable, therefore, to expect applications to put such
gadgets in a different screen.

Intuition-Friendly Screen-Locking

Previously, applications wishing to block all screen rendering so that
they can do "exceptional" rendering (eg.  dragging icons, pop-up
menus, etc.) need to call LockLayers().  Typically, however, such
applications run the risk of deadlocking with Intuition, because they
usually need information such as MOUSEMOVE messages.  V39 introduces
an Intuition-synchronized way of freezing a screen.  The new
LockScreenBits() and UnlockScreenBits() calls can be used to arbitrate
access to the screen's bitmap.

Intuition will behave much like it does when menus are down; that is
to say that layer-related events such as window size, depth, or
position changes are deferred until the screen is unfrozen.

The application has the following obligations:

1.  When UnlockScreenBits() is finally called, the screen's bitmap
must be bit-for-bit the same as when you called LockScreenBits(), with
the exception of rendering into your own windows' RastPorts.  That is
to say, you are responsible for doing non-destructive rendering during
the time you have the screen frozen.

2.  You may only make regular rendering calls (graphics calls, plus
Intuition imagery functions such as PrintIText(), DrawImage(),
DrawBorder()).  Do not call any gadget refresh functions,
OpenWindow(), Begin/EndRefresh(), etc.

3.  Don't freeze the screen on the user.  Freeze it only in response
to the user.  Typically, if you don't unfreeze the screen when the
user lets the mouse button go, you're freezing for too long.

4.  Do not freeze a screen you don't own.  It's OK to freeze a public
screen (including the Workbench screen), or your own custom screen.
If it's a public screen, be sure you hold a public-screen lock (see
LockPubScreen()) or have a window open on it.

void LockScreenBits( struct Screen *sc );
void UnlockScreenBits( struct Screen *sc );
ModifyIDCMP() Failure Conditions Improved

The WindowPort and UserPort are the pair of message ports Intuition
uses for communication to an application window.  They are normally
created at OpenWindow() time.  However, when an application wants to
share one UserPort across several windows, it will open its windows
with a NULL IDCMP flag.  The WindowPort is then only created at
ModifyIDCMP() time.  By creating the WindowPort at OpenWindow() time,
we can virtually eliminate all possibility of failure at ModifyIDCMP()
time, which, until V37, didn't have a return code.  Thus, starting
with V39, ModifyIDCMP() can't fail if the window already has a
UserPort.

Summary:

V36 and earlier:  ModifyIDCMP() might fail if the window is lacking a
UserPort or WindowPort, and the new IDCMP-flags are non-NULL.  There
is no way to detect this failure.  Other uses of ModifyIDCMP() cannot
fail.

V37:  ModifyIDCMP() can fail under the same conditions.  You may check
the return code to learn when this happens.

V39:  ModifyIDCMP() might fail only if the window lacks a UserPort,
and the new IDCMP-flags are non-NULL.  You may check the return code
to learn when this happens.
Non-Draggable Screens

Under V34 and earlier, you could make a screen effectively
non-draggable by obscuring its drag-bar with a window.  Sometimes,
a screen that was supposed to be draggable ended up non-draggable
because the screen drag-bar got covered.  In V36, Intuition introduced
mouse-screen-drag, which is intended to allow any screen to be
dragged, even when its drag-bar got accidentally covered or moved
off-screen.  Since accidentally and deliberately non-draggable screens
are indistinguishable to Intuition, the ability to have non-draggable
screens was lost.

The new SA_Draggable tag allows you to specify that a screen may not
be dragged.  This tag defaults to TRUE, but may be overridden as
{SA_Draggable, FALSE}.  Under earlier Kickstarts, this tag is ignored.

We strongly recommend that this tag only be used under special
circumstances.  The Amiga is a multi-tasking machine, and our users
appreciate that.  Non-draggable screens will impair the ability of
users to control their multi-tasking environment.  Valid uses may
include screens with sprites or complex copper lists, and
"environments" that legitimately want to dominate the display.
IDCMP Notification When Windows Are Depth-Arranged

If the {WA_NotifyDepth,TRUE} tag is passed to OpenWindowTags(), then
V39 Intuition will send an IDCMP_CHANGEWINDOW message when a window is
depth-arranged.  (Currently, IDCMP_CHANGEWINDOW is only sent when
windows are moved and/or re-sized).  You can recognize that a given
IDCMP_CHANGEWINDOW event was caused by a depth-arrangement by looking
at the IntuiMessage Code field.  Look for values of CWCODE_MOVESIZE (0)
(indicating a window that was moved and/or sized) or CWCODE_DEPTH (1)
(indicating that a window was depth-arranged).

Note that IDCMP_CHANGEWINDOW is only sent when the window itself is
operated on.  If the window in question ends up frontmost by virtue of
some other window being dismissed, no message is sent.

Under V36/V37, IDCMP_CHANGEWINDOW will only be sent for changes in the
position or size of a window, and the IntuiMessage Code field will
always be zero.
Miscellaneous Bug Fixes

A few known Intuition bugs may be fixed.  The following are known to
be fixed in V39:

Clicking in the area of a screen that has no windows now selects that
screen for the purposes of autoscrolling.  (Under V36/V37, you needed
to first activate a window on that screen).

The mouse-pointer used to sometimes vanish in the inter-screen gap
when three or more screens were visible.
V37 Changes

The following is a list of features changed or added for V37.

For V37, there is a new flag that can be set that makes a string
gadget participate in <Tab> / <Shift>-<Tab> cyclic activation.  If the
user presses <Tab> in such a gadget, the next such gadget on the
gadget list will be activated.  Likewise, pressing <Shift>-<Tab> will
activate the previous such gadget on the list.  (Note that custom
gadgets you design can join in this if they can be active in the sense
that string gadgets can.)

Set GFLG_TABCYCLE in the gadget->Flags field of a string gadget or
string-like custom gadget, or pass {GA_TabCycle, TRUE} when creating a
boopsi string or string-like gadget.

Also new to V37, there is a flag you can set so that when a user
presses the <Help> key while a string gadget is active, the gadget
will end.  You can check the IntuiMessage->Code field for the value
0x5F, which will let you know that <Help>, not <Return>, was pressed.
This facilitates an application's handling of the <Help> key.

Under V37 and higher, pass the {WA_MenuHelp, TRUE} tag-item to
OpenWindowTags() in order to enable the menu-help feature.  With
menu-help enabled, when the user presses the <Help> key on the
keyboard during a menu session, Intuition will terminate the menu
session and issue this event in place of an IDCMP_MENUPICK message.

Notes for menu-help:

- NEVER follow the NextSelect link for MENUHELP messages.

- You will be able to hear MENUHELP for ghosted menus.  (This lets you
tell the user why the option is ghosted.)

- Be aware that you can receive a MENUHELP message whose code
corresponds to a menu header or an item that has sub-items (this
cannot happen for MENUPICK).  The code may also be MENUNULL.

- LIMITATION:  if the user extend-selects some checkmarked items with
the mouse, then presses MENUHELP, your application will only hear the
MENUHELP report.  You must re-examine the state of your checkmarks
when you get a MENUHELP.

Menu panels that extend beyond the limits of the screen are clipped to
the screen limits, and don't crash the system anymore.  This
protection was added in late V36, so if you depend on it, you need to
ensure you have V37.

Sub-menu panels no longer flash when you roll the mouse on or off
them, or if you have gaps between the select-boxes of your subitems.
(This also was added late in V36, so is only guaranteed there if you
have V37).

Under V36, because of the processing needed for the new display modes,
reading the mouse position from IntuitionBase->MouseX and MouseY or
setting it with IECLASS_POINTERPOS on PAL machines was incompatible
with V34.  With V37, the V34-compatible behavior is restored.

To reduce confusion caused by stuffing NewWindow.IDCMPFlags values
into the NewWindow.Flags field (and similar confusion with Gadget
Flags, Activation, and Type), some familiar labels have been replaced
by non-ambiguous ones, such as IDCMP_ACTIVEWINDOW, and WFLG_ACTIVATE.
The old ones are still available in a new include file, iobsolete.h,
which is automatically included.

Late in V37 development, it was discovered that the gadget Activation
flag GACT_STRINGEXTEND was not properly ignored by V34.  Therefore it
is not safe to set this flag under V34.  We felt such transparent
compatibility was valuable, so we defined a new flag GFLG_STRINGEXTEND
(belonging in the gadget Flags field) that is properly ignored by V34.

V37 also added a new tag and fixed an old tag for "propgadclass"
boopsi gadgets.  PGA_NewLook controls the PROPNEWLOOK flag, and
PGA_Borderless now works correctly.

V37 Intuition also fixes the great majority of reported bugs and
compatibility problems experienced with V36 Intuition.
