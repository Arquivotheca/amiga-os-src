
==========
amiga.com/suggestions #1042, from talin, 1856 chars, Thu Jun 20 03:44:23 1991
----------
TITLE: Wish List for 2.1 Intuition (or whatever the next release is)

Beep Levels: There should be several different kinds of DisplayBeep
defined. Each beep would have a different hook (so I can attach a different
sound to it). Perhaps the beep levels could be defined the following
semantics: "Confirmed" "Attention" "Alert" "Warning" "Other/Special"

All string gadgets should support highlighting of blocks of text, as
well as cut and paste to the clipboard. (ConClip could perhaps be modified
to do the clip i/o).

There should be a way to edit a string without a gadget. The reson for this
is to be able to edit a moveable object's label, such as the name of an
icon, while retaining all the features and behavior of Intuition string
gadgets.

I would like AutoRequest and BuildEasyRequest on my system to center the
request on the screen (horizontally centered, 1/3 of the way down from the
top). I would also like the option to have all requests centered on the
window for that application (the process's pr->WindowPtr).

More standard boopsi classes built in.

RightAmiga key + click on clise box = send CLOSEWINDOW to all windows on
that screen (Note: WB could be revv's do detect this qualifier and not
beep by ignoring the closewindow msg in this case).

Popup menus: I really think that we need some types of popups. Most important
are the "choose a value" popups that are attached to a gadget. The cycle
gadgets are clumsy. Also "choose a value" popup menus can do one thing
that cycle gadgets cannot -- one of the menu choices can be "create a new
menu choice". This is how many of the popular applications (such as Excel)
implement their style tags feature, which is very nice).

Tear-off menus would also be nice for things like palettes and tool palettes.

gadtools gadgets should be able to be GRELWIDTH.

(comments in /software, please)



TITLE: Proposal for extending BOOPSI image classes.
    I propose adding a new set of messages which can be sent to Intuition
Image Classes. Currently there are two sets of messages, a "normal" class,
which consists of IM_DRAW, IM_HITTEST, IM_ERASE and IM_MOVE, and a
"frame" group, IM_DRAWFRAME, IM_FRAMEBOX, IM_HITFRAME and IM_ERASEFRAME.

    The idea for the new group is that I have long wanted to have many
gadgets share the same image classes. For example, suppose I have 30
BOOPSI sliders, and each slider has a text image class which is used to
display the label for the gadget. Under the current system, I have to allocate
a custom image for each slider, and place the text string for the label
somewhere in the image structure, say in ImageData.
    What I would like to be able to do instead, is extend the impDraw
structure to add a new field, "imp_Object". The data that this field points
to could be a text string, bitmap, whatever -- different kinds of objects
will be appropriate for different image class types.
    The 'imp_Object' field would be filled in by the custom gadget code
when it calls the image class.
    This would allow me, as application writer, to just stuff a raw text
string into each slider's "GadgetText" field, and have them all point
to the same image class structure. As a custom gadget writer, I could
easily modify my custom gadget code to pass the GadgetText field along
with everything else that I send to the image class.

    For example, I could write an image class that works like this: "Here's
an IBox. Here's a text string. You already have a font pointer and a color
in your image structure. Now render the text string on the left side of the
box, centered vertically.
    As a result, I save memory equivalent to one Image structure per BOOPSI
gadget.

        Note that no existing software will be affected by this.

    Consistent with this, the following text be included in the include file
'intuition/imageclass.h'.

cut here------------------------------------------------------------------------
/* =========================================================================== *
 *                     Extension to custom image protocol                      *
 * =========================================================================== *
/

#define IM_DRAWOBJECT   0x210L  /* draw with specified dimensions   */
#define IM_OBJECTBOX    0x211L  /* get recommended frame around some box*/
#define IM_HITOBJECT    0x212L  /* hittest with dimensions      */
#define IM_ERASEOBJECT  0x213L  /* hittest with dimensions      */

/* IM_DRAW, IM_DRAWFRAME    */
struct impDraw {
    ULONG       MethodID;
    struct RastPort *imp_RPort;
    struct {
        WORD        X;
        WORD        Y;
    } imp_Offset;

    ULONG           imp_State;
    struct DrawInfo *imp_DrInfo;

    /* these parameters only valid for IM_DRAWFRAME or IM_DRAWOBJECT */
    struct {
        WORD        Width;
        WORD        Height;
    } imp_Dimensions;

    /* these parameters only valid for IM_DRAWOBJECT */

    void            *imp_Object;
};
cut here------------------------------------------------------------------------
