head     38.14;
branch   ;
access   ;
symbols  V40_85:38.14 V40_71:38.14 V40_68:38.14 V40_65:38.14 V40_47:38.14 V40_45:38.14 V40_37:38.14 V40_34:38.14 V40_29:38.14 V39_2415:38.14 V39_2369:38.13 V39_2339:38.13 V39_2332:38.12 V39_2275:38.12 V39_2256:38.12 V39_2210:38.12 V39_2192:38.12 V39_2084:38.11 V39_2082:38.11 V39_2076:38.11 V39_2073:38.11 V39_2058:38.11 V39_2051:38.11 V39_2031:38.11 V39_2017:38.11 V39_2012:38.11 V39_1985:38.11 V39_1933:38.11 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.10 V39_1621:38.9 V39_1620:38.9 V39_1508:38.8 V39_1485:38.8 V39_1461:38.7 V39_1458:38.7 V39_1456:38.7 V39_1405:38.7 V39_1368:38.7 V39_1360:38.7 V39_1324:38.7 V39_1147:38.6 V39_1143:38.6 V39_1141:38.6 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.6 V39_1078:38.6 V39_1073:38.6 V39_757:38.4 V39_702:38.4 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.14
date     93.01.14.14.22.34;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.12.14.18.03.46;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.11.10.17.07.24;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.08.02.12.42.48;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.07.15.21.21;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.06.29.10.45.12;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.06.18.18.09.20;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.15.14.06.58;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.09.16.26.36;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.07.17.53.21;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.21.14.51.11;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.19.15.52.20;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.20.12.14.24;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.02.17.17.13.46;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.24.57;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.14
log
@Added itMODIFYPROP token.
@
text
@/*** ism.h *****************************************************************
 *
 *  Intuition State Machine include file
 *
 *  $Id: ism.h,v 38.13 92/12/14 18:03:46 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#define WAITTOF_OPTIMIZE	0

/* input token command codes
 * these codify "types" of input event and other commands which
 * are to be presented to the state machine.  For each, we
 * document the fields in the InputToken which will be valid.
 * In each case, the InputEvent will be valid somehow.
 */
enum ITCommand
{
    /* This first set corresponds roughly to input events,
     * the other InputToken fields are not used.
     */
    itMENUDOWN,
    itMENUUP,
    itSELECTDOWN,
    itSELECTUP,
    itMOUSEMOVE,	/* it_Box.Left/Top are scaled delta mouse ticks	*/
			/* it_IE->ie_xy are old-coords deltas for 
			 * DELTAMOVE messages
			 */
    itRAWKEY,
    itTIMER,
    itDISKCHANGE,	/* (ULONG) it_Object1 = IECLASS_DISKINSERTED/REMOVED*/

    /* These are commands.  The InputEvent field is used only for
     * passing along input events
     */
    itACTIVATEWIN,	/* it_Object1 = window, it_Object2 = AWIN_ code from
			 * intuinternal.h.  it_SubCommand = menu code for
			 * AWIN_LENDMENUKEY.
			 */
    itACTIVATEGAD,	/* it_Object1 = window, it_Object2 = gadget	*/
			/* sorry: requester parameter is stuck in
			 * it_SubCommand
			 */
    itSETREQ,		/* it_Object1 = window, it_Object2 = requester	*/
    itCLEARREQ,		/* it_Object1 = window, it_Object2 = requester	*/
    itMETADRAG,		/* nothing	*/
    /**** I DON'T THINK WE NEED OPENWINDOW: OpenWindow() might
     **** do a deferred ActivateWindow though
     ****/
/*13*/    itOPENWIN,	/* it_Object1 = window, it_Object2 = screen	*/
    itCLOSEWIN,		/* it_Object1 = window				*/
    itVERIFY,		/* it_Object1 = window, it_SubCommand = code	*/
    itREMOVEGAD,	/* it_Object1 = gadget, it_Object2 = firstgadget	
			 * it_SubCommand = numgad
			 */
    itSETMENU,		/* it_Object1 = window, it_Object2 = menu	*/
    itCLEARMENU,	/* it_Object1 = window				*/
    itCHANGEWIN,	/* it_Object1 = window, it_Box = pos/dims
			 * it_SubCommand = listed below as CWSUB_*
			 */
    itDEPTHWIN,		/* it_Object1 = window
			 * it_SubCommand = front/back/infrontof
			 * it_Object2 = infrontof window.
			 */
/*21*/    itMOVESCREEN,	/* it_Object1 = screen, it_Object2 = &point 	*/
    itDEPTHSCREEN,	/* it_Object1 = screen, it_SubCommand = f/b	*/

    itCHANGESCBUF,	/* it_Object1 = screen, it_Object2 = screenbuffer */

    itOPENSCREEN,	/* it_Object1 = screen				*/
    itCLOSESCREEN,	/* it_Object1 = screen				*/
    itNEWPREFS,		/* nothing	*/
    itMODIFYIDCMP,	/* it_Object1 = window, it_Object2 = Flags (cast)*/
/*28*/    itZOOMWIN,	/* it_Object1 = window, it_SubCommand = verify? */
    itCLOSEWB,		/* it_Object1 = msg				*/
    itUNKNOWNIE,	/* nothing	*/
    itSHOWTITLE,	/* it_Object1 = screen, it_SubCommand = showit	*/
    itONOFFMENU,	/*  it_Object1 = w, it_Object2 = (UWORD!) menunum,
			 *  it_SubCommand = onOrOff (true means ON)
			 */
    itCOPYSCBUF,	/* it_Object1 = screen, it_Object2 = ScreenBuffer */
    itSETPOINTER,	/* it_Object1 = window, it_Object2 = pointer */
    itGADGETMETHOD,	/* it_Object1 = window, it_Object2 = gadget,
			 * it_SubCommand = message
			 */
    itMODIFYPROP,	/* it_Object1 = window, it_Object2 = gadget,
			 * it_SubCommand = PropPacket
			 */
#if WAITTOF_OPTIMIZE
    itFREECPRLIST,	/* it_Object1 = cprlist 1, it_Object2 = cprlist 2,
			 * it_SubCommand = VBlank counter
			 */
    itFREESPRITEDATA,	/* it_Object1 = ExtSprite, it_SubCommand = VBlank counter */
#endif
};

/* sub commands for itCHANGEWIN	*/
#define CWSUB_CHANGE		0x0001	/* just change to it_Box		*/
#define CWSUB_SIZEDELTA 	0x0002	/* it_Box.Width/Height holds deltas	*/
#define CWSUB_MOVEDELTA 	0x0003	/* it_Box.Left/Top holds deltas		*/

#define CWSUB_SUBCOMMAND	0x0003	/* command-part */

/* Here are some qualifiers that can be applied: */
#define CWSUBQ_SIZING		0x0004	/* involves sizing (incl. zoom)		*/
#define CWSUBQ_PROGRAMMATIC	0x0008	/* operation not user-initiated		*/

/* combination of InputEvent and old DistantEcho:
 * contains parameters for a command which passes through
 * the state machine, as well as input event which is either
 * directly from input.device or constructed from last received
 * InputEvent
 *
 * Very important lesson:  You cannot make it_Node into a MinNode
 * because the pool stuff (pools.c) uses ln_Name as a back-pointer
 * to the list.  Remember that.
 */
struct InputToken	{
    struct Node	it_Node;	/* in list				*/
    UWORD	it_Flags;	/* below				*/
    enum ITCommand  it_Command;	/* from enum above			*/
    ULONG	it_SubCommand;	/* such as front/back, ...		*/
    CPTR	it_Object1;	/* window, screen, gadget, parameter	*/
    CPTR	it_Object2;	/* secondary pointer parameter		*/
    union
    {
	struct IBox it_box;	/* pos/dim parameters for itCHANGEWIN	*/
	struct LongPoint it_longmouse;	/* For itMOUSEMOVE		*/
    } it_Position;

    struct InputEvent	*it_IE;	/* copy of input event			*/
    struct Task	*it_Task;	/* who to signal for ITF_SIGNAL 	*/
    struct TabletData *it_Tablet;	/* Tablet data if any		*/
    UBYTE	it_Code;	/* result of RawKeyConvert for RAWKEY	*/
    ULONG	it_Error;	/* return code				*/
};

#define it_Box		it_Position.it_box
#define it_LongMouse	it_Position.it_longmouse

/* InputToken Flag values	*/
#define ITF_NOTIFYDONE	(0x0001) /* wants to know when event is finished */

#define ITF_CALLBACK	(0x0002) /* notify by function callback		*/
/* NOT  CURRENTLY SUPPORTED */

#define ITF_SIGNAL	(0x0004) /* notify by signalling		*/

#define ITF_DEFERRED	(0x0008) /* this token has been deferred	*/
#define ITF_DONOTDEFER	(0x0010) /* for debugging			*/
#define ITF_NOPOOL	(0x0020) /* should not be returned to pool	*/
#define ITF_QUICK	(0x0040) /* like IOQUICK: try it right away	*/
#define ITF_REUSE	(0x0080) /* don't also set ITF_DEFERRED		*/

enum IntuitionStates	{
    sNoWindow,
    sIdleWindow,
    sRequester,
    sMenu,
    sDMRTimeout,
    sScreenDrag,
    sVerify,
    sGadget,
    sWSizeDrag,		/* 8 */
};

/* states are folded together: let know which */
#define WSD_SIZE	0
#define WSD_DRAG	1

#define IT	(IBase->InputToken)
#define IE	(IBase->InputToken->it_IE)

#if 0	/* they're in there.	*/
/* ZZZ: remember to claim this signal */
#define SIGB_INTUITION	(5)
#define SIGF_INTUITION 	(1<< SIGB_INTUITION)
#endif
@


38.13
log
@Longword aligned it_Command.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.12 92/11/10 17:07:24 peter Exp Locker: peter $
d13 1
d91 4
d99 1
@


38.12
log
@Added tokens to implement VBlank optimization.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.11 92/08/02 12:42:48 peter Exp Locker: peter $
d119 1
a120 1
    UWORD	it_Flags;	/* below				*/
@


38.11
log
@Comment change for itACTIVATEWIN token.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.10 92/07/07 15:21:21 peter Exp Locker: peter $
d20 2
a21 1
enum ITCommand {
d90 4
@


38.10
log
@Added itGADGETMETHOD token.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.9 92/06/29 10:45:12 peter Exp Locker: peter $
d39 3
a41 2
    itACTIVATEWIN,	/* it_Object1 = window, it_Object2 = menu-return-window
			 * it_SubCommand = TRUE for initial activation
@


38.9
log
@IToken mouse coordinates in ticks are now stored as longs.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.8 92/06/18 18:09:20 peter Exp Locker: peter $
d85 3
@


38.8
log
@Changed comment beside itACTIVATEWIN.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.7 92/05/15 14:06:58 peter Exp Locker: peter $
d115 6
a120 1
    struct IBox	it_Box;		/* position/dimension parameters	*/
d127 3
@


38.7
log
@Changed some comments.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.6 92/04/09 16:26:36 peter Exp Locker: peter $
d40 1
@


38.6
log
@Added it_Tablet.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.5 92/04/07 17:53:21 peter Exp Locker: peter $
a39 1
			 * it_SubCommand = initial activation
d102 4
@


38.5
log
@Defined itSETPOINTER.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.4 92/03/21 14:51:11 peter Exp Locker: peter $
d114 1
a114 1
    int 	(*it_CallBack)(); /* where to call 			*/
@


38.4
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.3 92/03/19 15:52:20 peter Exp Locker: peter $
d39 3
a41 1
    itACTIVATEWIN,	/* it_Object1 = window				*/
d84 1
@


38.3
log
@Defined new itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.2 92/02/20 12:14:24 peter Exp Locker: peter $
a81 1
    itATTACHSCREEN,	/* it_Object1 = parent, it_Object2 = child, it_SubCommand = dolink */
@


38.2
log
@Defined new itCOPYSCBUF token.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.1 92/02/17 17:13:46 peter Exp Locker: peter $
d82 1
@


38.1
log
@Replaced obsolete itBORDERPATROL with new itCHANGESCBUF.
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 38.0 91/06/12 14:24:57 peter Exp Locker: peter $
d81 1
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: ism.h,v 1.12 90/12/05 17:18:52 peter Exp $
d68 1
a68 2
    /** OBSOLETE **/
    itBORDERPATROL,	/* it_Object1 = screen				*/
@
