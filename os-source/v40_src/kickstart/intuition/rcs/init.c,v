head     38.22;
branch   ;
access   ;
symbols  V40_85:38.22 V40_71:38.22 V40_68:38.22 V40_65:38.22 V40_47:38.22 V40_45:38.22 V40_37:38.22 V40_34:38.22 V40_29:38.22 V39_2415:38.21 V39_2369:38.20 V39_2339:38.20 V39_2332:38.20 V39_2275:38.20 V39_2256:38.20 V39_2210:38.20 V39_2192:38.20 V39_2084:38.20 V39_2082:38.20 V39_2076:38.20 V39_2073:38.20 V39_2058:38.20 V39_2051:38.20 V39_2031:38.20 V39_2017:38.20 V39_2012:38.20 V39_1985:38.20 V39_1933:38.20 V39_1819:38.19 V39_1805:38.19 V39_1783:38.19 V39_1695:38.18 V39_1621:38.17 V39_1620:38.17 V39_1508:38.16 V39_1485:38.16 V39_1461:38.16 V39_1458:38.16 V39_1456:38.15 V39_1405:38.15 V39_1368:38.15 V39_1360:38.15 V39_1324:38.14 V39_1147:38.12 V39_1143:38.12 V39_1141:38.12 V39_1120:38.12 V39_1116:38.12 V39_1104:38.12 V39_1100:38.12 V39_1078:38.10 V39_1073:38.10 V39_757:38.8 V39_702:38.8 V39_557:38.7 V39_553:38.7 V39_551:38.7 V39_510:38.7 V39_495:38.7 V39_416:38.7 V39_383:38.6 V39_371:38.5 V39_336:38.5 V39_323:38.5 V39_295:38.5 V39_277:38.5 V39_254:38.4 V39_222:38.3 V39_185:38.3 V39_171:38.3 V39_161:38.3 V38_159:38.3 V38_116:38.2 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.22
date     93.02.15.18.59.50;  author peter;  state Exp;
branches ;
next     38.21;

38.21
date     93.01.12.16.18.54;  author peter;  state Exp;
branches ;
next     38.20;

38.20
date     92.08.03.15.53.56;  author peter;  state Exp;
branches ;
next     38.19;

38.19
date     92.07.17.17.25.48;  author peter;  state Exp;
branches ;
next     38.18;

38.18
date     92.07.07.15.20.29;  author peter;  state Exp;
branches ;
next     38.17;

38.17
date     92.06.23.17.17.52;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.06.04.16.16.49;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.05.27.11.52.18;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.05.21.17.38.51;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.05.15.14.05.15;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.04.13.16.47.02;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.13.16.25.51;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.07.17.50.32;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.02.12.04.09;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.19.10.53.05;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.11.13.38.42;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.07.11.06.10;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     91.11.25.16.55.23;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.15.18.52.21;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.21.18.16.54;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.17.55.41;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.04.31;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.21.56;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.22
log
@Now initialize PendingPubScreens list.
@
text
@
/*** init.c *****************************************************************
 *
 *  A compendium of initialization procedures
 *
 *  $Id: init.c,v 38.21 93/01/12 16:18:54 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"

#include "imageclass.h"

#ifndef GRAPHICS_DISPLAYINFO_H
#include <graphics/displayinfo.h>
#endif

#define D(x)		;
#define DG(x)		;
#define DINIT(x)	;

struct Image	*makeImage();
void		*AllocMem();

#include "preferences.h"

#ifndef EXEC_MEMORY_H
#include <exec/memory.h>
#endif

#ifndef EXEC_ALERTS_H
#include <exec/alerts.h>
#endif

#ifndef GRAPHICS_SPRITE_H
#include <graphics/sprite.h>
#endif

#ifndef GRAPHICS_GFXNODES_H
#include <graphics/gfxnodes.h>
#endif

#ifndef GRAPHICS_GFXMACROS_H
#include <graphics/gfxmacros.h>
#endif

#ifndef HARDWARE_CUSTOM_H
#include <hardware/custom.h>
#endif

#ifndef HARDWARE_DMABITS_H
#include <hardware/dmabits.h>
#endif

#ifndef INTERNAL_LIBRARYTAGS_H
#include <internal/librarytags.h>
#endif

extern struct Custom custom;

#define TEXTPAD 4

extern IntuiVecs;
extern struct Preferences DefaultPreferences;

extern VERSION;

/* = declarations ======================================================== */

extern struct Image RomCheckMarks[RESCOUNT];
extern struct Image RomAmigaIcon[RESCOUNT];

/** initial colormap values. **
 * Some are old/new values for  0-3 and 17-19,
 * the rest are copies of graphic's default init
 * from _dflt_clrs, graphics/c/cpwrup.c
 */
UWORD InitDefaultColors[] = {
    COLOR0, COLOR1, COLOR2, COLOR3,
    COLORN3, COLORN2, COLORN1, COLORN0,
    COLOR17, COLOR18, COLOR19,
};

extern UWORD	twoColorPens[ NUMDRIPENS + 1 ];
extern UWORD	fourColorPens[ NUMDRIPENS + 1 ];

initIntuition()
{
    int i;
    struct IntuitionBase *IBase = fetchIBase();
    struct ExtSprite *extsprite;
    struct Preferences *Pref;
    struct BitMap sprite_bm;
    extern APTR AbsExecBase;
    extern struct IScreenModePrefs	DefaultScreenMode;

    /* jimm: 1/6/86: use to init locks */
    struct MsgPort *m;

    struct Task	*FindTask();

    IBase->SysBase = AbsExecBase;

    DINIT( IBase->DebugFlag = 0 );

    IBase->SysReqTitle = "System Request";
    IBase->WBScreenTitle = "Workbench Screen";

    /* am not waiting on anything yet */
    /* IBase->getOKWindow = NULL; */

    /* Only Wack needs the SemaphoreList.  No user does.  Wack should
     * be modified.  100 bytes of ROM * 1 million machines = 100 MB
     * of ROM, just so I can Wack easier...
     */
    for (i = 0; i < NUMILOCKS+NUMOTHERLOCKS; ++i) 
    {
	InitSemaphore( &IBase->ISemaphore[i] );
    }

    /* jimm: 1/6/86: changed version passed from
     *  VERSION to 31.  (couldn't develop with
     *  1.1 kickstart otherwise).
     */

    /* NOTE: I can't pull an alert now anyway, so let 'er ride */
    IBase->UtilityBase = (struct Library *) TaggedOpenLibrary( OLTAG_UTILITY );
    IBase->GfxBase = (struct GfxBase *) TaggedOpenLibrary( OLTAG_GRAPHICS );
    IBase->LayersBase= (struct LayersBase *)TaggedOpenLibrary( OLTAG_LAYERS );

    /* Will be overridden in OpenIntuition() for PAL machines, but for
     * now let's ensure we have a sane value.
     */
    IBase->MouseScaleX = MOUSESCALEX;
    IBase->MouseScaleY = NTSC_MOUSESCALEY;

    /* Let's make ourselves a blank pointer, in part to have a valid
     * sprite from the moment we obtain the sprite engine, in part
     * because we'll be using this later to blank the sprite
     * around imagery changes.
     */
    InitBitMap( &sprite_bm, 2, 16, 0 );
    extsprite = (struct ExtSprite *)AllocSpriteData( &sprite_bm,
	TAG_DONE );
    IBase->BlankSprite = IBase->TetrisSprite = IBase->SimpleSprite = extsprite;
    GetExtSprite( extsprite,
	GSTAG_SPRITE_NUM, 0,
	GSTAG_SOFTSPRITE, TRUE,
	TAG_DONE );

    IBase->RP = (struct RastPort *) AllocMem(sizeof (struct RastPort), 0);
    InitRastPort(IBase->RP);
    InitRastPort(&IBase->MenuRPort);

    /* MEMF_CLEAR means no need:
     * IBase->FirstScreen = IBase->ActiveWindow = IBase->ActiveScreen = NULL;
     */

    /*** !!! jimm thinks these are not necessary,
     *** since we call SetPrefs() below, which overrides
     ***/
    /* but then, why not be safe, rather than sorry?	*/
    setColorPrefs( InitDefaultColors, 0, WBCOLOR_NUMBER );

    CopyMem( fourColorPens, IBase->ScreenPens4, sizeof( UWORD )*( NUMDRIPENS + 1 ) );
    CopyMem( fourColorPens, IBase->ScreenPens8, sizeof( UWORD )*( NUMDRIPENS + 1 ) );

    IBase->Preferences = (struct Preferences *)AllocMem(
	    sizeof(struct Preferences), MEMF_CLEAR );
    GetDefPrefs(IBase->Preferences, sizeof(struct Preferences));

    InitView(&IBase->ViewLord);
    IBase->TrackViewDx = IBase->ViewLord.DxOffset;
    IBase->TrackViewDy = IBase->ViewLord.DyOffset;

    IBase->ViewLord.Modes = SPRITES;

    /* IBase->ScanRate = SCAN_NORMAL; */
    IBase->ViewExtra = (struct ViewExtra *)GfxNew(VIEW_EXTRA_TYPE);
    GfxAssociate(&IBase->ViewLord,IBase->ViewExtra);

    IBase->ViewInitX = IBase->ViewLord.DxOffset;
    IBase->ViewInitY = IBase->ViewLord.DyOffset;

    /* initialize display	*/
    D( printf("initI: calling modeVerify (needed?)\n") );
    modeVerify(  TRUE );    /* set up modes related stuff */

    /* init distant echo list	*/
    initTokens();	/* ISM: */
    initIEvents();

    NewList( &IBase->PubScreenList );	/* default is NULL */
    NewList( &IBase->PendingPubScreens );

    /* initialize reply port for asynch WB messages	*/
    NewList( &IBase->WBReplyPort.mp_MsgList );
    IBase->WBReplyPort.mp_Flags = PA_IGNORE;

#if 0	/* default for pubscreen global flags will be zero */
    IBase->PubScreenFlags = POPPUBSCREEN;
#endif

    InitIIHooks();
    IBase->EditHook = &IBase->IIHooks[ IHOOK_SEDIT ];

    initIClasses();	/* init the kernel gadget classes */

    /* Initialize imagery and pointer after the classes have been initialized */
    {
	struct DrawInfo dri;
	int im;
	extern UBYTE *SysIClassName;

	/* sysiclass really only needs pens and depth to make the
	 * default menu checkmark and Amiga key.
	 */
	clearWords( &dri, sizeof( struct DrawInfo )/2 );
	dri.dri_Pens = twoColorPens;
	dri.dri_Depth = 1;

	for ( im = MENUCHECK; im <= AMIGAKEY; im++ )
	{
	    for (i = 0; i < RESCOUNT; i++)
	    {
		IBase->MenuImage[ im-MENUCHECK ][ i ] = (struct Image *) NewObject( NULL, SysIClassName,
		    SYSIA_DrawInfo, &dri,
		    SYSIA_Which, im,
		    SYSIA_Size, i,
		    TAG_DONE );
	    }
	}
    }
    initMousePointer();

    IBase->NewIControl =
	IC_COERCE_COLORS | IC_COERCE_LACE | IC_STRINGG_CTRL | IC_DOMAGICMENU;

    IBase->MetaDragQual = IEQUALIFIER_LCOMMAND;

    /* "left amiga" keys */
    IBase->WBtoFCode = 'N';
    IBase->FtoBCode = 'M';
    IBase->ReqTrueCode = 'V';
    IBase->ReqFalseCode = 'B';

    /* Peter 20-Aug-90: IBase now keeps track of the last
     * screen mode that worked, so it can try to fall back
     * on that.  Init it to something reasonable here:
     */
    IBase->LastScreenMode = DefaultScreenMode;

    OFF_SPRITE;

    /* This is normally a do-nothing macro defined in intuall.h.
     * However, when LOCKDEBUG is on, this macro sets a flag
     * which enables the checking.  That allows the init routine
     * to run without any lock-checking.  It doesn't need any,
     * since the semaphores and IntuitionBase aren't really
     * open for business anyways.
     */
    enableLockCheck();
}



/*** intuition.library/InitRequester ***/

InitRequester(req)
struct Requester *req;
{
    BYTE *cptr;
    int i;

    cptr = (BYTE *)req;
    for (i = sizeof(struct Requester); i > 0; i--) *cptr++ = 0;
}



IntuiRomInit()
/* this is the library initialization routine */
{
    struct IntuitionBase *IBase = fetchIBase();

    extern REVISION;
    extern UBYTE  IntuiName[];

    DINIT( printf("\n=============\nINTUITION INIT dbpt: %lx\n",
	    &IBase->debugpt) );

    IBase->LibNode.lib_Node.ln_Name = IntuiName;
    IBase->LibNode.lib_Version = VERSION;
    IBase->LibNode.lib_Revision = REVISION;
    IBase->LibNode.lib_Flags |= (LIBF_SUMUSED | LIBF_CHANGED);

    initIntuition();
}
@


38.21
log
@Now initialize IBase->MouseScaleX.  "Workbench Screen" now in IBase
for locale.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.20 92/08/03 15:53:56 peter Exp Locker: peter $
d197 1
@


38.20
log
@No longer allocate NullSpriteData.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.19 92/07/17 17:25:48 peter Exp Locker: peter $
d110 1
d137 1
@


38.19
log
@Made sprite allocation legal.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.18 92/07/07 15:20:29 peter Exp Locker: peter $
d114 5
a118 3
    /* initialize the locks */
    NewList(&IBase->SemaphoreList);
    for (i = 0; i < NUMILOCKS; ++i) 
d120 1
a120 2
	InitSemaphore(&IBase->ISemaphore[i]);
	AddTail( &IBase->SemaphoreList, &IBase->ISemaphore[i]);
a121 10

    InitSemaphore(&IBase->IClassSemaphore);
    AddTail( &IBase->SemaphoreList, &IBase->IClassSemaphore);

    InitSemaphore(&IBase->AlertSemaphore);
    AddTail( &IBase->SemaphoreList, &IBase->AlertSemaphore);

    /* allocate invisible sprite, two rows control, one of data */
    IBase->NullSpriteData = AllocMem( (2 + NULL_SPRITE_ROWS) * 4,
					MEMF_CLEAR | MEMF_CHIP );
@


38.18
log
@Fixed bug in allocation of ExtSprite.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.17 92/06/23 17:17:52 peter Exp Locker: peter $
d96 1
d147 9
a155 8
    extsprite = (struct ExtSprite *)
	AllocMem(sizeof(struct ExtSprite),MEMF_PUBLIC|MEMF_CLEAR);

    /** ZZZ: allocate simple sprite for attached pointer now? **/

    IBase->TetrisSprite = IBase->SimpleSprite = extsprite;

    extsprite->es_wordwidth = 1;
@


38.17
log
@Now gets default Amiga-key and Checkmark imagery from sysiclass.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.16 92/06/04 16:16:49 peter Exp Locker: peter $
d94 1
a94 1
    struct SimpleSprite *simplesprite;
d146 2
a147 2
    simplesprite = (struct SimpleSprite *)
	AllocMem(sizeof(struct SimpleSprite),MEMF_PUBLIC|MEMF_CLEAR);
d151 5
a155 2
    IBase->TetrisSprite = IBase->SimpleSprite = simplesprite;
    GetExtSprite( simplesprite,
@


38.16
log
@Now knows about both sets of Prefs DrawInfo pens.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.15 92/05/27 11:52:18 peter Exp Locker: peter $
d15 2
d87 1
a87 30
struct Image	*
makeImage( romimage )
struct Image	*romimage;
{
    int i;
    struct Image    *image;
    USHORT *data;

    if ( ! romimage ) return ( NULL );
    
    /* no need for the Image itself to be in chip	*/
    if ( image = (struct Image *)AllocMem(sizeof(struct Image),  MEMF_PUBLIC))
    {
	*image = *romimage;	/* copy 'struct Image'	*/

	/* copy planes	*/
	i = umuls(umuls((image->Width + 15) >> 4, image->Height), 
		image->Depth) << 1;

	data = (USHORT *) AllocMem(i, MEMF_CHIP);

	/* ZZZ: no error checking here	*/

	CopyMem(image->ImageData, data, i);
	image->ImageData = data;
    }

    return ( image );
}

a163 6
    for (i = 0; i < RESCOUNT; i++)
    {
        IBase->CheckImage[ i ] =  makeImage( &RomCheckMarks[ i ] );
	IBase->AmigaIcon[ i ] =  makeImage( &RomAmigaIcon[ i ] );
    }

d213 25
a237 1
    /* Call this after the classes have been initialized */
@


38.15
log
@Now only have 11 default colors.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.14 92/05/21 17:38:51 peter Exp Locker: peter $
d203 2
a204 1
    CopyMem( fourColorPens, IBase->ScreenPens, sizeof( UWORD )*( NUMDRIPENS + 1 ) );
@


38.14
log
@Default colors now set at 8 bits-per-gun.  Now sets Softsprite
correctly.  Removed execAlert().
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.13 92/05/15 14:05:15 peter Exp Locker: peter $
d79 1
a79 1
UWORD InitDefaultColors[ 32 ] = {
d81 1
a81 2
				0x00f, 0xf0f, 0x0ff, 0xfff,
    0x620, 0xe50, 0x9f1, 0xeb0, 0x55f, 0x92f, 0x0f8, 0xccc,
a82 2
			0x333, 0x444, 0x555, 0x666, 0x777,
    0x888, 0x999, 0xaaa, 0xbbb, 0xccc, 0xddd, 0xeee, 0xfff
d201 1
a201 1
    setColorPrefs( InitDefaultColors, 0, NUM_WB_COLORS );
@


38.13
log
@Now calls enableLockCheck().  This allows lock-checking to be disabled
during init (before the semaphores are up).
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.12 92/04/13 16:47:02 peter Exp Locker: peter $
d118 2
d182 3
a184 1
    GetSprite(simplesprite, 0);
d204 3
a206 1
    CopyMem(InitDefaultColors, IBase->WBColors, NUM_WB_COLORS * sizeof(UWORD));
a313 8

execAlert( alertnum )
ULONG	alertnum;
{
    DINIT( printf("!!!!!!!!! ALERT !!!!! %lx !!!!!\n") );
    Alert( alertnum );
};

@


38.12
log
@Uses TaggedOpenLibrary() to save space.  Inits MouseScaleY to a sane value.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.11 92/04/13 16:25:51 peter Exp $
d263 9
@


38.11
log
@No longer calls setPrefs() or decides if machine is PAL.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.10 92/04/07 17:50:32 peter Exp Locker: peter $
d168 5
@


38.10
log
@Init's IBase->BusyPointer.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.9 92/04/02 12:04:09 peter Exp Locker: peter $
d56 4
d165 3
a167 14
    IBase->UtilityBase = (struct Library *) OpenLibrary( "utility.library", 36);
    IBase->GfxBase = (struct GfxBase *) OpenLibrary("graphics.library",36);
    IBase->LayersBase= (struct LayersBase *)OpenLibrary("layers.library", 36);

    /* jimm: 5/30/90: set up mode aliasing in gfxbase	*/
    IBase->GfxBase->monitor_id = NTSC_MONITOR_ID >> 16;
    IBase->MouseScaleY = NTSC_MOUSESCALEY;

    if ( IBase->GfxBase->DisplayFlags & PAL )
    {
	IBase->Flags |= MACHINE_ISPAL;
	IBase->GfxBase->monitor_id = PAL_MONITOR_ID >> 16;
	IBase->MouseScaleY = PAL_MOUSESCALEY;
    }
a255 7

    /** meaningful part is done in OpenIntuition() **/
    /*
     * setprefs sets up TextOverscan from WB Normal, ...
     */
    D( printf("initIntuition calling SetPrefs\n") );
    setPrefs(IBase->Preferences, sizeof(struct Preferences), FALSE);
@


38.9
log
@Renamed setDefaultPointer() to setDefaultMousePointer() and moved to
pointer.c.  Renamed setMouse() to setMousePointer(), and it no longer
takes a window parameter.  No longer allocate a SimpleSprite.  Evicted
autodocs.  No longer includes gfxbase.h.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.8 92/03/19 10:53:05 peter Exp Locker: peter $
a19 1
#define DP(x)		;
a68 1
extern USHORT RomPointer[];
a175 1
#if OLD_SPRITES
a181 1
#endif
d244 2
a245 9
    /* allocating initial buffer relies on IBase->DefPointer
     * and IBase->DefPtrBufSize both being 0 initially
     */
    DP( printf("initial sDIP ...\n"));
    setDefaultMousePointer( RomPointer, ROMPOINTER_HEIGHT,
	ROMPOINTER_HOTX, ROMPOINTER_HOTY, NULL );
    DP( printf(" returned\n"));

    setMousePointer();	/* IBase->ActiveWindow = NULL means use default pointer */
@


38.8
log
@No longer init's IBase->VerifyTimeoutTotal.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.7 92/02/11 13:38:42 peter Exp Locker: peter $
a44 4
#ifndef GRAPHICS_GFXBASE_H
#include <graphics/gfxbase.h>
#endif

a115 123
/* storage for a 'pheight' tall sprite, two uwords (4 bytes) per row,
 * plus two rows for top and bottom
 */
#define SPR_STORAGE( pheight ) 	(( (pheight) + 2 ) << 2)

/*
 * will reuse data buffer IBase->DefPointer if it's large
 * enough.  Will realloc() if not.  ZZZ: Might want to
 * free a huge pointer buffer if new pointer is half its
 * height or something.
 *
 * Note that initial allocation works if both DefPointer and DefPtrBufSize
 * are zero.
 */
setDefaultPointer( pdata, pheight, hotx, hoty, attached )
UWORD	*pdata;		/* pointer data		*/
int	pheight;	/* pointer height	*/
WORD	hotx;
WORD	hoty;
UWORD	*attached;	/* attached pointer data		*/
{
    struct IntuitionBase	*IBase = fetchIBase();
    UWORD			sprstorage;	/* storage for *one* sprite */
    UWORD			newbuffsize;
    UWORD			*newbuff = NULL;
    UWORD			*oldbuff = NULL;
    UWORD			oldbuffsize;

    DP( printf("pdata %lx, pheight 0x%lx, hotx/y %ld/%ld, attach %lx\n",
	pdata, pheight, hotx, hoty, attached ) );

    /* use this lock to keep setMouse from pointing
     * at free memory
     */
    LOCKVIEW();

    /* allocate enough data for attached sprite and normal
     * one, contiguously.  Note that I calculate and store
     * "larger"
     */
    newbuffsize = (sprstorage = SPR_STORAGE(pheight)) * ( attached? 2:  1 );
    DP( printf("sDIP: pheight %ld, newbuffsize %ld\n", pheight, newbuffsize ));

    /* see if the new pointer will fit in the existing
     * chipmem buffer
     */
    if ( newbuffsize > IBase->DefPtrBufSize )
    {
	DP(printf("sDIP old ht %ld, newht %ld\n", IBase->DefPtrBufSize,pheight));

	if (!(newbuff=AllocMem( newbuffsize, MEMF_PUBLIC+MEMF_CHIP)))
	{
	    DP( printf("failure to get pointer buff ht: %ld\n", pheight ) );
	    goto OUT;	/* failure: stick with old pointer	*/
	}

	/* WARNING: don't free the sprite that's being used
	 * until we've switched over, so remember ...
	 */
	oldbuff =  IBase->DefPointer;
	oldbuffsize = IBase->DefPtrBufSize;
	DP(printf("old buff %lx, oldbuffsize %ld\n",oldbuff,oldbuffsize));

	IBase->DefPointer = newbuff;
	IBase->DefPtrBufSize = newbuffsize;
    }

    /* now I know that there is enough storage for a copy
     * of the new pointer
     */
    CopyMem( pdata, IBase->DefPointer, sprstorage );
    IBase->DefPtrHeight = pheight;
    IBase->DefPtrXOffset = hotx;
    IBase->DefPtrYOffset = hoty;

    if ( attached )
    {
	DP( printf("set up attached sprite.\n") );

	IBase->AttachedSSBuff.posctldata = (UWORD *) 
		(((UBYTE *)IBase->DefPointer)+sprstorage);
	CopyMem( attached, IBase->AttachedSSBuff.posctldata, sprstorage);

	DP( printf("attached sprite at %lx, data at %lx\n",
		&IBase->AttachedSSBuff, 
		IBase->AttachedSSBuff.posctldata ));

	IBase->AttachedSSBuff.posctldata[1] |= SPRITE_ATTACHED;
	IBase->AttachedSSBuff.height = pheight;
	IBase->AttachedSSBuff.x = 0;
	IBase->AttachedSSBuff.y = 0;
	IBase->AttachedSSprite = &IBase->AttachedSSBuff;
    }
    else
    {
	if ( IBase->AttachedSSBuff.posctldata )
	{
	    IBase->AttachedSSBuff.posctldata[1] &= ~SPRITE_ATTACHED;
	}
	IBase->AttachedSSprite = NULL;
    }

OUT:
    DP( printf("sDIP out\n"));
    UNLOCKVIEW();

    DP( printf("1 ") );

    /* use the new pointer, if applicable */
    setMouse( IBase->ActiveWindow );

    DP( printf("2 ") );
    if ( oldbuff )
    {
	DP( printf("3 ") );
	WaitTOF();	/* make damn sure sprite not being used */
	DP( printf("4 ") );
	FreeMem( oldbuff, oldbuffsize );
    }
    DP( printf("sDIP done\n"));
}


d178 1
d185 1
d192 2
a193 2
    /* allocating initial buffer relies on IBase->DefPointer
     * and IBase->DefPtrBufSize both being 0 initially
a194 4
    DP( printf("initial sDIP ...\n"));
    setDefaultPointer( RomPointer, ROMPOINTER_HEIGHT,
	ROMPOINTER_HOTX, ROMPOINTER_HOTY, NULL );
    DP( printf(" returned\n"));
a195 4
    /* IBase->FirstScreen = NULL; */

    setMouse(NULL);	/* no window mean use default pointer */

a224 4
    /*  MEMF_CLEAR * ****
    IBase->ActiveWindow = IBase->ActiveScreen = NULL;
    **** OUT **/

d248 10
d287 2
a288 36
/****** intuition.library/InitRequester *************************************
*
*    NAME
*	InitRequester -- Initialize a Requester structure.
*
*    SYNOPSIS
*	InitRequester( Requester )
*		       A0
*
*	VOID InitRequester( struct Requester * );
*
*    FUNCTION
*	Initializes a requester for general use.  After calling InitRequester,
*	you need fill in only those Requester values that fit your needs.
*	The other values are set to NULL--or zero--states.
*
*	Note that the example in the early versions of the Intuition
*	Reference Manual is flawed because the Requester structure is
*	initialized BEFORE InitRequester is called.  Be sure to
*	perform your initialization AFTER calling InitRequester.
*
*    INPUTS
*	Requester = a pointer to a Requester structure
*
*    RESULT
*	None
*
*    BUGS
*	Since the publication of the first Intuition Manual to this
*	day, most people haven't used this function, and for
*	compatibility reasons, we'll never be able to assume that
*	they do.  Thus, this function is useless.
*
*    SEE ALSO
*	
*****************************************************************************/
@


38.7
log
@Removed some dead code.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.6 92/02/07 11:06:10 peter Exp Locker: peter $
a388 3

#define VERIFYTIMEOUT	(10 * 3)
    IBase->VerifyTimeoutTotal = VERIFYTIMEOUT;
@


38.6
log
@IPointer is now called RomPointer.  Definitions for rom pointer are
now ROMPOINTER_xxx.  IPointer and friends are now DefPointer etc.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.5 91/11/25 16:55:23 peter Exp Locker: peter $
a282 7

#if 0
    /* the Menu and SubMenu structure initializations ... */
    /* The Layer points to the ClipRect */
    IBase->ItemCRect.BitMap = &IBase->IBitMap;
    IBase->SubCRect.BitMap = &IBase->SBitMap;
#endif
@


38.5
log
@Now requires layers and graphics V39.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.4 91/11/15 18:52:21 peter Exp Locker: peter $
d74 1
a74 1
extern USHORT IPointer[];
d126 1
a126 1
 * will reuse data buffer IBase->IPointer if it's large
d131 1
a131 1
 * Note that initial allocation works if both IPointer and IPBufSize
d134 1
a134 1
setDefaultIPointer( pdata, pheight, hotx, hoty, attached )
d166 1
a166 1
    if ( newbuffsize > IBase->IPBufSize )
d168 1
a168 1
	DP(printf("sDIP old ht %ld, newht %ld\n", IBase->IPBufSize,pheight));
d179 2
a180 2
	oldbuff =  IBase->IPointer;
	oldbuffsize = IBase->IPBufSize;
d183 2
a184 2
	IBase->IPointer = newbuff;
	IBase->IPBufSize = newbuffsize;
d190 4
a193 4
    CopyMem( pdata, IBase->IPointer, sprstorage );
    IBase->IPtrHeight = pheight;
    IBase->IXOffset = hotx;
    IBase->IYOffset = hoty;
d200 1
a200 1
		(((UBYTE *)IBase->IPointer)+sprstorage);
d324 2
a325 2
    /* allocating initial buffer relies on IBase->IPointer
     * and IBase->IPBufSize both being 0 initially
d328 2
a329 1
    setDefaultIPointer( IPointer, IPOINTHEIGHT, IPOINTHOTX, IPOINTHOTY, NULL );
@


38.4
log
@ItemCRect.BitMap and SubCRect.BitMap no longer initialized.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.3 91/08/21 18:16:54 peter Exp Locker: peter $
d298 1
a298 1
    IBase->GfxBase = (struct GfxBase *) OpenLibrary("graphics.library",38);
@


38.3
log
@Now require Graphics.library V38.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.2 91/07/10 17:55:41 peter Exp Locker: peter $
d284 1
d289 1
@


38.2
log
@Cleanup of Preferences-related names to improve legibility.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.1 91/06/19 18:04:31 peter Exp Locker: peter $
d296 1
a296 1
    IBase->GfxBase = (struct GfxBase *) OpenLibrary("graphics.library",36);
@


38.1
log
@Removed !EMBOSSME and other obsolete code.
@
text
@d6 1
a6 1
 *  $Id: init.c,v 38.0 91/06/12 14:21:56 peter Exp Locker: peter $
d250 1
a250 1
    extern struct IWBPrefs	DefaultWBPrefs;
d407 1
a407 1
    IBase->LastScreenMode = DefaultWBPrefs;
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: init.c,v 36.44 91/05/16 16:33:22 peter Exp $
a119 94
#if ! EMBOSSME
struct Gadget *transferSysGadget(res, type)
int res;
SHORT type;
{
    struct Gadget *gadget;
    struct Remember *RememberKey;
    extern struct RomGadget RomGadgetDefs[RESCOUNT][GADGETCOUNT];

    RememberKey = NULL;

    DG( printf("in tSG, r/t %ld/%ld\n", res, type) );

    /* ZZZ: no success check	*/
    gadget = (struct Gadget *)allocGadget(&RememberKey);

    DG( printf("gadget %lx, romgadget %lx\n",
	gadget, &RomGadgetDefs[res][type] ) );

    copyRomGadget( gadget, &RomGadgetDefs[ res ][ type ] );

    DG( printf("rom gadget copied:, image: %lx\n", gadget->GadgetRender ) );

    /* patchup screen gadget flags */
    if ( type >= 5 ) gadget->GadgetType |= SCRGADGET;

    /* makeImage() handles NULL image OK */
    gadget->GadgetRender =
	    (struct Image *) makeImage( gadget->GadgetRender );

    FreeRemember(&RememberKey, FALSE);

    DG( printf("out.  gadget %lx\n", gadget) );

    return(gadget);
}


/* uncompress system gadget definitions.
 * assume gadget is cleared out initially
 */
copyRomGadget( g, romg )
struct Gadget *g;
struct RomGadget	*romg;
{
    /* bytes to words */
    g->LeftEdge = romg->l;
    g->TopEdge = romg->t;
    g->Width = romg->w;
    g->Height = romg->h;

    /* Flags */
    g->Flags = romg->relflags;	/* copy GRELBOTTOM type stuff	*/

    if ( romg->type == WDRAGGING || romg->type == SDRAGGING )
    {
	g->Flags |= GADGHNONE;
    }
    else
    {
	g->Flags |= (GADGIMAGE | GADGHCOMP);
    }

    /* type */
    g->GadgetType = SYSGADGET | romg->type;

    /* NOTE: SCRGADGET bit patched up by caller, since I have the 
     *  'wrong' definition of TYPE down here to do it.
     */

    g->Activation = RELVERIFY;	/* not always appropriate, but OK	*/

    DG( printf("cRG: type: %lx, image, %lx\n", romg->type, romg->image ) );

    g->GadgetRender = (APTR) romg->image;
}

#endif	/* ! EMBOSSME */

#if 0
struct Image *transferCheck(res)
{
    return ( makeImage( &RomCheckMarks[res] ) );
}


struct Image *transferAmiga(res)
{
    return ( makeImage( &RomAmigaIcon[res] ) );
}
#endif

#if 1

a241 19
#else

USHORT *transferIPointer()
{
    USHORT *ptr, *tptr;
    int i, i2;

    /* size:
     * 1 + 16 + 2 = data size required for a standard 16-tall sprite
     * shifted once to turn into byte count
     * shifted again for two bit planes
     */
    i = (1 + 16 + 2) << 1;	/* total word count */
    ptr = tptr = (USHORT *)AllocMem(i << 1, MEMF_PUBLIC | MEMF_CHIP);
    for (i2 = 0; i2 < i; i2++) *tptr++ = IPointer[i2];
    return(ptr);

}
#endif
a321 9
#ifdef IOWNTMPRAS
    /* jimm: 4/1/86: tmpras for IBase->RP/MenuRPort */
    IBase->MenuTmpRas.Size = IBase->ITmpRas.Size = ITMPRAS_SIZE;
    IBase->ITmpRas.RasPtr = (BYTE *) AllocMem(ITMPRAS_SIZE,MEMF_CHIP);
    IBase->MenuTmpRas.RasPtr = (BYTE *) AllocMem(ITMPRAS_SIZE,MEMF_CHIP);
#endif


#if 1	/* new pointer manipulation	*/
a327 6
#else
    IBase->IPointer = transferIPointer();
    IBase->IPtrHeight = IPOINTHEIGHT;
    IBase->IXOffset = IPOINTHOTX;
    IBase->IYOffset = IPOINTHOTY;
#endif
a334 4
#if 0	/* no need for these functions	*/
	IBase->CheckImage[i] = transferCheck(i);
	IBase->AmigaIcon[i] = transferAmiga(i);
#else
d337 1
a337 1
#endif
d339 3
a341 17
#if ! EMBOSSME
	for (j = 0; j < GADGETCOUNT; j++)
	    IBase->SysGadgets[i][j] = transferSysGadget(i, j);
#endif
    }

#if 0	/*** !!! jimm thinks these are not necessary,
	 *** since we call SetPrefs() below, which overrides
	 ***/
    IBase->color0 = 0x005A;
    IBase->color1 = 0x0FFF;
    IBase->color2 = 0x0002;
    IBase->color3 = 0x0F80;
    IBase->color17 = 0x0D22;
    /* MEMF_CLEAR ** IBase->color18 = 0x0000; **/
    IBase->color19 = 0x0FCA;
#else
a343 1
#endif
@
