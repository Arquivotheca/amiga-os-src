head     38.0;
branch   ;
access   ;
symbols  V40_85:38.0 V40_71:38.0 V40_68:38.0 V40_65:38.0 V40_47:38.0 V40_45:38.0 V40_37:38.0 V40_34:38.0 V40_29:38.0 V39_2415:38.0 V39_2369:38.0 V39_2339:38.0 V39_2332:38.0 V39_2275:38.0 V39_2256:38.0 V39_2210:38.0 V39_2192:38.0 V39_2084:38.0 V39_2082:38.0 V39_2076:38.0 V39_2073:38.0 V39_2058:38.0 V39_2051:38.0 V39_2031:38.0 V39_2017:38.0 V39_2012:38.0 V39_1985:38.0 V39_1933:38.0 V39_1819:38.0 V39_1805:38.0 V39_1783:38.0 V39_1695:38.0 V39_1621:38.0 V39_1620:38.0 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.0
date     91.06.12.14.14.54;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@
*  $Id: classface.asm,v 1.5 90/04/19 15:49:26 jimm Exp $

	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'

	INCLUDE 'utility/hooks.i'

	;INCLUDE 'intuall.i'		; TEST TEST TEST 

	xref	_Debug

	xdef	_CM
	xdef	_CoerceMessage
	xdef	_SM
	xdef	_SendMessage
	xdef	_SSM
	xdef	_SendSuperMessage

*
* C interface to message sending
* CM( a0: cl, a2: o, a1: msg )
*
_CM:
	move.l	a2,-(a7)	; rely on a6 being preserved
	movem.l	8(sp),a0/a2	; get class and object
	move.l	a2,d0
	beq.s	cmnullreturn
	move.l	a0,d0
	beq.s	cmnullreturn
	move.l	16(sp),a1	; get msg
	; --- registers ready, now call hook

invoke: ; --- performs call and restores a2
	pea.l	cmreturn(pc)
	move.l	h_Entry(a0),-(sp)
	rts
cmnullreturn:
	moveq.l	#0,d0
cmreturn:
	move.l	(sp)+,a2
	rts
	
*
* C interface to message sending
* CoerceMessage( cl, o, arg1, arg2, arg3 )
*
_CoerceMessage:
	move.l	a2,-(a7)	; rely on a6 being preserved
	movem.l	8(sp),a0/a2	; get hook and object
	move.l	a2,d0
	beq.s	cmnullreturn
	move.l	a0,d0
	beq.s	cmnullreturn
	lea	16(sp),a1	; varargs version
	; --- registers ready, now call hook
	bra.s	invoke(pc)
	; ----- don't return here

* SM( o, msg )
_SM:
	move.l	a2,-(a7)	; rely on a6 being preserved
	move.l	8(sp),a2	; object
	move.l	a2,d0
	beq.s	cmnullreturn
	move.l	12(sp),a1	; message
	move.l	-4(a2),a0	; object class precedes object data

	bra.s	invoke(pc)	; will cleanup a2
	; ----- don't return here

* SendMessage( o, arg1, arg2, ... )
_SendMessage:
	move.l	a2,-(a7)	; rely on a6 being preserved
	move.l	8(sp),a2	; object
	move.l	a2,d0
	beq.s	cmnullreturn
	lea	12(sp),a1	; message
	move.l	-4(a2),a0	; object class precedes object data

	bra.s	invoke(pc)	; will cleanup a2
	; ----- don't return here

* SSM( cl, o, msg )
_SSM:
	move.l	a2,-(a7)	; rely on a6 being preserved
	movem.l	8(sp),a0/a2	; class, object
	move.l	16(sp),a1	; message
	move.l	h_SIZEOF+4(a0),a0	; substitute superclass

	bra.s	invoke(pc)	; will cleanup a2
	; ----- don't return here

* SendSuperMessage( cl, o, arg1, arg2 )
_SendSuperMessage:
	move.l	a2,-(a7)	; rely on a6 being preserved
	movem.l	8(sp),a0/a2	; class, object
	lea	16(sp),a1	; message
	move.l	h_SIZEOF+4(a0),a0	; substitute superclass

	bra.s	invoke(pc)	; will cleanup a2
	; ----- don't return here


	end

@
