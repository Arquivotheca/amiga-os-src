head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.10 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.10 V39_2082:38.10 V39_2076:38.10 V39_2073:38.10 V39_2058:38.10 V39_2051:38.10 V39_2031:38.10 V39_2017:38.10 V39_2012:38.10 V39_1985:38.10 V39_1933:38.10 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.9 V39_1621:38.9 V39_1620:38.9 V39_1508:38.9 V39_1485:38.9 V39_1461:38.9 V39_1458:38.9 V39_1456:38.9 V39_1405:38.9 V39_1368:38.9 V39_1360:38.9 V39_1324:38.9 V39_1147:38.9 V39_1143:38.9 V39_1141:38.9 V39_1120:38.8 V39_1116:38.8 V39_1104:38.8 V39_1100:38.8 V39_1078:38.7 V39_1073:38.7 V39_757:38.5 V39_702:38.4 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.3 V39_495:38.3 V39_416:38.3 V39_383:38.3 V39_371:38.3 V39_336:38.3 V39_323:38.3 V39_295:38.3 V39_277:38.3 V39_254:38.3 V39_222:38.3 V39_185:38.3 V39_171:38.3 V39_161:38.3 V38_159:38.3 V38_116:38.3 V38_59:38.3;
locks    ; strict;
comment  @*   @;


38.11
date     93.01.14.14.30.25;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.17.17.28.22;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.05.01.13.53.51;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.04.13.16.24.14;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.04.07.17.55.01;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.02.12.06.05;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.26.16.38.33;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.19.10.54.21;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.10.17.59.01;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.06.19.18.06.02;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.12.15.12.13;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.27.32;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@newlookProp() now a #define, not a function.
@
text
@
/*** newlook.c ***************************************************************
 *
 *  newlook.c -- new embossed window borders and fancy system gadgets
 *
 *  $Id: newlook.c,v 38.10 92/07/17 17:28:22 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#define DEMB(x)	;
#define DSG(x)	;	/* gadgets */

#include "intuall.h"
#include "classusr.h"
#include "gadgetclass.h"
#include "imageclass.h"
#include "newlook.h"
#include <graphics/gfxmacros.h>

	/* changes feb 8, 1990 */
/* "hard-coded" color scheme	*/
UWORD	fourColorPens[ NUMDRIPENS + 1] =  {
    0,		/* DETAILPEN	*/
    1,		/* BLOCKPEN	*/

    1,		/* TEXTPEN	*/
    2,		/* SHINEPEN	*/
    1,		/* SHADOWPEN	*/
    3,		/* FILLPEN	*/
    1,		/* FILLTEXTPEN	*/
    0,		/* BACKGROUNDPEN	*/
    2,		/* HIGHLIGHTTEXTPEN	*/
    1,		/* BARDETAILPEN	*/
    2,		/* BARBLOCKPEN	*/
    1,		/* BARTRIMPEN	*/

    ~0,	/* terminator	*/
};


UWORD	twoColorPens[ NUMDRIPENS + 1] =  {
    0,		/* DETAILPEN	*/
    1,		/* BLOCKPEN	*/

    1,		/* TEXTPEN	*/
    1,		/* SHINEPEN	*/
    1,		/* SHADOWPEN	*/
    1,		/* FILLPEN	*/
    0,		/* FILLTEXTPEN	*/
    0,		/* BACKGROUNDPEN	*/
    1,		/* HIGHLIGHTTEXTPEN	*/
    0,		/* BARDETAILPEN	*/
    1,		/* BARBLOCKPEN	*/
    1,		/* BARTRIMPEN	*/

    ~0,	/* terminator	*/
};


/* jump (TAG_MORE) to these after GA_IMAGE */
/* gadget width/height gotten from imag	*/

struct TagItem	sdragtags[] = {
    GA_LEFT,		0,
    GA_TOP,		0,
    GA_HEIGHT,		1,	/* will make taller */
    GA_RELWIDTH,	0,
    GA_SYSGTYPE,	SDRAGGING,
    TAG_END,
};

struct TagItem	wdragtags[] = {
    GA_LEFT,		0,
    GA_TOP,		0,
    GA_HEIGHT,		1,	/* will make taller */
    GA_RELWIDTH,	0,
    GA_SYSGTYPE,	WDRAGGING,
    TAG_END,
};

struct TagItem	closetags[] = {
    GA_LEFT,		0,
    GA_TOP,		0,
    GA_SYSGTYPE,	CLOSE,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};


struct TagItem	zoomtags[] = {
    GA_RELRIGHT,	ZOOMRELRIGHT,
    GA_TOP,		0,
    GA_SYSGTYPE,	WZOOM,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	depthtags[] = {
    GA_RELRIGHT,	DEPTHRELRIGHT,
    GA_TOP,		0,
    GA_SYSGTYPE,	WUPFRONT,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	sdepthtags[] = {
    GA_RELRIGHT,	DEPTHRELRIGHT,	/* aligned with window's depthg */
    GA_TOP,		0,
    GA_SYSGTYPE,	SUPFRONT,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	sizetags[] = {
    GA_RELRIGHT,	-17,
    GA_RELBOTTOM,	-9,
    GA_SYSGTYPE,	SIZING,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	lclosetags[] = {
    GA_LEFT,		0,
    GA_TOP,		0,
    GA_SYSGTYPE,	CLOSE,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	lzoomtags[] = {
    GA_RELRIGHT,	LZOOMRELRIGHT,
    GA_TOP,		0,
    GA_SYSGTYPE,	WZOOM,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	ldepthtags[] = {
    GA_RELRIGHT,	LDEPTHRELRIGHT,
    GA_TOP,		0,
    GA_SYSGTYPE,	WUPFRONT,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	lsdepthtags[] = {
    GA_RELRIGHT,	LDEPTHRELRIGHT,
    GA_TOP,		0,
    GA_SYSGTYPE,	SUPFRONT,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};


struct TagItem	lsizetags[] = {
    GA_RELRIGHT,	-12,
    GA_RELBOTTOM,	-10,
    GA_SYSGTYPE,	SIZING,
    GA_RELVERIFY,	TRUE,
    TAG_END,
};

struct TagItem	*gtaglists[][2] = {
    {depthtags,ldepthtags},
    {zoomtags,lzoomtags},	/* also old "downback"		*/
    {sizetags,lsizetags},
    {closetags,lclosetags},
    {wdragtags,wdragtags},		/* wdrag		*/
    {sdepthtags,lsdepthtags},		/* sdepth/upfront	*/
    {NULL,NULL},			/* sdownback (obsolete)	*/
    {sdragtags,sdragtags},		/* sdrag		*/
};

struct Gadget	*
createNewSysGadget( s, res, gindex, gimme )
struct XScreen	*s;
USHORT res, gindex;
BOOL gimme;
{
    struct Image	*getScreenSysImage();
    struct Gadget	*copySysGadget();
    struct Gadget 	*g = NULL;
    struct TagItem	*gtags;
    void		*NewObject();
    ClassID		classid;
    extern UBYTE	*GadgetClassName;
    extern UBYTE	*ButtonGClassName;
    struct Image	*gimage;

    /* Most sys-gadgets are buttongclass */
    classid = ButtonGClassName;
    if ( gindex == DRAGGADGET || gindex == SDRAGGADGET )
    {
	/* except for the drag gadgets */
	classid = GadgetClassName;
    }

    DSG( printf("createNSG s %lx, res %lx, gindex %lx, gimme %lx class %s\n",
	s, res, gindex, gimme, classid ) );

    /* if I have tags defined, then I want to use a boopsi gadget */
    if ( gtags = gtaglists[ gindex ][ res ] )
    {
	DSG( printf("get new gadget for index %lx and tags %lx\n",
		gindex, gtags ) );
	DSG( printf(" image at %lx\n", s->SysImages[ gindex ] ) );

	/* select image from XScreen array of images */
	if ( ( gimage = getScreenSysImage( s, gindex ) ) != ((struct Image *)-1) )
	{
	    g = (struct Gadget *) NewObject( NULL, classid, 
		    /* use "create-as-needed" sys images	*/
		    GA_IMAGE, gimage,
		    GA_GZZGADGET, gimme,
		    GA_SYSGADGET, TRUE,
		    GA_GadgetHelp, TRUE,
		    TAG_MORE, gtags );

	    DSG( printf("result: %lx\n", g ) );
	}
    }

    return( g );	/* returns NULL if no tags specified */
}

/* 
 * returns per-screen system image, or creates it if:
 *	- it doesn't exist, and
 *	- it's not a draggadget or otherwise invisible
 *
 * Returns -1 if there's an error.
 */
struct Image	*
getScreenSysImage( s, gindex )
struct Screen	*s;
{
    int imsize;
    extern UBYTE	*SysIClassName;
    struct Image	**sysimg;

    /* invisible gadgets	*/
    if ( gindex == DRAGGADGET || gindex == SDRAGGADGET ) return ( NULL );

    /* The sysimsg pointer saves ROM space */
    sysimg = &XSC(s)->SysImages[ gindex ];

    /* create an image if not already created	*/
    if ( *sysimg == NULL )
    {
	imsize = SYSISIZE_LOWRES;
	if ( IsHires( s ) )
	{
	    imsize = SYSISIZE_MEDRES;
	}


	if ( !( *sysimg = NewObject( NULL, SysIClassName,
	    /* sysiclass uses this BarHeight, if relevant.
	     * SYSIA_Size default comes from DrawInfo
	     */
	    IA_HEIGHT,	s->BarHeight + 1,
	    SYSIA_DrawInfo,	&( XSC(s)->SDrawInfo ),
	    SYSIA_Which,	 gindex, 
	    TAG_END ) ) )
	{
	    /* Peter 25-Jan-91: Return code for error */
	    return( (struct Image *) -1 );
	}
    }
    return ( *sysimg );
}

#define VARIABLE_THICKNESS 0

/* Peter 23-Mar-92
 * Martin gave me a brand-new embossedBoxTrim() that handles
 * variable thickness and GadTools style bevelled corners.
 *
 * I took out thickness support except hthick can be 1 or 2.
 * My version also infers hthick = 2 if join-type is JOINS_ANGLED.
 * Otherwise, hthick is 1.
 *
 * behavior at "joins" in upper-right and lower-left corners
 * is controlled by value of 'meeting_type':
 * JOINS_UPPER_LEFT_WINS (0) - The color used to render the upper and left
 *	sides of the box is used in the joins.
 * JOINS_LOWER_RIGHT_WINS (1) - The color used to render the lower and right
 *	sides of the box is used in the joins.
 * JOINS_NONE (2) - The joins are not rendered.
 * JOINS_ANGLED (3) - The joins are angled, in the style that GadTools uses.
 */
#if !VARIABLE_THICKNESS

VOID
embossedBoxTrim( rp, b, ulpen, lrpen, meeting_type )
struct RastPort *rp;
struct IBox *b;
ULONG ulpen;
ULONG lrpen;
ULONG meeting_type;
{
    LONG left, top, bottom, right;
    LONG scum1, scum2, scum3, scum4;	/*dave is scum */
    ULONG hthick = 1;
    LONG i;

    if ((b->Width > 0) && (b->Height > 0))
    {
	scum1 = 1;
	scum2 = 1;
	scum3 = 1;
	scum4 = 1;

	switch ( meeting_type )
	{
	    case JOINS_UPPER_LEFT_WINS:
		scum1 = scum2 = 0;
		break;

	    case JOINS_LOWER_RIGHT_WINS:
		scum3 = scum4 = 0;
		break;

	    case JOINS_ANGLED:
		scum2 = scum3 = 0;
		hthick = 2;
		break;

#if 0
	    case_JOINS_NONE:
#endif
	    default:
		break;
	}

	left   = b->Left;
	top    = b->Top;
	right  = boxRight(b);
	bottom = boxBottom(b);

	SetABPenDrMd(rp, ulpen, 0, JAM1);
	BNDRYOFF( rp );
	SetAfPt( rp, NULL, 0 );

	/* top edge */
	RectFill(rp,left,top,right-scum1,top);

	/* left edge */
	for (i = 0; i < hthick; i++)
	{
	    RectFill(rp,left+i,top+1,left+i,bottom-scum2);
	    scum2 = 1;
	}

	SetAPen(rp,lrpen);

	/* right edge */
	for (i = 0; i < hthick; i++)
	{
	    RectFill(rp,right-i,top+scum3,right-i,bottom-1);
	    scum3 = 1;
	}

	/* bottom edge */
	RectFill(rp,left+scum4,bottom,right,bottom);
    }
}

#else /* variable thickness version */

VOID
embossedBoxTrim( rp, b, hthick, vthick, ulpen, lrpen, meeting_type )
struct RastPort *rp;
struct IBox *b;
ULONG hthick;
ULONG vthick;
ULONG ulpen;
ULONG lrpen;
ULONG meeting_type;
{
    LONG left, top, bottom, right;
    LONG cnt;
    LONG scum1, scum2, scum3, scum4;	/*dave is scum */
    LONG i;

    if ((b->Width > 0) && (b->Height > 0))
    {
	scum1 = 1;
	scum2 = 1;
	scum3 = 1;
	scum4 = 1;

	switch ( meeting_type )
	{
	    case JOINS_UPPER_LEFT_WINS:
		scum1 = scum2 = 0;
		break;

	    case JOINS_LOWER_RIGHT_WINS:
		scum3 = scum4 = 0;
		break;

	    case JOINS_ANGLED:
		scum2 = scum3 = 0;
		break;

#if 0
	    case_JOINS_NONE:
#endif
	    default:
		break;
	}

	left   = b->Left;
	top    = b->Top;
	right  = boxRight(b);
	bottom = boxBottom(b);

	SetAPen(rp,ulpen);

	/* top edge */
	cnt = scum1;
	for (i = 0; i < vthick; i++)
	{
	    RectFill(rp,left,top+i,right-cnt,top+i);

	    if (cnt < hthick)
		cnt++;
	}

	/* left edge */
	cnt = scum2;
	for (i = 0; i < hthick; i++)
	{
	    RectFill(rp,left+i,top+vthick,left+i,bottom-cnt);

	    if (cnt < vthick)
		cnt++;
	}

	SetAPen(rp,lrpen);

	/* right edge */
	cnt = scum3;
	for (i = 0; i < hthick; i++)
	{
	    RectFill(rp,right-i,top+cnt,right-i,bottom-vthick);

	    if (cnt < vthick)
		cnt++;
	}

	/* bottom edge */
	cnt = scum4;
	for (i = 0; i < vthick; i++)
	{
	    RectFill(rp,left+cnt,bottom-i,right,bottom-i);

	    if (cnt < hthick)
		cnt++;
	}
    }
}
#endif



/* return width/height border requirements for
 * sizing gadget used in windows of specified screen
 *
 * these dimensions are compatible: width is old sizing gadget + 2,
 * height is old sizeg height + 1.
 */
getSizeGDims( sc, dims )
struct Screen	*sc;
UWORD		dims[2];
{
    if ( IsHires( sc ) )
    {
	dims[0] = 18;	/* width */
	dims[1] = 10;
    }
    else
    {
	dims[0] = 13;	/* width */
	dims[1] = 11;
    }
}
@


38.10
log
@SYSIA_Size default now comes from DrawInfo.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.9 92/05/01 13:53:51 peter Exp Locker: peter $
a175 11

/*
 * returns non-zero if prop gadget is a
 * newlook rendered guy
 */
newlookProp( g, gi )
struct Gadget		*g;
struct GadgetInfo	*gi;
{
    return ( ((struct PropInfo *)g->SpecialInfo)->Flags & PROPNEWLOOK );
}
@


38.9
log
@All system gadgets now set GadgetHelp.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.8 92/04/13 16:24:14 peter Exp Locker: peter $
d272 3
a274 1
	    /* (x)sysiclass uses this BarHeight, if relevant */
a275 1
	    SYSIA_Size,  	imsize,
@


38.8
log
@Removed unneeded TAG_END.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.7 92/04/07 17:55:01 peter Exp Locker: peter $
d230 1
@


38.7
log
@Removed unused vble.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.6 92/04/02 12:06:05 peter Exp Locker: peter $
d230 1
a230 2
		    TAG_MORE, gtags,
		    TAG_END );
@


38.6
log
@embossedBoxTrim() uses JAM1.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.5 92/03/26 16:38:33 peter Exp Locker: peter $
a194 1
    struct IntuitionBase *IBase = fetchIBase();
d199 1
a199 1
    ClassID		*classid;
@


38.5
log
@New embossedBoxTrim() from Martin.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.4 92/03/19 10:54:21 peter Exp Locker: peter $
d355 1
a355 1
	SetABPenDrMd(rp, ulpen, 0, JAM2);
@


38.4
log
@No longer tries xsysiclass first.  No longer passes SYSISIZE_HIRES to
sysiclass, since the standard system gadgets created here don't
distinguish between SYSISIZE_HIRES and _MEDRES.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.3 91/07/10 17:59:01 peter Exp Locker: peter $
d21 1
d287 1
d289 8
a296 1
/*
d299 6
a304 3
 *	0: joins same color as upper left
 *	1: joins same color as lower right
 *	2: joins not drawn
d306 80
d387 7
a393 2
struct RastPort	*rp;
struct IBox	*b;
d395 4
a398 2
    int	bottom, right;
    int	scum1, scum2, scum3, scum4;	/*dave is scum */
a399 4
    /* Peter 13-Oct-90:
     * Don't draw for degenerate boxes.  Makes title-bar height
     * tiny-windows look sharp.
     */
d402 4
a405 1
	/* 3 types of meeting scum	*/
d409 3
a411 13
	case 0:	/* upper-left edges win battle for URC and LLC	*/
	    scum1 = 0;
	    scum2 = 0;
	    scum3 = hthick;
	    scum4 = vthick;
	    break;

	case 1:	/* upper-left edges win battle for URC and LLC	*/
	    scum1 = hthick;
	    scum2 = vthick;
	    scum3 = 0;
	    scum4 = 0;
	    break;
d413 8
d422 1
a422 1
	case 2:	/* nobody draws in URC/LRC	*/
d424 41
a464 3
	default:
	    scum3 = scum1 = hthick;
	    scum4 = scum2 = vthick;
d467 5
a471 12
	bottom = boxBottom( b );
	right = boxRight( b );

	/* upper left edges	*/
	SetAPen( rp, ulpen );

	Move( rp, b->Left, bottom - scum1 );
	Draw( rp, b->Left, b->Top );
	Draw( rp, right - scum2, b->Top );

	/* lower right edges	*/
	SetAPen( rp, lrpen );
d473 3
a475 3
	Move( rp, right, b->Top + scum3 );		/* drop by thickness */
	Draw( rp, right, bottom );
	Draw( rp, b->Left + scum4, bottom );
d478 3
@


38.3
log
@Reversed bar-pens for monochrome.  Added BARTRIMPEN.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.2 91/06/19 18:06:02 peter Exp Locker: peter $
a251 3
    ClassID	classid;
    int	attempt;
    extern UBYTE	*XSysIClassName;
d267 1
a267 1
	    imsize = (s->BarHeight >= 22)? SYSISIZE_HIRES: SYSISIZE_MEDRES;
a269 18
	/** try alternative image class  **/
	for ( attempt = 0; attempt < 2; ++attempt )
	{
	    /* try the "exteral" version of sysiclass first	*/
	    classid = (attempt==0)? XSysIClassName: SysIClassName;

	    if ( *sysimg = NewObject( NULL, classid,
		/* (x)sysiclass uses this BarHeight, if relevant */
		IA_HEIGHT,	s->BarHeight + 1,
		SYSIA_Size,  	imsize,
		SYSIA_DrawInfo,	&( XSC(s)->SDrawInfo ),
		SYSIA_Which,	 gindex, 
		TAG_END ) )
	    {
		/* stop, if you got an image */
		break;
	    }
	}
d271 7
a277 1
	if (*sysimg == NULL)
d281 1
a281 1
	}	
a282 1

@


38.2
log
@Removed !EMBOSSME and other obsolete code.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 38.1 91/06/12 15:12:13 peter Exp Locker: peter $
d24 1
a24 1
UWORD	fourColorPens[ numDrIPens + 1] =  {
d37 1
d43 1
a43 1
UWORD	twoColorPens[ numDrIPens + 1] =  {
d54 3
a56 2
    1,		/* BARDETAILPEN	*/
    0,		/* BARBLOCKPEN	*/
@


38.1
log
@Enabled NewLook titlebar.
Extended the default pen arrays to account for the new pens.
@
text
@d6 1
a6 1
 *  $Id: newlook.c,v 1.24 91/01/26 01:23:23 peter Exp Locker: peter $
a12 2
#if EMBOSSME

a59 18
#if 0 	/* using "sysiclass"	*/
struct TagItem	imagetags[] = {
    IA_WIDTH,	14,
    IA_HEIGHT,	7,
    IA_LINEWIDTH, 1,

    TAG_END
};

struct TagItem	loresimagetags[] = {
    IA_WIDTH,	9,
    IA_HEIGHT,	7,
    IA_LINEWIDTH, 1,

    TAG_END
};
#endif

a114 1
#if 1
a116 4
#else
    GA_RELRIGHT,	-15,
    GA_RELBOTTOM,	-8,
#endif
a155 1
#if 1
a157 4
#else
    GA_RELRIGHT,	-10,
    GA_RELBOTTOM,	-8,
#endif
a386 2

#endif	/* EMBOSSME	*/
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@a1 1

d6 1
a6 1
 *  $Id: newlook.c,v 1.24 91/01/26 01:23:23 peter Exp $
d27 2
a28 14
    0,		/* detail	*/
    1,		/* block	*/

    1,		/* text		*/
    2,		/* shine	*/
    1,		/* shadow	*/
    3,		/* hifill	*/
    1,		/* hifilltext	*/
    0,		/* background	*/
    2,		/* hilighttextPen	*/
#ifdef NEWLOOK_TITLEBAR
    2,		/* sbarfillPen	*/
    1,		/* sbartextPen	*/
#endif
d30 9
d45 12
a56 2
    0,		/* detail	*/
    1,		/* block	*/
a57 11
    1,		/* text		*/
    1,		/* shine	*/
    1,		/* shadow	*/
    1,		/* hifill	*/
    0,		/* hitfillext	*/
    0,		/* background	*/
    1,		/* hilighttextPen	*/
#ifdef NEWLOOK_TITLEBAR
    1,		/* sbarfillPen	*/
    0,		/* sbartextPen	*/
#endif
@
