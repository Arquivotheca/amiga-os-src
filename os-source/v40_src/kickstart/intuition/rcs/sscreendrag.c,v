head     38.15;
branch   ;
access   ;
symbols  V40_85:38.15 V40_71:38.15 V40_68:38.15 V40_65:38.15 V40_47:38.15 V40_45:38.15 V40_37:38.15 V40_34:38.15 V40_29:38.15 V39_2415:38.15 V39_2369:38.14 V39_2339:38.13 V39_2332:38.12 V39_2275:38.12 V39_2256:38.12 V39_2210:38.12 V39_2192:38.11 V39_2084:38.11 V39_2082:38.11 V39_2076:38.11 V39_2073:38.11 V39_2058:38.11 V39_2051:38.11 V39_2031:38.11 V39_2017:38.11 V39_2012:38.11 V39_1985:38.11 V39_1933:38.11 V39_1819:38.11 V39_1805:38.11 V39_1783:38.11 V39_1695:38.11 V39_1621:38.10 V39_1620:38.10 V39_1508:38.9 V39_1485:38.9 V39_1461:38.9 V39_1458:38.9 V39_1456:38.9 V39_1405:38.9 V39_1368:38.9 V39_1360:38.9 V39_1324:38.9 V39_1147:38.9 V39_1143:38.9 V39_1141:38.9 V39_1120:38.9 V39_1116:38.9 V39_1104:38.9 V39_1100:38.9 V39_1078:38.9 V39_1073:38.9 V39_757:38.7 V39_702:38.7 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.2 V39_495:38.2 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.15
date     93.01.14.14.24.02;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     93.01.08.14.49.39;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.12.14.18.02.59;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.11.20.18.33.02;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.07.07.15.25.01;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.06.29.10.48.02;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.07.17.59.13;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.04.02.12.08.29;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.21.14.55.36;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.19.15.56.04;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.19.10.55.53;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.18.11.51.40;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.03.16.36.11;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.20.12.18.31;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.02.17.17.18.39;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.32.58;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.15
log
@Added itMODIFYPROP.
@
text
@/*** sscreendrag.c *********************************************************
 *
 * sScreenDrag state processing
 *
 *  $Id: sscreendrag.c,v 38.14 93/01/08 14:49:39 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"
#include "preferences.h"

#define D(x)	;
#define DSD(x)	;

/* state sScreenDrag
 *
 * global data used:
 *
 * local state data:
 */


/* transition startScreenDrag()
 * called by:
 *	sGadget		- screen drag gadget
 *	lots of others	- itMETADRAG
 * with state data:
 *	ActiveScreen
 * description:
 *
 * note: sdreturn function responsible for turning off drag gadget
 */
startScreenDrag( sdreturn )
int	(*sdreturn)();
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Screen		*hitScreen();
    struct Screen		*dragscreen;

    D( printf("transition function startScreenDrag, cstate: %ld\n", 
	IBase->CurrentState ));

    DSD( printf("screendrag state starting, command %ld, HitScreen %lx\n",
	IT->it_Command, IBase->HitScreen) );

    /* if METADRAG: make sure mouse is over a screen */
    /* Peter 12-Oct-90: hitScreen() now establishes IBase->HitScreen */
    if ( (  IT->it_Command == itMETADRAG )
	&& !(hitScreen()))
    {
	D( printf("sSD bailing out because mouse not on screen\n"));
	(*sdreturn)();
	return;
    }

    DSD( printf("HitScreen after MetaDrag test %lx\n", IBase->HitScreen ));

    dragscreen = IBase->HitScreen;
    /* If you try to drag a "non-draggable" child screen, that's like
     * dragging the parent.
     */
    if ( ( !TESTFLAG( XSC(dragscreen)->PrivateFlags, PSF_DRAGGABLE ) ) &&
    	( XSC(dragscreen)->ParentScreen ) )
    {
	dragscreen = XSC(dragscreen)->ParentScreen;
    }

    IBase->DragScreen = dragscreen;

    /* save original coordinates and stuff */
    SETFLAG( IBase->Flags, INMOUSELIMITS );

    /* Set up mouse limits to ensure legal screen position results.
     * We request that screenLegalPosition() always bound the bottom
     * since child screens default to unbounded, and we don't want
     * the user to be able to shove a child screen off the bottom
     * by dragging the child screen itself.
     */
    /* this limitation keeps coords in dclip range so no overflow 
     * when converted to mouse coords
     * NO WAIT: no they don't!
     */
    /* now return in screen coords	*/
    screenLegalPosition( dragscreen, &IBase->MouseLimits, SPOS_BOUNDEDBOTTOM );

    DSD( dumpRect("GSDRAG: legal position (screen coords):",
	&IBase->MouseLimits) );

    /* account for offset of mouse from screen origin	*/
    offsetRect( &IBase->MouseLimits,
	dragscreen->MouseX, dragscreen->MouseY);
    DSD( dumpRect("GSDRAG: offset screen mouse limits:",&IBase->MouseLimits));

    /* convert mouse limits to mouse coordinates	*/
    /* note limits above are dclip limited so this won't blow up	*/
    /* ZZZ: NO THEY'RE NOT!  need some work here	*/
    scaleScreenMouse( &IBase->MouseLimits, dragscreen );
    DSD(  dumpRect("GSDRAG: mouse limits:", &IBase->MouseLimits) );

    /* keep old/new point in screen mouse coords.	*/
    IBase->OldPt.X = dragscreen->MouseX;
    IBase->OldPt.Y = dragscreen->MouseY;
    DSD( dumpPt("original point, screen coords", IBase->OldPt) );

    IBase->SDragReturn = sdreturn;
    IBase->CurrentState = sScreenDrag;
}


/*
 * state dispatcher
 * state transitions called:
 */
dScreenDrag()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;

    switch ( IT->it_Command )
    {
    /* screen drag over: return to previous state */
    case itSELECTUP:	/* end dragging */
	CLEARFLAG( IBase->Flags, INMOUSELIMITS );
	/* restore default mouse travel limitations,
	 * and force mouse back into a legal position.
	 */
	freeMouse();
	updateMousePointer(NULL);
        (*IBase->SDragReturn)();
	return;

    case itMOUSEMOVE:	/* move the screen */
    /* duplicates everything from doDefault() except
     * autoScroll();
     */
#if 1
	IBase->LongMouse.LX += IT->it_LongMouse.LX;
	IBase->LongMouse.LY += IT->it_LongMouse.LY;
	updateMousePointer(NULL);
#else
	doDefault();
#endif
    	screenDrag();	/* below	*/
	return;

    case itSETREQ:	/* defer: can't handle possible state change */
    case itCLEARREQ:	/* defer: can't handle possible state change */
    case itCLOSEWIN:	/* defer */
    case itDEPTHSCREEN:	/* defer */
    case itOPENSCREEN:	/* defer */
    case itCLOSESCREEN:	/* defer */
    case itMOVESCREEN:	/* defer (was skip prior to 3.01) */
    	deferToken();
	return;

    /*** ZZZ: double check default processing	***/
#if 0
    case itMENUDOWN:	/* do default */
    case itMENUUP:	/* do default */
    case itSELECTDOWN:	/* do default */
    case itRAWKEY:	/* do default */
    case itTIMER:	/* do default */
    case itDISKCHANGE:	/* do default */
    case itACTIVATEWIN:	/* do default (swallow: can't handle state change) */
    case itACTIVATEGAD:	/* do default */
    case itMETADRAG:	/* do default */
    case itOPENWIN:	/* do default */
    case itVERIFY:	/* do default */
    case itREMOVEGAD:	/* do default */
    case itSETMENU:	/* do default */
    case itCLEARMENU:	/* do default */
    case itCHANGEWIN:	/* do default */
    case itZOOMWIN:	/* do default */
    case itDEPTHWIN:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itCHANGESCBUF:	/* do default */
    case itCOPYSCBUF:	/* do default */
    case itSETPOINTER:	/* do default */
    case itGADGETMETHOD:/* do default */
    case itMODIFYPROP:	/* do default */
#endif
    default:		/* itDEFAULT: do default */
	doDefault();
    }
}

/*
 * for now, can assume we're looking at MOUSEMOVE
 *
 * Let's discuss a bit what happens during screen-drag:
 * itMOUSEMOVE updates IBase->LongMouse based on the input-event,
 * then calls updateMousePointer(NULL), which ensures LongMouse
 * fits into legal mouse limits (note that the legal limits are
 * expanded during drag-state).  uMP() also calls screenMouse()
 * for each screen and windowMouse() for each window.  The
 * sprite is then positioned based on that screen's MouseX/Y and
 * the sprite scaling/hot-spot stuff.
 *
 * We arrive here with the mouse moved but the screen not yet moved.
 * This appears as a difference between dragscreen->Mouse and
 * IBase->OldPt.  We move the screen by that amount.
 */
screenDrag()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Screen		*dragscreen = IBase->DragScreen;
    struct Point	delta;

    /* calc delta from coords prev. in screen mouse coords	*/
    delta.X = dragscreen->MouseX - IBase->OldPt.X;
    delta.Y = dragscreen->MouseY - IBase->OldPt.Y;

    if (delta.X || delta.Y)
    {
	DSD( printf("new point, mouse coords %ld,%ld\n", IBase->LongMouse.LX,
	    IBase->LongMouse.LY ) );
	DSD( dumpPt("screen drag delta", delta) );

	DSD( printf("IMoveScreen( %lx, %ld, %ld )\n",
		dragscreen, delta.X, delta.Y ) );

	IMoveScreen( dragscreen, &delta, 0 );

	/* In screen coordinates, after MoveScreen(),
	 * mouse should always be in same position.
	 * ... so we don't need this:
	 * IBase->OldPt = dragscreen->MouseX/Y;
	 */
    }
}
@


38.14
log
@itMOVESCREEN is now deferred, not ignored.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.13 92/12/14 18:02:59 peter Exp Locker: peter $
d186 1
@


38.13
log
@Removed unneeded #define.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.12 92/11/20 18:33:02 peter Exp Locker: peter $
d157 1
a159 4

    /* should I swallow this one? (relative move) */
    case itMOVESCREEN:		/* no, skip	*/
    	return;
@


38.12
log
@When setting up screen-drag mouse-limits, now requests the screen
limits to be always bounded on the bottom.  (Needed due to the fact
that child screens are now unbounded on the bottom by default).
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.11 92/07/07 15:25:01 peter Exp Locker: peter $
a18 3

/*#define WILD_DRAG_OK	TESTFLAG( IBase->Preferences->EnableCLI, SCREEN_DRAG)*/
#define WILD_DRAG_OK	(1)
@


38.11
log
@itGADGETMETHOD does default.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.10 92/06/29 10:48:02 peter Exp Locker: peter $
d81 6
a86 1
    /* set up mouse limits to insure legal screen position results	*/
d92 1
a92 1
    screenLegalPosition( dragscreen, &IBase->MouseLimits, 0 );
@


38.10
log
@IToken mouse coordinates now longs.  Now uses IBase->LongMouse.  Minor
optimization.  Autoscroll change requires that we revalidate mouse
position after having restored regular mouse limits.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.9 92/04/07 17:59:13 peter Exp Locker: peter $
d186 1
@


38.9
log
@Handles itSETPOINTER token.  Calls updateMousePointer() with NULL.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.8 92/04/02 12:08:29 peter Exp Locker: peter $
d99 1
a99 1
    /* NO THEY'RE NOT!  need some work here	*/
d127 5
a131 1
	freeMouse();	/* relax mouse limitations */
d140 2
a141 2
	IBase->Mouse.X += IT->it_Box.Left;
	IBase->Mouse.Y += IT->it_Box.Top;
d194 13
a211 1
    struct Point	currentmouse;
d215 2
a216 5
    currentmouse.X = dragscreen->MouseX;
    currentmouse.Y = dragscreen->MouseY;

    delta.X = currentmouse.X - IBase->OldPt.X;
    delta.Y = currentmouse.Y - IBase->OldPt.Y;
d220 2
a221 2
	DSD( dumpPt("new point, mouse coords", IBase->Mouse) );
	DSD( dumpPt("new point, screen coords", currentmouse ) );
d232 1
a232 1
	 * IBase->OldPt = currentmouse;
@


38.8
log
@Renamed reportMouse() to updateMousePointer().
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.7 92/03/21 14:55:36 peter Exp Locker: peter $
d138 1
a138 1
	updateMousePointer(FALSE);
d181 1
@


38.7
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.6 92/03/19 15:56:04 peter Exp Locker: peter $
d138 1
a138 1
	reportMouse(FALSE);
@


38.6
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.5 92/03/19 10:55:53 peter Exp Locker: peter $
d67 1
a67 1
    /* If you try to drag a "non-child-draggable" child screen, that's like
a150 1
    case itATTACHSCREEN:	/* defer */
@


38.5
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.4 92/03/18 11:51:40 peter Exp Locker: peter $
d151 1
@


38.4
log
@SA_ChildDrag is now the same as SA_Draggable.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.3 92/03/03 16:36:11 peter Exp Locker: peter $
d182 1
a182 1
    default:
@


38.3
log
@Non-draggable child-screens now drag the parent.  Renamed private screen flags.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.2 92/02/20 12:18:31 peter Exp Locker: peter $
d70 1
a70 1
    if ( ( !TESTFLAG( XSC(dragscreen)->PrivateFlags, PSF_CHILDDRAG ) ) &&
@


38.2
log
@Defaults new itCOPYSCBUF token.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.1 92/02/17 17:18:39 peter Exp Locker: peter $
d46 1
d66 12
d87 1
a87 1
    screenLegalPosition( IBase->HitScreen, &IBase->MouseLimits, 0 );
d94 1
a94 1
	IBase->HitScreen->MouseX, IBase->HitScreen->MouseY);
d100 1
a100 1
    scaleScreenMouse( &IBase->MouseLimits, IBase->HitScreen );
d104 2
a105 2
    IBase->OldPt.X = IBase->HitScreen->MouseX;
    IBase->OldPt.Y = IBase->HitScreen->MouseY;
d193 1
d198 2
a199 2
    currentmouse.X = IBase->HitScreen->MouseX;
    currentmouse.Y = IBase->HitScreen->MouseY;
d211 1
a211 1
		IBase->HitScreen, delta.X, delta.Y ) );
d213 1
a213 1
	IMoveScreen( IBase->HitScreen, &delta, 0 );
@


38.1
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token does default.
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 38.0 91/06/12 14:32:58 peter Exp Locker: peter $
d167 1
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: sscreendrag.c,v 1.10 90/12/10 21:35:35 peter Exp $
d112 1
a112 1
    case itSELECTUP:
d118 1
a118 1
    case itMOUSEMOVE:
d132 6
a137 6
    case itSETREQ:	/* can't handle possible state change */
    case itCLEARREQ:	/* can't handle possible state change */
    case itCLOSEWIN:
    case itDEPTHSCREEN:
    case itOPENSCREEN:
    case itCLOSESCREEN:
d147 20
a166 20
    case itMENUDOWN:
    case itMENUUP:
    case itSELECTDOWN:
    case itRAWKEY:
    case itTIMER:
    case itDISKCHANGE:
    case itACTIVATEWIN:	/* swallow: can't handle state change 	*/
    case itACTIVATEGAD:
    case itMETADRAG:
    case itOPENWIN:
    case itVERIFY:
    case itREMOVEGAD:
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itZOOMWIN:
    case itDEPTHWIN:
    case itBORDERPATROL:
    case itNEWPREFS:
    case itMODIFYIDCMP:
@
