head     38.8;
branch   ;
access   ;
symbols  V40_85:38.8 V40_71:38.8 V40_68:38.8 V40_65:38.8 V40_47:38.8 V40_45:38.8 V40_37:38.8 V40_34:38.8 V40_29:38.8 V39_2415:38.7 V39_2369:38.7 V39_2339:38.7 V39_2332:38.7 V39_2275:38.6 V39_2256:38.6 V39_2210:38.6 V39_2192:38.6 V39_2084:38.5 V39_2082:38.5 V39_2076:38.5 V39_2073:38.5 V39_2058:38.5 V39_2051:38.5 V39_2031:38.5 V39_2017:38.5 V39_2012:38.5 V39_1985:38.5 V39_1933:38.5 V39_1819:38.5 V39_1805:38.5 V39_1783:38.5 V39_1695:38.5 V39_1621:38.5 V39_1620:38.5 V39_1508:38.5 V39_1485:38.5 V39_1461:38.5 V39_1458:38.5 V39_1456:38.5 V39_1405:38.5 V39_1368:38.5 V39_1360:38.5 V39_1324:38.5 V39_1147:38.4 V39_1143:38.4 V39_1141:38.4 V39_1120:38.3 V39_1116:38.3 V39_1104:38.3 V39_1100:38.3 V39_1078:38.3 V39_1073:38.3 V39_757:38.1 V39_702:38.1 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.8
date     93.02.15.19.05.42;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.12.09.18.15.51;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.11.10.17.11.00;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.05.15.14.09.44;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.05.01.13.55.09;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.09.16.30.00;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.07.17.58.11;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.03.18.11.51.28;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.32.21;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.8
log
@Fixed bad comment.  Fixed minor border refresh bug with resizing
windows without a depth-gadget.
@
text
@
/*** size.c **************************************************************
 *
 * intuition.c support routines
 *
 *  $Id: size.c,v 38.7 92/12/09 18:15:51 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"
#include "gadgetclass.h"
#include <graphics/regions.h>

#define D(x)	;

/* sizeDamage() is called after window resize.  It's expected
 * to erase old right/left border, put old/new border areas into
 * damage list, prepare for updating of relative gadgets,
 * esp. depth arrangers.  Set LAYERREFRESH for BorderPatrol().
 *
 * Note well: the window is already in its new size at this point;
 * dx and dy are the deltas from the old size.
 */
sizeDamage(w, dx, dy)
struct Window *w;
int	dx, dy;
{
    D( printf("sizeDamage, window %lx, dx/dy %ld/%ld\n", w, dx,dy ) );

    if ( !( dx || dy) )
    {
	D( printf("sizeDamage, not changing\n") );
	return;
    }
	
    /* do it for all */
    borderDamage(w, dx, dy);
    gadgetDamage(w, dx, dy);
}


/* right/left borders: or damage, clear, delta, or damage */
borderDamage(w, dx, dy)
struct Window *w;
int	dx, dy;
{
    struct Layer *blayer;	/* layer border is in */
    struct Rectangle newrect, oldrect;
    int	i;
    struct RastPort *rp;
    int	right, bottom, right_left, bottom_top, top_bottom;

    blayer = (struct Layer *) getGimmeLayer(w);

    /* get salient parameters */
    /* Peter 15-Feb-93: top_bottom has to be one less than BorderTop
     * because we may need to refresh the shadow line under the drag
     * bar if this window has no depth gadget
     */
    right_left = w->Width - w->BorderRight;
    bottom_top = w->Height - w->BorderBottom;
    top_bottom = w->BorderTop - 1;
    right = w->Width - 1;
    bottom = w->Height - 1;

    /* will only be rendering into border layer */
    rp = obtainRP(&w->WScreen->RastPort, blayer);

    /* two passes: one each for right/bottom borders */
    for ( i = 0; i < 2; i++ )
    {
	/* newrect and oldrect are (almost) the new and old
	 * border rectangles.  We don't care about changes in
	 * height for the bottom border or width for the right
	 * border, since all affected pixels are either just
	 * entering or just leaving the layer.
	 */
	newrect.MaxY = bottom;

	if ( i )	/* Bottom border */
	{
	    newrect.MinX = 0;
	    newrect.MaxX = right_left;
	    newrect.MinY = bottom_top;

	    oldrect = newrect;
	    oldrect.MinY += dy;
	    oldrect.MaxY += dy;
	}
	else
	{		/* Right border */
	    newrect.MinX = right_left;
	    newrect.MaxX = right;
	    newrect.MinY = top_bottom;

	    oldrect = newrect;
	    oldrect.MinX += dx;
	    oldrect.MaxX += dx;
	}

	/* jimm: 6/22/86: no border => no damage, no clear */
	if ( nonDegenerate( &newrect ) )
	{
	    OrRectRegion( blayer->DamageList, &newrect );
	    OrRectRegion( blayer->DamageList, &oldrect );
	    /* Here's the key part to making this all look good:
	     * We know we're going to rerender every pixel which
	     * is in the border, so we only want to erase those
	     * pixels which are no longer in the border.  First,
	     * see the note above about ignoring height effects
	     * on the right border and width on the bottom.
	     * The only remaining pixels to be cleared are those
	     * left behind when the window grows.
	     */
	    if ( i )	/* Bottom border */
	    {
		oldrect.MaxY = imin( oldrect.MaxY, newrect.MinY-1 );
	    }
	    else	/* Right border */
	    {
		oldrect.MaxX = imin( oldrect.MaxX, newrect.MinX-1 );
	    }
	    if ( nonDegenerate( &oldrect ) )
	    {
		eraseRect( rp, &oldrect );
	    }
	}
    }	/* end damage handling of right and bottom borders */

    blayer->Flags |= ( LAYERREFRESH | LAYERI_NOTIFYREFRESH | LAYERI_GADGETREFRESH );

    freeRP(rp);
}

/* or damage, clear, delta (relativity), or damage */
gadgetDamage(w, dx, dy)
struct Window *w;
int	dx, dy;
{
    struct RastPort *rp;
    struct Layer *layer;

    USHORT flagsmask = 0;/* which dimensions change determine which
			 * gadget Flags are important
			 */

    struct GListEnv	genv;
    struct Gadget *g;
    USHORT gflags;
    struct Rectangle rect;
    struct IBox		gadgetbox;
    struct Rectangle winrect;

    /* get layer dimensions and stuff like that */
    if (! gListDomain(w->FirstGadget, w, &genv)) goto OUT;

    /* get locks all the way down */
    lockGDomain(&genv);	/* lock linfo, gadgets, appropriate layers */

    /* already have layers lock.
     * Now I'll be able to do just a quick swap of layer pointers
     * in the rastport.
     */
    rp = obtainRP( genv.ge_GInfo.gi_RastPort, genv.ge_Layer );

    /* which relativity types need to be changed */
    if (dx) flagsmask |= (GFLG_RELSPECIAL | GFLG_RELRIGHT | GFLG_RELWIDTH);
    if (dy) flagsmask |= (GFLG_RELSPECIAL | GFLG_RELBOTTOM | GFLG_RELHEIGHT);

    /* ZZZ: would like to do all this in subroutine */

    for (g = w->FirstGadget; g; g = g->NextGadget)
    {
	if ( ((gflags = g->Flags) & flagsmask ) /* sensitive to change */
	    || 	/* jimm: 4/7/86: all rel gadg's must be included */
	    (g->Activation & (GACT_LEFTBORDER | GACT_TOPBORDER)))
	{
	    /* get the select box to add to the damage list */
	    gadgetInfo( g, &genv );

	    /* set up proper layer for gadget */
	    rp->Layer = layer = genv.ge_GInfo.gi_Layer;

	    /* The window is already in its new size, so we have
	     * to factor out dx and dy to get a GadgetInfo that
	     * describes how things used to be before the resizing
	     * happened:
	     */
	    genv.ge_GInfo.gi_Domain.Width += dx;
	    genv.ge_GInfo.gi_Domain.Height += dy;
	    gadgetBoundingBox( g, &genv.ge_GInfo, &gadgetbox );
	    /* convert from 'width' to 'right' */
	    boxToRect( &gadgetbox, &rect);

	    if ( nonDegenerate( &rect ) )
	    {
		/* Now these are the old gadget bounds, which
		 * have to be erased, as well as added to
		 * the damage region, so that other rendering
		 * that might be blown away by the erasing can
		 * get repaired.
		 */
		OrRectRegion( layer->DamageList, &rect);

		/* Here's a cool optimization:  we don't always need
		 * to erase the old gadget's bounds.  Those pixels
		 * could be:
		 *
		 * - outside the new window's extent (never needs drawing)
		 * - in new old window's border (no point in erasing,
		 *   since we'll be drawing border color into those pixels)
		 * - in the new window's interior (needs erasing)
		 *
		 * So we limit the rectangle to be erased to the inner
		 * rectangle of the window!
		 */
		windowInnerBox( w, (struct IBox *)&winrect );
		boxToRect( (struct IBox *)&winrect, &winrect );
		limitRect( &rect, &winrect );
		if ( nonDegenerate( &rect ) )
		{
		    eraseRect( rp, &rect );
		}
	    }

	    /* Now we restore the true window dimensions, so
	     * the GadgetInfo describes the window in its
	     * new size:
	     */
	    genv.ge_GInfo.gi_Domain.Width -= dx;
	    genv.ge_GInfo.gi_Domain.Height -= dy;

	    /* We send a GM_LAYOUT method to the gadget, expecting
	     * it to fill in its bounds field.  For gadgets that
	     * don't handle this method, nothing happens.  But for
	     * regular GREL_ gadgets, regular relativity is handled
	     * inside gadgetBoundingBox().
	     */
	    callHook( gadgetHook( g ), g, GM_LAYOUT, &genv.ge_GInfo, 0 );

	    gadgetBoundingBox( g, &genv.ge_GInfo, &gadgetbox );
	    /* convert from 'width' to 'right' */
	    boxToRect( &gadgetbox, &rect);

	    if ( nonDegenerate( &rect ) )
	    {
		/* Since the window is already in the new size,
		 * these are the new bounds of the gadget.
		 * Add them to the damage region so the gadget
		 * will appear in its new place.
		 */
		OrRectRegion( layer->DamageList, &rect);
	    }

	    /* better to be redundant than to ask gimmelayer to refresh
	     * unnecessarily
	     */
	    layer->Flags |= ( LAYERREFRESH | LAYERI_NOTIFYREFRESH | LAYERI_GADGETREFRESH );
	}
    }

    rp->Layer = genv.ge_Layer;	/* restore original layer in there */
    freeRP(rp);

    unlockGDomain(&genv);
OUT:
    return;
}

@


38.7
log
@Cleaned up borderDamage() code to flash a lot less, by only erasing
the border where we really need to.  Likewise for gadgetDamage().
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.6 92/11/10 17:11:00 peter Exp Locker: peter $
d59 4
d65 1
a65 1
    top_bottom = w->BorderTop;
d77 1
a77 1
	 * height for the right border or width for the left
@


38.6
log
@More optimal handling of damage to drag gadget.  Now use
GTYP_SYSTYPEMASK instead of 0xF0.
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.5 92/05/15 14:09:44 peter Exp Locker: peter $
d15 1
d45 1
a45 2
/* right/left borders and sizing gadgets: or damage, clear, delta, or damage */
/* ZZZ: won't sizing gadgets be handled by gadget damage? */
d51 1
a51 1
    struct Rectangle rect;
d61 1
a61 1
    top_bottom = w->BorderTop - 1;
d68 2
a69 2
    /* three passes: one each for right/bottom borders, one for dgadgs */
    for ( i = 0; i < 3; ++i)
d71 7
d79 1
a79 2
	/* get rectangle */
	switch (i)
d81 17
a97 18
	case 0:	/* right	*/
	    rect.MinX = right_left;
	    rect.MaxX = right;
	    rect.MinY = top_bottom;
	    rect.MaxY = bottom;
	    break;
	case 1:	/* bottom	*/
	    rect.MinX = 0;
	    rect.MaxX = right_left;
	    rect.MinY = bottom_top;
	    rect.MaxY = bottom;
	    break;
	case 2:	/* depth gadgets */
	    rect.MinX = getright(w, 0);
	    rect.MaxX = right;
	    rect.MinY = 0;
	    rect.MaxY = top_bottom;
	    break;
d101 1
a101 1
	if (rect.MinX <= rect.MaxX && rect.MinY <= rect.MaxY)
d103 16
a118 4
	    OrRectRegion( blayer->DamageList, &rect);

	    /* delta by dx, dy, as appropriate */
	    if (i != 1 ) 	/* right border, gadgets */
d120 1
a120 5
		if (dx)
		{
		    rect.MinX += dx; /* shift right/left */
		    rect.MaxX += dx;
		}
d122 1
a122 1
	    else if (dy)	/* (i==1) bottom border */
d124 1
a124 2
		rect.MinY += dy; /* shift up/down */
		rect.MaxY += dy;
a125 2
	    OrRectRegion( blayer->DamageList, &rect);
	    eraseRect( rp, &rect );	/* erase where was */
d151 1
d175 1
a175 1
	    (g->Activation & (LEFTBORDER | TOPBORDER)))
d194 1
a194 1
	    if (rect.MinX <= rect.MaxX && rect.MinY <= rect.MaxY)
d203 12
a214 4
		/* Special handling: We know the system dragging gadget
		 * doesn't need to be erased, because it fully redraws itself.
		 * Adding this special case cleans up the appearance
		 * of window sizing, so it's worth the kludge.
d216 4
a219 1
		if ( ( g->GadgetType & GTYP_SYSTYPEMASK ) != GTYP_WDRAGGING )
d221 1
a221 1
		    eraseRect( rp, &rect );	/* erase where was */
d224 1
d244 1
a244 1
	    if (rect.MinX <= rect.MaxX && rect.MinY <= rect.MaxY)
@


38.5
log
@Uses friendly names for new layer damage bits.
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.4 92/05/01 13:55:09 peter Exp Locker: peter $
d192 9
a200 1
		eraseRect( rp, &rect );	/* erase where was */
@


38.4
log
@Now sets all three layer-refresh bits when size-damage occurs.
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.3 92/04/09 16:30:00 peter Exp Locker: peter $
d119 1
a119 1
    blayer->Flags |= ( LAYERREFRESH | LAYERIREFRESH | LAYERIREFRESH2 );
d226 1
a226 1
	    layer->Flags |= ( LAYERREFRESH | LAYERIREFRESH | LAYERIREFRESH2 );
@


38.3
log
@Updated some comments.  Took a bit of optimization.  Re-ordered gadget
damage processing so old size is handled before new sizze.  Now
sends GM_RESIZE method.
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.2 92/04/07 17:58:11 peter Exp Locker: peter $
d119 1
a119 1
    blayer->Flags |= LAYERREFRESH;
d226 1
a226 1
	    layer->Flags |= LAYERREFRESH;
@


38.2
log
@Now uses gadget bounding box for damage calculations.
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.1 92/03/18 11:51:28 peter Exp Locker: peter $
d14 1
d18 2
a19 1
/* erase old right/left border, put old/new border areas into
d22 3
a123 1

a128 1
    struct Rectangle rect;
d139 1
d155 2
a156 2
    if (dx) flagsmask |= (GRELRIGHT | GRELWIDTH);
    if (dy) flagsmask |= (GRELBOTTOM | GRELHEIGHT);
d172 7
a179 1

d185 6
a190 1
		/* clear out the damage */
d192 1
d194 14
a207 2
	    /* jimm: 7/30/86: was omitting last param */
	    /* ZZZ: want to do backfill here */
d209 3
a211 18
	    /* recalulate relativity sizes */
	    if ( TESTFLAG(gflags, GRELRIGHT) )
	    {
		rect.MinX += dx;
	    }
	    if ( TESTFLAG(gflags, GRELRIGHT|GRELWIDTH ) )
	    {
		rect.MaxX += dx;
	    }

	    if ( TESTFLAG(gflags, GRELBOTTOM) )
	    {
		rect.MinY += dy;
	    }
	    if ( TESTFLAG( gflags, GRELBOTTOM|GRELHEIGHT ) )
	    {
		rect.MaxY += dy;
	    }
d215 5
a220 1
		eraseRect( rp, &rect );	/* erase where was */
@


38.1
log
@Took an optimization in sizeDamage().
@
text
@d6 1
a6 1
 *  $Id: size.c,v 38.0 91/06/12 14:32:21 peter Exp Locker: peter $
d168 1
a168 1
	    gadgetBox( g, &genv.ge_GInfo, &gadgetbox );
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: size.c,v 36.15 91/04/10 17:47:28 peter Exp $
d182 1
a182 1
	    if (gflags & GRELRIGHT) 
d185 3
a189 1
	    if (gflags & GRELWIDTH) rect.MaxX += dx;
d191 1
a191 1
	    if (gflags & GRELBOTTOM) 
d194 3
a198 1
	    if (gflags & GRELHEIGHT) rect.MaxY += dy;
@
