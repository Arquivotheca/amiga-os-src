head     38.6;
branch   ;
access   ;
symbols  V40_85:38.6 V40_71:38.6 V40_68:38.6 V40_65:38.6 V40_47:38.6 V40_45:38.6 V40_37:38.6 V40_34:38.6 V40_29:38.6 V39_2415:38.6 V39_2369:38.6 V39_2339:38.6 V39_2332:38.6 V39_2275:38.6 V39_2256:38.6 V39_2210:38.6 V39_2192:38.6 V39_2084:38.6 V39_2082:38.6 V39_2076:38.6 V39_2073:38.6 V39_2058:38.6 V39_2051:38.6 V39_2031:38.6 V39_2017:38.6 V39_2012:38.6 V39_1985:38.6 V39_1933:38.6 V39_1819:38.6 V39_1805:38.6 V39_1783:38.6 V39_1695:38.6 V39_1621:38.6 V39_1620:38.6 V39_1508:38.5 V39_1485:38.5 V39_1461:38.5 V39_1458:38.5 V39_1456:38.5 V39_1405:38.5 V39_1368:38.5 V39_1360:38.5 V39_1324:38.5 V39_1147:38.5 V39_1143:38.5 V39_1141:38.5 V39_1120:38.5 V39_1116:38.5 V39_1104:38.5 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.4 V39_702:38.4 V39_557:38.4 V39_553:38.4 V39_551:38.4 V39_510:38.4 V39_495:38.4 V39_416:38.4 V39_383:38.3 V39_371:38.2 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.6
date     92.06.23.17.17.39;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.02.12.03.53;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.11.13.38.29;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.07.11.05.59;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.05.15.38.51;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.04.18;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.21.46;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.6
log
@Deleted default Amiga-key and Checkmark imagery to save space (we get
them from sysiclass now).
@
text
@
/*** images.c ****************************************************************
 *
 *  the Intuition Images file
 *
 *  $Id: images.c,v 38.5 92/04/02 12:03:53 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"

/* = declarations ======================================================== */

#ifdef LOTSOFSPACE
UBYTE RJWasHere[] = "=RJMical=";
#endif

UWORD CPattern[2] = {
     0x5555,
     0xaaaa,
};

USHORT BPattern[2] = {
     0x4444,
     0x1111,
};

/* ======================================================================= */
/* ======================================================================= */
/* ======================================================================= */

@


38.5
log
@ROM Pointer moved to pointer.c.
@
text
@d6 1
a6 1
 *  $Id: images.c,v 38.4 92/02/11 13:38:29 peter Exp Locker: peter $
a29 102



/* ======================================================================== */
/* === Image Data ========================================================= */
/* ======================================================================== */
USHORT AmigaData[] = 
    {
    0xC000, 0x0600,
    0x0003, 0xC000,
    0x000F, 0xC000,
    0x0039, 0xC000,
    0x00E1, 0xC000,
    0x03FF, 0xC000,
    0x1F83, 0xF000,
    0xC000, 0x0600,
    };


USHORT LAmigaData[] = 
    {
    0x8004,
    0x00E0,
    0x01E0,
    0x0360,
    0x0660,
    0x0FE0,
    0x3CF0,
    0x8004,
    };


USHORT CheckData[] =
    {
    0xFFF1,
    0xFFE7,
    0xFFCF,
    0xFF9F,
    0x0F3F,
    0xC67F,
    0xE0FF,
    0xF1FF,
    };


USHORT LCheckData[] =
    {
    0xFC70,
    0xFC70,
    0xF9F0,
    0xF9F0,
    0x33F0,
    0x13F0,
    0x87F0,
    0xC7F0,
    };


/* ======================================================================== */
/* === Images ============================================================= */
/* ======================================================================== */

struct Image RomCheckMarks[RESCOUNT] =
    {
	/*struct Image CheckImage =*/
	{
	2, 0,  /* left top */
	15, 8, 1,
	CheckData,
	0x1, 0x0,	/* PlanePick, PlaneOnOff */
	NULL,		/* NextImage */
	},
/*struct Image LCheckImage =*/
	{
	2, 0,  /* left top */
	9, 8, 1,
	LCheckData,
	0x1, 0x0,	/* PlanePick, PlaneOnOff */
	NULL,		/* NextImage */
	},
    };


struct Image RomAmigaIcon[RESCOUNT] =
    {
	/*struct Image AmigaIcon =*/
	{
	0, 0,  /* left top */
	23, 8, 1,
	AmigaData,
	0x1, 0x0,	/* PlanePick, PlaneOnOff */
	NULL,		/* NextImage */
	},
/*struct Image LAmigaIcon =*/
	{
	0, 0,  /* left top */
	14, 8, 1,
	LAmigaData,
	0x1, 0x0,	/* PlanePick, PlaneOnOff */
	NULL,		/* NextImage */
	},
    };
@


38.4
log
@BPattern and CPattern are now of "size" 1.
@
text
@d6 1
a6 1
 *  $Id: images.c,v 38.3 92/02/07 11:05:59 peter Exp Locker: peter $
a135 34

/* the Intuition pointer, though defined as ROMPOINTER_HEIGHT tall,
 * has memory allocated for 16 tall, in case User wants to change it.
 * (the definition is in intuinternal.h)
 */

USHORT RomPointer[] = 
    {
    0x0000, 0x0000,	/* one word each for position and control */

    0xC000, 0x4000,
    0x7000, 0xB000,
    0x3C00, 0x4C00,
    0x3F00, 0x4300,

    0x1FC0, 0x20C0,
    0x1FC0, 0x2000,
    0x0F00, 0x1100,
    0x0D80, 0x1280,

    0x04C0, 0x0940,
    0x0460, 0x08A0,
    0x0020, 0x0040,
    0x0000, 0x0000

    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,

    0x0000, 0x0000,
    0x0000, 0x0000,
    };

@


38.3
log
@IPointer is now called RomPointer.  Definitions for rom pointer are
now ROMPOINTER_xxx.
@
text
@d6 1
a6 1
 *  $Id: images.c,v 38.2 92/02/05 15:38:51 peter Exp Locker: peter $
d21 1
a21 1
UWORD CPattern[4] = {
a23 2
     0x5555,
     0xaaaa,
d26 1
a26 3
USHORT BPattern[4] = {
     0x4444,
     0x1111,
@


38.2
log
@ROM default pointer now matches 2.0 default pointer.
@
text
@d6 1
a6 1
 *  $Id: images.c,v 38.1 91/06/19 18:04:18 peter Exp Locker: peter $
d141 3
a143 3
#define IPOINTHEIGHT 16
/* the Intuition pointer, though defined as IPOINTHEIGHT tall, has memory
 * allocated for 16 tall, in case User wants to change it
d145 2
a146 1
USHORT IPointer[] = 
a148 20

#if 0
    0x0000, 0xFC00,
    0x7C00, 0xFE00,
    0x7C00, 0x8600,
    0x7800, 0x8C00,
    0x7C00, 0x8600,
    0x6E00, 0x9300,
    0x0700, 0x6980,
    0x0380, 0x04C0,
    0x01C0, 0x0260,
    0x0080, 0x0140,
    0x0000, 0x0080,

    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
#endif
@


38.1
log
@Removed obsolete !EMBOSSME code.
@
text
@d6 1
a6 1
 *  $Id: images.c,v 38.0 91/06/12 14:21:46 peter Exp Locker: peter $
d149 1
d163 21
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: images.c,v 36.12 90/04/30 22:51:27 jimm Exp $
a20 14
#ifndef EMBOSSME
/* THICK HORIZ BARS */
USHORT APattern[8] = {
     0x0000,
     0x0000,
     0xffff,
     0xffff,
     0x0000,
     0x0000,
     0xffff,
     0xffff,
};
#endif

a91 261
#ifndef	EMBOSSME

/******** Close (from NGI) ********/

UWORD CloseData[] = {
	/* BitPlane 0 */
	0xFFFF,0xFFF0,
	0xC001,0xD7F0,
	0xDFFD,0xD7F0,
	0xD005,0xD7F0,
	0xD7F5,0xD7F0,
	0xD005,0xD7F0,
	0xDFFD,0xD7F0,
	0xC001,0xD7F0,
	0xFFFF,0xD7F0,
	0xFFFF,0xFFF0,
	/* BitPlane 1 */
	0x0000,0x0000,
	0x3FFE,0x0000,
	0x2002,0x0000,
	0x2FFA,0x0000,
	0x280A,0x0000,
	0x2FFA,0x0000,
	0x2002,0x0000,
	0x3FFE,0x0000,
	0x0000,0x0000,
	0x0000,0x0000,
};

struct Image CloseImage = {
	3, 0,		/* LeftEdge, TopEdge */
	21, 10, 2,	/* Width, Height, Depth */
	&CloseData[0],	/* ImageData */
	0x03, 0x00,	/* PlanePick, PlaneOnOff */
	NULL		/* NextImage */
};

/********* "a:tmp/close" *** eof ***/

USHORT LCloseData[] =
    {
    0xFFFF,
    0xC00C,
    0xCFCC,
    0xCFCC,
    0xCCCC,
    0xCCCC,
    0xCFCC,
    0xCFCC,
    0xC00C,
    0xFFFC,
    /**/
    0x0000,
    0x0000,
    0x0000,
    0x0000,
    0x0300,
    0x0300,
    0x0000,
    0x0000,
    0x0000,
    0x0000,
    };

/******** Size (from NGI) ********/

UWORD SizeData[] = {
	/* BitPlane 0 */
	0xFFFF,
	0xFFFF,
	0xF333,
	0xFF33,
	0xE033,
	0xFFF3,
	0xC003,
	0xFFFF,
	/* BitPlane 1 */
	0x0000,
	0x0000,
	0x0CCC,
	0x00CC,
	0x1FCC,
	0x000C,
	0x3FFC,
	0x0000,
};

struct Image SizeImage = {
	0, 0,		/* LeftEdge, TopEdge */
	16, 8, 2,	/* Width, Height, Depth */
	&SizeData[0],	/* ImageData */
	0x03, 0x00,	/* PlanePick, PlaneOnOff */
	NULL		/* NextImage */
};

/********* "a:tmp/size" *** eof ***/

USHORT LSizeData[] =
    {
    0xFFE0,
    0xC7E0,
    0xC7E0,
    0xC7E0,
    0xF860,
    0xF860,
    0xF860,
    0xF860,
    0xF860,
    0xFFE0,
    /**/
    0x0000,
    0x3800,
    0x3800,
    0x3800,
    0x0780,
    0x0780,
    0x0780,
    0x0780,
    0x0780,
    0x0000,
    };
USHORT LUpF[] =
    {
    0x3FFF, 0x8000,
    0x301F, 0x8000,
    0x3001, 0x8000,
    0x3039, 0x8000,
    0x3039, 0x8000,
    0x3039, 0x8000,
    0x3039, 0x8000,
    0x3F39, 0x8000,
    0x3F01, 0x8000,
    0x3FFF, 0x8000,
    /**/
    0x0000, 0x0000,
    0x0FE0, 0x0000,
    0x0F00, 0x0000,
    0x0F00, 0x0000,
    0x0F00, 0x0000,
    0x0F00, 0x0000,
    0x0F00, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    0x0000, 0x0000,
    };


/******** UpF (from NGI) ********/

UWORD UpFData[] = {
	/* BitPlane 0 */
	0xFFFF,0xFFFF,
	0x7000,0xFFFF,
	0x77FE,0xFFFF,
	0x7700,0x0FFF,
	0x777F,0xEFFF,
	0x707F,0xEFFF,
	0x7F7F,0xEFFF,
	0x7F00,0x0FFF,
	0x7FFF,0xFFFF,
	0xFFFF,0xFFFF,
	/* BitPlane 1 */
	0x0000,0x0000,
	0x0FFF,0x0000,
	0x0801,0x0000,
	0x08FF,0xF000,
	0x08FF,0xF000,
	0x0FFF,0xF000,
	0x00FF,0xF000,
	0x00FF,0xF000,
	0x0000,0x0000,
	0x0000,0x0000,
};

struct Image UpFImage = {
	-1, 0,		/* LeftEdge, TopEdge */
	30, 10, 2,	/* Width, Height, Depth */
	&UpFData[0],	/* ImageData */
	0x03, 0x00,	/* PlanePick, PlaneOnOff */
	NULL		/* NextImage */
};

/********* "a:tmp/upfront" *** eof ***/

/* russ's med res zoom image */
/******** Zoom (from NGI) ********/

UWORD ZoomData[] = {
	/* BitPlane 0 */
	0xFFFF,0xFFFF,
	0x7FFF,0xFFFF,
	0x781F,0xFFFF,
	0x787F,0xFFFF,
	0x799F,0xFFFF,
	0x7FE6,0x7FFF,
	0x7FF8,0x7FFF,
	0x7FE0,0x7FFF,
	0x7FFF,0xFFFF,
	0xFFFF,0xFFFF,
	/* BitPlane 1 */
	0x0000,0x0000,
	0x0000,0x0000,
	0x07E0,0x0000,
	0x0780,0x0000,
	0x0660,0x0000,
	0x0019,0x8000,
	0x0007,0x8000,
	0x001F,0x8000,
	0x0000,0x0000,
	0x0000,0x0000,
};

struct Image ZoomImage = {
	-1, 0,		/* LeftEdge, TopEdge */
	24, 10, 2,	/* Width, Height, Depth */
	&ZoomData[0],	/* ImageData */
	0x03, 0x00,	/* PlanePick, PlaneOnOff */
	NULL		/* NextImage */
};

#define zoomGWIDTH	23
#define zoomLGWIDTH	17
#define zoomLPPICK	0x1

/********* "zoom2.out" *** eof ***/

/******** LZoom (from NGI) ********/

UWORD LZoomData[] = {
	/* BitPlane 0 */
	0xFFFE,
	0x78FE,
	0x79FE,
	0x7AFE,
	0x7F5E,
	0x7F9E,
	0x7F1E,
	0xFFFE,
	/* BitPlane 1 */
	0x0000,
	0x0700,
	0x0600,
	0x0500,
	0x00A0,
	0x0060,
	0x00E0,
	0x0000,
};

struct Image LZoomImage = {
	-1, 0,		/* LeftEdge, TopEdge */
	15, 8, 3,	/* Width, Height, Depth */
	&LZoomData[0],	/* ImageData */
	0x03, 0x00,	/* PlanePick, PlaneOnOff */
	NULL		/* NextImage */
};

/********* "a:tmp/lzoom" *** eof ***/

#endif	/* ifndef EMBOSSME */

d95 1
a135 166


#ifndef EMBOSSME

struct Image LUpFImage =
    {
    0, 0,  /* left top */
    17, 10, 2,
    LUpF,
    0x3, 0x0,	/* PlanePick, PlaneOnOff */
    NULL,		/* NextImage */
    };

struct Image LSizeImage =
    {
    0, 0,  /* left top */
    11, 10, 2,
    LSizeData,
    0x3, 0,	/* PlanePick, PlaneOnOff */
    NULL,		/* NextImage */
    };

struct Image LCloseImage =
    {
    0, 0,  /* left top */
    14, 10, 2,
    LCloseData,
    0x3, 0,	/* PlanePick, PlaneOnOff */
    NULL,		/* NextImage */
    };

#endif /* EMBOSSME */

#ifndef EMBOSSME

/* ======================================================================== */
/* === Gadgets ============================================================ */
/* ======================================================================== */

struct RomGadget RomGadgetDefs[RESCOUNT][GADGETCOUNT] =
    {
	/* the HIRES Gadgets */
	{
	/*struct Gadget WUpFront =*/
	    {
	    -27, 0, 26, 10, /* left (rel) top width height */
	    GRELRIGHT,
	    WUPFRONT,	/* type */
	    &UpFImage,	/* image */
	    },
	/*struct Gadget WZoom =*/
	    {
	    -28 - zoomGWIDTH, 0,	/* want one space between */
	    zoomGWIDTH, 10, /* left (relative) top width height */
	    GRELRIGHT,
	    WZOOM,	/* type */
	    &ZoomImage,	/* image */
	    },

	/*struct Gadget WSize =*/
	    {
	    -15, -8, 16, 9,
	    GRELBOTTOM | GRELRIGHT,
	    SIZING,	/* type */
	    &SizeImage,	/* image */
	    },
	/*struct Gadget WClose =*/
	    {
	    2, 0, 21, 10, /* left top width height */
	    0,
	    CLOSE,	/* type */
	    &CloseImage,	/* image */
	    },
	/*struct Gadget WDrag =*/
	    {
	    0, 0, 0, 10, /* left, top, width (relative), height */
	    GRELWIDTH,
	    WDRAGGING,	/* type */
	    NULL,	/* image */
	    },
	/*struct Gadget SUpFront =*/
	    {
	    -28, 0, 26, 10, /* left (rel) top width height */
	    GRELRIGHT,
	    SUPFRONT,	/* type */
	    &UpFImage,	/* image */
	    },
	/*struct Gadget SDownBack =*/
	/* ZZZ: obsolete, but filling space in the array */
	    {
	    -52, 0, 24, 10, /* left (relative) top width height */
	    GRELRIGHT,
	    SDOWNBACK,	/* type */
	    NULL,	/* image */
	    },
	/*struct Gadget SDrag =*/
	    {
	    0, 0, 0, 10, /* left top width (relative) height */
	    GRELWIDTH,
	    SDRAGGING,	/* type */
	    NULL,	/* image */
	    },
	},
	/* now, the LOWRES Gadgets */
	{
	/*struct Gadget LWUpFront =*/
	    {
	    -16, 0, 17, 10, /* left (rel) top width height */
	    GRELRIGHT,
	    WUPFRONT,	/* type */
	    &LUpFImage,	/* image */
	    },
	/*struct Gadget LZoom =*/
	    {
	    -16 - zoomLGWIDTH, 0,
	    zoomLGWIDTH, 10, /* left (relative) top width height */
	    GRELRIGHT,
	    WZOOM,	/* type */
	    &LZoomImage,	/* image */
	    },
	/*struct Gadget LWSize =*/
	    {
	    -10, -9, 11, 10, /* left (rel) top (rel) width height */
	    GRELBOTTOM | GRELRIGHT,
	    SIZING,	/* type */
	    &LSizeImage,	/* image */
	    },
	/*struct Gadget LWClose =*/
	    {
	    0, 0, 14, 10, /* left top width height */
	    0,
	    CLOSE,	/* type */
	    &LCloseImage,	/* image */
	    },
	/*struct Gadget WDrag =*/
	    {
	    0, 0, 0, 10, /* left top width (relative) height */
	    GRELWIDTH,
	    WDRAGGING,	/* type */
	    NULL,	/* image */
	    },
	/*struct Gadget LSUpFront =*/
	    {
	    -16, 0, 17, 10, /* left (rel) top width height */
	    GRELRIGHT,
	    SUPFRONT,	/* type */
	    &LUpFImage,	/* image */
	    },
	/*struct Gadget LSDownBack =*/
	/*** ZZZ: filling space in array ***/
	    {
	    -33, 0, 17, 10, /* left (relative) top width height */
	    GRELRIGHT,
	    SDOWNBACK,	/* type */
	    NULL,	/* image */
	    },
	/*struct Gadget SDrag =*/
	    {
	    0, 0, 0, 10, /* left top width (relative) height */
	    GRELWIDTH,
	    SDRAGGING,	/* type */
	    NULL,	/* image */
	    },
	},
    };
#endif
@
