head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.10 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.10 V39_2082:38.10 V39_2076:38.10 V39_2073:38.10 V39_2058:38.10 V39_2051:38.10 V39_2031:38.10 V39_2017:38.10 V39_2012:38.10 V39_1985:38.10 V39_1933:38.10 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.10 V39_1621:38.9 V39_1620:38.9 V39_1508:38.9 V39_1485:38.9 V39_1461:38.8 V39_1458:38.8 V39_1456:38.8 V39_1405:38.7 V39_1368:38.7 V39_1360:38.7 V39_1324:38.7 V39_1147:38.7 V39_1143:38.7 V39_1141:38.7 V39_1120:38.7 V39_1116:38.7 V39_1104:38.7 V39_1100:38.7 V39_1078:38.7 V39_1073:38.7 V39_757:38.5 V39_702:38.5 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.11
date     93.01.14.14.27.28;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.07.15.25.37;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.06.18.18.19.03;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.06.02.14.55.53;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.04.09.16.27.28;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.07.17.59.43;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.21.14.55.50;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.19.15.56.20;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.19.10.54.34;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.20.12.18.43;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.02.17.17.18.54;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.33.28;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@Added itMODIFYPROP.
@
text
@/*** sverify.c *****************************************************************
 *
 * sVerify state processing
 *
 *  $Id: sverify.c,v 38.10 92/07/07 15:25:37 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"


#define D(x)	;


/* state sVerify
 *
 * global data used:
 *
 * local state data:
 */


/* transition startVerify()
 * called by:
 * with state data:
 * description:
 */
startVerify( vreturn, window, class, code )
UWORD	(*vreturn)();
struct Window	*window;
ULONG		class;
UWORD		code;
{
    struct IntuiMessage	*initIMsg();
    struct IntuitionBase	*IBase = fetchIBase();
    struct IntuiMessage		*imsg;

    D( printf("startVerify, cstate: %ld, window %lx class %lx\n", 
	IBase->CurrentState,  window, class ));

    /*
     * if the window doesn't have the appropriate VERIFY
     * IDCMPFlag set, it's considered the same as an OK
     */
    if ( ! TESTFLAG( window->IDCMPFlags, class ) )
    {
	D( printf( "sV: window doesn't want it\n") );
	(*vreturn)( OKOK );	/* done */
	return;
    }

    /*
     * try to get a message to send, init it and send
     */
    /* ZZZ: Could pass NULL for tablet stuff */
    imsg = initIMsg( class, code, IT->it_IE, window, IT->it_Tablet );

    if ( imsg == NULL )
    {
	D( printf("sV: no message\n") );
	(*vreturn)( OKABORT );	/* bail out: mem too low anyway */
	return;
    }
    D( printf("sV: put him the message %lx\n", imsg ) );

    /* Peter 16-Oct-90:
     * As a result of CloseWindowSafely(), there is a possibility
     * of encountering a window with IDCMPFlags != NULL which
     * nevertheless has a UserPort of NULL.  This closes that problem.
     */

    if ( !PutMsgSafely( window->UserPort, imsg ) )
    {
	D( printf("sV: no UserPort\n") );
	(*vreturn)( OKABORT );	/* bail out: window going away anyway */
	return;
    }

    /* set up state data */
    IBase->VerifyReturn = vreturn;
    IBase->VerifyWindow	= window;
    IBase->VerifyClass = class;
    IBase->VerifyCode = code;	/* MENUWAITING for inactive windows */
#define VERIFYTIMEOUT	(10 * 3)
    IBase->VerifyTimeout = VERIFYTIMEOUT;

    /* reclaimIMsg() will check to see if this message came
     * back, and will issue an itVERIFY when it does.
     * At that time, it will clear the field itself.
     */
    IBase->VerifyMessage = imsg;

    /*
     * reclaimMessages() will put an itVERIFY token
     * right on the TokenQueue if the VerifyMessage has
     * been replied by now.
     */
    WaitTOF();	/* give the other app a little time to run */
    reclaimMessages( window );

    IBase->CurrentState = sVerify;
}

/*
 * state dispatcher
 * state transitions called:
 */
dVerify()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;
    UWORD			code;
    struct Task			*FindTask();

    switch ( IT->it_Command )
    {
    case itTIMER:	/* do default, then count down to abort */
    	doDefault();	/* jimm: 5/23/90	*/
	if ( --IBase->VerifyTimeout < 0 )
	{
	    /* timeout is normally cancel, except for
	     * inactive windows and MENUVERIFY
	     */
	    D( printf("verify timeout abort\n") );
	    verifyAbort( (IBase->VerifyCode == MENUWAITING)? OKOK: OKABORT );
	    /* returns to VerifyReturn */
	}
	break;

    case itMENUUP:	/* abort MENUVERIFY */
	/* user abort: terminates menu verify */
	/* NOTE: ZZZ: terminates even menu key equiv. sessions */
	if ( TESTFLAG( IBase->VerifyClass, MENUVERIFY ) )
	{
	    /* jimm: 5/14/90: make sure they see this	*/
	    activeEvent( IECLASS_RAWMOUSE, MENUUP );
	    verifyAbort( OKABORT );
	    /* returns to VerifyReturn */
	}
	return;

    case itSELECTUP:	/* abort SIZEVERIFY */
	/* user abort: terminates size verify */
	/* ZZZ: we don't have programmatic sizeverify, but if
	 * we do, we might want to be careful here.  DMouse/zoom
	 * or somebody might want to zoom when it hears a click.
	 * If so, the upclick could easily beat the verify reply.
	 */
	if ( TESTFLAG( IBase->VerifyClass, SIZEVERIFY ) )
	{
	    D( printf("sizeverify select up abort\n" ) );
	    verifyAbort( OKABORT );
	    /* returns to VerifyReturn */
	}
	return;

    /* yippie!!! we got the message back from the sucker */
    case itVERIFY:	/* We got the reply from the application */
#if 0
	if ( itwindow != IBase->VerifyWindow )
	{
	    /* skip: from earlier window which we gave up on */
	    D( printf("dV: itVERIFY, but for window %lx not %lx\n",
		itwindow, IBase->VerifyWindow ) );
	    return;
	}
#endif
	/* We are assured that this itVERIFY event corresponds
	 * to the verify message that we are waiting for.
	 * Extraneous verify replies must be handled,
	 * by sending a "clear" signal such as menuup
	 */

	D(printf("dVerify got itVERIFY,subcommand: %lx\n",IT->it_SubCommand));
	if ( TESTFLAG( IBase->VerifyClass, SIZEVERIFY | REQVERIFY) 
		|| IT->it_SubCommand == OKOK )
	{
	    /* can't cancel size or request verify */
	    code = OKOK;
	}
	else code = OKCANCEL;

	D( printf("dV: itVERIFY ok, calculated code: %lx\n", code ) );
	verifyAbort( code );
	/* returns to VerifyReturn */
	return;
	
    case itMODIFYIDCMP:	/* do default, but catch him turning off the verify */
	/* IDCMPFlags are stuffed in it_Object2	*/
	doDefault();	/* let him get his flags changed	*/

	/* Is he clearing the VERIFY IDCMP flag?
	 * If so, it's equivalent to saying OK, IF the message
	 * is in his queue (or he's hanging on to it).  If
	 * he's replied to it already, do nothing special.
	 */
	if ( itwindow == IBase->VerifyWindow &&
	    ! TESTFLAG( (ULONG) IT->it_Object2, IBase->VerifyClass ) )
	{
	    /* If he's already replied the verify message, I can
	     * just wait for normal processing of that.
	     *
	     * if not, I want to abort this transaction, but the V1.2
	     * scam of snatching the message away won't float.  So,
	     * I've got other logic to deal with extraneous abort
	     * processing, and letting the guy know the menu or
	     * sizing session is done.
	     */
	    if ( ! snoopVerifyReply() )
	    {
		D( printf("sV: modifyidcmp abort OK\n") );

		/* DANGER: Intuition will start menus during
		 * this call.  You *must* be the input.device
		 * to start menus, or the wrong task will get
		 * the locks.
		 */
		if ( FindTask(0) != IBase->InputDeviceTask )
		{
		    D( printf("defer itMODIFYIDCMP token\n") );
		    deferToken();
		}
		else
		{
		    D( printf("ahh, that's more like it\n") );
		    verifyAbort( OKOK );
		    /* returns to VerifyReturn */
		}
	    }
	    D( else printf("sVerify reply is pending, don't abort.\n") );
	}
	return;

    case itMENUDOWN:	/* do default */
    case itSELECTDOWN:	/* do default */
    case itMOUSEMOVE:	/* do default */
    case itRAWKEY:	/* do default */
    case itDISKCHANGE:	/* do default */
    case itNEWPREFS:	/* do default */
    case itREMOVEGAD:	/* do default */
    case itSETMENU:	/* do default */
    case itCLEARMENU:	/* do default */

    case itONOFFMENU:	/* do default (do not defer: jimm: 4/18/90) */
    case itSHOWTITLE:	/* do default */
    case itDEPTHSCREEN:	/* do default (and some more: jimm: 4/30/90) */
    case itCHANGEWIN:	/* do default */
    case itZOOMWIN:	/* do default */
    case itMOVESCREEN:	/* do default */
    case itDEPTHWIN:	/* do default */
    case itOPENSCREEN:	/* do default */
    case itCLOSESCREEN:	/* do default (can't close screen with (active) window) */
    case itSETPOINTER:	/* do default */
    case itGADGETMETHOD:/* do default */
    case itMODIFYPROP:	/* do default */
	doDefault();
	return;
    
    case itCHANGESCBUF:	/* fail (menu bar can be up) */
	IT->it_Error = 1;
	return;

    case itACTIVATEWIN:	/* fix window borders, then defer (warning, might change return state) */
	fixWindowBorders();

	/* FALL THROUGH !!! */

#if 0
    /* can't let a window be closed because menu verify
     * might be walking the linked list of windows sending
     * that stupid MENUWAITING message
     */
    case itCLOSEWIN:	/* defer */
    case itOPENWIN:	/* defer */
    /*
     * if the guy I'm waiting for is waiting for one
     * of these tokens to complete, we'll have a mini-deadlock.
     * this means that the user-abort will be required
     *
     * This is not good, so it's nice to let as many synchronous
     * operations happen as we can manage.
     */
    case itACTIVATEGAD:	/* defer (warning, might change return state) */
    case itSETREQ:	/* defer (warning, might change return state) */
    case itCLEARREQ:	/* defer (warning, might change return state) */
    case itMETADRAG:	/* defer (I'm busy now, and this is a mistake) */
    case itCOPYSCBUF:	/* defer (menu bar can be up) */
#endif
    default:		/* itDEFAULT: defer */
	deferToken();
    }
}

verifyAbort( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();

    IBase->VerifyWindow = NULL;		/* must be clean */
    IBase->VerifyMessage = NULL;	/* must be clean */
    D( printf("verifyAbort, okcode %lx\n", okcode ) );
    (*IBase->VerifyReturn)( okcode );
    return;
}
@


38.10
log
@itGADGETMETHOD does default.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.9 92/06/18 18:19:03 peter Exp Locker: peter $
d260 1
@


38.9
log
@itACTIVATEWIN now fixes up window borders before deferring.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.8 92/06/02 14:55:53 peter Exp Locker: peter $
d259 1
@


38.8
log
@Comment change.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.7 92/04/09 16:27:28 peter Exp Locker: peter $
d266 5
a285 1
    case itACTIVATEWIN:	/* defer (warning, might change return state) */
@


38.7
log
@startVerify() passes current tablet info.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.6 92/04/07 17:59:43 peter Exp Locker: peter $
d122 1
a122 1
    case itTIMER:	/* count down to abort */
@


38.6
log
@Handles itSETPOINTER token.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.5 92/03/21 14:55:50 peter Exp Locker: peter $
d60 2
a61 1
    imsg = initIMsg( class, code, IT->it_IE, window );
@


38.5
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.4 92/03/19 15:56:20 peter Exp Locker: peter $
d257 1
@


38.4
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.3 92/03/19 10:54:34 peter Exp Locker: peter $
a253 1
    case itATTACHSCREEN:	/* do default */
@


38.3
log
@No longer depends on IBase->VerifyTimeoutTotal.
Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.2 92/02/20 12:18:43 peter Exp Locker: peter $
d254 1
@


38.2
log
@Defers new itCOPYSCBUF token.  Now fails itCHANGESCBUF.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.1 92/02/17 17:18:54 peter Exp Locker: peter $
d88 1
a88 3
#if 1
    IBase->VerifyTimeout = IBase->VerifyTimeoutTotal;
#else
a89 1
#endif
d286 1
a286 1
    default:
@


38.1
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token does default.
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 38.0 91/06/12 14:33:28 peter Exp Locker: peter $
a259 1
    case itCHANGESCBUF:	/* do default */
d263 5
a267 1
#if 1
a273 18
	deferToken();	/* don't close the menu guy	*/
	return;
#else
    case itOPENWIN:	/* CODED-OUT: do default */
	doDefault();
	return;
    case itCLOSEWIN:	/* CODED-OUT: defer or do default */
	if ( itwindow == IBase->ActiveWindow )
	{
	    deferToken();	/* don't close the menu guy	*/
	}
	else
	{
	    doDefault();	/* go ahead an close him out	*/
	}
    	return;
#endif

d282 6
a287 6
#if 0
    case itACTIVATEWIN:	/* CODED-OUT: defer (warning, might change return state) */
    case itACTIVATEGAD:	/* CODED-OUT: defer (warning, might change return state) */
    case itSETREQ:	/* CODED-OUT: defer (warning, might change return state) */
    case itCLEARREQ:	/* CODED-OUT: defer (warning, might change return state) */
    case itMETADRAG:	/* CODED-OUT: defer (I'm busy now, and this is a mistake) */
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: sverify.c,v 1.19 90/10/17 11:27:14 peter Exp $
d124 1
a124 1
    case itTIMER:
d137 1
a137 1
    case itMENUUP:
d149 1
a149 1
    case itSELECTUP:
d165 1
a165 1
    case itVERIFY:
d195 1
a195 1
    case itMODIFYIDCMP:
d241 20
a260 20
    case itMENUDOWN:
    case itSELECTDOWN:
    case itMOUSEMOVE:
    case itRAWKEY:
    case itDISKCHANGE:
    case itNEWPREFS:
    case itREMOVEGAD:
    case itSETMENU:
    case itCLEARMENU:

    case itONOFFMENU:	/* do not defer: jimm: 4/18/90 */
    case itSHOWTITLE:
    case itDEPTHSCREEN:	/* and some more: jimm: 4/30/90	*/
    case itCHANGEWIN:
    case itZOOMWIN:
    case itMOVESCREEN:
    case itDEPTHWIN:
    case itOPENSCREEN:
    case itCLOSESCREEN:	/* can't close screen with (active) window */
    case itBORDERPATROL:
d269 2
a270 2
    case itCLOSEWIN:
    case itOPENWIN:
d274 1
a274 1
    case itOPENWIN:
d277 1
a277 1
    case itCLOSEWIN:
d298 5
a302 5
    case itACTIVATEWIN:	/* warning, might change return state */
    case itACTIVATEGAD:	/* warning, might change return state */
    case itSETREQ:	/* warning, might change return state */
    case itCLEARREQ:	/* warning, might change return state */
    case itMETADRAG:	/* I'm busy now, and this is a mistake		*/
@
