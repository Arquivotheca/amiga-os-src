head     38.16;
branch   ;
access   ;
symbols  V40_85:38.16 V40_71:38.16 V40_68:38.16 V40_65:38.16 V40_47:38.16 V40_45:38.16 V40_37:38.16 V40_34:38.16 V40_29:38.16 V39_2415:38.15 V39_2369:38.15 V39_2339:38.15 V39_2332:38.15 V39_2275:38.14 V39_2256:38.14 V39_2210:38.14 V39_2192:38.14 V39_2084:38.14 V39_2082:38.14 V39_2076:38.14 V39_2073:38.14 V39_2058:38.14 V39_2051:38.14 V39_2031:38.14 V39_2017:38.14 V39_2012:38.14 V39_1985:38.14 V39_1933:38.14 V39_1819:38.13 V39_1805:38.13 V39_1783:38.13 V39_1695:38.12 V39_1621:38.12 V39_1620:38.12 V39_1508:38.12 V39_1485:38.11 V39_1461:38.11 V39_1458:38.11 V39_1456:38.11 V39_1405:38.10 V39_1368:38.10 V39_1360:38.10 V39_1324:38.9 V39_1147:38.7 V39_1143:38.7 V39_1141:38.7 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.6 V39_1078:38.4 V39_1073:38.4 V39_757:38.2 V39_702:38.2 V39_557:38.1 V39_553:38.1 V39_551:38.1 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.16
date     93.02.15.19.01.34;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.12.09.18.14.03;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.08.03.15.54.49;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.07.17.17.38.46;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.06.22.13.01.51;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.06.03.17.32.03;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.05.27.14.17.11;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.05.21.17.41.45;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.15.14.07.15;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.01.13.53.11;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.13.16.47.21;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.13.16.24.35;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.07.17.53.39;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.01.15.06.00;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.24.11.56.27;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.04.57;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.25.13;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.16
log
@Alert nixed to save space.
@
text
@
/*** isupport.c **************************************************************
 *
 * intuition.c support routines
 *
 *  $Id: isupport.c,v 38.15 92/12/09 18:14:03 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"

#ifndef EXEC_MEMORY_H
#include <exec/memory.h>
#endif

#ifndef GRAPHICS_GFXMACROS_H
#include <graphics/gfxmacros.h>
#endif

#ifndef HARDWARE_CUSTOM_H
#include <hardware/custom.h>
#endif

#ifndef HARDWARE_DMABITS_H
#include <hardware/dmabits.h>
#endif

#ifndef INTERNAL_LIBRARYTAGS_H
#include <internal/librarytags.h>
#endif

#define D(x)	;
#define DZIP(x)	;
#define DREQ(x)	;		/* requester refresh in BP() */
#define DBP(x)	;		/* BorderPatrol() */
#define DBPIN(x)	;	/* BorderPatrol() entry */
#define DREFRESH(x)	;	/* layer damage debug */
#define DBER(x)	;		/* begin/endrefresh debug */

extern struct Custom custom;

#ifndef DEVICES_INPUT_H
#include <devices/input.h>
#endif

extern IntuiLeap();
extern UBYTE IntuiName[];

/* lock IBASELOCK before this */
BOOL knownScreen(s)
struct Screen *s;
{
    struct Screen *reals;
    struct IntuitionBase *IBase = fetchIBase();

    assertLock("knownscreen", IBASELOCK);

    reals = IBase->FirstScreen;
    while (reals)
	{
	if (reals == s) return(TRUE); 
	else reals = reals->NextScreen;
	}
    return(FALSE);
}

/* this routine requires IBASELOCK, but you should probably
 * call it before this, so you know that its answer remains
 * valid
 */
BOOL knownWindow(w)
struct Window *w;
{
    struct Screen	*reals;
    struct Window	*realw;
    int			retval = FALSE;

    assertLock( "knownwindow", IBASELOCK );

    if ( w  && ( knownScreen( reals = w->WScreen ) ) )
    {
	for (realw = reals->FirstWindow; realw; realw = realw->NextWindow)
	{
	    if ( realw == w )
	    {
		retval = TRUE;
		break;
	    }
	}
    }

    return ( retval );
}

/* BorderPatrol() calls here with stack-swapped.  Here's why we need
 * to do this:
 *
 * BorderPatrol() can get invoked by any innocent bystander.  Say your
 * application closes its window.  BorderPatrol() is invoked on that
 * application's task to repair damage underneath the window.  Say the
 * damaged area includes some complex boopsi object.  Now this simple
 * application has to supply stack for the boopsi refresh code.
 *
 * So let's be safe and ensure the stack we need.
 */

internalBorderPatrol( s )
struct Screen *s;

/* FOR FUTURE OPTIMIZATION:  refresh the Gadgets of GIMMEZEROZERO and internal
 * layers only as needed.  Don't refresh GIMMEZEROZERO Gadgets just because
 * internal layer needs refreshing
 */
{
    struct Window *w;
    struct Requester *r;
    struct	Layer	*l;	   /* reused */
    struct Layer *gzzlayer; /* border layer */
    struct IntuitionBase *IBase = fetchIBase();

    BOOL  do_my_refresh;	/* is there something to do?	*/
    BOOL  send_him_refresh;	/* does he get a refresh event?	*/
    BOOL  i_end_refresh;  	/* do I dispose damage list?	*/

    DBPIN(printf("bp "));
    DBP( printf("\nBorderPatrol: screen %lx\n", s) );

    if ( NOT knownScreen(s)) goto OUT;

    assertLock("BorderPatrol", IBASELOCK );

    LockLayerInfo(&s->LayerInfo);
    LOCKGADGETS();	/* before locklayerrom in begin refresh */

    w = s->FirstWindow;

    while (w)
    {
	DREQ( printf("BP window %lx\n", w));
	i_end_refresh = FALSE;
	send_him_refresh = do_my_refresh = FALSE;
	gzzlayer = NULL;
	l = w->WLayer;

	/* Peter 29-Apr-92:
	 * Layers now sets an extra flag bit (LAYERI_NOTIFYREFRESH) when
	 * it damages stuff.  I clear this bit when I send the
	 * IDCMP_REFRESHWINDOW event, so I can use this bit
	 * to mean "I need to send another refresh event".
	 *
	 * This optimization is useful since BorderPatrol() operates
	 * on a whole screen, and any window that has not fixed
	 * and cleared its damage gets a fresh refresh event
	 * whenever any layer activity occurs.
	 */
	if ( ( l->Flags & ( LAYERREFRESH|LAYERI_NOTIFYREFRESH ) ) ==
	    ( LAYERREFRESH|LAYERI_NOTIFYREFRESH ) )
	{
	    DREQ( printf("window needs refreshing %lx\n", w));
	    DZIP( printf("window needs refreshing %lx\n", w));
	    do_my_refresh = TRUE;

	    if (w->Flags & NOCAREREFRESH)
	    {
		i_end_refresh = TRUE;
	    }
	    else
	    {
		send_him_refresh = TRUE;
	    }
	}

	/* Refresh Window border layer */
	if (w->BorderRPort)
	{
	    DREQ( printf("gzz layer needs refreshing\n"));
	    gzzlayer = w->BorderRPort->Layer;
	    if (gzzlayer->Flags & LAYERREFRESH)
	    {
		do_my_refresh = TRUE;
		gzzlayer->Flags &= ~LAYERREFRESH;
	    }
	}


	/* LAYERREFRESH was set */
	if (do_my_refresh)	/* refresh border and gadgets */
	{
	    DREFRESH(printf("BP: refresh window\n"));
	    BeginRefresh(w);	/* get gzzlayer lock with this */

	    DREFRESH( debugRefresh( w->RPort, w->Width, w->Height ) );

	    if (w->Flags & GIMMEZEROZERO)
	    {
		BeginUpdate(gzzlayer);
		/* assuming that G00 flag means gzzlayer != NULL */
	    }


	    /* Intuition's refresh activity:
	     * re-render the window frame and ALL gadgets
	     */
	    drawEmbossedBorder( w, DRAWGADGETS_ALL );

	    if (gzzlayer) 	/* finish up border layer */
	    {
		EndUpdate(gzzlayer, TRUE);
	    }
		
	    DREFRESH(printf("bp endr\n"));
	    EndRefresh(w, i_end_refresh);
	}

	/* refresh requesters */
	for (r = w->FirstRequest; r; r = r->OlderRequest)
	{
	    DREQ( printf("check requester: %lx\n", r));
	    /* reuse l */
	    if ((l = r->ReqLayer) == NULL)
	    {
		/* clipped offscreen */
		DREQ( printf("clipped offscreen\n"));
		continue;
	    }

	    if (l->Flags & LAYERREFRESH)
	    {
		DREQ( printf("needs refreshing\n"));
		DREFRESH(printf("BP: refresh requester\n"));
		BeginUpdate(l);
		DREFRESH( debugRefresh(r->ReqLayer->rp,r->Width,r->Height));
		drawRequester(r, w);
		l->Flags &= ~LAYERREFRESH;	/* only I reset this */
		EndUpdate(l, TRUE);
	    }
	}

	/* send him his message, now that I am done with refreshing */
	if ( send_him_refresh )
	{
	    DBP( printf("sending refresh event to %lx\n", w ) );
	    windowEvent( w, IECLASS_REFRESHWINDOW, 0 );

	    /* and tell Mr. Console	*/
	    windowEvent( w, IECLASS_EVENT, IECODE_REFRESH );
	}
	/* This new bit means that more damage happened since
	 * the last time the application was notified.  So now
	 * that we've just notified the application (if it cares,
	 * or discarded the event if it doesn't), it's time
	 * to clear the flag.
	 */
	w->WLayer->Flags &= ~LAYERI_NOTIFYREFRESH;

	w = w->NextWindow;
    }

    refreshScreenBar( s );

    UNLOCKGADGETS();
    UnlockLayerInfo(&s->LayerInfo);
OUT:
}

/*** intuition.library/BeginRefresh ***/

BeginRefresh( window )
struct Window *window;
{
    LockLayerInfo( &window->WScreen->LayerInfo );
    window->Flags |= WINDOWREFRESH;
    if ( window->BorderRPort )
    {
	LockLayerRom( window->BorderRPort->Layer );
    }
	/** jimm: 11/18/85 layer change **/
    if ( BeginUpdate( window->WLayer ) )
    {
	SETFLAG( window->MoreFlags, WMF_BEGINUPDATE );
    }
    UnlockLayerInfo( &window->WScreen->LayerInfo );
    DBER( printf( "begin refresh window %lx\n", window ) );
    /* DBER( Debug() ); */
}


/*** intuition.library/EndRefresh ***/

EndRefresh( window, complete )
struct Window *window;
BOOL complete;
{
    /** ZZZ: shouldn't this be before EndUpdate (while still locked)? **/
    if ( complete )
    {
	window->WLayer->Flags &= ~LAYERREFRESH;
    }
	/** jimm: 11/18/85 layer change **/
    EndUpdate( window->WLayer, ( ( complete ) && TESTFLAG( window->MoreFlags, WMF_BEGINUPDATE ) ) );
    if ( window->BorderRPort ) UnlockLayerRom( window->BorderRPort->Layer );
    if ( complete )
    {
	CLEARFLAG( window->MoreFlags, WMF_BEGINUPDATE );
    }
    window->Flags &= ~WINDOWREFRESH;

    /*DBER( printf("end refresh window %lx\n", window));*/
}


updateOptions(firstoption, draw)
USHORT *firstoption;
BOOL draw;
/* thinks about adding MenuIBase->Selected to the optionlist.
 *
 * Checks for valid selection:
 *	menunull is a no-op
 *	require an item, not just a top-level menu
 *	menu/item/subitem path completely enabled
 *	can't select a menu item with subitems, must select subitem
 *
 * Does all the CHECKIT stuff and mututal exclusion
 *
 * unless 'redraw' is false (command key selection), will update
 * visuals if needed.
 *
 * Called:
 *	menu-state- menu up
 *	menu-state- select down
 *	during dragselect
 *	commandPerformance (after MenuSelected manually set up)
 */
{
    USHORT num;
    struct MenuItem *pickptr, *firstpick;
    struct Menu *strip, *menu;
    struct Window *AWindow;
    BOOL CrudeRedraw;
    ULONG mutual;
    int i, max;
    struct IntuitionBase *IBase = fetchIBase();

    AWindow = IBase->ActiveWindow;
    CrudeRedraw = FALSE;

    /* if we haven't selected both a valid Menu header and a valid
     * MenuItem then return empty-handed
     */
    if ((USHORT)(num = IBase->MenuSelected) == MENUNULL) return;
    if (ITEMNUM(num) == NOITEM) return;

    strip = AWindow->MenuStrip;

    menu = grabMenu(strip, num);
    /* if this whole menu is disabled, don't add anything */
    if ((menu->Flags & MENUENABLED) == NULL) return;

    firstpick = grabItem(menu, num);
    /* if this item is disabled, don't add anything */
    if ((firstpick->Flags & ITEMENABLED) == NULL) return;

    /* test if subnum is not a sub while there IS a sublist available */
    if ((SUBNUM(num) == NOSUB))
	{
	if (firstpick->SubItem) return;
	}
    else
	{
	/* SUBNUM is for a real sublist selection */
	firstpick = grabSub(firstpick, num); /* advance our pointer */
	/* if this item is disabled, don't add anything */
	if ((firstpick->Flags & ITEMENABLED) == NULL) return;
	}

    /* set CHECKED.
     * if MENUTOGGLE, may reset CHECKED.
     */
    if (firstpick->Flags & CHECKIT)
    {
	/* has changed state already this "session"
	 * won't operate until resetMenu() called
	 */
	if (firstpick->Flags & MENUTOGGLED) 
	{
		return;
	}

	if (firstpick->Flags & CHECKED) 
	{
	    /* This item is already selected. 
	     * Is it a menu toggle item?
	     */
	    if (firstpick->Flags & MENUTOGGLE)
	    {
		/* want to toggle it off */
		firstpick->Flags &= ~CHECKED;
	    }

	    /* otherwise: checked, but not toggle.
	     * for compatibility, user needs to hear selection
	     */
	}
	else 	/* was off: turn on, menutoggle or not */
	{
	    /* turn it on */
	    firstpick->Flags |= CHECKED;
	}

	/* won't get here unless CHECKIT really was toggled */
	firstpick->Flags |= MENUTOGGLED;	/* no more changes until resetMenu() */
	CrudeRedraw = TRUE;
    }

    /*****************************************************************/
    /* add selected menu "option" to NextSelect chain 		     */
    /* RJ code, with FIX_OPTION_DELINK and comments by jimm	     */
    /*	(let's make that clear ...)				     */
    /*****************************************************************/

#define FIX_OPTION_DELINK	1
/* jimm: 2/12/90: fix NextSelect chain */

/* don't kiss off the items hanging off of this item yet! */
#if ! FIX_OPTION_DELINK
    /* since this one will end up at the end of the list,
     * initialize the NextSelect parameter to NULL
     */
    firstpick->NextSelect = MENUNULL;
#endif

    /* if the option list is currently NULL, add it at the beginning */
    if ((USHORT)(*firstoption) == MENUNULL)
    {
	*firstoption = num;
	firstpick->NextSelect = MENUNULL;	/* and terminate */
    }

    /* there already exists something in the NextSelect chain	*/
    else
    {
	/* get the address of the first option in the list */
	pickptr = ItemAddress(strip, *firstoption);

	/* the options list is currently not null, so test if this one is
	 * currently in the list
	 */
	if (*firstoption == num)	/* it's at the head of the list */
	    {

	    /* if it's the only one in the list, return, else extract it */
	    if (pickptr->NextSelect == MENUNULL) goto EXCLUDETEST;

	    /* 'extracting' now	*/
	    *firstoption = pickptr->NextSelect;
	    }

	/* advance pickptr to point to last in the list
	/* check if this one is already in the list, extract it if so */
	do
	    {
	    /* if this is already in the list, remove it */
	    /* FIX_OPTION_DELINK: here's where we need to have
	     * the original link intact in firstpick
	     */
	    if (pickptr->NextSelect == num)
		pickptr->NextSelect = firstpick->NextSelect;
	    if (pickptr->NextSelect != MENUNULL)
		pickptr = ItemAddress(strip, pickptr->NextSelect);
	    }
	while (pickptr->NextSelect != MENUNULL);

	/* pickptr points to the last in the list.  link it to the new one */
	pickptr->NextSelect = num;

#if FIX_OPTION_DELINK
	/* since this one is NOW at the end of the list,
	 * initialize the NextSelect parameter to NULL
	 */
	firstpick->NextSelect = MENUNULL;
#endif
    }

EXCLUDETEST:
    /* now, the mutual-exclude stuff */
    /*??? this is the crude way for now:  if there's any change, set the
     *??? redraw flag so that the entire item/subitem display will be
     *??? redrawn as needed.  someday, it will be better to just check
     *??? and uncheck and ghost those items that need it!
     */
    mutual = firstpick->MutualExclude;

    /* if this selected has no subitem component, get the address of the
     * first item, else get the address of the first subitem
     */
    if (SUBNUM(num) == NOSUB)
	pickptr = ItemAddress(strip, 
		SHIFTMENU(MENUNUM(num))
		  | SHIFTITEM(0)
		  | SHIFTSUB(NOSUB) );
    else
	pickptr = ItemAddress(strip, 
		SHIFTMENU(MENUNUM(num))
		  | SHIFTITEM(ITEMNUM(num)) 
		  | SHIFTSUB(0) );

    /* get the max number of items on this plane */
    firstpick = pickptr;
    max = 0;
    while (pickptr)
	{
	max++;
	pickptr = pickptr->NextItem;
	}

    for (i = 0; i < max; i++)
	{
	if (mutual & 0x1) /* exclude this one? */
	    {
	    /* yes, exclude this one */
	    if (firstpick->Flags & CHECKIT) if (firstpick->Flags & CHECKED)
		{
		/* this one is checkable and currently checked
		 * uncheck it
		 * ??? someday, redraw just this item, and ghost it if
		 * ??? it's not SELECTed
		 */
		firstpick->Flags &= ~CHECKED;
		CrudeRedraw = TRUE; /* now we'll redraw (sigh) */
		}
	    }
	/* to allow for planes that have more than 32 items, make sure 
	 * that the top mutual bit is always cleared (so after 32, 
	 * no further excludes)
	 */
	mutual = (mutual >> 1) & 0x7FFFFFFF;
	firstpick = firstpick->NextItem;
	}

CRUDETEST:
#if 1
    if (draw && CrudeRedraw)
/*???    if (CrudeRedraw) */
/*???	if ((IBase->MenuDrawn & ~NOSUB) == (IBase->MenuSelected & ~NOSUB))*/
	    {
	    /* ok, erase and redraw menu (for now!) */
	    if (SUBNUM(num) == NOSUB)
		{
		eraseItem();
		drawItem(num);
		highItem();
		}
	    else
		{
		eraseSub();
		drawSub(num);
		highSub();
		}
	    }	
#else
    if (draw && CrudeRedraw)
	{
	/* ok, erase and redraw menu (for now!) */
	if (SUBNUM(num) == NOSUB)
	    {
	    if ( IBase->Flags & GOODITEMDRAWN )
		{
		highItem();
		checkmarkMenu( menu, menu->FirstItem, FALSE );
		highItem();
		}
	    }
	else
	    {
	    if ( IBase->Flags & GOODSUBDRAWN )
		{
		highSub();
		checkmarkMenu( menu, grabItem(menu, num), TRUE );
		highSub();
		}
	    }
	}	
#endif
}

/* ====================================================================== */
/* ====================================================================== */
/* ====================================================================== */

UBYTE InputDeviceName[] = "input.device";

struct IntuitionBase *OpenIntuition()
{
    ULONG mon;

    struct IntuitionBase *IBase = fetchIBase();

    if (IBase->LibNode.lib_OpenCnt) 
    {
	return(IBase);
    }

    IBase->LibNode.lib_OpenCnt++;

    /* jimm: 5/30/90: set up mode aliasing in gfxbase	*/
    mon = NTSC_MONITOR_ID >> 16;
    if ( IBase->GfxBase->DisplayFlags & PAL )
    {
	IBase->Flags |= MACHINE_ISPAL;
	mon = PAL_MONITOR_ID >> 16;
	IBase->MouseScaleY = PAL_MOUSESCALEY;
    }
    SetDefaultMonitor( mon );

    /* Under V37, setPrefs was called inside initIntuition().  We
     * moved it here after the determination of the default monitor
     * for this machine.
     *
     * One subtle twist on all this is that OpenIntuition() used
     * to init IBase->Flags to be equal to VIRGINDISPLAY.  This
     * actually cleared the SEENSETPREFS flag that had been set by
     * the earlier call to setPrefs(), allowing dos's SetPrefs()
     * of devs:system-configuration to be heeded.  So here we
     * have to clear the flag explicitly by hand...
     * 
     * setprefs sets up TextOverscan from WB Normal, ...
     */
    D( printf("OpenIntuition calling SetPrefs\n") );
    /* We don't want our own call to SetPrefs() to affect the pointer */
    SETFLAG( IBase->Flags, SEENIPOINTER );
    setPrefs(IBase->Preferences, sizeof(struct Preferences), FALSE);
    CLEARFLAG( IBase->Flags, SEENSETPREFS|SEENIPOINTER );

    OFF_SPRITE;
    OFF_DISPLAY;

    IBase->Flags |= VIRGINDISPLAY;
    /** jimm: 3/24/86: never used * IBase->Selected = NULL; **/
    IBase->MenuDrawn = MENUNULL;

    /* the IOReq block is temporary and thrown away when exiting */
    IBase->KeymapBase = (APTR) TaggedOpenLibrary( OLTAG_KEYMAP );
    if ( ! IBase->KeymapBase )
    {
	D( printf("NO KEYMAP LIBRARY!!!! INTUITION GOING SOUTH!!\n") );
	D( Alert( AN_NoConsole ) );
    }

    IBase->CurrentState = sNoWindow;

/* install Intuition() and IntuiLeap() into the input stream path.
 * after this installation, the Input Stream Merger will call IntuiLeap()
 * with two pointers, the first of which is a pointer to an IntuiMessage,
 * the second of which is currently unused by Intuition().  IntuiLeap()
 * then configures the data (stuffs it on the stack) in a way that
 * Intuition, a C procedure, can recognize
 */
    if (OpenDevice(InputDeviceName, 0, &IBase->InputRequest, 0) == 0)
    {
	/* successful open of the Input Device */

	/* that the ReplyPort is NULL means that Intuition can't close, which
	 * it currently doesn't do anyway
	 */
	IBase->InputRequest.io_Message.mn_ReplyPort = NULL;
	IBase->InputRequest.io_Command = IND_ADDHANDLER;
	IBase->InputRequest.io_Data = &IBase->InputInterrupt;

	IBase->InputInterrupt.is_Node.ln_Pri = 50;	/* serious priority */
	IBase->InputInterrupt.is_Node.ln_Name  = IntuiName;
	IBase->InputInterrupt.is_Code = IntuiLeap; /* IntuiLeap gets events */
	IBase->InputInterrupt.is_Data = (APTR) IBase;

	SendIO(&IBase->InputRequest);

	/* stash this guy for later use	*/
	IBase->InputDeviceTask = (struct Task *) FindTask( InputDeviceName );
    }

    return(IBase);
}
@


38.15
log
@Renamed borderPatrol() to internalBorderPatrol().
drawEmbossedBorder() now takes DRAWGADGETS_xxx flags.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.14 92/08/03 15:54:49 peter Exp Locker: peter $
d649 1
a649 1
	Alert( AN_NoConsole );
@


38.14
log
@Ensures that my own call to setPrefs() doesn't trigger pointer stuff.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.13 92/07/17 17:38:46 peter Exp Locker: peter $
d98 13
a110 1
borderPatrol( s )
d204 4
a207 2
	    /* Intuition's refresh actvity */
	    drawEmbossedBorder( w, FALSE );	/* frame and ALL gadgets */
@


38.13
log
@Fixed bug where initial SetPrefs() of LaceWB and FontHeight was ignored.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.12 92/06/22 13:01:51 peter Exp Locker: peter $
d618 2
d621 1
a621 1
    IBase->Flags &= ~SEENSETPREFS;
@


38.12
log
@Fixed my part of the "booting in PAL" problem.  Was losing MACHINE_ISPAL
flag.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.11 92/06/03 17:32:03 peter Exp Locker: peter $
d604 11
a614 1
    /*
d619 1
@


38.11
log
@Calls SetDefaultMonitor() instead of poking.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.10 92/05/27 14:17:11 peter Exp Locker: peter $
d613 1
a613 1
    IBase->Flags = VIRGINDISPLAY;
@


38.10
log
@BeginUpdate failure now noticed.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.9 92/05/21 17:41:45 peter Exp Locker: peter $
d583 2
d595 1
a595 2
    IBase->GfxBase->monitor_id = NTSC_MONITOR_ID >> 16;

d599 1
a599 1
	IBase->GfxBase->monitor_id = PAL_MONITOR_ID >> 16;
d602 1
@


38.9
log
@Removed ON_PATROL stuff.  Added beta alert.  Now call Alert() instead
of execAlert().
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.8 92/05/15 14:07:15 peter Exp Locker: peter $
d257 1
a257 1
BeginRefresh(window)
d260 1
a260 1
    LockLayerInfo(&window->WScreen->LayerInfo);
d262 4
a265 1
    if (window->BorderRPort) LockLayerRom(window->BorderRPort->Layer);
d267 6
a272 3
    BeginUpdate(window->WLayer);
    UnlockLayerInfo(&window->WScreen->LayerInfo);
    DBER( printf("begin refresh window %lx\n", window));
d279 1
a279 1
EndRefresh(window, complete)
d284 4
a287 1
    if (complete) window->WLayer->Flags &= ~LAYERREFRESH;
d289 6
a294 2
    EndUpdate(window->WLayer, complete);
    if (window->BorderRPort) UnlockLayerRom(window->BorderRPort->Layer);
@


38.8
log
@No longer call freeMouse() in OpenIntuition() since setPrefs() takes
care of that.  Now uses exec alert-code constant.  Uses friendly names
for new layer damage bits.  BorderPatrol() now goes through a stub
so that we can stack-swap.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.7 92/05/01 13:53:11 peter Exp Locker: peter $
a122 1
    SETFLAG( IBase->Flags, ON_PATROL );
a251 1
    CLEARFLAG( IBase->Flags, ON_PATROL );
d607 1
a607 1
	execAlert( AN_NoConsole );
d620 1
a620 1
	{
d639 1
a639 1
	}
@


38.7
log
@Took out 2nd BorderPatrol() parameter.  ScrollWindowRaster() now does
only simple damage processing.  Now uses LAYERIREFRESH to optimize
refresh for non-responsive windows.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.6 92/04/13 16:47:21 peter Exp Locker: peter $
d98 1
a98 1
BorderPatrol( s )
d110 1
d123 1
d138 1
a138 1
	 * Layers now sets an extra flag bit (LAYERIREFRESH) when
d148 2
a149 2
	if ( ( l->Flags & ( LAYERREFRESH|LAYERIREFRESH ) ) ==
	    ( LAYERREFRESH|LAYERIREFRESH ) )
d244 1
a244 1
	w->WLayer->Flags &= ~LAYERIREFRESH;
d253 1
a602 1
    freeMouse();
d609 1
a609 1
	execAlert( NOKEYMAP );
a644 3



@


38.6
log
@Uses TaggedOpenLibrary() to save space.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.5 92/04/13 16:24:35 peter Exp $
d98 1
a98 5
/* Peter 23-Mar-92:  New "onewindow" parameter means only the specified
 * window could have been damaged, so don't scan the other windows on
 * the screen.  Only ScrollWindowRaster() sets this.
 */
BorderPatrol( s, onewindow )
a99 1
struct Window *onewindow;
d125 1
a125 4
    if ( !( w = onewindow ) )
    {
	w = s->FirstWindow;
    }
d135 13
a147 2
	/** jimm: 11/18/85 layer change **/
	if (l->Flags & LAYERREFRESH)
d236 7
a244 4
	if ( onewindow )
	{
	    w = NULL;
	}
d247 1
a247 12
    /** Refresh Screen Bar **/
    l = s->BarLayer;
    if ( (l->Flags & LAYERREFRESH) && ( !onewindow ) )
    {
	DREFRESH(printf("BP: refresh barlayer\n"));
	BeginUpdate(l);
	DREFRESH( debugRefresh( s->BarLayer->rp, s->Width, s->BarHeight ) );
	screenbar(s);
	/*** ZZZ: Won't EndUpdate() reset this flag? **/
	l->Flags &= ~LAYERREFRESH;
	EndUpdate(l, TRUE);
    }
@


38.5
log
@Now calls setPrefs() instead of just setIBasePrefs(), and decides
if machine is PAL.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.4 92/04/07 17:53:39 peter Exp Locker: peter $
a584 1
    IBase->MouseScaleY = NTSC_MOUSESCALEY;
@


38.4
log
@Minor change for SAS test-compile.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.3 92/04/01 15:06:00 peter Exp Locker: peter $
d31 4
d583 17
a599 3
    D( printf("OpenIntuition calling setIBasePrefs\n") );
    D( printf("Do I really need to?\n") );
    setIBasePrefs();
d609 1
a609 1
    IBase->KeymapBase = (APTR) OpenLibrary("keymap.library", 0 );
@


38.3
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.2 92/03/24 11:56:27 peter Exp Locker: peter $
a110 1
    struct Layer *wlayer;
d444 1
a444 1
	    if (pickptr->NextSelect NOT= MENUNULL)
d447 1
a447 1
	while (pickptr->NextSelect NOT= MENUNULL);
@


38.2
log
@Now pass NULL for new second parameter to BorderPatrol().
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.1 91/06/19 18:04:57 peter Exp Locker: peter $
d256 1
a257 132
/****** intuition.library/BeginRefresh *****************************************
*
*    NAME
*	BeginRefresh -- Sets up a window for optimized refreshing.
*
*    SYNOPSIS
*	BeginRefresh( Window )
*		      A0
*
*	VOID BeginRefresh( struct Window * );
*
*    FUNCTION
*	This routine sets up your window for optimized refreshing.  
*
*	Its role is to provide Intuition integrated access to the Layers
*	library function BeginUpdate().  Its additional contribution is
*	to be sure that locking protocols for layers are followed, by
*	locking both layers of a WFLG_GIMMEZEROZERO window only after the
*	parent Layer_Info has been locked.  Also, the WFLG_WINDOWREFRESH
*	flag is set in your window, for your information.
*
*	The purpose of BeginUpdate(), and hence BeginRefresh(), is to 
*	restrict rendering in a window (layer) to the region that needs
*	refreshing after an operation such as window sizing or uncovering. 
*	This restriction to the "damage region" persists until you call
*	EndRefresh().
*	
*	For instance, if you have a WFLG_SIMPLE_REFRESH window which is
*	partially concealed and the user brings it to the front, you can
*	receive an IDCMP_REFRESHWINDOW message asking you to refresh your
*	display.  If you call BeginRefresh() before doing any of the
*	rendering, then the layer that underlies your window will be arranged
*	so that the only rendering that will actually take place will be that
*	which goes to the newly-revealed areas.  This is very performance-
*	efficient, and visually attractive.
*
*	After you have performed your refresh of the display, you should call
*	EndRefresh() to reset the state of the layer and the window.  Then you
*	may proceed with rendering to the entire window as usual.
*
*	You learn that your window needs refreshing by receiving either a
*	message of class IDCMP_REFRESHWINDOW through the IDCMP, or an input
*	event of class IECLASS_REFRESHWINDOW through the Console device.
*	Whenever you are told that your window needs refreshing, you should
*	call BeginRefresh() and EndRefresh() to clear the refresh-needed
*	state, even if you don't plan on doing any rendering.  You may relieve
*	yourself of even this burden by setting the WFLG_NOCAREREFRESH flag
*	when opening your window.
*
*	WARNING: You should only perform graphics refreshing operations
*	during the period between calling BeginRefresh() and EndRefresh().
*	In particular, do not call RefreshGadgets() or RefreshGList(), since
*	the locking protocol internal to Intuition runs the risk of creating
*	a deadlock.  Note that Intuition refreshes the gadgets (through
*	the damage region) before it sends the IDCMP_REFRESHWINDOW message.
*
*	ANOTHER WARNING: The concept of multiple refresh passes using
*	EndRefresh( w, FALSE ) is not completely sound without further
*	protection.  The reason is that between two sessions, more
*	damage can occur to your window.  Your final EndRefresh( w, TRUE )
*	will dispose of all damage, including the new, and your
*	initial refreshing pass will never get the chance to refresh
*	the new damage.
*
*	To avoid this, you must protect your session using LockLayerInfo()
*	which will prevent Intuition from performing window operations
*	or anything else which might cause further damage from occurring.
*	Again, while holding the LayerInfo lock make no Intuition
*	function calls dealing with gadgets; just render.
*
*	You can, however, call InstallClipRegion() for the different
*	refresh passes, if you have two clip regions.
*
*	SIMILAR WARNING: Your program and Intuition "share" your window
*	layer's DamageList.  BeginRefresh() helps arbitrate this
*	sharing, but the lower-level function layers.library/BeginUpdate()
*	does not.  It isn't really supported to use BeginUpdate() on
*	a window's layer, but if you do--for whatever reason--it is
*	critical that you first acquire the LayerInfo lock as in
*	the above example: even if you only have one pass of refresh
*	rendering to do.  Otherwise, the refreshing of your window's
*	borders and gadgets can be incomplete, and the problem might
*	occur only under certain conditions of task priority and
*	system load.
*
*    EXAMPLE
*	Code fragment for "two pass" window refreshing, in response
*	to an IDCMP_REFRESHWINDOW message:
*	switch ( imsg->Class )
*	{
*	...
*	case IDCMP_REFRESHWINDOW:
*	    window = imsg->IDCMPWindow;
*
*	    \* this lock only needed for "two-pass" refreshing *\
*	    LockLayerInfo( &window->WScreen->LayerInfo );
*
*	    \* refresh pass for region 1 *\
*	    origclip = InstallClipRegion( window->WLayer, region1 );
*	    BeginRefresh( window );
*	    myRefreshRegion1( window );
*	    EndRefresh( window, FALSE );
*
*	    \* refresh pass for region 2 *\
*	    InstallClipRegion( window->WLayer, region2 );
*	    BeginRefresh( window );
*	    myRefreshRegion2( window );
*	    EndRefresh( window, TRUE );		\* and dispose damage list *\
*
*	    \* restore and unlock *\
*	    InstallClipRegion( window->WLayer, origclip );
*	    UnlockLayerInfo( &window->WScreen->LayerInfo );
*	    break;
*	...
*	}
*	
*
*    INPUTS
*	Window = pointer to the window structure which needs refreshing
*
*    RESULT
*	None
*
*    BUGS
*	This function should check the return code of
*	layers.library/BeginUpdate(), and abort if that function fails.
*
*    SEE ALSO
*       EndRefresh(), layers.library/BeginUpdate(), OpenWindow()
*	layer.library/InstallClipRegion(), graphics.library/LockLayerInfo()
*	The "Windows" chapter of the Intuition Reference Manual
*****************************************************************************/
d272 1
a273 56
/****** intuition.library/EndRefresh ***************************************
*
*    NAME
*	EndRefresh -- End the optimized refresh state of the window.
*
*    SYNOPSIS
*	EndRefresh( Window, Complete )
*		    A0      D0
*
*	VOID EndRefresh( struct Window *, BOOL );
*
*    FUNCTION
*	This function gets you out of the special refresh state of your 
*	window.  It is called following a call to BeginRefresh(), which 
*	routine puts you into the special refresh state.  While your window
*	is in the refresh state, the only rendering that will be wrought in
*	your window will be to those areas which were recently revealed and
*	need to be refreshed.
*
*	After you've done all the refreshing you want to do for this window, 
*	you should call this routine to restore the window to its
*	non-refreshing state.  Then all rendering will go to the entire
*	window, as usual.
*   
*	The 'Complete' argument is a boolean TRUE or FALSE value used to 
*	describe whether or not the refreshing you've done was all the
*	refreshing that needs to be done at this time.  Most often, this
*	argument will be TRUE.  But if, for instance, you have multiple
*	tasks or multiple procedure calls which must run to completely
*	refresh the window, then each can call its own Begin/EndRefresh() 
*	pair with a Complete argument of FALSE, and only the last calls
*	with a Complete argument of TRUE.
*
*	WARNING:  Passing this function the value of FALSE has its
*	pitfalls.  Please see the several caveats in the autodoc for
*	BeginRefresh().
*
*	For your information, this routine calls the Layers library function
*	EndUpdate(), unlocks your layers (calls UnlockLayerRom()), clears
*	the LAYERREFRESH bit in your Layer Flags, and clears the
*	WFLG_WINDOWREFRESH bit in your window Flags.
*
*    INPUTS
*	Window = pointer to the window currently in optimized-refresh mode
*	Complete = Boolean TRUE or FALSE describing whether or not this
*           window is completely refreshed
*
*    RESULT
*	None
*
*    BUGS
*
*    SEE ALSO
*	BeginRefresh(), layers.library/EndUpdate(),
*	graphics.library/UnlockLayerRom()
*****************************************************************************/
@


38.1
log
@Removed !EMBOSSME and other obsolete code.
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 38.0 91/06/12 14:25:13 peter Exp Locker: peter $
d94 7
a101 2
BorderPatrol( s )
struct Screen *s;
d127 4
a130 1
    w = s->FirstWindow;
d232 4
d240 1
a240 1
    if (l->Flags & LAYERREFRESH)
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: isupport.c,v 36.40 91/03/08 20:16:26 peter Exp $
a177 1
#if EMBOSSME
a178 3
#else
	    drawWindowBorder(w);
#endif
a462 15

#if OLDLAYERSTUFF
/** table drive me **/
int UpfrontLayer();
int BehindLayer();
typedef int	(*PFI)();
PFI deptharrange[] =
	{
	UpfrontLayer,	/* order must match constants IUPFRONT, IBEHIND */
	BehindLayer
	};
#endif



a526 2
#if 1	/* try it again */

a564 10
#else	/* same, without any MENUTOGGLE statments */
    if (firstpick->Flags & CHECKIT)
	{
	if (!(firstpick->Flags & CHECKED))
	    {
		CrudeRedraw = TRUE;
	    }
	firstpick->Flags |= CHECKED;	/* redundant, but small code */
	}
#endif
a772 1
#if !NOISM
a773 8
#else
    IBase->StateReturn = SRET_IDLE;

    /* initialize input event chain */
    IBase->EventCount = 0;	/* counter for static array */
    IBase->IEvents = NULL;
    IBase->EventKey = NULL;
#endif
@
