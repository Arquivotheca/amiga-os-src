head     38.6;
branch   ;
access   ;
symbols  V40_85:38.6 V40_71:38.6 V40_68:38.6 V40_65:38.6 V40_47:38.6 V40_45:38.6 V40_37:38.6 V40_34:38.6 V40_29:38.6 V39_2415:38.6 V39_2369:38.6 V39_2339:38.6 V39_2332:38.6 V39_2275:38.6 V39_2256:38.6 V39_2210:38.5 V39_2192:38.5 V39_2084:38.5 V39_2082:38.5 V39_2076:38.5 V39_2073:38.5 V39_2058:38.5 V39_2051:38.5 V39_2031:38.5 V39_2017:38.5 V39_2012:38.5 V39_1985:38.5 V39_1933:38.5 V39_1819:38.5 V39_1805:38.5 V39_1783:38.5 V39_1695:38.5 V39_1621:38.5 V39_1620:38.5 V39_1508:38.5 V39_1485:38.5 V39_1461:38.5 V39_1458:38.5 V39_1456:38.5 V39_1405:38.5 V39_1368:38.5 V39_1360:38.5 V39_1324:38.5 V39_1147:38.5 V39_1143:38.5 V39_1141:38.5 V39_1120:38.5 V39_1116:38.5 V39_1104:38.5 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.6
date     92.11.25.15.40.00;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.09.16.18.44;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.07.19.48.33;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.02.12.03.34;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.11.13.38.14;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.17.55.15;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.21.15;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.6
log
@Deleted some dead code.  ImageClass now uses UnpackStructureTags().
@
text
@/*** imageclass.c **************************************************************
 *
 * imageclass.c -- image class
 *
 *  $Id: imageclass.c,v 38.5 92/04/09 16:18:44 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"
#include "classusr.h"
#include "classes.h"
#include "imageclass.h"

#include <hardware/blit.h>
#include <utility/pack.h>

#define D(x)	;
#define D2(x)	;

/* instance data for image class
 *
 * NOTE WELL: this class carefully cheats and does not
 * assume that an image it is passed is really an Object.
 * This lets us use it for compatible, old-style images.
 *
 * So BE CAREFUL.
 */
struct IIData {
    struct Image	iid_Image;
};

#define IM(o)	((struct Image *)(o))

Class	*
initImageClass()
{
    ULONG imageDispatch();
    Class	*makePublicClass();
    struct IntuitionBase	*IBase = fetchIBase();
    extern UBYTE	*ImageClassName;
    extern UBYTE	*RootClassName;

    D( printf("initImageClass\n") );
#if 1
    /* cache a pointer to this public class where Intution
     * can get it quickly.  I won't let it go away ever.
     */
    return ( IBase->ImageClassPtr = makePublicClass(ImageClassName, RootClassName,
		sizeof(struct IIData), imageDispatch) );
    
#else
    return (makePublicClass(ImageClassName, RootClassName,
		sizeof(struct IIData), imageDispatch));
#endif
}


ULONG imagePackTable[] =
{
    PACK_STARTTABLE( IA_Dummy ),
    PACK_ENTRY( IA_Dummy, IA_LEFT, Image, LeftEdge, PKCTRL_WORD ),
    PACK_ENTRY( IA_Dummy, IA_TOP, Image, TopEdge, PKCTRL_WORD ),
    PACK_ENTRY( IA_Dummy, IA_WIDTH, Image, Width, PKCTRL_WORD ),
    PACK_ENTRY( IA_Dummy, IA_HEIGHT, Image, Height, PKCTRL_WORD ),
    PACK_ENTRY( IA_Dummy, IA_FGPEN, Image, PlanePick, PKCTRL_UBYTE ),
    PACK_ENTRY( IA_Dummy, IA_BGPEN, Image, PlaneOnOff, PKCTRL_UBYTE ),
    PACK_ENTRY( IA_Dummy, IA_DATA, Image, ImageData, PKCTRL_ULONG ),
    PACK_ENDTABLE,    
};

/* Since setImageAttrs() is nothing more than a call to PackStructureTags(),
 * it's smaller to take it in-line.  It's clearer to leave it as a macro.
 */
#define setImageAttrs( cl, o, msg ) \
    PackStructureTags( IM(o), imagePackTable, ((struct opSet *)msg)->ops_AttrList )


ULONG
imageDispatch( cl, o, msg )
Class   *cl;
Object  *o;
Msg     msg;
{
    Object  		*newobj;

    D( printf("imageDispatch, class %lx, object %lx, msg %lx\n", cl,o,msg));

    switch ( msg->MethodID  )
    {
    case OM_NEW:
	/* have "extra size" parameter */
	if ( newobj = (Object *) SSM( cl, o, msg ) )
	{
	    /* this is really an object */
	    IM(o) = &((struct IIData *) INST_DATA( cl, newobj ))->iid_Image;

	    /* set 'o' to point to new object, so I don't get confused	*/

	    /* mandatory init */
	    IM(o)->Depth = CUSTOMIMAGEDEPTH;
	    IM(o)->Width = 80;	/* random numbers */
	    IM(o)->Height = 40;

	    setImageAttrs( cl, newobj, msg );
	}

	return ( (ULONG) newobj );

    case OM_SET:
#if 0
	/* pass first to superclass, 
	 * but ONLY if this is really an image *object*
	 *
	 * NO NEED TO DO THIS, since rootclass has no OM_SETtable things
	 */
	if ( IM(o)->Depth == CUSTOMIMAGEDEPTH ) SSM( cl, o, msg );
#endif
	setImageAttrs( cl, o, msg  );
	return ( (ULONG) 1 );

    case OM_GET:
	return ( getImageAttr( cl, o, msg  ) );

    /* image class methods.  
     * this class mimics old style struct Image
     */
    case IM_DRAW:		/* draw with state 	*/
    case IM_DRAWFRAME:		/* ignore frame dims	*/
	return ( drawImage( cl, o, msg ) );
    case IM_HITFRAME:
    case IM_HITTEST:
	return ( hittestImage( cl, o, msg ) );
    case IM_ERASE:
    case IM_ERASEFRAME:
	return ( eraseImage( cl, o, msg ) );

#if 0
    case OM_DISPOSE:
#endif
    default:
	return ( SSM( cl, o, msg ) );
    }
}

/*
 * process old-style images with coolness
 */
drawImage( cl, o, msg )
Class		*cl;
Object		*o;
struct impDraw	*msg;
{
    extern USHORT	BPattern[];
    ULONG	retval;

#if 1
    if ( msg->MethodID == IM_DRAWFRAME )
    {
	/* try using true class's DRAW method	*/
	msg->MethodID = IM_DRAW;
	retval =  SM( o, msg );
	msg->MethodID = IM_DRAWFRAME;
	return ( retval );
    }

    /* all states start with a drawImage */
    /* I give up on trying to do XOR for SELECTED and ghosting.
     * If a state is unrecognized by the subclass, then
     * it should be NORMAL.
     * For DISABLED state, this still doesn't help
     * anything to do ghosting here
     */
    drawImageGrunt( msg->imp_RPort, IM(o),
	    msg->imp_Offset.X, msg->imp_Offset.Y, 0x00C0 );
#else
    /* forgive my sloppy minterms
     * I believe that one of them is copy, one is XOR
     */
    minterm =  ( msg->imp_State  == IDS_SELECTED )? ( ANBC | ABNC ): 0x00C0 ;

    /* all states start with a drawImage */
    drawImageGrunt( msg->imp_RPort, IM(o),
	    msg->imp_Offset.X, msg->imp_Offset.Y, minterm );

    switch ( msg->imp_State )
    {
    case IDS_NORMAL:
	/* it's OK */
	break;
    case IDS_SELECTED:
	/* already OK, by using minterm */
	break;
    case IDS_DISABLED:
	/* need to ghost stuff */
	/* ZZZ: needed to pick a pen to ghost with.
	 * elected to use planeonoff for now
	 */
	b = (struct IBox *) &IM(o)->LeftEdge;
	BlastPattern( msg->imp_RPort, b->Left, b->Top, 
	    b->Left+b->Width-1, b->Top+b->Height-1,
		BPattern, 1, IM(o)->PlaneOnOff, 0, JAM1);
	break;
    case IDS_BUSY:
    case IDS_INDETERMINANT:
	/* no op?  same as NORMAL */
	break;
    }
#endif

}

eraseImage( cl, o, msg )
Class		*cl;
Object		*o;
struct impErase	*msg;
{
    unsigned int	width, height;
    unsigned int	left, top;

    width = IM(o)->Width;
    height = IM(o)->Height;

    if ( msg->MethodID == IM_ERASEFRAME )
    {
	width = msg->imp_Dimensions.Width;
	height = msg->imp_Dimensions.Height;
    }

    /* jimm: 4/16/90 add in offset like I should have	*/
    left = IM(o)->LeftEdge + msg->imp_Offset.X;
    top = IM(o)->TopEdge + msg->imp_Offset.Y;

    /* ZZZ: should probably check validity */
    EraseRect( msg->imp_RPort, left, top, left + width - 1, top + height - 1 );
}

/*
 * you could also have HITFRAME get run as HITTEST,
 * akin to DRAWFRAME, but this is easier for everyone.
 */
hittestImage( cl, o, msg )
Class		*cl;
Object		*o;
struct impHitTest	*msg;
{
    struct IBox	box;

    box = *IM_BOX( IM(o) );

    if ( msg->MethodID == IM_HITFRAME )
    {
	box.Width = msg->imp_Dimensions.Width;
	box.Height = msg->imp_Dimensions.Height;
    }

    return ( ptInBox( msg->imp_Point, &box ) );
}


getImageAttr( cl, o, msg )
Class		*cl;
Object		*o;
struct opGet	*msg;
{
    struct TagItem gettags[2];

#if 0
    /* NO NEED TO DO THIS, since rootclass has no OM_GETtable things */
    if ( IM(o)->Depth == CUSTOMIMAGEDEPTH )
    {
	retval = SSM( cl, o, msg );
    }
    /* Now we override with class-specific get's */
#endif

    gettags[0].ti_Tag = msg->opg_AttrID;
    gettags[0].ti_Data = (ULONG) msg->opg_Storage;
    gettags[1].ti_Tag = TAG_DONE;

    return( UnpackStructureTags( IM(o), imagePackTable, gettags ) );
}


/* ********** INTUITION ENTRY POINTS *********/

DrawImage(rport, image, xoffset, yoffset)
struct RastPort *rport;
struct Image *image;
int xoffset, yoffset;
{
    D( printf("DI\n") );
    DrawImageState(rport, image, xoffset, yoffset, IDS_NORMAL, NULL);
}

/* pack short point components into a longword */
#define POINT(x,y)	(((y) & 0xffff) | (x<<16))

/*** intuition.library/DrawImageState ***/

DrawImageState(rport, image, xoffset, yoffset, state, drinfo )
struct RastPort *rport;
struct Image *image;
int xoffset, yoffset;
struct DrawInfo	*drinfo;
{
    ULONG		offset = POINT(xoffset, yoffset);
    struct RastPort	clonerp;

    D( printf("DIS\n") );

    cloneRP( &clonerp, rport );
    while (image)
    {
	sendCompatibleImageMessage( image, IM_DRAW, &clonerp,
	    offset, state, drinfo);

	image = image->NextImage;
    }
}

/*** intuition.library/PointInImage ***/

PointInImage( point, image )
struct Point	point;
struct Image	*image;
{
    /* assuming struct Point passes as a long */
    if ( ! image ) return ( TRUE );
    return( sendCompatibleImageMessage( image, IM_HITTEST, point ) );
}

/*** intuition.library/EraseImage ***/

EraseImage(rport, image, xoffset, yoffset )
struct RastPort *rport;
struct Image *image;
int xoffset, yoffset;
{
    ULONG		offset = POINT(xoffset, yoffset);
    struct RastPort	clonerp;

    cloneRP( &clonerp, rport );
    while (image)
    {
	sendCompatibleImageMessage( image, IM_ERASE, &clonerp, offset );

	image = image->NextImage;
    }
}


/*
 * The only reason we get away with this is that we took care
 * that the methods for imageclass don't assume that the 
 * image is really an object.
 */
sendCompatibleImageMessage( image, msg1 )
struct Image	*image;
ULONG		msg1;
{
    D( printf("sCIM\n" ) );

    if ( !image ) return ( 0 );

    if ( image->Depth != CUSTOMIMAGEDEPTH )
    {
	D( printf("      compatibility mode\n") );
	/* cache imageclass in IBase */
	return ( CM( fetchIBase()->ImageClassPtr, image, &msg1 ) );
    }
    else 
    {
	return ( SM( image, &msg1 ) );
    }
}
@


38.5
log
@Uses PackStructureTags().
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 38.4 92/04/07 19:48:33 peter Exp Locker: peter $
d115 1
d118 2
d122 1
a263 49
#if 0
setImageAttrs( cl, o, msg )
Class		*cl;
Object		*o;
struct opSet	*msg;
{
#if 1
    PackStructureTags( IM(o), imagePackTable, msg->ops_AttrList );
#else
    struct TagItem	*NextTagItem();
    struct TagItem	*tags = msg->ops_AttrList;
    struct TagItem	*tag;
    ULONG		tidata;

    D2( printf("setImageA im %lx,tags %lx\n", IM(o), tags ));
    D2( dumpTagItems( NULL, tags ) );

    while ( tag = NextTagItem( &tags ) )
    {
	tidata = tag->ti_Data;
	switch ( tag->ti_Tag )
	{
	case IA_LEFT:
	    IM(o)->LeftEdge = tidata;
	    break;
	case IA_TOP:
	    IM(o)->TopEdge = tidata;
	    break;
	case IA_WIDTH:
	    D2( printf("setting image (%lx) width to: %lx\n", IM(o), tidata ));
	    IM(o)->Width = tidata;
	    break;
	case IA_HEIGHT:
	    IM(o)->Height = tidata;
	    break;
	case IA_FGPEN:
	    IM(o)->PlanePick = tidata;
	    break;
	case IA_BGPEN:
	    IM(o)->PlaneOnOff = tidata;
	    break;
	case IA_DATA:
	    IM(o)->ImageData = (UWORD *) tidata;
	    break;
	}
    }
#endif
}
#endif
d270 1
a270 1
    ULONG retval = 0;
d272 2
d278 2
d281 3
a283 23
    switch ( msg->opg_AttrID )
    {
    case IA_LEFT:
	*msg->opg_Storage = IM(o)->LeftEdge;
	break;
    case IA_TOP:
	*msg->opg_Storage = IM(o)->TopEdge;
	break;
    case IA_WIDTH:
	*msg->opg_Storage = IM(o)->Width;
	break;
    case IA_HEIGHT:
	*msg->opg_Storage = IM(o)->Height;
	break;
    case IA_FGPEN:
	*msg->opg_Storage = IM(o)->PlanePick;
	break;
    case IA_BGPEN:
	*msg->opg_Storage = IM(o)->PlaneOnOff;
	break;
    case IA_DATA:
	*msg->opg_Storage = (ULONG) IM(o)->ImageData;
	break;
d285 1
a285 5
    default:
	/* Use the answer from the superclass, if any */
	return ( retval );
    }
    return ( 1 );	/* found it */
@


38.4
log
@Removed some unused vbles.
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 38.3 92/04/02 12:03:34 peter Exp Locker: peter $
d20 1
d63 20
d260 1
d266 3
d306 1
d308 1
@


38.3
log
@EraseImage() and DrawImageState() (hence also DrawImage()) now clone
the RastPort.  Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 38.2 92/02/11 13:38:14 peter Exp Locker: peter $
a68 2
    struct IIData 	*iidata;
    ULONG		retval = 0;
a77 2
	    struct Image	*previ;

a132 1
    int minterm;
a133 1
    struct IBox	*b;
a198 1
    ULONG 		retval;
a225 1
    ULONG	retval;
@


38.2
log
@BPattern is now of "size" 1.
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 38.1 91/07/10 17:55:15 peter Exp Locker: peter $
d349 2
a350 63
/****** intuition.library/DrawImageState ********************************
*
*   NAME	
*	DrawImageState -- Draw an (extended) Intuition Image with
*		special visual state. (V36)
*
*   SYNOPSIS
*	DrawImageState( RPort, Image, LeftOffset, TopOffset, State, DrawInfo )
*			A0     A1     D0          D1         D2     A2
*	
*	VOID DrawImageState( struct RastPort *, struct Image *,
*		WORD, WORD, ULONG, struct DrawInfo * );
*
*   FUNCTION
*	This function draws an Intuition Image structure in a variety of
*	"visual states," which are defined by constants in
*	intuition/imageclass.h.  These include:
*	IDS_NORMAL		- like DrawImage()
*	IDS_SELECTED		- represents the "selected state" of a Gadget
*	IDS_DISABLED		- the "ghosted state" of a gadget
*	IDS_BUSY		- for future functionality
*	IDS_INDETERMINATE	- for future functionality
*	IDS_INACTIVENORMAL	- for gadgets in window border
*	IDS_INACTIVESELECTED	- for gadgets in window border
*	IDS_INACTIVEDISABLED	- for gadgets in window border
*
*	Only IDS_NORMAL will make sense for traditional Image structures,
*	this function is more useful when applied to new custom images
*	or "object-oriented image classes."
*
*	Each class of custom images is responsible for documenting which
*	visual states it supports, and you typically want to use images
*	which support the appropriate states with your custom gadgets.
*
*	The DrawInfo parameter provides information invaluable to 
*	"rendered" images, such as pen color and resolution.  Each
*	image class must document whether this parameter is required.
*
*   INPUTS
* 	RPort	- RastPort for rendering
*	Image	- pointer to a (preferably custom) image
*	LeftOffset,RightOffset - positional offsets in pixels
*	State	- visual state selected from above
*	DrawInfo - pointer to packed of pen selections and resolution.
*
*   RESULT
* 	None.
*
*   EXAMPLE
*	Provided separately in the DevCon '90 disk set.
*
*   NOTES
*	
*
*   BUGS
*	
*
*   SEE ALSO
*	DrawImage(), GetScreenDrawInfo(), intuition/imageclass.h
*
******************************************************************************
*
*/
d358 1
d362 1
d365 1
a365 1
	sendCompatibleImageMessage( image, IM_DRAW, rport,
d372 2
a373 49
/****** intuition.library/PointInImage *******************************
*
*   NAME	
*	PointInImage -- Tests whether an image "contains" a point. (V36)
*
*   SYNOPSIS
*	DoesContain = PointInImage( Point, Image )
*	D0	  		    D0     A0
*	
*	BOOL PointInImage( struct Point, struct Image * );
*
*   FUNCTION
*	Tests whether a point is properly contained in an image.
*	The intention of this is to provide custom gadgets a means
*	to delegate "image mask" processing to the Image, where
*	it belongs (superceding things like BOOLMASK).  After all,
*	a rounded rect image with a drop shadow knows more about
*	what points are inside it than anybody else should.
*
*	For traditional Intuition Images, this routine checks if
*	the point is in the Image box (LeftEdge/RightEdge/Width/Height).
*
*   INPUTS
* 	Point	- Two words, X/Y packed into a LONG, with high word
*		containing 'X'.  This is what you get if you pass
*		a Point structure (not a pointer!) using common
*		C language parameter conventions.
*	Image - a pointer to a standard or custom Image data object.
*	    NOTE: If 'Image' is NULL, this function returns TRUE.
*
*   RESULT
* 	DoesContain - Boolean result of the test.
*
*   EXAMPLE
*	
*
*   NOTES
*	
*
*   BUGS
*	Only applies to the first image, does not follow NextImage
*	linked list.  This might be preferred.
*
*   SEE ALSO
*	
*
******************************************************************************
*
*/
d383 2
a384 42
/****** intuition.library/EraseImage ********************************
*
*   NAME	
*	EraseImage -- Erases an Image. (V36)
*
*   SYNOPSIS
*	EraseImage( RPort, Image, LeftOffset, TopOffset )
*	            A0     A1     D0          D1
*
*	VOID EraseImage( struct RastPort *, struct Image *, WORD, WORD );
*
*   FUNCTION
*	Erases an Image.  For a normal Image structure, this will
*	call the graphics function EraseRect() (clear using layer
*	backfill, if any) for the Image box (LeftEdge/TopEdge/Width/Height).
*
*	For custom image, the exact behavior is determined by the
*	custom image class.
*
*   INPUTS
* 	RPort	- RastPort to erase a part of
*	Image	- custom or standard image
*	LeftOffset,RightOffset - pixel offsets of Image position
*
*   RESULT
* 	None.
*
*   EXAMPLE
*	
*
*   NOTES
*	
*
*   BUGS
*	
*
*   SEE ALSO
*	graphics.library/EraseRect().
*
******************************************************************************
*
*/
d391 1
d393 1
d396 1
a396 1
	sendCompatibleImageMessage( image, IM_ERASE, rport, offset );
@


38.1
log
@When getting an attribute unknown to imageclass, no longer invokes
superclass a second time, and no longer invokes superclass on
non-boopsi image.  Returns correct return value.
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 38.0 91/06/12 14:21:15 peter Exp Locker: peter $
d187 1
a187 1
		BPattern, 2, IM(o)->PlaneOnOff, 0, JAM1);
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: imageclass.c,v 1.16 91/03/28 14:06:03 peter Exp $
d296 1
d298 4
a301 1
    if ( IM(o)->Depth == CUSTOMIMAGEDEPTH ) SSM( cl, o, msg );
d328 2
a329 2
	/* let the superclass have a try	*/
	return ( SSM( cl, o, msg ) );
@
