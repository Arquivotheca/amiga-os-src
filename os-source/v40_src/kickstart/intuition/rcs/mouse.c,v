head     38.6;
branch   ;
access   ;
symbols  V40_85:38.6 V40_71:38.6 V40_68:38.6 V40_65:38.6 V40_47:38.6 V40_45:38.6 V40_37:38.6 V40_34:38.6 V40_29:38.6 V39_2415:38.6 V39_2369:38.5 V39_2339:38.5 V39_2332:38.5 V39_2275:38.5 V39_2256:38.4 V39_2210:38.4 V39_2192:38.4 V39_2084:38.4 V39_2082:38.4 V39_2076:38.4 V39_2073:38.4 V39_2058:38.4 V39_2051:38.4 V39_2031:38.4 V39_2017:38.4 V39_2012:38.4 V39_1985:38.4 V39_1933:38.4 V39_1819:38.4 V39_1805:38.4 V39_1783:38.4 V39_1695:38.4 V39_1621:38.4 V39_1620:38.4 V39_1508:38.3 V39_1485:38.3 V39_1461:38.3 V39_1458:38.3 V39_1456:38.3 V39_1405:38.3 V39_1368:38.3 V39_1360:38.3 V39_1324:38.3 V39_1147:38.3 V39_1143:38.3 V39_1141:38.3 V39_1120:38.3 V39_1116:38.3 V39_1104:38.3 V39_1100:38.3 V39_1078:38.3 V39_1073:38.3 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.6
date     93.01.12.16.19.16;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.12.04.11.57.32;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.06.29.10.46.10;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.02.12.05.47;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.03.16.33.33;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.17.58.46;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.27.13;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.6
log
@Deleted unused data.  Added mouse-counter overrun code.
@
text
@/*** mouse.c **************************************************************
 *
 * mouse pointer control
 *
 *  $Id: mouse.c,v 38.5 92/12/04 11:57:32 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 ****************************************************************************/

#include "intuall.h"
#include "preferences.h"

#define FIX_OVERRUNS	0

#define D(x)	;
#define DFM(x)	;	/* freeMouse	*/

/* small, fast, but independent in X and Y */

/* ZZZ: want these to be a preferences option? */
#define accelfactor	(4)
#define threshhold	(3)

acceloMouse( ie )
struct InputEvent *ie;
{
    accelOne( &ie->ie_X );
    accelOne( &ie->ie_Y );
}

accelOne( v )
WORD	*v;
{
    int	over;

    if ( ( over  = *v + threshhold ) < 0 )	/* negative *v */
	*v = over * accelfactor - threshhold;
    if ( ( over = *v - threshhold ) > 0 )	/* positive *v */
	*v = threshhold + accelfactor * over;
}

#if FIX_OVERRUNS

/* The mouse-overrun fix depends on a state kept independently
 * for x and y.  The states are:
 *
 *	STATE_NORMAL: device values interpreted as-is
 *	STATE_FASTFORWARD: extremely negative values are presumed
 *		to be wrapped positive values
 *	STATE_FASTBACKWARD: extremely positive values are presumed
 *		to be wrapped negative values
 *
 * There are two interesting thresholds.  The STATE_THRESHOLD is
 * the threshold which must be crossed to change state.  The
 * WRAP_THRESHOLD is that which must be crossed to assume that
 * a wrap has occurred.
 */

#define STATE_NORMAL		0
#define STATE_FASTFORWARD	1
#define STATE_FASTBACKWARD	2
#define WRAP_THRESHOLD		63
#define STATE_THRESHOLD		63


correctoMouse( ie )
struct InputEvent *ie;
{
    struct IntuitionBase *IBase = fetchIBase();
if ( TESTFLAG( ie->ie_Qualifier, IEQUALIFIER_RBUTTON ) )
{
    correctOne( &ie->ie_X, &IBase->OverrunX );
    correctOne( &ie->ie_Y, &IBase->OverrunY );
}
}

correctOne( value, state )
WORD *value;
UBYTE *state;
{
    switch ( *state )
    {
	case STATE_FASTFORWARD:
	    if ( *value < -WRAP_THRESHOLD )
	    {
		*value += 256;
	    }
	    break;

	case STATE_FASTBACKWARD:
	    if ( *value > WRAP_THRESHOLD )
	    {
		*value -= 256;
	    }
	    break;

#if 0
	case STATE_NORMAL:
	    break;
#endif
    }

    if ( *value > STATE_THRESHOLD )
    {
	*state = STATE_FASTFORWARD;
    }
    else if ( *value < -STATE_THRESHOLD )
    {
	*state = STATE_FASTBACKWARD;
    }
    else
    {
	*state = STATE_NORMAL;
    }
}
#endif

#if USEMOUSEERROR
/* jimm: 6/8/86: delta passed by reference: scaled */
mouseError(errorsum, pos, delta)
SHORT *errorsum, *pos, *delta;
{
    USHORT shift, mask;
    SHORT tick, error;
    struct IntuitionBase *IBase = fetchIBase();

    if ( ! *delta) return;

    /* jimm: 2/88: scaled both X/Y mouse coords by two
     * new mouse resolution taken as 1280x800 nominal
     */
    *delta *= 2;

    /* how many input delta corresponds to one pos change */
    tick = IBase->Preferences->PointerTicks;

    /* powers of two could be nicer */
    shift = tick >> 1;
    mask = (1 << shift) - 1;

    *errorsum += (*delta & mask);

    *delta >>= shift;	/* scale delta value passed by reference */

    *pos += *delta;

    if (*errorsum >= tick)
    {
	(*pos)++;
	/* jimm: 9/3/86: need to increment *delta, not delta (a pointer) */
	(*delta)++;		/* jimm: *delta must reflect real change */
	*errorsum -= tick;
    }
}
#endif


/* 
 * sets up normal freedom for mouse travel
 */
freeMouse()
{
    struct Screen *screen;
    struct IntuitionBase *IBase = fetchIBase();
    struct Rectangle	srect;		/* screen rectangle	*/
    struct Rectangle	mlimits;	/* working mouse limits	*/
    void (*rectHullFunc)();
    void rectHull();
    void upperRectHull();

    assertLock("freeMouse", IBASELOCK );

    /* don't free up if restrictions are in place */
    if ( TESTFLAG( IBase->Flags, INMOUSELIMITS ) ) return;

    /* Peter 3-Apr-91:  If not INMOUSELIMITS, then it's ok to
     * autoscroll in all directions
     */
    SETFLAG( IBase->ScrollFreedom, OKSCROLL_ALL );
    if ( !(screen = IBase->FirstScreen) )
    {
	mlimits.MinX = mlimits.MaxX = 0;
	mlimits.MinY = mlimits.MaxY = 0;
	return;
    }

    /*
     * removed special test for Hedley
     */
    degenerateRect( &mlimits );	/* start inside out	*/

    /* We use rectHull() for the first screen, and switch to
     * upperRectHull() after (see later)
     */
    rectHullFunc = rectHull;

    while (screen)
    {
#if 0	/* rethinkVPorts() would set VP_HIDE	*/
	if ( ! TESTFLAG( screen->Flags, SCREENHIDDEN )  && ...
#endif
	if ( ! TESTFLAG( screen->ViewPort.Modes, VP_HIDE ))
	{
	    /* expand mouse limits to enclose screen	*/

	    /* restrict screen rect to clip region	*/
	    boxToRect( &screen->LeftEdge, &srect );
		DFM( dumpRect( "fM: screen rectangle", &srect ) );

	    DFM( dumpRect("fM: dcliprect ... ",
		&XSC(screen)->VPExtra->DisplayClip) );

	    limitRect( &srect, &XSC(screen)->VPExtra->DisplayClip);
	    DFM( dumpRect("fM: screen limited to dcliprect", &srect) );

	    /* perform this scaling only AFTER limiting
	     * screen rect to something reasonable (dcliprect)
	     */
	    scaleScreenMouse(&srect, screen);
		DFM( dumpRect("fM: screen mouse limit", &srect) );

	    /* We want to expand the limits to fit the screen.
	     * Originally, we used rectHull() on the IBase->FirstScreen,
	     * and upperRectHull() (which doesn't expand downwards)
	     * on subsequent screens.  However, child screens can now
	     * be dragged so low they don't intersect their DClip.
	     * if such a child screen is the frontmost screen, we
	     * want the full rectHull() to happen for the next screen
	     * instead.
	     */
	    (*rectHullFunc)( &mlimits, &srect );

	    /* After the first screen which intersects its DClip,
	     * switch to using upperRectHull().
	     */
	    if ( srect.MaxY >= srect.MinY )
	    {
		rectHullFunc = upperRectHull;
	    }
	}
	DFM( else printf("fM: skipping excluded screen %lx\n", screen) );
	screen = screen->NextScreen;
    }

#if 0	/* maybe not	*/
    /* constrain mouse to preferred display limits	*/
    limitRect( &mlimits, MOUSECONSTRAINT( IBase ) );
#endif

    /* Peter 3-Apr-91:  FreeMouseLimits is a copy of MouseLimits that's
     * never constrained by things like dragging and sizing.
     * IESUBCLASS_TABLET input events need that.
     */
    IBase->FreeMouseLimits = IBase->MouseLimits = mlimits;
    DFM( dumpRect("freeMouse Limits:", &mlimits) );
    DFM( dumpRect("freeMouse Limits:", &mlimits) );
}

#ifdef NO_SPRITES
moverastermouse()
{
    struct IntuitionBase *IBase = fetchIBase();
	int x,y;
	/* first remove old mouse */
	if (IBase->Reserved[2] == 1)
		rastermouse(IBase->Reserved[0],IBase->Reserved[1]);
	/* put new one in */
    	x = IBase->LongMouse.LX + IBase->AXOffset;
    	y = (IBase->LongMouse.LY / 2) + IBase->AYOffset;
	rastermouse(x,y);
	IBase->Reserved[2] = 1;
	IBase->Reserved[0] = x;
	IBase->Reserved[1] = y;
}
USHORT mousepattern[2] = { 0x5555,0xaaaa };
rastermouse(x,y)
int x,y;
{
    struct IntuitionBase *IBase = fetchIBase();
	struct Screen *s;
	/*kprintf("rastermouse(%lx,%lx)\n",x,y);*/
	if (x<0)	return;
	if (y<0)	return;
        if (s = IBase->FirstScreen) 
        { 
		int width=4,height=4;
                SetAPen(&s->RastPort,-1);
		SetDrMd(&s->RastPort,COMPLEMENT);
		SetAfPt(&s->RastPort,mousepattern,1);
		if (x+width > MAXDISPLAYCOLUMNS)
			x = MAXDISPLAYCOLUMNS - x;
		if (y+height > MAXDISPLAYROWS)
			y = MAXDISPLAYROWS - y;
                /*WritePixel(&s->RastPort,x,y); */
		RectFill(&s->RastPort,x,y,x+width,y+height);
        } 
}
#endif


screenMouse( s )
struct Screen *s;
{
    struct LongPoint mouse;
    struct IntuitionBase *IBase = fetchIBase();
    
    mouse = IBase->LongMouse;
    longmouseToScreen( &mouse, s );

    s->MouseX = mouse.LX - s->LeftEdge;
    s->MouseY = mouse.LY - s->TopEdge;
}

/* assumes screen mouse coords correct */
windowMouse( w )
struct Window *w;
{
    struct Screen *s = w->WScreen;

    /* add scroll offset	*/
    w->MouseX = s->MouseX - w->LeftEdge;
    w->MouseY = s->MouseY - w->TopEdge;

    /* ZZZ: should account for gzz layer scroll values indep.	*/
    w->GZZMouseX = w->MouseX - w->BorderLeft;
    w->GZZMouseY = w->MouseY - w->BorderTop;
}

/*** intuition.library/SetMouseQueue ***/

SetMouseQueue( w, qlen )
struct Window	*w;
{
    int	retval	= -1;

    D( printf( "SMQ: w: %lx, qlen: %ld\n", w, qlen ) );

#if 0
    if ( knownWindow( w ) )
#endif
    {
	retval = XWINDOW(w)->MouseQueueLimit;
	XWINDOW(w)->MouseQueueLimit = qlen;
    }
    return ( retval );
}
@


38.5
log
@An off-the-bottom child screen can no longer play havoc with the
MouseLimits.
@
text
@d5 1
a5 1
 *  $Id: mouse.c,v 38.4 92/06/29 10:46:10 peter Exp Locker: peter $
d14 1
a14 3
#define ACCDEBUG	0
#define ACCD(x)	;
#define SIMPLEACCEL	1
a18 11
UWORD	AccThresholds[] = {
    3,		/* 2:1 if greater	*/
    7,		/* 3:1 if greater	*/
    11,		/* 4:1	*/
    15,		/* 5:1	*/
};

#define NUMTHRESH (sizeof (AccThresholds)/sizeof (UWORD))

#if SIMPLEACCEL

d43 1
a43 1
#else
d45 20
a64 8
/* slow and abrupt radially symmetric version  */

UWORD	AccThresholds[] = {
    3,		/* 2:1 if greater	*/
    7,		/* 3:1 if greater	*/
    11,		/* 4:1	*/
    15,		/* 5:1	*/
};
a65 1
#define NUMTHRESH (sizeof (AccThresholds)/sizeof (UWORD))
d67 1
a67 1
acceloMouse(ie)
d70 6
a75 8
    int	factor;

    if ( (factor = accFactor( sumabs(ie->ie_X, ie->ie_Y) )) > 1)
    {
	ie->ie_X *= factor;
	ie->ie_Y *= factor;
    }
    ACCD( showAcc( factor ) );
d78 3
a80 8
#if ACCDEBUG

int	aRed[] =	{ 0, 15, 0, 15, 15, 0};
int	aGreen[] =	{ 0, 0, 15, 15, 15, 15};
int	aBlue[] =	{ 0, 0,  0, 15,  0, 15};

/* NOTE: no range check	*/
showAcc( factor )
d82 15
a96 1
    struct IntuitionBase *IBase = fetchIBase();
d98 5
a102 1
    factor--;
d104 1
a104 1
    if (IBase->ActiveScreen)
d106 1
a106 2
	SetRGB4(&IBase->ActiveScreen->ViewPort, 17, aRed[factor],
		aGreen[factor], aBlue[factor]);
d108 5
a112 18
}
#endif

sumabs(x, y)
{
    if (x < 0) x = -x;
    if (y < 0) y = -y;
    return ( x + y );
}

/* from table, return mutliplcation factor (>= 1)	*/
accFactor(n)
UWORD	n;
{
    int	thresh	= NUMTHRESH;
    UWORD	*tp = AccThresholds + (thresh - 1);

    while ( thresh )
d114 1
a114 2
	if ( n > *tp--) break;
	thresh--;
a115 1
    return (thresh + 1);
@


38.4
log
@Now uses IBase->LongMouse.
@
text
@d5 1
a5 1
 *  $Id: mouse.c,v 38.3 92/04/02 12:05:47 peter Exp Locker: peter $
d175 3
d200 5
d230 15
a244 6
	    /* expand limits to fit screen	*/
	    if ( screen == IBase->FirstScreen )
	    {
		rectHull( &mlimits, &srect );
	    }
	    else
d246 1
a246 2
	        /* don't expand 'downwards'	*/
	        upperRectHull( &mlimits, &srect );
d263 1
@


38.3
log
@Renamed reportMouse() to updateMousePointer(), and moved it into
pointer.c.  Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: mouse.c,v 38.2 92/03/03 16:33:33 peter Exp Locker: peter $
d229 2
a230 2
	       /* don't expand 'downwards'	*/
	       upperRectHull( &mlimits, &srect );
d259 2
a260 2
    	x = IBase->Mouse.X + IBase->AXOffset;
    	y = (IBase->Mouse.Y / 2) + IBase->AYOffset;
a291 1
/* returns true if screen is inside mouse	*/
d295 1
a295 1
    struct Point mouse;
d298 2
a299 2
    mouse = IBase->Mouse;
    mouseToScreen( &mouse, s);
d301 2
a302 2
    s->MouseX = mouse.X - s->LeftEdge;
    s->MouseY = mouse.Y - s->TopEdge;
@


38.2
log
@Renamed SCREENEXCLUDE to SCREENHIDDEN.
@
text
@d5 1
a5 1
 *  $Id: mouse.c,v 38.1 91/07/10 17:58:46 peter Exp Locker: peter $
a13 21
#if 0
#define ICOLOR(c)	 (*((SHORT *)0xdff180) = (c))
#define CKCOLOR0 (0xf00)
#define CKCOLOR1 (0x000)
#define CKCOLOR2 (0x0f0)
#define CKCOLOR3 (0x000)
#define CKCOLOR4 (0x00f)
#define CKCOLOR5 (0x000)
#define CKCOLOR6 (0xfff)
#define CKCOLOR7 (0x000)
#define CKCOLOR8 (0xff0)
#define CKCOLOR9 (0x000)
#define CKCOLOR10 (0x0ff)

#define DONECOLOR (0xfff)

#else
#define ICOLOR(c)	;
#endif


a19 1
#define DSPRITE(x)	;
a20 3
#define DSPRITE2(x)	;
#define DDF(x)	;	/* run time debug flag testing	*/

a290 151
/* jimm: 6/25/86: made screenMouse() and windowMouse() procedures,
 * so that I can call them for new screens and windows
 */

reportMouse( change )
BOOL change;
{
    struct Screen *s;
    struct Screen *mouse_screen = NULL;
    struct ViewPort	*mousevp = NULL;
    struct Window *w;
    struct Point  spritepos;
    struct Screen *prevscreen = NULL;

    struct IntuitionBase *IBase = fetchIBase();

    DSPRITE( dumpPt( "rm: in", IBase->Mouse ) );
    limitPoint( &IBase->Mouse, &IBase->MouseLimits);
    DSPRITE( dumpPt( "rm: after limit", IBase->Mouse ) );

    spritepos = IBase->Mouse;

    assertLock("reportMouse", IBASELOCK ); /* maybe I don't need to lock */

    LOCKIBASE();

    /* maintain the old MouseX/Y	*/
    /* too bad, eh?	*/
    IBase->MouseY = IBase->Mouse.Y / IBase->MouseScaleY;
    IBase->MouseX = IBase->Mouse.X / MOUSESCALEX;

    ICOLOR( CKCOLOR8 );

    for ( s = IBase->FirstScreen; s; s = s->NextScreen )
    {
	screenMouse( s );

	/* keep track of first visible screen higher than mouse pos */

	/* Only consider visible screens */
	if ( !TESTFLAG(s->ViewPort.Modes, VP_HIDE ) )
	{
	    if ( !prevscreen )
	    {
		/* In the event that the mouse is below the first visible
		 * screen, that's the screen that the mouse must be in
		 */
		prevscreen = s;
	    }

	    if ( s->MouseY >= 0 )
	    {
		/* Peter 4-Dec-90:  The mouse_screen will be the screen that
		 * contains the mouse hotspot.  In the event that the hotspot
		 * is located in the interscreen gap, we use the previous
		 * screen.
		 */
		if ( !mouse_screen )
		{
		    DSPRITE2( printf("s->MouseY: %ld, s->ViewPort.DHeight %ld\n",
			s->MouseY, s->ViewPort.DHeight) );
		    DSPRITE2( printf("IBase->AYOffset * XSC(s)->SpriteFactor.Y %ld\n",
			IBase->AYOffset * XSC(s)->SpriteFactor.Y) );
		    if ( ( s->MouseY - s->ViewPort.DHeight ) >
			    -( IBase->AYOffset * XSC(s)->SpriteFactor.Y ) )
		    {
			/* Hot spot is below this screen and so is the pointer's
			 * top line, so we must use the previous visible screen
			 */
			DSPRITE2( printf("Mouse in previous screen %lx\n", prevscreen) );
			mouse_screen = prevscreen;
		    }
		    else
		    {
			/* Hot spot is in this screen, or if it's below, then
			 * at least the top line of pointer-data is in.
			 */
			DSPRITE2( printf("Mouse in this screen %lx\n", s) );
			mouse_screen = s;
		    }
		}
	    }
	    prevscreen = s;
	}

	for ( w = s->FirstWindow; w; w = w->NextWindow ) windowMouse( w );
    }

    if ( !mouse_screen )
    {
	/* When dragging a rear screen behind a front screen, the rear
	 * screen's ViewPort can end up hidden even when the mouse's
	 * y is above the front screen.  In that case, we really want
	 * the mouse's screen to be the topmost one we saw.
	 */
	mouse_screen = prevscreen;
    }
    ICOLOR( CKCOLOR9 );

    /* figure out where to put the pointer sprite	*/

    LOCKVIEW();	
    /* jimm: ZZZ: trying to synchronize changes to
     * view mode in MakeScreen with copper list changes 
     */

    if ( mouse_screen )
    {
	spritepos.X = IBase->AXOffset * XSC(mouse_screen)->SpriteFactor.X;
	spritepos.Y = IBase->AYOffset * XSC(mouse_screen)->SpriteFactor.Y;

	spritepos.X += mouse_screen->MouseX;
	spritepos.Y += mouse_screen->MouseY;
	mousevp = &mouse_screen->ViewPort;
    }

    UNLOCKIBASE();

    DSPRITE( printf("rM: spritepos.X = %ld, IBase->X: %ld\n",
	spritepos.X, IBase->Mouse.X ) );

    ICOLOR( CKCOLOR10 );

    DDF( if ( IBase->DebugFlag & IDF_SPRITE ) {
	printf("movesprite to: %ld, %ld\n", spritepos.X,spritepos.Y );
	printf("mouse screen: %lx\n", mouse_screen ); });

    if ( change )
    {
	struct SimpleSprite *spr = IBase->SimpleSprite;
	ChangeSprite( mousevp, spr, IBase->APointer );


	if ( IBase->GotSprite1 )
	{
	    /* jimm: 7/27/86: adjust for error */
	    DSPRITE( printf("move attached guy\n") );
	    MoveSprite( mousevp , IBase->AttachedSSprite,
		spr->x, spr->y);
	}


    }

    if ( mouse_screen )
    {
	MoveSprite( mousevp, IBase->SimpleSprite, spritepos.X, spritepos.Y );
    }
    DSPRITE( else printf("no mouse_screen\n") );
    UNLOCKVIEW();
}
a291 1

d321 2
a322 31
/****** intuition.library/SetMouseQueue *************************************
*
*    NAME
*	SetMouseQueue -- Change limit on pending mouse messages. (V36)
*
*    SYNOPSIS
*	oldQueueLength = SetMouseQueue( Window, QueueLength )
*	D0                              A0      D0
*
*	LONG SetMouseQueue( struct Window *, UWORD );
*
*    FUNCTION
*	Changes the number of mouse messages that Intuition will allow
*	to be outstanding for your window.
*
*    INPUTS
*	Window = your window
*	QueueLength = the new value of outstanding mouse movement messages
*	  you wish to allow.
*
*    RESULT
*	-1 if 'Window' is not known
*	Otherwise the previous value of the queue limit.
*	The corresponding function for changing the repeat key
*	queue limit is not yet implemented.
*
*    BUGS
*
*    SEE ALSO
*	OpenWindow()
*****************************************************************************/
@


38.1
log
@Mouse no longer blanks in first gap with three interlaced screens up.
Calls boxToRect() instead of screenRect().  Eliminated duplicated
read of IBase->FirstScreen.
@
text
@d5 1
a5 1
 *  $Id: mouse.c,v 36.32 91/04/05 16:19:46 peter Exp $
d225 1
a225 1
	if ( ! TESTFLAG( screen->Flags, SCREENEXCLUDE )  && ...
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d232 1
a232 1
	    screenRect(&srect, screen);
a346 2
    s = IBase->FirstScreen;

d370 2
a371 1
		 * is located in the interscreen gap,
a395 1
		prevscreen = s;
d398 1
@
