head     38.2;
branch   ;
access   ;
symbols  V40_85:38.2 V40_71:38.2 V40_68:38.2 V40_65:38.2 V40_47:38.2 V40_45:38.2 V40_37:38.2 V40_34:38.2 V40_29:38.2 V39_2415:38.2 V39_2369:38.2 V39_2339:38.2 V39_2332:38.2 V39_2275:38.2 V39_2256:38.2 V39_2210:38.2 V39_2192:38.2 V39_2084:38.2 V39_2082:38.2 V39_2076:38.2 V39_2073:38.2 V39_2058:38.2 V39_2051:38.2 V39_2031:38.2 V39_2017:38.2 V39_2012:38.2 V39_1985:38.2 V39_1933:38.2 V39_1819:38.2 V39_1805:38.2 V39_1783:38.2 V39_1695:38.2 V39_1621:38.2 V39_1620:38.2 V39_1508:38.2 V39_1485:38.2 V39_1461:38.2 V39_1458:38.2 V39_1456:38.2 V39_1405:38.2 V39_1368:38.2 V39_1360:38.2 V39_1324:38.2 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.2
date     92.04.02.12.02.49;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.04.01.15.04.48;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.17.13;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@No longer includes gfxbase.h.
@
text
@/*** fonts.c *****************************************************************
 *
 *  all the intuition font stuff that could be extracted
 *
 *  $Id: fonts.c,v 38.1 92/04/01 15:04:48 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1985, Commodore-Amiga, Inc.
 *  All Rights Reserved
 ****************************************************************************/
#include "intuall.h"

#define D(x)	;
#define DTE(x)	;

/*
 * copies a TextAttr to a TAttrBuff (i.e., copies string, too)
 * can also serve to copy a TAttrBuff.
 */
copyTAttr( ta, tab )
struct TextAttr	*ta;	/* source	*/
struct TAttrBuff	*tab;	/* dest */
{
    tab->tab_TAttr = *ta;
    jstrncpy( tab->tab_NameBuff, ta->ta_Name, MAXFONTNAME );
    tab->tab_TAttr.ta_Name = tab->tab_NameBuff;
}


#if 0
screenFontHeight( screen )
struct Screen	*screen;
{
    int	height;

    return (screen? screen->RastPort.TxHeight:
	fetchIBase()->SysFontPrefs[0].ifp_TABuff.tab_TAttr.ta_YSize);
}
#endif

/** MODIFY: jimm 11/7/85 **/
/* ISetFont() now returns a pointer to any TextFont that it must open.
 * This is so that the font can be closed when no longer needed.
 * See Also: ICloseFont()
 *
 *
 * Note that if font is NULL, this function will NOT CHANGE rp.
 * There is no default.
 */

struct	TextFont *
ISetFont(rp, font)
struct RastPort *rp;
struct TextAttr *font;
{
    struct TextFont *OpenFont();
    struct TextFont *fp = NULL;


	/* jimm: 11/12/85 ** don't set NULL font */
    if (font != NULL && (fp = OpenFont(font)) != NULL)
    {
	SetFont(rp, fp);
	SetSoftStyle(rp, font->ta_Style, 0xFF);
    }

    return (fp);
}

ICloseFont(fp)
struct TextFont *fp;
{
    if (fp) CloseFont(fp);
}

/*** intuition.library/IntuiTextLength ***/

ULONG
IntuiTextLength(itext)
struct IntuiText *itext;
{
    struct RastPort RPort;
    InitRastPort(&RPort);	/* system default font */

#ifdef DUPLICATECODE
    struct	TextAttr	*font;
    struct	TextFont	*tmpfp;
    int	len;

    tmpfp = ISetFont(&RPort, itext->ITextFont);
    /* won't change RPort if NULL font */
    len =TextLength(&RPort, itext->IText, strlen(itext->IText));
    ICloseFont(tmpfp);	/* jimm: 6/26/86: */
    return (len);
#else
    return ( RastPortITextLength(&RPort, itext) );
#endif
}

/* find length for text as it will appear in a specified rast port */
RastPortITextLength(rp, itext)
struct	RastPort *rp;
struct IntuiText *itext;
{
#if 1	/* use RPITE(), unless it's too slow */
    struct TextExtent	textent;

    RastPortITextExtent( rp, itext, &textent );
    return ( textent.te_Width );
#else
    struct	RastPort	clonerp;
    struct	TextFont	*tmpfp;
    int		length;

    cloneRP( &clonerp, rp );

    tmpfp = ISetFont( &clonerp, itext->ITextFont);

    length = TextLength( &clonerp, itext->IText, strlen(itext->IText));
	
    ICloseFont(tmpfp);

    return (length);
#endif
}

/*
 * returns extent, relative to 0,0 of itext,
 * respecting itext offset.
 */
RastPortITextExtent( rp, itext, te )
struct	RastPort 	*rp;
struct IntuiText 	*itext;
struct TextExtent	*te;
{
    struct	RastPort	clonerp;
    struct	TextFont	*tmpfp;
    int		xoffset;
    int		yoffset;

    cloneRP( &clonerp, rp );

    tmpfp = ISetFont( &clonerp, itext->ITextFont);

    DTE( printf("RPITE: text: %s.\n", itext->IText ) );

    TextExtent( &clonerp, itext->IText, strlen( itext->IText ), te );

    DTE( dumpTExtent( "RPITExtent", te ) );

    /* make extent relative to origin of IntuiText,
     * *including* IntuiText internal offsets
     */
    DTE( printf("now offset: leftedge %lx, topedge %lx\n", 
	itext->LeftEdge, itext->TopEdge ));
    offsetRect( &te->te_Extent, itext->LeftEdge, 	
	    itext->TopEdge + clonerp.TxBaseline );

    DTE( dumpTExtent( "RPITExtent after offset", te ) );
	
    ICloseFont(tmpfp);
}
@


38.1
log
@Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: fonts.c,v 38.0 91/06/12 14:17:13 peter Exp Locker: peter $
a11 4

#ifndef GRAPHICS_GFXBASE_H
#include <graphics/gfxbase.h>
#endif
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: fonts.c,v 36.12 91/02/01 19:13:14 peter Exp $
d80 1
a81 36
/****** intuition.library/IntuiTextLength **********************************
*
*    NAME
*	IntuiTextLength -- Return the length (pixel-width) of an IntuiText.
*
*    SYNOPSIS
*	Length = IntuiTextLength( IText )
*	D0                        A0
*
*	LONG IntuiTextLength( struct IntuiText * );
*
*    FUNCTION
*	This routine accepts a pointer to an instance of an IntuiText structure,
*	and returns the length (the pixel-width) of the string which that
*	instance of the structure represents.
*
*	NOTE: if the Font pointer of your IntuiText structure is set to NULL,
*	you'll get the pixel-width of your text in terms of the current system
*	default font.  You may wish to be sure that the field IText->ITextFont
*	for 'default font' text is equal to the Font field of the screen it is
*	being measured for.
*
*    INPUTS
*	IText = pointer to an instance of an IntuiText structure
*
*    RESULT
*	Returns the pixel-width of the text specified by the IntuiText data
*
*    BUGS
*	Would do better to take a RastPort as argument, so that a NULL in
*	the Font pointer would lead automatically to the font for the
*	intended target RastPort, rather than the system default font.
*
*    SEE ALSO
*	OpenScreen()
*****************************************************************************/
@
