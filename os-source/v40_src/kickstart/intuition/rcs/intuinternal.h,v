head     38.29;
branch   ;
access   ;
symbols  V40_85:38.29 V40_71:38.29 V40_68:38.29 V40_65:38.29 V40_47:38.29 V40_45:38.29 V40_37:38.29 V40_34:38.29 V40_29:38.29 V39_2415:38.29 V39_2369:38.29 V39_2339:38.29 V39_2332:38.29 V39_2275:38.28 V39_2256:38.28 V39_2210:38.28 V39_2192:38.27 V39_2084:38.27 V39_2082:38.27 V39_2076:38.27 V39_2073:38.27 V39_2058:38.27 V39_2051:38.27 V39_2031:38.27 V39_2017:38.27 V39_2012:38.26 V39_1985:38.26 V39_1933:38.26 V39_1819:38.24 V39_1805:38.24 V39_1783:38.24 V39_1695:38.23 V39_1621:38.23 V39_1620:38.23 V39_1508:38.23 V39_1485:38.23 V39_1461:38.23 V39_1458:38.23 V39_1456:38.23 V39_1405:38.22 V39_1368:38.22 V39_1360:38.22 V39_1324:38.21 V39_1147:38.19 V39_1143:38.19 V39_1141:38.19 V39_1120:38.19 V39_1116:38.19 V39_1104:38.18 V39_1100:38.18 V39_1078:38.18 V39_1073:38.18 V39_757:38.14 V39_702:38.12 V39_557:38.8 V39_553:38.8 V39_551:38.8 V39_510:38.7 V39_495:38.6 V39_416:38.6 V39_383:38.5 V39_371:38.4 V39_336:38.4 V39_323:38.4 V39_295:38.4 V39_277:38.4 V39_254:38.4 V39_222:38.4 V39_185:38.4 V39_171:38.4 V39_161:38.4 V38_159:38.4 V38_116:38.3 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.29
date     92.12.09.18.11.56;  author peter;  state Exp;
branches ;
next     38.28;

38.28
date     92.11.20.18.31.21;  author peter;  state Exp;
branches ;
next     38.27;

38.27
date     92.08.06.17.01.26;  author peter;  state Exp;
branches ;
next     38.26;

38.26
date     92.08.03.15.54.13;  author peter;  state Exp;
branches ;
next     38.25;

38.25
date     92.08.02.12.42.10;  author peter;  state Exp;
branches ;
next     38.24;

38.24
date     92.07.17.17.26.05;  author peter;  state Exp;
branches ;
next     38.23;

38.23
date     92.06.02.14.53.52;  author peter;  state Exp;
branches ;
next     38.22;

38.22
date     92.05.27.11.52.46;  author peter;  state Exp;
branches ;
next     38.21;

38.21
date     92.05.21.17.39.10;  author peter;  state Exp;
branches ;
next     38.20;

38.20
date     92.05.15.14.05.41;  author peter;  state Exp;
branches ;
next     38.19;

38.19
date     92.04.14.15.44.54;  author peter;  state Exp;
branches ;
next     38.18;

38.18
date     92.04.09.16.25.18;  author peter;  state Exp;
branches ;
next     38.17;

38.17
date     92.04.07.17.50.48;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.04.02.21.38.13;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.04.02.12.04.26;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.03.26.18.41.55;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.03.26.16.36.40;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.03.23.11.48.39;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.03.21.14.50.06;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.03.19.15.51.47;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.03.19.10.53.20;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.03.16.32.48;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.21.17.02.26;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.11.13.38.57;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.07.11.06.28;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.21.18.17.10;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.25.17.05.27;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.25.15.02.52;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.17.55.55;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.22.30;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.29
log
@Minor comment cleanup around DRAWGADGETS_xxx flags.
@
text
@

#ifndef INTUITION_INTUINTERNAL_H
#define INTUITION_INTUINTERNAL_H TRUE

/*** intuinternal.h **********************************************************
 *
 *  intuition internals
 *
 *  $Id: intuinternal.h,v 38.28 92/11/20 18:31:21 peter Exp Locker: peter $
 *  Confidential Information: Commodore-Amiga Computer, Inc.
 *  Copyright (c) Commodore-Amiga Computer, Inc.
 ****************************************************************************/

#include "ibase.h"

#ifndef UTILITY_HOOKS_H
#include <utility/hooks.h>
#endif

#ifndef EXEC_ALERTS_H
#include <exec/alerts.h>
#endif

#define	SIMPLESPRITES	1	/* glory, but with a loophole */

/* Macro to strip out TAG_USER from tag value, in order to save space. */
#define GetUserTagData(tag,def,list) GetTagDataUser((tag)&~(TAG_USER),def,list)
#define GetUserTagData0(tag,list) GetTagDataUser0((tag)&~(TAG_USER),list)

/* both vudu	*/
#define copyBox( from, to ) (getImageBox( (from), (to) ) )

struct RomGadget {
    BYTE	l, t, w, h;
    UBYTE	relflags;	/* rest of flags GADGHCOMP, GADGIMAGE, 
				 * except in special cases
				 */
    UBYTE	type;
    struct Image *image;
};


/* ======================================================================== */
/* === Preferences Definitions ============================================ */
/* ======================================================================== */

/* jimm: july 27 1986: MoveSprite error back in. */
#define SPRITEERROR	(-1)

/* these are the defines for the Intuition default Pointer */
#define ROMPOINTER_HEIGHT	16
#define ROMPOINTER_WIDTH	16
#define ROMPOINTER_HOTX		(0+(SPRITEERROR))
#define ROMPOINTER_HOTY		0
#define ROMPOINTER_XRESN	POINTERXRESN_LORES
#define ROMPOINTER_YRESN	POINTERYRESN_DEFAULT
#define ROMPOINTER_WORDWIDTH	1

/* and these are the defines for the Intuition default Busy Pointer! */
#define ROMBUSYPOINTER_HEIGHT	16
#define ROMBUSYPOINTER_WIDTH	16
#define ROMBUSYPOINTER_HOTX	(-5+(SPRITEERROR))
#define ROMBUSYPOINTER_HOTY	0
#define ROMBUSYPOINTER_XRESN	POINTERXRESN_LORES
#define ROMBUSYPOINTER_YRESN	POINTERYRESN_DEFAULT
#define ROMBUSYPOINTER_WORDWIDTH	1

/* This is the private struct MousePointer definition */

struct MousePointer
{
    /* The first five fields constitute the "transparent base class"
     * of pointerclass objects.  struct Window contains an embedded
     * instance of the TBC, which we use.  However, the details of
     * the TBC are **** INTUITION PRIVATE ****.
     * Use of other fields (xmpt_) of the MousePointer requires assurance
     * that we have a full legitimate MousePointer.  This is done by
     * testing mpt_Width for equality with MPT_CUSTOMWIDTH.
     */
    struct BitMap *mpt_BitMap;	/* For non-extended MousePointers, this is
				 * a pointer to old-style SpriteData.  For
				 * extended MousePointers, this field points
				 * to bitmap containing sprite imagery.
				 * Width/Height are also there?
				 */
    UBYTE mpt_Height;		/* Sprite height */
    UBYTE mpt_Width;		/* Sprite width */
    BYTE mpt_XOffset;		/* Hotspot x-offset */
    BYTE mpt_YOffset;		/* Hotspot y-offset */

    WORD xmpt_WordWidth;	/* Sprite width in words */
    WORD xmpt_PointerXRes;	/* Intended resolution (see POINTERXRESN_ flags) */
    WORD xmpt_PointerYRes;	/* Intended resolution (see POINTERYRESN_ flags) */
};

/* In a couple of places, we need an old MousePointer, which is just
 * the part which is embedded in the Window structure, starting
 * with the Pointer field.
 */

struct OldMousePointer
{
    struct BitMap *mpt_BitMap;	/* A pointer to old-style SpriteData. */
    UBYTE mpt_Height;		/* Sprite height */
    UBYTE mpt_Width;		/* Sprite width */
    BYTE mpt_XOffset;		/* Hotspot x-offset */
    BYTE mpt_YOffset;		/* Hotspot y-offset */
};

/* All mouse pointers from pointerclass have mpt_Width equal to this
 * special value:
 */
#define MPT_CUSTOMWIDTH	0xFF

/* Internally, this constant is used to denote the default busy pointer */
#define BUSYPOINTER	((struct MousePointer *)1)

/* This is the timeout for the delayed pointer activation */
#define DEFERREDPOINTERCOUNT	3	/* ticks */





/* various timing rates */
#define KEYREPSEC	0	/* struct timeval KeyRptSpeed == 0.05 Secs */
#define KEYREPMIC 	 50000	/* struct timeval KeyRptSpeed */
#define KEYDELSEC	0	/* struct timeval KeyRptDelay == 0.60 Secs */
#define KEYDELMIC	600000	/* struct timeval KeyRptDelay */
#define MOUSEDBLSEC	1	/* struct timeval DoubleClick == 1.50 Secs */
#define MOUSEDBLMIC	500000	/* struct timeval DoubleClick */

/* Intuition Pointer defaults */
#define POINTERX (ROMPOINTER_HOTX)		/* BYTE XOffset; */
#define POINTERY (ROMPOINTER_HOTY)		/* BYTE YOffset; */
#define COLOR17	0xE44		/* Red:   USHORT color17; */
#define COLOR18	0x000		/* Black: USHORT color18; */
#define COLOR19	0xEEC		/* Cream: USHORT color19; */
#define POINTERTICKS 1		/* USHORT PointerTicks; */

/* Workbench Screen colors, colors 0 to 3 and ~3 to ~0 */
#define COLOR0  0xAAA		/* Gray */
#define COLOR1  0x000		/* Black */
#define COLOR2  0xFFF		/* White */
#define COLOR3  0x68B		/* Blue */
#define COLORN3 0xE44		/* Red */
#define COLORN2 0x5D5		/* Green */
#define COLORN1 0x04D		/* Blue */
#define COLORN0 0xE90		/* Orange */


/* positioning data for the Intuition View */
#define VIEWX 0			/* USHORT XScreenOffset; */
#define VIEWY 0			/* USHORT YScreenOffset; */

/* miscellaneous */
#define ENABLECLI FALSE		/* BOOL EnableCLI; is FALSE */

/* printer configurations */
#define PRINTERTYPE EPSON	/* USHORT PrinterType; */

/* print format and quality configurations */
#define PRINTPITCH PICA		/* BYTE PrintPitch; of 10 cps */
#define PRINTQUALITY DRAFT	/* BYTE PrintQuality; is draft */
#define PRINTSPACING SIX_LPI	/* BYTE PrintSpacing;  is 6 lpi */
#define PRINTLEFTMARGIN 5	/* FLOAT PrintLeftMargin; */
#define PRINTRIGHTMARGIN 75	/* FLOAT PrintRightMargin; */
#define PRINTINVERSE 0		/* BYTE PrintInverse; is positive */
#define PRINTASPECT 0		/* BYTE PrintAspect; is horizontal */
#define PRINTSHADE 1		/* BYTE PrintShade; is black & white */
#define PRINTTHRESHOLD 2	/* WORD PrintThreshold; is middle */

/* print paper descriptors */
#define PAPERSIZE N_TRACTOR	/* BYTE PaperSize; is U.S. Letter */
#define PAPERWIDTH 9.5		/* FLOAT PaperWidth; */
#define PAPERLENGTH 66		/* FLOAT PaperLength; */
#define PAPERTYPE FANFOLD	/* BYTE PaperType; is fanfold */

/* default name for the disk-based Preferences file */
#define	PREF_FILE	".prefs"


/* ======================================================================== */
/* ======================================================================== */

/* = global INTUITION declarations ======================================== */

/* these are the IBase->Flags definitions */
#define DRAGSELECT	0x00000002 /* currently drag-selecting in menus */
#define GADGETON	0x00000004 /* GRELEASE highlighted flag
				    * NUMERICALLY EQUAL TO GMR_GADGETHIT!!!
				    */
#define COM_SELECT	0x00000020 /* if COMMAND-SELECT is in effect */
#define COM_MENU	0x00000040 /* if COMMAND-MENU is in effect */

#define ITEMDRAWN    	0x00000080 /* if the menu window is currently drawn */
#define SUBDRAWN     	0x00000100 /* if the submenu is currently drawn */
#define GOODITEMDRAWN	0x00002000 /* the item was successfully drawn */
#define GOODSUBDRAWN	0x00004000 /* the subitem was successfully drawn */

#define HIT_BARLAYER	0x00000001 /* hitUpfront detected barlayer hit */
#define MACHINE_ISPAL	0x00000008 /* If we found PAL hardware upon init */
#define RELEASED	0x00000800 /* Double-Click button watcher flag */
#define VIRGINDISPLAY	0x00001000 /* Display not opened by anyone yet */
#define POPPEDSCREEN	0x00020000 /* autorequest screen popped	*/

#define SEENSETPREFS	0x00010000 /* seen at least one SetPrefs */
#define SEENIPOINTER	0x00040000 /* SetPrefs shouldn't set pointer */
#define SEENIPALETTE	0x00000400 /* SetPrefs shouldn't set colors */

#define INMOUSELIMITS	0x00000010 /* don't do freeMouse(),  I'm busy */
#define SCREENMLIMITS	0x00008000 /* Use screen-relative mouse-limits */

#define GAD_SELECTDOWN	0x00000200 /* Select button is down over a gadget */

#define POINTER_XDOUBLE	0x00080000 /* Double pointer horiz to preserve aspect */
#define POINTER_YDOUBLE	0x00100000 /* Double pointer vertical */

/* Unused: 0x00200000, 0x00400000,0x00800000, 0xXX000000 */

/* key codes */
#define SHIFTY (IEQUALIFIER_LSHIFT|IEQUALIFIER_RSHIFT/*|IEQUALIFIER_CAPSLOCK*/)


/* Layers now sets two additional refresh bits for us.
 * We use the first one to track which windows have been notified
 * since the last damage, and we use the other to sniff when a boopsi
 * gadget might have caused damage through ScrollRaster().
 */
#define LAYERI_NOTIFYREFRESH	LAYERIREFRESH
#define LAYERI_GADGETREFRESH	LAYERIREFRESH2

/* --- some menu MACROS --------------------------------------------------- */
#define SETDMENU(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0xFFE0) | (n & 0x1F)
#define SETDITEM(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0xF81F) | ((n & 0x3F) << 5)
#define SETDSUB(n) IBase->MenuDrawn = \
	(IBase->MenuDrawn & 0x07FF) | ((n & 0x1F) << 11)

#define SETSMENU(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0xFFE0) | (n & 0x1F)
#define SETSITEM(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0xF81F) | ((n & 0x3F) << 5)
#define SETSSUB(n) IBase->MenuSelected = \
	(IBase->MenuSelected & 0x07FF) | ((n & 0x1F) << 11)

/* This define is for the pauses between blinks during Alerts.  This is
 * how many times Intuition reads the mouse registers before changing the
 * color of the Alert border.  Also, by wild coincidence, 6809 is also
 * the processor that Jack Haeger, Sam Dicker and I, =RJMical=, did
 * Sinistar on, with Noah Falstein and Rich Witt.  
 */
#define ALERT_COUNTDOWN 0x6809

/* I won't use this ridiculous name */
#define SwapBits SwapBitsRastPortClipRect

/* nor this */
#define sc_BitMap	BitMap	/* for Screen.BitMap	*/


/* === Default sizes for the Intuition display ============================ */
/* These are used for creating and manipulating the Intuition displays */
#if 0	/*	OBSOLETE: jimm: 1/20/88		*/
#define MAXDISPLAYHEIGHT	(IBase->MaxDisplayHeight)
#define MAXDISPLAYROWS		(IBase->MaxDisplayRow)
#define MAXDISPLAYWIDTH		(IBase->MaxDisplayWidth)
#define MAXDISPLAYCOLUMNS	(MAXDISPLAYWIDTH - 1)
#endif

#define MAXWINDOWLAYERS	10

/* IWindowDepth() takes the following flags:
 * WDEPTH_TOFRONT - Send the window to front.
 * WDEPTH_TOBACK - Send the window to back.
 * WDEPTH_INFRONTOF - Send the window in front of the reference window.
 */
#define	WDEPTH_TOFRONT 		(0)
#define WDEPTH_TOBACK  		(1)
#define WDEPTH_INFRONTOF	(2)

/* IScreenDepth() and relinkScreen() share a bunch of flags:
 * SDEPTH_TOFRONT - Bring the screen to the front of the list or its family
 * SDEPTH_TOBACK - Bring the screen to the back of the list or its family
 * SDEPTH_INFAMILY - Move the screen within the family, instead of moving
 *	the whole family.
 * SDEPTH_USERMASK - Mask to protect against user setting internal-only bits.
 * SDEPTH_DIRECTIONMASK - mask all but SDEPTH_TOFRONT/SDEPTH_TOBACK
 * SDEPTH_INITIAL - Signifies the initial linking of the screen, and
 *	asks relinkScreen() to not delink the screen first.
 *
 * These three flags are in the public includes:
 * #define SDEPTH_TOFRONT	(0)
 * #define SDEPTH_TOBACK	(1)
 * #define SDEPTH_INFAMILY	(2)
 */

#define SDEPTH_USERMASK		(SDEPTH_TOFRONT|SDEPTH_TOBACK|SDEPTH_INFAMILY)
#define SDEPTH_DIRECTIONMASK	(1)
#define SDEPTH_INITIAL		(4)


/* IMoveScreen() and screenLegalPosition() share a bunch of flags:
 * SPOS_FORCEDRAG - Caller wants to move {SA_Draggable,FALSE} screen.
 * SPOS_ABSOLUTE - Means that the coordinates are absolute, not relative.
 * SPOS_BOUNDEDBOTTOM / SPOS_UNBOUNDEDBOTTOM - screenLegalPosition() can
 *	be unbounded on the bottom.  By default, it's unbounded for
 *	child screens, since pulling a parent screen down can send a child
 *	screen far off the bottom.  These flags override the unboundedness.
 *	MoveScreen() has always been unbounded on the bottom, so it sets
 *	SPOS_UNBOUNDEDBOTTOM.  The screen dragging code uses sLP() to
 *	figure out the legal mouse range, and it must force a bounded
 *	bottom to keep the user from dragging a child screen itself off the
 *	bottom.
 * SPOS_MENUSNAPRANGE - Allow screen to move farther right than normally
 *	(up to the Text Overscan left-edge) to permit screen menu-snap.
 * SPOS_REVALIDATE - Force revalidation of legal position when un-snapping
 *	the menu.
 * SPOS_NORETHINK - Asks IMoveScreen() to skip calling RethinkDisplay().
 *	When OpenScreen() has to move child-screens into legal place,
 *	we hold off the RethinkDisplay() since the new screen's ViewPort
 *	is not linked in yet, and RethinkDisplay() is coming up anyways.
 * SPOS_USERMASK - Mask to protect against user setting internal-only bits.
 * SPOS_TYPEMASK - Mask that filters all but the exclusive choices of
 *	positioning-type.
 *
 * These two flags are in the public includes:
 * #define SPOS_RELATIVE	(0)
 * #define SPOS_ABSOLUTE	(1)
 * #define SPOS_MAKEVISIBLE	(2)
 * #define SPOS_FORCEDRAG	(4)
 */

#define SPOS_BOUNDEDBOTTOM	(8)
#define SPOS_UNBOUNDEDBOTTOM	(16)
#define SPOS_MENUSNAPRANGE	(32)
#define SPOS_REVALIDATE		(64)
#define SPOS_NORETHINK		(128)

#define SPOS_TYPEMASK		(SPOS_MAKEVISIBLE|SPOS_ABSOLUTE|SPOS_RELATIVE)
#define SPOS_USERMASK		(SPOS_FORCEDRAG|SPOS_TYPEMASK)

/* Flags to drawGadgets() and drawEmbossedBorder():
 *
 * The drawGadgets() function takes a list of gadgets and a filter
 * flag.  Based on the value of the filter flag, each gadget in the
 * list is rendered or skipped, as follows:
 *
 * DRAWGADGETS_ALL - draw all the gadgets
 * DRAWGADGETS_BORDER - draw all gadgets that are in a window border
 * DRAWGADGETS_DAMAGE - draw all gadgets which have the GMORE_SCROLLRASTER
 *	flag set, indicating they use ScrollRaster() and are subject
 *	to damage (hence repair).
 *
 * NB: intuitionface.asm depends on DRAWGADGETS_ALL being zero.
 */
#define DRAWGADGETS_ALL		0
#define DRAWGADGETS_BORDER	1
#define DRAWGADGETS_DAMAGE	2

/* Flags for itACTIVATEWIN token:
 *
 * AWIN_NORMAL - Regular window activation
 * AWIN_INITIAL - Initial activation of a new window
 * AWIN_LENDMENU - temporary activation to lend menu action
 * AWIN_LENDMENUKEY - temporary activation to lend menu key action
 *
 */

#define AWIN_NORMAL		0
#define AWIN_INITIAL		1
#define AWIN_LENDMENU		2
#define AWIN_LENDMENUKEY	3


#if 0
#define	MAX(A, B)	(((A)<(B))?(B):(A))
#define	MIN(A, B)	(((A)>(B))?(B):(A))
#else
#define	MAX(A, B)	imax( (A), (B) )
#define	MIN(A, B)	imin( (A), (B) )
#endif
/*******************/

/* get the address of the IntuitionBase */
#if 0
#define fetchIBase()	((struct IntuitionBase *) *((ULONG *)0xD0))
struct IntuitionBase *fetchIBase();
#else
#define fetchIBase()	(IBaseDefine)
extern struct IntuitionBase *IBaseDefine;
#endif

/* converts pointer to an IBox to a Point */
#define upperLeft(A) (*((struct Point *) (A)))

#define MAX_SIGNED_WORD	32767
#define MIN_SIGNED_WORD -32768

/* She'll always be Karla to me ... */
#define KARLA	"topaz.font"
/*???#define KARLA	"Karla"*/

#define SI( gadget ) 	((struct StringInfo *) ((gadget)->SpecialInfo))
#define PI( gadget ) 	((struct PropInfo *) (gadget)->SpecialInfo)
#define BI( gadget ) 	((struct BoolInfo *) (gadget)->SpecialInfo)

#define CLEARFLAG( var, flag ) ((var) &= ~(flag))
#define SETFLAG( var, flag ) ((var) |= (flag))
#define TESTFLAG( var, flag ) ( (var) & (flag) )

/** Display Vuuduu	**/
/* D_O was 13 */
#define DENISE_OFFSET	9
#define STAND_HCLOCKS	226
#define STAND_ROWS	262

/* absolute hardware limits, hardware relative, in hi-res, lace coords	*/
#define MIN_LEFT_VISUAL	((0x81 - 64) << 1)	/* dale sez	*/
#define MIN_TOP_VISUAL	((0x2c - 0x1b + 4) << 1)

/* init values for Left/RightHardLimit, used in dclip.c		*/
/* these are in hi-res, lace coordinates, hardware relative	*/
#define	LEFT_HARD_LIMIT		(512)	/* dwistop can't be below 512/2 */
#define	RIGHT_HARD_LIMIT	(1000)

#if 0	/* these are some obsolete values	*/
#define LEFT_HARD_LIMIT 284+32
#define RIGHT_HARD_LIMIT 668
#endif


#define ratioFIXEDPART	4
/*#define RATIO(n, r) (((n) * (r)) >> ratioFIXEDPART)*/
#define RATIO(n, r) ((((n)*(r))+(1<<(ratioFIXEDPART-1)))>>ratioFIXEDPART)

#define REALBIG	(7000)	/* bigger than any window or screen */

#define ALENGTH( array )	( sizeof ( array )/sizeof ( array[0]) )


#if ONCOLORS
#define ICOLOR(c)	 (*((SHORT *)0xdff180) = (c))
#define CKCOLOR0 (0xf00)
#define CKCOLOR1 (0x000)
#define CKCOLOR2 (0x0f0)
#define CKCOLOR3 (0x000)
#define CKCOLOR4 (0x00f)
#define CKCOLOR5 (0x000)
#define CKCOLOR6 (0xfff)
#define CKCOLOR7 (0x000)
#define CKCOLOR8 (0xff0)
#define CKCOLOR9 (0x000)
#define CKCOLOR10 (0x0ff)
#define CKCOLOR11 (0x000)

#define DONECOLOR (0xfff)

#else
#define ICOLOR(c)	;
#endif

/* mask macros */
/* width in bytes of word-padded raster (from gfx.h) */
#define RASWIDTH(W) ( ((W)+15) >> 3 & 0xFFFE )

/* uword with single bit set in x pixel position */
#define MASKBIT(X)  ((UWORD) 1 << (15 - ((X) & 0x0F)))

/* pointer to word that point p lies in mask plane P of width W  */
#define MASKWORD(p, W, P) ((UWORD *)(((UWORD *) P) + ((p).Y*RASWIDTH(W))/2 + (((p).X) >> 4)))

/* finally, test if point p is in mask P of width W */
#define MASKTEST(p, W, P) ((BOOL) (*MASKWORD(p, W, P) & MASKBIT((p).X)))

/*
 * tells whether a gadget is to be highlighted by COMP or BOX
 * XOR toggling.
 */
#define ISTOGGLE( g ) ( !( (g)->Flags  & 2 ) )

/*
 * type Pointer to Function returning Unsigned long
 */
typedef ULONG	(*PFU)();

#define  TRIGGER	{kprintf("trigger\n");(* ((short *) 0x2fe) )  = 0xdead;}

#define PANIC( str )	kprintf("panic: %s\n", str ); Debug();


#define OLD_MODES	( LACE | HIRES | HAM | DUALPF | PFBA | EXTRA_HALFBRITE)

/* display ID mask to monitor part */
#define MONITOR_PART( displayid ) ((displayid) & MONITOR_ID_MASK)

#define ALLBORDERS (BORDERSNIFF|TOPBORDER|RIGHTBORDER|BOTTOMBORDER|LEFTBORDER)

/* modeVerify() and rethinkVPorts parameters */
#define NOFORCE (0)		/* don't remake all copper lists	*/
#define FORCE (1)   /* remake all copper lists, but don't sync vp dx/yoffset*/
#define MEGAFORCE (2)	/* sync vps with screen positions and remake all */

/* indexes into array passed to containerpens	*/
enum {
	CP_FILL,
	CP_PATTERN,
	CP_BORDER,


	NUMCONTAINERPENS
};

/* The frameEdge() function takes these definitions to figure out
 * which edge to draw:
 */
#define FRAMEEDGE_VERTICAL	2

#define FRAMEEDGE_TOP		0
#define FRAMEEDGE_BOTTOM	1
#define FRAMEEDGE_LEFT		( 0 | FRAMEEDGE_VERTICAL )
#define FRAMEEDGE_RIGHT		( 1 | FRAMEEDGE_VERTICAL )

/* MENUHELP stuff	*/
#define KEYCODE_HELP	(0x5f)

#ifndef IECLASS_MENUHELP
#define IECLASS_MENUHELP	(0x14)
#endif

#ifndef IECLASS_CHANGEWINDOW
#define IECLASS_CHANGEWINDOW	(0x15)
#endif

#ifndef IECLASS_GADGETHELP
#define IECLASS_GADGETHELP	(0x16)
#endif

#endif
@


38.28
log
@Defined SPOS_BOUNDEDBOTTOM.  Removed SPOS_FUNCTIONCALL.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.27 92/08/06 17:01:26 peter Exp Locker: peter $
d345 1
a345 1
/* Flags to drawGadgets():
d357 1
a357 1
 * NB: intuinternal.h depends on DRAWGADGETS_ALL being zero.
@


38.27
log
@Defined GetUserTagData0() macro.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.26 92/08/03 15:54:13 peter Exp Locker: peter $
d308 9
a316 5
 * SPOS_FUNCTIONCALL- Set by MoveScreen() and ScreenPosition()
 *	to indicate that we got here directly from function call.
 * SPOS_UNBOUNDEDBOTTOM - screenLegalPosition() to be unbounded on
 *	the bottom, since that's the way MoveScreen() always limited
 *	things.
d336 1
a336 1
#define SPOS_FUNCTIONCALL	(8)
d341 1
@


38.26
log
@Pointer cream-color now matches current default.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.25 92/08/02 12:42:10 peter Exp Locker: peter $
d29 1
@


38.25
log
@Added AWIN_ definitions for itACTIVATEWIN token.  ROM pointers are
now POINTERXRESN_LORES instead of _DEFAULT.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.24 92/07/17 17:26:05 peter Exp Locker: peter $
d138 1
a138 1
#define COLOR19	0xEEA		/* Cream: USHORT color19; */
@


38.24
log
@Supplanted SDEPTH_CHILDONLY by SDEPTH_INFAMILY.  ROM busy pointer now
is of default resolution.  mpt_SpriteData collapsed into xmpt_BitMap.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.23 92/06/02 14:53:52 peter Exp Locker: peter $
d55 1
a55 1
#define ROMPOINTER_XRESN	POINTERXRESN_DEFAULT
d64 1
a64 1
#define ROMBUSYPOINTER_XRESN	POINTERXRESN_DEFAULT
d80 1
a80 1
    struct BitMap *xmpt_BitMap;	/* For non-extended MousePointers, this is
d96 14
d356 15
@


38.23
log
@Changed some defines to use new pointer flags.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.22 92/05/27 11:52:46 peter Exp Locker: peter $
d55 2
a56 2
#define ROMPOINTER_XRESN		POINTERXRESN_DEFAULT
#define ROMPOINTER_YRESN		POINTERYRESN_DEFAULT
d64 2
a65 2
#define ROMBUSYPOINTER_XRESN	POINTERXRESN_HIRES
#define ROMBUSYPOINTER_YRESN	POINTERYRESN_HIGHASPECT
d80 6
a85 1
    UWORD *mpt_SpriteData;	/* Pointer to sprite data for ChangeSprite() */
a90 3
    struct BitMap *xmpt_BitMap;	/* Pointer to bitmap containing sprite
				 * imagery.  Width/Height are also there?
				 */
a205 1
/* SEENIPOINTER is currently compiled out */
d272 1
a272 1
 * SDEPTH_CHILDONLY - Move the child within the family, instead of moving
d282 1
a282 1
 * #define SDEPTH_CHILDONLY	(2)
d285 1
a285 1
#define SDEPTH_USERMASK		(SDEPTH_TOFRONT|SDEPTH_TOBACK|SDEPTH_CHILDONLY)
@


38.22
log
@New definitions for WBColors array, also color definitions.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.21 92/05/21 17:39:10 peter Exp Locker: peter $
d55 2
a56 1
#define ROMPOINTER_RESN		POINTERRESN_DEFAULT
d64 2
a65 1
#define ROMBUSYPOINTER_RESN	POINTERRESN_HIRES
d90 2
a91 1
    WORD xmpt_PointerRes;	/* Intended resolution (see POINTERRESN_ flags) */
d200 2
d203 1
a203 1
/* Unused: 0x00080000, 0xXXX00000 */
@


38.21
log
@Removed ON_PATROL stuff.  Added SEENIPALETTE.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.20 92/05/15 14:05:41 peter Exp Locker: peter $
d117 3
a119 3
#define COLOR17	0xE44		/* USHORT color17; */
#define COLOR18	0x000		/* USHORT color18; */
#define COLOR19	0xEEA		/* USHORT color19; */
d122 10
a131 12
/* Workbench Screen colors */
#if 1	/* new look defaults */
#define COLOR0 0xAAA
#define COLOR1 0x000
#define COLOR2 0xFFF
#define COLOR3 0x68B
#else
#define COLOR0 0x05A		/* USHORT color0; */
#define COLOR1 0xFFF		/* USHORT color1; */
#define COLOR2 0x002		/* USHORT color2; */
#define COLOR3 0xF80		/* USHORT color3; */
#endif
@


38.20
log
@Removed internal definitions of alert values.  Added new ON_PATROL
flag.  Removed unused SWE_ flags.  Added friendly names for new
layer damage bits.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.19 92/04/14 15:44:54 peter Exp Locker: peter $
a41 2
/* non-void contents of rastport (for cloning) */
#define RASTPORTUSED (sizeof (struct RastPort))
a42 1

d192 1
d199 1
a199 3
#define ON_PATROL	0x00000400 /* Doing a BorderPatrol().  Used for
				    * ScrollRaster() damage sniffing
				    */
d201 1
d321 17
a365 4

/* supported scan rate identifiers	*/
#define SCAN_NORMAL	0
#define SCAN_DOUBLE	1
@


38.19
log
@MousePointer structure had mpt_Width and mpt_Height fields reversed wrt.
what the window structure contains.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.18 92/04/09 16:25:18 peter Exp Locker: peter $
d21 3
d176 3
a178 1
#define GADGETON	0x00000004 /* GRELEASE highlighted flag */
d200 5
a204 1
/* Unused: 0x00000400, 0x00080000, 0xXXX00000 */
d210 7
a216 3
/* these are the defines for the setWindow Exception cases */
#define SWE_REQUEST	0x0001	/* the window being set has a requester */
#define SWE_NOACTIVE	0x0002	/* Active Window set to NULL */
a239 12


/* these defines are for the Intuition Alert() numbers */
#define NOGRAPHICS (AT_DeadEnd | AN_Intuition | AG_OpenLib | AO_GraphicsLib)
#define NOLAYERS   (AT_DeadEnd | AN_Intuition | AG_OpenLib | AO_LayersLib)

#define BADGADGET  0x04000001	/* AN_GadgetType made RECOVERY as it should */
#define BADSTATE   0x8400000C	/* Bad State Return entering Intuition */
#define BADMESSAGE 0x8400000D	/* Bad Message received by IDCMP */
#define WEIRDECHO  0x8400000E	/* Weird echo causing incomprehension */
#define NOKEYMAP  0x8400000F	/* couldn't open the Console Device */

@


38.18
log
@Removed unused NEWPOINTER ibase flag.  MousePointer width/height
bytes now unsigned.  Added DGBF_ flags.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.17 92/04/07 17:50:48 peter Exp Locker: peter $
d79 1
a80 1
    UBYTE mpt_Height;		/* Sprite height */
@


38.17
log
@ROM busy pointer definitions.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.16 92/04/02 21:38:13 peter Exp Locker: peter $
d17 5
d79 2
a80 2
    BYTE mpt_Width;		/* Sprite width */
    BYTE mpt_Height;		/* Sprite height */
d195 1
a195 4
#define NEWPOINTER	0x00000400 /* CustomMousePointer is a full new pointer,
				    * as opposed to &win->Pointer
				    */
/* Unused: 0x00080000, 0xXXX00000 */
@


38.16
log
@Added temp definition for IECLASS_GADGETHELP.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.15 92/04/02 12:04:26 peter Exp Locker: peter $
d47 1
d50 50
@


38.15
log
@Added NEWPOINTER IBase flag.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.14 92/03/26 18:41:55 peter Exp Locker: peter $
d432 4
@


38.14
log
@Added SPOS_TYPEMASK.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.13 92/03/26 16:36:40 peter Exp Locker: peter $
d139 4
a142 2

/* Unused: 0x00000400, 0x00080000, 0xXXX00000 */
@


38.13
log
@Fixed SPOS_ comments.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.12 92/03/23 11:48:39 peter Exp Locker: peter $
d250 2
d265 2
a266 1
#define SPOS_USERMASK		(SPOS_FORCEDRAG|SPOS_MAKEVISIBLE|SPOS_ABSOLUTE|SPOS_RELATIVE)
@


38.12
log
@Added SMOVE_FUNCTIONCALL flag.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.11 92/03/21 14:50:06 peter Exp Locker: peter $
d252 4
a255 2
 * #define SPOS_FORCEDRAG	(1)
 * #define SPOS_ABSOLUTE	(2)
d258 6
a263 6
#define SPOS_FUNCTIONCALL	(4)
#define SPOS_UNBOUNDEDBOTTOM	(8)
#define SPOS_MENUSNAPRANGE	(16)
#define SPOS_REVALIDATE	(32)
#define SPOS_NORETHINK		(64)
#define SPOS_USERMASK		(SPOS_FORCEDRAG|SPOS_ABSOLUTE)
@


38.11
log
@Removed SDEPTH_DOIT.  Moved some SDEPTH flags into public headers.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.10 92/03/19 15:51:47 peter Exp Locker: peter $
d217 1
a217 1
 * SDEPTH_USERMASK - Mask to protect against user setting internal-only bits
d221 2
a222 2
 */
/* These three flags are in the public includes:
d228 1
a228 1
#define SDEPTH_USERMASK		(3)
d234 5
a238 3
 * SMOVE_OWNER - Caller is the owner of this screen.
 * SMOVE_INFAMILY - Caller wants to move screen within its family.
 * SMOVE_UNBOUNDEDBOTTOM - screenLegalPosition() to be unbounded on
d241 1
a241 1
 * SMOVE_MENUSNAPRANGE - Allow screen to move farther right than normally
d243 1
a243 1
 * SMOVE_REVALIDATE - Force revalidation of legal position when un-snapping
d245 9
d255 7
a261 5
#define SMOVE_OWNER		SCREEN_OWNER	/* unused */
#define SMOVE_INFAMILY		SCREEN_INFAMILY	/* unused */
#define SMOVE_UNBOUNDEDBOTTOM	0x0004
#define SMOVE_MENUSNAPRANGE	0x0008
#define SMOVE_REVALIDATE	0x0010
@


38.10
log
@Juggled SMOVE and SDEPTH constants.  Renamed parameters to IWindowDepth().
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.9 92/03/19 10:53:20 peter Exp Locker: peter $
a214 1
 * SDEPTH_DIRECTIONMASK - mask all but SDEPTH_TOFRONT/SDEPTH_TOBACK
d217 2
a220 2
 * SDEPTH_DOIT - A special flag used by SetScreenAttrsA() to easily
 *	notice when depth-requests have been received.
d222 7
a228 2
#define	SDEPTH_TOFRONT 		(0)
#define SDEPTH_TOBACK		(1)
a229 1
#define SDEPTH_CHILDONLY	(2)
a230 1
#define SDEPTH_DOIT		0x80000000
@


38.9
log
@Removed the LOCK/UNLOCKxxx macros to save space.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.8 92/03/03 16:32:48 peter Exp $
a200 1
/* ZZZ: stuff added by jimm: */
d203 8
a210 4
/* arguments to IDepthArrange (windows) */
#define	W_TOFRONT 	(0)
#define W_TOBACK  	(1)
#define W_TOMIDDLE  	(2)
d212 11
a222 2
/* arguments to IScreenDepth */

d225 4
d230 17
a246 1
#define SDEPTH_DIRECTIONMASK	(1)	/* Direction mask */
a247 3
/* These are flags */
#define SDEPTH_CHILDONLY	(2)	/* If child, depth-arrange child only */
#define SDEPTH_INITIAL		(4)	/* Signifies initial linking of this screen */
a379 18

/* IMoveScreen() and screenLegalPosition() share a bunch of flags:
 * SMOVE_OWNER - Caller is the owner of this screen.
 * SMOVE_INFAMILY - Caller wants to move screen within its family.
 * SMOVE_UNBOUNDEDBOTTOM - screenLegalPosition() to be unbounded on
 *	the bottom, since that's the way MoveScreen() always limited
 *	things.
 * SMOVE_MENUSNAPRANGE - Allow screen to move farther right than normally
 *	(up to the Text Overscan left-edge) to permit screen menu-snap.
 * SMOVE_REVALIDATE - Force revalidation of legal position when un-snapping
 *	the menu.
 */

#define SMOVE_OWNER		SCREEN_OWNER
#define SMOVE_INFAMILY		SCREEN_INFAMILY
#define SMOVE_UNBOUNDEDBOTTOM	0x0004
#define SMOVE_MENUSNAPRANGE	0x0008
#define SMOVE_REVALIDATE	0x0010
@


38.8
log
@Renamed the screen movement flags.  Defined some new ones.  When the
ROM pointer was changed, the hot-spot wasn't correctly repositioned.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.7 92/02/21 17:02:26 peter Exp Locker: peter $
a15 15

#if !IFLOW	/* omit when making iflow */
/* gonna turn this into a function	*/
/* #define LOCKSTATE()	lockIBase(ISTATELOCK) */
#define LOCKGADGETS()	lockIBase(GADGETSLOCK)
#define LOCKVIEW()	lockIBase(VIEWLOCK)
#define LOCKIBASE()	lockIBase(IBASELOCK)
#define LOCKRP()	lockIBase(RPLOCK)

/* #define UNLOCKSTATE()	unlockIBase(ISTATELOCK) */
#define UNLOCKGADGETS()	unlockIBase(GADGETSLOCK)
#define UNLOCKVIEW()	unlockIBase(VIEWLOCK)
#define UNLOCKIBASE()	unlockIBase(IBASELOCK)
#define UNLOCKRP()	unlockIBase(RPLOCK)
#endif
@


38.7
log
@Renamed IScreenDepth() controls.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.6 92/02/11 13:38:57 peter Exp Locker: peter $
d57 8
d74 2
a75 2
#define POINTERX -2		/* BYTE XOffset; */
#define POINTERY -1		/* BYTE YOffset; */
a215 3
/* jimm: july 27 1986: MoveSprite error back in. */
#define SPRITEERROR	(-1)

a255 5
/* these are the defines for the Intuition default Pointer */
#define ROMPOINTER_HEIGHT	16
#define ROMPOINTER_HOTX		-1
#define ROMPOINTER_HOTY		-1

d367 17
a383 3
/* IMoveScreen() has a couple of possible values */
#define MAGIC_RANGE	(0x01)	/* Let oscan screens move right to view origin */
#define MAGIC_VALIDATE	(0x02)	/* Make IMoveScreen(0,0) validate position */
@


38.6
log
@Added FRAMEEDGE definitions.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.5 92/02/07 11:06:28 peter Exp Locker: peter $
d221 2
a222 2
#define	S_TOFRONT 	(0)
#define S_TOBACK	(1)
d224 1
a224 1
#define S_DEPTHMASK	(1)	/* Direction mask */
d227 2
a228 2
#define S_DEPTHFAMILY	(2)	/* Force whole screen family to depth-arrange */
#define S_NO_DELINK	(4)	/* Don't delink the screen (used initially) */
@


38.5
log
@Definitions for rom pointer are now ROMPOINTER_xxx.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.4 91/08/21 18:17:10 peter Exp Locker: peter $
d380 10
@


38.4
log
@IBase LOCK...() defines are not included when iflow is being made.
Removed menu-delay flags.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.3 91/07/25 17:05:27 peter Exp Locker: peter $
d252 3
a254 3
#define IPOINTHEIGHT	16
#define IPOINTHOTX	-1
#define IPOINTHOTY	-1
@


38.3
log
@Defined IBase flag for kludge to poke FMode to zero.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.2 91/07/25 15:02:52 peter Exp Locker: peter $
d17 1
a17 1
#if 1	/* undefine these when making iflow */
d147 1
a147 8
#define MENUDELAY	0x00000400 /* Menu-delay in effect */
#define RECENTLY	0x00080000 /* In menu-delay mouse-move ignored recently */

#if AA_KLUDGES
#define CLEAR_FMODE	0x00100000 /* Need to poke FMode to zero */
#endif

/* Unused: 0xXXX00000 */
@


38.2
log
@Added IDEPTHFAMILY definition.  Removed several unused definitions.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.1 91/07/10 17:55:55 peter Exp Locker: peter $
d149 4
@


38.1
log
@Defined two new IBase flags to implement menu-delay.
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 38.0 91/06/12 14:22:30 peter Exp Locker: peter $
a159 29
/* these are the defines for where to return from GADGET STATE */
#define GRET_IDLE	1	/* return to papa */
#define GRET_REQUEST	2	/* return to REQUEST state */
#define GRET_REQGOTTEN	3	/* Non-Select end of some Gadget (String) */
#define GRET_IDLEGOTTEN	4	/* Non-Select end of some Gadget (String) */

/* previous state when SCREENDRAG started	*/
#define SDRET_IDLE	0	/* was doing nothing	*/
#define SDRET_REQUEST	1	/* a requester is up	*/
#define SDRET_GADGET	2	/* normal screen drag gadget */

 
/* --- these are the defines for return from INTUIWAIT -------------------- */
#define SRET_IDLE	1	/* normal heavenly state */
#define SRET_SMENU	2	/* StartMenu state */
#define SRET_MENU	3	/* Menu state */
#define SRET_GSIZING	4	/* Window-Sizing state */
#define SRET_GWDRAG	5	/* Window-Dragging state */
#define SRET_GRELEASE	6	/* in "get Gadget release" state */
#define SRET_REQ	7	/* in Requester state */
#define SRET_GPROP	8	/* in Proportional-Gadget state */
#define SRET_GSDRAG	9	/* Screen-Dragging state */
#define SRET_STRING	10	/* in the middle of a String Gadget */
#define SRET_CANCELMENU 11	/* jes waitin' for the menu button to go up */
#define SRET_GSIZEDRAG  12	/* combines window sizing-dragging  */
#define SRET_NEWSTRING  13	/* programmer activation of string gadget   */
#define SRET_ACTIVATEGADGET  SRET_NEWSTRING 	/* more general	*/
#define SRET_HOOK	14	/* hook gadget active state		*/

a174 9

/* these are the defines for which destination is to be used in 
 * multi-destination operations
 */
#define SCREENDEST 0
#define WINDOWDEST 1
#define REQUESTDEST 2


d217 4
a220 4
/* arguments to IDepthArrange	*/
#define	IUPFRONT 	(0)
#define IBEHIND  	(1)
#define ITOMIDDLE  	(2)
d222 6
a227 2
#define	OTHERWAY(A) (1 - (A))
#define	WHICHONE(I, N, W) ((W)?(I):((N)-1-(I))) /* note that --i is OK */
d229 3
a231 2
#define	IUpFront(A, B)	IDepthArrange( (A), (B), IUPFRONT)
#define	IBehind(A, B)	IDepthArrange( (A), (B), IBEHIND)
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d10 1
a10 1
 *  $Id: intuinternal.h,v 36.40 91/04/10 17:46:03 peter Exp $
d147 2
a148 3
/* yanked out.  please erase when reusing */
/*  INMENUSTATE  	0x00000400 */
/* FIRST_WORKBENCH	0x00080000 */
d150 1
a150 7


/* commands for theIHighGadgeteer */
#define IHIGH_ON	0
#define IHIGH_OFF	1
#define IHIGH_TOGGLE	2

@
