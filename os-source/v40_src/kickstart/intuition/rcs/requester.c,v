head     38.9;
branch   ;
access   ;
symbols  V40_85:38.9 V40_71:38.9 V40_68:38.9 V40_65:38.9 V40_47:38.9 V40_45:38.9 V40_37:38.9 V40_34:38.9 V40_29:38.9 V39_2415:38.9 V39_2369:38.9 V39_2339:38.9 V39_2332:38.9 V39_2275:38.8 V39_2256:38.8 V39_2210:38.8 V39_2192:38.8 V39_2084:38.8 V39_2082:38.8 V39_2076:38.8 V39_2073:38.8 V39_2058:38.8 V39_2051:38.8 V39_2031:38.8 V39_2017:38.8 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.8 V39_1805:38.8 V39_1783:38.8 V39_1695:38.8 V39_1621:38.8 V39_1620:38.8 V39_1508:38.8 V39_1485:38.8 V39_1461:38.8 V39_1458:38.8 V39_1456:38.8 V39_1405:38.8 V39_1368:38.8 V39_1360:38.8 V39_1324:38.8 V39_1147:38.7 V39_1143:38.7 V39_1141:38.7 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.6 V39_1078:38.6 V39_1073:38.6 V39_757:38.4 V39_702:38.4 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.3 V39_495:38.3 V39_416:38.3 V39_383:38.3 V39_371:38.3 V39_336:38.3 V39_323:38.2 V39_295:38.2 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.2 V39_171:38.2 V39_161:38.2 V38_159:38.2 V38_116:38.2 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.9
date     92.12.09.18.14.29;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.21.17.43.45;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.01.13.54.28;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.07.19.48.20;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.01.15.07.31;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.24.11.57.10;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.28.12.39.28;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.18.00.23;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.06.30;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.29.36;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.9
log
@Renamed gzzBox() to windowInnerBox().
@
text
@
/*** requester.c ************************************************************
 *
 *  File
 *
 *  $Id: requester.c,v 38.8 92/05/21 17:43:45 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#define TEXTPAD 4
/** #define DEBUG 1 **/

#include "intuall.h"
#include "imageclass.h"

#define WORRY_REQDRAWN	FALSE

#define D(x)	;

drawRequester(req, w)
struct Requester *req;
struct Window *w;
{
    struct RastPort *rport;

    int right, bottom;

    if (req->ReqLayer == NULL)
    {
	return;
    }

    if (req->Flags & PREDRAWN)
    {
	/* this requester's imagery comes pre-drawn. 
	 * copy that into our new requester rastport
	 */
	BltBitMapRastPort(req->ImageBMap, 0, 0, req->ReqLayer->rp, 0, 0, 
	req->Width, req->Height, 0x00C0);
    }
    else
    {
	bottom	= req->Height - 1;
	right	= req->Width - 1;

	rport = obtainRP( &w->WScreen->RastPort, req->ReqLayer );

	/* rp->Mask = -1; already */
	/* SetDrMd(rport, JAM1); already */

	/* perhaps inhibit this with a new flag	*/
	if ( ! TESTFLAG( req->Flags, NOREQBACKFILL ) )
	    drawBlock( rport, 0, 0, right, bottom, req->BackFill );

	/** Draw Imagery **/
	/* offsets taken care of when layer created	*/

	if ( TESTFLAG( req->Flags, USEREQIMAGE ) )
	{
	    struct DrawInfo	*drinfo;
	    struct DrawInfo	*GetScreenDrawInfo();

	    drinfo = GetScreenDrawInfo( w->WScreen );
	    DrawImageState( rport, req->ReqImage, 0, 0, IDS_NORMAL, drinfo );
	    FreeScreenDrawInfo( w->WScreen, drinfo );
	}

	if (req->ReqBorder) DrawBorder(rport, req->ReqBorder, 0, 0);
	if (req->ReqText) PrintIText(rport, req->ReqText, 0, 0);

	freeRP(rport);


	/** Get Gadgets Drawn **/
	/** NOTE: that we pass requester window address once again 2/7/86 */
	drawGadgets( req->RWindow, req->ReqGadget, -1, DRAWGADGETS_ALL );
    }
}


BOOL newDMRequest(w, req)
struct Window *w;
struct Requester *req;
{
    if (w->DMRequest) if (w->DMRequest->Flags & REQACTIVE) return(FALSE);
    w->DMRequest = req;
    return(TRUE);
}

/*** intuition.library/ClearDMRequest ***/

BOOL
ClearDMRequest(w)
struct Window *w;
{
    return (newDMRequest(w, NULL));
}

/*** intuition.library/SetDMRequest ***/

SetDMRequest(w, req)
struct Window *w;
struct Requester *req;
{
    return (newDMRequest(w, req));
}




/*** intuition.library/Request ***/

BOOL
Request(req, window)
struct Requester *req;
struct Window *window;
{
    int retval;

    retval = doISM( itSETREQ, window, req );
    D( printf("Request after doISM. retval %lx\n", retval ) );
    return ( ! retval );
    /*** return ( ! doISM( itSETREQ, window, req ) ); ****/
}

/*
 * returns TRUE if it succeeded
 * pass bool 'isdmr' true if this is a DMRequester
 */
BOOL
IRequest( req, window, isdmr )
struct Requester *req;
struct Window *window;
{
    struct 	Gadget *gadget;
    int		relx, rely;

    /** link used in drawGGrunt **/
    req->RWindow = window;

    /** Get a layer for the new requester **/
    req->ReqLayer = NULL;	/* just to be very sure */

    /* link in (tail) so establishReqLayer knows where to put layer */
    req->OlderRequest = window->FirstRequest;	/* works even if NULL */

    SETFLAG( req->Flags, REQACTIVE );

    /* either bring up the requester under the mouse, or
     * relative to the center of the screen, if POINTREL
     */
    if ( TESTFLAG( req->Flags, POINTREL ) )
    {
	if ( isdmr )	/* position under mouse */
	{
	    relx = window->MouseX;
	    rely = window->MouseY;
	}
	else		/* position over center of window */
	{
	    relx = (window->Width - req->Width)/2;
	    rely = (window->Height - req->Height )/2;
	}

	pointRel( req, window, relx, rely );
    }

    /* use new eRL3 -- flying cast to (struct IBox *) 	*/
    /* layer is created with damage, until further notice */
    if (!establishReqLayer3(req, (struct IBox * ) &window->LeftEdge, 
	( struct Point * ) &window->GZZWidth ))
    {
	goto BAD;
    }

    /* help that programmer remember to set his REQGADGET flag */
    /* no GADGETSLOCK here, since the gadgets are not
     * yet available to another task.
     */
    for (gadget = req->ReqGadget; gadget; gadget = gadget->NextGadget)
    {
	gadget->GadgetType |= REQGADGET;
    }

    /* link requester into the Window */
    /* above -- req->OlderRequest = window->FirstRequest; */
    window->FirstRequest = req;
    window->ReqCount++;
    window->Flags |= INREQUEST;

    /* since the requester layer is created with damage, let's
     * just use BorderPatrol to draw it the first time
     */
    BorderPatrol( window->WScreen );
    D( printf("eRL3: after BP, layer refresh = %lx\n",
	req->ReqLayer->Flags & LAYERREFRESH ) );

    windowEvent( window, IECLASS_REQUESTER, IECODE_REQSET );

GOOD:
    return ( TRUE );
BAD:
    CLEARFLAG( req->Flags, REQACTIVE );
    return ( FALSE );
}


BOOL
IEndRequest( window, req )
struct Window *window;
struct Requester *req;
{
    struct Requester *prevr;
    BOOL has_reqlayer = FALSE;

    /* jimm: 6/9/86: shut off REQACTIVE */
     CLEARFLAG( req->Flags, REQACTIVE );

    /* check that the requester really exists */
    prevr = window->FirstRequest;
    while (prevr && (prevr != req)) prevr = prevr->OlderRequest;

    if (!prevr) {
	return (FALSE);
    }

    /* unlink requester */
    if ( prevr = (struct Requester *) previousLink( window->FirstRequest, req))
    {
	prevr->OlderRequest = req->OlderRequest;
    }
    else	/* first in list	*/
    {
	window->FirstRequest = req->OlderRequest;	/* may == NULL */
    }

    /* decrement now, test in two places later */
    --window->ReqCount;

    /*  deleteLayer */
    if ( req->ReqLayer != NULL )
    {
	has_reqlayer = TRUE;
	LockLayerInfo(&window->WScreen->LayerInfo);
	DeleteLayer(NULL, req->ReqLayer);
	req->ReqLayer = NULL;

	/* The REQCLEAR event has to sneak in before BorderPatrol
	 * sends a REFRESHWINDOW message to the guy.  I like
	 * keeping the message inside the LockLayerInfo
	 * protection for the underlying window's damage list.
	 * So, let's exit this condition (ReqLayer != NULL)
	 * temporarily
	 */
    }

    /* Peter 24-Jan-92: UNCONDITIONALLY send REQCLEAR.  2.04 had
     * a bug where REQCLEAR wasn't sent for non-last requesters
     * that had no layer.
     */

    windowEvent( window, IECLASS_REQUESTER, IECODE_REQCLEAR );
    if ( window->ReqCount == 0 )
    {
	CLEARFLAG( window->Flags, INREQUEST );
    }

    /* Now we need to finish the job for the case when ReqLayer is
     * non-NULL.
     */

    if ( has_reqlayer )
    {
	/* only BP if I had a layer to delete (real damage),
	 * and do it under the protection of the LInfo lock
	 */
	BorderPatrol( window->WScreen );
	UnlockLayerInfo(&window->WScreen->LayerInfo);
    }

    return (TRUE);
}
/*** intuition.library/EndRequest ***/

EndRequest(req, window)
struct Requester *req;
struct Window *window;
{
    doISM( itCLEARREQ, window, req );
}


/*
 * sets up requester position, best fit in window
 * while trying to open at x,y plus Reqester.RelLeft/Top
 */
pointRel( r, window, x, y )
struct Requester	*r;
struct Window		*window;
{
    /* do a best fit thing */
    struct IBox reqbox;
    struct IBox windowbox;

    /* get correct mouse position */
    reqbox.Left = x;
    reqbox.Top = y;

    /* do the mouse relative stuff */
    reqbox.Left += r->RelLeft;
    reqbox.Top += r->RelTop;

    reqbox.Width = r->Width;
    reqbox.Height = r->Height;
    /* have advisory requester box */

    /* get containing dimensions */
    windowInnerBox( window, &windowbox);

    /* get best fit */
    boxFit(&reqbox, &windowbox, &reqbox);

    /* convert upper left to GZZ if necessary */
    if (TESTFLAG( window->Flags, GIMMEZEROZERO ))
    {
	
	reqbox.Left -= window->BorderLeft;
	reqbox.Top -= window->BorderTop;
    }
    
    /* set true requester left/top attempt */
    r->LeftEdge = reqbox.Left;
    r->TopEdge = reqbox.Top;
    D( printf("final top/left: %ld/%ld\n", r->LeftEdge, r->TopEdge ));
}
@


38.8
log
@Now passes DRAWGADGETS_ALL to drawGadgets().
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.7 92/05/01 13:54:28 peter Exp Locker: peter $
d321 1
a321 1
    gzzBox( window, &windowbox);
@


38.7
log
@Took out 2nd BorderPatrol() parameter.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.6 92/04/07 19:48:20 peter Exp Locker: peter $
d79 1
a79 1
	drawGadgets(req->RWindow, req->ReqGadget, -1);
@


38.6
log
@Removed some unused vbles.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.5 92/04/01 15:07:31 peter Exp Locker: peter $
d197 1
a197 1
    BorderPatrol( window->WScreen, NULL );
d280 1
a280 1
	BorderPatrol( window->WScreen, NULL );
@


38.5
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.4 92/03/24 11:57:10 peter Exp Locker: peter $
a26 2
    int BXReal, BRReal;
    int wwidth, wheight;
a64 1
	    int			state;
a137 1
    struct	Screen *screen;
a291 2
    struct Requester *workreq;

@


38.4
log
@Now pass NULL for new second parameter to BorderPatrol().
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.3 92/01/28 12:39:28 peter Exp Locker: peter $
d96 1
a97 36
/****** intuition.library/ClearDMRequest **************************************
*
*    NAME
*	ClearDMRequest -- Clear (detaches) the DMRequest of the window.
*
*    SYNOPSIS
*	Response = ClearDMRequest( Window )
*	D0			   A0
*
*	BOOL ClearDMRequest( struct Window * );
*
*    FUNCTION
*	Attempts to clear the DMRequest from the specified window,
*	that is detaches the special requester that you attach to 
*	the double-click of the menu button which the user can then 
*	bring up on demand.  This routine WILL NOT clear the DMRequest
*	if it's active (in use by the user). The IDCMP message class
*	IDCMP_REQCLEAR can be used to detect that the requester is not in use,
*	but that message is sent only when the last of perhaps several
*	requesters in use in a window is terminated.
*
*    INPUTS
*	Window = pointer to the window from which the DMRequest is to be cleared.
*
*    RESULT
*	If the DMRequest was not currently in use, detaches the DMRequest
*	from the window and returns TRUE.
*
*	If the DMRequest was currently in use, doesn't change anything
*	and returns FALSE.
*
*    BUGS
*
*    SEE ALSO
*	SetDMRequest(), Request()
*****************************************************************************/
d105 1
a106 41
/****** intuition.library/SetDMRequest ************************************
*
*    NAME
*	SetDMRequest -- Set the DMRequest of a window.
*
*    SYNOPSIS
*	success = SetDMRequest( Window, DMRequest )
*	D0                      A0      A1
*
*	BOOL SetDMRequest( struct Window *, struct Requester * );
*
*    FUNCTION
*	Attempts to set the DMRequest into the specified window.  
*	The DMRequest is the special requester that you attach to 
*	the double-click of the menu button which the user can then 
*	bring up on demand.  This routine WILL NOT change the DMRequest
*	if it's already set and is currently active (in use by the user).  
*	After having called SetDMRequest(), if you want to change the 
*	DMRequest, the correct way to start is by calling ClearDMRequest() 
*	until it returns a value of TRUE; then you can call SetDMRequest() 
*	with the new DMRequest.  
*
*	If the POINTREL flag is set in the DMRequest, the DMR will open as
*	close to the pointer as possible.  The RelLeft/Top fields are
*	for fine-tuning the position.
*
*    INPUTS
*	Window = pointer to the window from which the DMRequest is to be set
*	DMRequest = a pointer to a requester
*
*    RESULT
*	If the current DMRequest was not in use, sets the DMRequest
*	    pointer into the window and returns TRUE.
*	If the DMRequest was currently in use, doesn't change the pointer
*	    and returns FALSE
*
*    BUGS
*
*    SEE ALSO
*	ClearDMRequest(), Request()
*****************************************************************************/
d117 1
a118 38
/****** intuition.library/Request *******************************************
*
*    NAME
*	Request -- Activate a requester.
*
*    SYNOPSIS
*	Success = Request( Requester, Window )
*	D0		   A0         A1
*
*	BOOL Request( struct Requester *, struct Window * );
*
*    FUNCTION
*	Links in and displays a requester into the specified window.  
*
*	This routine ignores the window's IDCMP_REQVERIFY flag.
*
*    INPUTS
*	Requester = pointer to the requester to be displayed
*	Window = pointer to the window into which this requester goes
*
*	New for V36: the POINTREL flag now has meaning if the requester
*	is not a DMR (Double-Menu Requester):
*	If POINTREL is set this requester should be placed in the center
*	of the window, offset by Requester.RelLeft and Requester.RelTop.
*	If the requester doesn't fit in the window, its position will be
*	adjusted to show the upper-left corner.
*
*    RESULT
*	If the requester is successfully opened, TRUE is returned.  Otherwise,
*	if the requester could not be opened, FALSE is returned.
*
*    BUGS
*	There is a maximum of 8 requesters that are supported in
*	a window that can be changed in size, position, or depth.
*
*    SEE ALSO
*	The Requesters section of the Intuition Reference Manual
*****************************************************************************/
d290 1
a291 32
/****** intuition.library/EndRequest ***************************************
*
*    NAME
*	EndRequest -- Remove a currently active requester.
*
*   SYNOPSIS
*	EndRequest( Requester, Window )
*		    A0         A1
*
*	VOID EndRequest( struct Requester *, struct Window * );
*
*    FUNCTION
*	Ends the request by erasing the requester and decoupling it from
*	the window.
*
*	Note that this doesn't necessarily clear all requesters from the window,
*	only the specified one.  If the window labors under other requesters,
*	they will remain in the window.
*
*    INPUTS
*	Requester = pointer to the requester to be removed
*	Window = pointer to the Window structure with which this requester 
*           is associated
*
*    RESULT
*	None
*
*    BUGS
*
*    SEE ALSO
*	Request()
*****************************************************************************/
@


38.3
log
@REQCLEAR now sent for all requesters that go down, including ones that
have no layer.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.2 91/07/10 18:00:23 peter Exp Locker: peter $
d313 1
a313 1
    BorderPatrol( window->WScreen );
d396 1
a396 1
	BorderPatrol( window->WScreen );
@


38.2
log
@Removed unused variable do_patrol.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.1 91/06/19 18:06:30 peter Exp Locker: peter $
d333 1
d360 1
a360 1
    if (req->ReqLayer != NULL)
d362 1
d367 2
a368 3
	/* this has to sneak in before BorderPatrol sends
	 * a REFRESHWINDOW message to the guy.  At the cost
	 * of duplicating this notification code, I like
d371 2
d374 16
a389 9
	/* Peter 5/24/90:  Send REQCLEAR for each requester
	 * that closes, as done since 1.2 (once again)
	 */
	windowEvent( window, IECLASS_REQUESTER, IECODE_REQCLEAR );
	if ( window->ReqCount == 0 )
	{
	    /* duplicates code below	*/
	    CLEARFLAG( window->Flags, INREQUEST );
	}
d391 2
a397 6
    }
    else if ( window->ReqCount == 0 )
    {
	/* duplicates code above	*/
	CLEARFLAG( window->Flags, INREQUEST );
	windowEvent( window, IECLASS_REQUESTER, IECODE_REQCLEAR );
@


38.1
log
@Removed obsolete code.
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 38.0 91/06/12 14:29:36 peter Exp Locker: peter $
a332 1
    BOOL		do_patrol = FALSE;
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: requester.c,v 36.26 91/02/12 18:18:40 peter Exp $
a22 40
#if 0	/* put into drawRequester	*/
/** jimm: be sure that req->ReqLayer != NULL before calling */
/* LockLayerInfo before calling */
reqImage(req, window)
struct Requester *req;
struct Window *window;
{
    register int  right, bottom;
    struct RastPort *rport;

    bottom	= req->Height - 1;
    right	= req->Width - 1;

    rport = obtainRP(&window->WScreen->RastPort, req->ReqLayer);

    rport->Mask = -1;
    SetDrMd(rport, JAM1);

    drawBlock(rport, 0, 0, right, bottom, req->BackFill);

    /** Draw Imagery **/
    /* offsets taken care of when layer created	*/
    if (req->ReqBorder) DrawBorder(rport, req->ReqBorder, 0, 0);
    if (req->ReqText) PrintIText(rport, req->ReqText, 0, 0);

    freeRP(rport);


    /** Get Gadgets Drawn **/
    /** NOTE: that we pass requester window address once again 2/7/86 */

    drawGadgets(req->RWindow, req->ReqGadget, -1);
}
#endif /* into drawRequester */


#if WORRY_REQDRAWN
BOOL
#endif

a28 3
#if WORRY_REQDRAWN
    BOOL reqnotdrawn = TRUE;
#endif
a34 3
#if WORRY_REQDRAWN
	return ( TRUE ); /* I don't have anything to do: req invisible */
#else
a35 1
#endif
a68 7
#if 0
	    printf("drawR, usereqimage, first image at %lx\n",
		req->ReqImage );
	    if ( req->ReqImage ) dumpBox( "first reqimage",
			&req->ReqImage->LeftEdge );
#endif

a83 7

#if WORRY_REQDRAWN
    reqnotdrawn = FALSE;

    return (! reqnotdrawn);
#else
#endif
a252 3
#if WORRY_REQDRAWN
    BOOL 	reqdrawn = FALSE;
#endif
a309 1
#if 1
a315 11
#else

    LockLayerInfo(&window->WScreen->LayerInfo);
#if WORRY_REQDRAWN
    reqdrawn = drawRequester(req, window);
#else
    drawRequester(req, window);
#endif WORRY_REQDRAWN
    UnlockLayerInfo(&window->WScreen->LayerInfo);

#endif	/* use BorderPatrol	*/
a316 3
#if WORRY_REQDRAWN
    if ( reqdrawn ) windowEvent( window, IECLASS_REQUESTER, IECODE_REQSET );
#else WORRY_REQDRAWN
a317 7
#endif WORRY_REQDRAWN

#if WORRY_REQDRAWN
BAD:
    if ( ! reqdrawn ) CLEARFLAG( req->Flags, REQACTIVE );
    return(reqdrawn);
#else WORRY_REQDRAWN
a323 1
#endif WORRY_REQDRAWN
@
