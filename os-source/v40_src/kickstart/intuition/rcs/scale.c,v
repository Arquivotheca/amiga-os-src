head     38.2;
branch   ;
access   ;
symbols  V40_85:38.2 V40_71:38.2 V40_68:38.2 V40_65:38.2 V40_47:38.2 V40_45:38.2 V40_37:38.2 V40_34:38.2 V40_29:38.2 V39_2415:38.2 V39_2369:38.1 V39_2339:38.1 V39_2332:38.1 V39_2275:38.1 V39_2256:38.1 V39_2210:38.1 V39_2192:38.1 V39_2084:38.1 V39_2082:38.1 V39_2076:38.1 V39_2073:38.1 V39_2058:38.1 V39_2051:38.1 V39_2031:38.1 V39_2017:38.1 V39_2012:38.1 V39_1985:38.1 V39_1933:38.1 V39_1819:38.1 V39_1805:38.1 V39_1783:38.1 V39_1695:38.1 V39_1621:38.1 V39_1620:38.1 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.2
date     93.01.12.16.20.47;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.06.29.10.46.38;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.30.05;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@h/vResDivide() now inlined to save space.
@
text
@/*** scale.c **************************************************************
 *
 * coordinate system scaling/transformations
 *
 *  $Id: scale.c,v 38.1 92/06/29 10:46:38 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 ****************************************************************************/

#include "intuall.h"

#define D(x)	;
#define DZ(x)	;
#define DSPRITE(x)	;

/*
 * convert a point in screen coordinates to Mouse coordinates
 * !!!! jimm: 2/19/90: EVERY use of these needs to be checked
 * against overlap of signed range.  I'm going to limit it down
 * a little more so that you can get away with adding or subtracting
 * a little (such as INTERSCREENGAP) without blowing out.
 */
screenToMouse( pt, screen )
struct Point	*pt;
struct Screen	*screen;
{
#if 1

#define TOO_BIG		 (30000)
#define TOO_SMALL 	(-30000)

    /* max/min are 32-bit signed functions	*/
    pt->X =
	imax( imin( pt->X * XSC(screen)->ScaleFactor.X, TOO_BIG ), TOO_SMALL );
    pt->Y =
	imax( imin( pt->Y * XSC(screen)->ScaleFactor.Y, TOO_BIG ), TOO_SMALL );

#else
    pt->X *= XSC(screen)->ScaleFactor.X;
    pt->Y *= XSC(screen)->ScaleFactor.Y;
#endif
}

/* convert a LongPoint in screen coordinates to Mouse coordinates
 * unlike screenToMouse() above, we don't worry about overflow
 * since we have signed LONGs here, instead of signed WORDs.
 */
screenToLongMouse( pt, screen )
struct LongPoint *pt;
struct Screen *screen;
{
    pt->LX *= XSC(screen)->ScaleFactor.X;
    pt->LY *= XSC(screen)->ScaleFactor.Y;
}

/*
 * convert a point in mouse coordinates to screen-resolution coordinates
 * NOTE: performs scaleRatio() step in mouse-to-screen mapping
 */
longmouseToScreen( pt, screen )
struct LongPoint *pt;
struct Screen	*screen;
{
    DZ( if (!(XSC(screen)->ScaleFactor.X  && XSC(screen)->ScaleFactor.Y ) )
	{
	    printf("mouseToScreen divide by zero! %lx\n", screen );
	    dumpPt("scale factor", XSC(screen)->ScaleFactor );
	} )

    pt->LX /= XSC(screen)->ScaleFactor.X;
    pt->LY /= XSC(screen)->ScaleFactor.Y;
}

scaleConversion( pt, res1, res2 )
struct Point	*pt;
struct Point	res1;
struct Point	res2;
{
    LONG	tmp;

    tmp = pt->X * res1.X;
    pt->X = tmp / res2.X;

    tmp = pt->Y * res1.Y;
    pt->Y = tmp / res2.Y;
}

#if 0	/* using viewport sprite positioning	*/
/*
 * convert point in mouse coord space to lores coord
 */
mouseToSprite( pt )
struct Point *pt;
{
    struct IntuitionBase *IBase = fetchIBase();
    struct Point	mousescale;

    mousescale.X = (2 * MOUSESCALEX );	/* ZZZ: is this always right? */
    mousescale.Y = ( IBase->SpriteYFactor );

    DSPRITE( dumpPt( "mouse to sprite in", *pt ) );

    /* from monitor to base coordinate system (handled in spriteY?)	*/
    /* mspcScaleConversion( NULL, IBase->ActiveMonitorSpec, pt ); */

    DSPRITE( dumpPt( "after mspecScale", *pt ) );

    scaleFactorDivide( pt, &mousescale );

    DSPRITE( IBase->debugpt = *pt );	/* DEBUG */
    DSPRITE( dumpPt( "mouse to sprite out", *pt ) );
}
#endif

/*
 * convert screen resolution coords to Mouse coordinates
 */
scaleScreenMouse(rect, screen)
struct Rectangle *rect;
struct Screen	*screen;
{
    screenToMouse((struct Point *) &rect->MinX, screen);
    screenToMouse((struct Point *) &rect->MaxX, screen);
}

@


38.1
log
@mouseToScreen() now takes a LongPoint.  Added longmouseToScreen().
@
text
@d5 1
a5 1
 *  $Id: scale.c,v 38.0 91/06/12 14:30:05 peter Exp Locker: peter $
a72 17
}

WORD
hResDivide( drinfo, ticks )
struct DrawInfo	*drinfo;
LONG		ticks;
{
    return ( ticks / drinfo->dri_Resolution.X );
}


WORD
vResDivide( drinfo, ticks )
struct DrawInfo	*drinfo;
LONG		ticks;
{
    return ( ticks / drinfo->dri_Resolution.Y );
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: scale.c,v 1.13 90/04/30 22:55:13 jimm Exp $
d24 1
a24 1
screenToMouse( pt, screen)
d45 11
d61 2
a62 2
mouseToScreen( pt, screen)
struct Point	*pt;
d70 3
a72 1
    scaleFactorDivide( pt, &XSC(screen)->ScaleFactor );
a89 8
}

scaleFactorDivide( pt, factor )
struct Point	*pt;
struct Point	*factor;
{
    pt->X /= factor->X;
    pt->Y /= factor->Y;
@
