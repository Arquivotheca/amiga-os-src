head     38.10;
branch   ;
access   ;
symbols  V40_85:38.10 V40_71:38.10 V40_68:38.10 V40_65:38.10 V40_47:38.10 V40_45:38.10 V40_37:38.10 V40_34:38.10 V40_29:38.10 V39_2415:38.10 V39_2369:38.10 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.10 V39_2082:38.10 V39_2076:38.10 V39_2073:38.10 V39_2058:38.10 V39_2051:38.10 V39_2031:38.10 V39_2017:38.10 V39_2012:38.10 V39_1985:38.10 V39_1933:38.10 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.10 V39_1621:38.10 V39_1620:38.10 V39_1508:38.10 V39_1485:38.10 V39_1461:38.10 V39_1458:38.10 V39_1456:38.10 V39_1405:38.10 V39_1368:38.10 V39_1360:38.10 V39_1324:38.10 V39_1147:38.9 V39_1143:38.9 V39_1141:38.9 V39_1120:38.9 V39_1116:38.9 V39_1104:38.9 V39_1100:38.9 V39_1078:38.9 V39_1073:38.9 V39_757:38.8 V39_702:38.8 V39_557:38.8 V39_553:38.8 V39_551:38.8 V39_510:38.7 V39_495:38.7 V39_416:38.7 V39_383:38.7 V39_371:38.7 V39_336:38.6 V39_323:38.6 V39_295:38.6 V39_277:38.5 V39_254:38.5 V39_222:38.5 V39_185:38.4 V39_171:38.3 V39_161:38.3 V38_159:38.3 V38_116:38.3 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.10
date     92.05.15.14.12.27;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.02.16.50.04;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.03.16.37.50;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.05.15.41.38;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     91.12.12.20.45.34;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     91.11.11.13.42.43;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.17.14.27.31;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.15.15.30.50;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.06.24.12.17.58;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.12.15.14.23;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.36.29;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.10
log
@This file is now retired, contained entirely in vectorclass.c.
@
text
@/*
 *	$Id: xsysiclass.c,v 38.9 92/04/02 16:50:04 peter Exp Locker: peter $
 *
 *	scaleable images.
 *
 *	(C) Copyright 1989, 1990 Commodore-Amiga, Inc.
 *	    All Rights Reserved Worldwide
 *
 */

/* File retired */
@


38.9
log
@Deleted some unused #defines.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.8 92/03/03 16:37:50 peter Exp Locker: peter $
d11 1
a11 456
#if  LATTICE_C
#include <exec/types.h>
#include <exec/memory.h>
#include <intuition/intuition.h>
#include <intuition/cghooks.h>
#include <intuition/classes.h>
#include <intuition/classusr.h>
#include <intuition/imageclass.h>
#include <intuition/gadgetclass.h>
#include <intuition/vectorclass.h>
#include <intuition/screens.h>
#include <utility/tagitem.h>
#include <graphics/gfxmacros.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <clib/graphics_protos.h>
#include <clib/utility_protos.h>
#include <clib/layers_protos.h>
#include <pragmas/intuition_pragmas.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern ULONG SysBase;
extern struct GfxBase *GfxBase;
extern struct UtilityBase *UtilityBase;
extern struct LayersBase *LayersBase;

#else

#include "intuall.h"
#include <exec/memory.h>
#include "classusr.h"
#include "classes.h"
#include "imageclass.h"
#include <graphics/gfxmacros.h>
#include "vectorclass.h"

#define DSM	SSM

#endif	/* LATTICE_C	*/

extern struct Vector vdepth[];
extern struct Vector vsdepth[];
extern struct Vector vzoom[];
extern struct Vector vclose[];
extern struct Vector vsize[];
extern struct Vector upar[];
extern struct Vector dnar[];
extern struct Vector lfar[];
extern struct Vector rtar[];
extern struct Vector ckmk[];
extern struct Vector mutx[];
extern struct Vector mchk[];
extern struct Vector amky[];


/* DEPTH gadget */
#define VDEPTH_COUNT	9
#define VDEPTH_DW	24
#define VDEPTH_DH	11

/* Screen DEPTH gadget */

#define VSDEPTH_COUNT	9

#define VSDEPTH_DW	23
#define VSDEPTH_DH	11

/* ZOOM gadget */

#define VZOOM_COUNT	6
#define VZOOM_DW	24
#define VZOOM_DH	11

/* CLOSE gadget */
#define VCLOSE_COUNT	5
#define VCLOSE_DW	20
#define VCLOSE_DH	11

/* SIZING gadget 05/31/90 */

#define VSIZE_COUNT	4
#define VSIZE_DW	18
#define VSIZE_DH	10

/* UP ARROW gadget 05/31/90 */

#define UPAR_COUNT	2
#define UPAR_DW		18
#define UPAR_DH		11

/* DOWN ARROW gadget 05/31/90 */
/* share the up arrows' background rectangle */
/* reversed the Y of the UP arrow */

#define DNAR_COUNT	2
#define DNAR_DW		18
#define DNAR_DH		11

/* LEFT ARROW gadget 05/31/90 */

#define LFAR_COUNT	2
#define LFAR_DW		16
#define LFAR_DH		10

/* RIGHT ARROW gadget 05/31/90 */
/* share the LEFT arrows' background rectangle */
/* reversed the X of the LEFT arrow */

#define RTAR_COUNT	2
#define RTAR_DW		16
#define RTAR_DH		10


/* CHECKMARK 05/31/90 */

#define CKMK_COUNT	1
#define CKMK_DW		26
#define CKMK_DH		11

/* MUTUAL EXCLUDE 05/31/90 */

#define MUTX_COUNT	5
#define MUTX_DW		17
#define MUTX_DH		9

/* MENU-CHECKMARK 1-May-91 */

#define MCHK_COUNT	1
#define MCHK_DW		15
#define MCHK_DH		8

/* AMIGAKEY 1-May-91 */

#define AMKY_COUNT	3
#define AMKY_DW		45
#define AMKY_DH		15

struct ImageInfo
{
    BYTE ii_Width[3];		/*  Med, low, hi */
    BYTE ii_Height[3];		/*  Med, low, hi */

    struct Vector *ii_VList;
    BYTE ii_DesignWidth;
    BYTE ii_DesignHeight;
    BYTE ii_VCount;
    UBYTE ii_States;		/* States we want generated */
    UBYTE ii_Border;		/* Special border treatment for this guy */
    UBYTE ii_Flags;		/* Flags: see below */
};

/* ii_Flags: */

#define II_WMULTIPLY		0x0F	/* Multiplier for width (II_REFFONT) */
#define II_REFFONT		0x10	/* Allows reference font to be spec'd */
#define II_SPECIFYWIDTH		0x20	/* IA_Width accepted */
#define II_SPECIFYHEIGHT	0x40	/* IA_Height accepted */

struct ImageInfo ImageTable[] =
{
    /* NB: Depth width (24 or 18) is also coded into ezreq.c in the call
     * to reqTitleLength().
     */
    {	/* DEPTHIMAGE */
	{23+1,17+1,23+1,},	/*  +1 for the part of the groove in the drag */
	{11,11,11},
	vdepth,
	VDEPTH_DW, VDEPTH_DH,
	VDEPTH_COUNT,
	VIS_WBORDERIMG,
	VIBORD_HRIGHT,
	II_SPECIFYHEIGHT,
    },
    {	/* ZOOMIMAGE */
	{23+1,17+1,23+1,},
	{11,11,11,},
	vzoom,
	VZOOM_DW, VZOOM_DH,
	VZOOM_COUNT,
	VIS_WBORDERIMG,
	VIBORD_HRIGHT,
	II_SPECIFYHEIGHT,
    },
    {	/* SIZEIMAGE */
	{18,13,18,},
	{10,11,10,},
	vsize,
	VSIZE_DW, VSIZE_DH,
	VSIZE_COUNT,
	VIS_NORMAL | VIS_INANORMAL,
	VIBORD_BRCORN,
	0,
    },
    {	/* CLOSEIMAGE */
	{19+1,14+1,19+1,},
	{11,11,11,},
	vclose,
	VCLOSE_DW, VCLOSE_DH,
	VCLOSE_COUNT,
	VIS_WBORDERIMG,
	VIBORD_HLEFT,
	II_SPECIFYHEIGHT,
    },
    {	/* SDEPTHIMAGE */
	{23,17,23,},
	{11,11,11,},
	vsdepth,
	VSDEPTH_DW, VSDEPTH_DH,
	VSDEPTH_COUNT,
	VIS_NORMAL | VIS_SELECTED,
	VIBORD_3D,
	II_SPECIFYHEIGHT,
    },
    {	/* LEFTIMAGE */
	{16,16,23,},
	{10,11,22,},
	lfar,
	LFAR_DW, LFAR_DH,
	LFAR_COUNT,
	VIS_WBORDERIMG,
	VIBORD_HORIZ,
	0,
    },
    {	/* UPIMAGE */
	{18,13,23,},
	{11,11,22,},
	upar,
	UPAR_DW, UPAR_DH,
	UPAR_COUNT,
	VIS_WBORDERIMG,
	VIBORD_VERT,
	0,
    },
    {	/* RIGHTIMAGE */
	{16,16,23,},
	{10,11,22,},
	rtar,
	RTAR_DW, RTAR_DH,
	RTAR_COUNT,
	VIS_WBORDERIMG,
	VIBORD_HORIZ,
	0,
    },
    {	/* DOWNIMAGE */
	{18,13,23,},
	{11,11,22,},
	dnar,
	DNAR_DW, DNAR_DH,
	DNAR_COUNT,
	VIS_WBORDERIMG,
	VIBORD_VERT,
	0,
    },
    {	/* CHECKIMAGE */
	{26,26,26,},
	{11,11,11,},
	ckmk,
	CKMK_DW, CKMK_DH,
	CKMK_COUNT,
	VIS_NORMAL | VIS_SELECTED,
	VIBORD_THICK3D,
	II_SPECIFYWIDTH | II_SPECIFYHEIGHT,
    },
    {	/* MXIMAGE */
	{17,17,17,},
	{9,9,9,},
	mutx,
	MUTX_DW, MUTX_DH,
	MUTX_COUNT,
	VIS_NORMAL |VIS_SELECTED,
	NULL,
	II_SPECIFYWIDTH | II_SPECIFYHEIGHT,
    },
    {	/* MENUCHECK */
	{15,9,15,},
	{8,8,8,},
	mchk,
	MCHK_DW, MCHK_DH,
	MCHK_COUNT,
	VIS_NORMAL,
	VIBORD_INMENU,
	II_REFFONT | II_SPECIFYWIDTH | II_SPECIFYHEIGHT | 2 /* II_WMULTIPLY */,
    },
    {	/* AMIGAKEY */
	{23,15,23,},
	{8,8,8,},
	amky,
	AMKY_DW, AMKY_DH,
	AMKY_COUNT,
	VIS_NORMAL,
	VIBORD_INMENU,
	II_REFFONT | II_SPECIFYWIDTH | II_SPECIFYHEIGHT | 3 /* II_WMULTIPLY */,
    },
};

#define D(x)	;

extern UBYTE	*SysIClassName;
extern UBYTE	*VectorIClassName;
#define MYCLASSID	SysIClassName
#define SUPERCLASSID	VectorIClassName

ULONG dispatchXSysI();

Class *initXSysIClass ()
{
    ULONG	dispatchXSysI();
    Class	*makePublicClass();
    return ( makePublicClass( MYCLASSID, SUPERCLASSID, 0, dispatchXSysI) );
}

freeXSysIClass (cl)
    Class *cl;
{

    return (FreeClass (cl));
}

ULONG
dispatchXSysI( cl, o, msg )
Class	*cl;
Object	*o;
Msg	msg;
{
    struct TagItem *tags;
    ULONG size;
    ULONG which;
    struct ImageInfo *ii;
    struct VIPacket vip;

    if ( msg->MethodID == OM_NEW )
    {
	tags = ((struct opSet *) msg)->ops_AttrList;

	/* now set the size and whatever else I want	 */
	which = GetTagData(SYSIA_Which, ~0, tags);
	size = GetTagData(SYSIA_Size, SYSISIZE_MEDRES, tags);
	vip.vip_DrawInfo = (struct DrawInfo *)GetTagData(SYSIA_DrawInfo, NULL, tags);

	D( kprintf( "dXSysI: which %ld, size %ld\n", which, size ) );

	/* The SYSIA_Which space is sparse, and must be mapped into an index
	 * into ImageTable.
	 * WHICH       IMAGETABLE INDEX
	 * 0 to 3   => 0 to 3
	 * 4        => missing
	 * 5        => 4
	 * 6 to 9   => missing
	 * 10 to 17 => 5 to 12
	 */
	if ( (which > 17) || (which == 4) || ( (which > 5) && (which < 10) ) )
	{
	    D( kprintf ("dXSysI: OtherImage\n") );
	    return (NULL);
	}
	else if (which == 5)
	{
	    which--;
	}
	else if (which > 5)
	{
	    which -= 5;
	}

	ii = &ImageTable[ which ];

	/* Defaults come from the table. */
	vip.vip_Width = ii->ii_Width[ size ];
	vip.vip_Height = ii->ii_Height[ size ];

	if ( TESTFLAG( ii->ii_Flags, II_REFFONT ) )
	{
	    struct TextFont *font;
	    LONG widthmul;

	    /* Size is relative to the specified font, so derive it from that.
	     * If SYSIA_ReferenceFont is NULL or missing, then use the DrawInfo
	     * font, if available.
	     */
	    font = (struct TextFont *)GetTagData( SYSIA_ReferenceFont, NULL, tags );
	    if ( ( !font ) && ( vip.vip_DrawInfo ) )
	    {
		font = vip.vip_DrawInfo->dri_Font;
	    }

	    if ( font )
	    {
		struct RastPort tempRP;

		InitRastPort( &tempRP );
		SetFont( &tempRP, font );
		widthmul = ii->ii_Flags & II_WMULTIPLY;  /* 2 or 3 * em-space */
		/* These magic scaling values are designed to provide
		 * reasonable appearance combined with roughly compatible
		 * dimensions to V37 and earlier.
		 */
		if (size == SYSISIZE_LOWRES)
		{
		    widthmul--;
		}
		vip.vip_Width = widthmul * TextLength( &tempRP, "m", 1 ) - 1;

		vip.vip_Height = imax(8, font->tf_Baseline);
	    }
	}
	if ( TESTFLAG( ii->ii_Flags, II_SPECIFYWIDTH ) )
	{
	    /* Allowed to override width */
	    vip.vip_Width = GetTagData(IA_WIDTH, vip.vip_Width, tags);
	}
	if ( TESTFLAG( ii->ii_Flags, II_SPECIFYHEIGHT ) )
	{
	    /* Allowed to override height */
	    vip.vip_Height = GetTagData(IA_HEIGHT, vip.vip_Height, tags);
	}

	D( kprintf ( "dXSysI: VList 0x%lx\n", ii->ii_VList) );

	/* let superclass do its creation routine */

	vip.vip_VList = ii->ii_VList;
	vip.vip_DesignWidth = ii->ii_DesignWidth;
	vip.vip_DesignHeight = ii->ii_DesignHeight;
	vip.vip_States = ii->ii_States;
	vip.vip_VCount = ii->ii_VCount;
	vip.vip_Border = ii->ii_Border;

	return ( SendSuperNewTags(cl, o,
		VIA_Packet, &vip,
		/*  zoom & depth have to be shifted by 1 pixel
		  for the groove in the drag bar */
		IA_LEFT, ( which < 2 )? -1 : 0,
		TAG_DONE) );
    }
    else
    {
	/* use superclass defaults */
	return ((ULONG) DSM (cl, o, msg));
    }
}


/* Calls SendSuperMessage() for OM_NEW, with the supplied tag-items
 * as substitutes for the original tag-item list.
 */

SendSuperNewTags( cl, o, tag1 )
Class		*cl;
Object		*o;
Tag		tag1;

{
    return( SendSuperMessage(cl, o, OM_NEW, &tag1, NULL) );
}
@


38.8
log
@Removed unused extern.  Made checkbox and mx button scalable.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.7 92/02/05 15:41:38 peter Exp Locker: peter $
a52 17
/**** jimm has problems with included .c files.
 **** thus, we copy in vectorsysi.c right 'chere
 ****/

/* Some defines to make things shorter */

#define VIF_BOTH	(VIF_MONO | VIF_COLOR)

#define	VIS_NSI (VIS_NORMAL | VIS_SELECTED | VIS_INANORMAL)
#define VIS_NS  (VIS_NORMAL | VIS_SELECTED)
#define	VIS_NI  (VIS_NORMAL | VIS_INANORMAL)
#define	VIS_SI  (VIS_SELECTED | VIS_INANORMAL)
#define	VIS_S   (VIS_SELECTED)
#define	VIS_N   (VIS_NORMAL)
#define	VIS_I   (VIS_INANORMAL)


a148 1

@


38.7
log
@Now uses font's em-space instead of tf_XSize for Amiga-key and check widths.
Re-ordered ImageInfo structure for space.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.6 91/12/12 20:45:34 peter Exp Locker: peter $
a34 1
extern struct IntuitionBase *IntuitionBase;
d292 1
a292 1
	0,
d302 1
a302 1
	0,
@


38.6
log
@New arrow imagery.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.5 91/11/11 13:42:43 peter Exp Locker: peter $
d173 2
a180 1
    struct Vector *ii_VList;
d198 1
a203 1
	vdepth,
d208 1
a213 1
	vzoom,
d218 1
a223 1
	vsize,
d228 1
a233 1
	vclose,
d238 1
a243 1
	vsdepth,
d248 1
a253 1
	lfar,
d258 1
a263 1
	upar,
d268 1
a273 1
	rtar,
d278 1
a283 1
	dnar,
d288 1
a293 1
	ckmk,
d298 1
a303 1
	mutx,
d308 1
a313 1
	mchk,
d318 1
a323 1
	amky,
d405 1
a405 1
	    BYTE widthmul;
d419 5
a423 1
		widthmul = ii->ii_Flags & II_WMULTIPLY;  /* 2 or 3*tf_XSize */
d432 1
a432 1
		vip.vip_Width = widthmul * font->tf_XSize - 1;
@


38.5
log
@Now passes stuff through the VIPacket structure, to reduce tag operations
and save space.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.4 91/10/17 14:27:31 peter Exp Locker: peter $
d117 1
a117 1
#define UPAR_COUNT	8
d125 1
a125 1
#define DNAR_COUNT	8
d131 1
a131 1
#define LFAR_COUNT	8
d139 1
a139 1
#define RTAR_COUNT	8
@


38.4
log
@Moved all vector class data into assembler.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.3 91/07/15 15:30:50 peter Exp $
d350 1
a350 1
dispatchXSysI( cl,  o, msg )
d355 1
a355 1
    struct TagItem * tags;
a357 1
    LONG width, height;
d359 1
a359 1
    struct DrawInfo *dri;
d361 1
a361 1
    if (msg->MethodID == OM_NEW)
d368 1
a368 1
	dri = (struct DrawInfo *)GetTagData(SYSIA_DrawInfo, NULL, tags);
d395 1
a395 1
	ii = &ImageTable[which];
d398 2
a399 2
	width = ii->ii_Width[ size ];
	height = ii->ii_Height[ size ];
d411 1
a411 1
	    if ( ( !font ) && ( dri ) )
d413 1
a413 1
		font = dri->dri_Font;
d427 1
a427 1
		width = widthmul * font->tf_XSize - 1;
d429 1
a429 1
		height = imax(8, font->tf_Baseline);
d435 1
a435 1
	    width = GetTagData(IA_WIDTH, width, tags);
d440 1
a440 1
	    height = GetTagData(IA_HEIGHT , height, tags);
d445 1
a445 1
	/* let superclass do it's creation routine */
d447 7
d455 1
a455 10
		VIA_Width, width,
		VIA_Height, height,
		VIA_VList, ii->ii_VList,
		VIA_VCount, ii->ii_VCount,
		VIA_States, ii->ii_States,
		VIA_Border, ii->ii_Border,
		VIA_DesignWidth, ii->ii_DesignWidth,
		VIA_DesignHeight, ii->ii_DesignHeight,
		VIA_DrawInfo, dri,

d458 1
a458 5
		IA_LEFT, (which < 2)? -1 : 0,
#if 0
		/* ZZZ: Don't need this yet, but may be a good idea */
		TAG_MORE, tags,
#endif
a459 1

@


38.3
log
@Removed unneeded definition.  Renumbered some vectors.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 1.1 91/07/15 14:59:40 peter Exp $
d71 15
a86 4
BYTE dv3[] = { 1 , 9,4, 19,8};
BYTE dv2[] = { 7 , 5,2, 15,2, 15,4, 9,4, 9,6, 5,6, 5,2};
BYTE dv1[] = { 1 , 5,2, 15,6};

a89 15
struct Vector vdepth[] =
{
    {VIF_FILLRECT | VIF_COLOR | VIF_BACKG , VIS_NS , dv1 },
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NSI, dv2 },
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_NS , dv3 },
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, dv3 },

    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_S  , dv1 },
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , dv2 },
    {VIF_FILLRECT | VIF_MONO  | VIF_BACKG , VIS_N  , dv3 },
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_SI , dv2 },

    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_SI , dv3 },
};

a91 4
BYTE sdv4[] = { 1 , 0,0, 22,10};
BYTE sdv3[] = { 1 , 8,4, 18,8};
BYTE sdv2[] = { 7 , 4,2, 14,2, 14,4, 8,4, 8,6, 4,6, 4,2};
BYTE sdv1[] = { 1 , 4,2, 14,6};
a96 14
struct Vector vsdepth[] =
{
    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_S  , sdv4},
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NSI, sdv2},
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_NS , sdv3},

    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, sdv3},
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_S  , sdv1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_N  , sdv2},
    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_N  , sdv3},

    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_SI , sdv2},
    {VIF_FILLRECT | VIF_MONO  | VIF_BACKG , VIS_SI , sdv3},
};
a97 1

a98 2
BYTE zv2[] = { 3 , 6,2, 18,8,  6,2, 12,5,  7,2, 11,5};
BYTE zv1[] = { 1 , 7,2, 11,5};
a102 11
struct Vector vzoom[] =
{
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_N  , zv1 },
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_S  , zv2 },
    {VIF_FILLRECT | VIF_BOTH  | VIF_HIFILL, VIS_S  , zv1 },
    {VIF_LINERECT | VIF_MONO  | VIF_BACKG , VIS_N  , zv2 },

    {VIF_LINERECT | VIF_MONO  | VIF_SHADOW, VIS_SI , zv2 },
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, zv2 },
};

a104 2
BYTE cv1[] = { 1 , 7,3, 11,7};

a107 10
struct Vector vclose[] =
{
    {VIF_FILLRECT | VIF_BOTH  | VIF_SHINE , VIS_N  , cv1 },
    {VIF_FILLRECT | VIF_BOTH  | VIF_BACKG , VIS_S  , cv1 },
    {VIF_LINERECT | VIF_MONO  | VIF_BACKG , VIS_N  , cv1 },
    {VIF_LINERECT | VIF_MONO  | VIF_SHADOW, VIS_SI , cv1 },

    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, cv1 },
};

a109 1
BYTE szv1[] = { 6 , 4,7, 14,7, 14,2, 13,2, 4,6, 4,7}; /* glyph */
a113 7
struct Vector vsize[] =
{
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_NS , szv1},
    {VIF_FILLPOLY | VIF_COLOR | VIF_SHINE , VIS_NS , szv1},
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NS , szv1},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_I  , szv1},
};
a114 1

a115 4
BYTE uav1[] = { 2 , 4,6, 9,4}; /* left line */
BYTE uav2[] = { 2 , 8,4, 13,6}; /* right line */
BYTE uav3[] = { 5 , 4,6, 9,4, 9,3, 4,5, 4,6};
BYTE uav4[] = { 5 , 13,6, 13,5, 8,3, 8,4, 13,6};
a119 14
struct Vector upar[] =
{
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , uav1},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , uav2},
    /*  OVERWRITES THE PREVIOUS BLACK ONE */
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , uav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , uav2},

    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , uav3},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , uav4},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , uav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , uav2},
};

a123 4
BYTE dav1[] = { 2 , 4,4, 9,6}; /* left line */
BYTE dav2[] = { 2 , 8,6, 13,4}; /* right line */
BYTE dav3[] = { 5 , 4,4, 9,6, 9,7, 4,5, 4,4};
BYTE dav4[] = { 5 , 13,4, 13,5, 8,7, 8,6, 13,4};
a127 14
struct Vector dnar[] =
{
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , dav1},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , dav2},
    /*  OVERWRITES THE PREVIOUS BLACK ONE */
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , dav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , dav2},

    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , dav3},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , dav4},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , dav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , dav2},
};

a129 4
BYTE lav1[] = { 2 , 10,6, 5,4}; /* left line */
BYTE lav2[] = { 2 , 10,2, 5,4}; /* right line */
BYTE lav3[] = { 5 , 10,6, 8,6, 4,4, 6,4, 10,6};
BYTE lav4[] = { 5 , 10,2, 8,2, 4,4, 6,4, 10,2};
a133 13
struct Vector lfar[] =
{
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , lav1},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , lav2},
    /*  OVERWRITES THE PREVIOUS BLACK ONE */
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , lav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , lav2},

    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , lav3},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , lav4},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , lav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , lav2},
};
a134 1

a137 4
BYTE rav1[] = { 2 , 5,6, 10,4}; /* left line */
BYTE rav2[] = { 2 , 5,2, 10,4}; /* right line */
BYTE rav3[] = { 5 , 5,6, 7,6, 11,4, 9,4, 5,6};
BYTE rav4[] = { 5 , 5,2, 7,2, 11,4, 9,4, 5,2};
a142 12
struct Vector rtar[] =
{
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , rav1},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , rav2},
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , rav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , rav2},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , rav3},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , rav4},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , rav1},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , rav2},
};

a144 1
BYTE ckv1[] = { 9 , 19,2, 17,2, 12,7, 11,7, 9,5, 7,5, 10,8, 12,8, 18,2};
a148 4
struct Vector ckmk[] =
{
    {VIF_FILLPOLY | VIF_BOTH  | VIF_TEXT  , VIS_S  , ckv1},
};
a150 3
BYTE mxv1[] = {10, 13,0, 2,0, 0,2, 0,6, 2,8, 2,7, 1,6, 1,2, 3,0, 13,0}; /* upperleft */
BYTE mxv2[] = {10, 3,8, 14,8, 16,6, 16,2, 14,0, 14,1, 15,2, 15,6, 13,8, 3,8}; /* loright */
BYTE mxv3[] = {9,  5,2, 11,2, 12,3, 12,5, 11,6, 5,6, 4,5, 4,3, 5,2}; /* dot */
a154 6
struct Vector mutx[] =
{
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHINE , VIS_N  , mxv1},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , mxv1},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_N  , mxv2},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHINE , VIS_S  , mxv2},
a155 3
    {VIF_FILLPOLY | VIF_BOTH  | VIF_HIFILL, VIS_S  , mxv3},
};

a157 2
BYTE mcv1[] = { 10 , 14,0, 12,0, 6,6, 5,6, 3,4, 0,4, 1,4, 4,7, 6,7, 13,0};

a160 4
struct Vector mchk[] =
{
    {VIF_FILLPOLY | VIF_BOTH  | VIF_BDETAIL, VIS_NSI, mcv1},
};
a163 5
BYTE amv1[] = { 9 , 6,0, 38,0, 44,2, 44,12, 38,14, 6,14, 0,12, 0,2, 6,0};
BYTE amv2[] = {17 , 16,12, 16,11, 12,11, 28,3, 30,3, 30,11, 28,11, 28,12,
		   38,12, 38,11, 34,11, 34,2, 27,2, 9,11, 6,11, 6,12, 16,12};
BYTE amv3[] = { 1 , 14,9, 30,10 };

a166 7

struct Vector amky[] =
{
    {VIF_FILLPOLY | VIF_BOTH  | VIF_BDETAIL, VIS_NSI, amv1},
    {VIF_FILLPOLY | VIF_BOTH  | VIF_BBLOCK , VIS_NSI, amv2},
    {VIF_FILLRECT | VIF_BOTH  | VIF_BBLOCK , VIS_NSI, amv3},
};
@


38.2
log
@Removed some obsolete code.  Took some optimizations.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 38.1 91/06/12 15:14:23 peter Exp $
a49 4
#ifndef SYSIA_ReferenceFont
#define SYSIA_ReferenceFont	(IA_Dummy + 0x19)
#endif

d72 3
a74 3
BYTE dv4[] = { 1 , 9,4, 19,8};
BYTE dv3[] = { 7 , 5,2, 15,2, 15,4, 9,4, 9,6, 5,6, 5,2};
BYTE dv2[] = { 1 , 5,2, 15,6};
d81 4
a84 4
    {VIF_FILLRECT | VIF_COLOR | VIF_BACKG , VIS_NS , dv2 },
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NSI, dv3 },
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_NS , dv4 },
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, dv4 },
d86 4
a89 4
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_S  , dv2 },
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , dv3 },
    {VIF_FILLRECT | VIF_MONO  | VIF_BACKG , VIS_N  , dv4 },
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_SI , dv3 },
d91 1
a91 1
    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_SI , dv4 },
d96 4
a99 4
BYTE sdv5[] = { 1 , 0,0, 22,10};
BYTE sdv4[] = { 1 , 8,4, 18,8};
BYTE sdv3[] = { 7 , 4,2, 14,2, 14,4, 8,4, 8,6, 4,6, 4,2};
BYTE sdv2[] = { 1 , 4,2, 14,6};
d107 3
a109 3
    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_S  , sdv5},
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NSI, sdv3},
    {VIF_FILLRECT | VIF_COLOR | VIF_SHINE , VIS_NS , sdv4},
d111 7
a117 7
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_NSI, sdv4},
    {VIF_LINERECT | VIF_COLOR | VIF_SHADOW, VIS_S  , sdv2},
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_N  , sdv3},
    {VIF_FILLRECT | VIF_MONO  | VIF_SHADOW, VIS_N  , sdv4},

    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_SI , sdv3},
    {VIF_FILLRECT | VIF_MONO  | VIF_BACKG , VIS_SI , sdv4},
d158 1
a158 1
BYTE szv2[] = { 6 , 4,7, 14,7, 14,2, 13,2, 4,6, 4,7}; /* glyph */
d165 4
a168 4
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_NS , szv2},
    {VIF_FILLPOLY | VIF_COLOR | VIF_SHINE , VIS_NS , szv2},
    {VIF_LINEPOLY | VIF_COLOR | VIF_SHADOW, VIS_NS , szv2},
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_I  , szv2},
d173 4
a176 4
BYTE uav2[] = { 2 , 4,6, 9,4}; /* left line */
BYTE uav3[] = { 2 , 8,4, 13,6}; /* right line */
BYTE uav4[] = { 5 , 4,6, 9,4, 9,3, 4,5, 4,6};
BYTE uav5[] = { 5 , 13,6, 13,5, 8,3, 8,4, 13,6};
d183 1
a184 1
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , uav3},
d186 1
a187 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , uav3},
d189 1
d191 1
a191 1
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , uav5},
a192 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , uav3},
d199 4
a202 4
BYTE dav2[] = { 2 , 4,4, 9,6}; /* left line */
BYTE dav3[] = { 2 , 8,6, 13,4}; /* right line */
BYTE dav4[] = { 5 , 4,4, 9,6, 9,7, 4,5, 4,4};
BYTE dav5[] = { 5 , 13,4, 13,5, 8,7, 8,6, 13,4};
d209 1
a210 1
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , dav3},
d212 1
a213 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , dav3},
d215 1
d217 1
a217 1
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , dav5},
a218 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , dav3},
d223 4
a226 4
BYTE lav2[] = { 2 , 10,6, 5,4}; /* left line */
BYTE lav3[] = { 2 , 10,2, 5,4}; /* right line */
BYTE lav4[] = { 5 , 10,6, 8,6, 4,4, 6,4, 10,6};
BYTE lav5[] = { 5 , 10,2, 8,2, 4,4, 6,4, 10,2};
d233 1
a234 1
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , lav3},
d236 1
a237 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , lav3},
d239 1
d241 1
a241 1
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , lav5},
a242 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , lav3},
d249 4
a252 4
BYTE rav2[] = { 2 , 5,6, 10,4}; /* left line */
BYTE rav3[] = { 2 , 5,2, 10,4}; /* right line */
BYTE rav4[] = { 5 , 5,6, 7,6, 11,4, 9,4, 5,6};
BYTE rav5[] = { 5 , 5,2, 7,2, 11,4, 9,4, 5,2};
d260 1
d262 1
a262 1
    {VIF_LINEPOLY | VIF_BOTH  | VIF_SHADOW, VIS_NI , rav3},
d264 1
a264 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_BACKG , VIS_N  , rav3},
d266 1
a266 1
    {VIF_FILLPOLY | VIF_BOTH  | VIF_SHADOW, VIS_S  , rav5},
a267 1
    {VIF_LINEPOLY | VIF_MONO  | VIF_SHADOW, VIS_I  , rav3},
@


38.1
log
@Added MENUCHECK and AMIGAKEY images.  Added flags field to ImageInfo
structure to handle reference-fonts.  Now uses SYSIA_ReferenceFont if
needed.
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 1.11 91/03/08 20:17:49 peter Exp Locker: peter $
a317 13
#if 0
BYTE amv1[] = { 9 , 3,0, 19,0, 22,1, 22,6, 19,7, 3,7, 0,6, 0,1, 3,0};
BYTE amv2[] = {11 , 3,6, 8,6, 8,5, 14,5, 14,6, 19,6, 17,6, 17,1, 14,1, 4,6, 3,6};
BYTE amv3[] = { 4 , 11,4, 14,4, 14,3, 11,4 };
#endif

#if 00
BYTE amv1[] = { 9 , 3,0, 19,0, 22,1, 22,6, 19,7, 3,7, 0,6, 0,1, 3,0};
BYTE amv2[] = {13 , 3,6, 8,6, 6,6, 14,2, 15,2, 15,6, 14,6, 19,6, 17,6, 17,1,
		   14,1, 4,6, 3,6};
BYTE amv3[] = { 4 , 11,4, 14,4, 14,3, 11,4 };
#endif

a354 22
UBYTE WhichMap[] =
	{
	0,	/* DEPTHIMAGE	(0) */
	1,	/* ZOOMIMAGE	(1) */
	2,	/* SIZEIMAGE	(2) */
	3,	/* CLOSEIMAGE	(3) */
	-1,	/* 		    */
	4,	/* SDEPTHIMAGE	(5) */
	-1,	/* 		    */
	-1,	/* 		    */
	-1,	/* 		    */
	-1,	/* 		    */
	5,	/* LEFTIMAGE	(10) */
	6,	/* UPIMAGE	(11) */
	7,	/* RIGHTIMAGE	(12) */
	8,	/* DOWNIMAGE	(13) */
	9,	/* CHECKIMAGE	(14) */
	10,	/* MXIMAGE	(15) */
	11,	/* MENUCHECK	(16) */
	12,	/* AMIGAKEY	(17) */
	};

d539 19
a557 1
	if ( ( which <= AMIGAKEY) && ( ( which = WhichMap[which] ) != -1 ) )
d559 8
a566 1
	    ii = &ImageTable[which];
d568 4
a571 3
	    /* Defaults come from the table. */
	    width = ii->ii_Width[ size ];
	    height = ii->ii_Height[ size ];
d573 6
a578 1
	    if ( TESTFLAG( ii->ii_Flags, II_REFFONT ) )
d580 2
a581 2
		struct TextFont *font;
		BYTE widthmul;
d583 6
a588 3
		/* Size is relative to the specified font, so derive it from that.
		 * If SYSIA_ReferenceFont is NULL or missing, then use the DrawInfo
		 * font, if available.
d590 1
a590 2
		font = (struct TextFont *)GetTagData( SYSIA_ReferenceFont, NULL, tags );
		if ( ( !font ) && ( dri ) )
d592 1
a592 1
		    font = dri->dri_Font;
d594 1
a594 13

		if ( font )
		{
		    widthmul = ii->ii_Flags & II_WMULTIPLY;  /* 2 or 3*tf_XSize */
		    /* These magic scaling values are designed to provide
		     * reasonable appearance combined with roughly compatible
		     * dimensions to V37 and earlier.
		     */
		    if (size == SYSISIZE_LOWRES)
		    {
			widthmul--;
		    }
		    width = widthmul * font->tf_XSize - 1;
d596 1
a596 2
		    height = imax(8, font->tf_Baseline);
		}
d598 5
a602 10
	    if ( TESTFLAG( ii->ii_Flags, II_SPECIFYWIDTH ) )
	    {
		/* Allowed to override width */
		width = GetTagData(IA_WIDTH, width, tags);
	    }
	    if ( TESTFLAG( ii->ii_Flags, II_SPECIFYHEIGHT ) )
	    {
		/* Allowed to override height */
		height = GetTagData(IA_HEIGHT , height, tags);
	    }
d604 1
a604 1
	else
d606 2
a607 2
	    D( kprintf ("dXSysI: OtherImage\n") );
	    return (NULL);
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d2 1
a2 1
 *	$Id: xsysiclass.c,v 1.11 91/03/08 20:17:49 peter Exp $
d50 4
d304 44
d357 1
d361 7
d386 2
d397 1
a397 1
	{-1,-1,-1},
d402 1
d407 1
a407 1
	{-1,-1,-1,},
d412 1
d422 1
d427 1
a427 1
	{-1,-1,-1,},
d432 1
d437 1
a437 1
	{-1,-1,-1,},
d442 1
d452 1
d462 1
d472 1
d482 1
d492 1
d502 1
d505 20
d559 1
a559 1
    LONG height;
d561 1
d568 3
a570 2
	which = GetTagData (SYSIA_Which, ~0, tags);
	size = GetTagData (SYSIA_Size, SYSISIZE_MEDRES, tags);
d574 1
a574 1
	if ( ( which <= MXIMAGE) && ( ( which = WhichMap[which] ) != -1 ) )
d577 42
a618 1
	    if ( (height = ii->ii_Height[size]) == -1 )
d620 2
a621 3
		/*  ZZZ: 11 is a stupid number - we really should DEMAND
		    a number and fail without. */
		height = GetTagData (IA_HEIGHT, 11, tags);
d635 1
a635 1
		VIA_Width, ii->ii_Width[size],
d643 1
a643 1
		VIA_DrawInfo, GetTagData (SYSIA_DrawInfo, NULL, tags),
@
