head     38.5;
branch   ;
access   ;
symbols  V40_85:38.5 V40_71:38.5 V40_68:38.5 V40_65:38.5 V40_47:38.5 V40_45:38.5 V40_37:38.5 V40_34:38.5 V40_29:38.5 V39_2415:38.5 V39_2369:38.5 V39_2339:38.5 V39_2332:38.5 V39_2275:38.5 V39_2256:38.5 V39_2210:38.4 V39_2192:38.4 V39_2084:38.4 V39_2082:38.4 V39_2076:38.4 V39_2073:38.4 V39_2058:38.4 V39_2051:38.4 V39_2031:38.4 V39_2017:38.4 V39_2012:38.4 V39_1985:38.4 V39_1933:38.4 V39_1819:38.4 V39_1805:38.4 V39_1783:38.4 V39_1695:38.4 V39_1621:38.4 V39_1620:38.4 V39_1508:38.4 V39_1485:38.4 V39_1461:38.4 V39_1458:38.4 V39_1456:38.4 V39_1405:38.4 V39_1368:38.4 V39_1360:38.4 V39_1324:38.4 V39_1147:38.4 V39_1143:38.4 V39_1141:38.4 V39_1120:38.4 V39_1116:38.4 V39_1104:38.4 V39_1100:38.4 V39_1078:38.4 V39_1073:38.4 V39_757:38.3 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.5
date     92.11.25.15.39.37;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.09.16.19.00;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.26.16.26.45;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.11.13.37.36;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.15.18.51.55;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.17.30;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.5
log
@IM_FRAMEBOX now correct for frame-types other than FRAME_DEFAULT.
The frame geometry is now more data-driven.  Minor optimizations.
@
text
@/*** frameiclass.c *******************************************************
 *
 *  frameiclass.c -- embossed frame image class.
 *
 *  $Id: frameiclass.c,v 38.4 92/04/09 16:19:00 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1990, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"
#include "classusr.h"
#include "classes.h"
#include "imageclass.h"
#include "newlook.h"

#include <graphics/gfxmacros.h>
#include <utility/pack.h>

#define GETATTRS	FALSE	/* don't spend the space	*/

#define D(x)	;
#define DI(x)	;

struct localObjectData
{
    UWORD		lod_Flags;
    UWORD		lod_FrameType;

#define LODF_RECESSED	(0x0001)
#define LODF_NOFILL	(0x0002)
};

#define INSTANCESIZE	(sizeof (struct localObjectData))

#define STROKEWIDTH	(1)	/* Regular thickness of vertical lines */
#define FAT_STROKEWIDTH	(2)	/* Thickness of non-FRAME_DEFAULT vertical lines */
#define STROKEHEIGHT	(1)	/* Regular thickness of horizontal lines */

#define IM(o)	((struct Image *)(o))	/* transparent base class */

extern UBYTE	*FrameIClassName;
extern UBYTE	*ImageClassName;
#define MYCLASSID	FrameIClassName
#define SUPERCLASSID	ImageClassName


Class	*
initFrameIClass()
{
    ULONG	dispatchFrameI();
    Class	*makePublicClass();

    DI( printf("init FrameIClass\n"));
    return (  makePublicClass( MYCLASSID, SUPERCLASSID, 
		    INSTANCESIZE, dispatchFrameI));
}

ULONG frameiPackTable[] =
{
    PACK_STARTTABLE( IA_Dummy ),
    PACK_WORDBIT( IA_Dummy, IA_Recessed, localObjectData, lod_Flags, PKCTRL_BIT, LODF_RECESSED ),
    PACK_WORDBIT( IA_Dummy, IA_EdgesOnly, localObjectData, lod_Flags, PKCTRL_BIT, LODF_NOFILL ),
    PACK_ENTRY( IA_Dummy, IA_FrameType, localObjectData, lod_FrameType, PKCTRL_UWORD ),
    PACK_ENDTABLE,    
};

/* Data values for IA_FrameType (recognized by FrameIClass, defined
 * in imageclass.h):
 *
 * FRAME_DEFAULT:  The standard V37-type frame, which has
 *	thin edges.
 * FRAME_BUTTON:  Standard button gadget frames, having thicker
 *	sides and nicely edged corners.
 * FRAME_RIDGE:  A ridge such as used by standard string gadgets.
 *	You can recess the ridge to get a groove image.
 * FRAME_ICONDROPBOX: A broad ridge which is the standard imagery
 *	for areas in AppWindows where icons may be dropped.
 *
 * Now we have some "properties" tables for each kind of frame-type.
 *
 * StrokeWidth[] is the width of vertical strokes used to draw the
 *	frame, as a function of lod_FrameType.  (Some frames have
 *	multiple strokes, which we count up later).
 *
 * STROKEHEIGHT is the height of the horizontal strokes used to draw
 *	the frame.  It's constant, so we skip having the array.
 *
 * InsetBox[], if non-zero, is the number of stroke-thicknesses
 *	to inset the inner box by, allowing composite frames like
 *	FRAME_RIDGE and FRAME_ICONDROPBOX.
 *
 * WidthPad[] is the amount of padding we need to add to the contents
 *	width to get a comfortable frame fitting around those contents.
 *	This is actually a _derived_ property, but it takes less ROM to
 *	store it precalculated, and we're worried about that right now.
 *	WidthPad[ frametype ] is defined as:
 *	    ( ( InsetBox[ frametype ] + 2 ) * StrokeWidth[ frametype ] ) << 1
 *	The "+2" adds twice the frame thickness, once to get inside the
 *	inner frame, and once to leave a little trim around the contents.
 *	The net result is doubled for (left+right).
 *
 * HeightPad[] is the amount of padding we need to add to the contents
 *	height to get a comfortable frame fitting around those contents.
 *	This is also a derived property, defined as:
 *	    ( ( InsetBox[ frametype ] + 2 ) * STROKEHEIGHT ) << 1;
 */

UBYTE StrokeWidth[] =
{
    STROKEWIDTH, FAT_STROKEWIDTH, FAT_STROKEWIDTH, FAT_STROKEWIDTH,
};

UBYTE InsetBox[] =
{
    0, 0, 1, 2,
};

UBYTE WidthPad[] =
{
    4, 8, 12, 16,
};

UBYTE HeightPad[] =
{
    4, 4, 6, 8,
};



/* Since setFrameIAttrs() is nothing more than a call to PackStructureTags(),
 * it's smaller to take it in-line.  It's clearer to leave it as a macro.
 */
#define setFrameIAttrs( cl, o, msg ) \
	PackStructureTags( INST_DATA( cl, o ), frameiPackTable, \
	((struct opSet *)msg)->ops_AttrList )

ULONG 
dispatchFrameI( cl, o, msg )
Class   *cl;
Object  *o;
Msg     msg;
{
    Object  		*newobj;
    struct localObjectData 	*lod;

    switch ( msg->MethodID )
    {
    case OM_NEW:
	/* let superclass do it's creation routine first	*/
	if ( newobj = (Object *) SSM( cl, o, msg ) )
	{
	    /* init my instance data	*/
	    setFrameIAttrs( cl, newobj, msg );
	}

	return ( (ULONG) newobj );

#if GETATTRS
    case OM_GET:
	return ( (ULONG) getFrameIAttrs( cl, o, msg  ) );
#endif

    case OM_SET:
	SSM( cl, o, msg );		/* let the superclass see the atts */
	setFrameIAttrs( cl, o, msg  );	/* set the ones I care about	   */
	return ( (ULONG) 1 );		/* i'm happy			   */

    case IM_DRAW:			/* draw with state */
    case IM_DRAWFRAME:			/* special case of draw	*/
	return ( (ULONG) drawFrameI( cl, o, msg ) );

    case IM_FRAMEBOX:
	frameBox( cl, o, msg );
    	return ( 1 );			/* let him know I support this	*/

    default:
	return ( (ULONG) SSM( cl, o, msg ) );
    }
}

/*
 * return surrounding box, with a little bit of space.
 * If caller wants more space, he can pass me a larger
 * box
 */
frameBox( cl, o, msg )
Class		*cl;
Object		*o;
struct impFrameBox	*msg;	/* superset of impDraw	*/
{
    struct IBox	*fbox = msg->imp_FrameBox;
    struct localObjectData *lod = INST_DATA( cl, o );

    D( printf("frameBox height %lx\n", msg->imp_FrameBox->Height ) );

    if ( !TESTFLAG( msg->imp_FrameFlags, FRAMEF_SPECIFY ) )
    {
	/* Caller wants us to size and position our box to
	 * fit comfortably around the contents.  InsetBox[] is
	 * the offset of the inner frame, if any.  To that, we
	 * add two (one to get inside the inner frame and one 
	 * to add a frame's thickness of gap).  That's multiplied
	 * by the stroke width or height, and then doubled (for
	 * left+right or top+bottom).
	 */
	WORD frametype = lod->lod_FrameType;

	/* Let's size ourselves accordingly */
	*fbox = *msg->imp_ContentsBox;
	fbox->Width += WidthPad[ frametype ];
	fbox->Height += HeightPad[ frametype ];

	/* We can center ourselves by falling through to the FRAMEF_SPECIFY
	 * code...
	 */
    }
    /* Caller dictates frame size but wants us to center ourselves
     * within that box.
     */
    fbox->Left =  msg->imp_ContentsBox->Left -
	( fbox->Width - msg->imp_ContentsBox->Width )/2;
    fbox->Top =  msg->imp_ContentsBox->Top - 
	( fbox->Height - msg->imp_ContentsBox->Height )/2;

    D( printf("frame cont. height %ld query height %ld\n",
	msg->imp_ContentsBox->Height, fbox->Height ) );
}

drawFrameI( cl, o, msg )
Class		*cl;
Object		*o;
struct impDraw	*msg;	/* superset of impDraw	*/
{
    struct localObjectData 	*lod = INST_DATA( cl, o );

    struct IBox		box;

    UWORD		*pens;		/* pen spec array */
    ULONG		ulpen;		/* upper left	*/
    ULONG		lrpen;		/* lower right	*/
    ULONG		fillpen;	/* filled area	*/
    int			swappens;
    WORD		frametype = lod->lod_FrameType;

    swappens = TESTFLAG( lod->lod_Flags, LODF_RECESSED );

    /* let's be sure that we were passed a DrawInfo	*/
    pens =  ( msg->imp_DrInfo )?  msg->imp_DrInfo->dri_Pens: NULL;

    box = *IM_BOX( IM(o) );		/* get Image.Left/Top/Width/Height */
    box.Left += msg->imp_Offset.X;
    box.Top += msg->imp_Offset.Y;

    if ( msg->MethodID == IM_DRAWFRAME )
    {
	box.Width = msg->imp_Dimensions.Width;
	box.Height = msg->imp_Dimensions.Height;
    }

    /* Default pens to use if DrawInfo pens are absent */
    ulpen = 2;	/* shine */
    lrpen = 1;	/* shadow */
    fillpen = 0;	/* background */

    if ( pens )
    {
	/* Override with more sane pens */
	ulpen = pens[ SHINEPEN ];
	lrpen = pens[ SHADOWPEN ];
	fillpen = pens[ BACKGROUNDPEN ];
    }

    switch ( msg->imp_State )
    {
    case IDS_SELECTED:
    case IDS_INACTIVESELECTED:
	/* Swap shadow and shine, below */
	swappens ^= LODF_RECESSED;
	fillpen = 3;
	if (pens)
	{
	    fillpen = pens[ FILLPEN ];
	}
	break;

#if 0
    case IDS_NORMAL:	/* doesn't use activefill in borders now */
    case IDS_DISABLED:	/* I don't have a ghosted version yet	 */
    case IDS_INACTIVENORMAL:	/* doesn't use activefill in borders now */
    default:
	/* Pens already set up for default */
	break;
#endif
    }

    if ( swappens )
    {
	ULONG tmppen;

	/* swap pens	*/
	tmppen = ulpen;
	ulpen = lrpen;
	lrpen = tmppen;
    }

    /* Now actually draw the thing: */
    {
	LONG joins;
	int width = StrokeWidth[ frametype ];
	int multiplier;

	/* The default frame has a joins-type of JOINS_NONE, but
	 * FRAME_BUTTON, FRAME_RIDGE, and FRAME_ICONDROPBOX all use
	 * angled joins.
	 * NB: For space-saving reasons, embossedBoxTrim() infers
	 * hthick = 2 if joins == JOINS_ANGLED.
	 */
	joins = JOINS_NONE;
	if ( frametype )
	{
	    joins = JOINS_ANGLED;
	}

	embossedBoxTrim( msg->imp_RPort, &box,
	    ulpen, lrpen, joins );

	if ( multiplier = InsetBox[ frametype ] )
	{
	    /* FRAME_RIDGE, and FRAME_ICONDROPBOX
	     * have a second ridge inside the first, whose
	     * colors are swapped.
	     */
	    ULONG tmppen;

	    /* swap pens	*/
	    tmppen = ulpen;
	    ulpen = lrpen;
	    lrpen = tmppen;

	    {
		int dx = width * multiplier;
		int dy = STROKEHEIGHT * multiplier;

		box.Left += dx;
		box.Width -= 2*dx;
		box.Top += dy;
		box.Height -= 2*dy;
	    }

	    embossedBoxTrim( msg->imp_RPort, &box,
		ulpen, lrpen, joins );
	}

	/* interior */
	if ( ! TESTFLAG( lod->lod_Flags, LODF_NOFILL ) )
	{
	    interiorBox( msg->imp_RPort, &box,
		width,		/* inset in x dim */
		STROKEHEIGHT,	/* inset in y dim */
		fillpen );
	}
    }
}

/* fill region centered in a box */
interiorBox( rp, b, xw, yw, pen )
struct RastPort	*rp;
struct IBox	*b;
{
    BNDRYOFF( rp );
    drawBlock( rp,
	b->Left + xw,
	b->Top + yw,
	b->Left + b->Width - 1 - xw,
	b->Top + b->Height - 1 - yw,
	pen );
}
@


38.4
log
@Uses PackStructureTags().
@
text
@d5 1
a5 1
 *  $Id: frameiclass.c,v 38.3 92/03/26 16:26:45 peter Exp Locker: peter $
d27 2
a28 1
struct localObjectData {
d37 4
a40 3
#define HWIDTH	(1)
#define FAT_HWIDTH (2)
#define LWIDTH	(1)
d70 63
d194 2
a195 2
	UWORD		surround_room;
	struct IBox	*fbox;
d197 1
a197 4
	struct localObjectData *lod;
	lod = INST_DATA( cl, o );

	fbox = msg->imp_FrameBox;
d199 11
a209 1
	D( printf("frameBox height %lx\n", msg->imp_FrameBox->Height ) );
d211 4
a214 6
	if ( ! ( msg->imp_FrameFlags & FRAMEF_SPECIFY ) )
	{
	    *fbox = *msg->imp_ContentsBox;
	    surround_room = (LWIDTH << 1);
	    fbox->Width += (surround_room << 1);
	    fbox->Height += (surround_room << 1);
d216 11
a226 2
	    fbox->Left -= surround_room;
	    fbox->Top  -= surround_room;
d228 2
a229 11
	    D( printf("frame cont. height %ld query height %ld\n",
	    	msg->imp_ContentsBox->Height, fbox->Height ) );
	}
	else
	{
	    /* use given dimensions and center	*/
	    fbox->Left =  msg->imp_ContentsBox->Left -
		(fbox->Width - msg->imp_ContentsBox->Width )/2;
	    fbox->Top =  msg->imp_ContentsBox->Top - 
		(fbox->Height - msg->imp_ContentsBox->Height )/2;
	}
d242 4
a245 5
    UWORD		ulpen;		/* upper left	*/
    UWORD		lrpen;		/* lower right	*/
    UWORD		fillpen;	/* filled area	*/
    BOOL		swappens;
    UWORD		hthick = HWIDTH;
a246 1
    LONG		joins;
d301 1
a301 1
	UWORD tmppen;
d309 1
a309 17
    /* The default frame has a joins-type of JOINS_NONE */
    joins = JOINS_NONE;

    if ( frametype > FRAME_DEFAULT )
    {
	/* FRAME_BUTTON, FRAME_RIDGE, and FRAME_ICONDROPBOX
	 * all use the horizontal-thick "GadTools-style" box,
	 * with the angled joins.
	 */
	hthick++;
	joins = JOINS_ANGLED;
    }

    embossedBoxTrim( msg->imp_RPort, &box,
	ulpen, lrpen, joins );

    if ( frametype >= FRAME_RIDGE )
d311 9
a319 3
	/* FRAME_RIDGE, and FRAME_ICONDROPBOX all
	 * have a second ridge inside the first, whose
	 * colors are swapped.
d321 2
a322 9
	LONG multiplier = 1;
	UWORD tmppen;

	/* swap pens	*/
	tmppen = ulpen;
	ulpen = lrpen;
	lrpen = tmppen;

	if ( frametype == FRAME_ICONDROPBOX )
d324 1
a324 2
	    /* The icon-dropbox has a gap between outer and inner frames */
	    multiplier = 2;
a326 5
	box.Left += multiplier*FAT_HWIDTH;
	box.Top += multiplier*LWIDTH;
	box.Width -= multiplier*2*FAT_HWIDTH;
	box.Height -= multiplier*2*LWIDTH;

d329 27
a355 1
    }
d357 8
a364 7
    /* interior */
    if ( ! TESTFLAG( lod->lod_Flags, LODF_NOFILL ) )
    {
	interiorBox( msg->imp_RPort, &box,
	    hthick,	/* inset in x dim */
	    LWIDTH,	/* inset in y dim */
	    fillpen );
d373 7
a379 12
    if ( (b->Width > (xw<<1)) && (b->Height > (yw<<1)) )
    {
	rp->Mask = -1;
	BNDRYOFF( rp );
	SetAfPt(rp, NULL, 0);
	SetABPenDrMd(rp, pen, 0, JAM1);
	RectFill( rp,
	    b->Left + xw,
	    b->Top + yw,
	    b->Left + b->Width - 1 - xw,
	    b->Top + b->Height - 1 - yw );
    }
@


38.3
log
@Uses new JOINS flags and omits thickness parameters for
embossedBoxTrim().  Recognizes new IA_FrameType tag.
@
text
@d5 1
a5 1
 *  $Id: frameiclass.c,v 38.2 92/02/11 13:37:36 peter Exp Locker: peter $
d20 1
a34 6
struct TagItem	FrameIFlagsMap[] =  {
    { IA_Recessed,	LODF_RECESSED },
    { IA_EdgesOnly,	LODF_NOFILL },
    { TAG_END }
};

d59 16
a294 16

/* set specified attribute value.
 * Technique provided is a little more general than we need ...
 */
setFrameIAttrs( cl, o, msg )
Class		*cl;
Object		*o;
struct opSet	*msg;
{
    struct TagItem	*tags = msg->ops_AttrList;
    struct localObjectData 	*lod = INST_DATA( cl, o );

    lod->lod_Flags = PackBoolTags( lod->lod_Flags, tags, FrameIFlagsMap );
    lod->lod_FrameType = GetTagData( IA_FrameType, lod->lod_FrameType, tags );
}

@


38.2
log
@Another convert to SetABPenDrMd().
@
text
@d5 1
a5 1
 *  $Id: frameiclass.c,v 38.1 91/11/15 18:51:55 peter Exp Locker: peter $
d17 2
d28 1
a28 1
    UWORD		lod_Pad;
d31 1
a31 2
#define LODF_DOUBLE	(0x0002)	/* not implemented yet	*/
#define LODF_NOFILL	(0x0004)
d35 2
a36 3
    { IA_RECESSED,	LODF_RECESSED },
    { IA_DOUBLEEMBOSS,	LODF_DOUBLE },
    { IA_EDGESONLY,	LODF_NOFILL },
d41 2
a42 1
#define DEFAULTLINEWIDTH	1
d165 3
a167 1
    UWORD		hthick = 1;
d230 4
a233 1
    if ( TESTFLAG( lod->lod_Flags, LODF_DOUBLE ) )
d235 4
d240 1
d244 26
a269 2
	hthick, LWIDTH,
	ulpen, lrpen, 2 );
d271 4
a284 20
#if GETATTRS
/* return requested attribute value	*/
getFrameIAttrs( cl, o, msg )
Class		*cl;
Object		*o;
struct opGet	*msg;
{
    struct localObjectData 	*lod = INST_DATA( cl, o );

    if ( msg->opg_AttrID == IA_LINEWIDTH )
    {
    	*msg->opg_Storage = lod->lod_LineWidth;
	return ( 1 );
    }
    else
    	return ( SSM( cl, o, msg ) );

}
#endif	/* GETATTRS	*/

a295 1
    /* nothing but bools today	*/
d297 1
d311 1
a311 1
	SetABPenDrMd(rp, pen, 0, JAM2);
@


38.1
log
@Minor optimizations.  Penless frames now select into the right colors.
@
text
@d5 1
a5 1
 *  $Id: frameiclass.c,v 38.0 91/06/12 14:17:30 peter Exp Locker: peter $
d292 1
a292 2
	SetDrMd(rp, JAM2);
	SetAPen(rp, pen);
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: frameiclass.c,v 1.2 90/10/10 13:09:39 peter Exp $
d163 2
a164 1
    UWORD		tmppen;
d166 2
d181 13
d198 7
a204 3
	ulpen = pens? pens[ shadowPen ]: 2;
	lrpen = pens? pens[ shinePen ]: 1;
	fillpen = pens? pens[ hifillPen ]: 3;
d207 1
d212 1
a212 3
	ulpen = pens? pens[ shinePen ]: 2;
	lrpen = pens? pens[ shadowPen ]: 1;
	fillpen = pens? pens[ backgroundPen ]: 0;
d214 1
d217 1
a217 1
    if ( TESTFLAG( lod->lod_Flags, LODF_RECESSED ) )
d219 2
d227 5
d233 1
a233 1
	LWIDTH, LWIDTH,
d240 1
a240 1
	    LWIDTH,	/* inset in x dim */
a300 29

#if 0
/* suggestion of Talin: don't draw upper-right and lower-left points */
/* ignoring thickness for now	*/
embossedBoxTrim( rp, b, hthick, vthick, ulpen, lrpen )
struct RastPort	*rp;
struct IBox	*b;
{
    int	bottom, right;

    bottom = b->Top + b->Height - 1;
    right = b->Left + b->Width - 1;

    /* upper right edges	*/
    SetAPen( rp, ulpen );

    Move( rp, b->Left, bottom - 1 );
    Draw( rp, b->Left, b->Top );
    Draw( rp, right - 1, b->Top );

    /* lower right edges	*/
    SetAPen( rp, lrpen );

    Move( rp, right, b->Top + 1 );
    Draw( rp, right, bottom );
    Draw( rp, b->Left + 1, bottom );
}

#endif
@
