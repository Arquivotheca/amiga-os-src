head     38.6;
branch   ;
access   ;
symbols  V40_85:38.6 V40_71:38.6 V40_68:38.6 V40_65:38.6 V40_47:38.6 V40_45:38.6 V40_37:38.6 V40_34:38.6 V40_29:38.6 V39_2415:38.6 V39_2369:38.4 V39_2339:38.3 V39_2332:38.3 V39_2275:38.3 V39_2256:38.3 V39_2210:38.3 V39_2192:38.3 V39_2084:38.3 V39_2082:38.3 V39_2076:38.3 V39_2073:38.3 V39_2058:38.3 V39_2051:38.3 V39_2031:38.3 V39_2017:38.3 V39_2012:38.3 V39_1985:38.3 V39_1933:38.3 V39_1819:38.3 V39_1805:38.3 V39_1783:38.3 V39_1695:38.3 V39_1621:38.3 V39_1620:38.3 V39_1508:38.3 V39_1485:38.3 V39_1461:38.3 V39_1458:38.3 V39_1456:38.3 V39_1405:38.3 V39_1368:38.3 V39_1360:38.3 V39_1324:38.3 V39_1147:38.3 V39_1143:38.3 V39_1141:38.3 V39_1120:38.3 V39_1116:38.3 V39_1104:38.3 V39_1100:38.3 V39_1078:38.3 V39_1073:38.3 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.2 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.2 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.2 V39_171:38.2 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.6
date     93.01.14.14.29.10;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     93.01.12.16.21.25;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     93.01.08.14.49.56;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.07.17.59.29;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.09.23.12.28.57;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.18.02.35;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.33.18;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.6
log
@Deleted unneeded #define.
@
text
@
/*** strings.c ****************************************************************
 *
 *  These are the routines for handling the String Gadget
 *
 *  $Id: strings.c,v 38.5 93/01/12 16:21:25 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1985, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"

#define D(x)	;
#define DFE(x)	;	/* font extent	*/
#define DSC(x)	;	/* size check	*/

/* 7000 is a very large number	*/
#define VBIG	(7000)
UBYTE		nchar = 'n';

#define FGPEN (1)
#define BGPEN (0)

#define FIX_GALILEO

/*
 * this guy does the highlight stuff again, now.
 */
displayString( rp, sg, gi, gbox, sex )
struct RastPort		*rp;
struct Gadget 		*sg;
struct GadgetInfo	*gi;
struct IBox		*gbox;
struct StringExtend	*sex;
{
    extern struct IFontPrefs topazprefs;
    struct StringInfo *si = (struct StringInfo *)sg->SpecialInfo;
    struct Rectangle	gadgrect;
    struct Rectangle	textrect;
    struct TextExtent	te;
    int			extrawidth = 0; /* space on right	*/
    UBYTE		apen, bpen;
    struct RastPort	clonerp;
    int			effectiveBPos;	/* indexes last char if BP == NC */
    int			biggestBPos;	/* numchars, -1 if fixedfield	*/
    struct IBox		cursor;

    int			xorbox();
    struct	TextFont *fp = NULL;

    /* Peter 17-Jan-91:  We need to adjust the gadget's width,
     * for compatibility with many 1.3 applications.
     */
    int			gadwidth;

    D( printf("============\ndisplayString gadget at %lx\n") );
    D( sinfo( si ) );
    /* D( kquery( "press RTC" ) ); */

    cloneRP( &clonerp, rp );

    /* clonerp.Mask = -1; *already */

    /* set up rastport, from extended information	*/
    if ( sex )
    {
	D( printf("extended string gadget\n") );
	D( dumpSex( "dS:gi sex",  sex ) );

	if (sg->Flags & SELECTED)	/* is active gadget */
	{
	    apen =  sex->ActivePens[0];
	    bpen =  sex->ActivePens[1];
	}
	else
	{
	    apen =  sex->Pens[0];
	    bpen =  sex->Pens[1];
	}
	if ( sex->Font ) 
	{
	    D( printf("sex font: %lx\n", sex->Font) );
	    SetFont( &clonerp, sex->Font );
	}
    }
    else
    {
	apen =  FGPEN;
	bpen =  BGPEN;
	/* would like to leave font found in rp	*/
    }

    if ( gbox->Height < clonerp.TxHeight )
    {
	DSC( printf("gadget height %ld smaller than TxHeight %ld\n",
		gbox->Height, clonerp.TxHeight ) );

	/* Slam down to topaz 8	*/
	fp = ISetFont( &clonerp, &topazprefs.ifp_TABuff.tab_TAttr );
    }

    /* 	------  set up BufferPos ------
     * make sure BufferPos is within string (or immediately following)
     * and account for space on right if cursor is past last position
     * (note that 'extrawidth' often indicates that cursor is off right)
     */
    si->NumChars = strlen(si->Buffer);

    effectiveBPos = si->BufferPos;
    biggestBPos = si->NumChars;

    /* keep the cursor on a valid character for fixedfield	*/
    if ( sex && (sex->InitialModes & SGM_FIXEDFIELD)) biggestBPos--;

    if (si->BufferPos >= biggestBPos)
    {
#if 0
	extrawidth = &clonerp->TxWidth;	
#else
	extrawidth = TextLength( &clonerp, &nchar, 1 );
#endif
	D( printf("make space for cursor on right side\n"));
	effectiveBPos = si->BufferPos = biggestBPos;
	effectiveBPos--;
    }
    D( printf("extrawidth: %ld\n", extrawidth ) );

    D( printf("effective bufferpos: %ld\n", effectiveBPos) );

    /* make sure BufferPos isn't out of sight to the left	*/
    si->DispPos = imax( 0, imin( si->DispPos, effectiveBPos ));

    /*	----	set up gadget fill bounds, in compatible way ---- */
    boxToRect( gbox, &gadgrect);
    D( dumpBox( "gadget box", gbox ) );
    D( dumpRect( "gadget rect", &gadgrect ) );

    gadwidth = gbox->Width;

    /* backward compatibility: used to blast out fixed-width spaces
     * to a maximum of MaxChars or something.  Use FontExtent
     * instead of space-char width, to erase whatever's there.
     */
    if ( !sex )
    {
	int	blastwidth;
	int	fontwidth;

	DFE( printf("call FontExtent\n") );
	FontExtent( clonerp.Font, &te );
	DFE( dumpTExtent("font extent", &te ) );
	fontwidth = (te.te_Extent.MaxX + 1);

	/* Peter 17-Jan-91:  For fixed width fonts in non-extended
	 * string gadgets, we round down the blasting width
	 * to an even multiple of the character width.
	 */
	if ( !TESTFLAG( clonerp.Font->tf_Flags, FPF_PROPORTIONAL ) )
	{
	    gadwidth -= ( gadwidth % fontwidth );
	    DFE( printf("rounded down width: %ld\n", gadwidth ) );
	}

	/* only last out as much width as chars might possibly
	 * use up.  For left-justified gadgets only.
	 */
	if ( !(  sg->Activation & (STRINGCENTER | STRINGRIGHT) ) )
	{

	    DFE( printf("blast protection: MaxX: %ld\n", te.te_Extent.MaxX ) );
	    DFE( printf("max chars: %ld ", si->MaxChars ) );

	    /* jimm: 5/4/90: was maxchars -1, but need to clear cursor */
	    blastwidth = (si->MaxChars) * fontwidth;

	    gadwidth = imin( blastwidth, gadwidth );

	    DFE( printf("blastwidth: %ld\n", blastwidth ) );
	    DFE( printf("old width %ld, new width %ld\n",
		rectWidth( &gadgrect) , newgwidth));
	}

	gadgrect.MaxX = gadgrect.MinX + gadwidth - 1;
	gadgrect.MaxY = gadgrect.MinY + clonerp.TxHeight - 1;
    }

    /*	----	Find amount of text to use, and extent ----	*/

    if ( si->NumChars )
    {

	si->DispCount = TextFit( &clonerp, &si->Buffer[ si->DispPos ],
	    si->NumChars - si->DispPos, &te, NULL, 1,
	    gadwidth - extrawidth, VBIG );

	D( printf("call TextFit with width %ld height %ld\n",
	    gadwidth - extrawidth, gbox->Height ) );
	
	D( sinfo( si ) );
	D( printf("constraint width: %ld, extent width: %ld\n",
	    gadwidth - extrawidth, rectWidth( &te.te_Extent )) );

	D( printf("textlength: %ld\n", TextLength( &clonerp,
		&si->Buffer[ si->DispPos ], si->DispCount ) ) );

	/* BufferPos would be scrolled off to the right	*/
	if ( si->DispPos + si->DispCount - 1 < effectiveBPos )
	{
	    si->DispCount = TextFit( &clonerp, &si->Buffer[ effectiveBPos ],
		/* ZZZ: jimm: changed but no test yet, was MaxChars */
		effectiveBPos+1, &te, NULL, -1,
		gadwidth - extrawidth, VBIG);

	    si->DispPos = effectiveBPos - si->DispCount + 1;
	    D( printf("scroll back left.  DP: %ld, DC:%ld EBP: %ld\n", 
		si->DispPos, si->DispCount, effectiveBPos) );
	}
	/* be sure to show maximum possible number of chars	*/
	else if ( (si->DispCount + si->DispPos >= si->NumChars) && si->DispPos )
	{
	    si->DispCount = TextFit( &clonerp, &si->Buffer[ si->NumChars - 1 ],
		si->NumChars, &te, NULL, -1,
		gadwidth - extrawidth, VBIG);
	    si->DispPos = si->NumChars  - si->DispCount;
	    D( printf("not showing max, scroll right, new DC %ld\n",
		si->DispCount ) );
	}

	/*	----	set up textrect aligned with ULC of gadget ----	*/
	D( dumpRect("gadgrect", &gadgrect) );
	D( dumpRect("textextent", &te.te_Extent) );

	textrect = te.te_Extent;
	offsetRect( &textrect, gadgrect.MinX - te.te_Extent.MinX,
		    gadgrect.MinY - te.te_Extent.MinY);
    }
    else	/* NumChars == 0	*/
    {
	D( printf("NumChars == 0\n"));
	si->DispCount = 0;
	si->DispPos = 0;
    }

    /*	-----	 handle centering, right just ----	*/
    if ( sg->Activation & (STRINGCENTER | STRINGRIGHT) )
    {
	si->CLeft = rectWidth( &gadgrect ) - extrawidth;
	if ( si->NumChars )
	{
	    si->CLeft -= rectWidth( &textrect );
	}
	
	if ( sg->Activation & STRINGCENTER )
	{
	    si->CLeft /= 2;
	}
    }
    else si->CLeft = 0;

    D( printf( "ready to draw the sucker:\n") );
    D( sinfo( si ) );

    offsetRect( &textrect, si->CLeft,
	(rectHeight( &gadgrect ) - rectHeight( &textrect )) / 2 );
    D( dumpRect("textrect", &textrect) );

    /* ----- clear around text area ----	*/
    fillAround( &clonerp, &gadgrect, si->NumChars? &textrect: NULL, bpen, ~0);

    /*	------ Do Text ----	*/
    SetABPenDrMd( &clonerp, apen, bpen, JAM2 );

    /* print the text itself		*/
    if ( si->DispCount ) 
    {
	Move(&clonerp, textrect.MinX - te.te_Extent.MinX,
		 textrect.MinY - te.te_Extent.MinY);
	Text( &clonerp, &si->Buffer[ si->DispPos ], si->DispCount);
    }

    /*	------  set up Cursor Box  ------	*/
    cursor.Height = clonerp.TxHeight;
    if ( si->NumChars )
    {
	cursor.Top = textrect.MinY;
	cursor.Left = textrect.MinX +
	    TextLength( &clonerp, &si->Buffer[si->DispPos],
	    si->BufferPos - si->DispPos);
    }
    else
    {
	cursor.Top = gbox->Top +
	    ( rectHeight( &gadgrect ) - cursor.Height ) / 2;
	cursor.Left = si->CLeft + gbox->Left;
    }
    D( printf( "cursor position: %ld/%ld\n",
	cursor.Top, cursor.Left ) ); 

    /* cursor may be past end of string (should be safe with NumChars == 0) */
    if ( !(cursor.Width = extrawidth) )
    {
	 TextExtent( &clonerp, &si->Buffer[ effectiveBPos ], 1, &te );
	 cursor.Width = rectWidth( &te.te_Extent );
	 D( printf( "cursor on char: %lx, width: %ld\n",
		si->Buffer[ effectiveBPos ], cursor.Width ) );
    }
    D( else printf("cursor off right: width: %ld\n", extrawidth ) );

    /* if gadget is active, turn on cursor */
    /* probably want to use some trickier cursor stuff,
     * not XOR, to distinguish overstrike and insert mode
     */
    if (sg->Flags & SELECTED)
    {
	boxModernize(xorbox, &clonerp, &cursor );
    }

    ICloseFont( fp );	/* no-op if unused (NULL)	*/
}


/*
 * assumes you would only pass me a string gadget
 * ZZZ: when I do sgclass, this might become instance data
 */
struct StringExtend	*
getSEx( g )
struct Gadget	*g;
{
    return ( ( (g->Flags & GFLG_STRINGEXTEND) || (g->Activation & GACT_STRINGEXTEND) ) ?
	((struct StringInfo *) g->SpecialInfo)->Extension: 0 );
}
@


38.5
log
@Removed compiled-out code.
@
text
@d6 1
a6 1
 *  $Id: strings.c,v 38.4 93/01/08 14:49:56 peter Exp Locker: peter $
a15 4
#ifndef GFLG_STRINGEXTEND
#define GFLG_STRINGEXTEND 0x0400
#endif

a18 4

#if USE_GFX_BACKFIT
#define BackFit	TextFit
#endif
@


38.4
log
@Cleaned up some conditional code.
@
text
@d6 1
a6 1
 *  $Id: strings.c,v 38.3 92/04/07 17:59:29 peter Exp Locker: peter $
a23 3
/* TextFit seems to be working for end-anchored checkint */
#define USE_GFX_BACKFIT	1

d220 1
a220 1
	    si->DispCount = BackFit( &clonerp, &si->Buffer[ effectiveBPos ],
d232 1
a232 1
	    si->DispCount = BackFit( &clonerp, &si->Buffer[ si->NumChars - 1 ],
a331 33

#if !USE_GFX_BACKFIT
BackFit( rp, str, maxnum, te, tconst, negone, width, height)
struct RastPort	*rp;
UBYTE		*str;
int		maxnum;
struct TextExtent	*te;
struct TextExtent	*tconst;
int		negone;
int		width, height;
{
    int		numchars;
    int		numreturn;
    UBYTE	*cp;

    cp =	str;
    for ( numchars =	1; numchars <= maxnum; ++numchars )
    {
	numreturn = TextFit( rp, cp, numchars, te, tconst, 1, width, height);

	if ( numreturn < numchars )	/* went too far	*/
	{
	    if ( numchars - 1> 0 )
	    {
		numchars=TextFit(rp,++cp,numchars-1,te,tconst,1,width,height);
	    }
	    return ( numchars );
	}
	cp--;
    }
    return ( numchars - 1);
}
#endif	/* USE_GFX_BACKFIT	*/
@


38.3
log
@Removed unused vble.
@
text
@d6 1
a6 1
 *  $Id: strings.c,v 38.2 91/09/23 12:28:57 peter Exp Locker: peter $
a23 2
#define SG_SIZECHECK 1		/* override font to fit in gadget	*/

a62 1
#if SG_SIZECHECK
a63 1
#endif
a106 1
#if SG_SIZECHECK 	/* override default font for size check	*/
a114 1
#endif
a331 1
#if SG_SIZECHECK 
a332 1
#endif
@


38.2
log
@displayString() now uses SetABPenDrMd().
@
text
@d2 1
a2 1
/*** string.c ****************************************************************
d6 1
a6 1
 *  $Id: strings.c,v 38.1 91/07/10 18:02:35 peter Exp Locker: peter $
a57 2
    int			numchars;
    struct IntuitionBase *IBase = fetchIBase();
@


38.1
log
@Eliminated unneeded tconstraint in favor of NULL constraining extent
to TextFit().
@
text
@d6 1
a6 1
 *  $Id: strings.c,v 38.0 91/06/12 14:33:18 peter Exp Locker: peter $
d293 1
a293 3
    SetAPen( &clonerp, apen );
    SetBPen( &clonerp, bpen );
    SetDrMd( &clonerp, JAM2 );
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: strings.c,v 36.24 91/02/12 18:21:36 peter Exp $
a34 1
struct TextExtent	tconstraint = {VBIG,VBIG,{-VBIG,-VBIG,VBIG,VBIG}};
d215 1
a215 1
	    si->NumChars - si->DispPos, &te, &tconstraint, 1,
d233 1
a233 1
		effectiveBPos+1, &te, &tconstraint, -1,
d244 1
a244 1
		si->NumChars, &te, &tconstraint, -1,
@
