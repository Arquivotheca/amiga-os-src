head     38.0;
branch   ;
access   ;
symbols  V40_85:38.0 V40_71:38.0 V40_68:38.0 V40_65:38.0 V40_47:38.0 V40_45:38.0 V40_37:38.0 V40_34:38.0 V40_29:38.0 V39_2415:38.0 V39_2369:38.0 V39_2339:38.0 V39_2332:38.0 V39_2275:38.0 V39_2256:38.0 V39_2210:38.0 V39_2192:38.0 V39_2084:38.0 V39_2082:38.0 V39_2076:38.0 V39_2073:38.0 V39_2058:38.0 V39_2051:38.0 V39_2031:38.0 V39_2017:38.0 V39_2012:38.0 V39_1985:38.0 V39_1933:38.0 V39_1819:38.0 V39_1805:38.0 V39_1783:38.0 V39_1695:38.0 V39_1621:38.0 V39_1620:38.0 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.0
date     91.06.12.14.27.03;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@/*** modclass.c *******************************************************
 *
 * modclass.c -- base model class
 *	a model is at root just an update broadcaster
 *
 *  $Id: modclass.c,v 1.9 90/10/10 13:12:24 peter Exp $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"
#include "classusr.h"
#include "classes.h"
#include "icclass.h"


#define DIC(x)	;

/* A Model is just an IC with an extra list of IC's
 * to broadcast things to.
 */
struct ModData	{
    struct MinList	md_Dependents;
};


Class	*
initModelClass()
{
    Class	*makePublicClass();
    ULONG 	modDispatch();
    extern UBYTE	*ModelClassName;
    extern UBYTE	*ICClassName;

    return (  makePublicClass( ModelClassName, ICClassName,
    	sizeof (struct ModData), modDispatch));
}

ULONG
modDispatch( cl, o, msg )
Class   *cl;
Object  *o;
Msg     msg;
{
    Object  		*newobj;
    struct ModData	*md;

    Object  		*ic;
    Object  		*ostate;

    /* iteration routine, in Intuition	*/
    Object  		*NextObject();

    md = INST_DATA( cl, o );

    switch ( msg->MethodID )
    {
    case OM_NEW:
	if ( newobj = (Object *) SSM( cl, o, msg ) )
	{
	    md = INST_DATA( cl, newobj );	/* new object */
	    NewList( (struct List *) &md->md_Dependents );

	    /* no attributes */
	}


	return ( (ULONG) newobj );

    case OM_NOTIFY:
	DIC( printf("model at %lx receives OM_NOTIFY!\n"));
    case OM_UPDATE:
	/* would SendMessage be better?  Certainly not faster! */
	notifyMod( cl, o, msg, md );
	break;

    case OM_ADDMEMBER:
	/* add an IC to the dependents list */
    	SendMessage( ((struct opAddMember *)msg)-> opam_Object,
		OM_ADDTAIL, &md->md_Dependents );
	break;

    case OM_REMMEMBER:
	SendMessage( ((struct opAddMember *)msg)->opam_Object,
			OM_REMOVE, &md->md_Dependents );
	break;

    case OM_DISPOSE:
	/* dispose of all IC's in my list */
	ostate = md->md_Dependents.mlh_Head;
	while ( ic = NextObject( &ostate ) )
	{
	    SendMessage( ic, OM_REMOVE );
	    SendMessage( ic, OM_DISPOSE );
	}
	SSM( cl, o, msg );
	break;

#if 0
    case OM_SET:	
#endif
    default:	/* let the superclass handle it */
	return ( (ULONG) SSM( cl, o, msg ) );
    }
    return ( 1 );
}

notifyMod( cl, o, msg, md )
Class	*cl;
Object	*o;
struct opUpdate	*msg;
struct ModData	*md;
{
    Object  		*ostate;
    Object  		*ic;
    struct TagItem	*origattrs;
    struct TagItem	*CloneTagItems();

    DIC( printf(">>>\nnodifyMod model at %lx\n", o) );

    /* propagate notification message to dependents.
     * supercede this with model-specific behaviour.
     */
    if ( SendSuperMessage( cl, o, ICM_CHECKLOOP ) != 0 )
	return;

    /* This is the place where these messages are broadcast.
     * Since the receivers are allowed to change the
     * attribute list in the message, to broadcast I
     * need to send a clones.  We reuse the message
     * but refresh the cloned attribute list.
     */

    /* first we broadcast the message to our dependents,
     * (probably controls), then pass it out to
     * our main target.
     */
    SendSuperMessage( cl, o, ICM_SETLOOP );
    origattrs = msg->opu_AttrList;
    msg->opu_AttrList = CloneTagItems( origattrs );

    msg->MethodID = OM_UPDATE;	/* going external	*/

    ostate = md->md_Dependents.mlh_Head;
    while ( ic = NextObject( &ostate ) )
    {
	DIC( printf("update member at %lx --", ic ) );
	SM( ic, msg );
	RefreshTagItemClones( msg->opu_AttrList, origattrs );
    }
    SendSuperMessage( cl, o, ICM_CLEARLOOP );

    DIC( printf("model at %lx: have updated my members, msg %lx atts %lx\n",
	o, msg, msg->opu_AttrList ) );
    DIC( Debug() );

    /* let the IC superclass send to the default target	*/
    SSM( cl, o, msg );
    DIC( printf("model at %lx: have passed to super.\n<<<\n", o ) );
    FreeTagItems( msg->opu_AttrList );

    /* restore, for caller */
    msg->opu_AttrList = origattrs;
}

@
