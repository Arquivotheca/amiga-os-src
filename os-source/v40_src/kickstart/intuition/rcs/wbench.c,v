head     38.17;
branch   ;
access   ;
symbols  V40_85:38.17 V40_71:38.17 V40_68:38.17 V40_65:38.17 V40_47:38.17 V40_45:38.17 V40_37:38.17 V40_34:38.17 V40_29:38.17 V39_2415:38.17 V39_2369:38.16 V39_2339:38.16 V39_2332:38.16 V39_2275:38.16 V39_2256:38.16 V39_2210:38.16 V39_2192:38.16 V39_2084:38.16 V39_2082:38.16 V39_2076:38.16 V39_2073:38.16 V39_2058:38.16 V39_2051:38.16 V39_2031:38.16 V39_2017:38.16 V39_2012:38.16 V39_1985:38.16 V39_1933:38.16 V39_1819:38.15 V39_1805:38.15 V39_1783:38.15 V39_1695:38.15 V39_1621:38.15 V39_1620:38.15 V39_1508:38.13 V39_1485:38.13 V39_1461:38.13 V39_1458:38.13 V39_1456:38.13 V39_1405:38.13 V39_1368:38.13 V39_1360:38.13 V39_1324:38.12 V39_1147:38.11 V39_1143:38.11 V39_1141:38.11 V39_1120:38.11 V39_1116:38.11 V39_1104:38.11 V39_1100:38.11 V39_1078:38.11 V39_1073:38.11 V39_757:38.7 V39_702:38.7 V39_557:38.7 V39_553:38.7 V39_551:38.7 V39_510:38.7 V39_495:38.7 V39_416:38.7 V39_383:38.7 V39_371:38.6 V39_336:38.5 V39_323:38.5 V39_295:38.4 V39_277:38.4 V39_254:38.3 V39_222:38.3 V39_185:38.3 V39_171:38.3 V39_161:38.3 V38_159:38.3 V38_116:38.2 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.17
date     93.01.12.16.22.11;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.08.02.13.09.13;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.06.29.10.48.17;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.23.17.23.09;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.05.27.11.56.52;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.05.21.17.46.49;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.09.16.29.42;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.07.18.01.08;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.02.12.10.08;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.04.01.15.09.06;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.07.11.07.53;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.05.15.40.23;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.01.22.16.46.02;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.25.16.56.55;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.21.18.22.10;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.18.02.49;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.07.29;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.35.10;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.17
log
@Now get "Workbench Screen" title from IBase (for locale).
@
text
@
/*** wbench.c ************************************************************** 
 * 
 *  The routines for dealing with the Workbench Screen 
 * 
 *  $Id: wbench.c,v 38.16 92/08/02 13:09:13 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc. 
 *  Copyright (C) 1985, Commodore-Amiga, Inc. 
 *  All Rights Reserved 
 * 
 ***************************************************************************/ 
 
#include "intuall.h" 
#include "preferences.h"
#include <exec/alerts.h>
#include <exec/memory.h>
#include <exec/initializers.h>

/* is there enough screen buffer to hold 'field'?	*/
#define ENUFSCREEN( field ) ( ((ULONG) OFFSET(Screen, field) )+ \
	    sizeof(((struct Screen *)0)->field) )


#ifndef GRAPHICS_DISPLAYINFO_H
#include <graphics/displayinfo.h>
#endif

/** #define USELACEWB 1 **/

#define D(x)		;	/* debug 	*/
#define DGSD(x)		;	/* debug GetScreenData	 	*/
#define DOWB(x)		;	/* debug OpenWorkbench() 	*/
#define DOWB3(x)	;	/* debug OpenWorkbench() 	*/
#define DOWB2(x)	;	/* debug OpenWorkbench() 	*/
#define DCOMMWB(x)	;	/* debug communicateWBench() 	*/
#define OWBALERT	1	/* pull alert if openwb fails */
 
/* Workbench Public Screen Name: */
UBYTE WBPUBNAME[] = "Workbench";

/* ======================================================================= */ 

/*
 * this nasty little function is trickier than it seems.
 * not only do you have to protect its walk down the
 * list, but when you call it unprotected you have to be sure
 * that you don't care if the WB screen it finds goes away
 * before you use it.
 *
 * ZZZ: probably should get IBASELOCK right here, right now.
 */
 
struct Screen *findWorkBench() 
{ 
    struct Screen *sc = NULL; 
    struct IntuitionBase *IBase = fetchIBase();

    DOWB(printf("findWorkBench\n"));

    /* jimm: added LOCKIBASE: 6/6/90	*/
    LOCKIBASE();

    for ( sc = IBase->FirstScreen; sc; sc = sc->NextScreen )
    { 
	DOWB(printf("screentype: %lx\n", sc->Flags & SCREENTYPE ));
	if ((sc->Flags & SCREENTYPE) == WBENCHSCREEN) 
	{
	    break;
	}
    } 

    UNLOCKIBASE();
    return( sc ); 
} 

/*
 * returns with psn_VisitorCount++
 */
struct Screen *
openwbscreen()
{
    struct Screen *wbscreen;
    struct IntuitionBase *IBase = fetchIBase();
    struct Screen *openScreenOnlyTags();

    wbscreen = openScreenOnlyTags(
	SA_LikeWorkbench, LIKEWB_WORKBENCH,
	SA_Type, WBENCHSCREEN,
	SA_Title, IBase->WBScreenTitle,	/* "Workbench Screen" */
	SA_PubName, (ULONG)WBPUBNAME,	/* "Workbench" */
	TAG_DONE );


    if ( wbscreen )
    {
	D( printf("openwbscreen ok.\n") );
	/* put a visitor lock on it right away	*/
	bumpPSNVisitor( XSC(wbscreen)->PSNode );
	PubScreenStatus( wbscreen, 0 );	/* make it public	*/

	pokeWorkbench();	/* only poke Dave when screen opens	*/
    }

#if OWBALERT
/* DEBUG version: openwb should be allowed to fail, except at init */
    else
    {
	DOWB( printf("openwbscreen failing miserably!!\n") );
	DOWB( Alert( AN_OpenScreen ) );
    }
#endif

    return( wbscreen ); 
}

/*** intuition.library/WBenchToFront ***/
/* Downcoded into intuitionface.asm */

/*** intuition.library/WBenchToBack ***/
/* Downcoded into intuitionface.asm */

 
 
 /*** intuition.library/OpenWorkBench ***/


/* NB: OpenWorkBench() calls here through LVO
 *
 *  This routine boils down to this:
 * "openSysScreen() with no visitor lock hanging."
 */
struct Screen *openWorkBench() 
{ 
    struct Screen	*openSysScreen();
    struct Screen *screen;

    /* Can't skip this operation just because the WB
     * screen is already there, since any other window
     * opening might have gotten it open. 
     *
     * HAH! Fixed: openSysScreen now tells wb.library
     *
     * Jeezus: no protection?
     * OK, I put IBASELOCK in oSS
     *
     * jimm: jan 1990
     */
    DOWB3(printf("OpenWB\n"));
    if ( screen =  openSysScreen(WBENCHSCREEN) )	/* returns VC++ */
    { 
	DOWB3( printf("WB screen found or opened OK\n") );

	decPSNVisitor( XSC(screen)->PSNode );	/* I leave no visitor lock */
    } 
    return(screen); 
} 

/* asynchronous WBENCHOPEN message to workbench.library (WBPort).
 * Needs to be asynchronous so that we won't deadlock when
 * we openwb in response to the workbench.library task calling 
 * (for openwindow, lockpubscreen, ... )
 */
pokeWorkbench()
{
    struct IntuitionBase *IBase = fetchIBase();
    struct IntuiMessage 	*wbmsg;
     
    Forbid();	/* prevent AlohaWorkBench	*/
    if ( IBase->WBPort && 
	(wbmsg = (struct IntuiMessage *)AllocMem(
	    sizeof(struct IIntuiMessage), MEMF_PUBLIC | MEMF_CLEAR)))
    {
	initWBMessage( wbmsg, &IBase->WBReplyPort, WBENCHOPEN );
	PutMsg( IBase->WBPort, wbmsg );
    }
    Permit();
}
/*** intuition.library/GetScreenData ***/

BOOL GetScreenData(buffer, size, type, customsc )
struct Screen *buffer;
UWORD size;
UWORD type;
struct Screen *customsc;
{
    struct Screen *sc = NULL;
    struct Screen *windowPubScreen();
    BOOL	locked_pubscreen = TRUE;

DGSD( printf("GSD buffer %lx, size 0x%lx, address of modes %lx limitaddr %lx\n",
	buffer, size, &buffer->ViewPort.Modes, 
	(ULONG) buffer + (ULONG) size ) );

    DGSD( printf("offset of viewport.modes %lx\n",
	OFFSET(Screen, ViewPort.Modes) ) );


    DGSD( printf("ENUFSCREEN for vpmodes 0x%lx, width %lx, height %lx\n",
	ENUFSCREEN( ViewPort.Modes ), ENUFSCREEN( Width ),
	ENUFSCREEN( Height ) ) );

    if (type == CUSTOMSCREEN)
    {
	sc =  customsc;
	locked_pubscreen = FALSE;
    }
    else if ( (type == WBENCHSCREEN ) &&
	    TESTFLAG( fetchIBase()->PubScreenFlags, SHANGHAI ) )
    {
	sc = windowPubScreen( NULL, 0 );	/* default	*/
	/* returns VC++	*/
    }
    else	/* non-shanghai'd WBENCHSCREEN and "new" sysscreens */
    {
    	sc = openSysScreen( type );	/*returns VC++ */
    }

    if (sc != NULL) 
    {
	/* copy 'size' bytes */
	CopyMem(sc, buffer, MIN(sizeof (struct Screen), size) );
	if ( locked_pubscreen ) decPSNVisitor( XSC(sc)->PSNode );

	/* "fake out" people who rely on WBenchScreen to get
	 * the text overscan (morerows) dimensions
	 */
	if ( type == WBENCHSCREEN )
	{
	    struct Rectangle	oscanrect;
	    ULONG		displayID;

	    /* We used to lie about the display ID, based on
	     * the IS_LACE and IS_PANELLED property of the WB screen's
	     * real mode.  Now, for V39, we lie based on the height
	     * of the display clip.  This is so 640x400 double-NTSC
	     * and double-PAL modes pretend to be interlaced.
	     */
	    displayID = HIRES_KEY;
	    if ( rectHeight( &XSC(sc)->DClip ) >= 400 )
	    {
		displayID = HIRESLACE_KEY;
	    }

	    /* now lie about screen mode and dimensions */
	    /* jimm: 6/5/90: should be changing the destination
	     * 'buffer' not the source 'sc'. ;^)
	     */

	    if ( size >= ENUFSCREEN( ViewPort.Modes ) )
	    {
		DGSD( printf("copying vpmodes\n"));
		buffer->ViewPort.Modes = displayID | SPRITES;
	    }
	    DGSD( printf("not enough space for vpmodes\n"));
	    /*** jimm: 6/11/90: Hedley mode doesn't lie about
	     *** dimensions.
	     ***/
	    if ( ( XSC(sc)->NaturalDisplayID & MONITOR_ID_MASK )
		!= A2024_MONITOR_ID )
	    {
		QueryOverscan( displayID, &oscanrect, OSCAN_TEXT );
		if ( size >= ENUFSCREEN( Width ) )
		{
		    buffer->Width =  imin(rectWidth( &oscanrect ), sc->Width );
		}
		if ( size >= ENUFSCREEN( Height ) )
		{
		    buffer->Height = 
			imin(rectHeight( &oscanrect ), sc->Height );
		}
	    }
	}
	return (TRUE);
    }

    return (FALSE);
}
 
 
 /*** intuition.library/CloseWorkBench ***/

#if 0

Moved to screens.h

BOOL CloseWorkBench() 
{ 
    DOWB2( printf("===\nCloseWorkBench enter\n") );
    return ( doISM( itCLOSESCREEN, NULL, NULL, 0 ) );
} 
 
AlohaWorkbench(wbport) 
struct MsgPort *wbport; 
/* "aloha" in hawaiian means both hello and goodbye */ 
{ 
    fetchIBase()->WBPort = wbport; 
} 
 
#endif
@


38.16
log
@GetScreenData(WB) interlace now based on DClip height, not DIPF_ stuff.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.16 92/08/02 12:46:16 peter Exp Locker: peter $
a38 2
/* Workbench Screen Title: */
UBYTE WBSTitle[] =  "Workbench Screen";
d84 1
d90 1
a90 1
	SA_Title, (ULONG)WBSTitle,	/* "Workbench Screen" */
@


38.15
log
@Renamed openworkbench() to openwbscreen() for clarity.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.14 92/06/23 17:23:09 peter Exp Locker: peter $
d182 1
a182 1
BOOL GetScreenData(buffer, size, type, screen )
d186 1
a186 1
struct Screen *screen;
d188 1
a188 1
    struct Screen *ptr = NULL;
d206 1
a206 1
	ptr =  screen;
d212 1
a212 1
	ptr = windowPubScreen( NULL, 0 );	/* default	*/
d217 1
a217 1
    	ptr = openSysScreen( type );	/*returns VC++ */
d220 1
a220 1
    if (ptr != NULL) 
d223 2
a224 2
	CopyMem(ptr, buffer, MIN(sizeof (struct Screen), size) );
	if ( locked_pubscreen ) decPSNVisitor( XSC(ptr)->PSNode );
d234 1
a234 1
	    /* we are going to lie about the display ID, based on
d236 3
a238 1
	     * real mode
d241 1
a241 2
	    if ( TESTFLAG( XSC(ptr)->NaturalDProperties,
		DIPF_IS_LACE | DIPF_IS_PANELLED ) )
d248 1
a248 1
	     * 'buffer' not the source 'ptr'. ;^)
d260 1
a260 1
	    if ( ( XSC(ptr)->NaturalDisplayID & MONITOR_ID_MASK )
d266 1
a266 1
		    buffer->Width =  imin(rectWidth( &oscanrect ), ptr->Width );
d271 1
a271 1
			imin(rectHeight( &oscanrect ), ptr->Height );
@


38.14
log
@WBenchToFront() and WBenchToBack() downcoded.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.13 92/05/27 11:56:52 peter Exp Locker: peter $
d83 1
a83 1
openworkbench()
d98 1
a98 1
	D( printf("openworkbench ok.\n") );
d110 1
a110 1
	DOWB( printf("openworkbench failing miserably!!\n") );
d129 1
a129 1
/*
d134 1
a134 1
struct Screen *OpenWorkBench() 
@


38.13
log
@Greatly simplified openworkbench() through use of SA_LikeWorkbench tag.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.12 92/05/21 17:46:49 peter Exp Locker: peter $
d119 1
a120 18
LONG WBenchToFront() 
{ 
    struct Screen *sc; 

    /* test if the WB is open at the moment */
    /* LOCKIBASE();  done in findWorkBench() */
    sc = findWorkBench();
    /* UNLOCKIBASE(); */

    if ( sc ) 
    {
	ScreenDepth( NULL, SDEPTH_TOFRONT, NULL );	/* will findWB again */
	return ( TRUE );
    }
    return ( FALSE );
} 


d122 1
a122 9

LONG WBenchToBack() 
{ 
    struct Screen *sc; 

    /* test if the WB is open at the moment */
    /* LOCKIBASE();  done in findWorkBench() */
    sc = findWorkBench();
    /* UNLOCKIBASE(); */
a123 7
    if ( sc ) 
    {
	ScreenDepth( NULL, SDEPTH_TOBACK, NULL );	/* will findWB again */
	return ( TRUE );
    }
    return( FALSE );
}
@


38.12
log
@Made SA_Interleaved controllable through preferences.  Now passes
~0 for pens.  Now call Alert() instead of execAlert().  Now
calls ScreenDepth() instead of ScreenToFront/ToBack().
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.11 92/04/09 16:29:42 peter Exp Locker: peter $
a78 9
struct IScreenModePrefs DefaultScreenMode =
{
    HIRES_KEY, 
    STDSCREENWIDTH,
    STDSCREENHEIGHT,
    2,
    0
};

d82 5
a86 9
struct Screen *openworkbench() 
{ 
    struct Screen *wbscreen; 
    struct Screen *openWBPrefsScreen();
    struct IScreenModePrefs *realone;
    struct IntuitionBase *IBase = fetchIBase();

    DOWB( printf("OWB enter.\n") );
    DOWB2( printf("OWB enter.\n") );
d88 6
a93 12
    /* Try to open according to prefs.  If failure, 
     * fall back onto tried and true defaults
     */
    if ( ! ( wbscreen = openWBPrefsScreen( realone = &IBase->CoolScreenMode ) ) )
    {
	DOWB( printf("openwb prefs OpenScreen failed\n") );
	if ( ! ( wbscreen = openWBPrefsScreen( realone = &IBase->LastScreenMode ) ) )
	{
	    DOWB( printf("openwb LastScreenMode OpenScreen failed\n") );
	    wbscreen = openWBPrefsScreen( realone = &DefaultScreenMode );
	}
    }
a94 2
    /* Remember the one that worked, in case it doesn't work next time */
    IBase->LastScreenMode = *realone;
a116 45

/* These are the tags for the Workbench screen which are invariant. */
struct TagItem fixed_wbtags[] =
{
    {SA_Type,		WBENCHSCREEN,},
    {SA_Title,		(ULONG)WBSTitle,},	/* "Workbench Screen" */
    {SA_PubName,	(ULONG)WBPUBNAME,},	/* "Workbench" */
    {SA_Overscan,	OSCAN_TEXT,},
    {SA_SysFont,	1,},			/* User's preferred font */
    {SA_FullPalette,	TRUE,},
    {SA_SharePens,	TRUE,},
    {TAG_DONE,		0,},
};

UWORD defaultPens[] = { ~0 };

struct Screen	*
openWBPrefsScreen( ism )
struct IScreenModePrefs	*ism;
{
    struct IntuitionBase *IBase = fetchIBase();
    struct Screen *openScreenOnlyTags();

    /* Set up values based on user's preferences.
     *
     * ZZZ: Note that LITTLE validity checking is done here.
     * Things that are ensured are:
     *	- at least 640x200
     * Things that should be handled include:
     *	- no LACE if Hedley
     *	- font is openable (use SA_SysFont method)
     *	- chips are available
     */

    return( openScreenOnlyTags( 
	SA_DisplayID,	ism->ism_DisplayID,
	SA_Width,	ism->ism_Width,
	SA_Height,	ism->ism_Height,
	SA_Depth,	ism->ism_Depth,
	SA_AutoScroll,	TESTFLAG( ism->ism_Control, WBAUTOSCROLL ),
	SA_Pens,	defaultPens,
	SA_Interleaved,	TESTFLAG( ism->ism_Control, WBINTERLEAVED ),
	TAG_MORE, 	(ULONG)fixed_wbtags ) );
} 

@


38.11
log
@Changes to handle message sizes.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.10 92/04/07 18:01:08 peter Exp Locker: peter $
a43 3
extern UWORD	fourColorPens[];
extern UWORD	twoColorPens[];

a100 1

d132 1
a132 1
	DOWB( execAlert( AN_OpenScreen ) );
a148 1
    {SA_Interleaved,	TRUE,},
d152 2
d158 1
a171 6
    UWORD *pens = twoColorPens;
    if ( ism->ism_Depth > 1 )
    {
	pens = fourColorPens;
    }

d178 2
a179 1
	SA_Pens,	pens,
d182 2
d186 1
a186 1
BOOL WBenchToFront() 
d197 1
a197 1
	ScreenToFront( NULL );	/* will findWB again */
d206 1
a206 1
BOOL WBenchToBack() 
d217 1
a217 1
	ScreenToBack( NULL );	/* will findWB again */
d220 2
a221 1
} 
@


38.10
log
@Minor fix for SAS test-compile.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.9 92/04/02 12:10:08 peter Exp Locker: peter $
d275 1
a275 1
	    sizeof(struct FatIntuiMessage), MEMF_PUBLIC | MEMF_CLEAR)))
@


38.9
log
@No longer includes gfxbase.h.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.8 92/04/01 15:09:06 peter Exp Locker: peter $
d146 9
a154 9
    {SA_Type,		WBENCHSCREEN,}
    {SA_Title,		(ULONG)WBSTitle,}	/* "Workbench Screen" */
    {SA_PubName,	(ULONG)WBPUBNAME,}	/* "Workbench" */
    {SA_Overscan,	OSCAN_TEXT,}
    {SA_SysFont,	1,}			/* User's preferred font */
    {SA_FullPalette,	TRUE,}
    {SA_SharePens,	TRUE,}
    {SA_Interleaved,	TRUE,}
    {TAG_DONE,		0,}
a161 2

    struct IntuitionBase *IBase = fetchIBase();
@


38.8
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.7 92/02/07 11:07:53 peter Exp Locker: peter $
a23 4

#ifndef GRAPHICS_GFXBASE_H
#include <graphics/gfxbase.h>
#endif
@


38.7
log
@WB is now interleaved by default.  This may be temporary.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.6 92/02/05 15:40:23 peter Exp Locker: peter $
d195 1
a196 28
/****** intuition.library/WBenchToFront *************************************
* 
*    NAME 
*	WBenchToFront -- Bring the Workbench screen in front of all screens.
*
*    SYNOPSIS 
*	Success = WBenchToFront() 
*	D0
*
*	BOOL WBenchToFront( VOID );
*
*    FUNCTION 
*	Causes the Workbench Screen, if it's currently opened, to come to 
*	the foreground.  This does not 'move' the screen up or down, instead 
*	only affects the depth-arrangement of the screen. 
* 
*    INPUTS 
*	None 
* 
*    RESULT 
*	If the Workbench screen was opened, this function returns TRUE,
*	otherwise it returns FALSE. 
* 
*    BUGS 
* 
*    SEE ALSO 
*	WBenchToBack(), ScreenToBack()
****************************************************************************/ 
d215 1
a216 28
/****** intuition.library/WBenchToBack ************************************* 
* 
*    NAME 
*	WBenchToBack -- Send the Workbench screen in back of all screens.
*
*    SYNOPSIS 
*	Success = WBenchToBack()
*	D0
*	
*	BOOL WBenchToBack( VOID );
*
*    FUNCTION 
*	Causes the Workbench screen, if it's currently opened, to go behind
*	all other screens.  This does not 'move' the screen up or down,
*	instead only affects the depth-arrangement of the screens. 
* 
*    INPUTS 
*	None 
* 
*    RESULT 
*	If the Workbench screen was opened, this function returns TRUE,
*	otherwise it returns FALSE. 
* 
*    BUGS 
* 
*    SEE ALSO 
*	WBenchToFront(), ScreenToFront()
****************************************************************************/ 
d234 2
a235 40
 
/****** intuition.library/OpenWorkBench ************************************ 
* 
*    NAME 
*	OpenWorkBench -- Open the Workbench screen.
*
*    SYNOPSIS 
*	WBScreen = OpenWorkBench()
*	D0
*
*	ULONG OpenWorkBench( VOID );
* 
*    FUNCTION 
*	This routine attempts to reopen the Workbench.  The actions taken are: 
*	    - general good stuff and nice things, and then return a non-null
*	      pointer to the Workbench screen.
*	    - find that something has gone wrong, and return NULL
* 
*	The return value, if not NULL, is indeed the address of the Workbench
*	screen, although you should not use it as such.  This is because the
*	Workbench may be closed by other programs, which can invalidate
*	the address at any time.  We suggest that you regard the return
*	value as a ULONG indication that the routine has succeeded, if
*	you pay any attention to it at all.
* 
*    INPUTS 
*	None 
* 
*    RESULT 
*	non-zero if Workbench screen opened successfully, or was already
*		opened 
*	zero if anything went wrong and the Workbench screen isn't out there 
* 
*    BUGS 
*	The name of this routine is spelled wrong: it ought to have been
*	OpenWorkbench().
*
*    SEE ALSO 
*	
****************************************************************************/ 
d288 1
a289 101
/****** intuition.library/GetScreenData ************************************ 
* 
*    NAME 
*	GetScreenData -- Get copy of a screen data structure.
*
*    SYNOPSIS 
*	Success = GetScreenData( Buffer, Size, Type, Screen ) 
*	D0                       A0      D0    D1    A1
*
*	BOOL GetScreenData( APTR, UWORD, UWORD, struct Screen * );
* 
*    FUNCTION 
*	This function copies into the caller's buffer data from a Screen
*	structure.  Typically, this call will be used to find the size, title
*	bar height, and other values for a standard screen, such as the
*	Workbench screen.
*
*	To get the data for the Workbench screen, one would call:
*	    GetScreenData(buff, sizeof(struct Screen), WBENCHSCREEN, NULL)
*
*	NOTE: if the requested standard screen is not open, this function
*	will have the effect of opening it.
*
*	This function has been useful for two basic types of things:
*	1) Determining information about the Workbench screen, in
*	   preparation for opening a window on it.
*	2) Attempts at discerning the user's preferences in a working
*	   screen, for "cloning" the Workbench modes and dimensions
*	   when opening a similar custom screen.
*
*	Providing compatibility with both of these goals has proven
*	difficult, as we introduce new display modes and screen scrolling
*	in V36.  Read carefully the somewhat involved exceptions we
*	elected to implement ...
*
*	Changes as of V36:
*
*	For V36 and later, the function LockPubScreen() is an improvement
*	over this function, in that it doesn't copy the screen data
*	but returns a pointer and a guarantee that the screen will not
*	be closed.
*
*	If the global public screen SHANGHAI mode is in effect (see
*	SetPubScreenModes() ), this function will actually report on
*	the default public screen, where "Workbench" windows will
*	actually open.
*
*	For V36 and later, this function does some "compatibility tricks"
*	when you inquire about the WBENCHSCREEN.  To keep programs from
*	"stumbling" into modes they don't understand, and because an NTSC
*	machine may be running a PAL Workbench or PRODUCTIVITY, for example,
*	the following "false" information is returned.
*
*	The Screen.ViewPort.Modes field will either be HIRES or HIRES+LACE
*	(with the SPRITES flag also set, as usual).  HIRES+LACE is
*	used if the display mode selected for the Workbench screen
*	is an interlaced screen of any type.
*	
*	The dimensions returned will be the *smaller* of the OSCAN_TEXT
*	dimensions for the returned mode, and the actual dimensions
*	of the Workbench screen.
*
*	EXCEPTION: For specific compatibility considerations, if the
*	Workbench is in one of the A2024 modes, the mode returned
*	in Screen.ViewPort.Modes will be HIRES+LACE (with perhaps
*	some "special" bits also set for future improvement), but
*	with dimensions equal to the actual A2024-mode Workbench screen.
*	This will favor programs which open windows on the A2024
*	Workbench, but will cause some problems for programs which
*	try to "clone" the Workbench screen using this function.
*
*	If you want the real information about the modern Workbench
*	screen, call LockPubScreen( "Workbench" ) and acquire its
*	display mode ID by inquiring of the actual ViewPort (using
*	graphics.library/GetVPModeID() ).
*
*	You may then use the information you get to clone as many of
*	the properties of the Workbench screen that you wish.
*
*	In the long run, it's probably better to provide your user
*	with a screen mode selection option, and skip all this.
* 
*    INPUTS 
*	Buffer = pointer to a buffer into which data can be copied
*	Size   = the size of the buffer provided, in bytes
*	Type   = the screen type, as specified in OpenWindow() (WBENCHSCREEN,
*	    CUSTOMSCREEN, ...)
*	Screen = ignored, unless type is CUSTOMSCREEN, which results only in
*	    copying 'size' bytes from 'screen' to 'buffer'
* 
*    RESULT 
*	TRUE if successful
*	FALSE if standard screen of Type 'type' could not be opened.
* 
*    BUGS 
*	You cannot support the new V36 display modes using this function.
* 
*    SEE ALSO 
*	OpenWindow(), LockPubScreen(), graphics.library/GetVPModeID(),
*	SetPubScreenModes(), OpenScreen()
****************************************************************************/ 
d389 2
a390 56
 
/****** intuition.library/CloseWorkBench ************************************ 
* 
*    NAME 
*	CloseWorkBench -- Closes the Workbench screen.
*
*    SYNOPSIS 
*	Success = CloseWorkBench() 
*	D0
*
*	LONG CloseWorkBench( VOID );
* 
*    FUNCTION 
*	This routine attempts to close the Workbench screen:
*       -   Test whether or not any applications have opened windows on the 
*           Workbench, and return FALSE if so.  Otherwise ... 
*       -   Clean up all special buffers 
*       -   Close the Workbench screen 
*       -   Make the Workbench program mostly inactive (it will still  
*           monitor disk activity) 
*       -   Return TRUE 
* 
*    INPUTS 
*	None 
* 
*    RESULT 
*	TRUE if the Workbench screen closed successfully 
*	FALSE if the Workbench was not open, or if it has windows
*	    open which are not Workbench drawers.
*
*   NOTES
*	This routine has been drastically rewritten for V36.
*	It is much more solid, although we haven't eliminated
*	all the problem cases yet.
* 
*    BUGS 
*	The name of this function is improperly spelled.  It ought
*	to have been CloseWorkbench().
*
*	It might be more convenient to have it return TRUE if the
*	Workbench wasn't opened when called.  The idea as it is now
*	is probably this: if you want to free up the memory of the 
*	Workbench screen when your program begins, you can call
*	CloseWorkBench().  The return value of that call indicates
*	whether you should call OpenWorkBench() when your program 
*	exits: if FALSE, that means either the the Workbench existed
*	but you could not close it, or that it wasn't around to
*	begin with, and you should not try to re-open it.
*
*	We would prefer that you provide a user selection to attempt
*	to open or close the Workbench screen from within your application,
*	rather than your making assumptions like these.
* 
*    SEE ALSO 
*	OpenWorkBench()
****************************************************************************/ 
@


38.6
log
@openScreenTagsOnly downcoded.  The way in which the WB screen was
ensured to be 640 x 200 doesn't work.  It must go into screens.c
instead.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.5 92/01/22 16:46:02 peter Exp Locker: peter $
d157 1
@


38.5
log
@WB screen is now ensured by Intuition to be 640x200 min.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.4 91/11/25 16:56:55 peter Exp Locker: peter $
d187 2
a188 2
	SA_Width,	imax(640,ism->ism_Width),
	SA_Height,	imax(200,ism->ism_Height),
a193 11

/* Quicky stub to convert from varargs to regargs.  Also supplies
 * a NULL NewScreen for you.
 */
struct Screen *
openScreenOnlyTags( firsttag )
{
    struct Screen *OpenScreenTagList();

    return( OpenScreenTagList( NULL, &firsttag ) );
}
@


38.4
log
@GetScreenData() was going through the database to check the screen's
property flags, but we cached those in NaturalDProperties.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.3 91/08/21 18:22:10 peter Exp Locker: peter $
d43 1
a43 1
/* changed to blank by jimm 11/5/85, after suggestions by many.  */
d45 2
d50 1
a50 24
 
struct ExtNewScreen WBenchNewScreen = 
{ 
    0,			/* NewScreen.LeftEdge = 0;	*/ 
    0,			/* NewScreen.TopEdge = 0;	*/ 
    STDSCREENWIDTH,	/* NewScreen.Width  (may correct later) */ 
    STDSCREENHEIGHT,	/* NewScreen.Height 		*/
    2,			/* NewScreen.Depth = 2; */ 
    /* real ones	*/
    0,			/* NewScreen.DetailPen = 0; */ 
    1,			/* NewScreen.BlockPen = 1; */ 
    HIRES,		/* NewScreen.ViewModes = HIRES; */ 
    WBENCHSCREEN,	/* NewScreen.Type = WBENCHSCREEN; */ 
    NULL, 		/* NewScreen.Font */
    WBSTitle,		/* NewScreen.DefaultTitle */
    NULL,		/* NewScreen.Gadgets = NULL; */ 
    NULL,		/* NewScreen.CustomBitMap = NULL; */ 
    NULL		/* NewScreen.Extension filled later	*/
}; 
 
struct Screen *OpenScreen(); 
struct Task *FindTask(); 
 
 
d147 11
a157 22
/*
 * extra parameters for workbench newscreen
 * (copied to stack)
 */
UBYTE	WBPUBNAME[] = "Workbench";

/*
 * be careful with these: they are indexed by
 * these hardcoded magic definitions for integers in openWBPS()
 */
#define WBTAG_DISPLAYID	1
#define WBTAG_PENS	4

struct TagItem nsext_rom[] = {
    {SA_PubName, (ULONG) WBPUBNAME},	/* nsext[ 0 ] */
    {SA_DisplayID, 0},			/* nsext[ 1 ] */
    {SA_Overscan, OSCAN_TEXT},		/* nsext[ 2 ] */
    {SA_SysFont, 1},			/* nsext[ 3 ] */
    {SA_Pens, NULL},			/* nsext[ 4 ] */	
    {SA_FullPalette, TRUE},		/* nsext[ 5 ] */
    {SA_SharePens, TRUE},		/* nsext[ 6 ] */
    {TAG_DONE, 0},			/* nsext[ 7 ] */
a159 2


d164 2
a166 1
    struct Screen	*screen;
d168 5
a172 20
    /* 
     * init with values from rom, 
     * fill in where needed
     */
    struct ExtNewScreen	ns;
    struct TagItem	nsext[ ALENGTH( nsext_rom ) ];

    ns = WBenchNewScreen;
    CopyMem( nsext_rom, nsext, sizeof ( nsext_rom ) );

    /**** set up data structure for extra NewScreen specification data	****/
    XNS(&ns)->Extension = nsext;
    ns.Type |= NS_EXTENDED;
    if ( TESTFLAG( ism->ism_Control, WBAUTOSCROLL ) )
    {
	ns.Type |= AUTOSCROLL;
    }

    /**** set up values from WBPrefs ****
     * ZZZ: Note that NO validity checking is done here.
a173 1
     *	- at least 640x200
d179 5
a183 1
    /* ns.Font = NULL; */
d185 9
a193 11
    nsext[ WBTAG_DISPLAYID ].ti_Data = (ULONG) ism->ism_DisplayID;
    DOWB( printf( "openWBP: finding displayID: %ld\n", nsext[WBTAG_DISPLAYID].ti_Data ));
    ns.ViewModes = 0;	/* filled in by OpenScreen()	*/

    ns.Width = ism->ism_Width;
    ns.Height = ism->ism_Height;
    nsext[ WBTAG_PENS ].ti_Data =  (ULONG) (( (ns.Depth = ism->ism_Depth) >1 )?
	fourColorPens: twoColorPens);

    DOWB( printf("wb prefs dimensions %ld/%ld depth %ld\n",
	ns.Width, ns.Height, ns.Depth ) );
d195 7
a201 1
    screen = OpenScreen( &ns );
d203 2
a204 2
    return ( screen );
} 
a205 1
 
@


38.3
log
@Workbench screen now sets {SA_SharePens,TRUE}.  Replaced some magic
numbers with #defines.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.2 91/07/10 18:02:49 peter Exp Locker: peter $
a584 2
	    struct DisplayInfo	dinfo;
	    CPTR		drecord;
d587 2
a588 1
	     * the IS_LACE property of the WB screen's real mode
d591 2
a592 6

	    if ( ( drecord = FindDisplayInfo( XSC(ptr)->NaturalDisplayID ) )
		&& GDID( drecord, &dinfo, sizeof( dinfo ), DTAG_DISP )
		&& (TESTFLAG( dinfo.PropertyFlags, DIPF_IS_LACE )
		    ||
		    TESTFLAG( dinfo.PropertyFlags, DIPF_IS_PANELLED ) ))
@


38.2
log
@Cleanup of Preferences-related names to improve legibility.
Removed SA_ErrorCode since only used during debugging.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.1 91/06/19 18:07:29 peter Exp Locker: peter $
d176 1
a176 1
 * hardcoded integers in openWBPS()
d178 3
d182 10
a191 2
    {SA_PubName, (ULONG) WBPUBNAME},
    {SA_DisplayID, 0},
a192 7
    {SA_Overscan, OSCAN_TEXT},
    {SA_SysFont, 1},
    {SA_Pens, NULL},	/* because I want full 3D look	*/
    {SA_FullPalette, TRUE},
    {TAG_DONE, 0},
};
 
d230 2
a231 2
    nsext[ 1 ].ti_Data = (ULONG) ism->ism_DisplayID;
    DOWB( printf( "openWBP: finding displayID: %ld\n", nsext[1].ti_Data ));
d236 1
a236 1
    nsext[ 4 ].ti_Data =  (ULONG) (( (ns.Depth = ism->ism_Depth) >1 )?
@


38.1
log
@Removed obsolete code.
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 38.0 91/06/12 14:35:10 peter Exp Locker: peter $
d107 2
a108 1
struct IWBPrefs DefaultWBPrefs = {
d110 2
a111 1
    {STDSCREENWIDTH, STDSCREENHEIGHT},
d123 1
a123 1
    struct IWBPrefs *realone;
d133 1
a133 1
    if ( ! ( wbscreen = openWBPrefsScreen( realone = &IBase->CoolWBPrefs ) ) )
d139 1
a139 1
	    wbscreen = openWBPrefsScreen( realone = &DefaultWBPrefs );
d181 1
a181 1
    {SA_ErrorCode, 0},
d191 2
a192 2
openWBPrefsScreen( wbp )
struct IWBPrefs	*wbp;
a202 1
    DOWB( LONG		errorcode; )
d210 1
a210 1
    if ( TESTFLAG( wbp->iwb_Control, WBAUTOSCROLL ) )
d226 1
a226 1
    nsext[ 1 ].ti_Data = (ULONG) wbp->iwb_DisplayID;
a227 1
    DOWB( nsext[ 2 ].ti_Data = (LONG) &errorcode );
d230 3
a232 3
    ns.Width = wbp->iwb_Dimensions.X;
    ns.Height = wbp->iwb_Dimensions.Y;
    nsext[ 5 ].ti_Data =  (ULONG) (( (ns.Depth = wbp->iwb_Depth) >1 )?
a238 1
    DOWB( if ( ! screen ) printf("openWB failure: %ld\n", errorcode ) );
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: wbench.c,v 36.45 91/04/16 15:49:38 peter Exp $
a48 4
#if 0
UBYTE WBPortMessage[] = "WBenchPort"; 
#endif
 
a54 3
#ifdef MONO_WB
	1,
#else
a55 3
#endif

#if 1
a58 6
#else
    /* test ones	*/
    2,
    3,
#endif

a387 6
#if 0
    struct IntuitionBase	*IBase = fetchIBase();
    struct IntuiMessage *wbmsg;
    struct MsgPort	*CreatePort();
#endif
 
a404 22

#if 0

	/* jimm: apr 10, 1990
	 * needed to make an asynchronous version of this
	 * so that I won't deadlock is I openwb in response
	 * to the Workbench task calling me (for openwindow,
	 * lockpubscreen, ... )
	 */
	Forbid();	/* prevent AlohaWorkBench	*/
	if ( IBase->WBPort && 
	    (wbmsg = (struct IntuiMessage *)AllocMem(
		sizeof(struct FatIntuiMessage), MEMF_PUBLIC | MEMF_CLEAR)))
	{
	    initWBMessage( wbmsg, &IBase->WBReplyPort, WBENCHOPEN );
	    PutMsg( IBase->WBPort, wbmsg );

	    DOWB2( printf(" asynch wbmessage away\n") );
	}
	Permit();
	DOWB2( else printf("no send: no port\n" ); )
#endif
a599 3
#if 0		/* don't need to mask this like in setScreenDisplayID */
	    ptr->ViewPort.Modes = (displayID & 0xffff) | SPRITES;
#else
a609 1
#endif
a708 48
 
#if 0
communicateWBench(code) 
USHORT code; 
{ 
    struct IntuitionBase *IBase = fetchIBase();

    DCOMMWB( printf("commWB, code %lx\n", code) );
 
    if (IBase->WBPort == NULL)
    {
	DCOMMWB( printf("WBPort is NULL!\n") );
	return; 
    }
 
    if (IBase->iqd_FNKUHDPort == NULL) 
	{ 
	DCOMMWB( printf("create FNKUHD\n") );
	IBase->iqd_FNKUHDPort 
#if 1
		= (struct MsgPort *)CreateMsgPort(); 
#else
		= (struct MsgPort *)CreatePort(&WBPortMessage[0], 0); 
#endif
	IBase->iqd_FNKUHDPort->mp_Flags = PA_SIGNAL; 
	IBase->WBMessage.ExecMessage.mn_ReplyPort 
		= IBase->iqd_FNKUHDPort;
	} 
 
    IBase->iqd_FNKUHDPort->mp_SigBit = AllocSignal(-1); 
    IBase->iqd_FNKUHDPort->mp_SigTask = FindTask(0); 
    IBase->WBMessage.ExecMessage.mn_Node.ln_Type = NT_REPLYMSG; 
    IBase->WBMessage.Class = WBENCHMESSAGE; 
    IBase->WBMessage.Code = code; 
 
    DCOMMWB( printf("commWB putmsg\n") );
    PutMsg(IBase->WBPort, &IBase->WBMessage); 

    /* jimm: 7/30/86: was safeWait, which was a noop */
    Wait(1 << IBase->iqd_FNKUHDPort->mp_SigBit); 
    GetMsg(IBase->iqd_FNKUHDPort); 
    DCOMMWB( printf("commWB replymsg\n") );
 
    FreeSignal(IBase->iqd_FNKUHDPort->mp_SigBit); 
} 
#endif
 
 
@
