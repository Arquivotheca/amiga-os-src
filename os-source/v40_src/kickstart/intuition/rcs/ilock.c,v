head     38.8;
branch   ;
access   ;
symbols  V40_85:38.8 V40_71:38.8 V40_68:38.8 V40_65:38.8 V40_47:38.8 V40_45:38.8 V40_37:38.8 V40_34:38.8 V40_29:38.8 V39_2415:38.8 V39_2369:38.8 V39_2339:38.8 V39_2332:38.8 V39_2275:38.8 V39_2256:38.8 V39_2210:38.8 V39_2192:38.8 V39_2084:38.8 V39_2082:38.8 V39_2076:38.8 V39_2073:38.8 V39_2058:38.8 V39_2051:38.8 V39_2031:38.8 V39_2017:38.8 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.8 V39_1805:38.7 V39_1783:38.7 V39_1695:38.7 V39_1621:38.7 V39_1620:38.7 V39_1508:38.7 V39_1485:38.7 V39_1461:38.6 V39_1458:38.6 V39_1456:38.6 V39_1405:38.5 V39_1368:38.5 V39_1360:38.5 V39_1324:38.4 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.1 V39_702:38.1 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.8
date     92.07.28.15.13.32;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.06.18.18.08.48;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.06.03.17.28.17;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.05.27.11.52.04;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.05.21.17.38.36;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.05.15.14.05.02;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.01.15.05.47;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.03.19.10.52.53;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.21.06;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.8
log
@Added some comments.
@
text
@/*** ilock.c **************************************************************
 *
 * intuition locking routines
 *
 *  $Id: ilock.c,v 38.7 92/06/18 18:08:48 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"

/* Time for a little discussion about locks:
 *
 * Intuition routinely violates its own locking protocol.  During menu
 * state or window size/dragging state, the system is left with layers
 * locked, but lesser locks like the ISTATELOCK are not held between
 * input events.  In fact, the ISTATELOCK cannot be held during that
 * time.  When a new event comes in, input.device must obtain the
 * ISTATELOCK even though it holds all the layer locks.
 *
 * This behavior is strictly necessary, and there is a lot of implicit
 * stuff going on to keep this from being a problem.  How this works
 * without deadlocking goes something like this:
 *
 * The input device task may exceptionally obtain the ISTATELOCK in a
 * manner which violates the locking order.  This happens when every
 * input token is processed during menu and window size/drag states.
 * This creates a very dangerous situation, since it exposes a deadlock
 * possibility.
 *
 * Any other task (and that includes other tasks executing under the
 * state machine) must respect locking order.  Further, when Intuition is
 * in its dangerous state, other tasks must NEVER obtain any of the layer
 * locks during the time that the ISTATELOCK is held.  Thus, most
 * Intuition tokens must be deferred during menu and window size/drag
 * states.
 *
 */

/* Lock-debugging generates enforcer hits, alerts, and/or descriptive messages
 * when a problem is found.
 * Set LOCKDEBUG to 1 in lockstub.asm to enable the assembler part.
 * Set LOCKDEBUG to 1 in intuall.h to enable light lock-debugging,
 *     which generates enforcer hits when a problem is found.
 * Set LOCKDEBUG to 2 in intuall.h to enable full lock-debugging,
 *     which generates enforcer hits and serial output when
 *     a problem is found.
 *
 * The macros DP(), DE(), and DA() control whether printing, enforcer hits,
 * or alerts happen, respectively.  These are set for you by the level of
 * LOCKDEBUG.
 *
 * 0x000y000z	Bad order: attempting to lock 'y', already hold lock 'z'
 * 0x0000000y	CheckLock: assertLock() lock 'y' not held, would be illegal
 * 0x8000000y	CheckLock: assertLock() lock 'y' not held
 * 0x4000000y	LockFree: Lock 'y' held when it is required not to be
 */

#if LOCKDEBUG==2
#define DP(x)	x
#define DE(x)	x
#define DA(x)	;
#endif

#if LOCKDEBUG==1
#define DP(x)	;
#define DE(x)	x
#define DA(x)	;
#endif

#if LOCKDEBUG==0
#define DP(x)	;
#define DE(x)	;
#define DA(x)	;
#endif

/* Macro to write 'x' to location zero.
 * Does nothing if DE() is ";"
 */
#define ENFORCER(x)	DE( *( ( ULONG * ) 0 ) = (x) )

struct Task *FindTask();

lockIBase( isem )
int	isem;
{
    struct IntuitionBase *IBase = fetchIBase();

#if LOCKDEBUG
    {
	struct Task *mytask = FindTask( NULL );

	/* Test for proper locking order.  However, we allow bad-order
	 * locking of the ISTATELOCK by input.device.  This happens
	 * during menu-state and window size/drag state.
	 */
	if ( ( isem != ISTATELOCK ) || ( mytask != IBase->InputDeviceTask ) )
	{
	    int i;

	    if (mytask == IBase->ISemaphore[isem].ss_Owner)
	    {
		goto DONTBITCH;	/* already had lock */
	    }

	    if (i = badOrder(mytask, isem))
	    {
		DP( printf( "Bad Locking order: task %lx; lock: %ld; conflict :%ld\n",
		    mytask, isem, i) );
		ENFORCER( (isem<<16) + i );
		DA( Alert( AN_ISemOrder ) );
		DP( kdebug() );
	    }
	}
    }
DONTBITCH:
#endif

    ObtainSemaphore(&IBase->ISemaphore[isem]);
    if ( isem == VIEWCPRLOCK )
    {
	ObtainSemaphore( IBase->GfxBase->ActiViewCprSemaphore );
    }
}

unlockIBase(isem)
int	isem;
{
    struct IntuitionBase *IBase = fetchIBase();

#if LOCKDEBUG

    if ( FindTask(0) != IBase->ISemaphore[isem].ss_Owner )
    {
	DP( printf("Unlocking, but doesn't own lock %ld!!!\n", isem) );
	DP( kdebug() );
    }
#endif

    if ( isem == VIEWCPRLOCK )
    {
	ReleaseSemaphore( IBase->GfxBase->ActiViewCprSemaphore );
    }
    ReleaseSemaphore(&IBase->ISemaphore[isem]);
}

#if LOCKDEBUG

/* supplant LockLayer...() with these
 * things which check locking order when LOCKDEBUG
 * is enabled
 */

fakeLockLayers(x)
APTR x;
{
    lockIBase(LAYERINFOLOCK);
    lockIBase(LAYERROMLOCK);
    realLockLayers(x);
}
fakeUnlockLayers(x)
APTR x;
{
    unlockIBase(LAYERROMLOCK);
    unlockIBase(LAYERINFOLOCK);
    realUnlockLayers(x);
}
fakeLockLayerInfo(x)
APTR x;
{
    lockIBase(LAYERINFOLOCK);
    realLockLayerInfo(x);
}
fakeUnlockLayerInfo(x)
APTR x;
{
    unlockIBase(LAYERINFOLOCK);
    realUnlockLayerInfo(x);
}
fakeLockLayerRom(x)
APTR x;
{
    lockIBase(LAYERROMLOCK);
    realLockLayerRom(x);
}
fakeUnlockLayerRom(x)
APTR x;
{
    unlockIBase(LAYERROMLOCK);
    realUnlockLayerRom(x);
}

/* WARN if 'sem' is not held	*/
CheckLock(str, sem)
UBYTE	*str;
{
    if ( badOrder( FindTask(0), sem ))
    {
	DP( printf("LOCK WOULD BE ILLEGAL-- %s, lock %ld\n", str, sem) );
	DP( dumpLocks("here's why: ") );
	ENFORCER( sem );
	DA( Alert( AN_NoISem ) );
	DP( kdebug() );
    }
    DP( printf("could get lock -- %s, lock %ld\n", str, sem) );
}

/* WARN if 'sem' would be in badOrder */
AssertLock(str, sem)
UBYTE	*str;
{
    struct IntuitionBase *IBase = fetchIBase();

    if ( FindTask(0) != IBase->ISemaphore[sem].ss_Owner )
    {

	/* ISTATELOCK is a substitute for IBASELOCK	*/
	if ( ( sem == IBASELOCK ) &&
	    ( FindTask(0) == IBase->ISemaphore[ ISTATELOCK ].ss_Owner) )
	{
	    ;	/* do nothing */
	}
	else
	{
	    /* During Intuition's init, we don't want complaints about
	     * unobtained locks, unless someone else is the owner.
	     * initIntuition() sets IDF_LOCKDEBUG as it exits.
	     */
	    if ( ( TESTFLAG( IBase->DebugFlag, IDF_LOCKDEBUG ) ) ||
		( IBase->ISemaphore[sem].ss_Owner ) )
	    {
		DP( printf("DON'T HAVE LOCK-- %s, lock %ld\n", str, sem) );
		checkLock( str, sem );
		DP( dumpLocks("but I do have ...") );
		ENFORCER( 0x80000000|sem );
		DA( Alert( AN_NoISem ) );
		DP( kdebug() );
	    }
	}
    }
    /* else { DP( printf("have lock -- %s, lock %ld\n", str, sem) ); } */
}

/* WARN if 'sem' is held */
LockFree(str, sem)
UBYTE	*str;
{
    struct IntuitionBase *IBase = fetchIBase();

    /* ISTATELOCK is a substitute for IBASELOCK	*/
    if ( ( FindTask(0) == IBase->ISemaphore[sem].ss_Owner ) ||
	( ( sem == IBASELOCK ) &&
	    ( FindTask(0) == IBase->ISemaphore[ ISTATELOCK ].ss_Owner) ) )
    {
	DP( printf("HAVE UNWANTED LOCK-- %s, lock %ld\n", str, sem) );
	DP( dumpLocks("I do have ...") );
	ENFORCER( 0x40000000|sem );
	DP( kdebug() );
    }
    /* else { DP( printf("have lock -- %s, lock %ld\n", str, sem) ); } */
}

badOrder(task, sem)
struct Task *task;
int sem;
{
    int i;
    BOOL  thereyet = FALSE;
    struct IntuitionBase *IBase = fetchIBase();

    for (i = 0; i < NUMILOCKS; i++)
    {
	if (! thereyet)
	{
	    thereyet = (i == sem);
	}
	else	/* past point where you should have any locks */
	{
	    if (task == IBase->ISemaphore[i].ss_Owner) return (i);
	}
    }

    /* So we got here, we think the order is good.  However,
     * if we're in menu-state or window size/drag state, then it's
     * illegal for anyone but input.device to get any of the layer locks
     * if the ISTATELOCK is held by us.
     */

    if ( ( ( IBase->CurrentState == sMenu ) || ( IBase->CurrentState == sWSizeDrag ) ) &&
	( task != IBase->InputDeviceTask ) &&
	( task == IBase->ISemaphore[ISTATELOCK].ss_Owner ) &&
	( ( sem == LAYERROMLOCK ) || ( sem == LAYERINFOLOCK ) ) )
    {
	return( 0xFFFF );
    }

    return (0);
}

#endif
/*** intuition.library/LockIBase ***/


#if 0 /* DOWNCODED */
ULONG LockIBase(lock)
{
    if (!lock)	/* original usage: lock both ISTATE and LISTS */
    {
	LOCKSTATE();
	LOCKIBASE();
    }
    else lockIBase(lock);
    return (lock);
}
#endif
/*** intuition.library/UnlockIBase ***/


#if 0 /* DOWNCODED */
UnlockIBase(lock)
{
    if (!lock)	/* original usage: lock both ISTATE and LISTS */
    {
	UNLOCKIBASE();
	UNLOCKSTATE();
    }
    else unlockIBase(lock);
}
#endif

@


38.7
log
@Added comments about ISTATELOCK.  Modified lock-debugging code
to be smarter about ISTATELOCK violation.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.6 92/06/03 17:28:17 peter Exp Locker: peter $
d54 5
@


38.6
log
@Changes to accomodate new lock.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.5 92/05/27 11:52:04 peter Exp Locker: peter $
d14 28
d81 1
a81 1
lockIBase(isem)
a86 2
    /* Test for proper locking order */
    if ( isem != ISTATELOCK )	/* give ISTATE lock a break */
d88 1
a88 2
    struct Task *mytask;
    int i;
d90 7
a96 1
	mytask = FindTask(0);
d98 4
a101 4
	if (mytask == IBase->ISemaphore[isem].ss_Owner)
	{
	    goto DONTBITCH;	/* already had lock */
	}
d103 8
a110 7
	if (i = badOrder(mytask, isem))
	{
	    DP( printf( "Bad Locking order: task %lx; lock: %ld; conflict :%ld\n",
		mytask, isem, i) );
	    ENFORCER( (isem<<16) + i );
	    DA( Alert( AN_ISemOrder ) );
	    DP( kdebug() );
a143 9
#if 0
ULONG safeWait(signal)	/* for debugging help */
    ULONG	signal;
{
    return (Wait(signal));
}
#endif


d278 14
@


38.5
log
@LOCKDEBUG of 1 had caused no output to occur.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.4 92/05/21 17:38:36 peter Exp Locker: peter $
d85 1
a85 1
    if ( isem == VIEWLOCK )
d105 1
a105 1
    if ( isem == VIEWLOCK )
@


38.4
log
@Intuition gets ActiViewCprSemaphore.  Now call Alert() instead of
execAlert().
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.3 92/05/15 14:05:02 peter Exp Locker: peter $
d36 1
a36 1
#define DE(x)	;
d214 19
@


38.3
log
@When lock-debugging finds a problem, we now generate an enforcer hit.
Enforcer hits/serial printing can now be individually controlled
with macros.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.2 92/04/01 15:05:47 peter Exp Locker: peter $
d77 1
a77 1
	    DA( execAlert( AN_ISemOrder ) );
d85 4
d105 4
d176 1
a176 1
	DA( execAlert( AN_NoISem ) );
d210 1
a210 1
		DA( execAlert( AN_NoISem ) );
@


38.2
log
@Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.1 92/03/19 10:52:53 peter Exp Locker: peter $
d14 19
a32 1
#if LOCKDEBUG
d34 5
a38 4
WORD	lockpriority[NUMILOCKS] = {
    ISTATELOCK, LAYERINFOLOCK, GADGETSLOCK,
    LAYERROMLOCK, IBASELOCK, VIEWLOCK, RPLOCK
    };
d40 4
d46 6
a51 1
#define DQUIET	return;
d65 1
a65 1
	mytask = (struct Task *) FindTask(0);
d74 5
a78 3
	    printf( "Bad Locking order: task %lx; lock: %ld; conflict :%ld\n",
		mytask, isem, i);
	    kdebug();
d94 1
a94 1
    if ((struct Task *) FindTask(0) != IBase->ISemaphore[isem].ss_Owner)
d96 2
a97 2
	printf("Unlocking, but doesn't own lock %ld!!!\n", isem);
	kdebug();
d160 1
a160 1
checkLock(str, sem)
a162 2
    DQUIET;

d165 5
a169 3
	printf("LOCK WOULD BE ILLEGAL-- %s, lock %ld\n", str, sem);
	dumpLocks("here's why: ");
	kdebug();
d171 1
a171 1
    printf("could get lock -- %s, lock %ld\n", str, sem);
d175 1
a175 1
assertLock(str, sem)
d178 1
a178 1
    DQUIET;
d180 1
a180 2
    if ( ((struct Task *) FindTask(0))	
	!= fetchIBase()->ISemaphore[sem].ss_Owner)
d183 3
a185 3
	/* ISTATELOCK is a substitue for IBASELOCK	*/
	if ( ( sem == IBASELOCK )  && ( ((struct Task *) FindTask(0))	
	    == fetchIBase()->ISemaphore[ ISTATELOCK ].ss_Owner) )
d191 14
a204 4
	    printf("DON'T HAVE LOCK-- %s, lock %ld\n", str, sem);
	    checkLock( str, sem );
	    dumpLocks("but I do have ...");
	    kdebug();
d207 1
a207 1
    /* else { printf("have lock -- %s, lock %ld\n", str, sem); } */
d222 1
a222 1
	    thereyet = (lockpriority[i] == sem);
@


38.1
log
@Downcoded most locking functions into downcode.asm.
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 38.0 91/06/12 14:21:06 peter Exp $
d195 1
a196 49
/****** intuition.library/LockIBase *************************************
*
*    NAME
*	LockIBase -- Invoke semaphore arbitration of IntuitionBase.
*
*    SYNOPSIS
*	Lock = LockIBase( LockNumber )
*	D0                D0
*
*	ULONG LockIBase( ULONG );
*
*    FUNCTION
*	Grabs Intuition internal semaphore so that caller may examine
*	IntuitionBase safely.  This function is not a magic "fix all my
*	race conditions" panacea.
*
*	The idea here is that you can get the locks Intuition needs before
*	such IntuitionBase fields as ActiveWindow and FirstScreen are
*	changed, or linked lists of windows and screens are changed.
*
*	Do Not Get Tricky with this entry point, and do not hold these locks
*	for long, as all Intuition input processing will wait for you to
*	surrender the lock by a call to UnlockIBase().
*
*	NOTE WELL: A call to this function MUST be paired with a subsequent
*	call to UnlockIBase(), and soon, please.
*
*	NOTE WELL: Do not call any Intuition functions (nor any graphics,
*	layers, dos, or other high-level system function) while
*	holding this lock.
*
*    INPUTS
*	A long unsigned integer, LockNumber, specifies which of Intuition's
*	internal locks you want to get.  This parameter should be zero for all
*	forseeable uses of this function, which will let you examine active
*	fields and linked lists of screens and windows with safety.
*
*    RESULT
*	Returns another ULONG which should be passed to UnlockIBase() to
*	surrender the lock gotten by this call.
*
*    BUGS
*	This function must not be called while holding any other system locks
*	such as layer or LayerInfo locks.
*
*    SEE ALSO
*	UnlockIBase(), layers.library/LockLayerInfo(),
*	exec.library/ObtainSemaphore()
*****************************************************************************/
d210 1
a211 32
/****** intuition.library/UnlockIBase *************************************
*
*    NAME
*	UnlockIBase -- Surrender an Intuition lock gotten by LockIBase().
*
*    SYNOPSIS
*	UnlockIBase( Lock )
*		     A0
*
*	VOID UnlockIBase( ULONG );
*
*    FUNCTION
*	
*	Surrenders lock gotten by LockIBase().
*
*	Calling this function when you do not own the specified lock will
*	immediately crash the system.
*
*    INPUTS
*	The value returned by LockIBase() should be passed to this function,
*	to specify which internal lock is to be freed.
*
*	Note that the parameter is passed in A0, not D0, for historical reasons.
*
*    RESULT
*	None
*
*    BUGS
*
*    SEE ALSO
*	LockIBase()
*****************************************************************************/
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: ilock.c,v 36.12 91/02/12 18:12:25 peter Exp $
a24 38
/* this saves rom space as a function */
LOCKSTATE()
{
    lockIBase(ISTATELOCK);
}

UNLOCKSTATE()
{
    unlockIBase(ISTATELOCK);
}

#if NOISM
/* jimm: last minute deadlock protection.
 * problem is: Open/CloseWindow get STATELOCK,
 * wait for layer(info).  WB (dragging icon) has
 * layers, indirectly waiting for intuition,
 * which is waiting for STATELOCK
 *
 * BULLSHIT: doesn't work, anyway, for window to front.
 */
spinLock1(linfo)
struct Layer_Info *linfo;
{
    
    FOREVER
    {
	LOCKSTATE();
	if (AttemptSemaphore(&linfo->Lock)) break;
	UNLOCKSTATE();
	WaitTOF();
    }
#if LOCKDEBUG
    lockIBase(LAYERINFOLOCK);
    /* keep my tracking semaphores in sync (only used for LInfo) */
#endif
}
#endif

d245 2
d257 1
d291 2
d302 1
@
