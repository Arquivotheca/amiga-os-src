head     38.0;
branch   ;
access   ;
symbols  V40_85:38.0 V40_71:38.0 V40_68:38.0 V40_65:38.0 V40_47:38.0 V40_45:38.0 V40_37:38.0 V40_34:38.0 V40_29:38.0 V39_2415:38.0 V39_2369:38.0 V39_2339:38.0 V39_2332:38.0 V39_2275:38.0 V39_2256:38.0 V39_2210:38.0 V39_2192:38.0 V39_2084:38.0 V39_2082:38.0 V39_2076:38.0 V39_2073:38.0 V39_2058:38.0 V39_2051:38.0 V39_2031:38.0 V39_2017:38.0 V39_2012:38.0 V39_1985:38.0 V39_1933:38.0 V39_1819:38.0 V39_1805:38.0 V39_1783:38.0 V39_1695:38.0 V39_1621:38.0 V39_1620:38.0 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.0
date     91.06.12.14.25.49;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@/* kstuff.c -- fancier stuff like kprintf()
 * $Id: kstuff.c,v 36.7 90/04/19 18:13:13 jimm Exp $
 */

#include "intuall.h"

kdebug_hook()
{
    struct IntuitionBase	*IBase = fetchIBase();

    kprintf("\nIBase Debug flag at %lx\n", &IBase->DebugFlag );
    kprintf("Flag values: \n");
    kprintf("\tsprite debugging on: %lx\n", IDF_SPRITE );
    kprintf("\tdamage pattern and delay: %lx\n", IDF_BPATTERN );
    kprintf("\tdamage debug pause: %lx\n", IDF_BPAUSE );
    kprintf("\tgeneral debug pause: %lx\n", IDF_PAUSE );
    kprintf(
"New DebugFlag value (in decimal, current %ld, default 0, ignore the echo):",
	IBase->DebugFlag );

    IBase->DebugFlag = kgetnum();
    kprintf("\nnew value (decimal %ld hex %lx)\n",
	IBase->DebugFlag, IBase->DebugFlag );
}

kpause( str )
char	*str;
{
    kprintf("\n%s  (press any key) ", str );
    kgetchar();
    kprintf( "\n" );
}


/*
 * kprintf's string, getchars back a response
 */
BOOL
kquery( str )
char	*str;
{
    int		response;
    BOOL	retval;

    kprintf("%s [y]: ", str );

    response = kgetchar();
    kprintf("\n");
    retval =  ( response == 'y' || response == 'Y' || response == '\r' );
    /* kprintf("response is: %lx, retval = %ld \n", response, retval ); */
    
    return ( retval );
}

/* if appropriate DebugFlag set, will pause and ask if you want to Debug()*/
kdebug()
{
    if ( TESTFLAG( fetchIBase()->DebugFlag, IDF_PAUSE ) )
    {
	if ( kquery( "debug? (n)" ) ) Debug();
    }
}
@
