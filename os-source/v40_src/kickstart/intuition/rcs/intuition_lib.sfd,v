head     38.16;
branch   ;
access   ;
symbols  V40_85:38.16 V40_71:38.16 V40_68:38.16 V40_65:38.16 V40_47:38.16 V40_45:38.16 V40_37:38.16 V40_34:38.16 V40_29:38.16 V39_2415:38.16 V39_2369:38.16 V39_2339:38.16 V39_2332:38.16 V39_2275:38.16 V39_2256:38.16 V39_2210:38.16 V39_2192:38.16 V39_2084:38.16 V39_2082:38.16 V39_2076:38.16 V39_2073:38.15 V39_2058:38.15 V39_2051:38.15 V39_2031:38.15 V39_2017:38.15 V39_2012:38.15 V39_1985:38.15 V39_1933:38.15 V39_1819:38.15 V39_1805:38.14 V39_1783:38.14 V39_1695:38.14 V39_1621:38.14 V39_1620:38.14 V39_1508:38.14 V39_1485:38.14 V39_1461:38.14 V39_1458:38.14 V39_1456:38.14 V39_1405:38.13 V39_1368:38.13 V39_1360:38.13 V39_1324:38.13 V39_1147:38.13 V39_1143:38.13 V39_1141:38.13 V39_1120:38.13 V39_1116:38.13 V39_1104:38.13 V39_1100:38.13 V39_1078:38.13 V39_1073:38.13 V39_757:38.10 V39_702:38.9 V39_557:38.5 V39_553:38.5 V39_551:38.5 V39_510:38.5 V39_495:38.5 V39_416:38.3 V39_383:38.3 V39_371:38.3 V39_336:38.3 V39_323:38.3 V39_295:38.2 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.16
date     92.08.28.13.05.02;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.07.28.15.13.45;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.03.17.30.36;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.04.09.16.23.01;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.04.07.17.51.59;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.02.21.39.13;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.03.26.16.38.18;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.03.24.11.54.56;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.23.11.52.09;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.21.14.50.23;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.18.11.48.54;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.20.12.13.56;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.17.17.13.12;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.22.16.41.52;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.11.13.43.10;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.12.13.18;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.23.26;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.16
log
@Added missing includes.
@
text
@==id $Id: intuition_lib.sfd,v 38.15 92/07/28 15:13:45 peter Exp Locker: peter $
* "intuition.library"
==base _IntuitionBase
==include <intuition/intuition.h>
==include <intuition/classes.h>
==include <intuition/cghooks.h>
==include <intuition/classusr.h>
==bias 30
==public
* Public functions OpenIntuition() and Intuition() are intentionally
* not documented.
VOID OpenIntuition() ()
VOID Intuition( struct InputEvent *iEvent ) (A0)
UWORD AddGadget( struct Window *window, struct Gadget *gadget, UWORD position )
	(A0,A1,D0)
BOOL ClearDMRequest( struct Window *window ) (A0)
VOID ClearMenuStrip( struct Window *window ) (A0)
VOID ClearPointer( struct Window *window ) (A0)
BOOL CloseScreen( struct Screen *screen ) (A0)
VOID CloseWindow( struct Window *window ) (A0)
LONG CloseWorkBench() ()
VOID CurrentTime( ULONG *seconds, ULONG *micros ) (A0,A1)
BOOL DisplayAlert( ULONG alertNumber, UBYTE *string, UWORD height ) (D0,A0,D1)
VOID DisplayBeep( struct Screen *screen ) (A0)
BOOL DoubleClick( ULONG sSeconds, ULONG sMicros, ULONG cSeconds, ULONG cMicros )
	(D0,D1,D2,D3)
VOID DrawBorder( struct RastPort *rp, struct Border *border,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
VOID DrawImage( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
VOID EndRequest( struct Requester *requester, struct Window *window ) (A0,A1)
struct Preferences *GetDefPrefs( struct Preferences *preferences, WORD size )
	(A0,D0)
struct Preferences *GetPrefs( struct Preferences *preferences, WORD size )
	(A0,D0)
VOID InitRequester( struct Requester *requester ) (A0)
struct MenuItem *ItemAddress( struct Menu *menuStrip, UWORD menuNumber ) (A0,D0)
BOOL ModifyIDCMP( struct Window *window, ULONG flags ) (A0,D0)
VOID ModifyProp( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, UWORD flags,
	UWORD horizPot, UWORD vertPot, UWORD horizBody, UWORD vertBody )
	(A0,A1,A2,D0,D1,D2,D3,D4)
VOID MoveScreen( struct Screen *screen, WORD dx, WORD dy ) (A0,D0,D1)
VOID MoveWindow( struct Window *window, WORD dx, WORD dy ) (A0,D0,D1)
VOID OffGadget( struct Gadget *gadget, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID OffMenu( struct Window *window, UWORD menuNumber ) (A0,D0)
VOID OnGadget( struct Gadget *gadget, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID OnMenu( struct Window *window, UWORD menuNumber ) (A0,D0)
struct Screen *OpenScreen( struct NewScreen *newScreen ) (A0)
struct Window *OpenWindow( struct NewWindow *newWindow ) (A0)
ULONG OpenWorkBench() ()
VOID PrintIText( struct RastPort *rp, struct IntuiText *iText,
	WORD left, WORD top ) (A0,A1,D0,D1)
VOID RefreshGadgets( struct Gadget *gadgets,struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
UWORD RemoveGadget( struct Window *window, struct Gadget *gadget ) (A0,A1)
* The official calling sequence for ReportMouse is given below.
* Note the register order.  For the complete story, read the ReportMouse
* autodoc.
VOID ReportMouse( BOOL flag, struct Window *window ) (D0,A0)
==alias
VOID ReportMouse1( struct Window *window, BOOL flag ) (A0,D0)
BOOL Request( struct Requester *requester, struct Window *window ) (A0,A1)
VOID ScreenToBack( struct Screen *screen ) (A0)
VOID ScreenToFront( struct Screen *screen ) (A0)
BOOL SetDMRequest( struct Window *window, struct Requester *requester ) (A0,A1)
BOOL SetMenuStrip( struct Window *window, struct Menu *menu ) (A0,A1)
VOID SetPointer( struct Window *window, UWORD *pointer,
	WORD height, WORD width, WORD xOffset, WORD yOffset )
	(A0,A1,D0,D1,D2,D3)
VOID SetWindowTitles( struct Window *window, UBYTE *windowTitle,
	UBYTE *screenTitle ) (A0,A1,A2)
VOID ShowTitle( struct Screen *screen, BOOL showIt ) (A0,D0)
VOID SizeWindow( struct Window *window, WORD dx, WORD dy ) (A0,D0,D1)
struct View *ViewAddress() ()
struct ViewPort *ViewPortAddress( struct Window *window ) (A0)
VOID WindowToBack( struct Window *window ) (A0)
VOID WindowToFront( struct Window *window ) (A0)
BOOL WindowLimits( struct Window *window, LONG widthMin, LONG heightMin,
	ULONG widthMax, ULONG heightMax ) (A0,D0,D1,D2,D3)
*--- start of next generation of names -------------------------------------
struct Preferences  *SetPrefs( struct Preferences *preferences, LONG size,
	BOOL inform ) (A0,D0,D1)
*--- start of next next generation of names --------------------------------
LONG IntuiTextLength( struct IntuiText *iText ) (A0)
BOOL WBenchToBack() ()
BOOL WBenchToFront() ()
*--- start of next next next generation of names ---------------------------
BOOL AutoRequest( struct Window *window, struct IntuiText *body,
	struct IntuiText *posText, struct IntuiText *negText,
	ULONG pFlag, ULONG nFlag, UWORD width, UWORD height )
	(A0,A1,A2,A3,D0,D1,D2,D3)
VOID BeginRefresh( struct Window *window ) (A0)
struct Window *BuildSysRequest( struct Window *window, struct IntuiText *body,
	struct IntuiText *posText, struct IntuiText *negText,
	ULONG flags, UWORD width, UWORD height ) (A0,A1,A2,A3,D0,D1,D2)
VOID EndRefresh( struct Window *window, LONG complete ) (A0,D0)
VOID FreeSysRequest( struct Window *window ) (A0)
* The return codes for MakeScreen(), RemakeDisplay(), and RethinkDisplay()
* are only valid under V39 and greater.  Do not examine them when running
* on pre-V39 systems!
LONG MakeScreen( struct Screen *screen ) (A0)
LONG RemakeDisplay() ()
LONG RethinkDisplay() ()
*--- start of next next next next generation of names ----------------------
APTR AllocRemember( struct Remember **rememberKey, ULONG size, ULONG flags )
	(A0,D0,D1)
* Public function AlohaWorkbench() is intentionally not documented
VOID AlohaWorkbench( LONG wbport ) (A0)
VOID FreeRemember( struct Remember **rememberKey, BOOL reallyForget ) (A0,D0)
*--- start of 15 Nov 85 names ------------------------
ULONG LockIBase( ULONG dontknow ) (D0)
VOID UnlockIBase( ULONG ibLock ) (A0)
==version 33
LONG GetScreenData( APTR buffer, UWORD size, UWORD type,
	struct Screen *screen ) (A0,D0,D1,A1)
VOID RefreshGList( struct Gadget *gadgets, struct Window *window,
	struct Requester *requester, WORD numGad ) (A0,A1,A2,D0)
UWORD AddGList( struct Window *window, struct Gadget *gadget, UWORD position,
	WORD numGad, struct Requester *requester ) (A0,A1,D0,D1,A2)
UWORD RemoveGList( struct Window *remPtr, struct Gadget *gadget,
	WORD numGad ) (A0,A1,D0)
VOID ActivateWindow( struct Window *window ) (A0)
VOID RefreshWindowFrame( struct Window *window ) (A0)
BOOL ActivateGadget( struct Gadget *gadgets, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID NewModifyProp( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, UWORD flags, UWORD horizPot, UWORD vertPot,
	UWORD horizBody, UWORD vertBody, WORD numGad )
	(A0,A1,A2,D0,D1,D2,D3,D4,D5)
==version 36
LONG QueryOverscan( ULONG displayID, struct Rectangle *rect, WORD oScanType )
	(A0,A1,D0)
VOID MoveWindowInFrontOf( struct Window *window, struct Window *behindWindow )
	(A0,A1)
VOID ChangeWindowBox( struct Window *window, WORD left, WORD top,
	WORD width, WORD height ) (A0,D0,D1,D2,D3)
struct Hook *SetEditHook( struct Hook *hook ) (A0)
LONG SetMouseQueue( struct Window *window, UWORD queueLength ) (A0,D0)
VOID ZipWindow( struct Window *window ) (A0)
*--- public screens ---
struct Screen *LockPubScreen( UBYTE *name ) (A0)
VOID UnlockPubScreen( UBYTE *name, struct Screen *screen ) (A0,A1)
struct List *LockPubScreenList() ()
VOID UnlockPubScreenList() ()
UBYTE *NextPubScreen( struct Screen *screen, UBYTE *namebuf ) (A0,A1)
VOID SetDefaultPubScreen( UBYTE *name ) (A0)
UWORD SetPubScreenModes( UWORD modes ) (D0)
UWORD PubScreenStatus( struct Screen *screen, UWORD statusFlags ) (A0,D0)
*
struct RastPort	*ObtainGIRPort( struct GadgetInfo *gInfo ) (A0)
VOID ReleaseGIRPort(  struct RastPort *rp ) (A0)
VOID GadgetMouse( struct Gadget *gadget, struct GadgetInfo *gInfo,
	WORD *mousePoint ) (A0,A1,A2)
==private
* system private and not to be used by applications:
APTR SetIPrefs( APTR ptr, LONG size, LONG type ) (A0,D0,D1)
==public
VOID GetDefaultPubScreen( UBYTE *nameBuffer ) (A0)
LONG EasyRequestArgs( struct Window *window, struct EasyStruct *easyStruct,
	ULONG *idcmpPtr, APTR args ) (A0,A1,A2,A3)
==varargs
LONG EasyRequest( struct Window *window, struct EasyStruct *easyStruct,
	ULONG *idcmpPtr, ... ) (A0,A1,A2,A3)
struct Window *BuildEasyRequestArgs( struct Window *window,
	struct EasyStruct *easyStruct, ULONG idcmp, APTR args ) (A0,A1,D0,A3)
==varargs
struct Window *BuildEasyRequest( struct Window *window, 
	struct EasyStruct *easyStruct, ULONG idcmp, ... )
	(A0,A1,D0,A3)
LONG SysReqHandler( struct Window *window, ULONG *idcmpPtr, BOOL waitInput )
	(A0,A1,D0)
struct Window *OpenWindowTagList( struct NewWindow *newWindow,
	struct TagItem *tagList ) (A0,A1)
==varargs
struct Window *OpenWindowTags( struct NewWindow *newWindow,
	ULONG tag1Type, ... ) (A0,A1)
struct Screen *OpenScreenTagList( struct NewScreen *newScreen,
	struct TagItem *tagList ) (A0,A1)
==varargs
struct Screen *OpenScreenTags( struct NewScreen *newScreen,
	ULONG tag1Type, ... ) (A0,A1)
*
*	new Image functions
VOID DrawImageState( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset, ULONG state,
	struct DrawInfo *drawInfo ) (A0,A1,D0,D1,D2,A2)
BOOL PointInImage( ULONG point, struct Image *image ) (D0,A0)
VOID EraseImage( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
*
APTR  NewObjectA(struct IClass *classPtr, UBYTE *classID, struct TagItem *tagList)
	(A0,A1,A2)
==varargs
APTR  NewObject( struct IClass *classPtr, UBYTE *classID, ULONG tag1, ...)
	(A0,A1,A2)
*
VOID DisposeObject( APTR  object ) (A0)
ULONG SetAttrsA( APTR  object, struct TagItem *tagList ) (A0,A1)
==varargs
ULONG SetAttrs( APTR object, ULONG tag1, ... ) (A0,A1)
*
ULONG GetAttr( ULONG attrID, APTR object, ULONG *storagePtr ) (D0,A0,A1)
*
* 	special set attribute call for gadgets
ULONG SetGadgetAttrsA( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, struct TagItem *tagList ) (A0,A1,A2,A3)
==varargs
ULONG SetGadgetAttrs( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, ULONG tag1, ...) (A0,A1,A2,A3)
*
*	for class implementors only
APTR	NextObject( APTR objectPtrPtr ) (A0)
==private
struct IClass *FindClass( UBYTE	*classID ) (A0)
==public
struct IClass *MakeClass( UBYTE *classID, 
	UBYTE	*superClassID, struct IClass *superClassPtr,
	UWORD instanceSize, ULONG flags ) (A0,A1,A2,D0,D1)
VOID AddClass( struct IClass *classPtr ) (A0)
*
*
struct DrawInfo *GetScreenDrawInfo( struct Screen *screen ) (A0)
VOID FreeScreenDrawInfo( struct Screen *screen, struct DrawInfo *drawInfo )
	(A0,A1)
*
BOOL ResetMenuStrip( struct Window *window, struct Menu *menu ) (A0,A1)
VOID RemoveClass( struct IClass *classPtr ) (A0)
BOOL FreeClass( struct IClass *classPtr ) (A0)
==private
VOID lockPubClass() ()
VOID unlockPubClass() ()
* Six spare vectors
==reserve 6
==public
==version 39
struct ScreenBuffer *AllocScreenBuffer( struct Screen *sc, struct BitMap *bm,
    ULONG flags )
	(A0,A1,D0)
VOID FreeScreenBuffer( struct Screen *sc, struct ScreenBuffer *sb ) (A0,A1)
ULONG ChangeScreenBuffer( struct Screen *sc, struct ScreenBuffer *sb ) (A0,A1)
VOID ScreenDepth( struct Screen *screen, ULONG flags, APTR reserved ) (A0,D0,A1)
VOID ScreenPosition( struct Screen *screen, ULONG flags, LONG x1, LONG y1,
	LONG x2, LONG y2 ) (A0,D0,D1,D2,D3,D4)
VOID ScrollWindowRaster( struct Window *win, WORD dx, WORD dy,
	WORD xMin, WORD yMin, WORD xMax, WORD yMax ) (A1,D0,D1,D2,D3,D4,D5)
VOID LendMenus( struct Window *fromwindow, struct Window *towindow ) (A0,A1)
ULONG DoGadgetMethodA( struct Gadget *gad, struct Window *win,
    struct Requester *req, Msg message ) (A0,A1,A2,A3)
==varargs
ULONG DoGadgetMethod( struct Gadget *gad, struct Window *win,
    struct Requester *req, ULONG MethodID, ... ) (A0,A1,A2,A3)
VOID SetWindowPointerA( struct Window *win, struct TagItem *taglist ) (A0,A1)
==varargs
VOID SetWindowPointer( struct Window *win, ULONG tag1, ... ) (A0,A1)

BOOL TimedDisplayAlert( ULONG alertNumber, UBYTE *string, UWORD height, ULONG time) (D0,A0,D1,A1)
VOID HelpControl( struct Window *win, ULONG flags ) (A0,D0)
==end
@


38.15
log
@Updated return codes for MakeScreen(), RethinkDisplay(), RemakeDisplay().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.14 92/06/03 17:30:36 peter Exp Locker: peter $
d5 2
@


38.14
log
@Added HelpControl() function.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.13 92/04/09 16:23:01 peter Exp Locker: peter $
d99 6
a104 3
VOID MakeScreen( struct Screen *screen ) (A0)
VOID RemakeDisplay() ()
VOID RethinkDisplay() ()
@


38.13
log
@Added TimedDisplayAlert().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.12 92/04/07 17:51:59 peter Exp Locker: peter $
d255 1
@


38.12
log
@Added SetWindowPointerA() function.  SetIPrefs() now returns APTR.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.11 92/04/02 21:39:13 peter Exp Locker: peter $
d254 1
@


38.11
log
@Added LendMenus() and DoGadgetMethodA().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.10 92/03/26 16:38:18 peter Exp Locker: peter $
d5 1
d154 1
a154 1
VOID SetIPrefs( APTR ptr, LONG size, LONG type ) (A0,D0,D1)
d230 2
a232 8
* These functions are safe to call starting with V37.  They return zero
* unless a suitable IPrefs is present, which requires > V37.
APTR AddResetWBHandler( struct MsgPort *port ) (A0)
VOID RemResetWBHandler( APTR handle ) (A0)
==private
* Four spare vectors
==reserve 4
==public
d250 4
@


38.10
log
@Changed args to ScreenPosition().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.9 92/03/24 11:54:56 peter Exp Locker: peter $
d249 6
@


38.9
log
@Added ScrollWindowRaster.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.8 92/03/23 11:52:09 peter Exp Locker: peter $
d245 2
a246 2
VOID ScreenPosition( struct Screen *screen, WORD dx, WORD dy, ULONG flags )
	(A0,D0,D1,D2)
@


38.8
log
@Added ScreenPosition() call.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.7 92/03/21 14:50:23 peter Exp Locker: peter $
d247 2
@


38.7
log
@Removed SetScreenAttrsA().  Added ScreenDepth().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.6 92/03/18 11:48:54 peter Exp Locker: peter $
d245 2
@


38.6
log
@Added SetScreenAttrsA().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.5 92/02/20 12:13:56 peter Exp Locker: peter $
d244 1
a244 3
ULONG SetScreenAttrsA( struct Screen *sc, struct TagItem *taglist ) (A0,A1)
==varargs
ULONG SetScreenAttrs( struct Screen *sc, ULONG firsttag, ... ) (A0,A1)
@


38.5
log
@Added flags parameter to AllocScreenBuffer().  Moved the new vectors
to leave the spares in the old place.  Added the IPrefs ResetWB
handler functions.  Added screen parameter to FreeScreenBuffer().
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.4 92/02/17 17:13:12 peter Exp Locker: peter $
d160 1
a160 1
	ULONG *idcmpPtr,  ... ) (A0,A1,A2,A3)
d244 3
@


38.4
log
@Added ScreenBuffer functions.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.3 92/01/22 16:41:52 peter Exp Locker: peter $
d230 8
d239 4
a242 3
struct ScreenBuffer *AllocScreenBuffer( struct Screen *sc, struct BitMap *bm )
	(A0,A1)
VOID FreeScreenBuffer( struct ScreenBuffer *sb ) (A0)
@


38.3
log
@ActivateWindow() now prototyped as returning VOID.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.2 91/11/11 13:43:10 peter Exp Locker: peter $
d230 5
@


38.2
log
@Private comment about setIPrefs now inside private section, no longer
includes name.
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.1 91/06/24 12:13:18 peter Exp Locker: peter $
d119 1
a119 1
LONG ActivateWindow( struct Window *window ) (A0)
@


38.1
log
@To avoid collision with C++ keywords, no longer use the variable "class".
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 38.0 91/06/12 14:23:26 peter Exp Locker: peter $
a150 1
* SetIPrefs is system private and not to be used by applications
d152 1
d160 1
a160 1
	ULONG *idcmpPtr, APTR arg1, ... ) (A0,A1,A2,A3)
d165 1
a165 1
	struct EasyStruct *easyStruct, ULONG idcmp, APTR arg1, ... )
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d1 1
a1 1
==id $Id: intuition_lib.sfd,v 36.5 91/04/16 15:49:20 peter Exp $
d188 1
a188 1
APTR  NewObjectA(struct IClass *class, UBYTE *classID, struct TagItem *tagList)
d191 1
a191 1
APTR  NewObject( struct IClass *class, UBYTE *classID, ULONG tag1, ...)
d216 1
a216 1
VOID AddClass( struct IClass *class ) (A0)
@
