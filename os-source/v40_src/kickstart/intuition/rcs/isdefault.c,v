head     38.19;
branch   ;
access   ;
symbols  V40_85:38.19 V40_71:38.19 V40_68:38.19 V40_65:38.19 V40_47:38.19 V40_45:38.19 V40_37:38.19 V40_34:38.19 V40_29:38.19 V39_2415:38.19 V39_2369:38.18 V39_2339:38.18 V39_2332:38.18 V39_2275:38.18 V39_2256:38.18 V39_2210:38.18 V39_2192:38.18 V39_2084:38.17 V39_2082:38.17 V39_2076:38.17 V39_2073:38.17 V39_2058:38.17 V39_2051:38.17 V39_2031:38.17 V39_2017:38.17 V39_2012:38.17 V39_1985:38.17 V39_1933:38.17 V39_1819:38.17 V39_1805:38.17 V39_1783:38.17 V39_1695:38.17 V39_1621:38.16 V39_1620:38.16 V39_1508:38.15 V39_1485:38.14 V39_1461:38.13 V39_1458:38.13 V39_1456:38.13 V39_1405:38.13 V39_1368:38.13 V39_1360:38.13 V39_1324:38.13 V39_1147:38.12 V39_1143:38.12 V39_1141:38.12 V39_1120:38.11 V39_1116:38.11 V39_1104:38.11 V39_1100:38.11 V39_1078:38.11 V39_1073:38.11 V39_757:38.9 V39_702:38.8 V39_557:38.4 V39_553:38.4 V39_551:38.4 V39_510:38.4 V39_495:38.4 V39_416:38.2 V39_383:38.2 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.19
date     93.01.14.14.22.11;  author peter;  state Exp;
branches ;
next     38.18;

38.18
date     92.11.10.17.06.22;  author peter;  state Exp;
branches ;
next     38.17;

38.17
date     92.07.07.15.20.58;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.06.29.10.44.56;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.06.22.13.01.35;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.18.18.09.03;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.05.15.14.06.41;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.05.01.13.52.43;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.07.17.52.49;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.02.12.05.06;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.03.26.18.42.12;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.24.11.56.12;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.23.11.52.43;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.21.14.50.57;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.19.15.52.06;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.20.12.14.10;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.17.17.13.32;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.22.16.42.33;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.04.45;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.24.39;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.19
log
@Now handle itMODIFYPROP token.
@
text
@/*** isdefault.c *************************************************************
 *
 *  isdefault.c -- Intuition State Machine default token handling
 *
 *  $Id: isdefault.c,v 38.18 92/11/10 17:06:22 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


/* This optimization depends on GfxBase maintaining a VBlank counter.
 * the idea is that in place of WaitTOF()/FreeXXX(), we send ourselves
 * a token (reminder) to FreeXXX after the VBlank counter has had
 * a chance to change, thus taking a WaitTOF() clean out of RethinkDisplay()
 * and setMousePointer().
 */
#define WAITTOF_OPTIMIZE	0

#include "intuall.h"
#include "classusr.h"

#define DERROR(x)	;
#define D(x)		;
#define DZOOM(x)	;
#define DV(x)		;
#define DCWB(x)		;
#define DSTUB(x)	;
#define DST(x)		;	/* show title	*/
#define DR(x)		;	/* refresh	*/

/* "not timer" macro	*/
#define NT(it) (it->it_Command != itTIMER  )

#define ITWINDOW	((struct Window *)object1)
#define ITSCREEN	((struct Screen *)object1)

doDefault()
{
    struct IntuitionBase	*IBase = fetchIBase();
    CPTR			object1, object2;
    ULONG			subcommand;
    ULONG			*IT_error;

    D( if NT(IT) printf("dD ") );

    /* This saves space */
    object1 = IT->it_Object1;
    object2 = IT->it_Object2;
    subcommand = IT->it_SubCommand;
    IT_error = &IT->it_Error;

    switch ( IT->it_Command )
    {
    case itMENUDOWN:	/* skip */
    case itMENUUP:	/* skip */
    case itSELECTDOWN:	/* skip */
    case itSELECTUP:	/* skip */
    case itRAWKEY:	/* skip */
    case itMETADRAG:	/* skip */
	return;		/* skip	*/

    case itACTIVATEWIN:	/* fix window borders, then skip */
	fixWindowBorders();
	return;

    case itACTIVATEGAD:	/* skip, return failure */
	*IT_error = 1;	/* default is to fail the command */
	return;

    case itMOUSEMOVE:	/* scroll, update mouse, updateMousePointer() */
	/* NOTE: some of the default processing (everything
	 * except autoScroll()) is duplicated in sscreendrag.c
	 */
	/* scaled versions of movement are in it_LongMouse.LX/LY */
	IBase->LongMouse.LX += IT->it_LongMouse.LX;
	IBase->LongMouse.LY += IT->it_LongMouse.LY;
	autoScroll( IBase->ActiveScreen );
	updateMousePointer(NULL);
	/* IDCMP message is state specific	*/
	return;

    case itTIMER:	/* doTiming(), tick active window */
	/* 
	 * go time out blinking screens
	 */
	doTiming();

	{
	    struct Window *AWindow = IBase->ActiveWindow;

	    /* tick active window */
	    if ( AWindow &&
		TESTFLAG( AWindow->IDCMPFlags, INTUITICKS ) &&
		! TESTFLAG( AWindow->Flags, WINDOWTICKED ) )
	    {
		activeEvent( IECLASS_TIMER, NULL );
		SETFLAG( AWindow->Flags, WINDOWTICKED );
	    }
	}
	return;

    case itDISKCHANGE:	/* Broadcast diskchange */
	/* it looks like you get both messages even if you ask for just one */
	sendAllAll( (ULONG) object1, (DISKINSERTED | DISKREMOVED));
	return;

    case itSETREQ:	/* Attempt to post requester */
	/* note no 'distant' version: always send REQSET to
	 * window that requester is appearing in.
	 */
	if ( IRequest( (struct Requester *)object2, ITWINDOW, FALSE ) ) {
	    *IT_error = 0;
	}
	else {
	    *IT_error = 1;	/** failed **/
	}
	return;

    case itCLEARREQ:	/* Take down requester */
	IEndRequest( ITWINDOW, (struct Requester *)object2 );
	return;
	
    case itCLOSEWIN:	/* Delink, delete layer, BorderPatrol() */
	/* delink from screen window list */
	LOCKIBASE();
	if (ITWINDOW->Parent)
	    ITWINDOW->Parent->Descendant = ITWINDOW->Descendant;
	if (ITWINDOW->Descendant)
	    ITWINDOW->Descendant->Parent = ITWINDOW->Parent;

	/* delink from screen */
	delinkThing( ITWINDOW, &ITWINDOW->WScreen->FirstWindow );
	UNLOCKIBASE();

	/* good bye layers:
	 * we do this within the state machine so that 
	 * I don't get screwed up by a button click in a
	 * layer for a window in process of being deleted
	 */
	LockLayerInfo( &ITWINDOW->WScreen->LayerInfo );
	if ( ITWINDOW->Flags & GIMMEZEROZERO )
	{
	    DeleteLayer( NULL, ITWINDOW->BorderRPort->Layer );
	}
	DeleteLayer( NULL, ITWINDOW->WLayer );
	DR( printf("have deleted layer\n"));
	DR( waitFrames( 30 ));

	/* NOTE WELL: be SURE this isn't called for the
	 * active window unless you are prepared to deal
	 * with that explicitly (by call to startIdleWindow)
	 */

	BorderPatrol( ITWINDOW->WScreen );
	UnlockLayerInfo( &ITWINDOW->WScreen->LayerInfo );
	return;

    case itVERIFY:	/* skip (extraneous if we get here) */
	DV( kquery("extraneous verify return!!" ) );
	return;		/* skip	*/
	
    case itREMOVEGAD:	/* Remove the gadget(s) */
	/* know that active gadget is not contained, else would
	 * have been deferred by sGadget
	 */
	D( printf("itREMOVEGAD, do it\n") );
	*IT_error = delinkGadgetList( (struct Gadget *)object1,
		(struct Gadget *)object2, subcommand );
	/* gadget/firstgadget/numgad */

	return;

    case itSETMENU:	/* Do it */
	realSetMenuStrip( ITWINDOW, (struct Menu *)object2, subcommand );
	return;

    case itCLEARMENU:	/* Do it */
	ITWINDOW->MenuStrip = NULL;
	return;

    case itZOOMWIN:	/* Do it */
	DZOOM( if ( subcommand ) printf("BAD DEFAULT ZOOM TOKEN!\n"); )
	IZoomWindow( ITWINDOW, FALSE );
	return;

    case itCHANGEWIN:	/* Do it */
	/* dumpBox("dD: itCHANGEWIN box", &IT->it_Box ); */
	IChangeWindow( ITWINDOW, &IT->it_Box, subcommand );
	return;

    case itDEPTHWIN:	/* Do it */
	IWindowDepth( ITWINDOW, subcommand, (struct Window *)object2 );
	return;

    case itMOVESCREEN:	/* Do it */
	IPreMoveScreen( ITSCREEN, (struct Rect *)object2, subcommand );
	return;

    case itDEPTHSCREEN:	/* Do it */
	IScreenDepth( ITSCREEN, subcommand );
	return;

    case itSHOWTITLE:	/* Do it */
	DST( printf("itSHOWTITLE, state: %lx\n", IBase->CurrentState ) );
	IShowTitle( ITSCREEN, subcommand );
	return;

    case itONOFFMENU:	/* Do it */
	IOnOffMenu( ITWINDOW, (ULONG)object2, subcommand );
	return;

    case itOPENSCREEN:	/* Do it */
	D( printf("default:: itOPENSCREEN, sc %lx\n", ITSCREEN) );

	*IT_error = IOpenScreen( ITSCREEN, (struct TagItem *)object2 );
	D( printf("default:: itOS returned %lx\n", *IT_error) );
	return;

    case itOPENWIN:	/* Do it */
	D( printf("itOPENWIN\n") );
	*IT_error = IOpenWindow( ITWINDOW, (struct BitMap *)object2,
			    subcommand );
	return;

    case itCLOSESCREEN:	/* Do it */
	DCWB( printf("closescreen default\n") );
	*IT_error = ICloseScreen( ITSCREEN );
	return;

    /* WHY is this thing around?  Why, just to single-thread
     * ADDEVENT processing.
     */
    case itNEWPREFS:	/* Broadcast NEWPREFS */
	sendAllAll( IECLASS_NEWPREFS, NEWPREFS );
	return;

    case itMODIFYIDCMP:	/* Do it */
	IModifyIDCMP( ITWINDOW, (ULONG) object2 );
	return;

    case itCLOSEWB:	/* Do it */

	DCWB( printf( "itCLOSEWB on task %lx: let's go\n", FindTask(0L) ) );
	{
	    struct Screen	*s;
	    struct Window	*w;

	    if ( ! IBase->WBPort )
	    {
		/* if there's no WBPort, then I don't need to notify WB,
		 * but it helps to make CloseWorkBench think I have
		 */
		ReplyMsg( (struct Message *)object1 );
		*IT_error = 0;
	    }
	    else if ( (s = (struct Screen *)findWorkBench())  )
	    { 
		/* WBPort exists */
		for ( w = s->FirstWindow;  w; w = w->NextWindow )
		{ 
		    if ( ! TESTFLAG( w->Flags, WBENCHWINDOW ) )
		    {
			DCWB( printf("itCWB: found non-wb window\n" ) );
			*IT_error = 1;
			return;
		    }
		} 

		/* OK, all Windows in WorkBench Screen are WBENCHWINDOWS
		 * so send the message along
		 */
		DCWB( printf("itCWB: put message %lx at port %lx\n",
			(struct Message *)object1, IBase->WBPort ) );
		DCWB(printf("port task is %lx\n", IBase->WBPort->mp_SigTask));
		PutMsg( IBase->WBPort, (struct Message *)object1 );
		*IT_error = 0;
	    } 
	    else
	    {
		DCWB( printf("no (port or wb screen).  fail\n") );
		/* want CloseWB to return FALSE if the WB screen isn't
		 * around.  This is probably backwards, but as spec'd
		 */
		*IT_error = 1;
	    }
	}
	DCWB( printf("itCWB done\n") );
	return;

    case itCHANGESCBUF:	/* Do it */
	IChangeScreenBuffer( ITSCREEN, (struct ScreenBuffer *)object2 );
	return;

    case itCOPYSCBUF:	/* Do it */
	ICopyScreenBuffer( ITSCREEN, (struct ScreenBuffer *)object2 );
	return;

    case itSETPOINTER:	/* Do it */
	ISetWindowPointer( ITWINDOW, (struct MousePointer *)object2 );
	return;

    case itGADGETMETHOD:	/* Do it */
	*IT_error = IDoGadgetMethodA( (struct Gadget *)object2, ITWINDOW,
	    (Msg) subcommand );
	return;

    case itMODIFYPROP:		/* Do it */
	IModifyProp( (struct Gadget *)object2, ITWINDOW, subcommand );
	return;

#if WAITTOF_OPTIMIZE
    case itFREECPRLIST:
	if ( subcommand != IBase->GfxBase->VBCounter )
	{
	    FreeCprList( (struct cprlist *)object1 );
	    FreeCprList( (struct cprlist *)object2 );
	}
	else
	{
	    deferToken();
	}
	return;

    case itFREESPRITEDATA:
	if ( subcommand != IBase->GfxBase->VBCounter )
	{
	    FreeSpriteData( (struct ExtSprite *)object1 );
	}
	else
	{
	    deferToken();
	}
	return;
#endif

    case itUNKNOWNIE:	/* Do nothing but pass it down */
	D( printf("doDefault passing along unknown input event\n") );
	activeEvent( IE->ie_Class, IE->ie_Code );
	break;


    DERROR( default: printf( "BAD TOKEN: IT %lx command %ld\n",
	IT, IT->it_Command ); Debug() );
    }
};

/* send normal mouse message with window coordinates,
 * if the mouse has moved (in window coords!), and record
 * last position.
 */
sendWindowMouse()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*AWindow = IBase->ActiveWindow;


    /* delta move: always send this, even if mouse has
     * run up against its boundaries
     */
    if ( TESTFLAG( AWindow->IDCMPFlags, DELTAMOVE ) )
    {
	/* sendIDCMP will pick up on DELTAMOVE and use
	 * ie XY coordinates as is
	 */
	activeEvent(IECLASS_RAWMOUSE, IECODE_NOBUTTON );
    }

    /*
     * don't send absolute mouse notice unless it actually moved.
     * New: If there was tablet-data for this message, we always
     * send the message, in case pressure or something changed.
     */
    else if ( ( ( IT->it_Tablet ) &&
	    ( TESTFLAG( AWindow->MoreFlags, WMF_TABLETMESSAGES ) ) ) ||
	( *((ULONG *) &AWindow->MouseY ) !=
	    *((ULONG *) &XWINDOW(AWindow)->LastMouseY ) ) )
    {
	IE->ie_X = AWindow->MouseX;
	IE->ie_Y = AWindow->MouseY;
	*((ULONG *) &XWINDOW(AWindow)->LastMouseY) =
	    *((ULONG *) &AWindow->MouseY );

	activeEvent(IECLASS_RAWMOUSE, IECODE_NOBUTTON );
    }
}

@


38.18
log
@Added (compiled-out) code to implement VBlank optimization.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.17 92/07/07 15:20:58 peter Exp Locker: peter $
d308 4
@


38.17
log
@itGADGETMETHOD token calls IDoGadgetMethodA().  IOpenScreen() now
has a return value.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.16 92/06/29 10:44:56 peter Exp Locker: peter $
d14 8
d309 25
@


38.16
log
@IToken mouse coordinates now longs.  IBase->LongMouse now used.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.15 92/06/22 13:01:35 peter Exp Locker: peter $
d15 1
d210 2
a211 2
	IOpenScreen( ITSCREEN, (struct TagItem *)object2 );
	D( printf("default:: itOS returned\n") );
d295 5
@


38.15
log
@sendWindowMouse() sends message for every tablet event, even if mouse
position is unchanged.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.14 92/06/18 18:09:03 peter Exp Locker: peter $
d68 4
a71 4
	/* scaled versions of movement are stuck in it_Box.Left/Top */
	autoScroll( IBase->ActiveScreen, &IT->it_Box.Left );
	IBase->Mouse.X += IT->it_Box.Left;
	IBase->Mouse.Y += IT->it_Box.Top;
d182 1
a182 1
	IChangeWindow( ITWINDOW, &IT->it_Box,  subcommand );
@


38.14
log
@Default action for itACTIVATEWIN now includes setting the failure code.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.13 92/05/15 14:06:41 peter Exp Locker: peter $
d329 3
a331 1
     * don't send absolute mouse notice unless it actually moved
d333 4
a336 2
    else if ( *((ULONG *) &AWindow->MouseY ) !=
	*((ULONG *) &XWINDOW(AWindow)->LastMouseY ) )
@


38.13
log
@itACTIVATEWIN no longer has a failure.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.12 92/05/01 13:52:43 peter Exp Locker: peter $
a53 1
    case itACTIVATEWIN:	/* skip */
d56 5
a60 1
    case itACTIVATEGAD:	/* fail */
@


38.12
log
@Took out 2nd BorderPatrol() parameter.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.11 92/04/07 17:52:49 peter Exp Locker: peter $
d54 1
a56 1
    case itACTIVATEWIN:	/* fail */
@


38.11
log
@Handles itSETPOINTER token.  Calls updateMousePointer() with NULL.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.10 92/04/02 12:05:06 peter Exp Locker: peter $
d145 1
a145 1
	BorderPatrol( ITWINDOW->WScreen, NULL );
@


38.10
log
@Renamed reportMouse() to updateMousePointer().
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.9 92/03/26 18:42:12 peter Exp Locker: peter $
d65 1
a65 1
	/* scaled versions of movement are stuck in it_Box */
d69 1
a69 1
	updateMousePointer(FALSE);
d287 4
@


38.9
log
@IPreMoveScreen() is called for itMOVESCREEN tokens.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.8 92/03/24 11:56:12 peter Exp Locker: peter $
d61 1
a61 1
    case itMOUSEMOVE:	/* scroll, update mouse, reportMouse() */
d69 1
a69 1
	reportMouse(FALSE);
@


38.8
log
@Now pass NULL for new second parameter to BorderPatrol().
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.7 92/03/23 11:52:43 peter Exp Locker: peter $
d187 1
a187 1
	IMoveScreen( ITSCREEN, (struct Point *)object2, subcommand );
@


38.7
log
@Now pass the subcommand (flags) to IMoveScreen().
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.6 92/03/21 14:50:57 peter Exp Locker: peter $
d145 1
a145 1
	BorderPatrol( ITWINDOW->WScreen );
@


38.6
log
@IOpenScreen() now takes a taglist.  Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.5 92/03/19 15:52:06 peter Exp Locker: peter $
d187 1
a187 1
	IMoveScreen( ITSCREEN, (struct Point *)object2, 0 );
@


38.5
log
@Now handle itATTACHSCREEN token.  Renamed IDepthArrange() to IWindowDepth().
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.4 92/02/20 12:14:10 peter Exp Locker: peter $
d206 1
a206 1
	IOpenScreen( ITSCREEN );
a286 10
	return;

    case itATTACHSCREEN:	/* Do it */
	/* Note that IAttachScreen() may need to move the child.
	 * The token-behavior of itATTACHSCREEN therefore must
	 * correspond to the behavior of itMOVESCREEN.  In particular,
	 * in states where itMOVESCREEN is deferred or discarded,
	 * itATTACHSCREEN must be deferred.
	 */
	IAttachScreen( ITSCREEN, (struct Screen *)object2, subcommand );
@


38.4
log
@RealBitMap no longer changes when ChangeScreenBuffer() is called.
Saved mucho bytes by caching the IT fields.  ActiveWindow caching.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.3 92/02/17 17:13:32 peter Exp Locker: peter $
d183 1
a183 1
	IDepthArrange( ITWINDOW, subcommand, (struct Window *)object2 );
d287 10
@


38.3
log
@Clarified what each token does.  Put in code to handle double-buffering
token.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.2 92/01/22 16:42:33 peter Exp Locker: peter $
a23 1
#define DDB(x)		;	/* double-buffering */
d28 3
d34 3
a36 1
    struct Window		*itwindow;
d40 5
a44 2
    /* this is often true */
    itwindow = (struct Window *) IT->it_Object1;
d58 1
a58 1
	IT->it_Error = 1;	/* default is to fail the command */
a78 4
	/* tick active window */
	if ( IBase->ActiveWindow &&
	    TESTFLAG( IBase->ActiveWindow->IDCMPFlags, INTUITICKS ) &&
	    ! TESTFLAG( IBase->ActiveWindow->Flags, WINDOWTICKED ) )
d80 10
a89 2
	    activeEvent( IECLASS_TIMER, NULL );
	    SETFLAG( IBase->ActiveWindow->Flags, WINDOWTICKED );
d95 1
a95 1
	sendAllAll( (ULONG) IT->it_Object1, (DISKINSERTED | DISKREMOVED));
d102 2
a103 2
	if ( IRequest( IT->it_Object2, IT->it_Object1, FALSE ) ) {
	    IT->it_Error = 0;
d106 1
a106 1
	    IT->it_Error = 1;	/** failed **/
d111 1
a111 1
	IEndRequest( itwindow, IT->it_Object2 );
d117 4
a120 4
	if (itwindow->Parent)
	    itwindow->Parent->Descendant = itwindow->Descendant;
	if (itwindow->Descendant)
	    itwindow->Descendant->Parent = itwindow->Parent;
d123 1
a123 1
	delinkThing( itwindow, &itwindow->WScreen->FirstWindow );
d131 2
a132 2
	LockLayerInfo( &itwindow->WScreen->LayerInfo );
	if ( itwindow->Flags & GIMMEZEROZERO )
d134 1
a134 1
	    DeleteLayer( NULL, itwindow->BorderRPort->Layer );
d136 1
a136 1
	DeleteLayer( NULL, itwindow->WLayer );
d145 2
a146 2
	BorderPatrol( itwindow->WScreen );
	UnlockLayerInfo( &itwindow->WScreen->LayerInfo );
d158 2
a159 2
	IT->it_Error = delinkGadgetList( IT->it_Object1,
		IT->it_Object2, IT->it_SubCommand );
d165 1
a165 1
	realSetMenuStrip( itwindow, IT->it_Object2, IT->it_SubCommand );
d169 1
a169 1
	itwindow->MenuStrip = NULL;
d173 2
a174 2
	DZOOM( if ( IT->it_SubCommand ) printf("BAD DEFAULT ZOOM TOKEN!\n"); )
	IZoomWindow( itwindow, FALSE );
d179 1
a179 1
	IChangeWindow( itwindow, &IT->it_Box,  IT->it_SubCommand );
d183 1
a183 1
	IDepthArrange( itwindow, IT->it_SubCommand, IT->it_Object2 );
d187 1
a187 1
	IMoveScreen( IT->it_Object1, IT->it_Object2, 0 );
d191 1
a191 1
	IScreenDepth( IT->it_Object1, IT->it_SubCommand );
d196 1
a196 1
	IShowTitle( IT->it_Object1, IT->it_SubCommand );
d200 1
a200 1
	IOnOffMenu( IT->it_Object1, IT->it_Object2, IT->it_SubCommand );
d204 1
a204 1
	D( printf("default:: itOPENSCREEN, sc %lx\n", IT->it_Object1) );
d206 1
a206 1
	IOpenScreen( IT->it_Object1 );
d212 2
a213 2
	IT->it_Error = IOpenWindow( IT->it_Object1, IT->it_Object2,
			    IT->it_SubCommand );
d218 1
a218 1
	IT->it_Error = ICloseScreen( IT->it_Object1 );
d229 1
a229 1
	IModifyIDCMP( itwindow, (ULONG) IT->it_Object2 );
d244 2
a245 2
		ReplyMsg( IT->it_Object1 );
		IT->it_Error = 0;
d255 1
a255 1
			IT->it_Error = 1;
d264 1
a264 1
			IT->it_Object1, IBase->WBPort ) );
d266 2
a267 2
		PutMsg( IBase->WBPort, IT->it_Object1 );
		IT->it_Error = 0;
d275 1
a275 1
		IT->it_Error = 1;
d281 3
a283 4
    case itCHANGESCBUF:	/* do it */
	{
	    struct Screen *screen;
	    struct ScreenBuffer *sb;
d285 2
a286 18
	    screen = (struct Screen *)IT->it_Object1;
	    sb = (struct ScreenBuffer *)IT->it_Object2;
	    DDB( printf( "Double buffer screen %lx, sb %lx\n", screen, sb ) );
	    DDB( printf( "Calling CVPBitMap(vp=%lx, bm=%lx, dbi=%lx)\n",
		&screen->ViewPort, sb->sb_BitMap, sb->sb_DBufInfo ) );
	    ChangeVPBitMap( &screen->ViewPort, sb->sb_BitMap, sb->sb_DBufInfo );
	    /* ChangeVPBitMap() changed the ViewPort's RasInfo BitMap,
	     * and now I have a few things of my own to change:
	     */
	    screen->sc_BitMap = *sb->sb_BitMap;
	    screen->RastPort.BitMap = sb->sb_BitMap;
	    XSC(screen)->RealBitMap = sb->sb_BitMap;
	    /* Mike assured me that since these are my layers, it's
	     * safe to change their bitmaps.  Ok, Mike...
	     */
	    XSC(screen)->ClipLayer->rp->BitMap = sb->sb_BitMap;
	    screen->BarLayer->rp->BitMap = sb->sb_BitMap;
	}
d307 1
a307 1

d313 1
a313 1
    if ( TESTFLAG( IBase->ActiveWindow->IDCMPFlags, DELTAMOVE ) )
d324 2
a325 2
    else if ( *((ULONG *) &IBase->ActiveWindow->MouseY ) !=
	*((ULONG *) &XWINDOW(IBase->ActiveWindow)->LastMouseY ) )
d327 4
a330 4
	IE->ie_X = IBase->ActiveWindow->MouseX;
	IE->ie_Y = IBase->ActiveWindow->MouseY;
	*((ULONG *) &XWINDOW(IBase->ActiveWindow)->LastMouseY) =
	    *((ULONG *) &IBase->ActiveWindow->MouseY );
@


38.2
log
@By default, itACTIVATEWIN now sets it_Error to 1, in addition to doing
nothing.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.1 91/06/19 18:04:45 peter Exp Locker: peter $
d24 1
d41 6
a46 6
    case itMENUDOWN:
    case itMENUUP:
    case itSELECTDOWN:
    case itSELECTUP:
    case itRAWKEY:
    case itMETADRAG:
d49 2
a50 2
    case itACTIVATEWIN:
    case itACTIVATEGAD:
d54 1
a54 1
    case itMOUSEMOVE:
d66 1
a66 1
    case itTIMER:
d82 1
a82 1
    case itDISKCHANGE:
d87 1
a87 1
    case itSETREQ:
d99 1
a99 1
    case itCLEARREQ:
d103 1
a103 1
    case itCLOSEWIN:
d138 1
a138 1
    case itVERIFY:
d142 1
a142 1
    case itREMOVEGAD:
d144 1
a144 1
	 * have been deferred by isGadget
d153 1
a153 1
    case itSETMENU:
d157 1
a157 1
    case itCLEARMENU:
d161 1
a161 1
    case itZOOMWIN:
d166 1
a166 1
    case itCHANGEWIN:
d171 1
a171 1
    case itDEPTHWIN:
d175 1
a175 1
    case itMOVESCREEN:
d179 1
a179 1
    case itDEPTHSCREEN:
d183 1
a183 7
#if 0	/* obsolete */
    case itBORDERPATROL:
	BorderPatrol( IT->it_Object1 );
	return;
#endif

    case itSHOWTITLE:
d188 1
a188 1
    case itONOFFMENU:
d192 1
a192 1
    case itOPENSCREEN:
d199 1
a199 1
    case itOPENWIN:
d205 1
a205 1
    case itCLOSESCREEN:
d213 1
a213 1
    case itNEWPREFS:
d217 1
a217 1
    case itMODIFYIDCMP:
d221 1
a221 1
    case itCLOSEWB:
d270 26
a295 1
    case itUNKNOWNIE:
@


38.1
log
@Removed obsolete code.
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 38.0 91/06/12 14:24:39 peter Exp Locker: peter $
a44 1
    case itACTIVATEWIN:
d48 1
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: isdefault.c,v 1.22 90/12/10 21:35:16 peter Exp $
a225 1
#if NEWCLOSEWB
a228 6
#if 0
	IT->it_Error = 1;
	printf( "STUB: returning %lx\n", IT->it_Error );
	return;
#endif

d274 1
a274 1
#endif
@
