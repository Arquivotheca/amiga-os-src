head     38.9;
branch   ;
access   ;
symbols  V40_85:38.9 V40_71:38.9 V40_68:38.9 V40_65:38.9 V40_47:38.9 V40_45:38.9 V40_37:38.9 V40_34:38.9 V40_29:38.8 V39_2415:38.7 V39_2369:38.5 V39_2339:38.5 V39_2332:38.5 V39_2275:38.5 V39_2256:38.5 V39_2210:38.5 V39_2192:38.5 V39_2084:38.5 V39_2082:38.5 V39_2076:38.5 V39_2073:38.5 V39_2058:38.5 V39_2051:38.5 V39_2031:38.5 V39_2017:38.5 V39_2012:38.5 V39_1985:38.5 V39_1933:38.5 V39_1819:38.5 V39_1805:38.5 V39_1783:38.5 V39_1695:38.5 V39_1621:38.5 V39_1620:38.5 V39_1508:38.5 V39_1485:38.5 V39_1461:38.5 V39_1458:38.5 V39_1456:38.5 V39_1405:38.5 V39_1368:38.5 V39_1360:38.5 V39_1324:38.5 V39_1147:38.5 V39_1143:38.5 V39_1141:38.5 V39_1120:38.5 V39_1116:38.5 V39_1104:38.5 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.3 V39_702:38.3 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.3 V39_495:38.3 V39_416:38.3 V39_383:38.3 V39_371:38.3 V39_336:38.3 V39_323:38.3 V39_295:38.3 V39_277:38.3 V39_254:38.3 V39_222:38.3 V39_185:38.3 V39_171:38.2 V39_161:38.2 V38_159:38.2 V38_116:38.2 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.9
date     93.03.12.13.53.18;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     93.02.15.19.02.53;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     93.01.14.14.38.29;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     93.01.14.14.28.48;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.07.17.56.15;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.01.15.07.14;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.17.14.29.30;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.17.59.52;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.12.15.44;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.29.14;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.9
log
@Fixed hole in UnlockPubScreen().
@
text
@/*** pubscreen.c ***************************************************************
 *
 *  pubscreen.c -- shared public screen support
 *
 *  $Id: pubscreen.c,v 38.8 93/02/15 19:02:53 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"
#include "exec/memory.h"

struct PubScreenNode	*findPubScreen();
struct Node *findNameNC();

#define D(x)	;
#define DVC(x)	;
/*** intuition.library/LockPubScreen ***/

/*
 * keeps pubscreen around and non-PRIVATE until you get around to
 * opening on it (at which time you call UnlockPubScreen.)
 * returns TRUE if successful.
 */
struct Screen	*
LockPubScreen( name )
UBYTE	*name;
{
    struct PubScreenNode	*psn;
    struct Screen	*retval = NULL;

    /* done in findPubScreen()	LOCKIBASE(); */

    D( printf("LPS: name: %s\n", name ));

    /* ZZZ: no good: what if dPS fails? */
    if ( psn = (name? findPubScreen( name ): XSC(defaultPubScreen())->PSNode ))
    {
	D( printf("LPS: psn = %lx\n", psn ) );
	/* both fPS and dPS return VC++ */

	retval = psn->psn_Screen;

	D( printf("LPS returns %lx\n", retval ));
    }

    /* UNLOCKIBASE(); */
    return ( retval );
}
/*** intuition.library/UnlockPubScreen ***/

UnlockPubScreen( name, screen )
UBYTE	*name;
struct Screen	*screen;
{
    struct PubScreenNode	*psn = NULL;

    /* Until V40, we used to not do LOCKIBASE().  Jimm left me a
     * comment that VC++ was good enough to keep the screen around.
     * however, as we unlock the screen, we Signal() after decrementing
     * the visitor count.  That's unsafe without a lock.
     */
    LOCKIBASE();

    if ( name ) 
    {
	psn = findPubScreen( name );	/* returns VC++ !! 	*/
	decPSNVisitor( psn );		/* so, cancel that	*/
    }
    else if ( screen )  psn = XSC(screen)->PSNode;


    /* Peter: 7-Aug-90 - signal pubscreen owner here too */
    if ( decPSNVisitor( psn ) == 0 )	/* checks for NULL	*/
    {
	if ( psn && psn->psn_SigTask )	/* does he want a signal	*/
	{
	    Signal( psn->psn_SigTask, 1 << psn->psn_SigBit );
	}
    }
    UNLOCKIBASE();
}
/*** intuition.library/LockPubScreenList ***/

struct List	*
LockPubScreenList( )
{
 	LOCKIBASE();
	return ( &fetchIBase()->PubScreenList );
}
/*** intuition.library/UnlockPubScreenList ***/

UnlockPubScreenList( )
{
    UNLOCKIBASE();
}


/*** intuition.library/NextPubScreen ***/

UBYTE	*
NextPubScreen( screen, namebuf )
struct Screen	*screen;
UBYTE		namebuf[];
{
    struct PubScreenNode	*psn = NULL;
    struct IntuitionBase *IBase = fetchIBase();
    UBYTE	*retval = NULL;

    LOCKIBASE();

    if ( screen ) psn = XSC(screen)->PSNode;

    /* not a public screen, perhaps, or last in list */
    if ( ( ! psn ) ||
	( (struct Node *) psn == IBase->PubScreenList.lh_TailPred) )
    {
	D( printf("NPS: psn %lx is tail\n", psn ) );
	psn = (struct PubScreenNode *) IBase->PubScreenList.lh_Head;
    }
    else
    {
	/* next in link	*/
	D( printf("NPS: psn %lx has succ\n", psn ) );
	psn = (struct PubScreenNode *) psn->psn_Node.ln_Succ;
    }

    /* if now still tail, means list was empty */

    if ( psn->psn_Node.ln_Succ != NULL )
    {
	jstrncpy( namebuf, psn->psn_Node.ln_Name, MAXPUBSCREENNAME );
	namebuf[ MAXPUBSCREENNAME-1 ] = '\0';	/* bein' sure */
	retval = namebuf;
    }
    D( else printf( "NPS: list must be empty!\n") );

    UNLOCKIBASE();

    return ( retval );
}
/*** intuition.library/SetDefaultPubScreen ***/

SetDefaultPubScreen( name )
UBYTE	*name;
{
    struct IntuitionBase *IBase = fetchIBase();
    struct PubScreenNode	*psn;

    /* LOCKIBASE(); VC++ is good enough */

    if ( name )
    {
	D( printf("SDPS: name: %s\n", name ) );
	if ( psn = findPubScreen( name ) )	/* returns VC++ */
	{
	    IBase->DefaultPubScreen = psn;
	    decPSNVisitor( psn );	/* cancel the VC++	*/
	}
    }
    else
    {
	D( printf("SDPS: null name, null default.\n" ) );
	IBase->DefaultPubScreen = NULL;
    }

    /* UNLOCKIBASE(); */
}/*** intuition.library/GetDefaultPubScreen ***/

GetDefaultPubScreen( Namebuff )
UBYTE	*Namebuff;
{
    struct PubScreenNode	*psn;
    UBYTE			*pubname;
    extern UBYTE		WBPUBNAME[];

    pubname =  ( psn = fetchIBase()->DefaultPubScreen )?
	psn->psn_Node.ln_Name: WBPUBNAME;

    if ( Namebuff ) jstrncpy( Namebuff, pubname, MAXPUBSCREENNAME );

    /*
     * "undocumented feature" return the screen pointer
     * in D0.  This is undocumented because:
     * - you can't rely on the persistence of this
     *   pointer.  The only safe use I can think of
     *   is to compare it for equality with a screen pointer
     *   that you know is persistent (window open, lockpubscreen).
     * - this idea missed the freezes, but Bill Hawes really needs it.
     */
    return ( (int) ( psn? psn->psn_Screen: NULL ) );
}
/*** intuition.library/SetPubScreenModes ***/

SetPubScreenModes( modes )
UWORD	modes;
{
    UWORD	oldflags;
    struct IntuitionBase *IBase = fetchIBase();

    D( printf("SPSM: modes: %lx\n", modes ) );

    /* no lock needed	*/

    oldflags = IBase->PubScreenFlags;
    IBase->PubScreenFlags = modes;
    return ( oldflags );
}
/*** intuition.library/PubScreenStatus ***/

PubScreenStatus( screen, status )
struct Screen	*screen;
UWORD		status;
{
    struct PubScreenNode	*psn;
    struct IntuitionBase *IBase = fetchIBase();
    int	retval = 0;

    D( printf("PSS: screen:%lx status: %lx\n", screen, status) );

    LOCKIBASE();

    if ( psn = XSC(screen)->PSNode )
    {
	if ( TESTFLAG( status, PSNF_PRIVATE ) )
	{
	    if ( psn->psn_VisitorCount == 0 )
	    {
		/* make him private	*/
		D( printf("PSS: no visitors\n") );
		SETFLAG( psn->psn_Flags, PSNF_PRIVATE );

		/* make sure he isn't default	*/
		if ( IBase->DefaultPubScreen == psn )
		{
		    IBase->DefaultPubScreen = NULL;
		}

		retval = 1;
	    }
	    D( else printf("PrivateScreen fail. visitor count: %ld\n",
		    psn->psn_VisitorCount ) );
	}
	else
	{
	    CLEARFLAG( psn->psn_Flags, PSNF_PRIVATE );
	    retval = 1;
	}
    }
    D( else  printf("PrivateScreen: not PubScreen!\n") );

    UNLOCKIBASE();

    return ( retval );
}

/*
 * A NewWindow is declared VISITOR.  This routine
 * determines the screen to open the window on depending
 * on the values of PubScreenFlags and PubScreenName.
 * See intuition.h for algorithm.
 *
 * If visitor is asking for workbench, uses FALLBACK
 * to DefaultPubScreen rather than opening workbench.
 * Only opens workbench is DefaultPubScreen is NULL.
 *
 * returns with VisitorCount++
 */
struct Screen	*
windowPubScreen( pubname, fallback )
UBYTE	*pubname;
BOOL	fallback;
{
    struct PubScreenNode	*findPubScreen();
    struct Screen		*openSysScreen();
    extern UBYTE		WBPUBNAME[];

    struct Screen 		*ps;
    struct PubScreenNode	*psn;

    /* LOCKIBASE(); VC++ is good enough */

    if ( pubname )	/* not default	*/
    {
	/* look for named pub screen node	*/
	/* this will open WB if necessary	*/
	psn = findPubScreen( pubname );
	/* does VC++, also opens "Workbench" */

	/* if no find or private     */
	if (! psn)
	{
	    ps = ( fallback )? defaultPubScreen(): NULL;
	    /* does VC++, also opens wb if needed */
	}
	else    /* find.  not marked private       */
	{
	    ps = psn->psn_Screen;
	}
    }
    else	/* wants default, pure and simple	*/
    {
	ps = defaultPubScreen();	/* assumes it's not private	*/
	/* does VC++, also opens wb if needed */
    }

    /* UNLOCKIBASE(); */
    return ( ps );
}


/*
 * New news: caller CANNOT have IBASELOCK, since openSysScreen
 * needs STATELOCK (doISM in OpenScreenTagList).
 *
 * returns with VisitorCount++
 */
struct PubScreenNode	*
findPubScreen( name )
UBYTE	*name;
{
    struct PubScreenNode	*psn;
    struct Screen		*wbscreen;
    struct Screen		*openSysScreen();

    /* bump is no-op if psn == NULL */
    LOCKIBASE();
    bumpPSNVisitor( psn =  (struct PubScreenNode *)
		findNameNC( &fetchIBase()->PubScreenList, name ) );

    /* Peter 26-Jun-91: Now fails if screen is private
     * (simplifies code elsewhere)
     */
    if ( (psn) && TESTFLAG( psn->psn_Flags, PSNF_PRIVATE ) )
    {
	decPSNVisitor( psn );
	psn = NULL;
    }
    UNLOCKIBASE();

    if ( !psn && jstreq( name, WBPUBNAME ) )
    {
	/* open WB screen, if that's what they're looking for */
	if ( wbscreen = openSysScreen( WBENCHSCREEN ) )
	{
	    /* openSysScreen returned with VC++	*/
	    psn = XSC(wbscreen)->PSNode;
	}
	else
	{
	    /* Peter 14-Nov-90: Mostly fix race condition.  findNameNC()
	     * could have failed if WB wasn't open, then someone came
	     * along and opened Workbench.  openSysScreen() fails
	     * because WB is now there!  LockPubScreen("Workbench")
	     * was failing.  So we try again to find the Workbench screen.
	     * This should catch any but the most pathological cases.
	     * (I've seen this bug happen).
	     */
	    LOCKIBASE();
	    bumpPSNVisitor( psn =  (struct PubScreenNode *)
			findNameNC( &fetchIBase()->PubScreenList, name ) );
	    UNLOCKIBASE();
	}
    }
    return ( psn );
}

/*
 * returns default pub screen, trying to open workbench if
 * that is it.
 *
 * Don't call with IBASELOCK, since I might have to open a screen
 *
 * returns with VisitorCount++
 */
struct Screen *
defaultPubScreen()
{
    struct Screen	*openSysScreen();
    struct Screen	*dpscreen = NULL;

    struct IntuitionBase *IBase = fetchIBase();

    /* do this so that IBASELOCK isn't held around
     * openSysScreen().  jimm: 6/6/90.
     */
    LOCKIBASE();
    /* atomic: DPS won't change out from under us	*/
    if (  bumpPSNVisitor( IBase->DefaultPubScreen ) )
    {
	/* now VC++ keeps it open, whether it stays default or not */
	dpscreen = IBase->DefaultPubScreen->psn_Screen;
    }
    UNLOCKIBASE();

    return ( dpscreen? dpscreen: openSysScreen( WBENCHSCREEN ) );
}

/* initPubScreen() performs a uniqueness test on the desired name,
 * then initialized the PubScreenNode if all goes well.
 *
 * The locking issues around the uniqueness test are tricky,
 * and there was a hole in V36-V39.  We want to call the uniqueness
 * test early in OpenScreen(), so we can fail quickly and without any
 * flashing.  However, we can't link the pubscreen node onto the
 * PubScreenList until the screen is fully open, since apps can access
 * that list.  Also, we can't hold the IBASELOCK across the guts of
 * OpenScreen().  Thus, there was a time between the calls to
 * initPubScreen() and linkPubScreen() where a second screen of the
 * same name could pass the uniqueness test in initPubScreen.
 * The fix I chose for V40 was to create a second list, the
 * PendingPubScreens list, and initPubScreen() puts pubscreen nodes
 * there while still inside the same locking session as the uniqueness
 * test, which now has two lists to examine.
 */

struct PubScreenNode *
initPubScreen( pubname, pubtask, pubsig, errorptr )
char		*pubname;
struct Task	*pubtask;
UBYTE		pubsig;
LONG		*errorptr;
{
    struct PubScreenNode	*pubnode;
    int 			psnsize;
    struct IntuitionBase *IBase = fetchIBase();
    struct Task			*FindTask();

    /* Name uniqueness check.  This happens under the IBASELOCK.
     * Check the PubScreenList, and also the list of PendingPubScreens,
     * for a different screen whose name is the same.
     */
    LOCKIBASE();
    pubnode = findNameNC( &IBase->PubScreenList, pubname );
    if ( !pubnode )
    {
	/* No existing collisions.  Is one pending? */
	pubnode = findNameNC( &IBase->PendingPubScreens, pubname );
    }
    if ( !pubnode )
    {
	/* Good news: no name collision now or pending */
	/* add string buffer after node	*/
	psnsize = sizeof ( struct PubScreenNode ) + strlen( pubname ) + 1;
	pubnode = (struct PubScreenNode *) AllocVec( psnsize,
	    MEMF_CLEAR | MEMF_PUBLIC );	
	if ( pubnode )
	{
	    pubnode->psn_Size = psnsize;

	    pubnode->psn_SigTask = pubtask;
	    pubnode->psn_SigBit = pubsig;

	    /* use current task if valid sig specified (but not task)	*/
	    if (  pubsig != -1 && ! pubnode->psn_SigTask )
	    {
		pubnode->psn_SigTask = FindTask( 0L );
	    }
	    pubnode->psn_Node.ln_Name = (UBYTE *) &pubnode[ 1 ];
	    jstrncpy( &pubnode[ 1 ], pubname, MAXPUBSCREENNAME );

	    /* start 'em out private	*/
	    SETFLAG( pubnode->psn_Flags, PSNF_PRIVATE );
	    AddTail( &IBase->PendingPubScreens, pubnode );

	    D( printf("iPS: pub screen init first part done.\n") );

	    /* still need to back link with screen and add to list */
	}
	else
	{
	    *errorptr = OSERR_NOMEM;
	    /* Going to return pubnode, which is already NULL */
	}
    }
    else
    {
	*errorptr = OSERR_PUBNOTUNIQUE;
	/* Going to return pubnode, which needs to be NULLed */
	pubnode = NULL;
    }
    UNLOCKIBASE();
    return ( pubnode );
}


/*
 * called only by OpenScreen: has IBASELOCK (see initPubScreen() for
 * complications of the uniqueness test)
 */
linkPubScreen( sc, pubnode )
struct Screen		*sc;
struct PubScreenNode	*pubnode;
{
    struct IntuitionBase *IBase = fetchIBase();

    /* links	*/
    pubnode->psn_Screen = sc;
    XSC(sc)->PSNode = pubnode;
    /* The node itself is on the PendingPubScreens list, so we
     * need to remove it from there...
     */
    Remove( pubnode );
    AddTail( &IBase->PubScreenList, pubnode );
}

/* MUST be called inside LOCKIBASE!
 * atomic test-and-commit for the removal of a pubscreen
 *	check for no visitors (try makePrivate)
 *	delink psnode
 *	clear default node, if this is it
 *	free pub node
 *
 * returns FALSE if you may not close the screen.
 */
freePubScreenNode( psn )
struct PubScreenNode	*psn;
{
    struct IntuitionBase	*IBase = fetchIBase();
    int				retval = TRUE;

    if ( psn )
    {
	assertLock( "freePubScreenNode", IBASELOCK );

	if ( psn->psn_VisitorCount )
	{
	    DVC( printf("freePSN: deny screen closing, count = %ld\n",	
		psn->psn_VisitorCount ) );

	    retval = FALSE;	/* ! */
	}
	else
	{
	    Remove( psn );

	    /* was this node's screen the default?	*/
	    if ( IBase->DefaultPubScreen == psn )
	    {
		IBase->DefaultPubScreen = NULL;
	    }

	    FreeVec( psn );
	}
    }

    return ( retval );
}

bumpPSNVisitor( psn )
struct PubScreenNode	*psn;
{
    if ( psn )
    {
	DVC( printf("bumpPSNV, screen %lx, count %lx\n",
		psn->psn_Screen, psn->psn_VisitorCount+1 ) );
	return ( ++psn->psn_VisitorCount );
    }
    DVC( printf("bumpPSNVisitor for NULL psn\n"));
    return ( 0 );
}

decPSNVisitor( psn )
struct PubScreenNode	*psn;
{
    if ( psn )
    {
	DVC( printf("decPSNV, screen %lx, count %lx\n",
		psn->psn_Screen, psn->psn_VisitorCount - 1) );
	return( --psn->psn_VisitorCount );
    }
    DVC( printf("decPSNVisitor for NULL psn\n"));
    return ( 0 );
}

/* Like FindName(), but case-insensitive */
struct Node *
findNameNC( list, name )
struct List *list;
STRPTR name;
{
    struct Node *node;

    node = list->lh_Head;
    while ( ( node->ln_Succ ) && Stricmp( node->ln_Name, name ) )
    {
	node = node->ln_Succ;
    }
    if ( !node->ln_Succ )
    {
	node = NULL;
    }
    return( node );
}
@


38.8
log
@freePubScreenNode() now relies on caller to LOCKIBASE().  Fixed hole
in pubscreen name uniqueness test.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.7 93/01/14 14:38:29 peter Exp Locker: peter $
d60 6
a65 1
    /* LOCKIBASE(); VC++ is good enough to keep the screen around */
d83 1
a83 1
    /* UNLOCKIBASE(); */
@


38.7
log
@Fixed a type warning 
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.6 93/01/14 14:28:48 peter Exp Locker: peter $
a173 1
#if 1
a175 4
#else
    if  ( psn = fetchIBase()->DefaultPubScreen ) 
	pubname = psn->psn_Node.ln_Name;
    else pubname = WBPUBNAME;
a176 2
#endif

d381 3
a383 3
#if 1	/* do this so that IBASELOCK isn't held around
	 * openSysScreen().  jimm: 6/6/90.
	 */
a393 13
#else
    D( printf("dPS: default is: %lx\n", IBase->DefaultPubScreen ) );
    if ( IBase->DefaultPubScreen )
    {
	bumpPSNVisitor( IBase->DefaultPubScreen );
	return ( IBase->DefaultPubScreen->psn_Screen );
    }
    else
    {
	D( printf( "dPS: default is WB \n") );
	return ( openSysScreen( WBENCHSCREEN ) );	/* does VC++ */
    }
#endif
d396 16
a411 5
/*
 * oops: so it's not unique, then who makes sure that
 * nobody opens one of the same name right after we
 * check?  Solution will be to hold IBASELOCK around
 * initPubScreen/linkPubScreen.
d413 1
d426 4
a429 1
    /* name uniqueness check	*/
d432 1
a432 2
    UNLOCKIBASE();
    if ( pubnode )
d434 2
a435 2
	*errorptr = OSERR_PUBNOTUNIQUE;
	return ( NULL );
d437 13
d451 7
a457 25
    /* add string buffer after node	*/
    psnsize = sizeof ( struct PubScreenNode ) + strlen( pubname ) + 1;
    pubnode = (struct PubScreenNode *) AllocVec( psnsize,
	MEMF_CLEAR | MEMF_PUBLIC );	
    if ( ! pubnode )
    {
	*errorptr = OSERR_NOMEM;
	return ( NULL );	/* ZZZ: tell him why? */
    }

    pubnode->psn_Size = psnsize;

    pubnode->psn_SigTask = pubtask;
    pubnode->psn_SigBit = pubsig;

    /* use current task if valid sig specified (but not task)	*/
    if (  pubsig != -1 && ! pubnode->psn_SigTask )
    {
	pubnode->psn_SigTask = FindTask( 0L );
    }
    pubnode->psn_Node.ln_Name = (UBYTE *) &pubnode[ 1 ];
    jstrncpy( &pubnode[ 1 ], pubname, MAXPUBSCREENNAME );

    /* start 'em out private	*/
    SETFLAG( pubnode->psn_Flags, PSNF_PRIVATE );
d459 3
a461 1
    D( printf("iPS: pub screen init first part done.\n") );
d463 17
a479 1
    /* still need to back link with screen and add to list */
d485 2
a486 2
 * called only by OpenScreen: has IBASELOCK (but needs more
 * protection to ensure uniqueness: see initPubScreen().
d497 4
d504 2
a505 1
/* atomic test-and-commit for the removal of a pubscreen
a509 1
 * does its own LOCKIBASE()
d521 1
a521 1
	LOCKIBASE();
a541 2

	UNLOCKIBASE();
a545 17

#if 0	/* we use freePubScreenNode() */
/*
 * returns visitor count for a public screen, 
 * or 0 for non-public (or NULL) screen.
 */
screenVisitorCount( sc )
struct Screen	*sc;
{
    if ( sc && XSC(sc)->PSNode )
    {
	return ( XSC(sc)->PSNode->psn_VisitorCount );
    }
    return ( 0 );
}
#endif

@


38.6
log
@Public screen list is now case-insensitive.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.5 92/04/07 17:56:15 peter Exp Locker: peter $
a432 1
    int				found_one;
d436 1
a436 1
    found_one = findNameNC( &IBase->PubScreenList, pubname );
d438 1
a438 1
    if ( found_one )
@


38.5
log
@Removed unused vble.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.4 92/04/01 15:07:14 peter Exp Locker: peter $
d16 1
d333 1
a333 1
		FindName( &fetchIBase()->PubScreenList, name ) );
d355 1
a355 1
	    /* Peter 14-Nov-90: Mostly fix race condition.  FindName()
d365 1
a365 1
			FindName( &fetchIBase()->PubScreenList, name ) );
a435 1
#if 1
d437 1
a437 1
    found_one = FindName( &IBase->PubScreenList, pubname );
a443 7
#else
    if ( FindName( &IBase->PubScreenList, pubname ) )
    {
	*errorptr = OSERR_PUBNOTUNIQUE;
	return ( NULL );
    }
#endif
d580 20
@


38.4
log
@Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.3 91/10/17 14:29:30 peter Exp Locker: peter $
a282 1
    struct IntuitionBase 	*IBase = fetchIBase();
@


38.3
log
@Put warning about buffer overwrite into NextPubScreen() autodoc.
Fixed buffer overwrite bug.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.2 91/07/10 17:59:52 peter Exp Locker: peter $
d19 1
a20 49
/****** intuition.library/LockPubScreen *************************************
*
*    NAME
*	LockPubScreen -- Prevent a public screen from closing. (V36)
*
*    SYNOPSIS
*	screen = LockPubScreen( Name )
*	D0                      A0
*
*	struct Screen *LockPubScreen( UBYTE * );
*
*    FUNCTION
*	Prevents a public screen (or the Workbench) from closing
*	while you examine it in preparation of opening a visitor window.
*
*	The sequence you use to open a visitor window that needs to
*	examine fields in the screen it is about to open on is:
*		LockPubScreen()
*		... examine fields ...
*		OpenWindow() on public screen
*		UnlockPubScreen()
*		... use your window ...
*		CloseWindow()
*
*    NOTE 
*	You needn't hold the "pubscreen lock" for the duration that
*	your window is opened.  LockPubScreen() basically has the
*	same effect as an open visitor window: it prevents the
*	screen from being closed.
*
*	If you pass the string "Workbench" or you pass NULL and there
*	is no default public screen, the Workbench screen will
*	be automatically opened if it is not already present.
*
*    INPUTS
*	Name = name string for public screen or NULL for default public
*	screen.  The string "Workbench" indicates the Workbench
*	screen.
*
*    RESULT
*	Returns pointer to a screen, if successful, else NULL.
*	The call can fail for reasons including that the named
*	public screen doesn't exist or is in private state.
*
*    BUGS
*
*    SEE ALSO
*	OpenWindow(), UnlockPubScreen(), GetScreenData()
*****************************************************************************/
d51 1
a52 38
/****** intuition.library/UnlockPubScreen *************************************
*
*    NAME
*	UnlockPubScreen -- Release lock on a public screen. (V36)
*
*    SYNOPSIS
*	UnlockPubScreen( Name, [Screen] )
*			 A0    A1
*
*	VOID UnlockPubScreen( UBYTE *, struct Screen * );
*
*    FUNCTION
*	Releases lock gotten by LockPubScreen().
*	It is best to identify the locked public screen by
*	the pointer returned from LockPubScreen().  To do this,
*	supply a NULL 'Name' pointer and the screen pointer.
*
*	In rare circumstances where it would be more convenient to pass
*	a non-NULL pointer to the public screen name string, the
*	'Screen' parameter is ignored.
*
*    INPUTS
*	Name = pointer to name of public screen.  If Name is NULL,
*	    then argument 'Screen' is used as a direct pointer to
*	    a public screen.
*	Screen = pointer to a public screen.  Used only if Name
*	    is NULL.  This pointer MUST have been returned
*	    by LockPubScreen().
*	    It is safe to call UnlockPubScreen() with NULL Name
*	    and Screen (the function will have no effect).
*
*    RESULT
*
*    BUGS
*
*    SEE ALSO
*	LockPubScreen()
*****************************************************************************/
d79 1
a80 34
/****** intuition.library/LockPubScreenList **********************************
*
*    NAME
*	LockPubScreenList -- Prevent changes to the system list. (V36)
*
*    SYNOPSIS
*	List = LockPubScreenList()
*	D0
*
*	struct List *LockPubScreenList( VOID );
*
*    FUNCTION
*	Arbitrates access to public screen list	while you quickly
*	make a copy of it for display to the user.
*
*	Note that this is intended only for the Public Screen Manager
*	program.
*
*    NOTES
*	The nodes on the list are PubScreenNode structures.
*	Act quickly while holding this lock.  The restrictions
*	on LockIBase() apply here as well.
*
*    INPUTS
*	None.
*
*    RESULT
*	A pointer to the public screen list.
*
*    BUGS
*
*    SEE ALSO
*	OpenScreen(), Intuition V36 update documentation	
*****************************************************************************/
d87 1
a88 24
/****** intuition.library/UnlockPubScreenList *******************************
*
*    NAME
*	UnlockPubScreenList -- Release public screen list semaphore. (V36)
*
*    SYNOPSIS
*	UnlockPubScreenList()
*
*	VOID UnlockPubScreenList( VOID );
*
*    FUNCTION
*	Releases lock gotten by LockPubScreenList().
*
*    INPUTS
*	None.
*
*    RESULT
*	None.
*
*    BUGS
*
*    SEE ALSO
*	LockPubScreenList()
*****************************************************************************/
d95 1
a96 45
/****** intuition.library/NextPubScreen *************************************
*
*    NAME
*	NextPubScreen -- Identify next public screen in the cycle. (V36)
*
*    SYNOPSIS
*	Buff = NextPubScreen( Screen, NameBuff )
*	D0                    A0      A1
*
*	UBYTE *NextPubScreen( struct Screen *, UBYTE * );
*
*    FUNCTION
*	Returns name of next public screen in system rotation, to
*	allow visitor windows to provide function to "jump" among
*	public-screens in a cycle.
*
*    INPUTS
*	Screen = pointer to the screen your window is currently open in,
*	  or NULL, if you don't have a pointer to a public screen.
*	NameBuff = pointer to a buffer of MAXPUBSCREENNAME+1 characters,
*	  for Intuition to fill in with the name of the next public
*	  screen in rotation.
*
*    RESULT
*	Returns NULL if there are no public screens, otherwise a
*	pointer to your NameBuff.
*
*    NOTES
*	There is no guarantee that the public screen whose name
*	was returned by this function will exist or be in "public" state
*	by the time you call LockPubScreen(), etc.  You must handle
*	cases where LockPubScreen(), etc. will fail.
*
*    BUGS
*	Due to a bug, your buffer needs to be (MAXPUBSCREENNAME + 1)
*	characters big, which is one more than originally documented.
*
*	The starting screen and cycle order of the public screens isn't
*	defined, so do not draw conclusions about the order you
*	see in the current version of Intuition.  We reserve the
*	right to add meaning to the ordering at a future time.
*
*    SEE ALSO
*	OpenScreen(), Intuition V36 update documentation	
*****************************************************************************/
d138 1
a139 31
/****** intuition.library/SetDefaultPubScreen *******************************
*
*    NAME
*	SetDefaultPubScreen -- Choose a new default public screen. (V36)
*
*    SYNOPSIS
*	SetDefaultPubScreen( Name )
*			     A0
*
*	VOID SetDefaultPubScreen( UBYTE * );
*
*    FUNCTION
*	Establishes a new default public screen for visitor windows.
*
*	This screen is used by windows asking for a named public screen
*	that doesn't exist and the FALLBACK option is selected, and for
*	windows asking for the default public screen directly.
*
*    INPUTS
*	Name = name of chosen public screen to be the new default.
*	A value of NULL means that the Workbench screen is to
*	be the default public screen.
*
*    RESULT
*	None
*
*    BUGS
*
*    SEE ALSO
*	OpenWindow(), OpenScreen(), Intuition V36 update documentation	
*****************************************************************************/
d164 2
a165 41
}
/****** intuition.library/GetDefaultPubScreen *******************************
*
*    NAME
*	GetDefaultPubScreen -- Get name of default public screen. (V36)
*
*    SYNOPSIS
*	GetDefaultPubScreen( Namebuff )
*			     A0
*
*	VOID GetDefaultPubScreen( UBYTE * );
*
*    FUNCTION
*	Provides the name of the current default public screen.
*	Only anticipated use is for Public Screen Manager utilities,
*	since it is easy to open a visitor window on the default
*	public screen without specifying the name.
*
*    INPUTS
*	Namebuff = a buffer of MAXPUBSCREENNAME.  This can be NULL.
*
*    RESULT
*	None.  Will provide the string "Workbench" in Namebuff if there
*	is no current default public screen.
*
*    NOTE
*	This function actually "returns" in register D0 a pointer
*	to the public screen.  Unfortunately, the lifespan of
*	this pointer is not ensured; the screen could be closed
*	at any time.  The *ONLY* legitimate use we can see for
*	this return value is to compare for identity with the pointer
*	to a public screen you either have a window open in, or
*	a lock on using LockPubScreen(), to determine if that
*	screen is in fact the default screen.
*
*    BUGS
*	The function prototype does not reflect the return value.
*
*    SEE ALSO
*	SetDefaultPubScreen(), OpenWindow()
*****************************************************************************/
d196 1
a197 29
/****** intuition.library/SetPubScreenModes *********************************
*
*    NAME
*	SetPubScreenModes -- Establish global public screen behavior. (V36)
*
*    SYNOPSIS
*	OldModes = SetPubScreenModes( Modes )
*	D0                            D0
*
*	UWORD SetPubScreenModes( UWORD );
*	
*    FUNCTION
*    	Sets GLOBAL Intuition public screen modes.	
*
*    INPUTS
*	Modes = new global modes flags.  Values for flag bits are:
*	  SHANGHAI: workbench windows are to be opened on the
*		default public screen
*	  POPPUBSCREEN: when a visitor window is opened, the public
*		screen it opens on is to be brought to the front.
*
*    RESULT
*	OldModes = previous global mode settings
*
*    BUGS
*
*    SEE ALSO
*	OpenScreen(), Intuition V36 update documentation	
*****************************************************************************/
d212 1
a213 36
/****** intuition.library/PubScreenStatus **********************************
*
*    NAME
*	PubScreenStatus -- Change status flags for a public screen. (V36)
*
*    SYNOPSIS
*	ResultFlags = PubScreenStatus( Screen, StatusFlags )
*	D0		   	       A0      D0
*
*	UWORD PubScreenStatus( struct Screen *, UWORD );
*
*    FUNCTION
*	Changes status flags for a given public screen.
*
*	Do not apply this function to a screen if your program
*	isn't the screen's "owner", in particular, don't call
*	this function for the Workbench screen.
*
*    INPUTS
*	Screen = pointer to public screen
*	StatusFlags = values currently:
*	  PSNF_PRIVATE: make this screen unavailable to visitor windows
*
*    RESULT
*	Returns 0 in the lowest order bit of the return value
*	if the screen wasn't public, or because it can not be taken
*	private because visitors are open in it.
*
*	All other bits in the return code are reserved for future
*	enhancement.
*
*    BUGS
*
*    SEE ALSO
*	OpenScreen(), Intuition V36 update documentation	
*****************************************************************************/
@


38.2
log
@findPubScreen() now fails if screens is private; simplifies code.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.1 91/06/24 12:15:44 peter Exp Locker: peter $
d256 1
a256 1
*	NameBuff = pointer to a buffer of MAXPUBSCREENNAME characters,
d271 3
d314 1
a314 1
	namebuf[ MAXPUBSCREENNAME ] = '\0';	/* bein' sure */
@


38.1
log
@initPubScreen() no longer takes a remember-key.  Now uses AllocVec.
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 38.0 91/06/12 14:29:14 peter Exp Locker: peter $
d90 2
a91 10
	/* Peter 14-Aug-90: LockPS now fails if screen is private */
	if ( ! TESTFLAG( psn->psn_Flags, PSNF_PRIVATE ) )
	{
	    retval = psn->psn_Screen;
	}
	else
	{
	    /* undo the VC++ */
	    decPSNVisitor( psn );
	}
d154 1
a154 1
/* Peter: 7-Aug-90 - signal pubscreen owner here too */
d365 1
a365 4
	    if ( ! TESTFLAG( psn->psn_Flags, PSNF_PRIVATE ) )
	    {
		IBase->DefaultPubScreen = psn;
	    }
d608 2
a609 2
	/* if no find, or found but private     */
	if ( (! psn) || TESTFLAG( psn->psn_Flags, PSNF_PRIVATE ) )
a610 3
	    /* Peter 23-Apr-91: If private, we'd better undo VC++ */
	    decPSNVisitor( psn );

a639 1
#if 1	/* open WB screen, if that's what they're looking for	*/
d648 9
d661 1
a683 5

#else
    return ( (struct PubScreenNode *)
	FindName( &fetchIBase()->PubScreenList, name ) );
#endif
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: pubscreen.c,v 1.33 91/04/24 13:16:00 peter Exp $
d747 1
a747 1
initPubScreen( pubname, pubtask, pubsig, key, errorptr )
a750 1
struct Remember **key;
d779 2
a780 2
    pubnode = (struct PubScreenNode *) AllocRemember( key,
	psnsize, MEMF_CLEAR | MEMF_PUBLIC );	
d862 1
a862 1
	    FreeMem( psn, psn->psn_Size );
@
