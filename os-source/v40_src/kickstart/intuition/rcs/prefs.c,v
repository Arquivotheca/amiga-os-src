head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.10 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.10 V39_2082:38.10 V39_2076:38.10 V39_2073:38.10 V39_2058:38.10 V39_2051:38.10 V39_2031:38.10 V39_2017:38.10 V39_2012:38.10 V39_1985:38.10 V39_1933:38.10 V39_1819:38.8 V39_1805:38.8 V39_1783:38.8 V39_1695:38.8 V39_1621:38.8 V39_1620:38.8 V39_1508:38.8 V39_1485:38.8 V39_1461:38.8 V39_1458:38.8 V39_1456:38.8 V39_1405:38.8 V39_1368:38.8 V39_1360:38.8 V39_1324:38.7 V39_1147:38.5 V39_1143:38.5 V39_1141:38.5 V39_1120:38.5 V39_1116:38.5 V39_1104:38.5 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.3 V39_702:38.3 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.3 V39_495:38.3 V39_416:38.3 V39_383:38.3 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.2 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.2 V39_171:38.2 V39_161:38.2 V38_159:38.2 V38_116:38.2 V38_59:38.2;
locks    ; strict;
comment  @*   @;


38.11
date     93.01.12.16.20.10;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.08.03.15.55.29;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.08.02.12.43.45;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.27.11.54.36;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.21.17.43.29;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.05.15.14.08.39;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.07.17.55.59;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.02.12.06.58;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.07.11.07.24;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.10.18.11.07;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.19.18.06.15;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.28.32;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@IBase->MouseScaleX replaces MOUSESCALEX.
@
text
@

/*** prefs.c *****************************************************************
 *
 *  the intuition preferences routines
 *
 *  $Id: prefs.c,v 38.10 92/08/03 15:55:29 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1985, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"

#include "preferences.h"

#ifndef DEVICES_INPUT_H
#include <devices/input.h>
#endif

#define D(x)		;
#define DCOLORS(x)	;

#define VIEWINITYMINREQ		\
(((SHORT) &((struct Preferences *)0)->ViewInitY)+(sizeof (WORD)))

#define POINTERMATRIXMINREQ \
(((SHORT) ((struct Preferences *)0)->PointerMatrix)+POINTERSIZE*(sizeof (USHORT)))

struct Preferences DefaultPreferences =
    {
    /* the default font height */
    TOPAZ_SIXTY,		/* BYTE FontHeight; default is low-res */

    /* the default printer port usage */
    PARALLEL_PRINTER,			/* UBYTE PrinterPort; */

    /* default baud rate */
    BAUD_9600,				/* USHORT BaudRate */

    /* various timing rates */
    { KEYREPSEC, KEYREPMIC, },		/* struct timeval KeyRptSpeed; */
    { KEYDELSEC, KEYDELMIC,},		/* struct timeval KeyRptDelay; */
    { MOUSEDBLSEC, MOUSEDBLMIC,},	/* struct timeval DoubleClick; */

    /* Intuition Pointer data */
    {
	0x0000, 0x0000,	/* USHORT PointerMatrix[POINTERSIZE];  */

	0xC000, 0x4000,
	0x7000, 0xB000,
	0x3C00, 0x4C00,
	0x3F00, 0x4300,

	0x1FC0, 0x20C0,
	0x1FC0, 0x2000,
	0x0F00, 0x1100,
	0x0D80, 0x1280,

	0x04C0, 0x0940,
	0x0460, 0x08A0,
	0x0020, 0x0040,
	0x0000, 0x0000

	0x0000, 0x0000,
	0x0000, 0x0000,
	0x0000, 0x0000,
	0x0000, 0x0000,

	0x0000, 0x0000,
    },
    POINTERX,		/* BYTE XOffset; */
    POINTERY,		/* BYTE YOffset; */
    COLOR17,		/* USHORT color17; */
    COLOR18,		/* USHORT color18; */
    COLOR19,		/* USHORT color19; */
    POINTERTICKS,	/* USHORT PointerTicks; */

    /* Workbench Screen colors */
    COLOR0,		/* USHORT color0; */
    COLOR1,		/* USHORT color1; */
    COLOR2,		/* USHORT color2; */
    COLOR3,		/* USHORT color3; */

    /* positioning data for the Intuition View */
    VIEWX,		/* USHORT ViewXOffset; */
    VIEWY,		/* USHORT ViewYOffset; */
    0, 0,		/* WORD ViewInitX, ViewInitY */

    ENABLECLI,		/* BOOL EnableCLI; */

    /* printer configurations */
    PRINTERTYPE,		/* USHORT PrinterType; */

	/** jimm: 11/18/85: changed to non-null default name **/
    {"generic"},	/* UBYTE PrinterFilename[FILENAME_SIZE]; */

    /* print format and quality configurations */
    PRINTPITCH,		/* BYTE PrintPitch; */
    PRINTQUALITY,	/* BYTE PrintQuality; */
    PRINTSPACING,	/* BYTE PrintSpacing; */
    PRINTLEFTMARGIN,	/* UWORD PrintLeftMargin; */
    PRINTRIGHTMARGIN,	/* UWORD PrintRightMargin; */
    PRINTINVERSE,	/* BYTE PrintInverse; */
    PRINTASPECT,	/* BYTE PrintAspect; */
    PRINTSHADE,		/* BYTE PrintShade; */
    PRINTTHRESHOLD,	/* WORD PrintThreshold; */

    /* print paper descriptors */
    PAPERSIZE,		/* BYTE PaperSize; */
    PAPERLENGTH,	/* UWORD PaperLength; */
    PAPERTYPE,		/* BYTE PaperType; */

    /* Serial device settings: These are six nibble-fields in three bytes */
    /* (these look a little strange so the defaults will map out to zero) */ 

    0, 				/* UBYTE   SerRWBits;  */
    0, 				/* UBYTE   SerStopBuf; */
    0, 				/* UBYTE   SerParShk;  */
    0, 				/* UBYTE   LaceWB;	  */
    { 0, }, 		/* UBYTE   Pad[ 12 ] */
    { 0, }, 		/* UBYTE   PrtDevName[DEVNAME_SIZE]; */
    0,  			/* BYTE    DefaultPrtUnit; */
    0,  			/* BYTE    DefaultSerUnit; */
    0,  			/* BYTE    RowSizeChange; */
    0,				/* BYTE    ColumnSizeChange; */

    0,				/* UWORD   PrintFlags */
    0,				/* UWORD   PrintMaxWidth */
    0,				/* UWORD   PrintMaxHeight */
    0,				/* UBYTE   PrintDensity */
    0,				/* UBYTE   PrintXOffset */

    0,				/* UWORD   wb_Width  */
    0,				/* UWORD   wb_Height */
    0,				/* UBYTE   wb_Depth  */

    0,				/* UBYTE ext_size;  */  
};


/*** intuition.library/GetDefPrefs ***/

struct Preferences *GetDefPrefs(preferences, size)
struct Preferences *preferences;
int size;
{
    /* JON PRINCE SEZ:
    ** Set the system defaults
    ** Used for total reset and loss or corruption of the data file
    */

    copyprefs(&DefaultPreferences, size, preferences);

    return(preferences);
}



/*** intuition.library/GetPrefs ***/

struct Preferences *GetPrefs(preferences, size)
struct Preferences *preferences;
int size;
{
    struct IntuitionBase *IBase = fetchIBase();

    /* NOTE FROM JON:
    ** Does this mean that the current preferences have been
    ** requested, or has the stupid user made yet another mistake
    ** One hopes for the former but unfortunately expects the
    ** latter. I just hope the argument is valid.
    ** Let's just fill it in anyway - Thats what I'm here for!
    */

    copyprefs(IBase->Preferences, size, preferences);

    return(preferences);
}



/*** intuition.library/SetPrefs ***/


/* Intuitionface.asm calls here through stackSwap() */

struct Preferences *setPrefs(preferences, size, RealThing)
struct Preferences *preferences;
int size;
BOOL RealThing;
{
    struct IntuitionBase *IBase = fetchIBase();

    D( printf("SP: realthing: %ld\n", RealThing) );

    copyprefs(preferences, size, IBase->Preferences);

    D( printf("SetPrefs calling syncIP\n") );
    syncIPrefs( size );	/* initialize new prefs by old prefs, once */

    setIBasePrefs();

    D( printf("SP:sIBP returned\n"));

    if ( RealThing ) sendISM( itNEWPREFS );

    /* Certain things may only happen once */
    IBase->Flags |= SEENSETPREFS|SEENIPOINTER;

    return(preferences);
}


copyprefs(from, size, to)
struct Preferences *from, *to;
int size;
{
    struct IntuitionBase *IBase = fetchIBase();

    if (size <= 0)
	return(0);

	/* bart - 08.07.87 support extended preferences structure */

    if (size > sizeof(struct Preferences)) size = sizeof(struct Preferences);

    CopyMem(from, to, size);

    if (size >= VIEWINITYMINREQ)
    {
	to->ViewInitX = IBase->ViewInitX;
	to->ViewInitY = IBase->ViewInitY;
    }
}


setIBasePrefs()
/* sets up IBase based on the values currently in IBase->Preferences */
{
    struct Preferences *Pref;
    struct Screen *workscreen;
    struct IntuitionBase *IBase = fetchIBase();
    struct GfxBase *gb;
    int i;
    /* jimm: */
    struct	Screen	*WBScreen;
    struct Rectangle *rect;
    struct	Screen	*findWorkBench();
    UWORD	dflags;

    D( printf("sIBP\n") );

    LOCKIBASE();

    gb = IBase->GfxBase;
    Pref = IBase->Preferences;

    IBase->DoubleSeconds = Pref->DoubleClick.tv_secs;
    IBase->DoubleMicros = Pref->DoubleClick.tv_micro;

    /* cache copy of original gfx NormalDisplayRows/Cols,
     * so SizeChange can be applied every prefs time
     */
    if( ! (IBase->Flags & SEENSETPREFS) ) 
    {
	IBase->OrigNDRows = gb->NormalDisplayRows;
	IBase->OrigNDCols = gb->NormalDisplayColumns;
    }

    /*
     * wb_Width/Height will be used for workbench, but old
     * morerows stuff still specifies normal width/height
     * Peter 30-Jan-91:  Maintain V34 private IntuitionBase fields
     * MaxDisplayHeight and MaxDisplayWidth for TV*Text.
     */
    IBase->MaxDisplayHeight = ( gb->NormalDisplayRows =
	IBase->OrigNDRows + Pref->RowSizeChange ) << 1;
    IBase->MaxDisplayWidth = gb->NormalDisplayColumns =
	IBase->OrigNDCols + Pref->ColumnSizeChange;

    /* Reset mouse limits for new view position	*/
    freeMouse();

    /* determine effective mouse scale factor	*/
    IBase->EffectiveScaleFactor.X = IBase->MouseScaleX / Pref->PointerTicks;
    IBase->EffectiveScaleFactor.Y = IBase->MouseScaleY / Pref->PointerTicks;

    /* Pointer changes through old-SetPrefs now happen inside
     * syncIPrefs.
     */

    /* parameter removed by jimm, 11/4/85
     * documentation and interface require no
     * parameter.  FetchIBase() used instead.
     */
    RemakeDisplay();
    updateMousePointer(NULL);

    if (IBase->InputRequest.io_Device)
    {
	CopyMem(&IBase->InputRequest, &IBase->IOExcess,
	    sizeof(struct timerequest));
	IBase->IOExcess.tr_node.io_Command = IND_SETTHRESH;
	IBase->IOExcess.tr_time.tv_secs = Pref->KeyRptDelay.tv_secs;
	IBase->IOExcess.tr_time.tv_micro = Pref->KeyRptDelay.tv_micro;
	DoIO(&IBase->IOExcess);
	IBase->IOExcess.tr_node.io_Command = IND_SETPERIOD;
	IBase->IOExcess.tr_time.tv_secs = Pref->KeyRptSpeed.tv_secs;
	IBase->IOExcess.tr_time.tv_micro = Pref->KeyRptSpeed.tv_micro;
	DoIO(&IBase->IOExcess);
    }
    UNLOCKIBASE();
}

setWBColorsGrunt( screen, allcolors )
struct Screen *screen;
{
    int depth;

    DCOLORS( printf("sWBCG: sc %lx\n", screen ));

    if ( !screen ) return;

    depth = screen->RastPort.BitMap->Depth;

    /* Set the first four IBase colors into the first
     * four colors of the screen
     */
    setWBColorsGruntGrunt( screen, 0, 4, WBCOLOR_FIRST4 );

    /* If allcolors were requested, put the next four IBase
     * colors into the last four colors of the screen.
     */
    if ( ( allcolors ) && ( depth > 2 ) )
    {
	setWBColorsGruntGrunt( screen, XSC(screen)->LastColor-3, 4, WBCOLOR_LAST4 );
    }
    /* And set the sprite colors */
    setWBColorsGruntGrunt( screen, 17, 3, WBCOLOR_POINTER );
}

/* Do not call with numcolors > 4!! */

setWBColorsGruntGrunt( screen, firstcolor, numcolors, ibcolor )
struct Screen *screen;
int firstcolor, numcolors, ibcolor;
{
    /* One long for each of red, green, blue, plus a initialization
     * LONG and a terminator.
     */
    LONG loadtable[ 2 + (4) * 3];
    LONG *loadptr;
    UBYTE *colorptr;
    int i;
    struct IntuitionBase *IBase = fetchIBase();

    /* LoadRGB32() takes a table whose first word is the number
     * of colors, and whose second word is the first color to load.
     */
    *((UWORD *)loadtable) = numcolors;
    *(((UWORD *)loadtable)+1) = firstcolor;
    loadptr = &loadtable[1];

    colorptr = &IBase->WBColors[ 3*ibcolor ];

    DCOLORS( printf("sWBCGG screen %lx colorptr %lx\n", screen, colorptr ) );
    DCOLORS( printf("firstcolor %lx, numcolors %lx\n", firstcolor, numcolors));
    DCOLORS( printf("viewport at %lx\n", &screen->ViewPort ));

    for ( i = 0; i < 3*numcolors; i++ )
    {
	/* Move that byte into the high-byte */
	*loadptr++ = (*colorptr++)<<24;
    }
    /* Terminate that table! */
    *loadptr = 0;

    LoadRGB32( &screen->ViewPort, loadtable );
}
@


38.10
log
@syncIPrefs() now gets size parameter.  Other changes to support
pointer syncing.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.9 92/08/02 12:43:45 peter Exp Locker: peter $
d288 1
a288 1
    IBase->EffectiveScaleFactor.X = MOUSESCALEX / Pref->PointerTicks;
@


38.9
log
@Now use pe_SharableColors to determine the last settable color in the
palette.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.8 92/05/27 11:54:36 peter Exp Locker: peter $
a31 4
#if OLD_POINTER
extern USHORT RomPointer[];
#endif

d49 25
a73 1
    { 0, },		/* USHORT PointerMatrix[POINTERSIZE];  */
a156 6
#if OLD_POINTER
    if (size >= POINTERMATRIXMINREQ )
    {
	CopyMem( RomPointer, preferences->PointerMatrix, 2*POINTERSIZE );
    }
#endif
d202 1
a202 1
    syncIPrefs();	/* initialize new prefs by old prefs, once */
d211 1
a211 1
    IBase->Flags |= SEENSETPREFS;
@


38.8
log
@New processing of WBColors.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.7 92/05/21 17:43:29 peter Exp Locker: peter $
d325 1
a325 1
	setWBColorsGruntGrunt( screen, (1<<depth)-4, 4, WBCOLOR_LAST4 );
@


38.7
log
@setWBColorsGruntGrunt() knows about 32 bits-per-gun.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.6 92/05/15 14:08:39 peter Exp Locker: peter $
d304 1
a304 2

setWBColorsGrunt(screen, allcolors)
d307 1
a307 2
    /* By default, set them all */
    int numcolors = NUM_WB_COLORS;
d313 4
a316 2
    /* We don't want all.  Just set the sprite colors, then set
     * the first four...
d318 6
a323 2

    if ( !allcolors )
d325 1
a325 2
	setWBColorsGruntGrunt(screen, 3, 17);
	numcolors = 4;
d327 2
a328 1
    setWBColorsGruntGrunt(screen, numcolors, 0 );
d331 1
a331 1
/* Do not call with numcolors > NUM_WB_COLORS!! */
d333 1
a333 1
setWBColorsGruntGrunt( screen, numcolors, firstcolor )
d335 1
a335 1
int numcolors, firstcolor;
d340 1
a340 1
    LONG loadtable[ 2 + NUM_WB_COLORS * 3];
d353 1
a353 1
    colorptr = &IBase->WBColors[ 3*firstcolor ];
@


38.6
log
@Added missing LOCKIBASE().
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.5 92/04/07 17:55:59 peter Exp Locker: peter $
d308 2
a309 1
    struct IntuitionBase *IBase = fetchIBase();
d315 5
a319 1
    if ( allcolors )
d321 2
a322 6
	setWBColorsGruntGrunt(screen, &IBase->WBColors[0], NUM_WB_COLORS, 0 );
    }
    else
    {
	setWBColorsGruntGrunt(screen, &IBase->WBColors[0], 4, 0);
	setWBColorsGruntGrunt(screen, &IBase->WBColors[17], 3, 17);
d324 1
d327 3
a329 1
setWBColorsGruntGrunt(screen, colorptr, colornum, colorstart)
d331 1
a331 2
USHORT *colorptr;
int colornum, colorstart;
d333 6
d340 1
a340 1
    USHORT color;
d342 9
d352 1
a352 1
    DCOLORS( printf("colorstart %lx, colornum %lx\n", colorstart, colornum));
d355 7
a361 8
    for(i = 0; i < colornum; i++)
	{
	color = *colorptr++;

	DCOLORS( printf("reg %lx, color %lx\n", colorstart, color ) );

	SetRGB4(&screen->ViewPort, colorstart++, 
		0xf & (color >> 8), 0xf & (color >> 4), 0xf & color);
d363 1
a363 1
	}
@


38.5
log
@Calls updateMousePointer() with NULL.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.4 92/04/02 12:06:58 peter Exp Locker: peter $
d242 2
d270 1
a270 1
    /* ZZZ: reset mouse limits for new view position	*/
d289 1
a289 1
	{
d300 2
a301 1
	}
@


38.4
log
@Renamed reportMouse() to updateMousePointer().  Evicted autodocs.  No
longer includes gfxbase.h.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.3 92/02/07 11:07:24 peter Exp Locker: peter $
d32 1
d34 1
a34 1

d137 1
d142 1
d284 1
a284 1
    updateMousePointer(FALSE);
@


38.3
log
@IPointer is now called RomPointer.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.2 91/07/10 18:11:07 peter Exp Locker: peter $
a18 4
#ifndef GRAPHICS_GFXBASE_H
#include <graphics/gfxbase.h>
#endif

d123 2
a124 41
/****** intuition.library/GetDefPrefs ****************************************
*
*    NAME
*	GetDefPrefs -- Get a copy of the the Intuition default Preferences.
*
*    SYNOPSIS
*	Prefs = GetDefPrefs( PrefBuffer, Size )
*	D0		     A0          D0
*
*	struct Preferences *GetDefPrefs( struct Preferences *, WORD );
*
*    FUNCTION
*	Gets a copy of the Intuition default preferences data.  Writes the
*	data into the buffer you specify.  The number of bytes you want
*	copied is specified by the size argument.
*
*	The default preferences are those that Intuition uses when it
*	is first opened.  If no preferences file is found, these are
*	the preferences that are used.  These would also be the startup
*	preferences in an AmigaDOS-less environment.
*   
*	It is legal to take a partial copy of the Preferences structure.
*	The more pertinent preferences variables have been grouped near
*	the top of the structure to facilitate the memory conservation
*	that can be had by taking a copy of only some of the Preferences
*	structure.
*
*    INPUTS
*	PrefBuffer = pointer to the memory buffer to receive your copy of the
*                Intuition Preferences structure
*	Size = the number of bytes in your PrefBuffer, the number of bytes
*          you want copied from the system's internal Preference settings
*
*    RESULT
*	Returns your parameter PrefBuffer.
*
*    BUGS
*
*    SEE ALSO
*	GetPrefs()
*****************************************************************************/
d145 2
a146 46
/****** intuition.library/GetPrefs ******************************************
*
*    NAME
*	GetPrefs -- Get the current Intuition Preferences structure.
*
*    SYNOPSIS
*	Prefs = GetPrefs( PrefBuffer, Size )
*	D0		  A0          D0
*
*	struct Preferences *GetPrefs( struct Preferences *, WORD );
*
*    FUNCTION
*	Gets a copy of the current Intuition Preferences structure.
*	Writes the data into the buffer you specify.  The number of bytes you
*	want copied is specified by the size argument.
*   
*	It is legal to take a partial copy of the Preferences structure.
*	The more pertinent preferences variables have been grouped near
*	the top of the structure to facilitate the memory conservation
*	that can be had by taking a copy of only some of the Preferences
*	structure.
*
*	New for V36:  A new and more extensible method for supplying
*	Preferences has been introduced in V36, and relies on file
*	system notification.  The Intuition preferences items rely
*	also on the IPrefs program.  Certain elements of the
*	Preferences structure have been superceded by this new method.
*	As much as possible, the Preferences structure returned by
*	GetPrefs() reflect the current state of Preferences.  However,
*	it is impossible to represent some of the V36-style preferences
*	items using the existing Preferences structure.
*
*    INPUTS
*	PrefBuffer = pointer to the memory buffer to receive your copy of the
*           Intuition Preferences
*	Size = the number of bytes in your PrefBuffer, the number of bytes
*           you want copied from the system's internal Preference settings
*
*    RESULT
*	Returns your parameter PrefBuffer.
*
*    BUGS
*
*    SEE ALSO
*	GetDefPrefs(), SetPrefs()
*****************************************************************************/
d168 2
a169 59
/****** intuition.library/SetPrefs ******************************************
*
*    NAME
*	SetPrefs -- Set Intuition preferences data.
*
*    SYNOPSIS
*	Prefs = SetPrefs( PrefBuffer, Size, Inform )
*	D0		  A0          D0    D1
*
*	struct Preferences *SetPrefs( struct Preferences *, LONG, BOOL );
*
*    FUNCTION
*	Sets new preferences values.  Copies the first 'Size' bytes
*	from your preferences buffer to the system preferences table,
*	and puts them into effect.
*
*	The 'Inform' parameter, if TRUE, indicates that an IDCMP_NEWPREFS
*	message is to be sent to all windows that have the IDCMP_NEWPREFS
*	IDCMPFlag set.
*   
*	It is legal to set a partial copy of the Preferences structure.
*	The most frequently changed values are grouped at the beginning
*	of the Preferences structure.
*
*	New for V36:  A new and more extensible method for supplying
*	Preferences has been introduced in V36, and relies on file
*	system notification.  The Intuition preferences items rely
*	also on the IPrefs program.  Certain elements of the
*	Preferences structure have been superceded by this new method.
*	Pointer changes submitted through SetPrefs() are only heeded
*	until the first time IPrefs informs Intuition of a V36-style
*	pointer.ilbm preferences file.  The Preferences FontHeight and
*	LaceWB fields are respected only from the system-configuration
*	file, and never thereafter.  As well, the view centering and
*	size apply only to the default monitor, and not to such modes
*	as Productivity.  Other fields may be superceded in the future.
*
*    INPUTS
*	PrefBuffer = pointer to the memory buffer which contains your
*	    desired settings for Intuition preferences
*	Size = the number of bytes in your PrefBuffer, the number of bytes
*           you want copied to the system's internal preference settings
*	Inform = whether you want the information of a new preferences
*	    setting propagated to all windows.
*
*    NOTES
*	Unless you are responding to a user's explicit request to
*	change Preferences (for example, you are writing a Preferences
*	editor), you should probably avoid using this function.
*	The user's Preferences should be respected, not overridden.
*
*    RESULT
*	Returns your parameter PrefBuffer.
*
*    BUGS
*
*    SEE ALSO
*	GetDefPrefs(), GetPrefs()
*****************************************************************************/
d281 1
a281 1
    reportMouse(FALSE);
@


38.2
log
@Initializes new fields to zeros.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.1 91/06/19 18:06:15 peter Exp Locker: peter $
d36 1
a36 1
extern USHORT IPointer[];
d181 1
a181 1
	CopyMem( IPointer, preferences->PointerMatrix, 2*POINTERSIZE );
@


38.1
log
@Removed obsolete code.
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 38.0 91/06/12 14:28:32 peter Exp Locker: peter $
d106 6
a111 3
    { 0, }, 		/* UBYTE   WorkName[FILENAME_SIZE]; */
    0,  			/* BYTE    sys_reserved1; */
    0,				/* BYTE    sys_reserved2; */
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
 *  $Id: prefs.c,v 36.30 91/02/12 18:17:18 peter Exp $
a26 2
#define PATCHWBFONTS 0

a72 3
#ifdef HEDLEY
	(-32-6)>>1,-5,
#else
a73 1
#endif
d81 1
a81 5
#if 0
    { 0, },		/* UBYTE PrinterFilename[FILENAME_SIZE]; */
#else
	{"generic"},
#endif
a175 1
#if 1
a179 4
#else
    copyPointer(size, preferences, TRUE);
#endif

a246 13
#if PATCHWBFONTS
    /* lie to that Workbench sumbitch	*/
    if (size == 1)
    {
	if (FindTask(0L) == FindTask("Workbench"))
	{
	    D( printf("GetPrefs: lying to Workbench, saying font height %ld\n",
		IBase->SysFont.ta_YSize) );
	    preferences->FontHeight = IBase->SysFont.ta_YSize;
	}
    }
#endif

a385 5
#if 0
    /* jimm: 12/29/87 -- support more than two fonts	*/
    changeSysFont( Pref->FontHeight );
#endif

a408 26
#if OLDOVERSCAN
    /* Initialize (or otherwise reset) standard limits in
     * view relative, hi-res, non-lace coordinates
     */
    /* Intuition standard screen position/dimension */
    rect = &IBase->TextOverscan;
    rect->MinX = rect->MinY = 0;
    rect->MaxX = gb->NormalDisplayColumns - 1;
    rect->MaxY = gb->NormalDisplayRows - 1;
    D( printf("prefs: NDRows: %ld\n", rect->MaxY) );

#if OLDMOUSECOORDS
    doubleRectWidth( rect );	/* TextOverscan is in mouse coords (1280x800) */
    quadRectHeight( rect );
    D( dumpRect("prefs: TextOverscan (and StdOverscan, too)", rect) );
#else
    rect->MinX *= MOUSESCALEX;
    rect->MaxX *= MOUSESCALEX;
    rect->MinY *= (2* IBase->MouseScaleY);
    rect->MaxY *= (2* IBase->MouseScaleY);
#endif

    /* ZZZ: copy to standard overscan, until it's real	*/
    IBase->StdOverscan = IBase->TextOverscan;
#endif

a412 23
#if 0	/* no more flying WB  font changes	*/
    changeWBFont();		/* jimm: 12/29/87 housekeeping	*/
#endif

#if 0
    /*  Color changes are now handled inside syncIPrefs */
#if 1
    CopyMem( &Pref->color0, &IBase->WBColors[0], 4 * sizeof (UWORD) );
    CopyMem( &Pref->color17, &IBase->WBColors[17], 3 * sizeof (UWORD) );
#else
    IBase->color0 = Pref->color0;
    IBase->color1 = Pref->color1;
    IBase->color2 = Pref->color2;
    IBase->color3 = Pref->color3;
    IBase->color17 = Pref->color17;
    IBase->color18 = Pref->color18;
    IBase->color19 = Pref->color19;
#endif
    /* set up only the 7 preferences colors */
    setWBColorsGrunt( findWorkBench(), FALSE );
#endif


a415 17
#if 0
    /* now, we have this code only if we 
     * want to have SetPrefs be the way to
     * change the pointer.  I'm using it for testing
     * to start with.
     */
#if 1
    setDefaultIPointer( Pref->PointerMatrix, 16,
	Pref->XOffset, Pref->YOffset, NULL );
#else
    IBase->IXOffset = Pref->XOffset;
    IBase->IYOffset = Pref->YOffset;
    if (IBase->IPointer == IBase->APointer)
    {
	IBase->AXOffset = Pref->XOffset;
	IBase->AYOffset = Pref->YOffset;
    }
a416 4
    copyPointer(sizeof(struct Preferences), Pref, FALSE);
#endif
#endif

a439 13
#if 0
setWBColors()
{
    struct Screen *workscreen;

    if (workscreen = (struct Screen *)findWorkBench())
    {
	setWBColorsGrunt(workscreen);
    }
}
#endif


a467 1
#if 1
d471 1
a471 1
#endif
a482 21


#define POINTEROFFSET (( (struct Preferences *)0)->PointerMatrix)

#if 0
copyPointer(size, pref, vanilla)
int size;
struct Preferences *pref;
BOOL vanilla;
{
    int i;
    struct IntuitionBase *IBase = fetchIBase();

    if (size >= POINTERMATRIXMINREQ )
	{
	for (i = 0; i < POINTERSIZE; i++)
	    if (vanilla) pref->PointerMatrix[i] = IPointer[i];
	    else *(IBase->IPointer + i) = pref->PointerMatrix[i];
	}
}
#endif
@
