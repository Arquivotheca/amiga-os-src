head     38.4;
branch   ;
access   ;
symbols  V40_85:38.4 V40_71:38.4 V40_68:38.4 V40_65:38.4 V40_47:38.4 V40_45:38.4 V40_37:38.4 V40_34:38.4 V40_29:38.4 V39_2415:38.4 V39_2369:38.4 V39_2339:38.4 V39_2332:38.4 V39_2275:38.4 V39_2256:38.4 V39_2210:38.4 V39_2192:38.4 V39_2084:38.4 V39_2082:38.4 V39_2076:38.4 V39_2073:38.4 V39_2058:38.4 V39_2051:38.4 V39_2031:38.4 V39_2017:38.4 V39_2012:38.4 V39_1985:38.4 V39_1933:38.4 V39_1819:38.4 V39_1805:38.4 V39_1783:38.4 V39_1695:38.4 V39_1621:38.3 V39_1620:38.3 V39_1508:38.3 V39_1485:38.3 V39_1461:38.3 V39_1458:38.3 V39_1456:38.3 V39_1405:38.3 V39_1368:38.3 V39_1360:38.3 V39_1324:38.3 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.1 V39_702:38.1 V39_557:38.1 V39_553:38.1 V39_551:38.1 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.4
date     92.07.07.15.22.14;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.05.21.17.42.51;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.02.21.40.09;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.17.59.14;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.27.56;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.4
log
@Removed unused local variable.  Pass NULL for new RastPort parameter
to renderNewKnob().
@
text
@/*** phooks.c ****************************************************************
 *
 *  Proportional Gadget Hooks
 *
 *  $Id: phooks.c,v 38.3 92/05/21 17:42:51 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1988, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"
#include "gadgetclass.h"

#define D(x)	;

#if 1
ULONG
propHook( h, g, cgp )
struct Hook		*h;
struct Gadget		*g;
ULONG			*cgp;	/* only interested in HookID	*/
{
    ULONG retval = 0;

    D( printf("propHook dispatcher h %lx, g %lx, msg %lx\n",
	h, g, cgp ) );

    switch ( (WORD) *cgp )
    {
#if 0
    case GM_SETUPINFO:
	retval = propSetupInfo( g, cgp );
	break;
#endif
    case GM_HITTEST:
        retval = GMR_GADGETHIT;	/* I have no special hit conditions	*/
	break;
    case GM_HELPTEST:
        retval = GMR_HELPHIT;
	break;
    case GM_RENDER:
	retval = propRender( g, cgp );
	break;
    case GM_GOACTIVE:
        retval = propGoActive( g, cgp );
	break;
    case GM_GOINACTIVE:
        retval = propGoInactive( g, cgp );
	break;
    case GM_HANDLEINPUT:
        retval = propHandleInput( g, cgp );
	break;
    }
    return ( retval );
}
#endif

#if 0
/*
 * this type of thing really should be done at on a one-time
 * basis in a hook called by gadgetInfo() 
 * ZZZ: per class data
 */
propSetupInfo( g, cgp )
struct Gadget		*g;
struct CGPSetupInfo	*cgp;
{
	return ( 0 );
}
#endif


propGoActive( g, cgp )
struct Gadget		*g;
struct gpInput	*cgp;
{
    struct IntuitionBase *IBase = fetchIBase();
    struct GadgetInfo	*gi = cgp->gpi_GInfo;
    struct PropInfo	*pi = (struct PropInfo *) g->SpecialInfo;

    struct Point	mouse;
    struct IBox		knobbox;
    int			fudge;

    /***** Initialize ActivePGX	****/
    setupPGX( g, gi, &IBase->ActivePGX );

    /***** KNOB HIT DETECTION ****/

    /* I assume that the select box has enjoyed a hit	*/
    mouse =  *( (struct Point *) &cgp->gpi_Mouse );

    /* test now for knob hit */
    getImageBox( g->GadgetRender, &knobbox );

    /* stretch that baby a little, for the good of User */
    knobbox.Top -= (fudge = pi->TopBorder);
    knobbox.Height += fudge << 1;
    knobbox.Left -= (fudge = pi->LeftBorder);
    knobbox.Width += fudge << 1;

    /* knob is in container coordinates, convert mouse to same */
    transfPoint( &mouse, *((struct Point * ) &pi->LeftBorder) );

    if ( ptInBox( mouse, &knobbox ) )
    {
	pi->Flags |= KNOBHIT;
    }
    else pi->Flags &= ~KNOBHIT;

    /*** SAVE INFORMATION NEEDED FOR DRAGGING ***/

    /* save mouse position...
     * ...get it relative to container...
     * ... then get mouse position relative to image
     */
    /* ZZZ: why window mouse, not gpi_Mouse?  I dunno.  Works. */
    currMouse( gi->gi_Window, &IBase->OldPt );

    /* ZZZ: NEW: cache a copy of the relativity box for
     * use in handleinput.
     */
    gadgetBox( g, gi, &IBase->ActiveGBox );

    /* get knob offset in container coords	*/
    gadgetPoint( g,gi,IBase->OldPt, &IBase->KnobOffset, &IBase->ActiveGBox);
    transfPoint( &IBase->KnobOffset, *((struct Point * ) &pi->LeftBorder) );

    /* use IFrame as a temp box data structure: think of "knob select box" */
    getImageBox( g->GadgetRender, &IBase->IFrame );
    transfPoint( &IBase->KnobOffset,  upperLeft( &IBase->IFrame ) );

    /* if this wasn't a KNOBHIT then we want to advance by one Body fraction
     * in response to a Container hit.
     */
    if ( !TESTFLAG( pi->Flags, KNOBHIT ))
    {
	/* increment pot variables depending on sign of KnobOffset */
	containerBumpPots( g, gi, IBase->KnobOffset, &IBase->IFrame );

	positionNewKnobForPots( g, gi, &IBase->ActivePGX );

	renderNewKnob( g, gi, &IBase->ActivePGX, NULL );
	return ( GMR_NOREUSE | GMR_VERIFY );
    }

    /** else KNOB HIT **/
	SETFLAG( g->Flags, SELECTED );
	safeDisplayProp( g, gi, &IBase->ActivePGX );
	return ( GMR_MEACTIVE );
}

propGoInactive( g, cgp )
struct Gadget		*g;
struct gpGoInactive	*cgp;
{
    D( printf("goinactive\n") );

    /* if he's not selected, I don't need to turn him off */
    if ( TESTFLAG( g->Flags, SELECTED ) )
    {
	CLEARFLAG( g->Flags, SELECTED );
	safeDisplayProp( g, cgp->gpgi_GInfo, &fetchIBase()->ActivePGX );
    }
}

propHandleInput( g, cgp )
struct Gadget		*g;
struct gpInput	*cgp;
{
    struct IntuitionBase *IBase = fetchIBase();
    struct GadgetInfo	*gi = cgp->gpi_GInfo;
    struct Window	*window = gi->gi_Window;

    if ((IBase->OldPt.X != window->MouseX)||(IBase->OldPt.Y!=window->MouseY))
    {
	/* save current mouse vals */
	currMouse( window, &IBase->OldPt );

	/* update pots for new mouse position, get new knob box */
	dragNewKnob( g, gi, IBase->OldPt, &IBase->ActiveGBox );
	    
	/* update visuals for new pots */
	renderNewKnob( g, gi, &IBase->ActivePGX, NULL );
    }

    if ( isSelectup( cgp->gpi_IEvent ) ) return ( GMR_NOREUSE | GMR_VERIFY );

    return ( GMR_MEACTIVE );
}

/*
 * calls display routine with lock on rastport
 */
safeDisplayProp( g, gi, pgx )
struct Gadget		*g;
struct GadgetIngo	*gi;
struct PGX		*pgx;
{
    struct RastPort	*rp;

    D( printf("safeDisplayProp\n") );

    rp = ObtainGIRPort( gi );
    D( printf("rastport: %lx\n", rp) );

    /* display routine	*/
    drawKnob( g, gi, rp, pgx );	/* if selected, will highlight */

    FreeGIRPort( rp );
}

#if 0
PFU	propHookTable[] = {
	propHitTest,	/* GM_HITTEST	*/
	propRender,	/* GM_RENDER	*/
	propGoActive,	/* GM_GOACTIVE	*/
	propGoInactive,	/* GM_GOINACTIVE	*/
	propHandleInput,	/* GM_HANDLEINPUT	*/
	propSetupInfo,	/* GM_SETUPINFO	*/
};

#endif
@


38.3
log
@Folded propHitTest() in-line.
@
text
@d5 1
a5 1
 *  $Id: phooks.c,v 38.2 92/04/02 21:40:09 peter Exp Locker: peter $
a80 1
    struct RastPort 	*rp;
d145 1
a145 1
	renderNewKnob( g, gi, &IBase->ActivePGX );
d186 1
a186 1
	renderNewKnob( g, gi, &IBase->ActivePGX );
@


38.2
log
@Responds to GM_HELPTEST.
@
text
@d5 1
a5 1
 *  $Id: phooks.c,v 38.1 91/07/10 17:59:14 peter Exp Locker: peter $
d38 1
a38 1
        retval =   propHitTest( g, cgp );
a73 6
propHitTest( g, cgp )
struct Gadget		*g;
struct gpHitTest	*cgp;
{
    return ( GMR_GADGETHIT );
}
@


38.1
log
@Removed unused variable redisplay.
@
text
@d5 1
a5 1
 *  $Id: phooks.c,v 38.0 91/06/12 14:27:56 peter Exp Locker: peter $
d39 3
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: phooks.c,v 1.12 90/10/24 14:01:28 peter Exp $
a178 1
    BOOL	redisplay;
@
