head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.11 V39_2339:38.11 V39_2332:38.11 V39_2275:38.11 V39_2256:38.11 V39_2210:38.11 V39_2192:38.11 V39_2084:38.11 V39_2082:38.11 V39_2076:38.11 V39_2073:38.11 V39_2058:38.11 V39_2051:38.11 V39_2031:38.11 V39_2017:38.11 V39_2012:38.11 V39_1985:38.11 V39_1933:38.11 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.10 V39_1621:38.9 V39_1620:38.9 V39_1508:38.9 V39_1485:38.9 V39_1461:38.9 V39_1458:38.9 V39_1456:38.9 V39_1405:38.9 V39_1368:38.9 V39_1360:38.9 V39_1324:38.8 V39_1147:38.6 V39_1143:38.6 V39_1141:38.6 V39_1120:38.6 V39_1116:38.6 V39_1104:38.5 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.2 V39_702:38.2 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.11
date     92.08.03.15.52.34;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.07.15.17.10;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.05.27.11.51.48;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.21.17.36.32;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.15.14.02.58;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.14.15.48.25;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.09.16.26.52;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.02.21.35.36;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.02.12.02.10;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.19.10.52.00;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.03.18.11.47.57;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.14.28;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@Comment change.
@
text
@/*** classes.c *****************************************************************
 *
 * classes.c -- Intuition class/object/message scheme
 *
 *  $Id: classes.c,v 38.10 92/07/07 15:17:10 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"
#include <exec/nodes.h>
#include <exec/memory.h>
#include "classusr.h"
#include "classes.h"
#include "gadgetclass.h"
#include "icclass.h"

#define DNO(x)	;	/* debug NewObject() */
#define DN(x)	;	/* debug Notify() */
#define D(x)	;
#define DMC(x)	;

/*** intuition.library/DoGadgetMethodA ***/

ULONG
DoGadgetMethodA( gad, win, req, message )
struct Gadget *gad;
struct Window *win;
struct Requester *req;
Msg message;
{
    ULONG retval;
    lockFree("DoGadgetMethodA", LAYERINFOLOCK );
    lockFree("DoGadgetMethodA", LAYERROMLOCK );
    lockFree("DoGadgetMethodA", IBASELOCK );
    return ( doISM( itGADGETMETHOD, win, gad, message ) );
}


/* We arrive here inside the state machine */
ULONG
IDoGadgetMethodA( gad, win, message )
struct Gadget *gad;
struct Window *win;
Msg message;
{
    ULONG retval;
    struct Requester *req = NULL;
    struct GListEnv genv;
    struct GadgetInfo *ginfo = &genv.ge_GInfo;
    LONG thirdplace = FALSE;
    struct Requester *findGadgetRequest();

    /* Peter 2-Apr-92:  gListDomain() fails if the requester is not
     * found, or if the requester has no layer.  Failing for no layer
     * is correct for most other uses (which are typically rendering),
     * but that's wrong for this operation.  So if we have a layerless
     * requester, skip gListDomain() and proceed with ginfo = NULL
     * instead.
     * If gad is NULL, we return with zero.  That's compatible with
     * V37 behavior of SetGadgetAttrsA().
     */

    if ( !gad )
    {
	return( 0 );
    }

    /* Locking situation is very tricky here.  Clearly, we have
     * to lock the gadgets list to protect re-entrancy of boopsi
     * objects.  We are state-synchronized, which protects the boopsi
     * scrollraster sniffing stuff.  Ideally, we could take
     * the IBASELOCK too, but boopsi gadgets may need to
     * get the LAYERROM lock, which in fact ObtainGIRPort() does.
     */
    LOCKGADGETS();
    /* LOCKIBASE() -- Can't do this! */

    /* We don't have enough field in an InputToken to pass the
     * requester parameter through, so we just work it out
     * again here...
     */
    if ( TESTFLAG( gad->GadgetType, REQGADGET ) )
    {
	req = findGadgetRequest( gad, win );
    }

    if ( ( ! win ) || ( ( req ) && ( !req->ReqLayer ) ) )
    {
	ginfo = NULL;
    }
    else if ( !gListDomain( gad, win, &genv ) )
    {
	return ( 0 );
    }
    else
    {
	gadgetInfo( gad, &genv );
    }

    /* We need to supply GadgetInfo to different methods.
     * Unfortunately, the GadgetInfo is not at a fixed place
     * in the method's message.  For OM_NEW, OM_SET, OM_NOTIFY,
     * and OM_UPDATE, the GadgetInfo is in the third position.
     * All other methods must have the GadgetInfo in the second,
     * by example (and now by decree).
     */
    if ( ( message->MethodID == OM_NEW ) || ( message->MethodID == OM_SET ) ||
	( message->MethodID == OM_NOTIFY ) || ( message->MethodID == OM_UPDATE ) )
    {
	/* opSet is an example structure with GadgetInfo
	 * in the third position, so use that structure
	 * to install the GadgetInfo.
	 */
	((struct opSet *)message)->ops_GInfo = ginfo;
	thirdplace = TRUE;
    }
    else
    {
	/* gpInput is an example structure with GadgetInfo
	 * in the second position, so use that structure
	 * to install the GadgetInfo.
	 */
	((struct gpInput *)message)->gpi_GInfo = ginfo;
    }

    /* Now, let's invoke the method on the gadget! */
    retval = callGadgetHookPkt( gadgetHook(gad), gad, message );

    /* Now NULL out the GInfo pointer, since it's no longer valid,
     * and we'd hate for our caller to steal it!
     */
    if ( thirdplace )
    {
	((struct opSet *)message)->ops_GInfo = ginfo;
    }
    else
    {
	((struct gpInput *)message)->gpi_GInfo = ginfo;
    }

    /* UNLOCKIBASE() -- Can't do this! */
    UNLOCKGADGETS();

    return( retval );
}

/*** intuition.library/SetGadgetAttrsA ***/

/*
 * this one probably will need an actual gadget specific locking
 * or setup.  Keep this entry point separate from OM_SET until
 * you know more than I do now.
 *
 * This is applied only via outer level, to "true" gadget.
 *
 * We're going to let this go without window passed in, but
 * you get a NULL GInfo.
 */
SetGadgetAttrsA( g, window, req, taglist )
struct Gadget	*g;
struct Window *window;
struct Requester *req;
struct TagItem	*taglist;
{
    struct opSet setmsg;
    setmsg.MethodID = OM_SET;
    setmsg.ops_AttrList = taglist;

    return( DoGadgetMethodA( g, window, req, &setmsg ) );
    /* ZZZ: do I care about refresh return code? */
    /* ZZZ: maybe  I do the refresh call right here */
}

/*** intuition.library/SetAttrsA ***/

SetAttrsA( o, tags )
Object	*o;
struct TagItem	*tags;
{
    /* no GInfo in this call	*/
    return ( SendMessage( o, OM_SET, tags, NULL ) );
}

/*** intuition.library/GetAttr ***/

GetAttr( AttrID, o, StoragePtr )
ULONG	AttrID;
Object	*o;
ULONG	*StoragePtr;
{
    return ( SendMessage( o, OM_GET, AttrID, StoragePtr ) );
}

ULONG	initRootClass();
ULONG	initGadgetClass();
ULONG	initGGClass();
ULONG	initPropGadgetClass();
ULONG	initButtonGClass();
ULONG	initStrGadgetClass();
ULONG	initImageClass();
ULONG	initICClass();
ULONG	initModelClass();
ULONG	initFrameIClass();
ULONG	initITextIClass();
ULONG	initFramedButtonClass();
ULONG	initFillRectClass();
ULONG	initSysIClass();
ULONG	initPointerClass();


ULONG	(*classinitfuncs[])()= {
    initRootClass,
    initGadgetClass,
    initGGClass,
    initPropGadgetClass,
    initButtonGClass,
    initStrGadgetClass,
    initImageClass,
    initICClass,
    initModelClass,
    initFrameIClass,
    initITextIClass,
    initFramedButtonClass,
    initFillRectClass,
    initSysIClass,
    initPointerClass,
    NULL
};

initIClasses()
{
    ULONG	(**classfunc)();

    D( printf("initIClasses\n") );
    InitClassList();

    for ( classfunc = classinitfuncs; *classfunc; classfunc++ )
    {
	(**classfunc)();
    }
}

/* This is the central repository of class names, so that there
 * are no more duplicate strings throughout Intuition.
 */

UBYTE *ButtonGClassName = BUTTONGCLASS;
UBYTE *FillRectClassName = FILLRECTCLASS;
UBYTE *FrameIClassName = FRAMEICLASS;
UBYTE *FrButtonClassName = FRBUTTONCLASS;
UBYTE *GadgetClassName = GADGETCLASS;
UBYTE *GroupGClassName = GROUPGCLASS;
UBYTE *ICClassName = ICCLASS;
UBYTE *ImageClassName = IMAGECLASS;
UBYTE *ITextIClassName = ITEXTICLASS;
UBYTE *ModelClassName = MODELCLASS;
UBYTE *PropGClassName = PROPGCLASS;
UBYTE *RootClassName = ROOTCLASS;
UBYTE *StrGClassName = STRGCLASS;
UBYTE *SysIClassName = SYSICLASS;
UBYTE *PointerClassName = POINTERCLASS;


/*** intuition.library/NewObject ***/

Object   *
NewObjectA( cl, classid, tags )
Class	*cl;
ClassID classid;
struct TagItem	*tags;
{
    Class   *FindClass();
    Object  *o = NULL;

    DNO( printf("NewObjectA( %lx, %s, %lx)\n", cl, classid, tags ) );

    /* temporarily bump the object count to keep the
     * class from going away.  I don't want to have to
     * hold the ICLASSLOCK for the duration of
     * OM_NEW.
     */
    if ( cl )
    {
	cl->cl_ObjectCount++;
    }
    else 
    {
	lockClassList();
	if ( cl = FindClass( classid ) )
	{
	    cl->cl_ObjectCount++;
	}
	unlockClassList();
    }

    if ( cl )
    {
	DNO( printf("NewObjectA: class %s located at %lx\n", classid, cl ) );

	/* pass in opSet message, with NULL GInfo */
	o =  (Object *) CoerceMessage( cl, cl, OM_NEW, tags, NULL );

	/* ok, OM_NEW has incremented cl_ObjectCount, if appropriate	*/
	cl->cl_ObjectCount--;
    }
    return ( o );	/* might be NULL	*/
}

/*** intuition.library/DisposeObject ***/

DisposeObject( o )
Object	*o;
{
    /* SendMessage() stub in classface.asm handles o==NULL */
    SendMessage( o, OM_DISPOSE );
}

/*** intuition.library/NextObject ***/

/* 'optr' is a "black handle" that bears no resemblence to
 * the object handles added to the list.
 * Initialize before first call to (void *) List.lh_Head.
 */
Object	*
NextObject( lnptr )
struct Node	**lnptr;
{
    struct Node	*ln;
    struct Node	*succ;

    if ( (succ = (*lnptr)->ln_Succ) != NULL )
    {
	ln = *lnptr;
	*lnptr = succ;
	return ( BASEOBJECT( ln ) );
    }
    return ( NULL );
}


/** special deal for sending notify messages via IDCMP **/
sendNotifyIDCMP( msg )
struct opUpdate	*msg;
{
    struct IntuiMessage	*initIMsg();
    struct TagItem	*CloneTagItems();
    struct TagItem	*FindTagItem();

    struct Window	*w = NULL;
    struct IntuiMessage	*imsg;
    struct TagItem	*taglist;
    struct TagItem	*tagitem;
    ULONG		qualifier = 0;

    /* Unfortunately, I need this lock and I don't always have
     * it.  I need it because we're walking the window list
     * looking for free messages down in initIMsg().
     *
     * I can't obtain it here, because OM_NOTIFY might have
     * been sent while ObtainGIRPort() is held, which holds
     * the RPLOCK (which is bigger than IBASELOCK).
     *
     * I can't have gotten it in callGadgetHook() since
     * some methods need to lock layers.
     *
     * The callGadgetHook() function does hold the ISTATELOCK,
     * so we're not totally dead...
     *
     * ICK.
     */

    assertLock( "sendNotifyIDCMP", IBASELOCK );
    DN( printf( "sNIDCMP ginfo %lx\n",  msg->opu_GInfo ));

    if ( msg->opu_GInfo ) w = msg->opu_GInfo->gi_Window;

    DN( printf( "sNIDCMP window %lx\n",  msg->opu_GInfo->gi_Window ));

    DN( printf("test things: w %lx, port %lx, fl %lx\n",
	w, w->UserPort, w->IDCMPFlags ));

    /* check for window IDCMP port */
    if ( w && w->UserPort && TESTFLAG(w->IDCMPFlags, IDCMPUPDATE) )
    {
	/* set repeat qualifier and respect repeat queue
	 * for "interim" messages 
	 */
	if ( TESTFLAG( msg->opu_Flags, OPUF_INTERIM ) )
	{
	    qualifier = IEQUALIFIER_REPEAT;

	    if ( XWINDOW(w)->RptPending  < XWINDOW(w)->RptQueueLimit )
	    {
		XWINDOW(w)->RptPending++;
	    }
	    else
	    {
		DN( printf("repeat limit hit\n"));
		goto OUT;
	    }
	}

	if ( taglist = CloneTagItems( msg->opu_AttrList) )
	{

	    if ( imsg = initIMsg( IDCMPUPDATE, 0, NULL, w, NULL ) )
	    {
		/* fill in some fields	*/
		imsg->IAddress = (APTR) taglist;
		imsg->Qualifier |= qualifier;

		/* special way to set the Code field	*/
		if ( tagitem = FindTagItem( ICSPECIAL_CODE, taglist ) )
		{
		    imsg->Code = (USHORT) tagitem->ti_Data;
		}
	    
		DN( printf("putmsg %lx\n", imsg ));
		/* Peter 16-Oct-90:
		 * As a result of CloseWindowSafely(), there is a possibility
		 * of encountering a window with IDCMPFlags != NULL which
		 * nevertheless has a UserPort of NULL.  This closes that problem.
		 */
		PutMsgSafely( w->UserPort, imsg );
	    }
	    else
	    {
		/* dump the clone */
		DN( printf("no IDCMP free?\n"));
		FreeTagItems( taglist );
	    }
	}
    }
    DN( else printf("failed test\n"));
OUT:
}
@


38.10
log
@DoGadgetMethodA() now goes through the itGADGETMETHOD token.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.9 92/05/27 11:51:48 peter Exp Locker: peter $
d284 1
a284 1
     * hold the IClassSemaphore for the duration of
@


38.9
log
@Added some lockFree() calls.  Now locks ISTATELOCK around invocation
of gadget hook.  Removed LOCKIBASE in sendNotifyIDCMP().
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.8 92/05/21 17:36:32 peter Exp Locker: peter $
d37 16
d56 1
a57 3
    lockFree("DoGadgetMethodA", LAYERINFOLOCK );
    lockFree("DoGadgetMethodA", LAYERROMLOCK );
    lockFree("DoGadgetMethodA", IBASELOCK );
d73 19
a130 11
    /* Locking situation is very tricky here.  Clearly, we have
     * to lock the gadgets list to protect re-entrancy of boopsi
     * objects.  We need the STATELOCK to protect the boopsi
     * scrollraster sniffing stuff.  Ideally, we could take
     * the IBASELOCK too, but boopsi gadgets may need to
     * get the LAYERROM lock, which in fact ObtainGIRPort() does.
     */
    LOCKSTATE();
    LOCKGADGETS();
    /* LOCKIBASE() -- Can't do this! */

a133 4
    /* UNLOCKIBASE() -- Can't do this! */
    UNLOCKGADGETS();
    UNLOCKSTATE();

d146 3
a158 3
 * Should probably put this through ISM, and put activegadget
 * checks in it.
 *
d164 1
a164 1
SetGadgetAttrsA( g, window, req, tags )
d168 1
a168 1
struct TagItem	*tags;
d172 1
a172 1
    setmsg.ops_AttrList = tags;
d319 1
@


38.8
log
@ScrollRaster() damage-sniffing much improved.  DoGadgetMethodA() and
SetGadgetAttrsA() are now safe if gad=NULL.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.7 92/05/15 14:02:58 peter Exp Locker: peter $
d41 3
d98 8
d107 1
d112 1
d114 1
d341 18
a358 1
    LOCKIBASE();
a421 1
    UNLOCKIBASE();
@


38.7
log
@Vectorclass name and initialization now gone, since it merged with
sysiclass.  Supports sniffing of ScrollRaster()-type damage caused by
boopsi gadgets.  sendNotifyIDCMP() now locks IBASELOCK.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.6 92/04/14 15:48:25 peter Exp Locker: peter $
d47 2
d51 5
a94 5
    /* Peter 11-May-92: We've got to detect gadget damage caused
     * by boopsi ScrollRaster()...
     */
    LOCKSTATE();
    clearGadgetLayerDamage( &genv );
d98 1
a98 1
    retval = SM( (Object *) gad, message );
a100 3
    /* Resolve any boopsi ScrollRaster() damage... */
    checkGadgetLayerDamage( &genv );
    UNLOCKSTATE();
@


38.6
log
@Uses POINTERCLASS and ITEXTICLASS defns.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.5 92/04/09 16:26:52 peter Exp Locker: peter $
d88 5
d99 4
a102 1
    
d181 1
a181 2
ULONG	initVectorIClass();
ULONG	initXSysIClass();
d199 1
a199 2
    initVectorIClass,
    initXSysIClass,
a234 1
UBYTE *VectorIClassName = "vectoriclass";
d328 1
d355 1
a355 1
		return;
d359 2
a360 1
	if ( ! (taglist = CloneTagItems( msg->opu_AttrList)) ) return;
d362 5
a366 5
	if ( imsg = initIMsg( IDCMPUPDATE, 0, NULL, w, NULL ) )
	{
	    /* fill in some fields	*/
	    imsg->IAddress = (APTR) taglist;
	    imsg->Qualifier |= qualifier;
d368 15
a382 2
	    /* special way to set the Code field	*/
	    if ( tagitem = FindTagItem( ICSPECIAL_CODE, taglist ) )
d384 3
a386 1
		imsg->Code = (USHORT) tagitem->ti_Data;
a387 14
	    
	    DN( printf("putmsg %lx\n", imsg ));
	    /* Peter 16-Oct-90:
	     * As a result of CloseWindowSafely(), there is a possibility
	     * of encountering a window with IDCMPFlags != NULL which
	     * nevertheless has a UserPort of NULL.  This closes that problem.
	     */
	    PutMsgSafely( w->UserPort, imsg );
	}
	else
	{
	    /* dump the clone */
	    DN( printf("no IDCMP free?\n"));
	    FreeTagItems( taglist );
d391 2
@


38.5
log
@Passes NULL tablet parameter to initIMsg().  Now LOCKGADGETS()
inside DoGadgetMethodA().
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.4 92/04/02 21:35:36 peter Exp Locker: peter $
d223 1
a223 1
UBYTE *ITextIClassName = "itexticlass";
d230 1
a230 1
UBYTE *PointerClassName = "pointerclass";
@


38.4
log
@SetGadgetAttrsA() to a gadget in a layerless requester now works.
Added DoGadgetMethodA(), and made SGAA() go through it.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.3 92/04/02 12:02:10 peter Exp Locker: peter $
d48 1
d88 2
d92 2
a130 1
#if 1
a137 31
#else
    int	refresh;
    struct GListEnv	genv;
    struct GadgetInfo	*ginfo = &genv.ge_GInfo;

    /* Peter 2-Apr-92:  gListDomain() fails if the requester is not
     * found, or if the requester has no layer.  Failing for no layer
     * is correct for most other uses (which are typically rendering),
     * but that's wrong for this operation.  So if we have a layerless
     * requester, skip gListDomain() and proceed with ginfo = NULL
     * instead.
     */
    if ( ( ! window ) || ( ( req ) && ( !req->ReqLayer ) ) )
    {
	ginfo = NULL;
    }
    else if ( !gListDomain( g, window, &genv ) )
    {
	return ( 0 );
    }
    else
    {
	gadgetInfo( g, &genv );
    }

    refresh = SendMessage( (Object *) g, OM_SET, tags, ginfo );

    /* ZZZ: do I care about refresh return code? */
    /* ZZZ: maybe  I do the refresh call right here */
    return ( refresh );
#endif
d355 1
a355 1
	if ( imsg = initIMsg( IDCMPUPDATE, 0, NULL, w ) )
@


38.3
log
@Added PointerClassName (actual class to follow).  Autodocs moved out.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.2 92/03/19 10:52:00 peter Exp Locker: peter $
d19 1
d27 78
d122 2
d126 9
d139 9
a147 1
    if ( ! window ) 
d149 1
d151 1
d153 1
d155 1
d157 1
d164 1
@


38.2
log
@Deleted xsysiclass name.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.1 92/03/18 11:47:57 peter Exp Locker: peter $
d26 2
a27 61
/****** intuition.library/SetGadgetAttrsA ************************************
*
*    NAME
*	SetGadgetAttrsA -- Specify attribute values for a boopsi gadget. (V36)
*	SetGadgetAttrs -- Varargs stub for SetGadgetAttrsA(). (V36)
*
*    SYNOPSIS
*	result = SetGadgetAttrsA( Gadget, Window, Requester, TagList )
*	D0		          A0      A1      A2         A3
*
*	ULONG SetGadgetAttrsA( struct Gadget *, struct Window *,
*		struct Requester *, struct TagItem * );
*
*	result = SetGadgetAttrs( Gadget, Window, Requester, Tag1, ...)
*
*	ULONG SetGadgetAttrs( struct Gadget *, struct Window *,
*		struct Requester *, ULONG, ... );
*
*    FUNCTION
*	Same as SetAttrs(), but provides context information and
*	arbitration for classes which implement custom Intuition gadgets.
*
*	You should use this function for boopsi gadget objects which have
*	already been added to a requester or a window, or for "models" which
*	propagate information to gadget already added.
*
*	Typically, the gadgets will refresh their visuals to reflect
*	changes to visible attributes, such as the value of a slider,
*	the text in a string-type gadget, the selected state of a button.
*
*	You can use this as a replacement for SetAttrs(), too, if you
*	specify NULL for the 'Window' and 'Requester' parameters.
*
*    INPUTS
*	Gadget = abstract pointer to a boopsi gadget
*	Window = window gadget has been added to using AddGList() or AddGadget()
*	Requester = for REQGADGETs, requester containing the gadget
*	TagList = array of TagItem structures with attribute/value pairs.
*
*    RESULT
*	The object does whatever it wants with the attributes you provide,
*	which might include updating its gadget visuals.
*
*	The return value tends to be non-zero if the changes would require
*	refreshing gadget imagery, if the object is a gadget.
*	
*    NOTES
*	This function invokes the OM_SET method with a GadgetInfo
*	derived from the 'Window' and 'Requester' pointers.
*
*    BUGS
*	There should be more arbitration between this function and
*	the calls that Intuition's input task will make to the
*	gadgets.  In the meantime, this function, input processing,
*	and refreshing must be mutually re-entrant.
*
*    SEE ALSO
*	NewObject(), DisposeObject(), GetAttr(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
d63 2
a64 44
/****** intuition.library/SetAttrsA ************************************
*
*    NAME
*	SetAttrsA -- Specify attribute values for an object. (V36)
*	SetAttrs -- Varargs stub for SetAttrsA(). (V36)
*
*    SYNOPSIS
*	result = SetAttrsA( Object, TagList )
*	D0                  A0      A1
*
*	ULONG SetAttrsA( APTR, struct TagItem * );
*
*	result = SetAttrs( Object, Tag1, ... )
*
*	ULONG SetAttrs( APTR, ULONG, ... );
*
*    FUNCTION
*	Specifies a set of attribute/value pairs with meaning as
*	defined by a 'boopsi' object's class.
*
*	This function does not provide enough context information or
*	arbitration for boopsi gadgets which are attached to windows
*	or requesters.  For those objects, use SetGadgetAttrs().
*
*    INPUTS
*	Object = abstract pointer to a boopsi object.
*	TagList = array of TagItem structures with attribute/value pairs.
*
*    RESULT
*	The object does whatever it wants with the attributes you provide.
*	The return value tends to be non-zero if the changes would require
*	refreshing gadget imagery, if the object is a gadget.
*	
*    NOTES
*	This function invokes the OM_SET method with a NULL GadgetInfo
*	parameter.
*
*    BUGS
*
*    SEE ALSO
*	NewObject(), DisposeObject(), GetAttr(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
d73 2
a74 42
/****** intuition.library/GetAttr *************************************
*
*    NAME
*	GetAttr -- Inquire the value of some attribute of an object. (V36)
*
*    SYNOPSIS
*	attr = GetAttr( AttrID, Object, StoragePtr )
*	D0		D0	A0	A1
*
*	ULONG GetAttr( ULONG, APTR, ULONG * );
*
*    FUNCTION
*	Inquires from the specified object the value of the specified attribute.
*
*	You always pass the address of a long variable, which will
*	receive the same value that would be passed to SetAttrs() in
*	the ti_Data portion of a TagItem element.  See the documentation
*	for the class for exceptions to this general rule.
*	
*	Not all attributes will respond to this function.  Those that
*	will are documented on a class-by-class basis.
*
*    INPUTS
*	AttrID = the attribute tag ID understood by the object's class
*	Object = abstract pointer to the boopsi object you are interested in
*	StoragePtr = pointer to appropriate storage for the answer
*
*    RESULT
*	Returns FALSE (0) if the inquiries of attribute are not provided
*	by the object's class.
*	
*    NOTES
*	This function invokes the OM_GET method of the object.
*
*    BUGS
*
*    SEE ALSO
*	NewObject(), DisposeObject(), SetAttrs(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*	
*****************************************************************************/
a82 2
#if 1

a89 1
/* ULONG	initSysIClass(); use initXSysIClass() */
d98 1
a108 1
/*    initSysIClass, ** use initXSysIClass	*/
d117 1
a132 26
    
#else

/** called by initIntuition **/
initIClasses()
{
    D( printf("initIClasses\n") );
    InitClassList();

    initRootClass();

    initGadgetClass();
    initGGClass();
    initPropGadgetClass();
    initButtonGClass();
    initStrGadgetClass();

    initImageClass();
    initSysIClass();
/*    initBox2Class(); */

    initICClass();
    initModelClass();

}
#endif
a133 1

d153 2
d156 1
a157 58
/****** intuition.library/NewObject *************************************
*
*    NAME
*	NewObjectA -- Create an object from a class. (V36)
*	NewObject -- Varargs stub for NewObjectA(). (V36)
*
*    SYNOPSIS
*	object = NewObjectA( class, classID, tagList )
*	D0                   A0     A1       A2
*
*	APTR NewObjectA( struct IClass *, UBYTE *, struct TagItem * );
*
*	object = NewObject( class, classID, Tag1, ... )
*
*	APTR NewObject( struct IClass *, UBYTE *, ULONG, ... );
*
*    FUNCTION
*	This is the general method of creating objects from 'boopsi' classes.
*	('Boopsi' stands for "basic object-oriented programming system for
*	Intuition".)
*
*	You specify a class either as a pointer (for a private class) or
*	by its ID string (for public classes).  If the class pointer
*	is NULL, then the classID is used.
*
*	You further specify initial "create-time" attributes for the
*	object via a TagItem list, and they are applied to the resulting
*	generic data object that is returned.  The attributes, their meanings,
*	attributes applied only at create-time, and required attributes
*	are all defined and documented on a class-by-class basis.
*	
*    INPUTS
*	class = abstract pointer to a boopsi class gotten via MakeClass().
*	classID = the name/ID string of a public class.  This parameter is
*		only used if 'class' is NULL.
*	tagList = pointer to array of TagItems containing attribute/value
*		pairs to be applied to the object being created
*
*    RESULT
*	A boopsi object, which may be used in different contexts such
*	as a gadget or image, and may be manipulated by generic functions.
*	You eventually free the object using DisposeObject().
*	
*    NOTES
*	This function invokes the OM_NEW "method" for the class specified.
*
*    BUGS
*	Typedef's for 'Object' and 'Class' are defined in the include
*	files but not used consistently.  The generic type APTR is
*	probably best used for object and class "handles", with the
*	type (UBYTE *) used for classID strings.
*
*    SEE ALSO
*	DisposeObject(), SetAttrs(), GetAttr(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*	
*****************************************************************************/
d201 2
a202 35
/****** intuition.library/DisposeObject *************************************
*
*    NAME
*	DisposeObject -- Deletes a 'boopsi' object. (V36)
*
*    SYNOPSIS
*	DisposeObject( Object )
*	               A0
*
*	VOID DisposeObject( APTR );
*
*    FUNCTION
*	Deletes a boopsi object and all of it auxiliary data.
*	These objects are all created by NewObject().  Objects
*	of certain classes "own" other objects, which will also
*	be deleted when the object is passed to DisposeObject().
*	Read the per-class documentation carefully to be aware
*	of these instances.
*
*    INPUTS
*	Object = abstract pointer to a boopsi object returned by NewObject()
*
*    NOTES
*	This function invokes the OM_DISPOSE method.
*
*    RESULT
*	None.
*
*    BUGS
*
*    SEE ALSO
*	NewObject(), SetAttrs(), GetAttr(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
d209 2
a210 52
/****** intuition.library/NextObject *************************************
*
*    NAME
*	NextObject -- iterate through the object on an Exec list. (V36)
*
*    SYNOPSIS
*	object = NextObject( objectPtrPtr )
*	D0                   A0
*
*	APTR NextObject( APTR );
*
*    FUNCTION
*	This function is for boopsi class implementors only.
*
*	When you collect a set of boopsi objects on an Exec List
*	structure by invoking their OM_ADDMEMBER method, you
*	can (only) retrieve them by iterations of this function.
*
*	Works even if you remove and dispose the returned list
*	members in turn.
*
*    INPUTS
*	Initially, you set a pointer variable to equal the
*	lh_Head field of the list (or mlh_Head field of a MinList).
*	You pass the *address* of that pointer repeatedly
*	to NextObject() until it returns NULL.
*	
*    EXAMPLE
*
*	\* here is the OM_DISPOSE case of some class's dispatcher *\
*	case OM_DISPOSE:
*	    \* dispose members	*\
*	    object_state = mydata->md_CollectionList.lh_Head;
*	    while ( member_object = NextObject( &object_state ) )
*	    {
*		DoMethod( member_object, OM_REMOVE ); \* remove from list *\
*		DoMethodA( member, msg );	\* and pass along dispose	*\
*	    }
*
*    RESULT
*	Returns pointers to each object in the list in turn, and NULL
*	when there are no more.
*	
*    NOTES
*
*    BUGS
*
*    SEE ALSO
*	DisposeObject(), SetAttrs(), GetAttr(), MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
@


38.1
log
@Minor autodoc tweak.
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 38.0 91/06/12 14:14:28 peter Exp Locker: peter $
a322 1
UBYTE *XSysIClassName = "xsysiclass";
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: classes.c,v 1.20 91/02/12 18:08:48 peter Exp $
d504 1
a504 1
*		DM( member, msg );	\* and pass along dispose	*\
@
