head     38.20;
branch   ;
access   ;
symbols  V40_85:38.20 V40_71:38.20 V40_68:38.20 V40_65:38.20 V40_47:38.20 V40_45:38.20 V40_37:38.20 V40_34:38.20 V40_29:38.20 V39_2415:38.20 V39_2369:38.19 V39_2339:38.19 V39_2332:38.19 V39_2275:38.18 V39_2256:38.18 V39_2210:38.18 V39_2192:38.18 V39_2084:38.18 V39_2082:38.18 V39_2076:38.18 V39_2073:38.18 V39_2058:38.18 V39_2051:38.18 V39_2031:38.18 V39_2017:38.18 V39_2012:38.18 V39_1985:38.18 V39_1933:38.18 V39_1819:38.17 V39_1805:38.17 V39_1783:38.17 V39_1695:38.16 V39_1621:38.15 V39_1620:38.15 V39_1508:38.14 V39_1485:38.14 V39_1461:38.13 V39_1458:38.13 V39_1456:38.13 V39_1405:38.13 V39_1368:38.13 V39_1360:38.13 V39_1324:38.13 V39_1147:38.12 V39_1143:38.12 V39_1141:38.12 V39_1120:38.12 V39_1116:38.12 V39_1104:38.12 V39_1100:38.12 V39_1078:38.12 V39_1073:38.12 V39_757:38.9 V39_702:38.9 V39_557:38.5 V39_553:38.5 V39_551:38.5 V39_510:38.4 V39_495:38.4 V39_416:38.2 V39_383:38.2 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.2 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.2 V39_171:38.2 V39_161:38.2 V38_159:38.2 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.20
date     93.01.14.14.24.44;  author peter;  state Exp;
branches ;
next     38.19;

38.19
date     92.12.09.18.16.11;  author peter;  state Exp;
branches ;
next     38.18;

38.18
date     92.08.02.12.45.42;  author peter;  state Exp;
branches ;
next     38.17;

38.17
date     92.07.17.17.30.49;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.07.07.15.24.02;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.06.29.10.47.44;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.18.18.10.56;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.05.15.14.09.57;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.04.09.16.33.23;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.07.17.58.25;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.02.21.41.33;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.03.23.11.55.21;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.21.14.54.48;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.19.15.55.17;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.19.10.55.26;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.03.16.35.50;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.20.12.17.51;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.17.17.17.53;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.21.18.21.20;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.18.02.19;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.32.30;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.20
log
@Added itMODIFYPROP.
@
text
@/*** smenu.c *****************************************************************
 *
 *  sMenu state processing
 *
 *  $Id: smenu.c,v 38.19 92/12/09 18:16:11 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)	;
#define DMH(x)	;	/* menu help	*/
#define DEND(x)	;

/* state sMenu
 *
 * global data used:
 *
 * local state data:
 */


/* transition startMenu()
 * called by:
 *	
 * with state data:
 * description:
 */
startMenu()
{
    struct IntuitionBase	*IBase = fetchIBase();
    int				returnMenuOK();

    D( printf("transition function startMenu, cstate: %ld\n", 
	IBase->CurrentState ));

    startVerify( returnMenuOK, IBase->ActiveWindow, MENUVERIFY, MENUHOT );
    return;
}


/* called after MENUVERIFY for the active window */
returnMenuOK( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();
    int				returnMenuDMR();
    struct Window		*awindow = IBase->ActiveWindow;

    D( printf("returnMenuOK okcode: %lx\n", okcode ) );

    D( if ( okcode != OKOK ) printf( "rMOK: didn't get OKOK\n") );

    /* The programmer may be poking window->DetailPen and window->BlockPen
     * in a pre-V39 attempt to control his menu colors.  He'd do that
     * at MENUVERIFY time, so now that we're back from there, let's
     * get a fresh concept of MenuBlockPen and MenuDetailPen if
     * he's not a NewLook Menus guy:
     */
    if ( !TESTFLAG( awindow->Flags, WFLG_NEWLOOKMENUS ) )
    {
	XWINDOW(awindow)->MenuBlockPen = awindow->BlockPen;
	XWINDOW(awindow)->MenuDetailPen = awindow->DetailPen;
    }

    switch ( okcode )
    {
    case OKCANCEL:
	D(printf("rMOK cancel menu verify with menuup\n") );
#if 0
	/* ZZZ: might I be sending two menuups, if the guy
	 * is really holding down the menu button?
	 *
	 * That's right, jimm, idlewindow will send this
	 * guy his MENUUP
	 */
	activeEvent( IECLASS_RAWMOUSE, MENUUP );
#endif
	startIdleWindow();
	return;
    case OKABORT:	/* go on with DMR, but don't show menu bar */
    case OKOK:
	/* go on ahead */
	D( printf("rMOK go on with DMR (maybe won't show menu bar)") );
	IBase->MenuAbort = ( okcode == OKABORT );	/* remember */
	startDMRTimeout( returnMenuDMR, okcode );
	return;
    default:
	D( PANIC( "rMOK default OKCODE!!!" ) );
	startIdleWindow();
	return;
    }
}

/*
 * pass this thing OKOK if you want the menus,
 * OKCANCEL if you want the DMR's, OKABORT if you want 
 * to bail out and go back to sIdleWindow
 *
 */
returnMenuDMR( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();
    int				returnDMROK();

    D( printf("returnMenuDMR code %lx\n", okcode ) );

    switch ( okcode )
    {
    case OKOK:		/* wants menus	*/
	D( printf("rMDMR: wants menus.\n") );
	if ( ! IBase->MenuAbort ) break; /* go do menus */

	/* fall through into abort case */
    case OKABORT:
	/* let him know that menus are a over with */
	D( printf("rMDMR abort from DMR timeout.  release or no dmr\n"));
	activeEvent( IECLASS_MENULIST, MENUNULL );
	startIdleWindow();
	return;

    case OKCANCEL:	/* wants DMR	*/
	D( printf("rMDMR: wants dmr, do reqverify.\n") );
	startVerify( returnDMROK, IBase->ActiveWindow, REQVERIFY, 0 );
	return;

    default:
	D( PANIC( "returnMenuDMR: unanticipated code" ) );
	startIdleWindow();
	return;
    }

    /*** verify other windows ***/
    /* was: "getAllButMenuOK()" */

    /* dummy pointer "before" first window */
    IBase->AllButWindow =
	(struct Window *) &IBase->ActiveScreen->FirstWindow;
    returnAllButMenuOK( OKOK );
}

/*
 * in here I assume that the window list won't be
 * changing around during sVerify
 *
 * have to be a little careful: want to be input.device if
 * I'm to call realStartMenu().
 */
returnAllButMenuOK( okcode )
{
    struct Window	*window;
    struct IntuitionBase	*IBase = fetchIBase();


    /* jimm: 5/14/90: bail out if the guy says ABORT	*/
    if ( okcode == OKABORT )
    {
	/* OKABORT indicates a failure (eg. no memory), since
	 * the inactive windows can't cancel their request and
	 * a time-out converts into OKOK.  Send an IECLASS_MENULIST
	 * with code MENUNULL to let the active window know that
	 * menus are over with, then send the "menu clear" signal
	 * to all inactive windows that got their MENUWAITING
	 * MENUVERIFY message.
	 */

	/* let him know that menus are a over with */
	activeEvent( IECLASS_MENULIST, MENUNULL );

	sendAllMenuClear( IBase->ActiveScreen );
	/* this fix is the correct thing to prevent a hanging menu
	 * strip.
	 */
	removeMStrip( IBase->ActiveScreen );
	startIdleWindow();
	return;
    }

    /* find next inactive window that wants MENUVERIFY/MENUWAITING */
    window = IBase->AllButWindow->NextWindow; 	/* IBase->ABW never null */
    while ( window
	    && ((window == IBase->ActiveWindow) 
		|| ! TESTFLAG( window->IDCMPFlags, MENUVERIFY )) )
    {
	window = window->NextWindow;
    }

    if ( window )	/* another contestant */
    {
	IBase->AllButWindow = window;
	SETFLAG( window->MoreFlags, WMF_NEEDMENUCLEAR );

	/* come back to this routine  right here */
	startVerify( returnAllButMenuOK, window, MENUVERIFY, MENUWAITING );
	return;
    }
    else		/* checked with everybody	*/
    {
	realStartMenu();
	return;
    }
}

/*
 * Have to be a little careful: this routine grabs the
 * locks,  so it has to be the input.device
 */
realStartMenu()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Screen		*AScreen = IBase->ActiveScreen;

    /* Set the ShiftBack variables to something safe, just in case */
    IBase->ShiftBack.X = 0;
    IBase->ShiftBack.Y = 0;

    if ( TESTFLAG( IBase->NewIControl, IC_DOMAGICMENU ) )
    {
	int	asleft, astop;
	struct Point	movepoint;

	asleft = AScreen->LeftEdge;
	astop = AScreen->TopEdge;

	/* head toward 0,0 from negative positions
	 * might not go to (0,0)
	 */
	movepoint.X =  imax( -asleft, 0 );
	movepoint.Y = imax( -astop, 0 );
	IMoveScreen( AScreen, &movepoint, SPOS_MENUSNAPRANGE );
	/* Left-Amiga means don't shift the menus back.  So
	 * we leave ShiftBack at zero unless left-Amiga is not
	 * held.
	 */
	if ( !TESTFLAG( IE->ie_Qualifier, IEQUALIFIER_LCOMMAND ) )
	{
	    IBase->ShiftBack.X = asleft - AScreen->LeftEdge;
	    IBase->ShiftBack.Y = astop - AScreen->TopEdge;
	}
    }
    
    /* fresh menus, boys */
    IBase->OptionList = MENUNULL;
    IBase->MenuDrawn = MENUNULL;
    IBase->MenuSelected = MENUNULL;

    CLEARFLAG( IBase->Flags, DRAGSELECT );
    SETFLAG( IBase->ActiveWindow->Flags, MENUSTATE );

    /* limit mouse to top edge of active screen for menus */
    {
	struct Point	holdmin;

	holdmin.X = 0;
	holdmin.Y = AScreen->TopEdge;
	screenToMouse( &holdmin, AScreen );
	IBase->HoldMinYMouse = holdmin.Y;
    }

    D( printf("sMenu lock layers, linfo %lx\n", &AScreen->LayerInfo ) );
    LockLayers( &AScreen->LayerInfo );
    D( printf("LOCKED\n") );
    getMenu();

    /*** SKIP_WAIT business: reuse the event as a normal menu
     *** input unless doing straight in menudown deal ZZZ:
     ***/

    IBase->CurrentState = sMenu;
}


returnDMROK( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();

    switch ( okcode )
    {
    case OKOK:		/* wants the DMR	*/
    D( printf("returnDMROK wants the DMR\n") );
    if ( IRequest( IBase->ActiveWindow->DMRequest, IBase->ActiveWindow, 1))
    {
	D( printf("rDMROK: succeeded with DMrequester\n") );
	 startRequester();   
	 return;
    }
    /* fall through: cancel if can't get up Requester */

    case OKCANCEL:	/* shouldn't happen */
    case OKABORT:	/* timeout */
	D( printf("rDMROK cancelling REQVERIFY\n") );

	/* give him termination notification */
	activeEvent( IECLASS_REQUESTER, IECODE_REQCLEAR );
	startIdleWindow();
	return;

    default:
	D( PANIC( "returnDMROK: unanticipated code" ) );
	startIdleWindow();
	return;
    }
}


/*
 * caller has found a valid match for a command key, and wants
 * us to check menu verify then send the idcmp message.
 *
 * ZZZ: might have to use a return state to do this during
 * string gadgets or other states than sIdleWindow.
 */
startMenuKey( menunum )
UWORD	menunum;
{
    struct IntuitionBase	*IBase = fetchIBase();
    int				returnMenuKey();

    D( printf("startMenuKey: menunum (set MenuSelected)  %lx\n", menunum) );
    IBase->MenuSelected = menunum;	/* menus can't be in use */
    startVerify( returnMenuKey, IBase->ActiveWindow, MENUVERIFY, MENUHOT );
}

/*
 * called after MENUVERIFY for command-key menu equivalents
 */
returnMenuKey( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();
    UWORD			firstoption = MENUNULL;

    D( printf("rMK: verify code %lx\n", okcode ) );
    
    switch ( okcode )
    {
    /* NB: 3.00 and prior didn't send the IECLASS_MENULIST/MENUNULL
     * event for OKABORT
     */
    case OKABORT:
    case OKCANCEL:
	activeEvent( IECLASS_MENULIST, MENUNULL );
	break;
	break;
    case OKOK:
	D( printf("rMK resetMenu\n") );
	resetMenu( IBase->ActiveWindow,
		~MIDRAWN,
		~ISDRAWN & ~HIGHITEM & ~MENUTOGGLED,
		~HIGHITEM & ~MENUTOGGLED);

	D( printf("rMK updateOptions, MenuSelected %lx\n",
	    IBase->MenuSelected) );

	updateOptions( &firstoption, FALSE );
	D( printf("send menu equiv. for this: %lx\n", firstoption ) );
	activeEvent( IECLASS_MENULIST, firstoption );
    }


    if ( IBase->MenuLendingReturn )
    {
	/* Transmogrify token into an itACTIVATEWIN one,
	 * and then fall through to startIdleWindow().
	 */
	IT->it_Command = itACTIVATEWIN;
	IT->it_Object1 = (CPTR) IBase->MenuLendingReturn;
	IT->it_Object2 = AWIN_NORMAL;
    }
    startIdleWindow();
}

/*
 * state dispatcher
 * state transitions called:
 */
dMenu()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;
    UWORD			saveselected;
    struct Screen		*AScreen = IBase->ActiveScreen;

    /* initial processing --- does menu select list processing.
     * don't worry about MENUUP: it's checked again later for
     * termination condition
     */
    switch ( IT->it_Command )
    {
    case itMOUSEMOVE:	/* do menu stuff	*/
	doDefault();
	/* fall through */
    case itMENUDOWN:	/* shouldn't happen	*/
    case itMENUUP:	/* end menu session	*/
    case itSELECTDOWN:	/* start drag select	*/
    case itSELECTUP:	/* end drag select	*/
    case itRAWKEY:	/* update the menu in case this is the first event */

	getMenu();
	if ( TESTFLAG( IBase->Flags, DRAGSELECT ) )
	{
	    updateOptions( &IBase->OptionList, TRUE );
	}
	/* go down and do some more processing */
	break;

    case itACTIVATEWIN:	/* defer */
    case itSETREQ:	/* defer */
    case itCLEARREQ:	/* defer */
    case itCLOSEWIN:	/* defer */
    case itSHOWTITLE:	/* defer */
    case itOPENWIN:	/* defer */
    case itONOFFMENU:	/* defer */
    case itSETMENU:	/* defer */
    case itCLEARMENU:	/* defer */
    case itCHANGEWIN:	/* defer */
    case itZOOMWIN:	/* defer */
    case itDEPTHWIN:	/* defer */
    case itOPENSCREEN:	/* defer */
    case itCLOSESCREEN:	/* defer */
    case itCOPYSCBUF:	/* defer */
    case itGADGETMETHOD:/* defer */
    case itMODIFYPROP:	/* defer */
	deferToken();
	return;

    /* skip */
    case itMOVESCREEN:	/* skip */
    case itDEPTHSCREEN:	/* skip */
	return;		

    case itCHANGESCBUF:	/* error */
	if ( (struct Screen *)IT->it_Object1 == AScreen )
	{
	    IT->it_Error = 1;
	}
	else
	{
	    doDefault();
	}
	return;

    /*** default processing	***/
#if 0
    /*case itRAWKEY: */		/* skip */
    case itTIMER:	/* do default */
    case itDISKCHANGE:	/* do default */
    case itACTIVATEGAD:	/* do default */
    case itMETADRAG:	/* do default */
    case itVERIFY:	/* do default */
    case itREMOVEGAD:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itSETPOINTER:	/* do default */
#endif
    default:		/* itDEFAULT: do default */
	doDefault();
	return;
    }

    /* If there is more than one screen visible, the mouse can be
     * higher up than the drag bar of the active window's screen.
     * as soon as the mouse crosses below that fated point, we want to
     * limit the mouse movement to never rise above the top of
     * the drag bar while we're in menu-state:
     */
    if ( IBase->LongMouse.LY >= IBase->HoldMinYMouse )
    {
	SETFLAG( IBase->Flags, INMOUSELIMITS|SCREENMLIMITS );
	IBase->ScreenMouseLimits.MinX = IBase->ScreenMouseLimits.MinY = 0;
	IBase->ScreenMouseLimits.MaxX = AScreen->Width - 1;
	IBase->ScreenMouseLimits.MaxY = AScreen->Height - 1;
	rethinkMouseLimits();
    }

    /* some more processing */
    switch ( IT->it_Command )
    {
    case itSELECTDOWN:	/* start drag select	*/
	resetMenu(IBase->ActiveWindow, -1, ~MENUTOGGLED, ~MENUTOGGLED);
	SETFLAG( IBase->Flags, DRAGSELECT ); /* start drag selecting */
	updateOptions(&IBase->OptionList, TRUE);
	return;

    case itSELECTUP:	/* end drag select	*/
	CLEARFLAG( IBase->Flags, DRAGSELECT ); /* stop drag selecting */
	return;

    case itMENUUP:	/* end menu session	*/
    case itRAWKEY:	/* end session if HELP	*/

	if ( IT->it_Command == itMENUUP )
	{
	    DMH( printf("menu up\n") );
	    updateOptions( &IBase->OptionList, FALSE );
	    DMH( printf("update done\n") );
	}
	else	/* rawkey	*/
	{

	    DMH( printf("rawkey during menus, code %lx\n", IE->ie_Code ) );

	    if ( IE->ie_Code != KEYCODE_HELP ||
		! TESTFLAG( IBase->ActiveWindow->MoreFlags,
		   WMF_USEMENUHELP ) )
	    {
		break;
	    }
	}

	/*** Menu-end processing shared by MENUUP and MENUHELP ***/

	IBase->MenuDrawn = MENUNULL;
	saveselected = IBase->MenuSelected;
	IBase->MenuSelected = MENUNULL;

	CLEARFLAG( IBase->Flags, INMOUSELIMITS|SCREENMLIMITS );
	CLEARFLAG( IBase->ActiveWindow->Flags, MENUSTATE );

	if ( TESTFLAG( IBase->Flags, SUBDRAWN ) ) eraseSub();
	if ( TESTFLAG( IBase->Flags, ITEMDRAWN ) ) eraseItem();

	/* want to protect my BorderPatrol, so I put this
	 * under the layers lock.
	 * BUT WAIT: that's bad locking order.
	 * removeMStrip has to redraw gadgets, and thus
	 * get gadgets lock.  That must come BEFORE
	 * a layer lock (but AFTER LayerInfo lock).
	 *
	 * So, we nest the LayerInfo, which will protect BorderPatrol(),
	 * and we release the layers.
	 */
#if 1
	DEND( printf("start toremove mstrip\n"));
	LockLayerInfo( &AScreen->LayerInfo );
	UnlockLayers( &AScreen->LayerInfo );
	removeMStrip( AScreen );
	UnlockLayerInfo( &AScreen->LayerInfo );
	DEND( printf("done remove mstrip\n"));
#else
	removeMStrip( AScreen );
	UnlockLayers( &AScreen->LayerInfo );
#endif

	if ( TESTFLAG( IBase->NewIControl, IC_DOMAGICMENU ) )
	    IMoveScreen( AScreen, &IBase->ShiftBack, SPOS_REVALIDATE );
	freeMouse();

	sendAllMenuClear( AScreen );

	if ( IT->it_Command == itMENUUP )
	{
	    DMH( printf("menupick %lx\n", IBase->OptionList ) );
	    activeEvent( IECLASS_MENULIST, IBase->OptionList );
	}
	else
	{
	    DMH( printf("send menuhelp, code %lx\n", 
		saveselected ) );
	    activeEvent( IECLASS_MENUHELP, saveselected );
	}

	if ( IBase->MenuLendingReturn )
	{
	    /* Transmogrify token into an itACTIVATEWIN one,
	     * and then fall through to startIdleWindow().
	     */
	    IT->it_Command = itACTIVATEWIN;
	    IT->it_Object1 = (CPTR) IBase->MenuLendingReturn;
	    IT->it_Object2 = AWIN_NORMAL;
	}
	startIdleWindow();
	return;
    }
}

sendAllMenuClear( screen )
struct Screen	*screen;
{
    struct Window	*w;

    for ( w = screen->FirstWindow; w; w = w->NextWindow)
    {
	if ( TESTFLAG( w->MoreFlags, WMF_NEEDMENUCLEAR ) )
	{
	    CLEARFLAG( w->MoreFlags, WMF_NEEDMENUCLEAR );
	    windowEvent( w, IECLASS_RAWMOUSE, MENUUP );
	}
    }
}

/*
 * searches a list of Menus for a command key match.
 * returns menunum, MENUNULL if no match
 */
UWORD
findMenuKey( menu, code )
struct Menu	*menu;
{
    WORD	menunum;
    WORD	itemnum;
    WORD	subnum;

    struct MenuItem	*item, *sub;

    D( printf("findMenuKey, menu %lx, code %lx\n", menu, code ) );

    if ( ! code ) return ( MENUNULL );
    code = ToUpper( code );

    D( printf("uppercode: %lx\n", code ) );

    menunum = -1;
    while ( menu )
    {
	menunum++;
	item = menu->FirstItem;
	itemnum = -1;
	while (item)
	{
	    itemnum++;
	    subnum = -1;
	    if (sub = item->SubItem)
	    {
		while (sub)
		{
		    subnum++;
		    if ( ToUpper( sub->Command ) == code )
		    {
			D( printf("found match subitem\n") );
			goto FOUNDMATCH;
		    }
		    sub = sub->NextItem;
		}
	    }
	    else if ( ToUpper( item->Command ) == code )
	    {
		D( printf("found match item\n") );
		goto FOUNDMATCH;
	    }
	    D(else if ( item->Command)
		printf("no match at item level %lx, (upper) %lx\n", 
		item->Command, ToUpper( item->Command ));)

	    item = item->NextItem;
	}
	menu = menu->NextMenu;
    }

    /* no match */
    return (  MENUNULL );

FOUNDMATCH:
    D( printf("fMK: returning menunum %lx\n",
	SHIFTSUB(subnum) | SHIFTITEM(itemnum) | SHIFTMENU(menunum) ) );

    D( printf("fMK, that's %lx, %lx, %lx\n", menunum, itemnum, subnum ) );

    {
    UWORD composite;

    composite =  ( SHIFTSUB(subnum) | SHIFTITEM(itemnum) | SHIFTMENU(menunum) );
    D( printf("composite var %lx\n", composite ) );
    }

    return ( SHIFTSUB(subnum) | SHIFTITEM(itemnum) | SHIFTMENU(menunum) );
}
@


38.19
log
@Was forgetting to clear WMF_NEEDMENUCLEAR, which meant extraneous
MENUUP messages could be sent.  In a few cases, wasn't ensuring that
every MENUVERIFY was followed by a MENUPICK.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.18 92/08/02 12:45:42 peter Exp Locker: peter $
d426 1
@


38.18
log
@Changes to handle menu-lending for menu-command keys.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.17 92/07/17 17:30:49 peter Exp Locker: peter $
d162 7
a168 2
	/* I may have sent the MENUVERIFY to some of the windows
	 * already.
d170 4
d340 4
a346 1
    case OKABORT:	/* ZZZ: do nothing? */
d588 1
@


38.17
log
@Now use WFLG_NEWLOOKMENUS instead of WMF_NEWLOOKMENUS so it can be
public.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.16 92/07/07 15:24:02 peter Exp Locker: peter $
d350 11
d560 1
a560 3
	    IT->it_Object2 = NULL;
	    IT->it_SubCommand = FALSE;
	    IBase->MenuLendingReturn = NULL;
@


38.16
log
@itGADGETMETHOD is deferred.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.15 92/06/29 10:47:44 peter Exp Locker: peter $
d64 1
a64 1
    if ( !TESTFLAG( awindow->MoreFlags, WMF_NEWLOOKMENUS ) )
@


38.15
log
@Now uses IBase->LongMouse.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.14 92/06/18 18:10:56 peter Exp Locker: peter $
d402 1
@


38.14
log
@Sets it_SubCommand to FALSE when generating an itACTIVATEWIN token.
Now defers itACTIVATEWIN instead of failing.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.13 92/05/15 14:09:57 peter Exp Locker: peter $
d445 1
a445 1
    if ( IBase->Mouse.Y >= IBase->HoldMinYMouse )
@


38.13
log
@itACTIVATEWIN loses it_SubCommand.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.12 92/04/09 16:33:23 peter Exp Locker: peter $
d387 1
a425 1
    case itACTIVATEWIN:	/* do default */
d549 1
@


38.12
log
@Flying changes to window Detail/BlockPen now picked up for menus.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.11 92/04/07 17:58:25 peter Exp Locker: peter $
a548 1
	    IT->it_SubCommand = FALSE;
@


38.11
log
@Handles itSETPOINTER token.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.10 92/04/02 21:41:33 peter Exp Locker: peter $
d52 1
d57 12
@


38.10
log
@Supports menu lending.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.9 92/03/23 11:55:21 peter Exp Locker: peter $
d419 1
@


38.9
log
@Minor optimization.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.8 92/03/21 14:54:48 peter Exp Locker: peter $
d527 11
@


38.8
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.7 92/03/19 15:55:17 peter Exp Locker: peter $
d195 4
d212 6
a217 8
	IMoveScreen( AScreen, &movepoint, SMOVE_MENUSNAPRANGE );
	if ( TESTFLAG( IE->ie_Qualifier, IEQUALIFIER_LCOMMAND ) )
	{
	    /* keep him at 0,0	*/
	    IBase->ShiftBack.X = 0;
	    IBase->ShiftBack.Y = 0;
	}
	else
a222 6
    else
    {
	/* something safe, just in case */
	IBase->ShiftBack.X = 0;
	IBase->ShiftBack.Y = 0;
    }
d510 1
a510 1
	    IMoveScreen( AScreen, &IBase->ShiftBack, SMOVE_REVALIDATE );
@


38.7
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.6 92/03/19 10:55:26 peter Exp Locker: peter $
a391 1
    case itATTACHSCREEN:	/* defer */
@


38.6
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.5 92/03/03 16:35:50 peter Exp Locker: peter $
d392 1
@


38.5
log
@Renamed the screen movement flags.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.4 92/02/20 12:17:51 peter Exp Locker: peter $
d424 1
a424 1
    default:
@


38.4
log
@Defers new itCOPYSCBUF token.  itCHANGESCBUF succeeds if active gadget
is on another screen.  ActiveScreen optimization.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.3 92/02/17 17:17:53 peter Exp Locker: peter $
d208 1
a208 1
	IMoveScreen( AScreen, &movepoint, MAGIC_RANGE );
d514 1
a514 1
	    IMoveScreen( AScreen, &IBase->ShiftBack, MAGIC_VALIDATE );
@


38.3
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token fails.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.2 91/08/21 18:21:20 peter Exp Locker: peter $
d129 1
a129 1
	(struct Window *) &IBase->ActiveWindow->WScreen->FirstWindow;
d152 1
a152 1
	sendAllMenuClear( IBase->ActiveWindow->WScreen );
d156 1
a156 1
	removeMStrip( IBase->ActiveWindow->WScreen );
d193 1
d200 2
a201 2
	asleft = IBase->ActiveWindow->WScreen->LeftEdge;
	astop = IBase->ActiveWindow->WScreen->TopEdge;
d208 1
a208 1
	IMoveScreen( IBase->ActiveWindow->WScreen, &movepoint, MAGIC_RANGE );
d217 2
a218 2
	    IBase->ShiftBack.X = asleft- IBase->ActiveWindow->WScreen->LeftEdge;
	    IBase->ShiftBack.Y = astop- IBase->ActiveWindow->WScreen->TopEdge;
d241 2
a242 2
	holdmin.Y = IBase->ActiveWindow->WScreen->TopEdge;
	screenToMouse( &holdmin, IBase->ActiveWindow->WScreen );
d246 2
a247 3
    D( printf("sMenu lock layers, linfo %lx\n",
	&IBase->ActiveWindow->WScreen->LayerInfo ) );
    LockLayers( &IBase->ActiveWindow->WScreen->LayerInfo );
d353 1
d391 1
d401 8
a408 1
	IT->it_Error = 1;
d439 2
a440 2
	IBase->ScreenMouseLimits.MaxX = IBase->ActiveScreen->Width - 1;
	IBase->ScreenMouseLimits.MaxY = IBase->ActiveScreen->Height - 1;
d503 4
a506 4
	LockLayerInfo( &IBase->ActiveWindow->WScreen->LayerInfo );
	UnlockLayers( &IBase->ActiveWindow->WScreen->LayerInfo );
	removeMStrip( IBase->ActiveWindow->WScreen );
	UnlockLayerInfo( &IBase->ActiveWindow->WScreen->LayerInfo );
d509 2
a510 2
	removeMStrip( IBase->ActiveWindow->WScreen );
	UnlockLayers( &IBase->ActiveWindow->WScreen->LayerInfo );
d514 1
a514 1
	    IMoveScreen( IBase->ActiveWindow->WScreen, &IBase->ShiftBack, MAGIC_VALIDATE );
d517 1
a517 1
	sendAllMenuClear( IBase->ActiveWindow->WScreen );
@


38.2
log
@Removed menu-delay stuff.  It wasn't good enough.  Maybe some other time...
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.1 91/07/10 18:02:19 peter Exp Locker: peter $
d377 13
a389 34
    case itSETREQ:
    case itCLEARREQ:
    case itCLOSEWIN:
    case itBORDERPATROL:
    case itSHOWTITLE:
    case itOPENWIN:
#if POSSIBLE
	** worried about gadget locks, ibase lock

    	if ( itwindow->WScreen == IBase->ActiveWindow->WScreen ) {
	    deferToken();
	}
	else {
	    doDefault();
	}
#else
	deferToken();
#endif
	return;

    case itONOFFMENU:	/* jimm: new token after beta1	*/
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itZOOMWIN:
    case itDEPTHWIN:
#if POSSIBLE
    	if ( itwindow == IBase->ActiveWindow ) {
	    deferToken();
	}
	else {
	    doDefault();
	}
#else
a390 1
#endif
d394 2
a395 2
    case itMOVESCREEN:
    case itDEPTHSCREEN:
d398 2
a399 3
    case itOPENSCREEN:
    case itCLOSESCREEN:
	deferToken();
d405 9
a413 9
    case itTIMER:
    case itDISKCHANGE:
    case itACTIVATEWIN:
    case itACTIVATEGAD:		/* fail  */
    case itMETADRAG:
    case itVERIFY:
    case itREMOVEGAD:
    case itNEWPREFS:
    case itMODIFYIDCMP:
@


38.1
log
@Added velocity-based menu-delay.
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 38.0 91/06/12 14:32:30 peter Exp Locker: peter $
a12 1
#define DO_MENU_DELAY	(1)
a343 7
#if DO_MENU_DELAY
/* Threshold for sub-menu delay: 3 horizontal and 3 vertical ticks */

#define MENUDELAY_THRESH	(3*(22+26))
#endif


a359 39
#if DO_MENU_DELAY
    case itMOUSEMOVE:	/* do menu stuff	*/
    case itTIMER:	/* if menu delayed, may need to updateOptions() */
	doDefault();
	/* fall through */
	if ( IT->it_Command == itMOUSEMOVE )
	{
	    if ( ( iabs( IT->it_Box.Left ) + iabs( IT->it_Box.Top ) ) >
		MENUDELAY_THRESH )
	    {
		/* The mouse is moving a lot.  We don't want to change
		 * which menu is highlighted.  This gives us the menu delay
		 * we all have been craving.
		 *
		 * We want to avoid a problem if the mouse changes from
		 * moving fast to being stationary (which would leave the
		 * wrong menu highlighted).  Thus, we mark that we're
		 * in menu-delay and have swallowed a mouse-move recently.
		 */
		IBase->Flags |= ( MENUDELAY | RECENTLY );
		break;
	    }
	}
	else /* ( it->it_Command == itTIMER ) */
	{
	    /* The "recently" flag expires every timer tick.
	     * But if we were in menu-delay and the "recently"
	     * flag is not set, then we'd better updateOptions()
	     * to avoid the wrong highlighting getting stuck.
	     * (see above).
	     */
	    if ( ( IBase->Flags & ( MENUDELAY | RECENTLY ) ) != MENUDELAY )
	    {
		IBase->Flags &= ~RECENTLY;
		break;
	    }
	    /* else fall through */
	}
#else
a362 1
#endif
a368 3
#if DO_MENU_DELAY
	IBase->Flags &= ~MENUDELAY;
#endif
a427 2
#if DO_MENU_DELAY
#else
a428 1
#endif
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: smenu.c,v 1.22 91/04/05 16:20:11 peter Exp $
d13 1
d345 7
d368 39
d410 1
d417 3
d479 2
d482 1
@
