head     38.16;
branch   ;
access   ;
symbols  V40_85:38.16 V40_71:38.16 V40_68:38.16 V40_65:38.16 V40_47:38.15 V40_45:38.15 V40_37:38.15 V40_34:38.15 V40_29:38.15 V39_2415:38.15 V39_2369:38.15 V39_2339:38.15 V39_2332:38.15 V39_2275:38.14 V39_2256:38.13 V39_2210:38.13 V39_2192:38.12 V39_2084:38.11 V39_2082:38.11 V39_2076:38.11 V39_2073:38.11 V39_2058:38.11 V39_2051:38.11 V39_2031:38.11 V39_2017:38.11 V39_2012:38.11 V39_1985:38.11 V39_1933:38.11 V39_1819:38.11 V39_1805:38.11 V39_1783:38.11 V39_1695:38.11 V39_1621:38.9 V39_1620:38.9 V39_1508:38.8 V39_1485:38.8 V39_1461:38.8 V39_1458:38.8 V39_1456:38.8 V39_1405:38.8 V39_1368:38.8 V39_1360:38.8 V39_1324:38.8 V39_1147:38.8 V39_1143:38.8 V39_1141:38.8 V39_1120:38.7 V39_1116:38.7 V39_1104:38.7 V39_1100:38.7 V39_1078:38.7 V39_1073:38.7 V39_757:38.5 V39_702:38.5 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.2 V39_371:38.2 V39_336:38.2 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.16
date     93.04.13.16.52.55;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.12.09.18.11.05;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.12.04.11.56.34;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.11.20.18.30.59;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.11.10.17.02.44;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.07.08.15.25.06;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.07.15.17.59;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.06.29.10.42.18;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.01.13.51.24;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.04.07.17.47.41;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.01.15.04.10;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.23.11.48.25;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.21.14.49.50;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.03.16.31.53;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.28.12.40.32;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.25.16.56.42;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.15.40;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.16
log
@Added a bit of debugging.
@
text
@/*** dclip.c **************************************************************
 *
 * display (viewport) clipping 
 *
 *  $Id: dclip.c,v 38.15 92/12/09 18:11:05 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 ****************************************************************************/

#include "intuall.h"

#ifndef GRAPHICS_DISPLAYINFO_H
#include <graphics/displayinfo.h>
#endif


#define DQO(x)	;
#define DSLP(x)	;
#define DSCROLL(x)	;

autoScroll( sc )
struct Screen	*sc;
{
    struct LongPoint scmouse, legalscmouse;
    struct Point move;
    struct Rectangle	*dclip;		/* current vport display clip	*/
    struct Rectangle limits;
    struct IntuitionBase	*IBase = fetchIBase();

    if ( !sc || ! TESTFLAG( sc->Flags, AUTOSCROLL) ) return;
    /* If you try to drag a "non-draggable" child screen, that's like
     * dragging the parent.
     */
    if ( ( !TESTFLAG( XSC(sc)->PrivateFlags, PSF_DRAGGABLE ) ) &&
    	( XSC(sc)->ParentScreen ) )
    {
	sc = XSC(sc)->ParentScreen;
    }

    /* Take MouseLimits, and convert to screen coordinates */
    limits = IBase->MouseLimits;
    limits.MinX /= XSC(sc)->ScaleFactor.X;
    limits.MinY /= XSC(sc)->ScaleFactor.Y;
    limits.MaxX /= XSC(sc)->ScaleFactor.X;
    limits.MaxY /= XSC(sc)->ScaleFactor.Y;

    dclip = &XSC(sc)->VPExtra->DisplayClip;

    move.X = move.Y = 0;

    /* IBase->LongMouse contains the updated mouse coordinates
     * in mouse ticks.  Let's work out where on the screen that
     * would be:
     */

    scmouse = IBase->LongMouse;
    longmouseToScreen( &scmouse, sc );

    /* If this point is outside the mouse limits, we must attempt to
     * autoscroll the screen.  So let's constrain the point to the
     * limits, and measure the difference:
     */
    legalscmouse = scmouse;
    limitLongPoint( &legalscmouse, &limits );
    move.X = legalscmouse.LX - scmouse.LX;
    move.Y = legalscmouse.LY - scmouse.LY;


    /* Movement due to the mouse hitting the left edge ( move.X > 0 )
     * Can't move farther than the amount of screen which is off-display.
     * Also can't move if OKSCROLL_LEFT is disallowed.
     */
    if ( move.X > 0 )
    {
	move.X = imin( move.X, imax( 0, dclip->MinX - sc->LeftEdge ) );
	if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_LEFT ) )
	{
	    move.X = 0;
	}
    }

    /* Movement due to the mouse hitting the right edge ( move.X < 0 )
     * Can't move farther than the amount of screen which is off-display.
     * Also can't move if OKSCROLL_RIGHT is disallowed.
     */
    if ( move.X < 0 )
    {
	move.X = imax( move.X, imin( 0, dclip->MaxX -
	    ( sc->LeftEdge + sc->Width - 1 ) ) );
	if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_RIGHT ) )
	{
	    move.X = 0;
	}
    }

    /* Movement due to the mouse hitting the top edge ( move.Y > 0 )
     * Can't move farther than the amount of screen which is off-display.
     * Also can't move if OKSCROLL_UP is disallowed.
     */
    if ( move.Y > 0 )
    {
	/* if screen wants to scroll up too much, restrict */
	move.Y = imin( move.Y, imax( 0, dclip->MinY - sc->TopEdge ) );
	if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_UP ) )
	{
	    move.Y = 0;
	}
    }

    /* Movement due to the mouse hitting the bottom edge ( move.Y < 0 )
     * Can't move farther than the amount of screen which is off-display.
     * Also can't move if OKSCROLL_DOWN is disallowed.
     *
     * New special case:  if a child screen is way off the bottom of
     * the display (because its parent is pulled down too), but the
     * child screen is still active, we MUST suppress autoscroll.
     * The reason is that if we don't, it will scroll up as far as
     * it can, which is to say the parent's top edge.  If the parent
     * is pulled down as far as can be, we would have trapped the
     * parent and child forever.  (Can't drag the child up or down
     * from there, can't reach the parent to drag it).
     */
    if ( move.Y < 0 )
    {
	move.Y = imax( move.Y, imin( 0, dclip->MaxY -
	    ( sc->TopEdge + sc->Height - 1 ) ) );
	if ( ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_DOWN ) ) ||
	    ( sc->TopEdge > dclip->MaxY ) )
	{
	    move.Y = 0;
	}
    }

    /* check for actual change */
    if ( *( (ULONG *) &move ) )
    {
	DSCROLL( dumpPt( "scroll move", move ) );

	IMoveScreen( sc, &move, 0 );

	if TESTFLAG( IBase->Flags, SCREENMLIMITS )
	    rethinkMouseLimits();
    }
}

/* (re)establish mouse limits based on screen-relative mouse limits.
 * Constrains screen-limits based on DClip, and sets up scroll freedom
 * to allow scrolling only in those directions where the DClip was
 * the limiting factor, then establishes IBase->MouseLimits.
 */

rethinkMouseLimits()
{
    struct IntuitionBase *IBase = fetchIBase();
    struct Rectangle worklimits;
    struct Screen *sc = IBase->ActiveScreen;
    struct Rectangle *dclip = &XSC(sc)->VPExtra->DisplayClip;

    worklimits = IBase->ScreenMouseLimits;

    offsetRect( &worklimits, sc->LeftEdge, sc->TopEdge );

    /* Prohibit scrolling in all directions until we know otherwise */
    CLEARFLAG( IBase->ScrollFreedom, OKSCROLL_ALL );

    if ( worklimits.MinX < dclip->MinX )
    {
	worklimits.MinX = dclip->MinX;
	SETFLAG( IBase->ScrollFreedom, OKSCROLL_LEFT );
    }

    if ( worklimits.MinY < dclip->MinY )
    {
	worklimits.MinY = dclip->MinY;
	SETFLAG( IBase->ScrollFreedom, OKSCROLL_UP );
    }

    if ( worklimits.MaxX > dclip->MaxX )
    {
	worklimits.MaxX = dclip->MaxX;
	SETFLAG( IBase->ScrollFreedom, OKSCROLL_RIGHT );
    }

    if ( worklimits.MaxY > dclip->MaxY )
    {
	worklimits.MaxY = dclip->MaxY;
	SETFLAG( IBase->ScrollFreedom, OKSCROLL_DOWN );
    }

    /* Set up limits in mouse coordinates */
    scaleScreenMouse( &worklimits, sc );
    IBase->MouseLimits = worklimits;
}
/*** intuition.library/QueryOverscan ***/


/*
 * doesn't fill out ns.Left/Top/Width/Height but just
 * rect (which can be dclip)
 * if ns is  NULL, returns just mouse coordinates
 * if rect is NULL, won't do anything with it
 * if it doesn't recognize ostype, uses OSCAN_TEXT
 *
 * returns non-zero if successful
 */

QueryOverscan( displayID, rect, ostype )
ULONG			displayID;
struct Rectangle	*rect;
WORD			ostype;
{
    return ( displayOScan( NULL, displayID, ostype, rect ) );
}

/* defines legal range of values for screen->Top/LeftEdge
 * returns in Screen coordinates
 */
screenLegalPosition( screen, limitrect, flags )
struct Screen	*screen;
struct Rectangle *limitrect;	/* returned information	*/
WORD	flags;	/* Magic menu can send screen right of legal */
{
    /* We use the VPExtra (i.e. coerced) DClip, since we need to
     * be legal wrt. the actual DClip then in use.
     */
    struct Rectangle	*displayclip = &XSC(screen)->VPExtra->DisplayClip;
    struct Screen *parent = XSC(screen)->ParentScreen;
    int	extrawidth;
    int	extraheight;
    int unbounded;

    DSLP( printf("----- screenLegalPosition ------\n") );

    /* copy DisplayClip	*/
    *limitrect = *displayclip;
    DSLP( dumpRect("sLP: Display Clip:", limitrect) );

    /* freeze ULC to left edge of display clip */
    limitrect->MaxX = limitrect->MinX;

    /* Programmatic screen movement is unbounded on the bottom
     * (and must remain so for compatibility).  The other thing
     * which is unbounded on the bottom are child screens that
     * got pushed far off the bottom when their parent went downward.
     * Note that the parent itself is bounded.  The important thing
     * is we never want to take such a child screen and accidentally
     * apply the lower bound (say during coercion caused by RethinkDisplay()).
     * In fact, 3.00 has this exact bug.
     *
     * So the rule for bottom-bounding is:
     * - If this is a child screen, default to unbounded
     * - If SPOS_UNBOUNDEDBOTTOM is set, force unbounded (IMoveScreen()
     *   sets this for compatibility)
     * - If SPOS_BOUNDEDBOTTOM is set, force bounded (startScreenDrag()
     *   sets this, so that a user can't drag a child screen off the
     *   bottom).
     */
    unbounded = (int) parent;
    if ( TESTFLAG( flags, SPOS_UNBOUNDEDBOTTOM ) )
    {
	unbounded = TRUE;
    }
    if ( TESTFLAG( flags, SPOS_BOUNDEDBOTTOM ) )
    {
	unbounded = FALSE;
    }
    if ( unbounded )
    {
#define VBIG	(7000)
	limitrect->MaxY = VBIG;
    }

    /* For screens which are incompatible with any other screen
     * according to the graphics database (PSF_INCOMPATIBLE), or
     * exclusive by design (PSF_EXCLUSIVE), there's no point letting
     * the user drag them down below the DClip.  This is a good
     * idea anyways, and is required for scrollable Hedley screens.
     * However, if the screen is a PSF_EXCLUSIVE child, then that
     * doesn't apply, since it's part of an exclusive family.
     */
    if ( TESTFLAG( XSC(screen)->PrivateFlags, PSF_INCOMPATIBLE ) ||
	    ( TESTFLAG( XSC(screen)->PrivateFlags, PSF_EXCLUSIVE ) && ( !parent ) ) )
    {
	limitrect->MaxY = limitrect->MinY;
    }

    extrawidth = screen->Width - rectWidth( displayclip );
    extraheight = screen->Height - rectHeight( displayclip );

    /**  let him float about within his display clip	**/
    if (extrawidth >= 0)	/* screen wider than display clip	*/
    {
	limitrect->MinX -= extrawidth;
    }
    else		/* screen fits within display clip	*/
    {
	/* 'extrawidth' is negative	*/
	limitrect->MaxX -= extrawidth;
    }

    /* For magic-menu action, want to let him move right as far
     * as text overscan, even though that's not in the usual
     * legal range.
     */
    if ( TESTFLAG( flags, SPOS_MENUSNAPRANGE ) )
    {
	limitrect->MaxX = imax( 0, limitrect->MaxX );
    }

    if (extraheight > 0) limitrect->MinY -= extraheight;
    /* already bottomed out	*/

    /* If this screen is a child screen, don't let the top edge
     * be higher than the parent's.  We have no constraints to
     * apply to the left edge, because draggable children are
     * horizontally independent of the parent (as are non-draggable
     * children sent to us with SPOS_FORCEDRAG), and non-draggable
     * without SPOS_FORCEDRAG are locked to their current spot if
     * possible, just before exiting from here.
     */
    DSLP( dumpRect("screenLegalPosition before parent test:", limitrect) );
    if ( parent )
    {
	limitrect->MinY = imax( limitrect->MinY, parentOriginY( screen, parent ) );
    }

    DSLP( dumpRect("screenLegalPosition before drag test:", limitrect) );

    if ( !canSlide( screen, TESTFLAG( flags, SPOS_FORCEDRAG ) ) )
    {
	/* For non-draggable screens, the screen's legal position
	 * is the exact point where it already is, with no movement
	 * allowed, provided that point is legal in the first place.
	 * So let's set the limitrect to a single point, which is the
	 * nearest legal position to screen->LeftEdge/TopEdge
	 */
	struct Point ulcorner;
	ulcorner = *((struct Point *)&screen->LeftEdge);
	limitPoint( &ulcorner, limitrect );
	limitrect->MinX = limitrect->MaxX = ulcorner.X;
	limitrect->MinY = limitrect->MaxY = ulcorner.Y;
    }

    DSLP( dumpRect("screenLegalPosition after drag test:", limitrect) );
}
@


38.15
log
@Finally handles horizontal relationship between non-draggable child
and its parent.  screenLegalPosition() for non-draggable screens
now returns the nearest legal position to the current position.
(Non-draggable child screens weren't having their TopEdge validated as
>= parent's).  Now support families of exclusive screens.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.14 92/12/04 11:56:34 peter Exp Locker: peter $
d322 1
@


38.14
log
@When the base autoscroll amount was changed to be the amount the mouse
position exceeded the MouseLimits (instead of the amount the mouse
position exceeded DClip), the test to scroll no farther than the
excess amount of screen outside the DClip was incorrectly changed to
use MouseLimits too.  That test once again uses the DClip.
Child screens fully off the bottom no longer autoscroll up.  If they
did, we could trap a child/parent in an undraggable condition.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.13 92/11/20 18:30:59 peter Exp Locker: peter $
a234 10
    if ( !canSlide( screen, TESTFLAG( flags, SPOS_FORCEDRAG ) ) )
    {
	DSLP( printf("sLP: non-Draggables screen: \
		legal position is where is.\n") );

	limitrect->MinX = limitrect->MaxX = screen->LeftEdge;
	limitrect->MinY = limitrect->MaxY = screen->TopEdge;
	return;
    }

d279 2
d282 2
a283 1
    if ( TESTFLAG( XSC(screen)->PrivateFlags, PSF_EXCLUSIVE|PSF_INCOMPATIBLE ) )
d315 6
a320 3
     * be higher than the parent's.  If the screen is a non-draggable
     * child screen, then the left-edge must match (proportionately)
     * the parent screen's.
d324 1
a324 13
	limitrect->MinY = imax( limitrect->MinY, pullDown( screen, parent ) );

	if ( !TESTFLAG( XSC(screen)->PrivateFlags, PSF_DRAGGABLE ) )
	{
	    /* This screen doesn't drag independently, so scale
	     * the parent's left-edge into this screen's coordinates,
	     * and enforce this screen's left-edge to be that.
	     */
	    limitrect->MinX = limitrect->MaxX =
		( ( parent->LeftEdge - XSC(parent)->DClip.MinX ) *
		XSC(parent)->ScaleFactor.X ) / XSC(screen)->ScaleFactor.X +
		XSC(screen)->DClip.MinX;
	}
d327 1
a327 2
    DSLP( printf("sLP: extra width/height %ld/%ld\n",
	extrawidth,extraheight));
d329 14
a342 1
    DSLP( dumpRect("screenLegalPosition before scale:", limitrect) );
d344 1
a344 5
#if 0	/* return screen coords	*/
    scaleScreenMouse( limitrect, screen );

    DSLP( dumpRect("screenLegalPosition after scale", limitrect) );
#endif
a345 1

@


38.13
log
@Child screens that are legitimately off the bottom of the DClip are no
longer brought back "in bounds" by RethinkDisplay().
screenLegalPosition() now interprets SPOS_FORCEDRAG instead of relying
on PSF_DRAGOVERRIDE being set.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.12 92/11/10 17:02:44 peter Exp Locker: peter $
d27 1
d48 2
d76 1
a76 1
	move.X = imin( move.X, imax( 0, limits.MinX - sc->LeftEdge ) );
d89 1
a89 1
	move.X = imax( move.X, imin( 0, limits.MaxX -
d104 1
a104 1
	move.Y = imin( move.Y, imax( 0, limits.MinY - sc->TopEdge ) );
d114 9
d126 1
a126 1
	move.Y = imax( move.Y, imin( 0, limits.MaxY -
d128 2
a129 1
	if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_DOWN ) )
@


38.12
log
@AutoScroll boundaries are now the MouseLimits, not the DClip.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.11 92/07/08 15:25:06 peter Exp Locker: peter $
d215 1
a215 1
    struct Screen *parent;
d218 1
d222 1
a222 1
    if ( ! CanSlide( screen ) )
d239 16
a254 3
    /* Programmatic screen movement is unbounded on the bottom.
     * IMoveScreen() sets the SPOS_UNBOUNDEDBOTTOM flag before
     * calling us.
d256 1
d259 8
d313 1
a313 1
    if ( parent = XSC(screen)->ParentScreen )
@


38.11
log
@Fixed the rest of the weird autoscroll bug with pulled-down screen.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.10 92/07/07 15:17:59 peter Exp Locker: peter $
d27 1
a27 1
    struct Rectangle	*dclip;		/* current vport display clip	*/
d40 6
a45 1
    dclip = &XSC(sc)->VPExtra->DisplayClip;
d57 3
a59 3
    /* If this point is outside the DClip, we must attempt to
     * autoscroll the screen.  So let's constrain the point
     * to the DClip, and measure the difference:
d62 1
a62 1
    limitLongPoint( &legalscmouse, dclip );
d73 1
a73 1
	move.X = imin( move.X, imax( 0, dclip->MinX - sc->LeftEdge ) );
d86 1
a86 1
	move.X = imax( move.X, imin( 0, dclip->MaxX -
d101 1
a101 1
	move.Y = imin( move.Y, imax( 0, dclip->MinY - sc->TopEdge ) );
d114 1
a114 1
	move.Y = imax( move.Y, imin( 0, dclip->MaxY -
@


38.10
log
@Fixed weird autoscroll bug with pulled-down screen.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.9 92/06/29 10:42:18 peter Exp Locker: peter $
d60 1
a60 7
    /* Screen movement due to the mouse hitting the right edge
     * (move.X < 0) may be disallowed
     */
    if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_RIGHT ) )
    {
	move.X = imax( move.X, 0 );
    }
d62 3
a64 2
    /* Screen movement due to the mouse hitting the left edge
     * (move.X > 0) may be disallowed
d66 7
a72 3
    if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_LEFT ) )
    {
	move.X = imin( move.X, 0 );
d75 3
a77 2
    /* Screen movement due to the mouse hitting the bottom edge
     * (move.Y < 0) may be disallowed
d79 8
a86 3
    if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_DOWN ) )
    {
	move.Y = imax( move.Y, 0 );
d89 3
a91 2
    /* Screen movement due to the mouse hitting the top edge
     * (move.Y > 0) may be disallowed
a92 5
    if ( !TESTFLAG( IBase->ScrollFreedom, OKSCROLL_UP ) )
    {
	move.Y = imin( move.Y, 0 );
    }

d97 18
@


38.9
log
@autoScroll() now handles a pointer to a LongPoint.  Fixed autoScroll()
to be smaller and to not require the mouse already be at the dclip
extreme before scrolling.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.8 92/05/01 13:51:24 peter Exp Locker: peter $
a59 1

d95 1
a95 1
	move.Y = imin( move.Y, dclip->MinY - sc->TopEdge );
@


38.8
log
@Fixed autoscroll of non-draggable child-screens.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.7 92/04/07 17:47:41 peter Exp Locker: peter $
d22 1
a22 13
#define ASCROLL_HTHRESHHOLD	(1)
#define ASCROLL_VTHRESHHOLD	(1)

/* use mouse limits to trigger autoscroll */
#define SCROLLMLIMITS	1
#define AS_HMOUSETHRESH	(ASCROLL_HTHRESHHOLD * MOUSESCALEX)
/* Now nation-sensitive:
#define AS_VMOUSETHRESH	(ASCROLL_VTHRESHHOLD * MOUSESCALEY)
*/
/*
 * mouse change called in post-acceleration mouse coords
 */
autoScroll( sc, mchange )
a23 1
struct Point	*mchange;
d25 2
a26 2
    int			overlap;	/* left/top overlap	*/
    struct Point	move;		/* scroll in screen coords */
a27 1
    BOOL		topcheck = FALSE;	/* special for scroll down */
a28 1
    int			VMouseThresh = ASCROLL_VTHRESHHOLD * IBase->MouseScaleY;
d41 1
d44 29
a72 2
    /* scroll screen on from left	*/
    if ( ( IBase->ScrollFreedom & OKSCROLL_LEFT) && ( mchange->X < 0 ) && ( (overlap = dclip->MinX - sc->LeftEdge) > 0 ))
d74 1
a74 8
#if SCROLLMLIMITS
	if ( IBase->Mouse.X - IBase->MouseLimits.MinX  < AS_HMOUSETHRESH )
#else
	if ( sc->MouseX - overlap  < ASCROLL_HTHRESHHOLD )
#endif
	{
	    move.X = - mchange->X;
	}
d76 5
a80 3
    /* scroll screen on from right	*/
    else if ( ( IBase->ScrollFreedom & OKSCROLL_RIGHT) && (mchange->X > 0 ) &&
	( (sc->Width + sc->LeftEdge - 1 - dclip->MaxX)>0))
d82 1
a82 8
#if SCROLLMLIMITS
	if ( IBase->MouseLimits.MaxX - IBase->Mouse.X < AS_HMOUSETHRESH )
#else
	if ( sc->MouseX + sc->LeftEdge > dclip->MaxX - ASCROLL_HTHRESHHOLD )
#endif
	{
	    move.X = - mchange->X;
	}
d85 4
a88 2
    /* scroll screen on from top	*/
    if ( ( IBase->ScrollFreedom & OKSCROLL_UP) && ( mchange->Y < 0 ) && ( (overlap = dclip->MinY - sc->TopEdge) > 0 ))
d90 1
a90 9
#if SCROLLMLIMITS
	if ( IBase->Mouse.Y - IBase->MouseLimits.MinY  < VMouseThresh )
#else
	if ( sc->MouseY - overlap  < ASCROLL_VTHRESHHOLD )
#endif
	{
	    move.Y = - mchange->Y;
	    topcheck = TRUE;	/* will do some limiting in screen coords */
	}
d92 2
a93 3
    /* scroll screen on from bottom	*/
    else if ( ( IBase->ScrollFreedom & OKSCROLL_DOWN ) && (mchange->Y > 0 ) &&
	( (sc->Height + sc->TopEdge - 1 - dclip->MaxY)>0))
d95 2
a96 8
#if SCROLLMLIMITS
	if ( IBase->MouseLimits.MaxY - IBase->Mouse.Y < VMouseThresh )
#else
	if ( sc->MouseY + sc->TopEdge > dclip->MaxY - ASCROLL_VTHRESHHOLD )
#endif
	{
	    move.Y = - mchange->Y;
	}
a101 3
	/* scale to screen pixel coordinates	*/
	DSCROLL( dumpPt( "scroll move (mouse)", move ) );
	mouseToScreen( &move, sc );
a103 3
	/* if mouse wants to scroll too much, restrict */
	/* move.Y is positive for downward move/upward mouse	*/
	if ( topcheck ) move.Y = imin( move.Y, dclip->MinY - sc->TopEdge );
d134 1
a134 1
	IBase->ScrollFreedom |= OKSCROLL_LEFT;
d140 1
a140 1
	IBase->ScrollFreedom |= OKSCROLL_UP;
d146 1
a146 1
	IBase->ScrollFreedom |= OKSCROLL_RIGHT;
d152 1
a152 1
	IBase->ScrollFreedom |= OKSCROLL_DOWN;
@


38.7
log
@Removed unused vble.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.6 92/04/01 15:04:10 peter Exp Locker: peter $
d46 8
@


38.6
log
@Evicted autodocs.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.5 92/03/23 11:48:25 peter Exp Locker: peter $
a197 1
    struct IntuitionBase *IBase = fetchIBase();
@


38.5
log
@Renamed IsDraggable() to CanSlide().
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.4 92/03/21 14:49:50 peter Exp Locker: peter $
d169 1
a170 57
/****** intuition.library/QueryOverscan *************************************
*
*    NAME
*	QueryOverscan -- Inquire about a standard overscan region. (V36)
*
*    SYNOPSIS
*	success = QueryOverscan( DisplayID, Rect, OScanType )
*	D0                       A0         A1    D0
*
*	LONG QueryOverscan( ULONG, struct Rectangle *, WORD );
*
*    FUNCTION
*	This function fills in a rectangle with one of the system
*	overscan dimensions, scaled appropriately for the mode of
*	the DisplayID it is passed.
*
*	There are three types of system overscan values:
*	OSCAN_TEXT: completely visible, by user preference.  Used
*	  for Workbench screen and screen dimensions STDSCREENWIDTH
*	  and STDSCREENHEIGHT.  Left/Top is always 0,0.
*	OSCAN_STANDARD: just beyond visible bounds of monitor, by
*	  user preference.  Left/Top may be negative.
*	OSCAN_MAX: The largest region we can display, AND display
*	  any smaller region (see note below).
*	OSCAN_VIDEO: The absolute largest region that the graphics.library
*	  can display.  This region must be used as-is.
*	
*
*    INPUTS
*	DisplayID -- A 32-bit identifier for a display mode, as
*	  defined in graphics/displayinfo.h.
*
*	  NOTE: If you only intend to use one of the four standard
*	  overscan dimensions as is, and open your screen to exactly
*	  the DisplayClip dimensions, you can specify one of
*	  the OSCAN_ values in the ExtNewScreen tag SA_StdDClip,
*	  and specify STDSCREENWIDTH and STDSCREENHEIGHT as the
*	  dimensions to more easily open up an overscanned screen
*	  (or use no NewScreen in OpenScreenTagList() and accept
*	  the default standard screen dimensions).
*	
*	Rect -- pointer to a Rectangle structure which this function
*	  will fill out with its return values.  Note that to convert
*	  a rectangle to a screen "Height" you do (MaxY - MinY + 1), and
*	  similarly for "Width."  The rectangle may be passed directly
*	  to OpenScreen() as a DisplayClip region (SA_DClip).
*
*    RESULT
*	0 (FALSE) if the MonitorSpec your NewScreen requests
*	does not exist.  Non-zero (TRUE) if it does.
*	
*    BUGS
*	Change in parameter V36.A17 might cause problems for some.
*
*    SEE ALSO
*	OpenScreen(), Intuition V36 update documentation
*****************************************************************************/
@


38.4
log
@Child top not exceeding parent is now part of screenLegalPosition().
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.3 92/03/03 16:31:53 peter Exp Locker: peter $
d265 1
a265 1
    if ( ! IsDraggable( screen ) )
d283 1
a283 1
     * IMoveScreen() sets the SMOVE_UNBOUNDEDBOTTOM flag before
d286 1
a286 1
    if ( TESTFLAG( flags, SMOVE_UNBOUNDEDBOTTOM ) )
d321 1
a321 1
    if ( TESTFLAG( flags, SMOVE_MENUSNAPRANGE ) )
d330 3
a332 1
     * be higher than the parent's
d337 12
@


38.3
log
@Renamed the screen movement flags.  screenLegalPosition() now handles
unbounded bottoms for IMoveScreen().  Renamed private screen flags.
SA_Exclusive screens now cannot be dragged down, just like
MCOMPAT_NOBODY screens.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.2 92/01/28 12:40:32 peter Exp Locker: peter $
d259 1
a259 1

d328 9
a336 1
	
@


38.2
log
@MCOMPAT_NOBODY screens no longer can be dragged down below their
DClip top.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.1 91/11/25 16:56:42 peter Exp Locker: peter $
d249 1
a249 1
screenLegalPosition( screen, limitrect, allowmagic )
d252 1
a252 1
WORD	allowmagic;	/* Magic menu can send screen right of legal */
d282 3
a284 3
    /* For screens which are MCOMPAT_NOBODY, there's no point letting
     * the user drag them down below the DClip.  This is important,
     * since the new scrolling Hedley display doesn't allow that.
d286 1
a286 1
    if ( TESTFLAG( XSC(screen)->PrivateFlags, PRIVSCF_MCOMPAT_NOBODY ) )
d288 12
d321 1
a321 1
    if ( allowmagic & MAGIC_RANGE )
@


38.1
log
@Fixed a comment about DClips.
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 38.0 91/06/12 14:15:40 peter Exp Locker: peter $
d281 9
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: dclip.c,v 36.33 91/04/05 16:16:57 peter Exp $
d255 3
a257 1
    /* ZZZ: consider using screen->DClip	*/
@
