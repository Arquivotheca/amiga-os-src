head     38.0;
branch   ;
access   ;
symbols  V40_85:38.0 V40_71:38.0 V40_68:38.0 V40_65:38.0 V40_47:38.0 V40_45:38.0 V40_37:38.0 V40_34:38.0 V40_29:38.0 V39_2415:38.0 V39_2369:38.0 V39_2339:38.0 V39_2332:38.0 V39_2275:38.0 V39_2256:38.0 V39_2210:38.0 V39_2192:38.0 V39_2084:38.0 V39_2082:38.0 V39_2076:38.0 V39_2073:38.0 V39_2058:38.0 V39_2051:38.0 V39_2031:38.0 V39_2017:38.0 V39_2012:38.0 V39_1985:38.0 V39_1933:38.0 V39_1819:38.0 V39_1805:38.0 V39_1783:38.0 V39_1695:38.0 V39_1621:38.0 V39_1620:38.0 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.0
date     91.06.12.14.19.09;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@
*  $Id: hookface.asm,v 1.11 90/04/19 15:49:21 jimm Exp $

	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'

	INCLUDE 'utility/hooks.i'

	;INCLUDE 'intuall.i'		; TEST TEST TEST 

	xref	_Debug

	xdef	_callHook
	xdef	_callHookPkt
	xdef	_hookEntry

	xdef	_stubReturn


****************************************************************************
* new hook standard
* use struct Hook (with minnode at the top)
*
* *** register calling convention: ***
*	A0 - pointer to hook itself
*	A1 - pointer to parameter packed ("message")
*	A2 - Hook specific address data ("object," e.g, gadget )
*
* ***  C conventions: ***
* Note that parameters are in unusual register order: a0, a2, a1.
* This is to provide a performance boost for assembly language
* programming (the object in a2 is most frequently untouched).
* It is also no problem in "register direct" C function parameters.
*
* calling through a hook
*	callHook( hook, object, msgid, p1, p2, ... );
*	callHookPkt( hook, object, msgpkt );
*
* using a C function:	CFunction( hook, object, message );
*	hook.h_Entry = hookEntry;	
*	hook.h_SubEntry = CFunction;
*
****************************************************************************

* C calling hook interface for prepared message packet
_callHookPkt:
	movem.l	a2/a6,-(sp)	; protect
	move.l	12(sp),a0	; hook
	move.l	16(sp),a2	; object
	move.l	20(sp),a1	; message
	; ------ now have registers ready, invoke function
	pea.l	hreturn(pc)
	move.l	h_Entry(a0),-(sp)	; old rts-jump trick
	rts
hreturn:
	movem.l	(sp)+,a2/a6
_stubReturn:			; god knows when you want a pointer to rts
	rts

* C calling hook interface for "varargs message packet"
_callHook:
	movem.l	a2/a6,-(sp)	; protect
	move.l	12(sp),a0	; hook
	move.l	16(sp),a2	; object
	lea.l	20(sp),a1	; message
	; ------ now have registers ready, invoke function
	pea.l	hpreturn(pc)
	move.l	h_Entry(a0),-(sp)	; old rts-jump trick
	rts
hpreturn:
	movem.l	(sp)+,a2/a6
	rts

* entry interface for C code (large-code, stack parameters)
* this version sets up A6 with hook data, presumably IBase.
_hookEntry:
	move.l	a6,-(sp)		; save
	move.l	a1,-(sp)
	move.l	a2,-(sp)
	move.l	a0,-(sp)
	move.l	h_Data(a0),a6		; set up libbase
	move.l	h_SubEntry(a0),a0	; C entry point
	jsr	(a0)
	lea	12(sp),sp
	movem.l	(sp)+,a6		; restore
	rts


	end

@
