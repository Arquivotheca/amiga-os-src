head     38.2;
branch   ;
access   ;
symbols  V40_85:38.2 V40_71:38.2 V40_68:38.2 V40_65:38.2 V40_47:38.2 V40_45:38.2 V40_37:38.2 V40_34:38.2 V40_29:38.2 V39_2415:38.2 V39_2369:38.1 V39_2339:38.1 V39_2332:38.1 V39_2275:38.1 V39_2256:38.1 V39_2210:38.1 V39_2192:38.1 V39_2084:38.1 V39_2082:38.1 V39_2076:38.1 V39_2073:38.1 V39_2058:38.1 V39_2051:38.1 V39_2031:38.1 V39_2017:38.1 V39_2012:38.1 V39_1985:38.1 V39_1933:38.1 V39_1819:38.1 V39_1805:38.1 V39_1783:38.1 V39_1695:38.1 V39_1621:38.1 V39_1620:38.1 V39_1508:38.1 V39_1485:38.1 V39_1461:38.1 V39_1458:38.1 V39_1456:38.1 V39_1405:38.1 V39_1368:38.1 V39_1360:38.1 V39_1324:38.1 V39_1147:38.1 V39_1143:38.1 V39_1141:38.1 V39_1120:38.1 V39_1116:38.1 V39_1104:38.1 V39_1100:38.1 V39_1078:38.1 V39_1073:38.1 V39_757:38.1 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.2
date     93.01.14.14.30.48;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.03.26.16.38.47;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.27.42;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@newlookProp() now a #define, not a function.
@
text
@/*** newlook.h **************************************************************
 *
 * newlook.h -- yep
 *
 *  $Id: newlook.h,v 38.1 92/03/26 16:38:47 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#ifndef INTUITION_NEWLOOK_H
#define INTUITION_NEWLOOK_H

#ifndef INTUITION_INTUINTERNAL_H
#include "intuinternal.h"
#endif

#define FRAMEVTHICK	1
#define FRAMEHTHICK	1

#define newlookProp( g ) ( TESTFLAG( PI(g)->Flags, PROPNEWLOOK ) )

/* right-side gadget positions: if you change
 * these, be sure to recompile windows.c and newlook.c
 */
#define ZOOMRELRIGHT	(-45)
#define DEPTHRELRIGHT	(-22)

#define LZOOMRELRIGHT	(-33)
#define LDEPTHRELRIGHT	(-16)

/* embossedBoxTrim() has a parameter which describes how to render the
 * box-joins (where the two colors meet).  The joins are in the
 * upper-right and lower-left of the box.
 *
 * JOINS_UPPER_LEFT_WINS - The color used to render the upper and left
 *	sides of the box is used in the joins.
 * JOINS_LOWER_RIGHT_WINS - The color used to render the lower and right
 *	sides of the box is used in the joins.
 * JOINS_NONE - The joins are not rendered.
 * JOINS_ANGLED - The joins are angled, in the style that GadTools uses.
 */

#define JOINS_UPPER_LEFT_WINS	0	/* used for window borders */
#define JOINS_LOWER_RIGHT_WINS	1	/* used for newlook props */
#define JOINS_NONE		2	/* used for default frameiclass frames */
#define JOINS_ANGLED		3	/* used for new style frameiclass frames */

#endif	/*  INTUITION_NEWLOOK_H */
@


38.1
log
@Cleaned out unused definitions.  Added definitions for the
embossedBoxTrim() scum choices.
@
text
@d5 1
a5 1
 *  $Id: newlook.h,v 38.0 91/06/12 14:27:42 peter Exp Locker: peter $
d16 4
d22 2
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: newlook.h,v 1.10 90/04/19 15:56:24 jimm Exp $
a15 13
/* the pens hardcoded in the demo	*/
#if 0
use dri_Pens[] now

#define HILITEPEN	3
#define SHADOWPEN	1
#define INACTIVEPEN	0
#define ACTIVEPEN	2
#define TITLEPEN	1

#define GADGETFILL	3
#endif

d28 10
a37 30
#if 1
/* specifies all data for three states of an image.
 * there'd be one of these for each of hires-color, hires-mono,
 * lores-color, lores-mono.
 */
struct imsuite {
    UBYTE	dimx;
    UBYTE	dimy;
    UWORD	*rasdata;
    UWORD	rassize;
    UBYTE	pick;
    UBYTE	onoff;
#define NUMoffsets	(3)

    /* WARNING: this field has two meanings:
     * In ROM, it's the number of full image raster 
     * offsets into the data, e.g., 0, 1, 2.
     * In a sysiclass object, it's multiplied by 
     * (RASSIZE( imsuite.dimx, imsuite.dimy ) / 2) * numplanes
     * to cache get the word offset into the data needed
     * for drawing.
     */
    UWORD 	offset[ NUMoffsets ];
			/* 0-normal, 1-selected, 2-indeterminate */
};

#else

/* specifies one of several image data defs for states
 * e.g., normal, selected, indeterminate, ...
a38 6
struct imspec {
    UBYTE	pick;
    UBYTE	onoff;
    UWORD	offset;
    		/* word offset into "master raster" for image data */
};
d40 4
a43 15

/* specifies all data for three states of an image.
 * there'd be one of these for each of hires-color, hires-mono,
 * lores-color, lores-mono.
 */
struct imsuite {
    UBYTE	dimx;
    UBYTE	dimy;
    UWORD	*rasdata;
    UWORD	rassize;
#define NUMimspec	(3)
    struct imspec	im[ NUMimspec ];
			/* 0-normal, 1-selected, 2-indeterminate */
};
#endif	/* new imsuite	*/
a44 1
#define WORDS( A )	( sizeof (A)/sizeof (UWORD) )
@
