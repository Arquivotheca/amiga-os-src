head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.11 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.9 V39_2082:38.9 V39_2076:38.9 V39_2073:38.9 V39_2058:38.9 V39_2051:38.9 V39_2031:38.9 V39_2017:38.9 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.8 V39_1805:38.8 V39_1783:38.8 V39_1695:38.8 V39_1621:38.8 V39_1620:38.8 V39_1508:38.8 V39_1485:38.8 V39_1461:38.8 V39_1458:38.8 V39_1456:38.8 V39_1405:38.8 V39_1368:38.8 V39_1360:38.8 V39_1324:38.8 V39_1147:38.7 V39_1143:38.7 V39_1141:38.7 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.5 V39_1078:38.5 V39_1073:38.5 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.1 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.11
date     93.01.08.14.44.00;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.11.10.17.03.25;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.08.06.16.58.52;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.05.15.14.03.56;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.05.01.13.52.08;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.14.11.28.33;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.04.09.16.31.14;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.07.17.48.51;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.02.21.35.57;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.11.13.38.01;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.02.07.11.05.20;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.17.50;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@Minor no-code change adjustments.
@
text
@/*** gadclass.c **************************************************************
 *
 * gadclass.c -- gadget class
 *
 *  $Id: gadclass.c,v 38.10 92/11/10 17:03:25 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuition.h"
#include "intuall.h"

#include "classusr.h"
#include "classes.h"
#include "gadgetclass.h"
#include "icclass.h"		/* gadgets have own interconnection */


#include <utility/pack.h>

/* Shorthands for packing gadget entries */
#define GA_PACK_ENTRY(tag,field,control) PACK_ENTRY(GA_Dummy,tag,ExtGadget,field,control)
#define GA_PACK_WORDBIT(tag,field,flags) PACK_WORDBIT(GA_Dummy,tag,ExtGadget,field,PKCTRL_BIT,flags)
#define GA_PACK_NEGWORDBIT(tag,field,flags) PACK_WORDBIT(GA_Dummy,tag,ExtGadget,field,PKCTRL_FLIPBIT,flags)

#define GA_PACK_EXWORDBIT(tag,field,flags) PACK_WORDBIT(GA_Dummy,tag,ExtGadget,field,PSTF_EXISTS|PKCTRL_BIT,flags)
#define GA_PACK_EXNEGWORDBIT(tag,field,flags) PACK_WORDBIT(GA_Dummy,tag,ExtGadget,field,PSTF_EXISTS|PKCTRL_FLIPBIT,flags)

#define GA_PACK_LONGBIT(tag,field,flags) PACK_LONGBIT(GA_Dummy,tag,ExtGadget,field,PKCTRL_BIT,flags)


#define D(x)	;
#define DN(x)	;		/* debug notification mechanism	*/
#define D2(x)	;


/* instance data for gadget class */
struct GIData {
    struct ExtGadget	gid_Gadget;
    Object		*gid_Target;
    struct TagItem	*gid_Map;
};

Class	*
initGadgetClass()
{
    ULONG gadgetDispatch();
    Class	*makePublicClass();
    extern UBYTE	*GadgetClassName;
    extern UBYTE	*RootClassName;

    D( printf("initGadgetClass\n") );
    return (makePublicClass(GadgetClassName, RootClassName,
		sizeof(struct GIData),gadgetDispatch));
}


ULONG
gadgetDispatch( cl, o, msg )
Class   *cl;
Object  *o;
Msg     msg;
{
    Object  		*newobj;
    struct GIData 	*gid;
    ULONG		retval = 0;
    struct Gadget	*g;
    struct Gadget	*prevg;

    /* for iterating the list of IC objects */
    Object  		*NextObject();

    /* won't be valid for OM_NEW */
    gid = INST_DATA( cl, o );
    g = &gid->gid_Gadget;

    D( printf("gadgetDispatch, class %lx, object %lx, msg %lx\n", cl,o,msg));

    switch ( msg->MethodID )
    {

    case OM_NEW:
	/* have "extra size" parameter */
	D( printf("\t\tgD: OM_NEW\n") );
	if ( newobj = (Object *) SSM( cl, o, msg ) )
	{
	    D( printf("gadget new: object at %lx\n,", newobj ) );
	    gid = INST_DATA( cl, newobj );
	    g = &gid->gid_Gadget;

	    D( printf("gadget new: gid at %lx, g at %lx\n", gid, g ) );

	    /* mandatory init */
	     /* random numbers */
#if 0	     /** these should default to zero ***/
	     g->LeftEdge= 50;
	     g->TopEdge = 30;
#endif

	     g->Width = 80;
	     g->Height = 40;

	    /* native class == hook */
	    g->GadgetType = CUSTOMGADGET;
	    CUSTOM_HOOK( g ) = (struct Hook *) o;

	    /* link in to previous gadget */
	    if ( prevg = (struct Gadget *) GetUserTagData0( GA_PREVIOUS,
				    ((struct opSet *)msg)->ops_AttrList ) )
	    {
		/* links self in	*/
		g->NextGadget = prevg->NextGadget;
		prevg->NextGadget = g;
	    }

	    setGadgetAttrs( cl, newobj, msg );
	}

	return ( (ULONG) newobj );

    case OM_UPDATE:
    case OM_SET:
	SSM( cl, o, msg );
	setGadgetAttrs( cl, o, msg );
	/* return 0, no refresh	*/
	break;

    case OM_GET:
#if 1
	return ( 0 );	/* see comment for getGadgetAttr */
#else
	return ( getGadgetAttr( cl, o, msg ) );
#endif

    case OM_NOTIFY:
	/* map changed attributes and deliver to target	
	 * in the form of OM_UPDATE.  Use the same message, since
	 * there is some other stuff in there (ginfo).
	 * OK to corrupt the attlist, since I created it
	 * my ownself.
	 */
	DN( printf("gadget notification\n"));
	if ( gid->gid_Target )
	{
	    DN( printf("target at %lx, map at %lx\n",
		gid->gid_Target, gid->gid_Map ) );
	    /* map my changed attributes	*/
	    MapTags( ((struct opSet *)msg)->ops_AttrList, gid->gid_Map,
		MAP_KEEP_NOT_FOUND );

	    /* convert from OM_NOTIFY to OM_UPDATE	*/
	    msg->MethodID = OM_UPDATE;

	    /* deliver to target	*/
	    /* special target value of ~0 means send to window */
	    if ( (ULONG) gid->gid_Target == ~0 )
	    {
		DN( printf("gadclass calls sendNotify\n"));
		sendNotifyIDCMP( msg );
	    }
	    else
	    {
		SM( gid->gid_Target, msg );
	    }
	}
	break;

    case GM_HITTEST:
	/* accept hits, and swallow them: I am not transparent */
        retval = GMR_GADGETHIT;
	break;


    case GM_HELPTEST:
	/* accept GM_HELPTEST */
	retval = GMR_HELPHIT;
	break;

    case GM_RENDER:
	/* This base class does nothing like render */
	retval = 0;
	break;

    case GM_GOACTIVE:
	/* refuse to go active */
	return ( GMR_NOREUSE );

    case GM_GOINACTIVE:
	break;

    case GM_HANDLEINPUT:
	/* swallow whatever he sends me (selectdown)
	 * and get out of here.  I shouldn't see this ever.
	 */
	return ( GMR_NOREUSE );

    case OM_DISPOSE:
	/* do not free target, nor the map list	*/
	return ( SSM( cl, o, msg ) );	/* free super */
	break;

    default:
	D( printf("gD: default case\n") );
	return ( SSM( cl, o, msg ) );
    }

    return ( retval );
}

ULONG gadgetPackTable[] =
{
    PACK_STARTTABLE( GA_Dummy ),

    /* Gadget Activation flags: */
    GA_PACK_WORDBIT( GA_ENDGADGET, Activation, ENDGADGET ),
    GA_PACK_WORDBIT( GA_IMMEDIATE, Activation, GADGIMMEDIATE ),
    GA_PACK_WORDBIT( GA_RELVERIFY, Activation, RELVERIFY ),
    GA_PACK_WORDBIT( GA_FOLLOWMOUSE, Activation, FOLLOWMOUSE ),
    GA_PACK_WORDBIT( GA_RIGHTBORDER, Activation, RIGHTBORDER ),
    GA_PACK_WORDBIT( GA_LEFTBORDER, Activation, LEFTBORDER ),
    GA_PACK_WORDBIT( GA_TOPBORDER, Activation, TOPBORDER ),
    GA_PACK_WORDBIT( GA_BOTTOMBORDER, Activation, BOTTOMBORDER ),
    GA_PACK_WORDBIT( GA_TOGGLESELECT, Activation, TOGGLESELECT ),

    /* Gadget Flags: */
    GA_PACK_WORDBIT( GA_DISABLED, Flags, GADGDISABLED ),
    GA_PACK_WORDBIT( GA_SELECTED, Flags, SELECTED ),
    GA_PACK_WORDBIT( GA_TabCycle, Flags, GFLG_TABCYCLE ),
    GA_PACK_WORDBIT( GA_RelSpecial, Flags, GFLG_RELSPECIAL ),

    /* Gadget GadgetType flags: */
    GA_PACK_WORDBIT( GA_GZZGADGET, GadgetType, GZZGADGET ),
    GA_PACK_WORDBIT( GA_SYSGADGET, GadgetType, SYSGADGET ),

    /* ExtGadget MoreFlags: */
    GA_PACK_LONGBIT( GA_GadgetHelp, MoreFlags, GMORE_GADGETHELP ),
    GA_PACK_LONGBIT( GA_Bounds, MoreFlags, GMORE_BOUNDS ),

    GA_PACK_ENTRY( GA_ID, GadgetID, PKCTRL_UWORD ),
    GA_PACK_ENTRY( GA_USERDATA, UserData, PKCTRL_ULONG ),
    GA_PACK_ENTRY( GA_SPECIALINFO, SpecialInfo, PKCTRL_ULONG ),
    GA_PACK_ENTRY( GA_NEXT, NextGadget, PKCTRL_ULONG ),
    GA_PACK_ENTRY( GA_IMAGE, GadgetRender, PKCTRL_ULONG ),
    GA_PACK_EXWORDBIT( GA_IMAGE, Flags, GADGIMAGE ),
    GA_PACK_ENTRY( GA_BORDER, GadgetRender, PKCTRL_ULONG ),
    GA_PACK_EXNEGWORDBIT( GA_BORDER, Flags, GADGIMAGE ),

    GA_PACK_ENTRY( GA_INTUITEXT, GadgetText, PKCTRL_ULONG ),
    GA_PACK_EXNEGWORDBIT( GA_INTUITEXT, Flags, GFLG_LABELSTRING ),
    GA_PACK_EXNEGWORDBIT( GA_INTUITEXT, Flags, GFLG_LABELIMAGE ),

    GA_PACK_ENTRY( GA_TEXT, GadgetText, PKCTRL_ULONG ),
    GA_PACK_EXWORDBIT( GA_TEXT, Flags, GFLG_LABELSTRING ),
    GA_PACK_EXNEGWORDBIT( GA_TEXT, Flags, GFLG_LABELIMAGE ),

    GA_PACK_ENTRY( GA_LABELIMAGE, GadgetText, PKCTRL_ULONG ),
    GA_PACK_EXNEGWORDBIT( GA_LABELIMAGE, Flags, GFLG_LABELSTRING ),
    GA_PACK_EXWORDBIT( GA_LABELIMAGE, Flags, GFLG_LABELIMAGE ),

    GA_PACK_ENTRY( GA_LEFT, LeftEdge, PKCTRL_WORD ),
    GA_PACK_EXNEGWORDBIT( GA_LEFT, Flags, GFLG_RELRIGHT ),
    GA_PACK_ENTRY( GA_RELRIGHT, LeftEdge, PKCTRL_WORD ),
    GA_PACK_EXWORDBIT( GA_RELRIGHT, Flags, GFLG_RELRIGHT ),

    GA_PACK_ENTRY( GA_TOP, TopEdge, PKCTRL_WORD ),
    GA_PACK_EXNEGWORDBIT( GA_TOP, Flags, GFLG_RELBOTTOM ),
    GA_PACK_ENTRY( GA_RELBOTTOM, TopEdge, PKCTRL_WORD ),
    GA_PACK_EXWORDBIT( GA_RELBOTTOM, Flags, GFLG_RELBOTTOM ),

    GA_PACK_ENTRY( GA_WIDTH, Width, PKCTRL_WORD ),
    GA_PACK_EXNEGWORDBIT( GA_WIDTH, Flags, GFLG_RELWIDTH ),
    GA_PACK_ENTRY( GA_RELWIDTH, Width, PKCTRL_WORD ),
    GA_PACK_EXWORDBIT( GA_RELWIDTH, Flags, GFLG_RELWIDTH ),

    GA_PACK_ENTRY( GA_HEIGHT, Height, PKCTRL_WORD ),
    GA_PACK_EXNEGWORDBIT( GA_HEIGHT, Flags, GFLG_RELHEIGHT ),
    GA_PACK_ENTRY( GA_RELHEIGHT, Height, PKCTRL_WORD ),
    GA_PACK_EXWORDBIT( GA_RELHEIGHT, Flags, GFLG_RELHEIGHT ),

    PACK_ENDTABLE,
};

#if 0
/* ZZZ: not implemented
 * For now, use transparent baseclass to get these.
 * I really should code this up, though, so people
 * can make legitimate inquiries which the descendants
 * can override.
 */
getGadgetAttr( cl, o, msg )
{
    return ( 0 );
}
#endif

setGadgetAttrs( cl, o, msg )
Class		*cl;
Object		*o;
struct opSet	*msg;
{
    struct GIData 	*gid;
    struct ExtGadget	*g;
    struct TagItem	*NextTagItem();

    struct TagItem	*tags = msg->ops_AttrList;
    struct TagItem	*tstate = tags;
    struct TagItem	*tag;
    ULONG		tidata;

    BOOL		refresh = 0; /* I don't really need it */

    D( printf("setGadgetAttrs, o %lx, msg %lx, tags %lx g %lx\n",
			    o, msg, tags, g ) );

    gid = (struct GIData *) ((void *) (((ULONG)(o)) + (cl)->cl_InstOffset));
    g = &gid->gid_Gadget;

    /* process tags */
    PackStructureTags( g, gadgetPackTable, tags );
    /* All gadgetclass objects are extended gadgets, always: */
    g->Flags |= GFLG_EXTENDED;

    /* process rest */
    while ( tag = NextTagItem( &tstate ) )
    {
	tidata = tag->ti_Data;
	D( printf("set tag %lx\n", tag->ti_Tag ) );
	switch ( tag->ti_Tag )
	{
	case ICA_TARGET:
	    D2( printf("setting gad ICA target: %lx\n", tidata ) );
	    gid->gid_Target = (Object *) tidata;
	    break;

	case ICA_MAP:
	    /* don't clone, just keep pointer	*/
	    gid->gid_Map = (struct TagItem *) tidata;
	    break;

	case GA_SELECTRENDER:
	    g->SelectRender = (APTR) tidata;
	    if ( tidata ) setGHigh( g, GADGHIMAGE );
	    else setGHigh( g, GADGHNONE );
	    break;

	case GA_HIGHLIGHT:
	    setGHigh( g, tidata );
	    break;

	/* set the sysgadget type bits to tidata */
	case GA_SYSGTYPE:
	    g->GadgetType = (g->GadgetType & ~GTYP_SYSTYPEMASK) |
		(tidata & GTYP_SYSTYPEMASK);
	    break;

	case GA_PREVIOUS:
	    ((struct Gadget *)tidata)->NextGadget = g;
	    break;

	case GA_Bounds:
	    *((struct IBox *)&g->BoundsLeftEdge) = *((struct IBox *)tidata);
	    break;
	}
    }
    return ( refresh );	/* right now, I don't detect refresh cases */
}

/*
 * set up the proper highlight bits
 */
setGHigh( g, highlight )
struct Gadget	*g;
{
    g->Flags = ((g->Flags) & ~GADGHIGHBITS) | highlight;
}

@


38.10
log
@Now use GTYP_SYSTYPEMASK instead of 0xF0.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.9 92/08/06 16:58:52 peter Exp Locker: peter $
d210 1
d366 1
@


38.9
log
@Uses GetUserTagData() and GetUserTagData0().
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.8 92/05/15 14:03:56 peter Exp Locker: peter $
d355 2
a356 1
	    g->GadgetType = (g->GadgetType & ~0xF0) | (tidata & 0xF0);
@


38.8
log
@GM_HITTEST now returns GMR_GADGETHIT instead of 1.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.7 92/05/01 13:52:08 peter Exp Locker: peter $
d112 1
a112 1
	    if ( prevg = (struct Gadget *) GetTagData( GA_PREVIOUS, NULL,
@


38.7
log
@When I changed to PackStructureTags(), I accidentally stopped setting
GFLG_EXTENDED.  Now fixed.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.6 92/04/14 11:28:33 peter Exp Locker: peter $
d174 1
a174 1
        retval =   1;
@


38.6
log
@Had bug in table for GA_Text and GA_LabelImage.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.5 92/04/09 16:31:14 peter Exp Locker: peter $
d323 2
@


38.5
log
@Now supports GA_Bounds and GA_RelSpecial.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.4 92/04/07 17:48:51 peter Exp Locker: peter $
d260 2
a261 2
    GA_PACK_EXNEGWORDBIT( GA_TEXT, Flags, GFLG_LABELSTRING ),
    GA_PACK_EXWORDBIT( GA_TEXT, Flags, GFLG_LABELIMAGE ),
@


38.4
log
@Sets GFLG_EXTENDED, since it is.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.3 92/04/02 21:35:57 peter Exp Locker: peter $
d22 14
d213 1
a213 16
/*** Gadget Attrs ***/
struct TagItem activation_bools[] =
{
    { GA_ENDGADGET, ENDGADGET },
    { GA_IMMEDIATE, GADGIMMEDIATE },
    { GA_RELVERIFY, RELVERIFY },
    { GA_FOLLOWMOUSE, FOLLOWMOUSE },
    { GA_RIGHTBORDER, RIGHTBORDER },
    { GA_LEFTBORDER, LEFTBORDER },
    { GA_TOPBORDER, TOPBORDER },
    { GA_BOTTOMBORDER, BOTTOMBORDER },
    { GA_TOGGLESELECT, TOGGLESELECT },
    { TAG_END }
};

struct TagItem flags_bools[] =
d215 1
a215 5
    { GA_DISABLED, GADGDISABLED },
    { GA_SELECTED, SELECTED },
    { GA_TabCycle, GFLG_TABCYCLE },
    { TAG_END }
};
d217 65
a281 6
struct TagItem gtype_bools[] =
{
    { GA_GZZGADGET, GZZGADGET },
    { GA_SYSGADGET, SYSGADGET },
    { TAG_END }
};
d283 1
a283 4
struct TagItem gmore_bools[] =
{
    { GA_GadgetHelp, GMORE_GADGETHELP },
    { TAG_END }
d305 1
a305 1
    struct Gadget	*g;
a313 1
    struct IBox		newgbox;
d321 2
a322 5
    /* process boolean tags */
    g->Activation = PackBoolTags( g->Activation, tags, activation_bools );
    g->Flags = GFLG_EXTENDED|PackBoolTags( g->Flags, tags, flags_bools );
    g->GadgetType = PackBoolTags( g->GadgetType, tags, gtype_bools );
    XGAD(g)->MoreFlags = PackBoolTags( XGAD(g)->MoreFlags, tags, gmore_bools );
a323 4
    /* process pos/dim tags */
    newgbox = *( (struct IBox *) &g->LeftEdge );
    gadgetBoxAttrs( &newgbox, &g->Flags, tags );

a340 27
	/* various types of labels you can stick into GadgetText	*/
	case GA_TEXT:
	case GA_INTUITEXT:
	case GA_LABELIMAGE:
	    g->GadgetText = (struct IntuiText *) tidata;

	    CLEARFLAG( g->Flags, LABELMASK );
	    if ( tag->ti_Tag == GA_TEXT )
	    {
		SETFLAG( g->Flags, LABELSTRING);
	    }
	    else if ( tag->ti_Tag == GA_LABELIMAGE )
	    {
		SETFLAG( g->Flags, LABELIMAGE);
	    }
	    break;

	case GA_IMAGE:
	    SETFLAG( g->Flags, GADGIMAGE );
	    g->GadgetRender = (APTR) tidata;
	    break;

	case GA_BORDER:
	    CLEARFLAG( g->Flags, GADGIMAGE );
	    g->GadgetRender = (APTR) tidata;
	    break;

a350 12
	case GA_ID:
	    g->GadgetID = tidata;
	    break;

	case GA_USERDATA:
	    g->UserData = (APTR) tidata;
	    break;

	case GA_SPECIALINFO:
	    g->SpecialInfo = (APTR) tidata;
	    break;
	
d360 2
a361 3
	case GA_NEXT:
	    g->NextGadget = (struct Gadget *) tidata;
	    break;
a363 4

    /* perhaps refresh only if box changes */
    *( (struct IBox *) &g->LeftEdge ) = newgbox;

a364 62
}

gadgetBoxAttrs( box, flags, tags )
struct IBox	*box;
UWORD		*flags;
struct TagItem	*tags;
{
    struct TagItem	*tstate = tags;
    struct TagItem	*tag;
    ULONG		tidata;
    struct TagItem	*NextTagItem();

    D( printf("gBA tags %lx\n", tags) );

    while ( tag = NextTagItem( &tstate ) )
    {
	D( printf("gBA tag %lx\n", tag->ti_Tag ) );
	tidata = tag->ti_Data;
	switch ( tag->ti_Tag )
	{

	case GA_RELRIGHT:
	    SETFLAG( *flags, GRELRIGHT );
	    box->Left = tidata;
	    break;
	case GA_LEFT:
	    CLEARFLAG( *flags, GRELRIGHT );
	    box->Left = tidata;
	    break;

	case GA_RELBOTTOM:
	    SETFLAG( *flags, GRELBOTTOM );
	    box->Top = tidata;
	    break;
	case GA_TOP:
	    CLEARFLAG( *flags, GRELBOTTOM );
	    box->Top = tidata;
	    break;

	case GA_RELWIDTH:
	    SETFLAG( *flags, GRELWIDTH );
	    box->Width = tidata;
	    break;
	case GA_WIDTH:
	    CLEARFLAG( *flags, GRELWIDTH );
	    box->Width = tidata;
	    break;

	case GA_RELHEIGHT:
	    SETFLAG( *flags, GRELHEIGHT );
	    box->Height = tidata;
	    break;
	case GA_HEIGHT:
	    CLEARFLAG( *flags, GRELHEIGHT );
	    box->Height = tidata;
	    break;
	default:
	    D( printf("not recognized\n") );
	}
    }

    D( dumpBox( "gBA done", box ) );
@


38.3
log
@GM_HELPTEST returns "hit".
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.2 92/02/11 13:38:01 peter Exp Locker: peter $
a58 2
    struct Rectangle	grect;
    struct IBox		gadgetbox;
a61 2
    Object  		*ostate;
    Object  		*ic;
d231 1
a231 1
    { GA_GadgetHelp, GMORE_GADGETHELP }
d273 1
a273 1
    g->Flags = PackBoolTags( g->Flags, tags, flags_bools );
@


38.2
log
@GA_GZZGADGET doesn't need its own case, since it's handled in
the bool-tags.
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.1 92/02/07 11:05:20 peter Exp Locker: peter $
d29 1
a29 1
    struct Gadget	gid_Gadget;
d167 6
d174 1
a174 1
	/* this base class does nothing like render */
d204 2
a205 1
struct TagItem activation_bools[] = {
d218 2
a219 1
struct TagItem flags_bools[] = {
d226 2
a227 1
struct TagItem gtype_bools[] = {
d233 6
d279 1
d323 1
d334 1
@


38.1
log
@MapTags() now specifies keeping not-found tags, since that's what we
really wanted (V37 utility gave us this regardless).
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 38.0 91/06/12 14:17:50 peter Exp Locker: peter $
a318 5
	    break;

	case GA_GZZGADGET:
	    if ( tidata ) SETFLAG( g->GadgetType, GZZGADGET );
	    else CLEARFLAG( g->GadgetType, GZZGADGET );
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: gadclass.c,v 1.17 90/12/01 22:00:36 peter Exp $
d142 2
a143 1
	    MapTags( ((struct opSet *)msg)->ops_AttrList, gid->gid_Map, FALSE);
@
