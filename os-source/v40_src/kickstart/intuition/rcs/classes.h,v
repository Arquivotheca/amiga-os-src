head     38.1;
branch   ;
access   ;
symbols  V40_85:38.1 V40_71:38.1 V40_68:38.1 V40_65:38.1 V40_47:38.1 V40_45:38.1 V40_37:38.1 V40_34:38.1 V40_29:38.1 V39_2415:38.1 V39_2369:38.1 V39_2339:38.1 V39_2332:38.1 V39_2275:38.1 V39_2256:38.1 V39_2210:38.1 V39_2192:38.1 V39_2084:38.1 V39_2082:38.1 V39_2076:38.1 V39_2073:38.1 V39_2058:38.1 V39_2051:38.1 V39_2031:38.1 V39_2017:38.1 V39_2012:38.1 V39_1985:38.1 V39_1933:38.1 V39_1819:38.1 V39_1805:38.1 V39_1783:38.1 V39_1695:38.1 V39_1621:38.1 V39_1620:38.1 V39_1508:38.1 V39_1485:38.1 V39_1461:38.1 V39_1458:38.1 V39_1456:38.1 V39_1405:38.1 V39_1368:38.1 V39_1360:38.1 V39_1324:38.1 V39_1147:38.1 V39_1143:38.1 V39_1141:38.1 V39_1120:38.1 V39_1116:38.1 V39_1104:38.1 V39_1100:38.1 V39_1078:38.1 V39_1073:38.1 V39_757:38.1 V39_702:38.1 V39_557:38.1 V39_553:38.1 V39_551:38.1 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.1
date     91.11.11.13.44.07;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.14.39;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.1
log
@Copyright now starts at 1989.
@
text
@#ifndef	INTUITION_CLASSES_H
#define INTUITION_CLASSES_H	1
/*
**  $Id: classes.h,v 38.0 91/06/12 14:14:39 peter Exp Locker: peter $
**
**  Used only by class implementors
**
**  (C) Copyright 1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef UTILITY_HOOKS_H
#include <utility/hooks.h>
#endif

#ifndef	INTUITION_CLASSUSR_H
#include <intuition/classusr.h>
#endif

/*******************************************/
/*** "White box" access to struct IClass ***/
/*******************************************/

/* This structure is READ-ONLY, and allocated only by Intuition */
typedef struct IClass {
    struct Hook		cl_Dispatcher;
    ULONG		cl_Reserved;	/* must be 0  */
    struct IClass	*cl_Super;
    ClassID		cl_ID;

    /* where within an object is the instance data for this class? */
    UWORD		cl_InstOffset;
    UWORD		cl_InstSize;

    ULONG		cl_UserData;	/* per-class data of your choice */
    ULONG		cl_SubclassCount;
					/* how many direct subclasses?  */
    ULONG		cl_ObjectCount;
				/* how many objects created of this class? */
    ULONG		cl_Flags;
#define	CLF_INLIST	0x00000001	/* class is in public class list */
} Class;

/* add offset for instance data to an object handle */
#define INST_DATA( cl, o )	((VOID *) (((UBYTE *)o)+cl->cl_InstOffset))

/* sizeof the instance data for a given class */
#define SIZEOF_INSTANCE( cl )	((cl)->cl_InstOffset + (cl)->cl_InstSize \
			+ sizeof (struct _Object ))

/**************************************************/
/*** "White box" access to struct _Object	***/
/**************************************************/

/*
 * We have this, the instance data of the root class, PRECEDING
 * the "object".  This is so that Gadget objects are Gadget pointers,
 * and so on.  If this structure grows, it will always have o_Class
 * at the end, so the macro OCLASS(o) will always have the same
 * offset back from the pointer returned from NewObject().
 *
 * This data structure is subject to change.  Do not use the o_Node
 * embedded structure.
 */
struct _Object {
    struct MinNode	o_Node;
    struct IClass	*o_Class;
};

/* convenient typecast	*/
#define _OBJ( o )	((struct _Object *)(o))

/* get "public" handle on baseclass instance from real beginning of obj data */
#define BASEOBJECT( _obj )	( (Object *) (_OBJ(_obj)+1) )

/* get back to object data struct from public handle */
#define _OBJECT( o )		(_OBJ(o) - 1)

/* get class pointer from an object handle	*/
#define OCLASS( o )	( (_OBJECT(o))->o_Class )

#endif
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d4 1
a4 1
**  $Id: classes.h,v 36.1 90/11/01 15:57:20 peter Exp $
d8 1
a8 1
**  (C) Copyright 1985,1986,1987,1988,1989,1990 Commodore-Amiga, Inc.
@
