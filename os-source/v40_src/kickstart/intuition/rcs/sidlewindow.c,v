head     38.18;
branch   ;
access   ;
symbols  V40_85:38.18 V40_71:38.18 V40_68:38.18 V40_65:38.18 V40_47:38.18 V40_45:38.18 V40_37:38.18 V40_34:38.18 V40_29:38.18 V39_2415:38.18 V39_2369:38.17 V39_2339:38.17 V39_2332:38.17 V39_2275:38.17 V39_2256:38.17 V39_2210:38.17 V39_2192:38.17 V39_2084:38.17 V39_2082:38.17 V39_2076:38.17 V39_2073:38.17 V39_2058:38.17 V39_2051:38.17 V39_2031:38.17 V39_2017:38.17 V39_2012:38.17 V39_1985:38.17 V39_1933:38.17 V39_1819:38.16 V39_1805:38.16 V39_1783:38.16 V39_1695:38.16 V39_1621:38.15 V39_1620:38.15 V39_1508:38.14 V39_1485:38.14 V39_1461:38.13 V39_1458:38.13 V39_1456:38.13 V39_1405:38.12 V39_1368:38.12 V39_1360:38.12 V39_1324:38.12 V39_1147:38.11 V39_1143:38.11 V39_1141:38.11 V39_1120:38.11 V39_1116:38.11 V39_1104:38.11 V39_1100:38.11 V39_1078:38.11 V39_1073:38.11 V39_757:38.8 V39_702:38.8 V39_557:38.5 V39_553:38.5 V39_551:38.5 V39_510:38.5 V39_495:38.5 V39_416:38.3 V39_383:38.3 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.18
date     93.01.14.14.25.09;  author peter;  state Exp;
branches ;
next     38.17;

38.17
date     92.08.02.12.45.25;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     92.07.07.15.23.36;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.06.29.10.47.26;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.18.18.10.22;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.06.03.17.38.18;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.05.15.14.09.27;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.07.17.57.53;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.02.21.41.16;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.02.12.08.08;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.21.14.54.30;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.19.15.54.59;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.19.10.54.58;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.20.12.17.36;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.17.17.17.38;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.07.11.07.39;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.22.16.45.04;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.18.02.05;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.31.58;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.18
log
@Added itMODIFYPROP.
@
text
@/*** sidlewindow.c ********************************************************
 *
 *  sidlewindow state processing
 *
 *  $Id: sidlewindow.c,v 38.17 92/08/02 12:45:25 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)	;
#define DZOOM(x)	;
#define D2(x)	;

/* transition startIdleWindow()
 * called by:
 *	sNoWindow	- itACTIVATEWIN
 *	sNoWindow	- itSELECTDOWN
 *
 *	sIdleWindow	- itSELECTDOWN
 *	sIdleWindow	- itACTIVATEWIN
 *	sIdleWindow	- itCLOSEWIN
 *
 *	sMenu		- return from DMR timeout or no menu
 *
 *	sRequester	- itSELECTDOWN
 *	sRequester	- itACTIVATEWIN
 *	sRequester	- itCLOSEWIN
 *	sRequester	- itCLEARREQ
 *	returnRequester	-  (ZZZ: which state?) endgadget?
 *
 * description:
 *	activates a window
 * enhancements:
 *	pick up with last activated gadget
 *	fold together some of these cases ...
 */
startIdleWindow()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*newawindow;
    struct Window		*itwindow;
    struct Layer		*hitlayer;	/* ZZZ: in IBase? */
    struct Window		*prevactivewin = IBase->ActiveWindow;
    int				returnIdleWindow();
    int				startNoWindow();

    D( printf("transition startIdleWindow, cstate: %ld, command %ld\n", 
	IBase->CurrentState, IT->it_Command ));

    IBase->MenuLendingReturn = NULL;

    /* itSELECTDOWN: may be new active, or change in active.
     * may also be already active, and 
     * test for gadget hits go here, and
     * ZZZ: future: may be screenbar hit: ignore
     */

    itwindow = (struct Window *) IT->it_Object1;

    switch ( IT->it_Command )
    {
    case itSELECTDOWN:	/* start: check if new window hit */
	newawindow = hitUpfront( &hitlayer );
	if ( ( newawindow != IBase->ActiveWindow ) ||
	    ( ( !newawindow ) && ( IBase->ActiveScreen != IBase->HitScreen ) ) )
	{
	    /* will change ActiveWindow, etc. */
	    setWindow( newawindow, FALSE );
	}

	/* if this window has a requester in it, change state
	 * and let sRequester handle the click, including checking
	 * for legal requester gadgets.
	 */
	if ( haveActiveRequest() )	/* returns NULL if NoWindow */
	{
	    startRequester();
	    return;
	}

	/* jimm: 3/5/90: handle click in unwindowed area of screen */

	D( printf("sIW: about to call hitGadgets \n") );
	if ( hitGadgets( hitlayer ) )
	{
	    D( printf("sIW: startGadget\n") );

	    /* startNoWindow is the same as returnNoWindow would be */
	    startGadget( IBase->ActiveWindow?
		returnIdleWindow: startNoWindow );
	    return;
	}
	else if ( IBase->ActiveWindow == NULL )
	{
	    /* If the user clicked in the "no-window" area of
	     * the screen, we want to still change the
	     * Active Screen.  This fixes the bug where you
	     * couldn't select a screen for autoscrolling
	     * by clicking in the no-window area.
	     */
	    setScreen( IBase->HitScreen );
	    startNoWindow();	/* just jump to sNoWindow	*/
	    return;
	}
	else
	{
	    D( printf("sIW: rawmouse down\n") );
	    D( Debug() );
	    activeEvent( IECLASS_RAWMOUSE, SELECTDOWN );
	    D( Debug() );
	    D( printf("sIW: activeE returned\n") );
	}
	break;

    case itACTIVATEWIN:	/* start: do new active window */
	newawindow = itwindow;

	D( printf("sIW ACTIVATE window %lx\n") );

	/* better check that it's still around */
	if ( ! knownWindow( newawindow ) )
	{
	    /* no state change */
	    return;
	}

	if ( newawindow != IBase->ActiveWindow )
	{
	    /* will change ActiveWindow, etc. */
	    setWindow( newawindow, ( IT->it_Object2 == AWIN_INITIAL ) );
	}
	else
	{
	    /* Intuition relies on itACTIVATEWIN with an Object2 of AWIN_INITIAL
	     * to render all the gadgets of the window border.  This is
	     * used to avoid drawing the border and border gadgets
	     * inactive then immediately active.  In the event that
	     * itACTIVATEWIN goes through straight away, there is no
	     * problem.  However, it's possible that someone sneaked in
	     * and activated the window through ActivateWindow() or
	     * through clicking on it.  Thus, if we get to here with
	     * it_Object2 of AWIN_INITIAL, we have to call fixWindowBorders()
	     * (which knows only to act if it_Object2 is AWIN_INITIAL).
	     */
	    fixWindowBorders();

	    /* This code is executed when itACTIVATEWIN is
	     * received for the already-active window.  For various
	     * reasons, this code needs to be replicated in
	     * sgadget.c, under itACTIVATEWIN.  Some day we
	     * should clean things up so this hand-dependency is
	     * unnecessary.
	     */

	    /* ZZZ: PPage compatibility hack, to eliminate their
	     * transparent menus.  It would be better to put
	     * all this stuff into setWindow(), so that if you
	     * setWindow() the already-active window, it just
	     * does the setScreen() and the activeEvent(ACTIVEWINDOW)

	     * Peter 26-Jun-91:  We know newawindow can't be NULL
	     * because we performed knownWindow() on it higher up.
	     */
	    setScreen( newawindow->WScreen );

	    /* send him a message anyway, so he doesn't wait for
	     * it forever
	     */
	    activeEvent(IECLASS_ACTIVEWINDOW, NULL );
	}

	if ( IT->it_Object2 == AWIN_LENDMENU )
	{
	    IBase->MenuLendingReturn = prevactivewin;

	    startMenu();
	    return;
	}

	else if ( IT->it_Object2 == AWIN_LENDMENUKEY )
	{
	    IBase->MenuLendingReturn = prevactivewin;

	    startMenuKey( IT->it_SubCommand );
	    return;
	}

	/* if this window has a requester in it, change state
	 * and let sRequester handle the click, including checking
	 * for legal requester gadgets.
	 */
	if ( haveActiveRequest() )
	{
	    startRequester();
	    return;
	}

	/** ZZZ: enhance: if WGadget, startGadget **/
	break;

    case itCLOSEWIN:	/* start: figure new active window */

	/* RESTART: this is called if dIdleWindow closes
	 * the Active Window, to set up the new
	 * active window.
	 */

	/* NOTE WELL: window has been delinked by now,
	 * but since this token is still being processed,
	 * CloseWindow() hasn't been signalled to free
	 * the window yet.  So the pointer 'itwindow' is still
	 * valid.
	 *
	 * We know that the ActiveWindow is the one that
	 * is being closed.  Huh?  You don't know that yet.
	 * Yes you do, since this is startIdleWindow(), not
	 * dIdleWindow(), chump.
	 */

	/* ZZZ: am I making a bad assumption then? */
	/* no, you're just a fool.	*/

	/* window to activate is either Parent, or if none,
	 * the FirstWindow in the same screen.
	 */
	/* WARNING: relying on expression evaluation rules */
	( newawindow = itwindow->Parent )
	    || ( newawindow = itwindow->WScreen->FirstWindow );

	/* Peter 2-Dec-90: We used to have to restore this window's
	 * screen title to default if newawindow was NULL.  But now
	 * setWindow() does that even though we NULL out IBase->ActiveWindow.
	 */

	IBase->ActiveWindow = NULL;   	/* don't deactivate closer */
	setWindow( newawindow, FALSE );	/* may be NULL	*/

	/* Peter 8-Jan-91:  setWindow() sets IBase->ActiveWindow to
	 * ( knownWindow( newawindow ) ? newawindow : NULL ).
	 * We want to pick up the case where the window isn't known.
	 * This kludge helps FantaVision, which unlinks the windows
	 * it doesn't want to deal with at the moment.  The result
	 * is that the closing window's parent is not known.  This
	 * keeps them from crashing.
	 */
	newawindow = IBase->ActiveWindow;

	if ( newawindow )
	{
	    if ( haveActiveRequest() )
	    {
		startRequester();
		return;
	    }
	}
	else	/* both newawindow candidates are NULL */
	{
	    startNoWindow();
	    return;
	}
	break;

	
    default:
	/* all  sorts of DMR timeouts, other non-changes to 
	 * sIdleWindow and sRequester, dropped requester, etc.
	 */
	if ( haveActiveRequest() )
	{
	    startRequester();
	    return;
	}
    }

    /** IBase->ActiveWindow = newwindow; ** done in setWindow() **/
    IBase->CurrentState = sIdleWindow;
}

/* little safe utility for use in startIdleWindow() when there
 * might not be an active window.
 */
haveActiveRequest()
{
    struct Window	*w;
    int			retval = FALSE;

    if ( w = fetchIBase()->ActiveWindow )
    {
	retval = (w->FirstRequest != NULL);
    }
    return ( retval );
}

/*
 * passed to:
 *	startGadget
 *	startScreenDrag
 */
returnIdleWindow()
{

    D2( printf("returnIdleWindow\n"));
    fetchIBase()->CurrentState = sIdleWindow;
}


/*
 * state dispatcher
 * state transitions called:
 *	startIdleWindow()
 *	startGadget()
 *	startMenu()
 *	startRequest()
 */
dIdleWindow()
{
    struct IntuitionBase	*IBase = fetchIBase();
    UWORD			menunum;
    UWORD			findMenuKey();
    UWORD			returnIdleZoom();

    struct Window	*itwindow = (struct Window *) IT->it_Object1;

    switch ( IT->it_Command )
    {
    case itMENUDOWN:	/* lend menus, send event or start menus */
	{
	    if ( TESTFLAG( IBase->ActiveWindow->Flags, RMBTRAP ) )
	    {
		activeEvent( IECLASS_RAWMOUSE, MENUDOWN );
	    }
	    else
	    {
		/* If this window has menu-lending, then send the
		 * appropriate itACTIVATEWIN token, otherwise
		 * start menu-state.
		 */
		if ( XWINDOW(IBase->ActiveWindow)->MenuLend )
		{
		    /* Menu-lending is in effect.  Convert
		     * this token to an itACTIVATEWIN token.
		     */
		    reuseToken();
		    IT->it_Command = itACTIVATEWIN;
		    IT->it_Object1 = (CPTR) XWINDOW(IBase->ActiveWindow)->MenuLend;
		    IT->it_Object2 = AWIN_LENDMENU;
		    return;
		}
		else
		{
		    startMenu();
		}
	    }
	}
	return;

    case itSELECTDOWN:	/* start idlewindow */
	startIdleWindow();
	return;

    case itMOUSEMOVE:	/* do default, then maybe send MOUSEMOVE */
	doDefault();	/* updateMousePointer()	*/

	/* send mouse message to active window */
	if ( TESTFLAG( IBase->ActiveWindow->Flags, REPORTMOUSE ) )
	{
	    sendWindowMouse();
	}
	return;


    case itRAWKEY:	/* Do menu-key or send key-event */

	/* Is this a non-RMBTRAP window, and does it look like a menu-key?
	 * (right Amiga-key modified downstroke)
	 */
	if ( !TESTFLAG( IBase->ActiveWindow->Flags, RMBTRAP ) &&
	    ( TESTFLAG( IE->ie_Qualifier, AMIGARIGHT )) &&
	    ( !TESTFLAG( IE->ie_Code, IECODE_UP_PREFIX )) )
	{
	    /* Now figure out if this window has menu lending: */
	    struct Window *menuwindow = IBase->ActiveWindow;

	    if ( XWINDOW( menuwindow )->MenuLend )
	    {
		menuwindow = XWINDOW( menuwindow )->MenuLend;
	    }
	    if ( ( menunum = findMenuKey( menuwindow->MenuStrip, 
		IT->it_Code ) ) != MENUNULL )
	    {
		if ( menuwindow == IBase->ActiveWindow )
		{
		    /* Go do regular menu operation */
		    D( printf("sIdleWindow: found  key equiv of %lx\n", menunum ) );
		    startMenuKey( menunum );
		}
		else
		{
		    /* Menu-lending is in effect, and the this keystroke
		     * is a valid menu-key in the target window.  Convert
		     * this token to an itACTIVATEWIN token.
		     */
		    reuseToken();
		    IT->it_Command = itACTIVATEWIN;
		    IT->it_Object1 = (CPTR) menuwindow;
		    IT->it_Object2 = (CPTR) AWIN_LENDMENUKEY;
		    IT->it_SubCommand = menunum;
		}
		return;
	    }

	    /* else not a menu-key-equiv for this strip,
	     * so fall through...
	     */
	}
	/* else RMBTRAP, or not a menu-key-equiv type keystroke,
	 * so fall through...
	 */

	/* note that all command equiv. and mouse button
	 * voodoo translation have occured already.
	 */
	activeEvent( IECLASS_RAWKEY, IE->ie_Code );
	return;


    case itACTIVATEWIN:	/* start idlewindow */
    	startIdleWindow();
	return;

    case itACTIVATEGAD:	/* do it only if gad is in active window */
	D( printf( "siw hearing activategad\n"));
	/* only activate gadgets in window proper, and if no requester */
	if ( itwindow == IBase->ActiveWindow &&
	    IT->it_SubCommand == 0 ) {
	    startGadget( returnIdleWindow );
	}
	else doDefault();	/* return error */
	return;

    case itSETREQ:	/* do default, maybe go to requester state */
	/* put up requester and send REQSET message */
    	doDefault();

	/* change to requester state if the requester is
	 * for the active window
	 */
	if ( (IT->it_Error == 0) && itwindow == IBase->ActiveWindow )
	{
	    startRequester();
	    return;
	}
	return;

    case itMETADRAG:	/* go to screen-drag state */
    	startScreenDrag( returnIdleWindow );
	return;

    case itCLOSEWIN:	/* do it, change activation if needed */
	doDefault();	/* let it be delinked	*/
	if ( itwindow == IBase->ActiveWindow )
	{
	    startIdleWindow();	/* make parent window active */
	}
    	return;

    /* normal input sent to application */
    case itMENUUP:	/* send event */
	activeEvent( IECLASS_RAWMOUSE, IECODE_RBUTTON | IECODE_UP_PREFIX );
	return;
    case itSELECTUP:	/* send event */
	D2( printf("sidlewindow, normal selectup\n") );
	activeEvent( IECLASS_RAWMOUSE, IECODE_LBUTTON | IECODE_UP_PREFIX );
	return;

    case itZOOMWIN:	/* do default, maybe with SIZEVERIFY */
	/* it_SubCommand specifies a user-initiated zoom, meaning
	 * that we need a SIZEVERIFY session.
	 */
	if ( IT->it_SubCommand )
	{
	    DZOOM( printf("sidlewindow starting sizev for itZOOM\n"));
	    startVerify( returnIdleZoom, itwindow, SIZEVERIFY, 0 );
	}
	else
	{
	    DZOOM( printf("sidlewindow got non-verify zoom\n"));
	    doDefault();
	}
	return;


    case itTIMER:	/* check for gadget help, then do default */
	gadgetHelpTimer();
	/* FALL THROUGH!!! */

	/* default processing	*/
#if 0
    case itDISKCHANGE:	/* do default */
    case itOPENSCREEN:	/* do default */
    case itCLEARREQ:	/* do default */
    case itOPENWIN:	/* do default */
    case itVERIFY:	/* do default */
    case itREMOVEGAD:	/* do default */
    case itSETMENU:	/* do default */
    case itCLEARMENU:	/* do default */
    case itCHANGEWIN:	/* do default */
    case itDEPTHWIN:	/* do default */
    case itMOVESCREEN:	/* do default */
    case itDEPTHSCREEN:	/* do default */
    case itCLOSESCREEN:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itCHANGESCBUF:	/* do default */
    case itCOPYSCBUF:	/* do default */
    case itUNKNOWNIE:	/* do default */
    case itSETPOINTER:	/* do default */
    case itGADGETMETHOD:/* do default */
    case itMODIFYPROP:	/* do default */
#endif
    default:		/* itDEFAULT: do default */
	doDefault();
    }
}

/*
 *
 * about the same as returnRequesterZoom().
 *
 * Making the (safe) assumption that the
 * window which had a zoom gadget selection
 * is still the active window, sVerify doesn't
 * allow change of activation, and as sGadget morphs
 * the zoom gadget selectup token, it gets processed immediately
 * afterward
 */
UWORD
returnIdleZoom( okcode )
{
    if ( okcode != OKOK )
    {
	/*
	 * if aborted (or timeout), send "verify clear"
	 * ZZZ: would need to change for "MOVEVERIFY"
	 */
	activeEvent( IECLASS_SIZEWINDOW, 0 );
    }
    else
    {
	/* Peter 4-Dec-90:  TRUE parameter indicates that this zoom
	 * resulted from user-interaction.  In particular, a NEWSIZE
	 * is required if the window has SIZEVERIFY set.
	 */
	IZoomWindow( fetchIBase()->ActiveWindow, TRUE );
    }
    returnIdleWindow();
}
@


38.17
log
@Now handles menu-lending for menu-command keys.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.16 92/07/07 15:23:36 peter Exp Locker: peter $
d525 1
@


38.16
log
@itGADGETMETHOD does default.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.15 92/06/29 10:47:26 peter Exp Locker: peter $
d49 1
d56 2
d136 1
a136 1
	    setWindow( newawindow, IT->it_SubCommand );
d140 1
a140 1
	    /* Intuition relies on itACTIVATEWIN with a SubCommand of TRUE
d148 2
a149 2
	     * it_SubCommand of TRUE, we have to call fixWindowBorders()
	     * (which knows only to act if it_SubCommand is TRUE).
d157 1
a157 1
	     * should things up so this hand-dependency is
d178 9
a186 2
	if ( IBase->MenuLendingReturn = (struct Window *)IT->it_Object2 )
	/* Object2 points at originating window if menu-lending is occurring */
d188 4
a191 16
	    if ( TESTFLAG( IBase->ActiveWindow->Flags, RMBTRAP ) )
	    {
		activeEvent( IECLASS_RAWMOUSE, MENUDOWN );
		/* Take the itACTIVATEWIN token and reuse it
		 * to send ourselves back.
		 */
		reuseToken();
		IT->it_Object1 = (CPTR) IBase->MenuLendingReturn;
		IBase->MenuLendingReturn = NULL;
		return;
	    }
	    else
	    {
		startMenu();
		return;
	    }
d193 1
a332 10
	if ( XWINDOW(IBase->ActiveWindow)->MenuLend )
	{
	    reuseToken();
	    IT->it_Command = itACTIVATEWIN;
	    IT->it_Object1 = (CPTR) XWINDOW(IBase->ActiveWindow)->MenuLend;
	    IT->it_Object2 = (CPTR) IBase->ActiveWindow;
	    IT->it_SubCommand = FALSE;
	    return;
	}
	else
d335 1
d337 1
d339 21
a359 1
		startMenu();
d379 4
a382 1
	/* test to see if it's a valid menu equivalent */
d385 1
a385 3
	    (! TESTFLAG( IE->ie_Code, IECODE_UP_PREFIX )) &&
	    ( (menunum = findMenuKey( IBase->ActiveWindow->MenuStrip,
		IT->it_Code )) != MENUNULL ) )
d387 33
a419 8
	    D( printf("sIdleWindow: found  key equiv of %lx\n", menunum ) );
	    startMenuKey( menunum );
	    return;
	}
	else
	{
	    /* note that all command equiv. and mouse button
	     * voodoo translation have occured already.
a420 2
	    activeEvent( IECLASS_RAWKEY, IE->ie_Code );
	    return;
d422 9
@


38.15
log
@Fixed another timing hole which could prevent gadgets from being drawn.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.14 92/06/18 18:10:22 peter Exp Locker: peter $
d480 1
@


38.14
log
@setWindow() now takes an "initial-draw" parameter.  Sets it_SubCommand
to FALSE when generating an itACTIVATEWIN token.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.13 92/06/03 17:38:18 peter Exp Locker: peter $
d137 13
@


38.13
log
@Reworked gadget-help to not require pressing help.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.12 92/05/15 14:09:27 peter Exp Locker: peter $
d71 1
a71 1
	    setWindow( newawindow );
d133 1
a133 1
	    setWindow( newawindow );
d230 1
a230 1
	setWindow( newawindow );	/* may be NULL	*/
d327 1
@


38.12
log
@setWindow() loses 'initial' parameter.  itACTIVATEWIN loses it_SubCommand.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.11 92/04/07 17:57:53 peter Exp Locker: peter $
a366 14
	    if ( TESTFLAG( IBase->ActiveWindow->MoreFlags, WMF_GADGETHELP ) &&
		( IE->ie_Code == KEYCODE_HELP ) )
	    {
		/* Test for gadget help.  This routine takes care of
		 * everything, including sending the GADGETHELP
		 * message.
		 */
		if ( gadgetHelp() )
		{
		    /* A gadget sent help, so swallow the keystroke */
		    return;
		}
		/* else fall through and send a boring help keystroke */
	    }
d441 4
a448 1
    case itTIMER:	/* do default */
@


38.11
log
@Handles itSETPOINTER token.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.10 92/04/02 21:41:16 peter Exp Locker: peter $
d71 1
a71 1
	    setWindow( newawindow, FALSE );
a125 1
	    IT->it_Error = 1;
d132 2
a133 7
	    /* will change ActiveWindow, etc.
	     * it_SubCommand is TRUE if this activation
	     * came from OpenWindow(), which setWindow()
	     * needs to know in order to handle gadget
	     * rendering correctly.    
	     */
	    setWindow( newawindow, IT->it_SubCommand );
a172 1
		IT->it_SubCommand = FALSE;
d230 1
a230 1
	setWindow( newawindow, FALSE );	/* may be NULL	*/
a326 1
	    IT->it_SubCommand = FALSE;
@


38.10
log
@Supports menu lending.  Supports gadget help.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.9 92/04/02 12:08:08 peter Exp Locker: peter $
d484 1
@


38.9
log
@Renamed reportMouse() to updateMousePointer().
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.8 92/03/21 14:54:30 peter Exp Locker: peter $
d134 1
a134 1
	     * it_Object2 is TRUE if this activation
d139 1
a139 1
	    setWindow( newawindow, IT->it_Object2 );
d168 21
d327 10
a336 3
    case itMENUDOWN:	/* send event or start menus */
	if ( TESTFLAG( IBase->ActiveWindow->Flags, RMBTRAP ) )
	    activeEvent( IECLASS_RAWMOUSE, MENUDOWN );
d338 6
a343 1
	    startMenu();
d375 14
@


38.8
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.7 92/03/19 15:54:59 peter Exp Locker: peter $
d318 1
a318 1
	doDefault();	/* reportMouse()	*/
@


38.7
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.6 92/03/19 10:54:58 peter Exp Locker: peter $
a429 1
    case itATTACHSCREEN:	/* do default */
@


38.6
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.5 92/02/20 12:17:36 peter Exp Locker: peter $
d430 1
@


38.5
log
@Defaults new itCOPYSCBUF token.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.4 92/02/17 17:17:38 peter Exp Locker: peter $
d438 1
a438 1
    default:
@


38.4
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token does default.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.3 92/02/07 11:07:39 peter Exp Locker: peter $
d435 1
@


38.3
log
@Removed unneeded call to setMouse().
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.2 92/01/22 16:45:04 peter Exp Locker: peter $
d65 1
a65 1
    case itSELECTDOWN:
d118 1
a118 1
    case itACTIVATEWIN:
d181 1
a181 1
    case itCLOSEWIN:
d306 1
a306 1
    case itMENUDOWN:
d313 1
a313 1
    case itSELECTDOWN:
d317 1
a317 1
    case itMOUSEMOVE:
d328 1
a328 1
    case itRAWKEY:
d350 1
a350 1
    case itACTIVATEWIN:
d354 1
a354 1
    case itACTIVATEGAD:
d364 1
a364 1
    case itSETREQ:
d378 1
a378 1
    case itMETADRAG:
d382 1
a382 1
    case itCLOSEWIN:
d391 1
a391 1
    case itMENUUP:
d394 1
a394 1
    case itSELECTUP:
d399 1
a399 1
    case itZOOMWIN:
d418 18
a435 18
    case itDISKCHANGE:
    case itOPENSCREEN:
    case itTIMER:
    case itCLEARREQ:
    case itOPENWIN:
    case itVERIFY:
    case itREMOVEGAD:
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itDEPTHWIN:
    case itMOVESCREEN:
    case itDEPTHSCREEN:
    case itBORDERPATROL:
    case itCLOSESCREEN:
    case itNEWPREFS:
    case itMODIFYIDCMP:
    case itUNKNOWNIE:
@


38.2
log
@Put comment in section of code that handles itACTIVATEWIN of the
already-active window, to point to dependency in sgadget.c.
New way to handle clicking in the no-window area of a screen.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.1 91/07/10 18:02:05 peter Exp Locker: peter $
a226 2

	setMouse( newawindow );		/* may be NULL	*/
@


38.1
log
@Now passes new argument to setWindow(), so that clicking in the
no-window area of a screen now activates that screen.
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 38.0 91/06/12 14:31:58 peter Exp Locker: peter $
d71 1
a71 1
	    setWindow( newawindow, IBase->HitScreen );
a73 1

d98 7
d126 1
d133 7
a139 2
	    /* will change ActiveWindow, etc. */
	    setWindow( newawindow, NULL );
d143 8
d216 1
a216 1
	setWindow( newawindow, NULL );	/* may be NULL	*/
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: sidlewindow.c,v 1.18 91/01/09 21:48:21 peter Exp $
d71 1
a71 1
	    setWindow( newawindow );
d127 1
a127 1
	    setWindow( newawindow );
d136 3
d140 2
a141 4
	    if ( newawindow )
	    {
		setScreen( newawindow->WScreen );
	    }
d196 1
a196 1
	setWindow( newawindow );	/* may be NULL	*/
@
