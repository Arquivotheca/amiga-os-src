head     38.8;
branch   ;
access   ;
symbols  V40_85:38.8 V40_71:38.8 V40_68:38.8 V40_65:38.8 V40_47:38.8 V40_45:38.8 V40_37:38.8 V40_34:38.8 V40_29:38.8 V39_2415:38.8 V39_2369:38.8 V39_2339:38.8 V39_2332:38.8 V39_2275:38.8 V39_2256:38.8 V39_2210:38.8 V39_2192:38.8 V39_2084:38.8 V39_2082:38.8 V39_2076:38.8 V39_2073:38.8 V39_2058:38.8 V39_2051:38.8 V39_2031:38.8 V39_2017:38.8 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.8 V39_1805:38.8 V39_1783:38.7 V39_1695:38.7 V39_1621:38.7 V39_1620:38.7 V39_1508:38.6 V39_1485:38.6 V39_1461:38.6 V39_1458:38.6 V39_1456:38.6 V39_1405:38.6 V39_1368:38.6 V39_1360:38.6 V39_1324:38.6 V39_1147:38.6 V39_1143:38.6 V39_1141:38.6 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.6 V39_1078:38.6 V39_1073:38.6 V39_757:38.6 V39_702:38.6 V39_557:38.6 V39_553:38.6 V39_551:38.6 V39_510:38.6 V39_495:38.5 V39_416:38.4 V39_383:38.3 V39_371:38.3 V39_336:38.3 V39_323:38.3 V39_295:38.3 V39_277:38.2 V39_254:38.2 V39_222:38.2 V39_185:38.2 V39_171:38.2 V39_161:38.1 V38_159:38.1 V38_116:38.1 V38_59:38.1;
locks    ; strict;
comment  @*   @;


38.8
date     92.07.24.11.29.16;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.06.29.10.46.24;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.02.21.17.03.28;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.20.12.15.15;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.11.13.40.01;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     91.12.12.20.45.59;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.09.23.12.28.42;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.10.18.00.10;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.29.27;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.8
log
@Cleaned up dead code.
@
text
@/*** rect.c *************************************************************
 *
 *  File rect.c: intuition rectangle and box utilities
 *
 *  $Id: rect.c,v 38.7 92/06/29 10:46:24 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#define DEBUG 0

#define D(x)	;

#include "intuall.h"
#include <graphics/regions.h>
#include <graphics/gfxmacros.h>

struct Rectangle	nullrect = {0,0,0,0};

eraseRect( rp, r )
struct RastPort *rp;	/* will not corrupt */
struct Rectangle *r;
{
    EraseRect( rp, r->MinX, r->MinY, r->MaxX, r->MaxY );
}



/* used by prop gadgets	*/
/* jimm: 4/27/90: patternpen != ~0 means to use patternfill */
eraseRemnants(rp, oldbox, newbox, offset, pen, patternpen)
struct RastPort *rp;
struct IBox	*oldbox;
struct IBox	*newbox;
struct Point 	offset;
UBYTE pen;
UBYTE patternpen;
{
    struct Rectangle oldrect;
    struct Rectangle newrect;

    /* convert boxes to rectangles in layer coordinates */

    boxToRect(oldbox, &oldrect);
    offsetRect(&oldrect, offset.X, offset.Y);
    boxToRect(newbox, &newrect);
    offsetRect(&newrect, offset.X, offset.Y);

    fillAround( rp, &oldrect, &newrect, pen, patternpen );
}

/* jimm: 4/27/90: patternpen != ~0 means to use patternfill */
fillAround( rp, yesrect, norect, pen, patternpen)
struct RastPort *rp;
struct Rectangle *yesrect;	/* fill this rectangle ...	*/
struct Rectangle *norect;	/* ... except here		*/
UBYTE		pen;
UBYTE		patternpen;
{
    struct Region *rgn;
    struct RegionRectangle *rr;
    struct Point ulc;		/* region rects are offset by bounds */
    extern UWORD	CPattern[];

    /* start with old rectangle */
    if ( !( rgn = (struct Region *) NewRegion() ) ) return;

    OrRectRegion(rgn, yesrect);

    /* oh, yeah, I can use ClearRectRegion() */
    if ( norect ) ClearRectRegion(rgn, norect);
    
    /* erase remnants */
    ulc = upperLeft(&rgn->bounds);	/* note: a macro	*/

    for (rr = rgn->RegionRectangle; rr != NULL; rr = rr->Next)
    {
	offsetRect(&rr->bounds, ulc.X, ulc.Y);

	if ( patternpen != ~0 )
	{
	    BlastPattern( rp,
		rr->bounds.MinX,
		rr->bounds.MinY,
		rr->bounds.MaxX,
		rr->bounds.MaxY,
		CPattern, 1,
		patternpen, pen, JAM2 );
	}
	else
	{
	    rp->Mask = -1;
	    BNDRYOFF( rp );		/* 3/88: hoo boy	*/
	    SetABPenDrMd(rp, pen, 0, JAM2);
	    SafeRectFill(rp,
		rr->bounds.MinX,
		rr->bounds.MinY,
		rr->bounds.MaxX,
		rr->bounds.MaxY);
	}
    }

    DisposeRegion(rgn);
}

/*
 * until all callers of func are on the structured train
 */
boxModernize(func, rp, box)
int (*func)();
struct RastPort *rp;
struct IBox *box;
{
    (*func)(rp, box->Left, box->Top, box->Width, box->Height);
}

@


38.7
log
@Mike downcoded a bunch of small routines, so they're gone from here.
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.6 92/02/21 17:03:28 peter Exp Locker: peter $
a71 1
#if 1
a74 8
#else
    /* xor away intersection with newbox */
    if ( norect ) XorRectRegion(rgn, norect);

    /* and in original to throw away extra newrect */
    AndRectRegion(rgn, yesrect);
#endif

@


38.6
log
@Put back SafeRectFill(), because I broke people with zero-width string
gadgets, right Chris?
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.5 92/02/20 12:15:15 peter Exp Locker: peter $
a21 20
windowBox( w, box )
struct Window	*w;
struct IBox	*box;
{
    *box = *( ( struct IBox * ) &w->LeftEdge);
}


#if 0	/* shit, use 640	*/
/*
 * returns width of TextOverscan, scaled down to HIRES coords
 * (used by DisplayAlert0
 */
hiresStdWidth()
{
    return (rectWidth( &(fetchIBase())->TextOverscan ) / 2 );
    
}
#endif

a28 158
offsetRect(r, dx, dy)
struct Rectangle *r;
int dx, dy;
{
    r->MinX += dx;
    r->MaxX += dx;
    r->MinY += dy;
    r->MaxY += dy;
}

/* OK if box, rect point to same thing
 * returns pointer to rect
 */
struct IBox *
rectToBox( rect, box )
struct IBox *box;
struct IBox *rect;	/* really rect */
{
    *box =  *rect;
    box->Width -= (box->Left - 1);
    box->Height -= (box->Top - 1);
    return ( box );
}
/* OK if box, rect point to same thing
 * returns pointer to rect
 */
struct Rectangle *
boxToRect(box, rect)	/* takes l,t,w,h to l,t,r,b */
struct Rectangle *box;	/* really an IBox */
struct Rectangle *rect;
{
    *rect =  *box;
    rect->MaxX += rect->MinX - 1;
    rect->MaxY += rect->MinY - 1;
    return (rect);
}


degenerateRect( r )
struct Rectangle *r;
{
    r->MinX = 32767;
    r->MinY = 32767;
    r->MaxX = -32767;
    r->MaxY = -32767;
}

/*
 * expands 'big' to contain 'r2'
 */
rectHull(big, r2)
struct Rectangle *big, *r2;
{
    if (r2->MinX < big->MinX) big->MinX = r2->MinX;
    if (r2->MinY < big->MinY) big->MinY = r2->MinY;
    if (r2->MaxX > big->MaxX) big->MaxX = r2->MaxX;
    if (r2->MaxY > big->MaxY) big->MaxY = r2->MaxY;
}

/*
 * expands 'big' to contain 'r2', but not downwards (used for screens)
 */
upperRectHull(big, r2)
struct Rectangle *big, *r2;
{
    if (r2->MinX < big->MinX) big->MinX = r2->MinX;
    if (r2->MinY < big->MinY) big->MinY = r2->MinY;
    if (r2->MaxX > big->MaxX) big->MaxX = r2->MaxX;
}

limitPoint(pt, rect)
struct Point *pt;
struct Rectangle *rect;
{
    pt->X = imin( rect->MaxX, imax(pt->X, rect->MinX));
    pt->Y = imin( rect->MaxY, imax(pt->Y, rect->MinY));
}

/*
 * constrains rectangle to limiting constraints
 */
limitRect(r1, limit)
struct Rectangle *r1, *limit;
{
    r1->MinX = imax( r1->MinX, limit->MinX);
    r1->MinY = imax( r1->MinY, limit->MinY);

    r1->MaxX = imin( r1->MaxX, limit->MaxX);
    r1->MaxY = imin( r1->MaxY, limit->MaxY);
}

BOOL
ptInBox(pt, b)
struct Point pt;
struct IBox *b;
{
    struct IBox box;
    int tmp;

    box = *b;

     return (
		(tmp = pt.X - box.Left) >= 0 
	    &&  (tmp < box.Width)
	    &&  (tmp = pt.Y - box.Top) >= 0
	    &&  (tmp < box.Height)
	    );
}

BOOL inrect(x, y, j)
int x, y;
REGISTER struct	Rectangle *j;
{
    return((x >= j->MinX) &&
	   (x <= j->MaxX) &&
	   (y >= j->MinY) &&
	   (y <= j->MaxY));
}


/*
 * this and the above should merge
 */
BOOL collide(x, y, boxx, boxy, xsize, ysize)
int x, y, boxx, boxy, xsize, ysize;
{
    return((x >= boxx) && (x < boxx + xsize)
	&& (y >= boxy) && (y < boxy + ysize));
}


/* fits box in container, minimizing movement, always keeping
 * upperleft of box visible (i.e. in container)
 */
boxFit(box, container, result)
struct IBox	*box;
struct IBox	*container;
struct IBox	*result;
{
    *result = *box;
    result->Left = MAX(container->Left,
	MIN(container->Left + container->Width - result->Width, result->Left));
    result->Top = MAX(container->Top,
	MIN(container->Top + container->Height - result->Height, result->Top));
}

/* transforms (by subtraction) a point in a coordinate
 * system to the coordinate system of a subobject, described
 * by a Top/Left pair.
 * NOTE: changes the point you pass indirectly
 */
transfPoint(point, ul)
struct Point	*point;
struct Point	ul;
{
    point->X  -= ul.X;
    point->Y  -= ul.Y;
}
a29 7
currMouse(window, pt)
struct Window *window;
struct Point *pt;
{
    pt->X = window->MouseX;
    pt->Y = window->MouseY;
}
a127 36
/*
 * get inner window region, top/left relative to window exterior
 */
gzzBox(w, box)
struct Window *w;
struct IBox *box;
{
    box->Left = w->BorderLeft;
    box->Top = w->BorderTop;
    box->Width = w->Width - w->BorderRight - w->BorderLeft;
    box->Height = w->Height - w->BorderBottom - w->BorderTop;
}

rectHeight(r)
struct Rectangle *r;
{
    return ( r->MaxY - r->MinY + 1);
}

rectWidth(r)
struct Rectangle *r;
{
    return ( r->MaxX - r->MinX + 1);
}

boxRight( b )
struct IBox	*b;
{
    return ( b->Left + b->Width - 1 );
}

boxBottom( b )
struct IBox	*b;
{
    return ( b->Top + b->Height - 1 );
}
@


38.5
log
@Changed an instance of RectFill() to SafeRectFill().
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.4 92/02/11 13:40:01 peter Exp Locker: peter $
d291 1
a291 1
	    RectFill(rp,
@


38.4
log
@CPattern is now of "size" 1.
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.3 91/12/12 20:45:59 peter Exp Locker: peter $
d291 1
a291 1
	    SafeRectFill(rp,
@


38.3
log
@Removed FillRect() and FillBox() functions.
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.2 91/09/23 12:28:42 peter Exp Locker: peter $
d283 1
a283 1
		CPattern, 2,
@


38.2
log
@FillRect() now uses SetABPenDrMd().
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.1 91/07/10 18:00:10 peter Exp Locker: peter $
a41 12
#if 0
FillBox(rp, b, pen)
struct RastPort *rp;	/* will not corrupt */
struct IBox *b;
USHORT	pen;
{
    struct Rectangle r;

    FillRect(rp, boxToRect(b, &r), pen);
}
#endif

a48 11
FillRect(rp, r, pen)
struct RastPort *rp;	/* will not corrupt */
struct Rectangle *r;
USHORT pen;
{
    rp->Mask = -1;
    BNDRYOFF( rp );		/* 3/88: hoo boy	*/
    SetABPenDrMd(rp, pen, 0, JAM2);
    SafeRectFill(rp, r->MinX, r->MinY, r->MaxX, r->MaxY);
}

d288 8
a295 1
	    FillRect(rp, &rr->bounds, pen);
@


38.1
log
@Use SafeRectFill() instead of locally-checked RectFill().
Deleted unnecessary screenRect().
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 38.0 91/06/12 14:29:27 peter Exp Locker: peter $
d68 1
a68 2
    SetDrMd(rp, JAM2);
    SetAPen(rp, pen);
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: rect.c,v 36.24 90/10/24 14:02:09 peter Exp $
a29 15
/*
 * screen position/dims, in screen coordinates
 */
screenRect( rect, screen)
struct Rectangle *rect;
struct Screen *screen;
{
    rect->MinX = rect->MaxX = screen->LeftEdge;
    rect->MaxX += (screen->Width - 1);

    rect->MinY = rect->MaxY = screen->TopEdge;
    rect->MaxY += (screen->Height - 1);
}


d66 5
a70 10
    /* 6/10/86: no more explosions, ok? */
    if (r->MinX <= r->MaxX && r->MinY <= r->MaxY)
    {
	rp->Mask = -1;
	BNDRYOFF( rp );		/* 3/88: hoo boy	*/
	SetDrMd(rp, JAM2);
	SetAPen(rp, pen);
	RectFill(rp, r->MinX, r->MinY, r->MaxX, r->MaxY);
    }
    D( else dumpRect("FillRect: inside out", r); );
d214 1
a214 1
	MIN(container->Width - result->Width, result->Left));
d216 1
a216 1
	MIN(container->Height - result->Height, result->Top));
@
