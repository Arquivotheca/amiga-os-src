head     38.4;
branch   ;
access   ;
symbols  V40_85:38.4 V40_71:38.4 V40_68:38.4 V40_65:38.4 V40_47:38.4 V40_45:38.4 V40_37:38.4 V40_34:38.4 V40_29:38.4 V39_2415:38.4 V39_2369:38.4 V39_2339:38.4 V39_2332:38.4 V39_2275:38.4 V39_2256:38.4 V39_2210:38.4 V39_2192:38.3 V39_2084:38.3 V39_2082:38.3 V39_2076:38.3 V39_2073:38.3 V39_2058:38.3 V39_2051:38.3 V39_2031:38.3 V39_2017:38.3 V39_2012:38.3 V39_1985:38.3 V39_1933:38.3 V39_1819:38.3 V39_1805:38.3 V39_1783:38.3 V39_1695:38.3 V39_1621:38.3 V39_1620:38.3 V39_1508:38.3 V39_1485:38.3 V39_1461:38.3 V39_1458:38.3 V39_1456:38.3 V39_1405:38.3 V39_1368:38.3 V39_1360:38.3 V39_1324:38.3 V39_1147:38.3 V39_1143:38.3 V39_1141:38.3 V39_1120:38.3 V39_1116:38.3 V39_1104:38.3 V39_1100:38.3 V39_1078:38.3 V39_1073:38.3 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.1 V38_159:38.1 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.4
date     92.11.20.18.33.22;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.07.18.00.33;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.03.16.36.28;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.08.21.18.21.36;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.34.18;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.4
log
@Added comment about IBase->Seconds/Micros.
@
text
@

/*** timing.c ****************************************************************
 *
 *  contains the timing routines
 *
 *  $Id: timing.c,v 38.3 92/04/07 18:00:33 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1985, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"

doTiming()
{
    struct Screen *workscreen;
    struct Window *workwindow;
    struct IntuitionBase *IBase = fetchIBase();

    assertLock("timing", IBASELOCK );

    /* LOCKIBASE(); */
    /* using state machine instead of IBase lock to protect
     * screen lists and so on, but without it, IDisplayBeep
     * is vulnerable.  We correct with Forbid/Permit in 
     * IDisplayBeep()
     */

    /* In 3.00 and prior, Intuition only updated its IBase->Seconds/Micros
     * fields for IECLASS_TIMER events, since those had "trusted" timestamps.
     * You may be asking why we still do we set IBase->Seconds/Micros
     * here when ism.c/dispatchToken() now sets IBase->Seconds/Micros
     * for _all_ events.  Well, the answer is that dispatchToken() does
     * a sanity check on the TimeStamp, and filters out bad time values
     * (eg. reverse time or far-future time).  This is required by
     * our very own commodities.library, which can insert InputEvents
     * with zero timestamps.
     *
     * The important bit is that we still trust IECLASS_TIMER events,
     * and therefore always obey their TimeStamp.  If we didn't, and
     * the user changed the system time (or some application choked off
     * Intuition's input handler for a time), the new TimeStamp would be
     * eternally rejected by Intuition as unreasonable.
     */

    IBase->Seconds = IE->ie_TimeStamp.tv_secs;
    IBase->Micros = IE->ie_TimeStamp.tv_micro;

    /* check all time-out cases, and effect changes as needed */
    workscreen = IBase->FirstScreen;
    while (workscreen)
    {
	if (workscreen->Flags & BEEPING)
	{
	    if (TESTFLAG(XSC(workscreen)->PrivateFlags, PSF_DELAYBEEP))
	    {
		XSC(workscreen)->PrivateFlags &= ~PSF_DELAYBEEP;
	    }
	    else
	    {
		/* ZZZ: do a test to see if it has changed,
		 * then maybe don't stuff it back
		 */
		SetRGB32(&workscreen->ViewPort, 0,
		    XSC(workscreen)->SaveRed,
		    XSC(workscreen)->SaveGreen,
		    XSC(workscreen)->SaveBlue);

		/* jimm: move to end: keep IDisplayBeep() out of here
		 * until I'm done restoring the color
		 */
		workscreen->Flags &= ~BEEPING;
	    }
	}
	workwindow = workscreen->FirstWindow;
	while ( workwindow )
	{
	    if ( TESTFLAG( workwindow->MoreFlags, WMF_DEFERREDPOINTER ) )
	    {
		if ( !( --XWINDOW(workwindow)->DeferredCounter ) )
		{
		    /* Time's up.  Set the new pointer.  Note that
		     * ISetWindowPointer() takes care of clearing
		     * the WMF_DEFERREDPOINTER flag.
		     */
		    ISetWindowPointer( workwindow,
			XWINDOW(workwindow)->DeferredPointer, TRUE );
		}
	    }
	    workwindow = workwindow->NextWindow;
	}
	
	workscreen = workscreen->NextScreen;
    }

    /* UNLOCKIBASE(); */
}

@


38.3
log
@Handles counting down and acting on the deferred pointer stuff.
@
text
@d7 1
a7 1
 *  $Id: timing.c,v 38.2 92/03/03 16:36:28 peter Exp Locker: peter $
a18 1
    LONG newseconds, newmicros;
a24 3
    newseconds = IE->ie_TimeStamp.tv_secs;
    newmicros = IE->ie_TimeStamp.tv_micro;

d32 19
a50 2
    IBase->Seconds = newseconds;
    IBase->Micros = newmicros;
@


38.2
log
@Renamed private screen flags.
@
text
@d7 1
a7 1
 *  $Id: timing.c,v 38.1 91/08/21 18:21:36 peter Exp Locker: peter $
d21 1
d42 2
a44 2
	if (workscreen->Flags & BEEPING)
	    {
d63 15
d80 3
a82 1

d84 1
a84 1
	}
@


38.1
log
@Screen-beep restore code now uses SetRGB32().
@
text
@d7 1
a7 1
 *  $Id: timing.c,v 38.0 91/06/12 14:34:18 peter Exp Locker: peter $
d44 1
a44 1
	    if (TESTFLAG(XSC(workscreen)->PrivateFlags, PRIVSCF_DELAYBEEP))
d46 1
a46 1
		XSC(workscreen)->PrivateFlags &= ~PRIVSCF_DELAYBEEP;
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
 *  $Id: timing.c,v 36.9 90/08/14 15:45:55 peter Exp $
a22 2
    USHORT color0;

a49 1
		color0 = workscreen->SaveColor0;
d53 4
a56 2
		SetRGB4(&workscreen->ViewPort, 0, (color0 >> 8) & 0xF,
		    (color0 >> 4) & 0xF, color0 & 0xF);
@
