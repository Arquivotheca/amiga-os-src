head     38.0;
branch   ;
access   ;
symbols  V40_85:38.0 V40_71:38.0 V40_68:38.0 V40_65:38.0 V40_47:38.0 V40_45:38.0 V40_37:38.0 V40_34:38.0 V40_29:38.0 V39_2415:38.0 V39_2369:38.0 V39_2339:38.0 V39_2332:38.0 V39_2275:38.0 V39_2256:38.0 V39_2210:38.0 V39_2192:38.0 V39_2084:38.0 V39_2082:38.0 V39_2076:38.0 V39_2073:38.0 V39_2058:38.0 V39_2051:38.0 V39_2031:38.0 V39_2017:38.0 V39_2012:38.0 V39_1985:38.0 V39_1933:38.0 V39_1819:38.0 V39_1805:38.0 V39_1783:38.0 V39_1695:38.0 V39_1621:38.0 V39_1620:38.0 V39_1508:38.0 V39_1485:38.0 V39_1461:38.0 V39_1458:38.0 V39_1456:38.0 V39_1405:38.0 V39_1368:38.0 V39_1360:38.0 V39_1324:38.0 V39_1147:38.0 V39_1143:38.0 V39_1141:38.0 V39_1120:38.0 V39_1116:38.0 V39_1104:38.0 V39_1100:38.0 V39_1078:38.0 V39_1073:38.0 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.0
date     91.06.12.14.20.17;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@/*** iequeue.c *****************************************************************
 *
 *  iequeue.c - input event queue handler
 *
 *  $Id: iequeue.c,v 1.7 91/03/13 19:26:06 peter Exp $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)	;
#define DC(x)	;	/* debug cloning */

/*
    Lists:
	IEFoodList	-- being processed by other handlers
	IEQueue		-- waiting for Intuition to pass along
	IEFreeList	-- persistent pool
 */

/* this structure is our little secret	*/
struct IENode	{
    struct Node		ien_Node;	/* can't be MinNode for pools */
    struct InputEvent	ien_IE;
};

#define IEN_ALLOC	(10)	/* this many pre-allocated input events */

struct Node	*RemHead();
struct Node	*poolGet();

initIEvents()
{
    struct IntuitionBase	*IBase = fetchIBase();

    poolInit( &IBase->IEFreeList, sizeof (struct IENode), IEN_ALLOC );
    NewList( &IBase->IEFoodList);
    NewList( &IBase->IEQueue );
    NewList( &IBase->IECloneList );
}

reclaimIEvents()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Node	*ln;

    while ( ln = RemHead( &IBase->IEFoodList ) )
    {
	poolReturn( ln );
    }

    while ( ln = RemHead( &IBase->IECloneList ) )
    {
	DC( printf("reclaiming cloned IE node\n") );
	poolReturn( ln );
    }
}

/*
 * this allocates an input event for "additional true
 * input tokens."  The only example known is buttonup.
 * The event node is stuck on the IECloneList for
 * bookkeeping.
 *
 * New uses:
 *-don't morph rawkey events converted to
 * mousemoves, since input.device wants to see them
 * come back as they went out.
 *-clone IE for one of mousemove/mousebutton which each
 * rawmouse button event gets decomposed into.
 *-clone IE for compatible POINTERPOS event, since V34 didn't
 * really modify the event (though it was documented as doing so).
 * This fixes Jack Nicklaus Unlimited Golf
 */
struct InputEvent	*
cloneIEvent( ie )
struct InputEvent	*ie;
{
    struct IENode	*ien;
    struct IntuitionBase	*IBase = fetchIBase();

    DC( printf("cloneIEvent\n") );
    
    if ( ien = (struct IENode *) poolGet( &IBase->IEFreeList ) )
    {
	DC( printf("cIE node at %lx, IE at  %lx\n", ien, &ien->ien_IE ) );
	AddTail( &IBase->IECloneList, ien );

	ien->ien_IE = *ie;		/* copy-clone */
	ien->ien_IE.ie_NextEvent = NULL;

	return ( &ien->ien_IE );
    }
    return ( NULL );
}

/*
 * called only by appendEvent()
 * remember to fill it in ...
 */
struct InputEvent	*
queueIEvent()
{
    struct IENode	*ien;
    struct IntuitionBase	*IBase = fetchIBase();

    D( printf("queueIEvent\n") );
    
    if ( ien = (struct IENode *) poolGet( &IBase->IEFreeList ) )
    {
	D( printf("qIE node at %lx, IE at  %lx\n", ien, &ien->ien_IE ) );
	AddTail( &IBase->IEQueue, ien );
	return ( &ien->ien_IE );
    }
    return ( NULL );
}

/*
 * return singly linked list of all queued input events.
 * assumes that IEFoodList has already been cleared.
 */
struct InputEvent	*
returnIEvents()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct IENode	*ien;
    struct InputEvent	*firstie = NULL;
    struct InputEvent	*lastie;

    D( printf("returnIEvents\n") );

    lastie = (struct InputEvent *) &firstie;

    /* move them from the queue to the return list,
     * linking them also along ie_NextEvent.
     * return pointer to first one
     */
    while ( ien = (struct IENode *) RemHead( &IBase->IEQueue ) )
    {
	D( printf("ien: %lx\n", ien ) );
	AddTail( &IBase->IEFoodList, ien );

	lastie = ( lastie->ie_NextEvent = &ien->ien_IE );
	lastie->ie_NextEvent = NULL;	/* make sure	*/
    }

    D( printf("rIE returns %lx\n", firstie ) );
    return ( firstie );
}
@
