head     38.8;
branch   ;
access   ;
symbols  V40_85:38.8 V40_71:38.8 V40_68:38.8 V40_65:38.8 V40_47:38.8 V40_45:38.8 V40_37:38.8 V40_34:38.8 V40_29:38.8 V39_2415:38.8 V39_2369:38.8 V39_2339:38.8 V39_2332:38.8 V39_2275:38.8 V39_2256:38.8 V39_2210:38.8 V39_2192:38.8 V39_2084:38.8 V39_2082:38.8 V39_2076:38.8 V39_2073:38.8 V39_2058:38.8 V39_2051:38.8 V39_2031:38.8 V39_2017:38.8 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.7 V39_1805:38.7 V39_1783:38.7 V39_1695:38.7 V39_1621:38.6 V39_1620:38.6 V39_1508:38.6 V39_1485:38.6 V39_1461:38.6 V39_1458:38.6 V39_1456:38.6 V39_1405:38.6 V39_1368:38.6 V39_1360:38.6 V39_1324:38.5 V39_1147:38.3 V39_1143:38.3 V39_1141:38.3 V39_1120:38.3 V39_1116:38.3 V39_1104:38.3 V39_1100:38.3 V39_1078:38.3 V39_1073:38.3 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.8
date     92.08.03.15.52.20;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.07.07.15.14.58;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.05.27.11.49.42;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.05.21.17.34.27;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.05.15.14.02.44;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.04.09.16.22.45;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.07.10.53.22;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.04.01.15.03.56;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.13.27;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.8
log
@Use IBase->BlankSprite instead of IBase->NullSpriteData.  Changed the
way AlertSemaphore is referenced.
@
text
@/*** alert.c *****************************************************************
 *
 *  alert support routines
 *
 *  $Id: alert.c,v 38.7 92/07/07 15:14:58 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1985, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "intuall.h"

#define D(x)	;


#ifndef EXEC_MEMORY_H
#include <exec/memory.h>
#endif

#ifndef GRAPHICS_SPRITE_H
#include <graphics/sprite.h>
#endif

#ifndef GRAPHICS_GFXMACROS_H
#include <graphics/gfxmacros.h>
#endif

#ifndef HARDWARE_CUSTOM_H
#include <hardware/custom.h>
#endif

#ifndef HARDWARE_DMABITS_H
#include <hardware/dmabits.h>
#endif

extern struct Custom custom;

/*
 * This routine replaces the ReadLeft/ReadRight and thus
 * reduces code and also makes for easier testing in a number
 * of places
 */
ULONG CheckButtons();


/*
 * New:  The timeout value no longer has a true un-timed value.
 * However, the timeout is now based on frame rate of the machine.
 * That is, a 60fps display will timeout one tick in 1/60 second.
 * This means that a value of 360 is 6 seconds of alert.
 * It also means that ~0 is 828.5 days and thus we don't need to
 * check for ~0 as being a non-timeout.
 *
 * Since we are now frame rate based, we can flash about right.
 * The define below defines the number of frames before we flash
 * and (with the current code) needs to be a power of 2.
 */
#define	FLASH_RATE	64

/*** intuition.library/DisplayAlert ***/
/* Changed to ULONG since WORD bools are a problem */
ULONG timedDisplayAlert(alertnum, string, height, timeout)
ULONG alertnum;
UBYTE *string;
int height;
ULONG timeout;
{
    extern struct IFontPrefs topazprefs;

    struct TextFont *fp;

    struct BitMap *BitMap;

    /* Big Data on the stack */
    struct View View;
    struct ViewPort AViewPort;
    struct RasInfo RasterInfo;
    struct RastPort RasterPort;

#define ViewPtr	(&View)

    ULONG type;
    int x, y, dheight;
    int	width;
    ULONG i;
    UBYTE *plane, *workstring;
    ULONG BoolReturn = FALSE;
    struct IntuitionBase *IBase = fetchIBase();

    struct BitMap *AllocBitMap();

    /* for alert type of:
     *	Daisy Alerts are hanlded strictly by the Exec
     * 	DeadEnd, create a new ViewPort just large enough to hold
     * 		the Alert, create the copperlist for this
     * 		ViewPort, create the View, add the copperlist to
     * 		the View, and that's it
     *	Recovery, create a new ViewPort just large enough to hold
     *		the Alert, move all other Screens down by that
     *		much, and add that ViewPort at the top.
     */


    type = alertnum & ALERT_TYPE;

    D( printf("Alert number %lx, type %lx\n", alertnum, type ) );
    /* alert is standard HIRES display width	*/
    width = 640;	/* standard my ass	*/

    /* jimm: 6/1/90: single-thread alerts, and keep
     * input from running through during alerts
     */
    ObtainSemaphore( &IBase->ISemaphore[ ALERTLOCK ] );

    /*
     * Check if we are to (if timeout is 0, we do not run)
     */
    if (timeout)
    {
        /*
         * if there isn't enough memory for a recoverable alert,
         * we just tell the caller that the user said "FALSE"
         */

        /* try to allocate the memory for the structures and the display */
        if (BitMap=AllocBitMap(width,height,1,BMF_CLEAR|BMF_DISPLAYABLE,NULL))
        {
            /* now, fill out these structures with the appropriate data */
            RasterInfo.BitMap = BitMap;
            RasterInfo.RxOffset = RasterInfo.RyOffset = 0;
            RasterInfo.Next = 0;

            InitRastPort(&RasterPort);
            RasterPort.BitMap = BitMap;

            /* ViewPtr = &View; (ViewPtr is now a macro) */
            InitView(ViewPtr);
            ViewPtr->ViewPort = &AViewPort;

            InitVPort(&AViewPort);
#if 0	/* InitVPort() zeroed these for me */
            AViewPort.DxOffset = AViewPort.DyOffset = 0;
#endif
            AViewPort.DWidth = width;
            AViewPort.DHeight = height;
            AViewPort.Modes = HIRES | SPRITES;
            AViewPort.RasInfo = &RasterInfo;
	    /* Peter 6-May-92: Amazing.  This viewport never had
	     * a colormap.  SetRGB4() does weird things in absence of
	     * a colormap.  Under V37 and prior, it actually modified
	     * the copper lists even though there was no colormap.
	     * It's possible this was the source of the "recoverable
	     * alerts in red" bug of V37, the kicker being that the
	     * graphics default colors are red on black.
	     *
	     * According to Chris, it will be difficult to replicate
	     * the copper-list poking under V39, so I'd better go with
	     * the colormap.
	     *
	     * Now I don't care about failure to allocate the ColorMap,
	     * since we'd then just drop back to the old way, which
	     * under V37 mostly worked, and under V39 gives the gfx
	     * default colors, which happen to be red on black.
	     */
            AViewPort.ColorMap = (struct ColorMap *)GetColorMap( 2 );
            MakeVPort(ViewPtr, &AViewPort);

            /* draw the text and graphics to the display memory */
            dheight = height - 1;
            drawBox(&RasterPort, 0, 0,  width, dheight, 1, JAM1, 6, 3);
            fp = ISetFont( &RasterPort, &topazprefs.ifp_TABuff.tab_TAttr );
            do
                {
                x = (*string++) << 8;
                x |= (*string++);
                y = *string++;
                Move(&RasterPort, x, y);
                i = 0;

                workstring = string;
                while (*string++) i++;
                Text(&RasterPort, workstring, i);
                /* the char at string is fetched, string is bumped, char is tested */
                /* if the char string points at now is NULL too, we're done */
                }
            while (*string++);

            ICloseFont( fp );

            /* display it */
            MrgCop( ViewPtr );
            LoadView( ViewPtr );
            WaitTOF();
            ON_DISPLAY;

            SetRGB4(&AViewPort, 0, 1, 1, 1);

            if (type == DEADEND_ALERT)
            {
                D( printf("DisplayAlert: red, type %lx, num %lx\n", type, alertnum) );
                SetRGB4( &AViewPort, 1, 15, 2, 0 );       /** red **/
            }
            else
            {
                D( printf("DisplayAlert: amber, type %lx, num %lx\n", type, alertnum) );
                SetRGB4( &AViewPort, 1, 15, 10, 2 );      /** amber **/
            }

            /* turn off the sprite without nasty DMA smear.
             * ZZZ: might need to (selectively) do more to
             * prevent smear of attached sprite 1.
             */

	    /*
	     * Note!  Is this safe with the new sprite stuff?
	     */
	    ChangeExtSpriteA( NULL, IBase->SimpleSprite, IBase->BlankSprite,
		TAG_DONE );

            WaitTOF(); OFF_SPRITE;

            /* Now, wait until both buttons are up! */
            while (CheckButtons()) ;

	    /*
	     * Now wait for mouse buttons or timeout before returning...
	     */
	    while (timeout)
	    {
		/*
		 * Wait for a frame to finish before we loop
		 */
		WaitTOF();

		/*
		 * Count our timeout
		 */
		timeout--;

		/*
		 * Flash every FLASH_RATE frames...
		 */
		if (!(timeout & (FLASH_RATE-1)))
		{
		    drawBox(&RasterPort,0,0,width,dheight,1,COMPLEMENT,6,3);
		}

		/*
		 * Check for any buttons...
		 */
		if (i=CheckButtons())
		{
			BoolReturn=i-1;	/* Slime... Set FALSE for RIGHT button */
			timeout=0;
		}
	    }

            /* OK, got a mouse button, wait until button up... */
            while (CheckButtons()) ;

            FreeVPortCopLists(&AViewPort);

            RethinkDisplay();           /* back to ViewLord     */
	    /* RethinkDisplay() does a WaitTOF() */
            FreeCprList( ViewPtr->LOFCprList ); /* get rid of mine      */

	    /* Get rid of the colormap, if any */
	    FreeColorMap( AViewPort.ColorMap );
            FreeBitMap(BitMap);
	}
	else if (type == DEADEND_ALERT)
	{
	    /*
	     * If this was dead-end, we really should crash now
	     * since we did not get the memory to display it!
	     * EXEC will take care of that!
	     */
	    Alert(alertnum);    /* exec will surely restart */
	}

    }
    ReleaseSemaphore( &IBase->ISemaphore[ ALERTLOCK ] );


    return(BoolReturn);
}

@


38.7
log
@I take advantage of the fact that FreeColorMap(NULL) is now safe.
@
text
@d5 1
a5 1
 *  $Id: alert.c,v 38.6 92/05/27 11:49:42 peter Exp Locker: peter $
a80 1
    struct SimpleSprite	SSprite;
d115 1
a115 1
    ObtainSemaphore( &IBase->AlertSemaphore );
d219 3
a221 4
            SSprite.height = NULL_SPRITE_ROWS;
            SSprite.x = SSprite.y = 0;
            SSprite.num = 0;
            ChangeSprite( 0, &SSprite,  IBase->NullSpriteData );
d284 1
a284 1
    ReleaseSemaphore( &IBase->AlertSemaphore );
@


38.6
log
@Better timing for timed-out alerts.
@
text
@d5 1
a5 1
 *  $Id: alert.c,v 38.5 92/05/21 17:34:27 peter Exp $
d272 1
a272 4
            if ( AViewPort.ColorMap )
	    {
		FreeColorMap( AViewPort.ColorMap );
	    }
@


38.5
log
@DisplayAlert() now called timedDisplayAlert().  Now call Alert()
instead of execAlert().
@
text
@d5 1
a5 1
 *  $Id: alert.c,v 38.4 92/05/15 14:02:44 peter Exp Locker: peter $
d47 15
a90 1
    ULONG HangAround=0;
d234 14
a247 3
		/* Loop $00008000 times before flashing */
		HangAround=(HangAround + 1) & 0x00007FFF;
		if (!HangAround)
d253 1
a253 1
		 * Count our timeout (unless no timeout...)
a254 5
		if (timeout != ~0) timeout--;

		/*
		 * Check for any buttons...
		 */		/* Magic CIA read to slow things down */
d294 1
@


38.4
log
@Alert viewports now have colormaps.  This fixes the red recoverable
alert problem.
@
text
@d5 1
a5 1
 *  $Id: alert.c,v 38.3 92/04/09 16:22:45 peter Exp Locker: peter $
d49 1
a49 1
ULONG DisplayAlert(alertnum, string, height, timeout)
d220 2
a221 2
		/* Loop $00004000 times before flashing */
		HangAround=(HangAround + 1) & 0x00003FFF;
d265 1
a265 1
	    execAlert(alertnum);    /* exec will surely restart */
@


38.3
log
@Newly re-written by Mike to be better and to support time-out.
@
text
@d5 1
a5 1
 *  $Id: alert.c,v 38.2 92/04/07 10:53:22 peter Exp $
d95 1
d130 1
d132 1
d137 18
d168 1
d190 1
a190 1
                SetRGB4(&AViewPort, 1, 15, 2, 0);       /** red **/
d195 1
a195 1
                SetRGB4(&AViewPort, 1, 15, 10, 2);      /** amber **/
d220 2
a221 2
		/* Loop $00040000 times before flashing */
		HangAround=(HangAround + 1) & 0x0001FFFF;
d248 1
d251 5
@


38.2
log
@Removed compiled code.
@
text
@a0 1

d5 1
a5 1
 *  $Id: alert.c,v 38.1 92/04/01 15:03:56 peter Exp Locker: peter $
d40 6
a45 2
BOOL ReadLeft();
BOOL ReadRight();
d48 2
a49 2

BOOL DisplayAlert(alertnum, string, height)
d53 1
d57 1
a57 1
    struct	TextFont *fp;
d59 2
a64 1
    struct BitMap BitMap;
a68 4
    /* struct View *ViewPtr; */
    /* struct ViewPort *vppred; */
    /* struct ViewPort *vptail = NULL; */
    /* BOOL   a2024_mode = 0; */
d73 1
a73 1
    WORD i;
d75 2
a76 3
    /* struct Screen *screen; */
    WORD BoolReturn = FALSE;
    WORD  HangAround;
d79 1
d84 1
a84 1
     * 		the Alert, create the copperlist for this 
d89 1
a89 1
     *		much, and add that ViewPort at the top.  
d104 1
a104 2
     * if there isn't enough memory for a recoverable alert,
     * we just tell the caller that the user said "FALSE"
d106 1
a106 4

    /* try to allocate the memory for the structures and the display */
    if (!(plane = (BYTE *)AllocMem(RASSIZE( width, height),
		MEMF_CHIP)))
d108 4
a111 56
	/* assume the answer was no */
	if (type == RECOVERY_ALERT) goto OUT; /* don't guru! */

	/* else ... for deadend alerts */
	execAlert(alertnum);	/* exec will surely restart */
    }

    /* now, fill out these structures with the appropriate data */
    RasterInfo.BitMap = &BitMap;
    RasterInfo.RxOffset = RasterInfo.RyOffset = 0;
    RasterInfo.Next = 0;
    InitBitMap(&BitMap, 1,  width, height);
    BitMap.Planes[0] = plane;

    InitRastPort(&RasterPort);
    RasterPort.BitMap = &BitMap;
    SetRast(&RasterPort, 0);

    /* ViewPtr = &View; (ViewPtr is now a macro) */
    InitView(ViewPtr);
    ViewPtr->ViewPort = &AViewPort;

    InitVPort(&AViewPort);
    AViewPort.DxOffset = AViewPort.DyOffset = 0;
    AViewPort.DWidth =  width;
    AViewPort.DHeight = height;
    AViewPort.Modes = HIRES | SPRITES;
    AViewPort.RasInfo = &RasterInfo;
    MakeVPort(ViewPtr, &AViewPort);

    /* draw the text and graphics to the display memory */
    dheight = height - 1;
    drawBox(&RasterPort, 0, 0,  width, dheight, 1, JAM1, 6, 3);
    fp = ISetFont( &RasterPort, &topazprefs.ifp_TABuff.tab_TAttr );
    do
	{
	x = (*string++) << 8;
	x |= (*string++);
	y = *string++;
	Move(&RasterPort, x, y);
	i = 0;
	workstring = string;
	while (*string++) i++;
	Text(&RasterPort, workstring, i);
	/* the char at string is fetched, string is bumped, char is tested */
	/* if the char string points at now is NULL too, we're done */
	}
    while (*string++);

    ICloseFont( fp );

    /* display it */
    MrgCop( ViewPtr );
    LoadView( ViewPtr );
    WaitTOF();
    ON_DISPLAY;
d113 79
a191 13
    SetRGB4(&AViewPort, 0, 1, 1, 1);

    /* alertnum 0 is what exec alerts do. */
    if (alertnum && (type == DEADEND_ALERT))
    {
	D( printf("DisplayAlert: red, type %lx, num %lx\n", type, alertnum) );
	SetRGB4(&AViewPort, 1, 15, 2, 0);	/** red **/
    }
    else
    {
	D( printf("DisplayAlert: amber, type %lx, num %lx\n", type, alertnum) );
	SetRGB4(&AViewPort, 1, 15, 10, 2);	/** amber **/
    }
d193 4
a196 18
    /* turn off the sprite without nasty DMA smear.
     * ZZZ: might need to (selectively) do more to
     * prevent smear of attached sprite 1.
     */
    SSprite.height = NULL_SPRITE_ROWS;
    SSprite.x = SSprite.y = 0;
    SSprite.num = 0;
    ChangeSprite( 0, &SSprite,  IBase->NullSpriteData );
    WaitTOF(); OFF_SPRITE;

    /* Now, wait until both buttons are up! */
    while (ReadLeft() || ReadRight()) ;
    /* now get one of the buttons */
    HangAround = TRUE;
    /* now, wait for mouse-button activity before returning */
    while (HangAround)
	{
	for (i = ALERT_COUNTDOWN; i; i--)
d198 3
a200 1
	    if (ReadLeft())
d202 1
a202 2
		BoolReturn = TRUE;
		HangAround = FALSE;
d204 10
a213 1
	    if (ReadRight())
d215 2
a216 1
		HangAround = FALSE;
a218 3
	drawBox(&RasterPort, 0, 0,  width, dheight,
	    1, COMPLEMENT, 6, 3);
	}
d220 2
a221 2
    /* OK, got a mouse button, so let's try to return */
    while (ReadLeft() || ReadRight()) ;
d223 1
d225 2
a226 4
    FreeVPortCopLists(&AViewPort);

    RethinkDisplay();		/* back to ViewLord	*/
    FreeCprList( ViewPtr->LOFCprList );	/* get rid of mine	*/
d228 11
a238 1
    FreeMem(plane, RASSIZE( width, height)); 
d240 1
a240 1
OUT:
d242 2
a245 1

@


38.1
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: alert.c,v 38.0 91/06/12 14:13:27 peter Exp Locker: peter $
a40 2
#define MOVEASCREENS	(0)

a117 13
#if MOVEASCREENS
    /* A2024: don't bother, if frontmost screen is hedley	*/
    a2024_mode = AreHedley();

    /* don't try to slide down hedley viewports	*/
    if (type == RECOVERY_ALERT && !a2024_mode)
    {
	LOCKIBASE();
	moveAlertScreens(height + 1);
	UNLOCKIBASE();
    }
#endif

a128 9
#if MOVEASCREENS
    ViewPtr = &IBase->ViewLord;

    if (type == DEADEND_ALERT)
    {
	ViewPtr = &View;
	InitView(ViewPtr);
    }
#else
a131 1
#endif
a162 48
#if MOVEASCREENS
#if 1
    if (type == DEADEND_ALERT) IBase->ViewLord.ViewPort = 0;
    else
    {
	/* start by sorting viewports into screen order	*/
	vppred = (struct ViewPort *) &IBase->ViewLord.ViewPort; /* fake pred*/
	for (screen = IBase->FirstScreen; screen; screen = screen->NextScreen)
	{
	    vppred->Next = &screen->ViewPort;
	    vppred = vppred->Next;
	}
	vppred->Next = NULL;
    }

    /* will link in after vppred, save vptail for restoration */
    vppred = (struct ViewPort *) &IBase->ViewLord.ViewPort; /* fake pred*/
    if (!a2024_mode)	/* no other vps for hedley	*/
    {
	/* behind any screens not dragged up	*/
	while (vppred->Next && (vppred->Next->DyOffset >= 0))
	{
	    vppred = vppred->Next;
	}
    }

    vptail = vppred->Next;		/* save	*/
    vppred->Next = &AViewPort;
    AViewPort.Next = 0;
    /* since it doesn't VPHIDE anyone because it isn't a screen	*/

#else
    if (type == DEADEND_ALERT) IBase->ViewLord.ViewPort = 0;
    /* link in front of A2024 viewports	*/
    if ((!(vppred = IBase->ViewLord.ViewPort)) || a2024_mode)
    {
	installVPort(&AViewPort);
    }
    else	/* jimm: link in behind all screens not dragged up */
    {
	while (vp->Next && (vp->Next->DyOffset >= 0)) vp = vp->Next;
	AViewPort.Next = vp->Next;
	vp->Next = &AViewPort;
    }
#endif

    RethinkDisplay();
#else	/* MOVEASCREENS	*/
a166 1
#endif	/* MOVEASCREENS	*/
a218 11
#if MOVEASCREENS

    LOCKIBASE();
    /* delink ViewPort */
#if 1
    vppred->Next = vptail;	/* I've got it wired	*/
#else
    delinkThing(&AViewPort, &IBase->ViewLord.ViewPort);
#endif
#endif

a220 7
#if  MOVEASCREENS
    /* A2024: don't move them if hedley	*/
    if (!a2024_mode) moveAlertScreens(-(height + 1));

    RethinkDisplay();
    UNLOCKIBASE();
#else
a222 1
#endif
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: alert.c,v 36.19 91/02/12 18:08:22 peter Exp $
d46 1
a47 92
/****** intuition.library/DisplayAlert ***************************************
*
*    NAME
*	DisplayAlert -- Create the display of an alert message.
*
*    SYNOPSIS
*	Response = DisplayAlert( AlertNumber, String, Height )
*	D0			 D0           A0      D1
*
*	BOOL DisplayAlert( ULONG, UBYTE *, WORD );
*
*    FUNCTION
*	Creates an alert display with the specified message.
*
*	If the system can recover from this alert, it's a RECOVERY_ALERT and 
*	this routine waits until the user presses one of the mouse buttons, 
*	after which the display is restored to its original state and a 
*	BOOL value is returned by this routine to specify whether or not 
*	the user pressed the LEFT mouse button.
*   
*	If the system cannot recover from this alert, it's a DEADEND_ALERT
*	and this routine returns immediately upon creating the alert display.
*	The return value is FALSE.
*
*	NOTE: Starting with V33, if Intuition can't get enough
*	memory for a RECOVERY_ALERT, the value FALSE will be returned.
*
*	AlertNumber is a LONG value, historically related to the value
*	sent to the Alert() routine.  But the only bits that are pertinent to
*	this routine are the ALERT_TYPE bit(s).  These bits must be set to
*	either RECOVERY_ALERT for alerts from which the system may safely
*	recover, or DEADEND_ALERT for those fatal alerts.  These states are
*	described in the paragraph above.   There is a third type of
*	alert, the DAISY_ALERT, which is used only by the Exec.
*   
*	The string argument points to an AlertMessage string.  The AlertMessage
*	string is comprised of one or more substrings, each of which is 
*	composed of the following components:
*           - first, a 16-bit x-coordinate and an 8-bit y-coordinate, 
*             describing where on the alert display you want this string
*             to appear.  The y-coordinate describes the offset to the
*             baseline of the text.
*           - then, the bytes of the string itself, which must be
*             null-terminated (end with a byte of zero)
*           - lastly, the continuation byte, which specifies whether or
*             not there's another substring following this one.  If the
*             continuation byte is non-zero, there IS another substring
*             to be processed in this alert message.  If the continuation
*             byte is zero, this is the last substring in the message.
*
*	The last argument, Height, describes how many video lines tall you 
*	want the alert display to be.
*
*	New for V36: Alerts are always rendered in Topaz 8 (80 column font),
*	regardless of the system default font.  Also, RECOVERY_ALERTs are
*	displayed in amber, while DEADEND_ALERTs are still red.  Alerts
*	no longer push down the application screens to be displayed.  Rather,
*	they appear alone in a black display.
*
*	Also new for V36: Alerts block each other out, and input
*	during an alert is deprived of the rest of the system.  Internal
*	input buffers still cause alert clicks to be processed by
*	applications sometimes.
*
*    INPUTS
*	AlertNumber = the number of this alert message.  The only pertinent
*	    bits of this number are the ALERT_TYPE bit(s).  The rest of the
*           number is ignored by this routine.
*	String = pointer to the alert message string, as described above
*	Height = minimum display lines required for your message
*
*    RESULT
*	A BOOL value of TRUE or FALSE.  If this is a DEADEND_ALERT, FALSE
*	is always the return value.  If this is a RECOVERY_ALERT. The return
*	value will be TRUE if the user presses the left mouse button in 
*	response to your message, and FALSE if the user presses the right hand 
*	button is response to your text, or if the alert could not
*	be posted.
*
*    BUGS
*	If the system is worse off than you think, the level of your alert
*	may become DEADEND_ALERT without you ever knowing about it.  This
*	will NOT happen due simply to low memory.  Rather, the alert 
*	display will be skipped, and FALSE will be returned.
*
*	The left and right button clicks satisfying the alerts are
*	unfortunately passed to	the normal applications, because of
*	some internal system input buffering.
*
*    SEE ALSO
*	
*****************************************************************************/
@
