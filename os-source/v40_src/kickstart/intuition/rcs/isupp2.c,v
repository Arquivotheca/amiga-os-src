head     38.5;
branch   ;
access   ;
symbols  V40_85:38.5 V40_71:38.5 V40_68:38.5 V40_65:38.5 V40_47:38.5 V40_45:38.5 V40_37:38.5 V40_34:38.5 V40_29:38.5 V39_2415:38.5 V39_2369:38.5 V39_2339:38.5 V39_2332:38.5 V39_2275:38.5 V39_2256:38.5 V39_2210:38.5 V39_2192:38.5 V39_2084:38.5 V39_2082:38.5 V39_2076:38.5 V39_2073:38.5 V39_2058:38.5 V39_2051:38.5 V39_2031:38.5 V39_2017:38.5 V39_2012:38.5 V39_1985:38.5 V39_1933:38.5 V39_1819:38.4 V39_1805:38.4 V39_1783:38.4 V39_1695:38.4 V39_1621:38.3 V39_1620:38.3 V39_1508:38.3 V39_1485:38.3 V39_1461:38.3 V39_1458:38.3 V39_1456:38.3 V39_1405:38.3 V39_1368:38.3 V39_1360:38.3 V39_1324:38.3 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.2 V39_702:38.2 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.2 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.5
date     92.08.02.12.43.02;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.07.08.15.27.37;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.05.21.17.41.32;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.11.13.39.12;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.09.23.12.27.51;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.25.05;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.5
log
@Now RectFill the horizontal line too.  Took some minor optimizations.
@
text
@

/*** isupp2.c *************************************************************
 *
 *  File isupp2.c	- recent intuition support routines
 *	NEVER called by anything except Input Handler Intuition().
 *
 *  $Id: isupp2.c,v 38.4 92/07/08 15:27:37 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

#include "intuall.h"

#define D(x)	;

stretchIFrame(delta)
struct Point delta;
{
    struct IBox *b = &(fetchIBase()->IFrame);

    b->Width += delta.X;
    b->Height += delta.Y;
}

dragIFrame(delta)
struct Point delta;
{
    struct IBox *b = &(fetchIBase()->IFrame);

    b->Left	+= delta.X;
    b->Top	+= delta.Y;
}

BOOL
isTick(ie)
struct InputEvent *ie;
{
    return ( ie->ie_Class == IECLASS_TIMER );
}

BOOL
isSelectup(ie)
struct InputEvent *ie;
{
    return ((ie->ie_Class == IECLASS_RAWMOUSE) && (ie->ie_Code == SELECTUP));
}

/* Function to draw one of the edges of the window size/drag frame.
 * oldrect and newrect are pointers to rectangles describing the
 * old frame position and the new one, respectively.  Either pointer
 * can be NULL, in which case that rectangle is not drawn (this
 * is useful for getting the frame on or off the screen).
 * 
 * The idea here is to avoid too many dynamic uglies.  We achieve that
 * in a few ways.  First, we erase the old before drawing the new, and
 * second, we do each edge of both rectangles consecutively, so the new
 * rendering happens very soon after the erasing.
 *
 * New to V39, we always use single-pixel thick horizontal lines,
 * and two-pixel thick vertical lines.  We use a RectFill() for
 * the vertical line because it's faster.
 *
 * Note that under V37, Intuition used to verify that the coordinates
 * were clipped against the RastPort extremities.  The test was broken
 * for interleaved bitmaps, since it depended on BytesPerRow.  We use
 * the ClipLayer->rp and SafeRectFill() instead.
 */
drawFrames( RP, oldrect, newrect )
struct RastPort *RP;
struct Rectangle *oldrect, *newrect;
{
    struct Rectangle *rect;
    int edge, pass;

    for ( edge = FRAMEEDGE_TOP; edge <= FRAMEEDGE_RIGHT; edge++ )
    {
	for ( pass = 0; pass < 2; pass++ )
	{
	    rect = oldrect;
	    if ( pass )
	    {
		rect = newrect;
	    }

	    if ( rect )
	    {
		LONG minx, miny, maxx, maxy;
		minx = rect->MinX;
		miny = rect->MinY;
		maxx = rect->MaxX;
		maxy = rect->MaxY;

		if ( edge & FRAMEEDGE_VERTICAL )
		{
		    /* So we don't render the corners twice */
		    miny++;
		    maxy--;

		    if ( edge == FRAMEEDGE_LEFT )
		    {
			/* Take the left edge of the rectangle, and grow it one
			 * pixel to the right.
			 */
			maxx = minx+1;
		    }
		    else /* ( edge == FRAMEEDGE_RIGHT ) */
		    {
			/* Take the right edge of the rectangle, and grow it one
			 * pixel to the left.
			 */
			minx = maxx-1;
		    }
		}
		else
		{
		    if ( edge == FRAMEEDGE_TOP )
		    {
			/* It's the top edge */
			maxy = miny;
		    }
		    else
		    {
			/* It's the bottom edge */
			miny = maxy;
		    }
		}
		SafeRectFill( RP, minx, miny, maxx, maxy );
	    }
	}
    }
}
@


38.4
log
@Deleted drawFrame().  updateFrame() uses SafeRectFill().  frameEdge()
is now called drawFrames() and does one or both frames and all edges.
@
text
@d8 1
a8 1
 *  $Id: isupp2.c,v 38.3 92/05/21 17:41:32 peter Exp Locker: peter $
d87 1
a87 1
 
d90 6
d98 4
a101 1
		    LONG minX, maxX;
d107 1
a107 2
			minX = maxX = rect->MinX;
			maxX++;
d114 1
a114 2
				minX = maxX = rect->MaxX;
			minX--;
a115 1
		    SafeRectFill( RP, minX, rect->MinY+1, maxX, rect->MaxY-1 );
a118 4
		    LONG y;

		    /* We have a horizontal edge.  Assume it's the bottom edge */
		    y = rect->MaxY;
d121 7
a127 2
			/* No, it's the top edge */
			y = rect->MinY;
a128 2
		    Move( RP, rect->MinX, y );
		    Draw( RP, rect->MaxX, y );
d130 1
@


38.3
log
@Window drag-frame is now masked to depth 2.
@
text
@d8 1
a8 1
 *  $Id: isupp2.c,v 38.2 92/02/11 13:39:12 peter Exp Locker: peter $
a18 16
drawFrame()
{
    struct RastPort *RP;
    struct IntuitionBase *IBase = fetchIBase();

    RP = obtainRP(&IBase->ActiveScreen->RastPort, NULL);
    RP->Mask = 3;

    drawBox( RP, IBase->IFrame.Left, IBase->IFrame.Top,
	    IBase->IFrame.Width, IBase->IFrame.Height, 
	    0, COMPLEMENT, 2, 1 );

    freeRP(RP);
}


d51 11
a61 1
/* Function to draw one of the edges of the frame.
d67 3
a69 3
 * were clipped against the RastPort extremities.  However, they should
 * never exceed them anyways.  Also, the test was broken for interleaved
 * bitmaps, since it depended on BytesPerRow.  So the test is gone.
d71 1
a71 1
frameEdge( RP, rect, edge )
d73 1
a73 2
struct Rectangle *rect;
ULONG edge;
d75 4
a78 22
    if ( edge & FRAMEEDGE_VERTICAL )
    {
	LONG minX, maxX;
	if ( edge == FRAMEEDGE_LEFT )
	{
	    /* Take the left edge of the rectangle, and grow it one
	     * pixel to the right.
	     */
	    minX = maxX = rect->MinX;
	    maxX++;
	}
	else /* ( edge == FRAMEEDGE_RIGHT ) */
	{
	    /* Take the right edge of the rectangle, and grow it one
	     * pixel to the left.
	     */
	    minX = maxX = rect->MaxX;
	    minX--;
	}
	RectFill( RP, minX, rect->MinY+1, maxX, rect->MaxY-1 );
    }
    else
d80 1
a80 5
	LONG y;

	/* We have a horizontal edge.  Assume it's the bottom edge */
	y = rect->MaxY;
	if ( edge == FRAMEEDGE_TOP )
d82 44
a125 2
	    /* No, it's the top edge */
	    y = rect->MinY;
a126 2
	Move( RP, rect->MinX, y );
	Draw( RP, rect->MaxX, y );
@


38.2
log
@Frame drawing no longer clips to screen limits.
@
text
@d8 1
a8 1
 *  $Id: isupp2.c,v 38.1 91/09/23 12:27:51 peter Exp Locker: peter $
d25 1
@


38.1
log
@drawBoxClip2() now uses SetABPenDrMd().
@
text
@d8 1
a8 1
 *  $Id: isupp2.c,v 38.0 91/06/12 14:25:05 peter Exp Locker: peter $
a16 7
#define FIX_BEAM_UGLY	(1)

/* ZZZ: maybe put this back in, after you figure out
 * what to do about Hedley, lace, ...
 */
#define DO_VBEAM_WAIT	(FIX_BEAM_UGLY & 0)

d19 1
a19 3
#if (! FIX_BEAM_UGLY )
/* draw highlighted xor Frame */
drawBox2()
d26 1
a26 1
    drawBox(RP, IBase->IFrame.Left, IBase->IFrame.Top,
d28 1
a28 16
	    0, COMPLEMENT, IBase->FrameHThick, IBase->FrameVThick);

    freeRP(RP);
}
#endif

drawBoxClip2()
{
    struct RastPort *RP;
    struct IntuitionBase *IBase = fetchIBase();
    struct Rectangle	rect;

    int	vthick = IBase->FrameVThick;
    int	hthick = IBase->FrameHThick;

    RP = obtainRP(&IBase->ActiveScreen->RastPort, NULL);
a29 20
    SetABPenDrMd( RP, 0, 0, COMPLEMENT );

    boxToRect( &IBase->IFrame, &rect);

    /*	horizontals	*/
    while (vthick--)
    {
	drawHorizClip( RP, rect.MinX, rect.MaxX, rect.MinY++ );

	drawHorizClip( RP, rect.MinX, rect.MaxX, rect.MaxY-- );
    }

    /*	verticals	*/
    while (hthick--)
    {
	drawVertClip( RP, rect.MinY, rect.MaxY, rect.MinX++ );

	drawVertClip( RP, rect.MinY, rect.MaxY, rect.MaxX-- );
    }

a32 30
drawHorizClip( rp, x1, x2, y )
struct RastPort	*rp;
{
    if ( y < 0   || y >= rp->BitMap->Rows ) return;

    x1 = imax( x1, 0 );
    x2 = imin( x2, 8 * rp->BitMap->BytesPerRow - 1 );

    if ( x1 < x2 )
    {
	Move( rp, x1, y );
	Draw( rp, x2, y );
    }
}

drawVertClip( rp, y1, y2, x )
struct RastPort	*rp;
{
    if ( x < 0 || x >= 8 * rp->BitMap->BytesPerRow ) return;
    
    y1 = imax( y1, 0 );
    y2 = imin( y2, rp->BitMap->Rows - 1 );

    if ( y1 < y2 )
    {
	Move( rp, x, y1 );
	Draw( rp, x, y2 );
    }
}

a51 21
#if NOISM
/* jimm: 7/20/86:
 * in default pass-along operation, we find that TICKS and MOUSEMOVE
 * messages--which are handled upfront and special--are sent regardless
 * of their special conditions.
 * this routine does not addEvent these classes.
 */
filterEvent( ie )
struct InputEvent *ie;
{
    if ( ( ie->ie_Class == IECLASS_TIMER) ||
         ((ie->ie_Class==IECLASS_RAWMOUSE) && (ie->ie_Code==IECODE_NOBUTTON))
       )
       return;
    
    /* else */
    addEvent(ie->ie_Class, ie->ie_Code, ie);

}
#endif

d64 52
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d8 1
a8 1
 *  $Id: isupp2.c,v 36.14 90/04/19 15:53:26 jimm Exp $
d54 1
a54 2
    SetAPen( RP, 0 );
    SetDrMd( RP, COMPLEMENT );
@
