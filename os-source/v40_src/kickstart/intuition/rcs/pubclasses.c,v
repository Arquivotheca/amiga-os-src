head     38.3;
branch   ;
access   ;
symbols  V40_85:38.3 V40_71:38.3 V40_68:38.3 V40_65:38.3 V40_47:38.3 V40_45:38.3 V40_37:38.3 V40_34:38.3 V40_29:38.3 V39_2415:38.3 V39_2369:38.3 V39_2339:38.3 V39_2332:38.3 V39_2275:38.3 V39_2256:38.3 V39_2210:38.3 V39_2192:38.3 V39_2084:38.3 V39_2082:38.3 V39_2076:38.3 V39_2073:38.3 V39_2058:38.3 V39_2051:38.3 V39_2031:38.3 V39_2017:38.3 V39_2012:38.3 V39_1985:38.3 V39_1933:38.3 V39_1819:38.2 V39_1805:38.2 V39_1783:38.2 V39_1695:38.2 V39_1621:38.2 V39_1620:38.2 V39_1508:38.2 V39_1485:38.2 V39_1461:38.2 V39_1458:38.2 V39_1456:38.2 V39_1405:38.2 V39_1368:38.2 V39_1360:38.2 V39_1324:38.2 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.1 V39_702:38.1 V39_557:38.1 V39_553:38.1 V39_551:38.1 V39_510:38.1 V39_495:38.1 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.3
date     92.08.03.15.55.44;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.01.15.06.58;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.10.17.14.30.14;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.29.03;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.3
log
@Changed way IClassSemaphore is referenced.
@
text
@
/*** pubclasses.c ************************************************************
 *
 * pubclasses.c -- Intution public class create/manage
 *
 *  $Id: pubclasses.c,v 38.2 92/04/01 15:06:58 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, 1990 Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#if 0
TO DO:
Xadd class list semaphore to IBase
Xinit class list semaphore 
Xadd objectcount, subclasscount to Class
X	bump in rootclass/OM_NEW
X	dec in rootclass/OM_DISPOSE
Xchange MakeClass [tell davidj]
X    change .sfd
X    change intuitionface.asm
Xwrite my own makePublicClass using new MakeClass
Xcreate INLIST Class flag 
add entry points:
X 	RemoveClass[cl]
X 	FreeClass[cl]
X 	lockClassList[]
X 	unlockClassList[]
!!!!!!!! autodocs
Xis FindClass useless without LockClassList/UnlockClassList?
	yep
XNewObject needs to hang onto classlist lock!
Xremove FindClass from sendCompatibleImageMessage [cache imageclass in IBase-]
Xinstall this file.
#endif


#include "intuall.h"
#include <exec/nodes.h>
#include <exec/memory.h>
#include "classusr.h"
#include "classes.h"

#define D(x)	;
#define DMC(x)	;

InitClassList()
{
    NewList( &fetchIBase()->IClassList );
}

struct List	*
lockClassList()
{
    ObtainSemaphore( &fetchIBase()->ISemaphore[ CLASSLOCK ] );
    return ( &fetchIBase()->IClassList );
}

unlockClassList()
{
    ReleaseSemaphore( &fetchIBase()->ISemaphore[ CLASSLOCK ] );
}

/* worthless without lockClassList	*/
Class *
FindClass( classid )
ClassID classid;
{
    Class	*cl, *succ;

    for ( cl = (struct IClass *) lockClassList()->lh_Head;
	succ = (struct IClass *) cl->cl_Dispatcher.h_MinNode.mln_Succ; 
	cl = succ )
    {
	if ( jstreq( cl->cl_ID, classid ) ) 
	{
	    D( printf("found class <%s>, result %lx\n", classid, cl ) ); 
	    unlockClassList();
	    return ( cl );
	}
    }
    D( printf("class <%s> no find\n", classid ));
    unlockClassList();
    return ( NULL );
}
/*** intuition.library/MakeClass ***/

/*
 * Create a class, which might be private (classid = NULL).
 * Pass either ID of public superclass or pointer to private
 * superclass gotten to by a previous call to MakeClass().
 * Caller is responsible for not passing NULL superclass pointer
 * except for my root class.
 * Class is returned "unattached", so you can set up your hook
 * before you take it public.
 *
 * failure conditions:
 *	public class not unique (already exists)
 *	public superclass not found
 *	no mem for class data structure
 */
Class   *
MakeClass( classid, superid, superclass, instsize, flags )
ClassID classid;
Class   *superclass;
UWORD   instsize;
/* flags are for future enhancement	*/
{
    Class   *cl;
    Class   *FindClass();
    ULONG    stubReturn();

    DMC( printf( "MakeClass: <%s> super <%x> instsize %ld \n",
    	classid, superclass, instsize ) );

    /* scream if a public class already exists	*/
    if ( classid && (cl = FindClass( classid )) ) return ( NULL );

    /* get handle on superclass	*/
    if ( superid )	/* public superclass	*/
    {
	lockClassList();
	if ( superclass = FindClass( superid ) )
	{
	    /* bump subclass count, to keep superclass around	*/
	    superclass->cl_SubclassCount++;
	    unlockClassList();
	}
	else	/* public class not found	*/
	{
	    unlockClassList();
	    return ( NULL );
	}
    }
    /* Peter 9-Oct-91: This was being done even for rootclass, which
     * has a superclass of NULL.  This bumped location $28!
     * (Fixed in SetPatch 2.05, and here for ROM 2.05)
     */
    else if (superclass) /* private superclass	*/
    {
	/* bump subclass count, to keep superclass around	*/
	superclass->cl_SubclassCount++;
    }

    /* if I've got a superclass pointer by now, it's safe; not
     * going to go away on me
     */

    if ( cl = (Class *) AllocMem( sizeof *cl, MEMF_PUBLIC | MEMF_CLEAR ) )
    {
	cl->cl_Super      = superclass;
	cl->cl_InstOffset = superclass? 
		superclass->cl_InstOffset + superclass->cl_InstSize:
		0;
	cl->cl_InstSize   = instsize;
	cl->cl_ID	  = classid;	/* ZZZ: copy this in? */

	/* count on 0 init values for:
	 * cl_SubclassCount, cl_ObjectCount, cl_Flags
	 */

	/* initialize Hook to no-op initial value */
	cl->cl_Dispatcher.h_Entry = stubReturn;
	cl->cl_Dispatcher.h_SubEntry = 0;
	cl->cl_Dispatcher.h_Data = (VOID *) 0xDEAD;	/* I don't use it */
    }

    return ( cl );	/* returns unattached class	*/
}


/*
 * Make shared, public, named subclass of public superclass.
 * Be sure class doesn't already exist,
 * also be sure that superclass *does* exist
 * 
 * This is what Intuition uses, and isn't too general.
 *
 * Makes a class for C dispatcher
 */
Class   *
makePublicClass( classid, superid, instsize, dispatch )
ClassID classid;
Class   *superid;
UWORD   instsize;
ULONG	(*dispatch)();
{
    Class	*cl;
    Class	*MakeClass();

    /* get the class created	*/
    if ( cl = MakeClass( classid, superid, NULL, instsize, 0 ) )
    {
	initHook( &cl->cl_Dispatcher, dispatch );
	AddClass( cl );
    }
    return ( cl );
}

#if 0	/* not used by Intuition	*/
/*
 * Make public or private subclass of either private or public class.
 * If myclassid is provided, my class is public.
 * If superid is NULL, then use superclass pointer (to private superclass).
 */
Class   *
makeMyClass( myclassid, superid, superclass, instsize, dispatch )
ClassID   *myclass;
ClassID   *superid;
Class	*superclass;
UWORD   instsize;
ULONG	(*dispatch)();
{
    Class	*cl;
    Class	*MakeClass();

    if ( cl = MakeClass( myclassid, superid, superclass, instsize ) )
    {
	initHook( &cl->cl_Dispatcher, dispatch );
	AddClass( cl );
    }
    return ( cl );
}
#endif

/*
 * Makes public class available for public consumption
 * won't add a class with no name
 */

/*** intuition.library/AddClass ***/

AddClass( cl )
Class	*cl;
{
    if ( cl && cl->cl_ID && ! (cl->cl_Flags & CLF_INLIST) )
    {
	AddHead( lockClassList(), (struct Node *) cl );
	cl->cl_Flags |= CLF_INLIST;
	unlockClassList();
    }
}
/*** intuition.library/RemoveClass ***/


/* 
 * makes a public class unavailble for public consumption.
 * OK to call for class not in list
 * Note that this won't call lockClassList if the class isn't
 * in the list.
 */
RemoveClass( cl )
Class	*cl;
{
    if ( cl && (cl->cl_Flags & CLF_INLIST) )
    {
	lockClassList();
	Remove( cl );
	cl->cl_Flags &= ~CLF_INLIST;
	unlockClassList();
    }
}
/*** intuition.library/FreeClass ***/


/*
 * Frees a class if no objects or subclasses
 * removes if in class list, whether succeeds or not.
 * Returns non-zero (TRUE) if it succeeds.  Otherwise,
 * you can't unload the code which implements the class.
 * Returns TRUE if you pass it a NULL class pointer.
 * Note that this won't call lockClassList if the class isn't
 * in the list.
 *
 * Freeing some subclass of root must, if it's going to
 * fail, must provide for some way to retry, or add the
 * class to the list.
 */
FreeClass( cl )
Class	*cl;
{
    D( printf("FreeClass %lx\n", cl ));
    if ( ! cl ) return ( TRUE );

    RemoveClass( cl );

    D( printf("subclasses: %ld, objects: %ld\n", 
	cl->cl_SubclassCount, cl->cl_ObjectCount ) );

    if ( !( cl->cl_SubclassCount || cl->cl_ObjectCount ) )
    {
	/* one fewer subclasses for my superclass	*/
	if ( cl->cl_Super ) cl->cl_Super->cl_SubclassCount--;
	FreeMem( cl, sizeof *cl );	/*  bye-bye	*/
	return ( TRUE );
    }
    return ( FALSE );
}

@


38.2
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: pubclasses.c,v 38.1 91/10/17 14:30:14 peter Exp Locker: peter $
d57 1
a57 1
    ObtainSemaphore( &fetchIBase()->IClassSemaphore );
d63 1
a63 1
    ReleaseSemaphore( &fetchIBase()->IClassSemaphore );
@


38.1
log
@Fixed bug where location $28 is incremented during MakeClass() of rootclass.
@
text
@d6 1
a6 1
 *  $Id: pubclasses.c,v 38.0 91/06/12 14:29:03 peter Exp Locker: peter $
d88 1
a89 104
/****** intuition.library/MakeClass *************************************
*
*    NAME
*	MakeClass -- Create and initialize a boopsi class. (V36)
*
*    SYNOPSIS
*	iclass = MakeClass( ClassID, SuperClassID, SuperClassPtr,
*	D0                  A0       A1            A2
*		InstanceSize, Flags )
*	        D0            D1
*
*	struct IClass *MakeClass( UBYTE *, UBYTE *, struct IClass *,
*		UWORD, ULONG );
*
*    FUNCTION
*	For class implementors only.
*	
*	This function creates a new public or private boopsi class.
*	The superclass should be defined to be another boopsi class:
*	all classes are descendants of the class "rootclass".
*
*	Superclasses can be public or private.  You provide a name/ID
*	for your class if it is to be a public class (but you must
*	have registered your class name and your attribute ID's with
*	Commodore before you do this!).  For a public class, you would
*	also call AddClass() to make it available after you have
*	finished your initialization.
*
*	Returns pointer to an IClass data structure for your
*	class.  You then initialize the Hook cl_Dispatcher for
*	your class methods code.  You can also set up special data
*	shared by all objects in your class, and point cl_UserData at it. 
*	The last step for public classes is to call AddClass().
*
*	You dispose of a class created by this function by calling
*	FreeClass().
*
*    INPUTS
*	ClassID = NULL for private classes, the name/ID string for public
*		classes
*	SuperClassID = name/ID of your new class's superclass.  NULL if
*		superclass is a private class
*	SuperClassPtr = pointer to private superclass.  Only used if
*		SuperClassID is NULL.  You are required never to provide
*		a NULL superclass.
*	InstanceSize = the size of the instance data that your class's
*		objects will require, beyond that data defined for
*		your superclass's objects.
*	Flags = for future enhancement, including possible additional
*		parameters.  Provide zero for now.
*
*    RESULT
*	Pointer to the resulting class, or NULL if not possible:
*	- no memory for class data structure
*	- public superclass not found
*	- public class of same name/ID as this one already exists
*	
*    NOTES
*
*    EXAMPLE
*	Creating a private subclass of a public class:
*
*    \* per-object instance data defined by my class	*\
*    struct MyInstanceData {
*	ULONG	mid_SomeData;
*    };
*
*    \* some useful table I'll share use for all objects *\
*    UWORD myTable[] = {
*	5, 4, 3, 2, 1, 0
*    };
*
*    struct IClass	*
*    initMyClass()
*    {
*	ULONG __saveds	myDispatcher();
*	ULONG	hookEntry();	\* asm-to-C interface glue	*\
*	struct IClass	*cl;
*	struct IClass	*MakeClass();
*
*	if ( cl =  MakeClass( NULL, 
*		    SUPERCLASSID, NULL,		\* superclass is public      *\
*		    sizeof (struct MyInstanceData),
*		    0 ))
*	{
*	    \* initialize the cl_Dispatcher Hook	*\
*	    cl->cl_Dispatcher.h_Entry = hookEntry;
*	    cl->cl_Dispatcher.h_SubEntry = myDispatcher;
*	    cl->cl_Dispatcher.h_Data = (VOID *) 0xFACE;	\* unused *\
*
*	    cl-cl_UserData = (ULONG) myTable;
*	}
*	return ( cl );
*    }
*
*    BUGS
*	The typedef 'Class' isn't consistently used.  Class pointers
*	used blindly should be APTR, or struct IClass for class implementors.
*
*    SEE ALSO
*	FreeClass(), AddClass(), RemoveClass(), NewObject(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
d233 1
a234 38
/****** intuition.library/AddClass *************************************
*
*    NAME
*	AddClass -- Make a public class available (V36)
*
*    SYNOPSIS
*	AddClass( Class )
*	          A0
*
*	VOID AddClass( struct IClass * );
*
*    FUNCTION
*	Adds a public boopsi class to the internal list of classes available
*	for public consumption.
*	
*	You must call this function after you call MakeClass().
*
*    INPUTS
*	Class = pointer returned by MakeClass()
*
*    RESULT
*	Nothing returned.
*	
*    NOTES
*
*    BUGS
*	Although there is some protection against creating classes
*	with the same name as an existing class, this function
*	does not do any checking or other dealings with like-named
*	classes.  Until this is rectified, only officially registered
*	names can be used for public classes, and there is no
*	"class replacement" policy in effect.
*
*    SEE ALSO
*	MakeClass(), FreeClass(), RemoveClass()
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*****************************************************************************/
d245 1
a246 34
/****** intuition.library/RemoveClass *************************************
*
*    NAME
*	RemoveClass -- Make a public boopsi class unavailable. (V36)
*
*    SYNOPSIS
*	RemoveClass( classPtr )
*		     A0
*
*	VOID RemoveClass( struct IClass * );
*
*    FUNCTION
*	Makes a public class unavailable for public consumption.
*	It's OK to call this function for a class which is not
*	yet in the internal public class list, or has been
*	already removed.
*	
*    INPUTS
*	ClassPtr = pointer to *public* class created by MakeClass(),
*		may be NULL.
*
*    RESULT
*	None.
*	
*    NOTES
*
*    BUGS
*
*    SEE ALSO
*	MakeClass(), FreeClass(), AddClass()
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*	
*****************************************************************************/
d265 1
a266 67
/****** intuition.library/FreeClass *************************************
*
*    NAME
*	FreeClass -- Frees a boopsi class created by MakeClass(). (V36)
*
*    SYNOPSIS
*	success = FreeClass( ClassPtr )
*	D0                   A0
*
*	BOOL FreeClass( struct IClass * );
*
*    FUNCTION
*	For class implementors only.
*
*	Tries to free a boopsi class created by MakeClass().  This
*	won't always succeed: classes with outstanding objects or
*	with subclasses cannot be freed.  You cannot allow the code
*	which implements the class to be unloaded in this case.
*
*	For public classes, this function will *always* remove
*	the class (see RemoveClass() ) making it unavailable, whether
*	it succeeds or not.
*	
*	If you have a dynamically allocated data for your class (hanging
*	off of cl_UserData), try to free the class before you free the
*	user data, so you don't get stuck with a half-freed class.
*
*    INPUTS
*	ClassPtr - pointer to a class created by MakeClass().
*
*    RESULT
*	Returns FALSE if the class could not be freed.  Reasons include,
*	but will not be limited to, having non-zero cl_ObjectCount or
*	cl_SubclassCount.
*
*	Returns TRUE if the class could be freed.
*
*	Calls RemoveClass() for the class in either case.
*	
*    EXAMPLE
*	Freeing a private class with dynamically allocated user data:
*
*	freeMyClass( cl )
*	struct IClass	*cl;
*	{
*	    struct MyPerClassData	*mpcd;
*
*	    mpcd = (struct MyPerClassData *) cl->cl_UserData;
*	    if ( FreeClass( cl ) )
*	    {
*		FreeMem( mpcd, sizeof mpcd );
*		return ( TRUE );
*	    }
*	    else
*	    {
*		return ( FALSE );
*	    }
*	}
*
*    BUGS
*
*    SEE ALSO
*	MakeClass(),
*	Document "Basic Object-Oriented Programming System for Intuition"
*	and the "boopsi Class Reference" document.
*	
*****************************************************************************/
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: pubclasses.c,v 1.7 91/02/12 18:17:51 peter Exp $
d240 5
a244 1
    else	/* private superclass	*/
@
