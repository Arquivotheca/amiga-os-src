head     38.11;
branch   ;
access   ;
symbols  V40_85:38.11 V40_71:38.11 V40_68:38.11 V40_65:38.11 V40_47:38.11 V40_45:38.11 V40_37:38.11 V40_34:38.11 V40_29:38.11 V39_2415:38.11 V39_2369:38.10 V39_2339:38.10 V39_2332:38.10 V39_2275:38.10 V39_2256:38.10 V39_2210:38.10 V39_2192:38.10 V39_2084:38.10 V39_2082:38.10 V39_2076:38.10 V39_2073:38.10 V39_2058:38.10 V39_2051:38.10 V39_2031:38.10 V39_2017:38.10 V39_2012:38.10 V39_1985:38.10 V39_1933:38.10 V39_1819:38.10 V39_1805:38.10 V39_1783:38.10 V39_1695:38.10 V39_1621:38.9 V39_1620:38.9 V39_1508:38.9 V39_1485:38.9 V39_1461:38.9 V39_1458:38.9 V39_1456:38.9 V39_1405:38.8 V39_1368:38.8 V39_1360:38.8 V39_1324:38.8 V39_1147:38.8 V39_1143:38.8 V39_1141:38.8 V39_1120:38.8 V39_1116:38.8 V39_1104:38.8 V39_1100:38.8 V39_1078:38.8 V39_1073:38.8 V39_757:38.6 V39_702:38.6 V39_557:38.3 V39_553:38.3 V39_551:38.3 V39_510:38.3 V39_495:38.3 V39_416:38.1 V39_383:38.1 V39_371:38.1 V39_336:38.1 V39_323:38.1 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.11
date     93.01.14.14.26.13;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.07.07.15.24.42;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.06.03.17.39.02;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.04.07.17.58.59;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.04.02.21.41.52;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.21.14.55.21;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.19.15.55.48;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.19.10.55.13;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.20.12.18.18;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.17.17.18.23;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.01.22.16.45.34;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.32.49;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.11
log
@Added itMODIFYPROP.  Fixed bug where IBase->ActiveRequester could be
left NULL or invalid if the user activated a window with a requester
by clicking on a system or requester gadget.
@
text
@/*** srequester.c *********************************************************
 *
 * sRequester state processing
 *
 *  $Id: srequester.c,v 38.10 92/07/07 15:24:42 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)		;
#define DZOOM(x)	;

/* state sRequester
 *
 * global data used:
 *	ActiveWindow
 *
 * local state data:
 *	ActiveRequester
 */


/* transition startRequester()
 * called by:
 *	sIdleWindow	- itSELECTDOWN
 *
 *     find window with requester in it
 *	sIdleWindow	- itACTIVATE
 *	sIdleWindow	- itCLEARREQ
 *	sIdleWindow	- DMR abort (timer, cleardmr, mousemove)
 *	sIdleWindow	- itCLOSEWIN
 *	sIdleWindow	- itSETREQ
 *	sRequester	- itSETREQ (new req)
 * DMR:
 *	sDMRTimeout	- itMENUDOWN (in time)
 *
 * with state data:
 *	ActiveWindow->FirstRequest != NULL
 * WARNING: and of course ActiveWindow != NULL
 * description:
 */
startRequester()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Layer		*hitlayer;
    int				returnRequesterGadget();

    D( printf("transition function startRequester, cstate: %ld\n", 
	IBase->CurrentState ));

    /* set ActiveRequester, if needed for anything */
    IBase->ActiveRequester = IBase->ActiveWindow->FirstRequest;

    /* process my own gadget hits.  hitGadgets() will only
     * allow hits to gadgets in the requester itself, or system
     * gadgets except CLOSE
     */
    if ( IT->it_Command == itSELECTDOWN )
    {
	hitUpfront( &hitlayer );	/* calling a second time */

	if ( hitGadgets( hitlayer ) )
	{
	    startGadget( returnRequesterGadget );
	    return;
	}
	else if ( TESTFLAG( IBase->ActiveWindow->FirstRequest->Flags, NOISYREQ ) )
	{
	    /* Peter 8-Aug-90: send SELECTDOWN to NOISYREQ people */
	    activeEvent( IE->ie_Class, IE->ie_Code );
	}
    }
    IBase->CurrentState = sRequester;
}

/*
 * passed to:
 *	startGadget	- itENDGADGET?
 *	handle ENDGADGET deal: see sgadget.c ghResult()
 *	2 means ENDGADGET
 * rely on:
 *	ActiveGadget
 *	relverify parameter passed by sGadget if the
 *	 ENDGADGET should be processed.
 */
returnRequesterGadget( endrequest )
{
    struct IntuitionBase	*IBase = fetchIBase();

    /* ENDGADGET */
    if ( endrequest == 2 )
    {
	IEndRequest( IBase->ActiveWindow, IBase->ActiveWindow->FirstRequest );
	startIdleWindow();
	return;
    }

    IBase->CurrentState = sRequester;
}

/*
 * passed to:
 *	startScreenDrag	- itMETADRAG
 */
returnRequesterSDrag()
{
    /* assuming that ActiveRequester still valid */
    fetchIBase()->CurrentState = sRequester;
}

/*
 * state dispatcher
 * state transitions called:
 *	startIdleWindow() - itSELECTDOWN
 *	startIdleWindow() - itACTIVATEWIN
 *	startIdleWindow() - itCLOSEWIN
 *	startIdleWindow() - itCLEARREQ
 *
 *	
 */
dRequester()
{
    UWORD			returnRequesterZoom();
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;

    /* ZZZ: maybe group all noisyreq conditionals
     * in another switch in the default: case for this one
     */
    switch ( IT->it_Command )
    {
    case itSELECTDOWN:	/* start idlewindow */
    	startIdleWindow();	/* not passed along in V33 */
	return;

    /* NOISYREQ input passed along */
    case itMOUSEMOVE:	/* pass input if WFLG_REPORTMOUSE */
	doDefault();

	/* NOISYREQs may send mouse message to active window */
	/* Peter 15-Nov-90:  non-NOISYREQs got MOUSEMOVEs in 1.3
	 * Amazing.
	 */
	if ( TESTFLAG( IBase->ActiveWindow->Flags, REPORTMOUSE ) )
	{
	    sendWindowMouse();
	}
	return;


    case itMENUDOWN:	/* pass input if NOISYREQ */
    case itMENUUP:	/* pass input if NOISYREQ */
    case itSELECTUP:	/* pass input if NOISYREQ */
    case itRAWKEY:	/* pass input if NOISYREQ */
	if ( TESTFLAG( IBase->ActiveRequester->Flags, NOISYREQ ) )
	{
	    activeEvent( IE->ie_Class, IE->ie_Code );
	}
    	return;

    case itACTIVATEWIN:	/* start idlewindow */
    	startIdleWindow();
	return;

    case itACTIVATEGAD:	/* allow only if gadget's in this requester */
	/* if it's this requester, sure, go ahead. */
	if ( IBase->ActiveRequester ==
		(struct Requester *) IT->it_SubCommand )
	{
	    startGadget( returnRequesterGadget );
	}
	return;

    case itSETREQ:	/* do it, maybe startRequester */
	doDefault();

	if ( itwindow == IBase->ActiveWindow ) {
	    startRequester();
	}
	return;

    case itCLOSEWIN:	/* delink window and make parent active */
    case itCLEARREQ:	/* return to requester state if not last requester */
	doDefault();
	if ( itwindow == IBase->ActiveWindow ) {
	    startIdleWindow();
	}
    	return;

    case itMETADRAG:	/* do it */
	startScreenDrag( returnRequesterSDrag );
	return;

    case itZOOMWIN:	/* do default, maybe with SIZEVERIFY */
	/* it_SubCommand specifies a user-initiated zoom, meaning
	 * that we need a SIZEVERIFY session.
	 */
	if ( IT->it_SubCommand )
	{
	    DZOOM( printf("sidlewindow starting sizev for itZOOM\n"));
	    startVerify( returnRequesterZoom, itwindow, SIZEVERIFY, 0 );
	}
	else
	{
	    DZOOM( printf("sidlewindow got non-verify zoom\n"));
	    doDefault();
	}
	return;

    case itCHANGESCBUF:	/* fail: app should never double-buffer with requesters */
	IT->it_Error = 1;
	return;

    case itTIMER:	/* check for gadget help, then do default */
	gadgetHelpTimer();
	/* FALL THROUGH!!! */

    /*** default processing	***/
#if 0
    case itDISKCHANGE:	/* do default */

    case itOPENWIN:	/* do default */
    case itVERIFY:	/* do default */
    case itREMOVEGAD:	/* do default */
    case itSETMENU:	/* do default */
    case itCLEARMENU:	/* do default */
    case itCHANGEWIN:	/* do default */
    case itDEPTHWIN:	/* do default */
    case itMOVESCREEN:	/* do default */
    case itDEPTHSCREEN:	/* do default */
    case itOPENSCREEN:	/* do default */
    case itCLOSESCREEN:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itCOPYSCBUF:	/* do default (would like to defer, but fear deadlock) */
    case itSETPOINTER:	/* do default */
    case itGADGETMETHOD:/* do default */
    case itMODIFYPROP:	/* do default */
#endif
    default:		/* itDEFAULT: do default */
	doDefault();
    }
}


/*
 * almost the same as returnIdleZoom()
 *
 * Making the (safe) assumption that the
 * window which had a zoom gadget selection
 * is still the active window, sVerify doesn't
 * allow change of activation, and as sGadget morphs
 * the zoom gadget selectup token, it gets processed immediately
 * afterward
 */
UWORD
returnRequesterZoom( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();

    if ( okcode != OKOK )
    {
	/*
	 * if aborted (or timeout), send "verify clear"
	 * ZZZ: would need to change for "MOVEVERIFY"
	 */
	activeEvent( IECLASS_SIZEWINDOW, 0 );
    }
    else
    {
	/* Peter 4-Dec-90:  TRUE parameter indicates that this zoom
	 * resulted from user-interaction.  In particular, a NEWSIZE
	 * is required if the window has SIZEVERIFY set.
	 */
	IZoomWindow( IBase->ActiveWindow, TRUE );
    }

    IBase->CurrentState = sRequester;
}
@


38.10
log
@itGADGETMETHOD does default.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.9 92/06/03 17:39:02 peter Exp Locker: peter $
d57 3
a78 4

    /* set ActiveRequester, if needed for anything */

    IBase->ActiveRequester = IBase->ActiveWindow->FirstRequest;
d244 1
@


38.9
log
@Reworked gadget-help to not require pressing help.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.8 92/04/07 17:58:59 peter Exp Locker: peter $
d244 1
@


38.8
log
@Handles itSETPOINTER token.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.7 92/04/02 21:41:52 peter Exp Locker: peter $
a163 15
	    if ( ( IT->it_Command == itRAWKEY ) &&
		TESTFLAG( IBase->ActiveWindow->MoreFlags, WMF_GADGETHELP ) &&
		( IE->ie_Code == KEYCODE_HELP ) )
	    {
		/* Test for gadget help.  This routine takes care of
		 * everything, including sending the GADGETHELP
		 * message.
		 */
		if ( gadgetHelp() )
		{
		    /* A gadget sent help, so swallow the keystroke */
		    return;
		}
		/* else fall through and send a boring help keystroke */
	    }
d221 4
a226 1
    case itTIMER:	/* do default */
@


38.7
log
@Supports gadget help.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.6 92/03/21 14:55:21 peter Exp Locker: peter $
d255 1
@


38.6
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.5 92/03/19 15:55:48 peter Exp Locker: peter $
d164 15
@


38.5
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.4 92/03/19 10:55:13 peter Exp Locker: peter $
a233 1
    case itATTACHSCREEN:	/* do default */
@


38.4
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.3 92/02/20 12:18:18 peter Exp Locker: peter $
d234 1
@


38.3
log
@Now handles itCOPYSCBUF token.  Added missing "case" word (ugh).
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.2 92/02/17 17:18:23 peter Exp Locker: peter $
d241 1
a241 1
    default:
@


38.2
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token fails.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.1 92/01/22 16:45:34 peter Exp Locker: peter $
d217 1
a217 1
    itCHANGESCBUF:	/* fail: app should never double-buffer with requesters */
d239 1
@


38.1
log
@Now lets hitGadgets() block the close gadget, instead of doing it by hand.
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 38.0 91/06/12 14:32:49 peter Exp Locker: peter $
d139 1
a139 1
    case itSELECTDOWN:
d144 1
a144 1
    case itMOUSEMOVE:
d158 4
a161 4
    case itMENUDOWN:
    case itMENUUP:
    case itSELECTUP:
    case itRAWKEY:
d168 1
a168 1
    case itACTIVATEWIN:
d172 1
a172 1
    case itACTIVATEGAD:
d181 1
a181 1
    case itSETREQ:
d197 1
a197 1
    case itMETADRAG:
d201 1
a201 1
    case itZOOMWIN:
d217 4
d223 2
a224 2
    case itTIMER:
    case itDISKCHANGE:
d226 13
a238 14
    case itOPENWIN:
    case itVERIFY:
    case itREMOVEGAD:
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itDEPTHWIN:
    case itMOVESCREEN:
    case itDEPTHSCREEN:
    case itBORDERPATROL:
    case itOPENSCREEN:
    case itCLOSESCREEN:
    case itNEWPREFS:
    case itMODIFYIDCMP:
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: srequester.c,v 1.11 90/12/05 17:18:06 peter Exp $
d57 3
a59 3
    /* process my own gadget hits, which will either be
     * gadgets in the requester itself, or SYSGADGETs
     * except CLOSE
d65 1
a65 2
	if ( hitGadgets( hitlayer )  &&
	    (IBase->ActiveGadget->GadgetType & 0xF0 ) != CLOSE )
@
