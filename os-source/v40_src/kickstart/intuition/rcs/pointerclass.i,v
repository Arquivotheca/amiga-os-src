head     39.5;
branch   ;
access   ;
symbols  V40_85:39.5 V40_71:39.5 V40_68:39.5 V40_65:39.5 V40_47:39.5 V40_45:39.5 V40_37:39.5 V40_34:39.5 V40_29:39.5 V39_2415:39.4 V39_2369:39.4 V39_2339:39.3 V39_2332:39.3 V39_2275:39.3 V39_2256:39.3 V39_2210:39.3 V39_2192:39.3 V39_2084:39.3 V39_2082:39.3 V39_2076:39.3 V39_2073:39.3 V39_2058:39.3 V39_2051:39.3 V39_2031:39.3 V39_2017:39.3 V39_2012:39.3 V39_1985:39.3 V39_1933:39.3 V39_1819:39.3 V39_1805:39.3 V39_1783:39.3 V39_1695:39.3 V39_1621:39.3 V39_1620:39.3 V39_1508:39.3 V39_1485:39.2 V39_1461:39.2 V39_1458:39.2 V39_1456:39.2 V39_1405:39.1 V39_1368:39.1 V39_1360:39.0 V39_1324:39.0 V39_1147:39.0 V39_1143:39.0 V39_1141:39.0 V39_1120:39.0 V39_1116:39.0;
locks    ; strict;
comment  @@;


39.5
date     93.02.15.19.02.36;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     93.01.08.14.48.39;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.06.22.13.02.45;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.02.16.40.08;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.27.16.07.19;  author peter;  state Exp;
branches ;
next     39.0;

39.0
date     92.04.14.16.38.48;  author peter;  state Exp;
branches ;
next     ;


desc
@New-style pointer header files.
@


39.5
log
@Changed 3.01 to V40.
@
text
@    IFND INTUITION_POINTERCLASS_I
INTUITION_POINTERCLASS_I SET 1
**
** $Id: pointerclass.i,v 39.4 93/01/08 14:48:39 peter Exp Locker: peter $
**
**  'boopsi' pointer class interface
**
**  (C) Copyright 1992 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

	IFND EXEC_TYPES_I
	INCLUDE "exec/types.i"
	ENDC

	IFND INTUITION_INTUITION_I
	INCLUDE "intuition/intuition.i"
	ENDC

	IFND UTILITY_TAGITEM_I
	INCLUDE "utility/tagitem.i"
	ENDC


* The following tags are recognized at NewObject() time by
* pointerclass:
*
* POINTERA_BitMap (struct BitMap *) - Pointer to bitmap to
*	get pointer imagery from.  Bitplane data need not be
*	in chip RAM.
* POINTERA_XOffset (LONG) - X-offset of the pointer hotspot.
* POINTERA_YOffset (LONG) - Y-offset of the pointer hotspot.
* POINTERA_WordWidth (ULONG) - designed width of the pointer in words
* POINTERA_XResolution (ULONG) - one of the POINTERXRESN_ flags below
* POINTERA_YResolution (ULONG) - one of the POINTERYRESN_ flags below
*

POINTERA_Dummy		EQU	(TAG_USER+$39000)

POINTERA_BitMap		EQU	(POINTERA_Dummy+$01)
POINTERA_XOffset	EQU	(POINTERA_Dummy+$02)
POINTERA_YOffset	EQU	(POINTERA_Dummy+$03)
POINTERA_WordWidth	EQU	(POINTERA_Dummy+$04)
POINTERA_XResolution	EQU	(POINTERA_Dummy+$05)
POINTERA_YResolution	EQU	(POINTERA_Dummy+$06)

* These are the choices for the POINTERA_XResolution attribute which
* will determine what resolution pixels are used for this pointer.
*
* POINTERXRESN_DEFAULT (ECS-compatible pointer width)
*	= 70 ns if SUPERHIRES-type mode, 140 ns if not
*
* POINTERXRESN_SCREENRES
*	= Same as pixel speed of screen
*
* POINTERXRESN_LORES (pointer always in lores-like pixels)
*	= 140 ns in 15kHz modes, 70 ns in 31kHz modes
*
* POINTERXRESN_HIRES (pointer always in hires-like pixels)
*	= 70 ns in 15kHz modes, 35 ns in 31kHz modes
*
* POINTERXRESN_140NS (pointer always in 140 ns pixels)
*	= 140 ns always
*
* POINTERXRESN_70NS (pointer always in 70 ns pixels)
*	= 70 ns always
*
* POINTERXRESN_35NS (pointer always in 35 ns pixels)
*	= 35 ns always

POINTERXRESN_DEFAULT	EQU	0
POINTERXRESN_140NS	EQU	1
POINTERXRESN_70NS	EQU	2
POINTERXRESN_35NS	EQU	3

POINTERXRESN_SCREENRES	EQU	4
POINTERXRESN_LORES	EQU	5
POINTERXRESN_HIRES	EQU	6

* These are the choices for the POINTERA_YResolution attribute which
* will determine what vertical resolution is used for this pointer.
*
* POINTERYRESN_DEFAULT
*	= In 15 kHz modes, the pointer resolution will be the same
*	  as a non-interlaced screen.  In 31 kHz modes, the pointer
*	  will be doubled vertically.  This means there will be about
*	  200-256 pointer lines per screen.
*
* POINTERYRESN_HIGH
* POINTERYRESN_HIGHASPECT
*	= Where the hardware/software supports it, the pointer resolution
*	  will be high.  This means there will be about 400-480 pointer
*	  lines per screen.  POINTERYRESN_HIGHASPECT also means that
*	  when the pointer comes out double-height due to hardware/software
*	  restrictions, its width would be doubled as well, if possible
*	  (to preserve aspect).
*
* POINTERYRESN_SCREENRES
* POINTERYRESN_SCREENRESASPECT
*	= Will attempt to match the vertical resolution of the pointer
*	  to the screen's vertical resolution.  POINTERYRESN_SCREENASPECT also
*	  means that when the pointer comes out double-height due to
*	  hardware/software restrictions, its width would be doubled as well,
*	  if possible (to preserve aspect).

POINTERYRESN_DEFAULT		EQU	0
POINTERYRESN_HIGH		EQU	2
POINTERYRESN_HIGHASPECT		EQU	3
POINTERYRESN_SCREENRES		EQU	4
POINTERYRESN_SCREENRESASPECT	EQU	5


* Compatibility note:
*
* The AA chipset supports variable sprite width and resolution, but
* the setting of width and resolution is global for all sprites.
* When no other sprites are in use, Intuition controls the sprite
* width and sprite resolution for correctness based on pointerclass
* attributes specified by the creator of the pointer.  Intuition
* controls sprite resolution with the VTAG_DEFSPRITERESN_SET tag
* to VideoControl().  Applications can override this on a per-viewport
* basis with the VTAG_SPRITERESN_SET tag to VideoControl().
*
* If an application uses a sprite other than the pointer sprite,
* Intuition will automatically regenerate the pointer sprite's image in
* a compatible width.  This might involve BitMap scaling of the imagery
* you supply.
*
* If any sprites other than the pointer sprite were obtained with the
* old GetSprite() call, Intuition assumes that the owner of those
* sprites is unaware of sprite resolution, hence Intuition will set the
* default sprite resolution (VTAG_DEFSPRITERESN_SET) to ECS-compatible,
* instead of as requested by the various pointerclass attributes.
*
* No resolution fallback occurs when applications use ExtSprites.
* Such applications are expected to use VTAG_SPRITERESN_SET tag if
* necessary.
*
* NB:  Under release V39, only sprite width compatibility is implemented.
* Sprite resolution compatibility was added for V40.

	ENDC
@


39.4
log
@Fixed minor typo.  Added note on compatibility fallback.
@
text
@d4 1
a4 1
** $Id: pointerclass.i,v 39.3 92/06/22 13:02:45 peter Exp Locker: peter $
d139 2
a140 2
* NB:  Under release 3.0, only sprite width compatibility is implemented.
* Sprite resolution compatibility was added for 3.01.
@


39.3
log
@Noted that bitplane data need not be in chip.
@
text
@d4 1
a4 1
** $Id: pointerclass.i,v 39.2 92/06/02 16:40:08 peter Exp Locker: peter $
d101 1
a101 1
*	  to the screen's vertical resolution.  POINTERYRESN_HIGHASPECT also
d111 30
@


39.2
log
@Renamed XResolution tags/flags.  Added YResolution tags/flags.
@
text
@d4 1
a4 1
** $Id: pointerclass.i,v 39.1 92/05/27 16:07:19 peter Exp Locker: peter $
d29 2
a30 1
*	get pointer imagery from
@


39.1
log
@Minor doc update.
@
text
@d4 1
a4 1
** $Id: pointerclass.i,v 39.0 92/04/14 16:38:48 peter Exp Locker: peter $
d33 2
a34 1
* POINTERA_Resolution (ULONG) - one of the POINTERRESN_ flags below
d43 2
a44 1
POINTERA_Resolution	EQU	(POINTERA_Dummy+$05)
d46 1
a46 1
* These are the choices for the POINTERA_Resolution attribute which
d49 1
a49 1
* POINTERRESN_DEFAULT (ECS-compatible pointer width)
d52 1
a52 1
* POINTERRESN_SCREENRES
d55 1
a55 1
* POINTERRESN_LORES (pointer always in lores-like pixels)
d58 1
a58 1
* POINTERRESN_HIRES (pointer always in hires-like pixels)
d61 1
a61 1
* POINTERRESN_140NS (pointer always in 140 ns pixels)
d64 1
a64 1
* POINTERRESN_70NS (pointer always in 70 ns pixels)
d67 1
a67 1
* POINTERRESN_35NS (pointer always in 35 ns pixels)
d70 4
a73 4
POINTERRESN_DEFAULT	EQU	0
POINTERRESN_140NS	EQU	1
POINTERRESN_70NS	EQU	2
POINTERRESN_35NS	EQU	3
d75 35
a109 3
POINTERRESN_SCREENRES	EQU	4
POINTERRESN_LORES	EQU	5
POINTERRESN_HIRES	EQU	6
@


39.0
log
@Initial check-in.
@
text
@d4 1
a4 1
** $Id: $
d28 6
a33 5
* POINTERA_BitMap - Pointer to bitmap to get pointer imagery from
* POINTERA_XOffset - X-offset of the pointer hotspot.
* POINTERA_YOffset - Y-offset of the pointer hotspot.
* POINTERA_WordWidth - designed width of the pointer in words
* POINTERA_Resolution - one of the POINTERRESN_ flags below
@
