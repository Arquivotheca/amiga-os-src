head     38.9;
branch   ;
access   ;
symbols  V40_85:38.9 V40_71:38.9 V40_68:38.9 V40_65:38.9 V40_47:38.9 V40_45:38.9 V40_37:38.9 V40_34:38.9 V40_29:38.9 V39_2415:38.9 V39_2369:38.8 V39_2339:38.8 V39_2332:38.8 V39_2275:38.8 V39_2256:38.8 V39_2210:38.8 V39_2192:38.8 V39_2084:38.8 V39_2082:38.8 V39_2076:38.8 V39_2073:38.8 V39_2058:38.8 V39_2051:38.8 V39_2031:38.8 V39_2017:38.8 V39_2012:38.8 V39_1985:38.8 V39_1933:38.8 V39_1819:38.8 V39_1805:38.8 V39_1783:38.8 V39_1695:38.8 V39_1621:38.7 V39_1620:38.7 V39_1508:38.7 V39_1485:38.7 V39_1461:38.7 V39_1458:38.7 V39_1456:38.7 V39_1405:38.6 V39_1368:38.6 V39_1360:38.6 V39_1324:38.6 V39_1147:38.6 V39_1143:38.6 V39_1141:38.6 V39_1120:38.6 V39_1116:38.6 V39_1104:38.6 V39_1100:38.6 V39_1078:38.6 V39_1073:38.6 V39_757:38.5 V39_702:38.5 V39_557:38.2 V39_553:38.2 V39_551:38.2 V39_510:38.2 V39_495:38.2 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.9
date     93.01.14.14.25.52;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.07.07.15.22.50;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.06.02.14.55.39;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.04.07.17.57.21;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.03.21.14.53.54;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.03.19.15.54.26;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.03.19.10.55.41;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.20.12.17.07;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.02.17.17.17.07;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.31.12;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.9
log
@Added itMODIFYPROP.
@
text
@/*** sdmrtimeout.c ************************************************************
 *
 *  state processing
 *
 *  $Id: sdmrtimeout.c,v 38.8 92/07/07 15:22:50 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)	;

/* state sDMRTimeout
 *
 * global data used:
 *
 * local state data:
 *	timeout counter/original
 */


/* transition startDMRTimeout()
 * called by:
 *	sMenu	- startMenu
 * with state data:
 * description:
 *	proceeds with first part of menu processing:
 *	-shows menu bar
 *	-if a double-menu requester exists, will do timeout
 *	 processing for that.
 */
startDMRTimeout( dmrreturn, okcode )
UWORD	(*dmrreturn)();
{
    struct IntuitionBase	*IBase = fetchIBase();

    D( printf("transition function startDMRTimeout, cstate: %ld\n", 
	IBase->CurrentState ));

    /* always start out by showing him the menu strip,
     * even if there is no DMR.  We promise to have the
     * menu strip ship-shape before we return
     * to menu state: visible if we want menus (OKOK),
     * invisible if we want DMR or cancel menus
     *
     * if the MENUVERIFY has aborted, don't show the strip:
     * we're either bailing out of menus or going straight
     * for the DMR double click (second click).
     */
    if ( okcode == OKOK )
    {
	showMStrip( IBase->ActiveWindow );
	CLEARFLAG( IBase->Flags, RELEASED );
    }
    else
    {
	SETFLAG( IBase->Flags, RELEASED );
    }
    
    if ( ! IBase->ActiveWindow->DMRequest )
    {
	D( printf("dmrtimeout no dmr\n") );
	(*dmrreturn)( OKOK );	/* go ahead with menus (or abort) */
	return;
    }

    /* init timeoutDMR tooFarDMR values */
    IBase->StartSecs = IBase->Seconds;
    IBase->StartMicros = IBase->Micros;
    currMouse( IBase->ActiveWindow, &IBase->FirstPt );


    IBase->DMRReturn = dmrreturn;
    IBase->CurrentState = sDMRTimeout;
}


/*
 * state dispatcher
 *   not reached unless there is double-menu requester around
 * state transitions called:
 *	startRequester
 *	startIdleWindow
 */
dDMRTimeout()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;

    switch ( IT->it_Command )
    {
    /* second click heard, in time, go for DMR	*/
    case itMENUDOWN:	/* Do DMR */
	/* menu strip is not painted now */
	D( printf("dmrtimeout two clicks\n") );
    	(*IBase->DMRReturn)( OKCANCEL );	/* no menus, do dmr */
	return;

    case itMENUUP:	/* Not much */
	SETFLAG( IBase->Flags, RELEASED );
	removeMStrip( IBase->ActiveWindow->WScreen );
	return;		/* ... and keep waiting */

    /* abort conditions: timeout and "move too far" */
    case itTIMER:	/* do default, then maybe abort */
    case itMOUSEMOVE:	/* do default, then maybe abort */

    	doDefault();

	/* DMR timeout
	 * if menu button still down: go into menu state.
	 * if it's released when the timeout occurs, forget
	 * it, abort (back to sIdleWindow)
	 */
	if ( tooFarDMR() )
	{
	    D( printf("dmrtimeout too far\n") );
	    (*IBase->DMRReturn)(
		TESTFLAG( IBase->Flags, RELEASED )? OKABORT: OKOK );
	    return;
	}
	/* else, keep waiting */
	return;

    case itSETREQ:	/* defer */
    case itCLEARREQ:	/* defer */
    case itREMOVEGAD:	/* defer (ZZZ: not just window?) */
    case itSETMENU:	/* defer */
    case itCLEARMENU:	/* defer */
    case itCHANGEWIN:	/* defer */
    case itZOOMWIN:	/* defer */
    case itDEPTHWIN:	/* defer */
    case itMOVESCREEN:	/* defer */
    case itDEPTHSCREEN:	/* defer */
    case itCLOSEWIN:	/* defer (ZZZ: perhaps want to abort rather than defer) */
    case itCLOSESCREEN:	/* defer */
    case itSHOWTITLE:	/* defer */
    case itONOFFMENU:	/* defer */
    case itCOPYSCBUF:	/* defer */
#if 0
    	if ( itwindow->WScreen = IBase->ActiveWindow->WScreen )
	{
	    deferToken();
	}
	else
	{
	    doDefault();
	}
	return;
#else
	deferToken();
#endif

    case itCHANGESCBUF:	/* fail: app should never double-buffer with requesters */
	IT->it_Error = 1;
	return;

    /*** default processing	***/
#if 0
    case itSELECTDOWN:	/* do default */
    case itSELECTUP:	/* do default */
    case itRAWKEY:	/* do default */
    case itDISKCHANGE:	/* do default */

    case itACTIVATEWIN:	/* do default */
    case itACTIVATEGAD:	/* do default */
    case itMETADRAG:	/* do default (should I abort, do metadrag?) */
    case itOPENWIN:	/* do default */
    case itVERIFY:	/* do default */
    case itOPENSCREEN:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itSETPOINTER:	/* do default */
    case itGADGETMETHOD:/* do default */
    case itMODIFYPROP:	/* do default */
#endif
    default:		/* itDEFAULT: do default */
	doDefault();
    }
}

/*
 * returns TRUE if mouse has moved "significantly", or double-click
 * interval has passed.
 * ZZZ: could use a better definition of "significant"
 */
tooFarDMR()
{
    struct IntuitionBase	*IBase  = fetchIBase();

    return (
	 ( iabs( IBase->ActiveWindow->MouseX - IBase->FirstPt.X ) > 10 )
      || ( iabs( IBase->ActiveWindow->MouseY - IBase->FirstPt.Y ) > 5 )
      || ( ! DoubleClick( IBase->StartSecs, IBase->StartMicros,
		IBase->Seconds, IBase->Micros ) )
	    );
}
@


38.8
log
@itGADGETMETHOD does default.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.7 92/06/02 14:55:39 peter Exp Locker: peter $
d180 1
@


38.7
log
@Comment change.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.6 92/04/07 17:57:21 peter Exp Locker: peter $
d179 1
@


38.6
log
@Handles itSETPOINTER token.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.5 92/03/21 14:53:54 peter Exp Locker: peter $
d110 2
a111 2
    case itTIMER:	/* Maybe abort */
    case itMOUSEMOVE:	/* Maybe abort */
@


38.5
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.4 92/03/19 15:54:26 peter Exp Locker: peter $
d178 1
@


38.4
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.3 92/03/19 10:55:41 peter Exp Locker: peter $
a138 1
    case itATTACHSCREEN:	/* defer */
@


38.3
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.2 92/02/20 12:17:07 peter Exp Locker: peter $
d139 1
@


38.2
log
@Defers new itCOPYSCBUF token.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.1 92/02/17 17:17:07 peter Exp Locker: peter $
d179 1
a179 1
    default:
@


38.1
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token fails.
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 38.0 91/06/12 14:31:12 peter Exp Locker: peter $
d144 1
d159 1
a159 1
    itCHANGESCBUF:	/* fail: app should never double-buffer with requesters */
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: sdmrtimeout.c,v 1.6 90/04/19 15:50:49 jimm Exp $
d98 1
a98 1
    case itMENUDOWN:
d104 1
a104 1
    case itMENUUP:
d110 2
a111 2
    case itTIMER:
    case itMOUSEMOVE:
d130 14
a143 15
    case itSETREQ:
    case itCLEARREQ:
    case itREMOVEGAD:	/* ZZZ: not just window? */
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itZOOMWIN:
    case itDEPTHWIN:
    case itMOVESCREEN:
    case itDEPTHSCREEN:
    case itCLOSEWIN:	/* ZZZ: perhaps want to abort rather than defer */
    case itBORDERPATROL:
    case itCLOSESCREEN:
    case itSHOWTITLE:
    case itONOFFMENU:
d158 4
d164 4
a167 4
    case itSELECTDOWN:
    case itSELECTUP:
    case itRAWKEY:
    case itDISKCHANGE:
d169 8
a176 8
    case itACTIVATEWIN:
    case itACTIVATEGAD:
    case itMETADRAG:	/* should I abort, do metadrag?	*/
    case itOPENWIN:
    case itVERIFY:
    case itOPENSCREEN:
    case itNEWPREFS:
    case itMODIFYIDCMP:
@
