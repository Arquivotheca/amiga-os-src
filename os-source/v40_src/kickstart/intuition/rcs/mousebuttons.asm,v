head     38.1;
branch   ;
access   ;
symbols  V40_85:38.1 V40_71:38.1 V40_68:38.1 V40_65:38.1 V40_47:38.1 V40_45:38.1 V40_37:38.1 V40_34:38.1 V40_29:38.1 V39_2415:38.1 V39_2369:38.1 V39_2339:38.1 V39_2332:38.1 V39_2275:38.1 V39_2256:38.1 V39_2210:38.1 V39_2192:38.1 V39_2084:38.1 V39_2082:38.1 V39_2076:38.1 V39_2073:38.1 V39_2058:38.1 V39_2051:38.1 V39_2031:38.1 V39_2017:38.1 V39_2012:38.1 V39_1985:38.1 V39_1933:38.1 V39_1819:38.1 V39_1805:38.1 V39_1783:38.1 V39_1695:38.1 V39_1621:38.1 V39_1620:38.1 V39_1508:38.1 V39_1485:38.1 V39_1461:38.1 V39_1458:38.1 V39_1456:38.1 V39_1405:38.1 V39_1368:38.1 V39_1360:38.1 V39_1324:38.1 V39_1147:38.1 V39_1143:38.1 V39_1141:38.1 V39_1120:38.1 V39_1116:38.1 V39_1104:38.1 V39_1100:38.1 V39_1078:38.1 V39_1073:38.1 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.1
date     92.04.08.23.47.16;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.27.25;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.1
log
@Newly re-written by Mike to be better.
@
text
@
**************************************************************************
*  $Id: mousebuttons.asm,v 38.0 91/06/12 14:27:25 peter Exp $
*
*	This file is supposed to be an interface allowing an ALERT
*	to read the mouse buttons directly from the hardware if the
*	gameport device has quit operating.
*
*	It is based direct interaction with ROM-wack.  robp.  6/12/85
*
*	requires only scratch registers A0 and D0, result in D0.
*
*		Rob Peck
**************************************************************************


	xdef	_CheckButtons

*
* New code (just one call) that checks both buttons
* and if something happened on them will return
* the results (bit pattern...)	- mks
*
_CheckButtons:	moveq.l	#0,d0		; Default return...
		move.w	#$0400,d1	; Get bit to check for...
		and.w	$DFF016,d1	; Read hardware and mask result...
		bne.s	CheckLeft	; If not down, skip this part
		addq.l	#1,d0		; Set d0, bit 0...
*
CheckLeft:	moveq.l	#$0040,d1	; Get bit to look for (quick way)
		and.b	$BFE001,d1	; Read hardware and mask result...
		bne.s	NoLeft		; If not down, skip...
		addq.l	#2,d0		; Set d0, bit 1...
*
NoLeft:		; If I put in the SAD serial check, it would go here...
		; Just don't know how good that would be...
		rts
*
		END
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d3 1
a3 1
*  $Id: mousebuttons.asm,v 36.3 90/04/19 15:49:17 jimm Exp $
d17 1
a17 2
	INCLUDE "hardware/cia.i"
	INCLUDE "hardware/custom.i"
d19 21
a39 33
	XREF _ciaa
	XREF _custom

	XDEF _ReadLeft 
	XDEF _ReadRight

PORTA	EQU	_ciaa+ciapra


*	routine to read the left-hand mouse button, return status
*	of "1" if button is pressed (TRUE), or "0" if button is 
*	not pressed currently (FALSE)

_ReadRight:
	MOVE.L	#_custom,A0
	MOVE.W 	potinp(A0),D0	* this should assemble as address DFF016
	ANDI.W  #$0400,D0	* if result is zero, button is down
	BNE.S	button_up
	BRA.S	button_down
_ReadLeft:
	MOVE.L  #PORTA,A0	* tried this under ROM-wack,  works! robp
*				* this should assemble as address BFE001. 
	MOVE.B	(A0),D0		* read the port A, so can see "fire but". 
	ANDI.B  #$040,D0
	BNE.S	button_up	* if this pin is high, button not pressed
button_down:
	MOVE.L	#1,D0
	RTS
button_up:
	MOVE.L	#0,D0
	RTS

	END	
@
