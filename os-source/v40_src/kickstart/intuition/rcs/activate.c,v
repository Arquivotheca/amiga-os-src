head     38.4;
branch   ;
access   ;
symbols  V40_85:38.4 V40_71:38.4 V40_68:38.4 V40_65:38.4 V40_47:38.4 V40_45:38.4 V40_37:38.4 V40_34:38.4 V40_29:38.4 V39_2415:38.4 V39_2369:38.4 V39_2339:38.4 V39_2332:38.4 V39_2275:38.4 V39_2256:38.4 V39_2210:38.4 V39_2192:38.4 V39_2084:38.3 V39_2082:38.3 V39_2076:38.3 V39_2073:38.3 V39_2058:38.3 V39_2051:38.3 V39_2031:38.3 V39_2017:38.3 V39_2012:38.3 V39_1985:38.3 V39_1933:38.3 V39_1819:38.3 V39_1805:38.3 V39_1783:38.3 V39_1695:38.3 V39_1621:38.3 V39_1620:38.3 V39_1508:38.2 V39_1485:38.2 V39_1461:38.2 V39_1458:38.2 V39_1456:38.2 V39_1405:38.2 V39_1368:38.2 V39_1360:38.2 V39_1324:38.2 V39_1147:38.2 V39_1143:38.2 V39_1141:38.2 V39_1120:38.2 V39_1116:38.2 V39_1104:38.2 V39_1100:38.2 V39_1078:38.2 V39_1073:38.2 V39_757:38.0 V39_702:38.0 V39_557:38.0 V39_553:38.0 V39_551:38.0 V39_510:38.0 V39_495:38.0 V39_416:38.0 V39_383:38.0 V39_371:38.0 V39_336:38.0 V39_323:38.0 V39_295:38.0 V39_277:38.0 V39_254:38.0 V39_222:38.0 V39_185:38.0 V39_171:38.0 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.4
date     92.11.10.17.02.29;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.06.23.17.14.45;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.07.17.45.24;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.04.01.15.03.44;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.13.12;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.4
log
@Now use GTYP_SYSTYPEMASK instead of 0xF0.
@
text
@
/*** activate.c ***************************************************************
 *
 *  File activate.c -- real tricky ActivateGadget() function.
 *
 *  $Id: activate.c,v 38.3 92/06/23 17:14:45 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (c) Commodore-Amiga, Inc.
 *
 ****************************************************************************/

/*** #define DEBUG 1 **/

#define D(x)	;
#define DG(x)	;

#include "intuall.h"

/*** intuition.library/ActivateGadget ***/

BOOL
ActivateGadget(gadget, window, request)
struct Gadget *gadget;
struct Window *window;
struct Requester *request;
{
    DG( printf("activategadget %lx, window %lx, request %lx\n",
	gadget, window,  request ) );

    return ( !doISM( itACTIVATEGAD, window, gadget, request )  );
}

/*
 * call only with it == itACTIVATEGAD
 * stuff error code in IT, return it too, for caller to
 * deal with.  0 means success
 */
IActivateGadget( it )
struct InputToken	*it;
{
    struct Hook	*gadgetHook();
    struct Window *window;
    struct Gadget *gadget;
    struct IntuitionBase *IBase = fetchIBase();

    window = ( struct Window *) it->it_Object1;
    gadget = ( struct Gadget *) it->it_Object2;

    DG( printf("IActivateGadget g %lx w %lx\n", gadget, window ) );

    /* Peter 23-Aug-90: Only non-system-type string gadgets and
     * custom gadgets may be affected by ActivateGadget() */
    if ( ( !gadget ) ||
	( ( ( gadget->GadgetType & GTYPEMASK ) != STRGADGET ) &&
	( ( gadget->GadgetType & GTYPEMASK ) != CUSTOMGADGET ) ) ||
	( gadget->GadgetType & GTYP_SYSTYPEMASK ) )
	{
	DG( printf("IAG: failing due to invalid GadgetType\n") );
	return( 1 );	/* error */
	}

    /* try to get gadget environment and info */

    /* use offical gadget env and info, but this would change if
     * this thing might want to abort other gadgets, but not if
     * these next two operations don't succeed.
     */

    if ( ! gListDomain( gadget, window, &IBase->GadgetEnv ) ) 
    {
	DG( printf("IAG: gldomain failed\n") );
	return ( 1 );	/* error */
    }
    gadgetInfo(gadget, &IBase->GadgetEnv );
    IBase->ActiveGadget = gadget;
    return ( 0 );
}
@


38.3
log
@Removed unused 'request' parameter.
@
text
@d6 1
a6 1
 *  $Id: activate.c,v 38.2 92/04/07 17:45:24 peter Exp Locker: peter $
d57 1
a57 1
	( gadget->GadgetType & 0xF0 ) )
@


38.2
log
@Removed unused vble.
@
text
@d6 1
a6 1
 *  $Id: activate.c,v 38.1 92/04/01 15:03:44 peter Exp Locker: peter $
a44 1
    struct Requester *request;
a48 1
    request = (struct Requester *) it->it_SubCommand;
d50 1
a50 2
    DG( printf("IActivateGadget g %lx w %lx r %lx\n",
	gadget, window, request ) );
@


38.1
log
@Evicted autodocs.
@
text
@d6 1
a6 1
 *  $Id: activate.c,v 38.0 91/06/12 14:13:12 peter Exp Locker: peter $
a27 2
    struct IntuitionBase *IBase = fetchIBase();

@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d6 1
a6 1
 *  $Id: activate.c,v 36.14 91/02/01 19:27:56 peter Exp $
d20 1
a21 66
/****** intuition.library/ActivateGadget *************************************
*
*    NAME
*	ActivateGadget -- Activate a (string or custom) gadget.
*
*    SYNOPSIS
*	Success = ActivateGadget( Gadget, Window, Request )
*	D0			  A0      A1      A2
*
*	BOOL ActivateGadget( struct Gadget *, struct Window *,
*		struct Requester * );
*
*    FUNCTION
*	Activates a string or custom gadget.  If successful, this means
*	that the user does not need to click in the gadget before typing.
*
*	The window parameter must point to the window which contains the gadget.
*	If the gadget is actually in a requester, the window must contain
*	the requester, and a pointer to the requester must also be
*	passed.	The requester parameter must only be valid if the gadget
*	has the	GTYP_REQGADGET flag set, a requirement for all requester
*	gadgets.
*
*	The success of this function depends on a rather complex set
*	of conditions.  The intent is that the user is never interrupted from
*	what interactions he may have underway.
*
*	The current set of conditions includes:
*	-   The window must be active.  If you are opening a new window
*	    and want an active gadget in it, it is not sufficient to
*	    assume that the WFLG_ACTIVATE flag has taken effect by the time
*	    OpenWindow() returns, even if you insert a delay of some
*	    finite amount of time.  Use the IDCMP_ACTIVEWINDOW IntuiMessage
*	    to tell when your window really becomes active.  Many
*	    programs use an event loop that calls ActivateGadget()
*	    whenever they receive the IDCMP_ACTIVEWINDOW message, and also
*	    the IDCMP_MOUSEBUTTONS messages, and so on, to keep the
*	    gadget active until it is used (or the user selects some
*	    other "Cancel" gadget).
*
*	-   No other gadgets may be in use.  This includes system gadgets,
*	    such as those for window sizing, dragging, etc.
*	-   If the gadget is in a requester, that requester must
*	    be active. (Use IDCMP_REQSET and IDCMP_REQCLEAR).
*	-   The right mouse button cannot be held down (e.g. menus)
*
*	NOTE: Don't try to activate a gadget which is disabled or
*	not attached to a window or requester.
*
*    INPUTS
*	Gadget = pointer to the gadget that you want activated.
*	Window = pointer to a window structure containing the gadget.
*	Requester = pointer to a requester (may by NULL if this isn't 
*           a requester gadget (i.e. GTYP_REQGADGET is not set)).
*
*    RESULT
*	If the conditions above are met, and the gadget is in fact a string
*	gadget, then this function will return TRUE, else FALSE.
*
*    BUGS
*	At present, this function will not return FALSE if a custom
*	gadget declines to be activated.
*
*    SEE ALSO
*	
*****************************************************************************/
@
