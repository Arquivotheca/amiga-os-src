head     38.17;
branch   ;
access   ;
symbols  V40_85:38.17 V40_71:38.17 V40_68:38.17 V40_65:38.17 V40_47:38.17 V40_45:38.17 V40_37:38.17 V40_34:38.17 V40_29:38.17 V39_2415:38.17 V39_2369:38.16 V39_2339:38.15 V39_2332:38.15 V39_2275:38.15 V39_2256:38.15 V39_2210:38.15 V39_2192:38.15 V39_2084:38.15 V39_2082:38.15 V39_2076:38.15 V39_2073:38.15 V39_2058:38.15 V39_2051:38.15 V39_2031:38.15 V39_2017:38.15 V39_2012:38.15 V39_1985:38.15 V39_1933:38.15 V39_1819:38.14 V39_1805:38.14 V39_1783:38.14 V39_1695:38.14 V39_1621:38.12 V39_1620:38.12 V39_1508:38.11 V39_1485:38.11 V39_1461:38.11 V39_1458:38.11 V39_1456:38.11 V39_1405:38.11 V39_1368:38.11 V39_1360:38.11 V39_1324:38.11 V39_1147:38.10 V39_1143:38.10 V39_1141:38.10 V39_1120:38.10 V39_1116:38.10 V39_1104:38.10 V39_1100:38.10 V39_1078:38.10 V39_1073:38.10 V39_757:38.8 V39_702:38.8 V39_557:38.5 V39_553:38.5 V39_551:38.5 V39_510:38.5 V39_495:38.5 V39_416:38.3 V39_383:38.2 V39_371:38.2 V39_336:38.2 V39_323:38.2 V39_295:38.1 V39_277:38.1 V39_254:38.1 V39_222:38.1 V39_185:38.1 V39_171:38.1 V39_161:38.0 V38_159:38.0 V38_116:38.0 V38_59:38.0;
locks    ; strict;
comment  @*   @;


38.17
date     93.01.14.14.24.23;  author peter;  state Exp;
branches ;
next     38.16;

38.16
date     93.01.08.14.50.11;  author peter;  state Exp;
branches ;
next     38.15;

38.15
date     92.08.02.12.46.00;  author peter;  state Exp;
branches ;
next     38.14;

38.14
date     92.07.08.15.27.52;  author peter;  state Exp;
branches ;
next     38.13;

38.13
date     92.07.07.15.25.54;  author peter;  state Exp;
branches ;
next     38.12;

38.12
date     92.06.23.17.22.26;  author peter;  state Exp;
branches ;
next     38.11;

38.11
date     92.05.21.17.46.20;  author peter;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.07.18.00.00;  author peter;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.02.12.08.49;  author peter;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.21.14.56.05;  author peter;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.19.15.56.35;  author peter;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.19.10.56.22;  author peter;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.20.12.18.56;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.02.17.17.19.08;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.11.13.41.24;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.22.16.45.46;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.09.23.12.29.12;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.12.14.33.37;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.17
log
@Added itMODIFYPROP.
@
text
@/*** swsizedrag.c ********************************************************
 *
 * sWSizeDrag state processing
 *
 *  $Id: swsizedrag.c,v 38.16 93/01/08 14:50:11 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/


#include "intuall.h"

#define D(x)	;

/* transition startWSizeDrag()
 * called by:
 * with state data:
 * description:
 */
startWSizeDrag( wsdreturn, size_drag )
UWORD		(*wsdreturn)();
{
    struct IntuitionBase	*IBase = fetchIBase();
    int returnWSDOK();

    D( printf("transition function startWSizeDrag, cstate: %ld\n", 
	IBase->CurrentState ));

    setIFrame();	/* snapshot window dims, mouse offset,
			 * before the heartbreak of SIZEVERIFY
			 */

    IBase->WSDReturn = wsdreturn;
    if ( ( IBase->SizeDrag = size_drag ) == WSD_SIZE )
    {
	D( printf("startWSD, get SIZEVERIFY\n") );
	startVerify( returnWSDOK, IBase->ActiveWindow, SIZEVERIFY, 0 );
    }
    else
    {
	D( printf("startWSD: direct connect for dragging\n") );
	returnWSDOK( OKOK  );	/* direct connect to own routine */
    }
}

returnWSDOK( okcode )
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*window;
    struct Screen		*screen;
    struct Rectangle		worklimits;
    struct Point		mousespot;

    D( printf("returnWSDOK okcode %lx\n", okcode ) );

    if ( okcode != OKOK )
    {
	if ( IBase->SizeDrag == WSD_SIZE )
	{
	    /*
	     * if aborted (or timeout), send "verify clear"
	     * ZZZ: would need to change for "MOVEVERIFY"
	     */
	    activeEvent( IECLASS_SIZEWINDOW, 0 );
	}
	(*IBase->WSDReturn)();		/* back to previous state */
	return;
    }

    window = IBase->ActiveWindow;
    screen = window->WScreen;

    LockLayers( &screen->LayerInfo );

    D( printf("sWSD: layers locked OK\n") );

    if ( IBase->SizeDrag == WSD_SIZE )
    {
	D( printf("WSD_SIZE:\n") );

	/* ------ Calculate Mouse Limits ---------------------------- */

	/* define range of travel of lower right corner,
	 * window-relative
	 */
	worklimits.MinX = window->MinWidth - 1;
	worklimits.MinY = window->MinHeight - 1;

	/* warning: MaxWidth/Height might be out of signed range.
	 * (or damned near)
	 * replace with a large value that won't wrap
	 * if it is offset or doubled (for lace coords)
	 * ZZZ: this is bullshit
	 */
#define VBIG	(7000)
	if (((worklimits.MaxX = window->MaxWidth) & 0x8000)
	    || (worklimits.MaxX > VBIG) )
	{
	    worklimits.MaxX = VBIG;
	}
	if (((worklimits.MaxY = window->MaxHeight) & 0x8000)
	    || (worklimits.MaxY > VBIG) )
	{
	    worklimits.MaxY = VBIG;
	}
	/* i admit that i'm a little afraid of the signed/unsigned
	 * combination above, so i'll do the necessary decrement
	 * here, where it's safer. (jimm)
	 */
	worklimits.MaxX--;
	worklimits.MaxY--;

	/* offset to respect window position in the screen */
	offsetRect( &worklimits, window->LeftEdge, window->TopEdge);

	/* constrain borders to screen, in screen res. coordinates	*/
	worklimits.MaxX = imin(worklimits.MaxX, screen->Width - 1 );
	worklimits.MaxY = imin(worklimits.MaxY, screen->Height - 1 );

	/* account for offset between mouse position and LRC	*/
	mousespot.X = window->Width - 1;
	mousespot.Y = window->Height - 1;

	/* now we are great, but in screen coords.  */

	/** Set up for general size/drag action **/
	IBase->frameChange	= stretchIFrame;
	IBase->SDDelta = (struct Point * ) & IBase->ChangeBox.Width;

    }
    else	/* WSD_DRAG */
    {
	D( printf("WSD_DRAG:\n") );

	/* rectangle of freedom for window position within screen	*/
	worklimits.MinX = worklimits.MinY = 0;
	worklimits.MaxX = screen->Width - window->Width;
	worklimits.MaxY = screen->Height - window->Height;

	/* Measured wrt. an origin at screen 0,0	*/
	mousespot.X = mousespot.Y = 0;

	/** Set up for general size/drag action **/
	IBase->frameChange	= dragIFrame;
	IBase->SDDelta = (struct Point * ) & IBase->ChangeBox.Left;

    }

    /* Offset wrt. ideal mousespot.
     * Have to use window mouse position at time of snapshot
     */
    offsetRect( &worklimits, 
	(IBase->FirstPt.X - window->LeftEdge) - mousespot.X,
	(IBase->FirstPt.Y - window->TopEdge ) - mousespot.Y );

    /* Save these limits, which are relative to the screen: */
    IBase->ScreenMouseLimits = worklimits;
    SETFLAG( IBase->Flags, INMOUSELIMITS|SCREENMLIMITS );
    rethinkMouseLimits();

    updateFrame( 1 );	/* draw first box	*/
    updateMousePointer(NULL);	/* mouse to within limits	*/
    updateFrame( 0 );	/* and make it sync with where the mouse is */

    IBase->CurrentState = sWSizeDrag;
    D( printf("sWSD done\n") );
}


/*
 * state dispatcher
 * state transitions called:
 */
dWSizeDrag()
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Window		*itwindow = ( struct Window *) IT->it_Object1;
    struct Window		*window;

    window = IBase->ActiveWindow;

    switch ( IT->it_Command )
    {

    /** Done **/
    case itMENUDOWN:	/* done, erase frame */
    case itSELECTUP:	/* done, erase frame */
	updateFrame( 1 );

/* jimm: 5/29/90:
 * I don't know why I morphed the token rather than
 * just calling IChangeWindow.  Ah, I see: perhaps the
 * previous state needs to do something in additional to
 * the default IChangeWindow().
 *
 * The previous state is sGadget, which only turns off
 * the (sizing) gadget when we're done.  That should be OK.
 *
 * The states which called startGadget() are also significant,
 * but they (sRequester, sIdleWindow) both only doDefault()
 * for itCHANGEWIN.
 *
 * So it looks like this is the way to go.  Yeesh.
 *
 * Well, further investigation shows that this lock *shouldn't*
 * be necessary (the lock is held over damage/refresh in
 * IChangeWindow just fine).  Holding this lock *does* close
 * a funnel that console falls into.
 */

	/* protect damage list until I'm done with it */
	LockLayerInfo( &window->WScreen->LayerInfo );
	UnlockLayers( &window->WScreen->LayerInfo );

	/* dispatch to sizer/dragger */
	if ( IT->it_Command == itSELECTUP )  /* oh, baby, do you mean it? */
	{
	    windowBox( IBase->ActiveWindow, &IBase->ChangeBox );

	    /* change either dims or position */
	    IBase->SDDelta->X += (window->WScreen->MouseX - IBase->FirstPt.X);
	    IBase->SDDelta->Y += (window->WScreen->MouseY - IBase->FirstPt.Y);

	    IChangeWindow( IBase->ActiveWindow,
		&IBase->ChangeBox, 
		(IBase->SizeDrag == WSD_SIZE)? (CWSUB_CHANGE | CWSUBQ_SIZING) :
		CWSUB_CHANGE );
	    /* unlock done below, for all conditions	*/
	    /* UnlockLayerInfo( &window->WScreen->LayerInfo ); */
	}
	/* have to send "end of sizing" to SIZEVERIFY guys
	 * in this abort case.
	 */
	else if ( TESTFLAG( window->IDCMPFlags, SIZEVERIFY ) &&
	    ( IBase->SizeDrag == WSD_SIZE ) )
	{
	    activeEvent( IECLASS_SIZEWINDOW, 0 );
	}
	UnlockLayerInfo( &window->WScreen->LayerInfo );

	CLEARFLAG( IBase->Flags, INMOUSELIMITS|SCREENMLIMITS );
	freeMouse();
	(*IBase->WSDReturn)();		/* back to previous state */
	return;

    /** Size/Drag Frame **/
    case itMOUSEMOVE:	/* update frame */
	doDefault();	/* will update the window's MouseX/Y */
	updateFrame( 0 );
	return;

    /*** default processing (mostly skip)	***/
    case itMENUUP:	/* do default */
    case itSELECTDOWN:	/* do default */
    case itRAWKEY:	/* do default */
    case itTIMER:	/* do default */
    case itDISKCHANGE:	/* do default */
    case itACTIVATEGAD:	/* do default (default is 'fail') */
    case itMETADRAG:	/* do default */
    case itVERIFY:	/* do default */
    case itNEWPREFS:	/* do default */
    case itMODIFYIDCMP:	/* do default */
    case itSETPOINTER:	/* do default */
	doDefault();
	return;

    case itCHANGESCBUF:	/* fail: app should never double-buffer with windows */
	IT->it_Error = 1;
	return;


#if 0
    case itMOVESCREEN:	/* defer (was skip prior to 3.01) */
    case itACTIVATEWIN:	/* defer */
    case itSETREQ:	/* defer */
    case itCLEARREQ:	/* defer */
    case itOPENWIN:	/* defer */
    case itCLOSEWIN:	/* defer */
    case itREMOVEGAD:	/* defer (might be the size/drag gadget) */
    case itSETMENU:	/* defer */
    case itCLEARMENU:	/* defer */
    case itCHANGEWIN:	/* defer */
    case itZOOMWIN:	/* defer */
    case itDEPTHWIN:	/* defer */
    case itDEPTHSCREEN:	/* defer */
    case itSHOWTITLE:	/* defer */
    case itOPENSCREEN:	/* defer */
    case itCLOSESCREEN:	/* defer */
    case itCOPYSCBUF:	/* defer */
    case itGADGETMETHOD:/* defer */
    case itMODIFYPROP:	/* defer */
#endif
    default:		/* itDEFAULT: defer */
	deferToken();
	return;
    }
}

/*
 * make it sync up with current mouse coordinates
 */
updateFrame( initial )
int initial;
{
    struct IntuitionBase	*IBase = fetchIBase();
    struct Point 		mouse;
    struct Point delta;
    struct Rectangle	oldrect;
    struct Rectangle	newrect;
    struct RastPort *RP;
    struct Window		*window;

    window = IBase->ActiveWindow;

    mouse.X = window->WScreen->MouseX;
    mouse.Y = window->WScreen->MouseY;


    /* ZZZ: should have function to subtract points */
    delta.X = mouse.X - IBase->OldPt.X;
    delta.Y = mouse.Y - IBase->OldPt.Y;

    if ( ( initial ) || ( delta.X ) || ( delta.Y ) )	/* some movement */
    {
	IBase->OldPt = mouse;

	boxToRect( &IBase->IFrame, &oldrect );
	if ( !initial )
	{
	    (*IBase->frameChange)( delta );
	    boxToRect( &IBase->IFrame, &newrect );
	}

	RP = obtainRP( XSC(window->WScreen)->ClipLayer->rp,
	    XSC(window->WScreen)->ClipLayer );

	SetDrMd( RP, COMPLEMENT );

	/* Draw the oldrect and optionally the newrect */
	drawFrames( RP, &oldrect, ( initial ) ? NULL : &newrect );

	freeRP(RP);
    }
}

setIFrame()	/* save current window/mouse stuff */
{
    struct Point mouse;

    struct IntuitionBase *IBase = fetchIBase();

    /* copy frame dimensions from window */
    IBase->IFrame = *((struct IBox *) &IBase->ActiveWindow->LeftEdge);

    IBase->FirstPt.X = IBase->OldPt.X = IBase->ActiveScreen->MouseX;
    IBase->FirstPt.Y = IBase->OldPt.Y = IBase->ActiveScreen->MouseY;

    /**  I'm doing this before SIZEVERIFY now
     updateFrame( 1 );
     *** OUT ***/
}

@


38.16
log
@itMOVESCREEN is now deferred, not ignored.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.15 92/08/02 12:46:00 peter Exp Locker: peter $
d294 1
@


38.15
log
@No longer use mask of 3 for the drag-box.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.14 92/07/08 15:27:52 peter Exp Locker: peter $
a269 3
    case itMOVESCREEN:	/* skip */
	return;			/* explicitly skip	*/

d276 1
@


38.14
log
@Now call updateFrame() with the ClipLayer RP.  frameEdge() is now
called drawFrames() and does one or both frames and all edges.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.13 92/07/07 15:25:54 peter Exp Locker: peter $
d341 1
a341 2
	SetABPenDrMd( RP, 0, 0, COMPLEMENT );
	RP->Mask = 3;
@


38.13
log
@itGADGETMETHOD is deferred.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.12 92/06/23 17:22:26 peter Exp Locker: peter $
d164 1
a164 1
    drawFrame();	/* draw first box	*/
d166 1
a166 1
    updateFrame();	/* and make it sync with where the mouse is */
d191 1
a191 1
	drawFrame();
d252 1
a252 1
	updateFrame();
d306 2
a307 1
updateFrame()
d327 1
a327 1
    if ( delta.X || delta.Y )	/* some movement */
d332 5
a336 2
	(*IBase->frameChange)( delta );
	boxToRect( &IBase->IFrame, &newrect );
d338 2
a339 1
	RP = obtainRP( &window->WScreen->RastPort, NULL  );
d344 2
a345 17
	/* The idea here is to avoid too many dynamic uglies.
	 * We achieve that in a few ways.  First, we erase
	 * the old before drawing the new, and second, we do
	 * it piece-wise, so the new rendering happens very
	 * fast after the old rendering.
	 */
	frameEdge( RP, &oldrect, FRAMEEDGE_TOP );
	frameEdge( RP, &newrect, FRAMEEDGE_TOP );

	frameEdge( RP, &oldrect, FRAMEEDGE_BOTTOM );
	frameEdge( RP, &newrect, FRAMEEDGE_BOTTOM );

	frameEdge( RP, &oldrect, FRAMEEDGE_LEFT );
	frameEdge( RP, &newrect, FRAMEEDGE_LEFT );

	frameEdge( RP, &oldrect, FRAMEEDGE_RIGHT );
	frameEdge( RP, &newrect, FRAMEEDGE_RIGHT );
d364 1
a364 1
     drawFrame();
@


38.12
log
@Removed compiled-out code.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.11 92/05/21 17:46:20 peter Exp Locker: peter $
d295 1
@


38.11
log
@Window drag-frame is now masked to depth 2.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.10 92/04/07 18:00:00 peter Exp Locker: peter $
a192 2
#define DO_CHANGE_NOW	1

a213 1
#if	DO_CHANGE_NOW
a215 1
#endif
a226 1
#if	DO_CHANGE_NOW
a232 10
#else
	    /* morph token */
	    reuseToken();
	    IT->it_Command = itCHANGEWIN;
	    IT->it_Object1 = (CPTR) window;
	    IT->it_Box = IBase->ChangeBox;	/* copy box */
	    IT->it_SubCommand = (IBase->SizeDrag == WSD_SIZE)?
		CWSUB_CHANGEANDVERIFY: CWSUB_CHANGE;

#endif	/* DO_CHANGE_NOW	*/
@


38.10
log
@Handles itSETPOINTER token.  Calls updateMousePointer() with NULL.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.9 92/04/02 12:08:49 peter Exp Locker: peter $
d351 1
@


38.9
log
@Renamed reportMouse() to updateMousePointer().
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.8 92/03/21 14:56:05 peter Exp Locker: peter $
d165 1
a165 1
    updateMousePointer(FALSE);	/* mouse to within limits	*/
d281 1
@


38.8
log
@Deleted itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.7 92/03/19 15:56:35 peter Exp Locker: peter $
d165 1
a165 1
    reportMouse(FALSE);	/* mouse to within limits	*/
@


38.7
log
@Now handle itATTACHSCREEN token.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.6 92/03/19 10:56:22 peter Exp Locker: peter $
a308 1
    case itATTACHSCREEN:	/* defer */
@


38.6
log
@Added itDEFAULT comment.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.5 92/02/20 12:18:56 peter Exp Locker: peter $
d309 1
@


38.5
log
@Now handles itCOPYSCBUF token.  Added missing "case" word (ugh).
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.4 92/02/17 17:19:08 peter Exp Locker: peter $
d310 1
a310 1
    default:
@


38.4
log
@Clarified what each token does.  Removed references to unused itBORDERPATROL.
Double-buffer token fails.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.3 92/02/11 13:41:24 peter Exp Locker: peter $
d287 1
a287 1
    itCHANGESCBUF:	/* fail: app should never double-buffer with windows */
d308 1
@


38.3
log
@Frame drawing redone to be smaller and faster.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.2 92/01/22 16:45:46 peter Exp Locker: peter $
d189 2
a190 2
    case itMENUDOWN:
    case itSELECTUP:
d265 1
a265 1
    case itMOUSEMOVE:
d271 10
a280 10
    case itMENUUP:
    case itSELECTDOWN:
    case itRAWKEY:
    case itTIMER:
    case itDISKCHANGE:
    case itACTIVATEGAD:		/* default is 'fail'	*/
    case itMETADRAG:
    case itVERIFY:
    case itNEWPREFS:
    case itMODIFYIDCMP:
d284 1
a284 1
    case itMOVESCREEN:
d287 5
d293 15
a307 16
    case itACTIVATEWIN:
    case itSETREQ:
    case itCLEARREQ:
    case itOPENWIN:
    case itCLOSEWIN:
    case itREMOVEGAD:		/* might be the size/drag gadget */
    case itSETMENU:
    case itCLEARMENU:
    case itCHANGEWIN:
    case itZOOMWIN:
    case itDEPTHWIN:
    case itDEPTHSCREEN:
    case itBORDERPATROL:
    case itSHOWTITLE:
    case itOPENSCREEN:
    case itCLOSESCREEN:
@


38.2
log
@Changed bogus 7000 constant to bogus VBIG constant.  Hope to clean up
someday.
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.1 91/09/23 12:29:12 peter Exp Locker: peter $
d164 1
a164 1
    drawBoxClip2();	/* draw first box	*/
d191 1
a191 1
	drawBoxClip2();
a321 1
    int	hthick, vthick;
d346 8
a353 12
	hthick = IBase->FrameHThick;
	vthick = IBase->FrameVThick;

	/*	horizontals	*/
	while ( vthick-- )
	{
	    drawHorizClip( RP, oldrect.MinX, oldrect.MaxX, oldrect.MinY++ );
	    drawHorizClip( RP, newrect.MinX, newrect.MaxX, newrect.MinY++ );

	    drawHorizClip( RP, oldrect.MinX, oldrect.MaxX, oldrect.MaxY-- );
	    drawHorizClip( RP, newrect.MinX, newrect.MaxX, newrect.MaxY-- );
	}
d355 5
a359 5
	/*	verticals	*/
	while ( hthick-- )
	{
	    drawVertClip( RP, oldrect.MinY, oldrect.MaxY, oldrect.MinX++ );
	    drawVertClip( RP, newrect.MinY, newrect.MaxY, newrect.MinX++ );
d361 2
a362 3
	    drawVertClip( RP, oldrect.MinY, oldrect.MaxY, oldrect.MaxX-- );
	    drawVertClip( RP, newrect.MinY, newrect.MaxY, newrect.MaxX-- );
	}
a379 3
    IBase->FrameHThick = (IBase->ActiveScreen->WBorLeft) >> 1;
    IBase->FrameVThick = (IBase->ActiveScreen->WBorTop) >> 1;

d381 1
a381 1
     drawBoxClip2();
@


38.1
log
@updateFrame() now uses SetABPenDrMd().
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 38.0 91/06/12 14:33:37 peter Exp Locker: peter $
d98 1
d100 1
a100 1
	    || (worklimits.MaxX > 7000) )
d102 1
a102 1
	    worklimits.MaxX = 7000;
d105 1
a105 1
	    || (worklimits.MaxY > 7000) )
d107 1
a107 1
	    worklimits.MaxY = 7000;
a108 1

@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d5 1
a5 1
 *  $Id: swsizedrag.c,v 1.12 91/04/05 16:20:34 peter Exp $
d345 1
a345 2
	SetAPen( RP, 0 );
	SetDrMd( RP, COMPLEMENT );
@
