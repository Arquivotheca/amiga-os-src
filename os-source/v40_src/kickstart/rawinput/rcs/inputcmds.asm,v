head     36.4;
branch   ;
access   ;
symbols  V36_14:35.0 V36_13:35.0 V36_11:35.0 L36_5:35.0;
locks    ; strict;
comment  @*   @;


36.4
date     90.05.22.12.10.45;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.13.12.44.33;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.04.02.12.58.01;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.01.19.18.06.13;  author kodiak;  state Exp;
branches ;
next     35.2;

35.2
date     90.01.04.13.27.37;  author kodiak;  state Exp;
branches ;
next     35.1;

35.1
date     89.07.31.17.13.31;  author kodiak;  state Exp;
branches ;
next     35.0;

35.0
date     87.10.26.11.31.15;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.4
log
@corrects documentation to reflect that IND_WRITEEVENT events cannot
be chained
@
text
@	TTL	'$Id: inputcmds.asm,v 36.3 90/04/13 12:44:33 kodiak Exp Locker: kodiak $'
**********************************************************************
*								     *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.	     *
*   No part of this program may be reproduced, transmitted,	     *
*   transcribed, stored in retrieval system, or translated into	     *
*   any language or computer language, in any form or by any	     *
*   means, electronic, mechanical, magnetic, optical, chemical,	     *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030				     *
*								     *
**********************************************************************
*
*	input device commands
*
*   Source Control
*   --------------
*   $Id: inputcmds.asm,v 36.3 90/04/13 12:44:33 kodiak Exp Locker: kodiak $
*
*   $Locker: kodiak $
*
*   $Log:	inputcmds.asm,v $
*   Revision 36.3  90/04/13  12:44:33  kodiak
*   use Id instead of Header for 4.x rcs
*   
*   Revision 36.2  90/04/02  12:58:01  kodiak
*   for rcs 4.x header change
*   
*   Revision 36.1  90/01/19  18:06:13  kodiak
*   make SetMXxxx commands synchronous
*   
*   Revision 35.2  90/01/04  13:27:37  kodiak
*   polish autodoc headers
*   
*   Revision 35.1  89/07/31  17:13:31  kodiak
*   autodoc change
*   
*   Revision 35.0  87/10/26  11:31:15  kodiak
*   initial from V34, but w/ stripped log
*   
*   
**********************************************************************

	SECTION		rawinput

*------ Included Files -----------------------------------------------

	INCLUDE		"exec/types.i"
	INCLUDE		"exec/nodes.i"
	INCLUDE		"exec/lists.i"
	INCLUDE		"exec/memory.i"
	INCLUDE		"exec/ports.i"
	INCLUDE		"exec/libraries.i"
	INCLUDE		"exec/devices.i"
	INCLUDE		"exec/tasks.i"
	INCLUDE		"exec/io.i"
	INCLUDE		"exec/strings.i"
	INCLUDE		"exec/interrupts.i"
	INCLUDE		"exec/errors.i"

	INCLUDE		"devices/timer.i"
	INCLUDE		"inputevent.i"
	INCLUDE		"gameport.i"

	INCLUDE		"macros.i"
	INCLUDE		"stddevice.i"
	INCLUDE		"iddata.i"


*------ Imported Names -----------------------------------------------


*------ Imported Functions -------------------------------------------

	XREF_EXE	Enqueue
	XREF_EXE	Signal

	XREF		DispatchEvents

	XREF		EndCommand

	XREF		ReopenMouse
	XREF		AbortMouse
	XREF		TypeMouse
	XREF		TrigMouse
	XREF		ReadMouse


*------ Exported Names -----------------------------------------------

	XDEF		IDClear
	XDEF		IDStart
	XDEF		IDAddHandler
	XDEF		IDRemHandler
	XDEF		IDWriteEvent
	XDEF		IDSetThresh
	XDEF		IDSetPeriod
	XDEF		IDSetMPort
	XDEF		IDSetMType
	XDEF		IDSetMTrig

	XDEF		IDCBClear
	XDEF		IDCBStart
	XDEF		IDCBSetThresh
	XDEF		IDCBSetPeriod

	IFNE	gpt_SIZEOF-8
	FAIL	"gpt_SIZEOF not 8, recode"
	ENDC

*------ input.device/command/Clear ********************************
*
*   NAME
*	Clear - clear input buffer
*
*   FUNCTION
*	Remove from input buffers any input reports waiting to
*	satisfy read requests.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_CLEAR
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
**********************************************************************
IDCBClear	EQU	-1

IDClear:
		RTS

*****i* input.device/CMD_START ***************************************
*
*   NAME
*	Start - restart after stop
*
*   FUNCTION
*	Start restarts the unit after a stop command.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_START
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
**********************************************************************
IDCBStart	EQU	-1

IDStart:
		MOVE.L	A1,-(A7)
		MOVE.L	IO_UNIT(A1),A0
		BCLR	#DUB_STOPPED,du_Flags(A0)
		BEQ.S	sRts

		LEA	id_TC(A6),A1
		MOVE.B	MP_SIGBIT(A0),D1
		MOVEQ	#0,D0
		BSET	D1,D0
		LINKEXE	Signal

sRts:
		MOVE.L	(A7)+,A1
		BRA.S	endOKCommand


******* input.device/IND_ADDHANDLER **********************************
*
*   NAME
*	IND_ADDHANDLER -- Add an input handler to the device
*
*   FUNCTION
*	Add a function to the list of functions called to handle
*	input events generated by this device.  The function is called
*	as
*	    newInputEvents = Handler(inputEvents, handlerData);
*	    D0			     A0		  A1
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set
*	io_Device	preset by OpenDevice
*	io_Unit		preset by OpenDevice
*	io_Command	IND_ADDHANDLER
*	io_Data		a pointer to an interrupt structure.
*	    is_Data 	the handlerData pointer described above
*	    is_Code	the Handler function address
*
*   NOTES
*	The interrupt structure is kept by the input device until a
*	RemHandler command is satisfied for it.
*
**********************************************************************
IDAddHandler:
		MOVE.L	A1,-(A7)
		MOVE.L	IO_DATA(A1),A1
		LEA	id_HandlerList(A5),A0
		CALLEXE	Enqueue
		MOVE.L	(A7)+,A1
		MOVE.L	A6,-(A7)
		MOVE.L	A5,A6
		BSR.S	endOKCommand
		MOVE.L	(A7)+,A6
		RTS


******* input.device/IND_REMHANDLER **********************************
*
*   NAME
*	IND_REMHANDLER -- Remove an input handler from the device
*
*   FUNCTION
*	Remove a function previously added to the list of handler
*	functions.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set
*	io_Device	preset by OpenDevice
*	io_Unit		preset by OpenDevice
*	io_Command	IND_REMHANDLER
*	io_Data		a pointer to the interrupt structure.
*
*   NOTES
*	This command is not immediate
*
**********************************************************************
IDRemHandler:
		MOVE.L	A1,-(A7)
		MOVE.L	IO_DATA(A1),A1
		REMOVE
		MOVE.L	(A7)+,A1
		MOVE.L	A6,-(A7)
		MOVE.L	A5,A6
		BSR.S	endOKCommand
		MOVE.L	(A7)+,A6
		RTS


******* input.device/IND_WRITEEVENT **********************************
*
*   NAME
*	IND_WRITEEVENT -- Propagate an input event to all handlers
*
*   FUNCTION
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_WRITEEVENT
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	should be sizeof(struct InputEvent)
*	io_Data		a pointer to the struct InputEvent:
*	    ie_NextEvent
*			will be ignored.
*	    ie_Class
*	    ie_SubClass
*	    ie_Code 
*	    ie_Qualifier 
*	    ie_X, ie_Y
*			as desired
*	    ie_TimeStamp 
*			will be set by this call (V36)
*
*   NOTES
*	The contents of the input event are destroyed.
*
*	This function was documented in V34 and earlier to allow
*	chaining of events via ie_NextEvent.  The implementation
*	never allowed that.  The documentation now reflects this.
*
*	ie_TimeStamp is set only in V36 and later.  Software written
*	to run on earlier versions should set this field to the
*	current time.
*
**********************************************************************
IDWriteEvent:
		MOVE.L	A1,-(A7)
		MOVE.L	IO_DATA(A1),A3
		BSR	DispatchEvents
		MOVE.L	(A7)+,A1
		MOVE.L	A6,-(A7)
		MOVE.L	A5,A6
		BSR.S	endOKCommand
		MOVE.L	(A7)+,A6
		RTS


******* input.device/IND_SETTHRESH ***********************************
*
*   NAME
*	IND_SETTHRESH -- Set the key repeat threshold
*
*   FUNCTION
*	This command sets the time that a key must be held down before
*	it can repeat.  The repeatability of a key may be restricted
*	(as, for example, are the shift keys).
*
*	This command always executes immediately.
*
*   IO REQUEST - a timerequest
*	tr_node.io_Message	mn_ReplyPort set if quick I/O is not possible
*	tr_node.io_Device	preset by the call to OpenDevice
*	tr_node.io_Unit		preset by the call to OpenDevice
*	tr_node.io_Command	IND_SETTHRESH
*	tr_node.io_Flags	IOB_QUICK set if quick I/O is possible
*	tr_time.tv_secs		the threshold seconds
*	tr_time.tv_micro	the threshold microseconds
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*	This quite simply saves the contents of the repeat threshold
*
*---------------------------------------------------------------------
IDCBSetThresh	EQU	-1

IDSetThresh:
		MOVE.L	IOTV_TIME+TV_SECS(A1),id_Thresh+TV_SECS(A6)
		MOVE.L	IOTV_TIME+TV_MICRO(A1),id_Thresh+TV_MICRO(A6)
endOKCommand:
		MOVEQ	#0,D0
		BRA	EndCommand


******* input.device/IND_SETPERIOD ***********************************
*
*   NAME
*	IND_SETPERIOD -- Set the key repeat period
*
*   FUNCTION
*	This command sets the period at which a repeating key repeats.
*
*	This command always executes immediately.
*
*   IO REQUEST - a timerequest
*	tr_node.io_Message	mn_ReplyPort set if quick I/O is not possible
*	tr_node.io_Device	preset by the call to OpenDevice
*	tr_node.io_Unit		preset by the call to OpenDevice
*	tr_node.io_Command	IND_SETPERIOD
*	tr_node.io_Flags	IOB_QUICK set if quick I/O is possible
*	tr_time.tv_secs		the repeat period seconds
*	tr_time.tv_micro	the repeat period microseconds
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*	This quite simply saves the contents of the repeat period
*
*---------------------------------------------------------------------
IDCBSetPeriod	EQU	-1

IDSetPeriod:
		MOVE.L	IOTV_TIME+TV_SECS(A1),id_Period+TV_SECS(A6)
		MOVE.L	IOTV_TIME+TV_MICRO(A1),id_Period+TV_MICRO(A6)
		BRA.S	endOKCommand


******* input.device/IND_SETMPORT ************************************
*
*   NAME
*	IND_SETMPORT -- Set the current mouse port
*
*   FUNCTION
*	This command sets the gameport port at which the mouse is
*	connected.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_SETMPORT
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	1
*	io_Data		a pointer to a byte that is either 0 or 1,
*			indicating that mouse input should be obtained
*			from either the left or right controller port,
*			respectively.
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*	This stores the IO_DATA into the correct mouse port variable.
*
*---------------------------------------------------------------------
IDSetMPort:
		move.l	IO_LENGTH(a1),d0
		subq.w	#1,d0
		bcs.s	mLenErr
		move.l	IO_DATA(a1),a0
		move.b	(a0),id_MPort(a5)
		move.l	a1,-(a7)
		bsr	ReopenMouse
		bra.s	mEndOKCommand


******* input.device/IND_SETMTYPE ************************************
*
*   NAME
*	IND_SETMTYPE -- Set the current mouse port controller type
*
*   FUNCTION
*	This command sets the type of device at the mouse port, so
*	the signals at the port may be properly interpreted.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_SETMTYPE
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	1
*	io_Data		the address of the byte variable describing
*			the controller type, as per the equates in
*			the gameport include file
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*	This stores the IO_DATA into the correct mouse port variable.
*
*---------------------------------------------------------------------
IDSetMType:
		move.l	IO_LENGTH(a1),d0
		subq.w	#1,d0
		bcs.s	mLenErr
		move.l	IO_DATA(a1),a0
		move.b	(a0),id_MType(a5)
		move.l	a1,-(a7)
		bsr	AbortMouse
		bsr	TypeMouse
		bsr	ReadMouse

mEndOKCommand:
		move.l	(a7)+,a1
		moveq	#0,d0
mEndCommand:
		move.l	a6,-(a7)
		move.l	a5,a6
		bsr	EndCommand
		move.l	(a7)+,a6
		rts

mLenErr:
		moveq	#IOERR_BADLENGTH,d0
		bra.s	mEndCommand

******* input.device/IND_SETMTRIG ************************************
*
*   NAME
*	IND_SETMTRIG -- Set the conditions for a mouse port report
*
*   FUNCTION
*	This command sets what conditions must be met by a mouse
*	before a pending Read request will be satisfied.  The trigger
*	specification is that used by the gameport device.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_SETMTRIG
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	sizeof(gameportTrigger)
*	io_Data		a structure of type GameportTrigger, which
*			has the following elements
*	    gpt_Keys -
*		    GPTB_DOWNKEYS set if button down transitions
*		    trigger a report, and GPTB_UPKEYS set if button up
*		    transitions trigger a report
*	    gpt_Timeout	-
*		    a time which, if exceeded, triggers a report;
*		    measured in vertical blank units (60/sec)
*	    gpt_XDelta	-
*		    a distance in x which, if exceeded, triggers a
*		    report
*	    gpt_YDelta	-
*		    a distance in x which, if exceeded, triggers a
*		    report
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*	This quite simply stores the correct mouse port trigger info
*	from the buffer pointed to by IO_DATA.
*
*---------------------------------------------------------------------
IDSetMTrig:
		move.l	IO_LENGTH(a1),d0
		subq.w	#gpt_SIZEOF,d0
		bcs.s	mLenErr
		move.l	IO_DATA(a1),a0
		move.l	(a0)+,id_MTrig(a5)
		move.l	(a0),id_MTrig+4(a5)
		moveq	#gpt_SIZEOF,d0
		move.l	d0,IO_ACTUAL(a1)
		move.l	a1,-(a7)
		bsr	AbortMouse
		bsr	TrigMouse
		bsr	ReadMouse
		bra.s	mEndOKCommand

	END
@


36.3
log
@use Id instead of Header for 4.x rcs
@
text
@d1 1
a1 1
	TTL	'$Id$
d19 1
a19 1
*   $Id$
d24 3
d243 1
a243 1
*	IND_WRITEEVENT -- Propagate input event(s) to all handlers
d253 2
a254 4
*	io_Length	the size of the io_Data area in bytes: there
*			are sizeof(inputEvent) bytes per input event.
*	io_Data		a buffer area with input events(s).  The
*			fields of the input event are:
d256 1
a256 2
*			links the events together, the last event
*			has a zero ie_NextEvent.
d262 1
d264 1
a264 1
*			as desired
d267 9
a275 1
*	The contents of the input event(s) are destroyed.
@


36.2
log
@for rcs 4.x header change
@
text
@d1 1
a1 1
	TTL	'$Header: /usr2/kodiak/src/KS/rawinput/RCS/inputcmds.asm,v 36.1 90/01/19 18:06:13 kodiak Exp Locker: kodiak $'	
d19 1
a19 1
*   $Header: /usr2/kodiak/src/KS/rawinput/RCS/inputcmds.asm,v 36.1 90/01/19 18:06:13 kodiak Exp Locker: kodiak $
d24 3
@


36.1
log
@make SetMXxxx commands synchronous
@
text
@d1 1
a1 1
	TTL	'$Header: inputcmds.asm,v 35.2 90/01/04 13:27:37 kodiak Exp $'	
d19 1
a19 1
*   $Header: inputcmds.asm,v 35.2 90/01/04 13:27:37 kodiak Exp $
d24 3
@


35.2
log
@polish autodoc headers
@
text
@d1 1
a1 1
	TTL	'$Header: inputcmds.asm,v 35.1 89/07/31 17:13:31 kodiak Exp $'	
d19 1
a19 1
*   $Header: inputcmds.asm,v 35.1 89/07/31 17:13:31 kodiak Exp $
d24 3
d74 5
d80 1
a97 3
	XDEF		IDCBSetMPort
	XDEF		IDCBSetMType
	XDEF		IDCBSetMTrig
d99 3
a371 2
IDCBSetMPort	EQU	-1

d373 8
a380 3
		MOVE.L	IO_LENGTH(A1),D0
		SUBQ.W	#1,D0
		BCS	lenErr
a381 4
		MOVE.L	IO_DATA(A1),A0
		MOVE.B	(A0),id_MPort(A6)
		BSET	#DUB_MOUSECHG,id_Unit+du_Flags(A6)
		RTS
a382 1

a408 2
IDCBSetMType	EQU	-1

d410 9
a418 3
		MOVE.L	IO_LENGTH(A1),D0
		SUBQ.W	#1,D0
		BCS	lenErr
d420 9
a428 4
		MOVE.L	IO_DATA(A1),A0
		MOVE.B	(A0),id_MType(A6)
		BSET	#DUB_MOUSECHG,id_Unit+du_Flags(A6)
		RTS
d430 3
a473 2
IDCBSetMTrig	EQU	-1

d475 13
a487 3
		MOVE.L	IO_LENGTH(A1),D0
		SUBQ.W	#gpt_SIZEOF,D0
		BCS.S	lenErr
d489 1
a489 20
		MOVE.L	A1,-(A7)
		LEA	id_MTrig(A6),A0
		MOVE.L	IO_DATA(A1),A1
		MOVEQ	#gpt_SIZEOF/2-1,D0
setTLoop:
		MOVE.W	(A1)+,(A0)+
		DBF	D0,setTLoop

		BSET	#DUB_MOUSECHG,id_Unit+du_Flags(A6)
		MOVE.L	(A7)+,A1
		MOVEQ	#gpt_SIZEOF,D0
		MOVE.L	D0,IO_ACTUAL(A1)
		MOVEQ	#0,D0
		BRA	EndCommand

lenErr:
		MOVEQ	#IOERR_BADLENGTH,D0
		BRA	EndCommand

		END
@


35.1
log
@autodoc change
@
text
@d1 1
a1 1
	TTL	'$Header: inputcmds.asm,v 35.0 87/10/26 11:31:15 kodiak Exp $'	
d19 1
a19 1
*   $Header: inputcmds.asm,v 35.0 87/10/26 11:31:15 kodiak Exp $
d21 1
a21 1
*   $Locker:  $
d24 3
d116 1
a116 1
******* input.device/command/Start ***********************************
d151 1
a151 1
******* input.device/command/AddHandler ******************************
d154 1
a154 1
*	AddHandler - add an input handler to the device
d190 1
a190 1
******* input.device/command/RemHandler ******************************
d193 1
a193 1
*	RemHandler - remove an input handler from the device
d222 1
a222 1
******* input.device/command/WriteEvent ******************************
d225 1
a225 1
*	WriteEvent - propagate input event(s) to all handlers
d266 1
a266 1
******* input.device/command/SetThresh *******************************
d269 1
a269 1
*	SetThresh - set the key repeat threshold
d303 1
a303 1
******* input.device/command/SetPeriod *******************************
d306 1
a306 1
*	SetPeriod - set the key repeat period
d336 1
a336 1
******* input.device/command/SetMPort ********************************
d339 1
a339 1
*	SetMPort - set the current mouse port
d376 1
a376 1
******* input.device/command/SetMType ********************************
d379 1
a379 1
*	SetMType - set the current mouse port controller type
d415 1
a415 1
******* input.device/command/SetMTrig ********************************
d418 1
a418 1
*	SetMTrig - set the conditions for a mouse port report
@


35.0
log
@initial from V34, but w/ stripped log
@
text
@d1 1
a1 1
	TTL	'$Header: inputcmds.asm,v 33.1 86/06/18 12:18:21 kodiak Exp $'	
d19 1
a19 1
*   $Header: inputcmds.asm,v 33.1 86/06/18 12:18:21 kodiak Exp $
d24 2
d27 1
d276 7
a282 7
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_SETTHRESH
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_tv_Secs	the threshold seconds
*	io_tv_Micro	the threshold microseconds
d311 7
a317 7
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	IND_SETPERIOD
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_tv_Secs	the repeat period seconds
*	io_tv_Micro	the repeat period microseconds
@
