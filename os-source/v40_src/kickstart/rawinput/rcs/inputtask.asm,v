head     40.0;
branch   ;
access   ;
symbols  V36_14:35.2 V36_13:35.2 V36_11:35.1 L36_5:35.1;
locks    ; strict;
comment  @*   @;


40.0
date     93.03.12.16.03.50;  author darren;  state Exp;
branches ;
next     36.11;

36.11
date     91.02.08.22.09.37;  author darren;  state Exp;
branches ;
next     36.10;

36.10
date     91.01.21.12.17.51;  author darren;  state Exp;
branches ;
next     36.9;

36.9
date     90.05.30.10.20.52;  author kodiak;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.22.12.10.28;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.17.17.30.57;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     90.05.10.18.48.23;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.13.12.44.36;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.02.16.30.14;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.12.58.50;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.01.22.16.29.04;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.01.19.18.06.20;  author kodiak;  state Exp;
branches ;
next     35.7;

35.7
date     89.09.20.20.51.12;  author kodiak;  state Exp;
branches ;
next     35.6;

35.6
date     89.08.08.09.54.42;  author kodiak;  state Exp;
branches ;
next     35.5;

35.5
date     89.07.12.13.28.25;  author kodiak;  state Exp;
branches ;
next     35.4;

35.4
date     89.07.11.16.57.24;  author kodiak;  state Exp;
branches ;
next     35.3;

35.3
date     89.07.07.14.08.44;  author kodiak;  state Exp;
branches ;
next     35.2;

35.2
date     88.12.31.17.53.19;  author kodiak;  state Exp;
branches ;
next     35.1;

35.1
date     88.08.02.12.27.32;  author kodiak;  state Exp;
branches ;
next     35.0;

35.0
date     87.10.26.11.31.40;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


40.0
log
@Use XREF'ed device name - save ROM space
@
text
@	TTL	'$Id: inputtask.asm,v 36.11 91/02/08 22:09:37 darren Exp Locker: darren $'
**********************************************************************
*
*			------------
*   inputtask.asm	INPUT DEVICE		input task
*			------------
*
*   Copyright 1985, 1987 Commodore-Amiga Inc.
*
*   Source Control	$Locker: darren $
*
*   $Log:	inputtask.asm,v $
*   Revision 36.11  91/02/08  22:09:37  darren
*   No changes
*   
*   Revision 36.10  91/01/21  12:17:51  darren
*   Key repeat for 101 keys, but not for CDTV keys since the CDTV group
*   currently wants to use 1.3, but we may hose them later if we repeat
*   these under 2.0.  The could not have been repeated under 1.3 since
*   the CDTV keycodes are greater than $60.
*   
*   Revision 36.9  90/05/30  10:20:52  kodiak
*   recode, save 12 bytes
*   
*   Revision 36.8  90/05/22  12:10:28  kodiak
*   sets ie_TimeStamp for any IND_WRITEEVENT command event
*   
*   Revision 36.7  90/05/17  17:30:57  kodiak
*   sets ie_TimeStamp correctly in coalesced mouse events
*   
*   Revision 36.6  90/05/10  18:48:23  kodiak
*   use GetSysTime function instead of GETSYSTIME command
*   fix contents of id_RepeatNumeric to include numeric bit, not exclude it
*   
*   Revision 36.5  90/04/13  12:44:36  kodiak
*   use Id instead of Header for 4.x rcs
*   
*   Revision 36.4  90/04/02  16:30:14  kodiak
*   back to using dd_ExecBase, not SYSBASE (4)
*   
*   Revision 36.3  90/04/02  12:58:50  kodiak
*   for rcs 4.x header change
*   
*   Revision 36.2  90/01/22  16:29:04  kodiak
*   don't coalesce movement onto first occurance of button transition
*   
*   Revision 36.1  90/01/19  18:06:20  kodiak
*   make SetMXxxx commands synchronous
*   
*   Revision 35.7  89/09/20  20:51:12  kodiak
*   first cut at fixing initialization race condition (message port
*   initialization of command queue in task)
*   
*   Revision 35.6  89/08/08  09:54:42  kodiak
*   fix repeat strategy to allow corruption of repeat input event on food chain
*   
*   Revision 35.5  89/07/12  13:28:25  kodiak
*   have input task ReadEvent multiple events from gameport
*   (and have it work)
*   
*   Revision 35.4  89/07/11  16:57:24  kodiak
*   do not affect repeat in progress with qualifier key transitions
*   
*   Revision 35.3  89/07/07  14:08:44  kodiak
*   double buffer requests to keyboard device
*   
*   Revision 35.2  88/12/31  17:53:19  kodiak
*   set qualifier word on tick event
*   
*   Revision 35.1  88/08/02  12:27:32  kodiak
*   use SYSBASE (4) vs. dd_ExecBase
*   (a poor decision, in hindsight)
*   
*   Revision 35.0  87/10/26  11:31:40  kodiak
*   initial from V34, but w/ stripped log
*   
**********************************************************************

	SECTION		rawinput

*------ Included Files -----------------------------------------------

	INCLUDE		"exec/types.i"
	INCLUDE		"exec/nodes.i"
	INCLUDE		"exec/lists.i"
	INCLUDE		"exec/memory.i"
	INCLUDE		"exec/ports.i"
	INCLUDE		"exec/libraries.i"
	INCLUDE		"exec/devices.i"
	INCLUDE		"exec/tasks.i"
	INCLUDE		"exec/interrupts.i"
	INCLUDE		"exec/io.i"
	INCLUDE		"exec/strings.i"

	INCLUDE		"devices/timer.i"

	INCLUDE		"inputevent.i"
	INCLUDE		"gameport.i"
	INCLUDE		"keyboard.i"
	INCLUDE		"input.i"

	INCLUDE		"macros.i"
	INCLUDE		"stddevice.i"
	INCLUDE		"iddata.i"

*------ Imported Names -----------------------------------------------

	XREF_EXE	AllocSignal
	XREF_EXE	CloseDevice
	XREF_EXE	GetMsg
	XREF_EXE	OpenDevice
	XREF_EXE	SetSignal
	XREF_EXE	Signal
	XREF_EXE	Wait
	XREF_EXE	WaitIO

	XREF		_LVOGetSysTime	; timer device

	XREF		InitMsgPort

	XREF		IDAddHandler
	XREF		IDRemHandler
	XREF		IDWriteEvent
	XREF		IDSetMPort
	XREF		IDSetMType
	XREF		IDSetMTrig

	XREF		GDName

*------ Exported Functions -------------------------------------------

	XDEF		IDTaskStart

	XDEF		DispatchEvents

	XDEF		ReopenMouse
	XDEF		AbortMouse
	XDEF		TypeMouse
	XDEF		TrigMouse
	XDEF		ReadMouse

	IFNE		TV_SIZE-8
	FAIL		"recode MOVEM statements that move time values"
	ENDC

*------ constants ----------------------------------------------------

HIGH_KEYCODE    EQU 	$71		;Max for 101 keyboard
					;See also kbdata.i

*------ input.device task --------------------------------------------
*
*   Handle the following signals:
*	PORT		A command has been posted to the message port
*	IEVENT		An I/O read has been satisfied
*
*---------------------------------------------------------------------
IDTaskStart:
	;------ Grab the arguments
		move.l	4(sp),a5		; input device
		move.l	dd_ExecBase(a5),a6

		lea	id_Unit(a5),a0
		bsr	InitMsgPort
		moveq	#0,d7
		bset	d0,d7			; save for signal mask
		move.l	d7,d6
		lea	id_IEPort(a5),a0
		move.l	a0,id_TIOR+MN_REPLYPORT(a5)
		move.l	a0,id_MIOR+MN_REPLYPORT(a5)
		move.l	a0,id_K1IOR+MN_REPLYPORT(a5)
		move.l	a0,id_K2IOR+MN_REPLYPORT(a5)
		move.l	a0,id_RIOR+MN_REPLYPORT(a5)
		bsr	InitMsgPort
		move.w	#TIMERCODE,id_TIOR+MN_LENGTH(a5)
		move.w	#MOUSECODE,id_MIOR+MN_LENGTH(a5)
		move.w	#KEYBOARDCODE,id_K1IOR+MN_LENGTH(a5)
		move.w	#KEYBOARDCODE,id_K2IOR+MN_LENGTH(a5)
		move.w	#REPEATCODE,id_RIOR+MN_LENGTH(a5)
		bset	d0,d7			; save for signal mask

	;------	indicate input.task ready to go
		move.l	id_Stk(a5),a1
		moveq	#SIGF_SINGLE,d0
		CALLEXE	Signal

	;------ Wait for someone to use input.task before setting up reads
		move.l	d7,d0
		CALLEXE Wait

		move.l	d0,d2			    ; save signals
		bsr.s	openGameport

*	    ;------ Fire up reads to the input devices
		bsr	readTimer
		bsr	readKeyboard
		bsr	readKeyboard
		bra	checkPort	; go read the port that started this

;---------------------------------------------------------------------

AbortMouse:
		tst.l	id_MIOR+IO_DEVICE(a5)
		beq.s	agRts

		lea	id_MIOR(a5),a1
		move.l	IO_DEVICE(a1),a6
		jsr	DEV_ABORTIO(a6)
		move.l	dd_ExecBase(a5),a6
		lea	id_MIOR(a5),a1
		CALLEXE	WaitIO
agRts:
		rts


ReopenMouse:
		tst.l	id_MIOR+IO_DEVICE(a5)
		beq.s	openGameport

		bsr.s	AbortMouse

		lea	id_MIOR(a5),a1
		CALLEXE	CloseDevice

openGameport:
	    ;------ open the GamePort device
		lea	GDName(pc),a0
		moveq	#0,d0
		move.b	id_MPort(a5),d0		; get game port
		moveq	#0,d1
		lea	id_MIOR(a5),a1
		CALLEXE OpenDevice
		tst.l	d0
		beq.s	ogSetAll

		clr.l	id_MIOR+IO_DEVICE(a5)

ogSetAll:
		bsr.s	TypeMouse
		bsr.s	TrigMouse
		bra	ReadMouse


TypeMouse:
		tst.l	id_MIOR+IO_DEVICE(a5)
		beq.s	tgRts
	    ;------ Select the Game Port controller type
		lea	id_MIOR(a5),a1
		move.w	#GPD_SETCTYPE,IO_COMMAND(a1)
		move.l	#1,IO_LENGTH(a1)
		lea	id_MType(a5),a0
		bra.s	doMouseIO
		rts

TrigMouse:
		tst.l	id_MIOR+IO_DEVICE(a5)
		beq.s	tgRts
	    ;------ Set the Game Port output trigger
		lea	id_MIOR(a5),a1
		move.w	#GPD_SETTRIGGER,IO_COMMAND(a1)
		move.l	#8,IO_LENGTH(a1)
		lea	id_MTrig(a5),a0

doMouseIO:
		move.l	a0,IO_DATA(a1)
		move.b	#IOF_QUICK,IO_FLAGS(a1)
		bsr	sendIO
		lea	id_MIOR(a5),a1
		CALLEXE	WaitIO

tgRts:
		rts


;---------------------------------------------------------------------

taskWait:
*	    ;------ Wait for something to do
		btst	#DUB_STOPPED,id_Unit+du_Flags(a5)
		beq.s	regularWait
	    ;------ Stopped: wait for start signal
		move.l	d6,d0
		CALLEXE Wait
		bra.s	continue

regularWait:
		move.l	d7,d0
		CALLEXE Wait

		btst	#DUB_STOPPED,id_Unit+du_Flags(a5)
		beq.s	continue
	    ;------ Stopped: ensure wakeup is for start signal only
		move.l	d0,d2		; save start signal
		and.l	d6,d2

		move.l	d7,d1		; set IE signal again if set
		eor.l	d6,d1
		move.l	d1,d3
		and.l	d0,d3
		beq.s	checkIE
		CALLEXE	SetSignal
		bra.s	checkIE

continue:
		move.l	d0,d2			    ; save signals

checkIE:
		move.b	id_IEPort+MP_SIGBIT(a5),d0
		ext.w	d0
		btst	d0,d2
		beq	checkPort
*	    ;------ See who it is
readIEPort:
		lea	id_IEPort(a5),a0
		CALLEXE	GetMsg
		tst.l	d0
		beq	checkPort		; no more messages
		move.l	d0,a0
		move.w	MN_LENGTH(a0),d0	; get message id
		jmp	dispatchMsg(pc,d0.w)


		;-- dispatch offset base
dispatchMsg:


*	    ;------ Dispatch Timer
gotTimer:
		lea	id_TData(a5),a3
		move.l	timerEventTemplate(pc),ie_Class(a3)
		clr.l	ie_X(a3)
		move.w	id_Qualifier(a5),ie_Qualifier(a3)
		bsr	DispatchEvents
		bsr	readTimer
		bra.s	readIEPort

*	    ;------ Dispatch Mouse
gotMouse:
		lea	id_MData(a5),a3
		move.w	id_MIOR+IO_ACTUAL+2(a5),d5

nextMouse:
		move.w	ie_Qualifier(a3),d0
		move.w	id_Qualifier(a5),d1
		move.w	d1,d3			; save old qualifiers
		andi.w	#ID_MOUSEMASK,d0
		andi.w	#(~ID_MOUSEMASK)&$FFFF,d1
		or.w	d0,d1
		move.w	d1,ie_Qualifier(a3)
		move.w	d1,id_Qualifier(a5)

		;------	avoid coalesce of first qualifier transition
		sub.w	#ie_SIZEOF,d5
		ble.s	dispatchMouse
		andi.w	#ID_MOUSEMASK,d3
		cmp.w	d0,d3
		bne.s	dispatchMouse

		;------ coalesce subsequent mouse events with the same qualifier
coalesceMouse:
		move.w	ie_Qualifier+ie_SIZEOF(a3),d1
		andi.w	#ID_MOUSEMASK,d1
		cmp.w	d0,d1
		bne.s	dispatchMouse

		add.w	#ie_SIZEOF,a3
		move.w	ie_X-ie_SIZEOF(a3),d3
		add.w	d3,ie_X(a3)
		move.w	ie_Y-ie_SIZEOF(a3),d3
		add.w	d3,ie_Y(a3)
		move.w	ie_Code-ie_SIZEOF(a3),ie_Code(a3)
		move.w	ie_Qualifier-ie_SIZEOF(a3),ie_Qualifier(a3)
		sub.w	#ie_SIZEOF,d5
		bgt.s	coalesceMouse

dispatchMouse:
		bsr	DispatchEvents
		add.w	#ie_SIZEOF,a3
		tst.w	d5
		bgt.s	nextMouse


*		;------ requeue mouse read
		bsr	ReadMouse
		bra	readIEPort

*	    ;------ Dispatch Key
gotKeyboard:
		lea	id_K1Data-id_K1IOR(a0),a3
		move.w	ie_Qualifier(a3),d0
		move.w	id_Qualifier(a5),d1
		andi.w	#ID_KEYMASK,d0
		andi.w	#~ID_KEYMASK,d1
		or.w	d0,d1
		move.w	d1,ie_Qualifier(a3)
		move.w	d1,id_Qualifier(a5)

		move.w	ie_Code(a3),d0
		bclr	#IECODEB_UP_PREFIX,d0
		bne.s	upKey

		;------	qualifier keys don't affect PrevKey or repeatability
		;
		;------ new 101 keys >= $6b
		;------ 0-5f  >> repeat
		;------ 60-6a >> no repeat
		;------ 6b-71 >> repeat
		;------ 72-7f >> no repeat (101 keys won't repeat since
                ;                they don't repeat under 1.3.


		cmp.w	#START_QUAL,d0		;if < $60; repeat
		blt.s	doPrevKey
		cmp.w	#HIGH_KEYCODE,d0	;if > $71; no repeat
		bhi.s	dispatchKey
		cmp.w	#END_QUAL,d0		;if <= $6a; no repeat
		bls.s	dispatchKey

doPrevKey:
		;------ save this down key in PrevKey variable
		move.l	id_Prev1Down(a5),ie_EventAddress(a3)
		move.w	id_Prev1Down(a5),id_Prev2Down(a5)
		move.b	d0,id_Prev1DownCode(a5)
		move.b	d1,id_Prev1DownQual(a5)

		;------ check for previous repeat key candidate
		tst.w	id_RepeatCode(a5)
		bmi.s	cacheRepeat
		bsr	abortRepeat
cacheRepeat:
		;------	post this key for repeating
		move.w	ie_Code(a3),id_RepeatCode(a5)
		move.w	ie_Qualifier(a3),d0
		and.w	#IEQUALIFIER_NUMERICPAD,d0
		or.w	#IEQUALIFIER_REPEAT,d0
		move.w	d0,id_RepeatNumeric(a5)
		bsr	postThresh
		bra.s	dispatchKey

upKey:
		cmp.w	id_RepeatCode(a5),d0
		bne.s	dispatchKey

		;------	up report for repeat code, abort the repeat
		move.w	#-1,id_RepeatCode(a5)
		bsr	abortRepeat

dispatchKey:
		bsr	DispatchEvents
*		;------ requeue keyboard read
		bsr	readKeyboard
		bra	readIEPort


	;--- Dispatch Repeat
gotRepeat:
		move.w	id_RepeatCode(a5),d0
		bmi	readIEPort	; no repeatable key pending
		lea	id_RepeatKey(a5),a3
		move.w	#(IECLASS_RAWKEY<<8),ie_Class(a3)	; & ie_SubClass
		move.w	d0,ie_Code(a3)
		move.w	id_Qualifier(a5),d0
		and.w	#~IEQUALIFIER_NUMERICPAD,d0
		or.w	id_RepeatNumeric(a5),d0
		move.w	d0,ie_Qualifier(a3)
		move.l	id_Prev1Down(a5),ie_EventAddress(a3)
		bsr	DispatchEvents
*		;------ requeue repeat key
		bsr	postPeriod
		bra	readIEPort


checkPort:
	    ;------ check if a command is at the command port
		move.l	id_Unit+MP_MSGLIST(a5),a1
		tst.l	(a1)
		beq	taskWait

		move.w	IO_COMMAND(a1),d0
		bclr    #IOB_QUICK,IO_FLAGS(a1)	; jimm: 8/1/86
		sub.w	#IND_ADDHANDLER,d0
		lsl.w	#2,d0
		lea	cmdVectors(pc),a0
		move.l	0(a0,d0.w),a0
		jsr	(a0)
		bra.s	checkPort


cmdVectors:
		dc.l	IDAddHandler
		dc.l	IDRemHandler
		dc.l	IDWriteEvent
		dc.l	0
		dc.l	0
		dc.l	IDSetMPort
		dc.l	IDSetMType
		dc.l	IDSetMTrig

timerEventTemplate:
		dc.b	IECLASS_TIMER
		dc.b	0
		dc.w	0


*------ readTimer -----------------------------------------------------
readTimer:
		lea	id_TIOR(a5),a1
		move.w	#TR_ADDREQUEST,IO_COMMAND(a1)
		clr.b	IO_FLAGS(a1)
		move.l	#ID_TEVENTSECS,IOTV_TIME+TV_SECS(a1)
		move.l	#ID_TEVENTMICRO,IOTV_TIME+TV_MICRO(a1)
		bra.s	sendIO


*------ ReadMouse -----------------------------------------------------
ReadMouse:
		tst.l	id_MIOR+IO_DEVICE(a5)
		beq.s	sRts
		lea	id_MIOR(a5),a1
		move.w	#GPD_READEVENT,IO_COMMAND(a1)
		clr.b	IO_FLAGS(a1)
		move.l	#ie_SIZEOF*MOUSEAHEAD,IO_LENGTH(a1)
		lea	id_MData(a5),a0
		move.l	a0,IO_DATA(a1)
		bra.s	sendIO


*------ readKeyboard --------------------------------------------------
readKeyboard:
		lea	id_K1IOR(a5),a1
		moveq	#id_K2IOR-id_K1IOR,d0
		and.b	id_KRActiveMask(a5),d0
		not.b	id_KRActiveMask(a5)
		add.w	d0,a1
		move.w	#KBD_READEVENT,IO_COMMAND(a1)
		clr.b	IO_FLAGS(a1)
		move.l	#ie_SIZEOF,IO_LENGTH(a1)
		lea	id_K1Data-id_K1IOR(a1),a0
		move.l	a0,IO_DATA(a1)
sendIO:
		move.l	IO_DEVICE(a1),a6
		jsr	DEV_BEGINIO(a6)
		move.l	dd_ExecBase(a5),a6
sRts:
		rts


*------ postThresh ----------------------------------------------------
postThresh:
		lea	id_RIOR(a5),a1
		move.w	#TR_ADDREQUEST,IO_COMMAND(a1)
		clr.b	IO_FLAGS(a1)
		move.l	id_Thresh+TV_SECS(a5),IOTV_TIME+TV_SECS(a1)
		move.l	id_Thresh+TV_MICRO(a5),IOTV_TIME+TV_MICRO(a1)
		bra.s	sendIO


*------ postPeriod ----------------------------------------------------
postPeriod:
		lea	id_RIOR(a5),a1
		move.w	#TR_ADDREQUEST,IO_COMMAND(a1)
		clr.b	IO_FLAGS(a1)
		move.l	id_Period+TV_SECS(a5),IOTV_TIME+TV_SECS(a1)
		move.l	id_Period+TV_MICRO(a5),IOTV_TIME+TV_MICRO(a1)
		bra.s	sendIO


*------ abortRepeat ---------------------------------------------------
abortRepeat:
		lea	id_RIOR(a5),a1
		move.l	IO_DEVICE(a1),a6
		jsr	DEV_ABORTIO(a6)
		move.l	dd_ExecBase(a5),a6
		lea	id_RIOR(a5),a1
		CALLEXE	WaitIO
		rts


*------ DispatchEvents ------------------------------------------------
DispatchEvents:
		move.l	a6,-(a7)
		lea	ie_TimeStamp(a3),a0
		move.l	id_RIOR+IO_DEVICE(a5),a6
		jsr	_LVOGetSysTime(a6)
		move.l	(a7)+,a6
		move.l	a3,a0
		clr.l	ie_NextEvent(a3)
		move.l	id_HandlerList(a5),a4
handlerLoop:
		tst.l	(a4)
		beq.s	dRts
		move.l	IS_CODE(a4),a2
		move.l	IS_DATA(a4),a1
		move.l	(a4),a4
		jsr	(a2)
		tst.l	d0		; no sense propagating nothing
		beq.s	dRts
		move.l	d0,a0
		bra.s	handlerLoop
dRts:
		rts

TIMERCODE	EQU	gotTimer-dispatchMsg
MOUSECODE	EQU	gotMouse-dispatchMsg
KEYBOARDCODE	EQU	gotKeyboard-dispatchMsg
REPEATCODE	EQU	gotRepeat-dispatchMsg

	END
@


36.11
log
@No changes
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.10 91/01/21 12:17:51 darren Exp Locker: darren $'
d13 3
d128 2
a200 4
GDName:
		dc.b	'gameport.device'
		dc.b	0
		ds.w	0
@


36.10
log
@Key repeat for 101 keys, but not for CDTV keys since the CDTV group
currently wants to use 1.3, but we may hose them later if we repeat
these under 2.0.  The could not have been repeated under 1.3 since
the CDTV keycodes are greater than $60.
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.9 90/05/30 10:20:52 kodiak Exp Locker: darren $'
d13 6
@


36.9
log
@recode, save 12 bytes
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.8 90/05/22 12:10:28 kodiak Exp Locker: kodiak $'
d10 1
a10 1
*   Source Control	$Locker: kodiak $
d13 3
d135 5
d392 1
a392 1
		btst	#IECODEB_UP_PREFIX,d0
d396 7
a402 2
		cmp.w	#$60,d0
		bge.s	dispatchKey
d404 9
a433 1
		bclr	#IECODEB_UP_PREFIX,d0
@


36.8
log
@sets ie_TimeStamp for any IND_WRITEEVENT command event
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.7 90/05/17 17:30:57 kodiak Exp Locker: kodiak $'
d13 3
d308 1
a308 2
	;------ Dispatch Table

a309 8
TIMERCODE	EQU	*-dispatchMsg
		bra.s	gotTimer
MOUSECODE	EQU	*-dispatchMsg
		bra.s	gotMouse
KEYBOARDCODE	EQU	*-dispatchMsg
		bra	gotKeyboard
REPEATCODE	EQU	*-dispatchMsg
		bra	gotRepeat
d575 6
a580 1
		END
@


36.7
log
@sets ie_TimeStamp correctly in coalesced mouse events
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.6 90/05/10 18:48:23 kodiak Exp Locker: kodiak $'
d13 3
a322 2
		bsr	readTime
		movem.l	d3-d4,ie_TimeStamp(a3)
a333 2
		bsr	readTime
		movem.l	d3-d4,ie_TimeStamp(a3)
a363 2
		move.l	ie_TimeStamp-ie_SIZEOF(a3),ie_TimeStamp(a3)
		move.l	ie_TimeStamp+4-ie_SIZEOF(a3),ie_TimeStamp+4(a3)
a380 2
		bsr	readTime
		movem.l	d3-d4,ie_TimeStamp(a3)
a444 2
		bsr	readTime
		movem.l	d3-d4,ie_TimeStamp(a3)
a525 11
*------ readTime ------------------------------------------------------
readTime:
		move.l	a6,-(a7)
		subq.l	#8,a7
		move.l	a7,a0
		move.l	id_RIOR+IO_DEVICE(a5),a6
		jsr	_LVOGetSysTime(a6)
		movem.l	(a7)+,d3-d4/a6
		rts


d559 5
@


36.6
log
@use GetSysTime function instead of GETSYSTIME command
fix contents of id_RepeatNumeric to include numeric bit, not exclude it
@
text
@d1 1
a1 1
	TTL	'$Id: inputtask.asm,v 36.5 90/04/13 12:44:36 kodiak Exp Locker: kodiak $'
d13 4
d365 2
@


36.5
log
@use Id instead of Header for 4.x rcs
@
text
@d1 1
a1 1
	TTL	'$Id$
d13 3
d95 2
a144 1
		move.l	a0,id_SIOR+MN_REPLYPORT(a5)
d410 1
a410 1
		and.w	#~IEQUALIFIER_NUMERICPAD,d0
d529 6
a534 7
		lea	id_SIOR(a5),a1
		move.w	#TR_GETSYSTIME,IO_COMMAND(a1)
		move.b	#IOF_QUICK,IO_FLAGS(a1)
		bsr.s	sendIO
		lea	id_SIOR(a5),a1
		CALLEXE	WaitIO
		movem.l	id_SIOR+IOTV_TIME(a5),d3-d4
@


36.4
log
@back to using dd_ExecBase, not SYSBASE (4)
@
text
@d1 1
a1 1
	TTL	'$Header: /usr2/kodiak/src/KS/rawinput/RCS/inputtask.asm,v 36.3 90/04/02 12:58:50 kodiak Exp Locker: kodiak $'
d13 3
@


36.3
log
@for rcs 4.x header change
@
text
@d1 1
a1 1
	TTL	'$Header: /usr2/kodiak/src/KS/rawinput/RCS/inputtask.asm,v 36.2 90/01/22 16:29:04 kodiak Exp Locker: kodiak $'
d13 3
d124 1
a145 2
		move.l	SYSBASE,a6

d177 1
a177 1
		move.l	SYSBASE,a6
d515 1
a515 1
		move.l	SYSBASE,a6
d557 1
a557 1
		move.l	SYSBASE,a6
@


36.2
log
@don't coalesce movement onto first occurance of button transition
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 36.1 90/01/19 18:06:20 kodiak Exp $'
d13 3
@


36.1
log
@make SetMXxxx commands synchronous
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.7 89/09/20 20:51:12 kodiak Exp $'
d10 1
a10 1
*   Source Control	$Locker:  $
d13 3
d321 1
d327 8
a336 2
		sub.w	#ie_SIZEOF,d5
		ble.s	dispatchMouse
d349 2
a350 1
		bra.s	coalesceMouse
@


35.7
log
@first cut at fixing initialization race condition (message port
initialization of command queue in task)
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.6 89/08/08 09:54:42 kodiak Exp $'
d10 1
a10 1
*   Source Control	$Locker: kodiak $
d13 4
d85 3
d95 6
d162 1
a162 1
resetGameport:
d164 1
a164 1
		beq.s	openGameport
d172 10
a185 1
		bclr	#DUB_MOUSECHG,id_Unit+du_Flags(a5)
d194 1
a194 1
		bne	initGDErr
d196 12
a207 1
*	    ;------ Select the Game Port controller type
d212 2
a213 1
		bsr.s	doMouseIO
d215 4
a218 1
*	    ;------ Set the Game Port output trigger
a222 1
		bsr.s	doMouseIO
a223 2
		bra	readMouse

a229 1
		rts
d231 1
a231 2
initGDErr:
		clr.l	id_MIOR+IO_DEVICE(a5)
a232 1
		
d234 1
d271 1
a271 1
		beq	checkReGameport
d277 1
a277 1
		beq	checkReGameport		; no more messages
a309 2
		btst	#DUB_MOUSECHG,id_Unit+du_Flags(a5)
		bne.s	reMouse			; the report is obsolete
d349 1
a349 2
		bsr	readMouse
reMouse:
a428 5
checkReGameport:
		btst	#DUB_MOUSECHG,id_Unit+du_Flags(a5)
		beq.s	checkPort
		bsr	resetGameport

d430 1
a430 6
		move.b	id_Unit+MP_SIGBIT(a5),d1
		ext.w	d1
		btst	d1,d2
		beq	taskWait

*	    ;------ check if a command is at the command port
d442 1
a442 1
		bra	taskWait
d449 5
d471 4
a474 2
*------ readMouse -----------------------------------------------------
readMouse:
d500 1
@


35.6
log
@fix repeat strategy to allow corruption of repeat input event on food chain
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.5 89/07/12 13:28:25 kodiak Exp $'
d13 3
d72 1
d124 5
@


35.5
log
@have input task ReadEvent multiple events from gameport
(and have it work)
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.4 89/07/11 16:57:24 kodiak Exp $'
d13 4
d333 1
a333 1
		bge.s	updateRepeatQualifier
d342 2
a343 2
		tst.w	id_RepeatKey+ie_Code(a5)
		bmi.s	copyEvent
d345 1
a345 10
copyEvent:
		;------ save this input event
		moveq	#((ie_SIZEOF-ie_Class)/2)-1,d1
		lea	id_RepeatKey+ie_Class(a5),a1
		lea	ie_Class(a3),a0

copyEventLoop:
		move.w	(a0)+,(a1)+
		dbf	d1,copyEventLoop

d347 5
a351 1
		ori.w	#IEQUALIFIER_REPEAT,id_RepeatKey+ie_Qualifier(a5)
d357 2
a358 2
		cmp.w	id_RepeatKey+ie_Code(a5),d0
		beq.s	upRepeatKey
d360 2
a361 8
updateRepeatQualifier:
		move.w	id_Qualifier(a5),d1
		ori.w	#IEQUALIFIER_REPEAT,d1
		move.w	d1,id_RepeatKey+ie_Qualifier(a5)
		bra.s	dispatchKey

upRepeatKey:
		move.w	#-1,id_RepeatKey+ie_Code(a5)
d373 2
d376 7
a382 2
		tst.w	ie_Code(a3)
		bmi	readIEPort	; no repeatable key pending
a384 7
		move.w	ie_Qualifier(a3),d0
		move.w	id_Qualifier(a5),d1
		andi.w	#ID_KEYMASK,d0
		andi.w	#~ID_KEYMASK,d1
		or.w	d0,d1
		move.w	d1,ie_Qualifier(a3)
		move.w	d1,id_Qualifier(a5)
@


35.4
log
@do not affect repeat in progress with qualifier key transitions
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.3 89/07/07 14:08:44 kodiak Exp $'
d13 3
d93 1
a93 1
		MOVE.L	4(SP),A5		; input device
d95 19
a113 19
		LEA	id_Unit(A5),A0
		BSR	InitMsgPort
		MOVEQ	#0,D7
		BSET	D0,D7			; save for signal mask
		MOVE.L	D7,D6
		LEA	id_IEPort(A5),A0
		MOVE.L	A0,id_TIOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_MIOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_K1IOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_K2IOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_RIOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_SIOR+MN_REPLYPORT(A5)
		BSR	InitMsgPort
		MOVE.w	#TIMERCODE,id_TIOR+MN_LENGTH(A5)
		MOVE.w	#MOUSECODE,id_MIOR+MN_LENGTH(A5)
		MOVE.w	#KEYBOARDCODE,id_K1IOR+MN_LENGTH(A5)
		MOVE.w	#KEYBOARDCODE,id_K2IOR+MN_LENGTH(A5)
		MOVE.w	#REPEATCODE,id_RIOR+MN_LENGTH(A5)
		BSET	D0,D7			; save for signal mask
d115 1
a115 1
		MOVE.L	SYSBASE,A6
d118 1
a118 1
		MOVE.L	D7,D0
d121 2
a122 2
		MOVE.L	D0,D2			    ; save signals
		BSR.S	openGameport
d125 4
a128 4
		BSR	readTimer
		BSR	readKeyboard
		BSR	readKeyboard
		BRA	checkPort	; go read the port that started this
d132 3
a134 3
		DC.B	'gameport.device'
		DC.B	0
		DS.W	0
d137 2
a138 2
		TST.L	id_MIOR+IO_DEVICE(A5)
		BEQ.S	openGameport
d140 5
a144 5
		LEA	id_MIOR(A5),A1
		MOVE.L	IO_DEVICE(A1),A6
		JSR	DEV_ABORTIO(A6)
		MOVE.L	SYSBASE,A6
		LEA	id_MIOR(A5),A1
d146 1
a146 1
		LEA	id_MIOR(A5),A1
d150 1
a150 1
		BCLR	#DUB_MOUSECHG,id_Unit+du_Flags(A5)
d152 5
a156 5
		LEA	GDName(PC),A0
		MOVEQ	#0,D0
		MOVE.B	id_MPort(A5),D0		; get game port
		MOVEQ	#0,D1
		LEA	id_MIOR(A5),A1
d158 2
a159 2
		TST.L	D0
		BNE	initGDErr
d162 5
a166 5
		LEA	id_MIOR(A5),A1
		MOVE.W	#GPD_SETCTYPE,IO_COMMAND(A1)
		MOVE.L	#1,IO_LENGTH(A1)
		LEA	id_MType(A5),A0
		BSR.S	doMouseIO
d169 5
a173 5
		LEA	id_MIOR(A5),A1
		MOVE.W	#GPD_SETTRIGGER,IO_COMMAND(A1)
		MOVE.L	#8,IO_LENGTH(A1)
		LEA	id_MTrig(A5),A0
		BSR.S	doMouseIO
d175 1
a175 1
		BRA	readMouse
d178 4
a181 4
		MOVE.L	A0,IO_DATA(A1)
		MOVE.B	#IOF_QUICK,IO_FLAGS(A1)
		BSR	sendIO
		LEA	id_MIOR(A5),A1
d183 1
a183 1
		RTS
d186 2
a187 2
		CLR.L	id_MIOR+IO_DEVICE(A5)
		RTS
d194 2
a195 2
		BTST	#DUB_STOPPED,id_Unit+du_Flags(A5)
		BEQ.S	regularWait
d197 1
a197 1
		MOVE.L	D6,D0
d199 1
a199 1
		BRA.S	continue
d202 1
a202 1
		MOVE.L	D7,D0
d205 2
a206 2
		BTST	#DUB_STOPPED,id_Unit+du_Flags(A5)
		BEQ.S	continue
d208 2
a209 2
		MOVE.L	D0,D2		; save start signal
		AND.L	D6,D2
d211 5
a215 5
		MOVE.L	D7,D1		; set IE signal again if set
		EOR.L	D6,D1
		MOVE.L	D1,D5
		AND.L	D0,D5
		BEQ.S	checkIE
d217 1
a217 1
		BRA.S	checkIE
d220 1
a220 1
		MOVE.L	D0,D2			    ; save signals
d223 4
a226 4
		MOVE.B	id_IEPort+MP_SIGBIT(A5),D0
		EXT.W	D0
		BTST	D0,D2
		BEQ	checkReGameport
d229 1
a229 1
		LEA	id_IEPort(A5),A0
d231 2
a232 2
		TST.L	D0
		BEQ	checkReGameport		; no more messages
d246 1
a246 1
		bra.s	gotKeyboard
d253 5
a257 5
		LEA	id_TData(A5),A3
		MOVE.L	timerEventTemplate(PC),ie_Class(A3)
		CLR.L	ie_X(A3)
		BSR	readTime
		MOVEM.L	D3-D4,ie_TimeStamp(A3)
d259 3
a261 3
		BSR	DispatchEvents
		BSR	readTimer
		BRA.S	readIEPort
d265 40
a304 13
		BTST	#DUB_MOUSECHG,id_Unit+du_Flags(A5)
		BNE.S	reMouse			; the report is obsolete
		LEA	id_MData(A5),A3
		BSR	readTime
		MOVEM.L	D3-D4,ie_TimeStamp(A3)
		MOVE.W	ie_Qualifier(A3),D0
		MOVE.W	id_Qualifier(A5),D1
		ANDI.W	#ID_MOUSEMASK,D0
		ANDI.W	#(~ID_MOUSEMASK)&$FFFF,D1
		OR.W	D0,D1
		MOVE.W	D1,ie_Qualifier(A3)
		MOVE.W	D1,id_Qualifier(A5)
		BSR	DispatchEvents
d306 1
a306 1
		BSR	readMouse
d308 1
a308 1
		BRA	readIEPort
d312 10
a321 10
		LEA	id_K1Data-id_K1IOR(a0),A3
		BSR	readTime
		MOVEM.L	D3-D4,ie_TimeStamp(A3)
		MOVE.W	ie_Qualifier(A3),D0
		MOVE.W	id_Qualifier(A5),D1
		ANDI.W	#ID_KEYMASK,D0
		ANDI.W	#~ID_KEYMASK,D1
		OR.W	D0,D1
		MOVE.W	D1,ie_Qualifier(A3)
		MOVE.W	D1,id_Qualifier(A5)
d323 3
a325 3
		MOVE.W	ie_Code(A3),D0
		BTST	#IECODEB_UP_PREFIX,D0
		BNE.S	upKey
d328 2
a329 2
		CMP.W	#$60,D0
		BGE.S	updateRepeatQualifier
d332 4
a335 4
		MOVE.L	id_Prev1Down(A5),ie_EventAddress(A3)
		MOVE.W	id_Prev1Down(A5),id_Prev2Down(A5)
		MOVE.B	D0,id_Prev1DownCode(A5)
		MOVE.B	D1,id_Prev1DownQual(A5)
d338 3
a340 3
		TST.W	id_RepeatKey+ie_Code(A5)
		BMI.S	copyEvent
		BSR	abortRepeat
d343 3
a345 3
		MOVEQ	#((ie_SIZEOF-ie_Class)/2)-1,D1
		LEA	id_RepeatKey+ie_Class(A5),A1
		LEA	ie_Class(A3),A0
d348 2
a349 2
		MOVE.W	(A0)+,(A1)+
		DBF	D1,copyEventLoop
d352 3
a354 3
		ORI.W	#IEQUALIFIER_REPEAT,id_RepeatKey+ie_Qualifier(A5)
		BSR	postThresh
		BRA.S	dispatchKey
d357 3
a359 3
		BCLR	#IECODEB_UP_PREFIX,D0
		CMP.W	id_RepeatKey+ie_Code(A5),D0
		BEQ.S	upRepeatKey
d362 3
a364 3
		MOVE.W	id_Qualifier(A5),D1
		ORI.W	#IEQUALIFIER_REPEAT,d1
		move.w	d1,id_RepeatKey+ie_Qualifier(A5)
d368 2
a369 2
		MOVE.W	#-1,id_RepeatKey+ie_Code(A5)
		BSR	abortRepeat
d372 1
a372 1
		BSR	DispatchEvents
d374 2
a375 2
		BSR	readKeyboard
		BRA	readIEPort
d380 13
a392 13
		LEA	id_RepeatKey(A5),A3
		TST.W	ie_Code(A3)
		BMI	readIEPort	; no repeatable key pending
		BSR	readTime
		MOVEM.L	D3-D4,ie_TimeStamp(A3)
		MOVE.W	ie_Qualifier(A3),D0
		MOVE.W	id_Qualifier(A5),D1
		ANDI.W	#ID_KEYMASK,D0
		ANDI.W	#~ID_KEYMASK,D1
		OR.W	D0,D1
		MOVE.W	D1,ie_Qualifier(A3)
		MOVE.W	D1,id_Qualifier(A5)
		BSR	DispatchEvents
d394 2
a395 2
		BSR	postPeriod
		BRA	readIEPort
d399 3
a401 3
		BTST	#DUB_MOUSECHG,id_Unit+du_Flags(A5)
		BEQ.S	checkPort
		BSR	resetGameport
d404 4
a407 4
		MOVE.B	id_Unit+MP_SIGBIT(A5),D1
		EXT.W	D1
		BTST	D1,D2
		BEQ	taskWait
d410 3
a412 3
		MOVE.L	id_Unit+MP_MSGLIST(A5),A1
		TST.L	(A1)
		BEQ	taskWait
d414 8
a421 8
		MOVE.W	IO_COMMAND(A1),D0
		BCLR    #IOB_QUICK,IO_FLAGS(A1)	; jimm: 8/1/86
		SUB.W	#IND_ADDHANDLER,D0
		LSL.W	#2,D0
		LEA	cmdVectors(PC),A0
		MOVE.L	0(A0,D0.W),A0
		JSR	(A0)
		BRA	taskWait
d425 3
a427 3
		DC.L	IDAddHandler
		DC.L	IDRemHandler
		DC.L	IDWriteEvent
d430 3
a432 3
		DC.B	IECLASS_TIMER
		DC.B	0
		DC.W	0
d437 6
a442 6
		LEA	id_TIOR(A5),A1
		MOVE.W	#TR_ADDREQUEST,IO_COMMAND(A1)
		CLR.B	IO_FLAGS(A1)
		MOVE.L	#ID_TEVENTSECS,IOTV_TIME+TV_SECS(A1)
		MOVE.L	#ID_TEVENTMICRO,IOTV_TIME+TV_MICRO(A1)
		BRA.S	sendIO
d447 7
a453 7
		LEA	id_MIOR(A5),A1
		MOVE.W	#GPD_READEVENT,IO_COMMAND(A1)
		CLR.B	IO_FLAGS(A1)
		MOVE.L	#ie_SIZEOF,IO_LENGTH(A1)
		LEA	id_MData(A5),A0
		MOVE.L	A0,IO_DATA(A1)
		BRA.S	sendIO
d458 1
a458 1
		LEA	id_K1IOR(A5),A1
d463 5
a467 5
		MOVE.W	#KBD_READEVENT,IO_COMMAND(A1)
		CLR.B	IO_FLAGS(A1)
		MOVE.L	#ie_SIZEOF,IO_LENGTH(A1)
		LEA	id_K1Data-id_K1IOR(A1),A0
		MOVE.L	A0,IO_DATA(A1)
d469 4
a472 4
		MOVE.L	IO_DEVICE(A1),A6
		JSR	DEV_BEGINIO(A6)
		MOVE.L	SYSBASE,A6
		RTS
d477 5
a481 5
		LEA	id_SIOR(A5),A1
		MOVE.W	#TR_GETSYSTIME,IO_COMMAND(A1)
		MOVE.B	#IOF_QUICK,IO_FLAGS(A1)
		BSR.S	sendIO
		LEA	id_SIOR(A5),A1
d483 2
a484 2
		MOVEM.L	id_SIOR+IOTV_TIME(A5),D3-D4
		RTS
d489 6
a494 6
		LEA	id_RIOR(A5),A1
		MOVE.W	#TR_ADDREQUEST,IO_COMMAND(A1)
		CLR.B	IO_FLAGS(A1)
		MOVE.L	id_Thresh+TV_SECS(A5),IOTV_TIME+TV_SECS(A1)
		MOVE.L	id_Thresh+TV_MICRO(A5),IOTV_TIME+TV_MICRO(A1)
		BRA.S	sendIO
d499 6
a504 6
		LEA	id_RIOR(A5),A1
		MOVE.W	#TR_ADDREQUEST,IO_COMMAND(A1)
		CLR.B	IO_FLAGS(A1)
		MOVE.L	id_Period+TV_SECS(A5),IOTV_TIME+TV_SECS(A1)
		MOVE.L	id_Period+TV_MICRO(A5),IOTV_TIME+TV_MICRO(A1)
		BRA.S	sendIO
d509 5
a513 5
		LEA	id_RIOR(A5),A1
		MOVE.L	IO_DEVICE(A1),A6
		JSR	DEV_ABORTIO(A6)
		MOVE.L	SYSBASE,A6
		LEA	id_RIOR(A5),A1
d515 1
a515 1
		RTS
d520 3
a522 3
		MOVE.L	A3,A0
		CLR.L	ie_NextEvent(A3)
		MOVE.L	id_HandlerList(A5),A4
d524 10
a533 10
		TST.L	(A4)
		BEQ.S	dRts
		MOVE.L	IS_CODE(A4),A2
		MOVE.L	IS_DATA(A4),A1
		MOVE.L	(A4),A4
		JSR	(A2)
		TST.L	D0		; no sense propagating nothing
		BEQ.S	dRts
		MOVE.L	D0,A0
		BRA.S	handlerLoop
d535 1
a535 1
		RTS
@


35.3
log
@double buffer requests to keyboard device
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.2 88/12/31 17:53:19 kodiak Exp $'
d13 3
d296 2
d299 1
a299 1
		BGE.S	notRepeatable
d320 2
d329 3
a331 3
		BEQ.S	notRepeatable
		MOVE.W	id_RepeatKey+ie_Qualifier(A5),D0
		ANDI.W	#(ID_KEYMASK&(~IEQUALIFIER_REPEAT)),D0
d333 3
a335 3
		ANDI.W	#ID_KEYMASK,D1
		CMP.W	D0,D1
		BEQ.S	dispatchKey
d337 1
a337 4

notRepeatable:
		TST.W	id_RepeatKey+ie_Code(A5)
		BMI.S	dispatchKey
@


35.2
log
@set qualifier word on tick event
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.1 88/08/02 12:27:32 kodiak Exp $'
d13 3
d95 4
a100 3
		MOVE.L	A0,id_TIOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_MIOR+MN_REPLYPORT(A5)
		MOVE.L	A0,id_KIOR+MN_REPLYPORT(A5)
d102 5
d121 1
d227 3
a229 13
		LEA	id_TIOR(A5),A1
		CMP.L	A1,D0
		BEQ.S	gotTimer
		LEA	id_MIOR(A5),A1
		CMP.L	A1,D0
		BEQ.S	gotMouse
		LEA	id_RIOR(A5),A1
		CMP.L	A1,D0
		BEQ	gotRepeat
		LEA	id_KIOR(A5),A1
		CMP.L	A1,D0
		BEQ.S	gotKeyboard
		BRA.S	readIEPort		; bad message!
d231 14
d279 1
a279 1
		LEA	id_KData(A5),A3
d424 5
a428 1
		LEA	id_KIOR(A5),A1
d432 1
a432 1
		LEA	id_KData(A5),A0
@


35.1
log
@use SYSBASE (4) vs. dd_ExecBase
(a poor decision, in hindsight)
@
text
@d1 1
a1 1
	TTL	'$Header: inputtask.asm,v 35.0 87/10/26 11:32:27 kodiak Exp $'
d10 1
a10 1
*   Source Control	$Locker:  $
d13 4
d238 1
@


35.0
log
@initial from V34, but w/ stripped log
@
text
@d1 1
a1 1
	TTL    '$Header: inputtask.asm,v 1.2 85/12/16 16:14:09 kodiak Exp $'
a2 11
*                                                                    *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.      *
*   No part of this program may be reproduced, transmitted,          *
*   transcribed, stored in retrieval system, or translated into      *
*   any language or computer language, in any form or by any         *
*   means, electronic, mechanical, magnetic, optical, chemical,      *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030                                     *
*                                                                    *
**********************************************************************
d4 3
a6 1
*	input task
d8 1
a8 3
*   Source Control
*   --------------
*   $Header: inputtask.asm,v 1.2 85/12/16 16:14:09 kodiak Exp $
d10 1
a10 1
*   $Locker:  $
d13 2
d80 1
a80 3
		MOVE.L	4(SP),A5
		MOVE.L	8(SP),A4
		MOVE.L	A5,A6
d96 1
a96 1
		MOVE.L	A4,A6
a120 1
		MOVE.L	A6,-(A7)
d123 1
a123 1
		MOVE.L	(A7)+,A6
a411 1
		MOVE.L	A6,-(A7)
d414 1
a414 1
		MOVE.L	(A7)+,A6
a452 1
		MOVE.L	A6,-(A7)
d455 1
a455 1
		MOVE.L	(A7)+,A6
@
