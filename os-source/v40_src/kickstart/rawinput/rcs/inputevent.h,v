head     36.10;
branch   ;
access   ;
symbols  V40_1:36.10 V37_12:36.7 V37_11:36.7 V37_8:36.7 V37_7:36.7 V37_1:36.6 V36_58:36.6 V36_56:36.6 V36_53:36.4 V36_52:36.4 V36_51:36.4 V36_49:36.4 V36_47:36.4 V36_46:36.4 V36_45:36.3 V36_44:36.3 V36_42:36.3 V36_41:36.2 V36_40:35.3 V36_39:35.3 V36_37:35.3 V36_35:35.3 V36_33:35.3 V36_32:35.3 V36_31:35.3 V36_29:35.3 V36_28:35.2 V36_25:35.2 V36_23:35.2 V36_21:35.2 V36_14:35.2 V36_13:35.1 V36_11:35.1 L36_5:35.1;
locks    ; strict;
comment  @*   @;


36.10
date     92.06.26.13.21.11;  author darren;  state Exp;
branches ;
next     36.9;

36.9
date     92.04.22.14.51.50;  author darren;  state Exp;
branches ;
next     36.8;

36.8
date     92.04.14.14.14.14;  author darren;  state Exp;
branches ;
next     36.7;

36.7
date     91.01.22.13.30.02;  author darren;  state Exp;
branches ;
next     36.6;

36.6
date     90.11.05.18.25.03;  author darren;  state Exp;
branches ;
next     36.5;

36.5
date     90.06.11.13.36.53;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.13.12.46.09;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.12.58.24;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.20.14.26.15;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.02.17.09.57.43;  author kodiak;  state Exp;
branches ;
next     35.3;

35.3
date     89.09.05.16.10.29;  author kodiak;  state Exp;
branches ;
next     35.2;

35.2
date     89.05.01.18.47.43;  author kodiak;  state Exp;
branches ;
next     35.1;

35.1
date     88.08.02.12.33.05;  author kodiak;  state Exp;
branches ;
next     35.0;

35.0
date     87.10.26.11.33.03;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.10
log
@New comment RangeX/Y as requested by peter
@
text
@#ifndef DEVICES_INPUTEVENT_H
#define DEVICES_INPUTEVENT_H
/*
**	$Id: inputevent.h,v 36.9 92/04/22 14:51:50 darren Exp Locker: darren $
**
**	input event definitions 
**
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef DEVICES_TIMER_H
#include "devices/timer.h"
#endif

#ifndef UTILITY_HOOKS_H
#include "utility/hooks.h"
#endif

#ifndef UTILITY_TAGITEM_H
#include "utility/tagitem.h"
#endif

/*----- constants --------------------------------------------------*/
  
/*  --- InputEvent.ie_Class --- */
/* A NOP input event */
#define IECLASS_NULL			0x00
/* A raw keycode from the keyboard device */
#define IECLASS_RAWKEY			0x01
/* The raw mouse report from the game port device */
#define IECLASS_RAWMOUSE		0x02
/* A private console event */
#define IECLASS_EVENT			0x03
/* A Pointer Position report */
#define IECLASS_POINTERPOS		0x04
/* A timer event */
#define IECLASS_TIMER			0x06
/* select button pressed down over a Gadget (address in ie_EventAddress) */
#define IECLASS_GADGETDOWN		0x07
/* select button released over the same Gadget (address in ie_EventAddress) */
#define IECLASS_GADGETUP		0x08
/* some Requester activity has taken place.  See Codes REQCLEAR and REQSET */
#define IECLASS_REQUESTER		0x09
/* this is a Menu Number transmission (Menu number is in ie_Code) */
#define IECLASS_MENULIST		0x0A
/* User has selected the active Window's Close Gadget */
#define IECLASS_CLOSEWINDOW		0x0B
/* this Window has a new size */
#define IECLASS_SIZEWINDOW		0x0C
/* the Window pointed to by ie_EventAddress needs to be refreshed */
#define IECLASS_REFRESHWINDOW		0x0D
/* new preferences are available */
#define IECLASS_NEWPREFS		0x0E
/* the disk has been removed */
#define IECLASS_DISKREMOVED		0x0F
/* the disk has been inserted */
#define IECLASS_DISKINSERTED		0x10
/* the window is about to be been made active */
#define IECLASS_ACTIVEWINDOW		0x11
/* the window is about to be made inactive */
#define IECLASS_INACTIVEWINDOW		0x12
/* extended-function pointer position report (V36) */
#define IECLASS_NEWPOINTERPOS		0x13
/* Help key report during Menu session (V36) */
#define IECLASS_MENUHELP		0x14
/* the Window has been modified with move, size, zoom, or change (V36) */
#define	IECLASS_CHANGEWINDOW		0x15

/* the last class */
#define IECLASS_MAX			0x15


/*  --- InputEvent.ie_SubClass --- */
/*  IECLASS_NEWPOINTERPOS */
/*	like IECLASS_POINTERPOS */
#define IESUBCLASS_COMPATIBLE   0x00
/*	ie_EventAddress points to struct IEPointerPixel */
#define IESUBCLASS_PIXEL        0x01
/*	ie_EventAddress points to struct IEPointerTablet */
#define IESUBCLASS_TABLET       0x02
/*      ie_EventAddress points to struct IENewTablet */
#define IESUBCLASS_NEWTABLET       0x03

/* pointed to by ie_EventAddress for IECLASS_NEWPOINTERPOS,
 * and IESUBCLASS_PIXEL.
 *
 * You specify a screen and pixel coordinates in that screen
 * at which you'd like the mouse to be positioned.
 * Intuition will try to oblige, but there will be restrictions
 * to positioning the pointer over offscreen pixels.
 *
 * IEQUALIFIER_RELATIVEMOUSE is supported for IESUBCLASS_PIXEL.
 */

struct IEPointerPixel	{
    struct Screen	*iepp_Screen;	/* pointer to an open screen */
    struct {				/* pixel coordinates in iepp_Screen */
	WORD	X;
	WORD	Y;
    }			iepp_Position;
};

/* pointed to by ie_EventAddress for IECLASS_NEWPOINTERPOS,
 * and IESUBCLASS_TABLET.
 *
 * You specify a range of values and a value within the range 
 * independently for each of X and Y (the minimum value of
 * the ranges is always normalized to 0).
 *
 * Intuition will position the mouse proportionally within its
 * natural mouse position rectangle limits.
 *
 * IEQUALIFIER_RELATIVEMOUSE is not supported for IESUBCLASS_TABLET.
 */
struct IEPointerTablet	{
    struct {
	UWORD	X;
	UWORD	Y;
    }			iept_Range;	/* 0 is min, these are max	*/
    struct {
	UWORD	X;
	UWORD	Y;
    }			iept_Value;	/* between 0 and iept_Range	*/

    WORD		iept_Pressure;	/* -128 to 127 (unused, set to 0)  */
};


/* The ie_EventAddress of an IECLASS_NEWPOINTERPOS event of subclass
 * IESUBCLASS_NEWTABLET points at an IENewTablet structure.
 * 
 *
 * IEQUALIFIER_RELATIVEMOUSE is not supported for IESUBCLASS_NEWTABLET.
 */

struct IENewTablet
{
    /* Pointer to a hook you wish to be called back through, in
     * order to handle scaling.  You will be provided with the
     * width and height you are expected to scale your tablet
     * to, perhaps based on some user preferences.
     * If NULL, the tablet's specified range will be mapped directly
     * to that width and height for you, and you will not be
     * called back.
     */
    struct Hook *ient_CallBack;

    /* Post-scaling coordinates and fractional coordinates.
     * DO NOT FILL THESE IN AT THE TIME THE EVENT IS WRITTEN!
     * Your driver will be called back and provided information
     * about the width and height of the area to scale the
     * tablet into.  It should scale the tablet coordinates
     * (perhaps based on some preferences controlling aspect
     * ratio, etc.) and place the scaled result into these
     * fields.  The ient_ScaledX and ient_ScaledY fields are
     * in screen-pixel resolution, but the origin ( [0,0]-point )
     * is not defined.  The ient_ScaledXFraction and
     * ient_ScaledYFraction fields represent sub-pixel position
     * information, and should be scaled to fill a UWORD fraction.
     */
    UWORD ient_ScaledX, ient_ScaledY;
    UWORD ient_ScaledXFraction, ient_ScaledYFraction;

    /* Current tablet coordinates along each axis: */
    ULONG ient_TabletX, ient_TabletY;

    /* Tablet range along each axis.  For example, if ient_TabletX
     * can take values 0-999, ient_RangeX should be 1000.
     */
    ULONG ient_RangeX, ient_RangeY;

    /* Pointer to tag-list of additional tablet attributes.
     * See <intuition/intuition.h> for the tag values.
     */
    struct TagItem *ient_TagList;
};


/*  --- InputEvent.ie_Code --- */
/*  IECLASS_RAWKEY */
#define IECODE_UP_PREFIX		0x80
#define IECODE_KEY_CODE_FIRST		0x00
#define IECODE_KEY_CODE_LAST		0x77
#define IECODE_COMM_CODE_FIRST		0x78
#define IECODE_COMM_CODE_LAST		0x7F
  
/*  IECLASS_ANSI */
#define IECODE_C0_FIRST			0x00
#define IECODE_C0_LAST			0x1F
#define IECODE_ASCII_FIRST		0x20
#define IECODE_ASCII_LAST		0x7E
#define IECODE_ASCII_DEL		0x7F
#define IECODE_C1_FIRST			0x80
#define IECODE_C1_LAST			0x9F
#define IECODE_LATIN1_FIRST		0xA0
#define IECODE_LATIN1_LAST		0xFF
  
/*  IECLASS_RAWMOUSE */
#define IECODE_LBUTTON			0x68	/* also uses IECODE_UP_PREFIX */
#define IECODE_RBUTTON			0x69
#define IECODE_MBUTTON			0x6A
#define IECODE_NOBUTTON			0xFF
  
/*  IECLASS_EVENT (V36) */
#define IECODE_NEWACTIVE		0x01	/* new active input window */
#define IECODE_NEWSIZE			0x02	/* resize of window */
#define IECODE_REFRESH			0x03	/* refresh of window */

/*  IECLASS_REQUESTER */
/*	broadcast when the first Requester (not subsequent ones) opens up in */
/*	the Window */
#define IECODE_REQSET			0x01
/*	broadcast when the last Requester clears out of the Window */
#define IECODE_REQCLEAR			0x00



/*  --- InputEvent.ie_Qualifier --- */
#define IEQUALIFIER_LSHIFT		0x0001
#define IEQUALIFIER_RSHIFT		0x0002
#define IEQUALIFIER_CAPSLOCK		0x0004
#define IEQUALIFIER_CONTROL		0x0008
#define IEQUALIFIER_LALT		0x0010
#define IEQUALIFIER_RALT		0x0020
#define IEQUALIFIER_LCOMMAND		0x0040
#define IEQUALIFIER_RCOMMAND		0x0080
#define IEQUALIFIER_NUMERICPAD		0x0100
#define IEQUALIFIER_REPEAT		0x0200
#define IEQUALIFIER_INTERRUPT		0x0400
#define IEQUALIFIER_MULTIBROADCAST	0x0800
#define IEQUALIFIER_MIDBUTTON		0x1000
#define IEQUALIFIER_RBUTTON		0x2000
#define IEQUALIFIER_LEFTBUTTON		0x4000
#define IEQUALIFIER_RELATIVEMOUSE	0x8000

#define IEQUALIFIERB_LSHIFT		0
#define IEQUALIFIERB_RSHIFT		1
#define IEQUALIFIERB_CAPSLOCK		2
#define IEQUALIFIERB_CONTROL		3
#define IEQUALIFIERB_LALT		4
#define IEQUALIFIERB_RALT		5
#define IEQUALIFIERB_LCOMMAND		6
#define IEQUALIFIERB_RCOMMAND		7
#define IEQUALIFIERB_NUMERICPAD		8
#define IEQUALIFIERB_REPEAT		9
#define IEQUALIFIERB_INTERRUPT		10
#define IEQUALIFIERB_MULTIBROADCAST	11
#define IEQUALIFIERB_MIDBUTTON		12
#define IEQUALIFIERB_RBUTTON		13
#define IEQUALIFIERB_LEFTBUTTON		14
#define IEQUALIFIERB_RELATIVEMOUSE	15
  
/*----- InputEvent -------------------------------------------------*/
  
struct InputEvent {
    struct  InputEvent *ie_NextEvent;	/* the chronologically next event */
    UBYTE   ie_Class;			/* the input event class */
    UBYTE   ie_SubClass;		/* optional subclass of the class */
    UWORD   ie_Code;			/* the input event code */
    UWORD   ie_Qualifier;		/* qualifiers in effect for the event*/
    union {
	struct {
	    WORD    ie_x;		/* the pointer position for the event*/
	    WORD    ie_y;
	} ie_xy;
	APTR    ie_addr;		/* the event address */
	struct {
	    UBYTE   ie_prev1DownCode;	/* previous down keys for dead */
	    UBYTE   ie_prev1DownQual;	/*   key translation: the ie_Code */
	    UBYTE   ie_prev2DownCode;	/*   & low byte of ie_Qualifier for */
	    UBYTE   ie_prev2DownQual;	/*   last & second last down keys */
	} ie_dead;
    } ie_position;
    struct timeval ie_TimeStamp;	/* the system tick at the event */
};

#define	ie_X			ie_position.ie_xy.ie_x
#define	ie_Y			ie_position.ie_xy.ie_y
#define	ie_EventAddress		ie_position.ie_addr
#define	ie_Prev1DownCode	ie_position.ie_dead.ie_prev1DownCode
#define	ie_Prev1DownQual	ie_position.ie_dead.ie_prev1DownQual
#define	ie_Prev2DownCode	ie_position.ie_dead.ie_prev2DownCode
#define	ie_Prev2DownQual	ie_position.ie_dead.ie_prev2DownQual

#endif	/* DEVICES_INPUTEVENT_H */
@


36.9
log
@Change comment
@
text
@d4 1
a4 1
**	$Id: inputevent.h,v 36.8 92/04/14 14:14:14 darren Exp Locker: darren $
d168 3
a170 1
    /* Maximum tablet range along each axis: */
@


36.8
log
@New tablet driver structure
@
text
@d4 1
a4 1
**	$Id: inputevent.h,v 36.7 91/01/22 13:30:02 darren Exp Locker: darren $
d82 1
a82 1
/*      ie_EventAddress points to struct IEPointerNewTablet */
@


36.7
log
@Change reference of IECLASS_RELATIVEMOUSE to IEQUALIFIER_RELATIVEMOUSE.
@
text
@d4 1
a4 1
**	$Id: inputevent.h,v 36.6 90/11/05 18:25:03 darren Exp Locker: darren $
d16 8
d82 2
d95 1
d129 47
@


36.6
log
@*** empty log message ***
@
text
@d4 1
a4 1
**	$Id: inputevent.h,v 36.5 90/06/11 13:36:53 kodiak Exp Locker: darren $
d83 1
a83 1
 * IECLASS_RELATIVEMOUSE is supported for IESUBCLASS_PIXEL.
d103 1
a103 1
 * IECLASS_RELATIVEMOUSE is not supported for IESUBCLASS_TABLET.
@


36.5
log
@add two new classes MENUHELP and CHANGEWINDOW
@
text
@d4 1
a4 1
**	$Id: inputevent.h,v 36.4 90/04/13 12:46:09 kodiak Exp Locker: kodiak $
@


36.4
log
@use Id instead of Header for 4.x rcs
@
text
@d4 1
a4 1
**	$Id$
d57 4
a61 1

d63 1
a63 1
#define IECLASS_MAX			0x13
@


36.3
log
@for rcs 4.x header change
@
text
@d4 1
a4 1
**	$Header: /usr2/kodiak/src/KS/rawinput/RCS/inputevent.h,v 36.2 90/02/20 14:26:15 kodiak Exp Locker: kodiak $
@


36.2
log
@forgot to close comment before IECODE_REQSET :-(
@
text
@d4 1
a4 1
**	$Header: inputevent.h,v 36.1 90/02/17 09:57:43 kodiak Exp $
@


36.1
log
@first cut at IECLASS_NEWPOINTERPOS
@
text
@d4 1
a4 1
**	$Header: inputevent.h,v 35.3 89/09/05 16:10:29 kodiak Exp $
d149 1
a149 1
/*	the Window
@


35.3
log
@added IECODE_NEWSIZE & IECODE_REFRESH
reformatted
@
text
@d4 1
a4 1
**	$Header$
d55 2
d58 1
d60 1
a60 1
#define IECLASS_MAX			0x12
d63 8
d72 45
d142 1
a142 1
/*  IECLASS_EVENT */
d148 2
a149 2
/* broadcast when the first Requester (not subsequent ones) opens in the Window
 */
d151 1
a151 1
/* broadcast when the last Requester clears out of the Window */
d153 1
@


35.2
log
@define ie_Prev.Down Code & Qual
@
text
@d4 1
a4 2
**	$Filename: devices/inputevent.h $
**	$Release: 1.3 $
d12 1
a12 1
#ifndef	    DEVICES_TIMER_H
d16 1
a16 1
/*------ constants -------------------------------------------------*/
d18 1
a18 1
/*   --- InputEvent.ie_Class --- */
d20 1
a20 1
#define	 IECLASS_NULL		 0x00
d22 1
a22 1
#define	 IECLASS_RAWKEY		 0x01
d24 1
a24 1
#define	 IECLASS_RAWMOUSE	 0x02
d26 1
a26 1
#define	 IECLASS_EVENT		 0x03
d28 1
a28 1
#define	 IECLASS_POINTERPOS	 0x04
d30 1
a30 1
#define	 IECLASS_TIMER		 0x06
d32 1
a32 1
#define	 IECLASS_GADGETDOWN	 0x07
d34 1
a34 1
#define	 IECLASS_GADGETUP	 0x08
d36 1
a36 1
#define	 IECLASS_REQUESTER	 0x09
d38 1
a38 1
#define	 IECLASS_MENULIST	 0x0A
d40 1
a40 1
#define	 IECLASS_CLOSEWINDOW	 0x0B
d42 1
a42 1
#define	 IECLASS_SIZEWINDOW	 0x0C
d44 1
a44 1
#define	 IECLASS_REFRESHWINDOW	 0x0D
d46 1
a46 1
#define	 IECLASS_NEWPREFS	 0x0E
d48 1
a48 1
#define	 IECLASS_DISKREMOVED	 0x0F
d50 1
a50 1
#define	 IECLASS_DISKINSERTED	 0x10
d52 1
a52 1
#define IECLASS_ACTIVEWINDOW	 0x11
d54 1
a54 1
#define IECLASS_INACTIVEWINDOW	 0x12
a55 1

d57 1
a57 1
#define	 IECLASS_MAX		 0x12
d61 7
a67 7
/*   --- InputEvent.ie_Code ---	 */
/* IECLASS_RAWKEY */
#define	 IECODE_UP_PREFIX	 0x80
#define	 IECODE_KEY_CODE_FIRST	 0x00
#define	 IECODE_KEY_CODE_LAST	 0x77
#define	 IECODE_COMM_CODE_FIRST	 0x78
#define	 IECODE_COMM_CODE_LAST	 0x7F
d69 10
a78 10
/* IECLASS_ANSI */
#define	 IECODE_C0_FIRST	 0x00
#define	 IECODE_C0_LAST		 0x1F
#define	 IECODE_ASCII_FIRST	 0x20
#define	 IECODE_ASCII_LAST	 0x7E
#define	 IECODE_ASCII_DEL	 0x7F
#define	 IECODE_C1_FIRST	 0x80
#define	 IECODE_C1_LAST		 0x9F
#define	 IECODE_LATIN1_FIRST	 0xA0
#define	 IECODE_LATIN1_LAST	 0xFF
d80 5
a84 5
/* IECLASS_RAWMOUSE */
#define	 IECODE_LBUTTON		 0x68  /* also uses IECODE_UP_PREFIX */
#define	 IECODE_RBUTTON		 0x69
#define	 IECODE_MBUTTON		 0x6A
#define	 IECODE_NOBUTTON	 0xFF
d86 4
a89 2
/* IECLASS_EVENT */
#define	 IECODE_NEWACTIVE	 0x01  /* active input window changed */
d91 2
a92 3
/* IECLASS_REQUESTER Codes */
/* REQSET is broadcast when the first Requester (not subsequent ones) opens
 * in the Window
d94 3
a96 3
#define	 IECODE_REQSET		 0x01
/* REQCLEAR is broadcast when the last Requester clears out of the Window */
#define	 IECODE_REQCLEAR	 0x00
a97 18
  
/*   --- InputEvent.ie_Qualifier --- */
#define	 IEQUALIFIER_LSHIFT	 0x0001
#define	 IEQUALIFIER_RSHIFT	 0x0002
#define	 IEQUALIFIER_CAPSLOCK	 0x0004
#define	 IEQUALIFIER_CONTROL	 0x0008
#define	 IEQUALIFIER_LALT	 0x0010
#define	 IEQUALIFIER_RALT	 0x0020
#define	 IEQUALIFIER_LCOMMAND	 0x0040
#define	 IEQUALIFIER_RCOMMAND	 0x0080
#define	 IEQUALIFIER_NUMERICPAD	 0x0100
#define	 IEQUALIFIER_REPEAT	 0x0200
#define	 IEQUALIFIER_INTERRUPT	 0x0400
#define	 IEQUALIFIER_MULTIBROADCAST 0x0800
#define	 IEQUALIFIER_MIDBUTTON	 0x1000
#define	 IEQUALIFIER_RBUTTON	 0x2000
#define	 IEQUALIFIER_LEFTBUTTON	 0x4000
#define	 IEQUALIFIER_RELATIVEMOUSE  0x8000
d99 34
a132 16
#define	 IEQUALIFIERB_LSHIFT		0
#define	 IEQUALIFIERB_RSHIFT		1
#define	 IEQUALIFIERB_CAPSLOCK		2
#define	 IEQUALIFIERB_CONTROL		3
#define	 IEQUALIFIERB_LALT		4
#define	 IEQUALIFIERB_RALT		5
#define	 IEQUALIFIERB_LCOMMAND		6
#define	 IEQUALIFIERB_RCOMMAND		7
#define	 IEQUALIFIERB_NUMERICPAD	8
#define	 IEQUALIFIERB_REPEAT		9
#define	 IEQUALIFIERB_INTERRUPT		10
#define	 IEQUALIFIERB_MULTIBROADCAST	11
#define	 IEQUALIFIERB_MIDBUTTON		12
#define	 IEQUALIFIERB_RBUTTON		13
#define	 IEQUALIFIERB_LEFTBUTTON	14
#define	 IEQUALIFIERB_RELATIVEMOUSE	15
d134 1
a134 1
/*------ InputEvent ------------------------------------------------*/
@


35.1
log
@updated to standard 1.3 format
@
text
@d138 5
a142 5
    struct  InputEvent *ie_NextEvent;  /* the chronologically next event */
    UBYTE   ie_Class;		       /* the input event class */
    UBYTE   ie_SubClass;	       /* optional subclass of the class */
    UWORD   ie_Code;		       /* the input event code */
    UWORD   ie_Qualifier;	       /* qualifiers in effect for the event*/
d144 11
a154 5
   struct {
       WORD    ie_x;		       /* the pointer position for the event*/
       WORD    ie_y;
   } ie_xy;
   APTR	   ie_addr;
d156 1
a156 1
    struct timeval ie_TimeStamp;       /* the system tick at the event */
d159 7
a165 3
#define	 ie_X	  ie_position.ie_xy.ie_x
#define	 ie_Y	  ie_position.ie_xy.ie_y
#define	 ie_EventAddress   ie_position.ie_addr
@


35.0
log
@initial from V34
@
text
@d1 11
a11 11
#ifndef  DEVICES_INPUTEVENT_H
#define  DEVICES_INPUTEVENT_H
/********************************************************************/
/*               Commodore-Amiga, Inc.                              */
/*               inputevent.h                                       */
/********************************************************************/
/********************************************************************
*
* input event definitions
*
********************************************************************/
d13 1
a13 1
#ifndef     DEVICES_TIMER_H
d21 1
a21 1
#define  IECLASS_NULL            0x00
d23 1
a23 1
#define  IECLASS_RAWKEY          0x01
d25 1
a25 1
#define  IECLASS_RAWMOUSE        0x02
d27 1
a27 1
#define  IECLASS_EVENT           0x03
d29 1
a29 1
#define  IECLASS_POINTERPOS      0x04
d31 1
a31 1
#define  IECLASS_TIMER           0x06
d33 1
a33 1
#define  IECLASS_GADGETDOWN      0x07
d35 1
a35 1
#define  IECLASS_GADGETUP        0x08
d37 1
a37 1
#define  IECLASS_REQUESTER       0x09
d39 1
a39 1
#define  IECLASS_MENULIST        0x0A
d41 1
a41 1
#define  IECLASS_CLOSEWINDOW     0x0B
d43 1
a43 1
#define  IECLASS_SIZEWINDOW      0x0C
d45 1
a45 1
#define  IECLASS_REFRESHWINDOW   0x0D
d47 1
a47 1
#define  IECLASS_NEWPREFS        0x0E
d49 1
a49 1
#define  IECLASS_DISKREMOVED     0x0F
d51 1
a51 1
#define  IECLASS_DISKINSERTED    0x10
d53 1
a53 1
#define IECLASS_ACTIVEWINDOW     0x11
d55 1
a55 1
#define IECLASS_INACTIVEWINDOW   0x12
d59 1
a59 1
#define  IECLASS_MAX             0x12
d63 1
a63 1
/*   --- InputEvent.ie_Code ---  */
d65 5
a69 5
#define  IECODE_UP_PREFIX        0x80
#define  IECODE_KEY_CODE_FIRST   0x00
#define  IECODE_KEY_CODE_LAST    0x77
#define  IECODE_COMM_CODE_FIRST  0x78
#define  IECODE_COMM_CODE_LAST   0x7F
d72 9
a80 9
#define  IECODE_C0_FIRST         0x00
#define  IECODE_C0_LAST          0x1F
#define  IECODE_ASCII_FIRST      0x20
#define  IECODE_ASCII_LAST       0x7E
#define  IECODE_ASCII_DEL        0x7F
#define  IECODE_C1_FIRST         0x80
#define  IECODE_C1_LAST          0x9F
#define  IECODE_LATIN1_FIRST     0xA0
#define  IECODE_LATIN1_LAST      0xFF
d83 4
a86 4
#define  IECODE_LBUTTON          0x68  /* also uses IECODE_UP_PREFIX */
#define  IECODE_RBUTTON          0x69
#define  IECODE_MBUTTON          0x6A
#define  IECODE_NOBUTTON         0xFF
d89 1
a89 1
#define  IECODE_NEWACTIVE        0x01  /* active input window changed */
d95 1
a95 1
#define  IECODE_REQSET           0x01
d97 1
a97 1
#define  IECODE_REQCLEAR         0x00
d101 16
a116 16
#define  IEQUALIFIER_LSHIFT      0x0001
#define  IEQUALIFIER_RSHIFT      0x0002
#define  IEQUALIFIER_CAPSLOCK    0x0004
#define  IEQUALIFIER_CONTROL     0x0008
#define  IEQUALIFIER_LALT        0x0010
#define  IEQUALIFIER_RALT        0x0020
#define  IEQUALIFIER_LCOMMAND    0x0040
#define  IEQUALIFIER_RCOMMAND    0x0080
#define  IEQUALIFIER_NUMERICPAD  0x0100
#define  IEQUALIFIER_REPEAT      0x0200
#define  IEQUALIFIER_INTERRUPT   0x0400
#define  IEQUALIFIER_MULTIBROADCAST 0x0800
#define  IEQUALIFIER_MIDBUTTON   0x1000
#define  IEQUALIFIER_RBUTTON     0x2000
#define  IEQUALIFIER_LEFTBUTTON  0x4000
#define  IEQUALIFIER_RELATIVEMOUSE  0x8000
d118 16
a133 16
#define  IEQUALIFIERB_LSHIFT        0
#define  IEQUALIFIERB_RSHIFT        1
#define  IEQUALIFIERB_CAPSLOCK      2
#define  IEQUALIFIERB_CONTROL       3
#define  IEQUALIFIERB_LALT          4
#define  IEQUALIFIERB_RALT          5
#define  IEQUALIFIERB_LCOMMAND      6
#define  IEQUALIFIERB_RCOMMAND      7
#define  IEQUALIFIERB_NUMERICPAD    8
#define  IEQUALIFIERB_REPEAT        9
#define  IEQUALIFIERB_INTERRUPT     10
#define  IEQUALIFIERB_MULTIBROADCAST    11
#define  IEQUALIFIERB_MIDBUTTON     12
#define  IEQUALIFIERB_RBUTTON       13
#define  IEQUALIFIERB_LEFTBUTTON    14
#define  IEQUALIFIERB_RELATIVEMOUSE 15
d139 4
a142 4
    UBYTE   ie_Class;                  /* the input event class */
    UBYTE   ie_SubClass;               /* optional subclass of the class */
    UWORD   ie_Code;                   /* the input event code */
    UWORD   ie_Qualifier;              /* qualifiers in effect for the event*/
d145 1
a145 1
       WORD    ie_x;                   /* the pointer position for the event*/
d148 1
a148 1
   APTR    ie_addr;
d153 3
a155 3
#define  ie_X     ie_position.ie_xy.ie_x
#define  ie_Y     ie_position.ie_xy.ie_y
#define  ie_EventAddress   ie_position.ie_addr
d157 1
a157 1
#endif
@
