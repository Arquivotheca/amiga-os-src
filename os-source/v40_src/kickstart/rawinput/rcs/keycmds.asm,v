head     36.9;
branch   ;
access   ;
symbols  V36_14:36.3 V36_13:36.3 V36_11:36.3 L36_5:35.0;
locks    ; strict;
comment  @*   @;


36.9
date     90.12.14.18.59.34;  author darren;  state Exp;
branches ;
next     36.8;

36.8
date     90.04.13.12.44.04;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.02.12.59.59;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     89.11.02.17.21.34;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     89.11.01.14.23.38;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     89.06.09.12.12.45;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     88.11.03.12.56.22;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     88.10.07.10.51.14;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     88.10.03.11.57.45;  author kodiak;  state Exp;
branches ;
next     35.0;

35.0
date     87.10.26.11.31.55;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.9
log
@Fixes memory trashing bug introduced in late 89 after
adding the code to allow for any size for IO_LENGTH.
Also now returns IO_ACTUAL as it should.
@
text
@	TTL	'$Id: keycmds.asm,v 36.8 90/04/13 12:44:04 kodiak Exp Locker: darren $
**********************************************************************
*								     *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.	     *
*   No part of this program may be reproduced, transmitted,	     *
*   transcribed, stored in retrieval system, or translated into	     *
*   any language or computer language, in any form or by any	     *
*   means, electronic, mechanical, magnetic, optical, chemical,	     *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030				     *
*								     *
**********************************************************************
*
*	Keyboard device commands
*
*   Source Control
*   --------------
*   $Id: keycmds.asm,v 36.8 90/04/13 12:44:04 kodiak Exp Locker: darren $
*
*   $Locker: darren $
*
*   $Log:	keycmds.asm,v $
*   Revision 36.8  90/04/13  12:44:04  kodiak
*   use Id instead of Header for 4.x rcs
*   
*   Revision 36.7  90/04/02  12:59:59  kodiak
*   for rcs 4.x header change
*   
*   Revision 36.6  89/11/02  17:21:34  kodiak
*   *** empty log message ***
*   
*   Revision 36.5  89/11/01  14:23:38  kodiak
*   allow any length for ReadMatrix command
*   
*   Revision 36.4  89/06/09  12:12:45  kodiak
*   autodoc changes
*   
*   Revision 36.3  88/11/03  12:56:22  kodiak
*   use AUTOINIT in ResidentTag
*   
*   Revision 36.2  88/10/07  10:51:14  kodiak
*   modify autodocs
*   
*   Revision 36.1  88/10/03  11:57:45  kodiak
*   allow larger io_Length than MATRIX_BYTES in ReadMatrix.
*   
*   Revision 35.0  87/10/26  11:31:55  kodiak
*   initial from V34, but w/ stripped log
*   
*   
**********************************************************************

	SECTION		rawinput

*------ Included Files -----------------------------------------------

	INCLUDE		"exec/types.i"
	INCLUDE		"exec/nodes.i"
	INCLUDE		"exec/lists.i"
	INCLUDE		"exec/memory.i"
	INCLUDE		"exec/ports.i"
	INCLUDE		"exec/libraries.i"
	INCLUDE		"exec/devices.i"
	INCLUDE		"exec/tasks.i"
	INCLUDE		"exec/io.i"
	INCLUDE		"exec/strings.i"
	INCLUDE		"exec/interrupts.i"
	INCLUDE		"exec/errors.i"

	INCLUDE		"devices/timer.i"
	INCLUDE		"devices/inputevent.i"

	INCLUDE		"keyboard.i"

	INCLUDE		"macros.i"
	INCLUDE		"kbdata.i"


*------ Imported Names -----------------------------------------------

*------ Imported Functions -------------------------------------------

	XREF_EXE	Disable
	XREF_EXE	Enable
	XREF_EXE	Enqueue

	XREF		EndCommand
	XREF		_ciaacra


*------ Exported Names -----------------------------------------------

*------ Functions ----------------------------------------------------

	XDEF		KDClear
	XDEF		KDReadEvent
	XDEF		KDReadMatrix
	XDEF		KDAddResetHandler
	XDEF		KDRemResetHandler
	XDEF		KDResetHandlerDone

	XDEF		KDCBClear
	XDEF		KDCBReadEvent
	XDEF		KDCBReadMatrix
	XDEF		KDCBAddResetHandler
	XDEF		KDCBRemResetHandler
	XDEF		KDCBResetHandlerDone


******* keyboard.device/CMD_CLEAR ************************************
*
*   NAME
*	CMD_CLEAR -- Clear the keyboard input buffer.
*
*   FUNCTION
*	Remove from the input buffer any keys transitions waiting to
*	satisfy read requests.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Command	CMD_CLEAR
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
**********************************************************************
KDCBClear	EQU	-1

KDClear:
		LINKEXE Disable
		clr.w	kd_BufHead(a6)
		clr.w	kd_BufTail(a6)
		LINKEXE Enable
		bra	endOKCommand


******* keyboard.device/KBD_READEVENT ********************************
*
*   NAME
*	KBD_READEVENT -- Return the next keyboard event.
*
*   FUNCTION
*	Read raw keyboard events from the keyboard and put them in the
*	data area of the iORequest.  If there are no pending keyboard
*	events, this command will not be satisfied, but if there are
*	some events, but not as many as can fill IO_LENGTH, the
*	request will be satisfied with those currently available.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Command	KBD_READEVENT
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	the size of the io_Data area in bytes: there
*			are sizeof(inputEvent) bytes per input event.
*	io_Data		a buffer area to fill with input events.  The
*			fields of the input event are:
*	    ie_NextEvent
*			links the events returned
*	    ie_Class
*			is IECLASS_RAWKEY
*	    ie_Code 
*			contains the next key up/down reports
*	    ie_Qualifier 
*			only the shift and numeric pad bits are set
*	    ie_SubClass, ie_X, ie_Y, ie_TimeStamp 
*			are not used, and set to zero
*
*   RESULTS
*	This function sets the error field in the IORequest, and fills
*	the IORequest with the next keyboard events (but not partial
*	events).
*
**********************************************************************
KDCBReadEvent	EQU	0

KDReadEvent:
		movem.l d2-d3/a2-a3,-(a7)
		move.l	a1,a3

		LINKEXE Disable

		;------ check if ReadEvent already running here
		bset	#IOB_SERVICING,IO_FLAGS(a3)
		bne	readEnableRts

		;------ check for room in ReadEvent
		moveq	#ie_SIZEOF,d1
		moveq	#0,d2
		move.l	IO_LENGTH(a3),d3
		sub.l	d1,d3
		blt	readTooSmall

		;------ check for data for ReadEvent
		move.w	kd_BufHead(a6),d0
		cmp.w	kd_BufTail(a6),d0
		beq	readPending

		LINKEXE Enable

		;------ initialize transfer variables
		move.l	IO_DATA(a3),a2

readLoop:
		LINKEXE	Disable

		;------ get data from buffer
		move.w	kd_BufHead(a6),d0
		cmp.w	kd_BufTail(a6),d0
		beq.s	readDone

		move.b	#IECLASS_RAWKEY,ie_Class(a2)
		clr.b	ie_SubClass(a2)
		move.w	kd_BufQueue(a6,d0.W),ie_Code(a2)
		move.w	kd_BufQueue+2(a6,d0.W),ie_Qualifier(a2)
		clr.l	ie_X(a2)			 ; and ie_Y
		clr.w	ie_TimeStamp(a2)
		addq.w	#4,d0
		add.l	d1,a2
		move.l	a2,ie_NextEvent-ie_SIZEOF(a2)

		andi.w	#(KBBUFSIZE-1),d0
		move.w	d0,kd_BufHead(a6)

		add.l	d1,d2			;increment actual

		LINKEXE	Enable

		;------ check for more space in I/O request data area
		sub.l	d1,d3
		blt.s	readDone

		bra.s	readLoop


readPending:
		andi.b	#~(IOF_SERVICING!IOF_QUICK),IO_FLAGS(a3)

readEnableRts:
		LINKEXE	Enable

readRts:
		movem.l (a7)+,d2-d3/a2-a3
		rts

readTooSmall:
		LINKEXE	Enable
		moveq	#IOERR_BADLENGTH,d0
		move.l	a3,a1
		bsr	EndCommand
		bra.s	readNextCommand

readDone:
*	    ;------ the destination for the read is full
		clr.l	ie_NextEvent-ie_SIZEOF(a2)
		move.l	d2,IO_ACTUAL(a3)
		move.l	a3,a1
		bsr.s	endOKCommand

readNextCommand:
		move.l	kd_Unit+MP_MSGLIST(a6),a1
		tst.l	(a1)
		beq.s	readRts

		bsr	KDReadEvent
		bra.s	readRts


******* keyboard.device/KBD_READMATRIX *******************************
*
*   NAME
*	KBD_READMATRIX -- Read the current keyboard key matrix.
*
*   FUNCTION
*	This function reads the up/down state of every key in the
*	key matrix.
*
*   IO REQUEST INPUT
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Command	KBD_READMATRIX
*	io_Flags	IOB_QUICK set if quick I/O is possible
*	io_Length	the size of the io_Data area in bytes: this
*			must be big enough to hold the key matrix.
*	io_Data		a buffer area to fill with the key matrix:
*			an array of bytes whose component bits reflect
*			each keys state: the state of the key for
*			keycode n is at bit (n MOD 8) in byte
*			(n DIV 8) of this matrix.
*
*   IO REQUEST OUTPUT
*	io_Error
*	     IOERR_BADLENGTH - the io_Length was not exactly 13 bytes.
*			The buffer is unchanged.  This is only returned
*			by V33/V34 kickstart.
*	io_Actual	the number of bytes filled in io_Data with key
*			matrix data, i.e. the minimum of the supplied
*			length and the internal key matrix size.
*
*   NOTE
*	For V33/V34 Kickstart, io_Length must be set to exactly 13 bytes.
*
*   RESULTS
*	This function sets the error field in the IORequest, and sets
*	matrix to the current key matrix.
*
**********************************************************************
KDCBReadMatrix	EQU	-1

KDReadMatrix:
		move.l	a1,-(a7)
		moveq	#MATRIX_BYTES,d0
		move.l	IO_LENGTH(a1),d1
		move.l	IO_DATA(a1),a0
		cmp.l	d0,d1
		bls.s	rmLenOK
		move.w	d0,d1
rmLenOK:
		move.l	d1,IO_ACTUAL(a1)
		lea	kd_Matrix(a6),a1
		bra.s	rmDBF
rmLoop:
		move.b  (a1)+,(a0)+
rmDBF:
		dbf	d1,rmLoop

		move.l	(a7)+,a1
endOKCommand:
		moveq	#0,d0
		bra	EndCommand


******* keyboard.device/KBD_ADDRESETHANDLER **************************
*
*   NAME
*	KBD_ADDRESETHANDLER -- Add a keyboard reset handler.
*
*   FUNCTION
*	Add a function to the list of functions called to clean up
*	before a hard reset generated at the keyboard.  The reset
*	handler is called as:
*	    ResetHandler(handlerData)
*	                 a1
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set
*	io_Device	preset by OpenDevice
*	io_Unit		preset by OpenDevice
*	io_Command	KBD_ADDRESETHANDLER
*	io_Data		a pointer to an interrupt structure.
*	    is_Data 	the handlerData pointer described above
*	    is_Code	the Handler function address
*
*   NOTES
*	Few of the Amiga keyboard models generate the communication codes
*	used to implement this reset processing.  Specifically, only the
*	Euro a1000 (rare), and the B2000 keyboard generate them.
*
*	The interrupt structure is kept by the keyboard device until a
*	RemResetHandler command is satisfied for it, but the
*	KBD_ADDRESETHANDLER command itself is replied immediately.
*
**********************************************************************
KDCBAddResetHandler EQU	-1

KDAddResetHandler:
		move.l	a1,-(a7)
		move.l	IO_DATA(a1),a1
		lea	kd_HandlerList(a6),a0
		LINKEXE	Enqueue
		move.l	(a7)+,a1
		bra.s	endOKCommand


******* keyboard.device/KBD_REMRESETHANDLER **************************
*
*   NAME
*	KBD_REMRESETHANDLER -- Remove a keyboard reset handler.
*
*   FUNCTION
*	Remove a function previously added to the list of reset
*	handler functions with KBD_ADDRESETHANDLER.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set
*	io_Device	preset by OpenDevice
*	io_Unit		preset by OpenDevice
*	io_Command	KBD_REMRESETHANDLER
*	io_Data		a pointer to the handler interrupt structure.
*
**********************************************************************
KDCBRemResetHandler EQU	-1

KDRemResetHandler:
		move.l	a1,-(a7)
		move.l	IO_DATA(a1),a1
		REMOVE
		move.l	(a7)+,a1
		bra.s	endOKCommand


******* keyboard.device/KBD_RESETHANDLERDONE *************************
*
*   NAME
*	KBD_RESETHANDLERDONE -- Indicate that reset handling is done.
*
*   FUNCTION
*	Indicate that reset cleanup associated with the handler has
*	completed.  This command should be issued by all keyboard
*	reset handlers so that the reset may proceed.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set
*	io_Device	preset by OpenDevice
*	io_Unit		preset by OpenDevice
*	io_Command	KBD_RESETHANDLERDONE
*	io_Data		a pointer to the handler interrupt structure.
*
*   NOTES
*	The keyboard processor itself performs the hardware reset, and
*	will time out and perform the reset even if some reset handlers
*	have not indicated yet that the reset may proceed.  This
*	timeout is several seconds.
*
**********************************************************************
KDCBResetHandlerDone EQU -1

KDResetHandlerDone:
		subq	#1,kd_OutstandingResetHandlers(a6)
		bne.s	rhdContinue

		and.b	#$0BF,_ciaacra	    ; complete reset handshake

rhdContinue
		bra.s	endOKCommand

		END
@


36.8
log
@use Id instead of Header for 4.x rcs
@
text
@d1 1
a1 1
	TTL	'$Id$
d19 1
a19 1
*   $Id$
d21 1
a21 1
*   $Locker: kodiak $
d24 3
a314 1
		lea	kd_Matrix(a6),a1
d320 1
@


36.7
log
@for rcs 4.x header change
@
text
@d1 1
a1 1
	TTL	'$Header: /usr2/kodiak/src/KS/rawinput/RCS/keycmds.asm,v 36.6 89/11/02 17:21:34 kodiak Exp Locker: kodiak $'	
d19 1
a19 1
*   $Header: /usr2/kodiak/src/KS/rawinput/RCS/keycmds.asm,v 36.6 89/11/02 17:21:34 kodiak Exp Locker: kodiak $
d24 3
@


36.6
log
@*** empty log message ***
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 36.5 89/11/01 14:23:38 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 36.5 89/11/01 14:23:38 kodiak Exp $
d24 3
@


36.5
log
@allow any length for ReadMatrix command
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 36.4 89/06/09 12:12:45 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 36.4 89/06/09 12:12:45 kodiak Exp $
d21 1
a21 1
*   $Locker:  $
d24 3
d319 1
@


36.4
log
@autodoc changes
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 36.3 88/11/03 12:56:22 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 36.3 88/11/03 12:56:22 kodiak Exp $
d21 1
a21 1
*   $Locker: kodiak $
d24 3
d119 2
a120 2
		CLR.W	kd_BufHead(A6)
		CLR.W	kd_BufTail(A6)
d122 1
a122 1
		BRA	endOKCommand
d166 2
a167 2
		MOVEM.L D2-D3/A2-A3,-(A7)
		MOVE.L	A1,A3
d172 2
a173 2
		BSET	#IOB_SERVICING,IO_FLAGS(A3)
		BNE	readEnableRts
d176 5
a180 5
		MOVEQ	#ie_SIZEOF,D1
		MOVEQ	#0,D2
		MOVE.L	IO_LENGTH(A3),D3
		SUB.L	D1,D3
		BLT	readTooSmall
d183 3
a185 3
		MOVE.W	kd_BufHead(A6),D0
		CMP.W	kd_BufTail(A6),D0
		BEQ	readPending
d190 1
a190 1
		MOVE.L	IO_DATA(A3),A2
d196 3
a198 3
		MOVE.W	kd_BufHead(A6),D0
		CMP.W	kd_BufTail(A6),D0
		BEQ.S	readDone
d200 9
a208 9
		MOVE.B	#IECLASS_RAWKEY,ie_Class(A2)
		CLR.B	ie_SubClass(A2)
		MOVE.W	kd_BufQueue(A6,D0.W),ie_Code(A2)
		MOVE.W	kd_BufQueue+2(A6,D0.W),ie_Qualifier(A2)
		CLR.L	ie_X(A2)			 ; and ie_Y
		CLR.W	ie_TimeStamp(A2)
		ADDQ.W	#4,D0
		ADD.L	D1,A2
		MOVE.L	A2,ie_NextEvent-ie_SIZEOF(A2)
d210 2
a211 2
		ANDI.W	#(KBBUFSIZE-1),D0
		MOVE.W	D0,kd_BufHead(A6)
d213 1
a213 1
		ADD.L	D1,D2			;increment actual
d218 2
a219 2
		SUB.L	D1,D3
		BLT.S	readDone
d221 1
a221 1
		BRA.S	readLoop
d225 1
a225 1
		ANDI.B	#~(IOF_SERVICING!IOF_QUICK),IO_FLAGS(A3)
d231 2
a232 2
		MOVEM.L (A7)+,D2-D3/A2-A3
		RTS
d236 4
a239 4
		MOVEQ	#IOERR_BADLENGTH,D0
		MOVE.L	A3,A1
		BSR	EndCommand
		BRA.S	readNextCommand
d243 4
a246 4
		CLR.L	ie_NextEvent-ie_SIZEOF(A2)
		MOVE.L	D2,IO_ACTUAL(A3)
		MOVE.L	A3,A1
		BSR.S	endOKCommand
d249 3
a251 3
		MOVE.L	kd_Unit+MP_MSGLIST(A6),A1
		TST.L	(A1)
		BEQ.S	readRts
d253 2
a254 2
		BSR	KDReadEvent
		BRA.S	readRts
d266 1
a266 1
*   IO REQUEST
d279 9
d299 15
a313 10
		MOVEQ	#MATRIX_BYTES,D0
		CMP.L	IO_LENGTH(A1),D0
		BGT.S	lenErr
		MOVE.L	IO_DATA(A1),A0
		MOVE.L	A1,-(A7)
		LEA	kd_Matrix(A6),A1
		SUBQ	#1,D0
rMLoop:
		MOVE.B  (A1)+,(A0)+
		DBF	D0,rMLoop
d315 3
a317 5
		MOVE.L	(A7)+,A1
		MOVE.L	#MATRIX_BYTES,IO_ACTUAL(A1)
endOKCommand:
		MOVEQ	#0,D0
		BRA	EndCommand
a318 3
lenErr:
		MOVEQ	#IOERR_BADLENGTH,D0
		BRA	EndCommand
a319 1

d330 1
a330 1
*	                 A1
d344 1
a344 1
*	Euro A1000 (rare), and the B2000 keyboard generate them.
d354 3
a356 3
		MOVE.L	A1,-(A7)
		MOVE.L	IO_DATA(A1),A1
		LEA	kd_HandlerList(A6),A0
d358 2
a359 2
		MOVE.L	(A7)+,A1
		BRA.S	endOKCommand
d382 2
a383 2
		MOVE.L	A1,-(A7)
		MOVE.L	IO_DATA(A1),A1
d385 2
a386 2
		MOVE.L	(A7)+,A1
		BRA.S	endOKCommand
d416 2
a417 2
		SUBQ	#1,kd_OutstandingResetHandlers(A6)
		BNE.S	rhdContinue
d419 1
a419 1
		AND.B	#$0BF,_ciaacra	    ; complete reset handshake
d422 1
a422 1
		BRA.S	endOKCommand
@


36.3
log
@use AUTOINIT in ResidentTag
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 36.2 88/10/07 10:51:14 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 36.2 88/10/07 10:51:14 kodiak Exp $
d24 3
d96 1
a96 1
******* keyboard.device/command/CMD_CLEAR ****************************
d99 1
a99 1
*	Clear - clear keyboard input buffer
d122 1
a122 1
******* keyboard.device/command/KBD_READEVENT ************************
d125 1
a125 1
*	ReadEvent - return the next keyboard event.
d254 1
a254 1
******* keyboard.device/command/KBD_READMATRIX ***********************
d257 1
a257 1
*	ReadMatrix - read the current keyboard key matrix
d309 1
a309 1
******* keyboard.device/command/KBD_ADDRESETHANDLER ******************
d312 1
a312 1
*	AddResetHandler - add a reset handler to the device
d316 4
a319 3
*	before a hard reset:
*	    Handler(handlerData);
*		    A1
d331 4
d336 2
a337 1
*	RemResetHandler command is satisfied for it.
d351 1
a351 1
******* keyboard.device/command/KBD_REMRESETHANDLER ******************
d354 1
a354 1
*	RemResetHandler - remove a reset handler from the device
d357 2
a358 2
*	Remove a function previously added to the list of handler
*	functions.
d378 1
a378 1
******* keyboard.device/command/KBD_RESETHANDLERDONE *****************
d381 1
a381 1
*	ResetHandlerDone - indicate that reset can occur
d385 2
a386 1
*	completed.
d394 6
@


36.2
log
@modify autodocs
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 36.1 88/10/03 11:57:45 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 36.1 88/10/03 11:57:45 kodiak Exp $
d24 3
d204 1
a204 1
		ANDI.W	#(BUFSIZE-1),D0
@


36.1
log
@allow larger io_Length than MATRIX_BYTES in ReadMatrix.
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 35.0 87/10/26 11:31:55 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 35.0 87/10/26 11:31:55 kodiak Exp $
d24 3
d90 1
a90 1
******* keyboard.device/command/Clear ********************************
d116 1
a116 1
******* keyboard.device/command/ReadEvent ****************************
d248 1
a248 1
******* keyboard.device/command/ReadMatrix ***************************
d270 3
d303 1
a303 1
******* keyboard.device/command/AddResetHandler **********************
d339 1
a339 1
******* keyboard.device/command/RemResetHandler **********************
d366 1
a366 1
******* keyboard.device/command/ResetHandlerDone *********************
@


35.0
log
@initial from V34, but w/ stripped log
@
text
@d1 1
a1 1
	TTL	'$Header: keycmds.asm,v 33.1 86/06/18 12:18:35 kodiak Exp $'	
d19 1
a19 1
*   $Header: keycmds.asm,v 33.1 86/06/18 12:18:35 kodiak Exp $
d21 1
a21 1
*   $Locker:  $
d24 2
d27 1
d277 1
a277 1
		BNE.S	lenErr
@
