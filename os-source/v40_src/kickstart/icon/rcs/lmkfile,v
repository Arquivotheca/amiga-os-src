head     38.5;
branch   ;
access   ;
symbols  V40_1:38.5 V39_3:38.4 V39_2:38.4 V39_1:38.3;
locks    ; strict;
comment  @# @;


38.5
date     93.02.15.16.31.26;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     92.04.20.11.14.34;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     92.02.13.19.00.47;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.06.24.19.06.08;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.19.01.56;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 source tree checkin
@


38.5
log
@Now builds V40
@
text
@#
# lmkfile for icon.library
#

#
# Server directory for the data...
#
REMOTE = V:src/kickstart/icon
VERSION= 40

#
# Name of the module
#
MODNAME	= icon

#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip

#
# Compiler, assembler, and linker
#
CC = lc
AS = hx68 -a
LN = blink

#
# Compiler flags...
#
#CFLAGS	= -b0 -v -me -ms -cfistqm -d1 -O -dDEBUGGING -dMAXDEBUG
CFLAGS	= -b0 -v -me -ms -cfistqm -d1 -O

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -csq -i include: -o

#
# Linker flags
#
LFLAGS		= ADDSYM SMALLCODE SMALLDATA MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= LIB:ROM.lib LIB:debug.lib LIB:lcnb.lib

#
# My headers...
#
MY_HDR	=	internal.h \
support.h

#
# My C source...
#
MY_C	=	objectio.c \
errcalls.c \
entry.c \
icon_def.c \
icon_def_images.c

#
# My Assebly source...
#
MY_A	=	abs.asm \
interface.asm \
syscalls.asm \
string.asm \
endcode.asm

#
# My object files...
#
MY_OBJS	=	abs.o			\
		interface.o		\
		objectio.o		\
		entry.o			\
		icon_def.o		\
		icon_def_images.o	\
		string.o		\
		syscalls.o		\
		errcalls.o		\
		endcode.o

#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the LD file...
#
$(LD_FILE):	$(MY_OBJS) $(MY_LIBS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
$(LFLAGS)
<


#
# Default rules...
#
.c.o:
	$(CC) $(CFLAGS) $*.c

.asm.o:
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Specific dependancies...
#
abs.o:	abs.asm icon_rev.i

#
# Bump the version...
#
version:
	@@bumprev $(VERSION) $(MODNAME)_rev

#
# Release the current build to the server
#
internal:
	@@delete $(REMOTE)/((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@@copy ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) $(REMOTE)
	@@copy \#?.doc V:doc NOPRO
	@@copy \#?.sfd V:lib/sfd NOPRO

#
# Blow away all files that would need to be rebuilt
#
clean:
	@@delete \#?.(o|ld|doc|ld.strip|map)

#
# Make the AutoDocs
#
doc:	$(MODNAME).doc

$(MODNAME).doc:	$(MY_C) $(MY_A)
	@@Echo "Making $(MODNAME).doc"
	@@Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	@@Delete RAM:$(MODNAME).tmp.doc QUIET
	@@Protect $(MODNAME).doc rwd

#
# Make a complete new release (This still is in testing...)
#
release:
	lmk clean
	lmk version
	lmk doc
	lmk $(LD_FILE)
	lmk $(LD_STRIP)
	lmk internal

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@@protect \#? rwed QUIET
	@@copy $(REMOTE)/\#? ""
	@@protect \#? +r QUIET
	@@protect \#?_rev\#? rwd QUIET
	@@Echo "Local is updated..."
@


38.4
log
@Removed icon2wb.c
@
text
@d9 1
a9 1
VERSION= 39
@


38.3
log
@Now does V39...
@
text
@d26 1
a26 1
AS = casm -a
d38 1
a38 1
AFLAGS	= -csy -i include: -o
d64 1
a64 2
icon_def_images.c \
icon2wb.c
a83 1
		icon2wb.o		\
@


38.2
log
@Fixed the DOC rule
@
text
@d9 1
a9 1
VERSION= 38
@


38.1
log
@Changed to V38 source tree - Trimmed Log
@
text
@d163 1
a163 1
	@@AutoDoc >$(MODNAME).doc -a RAM:$(MODNAME).tmp.doc
@
