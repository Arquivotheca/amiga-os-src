head     39.0;
branch   ;
access   ;
symbols  V40_9:39.0 V40_8:39.0 V40_7:39.0 V40_6:39.0 V40_5:39.0 V40_4:39.0 V40_3:39.0 V40_2:39.0 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @@;


39.0
date     91.10.15.08.32.27;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@



39.0
log
@V39 Exec initial checkin
@
text
@
    NAME
	CreatePrivatePool -- Generate a private memory pool header (V36)

    SYNOPSIS
	newPool=CreatePrivatePool(memFlags)
	a0			  D0

	struct PoolHeader *CreatePrivatePool(ULONG);

    FUNCTION
	Allocate and prepare a new memory pool header.	Each pool is a
	separate tracking system for memory of a specific type.  Any number
	of pools may exist in the system.

	Pools automatically expand and shrink based on demand.	Fixed sized
	"puddles" are allocated by the pool manager when more total memory
	is needed.  Many small allocations can fit in a single puddle.
	Large allocations are tracked, then passed to the underlying
	allocation functions.

	At any time individual allocations may be freed.  Or, the entire
	pool may be removed in a single step.

    INPUTS
	memFlags - a memory flags specifier, as taken by AllocMem.

    RESULT
	The address of a new pool header, or NULL for error.

    BUGS
	The two operating constants,the puddle size and the allocation
	threshold, are not adjustable.

    SEE ALSO
	DeletePrivatePool(), exec/memory.i

    NAME
	DeletePrivatePool --  Drain an entire memory pool (V36)

    SYNOPSIS
	DeletePrivatePool(poolHeader)
			  a0

	void DeletePrivatePool(struct PoolHeader *);


    FUNCTION
	Frees all memory in all pudles of the specified pool header, then
	deletes the pool header.  Individual free calls are not needed.

    INPUTS
	poolHeader - as returned by CreatePrivatePool().

    BUGS

    SEE ALSO
	CreatePrivatePool(), exec/memory.i

    NAME
	AllocPooled -- Allocate memory with the pool manager (V36)

    SYNOPSIS
	memory=AllocPooled(memSize,poolHeader)
	d0		   d0	   a0

	void *AllocPooled(ULONG,struct poolHeader *);

    FUNCTION
	Allocate memSize bytes of memory, and return a pointer. NULL is
	returned if the allocation fails.

	The memory size is tracked by the pool manager, and need not be
	specified when the memory is deallocated.

    INPUTS
	memSize - the number of bytes to allocate
	poolHeader - a specific private pool header, or NULL to use
		the global pool.

    RESULT
	A pointer to the memory, or NULL.

    BUGS

    SEE ALSO
	FreePooled(), CreatePrivatePool

    NAME
	FreePooled -- Free pooled memory  (V36)

    SYNOPSIS
	FreePooled(memory,poolHeader)
		   A1     A)

	void FreePooled(void *,struct PoolHeader *);


    FUNCTION
	Deallocates memory allocated by AllocPooled().  The size of the
	allocation is automatically tracked.  When all allocations in a
	puddle are freed, the puddle itself is freeed.

	Only memory allocated by AllocPooled() may be freed with this
	function!

    INPUTS
	memory - pointer to memory allocated by AllocPooled.


    BUGS

    SEE ALSO
	AllocPooled()
@
