head     39.15;
branch   ;
access   ;
symbols  V40_9:39.14 V40_8:39.14 V40_7:39.14 V40_6:39.14 V40_5:39.14 V40_4:39.14 V40_3:39.14 V40_2:39.14 V40_1:39.14 V40_0:39.13 V39_56:39.13 V39_55:39.13 V39_54:39.13 V39_53:39.13 V39_52:39.13 V39_50:39.12 V39_48:39.12 V39_47:39.11 V39_46:39.11 V39_45:39.11 V39_44:39.10 V39_43:39.10 V39_42:39.7 V39_41:39.7 V39_40:39.7 V39_39:39.7 V39_38:39.7 V39_37:39.7 V39_36:39.7 V39_35:39.7 V39_34:39.7 V39_33:39.7 V39_30:39.7 V39_29:39.7 V39_28:39.7 V39_27:39.7 V39_26:39.7 V39_25:39.7 V39_24:39.7 V39_23:39.6 V39_22:39.6 V39_20:39.6 V39_19:39.6 V39_18:39.6 V39_17:39.6 V39_16:39.6 V39_15:39.6 V39_14:39.6 V39_12:39.6 V39_11:39.3 V39_10:39.3 V39_9:39.3 V39_8:39.3 V39_7:39.2 V39_6:39.2 V39_5:39.2 V39_4:39.2 V39_3:39.1 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @@;


39.15
date     93.10.01.09.19.58;  author darren;  state Exp;
branches ;
next     39.14;

39.14
date     93.02.15.17.25.09;  author mks;  state Exp;
branches ;
next     39.13;

39.13
date     92.12.17.17.17.57;  author mks;  state Exp;
branches ;
next     39.12;

39.12
date     92.10.06.15.31.53;  author mks;  state Exp;
branches ;
next     39.11;

39.11
date     92.07.21.18.06.29;  author mks;  state Exp;
branches ;
next     39.10;

39.10
date     92.07.02.10.51.02;  author mks;  state Exp;
branches ;
next     39.9;

39.9
date     92.07.02.10.19.15;  author mks;  state Exp;
branches ;
next     39.8;

39.8
date     92.07.02.10.02.07;  author mks;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.09.08.46.53;  author mks;  state Exp;
branches ;
next     39.6;

39.6
date     92.02.20.16.42.31;  author mks;  state Exp;
branches ;
next     39.5;

39.5
date     92.02.20.12.39.58;  author mks;  state Exp;
branches ;
next     39.4;

39.4
date     92.02.19.15.48.12;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.07.19.16.43;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     91.12.19.09.49.31;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.31.14.48.22;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.31.00;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.15
log
@Ack, Vertex noted that CheckIO is documented as returning NULL
OR a pointer to an IORequest.  But this .sfd says it returns
a BOOL (16 bit number).  That means if the IORequest happens
to fall on a 64K boundary, C code generated which tests a 16-bit
BOOL is hosed.
@
text
@==id $Id: exec_lib.sfd,v 39.14 93/02/15 17:25:09 mks Exp Locker: darren $
* "exec.library"
==base_SysBase
==bias 30
==public
==include <exec/types.h>
==include <exec/tasks.h>
*------ misc ---------------------------------------------------------
ULONG	Supervisor( ULONG (*userFunction)() ) (a5)
*------ special patchable hooks to internal exec activity ------------
==private
VOID	ExitIntr() ()
VOID	Schedule() ()
VOID	Reschedule() ()
VOID	Switch() ()
VOID	Dispatch() ()
VOID	Exception() ()
==public
*------ module creation ----------------------------------------------
VOID	InitCode( ULONG startClass, ULONG version ) (d0,d1)
VOID	InitStruct( APTR initTable, APTR memory, ULONG size ) (a1,a2,d0)
struct Library *MakeLibrary( APTR funcInit, APTR structInit, ULONG (*libInit)(),
	ULONG dataSize, ULONG segList ) (a0,a1,a2,d0,d1)
VOID	MakeFunctions( APTR target, APTR functionArray, ULONG funcDispBase )
	(a0,a1,a2)
struct Resident *FindResident( UBYTE *name ) (a1)
APTR	InitResident( struct Resident *resident, ULONG segList ) (a1,d1)
*------ diagnostics --------------------------------------------------
VOID	Alert( ULONG alertNum ) (d7)
VOID	Debug( ULONG flags ) (d0)
*------ interrupts ---------------------------------------------------
VOID	Disable() ()
VOID	Enable() ()
VOID	Forbid() ()
VOID	Permit() ()
ULONG	SetSR( ULONG newSR, ULONG mask ) (d0,d1)
APTR	SuperState() ()
VOID	UserState( APTR sysStack ) (d0)
struct Interrupt *SetIntVector( LONG intNumber, struct Interrupt *interrupt )
	(d0,a1)
VOID	AddIntServer( LONG intNumber, struct Interrupt *interrupt ) (d0,a1)
VOID	RemIntServer( LONG intNumber, struct Interrupt *interrupt ) (d0,a1)
VOID	Cause( struct Interrupt *interrupt ) (a1)
*------ memory allocation --------------------------------------------
APTR	Allocate( struct MemHeader *freeList, ULONG byteSize ) (a0,d0)
VOID	Deallocate( struct MemHeader *freeList, APTR memoryBlock,
	ULONG byteSize ) (a0,a1,d0)
APTR	AllocMem( ULONG byteSize, ULONG requirements ) (d0,d1)
APTR	AllocAbs( ULONG byteSize, APTR location ) (d0,a1)
VOID	FreeMem( APTR memoryBlock, ULONG byteSize ) (a1,d0)
ULONG	AvailMem( ULONG requirements ) (d1)
struct MemList *AllocEntry( struct MemList *entry ) (a0)
VOID	FreeEntry( struct MemList *entry ) (a0)
*------ lists --------------------------------------------------------
VOID	Insert( struct List *list, struct Node *node, struct Node *pred )
	(a0,a1,a2)
VOID	AddHead( struct List *list, struct Node *node ) (a0,a1)
VOID	AddTail( struct List *list, struct Node *node ) (a0,a1)
VOID	Remove( struct Node *node ) (a1)
struct Node *RemHead( struct List *list ) (a0)
struct Node *RemTail( struct List *list ) (a0)
VOID	Enqueue( struct List *list, struct Node *node ) (a0,a1)
struct Node *FindName( struct List *list, UBYTE *name ) (a0,a1)
*------ tasks --------------------------------------------------------
APTR	AddTask( struct Task *task, APTR initPC, APTR finalPC ) (a1,a2,a3)
VOID	RemTask( struct Task *task ) (a1)
struct Task *FindTask( UBYTE *name ) (a1)
BYTE	SetTaskPri( struct Task *task, LONG priority ) (a1,d0)
ULONG	SetSignal( ULONG newSignals, ULONG signalSet ) (d0,d1)
ULONG	SetExcept( ULONG newSignals, ULONG signalSet ) (d0,d1)
ULONG	Wait( ULONG signalSet ) (d0)
VOID	Signal( struct Task *task, ULONG signalSet ) (a1,d0)
BYTE	AllocSignal( BYTE signalNum ) (d0)
VOID	FreeSignal( BYTE signalNum ) (d0)
LONG	AllocTrap( LONG trapNum ) (d0)
VOID	FreeTrap( LONG trapNum ) (d0)
*------ messages -----------------------------------------------------
VOID	AddPort( struct MsgPort *port ) (a1)
VOID	RemPort( struct MsgPort *port ) (a1)
VOID	PutMsg( struct MsgPort *port, struct Message *message ) (a0,a1)
struct Message *GetMsg( struct MsgPort *port ) (a0)
VOID	ReplyMsg( struct Message *message ) (a1)
struct Message *WaitPort( struct MsgPort *port ) (a0)
struct MsgPort *FindPort( UBYTE *name ) (a1)
*------ libraries ----------------------------------------------------
VOID	AddLibrary( struct Library *library ) (a1)
VOID	RemLibrary( struct Library *library ) (a1)
struct Library *OldOpenLibrary( UBYTE *libName ) (a1)
VOID	CloseLibrary( struct Library *library ) (a1)
APTR	SetFunction( struct Library *library, LONG funcOffset,
	ULONG (*newFunction)() ) (a1,a0,d0)
VOID	SumLibrary( struct Library *library ) (a1)
*------ devices ------------------------------------------------------
VOID	AddDevice( struct Device *device ) (a1)
VOID	RemDevice( struct Device *device ) (a1)
BYTE	OpenDevice( UBYTE *devName, ULONG unit, struct IORequest *ioRequest,
	ULONG flags ) (a0,d0,a1,d1)
VOID	CloseDevice( struct IORequest *ioRequest ) (a1)
BYTE	DoIO( struct IORequest *ioRequest ) (a1)
VOID	SendIO( struct IORequest *ioRequest ) (a1)
struct IORequest *CheckIO( struct IORequest *ioRequest ) (a1)
BYTE	WaitIO( struct IORequest *ioRequest ) (a1)
VOID	AbortIO( struct IORequest *ioRequest ) (a1)
*------ resources ----------------------------------------------------
VOID	AddResource( APTR resource ) (a1)
VOID	RemResource( APTR resource ) (a1)
APTR	OpenResource( UBYTE *resName ) (a1)
*------ private diagnostic support -----------------------------------
==private
VOID	RawIOInit() ()
VOID	RawMayGetChar() ()
VOID	RawPutChar() ()
==public
*------ misc ---------------------------------------------------------
APTR	RawDoFmt( UBYTE *formatString, APTR dataStream, VOID (*putChProc)(),
	APTR putChData ) (a0,a1,a2,a3)
ULONG	GetCC() ()
ULONG	TypeOfMem( APTR address ) (a1)
ULONG	Procure( struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg ) (a0,a1)
VOID	Vacate( struct SignalSemaphore *sigSem, struct SemaphoreMessage *bidMsg ) (a0,a1)
struct Library *OpenLibrary( UBYTE *libName, ULONG version ) (a1,d0)
==version 33
*------ signal semaphores (note funny registers)----------------------
VOID	InitSemaphore( struct SignalSemaphore *sigSem ) (a0)
VOID	ObtainSemaphore( struct SignalSemaphore *sigSem ) (a0)
VOID	ReleaseSemaphore( struct SignalSemaphore *sigSem ) (a0)
ULONG	AttemptSemaphore( struct SignalSemaphore *sigSem ) (a0)
VOID	ObtainSemaphoreList( struct List *sigSem ) (a0)
VOID	ReleaseSemaphoreList( struct List *sigSem ) (a0)
struct SignalSemaphore *FindSemaphore( UBYTE *sigSem ) (a1)
VOID	AddSemaphore( struct SignalSemaphore *sigSem ) (a1)
VOID	RemSemaphore( struct SignalSemaphore *sigSem ) (a1)
*------ kickmem support ----------------------------------------------
ULONG	SumKickData() ()
*------ more memory support ------------------------------------------
VOID	AddMemList( ULONG size, ULONG attributes, LONG pri, APTR base,
	UBYTE *name ) (d0,d1,d2,a0,a1)
VOID	CopyMem( APTR source, APTR dest, ULONG size ) (a0,a1,d0)
VOID	CopyMemQuick( APTR source, APTR dest, ULONG size ) (a0,a1,d0)
*------ cache --------------------------------------------------------
==version 36
VOID	CacheClearU() ()
VOID	CacheClearE( APTR address, ULONG length, ULONG caches ) (a0,d0,d1)
ULONG	CacheControl( ULONG cacheBits, ULONG cacheMask ) (d0,d1)
*------ misc ---------------------------------------------------------
APTR	CreateIORequest( struct MsgPort *port, ULONG size ) (a0,d0)
VOID	DeleteIORequest( APTR iorequest ) (a0)
struct MsgPort *CreateMsgPort() ()
VOID	DeleteMsgPort( struct MsgPort *port ) (a0)
VOID	ObtainSemaphoreShared( struct SignalSemaphore *sigSem ) (a0)
*------ even more memory support -------------------------------------
APTR	AllocVec( ULONG byteSize, ULONG requirements ) (d0,d1)
VOID	FreeVec( APTR memoryBlock ) (a1)
*------ V39 Pool LVOs...
APTR	CreatePool(ULONG requirements,ULONG puddleSize,ULONG threshSize) (d0,d1,d2)
VOID	DeletePool( APTR poolHeader ) (a0)
APTR	AllocPooled( APTR poolHeader, ULONG memSize ) (a0,d0)
VOID	FreePooled( APTR poolHeader, APTR memory, ULONG memSize ) (a0,a1,d0)
*------ misc ---------------------------------------------------------
ULONG	AttemptSemaphoreShared( struct SignalSemaphore *sigSem ) (a0)
VOID	ColdReboot() ()
VOID	StackSwap( struct StackSwapStruct *newStack) (a0)
*------ task trees ---------------------------------------------------
VOID	ChildFree( APTR tid ) (d0)
VOID	ChildOrphan( APTR tid ) (d0)
VOID	ChildStatus( APTR tid ) (d0)
VOID	ChildWait( APTR tid ) (d0)
*------ future expansion ---------------------------------------------
APTR	CachePreDMA( APTR address, ULONG *length, ULONG flags) (a0, a1, d0)
VOID	CachePostDMA( APTR address, ULONG *length, ULONG flags) (a0, a1, d0)
*------ New, for V39
==version 39
*------ Low memory handler functions
VOID	AddMemHandler( struct Interrupt *memhand) (a1)
VOID	RemMemHandler( struct Interrupt *memhand) (a1)
*------ Function to attempt to obtain a Quick Interrupt Vector...
ULONG	ObtainQuickVector( APTR interruptCode ) (a0)
==private
ULONG	ExecReserved04( ULONG nothing ) (d0)
ULONG	ExecReserved05( ULONG nothing ) (d0)
ULONG	ExecReserved06( ULONG nothing ) (d0)
* For ROM Space, a tagged OpenLibrary
struct Library *TaggedOpenLibrary(ULONG tag) (d0)
* More reserved LVOs
ULONG	ReadGayle() ()
ULONG	ExecReserved08( ULONG nothing ) (d0)
==public
==end
@


39.14
log
@Added a new function...  ReadGayle()
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.13 92/12/17 17:17:57 mks Exp Locker: mks $
d101 1
a101 1
BOOL	CheckIO( struct IORequest *ioRequest ) (a1)
@


39.13
log
@Fixed CachePre/PostDMA SFD
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.12 92/10/06 15:31:53 mks Exp Locker: mks $
d185 1
a185 1
ULONG	ExecReserved07( ULONG nothing ) (d0)
@


39.12
log
@Added the new ObtainQuickVector() call
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.11 92/07/21 18:06:29 mks Exp Locker: mks $
d169 2
a170 2
APTR	CachePreDMA( APTR address, ULONG *length, ULONG flags) (a0, a1, d1)
VOID	CachePostDMA( APTR address, ULONG *length, ULONG flags) (a0, a1, d1)
@


39.11
log
@Fixed StackSwap .sfd entry
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.10 92/07/02 10:51:02 mks Exp Locker: mks $
d176 2
a178 3
ULONG	ExecReserved01( ULONG nothing ) (d0)
ULONG	ExecReserved02( ULONG nothing ) (d0)
ULONG	ExecReserved03( ULONG nothing ) (d0)
d180 2
d184 3
@


39.10
log
@More prototype fixes
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.9 92/07/02 10:19:15 mks Exp Locker: mks $
d7 1
d162 1
a162 1
VOID	StackSwap( APTR newSize, APTR newSP, APTR newStack ) (d0,d1,a0)
@


39.9
log
@Fixed prototype for AddMemList
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.8 92/07/02 10:02:07 mks Exp Locker: mks $
d114 1
a114 1
VOID	RawDoFmt( UBYTE *formatString, APTR dataStream, VOID (*putChProc)(),
@


39.8
log
@Fixed prototype bug
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.7 92/04/09 08:46:53 mks Exp Locker: mks $
d135 1
a135 1
ULONG	AddMemList( ULONG size, ULONG attributes, ULONG pri, APTR base,
@


39.7
log
@Added the TaggedOpenLibrary to EXEC
ROM Space saver
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.6 92/02/20 16:42:31 mks Exp Locker: mks $
d169 1
a169 1
APTR	CachePostDMA( APTR address, ULONG *length, ULONG flags) (a0, a1, d1)
@


39.6
log
@New .sfd for AllocPooled  (reversed the arguments)
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.5 92/02/20 12:39:58 mks Exp Locker: mks $
d180 2
@


39.5
log
@Pool functions updated and now installed!
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.4 92/02/19 15:48:12 mks Exp Locker: mks $
d156 1
a156 1
APTR	AllocPooled( ULONG memSize, APTR poolHeader ) (d0,a0)
@


39.4
log
@Changed the names of DeletePrivatePool to DeletePool and
CreatePrivatePool to CreatePool
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.3 92/02/07 19:16:43 mks Exp Locker: mks $
d157 1
a157 1
VOID	FreePooled( APTR memory, APTR poolHeader ) (a1,a0)
@


39.3
log
@Fixed the semaphore Procure() and Vacate() definitions for V39
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.2 91/12/19 09:49:31 mks Exp Locker: mks $
d153 3
a155 3
APTR	CreatePrivatePool( ULONG requirements, ULONG puddleSize,
	ULONG puddleThresh ) (d0,d1,d2)
VOID	DeletePrivatePool( APTR poolHeader ) (a0)
@


39.2
log
@Added the low memory handler LVOs
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.1 91/10/31 14:48:22 mks Exp Locker: mks $
d118 2
a119 2
ULONG	Procure( struct Semaphore *semaport, struct Message *bidMsg ) (a0,a1)
VOID	Vacate( struct Semaphore *semaport ) (a0)
@


39.1
log
@Added the required library name to the .sfd file...
@
text
@d1 1
a1 1
==id $Id: exec_lib.sfd,v 39.0 91/10/15 08:31:00 mks Exp Locker: mks $
d170 5
@


39.0
log
@V39 Exec initial checkin
@
text
@d1 2
a2 1
==id $Id: exec_lib.sfd,v 36.9 91/05/06 02:34:52 bryce Exp $
@
