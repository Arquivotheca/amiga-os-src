head     39.3;
branch   ;
access   ;
symbols  V40_9:39.3 V40_8:39.3 V40_7:39.3 V40_6:39.3 V40_5:39.3 V40_4:39.3 V40_3:39.3 V40_2:39.3 V40_1:39.3 V40_0:39.3 V39_56:39.3 V39_55:39.3 V39_54:39.3 V39_53:39.3 V39_52:39.3 V39_50:39.3 V39_48:39.3 V39_47:39.2 V39_46:39.2 V39_45:39.2 V39_44:39.2 V39_43:39.2 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:39.1 V39_33:39.1 V39_30:39.1 V39_29:39.1 V39_28:39.1 V39_27:39.1 V39_26:39.1 V39_25:39.1 V39_24:39.1 V39_23:39.1 V39_22:39.1 V39_20:39.1 V39_19:39.1 V39_18:39.1 V39_17:39.1 V39_16:39.1 V39_15:39.1 V39_14:39.1 V39_12:39.1 V39_11:39.1 V39_10:39.1 V39_9:39.1 V39_8:39.1 V39_7:39.1 V39_6:39.1 V39_5:39.1 V39_4:39.1 V39_3:39.1 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.3; strict;
comment  @ * @;


39.3
date     92.09.18.12.08.23;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.02.09.14.49;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.06.15.59.43;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.29.09;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.3
log
@Added the Network signal bit definitions
@
text
@#ifndef	EXEC_TASKS_H
#define	EXEC_TASKS_H
/*
**	$Id: tasks.h,v 39.2 92/07/02 09:14:49 mks Exp Locker: mks $
**
**	Task Control Block, Singals, and Task flags.
**
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef EXEC_NODES_H
#include "exec/nodes.h"
#endif /* EXEC_NODES_H */

#ifndef EXEC_LISTS_H
#include "exec/lists.h"
#endif /* EXEC_LISTS_H */


/* Please use Exec functions to modify task structure fields, where available.
 */
struct Task {
    struct  Node tc_Node;
    UBYTE   tc_Flags;
    UBYTE   tc_State;
    BYTE    tc_IDNestCnt;           /* intr disabled nesting*/
    BYTE    tc_TDNestCnt;           /* task disabled nesting*/
    ULONG   tc_SigAlloc;            /* sigs allocated */
    ULONG   tc_SigWait;             /* sigs we are waiting for */
    ULONG   tc_SigRecvd;            /* sigs we have received */
    ULONG   tc_SigExcept;           /* sigs we will take excepts for */
    UWORD   tc_TrapAlloc;           /* traps allocated */
    UWORD   tc_TrapAble;            /* traps enabled */
    APTR    tc_ExceptData;          /* points to except data */
    APTR    tc_ExceptCode;          /* points to except code */
    APTR    tc_TrapData;            /* points to trap data */
    APTR    tc_TrapCode;            /* points to trap code */
    APTR    tc_SPReg;               /* stack pointer        */
    APTR    tc_SPLower;             /* stack lower bound    */
    APTR    tc_SPUpper;             /* stack upper bound + 2*/
    VOID    (*tc_Switch)();         /* task losing CPU    */
    VOID    (*tc_Launch)();         /* task getting CPU  */
    struct  List tc_MemEntry;       /* Allocated memory. Freed by RemTask() */
    APTR    tc_UserData;	    /* For use by the task; no restrictions! */
};

/*
 * Stack swap structure as passed to StackSwap()
 */
struct	StackSwapStruct {
	APTR	stk_Lower;	/* Lowest byte of stack */
	ULONG	stk_Upper;	/* Upper end of stack (size + Lowest) */
	APTR	stk_Pointer;	/* Stack pointer at switch point */
};

/*----- Flag Bits ------------------------------------------*/
#define TB_PROCTIME     0
#define TB_ETASK	3
#define TB_STACKCHK     4
#define TB_EXCEPT       5
#define TB_SWITCH       6
#define TB_LAUNCH       7

#define TF_PROCTIME     (1L<<0)
#define TF_ETASK	(1L<<3)
#define TF_STACKCHK     (1L<<4)
#define TF_EXCEPT       (1L<<5)
#define TF_SWITCH       (1L<<6)
#define TF_LAUNCH       (1L<<7)

/*----- Task States ----------------------------------------*/
#define TS_INVALID      0
#define TS_ADDED        1
#define TS_RUN          2
#define TS_READY        3
#define TS_WAIT         4
#define TS_EXCEPT       5
#define TS_REMOVED      6

/*----- Predefined Signals -------------------------------------*/
#define SIGB_ABORT      0
#define SIGB_CHILD      1
#define SIGB_BLIT       4	/* Note: same as SINGLE */
#define SIGB_SINGLE     4	/* Note: same as BLIT */
#define SIGB_INTUITION	5
#define	SIGB_NET	7
#define SIGB_DOS        8

#define SIGF_ABORT      (1L<<0)
#define SIGF_CHILD      (1L<<1)
#define SIGF_BLIT       (1L<<4)
#define SIGF_SINGLE     (1L<<4)
#define SIGF_INTUITION	(1L<<5)
#define	SIGF_NET	(1L<<7)
#define SIGF_DOS        (1L<<8)

#endif	/* EXEC_TASKS_H */
@


39.2
log
@Fixed comment typo
@
text
@d4 1
a4 1
**	$Id: tasks.h,v 39.1 91/11/06 15:59:43 mks Exp Locker: mks $
d65 6
a70 6
#define TF_PROCTIME     (1<<0)
#define TF_ETASK	(1<<3)
#define TF_STACKCHK     (1<<4)
#define TF_EXCEPT       (1<<5)
#define TF_SWITCH       (1<<6)
#define TF_LAUNCH       (1<<7)
d87 1
d95 1
@


39.1
log
@Added the structure needed for StackSwap()
@
text
@d4 1
a4 1
**	$Id: tasks.h,v 39.0 91/10/15 08:29:09 mks Exp Locker: mks $
d37 2
a38 2
    APTR    tc_TrapData;            /* points to trap code */
    APTR    tc_TrapCode;            /* points to trap data */
@


39.0
log
@V39 Exec initial checkin
@
text
@d4 1
a4 1
**	$Id: tasks.h,v 36.8 90/05/30 01:20:55 bryce Exp $
d46 9
@
