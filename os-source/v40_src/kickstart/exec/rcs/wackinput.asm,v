head     39.1;
branch   ;
access   ;
symbols  V40_9:39.1 V40_8:39.1 V40_7:39.1 V40_6:39.1 V40_5:39.1 V40_4:39.1 V40_3:39.1 V40_2:39.1 V40_1:39.1 V40_0:39.1 V39_56:39.1 V39_55:39.1 V39_54:39.1 V39_53:39.1 V39_52:39.1 V39_50:39.1 V39_48:39.1 V39_47:39.1 V39_46:39.1 V39_45:39.1 V39_44:39.1 V39_43:39.1 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:39.1 V39_33:39.1 V39_30:39.1 V39_29:39.1 V39_28:39.1 V39_27:39.1 V39_26:39.1 V39_25:39.1 V39_24:39.1 V39_23:39.1 V39_22:39.1 V39_20:39.1 V39_19:39.1 V39_18:39.1 V39_17:39.1 V39_16:39.1 V39_15:39.1 V39_14:39.1 V39_12:39.1 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @* @;


39.1
date     92.02.19.15.56.52;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.29.41;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.1
log
@Short branch optimization taken
@
text
@*	   ************************************************
*	   **						 **
*	   **	   --------------------------------	 **
*	   **	    ROM OPERATING SYSTEM EXECUTIVE	 **
*	   **	   --------------------------------	 **
*	   **						 **
*	   **						 **
*	   **						 **
*	   ************************************************

*************************************************************************
*									*
*   Copyright 1984,85,88,89 Commodore-Amiga, Inc.			*
*   All rights reserved.  No part of this program may be reproduced,	*
*   transmitted, transcribed, stored in retrieval system, or		*
*   translated into any language or computer language, in any form	*
*   or by any means, electronic, mechanical, magnetic, optical, 	*
*   chemical, manual or otherwise, without the prior written		*
*   permission of Commodore-Amiga, Incorporated.			*
*									*
*************************************************************************

**********************************************************************
*
*   Source Control:
*
*	$Id: wackinput.asm,v 39.0 91/10/15 08:29:41 mks Exp Locker: mks $
*
*	$Log:	wackinput.asm,v $
* Revision 39.0  91/10/15  08:29:41  mks
* V39 Exec initial checkin
*
*********************************************************************

	NOLIST
	INCLUDE "assembly.i"
	LIST
	IFNE	INCLUDE_WACK
	NOLIST
	INCLUDE "types.i"
	INCLUDE "wackbase.i"
	LIST


	XREF	DoKey
	XREF	RawGetChar
	XREF	FindSymbol,_Execute
	XREF	RawPutStr
	XREF	GatherKeyMap
	XREF	RawPutChar

symfun		equ	10

	XDEF	GatherKeys
GatherKeys:
		lea	GatherKeyMap,a0
		cmp.l	wb_ThisMap(a6),a0
		beq.s	gk_same
		clr.w	wb_cc(a6)
		move.l	wb_ThisMap(a6),wb_SaveMap(a6)
		move.l	#GatherKeyMap,wb_ThisMap(a6)
gk_same:
		cmp.b	#' ',wb_ThisKey(a6)
		beq.s	gk_skip
		move.w	wb_cc(a6),d0
		cmp.w	#MAXKEYS,d0
		bge.s	gk_skip
		move.b	wb_ThisKey(a6),d0
		bsr	RawPutChar
		lea	wb_c(a6),a0
		move.w	wb_cc(a6),d0
		move.b	wb_ThisKey(a6),0(a0,d0.w)
		addq.w	#1,wb_cc(a6)
gk_skip:
		clr.w	wb_BadNumber(a6)
		rts


	XDEF	GetNumber

GetNumber:
		move.b	#' ',wb_ThisKey(a6)
		bsr.s	GatherKeys
		move.w	#1,wb_SkipNum(a6)
gn_next:
		cmp.l	#GatherKeyMap,wb_ThisMap(a6)
		bne.s	gn_done
		bsr	RawGetChar
		move.b	d0,wb_ThisKey(a6)
		bsr	DoKey
		bra.s	gn_next
gn_done:
		clr.w	wb_SkipNum(a6)
		moveq	#0,d0
		move.b	wb_HexNumLen(a6),d0
		tst.w	wb_BadNumber(a6)
		beq.s	gn_exit
		moveq	#0,d0
gn_exit:
		rts

	XDEF	GatherIgnore
GatherIgnore:
		rts

	XREF	newline
	XDEF	GatherCancelKey
GatherCancelKey:
		move.w	#-1,wb_cc(a6)
		move.l	wb_SaveMap(a6),wb_ThisMap(a6)
		bsr	newline
		move.w	#1,wb_BadNumber(a6)
		rts

	XDEF	GatherDelKey
GatherDelKey:
		tst.w	wb_cc(a6)
		ble.s	GatherCancelKey
		lea	wb_c(a6),a0
		move.w	wb_cc(a6),d0
		clr.b	0(a0,d0.w)
		subq.w	#1,wb_cc(a6)
		lea	gdk_str(pc),a0
		bsr	RawPutStr
		tst.w	wb_cc(a6)
		ble.s	GatherCancelKey
		rts

gdk_str 	dc.b	8,32,8,0
		ds.w	0


	XDEF	GatherDoneKey
GatherDoneKey:
		move.l	wb_SaveMap(a6),wb_ThisMap(a6)
		lea	wb_c(a6),a0
		move.w	wb_cc(a6),d0
		bgt.s	gd_ok
		move.w	#1,wb_BadNumber(a6)
		moveq	#0,d0
		rts
gd_ok:
		clr.b	0(a0,d0.w)
		lea	wb_c(a6),a0
		bsr	FindSymbol
		tst.l	d0
		beq.s	gd_nosym
		move.w	#1,wb_BadNumber(a6)
		move.l	d0,a0
		move.l	symfun(a0),-(sp)
		bsr	_Execute
		clr.b	wb_flags(a6)
		addq.l	#4,sp
		rts
gd_nosym:
		lea	wb_c(a6),a0
		lea	wb_LastNum(a6),a1
		bsr.s	IsHexNum
		move.b	d0,wb_HexNumLen(a6)
		bne.s	gd_num
		move.w	#1,wb_BadNumber(a6)
		lea	gd_unknown(pc),a0
		bsr	RawPutStr
		rts
gd_num:
		tst.w	wb_SkipNum(a6)
		bne.s	gd_exit
		moveq	#-2,d0
		and.l	wb_LastNum(a6),d0
		move.l	d0,wb_CurrAddr(a6)
		bset.b	#0,wb_flags(a6)
gd_exit:
		rts
gd_unknown
		dc.b	10,'unknown symbol',10,0
		ds.w	0


************************************************************************
*
*    SYNOPSIS
*	count IsHexNum (string, &number)
*	d0		a0	a1
*
*    NOTES
*	Result will only return true for valid hex number.
*	If string is not a valid hex number, the &number location
*	is not effected.
*
*    BUGS
*	hex numbers longer than 8 digits will convert only last 8 digits
*
************************************************************************

	XDEF	IsHexNum
IsHexNum:
		move.l	d2,-(sp)
		moveq	#0,d1
		moveq	#-1,d2
		move.l	d1,d0
		bra.s	ihn_entry

ihn_sumhex:	addq.l	#5,d0
		addq.l	#5,d0
ihn_sum:	lsl.l	#4,d1
		add.l	d0,d1
ihn_entry:
		addq.l	#1,d2
		move.b	(a0)+,d0
		beq.s	ihn_true
		sub.b	#'0',d0
		blt.s	ihn_fail
		cmp.b	#10,d0
		blt.s	ihn_sum
		sub.b	#'A'-'0',d0
		blt.s	ihn_fail
		cmp.b	#6,d0
		blt.s	ihn_sumhex
		sub.b	#'a'-'A',d0
		blt.s	ihn_fail
		cmp.b	#6,d0
		blt.s	ihn_sumhex

ihn_fail:	moveq	#0,d2
ihn_true:
		move.l	d1,(a1)
		move.l	d2,d0
		move.l	(sp)+,d2
		rts

fmt:		dc.b ' %lx ',0
		ds.w 0

************************************************************************
*
*    SYNOPSIS
*	char UpperCase (char)
*	d0		d0
*
*    NOTES
*	The result will contain the upper cased char parameter.
*
************************************************************************

	XDEF	UpperCase
UpperCase:
		cmp.b	#'a',d0
		blt.s	uc_exit
		cmp.b	#'z',d0
		bgt.s	uc_exit
		sub.b	#'a'-'A',d0
uc_exit:
		rts

	ENDC	;INCLUDE_WACK

	END
@


39.0
log
@V39 Exec initial checkin
@
text
@d27 1
a27 1
*	$Id$
d29 4
a32 1
*	$Log$
d158 1
a158 1
		bsr	IsHexNum
@
