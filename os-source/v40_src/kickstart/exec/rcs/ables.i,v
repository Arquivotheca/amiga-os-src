head     39.0;
branch   ;
access   ;
symbols  V40_9:39.0 V40_8:39.0 V40_7:39.0 V40_6:39.0 V40_5:39.0 V40_4:39.0 V40_3:39.0 V40_2:39.0 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.0; strict;
comment  @* @;


39.0
date     91.10.15.08.25.36;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@



39.0
log
@V39 Exec initial checkin
@
text
@	IFND	EXEC_ABLES_I
EXEC_ABLES_I	SET	1
**
**	$Id: ables.i,v 36.6 90/05/10 00:54:01 bryce Exp $
**
**	Task switch and interrupt control macros
**
**	(C) Copyright 1985,1986,1987,1988,1989 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

    IFND EXEC_TYPES_I
    INCLUDE "exec/types.i"
    ENDC	; EXEC_TYPES_I

    IFND EXEC_EXECBASE_I
    INCLUDE "exec/execbase.i"
    ENDC	; EXEC_EXECBASE_I


*-------------------------------------------------------------------------
*
*   Interrupt Exclusion Macros.  Disable all tasks and interrupts.
*
*-------------------------------------------------------------------------

INT_ABLES   MACRO		; externals used by DISABLE and ENABLE
	    XREF    _intena
	    ENDM

;Disable interrupts.  Avoid use of DISABLE if at all possible.
;Please realize the danger of this macro!  Don't disable for long periods!
DISABLE     MACRO   ; [scratchReg],[NOFETCH] or have ExecBase in A6.
	    IFC     '\1',''             ;Case 1: Assume A6=ExecBase
	      MOVE.W  #$04000,_intena	;(NOT IF_SETCLR)+IF_INTEN
	      ADDQ.B  #1,IDNestCnt(A6)
	      MEXIT
	    ENDC
	    IFC     '\2','NOFETCH'      ;Case 2: Assume \1=ExecBase
	      MOVE.W  #$04000,_intena
	      ADDQ.B  #1,IDNestCnt(\1)
	      MEXIT
	    ENDC
	    IFNC    '\1',''             ;Case 3: Use \1 as scratch
	      MOVE.L  4,\1		;Get ExecBase
	      MOVE.W  #$04000,_intena
	      ADDQ.B  #1,IDNestCnt(\1)
	      MEXIT
	    ENDC
	    ENDM

;Enable interrupts.  Please realize the danger of this macro!
ENABLE	    MACRO   ; [scratchReg],[NOFETCH] or have ExecBase in A6.
	    IFC     '\1',''             ;Case 1: Assume A6=ExecBase
	      SUBQ.B  #1,IDNestCnt(A6)
	      BGE.S   ENABLE\@@
	      MOVE.W  #$0C000,_intena	;IF_SETCLR+IF_INTEN
ENABLE\@@:
	      MEXIT
	    ENDC
	    IFC     '\2','NOFETCH'      ;Case 2: Assume \1=ExecBase
	      SUBQ.B  #1,IDNestCnt(\1)
	      BGE.S   ENABLE\@@
	      MOVE.W  #$0C000,_intena
ENABLE\@@:
	      MEXIT
	    ENDC
	    IFNC    '\1',''             ;Case 3: Use \1 as scratch
	      MOVE.L  4,\1		;Get ExecBase
	      SUBQ.B  #1,IDNestCnt(\1)
	      BGE.S   ENABLE\@@
	      MOVE.W  #$0C000,_intena
ENABLE\@@:
	      MEXIT
	    ENDC
	    ENDM


*-------------------------------------------------------------------------
*
*   Tasking Exclusion Macros.  Forbid all other tasks (but not interrupts)
*
*-------------------------------------------------------------------------

TASK_ABLES  MACRO		; externals used by FORBID and PERMIT
	    XREF    _LVOPermit
	    ENDM

;Prevent task switching (disables reschedule)
FORBID	    MACRO   ; [scratchReg],[NOFETCH] or ExecBase in A6!
	    IFC     '\1',''             ;Case 1: Assume A6=ExecBase
	      ADDQ.B  #1,TDNestCnt(A6)
	      MEXIT
	    ENDC
	    IFC     '\2','NOFETCH'      ;Case 2: Assume \1=ExecBase
	      ADDQ.B  #1,TDNestCnt(\1)
	      MEXIT
	    ENDC
	    IFNC    '\1',''             ;Case 3: Use \1 as scratch
	      MOVE.L  4,\1	;Get ExecBase
	      ADDQ.B  #1,TDNestCnt(\1)
	      MEXIT
	    ENDC
	    ENDM

;Enable task switching
PERMIT	    MACRO   ; [saveFlag],[NOFETCH] or ExecBase in A6!
	    IFC     '\1',''             ;Case 1: Assume A6=ExecBase
	      JSR     _LVOPermit(A6)
	      MEXIT
	    ENDC
	    IFC     '\2','NOFETCH'      ;Case 2: Assume \1=ExecBase
	      EXG.L   A6,\1		;put execbase in A6
	      JSR     _LVOPermit(A6)    ;no registers touched.  A6=ExecBase
	      EXG.L   A6,\1
	      MEXIT
	    ENDC
	    IFNC    '\1',''             ;Case 2: save/restore A6
	      MOVE.L  A6,-(SP)
	      MOVE.L  4,A6
	      JSR     _LVOPermit(A6)
	      MOVE.L  (SP)+,A6
	      MEXIT
	    ENDC
	    ENDM

	ENDC	; EXEC_ABLES_I
@
