head     39.36;
branch   ;
access   ;
symbols  V40_9:39.32 V40_8:39.31 V40_7:39.30 V40_6:39.28 V40_5:39.27 V40_4:39.27 V40_3:39.26 V40_2:39.26 V40_1:39.26 V40_0:39.26 V39_56:39.25 V39_55:39.25 V39_54:39.24 V39_53:39.24 V39_52:39.24 V39_50:39.23 V39_48:39.23 V39_47:39.22 V39_46:39.21 V39_45:39.21 V39_44:39.21 V39_43:39.20 V39_42:39.20 V39_41:39.20 V39_40:39.20 V39_39:39.20 V39_38:39.19 V39_37:39.19 V39_36:39.19 V39_35:39.18 V39_34:39.18 V39_33:39.18 V39_30:39.17 V39_29:39.17 V39_28:39.17 V39_27:39.17 V39_26:39.17 V39_25:39.16 V39_24:39.16 V39_23:39.16 V39_22:39.15 V39_20:39.14 V39_19:39.12 V39_18:39.9 V39_17:39.8 V39_16:39.8 V39_15:39.8 V39_14:39.8 V39_12:39.8 V39_11:39.7 V39_10:39.7 V39_9:39.7 V39_8:39.7 V39_7:39.7 V39_6:39.7 V39_5:39.6 V39_4:39.5 V39_3:39.4 V39_2:39.3 V39_1:39.0;
locks    jerryh:39.36; strict;
comment  @# @;


39.36
date     93.10.28.14.08.24;  author darren;  state Exp;
branches ;
next     39.35;

39.35
date     93.07.15.16.55.45;  author jesup;  state Exp;
branches ;
next     39.34;

39.34
date     93.07.15.16.36.38;  author jesup;  state Exp;
branches ;
next     39.33;

39.33
date     93.07.15.16.25.10;  author jesup;  state Exp;
branches ;
next     39.32;

39.32
date     93.05.24.12.04.07;  author mks;  state Exp;
branches ;
next     39.31;

39.31
date     93.05.18.10.38.06;  author mks;  state Exp;
branches ;
next     39.30;

39.30
date     93.04.13.14.58.46;  author mks;  state Exp;
branches ;
next     39.29;

39.29
date     93.04.13.14.51.16;  author mks;  state Exp;
branches ;
next     39.28;

39.28
date     93.04.01.11.44.11;  author mks;  state Exp;
branches ;
next     39.27;

39.27
date     93.02.26.14.00.18;  author mks;  state Exp;
branches ;
next     39.26;

39.26
date     93.02.09.15.47.05;  author mks;  state Exp;
branches ;
next     39.25;

39.25
date     93.01.18.16.03.08;  author mks;  state Exp;
branches ;
next     39.24;

39.24
date     92.11.13.09.11.15;  author mks;  state Exp;
branches ;
next     39.23;

39.23
date     92.10.06.15.30.42;  author mks;  state Exp;
branches ;
next     39.22;

39.22
date     92.08.28.07.24.16;  author mks;  state Exp;
branches ;
next     39.21;

39.21
date     92.07.13.17.02.00;  author mks;  state Exp;
branches ;
next     39.20;

39.20
date     92.06.07.16.05.50;  author mks;  state Exp;
branches ;
next     39.19;

39.19
date     92.05.27.16.02.38;  author mks;  state Exp;
branches ;
next     39.18;

39.18
date     92.05.21.18.41.03;  author mks;  state Exp;
branches ;
next     39.17;

39.17
date     92.04.15.14.47.35;  author mks;  state Exp;
branches ;
next     39.16;

39.16
date     92.04.06.07.21.22;  author mks;  state Exp;
branches ;
next     39.15;

39.15
date     92.03.26.13.30.06;  author mks;  state Exp;
branches ;
next     39.14;

39.14
date     92.03.16.17.02.23;  author mks;  state Exp;
branches ;
next     39.13;

39.13
date     92.03.13.10.57.39;  author mks;  state Exp;
branches ;
next     39.12;

39.12
date     92.03.12.09.34.17;  author mks;  state Exp;
branches ;
next     39.11;

39.11
date     92.03.12.09.31.26;  author mks;  state Exp;
branches ;
next     39.10;

39.10
date     92.03.11.14.13.16;  author mks;  state Exp;
branches ;
next     39.9;

39.9
date     92.03.02.13.50.31;  author mks;  state Exp;
branches ;
next     39.8;

39.8
date     92.02.19.15.46.24;  author mks;  state Exp;
branches ;
next     39.7;

39.7
date     92.01.27.14.25.23;  author mks;  state Exp;
branches ;
next     39.6;

39.6
date     92.01.21.17.07.01;  author mks;  state Exp;
branches ;
next     39.5;

39.5
date     91.12.19.19.49.13;  author mks;  state Exp;
branches ;
next     39.4;

39.4
date     91.12.11.15.33.25;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     91.10.29.15.30.29;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     91.10.29.14.26.09;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.28.15.38.46;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.31.08;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.36
log
@Make docs without requiring WShell long command lines.
@
text
@###############################################################################
#
# $(MAKE)file for exec.library
#
###############################################################################

#
# Server directory for the data...
#
REMOTE = V:src/kickstart/exec
VERSION= 40
MAKE= smake

#
# Name of the module
#
MODNAME	= exec

#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld$(TYPE)
LD_STRIP= $(MODNAME).ld.strip$(TYPE)
MAP_FILE= $(MODNAME).map$(TYPE)

#
# Define the macro below if this is a full release build
# (with the words BETA removed)  If you change this line,
# you should do a MAKE CLEAN
#
#RELEASE	= -D FINAL_RELEASE=1

#
# Magic loop-back to do the various versions
#
# $(TYPE)   = The type extention of the file.
# $(MACHINE)= The machine name definition.
# $(LOC)    = The location to load.
#
ALL:
	$(MAKE) -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)        "RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.a3000 MACHINE=MACHINE_A3000 LOC=LOC_F8 $(LD_STRIP).a3000  "RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.a4000 MACHINE=MACHINE_A4000 LOC=LOC_F8 $(LD_STRIP).a4000  "RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.a1200 MACHINE=MACHINE_A1200 LOC=LOC_F8 $(LD_STRIP).a1200  "RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.cdgs  MACHINE=MACHINE_CDGS  LOC=LOC_F8 $(LD_STRIP).cdgs   "RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.20    MACHINE=MACHINE_A2000 LOC=LOC_20 $(LD_STRIP).20    #"RELEASE=-D FINAL_RELEASE=1"
	$(MAKE) -s TYPE=.F0    MACHINE=MACHINE_A2000 LOC=LOC_F0 $(LD_STRIP).F0    #"RELEASE=-D FINAL_RELEASE=1"

#
# Compiler, assembler, and linker
#
CC = lc
AS = hx68 -a
LN = blink

#
# Compiler flags...
#
CFLAGS	= -b0 -v -me -ms -cfistqm -d1 -O

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -cqs -i include: $(RELEASE) -o

#
# Default rules...
#
.c.o:
	$(CC) $(CFLAGS) $*.c

.asm.o:
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Linker flags
#
LFLAGS		= SMALLCODE SMALLDATA QUIET
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= LIB:small.lib LIB:debug.lib debug.lib

#
# My headers...
#
PUBLIC_HDR =	types.i ables.i alerts.i devices.i errors.i execbase.i initializers.i \
		interrupts.i io.i libraries.i lists.i memory.i nodes.i ports.i \
		semaphores.i resident.i strings.i tasks.i exec.i types.h devices.h \
		errors.h execbase.h initializers.h interrupts.h io.h libraries.h \
		lists.h memory.h nodes.h ports.h semaphores.h resident.h tasks.h \
		exec.h alerts.h macros.i exec_lib.i

MY_HDR	=	assembly.i \
		calls.i \
		constants.i \
		privinfo.i \
		privintr.i \
		wackbase.i \
		$(PUBLIC_HDR)

#
# My C source...
#
MY_C	=

#
# My Assebly source...
#
MY_A	=	autodocs.asm \
coldstart.asm \
startexec.asm \
devices.asm \
exceptions.asm \
initializers.asm \
interrupts.asm \
lists.asm \
libraries.asm \
memory.asm \
offsets.asm \
ports.asm \
resources.asm \
tasks.asm \
dofmt.asm \
execlib.asm \
copymem.asm \
semaphores.asm \
debug.asm \
alert.asm \
sad.asm

#
# My object files...
#
MY_OBJS=	coldstart.o$(TYPE) \
		startexec.o$(TYPE) \
		devices.o \
		exceptions.o \
		initializers.o \
		interrupts.o \
		lists.o \
		libraries.o \
		memory.o \
		offsets.o \
		ports.o \
		resources.o \
		tasks.o \
		dofmt.o \
		execlib.o \
		copymem.o \
		semaphores.o \
		sad.o \
		alert.o$(TYPE)

#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the various versions
#
$(LD_FILE):	$(MY_OBJS) debug.lib
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MAP_FILE) HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

#
# Bump the version...
#
version:
	@@bumprev $(VERSION) $(MODNAME)_rev

$(MODNAME)_rev.i:
	@@bumprev $(VERSION) $(MODNAME)_rev

$(MODNAME)_rev.h:
	@@bumprev $(VERSION) $(MODNAME)_rev

#
# The following files need to be made for each of the ROM versions
#
# coldstart.asm    vers.asm    startexec.asm
#
coldstart.o$(TYPE):	coldstart.asm romconstants.i constants.i $(MODNAME)_rev.i
	$(AS) $*.asm $(AFLAGS) $*.o$(TYPE) -D $(MACHINE)=1 -D $(LOC)=1

startexec.o$(TYPE):	startexec.asm romconstants.i
	$(AS) $*.asm $(AFLAGS) $*.o$(TYPE) -D $(MACHINE)=1 -D $(LOC)=1

alert.o$(TYPE):	alert.asm romconstants.i
	$(AS) $*.asm $(AFLAGS) $*.o$(TYPE) -D $(MACHINE)=1 -D $(LOC)=1

offsets.o:	offsets.asm	exec_lib.i

debug.lib:	debug.o
	@@Copy debug.o debug.lib

#
# Release just the headers
#
headers:	$(PUBLIC_HDR)
	copy $(PUBLIC_HDR) V:include/exec NOPRO

#
# Release the current build to the server
#
internal:
	@@delete $(REMOTE)/((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@@copy ((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile) $(REMOTE)
	@@copy \#?.doc V:doc NOPRO
	@@copy \#?.sfd V:lib/sfd NOPRO

#
# Blow away all files that would need to be rebuilt
#
clean:
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?|$(MODNAME).map\#?)

#
# Make the AutoDocs
#
doc:	$(MODNAME).doc

$(MODNAME).doc:	$(MY_C) $(MY_A)
	@@Echo "Making $(MODNAME).doc"
	@@JOIN <as RAM:$(MODNAME).cat ~? ~< <
	$(MY_A) $(MY_C) ;
	<
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).cat
	@@Delete RAM:$(MODNAME).cat QUIET
	@@Protect $(MODNAME).doc +rwd

#
# Make a complete new release (This still is in testing...)
#
release:
	$(MAKE) clean
	$(MAKE) version
	$(MAKE)
	$(MAKE) doc
	$(MAKE) headers
	$(MAKE) internal

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@@protect \#? rwed QUIET
	@@copy $(REMOTE)/\#? ""
	@@protect \#? +r QUIET
	@@protect \#?_rev\#? rwd QUIET
	@@Echo "Local is updated..."
@


39.35
log
@ARGH.  Mike obviously didn't use lmk release...  It didn't work
@
text
@d113 20
a132 20
		coldstart.asm \
		startexec.asm \
		devices.asm \
		exceptions.asm \
		initializers.asm \
		interrupts.asm \
		lists.asm \
		libraries.asm \
		memory.asm \
		offsets.asm \
		ports.asm \
		resources.asm \
		tasks.asm \
		dofmt.asm \
		execlib.asm \
		copymem.asm \
		semaphores.asm \
		debug.asm \
		alert.asm \
		sad.asm
d245 6
a250 4
	@@Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	@@Delete RAM:$(MODNAME).tmp.doc QUIET
	@@Protect $(MODNAME).doc rwd
@


39.34
log
@grrr...  smake screws up on the "RELEASE=..." stuff
@
text
@d12 1
a12 1
MAKE= lmk
d256 2
a257 3
	smake doc
	$(MAKE) $(LD_FILE)
	$(MAKE) $(LD_STRIP)
@


39.33
log
@use smake since lmk breaks with long lines except under wshell
@
text
@d12 1
a12 1
MAKE= smake
d244 5
a248 5
	Echo "Making $(MODNAME).doc"
	Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	Delete RAM:$(MODNAME).tmp.doc QUIET
	Protect $(MODNAME).doc rwd
d256 1
a256 1
	$(MAKE) doc
@


39.32
log
@Build setup for release versions
@
text
@d3 1
a3 1
# lmkfile for exec.library
d12 1
d41 7
a47 7
	lmk -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)        "RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.a3000 MACHINE=MACHINE_A3000 LOC=LOC_F8 $(LD_STRIP).a3000  "RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.a4000 MACHINE=MACHINE_A4000 LOC=LOC_F8 $(LD_STRIP).a4000  "RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.a1200 MACHINE=MACHINE_A1200 LOC=LOC_F8 $(LD_STRIP).a1200  "RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.cdgs  MACHINE=MACHINE_CDGS  LOC=LOC_F8 $(LD_STRIP).cdgs   "RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.20    MACHINE=MACHINE_A2000 LOC=LOC_20 $(LD_STRIP).20    #"RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.F0    MACHINE=MACHINE_A2000 LOC=LOC_F0 $(LD_STRIP).F0    #"RELEASE=-D FINAL_RELEASE=1"
d244 5
a248 5
	@@Echo "Making $(MODNAME).doc"
	@@Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	@@Delete RAM:$(MODNAME).tmp.doc QUIET
	@@Protect $(MODNAME).doc rwd
d254 7
a260 7
	lmk clean
	lmk version
	lmk doc
	lmk $(LD_FILE)
	lmk $(LD_STRIP)
	lmk headers
	lmk internal
@


39.31
log
@Added the building of the A1200 EXEC and changed A1000 to A4000
@
text
@d40 3
a42 3
	lmk -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)       #"RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.a3000 MACHINE=MACHINE_A3000 LOC=LOC_F8 $(LD_STRIP).a3000 #"RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.a4000 MACHINE=MACHINE_A4000 LOC=LOC_F8 $(LD_STRIP).a4000 #"RELEASE=-D FINAL_RELEASE=1"
@


39.30
log
@CDGS EXEC is now a full production EXEC.  (ROM 3.1/no beta alert)
@
text
@d40 1
d42 3
a44 1
	lmk -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)       #"RELEASE=-D FINAL_RELEASE=1"
a46 3
	lmk -s TYPE=.a1000 MACHINE=MACHINE_A1000 LOC=LOC_F8 $(LD_STRIP).a1000 #"RELEASE=-D FINAL_RELEASE=1"
	lmk -s TYPE=.cdgs  MACHINE=MACHINE_CDGS  LOC=LOC_F8 $(LD_STRIP).cdgs   "RELEASE=-D FINAL_RELEASE=1"
#	lmk -s TYPE=.a1200 MACHINE=MACHINE_A1200 LOC=LOC_F8 $(LD_STRIP).a1200 #"RELEASE=-D FINAL_RELEASE=1"
@


39.29
log
@Fixed the link order (Alert must be the last module...)
@
text
@d45 1
a45 1
	lmk -s TYPE=.cdgs  MACHINE=MACHINE_CDGS  LOC=LOC_F8 $(LD_STRIP).cdgs  #"RELEASE=-D FINAL_RELEASE=1"
@


39.28
log
@Coldstart is now the first module of EXEC...
vers.asm is gone.
@
text
@d153 2
a154 2
		alert.o$(TYPE) \
		sad.o
@


39.27
log
@Added QUIET keyword for first link line
@
text
@a111 1
		vers.asm \
d136 1
a136 2
MY_OBJS=	vers.o$(TYPE) \
		coldstart.o$(TYPE) \
d201 1
a201 4
coldstart.o$(TYPE):	coldstart.asm romconstants.i constants.i
	$(AS) $*.asm $(AFLAGS) $*.o$(TYPE) -D $(MACHINE)=1 -D $(LOC)=1

vers.o$(TYPE):	vers.asm romconstants.i $(MODNAME)_rev.i
@


39.26
log
@Now will build as V40
@
text
@d77 1
a77 1
LFLAGS		= SMALLCODE SMALLDATA
@


39.25
log
@Added the CDGS build to the EXEC multi-build
@
text
@d11 1
a11 1
VERSION= 39
@


39.24
log
@Removed the "broken" ADDSYM keyword for the linker...
@
text
@d40 1
a40 1
	lmk -s TYPE=.a3000 MACHINE=MACHINE_A3000 LOC=LOC_F8 $(LD_STRIP).a3000
d42 2
a43 2
	lmk -s TYPE=.20    MACHINE=MACHINE_A2000 LOC=LOC_20 $(LD_STRIP).20
	lmk -s TYPE=.F0    MACHINE=MACHINE_A2000 LOC=LOC_F0 $(LD_STRIP).F0
d45 2
@


39.23
log
@Back to having the beta alert...
@
text
@d75 1
a75 1
LFLAGS		= ADDSYM SMALLCODE SMALLDATA
@


39.22
log
@Now builds the A4000 and A1200 EXEC with the RELEASE mode set
@
text
@d41 1
a41 1
	lmk -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)       "RELEASE=-D FINAL_RELEASE=1"
d44 1
a44 1
	lmk -s TYPE=.a1000 MACHINE=MACHINE_A1000 LOC=LOC_F8 $(LD_STRIP).a1000 "RELEASE=-D FINAL_RELEASE=1"
@


39.21
log
@Removed the variant SAD build...
@
text
@d41 1
a41 1
	lmk -s TYPE=       MACHINE=MACHINE_A2000 LOC=LOC_F8 $(LD_STRIP)
d44 1
a44 1
	lmk -s TYPE=.a1000 MACHINE=MACHINE_A1000 LOC=LOC_F8 $(LD_STRIP).a1000
@


39.20
log
@Added SAD to the conditional assembly list (for now)
@
text
@d154 1
a154 1
		sad.o$(TYPE)
a210 3
	$(AS) $*.asm $(AFLAGS) $*.o$(TYPE) -D $(MACHINE)=1 -D $(LOC)=1

sad.o$(TYPE):	sad.asm romconstants.i
@


39.19
log
@Changed to make the beta alert alway show in the non-ROM versions
@
text
@d154 1
a154 1
		sad.o
d211 3
@


39.18
log
@Added comment about the FINAL_RELEASE define
@
text
@d153 1
a153 1
		alert.o \
d208 3
@


39.17
log
@Removed the absolute.asm file since it no longer is needed...
@
text
@d26 7
d61 1
a61 1
AFLAGS	= -cqs -i include: -o
@


39.16
log
@Changed file lists to reflect Wack's death and SAD's birth
@
text
@a103 1
		absolute.asm \
a128 1
		absolute.o \
@


39.15
log
@Reordered a few of the modules in the link order
@
text
@a118 1
		rawio.asm \
d124 1
a124 5
		wacktrap.asm \
		wackmaps.asm \
		wackactions.asm \
		wackdefine.asm \
		wackinput.asm
a144 1
		rawio.o \
d149 1
a149 5
		wacktrap.o \
		wackmaps.o \
		wackactions.o \
		wackdefine.o \
		wackinput.o
@


39.14
log
@Changed the options to HX68
@
text
@d102 2
a103 1
MY_A	=	vers.asm \
d123 2
d129 1
a129 4
		wackinput.asm \
		debug.asm \
		alert.asm \
		autodocs.asm
d154 1
d159 1
a159 2
		wackinput.o \
		alert.o
@


39.13
log
@Removed the pool.asm file from the list of files/objects
@
text
@d54 1
a54 1
AFLAGS	= -cqsy -i include: -o
@


39.12
log
@Removed the extra ECHO
@
text
@a114 1
		pool.asm \
a146 1
		pool.o \
@


39.11
log
@Slightly optimized...
@
text
@a62 1
	@@Echo "$*.asm: " NOLINE
@


39.10
log
@Better makefile
@
text
@d21 3
a23 2
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip
d28 4
d177 2
a178 2
$(LD_STRIP)$(TYPE):	$(LD_FILE)$(TYPE)
	$(LN) FROM $(LD_FILE)$(TYPE) TO $(LD_STRIP)$(TYPE) $(LFLAGS_STRIP)
d183 1
a183 1
$(LD_FILE)$(TYPE):	$(MY_OBJS) debug.lib
d186 1
a186 1
TO $(LD_FILE)$(TYPE)
d188 1
a188 1
MAP $(MODNAME)$(TYPE).map HLSXF PLAIN SWIDTH 16
a208 4
# $(TYPE)   = The type extention of the file ex("" or .A3000 or .F0 or .20)
# $(MACHINE)= The machine name definition.  ex(MACHINE_A2000 or MACHINE_A3000)
# $(LOC)    = The location to load.  ex(LOC_F8  LOC_20  LOC_F0)
#
a209 1
	@@Echo "$*.asm: " NOLINE
a212 1
	@@Echo "$*.asm: " NOLINE
a215 1
	@@Echo "$*.asm: " NOLINE
d243 1
a243 1
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?|\#?.map)
@


39.9
log
@Now makes sure that coldstart has the right dependancies...
@
text
@d25 10
d75 13
a87 12
PUBLIC_HDR =	types.i ables.i alerts.i devices.i errors.i execbase.i \
		initializers.i interrupts.i io.i libraries.i \
		lists.i memory.i nodes.i ports.i semaphores.i \
		resident.i strings.i tasks.i exec.i \
		types.h devices.h errors.h execbase.h \
		initializers.h interrupts.h io.h libraries.h \
		lists.h memory.h nodes.h ports.h semaphores.h \
		resident.h tasks.h exec.h alerts.h \
		macros.i exec_lib.i

MY_HDR	=	assembly.i calls.i constants.i \
		privinfo.i privintr.i wackbase.i \
d98 29
a126 9
MY_A	=	vers.asm absolute.asm \
		coldstart.asm startexec.asm devices.asm exceptions.asm \
		initializers.asm interrupts.asm lists.asm libraries.asm \
		memory.asm offsets.asm ports.asm pool.asm \
		resources.asm tasks.asm dofmt.asm rawio.asm \
		execlib.asm copymem.asm semaphores.asm \
		wacktrap.asm wackmaps.asm wackactions.asm \
		wackdefine.asm wackinput.asm debug.asm \
		alert.asm autodocs.asm
d131 27
a157 18
MY_OBJS_A2000_F8=	vers.o absolute.o coldstart.o \
			startexec.o

MY_OBJS_A3000_F8=	vers.o.a3000 absolute.o coldstart.o.a3000 \
			startexec.o.a3000

MY_OBJS_A2000_20=	vers.o.20 absolute.o coldstart.o.20 \
			startexec.o.20

MY_OBJS_A2000_F0=	vers.o.F0 absolute.o coldstart.o.F0 \
			startexec.o.F0

MY_OBJS_OTHER=	devices.o exceptions.o initializers.o interrupts.o \
		lists.o libraries.o memory.o offsets.o ports.o pool.o \
		resources.o tasks.o dofmt.o rawio.o \
		execlib.o copymem.o semaphores.o \
		wacktrap.o wackmaps.o wackactions.o \
		wackdefine.o wackinput.o alert.o
a168 6

ALL:	$(LD_STRIP) \
	$(LD_STRIP).a3000 \
	$(LD_STRIP).20 \
	$(LD_STRIP).F0

d172 2
a173 11
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

$(LD_STRIP).a3000:	$(LD_FILE).a3000
	$(LN) FROM $(LD_FILE).a3000 TO $(LD_STRIP).a3000 $(LFLAGS_STRIP)

$(LD_STRIP).20:	$(LD_FILE).20
	$(LN) FROM $(LD_FILE).20 TO $(LD_STRIP).20 $(LFLAGS_STRIP)

$(LD_STRIP).F0:	$(LD_FILE).F0
	$(LN) FROM $(LD_FILE).F0 TO $(LD_STRIP).F0 $(LFLAGS_STRIP)
d178 1
a178 28
$(LD_FILE):	$(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER) debug.lib
	$(LN) <with <
FROM $(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

$(LD_FILE).a3000:	$(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER) debug.lib
	$(LN) <with <
FROM $(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)
TO $(LD_FILE).a3000
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map.a3000 HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

$(LD_FILE).20:	$(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER) debug.lib
	$(LN) <with <
FROM $(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER)
TO $(LD_FILE).20
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map.20 HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

$(LD_FILE).F0:	$(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER) debug.lib
d180 2
a181 2
FROM $(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER)
TO $(LD_FILE).F0
d183 1
a183 1
MAP $(MODNAME).map.F0 HLSXF PLAIN SWIDTH 16
d204 11
a214 43
coldstart.o:	coldstart.asm romconstants.i constants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o -D MACHINE_A2000=1 -D LOC_F8=1

coldstart.o.20:	coldstart.asm romconstants.i constants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.20 -D MACHINE_A2000=1 -D LOC_20=1

coldstart.o.F0:	coldstart.asm romconstants.i constants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.F0 -D MACHINE_A2000=1 -D LOC_F0=1

coldstart.o.a3000:	coldstart.asm romconstants.i constants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.a3000 -D MACHINE_A3000=1 -D LOC_F8=1

vers.o:	vers.asm romconstants.i $(MODNAME)_rev.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o -D MACHINE_A2000=1 -D LOC_F8=1

vers.o.20:	vers.asm romconstants.i $(MODNAME)_rev.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.20 -D MACHINE_A2000=1 -D LOC_20=1

vers.o.F0:	vers.asm romconstants.i $(MODNAME)_rev.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.F0 -D MACHINE_A2000=1 -D LOC_F0=1

vers.o.a3000:	vers.asm romconstants.i $(MODNAME)_rev.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.a3000 -D MACHINE_A3000=1 -D LOC_F8=1

startexec.o:	startexec.asm romconstants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o -D MACHINE_A2000=1 -D LOC_F8=1

startexec.o.20:	startexec.asm romconstants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.20 -D MACHINE_A2000=1 -D LOC_20=1

startexec.o.F0:	startexec.asm romconstants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.F0 -D MACHINE_A2000=1 -D LOC_F0=1
d216 1
a216 1
startexec.o.a3000:	startexec.asm romconstants.i
d218 1
a218 1
	$(AS) $*.asm $(AFLAGS) $*.o.a3000 -D MACHINE_A3000=1 -D LOC_F8=1
d245 1
a245 1
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?)
@


39.8
log
@Minor update to make file and dependancy list
@
text
@d206 1
a206 1
coldstart.o:	coldstart.asm romconstants.i
d210 1
a210 1
coldstart.o.20:	coldstart.asm romconstants.i
d214 1
a214 1
coldstart.o.F0:	coldstart.asm romconstants.i
d218 1
a218 1
coldstart.o.a3000:	coldstart.asm romconstants.i
@


39.7
log
@Removed the CDTV custom exec as it is no longer needed...
(New magic in CDTV ROM)
@
text
@d253 2
@


39.6
log
@Folded in the CDTV_CR changes as needed...
@
text
@a111 6
MY_OBJS_CDTV=		vers.o.CDTV absolute.o coldstart.o.CDTV \
			startexec.o.CDTV

#
# Note alert.o is always last
#
d117 1
a117 1
		wackdefine.o wackinput.o
a149 3
$(LD_STRIP).CDTV:	$(LD_FILE).CDTV
	$(LN) FROM $(LD_FILE).CDTV TO $(LD_STRIP).CDTV $(LFLAGS_STRIP)

d153 1
a153 1
$(LD_FILE):	$(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER) debug.lib alert.o
d155 1
a155 1
FROM $(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER)	alert.o
d162 1
a162 1
$(LD_FILE).a3000:	$(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER) debug.lib alert.o
d164 1
a164 1
FROM $(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)	alert.o
d171 1
a171 1
$(LD_FILE).20:	$(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER) debug.lib alert.o
d173 1
a173 1
FROM $(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER)	alert.o
d180 1
a180 1
$(LD_FILE).F0:	$(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER) debug.lib alert.o
d182 1
a182 1
FROM $(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER)	alert.o
a188 9
$(LD_FILE).CDTV:	$(MY_OBJS_CDTV)	$(MY_OBJS_OTHER) debug.lib alert.o.CDTV
	$(LN) <with <
FROM $(MY_OBJS_CDTV)	$(MY_OBJS_OTHER)	alert.o.CDTV
TO $(LD_FILE).CDTV
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map.CDTV HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

a221 4
coldstart.o.CDTV:	coldstart.asm romconstants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.CDTV -D CDTV_CR=1 -D LOC_F8=1

a237 4
vers.o.CDTV:	vers.asm romconstants.i $(MODNAME)_rev.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.CDTV -D CDTV_CR=1 -D LOC_F8=1

a252 8

startexec.o.CDTV:	startexec.asm romconstants.i
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.CDTV -D CDTV_CR=1 -D LOC_F8=1

alert.o.CDTV:	alert.asm
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o.CDTV -D CDTV_CR=1 -D LOC_F8=1
@


39.5
log
@Made the debug.o into a debug.lib for quicker debugging...
@
text
@d112 6
d123 1
a123 1
		wackdefine.o wackinput.o alert.o
d156 3
d162 1
a162 1
$(LD_FILE):	$(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER)	debug.lib
d164 1
a164 1
FROM $(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER)
d171 1
a171 1
$(LD_FILE).a3000:	$(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)	debug.lib
d173 1
a173 1
FROM $(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)
d180 1
a180 1
$(LD_FILE).20:	$(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER)	debug.lib
d182 1
a182 1
FROM $(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER)
d189 1
a189 1
$(LD_FILE).F0:	$(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER)	debug.lib
d191 1
a191 1
FROM $(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER)
d198 9
d240 4
d260 4
d279 8
@


39.4
log
@Added header file release code
@
text
@d60 1
a60 1
LIBS= LIB:small.lib LIB:debug.lib
d117 1
a117 1
		wackdefine.o wackinput.o debug.o alert.o
d153 1
a153 1
$(LD_FILE):	$(MY_OBJS_A2000_F8)	$(MY_OBJS_OTHER)
d162 1
a162 1
$(LD_FILE).a3000:	$(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)
d171 1
a171 1
$(LD_FILE).20:	$(MY_OBJS_A2000_20)	$(MY_OBJS_OTHER)
d180 1
a180 1
$(LD_FILE).F0:	$(MY_OBJS_A2000_F0)	$(MY_OBJS_OTHER)
d253 3
@


39.3
log
@Fixed case problem with A3000 build
@
text
@d65 1
a65 3
MY_HDR	=	assembly.i calls.i constants.i \
		privinfo.i privintr.i wackbase.i \
		types.i ables.i alerts.i devices.i errors.i execbase.i \
d70 1
a70 1
		interrupts.h io.h libraries.h \
d72 6
a77 1
		resident.h tasks.h exec.h alerts.h
d254 5
d297 1
@


39.2
log
@Fixed typo in lmkfile
@
text
@d100 2
a101 2
MY_OBJS_A3000_F8=	vers.o.A3000 absolute.o coldstart.o.A3000 \
			startexec.o.A3000
d128 1
a128 1
	$(LD_STRIP).A3000 \
d138 2
a139 2
$(LD_STRIP).A3000:	$(LD_FILE).A3000
	$(LN) FROM $(LD_FILE).A3000 TO $(LD_STRIP).A3000 $(LFLAGS_STRIP)
d159 1
a159 1
$(LD_FILE).A3000:	$(MY_OBJS_A3000_F8)	$(MY_OBJS_OTHER)
d162 1
a162 1
TO $(LD_FILE).A3000
d164 1
a164 1
MAP $(MODNAME).map.A3000 HLSXF PLAIN SWIDTH 16
d215 1
a215 1
coldstart.o.A3000:	coldstart.asm romconstants.i
d217 1
a217 1
	$(AS) $*.asm $(AFLAGS) $*.o.A3000 -D MACHINE_A3000=1 -D LOC_F8=1
d231 1
a231 1
vers.o.A3000:	vers.asm romconstants.i $(MODNAME)_rev.i
d233 1
a233 1
	$(AS) $*.asm $(AFLAGS) $*.o.A3000 -D MACHINE_A3000=1 -D LOC_F8=1
d247 1
a247 1
startexec.o.A3000:	startexec.asm romconstants.i
d249 1
a249 1
	$(AS) $*.asm $(AFLAGS) $*.o.A3000 -D MACHINE_A3000=1 -D LOC_F8=1
@


39.1
log
@Unified makefile for the 4 exec versions
@
text
@d104 1
a104 1
			startexec.o.A3000
@


39.0
log
@V39 Exec initial checkin
@
text
@d54 1
a54 1
LFLAGS		= ADDSYM SMALLCODE SMALLDATA MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
d92 1
a92 1
		alert.asm mmu.asm autodocs.asm
d97 15
a111 5
MY_OBJS	=	vers.o \
		absolute.o coldstart.o startexec.o devices.o \
		exceptions.o initializers.o interrupts.o lists.o \
		libraries.o memory.o offsets.o ports.o pool.o \
		resources.o tasks.o dofmt.o rawio.o\
d114 1
a114 3
		wackdefine.o wackinput.o debug.o \
		alert.o mmu.o

d126 6
d138 9
d148 1
a148 1
# Build the LD file...
d150 1
a150 1
$(LD_FILE):	$(MY_OBJS) $(MY_LIBS)
d152 1
a152 1
FROM $(MY_OBJS)
d155 10
d168 18
d199 3
a201 1
# Specific dependancies...
d203 48
a250 1
vers.o:	vers.asm $(MODNAME)_rev.i
d266 1
a266 1
	@@delete (\#?.o|$(MODNAME).doc|$(MODNAME).ld)
@
