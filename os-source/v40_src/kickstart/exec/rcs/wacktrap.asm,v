head     39.0;
branch   ;
access   ;
symbols  V40_9:39.0 V40_8:39.0 V40_7:39.0 V40_6:39.0 V40_5:39.0 V40_4:39.0 V40_3:39.0 V40_2:39.0 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @* @;


39.0
date     91.10.15.08.29.48;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@



39.0
log
@V39 Exec initial checkin
@
text
@*	   ************************************************
*	   **						 **
*	   **	   --------------------------------	 **
*	   **	    ROM OPERATING SYSTEM EXECUTIVE	 **
*	   **	   --------------------------------	 **
*	   **						 **
*	   **						 **
*	   **						 **
*	   ************************************************

*************************************************************************
*									*
*   Copyright 1984,85,88,89 Commodore-Amiga, Inc.			*
*   All rights reserved.  No part of this program may be reproduced,	*
*   transmitted, transcribed, stored in retrieval system, or		*
*   translated into any language or computer language, in any form	*
*   or by any means, electronic, mechanical, magnetic, optical, 	*
*   chemical, manual or otherwise, without the prior written		*
*   permission of Commodore-Amiga, Incorporated.			*
*									*
*************************************************************************

**********************************************************************
*
*   Source Control:
*
*	$Id$
*
*	$Log$
*********************************************************************

	NOLIST
	INCLUDE "assembly.i"
	LIST

	IFEQ	INCLUDE_WACK
	XDEF	Debug
Debug:
	MOVEQ	#0,D0
	RTS
	ENDC

	IFNE	INCLUDE_WACK
	NOLIST
	INCLUDE "types.i"
	INCLUDE "constants.i"

	INCLUDE "nodes.i"
	INCLUDE "lists.i"
	INCLUDE "libraries.i"
	INCLUDE "interrupts.i"
	INCLUDE "tasks.i"
	INCLUDE "resident.i"
	INCLUDE "execbase.i"
	INCLUDE "wackbase.i"

	INCLUDE "hardware/intbits.i"
	LIST

;****** exports *********************

	XDEF	WackInitCode
	XDEF	Debug
	XDEF	WackCrash


	XREF	RawIOInit
	XREF	RawPutStr
	XREF	_TopKeyMap
	XREF	_Interp
	XREF	_LVODebug
	XREF	_LVOSupervisor
	XREF	ClearBreak
	XREF	_intena
	XREF	_intenar
	XREF	ShowTrapRegs
	XREF	TypeOfCPU


*  if not trap 15, then just enter wack
*  if trap 15, then scan bp list for same address;
*	if not found, then just enter wack.
*	if found, clear breakpoint and enter wack
*
*  if break set on current, step one then set bp
*  ^D for resume
*  go for execute from current

************************************************************************

WackName	dc.b	10,'rom-wack',0
		ds.w	0

************************************************************************
*
*	Wack Coldstart Initialization (Optional)
*
************************************************************************
WackInitCode:
		move.l	a6,-(sp)
		move.l	#WACKBASE,a6
		bsr	initBase
		move.l	(sp)+,a6
		move.l	#WackCrash,DebugEntry(a6)
		move.l	#Debug,_LVODebug+2(a6)
		bra	RawIOInit


************************************************************************
*
*	Wack Entry Points
*
************************************************************************

*****o* exec.library/Debug ********************************************
*
*   NAME
*	Debug -- run the system debugger
*
*   SYNOPSIS
*	Debug(0)
*	      d0
*
*   FUNCTION
*	This function calls the system debugger.  By default
*	this debugger is "ROM-WACK".  Other debuggers are
*	encouraged to take over this entry point (via SetFunction())
*	so that when an application calls Debug(), the alternative
*	debugger will get control.
*
*   SEE ALSO
*	SetFunction
*	your favorite debugger's manual, the ROM-WACK chapter of the
*	exec Rom Kernal Manual
*
**********************************************************************


TraceEntry:
	;------ trace entry:
		move.l	#$9,-(sp)	; exception number
		bra.s	WackCrash

	;------ breakpoint entry:
TrapEntry:
		move.l	#$2f,-(sp)	; exception number
		bra.s	WackCrash

	;------ user-mode program entry:
Debug:
		move.l	a5,-(sp)        ; preserve A5
		lea	1$(pc),a5
		jmp	_LVOSupervisor(a6)
1$:		move.l	USP,a5
		move.l	(a5)+,-(sp)     ; re-preserve A5
		move.l	a5,USP
		move.l	(sp)+,a5        ; restore A5
		clr.l	-(sp)           ; exception number (none)
*		fall	thru

	;------ main supervisor mode entry point:
WackCrash:
		;------ is the supervisor stack ok?
		move.l	#$F1E2D3C4,-(sp)
		cmp.l	#$F1E2D3C4,(sp)+
		beq.s	stackOK
		move.l	#TEMP_SUP_STACK,sp
		clr.l	-(sp)                   ; PC
		clr.l	-(sp)                   ; SR & format word for >='010
		clr.l	-(sp)                   ; XCPT
		not.l	(sp)                    ; Fake XCPT as -1

stackOK:
		;------ save context:
		movem.l d0-d7/a0-a6,-(sp)       ; save prog registers
		lea	15*4(sp),a5             ; pointer to xcpt frame
		lea	-sf_regs(sp),sp         ; room for special data
		move.l	sp,a4			; wack context pointer
		clr.l	sf_task(a4)             ; (temporary)

		move.l	(a5)+,d3                ; exception number
		move.l	d3,sf_xcpt(a4)
		move.l	a5,sf_ssp(a4)           ; processor stack frame
		move.l	usp,a0
		move.l	a0,sf_usp(a4)           ; user stack

		;------ check for special frame processing:
		bsr	TypeOfCPU
		and.w	#$000f,d0	;Mask out coprocessor bits (bryce)
		tst.b	d0
		bne.s	shortFrame	;is not a 68000
		cmp.w	#3,d3
		bgt.s	shortFrame
		cmp.w	#2,d3
		blt.s	shortFrame
		addq.l	#8,a5		;SR is offset 8 in 68000 group 0
shortFrame:
		btst.b	#5,(a5)
		bne.s	noTask
		move.l	SysBase,d0
		btst	#0,d0		;Prevent another address error!
		bne.s	noTask
		move.l	d0,a0
		move.l	ThisTask(a0),sf_task(a4)
noTask:
		move.w	(a5)+,sf_sr(a4)
		move.l	(a5),sf_pc(a4)

		move.l	#WACKBASE,a6

	;------ Grab old serial port interrupt state then disable it:
		move.w	_intenar,wb_Intena(a6)
		move.w	#(INTF_RBF!INTF_TBE),d0
		move.w	d0,_intena
		bset.l	#INTB_SETCLR,d0
		and.w	d0,wb_Intena(a6)

		bsr	RawIOInit

		lea	WackName(pc),a0
		bsr	RawPutStr

		move.l	a4,wb_RegBase(a6)
		moveq.l #-2,d2
		and.l	sf_pc(a4),d2
		move.l	d2,sf_pc(a4)    ;force sf_pc to be even
		move.l	d2,wb_CurrAddr(a6)

		;------ breakpoint trap?
chkBPt: 	cmp.l	#$2f,sf_xcpt(a4)
		bne.s	noBPt
		subq.l	#2,wb_CurrAddr(a6)
		bsr	ClearBreak		; uses CurrAddr
noBPt
		move.l	wb_CurrAddr(a6),sf_pc(a4)

		move.l	a4,a1
		move.l	#TrapEntry,Trap15Vector ; steal it !!!
		move.l	#TraceEntry,TraceVector ; steal it !!!
		move.l	#$1000000,wb_MarkAddr(a6)
		bsr	ShowTrapRegs
		bsr	_Interp


	XDEF	StepOne
StepOne:
		move.l	wb_RegBase(a6),a0
		move.w	sf_sr(a0),sf_retsr(a0)
		or.w	#$8000,sf_retsr(a0)
		bra.s	exitCont

	XDEF	GoCurr
GoCurr:
		move.l	wb_RegBase(a6),a0
		move.l	wb_CurrAddr(a6),sf_pc(a0)

	XDEF	ExitWack
ExitWack:
		move.l	wb_RegBase(a6),a0
		move.w	sf_sr(a0),sf_retsr(a0)
		and.w	#$7FFF,sf_retsr(a0)
exitCont:
		move.w	wb_Intena(a6),_intena

		move.l	sf_pc(a0),sf_retpc(a0)

		move.l	sf_usp(a0),a1
		move.l	a1,usp
		lea	sf_regs(a0),sp
		movem.l (sp)+,d0-d7/a0-a6
		addq.l	#4,sp			; orig xcpt
		rte

initBase:
		move.l	a6,a0
		move.w	#wb_size/2-1,d0
ib_clear
		clr.w	(a0)+
		dbf	d0,ib_clear
		lea.l	wb_indirStack(a6),a0
		move.l	a0,wb_IndirPtr(a6)
		move.l	#_TopKeyMap,wb_ThisMap(a6)
		move.l	#16,wb_FrameSize(a6)
		move.w	#$4e4f,wb_TrapInst(a6)
		rts

	ENDC	;INCLUDE_WACK
	END

@
