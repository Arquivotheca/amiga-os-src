head     39.3;
branch   ;
access   ;
symbols  V40_9:39.3 V40_8:39.3 V40_7:39.3 V40_6:39.3 V40_5:39.3 V40_4:39.3 V40_3:39.3 V40_2:39.3 V40_1:39.3 V40_0:39.3 V39_56:39.3 V39_55:39.3 V39_54:39.3 V39_53:39.3 V39_52:39.3 V39_50:39.3 V39_48:39.3 V39_47:39.3 V39_46:39.3 V39_45:39.3 V39_44:39.3 V39_43:39.3 V39_42:39.3 V39_41:39.3 V39_40:39.3 V39_39:39.3 V39_38:39.3 V39_37:39.3 V39_36:39.3 V39_35:39.3 V39_34:39.3 V39_33:39.3 V39_30:39.1 V39_29:39.1 V39_28:39.1 V39_27:39.1 V39_26:39.1 V39_25:39.1 V39_24:39.1 V39_23:39.1 V39_22:39.1 V39_20:39.1 V39_19:39.1 V39_18:39.1 V39_17:39.1 V39_16:39.1 V39_15:39.1 V39_14:39.1 V39_12:39.1 V39_11:39.1 V39_10:39.1 V39_9:39.1 V39_8:39.1 V39_7:39.1 V39_6:39.1 V39_5:39.1 V39_4:39.1 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.3; strict;
comment  @ * @;


39.3
date     92.05.21.11.46.24;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.05.20.15.39.19;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.12.19.09.45.24;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.28.08;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.3
log
@Added the define for MEMF_NO_EXPUNGE (missing from the .h file)
@
text
@#ifndef	EXEC_MEMORY_H
#define	EXEC_MEMORY_H
/*
**	$Id: memory.h,v 39.2 92/05/20 15:39:19 mks Exp Locker: mks $
**
**	Definitions and structures used by the memory allocation system
**
**	(C) Copyright 1985,1986,1987,1988,1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef EXEC_NODES_H
#include "exec/nodes.h"
#endif /* EXEC_NODES_H */


/****** MemChunk ****************************************************/

struct  MemChunk {
    struct  MemChunk *mc_Next;  /* pointer to next chunk */
    ULONG   mc_Bytes;           /* chunk byte size      */
};


/****** MemHeader ***************************************************/

struct  MemHeader {
    struct  Node mh_Node;
    UWORD   mh_Attributes;      /* characteristics of this region */
    struct  MemChunk *mh_First; /* first free region            */
    APTR    mh_Lower;           /* lower memory bound           */
    APTR    mh_Upper;           /* upper memory bound+1         */
    ULONG   mh_Free;            /* total number of free bytes   */
};


/****** MemEntry ****************************************************/

struct  MemEntry {
union {
    ULONG   meu_Reqs;           /* the AllocMem requirements */
    APTR    meu_Addr;           /* the address of this memory region */
    } me_Un;
    ULONG   me_Length;          /* the length of this memory region */
};

#define me_un       me_Un       /* compatibility - do not use*/
#define me_Reqs     me_Un.meu_Reqs
#define me_Addr     me_Un.meu_Addr


/****** MemList *****************************************************/

/* Note: sizeof(struct MemList) includes the size of the first MemEntry! */
struct  MemList {
    struct  Node ml_Node;
    UWORD   ml_NumEntries;      /* number of entries in this struct */
    struct  MemEntry ml_ME[1];  /* the first entry      */
};

#define ml_me   ml_ME           /* compatability - do not use */


/*----- Memory Requirement Types ---------------------------*/
/*----- See the AllocMem() documentation for details--------*/

#define MEMF_ANY    (0L)	/* Any type of memory will do */
#define MEMF_PUBLIC (1L<<0)
#define MEMF_CHIP   (1L<<1)
#define MEMF_FAST   (1L<<2)
#define MEMF_LOCAL  (1L<<8)	/* Memory that does not go away at RESET */
#define MEMF_24BITDMA (1L<<9)   /* DMAable memory within 24 bits of address */
#define	MEMF_KICK   (1L<<10)	/* Memory that can be used for KickTags */

#define MEMF_CLEAR   (1L<<16)	/* AllocMem: NULL out area before return */
#define MEMF_LARGEST (1L<<17)	/* AvailMem: return the largest chunk size */
#define MEMF_REVERSE (1L<<18)	/* AllocMem: allocate from the top down */
#define MEMF_TOTAL   (1L<<19)	/* AvailMem: return total size of memory */

#define	MEMF_NO_EXPUNGE	(1L<<31) /*AllocMem: Do not cause expunge on failure */

/*----- Current alignment rules for memory blocks (may increase) -----*/
#define MEM_BLOCKSIZE   8L
#define MEM_BLOCKMASK   (MEM_BLOCKSIZE-1)


/****** MemHandlerData **********************************************/
/* Note:  This structure is *READ ONLY* and only EXEC can create it!*/
struct MemHandlerData
{
	ULONG	memh_RequestSize;	/* Requested allocation size */
	ULONG	memh_RequestFlags;	/* Requested allocation flags */
	ULONG	memh_Flags;		/* Flags (see below) */
};

#define	MEMHF_RECYCLE	(1L<<0)	/* 0==First time, 1==recycle */

/****** Low Memory handler return values ***************************/
#define	MEM_DID_NOTHING	(0)	/* Nothing we could do... */
#define	MEM_ALL_DONE	(-1)	/* We did all we could do */
#define	MEM_TRY_AGAIN	(1)	/* We did some, try the allocation again */

#endif	/* EXEC_MEMORY_H */
@


39.2
log
@Added the new MEMF_KICK flag
@
text
@d4 1
a4 1
**	$Id: memory.h,v 39.1 91/12/19 09:45:24 mks Exp Locker: mks $
d79 2
@


39.1
log
@Added defines and structures needed for the low memory handler
@
text
@d4 1
a4 1
**	$Id: memory.h,v 39.0 91/10/15 08:28:08 mks Exp Locker: mks $
d73 1
@


39.0
log
@V39 Exec initial checkin
@
text
@d4 1
a4 1
**	$Id: memory.h,v 36.12 91/03/15 07:10:33 bryce Exp $
d33 1
a33 1
    ULONG   mh_Free;            /* total number of free bytes   */ 
d82 17
@
