head     39.1;
branch   ;
access   ;
symbols  V40_9:39.1 V40_8:39.1 V40_7:39.1 V40_6:39.1 V40_5:39.1 V40_4:39.1 V40_3:39.1 V40_2:39.1 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.1; strict;
comment  @* @;


39.1
date     93.02.24.08.45.57;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.29.18;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.1
log
@Changed include_version to 40
@
text
@	IFND	EXEC_TYPES_I
EXEC_TYPES_I	SET	1
**
**	$Id: types.i,v 39.0 91/10/15 08:29:18 mks Exp Locker: mks $
**
**	Data storage macros.  Must be included before any other Amiga include.
**
**	(C) Copyright 1985,1986,1987,1988,1989 Commodore-Amiga, Inc.
**	    All Rights Reserved
**


INCLUDE_VERSION	EQU 40	;Version of the include files in use. (Do not
			;use this label for OpenLibrary() calls!)


EXTERN_LIB  MACRO
            XREF    _LVO\1
            ENDM

**
** Structure Building Macros
**
STRUCTURE   MACRO		; structure name, initial offset
\1          EQU     0
SOFFSET     SET     \2
            ENDM

FPTR        MACRO		; function pointer (32 bits - all bits valid)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
	    ENDM

BOOL        MACRO		; boolean (16 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

BYTE        MACRO		; byte (8 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+1
            ENDM

UBYTE       MACRO		; unsigned byte (8 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+1
            ENDM

WORD        MACRO		; word (16 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

UWORD       MACRO		; unsigned word (16 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

SHORT       MACRO		; obsolete - use WORD
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

USHORT      MACRO		; obsolete - use UWORD
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

LONG        MACRO		; long (32 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
            ENDM

ULONG       MACRO		; unsigned long (32 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
            ENDM

FLOAT       MACRO		; C float (32 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
            ENDM

DOUBLE	    MACRO		; C double (64 bits)
\1	    EQU	    SOFFSET
SOFFSET	    SET	    SOFFSET+8
	    ENDM

APTR        MACRO		; untyped pointer (32 bits - all bits valid)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
            ENDM

CPTR        MACRO		; obsolete
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+4
	    ENDM

RPTR        MACRO		; unsigned relative pointer (16 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+2
            ENDM

LABEL       MACRO		; Define a label without bumping the offset
\1          EQU     SOFFSET
            ENDM

STRUCT      MACRO		; Define a sub-structure
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+\2
            ENDM

ALIGNWORD   MACRO		; Align structure offset to nearest word
SOFFSET     SET     (SOFFSET+1)&$fffffffe
	    ENDM

ALIGNLONG   MACRO		; Align structure offset to nearest longword
SOFFSET     SET     (SOFFSET+3)&$fffffffc
	    ENDM

**
** Enumerated variables.  Use ENUM to set a base number, and EITEM to assign
** incrementing values.  ENUM can be used to set a new base at any time.
**
ENUM	    MACRO   ;[new base]
	    IFC     '\1',''
EOFFSET	    SET	    0		; Default to zero
	    ENDC
	    IFNC    '\1',''
EOFFSET	    SET     \1
	    ENDC
	    ENDM

EITEM	    MACRO   ;label
\1          EQU     EOFFSET
EOFFSET     SET     EOFFSET+1
	    ENDM

**
**  Bit Definition Macro
**
**  Given:
**	BITDEF  MEM,CLEAR,16
**
**  Yields:
**	MEMB_CLEAR  EQU 16			; Bit number
**	MEMF_CLEAR  EQU 1<<16			; Bit mask
**

BITDEF      MACRO   ; prefix,&name,&bitnum
            BITDEF0 \1,\2,B_,\3
\@@BITDEF    SET     1<<\3
            BITDEF0 \1,\2,F_,\@@BITDEF
            ENDM

BITDEF0     MACRO   ; prefix,&name,&type,&value
\1\3\2      EQU     \4
            ENDM

**
** LIBRARY_VERSION is now obsolete.  Please use LIBRARY_MINIMUM or code
** the specific minimum library version you require.
**		LIBRARY_VERSION EQU     36
**
LIBRARY_MINIMUM	EQU 33	;Lowest version supported by Commodore-Amiga

	ENDC	; EXEC_TYPES_I
@


39.0
log
@V39 Exec initial checkin
@
text
@d4 1
a4 1
**	$Id: types.i,v 36.10 91/03/15 03:39:17 bryce Exp $
d13 1
a13 1
INCLUDE_VERSION	EQU 36	;Version of the include files in use. (Do not
@
