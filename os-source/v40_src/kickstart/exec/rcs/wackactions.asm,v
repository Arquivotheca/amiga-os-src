head     39.0;
branch   ;
access   ;
symbols  V40_9:39.0 V40_8:39.0 V40_7:39.0 V40_6:39.0 V40_5:39.0 V40_4:39.0 V40_3:39.0 V40_2:39.0 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @* @;


39.0
date     91.10.15.08.29.24;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@



39.0
log
@V39 Exec initial checkin
@
text
@*	   ************************************************
*	   **						 **
*	   **	   --------------------------------	 **
*	   **	    ROM OPERATING SYSTEM EXECUTIVE	 **
*	   **	   --------------------------------	 **
*	   **						 **
*	   **	       ROM debugger key actions 	 **
*	   **						 **
*	   ************************************************

*************************************************************************
*									*
*   Copyright 1984,85,88,89 Commodore-Amiga, Inc.			*
*   All rights reserved.  No part of this program may be reproduced,	*
*   transmitted, transcribed, stored in retrieval system, or		*
*   translated into any language or computer language, in any form	*
*   or by any means, electronic, mechanical, magnetic, optical, 	*
*   chemical, manual or otherwise, without the prior written		*
*   permission of Commodore-Amiga, Incorporated.			*
*									*
*************************************************************************

**********************************************************************
*
*   Source Control:
*
*	$Id$
*
*	$Log$
*********************************************************************

REMOTE		EQU	0

	NOLIST
	INCLUDE "assembly.i"
	LIST
	IFNE	INCLUDE_WACK
	NOLIST
	INCLUDE "types.i"
	INCLUDE "nodes.i"
	INCLUDE "wackbase.i"
	LIST



	XREF	GetNumber

	XREF	RawPutChar
	XREF	RawPutStr
	XREF	RawPutHex
	XREF	RawPutFmt
	XREF	RawMayGetChar
	XREF	RawGetChar
	XREF	UpperCase
	XREF	_SymMap

	XDEF	_Execute


REFRESH 	macro
		move.b	#1,wb_flags(a6)
		endm


************************************************************************
*
*	Memory Manipulation
*
************************************************************************

	IFNE	REMOTE	; not needed unless REMOTE -bryce
	XDEF	_GetMemL
_GetMemL:
		move.l	4(sp),a0
		move.l	(a0),d0
		rts

	XDEF	_GetMem
_GetMem:
		move.l	4(sp),a0
		move.w	(a0),d0
		rts

	XDEF	_PutMem
_PutMem:
		movem.l 4(sp),a0/a1
		move.w	a1,(a0)
		rts
	ENDC

************************************************************************
*
*	UserMode -- attempt to switch wack to user mode
*
************************************************************************
	XDEF	UserMode
UserMode:
		;------ don't do it if we were super:
		move.l	wb_RegBase(a6),a0
		btst.b	#5,sf_sr(a0)    ; supervisor mode?
		bne.s	um_exit

		;------ calculate new register base:
		move.l	sf_usp(a0),a1   ; destination
		lea	-sf_size(a1),a1
		move.l	a1,wb_RegBase(a6)
		lea	sf_size(a1),a1

		;------ calculate new super stack pointer:
		add.w	#sf_size,a0
		move.l	a0,d1

		;------ move entire stack to user stack:
		move.l	a0,d0
		sub.l	sp,d0
		bra.s	um_start
um_move:	move.b	-(a0),-(a1)
um_start:	dbf	d0,um_move

		;------ setup new stacks:
		move.l	d1,sp
		move.l	a1,usp

		;------ change cpu mode:
		move.l	wb_RegBase(a6),a0
		move.w	sf_sr(a0),sr
um_exit:
		bra	newline


************************************************************************
*
*	result = CompareStr (s1, s2)
*	d0		     a0  a1
*
************************************************************************

**** Never used -bryce
****	XDEF	_CompareStr
****_CompareStr:
****		movem.l 4(sp),a0/a1
	XDEF	CompareStr
CompareStr:
		moveq	#-1,d0
ss_next:
		move.b	(a0)+,d1
		beq.s	ss_check
		cmp.b	(a1)+,d1
		dbne	d0,ss_next
		neg.l	d0
		bra.s	ss_exit

ss_check:	cmp.b	(a1)+,d1
		bne.s	ss_exit
		moveq	#0,d0
ss_exit:
		rts


************************************************************************
*
*	....
*
************************************************************************

	XDEF	ShowFrame

ShowFrame:
		REFRESH
		rts


************************************************************************
*
*	Asssignment States
*
************************************************************************


************************************************************************
*
*	Breakpoint States
*
************************************************************************

****	Never used -bryce
**** setBrkCnt:
****		move.l	wb_LastNum(a6),d0
****		move.l	d0,-(sp)
*		jsr	_setBrkPt
****		addq.l	#4,sp
****		rts


************************************************************************
*
*	Frame Position Movement
*
************************************************************************

	XDEF	NextWord

NextWord:
		addq.l	#2,wb_CurrAddr(a6)
		REFRESH
		btst.b	#1,wb_modes(a6)
		beq.s	nw_skip
		bsr	newline
		bsr	alter_disp
		clr.b	wb_flags(a6)
nw_skip:
		rts


	XDEF	BackWord

BackWord:
		subq.l	#2,wb_CurrAddr(a6)
		REFRESH
		btst.b	#1,wb_modes(a6)
		beq.s	bw_skip
		bsr	newline
		bsr	alter_disp
		clr.b	wb_flags(a6)
bw_skip
		rts


	XDEF	NextFrame

NextFrame:
		move.l	wb_FrameSize(a6),d0
		add.l	d0,wb_CurrAddr(a6)
		REFRESH
		rts


	XDEF	BackFrame

BackFrame:
		move.l	wb_FrameSize(a6),d0
		sub.l	d0,wb_CurrAddr(a6)
		REFRESH
		rts


	XDEF	Indirect
		;buggy... will run off the end of the world
Indirect:
		move.l	wb_IndirPtr(a6),a1      ;bug
		move.l	wb_CurrAddr(a6),a0
		move.l	a0,(a1)+
		move.l	a1,wb_IndirPtr(a6)
		moveq.l #-2,d0
		and.l	(a0),d0
		move.l	d0,wb_CurrAddr(a6)
		REFRESH
		rts


	XDEF	Exdirect
		;partially kludged -Bryce
Exdirect:
		move.l	wb_IndirPtr(a6),a1      ;bug
		lea.l	wb_indirStack+4(a6),a0
		cmpa.l	a0,a1
		bhi.s	ed_no_underflow
		move.l	a0,a1
ed_no_underflow:
		move.l	-(a1),wb_CurrAddr(a6)
		REFRESH
		move.l	a1,wb_IndirPtr(a6)
		rts


;Add a value to the current address
	XDEF	NextCount

NextCount:
		moveq	#'+',d0
		bsr	RawPutChar
		bsr	GetNumber
		tst.l	d0
		beq	newline
		move.l	wb_LastNum(a6),d0
		add.l	d0,wb_CurrAddr(a6)
		REFRESH
		rts


;Subtract a value from the current address
	XDEF	BackCount

BackCount:
		moveq	#'-',d0
		bsr	RawPutChar
		bsr	GetNumber
		tst.l	d0
		beq	newline
		move.l	wb_LastNum(a6),d0
		sub.l	d0,wb_CurrAddr(a6)
		REFRESH
		rts

setCurr:
		move.l	wb_LastNum(a6),wb_CurrAddr(a6)
		REFRESH
		rts


************************************************************************
*
*	Frame Sizing
*
************************************************************************

	XDEF	SizeFrame
	XREF	GetNumber

SizeFrame:
		moveq	#':',d0
		bsr	RawPutChar
		bsr	GetNumber
		move.l	wb_LastNum(a6),wb_FrameSize(a6)
		REFRESH
		rts

************************************************************************

alter_disp:
		move.l	wb_CurrAddr(a6),d0
		bsr	hex24
		tst.l	wb_FrameSize(a6)
		beq.s	am_zero
		move.l	d0,a0
		move.w	(a0),d0
		bsr	hex16
		moveq	#'=',d0
		bra	RawPutChar	;JMP/JSR
am_zero:
		lea	am_xxxx(pc),a0
		bra	RawPutStr	;JMP/JSR



	XDEF	AssignMem
AssignMem:
		bsr.s	alter_disp
		bsr	GetNumber
		tst.l	d0
		beq.s	as_skip
		move.l	wb_CurrAddr(a6),a0
		move.l	wb_LastNum(a6),d0
		move.w	d0,(a0)
		moveq	#1,d0
as_skip:	btst.b	#1,wb_modes(a6)
		bne.s	am_noAlter
		REFRESH
am_noAlter:
		rts

am_xxxx 	dc.b	'xxxx =',0
		ds.w	0



	XDEF	AlterMem
AlterMem:
		bset.b	#1,wb_modes(a6)
al_next:
		bsr	newline
		bsr.s	AssignMem
		tst.l	d0
		beq.s	al_exit
		addq.l	#2,wb_CurrAddr(a6)
		bra.s	al_next
al_exit:
		bclr.b	#1,wb_modes(a6)
		bra	newline

************************************************************************

************************************************************************

**** not used -bryce
****	XDEF	notimpl
****notimpl:
****		lea	ni_str(pc),a0
****		bra	RawPutStr
****ni_str		dc.b	10,'not yet implemented',10,0
****		ds.w	0

************************************************************************

*
* Show the contents of an Exec list
*
	XDEF	ShowList
ShowList:
		move.l	a2,-(sp)
		move.l	wb_CurrAddr(a6),a2
		tst.l	LN_PRED(a2)
		bne.s	sl_next
sl_more 	move.l	(a2),a2
sl_next 	move.l	(a2),d0
		beq.s	sl_exit 	;at tail node...
		btst.l	#0,d0		;test for odd
		bne.s	sl_exit 	;no good...
		move.l	d0,a0
		cmp.l	LN_PRED(a0),a2  ;consistency check -bryce
		bne.s	sl_exit 	;no good...

		move.l	LN_NAME(a2),d0
		bne.s	sl_name
		move.l	#sl_noName,d0
sl_name:	move.l	d0,-(sp)        ;1      string

		move.b	LN_PRI(a2),d0
		ext.w	d0
		move.w	d0,-(sp)        ;1.5    pri

		move.b	LN_TYPE(a2),d0
		ext.w	d0
		move.w	d0,-(sp)        ;2.0    type

		pea	(a2)            ;3      address

		move.l	sp,a1
		lea	sl_fmt(pc),a0
		bsr	RawPutFmt
		lea	3*4(sp),sp  ;fixed-bryce was 5*4. caused crash in V33
		bra.s	sl_more


sl_exit:	bsr	newline
		move.l	(sp)+,a2
		rts

sl_fmt		dc.b	10,'%06lx type %-2d pri %-4d "%s"'
sl_noName	dc.b	0
		ds.w	0


************************************************************************
*
*	Show Memory
*
************************************************************************
*
*	showMem (from, cnt)
*		 d0    d1
*
************************************************************************

showMem:
		movem.l d0/d2/d3/a2/a3,-(sp)
		link	a5,#-40

		bsr	newline
		move.l	d0,a2
		move.l	d1,d2
		beq.s	shm_exit
sl0:
		move.l	a2,d0
		bsr.s	hex24
		moveq	#7,d3
		lea	-32(a5),a3
sl1:
		move.w	(a2)+,d0
		bsr.s	hex16
		move.l	d0,-(sp)
		lsr	#8,d0
		bsr	unctrl
		move.w	d0,(a3)+
		move.l	(sp)+,d0
		bsr	unctrl
		move.w	d0,(a3)+

		subq.l	#2,d2
		ble.s	shm
		dbf	d3,sl1
		clr.w	(a3)+
		lea	-32(a5),a0
		bsr	charline
		bra.s	sl0
shm:
		clr.w	(a3)+
		lea	-32(a5),a0
		bsr	charline

shm_exit:
		unlk	a5
		movem.l (sp)+,d0/d2/d3/a2/a3
		rts


hex24:		;Addresses are no longer 24 bits... fall into 32 bit function.
;;;;		movem.l d0/d1/a0/a1,-(sp)
;;;;		moveq	#6,d1
;;;;		bra.s	puthex
hex32:
		movem.l d0/d1/a0/a1,-(sp)
		moveq	#8,d1
		bra.s	puthex
hex16:
		movem.l d0/d1/a0/a1,-(sp)
		moveq	#4,d1
puthex:
		bsr	RawPutHex
		movem.l (sp)+,d0/d1/a0/a1
		rts


************************************************************************
*
*	ShowRegs (frame, USP, SSP)
*		  A0	 A1   A2
*
************************************************************************

	XDEF	ShowRegStk
	XDEF	ShowTrapRegs
	XDEF	ShowTaskRegs

*
* Register Frame:
*	D0-D7/A0-A6
*	Task
*	Exception
*	SSP
*	USP
*	SR
*	PC

ShowRegs:
		movem.l d2/a2,-(sp)
		move.l	a0,a2

		moveq	#7,d2
		lea	sc_dRegs(pc),a0
		bsr.s	regPut

		moveq	#6,d2
		lea	sc_aRegs(pc),a0
		bsr.s	regPut

		addq.l	#4,a2		; sf_origxcpt
		btst.b	#5,(a2)
		bne.s	sr_super
		sub.w	#(sf_retsr-sf_usp),a2
		move.l	(a2),a2
sr_super:

		lea	sc_backtr(pc),a0
		bsr	RawPutStr
		moveq	#14,d2
sr_sfLoop:	move.w	(a2)+,d0
		bsr.s	hex16
		dbf	d2,sr_sfLoop

		bsr	newline
		movem.l (sp)+,d2/a2
		rts

regPut:
		bsr	RawPutStr
reg_loop:
		move.l	(a2)+,d0
		bsr.s	hex32
		dbf	d2,reg_loop
		rts

ShowRegStk:
		move.l	wb_RegBase(a6),a1

				; A1 -> reg frame
ShowTrapRegs:
ShowTaskRegs:
		move.l	a1,-(sp)
		lea	sc_cpuRegs(pc),a0
		bsr	RawPutFmt
		move.l	(sp)+,a1
		lea	sf_regs(a1),a0
		bra.s	ShowRegs

;note: 32 bit addresses will cause the cpuRegs line to wrap past 80 columns
sc_cpuRegs	dc.b	10,'PC: %06lx  SR: %04x  USP: %06lx  SSP: %06lx  '
		dc.b	'XCPT: %04lx  TASK: %06lx',0
sc_taskRegs	dc.b	10,'PC: %06lx  SR: %04x  USP: %06lx',0
sc_dRegs	dc.b	10,'DR: ',0
sc_aRegs	dc.b	10,'AR: ',0
sc_backtr	dc.b	10,'SF: ',0
		ds.w	0

	IFEQ	1	;never used -bryce
************************************************************************
*
*	Set Memory
*
************************************************************************
*
*	setMem ( first, count, value )
*		 d0	d1     d2
*
************************************************************************

setMem:
		move.l	a2,-(sp)
		move.l	d0,a2
		bra.s	sm1
sm0:
	IFEQ	REMOTE
		move.w	d2,(a2)+
	ENDC
	IFNE	REMOTE
		move.l	d1,-(sp)
		move.l	d2,-(sp)
		move.l	a2,-(sp)
		bsr	_PutMem
		addq.l	#8,sp
		move.l	(sp)+,d1
		addq.l	#2,a2
	ENDC
sm1:
		dbf	d1,sm0

		move.l	(sp)+,a2
		rts
	ENDC

************************************************************************
*
*	Simple Implementation of Wack Breakpoints
*
************************************************************************

FindBreak:
		bsr	newline
		lea	wb_BrkPts(a6),a0
		moveq	#BPTS-1,d1
fb_next:
		cmp.l	(a0),a1
		beq.s	fb_found
		addq.l	#bp_size,a0
		dbf	d1,fb_next
xx_errorExit:
		moveq	#0,d0
		rts		; condition code set
fb_found:
		move.l	a0,d0
		rts		; condition code set
				; a0 = d0

************************************************************************

	XDEF	ClearBreak
ClearBreak:
		move.l	wb_CurrAddr(a6),a1
		bsr.s	FindBreak	; does not effect a1
		beq.s	cb_exit
		clr.l	(a0)
		move.w	bp_content(a0),(a1)
cb_exit:
		rts

************************************************************************

	XDEF	ResetBreak
ResetBreak:
		lea	wb_BrkPts(a6),a1
		moveq	#BPTS-1,d1
rb_next:
		move.l	(a1),d0
		beq.s	rb_skip
		move.l	d0,a0
		clr.l	(a1)
		move.w	bp_content(a1),(a0)
rb_skip:
		addq.l	#bp_size,a1
		dbf	d1,rb_next
		bra	newline 	;(exit)


************************************************************************

	XDEF	SetBreak
SetBreak:
		move.l	wb_CurrAddr(a6),a1
		bsr.s	FindBreak	; does not effect a1
		bne.s	sb_exit 	; already setup

		lea	wb_BrkPts(a6),a0
		moveq	#BPTS-1,d1
sb_next:
		tst.l	(a0)
		beq.s	sb_gotit
		addq.l	#bp_size,a0
		dbf	d1,sb_next
		lea	sb_noMore(pc),a0
		bsr	RawPutStr
		bra.s	sb_exit
sb_gotit:
		move.w	(a1),bp_content(a0)
		move.w	wb_TrapInst(a6),(a1)
		move.l	a1,(a0)
sb_exit:
		rts			; d0 = bp

sb_noMore	dc.b	10,'too many',10,0
		ds.w	0


************************************************************************

	XDEF	ShowBreaks
ShowBreaks:
		lea	wb_BrkPts(a6),a0
		moveq	#BPTS-1,d1
sh_next:
		move.l	(a0),d0
		beq.s	sh_skip
		bsr	newline
		bsr	hex24
sh_skip:
		addq.l	#bp_size,a0
		dbf	d1,sh_next
		bra	newline


************************************************************************
*
*	Assign Register / Set Registers
*
************************************************************************

****	XDEF	SetRegs
****SetRegs:
****		rts

GetPutChar:
		bsr	RawGetChar
		move.l	d0,-(sp)
		bsr	RawPutChar
		move.l	(sp)+,d0
		rts

	XDEF	AssignReg
AssignReg:
		movem.l d2/a2,-(sp)
		moveq	#'!',d0
		bsr	RawPutChar
		bsr	GetPutChar
		bsr	UpperCase
		move.l	wb_RegBase(a6),a1
		lea	sf_regs(a1),a0
		moveq	#7,d2
		cmp.b	#'D',d0
		beq.s	ar_selectReg
		lea	8*4(a0),a0
		moveq	#6,d2
		cmp.b	#'A',d0
		beq.s	ar_selectReg
		lea	sf_usp(a1),a2
		cmp.b	#'U',d0
		beq.s	ar_set
		bra.s	ar_done

ar_selectReg:
		bsr	GetPutChar
		cmp.w	#8,d0
		beq.s	ar_done
		bsr	IsDigit
		bne.s	ar_done
		sub.w	#'0',d0
		cmp.b	d0,d2
		blt.s	ar_done
		lsl.w	#2,d0
		lea	0(a0,d0.w),a2
ar_set:
		move.l	(a2),d0
		bsr	space
		bsr	hex32
		moveq	#'=',d0
		bsr	RawPutChar
		bsr	GetNumber	(-> d0 = len)
		tst.b	d0
		beq.s	ar_done
		move.l	wb_LastNum(a6),(a2)

ar_done:
		bsr	newline
		movem.l (sp)+,d2/a2
		rts

************************************************************************
*
*	Mark Addr
*
************************************************************************

	XDEF	MarkAddr
MarkAddr:
		move.l	wb_CurrAddr(a6),wb_MarkAddr(a6)
		REFRESH
		rts


************************************************************************
*
*	FindPattern
*
************************************************************************

	XDEF	FindPattern
FindPattern:
		movem.l a2/a3,-(sp)
		bsr.s	setupPattern
		beq.s	fp_exit
		bsr.s	MatchBytes
		beq.s	fp_exit
		bclr	#0,d0
		move.l	d0,wb_CurrAddr(a6)
fp_exit:
		REFRESH
		movem.l (sp)+,a2/a3
		rts


MatchBytes:	; (start=a0, end=a2, ^pattern=a3, size=d0)
		move.l	a4,-(sp)
		lea	-2(a0),a4
mb_fresh:
		move.l	d0,d1
		move.l	a3,a1
		addq.l	#1,a4
		move.l	a4,a0
mb_next:
		cmp.l	a0,a2
		ble.s	mb_done
		cmp.b	(a1)+,(a0)+
		bne.s	mb_fresh
		subq	#1,d1
		bgt.s	mb_next
		move.l	a4,d0
		bra.s	mb_exit
mb_done:
		moveq.l #0,d0
mb_exit:
		move.l	(sp)+,a4
		rts	; cc returned


setupPattern:
		lea	msgPattern(pc),a0
		bsr	RawPutStr
		bsr	GetNumber	(-> d0 = len)
		tst.w	d0
		beq.s	sp_exit
		addq	#1,d0
		lsr.w	#1,d0
		moveq	#4,d1
		sub.w	d0,d1
		lea	wb_LastNum(a6,d1.w),a3
		move.l	wb_CurrAddr(a6),a0
		move.l	wb_MarkAddr(a6),a2
		moveq	#1,d1		; set cc to not equal
sp_exit:
		rts	; cc returned too!

msgPattern	dc.b	' pattern? ',0
		ds.w	0

************************************************************************
*
*	FillPattern
*
************************************************************************

	XDEF	FillPattern
FillPattern:
		movem.l a2/a3,-(sp)
		bsr.s	setupPattern
		beq.s	fi_exit
		bsr.s	FillBytes
fi_exit:
		REFRESH
		movem.l (sp)+,a2/a3
fl_exit:
		rts

FillBytes:	; (start=a0, end=a2, ^pattern=a3, size=d0)
		subq.l	#1,d0
fl_fresh:
		move.l	d0,d1
		move.l	a3,a1
fl_next:
		cmp.l	a0,a2
		ble.s	fl_exit
		move.b	(a1)+,(a0)+
		dbf	d1,fl_next
		bra.s	fl_fresh

************************************************************************

space:
		movem.l d0/d1/a0/a1,-(sp)
		moveq	#' ',d0
		bsr	RawPutChar
		movem.l (sp)+,d0/d1/a0/a1
		rts

	XDEF	newline
newline:
		movem.l d0/d1/a0/a1,-(sp)
		lea	nlStr(pc),a0
		bsr	RawPutStr
		movem.l (sp)+,d0/d1/a0/a1
		rts
nlStr		dc.b	10,0

charline:
		movem.l d0/d1/a0/a1,-(sp)
		bsr	RawPutStr
		bsr.s	newline
		movem.l (sp)+,d0/d1/a0/a1
		rts

sameline:
		moveq	#13,d0
		rts

ChkBrk: 	movem.l d0/d1/a0/a1,-(sp)
		bsr	RawMayGetChar
		cmp.w	#-1,d0
		movem.l (sp)+,d0/d1/a0/a1
		rts

IsDigit:
		cmp.b	#'0',d0
		blt.s	id_exit
		cmp.b	#'9',d0
		bgt.s	id_exit
		cmp.b	d0,d0
id_exit:
		rts

unctrl:
		move.l	d2,-(sp)
		move.w	#('.'<<8)!'.',d2
		tst.b	d0
		beq.s	uc_done
		btst	#7,d0
		bne.s	uc_done
		move.w	#$2000,d2
		move.b	d0,d1
		and.b	#$E0,d1
		bne.s	uc_norm
		move.w	#('^'<<8),d2
		or.b	#$40,d0
uc_norm:	move.b	d0,d2
uc_done:	move.l	d2,d0
		move.l	(sp)+,d2
		rts



*	Execute(subFunction)

_Execute:
		clr.b	wb_flags(a6)
		move.l	4(sp),a0
		jsr	(a0)
		tst.b	wb_flags(a6)
		beq.s	ex_exit

		;------ display current frame:
		move.l	wb_CurrAddr(a6),d0
		move.l	wb_FrameSize(a6),d1
		bsr	showMem

ex_exit:
****		bsr	_evalBrkPts
		rts

************************************************************************

	XREF	SymNames
	XDEF	Help
Help:
		move.l	a2,-(sp)
		lea.l	SymNames(pc),a2
hl_next:
		move.b	(a2)+,d0
		beq.s	hl_word
		bsr	RawPutChar
		bra.s	hl_next
hl_word:
		bsr	space
		tst.b	(a2)
		bne.s	hl_next
		bsr	newline

		move.l	(sp)+,a2
		rts

	ENDC	;INCLUDE_WACK
	END
@
