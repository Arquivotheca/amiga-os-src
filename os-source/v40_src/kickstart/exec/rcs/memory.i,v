head     39.3;
branch   ;
access   ;
symbols  V40_9:39.3 V40_8:39.3 V40_7:39.3 V40_6:39.3 V40_5:39.3 V40_4:39.3 V40_3:39.3 V40_2:39.3 V40_1:39.3 V40_0:39.3 V39_56:39.3 V39_55:39.3 V39_54:39.3 V39_53:39.3 V39_52:39.3 V39_50:39.3 V39_48:39.3 V39_47:39.3 V39_46:39.3 V39_45:39.3 V39_44:39.3 V39_43:39.3 V39_42:39.3 V39_41:39.3 V39_40:39.3 V39_39:39.3 V39_38:39.3 V39_37:39.3 V39_36:39.3 V39_35:39.3 V39_34:39.3 V39_33:39.3 V39_30:39.2 V39_29:39.2 V39_28:39.2 V39_27:39.2 V39_26:39.2 V39_25:39.2 V39_24:39.2 V39_23:39.2 V39_22:39.2 V39_20:39.2 V39_19:39.2 V39_18:39.1 V39_17:39.1 V39_16:39.1 V39_15:39.1 V39_14:39.1 V39_12:39.1 V39_11:39.1 V39_10:39.1 V39_9:39.1 V39_8:39.1 V39_7:39.1 V39_6:39.1 V39_5:39.1 V39_4:39.1 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.3; strict;
comment  @* @;


39.3
date     92.05.20.15.38.23;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.03.11.15.14.53;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.12.19.09.44.36;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.28.10;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.3
log
@Added a new memory type.
@
text
@	IFND	EXEC_MEMORY_I
EXEC_MEMORY_I	SET	1
**
**	$Id: memory.i,v 39.2 92/03/11 15:14:53 mks Exp Locker: mks $
**
**	Definitions and structures used by the memory allocation system
**
**	(C) Copyright 1985,1986,1987,1988,1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

    IFND EXEC_NODES_I
    INCLUDE "exec/nodes.i"
    ENDC	; EXEC_NODES_I


*---------------------------------------------------------------------
*
*   Memory List Structures
*
*---------------------------------------------------------------------
*
*   A memory list appears in two forms:  One is a requirements list
*   the other is a list of already allocated memory.  The format is
*   the same, with the reqirements/address field occupying the same
*   position.
*
*   The format is a linked list of ML structures each of which has
*   an array of ME entries.
*
*---------------------------------------------------------------------

 STRUCTURE ML,LN_SIZE
    UWORD   ML_NUMENTRIES	    ; The number of ME structures that follow
    LABEL   ML_ME		    ; where the ME structures begin
    LABEL   ML_SIZE	;Note: does NOT include any "ME" structures.


 STRUCTURE ME,0
    LABEL   ME_REQS		    ; the AllocMem requirements
    APTR    ME_ADDR		    ; the address of this block (an alias
				    ;	for the same location as ME_REQS)
    ULONG   ME_LENGTH		    ; the length of this region
    LABEL   ME_SIZE


*------ memory options:
*------ see the AllocMem() documentation for details------*

MEMF_ANY	EQU 0		;Any type of memory will do
    BITDEF  MEM,PUBLIC,0
    BITDEF  MEM,CHIP,1
    BITDEF  MEM,FAST,2
    BITDEF  MEM,LOCAL,8		;Memory that does not go away at RESET
    BITDEF  MEM,24BITDMA,9	;DMAable memory within 24 bits of address
    BITDEF  MEM,KICK,10		;Memory that can be used for KickTag stuff

    BITDEF  MEM,CLEAR,16	;AllocMem: NULL out area before return
    BITDEF  MEM,LARGEST,17	;AvailMem: return the largest chunk size
    BITDEF  MEM,REVERSE,18	;AllocMem: allocate from the top down
    BITDEF  MEM,TOTAL,19	;AvailMem: return total size of memory

    BITDEF  MEM,NO_EXPUNGE,31	;AllocMem: Do not cause expunge on failure

*----- Current alignment rules for memory blocks (may increase) -----
MEM_BLOCKSIZE	EQU 8
MEM_BLOCKMASK	EQU (MEM_BLOCKSIZE-1)


*---------------------------------------------------------------------
*
*   Low memory handler data structure
*
* Note:  This structure is *READ ONLY* and only EXEC can create it!
*---------------------------------------------------------------------
 STRUCTURE MemHandlerData,0
    ULONG   memh_RequestSize	; Requested allocation size
    ULONG   memh_RequestFlags	; Requested allocation flags
    ULONG   memh_Flags		; Flags (see blow)
    LABEL   memh_SIZEOF

* Flag definitions:
    BITDEF  MEMH,RECYCLE,0	; 0==First time, 1==recycle

*------ Low Memory handler return values
MEM_DID_NOTHING	EQU	0	; Nothing we could do...
MEM_ALL_DONE	EQU	-1	; We did all we could do
MEM_TRY_AGAIN	EQU	1	; We did some, try the allocation again

*---------------------------------------------------------------------
*
*   Memory Region Header
*
*---------------------------------------------------------------------

 STRUCTURE  MH,LN_SIZE		    ; (LN_TYPE will be set to NT_MEMORY)
    UWORD   MH_ATTRIBUTES	    ; characteristics of this region
    APTR    MH_FIRST		    ; first free region
    APTR    MH_LOWER		    ; lower memory bound
    APTR    MH_UPPER		    ; upper memory bound+1
    ULONG   MH_FREE		    ; number of free bytes
    LABEL   MH_SIZE


*---------------------------------------------------------------------
*
*   Memory Chunk
*
*---------------------------------------------------------------------

 STRUCTURE  MC,0
    APTR    MC_NEXT		    ; ptr to next chunk
    ULONG   MC_BYTES		    ; chunk byte size
    APTR    MC_SIZE

	ENDC	; EXEC_MEMORY_I
@


39.2
log
@Added the ReadOnly comment to the handler data structure
@
text
@d4 1
a4 1
**	$Id: memory.i,v 39.1 91/12/19 09:44:36 mks Exp Locker: mks $
d56 1
@


39.1
log
@Added defines and structures needed for the low memory handler
@
text
@d4 1
a4 1
**	$Id: memory.i,v 39.0 91/10/15 08:28:10 mks Exp Locker: mks $
d73 1
@


39.0
log
@V39 Exec initial checkin
@
text
@d4 1
a4 1
**	$Id: memory.i,v 36.11 91/03/15 07:10:44 bryce Exp $
d62 1
d68 19
@
