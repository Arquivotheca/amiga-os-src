head     39.0;
branch   ;
access   ;
symbols  V40_9:39.0 V40_8:39.0 V40_7:39.0 V40_6:39.0 V40_5:39.0 V40_4:39.0 V40_3:39.0 V40_2:39.0 V40_1:39.0 V40_0:39.0 V39_56:39.0 V39_55:39.0 V39_54:39.0 V39_53:39.0 V39_52:39.0 V39_50:39.0 V39_48:39.0 V39_47:39.0 V39_46:39.0 V39_45:39.0 V39_44:39.0 V39_43:39.0 V39_42:39.0 V39_41:39.0 V39_40:39.0 V39_39:39.0 V39_38:39.0 V39_37:39.0 V39_36:39.0 V39_35:39.0 V39_34:39.0 V39_33:39.0 V39_30:39.0 V39_29:39.0 V39_28:39.0 V39_27:39.0 V39_26:39.0 V39_25:39.0 V39_24:39.0 V39_23:39.0 V39_22:39.0 V39_20:39.0 V39_19:39.0 V39_18:39.0 V39_17:39.0 V39_16:39.0 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    ; strict;
comment  @* @;


39.0
date     91.10.15.08.28.34;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@



39.0
log
@V39 Exec initial checkin
@
text
@*	   ************************************************
*	   **						 **
*	   **	   --------------------------------	 **
*	   **	    ROM OPERATING SYSTEM EXECUTIVE	 **
*	   **	   --------------------------------	 **
*	   **						 **
*	   **		SERIAL PORT DEBUGGING IO	 **
*	   **						 **
*	   ************************************************

*************************************************************************
*									*
*   Copyright 1984,85,88,89 Commodore-Amiga, Inc.			*
*   All rights reserved.  No part of this program may be reproduced,	*
*   transmitted, transcribed, stored in retrieval system, or		*
*   translated into any language or computer language, in any form	*
*   or by any means, electronic, mechanical, magnetic, optical, 	*
*   chemical, manual or otherwise, without the prior written		*
*   permission of Commodore-Amiga, Incorporated.			*
*									*
*************************************************************************

**********************************************************************
*
*   Source Control:
*
*	$Id$
*
*	$Log$
*********************************************************************


;****** Included Files ***********************************************

    NOLIST
    INCLUDE	"assembly.i"
    INCLUDE	"types.i"
    INCLUDE	"hardware/intbits.i"
    LIST


;****** Imported Globals *********************************************

	XREF	_intreq
	XREF	_serper
	XREF	_serdat
	XREF	_serdatr


;****** Imported Functions *******************************************

	XREF	RawDoFmt
	XREF	Debug


;****** Exported Functions *******************************************

	IFNE	INCLUDE_WACK
	XDEF	RawPutFmt
	XDEF	RawGetChar
	XDEF	RawPutStr
	XDEF	RawPutHex
	ENDC

**************o* START EXTERNAL **************************************
	XDEF	RawIOInit	;In Execbase
	XDEF	RawPutChar	;In Execbase
	XDEF	RawMayGetChar	;In Execbase


PERIOD_BAUD EQU 372	* 9600 baud



*	RawIOInit
*

RawIOInit:
		move.w	#PERIOD_BAUD,_serper
		rts


*	char = RawMayGetChar()
*	d0

;_RawMayGetChar:
RawMayGetChar:
		moveq	#-1,d0
		move.w	_serdatr,d1
		btst	#14,d1
		beq.s	mg_exit
		move.w	#INTF_RBF,_intreq
		and.l	#$7f,d1
		move.l	d1,d0
mg_exit:
		rts


*	char = RawGetChar()
*	d0

;_RawGetChar:
RawGetChar:
gc_wait:
		bsr.s	RawMayGetChar
		tst.l	d0
		bmi.s	gc_wait
		rts


*	RawPutChar (char)
*		    d0

;_RawPutChar:
;		move.l	4(sp),d0
RawPutChar:
		tst.b	d0
		beq.s	pc_exit

		move.w	d0,-(sp)
		cmp.b	#10,d0
		bne.s	pc_norm
		moveq	#13,d0
		bsr.s	putc
pc_norm:	move.w	(sp)+,d0
		;fall-thru
putc:
pc_wait:	nop
		move.w	_serdatr,d1
		btst	#13,d1
		beq.s	pc_wait

		and.w	#$ff,d0
		or.w	#$100,d0
		move.w	d0,_serdat

		bsr.s	RawMayGetChar
pc_hold:
		cmp.b	#('S'-'A'+1),d0
		bne.s	pc_debug
		bsr.s	RawGetChar
		bra.s	pc_hold
pc_debug:
		cmp.b	#$7f,d0 	; del
		bne.s	pc_exit
		bsr	Debug
		bra.s	pc_hold
pc_exit:
		rts

**************o* END EXTERNAL **************************************


	IFNE	INCLUDE_WACK

*	RawPutStr(string)
*		  A0

;_RawPutStr:
;		move.l	4(sp),a0
RawPutStr:
ps_next:
		move.b	(a0)+,d0
		beq.s	ps_exit
		cmp.b	#10,d0
		bne.s	ps_normal
		moveq	#13,d0
		bsr.s	RawPutChar
		moveq	#10,d0
ps_normal:	bsr.s	RawPutChar
		bra.s	ps_next
ps_exit:
		rts


*	RawPutHex(number, digits)
*		  d0	  d1

;_RawPutHex:
;		movem.l 4(sp),d0/d1
RawPutHex:
		movem.l d2/d3,-(sp)
		move.l	d0,d2
		moveq	#8,d3
		sub.w	d1,d3
		bra.s	ph_dbf
ph_shift:
		rol.l	#4,d2
ph_dbf: 	dbf	d3,ph_shift

		move.w	d1,d3
		bra.s	ph_dbf2
ph_next:
		rol.l	#4,d2
		moveq	#$f,d0
		and.b	d2,d0
		cmp.b	#9,d0
		bls.s	ph_hex
		add.b	#'A'-'0'-10,d0
ph_hex:
		add.b	#'0',d0
		bsr	RawPutChar
ph_dbf2:	dbf	d3,ph_next

		moveq	#' ',d0
		bsr	RawPutChar
		movem.l (sp)+,d2/d3
		rts

RawPutFmt:
		move.l	a2,-(sp)
		lea	RawPutChar(pc),a2
		bsr	RawDoFmt
		move.l	(sp)+,a2
		rts

	ENDC	;INCLUDE_WACK

	END
@
