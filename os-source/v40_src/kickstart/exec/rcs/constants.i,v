head     39.10;
branch   ;
access   ;
symbols  V40_9:39.10 V40_8:39.10 V40_7:39.9 V40_6:39.9 V40_5:39.9 V40_4:39.9 V40_3:39.9 V40_2:39.9 V40_1:39.9 V40_0:39.9 V39_56:39.9 V39_55:39.9 V39_54:39.9 V39_53:39.9 V39_52:39.9 V39_50:39.9 V39_48:39.9 V39_47:39.9 V39_46:39.9 V39_45:39.9 V39_44:39.9 V39_43:39.9 V39_42:39.9 V39_41:39.9 V39_40:39.9 V39_39:39.9 V39_38:39.9 V39_37:39.9 V39_36:39.9 V39_35:39.9 V39_34:39.9 V39_33:39.8 V39_30:39.7 V39_29:39.7 V39_28:39.7 V39_27:39.7 V39_26:39.7 V39_25:39.7 V39_24:39.7 V39_23:39.4 V39_22:39.4 V39_20:39.4 V39_19:39.4 V39_18:39.4 V39_17:39.3 V39_16:39.2 V39_15:39.0 V39_14:39.0 V39_12:39.0 V39_11:39.0 V39_10:39.0 V39_9:39.0 V39_8:39.0 V39_7:39.0 V39_6:39.0 V39_5:39.0 V39_4:39.0 V39_3:39.0 V39_2:39.0 V39_1:39.0;
locks    jerryh:39.10; strict;
comment  @* @;


39.10
date     93.05.14.15.11.49;  author mks;  state Exp;
branches ;
next     39.9;

39.9
date     92.05.22.11.37.09;  author mks;  state Exp;
branches ;
next     39.8;

39.8
date     92.05.21.11.22.37;  author mks;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.10.18.38.12;  author mks;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.09.03.30.16;  author mks;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.07.14.09.11;  author mks;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.02.13.49.05;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.02.12.14.13;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.28.14.36.53;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.02.28.12.24.57;  author mks;  state Exp;
branches ;
next     39.0;

39.0
date     91.10.15.08.26.32;  author mks;  state Exp;
branches ;
next     ;


desc
@V39 Exec initial checkin
@


39.10
log
@Moved the timeout constant to romconstants.i
@
text
@**********************************************************************
*
*   Commodore Amiga -- ROM Operating System Executive Include File
*
**********************************************************************
*
* $Id: constants.i,v 39.9 92/05/22 11:37:09 mks Exp Locker: mks $
*
**********************************************************************

TEMP_SUP_STACK		EQU $000400 	; Used before memory allocator

*************** DEBUGGING COLORS AND INFORMAION ******************************
COLORON 	EQU $0200 ; colorburst on

OK_HARDWARE	EQU $0111 ; grey  -First software action
OK_DEBUG	EQU $000F ; blue  -debugging

CC_BADROMSUM	EQU $0F00 ; red   -Kickstart ROM is bad
CC_BADRAM	EQU $00F0 ; green -Chip memory is bad
CC_EXCEPTION	EQU $0FE5 ; yellow-Exception taken before software setup
CC_NOMODULES	EQU $0F0F ; purple-Return from InitResident(RTF_COLDSTART)
;CC_BADCHIPS	EQU $000F ; blue  -Regster test failed

BAUD_9600	EQU 372

******************************************************************************
ResetVector			EQU $00
INITOFFSET			EQU $02  ;Location of JMP instruction
SysBase 			EQU $04
BusErrorVector			EQU $08
AdddressErrorVector		EQU $0C
IllegalInstructionVector	EQU $10
ZeroDivideVector		EQU $14
CHKVector			EQU $18
TRAPccVector			EQU $1C
PrivTrapVector			EQU $20
TraceVector			EQU $24
Line1010Vector			EQU $28
Line1111Vector			EQU $2C
Trap15Vector			EQU $BC  ;Used by Wack
LastExceptVector		EQU $100 ;Last exception vector

LOCATION_ZERO			EQU 0
ALERT_STORE			EQU $100 ;Two longs (prior Alert number)

* The following should never be used in production code!
REG_STORE			EQU $180 ;All 16 registers on Alert()
USP_STORE			EQU $1c0 ;user stack pointer
FRAME_STORE			EQU $1c4 ;first 8 bytes of stack frame
WACKBASE			EQU $200 ;location of wack global data

;A non-cachable memory location that takes a long time to read.  Used for
;delays.
SLOW_READ			EQU $00dff01a	;_dskbytr
JMPINSTR			EQU $4EF9	;Warning: Self-modifying code!

*************** OPERATING CONSTANTS *******************************************

DEFAULT_QUANTUM EQU	4	;Default constant for round-robin scheduling.
				;expressed in VBLANK times (50 or 60/sec).

TASK_ID_WRAP	EQU	1024	;Constant that system ex_TaskID counter wraps
				;back to.  Some of the first 1024 task ID's will
				;typically be assigned to permanent tasks.

*************** CPU CONSTANTS *************************************************

;Private 68040 stuff
CACRF_040_DCache		EQU $80000000
CACRB_040_DCache		EQU 31
CACRF_040_ICache		EQU $00008000
CACRB_040_ICache		EQU 15

PAGESIZE_040			EQU 8*4096


STACK_COOKIE	EQU $BAD1BAD3	;Stack probe value
ZERO_COOKIE	EQU $C0EDBABE	;Value left at location zero
MEMMUNG_COOKIE	EQU $DEADBEEF	;Free memory is set to this value.
MEMMUNG_CRACKER	EQU $DEAD0051	;Non-clear allocated memory is set to this

*
* In LastAlert[3] will be stored a timeout value.  This value is in the
* number of frames the alert will be displayed for.  The frame rate
* depends on the system's display.  It is usually in the 50 to 60 fps range.
*
* This value will be inited by EXEC at boot time but exec will try its
* best to keep the user's value between warm boots.  (Much like the
* capture stuff)
*
;DEFAULT_TIMEOUT	equ	9*60	; 9 seconds (NTSC) 10.8 seconds (PAL)...
; Defined in romconstants.i as it is different from machine to machine
@


39.9
log
@Changed the timeout value to match new alert.c in intuition.
@
text
@d7 1
a7 1
* $Id: constants.i,v 39.8 92/05/21 11:22:37 mks Exp Locker: mks $
d92 2
a93 1
DEFAULT_TIMEOUT	equ	9*60	; 9 seconds (NTSC) 10.8 seconds (PAL)...
@


39.8
log
@Changed default to 10 seconds
@
text
@d7 1
a7 1
*   Source Control:
a8 2
*	$Id: constants.i,v 39.7 92/04/10 18:38:12 mks Exp Locker: mks $
*
d85 2
a86 2
* number of times the alert will loop looking for mouse buttons.  (CIA
* reads...)
d92 1
a92 3
* Current hardware timing is 8/1,000,000 second.  (<*grin, CPU loop*>)
*
DEFAULT_TIMEOUT	equ	10*1000000/8	; 10 seconds...
@


39.7
log
@Set new timeout constant
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.6 92/04/09 03:30:16 mks Exp Locker: mks $
d96 1
a96 1
DEFAULT_TIMEOUT	equ	15*1000000/8	; 15 seconds...
@


39.6
log
@Added simple comment
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.5 92/04/07 14:09:11 mks Exp Locker: mks $
d87 3
a89 1
* number of times a CIA register will be read before it "answers" itself.
d94 1
a94 5
* Current hardware CIA reading time is 1/1,000,000 second.  (Actually
* it comes out to be more like 1/769,200 second, but that is not
* "public" knowledge.  Also, due to other code interactions, such as
* reading the mouse buttons, this will be even slower.  Fastest
* it would ever be is 1/1,000,000 second
d96 1
a96 1
DEFAULT_TIMEOUT	equ	30*1000000	; 30 seconds...
@


39.5
log
@Defined a default timeout for alerts.
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.4 92/03/02 13:49:05 mks Exp Locker: mks $
d48 2
@


39.4
log
@Changed colour again
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.3 92/03/02 12:14:13 mks Exp Locker: mks $
d83 14
@


39.3
log
@Changed the default grey to be AAA.
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.2 92/02/28 14:36:53 mks Exp Locker: mks $
d18 1
a18 1
OK_HARDWARE	EQU $0AAA ; grey  -First software action
@


39.2
log
@Changed the initial hardware OK colour
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.1 92/02/28 12:24:57 mks Exp Locker: mks $
d18 1
a18 1
OK_HARDWARE	EQU $0333 ; grey  -First software action
@


39.1
log
@Removed the color flashing code for normal starts...
@
text
@d9 1
a9 1
*	$Id: constants.i,v 39.0 91/10/15 08:26:32 mks Exp Locker: mks $
d18 1
a18 1
OK_HARDWARE	EQU $0666 ; grey  -First software action
@


39.0
log
@V39 Exec initial checkin
@
text
@d9 1
a9 1
*	$Id: constants.i,v 36.22 91/04/22 05:26:19 bryce Exp $
d18 2
a19 5
OK_HARDWARE	EQU $0444 ; grey  -First software action
OK_SOFTWARE	EQU $0888 ; grey  -After CHIP RAM tests
OK_RESLIST	EQU $0AAA ; grey  -After all resident modules are found
OK_RESSTART	EQU $0CCC ; grey  -Just before resident chain is started
OK_DEBUG	EQU $000F ; blue  - debugging
@
