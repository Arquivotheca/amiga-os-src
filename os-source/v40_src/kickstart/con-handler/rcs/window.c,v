head     1.22;
branch   ;
access   ;
symbols  V39_3:1.17 V39_2:1.17 V39_1:1.16;
locks    ; strict;
comment  @ * @;


1.22
date     92.08.18.14.21.46;  author jesup;  state Exp;
branches ;
next     1.21;

1.21
date     92.07.31.19.26.54;  author jesup;  state Exp;
branches ;
next     1.20;

1.20
date     92.06.23.14.52.46;  author jesup;  state Exp;
branches ;
next     1.19;

1.19
date     92.06.19.13.38.00;  author jesup;  state Exp;
branches ;
next     1.18;

1.18
date     92.06.18.16.15.06;  author jesup;  state Exp;
branches ;
next     1.17;

1.17
date     92.04.15.15.45.14;  author mks;  state Exp;
branches ;
next     1.16;

1.16
date     91.05.07.20.24.21;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.04.16.10.49.41;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.03.19.18.28.38;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.03.19.18.26.15;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.03.15.11.59.38;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.03.13.10.37.51;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.25.23.16.44;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     91.01.22.16.13.26;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.20.18.11.08;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.14.22.34.17;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.11.13.45.19;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.04.21.28.48;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     91.01.03.22.17.40;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.12.30.21.54.42;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.12.26.20.17.06;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.26.11.35.18;  author andy;  state Exp;
branches ;
next     ;


desc
@window management routines for con-handler.
@


1.22
log
@Fixed the open small windows bug (now uses font size)
@
text
@#include <exec/types.h>
#include <internal/librarytags.h>
#include <graphics/gfxbase.h>

#include "con-handler.h"

/* Private ROM routine... */
struct Library *TaggedOpenLibrary(LONG);
#pragma syscall TaggedOpenLibrary 32a 001

static UBYTE * __regargs winParse(struct Global *, UBYTE *, WORD *, UBYTE);

struct Window * __regargs ParseParam(gv,dev,unit_no,flags)
struct Global *gv;
UBYTE *dev;
LONG unit_no;
LONG flags;
{

    struct IntuitionBase *IntuitionBase=(struct IntuitionBase *)gv->IntuitionBase;
    struct Rectangle rect = {10,10,80,40};
    struct Window *awindow=0;
    struct Screen *scr,*oscr,*fscr,*screen;
    struct GfxBase *GfxBase;
    LONG unit;
    LONG id;
    LONG alt=0;
    struct Process *process;
    int len,ac,flag=0;
    /* load pointers from gv */
    UBYTE *param=gv->titlemem;	/* use for copying title to buffer */
    UBYTE *ostring=gv->stringmem;
    UBYTE *nbuffer=gv->namemem;


    struct IOStdReq *iob=    (struct IOStdReq *)IOB;
    struct IOStdReq *iobo =  (struct IOStdReq *)IOBO;


    WORD win[4]={0};
    UBYTE *hard_parm[15]={"WAIT","AUTO","CLOSE","NOCLOSE","SMART","SIMPLE",
	"INACTIVE","BACKDROP","NOBORDER","NOSIZE","NODRAG","NODEPTH","WINDOW",
	"SCREEN","ALT"};

    // Don't move entries in this array.  Code modifies these by index #.
    LONG wflags = WINDOWDEPTH|WINDOWSIZING|WINDOWDRAG|ACTIVATE|SIMPLE_REFRESH;
    struct TagItem tags[] = {
	{WA_AutoAdjust,TRUE},				// 0
	{WA_Zoom, NULL},				// 1
	{WA_PubScreenFallBack,TRUE},			// 2
	{TAG_IGNORE,NULL},				// 3
	{WA_MinWidth,80},	// from anw in con.c	// 4
	{WA_MinHeight,50},	// ditto		// 5
	{WA_Left,0},					// 6
	{WA_Top,0},					// 7
	{WA_Width,640},					// 8
	{WA_Height,100},				// 9
	{WA_MaxWidth,-1},				// 10
	{WA_MaxHeight,-1},				// 11
	{WA_Flags,0},					// 12
	{WA_Title,(LONG) "AmigaDOS"},			// 13
	TAG_DONE,NULL};

if((LONG)window > 0)awindow=window; /* then we are opening in an existing window */
else if (dev) {
	unit=unit_no;
	awindow=(struct Window *)2;
}
else { /* we need a new window */
      /* ostring is initialized to point to source openstring buffer */
  while(*ostring)if(*ostring++ == ':')break; /* find : */

  if(*ostring) {	/* yes, there are window parameters */
        ostring=winParse(gv,ostring,(WORD *)&win,'/');

      	tags[6].ti_Data = win[0];	// left
      	tags[7].ti_Data = win[1];	// top
      	tags[8].ti_Data = win[2];	// width
      	tags[9].ti_Data = win[3];	// height

        /* copy title string */
	// make sure we don't copy too much!
	while(*ostring && (*ostring != '/') &&
	       (param - gv->titlemem) < sizeof(gv->titlemem)-1)
	{
		*param++ = *ostring++;
	}
	*param=0; /* make sure its null terminated */

      	param=ostring; /* now set param to source open string */

        while(*param) {
	    if(*param++ == '/') {

		// This is REALLY inefficient... REJ
		for(ac=0; ac<15; ac++) {
		  len=strlen(hard_parm[ac]);
		  if(!Strnicmp(hard_parm[ac],param,len)) {
		    param += len;
		    if(*param==' ')param++; /* skip a leading space */
		    break;
		  }
		}
		switch (ac) {
		    case 0: /* wait */
		    gv->waitflag = TRUE;
		    break;

		    case 1:	/* auto */
		    gv->AUTOflag = 1;
		    /* fall through to ... */

		    case 2: /* close */
		    gv->CLOSEflag=TRUE;
	 	    wflags |= WINDOWCLOSE;
		    break;

		    case 3: /* noclose */
	 	    wflags &= ~WINDOWCLOSE;
		    if(gv->AUTOflag)gv->AUTOflag++;
		    break;

		    case 4: /* smart */
		    wflags |= SMART_REFRESH|NOCAREREFRESH;
		    wflags &= ~SIMPLE_REFRESH;
		    break;

		    case 5: /* simple */
		    wflags |= SIMPLE_REFRESH;
		    wflags &= ~(SMART_REFRESH|NOCAREREFRESH);
		    break;

		    case 6: /* inactive */
		    wflags &= ~ACTIVATE;
		    break;

		    case 7: /* backdrop */
		    wflags |= BACKDROP;
		    break;

		    case 8: /* noborder */
		    wflags |= BORDERLESS;
		    gv->titlemem[0] = 0; /* no title */
		    break;

		    case 9: /* nosize */
		    wflags &= ~WINDOWSIZING;
		    (tags[1]).ti_Tag=TAG_IGNORE;
		    break;

		    case 10: /* nodrag */
		    wflags &= ~WINDOWDRAG;
		    break;

		    case 11: /* nodepth */
		    wflags &= ~WINDOWDEPTH;
		    break;

		    case 12: /* window */
		       if(*param=='0')param++;
		       if((*param&0x5f)=='X')param++;
		       stch_l(param,(long *)&awindow);
			/* cheesy test, but shorter than a scan through */
			/* window list, and bytes are short */
		       if(((ULONG)awindow&3) || (!awindow) ||
			 (!awindow->WScreen) || ((ULONG)(awindow->WScreen)&3))
		       		awindow=0;
		       break;

		    case 13: /* screen */
		        if(*param == '*') { /* use first screen */
			    /* attempt to find oscr by using NextScreen */
			    oscr=(struct Screen *)IntuitionBase->FirstScreen;
			    scr=LockPubScreen(NULL); /* start with WB */
			    fscr=scr; /* save initial value for end detect */
			    while(scr) {
				if(!NextPubScreen(scr,nbuffer))break;
				UnlockPubScreen(NULL,scr);
			        scr=LockPubScreen(nbuffer);
				if(scr == oscr) break; /* found front! */
				if(scr == fscr) break; /* no screens */
				}
			    if(scr) {
				UnlockPubScreen(NULL,scr);
				if(scr==oscr) {
			            (tags[3]).ti_Data=(ULONG)nbuffer;
		                    (tags[3]).ti_Tag=WA_PubScreenName;
				}
			    }
			}
			else {
			    (tags[3]).ti_Data=(ULONG)param;
		            (tags[3]).ti_Tag=WA_PubScreenName;
			}
		        break;

		    case 14: /* alt */
		        alt=TRUE;
		        param=winParse(gv,param,(WORD *)&win,',');
		        if(*param)param--;
		        break;

		default:;
		}
	    }
	}
      	tags[13].ti_Data = (LONG) gv->titlemem;
      }
   tags[12].ti_Data = wflags;

   /* check if this was just the parse to find the autoflag */
   if((LONG)window == (-1))return((struct Window *)0);

/* if WINDOW is set here, we got a window pointer in the title string */
    if(!awindow) {
	// Can't fail
	GfxBase=(struct GfxBase *)TaggedOpenLibrary(OLTAG_GRAPHICS);

	// This is slightly wierd.  It LPS's tags[3].ti_Data even if it
	// was never set.  Luckily, NULL is a valid input for LPS.
 	if(!(screen=LockPubScreen((char *)(tags[3]).ti_Data)))
	        screen=LockPubScreen(NULL); /* failed, so go to default */
					    /* this should be the same */
					    /* effect as the fallback */
					    /* tag for openwindow */
	if(screen) {
		LONG temp;

		id=GetVPModeID(&screen->ViewPort);
		if(id != INVALID_ID)QueryOverscan(id,&rect,OSCAN_TEXT);

		// set window minimum size relative to Titlebar height/etc
		// tags already set up with defaults that assume topaz 8
		tags[4].ti_Data += screen->WBorLeft + 
				   screen->WBorRight - (4+4);
	        temp = screen->WBorTop+1 + screen->Font->ta_YSize +
		       screen->WBorBottom;
		tags[5].ti_Data += temp - (2+2+8+1);

		// Make sure we have space for one line...
		if (tags[5].ti_Data < temp + screen->Font->ta_YSize)
			tags[5].ti_Data = temp + screen->Font->ta_YSize;

/*kprintf("minwidth = %ld, minheight = %ld\n",tags[4].ti_Data,tags[5].ti_Data);*/
	}

// FIX!!  The 10 width should be font sensitive!
        if(((LONG) tags[6].ti_Data) < 0)
			tags[6].ti_Data = rect.MinX;	// left
        if(((LONG) tags[7].ti_Data) < 0)
			tags[7].ti_Data = rect.MinY;	// top
        if(((LONG) tags[8].ti_Data) < 10)
			tags[8].ti_Data = rect.MaxX+1;	// width
	if(((LONG) tags[9].ti_Data) < 0)
			tags[9].ti_Data = rect.MaxY+1;	// height
        else if(((LONG)tags[9].ti_Data) < tags[5].ti_Data)
			tags[9].ti_Data = tags[5].ti_Data;  // height

        tags[1].ti_Data=(ULONG)win;
	if(!alt) { /* no ALT, so take full screen as default */
	    win[0]=rect.MinX;
	    win[1]=rect.MinY;
	    win[2]=rect.MaxX+1;
	    win[3]=rect.MaxY+1;
	}

	awindow=(struct Window *)OpenWindowTagList(NULL, tags);
	if (awindow)
	{
		// change to a fixed-width font if this is proportional
		// DefaultFont is guaranteed to be fixed-width.
		if (awindow->IFont->tf_Flags & FPF_PROPORTIONAL)
			SetFont(awindow->RPort,GfxBase->DefaultFont);
	}
	if(screen)UnlockPubScreen(NULL,screen);
	CloseLibrary(GfxBase);
    }
}

if (awindow) { /* we have a window, now for the console */
        memset((char *)iob,0,sizeof(struct IOStdReq));
	iob->io_Data = (APTR)awindow;
	process = THISPROC;
	iob->io_Message.mn_ReplyPort = &process->pr_MsgPort;

	if(!dev) {
	    if(wflags & SMART_REFRESH)unit=0;
	    else unit=3;
	    dev="console.device";
	    flag=TRUE;
	}
      	if (OpenDevice(dev,unit,(struct IORequest *)iob,flags)) {
		if(((LONG)awindow)>2)CloseWindow(awindow);
		awindow = 0;
	}
	else {
	    *iobo = *iob;
	    if(flag)gv->cu=(struct ConUnit *)iob->io_Unit;
	   /*  Fix color used, and NL fix unless raw */
	   /* and request close events */
   	    fixbuf (iobo, "\x9B" "31m" );
            if (!raw) {
		fixbuf (iobo, "\x9B" "20h");
		if(gv->CLOSEflag)fixbuf(iobo, "\x9B" "11{");
  	    }
	}
   }
   return(awindow);
}

static
UBYTE * __regargs winParse(gv,string,win,delimiter)
struct Global *gv;
UBYTE *string;
WORD *win;
UBYTE delimiter;
{
struct DosLibrary *DOSBase=(struct DosLibrary *)gv->DOSBase;
LONG i,len,sum;

    for (i = 0 ; i <= 3 ; i++) {
	if(!(*string))break;	/* no more */
	win[i] = 0;
	if ((len = StrToLong(string,&sum)) != -1)
	{
		// got good number
		string += len;
		if (!*string || *string == delimiter || *string == '/')
			win[i] = sum;
		// else win[i] = 0;
	}
	/* skip to delimiter or '/' */
	while (*string && *string != delimiter && *string != '/')
		string++;
	/* must point past delimiter or '/' */
	if (*string)
		string++;
    }
    return(string);
}

void __regargs CloseCon(gv,wind,iob)
struct Global *gv;
struct Window *wind;
struct IOStdReq *iob;
{

struct Library *IntuitionBase= gv->IntuitionBase;

   if(wind)CloseDevice ((struct IORequest *)iob);
   if(wind> (struct Window *)2)CloseWindow(wind);
}
@


1.21
log
@Fixed handling of negative values in open strings
fixed cast
@
text
@d227 1
a227 2
		    id=GetVPModeID(&screen->ViewPort);
		    if(id != INVALID_ID)QueryOverscan(id,&rect,OSCAN_TEXT);
d229 15
a243 7
		    // set window minimum size relative to Titlebar height/etc
		    // tags already set up with defaults that assume topaz 8
		    tags[4].ti_Data += screen->WBorLeft + 
				       screen->WBorRight - (4+4);
		    tags[5].ti_Data += screen->WBorTop+1 +
				       screen->Font->ta_YSize +
				       screen->WBorBottom - (2+2+8+1);
d247 1
a247 1
// FIX!!  The 10 and 100 width and height should be font sensitive!
d256 2
a257 2
        else if(((LONG)tags[9].ti_Data) < 100)
			tags[9].ti_Data = 100;		// height
@


1.20
log
@Don't use NewWindow structure, use all tags.
Fix winparse for numbers at end of string
@
text
@d11 2
d162 1
a162 1
		       stch_l(param,(int *)&awindow);
d240 11
a250 4
        if(tags[6].ti_Data < 0)   tags[6].ti_Data = rect.MinX;	// left
        if(tags[7].ti_Data < 0)   tags[7].ti_Data = rect.MinY;	// top
        if(tags[8].ti_Data < 10)  tags[8].ti_Data = rect.MaxX+1;// width
        if(tags[9].ti_Data < 100) tags[9].ti_Data = 100;	// height
@


1.19
log
@fixed windparse - skip to delims

@
text
@d11 1
a11 1
struct Window * __regargs ParseParam(gv,nw,dev,unit_no,flags)
a12 1
struct NewWindow *nw;
d21 1
a21 1
    struct Screen *scr,*oscr,*fscr,*screen=0;
d44 1
d46 14
a59 6
	{WA_AutoAdjust,TRUE},
	{WA_Zoom, NULL},
	{WA_PubScreenFallBack,TRUE},
	{TAG_IGNORE,NULL},
	{WA_MinWidth,80},	// from anw in con.c
	{WA_MinHeight,50},	// ditto
d74 4
a77 4
      	nw->LeftEdge = win[0];
      	nw->TopEdge =  win[1];
      	nw->Width =    win[2];
      	nw->Height =   win[3];
d113 1
a113 1
	 	    nw->Flags |= WINDOWCLOSE;
d117 1
a117 1
	 	    nw->Flags &= ~WINDOWCLOSE;
d122 2
a123 2
		    nw->Flags |= SMART_REFRESH|NOCAREREFRESH;
		    nw->Flags &= ~SIMPLE_REFRESH;
d127 2
a128 2
		    nw->Flags |= SIMPLE_REFRESH;
		    nw->Flags &= ~(SMART_REFRESH|NOCAREREFRESH);
d132 1
a132 1
		    nw->Flags &= ~ACTIVATE;
d136 1
a136 1
		    nw->Flags |= BACKDROP;
d140 1
a140 1
		    nw->Flags |= BORDERLESS;
d145 1
a145 1
		    nw->Flags &= ~WINDOWSIZING;
d150 1
a150 1
		    nw->Flags &= ~WINDOWDRAG;
d154 1
a154 1
		    nw->Flags &= ~WINDOWDEPTH;
d160 1
a160 1
		       stch_i(param,(int *)&awindow);
d205 1
a205 1
      	nw->Title = gv->titlemem;
d207 2
d238 4
a241 5
        if(nw->LeftEdge < 0) nw->LeftEdge= rect.MinX;
        if (nw->TopEdge < 0) nw->TopEdge =  rect.MinY;
	if(nw->Width < 10) nw->Width =  rect.MaxX+1;
	if(nw->Height < 10)nw->Height = 100;

d251 1
a251 1
	awindow=(struct Window *)OpenWindowTagList(nw, tags);
d271 1
a271 1
	    if(nw->Flags & SMART_REFRESH)unit=0;
d312 1
a312 1
		if (*string == delimiter || *string == '/')
@


1.18
log
@Don't let title bars overrun buffer
Don't use prop fonts
Make sure the window interior size is ok
Save space, use StrToLong in open parsing
@
text
@d299 1
a299 1
	if ((len = StrToLong(string,&sum)) == -1)
a300 3
		// no number found
		continue;
	} else {
d307 6
@


1.17
log
@Now uses the TaggedOpenLibrary() call for graphics.library
@
text
@d3 1
d23 1
a23 1
    struct Library *GfxBase;
d44 2
a45 1
    struct TagItem tags[5] = {
d50 2
d72 6
a77 1
	while(*ostring && (*ostring != '/'))*param++ = *ostring++;
d84 2
d204 6
a209 2
	if(GfxBase=TaggedOpenLibrary(OLTAG_GRAPHICS)) {
 	    if(!(screen=LockPubScreen((char *)(tags[3]).ti_Data)))
d214 1
a214 1
	    if(screen) {
d217 9
a225 2
		}
	    CloseLibrary(GfxBase);
d241 11
a251 2
    awindow=(struct Window *)OpenWindowTagList(nw, tags);
    if(screen)UnlockPubScreen(NULL,screen);
d286 1
d293 2
a294 2
int i,sum;
UBYTE ch;
a295 1
  if(*string) {	/* yes, there are window parameters */
d298 12
a309 14
	sum = 0;
	do {
	    ch = *string++;
    	    if (('0'<= ch) && (ch <= '9')) {
/*		sum = ((sum * 10) + ch) - '0'; */
		sum=SMult32(sum,10)+(ch-'0');
	    }
	    else {
		if ((ch != delimiter) && (ch != '/')) sum=0;
		break;
	    }
	} while (*string);

	win[i]=sum;
d311 1
a311 2
  }
  return(string);
a312 1

@


1.16
log
@mike found one more case to window
@
text
@d2 2
d5 5
d50 1
a50 1
if((LONG)window > 0)awindow=window; /* then we are opening in an existing window */  
d66 1
a66 1
 
d171 1
a171 1
			    (tags[3]).ti_Data=(ULONG)param; 
d193 1
a193 2
       GfxBase=OpenLibrary("graphics.library",36); /* get natural maximums */
	if(GfxBase) {
d210 1
a210 1
	
d212 1
a212 1
        tags[1].ti_Data=(ULONG)win;	
d219 1
a219 1
    awindow=(struct Window *)OpenWindowTagList(nw, tags); 
d234 1
a234 1
	    flag=TRUE;		
@


1.15
log
@uses if statement rather than the ?
removed unneeded test replacing a NULL with a NULL
in LockPubScreen call
@
text
@d231 1
a231 1
		if(awindow>(struct Window *)2)CloseWindow(awindow);
@


1.14
log
@added additional comment
@
text
@a20 1

d40 1
a40 1
	{TAG_IGNORE,TRUE},
d188 1
a188 2
	    if(!(screen=LockPubScreen ( ((tags[3]).ti_Tag==WA_PubScreenName) ? 
		( (char *)(tags[3]).ti_Data) : NULL)))
d199 6
a204 4
      	nw->LeftEdge = (nw->LeftEdge < 0) ? rect.MinX : nw->LeftEdge;
      	nw->TopEdge = (nw->TopEdge < 0) ? rect.MinY: nw->TopEdge;
      	nw->Width = (nw->Width < 10) ? rect.MaxX+1 : nw->Width;
      	nw->Height = (nw->Height < 10) ? 100 : nw->Height;
d225 2
a226 1
	    unit = (nw->Flags & SMART_REFRESH)? 0 : 3;
@


1.13
log
@put in an explicit LockPubscreen if the lock of
a screen name fails
@
text
@d192 3
@


1.12
log
@fixed find screen loop
@
text
@d189 4
a192 2
	    if(screen=LockPubScreen ( ((tags[3]).ti_Tag==WA_PubScreenName) ? 
		( (char *)(tags[3]).ti_Data) : NULL)) {
@


1.11
log
@cleaned comments a little (removed commented out library bases)
@
text
@a146 1

d148 3
a150 7
			    fscr=scr;
			    while(scr && ((ULONG)scr != (ULONG)oscr)) {
				if(!NextPubScreen(scr,nbuffer)) {
				    UnlockPubScreen(NULL,scr);
				    scr=NULL; /* no next screen */
				    break;
				}
d153 2
a154 3
				if(scr==fscr) { /* if its the original */
				    scr=NULL;	/* we've circled, so break */
				    break;
a155 1
			    }
d158 4
a161 1
			        (tags[3]).ti_Data=(ULONG)nbuffer;
d163 4
a166 1
			    else break; /* no front public screen */
a167 3
			else (tags[3]).ti_Data=(ULONG)param; 

		        (tags[3]).ti_Tag=WA_PubScreenName;
@


1.10
log
@switched to exec_old_pragmas
@
text
@a2 1

d10 1
a10 3
/*
    struct Library *SysBase = (*((struct Library **) 4));
*/
a11 1

d33 1
a33 1
    UBYTE *hard_parm[15]={"AUTO","WAIT","CLOSE","NOCLOSE","SMART","SIMPLE",
d66 1
d78 5
a82 1
		    case 0:
a90 4
		    case 1: /* wait */
		    gv->waitflag = TRUE;
		    break;

a255 4
/*
struct Library *UtilityBase=gv->UtilityBase;
*/

d284 1
a284 3
/*
struct Library *SysBase = (*((struct Library **) 4));
*/
@


1.9
log
@utilitybase used directly
@
text
@d11 1
d13 2
a15 4
    struct IntuitionBase *IntuitionBase=(struct IntuitionBase *)gv->IntuitionBase;
/*
    struct Library *UtilityBase=gv->UtilityBase;
*/
d291 1
d293 1
a293 1

@


1.8
log
@*** empty log message ***
@
text
@d12 1
d14 1
d16 1
d259 2
d262 1
d293 1
d295 1
@


1.7
log
@switched to regargs
@
text
@d22 1
a22 1
    int len,ac;
d227 1
d235 1
d239 1
a239 1
            if (raw) {
a242 2

	   /*  Set up initial read. Send it out when opened. */
@


1.6
log
@moved some variables off stack to conbase
@
text
@d4 1
a4 1
struct Window *ParseParam(gv,nw,dev,unit_no,flags)
d56 1
a56 1
        ostring=winParse(gv,ostring,&win,'/');
d177 1
a177 1
		        param=winParse(gv,param,&win,',');
d248 1
a248 1
UBYTE *winParse(gv,string,win,delimiter)
d281 1
a281 1
void CloseCon(gv,wind,iob)
@


1.5
log
@fixed NOBORDER -> ZOOM interaction
@
text
@d4 1
a4 1
struct Window *ParseParam(gv,nw,wind,raw,dev,unit_no,flags)
a6 2
struct Window *wind;
LONG raw;
d15 1
a15 1
    struct Window *window=0;
d29 3
a31 2
    struct IOStdReq *IOB=    (struct IOStdReq *)&gv->IOB;
    struct IOStdReq *IOBO =  (struct IOStdReq *)&gv->IOBO;
d33 1
d46 1
a46 1
if((LONG)wind > 0)window=wind; /* then we are opening in an existing window */  
d49 1
a49 1
	window=(struct Window *)2;
d136 1
a136 1
		       stch_i(param,(int *)&window);
d139 3
a141 3
		       if(((ULONG)window&3) || (!window) ||
			 (!window->WScreen) || ((ULONG)(window->WScreen)&3))
		       		window=0;
d188 1
a188 1
   if((LONG)wind == (-1))return((struct Window *)0);
d191 1
a191 1
    if(!window) {
d213 1
a213 1
    window=(struct Window *)OpenWindowTagList(nw, tags); 
d218 3
a220 3
if (window) { /* we have a window, now for the console */
        memset((char *)IOB,0,sizeof(struct IOStdReq));
	IOB->io_Data = (APTR)window;
d222 1
a222 1
	IOB->io_Message.mn_ReplyPort = &process->pr_MsgPort;
d228 3
a230 3
      	if (OpenDevice(dev,unit,(struct IORequest *)IOB,flags)) {
		if(window>(struct Window *)2)CloseWindow(window);
		window = 0;
d233 1
a233 1
	    *IOBO = *IOB;
d236 4
a239 4
   	    fixbuf (IOBO, "\x9B" "31m" );
            if (!raw) {
		fixbuf (IOBO, "\x9B" "20h");
		if(gv->CLOSEflag)fixbuf(IOBO, "\x9B" "11{");
d245 1
a245 1
   return(window);
d281 1
a281 1
void CloseCon(gv,window,IOB)
d283 2
a284 2
struct Window *window;
struct IOStdReq *IOB;
d288 2
a289 2
   if(window)CloseDevice ((struct IORequest *)IOB);
   if(window> (struct Window *)2)CloseWindow(window);
@


1.4
log
@history functions turned off
@
text
@d63 1
d117 1
a117 1
		    *ostring = 0;	/* no title */
a186 1

@


1.3
log
@improved test on window keyword...now check a secondary
value
@
text
@d56 1
a56 1
        ostring=winParse(ostring,&win,'/');
d176 1
a176 1
		        param=winParse(param,&win,',');
d248 2
a249 1
UBYTE *winParse(string,win,delimiter)
d256 1
d264 4
a267 1
    	    if (('0'<= ch) && (ch <= '9'))sum = ((sum * 10) + ch) - '0';
d273 1
@


1.2
log
@fixed the SCREEN * case
@
text
@d15 1
d71 1
a71 1
		  if(!strnicmp(hard_parm[ac],param,len)) {
d136 5
a140 1
		       if((ULONG)window&1)window=0;
@


1.1
log
@Initial revision
@
text
@d140 1
d142 1
a142 1
kprintf("oscr is %lx\n",oscr);
d145 6
a150 2
kprintf("firstscr is %lx\n",scr);
			    while(scr && (scr != oscr) && (scr != fscr)) {
a151 2
				scr=NULL;
				if(!NextPubScreen(0,nbuffer))break;
d153 4
a156 1
kprintf("new scr [%ls] is %lx\n",nbuffer,scr);
@
