head     1.17;
branch   ;
access   ;
symbols  V39_3:1.16 V39_2:1.16 V39_1:1.16;
locks    ; strict;
comment  @ * @;


1.17
date     92.06.23.14.53.58;  author jesup;  state Exp;
branches ;
next     1.16;

1.16
date     91.05.07.23.52.58;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.04.16.10.54.06;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.04.12.19.07.53;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.04.05.21.58.02;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.28.21.07.45;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.22.16.47.22;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.15.22.50.15;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     91.01.14.22.35.43;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.11.21.06.04;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.11.13.46.08;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.06.16.23.16;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.03.22.18.22;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.12.30.21.57.37;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.12.28.22.09.38;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.12.26.20.16.57;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.26.11.55.01;  author andy;  state Exp;
branches ;
next     ;


desc
@include file for con-handler
@


1.17
log
@Remove newwindow struct
@
text
@#include "exec/memory.h"
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/libraries.h>
#include <exec/devices.h>
#include <exec/execbase.h>
#include <exec/io.h>

#include "dos/dos.h"
#include "dos/dosextens.h"
#include "dos/filehandler.h"
#include "intuition/intuition.h"
#include "intuition/intuitionbase.h"
#include "intuition/screens.h"

#include "graphics/displayinfo.h"

#include "devices/timer.h"
#include "devices/serial.h"
#include "devices/parallel.h"
#include "devices/conunit.h"

#include "utility/tagitem.h"
#include "string.h"

#include "clib/dos_protos.h"
#include "clib/exec_protos.h"
#include "clib/intuition_protos.h"
#include "clib/graphics_protos.h"
#include "clib/utility_protos.h"

#include "pragmas/exec_old_pragmas.h"
#include "pragmas/intuition_pragmas.h"
#include "pragmas/dos_pragmas.h"
#include "pragmas/graphics_pragmas.h"
#include "pragmas/utility_pragmas.h"

#define DEBUG_ON
#define ED_PASTE
#define ED_PASTE1
#define ASYNC_KLUDGE	1
#define SEARCH	1

#define ACTION_ID	1
#define ACTION_PASTE	500
#define ACTION_GET_HIST	501
#define ACTION_SET_HIST	502
#define ACTION_SIZE_HIST	503
#define ACTION_GET_VARS	504
#define ACTION_SET_VARS	505

#define ACTION_CHANGE_SIGNAL	995

#define ACTION_FORCE	2001
#define ACTION_STACK	2002
#define ACTION_QUEUE	2003
#define ACTION_DROP	2004
#define ACTION_PEEK	2005
#define ACTION_REPLACE	2006

#define  TYPE_ARGS	23		/* passing arguments     */
#define  TYPE_READ	25		/* read the clipboard	 */
#define  TYPE_REPLY	27		/* reply to a TYPE_READ  */
#undef  BADDR
#define BADDR( bptr )   (((long)bptr) << 2)
#define BTOCSTR(bstr)   ((TEXT *)(BADDR(bstr) + 1))

#define ACTION_FIND_INPUT       1005
#define ACTION_FIND_OUTPUT      1006

#define DOS_TRUE	-1

#define ID_RAWCON ((('R' << 24L) | ('A' << 16L)) | ('W' << 8L))
#define ID_CON ((('C' << 24L) | ('O' << 16L)) | ('N' << 8L))


#define ctrl_a 1
#define ctrl_b 2
#define ctrl_c 3
#define ctrl_d 4
#define ctrl_e 5
#define ctrl_f 6
#define ctrl_i 8
#define ctrl_k 11
#define ctrl_q 17
#define ctrl_r 18
#define ctrl_s 19
#define ctrl_u 21
#define ctrl_w 23
#define ctrl_x 24
#define ctrl_y 25
#define ctrl_z 26

#define eof 0x1C   /*  Actually ^\ */

#define EXECBASE (*(struct ExecBase **)4)
#define THISPROC ((struct Process *)(EXECBASE->ThisTask))


struct CHRSChunk {
    struct MinNode mn;
    char *text;			/* pointer to start of text */
    char *freeme;		/* if non-zero, call FreeVec() with this pointer */
    ULONG  size;		/* total # of characters in this block */
    ULONG  flags;		/* may end up needing this at some time */
    ULONG  UserLink;
    char  data[1];		/* really 'n' # of bytes		*/
};

struct cmdMsg {
    struct Message cm_Msg;
    long 		cm_type;	/* type of message, and return validation */
    long 		cm_error;	/* error code return */
    struct MinList	cm_Chunks;

};

#define MAXCHARS 512
/* #define bmask 0x1FF */
#define init_bmask 0x1FF
#define bmask gv->bsize

/*#define hmask 0x7FF */
#define history_size 8	/* default memory for history */
#define HISTORY_BYTES 2048
#define hmask gv->hsize

struct Global {
  /* public variables, more or less */
  LONG version;
  LONG revision;

  BOOL EOFpend;
  BOOL CLOSEpend;

  LONG AUTOflag;
  LONG waitflag;
  LONG hold;

  LONG CLOSEflag;
  LONG usecount;
  LONG raw;
  struct Window *window;

  struct MsgPort *clienttaskid;
  struct MsgPort *writetaskid;

  /* more private; the history variables */
  LONG hsize;
  LONG history;
  LONG hscan;
  LONG lasthist;
  LONG hflag;
  LONG lastarrow;
  LONG h_erase_extra;

  /* the paste variables */
  struct MinList paste; /* conclip paste storage */
  struct MinNode *node;
  LONG pcount;

  LONG kill;

  LONG readp;
  LONG tailp;
  LONG echop;
  LONG headp;
  LONG direct;
  LONG bs_direct;
  LONG BSpend;
  LONG bsize;
  LONG ecount;

  struct ConUnit *cu;
  struct DosPacket *output_pkt;
  struct DosPacket *current_input;
  struct DosPacket *current_output;
  struct DosPacket *timeoutpkt;

  LONG flag1;
  LONG search;
  LONG h_backup;
  LONG history_count;

  LONG e_flag1;
  LONG e_flag2;
  struct DosPacket *save_current_input;
  struct DosPacket *save_current_output;

  struct IntuitionBase *IntuitionBase;
  struct Library *DOSBase;
  struct Library *UtilityBase;

  UBYTE ebuf[MAXCHARS];
  UBYTE killbuffer[MAXCHARS];
  UBYTE printbuffer[MAXCHARS*4];
  UBYTE stringmem[256];
  UBYTE *hbuffer;
  UBYTE titlemem[128];
  UBYTE namemem[140];
  UBYTE buffer[MAXCHARS]; /* general purpose buffer */
  union {
      struct IOStdReq io1;
      struct IOExtPar io2;
      struct IOExtSer io3;
  } IOB;
  union {
      struct IOStdReq io1;
      struct IOExtPar io2;
      struct IOExtSer io3;
  } IOBO;
};

#define history gv->history
#define hscan gv->hscan

#define lasthist gv->lasthist
#define hflag gv->hflag
#define lastarrow gv->lastarrow
#define h_erase_extra gv->h_erase_extra

#define kill gv->kill

#define readp gv->readp
#define tailp gv->tailp
#define echop gv->echop
#define headp gv->headp
#define direct gv->direct
#define bs_direct gv->bs_direct
#define BSpend gv->BSpend

#define EOFpend gv->EOFpend
#define CLOSEpend gv->CLOSEpend
#define ecount gv->ecount
#define usecount gv->usecount
#define raw gv->raw

#define IOB ((struct IOStdReq *)&gv->IOB)
#define IOBO ((struct IOStdReq *)&gv->IOBO)

#define window gv->window

#define clienttaskid gv->clienttaskid
#define writetaskid gv->writetaskid
#define output_pkt gv->output_pkt
#define current_input gv->current_input
#define current_output gv->current_output
#define save_current_input gv->save_current_input
#define save_current_output gv->save_current_output

#define timeoutpkt gv->timeoutpkt

#define h_backup gv->h_backup
#define search gv->search

#define UtilityBase gv->UtilityBase

/* misc.c functions */
struct Process * __regargs GetProcess(struct MsgPort *taskid);
void __regargs append(struct DosPacket **plist,struct DosPacket *pkt);
struct DosPacket *  __regargs pop(struct DosPacket **plist);
void __regargs dSendIO(struct IOStdReq *iob,struct DosPacket *packet,
	LONG command, APTR buffer, LONG length);
void __regargs StartPaste(struct Global *gv);
void __regargs KillPaste(struct Global *gv);
UBYTE __regargs GetPaste(struct Global *gv,int flag);
int __regargs PutPaste(struct Global *gv,int action,UBYTE *string,LONG len);

/* window.c functions */
struct Window * __regargs ParseParam(struct Global *gv,
	UBYTE *dev, LONG unit_no, LONG flags);
UBYTE * __regargs winParse(struct Global *gv,UBYTE *string,WORD *win, 
	UBYTE delimiter);
void __regargs CloseCon(struct Global *gv,struct Window *wind,
	struct IOStdReq *iob);

/* ansi.c functions */
VOID __regargs numtostring(struct Global *gv, int n, int start);
int __regargs addcursor(UBYTE *v,int start);
void __regargs fixbuf(struct IOStdReq *iobo, UBYTE *str);
int __regargs ReverseChar(struct Global *gv,UBYTE ch,int count);

/* history.c functions */
void __regargs AddHistoryLine(struct Global *gv,UBYTE *string, int len);

/* con.c functions */
VOID __regargs start(void);

void __regargs XCEXIT(int);
int CXBRK(void);

/* missing Exec */
void __regargs NewList(struct List *);

#define abs(x) ((x)<0?-(x):(x))

void __stdargs kprintf(UBYTE *fmt, ... );

#define getreg __builtin_getreg
extern long __regargs getreg(int);

@


1.16
log
@needed the new globals for stashing the packet queues
@
text
@d271 1
a271 1
struct Window * __regargs ParseParam(struct Global *gv,struct NewWindow *nw,
@


1.15
log
@matched prototypes of numtostr and ReverseChar
@
text
@d188 2
a189 2
  LONG e_flag3;
  LONG e_flag4;
d249 3
d262 1
@


1.14
log
@new fields
@
text
@d43 1
d184 1
a184 1
  ULONG history_count;
d275 1
a275 1
VOID __regargs numtostring(struct Global *gv, UBYTE *v, int n, int start);
d278 1
a278 1
int __regargs ReverseChar(struct Global *gv,UBYTE ch,UBYTE *pbuf,int count);
@


1.13
log
@moved some constants into this file
@
text
@d181 3
a183 3
  LONG flag2;
  LONG flag3;
  ULONG history_count; /* LONG flag4; */
d185 5
a193 1

d249 3
@


1.12
log
@prototype for kprintf corrected.
@
text
@d42 1
d44 1
d183 1
a183 1
  LONG flag4;
d255 1
a255 1
UBYTE __regargs GetPaste(struct Global *gv);
@


1.11
log
@utilitybase define added for direct use
@
text
@d33 1
a34 1
#include "pragmas/exec_pragmas.h"
d284 1
a284 1
void __stdargs kprintf();
d288 1
@


1.10
log
@defined ED_PASTE0
@
text
@d22 1
d172 1
d183 1
a183 1
  struct Library *IntuitionBase;
d244 1
a244 10
/*
extern int addcursor();
extern struct Window *ParseParam();
extern void CloseCon();
extern VOID fixbuf();
extern UBYTE *winParse();
extern void StartPaste();
extern void numtostring();
extern void AddHistoryLine();
*/
d265 1
a265 1
VOID __regargs numtostring(UBYTE *v, int n, int start);
d285 3
@


1.9
log
@switched to regargs
@
text
@d40 1
d290 2
@


1.8
log
@variables added to global structure
@
text
@d30 1
d125 7
a131 3
  struct Library *IntuitionBase;
  struct Library *DOSBase;
  struct Library *UtilityBase;
a133 1
  LONG openflag;
d135 1
d137 8
a144 3
  struct MinList paste; /* conclip paste storage */
  struct MinNode *node;
  LONG pcount;
a147 1

d153 5
a158 2
  LONG version;
  LONG revision;
a166 1

a167 4

  BOOL EOFpend;
  BOOL CLOSEpend;

a168 3
  LONG usecount;
  LONG raw;
  struct Window *window;
a169 2
  struct MsgPort *clienttaskid;
  struct MsgPort *writetaskid;
d180 5
d241 1
a241 7
extern struct MsgPort  *CreatePort();
extern struct Process *GetProcessID();
extern struct Process  *GetProcess();
extern int returnpkt();
extern int qpkt();
extern struct DosPacket *taskwait();

d250 39
a288 1
extern VOID SetHistory();
@


1.7
log
@con-handler.h misc.c window.c ansi.c
moved some variables off stack to conbase
@
text
@d47 2
d166 12
d226 7
@


1.6
log
@stack variables went global
@
text
@d38 1
d155 9
d201 11
@


1.5
log
@history turned off
some local vars made global
@
text
@d145 7
a151 7
  LONG g_readp;
  LONG g_tailp;
  LONG g_echop;
  LONG g_headp;
  LONG g_direct;
  LONG g_bs_direct;
  LONG g_BSpend;
d183 8
@


1.4
log
@history buffer is in seperate allocation.
moved masks into gv, because the code shrank.
@
text
@d37 2
d43 3
d117 1
d133 20
d174 9
d197 3
@


1.3
log
@improved global structure
@
text
@d35 1
d40 1
a63 6
#define bmask 0x1FF
#define mask 0x200

#define MAXCHARS 512
#define hmask 0x7FF

d105 9
d117 1
d126 2
d132 1
a132 1
  UBYTE hbuffer[2048];
@


1.2
log
@added some new ACTION defines for pasting
changed global list pointer to list head
@
text
@d37 3
d42 3
d127 1
a127 1
  UBYTE ibuff[32];	/* buffer for console raw sequences */
@


1.1
log
@Initial revision
@
text
@d37 2
d111 1
a111 1
  struct MinList *paste; /* conclip paste storage */
d147 1
@
