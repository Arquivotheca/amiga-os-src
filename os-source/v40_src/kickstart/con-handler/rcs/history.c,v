head     1.10;
branch   ;
access   ;
symbols  V39_3:1.9 V39_2:1.9 V39_1:1.9;
locks    ; strict;
comment  @ * @;


1.10
date     92.06.18.16.13.33;  author jesup;  state Exp;
branches ;
next     1.9;

1.9
date     91.04.16.10.47.48;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.03.05.12.13.18;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.25.23.16.38;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.14.22.35.21;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.05.00.12.11;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     91.01.03.22.17.00;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.12.31.03.33.52;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.12.30.21.55.06;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.28.22.00.49;  author andy;  state Exp;
branches ;
next     ;


desc
@history functions for con-handler
@


1.10
log
@tsize can't be less than 255 there
Need to remove the forbids/etc later, and fix GetHistory
@
text
@/* history functions for the con-handler */

#include "con-handler.h"

#ifdef HISTORY_ON

int __regargs InitHistory(gv,size)
struct Global *gv;
int size;
{
   UBYTE *point;
   int rc = 0;
   int tsize = size << 8; /* * 256 */

     if(size == 0)rc = ((gv->hsize+1) >> 8); /* / 256 */
     else {
	point=(UBYTE *)AllocMem(tsize,MEMF_PUBLIC);
	if(point) {
	    memset(point,'\n',tsize); /* clear the history buffer */
	    Forbid();	// Not needed!
	    rc=size;
	    if(gv->hbuffer) { /* free the old buffer */
		FreeMem(gv->hbuffer,gv->hsize+1);
	    }
	    gv->hbuffer=point;
	    gv->hsize= tsize-1;
  	    Permit();   // Not needed!
    	}
    }
    history=0;
    hscan=0;
    return(rc);
}


VOID __regargs SetHistory(gv,buffer,size,flag)
struct Global *gv;
UBYTE *buffer;
LONG size;
LONG flag;
{

    int i,last=0;
    UBYTE ch=1;
    if(flag) {
	history=0;
	memset(gv->hbuffer,'\n',gv->hsize+1); /* clear the history buffer */
    }
    for(i=0; (i<size && ch); i++) {
	ch=buffer[i];
	if((ch == '\n')||(!ch)) {
	    AddHistoryLine(gv,&buffer[last],i-last);
	    last=i+1;
	}
    }
    if(!history)hscan=0;
    else hscan=(history-1)&hmask;
}

int __regargs GetHistory(gv,buffer,len)
struct Global *gv;
UBYTE *buffer;
LONG len;
{
    LONG i;
    int scan=history;
    BOOL flag=0;

    /* find the earliest history */
    for(i=0; i<=hmask; i++) {
	if(gv->hbuffer[scan] != '\n') {
	    flag=TRUE;
	    break;
	}        
	scan  = (++scan)&hmask;
    }
    if(!flag)return(0);	/* history buffer is empty */
    
    for(i=0; ((i < len) && (scan != history)); i++) {
	if(buffer)buffer[i]=gv->hbuffer[scan];
	scan  = (++scan)&hmask;
    }
    return(i);    
}
#endif

VOID __regargs AddHistoryLine(gv,string,len)
struct Global *gv;
UBYTE *string;
int len;
{
    int pos = history;
    UBYTE c;
    int i;

    for(i=0; i<len; i++) {
	if((c=string[i]) == 10)break;
	if((c > 127)&&(c < 160))c=32;
	gv->hbuffer[pos]=c;
        pos = (++pos) & hmask;
    }

    if(i) {
        gv->hbuffer[pos] = 10;	/* this better be a linefeed */
        history = (pos+1) & hmask;
	gv->history_count++;
    	/* make sure its a clean line */
    	i=history;
    	while(i != pos) {
	    if(gv->hbuffer[i] == '\n')break;
	    gv->hbuffer[i]='\n';
	    i= (++i)&hmask;
	}
    }
}
@


1.9
log
@slightly more efficient test
@
text
@d16 1
a16 1
    else if(tsize > 255) {
d20 1
a20 1
	    Forbid();
d27 1
a27 1
  	    Permit();
@


1.8
log
@change to putpaste to fix push and queue
@
text
@a10 3
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
d97 3
a99 3
	c=string[i];
	if(c==10)break;
        gv->hbuffer[pos]=((c > 127)&&(c < 160)) ? 32 : c;
@


1.7
log
@switched to exec_old_pragmas
@
text
@d109 1
a109 1

@


1.6
log
@switched to regargs
@
text
@d11 1
d13 1
@


1.5
log
@*** empty log message ***
@
text
@d7 1
a7 1
int InitHistory(gv,size)
d37 1
a37 1
VOID SetHistory(gv,buffer,size,flag)
d61 1
a61 1
int GetHistory(gv,buffer,len)
d88 1
a88 1
VOID AddHistoryLine(gv,string,len)
@


1.4
log
@history functions turned off
@
text
@d31 2
d57 2
@


1.3
log
@added blank check
@
text
@d5 1
d12 1
a12 1
   UBYTE *point=NULL;
d14 1
a14 1
   int tsize = 256*size;
d16 1
a16 1
    if(size == 0)rc=(gv->hsize+1)/256;
d34 2
a35 1
int SetHistory(gv,buffer,size,flag,history)
a39 1
int history;
d51 1
a51 1
	    history=AddHistoryLine(gv,&buffer[last],i-last,history);
a54 1
return(history);
d57 1
a57 1
int GetHistory(gv,buffer,len,history)
a60 1
int history;
d82 1
d84 1
a84 1
int AddHistoryLine(gv,string,len,history)
a87 1
int history;
d99 4
a102 3
    if(!i)return(history);
    gv->hbuffer[pos] = 10;	/* this better be a linefeed */
    history = (pos+1) & hmask;
d104 7
a110 6
    /* make sure its a clean line */
    i=history;
    while(i != pos) {
	if(gv->hbuffer[i] == '\n')break;
	gv->hbuffer[i]='\n';
	i= (++i)&hmask;
a111 1
return(history);
@


1.2
log
@clear history on reset, moved history initialization into this file
put history buffer into seperate allocation
so it can be resized
(small history may be important on the A500)
@
text
@d100 1
@


1.1
log
@Initial revision
@
text
@d5 28
d43 4
a46 2

    if(flag)history=0;
d75 1
a75 1
    if(!flag)return(-1);	/* history buffer is empty */
@
