head     1.18;
branch   ;
access   ;
symbols  V39_3:1.17 V39_2:1.17 V39_1:1.17;
locks    ; strict;
comment  @ * @;


1.18
date     92.06.23.14.51.06;  author jesup;  state Exp;
branches ;
next     1.17;

1.17
date     91.04.16.10.48.23;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     91.04.12.19.02.06;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.25.23.15.54;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.22.16.16.07;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.22.16.14.20;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.21.20.51.38;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.21.18.59.22;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.20.18.07.24;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     91.01.15.00.30.34;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.14.22.34.32;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.11.13.45.27;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.04.21.28.34;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.03.22.17.52;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.12.30.21.57.18;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.12.26.20.18.00;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.12.26.20.15.43;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.26.11.34.05;  author andy;  state Exp;
branches ;
next     ;


desc
@routines to run the ansi console.device
@


1.18
log
@Only use one call to SDivMod, use table for divisors
don't bother doing strlen, use -1 for len (null-terminated) (fixbuf)
@
text
@/* misc routines for cursor moves, reverse chars, etc */

#include "exec/types.h"
#include "con-handler.h"

BYTE div[] = { 100,10,1 };

/*  Convert number n to string in v, length 3 */
VOID __regargs numtostring (gv, n, start)
struct Global *gv;
int n,start;
{
   int i,j;
   UBYTE *v = &(gv->printbuffer[start]);

   if(n<0)n = -n;

   for (i = 0; i < 3; i++) {
      j=SDivMod32(n,div[i]);
      n=getreg(1);		// remainder in D1
      v[i] = j + '0';
   }
}

/*  Add Cursor OFF/ON codes to string in v, at 0 and at start */
int __regargs addcursor (v, start)
UBYTE *v;
int start;
{
   v[0] = 0x9b;   /*  cursor off */
   v[1] = '0';
   v[2] = ' ';
   v[3] = 'p';
   v[start++] = 0x9b;   /*  cursor on */
   v[start++] = ' ';
   v[start++] = 'p';
   return(start);
}

VOID __regargs fixbuf (iobo, str)
struct IOStdReq *iobo;
UBYTE *str;
{
      iobo->io_Data = (APTR)str;
      iobo->io_Offset = 0;
      iobo->io_Command = CMD_WRITE;
      iobo->io_Length = -1;		// save the strlen
      DoIO((struct IORequest *)iobo);
}

int __regargs ReverseChar(gv,ch,count)
struct Global *gv;
UBYTE ch;
int count;
{
    /* if its a normal char, put it into the print array */
    UBYTE *pbuf= gv->printbuffer;

    if ((ch > 31) || (ch == 10))pbuf[count++] = ch;
    else { /* we have to reverse the character */
	/* check if we are we already in reverse mode */	
	if((count>3) && (!Strnicmp(&pbuf[count-4], "\x9B" "27m", 4))) {
	    pbuf[count-4] = ch+64; /* so keep us in reverse mode */
	    strcpy(&pbuf[count-3],"\x9B" "27m");
	    count++;
	}
	else {
	    strcpy(&pbuf[count],"\x9B" "7mX" "\x9B" "27m");
	    count += 8;
            pbuf[count - 5] = ch + 64;
	}
    }
return(count);
}
@


1.17
log
@ReverseChar and nomtostring now assume printbuffer
@
text
@d6 2
d14 1
a14 2
   int div = 100;
   UBYTE *v = gv->printbuffer;
d18 3
a20 3
   for (i = start ; i <= (start + 2) ; i++) {
      j=SDivMod32(n,div);
      n=getreg(1);
a21 1
      div=SDivMod32(div,10);
d47 1
a47 1
      iobo->io_Length = strlen(str);
@


1.16
log
@*** empty log message ***
@
text
@d7 1
a7 1
VOID __regargs numtostring (gv,v, n, start)
a8 1
UBYTE *v;
d11 1
a11 1
   int i;
d13 1
d18 1
a18 1
      v[i]=SDivMod32(n,div);
d20 1
a20 1
      v[i] += '0';
a43 3
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
d51 1
a51 1
int __regargs ReverseChar(gv,ch,pbuf,count)
a53 1
UBYTE *pbuf;
d57 1
@


1.15
log
@switched to exec_old_pragmas
@
text
@d34 4
a37 4
   v[start] = 0x9b;   /*  cursor on */
   v[start + 1] = ' ';
   v[start + 2] = 'p';
   return(start+3);
@


1.14
log
@cleaned up the file (removed old div)
@
text
@d44 1
d46 1
@


1.13
log
@uses division from utility library
uses utilitybase directly
@
text
@a11 1
/*    struct Library *UtilityBase=gv->UtilityBase; */
a17 1
/*      v[i] = (n / div) + '0'; */
a19 1
/*      n = n % div; */
a20 1
/*      div = div / 10; */
a57 2
/*    struct Library *UtilityBase=gv->UtilityBase;
*/
@


1.12
log
@*** empty log message ***
@
text
@d7 2
a8 1
VOID __regargs numtostring (v, n, start)
d12 1
d19 7
a25 3
      v[i] = (n / div) + '0';
      n = n % div;
      div = div / 10;
a26 2


d62 2
a63 2
    struct Library *UtilityBase=gv->UtilityBase;

@


1.11
log
@removed extraneous memcpy
@
text
@d21 1
@


1.10
log
@abs test added to numtostr
@
text
@a70 1
	    memcpy(&pbuf[count],"\x9B" "7mX" "\x9B" "27m",8);
@


1.9
log
@registerized function calls
@
text
@d13 2
a14 1
/*   if(n<0)n = -n; */
@


1.8
log
@switched to regargs
@
text
@d13 1
@


1.7
log
@moved some variables off stack to conbase
@
text
@d7 1
a7 1
VOID numtostring (v, n, start)
d23 1
a23 1
int addcursor (v, start)
d37 1
a37 1
VOID fixbuf (iobo, str)
d49 1
a49 1
int ReverseChar(gv,ch,pbuf,count)
@


1.6
log
@*** empty log message ***
@
text
@d37 2
a38 2
VOID fixbuf (IOBO, str)
struct IOStdReq *IOBO;
d42 5
a46 5
      IOBO->io_Data = (APTR)str;
      IOBO->io_Offset = 0;
      IOBO->io_Command = CMD_WRITE;
      IOBO->io_Length = strlen(str);
      DoIO((struct IORequest *)IOBO);
@


1.5
log
@history functions turned off
@
text
@a75 1

@


1.4
log
@
@
text
@d7 1
a7 1
numtostring (v, n, start)
d19 1
a19 1
return(0);
@


1.3
log
@put back the strcpy calls
@
text
@d49 2
a50 1
int ReverseChar(ch,pbuf,count)
d55 2
d62 1
a62 1
	if((count>3) && (!strnicmp(&pbuf[count-4], "\x9B" "27m", 4))) {
@


1.2
log
@
@
text
@d61 1
a61 2
/*	    strcpy(&pbuf[count-3],"\x9B" "27m"); */
	    memcpy(&pbuf[count-3],"\x9B" "27m",4);
d65 1
a65 1
/*	    strcpy(&pbuf[count],"\x9B" "7mX" "\x9B" "27m"); */
@


1.1
log
@Initial revision
@
text
@d61 2
a62 1
	    strcpy(&pbuf[count-3],"\x9B" "27m");
d66 2
a67 1
	    strcpy(&pbuf[count],"\x9B" "7mX" "\x9B" "27m");
@
