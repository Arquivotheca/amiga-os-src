head     37.3;
branch   ;
access   ;
symbols  V39_1:37.3 V_:37.2 LOCKDOWN_2_04:37.2 BETA_2_04_C:37.2 V37_2:37.2 V37_3:37.2 V37_1:37.1 V36_25:36.10 V36_24:36.10 V36_20:36.8 V36_19:36.8 V36_17:36.7 V36_16:36.6 V36_15:36.5 V36_14:36.4 V36_13:36.3 V36_6:36.2 V36_3:36.1;
locks    ; strict;
comment  @*   @;


37.3
date     92.04.20.10.14.20;  author mks;  state Exp;
branches ;
next     37.2;

37.2
date     91.01.16.10.41.41;  author mks;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.13.21.12.02;  author mks;  state Exp;
branches ;
next     36.10;

36.10
date     90.12.08.16.04.01;  author mks;  state Exp;
branches ;
next     36.9;

36.9
date     90.05.31.20.38.15;  author daveb;  state Exp;
branches ;
next     36.8;

36.8
date     89.10.25.11.12.02;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     89.09.07.15.09.59;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     89.09.07.13.56.11;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     89.04.05.10.54.05;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     89.02.19.13.25.53;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     89.02.19.13.11.24;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.02.17.13.32.14;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.02.13.11.45.19;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     89.02.13.11.41.27;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


37.3
log
@Cleaned up and now uses TaggedOpenLibrary()
@
text
@**
** $Id: wbtag.asm,v 37.2 91/01/16 10:41:41 mks Exp Locker: mks $
**
** $Log:	wbtag.asm,v $
*   Revision 37.2  91/01/16  10:41:41  mks
*   Cleaned up and shortened WBTag since icon.library is now in ROM
*
*   Revision 37.1  91/01/13  21:12:02  mks
*   Updated for V37
*
*   Revision 36.10  90/12/08  16:04:01  mks
*   Fixed spelling of the tag string
*

	SECTION	wbtag,code

**	Included Files

	NOLIST
	INCLUDE "exec/types.i"
	INCLUDE "exec/nodes.i"
	INCLUDE	"exec/execbase.i"
	INCLUDE "exec/resident.i"
	INCLUDE	"libraries/dosextens.i"
	INCLUDE	"internal/librarytags.i"
	LIST

	INCLUDE	"wbtag_rev.i"

	INCLUDE	"wbtag.i"

ABSEXECBASE	EQU	4

XLVO	MACRO	(function)
	XREF	_LVO\1
	ENDM

CALLLVO	MACRO	(function)
	jsr	_LVO\1(a6)
	ENDM

	XLVO	CloseLibrary
	XLVO	FindName
	XLVO	GetMsg
	XLVO	TaggedOpenLibrary
	XLVO	ReplyMsg
	XLVO	WaitPort

	XLVO	StartWorkbench


		dc.w	0		; longword align pseudo segments below
ResidentTag:
					; STRUCTURE RT,0
		dc.w	RTC_MATCHWORD	;    UWORD RT_MATCHWORD
		dc.l	ResidentTag	;    APTR  RT_MATCHTAG
		dc.l	EndTag		;    APTR  RT_ENDSKIP
		dc.b	0		;    BYTE  RT_FLAGS
		dc.b	VERSION		;    UBYTE RT_VERSION
		dc.b	NT_TASK		;    UBYTE RT_TYPE
		dc.b	-120		;    BYTE  RT_PRI
		dc.l	WTName		;    APTR  RT_NAME
		dc.l	WTID		;    APTR  RT_IDSTRING
		dc.l	segment		;    APTR  RT_INIT
					;    LABEL RT_SIZE
segment:
		; segment structure for v1.1 'loadwb' entry point.
		dc.l	0
		moveq	#0,d2
		bra.s	jmpstart

		; segment structure for v1.1 'loadwb -debug' entry point.
		dc.l	0
		moveq	#1,d2
		bra.s	jmpstart

		; segment structure for >= v1.2 'loadwb' entry point.
		dc.l	0
		moveq	#2,d2
		; fall thru to jmpstart

;------ Workbench tag code -------------------------------------------
;
;   d2	which loadwb started us flag (0, 1, or 2)
;   a2	current Process
;   a3	LoadWB argument message
;   a6	current library base
;
jmpstart:
		movem.l	d2/a2-a3/a6,-(a7)
		move.l	ABSEXECBASE,a6

	    ;-- set this process/task name
		move.l	ThisTask(a6),a2
		lea	WTName(pc),a0
		move.l	a0,LN_NAME(a2)

		; this fixes the loadwbV1.1 does not work under V2.0 bug
		; note - we can branch directly to 'openWB' here since the
		; code after the 'WaitPort' and 'GetMsg' is special LoadWBV1.3
		; code which we can ignore since we know we were fired up via
		; LoadWBV1.1 or earlier.
		cmpi	#2,d2	; expecting a message?
		bne.s	openWB	; no, so do not wait for one.

	    ;-- get the argument message from LoadWB
		lea	pr_MsgPort(a2),a0
		CALLLVO	WaitPort
		lea	pr_MsgPort(a2),a0
		CALLLVO	GetMsg
		move.l	d0,a3


	    ;-- try to find a proper workbench library
openWB:
		moveq.l	#OLTAG_WORKBENCH,d0
		CALLLVO	TaggedOpenLibrary
		tst.l	d0
		beq.s	noWB

	    ;-- pass argument message to workbench startup function
		move.l	d0,a6

		;-- call StartWorkbench
		cmpi	#2,d2	; did we get a msg?
		beq.s	gotmsg	; yes, so send it to StartWorkbench
		move	d2,d0	; arg is either 0(loadwb) or 1(loadwb -debug)
		moveq	#0,d1	; null path specification
		bra.s	nomsg
gotmsg:
		move.l	lm_Arg(a3),d0
		move.l	lm_Path(a3),d1
nomsg:
		CALLLVO	StartWorkbench

		move.l	a6,a1
		move.l	ABSEXECBASE,a6
		CALLLVO	CloseLibrary

noWB:
		cmpi	#2,d2	; did we get a msg?
		bne.s	noreply	; no, so do not reply to it

	    ;-- reply the message to allow LoadWB to terminate
		move.l	a3,a1
		CALLLVO	ReplyMsg
noreply:
	    ;-- kill this process and terminate
		movem.l	(a7)+,d2/a2-a3/a6
		rts

WTName		dc.b	'workbench.task',0
WTID		VSTRING
EndTag:

	END
@


37.2
log
@Cleaned up and shortened WBTag since icon.library is now in ROM
@
text
@d2 1
a2 1
** $Id: wbtag.asm,v 37.1 91/01/13 21:12:02 mks Exp Locker: mks $
d5 3
a13 6
**
**      wbtag module
**
**      (C) Copyright 1985,1987,1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**
d25 1
d39 1
a39 1
		jsr	_LVO\1(a6)
a41 5
;
; This is the minimum workbench version that this tag works with
;
WBVERSION	EQU	37

d45 1
a45 1
	XLVO	OpenLibrary
a98 1
		; daveb - May/90
a112 46
*
* Not needed any more...
*
*	    ;-- 1.3 LoadWB opened the icon.library and kept it open before
*	    ;	firing up this process.  The following code looks to see if
*	    ;	it was invoked from 1.3 LoadWB, and closes the icon.library
*	    ;	if it was.
*
*		;-- find the LoadWB process
*		move.l	MN_REPLYPORT(a3),a0
*		tst.b	MP_FLAGS(a0)
*		bne.s	openWB
*		move.l	MP_SIGTASK(a0),a0
*		cmp.b	#NT_PROCESS,LN_TYPE(a0)
*		bne.s	openWB
*
*		;-- scan the segments for signs of the offending code
*		tst.l	pr_TaskNum(a0)	; check for valid pr_CLI
*		beq.s	openWB
*		move.l	pr_CLI(a0),d0
*		beq.s	openWB
*		lsl.l	#2,d0
*		move.l	d0,a0
*		moveq	#4-1,d1		; "icon.library" in 4th segment
*		move.l	cli_Module(a0),d0
*		beq.s	openWB
*
*nextSegment:
*		lsl.l	#2,d0
*		move.l	d0,a1
*		move.l	(a1)+,d0
*		dbeq	d1,nextSegment
*		beq.s	openWB
*
*		cmp.l	#'icon',(a1)
*		bne.s	openWB
*
*		;-- this is 1.3 LoadWB -- close the icon.library
*		lea	LibList(a6),a0
*		CALLLVO	FindName
*		tst.l	d0
*		beq.s	openWB
*
*		move.l	d0,a1
*		CALLLVO	CloseLibrary
*
d116 2
a117 3
		moveq	#WBVERSION,d0
		lea	WLName(pc),a1
		CALLLVO	OpenLibrary
d153 1
a153 4
WTID		dc.b	'Pre-2.0 LoadWB stub',10,0
WLName		dc.b	'workbench.library',0
		ds.w	0

@


37.1
log
@Updated for V37
@
text
@d2 1
a2 1
** $Id: wbtag.asm,v 36.10 90/12/08 16:04:01 mks Exp Locker: mks $
d5 3
d44 3
d121 46
a166 42
	    ;-- 1.3 LoadWB opened the icon.library and kept it open before
	    ;	firing up this process.  The following code looks to see if
	    ;	it was invoked from 1.3 LoadWB, and closes the icon.library
	    ;	if it was.

		;-- find the LoadWB process
		move.l	MN_REPLYPORT(a3),a0
		tst.b	MP_FLAGS(a0)
		bne.s	openWB
		move.l	MP_SIGTASK(a0),a0
		cmp.b	#NT_PROCESS,LN_TYPE(a0)
		bne.s	openWB

		;-- scan the segments for signs of the offending code
		tst.l	pr_TaskNum(a0)	; check for valid pr_CLI
		beq.s	openWB
		move.l	pr_CLI(a0),d0
		beq.s	openWB
		lsl.l	#2,d0
		move.l	d0,a0
		moveq	#4-1,d1		; "icon.library" in 4th segment
		move.l	cli_Module(a0),d0
		beq.s	openWB

nextSegment:
		lsl.l	#2,d0
		move.l	d0,a1
		move.l	(a1)+,d0
		dbeq	d1,nextSegment
		beq.s	openWB

		cmp.l	#'icon',(a1)
		bne.s	openWB

		;-- this is 1.3 LoadWB -- close the icon.library
		lea	LibList(a6),a0
		CALLLVO	FindName
		tst.l	d0
		beq.s	openWB

		move.l	d0,a1
		CALLLVO	CloseLibrary
@


36.10
log
@Fixed spelling of the tag string
@
text
@d2 1
a2 1
** $Id$
d4 4
a7 1
** $Log$
d41 1
a41 1
WBVERSION	EQU	36
@


36.9
log
@code assumed that it would always get a message from the caller.  This is
only true for LoadWBV1.2 and beyond.  This code now works for all known
versions of LoadWB.
@
text
@d2 1
a2 4
**      $Filename ramlib.asm $
**      $Release: 1.4 $
**      $Revision: 36.8 $
**      $Date: 89/10/25 11:12:02 $
d4 2
a10 1
**	$Header: /usr/maryann/daveb/V/wbtag/RCS/wbtag.asm,v 36.8 89/10/25 11:12:02 kodiak Exp Locker: daveb $
d162 1
a162 1
	    
d195 1
a195 1
WTID		dc.b	'stub for LoadWB compatability',10,0
@


36.8
log
@close workbench.library after starting it
@
text
@d4 2
a5 2
**      $Revision: 36.7 $
**      $Date: 89/09/07 15:09:59 $
d12 1
a12 1
**	$Header: wbtag.asm,v 36.7 89/09/07 15:09:59 kodiak Exp $
a65 1

d67 4
a70 2
		dc.l	0,0,0		; spacing till fake segment list
		dc.l	0		; allocation size for fake segment list
d72 4
a75 2
		; fake workbench segment
		dc.l	0		; next segment in fake segment list
d77 5
d84 1
d89 2
a90 1
		movem.l	a2-a3/a6,-(a7)
d98 9
d169 6
d177 1
d185 3
d191 1
a191 1

d193 1
a193 1
		movem.l	(a7)+,a2-a3/a6
@


36.7
log
@remove obsolete fake pr_CLI
@
text
@d4 2
a5 2
**      $Revision: 36.6 $
**      $Date: 89/09/07 13:56:11 $
d12 1
a12 1
**	$Header: wbtag.asm,v 36.6 89/09/07 13:56:11 kodiak Exp $
d153 2
d156 1
@


36.6
log
@provide lm_Path in d1 for StartWorkbench
@
text
@d4 2
a5 2
**      $Revision: 36.5 $
**      $Date: 89/04/05 10:54:05 $
d12 1
a12 1
**	$Header: wbtag.asm,v 36.5 89/04/05 10:54:05 kodiak Exp $
a148 12
		;-- dummy up a CLI and cache the command dir
		sub.w	#cli_SIZEOF+2,a7
		move.l	a7,d0
		addq.l	#2,d0
		lsr.l	#2,d0
		move.l	d0,a0
		add.l	a0,a0
		add.l	a0,a0
		move.l	lm_Path(a3),d1	; also parm for StartWorkbench below
		move.l	d1,cli_CommandDir(a0)
		move.l	d0,pr_CLI(a2)

d151 1
a154 3
		clr.l	pr_CLI(a2)
		add.w	#cli_SIZEOF+2,a7
	    
@


36.5
log
@move priority to -120
@
text
@d4 2
a5 2
**      $Revision: 36.4 $
**      $Date: 89/02/19 13:25:53 $
d12 1
a12 1
**	$Header: wbtag.asm,v 36.4 89/02/19 13:25:53 kodiak Exp $
d157 2
a158 1
		move.l	lm_Path(a3),cli_CommandDir(a0)
a162 1
		moveq	#0,d1
@


36.4
log
@remove diagnostic code
@
text
@d4 2
a5 2
**      $Revision: 36.3 $
**      $Date: 89/02/19 13:11:24 $
d12 1
a12 1
**	$Header: wbtag.asm,v 36.3 89/02/19 13:11:24 kodiak Exp $
d61 1
a61 1
		dc.b	0		;    BYTE  RT_PRI
@


36.3
log
@check for LoadWB/1.3 -- close icon.library if so
@
text
@d4 2
a5 2
**      $Revision: 36.0 $
**      $Date: 89/02/17 13:33:42 $
d12 1
a12 1
**	$Header: ramlib.asm,v 36.0 89/02/17 13:33:42 kodiak Exp $
a99 1
	move.l	$c0,d0
@


36.2
log
@create dummy pr_CLI w/ command path for StartWorkbench
@
text
@d1 12
a12 6
*************************************************************************
*									*
*	Copyright (C) 1987, Commodore-Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************
	SECTION	wb
d14 5
d24 1
d42 2
d95 44
d140 1
@


36.1
log
@stripped with the expectation that ramlib will search disks
@
text
@d63 1
d66 1
a66 1
		movem.l	a2/a6,-(a7)
d79 1
a79 1
		move.l	d0,a2
d90 14
a103 1
		move.l	lm_Arg(a2),d0
d107 3
d113 1
a113 1
		move.l	a2,a1
d117 1
a117 1
		movem.l	(a7)+,a2/a6
@


36.0
log
@initial w/ library searching
@
text
@a7 2
VERSION		EQU	35

d10 1
a11 1
	INCLUDE "exec/alerts.i"
a12 2
	INCLUDE	"libraries/filehandler.i"
	INCLUDE	"intuition/intuition.i"
d14 1
a14 1
	INCLUDE	"internal/mymsg.i"
d16 1
a16 1
	INCLUDE	"macros.i"
d18 12
a29 6
	XLVO	Alert
	XLVO	AllocMem
	XLVO	CloseLibrary
	XLVO	FindTask
	XLVO	Forbid
	XLVO	FreeMem
a31 1
	XLVO	Permit
d35 1
a35 2
	XLVO	Lock
	XLVO	UnLock
a36 1
	XLVO	AutoRequest
a59 11
 STRUCTURE	WorkbenchTag,0
    STRUCT	wt_FailedVol,MLH_SIZE
    STRUCT	wt_DriveName,32
    APTR	wt_WorkbenchLib
    LABEL	wt_SIZEOF

 STRUCTURE	FailedVolume,MLN_SIZE
    STRUCT	fv_VolName,32
    STRUCT	fv_VolDate,12
    LABEL	fv_SIZEOF

d62 1
a62 10
;   d2	new drive lock
;   d3	new drive proc, OpenLibrary("workbench... result, AutoRequest parm
;   d4	intuition library base
;   d5	DOS library base
;   d6	argument message
;   d7	current Process
;   a2	temporary
;   a3	temporary
;   a4	temporary
;   a5	allocated local variables
d65 1
a65 1
		movem.l	d2-d7/a2-a6,-(a7)
a66 3
		suba.l	a1,a1
		CALLLVO	FindTask
		move.l	d0,d7
d69 1
d71 1
a71 2
		move.l	d7,a1
		move.l	a0,LN_NAME(a1)
d74 1
a74 3
		move.l	d7,a0
		lea	pr_MsgPort(a0),a2
		move.l	a2,a0
d76 1
a76 1
		move.l	a2,a0
d78 1
a78 1
		move.l	d0,d6
a79 28
	    ;-- allocate local variables
		sub.w	#wt_SIZEOF,a7
		move.l	a7,a5
		lea	wt_FailedVol(a5),a0
		NEWLIST	a0

	    ;-- open dos.library
		lea	DLName(pc),a1
		moveq	#0,d0
		CALLLVO	OpenLibrary
		move.l	d0,d5
		bne.s	openIntuition

		ALERT	AN_Workbench!AG_OpenLib!AO_DOSLib
		bra	releaseLocal

openIntuition:
	    ;-- open intuition.library
		lea	ILName(pc),a1
		moveq	#0,d0
		CALLLVO	OpenLibrary
		move.l	d0,d4
		bne.s	openWorkbench

		ALERT	AN_Workbench!AG_OpenLib!AO_Intuition
		bra	closeDOS

openWorkbench:
d81 1
a81 1
		moveq	#VERSION,d0
d85 1
a85 4
		beq.s	searchVolumes

		bsr	wbOpened
		bra	closeIntui
d87 3
a89 73
	    ;-- search for workbench library in newly mounted disks
searchVolumes:
		CALLLVO	Forbid
		;-- find start of list
		move.l	d5,a0			; get DosLibrary *
		move.l	dl_Root(a0),a0		; get RootNode *
		move.l	rn_Info(a0),d0		; get Info BPTR
		lsl.l	#2,d0
		move.l	d0,a0
		move.l	di_DevInfo(a0),d0	; get Device List BPTR
devListLoop1:
		;-- check if at end of list
		beq	devListExhausted1
		lsl.l	#2,d0
		move.l	d0,a4
		;-- check for a volume in the drive
		cmp.l	#DLT_VOLUME,dl_Type(a4)	; check if volume entry
		bne.s	devListNext1
		move.l	dl_Task(a4),d3		; save volume task
		bne.s	foundVolume

devListNext1:
		move.l	(a4),d0			; get next device entry BPTR
		bra.s	devListLoop1

foundVolume:
		;-- get device list again to look for corresponding drive
		move.l	d5,a0			; get DosLibrary *
		move.l	dl_Root(a0),a0		; get RootNode *
		move.l	rn_Info(a0),d0		; get Info BPTR
		lsl.l	#2,d0
		move.l	d0,a0
		move.l	di_DevInfo(a0),d0	; get Device List BPTR
devListLoop2:
		;-- check if at end of list
		beq.s	devListNext1
		lsl.l	#2,d0
		move.l	d0,a3
		;-- check for drive that matches volume
		tst.l	dn_Type(a3)		; check if drive entry
		bne.s	devListNext2
		cmp.l	dn_Task(a3),d3		; check if identical task
		beq.s	foundDevice

devListNext2:
		move.l	(a3),d0			; get next device entry BPTR
		bra.s	devListLoop2

foundDevice:
		;-- look for this on the FailedVol list to see if it's new
		lea	wt_FailedVol(a5),a2
failedVolLoop:
		move.l	(a2),a2
		tst.l	(a2)			; check for end of list
		beq.s	newVolEntry		;   indicating this vol is new
		;	compare volume name
		move.l	dl_Name(a4),d0		; get current volume name
		lea	fv_VolName(a2),a1	; get failed volume name
		bsr	bstrCmp
		bne.s	failedVolLoop
		;	compare volume date
		lea	dl_VolumeDate(a4),a0
		lea	fv_VolDate(a2),a1
		cmp.l	(a0)+,(a1)+
		bne.s	failedVolLoop
		cmp.l	(a0)+,(a1)+
		bne.s	failedVolLoop
		cmp.l	(a0)+,(a1)+
		beq.s	devListNext1		; already known failure

newVolEntry:
		;-- construct a failure node for this volume
		moveq	#fv_SIZEOF,d0
d91 1
a91 62
		CALLLVO	AllocMem
		tst.l	d0
		bne.s	newFailureNode

		ALERT	AN_Workbench!AG_NoMemory
		bra	closeIntui

newFailureNode:
		;-- fill this node with this volume
		move.l	d0,a2
		move.l	dl_Name(a4),d0
		lsl.l	#2,d0
		move.l	d0,a0
		lea	fv_VolName(a2),a1
		clr.w	d0
		move.b	(a0)+,d0
		move.b	d0,(a1)+
		bra.s	bstrCpyDBF
bstrCpyLoop:
		move.b	(a0)+,(a1)+
bstrCpyDBF:
		dbf	d0,bstrCpyLoop
		lea	dl_VolumeDate(a4),a0
		lea	fv_VolDate(a2),a1
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+

		;-- add it to the failure list
		lea	wt_FailedVol(a5),a0
		move.l	(a0),d0			; ADDTAIL
		move.l	a2,(a0)			;
		movem.l	d0/a0,(a2)		;
		move.l	d0,a0			;
		move.l	a2,LN_PRED(a0)		;

		;-- get a lock on this drive
		;	get the drive name into a C string
		move.l	dn_Name(a3),d0
		lsl.l	#2,d0
		move.l	d0,a0
		lea	wt_DriveName(a5),a1
		move.l	a1,d1			; save for Lock parameter
		clr.w	d0
		move.b	(a0)+,d0
		bra.s	drivePrefixDBF
drivePrefixLoop:
		move.b	(a0)+,(a1)+
drivePrefixDBF:
		dbf	d0,drivePrefixLoop
		lea	LibsDirName(pc),a0
libsDirLoop:
		move.b	(a0)+,(a1)+
		bne.s	libsDirLoop

		;	admit that Lock will break the list protection
		CALLLVO	Permit

		;	get a Lock for the libs directory on the drive
		moveq	#SHARED_LOCK,d2
		move.l	d5,a6
		CALLLVO	Lock
a92 58
		move.l	d0,d2
		beq	searchVolumes

		;-- change LIBS: assign to this drive's libs
		bsr	changeLibsAssign

		;-- try to open the workbench library here
		lea	WLName(pc),a1
		moveq	#VERSION,d0
		CALLLVO	OpenLibrary
		move.l	d0,wt_WorkbenchLib(a5)
		beq.s	restoreLibs

		bsr	wbOpened

restoreLibs:
		;-- change LIBS: assign back
		tst.l	d3
		beq.s	unlockDrive
		bsr	changeLibsAssign

		;-- unlock this drive
unlockDrive:
		move.l	d2,d1
		move.l	d5,a6
		CALLLVO	UnLock
		move.l	ABSEXECBASE,a6

		;-- check the success of the workbench open
		tst.l	wt_WorkbenchLib(a5)
		bne.s	closeIntui

		;-- look for more new volumes
		bra	searchVolumes

devListExhausted1:
		CALLLVO	Permit
	    ;--	could not find workbench library on any disk
	    ;	ask for it with a requester

		suba.l	a0,a0
		lea	IARBody(pc),a1
		lea	IARPText(pc),a2
		lea	IARNText(pc),a3
		move.l	#DISKINSERTED,d0
		moveq	#0,d1
		move.l	#IARWIDTH,d2
		moveq	#IARHEIGHT,d3
		move.l	d4,a6
		CALLLVO	AutoRequest
		move.l	ABSEXECBASE,a6
		tst.l	d0
		bne	searchVolumes

closeIntui:
	    ;-- close intuition.library
		move.l	d4,a1
		CALLLVO	CloseLibrary
d94 2
a95 9
closeDOS:
	    ;-- close dos.library
		move.l	d5,a1
		CALLLVO	CloseLibrary
	    
releaseLocal:
	    ;-- release failed volumes list
		move.l	wt_FailedVol(a5),a2
releaseLoop:
a96 13
		move.l	(a1),d0
		beq.s	releaseDone
		move.l	d0,a2
		moveq	#fv_SIZEOF,d0
		CALLLVO	FreeMem
		bra.s	releaseLoop
releaseDone:
		add.w	#wt_SIZEOF,a7		; free stack variables
	    
	    ;-- reply the argument message here if a failure occurred
		tst.l	d6
		beq.s	killProc
		move.l	d6,a1
d98 1
a98 2
	    
killProc:
d100 1
a100 1
		movem.l	(a7)+,d2-d7/a2-a6
a102 89
;------ wbOpened -----------------------------------------------------
wbOpened:
		move.l	d0,a6
		move.l	d6,a1
		jsr	-30(a6)		; kludge StartupMsg function
		move.l	ABSEXECBASE,a6
		tst.l	d0
		bne.s	wboDone
		moveq	#0,d6		; message will be replied by workbench
wboDone:
		rts

;------ bstrCmp ------------------------------------------------------
bstrCmp:
		lsl.l	#2,d0
		move.l	d0,a0
		clr.w	d0
		move.b	(a0),d0
bcLoop:
		cmp.b	(a0)+,(a1)+
		dbne	d0,bcLoop
		rts

;------ changeLibsAssign ---------------------------------------------
changeLibsAssign:
		CALLLVO	Forbid
		;-- find start of list
		move.l	d5,a0			; get DosLibrary *
		move.l	dl_Root(a0),a0		; get RootNode *
		move.l	rn_Info(a0),d0		; get Info BPTR
		lsl.l	#2,d0
		move.l	d0,a0
		move.l	di_DevInfo(a0),d0	; get Device List BPTR
devListLoop3:
		;-- check if at end of list
		beq	devListExhausted3
		lsl.l	#2,d0
		move.l	d0,a2
		;-- check for a volume in the drive
		cmp.l	#DLT_DIRECTORY,dl_Type(a2) ; check if lock entry
		bne.s	devListNext3
		move.l	dl_Name(a2),d0		; get current volume name
		lea	LibsLockName(pc),a1
		bsr.s	bstrCmp
		beq.s	foundLock

devListNext3:
		move.l	(a2),d0			; get next device entry BPTR
		bra.s	devListLoop3

foundLock:
		move.l	dl_Lock(a2),d0
		move.l	dl_Task(a2),d1
		move.l	d2,dl_Lock(a2)
		move.l	d3,dl_Task(a2)
		move.l	d0,d2
		move.l	d1,d3

claDone:
		CALLLVO	Permit
		rts

devListExhausted3:
		moveq	#0,d3
		bra.s	claDone

IARBody:
		dc.b	AUTOFRONTPEN,AUTOBACKPEN,AUTODRAWMODE,0
		dc.w	AUTOLEFTEDGE+10,AUTOTOPEDGE+2
		dc.l	AUTOITEXTFONT,IARTBody1,IARBody2
IARBody2	dc.b	AUTOFRONTPEN,AUTOBACKPEN,AUTODRAWMODE,0
		dc.w	AUTOLEFTEDGE+10,AUTOTOPEDGE+2+11
		dc.l	AUTOITEXTFONT,IARTBody2,0
IARPText:
		dc.b	AUTOFRONTPEN,AUTOBACKPEN,AUTODRAWMODE,0
		dc.w	AUTOLEFTEDGE,AUTOTOPEDGE
		dc.l	AUTOITEXTFONT,IARTPText,0
IARNText:
		dc.b	AUTOFRONTPEN,AUTOBACKPEN,AUTODRAWMODE,0
		dc.w	AUTOLEFTEDGE,AUTOTOPEDGE
		dc.l	AUTOITEXTFONT,IARTNText,0

IARTBody1	dc.b	'Please insert Workbench 1.4',0
IARTBody2	dc.b	'disk in any drive.',0
IARTPText	dc.b	'Retry',0
IARTNText	dc.b	'Cancel',0
IARWIDTH	EQU	320
IARHEIGHT	EQU	60

a104 4
DLName		dc.b	'dos.library',0
ILName		dc.b	'intuition.library',0
LibsLockName	dc.b	4,'LIBS'
LibsDirName	dc.b	':libs',0
@
