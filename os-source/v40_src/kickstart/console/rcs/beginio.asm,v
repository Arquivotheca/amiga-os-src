head     36.5;
branch   ;
access   ;
symbols  V39_4:36.5 V37_157:36.5 V37_149:36.5 V37_136:36.5 V37_133:36.5 V37_110:36.5 V37_98:36.5 V37_85:36.5 V37_63:36.5 V37_36:36.5 V37_15:36.5 V37_10:36.5 V37_7:36.5 V37_2:36.5 V36_558:36.5 V36_554:36.5 V36_552:36.5 V36_549:36.5 V36_548:36.5 V36_547:36.5 V36_546:36.5 V36_545:36.5 V36_544:36.5 V36_543:36.5 V36_542:36.5 V36_540:36.5 V36_539:36.5 V36_538:36.5 V36_537:36.5 V36_536:36.5 V36_529:36.5 V36_527:36.5 V36_525:36.5 V36_524:36.5 V36_523:36.5 V36_522:36.5 V36_521:36.5 V36_520:36.5 V36_519:36.5 V36_518:36.5 V36_495:36.4 V36_491:36.4 V36_486:36.4 V36_482:36.4 V36_476:36.4 V36_471:36.4 V36_465:36.4 V36_463:36.4 V36_461:36.4 V36_460:36.4 V36_453:36.4 V36_447:36.4 V36_442:36.4 V36_429:36.4 V36_423:36.4 V36_413:36.4 V36_394:36.3 V36_387:36.3 V36_382:36.3 V36_381:36.3 V36_379:36.2 V36_373:36.2 V36_367:36.2 V36_361:36.2 V36_359:36.2 V36_357:36.2 V36_353:36.2 V36_346:36.2 V36_343:36.2 V36_338:36.2 V36_332:36.2 V36_327:36.2 V36_321:36.2 V36_319:36.2 V36_318:36.2 V36_316:36.2 V36_313:36.2 V36_311:36.2 V36_310:36.2 V36_300:36.2 V36_299:36.2 V36_297:36.2 V36_295:36.2 V36_278:36.2 V36_274:36.2 V36_221:36.1 V36_205:36.1 V36_171:36.0 V36_167:36.0 V36_165:36.0 V36_153:36.0 V36_146:36.0 V36_140:36.0 V36_129:36.0 V36_113:36.0 V36_56:36.0 V36_53:36.0 V36_51:36.0 V36_45:36.0 L36_42:36.0;
locks    ; strict;
comment  @@;


36.5
date     90.06.07.12.10.54;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.13.13.32.10;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.10.46.58;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.02.11.36.17;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.04.15.57.27;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.09.06.19.51.09;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.5
log
@convert opcodes to lower case
optimize IO_CURRENT testing (after it moved to msb)
@
text
@**
**	$Id: beginio.asm,v 36.4 90/04/13 13:32:10 kodiak Exp Locker: kodiak $
**
**      device command dispatch
**
**      (C) Copyright 1985,1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**
	SECTION	console

**	Includes

	INCLUDE	"cddata.i"

	INCLUDE	"exec/errors.i"


**	Exports

	XDEF	BeginIO
	XDEF	AbortIO
	XDEF	QueueCommand
	XDEF	EndCommand


**	Imports

	XLVO	Disable			; Exec
	XLVO	Enable			;
	XLVO	PutMsg			;
	XLVO	ReplyMsg		;


**	Assumptions

	IFNE	IOB_CURRENT-7
	FAIL	"IOB_CURRENT not sign bit, recode"
	ENDC


*------ Device/BeginIO -----------------------------------------------
*
*   NAME
*	BeginIO - dispatch a device command
*
*   SYNOPSIS
*	BeginIO(iORequest), deviceBase
*		a1	    a6
*
*   FUNCTION
*	BeginIO has the responsibility of dispatching all device
*	commands.  Immediate commands are always called directly, and
*	all other commands are queued to make them single threaded.
*
*   INPUTS
*	iORequest -- the I/O Request for this command.
*
*---------------------------------------------------------------------
BeginIO:
		movem.l	d2/a3,-(sp)
		move.l	a1,a3		; save the I/O Request
IO_TEMP		EQU	(~(IOF_QUEUED!IOF_CURRENT!IOF_SERVICING!IOF_DONE))&$0ff
		and.b	#IO_TEMP,IO_FLAGS(a3)	
		clr.b	IO_ERROR(a3)	; clear the error field

		;------ is the command in bounds?
		move.w	IO_COMMAND(a3),d2
		cmp.w	cd_NumCommands(a6),d2
		blt.s	cmdExists
		moveq	#0,d2

cmdExists:
		move.l	cd_CmdBytes(a6),a0
		tst.b	0(a0,d2.w)
		bmi.s	performCmd	; it's guarenteed immediate

		bsr.s	QueueCommand	; queue the command

		;------ is this the first command in its queue?
		tst.b	IO_FLAGS(a3)	; btst #IOB_CURRENT,
		bpl.s	notQuickCmd

		;------ is the unit running?
		move.l	IO_UNIT(a3),a0
		btst	#DUB_STOPPED,du_Flags(a0)
		beq.s	performCmd

notQuickCmd:
		bclr	#IOB_QUICK,IO_FLAGS(a3)
		bra.s	endBIO

performCmd:
		lsl.w	#2,d2
		move.l	cd_CmdVectors(a6),a0
		move.l	0(a0,d2.w),a0
		move.l	a3,a1
		jsr	(a0)

endBIO:
		movem.l	(sp)+,d2/a3
		rts


*------ QueueCommand -------------------------------------------------
*
*   NAME
*	QueueCommand - queue a device command
*
*   SYNOPSIS
*	QueueCommand(iORequest)
*		     a1
*
*   FUNCTION
*	Queue a device command for later processing by the device,
*	unless the command error is non-zero.
*
*   INPUTS
*	iORequest -- the I/O Request for the command to queue.
*
*   RESULTS
*	The command is marked CURRENT if it is the first one in the
*	queue, else it is marked QUEUED.
*
*---------------------------------------------------------------------
QueueCommand:
		move.l	a3,-(sp)
		move.l	a1,a3
		LINKEXE	Disable

		andi.b	#(~(IOF_CURRENT!IOF_QUEUED))&$ff,IO_FLAGS(a3)

		tst.b	IO_ERROR(a3)	; don't queue it if already error
		bne.s	queueEnable

		;------	queue the I/O request
		move.w	IO_COMMAND(a3),d0
		move.l	cd_CmdBytes(a6),a0
		move.b	0(a0,d0.w),d0
		ext.w	d0
		mulu	#MP_SIZE,d0
		move.l	IO_UNIT(a3),a0
		add.l	d0,a0
		move.l	a0,-(a7)
		move.l	a3,a1
		LINKEXE PutMsg

		;------	check if the I/O request is first in the queue
		move.l	(a7)+,a0
		move.l	MP_MSGLIST+LH_HEAD(a0),a0
		cmpa.l	a0,a3
		beq.s	queueCurrent

		bset	#IOB_QUEUED,IO_FLAGS(a3)
		bra.s	queueEnable

queueCurrent:
		bset	#IOB_CURRENT,IO_FLAGS(a3)

queueEnable:
		LINKEXE	Enable
		move.l	(sp)+,a3
		rts


*------ Device/AbortIO -----------------------------------------------
*
*   NAME
*	AbortIO - abort a device command
*
*   SYNOPSIS
*	AbortIO(iORequest), deviceBase
*		a1	    a6
*
*   FUNCTION
*	AbortIO will try to abort a device command.  It is allowed to
*	not be successful.
*
*   INPUTS
*	iORequest -- the I/O Request for the command to abort.
*
*---------------------------------------------------------------------
AbortIO:
		moveq	#IOERR_ABORTED,d0
		bsr.s	EndCommand
		rts


*------ EndCommand ---------------------------------------------------
*
*   NAME
*	EndCommand - reply a device command
*
*   SYNOPSIS
*	EndCommand(error, iORequest), deviceBase
*		   d0	  a1	      a6
*
*   FUNCTION
*	EndCommand will reply to the command invoker that the command
*	has completed.  Only the first EndCommand for a command will
*	have effect, and set the error of the request according to 
*	the error parameter.
*
*   INPUTS
*	error -- the error to report, if any
*	iORequest -- the I/O Request for the command to end
*
*---------------------------------------------------------------------
EndCommand:
		movem.l	d2/a3,-(sp)
		move.l	d0,d2
		move.l	a1,a3

		LINKEXE	Disable

		bset	#IOB_DONE,IO_FLAGS(a3)
		bne.s	endAlreadyDone

		move.b	d2,IO_ERROR(a1)

		;------ is this command in the queue?
		tst.b	IO_FLAGS(a3)	; btst #IOB_CURRENT,
		bpl.s	endNotCurrent

		;------ REMOVE
		move.l	(a3),a0
		move.l	LN_PRED(a3),a1
		move.l	a0,(a1)
		move.l	a1,LN_PRED(a0)

		tst.l	(a0)		; is this list now empty?
		beq.s	endReply

		bset	#IOB_CURRENT,IO_FLAGS(a0)
		bra.s	endReply

endNotCurrent:
		btst	#IOB_QUEUED,IO_FLAGS(a3)
		beq.s	endReply

		;---------- remove the command from the queue
		move.l	a3,a1
		REMOVE

endReply:
		LINKEXE	Enable
		;------  is this command still quick?
		btst	#IOB_QUICK,IO_FLAGS(a3)
		bne.s	endDone

		;---------- reply the command
		move.l	a3,a1
		LINKEXE	ReplyMsg

endDone:
		movem.l	(sp)+,d2/a3
		rts

endAlreadyDone:
		LINKEXE	Enable
		bra.s	endDone

		END
@


36.4
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d34 7
d48 1
a48 1
*		A1	    A6
d60 2
a61 2
		MOVEM.L	D2/A3,-(SP)
		MOVE.L	A1,A3		; save the I/O Request
d63 2
a64 2
		AND.B	#IO_TEMP,IO_FLAGS(A3)	
		CLR.B	IO_ERROR(A3)	; clear the error field
d67 4
a70 4
		MOVE.W	IO_COMMAND(A3),D2
		CMP.W	cd_NumCommands(A6),D2
		BLT.S	cmdExists
		MOVEQ	#0,D2
d73 3
a75 3
		MOVE.L	cd_CmdBytes(A6),A0
		TST.B	0(A0,D2.W)
		BMI.S	performCmd	; it's guarenteed immediate
d77 1
a77 1
		BSR.S	QueueCommand	; queue the command
d80 2
a81 2
		BTST	#IOB_CURRENT,IO_FLAGS(A3)
		BEQ.S	notQuickCmd
d84 3
a86 3
		MOVE.L	IO_UNIT(A3),A0
		BTST	#DUB_STOPPED,du_Flags(A0)
		BEQ.S	performCmd
d89 2
a90 2
		BCLR	#IOB_QUICK,IO_FLAGS(A3)
		BRA.S	endBIO
d93 5
a97 5
		LSL.W	#2,D2
		MOVE.L	cd_CmdVectors(A6),A0
		MOVE.L	0(A0,D2.W),A0
		MOVE.L	A3,A1
		JSR	(A0)
d100 2
a101 2
		MOVEM.L	(SP)+,D2/A3
		RTS
d111 1
a111 1
*		     A1
d126 2
a127 2
		MOVE.L	A3,-(SP)
		MOVE.L	A1,A3
d130 1
a130 1
		ANDI.B	#~(IOF_CURRENT!IOF_QUEUED),IO_FLAGS(A3)
d132 2
a133 2
		TST.B	IO_ERROR(A3)	; don't queue it if already error
		BNE.S	queueEnable
d136 9
a144 9
		MOVE.W	IO_COMMAND(A3),D0
		MOVE.L	cd_CmdBytes(A6),A0
		MOVE.B	0(A0,D0.W),D0
		EXT.W	D0
		MULU	#MP_SIZE,D0
		MOVE.L	IO_UNIT(A3),A0
		ADD.L	D0,A0
		MOVE.L	A0,-(A7)
		MOVE.L	A3,A1
d148 4
a151 4
		MOVE.L	(A7)+,A0
		MOVE.L	MP_MSGLIST+LH_HEAD(A0),A0
		CMPA.L	A0,A3
		BEQ.S	queueCurrent
d153 2
a154 2
		BSET	#IOB_QUEUED,IO_FLAGS(A3)
		BRA.S	queueEnable
d157 1
a157 1
		BSET	#IOB_CURRENT,IO_FLAGS(A3)
d161 2
a162 2
		MOVE.L	(SP)+,A3
		RTS
d172 1
a172 1
*		A1	    A6
d183 3
a185 3
		MOVEQ	#IOERR_ABORTED,D0
		BSR.S	EndCommand
		RTS
d195 1
a195 1
*		   D0	  A1	      A6
d209 3
a211 3
		MOVEM.L	D2/A3,-(SP)
		MOVE.L	D0,D2
		MOVE.L	A1,A3
d215 2
a216 2
		BSET	#IOB_DONE,IO_FLAGS(A3)
		BNE.S	endAlreadyDone
d218 1
a218 1
		MOVE.B	D2,IO_ERROR(A1)
d221 2
a222 2
		BTST	#IOB_CURRENT,IO_FLAGS(A3)
		BEQ.S	endNotCurrent
d225 4
a228 4
		MOVE.L	(A3),A0
		MOVE.L	LN_PRED(A3),A1
		MOVE.L	A0,(A1)
		MOVE.L	A1,LN_PRED(A0)
d230 2
a231 2
		TST.L	(A0)		; is this list now empty?
		BEQ.S	endReply
d233 2
a234 2
		BSET	#IOB_CURRENT,IO_FLAGS(A0)
		BRA.S	endReply
d237 2
a238 2
		BTST	#IOB_QUEUED,IO_FLAGS(A3)
		BEQ.S	endReply
d241 1
a241 1
		MOVE.L	A3,A1
d247 2
a248 2
		BTST	#IOB_QUICK,IO_FLAGS(A3)
		BNE.S	endDone
d251 1
a251 1
		MOVE.L	A3,A1
d255 2
a256 2
		MOVEM.L	(SP)+,D2/A3
		RTS
@


36.3
log
@for 4.x rcs
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/console/RCS/beginio.asm,v 36.2 89/12/02 11:36:17 kodiak Exp Locker: kodiak $
@


36.2
log
@checkpoint after line buffer coding completed,
and just after start of line length coding
@
text
@d2 1
a2 1
**	$Header$
@


36.1
log
@use XLVO
rename dd_ to cd_ device variables
@
text
@d1 9
a9 17
	TTL    '$Header: beginio.asm,v 36.0 88/09/06 19:51:09 kodiak Exp $'
**********************************************************************
*                                                                    *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.      *
*   No part of this program may be reproduced, transmitted,          *
*   transcribed, stored in retrieval system, or translated into      *
*   any language or computer language, in any form or by any         *
*   means, electronic, mechanical, magnetic, optical, chemical,      *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030                                     *
*                                                                    *
**********************************************************************
*
*	device dispatch code
*
**********************************************************************
d11 1
a11 1
	SECTION		rawinput
d13 1
a13 1
*------ Included Files -----------------------------------------------
d15 1
a15 1
	INCLUDE		"cddata.i"
a16 1
	INCLUDE		"exec/errors.i"
d18 1
d20 4
a23 1
*------ Imported Names -----------------------------------------------
a24 1
*------ Imported Functions -------------------------------------------
d26 2
a31 8


*------ Exported Functions -------------------------------------------

	XDEF		BeginIO
	XDEF		AbortIO
	XDEF		QueueCommand
	XDEF		EndCommand
@


36.0
log
@*** empty log message ***
@
text
@d1 1
a1 1
	TTL    '$Header: beginio.asm,v 35.1 88/01/27 13:01:26 kodiak Exp $'
d32 4
a35 4
	XREF_EXE	Disable
	XREF_EXE	Enable
	XREF_EXE	PutMsg
	XREF_EXE	ReplyMsg
d73 1
a73 1
		CMP.W	dd_NumCommands(A6),D2
d78 1
a78 1
		MOVE.L	dd_CmdBytes(A6),A0
d99 1
a99 1
		MOVE.L	dd_CmdVectors(A6),A0
d142 1
a142 1
		MOVE.L	dd_CmdBytes(A6),A0
@
