head     1.13;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @# @;


1.13
date     93.03.05.16.47.44;  author darren;  state Exp;
branches ;
next     1.12;

1.12
date     93.02.12.11.19.57;  author darren;  state Exp;
branches ;
next     1.11;

1.11
date     92.05.19.16.29.41;  author darren;  state Exp;
branches ;
next     1.10;

1.10
date     92.05.19.12.27.55;  author darren;  state Exp;
branches ;
next     1.9;

1.9
date     92.04.02.15.09.45;  author darren;  state Exp;
branches ;
next     1.8;

1.8
date     92.03.30.17.09.28;  author darren;  state Exp;
branches ;
next     1.7;

1.7
date     92.03.19.16.52.47;  author darren;  state Exp;
branches ;
next     1.6;

1.6
date     92.03.19.16.52.09;  author darren;  state Exp;
branches ;
next     1.5;

1.5
date     92.03.19.16.47.52;  author darren;  state Exp;
branches ;
next     1.4;

1.4
date     92.03.19.13.55.34;  author darren;  state Exp;
branches ;
next     1.3;

1.3
date     92.03.17.10.03.05;  author darren;  state Exp;
branches ;
next     1.2;

1.2
date     92.03.17.09.34.11;  author darren;  state Exp;
branches ;
next     1.1;

1.1
date     92.03.17.08.35.26;  author darren;  state Exp;
branches ;
next     ;


desc
@First rev of a local lmkfile for console.device
@


1.13
log
@*** empty log message ***
@
text
@###############################################################################
#
# lmkfile for console.device
#
###############################################################################

#
# Server directory for the data...
#
VERSION= 40
RELVERSION= 40
REMOTE = V$(VERSION):src/kickstart/console

#
# Name of the module
#
MODNAME	= console

#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip

#
# Compiler, assembler, and linker
#
CC = lc
AS = hx68 -a
LN = blink

#
# Compiler flags...
#
CFLAGS	= -. -b0 -v -ms -cfistqm -d1 -O

#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -cqsy -i V$(VERSION):include -o

#
# Default rules...
#
.c.o:
	$(CC) $(CFLAGS) $*.c

.asm.o:
	@@Echo "$*.asm: " NOLINE
	$(AS) $*.asm $(AFLAGS) $*.o

#
# Linker flags
#
LFLAGS		= ADDSYM SMALLCODE SMALLDATA
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= V$(VERSION):lib/small.lib V$(VERSION):lib/debug.lib V$(VERSION):lib/lattice/lc.lib

#
# My headers...
#
PUBLIC_HDR =	console.i conunit.i console.h conunit.h

MY_HDR	=	cddata.i debug.i macros.i conmap.i conmap.h $(PUBLIC_HDR)

#
# My C source...
#
MY_C	=	pack.c

#
# My Assebly source...
#
MY_A	=	residenttag.asm \
dev.asm \
beginio.asm \
unsupported.asm \
stop.asm \
able.asm \
buffer.asm \
clear.asm \
clip.asm \
cursor.asm \
highlight.asm \
inputhandler.asm \
keymap.asm \
open.asm \
pack.asm \
rawconvert.asm \
read.asm \
refresh.asm \
scroll.asm \
snip.asm \
tab.asm \
task.asm \
wreset.asm \
write.asm \
debug.asm \
endmodule.asm


#
# My object files...
#
MY_OBJS	=	residenttag.o \
dev.o \
beginio.o \
unsupported.o \
stop.o \
able.o \
buffer.o \
clear.o \
clip.o \
cursor.o \
highlight.o \
inputhandler.o \
keymap.o \
open.o \
pack.o \
rawconvert.o \
read.o \
refresh.o \
scroll.o \
snip.o \
tab.o \
task.o \
wreset.o \
write.o \
debug.o \
endmodule.o


#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=


ALL:	$(LD_STRIP)

#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)

#
# Build the various versions
#
$(LD_FILE):	$(MY_OBJS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<

#
# Depend...
#
residenttag.o: residenttag.asm $(MY_HDR) $(MODNAME)_rev.i

dev.o:          dev.asm			$(MY_HDR)
beginio.o:      beginio.asm		$(MY_HDR)
unsupported.o:  unsupported.asm		$(MY_HDR)
stop.o:         stop.asm		$(MY_HDR)
able.o:         able.asm		$(MY_HDR)
buffer.o:       buffer.asm		$(MY_HDR)
clear.o:        clear.asm		$(MY_HDR)
clip.o:         clip.asm		$(MY_HDR)
cursor.o:       cursor.asm		$(MY_HDR)
highlight.o:    highlight.asm		$(MY_HDR)
inputhandler.o: inputhandler.asm	$(MY_HDR)
keymap.o:       keymap.asm		$(MY_HDR)
open.o:         open.asm		$(MY_HDR)
pack.o:         pack.asm		$(MY_HDR)
rawconvert.o:   rawconvert.asm		$(MY_HDR)
read.o:         read.asm		$(MY_HDR)
refresh.o:      refresh.asm		$(MY_HDR)
scroll.o:       scroll.asm		$(MY_HDR)
snip.o:         snip.asm		$(MY_HDR)
tab.o:          tab.asm			$(MY_HDR)
task.o:         task.asm		$(MY_HDR)
wreset.o:       wreset.asm		$(MY_HDR)
write.o:        write.asm		$(MY_HDR)
debug.o:	debug.asm		debug.i
endmodule.o:    endmodule.asm		$(MY_HDR)

#
# Bump the version...
#
version:
#	@@bumprev $(VERSION) $(MODNAME)_rev
	@@bumprev $(RELVERSION) $(MODNAME)_rev

$(MODNAME)_rev.i:
#	@@bumprev $(VERSION) $(MODNAME)_rev
	@@bumprev $(RELVERSION) $(MODNAME)_rev

$(MODNAME)_rev.h:
#	@@bumprev $(VERSION) $(MODNAME)_rev
	@@bumprev $(RELVERSION) $(MODNAME)_rev

#
# Release just the headers
#
headers:	$(PUBLIC_HDR)
	copy $(PUBLIC_HDR) V$(VERSION):include/devices NOPRO

#
# Release the current build to the server
#
internal:
	@@delete $(REMOTE)/((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@@copy ((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile) $(REMOTE)
	@@copy \#?.doc V$(VERSION):doc NOPRO
	@@copy \#?.sfd V$(VERSION):lib/sfd NOPRO

#
# Blow away all files that would need to be rebuilt
#
clean:
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?)

#
# Make the AutoDocs
#
doc:	$(MODNAME).doc

$(MODNAME).doc:	$(MY_C) $(MY_A)
	@@Echo "Making $(MODNAME).doc"
	@@JOIN <as RAM:$(MODNAME).cat ~? ~< <
	$(MY_A) $(MY_C) ;
	<
	@@AutoDoc >$(MODNAME).doc -a -C -s -l78 RAM:$(MODNAME).cat
	@@Delete RAM:$(MODNAME).cat QUIET
	@@Protect $(MODNAME).doc +rwd

#
# Make a complete new release (This still is in testing...)
#
release:
	lmk clean
	lmk version
	lmk doc
	lmk $(LD_FILE)
	lmk $(LD_STRIP)

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@@protect \#? rwed QUIET
	@@copy $(REMOTE)/\#? ""
	@@protect \#? +r QUIET
	@@protect \#?_rev\#? rwd QUIET
	@@Echo "Local is updated..."
@


1.12
log
@Make V40 for release 3.01
@
text
@d10 1
a10 1
VERSION= 39
@


1.11
log
@Use libs from server for TaggedOpenLibrary()
@
text
@d11 1
d203 2
a204 1
	@@bumprev $(VERSION) $(MODNAME)_rev
d207 2
a208 1
	@@bumprev $(VERSION) $(MODNAME)_rev
d211 2
a212 1
	@@bumprev $(VERSION) $(MODNAME)_rev
@


1.10
log
@Remove map.asm from build list - no longer has this code, nor was
it being used.
@
text
@d60 1
a60 1
LIBS= LIB:small.lib LIB:debug.lib LIB:lc.lib
@


1.9
log
@Build with pack.asm instead of pack.c
@
text
@a89 1
map.asm \
a120 1
map.o \
a183 1
map.o:          map.asm			$(MY_HDR)
@


1.8
log
@Use includes from V39 directory - yikes, so many build directories,
and so many different projects!
@
text
@d92 1
d124 1
a124 1
pack.obj \
d188 1
a188 1
pack.o:         pack.c			$(MY_HDR)
@


1.7
log
@*** empty log message ***
@
text
@d39 1
a39 1
AFLAGS	= -cqsy -i include: -o
@


1.6
log
@*** empty log message ***
@
text
@d242 1
a242 1
	$(MY_A) $(MY_A) ;
@


1.5
log
@Builds autodocs
@
text
@d11 1
a11 1
REMOTE = $(VERSION):src/kickstart/console
d216 1
a216 1
	copy $(PUBLIC_HDR) $(VERSION):include/devices NOPRO
d225 2
a226 2
	@@copy \#?.doc $(VERSION):doc NOPRO
	@@copy \#?.sfd $(VERSION):lib/sfd NOPRO
@


1.4
log
@Change to build to using sun built pack.obj file for now until
I can further study all the code changes made by the SAS compiler
@
text
@d216 1
a216 1
	copy $(PUBLIC_HDR) V:include/devices NOPRO
d225 2
a226 2
	@@copy \#?.doc V:doc NOPRO
	@@copy \#?.sfd V:lib/sfd NOPRO
d241 6
a246 4
	@@Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	@@Delete RAM:$(MODNAME).tmp.doc QUIET
	@@Protect $(MODNAME).doc rwd
@


1.3
log
@Build debug.asm if debugging turned on in debug.i
@
text
@d123 1
a123 1
pack.o \
@


1.2
log
@*** empty log message ***
@
text
@d101 1
d133 1
d197 1
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
CFLAGS	= -b0 -v -me -ms -cfistqm -d1 -O
d60 1
a60 1
LIBS= LIB:small.lib LIB:debug.lib debug.lib
@
