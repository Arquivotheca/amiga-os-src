head     36.5;
branch   ;
access   ;
symbols  V39_4:36.5 V37_157:36.5 V37_149:36.5 V37_136:36.5 V37_133:36.5 V37_110:36.5 V37_98:36.5 V37_85:36.5 V37_63:36.5 V37_36:36.5 V37_15:36.5 V37_10:36.5 V37_7:36.5 V37_2:36.5 V36_558:36.5 V36_554:36.5 V36_552:36.5 V36_549:36.5 V36_548:36.5 V36_547:36.5 V36_546:36.5 V36_545:36.5 V36_544:36.5 V36_543:36.5 V36_542:36.5 V36_540:36.5 V36_539:36.5 V36_538:36.5 V36_537:36.5 V36_536:36.5 V36_529:36.4 V36_527:36.4 V36_525:36.4 V36_524:36.4 V36_523:36.4 V36_522:36.4 V36_521:36.4 V36_520:36.4 V36_519:36.4 V36_518:36.4 V36_495:36.4 V36_491:36.4 V36_486:36.4 V36_482:36.4 V36_476:36.4 V36_471:36.4 V36_465:36.4 V36_463:36.4 V36_461:36.4 V36_460:36.4 V36_453:36.4 V36_447:36.4 V36_442:36.4 V36_429:36.4 V36_423:36.4 V36_413:36.4 V36_394:36.3 V36_387:36.3 V36_382:36.3 V36_381:36.3 V36_379:36.2 V36_373:36.2 V36_367:36.2 V36_361:36.2 V36_359:36.2 V36_357:36.2 V36_353:36.2 V36_346:36.2 V36_343:36.2 V36_338:36.2 V36_332:36.2 V36_327:36.2 V36_321:36.2 V36_319:36.2 V36_318:36.2 V36_316:36.2 V36_313:36.2 V36_311:36.2 V36_310:36.2 V36_300:36.2 V36_299:36.2 V36_297:36.2 V36_295:36.2 V36_278:36.2 V36_274:36.2 V36_221:36.1 V36_205:36.1 V36_171:36.0 V36_167:36.0 V36_165:36.0 V36_153:36.0 V36_146:36.0 V36_140:36.0 V36_129:36.0 V36_113:36.0 V36_56:36.0 V36_53:36.0 V36_51:36.0 V36_45:36.0 L36_42:36.0;
locks    ; strict;
comment  @*   @;


36.5
date     90.11.02.08.12.38;  author darren;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.13.13.32.14;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.10.47.02;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.02.11.37.23;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.04.16.05.02;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.09.06.19.52.24;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.5
log
@short branch optimizations
@
text
@**
**	$Id: stop.asm,v 36.4 90/04/13 13:32:14 kodiak Exp Locker: darren $
**
**      console device start/stop commands
**
**      (C) Copyright 1985,1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**
	SECTION	console

**	Includes

	INCLUDE	"cddata.i"

	INCLUDE	"exec/errors.i"


**	Exports

	XDEF	Invalid
	XDEF	ResetCmd
	XDEF	StopCmd
	XDEF	Start
	XDEF	Flush

	XDEF	CBInvalid
	XDEF	CBResetCmd
	XDEF	CBStopCmd
	XDEF	CBStart
	XDEF	CBFlush


**	Imports

	XLVO	Disable			; Exec
	XLVO	Enable			;
	XLVO	PutMsg			;
	XLVO	ReplyMsg		;

	XREF	AbortIO
	XREF	EndCommand


*------ console.device/CMD_INVALID -----------------------------------
*
*   NAME
*	Invalid - invalid command
*
*   FUNCTION
*	Invalid is always an invalid command, and sets the device
*	error appropriately.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Command	CMD_INVALID
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
*---------------------------------------------------------------------
CBInvalid	EQU	-1

Invalid:
		moveq	#IOERR_NOCMD,d0
		bsr	EndCommand
		rts

*------ console.device/CMD_RESET -------------------------------------
*
*   NAME
*	Reset - reset the device
*
*   FUNCTION
*	Reset resets the device without destroying handles
*	to the open device.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_RESET
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
*---------------------------------------------------------------------
CBResetCmd	EQU	-1

ResetCmd:
		bsr.s	StopCmd
		bsr.s	Flush
		bsr.s	Start
		rts


*------ console.device/CMD_STOP --------------------------------------
*
*   NAME
*	Stop - pause current and queued I/O requests (immediate)
*
*   FUNCTION
*	Stop pauses all queued requests for the unit, and tries to
*	pause the current I/O request.  The only commands that will
*	be subsequently allowed to be performed are immediate I/O
*	requests, which include those to start, flush, and finish the
*	I/O after the stop command.
*
*	For the console, only the Read command is stopped --
*	all other commands are immediate.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_STOP
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
*---------------------------------------------------------------------
CBStopCmd	EQU	-1

StopCmd:
		move.l	IO_UNIT(a1),a0
		bset	#DUB_STOPPED,du_Flags(a0)
		bsr	EndCommand
		rts


*------ console.device/CMD_START -------------------------------------
*
*   NAME
*	Start - restart after stop (immediate)
*
*   FUNCTION
*	Start restarts the unit after a stop command.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_START
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
*---------------------------------------------------------------------
CBStart	EQU	-1

Start:
		move.l	a1,-(a7)
		move.l	IO_UNIT(a1),a0
		bclr	#DUB_STOPPED,du_Flags(a0)
	    ;-- if I/O is already pending, see if this will satisfy it
		move.l	MP_MSGLIST(a0),a1
		tst.l	(a1)
		beq.s	sRts

		move.w	IO_COMMAND(a1),d0
		lsl.w	#2,d0
		move.l	cd_CmdVectors(a6),a0
		move.l	0(a0,d0.w),a0
		jsr	(a0)

sRts:
		move.l	(a7)+,a1
		bsr	EndCommand
		rts


*------ console.device/CMD_FLUSH -------------------------------------
*
*   NAME
*	Flush - abort all I/O requests (immediate)
*
*   FUNCTION
*	Flush aborts all stopped I/O at the unit.
*
*   IO REQUEST
*	io_Message	mn_ReplyPort set if quick I/O is not possible
*	io_Device	preset by the call to OpenDevice
*	io_Unit		preset by the call to OpenDevice
*	io_Command	CMD_FLUSH
*	io_Flags	IOB_QUICK set if quick I/O is possible
*
*---------------------------------------------------------------------
CBFlush	EQU	-1

Flush:
		movem.l	a1/a2,-(a7)
		move.l	IO_UNIT(a1),a2
fLoop:
		move.l	MP_MSGLIST(a2),a1
		tst.l	(a1)
		beq.s	fRts
		bsr	AbortIO
		bra.s	fLoop

fRts:
		movem.l	(a7)+,a1/a2
		bsr	EndCommand
		rts

	END
@


36.4
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d86 3
a88 3
		bsr	StopCmd
		bsr	Flush
		bsr	Start
@


36.3
log
@for 4.x rcs
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/console/RCS/stop.asm,v 36.2 89/12/02 11:37:23 kodiak Exp Locker: kodiak $
@


36.2
log
@
@
text
@d2 1
a2 1
**	$Header$
@


36.1
log
@use XLVO macro strategy
change dd_ to cd_ in device variable prefixes
@
text
@d1 9
a9 17
	TTL    '$Header: stop.asm,v 36.0 88/09/06 19:52:24 kodiak Exp $'
**********************************************************************
*                                                                    *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.      *
*   No part of this program may be reproduced, transmitted,          *
*   transcribed, stored in retrieval system, or translated into      *
*   any language or computer language, in any form or by any         *
*   means, electronic, mechanical, magnetic, optical, chemical,      *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030                                     *
*                                                                    *
**********************************************************************
*
*	rawinput device start/stop commands
*
**********************************************************************
d11 1
a11 1
	SECTION		rawinput
d13 1
a13 1
*------ Included Files -----------------------------------------------
d15 1
a15 1
	INCLUDE		"cddata.i"
a16 1
	INCLUDE		"exec/errors.i"
d18 1
a18 1
*------ Imported Names -----------------------------------------------
d20 5
a24 1
*------ Imported Functions -------------------------------------------
d26 9
d40 2
a41 2
	XREF		AbortIO
	XREF		EndCommand
d44 1
a44 16
*------ Exported Functions -------------------------------------------

	XDEF		Invalid
	XDEF		ResetCmd
	XDEF		StopCmd
	XDEF		Start
	XDEF		Flush

	XDEF		CBInvalid
	XDEF		CBResetCmd
	XDEF		CBStopCmd
	XDEF		CBStart
	XDEF		CBFlush


*------ rawinput.device/Invalid --------------------------------------
d62 3
a64 3
		MOVEQ	#IOERR_NOCMD,D0
		BSR	EndCommand
		RTS
d66 1
a66 1
*------ rawinput.device/Reset ----------------------------------------
d86 4
a89 4
		BSR	StopCmd
		BSR	Flush
		BSR	Start
		RTS
d92 1
a92 1
*------ rawinput.device/Stop -----------------------------------------
d104 1
a104 1
*	For the rawinput, only the ReadEvent command is stopped --
d118 4
a121 4
		MOVE.L	IO_UNIT(A1),A0
		BSET	#DUB_STOPPED,du_Flags(A0)
		BSR	EndCommand
		RTS
d124 1
a124 1
*------ rawinput.device/Start ----------------------------------------
d143 3
a145 3
		MOVE.L	A1,-(A7)
		MOVE.L	IO_UNIT(A1),A0
		BCLR	#DUB_STOPPED,du_Flags(A0)
d147 3
a149 3
		MOVE.L	MP_MSGLIST(A0),A1
		TST.L	(A1)
		BEQ.S	sRts
d151 5
a155 5
		MOVE.W	IO_COMMAND(A1),D0
		LSL.W	#2,D0
		MOVE.L	cd_CmdVectors(A6),A0
		MOVE.L	0(A0,D0.W),A0
		JSR	(A0)
d158 3
a160 3
		MOVE.L	(A7)+,A1
		BSR	EndCommand
		RTS
d163 1
a163 1
*------ rawinput.device/Flush ----------------------------------------
d182 2
a183 2
		MOVEM.L	A1/A2,-(A7)
		MOVE.L	IO_UNIT(A1),A2
d185 5
a189 5
		MOVE.L	MP_MSGLIST(A2),A1
		TST.L	(A1)
		BEQ.S	fRts
		BSR	AbortIO
		BRA.S	fLoop
d192 3
a194 3
		MOVEM.L	(A7)+,A1/A2
		BSR	EndCommand
		RTS
d196 1
a196 1
		END
@


36.0
log
@*** empty log message ***
@
text
@d1 1
a1 1
	TTL    '$Header: stop.asm,v 35.0 87/10/26 11:32:39 kodiak Exp $'
d31 4
a34 4
	XREF_EXE	Disable
	XREF_EXE	Enable
	XREF_EXE	PutMsg
	XREF_EXE	ReplyMsg
d164 1
a164 1
		MOVE.L	dd_CmdVectors(A6),A0
@
