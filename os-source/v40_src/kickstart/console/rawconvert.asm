**
**	$Id: rawconvert.asm,v 36.6 91/02/14 14:55:43 darren Exp $
**
**      raw input event to ANSI translation
**
**      (C) Copyright 1985,1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**
	SECTION	console

**	Includes

	INCLUDE	"cddata.i"


**	Exports

	XDEF	RawKeyConvert


**	Imports

	XLVO	MapRawKey		; Keymap


******* console.device/RawKeyConvert *********************************
*
*    NAME
*	RawKeyConvert -- decode raw input classes
*
*    SYNOPSIS
*	actual = RawKeyConvert(event, buffer, length, keyMap)
*	D0       	       A0     A1      D1      A2
*
*	ConsoleDevice in A6 if called from Assembly Language.
*
*    FUNCTION
*	This console function converts input events of type
*	IECLASS_RAWKEY to ANSI bytes, based on the keyMap, and
*	places the result into the buffer.
*
*    INPUTS
*	event -  an InputEvent structure pointer.
*	buffer - a byte buffer large enough to hold all anticipated
*	    characters generated by this conversion.
*	length - maximum anticipation, i.e. the buffer size in bytes.
*	keyMap - a KeyMap structure pointer, or null if the default
*	    console device key map is to be used.
*
*    RESULTS
*	actual - the number of characters in the buffer, or -1 if
*	    a buffer overflow was about to occur.
*
*    ERRORS
*	if actual is -1, a buffer overflow condition was detected.
*	Not all of the characters in the buffer are valid.
*
*    NOTES
*	This function is different from standard device commands in
*	that it is a function in the console device library vectors.
*	In order to obtain a valid library base pointer for the
*	console device (a.k.a. ConsoleDevice) call
*	OpenDevice("console.device", -1, IOStdReq, 0),
*	and then grab the io_Device pointer field out of the IOStdReq
*	and use as ConsoleDevice.
*
*    BUGS
*
*    SEE ALSO
*	exec/io.h, devices/inputevent.h, devices/keymap.h
*
********************************************************************************

RawKeyConvert:
		MOVEM.L D2-D3/A3,-(A7)
		move.l	a0,a3		; save event list head
		MOVE.L	D1,D2		; save maximum buffered
		MOVEQ	#0,D3		; show nothing buffered

convertLoop:
		LINKKEY	MapRawKey
		TST.L	D0
		BMI.S	rcRts		; buffer overflow: stop now
		SUB.L	D0,D2		; fewer buffer slots remaining
		ADD.L	D0,D3		; update actual

chkNext:
		MOVE.L	(A3),D0
		MOVE.L	D0,A0
		BNE	convertLoop

		MOVE.W	D3,D0		; return actual
rcRts:
		MOVEM.L (A7)+,D2-D3/A3
		RTS

		END
