/*
******* dos.library/Close **************
*
*    NAME
*	Close -- Close an open file
*
*    SYNOPSIS
*	success = Close( file )
*	   D0             D1
*
*	BOOL Close(BPTR)
*
*    FUNCTION
*	The file specified by the file handle is closed. You must close all
*	files you explicitly opened, but you must not close inherited file
*	handles that are passed to you (each filehandle must be closed once
*	and ONLY once).  If Close() fails, the file handle is still
*	deallocated and should not be used.
*
*    INPUTS
*	file - BCPL pointer to a file handle
*
*    RESULTS
*	success - returns if Close() succeeded.  Note that it might fail
*		  depending on buffering and whatever IO must be done to
*		  close a file being written to.  NOTE: this return value
*		  did not exist before V36! 
*
*    SEE ALSO
*	Open(), OpenFromLock()
*
****************************************************************************
*/


/*
******* dos.library/CreateDir **************
*
*    NAME
*	CreateDir -- Create a new directory
*
*    SYNOPSIS
*	lock = CreateDir( name )
*	D0		  D1
*
*	BPTR CreateDir(STRPTR)
*
*    FUNCTION
*	CreateDir creates a new directory with the specified name. An error
*	is returned if it fails.  Directories can only be created on
*	devices which support them, e.g. disks.  CreateDir returns an
*	exclusive lock on the new directory if it succeeds.
*
*    INPUTS
*	name - pointer to a null-terminated string
*
*    RESULTS
*	lock - BCPL pointer to a lock or NULL for failure.
*
*    SEE ALSO
*	Lock(), UnLock()
*
****************************************************************************
*/


/*
******* dos.library/CreateProc **************
*
*    NAME
*
*	CreateProc -- Create a new process
*
*    SYNOPSIS
*	process = CreateProc( name, pri, seglist, stackSize )
*	D0		      D1    D2	 D3	  D4
*
*	struct MsgPort *CreateProc(STRPTR, LONG, BPTR, LONG)
*
*    FUNCTION
*	CreateProc() creates a new AmigaDOS process of name 'name'.  AmigaDOS
*	processes are a superset of exec tasks.
*
*	A seglist, as returned by LoadSeg(), is passed as 'seglist'.
*	This represents a section of code which is to be run as a new
*	process. The code is entered at the first hunk in the segment list,
*	which should contain suitable initialization code or a jump to
*	such.  A process control structure is allocated from memory and
*	initialized.  If you wish to fake a seglist (that will never
*	have DOS UnLoadSeg() called on it), use this code:
*
*		    DS.L    0	;Align to longword
*		    DC.L    16	;Segment "length" (faked)
*		    DC.L    0	;Pointer to next segment
*		    ...start of code...
*
*	The size of the root stack upon activation is passed as
*	'stackSize'.  'pri' specifies the required priority of the new
*	process.  The result will be the process msgport address of the new
*	process, or zero if the routine failed.  The argument 'name'
*	specifies the new process name.  A zero return code indicates
*	error.
*
*	The seglist passed to CreateProc() is not freed when it exits; it
*	is up to the parent process to free it, or for the code to unload
*	itself.
*
*	Under V36 and later, you probably should use CreateNewProc() instead.
*
*    INPUTS
*	name      - pointer to a null-terminated string
*	pri       - signed long (range -128 to +127)
*	seglist   - BCPL pointer to a seglist
*	stackSize - integer (must be a multiple of 4 bytes)
*
*    RESULTS
*	process   - pointer to new process msgport
*
*    SEE ALSO
*	CreateNewProc(), LoadSeg(), UnLoadSeg()
*
****************************************************************************
*/


/*
******* dos.library/CurrentDir **************
*
*    NAME
*	CurrentDir -- Make a directory lock the current directory
*
*    SYNOPSIS
*	oldLock = CurrentDir( lock )
*	D0		      D1
*
*	BPTR CurrentDir(BPTR)
*
*    FUNCTION
*	CurrentDir() causes a directory associated with a lock to be made
*	the current directory.	The old current directory lock is returned.
*
*	A value of zero is a valid result here, this 0 lock represents the
*	root of file system that you booted from.
*
*	Any call that has to Open() or Lock() files (etc) requires that
*	the current directory be a valid lock or 0.
*
*    INPUTS
*	lock - BCPL pointer to a lock
*
*    RESULTS
*	oldLock - BCPL pointer to a lock
*
*    SEE ALSO
*	Lock(), UnLock(), Open(), DupLock()
*
****************************************************************************
*/


/*
******* dos.library/DateStamp **************
*
*    NAME
*	DateStamp -- Obtain the date and time in internal format
*
*    SYNOPSIS
*	ds = DateStamp( ds );
*	D0		D1
*
*	struct DateStamp *DateStamp(struct DateStamp *)
*
*    FUNCTION
*	DateStamp() takes a structure of three longwords that is set to the
*	current time.  The first element in the vector is a count of the
*	number of days.  The second element is the number of minutes elapsed
*	in the day.  The third is the number of ticks elapsed in the current
*	minute.  A tick happens 50 times a second.  DateStamp() ensures that
*	the day and minute are consistent.  All three elements are zero if
*	the date is unset. DateStamp() currently only returns even
*	multiples of 50 ticks.  Therefore the time you get is always an even
*	number of ticks.
*
*	Time is measured from Jan 1, 1978.
*
*    INPUTS
*	ds - pointer a struct DateStamp
*
*    RESULTS
*	The array is filled as described and returned (for pre-V36 
*	compabability).
*
*    SEE ALSO
*	DateToStr(), StrToDate(), SetFileDate(), CompareDates()
*
****************************************************************************
*/


/*
******* dos.library/Delay ***************************************
*
*    NAME
*	Delay -- Delay a process for a specified time
*
*    SYNOPSIS
*	Delay( ticks )
*	       D1
*
*	void Delay(ULONG)
*
*    FUNCTION
*	The argument 'ticks' specifies how many ticks (50 per second) to
*	wait before returning control.
*
*    INPUTS
*	ticks - integer
*
*    BUGS
*	Due to a bug in the timer.device in V1.2/V1.3, specifying a timeout
*	of zero for Delay() can cause the unreliable timer & floppy disk
*	operation.  This is fixed in V36 and later.
*
*    SEE ALSO
*
****************************************************************************
*/


/*
******* dos.library/DeleteFile **************
*
*    NAME
*	DeleteFile -- Delete a file or directory
*
*    SYNOPSIS
*	success = DeleteFile( name )
*	D0		      D1
*
*	BOOL DeleteFile(STRPTR)
*
*    FUNCTION
*	This attempts to delete the file or directory specified by 'name'.
*	An error is returned if the deletion fails. Note that all the files
*	within a directory must be deleted before the directory itself can
*	be deleted.
*
*    INPUTS
*	name - pointer to a null-terminated string
*
*    RESULTS
*	success - boolean
*
*    SEE ALSO
*
****************************************************************************
*/


/*
******* dos.library/DeviceProc **************
*
*    NAME
*	DeviceProc -- Return the process MsgPort of specific I/O handler
*
*    SYNOPSIS
*	process = DeviceProc( name )
*	D0		      D1
*
*	struct MsgPort *DeviceProc (STRPTR)
*
*    FUNCTION
*	DeviceProc() returns the process identifier of the process which
*	handles the device associated with the specified name. If no
*	process handler can be found then the result is zero. If the name
*	refers to an assign then a directory lock is returned in IoErr().
*	This lock should not be UnLock()ed or Examine()ed (if you wish to do
*	so, DupLock() it first).
*
*    BUGS
*	In V36, if you try to DeviceProc() something relative to an assign
*	made with AssignPath(), it will fail.  This is because there's no
*	way to know when to unlock the lock.  If you're writing code for
*	V36 or later, it is highly advised you use GetDeviceProc() instead,
*	or make your code conditional on V36 to use GetDeviceProc()/
*	FreeDeviceProc().
*
*    SEE ALSO
*	GetDeviceProc(), FreeDeviceProc(), DupLock(), UnLock(), Examine()
*
****************************************************************************
*/


/*
******* dos.library/DupLock **************
*
*    NAME
*	DupLock -- Duplicate a lock
*
*    SYNOPSIS
*	lock = DupLock( lock )
*	D0		D1
*
*	BPTR DupLock(BPTR)
*
*    FUNCTION
*	DupLock() is passed a shared filing system lock.  This is the ONLY
*	way to obtain a duplicate of a lock... simply copying is not
*	allowed.
*
*	Another lock to the same object is then returned.  It is not
*	possible to create a copy of a exclusive lock.
*
*	A zero return indicates failure.
*
*    INPUTS
*	lock - BCPL pointer to a lock
*
*    RESULTS
*	newLock - BCPL pointer to a lock
*
*    SEE ALSO
*	Lock(), UnLock(), DupLockFromFH(), ParentOfFH()
*
****************************************************************************
*/


/*
******* dos.library/Examine **************
*
*    NAME
*	Examine -- Examine a directory or file associated with a lock
*
*    SYNOPSIS
*	success = Examine( lock, FileInfoBlock )
*	D0		    D1	      D2
*
*	BOOL Examine(BPTR,struct FileInfoBlock *)
*
*    FUNCTION
*	Examine() fills in information in the FileInfoBlock concerning the
*	file or directory associated with the lock. This information
*	includes the name, size, creation date and whether it is a file or
*	directory.  FileInfoBlock must be longword aligned.  Examine() gives
*	a return code of zero if it fails.
*
*	You may make a local copy of the FileInfoBlock, as long as it is
*	never passed to ExNext().
*
*    INPUTS
*	lock	  - BCPL pointer to a lock
*	infoBlock - pointer to a FileInfoBlock (MUST be longword aligned)
*
*    RESULTS
*	success - boolean
*
*    SPECIAL NOTE
*	FileInfoBlock must be longword-aligned.  AllocDosObject() will
*	allocate them correctly for you.
*
*    SEE ALSO
*	Lock(), UnLock(), ExNext(), ExamineFH(), <dos/dos.h>, AllocDosObject(),
*	ExAll()
*
****************************************************************************
*/


/*
******* dos.library/Execute **************
*
*    NAME
*	Execute -- Execute a CLI command
*
*    SYNOPSIS
*	success = Execute( commandString, input, output )
*	D0		   D1		  D2	 D3
*
*	BOOL Execute(STRPTR, BPTR, BPTR)
*
*    FUNCTION
*	This function attempts to execute the string commandString as a
*	Shell command and arguments. The string can contain any valid input
*	that you could type directly in a Shell, including input and output
*	redirection using < and >.  Note that Execute() doesn't return until
*	the command(s) in commandstring have returned.
*
*	The input file handle will normally be zero, and in this case
*	Execute() will perform whatever was requested in the commandString
*	and then return. If the input file handle is nonzero then after the
*	(possibly empty) commandString is performed subsequent input is read
*	from the specified input file handle until end of that file is
*	reached.
*
*	In most cases the output file handle must be provided, and is used
*	by the Shell commands as their output stream unless output
*	redirection was specified. If the output file handle is set to zero
*	then the current window, normally specified as *, is used. Note
*	that programs running under the Workbench do not normally have a
*	current window.
*
*	Execute() may also be used to create a new interactive Shell process
*	just like those created with the NewShell command. In order to do
*	this you would call Execute() with an empty commandString, and pass
*	a file handle relating to a new window as the input file handle.
*	The output file handle would be set to zero. The Shell will read
*	commands from the new window, and will use the same window for
*	output. This new Shell window can only be terminated by using the
*	EndCLI command.
*
*	Under V37, if an input filehandle is passed, and it's either
*	interactive or a NIL: filehandle, the pr_ConsoleTask of the new
*	process will be set to that filehandle's process (the same applies
*	to SystemTagList()).
*
*	For this command to work the program Run must be present in C: in
*	versions before V36 (except that in 1.3.2 and any later 1.3 versions,
*	the system first checks the resident list for Run).
*
*    INPUTS
*	commandString - pointer to a null-terminated string
*	input	      - BCPL pointer to a file handle
*	output	      - BCPL pointer to a file handle
*
*    RESULTS
*	success - BOOLEAN indicating whether Execute was successful
*		  in finding and starting the specified program.  Note this
*		  is NOT the return code of the command(s).
*    SEE ALSO
*	SystemTagList(), NewShell, EndCLI, Run
*
****************************************************************************
*/


/*
******* dos.library/Exit **************
*
*    NAME
*	Exit -- Exit from a program
*
*    SYNOPSIS
*	Exit( returnCode )
*	      D1
*
*	void Exit(LONG)
*
*    FUNCTION
*	Exit() is currently for use with programs written as if they
*	were BCPL programs.  This function is not normally useful for
*	other purposes.
*
*	In general, therefore, please DO NOT CALL THIS FUNCTION!
*
*	In order to exit, C programs should use the C language exit()
*	function (note the lower case letter "e").  Assembly programs should
*	place a return code in D0, and execute an RTS instruction with
*	their original stack ptr.
*
*    IMPLEMENTATION
*	The action of Exit() depends on whether the program which called it
*	is running as a command under a CLI or not. If the program is
*	running under the CLI the command finishes and control reverts to
*	the CLI. In this case, returnCode is interpreted as the return code
*	from the program.
*
*	If the program is running as a distinct process, Exit() deletes the
*	process and release the space associated with the stack, segment
*	list and process structure.
*
*    INPUTS
*	returnCode - integer
*
*    SEE ALSO
*	CreateProc(), CreateNewProc()
*
****************************************************************************
*/


/*
******* dos.library/ExNext **************
*
*    NAME
*	ExNext -- Examine the next entry in a directory
*
*    SYNOPSIS
*	success = ExNext( lock, FileInfoBlock )
*	D0		   D1	     D2
*
*	BOOL ExNext(BPTR, struct FileInfoBlock *)
*
*    FUNCTION
*	This routine is passed a directory lock and a FileInfoBlock that
*	have been initialized by a previous call to Examine(), or updated
*	by a previous call to ExNext().  ExNext() gives a return code of zero
*	on failure.  The most common cause of failure is reaching the end
*	of the list of files in the owning directory.  In this case, IoErr
*	will return ERROR_NO_MORE_ENTRIES and a good exit is appropriate.
*
*	So, follow these steps to examine a directory:
*	1) Pass a Lock and a FileInfoBlock to Examine().  The lock must
*	   be on the directory you wish to examine.
*	2) Pass ExNext() the same lock and FileInfoBlock.
*	3) Do something with the information returned in the FileInfoBlock.
*	   Note that the fib_DirEntryType field is positive for directories,
*	   negative for files.
*	4) Keep calling ExNext() until it returns FALSE.  Check IoErr()
*	   to ensure that the reason for failure was ERROR_NO_MORE_ENTRIES.
*
*	Note: if you wish to recursively scan the file tree and you find
*	another directory while ExNext()ing you must Lock that directory and
*	Examine() it using a new FileInfoBlock.  Use of the same
*	FileInfoBlock to enter a directory would lose important state
*	information such that it will be impossible to continue scanning
*	the parent directory.  While it is permissible to UnLock() and Lock()
*	the parent directory between ExNext() calls, this is NOT recommended.
*	Important state information is associated with the parent lock, so
*	if it is freed between ExNext() calls this information has to be
*	rebuilt on each new ExNext() call, and will significantly slow down
*	directory scanning.
*
*	It is NOT legal to Examine() a file, and then to ExNext() from that
*	FileInfoBlock.	You may make a local copy of the FileInfoBlock, as
*	long as it is never passed back to the operating system.
*
*    INPUTS
*	lock - BCPL pointer to a lock originally used for the Examine() call
*	infoBlock - pointer to a FileInfoBlock used on the previous Examine()
*		    or ExNext() call.
*
*    RESULTS
*	success - boolean
*
*    SPECIAL NOTE
*	FileInfoBlock must be longword-aligned.  AllocDosObject() will
*	allocate them correctly for you.
*
*    SEE ALSO
*	Examine(), Lock(), UnLock(), IoErr(), ExamineFH(), AllocDosObject(),
*	ExAll()
*
****************************************************************************
*/


/*
******* dos.library/Info **************
*
*    NAME
*	Info -- Returns information about the disk
*
*    SYNOPSIS
*	success = Info( lock, parameterBlock )
*	D0		D1    D2
*
*	BOOL Info(BPTR, struct InfoData *)
*
*    FUNCTION
*	Info() can be used to find information about any disk in use.
*	'lock' refers to the disk, or any file on the disk. The parameter
*	block is returned with information about the size of the disk,
*	number of free blocks and any soft errors.
*
*    INPUTS
*	lock	       - BCPL pointer to a lock
*	parameterBlock - pointer to an InfoData structure
*			 (longword aligned)
*
*    RESULTS
*	success - boolean
*
*    SPECIAL NOTE:
*	Note that InfoData structure must be longword aligned.
*
****************************************************************************
*/


/*
******* dos.library/IoErr **************
*
*    NAME
*	IoErr -- Return extra information from the system
*
*    SYNOPSIS
*	error = IoErr()
*	  D0
*
*	LONG IoErr(void)
*
*    FUNCTION
*	Most I/O routines return zero to indicate an error. When this 
*	happens (or whatever the defined error return for the routine)
*	this routine may be called to determine more information. It is
*	also used in some routines to pass back a secondary result.
*
*	Note: there is no guarantee as to the value returned from IoErr()
*	after a successful operation, unless to specified by the routine.
*
*    RESULTS
*	error - integer
*
*    SEE ALSO
*	Fault(), PrintFault(), SetIoErr()
*
****************************************************************************
*/


/*
******* dos.library/Input **************
*
*    NAME
*	Input -- Identify the program's initial input file handle
*
*    SYNOPSIS
*	file = Input()
*	D0
*
*	BPTR Input(void)
*
*    FUNCTION
*	Input() is used to identify the initial input stream allocated when
*	the program was initiated.  Never close the filehandle returned by
*	Input!
*
*    RESULTS
*	file - BCPL pointer to a file handle
*
*    SEE ALSO
*	Output(), SelectInput()
*
****************************************************************************
*/


/*
******* dos.library/IsInteractive **************
*
*    NAME
*	IsInteractive -- Discover whether a file is "interactive"
*
*    SYNOPSIS
*	status = IsInteractive( file )
*	D0			D1
*
*	BOOL IsInteractive(BPTR)
*
*    FUNCTION
*	The return value 'status' indicates whether the file associated
*	with the file handle 'file' is connected to a virtual terminal.
*
*    INPUTS
*	file - BCPL pointer to a file handle
*
*    RESULTS
*	status - boolean
*
*    SEE ALSO
*
****************************************************************************
*/


/*
******* dos.library/LoadSeg **************
*
*    NAME
*	LoadSeg -- Scatterload a loadable file into memory
*
*    SYNOPSIS
*	seglist = LoadSeg( name )
*	D0		   D1
*
*	BPTR LoadSeg(STRPTR)
*
*    FUNCTION
*	The file 'name' should be a load module produced by the linker.
*	LoadSeg() scatterloads the CODE, DATA and BSS segments into memory,
*	chaining together the segments with BPTR's on their first words.
*	The end of the chain is indicated by a zero.  There can be any number
*	of segments in a file.  All necessary relocation is handled by
*	LoadSeg().
*
*	In the event of an error any blocks loaded will be unloaded and a
*	NULL result returned.
*
*	If the module is correctly loaded then the output will be a pointer
*	at the beginning of the list of blocks. Loaded code is unloaded via
*	a call to UnLoadSeg().
*
*    INPUTS
*	name - pointer to a null-terminated string
*
*    RESULTS
*	seglist - BCPL pointer to a seglist
*
*    SEE ALSO
*	UnLoadSeg(), InternalLoadSeg(), InternalUnLoadSeg(), CreateProc(),
*	CreateNewProc(), NewLoadSeg().
*
****************************************************************************
*/


/*
******* dos.library/Lock **************
*
*    NAME
*	Lock -- Lock a directory or file
*
*    SYNOPSIS
*	lock  = Lock( name, accessMode )
*	D0	      D1	D2
*
*	BPTR Lock(STRPTR, LONG)
*
*    FUNCTION
*	A filing system lock on the file or directory 'name' is returned if
*	possible.
*
*	If the accessMode is ACCESS_READ, the lock is a shared read lock;
*	if the accessMode is ACCESS_WRITE then it is an exclusive write
*	lock.  Do not use random values for mode.
*
*	If Lock() fails (that is, if it cannot obtain a filing system lock
*	on the file or directory) it returns a zero.
*
*	Tricky assumptions about the internal format of a lock are unwise,
*	as are any attempts to use the fl_Link or fl_Access fields.
*
*    INPUTS
*	name	   - pointer to a null-terminated string
*	accessMode - integer
*
*    RESULTS
*	lock - BCPL pointer to a lock
*
*    SEE ALSO
*	UnLock(), DupLock(), ChangeMode(), NameFromLock(), DupLockFromFH()
*
****************************************************************************
*/


/*
******* dos.library/Open **************
*
*    NAME
*	Open -- Open a file for input or output
*
*    SYNOPSIS
*	file = Open( name, accessMode )
*	D0	     D1    D2
*
*	BPTR Open(STRPTR, LONG)
*
*    FUNCTION
*	The named file is opened and a file handle returned.  If the
*	accessMode is MODE_OLDFILE, an existing file is opened for reading
*	or writing. If the value is MODE_NEWFILE, a new file is created for
*	writing. MODE_READWRITE opens a file with an shared lock, but
*	creates it if it didn't exist.  Open types are documented in the
*	<dos/dos.h> or <libraries/dos.h> include file.
*
*	The 'name' can be a filename (optionally prefaced by a device
*	name), a simple device such as NIL:, a window specification such as
*	CON: or RAW: followed by window parameters, or "*", representing the
*	current window.  Note that as of V36, "*" is obsolete, and CONSOLE:
*	should be used instead.
*
*	If the file cannot be opened for any reason, the value returned
*	will be zero, and a secondary error code will be available by
*	calling the routine IoErr().
*
*    INPUTS
*	name	   - pointer to a null-terminated string
*	accessMode - integer
*
*    RESULTS
*	file - BCPL pointer to a file handle
*
*    SEE ALSO
*	Close(), ChangeMode(), NameFromFH(), ParentOfFH(), ExamineFH()
*
****************************************************************************
*/


/*
******* dos.library/Output **************
*
*    NAME
*	Output -- Identify the programs' initial output file handle
*
*    SYNOPSIS
*	file = Output()
*	D0
*
*	BPTR Output(void)
*
*    FUNCTION
*	Output() is used to identify the initial output stream allocated
*	when the program was initiated.  Never close the filehandle returned
*	by Output().
*
*    RESULTS
*	file - BCPL pointer to a file handle
*
*    SEE ALSO
*	Input()
*
****************************************************************************
*/


/*
******* dos.library/ParentDir **************
*
*    NAME
*	ParentDir -- Obtain the parent of a directory or file
*
*    SYNOPSIS
*	newlock = ParentDir( lock )
*	D0		     D1
*
*	BPTR ParentDir(BPTR)
*
*    FUNCTION
*	The argument 'lock' is associated with a given file or directory.
*	ParentDir() returns 'newlock' which is associated the parent
*	directory of 'lock'.
*
*	Taking the ParentDir() of the root of the current filing system
*	returns a NULL (0) lock.  Note this 0 lock represents the root of
*	file system that you booted from (which is, in effect, the parent
*	of all other file system roots.)
*
*    INPUTS
*	lock - BCPL pointer to a lock
*
*    RESULTS
*	newlock - BCPL pointer to a lock
*
*    SEE ALSO
*	Lock(), DupLock(), UnLock(), ParentOfFH(), DupLockFromFH()
*
****************************************************************************
*/


/*
******* dos.library/Read **************
*
*    NAME
*	Read -- Read bytes of data from a file
*
*    SYNOPSIS
*	actualLength = Read( file, buffer, length )
*	D0		     D1    D2	   D3
*
*	LONG Read(BPTR, void *, LONG)
*
*    FUNCTION
*	Data can be copied using a combination of Read() and Write().
*	Read() reads bytes of information from an opened file (represented
*	here by the argument 'file') into the buffer given. The argument
*	'length' is the length of the buffer given.
*
*	The value returned is the length of the information actually read.
*	So, when 'actualLength' is greater than zero, the value of
*	'actualLength' is the the number of characters read. Usually Read
*	will try to fill up your buffer before returning. A value of zero
*	means that end-of-file has been reached. Errors are indicated by a
*	value of -1.
*
*	Note: this is an unbuffered routine (the request is passed directly
*	to the filesystem.)  Buffered I/O is more efficient for small
*	reads and writes; see FGetC().
*
*    INPUTS
*	file - BCPL pointer to a file handle
*	buffer - pointer to buffer
*	length - integer
*
*    RESULTS
*	actualLength - integer
*
*    SEE ALSO
*	Open(), Close(), Write(), Seek(), FGetC()
*
****************************************************************************
*/


/*
******* dos.library/Rename **************
*
*    NAME
*	Rename -- Rename a directory or file
*
*    SYNOPSIS
*	success = Rename( oldName, newName )
*	D0		  D1	   D2
*
*	BOOL Rename(STRPTR, STRPTR)
*
*    FUNCTION
*	Rename() attempts to rename the file or directory specified as
*	'oldName' with the name 'newName'. If the file or directory
*	'newName' exists, Rename() fails and returns an error. Both
*	'oldName' and the 'newName' can contain a directory specification.
*	In this case, the file will be moved from one directory to another.
*
*	Note: it is impossible to Rename() a file from one volume to
*	another.
*
*    INPUTS
*	oldName - pointer to a null-terminated string
*	newName - pointer to a null-terminated string
*
*    RESULTS
*	success - boolean
*
*    SEE ALSO
*	Relabel()
*
****************************************************************************
*/


/*
******* dos.library/Seek **************
*
*    NAME
*	Seek -- Set the current position for reading and writing
*
*    SYNOPSIS
*	oldPosition = Seek( file, position, mode )
*	D0		    D1	  D2	    D3
*
*	LONG Seek(BPTR, LONG, LONG)
*
*    FUNCTION
*	Seek() sets the read/write cursor for the file 'file' to the
*	position 'position'. This position is used by both Read() and
*	Write() as a place to start reading or writing. The result is the
*	current absolute position in the file, or -1 if an error occurs, in
*	which case IoErr() can be used to find more information. 'mode' can
*	be OFFSET_BEGINNING, OFFSET_CURRENT or OFFSET_END. It is used to
*	specify the relative start position. For example, 20 from current
*	is a position 20 bytes forward from current, -20 is 20 bytes back
*	from current.
*
*	So that to find out where you are, seek zero from current. The end
*	of the file is a Seek() positioned by zero from end. You cannot
*	Seek() beyond the end of a file.
*
*    INPUTS
*	file - BCPL pointer to a file handle
*	position - integer
*	mode - integer
*
*    RESULTS
*	oldPosition - integer
*
*    BUGS
*	The V36 and V37 ROM filesystem (and V36/V37 l:fastfilesystem)
*	returns the current position instead of -1 on an error.  It sets
*	IoErr() to 0 on success, and an error code on an error.
*
*    SEE ALSO
*	Read(), Write(), SetFileSize()
*
****************************************************************************
*/


/*
******* dos.library/SetComment **************
*
*    NAME
*	SetComment -- Change a files' comment string
*
*    SYNOPSIS
*	success = SetComment( name, comment )
*	D0		      D1    D2
*
*	BOOL SetComment(STRPTR, STRPTR)
*
*    FUNCTION
*	SetComment() sets a comment on a file or directory. The comment is
*	a pointer to a null-terminated string of up to 80 characters in the
*	current ROM filesystem (and RAM:).  Note that not all filesystems
*	will support comments (for example, NFS usually will not), or the
*	size of comment supported may vary.
*
*    INPUTS
*	name    - pointer to a null-terminated string
*	comment - pointer to a null-terminated string
*
*    RESULTS
*	success - boolean
*
*    SEE ALSO
*	Examine(), ExNext(), SetProtection()
*
****************************************************************************
*/


/*
******* dos.library/SetProtection **************
*
*    NAME
*	SetProtection -- Set protection for a file or directory
*
*    SYNOPSIS
*	success = SetProtection( name, mask )
*	D0			 D1    D2
*
*	BOOL SetProtection (STRPTR, LONG)
*
*    FUNCTION
*	SetProtection() sets the protection attributes on a file or
*	directory.  See <dos/dos.h> for a listing of protection bits.
*
*	Before V36, the ROM filesystem didn't respect the Read and Write
*	bits.  In V36 or later and in the FFS, the Read and Write
*	bits are respected.
*
*	The archive bit should be cleared by the filesystem whenever the file
*	is changed.  Backup utilities will generally set the bit after
*	backing up each file.
*
*	The V36 Shell looks at the execute bit, and will refuse to execute
*	a file if it is set.
*
*	Other bits will be defined in the <dos/dos.h> include files.  Rather
*	than referring to bits by number you should use the definitions in
*	<dos/dos.h>.
*
*    INPUTS
*	name - pointer to a null-terminated string
*	mask - the protection mask required
*
*    RESULTS
*	success - boolean
*
*    SEE ALSO
*	SetComment(), Examine(), ExNext(), <dos/dos.h>
*
****************************************************************************
*/


/*
******* dos.library/UnLoadSeg **************
*
*    NAME
*	UnLoadSeg -- Unload a seglist previously loaded by LoadSeg()
*
*    SYNOPSIS
*	success = UnLoadSeg( seglist )
*	D0		       D1
*
*	BOOL UnLoadSeg(BPTR)
*
*    FUNCTION
*	Unload a seglist loaded by LoadSeg().  'seglist' may be zero.
*	Overlaid segments will have all needed cleanup done, including
*	closing files.
*
*    INPUTS
*	seglist - BCPL pointer to a segment identifier
*
*    RESULTS
*	success - returns 0 if a NULL seglist was passed or if it failed
*		  to close an overlay file.  NOTE: this function returned
*		  a random value before V36!
*
*    SEE ALSO
*	LoadSeg(), InternalLoadSeg(), InternalUnLoadSeg()
*
****************************************************************************
*/


/*
******* dos.library/UnLock **************
*
*    NAME
*	UnLock -- Unlock a directory or file
*
*    SYNOPSIS
*	UnLock( lock )
*		D1
*
*	void UnLock(BPTR)
*
*    FUNCTION
*	The filing system lock (obtained from Lock(), DupLock(), or
*	CreateDir()) is removed and deallocated.
*
*    INPUTS
*	lock - BCPL pointer to a lock
*
*    NOTE
*	passing zero to UnLock() is harmless
*
*    SEE ALSO
*	Lock(), DupLock(), ParentOfFH(), DupLockFromFH()
*
****************************************************************************
*/


/*
******* dos.library/WaitForChar **************
*
*    NAME
*	WaitForChar -- Determine if chars arrive within a time limit
*
*    SYNOPSIS
*	status = WaitForChar( file, timeout )
*	D0		      D1    D2
*
*	BOOL WaitForChar(BPTR, LONG)
*
*    FUNCTION
*	If a character is available to be read from 'file' within the
*	time (in microseconds) indicated by 'timeout', WaitForChar()
*	returns -1 (TRUE). If a character is available, you can use Read()
*	to read it.  Note that WaitForChar() is only valid when the I/O
*	stream is connected to a virtual terminal device. If a character is
*	not available within 'timeout', a 0 (FALSE) is returned.
*
*    BUGS
*	Due to a bug in the timer.device in V1.2/V1.3, specifying a timeout
*	of zero for WaitForChar() can cause the unreliable timer & floppy
*	disk operation.
*
*    INPUTS
*	file - BCPL pointer to a file handle
*	timeout - integer
*
*    RESULTS
*	status - boolean
*
*    SEE ALSO
*	Read(), FGetC()
*
****************************************************************************
*/


/*
******* dos.library/Write **************
*
*    NAME
*	Write -- Write bytes of data to a file
*
*    SYNOPSIS
*	returnedLength =  Write( file, buffer, length )
*	D0			 D1    D2      D3
*
*	LONG Write (BPTR, void *, LONG)
*
*    FUNCTION
*	Write() writes bytes of data to the opened file 'file'. 'length'
*	indicates the length of data to be transferred; 'buffer' is a
*	pointer to the buffer. The value returned is the length of
*	information actually written. So, when 'length' is greater than
*	zero, the value of 'length' is the number of characters written.
*	Errors are indicated by a value of -1.
*
*	Note: this is an unbuffered routine (the request is passed directly
*	to the filesystem.)  Buffered I/O is more efficient for small
*	reads and writes; see FPutC().
*
*    INPUTS
*	file - BCPL pointer to a file handle
*	buffer - pointer to the buffer
*	length - integer
*
*    RESULTS
*	returnedLength - integer
*
*    SEE ALSO
*	Read(), Seek(), Open(), Close(), FPutC
*
****************************************************************************
*/

