head     36.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.16
date     91.05.02.22.25.13;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     91.01.27.03.23.03;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     91.01.27.03.18.24;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     91.01.27.02.40.51;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     91.01.24.00.24.57;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     91.01.17.14.23.22;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.08.28.02.06.30;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.07.25.15.23.12;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.07.12.03.22.09;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.03.04.49.25;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.01.30.17.17.46;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.01.29.02.13.43;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.09.02.11.59;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.01.08.31.13;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.22.03.39.40;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.14.01.58.47;  author jesup;  state Exp;
branches ;
next     ;


desc
@Include for pattern.asm
@


36.16
log
@Added APF_FollowHLinks
@
text
@#ifndef DOS_DOSASL_H
#define DOS_DOSASL_H
/*
**
**	$Id: dosasl.h,v 36.15 91/01/27 03:23:03 jesup Exp Locker: jesup $
**
**	Pattern-matching structure definitions
**
**	(C) Copyright 1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
*/

#ifndef EXEC_LIBRARIES_H
#include <exec/libraries.h>
#endif

#ifndef EXEC_LISTS_H
#include <exec/lists.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif


/***********************************************************************
************************ PATTERN MATCHING ******************************
************************************************************************

* structure expected by MatchFirst, MatchNext.
* Allocate this structure and initialize it as follows:
*
* Set ap_BreakBits to the signal bits (CDEF) that you want to take a
* break on, or NULL, if you don't want to convenience the user.
*
* If you want to have the FULL PATH NAME of the files you found,
* allocate a buffer at the END of this structure, and put the size of
* it into ap_Strlen.  If you don't want the full path name, make sure
* you set ap_Strlen to zero.  In this case, the name of the file, and stats
* are available in the ap_Info, as per usual.
*
* Then call MatchFirst() and then afterwards, MatchNext() with this structure.
* You should check the return value each time (see below) and take the
* appropriate action, ultimately calling MatchEnd() when there are
* no more files and you are done.  You can tell when you are done by
* checking for the normal AmigaDOS return code ERROR_NO_MORE_ENTRIES.
*
*/

struct AnchorPath {
	struct AChain	*ap_Base; 	/* pointer to first anchor */
#define	ap_First ap_Base
	struct AChain	*ap_Last; 	/* pointer to last anchor */
#define ap_Current ap_Last
	LONG	ap_BreakBits;	/* Bits we want to break on */
	LONG	ap_FoundBreak;	/* Bits we broke on. Also returns ERROR_BREAK */
	BYTE	ap_Flags;	/* New use for extra word. */
	BYTE	ap_Reserved;
	WORD	ap_Strlen;	/* This is what ap_Length used to be */
#define	ap_Length ap_Flags	/* Old compatability for LONGWORD ap_Length */
	struct	FileInfoBlock ap_Info;
	UBYTE	ap_Buf[1];	/* Buffer for path name, allocated by user */
	/* FIX! */
};


#define	APB_DOWILD	0	/* User option ALL */
#define APF_DOWILD	1

#define	APB_ITSWILD	1	/* Set by MatchFirst, used by MatchNext	 */
#define APF_ITSWILD	2	/* Application can test APB_ITSWILD, too */
				/* (means that there's a wildcard	 */
				/* in the pattern after calling		 */
				/* MatchFirst).				 */

#define	APB_DODIR	2	/* Bit is SET if a DIR node should be */
#define APF_DODIR	4	/* entered. Application can RESET this */
				/* bit after MatchFirst/MatchNext to AVOID */
				/* entering a dir. */

#define	APB_DIDDIR	3	/* Bit is SET for an "expired" dir node. */
#define APF_DIDDIR	8

#define	APB_NOMEMERR	4	/* Set on memory error */
#define APF_NOMEMERR	16

#define	APB_DODOT	5	/* If set, allow conversion of '.' to */
#define APF_DODOT	32	/* CurrentDir */

#define APB_DirChanged	6	/* ap_Current->an_Lock changed */
#define APF_DirChanged	64	/* since last MatchNext call */

#define APB_FollowHLinks 7	/* follow hardlinks on DODIR - defaults   */
#define APF_FollowHLinks 128	/* to not following hardlinks on a DODIR. */


struct AChain {
	struct AChain *an_Child;
	struct AChain *an_Parent;
	BPTR	an_Lock;
	struct FileInfoBlock an_Info;
	BYTE	an_Flags;
	UBYTE	an_String[1];	/* FIX!! */
};

#define	DDB_PatternBit	0
#define	DDF_PatternBit	1
#define	DDB_ExaminedBit	1
#define	DDF_ExaminedBit	2
#define	DDB_Completed   2
#define	DDF_Completed   4
#define	DDB_AllBit	3
#define	DDF_AllBit	8
#define	DDB_Single	4
#define	DDF_Single	16

/*
 * Constants used by wildcard routines, these are the pre-parsed tokens
 * referred to by pattern match.  It is not necessary for you to do
 * anything about these, MatchFirst() MatchNext() handle all these for you.
 */

#define P_ANY		0x80	/* Token for '*' or '#?  */
#define P_SINGLE	0x81	/* Token for '?' */
#define P_ORSTART	0x82	/* Token for '(' */
#define P_ORNEXT	0x83	/* Token for '|' */
#define P_OREND 	0x84	/* Token for ')' */
#define P_NOT		0x85	/* Token for '~' */
#define P_NOTEND	0x86	/* Token for */
#define P_NOTCLASS	0x87	/* Token for '^' */
#define P_CLASS 	0x88	/* Token for '[]' */
#define P_REPBEG	0x89	/* Token for '[' */
#define P_REPEND	0x8A	/* Token for ']' */
#define P_STOP		0x8B	/* token to force end of evaluation */

/* Values for an_Status, NOTE: These are the actual bit numbers */

#define COMPLEX_BIT	1	/* Parsing complex pattern */
#define EXAMINE_BIT	2	/* Searching directory */

/*
 * Returns from MatchFirst(), MatchNext()
 * You can also get dos error returns, such as ERROR_NO_MORE_ENTRIES,
 * these are in the dos.h file.
 */

#define ERROR_BUFFER_OVERFLOW	303	/* User or internal buffer overflow */
#define ERROR_BREAK		304	/* A break character was received */
#define ERROR_NOT_EXECUTABLE	305	/* A file has E bit cleared */

#endif /* DOS_DOSASL_H */
@


36.15
log
@Added comments on ITSWILD
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.14 91/01/27 03:18:24 jesup Exp Locker: jesup $
d93 3
@


36.14
log
@Fixed refs to ap_Length to ap_Strlen
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.13 91/01/27 02:40:51 jesup Exp Locker: jesup $
d71 1
a71 1
#define	APB_ITSWILD	1	/* Set by MatchFirst, used by MatchNext */
d73 3
@


36.13
log
@Fixed some typos
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.12 91/01/24 00:24:57 jesup Exp $
d39 2
a40 2
* it into ap_Length.  If you don't want the full path name, make sure
* you set ap_Length to zero.  In this case, the name of the file, and stats
@


36.12
log
@Added DirChanged
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.11 91/01/17 14:23:22 jesup Exp Locker: jesup $
d61 1
a61 1
#define	ap_Length ap_Flags;	/* Old compatability for LONGWORD ap_Length */
@


36.11
log
@added P_STOP (forgot to check in earlier)
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.10 90/08/28 02:06:30 jesup Exp $
d87 3
@


36.10
log
@Fixed comments
@
text
@d5 1
a5 1
**	$Id: dosasl.h,v 36.8 90/07/12 03:22:09 jesup Exp $
d126 1
@


36.9
log
@minor comment change
@
text
@d120 2
a121 2
#define P_TAG		0x85	/* Token for '{' */
#define P_TAGEND	0x86	/* Token for '}' */
@


36.8
log
@$id, FIndFirst->MatchFirst
@
text
@d5 1
a5 1
**	$Id: $
d45 1
a45 1
* appropriate action, ultimately calling FreeAnchorChain() when there are
@


36.7
log
@for rcs 4.x header change
@
text
@d3 10
a13 9
/***********************************************************************
 *
 *	AmigaDOS Resource Project -- Library Include File (Assembler)
 */

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

d31 1
a31 1
* structure expected by FindFirst, FindNext.
d43 1
a43 1
* Then call FindFirst() and then afterwards, FindNext() with this structure.
d71 1
a71 1
#define	APB_ITSWILD	1	/* Set by FindFirst, used by FindNext */
d76 1
a76 1
				/* bit after FindFirst/FindNext to AVOID */
d112 1
a112 1
 * anything about these, FindFirst() FindNext() handle all these for you.
d133 1
a133 1
 * Returns from FindFirst(), FindNext()
@


36.6
log
@Added it back if for B1 compatibility
@
text
@@


36.5
log
@removed unneeded fields
@
text
@d59 5
@


36.4
log
@*** empty log message ***
@
text
@a58 5
	WORD	ap_Strlen;	/* This is what ap_Length used to be */
#define	ap_Length ap_Flags;	/* Old compatability for LONGWORD ap_Length */
	struct	FileInfoBlock ap_Info;
	UBYTE	ap_Buf[1];	/* Buffer for path name, allocated by user */
	/* FIX! */
@


36.3
log
@fixes for charlie's mistakes
@
text
@d1 2
a2 2
#ifndef LIBRARIES_DOSASL_H
#define LIBRARIES_DOSASL_H
d21 2
a22 2
#ifndef LIBRARIES_DOS_H
#include <libraries/dos.h>
d141 1
a141 1
#endif /* LIBRARIES_DOSASL_H */
@


36.2
log
@*** empty log message ***
@
text
@a24 3
#ifndef LIBRARIES_DOS_LIB_H
#include <libraries/dos_lib.h>
#endif
a25 1

d105 2
@


36.1
log
@Created from dosasl.i
@
text
@d143 1
a143 3
#endif


@
