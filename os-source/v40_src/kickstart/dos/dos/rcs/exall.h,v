head     36.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.6
date     92.04.05.23.53.53;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.12.03.24.26;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.03.04.50.05;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.16.20.09.32;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.09.02.14.50;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.12.08.07.59.32;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.6
log
@Added ED_OWNER
@
text
@#ifndef DOS_EXALL_H
#define DOS_EXALL_H
/*
**
**	$Id: exall.h,v 36.5 90/07/12 03:24:26 jesup Exp Locker: jesup $
**
**	include file for ExAll() data structures
**
**	(C) Copyright 1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
*/

#ifndef EXEC_TYPES_H
#include "exec/types.h"
#endif

#ifndef UTILITY_HOOKS_H
#include "utility/hooks.h"
#endif

/* NOTE: V37 dos.library, when doing ExAll() emulation, and V37 filesystems  */
/* will return an error if passed ED_OWNER.  If you get ERROR_BAD_NUMBER,    */
/* retry with ED_COMMENT to get everything but owner info.  All filesystems  */
/* supporting ExAll() must support through ED_COMMENT, and must check Type   */
/* and return ERROR_BAD_NUMBER if they don't support the type.               */

/* values that can be passed for what data you want from ExAll() */
/* each higher value includes those below it (numerically)       */
/* you MUST chose one of these values */
#define	ED_NAME		1
#define	ED_TYPE		2
#define ED_SIZE		3
#define ED_PROTECTION	4
#define ED_DATE		5
#define ED_COMMENT	6
#define ED_OWNER	7

/*
 *   Structure in which exall results are returned in.  Note that only the
 *   fields asked for will exist!
 */

struct ExAllData {
	struct ExAllData *ed_Next;
	UBYTE  *ed_Name;
	LONG	ed_Type;
	ULONG	ed_Size;
	ULONG	ed_Prot;
	ULONG	ed_Days;
	ULONG	ed_Mins;
	ULONG	ed_Ticks;
	UBYTE  *ed_Comment;	/* strings will be after last used field */
	UWORD	ed_OwnerUID;	/* new for V39 */
	UWORD	ed_OwnerGID;
};

/*
 *   Control structure passed to ExAll.  Unused fields MUST be initialized to
 *   0, expecially eac_LastKey.
 *
 *   eac_MatchFunc is a hook (see utility.library documentation for usage)
 *   It should return true if the entry is to returned, false if it is to be
 *   ignored.
 *
 *   This structure MUST be allocated by AllocDosObject()!
 */

struct ExAllControl {
	ULONG	eac_Entries;	 /* number of entries returned in buffer      */
	ULONG	eac_LastKey;	 /* Don't touch inbetween linked ExAll calls! */
	UBYTE  *eac_MatchString; /* wildcard string for pattern match or NULL */
	struct Hook *eac_MatchFunc; /* optional private wildcard function     */
};

#endif /* DOS_EXALL_H */
@


36.5
log
@$id
@
text
@d5 1
a5 1
**	$Id: $
d22 6
d37 1
d54 2
@


36.4
log
@for rcs 4.x header change
@
text
@d3 10
a12 11

/*** exall.h ******************************************************************
 *
 *  exall.h - include file for exall data structures
 *
 *
 ****************************************************************************
 * CONFIDENTIAL and PROPRIETARY
 * Copyright (C) 1989, COMMODORE-AMIGA, INC.
 * All Rights Reserved
 ****************************************************************************/
@


36.3
log
@*** empty log message ***
@
text
@@


36.2
log
@*** empty log message ***
@
text
@d57 2
@


36.1
log
@*** empty log message ***
@
text
@d1 2
a2 2
#ifndef LIBRARIES_EXALL_H
#define LIBRARIES_EXALL_H
d66 1
a66 1
#endif /* LIBRARIES_EXALL_H */
@
