head     36.19;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


36.19
date     91.05.02.22.25.29;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     91.01.27.03.23.15;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     91.01.27.03.18.03;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     91.01.27.02.40.36;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     91.01.24.00.25.08;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     91.01.17.14.24.53;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.08.28.02.07.28;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.07.25.15.23.49;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.07.12.03.28.59;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.03.04.49.29;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.03.02.37.58;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.01.30.17.18.10;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.01.29.02.16.45;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.12.12.11.30.29;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.09.02.19.31;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.01.08.33.36;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.11.22.03.42.49;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.14.01.55.35;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.19.00.07.29;  author jesup;  state Exp;
branches ;
next     ;


desc
@Initial checkin of include file for pattern.asm
@


36.19
log
@make
Added APF_FollowHLinks
@
text
@	IFND DOS_DOSASL_I
DOS_DOSASL_I	SET	1
**
**	$Id: dosasl.i,v 36.18 91/01/27 03:23:15 jesup Exp Locker: jesup $
**
**	pattern-matching structure definitions
**
**	(C) Copyright 1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

	IFND EXEC_LIBRARIES_I
	INCLUDE "exec/libraries.i"
	ENDC

	IFND EXEC_LISTS_I
	INCLUDE "exec/lists.i"
	ENDC

	IFND DOS_DOS_I
	INCLUDE "dos/dos.i"
	ENDC

************************************************************************
************************ PATTERN MATCHING ******************************
************************************************************************

* structure expected by MatchFirst, MatchNext.
* Allocate this structure and initialize it as follows:
*
* Set ap_BreakBits to the signal bits (CDEF) that you want to take a
* break on, or NULL, if you don't want to convenience the user.
*
* If you want to have the FULL PATH NAME of the files you found,
* allocate a buffer at the END of this structure, and put the size of
* it into ap_Strlen.  If you don't want the full path name, make sure
* you set ap_Strlen to zero.  In this case, the name of the file, and stats
* are available in the ap_Info, as per usual.
*
* Then call MatchFirst() and then afterwards, MatchNext() with this structure.
* You should check the return value each time (see below) and take the
* appropriate action, ultimately calling MatchEnd() when there are
* no more files and you are done.  You can tell when you are done by
* checking for the normal AmigaDOS return code ERROR_NO_MORE_ENTRIES.
*

	STRUCTURE AnchorPath,0
		LABEL	ap_First
		CPTR	ap_Base 	; pointer to first anchor
		LABEL	ap_Current
		CPTR	ap_Last 	; pointer to last anchor
		LONG	ap_BreakBits	; Bits we want to break on
		LONG	ap_FoundBreak	; Bits we broke on. Also returns ERROR_BREAK
		LABEL	ap_Length	; Old compatability for LONGWORD ap_Length
		BYTE	ap_Flags	; New use for extra word.
		BYTE	ap_Reserved
		WORD	ap_Strlen	; This is what ap_Length used to be
		STRUCT	ap_Info,fib_SIZEOF	; FileInfoBlock
		LABEL	ap_Buf		; Buffer for path name, allocated by user
		LABEL	ap_SIZEOF


	BITDEF	AP,DOWILD,0		; User option ALL
	BITDEF	AP,ITSWILD,1		; Set by MatchFirst, used by MatchNext
					; Application can test APB_ITSWILD,
					; too (means that there's a wildcard
					; in the pattern after calling
					; MatchFirst).
	BITDEF	AP,DODIR,2		; Bit is SET if a DIR node should be
					; entered. Application can RESET this
					; bit after MatchFirst/MatchNext to
					; AVOID entering a dir.
	BITDEF	AP,DIDDIR,3		; Bit is SET for an "expired" dir node.
	BITDEF	AP,NOMEMERR,4		; Set on memory error
	BITDEF	AP,DODOT,5		; If set, allow conversion of '.' to
					; CurrentDir
	BITDEF	AP,DirChanged,6		; ap_Current->an_Lock changed
					; since last MatchNext call

	BITDEF	AP,FollowHLinks,7      ; follow hardlinks on DODIR - defaults
				       ; to not following hardlinks on a DODIR.

	STRUCTURE	AChain,0
		CPTR	an_Child
		CPTR	an_Parent
		LONG	an_Lock
		STRUCT	an_Info,fib_SIZEOF	; FileInfoBlock
		BYTE	an_Flags
		LABEL	an_String
		LABEL	an_SIZEOF

	BITDEF	DD,PatternBit,0
	BITDEF	DD,ExaminedBit,1
	BITDEF	DD,Completed,2
	BITDEF	DD,AllBit,3
	BITDEF	DD,SINGLE,4

* Constants used by wildcard routines, these are the pre-parsed tokens
* referred to by pattern match.  It is not necessary for you to do
* anything about these, MatchFirst() MatchNext() handle all these for you.

P_ANY		EQU	$80	; Token for '*' or '#?
P_SINGLE	EQU	$81	; Token for '?'
P_ORSTART	EQU	$82	; Token for '('
P_ORNEXT	EQU	$83	; Token for '|'
P_OREND 	EQU	$84	; Token for ')'
P_NOT		EQU	$85	; Token for '~'
P_NOTEND	EQU	$86	; Token for
P_NOTCLASS	EQU	$87	; Token for '^'
P_CLASS 	EQU	$88	; Token for '[]'
P_REPBEG	EQU	$89	; Token for '['
P_REPEND	EQU	$8A	; Token for ']'
P_STOP		EQU	$8B	; token to force end of evaluation

* Values for an_Status, NOTE: These are the actual bit numbers

COMPLEX_BIT	EQU	1	; Parsing complex pattern
EXAMINE_BIT	EQU	2	; Searching directory

* Returns from MatchFirst(), MatchNext()
* You can also get dos error returns, such as ERROR_NO_MORE_ENTRIES,
* these are in the dos.h file.
*
ERROR_BUFFER_OVERFLOW	EQU	303	; User or internal buffer overflow
ERROR_BREAK		EQU	304	; A break character was received
ERROR_NOT_EXECUTABLE	EQU	305	; A file has E bit cleared

	ENDC	; DOS_DOSASL_I
@


36.18
log
@Added comments on ITSWILD
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.17 91/01/27 03:18:03 jesup Exp $
d79 3
@


36.17
log
@Fixed refs to ap_Length to ap_Strlen
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.16 91/01/27 02:40:36 jesup Exp Locker: jesup $
d66 3
a68 1
					; too.
@


36.16
log
@Fixed some typos
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.15 91/01/24 00:25:08 jesup Exp $
d36 2
a37 2
* it into ap_Length.  If you don't want the full path name, make sure
* you set ap_Length to zero.  In this case, the name of the file, and stats
@


36.15
log
@Added DirChanged
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.14 91/01/17 14:24:53 jesup Exp $
d56 1
a56 1
		BYTE	ap_Reservred
@


36.14
log
@added P_STOP (forgot to check in last time)
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.13 90/08/28 02:07:28 jesup Exp Locker: jesup $
d65 2
a66 1
					; Application can test APB_ITSWILD, too.
d69 2
a70 2
					; bit after MatchFirst/MatchNext to AVOID
					; entering a dir.
d73 4
a76 1
	BITDEF	AP,DODOT,5		; If set, allow conversion of '.' to CurrentDir
@


36.13
log
@Fixed Comments
@
text
@d4 1
a4 1
**	$Id: dosasl.i,v 36.11 90/07/12 03:28:59 jesup Exp $
d104 1
@


36.12
log
@comment change
@
text
@d98 2
a99 2
P_TAG		EQU	$85	; Token for '{'
P_TAGEND	EQU	$86	; Token for '}'
@


36.11
log
@$id, remove ARP garbage, findfirst->matchfirst
@
text
@d4 1
a4 1
**	$Id: $
d42 1
a42 1
* appropriate action, ultimately calling FreeAnchorChain() when there are
@


36.10
log
@for rcs 4.x header change
@
text
@d3 8
a10 4
***********************************************************************
*
*	AmigaDOS Resource Project -- Library Include File (Assembler)
*
a11 4
	IFND EXEC_TYPES_I
	INCLUDE "exec/types.i"
	ENDC

a23 11
*---------- Return codes you can get from calling Assign:

ASSIGN_OK	EQU	0	; Everything is cool and groovey
ASSIGN_NODEV	EQU	1	; "Physical" is not valid for assignment
ASSIGN_FATAL	EQU	2	; Something really icky happened
ASSIGN_CANCEL	EQU	3	; Tried to cancel something that won't cancel.

*--------- Size of buffer you need for ReadLine

MaxInputBuf	EQU	256

d28 1
a28 1
* structure expected by FindFirst, FindNext.
d40 1
a40 1
* Then call FindFirst() and then afterwards, FindNext() with this structure.
d64 1
a64 1
	BITDEF	AP,ITSWILD,1		; Set by FindFirst, used by FindNext
d68 1
a68 1
					; bit after FindFirst/FindNext to AVOID
d91 1
a91 1
* anything about these, FindFirst() FindNext() handle all these for you.
d110 1
a110 1
* Returns from FindFirst(), FindNext()
@


36.9
log
@removed garbage
@
text
@@


36.8
log
@Added it back in for B1 compatibility
@
text
@a128 80

* Structure used by AddDANode, AddDADevs, FreeDAList
*
* This structure is used to create lists of names,
* which normally are devices, assigns, volumes, files, or directories.

	STRUCTURE DirectoryEntry,0
		CPTR	de_Next 		; Next in list
		BYTE	de_Type 		; DLX_mumble
		BYTE	de_Flags		; For future expansion, do not use!
		LABEL	de_Name 		; name of thing found
		LABEL	de_SIZEOF

* Defines you use to get a list of the devices you want to look at.
* For example, to get a list of all directories and volumes, do
*
*	move.l	#DLF_DIRS!DLF_VOLUMES,d0
*	move.l	myDalist(pc),a0
*	SYSCALL AddDADevs		; ArpBase already in A6, of course
*
* After this, you can examine the de_Type field of the elements added
* to your list (if any) to discover specifics about the objects added.
*
* Note that if you want only devices which are also disks, you must
* request DLF_DEVICES!DLF_DISKONLY
*

	BITDEF	DL,DEVICES,0	; Return devices
	BITDEF	DL,DISKONLY,1	; Modifier for above: Return disk devices only
	BITDEF	DL,VOLUMES,2	; Return volumes only
	BITDEF	DL,DIRS,3	; Return assigned devices only

* Legal de_Type values, check for these after a call to AddDADevs(), or
* use on your own as the ID values in AddDANode()

DLX_FILE	EQU	0	; AddDADevs() can't determine this
DLX_DIR 	EQU	8	; AddDADevs() can't determine this
DLX_DEVICE	EQU	16	; It's a resident device

DLX_VOLUME	EQU	24	; Device is a volume
DLX_UNMOUNTED	EQU	32	; Device is not resident

DLX_ASSIGN	EQU	40	; Device is a logical assignment


*--- Returns from CompareLock()

LCK_EQUAL	EQU	0	; Locks refer to the same object
LCK_VOLUME	EQU	1	; Locks are on the same volume
LCK_DIFVOL1	EQU	2	; Locks are on different volumes
LCK_DIFVOL2	EQU	3	; Locks are on different volumes



*--------- String/Date structures etc
    STRUCTURE	DateTime,0
	STRUCT	dat_Stamp,ds_SIZEOF	;DOS DateStamp
	UBYTE	dat_Format		;controls appearance of dat_StrDate
	UBYTE	dat_Flags		;see BITDEF's below
	CPTR	dat_StrDay		;day of the week string
	CPTR	dat_StrDate		;date string
	CPTR	dat_StrTime		;time string
	LABEL	dat_SIZEOF
*
* You need this much room for each of the DateTime strings:
LEN_DATSTRING	EQU	10

*	flags for dat_Flags
*
	BITDEF	DT,SUBST,0		;substitute Today, Tomorrow, etc.
	BITDEF	DT,FUTURE,1		;day of the week is in future
*
*	date format values
*
FORMAT_DOS	equ	0
FORMAT_INT	equ	1
FORMAT_USA	equ	2
FORMAT_CDN	equ	3
FORMAT_MAX	equ	FORMAT_CDN

@


36.7
log
@*** empty log message ***
@
text
@d68 3
@


36.6
log
@Fxed charlie's brain damage
@
text
@a67 3
		WORD	ap_Strlen	; This is what ap_Length used to be
		STRUCT	ap_Info,fib_SIZEOF	; FileInfoBlock
		LABEL	ap_Buf		; Buffer for path name, allocated by user
@


36.5
log
@*** empty log message ***
@
text
@a23 5
	IFND DOS_DOS_LIB_I
	INCLUDE "dos/dos_lib.i"
	ENDC


@


36.4
log
@something charlie forgot
@
text
@d1 2
a2 2
	IFND LIBRARIES_DOSASL_I
LIBRARIES_DOSASL_I	SET	1
d20 2
a21 2
	IFND LIBRARIES_DOS_I
	INCLUDE "libraries/dos.i"
d24 2
a25 2
	IFND LIBRARIES_DOS_LIB_I
	INCLUDE "libraries/dos_lib.i"
d214 1
a214 1
	ENDC	!LIBRARIES_DOSASL_I
@


36.3
log
@*** empty log message ***
@
text
@d103 1
a103 1

@


36.2
log
@From charlie - new macros
@
text
@a214 1

@


36.1
log
@used by pattern.asm, needs cleanup.
@
text
@a213 26
*---------- handy macros

LINKEXE MACRO
	LINKLIB _LVO\1,4
	ENDM

* LINKDOS now uses ArpBase
* CALLDOS was nuked, to reduce confusion

LINKDOS MACRO
	jsr	_LVO\1(a6)
	ENDM


CALLEXE MACRO
	move.l	4,a6
	jsr	_LVO\1(a6)
	ENDM

* SYSCALL re-revised for only one arg
*	DosBase should always use ArpBase, or DosBase, in A6

SYSCALL MACRO
	jsr	_LVO\1(A6)
	ENDM

@
