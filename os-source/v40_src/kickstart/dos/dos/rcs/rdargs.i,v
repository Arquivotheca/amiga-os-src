head     36.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


36.8
date     92.08.09.17.08.09;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.07.12.03.33.56;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.03.04.50.35;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.09.02.21.28;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.11.22.03.44.28;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.11.14.01.57.13;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.04.49.02;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.03.18.35.34;  author jesup;  state Exp;
branches ;
next     ;


desc
@Charlie's rdargs include file (will change!)
@


36.8
log
@removed spurious RDAF_STDIN, added comment
@
text
@	IFND	DOS_RDARGS_I
DOS_RDARGS_I SET 1
**
**	$Id: rdargs.i,v 36.7 90/07/12 03:33:56 jesup Exp Locker: jesup $
**
**	ReadArgs() structure definitions
**
**	(C) Copyright 1989,1990,1992 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

	IFND EXEC_NODES_I
	INCLUDE "exec/nodes.i"
	ENDC

**********************************************************************
*
* The CSource data structure defines the input source for "RdItem()"
* as well as the ReadArgs call.  It is a publicly defined structure
* which may be used by applications which use code that follows the
* conventions defined for access.
*
* When passed to the dos.library functions, the value passed as
* struct *CSource is defined as follows:
*	if ( CSource == 0)	Use buffered IO "ReadChar()" as data source
*	else			Use CSource for input character stream
*
* The following two pseudo-code routines define how the CSource structure
* is used:
*
* long CS_ReadChar( struct CSource *CSource )
* {
*	if ( CSource == 0 )	return ReadChar();
*	if ( CSource->CurChr >= CSource->Length )	return ENDSTREAMCHAR;
*	return CSource->Buffer[ CSource->CurChr++ ];
* }
*
* BOOL CS_UnReadChar( struct CSource *CSource )
* {
*	if ( CSource == 0 )	return UnReadChar();
*	if ( CSource->CurChr <= 0 )	return FALSE;
*	CSource->CurChr--;
*	return TRUE;
* }
*
* To initialize a struct CSource, you set CSource->CS_Buffer to
* a string which is used as the data source, and set CS_Length to
* the number of characters in the string.  Normally CS_CurChr should
* be initialized to ZERO, or left as it was from prior use as
* a CSource.
*
* Note that currently the CSource input must end in a newline ($0A)
* character.  This restriction may be removed in the future.
*
**********************************************************************

	STRUCTURE	CSource,0
		APTR	CS_Buffer
		LONG	CS_Length
		LONG	CS_CurChr
		LABEL	CS_SIZEOF

**********************************************************************
*
* The RDArgs data structure is the input parameter passed to the DOS
* ReadArgs() function call.
*
* The RDA_Source structure is a CSource as defined above;
* if RDA_Source.CS_Buffer is non-null, RDA_Source is used as the input
* character stream to parse, else the input comes from the buffered STDIN
* calls ReadChar/UnReadChar.
*
* RDA_DAList is a private address which is used internally to track
* allocations which are freed by FreeArgs().  This MUST be initialized
* to NULL prior to the first call to ReadArgs().
*
* The RDA_Buffer and RDA_BufSiz fields allow the application to supply
* a fixed-size buffer in which to store the parsed data.  This allows
* the application to pre-allocate a buffer rather than requiring buffer
* space to be allocated.  If either RDA_Buffer or RDA_BufSiz is NULL,
* the application has not supplied a buffer.
*
* RDA_ExtHelp is a text string which will be displayed instead of the
* template string, if the user is prompted for input.
*
* RDA_Flags bits control how ReadArgs() works.  The flag bits are
* defined below.  Defaults are initialized to ZERO.
*
**********************************************************************

	STRUCTURE	RDArgs,0
		STRUCT	RDA_Source,CS_SIZEOF	; Select input source
		APTR	RDA_DAList		; PRIVATE.
		LONG	RDA_Buffer		; Optional string parsing space.
		LONG	RDA_BufSiz		; Size of RDA_Buffer (0..n)
		APTR	RDA_ExtHelp		; Optional extended help
		LONG	RDA_Flags		; Flags for any required control
		LABEL	RDA_SIZEOF

	BITDEF	RDA,NOALLOC,1	; If set, do not allocate extra string space.
	BITDEF	RDA,NOPROMPT,2	; Disable reprompting for string input.

**********************************************************************
* Maximum number of template keywords which can be in a template passed
* to ReadArgs(). IMPLEMENTOR NOTE - must be a multiple of 4.
**********************************************************************
MAX_TEMPLATE_ITEMS	equ	100

**********************************************************************
* Maximum number of MULTIARG items returned by ReadArgs(), before
* an ERROR_LINE_TOO_LONG.  These two limitations are due to stack
* usage.  Applications should allow "a lot" of stack to use ReadArgs().
**********************************************************************
MAX_MULTIARGS	equ	128

	ENDC	; DOS_RDARGS_I
@


36.7
log
@$id
@
text
@d4 1
a4 1
**	$Id: $
d8 1
a8 1
**	(C) Copyright 1989,1990 Commodore-Amiga, Inc.
d52 3
a99 1
	BITDEF	RDA,STDIN,0	; Use "STDIN" rather than "COMMAND LINE"
@


36.6
log
@for rcs 4.x header change
@
text
@d3 8
a11 11
**********************************************************************
* rdargs.i
*
*	Copyright (c) 1989, Commodore-Amiga Inc.
*	All Rights Reserved 
*
* This include file defines data types used in the V1.4 dos.library.
* Preliminary specs subject to change.
* 
**********************************************************************

a78 3
*
* The RDA_Template pointer is a standard AmigaDOS template string,
* such as "TO,FROM/A,ALL/S".   This is defined elsewhere.
@


36.5
log
@*** empty log message ***
@
text
@@


36.4
log
@*** empty log message ***
@
text
@d1 2
a2 2
	IFND	LIBRARIES_RDARGS_I
LIBRARIES_RDARGS_I SET 1
d120 1
a120 1
	ENDC	; LIBRARIES_RDARGS_I
@


36.3
log
@Made right, moved errors to dos.i
@
text
@d120 1
a120 1
	ENDC
@


36.2
log
@Latest version from charlie.
@
text
@d1 3
d15 1
a15 1
	INCLUDE	"exec/types.i"
d17 1
d120 1
a120 9
**********************************************************************

ERROR_UNMATCHED_QUOTES	equ	119	; Unmatched quotes
ERROR_TOO_MANY_ARGS	equ	118	; To many arguments on line
ERROR_KEY_NEEDS_ARG	equ	117	; Keyword specified missing arg
ERROR_REQUIRED_ARG_MISSING equ	116	; Missing required argument
ERROR_BAD_NUMBER	equ	115	; Bad Ascii number string (/N)
ERROR_BAD_TEMPLATE	equ	114	; Badly formed template.

@


36.1
log
@initial checkin.
@
text
@d1 1
d10 1
d15 3
a17 1
* The CHSource data structure defines the input source for "RdItem()"
d23 3
a25 3
* struct *CHSource is defined as follows:
*	if ( CHSource == 0)	Use buffered IO "ReadChar()" as data source
*	else			Use CHSource for input character stream
d27 1
a27 1
* The following two pseudo-code routines define how the CHSource structure
d30 1
a30 1
* long CH_ReadChar( struct CHSource *CHSource )
d32 3
a34 3
*	if ( CHSource == 0 )	return ReadChar();
*	if ( CHSource->CurChr >= CHSource->Length )	return ENDSTREAMCHAR;
*	return CHSource->Buffer[ CHSource->CurChr++ ];
d37 1
a37 1
* BOOL CH_UnReadChar( struct CHSource *CHSource )
d39 3
a41 3
*	if ( CHSource == 0 )	return UnReadChar();
*	if ( CHSource->CurChr <= 0 )	return FALSE;
*	ChSource->CurChr--;
d45 5
a49 4
* To initialize a struct CHSource, you set CHSource->CH_Buffer to
* a string which is used as the data source, and set CH_Length to
* the number of characters in the string.  Normally CH_CurChr should
* be in
d51 1
d53 5
a57 5
	STRUCTURE	CHSource,0
		APTR	CH_Buffer
		LONG	CH_Length
		LONG	CH_CurChr
		LABEL	CH_SIZEOF
d59 2
d64 2
a65 2
* The RA_Source structure is a CHSource as defined above;
* if RA_Source.CH_Buffer is non-null, RA_Source is used as the input
d69 3
a71 1
* RA_DAList is a list of AllocVec memory pointers allocated by ReadArgs().
d73 1
a73 1
* The RA_Buffer and RA_BufSiz fields allow the application to supply
d75 3
a77 4
* the application to pre-allocate a buffer rather than requiring memory
* to be allocatable using the RA_MemHook callback.  If either RA_Buffer
* or RA_BufSiz is NULL, the application has not supplied a buffer and
* the RA_MemHook callback should be used for all buffer allocations.
d79 1
a79 3
* Note that both RA_Buffer.
*
* The RA_Template pointer is a standard AmigaDOS template string,
d82 2
a83 2
* RA_FLAGS is used as a control variable for optional parameters.
* Anticipated bit definitions include:
d85 2
a86 2
*	RABB_NOPROMPT	to disable re-prompting and input for "?" parameter
*	RABB_SECINPUT	to select source for ReadLine for "?" reprompting
d88 1
a88 21
* EXPLANATION: when the input is selected by the CHSource input string,
* a "?" prompt must choose where to get further input, or choose not to
* interpret the "?" parameter as meaning "Get more input".  When the input
* character stream is DOS ReadChar/UnReadChar, this is not a problem since
* the input is synchronized.  However, with a CHSource string as input,
* the input desired may come from the CHSource, or may come from buffered
* ReadChar, or may come from DOS Read() depending on the application's
* context.
*
* Input cannot indiscriminately come from ReadChar() because on program
* entry, ReadChar returns the initial command line, which may have just
* been supplied by the CHSource data structure.
*
* The RA_Argv field is currently defined as an array of longwords which
* is allocated at the end of the struct RDArgs.  There must be one longword
* allocated for each template item.  On return from ReadArgs(), the parsed
* parameters are stored in the RA_Argv array.
*
* This implementation may change such that RA_Arv is defined as a pointer
* to the array, rather than being the offset of the first item in the
* array, in order to allow easier extension of the RDArgs data structure.
d91 4
a94 5
		STRUCT	RDA_Source,CH_SIZEOF	; Select input source
		APTR	RDA_DAList		; Single linked list of AllocVec's.
		LONG	RDA_Buffer		; Hmm.
		LONG	RDA_BufSiz		; Size of fixed mem buf (0..n)
		APTR	RDA_Template		; ADOS template
d97 27
a123 1
		LABEL	RDA_Argv		; Argv array starts here
@
