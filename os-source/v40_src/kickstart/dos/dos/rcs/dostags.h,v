head     36.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.12
date     94.02.01.14.14.53;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     91.04.29.17.34.18;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.11.02.03.31.50;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.07.12.03.24.00;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.09.02.32.12;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.03.04.49.56;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.03.18.00.14.40;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.05.01.20.02;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.03.02.34.18;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.16.20.07.33;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.09.02.14.30;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.12.01.08.35.32;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.12
log
@added Get/Set attribute tags
@
text
@#ifndef DOS_DOSTAGS_H
#define DOS_DOSTAGS_H
/*
**
**	$Id: dostags.h,v 36.11 91/04/29 17:34:18 jesup Exp Locker: jesup $
**
**	Tag definitions for all Dos routines using tags
**
**	(C) Copyright 1989,1990 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
*/

#ifndef UTILITY_TAGITEM_H
#include "utility/tagitem.h"
#endif

/*****************************************************************************/
/* definitions for the System() call */

#define SYS_Dummy 	(TAG_USER + 32)
#define	SYS_Input	(SYS_Dummy + 1)
				/* specifies the input filehandle  */
#define	SYS_Output	(SYS_Dummy + 2)
				/* specifies the output filehandle */
#define	SYS_Asynch	(SYS_Dummy + 3)
				/* run asynch, close input/output on exit(!) */
#define	SYS_UserShell	(SYS_Dummy + 4)
				/* send to user shell instead of boot shell */
#define	SYS_CustomShell	(SYS_Dummy + 5)
				/* send to a specific shell (data is name) */
/*	SYS_Error, */


/*****************************************************************************/
/* definitions for the CreateNewProc() call */
/* you MUST specify one of NP_Seglist or NP_Entry.  All else is optional. */

#define	NP_Dummy (TAG_USER + 1000)
#define	NP_Seglist	(NP_Dummy + 1)
				/* seglist of code to run for the process  */
#define	NP_FreeSeglist	(NP_Dummy + 2)
				/* free seglist on exit - only valid for   */
				/* for NP_Seglist.  Default is TRUE.	   */
#define	NP_Entry	(NP_Dummy + 3)
				/* entry point to run - mutually exclusive */
				/* with NP_Seglist! */
#define	NP_Input	(NP_Dummy + 4)
				/* filehandle - default is Open("NIL:"...) */
#define	NP_Output	(NP_Dummy + 5)
				/* filehandle - default is Open("NIL:"...) */
#define	NP_CloseInput	(NP_Dummy + 6)
				/* close input filehandle on exit	   */
				/* default TRUE				   */
#define	NP_CloseOutput	(NP_Dummy + 7)
				/* close output filehandle on exit	   */
				/* default TRUE				   */
#define	NP_Error	(NP_Dummy + 8)
				/* filehandle - default is Open("NIL:"...) */
#define	NP_CloseError	(NP_Dummy + 9)
				/* close error filehandle on exit	   */
				/* default TRUE				   */
#define	NP_CurrentDir	(NP_Dummy + 10)
				/* lock - default is parent's current dir  */
#define	NP_StackSize	(NP_Dummy + 11)
				/* stacksize for process - default 4000    */
#define	NP_Name		(NP_Dummy + 12)
				/* name for process - default "New Process"*/
#define	NP_Priority	(NP_Dummy + 13)
				/* priority - default same as parent	   */
#define	NP_ConsoleTask	(NP_Dummy + 14)
				/* consoletask - default same as parent    */
#define	NP_WindowPtr	(NP_Dummy + 15)
				/* window ptr - default is same as parent  */
#define	NP_HomeDir	(NP_Dummy + 16)
				/* home directory - default curr home dir  */
#define	NP_CopyVars	(NP_Dummy + 17)
				/* boolean to copy local vars-default TRUE */
#define	NP_Cli		(NP_Dummy + 18)
				/* create cli structure - default FALSE    */
#define	NP_Path		(NP_Dummy + 19)
				/* path - default is copy of parents path  */
				/* only valid if a cli process!            */
#define	NP_CommandName	(NP_Dummy + 20)
				/* commandname - valid only for CLI	   */
#define	NP_Arguments	(NP_Dummy + 21)
/* cstring of arguments - passed with str in a0, length in d0.  */
/* (copied and freed on exit.)  Default is 0-length NULL ptr.   */
/* NOTE: not operational until V37 - see BIX/TechNotes for	*/
/* more info/workaround.  In V36, the registers were random.	*/
/* You must NEVER use NP_Arguments with a NP_Input of NULL.	*/

/* FIX! should this be only for cli's? */
#define	NP_NotifyOnDeath (NP_Dummy + 22)
				/* notify parent on death - default FALSE  */
				/* Not functional yet. */
#define	NP_Synchronous	(NP_Dummy + 23)
				/* don't return until process finishes -   */
				/* default FALSE.			   */
				/* Not functional yet. */
#define	NP_ExitCode	(NP_Dummy + 24)
				/* code to be called on process exit       */
#define	NP_ExitData	(NP_Dummy + 25)
				/* optional argument for NP_EndCode rtn -  */
				/* default NULL				   */


/*****************************************************************************/
/* tags for AllocDosObject */

#define ADO_Dummy	(TAG_USER + 2000)
#define	ADO_FH_Mode	(ADO_Dummy + 1)
				/* for type DOS_FILEHANDLE only		   */
				/* sets up FH for mode specified.
				   This can make a big difference for buffered
				   files.				   */
	/* The following are for DOS_CLI */
	/* If you do not specify these, dos will use it's preferred values */
	/* which may change from release to release.  The BPTRs to these   */
	/* will be set up correctly for you.  Everything will be zero,     */
	/* except cli_FailLevel (10) and cli_Background (DOSTRUE).	   */
	/* NOTE: you may also use these 4 tags with CreateNewProc.	   */

#define	ADO_DirLen	(ADO_Dummy + 2)
				/* size in bytes for current dir buffer    */
#define	ADO_CommNameLen	(ADO_Dummy + 3)
				/* size in bytes for command name buffer   */
#define	ADO_CommFileLen	(ADO_Dummy + 4)
				/* size in bytes for command file buffer   */
#define	ADO_PromptLen	(ADO_Dummy + 5)
				/* size in bytes for the prompt buffer     */

/*****************************************************************************/
/* tags for NewLoadSeg */
/* no tags are defined yet for NewLoadSeg */

/*****************************************************************************/
/* tags for GetAttributes/SetAttributes */

#define DSA_Dummy	(TAG_USER + 10000)
#define	DSA_MODIFY_TIME	(DSA_Dummy + 1)	/* for the object modify time
				ti_Data is a struct DateStamp * */
#define	DSA_PROTECTION	(DSA_Dummy + 2)	/*  for the object protection bits
				ti_Data is a LONG of protection bits */
#define	DSA_OWNER_UID	(DSA_Dummy + 3)	/*	for the owner's user-id
				ti_Data is a LONG of owner UID (note: AmigaDOS
				currently only supports 16 bits of UID) */
#define	DSA_OWNER_GID	(DSA_Dummy + 4)	/*	for the owner's group-id
				ti_Data is a LONG of owner GID (note: AmigaDOS
				currently only supports 16 bits of GID) */
#define	DSA_COMMENT	(DSA_Dummy + 5)	/*     for the object's comment
				ti_Data is an APTR to a null-terminated comment */

/*	Currently Berkeley FFS only, but other filesystems may support them: */
#define	DSA_CREATE_TIME	(DSA_Dummy + 6)	/* for the object creation time
				ti_Data is a struct DateStamp * */
#define	DSA_ACCESS_TIME	(DSA_Dummy + 7)	/* for the object creation time
				ti_Data is a struct DateStamp * */

#endif /* DOS_DOSTAGS_H */
@


36.11
log
@Added comments concerning NP_Arguments
@
text
@d5 1
a5 1
**	$Id: dostags.h,v 36.10 90/11/02 03:31:50 jesup Exp Locker: jesup $
d136 23
@


36.10
log
@Changed enums to defines for 16-bit C compilers.
Added comments about broken or non-existant tags
@
text
@d5 1
a5 1
**	$Id: dostags.h,v 36.9 90/07/12 03:24:00 jesup Exp $
d87 6
a92 7
				/* cstring of arguments - passed with str  */
				/* in a0, length in d0.  (copied and freed */
				/* on exit.  Default is empty string.      */
				/* NOTE: not operational until 2.04 - see  */
				/* BIX/TechNotes for more info/workarounds */
				/* NOTE: in 2.0, it DIDN'T pass "" - the   */
				/* registers were random.		   */
@


36.9
log
@$id
@
text
@d5 1
a5 1
**	$Id: $
d18 1
d21 11
a31 6
enum {	SYS_Dummy = TAG_USER + 32,
	SYS_Input,		/* specifies the input filehandle  */
	SYS_Output,		/* specifies the output filehandle */
	SYS_Asynch,		/* run asynch, close input/output on exit(!) */
	SYS_UserShell,		/* send to user shell instead of boot shell */
	SYS_CustomShell,	/* send to a specific shell (data is name) */
a32 1
};
d34 2
d39 5
a43 3
enum {	NP_Dummy = TAG_USER + 1000,
	NP_Seglist,		/* seglist of code to run for the process  */
	NP_FreeSeglist,		/* free seglist on exit - only valid for   */
d45 2
a46 1
	NP_Entry,		/* entry point to run - mutually exclusive */
d48 6
a53 3
	NP_Input,		/* filehandle - default is Open("NIL:"...) */
	NP_Output,		/* filehandle - default is Open("NIL:"...) */
	NP_CloseInput,		/* close input filehandle on exit	   */
d55 2
a56 1
	NP_CloseOutput,		/* close output filehandle on exit	   */
d58 4
a61 2
	NP_Error,		/* filehandle - default is Open("NIL:"...) */
	NP_CloseError,		/* close error filehandle on exit	   */
d63 20
a82 10
	NP_CurrentDir,		/* lock - default is parent's current dir  */
	NP_StackSize,		/* stacksize for process - default 4000    */
	NP_Name,		/* name for process - default "New Process"*/
	NP_Priority,		/* priority - default same as parent	   */
	NP_ConsoleTask,		/* consoletask - default same as parent    */
	NP_WindowPtr,		/* window ptr - default is same as parent  */
	NP_HomeDir,		/* home directory - default current dir	   */
	NP_CopyVars,		/* boolean to copy local vars-default TRUE */
	NP_Cli,			/* create cli structure - default FALSE    */
	NP_Path,		/* path - default is copy of parents path  */
d84 4
a87 2
	NP_CommandName,		/* commandname - valid only for CLI	   */
	NP_Arguments,		/* cstring of arguments - passed with str  */
d90 4
d95 5
a99 2
	NP_NotifyOnDeath,	/* notify parent on death - default FALSE  */
	NP_Synchronous,		/* don't return until process finishes -   */
d101 5
a105 2
	NP_ExitCode,		/* code to be called on process exit       */
	NP_ExitData,		/* optional argument for NP_EndCode rtn -  */
a106 1
};
d108 2
d111 4
a114 2
enum {	ADO_Dummy = TAG_USER + 2000,
	ADO_FH_Mode,		/* for type DOS_FILEHANDLE only		   */
d125 8
a132 5
	ADO_DirLen,		/* size in bytes for current dir buffer    */
	ADO_CommNameLen,	/* size in bytes for command name buffer   */
	ADO_CommFileLen,	/* size in bytes for command file buffer   */
	ADO_PromptLen,		/* size in bytes for the prompt buffer     */
};
d134 1
@


36.8
log
@removed exec/types.h, added ADO_xxx for cli's.
@
text
@d3 10
a12 11

/*** dostags.h **************************************************************
 *
 *  dostags.h - include file for dos routines that use tags
 *
 *
 ****************************************************************************
 * CONFIDENTIAL and PROPRIETARY
 * Copyright (C) 1989, COMMODORE-AMIGA, INC.
 * All Rights Reserved
 ****************************************************************************/
@


36.7
log
@for rcs 4.x header change
@
text
@a14 4
#ifndef EXEC_TYPES_H
#include "exec/types.h"
#endif

d78 11
@


36.6
log
@*** empty log message ***
@
text
@@


36.5
log
@Added SYS_UserSheell, ADO_FH_Mode
@
text
@d30 1
@


36.4
log
@Added Asynch
@
text
@d29 1
d76 6
a81 1
/* no tags are defined yet for AllocDosObject */
@


36.3
log
@*** empty log message ***
@
text
@d26 3
a28 2
	SYS_Input,			/* specifies the input filehandle  */
	SYS_Output,			/* specifies the output filehandle */
@


36.2
log
@*** empty log message ***
@
text
@d73 6
@


36.1
log
@*** empty log message ***
@
text
@d1 2
a2 2
#ifndef LIBRARIES_DOSTAGS_H
#define LIBRARIES_DOSTAGS_H
d34 1
a34 1
enum {	NP_Dummy = TAG_USER + 32,
d73 1
a73 1
#endif /* LIBRARIES_DOSTAGS_H */
@
