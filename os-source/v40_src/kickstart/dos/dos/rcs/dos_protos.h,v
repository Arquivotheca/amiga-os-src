head     36.25;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.25
date     90.07.12.03.21.28;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     90.04.03.05.18.15;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     90.04.03.04.49.18;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     90.03.18.00.13.11;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.03.03.02.49.14;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.01.29.02.12.11;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     89.12.16.20.06.25;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     89.12.15.05.23.28;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     89.12.09.11.16.12;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     89.12.09.02.11.31;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     89.12.08.21.16.20;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     89.12.08.07.45.52;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     89.12.07.02.17.29;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     89.12.05.21.52.14;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     89.12.05.04.09.21;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     89.12.03.14.56.10;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     89.12.01.08.30.45;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     89.11.17.16.03.15;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     89.11.15.17.12.24;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.11.14.01.52.38;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.10.24.19.07.54;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.10.18.04.49.50;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.03.18.30.11;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.09.20.17.03.55;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.20.17.00.30;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.25
log
@*** empty log message ***
@
text
@#ifndef CLIB_DOS_PROTOS_H
#define CLIB_DOS_PROTOS_H

#ifndef DOS_DOSEXTENS_H
#include "dos/dosextens.h"
#endif

/***********************************************************************
/***********************************************************************
/***             Object creation/deletion                            ***
/***********************************************************************
/***********************************************************************
VOID *AllocDosObject(ULONG type,struct TagItem *tags);
VOID FreeDosObject(ULONG type,VOID *ptr);
/************************************************************************/
/************************************************************************/
/***             Packet Level routines                               ****/
/************************************************************************/
/************************************************************************/
LONG DoPkt(struct MsgPort *port, LONG action,
                           LONG arg1, LONG arg2, LONG arg3, LONG arg4);
LONG DoPkt4(struct MsgPort *port, LONG action,
                            LONG arg1, LONG arg2, LONG arg3, LONG arg4);
LONG DoPkt3(struct MsgPort *port, LONG action,
                            LONG arg1, LONG arg2, LONG arg3);
LONG DoPkt2(struct MsgPort *port, LONG action, LONG arg1, LONG arg2);
LONG DoPkt1(struct MsgPort *port, LONG action, LONG arg1);
LONG DoPkt0(struct MsgPort *port, LONG action);
VOID SendPkt(struct DosPacket *dp, struct MsgPort *port,
	     struct MsgPort *replyport);
struct DosPacket *WaitPkt(VOID);
VOID ReplyPkt(struct DosPacket *dp, LONG res1, LONG res2);
VOID AbortPkt(struct MsgPort *port);
/************************************************************************/
/************************************************************************/
/***             Record Locking                                      ****/
/************************************************************************/
/************************************************************************/
BOOL LockRecord(BPTR,ULONG,ULONG,ULONG,ULONG);
BOOL LockRecords(struct RecLock *, ULONG);
BOOL UnLockRecord(BPTR,ULONG,ULONG);
BOOL UnLockRecords(struct RecLock *);
/************************************************************************/
/************************************************************************/
/***             Buffered File I/O                                   ****/
/************************************************************************/
/************************************************************************/
BPTR SelectInput(BPTR fh);
BPTR SelectOutput(BPTR fh);
LONG FGetC(BPTR fh);
VOID FPutC(BPTR fh, UBYTE ch);
LONG UnGetC(BPTR fh, LONG character);
LONG FRead(BPTR fh,VOID *block, ULONG blocklen,ULONG number);
LONG FWrite(BPTR fh,VOID *block, ULONG blocklen,ULONG number);
LONG FGets(BPTR fh, UBYTE *buf, ULONG buflen);
LONG FPuts(BPTR fh, UBYTE *str);
VOID VFWritef(BPTR fh, UBYTE *format, LONG *argarray);
LONG VFPrintf(BPTR fh, UBYTE *format, LONG *argarray);
VOID Flush (BPTR fh);
LONG SetVBuf(BPTR fh, LONG type, ULONG size);
LONG WriteChars(UBYTE *buf, ULONG buflen);
LONG PutStr(UBYTE *str);
LONG VPrintf(UBYTE *format, LONG *argarray);
/************************************************************************/
/************************************************************************/
/***             Unbuffered File I/O                                 ****/
/************************************************************************/
/************************************************************************/
BPTR Open(UBYTE *, LONG);
LONG Close(BPTR);
LONG Read(BPTR, VOID *, LONG);
LONG Write(BPTR, VOID *, LONG);
BPTR Input(VOID);
BPTR Output(VOID);
LONG Seek(BPTR, LONG, LONG);
LONG IsInteractive(BPTR);
LONG WaitForChar(BPTR, LONG);
/************************************************************************/
/************************************************************************/
/***             Object Management                                   ****/
/************************************************************************/
/************************************************************************/
LONG DeleteFile(UBYTE *);
LONG Rename(UBYTE *, UBYTE *);
BPTR Lock(UBYTE *, LONG);
VOID UnLock(BPTR);
BPTR DupLock(BPTR);
LONG Examine(BPTR, struct FileInfoBlock *);
LONG ExNext(BPTR, struct FileInfoBlock *);
LONG Info(BPTR, struct InfoData *);
BPTR CreateDir(UBYTE *);
LONG SetComment(UBYTE *name, UBYTE *str);
LONG SetProtection(UBYTE *name, LONG protect);
BPTR ParentDir(BPTR lock);
BPTR DupLockFromFH(BPTR fh);
BPTR OpenFromLock(BPTR lock, LONG mode);
BPTR ParentOfFH(BPTR fh);
BOOL ExamineFH(BPTR fh,struct FileInfoBlock *fib);
LONG SetFileDate(UBYTE *name,struct DateStamp *date);
LONG NameFromLock(BPTR lock, UBYTE *buffer, LONG len);
BOOL NameFromFH(BPTR fh,UBYTE *, LONG);
WORD SplitName(UBYTE *name, UBYTE seperator,UBYTE *buf, WORD oldpos, LONG size);
LONG SameLock(BPTR lock1, BPTR lock2);
LONG SetMode(BPTR fh, LONG mode);
VOID ExAll(BPTR lock, struct ExAllData *buffer, LONG size, LONG data,
	   struct ExAllControl *control);
LONG ReadLink(struct MsgPort *port, BPTR lock, UBYTE *path, UBYTE *buffer,
	      ULONG size);
LONG MakeLink(UBYTE *name, LONG dest, LONG soft);
LONG ChangeMode(LONG type, BPTR fh, LONG newmode);
LONG SetFileSize(BPTR fh, LONG pos, LONG mode);

/************************************************************************/
/************************************************************************/
/***             Error Handling                                      ****/
/************************************************************************/
/************************************************************************/
LONG IoErr(VOID);
VOID SetIoErr(LONG result);
BOOL Fault(LONG code, UBYTE *header, UBYTE *buffer, LONG len);
BOOL PrintFault(LONG code, UBYTE *header);
LONG ErrorReport(LONG code, LONG type, ULONG arg1, struct MsgPort *device);
LONG Requester(UBYTE *s1, UBYTE *s2, UBYTE *s3, ULONG flags);

/************************************************************************/
/************************************************************************/
/***             Process Management                                  ****/
/************************************************************************/
/************************************************************************/
struct MsgPort *CreateProc(UBYTE *, LONG, BPTR, LONG);
LONG Execute(UBYTE *, BPTR, BPTR);
VOID Exit(LONG);
BPTR CurrentDir(BPTR);
struct CommandLineInterface *Cli(VOID);
struct Process *CreateNewProc(struct TagItem *tags);
LONG RunCommand(BPTR seg, LONG stack, UBYTE *paramptr, LONG paramlen);
struct MsgPort * GetConsoleTask(VOID);
VOID SetConsoleTask(struct MsgPort *task);
struct MsgPort * GetFileSysTask(VOID);
VOID SetFileSysTask(struct MsgPort *task);
UBYTE *GetArgStr(VOID);
BOOL SetArgStr(UBYTE *string);
struct Process * FindCliProc(LONG num);
ULONG MaxCli(VOID);
BOOL SetCurrentDirName(UBYTE *name);
BOOL GetCurrentDirName(UBYTE *buf, LONG len);
BOOL SetProgramName(UBYTE *name);
BOOL GetProgramName(UBYTE *buf, LONG len);
BOOL SetPrompt(UBYTE *name);
BOOL GetPrompt(UBYTE *buf, LONG len);
BPTR GetProgramDir(VOID);
LONG System(UBYTE *command, struct TagItem *tags);

/************************************************************************/
/************************************************************************/
/***             Device List Management                              ****/
/************************************************************************/
/************************************************************************/
struct MsgPort *DeviceProc(UBYTE *);
LONG AssignLock(UBYTE *name, BPTR lock);
BOOL AssignLate(UBYTE *name, UBYTE *path);
BOOL AssignPath(UBYTE *name, UBYTE *path);
BOOL AssignAdd(UBYTE *name, BPTR Lock);
LONG RemAssignList(UBYTE *name, BPTR lock);
struct DevProc *GetDeviceProc(UBYTE *name,struct DevProc *dp);
VOID FreeDeviceProc(struct DevProc *dp);
struct DosList *LockDosList(ULONG flags);
VOID UnlockDosList(ULONG flags);
struct DosList *AttemptLockDosList(ULONG flags);
BOOL RemDosEntry(struct DosList *);
struct DosList *AddDosEntry(struct DosList *dlist);
struct DosList *FindDosEntry(struct DosList *dlist, UBYTE *name, ULONG flags);
struct DosList *NextDosEntry(struct DosList *dlist, ULONG flags);
struct DosList *MakeDosEntry(UBYTE *name,LONG type);
VOID FreeDosEntry(struct DosList *dlist);
BOOL IsFileSystem(UBYTE *name);

/************************************************************************/
/************************************************************************/
/***             Handler Interface                                   ****/
/************************************************************************/
/************************************************************************/
BOOL Format(UBYTE *filesystem,UBYTE *volumename,ULONG dostype);
LONG Relabel(UBYTE *drive,UBYTE *newname);
LONG Inhibit(UBYTE *name, LONG onoff);
LONG AddBuffers(UBYTE *name, LONG number);

/************************************************************************/
/************************************************************************/
/***             Date Time Routines                                  ****/
/************************************************************************/
/************************************************************************/
VOID Delay(LONG);
LONG * DateStamp(LONG *);
LONG CompareDates(struct DateStamp *date1, struct DateStamp *date2);
LONG DateToStr(struct DateTime *datetime);
LONG StrToDate(struct DateTime *datetime);

/************************************************************************/
/************************************************************************/
/***             Image Management                                    ****/
/************************************************************************/
/************************************************************************/
BPTR LoadSeg(UBYTE *name);
VOID UnLoadSeg(BPTR seglist);
BPTR InternalLoadSeg(BPTR fh, BPTR table, LONG *funcarray, LONG *stack);
VOID InternalUnLoadSeg(BPTR seglist, void (*freefunc)(UBYTE *, ULONG));
BPTR NewLoadSeg(UBYTE *file, struct TagItem *tags);
LONG AddSegment(UBYTE *name, BPTR seg, LONG system);
struct Segment *FindSegment(UBYTE *name, struct Segment *seg, LONG system);
LONG RemSegment(struct Segment *seg);
/************************************************************************/
/************************************************************************/
/***             Command Support                                     ****/
/************************************************************************/
/************************************************************************/
LONG CheckSignal(LONG mask);
struct RDargs * ReadArgs(UBYTE *template, LONG *array, struct RDargs *args);
LONG FindArg(UBYTE *keyword,UBYTE *template);
LONG ReadItem(UBYTE *name,LONG maxchars,struct CHSource *CHSource);
LONG StrToLong(UBYTE *string, LONG *value);
LONG MatchFirst(UBYTE *pat, struct AnchorChain *anchor);
LONG MatchNext(struct AnchorChain *anchor);
VOID MatchEnd(struct AnchorChain *anchor);
BOOL ParsePattern(UBYTE *pat, UBYTE *buf, LONG buflen);
BOOL MatchPattern(UBYTE *pat, UBYTE *str);
BOOL MatchReplace();			/* arguments not specified yet */
VOID FreeArgs(struct RDargs *args);
UBYTE *FilePart(UBYTE *path);
UBYTE *PathPart(UBYTE *path);
BOOL AddPart(UBYTE *dirname,UBYTE *filename,ULONG size);

/************************************************************************/
/************************************************************************/
/***             Notification                                        ****/
/************************************************************************/
/************************************************************************/
BOOL StartNotify(struct NotifyRequest *notify);
VOID EndNotify(struct NotifyRequest *notify);

/************************************************************************/
/************************************************************************/
/***             Environment Variable functions                      ****/
/************************************************************************/
/************************************************************************/
BOOL SetVar(UBYTE *name, UBYTE *buffer, LONG size, LONG flags);
LONG GetVar(UBYTE *name, UBYTE *buffer, LONG size, LONG flags);
LONG DeleteVar(UBYTE *name, ULONG flags);
struct LocalVar *FindVar(UBYTE *name, ULONG type);

#endif	/* CLIB_DOS_PROTOS_H */
@


36.24
log
@UBYTE* to VOID*
@
text
@d105 1
a105 1
VOID ExAll(BPTR lock, UBYTE *buffer, LONG size, struct ExAllData *data,
@


36.23
log
@for rcs 4.x header change
@
text
@d53 2
a54 2
LONG FRead(BPTR fh,UBYTE *block, ULONG blocklen,ULONG number);
LONG FWrite(BPTR fh,UBYTE *block, ULONG blocklen,ULONG number);
d71 2
a72 2
LONG Read(BPTR, UBYTE *, LONG);
LONG Write(BPTR, UBYTE *, LONG);
@


36.22
log
@Fixed Close()
@
text
@@


36.21
log
@*** empty log message ***
@
text
@d70 1
a70 1
VOID Close(BPTR);
@


36.20
log
@Minor fix
@
text
@d135 1
a135 1
struct Process *CreateNewProc(struct NewProcess *newproc);
@


36.19
log
@*** empty log message ***
@
text
@d102 1
a102 1
WORD SplitName(UBYTE *name, UBYTE seperator, BYTE *buf, WORD oldpos, LONG size);
@


36.18
log
@Puts->PutStr, FileName, etc to FilePart, etc.
@
text
@d8 7
a19 2
struct DosPacket *CreatePkt(VOID);
VOID DeletePkt(struct DosPacket *dp);
d227 1
@


36.17
log
@*** empty log message ***
@
text
@d57 1
a57 1
LONG Puts(UBYTE *str);
d223 3
a225 3
UBYTE *FileName(UBYTE *path);
UBYTE *PathName(UBYTE *path);
BOOL AddName(UBYTE *dirname,UBYTE *filename,ULONG size);
@


36.16
log
@*** empty log message ***
@
text
@d56 3
d178 1
a178 1
BOOL Format(UBYTE *filesystem);
a221 1
VOID *AllocVec(LONG bytes, LONG type);
a222 1
VOID FreeVec(VOID *mem);
@


36.15
log
@*** empty log message ***
@
text
@d1 5
a5 2
#ifndef LIBRARIES_DOSEXTENS_H
#include <libraries/dosextens.h>
a6 1
extern struct DosLibrary *DOSBase;
d243 2
@


36.14
log
@Everything you know is wrong
@
text
@d45 1
a45 1
LONG UnGetC(BPTR fh, ULONG num);
@


36.13
log
@Forgot ChangeMode()!!
@
text
@a26 1

d29 1
a29 1
/***             Unbuffered File I/O                                 ****/
d32 1
a32 14
BPTR Open(UBYTE *, LONG);
VOID Close(BPTR);
LONG Read(BPTR, UBYTE *, LONG);
LONG Write(BPTR, UBYTE *, LONG);
BPTR Input(VOID);
BPTR Output(VOID);
LONG Seek(BPTR, LONG, LONG);
LONG IsInteractive(BPTR);
LONG WaitForChar(BPTR, LONG);
LONG VPrintf(UBYTE *, LONG[]);
LONG VFPrintf(BPTR, UBYTE *, LONG[]);
LONG VSPrintf(LONG, UBYTE *, LONG[], UBYTE *);
LONG SetFileSize(BPTR fh, LONG pos, LONG mode);
ULONG LockRecord(BPTR,ULONG,ULONG,ULONG,ULONG);
a35 1

d43 9
a51 9
LONG ReadChar(VOID);
BOOL WriteChar(UBYTE ch);
ULONG UnReadChar(ULONG num);
LONG ReadBytes(UBYTE * buf, ULONG buflen);
LONG WriteBytes(UBYTE * buf, ULONG buflen);
LONG ReadLn(UBYTE * buf, ULONG buflen);
LONG WriteStr(UBYTE *str);
VOID Writef(UBYTE *format, LONG *argarray);
LONG BPrintf(UBYTE *format, LONG *argarray);
d53 1
a53 2
ULONG BufferedSeek(BPTR fh,LONG,LONG);

d56 14
d100 2
d127 6
a132 2
struct MsgPort * ConsoleTask(VOID);
struct MsgPort * FileSystemTask(VOID);
d154 1
d186 2
d198 4
a201 3
BPTR NewLoadSeg(UBYTE *file, LONG *stack);
VOID Resident(UBYTE *name, BPTR seg, LONG system);

d220 3
a233 9
/***             32 Bit Math functions                               ****/
/************************************************************************/
/************************************************************************/
LONG Mult32(LONG num1, LONG num2);
LONG Div32(LONG dividend, LONG divisor);
LONG Rem32(LONG dividend, LONG divisor);

/************************************************************************/
/************************************************************************/
a238 4

/* TO be MOVED!!! FIX! */
LONG DateToStr(struct DateTime *datetime);
LONG StrToDate(struct DateTime *datetime);
a239 4
LONG RemAssignList(UBYTE *name, BPTR lock);
LONG ChangeMode(LONG type, BPTR fh, LONG newmode);
void SetFileSysTask(struct MsgPort *task);
void SetConsoleTask(struct MsgPort *task);
a240 4
UBYTE *ArgStr(void);
UBYTE *FileName(UBYTE *path);
UBYTE *PathName(UBYTE *path);
BOOL AddName(UBYTE *dirname,UBYTE *filename,ULONG size);
@


36.12
log
@*** empty log message ***
@
text
@d207 1
a207 1
BOOL ParsePattern(UBYTE *pat, UBYTE *buf);
d243 1
@


36.11
log
@*** empty log message ***
@
text
@d246 4
@


36.10
log
@*** empty log message ***
@
text
@d245 1
@


36.9
log
@*** empty log message ***
@
text
@d97 2
a98 1
VOID ExAll(BPTR lock, ); /* This needs to be thought out */
d235 2
a236 2
BOOL SetEnvVar(UBYTE *name, UBYTE *buffer, LONG size, LONG flags);
LONG GetEnvVar(UBYTE *name, UBYTE *buffer, LONG size, LONG flags);
d243 2
@


36.8
log
@Fixes Requester()
@
text
@d137 1
a137 1
LONG System(UBYTE *command, BPTR input, BPTR output);
@


36.7
log
@Charlies changes
@
text
@d112 1
a112 1
LONG Requestor(UBYTE *s1, UBYTE *s2, UBYTE *s3, ULONG flags);
@


36.6
log
@*** empty log message ***
@
text
@d203 3
a205 3
BOOL MatchFirst(UBYTE *pat, struct Anchor **anchor);
BOOL MatchNext(struct Anchor **anchor);
VOID MatchEnd(struct Anchor **anchor);
@


36.5
log
@Removed comments on routines, changed names, added new routines.
@
text
@d22 1
a22 1
VOID SendPkt(struct MsgPort *port, struct DosPacket *dp,
d237 5
a241 1

@


36.4
log
@fixed SendPkt, removed some comments, added readlink/makelink/etc
@
text
@a23 1
 /* Waits for dos packet at pr_MsgPort, calls pr_PktWait if needed */
a93 34
/******* dos.library/SplitName ************
*
*   NAME
*	SplitName -- splits out a component of a pathname into a buffer
*
*   SYNOPSIS
*	newpos = SplitName(name, separator, buf, oldpos, size)
*	D0                  D1      D2      D3     D4     D5
*
*	WORD SplitName(UBYTE *, UBYTE, UBYTE *, WORD, LONG)
*
*   FUNCTION
*	This routine splits out the next piece of a name from a given file
*	name.  Each piece is copied into the buffer, truncating at size-1
*	characters.  The new position is then returned so that it may be
*	passed in to the next call to splitname.  If the separator is not
*	found within 'size' characters, then size-1 characters plus a null will
*	be put into the buffer, and the position of the next separator will
*	be returned.
*	If a a separator cannot be found, -1 is returned (but the characters
*	from the old position to the end of the string are copied into the
*	buffer, up to a maximum of size-1 characters).  Both strings are
*	null-terminated.
*
*   INPUTS
*	name      - Filename being parsed.
*	separator - Separator charactor to split by.
*	buf       - Buffer to hold separated name.
*	oldpos    - Current position in the file.
*	size 	  - Size of buf in bytes (including null termination);
*
*   RESULT
*	newpos    - New position for next call to splitname.  -1 for last one.
*/
d98 3
d109 2
a110 1
BOOL Fault(LONG code, UBYTE *buffer, LONG len);
a111 6
 /*    Bool := requestor( line1, line2, line3 ) */
 /* The three lines are displayed within an intuition requestor */
 /* box. Two gadgets are also presented, labelled Retry and Cancel */
 /* This call requires about 2K of stack, which is obtained dynamically */
 /* from the free pool. If there is no stack left it returns FALSE anyway. */
 /* Flags are which IDCMP flags will cause an automatic RETRY. */
a124 31
 /*                                                                      */
 /* rc := runcommand( seg, stacksize, paramptr, paramlen )               */
 /* BCPL:             BPTR   LONGS      BPTR      LONG                   */
 /* C:                BPTR   LONGS      CPTR      LONG                   */
 /*                                                                      */
 /* This code runs a command under TRIPOS in a language independent      */
 /* fashion. A stack of specified size is constructed, and the entry     */
 /* point of the code is assumed to be the first executable word of the  */
 /* first hunk in the segment list (which is a list of code blocks       */
 /* linked by BCPL pointers). All TRIPOS registers are saved, and the    */
 /* code is entered with the SP at the base of the new stack, having     */
 /* pushed a suitable return address, the size of the stack and the      */
 /* caller's stack onto it first of all. In addition the previous return */
 /* address for STOP is saved, and a new one installed.                  */
 /*                                                                      */
 /* Thus a program running under Tripos will find a stack as follows     */
 /*                                                                      */
 /* ReturnAddress    StackSize   CallerStack                             */
 /*                                                                      */
 /* The registers are set up as follows (any register may be corrupted   */
 /* except SP).                                                          */
 /*                                                                      */
 /* D0  Size of parameter string in bytes                                */
 /* A0  Pointer to parameter string area                                 */
 /*                                                                      */
 /* The routine returns                                                  */
 /* -1  if the program could not be loaded (result2() has more info)     */
 /* 0   if the program ran and did not set a return code                 */
 /* >0  if the program set a return code (result2() normally has more    */
 /*      info)                                                           */
 /*                                                                      */
d128 2
a129 2
LONG FindCli(LONG num);
LONG MaxCli(VOID);
d145 1
a145 1
LONG Assign(UBYTE *name, BPTR lock);
a190 1
 /* aka Resident().  Adds a node to the resident list. */
d198 2
a199 2
LONG CheckBreak(LONG mask);
LONG * ReadArgs(struct RDargs *args);
d202 6
a207 6
LONG Atol(UBYTE *string, LONG *value);
BOOL FindFirst(UBYTE *pat, struct Anchor **anchor);
BOOL FindNext(struct Anchor **anchor);
VOID FreeAnchorChain(struct Anchor **anchor);
BOOL PreParse(UBYTE *pat, UBYTE *buf);
BOOL PatternMatch(UBYTE *pat, UBYTE *str);
a237 3
LONG ReadLink(struct MsgPort *port, BPTR lock, UBYTE *path, UBYTE *buffer,
	      ULONG size);
LONG MakeLink(UBYTE *name, LONG dest, LONG soft);
@


36.3
log
@Added Writef, fixed GetDeviceProc, added new dos device list calls,
added charlie's rdargs calls, fixed atol.
@
text
@d22 2
a23 1
VOID SendPkt(struct MsgPort *port, struct DosPacket *dp);
a268 6
 /*  FINDARG - Cribbed from TRIPOS BLIB (BSTR->CSTR)	*/
 /*  Routine which searches the KEYS supplied		*/
 /*  to RDARGS to find whether an input WORD (w) 	*/
 /*  is part of the specified argument list in KEYS.	*/
 /*  If it is, it returns the argument number, otherwise */
 /*  -1 is returned.					*/
a269 6
 /* read a parameter in from a string into commandname   */
 /* returns -2    "=" Symbol                             */
 /*         -1    error                                  */
 /*          0    *N, ;, endstreamch                     */
 /*          1    unquoted item                          */
 /*          2    quoted item                            */
d277 2
a278 2
VOID *AllocVec(LONG longwords);
VOID *AllocVecType(LONG longwords, LONG type);
d307 3
@


36.2
log
@Fixed BPrintf prototype
@
text
@d65 1
d216 1
a216 1
VOID GetDeviceProc(UBYTE *name,struct DevProc *dp);
d222 1
a222 3
 /* should be called under forbid, so caller can set things up */
 /* creates a device of given name, type DLT_DEVICE, all other fields 0 */
struct DosList *AddDosEntry(UBYTE *name);
d225 2
a226 1
struct DosList *FindDosDevice(struct DosList *dlist, UBYTE *name, ULONG flags);
d267 1
a267 1
LONG * RdArgs(UBYTE *keys,LONG *argv,LONG size, LONG isbcpl);
d274 1
a274 1
LONG FindArg(UBYTE *keys,UBYTE *w,LONG isbcpl);
d281 2
a282 2
LONG RdItem(UBYTE *commandname,LONG maxlongs, LONG isbcpl);
LONG Atol(UBYTE *str);
@


36.1
log
@*** empty log message ***
@
text
@d65 1
a65 1
VOID BPrintf(UBYTE *format, LONG *t);
@
