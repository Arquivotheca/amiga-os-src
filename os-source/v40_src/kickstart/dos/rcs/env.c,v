head     36.36;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.36
date     92.12.14.00.10.02;  author jesup;  state Exp;
branches ;
next     36.35;

36.35
date     92.12.14.00.05.45;  author jesup;  state Exp;
branches ;
next     36.34;

36.34
date     92.06.29.16.38.35;  author jesup;  state Exp;
branches ;
next     36.33;

36.33
date     92.06.23.16.36.37;  author jesup;  state Exp;
branches ;
next     36.32;

36.32
date     92.06.02.00.09.16;  author jesup;  state Exp;
branches ;
next     36.31;

36.31
date     91.04.11.02.51.25;  author jesup;  state Exp;
branches ;
next     36.30;

36.30
date     91.03.15.14.59.42;  author jesup;  state Exp;
branches ;
next     36.29;

36.29
date     91.03.15.14.47.34;  author jesup;  state Exp;
branches ;
next     36.28;

36.28
date     91.03.14.21.26.11;  author jesup;  state Exp;
branches ;
next     36.27;

36.27
date     91.02.19.02.03.58;  author jesup;  state Exp;
branches ;
next     36.26;

36.26
date     91.02.13.18.58.11;  author jesup;  state Exp;
branches ;
next     36.25;

36.25
date     91.01.17.14.14.19;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     90.12.17.22.28.32;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     90.12.16.03.31.36;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     90.12.07.03.53.27;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.11.30.15.20.06;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.11.30.03.37.27;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.11.27.16.45.13;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.11.27.01.50.08;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.11.26.19.45.58;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.11.21.02.20.38;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.08.28.01.52.50;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.06.13.02.24.09;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.06.12.05.34.42;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.05.09.02.07.30;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.04.03.04.43.37;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.03.03.02.16.53;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.02.16.22.18.14;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.01.29.01.55.10;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     89.12.14.05.09.07;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.12.11.01.44.11;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.09.01.47.48;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.05.03.49.55;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.03.14.40.57;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.01.08.12.49;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.14.01.44.31;  author jesup;  state Exp;
branches ;
next     ;


desc
@Initial check in
@


36.36
log
@oops, blew last comment.  meant to add:
If directory doesn't exist, create it (even N levels deep)
@
text
@/* env.c */

#include <exec/types.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include "dos/dos.h"
#include "dos/var.h"
#include "dos/dosextens.h"
#include <string.h>

#include "libhdr.h"

#include "env_protos.h"
/*#include <clib/alib_protos.h>*/
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>
#include "klib_protos.h"
#include "blib_protos.h"

#define SAME 0

LONG ASM
DeleteVar (REG(d1) UBYTE *name, REG(d2) ULONG flags)
{
	return SetVar(name,NULL,0,flags);
}

/* flags is type or'ed with local/global flags */

LONG ASM
SetVar (REG(d1) UBYTE *name, REG(d2) UBYTE *buffer, REG(d3) LONG size,
	REG(d4) ULONG flags)
{
	struct LocalVar *lv;
	BPTR fh;
	BPTR dirlock;
	BPTR olddir;
	LONG rc = FALSE, err;

	/* handle null-terminated input */
	if (buffer && size == -1)
		size = strlen(buffer);		/* DON'T include NULL */

	if (!(flags & GVF_GLOBAL_ONLY))
	{
		UBYTE *newvalue = NULL;

		/* don't try to allocate 0 bytes, just use a NULL ptr */
		if (buffer && size)
			if (!(newvalue = AllocMem(size,0L)))
				return FALSE;

		/* local var - use list at end of process structure */
		for (lv = (struct LocalVar *) MYPROC->pr_LocalVars.mlh_Head;
		     lv->lv_Node.ln_Succ;
		     lv = (struct LocalVar *) lv->lv_Node.ln_Succ)
		{
			if (mystricmp(name,lv->lv_Node.ln_Name) == SAME &&
			    ((flags & 0xff) == lv->lv_Node.ln_Type))
			{
				/* got it! First free the old value */
				/* safe because we already alloced the new */
				if (lv->lv_Value)
					FreeMem((char *) lv->lv_Value,
						lv->lv_Len);

				if (buffer == NULL)
				{
					/* remove it */
					Remove(&(lv->lv_Node));
					freeVec(lv);

					return DOSTRUE;
				}
				/* replace old value */
fill_in:			lv->lv_Value = newvalue;
				lv->lv_Len   = size;
				lv->lv_Flags = flags & GVF_BINARY_VAR;
				if (size)
					copyMem(buffer,newvalue,size);

				return DOSTRUE;
			}
		}

		/* if buffer is NULL, then he wanted to delete it */
		if (buffer == NULL)
		{
			/* no local var of that name, delete the global (?!) */
			goto do_global;
		}

		/* doesn't exist - create it as local - may override global */
		if (!(lv = AllocVecPubClear(sizeof(*lv) + strlen(name) + 1)))
		{
			if (newvalue)
				FreeMem(newvalue,size);
			return FALSE;
		}

		lv->lv_Node.ln_Type = flags & 0xff;
		lv->lv_Node.ln_Name = ((char *) lv) + sizeof(*lv);
		strcpy(lv->lv_Node.ln_Name,name);

		addvar((struct List *) &(MYPROC->pr_LocalVars),
		       lv);
		goto fill_in;

	}

	/* either global was specified, or delete of var that doesn't exist */
	/* as a local variable.  */

do_global:
	/* FIX! currently doesn't search disk except for vars */
	if ((flags & GVF_LOCAL_ONLY) ||
	    ((flags & 0xff) != LV_VAR))
	{
		setresult2(ERROR_OBJECT_NOT_FOUND);
		return FALSE;
	}

	if (!(dirlock = locateobj("ENV:")))
		return FALSE;

	err = 0;
	while (dirlock)
	{
		olddir = CurrentDir(dirlock);

		if (buffer == NULL)	/* means delete */
		{
			/* delete the variable */
			rc = deletefile(name);
			goto free_dir;
		}

		/* now open relative to that.  */
		/* MODE_READWRITE creates if non-existant!!!! */
		/* MODE_READWRITE is not exclusive */
		if (fh = findstream(name,MODE_READWRITE))
		{
			/* file is open.  Write, then truncate. */
			/* Write of 0 bytes should return 0 */
			if (write(fh,buffer,size) == size)
			{
				/* make sure the var ends here */
				if (SetFileSize(fh,0,OFFSET_CURRENT) != -1)
					rc = DOSTRUE;
			}
			if (!endstream(fh))
				rc = FALSE;	/* ERROR on close(!) */
		} else {
			err = getresult2();
			if (err != ERROR_OBJECT_NOT_FOUND)
			{
write_err:			freeobj(CurrentDir(olddir));
				break;		// leave while (dirlock)
			}

			// missing directory.  Create it and try again.
			if (makedir(name))
			{
				CurrentDir(olddir);
				continue;	// retry the create
			} else
				goto write_err;	// can't make it, return err
		}
free_dir:
		freeobj(CurrentDir(olddir));
		dirlock = NULL;
		if (flags & GVF_SAVE_VAR)
		{
			// Make sure we don't try this again...
			flags &= ~GVF_SAVE_VAR;
			dirlock = locateobj("ENVARC:");
			// If this fails, we'll return success I guess
		}
	} // while (dirlock)

	setresult2(err);	// reset ioerr...
	return rc;
}

// given a pathname, build all needed subdirs to get there...
static LONG __regargs
makedir (char *path)
{
	char *newname = NULL, *end;
	BPTR lock;
	LONG i, rc = FALSE;;

	end = PathPart(path);
	if (end == path)
		return rc;	// at root of path - we failed

	newname = AllocVec((end+1) - path,0);
	if (!newname)
		return rc;

	// copy up to, but not including, *end - gives us parent
	for (i = 0; i < end-path; i++)
		newname[i] = path[i];
	newname[i] = '\0';

	if (lock = createdir(newname))
	{
		freeobj(lock);
		rc = DOSTRUE;
	} else {
		// if we couldn't make it because of higher dirs needed,
		// recurse...
		if (getresult2() == ERROR_OBJECT_NOT_FOUND)
			rc = makedir(newname);
	}
	if (newname)
		FreeVec(newname);
	return rc;
}

void __regargs
addvar (struct List *list, struct LocalVar *nlv)
{
	struct LocalVar *lv;
	char *name = nlv->lv_Node.ln_Name;

	for (lv = (struct LocalVar *) list->lh_Head;
	     lv->lv_Node.ln_Succ;
	     lv = (struct LocalVar *) lv->lv_Node.ln_Succ)
	{
		/* is name > lv->lv_Name? */
		if (mystricmp(name,lv->lv_Node.ln_Name) < 0)
		{
			/* place before this node */
			Insert(list,&(nlv->lv_Node),lv->lv_Node.ln_Pred);
			return;
		}
	}
	AddTail(list,&(nlv->lv_Node));
}

struct LocalVar * ASM
FindVar (REG(d1) UBYTE *name, REG(d2) ULONG type)
{
	struct LocalVar *lv;

	/* local var - use list at end of process structure */
	for (lv = (struct LocalVar *) MYPROC->pr_LocalVars.mlh_Head;
	     lv->lv_Node.ln_Succ;
	     lv = (struct LocalVar *) lv->lv_Node.ln_Succ)
	{
		/* make sure we only compare the right bits of type! */
		if (mystricmp(name,lv->lv_Node.ln_Name) == SAME &&
		    (type & 0xff) == lv->lv_Node.ln_Type)
		{
			return lv;
		}
	}

	setresult2(ERROR_OBJECT_NOT_FOUND);
	return NULL;
}

/* size MUST be at least 1!! */
/* returns the number of characters read into the buffer. */
/* for success, IoErr has the size of the file. */
LONG ASM
GetVar (REG(d1) UBYTE *name, REG(d2) UBYTE *buffer, REG(d3) LONG size,
	REG(d4) ULONG flags)
{
	struct LocalVar *lv;
	BPTR fh;
	BPTR dirlock;
	BPTR olddir;
	LONG len,err,fsize;

	if (size == 0)
	{
		setresult2(ERROR_BAD_NUMBER);	/* not good, fix */
		return -1;
	}

	if (!(flags & GVF_GLOBAL_ONLY))
	{
		/* ignore aliases and already-expanded variables */
		lv = FindVar(name,flags & 0xff);
		if (lv)
		{
			/* doesn't work for size==0! */
			/* note: for xfer_text, lv_Len+1 means it will only */
			/* copy a max of lv_Len characters, then null-term. */
			/* note that lv_Len may be 0, and lv_Value == NULL. */
			len = size < lv->lv_Len+1 ? size : lv->lv_Len+1;
			if (!(flags & GVF_BINARY_VAR))
			{
				/* ignore binary, return 1 line, strip \n */
				/* set len so we can return the right value */
				len = xfer_text(buffer,lv->lv_Value,len) + 1;
			} else {
				/* Note: len includes space for NULL */
				/* note: we don't deref value if len=1 */
				if (flags & GVF_DONT_NULL_TERM)
					len++;
				else
					buffer[len-1] = '\0';

				if (len > 1)
					copyMem(lv->lv_Value,buffer,len-1);
			}

			setresult2(lv->lv_Len);
			return (len-1);
		}

		/* didn't find it - currently, don't search ramdisk - FIX! */
		if (flags & GVF_LOCAL_ONLY ||
		    ((flags & 0xff) != LV_VAR))
		{
			/* result2 set by FindVar */
			return -1;
		}
	}

	/* not found locally (or we didn't look), try global */

	if (!(dirlock = locateobj("ENV:")))
		return -1;				/* doesn't exist */

	olddir = CurrentDir(dirlock);		/* from here on, use error: */

	/* now open relative to that. */
	len = -1;
	if (fh = findstream(name,MODE_OLDFILE)) /* FIX! use readonly! */
	{
		// size can't be 0 here
		buffer[0] = '\0';		// in case we read 0 bytes
		len = read(fh,buffer,size);
		if (len > 0)
		{
			// DONT_NULL_TERM is ONLY valid for binary!
			if (!(flags & GVF_DONT_NULL_TERM)) {
				// We null-terminate unless otherwise specified
				// don't overrun buffer
				if (len == size)
					len--;
				buffer[len] = '\0';
			}
			/* find the first \n and terminate if text */
			if (!(flags & GVF_BINARY_VAR))
			{
				char *s = buffer;

				while (*s)
				{
					if (*s++ == '\n')
						*--s = '\0';
					/* will cause a break */
				}
				// return number of bytes not including null
				len = s - buffer;
			}
		} // else buffer[0] = 0

		/* get the file size, unless there was an error */
		if (len >= 0 && seek(fh,0L,OFFSET_END) >= 0) /* go to end */
		{
			fsize = seek(fh,0L,OFFSET_END);
			/* returns current pos of end of file */
		} else
			len = -1;	/* error */
	}

	/* don't kill ioerr */
	err = getresult2();
	if (fh)
		endstream(fh);
	freeobj(CurrentDir(olddir));

	if (len >= 0)		/* was there an error? */
		err = fsize;	/* no - IoErr is size of variable */

	setresult2(err);	/* restore IoErr (or size) */
	return len;		/* number of characters transferred */
}

/* transfer, ignoring control chars, one line, strip \n */

LONG __regargs
xfer_text (char *buffer, char *source, LONG len)
{
	char *buf = buffer;

	// must check len first to avoid dereferencing past end
	// use --len to reserve space for null at end
	while (--len > 0 &&
	       *source && *source != '\n' && *source != '\r')
	{
		*buf++ = *source++;
	}
	*buf = '\0';

	return (LONG) (buf-buffer);
}

LONG __regargs
copyvars (struct Process *np, struct Process *oldp)
{
	struct LocalVar *lv, *nlv;

	for (lv = (struct LocalVar *)
		  oldp->pr_LocalVars.mlh_Head;
	     lv->lv_Node.ln_Succ;
	     lv = (struct LocalVar *) lv->lv_Node.ln_Succ)
	{
		if (!(nlv = AllocVecPub(sizeof(*lv) +
				        strlen(lv->lv_Node.ln_Name) + 1)))
		{
			/* failure! */
			return FALSE;
		}
		/* copy name, etc */
		nlv->lv_Node.ln_Type = lv->lv_Node.ln_Type;
		nlv->lv_Node.ln_Name = ((char *) nlv) + sizeof(*nlv);
		strcpy(nlv->lv_Node.ln_Name,lv->lv_Node.ln_Name);

		nlv->lv_Flags = lv->lv_Flags;
		nlv->lv_Value = NULL;
		if (lv->lv_Len)
		{
			if (!(nlv->lv_Value = AllocMem(lv->lv_Len,0)))
			{
				/* failure! */
				freeVec(nlv);
				return FALSE;
			}
			copyMem(lv->lv_Value,nlv->lv_Value,lv->lv_Len);
		}
		nlv->lv_Len = lv->lv_Len;

		AddTail((struct List *) &(np->pr_LocalVars),
			(struct Node *) nlv);
	}

	return TRUE;
}

void __regargs
freevars (struct Process *proc)
{
	struct LocalVar *lv, *next;
	struct MinList *lv_head;

	lv_head = &(proc->pr_LocalVars);
	for (lv = (struct LocalVar *) lv_head->mlh_Head;		  
	     lv->lv_Node.ln_Succ;
	     lv = next)
	{
/*kprintf("Freeing var %s (%ld), type = %ld\n",lv->lv_Node.ln_Name,lv->lv_Len,
lv->lv_Node.ln_Type);*/
		next = (struct LocalVar *) lv->lv_Node.ln_Succ;
		if (lv->lv_Value)
			FreeMem(lv->lv_Value,lv->lv_Len);
		freeVec(lv);
	}

	/* it's empty now */
	NewList((struct List *) lv_head);
}
@


36.35
log
@Preserve error and exit so ioerr is correct
@
text
@@


36.34
log
@Fixed (harmless) angel hit, and in the process saved 28 bytes
It should check bufferlength before dereferencing pointers
@
text
@d38 1
a38 1
	LONG rc = FALSE;
d126 1
d153 15
d181 37
@


36.33
log
@make DONT_NULL_TERM work for globals
@
text
@d340 4
a343 3
	len--;		/* reserve space for null */

	if (len > 0)	/* so we don't dereference source if len was 1 */
d345 1
a345 6
		while (*source)
		{
			if (*source == '\n' || *source == '\r' || len-- <= 0)
				break;
			*buf++ = *source++;
		}
@


36.32
log
@Added GVF_SAVE_VAR
@
text
@d139 1
a139 1
		/* MODE_READWRITE is exclusive??? */
a272 2
	len = -1;	/* in case we goto error */

d276 1
a276 1
	olddir = CurrentDir(dirlock);		  /* from here on, use error: */
d279 2
a280 1
	if (fh = findstream(name,MODE_OLDFILE))		/* FIX! use readonly! */
d282 4
a285 1
		if (size > 1)
d287 8
a294 8
			len = read(fh,buffer,size-1);
		} else
			len = 0;

		if (len >= 0)
		{
			buffer[len] = '\0';

d304 1
a304 1
						  /* will cause a break */
d306 2
d309 1
d311 7
a317 8
			/* get the file size */
			if (seek(fh,0L,OFFSET_END) >= 0) /* go to end */
			{
				fsize = seek(fh,0L,OFFSET_END);
				/* returns current pos of end of file */
			} else
				len = -1;	/* error */
		}
d326 2
a327 4
	if (len < 0)		/* was there an error? */
		len = -1;
	else
		err = fsize;	/* IoErr is size of variable */
@


36.31
log
@Copy flags when copying vars!
@
text
@d126 1
a126 3
	olddir = CurrentDir(dirlock);

	if (buffer == NULL)	/* means delete */
d128 1
a128 4
		/* delete the variable */
		rc = deletefile(name);
		goto free_dir;
	}
d130 1
a130 8
	/* now open relative to that.  */
	/* MODE_READWRITE creates if non-existant!!!! */
	/* MODE_READWRITE is exclusive??? */
	if (fh = findstream(name,MODE_READWRITE))
	{
		/* file is open.  Write, then truncate. */
		/* Write of 0 bytes should return 0 */
		if (write(fh,buffer,size) == size)
d132 3
a134 3
			/* make sure the var ends here */
			if (SetFileSize(fh,0,OFFSET_CURRENT) != -1)
				rc = DOSTRUE;
a135 3
		if (!endstream(fh))
			rc = FALSE;	/* ERROR on close(!) */
	}
d137 16
d154 11
a164 1
	freeobj(CurrentDir(olddir));
@


36.30
log
@Add the binary flag to lv_Flags if specified in SetVar.
@
text
@d364 1
@


36.29
log
@Alloc var structure clear (lv_Flags wasn't being cleared)
@
text
@d78 1
@


36.28
log
@Added no null termination
@
text
@d93 1
a93 1
		if (!(lv = AllocVecPub(sizeof(*lv) + strlen(name) + 1)))
@


36.27
log
@Use copyMem instead of memcpy
@
text
@d237 5
a243 1
				buffer[len-1] = '\0';
@


36.26
log
@return size in buffer, ioerr is full size of var
@
text
@d79 1
a79 1
					CopyMem(buffer,newvalue,size);
d238 1
a238 1
					CopyMem(lv->lv_Value,buffer,len-1);
d368 1
a368 1
			CopyMem(lv->lv_Value,nlv->lv_Value,lv->lv_Len);
@


36.25
log
@Handle 0-length SetVar's.  Lots of little changes.  Also use CopyMem,
not memcpy.
@
text
@d200 2
a201 1

d210 1
a210 1
	LONG len,err;
d232 2
a233 1
				xfer_text(buffer,lv->lv_Value,len);
d242 2
a243 1
			return (LONG) lv->lv_Len;
d291 1
a291 1
			if ((len = seek(fh,0L,OFFSET_END)) >= 0) /* go to end */
d293 1
a293 1
				len = seek(fh,0L,OFFSET_END);
d295 2
a296 1
			}
d308 2
d311 2
a312 2
	setresult2(err);	/* restore IoErr */
	return len;
@


36.24
log
@FreeVec->freeVec (space saving)
@
text
@d48 2
a49 1
		if (buffer)
d63 3
a65 1
				FreeMem((char *) lv->lv_Value,lv->lv_Len);
d78 2
a79 1
				memcpy(newvalue,buffer,size);
d140 1
d223 1
a223 1
			/* doesn't work for size 0! */
d226 1
d234 1
d236 1
a236 1
					memcpy(buffer,lv->lv_Value,len-1);
d318 1
a318 1
	while (*source)
d320 6
a325 3
		if (*source == '\n' || *source == '\r' || len-- <= 0)
			break;
		*buf++ = *source++;
d353 2
a354 1
		if (!(nlv->lv_Value = AllocMem(lv->lv_Len,0)))
d356 7
a362 3
			/* failure! */
			freeVec(nlv);
			return FALSE;
a364 1
		CopyMem(lv->lv_Value,nlv->lv_Value,lv->lv_Len);
d387 2
a388 1
		FreeMem(lv->lv_Value,lv->lv_Len);
@


36.23
log
@exec_old_pragmas.h
@
text
@d68 1
a68 1
					FreeVec(lv);
d346 1
a346 1
			FreeVec(nlv);
d374 1
a374 1
		FreeVec(lv);
@


36.22
log
@And off type from flags, add param to freevars
@
text
@d16 1
a16 1
#include <pragmas/exec_pragmas.h>
@


36.21
log
@Fixed length problems  with local vars.
@
text
@d182 1
d184 1
a184 1
		    type == lv->lv_Node.ln_Type)
d360 1
a360 1
freevars ()
d365 1
a365 1
	lv_head = &(MYPROC->pr_LocalVars);
@


36.20
log
@lattice can now handle d4 as a parameter
@
text
@d218 3
a220 1
			len = size < lv->lv_Len+1 ? size-1 : lv->lv_Len;
d226 4
a229 3
				if (len > 0)
					memcpy(buffer,lv->lv_Value,len);
				buffer[len] = '\0';
@


36.19
log
@Re-added length checking to xfer_text.  tested it, it works, shell has a bug.
@
text
@d32 1
a32 1
	REG(d0) ULONG flags)
d197 1
a197 1
	REG(d0) ULONG flags)
@


36.18
log
@Bryce here.  Fixing bogus attempt at length check.  Truncated aliases
@
text
@d305 2
d309 1
a309 1
		if (*source == '\n' || *source == '\r')
@


36.17
log
@Added length checking to xfer_text
@
text
@a304 1
	len--;			/* save space for null */
a309 2
		if (!(--len))		/* stop if no more space */
			break;
@


36.16
log
@A BUNCH of changes.  I forget why, and am too spaced to care.
@
text
@d305 1
d311 2
@


36.15
log
@Made SetVar of null-terminated strings not store the null
@
text
@d14 1
a14 1
#include <clib/alib_protos.h>
d133 1
a133 1
	if (!(fh = findstream(name,MODE_READWRITE)))
d135 2
a136 4
		goto error;
#ifdef OLD_READWRITE
/* This code assumes the 1.3 actions of MODE_READWRITE */
		if (getresult2() != ERROR_OBJECT_NOT_FOUND)
d138 3
a140 2
			/* Something wierd, like locked for write */
			goto error;
d142 2
a143 4
		/* doesn't exist - create it */
		if (!(fh = findstream(name,MODE_NEWFILE)))
			goto error;
#endif
a144 3
	/* file is open.  Write, then truncate. */
	if (write(fh,buffer,size) != size)
		goto error;
a145 9
	/* make sure the var ends here */
	if (truncate(fh,0,OFFSET_CURRENT) == -1)
		goto error;

	rc = DOSTRUE;
error:
	if (fh)
		if (!endstream(fh))
			rc = FALSE;	/* ERROR on close(!) */
d246 1
a246 1
		return -1;				/* deosn't exist */
d248 1
a248 1
	olddir = CurrentDir(dirlock);	/* from here on, use error: */
d251 1
a251 4
	if (!(fh = findstream(name,MODE_OLDFILE)))	/* FIX! use readonly! */
		goto error;

	if (size > 1)
d253 5
a257 3
		len = read(fh,buffer,size-1);
	} else
		len = 0;
d259 3
a261 2
	if (len < 0)
		goto error;
d263 4
a266 1
	buffer[len] = '\0';
d268 7
a274 4
	/* find the first \n and terminate if text */
	if (!(flags & GVF_BINARY_VAR))
	{
		char *s = buffer;
d276 6
a281 4
		while (*s)
		{
			if (*s++ == '\n')
				*--s = '\0';  /* will cause a break */
a284 9
	/* get the file size */

	if ((len = seek(fh,0L,OFFSET_END)) < 0)		/* go to end */
		goto error;

	if ((len = seek(fh,0L,OFFSET_END)) < 0) /* returns current pos */
		goto error;

error:
d294 1
a294 1
	setresult2(err);
@


36.14
log
@Correct check of truncate() return code
@
text
@d42 1
a42 1
		size = strlen(buffer)+1;	/* include NULL */
@


36.13
log
@Comments added, commented out dead code (due to mode_readwrite semantic
change).
Made freevars empty the list as well.
@
text
@d132 1
d153 1
a153 1
	if (!truncate(fh,0,OFFSET_CURRENT))
@


36.12
log
@Fixes size of buffer for null-terminated case.
@
text
@d14 1
d61 1
d130 3
a132 2
	/* now open relative to that.  First try exclusive oldfile. */
	if (!(fh = findstream(name,MODE_READWRITE)))  /* FIX??? */
d134 3
d145 1
d372 1
d374 2
a375 2
	for (lv = (struct LocalVar *)
		  MYPROC->pr_LocalVars.mlh_Head;
d379 2
a380 1
/*kprintf("Freeing var %s (%ld)\n",lv->lv_Name,lv->lv_Len);*/
d385 3
a388 1

@


36.11
log
@for rcs 4.x header change
@
text
@a18 3
#define AllocNew(x) ((struct x *) AllocMem(sizeof(struct x),\
					   MEMF_PUBLIC|MEMF_CLEAR));

d41 1
a41 1
		size = strlen(buffer);
@


36.10
log
@Switched TEXT/BINARY
@
text
@@


36.9
log
@getvec->AllocVec, etc
@
text
@d229 1
a229 1
			if (flags & GVF_TEXT_VAR)
d276 1
a276 1
	if (flags & GVF_TEXT_VAR)
@


36.8
log
@Add TEXT flag for jimm
@
text
@a12 1
#ifdef LATTICE
d14 2
a15 1
#include "proto/exec.h"
a17 1
#endif
d69 1
a69 1
					freevec(lv);
d90 1
a90 1
		if (!(lv = AllocVec(sizeof(*lv) + strlen(name) + 1)))
d337 2
a338 2
		if (!(nlv = AllocVec(sizeof(*lv) +
			    strlen(lv->lv_Node.ln_Name) + 1)))
d351 1
a351 1
			freevec(nlv);
d377 1
a377 1
		freevec(lv);
@


36.7
log
@GetVar of size 0 is disallowed, check for size 1 a few place, right error
code if ENV: doesn't exist.
@
text
@d230 9
a238 3
			if (len > 0)
				memcpy(buffer,lv->lv_Value,len);
			buffer[len] = '\0';
d276 12
d308 18
@


36.6
log
@Check type  on SetVar
@
text
@d204 2
d216 6
d228 1
d230 2
a231 1
			memcpy(buffer,lv->lv_Value,len);
d251 1
a251 1
		return 0;				/* deosn't exist */
d253 1
a253 1
	olddir = CurrentDir(dirlock);
d259 6
a264 1
	len = read(fh,buffer,size-1);
@


36.5
log
@Fixed Getvar for non-Variables
@
text
@d61 1
a61 1
			    (flags & 0xff))
@


36.4
log
@Everything changed.  Major redesign of internal storage, including types.
@
text
@d6 3
a8 3
#include "libraries/dos.h"
#include "libraries/var.h"
#include "libraries/dosextens.h"
d217 1
a217 2
		/* Fix! what about other, newer values? */
		lv = FindVar(name,LV_VAR);
@


36.3
log
@They work now.
@
text
@d31 2
d57 2
a58 2
		     lv->lv_Node.mln_Succ;
		     lv = (struct LocalVar *) lv->lv_Node.mln_Succ)
d60 2
a61 1
			if (mystricmp(name,lv->lv_Name) == SAME)
d69 1
a69 1
					Remove((struct Node *) lv);
d98 3
a100 2
		lv->lv_Name = ((char *) lv) + sizeof(*lv);
		strcpy(lv->lv_Name,name);
d112 3
a114 1
	if (flags & GVF_LOCAL_ONLY)
d166 1
a166 1
	char *name = nlv->lv_Name;
d169 2
a170 2
	     lv->lv_Node.mln_Succ;
	     lv = (struct LocalVar *) lv->lv_Node.mln_Succ)
d173 1
a173 1
		if (mystricmp(name,lv->lv_Name) < 0)
d176 1
a176 2
			Insert(list,(struct Node *) nlv,
				    (struct Node *) lv->lv_Node.mln_Pred);
d180 1
a180 1
	AddTail(list,(struct Node *) nlv);
d183 21
d212 1
a212 1
	LONG len;
d216 4
a219 4
		/* local var - use list at end of process structure */
		for (lv = (struct LocalVar *) MYPROC->pr_LocalVars.mlh_Head;
		     lv->lv_Node.mln_Succ;
		     lv = (struct LocalVar *) lv->lv_Node.mln_Succ)
d221 3
a223 3
			if (mystricmp(name,lv->lv_Name) == SAME)
			{
				len = size < lv->lv_Len+1 ? size-1 : lv->lv_Len;
d225 1
a225 6
				memcpy(buffer,lv->lv_Value,len);

				buffer[len] = '\0';

				return (LONG) lv->lv_Len;
			}
d228 3
a230 2
		/* didn't find it */
		if (flags & GVF_LOCAL_ONLY)
d232 1
a232 1
			setresult2(ERROR_OBJECT_NOT_FOUND);
d265 2
d274 1
d285 2
a286 2
	     lv->lv_Node.mln_Succ;
	     lv = (struct LocalVar *) lv->lv_Node.mln_Succ)
d288 2
a289 1
		if (!(nlv = AllocVec(sizeof(*lv) + strlen(lv->lv_Name) + 1)))
d294 4
a297 3
		/* copy name */
		nlv->lv_Name = ((char *) nlv) + sizeof(*nlv);
		strcpy(nlv->lv_Name,lv->lv_Name);
d322 1
a322 1
	     lv->lv_Node.mln_Succ;
d326 1
a326 1
		next = (struct LocalVar *) lv->lv_Node.mln_Succ;
@


36.2
log
@It didn't ever set the name of a variable(!)
Added copyvars/freevars
@
text
@d98 2
a99 2
		AddHead((struct List *) &(MYPROC->pr_LocalVars),
			(struct Node *) lv);
d114 1
a114 2
	dirlock = locateobj("ENV:");
	if (!dirlock)
d119 1
a119 1
	if (buffer == NULL)
d127 1
a127 2
	fh = findstream(name,MODE_READWRITE);  /* FIX??? */
	if (!fh)
d132 1
a132 1
			goto free_dir;
d135 2
a136 3
		fh = findstream(name,MODE_NEWFILE);
		if (!fh)
			goto free_dir;
a145 4
	/* for fun, check close() error code */
	if (!endstream(fh))
		goto free_dir;

d149 2
a150 1
		endstream(fh);
d156 5
d162 16
a215 1
	len = -1;
d217 1
a217 3
	dirlock = locateobj("ENV:");
	if (!dirlock)
		return 0;
d219 3
d225 1
a225 2
	fh = findstream(name,MODE_OLDFILE);	/* FIX! use readonly! */
	if (!fh)
a241 3
	if (!endstream(fh))		/* check for close errors */
		len = -1;

d298 1
a298 1
kprintf("Freeing var %s (%ld)\n",lv->lv_Name,lv->lv_Len);
@


36.1
log
@Created.
@
text
@d5 1
d54 1
a54 3
		for (lv = (struct LocalVar *)
			  ((struct Process *)
			   FindTask(0))->pr_LocalVars.mlh_Head;
d88 1
a88 1
		if (!(lv = AllocVec(sizeof(*lv))))
d95 4
a98 2
		AddHead((struct List *)
			  &(((struct Process *) FindTask(0))->pr_LocalVars),
d176 1
a176 3
		for (lv = (struct LocalVar *)
			  ((struct Process *)
			   FindTask(0))->pr_LocalVars.mlh_Head;
d241 53
@
