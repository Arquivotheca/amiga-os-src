head     36.32;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.32
date     92.04.07.00.59.26;  author jesup;  state Exp;
branches ;
next     36.31;

36.31
date     92.04.05.23.52.43;  author jesup;  state Exp;
branches ;
next     36.30;

36.30
date     91.05.08.23.30.17;  author jesup;  state Exp;
branches ;
next     36.29;

36.29
date     91.04.10.19.27.39;  author jesup;  state Exp;
branches ;
next     36.28;

36.28
date     91.01.31.21.31.02;  author jesup;  state Exp;
branches ;
next     36.27;

36.27
date     91.01.17.14.33.08;  author jesup;  state Exp;
branches ;
next     36.26;

36.26
date     90.12.10.20.38.54;  author jesup;  state Exp;
branches ;
next     36.25;

36.25
date     90.11.30.03.45.54;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     90.11.21.02.43.30;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     90.06.13.02.32.18;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     90.06.12.05.38.42;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.05.22.16.42.58;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.05.09.02.22.34;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.04.09.18.10.52;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.04.07.00.20.05;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.04.06.12.05.20;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.04.04.03.07.44;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.04.03.05.14.40;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.04.03.04.41.39;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     89.12.16.19.54.56;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     89.12.15.05.15.09;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     89.12.10.22.39.10;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     89.12.09.11.07.58;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     89.12.08.07.29.36;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     89.12.05.21.45.40;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     89.12.03.14.50.50;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.11.22.03.26.43;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.11.14.01.38.50;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.10.24.18.37.50;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.18.04.36.18;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.09.21.22.10.13;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.06.23;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.32
log
@filehandle->newfilehandle
@
text
@/* blib_protos.h */
/* use ANSI token concatenation operator - ## */

#define ASM __asm
#define REG(x)	register __ ## x

LONG ASM fault (REG(d1) LONG code, REG(d2) UBYTE *header);	/* GLOBAL */
void ASM cpymax (REG(a0) UBYTE **dest, REG(a1) UBYTE *src,
		 REG(a2) ULONG *len);
LONG ASM Fault (REG(d1) LONG code, REG(d2) UBYTE *header,
		REG(d3) UBYTE *buffer, REG(d4) LONG len);	/* NEW */
BPTR ASM noreqloadseg (REG(d1) char *name);			/* GLOBAL */
LONG ASM err_report (REG(d1) LONG type,REG(d2) BPTR arg,	/* GLOBAL */
		     REG(d3) struct MsgPort *arg2);

LONG ASM ErrorReport (REG(d1) LONG code, REG(d2) LONG type,	/* NEW */
		      REG(d3) BPTR arg,
		      REG(d4) struct MsgPort *arg2);

void __regargs closedisk (struct MsgPort *task);

void ASM endtask (REG(d1) BPTR seg);				/* GLOBAL */
void ASM dotimer (REG(d1) LONG request,				/* GLOBAL */
		  REG(d2) struct timerequest *iob,
		  REG(d3) LONG secs,
		  REG(d4) LONG micro);
void ASM delay (REG(d1) ULONG ticks);				/* GLOBAL */

/* BCPL io routines, equivalent to stdio */
LONG ASM rdch (void);						/* GLOBAL */
LONG ASM FGetC (REG(d1) BPTR fh);				/* GLOBAL */
LONG ASM UnGetC (REG(d1) BPTR fh, REG(d2) LONG ch);		/* GLOBAL */
LONG ASM waitforchar (REG(d1) BPTR scb, REG(d2) LONG timeout);	/* GLOBAL */
void ASM wrch (REG(d1) LONG ch);				/* GLOBAL */
LONG ASM FPutC (REG(d1) BPTR fh, REG(d2) LONG ch);		/* GLOBAL */
LONG ASM Flush (REG(d1) BPTR fh);				/* NEW */
LONG ASM SetVBuf (REG(d1) BPTR fh, REG(d2) UBYTE *buff,
		  REG(d3) LONG type, REG(d4) LONG size);	/* NEW */
LONG __regargs BufferSize(struct NewFileHandle *scb);
LONG __regargs replenish (LONG end, struct FileHandle *cis);
LONG __regargs deplete (struct FileHandle *cos);

BPTR ASM findinput (REG(d1) char *string);			/* GLOBAL */
BPTR ASM findoutput (REG(d1) char *string);			/* GLOBAL */

/* device and volume routines */
struct MsgPort * ASM deviceproc (REG(d1) char *name);		/* GLOBAL */
struct DevProc * ASM getdevproc (REG(d1) char *name,
				 REG(d2) struct DevProc *old_dp); /* NEW */
void ASM freedevproc (REG(d1) struct DevProc *dp);		  /* NEW */
struct DosList * ASM finddev (REG(d1) char *name,		/* GLOBAL */
			      REG(d2) LONG devonly);
struct MsgPort * ASM loaddevice (REG(d1) struct DosList *node,	/* GLOBAL */
				 REG(d2) BPTR string);

/* BCPL buffering routines */
void ASM init_scb (REG(d1) struct FileHandle *fhb, REG(d2) ULONG type);
BPTR ASM findstream (REG(d1) char *string,REG(d2) LONG act);
char * __regargs actinitcommon (struct NewFileHandle *scb);
extern LONG __regargs actreadinit (struct NewFileHandle *scb);
LONG __regargs actread (struct FileHandle *scb);
LONG __regargs actend (struct FileHandle *scb);
LONG __regargs actendread (struct FileHandle *scb);
LONG __regargs actwriteinit (struct NewFileHandle *scb);
LONG __regargs actwrite (struct FileHandle *scb);
LONG __regargs actendwrite (struct FileHandle *scb);

LONG ASM endread (void);					/* GLOBAL */
LONG ASM endwrite (void);					/* GLOBAL */
LONG ASM endstream (REG(d1) BPTR scb);				/* GLOBAL */

/* BCPL formatted IO routines */
LONG ASM readn (void);						/* GLOBAL */
void ASM newline (void);					/* GLOBAL */
void ASM writed   (REG(d1) LONG n, REG(d2) LONG d);		/* GLOBAL */
void ASM writen   (REG(d1) LONG n);				/* GLOBAL */
void ASM writehex (REG(d1) LONG n, REG(d2) LONG d);		/* GLOBAL */
void ASM writeoct (REG(d1) LONG n, REG(d2) LONG d);		/* GLOBAL */
void ASM bwrites  (REG(d1) BSTR s);				/* GLOBAL */
void ASM bwritet  (REG(d1) BSTR s, REG(d2) LONG n);		/* GLOBAL */
void ASM writes   (REG(d1) UBYTE *s);
void ASM writet   (REG(d1) LONG s, REG(d2) LONG n);
void ASM writeu   (REG(d1) ULONG n,REG(d2) LONG d);
void ASM bwritef  (REG(d1) char *format, REG(d2) LONG *t,	/* GLOBAL */
		   REG(d3) LONG isbcpl);

LONG ASM FRead (REG(d1) BPTR fh, REG(d2) UBYTE *block, REG(d3) LONG blocklen,
		REG(d4) LONG number);
LONG ASM WriteChars (REG(d1) UBYTE *buffer, REG(d2) LONG buflen);
LONG ASM FWrite (REG(d1) BPTR fh, REG(d2) UBYTE *block, REG(d3) LONG blocklen,
		 REG(d4) LONG number);
LONG ASM FPuts (REG(d1) BPTR fh, REG(d2) UBYTE *str);		/* NEW */
LONG ASM PutStr (REG(d1) UBYTE *str);				/* NEW */
UBYTE * ASM FGets (REG(d1) BPTR fh, REG(d2) UBYTE *buf, REG(d3) ULONG len);
void ASM VFWritef (REG(d1) BPTR fh, REG(d2) UBYTE *format,	/* NEW */
		   REG(d3) LONG *argv);
void __stdargs writef (char *format,LONG a, ...);		/* GLOBAL */
LONG ASM VPrintf (REG(d1) UBYTE *fmt,REG(d2) LONG *argv);	/* NEW */
LONG ASM VFPrintf (REG(d1) BPTR fh, REG(d2) UBYTE *fmt,		/* NEW */
		   REG(d3) LONG *argv);
void ASM myputch (REG(d0) LONG ch, REG(a3) LONG *numwritten);

/* general library routines, mostly packet sending */
LONG * ASM makeglob (REG(d1) LONG *segl);			/* GLOBAL */
LONG ASM isinteractive (REG(d1) BPTR s);			/* GLOBAL */
struct DateStamp * ASM datstamp (REG(d1) struct DateStamp *v);	/* GLOBAL */
void ASM setdosdate (REG(d1) struct DateStamp *v);		/* GLOBAL */

/* these are NOT in the global vector (see dir.b for example)!! */
LONG ASM do_lock (REG(d1) BPTR lock, REG(a0) LONG *args,
		  REG(d0) LONG action);
LONG ASM examine (REG(d1) BPTR lock,
		  REG(d2) struct FileInfoBlock *fib);
LONG ASM exnext  (REG(d1) BPTR lock,
		  REG(d2) struct FileInfoBlock *fib);
LONG ASM info    (REG(d1) BPTR lock,
		  REG(d2) struct FileInfoBlock *fib);
LONG ASM changemode (REG(d1) LONG type, REG(d2) BPTR fh,
		     REG(d3) LONG newmode);			/* NEW */
LONG ASM ExamineFH (REG(d1) BPTR lock,
		    REG(d2) struct FileInfoBlock *fib);		/* NEW */

LONG ASM parent  (REG(d1) BPTR lock);				/* GLOBAL */
BPTR ASM ParentOfFH (REG(d1) BPTR fh);				/* NEW */
LONG ASM copydir (REG(d1) BPTR dir);				/* GLOBAL */

/* all the objact packet-senders */
LONG ASM setcomment (REG(d1) char *name,			/* GLOBAL */
		     REG(d2) char *comment);
LONG ASM setprotection (REG(d1) char *name, REG(d2) LONG mask);	/* GLOBAL */
LONG ASM setdate (REG(d1) char *name,
		  REG(d2) struct DateStamp *date);		/* NEW */
LONG ASM deletefile (REG(d1) char *name);			/* GLOBAL */
LONG ASM createdir (REG(d1) char *name);			/* GLOBAL */
LONG ASM lock (REG(d1) char *name,REG(d2) LONG mode);		/* GLOBAL */
LONG ASM locateobj (REG(d1) char *name);			/* GLOBAL */
LONG ASM objact    (REG(d1) char *name, REG(d2) LONG action,
		    REG(d3) LONG *arg);

LONG ASM renameobj (REG(d1) char *fromname,			/* GLOBAL */
		    REG(d2) char *toname);
void ASM freeobj (REG(d1) BPTR lock);				/* GLOBAL */

LONG ASM CompareDates(REG(d1) struct DateStamp *date1,
		      REG(d2) struct DateStamp *date2);		/* GLOBAL */

LONG ASM read (REG(d1) BPTR scb,				/* GLOBAL */
	       REG(d2) char *v,
	       REG(d3) LONG n);
LONG ASM readwrite (REG(d1) BPTR scb,REG(a0) LONG *args,REG(d0) LONG code);
LONG ASM readbytes (REG(d1) char *v,REG(d2) LONG n);		/* GLOBAL */
LONG ASM readwords (REG(d1) BPTR v,REG(d2) LONG n);		/* GLOBAL */
LONG ASM write (REG(d1) BPTR scb,				/* GLOBAL */
		REG(d2) char *v,
		REG(d3) LONG n);
LONG ASM writebytes (REG(d1) char *v,REG(d2) LONG n);		/* GLOBAL */
LONG ASM writewords (REG(d1) BPTR v,REG(d2) LONG n);		/* GLOBAL */

LONG ASM seek (REG(d1) BPTR scb,				/* GLOBAL */
	       REG(d2) LONG pos,
	       REG(d3) LONG mode);
LONG ASM noflushseek (REG(d1) BPTR scb,				/* NEW */
		      REG(d2) LONG pos,
		      REG(d3) LONG mode);
LONG ASM SetFileSize (REG(d1) BPTR scb,				/* NEW */
	              REG(d2) LONG pos,
	              REG(d3) LONG mode);
LONG ASM setmode (REG(d1) BPTR fh, REG(d2) LONG mode);		/* NEW */
BPTR ASM DupLockFromFH (REG(d1) BPTR fh);			/* NEW */
BPTR ASM ParentFH (REG(d1) BPTR fh);				/* NEW */
BPTR ASM OpenFromLock (REG(d1) BPTR lock);			/* NEW */
LONG ASM inhibit (REG(d1) char *name, REG(d2) LONG onoff);	/* NEW */
LONG ASM addbuffers (REG(d1) char *name, REG(d2) LONG number);	/* NEW */
LONG ASM isfilesystem (REG(d1) char *name);			/* NEW */
LONG ASM relabel (REG(d1) char *drive,REG(d2) char *newname);	/* NEW */
LONG ASM Format (REG(d1) char *drive,REG(d2) char *volumename,
		 REG(d3) ULONG private);			/* NEW */
LONG ASM devact_str (REG(d1) char *drive, REG(d2) char *string,
		     REG(d3) ULONG arg, REG(d0) LONG action);
LONG ASM devact (REG(d1) char *name, REG(d2) LONG arg1,		/* NEW */
		 REG(d3) LONG arg2,  REG(d0) LONG action);
LONG ASM CurrentDir (REG(d1) BPTR dir);				/* GLOBAL */
LONG ASM SameLock (REG(d1) BPTR l1, REG(d2) BPTR l2);		/* NEW */
LONG ASM ReadLink (REG(d1) struct MsgPort *port, REG(d2) BPTR lock,
		   REG(d3) UBYTE *path,REG(d0) UBYTE *buffer,
		   REG(a0) ULONG size);				/* NEW */
LONG ASM MakeLink (REG(d1) char *name,REG(d2) LONG dest,
		   REG(d3) LONG soft);				/* NEW */

UBYTE * ASM FilePart (REG(d1) UBYTE *path);			/* NEW */
UBYTE * ASM PathPart (REG(d1) UBYTE *path);			/* NEW */
LONG ASM AddPart (REG(d1) UBYTE *dirname, REG(d2) UBYTE *filename,
		  REG(d3) ULONG size);				/* NEW */
void * ASM AllocDosObject (REG(d1) ULONG type, REG(d2) struct TagItem *tags);
void ASM FreeDosObject (REG(d1) ULONG type, REG(d2) void *ptr);

/* exall.c */
LONG __stdargs fake_exall (BPTR lock, struct ExAllData *ed, LONG size,
			   LONG data, struct ExAllControl *ec);	/* NEW */
LONG __regargs fill_data (struct ExAllData *ed, ULONG data,	/* NEW */
			  struct FileInfoBlock *fib, LONG *size);

/* support2.asm */
LONG __regargs do_match (struct ExAllControl *ec, ULONG data,	/* NEW */
			 struct ExAllData *ed);
void __regargs getSysTime (struct timeval *val, struct Device *dev);

/* readargs.asm */
LONG ASM MatchPattern (REG(d1) UBYTE *pat, REG(d2) UBYTE *str); /* NEW */
LONG ASM MatchPatternNoCase (REG(d1) UBYTE *pat, REG(d2) UBYTE *str); /* NEW */
LONG ASM FindFirst (REG(d1) UBYTE *pat, REG(d2) struct AnchorPath *anchor);


char * __regargs mystrchr(char *ptr, int sep);
char * __regargs mystrrchr(char *ptr, int sep);

/* definitions */

#define finddevice(x)	finddev((x),TRUE)
#define locatedir(name) locateobj(name)
#define IoErr		getresult2
#define deleteobj(x)	deletefile(x)

#define strchr(x,y)	mystrchr((x),(y))
#define strrchr(x,y)	mystrrchr((x),(y))
@


36.31
log
@
@
text
@d59 2
a60 2
char * __regargs actinitcommon (struct FileHandle *scb);
extern LONG __regargs actreadinit (struct FileHandle *scb);
d64 1
a64 1
LONG __regargs actwriteinit (struct FileHandle *scb);
@


36.30
log
@Updated FLush to always return true
@
text
@d38 2
a39 2
		  REG(d3) LONG type, REG(d4) ULONG size);	/* NEW */

d57 1
a57 1
void ASM init_scb (REG(d1) struct FileHandle *scb, REG(d2) ULONG type);
@


36.29
log
@Added CompareDates
@
text
@d36 1
a36 1
void ASM Flush (REG(d1) BPTR fh);				/* NEW */
@


36.28
log
@Added devact_str, Format()
@
text
@d143 3
@


36.27
log
@y
added matchpatternnocase
@
text
@d173 4
@


36.26
log
@added getsystime
@
text
@d203 1
@


36.25
log
@d0->d4 changes
@
text
@d199 1
@


36.24
log
@*** empty log message ***
@
text
@d11 1
a11 1
		REG(d3) UBYTE *buffer, REG(d0) LONG len);	/* NEW */
d18 1
a18 1
		      REG(a0) struct MsgPort *arg2);
d26 1
a26 1
		  REG(d0) LONG micro);
d38 1
a38 1
		  REG(d3) LONG type, REG(d0) ULONG size);	/* NEW */
d88 1
a88 1
		REG(d0) LONG number);
d91 1
a91 1
		 REG(d0) LONG number);
@


36.23
log
@*** empty log message ***
@
text
@d37 2
d40 1
a40 1
LONG __regargs replenish (LONG end,struct FileHandle *cis);
d162 3
a164 3
LONG ASM truncate (REG(d1) BPTR scb,				/* NEW */
	           REG(d2) LONG pos,
	           REG(d3) LONG mode);
@


36.22
log
@*** empty log message ***
@
text
@d203 3
d212 3
@


36.21
log
@FputC returns a value
@
text
@d118 2
d122 1
@


36.20
log
@*** empty log message ***
@
text
@d35 1
a35 1
void ASM FPutC (REG(d1) BPTR fh, REG(d2) LONG ch);		/* GLOBAL */
d60 1
@


36.19
log
@Change to devact
@
text
@d196 1
@


36.18
log
@added noflushseek
@
text
@d168 1
a168 1
		 REG(d0) LONG action);
@


36.17
log
@fixed ioerr definition
@
text
@d91 1
a91 1
LONG ASM FGets (REG(d1) BPTR fh, REG(d2) UBYTE *buf, REG(d3) ULONG len);
d153 3
@


36.16
log
@Added fake_exall definitiions
@
text
@d199 1
a199 1
#define IoErr		getresult2()
@


36.15
log
@regargs->asm changes
@
text
@d181 14
@


36.14
log
@for rcs 4.x header change
@
text
@d72 11
a82 12
void __regargs writed (LONG n, LONG d);				/* GLOBAL */
void __regargs writen (LONG n);					/* GLOBAL */
void __regargs writehex (LONG n,LONG d);			/* GLOBAL */
void __regargs writeoct (LONG n,LONG d);			/* GLOBAL */
void __regargs bwrites (BSTR s);				/* GLOBAL */
void __regargs bwritet (BSTR s,LONG n);				/* GLOBAL */
void __regargs writes (LONG s);
void __regargs writet (LONG s,LONG n);
void __regargs writeu (ULONG n,LONG d);
void __regargs bwrch (LONG c);
void ASM bwritef (REG(d1) char *format, REG(d2) LONG *t,	/* GLOBAL */
		  REG(d3) LONG isbcpl);
@


36.13
log
@*** empty log message ***
@
text
@@


36.12
log
@Puts->PutStr, FileName, etc to FilePart, etc.  fixed DO_LOCK define
@
text
@d179 2
@


36.11
log
@*** empty log message ***
@
text
@d91 1
a91 1
LONG ASM Puts  (REG(d1) UBYTE *str);				/* NEW */
a107 1
#ifdef DO_LOCK
a109 5
#else
LONG ASM examineobj (REG(d1) BPTR lock,
	 	     REG(d2) struct FileInfoBlock *fib,
		     REG(d3) LONG action);
#endif
d175 3
a177 3
UBYTE * ASM FileName (REG(d1) UBYTE *path);			/* NEW */
UBYTE * ASM PathName (REG(d1) UBYTE *path);			/* NEW */
LONG ASM AddName (REG(d1) UBYTE *dirname, REG(d2) UBYTE *filename,
@


36.10
log
@*** empty log message ***
@
text
@d7 1
a7 1
void ASM fault (REG(d1) LONG code, REG(d2) UBYTE *header);	/* GLOBAL */
@


36.9
log
@Massie renaming, etc
@
text
@d87 1
d91 1
d96 1
@


36.8
log
@*** empty log message ***
@
text
@d31 2
a32 1
LONG ASM unrdch (void);						/* GLOBAL */
d35 2
a36 1
void ASM flush (REG(d1) BPTR fh);				/* NEW */
a78 1
LONG ASM WriteStr (REG(d1) UBYTE *str);				/* NEW */
d85 8
d94 2
a95 2
void __regargs Writef (UBYTE *format,LONG *argv);		/* NEW */
LONG __regargs BPrintf (UBYTE *fmt, LONG *argv);		/* NEW */
@


36.7
log
@*** empty log message ***
@
text
@d136 1
a136 2
LONG ASM readwrite (REG(d1) BPTR scb,REG(d2) char *v,REG(d3) LONG n,
		    REG(d0) LONG code);
d168 5
@


36.6
log
@*** empty log message ***
@
text
@d8 2
d95 7
a101 1
LONG ASM examineobj (REG(d1) BPTR lock, REG(d2) struct FileInfoBlock *fib,
d103 2
a104 1
LONG ASM examine (REG(d1) BPTR lock,				/* GLOBAL */
d106 1
a106 1
LONG ASM exnext  (REG(d1) BPTR lock,				/* GLOBAL */
d108 1
a108 1
LONG ASM info    (REG(d1) BPTR lock,				/* GLOBAL */
d110 2
d113 2
a114 1
LONG ASM parent (REG(d1) BPTR lock);				/* GLOBAL */
d126 2
a127 3
LONG ASM objact_noarg (REG(d1) char *name, REG(d2) LONG action);
LONG ASM objact       (REG(d1) char *name, REG(d2) LONG action,
		       REG(d3) LONG *arg);
d137 1
a137 1
		    REG(a0) LONG code);
a151 1
LONG ASM copydir (REG(d1) BPTR dir);				/* GLOBAL */
a152 2
LONG ASM changemode (REG(d1) LONG type, REG(d2) BPTR fh,
		     REG(d3) LONG newmode);			/* NEW */
d154 1
d160 2
a161 2
LONG ASM devact (REG(d1) char *name, REG(d2) LONG action,	/* NEW */
		 REG(d3) LONG arg1);
@


36.5
log
@*** empty log message ***
@
text
@d51 1
a88 3
LONG ASM execute (REG(d1) char *comm,				/* GLOBAL */
		  REG(d2) BPTR instr,
		  REG(d3) BPTR outstr);
d143 2
d149 1
@


36.4
log
@Fault changes
@
text
@d145 2
@


36.3
log
@*** empty log message ***
@
text
@d7 3
a9 1
void ASM fault (REG(d1) LONG code);				/* GLOBAL */
@


36.2
log
@Added Writef()
@
text
@d116 1
a116 1
		       REG(d3) LONG arg);
d149 6
@


36.1
log
@*** empty log message ***
@
text
@d80 1
@
