head     36.35;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.35
date     91.04.23.21.18.24;  author jesup;  state Exp;
branches ;
next     36.34;

36.34
date     91.03.15.14.12.35;  author jesup;  state Exp;
branches ;
next     36.33;

36.33
date     91.03.14.21.31.21;  author jesup;  state Exp;
branches ;
next     36.32;

36.32
date     91.02.19.02.08.59;  author jesup;  state Exp;
branches ;
next     36.31;

36.31
date     91.01.31.21.38.43;  author jesup;  state Exp;
branches ;
next     36.30;

36.30
date     91.01.17.14.08.30;  author jesup;  state Exp;
branches ;
next     36.29;

36.29
date     91.01.10.18.54.41;  author jesup;  state Exp;
branches ;
next     36.28;

36.28
date     90.12.19.19.18.07;  author jesup;  state Exp;
branches ;
next     36.27;

36.27
date     90.12.17.22.43.25;  author jesup;  state Exp;
branches ;
next     36.26;

36.26
date     90.12.16.03.30.24;  author jesup;  state Exp;
branches ;
next     36.25;

36.25
date     90.12.06.00.45.17;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     90.12.04.06.44.34;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     90.12.03.20.33.59;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     90.12.03.20.29.15;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.12.03.06.23.16;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.12.01.19.58.32;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.11.21.02.21.54;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.08.28.01.53.33;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.08.09.18.48.07;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.07.30.00.01.54;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.06.17.18.27.35;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.06.12.05.36.07;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.05.22.23.40.12;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.05.09.02.08.38;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.04.18.17.17.51;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.03.04.43.45;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.19.17.09.04;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.03.17.23.55.51;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.03.03.02.17.34;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.02.16.22.19.04;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.01.04.26.25;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.16.19.46.14;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.09.01.48.39;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.01.08.13.44;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.22.03.33.28;  author jesup;  state Exp;
branches ;
next     ;


desc
@Execute, System, etc.
@


36.35
log
@from system
@
text
@/* execute.c */

#include <exec/types.h>
#include <exec/io.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <utility/tagitem.h>
#include "dos/dos.h"
#include "dos/dosextens.h"
#include "dos/dostags.h"

#include <string.h>
#include <stddef.h>

#include "libhdr.h"
#include "cli_init.h"
#include "fault.h"

#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>
#include "klib_protos.h"
#include "blib_protos.h"
#include "cli_protos.h"
#include "crp_protos.h"

/* sizeof, but returns longs */
#define longsize(x)	((sizeof(x)+3) >> 2)

#define SAME		0		/* for string compares */

#define TOBPTR(x)	(((LONG) (x)) >> 2)


/* BCPL dos used BPTR to the buffers in the filehandles.  I want to use CPTRs
 * for speed reasons, but am leaving them a BPTRs until I can boot the new
 * dos to reduce possible problems using handles created by the old dos.
 * NOTE: must also change setting of the buffer!!! (marked by "FIX!")
 * ALSO NOTE: must change bcplio.c also!!!!
 * Can't do it: Execute/Run/NewCLI(?) use it also.  ARGH
 */

#ifdef NEWDOS
#define BUFFER(fh)	((UBYTE *) (fh)->fh_Buf)
#define TOBUFFER(buf)	(buf)
#else
#define BUFFER(fh)	((UBYTE *) BADDR((fh)->fh_Buf))
#define TOBUFFER(buf)	(TOBPTR(buf))
#endif

/*
// EXECUTE may be called in a variety of ways.

// EXECUTE( 0, instream, 0 )          invokes a background CLI (RUN)
// EXECUTE( "", windowstream, 0 )     invokes a new CLI (NEWCLI) or new shell
// Execute( "execute s:xxx-startup", windowstream, 0)
//				      invokes a newcli/shell with startup file
// EXECUTE( "command", 0, outstream ) executes command with output
//                                    to outstream
// EXECUTE( "command", 0, 0 )         executes command, output to * 

// Change: if output for run itself is redirected, the initial CLI
// may be closed, as run doesn't do a findoutput("*") in that case.
// Now uses the resident seglist
*/

extern char shellname[];
extern char bootshell[];

/*
 * This used to be c:Run, and Execute() would invoke it.  I have split off the
 * two functions, leaving little in Run (which now calls Execute()).
 */

LONG ASM
execute (REG(d1) char *comm,
	 REG(d2) BPTR instr,
	 REG(d3) BPTR outstr)
{
	return (internal_run(comm,bootshell,
			     RUN_EXECUTE,instr,outstr,NULL) == 0 ?
		DOSTRUE : FALSE);
}

/* does NOT continue reading from instr after done with command! */

LONG ASM
system (REG(d1) char *comm,
	REG(d2) struct TagItem *tags)
{
	BPTR in,out,asynch;
	char *shell;

/* FIX!!!!!! if NULL is specified, don't use input() (check cli_init_run)! */
	in     = getTagData(SYS_Input,input(),tags);
	out    = getTagData(SYS_Output,output(),tags);
	asynch = getTagData(SYS_Asynch,FALSE,tags);
	if (getTagData(SYS_UserShell,FALSE,tags))
	{
		/* user shell specified.  Use "Shell" off the resident list */
		shell = shellname;	/* "shell" */
	} else {
		/* did he specify a specific shell to send it to? */
		shell = (char *) getTagData(SYS_CustomShell,(LONG) bootshell,
					    tags);
	}

/*	err    = getTagData(SYS_Error,stderr(),tags);	*/

	/* if comm is NULL, this is Run calling us - make it look like Execute */
	/* Run should specify Usershell */
	return internal_run(comm,shell,
			    comm ? (asynch ? RUN_SYSTEM_ASYNCH : RUN_SYSTEM) :
				   RUN_EXECUTE,
			    in,out,tags);
}

/* these tags aren't allowed to be passed through */
Tag NotAllowedTags[] = {
	NP_Seglist,
	NP_FreeSeglist,
	NP_Entry,
	NP_Input,
	NP_Output,
	NP_CloseInput,
	NP_CloseOutput,
	NP_CurrentDir,		/* handled via packet */
	NP_HomeDir,		/* shell stuffs this  */
	NP_Cli,
	TAG_END,
};

/* this function is too big */

LONG __regargs
internal_run (char *command, char *shell, LONG type,
	      BPTR instr, BPTR outstr, struct TagItem *tags)
{
	struct Process *tid  = MYPROC;
	struct MsgPort *task;			/* the new process */
	BYTE pri = tid->pr_Task.tc_Node.ln_Pri;	/* use my current priority */
	LONG rc = -1, tnum;			/* -1 == error */
	struct DosPacket  *pkt = NULL;
	struct FileHandle *cvec;			/* no init needed */
	struct Segment *seg;
	char *svec;					/* buffer for fake fh */
	LONG len = command ? strlen(command) : 0;
	BPTR newcurrdir = NULL;
	/* put tags on stack, so we can modify seglist */
	/* We want the cli_init_run to do the funky stuff */
	struct TagItem *filtered_tags = NULL,*tag;
	/* can't move the first 3 items! */
	struct TagItem crptags[] = {
		{ NP_Seglist,NULL },	/* code depends on this being first */
		{ NP_WindowPtr, 0 },	/* and this being second */
		{ NP_Priority,0 },	/* and this third */
		{ NP_StackSize,800*4 },	/* and this fourth */
		{ NP_Path, NULL },
		{ NP_Name,(LONG) "Background CLI" },
		{ NP_FreeSeglist,FALSE },
		{ NP_Input,NULL },	/* set up by cli_init_run */
		{ NP_Output,NULL },
		{ NP_CloseInput,FALSE },
		{ NP_CloseOutput,FALSE },
/*		{ NP_Error,NULL },
		{ NP_CloseError,FALSE }, */
		{ NP_CurrentDir,NULL },
		{ NP_HomeDir,NULL },	/* shell sets cdir/homedir */
		{ NP_Cli,TRUE },
		{ TAG_MORE,NULL},	/* pass through tags after filter */
		{ TAG_END,NULL},	/* not really needed? */
	};
/*
 *  We need to be able to supply the input channel sperately from the command
 *  channel.  The way we'll do this is to look like a execute file to the
 *  shell (building a fake filehandle).  The shell uses cli_StandardInput
 *  as the input filehandle for invoked processes.  It uses cli_CurrentInput
 *  to read commands from.  What we'll do is set StandardInput to our input
 *  channel, and CurrentInput to our fake filehandle.  We also need to flag
 *  the shell (via the message and the rc from cli_init_run) that it should
 *  exit when it hits eof on the CurrentInput instead of continuing to read
 *  commands from StandardInput.
 */

/*kprintf("Execute/System(\"%s\",0x%lx,0x%lx, shell = %s, type = %ld)\n",
command,instr,outstr,shell,type);*/

	/* build fake fh if not Run */
	if (command)
	{
		/* safe, since cvec will be freeVec()ed, and it has no
		   actendread */
		cvec = (struct FileHandle * )
			AllocVecPubClear(sizeof(struct FileHandle) + 1 + len);
		if (!cvec)
			goto err;

		/* Create a suitable SCB */
		svec = (char *) ((LONG) cvec) + sizeof(struct FileHandle);
		copyMem(command,svec,len);	/* Copy over command string */
		svec[len] = '\n';		/* Terminate it with a '*N' */

		cvec->fh_Buf   = TOBPTR(svec);	/* must be on LW boundary */
		cvec->fh_End   = len+1;		/* Pos is 0 */

		/* some programs invoke at pri 20, and other stupid ones break */
		/* old execute happened to cause it to always be run at pri=0  */
		/* We do NOT limit it for Run! */
		if (type == RUN_EXECUTE)
			pri = 0;

	} else {
		/* This is C:Run.  It built a fake FH already for me. */
		/* The input/output streams will be NIL: or *. */
		cvec = (struct FileHandle *) BADDR(instr);
	}

	/* Why? FIX! */
/*	if (pri <= -123) goto err; */

	/* do this BEFORE creating process in case of failure! */
	if (!(pkt = AllocDosObject(DOS_STDPKT,NULL))) goto err;

	/* unfortunately, we MUST create Boot shell processes as BCPL */
	/* this is because we can have Shell-Seg installed as CLI     */
	/* No longer true.  I put it on the list as BootCLI, so a     */
	/* resident of CLI is ignored.  So I always use CreateNewProc */

	/* find the appropriate shell */
	seg = searchsegs(shell,NULL,TRUE);
	if (!seg)
		goto err;
	crptags[0].ti_Data = seg->seg_Seg;

	/* for synchronous calls, copy windowptr, else 0 */
	if (type != RUN_SYSTEM_ASYNCH)
		crptags[1].ti_Data = (LONG) tid->pr_WindowPtr;

	/* we can't put his taglist ahead of ours!!! */
	if (tag = findTagItem(NP_WindowPtr,tags))
		crptags[1].ti_Tag = TAG_IGNORE;

	/* Set the priority of the new task */
	crptags[2].ti_Data = pri;
	if (tag = findTagItem(NP_Priority,tags))	/* he speced, ignore */
		crptags[2].ti_Tag = TAG_IGNORE;

	/* use the same stacksize for the shell as the current process */
/*	crptags[3].ti_Data = tid->pr_StackSize*4;*/
/*
if (command)
kprintf("Would have set shell stack to %ld bytes for command %s\n",
tid->pr_StackSize*4,command);
else
kprintf("Would have set shell stack to %ld bytes for Run\n",
tid->pr_StackSize*4);
*/
	/* cli_init_run will check for path, and assume it's set   */
	/* if it finds one.					   */
	/* we set path to NULL for createnewproc, since it's	   */
	/* handled in cli_init_run.				   */

	if (!(filtered_tags = cloneTagItems(tags)))
		goto err;			 /* ran out of mem */

	/* handle tags that have to be passed via the packet */
	if (tag = findTagItem(NP_CurrentDir,tags))
		newcurrdir = tag->ti_Data;

	/* tricky calc so I don't need to know the size of crptags */
	/* TAG_END is last, TAG_MORE is second to last		   */ 
	crptags[sizeof(crptags)/sizeof(crptags[0]) - 2].ti_Data = 
		(LONG) filtered_tags;

	filterTagItems(filtered_tags,NotAllowedTags,TAGFILTER_NOT);

	task = (void *) CreateNewProc(crptags);
	if (!task)
		goto err;
	tnum = ((struct Process *) task)->pr_TaskNum;

/*kprintf("sending packet...\n");
{ int i; struct CommandLineInterface *clip;
clip = BADDR(((struct Process *) task)->pr_CLI);
if (clip) {
for (i  = 0; i < sizeof(*clip)/4; i++) {
kprintf("0x%lx ",((long *) clip)[i]);
if ((i+1)%4 == 0) kprintf("\n");}
if ((i+2)%4 != 0) kprintf("\n");
}
kprintf("\n");
}*/
	task = &(((struct Process *) task)->pr_MsgPort);

	/* make sure he only sees his stacksize, not the one we gave to CNP */
	/* note: we only pass HIS tags to cli_init_run!!! Therefore he      */
	/* can't see nay of my tags */
	
	/* send the startup packet to the new process. */

	/* The Run case uses arg3 to find out if redirection occurred */

	pkt->dp_Type = type;		/* RUN_EXECUTE or RUN_SYSTEM */
	pkt->dp_Res1 = 0;		/* MUST BE 0 */
	pkt->dp_Res2 = 0;		/* MUST BE 0 */
	pkt->dp_Arg1 = tid->pr_CLI;
	pkt->dp_Arg2 = instr;		/* for execute/system, not run */
	pkt->dp_Arg3 = outstr;		/* for execute/system, not run */
	pkt->dp_Arg4 = TOBPTR(cvec);	/* Command fh - all cases */
	pkt->dp_Arg5 = newcurrdir ? newcurrdir :
				    copydir(currentdir(FALSE,NULL));
	pkt->dp_Arg6 = (command != NULL); /* boolean - !is_run */
	pkt->dp_Arg7 = (LONG) filtered_tags;	/* so c_i_run can look */

	SendPkt(pkt,task,&(tid->pr_MsgPort));

	/* wait for packet to come back - immediate for run & sys_asynch */
	taskwait();

	/* for c:Run */
	if (!command) writef("[CLI %N]\n",tnum);

	/* for Execute and System synch, tell console handler to send	*/
	/* signals to this task again.					*/
	if (command != NULL && type != RUN_SYSTEM_ASYNCH && instr != NULL)
	{
		struct FileHandle *fh = BADDR(instr);

		if (fh->fh_Type) {
			sendpkt3(fh->fh_Type,ACTION_CHANGE_SIGNAL,
				 fh->fh_Arg1,(LONG) &(tid->pr_MsgPort),0);
		}
		/* ignore result */
	}

	/* get both return codes */
	/* For Execute(), if we ran it, always return success */
	/* if we got to here for Run, we have succeeded */
	/* run comes in via System, but with RUN_EXECUTE and NULL command */
	rc = ((type == RUN_EXECUTE && command) ? 0 : pkt->dp_Res1);

	/* don't lose things if shell startup failed! */
	/* if it succeeded, cli_init_run clears arg4 and arg5 */
	/* shell startup failed.  Always return -1 so caller cleans up */
	if (pkt->dp_Arg4) {
		rc = -1;			/* failure! */
		endstream(pkt->dp_Arg4);	/* cvec */
	}

	/* cli_init_run doesn't CurrentDir until after all failures! */
	/* it clears arg5 if it sets up the currentdir */
	freeobj(pkt->dp_Arg5);	/* even if passed in! (NULL is ok) */

	/* set secondary result after any other dos calls that hit it */
	setresult2(pkt->dp_Res2);

/*kprintf("execute returned (%ld,%ld)\n",rc,pkt->dp_Res2);*/
	/* cvec is freed by endstream - lucky! */
	cvec = NULL;  /* either owned by new shell or closed on error */

	/* the cli removes it's own tnum from array on exit */
err:
	if (filtered_tags) freeTagItems(filtered_tags);
	if (pkt) FreeDosObject(DOS_STDPKT,pkt);

	/* freeVec(NULL) is safe */
	freeVec(cvec);

	/* only writes if command succeeded, therefore it's ok to kill res2 */
	if (!command && rc)
		writes(getstring(STR_CANT_CREATE_PROC));

	return rc;
}

/* Must be called under Forbid()! */
/* find a free task number, creating if needed */

LONG __regargs
find_tnum (struct CliProcList **clip)
{
	struct CliProcList *cpl, *next;
	struct RootNode *rootnode = rootstruct();
	LONG tnum;

	/* check each small array of task numbers */
	for (cpl = (struct CliProcList *) rootnode->rn_CliList.mlh_Head;
	     cpl && cpl->cpl_Node.mln_Succ;
	     cpl = next)
	{
		/* check each entry in the small array */
		for (tnum = cpl->cpl_First;
		     tnum < cpl->cpl_First + (LONG) cpl->cpl_Array[0];
		     tnum++)
		{
			/* if the entry is NULL we can use it */
			if (cpl->cpl_Array[tnum+1 - cpl->cpl_First] == NULL)
				goto got_task;
		}
		/* tnum is now first+array[0] - 21 for example */
		/* tnum will be the number of the first entry of next array */

		/* grab the next small array - if no more, allocate one */
		next = (struct CliProcList *) cpl->cpl_Node.mln_Succ;
		if (next->cpl_Node.mln_Succ == NULL)
		{
		    /* this is the code that handles any number of CLI's! */
		    /* add new array to task array - same size as last */
		    /* array[0] has number of entries after it, +1 for [0] */
		    /* *4 because they're longwords, plus the struct */
		    next = AllocVecPubClear((((LONG) cpl->cpl_Array[0])+1) * 4 +
					     sizeof(struct CliProcList));
		    if (next)
		    {
			/* initialize the new array portion */
			/* array starts after the CliProcList struct */
			next->cpl_Array = (struct MsgPort **)
					  (((LONG) next) +
					   sizeof(struct CliProcList));
			next->cpl_Array[0] = cpl->cpl_Array[0];
			next->cpl_First = tnum;
			AddTail((struct List *) &(rootnode->rn_CliList),
				(struct Node *) &(next->cpl_Node));

			/* and go round loop again - this time WILL succeed */
		    }
		    /* else we fall out of the loop and error */
		} /* try next table */
	} /* for cpl... */

got_task:
	/* if tnum is non-zero, cpl is live - if tnum == 0, cpl == NULL */
	*clip = cpl;

	return tnum;
}

void __regargs
kill_cli_num (LONG tnum)
{
	struct CliProcList *cl;

	for (cl = (struct CliProcList *) rootstruct()->rn_CliList.mlh_Head;
	     cl && cl->cpl_Node.mln_Succ;
	     cl = (struct CliProcList *) cl->cpl_Node.mln_Succ)
	{
		/* is the entry in this small array? */
		if (tnum <= cl->cpl_First + ((LONG) cl->cpl_Array[0]) - 1)
		{
			cl->cpl_Array[tnum + 1 - cl->cpl_First] = NULL;
			return;
		}
	}
}

@


36.34
log
@Allow his priority to override
@
text
@d345 3
a347 1
	if (pkt->dp_Arg4)
d349 1
@


36.33
log
@Removed sill pri < -123 check
rearranged some code
free command stream/currentdirlock if startup failed
@
text
@d246 2
@


36.32
log
@Use copyMem instead of memcpy
@
text
@d220 1
a220 1
	if (pri <= -123) goto err;
a321 7
	/* get both return codes */
	/* For Execute(), if we ran it, always return success */
	/* if we got to here for Run, we have succeeded */
	/* run comes in via System, but with RUN_EXECUTE and NULL command */
	rc = ((type == RUN_EXECUTE && command) ? 0 : pkt->dp_Res1);
	setresult2(pkt->dp_Res2);

d335 18
d355 1
a355 2
	/* FIX! (we can't) loses cvec if shell startup fails */
	cvec = NULL;
d365 1
@


36.31
log
@A meaningless cast
@
text
@d201 1
a201 1
		memcpy(svec,command,len);	/* Copy over command string */
@


36.30
log
@chnaged rc for run
send the new packet except for run and system asynch
@
text
@d337 1
a337 1
				 fh->fh_Arg1,&(tid->pr_MsgPort),0);
@


36.29
log
@Use System(NULL,...) for Run (also Usershell).
Added comments
@
text
@d325 2
a326 1
	rc = ((type == RUN_EXECUTE || !command) ? 0 : pkt->dp_Res1);
d328 13
@


36.28
log
@Removed inheritance of pr_stacksize for new shells
Causes problems since WB launched programs have a pr_Stacksize of
4K (or more) - i.e application stacksize, not shell stacksize.
@
text
@d81 3
a83 2
	return (internal_run(comm,bootshell,RUN_EXECUTE,instr,outstr,NULL)
		== 0 ? DOSTRUE : FALSE);
d111 2
d114 2
a115 1
			    asynch ? RUN_SYSTEM_ASYNCH : RUN_SYSTEM,
d249 8
a256 1

d300 1
@


36.27
log
@use single string for BootShell
Fix stacksize for starting shells - inherit pr_StackSize
(Note: this may cause problems for usershells - be careful)
For Run, don't set pri to 0 (Run calls Execute())
Make sure the run case returns success if it created the new process
Make sure the run case doesn't print the error if none occurred
@
text
@d154 1
a154 1
		{ NP_StackSize,0 },	/* and this fourth */
d244 1
a244 1
	crptags[3].ti_Data = tid->pr_StackSize*4;
@


36.26
log
@exec_old_pragmas.h
Fixed it so it won't lose copie of the path.
Realized that setting my stack tag to ignore was silly; I don't
pass it anywhere.
@
text
@d69 1
d81 1
a81 1
	return (internal_run(comm,"BootShell",RUN_EXECUTE,instr,outstr,NULL)
d104 1
a104 1
		shell = (char *) getTagData(SYS_CustomShell,(LONG) "BootShell",
d154 1
a154 1
		{ NP_StackSize,800*4 },
d188 1
a188 1
		/* safe, since cvec will be FreeVec()ed, and it has no
d203 6
a214 5
	/* some programs invoke at pri 20, and other stupid ones break */
	/* old execute happened to cause it to always be run at pri=0  */
	if (type == RUN_EXECUTE)
		pri = 0;

d243 3
d312 2
a313 1
	rc = (type == RUN_EXECUTE ? 0 : pkt->dp_Res1);
d326 2
a327 2
	/* FreeVec(NULL) is safe */
	FreeVec(cvec);
d329 1
a329 1
	if (!command)
@


36.25
log
@Pass tags to cli_init instead of punching our CLI struct
@
text
@d22 1
a22 1
#include <pragmas/exec_pragmas.h>
d152 3
a154 1
		{ NP_StackSize,800*4 }, /* and this third */
d238 3
a240 1
	/* we let CreateNewProc handle path - use his or copy ours */
d243 2
d279 2
a280 1
	crptags[2].ti_Tag = TAG_IGNORE;
@


36.24
log
@Oops, forgot to change one CLI to BootShell.
Added some debugs, commented out
@
text
@a125 2
	NP_StackSize,		/* handled via cli struct */
	NP_Path,		/* handled via cli struct */
a135 1
	struct CommandLineInterface *cli  = BADDR(tid->pr_CLI);
a144 2
	BPTR savecommdir;
	BPTR savestacksize;
d148 1
d152 1
a162 1
		{ NP_StackSize,800*4 },
a163 1
		{ NP_Path,FALSE },	/* copied by cli_init_run */
a181 6
	if (cli)
	{
		savecommdir = cli->cli_CommandDir;
		savestacksize = cli->cli_DefaultStack;
	}

d235 5
a239 1
	
a246 10
	/* sorry, if you're not a CLI you can't set these */
	if (cli)
	{
		if (tag = findTagItem(NP_Path,tags))
			cli->cli_CommandDir = tag->ti_Data;

		if (tag = findTagItem(NP_StackSize,tags))
			cli->cli_DefaultStack = tag->ti_Data >> 2;
	}

d272 3
d288 1
a317 6

	if (cli)
	{
		cli->cli_CommandDir   = savecommdir;
		cli->cli_DefaultStack = savestacksize;
	}
@


36.23
log
@Oops, ignore previous comment, wrong file.
Added protection against cli=NULL in execute.
@
text
@d103 2
a104 1
		shell = (char *) getTagData(SYS_CustomShell,(LONG) "CLI",tags);
d170 1
a170 1
		{ TAG_END,NULL},
d276 11
d290 1
@


36.22
log
@added extra protection to makecli, don't copy interactive (let it

default to 0)
@
text
@@


36.21
log
@Massive changes:  don't use createtask; use cnp() for everything.
Filter and pass through tags
a bunch of optimizations
@
text
@d64 1
a64 1
// may be closed, as run doesn't do a findoutput("**") in that case.
d130 2
d147 2
a148 2
	BPTR savecommdir = cli->cli_CommandDir;
	BPTR savestacksize = cli->cli_DefaultStack;
d186 6
d253 5
a257 2
	if (tag = findTagItem(NP_Path,tags))
		cli->cli_CommandDir = tag->ti_Data;
d259 3
a261 2
	if (tag = findTagItem(NP_StackSize,tags))
		cli->cli_DefaultStack = tag->ti_Data >> 2;
d319 5
a323 2
	cli->cli_CommandDir   = savecommdir;
	cli->cli_DefaultStack = savestacksize;
@


36.20
log
@Use stubs in support.asm for utility rtns (saves space)
@
text
@a19 1
#define UtilityBase (((LONG *) MYPROC->pr_GlobVec)[G_UTILITYBASE])
a67 1
extern char b_background_cli[];
d80 2
a81 2
	return (execute_common(comm,"CLI",instr,outstr,RUN_EXECUTE) == 0 ?
		DOSTRUE : FALSE);
d108 3
a110 2
	return execute_common(comm,shell,in,out,asynch ? RUN_SYSTEM_ASYNCH :
							 RUN_SYSTEM);
d113 16
a128 5
LONG __regargs
execute_common (char *comm, char *shell, BPTR instr, BPTR outstr, LONG type)
{
	LONG rc;
	BPTR ins,outs;
a129 17
	ins  = input();
	outs = output();
	selectinput(instr);
	selectoutput(outstr);

	/* stack usage?? */
	rc = internal_run(comm, shell, comm ? strlen(comm) : 0,type);

	selectinput(ins);
	selectoutput(outs);

	return rc;
}

/* must always invoke the ROM shell!!! */
/* builds an "input" filehandle for the Shell */

d131 2
a132 1
internal_run (char *command, char *shell, LONG len, LONG type)
d135 1
a135 1
	BPTR instr  = input();
d138 2
a139 4
	LONG *segl;
	LONG forbidden = FALSE, tnum = 0, rc;
	struct CliProcList *cpl;
	struct DosPacket   *pkt = NULL;
d141 1
d143 26
a168 2
	LONG is_cli = (strcmp(shell,"CLI") == SAME);

d181 3
d219 4
a222 4
	if (is_cli)
	{
		/* This is an attempt to start a Boot Shell (CLI).      */
		/* It must be created with BCPL context, unfortunately. */
d224 5
a228 3
		/* Make up a suitable segment list for the new task.   */
		/* actually current seglist */
		LONG *sys_segl = (LONG *) BADDR(seglist());
d230 3
a232 3
		segl = AllocVecPub(5*4);	/* FIX! */
		if (!segl)
			goto err;
d234 6
a239 5
		segl[0] = 4;
		segl[1] = sys_segl[1];			/* KLIB, MLIB */
		segl[2] = sys_segl[2];			/* BLIB */
		segl[3] = 0;				/* current seglist */
		segl[4] = rootstruct()->rn_ConsoleSegment; /* CLI segment */
d241 3
a243 4
		/* get a task number.  May have to extend task array to do so.*/
		/* list is Forbid() protected - should be sufficient */
		Forbid();
		forbidden = TRUE;
d245 2
a246 3
		/* if tnum is non-zero, cpl is live */
		tnum = find_tnum(&cpl);
		if (tnum == 0) goto err;
d248 2
a249 6
		/* unfortunately, we MUST create Boot shell processes as BCPL */
		/* this is because we can have Shell-Seg installed as CLI     */
		/* FIX! rn_shellsegment */
		task = createtask(TOBPTR(segl),800,pri,
			      TOBPTR(b_background_cli),TOBPTR(tid->pr_GlobVec));
		if (task == NULL) goto err;
d251 4
a254 4
		/* set the tnum of new proc (cpl is live from find_tnum())    */
		cpl->cpl_Array[tnum + 1 - cpl->cpl_First] = task;
		((struct Process *)
		 (((LONG) task) - sizeof(struct Task)))->pr_TaskNum = tnum;
d256 1
a256 2
		Permit();
		/* forbidden = FALSE; dead assignment */
d258 4
a261 2
	} else {	/* if is_cli */
		/* we're invoking the default user Shell ("Shell"). */
d263 1
a263 20
		/* put tags on stack, so we can modify seglist */
		/* We want the cli_init_run to do the funky stuff */
		struct TagItem tags[] = {
			{ NP_Seglist,NULL },
			{ NP_WindowPtr, 0 },
			{ NP_FreeSeglist,FALSE },
			{ NP_Input,NULL },	/* set up by cli_init_run */
			{ NP_Output,NULL },
			{ NP_CloseInput,FALSE },
			{ NP_CloseOutput,FALSE },
/*			{ NP_Error,NULL },
			{ NP_CloseError,FALSE }, */
			{ NP_CurrentDir,NULL },
			{ NP_HomeDir,NULL },	/* shell sets cdir/homedir */
			{ NP_StackSize,800*4 },
			{ NP_Cli,TRUE },
			{ NP_Path,FALSE },	/* copied by cli_init_run */
			TAG_END
		};
		struct Segment *seg = searchsegs(shell,NULL,TRUE);
a264 17
		if (!seg)
			goto err;

		tags[0].ti_Data = seg->seg_Seg;

		/* for synchronous calls, copy windowptr, else 0 */
		if (type != RUN_SYSTEM_ASYNCH)
			tags[1].ti_Data = (LONG) tid->pr_WindowPtr;

		task = (void *) CreateNewProc(tags);
		if (!task)
			goto err;

		task = &(((struct Process *) task)->pr_MsgPort);

	} /* if is_cli ... else */

d272 1
a272 1
	pkt->dp_Arg3 = output();	/* for execute/system, not run */
d274 2
a275 1
	pkt->dp_Arg5 = copydir(currentdir(FALSE,NULL));
d291 1
a291 2
	FreeDosObject(DOS_STDPKT,pkt);	/* we're done with the packet */

d293 2
a294 2
	/* the cli removes it's own tnum from array */
	/* DEACT frees the segl, etc */
d296 1
a296 3
	return rc;	/* success */

	/* Error return */
d298 1
a299 6
	if (forbidden) Permit();
	if (tnum)
	{
		/* Remove task table entry */
		cpl->cpl_Array[tnum + 1 - cpl->cpl_First] = NULL;
	}
a301 1
	FreeVec(segl);
d307 4
a310 1
	return -1;	/* error */
@


36.19
log
@Some optimizations, added comments, removed debugs, localized a string
@
text
@d96 4
a99 4
	in     = GetTagData(SYS_Input,input(),tags);
	out    = GetTagData(SYS_Output,output(),tags);
	asynch = GetTagData(SYS_Asynch,FALSE,tags);
	if (GetTagData(SYS_UserShell,FALSE,tags))
d105 1
a105 1
		shell = (char *) GetTagData(SYS_CustomShell,(LONG) "CLI",tags);
d108 1
a108 1
/*	err    = GetTagData(SYS_Error,stderr(),tags);	*/
@


36.18
log
@Removed Execute change - Execute() gives pri 0 always again
Made Execute() return success regardless of the success of the command if could
start the new shell
@
text
@d17 1
d70 1
d92 1
a92 1
	BPTR in,out,err,asynch;
d102 1
a102 1
		shell = "Shell";
d170 1
a170 1
			AllocVecPub(sizeof(struct FileHandle) + 1 + len);
a178 3
		cvec->fh_Link  = NULL;
		cvec->fh_Port  = NULL;
		cvec->fh_Type  = NULL;
d180 2
a181 5
		cvec->fh_Pos   = 0;
		cvec->fh_End   = len+1;
		cvec->fh_Func1 = NULL;
		cvec->fh_Func2 = NULL;
		cvec->fh_Func3 = NULL;
d201 4
a204 1
		/* Make up a suitable segment list for the new task. */
d234 1
a234 1
		/* set the tnum of our new proc (cpl is live from find_tnum() */
d243 1
d283 2
d331 1
a331 1
		writes("Unable to create background process\n"); /* FIX! lang */
a335 5
/* searchsegs is in cli.c already */
/* cliinitfn moved to cli_init.c as cli_init_run (along with init.cli and
   copylist) */


a350 2
/*kprintf("cpl is 0x%lx, first is %ld, table at 0x%lx\n",cpl,
cpl->cpl_First,cpl->cpl_Array);*/
a372 1
/*kprintf("next = 0x%lx\n",next);*/
a391 3
/*kprintf("creating task %ld, at 0x%lx\n",tnum,
&(cpl->cpl_Array[tnum+1 - cpl->cpl_First]));*/

a402 1
/*kprintf("killing task %ld ");*/
a409 3
/*kprintf("(at 0x%lx)\n",
&(cl->cpl_Array[tnum + 1 - cl->cpl_First]));*/

@


36.17
log
@relaxed priority hack, copy currentdir for all, not just CLI's
@
text
@d192 4
a195 3
	/* some stupid programs invoke at pri 20, and other stupid ones break */
	if (type == RUN_EXECUTE && pri > 4)
		pri = 4;
d302 2
a303 1
	rc = pkt->dp_Res1;
@


36.16
log
@commetn changes.
@
text
@d192 3
a194 2
	if (type == RUN_EXECUTE)
		pri = 0;
d289 1
a289 3
/* FIX!!!! keep currentdir for CreateProc-ed processes! */
	pkt->dp_Arg5 = (tid->pr_CLI == NULL) ? NULL :
					       copydir(currentdir(FALSE,NULL));
@


36.15
log
@Added NP_HomeDir, NULL
@
text
@d338 1
d373 2
@


36.14
log
@WindowPtr changes (due to windowptr changes in createnewproc)
added comments.
@
text
@d256 1
@


36.13
log
@Execute() gives priority 0
@
text
@d247 1
d249 1
a249 1
			{ NP_Input,NULL },
d258 1
a258 1
			{ NP_Path,FALSE },
d268 4
d290 1
a290 1
	pkt->dp_Arg6 = (command != NULL); /* boolean - is_run */
@


36.12
log
@PubClear
@
text
@d192 3
@


36.11
log
@Added many comments, moved kill_cli_num here
@
text
@d363 2
a364 3
		    next = AllocVec((((LONG) cpl->cpl_Array[0]) + 1) * 4 +
				     sizeof(struct CliProcList),
				    MEMF_PUBLIC|MEMF_CLEAR);
@


36.10
log
@for rcs 4.x header change
@
text
@d285 2
d319 1
a319 2
		writes((LONG)
		      "Unable to create background process\n"); /* FIX! lang */
d338 1
d345 1
d350 1
d355 1
d357 1
d363 1
a363 1
		    next = AllocVec(((LONG) cpl->cpl_Array[0])*4 + 4 +
d370 1
d379 1
a379 1
			/* and go round loop again - this time will succeed */
d384 1
d386 3
d393 22
@


36.9
log
@Moved init of fake SCB
@
text
@@


36.8
log
@Changes to support user shells, use CreateNewProc for Execute/System,
fix >20 cli's
@
text
@d165 2
d176 10
a271 14
	/* Set up a fake SCB which will provide the characters passed. */

	if (command)
	{
		cvec->fh_Link  = NULL;
		cvec->fh_Port  = NULL;
		cvec->fh_Type  = NULL;
		cvec->fh_Buf   = TOBPTR(svec);	/* must be on LW boundary */
		cvec->fh_Pos   = 0;
		cvec->fh_End   = len+1;
		cvec->fh_Func1 = NULL;
		cvec->fh_Func3 = NULL;
	}

d282 1
a282 1
	pkt->dp_Arg6 = (command != 0);	/* boolean - is_run */
@


36.7
log
@Added system Asynch support
Fix to find_tnum
@
text
@d80 2
a81 2
	return (execute_common(comm,instr,outstr,RUN_EXECUTE) == 0 ? DOSTRUE :
								     FALSE);
d91 1
d93 1
d97 9
d108 2
a109 2
	return execute_common(comm,in,out,asynch ? RUN_SYSTEM_ASYNCH :
						   RUN_SYSTEM);
d112 2
a113 5
LONG ASM
execute_common (REG(d1) char *comm,
		REG(d2) BPTR instr,
		REG(d3) BPTR outstr,
		REG(d0) LONG type)
d124 1
a124 1
	rc = internal_run(comm, comm ? strlen(comm) : 0,type);
d136 1
a136 1
internal_run (char *command, LONG len, LONG type)
d148 1
d180 7
a186 1
	/* Make up a suitable segment list for the new task. */
d188 1
a200 3
		/* FIX! shoulds this be rn_ShellSegment? */
		/* What about user shells? */
	}
d202 4
a205 4
	/* get a task number.  May have to extend task array to do so. */
	/* list is Forbid() protected - should be sufficient */
	Forbid();
	forbidden = TRUE;
d207 3
a209 1
	tnum = find_tnum(&cpl);
d211 6
a216 2
	/* if tnum is non-zero, cpl is live */
	if (tnum == 0) goto err;
d218 4
a221 2
	/* Why? FIX! */
	if (pri <= -123) goto err;
d223 2
a224 2
	/* do this BEFORE creating process in case of failure! */
	if (!(pkt = AllocDosObject(DOS_STDPKT,NULL))) goto err;
d226 1
a226 5
	/* unfortunately, we MUST create shell processes as BCPL programs */
	/* FIX! rn_shellsegment */
	task = createtask(TOBPTR(segl),800,pri,
			  TOBPTR(b_background_cli),TOBPTR(tid->pr_GlobVec));
	if (task == NULL) goto err;
d228 18
a245 4
	/* set the tasknum of our new process (cpl is live from find_tnum() */
	cpl->cpl_Array[tnum + 1 - cpl->cpl_First] = task;
	((struct Process *)
	 (((LONG) task) - sizeof(struct Task)))->pr_TaskNum = tnum;
d247 2
a248 2
	Permit();
	/* forbidden = FALSE; not needed - can't go to "err" from here on! */
d250 10
d281 1
a281 1
/* FIX!!!! keep currentdir for CreateProc! */
d340 1
a340 1
	     cpl->cpl_Node.mln_Succ;
d343 2
d349 1
a349 1
			if (cpl->cpl_Array[tnum] == NULL)
d352 2
d355 1
a355 1
		if (!next)
d362 1
d370 1
a370 2
			next->cpl_First = cpl->cpl_First +
					  (LONG) cpl->cpl_Array[0];
d372 1
a372 1
				(struct Node *) next);
d378 1
a378 1
	}
@


36.6
log
@getvec->AllocVec, etc
Fixed size of alloc for cli tables
@
text
@d90 1
a90 1
	BPTR in,out,err;
d92 4
a95 3
	in  = GetTagData(SYS_Input,input(),tags);
	out = GetTagData(SYS_Output,output(),tags);
/*	err = GetTagData(SYS_Error,stderr(),tags);	*/
d97 2
a98 1
	return execute_common(comm,in,out,RUN_SYSTEM);
d185 2
d206 1
d303 1
a303 1
		     tnum <= cpl->cpl_First + (LONG) cpl->cpl_Array[0];
d313 1
a313 1
		    /* add new array to task array */
d328 2
d331 2
a332 1
		}
@


36.5
log
@comments
@
text
@a17 1
#ifdef LATTICE
d21 2
a22 1
#include "proto/exec.h"
a26 1
#endif
d155 1
a155 1
			AllocVec(sizeof(struct FileHandle) + 1 + len);
d174 1
a174 1
		segl = AllocVec(5*4);	/* FIX! */
d268 3
a270 3
	/* freevec(NULL) is safe */
	freevec(segl);
	freevec(cvec);
d309 3
a311 3
		    next = getmem(((LONG) cpl->cpl_Array[0]) * 4 + 1 +
				  sizeof(struct CliProcList)/4,
				  MEMF_PUBLIC|MEMF_CLEAR);
@


36.4
log
@CreatePkt/DeletePkt->AllocDosObject/FreeDosObject
@
text
@d175 1
a175 1
		segl = AllocVec(5*4);
d186 1
a186 1
	/* get a task number.  May have to extend task to do so. */
@


36.3
log
@*** empty log message ***
@
text
@d199 2
a200 2
	/* do this BEFORE creating process! */
	if (!(pkt = CreatePkt())) goto err;
d251 2
a252 1
	DeletePkt(pkt);
d261 1
a261 1
	if (pkt) DeletePkt(pkt);
@


36.2
log
@Converted System() to tags
cleanup
@
text
@d8 3
a10 3
#include "libraries/dos.h"
#include "libraries/dosextens.h"
#include "libraries/dostags.h"
@


36.1
log
@Initial check in (moved from blib.c
@
text
@d7 1
d10 1
d19 3
d26 1
d57 3
a59 1
// EXECUTE( "", windowstream, 0 )     invokes a new CLI (NEWCLI)
a85 1
/* should we convert this to tags??? */
d89 1
a89 2
	REG(d2) BPTR instr,
	REG(d3) BPTR outstr)
d91 7
a97 1
	return execute_common(comm,instr,outstr,RUN_SYSTEM);
d129 1
a129 1
	struct Process *tid  = (struct Process *) FindTask(0);
a204 1

@
