head     36.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.8
date     91.03.15.17.46.14;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.12.16.03.49.15;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.11.21.02.23.05;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.05.09.02.13.30;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.03.04.45.39;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.09.01.52.33;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.05.21.35.32;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.11.14.01.45.03;  author jesup;  state Exp;
branches ;
next     ;


desc
@Initial checkin
@


36.8
log
@Fixed UnLockRecords - it wasn't walking the array.
@
text
@/* record.c */

#include <exec/types.h>
#include <exec/memory.h>
#include "dos/dos.h"
#include "dos/dosextens.h"
#include "dos/record.h"
#include <string.h>

#include "libhdr.h"

#include "clib/exec_protos.h"
#include <pragmas/exec_old_pragmas.h>

#include "record_protos.h"
#include "klib_protos.h"
#include "blib_protos.h"

/* these are the record locking functions, based on Novell record locking */
/* LockRecord and UnLockRecord are in support.asm, since they use readwrite. */

LONG ASM
LockRecords (REG(d1) struct RecordLock *array, REG(d2) ULONG timeout)
{
	/* FIX!!! should sort list of records by offset to reduce deadlocks! */
	struct RecordLock *rec = array;

	while (rec->rec_FH)
	{
		if (!LockRecord(rec->rec_FH, rec->rec_Offset, rec->rec_Length,
				rec->rec_Mode, timeout))
		{
			LONG err = getresult2();	/* save error code */

			/* failure! unwind! */
			while (rec != array)
			{
				rec--;
				UnLockRecord(rec->rec_FH,rec->rec_Offset,
					     rec->rec_Length);
			}
			setresult2(err);		/* restore error code */
			return FALSE;
		}
		rec++;
	}

	return DOSTRUE;
}

LONG ASM
UnLockRecords (REG(d1) struct RecordLock *array)
{
	struct RecordLock *rec = array;
	LONG rc = DOSTRUE;

	while (rec->rec_FH)
	{
		/* tricky way to find if any failed */
		/* FIX! how do we indicate how they failed? */
		rc &= UnLockRecord(rec->rec_FH,rec->rec_Offset,rec->rec_Length);

		rec++;	/* point to next entry in the array */
	}

	return rc ? DOSTRUE : FALSE;	/* just in case of funny returns */
}
@


36.7
log
@exec_old_pragmas.h
@
text
@d62 2
@


36.6
log
@Use correct proto/pragma files
@
text
@d13 1
a13 1
#include <pragmas/exec_pragmas.h>
@


36.5
log
@cleanup
@
text
@d12 3
a14 2
#ifdef LATTICE
#include "proto/exec.h"
a17 1
#endif
@


36.4
log
@for rcs 4.x header change
@
text
@a18 3
#define AllocNew(x) ((struct x *) AllocMem(sizeof(struct x),\
					   MEMF_PUBLIC|MEMF_CLEAR));

@


36.3
log
@*** empty log message ***
@
text
@@


36.2
log
@Added the multiple lock functions, moved UnLockRecord
to asm.
@
text
@d5 3
a7 3
#include "libraries/dos.h"
#include "libraries/dosextens.h"
#include "libraries/record.h"
@


36.1
log
@Created.
@
text
@d7 1
d23 1
d25 5
a29 1
/* LockRecord was downcoded to asm because of the number of parameters. */
d31 23
d55 1
a55 1
UnLockRecord (REG(d1) BPTR fh, REG(d2) LONG position, REG(d3) LONG length)
d57 2
a58 1
	struct FileHandle *file = (struct FileHandle *) BADDR(fh);
d60 8
a67 2
	return sendpkt3(file->fh_Type,ACTION_FREE_RECORD,file->fh_Arg1,
			position,length);
@
