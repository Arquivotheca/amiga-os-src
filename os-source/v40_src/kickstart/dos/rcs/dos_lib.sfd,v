head     36.31;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


36.31
date     92.12.17.20.11.35;  author jesup;  state Exp;
branches ;
next     36.30;

36.30
date     92.12.04.17.38.51;  author jesup;  state Exp;
branches ;
next     36.29;

36.29
date     92.05.31.21.30.36;  author jesup;  state Exp;
branches ;
next     36.28;

36.28
date     92.04.09.17.56.34;  author jesup;  state Exp;
branches ;
next     36.27;

36.27
date     92.04.08.15.45.43;  author jesup;  state Exp;
branches ;
next     36.26;

36.26
date     91.11.08.14.13.40;  author jesup;  state Exp;
branches ;
next     36.25;

36.25
date     91.05.17.20.48.20;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     91.05.17.20.46.56;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     91.05.08.22.07.26;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     91.04.18.23.58.53;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     91.02.19.22.45.08;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     91.02.19.22.24.27;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     91.02.19.03.04.39;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     91.02.16.00.47.19;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     91.02.13.19.14.43;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     91.02.08.17.32.18;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     91.02.06.22.13.16;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     91.01.24.16.12.58;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     91.01.10.00.45.38;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     91.01.09.23.51.41;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.12.21.17.25.27;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.12.16.04.44.52;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.12.13.23.17.14;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.11.05.20.33.22;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.11.05.20.00.40;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.11.05.15.27.55;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.11.02.23.27.40;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.11.02.23.24.23;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.07.25.15.19.41;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     90.07.12.04.00.51;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     90.04.09.18.12.39;  author jesup;  state Exp;
branches ;
next     ;


desc
@replacement for .fd file
@


36.31
log
@sfd doesn't like VOID * parameters
@
text
@==id $Id: dos_lib.sfd,v 36.30 92/12/04 17:38:51 jesup Exp Locker: jesup $
* "dos.library"
==base _DOSBase
==bias 30
==public
==include <dos/dos.h>
==include <dos/dosextens.h>
==include <dos/record.h>
==include <dos/rdargs.h>
==include <dos/dosasl.h>
==include <dos/var.h>
==include <dos/notify.h>
==include <dos/datetime.h>
BPTR Open( STRPTR name, LONG accessMode ) (d1,d2)
LONG Close( BPTR file ) (d1)
LONG Read( BPTR file, APTR buffer, LONG length ) (d1,d2,d3)
LONG Write( BPTR file, APTR buffer, LONG length ) (d1,d2,d3)
BPTR Input() ()
BPTR Output() ()
LONG Seek( BPTR file, LONG position, LONG offset ) (d1,d2,d3)
LONG DeleteFile( STRPTR name ) (d1)
LONG Rename( STRPTR oldName, STRPTR newName ) (d1,d2)
BPTR Lock( STRPTR name, LONG type ) (d1,d2)
VOID UnLock( BPTR lock ) (d1)
BPTR DupLock( BPTR lock ) (d1)
LONG Examine( BPTR lock, struct FileInfoBlock *fileInfoBlock ) (d1,d2)
LONG ExNext( BPTR lock, struct FileInfoBlock *fileInfoBlock ) (d1,d2)
LONG Info( BPTR lock, struct InfoData *parameterBlock ) (d1,d2)
BPTR CreateDir( STRPTR name ) (d1)
BPTR CurrentDir( BPTR lock ) (d1)
LONG IoErr() ()
struct MsgPort *CreateProc( STRPTR name, LONG pri, BPTR segList,
	LONG stackSize ) (d1,d2,d3,d4)
VOID Exit( LONG returnCode ) (d1)
BPTR LoadSeg( STRPTR name ) (d1)
VOID UnLoadSeg( BPTR seglist ) (d1)
==private
VOID ClearVec( BPTR bVector, LONG upb ) (d1,d2)
BPTR NoReqLoadSeg( BSTR bFileName ) (d1)
==public
struct MsgPort *DeviceProc( STRPTR name ) (d1)
LONG SetComment( STRPTR name, STRPTR comment ) (d1,d2)
LONG SetProtection( STRPTR name, LONG protect ) (d1,d2)
struct DateStamp *DateStamp( struct DateStamp *date ) (d1)
VOID Delay( LONG timeout ) (d1)
LONG WaitForChar( BPTR file, LONG timeout ) (d1,d2)
BPTR ParentDir( BPTR lock ) (d1)
LONG IsInteractive( BPTR file ) (d1)
LONG Execute( STRPTR string, BPTR file, BPTR file2 ) (d1,d2,d3)
==version 36
*	DOS Object creation/deletion
APTR AllocDosObject( ULONG type, struct TagItem *tags ) (d1,d2)
==alias
APTR AllocDosObjectTagList( ULONG type, struct TagItem *tags ) (d1,d2)
==varargs
APTR AllocDosObjectTags( ULONG type, ULONG tag1type, ... ) (d1,d2)
VOID FreeDosObject( ULONG type, APTR ptr ) (d1,d2)
*	Packet Level routines
LONG DoPkt( struct MsgPort *port, LONG action, LONG arg1,
	LONG arg2, LONG arg3, LONG arg4, LONG arg5 ) (d1,d2,d3,d4,d5,d6,d7)
==alias
LONG DoPkt0( struct MsgPort *port, LONG action ) (d1,d2)
==alias
LONG DoPkt1( struct MsgPort *port, LONG action, LONG arg1 ) (d1,d2,d3)
==alias
LONG DoPkt2( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2 )
	(d1,d2,d3,d4)
==alias
LONG DoPkt3( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2,
	LONG arg3 ) (d1,d2,d3,d4,d5)
==alias
LONG DoPkt4( struct MsgPort *port, LONG action,	LONG arg1, LONG arg2,
	LONG arg3, LONG arg4 ) (d1,d2,d3,d4,d5,d6)
VOID SendPkt( struct DosPacket *dp, struct MsgPort *port,
	struct MsgPort *replyport ) (d1,d2,d3)
struct DosPacket *WaitPkt() ()
VOID ReplyPkt( struct DosPacket *dp, LONG res1, LONG res2 ) (d1,d2,d3)
VOID AbortPkt( struct MsgPort *port, struct DosPacket *pkt ) (d1,d2)
*	Record Locking
BOOL LockRecord( BPTR fh,ULONG offset, ULONG length, ULONG mode,
	ULONG timeout ) (d1,d2,d3,d4,d5)
BOOL LockRecords( struct RecordLock *recArray, ULONG timeout) (d1,d2)
BOOL UnLockRecord( BPTR fh, ULONG offset, ULONG length ) (d1,d2,d3)
BOOL UnLockRecords( struct RecordLock *recArray ) (d1)
*	Buffered File I/O
BPTR SelectInput( BPTR fh ) (d1)
BPTR SelectOutput( BPTR fh ) (d1)
LONG FGetC( BPTR fh ) (d1)
LONG FPutC( BPTR fh, LONG ch ) (d1,d2)
LONG UnGetC( BPTR fh, LONG character ) (d1,d2)
LONG FRead( BPTR fh, APTR block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
LONG FWrite( BPTR fh, APTR block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
STRPTR FGets( BPTR fh, STRPTR buf, ULONG buflen ) (d1,d2,d3)
LONG FPuts( BPTR fh, STRPTR str ) (d1,d2)
VOID VFWritef( BPTR fh, STRPTR format, LONG *argarray ) (d1,d2,d3)
==varargs
VOID FWritef( BPTR fh, STRPTR format, ... ) (d1,d2,d3)
LONG VFPrintf( BPTR fh, STRPTR format, APTR argarray ) (d1,d2,d3)
==varargs
LONG FPrintf( BPTR fh, STRPTR format, ... ) (d1,d2,d3)
LONG Flush ( BPTR fh ) (d1)
LONG SetVBuf( BPTR fh, STRPTR buff, LONG type, LONG size ) (d1,d2,d3,d4)
*	DOS Object Management
BPTR DupLockFromFH( BPTR fh ) (d1)
BPTR OpenFromLock( BPTR lock ) (d1)
BPTR ParentOfFH( BPTR fh ) (d1)
BOOL ExamineFH( BPTR fh, struct FileInfoBlock *fib ) (d1,d2)
LONG SetFileDate( STRPTR name, struct DateStamp *date ) (d1,d2)
LONG NameFromLock( BPTR lock, STRPTR buffer, LONG len ) (d1,d2,d3)
LONG NameFromFH( BPTR fh, STRPTR buffer, LONG len) (d1,d2,d3)
WORD SplitName( STRPTR name, UBYTE seperator, STRPTR buf, WORD oldpos,
	LONG size ) (d1,d2,d3,d4,d5)
LONG SameLock( BPTR lock1, BPTR lock2 ) (d1,d2)
LONG SetMode( BPTR fh, LONG mode ) (d1,d2)
LONG ExAll( BPTR lock, struct ExAllData *buffer, LONG size, LONG data,
	struct ExAllControl *control ) (d1,d2,d3,d4,d5)
LONG ReadLink( struct MsgPort *port, BPTR lock, STRPTR path, STRPTR buffer,
	ULONG size ) (d1,d2,d3,d4,d5)
LONG MakeLink( STRPTR name, LONG dest, LONG soft ) (d1,d2,d3)
LONG ChangeMode( LONG type, BPTR fh, LONG newmode ) (d1,d2,d3)
LONG SetFileSize( BPTR fh, LONG pos, LONG mode ) (d1,d2,d3)
*	Error Handling
LONG SetIoErr( LONG result ) (d1)
BOOL Fault( LONG code, STRPTR header, STRPTR buffer, LONG len ) (d1,d2,d3,d4)
BOOL PrintFault( LONG code, STRPTR header ) (d1,d2)
LONG ErrorReport( LONG code, LONG type, ULONG arg1, struct MsgPort *device )
	(d1,d2,d3,d4)
==reserve 1
*	Process Management
struct CommandLineInterface *Cli() ()
struct Process *CreateNewProc( struct TagItem *tags ) (d1)
==alias
struct Process *CreateNewProcTagList( struct TagItem *tags ) (d1)
==varargs
struct Process *CreateNewProcTags( ULONG tag1type, ... ) (d1)
LONG RunCommand( BPTR seg, LONG stack, STRPTR paramptr, LONG paramlen )
	(d1,d2,d3,d4)
struct MsgPort *GetConsoleTask() ()
struct MsgPort *SetConsoleTask( struct MsgPort *task ) (d1)
struct MsgPort *GetFileSysTask() ()
struct MsgPort *SetFileSysTask( struct MsgPort *task ) (d1)
STRPTR GetArgStr() ()
BOOL SetArgStr( STRPTR string ) (d1)
struct Process *FindCliProc( ULONG num ) (d1)
ULONG MaxCli() ()
BOOL SetCurrentDirName( STRPTR name ) (d1)
BOOL GetCurrentDirName( STRPTR buf, LONG len ) (d1,d2)
BOOL SetProgramName( STRPTR name ) (d1)
BOOL GetProgramName( STRPTR buf, LONG len ) (d1,d2)
BOOL SetPrompt( STRPTR name ) (d1)
BOOL GetPrompt( STRPTR buf, LONG len ) (d1,d2)
BPTR SetProgramDir( BPTR lock ) (d1)
BPTR GetProgramDir() ()
*	Device List Management
LONG SystemTagList( STRPTR command, struct TagItem *tags ) (d1,d2)
==alias
LONG System( STRPTR command, struct TagItem *tags ) (d1,d2)
==varargs
LONG SystemTags( STRPTR command, ULONG tag1type, ... ) (d1,d2)
LONG AssignLock( STRPTR name, BPTR lock ) (d1,d2)
BOOL AssignLate( STRPTR name, STRPTR path ) (d1,d2)
BOOL AssignPath( STRPTR name, STRPTR path ) (d1,d2)
BOOL AssignAdd( STRPTR name, BPTR lock ) (d1,d2)
LONG RemAssignList( STRPTR name, BPTR lock ) (d1,d2)
struct DevProc *GetDeviceProc( STRPTR name, struct DevProc *dp ) (d1,d2)
VOID FreeDeviceProc( struct DevProc *dp ) (d1)
struct DosList *LockDosList( ULONG flags ) (d1)
VOID UnLockDosList( ULONG flags ) (d1)
struct DosList *AttemptLockDosList( ULONG flags ) (d1)
BOOL RemDosEntry( struct DosList *dlist ) (d1)
LONG AddDosEntry( struct DosList *dlist ) (d1)
struct DosList *FindDosEntry( struct DosList *dlist, STRPTR name, ULONG flags )
	(d1,d2,d3)
struct DosList *NextDosEntry( struct DosList *dlist, ULONG flags ) (d1,d2)
struct DosList *MakeDosEntry( STRPTR name, LONG type ) (d1,d2)
VOID FreeDosEntry( struct DosList *dlist ) (d1)
BOOL IsFileSystem( STRPTR name ) (d1)
*	Handler Interface
BOOL Format( STRPTR filesystem, STRPTR volumename, ULONG dostype ) (d1,d2,d3)
LONG Relabel( STRPTR drive, STRPTR newname ) (d1,d2)
LONG Inhibit( STRPTR name, LONG onoff ) (d1,d2)
LONG AddBuffers( STRPTR name, LONG number ) (d1,d2)
*	Date, Time Routines
LONG CompareDates( struct DateStamp *date1, struct DateStamp *date2 ) (d1,d2)
LONG DateToStr( struct DateTime *datetime ) (d1)
LONG StrToDate( struct DateTime *datetime ) (d1)
*	Image Management
BPTR InternalLoadSeg( BPTR fh, BPTR table, LONG *funcarray, LONG *stack )
	(d0,a0,a1,a2)
BOOL InternalUnLoadSeg( BPTR seglist, VOID (*freefunc)())
	(d1,a1)
BPTR NewLoadSeg( STRPTR file, struct TagItem *tags ) (d1,d2)
==alias
BPTR NewLoadSegTagList( STRPTR file, struct TagItem *tags ) (d1,d2)
==varargs
BPTR NewLoadSegTags( STRPTR file, ULONG tag1type, ... ) (d1,d2)
LONG AddSegment( STRPTR name, BPTR seg, LONG system ) (d1,d2,d3)
struct Segment *FindSegment( STRPTR name, struct Segment *seg, LONG system )
	(d1,d2,d3)
LONG RemSegment( struct Segment *seg ) (d1)
*	Command Support
LONG CheckSignal( LONG mask ) (d1)
struct RDArgs *ReadArgs( STRPTR arg_template, LONG *array, struct RDArgs *args )
	(d1,d2,d3)
LONG FindArg( STRPTR keyword, STRPTR arg_template ) (d1,d2)
LONG ReadItem( STRPTR name, LONG maxchars, struct CSource *cSource )
	(d1,d2,d3)
LONG StrToLong( STRPTR string, LONG *value ) (d1,d2)
LONG MatchFirst( STRPTR pat, struct AnchorPath *anchor ) (d1,d2)
LONG MatchNext( struct AnchorPath *anchor ) (d1)
VOID MatchEnd( struct AnchorPath *anchor ) (d1)
LONG ParsePattern( STRPTR pat, STRPTR buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPattern( STRPTR pat, STRPTR str ) (d1,d2)
==private
* Not currently implemented.
LONG DosNameFromAnchor( struct AnchorPath *anchor, STRPTR buffer, LONG len) (d1,d2,d3)
==public
VOID FreeArgs( struct RDArgs *args ) (d1)
==reserve 1
STRPTR FilePart( STRPTR path ) (d1)
STRPTR PathPart( STRPTR path ) (d1)
BOOL AddPart( STRPTR dirname, STRPTR filename, ULONG size ) (d1,d2,d3)
*	Notification
BOOL StartNotify( struct NotifyRequest *notify ) (d1)
VOID EndNotify( struct NotifyRequest *notify ) (d1)
*	Environment Variable functions
BOOL SetVar( STRPTR name, STRPTR buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG GetVar( STRPTR name, STRPTR buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG DeleteVar( STRPTR name, ULONG flags ) (d1,d2)
struct LocalVar *FindVar( STRPTR name, ULONG type ) (d1,d2)
==private
LONG CliInit( struct DosPacket *dp ) (a0)
==public
LONG CliInitNewcli( struct DosPacket *dp ) (a0)
LONG CliInitRun( struct DosPacket *dp ) (a0)
LONG WriteChars( STRPTR buf, ULONG buflen ) (d1,d2)
LONG PutStr( STRPTR str ) (d1)
LONG VPrintf( STRPTR format, APTR argarray ) (d1,d2)
==varargs
LONG Printf( STRPTR format, ... ) (d1,d2)
==reserve 1
* these were unimplemented until dos 36.147
LONG ParsePatternNoCase( STRPTR pat, STRPTR buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPatternNoCase( STRPTR pat, STRPTR str ) (d1,d2)
==private
BYTE *DosGetString(LONG num) (d1)
==public
* this was added for V37 dos, returned 0 before then.
BOOL SameDevice( BPTR lock1, BPTR lock2 ) (d1,d2)
*
* NOTE: the following entries did NOT exist before ks 36.303 (2.02)
* If you are going to use them, open dos.library with version 37
*
* These calls were added for V39 dos:
VOID ExAllEnd( BPTR lock, struct ExAllData *buffer, LONG size, LONG data,
	struct ExAllControl *control ) (d1,d2,d3,d4,d5)
BOOL SetOwner( STRPTR name, LONG owner_info ) (d1,d2)
==private
* These were added in dos 36.147
==reserve 2
* these were added in dos 37.1
==reserve 2
* these were added in dos 37.8
==reserve 2
* these were added in dos 39.11
==reserve 2
==end
@


36.30
log
@avoid template (c++ reserved word), void * causes less warnings
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.29 92/05/31 21:30:36 jesup Exp Locker: jesup $
d98 1
a98 1
LONG VFPrintf( BPTR fh, STRPTR format, VOID *argarray ) (d1,d2,d3)
d238 1
a238 1
LONG VPrintf( STRPTR format, VOID *argarray ) (d1,d2)
@


36.29
log
@
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.28 92/04/09 17:56:34 jesup Exp Locker: jesup $
d98 1
a98 1
LONG VFPrintf( BPTR fh, STRPTR format, LONG *argarray ) (d1,d2,d3)
d203 1
a203 1
struct RDArgs *ReadArgs( STRPTR template, LONG *array, struct RDArgs *args )
d205 1
a205 1
LONG FindArg( STRPTR keyword, STRPTR template ) (d1,d2)
d238 1
a238 1
LONG VPrintf( STRPTR format, LONG *argarray ) (d1,d2)
@


36.28
log
@Fixed InternalUnloadSeg return
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.27 92/04/08 15:45:43 jesup Exp $
d250 1
d253 2
a254 1
* These were added for V39 dos:
d257 1
d260 1
a260 1
==reserve 3
d264 2
@


36.27
log
@Added ExAllEnd.  Fixed FputC.
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.26 91/11/08 14:13:40 jesup Exp Locker: jesup $
d190 1
a190 1
VOID InternalUnLoadSeg( BPTR seglist, VOID (*freefunc)())
@


36.26
log
@SFD was fixed so I can generate correct prototypes for printf, etc.
Changed UBYTE *'s to STRPTRs. (same thing, sort of).
Made final null entries private, and CliInit.
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.26 91/11/08 14:07:32 jesup Exp $
d89 1
a89 1
LONG FPutC( BPTR fh, UBYTE ch ) (d1,d2)
d250 5
d257 1
a257 1
==reserve 4
@


36.25
log
@Make that LONG not BOOL.  (BOOL is short damnit)
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.24 91/05/17 20:46:56 jesup Exp Locker: jesup $
d14 1
a14 1
BPTR Open( UBYTE *name, LONG accessMode ) (d1,d2)
d21 3
a23 3
LONG DeleteFile( UBYTE *name ) (d1)
LONG Rename( UBYTE *oldName, UBYTE *newName ) (d1,d2)
BPTR Lock( UBYTE *name, LONG type ) (d1,d2)
d29 1
a29 1
BPTR CreateDir( UBYTE *name ) (d1)
d32 1
a32 1
struct MsgPort *CreateProc( UBYTE *name, LONG pri, BPTR segList,
d35 1
a35 1
BPTR LoadSeg( UBYTE *name ) (d1)
d41 3
a43 3
struct MsgPort *DeviceProc( UBYTE *name ) (d1)
LONG SetComment( UBYTE *name, UBYTE *comment ) (d1,d2)
LONG SetProtection( UBYTE *name, LONG protect ) (d1,d2)
d49 1
a49 1
LONG Execute( UBYTE *string, BPTR file, BPTR file2 ) (d1,d2,d3)
d93 3
a95 3
UBYTE *FGets( BPTR fh, UBYTE *buf, ULONG buflen ) (d1,d2,d3)
LONG FPuts( BPTR fh, UBYTE *str ) (d1,d2)
VOID VFWritef( BPTR fh, UBYTE *format, LONG *argarray ) (d1,d2,d3)
d97 2
a98 2
VOID FWritef( BPTR fh, UBYTE *format, LONG arg1, ... ) (d1,d2,d3)
LONG VFPrintf( BPTR fh, UBYTE *format, LONG *argarray ) (d1,d2,d3)
d100 1
a100 1
LONG FPrintf( BPTR fh, UBYTE *format, LONG arg1, ... ) (d1,d2,d3)
d102 1
a102 1
LONG SetVBuf( BPTR fh, UBYTE *buff, LONG type, LONG size ) (d1,d2,d3,d4)
d108 4
a111 4
LONG SetFileDate( UBYTE *name, struct DateStamp *date ) (d1,d2)
LONG NameFromLock( BPTR lock, UBYTE *buffer, LONG len ) (d1,d2,d3)
LONG NameFromFH( BPTR fh, UBYTE *buffer, LONG len) (d1,d2,d3)
WORD SplitName( UBYTE *name, UBYTE seperator, UBYTE *buf, WORD oldpos,
d117 1
a117 1
LONG ReadLink( struct MsgPort *port, BPTR lock, UBYTE *path, UBYTE *buffer,
d119 1
a119 1
LONG MakeLink( UBYTE *name, LONG dest, LONG soft ) (d1,d2,d3)
d124 2
a125 2
BOOL Fault( LONG code, UBYTE *header, UBYTE *buffer, LONG len ) (d1,d2,d3,d4)
BOOL PrintFault( LONG code, UBYTE *header ) (d1,d2)
d136 1
a136 1
LONG RunCommand( BPTR seg, LONG stack, UBYTE *paramptr, LONG paramlen )
d142 2
a143 2
UBYTE *GetArgStr() ()
BOOL SetArgStr( UBYTE *string ) (d1)
d146 6
a151 6
BOOL SetCurrentDirName( UBYTE *name ) (d1)
BOOL GetCurrentDirName( UBYTE *buf, LONG len ) (d1,d2)
BOOL SetProgramName( UBYTE *name ) (d1)
BOOL GetProgramName( UBYTE *buf, LONG len ) (d1,d2)
BOOL SetPrompt( UBYTE *name ) (d1)
BOOL GetPrompt( UBYTE *buf, LONG len ) (d1,d2)
d155 1
a155 1
LONG SystemTagList( UBYTE *command, struct TagItem *tags ) (d1,d2)
d157 1
a157 1
LONG System( UBYTE *command, struct TagItem *tags ) (d1,d2)
d159 7
a165 7
LONG SystemTags( UBYTE *command, ULONG tag1type, ... ) (d1,d2)
LONG AssignLock( UBYTE *name, BPTR lock ) (d1,d2)
BOOL AssignLate( UBYTE *name, UBYTE *path ) (d1,d2)
BOOL AssignPath( UBYTE *name, UBYTE *path ) (d1,d2)
BOOL AssignAdd( UBYTE *name, BPTR lock ) (d1,d2)
LONG RemAssignList( UBYTE *name, BPTR lock ) (d1,d2)
struct DevProc *GetDeviceProc( UBYTE *name, struct DevProc *dp ) (d1,d2)
d172 1
a172 1
struct DosList *FindDosEntry( struct DosList *dlist, UBYTE *name, ULONG flags )
d175 1
a175 1
struct DosList *MakeDosEntry( UBYTE *name, LONG type ) (d1,d2)
d177 1
a177 1
BOOL IsFileSystem( UBYTE *name ) (d1)
d179 4
a182 4
BOOL Format( UBYTE *filesystem, UBYTE *volumename, ULONG dostype ) (d1,d2,d3)
LONG Relabel( UBYTE *drive, UBYTE *newname ) (d1,d2)
LONG Inhibit( UBYTE *name, LONG onoff ) (d1,d2)
LONG AddBuffers( UBYTE *name, LONG number ) (d1,d2)
d192 1
a192 1
BPTR NewLoadSeg( UBYTE *file, struct TagItem *tags ) (d1,d2)
d194 1
a194 1
BPTR NewLoadSegTagList( UBYTE *file, struct TagItem *tags ) (d1,d2)
d196 3
a198 3
BPTR NewLoadSegTags( UBYTE *file, ULONG tag1type, ... ) (d1,d2)
LONG AddSegment( UBYTE *name, BPTR seg, LONG system ) (d1,d2,d3)
struct Segment *FindSegment( UBYTE *name, struct Segment *seg, LONG system )
d203 1
a203 1
struct RDArgs *ReadArgs( UBYTE *template, LONG *array, struct RDArgs *args )
d205 2
a206 2
LONG FindArg( UBYTE *keyword, UBYTE *template ) (d1,d2)
LONG ReadItem( UBYTE *name, LONG maxchars, struct CSource *cSource )
d208 2
a209 2
LONG StrToLong( UBYTE *string, LONG *value ) (d1,d2)
LONG MatchFirst( UBYTE *pat, struct AnchorPath *anchor ) (d1,d2)
d212 2
a213 2
LONG ParsePattern( UBYTE *pat, UBYTE *buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPattern( UBYTE *pat, UBYTE *str ) (d1,d2)
d216 1
a216 1
LONG DosNameFromAnchor( struct AnchorPath *anchor, UBYTE *buffer, LONG len) (d1,d2,d3)
d220 3
a222 3
UBYTE *FilePart( UBYTE *path ) (d1)
UBYTE *PathPart( UBYTE *path ) (d1)
BOOL AddPart( UBYTE *dirname, UBYTE *filename, ULONG size ) (d1,d2,d3)
d227 5
a231 4
BOOL SetVar( UBYTE *name, UBYTE *buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG GetVar( UBYTE *name, UBYTE *buffer, LONG size, LONG flags ) (d1,d2,d3,d4)
LONG DeleteVar( UBYTE *name, ULONG flags ) (d1,d2)
struct LocalVar *FindVar( UBYTE *name, ULONG type ) (d1,d2)
d233 1
d236 3
a238 3
LONG WriteChars( UBYTE *buf, ULONG buflen ) (d1,d2)
LONG PutStr( UBYTE *str ) (d1)
LONG VPrintf( UBYTE *format, LONG *argarray ) (d1,d2)
d240 1
a240 1
LONG Printf( UBYTE *format, LONG arg1, ... ) (d1,d2)
d243 2
a244 2
LONG ParsePatternNoCase( UBYTE *pat, UBYTE *buf, LONG buflen ) (d1,d2,d3)
BOOL MatchPatternNoCase( UBYTE *pat, UBYTE *str ) (d1,d2)
d250 1
@


36.24
log
@Fixed AddDosEntry from struct DosList * to BOOL.
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.23 91/05/08 22:07:26 jesup Exp Locker: jesup $
d171 1
a171 1
BOOL AddDosEntry( struct DosList *dlist ) (d1)
@


36.23
log
@Fixed return types for FPutC and Flush.  Didn't fix VFWritef, because code
will not be fixed for V37.  Also didn't fix didn't fix FPrintf and
Printf (extra LONG param), because SFD can't handle it yet.
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.22 91/04/18 23:58:53 jesup Exp Locker: jesup $
d171 1
a171 1
struct DosList *AddDosEntry( struct DosList *dlist ) (d1)
@


36.22
log
@ci -u newcalls.autodocs
Oops.  Fixed the type of ParsePattern (and PPNoCase).
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.21 91/02/19 22:45:08 jesup Exp Locker: jesup $
d89 1
a89 1
VOID FPutC( BPTR fh, UBYTE ch ) (d1,d2)
d101 1
a101 1
VOID Flush ( BPTR fh ) (d1)
@


36.21
log
@Fixed DoPkt to add arg5
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.20 91/02/19 22:24:27 jesup Exp $
d212 1
a212 1
BOOL ParsePattern( UBYTE *pat, UBYTE *buf, LONG buflen ) (d1,d2,d3)
d241 1
a241 1
BOOL ParsePatternNoCase( UBYTE *pat, UBYTE *buf, LONG buflen ) (d1,d2,d3)
@


36.20
log
@Fixed setVBuf args
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.19 91/02/19 03:04:39 jesup Exp Locker: jesup $
d59 2
a60 2
LONG DoPkt( struct MsgPort *port, LONG action,
	LONG arg1, LONG arg2, LONG arg3, LONG arg4 ) (d1,d2,d3,d4,d5,d6)
@


36.19
log
@Made all the SetXxxxx functions return the previous value (always did)
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.18 91/02/16 00:47:19 jesup Exp $
d102 1
a102 1
LONG SetVBuf( BPTR fh, LONG type, ULONG size ) (d1,d2,d3)
@


36.18
log
@Added the two new entrypoints
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.17 91/02/13 19:14:43 jesup Exp $
d123 1
a123 1
VOID SetIoErr( LONG result ) (d1)
d139 1
a139 1
VOID SetConsoleTask( struct MsgPort *task ) (d1)
d141 1
a141 1
VOID SetFileSysTask( struct MsgPort *task ) (d1)
d152 1
a152 1
VOID SetProgramDir( BPTR lock ) (d1)
@


36.17
log
@Fixed AbortPkt, Made requester private
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.16 91/02/08 17:32:18 jesup Exp $
d251 2
@


36.16
log
@Fixed typo
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.15 91/02/06 22:13:16 jesup Exp Locker: jesup $
d78 1
a78 1
VOID AbortPkt( struct MsgPort *port ) (d1)
d128 1
a128 1
LONG Requester( UBYTE *s1, UBYTE *s2, UBYTE *s3, ULONG flags ) (d1,d2,d3,d4)
d243 1
d245 1
@


36.15
log
@added DosNameFromAnchor, used old allocvectype entry.
Fixed a return for NameFromFH
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.14 91/01/24 16:12:58 jesup Exp $
d247 1
a247 1
reserve 4
@


36.14
log
@Added SameDevice
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.13 91/01/10 00:45:38 jesup Exp Locker: jesup $
d110 1
a110 1
BOOL NameFromFH( BPTR fh, UBYTE *buffer, LONG len) (d1,d2,d3)
d214 4
a217 1
==reserve 1
d247 1
a247 1
==reserve 4
@


36.13
log
@char->BYTE
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.12 91/01/09 23:51:41 jesup Exp Locker: jesup $
d241 2
a242 1
==reserve 1
@


36.12
log
@Added function for getting strigns to library (so it can be revectored)
Added two more empty function ptrs
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.11 90/12/21 17:25:27 jesup Exp Locker: jesup $
d240 1
a240 1
char *DosGetString(LONG num) (d1)
@


36.11
log
@
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.10 90/12/16 04:44:52 jesup Exp Locker: jesup $
d240 2
a241 1
==reserve 2
d244 2
@


36.10
log
@Added the missing entries for case-insensitive pattern match
@
text
@d1 1
a1 1
==id $Id: dos_lib.sfd,v 36.2 90/07/12 04:00:51 jesup Exp $
d44 1
a44 1
LONG *DateStamp( struct DateStamp *date ) (d1)
@


36.9
log
@Fixed OpenFromLock params
@
text
@d236 7
@


36.8
log
@And of course, the VXxxxx functions too...
@
text
@d105 1
a105 1
BPTR OpenFromLock( BPTR lock, LONG mode ) (d1,d2)
@


36.7
log
@Ack.  Got it wrong again.  You have to add the first of the tags to the proto.
@
text
@d97 1
a97 1
VOID FWritef( BPTR fh, UBYTE *format, ... ) (d1,d2,d3)
d100 1
a100 1
LONG FPrintf( BPTR fh, UBYTE *format, ... ) (d1,d2,d3)
d235 1
a235 1
LONG Printf( UBYTE *format, ... ) (d1,d2)
@


36.6
log
@Added the rest of the varargs statements, added aliases to match Intuition
(XxxTagList for entry, XxxxTags for varargs), and fixed VXxxxf routines
(Remove the V for the varargs version).
@
text
@d56 1
a56 1
APTR AllocDosObjectTags( ULONG type, ... ) (d1,d2)
d135 1
a135 1
struct Process *CreateNewProcTags( ... ) (d1)
d159 1
a159 1
LONG SystemTags( UBYTE *command, ... ) (d1,d2)
d196 1
a196 1
BPTR NewLoadSegTags( UBYTE *file, ... ) (d1,d2)
@


36.5
log
@Added a coouple more varargs
@
text
@d53 2
d56 1
d97 1
d100 1
d132 2
d135 1
d155 2
d159 1
d193 2
d196 1
d235 1
@


36.4
log
@Fixed FindCliProc, DateStamp, added Varargs
@
text
@d93 1
d95 1
d220 1
@


36.3
log
@Added includes, fixed Kodiak typos
@
text
@d44 1
a44 1
LONG *DateStamp( LONG *date ) (d1)
d53 1
d125 1
d134 1
a134 1
struct Process *FindCliProc( LONG num ) (d1)
d146 1
d180 1
a211 1
==private
a214 1
==public
@


36.2
log
@Many changes, most from kodiak, and fixes
@
text
@d1 1
a1 1
==id $Id: dummy,v 0.0 90/05/07 16:03:31 kodiak Exp $
d7 7
d78 1
a78 1
BOOL LockRecords( struct RecLock *recArray, ULONG timeout) (d1,d2)
d80 1
a80 1
BOOL UnLockRecords( struct RecLock *recArray ) (d1)
d183 1
a183 1
struct RDargs *ReadArgs( UBYTE *template, LONG *array, struct RDargs *args )
d186 1
a186 1
LONG ReadItem( UBYTE *name, LONG maxchars, struct CHSource *cHSource )
d189 3
a191 3
LONG MatchFirst( UBYTE *pat, struct AnchorChain *anchor ) (d1,d2)
LONG MatchNext( struct AnchorChain *anchor ) (d1)
VOID MatchEnd( struct AnchorChain *anchor ) (d1)
d195 1
a195 1
VOID FreeArgs( struct RDargs *args ) (d1)
@


36.1
log
@Initial checkin
@
text
@d1 2
d9 2
a10 2
LONG Read( BPTR file, UBYTE *buffer, LONG length ) (d1,d2,d3)
LONG Write( BPTR file, UBYTE *buffer, LONG length ) (d1,d2,d3)
d44 4
a47 2
VOID *AllocDosObject( ULONG type, struct TagItem *tags ) (d1,d2)
VOID FreeDosObject( ULONG type, VOID *ptr ) (d1,d2)
d68 1
d74 1
d80 2
a81 2
LONG FRead( BPTR fh,UBYTE *block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
LONG FWrite( BPTR fh,UBYTE *block, ULONG blocklen, ULONG number ) (d1,d2,d3,d4)
d88 1
d100 1
a100 1
VOID ExAll( BPTR lock, UBYTE *buffer, LONG size, struct ExAllData *data,
d107 1
d114 1
d133 1
a133 1
BPTR SetProgramDir(BPTR lock) (d1)
d135 1
d145 1
a145 1
VOID UnlockDosList( ULONG flags ) (d1)
d147 1
a147 1
BOOL RemDosEntry( struct DosList * ) (d1)
d155 1
d160 1
d164 1
d174 1
d193 1
d196 1
@
