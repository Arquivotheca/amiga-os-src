head     36.22;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


36.22
date     92.07.31.20.16.17;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     91.03.14.21.35.31;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     91.01.10.18.58.42;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.12.18.02.25.06;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.12.02.07.04.24;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.12.01.04.19.05;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.09.14.16.28.52;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.08.09.00.07.05;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.08.06.17.35.18;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.08.02.18.59.25;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.07.30.00.10.54;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.06.13.02.30.35;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.06.12.03.02;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.04.03.04.45.51;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.03.19.23.50.52;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.03.18.00.05.55;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.12.09.02.00.53;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.08.17.16.12;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.11.14.01.35.35;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.19.00.04.56;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.04.22.23;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.07.40;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.22
log
@use localized string for software failure
@
text
@*
* This module implements the Requestor function for DOS.
* It also provides an OpenWindow call.
* 
* It defines BCPL callable functions with the following syntax
*
*    Bool := requestor ( line1, line2, line3 )
*    Bool := requestor2( line1, line2, line3, IDCMPFlags )
*
* The three lines are displayed within an intuition requestor
* box. Two gadgets are also presented, labelled Retry and Cancel
* This call requires about 2K of stack, which is obtained dynamically
* from the free pool. If there is no stack left it returns FALSE anyway.
*
* Changed to only allocating stack if there is less than 2K available.
* If called from BCPL it forces allocation.
*
* Change: we now allow EasyRequest to do the stack magic.  This _may_ cause
* problems with BCPL programs with small stacks.
*
*    Window := OpenWindow( Xpos, Ypos, Width, Height, StripName )
*
* The window specified is opened.
*
* Also defined is XRequest(buttonstring,linearray,IDCMPFlags)
* This allows more buttons with different names, and more lines of text.
*  

	INCLUDE "exec/types.i"
	INCLUDE "exec/nodes.i"
	INCLUDE "exec/lists.i"
	INCLUDE "exec/tasks.i"
	INCLUDE "exec/memory.i"
	INCLUDE "exec/ports.i"
	INCLUDE "exec/interrupts.i"
	INCLUDE "exec/libraries.i"
	INCLUDE "exec/io.i"
	INCLUDE "exec/execbase.i"
	INCLUDE	"intuition/intuition.i"

	INCLUDE	"dos/dos.i"
	INCLUDE	"dos/dosextens.i"
	
	INCLUDE	"libhdr.i"
	INCLUDE "fault.i"

FUNCDEF	MACRO
	XREF	_LVO\1
	ENDM

	INCLUDE "exec/exec_lib.i"

	XREF	_LVOOpenWindow
	XREF	_LVOEasyRequestArgs
	XREF	@@getstring

*
* External definitions
*
	XDEF	@@requester
	XDEF	_requester
	XDEF	@@requester2
	XDEF	_requester2
	XDEF	@@openwindow
	XDEF	REQ0
	XDEF	REQUEST2

* Version 1.0 TJK July 11th 85
* Version 1.1 TJK August 25th 85
* Version 1.2 NHG September 9th 86
* revised to use easyrequest REJ

ABSEXECBASE	EQU	4

* minimum stack required for requester
*
*
* args in d1/d2/d3/d4/ - d1-d3 are char *ptrs, d4 is LONG
*

REQ0
	MOVE.L	#DISKINSERTED,D4
REQUEST2
	ADDQ.L	#1,D1		; null-terminated BSTRs!
	ADDQ.L	#1,D2		; (fakeblib/calldos shifted them)
	ADDQ.L	#1,D3
	bra.s	@@requester2	; calldos doesn't care if d2-d4 are trashed!
				; called with C conventions by calldos

@@requester
_requester
	MOVE.L	#DISKINSERTED,D4		set DISKINSERTED flag
@@requester2
_requester2
	MOVEM.L D2-D7/A2-A6,-(SP)		Save regs
	movem.l	d1-d3/d5,-(sp)			; array of strings for EasyRequest
	MOVE.L	SP,A3				; addr of args for ezreq
	MOVE.L  ABSEXECBASE,A6 	       		Exec pointer
	MOVEQ	#0,D6				And set result to FALSE
	moveq	#0,d7			; use window title by default
*
	MOVE.L	ThisTask(a6),a0			Find my task
	MOVE.L  pr_WindowPtr(A0),a4	        Window Pointer
	MOVE.L	a4,d1
	ADDQ.L	#1,D1
	BEQ     EXIT1				== -1, return FALSE

	move.l  a7,d5				; save old SP in D5

* get intuitionbase
	move.l	pr_GlobVec(a0),a0
	move.l	G_INTUITION(a0),a0	; intuitionbase

* Build intuition arguments (struct EasyStruct, and registers)
*
* Handle three arguments
					; a3 has ptr to arg list (3 strings)
					; 2nd string may be NULL?! FIX!
					; they are followed by the longword
					; errorcode for Abort()
	move.l	a6,a5			; save execbase
	move.l	a0,a6			; ibase in a6

	;-- 2nd argument may be NULL - reorder and use different string
	;-- apparently 3rd can be null also (at least in the old code)
	lea	dos_formatstr(pc),a2	; "%s\n%s\n%s"
	tst.l	8(a3)			; is 3rd arg NULL?
	bne.s	arg3_not_null
	addq.w	#3,a2			; skip over a '%s/n'
arg3_not_null:
	tst.l	4(a3)			; is 2nd arg NULL?
	bne.s	arg2_not_null
	move.l	8(a3),4(a3)		; won't hurt our reg return
					; (we do this because #3 might not be 0)
	addq.w	#3,a2			; skip over a '%s/n'

arg2_not_null:
	moveq	#STR_RETRY_CANCEL,d1
	btst.l	#14,d4			; check for NEWPREFS IDCMP
					; since this no longer is generated,
					; and noone waits on it anyways, it
					; means that we chould use the Reboot|	
					; Suspend.
	beq.s	use_retry
	bclr.l	#14,d4			; remove it just in case
	lea	dos_errorstr(pc),a2	; "%s\n%s%ld)\n%s"
	move.l	8(a3),d0		; swap string 3 and error code
	move.l	12(a3),8(a3)
	move.l	d0,12(a3)
	move.l	#STR_SOFTWARE_FAILURE,d1
	bsr	@@getstring		; window title Software Failure
	move.l	d0,d7
	move.l	#STR_REBOOT_SUSPEND,d1

use_retry:
	bsr	@@getstring
	move.l	d0,d6			; ptr to "Retry|Cancel"
	moveq	#es_SIZEOF,d0
	sub.l	d0,sp			; space for easystruct on stack
	move.l	sp,a1			; register for call
	move.l	a1,a0			; must leave a1 alone
	move.l	d0,(a0)+		; es_StructSize (=es_SIZEOF)
	clr.l	(a0)+			; es_Flags
	move.l	d7,(a0)+		; es_Title (use window title)
	move.l	a2,(a0)+		; es_TextFormat (%s, etc)
	move.l	d6,(a0)			; es_GadgetFormat
	move.l	d4,-(sp)		; save idcmp flags on stack 
					; ER() may modify this value!
	move.l	sp,a2			; argument to ER()
	move.l  a4,a0			; Window Pointer (argument)

* Well thats finished. Try calling intuition at last.
	jsr	_LVOEasyRequestArgs(a6)
	move.l	d0,d6			; result
	bpl.s	selected_gadget

* finished by IDCMP, must be a retry
	moveq	#1,d6

* Get execbase back in a6
selected_gadget:
	move.l a5,a6			; Get ExecBase

* test to see if the requester aborted due to lack of memory (suspend only)
	tst.l	d7			; 0 for retry/cancel
	beq.s	EXIT0			; not suspend/cancel

	move.l	ThisTask(a6),a0
	move.l	pr_Result2(a0),d0
	beq.s	EXIT0			; no error

* Ran out of memory, select retry instead of cancel
	moveq	#1,d6

* Give back stack space used
EXIT0
	MOVE.L	D5,SP				Get back previous SP

* Restore registers and return
EXIT1
	MOVE.L	D6,D0				result
	LEA	4*4(sp),sp		; pop off the 3 string ptrs + error code
	MOVEM.L (SP)+,D2-D7/A2-A6
	RTS
*
* The gadget text is stored here
* 
dos_formatstr	dc.b	'%s',$a,'%s',$a,'%s',0
dos_errorstr	dc.b	'%s',$a,'%s%lx).',$a,'%s',0

	CNOP    0,2
	PAGE
**********************************************************************
*                                                                    *
*       OpenWindow(Xpos,Ypos,Width,Height,StripName)                 *
*                                                                    *
*    Returns a window pointer obtained from Intuition.               *
*    No checks are made on whether the arguments are valid.          *
*                                                                    *
* BCPL-only routine						     *
* Note that stripname MUST have null-termination when called from    *
* BCPL (and always has been this way).				     *
* counts on BCPL interface to move 5th parm into D5		     *
* Calldos guarantees a2 == globvec on entry			     *
**********************************************************************
OW_TYPE EQU	1
OW_MAXW	EQU	$FFFF
OW_MAXH EQU	$FFFF
OW_MINW	EQU	50
OW_MINH	EQU	120
*
OW_FLGS EQU     WINDOWSIZING!WINDOWDRAG!WINDOWDEPTH!ACTIVATE!NOCAREREFRESH
*
@@openwindow:
	MOVE.L  A6,-(SP)                Save regs (d5/d6 not saved, bcpl only)

	MOVEQ.L #-1,D6      		Pens
* Start constructing parameter area on stack
	MOVE.W  #OW_TYPE,-(SP)		Type
	MOVE.W	d6,-(SP)		Window bounds
	MOVE.W	d6,-(SP)		; d6 is -1
	MOVE.W	#OW_MINW,-(SP)
	MOVE.W	#OW_MINH,-(SP)
	CLR.L   -(SP)			Bitmap
	CLR.L   -(SP)			Screen
	MOVE.L  D5,-(SP)		Next arg is name
	CLR.L	-(SP)			Check
	CLR.L	-(SP)			Gadget
	MOVE.L  #OW_FLGS,-(SP)		Flags
	CLR.L	-(SP)			idcmp
	MOVE.W	D6,-(SP)		Pens
	MOVEM.W D1-D4,-(SP)		Xpos/Ypos/Width/Height
	MOVEA.L G_INTUITION(A2),A6      Get intuition library pointer
	MOVEA.L SP,A0                   Into A0
	JSR	_LVOOpenWindow(A6)      Call Intuition
	LEA.L   nw_SIZE(SP),SP          Restore stack
        MOVE.L  (SP)+,A6                Restore regs
	RTS
@


36.21
log
@Suspend if EasyRequest failed due to memory, instead of rebooting.  Takes
arg in d4, not d0 now.  Optimized openwindow a bit.
@
text
@a145 2
	subq.l	#-(STR_REBOOT_SUSPEND-STR_RETRY_CANCEL),d1	; TRICKY!
* FIX! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
d150 4
a153 2
	lea	failure(pc),a0		; window title Software Failure
	move.l	a0,d7
a209 1
failure		dc.b	'Software Failure',0
@


36.20
log
@getstring params changed
@
text
@a66 1
	XDEF	doslib_requester
d78 1
a78 1
* args in d1/d2/d3/(d4)/(d5) - d1-d3 are char *ptrs, d4 is LONG, d5 is long
a83 2
	MOVEM.L	A0/A1,-(SP)
	ASL.L	#2,D1		; BCPL
d85 1
a85 3
	ASL.L	#2,D2
	ADDQ.L	#1,D2
	ASL.L	#2,D3
d87 2
a88 5
	MOVE.L	D4,D0		; requester2 wants it in d0
	bsr.s	@@requester2
	MOVE.L	D0,D1		; rc for BCPL
	MOVEM.L	(SP)+,A0/A1
	JMP	(A6)		; R
a89 4
doslib_requester:
	move.l	d4,d0
	bra.s	@@requester2

d92 1
a92 1
	MOVE.L	#DISKINSERTED,D0		set DISKINSERTED flag
a96 1
	MOVE.L	D0,D4				save eventflags
d106 1
a106 1
	BEQ.S   EXIT1				== -1, return FALSE
d110 1
a110 1
* Open intuition
d136 1
a137 1

a174 1
	tst.l	d0
d184 11
d221 1
a221 1
* BCPL/C routine						     *
d236 3
a238 1
	MOVEM.L D5/A6,-(SP)             Save regs
d241 2
a242 2
	MOVE.W	#OW_MAXW,-(SP)		Window bounds
	MOVE.W	#OW_MAXH,-(SP)
d252 2
a253 2
	MOVEQ   #-1,D5      		Pens
	MOVEM.W D1-D5,-(SP)		Xpos/Ypos/Width/Height/Pens
d258 1
a258 1
        MOVEM.L (SP)+,D5/A6             Restore regs
@


36.19
log
@Removed reference to funcdef.i
@
text
@d151 1
a151 1
	moveq	#STR_RETRY_CANCEL,d0
d159 1
a159 1
	subq.l	#-(STR_REBOOT_SUSPEND-STR_RETRY_CANCEL),d0	; TRICKY!
d162 1
a162 1
	move.l	8(a3),d1		; swap string 3 and error code
d164 1
a164 1
	move.l	d1,12(a3)
d166 1
a166 1
	move.l	a0,d7			; FIX!? internationalize
@


36.18
log
@optimized a bit, and made changes for task stopped requesters
@
text
@d47 4
a50 1
	INCLUDE "exec/funcdef.i"		       
@


36.17
log
@Removed stack swap code, now that intuition no longer takes much stack to call EasyRequest.
@
text
@d76 1
a76 1
* args in d1/d2/d3/(d4) - d1-d3 are char *ptrs, d4 is LONG
d90 1
a90 1
	bsr.s	requester_common
a103 4
*	MOVE.L	D1,a0				D1 must NOT be NULL!
*						; Means check stack size	
*						; D1 = NULL is not legal anyways
requester_common:
d105 1
a105 1
	movem.l	d1-d3,-(sp)		; array of strings for EasyRequest
d107 1
a107 1
	MOVE.L	SP,A5				; addr of args for ezreq
d110 1
d112 2
a113 2
	MOVE.L	ThisTask(a6),a3			Find my task
	MOVE.L  pr_WindowPtr(A3),a4	        Window Pointer
a120 1
	move.l	ThisTask(a6),a0		; a6 = execbase
d127 1
a127 1
	move.l	a5,a3			; ptr to argument list (3 strings)
d129 2
d158 6
d174 1
a174 1
	clr.l	(a0)+			; es_Title (use window title)
d202 1
a202 1
	LEA	12(sp),sp		; pop off the 3 string ptrs
d209 2
@


36.16
log
@Went back to stack-switching, back to 2048 minimum stack for EasyRequest
@
text
@d18 3
a73 3

STSIZE		EQU	2048

d75 1
a89 1
	SUB.L	a0,a0		; no stack space available - force allocation
d104 3
a106 3
	MOVE.L	D1,a0				D1 must NOT be NULL!
						; Means check stack size	
						; D1 = NULL is not legal anyways
d111 1
a111 1
	MOVE.L	SP,A5				addr of D1, etc
d114 1
a114 7
	MOVE.L	#STSIZE,D0			Size required

* should we allocate stack?  (BCPL always, otherwise check size)
* also check pr_WindowPtr before we allocate
* Changed: old bcpl version just checked for wptr < 0, I check for == -1 REJ
	MOVE.L	a0,d1
	BEQ.S	allocate			BCPL
d119 1
a119 1
	BEQ     EXIT1				== -1, return FALSE
d121 1
a121 3
* this didn't work for cli/shell processes
*	MOVE.L	SP,d1				check stack space
*	SUB.L	TC_SPLOWER(a3),d1
a122 33
	move.l	pr_ReturnAddr(a3),a0		; can't count on TC_SPxxxx!!!
	move.l	(a0),d1				; current stacksize
	sub.l	a7,a0				; number of bytes used of stack
	sub.l	a0,d1				; stack size - used = available
	CMP.L	d0,d1				is d1 >= stsize?
	BGE.S	no_allocate			if yes, don't alloc new stack
 
* Get space for stack (d0 has stacksize)
allocate:
	MOVE.L  #MEMF_PUBLIC!MEMF_CLEAR,D1      Clear memory
	JSR	_LVOAllocMem(A6)		Get memory
	MOVE.L	D0,D7				Check it worked, save in d7
	BEQ	EXIT1				Return FALSE (in D6)
* Stack space obtained. Save current SP and swap to new space
* Must point to right end of stack BEFORE swapping!!!!! REJ
* Safe because we can't take an interrupt in the middle of an instruction
*	MOVE.L	TC_SPLOWER(a3),-(a7)		; save task stack ptrs
*	MOVE.L	TC_SPUPPER(a3),-(a7)		;  on old stack
	ADD.L	#STSIZE,D0			; point at past top of new stk
; FIX! lock around switch
*	MOVE.L	d7,TC_SPLOWER(a3)		;  and set new stack ptrs
*	MOVE.L	d0,TC_SPUPPER(a3)
	EXG.L   D0,SP				; use new stack
	BRA.S	alloc_done

no_allocate:
	MOVEQ	#0,d7				; no new stack allocated
	MOVE.L	a7,d0				; new stk ptr == old stk ptr

* d0 = old stack ptr or 0
alloc_done:
	MOVE.L  D0,D5				Save old SP in D5

d181 1
d192 2
a193 7
EXIT0   MOVE.L	D5,SP				Get back previous SP
	TST.L	D7				Did we allocate a new stack?
	BEQ.S	EXIT1				no
; FIX! lock around switch
	move.l	ThisTask(a6),a3
*	MOVE.L	(a7)+,TC_SPUPPER(a3)		; restore task stack ptrs
*	MOVE.L	(a7)+,TC_SPLOWER(a3)		; FIX?
a194 4
	MOVE.L  D7,A1				A1 points to stack low
	MOVE.L	#STSIZE,D0			Stack size
	JSR	_LVOFreeMem(A6)			Free stack used

d196 2
a197 1
EXIT1	MOVE.L	D6,D0				result
a204 1
*retry_cancel	dc.b	'Retry|Cancel',0
@


36.15
log
@Fixed handling of return codes for windowptr == -1
@
text
@a17 3
* Change: we now allow EasyRequest to do the stack magic.  This _may_ cause
* problems with BCPL programs with small stacks.
*
d71 3
a74 3
*STSIZE		EQU	4096	;2048
*
*
d89 1
a89 1
*	SUB.L	a0,a0		; no stack space available - force allocation
d104 3
a106 3
*	MOVE.L	D1,a0				D1 must NOT be NULL!
*						; Means check stack size	
*						; D1 = NULL is not legal anyways
d111 1
a111 1
	MOVE.L	SP,A5				; addr of args for ezreq
d114 2
a115 2
*	MOVE.L	#STSIZE,D0			Size required
*
d119 2
a120 3
*	MOVE.L	a0,d1
*	BEQ.S	allocate			BCPL

d127 10
a136 10
** this didn't work for cli/shell processes
**	MOVE.L	SP,d1				check stack space
**	SUB.L	TC_SPLOWER(a3),d1
*
*	move.l	pr_ReturnAddr(a3),a0		; can't count on TC_SPxxxx!!!
*	move.l	(a0),d1				; current stacksize
*	sub.l	a7,a0				; number of bytes used of stack
*	sub.l	a0,d1				; stack size - used = available
*	CMP.L	d0,d1				is d1 >= stsize?
*	BGE.S	no_allocate			if yes, don't alloc new stack
d139 5
a143 5
*allocate:
*	MOVE.L  #MEMF_PUBLIC!MEMF_CLEAR,D1      Clear memory
*	JSR	_LVOAllocMem(A6)		Get memory
*	MOVE.L	D0,D7				Check it worked, save in d7
*	BEQ	EXIT1				Return FALSE (in D6)
d149 6
a154 10
*	ADD.L	#STSIZE,D0			; point at past top of new stk
*; FIX! lock around switch
**	MOVE.L	d7,TC_SPLOWER(a3)		;  and set new stack ptrs
**	MOVE.L	d0,TC_SPUPPER(a3)
*	EXG.L   D0,SP				; use new stack
*	BRA.S	alloc_done
*
*no_allocate:
*	MOVEQ	#0,d7				; no new stack allocated
*	MOVE.L	a7,d0				; new stk ptr == old stk ptr
d156 3
a158 3
* d0 = old stack ptr
*alloc_done:
*	MOVE.L  SP,D5				Save old SP in D5
d160 3
a162 1
	move.l  a7,d5				; save old SP in D5
a221 1
	tst.l	d0
d232 7
a238 12
EXIT0
	MOVE.L	D5,SP				Get back previous SP
*	TST.L	D7				Did we allocate a new stack?
*	BEQ.S	EXIT1				no
*; FIX! lock around switch
*	move.l	ThisTask(a6),a3
**	MOVE.L	(a7)+,TC_SPUPPER(a3)		; restore task stack ptrs
**	MOVE.L	(a7)+,TC_SPLOWER(a3)		; FIX?
*
*	MOVE.L  D7,A1				A1 points to stack low
*	MOVE.L	#STSIZE,D0			Stack size
*	JSR	_LVOFreeMem(A6)			Free stack used
d240 4
d245 1
a245 2
EXIT1
	MOVE.L	D6,D0				result
@


36.14
log
@Fixed boo-boo in request code (again)
@
text
@d92 1
a92 1
	SUB.L	a0,a0		; no stack space available - force allocation
d107 3
a109 3
	MOVE.L	D1,a0				D1 must NOT be NULL!
						; Means check stack size	
						; D1 = NULL is not legal anyways
d114 1
a114 1
	MOVE.L	SP,A5				addr of D1, etc
d227 1
a227 1
*	move.l	d0,d6			; result
d232 1
a232 2
*	moveq	#1,d6
	moveq	#1,d0
d254 1
a254 1
*	MOVE.L	D6,D0				result
@


36.13
log
@Fixed stack problems
@
text
@d166 3
a168 1
	MOVE.L  D0,D5				Save old SP in D5
@


36.12
log
@Removed stack-subsitutue code
@
text
@d164 1
a164 1
* d0 = old stack ptr or 0
d166 1
a166 1
*	MOVE.L  D0,D5				Save old SP in D5
d225 2
a226 1
	move.l	d0,d6			; result
d230 2
a231 1
	moveq	#1,d6
d239 1
a239 1
*	MOVE.L	D5,SP				Get back previous SP
d252 2
a253 1
EXIT1	MOVE.L	D6,D0				result
@


36.11
log
@bsr to bsr.s
@
text
@d18 3
a73 3

STSIZE		EQU	4096	;2048

d75 3
d117 2
a118 2
	MOVE.L	#STSIZE,D0			Size required

d122 3
a124 2
	MOVE.L	a0,d1
	BEQ.S	allocate			BCPL
d131 10
a140 10
* this didn't work for cli/shell processes
*	MOVE.L	SP,d1				check stack space
*	SUB.L	TC_SPLOWER(a3),d1

	move.l	pr_ReturnAddr(a3),a0		; can't count on TC_SPxxxx!!!
	move.l	(a0),d1				; current stacksize
	sub.l	a7,a0				; number of bytes used of stack
	sub.l	a0,d1				; stack size - used = available
	CMP.L	d0,d1				is d1 >= stsize?
	BGE.S	no_allocate			if yes, don't alloc new stack
d143 5
a147 5
allocate:
	MOVE.L  #MEMF_PUBLIC!MEMF_CLEAR,D1      Clear memory
	JSR	_LVOAllocMem(A6)		Get memory
	MOVE.L	D0,D7				Check it worked, save in d7
	BEQ	EXIT1				Return FALSE (in D6)
d153 10
a162 6
	ADD.L	#STSIZE,D0			; point at past top of new stk
; FIX! lock around switch
*	MOVE.L	d7,TC_SPLOWER(a3)		;  and set new stack ptrs
*	MOVE.L	d0,TC_SPUPPER(a3)
	EXG.L   D0,SP				; use new stack
	BRA.S	alloc_done
a163 4
no_allocate:
	MOVEQ	#0,d7				; no new stack allocated
	MOVE.L	a7,d0				; new stk ptr == old stk ptr

d165 2
a166 2
alloc_done:
	MOVE.L  D0,D5				Save old SP in D5
d236 12
a247 11
EXIT0   MOVE.L	D5,SP				Get back previous SP
	TST.L	D7				Did we allocate a new stack?
	BEQ.S	EXIT1				no
; FIX! lock around switch
	move.l	ThisTask(a6),a3
*	MOVE.L	(a7)+,TC_SPUPPER(a3)		; restore task stack ptrs
*	MOVE.L	(a7)+,TC_SPLOWER(a3)		; FIX?

	MOVE.L  D7,A1				A1 points to stack low
	MOVE.L	#STSIZE,D0			Stack size
	JSR	_LVOFreeMem(A6)			Free stack used
@


36.10
log
@Added hacked up suspend/reboot code
@
text
@d90 1
a90 1
	bsr	requester_common
@


36.9
log
@for rcs 4.x header change
@
text
@d21 3
a62 16
*
* The calling sequence for AutoRequest is as follows
*
* Window      Obtained from pr_WindowPtr A0
* BodyText    Main message		 A1
* PosText     "Retry"			 A2
* NegText     "Cancel"			 A3
* PosFlags    DiskInsertedFlag		 D0
* NegFlags    Null			 D1
* Width       640			 D2
* Height      60			 D3

*
* The text is passed using the IntuiText structure
*

d192 11
@


36.8
log
@Fixed stack allocation/free (bad register)
Use retry/cancel from string routine
Fix stack size check to use actual size of stack
@
text
@@


36.7
log
@Use EasyRequest
@
text
@d39 1
d46 1
d85 1
a85 1
STSIZE		EQU	2048
d139 9
a147 2
	MOVE.L	SP,d1				check stack space
	SUB.L	TC_SPLOWER(a3),d1
d160 2
a161 2
	MOVE.L	TC_SPLOWER(a3),-(a7)		; save task stack ptrs
	MOVE.L	TC_SPUPPER(a3),-(a7)		;  on old stack
d164 2
a165 2
	MOVE.L	d7,TC_SPLOWER(a3)		;  and set new stack ptrs
	MOVE.L	d0,TC_SPUPPER(a3)
d204 3
d215 1
a215 2
	lea	retry_cancel(pc),a2	; "Retry|Cancel"
	move.l	a2,(a0)			; es_GadgetFormat
d238 3
a240 2
	MOVE.L	(a7)+,TC_SPUPPER(a3)		; restore task stack ptrs
	MOVE.L	(a7)+,TC_SPLOWER(a3)		; FIX?
d255 1
a255 1
retry_cancel	dc.b	'Retry|Cancel',0
@


36.6
log
@*** empty log message ***
@
text
@d40 1
a40 7
FUNCDEF     MACRO   * function
LVO_\1      EQU     FUNC_CNT
FUNC_CNT    SET     FUNC_CNT-6
	    ENDM
		     
FUNC_CNT    SET     LIB_NONSTD
		       
d43 2
a44 3
LVO_OpenWindow  EQU     -30-174
LVO_AutoRequest	EQU	-30-318
STSIZE		EQU	2048
a45 1

d77 1
d81 4
d119 2
a120 1
	MOVEM.L D1-D7/A2-A6,-(SP)		Save regs INCLUDING D1!
d145 1
a145 1
	JSR	LVO_AllocMem(A6)		Get memory
d169 5
a173 7
	LEA.L   INAME(PC),A1			Intuition Name
	MOVEQ   #0,D0
	JSR	LVO_OpenLibrary(A6)
	TST.L   D0
	BEQ     EXIT0				Failed, return FALSE
	MOVEA.L D0,A6				Intuition base into A6
* Build intuition arguments
a174 3
	MOVEQ   #0,D0				Set D0 to FALSE
	MOVE.L  A4,A0			        Window Pointer

d176 4
a179 7
	MOVEQ   #0,D1				Flag no previous value
	MOVEQ   #5,D2				Initial topedge value
	MOVEQ   #15,D3				Initial leftedge value
	MOVE.L  (A5)+,D0			Get argument
	LEA.L   -it_SIZEOF(SP),SP	   	Reserve stack space
	MOVEA.L SP,A1				First struct ptr into A1
	BSR     INITIT
d181 13
a193 5
	MOVE.L  (A5)+,D0			Get argument
	BEQ.S   REQ1				No second argument
	ADD.W   #10,D2
	LEA.L   -it_SIZEOF(SP),SP	   	Reserve stack space
	BSR.S   INITIT
d195 15
a209 29
REQ1	MOVE.L  (A5)+,D0			Get argument
	BEQ.S	REQ2				No third argument
	ADD.W   #10,D2
	LEA.L   -it_SIZEOF(SP),SP	   	Reserve stack space
	BSR.S   INITIT
* Zero the last entry in the list. This is just below me on the stack
REQ2	CLR.L   it_NextText(SP)
* Handle the Retry text
	LEA.L   OKMESS(PC),A5			Pos text  
	MOVE.L  A5,D0				Into D0
	MOVEQ   #0,D1				Start of list
	MOVEQ   #AUTOTOPEDGE,D2			Edge info for gadgets
	MOVEQ   #AUTOLEFTEDGE,D3
	LEA.L   -it_SIZEOF(SP),SP	   	Reserve stack space
	MOVEA.L SP,A2
	BSR.S   INITIT
* Handle the Cancel text
	LEA.L   NOKMESS(PC),A5			Neg text
	MOVE.L  A5,D0				Into D0
	MOVEQ   #0,D1				Start of list
	LEA.L   -it_SIZEOF(SP),SP	   	Reserve stack space
	MOVEA.L SP,A3
	BSR.S   INITIT
* Handle other args
*	MOVE.L  #DISKINSERTED,D0		Pos flags
	MOVE.L  D4,D0				Pos flags
	MOVEQ.L	#0,D1				Neg flags
	MOVE.L  #320,D2				Width
	MOVEQ   #72,D3				Height
d211 3
a213 6
	JSR	LVO_AutoRequest(A6)
	MOVE.L	D0,D6				Result
* Close down Intuition if we opened it
EXIT	MOVEA.L A6,A1				IntuiBase to A1
	MOVEA.L ABSEXECBASE,A6			Get ExecBase
	JSR	LVO_CloseLibrary(A6)		Close it down
d215 7
d228 1
a228 1
	MOVE.L	(a7)+,TC_SPLOWER(a3)
d232 1
a232 1
	JSR	LVO_FreeMem(A6)			Free stack used
d236 2
a237 1
	MOVEM.L (SP)+,D1-D7/A2-A6
a239 22
* Subroutine to initialise Intuitext structure.
* Text required is in D0; IntuiText structure is on the stack.
* D1 is either zero, or a pointer to the previous structure
* D2 is the required value for the TopEdge, D3 is that for LeftEdge.
* Corrupts A4.
*
INITIT	LEA.L   4(SP),A4	IntuiText pointer
	MOVE.B  #AUTOFRONTPEN,it_FrontPen(A4)
	MOVE.B  #AUTOBACKPEN,it_BackPen(A4)
	MOVE.B  #AUTODRAWMODE,it_DrawMode(A4)
	MOVE.W  D3,it_LeftEdge(A4)
	MOVE.W  D2,it_TopEdge(A4)
	MOVE.L  #AUTOITEXTFONT,it_ITextFont(A4)
	MOVE.L  D0,it_IText(A4)
	TST.L	D1				D1=0 if last
	BEQ.S	INITIT2				Zero this ptr if D1 zero
	EXG.L   A4,D1				A4 now previous, D1 this
INITIT2	MOVE.L  D1,it_NextText(A4)
	BNE.S	INITIT3				D1 already this node
	MOVE.L	A4,D1				D1 is now this node
INITIT3	RTS
*
d242 2
a243 3
OKMESS	DC.B	'Retry',0
NOKMESS DC.B    'Cancel',0
INAME	DC.B	'intuition.library',0
d287 2
a288 2
	JSR	LVO_OpenWindow(A6)      Call Intuition
	LEA.L   48(SP),SP               Restore stack
@


36.5
log
@*** empty log message ***
@
text
@d35 2
a36 2
	INCLUDE	"libraries/dos.i"
	INCLUDE	"libraries/dosextens.i"
@


36.4
log
@added dos.library entry point
@
text
@d156 1
d238 1
a238 1

@


36.3
log
@Fixed setting stack ptr to null, added comments
@
text
@d64 1
d108 4
@


36.2
log
@Only allocate stack if there isn't enough space on current one.
Sets TC_SPLOWER/UPPER, performance improvements.
@
text
@d137 1
a137 1
	BPL.S	no_allocate
d139 1
a139 1
* Get space for stack
d149 3
a151 3
	MOVE.L	TC_SPUPPER(a3),-(a7)
	ADD.L	#STSIZE,D0
	MOVE.L	d7,TC_SPLOWER(a3)		; set new stack ptrs
d157 2
a158 2
	MOVEQ	#0,d7				no new stack allocated
	MOVE.L	d7,d0				old stk ptr == new stk ptr
d160 1
a160 1
* d0 = old stack ptr
@


36.1
log
@*** empty log message ***
@
text
@d15 3
d96 1
a96 1
	ADDQ.L	#1,D1		; null-terminated BSTRs
d102 2
a103 1
	bsr	@@requester2
d113 5
a117 1
	MOVEM.L D1-D7/A2-A6,-(SP)		Save regs INCLUDING D1
d122 17
d140 1
a140 1
	MOVE.L	#STSIZE,D0			Size required
d148 2
d151 11
a161 1
	EXG.L   D0,SP
d163 1
a163 2
* Now find my own task
	MOVE.L	ThisTask(A6),A3			use execbase global
a171 1
* Changed: old bcpl version just checked for wptr < 0, I check for == -1 REJ
d174 1
a174 4
	MOVE.L  pr_WindowPtr(A3),A0	        Window Pointer
	MOVE.L	A0,D1
	ADDQ.L	#1,D1
	BEQ.S   EXIT				== -1, return FALSE
d180 1
a180 1
	MOVE.L  (A5),D0				Get argument
d185 1
a185 1
	MOVE.L  4(A5),D0			Get argument
d191 1
a191 1
REQ1	MOVE.L  8(A5),D0			Get argument
d227 1
d229 8
a236 2
EXIT0   MOVE.L  D7,A1				A1 points to stack low
	MOVE.L	D5,SP				Get back previous SP
d239 1
@
