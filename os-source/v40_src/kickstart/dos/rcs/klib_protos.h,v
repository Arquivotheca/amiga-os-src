head     36.24;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.24
date     91.04.13.00.07.54;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     91.02.18.23.59.38;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     91.02.13.19.09.44;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.12.18.00.31.11;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.12.10.20.39.55;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.12.03.09.20.44;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.12.01.19.59.05;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.11.21.02.48.50;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.08.01.19.42.56;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.05.31.07.08.21;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.05.22.16.43.57;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.05.09.02.25.38;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.04.03.04.44.21;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.02.16.22.32.08;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     89.12.16.19.56.07;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     89.12.13.01.18.08;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     89.12.11.23.59.22;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     89.12.05.21.47.03;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     89.12.03.14.52.09;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.01.08.24.49;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.11.22.03.27.55;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.11.14.01.40.07;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.04.37.51;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.07.18;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.24
log
@Forgot to update requester2 proto
@
text
@/* klib_protos.h */
/* use ANSI token concatenation operator - ## */

#define ASM __asm
#define REG(x)	register __ ## x

LONG __regargs udiv32	(ULONG denom, ULONG numer);
LONG __regargs divrem32 (LONG denom, LONG numer, LONG *remainder);
LONG __regargs div32	(LONG denom, LONG numer);
LONG __regargs rem32	(LONG denom, LONG numer);

void * __regargs AllocVecPub (LONG bytes);
void * __regargs AllocVecPubClear (LONG bytes);
void __asm freeVec (REG(a1) void *mem);

BPTR __regargs seglist (void);
UBYTE * __regargs ArgStr (void);
void __regargs exit (void);

BPTR ASM loadseg (REG(d1) char *name);
BPTR ASM loadsegbstr (REG(d1) BSTR name);
void ASM unloadseg (REG(d1) BPTR seg);

LONG ASM requester  (REG(d1) char *s1,REG(d2) char *s2,REG(d3) char *s3);
LONG ASM requester2 (REG(d1) char *s1,REG(d2) char *s2,REG(d3) char *s3,
		     REG(d4) LONG eventflags);

LONG __regargs getresult2 (void);
void __regargs setresult2 (LONG result);
void ASM SetIoErr (REG(d1) LONG code);				/* NEW */

struct MsgPort * __regargs filesystemtask (void);
void ASM setfilesys (REG(d1) struct MsgPort *);
struct MsgPort * __regargs consoletask (void);
void ASM setconsole (REG(d1) struct MsgPort *);
BPTR ASM currentdir (REG(d1) LONG flag,REG(d2) BPTR dir);
struct MsgPort * __regargs taskid(void);
struct Process * __regargs myproc(void);
struct CommandLineInterface * __regargs cli(void);

BPTR __regargs input (void);
BPTR __regargs output (void);
void ASM selectinput (REG(d1) BPTR fh);
void ASM selectoutput (REG(d1) BPTR fh);

void ASM abort (REG(d1) LONG guru);
LONG ASM qpkt (REG(d1) struct DosPacket *dp);
LONG ASM bcpl_qpkt (REG(d1) BPTR dp);
LONG ASM returnpkt (REG(d1) struct DosPacket *dp,REG(d2) LONG res1,
		    REG(d3) LONG res2);
struct DosPacket * __regargs taskwait (void);

struct Process * __regargs MakeProc(LONG *stacksize, UBYTE *name, LONG len);
LONG __regargs AddSegArray(struct Process *new, BPTR seglist, LONG entry);
void __regargs deactcode(void);
void __regargs activecode(void);
void __regargs CNP_ActiveCode(void);
void ASM deletetask(void);

BPTR ASM CtoB (REG(d1) char *source,REG(d2) CPTR dest);
void __regargs BtoC (UBYTE *source,char *dest);
void ASM BtoCstr (REG(d1) CPTR string);
void __regargs CtoBstr (char *string);

struct RootNode * __regargs rootstruct (void);
struct DosLibrary * __regargs dosbase (void);
struct DosLibrary * __regargs opendosbase (void);

BYTE __regargs mystricmp(char *a,char *b);
BYTE __regargs mystrnicmp(char *a,char *b,long len);
char * __regargs mystrcat(char *str, char *tail);
struct TagItem * __regargs findTagItem( ULONG tagVal, struct TagItem *tagList );
ULONG __regargs getTagData( ULONG tagVal, ULONG defaultVal,
	struct TagItem *tagList );
ULONG __regargs packBoolTags( ULONG initialFlags, struct TagItem *tagList,
	struct TagItem *boolMap );
struct TagItem * __regargs cloneTagItems( struct TagItem *tagList );
void __regargs freeTagItems( struct TagItem *tagList );
LONG __regargs filterTagItems( struct TagItem *tagList, ULONG *filterArray,
			       LONG logic );

void __regargs store_IBase(struct Library *lib);
void __regargs MySetPrefs(struct Preferences *prefs,LONG size);

void __stdargs mysprintf (UBYTE *str,UBYTE *fmt,LONG arg1,...);
void __regargs copyMem (APTR src, APTR dest, ULONG size);

LONG ASM InternalRunCommand (REG(d1) BPTR seg, REG(d2) LONG stack,
			     REG(d3) UBYTE *args, REG(d4) LONG length);

/* stuff from sendpkt.asm */
void ASM SendPkt(REG(d1) struct DosPacket *dp, REG(d2) struct MsgPort *port,
		 REG(d3) struct MsgPort *replyport);

/*********************/
/* pragma interfaces */
LONG ASM sendpkt4(REG(d1) struct MsgPort *port,
		  REG(d2) LONG action, REG(d3) LONG arg1,
		  REG(d4) LONG arg2, REG(d5) LONG arg3,
		  REG(d6) LONG arg4);
LONG ASM sendpkt3(REG(d1) struct MsgPort *port,
		  REG(d2) LONG action, REG(d3) LONG arg1,
		  REG(d4) LONG arg2, REG(d5) LONG arg3);
LONG ASM sendpkt2(REG(d1) struct MsgPort *port,
		  REG(d2) LONG action, REG(d3) LONG arg1,
		  REG(d4) LONG arg2);
LONG ASM sendpkt1(REG(d1) struct MsgPort *port,
		  REG(d2) LONG action, REG(d3) LONG arg1);
LONG ASM sendpkt0(REG(d1) struct MsgPort *port,
		  REG(d2) LONG action);

LONG splitname (UBYTE *name, UBYTE split, UBYTE *buf, LONG pos, LONG size);

extern LONG mysplitname();

#pragma libcall (&mysplitname) splitname 0 5432105
@


36.23
log
@Added copyMem
@
text
@d26 1
a26 1
		     REG(d0) LONG eventflags);
@


36.22
log
@*** empty log message ***
@
text
@d86 1
@


36.21
log
@Added freeVec and myproc
@
text
@a17 2
LONG ASM runcommand (REG(d1) BPTR seg,REG(d2) LONG stack,REG(d3) char *paramptr,
		     REG(d0) LONG paramlen);
d86 3
@


36.20
log
@added divrem32
@
text
@d14 1
d40 1
@


36.19
log
@*** empty log message ***
@
text
@d7 4
a10 3
LONG __regargs udiv32 (ULONG denom, ULONG numer);
LONG __regargs div32  (LONG denom, LONG numer);
LONG __regargs rem32  (LONG denom, LONG numer);
@


36.18
log
@added utility rtns to support.asm
@
text
@d76 4
@


36.17
log
@*** empty log message ***
@
text
@d71 5
@


36.16
log
@AddSegArray change
@
text
@d56 1
d66 1
d70 1
@


36.15
log
@*** empty log message ***
@
text
@d53 1
a53 2
LONG __regargs AddSegArray(struct Process *new, struct Process *old,
			   BPTR seglist, LONG entry);
@


36.14
log
@remove pragmas used for sendpktN
@
text
@d71 1
a71 1
void __regargs MySetPrefs(struct Preferences *prefs);
@


36.13
log
@Added math rtns, PubClear
@
text
@d81 14
a94 18
LONG sendpkt4(struct MsgPort *port,LONG action,LONG arg1,LONG arg2,LONG arg3,
	     LONG arg4);

LONG sendpkt3(struct MsgPort *port,LONG action,LONG arg1,LONG arg2,LONG arg3);

LONG sendpkt2(struct MsgPort *port,LONG action,LONG arg1,LONG arg2);

LONG sendpkt1(struct MsgPort *port,LONG action,LONG arg1);

LONG sendpkt0(struct MsgPort *port,LONG action);

extern LONG sendpacket();

#pragma libcall (&sendpacket) sendpkt4 0 65432106
#pragma libcall (&sendpacket) sendpkt3 0 5432105
#pragma libcall (&sendpacket) sendpkt2 0 432104
#pragma libcall (&sendpacket) sendpkt1 0 32103
#pragma libcall (&sendpacket) sendpkt0 0 2102
@


36.12
log
@for rcs 4.x header change
@
text
@d7 6
a12 1
void * ASM AllocVecPub  (REG(d1) LONG bytes);
@


36.11
log
@*** empty log message ***
@
text
@@


36.10
log
@,
@
text
@a6 1
void * ASM getvec       (REG(d1) LONG longwords);
a7 10

/* FIX! */
#define AllocVec(x) AllocVecPub(x)

void * ASM getmem       (REG(d1) LONG longwords, REG(d2) LONG type);
void * ASM AllocVecType (REG(d1) LONG bytes, REG(d2) LONG type);

/* FIX!!!!!! */
#define FreeVec(x) freevec(x)
void ASM freevec(REG(d1) void *mem);
@


36.9
log
@AllocVec->AllocVecPub
@
text
@a81 2
struct DosPacket * __regargs CreatePkt (void);
void ASM DeletePkt(REG(d1) struct DosPacket *dp);
@


36.8
log
@*** empty log message ***
@
text
@d8 5
a12 1
void * ASM AllocVec     (REG(d1) LONG bytes);
d15 4
a18 1
void ASM freevec        (REG(d1) void *mem);
@


36.7
log
@*** empty log message ***
@
text
@d66 2
a67 2
LONG __regargs mystricmp(char *a,char *b);
LONG __regargs mystrnicmp(char *a,char *b,long len);
@


36.6
log
@*** empty log message ***
@
text
@d14 1
@


36.5
log
@*** empty log message ***
@
text
@d31 1
d33 1
@


36.4
log
@*** empty log message ***
@
text
@d48 6
a53 6
struct MsgPort * ASM createproc (REG(d1) char *name,REG(d2) LONG pri,
			         REG(d3) BPTR seg,REG(d0) LONG stacksize);
struct MsgPort * ASM createtask (REG(d1) BPTR segl,REG(d2) LONG stacksize,
				 REG(d3) LONG pri,REG(d0) BSTR name,
				 REG(a0) BPTR globvec);
VOID deletetask(void);
@


36.3
log
@added strnicmp, changed stricmp args
@
text
@d43 1
d53 1
d70 6
@


36.2
log
@*** empty log message ***
@
text
@d61 2
a62 1
LONG ASM mystricmp(REG(d1) char *a,REG(d2) char *b);
@


36.1
log
@*** empty log message ***
@
text
@d7 5
a11 3
void * ASM getvec (REG(d1) LONG longwords);
void * ASM getmem (REG(d1) LONG longwords, REG(d2) LONG type);
void ASM freevec (REG(d1) void *mem);
@
