head     36.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.16
date     91.02.19.02.03.27;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     91.02.13.18.57.30;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     91.02.01.03.02.36;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.12.17.22.28.48;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.12.16.04.02.13;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.09.14.17.01.15;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.06.13.02.25.07;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.06.12.05.37.41;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.09.02.12.34;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.03.04.45.01;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.02.16.22.20.45;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.02.02.52.29;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.09.01.51.29;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.11.22.03.17.34;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.14.01.25.18;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.07.34;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.16
log
@Use copyMem instead of memcpy
@
text
@/* path.c */

#include <exec/types.h>
#include <exec/memory.h>
#include "dos/dos.h"
#include "dos/dosextens.h"
#include <string.h>
#include <stddef.h>	/* for offsetof */

#include "libhdr.h"
#include "cli_init.h"

#ifdef LATTICE
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>
#include "path_protos.h"
#include "klib_protos.h"
#include "blib_protos.h"
#endif

static LONG __regargs common_get (LONG offset, UBYTE *buffer, LONG len);
static LONG __regargs uncommon_get (UBYTE *name, UBYTE *buffer, LONG len);
static LONG __regargs common_set (LONG offset, UBYTE *newname, LONG maxsize);


/* cribbed from SeaShell - REJ */

LONG ASM
NameFromLock (REG(d1) BPTR lock, REG(d2) char *buffer, REG(d3) LONG buflen)
{
	BPTR fl_lock;
	BPTR fl_lock2;
	char *name;
	char *vl;
	struct FileInfoBlock *fib;
	LONG rc = FALSE;
	LONG len;

	if (buflen == 0)
	{
		setresult2(ERROR_LINE_TOO_LONG);
		return FALSE;
	}

	*buffer = '\0';

	if (!lock)
	{
		/* null lock - return sys: */
		/* FIX! does this work right for bufferlen < 4? */
		/* FIX! really boot volume */
		/* FIX! get from rn_Boot... */
		return AddPart(buffer,"SYS:",buflen);
	}

	/* save original lock - don't free! */
	/* we don't want to Examine() the lock - it causes a reset of */
	/* FS information for ExNext under FFS */
	fl_lock = copydir(lock);
	if (!fl_lock)
		return FALSE;

	fib = AllocDosObject(DOS_FIB,NULL);
	if (!fib)
	{
		freeobj(fl_lock);
		return FALSE;
	}

	/* null name.  We start at end of buffer and work backwards */
	name  = &buffer[buflen-1];
	*name = '\0';

	/* is fl_lock the root? */
	while (fl_lock2 = parent(fl_lock)) 	/* while fl_lock != root */
	{
		if (examine(fl_lock,fib))
		{
			/* make sure we have enough space */
			len = strlen(fib->fib_FileName);
			/* 1 for null, 1 for /, 1 for :, and 1 for dev = 4 */
			if (name-(len+4) < buffer)
			{
				setresult2(ERROR_LINE_TOO_LONG);
				freeobj(fl_lock2);
				goto cleanup;
			}

			/* add seperator if needed */
			if (*name)
				*--name = '/';
			copyMem(fib->fib_FileName,name - len,len);
			name -= len;
		} else {
			/* error! exit with failure! */
			goto cleanup;
		}
		freeobj(fl_lock);

		fl_lock = fl_lock2;
	}

	if (getresult2())	/*  == ERROR_DEVICE_NOT_MOUNTED) */
	{
		/* error! disk isn't in (ioerr should be 0 for parent(root)!) */
		/* or some other error */
		goto cleanup;
	}

	*--name = ':';

	/* device names must be null-terminated */
	vl = (char *) ((long) (((struct DeviceList *) 
                      ((long) (((struct FileLock *)
	              ((long) fl_lock << 2))->fl_Volume) << 2))->dl_Name) << 2)
		      + 1;

	/* do we have space? */
	len = strlen(vl);
	if (name-len < buffer)
	{
		setresult2(ERROR_LINE_TOO_LONG);
		goto cleanup;
	}
	copyMem(vl,buffer,len);
	/* Danger! counts on strcpy to work forward! */
	strcpy(buffer+len,name);

	rc = DOSTRUE;

cleanup:
	freeobj(fl_lock);
	freeVec(fib);

	return rc;
}

static LONG __regargs
common_get (LONG offset, UBYTE *buffer, LONG len)
{
	struct CommandLineInterface *clip;

	clip = cli();
	if (!clip)
	{
		if (len)
			*buffer = '\0';
		setresult2(ERROR_OBJECT_WRONG_TYPE);
		return FALSE;
	}

	return uncommon_get((UBYTE *)BADDR(*((LONG *) (((LONG) clip)+offset))),
			  buffer,len);
}

LONG ASM
NameFromFH (REG(d1) BPTR fh, REG(d2) char *buffer, REG(d3) LONG buflen)
{
	BPTR lock;
	struct FileInfoBlock *fib = NULL;
	LONG rc = FALSE;
	LONG res2;

	/* kind of ugly coding style here */

	if ((!(lock = ParentOfFH(fh))) ||
	    (!(fib  = AllocDosObject(DOS_FIB,NULL))) ||
	    (!(ExamineFH(fh,fib))) ||
	    (!(NameFromLock(lock,buffer,buflen))))
		goto cleanup;

	rc = AddPart(buffer,fib->fib_FileName,buflen);

cleanup:
	res2 = getresult2();	/* don't lose error code */

	if (fib)
		FreeDosObject(DOS_FIB,fib);
	if (lock)
		freeobj(lock);

	setresult2(res2);

	return rc;
}

static LONG __regargs
uncommon_get (UBYTE *name, UBYTE *buffer, LONG len)
{
	LONG end;

	setresult2(0);
	if (*name < len-1)
		end = *name;
	else {
		end = len - 1;
		setresult2(ERROR_LINE_TOO_LONG);
	}

	if (len != 0) {
		copyMem(name+1,buffer,end);
		buffer[end] = '\0';
	}
	return DOSTRUE;
}

LONG ASM
GetCurrentDirName (REG(d1) UBYTE *buffer, REG(d2) LONG len)
{
	struct CommandLineInterface *clip;

	clip = cli();
	if (!clip)
	{
		/* do a NameFromLock on pr_CurrentDir */
		return NameFromLock(currentdir(FALSE,NULL),buffer,len);
	}

	return uncommon_get((UBYTE *) BADDR(clip->cli_SetName),buffer,len);
}

LONG ASM
GetPrompt (REG(d1) UBYTE *buffer, REG(d2) LONG len)
{
	return common_get(offsetof(struct CommandLineInterface,cli_Prompt),
			  buffer,len);
}

LONG ASM
GetProgramName (REG(d1) UBYTE *buffer, REG(d2) LONG len)
{
	return common_get(offsetof(struct CommandLineInterface,cli_CommandName),
			  buffer,len);
}

/*************************************************************************/

static LONG __regargs
common_set (LONG offset, UBYTE *newname, LONG maxsize)
{
	struct CommandLineInterface *clip;
	UBYTE *name;
	LONG len;

	clip = cli();
	if (!clip)
		return FALSE;

	/* assumes the things are AllocVec()ed! */
	name = (UBYTE *) BADDR(*((LONG *) (((LONG) clip) + offset)));
	/* FIX!!!!!! */
	/*maxsize = *(((LONG *) name)-1) - 4;*/

	/* leave space for NULL and length byte */
	len = strlen(newname);
	if (maxsize-2 < len)
		len = maxsize-2;

	copyMem(newname,name+1,len);
	*name = len;
	name[len+1] = '\0';	/* null-terminate */

	return DOSTRUE;
}

LONG ASM
SetCurrentDirName (REG(d1) UBYTE *dirname)
{
	return common_set(offsetof(struct CommandLineInterface,cli_SetName),
			  dirname,SETMAX*4);
}

LONG ASM
SetPrompt (REG(d1) UBYTE *prompt)
{
	return common_set(offsetof(struct CommandLineInterface,cli_Prompt),
			  prompt,PROMPTMAX*4);
}

LONG ASM
SetProgramName (REG(d1) UBYTE *name)
{
	return common_set(offsetof(struct CommandLineInterface,cli_CommandName),
			  name,NAMEMAX*4);
}

@


36.15
log
@Handle 0-length buffer
@
text
@d92 2
a93 1
			name = memcpy(name - len,fib->fib_FileName,len);
d125 1
a125 1
	memcpy(buffer,vl,len);
d201 1
a201 1
		memcpy(buffer,name+1,end);
d259 1
a259 1
	memcpy(name+1,newname,len);
@


36.14
log
@Fixed handling of GetXxxx with 0 length
@
text
@d39 6
d145 2
@


36.13
log
@FreeVec->freeVec (space saving)
@
text
@d143 1
a143 1
	return uncommon_get((UBYTE *) BADDR(*((LONG *) (((LONG) clip)+offset))),
d191 4
a194 3
	memcpy(buffer,name+1,end);
	buffer[end] = '\0';

@


36.12
log
@exec_old_pragmas.h
@
text
@d126 1
a126 1
	FreeVec(fib);
@


36.11
log
@Fixed bad length check in NameFromLock that caused buffer underflow.
@
text
@d15 1
a15 1
#include <pragmas/exec_pragmas.h>
@


36.10
log
@put NameFromFH in, made it preserve result2 code on failure
added comments
@
text
@d76 1
a76 1
			if (len+4 >= buflen)
@


36.9
log
@A couple optimizations, and added ifdefed-out code for NameFromFH.
@
text
@d68 2
a69 1
	while (fl_lock2 = parent(fl_lock))
a146 1
#ifdef NFFH
d153 1
d166 2
d173 2
a176 1
#endif
@


36.8
log
@PubClear, check the damn string sizes
@
text
@d46 2
a47 2
		strncpy(buffer,"SYS:",buflen);
		return DOSTRUE;
d57 1
a57 1
	fib = AllocVecPub(sizeof(struct FileInfoBlock));
d95 1
a95 2
	/* FIX! should be if (getresult2()) */
	if (getresult2() == ERROR_DEVICE_NOT_MOUNTED)
d98 1
d145 28
@


36.7
log
@for rcs 4.x header change
@
text
@d14 2
a15 1
#include "proto/exec.h"
a20 3
#define AllocNew(x) ((struct x *) AllocMem(sizeof(struct x),\
					   MEMF_PUBLIC|MEMF_CLEAR));

d45 1
d57 1
a57 1
	fib = AllocNew(FileInfoBlock);
d74 1
a74 1
			/* 1 for null, one for /, one for :, and one for dev */
d95 1
d125 1
a125 1
	FreeMem((char *) fib,sizeof(*fib));
d138 1
d207 1
d209 4
d214 2
d219 1
@


36.6
log
@*** empty log message ***
@
text
@@


36.5
log
@Don't play with lock passed in - duplock it
@
text
@d52 2
@


36.4
log
@*** empty log message ***
@
text
@d51 5
d58 2
d61 1
a62 3
	/* save original lock - don't free! */
	fl_lock = lock;

d89 1
a89 2
		if (fl_lock != lock)
			freeobj(fl_lock);
d122 1
a122 2
	if (fl_lock != lock)
		freeobj(fl_lock);
@


36.3
log
@Fixed error condition
@
text
@d5 2
a6 2
#include "libraries/dos.h"
#include "libraries/dosextens.h"
@


36.2
log
@Fixed NULL lock handling, error returns.
Added all the Get/Set things.
@
text
@d80 3
d89 7
@


36.1
log
@*** empty log message ***
@
text
@d8 1
d11 1
d23 5
d43 8
d71 1
d97 2
d100 1
a100 1

d114 107
@
