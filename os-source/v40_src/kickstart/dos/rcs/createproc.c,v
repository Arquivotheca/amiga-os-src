head     36.33;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.33
date     92.08.25.16.20.53;  author jesup;  state Exp;
branches ;
next     36.32;

36.32
date     91.02.19.02.04.40;  author jesup;  state Exp;
branches ;
next     36.31;

36.31
date     91.02.13.18.58.46;  author jesup;  state Exp;
branches ;
next     36.30;

36.30
date     91.01.17.14.15.09;  author jesup;  state Exp;
branches ;
next     36.29;

36.29
date     91.01.10.18.55.59;  author jesup;  state Exp;
branches ;
next     36.28;

36.28
date     90.12.21.16.51.46;  author jesup;  state Exp;
branches ;
next     36.27;

36.27
date     90.12.17.22.28.07;  author jesup;  state Exp;
branches ;
next     36.26;

36.26
date     90.12.16.03.33.56;  author jesup;  state Exp;
branches ;
next     36.25;

36.25
date     90.12.07.03.52.32;  author jesup;  state Exp;
branches ;
next     36.24;

36.24
date     90.12.04.06.43.45;  author jesup;  state Exp;
branches ;
next     36.23;

36.23
date     90.12.03.20.30.30;  author jesup;  state Exp;
branches ;
next     36.22;

36.22
date     90.12.03.12.54.41;  author jesup;  state Exp;
branches ;
next     36.21;

36.21
date     90.12.03.06.22.21;  author jesup;  state Exp;
branches ;
next     36.20;

36.20
date     90.12.01.19.58.00;  author jesup;  state Exp;
branches ;
next     36.19;

36.19
date     90.11.21.02.18.42;  author jesup;  state Exp;
branches ;
next     36.18;

36.18
date     90.09.25.16.12.13;  author jesup;  state Exp;
branches ;
next     36.17;

36.17
date     90.08.01.19.42.24;  author jesup;  state Exp;
branches ;
next     36.16;

36.16
date     90.07.30.00.00.16;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.06.14.15.42.06;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.06.12.05.33.13;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.05.09.02.05.40;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.04.19.05.26.05;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.04.18.17.16.55;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.03.04.42.25;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.17.23.53.52;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.03.05.01.34.07;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.03.05.01.09.09;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.03.03.02.15.36;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.16.22.14.12;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.02.02.17.23.44;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.01.29.01.53.21;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.09.01.46.50;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.12.01.08.28.29;  author jesup;  state Exp;
branches ;
next     ;


desc
@process handling code
@


36.33
log
@Don't free SegArray on exit, it's freed by exec (tc_MemEntry list)
@
text
@/* createproc.c */

#include <exec/types.h>
#include <exec/io.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <utility/tagitem.h>
#include "dos/dos.h"
#include "dos/dosextens.h"
#include "dos/dostags.h"

#include <string.h>
#include <stddef.h>

#include "libhdr.h"
#include "cli_init.h"

#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>
#include "klib_protos.h"
#include "blib_protos.h"
#include "crp_protos.h"
#include "env_protos.h"
#include "path_protos.h"
#include "cli_protos.h"

#define SAME		0		/* for string compares */

#define TOBPTR(x)	(((LONG) (x)) >> 2)

extern UBYTE b_prompt[];
extern UBYTE doslibname[];

/* mappings from tags to flags in the pr_Flags field */
struct TagItem flagmap[] = {
	{ NP_FreeSeglist,PRF_FREESEGLIST },
	{ NP_Cli,	 PRF_FREECLI },
	{ NP_CloseOutput,PRF_CLOSEOUTPUT },
	{ NP_CloseInput, PRF_CLOSEINPUT },
/*	{ NP_CloseError, PRF_CLOSEERROR }, */
	{ NP_Arguments,  PRF_FREEARGS },
	{ TAG_DONE }
};

struct Process * ASM
CreateNewProc (REG(d1) struct TagList *tags)
{
	struct Process *np,*currproc = MYPROC;
	BPTR seglist,entry;
	LONG stack;
	char *name,*args = NULL;
	struct CommandLineInterface *cli = NULL;
	struct TagItem *tag;
	struct CliProcList *cpl; 
	char opened_input = FALSE;
	char opened_output = FALSE;
	char is_process = (currproc->pr_Task.tc_Node.ln_Type == NT_PROCESS);

/*kprintf("In CreateNewProc, is_process = 0x%lx\n",is_process);*/
	if (getTagData(NP_Cli,0,tags))
	{
		cli = makecli(currproc,tags);
		if (!cli)
			return NULL;
	}

	/* stacksize is in bytes */
	stack = getTagData(NP_StackSize,4000,tags);
	name  = (char *) getTagData(NP_Name,(LONG) "New Process",tags);

	/* these are mutually exclusive!!!  Also, ONE of these MUST be used! */
	seglist = getTagData(NP_Seglist,NULL,tags);
	entry   = getTagData(NP_Entry,NULL,tags);

	/* This call allocates process & stack, and sets up the appropriate */
	/* fields, and copies the name into the process.		    */
	/* inits most set fields in the process, sets up stack ptrs, pushes */
	/* the stacksize onto the stack, sets pr_ReturnAddr.		    */

	np = MakeProc(&stack,name,strlen(name));
	if (!np)
		goto cleanup;

	/* This builds the segarray (array of seglists) and links it in.    */
	/* It allocates and builds a fake seglist if needed (for NP_Entry). */
	/* use default segarray in ROM */
	if (!AddSegArray(np,seglist,entry))
		goto cleanup;

/*kprintf("stack is now %ld, seglist = 0x%lx\n",stack,
((LONG *)BADDR(np->pr_SegList))[3]);
kprintf("First instruction is 0x%lx\n",
((UWORD *)BADDR(((LONG *)BADDR(np->pr_SegList))[3]))[2]);*/


	/* flags - CNP() always has a currentdir, unless speced as NULL */
	np->pr_Flags = packBoolTags(PRF_FREECURRDIR |
/*				    PRF_CLOSEERROR | */
				    PRF_CLOSEOUTPUT |
				    PRF_CLOSEINPUT,
				    tags,flagmap);

	np->pr_Task.tc_Node.ln_Pri =
		getTagData(NP_Priority,currproc->pr_Task.tc_Node.ln_Pri,tags);
	if (cli)
		cli->cli_DefaultStack = stack>>2;	/* longwords */

	/* inherited fields */
	if (is_process)
	{
		LONG wp = (LONG) currproc->pr_WindowPtr;

		/* don't copy windowptr from parent unless 0 or -1! */
		if (wp != 0 && wp != -1)
			wp = 0;

		np->pr_ConsoleTask = (void *) getTagData(NP_ConsoleTask,
					  (LONG) currproc->pr_ConsoleTask,tags);
		np->pr_WindowPtr   = (void *) getTagData(NP_WindowPtr,wp,tags);
		np->pr_FileSystemTask = currproc->pr_FileSystemTask;

		/* should we copy the parents local vars? */
		if (getTagData(NP_CopyVars,TRUE,tags))
		{
			if (!copyvars(np,currproc))  /* fail on lack of mem */
				goto cleanup;
		}
	} else {
		np->pr_ConsoleTask = (void *) getTagData(NP_ConsoleTask,NULL,
							 tags);
		np->pr_WindowPtr   = (void *) getTagData(NP_WindowPtr,NULL,
							 tags);
		np->pr_FileSystemTask = taskrootstruct()->rn_BootProc;
					/* evil, FIX! */
	}

	np->pr_CLI = TOBPTR(cli);

	/* set the currentdir and homedir */
	/* Check for failure? FIX */
	tag = findTagItem(NP_CurrentDir,tags);
	np->pr_CurrentDir = tag ? (BPTR) tag->ti_Data :
				  (is_process ? copydir(currproc->pr_CurrentDir) :
						NULL);
	/* if no current dir, don't free it on exit!! */
	/* this is so it can be used to spawn WB programs, that leave */
	/* the currentdir set to wa_Lock.  NewShell can use it too.   */
	if (!np->pr_CurrentDir)
		np->pr_Flags &= ~PRF_FREECURRDIR;

	tag = findTagItem(NP_HomeDir,tags);
	np->pr_HomeDir = tag ? (BPTR) tag->ti_Data :
			       (is_process ? copydir(currproc->pr_HomeDir) :
					     NULL);
	
	/* set the input streams */
	/* FIX! check for Open failure! */
	/* FIX!!!  save in second place in process because of MANX!!!! */

	/* we GUARANTEE it's safe to Open("NIL:",...) from a Task!!!!! */

	tag = findTagItem(NP_Input,tags);
	if (tag)
		np->pr_CIS = tag->ti_Data;
	else {
		np->pr_CIS = findstream("NIL:",MODE_OLDFILE);
		opened_input = TRUE;
	}
/*kprintf("input stream = 0x%lx\n",np->pr_CIS);*/
	if (cli)
	{
		cli->cli_StandardInput = np->pr_CIS;
		cli->cli_CurrentInput  = np->pr_CIS;
	}

	/* output */
	/* FIX! check for Open failure! */
	tag = findTagItem(NP_Output,tags);
	if (tag)
		np->pr_COS = tag->ti_Data;
	else {
		np->pr_COS = findstream("NIL:",MODE_NEWFILE);
		opened_output = TRUE;
	}
/*kprintf("output stream = 0x%lx\n",np->pr_COS);*/
	if (cli)
	{
		cli->cli_StandardOutput = np->pr_COS;
		cli->cli_CurrentOutput  = np->pr_COS;
	}

/*	np->pr_CES = getTagData(NP_Error,stderr(),tags);	*/

	np->pr_ExitCode = (void *) getTagData(NP_ExitCode,NULL,tags);
	np->pr_ExitData = getTagData(NP_ExitData,NULL,tags);

	/* set up arguments - startup code stuffs into a0/d0 */
	/* pr_Arguments is already NULL */
	tag = findTagItem(NP_Arguments,tags);
	if (tag)
	{
		args = AllocVecPub(strlen((char *) tag->ti_Data)+1);
		if (!args)
			goto cleanup;
		strcpy(args,(char *) tag->ti_Data);
		np->pr_Arguments = args;
	}

	if (!seglist) {
		/* find the fake seglist ptr - we always want to free it */
		seglist = ((LONG *) BADDR(np->pr_SegList))[3];
	}

	Forbid(); /* locking so we can set the entry in the cpl array */

	if (cli) {
		cli->cli_Module = seglist;
		np->pr_TaskNum  = find_tnum(&cpl);
		if (!np->pr_TaskNum)
		{
			/* must have failed an alloc */
			Permit();

			goto cleanup;
		}
	}

#ifdef DEATH
	/* should we wait for synchronous reply? */
	if (getTagData(NP_Synchronous,FALSE,tags))
	{
		???
	}
#endif


/*kprintf("Adding New Process at 0x%lx... %s\n",np,np->pr_Task.tc_Node.ln_Name);
kprintf("flags = 0x%lx\n",np->pr_Flags);
kprintf("Execution begins at 0x%lx\n", ((LONG *) BADDR(seglist+1)));*/

	/* CNP_ActiveCode sets up a0/d0 and calls seglist in segarray[3] */
	if (!AddTask(&(np->pr_Task),(void *) CNP_ActiveCode,
				    (void *) deactcode))
	{
		/* AddTask failed!!!! */
		Permit();
		goto cleanup;
	}
/*kprintf("Added it\n");*/

	/* set the tasknum of our new process (cpl is live from find_tnum() */
	if (cli)
		cpl->cpl_Array[np->pr_TaskNum + 1 - cpl->cpl_First] =
							   &(np->pr_MsgPort);
	Permit();

	return np;

cleanup:
	if (np)
	{
		if (opened_input)
			endstream(np->pr_CIS);		/* NULL is ok */
		if (opened_output)
			endstream(np->pr_COS);
/*			endstream(np->pr_CES);	*/
		freevars(np);
		freeVec(args);			/* NULL is OK */
		freeobj(np->pr_CurrentDir);	/* NULL is OK */
		freeobj(np->pr_HomeDir);
		freeVec((void *) BADDR(np->pr_SegList));
	}

	/* if we failed, don't deallocate their path, if supplied */
	if (findTagItem(NP_Path,tags))
		cli->cli_CommandDir = NULL;

	/* if we failed to allocate cli, it returns immediately   */
	freecli(cli,np ? np->pr_TaskNum : 0);	/* NULL is ok */
	if (np)
	{
		/* frees np itself */
		FreeEntry((struct MemList *) np->pr_Task.tc_MemEntry.lh_Head);
	}
	return NULL;
}

struct CommandLineInterface * __regargs
makecli (struct Process *currproc, struct TagItem *tags)
{
	struct CommandLineInterface *cli,*mycli = (void *)BADDR(currproc->pr_CLI);
	UBYTE *ptr,*optr;
	struct TagItem *tag;

	/* Careful!  Old process may not be CLI or even process! */

	/* most things inited to NULL, faillevel set */
	cli = AllocCli(tags);
	if (!cli)
		return NULL;

	/* set up ptrs and copy data */
	ptr  = BADDR(cli->cli_Prompt);
	optr = NULL;
	if (mycli)
		optr = (UBYTE *) BADDR(mycli->cli_Prompt);
	if (!optr)
		optr = (UBYTE *) b_prompt;	/* make sure we get prompt */
	copyMem(optr,ptr,*optr+1);

	ptr  = BADDR(cli->cli_CommandName);
	tag  = findTagItem(NP_CommandName,tags);
	if (tag)
	{
			*ptr = strlen((char *) tag->ti_Data);
		copyMem((void *) tag->ti_Data,ptr+1,*ptr);
	} else {
		if (mycli)
		{
			optr = (UBYTE *) BADDR(mycli->cli_CommandName);
			if (optr)
				copyMem(optr,ptr,*optr+1);
		}
	}

	ptr  = BADDR(cli->cli_SetName);
	tag  = findTagItem(NP_CurrentDir,tags);
/* FIX!! do something about tasks! */
	if (tag && currproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
	{
		*ptr = 0;
		/* FIX! should we do something different on error? */
		/* FIX! use SetDirName */
		if (NameFromLock(tag->ti_Data,ptr+1,SETMAX*4-1))
			*ptr = strlen(ptr+1);
	} else {
		optr = NULL;
		if (mycli)
			optr = (UBYTE *) BADDR(mycli->cli_SetName);
		if (!optr)
			optr = "";	/* should do NameFromLock! FIX! */
		copyMem(optr,ptr,*optr+1);
	}

	/* path */
	tag = findTagItem(NP_Path,tags);
	if (tag)
	{
		cli->cli_CommandDir = tag->ti_Data;
	} else {
		if (mycli)
			cli->cli_CommandDir = copylist(mycli->cli_CommandDir);
	}

	/* copy some stuff */
	if (mycli)
	{
		cli->cli_FailLevel   = mycli->cli_FailLevel;
	}
	/* allow background to default to DOSTRUE, interactive to false, etc */

	return cli;
}

struct CommandLineInterface * __regargs
AllocCli (struct TagItem *tags)
{
	struct CommandLineInterface *cli;

	cli = AllocVecPubClear(sizeof(struct CommandLineInterface));
	if (!cli)
		return NULL;

	/* set up ptrs */
	if (!(cli->cli_Prompt =	TOBPTR(AllocVecPubClear(
				    getTagData(ADO_PromptLen,
					       PROMPTMAX*4,tags)))))
		goto cleanup;

	if (!(cli->cli_CommandName = TOBPTR(AllocVecPubClear(
					getTagData(ADO_CommNameLen,
						   NAMEMAX*4,tags)))))
		goto cleanup;

	if (!(cli->cli_CommandFile = TOBPTR(AllocVecPubClear(
					getTagData(ADO_CommFileLen,
						   FILEMAX*4,tags)))))
		goto cleanup;

	if (!(cli->cli_SetName = TOBPTR(AllocVecPubClear(
					getTagData(ADO_DirLen,SETMAX*4,tags)))))
		goto cleanup;

	cli->cli_FailLevel   = CLI_INITIAL_FAIL_LEVEL;
	cli->cli_Background  = DOSTRUE;			/* default */

	return cli;

	/* freevec(0) is safe! */
cleanup:
	freeVec(BADDR(cli->cli_CommandFile));
	freeVec(BADDR(cli->cli_CommandName));
	freeVec(BADDR(cli->cli_Prompt));
	freeVec(cli);

	return NULL;
}

void __regargs
freecli (struct CommandLineInterface *cli, LONG tnum)
{
	if (cli)
	{
		freepath(cli->cli_CommandDir);

		/* kill before freeing cli struct */
		if (tnum)
			kill_cli_num(tnum);

		/* I had better have allocated it! */
		/* FIX? */
		/* high = *(((LONG *) cli)-1) + (LONG) cli;
		   if (BADDR(cli->cli_SetName) >= (LONG) cli &&
		       BADDR(cli->cli_SetName) < high)
			ARGH! I didn't allocate it!
		*/
		freeVec(BADDR(cli->cli_SetName));
		freeVec(BADDR(cli->cli_CommandFile));
		freeVec(BADDR(cli->cli_CommandName));
		freeVec(BADDR(cli->cli_Prompt));
		freeVec(cli);

	}
}

void __regargs
freepath (BPTR path)
{
	struct Path *p,*next;

	/* passed in as BPTR */
	p = BADDR(path);

	/* if we're started from a task, cli_CommandDir WILL be NULL */
	while (p)
	{
		next = (struct Path *) BADDR(p->path_Next);
		freeobj(p->path_Lock);
		freeVec(p);

		p = next;
	}
}

/* MUST be callable from a task! */

struct MsgPort * ASM 
createtaskproc (REG(a0) char *name, REG(a1) BPTR seg, REG(a2) BPTR gvec,
		REG(d0) LONG stacksize, REG(d1) LONG namelen,
		REG(d2) LONG pri, REG(d3) LONG task)
{
	struct Process *np,*currproc = MYPROC;
	LONG stack = stacksize;

	/* This call allocates process & stack, and sets up the appropriate */
	/* fields, and copies the name into the process.		    */
	/* inits most set fields in the process, sets up stack ptrs, pushes */
	/* the stacksize onto the stack, sets pr_ReturnAddr.		    */

	np = MakeProc(&stack,name,namelen);
	if (!np)
		return NULL;

	/* This builds the segarray (array of seglists) and links it in.    */
	/* Only for createproc, not for createtask */
	if (!task)
	{
		if (!AddSegArray(np,seg,NULL))
			goto cleanup;
		// segarray is added to tc_MemList, so it gets freed on RemTask

	} else {
		np->pr_SegList = seg;
		np->pr_GlobVec = BADDR(gvec);
	}

	np->pr_Task.tc_Node.ln_Pri = pri;

	/* inherited fields */
	if (currproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
	{
		np->pr_ConsoleTask    = currproc->pr_ConsoleTask;
		np->pr_WindowPtr      = currproc->pr_WindowPtr;
		np->pr_FileSystemTask = currproc->pr_FileSystemTask;
	} else {
		/* leave others NULL */
		np->pr_FileSystemTask = taskrootstruct()->rn_BootProc;
					/* evil, FIX! */
	}

	/* can fail now */
	if (!AddTask(&(np->pr_Task),(void *) (task ? activecode :
						((LONG *) BADDR(seg+1))),
				    (void *) deactcode))
	{
		goto cleanup;
	}

	return &(np->pr_MsgPort);

cleanup:
	freeVec((void *) BADDR(np->pr_SegList));
	FreeEntry((struct MemList *) np->pr_Task.tc_MemEntry.lh_Head);

	return NULL;
}

struct MsgPort * ASM 
createproc (REG(d1) char *name, REG(d2) LONG pri, REG(d3) BPTR seg,
	    REG(d0) LONG stacksize)
{
	return createtaskproc(name,seg,NULL,stacksize,strlen(name),pri,FALSE);
}

struct MsgPort * ASM 
createtask (REG(d1) BPTR segarray, REG(d2) LONG stacksize, REG(d3) LONG pri,
	    REG(d0) BSTR bname, REG(a0) BPTR gvec)
{
	char *name = BADDR(bname);

	return createtaskproc(name+1,segarray,gvec,stacksize*4,*name,pri,TRUE);
}

/* version of rootstruct that's safe to call from a task (doesn't use dosbase)*/

struct RootNode * __regargs
taskrootstruct ()
{
	struct DosLibrary *DOSBase;

	DOSBase = (void *) OpenLibrary(doslibname,0);
	/* it MUST succeed */
	CloseLibrary((struct Library *) DOSBase);
	/* safe since we know we're open at least once */

	return DOSBase->dl_Root;
}

/* formerly contained in DEACT in doslib.asm */

LONG __regargs
CleanupProc (struct Process *p, LONG returncode)
{
	LONG flags = p->pr_Flags;
	LONG *segarray;

/*kprintf("Process %s ending, flags = 0x%lx\n",p->pr_Task.tc_Node.ln_Name,flags);*/

	/* call pr_ExitCode if it exists */
	if (p->pr_ExitCode)
	{
		/* function ptr, cal with d0 = returncode, d1 = pr_ExitData */
		/* icky function ptr cast - returns new returncode */
		returncode = (*((LONG (* __regargs)(LONG,LONG)) p->pr_ExitCode))
						(returncode,p->pr_ExitData);
	}

	/* should we free the seglist?  (segarray[3]) */
	segarray = (LONG *) BADDR(p->pr_SegList);

	if ((flags & PRF_FREESEGLIST) && segarray[3])
		unloadseg(segarray[3]);

	/* and free the array itself - always */
// Segarray is on the tc_MemEntry list now...
//	freeVec((char *) segarray);

	/* should we unlock to currentdir? */
	if (flags & PRF_FREECURRDIR)
		freeobj(p->pr_CurrentDir);

	/* always free homedir (may be NULL) */
	freeobj(p->pr_HomeDir);

	/* free local variables */
	freevars(p);

	/* clean up filehandles */
	if (flags & PRF_CLOSEOUTPUT)
		endstream(p->pr_COS);

	if (flags & PRF_CLOSEINPUT)
		endstream(p->pr_CIS);

/*
	if (flags & PRF_CLOSEERROR)
		endstream(p->pr_CES);
*/

	/* free arguments if passed in */
	if (flags & PRF_FREEARGS)
		freeVec(p->pr_Arguments);

	/* cli and related structures */
	if (flags & PRF_FREECLI)
	{
		struct CommandLineInterface *cli = BADDR(p->pr_CLI);

		p->pr_CLI = NULL;
		freecli(cli,p->pr_TaskNum); /* NULL ok */
	}

	/* free any private global vector */
	if (p->pr_GlobVec != dosbase()->dl_GV)
		freeVec(((char *) p->pr_GlobVec) - NEGATIVE_GLOBAL_SIZE*4);

	/* exec frees everything on the task mementry list: process, stack */
	/* also Segarray */
	return returncode;
}
@


36.32
log
@Use copyMem instead of memcpy
@
text
@d482 2
d577 2
a578 1
	freeVec((char *) segarray);
d620 1
@


36.31
log
@Clear pr_CLI before freeing it
@
text
@d311 1
a311 1
	memcpy(ptr,optr,*optr+1);
d318 1
a318 1
		memcpy(ptr+1,(char *) tag->ti_Data,*ptr);
d324 1
a324 1
				memcpy(ptr,optr,*optr+1);
d344 1
a344 1
		memcpy(ptr,optr,*optr+1);
@


36.30
log
@remove np_currentinput/output
@
text
@d546 1
a546 1
	return (struct RootNode *) DOSBase->dl_Root;
d605 6
a610 1
		freecli((void *) BADDR(p->pr_CLI),p->pr_TaskNum); /* NULL ok */
@


36.29
log
@We're supposed to default to coping local vars
@
text
@d175 1
a175 2
		cli->cli_CurrentInput  = getTagData(NP_CurrentInput,
						    np->pr_CIS,tags);
d191 1
a191 2
		cli->cli_CurrentOutput  = getTagData(NP_CurrentOutput,
						     np->pr_COS,tags);
@


36.28
log
@Don't set freeseglist bit if we allocated it as part of the segarray!
@
text
@d125 1
a125 1
		if (getTagData(NP_CopyVars,0,tags))
@


36.27
log
@FreeVec->freeVec (space saving)
@
text
@a38 1
	{ NP_Entry,	 PRF_FREESEGLIST },
@


36.26
log
@exec_old_pragmas.h
Added NP_CurrentInput (probably will be replace with NP_StandardInput)
same for output
Fixed arguments (oops!!!!)  It didn't copy them, very bad.
Don't free caller's path argument if I can't create the new
process
@
text
@d51 1
a51 1
	struct Process *np,*myproc = MYPROC;
d60 1
a60 1
	char is_process = (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS);
d65 1
a65 1
		cli = makecli(myproc,tags);
d107 1
a107 1
		getTagData(NP_Priority,myproc->pr_Task.tc_Node.ln_Pri,tags);
d114 1
a114 1
		LONG wp = (LONG) myproc->pr_WindowPtr;
d121 1
a121 1
					  (LONG) myproc->pr_ConsoleTask,tags);
d123 1
a123 1
		np->pr_FileSystemTask = myproc->pr_FileSystemTask;
d128 1
a128 1
			if (!copyvars(np,myproc))  /* fail on lack of mem */
d146 1
a146 1
				  (is_process ? copydir(myproc->pr_CurrentDir) :
d156 1
a156 1
			       (is_process ? copydir(myproc->pr_HomeDir) :
d273 1
a273 1
		FreeVec(args);			/* NULL is OK */
d276 1
a276 1
		FreeVec((void *) BADDR(np->pr_SegList));
d294 1
a294 1
makecli (struct Process *myproc, struct TagItem *tags)
d296 1
a296 1
	struct CommandLineInterface *cli,*mycli = (void *)BADDR(myproc->pr_CLI);
d334 1
a334 1
	if (tag && myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
d406 4
a409 4
	FreeVec(BADDR(cli->cli_CommandFile));
	FreeVec(BADDR(cli->cli_CommandName));
	FreeVec(BADDR(cli->cli_Prompt));
	FreeVec(cli);
d432 5
a436 5
		FreeVec(BADDR(cli->cli_SetName));
		FreeVec(BADDR(cli->cli_CommandFile));
		FreeVec(BADDR(cli->cli_CommandName));
		FreeVec(BADDR(cli->cli_Prompt));
		FreeVec(cli);
d454 1
a454 1
		FreeVec(p);
d467 1
a467 1
	struct Process *np,*myproc = MYPROC;
d493 1
a493 1
	if (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
d495 3
a497 3
		np->pr_ConsoleTask    = myproc->pr_ConsoleTask;
		np->pr_WindowPtr      = myproc->pr_WindowPtr;
		np->pr_FileSystemTask = myproc->pr_FileSystemTask;
d515 1
a515 1
	FreeVec((void *) BADDR(np->pr_SegList));
d578 1
a578 1
	FreeVec((char *) segarray);
d604 1
a604 1
		FreeVec(p->pr_Arguments);
d612 1
a612 1
		FreeVec(((char *) p->pr_GlobVec) - NEGATIVE_GLOBAL_SIZE*4);
@


36.25
log
@Freevars now takes an argument, we now free vars on CNP failure
@
text
@d21 1
a21 1
#include <pragmas/exec_pragmas.h>
d54 1
a54 1
	char *name;
d176 2
a177 1
		cli->cli_CurrentInput  = np->pr_CIS;
d193 2
a194 1
		cli->cli_CurrentOutput  = np->pr_COS;
d203 10
a212 1
	np->pr_Arguments = (void *) getTagData(NP_Arguments,NULL,tags);
d273 1
d279 5
d614 1
@


36.24
log
@mods to debugs
@
text
@d261 1
d571 1
a571 1
	freevars();
@


36.23
log
@more protect for makecli (fully protected)
let interactive default to NULL
@
text
@d62 1
a62 1
/*kprintf("In CreateNewProc\n");*/
d92 2
a93 2
/*
kprintf("stack is now %ld, seglist = 0x%lx\n",stack,
d96 1
a96 2
((UWORD *)BADDR(((LONG *)BADDR(np->pr_SegList))[3]))[2]);
*/
d98 1
d230 2
a231 2
/*
kprintf("Adding New Process at 0x%lx... %s\n",np,np->pr_Task.tc_Node.ln_Name);
d233 2
a234 2
kprintf("Execution begins at 0x%lx\n", ((LONG *) BADDR(seglist+1)));
*/
@


36.22
log
@Protect agains someone passing in a CLI structure with a NULL
CommandName pointer.  (Shell was taking enforcer hits)
@
text
@d284 1
a284 1
	/* most things inited to NULL except buffers */
d291 1
d294 2
a295 2
	else
		optr = (UBYTE *) b_prompt;
d324 1
d327 1
a327 1
		else
a328 1
		/* FIX!! do something about tasks! */
d336 1
a336 2
		if (tag->ti_Data)
			cli->cli_CommandDir = tag->ti_Data;
a345 2
		cli->cli_Interactive = mycli->cli_Interactive;
		/* not really true */
@


36.21
log
@Remove ubase stuff
@
text
@d301 1
a301 1
		*ptr = strlen((char *) tag->ti_Data);
d305 1
d307 3
a309 3
		else
			optr = "";	/* "" is ptr to \0 which is good bstr */
		memcpy(ptr,optr,*optr+1);
@


36.20
log
@Use stub in support.asm for utility library rtns
@
text
@a18 1
#define UtilityBase myubase
a51 1
	LONG myubase;
a57 1
	struct DosLibrary *DOSBase;
a61 10
	/* MUST be callable from a task! */
	if (is_process)
		myubase = (((LONG *) myproc->pr_GlobVec)[G_UTILITYBASE]);
	else {
		DOSBase = (void *) OpenLibrary(doslibname,0);
		myubase = ((LONG *) (DOSBase->dl_A2))[G_UTILITYBASE];
		CloseLibrary((struct Library *) DOSBase);
		/* we know the dos must be open once! */
	}

d65 1
a65 1
		cli = makecli(myproc,tags,myubase);
d276 1
a276 1
makecli (struct Process *myproc, struct TagItem *tags, LONG myubase)
d285 1
a285 1
	cli = AllocCli(tags,myubase);
d354 1
a354 1
AllocCli (struct TagItem *tags, LONG myubase)
@


36.19
log
@Added support for NP_Arguments, remvoed debugs
@
text
@d76 1
a76 1
	if (GetTagData(NP_Cli,0,tags))
d84 2
a85 2
	stack = GetTagData(NP_StackSize,4000,tags);
	name  = (char *) GetTagData(NP_Name,(LONG) "New Process",tags);
d88 2
a89 2
	seglist = GetTagData(NP_Seglist,NULL,tags);
	entry   = GetTagData(NP_Entry,NULL,tags);
d113 1
a113 1
	np->pr_Flags = PackBoolTags(PRF_FREECURRDIR |
d120 1
a120 1
		GetTagData(NP_Priority,myproc->pr_Task.tc_Node.ln_Pri,tags);
d133 1
a133 1
		np->pr_ConsoleTask = (void *) GetTagData(NP_ConsoleTask,
d135 1
a135 1
		np->pr_WindowPtr   = (void *) GetTagData(NP_WindowPtr,wp,tags);
d139 1
a139 1
		if (GetTagData(NP_CopyVars,0,tags))
d145 1
a145 1
		np->pr_ConsoleTask = (void *) GetTagData(NP_ConsoleTask,NULL,
d147 1
a147 1
		np->pr_WindowPtr   = (void *) GetTagData(NP_WindowPtr,NULL,
d157 1
a157 1
	tag = FindTagItem(NP_CurrentDir,tags);
d167 1
a167 1
	tag = FindTagItem(NP_HomeDir,tags);
d178 1
a178 1
	tag = FindTagItem(NP_Input,tags);
d194 1
a194 1
	tag = FindTagItem(NP_Output,tags);
d208 1
a208 1
/*	np->pr_CES = GetTagData(NP_Error,stderr(),tags);	*/
d210 2
a211 2
	np->pr_ExitCode = (void *) GetTagData(NP_ExitCode,NULL,tags);
	np->pr_ExitData = GetTagData(NP_ExitData,NULL,tags);
d214 1
a214 1
	np->pr_Arguments = (void *) GetTagData(NP_Arguments,NULL,tags);
d237 1
a237 1
	if (GetTagData(NP_Synchronous,FALSE,tags))
d311 1
a311 1
	tag  = FindTagItem(NP_CommandName,tags);
d325 1
a325 1
	tag  = FindTagItem(NP_CurrentDir,tags);
d344 1
a344 1
	tag = FindTagItem(NP_Path,tags);
d377 1
a377 1
				    GetTagData(ADO_PromptLen,
d382 1
a382 1
					GetTagData(ADO_CommNameLen,
d387 1
a387 1
					GetTagData(ADO_CommFileLen,
d392 1
a392 1
					GetTagData(ADO_DirLen,SETMAX*4,tags)))))
@


36.18
log
@Make freepath() subroutine
@
text
@d213 3
d248 2
a249 1
	if (!AddTask(&(np->pr_Task),(void *) ((LONG *) BADDR(seglist+1)),
d558 9
a570 1
{ /*kprintf("unloading code @@ 0x%lx\n",segarray[3]);*/
d572 1
a572 1
}
a573 1
/*kprintf("Freeing segarray\n");*/
a577 1
{ /*kprintf("freeing currentdir (0x%lx_\n",p->pr_CurrentDir);*/
d579 1
a579 1
}
a580 1
/*kprintf("freeing homedir (0x%lx)\n",p->pr_HomeDir);*/
a583 1
/*kprintf("freeing local vars\n");*/
a587 1
{ /*kprintf("Closing COS 0x%lx\n",p->pr_COS);*/
d589 1
a589 1
}
a590 1
{ /*kprintf("Closing CIS 0x%lx\n",p->pr_CIS);*/
d592 1
a592 1
}
a594 1
{ kprintf("Closing CES 0x%lx\n",p->pr_CES);
a595 1
}
a599 1
{ /*kprintf("freeing arg string\n",p->pr_Arguments);*/
d601 1
a601 1
}
a603 1
{ /*kprintf("Freeing cli structure 0x%lx\n",BADDR(p->pr_CLI));*/
d605 1
a605 1
}
a607 1
{ /*kprintf("Freeing private globvec 0x%lx\n",((char *) p->pr_GlobVec) - NEGATIVE_GLOBAL_SIZE*4);*/
d609 1
a609 2
}
/*kprintf("exiting, returncode %ld\n",returncode);*/
@


36.17
log
@AddSegArray changes (for tasks)
@
text
@a408 2
	struct Path *p, *next;

d411 1
a411 7
		/* if we're started from a task, cli_CommandDir WILL be NULL */
		p = (struct Path *) BADDR(cli->cli_CommandDir);
		while (p)
		{
			next = (struct Path *) BADDR(p->path_Next);
			freeobj(p->path_Lock);
			FreeVec(p);
a412 3
			p = next;
		}

d430 19
@


36.16
log
@Fixed mising ;
@
text
@d102 2
a103 1
	if (!AddSegArray(np,myproc,seglist,entry))
d467 1
a467 1
		if (!AddSegArray(np,myproc,seg,NULL))
@


36.15
log
@Fixed low-mem cleanup in createproc
@
text
@d460 1
a460 1
		return NULL
@


36.14
log
@Windowptr fix.  don't copy unless 0, -1, or supplied by user.
fixed memory leak on freecli.
@
text
@d460 1
a460 1
		goto cleanup;
@


36.13
log
@PubClear, common dos.library, added AllocCli, cleaned up CNP lock-handling code
@
text
@d126 6
d134 1
a134 2
		np->pr_WindowPtr   = (void *) GetTagData(NP_WindowPtr,
					  (LONG) myproc->pr_WindowPtr,tags);
a421 1
		FreeVec(cli);
d423 1
d426 14
@


36.12
log
@debug changes
@
text
@d35 1
d63 1
d66 1
a66 1
	if (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
d69 1
a69 1
		DOSBase = (void *) OpenLibrary("dos.library",0);
d83 1
d121 1
a121 1
		cli->cli_DefaultStack = stack;
d124 1
a124 1
	if (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS)
d153 2
a154 3
			       (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS ?
					copydir(myproc->pr_CurrentDir) :
					NULL);
d163 2
a164 3
			       (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS ?
					copydir(myproc->pr_HomeDir) :
					NULL);
d287 2
a288 3
	cli = AllocVec(sizeof(*mycli) + NAMEMAX*4 + PROMPTMAX*4 +
		        SETMAX*4 + FILEMAX*4,
		       MEMF_PUBLIC|MEMF_CLEAR);
d293 1
a293 1
	ptr  = (UBYTE *) (((LONG) cli) + sizeof(*cli));
a297 1

a298 1
	cli->cli_Prompt = TOBPTR(ptr);
d300 1
a300 1
	ptr  = ptr + PROMPTMAX*4;
a312 1
	cli->cli_CommandName = TOBPTR(ptr);
d314 1
a314 5
	ptr  = ptr + NAMEMAX*4;
	*ptr = 0;
	cli->cli_CommandFile = TOBPTR(ptr);

	ptr  = ptr + FILEMAX*4;
a331 1
	cli->cli_SetName = TOBPTR(ptr);
a349 3
	} else {
		cli->cli_FailLevel   = CLI_INITIAL_FAIL_LEVEL;
		cli->cli_Interactive = FALSE;
d351 1
a351 1
	cli->cli_Background  = DOSTRUE;			/* well, it is */
d356 44
d508 1
a508 1
	DOSBase = (void *) OpenLibrary("dos.library",0);
@


36.11
log
@Fix to remvoes prf_freecurrdir for currdir==null
@
text
@d491 1
a491 1
/*kprintf("Process %s ending\n",p->pr_Task.tc_Node.ln_Name);*/
d528 1
a528 1
{ kprintf("Closing COS 0x%lx\n",p->pr_COS);
@


36.10
log
@for rcs 4.x header change
@
text
@d107 8
d153 5
a204 7

	/* flags - CNP() always has a currentdir, unless speced as NULL */
	np->pr_Flags = PackBoolTags(PRF_FREECURRDIR |
/*				    PRF_CLOSEERROR | */
				    PRF_CLOSEOUTPUT |
				    PRF_CLOSEINPUT,
				    tags,flagmap);
@


36.9
log
@A bunhc of fixes, and added support for AddTask failure.
@
text
@@


36.8
log
@Close doslibrary when done
@
text
@a33 17

/* BCPL dos used BPTR to the buffers in the filehandles.  I want to use CPTRs
 * for speed reasons, but am leaving them a BPTRs until I can boot the new
 * dos to reduce possible problems using handles created by the old dos.
 * NOTE: must also change setting of the buffer!!! (marked by "FIX!")
 * ALSO NOTE: must change bcplio.c also!!!!
 * Can't do it: Execute/Run/NewCLI(?) use it also.  ARGH
 */

#ifdef NEWDOS
#define BUFFER(fh)	((UBYTE *) (fh)->fh_Buf)
#define TOBUFFER(buf)	(buf)
#else
#define BUFFER(fh)	((UBYTE *) BADDR((fh)->fh_Buf))
#define TOBUFFER(buf)	(TOBPTR(buf))
#endif

d139 1
a139 1
	/* if currentdir is NULL, don't DupLock it */
d142 3
a144 4
			       (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS &&
				myproc->pr_CurrentDir ? 
						copydir(myproc->pr_CurrentDir) :
						NULL);
d148 1
a148 2
			       (myproc->pr_Task.tc_Node.ln_Type == NT_PROCESS &&
				myproc->pr_HomeDir ?
a214 8
			if (opened_input)
				endstream(np->pr_CIS);		/* NULL is ok */
			if (opened_output)
				endstream(np->pr_COS);
/*			endstream(np->pr_CES);	*/
			freeobj(np->pr_CurrentDir);	/* NULL is OK */
			freeobj(np->pr_HomeDir);

a226 1
	/* FIX! check for error */
d232 7
a238 2
	AddTask(&(np->pr_Task),(void *) ((LONG *) BADDR(seglist+1)),
			       (void *) deactcode);
d250 12
d265 1
a265 2
		/* we can't have done a DupLock for currentdir */
		FreeVec((void *) BADDR(np->pr_SegList));
d322 1
d429 2
a430 2
	/* FIX! check for error */
	AddTask(&(np->pr_Task),(void *) (task ? activecode :
d432 4
a435 1
			       (void *) deactcode);
@


36.7
log
@Don't call rootnode, we may be a task
@
text
@d479 2
@


36.6
log
@major changes, to allow calling from tasks
@
text
@d149 2
a150 1
		np->pr_FileSystemTask = rootstruct()->rn_BootProc;/* evil, FIX! */
d436 2
a437 1
		np->pr_FileSystemTask = rootstruct()->rn_BootProc;/* evil, FIX! */
d468 13
@


36.5
log
@Fixed references to lowmem, etc for CNP from a non-cli
Made sure that CP and CT from task work right
Made NULL currentdir to CNP mean give NULL to child, not duplock it.
made CT and CP share more code (small overall savings, though, other than
ease of maintenance)
@
text
@d69 1
a69 1
	LONG myubase = (((LONG *) myproc->pr_GlobVec)[G_UTILITYBASE]);
d76 3
d80 10
d93 1
a93 1
		cli = makecli(myproc,tags);
d130 7
a136 6
	np->pr_ConsoleTask = (void *) GetTagData(NP_ConsoleTask,
					(LONG) myproc->pr_ConsoleTask,tags);
	np->pr_WindowPtr   = (void *) GetTagData(NP_WindowPtr,
					(LONG) myproc->pr_WindowPtr,tags);
	np->pr_FileSystemTask = myproc->pr_FileSystemTask;
	np->pr_CLI = TOBPTR(cli);
d138 12
a149 5
	/* should we copy the parents local vars? */
	if (GetTagData(NP_CopyVars,0,tags))
	{
		if (!copyvars(np,myproc))	/* fail on lack of mem */
			goto cleanup;
d152 2
d158 2
a159 1
				  (myproc->pr_CurrentDir ? 
d162 1
d165 4
a168 1
				copydir(myproc->pr_HomeDir);
d173 3
d177 6
a182 1
	np->pr_CIS = tag ? tag->ti_Data : findstream("NIL:",MODE_OLDFILE);
d193 6
a198 1
	np->pr_COS = tag ? tag->ti_Data : findstream("NIL:",MODE_NEWFILE);
d233 4
a236 2
			endstream(np->pr_CIS);		/* NULL is ok */
			endstream(np->pr_COS);
d245 8
d283 1
a283 1
makecli (struct Process *myproc, struct TagItem *tags)
a284 1
	LONG myubase = (((LONG *) myproc->pr_GlobVec)[G_UTILITYBASE]);
d289 1
a289 1
	/* Careful!  Old process may not be CLI! */
d328 2
a329 1
	if (tag)
d340 1
d378 1
d427 1
a427 1
	/* inherited fields - leave NULL if parent was task (FIX?) */
d433 3
d470 2
a471 2
void __regargs
CleanupProc (struct Process *p)
d477 1
d482 1
d484 1
a484 1

d486 1
d491 1
d493 1
a493 1

d495 1
d499 1
d502 1
a502 1
	/* Filehandles */
d504 1
d506 1
d508 1
d510 1
d513 1
d515 1
d520 1
d522 1
a522 1

d525 1
d527 1
a527 1

d530 1
d532 3
@


36.4
log
@added comment
@
text
@a17 1
#ifdef LATTICE
d21 2
a22 1
#include "proto/exec.h"
a28 1
#endif
a29 3
/* sizeof, but returns longs */
#define longsize(x)	((sizeof(x)+3) >> 2)

d51 2
d132 1
d135 3
a137 1
				  copydir(myproc->pr_CurrentDir);
d155 1
a170 1
	/* FIX!!!??? */
d225 1
a225 1
		freevec((void *) BADDR(np->pr_SegList));
d239 5
a243 3
	cli = AllocVecType(sizeof(*mycli) + NAMEMAX*4 + PROMPTMAX*4 +
		           SETMAX*4 + FILEMAX*4,
			   MEMF_PUBLIC|MEMF_CLEAR);
d249 5
a253 1
	optr = (UBYTE *) BADDR(mycli->cli_Prompt);
d264 4
a267 1
		optr = (UBYTE *) BADDR(mycli->cli_CommandName);
d285 4
a288 1
		optr = (UBYTE *) BADDR(mycli->cli_SetName);
d300 2
a301 1
		cli->cli_CommandDir = copylist(mycli->cli_CommandDir);
d305 9
a313 2
	cli->cli_FailLevel      = mycli->cli_FailLevel;
	cli->cli_Interactive = mycli->cli_Interactive;	/* not really true */
d331 1
a331 1
			freevec(p);
d335 1
a335 1
		freevec(cli);
d342 2
d345 3
a347 2
createproc (REG(d1) char *name, REG(d2) LONG pri, REG(d3) BPTR seg,
	    REG(d0) LONG stacksize)
d357 1
a357 1
	np = MakeProc(&stack,name,strlen(name));
d362 9
a370 2
	if (!AddSegArray(np,myproc,seg,NULL))
		goto cleanup;
d374 7
a380 4
	/* inherited fields */
	np->pr_ConsoleTask    = myproc->pr_ConsoleTask;
	np->pr_WindowPtr      = myproc->pr_WindowPtr;
	np->pr_FileSystemTask = myproc->pr_FileSystemTask;
d383 2
a384 1
	AddTask(&(np->pr_Task),(void *) ((LONG *) BADDR(seg+1)),
d390 1
a390 1
	freevec((void *) BADDR(np->pr_SegList));
d396 6
a401 1
/* MUST be callable from a task! */
d407 1
a407 3
	struct Process *np,*myproc = MYPROC;
	LONG stack = stacksize * 4;		/* longwords */
	UBYTE *name = (void *) BADDR(bname);	/* cptr to BSTR */
d409 1
a409 29
	/* This call allocates process & stack, and sets up the appropriate */
	/* fields, and copies the name into the process.		    */
	/* inits most set fields in the process, sets up stack ptrs, pushes */
	/* the stacksize onto the stack, sets pr_ReturnAddr.		    */

	np = MakeProc(&stack,name+1,*name);
	if (!np)
		goto cleanup;

	np->pr_SegList = segarray;
	np->pr_Task.tc_Node.ln_Pri = pri;

	/* inherited fields */
	np->pr_ConsoleTask    = myproc->pr_ConsoleTask;
	np->pr_WindowPtr      = myproc->pr_WindowPtr;
	np->pr_FileSystemTask = myproc->pr_FileSystemTask;

	np->pr_GlobVec = BADDR(gvec);

	/* FIX! check for error */
	AddTask(&(np->pr_Task),(void *) activecode,(void *) deactcode);

	return &(np->pr_MsgPort);

cleanup:
	freevec((void *) BADDR(np->pr_SegList));
	FreeEntry((struct MemList *) np->pr_Task.tc_MemEntry.lh_Head);

	return NULL;
d428 1
a428 1
	freevec((char *) segarray);
d452 1
a452 1
		freevec(p->pr_Arguments);
d460 1
a460 1
		freevec(((char *) p->pr_GlobVec) - NEGATIVE_GLOBAL_SIZE*4);
@


36.3
log
@Fix cli_Background to BCPL ocnventions
@
text
@d369 1
a369 1
	UBYTE *name = (void *) BADDR(bname);
@


36.2
log
@*** empty log message ***
@
text
@d293 1
a293 1
	cli->cli_Background  = TRUE;			/* well, it is */
@


36.1
log
@initial ci
@
text
@d8 3
a10 3
#include "libraries/dos.h"
#include "libraries/dosextens.h"
#include "libraries/dostags.h"
@
