head     36.14;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.14
date     90.12.16.04.09.07;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.09.11.21.53.14;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.08.02.19.00.45;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.05.09.02.13.04;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.07.04.03.19;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.04.07.00.17.25;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.04.06.12.07.59;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.06.11.57.24;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.03.04.45.19;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.19.19.03.37;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.17.23.57.51;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.03.03.02.18.36;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.16.22.21.25;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     90.02.02.17.36.26;  author jesup;  state Exp;
branches ;
next     ;


desc
@A patch to the patternmatch code to deal with non-filesystems
@


36.14
log
@exec_old_pragmas.h
@
text
@/* env.c */

#include <exec/types.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include "dos/dos.h"
#include "dos/dosextens.h"
#include "dos/dosasl.h"
#include <string.h>

#include "libhdr.h"

#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>
#include "klib_protos.h"
#include "blib_protos.h"

#define SAME 0

LONG ASM FunkyMatchFirst (REG(d1) UBYTE *pat,
			  REG(d2) struct AnchorPath *anchor);

/* strange returns - must be the same as IoErr() */

LONG ASM
FunkyMatchFirst (REG(d1) UBYTE *pat, REG(d2) struct AnchorPath *anchor)
{
	/* if it's * or it has a : and is not a filesystem */
	setresult2(0);
	if (mystricmp(pat,"*") == SAME ||
	    mystricmp(pat,"CONSOLE:") == SAME ||
	    mystricmp(pat,"NIL:") == SAME ||
	    (strchr(pat,':') && !isfilesystem(pat)))
	{
		LONG res;

		/* either res = 0 ("*", new handler) or it equals	    */
		/* unknown action (old handler), or there was a real error. */
		/* the first two are ok, the third should be returned as an */
		/* error.						    */
		res = getresult2();
		if (res && res != ERROR_ACTION_NOT_KNOWN)
			return res;

		/* need to allocate an AChain, fill in some stuff
		   and make it so MatchNext will return no_more_entries */

		anchor->ap_Base    = 
		anchor->ap_Current = AllocVecPubClear(sizeof(struct AChain));
		if (!(anchor->ap_Current))
			return ERROR_NO_FREE_STORE;  /* ioerr will be set */

		/* an_child is null, which is needed for MatchEnd */
		anchor->ap_Current->an_Lock = copydir(currentdir(FALSE,NULL));

		/* says that MatchNext should return NO_MORE_ENTRIES */
		/* also that this is the top-level node.	     */
		anchor->ap_Current->an_Flags = DDF_Completed | DDF_Single;

		strcpy(anchor->ap_Info.fib_FileName,pat);
		anchor->ap_Info.fib_DirEntryType =
		anchor->ap_Info.fib_EntryType	 = -1;	/* file */

		setresult2(FALSE);
		return FALSE;
	}

	return FindFirst(pat,anchor);
}
@


36.13
log
@changed stricmp to mystricmp
@
text
@d14 1
a14 1
#include <pragmas/exec_pragmas.h>
@


36.12
log
@Special-case CONSOLE:, and NIL:
@
text
@d30 3
a32 3
	if (strcmp(pat,"*") == SAME ||
	    stricmp(pat,"CONSOLE:") == SAME ||
	    stricmp(pat,"NIL:") == SAME ||
@


36.11
log
@PubClear
@
text
@d30 4
a33 1
	if (strcmp(pat,"*") == SAME || (strchr(pat,':') && !isfilesystem(pat)))
@


36.10
log
@Fixed to make it work with things like non-existant volumes
@
text
@a19 3
LONG ASM FindFirst (REG(d1) UBYTE *pat,
		    REG(d2) struct AnchorPath *anchor);

d46 1
a46 2
		anchor->ap_Current = AllocVec(sizeof(struct AChain),
					      MEMF_CLEAR);
@


36.9
log
@return same code in ioerr
@
text
@d32 1
d35 10
@


36.8
log
@Oops, that was a silly change
@
text
@d26 2
d41 1
a41 1
			return ERROR_NO_FREE_STORE;
d53 2
@


36.7
log
@fix to make sure it failed with action not known, and not some other error
@
text
@d30 1
a30 2
	if (strcmp(pat,"*") == SAME || (strchr(pat,':') && !isfilesystem(pat) &&
					IoErr() == ERROR_ACTION_NOT_KNOWN))
@


36.6
log
@for rcs 4.x header change
@
text
@d30 2
a31 1
	if (strcmp(pat,"*") == SAME || (strchr(pat,':') && !isfilesystem(pat)))
@


36.5
log
@FIxed FIB to indicate type File (broke copy before, thought it was dir)
@
text
@@


36.4
log
@Changes for the fixed isfilesystem
@
text
@d49 2
@


36.3
log
@Fixes the problem with handlers that don't support ISFS
@
text
@a25 2
LONG __regargs isfs (UBYTE *pattern);

d30 1
a30 1
	if (strcmp(pat,"*") == SAME || (strchr(pat,':') && !isfs(pat)))
a52 32
}

LONG __regargs
isfs (UBYTE *pattern)
{
	LONG rc;
	char pat[32];	/* FIX! max handler name len + 1 */
	char *s;
	BPTR lock;

	rc = isfilesystem(pat);
	if (!rc && getresult2() == ERROR_ACTION_NOT_KNOWN)
	{
		/* doesn't understand 1.4 packets - Try Lock on root */
		s = strchr(pattern,':');
		if (s)
		{
			memcpy(pat,pattern,(s-pattern)+1);
			lock = locateobj(pat);
			if (!lock)
			{
				/* doesn't support locks - not an FS */
				return FALSE;
			}
			/* supports Lock() on root - assume an FS */
			freeobj(lock);
			return TRUE;
		}
		return FALSE;	/* not possible */
	}

	return rc;	/* isfilesystem succeeded */
@


36.2
log
@getvec->AllocVec, etc
@
text
@d26 2
d32 1
a32 1
	if (strcmp(pat,"*") == SAME || (strchr(pat,':') && !isfilesystem(pat)))
d55 32
@


36.1
log
@created
@
text
@d13 2
a14 2
#ifdef LATTICE
#include "proto/exec.h"
a16 1
#endif
d36 2
a37 2
		anchor->ap_Current = AllocVecType(sizeof(struct AChain),
						  MEMF_CLEAR);
@
