head     1.1;
branch   ;
access   ;
symbols  V36_3:1.1;
locks    ; strict;
comment  @@;


1.1
date     89.03.22.11.39.40;  author steveb;  state Exp;
branches ;
next     ;


desc
@general support routines
@



1.1
log
@Initial revision
@
text
@/*******************************************************************************
**              (C) Copyright  Tripos Research Group 1980                     **
**             University of Cambridge Computer Laboratory                    **
********************************************************************************

           ########  ##    ##            ########  ########  ########
           ########  ##    ##            ########  ########  ########
           ##        ##    ##               ##        ##        ##
           ######    ########   #######     ##        ##        ##
           ##        ##    ##               ##        ##        ##
           ##        ##    ##               ##        ##        ##
           ##        ##    ##            ########  ########  ########
           ##        ##    ##            ########  ########  ########

*******************************************************************************
**     Author : Mike Richardson                                May 1980      **
******************************************************************************/



SECTION "SUPPORT"
GET     "LIBHDR"
GET     "FH3HDR"
GET     "MANHDR"
GET     "IOHDR"
GET     "internal/EXECLIBHDR"


LET checklock ( lock ) = VALOF TEST lock=0 THEN
    $( UNLESS disktype=type.dos DO
       $( errcode := disktype=type.nodisk -> error.nodisk, 
					     error.notadosdisk
	  RESULTIS FALSE
       $)
       RESULTIS rootkey
    $)
    ELSE
    $(
       LET volnode = lock!lock.volnode
       LET ptr = lock.queue 
       UNTIL ( ptr = 0 ) | ( ptr = lock ) DO ptr := ! ptr

       // Give different error if lock valid but wrong volume
       IF ptr=0 THEN
       $( errcode := volnode!dev.type=dt.volume -> error.device.not.mounted,
						   error.invalidlock
          RESULTIS FALSE
       $)

       RESULTIS lock ! lock.key
    $)

LET getlock ( key, access ) = VALOF
$(
   LET ptr = lock.queue

   UNTIL ( ptr = 0 ) | ( ptr ! lock.key = key ) DO ptr := ! ptr

   TEST ( ptr \= 0 ) & [ ( ptr ! lock.access = exclusive.lock ) |
                         (            access = exclusive.lock ) ]
   THEN
     $( errcode  := error.objectinuse
        RESULTIS FALSE
     $)
   ELSE
     $(
        // assume that the getvec will work for something this small

        lock.queue := setvec ( getvec ( lock.upb ), lock.upb, lock.queue,
                               key, access, taskid(), current.volume  )
        RESULTIS lock.queue
     $)
$)

LET freelock ( lock ) =
    ( lock = 0 ) -> TRUE,
    VALOF
    $(
      LET ptr = @@lock.queue
      LET volnode = lock!lock.volnode

       UNTIL ( !ptr = 0 ) | ( !ptr = lock ) DO ptr := !ptr

       // Possibly volume not mounted
       IF !ptr=0 & volnode!dev.type=dt.volume THEN
       $( ptr := volnode + dev.locklist
          UNTIL !ptr = 0 | !ptr=lock DO ptr := !ptr
       $)

       IF !ptr = 0 THEN
       $( errcode  := error.invalidlock
          RESULTIS FALSE
       $)

       TEST ptr=volnode + dev.locklist & !lock=0 THEN
          forget.volume(volnode)
       ELSE
          !ptr := !lock

       freevec( lock )
       RESULTIS TRUE
    $)

LET type ( buf ) = buf ! b.file.type  \= t.short -> buf ! b.file.type,
                   buf ! b.file.stype >  0       -> st.userdir, st.file

LET setvec ( v, upb, a, b, c, d, e, f, g, h, i, j, k, l ) = VALOF
$(
   copyvec( @@a, v, upb)

   RESULTIS v
$)


LET hash ( name ) = VALOF
$(
   LET res = name % 0

   FOR i = 1 TO res DO res := ( res * 13 + capitalch ( name % i ) ) & #X7FF

   RESULTIS  res REM b.size.hashtab + b.dir.hashtab
$)


LET isdir ( buf ) = VALOF $( errcode := error.objectwrongtype

                             RESULTIS ( buf ! b.file.type  = t.short ) &
                                      ( buf ! b.file.stype > 0       )
                          $)


LET append ( LVq, object ) BE
$(
   UNTIL ! LVq = 0 DO LVq := ! LVq

   ! LVq    := object
   ! object := 0
$)


LET workfail ( pkt ) BE workdone ( pkt, FALSE )

LET workdone ( pkt, res ) BE
$(
   returnpkt ( pkt, res, errcode  )
   resumeco  ( kill.co, stackbase )
$)

LET cokill () BE deleteco ( cowait () ) REPEAT

LET forget.volume(vol) BE unless vol=0 do 
$( let a = ?
   exec( e.forbid )
   a := rootstruct()!rtn.info+info.devicelist
   UNTIL !a=vol do a := !a
   !a := !vol
   exec( e.permit )
   freevec(vol!dev.name)
   freevec(vol)
$)
@
