head     1.1;
branch   ;
access   ;
symbols  V36_3:1.1;
locks    ; strict;
comment  @@;


1.1
date     89.03.22.11.40.46;  author steveb;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@	INCLUDE	"libhdr.i"

        TTL  ** Support for AmigaDOS file system **
*
LIBWORD    EQU  23456
SECWORD    EQU  12345
Z          EQUR A0
G	   EQUR A2
L	   EQUR A3
R          EQUR A6
UG         EQU  150
G_CSUM     EQU  (UG+22)*4
G_XFER     EQU  (UG+32)*4
G_BITMAP   EQU  (UG+39)*4
G_MASKV    EQU  (UG+56)*4
G_ENTRY    EQU  (UG+57)*4
G_STATE    EQU  (UG+58)*4
G_GETST    EQU  (UG+68)*4
G_KEYLWB   EQU  (UG+81)*4
SysBase    EQU	4
*
	INCLUDE  "exec/types.i"
	INCLUDE  "exec/libraries.i"
*
FUNCDEF	  MACRO
LVO_\1	  EQU	FUNC_CNT
FUNC_CNT  SET   FUNC_CNT-6
	  ENDM
*
CALLS	  MACRO
	  MOVEA.L SysBase,A6
	  JSR	  LVO_\1(A6)
	  ENDM
*
FUNC_CNT  SET   LIB_NONSTD
*
	INCLUDE  "exec/exec_lib.i"
*
* Module length count
*
DIS     DC.L (DISE-DIS)/4
*
*******************************************
* Xfer( source, dest, bytes, quick )      *
*         D1     D2    D3     D4          *
*******************************************
* This routine calls EXEC's memory copy   *
* routine which will do the copy the in   *
* the fastest way possible.               *
* Source/Dest are Byte pointers.          *
*******************************************
*
XFER
	MOVEM.L A1/A6,-(SP)	; Save regs to be corrupted
	MOVE.L	D1,A0		; source in A0
	MOVE.L  D2,A1		; dest in A1
	MOVE.L  D3,D0		; upb in D0
	TST.L   D4              ; Quick copy
	BEQ.S   XF1             ; Nope!
	CALLS   CopyMemQuick    ; CopyMemQuick( src, dest, n )
	BRA.S	XF2		; restore regs and home
XF1	CALLS   CopyMem		; CopyMem( source, dest, size )
XF2	MOVEM.L (SP)+,A1/A6     ; restore stack & R
	SUBA.L  A0,A0		; restore A0
	JMP	(A6)		; and home!
*
*******************************************
* CHECKSUM(v,upb)			  *
*******************************************
*
        CNOP    0,4          	; ensure aligned
*
CSUM    MOVEA.L D1,A3		; Vector address into A3
	ADDA.L  A3,A3
	ADDA.L	A3,A3		; Now mc address
        CLR.L   D1		; Zero result
CS1     ADD.L   (A3)+,D1	; Add the values
        DBRA    D2,CS1
        JMP     (R)
*
*******************************************
*  GetState( key )                        *
*******************************************
*
* sets globals STATE ENTRY and MASKV.
* It returns TRUE if allocated (bit unset) and FALSE else.
*
        CNOP    0,4
*
GSTATE  SUB.L   G_KEYLWB(G),D1
	MOVE.L  D1,D2
	LSR.L   #3,D1		Offset of byte holding bit
	ANDI.B  #$FC,D1		Make MC ptr to long word
	ANDI.B  #$1F,D2		Bit offset in long word
	MOVE.L  G_BITMAP(G),D3	BCPL ptr to bitmap
	LSL.L	#2,D3		MC ptr
	MOVEA.L	D3,L		To address reg
	MOVE.L	0(L,D1.L),D3	Fetch state
	MOVE.L	D3,G_STATE(G)	To STATE global
	LSR.L	#2,D1		Make BCPL offset
	MOVE.L	D1,G_ENTRY(G)	To ENTRY global
	MOVEQ	#0,D1
	BSET	D2,D1		Make MASKV
	MOVE.L	D1,G_MASKV(G)	To MASKV global
	AND.L	D3,D1
	BNE.S	GS1		NE -> Not allocated
	MOVEQ	#1,D1		TRUE, allocated
	JMP	(R)
GS1	MOVEQ	#0,D1		FALSE, allocated
	JMP	(R)
*
        CNOP    0,4          ensure aligned
*
        DC.L 0
        DC.L G_CSUM/4,(CSUM-DIS)
        DC.L G_XFER/4,(XFER-DIS)
        DC.L G_GETST/4,(GSTATE-DIS)
        DC.L 100
DISE    END
@
