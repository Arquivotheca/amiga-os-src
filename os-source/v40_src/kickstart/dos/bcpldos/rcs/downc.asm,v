head     1.3;
branch   ;
access   ;
symbols  V36_3:1.3;
locks    ; strict;
comment  @@;


1.3
date     89.04.18.09.17.24;  author steveb;  state Exp;
branches ;
next     1.2;

1.2
date     89.04.10.17.14.57;  author steveb;  state Exp;
branches ;
next     1.1;

1.1
date     89.03.22.11.40.28;  author steveb;  state Exp;
branches ;
next     ;


desc
@some downcoded routine
@


1.3
log
@*** empty log message ***
@
text
@	INCLUDE	"exec/types.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"libraries/dos.i"
	INCLUDE "libraries/dosextens.i"

	INCLUDE	"libhdr.i"


FUNCDEF     MACRO   * function
_LVO\1	    EQU	    FUNC_CNT
FUNC_CNT    SET     FUNC_CNT-6
            ENDM

FUNC_CNT    SET     LIB_NONSTD

	INCLUDE	"exec/exec_lib.i"
	INCLUDE	"libraries/dos_lib.i"

mods	dc.l	(mode-mods)/4

*LET CtoB(v1,v2) = valof
*$(  let l = 0
*    while l<254 do
*    $( if 0%(v1+l)=0 break
*       l := l+1
*    $)
*    for i=l to 1 by -1 DO
*       v2%i := 0%(v1+i-1)
*    v2%0 := l
*    resultis v2
*$)

CtoB	moveq	#0,d0		Zero counter
	movea.l	d1,a3		Copy of source
1$	tst.b	(a3)+		See if null at end
	beq.s	2$		J if so	
	addq.b	#1,d0		Bump counter
	bne.s	1$		J unless overflow

2$	subq.l	#1,a3		Avoid final null
	move.l	d2,d1		return second arg
	asl.l	#2,d2		To mc ptr
	movea.l	d2,a4		destination ptr
	move.w	d0,d2		save length
	lea.l   1(a4,d0.w),a4	adjust to end
	bra.s	4$
3$	move.b	-(a3),-(a4)	copy bytes
4$	dbra	d0,3$
	move.b	d2,-(a4)	insert length
	jmp	(a6)


*// Convert BCPL string v (Bptr) to C string in place.
*LET BtoC(v) BE
*$( let len=v%0
*   for i=1 to len do v%(i-1) := v%i
*   v%len := 0
*$)

BtoC	lsl.l	#2,d1		Make mc ptr
	movea.l	d1,a3		Into addr reg
	moveq	#0,d0		Clear counter
	move.b	(a3)+,d0	Get length
	bra.s	2$
1$	move.b	(a3)+,-2(a3)	Replace in place
2$	dbra	d0,1$
	move.b	#0,-1(a3)	Insert zero byte
	jmp	(a6)

*LET clearvec( v, upb ) BE
*   FOR i=0 to upb DO v!i := 0
* This version limited to 32K

clearvec:
	tst.l	d2		We sometimes get called with...
	bmi.s	2$		...an upb of -1 !!
	lsl.l	#2,d1		Convert to mc ptr
	movea.l	d1,a3		Into addr reg
1$	clr.l	(a3)+		Clear area
	dbra	d2,1$		Loop until done
2$	jmp	(a6)

*LET copystring(source, dest) BE
*   FOR i=0 to source%0 DO dest%i := source%i

copystring:
	asl.l	#2,d1		source to mc ptr
	movea.l	d1,a3
	asl.l	#2,d2		dest to mc ptr
	movea.l	d2,a4
	moveq	#0,d0		zero counter
	move.b	(a3),d0		get length
1$	move.b	(a3)+,(a4)+	copy bytes
	dbra	d0,1$
	jmp	(a6)

*LET copyvec(source,dest,upb) BE
*   FOR i=0 to upb DO dest!i := source!i
copyvec:
	tst.l	d3		We sometimes get called with...
	bmi.s	2$		...an upb of -1 !!
	asl.l	#2,d1		Convert to mc ptr
	movea.l	d1,a3		Into addr reg
	asl.l	#2,d2		Convert to mc ptr
	movea.l	d2,a4		Into addr reg
1$	move.l	(a3)+,(a4)+	Copy vector
	dbra	d3,1$
2$	jmp	(a6)

*AND unpackstring(s,v) BE 
*   FOR i = s%0 TO 0 BY -1 DO v!i := s%i
unpackstring:
	asl.l	#2,d1		source to mc ptr
	movea.l	d1,a3
	asl.l	#2,d2		dest to mc ptr
	movea.l	d2,a4
	moveq	#0,d0		zero counter
	moveq	#0,d1		zero transfer reg
	move.b	(a3),d0		get length
1$	move.b	(a3)+,d1	copy byte out to tfr reg
	move.l	d1,(a4)+	copy long into vector
	dbra	d0,1$
	jmp	(a6)
	

*AND packstring(v,s) = VALOF
*$( LET n = v!0 & #XFF
*   FOR i = 0 TO n DO s%i := v!i
*   RESULTIS n >> 2
*$)
packstring:
	asl.l	#2,d1		source to mc ptr
	movea.l	d1,a3
	asl.l	#2,d2		dest to mc ptr
	movea.l	d2,a4
	moveq	#0,d0		zero counter
	move.b	3(a3),d0	get length from lsb of !v
	move.l	d0,d1		setup result
	lsr.l	#2,d1
1$	move.l	(a3)+,d2	get word into tfr reg
	move.b	d2,(a4)+	copy byte into dest
	dbra	d0,1$
	jmp	(a6)
	
	cnop	0,4
	dc.l	0		End of global list
	dc.l	G_CTOB/4,(CtoB-mods)
	dc.l	G_BTOC/4,(BtoC-mods)
	dc.l	G_CLEARVEC/4,(clearvec-mods)
	dc.l	G_COPYSTRING/4,(copystring-mods)
	dc.l	G_COPYVEC/4,(copyvec-mods)
	dc.l	G_UNPACKSTRING/4,(unpackstring-mods)
	dc.l	G_PACKSTRING/4,(packstring-mods)
;	dc.l	G_LOADSEG/4,(LSInternal-mods)
	dc.l	150

mode	end
@


1.2
log
@added LoadSeg here but took it out again for this release
@
text
@d16 1
a16 1
	INCLUDE	"exec_lib.i"
@


1.1
log
@Initial revision
@
text
@d1 5
d8 11
a144 1

d154 1
@
