head     36.11;
branch   ;
access   ;
symbols  V37_1:36.11 V36_5:36.11 V36_4:27.6 V36_3:27.6 V36_2:27.5 V36_1:27.4 L32_10:27.1 L31_9:27.1 L31_8:27.1 L1_7:27.1 L29_6:27.1 L28_3:27.1 L27_1:27.1 L26_2:26.1 L26_1:26.1;
locks    ; strict;
comment  @* @;


36.11
date     90.05.06.00.48.25;  author bryce;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.06.17.13.00;  author bryce;  state Exp;
branches ;
next     27.6;

27.6
date     89.05.12.19.54.48;  author bryce;  state Exp;
branches ;
next     27.5;

27.5
date     89.03.21.18.09.49;  author bryce;  state Exp;
branches ;
next     27.4;

27.4
date     89.03.11.22.36.59;  author bryce;  state Exp;
branches ;
next     27.3;

27.3
date     89.03.11.20.59.25;  author bryce;  state Exp;
branches ;
next     27.2;

27.2
date     86.07.21.13.42.56;  author neil;  state Exp;
branches ;
next     27.1;

27.1
date     85.06.24.13.25.41;  author neil;  state Exp;
branches ;
next     26.1;

26.1
date     85.06.17.12.08.21;  author neil;  state Exp;
branches ;
next     ;


desc
@@


36.11
log
@Nuke the STUPID $Header$ inflicted by the last RCS upgrade
@
text
@
*************************************************************************
*									*
* Copyright (C) 1985,1989, Commodore-Amiga Inc.  All rights reserved.   *
*									*
*************************************************************************


*************************************************************************
*
* resource.asm
*
* Source Control
* ------ -------
*
* $Id: /usr/chaos/bryce/src/misc/RCS/resource.asm,v 36.10 90/04/06 17:13:00 bryce Exp Locker: bryce $
*
* $Locker: bryce $
*
* $Log:	resource.asm,v $
* Revision 36.10  90/04/06  17:13:00  bryce
* Upgrade to RCS 4.0
* 
* Revision 27.6  89/05/12  19:54:48  bryce
* Standardize function names (AllocMiscResource,FreeMiscResource).
* Change a DISABLE to FORBID (with no loss of safety).  Remove Alert call
* on init (it's handled dynamically as an out of memory error on Open).
* 
* Revision 27.5  89/03/21  18:09:49  bryce
* Include miscprivate.i
*
* Revision 27.4  89/03/11  22:36:59  bryce
* Aw crum.  Last checkin was of wrong file.  Here is the correct resource.asm
*
* Revision 27.3  89/03/11  21:39:10  bryce
* Shrink 13.2%.  Upgrade to V36
* Documentation now matches reality & the V1.3 RKM
*
* Revision 27.3  89/03/11  20:59:25  bryce
* Upgrade documentation to match the RKM (and reality :-)
* Shrink 14% (36 bytes)
*
* Revision 27.2  86/07/21  13:42:56  neil
* autodoc update - bart
*
* Revision 27.1  85/06/24  13:25:41  neil
* Upgrade to V27
*
* Revision 26.1  85/06/17  12:08:21  neil
* *** empty log message ***
*
* Revision 1.1	85/06/17  11:57:14  neil
* Initial revision
*
* Revision 1.2	85/06/13  04:09:32  neil
* added alert call
*
* Revision 1.1	85/06/07  08:53:32  neil
* First revision
*
*
*************************************************************************

	SECTION section

; ****** Included Files ***********************************************

	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE 'exec/lists.i'
	INCLUDE 'exec/ports.i'
	INCLUDE 'exec/libraries.i'
	INCLUDE 'exec/initializers.i'
;	INCLUDE 'exec/execbase.i'
	INCLUDE 'exec/strings.i'
	INCLUDE 'exec/ables.i'
	INCLUDE 'exec/alerts.i'

	INCLUDE 'miscprivate.i'
	INCLUDE 'misc.i'
	INCLUDE 'messages.i'
	INCLUDE 'asmsupp.i'

; ****** Imported Globals *********************************************

	XREF	VERNUM
	XREF	REVNUM
	XREF	VERSTRING
	XREF	miscName
	XREF	subsysName

	TASK_ABLES

; ****** Imported Functions *******************************************

	EXTERN_LIB	MakeLibrary
	EXTERN_LIB	AddResource
	EXTERN_LIB	Alert

; ****** Exported Functions *******************************************

	XDEF		MiscInit
	XDEF		AllocMiscResource
	XDEF		FreeMiscResource

; ****** Local Definitions **********************************************

*
* macro to deal with debugging messages
*
INFOLEVEL	EQU	0

*		;------ outsiders equivalent of callsys

CALLSYS 	MACRO
		CALLLIB _LVO\1
		ENDM

* ***** Internal/Resources/MiscInit ********************************
*
*   NAME
*	MiscInit - initialize the misc resource
*
*   SYNOPSIS
*	MiscInit()
*
*
*   FUNCTION
*	This routine starts the misc resource up from scratch
*
*   INPUTS
*
*   RESULTS
*
*   EXCEPTIONS
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*

MiscInit:
		MOVE.L	A2,-(SP)

		;A6 = exec on ROMTag init
		;MOVE.L _AbsExecBase,A6 	;SysBase

		LEA.L	funcInit(pc),A0         ; function vector init
		LEA.L	structInit(pc),A1       ; data space initialization
		SUBA.L	A2,A2			; init function
		MOVEQ.L #mr_Sizeof,D0		; data size
		CALLSYS MakeLibrary
		TST.L	D0
		BEQ.S	Init_fail

		MOVE.L	D0,A1
		CALLSYS AddResource

*		;------ We have the resource.
		IFGE	INFOLEVEL-50
		MOVE.L	A1,-(SP)
		PUTMSG	30,<'%s/MiscInit: resource is at 0x%lx'>
		ADDQ.L	#4,SP
		ENDC

Init_fail:
		MOVE.L	(SP)+,A2
		RTS

*****		PUTMSG	10,<'%s/Init: cannot MakeLibrary'>
;;;;		ALERT	AN_MiscRsrc!AG_MakeLib
;;;;		BRA.S	Init_End


structInit:
*		;------ Initialize the device
		INITBYTE	LN_TYPE,NT_RESOURCE
		INITLONG	LN_NAME,miscName
		INITBYTE	LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
		INITWORD	LIB_VERSION,VERNUM
		INITWORD	LIB_REVISION,REVNUM
		DC.W		0

******* misc.resource/AllocMiscResource *************************************
*
*    NAME
*	AllocMiscResource - allocate one of the miscelaneous resources
*
*   SYNOPSIS
*	CurrentUser = AllocMiscResource( unitNum, name )
*	D0				 D0	  A1
*
*	char * AllocMiscResource(ULONG,char *);
*
*   FUNCTION
*	This routine attempts to allocate one of the miscellaneous resources
*	If the resource had already been allocated, an error is returned. If
*	you do get it, your name is associated with the resource (so a user
*	can see who has it allocated).
*
*	This function may not be called from interrupt code
*
*   DESCRIPTION
*	There are certain parts of the hardware that a multitasking- friendly
*	program may need to take over.	The serial port is a good example. By
*	grabbing the misc.resource for the serial port, the caller would
*	"own" the hardware registers associated with that function.  Nobody
*	else, including the system serial driver, is allowed to interfere.
*
*	Resources are called in exactly the same manner as libraries.
*	From assembly language, A6 must equal the resource base.  The
*	offsets for the function are listed in the resources/misc.i
*	include file (MR_ALLOCMISCRESOURCE for this function).
*
*   INPUTS
*	unitNum - the number of the resource you want to allocate
*		  (eg.  MR_SERIALBITS).
*	name - a mnenonic name that will help the user figure out
*		what piece of software is hogging a resource.
*		(havoc breaks out if a name of null is passed in...)
*
*   RESULTS
*	CurrentUser - if the resource is busy, then the name of
*		the current user is returned.  If the resource is
*		free, then null is returned.
*
*   BUGS
*
*   SEE ALSO
*	resources/misc.i, FreeMiscResource()
*************************************************************************
*
*   IMPLEMENTATION NOTES
*
*

AllocMiscResource:
		MOVE.L	4,A0		;_AbsExecBase,A0
		EXG.L	A0,A6

		LSL.W	#2,D0
		MOVE.W	D0,D1

		FORBID
		MOVE.L	mr_AllocArray(A0,D1.W),D0   ;index defaults to word.
		BNE.S	AMR_Enable
		MOVE.L	A1,mr_AllocArray(A0,D1.W)
AMR_Enable:
		PERMIT		    ;registers preserved
		EXG.L	A0,A6
		RTS

******* misc.resource/FreeMiscResource **************************************
*
*   NAME
*	FreeMiscResource - make a resource available for reallocation
*
*   SYNOPSIS
*	FreeMiscResource( unitNum )
*			  D0
*
*	void FreeMiscResource(ULONG);
*
*   FUNCTION
*	This routine frees one of the resources allocated
*	by AllocMiscResource.  The resource is made available
*	for reuse.
*
*	FreeMiscResource must be called from the same task that
*	called AllocMiscResource.  This function may not be called from
*	interrupt code.
*
*    INPUTS
*	unitNum - the number of the miscellaneous resource to be freed.
*
*    RESULTS
*	Frees the appropriate resource.
*
*    BUGS
*
*    SEE ALSO
*	resources/misc.i, AllocMiscResource()
*
*****************************************************************************

FreeMiscResource:
		LSL.W	#2,D0
		CLR.L	mr_AllocArray(A6,D0.W)  ;index defaults to word
		RTS

funcInit:
		DC.W	-1
		DC.W	AllocMiscResource-funcInit
		DC.W	FreeMiscResource-funcInit
		DC.W	-1

		END
@


36.10
log
@Upgrade to RCS 4.0
@
text
@d16 1
a16 1
* $Header: /usr/chaos/bryce/src/misc/RCS/resource.asm,v 27.6 89/05/12 19:54:48 bryce Exp Locker: bryce $
d21 3
@


27.6
log
@Standardize function names (AllocMiscResource,FreeMiscResource).
Change a DISABLE to FORBID (with no loss of safety).  Remove Alert call
on init (it's handled dynamically as an out of memory error on Open).
@
text
@d16 1
a16 1
* $Header: resource.asm,v 27.5 89/03/21 18:09:49 bryce Exp $
d20 6
a25 1
* $Log: resource.asm,v $
@


27.5
log
@Include miscprivate.i
@
text
@d4 1
a4 1
* Copyright (C) 1985,1989, Commodore-Amiga Inc.  All rights reserved.	*
a14 2
* 
* $Header: resource.asm,v 27.4 89/03/11 22:36:59 bryce Exp $
d16 2
d20 4
a23 1
* $Log:	resource.asm,v $
d26 1
a26 1
* 
d30 1
a30 1
* 
d34 1
a34 1
* 
d37 1
a37 1
* 
d40 1
a40 1
* 
d43 2
a44 2
* 
* Revision 1.1  85/06/17  11:57:14  neil
d46 2
a47 2
* 
* Revision 1.2  85/06/13  04:09:32  neil
d49 2
a50 2
* 
* Revision 1.1  85/06/07  08:53:32  neil
d52 2
a53 2
* 
* 
d60 10
a69 10
	INCLUDE	'exec/types.i'
	INCLUDE	'exec/nodes.i'
	INCLUDE	'exec/lists.i'
	INCLUDE	'exec/ports.i'
	INCLUDE	'exec/libraries.i'
	INCLUDE	'exec/initializers.i'
;	INCLUDE	'exec/execbase.i'
	INCLUDE	'exec/strings.i'
	INCLUDE	'exec/ables.i'
	INCLUDE	'exec/alerts.i'
d71 4
a74 4
	INCLUDE	'miscprivate.i'
	INCLUDE	'misc.i'
	INCLUDE	'messages.i'
	INCLUDE	'asmsupp.i'
d84 1
a84 1
	INT_ABLES
d107 2
a108 2
CALLSYS		MACRO
		CALLLIB	_LVO\1
d114 1
a114 1
*       MiscInit - initialize the misc resource
d117 1
a117 1
*       MiscInit()
d143 1
a143 1
		;MOVE.L	_AbsExecBase,A6		;SysBase
d145 2
a146 2
		LEA.L	funcInit(pc),A0		; function vector init
		LEA.L	structInit(pc),A1	; data space initialization
d148 2
a149 2
		MOVEQ.L	#mr_Sizeof,D0		; data size
		CALLSYS	MakeLibrary
d151 1
a151 1
		BNE.S	Init_ok
a152 5
*****		PUTMSG	10,<'%s/Init: cannot MakeLibrary'>
		ALERT	AN_MiscRsrc!AG_MakeLib
		BRA.S	Init_End

Init_ok:
d154 1
a154 1
		CALLSYS	AddResource
d163 1
a163 1
Init_End:
d167 5
d181 1
a181 1
******* misc.resource/MR_ALLOCMISCRESOURCE ************************************
d184 1
a184 1
*       MR_ALLOCMISCRESOURCE - allocate one of the miscelaneous resources
a185 1
*
d187 2
a188 2
*	CurrentUser = MR_ALLOCMISCRESOURCE( unitNum, name ), misc.resource
*	D0	                            D0       A1      A6
d190 1
a190 3
*	STRPTR CurrentUser;
*	LONG unitNum;
*	STRPTR name;
d193 4
a196 4
*	This routine allocates one of the miscellaneous resources.
*	If the resource is currently allocated, an error is returned.
*	If you do get it, your name is associated with the resource
*	(so a user can see who has it allocated).
d198 1
a198 1
*	This routine may not be called from an interrupt routine
d201 5
a205 6
*	There are certain parts of the hardware that a multitasking-
*	friendly program may need to take over.  The serial port
*	is a good example.  By grabbing the misc.resource for the
*	serial port, the caller would "own" the hardware registers
*	associated with that function.  Nobody else, including the
*	system serial driver is allowed to interfere.
d207 4
a210 3
*	The misc.resource must be accessed using assembly language.  The set
*	of currently defined units and the function offsets from the resource 
*	base are listed in the resources/misc.i include file.
d227 1
a227 2
*	resources/misc.i
*	misc.resource/MR_FREEMISCRESOURCE 
d236 1
d238 2
a239 2
		LSL.L	#2,D0
		MOVE.L	D0,D1
d241 2
a242 2
		DISABLE A0
		MOVE.L	mr_AllocArray(A6,D1),D0
d244 1
a244 1
		MOVE.L	A1,mr_AllocArray(A6,D1)
d246 2
a247 2
		ENABLE	A0

d250 1
a250 1
******* misc.resource/MR_FREEMISCRESOURCE ************************************
d253 1
a253 1
*	MR_FREEMISCRESOURCE - make a resource available for reallocation
d256 2
a257 3
*       MR_FREEMISCRESOURCE( unitNum ), misc.resource
*                             D0         A6
*	LONG unitNum;
d259 2
d263 1
a263 1
*	by MR_ALLOCMISCRESOURCE.  The resource is made available
d266 3
a268 3
*	MR_FREEMISCRESOURCE should be called from the same task that
*	called MR_GETMISCRESOURCE.  This routine may not be called from
*	an interrupt routine.
d279 1
a279 1
*	misc.resource/MR_ALLOCMISCRESOURCE
d284 2
a285 2
		LSL.L	#2,D0
		CLR.L	mr_AllocArray(A6,D0)
@


27.4
log
@Aw crum.  Last checkin was of wrong file.  Here is the correct resource.asm
@
text
@d16 1
a16 1
* $Header: resource.asm,v 27.3 89/03/11 21:39:10 bryce Exp $
d18 1
a18 1
* $Locker:  $
d21 3
d68 1
@


27.3
log
@Upgrade documentation to match the RKM (and reality :-)
Shrink 14% (36 bytes)
@
text
@d16 1
a16 1
* $Header: resource.asm,v 27.2 86/07/21 13:42:56 neil Exp $
d18 1
a18 1
* $Locker: bryce $
d21 8
d285 2
a286 2
		DC.L	AllocMiscResource-funcInit
		DC.L	FreeMiscResource-funcInit
@


27.2
log
@autodoc update - bart
@
text
@d4 1
a4 1
*    Copyright (C) 1985, Commodore Amiga Inc.  All rights reserved.	*
d16 1
a16 1
* $Header: resource.asm,v 27.1 85/06/24 13:25:41 neil Exp $
d18 1
a18 1
* $Locker: neil $
d21 3
d44 1
a44 1
* ****** Included Files ***********************************************
a49 1
	INCLUDE	'exec/interrupts.i'
a50 1
	INCLUDE	'exec/tasks.i'
d52 1
a52 1
	INCLUDE	'exec/execbase.i'
d61 1
a61 1
* ****** Imported Globals *********************************************
a62 2
	XREF	_AbsExecBase

d71 1
a71 1
* ****** Imported Functions *******************************************
d77 1
a77 1
* ****** Exported Functions *******************************************
d83 1
a83 1
* ****** Local Definitions **********************************************
d88 1
a88 1
INFOLEVEL	EQU	10
a90 3
LINKSYS		MACRO
		LINKLIB	_LVO\1,_AbsExecBase
		ENDM
d96 1
a96 1
*------ Resources/Misc/MiscInit ********************************
d125 1
a125 1
		MOVEM.L	A2/A6,-(SP)
d127 2
a128 1
		MOVE.L	_AbsExecBase,A6
d130 2
a131 2
		LEA	funcInit,A0		; function vector init
		LEA	structInit,A1		; data space initialization
d133 1
a133 2
		MOVE.L	#mr_Sizeof,D0		; data size

a134 1

d139 2
a140 2
		ALERT	AN_MiscRsrc!AG_MakeLib,,A0
		BRA	Init_End
d143 2
a144 1
		MOVE.L	D0,A2
d148 1
a148 1
		MOVE.L	A2,-(SP)
a152 8
		MOVE.L	A2,A1
		CALLSYS	AddResource
		
		IFGE	INFOLEVEL-40
		LEA	VERSTRING,A0
		JSR	KPutFmt
		ENDC

d154 1
a154 1
		MOVEM.L	(SP)+,A2/A6
d164 1
a164 1
		DC.L		0
d166 1
a166 1
******* misc.resource/GetMiscResource ******************************************
d169 1
a169 1
*       GetMiscResource - allocate one of the misc resources
a170 3
*    SYNOPSIS
*       CurrentUser = GetMiscResource( unitNum, name )
*       D0	                       D0       A1
d172 4
d180 1
a180 1
*    FUNCTION
d188 13
a200 1
*    INPUTS
d202 1
d207 1
a207 1
*    RESULTS
d212 1
a212 1
*    BUGS
d214 4
a217 2
*    SEE ALSO
*	misc.resource/FreeMiscResource 
a218 2
********************************************************************************
*
d224 1
a224 1
		MOVE.L	_AbsExecBase,A0
a229 1

a231 1

a232 2


d238 1
a238 1
******* misc.resource/FreeMiscResource *****************************************
d240 2
a241 2
*    NAME
*	FreeMiscResource - make a resource available for reallocation
d243 3
a245 3
*    SYNOPSIS
*	FreeMiscResource( unitNum )
*			  D0
d248 1
a248 1
*    FUNCTION
d250 1
a250 1
*	by AllocMiscResource.  The resource is made available
d253 3
a255 1
*	This routine may not be called from an interrupt routine.
d266 1
a266 1
*	misc.resource/GetMiscResource 
d268 2
a269 6
********************************************************************************
*
*   IMPLEMENTATION NOTES
*
*

d272 1
a272 1
		MOVE.L	#0,mr_AllocArray(A6,D0)
a274 1

d276 4
a279 3
		DC.L	AllocMiscResource
		DC.L	FreeMiscResource
		DC.L	-1
@


27.1
log
@Upgrade to V27
@
text
@d16 1
a16 1
* $Header: resource.asm,v 26.1 85/06/17 12:08:21 neil Exp $
d18 1
a18 1
* $Locker:  $
d21 3
d41 1
a41 1
******* Included Files ***********************************************
d60 1
a60 1
******* Imported Globals *********************************************
d72 1
a72 1
******* Imported Functions *******************************************
d78 1
a78 1
******* Exported Functions *******************************************
d84 1
a84 1
***** Local Definitions **********************************************
d178 1
a178 1
******* Resources/Misc/GetMiscResource ****************************
d180 1
a180 1
*   NAME
d183 3
a185 3
*   SYNOPSIS
*       CurrentUser = GetMiscResource( unitNum, name ), DRResource
*       D0	                      D0       A1      A6
d187 5
a191 1
*   FUNCTION
d199 1
a199 1
*   INPUTS
d205 1
a205 1
*   RESULTS
d210 1
a210 1
*   EXCEPTIONS
d212 2
a213 1
*   SEE ALSO
d215 1
a215 1
*   BUGS
a216 2
**********************************************************************
*
a237 1

d240 1
a240 1
******* Resources/Misc/FreeMiscResource ***************************
d242 2
a243 2
*   NAME
*       FreeMiscResource - make a resource available for reallocation
d245 4
a248 3
*   SYNOPSIS
*       FreeMiscResource( unitNum ), DRResource
*		         D0         A6
d250 1
a250 1
*   FUNCTION
d255 1
a255 1
*	This routine may not be called from an interrupt routine
d257 1
a257 1
*   INPUTS
d260 2
a261 1
*   RESULTS
d263 1
a263 1
*   EXCEPTIONS
d265 2
a266 1
*   SEE ALSO
d268 1
a268 3
*   BUGS
*
**********************************************************************
@


26.1
log
@*** empty log message ***
@
text
@d16 1
a16 1
* $Header: resource.asm,v 1.1 85/06/17 11:57:14 neil Exp $
d21 3
@
