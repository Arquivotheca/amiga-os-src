BADDR	shell.c	/^((LONG *)BADDR(process->pr_SegList))[0],$/
CXBRK	shell.c	/^int CXBRK()$/
CtoBstr	newshell.c	/^VOID CtoBstr(string)$/
D_S	cd.c	/^#define D_S(name, type) char a_##name[sizeof(type)/
Err	shell.c	/^LONG Err(gv,m,si, so)$/
TOBPTR	newshell.c	/^#define TOBPTR(x)	(((LONG) (x)) >> 2)$/
cmd_ask	ask.c	/^int cmd_ask(void)$/
cmd_cd	cd.c	/^int cmd_cd(void)$/
cmd_echo	echo.c	/^int cmd_echo(void)$/
cmd_else	else.c	/^int cmd_else(void)$/
cmd_endcli	endcli.c	/^int cmd_endcli(void)$/
cmd_endif	endif.c	/^int cmd_endif(void)$/
cmd_failat	failat.c	/^long cmd_failat(void)$/
cmd_fault	fault.c	/^int cmd_fault(void)$/
cmd_getenv	get.c	/^int cmd_getenv(void)$/
cmd_if	if.c	/^int cmd_if(void)$/
cmd_newshell	newshell.c	/^int cmd_newshell(VOID)$/
cmd_path	path.c	/^int cmd_path(void)$/
cmd_prompt	prompt.c	/^int cmd_prompt(void)$/
cmd_quit	quit.c	/^int cmd_quit(void)$/
cmd_resident	resident.c	/^int cmd_resident(void)$/
cmd_run	run.c	/^int cmd_run(void)$/
cmd_setenv	set.c	/^int cmd_setenv(void)$/
cmd_skip	skip.c	/^int cmd_skip(void)$/
cmd_stack	stack.c	/^int cmd_stack(void)$/
cmd_why	why.c	/^int cmd_why(void)$/
do_end	endcli.c	/^void do_end(DOSBase)$/
expand	variable.c	/^int expand(gv,to,mc)$/
findLoad	shell.c	/^BPTR findLoad(gv,commandname, segment, parm_pkt,st/
for	shell.c	/^   for(i=0, point= &gv->run_module; i < 3; i++ ) {/
getargs	shell.c	/^struct RDargs *getargs(db,ub,template,opts,size)$/
getchar	shell.c	/^int getchar(gv,lastch)$/
if	shell.c	/^   if(parm_pkt == (struct DosPacket *) 1 ) {$/
load	shell.c	/^BPTR load(gv,file, ldir, segment, qflag)$/
openf	shell.c	/^BPTR openf(gv,name,act)$/
pipecheck	shell.c	/^int pipecheck(gv,status,type)$/
prbuf	shell.c	/^static void __regargs prbuf(char c)$/
readitem	shell.c	/^int readitem(gv,string)$/
run	shell.c	/^LONG run(gv,module,pipe_expand)$/
searchsegs	shell.c	/^struct Segment *searchsegs(DOSBase,name,startseg)$/
startup	shell.c	/^void __asm startup( register __a0 struct DosPacket/
testflags	shell.c	/^ULONG testflags(flag)$/
testpure	resident.c	/^int testpure(DOSBase,file,force)$/
testscript	shell.c	/^int testscript (gv,file,qflag)$/
ticks	shell.c	/^LONG ticks(gv,string,mc)$/
ungetchar	shell.c	/^int ungetchar(gv)$/
useseg	shell.c	/^struct Segment *useseg(DOSBase,name)$/
vsprintf	shell.c	/^int vsprintf(char *buf, char *ctl, long args[])$/
while	shell.c	/^   while(thiseg) {$/
writef	set.c	/^void __stdargs writef( DOSBase, fmt, args )$/
