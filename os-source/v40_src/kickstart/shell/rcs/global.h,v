head     1.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.15
date     93.02.15.22.53.31;  author jesup;  state Exp;
branches ;
next     1.14;

1.14
date     91.04.06.18.38.18;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.02.13.20.59.42;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.25.22.28.20;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.12.19.25.37;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.05.19.56.43;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.12.12.22.54.35;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.23.17.42.50;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.06.09.20.19.47;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.07.00.12.41;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.19.17.19.25;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.02.21.11.08;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.01.31.20.25.46;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.15.07.49.44;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.51.29;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.07.05.23.24;  author andy;  state Exp;
branches ;
next     ;


desc
@global variables for shell
@


1.15
log
@removed oldredirect
@
text
@/* global include file for the shell */



#include <pragmas/exec_old_pragmas.h>

#include <pragmas/console_pragmas.h>
#include <pragmas/dos_pragmas.h>
#include <pragmas/intuition_pragmas.h>
#include <pragmas/utility_pragmas.h>
#include <pragmas/wb_pragmas.h>

#include <dos/dos.h>
#include <dos/dosextens.h>

#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/utility_protos.h>
#include <clib/intuition_protos.h>

#include "shell_protos.h"

#define BUFFER(fh)	((UBYTE *) BADDR((fh)->fh_Buf))
#define TOBUFFER(buf)	(TO_BPTR(buf))

#define TO_BPTR(x)	(((LONG) (x)) >> 2)

/* sizeof, but returns longs */
#define longsize(x)	((sizeof(x)+3) >> 2)


/* resident command messages: */
#define STR_CANT_SET            -141
#define STR_TOO_MANY_MATCHES    -142
#define STR_NOT_EXECUTE         -143
#define STR_MISSING_ELSE        -144
#define STR_NEWSHELL_FAILED     -145
#define STR_CURRENT_STACK       -146
#define STR_STACK_LARGE         -147
#define STR_STACK_SMALL         -148
#define STR_PROCESS_ENDING      -149
#define STR_LAST_MSG_FAILED     -150
#define STR_NO_RETURN_CODE      -151
#define STR_CURRENT_DIR         -152
#define STR_BAD_RETURN_CODE     -153
#define STR_FAIL_LIMIT          -154
#define STR_FAULT               -155
#define STR_TH_SYSTEM           -156
#define STR_TH_INTERNAL         -157
#define STR_TH_DISABLED         -158
#define STR_NAME                -159
#define STR_TH_USE_COUNT        -160

extern LONG AbsExecBase;

/* #define bufferflush_char 0 */
#define DOS_TRUE (-1)
#define END_STREAM_CH (-1L)

/* these defines moved into dosextens.h */
#define CMD_BUILTIN CMD_INTERNAL
/*
#define CMD_DISABLED (-999L)
*/

#define MAXCOMMAND 511
#define MAXALIAS 255

#define NAMEMAX (104-1)
#define PROMPTMAX (60-1)
#define SETMAX (80-1)
#define FILEMAX (40-1)

struct Global {
   struct DosLibrary *DOSBase;
   struct Library *UtilityBase;
   struct FileInfoBlock ExInfo;
   UBYTE cbuffer[MAXCOMMAND+1];
   UBYTE alias[256];
   UBYTE buffer[MAXCOMMAND+1]; /* temporary storage buffer */
   long cpos;
   long count;
   short echo;
   short fill;
   struct CommandLineInterface *Clip; /* pointer to CLI */
   BPTR run_module; /* these modules can't take new redirection */
   BPTR set_module;
   BPTR pipe_module;
#ifdef OLD_REDIRECT
   BOOL old_red;	/* flag to indicate old style redirection */
#endif
   LONG Res2;
};

/* for use when DOS doesn't send me one */
struct CGlobal {
   struct CommandLineInterface Clip;
   UBYTE prompt[PROMPTMAX+1];
   UBYTE commandname[NAMEMAX+1];
   UBYTE commandfile[FILEMAX+1];
   UBYTE setname[SETMAX+1];
};

#if 0
extern int link_setenv();
extern int link_endif();
extern int link_endcli();
extern int link_echo();
extern int link_resident();
extern int link_cd();
extern int link_prompt();

extern int link_getenv();
extern int link_ask();
extern int link_else();
extern int link_failat();
extern int link_fault();
extern int link_if();
extern int link_path();
extern int link_quit();
extern int link_skip();
extern int link_why();
extern int link_stack();
extern int link_which();
extern int link_newshell();
extern int link_run();
#endif
@


1.14
log
@moved definition
@
text
@d89 1
d91 1
@


1.13
log
@removed a suddenly duplicated definition
@
text
@d5 1
a5 1
#include <pragmas/exec_s_pragmas.h>
@


1.12
log
@registered parameter switch to save space
@
text
@d60 3
a62 1
#define CMD_BUILTIN (-2L)
d64 1
a64 1

@


1.11
log
@new string definitions added
@
text
@a3 1
#include <pragmas/exec_pragmas.h>
d5 2
a8 1

d12 1
d16 7
d100 1
d123 1
a123 9

extern struct Segment *searchsegs();
extern void writef();
extern BPTR openf();
extern void getr2();
extern struct Process *ProcessID();
extern struct Segment *searchsegs();
extern void message();

@


1.10
log
@minor cleanup
@
text
@d22 23
@


1.9
log
@added pipe_module special case global variable to avoid
future redirection problems.
@
text
@d32 1
d34 1
d43 1
d98 1
@


1.8
log
@added run_module and pipe_module entries to gv
@
text
@a4 1
/* #include "exec_pragmas.old" */
a11 1
/* #include <pragmas/dos_private_pragmas.h> */
d50 2
a51 1
   BPTR run_module;
d53 2
@


1.7
log
@increased buffer size to handle longer command lines
@
text
@d13 1
a13 1
#include <pragmas/dos_private_pragmas.h>
d52 2
d94 1
@


1.6
log
@
@
text
@d34 2
d44 1
a44 1
   UBYTE cbuffer[512];
d46 1
a46 1
   UBYTE buffer[256]; /* temporary storage buffer */
@


1.5
log
@new Global structure
@
text
@d3 4
d9 1
a9 1
#include <pragmas/exec_pragmas.h>
d14 2
d44 1
a49 1
   UBYTE buffer[SETMAX+1]; /* temporary storage buffer */
@


1.4
log
@Added defined for internal DISABLED commands
@
text
@d28 4
a31 4
#define NAMEMAX 39
#define PROMPTMAX 79
#define SETMAX 79
#define FILEMAX 39
d39 10
a52 3
   UBYTE buffer[SETMAX+1];
   struct CommandLineInterface Clip;
   int echo;
a83 2

#define VSTRING "(36.1)"
@


1.3
log
@changed size of global structure to include alias pointer
@
text
@d25 2
a26 1
#define CMD_BUILTIN (9999)
d68 2
@


1.2
log
@expanded gv to include a line buffer
@
text
@d36 1
@


1.1
log
@variables changed, gv changed, now includes needed pragmas
@
text
@a10 1

a15 3
extern LONG AbsExecBase;


d19 1
d21 3
a23 4
#define namemax 26
#define promptmax 15
#define setmax 20
#define filemax 10
d25 1
a25 1
#define bufferflush_char 0
d27 4
a30 4
#define prot_script 64
#define prot_execute 2
#define info_protect 29
#define info_upb 56
a31 4

#define DOS_TRUE (-1)
#define END_STREAM_CH (-1L)

d35 7
a41 4
   UBYTE prompt[80];
   UBYTE commandname[40];
   UBYTE commandfile[40];
   UBYTE setname[80];
d43 1
d54 13
d74 1
@


1.0
log
@added to rcs
@
text
@d3 9
a47 1
   struct macro *macrohead;
d50 7
a56 1
/*	variable storage format */
d58 6
a63 6
struct macro {
    struct macro   *m_next;	/* Next variable */
    UBYTE          *m_name;	/* Called ... */
    UBYTE          *m_val;	/* Its value */
    UBYTE          m_flag;	/* Infinite loop check */
};
a64 1
extern int link_setenv();
@
