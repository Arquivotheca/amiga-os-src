head     1.27;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.27
date     92.06.24.16.26.24;  author jesup;  state Exp;
branches ;
next     1.26;

1.26
date     92.05.08.23.47.39;  author jesup;  state Exp;
branches ;
next     1.25;

1.25
date     91.04.23.20.38.11;  author andy;  state Exp;
branches ;
next     1.24;

1.24
date     91.04.23.20.34.00;  author andy;  state Exp;
branches ;
next     1.23;

1.23
date     91.04.23.17.59.12;  author andy;  state Exp;
branches ;
next     1.22;

1.22
date     91.04.23.16.15.22;  author andy;  state Exp;
branches ;
next     1.21;

1.21
date     91.04.10.19.47.54;  author andy;  state Exp;
branches ;
next     1.20;

1.20
date     91.04.06.18.35.08;  author andy;  state Exp;
branches ;
next     1.19;

1.19
date     91.03.19.15.59.10;  author andy;  state Exp;
branches ;
next     1.18;

1.18
date     91.01.25.22.39.44;  author andy;  state Exp;
branches ;
next     1.17;

1.17
date     91.01.25.22.18.12;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     91.01.10.20.35.21;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     90.12.17.21.57.49;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     90.11.16.16.29.43;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     90.09.20.17.47.04;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     90.09.13.19.19.02;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.06.18.21.59.30;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.06.16.01.58.50;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.06.13.18.30.20;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.06.11.14.44.51;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.05.31.18.23.52;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.05.04.22.15.25;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.04.07.00.11.43;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.19.05.34.41;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.04.23.16.37;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.04.03.22.03;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.03.09.51;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.03.02.20.55.31;  author andy;  state Exp;
branches ;
next     ;


desc
@first pass at c version of newshell command
@


1.27
log
@Don't force it to use a FROM, let CliInitNewcli do the default
@
text
@;/*
lc -O -M -d -j73 -onewshell.o -iV:include -iV:inc.lattice -v -csf newshell
blink newshell.o to newshell.ld LIB LIB:amiga.lib lib:debug.lib sc sd nd
protect newshell.ld +p
quit
*/

/*
 * 		NewShell command		*
 *						*
 *						*/

#include <exec/types.h>
#include <exec/io.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/dostags.h>

#include <clib/macros.h>

#include <string.h>

#include "libhdr.h"
#include "cli_init.h"

#include "internal/commands.h"
#include "global.h"
#include "fault.h"

#define TOBPTR(x)	(((LONG) (x)) >> 2)

/*
#define BUFFER(fh)	((UBYTE *) BADDR((fh)->fh_Buf))
#define TOBUFFER(buf)	(TOBPTR(buf))
*/

#define SMALL 1

#define TEMPLATE    "WINDOW,FROM"
#define OPT_WINDOW  0
#define OPT_FROM    1
#define OPT_COUNT   2

int OptToBstr (LONG *entry,UBYTE *buffer,LONG size);

int cmd_newshell(VOID)
{
        struct DosLibrary *DOSBase;
	long opts[OPT_COUNT];
        struct RDargs *rdargs;
	int rc=RETURN_ERROR,res2=NULL;
	struct Process   *task;
	struct Process   *tid;
	struct Segment *cliseg;
	struct DosPacket *pkt;
	struct DosPacket *backpkt;
	// These must end up BSTR's, so max 256
	UBYTE window[256]="CON:0/0//130/AmigaShell/CLOSE";
	UBYTE command[256];

	struct TagItem tags[] = {
	    { NP_Seglist,(LONG) NULL},
	    { NP_FreeSeglist, (LONG) FALSE },
	    { NP_StackSize, 1600},
	    { NP_Cli, TRUE },
	    { NP_HomeDir, NULL},
	    { NP_CloseInput, FALSE},
	    { NP_CloseOutput, FALSE},
	    { NP_CurrentDir, NULL},
	    { NP_Input, NULL},
	    { NP_Output, NULL},
	    { NP_CopyVars , TRUE},
	    { NP_Name,(LONG) "Shell Process" },
	    TAG_DONE,};

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL) {
         PrintFault(IoErr(), NULL);
      }
	else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
	tid = THISPROC;
	if (tid->pr_StackSize > 1600)tags[2].ti_Data = tid->pr_StackSize;
	if(!(cliseg = FindSegment("SHELL",0,TRUE)))goto err;
	tags[0].ti_Data = cliseg->seg_Seg;

	if (!OptToBstr(&(opts[OPT_WINDOW]),window,sizeof(window)))
	{
		PrintFault(ERROR_LINE_TOO_LONG,(char *)opts[OPT_WINDOW]);
		goto err;
	}
	// If no FROM file specified, leave it NULL.  CliInitNewcli will
	// then try to use S:Shell-startup.
	if (opts[OPT_FROM] &&
	    !OptToBstr(&(opts[OPT_FROM]),command,sizeof(command)))
	{
		PrintFault(ERROR_LINE_TOO_LONG,(char *)opts[OPT_FROM]);
		goto err;
	}

        task=CreateNewProc(tags);
	if (!task)PrintFault(STR_CANT_CREATE_PROC,"Newshell");
	else {
	    pkt=(struct DosPacket *)AllocDosObject(DOS_STDPKT, NULL);
            if (pkt) {
	    	pkt->dp_Type = 1; /* bcpl_newcli_init; */
	    	pkt->dp_Res1 = TRUE;
	    	pkt->dp_Res2 = 0;
	    	pkt->dp_Arg3 = 0; /* copy from process */
	    	pkt->dp_Arg1 = DupLock(tid->pr_CurrentDir);
	    	pkt->dp_Arg2 = TOBPTR(opts);
	    	pkt->dp_Arg4 = TOBPTR(Cli());
	    	pkt->dp_Arg5 = (LONG)GetFileSysTask();
	    	SendPkt(pkt,&(task->pr_MsgPort),&(tid->pr_MsgPort));
  	    	backpkt=WaitPkt();
		/* if the parameter packet failed, and the shell */
		/* didn't start up, we need to unlock the currentdir */
		if(!(backpkt->dp_Res1)) {
		    res2=backpkt->dp_Res2;
		    PrintFault(res2,"NewShell");
		    UnLock(pkt->dp_Arg1);
		}
		else rc=RETURN_OK;
	    	FreeDosObject(DOS_STDPKT,pkt);
	    }
	}
      }
err:	if (rdargs)FreeArgs(rdargs);
	if(rc) {
	    PrintFault(STR_NEWSHELL_FAILED,NULL);
	    if(res2)SetIoErr(res2);
	}
	CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else {OPENFAIL;}
#endif
   return rc;
}

VOID CtoBstr(string)
UBYTE *string;
{
LONG len = strlen(string);
long i;

for(i=len; i>0; i--)string[i]=string[i-1];
string[0]=len;
}

int
OptToBstr (LONG *entry,UBYTE *buffer,LONG size)
{
	LONG len;

	if (*entry) {
		len = strlen((char *)*entry);
		if (len >= size)
			return 0;

		memcpy(buffer+1,(char *)*entry,len);
		*buffer = len;
	} else
		CtoBstr(buffer); /* in place BtoC */

	*entry = TOBPTR(buffer);
	return 1;
}

@


1.26
log
@Made it open max-wide windows like CLI
factored out a routine
Use STR_xxx instead of random numbers!
Handle 256 character filename for FROM (best we can do - BSTR)
@
text
@d61 1
a61 1
	UBYTE command[256]="S:Shell-Startup";
d99 4
a102 1
	if (!OptToBstr(&(opts[OPT_FROM]),command,sizeof(command)))
d127 1
a127 1
		    PrintFault(res2,"Newshell");
@


1.25
log
@*** empty log message ***
@
text
@d30 1
d46 2
d59 3
a61 2
	UBYTE window[256]="CON:0/0/640/100/AmigaShell/CLOSE";
	UBYTE command[128]="S:Shell-Startup";
d94 4
a97 5

	if (opts[OPT_WINDOW]) {
	     memset(window, 0, 256);
	     memcpy(window,(char *)opts[OPT_WINDOW],
		MIN(strlen((char *)opts[OPT_WINDOW]),NAMEMAX-1));
d99 4
a102 7
	CtoBstr(window); /* in place BtoC */
	opts[OPT_WINDOW] = TOBPTR(window);
	
	if (opts[OPT_FROM]) {
	     memset(command, 0, 128);
	     memcpy(command,(char *)opts[OPT_FROM],
		MIN(strlen((char *)opts[OPT_FROM]),127));
d104 1
a104 2
	CtoBstr(command);
	opts[OPT_FROM] = TOBPTR(command);
d106 1
a106 1
	if (!task)PrintFault(-130,"Newshell");
a144 1

d148 1
a148 1
long len = MIN(strlen(string),NAMEMAX);
d153 19
@


1.24
log
@return to SendPkt to match dos and shell change
@
text
@d55 1
a55 1
	struct DosPacket *backpkt=NULL;
@


1.23
log
@matched new return codes; this prevents memory loss
if newshell fails.  Shell needed to begin unlocking
the lock on early exit rather than newshell, as
otherwise we could get into a unlock twice situation,
as we have a limit on out of band error returns.
@
text
@d121 8
a128 3
	    	rc = (backpkt->dp_Res1 > 0) ? 0 : 20;
	    	res2=backpkt->dp_Res2;
            	if(rc)PrintFault(res2,"Newshell");
@


1.22
log
@return packet change required to match new shell/dos
packet failure codes
@
text
@d38 1
a38 1
/* #define SMALL 1 */
d50 1
a50 1
	int rc=RETURN_ERROR;
d55 1
a55 1
	struct DosPacket *backpkt;
a105 1

d107 19
a125 3
	if (!task) {
		PrintFault(-130,"Newshell");
		goto err;
d127 5
a131 13
	pkt=(struct DosPacket *)AllocDosObject(DOS_STDPKT, NULL);
        if (pkt) {
	    pkt->dp_Type = 1; /* bcpl_newcli_init; */
	    pkt->dp_Res1 = TRUE;
	    pkt->dp_Res2 = 0;
	    pkt->dp_Arg3 = 0; /* copy from process */
	    pkt->dp_Arg1 = DupLock(tid->pr_CurrentDir);
	    pkt->dp_Arg2 = TOBPTR(opts);
	    pkt->dp_Arg4 = TOBPTR(Cli());
	    pkt->dp_Arg5 = (LONG)GetFileSysTask();
	    SendPkt(pkt,&(task->pr_MsgPort),&(tid->pr_MsgPort));
  	    backpkt=WaitPkt();
	    rc = (backpkt->dp_Res1 > 0) ? 0 : 20;
a132 10
	if (rc) {
	    if(tid->pr_CurrentDir)UnLock(pkt->dp_Arg1);
	    SetIoErr(backpkt->dp_Res2);
	    PrintFault(IoErr(),"Newshell"); /* could not open window */
	}
       if(pkt)FreeDosObject(DOS_STDPKT,pkt);
      }
err:;
	if (rdargs)FreeArgs(rdargs);
	if(rc)PrintFault(STR_NEWSHELL_FAILED,NULL);
@


1.21
log
@uses the new universal getargs routine to save space
@
text
@d1 7
d38 1
a38 1
#define SMALL 1
d124 1
a124 2
	    rc = (backpkt->dp_Res1 ? 0 : 20);

a126 1
	    PrintFault(206,"Newshell"); /* could not open window */
d128 2
@


1.20
log
@fixed freeing of current directory if newshell fails
@
text
@d31 2
a40 3
/*
        struct Library *SysBase = (*((struct Library **) 4));
*/
d67 1
a67 1
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a70 1

a72 1
	 goto err;
d74 4
d125 1
d127 1
a127 1
	if (rdargs) FreeArgs(rdargs);
@


1.19
log
@frees CurrentDir if operation fails
@
text
@d117 1
a117 1
            FreeDosObject(DOS_STDPKT,pkt);
d121 1
a121 1
	    if(tid->pr_CurrentDir)UnLock(tid->pr_CurrentDir);
d123 1
@


1.18
log
@changed return code to match 1.3
@
text
@d121 1
@


1.17
log
@registered parameter switch to save space
@
text
@d44 1
a44 1
	int rc=RETURN_FAIL;
@


1.16
log
@moved strings into dos
@
text
@a20 1

a23 5
#include "clib/exec_protos.h"
#include "clib/dos_protos.h"
#include "pragmas/dos_pragmas.h"
#include "proto/intuition.h"

a30 2
extern VOID CtoBstr();

d39 1
d41 1
d135 1
a135 1
char *string;
d143 1
@


1.15
log
@uses PrintFault for its strings.
@
text
@a29 1

d130 1
a130 1
/* 	if (rc) VPrintf("NewShell failed\n",opts); */
@


1.14
log
@removed unneeded pragma
@
text
@d108 1
a108 1
		VPrintf("Unable to create new process\n",opts);
d127 1
a127 1
	    VPrintf("Unable to open new window\n",opts);
d131 1
a131 1
	if (rc) VPrintf("NewShell failed\n",opts);
@


1.13
log
@switched to length limited copy statements for window
and filename
@
text
@a27 1
#include "pragmas/dos_private_pragmas.h"
@


1.12
log
@put a limit on window name being put into packet
@
text
@d58 2
a59 4
	struct Window *win;
	UBYTE window[256];
	UBYTE command[128];
	BPTR lock;
d91 4
a94 3
	if (!opts[OPT_WINDOW]) {
		strcpy(window,"CON:0/0/640/100/AmigaShell/CLOSE");
		opts[OPT_WINDOW]=(long)window;
d96 2
a97 2
	CtoBstr( (char *) opts[OPT_WINDOW]); /* in place BtoC */
	opts[OPT_WINDOW] = TOBPTR(opts[OPT_WINDOW]);
d99 7
a105 3
	if (!opts[OPT_FROM]) strcpy(command,"S:Shell-Startup");
	else strcpy(command,(char *)opts[OPT_FROM]);
	opts[OPT_FROM]=(long)command;
a106 12
	win = tid->pr_WindowPtr; /* check if file exists */
	tid->pr_WindowPtr= (struct Window *) -1;

	 /* check for startup file */
    	lock =Lock( (char *)opts[OPT_FROM],SHARED_LOCK );
    	if (lock) {
	    UnLock(lock);
	    CtoBstr((char *) opts[OPT_FROM]);
	    opts[OPT_FROM] = TOBPTR(opts[OPT_FROM]);
	}
	else opts[OPT_FROM]=0;
    	tid->pr_WindowPtr= (struct Window *)win;
a124 2


d126 3
a128 1

a129 1
	if (rc)VPrintf("Unable to open new window\n",opts);
@


1.11
log
@does a duplock for currentdir
@
text
@d14 2
a115 1

a120 1

d134 2
d155 1
a155 1
long len = strlen(string);
@


1.10
log
@fixed memory leak.
@
text
@d66 1
d69 1
d127 1
a127 1
	    pkt->dp_Arg1 = 0;
@


1.9
log
@fixed memory leak
@
text
@a65 1
/*	    { NP_Path, 0}, */
d68 2
a123 1
/*	    pkt->dp_Arg3 = CopyPath(DOSBase,Cli()->cli_CommandDir); */
a124 1
/*	    pkt->dp_Arg1 = DupLock(tid->pr_CurrentDir); */
d139 1
a156 29

#if 0
/* copy a path list */

BPTR CopyPath(struct DosLibrary *db,BPTR p)
{
	struct DosLibrary *DOSBase=db;
        struct Library *SysBase = (*((struct Library **) 4));
        BPTR list = NULL;               /* fake terminating node */
        BPTR *liste = &list;            /* ptr to link of previous node */
        LONG *node;

        while (p = (BPTR) BADDR(p))
        {
                node = AllocVec(8,MEMF_PUBLIC|MEMF_CLEAR);
                if (node == NULL) break; /* out of memory */
                node[0] = NULL; /* BPTR to next node */
                node[1] = DupLock(((LONG *)p)[1]);
                *liste  = TOBPTR(node);
                liste   = node;
                p       = ((LONG *)p)[0];
        }

        return list;
} 


#endif

@


1.8
log
@removed doslibrary open test to save space
@
text
@d133 1
a133 1
            FreeDosObject(pkt,DOS_STDPKT);
@


1.7
log
@fixed hanging lock problem
@
text
@d73 2
a74 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d140 1
d142 2
a143 3
   else {
      OPENFAIL;
   }
@


1.6
log
@now uses the dos copypath function (indirectly)
rather than keeping its own.
@
text
@d58 1
a58 1
	UBYTE command[32];
d81 1
a81 1
	tid = (struct Process *) FindTask(0);
d94 5
a98 6
	if (!opts[OPT_FROM]) {
		strcpy(command,"S:Shell-Startup");
		opts[OPT_FROM]=(long)command;
	}
	/* check if file exists */
	win = tid->pr_WindowPtr;
a121 2
	    pkt->dp_Arg1 = DupLock(tid->pr_CurrentDir); 
	    pkt->dp_Arg2 = TOBPTR(opts);
d124 3
@


1.5
log
@*** empty log message ***
@
text
@d37 1
a37 1
extern void CtoBstr();
d44 1
a44 1
int cmd_newshell(void)
d66 1
a66 1
	    { NP_Path, FALSE },
a103 1
    	tid->pr_WindowPtr= (struct Window *)win;
d107 1
d110 2
a111 1
	opts[OPT_FROM] = TOBPTR(opts[OPT_FROM]);
d125 2
a126 1
	    pkt->dp_Arg3 = CopyPath(DOSBase,Cli()->cli_CommandDir);
d147 1
a147 1
void CtoBstr(string)
d157 1
a157 1

d182 2
@


1.4
log
@switched over to newcreateproc
@
text
@d47 1
d55 1
d64 1
a64 1
	    { NP_StackSize, 4000},
d82 1
a82 1
	if (tid->pr_StackSize > 4000)tags[2].ti_Data = tid->pr_StackSize;
d128 2
a129 2
  	    pkt=WaitPkt();
	    rc = (pkt->dp_Res1 ? 0 : 20);
d161 1
@


1.3
log
@removed CMDREV header
@
text
@a64 3
/*	    { NP_Input, NULL },
	    { NP_Output, NULL },
*/
@


1.2
log
@backed out changes, since they didn't help much
@
text
@d65 3
d72 1
a72 1
	    TAG_DONE,NULL};
a111 1

a112 1

a127 1

a129 1

@


1.1
log
@a couple more options added to createtask
in an attempt to prevent redirection problems
@
text
@a64 3
	    { NP_Input, NULL } ,
	    { NP_Output, NULL },
	    { NP_ConsoleTask , NULL },
@


1.0
log
@added to rcs
@
text
@d65 3
@
