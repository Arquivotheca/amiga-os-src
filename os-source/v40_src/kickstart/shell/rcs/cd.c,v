head     1.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.16
date     91.04.23.20.14.23;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.04.10.19.41.12;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.03.13.23.26.34;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.02.01.16.30.10;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.02.01.16.28.32;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.25.22.17.28;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.10.20.34.26;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.12.17.21.57.03;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.08.31.18.05.54;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.07.07.12.03.07;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.11.14.49.04;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.05.31.18.32.17;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.07.00.11.17;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.19.05.37.53;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.04.23.15.41;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.03.06.42;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.39.59;  author andy;  state Exp;
branches ;
next     ;


desc
@CD builtin command
@


1.16
log
@unneeded test for non-null lock before unlocking removed.
@
text
@;/*
lc -O -M -d -j73 -ocd.o -iV:include -iV:inc.lattice -v -csf cd
blink cd.o to cd.ld LIB LIB:amiga.lib lib:debug.lib sc sd nd
protect cd.ld +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker   Mike Witcher */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**     (C) Copyright 1989 Commodore-Amiga, Inc.
 **         All Rights Reserved
**/

/*----------------------------------------------------------------------*/
/* Command: CD                                                          */
/* Author:  Doug Walker                                                 */
/* Change History:                                                      */
/*  Date    Person        Action                                        */
/* -------  ------------- -----------------                             */
/* 19MAR89  John Toebes   Initial Creation                              */
/* 05APR89  Doug Walker   Filled in body                                */
/* 06NOV89  Doug Walker   Revved for dos.library 36.38                  */
/* 07JAN90  Doug Walker   Added support for wildcards                   */
/* 23MAY90  Doug Walker   Cleaned up wildcard problems                  */
/* Notes:                                                               */
/*----------------------------------------------------------------------*/

#include "internal/commands.h"
#include "global.h"

/* #include "cd_rev.h" */

#define TEMPLATE    "DIR"
#define OPT_DIR     0
#define OPT_COUNT   1

#define SMALL 1

/* Macro to get longword-aligned stack space for a structure */
/* Uses ANSI token catenation to form a name for the char array */
/* based on the variable name, then creates an appropriately    */
/* typed pointer to point to the first longword boundary in the */
/* char array allocated.                                        */
#define D_S(name, type) char a_##name[sizeof(type)+3]; \
                        type *name = (type *)((LONG)(a_##name+3) & ~3)
struct uAnchorPath
{
   struct AnchorPath ap;
   char name[255];
};

int cmd_cd(void)
{
   struct FileInfoBlock __aligned fib;
   struct uAnchorPath __aligned ap;
   struct DosLibrary *DOSBase;
   int rc, rc2;
   LONG opts[OPT_COUNT];
   char data[256];
   struct Process *process;
   BPTR lock;
   struct RDargs *rdargs;

   rc = RETURN_FAIL;
   rc2 = 0;
#ifndef SMALL
#if ram
   if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) {
#else
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
#endif
      memset((char *)opts, 0, sizeof(opts));
      if(!(rdargs = ReadArgs(TEMPLATE, opts, NULL))) {
         PrintFault(IoErr(), NULL);
      }
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
         rc = RETURN_OK;
         process = THISPROC;
         if(opts[OPT_DIR]) {
            /* First try for a direct match */
            if(lock=Lock((char *)opts[OPT_DIR], SHARED_LOCK)) {
               if(!Examine(lock, &fib) || fib.fib_DirEntryType < 0) {
                  rc= RETURN_FAIL;
                  if(!(rc2 = IoErr()))rc2=ERROR_OBJECT_WRONG_TYPE;
		  /* unlocking a null is ok */
                  UnLock(lock);
                  goto ERRORSPOT;
               }
               /* We now have a lock on the directory to which we want to CD */
               /* Fall through and call CurrentDir on it after this else     */
            }
	    else {
		rc2=IoErr();
		if((rc2 == ERROR_NO_DISK) || (rc2==ERROR_DEVICE_NOT_MOUNTED)) {
		    rc = RETURN_FAIL;
                    goto ERRORSPOT;
		}
		/* check if we want to do a wildcard match */
                else if (ParsePattern((char *)opts[OPT_DIR],data,255)> 0 ) {
                   memset(&ap, 0, sizeof(struct uAnchorPath));
                   ap.ap.ap_Flags = APF_DOWILD;
                   ap.ap.ap_Strlen = 255;
                   ap.ap.ap_BreakBits = SIGBREAKF_CTRL_C;

                   /* If they specified a wildcard, and it matches      */
                   /* exactly one DIRECTORY, assume that's our argument */
                   if(MatchFirst((char *)opts[OPT_DIR], &ap.ap)) {
                      /* No matches at all, forget it */
                      rc = RETURN_FAIL;
                      rc2 = ERROR_DIR_NOT_FOUND;
                      MatchEnd(&ap.ap);
                      goto ERRORSPOT;
		   }
               /*
                * OK, HERE'S THE PLAN:
                *
                * If the wildcard-matching stuff comes up with EXACTLY ONE directory
                * match, we will use that as our argument.  We have initialized
                * 'lock' to NULL.  We will obtain a lock on the first directory
                * match.  If we get another directory matching the specified wildcard
                * and 'lock' is not NULL, we have a conflict and we must fail.
                * If it is an error case, the extra lock will be freed after we
                * kick out of the loop.
                *
                *         --Doug
                */
               lock = NULL;
               do { /* while more matches */
                  if(ap.ap.ap_Info.fib_DirEntryType >= 0) { /* If it's a directory...*/
                     if(lock == NULL) { /* If we haven't hit a directory yet... */
                        BPTR tmplock;

                        /* We have matched a directory for the first time   */
                        /* CD to the directory the wildcard is relative to, */
                        /* try to lock the directory, and restore ourselves */
                        /* to the old current directory                     */

                        tmplock = CurrentDir(ap.ap.ap_Current->an_Lock);
                        lock = Lock(ap.ap.ap_Info.fib_FileName, SHARED_LOCK);
                        CurrentDir(tmplock);
                        if(lock == NULL)  { /* Failed to lock it - In use? */

                           rc = RETURN_FAIL;
                           rc2 = IoErr();
                        }
                     }
                     else {
                        /* Whoops - second directory match.  Give up.     */
                        /* Don't mess with 'lock' here - it will be freed */
                        /* in the error case below.                       */
			rc2= STR_TOO_MANY_MATCHES;
                        rc = RETURN_FAIL;
                     }
                  }
               }
               while(!rc && !MatchNext(&ap.ap));
               MatchEnd(&ap.ap);
	      	}
               if(rc || !lock)
               {
                  /* Some kind of failure.  If rc is not set, it's a simple  */
                  /* 'no such directory' error.  If lock is set, it's a case */
                  /* of too many matches, so free the lock.                  */

                  rc = RETURN_FAIL;
		  /* unlocking a null is ok */
                  UnLock(lock);
                  goto ERRORSPOT;
               }
            }

            if( (lock = CurrentDir(lock)) != NULL)   /* Assignment! */
               UnLock(lock);
         }

         /* Now we need to get the full name of the current directory */
         if(!NameFromLock(process->pr_CurrentDir, data, 255))
         {
            if((rc2=IoErr()) == ERROR_LINE_TOO_LONG)
            {
               /* No matter, we can only use 63 characters anyway */
               rc2 = 0;
            }
            else
            {
               rc = RETURN_ERROR;
               goto ERRORSPOT;
            }
         }

         if(opts[OPT_DIR])
         {
            if(!SetCurrentDirName(data))
            {
               /* We may have failed due to line too long    */
               /* If so, these return codes will get cleaned */
               /* up since that is really not an error       */
               rc2 = IoErr();
               rc = RETURN_FAIL;
            }
         }
         else
         {
            opts[0] = (LONG)data;
	    VPrintf("%s\n",opts);
         }
ERRORSPOT:
         FreeArgs(rdargs);
         if(rc && rc2) {
            PrintFault(rc2, NULL);
            /* Not really an error if dir name is too long */
            if(rc2 == ERROR_LINE_TOO_LONG)rc = rc2 = 0;
         }
         SetIoErr(rc2);
      }

      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else
   {
      OPENFAIL;
   }
#endif
   return(rc);
}
@


1.15
log
@uses the new universal getargs routine to save space
@
text
@d96 2
a97 1
                  if(lock) UnLock(lock);
d177 2
a178 1
                  if(lock) UnLock(lock);
@


1.14
log
@test return of ParsePattern correctly
@
text
@d45 2
d74 1
d85 3
@


1.13
log
@switched to dir_not_found
@
text
@d1 4
a4 4
/*
lc -O -M -d -j73 -o/obj/CD.o -i/include -v -csf CD
blink /obj/CD.o to /bin/CD sc sd nd
protect /bin/CD +p
d7 1
a7 1
 
a59 5
/*
   struct Library *SysBase = (*((struct Library **) 4)); 
   D_S(fib, struct FileInfoBlock);
   D_S(ap, struct uAnchorPath);
*/
d72 3
a74 1
/*   if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) { */
d76 1
d78 1
a78 2
      if(!(rdargs = ReadArgs(TEMPLATE, opts, NULL)))
      {
d81 1
a81 2
      else
      {
a83 1

d103 1
a103 1
                else if (ParsePattern((char *)opts[OPT_DIR],data,255)) {
a130 1

d133 2
a134 4
                  if(ap.ap.ap_Info.fib_DirEntryType >= 0) /* If it's a directory...*/
                  {
                     if(lock == NULL)  /* If we haven't hit a directory yet... */
                     {
d145 1
a146 2
                        if(lock == NULL)  /* Failed to lock it - In use? */
                        {
d151 1
a151 2
                     else
                     {
d162 1
a162 1
	      }
@


1.12
log
@error message when directory not found corrected.
@
text
@d119 1
a119 1
                      rc2 = ERROR_OBJECT_NOT_FOUND;
@


1.11
log
@registered parameter switch to save space
@
text
@d119 1
a119 1
                      rc2 = IoErr();
@


1.10
log
@moved strings into dos
@
text
@d60 1
d64 3
d92 1
a92 1
               if(!Examine(lock, fib) || fib->fib_DirEntryType < 0) {
d109 4
a112 4
                   memset(ap, 0, sizeof(struct uAnchorPath));
                   ap->ap.ap_Flags = APF_DOWILD;
                   ap->ap.ap_Strlen = 255;
                   ap->ap.ap_BreakBits = SIGBREAKF_CTRL_C;
d116 1
a116 1
                   if(MatchFirst((char *)opts[OPT_DIR], &ap->ap)) {
d120 1
a120 1
                      MatchEnd(&ap->ap);
d139 1
a139 1
                  if(ap->ap.ap_Info.fib_DirEntryType >= 0) /* If it's a directory...*/
d150 2
a151 2
                        tmplock = CurrentDir(ap->ap.ap_Current->an_Lock);
                        lock = Lock(ap->ap.ap_Info.fib_FileName, SHARED_LOCK);
d170 2
a171 2
               while(!rc && !MatchNext(&ap->ap));
               MatchEnd(&ap->ap);
@


1.9
log
@uses PrintFault for its strings.
@
text
@d37 2
a40 6
/*
#define MSG_CANTFIND    "Can't find %s\n"
#define MSG_NOTDIR      "%s is not a directory\n"
#define MSG_TOOMANY     "More than one directory matches '%s'\n"
*/

a90 1
			/* msg = MSG_NOTDIR; */
a115 1
/*                      msg = MSG_CANTFIND; */
d161 1
a161 2
/*                        msg = MSG_TOOMANY; */
			rc2= ERROR_DIR_NOT_FOUND;
d174 1
a174 1
/*                  if(!rc) msg = MSG_CANTFIND; */
@


1.8
log
@added test to only go into pattern code if pattern was specified
@
text
@d39 1
d43 1
a43 1
/* #define MSG_NOMATCH     "No directories matching '%s'\n" */
a68 1
   char *msg;
a76 1
   msg = NULL;
d94 2
a95 1
                  if(!(rc2 = IoErr())) msg = MSG_NOTDIR;
d121 1
a121 1
                      msg = MSG_CANTFIND;
d167 2
a168 1
                        msg = MSG_TOOMANY;
d181 1
a181 1
                  if(!rc) msg = MSG_CANTFIND;
d221 1
a221 1
            msg = "%s\n";
a223 1
         if (msg) VPrintf(msg, opts);
d225 1
a225 2
         if(rc && rc2 && !msg)
         {
a226 1

d228 1
a228 2
            if(rc2 == ERROR_LINE_TOO_LONG)
               rc = rc2 = 0;
@


1.7
log
@fixed extra requester...could have lost a lock
@
text
@d90 1
a90 2
         if(opts[OPT_DIR])
         {
d102 23
a124 22
	    else if ((rc2 = IoErr()) == ERROR_NO_DISK) {
		rc = RETURN_FAIL;
                goto ERRORSPOT;
	    }
            else { /* No direct match, check for wildcard match */
               memset(ap, 0, sizeof(struct uAnchorPath));
               ap->ap.ap_Flags = APF_DOWILD;
               ap->ap.ap_Strlen = 255;
               ap->ap.ap_BreakBits = SIGBREAKF_CTRL_C;

               /* If they specified a wildcard, and it matches      */
               /* exactly one DIRECTORY, assume that's our argument */
               if(MatchFirst((char *)opts[OPT_DIR], &ap->ap)) {
                  /* No matches at all, forget it */
                  rc = RETURN_FAIL;
                  rc2 = IoErr();
                  msg = MSG_CANTFIND;
                  MatchEnd(&ap->ap);
                  goto ERRORSPOT;
               }


a172 1

d174 1
a174 1

a179 2

/*                  if(!rc) msg = MSG_NOMATCH; */
d225 1
a225 1
         if(rc2 && !msg)
@


1.6
log
@removed doslibrary open test to save space
@
text
@d93 2
a94 4
            if(lock=Lock((char *)opts[OPT_DIR], SHARED_LOCK))
            {
               if(!Examine(lock, fib) || fib->fib_DirEntryType < 0)
               {
d103 5
a107 2
            else /* No direct match, check for wildcard match */
            {
d115 1
a115 2
               if(MatchFirst((char *)opts[OPT_DIR], &ap->ap))
               {
d140 1
a140 2
               do /* while more matches */
               {
@


1.5
log
@new version from distillery
@
text
@a38 1
#define MSG_BADARGS     "Bad args for " TEMPLATE "\n"
a39 1
#define MSG_NONAME      "Unable to find current directory name\n"
d42 1
a42 1
#define MSG_NOMATCH     "No directories matching '%s'\n"
d78 2
a79 2
   if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))
   {
d183 2
a184 1
                  if(!rc) msg = MSG_NOMATCH;
d241 1
d247 1
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*; /*
d32 1
a35 1
#include "intuition/intuition.h"
a36 2
#include "global.h"

d44 1
d65 1
a65 2
   struct DosLibrary *DOSBase;
   struct Library *SysBase = (*((struct Library **) 4));
d68 2
a69 1
   int rc, rc2, gotfile;
a75 1
   struct Window *window;
d80 2
a81 2

   if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) {
d83 2
a84 1
      if(!(rdargs = ReadArgs(TEMPLATE, opts, NULL))) {
d87 2
a88 1
      else {
a90 1
	 window = process->pr_WindowPtr; 
d92 2
a93 1
         if(opts[OPT_DIR]) {
d95 4
a98 2
            if(lock=Lock((char *)opts[OPT_DIR], SHARED_LOCK)) {
               if(!Examine(lock, fib) || (fib->fib_DirEntryType <= 0)) {
d100 1
a100 1
                  rc2 = 212; /* not required type */
d104 2
d107 2
a108 2
            else { /* No direct match, check for wildcard match */
	       process->pr_WindowPtr = (APTR)-1; /* requesters off for the rest */
d116 2
a117 1
               if(MatchFirst((char *)opts[OPT_DIR], &ap->ap)) {
d126 15
d142 7
a148 1
               gotfile = 0;
d150 10
a159 5
               do {
                  if(ap->ap.ap_Info.fib_DirEntryType >= 0) { /* If it's a directory...*/
                     if(lock == NULL) {
                        /* We have matched a directory for the first time */
                        if(!(lock = Lock(ap->ap.ap_Info.fib_FileName, SHARED_LOCK)))
d167 3
a169 1
                        /* Whoops - second directory match.  Give up. */
a173 4
                  else {
                     /* At least one file matched that wasn't a directory */
                     gotfile = 1;
                  }
d179 7
a185 2
               /* If we matched a file, it's an error only if we didn't match a dir */
               if(gotfile && !rc && !lock) {
a186 4
                  msg = MSG_NOTDIR;
               }

               if(rc) {
a189 7

               if(!lock) {
                  /* Didn't match any */
                  msg = MSG_CANTFIND;
                  rc = RETURN_FAIL;
                  goto ERRORSPOT;
               }
d197 4
a200 3
	 process->pr_WindowPtr = window; /* turn on requesters again */
         if(!NameFromLock(process->pr_CurrentDir, data, 256)) {
            if((rc2=IoErr()) == ERROR_LINE_TOO_LONG) {
d204 2
a205 1
            else {
d210 5
a214 2
         if(opts[OPT_DIR]) {
            if(!SetCurrentDirName(data)) {
d222 2
a223 1
         else {
a227 1
	 process->pr_WindowPtr = window; /* turn on requesters again */
d230 2
a231 1
         if(rc2 && !msg) {
d235 2
a236 1
            if(rc2 == ERROR_LINE_TOO_LONG) rc = rc2 = 0;
@


1.3
log
@prints error message when attempt to cd to a file
@
text
@d66 2
a69 1
   struct DosLibrary *DOSBase;
@


1.2
log
@removed CMDREV header
@
text
@d102 1
a102 2
            else /* No direct match, check for wildcard match */
            {
d111 1
a111 2
               if(MatchFirst((char *)opts[OPT_DIR], &ap->ap))
               {
d123 3
a125 6
               do
               {
                  if(ap->ap.ap_Info.fib_DirEntryType >= 0) /* If it's a directory...*/
                  {
                     if(lock == NULL)
                     {
d140 1
a140 2
                  else
                  {
d150 1
a150 2
               if(gotfile && !rc && !lock)
               {
d155 1
a155 2
               if(rc) 
               {
d160 1
a160 2
               if(!lock)
               {
d173 3
a175 4
         if(!NameFromLock(process->pr_CurrentDir, data, 256))
         {
            if((rc2=IoErr()) == ERROR_LINE_TOO_LONG)
            {
d179 1
a179 2
            else
            {
d184 2
a185 5

         if(opts[OPT_DIR])
         {
            if(!SetCurrentDirName(data))
            {
d193 1
a193 2
         else
         {
@


1.1
log
@Error message added when you cd to a file
@
text
@@


1.0
log
@added to rcs
@
text
@d1 1
a1 1
/*
d7 1
a7 1

d11 5
a15 5
/* | .	| || the authors:			      BBS: (919) 382-8265    */
/* | o	| ||   Dave Baker      Alan Beale	  Jim Cooper		     */
/* |  . |//    Jay Denebeim    Bruce Drake	  Gordon Keener 	     */
/* ======      John Mainwaring Andy Mercier	  Jack Rouse		     */
/*	       John Toebes     Mary Ellen Toebes  Doug Walker		     */
d18 2
a19 2
/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
d22 12
a33 11
/*---------------------------------------------------------------------------*/
/* Command: CD								     */
/* Author:  Doug Walker 						     */
/* Change History:							     */
/*  Date    Person	  Action					     */
/* -------  ------------- -----------------				     */
/* 19MAR89  John Toebes   Initial Creation				     */
/* 05APR89  Doug Walker   Filled in body				     */
/* 06NOV89  Doug Walker   Revved for dos.library 36.38			     */
/* Notes:								     */
/*---------------------------------------------------------------------------*/
d35 1
a36 1
/* #include "cd_rev.h" */
d39 1
a39 4
#define MSG_BADARGS	"Bad args for " TEMPLATE "\n"
#define MSG_CANTFIND	"Can't find %s\n"
#define MSG_NONAME	"Unable to find current directory name\n"
#define MSG_NOTDIR	"%s is not a directory\n"
d41 7
a47 1
#define TEMPLATE    "DIR" CMDREV
d53 1
a53 1
/* based on the variable name, then creates an appropriately	*/
d55 1
a55 1
/* char array allocated.					*/
d57 6
a62 1
			type *name = (type *)((LONG)(a_##name+3) & ~3)
d67 1
d69 1
a69 1
   int rc, rc2;
d76 1
d81 2
a82 2
   if (DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))
   {
d84 2
a85 3
      if(!(rdargs = ReadArgs(TEMPLATE, opts, NULL)))
      {
	 PrintFault(IoErr(), NULL);
d87 4
a90 4
      else
      {
	 rc = RETURN_OK;
	 process = THISPROC;
d92 17
a108 14
	 if(opts[OPT_DIR])
	 {
	    /* Change the current directory */
	    if(!(lock=Lock((char *)opts[OPT_DIR], ACCESS_READ)) ||
	       !Examine(lock, fib) || fib->fib_DirEntryType <= 0)
	    {
	       rc = RETURN_FAIL;
	       rc2 = IoErr();
	       if(lock) UnLock(lock);
	       goto ERRORSPOT;
	    }
	    if( (lock = CurrentDir(lock)) != NULL)   /* Assignment! */
	       UnLock(lock);
	 }
d110 11
a120 14
	 /* Now we need to get the full name of the current directory */
	 if(!NameFromLock(process->pr_CurrentDir, data, 256))
	 {
	    if((rc2=IoErr()) == ERROR_LINE_TOO_LONG)
	    {
	       /* No matter, we can only use 63 characters anyway */
	       rc2 = 0;
	    }
	    else
	    {
	       rc = RETURN_ERROR;
	       goto ERRORSPOT;
	    }
	 }
d122 90
a211 16
	 if(opts[OPT_DIR])
	 {
	    if(!SetCurrentDirName(data))
	    {
	       /* We may have failed due to line too long    */
	       /* If so, these return codes will get cleaned */
	       /* up since that is really not an error	     */
	       rc2 = IoErr();
	       rc = RETURN_FAIL;
	    }
	 }
	 else
	 {
	    opts[0] = (LONG)data;
	    msg = "%s\n";
	 }
d213 5
a217 5
	 if (msg) VPrintf(msg, opts);
	 FreeArgs(rdargs);
	 if(rc2)
	 {
	    PrintFault(rc2, NULL);
d219 4
a222 5
	    /* Not really an error if dir name is too long */
	    if(rc2 == ERROR_LINE_TOO_LONG)
	       rc = rc2 = 0;
	 }
	 SetIoErr(rc2);
@
