head     1.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.10
date     91.04.10.19.49.13;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     91.03.13.23.26.23;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.03.05.22.02.52;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.25.22.38.38;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.25.22.20.50;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.10.20.35.56;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.06.11.14.47.20;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.05.31.18.30.00;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.07.00.12.37;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.23.18.38;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.46.41;  author andy;  state Exp;
branches ;
next     ;


desc
@builtin why command
@


1.10
log
@uses the new universal getargs routine to save space
@
text
@/*
lc -d -j73 -O -o/obj/Why.o -i/include -v -csf Why
blink /obj/Why.o to /bin/Why sc sd nd
protect /bin/Why +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker                */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*---------------------------------------------------------------------------*/
/* Command: Why                                                              */
/* Author:  John G. Mainwaring                                               */
/* Change History:                                                           */
/*  Date    Person         Action                                            */
/* -------  -------------  -----------------                                 */
/* 19MAR89  John Toebes    Initial Creation                                  */
/* 28SEP89 John Mainwaring first implementation                              */
/* 30NOV89 John Mainwaring symbolic RETURN_OK, new copyright notice          */
/* Notes:                                                                    */
/*---------------------------------------------------------------------------*/

#include "internal/commands.h"
#include "global.h"

#define SMALL 1

#define TEMPLATE    ""
#define OPT_DUMMY   0
#define OPT_COUNT   1

int cmd_why(void)
{
   struct DosLibrary *DOSBase;
   int rc = RETURN_ERROR;
   long faultcode;
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   struct CommandLineInterface *cli;
   char buffer[48];

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL) PrintFault(IoErr(), NULL);
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
         /* Need original fault code, IoErr() gets it from somewhere else. */
         cli = Cli();
         faultcode = cli->cli_Result2;

         if (faultcode) {
	    Fault(STR_LAST_MSG_FAILED,NULL,buffer,44);
            PrintFault(faultcode, buffer);
         }
	 else PrintFault(STR_NO_RETURN_CODE,NULL);
         FreeArgs(rdargs);

         /* This result finds its way back to cli->Result2 - do this so 'Why' */
         /* won't stomp the fault code, which would be a no-no.               */
        SetIoErr(faultcode);
	rc = RETURN_WARN ; /* if RC is set to 0, IoErr gets reset */
      }
      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else { OPENFAIL;}
#endif
   return(rc);
}
@


1.9
log
@changed prompt
@
text
@d37 2
d46 1
a46 4
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
   int rc;
d53 1
a53 3
   rc = RETURN_ERROR;

/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a54 4
      /* Need original fault code, IoErr() gets it from somewhere else.     */
      cli = Cli();
      faultcode = cli->cli_Result2;

a56 1

d59 6
a64 1
         rc = RETURN_OK;
d75 2
a76 1
         SetIoErr(faultcode);
a80 1

@


1.8
log
@removed a confusing comma
@
text
@d37 1
a37 1
#define TEMPLATE    " "
@


1.7
log
@changed return code to match 1.3
@
text
@d37 1
a37 1
#define TEMPLATE    ","
@


1.6
log
@registered parameter switch to save space
@
text
@d54 1
a54 1
   rc = RETURN_FAIL;
@


1.5
log
@moved strings into dos
@
text
@d44 1
d46 1
@


1.4
log
@removed doslibrary open test to save space
@
text
@a36 3
#define MSG_LASTFAILED "Last command failed because "
#define MSG_NOERROR    "The last command did not set a return code\n"

d50 1
d68 2
a69 2
            Puts(MSG_LASTFAILED);
            PrintFault(faultcode, NULL);
d71 1
a71 1
         else Puts(MSG_NOERROR);
@


1.3
log
@changed to stash sysbase
@
text
@d56 2
a57 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d81 1
d83 1
d85 1
@


1.2
log
@
@
text
@d56 1
a56 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d64 2
a65 8
      if (rdargs == NULL)
      {
         PrintFault(IoErr(), NULL);
      }

      else
      {

d68 1
a68 2
         if (faultcode)
         {
d72 1
a72 2
         else
            Puts(MSG_NOERROR);
a78 1

d81 1
a81 4
   else
   {
      OPENFAIL;
   }
@


1.1
log
@removed CMDREV header
@
text
@d47 1
@


1.0
log
@added to rcs
@
text
@a34 1
/* #include "why_rev.h" */
d40 1
a40 3
/* included out of premonition it may be needed for some automated           */
/* source fie management tools - quite harmless in any case.                 */
#define TEMPLATE    "," CMDREV
@
