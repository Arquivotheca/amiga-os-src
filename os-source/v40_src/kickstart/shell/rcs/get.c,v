head     1.13;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.13
date     91.05.07.23.44.18;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.04.10.19.42.24;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.02.27.19.46.25;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.25.22.27.18;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.12.31.01.47.40;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.12.17.21.56.48;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.06.13.21.08.31;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.11.14.53.54;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.05.31.18.27.18;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.07.00.11.36;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.19.05.37.38;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.04.23.16.26;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.17.03.38.59;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.44.45;  author andy;  state Exp;
branches ;
next     ;


desc
@Builtin getenv command
@


1.13
log
@added FilePart call so I know who I am
@
text
@/*
lc -d -j73 -O -o/obj/GetEnv.o -i/include -v -csf GetEnv
blink /obj/GetEnv.o to /bin/GetEnv sc sd nd
protect /bin/GetEnv +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .	| || the authors:			      BBS: (919) 382-8265    */
/* | o	| ||   Dave Baker      Alan Beale	  Jim Cooper		     */
/* |  . |//    Jay Denebeim    Bruce Drake	  Gordon Keener 	     */
/* ======      John Mainwaring Andy Mercier	  Jack Rouse		     */
/*	       John Toebes     Mary Ellen Toebes  Doug Walker		     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*----------------------------------------------------------------------*/
/* Command: GetEnv							*/
/* Author:  John Toebes 						*/
/* Change History:							*/
/*  Date    Person	  Action					*/
/* -------  ------------- -----------------				*/
/* 19MAR89  John Toebes   Initial Creation				*/
/* 25OCT89  John Toebes   Revamp for DOS36.21				*/
/* 06NOV89  John Toebes   Change to use GetVar				*/
/* 02DEC89  John Toebes   Final changes from code review		*/
/* Notes:								*/
/*----------------------------------------------------------------------*/

#include "internal/commands.h"
#include "dos/var.h"
#include "global.h"
/* #include "getenv_rev.h" */

#define SMALL 1

#define TEMPLATE    "NAME/A"
#define OPT_NAME    0
#define OPT_COUNT   1

int cmd_getenv(void)
{
   struct DosLibrary *DOSBase;
   struct Library *UtilityBase;
   int rc=RETURN_ERROR;
   int mode;
   int len;
   char envbuf[ENVMAX+1];	/* One extra for a final \n we add	*/
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   UBYTE buf[80];
  
#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL) PrintFault(IoErr(), NULL);
      else {
#else
      if(rdargs=getargs(&DOSBase,&UtilityBase,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
     memset((char *)envbuf, 0, sizeof(envbuf));
	 /*-------------------------------------------------------------*/
	 /* Determine whether to set it as a local or global variable.	*/
	 /* unless they specify local we assume global.  Note that we	*/
	 /* do not have to check the global flag at all for this.  This */
	 /* does allow them to (erroneously) specify both LOCAL GLOBAL  */
	 /* and we will treat it as LOCAL				*/
	 /*-------------------------------------------------------------*/
	 mode = GVF_LOCAL_ONLY|LV_VAR;

	 if(GetProgramName(buf,31)) { /* pick the defaults */
	     if(!Stricmp((UBYTE *)FilePart(buf),"getenv"))
		mode = GVF_GLOBAL_ONLY|LV_VAR;
	 }

	 /*-------------------------------------------------------------*/
	 /* Ask DOS to find the variable for us.			*/
	 /*-------------------------------------------------------------*/
	 len = GetVar((char *)opts[OPT_NAME], envbuf, ENVMAX, mode);

	 /*-------------------------------------------------------------*/
	 /* Did he find it?						*/
	 /*-------------------------------------------------------------*/
	 if (len == -1) {
	    /*----------------------------------------------------------*/
	    /* Nope, tell the user, making sure that we preserve the	*/
	    /* secondary return code for the fault command.		*/
	    /*----------------------------------------------------------*/
	    PrintFault(IoErr(),NULL);
	    rc = RETURN_WARN;
	 }
	 else {
	    rc = RETURN_OK;	/* assume things will work out ok	*/
	    len = strlen(envbuf);
	    /*----------------------------------------------------------*/
	    /* Check to see if we got a truncated result back		*/
	    /*----------------------------------------------------------*/
	    if (len == ENVMAX)
	    {
	       /*-------------------------------------------------------*/
	       /* Oh well, tell them we only can handle so many bytes	*/
	       /*-------------------------------------------------------*/
	       rc = RETURN_WARN;
	    }

	    /*----------------------------------------------------------*/
	    /* Add a CR so we get a blank line after it 		*/
	    /* We rely upon the buffer being one byte bigger for this	*/
	    /*----------------------------------------------------------*/
	    if (envbuf[len-1] != '\n') envbuf[len++] = '\n';
	    WriteChars(envbuf, len);
	 }
	 /*-------------------------------------------------------------*/
	 /* Now clean up and exit.					*/
	 /*-------------------------------------------------------------*/
	 FreeArgs(rdargs);
      }
      CloseLibrary(UtilityBase);
      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else { OPENFAIL; }
#endif
   return(rc);
}
@


1.12
log
@uses the new universal getargs routine to save space
@
text
@d57 1
a57 1

d78 2
a79 1
	     if(!Stricmp(buf,"getenv"))mode = GVF_GLOBAL_ONLY|LV_VAR;
@


1.11
log
@fixed trashing of result bug
@
text
@d40 2
d50 1
a50 4
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/  
   int rc;
d58 2
a59 4
   rc = RETURN_ERROR;
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
     DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
     UtilityBase=OpenLibrary("utility.library",0);
a60 1
      memset((char *)envbuf, 0, sizeof(envbuf));
d62 1
a62 4

      if (rdargs == NULL) {
	 PrintFault(IoErr(), NULL);
      }
d64 4
@


1.10
log
@registered parameter switch to save space
@
text
@d64 1
d67 1
a67 2
      if (rdargs == NULL)
      {
d92 1
a92 2
	 if (len == -1)
	 {
d97 1
a97 2
	    PrintFault((rc = IoErr()),NULL);
/*	    SetIoErr(rc); */
d102 1
@


1.9
log
@switched to Utility library string routines
@
text
@d48 1
d50 1
d59 1
a59 1
   rc = RETURN_FAIL;
@


1.8
log
@uses PrintFault for its strings.
@
text
@d47 1
d60 1
d79 1
a79 1
	     if(!stricmp(buf,"getenv"))mode = GVF_GLOBAL_ONLY|LV_VAR;
d125 1
@


1.7
log
@smaller (a bit)
@
text
@a39 3
#define MSG_CANTFIND "Can't get %s\n"
#define MSG_TRUNC    "Variable truncated to %ld characters"

d94 2
a95 3
	    rc = IoErr();
	    VPrintf(MSG_CANTFIND, opts);
	    SetIoErr(rc);
d98 1
a98 2
	 else
	 {
a107 1
/*	       VPrintf(MSG_TRUNC, &len); */
@


1.6
log
@removed doslibrary open test to save space
@
text
@d113 1
a113 1
	       VPrintf(MSG_TRUNC, &len);
@


1.5
log
@changed variable code to use less stack
@
text
@d60 2
a61 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d130 1
d133 1
@


1.4
log
@*** empty log message ***
@
text
@d43 1
a43 1
#define TEMPLATE    "NAME/A,LOCAL/S,GLOBAL/S"
d45 1
a45 3
#define OPT_LOCAL   1
#define OPT_GLOBAL  2
#define OPT_COUNT   3
d69 1
a69 2
      else
      {
a82 9
	 if (opts[OPT_LOCAL]) {
			mode |= GVF_LOCAL_ONLY;
			mode &= ~GVF_GLOBAL_ONLY;
	 }
	 else if (opts[OPT_GLOBAL]) {
		mode |= GVF_GLOBAL_ONLY;
		mode &= ~GVF_LOCAL_ONLY;
	 }

a121 1

d131 1
a131 4
   else
   {
      OPENFAIL;
   }
@


1.3
log
@checkin
@
text
@d52 1
@


1.2
log
@removed CMDREV header
@
text
@@


1.1
log
@getenv defaults to global, get to local
@
text
@d43 1
a43 1
#define TEMPLATE    "NAME/A,LOCAL/S,GLOBAL/S" CMDREV
@


1.0
log
@added to rcs
@
text
@d58 1
d79 14
a92 2
	 mode = GVF_GLOBAL_ONLY;
	 if (opts[OPT_LOCAL]) mode = GVF_LOCAL_ONLY;
@
