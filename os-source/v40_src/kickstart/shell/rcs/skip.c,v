head     1.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.12
date     91.04.10.19.49.20;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.04.08.22.06.51;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.25.22.38.56;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     91.01.25.22.19.03;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.10.20.35.44;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.09.01.11.51.27;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.08.31.18.09.12;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.13.20.51.17;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.06.11.14.45.56;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.05.31.18.25.00;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.07.00.12.24;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.23.17.44;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.37.43;  author andy;  state Exp;
branches ;
next     ;


desc
@Builtin skip command
@


1.12
log
@uses the new universal getargs routine to save space
@
text
@/*
lc -d -j73 -O -o/obj/Skip.o -i/include -v -csf Skip
blink /obj/Skip.o to /bin/Skip sc sd nd
protect /bin/Skip +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker                */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*---------------------------------------------------------------------------*/
/* Command: Skip                                                             */
/* Author:  Gordon Keener                                                    */
/* Change History:                                                           */
/*  Date    Person        Action                                             */
/* -------  ------------- -----------------                                  */
/* 19MAR89  John Toebes   Initial Creation                                   */
/* 03DEC89  Gordon Keener Final (hopefully) fixes                            */
/* Notes:                                                                    */
/*---------------------------------------------------------------------------*/

#include "internal/commands.h"
/* #include "skip_rev.h" */
#include "global.h"

#define SMALL 1

#define TEMPLATE    "LABEL,BACK/S"
#define OPT_LABEL   0
#define OPT_BACK    1
#define OPT_COUNT   2

int cmd_skip(void)
{
   struct DosLibrary            *DOSBase;
   struct RDargs                *rdargs;
   struct CommandLineInterface  *cli;
   int                          rc = RETURN_ERROR;
   long                         opts[OPT_COUNT];
   ULONG                        more;
   char                         buff[256];

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL)PrintFault(IoErr(), NULL);
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
	if ((((cli = Cli()) == NULL)) ||
	    (cli->cli_CurrentInput==cli->cli_StandardInput))
		PrintFault(STR_NOT_EXECUTE,NULL);
        else {
         SelectInput( cli->cli_CurrentInput );

         /* If they say BACK, seek backwards to the beginning of the */
         /* file, or at least as far as we can.                      */
         if (opts[OPT_BACK]) {
	    Flush(Input());
            Seek( Input(), 0, OFFSET_BEGINNING );
         }

         more = 1;

         /* Read lines until we find matching label, or ENDSKIP */
         while ((rc == RETURN_ERROR) && (more)) {
            if (ReadItem(buff, sizeof(buff), NULL) == ITEM_TOKEN) {
               switch( FindArg("LAB,ENDSKIP", buff) ) {
                  case 0:
                     /* LAB */
                     if (ReadItem(buff, sizeof(buff), NULL) != ITEM_NONE) {
			if(opts[OPT_LABEL]) {
                           if (FindArg((char *)opts[OPT_LABEL], buff) == 0)
                               rc = RETURN_OK;
			}
                     }
		     else if(!opts[OPT_LABEL])rc=RETURN_OK;
                     break;

                  case 1:
                     /* ENDSKIP */
                     rc = RETURN_WARN;
                     break;

                  default:
                     break;
               }
            }

            /* eat rest of line */
            more = (ULONG)FGets( Input(), buff, sizeof(buff) );
         }
	 if(rc==RETURN_ERROR) {
	    PrintFault(ERROR_OBJECT_NOT_FOUND,NULL);
	    SetIoErr(ERROR_OBJECT_NOT_FOUND);
	 }
	}
        FreeArgs(rdargs);
      }
      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
      }
   else {OPENFAIL;}
#endif
   return(rc);
}
@


1.11
log
@removed useless setting of sysbase
@
text
@d37 1
d49 1
a49 1
   int                          rc;
d54 1
a54 2
   rc = RETURN_ERROR;
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a57 1

a58 1

d60 3
@


1.10
log
@changed return code to match 1.3
@
text
@a45 1
   struct Library *SysBase = (*((struct Library **) 4));
@


1.9
log
@registered parameter switch to save space
added error message when label not found
@
text
@d54 1
a54 1
   rc = RETURN_FAIL;
d79 1
a79 1
         while ((rc == RETURN_FAIL) && (more)) {
d106 1
a106 1
	 if(rc==RETURN_FAIL) {
@


1.8
log
@moved strings into dos
@
text
@d71 1
a71 2
         if (opts[OPT_BACK])
         {
d79 3
a81 6
         while ((rc == RETURN_FAIL) && (more))
         {
            if (ReadItem(buff, sizeof(buff), NULL) == ITEM_TOKEN)
            {
               switch( FindArg("LAB,ENDSKIP", buff) )
               {
d106 4
d115 1
a115 1
   }
@


1.7
log
@removed memory leak when command not used in script file

@
text
@a37 5
#define MSG_NOEXEC  "SKIP must be in a command file\n"
#define MSG_MISSING "Missing ELSE or ENDIF\n"



d64 2
a65 2
	    (cli->cli_CurrentInput==cli->cli_StandardInput)) Puts(MSG_NOEXEC);

@


1.6
log
@fixed memory loss with skip and no argument
@
text
@a36 1
/* NOTE: IF and ELSE say "must be in a command file\n" */
d38 1
a38 1
#define MSG_NOEXEC  "SKIP is valid only in a command file\n"
a114 1
         FreeArgs(rdargs);
d116 1
@


1.5
log
@changed Fgets use to make changed proto quiet
@
text
@d68 3
a70 2
      else if ((((cli = Cli()) == NULL)) ||
	(cli->cli_CurrentInput==cli->cli_StandardInput)) Puts(MSG_NOEXEC);
d72 1
a72 1
      else {
d117 1
@


1.4
log
@removed doslibrary open test to save space
@
text
@d57 1
a57 1
   int                          more;
d85 1
a85 1
         while ((rc == RETURN_FAIL) && (more > 0))
d113 1
a113 1
            more = FGets( Input(), buff, sizeof(buff) );
@


1.3
log
@fixed test for null labels
@
text
@d61 2
a62 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d118 1
d121 1
@


1.2
log
@
@
text
@d43 1
d61 1
a61 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d65 6
a70 11
      if (rdargs == NULL)
      {
         PrintFault(IoErr(), NULL);
      }
      else if (((cli = Cli()) == NULL) ||
               (cli->cli_CurrentInput == cli->cli_StandardInput))
      {
	 Puts(MSG_NOEXEC);
      }
      else
      {
d92 5
a96 4
                     if (ReadItem(buff, sizeof(buff), NULL) != ITEM_NONE)
                     {
                        if (FindArg((char *)opts[OPT_LABEL], buff) == 0)
                           rc = RETURN_OK;
d98 1
d114 1
a115 1

d118 1
a118 5
   else
   {
      OPENFAIL;
   }

@


1.1
log
@added a Flush call before back skip
@
text
@d51 1
@


1.0
log
@added to rcs
@
text
@d43 1
a43 1
#define TEMPLATE    "LABEL,BACK/S" CMDREV
d81 1
a81 1
            /* This is supposed to work */
@
