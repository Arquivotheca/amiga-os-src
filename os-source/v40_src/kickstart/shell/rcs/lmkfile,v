head     1.24;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.24
date     93.02.15.22.53.51;  author jesup;  state Exp;
branches ;
next     1.23;

1.23
date     92.06.02.13.47.27;  author jesup;  state Exp;
branches ;
next     1.22;

1.22
date     92.05.08.23.46.20;  author jesup;  state Exp;
branches ;
next     1.21;

1.21
date     91.05.15.20.50.46;  author andy;  state Exp;
branches ;
next     1.20;

1.20
date     91.05.09.19.42.18;  author andy;  state Exp;
branches ;
next     1.19;

1.19
date     91.05.09.18.23.11;  author andy;  state Exp;
branches ;
next     1.18;

1.18
date     91.05.09.18.18.39;  author andy;  state Exp;
branches ;
next     1.17;

1.17
date     91.05.09.18.16.11;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     91.05.09.09.45.32;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.28.19.42.22;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.25.23.01.06;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.25.22.29.41;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.11.20.30.43;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.12.26.12.00.11;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.28.12.54.54;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.09.01.15.27.28;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.04.18.13.37.13;  author Unknown;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.16.17.03.32;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.19.05.34.02;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.02.20.55.56;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.01.24.18.44.51;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.01.17.19.45.32;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.18.04.44.14;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.51.01;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.07.05.26.03;  author andy;  state Exp;
branches ;
next     ;


desc
@makefile for Shell
@


1.24
log
@
@
text
@#MYLIBS= LIB:amiga.lib LIB:debug.lib
REMOTE = V:src/kickstart/shell

V = 40
LC = lc
ASM = casm

LRFLAGS= BATCH SMALLCODE SMALLDATA ND
LFLAGS= BATCH SMALLCODE SMALLDATA MAP shell.map F,H,L,O,S,X

OFILES= shell.o variable.o set.o endif.o endcli.o echo.o ask.o else.o \
	failat.o fault.o get.o if.o path.o prompt.o quit.o skip.o stack.o \
	why.o cd.o resident.o newshell.o run.o jumptab.o endcode.o

HDRS=	global.h shell_protos.h libhdr.h fault.h cli_init.h

CFILES1=	shell.c variable.c set.c endif.c endcli.c echo.c ask.c \
		else.c failat.c fault.c get.c if.c path.c prompt.c quit.c \
		skip.c stack.c
CFILES2=	why.c cd.c resident.c newshell.c run.c

AFILES=	jumptab.asm endcode.asm sromtag.asm sramtag.asm

#AFLAGS = -iinclude: -cqr
AFLAGS = -iINCLUDE:

#LCFLAGS = -cimsqf -v -j73 -rr -iV:include -iV:inc.lattice -d1
LCFLAGS = -cimsqf -v -j73 -rr -d1
OPT = -O -ms

shell.ld.strip: shell.ld
	blink from shell.ld to shell.ld.strip ND

shell.ld:	sromtag.o sramtag.o $(OFILES)
	blink from sromtag.o with shell.with \
	LIB LIB:lcr.lib $(MYLIBS) TO shell.ld $(LFLAGS)
         
	blink from sramtag.o with shell.with \
	LIB LIB:lcr.lib $(MYLIBS) TO rshell.ld $(LRFLAGS)
	execute < <
	if "$$username" EQ "andy" ;
	rcp rshell.ld shell.ld minnow=ram: ;
	endif;
	<
.c.o:
	$(LC) $(LCFLAGS)  $(OPT) $*.c

.asm.o:
	$(ASM) -a $*.asm -o $*.o $(AFLAGS) 


shell.o:	shell.c global.h cli_init.h shell_rev.h jumptab.asm

sromtag.o:	sromtag.asm shell_rev.i

sramtag.o:	sramtag.asm shell_rev.i

jumptab.o:	jumptab.asm

variable.o:	variable.c global.h

set.o:		set.c

endcli.o:	endcli.c

endif.o:	endif.c

echo.o:		echo.c

resident.o:	resident.c jumptab.asm

ask.o:		ask.c

else.o:		else.c

failat.o:	failat.c

fault.o:	fault.c

get.o:	get.c

if.o:		if.c

path.o:		path.c

prompt.o:	prompt.c

quit.o:		quit.c

skip.o:		skip.c

stack.o:	stack.c

why.o:		why.c

cd.o:		cd.c

newshell.o:	newshell.c

run.o:		run.c

endcode.o:	endcode.asm


internal:
	@@copy (\#?.ld|\#?.rev|\#?_rev.?) $(REMOTE)
	@@execute < < 
	failat 21 ;
	cd $(REMOTE) ;
	co $(CFILES1) ;
	co $(CFILES2) $(AFILES) ;
	co $(HDRS) lmkfile Makefile;
	<

version:
	@@bumprev $(V) shell_rev

local:
	rcp rshell.ld shell.ld minnow=ram:

clean:
	@@delete (\#?.o|\#?.ld\#?)
@


1.23
log
@minor mods (.strip, release->internal)
@
text
@d4 1
a106 1
	@@bumprev 39 shell_rev
d116 1
a116 1
	@@bumprev 39 shell_rev
@


1.22
log
@use local includes (we need a private pragma/proto)
V39
@
text
@d30 3
d104 1
a104 1
release:
d112 1
a112 1
	co $(HDRS) lmkfile ;
a120 3
internal:
	@@copy (\#?.c|\#?.asm|\#?.h|\#?.i|lmkfile|\#?.ld|\#?.rev|Makefile) $(REMOTE)

d122 1
a122 1
	@@delete (\#?.o|\#?.ld)
@


1.21
log
@removed link with debug.lib just in case
@
text
@d26 2
a27 1
LCFLAGS = -cimsqf -v -j73 -rr -iV:include -iV:inc.lattice -d1
d103 1
a103 1
	@@bumprev 37 shell_rev
d113 1
a113 1
	@@bumprev 37 shell_rev
@


1.20
log
@*** empty log message ***
@
text
@d1 1
a1 1
MYLIBS= LIB:amiga.lib LIB:debug.lib
@


1.19
log
@added missing proto files to hdrs line
@
text
@d21 1
a21 1
AFILES=	jumptab.asm endcode.asm
@


1.18
log
@*** empty log message ***
@
text
@d14 1
a14 1
HDRS=	global.h shell_protos.h
d107 2
a108 1
	co $(CFILES2) $(AFILES) $(HDRS) lmkfile ;
@


1.17
log
@removed dependencies on my setup and checkout
@
text
@d101 2
a102 2
#	@@copy (\#?.ld|\#?.rev|\#?_rev.?) $(REMOTE)
#	@@bumprev 37 shell_rev
@


1.16
log
@put protos in HDRS line so it gets checked out
@
text
@d35 5
a39 2
	rcp rshell.ld shell.ld minnow=ram:
	
d101 8
a108 4
	@@copy (\#?.ld|\#?.rev|\#?_rev.?) $(REMOTE)
	@@bumprev 37 shell_rev
	@@execute checkout $(REMOTE) $(CFILES1) 
	@@execute checkout $(REMOTE) $(CFILES2) $(AFILES) $(HDRS) lmkfile
@


1.15
log
@removed extra library include
@
text
@d1 1
a1 1
#MYLIBS= LIB:amiga.lib LIB:debug.lib
d14 1
a14 1
HDRS=	global.h
d26 1
a26 1
LCFLAGS = -cimsqf -v -rr -iV:include -iV:inc.lattice -d1
d32 1
@


1.14
log
@modification for use with cape
@
text
@d26 1
a26 1
LCFLAGS = -cimsq -v -rr -iV:include -iV:inc.lattice -d1
d33 1
a33 1
	LIB LIB:lcr.lib $(MYLIBS) LIB:lc.lib TO rshell.ld $(LRFLAGS)
@


1.13
log
@*** empty log message ***
@
text
@d40 1
a40 1
	$(ASM) $(AFLAGS) -a $*.asm
@


1.12
log
@*** empty log message ***
@
text
@d5 1
a5 1
ASM = asm
d24 1
a24 1
AFLAGS = -iINCLUDE: -m0
d26 1
a26 1
LCFLAGS = -cims -v -iV:include -iV:inc.lattice -d1
d31 1
a31 1
	LIB LIB:lc.lib $(MYLIBS) TO shell.ld $(LFLAGS)
d33 1
a33 2
	LIB LIB:lc.lib $(MYLIBS) LIB:lc.lib TO rshell.ld $(LRFLAGS)
#	copy shell.ld rshell.ld cbmvax:shared quiet
d40 1
a40 1
	$(ASM) $(AFLAGS) $*.asm
@


1.11
log
@Release now checks out files on server
@
text
@d2 1
a2 1
REMOTE = V36:src/kickstart/shell
d26 1
a26 1
LCFLAGS = -cims -v -iV36:include -iV36:inc.lattice -d1
d99 1
a99 1
	@@bumprev 36 shell_rev
d104 1
a104 1
	@@bumprev 36 shell_rev
@


1.10
log
@switched  getenv to get to avoid confusion in filenames
..
@
text
@a1 2

LOCAL = skipper:V/shell
d14 9
d100 2
a102 4

rtest:
	rsh >NIL: minnow src:shell/test

d107 1
a107 1
	@@copy (\#?.c|\#?.asm|\#?.h|\#?.i|lmkfile|\#?.ld|\#?.rev|Makefile) $(LOCAL)
@


1.9
log
@fixed make clean
@
text
@d13 1
a13 1
	failat.o fault.o getenv.o if.o path.o prompt.o quit.o skip.o stack.o \
d27 3
a29 1

d65 1
a65 1
getenv.o:	getenv.c
d89 1
d93 4
@


1.8
log
@testing to see if RCS realizes no lock is set
@
text
@d1 1
a1 2
MYLIBS= LIB:lc.lib 
#LIB:amiga.lib LIB:debug.lib
d10 1
a10 1
LFLAGS= BATCH SMALLCODE SMALLDATA
d17 1
a17 1
AFLAGS = -iINCLUDE:
a22 1
	delete \#?.ld
d24 1
a24 1
	LIB $(MYLIBS) TO shell.ld $(LFLAGS)
d26 1
a26 3
	LIB $(MYLIBS) LIB:lc.lib TO rshell.ld $(LRFLAGS)
	@@bumprev 36 shell_rev
	delete shell.o \#?tag.o
d35 1
a35 1
shell.o:	shell.c global.h cli_init.h shell_rev.h
d43 1
a43 1
variable.o:	variable.c 
d53 1
a53 1
resident.o:	resident.c
d88 1
a89 1
	@@copy (\#?.ld|\#?.rev|\#?_rev.?) $(REMOTE)
d101 1
a101 1
	@@delete \#?.o|\#?.ld
@


1.7
log
@fixed lmkfile for use with RCS_link
@
text
@d24 1
d29 2
a30 1

@


1.6
log
@changed make internal line
@
text
@d1 2
a2 3
HDRS=
#AHDRS=
#MYLIBS= LIB:amiga.lib LIB:debug.lib
d20 2
a21 2
# add -ml option to below?
LCFLAGS = -cims -v -O -ms -iV36:include -iV36:inc.lattice -d1
d25 1
a25 1
	LIB $(MYLIBS) LIB:lc.lib TO shell.ld $(LFLAGS)
d31 1
a31 1
	$(LC) $(LCFLAGS) $*.c
d37 1
a37 1
shell.o:	shell.c global.h cli_init.h
d47 1
a47 1
set.o:		set.c global.h
d49 1
a49 1
endcli.o:	endcli.c global.h
d88 4
@


1.5
log
@added new modules newshell and run
@
text
@d2 1
a2 1
AHDRS=
d94 1
a94 1
	@@copy \#?.c|\#?.asm|\#?.h|\#?.i|lmkfile|\#?.ld|\#?.rev|Makefile $(LOCAL)
d97 1
a97 1
	@@copy \#?.c|\#?.asm|\#?.h|\#?.i|lmkfile|\#?.ld|\#?.rev|Makefile $(REMOTE)
@


1.4
log
@fixed incorrect flags for compile
@
text
@d14 3
a16 3
OFILES= shell.o variable.o set.o endif.o endcli.o echo.o \
	ask.o else.o failat.o fault.o getenv.o if.o path.o prompt.o quit.o \
	skip.o stack.o why.o cd.o resident.o jumptab.o endcode.o
d83 4
@


1.3
log
@symbols in .ld file
@
text
@d12 1
a12 1
LRFLAGS= BATCH SMALLCODE SMALLDATA
d15 1
a15 1
	ask.o else.o failat.o fault.o getenv.o if.o path.o prompt.o quit.o\
@


1.2
log
@modified to create both rom version and ram version
@
text
@d11 2
a12 1
LFLAGS= BATCH SMALLCODE SMALLDATA ND
d14 1
a14 1
OFILES= shell.o variable.o set.o endif.o endcli.o echo.o\
d24 1
a24 1
shell.ld:	sromtag.o $(OFILES)
d28 1
a28 1
	LIB $(MYLIBS) LIB:lc.lib TO rshell.ld $(LFLAGS)
d41 2
@


1.1
log
@new modules added
@
text
@d13 3
a15 2
OFILES= sromtag.o shell.o variable.o set.o endif.o endcli.o echo.o \
	resident.o jumptab.o endcode.o
d21 1
a21 1
LCFLAGS = -cims -v -iV36:include -iV36:inc.lattice -d1
d23 2
a24 2
shell.ld:	$(OFILES)
	blink FROM $(OFILES) \
d26 2
d29 1
d54 26
@


1.0
log
@added to rcs
@
text
@d3 1
a3 1
MYLIBS= LIB:amiga.lib LIB:debug.lib
d11 1
a11 1
LFLAGS= ND BATCH SMALLCODE SMALLDATA
d13 2
a14 1
OFILES= sromtag.o shell.o macro.o set.o jumptab.o endcode.o
d20 1
a20 1
LCFLAGS = -cims -v -iV36:include -iV36:inc.lattice
d39 1
a39 1
macro.o:	macro.c global.h
d42 8
@
