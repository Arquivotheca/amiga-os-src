head     1.31;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.31
date     91.05.07.18.12.18;  author andy;  state Exp;
branches ;
next     1.30;

1.30
date     91.04.10.19.41.50;  author andy;  state Exp;
branches ;
next     1.29;

1.29
date     91.04.06.18.34.08;  author andy;  state Exp;
branches ;
next     1.28;

1.28
date     91.04.06.18.25.13;  author andy;  state Exp;
branches ;
next     1.27;

1.27
date     91.03.08.18.39.39;  author andy;  state Exp;
branches ;
next     1.26;

1.26
date     91.02.27.19.45.31;  author andy;  state Exp;
branches ;
next     1.25;

1.25
date     91.01.28.19.38.27;  author andy;  state Exp;
branches ;
next     1.24;

1.24
date     91.01.25.22.27.37;  author andy;  state Exp;
branches ;
next     1.23;

1.23
date     91.01.16.12.33.40;  author andy;  state Exp;
branches ;
next     1.22;

1.22
date     91.01.10.20.36.34;  author andy;  state Exp;
branches ;
next     1.21;

1.21
date     90.12.31.01.56.42;  author andy;  state Exp;
branches ;
next     1.20;

1.20
date     90.12.31.01.48.25;  author andy;  state Exp;
branches ;
next     1.19;

1.19
date     90.12.17.21.56.04;  author andy;  state Exp;
branches ;
next     1.18;

1.18
date     90.09.14.20.12.59;  author andy;  state Exp;
branches ;
next     1.17;

1.17
date     90.06.11.14.45.08;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     90.05.31.18.24.19;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     90.05.03.20.13.08;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     90.04.22.02.09.14;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     90.04.16.17.02.06;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     90.04.07.03.00.53;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.04.07.00.11.58;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.03.19.05.35.50;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.03.04.23.41.36;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.03.04.23.16.57;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.03.02.21.07.09;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     89.12.18.06.49.10;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     89.12.18.04.44.56;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     89.12.17.03.43.54;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     89.12.15.07.48.11;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.10.23.20.13;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.48.28;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.09.06.46.13;  author andy;  state Exp;
branches ;
next     ;


desc
@built in resident command for shell
@


1.31
log
@added standalone header
@
text
@;/*
lc -O -M -d -j73 -oresident.o -iV:include -iV:inc.lattice -v -csf resident
blink resident.o to resident.ld LIB LIB:amiga.lib lib:debug.lib sc sd nd
protect resident.ld +p
quit
*/

#include "internal/commands.h"
#include "global.h"
#include "libhdr.h"
#include "clib/macros.h"

#define SMALL 1

#define TEMPLATE    "NAME,FILE,REMOVE/S,ADD/S,REPLACE/S,PURE=FORCE/S,SYSTEM/S"
#define OPT_NAME    	0
#define OPT_FILE  	1
#define OPT_REMOVE	2
#define OPT_ADD		3
#define OPT_REPLACE	4
#define OPT_PURE	5
#define OPT_SYSTEM	6
#define OPT_COUNT	7

int cmd_resident(void)
{
   struct DosLibrary *DOSBase;
   struct Library *UtilityBase;
   int rc=RETURN_ERROR;
   LONG res = 0;
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   UBYTE namespace[256];
   UBYTE *name=namespace;	/* initialize just in case */
   UBYTE *file,*fi;
   struct Segment *oldseg;
   struct Segment *list;
   int count=1;
   BPTR code = 0;
   int pc;
   char buffer[48],buf2[8];

#ifndef SMALL
  DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
  memset((char *)opts, 0, sizeof(opts));
  rdargs = ReadArgs(TEMPLATE, opts, NULL);
  if (rdargs == NULL) {
	PrintFault(IoErr(),NULL);
  }
  else {
#else
  if(rdargs=getargs(&DOSBase,&UtilityBase,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
      memset((char *)namespace, 0, 255);
      rc = RETURN_OK;
	   if ((!opts[OPT_FILE]) && (opts[OPT_NAME])) { /* no file name ? */
	      file = (UBYTE *)opts[OPT_NAME]; /* make up one */
	      fi=FilePart(file);
	      memcpy(namespace,fi,MIN(255,strlen(fi)));
	   }
	   else if ((opts[OPT_FILE]) && (!opts[OPT_NAME])) { /* no name ? */
	      file = (UBYTE *)opts[OPT_FILE]; /* make up one */
	      fi=FilePart(file);
	      memcpy(namespace,fi,MIN(255,strlen(fi)));
	   }
	   else {
	      name = (UBYTE *)opts[OPT_NAME];
	      file = (UBYTE *)opts[OPT_FILE];
	   }

	   if (name) {
	    /* we have the name, now do the action */

	    oldseg = searchsegs(DOSBase,name,0);
	    if ( opts[OPT_REMOVE]) {
		if(oldseg) {
		    if(oldseg->seg_UC <= CMD_BUILTIN) { /* if internal, disable the command */
			oldseg->seg_UC = CMD_DISABLED;
		    }
		    else if(oldseg->seg_UC < 0) { /* internal segment */
			rc = RETURN_WARN; /* it might not have been internal before */
			res=202;
		    }
		    else {
			if(!RemSegment(oldseg)) {
			    rc = RETURN_WARN; /* should be error */
			    res=IoErr();
			}
		    }
		}
	        else {
		    res=205;
		    rc = RETURN_WARN;
		 }
	    }
   /* we add if we get an add or an attempt on a builtin or system */
   else if (file && (opts[OPT_ADD] || 
		(oldseg->seg_UC < 0) && (oldseg->seg_UC > CMD_DISABLED)) ||
		((!opts[OPT_REPLACE]) && oldseg->seg_UC > 1)) {
           if((pc=testpure(DOSBase,file,opts[OPT_PURE]))>0)code=LoadSeg(file);
   	   if(!code) {
		res=IoErr();
		if(!pc)res=212;  /* object not pure */
		else if(!res)res=205; /* object not found */
		rc =RETURN_WARN;
	   }
	   else {
	        if(!Stricmp(name,"resident") || !Stricmp(name,"CLI")) {
		    rc=1;
    	 	    res = 212;
		}
		else {
		    if(opts[OPT_SYSTEM])count = -1;
	            if(!AddSegment(name, code, count)) {
           		UnLoadSeg(code);
			res=IoErr();
			rc = RETURN_ERROR;
		   }
		}
	   }
   }
   /* we are trying a replace */

    else if (file) {
	    if(opts[OPT_REPLACE]) {
      	        if(!oldseg) {	/* they only want a replace */
		    res=205;  /* object not found */
	 	    rc=RETURN_WARN;
		}
                else if (oldseg->seg_UC > 1) {
		    res=202;  /* object in use */
	            rc= RETURN_ERROR;
	        }
                else if (oldseg->seg_UC <= CMD_BUILTIN) {
		    oldseg->seg_UC = CMD_BUILTIN;
		    goto errorExit;
		}
                else if (oldseg->seg_UC < 0) { /* is it an internal ? */
		    res=222; /* object protected from deletion */
		    rc = RETURN_ERROR;
		}
	    }
	    if (rc==RETURN_OK) {
                if((pc=testpure(DOSBase,file,opts[OPT_PURE]))>0)code=LoadSeg(file);
            	    if(!code) {
			if(pc==0)res=212; /* object not pure */
			else res=205; /* object not found */
	                rc= RETURN_WARN;
		    }
		    else {
		        UnLoadSeg(oldseg->seg_Seg);	/* do the replace */
            	        oldseg->seg_UC = opts[OPT_SYSTEM] ? -1 : 1;
	    	        oldseg->seg_Seg = code;
		    }
		}
    }
	   }
   else {	/* might as well do a list */
    if(Fault(STR_TH_USE_COUNT,NULL,buffer,44)&&
    	Fault(STR_NAME,NULL,buf2,8))writef(DOSBase,buffer,buf2);
    Forbid();
    list=(struct Segment *)BADDR(((struct DosInfo *)BADDR(((struct RootNode *)
			(DOSBase->dl_Root))->rn_Info))->di_NetHand);
    while (list) {
     if(CheckSignal(SIGBREAKF_CTRL_C)) {
	    PrintFault(304,0);
	    break;
     }
     memcpy(namespace,list->seg_Name+1,(UBYTE)list->seg_Name[0]);
     namespace[(UBYTE)list->seg_Name[0]]=0;

     if(list->seg_UC==CMD_DISABLED)Fault(STR_TH_DISABLED,NULL,buffer,44);
     else if(list->seg_UC<=CMD_BUILTIN)Fault(STR_TH_INTERNAL,NULL,buffer,44);
     else if(list->seg_UC >= 0)strcpy(buffer,"%TH %I4\n");
     else Fault(STR_TH_SYSTEM,NULL,buffer,44); /* must be system */
     if((list->seg_UC != -1) || opts[OPT_SYSTEM])
	     writef(DOSBase,buffer,namespace,list->seg_UC-1);
     list = (struct Segment *)BADDR(list->seg_Next);
    }
    Permit();
   }
errorExit:
  FreeArgs(rdargs);
    if(rc) {
        if(rc > 1)PrintFault(res,NULL);
        SetIoErr(res);
    }
  }
  CloseLibrary(UtilityBase);
  CloseLibrary((struct Library *)DOSBase);
#ifdef ram
}
else {OPENFAIL;}
#endif
return(rc);
}

int testpure(DOSBase,file,force)
struct DosLibrary *DOSBase;
UBYTE *file;
LONG force;
{
   struct FileInfoBlock __aligned exinfo;
   LONG res = -1;
   BPTR lock;

       if(lock=Lock(file,ACCESS_READ)) {
           if(res = Examine(lock,&exinfo)) {
	       if (exinfo.fib_DirEntryType > 0)res = 0; /* no directories */
	       else if (force || (exinfo.fib_Protection & FIBF_PURE))res=TRUE;
               else res =  0;	/* plain file */
               UnLock(lock);
	   }
       }
       return(res); /* no file found */
}
@


1.30
log
@uses the new universal getargs routine to save space
@
text
@d1 7
@


1.29
log
@dosbase call cleanup
uses aligned keyword to put exinfo on stack
@
text
@d6 1
d36 1
a36 1
/* if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a37 2
  UtilityBase=OpenLibrary("utility.library",0);

a38 1
  memset((char *)namespace, 0, 255);
d40 3
a42 1
  if (rdargs == NULL) res=IoErr();
d44 5
a48 1
	rc = RETURN_OK;
d177 4
d182 2
a183 7
 if(rc) {
    if(rc > 1)PrintFault(res,NULL);
    SetIoErr(res);
 }

 CloseLibrary(UtilityBase);
 CloseLibrary((struct Library *)DOSBase);
@


1.28
log
@cleaned up the subroutine call with dosbase
@
text
@d193 1
a193 1
   struct FileInfoBlock *exinfo;
d196 5
a200 10
   
   exinfo = AllocMem(sizeof(struct FileInfoBlock),MEMF_PUBLIC|MEMF_CLEAR);
   if(exinfo) {
       lock=Lock(file,ACCESS_READ);
   
       if (lock) {
           res = Examine(lock,exinfo);
      	   if (res) {
	       if (exinfo->fib_DirEntryType > 0) res = 0;	/* no directories */
	       else if (force || (exinfo->fib_Protection & FIBF_PURE))res =  TRUE;
a204 1
       FreeMem(exinfo,sizeof(struct FileInfoBlock));
a205 1
   }
@


1.27
log
@no longer prints an error message when an attempt to replace
resident and CLI are made, so 1.3 boot disks boot cleaner.
@
text
@d188 2
a189 2
int testpure(db,file,force)
struct DosLibrary *db;
a192 4
   struct DosLibrary *DOSBase=db;
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
@


1.26
log
@checked error message problem
/
@
text
@a20 3
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
d22 1
a22 1
   LONG res= NULL;
a96 5
		if(opts[OPT_SYSTEM])count = -1;
#if 0
	        if(!Stricmp(name,"resident"))name="ext.Resident";
	        if(!Stricmp(name,"CLI"))name="ext.CLI";
#endif
d98 2
a99 2
		    rc=RETURN_WARN;
		    res=212;
d102 3
a104 2
	           if(!AddSegment(name, code, count)) {
           	    	UnLoadSeg(code);
d110 1
a110 1
		}
d146 1
a146 1
}
d175 1
a175 1
    PrintFault(res,NULL);
d178 1
@


1.25
log
@restored the ability to reenable disabled internal commands
@
text
@d94 1
d96 1
a96 1
		else res=205; /* object not found */
@


1.24
log
@registered parameter switch to save space
@
text
@d89 3
a91 3
   else if (file && (opts[OPT_ADD] || (oldseg->seg_UC < 0)) ||
		((opts[OPT_REPLACE]==0) && oldseg->seg_UC > 1)) {

d116 1
a116 1
    }
d131 1
d152 1
a152 1
   }
d177 1
@


1.23
log
@fixed resident printing to print system for system segments
@
text
@d21 1
d23 1
d197 1
d199 1
@


1.22
log
@moved strings into dos
@
text
@d167 3
a169 3
     else if(opts[OPT_SYSTEM])Fault(STR_TH_SYSTEM,NULL,buffer,44);

     writef(DOSBase,buffer,namespace,list->seg_UC-1);
@


1.21
log
@switched to utility library string functions
just use one printfault call
@
text
@d6 1
d34 1
d151 2
a152 1
    writef(DOSBase,"%TH USE COUNT\n\n","NAME");
d164 4
a167 2
     if(list->seg_UC==CMD_DISABLED)
		writef(DOSBase,"%TH DISABLED\n",namespace);
d169 1
a169 6
     else if(list->seg_UC<=CMD_BUILTIN)
		writef(DOSBase,"%TH INTERNAL\n",namespace);
     else if(list->seg_UC >= 0)
         	writef(DOSBase,"%TH %I4\n",namespace,list->seg_UC-1);
     else if(opts[OPT_SYSTEM])
		writef(DOSBase,"%TH SYSTEM\n",namespace);
@


1.20
log
@switched to Utility library string routines
@
text
@d22 1
d41 1
a41 1
  if (rdargs == NULL) PrintFault(IoErr(), NULL);
d70 1
a70 1
			PrintFault(202,NULL); /* object in use */
d75 1
a75 1
			    PrintFault(IoErr(),NULL);
d80 1
a80 1
		    PrintFault(205,0); /* object not found */
d90 2
a91 2
		if(!pc)PrintFault(212,0); /* object not pure */
		else PrintFault(205,0); /* object not found */
d100 1
a100 1
	        if(!Stricmp(name,"resident") || !Stricmp(name,"CLI"))
d102 2
d107 1
a107 1
		  	PrintFault(IoErr(),NULL);
d118 1
a118 1
		    PrintFault(205,0); /* object not found */
d122 1
a122 1
		    PrintFault(202,0); /* object in use */
d129 1
a129 1
		    PrintFault(222,0); /* object protected from deletion */
d136 2
a137 2
			if(pc==0)PrintFault(212,0); /* object not pure */
			else PrintFault(205,0); /* object not found */
d176 6
a181 2
CloseLibrary(UtilityBase);
CloseLibrary((struct Library *)DOSBase);
@


1.19
log
@now uses Fault for its strings
@
text
@d19 1
d35 2
d95 13
a107 7
	        if(!stricmp(name,"resident"))name="ext.Resident";
	        if(!stricmp(name,"CLI"))name="ext.CLI";
	       if(!AddSegment(name, code, count)) {
           	  UnLoadSeg(code);
		  PrintFault(IoErr(),NULL); /* or could use 103, no memory */
		 rc = RETURN_ERROR;
	       }
d173 1
@


1.18
log
@now with limit check on size of named entered
@
text
@d66 1
a66 1
			PrintFault(202,"Cannot remove: "); /* object in use */
d71 1
a71 1
		            writef(DOSBase,"Cannot remove %s\n", name );
d96 1
a96 1
           	  writef(DOSBase,"Couldn't add %s\n",name);
@


1.17
log
@removed doslibrary open test to save space
@
text
@d4 1
d23 3
a25 3
   UBYTE namespace[80];
   UBYTE *name;
   UBYTE *file;
a27 1
   char string[40];
d35 1
d42 2
a43 2
	      name = namespace;
	      strcpy(namespace,FilePart(file));
d47 2
a48 2
	      name = namespace;
	      strcpy(namespace,FilePart(file));
d146 2
a147 2
     memcpy(string,list->seg_Name+1,(UBYTE)list->seg_Name[0]);
     string[(UBYTE)list->seg_Name[0]]=0;
d150 1
a150 1
		writef(DOSBase,"%TH DISABLED\n",string);
d153 1
a153 1
		writef(DOSBase,"%TH INTERNAL\n",string);
d155 1
a155 1
         	writef(DOSBase,"%TH %I4\n",string,list->seg_UC-1);
d157 1
a157 1
		writef(DOSBase,"%TH SYSTEM\n",string);
a199 32

#ifdef RemSegBroke

myRemSegment (db,segment)
struct DosLibrary *db;
struct Segment *segment;
{ 
        struct Segment *list;
        LONG rc = FALSE;
	struct DosLibrary *DOSBase=db;

        Forbid();
        if ((segment->seg_UC < 0) || (segment->seg_UC > 1))
                goto done;

    for ( list=(struct Segment *)BADDR(((struct DosInfo *)
	BADDR(((struct RootNode *)(DOSBase->dl_Root))->rn_Info))->di_NetHand);
             list;
             list = (struct Segment *)BADDR(list->seg_Next)) {
                if (((LONG) BADDR(list->seg_Next)) == ((LONG) segment)) {
                        list->seg_Next = segment->seg_Next;
                        UnLoadSeg(segment->seg_Seg);
                        FreeVec(segment);
                        rc = DOSTRUE;
                        goto done;
                }
        }
done:
        Permit();
        return rc;
}
#endif
@


1.16
log
@fixed tests for builtin commands
so won't try to remove/replace them
@
text
@d32 2
a33 1
if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d164 1
d166 2
a167 1
else {OPENFAIL}
@


1.15
log
@fixed up incorrect error message when replacing a file
@
text
@d19 1
a19 2
   struct Global *gv;
   int rc=RETURN_OK;
d33 5
a37 9
 gv=AllocMem(sizeof(struct Global),MEMF_PUBLIC|MEMF_CLEAR);
 if(gv) {
	gv->DOSBase = DOSBase;

   	memset((char *)opts, 0, sizeof(opts));
 	rdargs = ReadArgs(TEMPLATE, opts, NULL);
 	if (rdargs == NULL) PrintFault(IoErr(), NULL);
 	else {

d56 1
a56 1
	    oldseg = searchsegs(gv,name,0);
d69 1
a69 1
		            writef(gv,"Cannot remove %s\n", name );
d78 2
a79 2
   /* we add if we get an add or an attempt on a builtin */
   else if (file && (opts[OPT_ADD] || (oldseg->seg_UC == CMD_BUILTIN)) ||
d82 1
a82 1
           if((pc=testpure(gv,file,opts[OPT_PURE]))>0)code=LoadSeg(file);
d94 1
a94 1
           	  writef(gv,"Couldn't add %s\n",name);
d120 1
a120 1
                if((pc=testpure(gv,file,opts[OPT_PURE]))>0)code=LoadSeg(file);
d135 1
a135 1
    writef(gv,"%TH USE COUNT\n\n","NAME");
d144 1
a144 1
     strncpy(string,list->seg_Name+1,(UBYTE)list->seg_Name[0]);
d148 1
a148 1
		writef(gv,"%TH DISABLED\n",string);
d151 1
a151 1
		writef(gv,"%TH INTERNAL\n",string);
d153 1
a153 1
         	writef(gv,"%TH %I4\n",string,list->seg_UC-1);
d155 1
a155 1
		writef (gv,"%TH SYSTEM\n",string);
d160 2
a161 4
 }
 if(rdargs)FreeArgs(rdargs);
 FreeMem(gv,sizeof(struct Global));
 }
d168 2
a169 2
int testpure(gv,file,force)
struct Global *gv;
d173 2
a174 1
   struct DosLibrary *DOSBase;
d176 1
a176 1
   LONG res;
d178 4
a181 5

   DOSBase=gv->DOSBase;
   exinfo = &(gv->ExInfo);

   lock=Lock(file,ACCESS_READ);
d183 11
a193 9
   if (lock) {
      res = Examine(lock,exinfo);
      if (res) {
	if (exinfo->fib_DirEntryType > 0) res = 0;	/* no directories */
	else if (force || (exinfo->fib_Protection & FIBF_PURE))res =  TRUE;
        else res =  0;	/* plain file */
      UnLock(lock);
      }
   return(res);
a194 1
   return(-1); /* no file found */
d199 2
a200 2
myRemSegment (gv,segment)
struct Global *gv;
d205 1
a205 1
	struct DosLibrary *DOSBase=gv->DOSBase;
@


1.14
log
@correctly handles printing of the bstrings found on the resident list
@
text
@d112 1
a112 1
                else if (oldseg->seg_UC > 0) {
d120 1
a120 1
		    PrintFault(222,0); /* object in use */
d128 1
a128 1
			else PrintFault(212,0); /* object not found */
@


1.13
log
@changed error message of impure files to correct one.
added header for listing
@
text
@d28 1
d149 3
d153 1
a153 1
		writef(gv,"%TH DISABLED\n",list->seg_Name+1);
d156 1
a156 1
		writef(gv,"%TH INTERNAL\n",list->seg_Name+1);
d158 1
a158 1
         	writef(gv,"%TH %I4\n",list->seg_Name+1,list->seg_UC-1);
d160 1
a160 1
		writef (gv,"%TH SYSTEM\n",list->seg_Name+1);
@


1.12
log
@fixed stack overflow guru
@
text
@d5 1
a5 1
#define TEMPLATE    "NAME,FILE,REMOVE/S,ADD/S,REPLACE/S,PURE/S,SYSTEM/S"
d30 1
d86 1
a86 1
           if(opts[OPT_PURE]||(testpure(gv,file,FALSE)))code=LoadSeg(file);
d88 2
a89 1
		PrintFault(205,0); /* object not found */
d124 1
a124 2
                if (opts[OPT_PURE]||(testpure(gv,file,FALSE))) {
		    code=LoadSeg(file);
d126 2
a127 1
			PrintFault(205,0); /* object not found */
a135 1
	    }
d139 1
d171 1
a171 1
int testpure(gv,file,qflag)
d173 2
a174 1
UBYTE *file, qflag;
d190 1
a190 1
	else if (exinfo->fib_Protection & FIBF_PURE) res =  TRUE;
d196 1
@


1.11
log
@
@
text
@d19 1
a19 1
   struct Global gv;
d31 4
a34 2
 if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
	gv.DOSBase = DOSBase;
d36 4
a39 4
 memset((char *)opts, 0, sizeof(opts));
 rdargs = ReadArgs(TEMPLATE, opts, NULL);
 if (rdargs == NULL) PrintFault(IoErr(), NULL);
 else {
d41 14
a54 14
   if ((!opts[OPT_FILE]) && (opts[OPT_NAME])) { /* no file name ? */
      file = (UBYTE *)opts[OPT_NAME]; /* make up one */
      name = namespace;
      strcpy(namespace,FilePart(file));
   }
   else if ((opts[OPT_FILE]) && (!opts[OPT_NAME])) { /* no name ? */
      file = (UBYTE *)opts[OPT_FILE]; /* make up one */
      name = namespace;
      strcpy(namespace,FilePart(file));
   }
   else {
      name = (UBYTE *)opts[OPT_NAME];
      file = (UBYTE *)opts[OPT_FILE];
   }
d56 2
a57 2
   if (name) {
    /* we have the name, now do the action */
d59 16
a74 15
    oldseg = FindSegment(name,0,0); /* don't look at system segments */

    if ( opts[OPT_REMOVE]) {
	if(oldseg) {
	    if(oldseg->seg_UC <= CMD_BUILTIN) { /* if internal, disable the command */
		oldseg->seg_UC = CMD_DISABLED;
	    }
	    else if(oldseg->seg_UC < 0) { /* internal segment */
		rc = RETURN_WARN; /* it might not have been internal before */
		PrintFault(202,"Cannot remove: "); /* object in use */
	    }
	    else {
		if(!RemSegment(oldseg)) {
		    rc = RETURN_WARN; /* should be error */
	            writef(&gv,"Cannot remove %s\n", name );
d76 4
a80 6
	}
        else {
	    PrintFault(205,0); /* object not found */
	    rc = RETURN_WARN;
	 }
    }
d85 1
a85 1
           if(opts[OPT_PURE]||(testpure(&gv,file,FALSE)))code=LoadSeg(file);
a93 1

d96 1
a96 1
           	  writef(&gv,"Couldn't add %s\n",name);
d122 1
a122 1
                if (opts[OPT_PURE]||(testpure(&gv,file,FALSE))) {
d147 1
a147 1
		writef(&gv,"%TH DISABLED\n",list->seg_Name+1);
d150 1
a150 1
		writef(&gv,"%TH INTERNAL\n",list->seg_Name+1);
d152 1
a152 1
         	writef(&gv,"%TH %I4\n",list->seg_Name+1,list->seg_UC-1);
d154 1
a154 1
		writef (&gv,"%TH SYSTEM\n",list->seg_Name+1);
a158 1
   FreeArgs(rdargs);
d160 4
a163 1
 CloseLibrary((struct Library *)DOSBase);
d179 1
a179 1
   exinfo = &gv->ExInfo;
@


1.10
log
@adds, removes properly
doesn't add bad commands to list
won't let CLI or resident on list, under that name
@
text
@d18 1
d37 1
a38 1

d64 2
a65 2
	    else if(oldseg->seg_UC <=0) {
		rc = RETURN_ERROR;
d68 5
a72 3
	    else if(!RemSegment(oldseg)) {
		rc = RETURN_ERROR;
	        writef(&gv,"Cannot remove %s\n", name );
d74 2
a75 2
         }
         else {
d87 1
a87 1
		rc =RETURN_ERROR;
d116 1
a116 1
                else if (oldseg->seg_UC <= 0) { /* is it an internal ? */
d126 1
a126 1
	                rc= RETURN_ERROR;
a159 1
   CloseLibrary((struct Library *)DOSBase);
d161 4
a164 2
 else {OPENFAIL}
 return(rc);
@


1.9
log
@now resident won't allow its name to be used on the resident list
(for 1.3 compatibility)
@
text
@d65 1
a65 1
		PrintFault(202,0); /* object in use */
a80 2


d89 1
d139 4
d188 32
@


1.8
log
@removed CMDREV header
@
text
@d80 3
d90 1
@


1.7
log
@switched to a negative value (-2) for internal commands
Fixed up the logic so add, replace, etc work.
Added ability to disable  and enable internal commands
via the REMOVE and REPLACE keywords (since those were
not useful for internal command anyway)
@
text
@@


1.6
log
@changed cannot remove error message
@
text
@a24 1
   struct Segment *seg;
d38 2
a39 2
   if ((!opts[OPT_FILE]) && ( opts[OPT_NAME])) {
      file = (UBYTE *)opts[OPT_NAME];
d43 5
d52 12
a63 3
   if ( opts[OPT_REMOVE] && name ) {
	if(seg=FindSegment(name,0,0)) {
	    if(!RemSegment(seg)) {
d65 4
d73 1
a73 1
      	    writef(&gv,"Cannot find %s\n", name );
d76 11
a86 1
   }
d88 8
a95 7
   else if (!opts[OPT_ADD] && name && file) {	/* replace operation */
	    /* trying to add a segment */
	    oldseg = FindSegment(name,0,0);
      	    if(!oldseg && opts[OPT_REPLACE]) {	/* they only want a replace */
         	writef (&gv,"Cannot find resident %s\n", name );
	 	rc=RETURN_WARN;
	    }
d97 8
a104 8
            else if ((oldseg->seg_UC > 1 && oldseg->seg_UC < CMD_BUILTIN)) {
               writef(&gv,"Cannot replace %s: Object in use\n", name );
	       rc= RETURN_ERROR;
	    }
            else if (opts[OPT_PURE]||(testpure(&gv,file,FALSE))) {
		code=LoadSeg(file);
            	if(!code) {
		    writef(&gv,"Cannot load %s\n", file );
d106 3
d110 4
d115 6
a120 13
	    if (rc==RETURN_OK) {	/* ready for the replace */
		if (!oldseg->seg_UC || (oldseg->seg_UC == 1)) {
		    UnLoadSeg(oldseg->seg_Seg);	/* do the replace */
            	    oldseg->seg_UC = oldseg->seg_UC;
	    	    oldseg->seg_Seg = code;
		}
		/* system segments can only be added, never replaced */
	       	else {
		    count = (oldseg->seg_UC >= CMD_BUILTIN) ? 1 : -1;
		    if(!AddSegment(name, code, count)) {
           		UnLoadSeg(code);
           		writef(&gv,"Failed to add entry resident list\n");
			rc = RETURN_ERROR;
d122 5
d129 1
a130 12
   else if (opts[OPT_ADD] && name && file) {	/* add operation */
           if(opts[OPT_PURE]||(testpure(&gv,file,FALSE)))code=LoadSeg(file);
   	   if(!code)writef(&gv,"Cannot load %S\n", file);

	   if(opts[OPT_SYSTEM])count = -1;

	   if(!AddSegment(name, code, count)) {
           	UnLoadSeg(code);
           	writef(&gv,"Failed to add entry to segment chain\n");
		rc = RETURN_ERROR;
	   }
   }
d136 4
a139 1
     if(list->seg_UC>=CMD_BUILTIN)
@


1.5
log
@fixed resident remove command
@
text
@d52 1
a52 1
	        writef(&gv,"Cannot remove %s: Object in use\n", name );
@


1.4
log
@checked remove cod
@
text
@d23 4
a26 4
   UBYTE *name = 0;
   UBYTE *file = 0;
   struct Segment *seg=0;
   struct Segment *oldseg=0;
d49 5
a53 3
	if(!(seg=FindSegment(name,0,0))) {
	    if((seg->seg_UC == 0) || (seg->seg_UC == 1))RemSegment(seg);
	    rc = RETURN_OK;
d56 1
a56 1
      	    writef(&gv,"Cannot remove %s\n", name );
d70 1
a70 1
               writef(&gv,"Cannot remove %s: Object in use\n", name );
d137 1
a137 1
   LONG res = 0;
@


1.3
log
@
@
text
@d50 1
a50 1
	    if(seg->seg_UC == 0)RemSegment(seg);
d54 1
a54 1
      	    writef(&gv,"Cannot find %s\n", name );
d86 1
a86 1
		    count = (oldseg->seg_UC >= CMD_BUILTIN) ? 1 : -1
@


1.2
log
@Changed BUILTIN flag to 9999
fixed replace code
@
text
@d42 1
a42 1
      strcpy(namespace,FileName(file));
@


1.1
log
@built into shell
@
text
@d19 1
a19 1
   int rc=RETURN_FAIL;
d60 1
a60 1

d62 1
a62 1
      	    if(opts[OPT_REPLACE]) {	/* they only want a replace */
d66 2
a67 1
            else if (oldseg->seg_UC > 1) {
d73 4
d78 15
a92 3
            if(!code) {
		writef(&gv,"Cannot load %s\n", file );
	        rc= RETURN_ERROR;
a93 7
	    if (!oldseg->seg_UC || (oldseg->seg_UC == 1)) {
		UnLoadSeg(oldseg->seg_Seg);	/* do the replace */
            	oldseg->seg_UC = oldseg->seg_UC;
	    	oldseg->seg_Seg = code;
            	rc = RETURN_OK;
	    }
	    else opts[OPT_ADD]=TRUE ; /* can't replace system segments */
d96 1
a96 3
           if(opts[OPT_PURE]||(testpure(&gv,file,FALSE))) {
		code=LoadSeg(file);
	   }
d112 7
a118 5
         if(list->seg_UC >= 0)
            	writef(&gv,"%s\t\t\t%I3\n",list->seg_Name+1,list->seg_UC -1);
	 else if(list->seg_UC==-2)writef(&gv,"%s\t\t\tINTERNAL\n",list->seg_Name+1);
	 else if (opts[OPT_SYSTEM])writef (&gv,"%s\t\t\tSYSTEM\n",list->seg_Name+1);
	 list = (struct Segment *)BADDR(list->seg_Next);
a120 1
    rc = RETURN_OK;
d122 2
d126 1
a126 1
return(rc);
@


1.0
log
@added to rcs
@
text
@@
