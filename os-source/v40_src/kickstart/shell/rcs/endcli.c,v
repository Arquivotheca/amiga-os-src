head     1.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.15
date     91.04.10.19.49.29;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.04.06.18.32.33;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.25.22.40.11;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.25.22.20.38;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.10.20.35.50;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.06.11.14.46.12;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.05.31.18.25.29;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.04.07.03.01.02;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.07.00.11.28;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.19.05.35.40;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.04.23.19.14;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.02.21.10.12;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     89.12.15.07.47.43;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.10.23.19.53;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.47.59;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.09.06.43.59;  author andy;  state Exp;
branches ;
next     ;


desc
@Built in endcli command
@


1.15
log
@uses the new universal getargs routine to save space
@
text
@#include <exec/types.h>

#include <string.h>
#include "internal/commands.h"
#include "global.h"
#include "libhdr.h"

#define SMALL 1

#define TEMPLATE    ""
#define OPT_COUNT   1

int cmd_endcli(void)
{
   struct DosLibrary *DOSBase;
   int rc = RETURN_ERROR;
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   struct Segment *seg;

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL)PrintFault(IoErr(), NULL);
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
	rc=RETURN_OK;
	do_end(DOSBase);
        Forbid();
        seg = searchsegs(DOSBase,"CLI",NULL);
        if(seg && seg->seg_UC > 0)seg->seg_UC--;
        Permit();
        FreeArgs(rdargs);
      }
   CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else { OPENFAIL }
#endif
   return(rc);
}

void do_end(DOSBase)
struct DosLibrary *DOSBase;
{
struct FileHandle *fh;
struct CommandLineInterface *clip;
char buffer[48];

        clip = Cli();
        fh = (struct FileHandle *)BADDR(clip->cli_StandardInput);
	fh->fh_End = 0;

      	if (clip->cli_CurrentInput != clip->cli_StandardInput) {
	    Close(clip->cli_CurrentInput);
            clip->cli_CurrentInput = clip->cli_StandardInput;
	}

        clip->cli_Background = DOS_TRUE;
        if(clip->cli_Interactive)
		if(Fault(STR_PROCESS_ENDING,NULL,buffer,44))
		      writef(DOSBase,buffer,THISPROC->pr_TaskNum);
}
@


1.14
log
@DOSBase call cleanup
@
text
@a2 10
#if 0
#include <exec/nodes.h>
#include <dos/dosextens.h>
#include <dos/dos.h>
#include <clib/dos_protos.h>
#include <stdio.h>
#include "cli_init.h"
#endif


d8 2
d21 1
a21 1
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a24 1

d27 3
@


1.13
log
@changed return code to match 1.3
@
text
@a23 1
   struct Library *SysBase = (*((struct Library **) 4));
d52 2
a53 2
void do_end(db)
struct DosLibrary *db;
a54 1
struct DosLibrary *DOSBase =db;
@


1.12
log
@registered parameter switch to save space
@
text
@d25 1
a25 1
   int rc = RETURN_FAIL;
@


1.11
log
@moved strings into dos
@
text
@d2 2
a7 1

d9 2
a10 1
#include <string.h>
a11 2
#include "libhdr.h"
#include "cli_init.h"
d13 1
d16 1
a19 2

void do_end();
@


1.10
log
@removed doslibrary open test to save space
@
text
@d59 1
d72 2
a73 1
		writef(DOSBase,"Process %N ending\n",THISPROC->pr_TaskNum);
@


1.9
log
@cut down of stack usage of doend
@
text
@d30 2
a31 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d46 1
d49 1
@


1.8
log
@fixed stack overflow guru
@
text
@a28 1
   struct Global *gv;
a30 3
      gv=AllocMem(sizeof(struct Global),MEMF_PUBLIC|MEMF_CLEAR);
     if(gv) {
      gv->DOSBase = DOSBase;
d37 1
a37 1
	do_end(gv);
d39 1
a39 1
        seg = searchsegs(gv,"CLI",NULL);
a43 2
      FreeMem(gv,sizeof(struct Global));
     }
d50 2
a51 3
void do_end(gv)
struct Global *gv;

d53 1
a53 2
struct DosLibrary *DOSBase =gv->DOSBase;
struct Library *SysBase = (*((struct Library **) 4));
a55 1
long tasknum;
a58 1
        tasknum = ((struct Process *)FindTask(0))->pr_TaskNum;
d60 1
d65 1
d67 2
a68 1
        if(clip->cli_Interactive)writef(gv,"Process %N ending\n",tasknum);
@


1.7
log
@*** empty log message ***
@
text
@d29 1
a29 1
   struct Global gv;
d32 3
a34 1
      gv.DOSBase = DOSBase;
d41 1
a41 1
	do_end(&gv);
d43 1
a43 1
        seg = searchsegs(&gv,"CLI",NULL);
d48 2
@


1.6
log
@checkin
@
text
@d24 1
a32 1

d38 1
d41 1
a41 1
        seg = searchsegs(&gv,"CLI");
d57 1
@


1.5
log
@removed CMDREV header
@
text
@d5 1
a27 3
   struct CommandLineInterface *clip;
   LONG tasknum;

d32 1
a32 2
      tasknum = ((struct Process *)FindTask(0))->pr_TaskNum;
      clip = Cli();
d38 1
a38 2
	do_end(&gv,clip);
        if(clip->cli_Interactive)writef(&gv,"Process %N ending\n",tasknum);
d51 1
a51 1
void do_end(gv,clip)
d53 1
a53 1
struct CommandLineInterface *clip;
a54 1
struct FileHandle *fh = (struct FileHandle *)BADDR(clip->cli_StandardInput);
d56 3
d60 3
d69 1
a69 1

@


1.4
log
@removed some dead code
@
text
@@


1.3
log
@fixed close bug
@
text
@d18 2
d29 1
a29 1
   struct FileHandle *fh;
d41 1
a41 8
	fh = (struct FileHandle *)BADDR(clip->cli_StandardInput);
	fh->fh_End = 0;

      	if (clip->cli_CurrentInput != clip->cli_StandardInput) {
	    Close(clip->cli_CurrentInput);
            clip->cli_CurrentInput = clip->cli_StandardInput;
	}
        clip->cli_Background = DOS_TRUE;
d53 16
@


1.2
log
@*** empty log message ***
@
text
@d47 1
a47 1
        if(clip->cli_Interactive)writef(&gv,"CLI process %N ending*N",tasknum);
@


1.1
log
@built into shell
@
text
@@


1.0
log
@added to rcs
@
text
@@
