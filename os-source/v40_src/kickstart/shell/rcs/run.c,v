head     1.17;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.17
date     91.04.23.20.31.43;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     91.04.10.19.48.10;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.25.22.24.12;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.11.20.30.22;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.10.20.37.34;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.10.20.36.27;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.12.17.21.59.17;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.21.17.46.05;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.20.21.42.54;  author Unknown;  state Exp;
branches ;
next     1.8;

1.8
date     90.06.18.21.59.02;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.06.13.18.30.51;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.11.14.43.33;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.05.31.18.23.13;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.07.00.12.01;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.19.17.20.14;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.19.05.36.24;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.23.17.04;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     90.03.02.20.55.11;  author andy;  state Exp;
branches ;
next     ;


desc
@first pass at c version of run
@


1.17
log
@*** empty log message ***
@
text
@;/*
lc -O -M -d -j73 -orun.o -iV:include -iV:inc.lattice -v -csf run
blink run.o to run.ld LIB LIB:amiga.lib lib:debug.lib sc sd nd
protect run.ld +p
quit
*/

/*
 * 		RUN command			*
 *						*
 *						*/

#include <exec/types.h>
#include <exec/io.h>
#include <exec/memory.h>
#include <exec/execbase.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/dostags.h>
#include <utility/tagitem.h>

#include <string.h>

#include "libhdr.h"
#include "cli_init.h"


#include "internal/commands.h"
#include "global.h"

#define TOBPTR(x)	(((LONG) (x)) >> 2)

/*
#define BUFFER(fh)	((UBYTE *) BADDR((fh)->fh_Buf))
#define TOBUFFER(buf)	(TOBPTR(buf))
*/

#define TEMPLATE    "COMMAND/F"
#define OPT_COM  0
#define OPT_COUNT   1

#define SMALL 1

int cmd_run(void)
{
        struct DosLibrary *DOSBase;
	long opts[OPT_COUNT];
        struct RDargs *rdargs;
	long rc=RETURN_ERROR;
	struct FileHandle *cvec;
	char *svec;
	char *command;
	struct FileHandle *fh;
	long len;
	struct TagItem stags[] = {
	    SYS_Input, NULL,
	    SYS_Output, NULL,
	    SYS_UserShell,TRUE,
	    TAG_DONE,};

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL) {
         PrintFault(IoErr(), NULL);
	 goto err;
      }
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif

/*
won't work because of the newlines
        command=(char *)opts[OPT_COM];
        if(opts[OPT_COM])len=strlen(command);
*/
	/* get length and ptr to command - not null-terminated! */
	fh = (void *) BADDR((BPTR)(Input()));
	len = fh->fh_End;
	command = (char *) BADDR(fh->fh_Buf);

	/* Create a suitable SCB */
 	cvec = (struct FileHandle * )
	    AllocVec(sizeof(struct FileHandle)+len+8,MEMF_PUBLIC|MEMF_CLEAR);
	if (!cvec)goto err;


	svec= (char *) ((long) cvec) +sizeof(struct FileHandle);
	memcpy(svec,command,len);
	svec[len] = '\n'; /* terminate with a \n */

	/* this is to provide the characters passed */

/*	we allocated the cvec clear... */

	cvec->fh_Buf = TOBPTR(svec);
	cvec->fh_End = len+1;

	/* call System to do the RUN */
	stags[0].ti_Data=TOBPTR(cvec);
	stags[1].ti_Data=Output();
	if((rc=System(NULL,stags)) == -1)rc=RETURN_ERROR;
      }
err:;
	if (rdargs) FreeArgs(rdargs);
        CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else {OPENFAIL;}
#endif
   return rc;
}

@


1.16
log
@uses the new universal getargs routine to save space
@
text
@d1 7
@


1.15
log
@registered parameter switch to save space
@
text
@d35 2
a39 3
/*
        struct Library *SysBase = (*((struct Library **) 4));
*/
d54 1
a54 1
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
a57 1

d62 4
a71 1

d94 1
a94 3
        /* call execute to do the run */
/*	rc=Execute(NULL,TOBPTR(cvec),Output()); */

d98 1
@


1.14
log
@return code change because of new system call
@
text
@a23 8
#include "clib/exec_protos.h"
#include "clib/dos_protos.h"
#include "pragmas/dos_pragmas.h"

#include "proto/intuition.h"

extern void CtoBstr();

d38 1
d40 1
d43 1
a43 1
	long rc=RETURN_FAIL;
d98 1
a98 1
	if((rc=System(NULL,stags)) == -1)rc=RETURN_FAIL;
@


1.13
log
@switched to using System NULL for special run trigger
@
text
@d104 1
a104 3
	rc=System(NULL,stags);

	rc = (rc == -1) ? 0 : RETURN_FAIL;
@


1.12
log
@moved strings into dos
@
text
@d95 1
@


1.11
log
@Made the switch to using DOS Execute() because we need
the space
@
text
@d13 1
d55 5
d94 1
a94 8
/*	we allocated it clear...
	cvec->fh_Link = 0;
	cvec->fh_Port = 0;
	cvec->fh_Type = 0;
	cvec->fh_Pos = 0;
	cvec->fh_Func1 = 0;
	cvec->fh_Func3 = 0;
*/
d99 6
a104 1
	rc=Execute(NULL,TOBPTR(cvec),Output());
@


1.10
log
@removed a comment
@
text
@a46 1
	long tnum[1];
a48 4
	struct Process   *task;
	struct Process   *tid;
	struct Segment *shellseg;
	struct DosPacket *pkt;
a51 2
	BPTR instr;
	BPTR outstr;
a54 17
	struct TagItem tags[] = {
	    { NP_Seglist,(LONG) NULL},
	    { NP_StackSize, 4000},
	    { NP_Cli, TRUE },
	    { NP_Path, TRUE },
	    { NP_CopyVars , TRUE },
	    { NP_HomeDir, NULL},
	    { NP_Input, NULL},
	    { NP_Output, NULL},
	    { NP_CurrentDir, NULL},
	    { NP_CloseInput, FALSE},
	    { NP_CloseOutput, FALSE},
	    { NP_FreeSeglist, FALSE },
	    { NP_Name,(LONG) "Background Process" },
	    
	    TAG_DONE,NULL};

a64 8
	instr = Input();
	outstr = Output();

	tid = THISPROC;
	if (tid->pr_StackSize > 4000)tags[1].ti_Data = tid->pr_StackSize;
	if(!(shellseg = FindSegment("SHELL",0,TRUE)))goto err;
	tags[0].ti_Data = shellseg->seg_Seg;

d70 1
d72 1
a72 1
	fh = (void *) BADDR(instr);
d99 3
a101 32
        task=CreateNewProc(tags);

	if (!task) {
		VPrintf("Unable to create new process\n",opts);
		goto err;
	}

	pkt=(struct DosPacket *)AllocDosObject(DOS_STDPKT, NULL);

        if (pkt) {
	    pkt->dp_Type = -1; /* run */
/*	already clear from alloc
	    pkt->dp_Res1 = 0;
	    pkt->dp_Res2 = 0;
	    pkt->dp_Arg5 = 0;
	    pkt->dp_Arg6 = 0;
*/
	    pkt->dp_Arg1 = tid->pr_CLI;
	    pkt->dp_Arg2 = instr;
	    pkt->dp_Arg3 = outstr;
	    pkt->dp_Arg4 = TOBPTR(cvec);
	    pkt->dp_Arg5 = (!tid->pr_CLI) ? NULL: DupLock(tid->pr_CurrentDir);
	    Forbid();	/* get the process number of the new task */
	    tnum[0]=task->pr_TaskNum;
	    Permit();
            VPrintf("[CLI %ld]\n",tnum);
	    SendPkt(pkt,&(task->pr_MsgPort),&(tid->pr_MsgPort));
  	    WaitPkt();
	    rc=RETURN_OK;
            FreeDosObject(DOS_STDPKT,pkt);
	}

@


1.9
log
@removed reference to unneeded internal dos pragma file
@
text
@a26 2
/* #include "pragmas/dos_private_pragmas.h" */

@


1.8
log
@does a DUPLOCK for currentdir
@
text
@d26 3
a28 1
#include "pragmas/dos_private_pragmas.h"
@


1.7
log
@fixed memory leak
@
text
@d68 1
a68 1

d71 1
a71 1

d151 1
a151 1

@


1.6
log
@removed doslibrary open test to save space
@
text
@d67 1
d69 1
a69 1
/*	    { NP_Input, NULL},
d71 1
a71 1
*/
a74 1
	    { NP_CopyVars , TRUE},
d119 1
a122 1
	cvec->fh_Buf = TOBPTR(svec);
a123 1
	cvec->fh_End = len+1;
d126 3
a128 1

d141 1
d146 1
a146 1

a150 4
/*
	    pkt->dp_Arg5 = (tid->pr_CLI == NULL) ? NULL : 
			DupLock(tid->pr_CurrentDir);
*/
d159 1
a159 1
            FreeDosObject(pkt,DOS_STDPKT);
@


1.5
log
@cut down stack usage
fixed problem with not getting multiple lines with +
@
text
@d79 2
a80 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {

d98 1
d167 1
a167 3
   }
   else {
      OPENFAIL;
d169 2
@


1.4
log
@
@
text
@d59 1
a60 1
	struct FileHandle *fh;
d92 1
a92 1
	tid = (struct Process *) FindTask(0);
d97 4
d106 2
a107 1
	cvec = (struct FileHandle * )
a108 1

a111 1
	/* Create a suitable SCB */
d141 3
d148 1
d151 1
a151 1
	    pkt->dp_Arg6 = 0;
@


1.3
log
@removed Duplock kludge
@
text
@d45 1
d67 2
a68 1
	    { NP_Input, NULL},
d70 1
d151 2
a152 3
  	    pkt=WaitPkt();
/*	    rc = (pkt->dp_Res1 ? 0 : 20); */
	    rc=0;
@


1.2
log
@new version using newcreateproc
@
text
@a65 1
/*
a67 2
	    { NP_CurrentDir, FALSE} ,
*/
d139 1
a139 3
	    if(tid->pr_CLI && !tid->pr_CurrentDir)
		pkt->dp_Arg5 = Lock("SYS:",ACCESS_READ);
	    else pkt->dp_Arg5 = (tid->pr_CLI == NULL) ? NULL : 
@


1.1
log
@removed CMDREV header
@
text
@d38 1
a38 1
#define TEMPLATE    "COM/F"
a41 5
struct BFH {
	struct FileHandle fh;
	BPTR string;
};

d46 2
a47 1
        struct RDargs *rdargs=0;
d51 1
a51 1
	struct Segment *cliseg;
a63 1
	    { NP_Arguments, NULL },
d66 5
d73 1
a73 1
	    { NP_FreeSeglist, (LONG) FALSE },
d79 1
a80 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
a81 1
/*
d88 1
a88 2
	tags[2].ti_Data = (long)opts[OPT_COM];
*/
a90 1
	fh = (void *) BADDR(instr);
d94 2
a95 2
	if(!(cliseg = FindSegment("SHELL",0,TRUE)))goto err;
	tags[0].ti_Data = cliseg->seg_Seg;
a96 1

d98 1
d101 1
d103 1
a103 1
	    AllocVec(sizeof(struct BFH)+len,MEMF_PUBLIC|MEMF_CLEAR);
d107 1
d109 2
a110 2
	svec= ((struct BFH *)cvec)->string;
	memcpy(svec,command,len-1);
a111 1
 	CtoBstr(svec);
d124 1
d138 1
a138 1
	    pkt->dp_Arg1 = (long)tid->pr_GlobVec;
d141 6
a146 2
	    pkt->dp_Arg4 = (tid->pr_GlobVec == 0) ? 0 : DupLock(tid->pr_CurrentDir);
	    pkt->dp_Arg5 = 0;
d148 4
d153 5
a157 1
/*  	    pkt=WaitPkt(); */
a158 5
	    rc = (pkt->dp_Res1 ? 0 : 20);
/*            FreeDosObject(pkt,DOS_STDPKT); */

	}
	VPrintf("[CLI] \n",opts);
d161 1
d168 1
@


1.0
log
@added to rcs
@
text
@@
