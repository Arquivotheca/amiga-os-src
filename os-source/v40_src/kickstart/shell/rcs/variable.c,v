head     1.21;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.21
date     91.03.25.19.19.07;  author andy;  state Exp;
branches ;
next     1.20;

1.20
date     91.03.22.11.14.00;  author andy;  state Exp;
branches ;
next     1.19;

1.19
date     91.01.25.22.17.58;  author andy;  state Exp;
branches ;
next     1.18;

1.18
date     91.01.20.17.43.48;  author andy;  state Exp;
branches ;
next     1.17;

1.17
date     90.12.31.01.57.28;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     90.12.17.21.57.23;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     90.11.28.12.57.35;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     90.11.23.17.44.11;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     90.11.20.21.38.05;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     90.06.11.14.49.26;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.06.09.20.18.57;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.05.31.18.30.41;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.04.07.03.21.33;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.04.07.00.12.31;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     90.03.05.16.53.57;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.04.23.18.15;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.02.22.37.57;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     89.12.17.03.39.16;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     89.12.15.07.49.21;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.10.23.23.39;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.49.15;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.09.06.46.34;  author andy;  state Exp;
branches ;
next     ;


desc
@variable expansion routines
@


1.21
log
@added a +1 to bracend in the } case so the } would get
included properly if the variable wasn't defined
@
text
@#include <exec/types.h>
#include <exec/memory.h>
#include <dos/dos.h>
#include <dos/var.h>
#include <string.h>
#include <stddef.h>

#include "global.h"


 /*	Expand any macros in str */

int expand(gv,to,mc)
    struct Global *gv;
    UBYTE *to;
    LONG mc;
{
    struct DosLibrary *DOSBase=gv->DOSBase;
    struct Library *UtilityBase=gv->UtilityBase;
    UBYTE *from=gv->buffer;
    UBYTE buf[40]; /* note: 32 chars is limit for variable names */
    UBYTE temp[128];
    char  *rp;
    char  *p;
    char  *q;
    char *brace;
    char *bracend;
    int maxlen = mc;
    int i,ch;
    char lastrp=0;

    if((strlen(to))>=mc)return(-1); /* too long, do nothing */

    strcpy(from, to);

    rp = from;
    p = to;

/* add * escape here */

    while (*rp) {
	if (*rp != '$') {
	    if(lastrp == '*') {
		lastrp=0; /* two stars escape into one star */
	    }
	    else lastrp=*rp;
	    *p++ = *rp++;
	    (maxlen)--;
	}
	/* it is a $ */
	else if (lastrp == '*') {
	    lastrp=0;
	    p--;	/* lose the * */
	    *p++ = *rp++;
	    (maxlen)--;
	}
	else {
	    q = buf;
	    brace = rp;
	    bracend = rp;
	    i=0;
	    if (*++rp == '{') {
		while (*++rp && *rp != '}' && (i++ < 32 )) *q++ = *rp;
	    	bracend=rp+1;
	    	if (*rp) rp++;   /* if not at end of string continue */
	    }
	    else if (!*rp) {
		*p++ = '$';
		break;
	    }
	    else if(*rp == '$')*q++ = *rp++;
	    else {
		i=0;
		while ( (i++ < 32) && 
		    ( (((ch = ToUpper(*rp)) >= '0') && (ch <= '9')) || 
		    ((ch >= 'A') && (ch <='Z')) || 
		    (ch >160))) *q++ = *rp++;
	    	bracend=rp;
	    }
	    *q = '\0';

	    if (GetVar(buf,temp,127,0) < 0 ) {
		for(; brace<bracend; brace++)*p++ = *brace;  
	    }
	    else {
		for(q=temp; *q && (*q != '\n')&& maxlen;q++,maxlen--)
			*p++ = *q;
	    }
	}
	if (maxlen <= 0) {
	    to[mc-1]=0; /* null terminate the line */
	    return(-1);
	}
    }
    *p = '\0';
    return(strlen(to));
}
@


1.20
log
@missed a place where toupper should have been used
@
text
@d64 1
a64 1
	    	bracend=rp;
@


1.19
log
@registered parameter switch to save space
@
text
@d19 1
d29 1
a29 1
    int i;
d74 4
a77 3
		while (((*rp >= '0' && *rp <= '9')||(*rp >= 'A' && *rp <='Z')|| 
			(*rp >= 'a' && *rp <='z') || (*rp >160)) && (i++ <32))
			*q++ = *rp++;
@


1.18
log
@fixed setting a "" value...now expands into ""
@
text
@a7 4
#include "proto/exec.h"
#include "clib/dos_protos.h"


@


1.17
log
@fixed up escaping of the $
@
text
@a10 2
/* #include "pragmas/dos_pragmas.h" */
/* #include "pragmas/dos_private_pragmas.h" */
d84 1
a84 1
	    if (GetVar(buf,temp,127,0) <=0 ) {
a92 1
/*	    writef(DOSBase,"Expanded line too long\n"); */
@


1.16
log
@uses PrintFault for its strings.
@
text
@d19 1
a19 1
int expand(gv,to)
d22 1
d33 1
a33 1
    int maxlen = MAXCOMMAND;
d37 1
a37 1
    if((strlen(to))>=MAXCOMMAND)return(-1); /* too long, do nothing */
d48 3
a50 1
	    if(lastrp == '*')lastrp=0; /* two stars escape into one star */
d55 1
d96 1
a96 1
	    to[MAXCOMMAND-1]=0; /* null terminate the line */
@


1.15
log
@now depends on getvar returning a null terminated string for an alias
@
text
@d47 2
a48 1
	    lastrp=*rp;
d91 2
a92 2
	    writef(DOSBase,"Expanded line too long\n");
	    to[MAXCOMMAND-1]=0;
@


1.14
log
@adjusted limit test on getvar
@
text
@d81 1
a81 1
	    if ((i=GetVar(buf,temp,127,0)) <=0 ) {
@


1.13
log
@changed gv just a bit
@
text
@d36 1
a36 1
    if((strlen(to))>MAXCOMMAND)return(-1); /* too long, do nothing */
d85 1
a85 1
		for(q=temp;i>0 && *q &&(*q != '\n')&& maxlen;q++ ,i--,maxlen--)
@


1.12
log
@uses less stack (about 1K less!)
@
text
@d11 2
a12 2
#include "pragmas/dos_pragmas.h"
#include "pragmas/dos_private_pragmas.h"
@


1.11
log
@handles lines > 255 without blowing up
@
text
@d19 2
a20 2
int expand(db,to)
    struct DosLibrary *db;
d23 3
a25 3
    struct DosLibrary *DOSBase=db;
    UBYTE from[MAXCOMMAND+1];
    UBYTE buf[128]; /* note: 128 chars is limit for variable names */
d61 1
d63 1
a63 1
		while (*++rp && *rp != '}') *q++ = *rp;
d73 4
a76 4
		while ((*rp >= '0' && *rp <= '9') ||
 		   (*rp >= 'A' && *rp <='Z') || 
		   (*rp >= 'a' && *rp <='z') ||
		   (*rp >160)) *q++ = *rp++;
d80 1
d85 2
a86 1
		for(q=temp; i>0 && *q && (*q != '\n'); q++ , i--)*p++ = *q;
d91 1
@


1.10
log
@code now uses much less stack for expansion
@
text
@d24 2
a25 2
    UBYTE from[256];
    UBYTE buf[128];
d32 1
a32 1
    int maxlen = 255;
d36 2
d87 1
a87 1
	    writef(DOSBase,"Expanded line too long");
@


1.9
log
@*** empty log message ***
@
text
@d19 2
a20 2
int expand(gv,to)
    struct Global *gv;
d23 1
a23 1
    struct DosLibrary *DOSBase=gv->DOSBase;
d70 4
a73 1
		while (*rp > 64) *q++ = *rp++;
d85 1
a85 1
	    writef(gv,"Expanded line too long");
@


1.8
log
@
@
text
@d23 1
d25 1
a25 1
    UBYTE buf[256];
a33 1
    struct DosLibrary *DOSBase=gv->DOSBase;
@


1.7
log
@fixed escape of $
@
text
@d25 1
a25 1
    UBYTE temp[256];
d74 1
a74 1
	    if ((i=GetVar(buf,temp,255,0)) <=0 ) {
@


1.6
log
@
@
text
@d34 1
d45 7
@


1.5
log
@now use length return from GetVar for variables
@
text
@@


1.4
log
@fixed quote next to alias problem
@
text
@d32 1
d66 1
a66 1
	    if (GetVar(buf,temp,255,0) <=0 ) {
d70 1
a70 1
		for(q=temp; *q && (*q != '\n'); q++)*p++ = *q;
@


1.3
log
@Alias arguments now end up in command line
Added additional builtin commands
@
text
@d23 3
a25 3
    UBYTE from[512];
    UBYTE buf[512];
    UBYTE temp[32];
d31 1
a31 1
    int maxlen = 511;
d42 1
a42 8
	if(*rp == '*') {
	    *rp++;
	    if(*rp) {
		*p++ = *rp++;
	    	(maxlen)--;
	    }
	}
	else if (*rp != '$') {
d65 2
a66 2
	    if (GetVar(buf,temp,31,0) <=0 ) {
		for(; brace<=bracend; brace++)*p++ = *brace;  
d69 1
a69 1
		for(q=temp; *q; q++)*p++ = *q;
@


1.2
log
@added {$$} for process number
@
text
@a31 1
    int flag;
d39 1
a39 1
    flag = LV_VAR;
d42 8
a49 1
	if (*rp != '$') {
a60 1

d66 1
a67 4
		if(*rp == '$') {	/* just look at global variables */
		    flag = LV_VAR|GVF_GLOBAL_ONLY;
		    rp++;
		}
@


1.1
log
@now uses the DOS variable support routines
@
text
@d4 1
a4 1

d32 1
d40 2
d62 4
@


1.0
log
@added to rcs
@
text
@@
