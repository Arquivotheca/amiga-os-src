head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     90.04.07.00.12.33;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.04.23.18.24;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.15.07.49.35;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.49.37;  author andy;  state Exp;
branches ;
next     ;


desc
@wait command to be built in
@


1.4
log
@
@
text
@; /*
lc -d -j73 -O -o/obj/Wait.o -i/include -v -rr -csf Wait
blink /obj/Wait.o to /bin/Wait sc sd nd lib lib:lcr.lib
protect /bin/Wait +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker   Mike Witcher */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*------------------------------------------------------------------------*/
/* Command: wait                                                           */
/* Author:  Mary Ellen Toebes                                             */
/* Change History:                                                        */
/*  Date    Person        Action                                          */
/* -------  ------------- -----------------                               */
/*                                                                        */
/* 20Oct89  Mary Ellen Toebes Initial Creation                            */
/*                                                                        */
/* Format: Wait<n>[Sec|Secs][Min|Mins][Until<HH:MM>]                      */
/*                                                                        */
/*------------------------------------------------------------------------*/

#include "internal/commands.h"
#include "wait_rev.h"

#define MSG_BADHHMM  "Time should be HH:MM\n"
#define MSG_BADNUM   "Error in number\n"

#define TEMPLATE    "/N,SEC=SECS/S,MIN=MINS/S,UNTIL/K"  CMDREV
#define OPT_N       0             /* Numeric <n>         */
#define OPT_SECS    1             /* Keyword SEC or SECS */
#define OPT_MIN     2             /* Keyword MIN or MINS */
#define OPT_UNTIL   3             /* Keyword UNTIL       */
#define OPT_COUNT   4 

#define TPSEC  50                 /* Ticks per second    */
#define TPMIN  60 * 50            /* Ticks per minute    */                
#define TPHOUR 60 * 60 * 50       /* Ticks per hour      */
#define TPDAY  24 * 60 * 60 * 50  /* Ticks per day       */

int cmd_wait(void)
{
   struct DosLibrary *DOSBase;
   struct Library    *UtilityBase;
   struct RDargs     *rdargs;
   long   opts[OPT_COUNT];
   int    rc;
   char  *p;
   short  num;
   short  colon;
   long   hours;
   long   minutes;
   long   ticks;
   long   v[3];

   rc = RETURN_FAIL;

   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)) &&
       (UtilityBase = OpenLibrary("utility.library", 0))) 
   {
      memset((char *)opts, 0, OPT_COUNT * sizeof(long));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);

      if (rdargs == NULL)
      {
         PrintFault(IoErr(), NULL);
      }
      else
      {
         rc = RETURN_OK;

         ticks = *((long *)opts[OPT_N]);

         /* wait <n> minutes */
         if (opts[OPT_MIN]) ticks = SMult32(ticks,TPMIN);

         /* Wait <n> seconds  (default unit)  */
         else ticks = SMult32(ticks,TPSEC);

         /* Wait until of HH:MM */
         if (opts[OPT_UNTIL]) 
         {
            /* Read Args does not strip leading blanks for /K */
            for (p = (char *)opts[OPT_UNTIL]; (*p == ' ');  p++);

            /* Parse HH:MM string */
            colon = num = 0;
            while(*p && rc == RETURN_OK)
            {
               /* Colon found. Assign accumulated number to hours */
               if (*p == ':')
               {
                  if (colon++ > 1)    /* What ? more than 1 colon */
                     rc = RETURN_FAIL;
                  hours = (long)num;
                  num = 0;
               }
 
               /* Digit found. Add it to the number being ccumulated */
               else if (*p < '0' || *p > '9')
               {
                  rc = RETURN_FAIL;
               }
               else
               {
                  num *= 10;
                  num += (*p - '0');
               }
               p++;
            }
            minutes = (long)num;

            if((colon != 1) || 
               (rc == RETURN_FAIL) ||
               (hours < 0) || (hours > 23) || 
               (minutes < 0) || (minutes > 59))
            {
               PutStr(MSG_BADHHMM);
               rc = RETURN_FAIL;
               ticks = 0;
            }
            else 
            {
               DateStamp(v);

               /* ticks = until_time - now */
               ticks= SMult32(hours,TPHOUR) + SMult32(minutes,TPMIN)
                      - (SMult32(v[1],TPMIN)  + v[2]);

               /* has until_time already passed? Then wait until same time*/
               /* next day.                                               */  
               if (ticks < 0) ticks += TPDAY;
            }
         }

         /* Check sign of ticks number */
         if (ticks < 0) 
         {
            PutStr(MSG_BADNUM);
            rc = RETURN_FAIL;
         }

         else 
         {
            while (ticks > 0)   /* Wait a second at a time */
            {
               if (CheckSignal(SIGBREAKF_CTRL_C))
               {
                  PrintFault(ERROR_BREAK, NULL);
                  rc = RETURN_WARN;
                  break;
               } 
               Delay(50);
               ticks -= 50;
            }
         }
         FreeArgs(rdargs);
      }

      CloseLibrary((struct Library *)DOSBase);
      CloseLibrary(UtilityBase);
   }
   else
   {
      /* We couldn't open DOS or utility so let them know */
      if (DOSBase) CloseLibrary((struct Library *)DOSBase);
      OPENFAIL;
   }


   return(rc);
}
@


1.3
log
@removed CMDREV header
@
text
@d15 1
a15 1
/*             John Toebes     Mary Ellen Toebes  Doug Walker                */
d18 4
d36 1
d41 1
a41 1
#define TEMPLATE    "/N,SEC=SECS/S,MIN=MIN/S,UNTIL/K" 
d56 1
a59 1
   char  *error_msg;
a67 1
   error_msg = NULL;
d70 2
a71 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
d87 1
a87 1
         if (opts[OPT_MIN]) ticks = Mult32(ticks,TPMIN);
d90 1
a90 1
         else ticks = Mult32(ticks,TPSEC);
d130 1
a130 1
               error_msg = MSG_BADHHMM;
d139 2
a140 2
               ticks= Mult32(hours,TPHOUR) + Mult32(minutes,TPMIN)
                      - (Mult32(v[1],TPMIN)  + v[2]);
d151 1
a151 1
            error_msg = MSG_BADNUM;
d161 1
a161 1
                  error_msg = MSG_BREAK;
d171 1
d173 1
d177 2
a178 1
      /* We couldn't open DOS.library so give them an alert */
a181 2
   if (error_msg)
      WriteStr(error_msg);
@


1.2
log
@
@
text
@@


1.1
log
@Initial revision
@
text
@@
