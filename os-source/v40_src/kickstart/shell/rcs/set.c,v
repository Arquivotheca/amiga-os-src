head     1.37;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.37
date     93.03.04.18.27.37;  author jesup;  state Exp;
branches ;
next     1.36;

1.36
date     91.05.07.23.45.11;  author andy;  state Exp;
branches ;
next     1.35;

1.35
date     91.04.10.19.40.32;  author andy;  state Exp;
branches ;
next     1.34;

1.34
date     91.04.06.18.32.54;  author andy;  state Exp;
branches ;
next     1.33;

1.33
date     91.04.03.20.47.29;  author andy;  state Exp;
branches ;
next     1.32;

1.32
date     91.03.26.12.44.24;  author andy;  state Exp;
branches ;
next     1.31;

1.31
date     91.03.20.12.04.57;  author andy;  state Exp;
branches ;
next     1.30;

1.30
date     91.03.14.16.46.19;  author andy;  state Exp;
branches ;
next     1.29;

1.29
date     91.03.13.23.49.39;  author andy;  state Exp;
branches ;
next     1.28;

1.28
date     91.03.13.23.29.07;  author andy;  state Exp;
branches ;
next     1.27;

1.27
date     91.03.08.18.39.09;  author andy;  state Exp;
branches ;
next     1.26;

1.26
date     91.01.25.22.27.57;  author andy;  state Exp;
branches ;
next     1.25;

1.25
date     91.01.20.17.42.46;  author andy;  state Exp;
branches ;
next     1.24;

1.24
date     91.01.10.20.34.10;  author andy;  state Exp;
branches ;
next     1.23;

1.23
date     90.12.31.01.48.06;  author andy;  state Exp;
branches ;
next     1.22;

1.22
date     90.12.17.21.58.01;  author andy;  state Exp;
branches ;
next     1.21;

1.21
date     90.11.28.12.55.54;  author andy;  state Exp;
branches ;
next     1.20;

1.20
date     90.09.14.20.16.06;  author andy;  state Exp;
branches ;
next     1.19;

1.19
date     90.09.11.18.40.44;  author andy;  state Exp;
branches ;
next     1.18;

1.18
date     90.09.01.11.52.11;  author andy;  state Exp;
branches ;
next     1.17;

1.17
date     90.08.31.18.06.58;  author andy;  state Exp;
branches ;
next     1.16;

1.16
date     90.06.11.14.49.59;  author andy;  state Exp;
branches ;
next     1.15;

1.15
date     90.05.31.18.29.07;  author andy;  state Exp;
branches ;
next     1.14;

1.14
date     90.04.16.17.01.47;  author andy;  state Exp;
branches ;
next     1.13;

1.13
date     90.04.07.03.00.58;  author andy;  state Exp;
branches ;
next     1.12;

1.12
date     90.04.07.00.12.04;  author andy;  state Exp;
branches ;
next     1.11;

1.11
date     90.03.19.05.34.58;  author andy;  state Exp;
branches ;
next     1.10;

1.10
date     90.03.04.23.17.12;  author andy;  state Exp;
branches ;
next     1.9;

1.9
date     90.03.04.03.06.26;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     90.03.02.21.08.38;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     89.12.18.04.46.18;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     89.12.17.03.38.32;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     89.12.15.07.48.18;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     89.12.11.04.21.04;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     89.12.11.03.17.54;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.10.23.20.50;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     89.12.09.06.48.36;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.07.05.22.01;  author andy;  state Exp;
branches ;
next     ;


desc
@Set variable built in command
@


1.37
log
@the SMALL ifdef was backwards...

@
text
@;/*
lc -d -j73 -O -oset.o -iV:include -iV:inc.lattice -v -csf set
blink set.o to set.ld LIB lib:amiga.lib lib:debug.lib lib:lc.lib sc sd nd
protect set.ld +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .  | || the authors:                             BBS: (919) 382-8265    */
/* | o  | ||   Dave Baker      Alan Beale         Jim Cooper                 */
/* |  . |//    Jay Denebeim    Bruce Drake        Gordon Keener              */
/* ======      John Mainwaring Andy Mercier       Jack Rouse                 */
/*             John Toebes     Mary Ellen Toebes  Doug Walker                */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/*-----------------------------------------------------------------------*/
/* Command: SetEnv                                                       */
/* Author:  John A. Toebes, VIII                                         */
/* Change History:                                                       */
/*  Date    Person        Action                                         */
/* -------  ------------- -----------------                              */
/* 19MAR89  John Toebes   Initial Creation                               */
/* 25OCT89  John Toebes   Revamp for DOS36.21                            */
/* 06NOV89  John Toebes   Change to use SetEnvVar                        */
/* 02DEC89  John Toebes   Final changes from review, more comments       */
/* Notes:                                                                */
/*-----------------------------------------------------------------------*/

#include <exec/types.h>
#include <exec/nodes.h>
#include <dos/dosextens.h>
#include <dos/dos.h>
#include <dos/var.h>


#include <string.h>
#include <clib/macros.h>

#include "internal/commands.h"
#include "global.h"

#ifdef ram
void __stdargs writef( struct DosLibrary *DOSBase, UBYTE *fmt, UBYTE *args );
#endif

#define TEMPLATE    "NAME,STRING/F"
#define OPT_NAME    0
#define OPT_STRING  1
#define OPT_COUNT   2

#define SMALL 1

int cmd_setenv(void)
{
   struct DosLibrary *DOSBase;
   struct Library *UtilityBase;
   int rc = RETURN_ERROR;
   char *str;
   long opts[OPT_COUNT];
   struct RDargs *rdargs;
   struct LocalVar *lv;
   int i,len;
   UBYTE *buf;
   UBYTE buffer[256];
   char *template = TEMPLATE; /* template for set, setenv */
   long mode=0, remove=0;

#ifndef SMALL
#ifdef ram
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
#else
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
#endif
      UtilityBase=OpenLibrary("utility.library",0);
#else
	/* just open the libraries, we can't readargs yet */
      getargs(&DOSBase,&UtilityBase,NULL,NULL,0);
#endif

      /* note: if set moves to disk, the 31 is inappropriate for a path */

      if(GetProgramName(buffer,31)) { /* set the template and pick the defaults */
	buf=FilePart(buffer);
	if(len=strlen(buf)) {
	    if(ToUpper(buf[0]) == 'U') {
	        remove = TRUE;
	    	template="NAME";
	    	if(len == 8)mode = GVF_GLOBAL_ONLY|LV_VAR; /* unsetenv */
	    	else if (len == 7) mode = GVF_LOCAL_ONLY|LV_ALIAS; /* unalias */
	    	else mode = GVF_LOCAL_ONLY|LV_VAR; /* unset */
	    }
	    else {
	    	if(len == 6)mode = GVF_GLOBAL_ONLY|LV_VAR; /* setenv */
	    	else if (len == 5) mode = GVF_LOCAL_ONLY|LV_ALIAS; /* alias */
	    	else mode = GVF_LOCAL_ONLY|LV_VAR; /* set */
	    }
	}
      }
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(template, opts, NULL);
      if (rdargs == NULL) {
         /*-------------------------------------------------------------*/
         /* Something wrong with their arguments, tell them and quit    */
         /*-------------------------------------------------------------*/
         PrintFault(IoErr(), NULL);
      }
      else if ( opts[OPT_NAME] && strlen((char *)opts[OPT_NAME]) > 32) {
	PrintFault(120,NULL);
      }
      else {
         /*-------------------------------------------------------------*/
         /* Assume things will work out ok and try to set the variable  */
         /*-------------------------------------------------------------*/
         rc = RETURN_OK;
	 if(opts[OPT_NAME]) {

             if(( (str = (char *)opts[OPT_STRING]) != NULL)&& !remove){
		if(!(*str))str="";
		/* if alias is > 255, just use first 255 characters */
		if((i=strlen((char *)opts[OPT_STRING]))>255)i=255;
		if(!SetVar((char *)opts[OPT_NAME], str, i, mode)) {
                /*----------------------------------------------------------*/
                /* It didn't work so tell them and give the proper RC       */
                /*----------------------------------------------------------*/
		Fault(STR_CANT_SET,NULL,buffer,36);
		writef(DOSBase,buffer,opts[OPT_NAME]);
                rc = RETURN_ERROR;
		}
	     }
	     else if (remove) {
		/* should we use the result of DeleteVar ? */
		DeleteVar((char *)opts[OPT_NAME],mode);
		}
	     else if(!Stricmp(buf,"alias")) { /* give alias value */
		if( (GetVar( (char *)opts[OPT_NAME],buffer,255,mode) ) >= 0) {
		    writef(DOSBase,"%s\n",buffer);
		}
		else {
		    rc=RETURN_WARN;
		    SetIoErr(ERROR_OBJECT_NOT_FOUND);
		}
	     }
	 }
	 else {	/* print out the alias/variable list */
	   if(mode&GVF_GLOBAL_ONLY) {
		System("LIST env: QUICK NOHEAD FILES",NULL);	
	   }
	   else {
	      for(lv=(struct LocalVar *) (THISPROC)->pr_LocalVars.mlh_Head;
		 	lv->lv_Node.ln_Succ;
			lv=(struct LocalVar *)lv->lv_Node.ln_Succ) {
			     if(CheckSignal(SIGBREAKF_CTRL_C)) {
	    			PrintFault(304,0);
	    			break;
			     }
			    if((lv->lv_Flags & GVF_BINARY_VAR)) {
			        strcpy(buffer,"[BINARY]");
			        len=8;
			    }
			    else {
			        len=MIN(lv->lv_Len,255);
			        memcpy(buffer,lv->lv_Value,len);
			        buffer[len]=0;
			    }
			    for(i=0; i < len; i++) {
			        if((buffer[i] == 0x1b) || (buffer[i] == 0x9b))
				  buffer[i]=127; /* no escape display in alias */
			    }
			    if((mode&255) == (lv->lv_Node.ln_Type)&255) 
			        writef(DOSBase,"%TH %s\n",
				    lv->lv_Node.ln_Name,buffer);
			}
	   }
	 }
         /*-------------------------------------------------------------*/
         /* We are done so cleanup and exit                             */
         /*-------------------------------------------------------------*/
         FreeArgs(rdargs);
      }
   CloseLibrary(UtilityBase);
   CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else { OPENFAIL }
#endif
   return(rc);
 }

#ifdef ram
void __stdargs writef( DOSBase, fmt, args )
struct DosLibrary DOSBase; 
UBYTE *fmt, *args;
{
   VFWritef( Output(), fmt, (LONG *)&args );
}
#endif
@


1.36
log
@added FilePart call so I know who I am
@
text
@d71 1
a71 1
#ifdef SMALL
@


1.35
log
@uses the new universal getargs routine to save space
@
text
@d66 2
a67 1
   UBYTE buf[256];
d83 17
a99 13
      if(GetProgramName(buf,31)) { /* set the template and pick the defaults */
	len=strlen(buf);
	if(ToUpper(buf[0]) == 'U') {
	    remove = TRUE;
	    template="NAME";
	    if(len == 8)mode = GVF_GLOBAL_ONLY|LV_VAR; /* unsetenv */
	    else if (len == 7) mode = GVF_LOCAL_ONLY|LV_ALIAS; /* unalias */
	    else mode = GVF_LOCAL_ONLY|LV_VAR; /* unset */
	}
	else {
	    if(len == 6)mode = GVF_GLOBAL_ONLY|LV_VAR; /* setenv */
	    else if (len == 5) mode = GVF_LOCAL_ONLY|LV_ALIAS; /* alias */
	    else mode = GVF_LOCAL_ONLY|LV_VAR; /* set */
d128 2
a129 2
		Fault(STR_CANT_SET,NULL,buf,36);
		writef(DOSBase,buf,opts[OPT_NAME]);
d138 2
a139 2
		if( (GetVar( (char *)opts[OPT_NAME],buf,255,mode) ) >= 0) {
		    writef(DOSBase,"%s\n",buf);
d160 1
a160 1
			        strcpy(buf,"[BINARY]");
d165 2
a166 2
			        memcpy(buf,lv->lv_Value,len);
			        buf[len]=0;
d169 2
a170 2
			        if((buf[i] == 0x1b) || (buf[i] == 0x9b))
				  buf[i]=127; /* no escape display in alias */
d174 1
a174 1
				    lv->lv_Node.ln_Name,buf);
@


1.34
log
@dosbase cleanup in call
@
text
@d52 1
d54 1
a54 1
#define OPT_COUNT   2
d70 1
d77 4
a80 1
      memset((char *)opts, 0, sizeof(opts));
d97 1
@


1.33
log
@string change to prevent output running together
@
text
@d46 1
a46 1
void __stdargs writef( struct DosLibrary *db, UBYTE *fmt, UBYTE *args );
d182 2
a183 2
void __stdargs writef( db, fmt, args )
struct DosLibrary *db; 
a185 1
   struct DosLibrary *DOSBase=db;
@


1.32
log
@ifdef changes to allow seperate compilation
@
text
@d162 1
a162 1
			        writef(DOSBase,"%TH%s\n",
@


1.31
log
@set can be compiled seperately now.
@
text
@d45 4
d69 3
a71 2
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */

d73 1
@


1.30
log
@new front end to figure out which way set is invoked.
(smaller)  takes advantage of the fact that I know
there are only 6 names for this command.
@
text
@d174 10
@


1.29
log
@removed whitespace stripper.  (its going into dos)
@
text
@d72 2
a73 13
	if (!Stricmp(buf,"setenv")) {
	    mode = GVF_GLOBAL_ONLY|LV_VAR;
      	}
	else if (!Stricmp(buf,"set")) {
	    mode = GVF_LOCAL_ONLY|LV_VAR;	
	}
	else if(!Stricmp(buf,"alias")) {
	    template=TEMPLATE; /* allow full range */
	    mode = GVF_LOCAL_ONLY|LV_ALIAS;
	}
	else  if (!Stricmp(buf,"unalias")) {
	    mode = GVF_LOCAL_ONLY|LV_ALIAS;
	    template="NAME";
a74 3
	}
	else  if (!Stricmp(buf,"unsetenv")) {
	    mode = GVF_GLOBAL_ONLY|LV_VAR;
d76 3
a78 1
	    remove = TRUE;
d80 4
a83 4
	else  if (!Stricmp(buf,"unset")) {
	    mode = GVF_LOCAL_ONLY|LV_VAR;
	    template="NAME";
	    remove = TRUE;
@


1.28
log
@whitespace hack added;  strips whitespace from
end unless there is whitespace on beginning.
@
text
@d61 1
a61 1
   UBYTE buf[260]; /* room for games */
d119 1
a119 13
		memset(buf,0,256);
		memcpy(buf,str,i);
		/* eat whitespace at end of definition */
		/* if no whitespace at beginning */
		if(i && (buf[0] != ' ') && (buf[0] != 9)) {
		    do {
		       if((buf[i]!=' ')&&(buf[i]!=9)&&(buf[i])) {
			   buf[++i]-0;
		           break;
		       }
		    } while(--i);
		}
		if(!SetVar((char *)opts[OPT_NAME], buf, i, mode)) {
@


1.27
log
@prints [BINARY] for binary variables
@
text
@d1 4
a4 4
/*
lc -d -j73 -O -o/obj/SetEnv.o -i/include -v -csf SetEnv
blink /obj/SetEnv.o to /bin/SetEnv sc sd nd
protect /bin/SetEnv +p
a44 2
#define MSG_CANTSET "Can't set %s\n"

d61 1
a61 1
   UBYTE buf[256];
d66 1
d118 14
a131 2
		i= (strlen( (char *)opts[OPT_STRING])) > 255 ? 255 : -1;
		if(!SetVar((char *)opts[OPT_NAME], str, i, mode)) {
@


1.26
log
@registered parameter switch to save space
@
text
@d38 1
a38 1
/*#include <stdio.h> */
d40 1
a40 1

a56 3
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
d62 1
a62 1
   long i;
d147 1
a147 2
	   else 
{
d155 16
a170 5
			memcpy(buf,lv->lv_Value,lv->lv_Len);
			buf[lv->lv_Len]=0;
			for(i=0; i < lv->lv_Len; i++) {
			    if((buf[i] == 0x1b) || (buf[i] == 0x9b))
				buf[i]=127; /* no escape display in alias */
a171 3
			if( (mode&255) == (lv->lv_Node.ln_Type)&255) 
			    writef(DOSBase,"%TH%s\n",lv->lv_Node.ln_Name,buf);
     			}
@


1.25
log
@problem caused when error strings fixed.  (push name on stack)
@
text
@d57 1
d59 2
a60 1
   int rc = RETURN_FAIL;
@


1.24
log
@moved strings into dos
@
text
@d125 2
a126 2
/*                PrintFault(IoErr(),0); */
		PrintFault(STR_CANT_SET,NULL);
@


1.23
log
@switched to Utility library string routines
@
text
@d125 2
a126 1
                PrintFault(IoErr(),0);
@


1.22
log
@uses PrintFault for its strings.
@
text
@d56 1
d70 1
d74 1
a74 1
	if (!stricmp(buf,"setenv")) {
d77 1
a77 1
	else if (!stricmp(buf,"set")) {
d80 1
a80 1
	else if(!stricmp(buf,"alias")) {
d84 1
a84 1
	else  if (!stricmp(buf,"unalias")) {
d89 1
a89 1
	else  if (!stricmp(buf,"unsetenv")) {
d94 1
a94 1
	else  if (!stricmp(buf,"unset")) {
d133 1
a133 1
	     else if(!stricmp(buf,"alias")) { /* give alias value */
d172 1
@


1.21
log
@no need to null terminate GetVar promised to do it
@
text
@d123 1
a123 2
                VFPrintf(Output(),MSG_CANTSET, opts);
                PrintFault(IoErr(), NULL);
@


1.20
log
@limit checks added
@
text
@d61 1
a62 1
   struct LocalVar *lv;
d133 1
a133 2
		if( (i=GetVar( (char *)opts[OPT_NAME],buf,255,mode) ) >= 0) {
		    buf[i]=0;
@


1.19
log
@fixed the alias > 255 crash bug.  It needed a limit check
to avoid overflowing the string buffer
@
text
@d65 1
a65 1
   long mode, remove=0;
d70 1
d144 6
a149 1
	    for(lv=(struct LocalVar *) (THISPROC)->pr_LocalVars.mlh_Head;
d165 2
a166 1
	 	     }
@


1.18
log
@added linefeed to error message
@
text
@d63 1
a63 1
   UBYTE buf[255];
d116 3
a118 1
		if(!SetVar((char *)opts[OPT_NAME], str, -1, mode)) {
@


1.17
log
@sets the return code and result2 if requested alias doesn't exist
@
text
@d45 1
a45 1
#define MSG_CANTSET "Can't set %s: "
@


1.16
log
@removed doslibrary open test to save space
@
text
@d133 4
@


1.15
log
@changed variable code to use less sack
(stack)
@
text
@d67 2
a68 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d104 3
d160 1
d163 1
@


1.14
log
@control-C stops listing now
@
text
@a63 1
   struct Global *gv;
a67 3
    gv=AllocMem(sizeof(struct Global),MEMF_PUBLIC|MEMF_CLEAR);
    if(gv) {
      gv->DOSBase = DOSBase;
d128 1
a128 1
		    writef(gv,"%s\n",buf);
d133 2
a134 3
	    for(lv=(struct LocalVar *) ((struct Process *)FindTask(0))->
				pr_LocalVars.mlh_Head;
		 	lv->lv_Node.ln_Succ; 
d147 1
a147 1
			    writef(gv,"%TH%s\n",lv->lv_Node.ln_Name,buf);
a154 2
    FreeMem(gv,sizeof(struct Global));
    }
@


1.13
log
@fixed stack overflow guru
@
text
@d141 4
@


1.12
log
@
@
text
@d64 1
a64 1
   struct Global gv;
d69 3
a71 1
      gv.DOSBase = DOSBase;
d132 1
a132 1
		    writef(&gv,"%s\n",buf);
d148 1
a148 1
			    writef(&gv,"%TH%s\n",lv->lv_Node.ln_Name,buf);
d156 2
@


1.11
log
@uses command name to chose correct template; include
alias, unalias, set, unset, setenv, unsetenv
@
text
@d47 1
a47 1
#define TEMPLATE    "NAME,REMOVE/S,STRING/F"
d49 1
a49 2
#define OPT_REMOVE  1
#define OPT_STRING  2
d51 1
a51 1
#define OPT_COUNT   3
d56 1
a105 3

	 if(opts[OPT_REMOVE])remove=TRUE;

@


1.10
log
@removed CMDREV header
@
text
@d47 1
a47 1
#define TEMPLATE    "NAME,LOCAL/S,GLOBAL/S,REMOVE/S,STRING"
d49 2
a50 4
#define OPT_LOCAL   1
#define OPT_GLOBAL  2
#define OPT_REMOVE  3
#define OPT_STRING  4
d52 1
a52 1
#define OPT_COUNT   5
d61 1
a61 1
   long mode,i;
d63 1
a63 1
   UBYTE buf[80];
d65 2
d71 28
a98 2
      rdargs = ReadArgs(TEMPLATE, opts, NULL);

a105 9
         /*-------------------------------------------------------------*/
         /* Determine whether to set it as a local or global variable.  */
         /*-------------------------------------------------------------*/
	 mode = GVF_LOCAL_ONLY;
	 if(GetProgramName(buf,31)) { /* pick the defaults */
	     mode = GVF_GLOBAL_ONLY|LV_VAR; /* assume its a SETENV */
	     if(!stricmp(buf,"alias")) mode = GVF_LOCAL_ONLY|LV_ALIAS;
/*	     else if(!stricmp(buf,"set"))mode = GVF_LOCAL_ONLY|LV_VAR; */
	 }
d107 1
a107 8
	 if (opts[OPT_LOCAL]) {
			mode |= GVF_LOCAL_ONLY;
			mode &= ~GVF_GLOBAL_ONLY;
	 }
	 else if (opts[OPT_GLOBAL]) {
		mode |= GVF_GLOBAL_ONLY;
		mode &= ~GVF_LOCAL_ONLY;
	 }
d115 2
a116 1
             if(((str = (char *)opts[OPT_STRING]) != NULL)&& !opts[OPT_REMOVE]){
d126 1
a126 1
	     else {
d130 6
d151 1
a151 1
	 }
d161 1
a161 1
}
@


1.9
log
@backed out /F on template
@
text
@@


1.8
log
@now uses /F to cut down on quotes
@
text
@d38 1
a38 1
#include <stdio.h>
d47 1
a47 2
#define TEMPLATE    "NAME,LOCAL/S,GLOBAL/S,STRING/F"

d51 2
a52 1
#define OPT_STRING  3
d54 1
a54 1
#define OPT_COUNT   4
d63 1
a63 1
   int mode;
a83 1

d85 3
a87 5
	     mode = GVF_LOCAL_ONLY|LV_VAR; /* assume its a SET */
	     if(!stricmp(buf,"alias")) {
		mode = GVF_LOCAL_ONLY|LV_ALIAS;
	     }
	     else if(!stricmp(buf,"setenv"))mode = GVF_GLOBAL_ONLY|LV_VAR;
d105 1
a105 1
             if ((str = (char *)opts[OPT_STRING]) != NULL) {
d127 4
@


1.7
log
@modified why entry to actually call the command
@
text
@d47 2
a48 1
#define TEMPLATE    "NAME,STRING,LOCAL/S,GLOBAL/S,SHOW/S"
d50 3
a52 5
#define OPT_STRING  1
#define OPT_LOCAL   2
#define OPT_GLOBAL  3
#define OPT_PRINT   4
#define OPT_COUNT   5
d54 1
a66 1
   LONG result;
d119 2
a120 1
		result=DeleteVar((char *)opts[OPT_NAME],mode);
@


1.6
log
@fixed quote next to alias problem
@
text
@d47 1
a47 1
#define TEMPLATE    "NAME,STRING,LOCAL/S,GLOBAL/S,PRINT/S"
@


1.5
log
@
@
text
@d93 1
@


1.4
log
@fixed script bug
@
text
@@


1.3
log
@removed debugging statements
@
text
@d45 1
a45 1
#define MSG_CANTSET "Can't set %s:"
d76 1
a76 1
         /* Something wrong with their arugments, tell them and quit    */
d107 1
d129 1
a129 1
			if( (mode&1) == (lv->lv_Node.ln_Type)&1) 
@


1.2
log
@
@
text
@d67 1
a115 1

d117 3
a119 1
	     else DeleteVar((char *)opts[OPT_NAME],mode);
a121 1

d128 2
a129 3
			writef(&gv,"%s:\t%s (",lv->lv_Node.ln_Name,buf);
			if(lv->lv_Node.ln_Type)writef(&gv,"alias)\n");
			else writef(&gv,"variable)\n");
@


1.1
log
@built into shell
@
text
@@


1.0
log
@added to rcs
@
text
@d32 10
a42 1
#include "libraries/var.h"
d47 1
a47 1
#define TEMPLATE    "NAME/A,STRING,LOCAL/S,GLOBAL/S"
d52 2
a53 1
#define OPT_COUNT   4
d59 1
a59 1
   int rc, cnt;
d64 3
d68 2
a69 3
   rc = RETURN_FAIL;            /* default to failure                   */
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d73 1
a73 2
      if (rdargs == NULL)
      {
d79 1
a79 2
      else
      {
a80 6
         /* Default string to nothing if they didn't specify a value    */
         /*-------------------------------------------------------------*/
         if ((str = (char *)opts[OPT_STRING]) == NULL)
            str = "";

         /*-------------------------------------------------------------*/
a81 4
         /* unless they specify local we assume global.  Note that we   */
         /* do not have to check the global flag at all for this.  This */
         /* does allow them to (erroneously) specify both LOCAL GLOBAL  */
         /* and we will treat it as LOCAL                               */
d83 1
a83 2
         mode = GVF_GLOBAL_ONLY;
         if (opts[OPT_LOCAL]) mode = GVF_LOCAL_ONLY;
d85 16
d105 27
a131 10
         cnt = strlen(str);
         if (SetVar((char *)opts[OPT_NAME], str, cnt, mode) != TRUE)
         {
            /*----------------------------------------------------------*/
            /* It didn't work so tell them and give the proper RC       */
            /*----------------------------------------------------------*/
            BPrintf(MSG_CANTSET, opts);
            PrintFault(IoErr(), NULL);
            rc = RETURN_ERROR;
         }
d137 1
a137 1
      CloseLibrary((struct Library *)DOSBase);
d139 1
a139 4
   else
   {
      OPENFAIL;
   }
@
