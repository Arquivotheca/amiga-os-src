head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.6
date     91.04.10.19.48.47;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     91.04.10.18.43.49;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     91.01.25.22.23.14;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.06.11.14.56.56;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.07.00.11.33;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.23.16.22;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.44.01;  author andy;  state Exp;
branches ;
next     ;


desc
@builtin fault command
@


1.6
log
@uses the new universal getargs routine to save space
@
text
@/*
lc -d -j73 -O -o/obj/Fault.o -i/include -v -csf Fault
blink /obj/Fault.o to /bin/Fault sc sd nd
protect /bin/Fault +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .	| || the authors:			      BBS: (919) 382-8265    */
/* | o	| ||   Dave Baker      Alan Beale	  Jim Cooper		     */
/* |  . |//    Jay Denebeim    Bruce Drake	  Gordon Keener 	     */
/* ======      John Mainwaring Andy Mercier	  Jack Rouse		     */
/*	       John Toebes     Mary Ellen Toebes  Doug Walker		     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*-----------------------------------------------------------------------*/
/* Command: Fault							 */
/* Author:  John G. Mainwaring						 */
/* Change History:							 */
/*  Date    Person	   Action					 */
/* -------  -------------  -----------------				 */
/* 19MAR89  John Toebes    Initial Creation				 */
/* 27SEP89 John Mainwaring first implementation 			 */
/* 02DEC89 John Mainwaring zero ops[] before calling ReadArgs()          */
/* Notes:								 */
/*-----------------------------------------------------------------------*/

#include "internal/commands.h"
/* #include "fault_rev.h" */
#include "global.h"

#define SMALL 1

/* note no newline at end of string - there will be more on same line	 */
#define MSG_FAULT  "Fault %3ld"

#define TEMPLATE "/N/M"
#define OPT_NUMBER	0
#define OPT_COUNT 1

int cmd_fault(void)
{
   struct DosLibrary *DOSBase;
   LONG opts[OPT_COUNT];
   int faultcode = 0;
   int rc = RETURN_ERROR;
   long **argptr;
   long *msg;
   struct RDargs *rdargs;

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);
      if (rdargs == NULL) {
	 PrintFault(faultcode, NULL); 	 /* user blew it - tell him why */
      }
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
	rc = RETURN_OK;

	 /* ReadArgs put numbers into some of the opts and left the rest */
	 /* alone.  Loop till we get to a NULL entry in opts.		 */
	 if(opts[OPT_NUMBER]) {
	   argptr = (long **) opts[OPT_NUMBER];
	   while (msg = *argptr++) {
	        rc = RETURN_WARN; /* if set to OK, the faultcode will get reset */
		faultcode = *(long *)msg;
	        /* Our real reason for existance - print a fault code	 */
	        /* followed by the standard Dos descriptive text.		 */
	        VPrintf(MSG_FAULT, &faultcode);
	        PrintFault(faultcode, ""); /* Let PrintFault() print the ': '*/
	    }
	 }
	 FreeArgs(rdargs);
      }
      /* One function of Fault is to set the error code   */
      /* to the last value supplied in the command line, now found in	 */
      /* faultcode.  */
      SetIoErr(faultcode);
      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else {
      OPENFAIL;
   }
#endif
   return(rc);
}
@


1.5
log
@using new getargs call
@
text
@d43 3
a45 2
#define TEMPLATE  "/N,/N,/N,/N,/N,/N,/N,/N,/N,/N"
#define OPT_COUNT 10
d52 3
a54 1
   int rc = RETURN_ERROR, optidx;
d66 1
a66 1
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,&opts,sizeof(opts))) {
d68 1
a68 1
	 rc = RETURN_WARN; /* if set to OK, the faultcode will get reset */
d72 5
a76 3
	 for (optidx = 0; (optidx < OPT_COUNT) && opts[optidx]; optidx++) {
	    if(opts[optidx]) {
		faultcode = *(long *)opts[optidx];
@


1.4
log
@registered parameter switch to save space
@
text
@d38 2
d49 1
a49 4
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
   long opts[OPT_COUNT];
d51 1
a51 1
   int rc, optidx;
d54 1
a54 2
   rc = RETURN_ERROR;
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
d58 2
a59 6

      if (rdargs == NULL)
      {
	 /* user blew it - tell him why */
	 faultcode = IoErr();
	 PrintFault(faultcode, NULL);
d61 5
a65 3
      else
      {
	 rc = RETURN_OK;
d69 8
a76 7
	 for (optidx = 0; (optidx < OPT_COUNT) && opts[optidx]; optidx++)
	 {
	    faultcode = *(long *)opts[optidx];
	    /* Our real reason for existance - print a fault code	 */
	    /* followed by the standard Dos descriptive text.		 */
	    VPrintf(MSG_FAULT, &faultcode);
	    PrintFault(faultcode, ""); /* Let PrintFault() print the ': '*/
a77 1

d80 1
a80 2

      /* One function (side effect?) of Fault is to set the error code   */
d82 1
a82 2
      /* faultcode.  Seems appropriate to cover errors encountered by	 */
      /* ReadArgs as well.						 */
d87 1
a87 2
   else
   {
@


1.3
log
@removed doslibrary open test to save space
@
text
@d47 1
d49 1
d55 1
a55 1
   rc = RETURN_FAIL;
@


1.2
log
@*** empty log message ***
@
text
@d54 2
a55 2
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d89 1
d95 1
@


1.1
log
@removed CMDREV header
@
text
@d47 1
@


1.0
log
@added to rcs
@
text
@d41 1
a41 1
#define TEMPLATE  "/N,/N,/N,/N,/N,/N,/N,/N,/N,/N" CMDREV
@
