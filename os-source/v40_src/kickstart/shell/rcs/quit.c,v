head     1.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @*   @;


1.9
date     91.04.10.19.48.18;  author andy;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.25.22.38.24;  author andy;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.25.22.22.33;  author andy;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.13.20.53.34;  author andy;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.11.14.50.47;  author andy;  state Exp;
branches ;
next     1.4;

1.4
date     90.05.31.18.28.37;  author andy;  state Exp;
branches ;
next     1.3;

1.3
date     90.04.23.03.36.50;  author andy;  state Exp;
branches ;
next     1.2;

1.2
date     90.04.07.00.11.56;  author andy;  state Exp;
branches ;
next     1.1;

1.1
date     90.03.04.23.16.53;  author andy;  state Exp;
branches ;
next     1.0;

1.0
date     89.12.15.07.40.37;  author andy;  state Exp;
branches ;
next     ;


desc
@Builtin quit command
@


1.9
log
@uses the new universal getargs routine to save space
@
text
@/*
lc -d -j73 -O -o/obj/Quit.o -i/include -v -csf Quit
blink /obj/Quit.o to /bin/Quit sc sd nd
protect /bin/Quit +p
quit
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1989 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .	| || the authors:			      BBS: (919) 382-8265    */
/* | o	| ||   Dave Baker      Alan Beale	  Jim Cooper		     */
/* |  . |//    Jay Denebeim    Bruce Drake	  Gordon Keener 	     */
/* ======      John Mainwaring Andy Mercier	  Jack Rouse		     */
/*	       John Toebes     Mary Ellen Toebes  Doug Walker		     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**	(C) Copyright 1989 Commodore-Amiga, Inc.
 **	    All Rights Reserved
**/

/*---------------------------------------------------------------------------*/
/* Command: Quit							     */
/* Author:  Gordon Keener						     */
/* Change History:							     */
/*  Date    Person	  Action					     */
/* -------  ------------- -----------------				     */
/* 19MAR89  John Toebes   Initial Creation				     */
/* 03DEC89  Gordon Keener Final (hopefully) fixes                            */
/* Notes:								     */
/*---------------------------------------------------------------------------*/

#include "internal/commands.h"
/* #include "quit_rev.h" */
#include "global.h"

#define SMALL 1

#define TEMPLATE    "RC/N"
#define OPT_COUNT   1

int cmd_quit(void)
{
   struct DosLibrary		*DOSBase;
   struct CommandLineInterface	*cli;
   int				rc=RETURN_ERROR;
   long 			opts[OPT_COUNT];
   long				faultcode;
   struct RDargs		*rdargs;
   char 			eat[MSGBUFSIZE]; /* convenient size */

#ifndef SMALL
      DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER);
      memset((char *)opts, 0, sizeof(opts));
      rdargs = ReadArgs(TEMPLATE, opts, NULL);

      if (rdargs == NULL)PrintFault(IoErr(), NULL);
      else {
#else
      if(rdargs=getargs(&DOSBase,NULL,TEMPLATE,(LONG **)&opts,sizeof(opts))) {
#endif
	 if(opts[0])rc = *(long *)opts[0];
	 else rc=RETURN_OK;

	 if (rc >= 0) {
	    /* Eat the rest of the execute script, if we're in one     */
	    /* NOTE: Quit doesn't complain about not being in a script */
	    /* It also doesn't "quit" if it doesn't like its argument  */
	    if((cli = Cli())) {
	        faultcode=cli->cli_Result2; /* reset fault code */
	        if(cli->cli_CurrentInput != cli->cli_StandardInput) {
	           SelectInput( Cli()->cli_CurrentInput );
	           while( FGets(Input(), eat, sizeof(eat)));
		}
	    }
	 }
	 else {
	    faultcode=120;
	    PrintFault(120,NULL); /* argument invalid */
	    rc = RETURN_ERROR;
	 }
      FreeArgs(rdargs);
      SetIoErr(faultcode);
      }
      CloseLibrary((struct Library *)DOSBase);
#ifdef ram
   }
   else { OPENFAIL; }
#endif
   return(rc);
}

@


1.8
log
@changed return code to match 1.3
@
text
@d37 2
a44 3
/*
   struct Library *SysBase = (*((struct Library **) 4));
*/
d48 1
d52 1
a52 1
/*   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) { */
d59 3
d69 6
a74 5
	    if (((cli = Cli()) != NULL) &&
		 (cli->cli_CurrentInput != cli->cli_StandardInput))
	    {
	       SelectInput( Cli()->cli_CurrentInput );
	       while( FGets(Input(), eat, sizeof(eat)));
d78 1
d83 1
@


1.7
log
@registered parameter switch to save space
@
text
@d47 1
a47 1
   int				rc=RETURN_FAIL;
d75 1
a75 1
	    rc = RETURN_FAIL;
@


1.6
log
@changed Fgets use to make changed proto quiet
@
text
@d43 1
d45 1
@


1.5
log
@removed doslibrary open test to save space
@
text
@d68 1
a68 1
	       while( FGets(Input(), eat, sizeof(eat)) > 0 );
@


1.4
log
@fixed return code to default to 0
@
text
@a36 2
#define MSG_NEGATIVE   "Invalid arguments for quit command\n"

d50 2
a51 1
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER))) {
d72 1
a72 1
	    Puts( MSG_NEGATIVE );
d78 1
d81 1
@


1.3
log
@default return is now same as 1.3 (0)
@
text
@d76 1
a77 1

@


1.2
log
@
@
text
@d59 2
@


1.1
log
@removed CMDREV header
@
text
@d45 1
d47 1
a47 1
   int				rc;
d52 1
a52 3
   rc = RETURN_FAIL;
   if ((DOSBase = (struct DosLibrary *)OpenLibrary(DOSLIB, DOSVER)))
   {
d56 4
a59 9
      if (rdargs == NULL)
      {
	 PrintFault(IoErr(), NULL);
      }
      else
      {
	 rc = *(long *)(opts[0]);
	 if (rc >= 0)
	 {
d70 1
a70 2
	 else
	 {
d78 1
a78 5
   else
   {
      OPENFAIL;
   }

d81 1
@


1.0
log
@added to rcs
@
text
@d39 1
a39 1
#define TEMPLATE    "RC/N" CMDREV
@
