TABLE OF CONTENTS

lowlevel.library/AddKBInt
lowlevel.library/AddTimerInt
lowlevel.library/AddVBlankInt
lowlevel.library/ElapsedTime
lowlevel.library/GetKey
lowlevel.library/GetLanguageSelection
lowlevel.library/QueryKeys
lowlevel.library/ReadJoyPort
lowlevel.library/RemKBInt
lowlevel.library/RemTimerInt
lowlevel.library/RemVBlankInt
lowlevel.library/SetJoyPortAttrsA
lowlevel.library/StartTimerInt
lowlevel.library/StopTimerInt
lowlevel.library/SystemControlA
lowlevel.library/AddKBInt                           lowlevel.library/AddKBInt

   NAME
       AddKBInt - Adds routine to the keyboard interrupt.

   SYNOPSIS
       Handle = AddKBInt(IntRoutine, IntData)
       d0                a0          a1

       APTR AddKBInt(APTR, APTR)

   FUNCTION
       This routine extends the functionality of the keyboard interrupt to
       include IntRoutine.  Since this is an extention of the normal
       keyboard interrupt all of the keyboard handshaking is handled.  The
       keyboard error codes are filtered out and not passed to IntRoutine.

       When a keyboard interrupt occurs the routine pointed to by
       InitRoutine is called.  As with any other assembly routines d0, d1,
       a0 and a1 can be considered scratch, all other registers must have
       their values preserved.  However, upon exit d0 MUST be cleared.
       When the IntRoutine is invoked a1 will contain IntData; also d0 will
       contain the raw key code read from the keyboard.

       IntRoutine will not be called when a reset is received from the
       keyboard.

   NOTE
       The routine added should be as short as possible since it will
       be run for every keypress and release.

       This is a low level function that does not fit the normal Amgia
       multitasking model.  The interrupt installed will have no knowledge
       of which window/screen currently has input focus.

       If your program is to exit without reboot, you MUST call RemKBInt()
       before exiting.

       Only one interrupt routine may be added to the system.  ALWAYS
       check the return value in case some other task has previously
       used this function.

       The Exec Interrupt structure is used for controlling the invocation
       of IntRoutine.  All of the register conventions of interrupt server
       are observed.  This means two additional scratch registers are
       available; a5 (which will contain the address of IntRoutine) and a6.
       The priority used (not that it matters since only one routine is
       possible) is zero.

   INPUTS
       IntRoutine - Pointer to the interrupt routine invoked every
                    keyboard interrupt.
       IntData - Data passed to the interrupt routine in register a1.
                 If more than one long word of data is required this
                 should be a pointer to structure that contains the
                 required data.

   RESULT
       Handle - Pointer to the handle used in manipulating the interrupt.
                NULL if it was not possible create the interrupt.

   SEE ALSO:
       RemKBInt ()
lowlevel.library/AddTimerInt                     lowlevel.library/AddTimerInt
  NAME
       AddTimerInt - Adds an interrupt that is executed at regular intervals

  SYNOPSIS
       TimerIntHandle = AddTimerInt(IntRoutine, IntData)
       d0                           a0          a1

       APTR AddTimerInt(APTR, APTR)

  FUNCTION
       Calling this routine causes the system to allocate a CIA timer
       and set up IntRoutine to service any interrupts caused by the timer.
       Although the timer is allocated it is neither running, nor enabled.
       StartIntTimer() must be called to establish the time interval and
       start the timer.

       When the interrupts occur the routine pointed to by IntRoutine is
       called.  As with any other assembly routines d0, d1, a0 and a1 can
       be considered scratch, all other registers must have their values
       preserved.  However, upon exit d0 MUST be cleared.  When the
       interrupt routine is invoked a1 will contain the value passed to
       this routine as IntData.

       Only a single CIA timer will be allocated by this routine.  So this
       routine may only be called once without an intervening call to
       RemTimerInt().

       The CIA timer used by this routine is not guaranteed to always be
       the same.  This routine utilizes the CIA resource and uses an
       unallocated CIA timer.

  NOTE
       If your program is to exit without reboot, you MUST match all
       calls to this function with calls to RemTimerInt() before exiting.

       Even if you only use the function once in your program; checking
       the return value will make your program more tolerant for
       mulititasking on the Amiga computer platforms.

       An Exec Interrupt structure is created when adding the interupt.
       All of the register conventions of interrupt server are observed
       when invoking IntRoutine.  This means two additional scratch
       registers are available; a5 (which will contain the address of
       IntRoutine) and a6.  The priority used (not that it matters since
       only one routine is possible) is zero.

  INPUTS
       IntRoutine - Pointer to the interrupt routine invoked every
                    TimeInterval
       IntData - Data passed to the interrupt routine in register a1.
                 If more than one long word of data is required this
                 should be a pointer to structure that contains the
                 required data.

  RESULT
       TimerIntHandle - Pointer to the handle used in manipulating the
                        timer interrupt.  NULL if it was not possible
                        create the interrupt.

  SEE ALSO:
       RemTimerInt(), StopTimerInt(), StartTimerInt()
lowlevel.library/AddVBlankInt                   lowlevel.library/AddVBlankInt

   NAME
	AddVBlankInt - Adds routine executed every vertical blank.

   SYNOPSIS
	Handle = AddVBlankInt(IntRoutine, IntData)
	d0		      a0	  a1

	APTR AddVBlankInt(APTR, APTR)

   FUNCTION
	When the VBLANK occurs the routine pointed to by IntRoutine is
	called.  As with any other assembly routines d0, d1, a0 and a1 can
	be considered scratch, all other registers must have their values
	preserved.  However, upon exit d0 MUST be cleared.  When the
	interrupt routine is invoked a1 will contain the value passed to
	this routine as IntData.

   NOTE
	If your program is to exit without reboot, you MUST call
	RemVBlankInt() before exiting.

	Only one interrupt routine may be added to the system.  ALWAYS check
	the return value in case some other task has previously used this
	function.

	An Exec Interrupt structure is created when adding the interupt.
	All of the register conventions of interrupt server are observed
	when invoking IntRoutine.  This means two additional scratch
	registers are available; a5 (which will contain the address of
	IntRoutine) and a6.  The priority used is zero.

   INPUTS
	IntRoutine - Pointer to the interrupt routine invoked every
		     vertical blank.
		     NOTE:  This routine should be as short as possible to
		     minimize its effect to overall system preformance.
	IntData - Data passed to the interrupt routine in register a1.
		  If more than one long word of data is required this
		  should be a pointer to structure that contains the
		  required data.

   RESULT
	Handle - Pointer to the handle used in manipulating the interrupt.
		 NULL if it was not possible create the interrupt.

   SEE ALSO:
	RemVBlankInt()
lowlevel.library/ElapsedTime                     lowlevel.library/ElapsedTime
  NAME
       ElapsedTime - Returns the time elapsed since it was last called.

  SYNOPSIS
       FractionalSeconds = ElapsedTime(Context)
       d0                              a0

       ULONG ElapsedTime(struct EClockVal *)

  FUNCTION
       This function utilizes the timer.device call ReadEClock to get an
       accurate elaspsed time value.  Since the context needs to be
       established the first call to this routine will return a nonsense
       value.

  NOTE
       The return value for this function only allows for sixteen bits
       worth for the integer number of seconds and sixteen bits for the
       factional number of seconds.

       With sixteen bits worth of integer seconds this function can be
       used to timer an interval up to about 16 hours.  If the actual time
       interval is larger this function will return this maximum value.

       The sixteen bits for fractional seconds gives a resolution of
       approximately 20 microseconds.  However, it is not recomended
       to expect this function to be accurate for a time interval of
       less than 200 microseconds.

  INPUTS
       Context - Pointer to an EClockVal structure, two ULONGs.  This was
                 the value returned from ReadEClock() when this function
                 was last called.

  RESULT
       FractionalSeconds - The elapsed time as a fixed point thirty two
                           bit number with the point fixed in the middle.
                           That is, the upper order sixteen bits represent
                           the number of seconds elapsed.  The low order
                           sixteen bit represent the fractional number of
                           seconds elapsed.  This value is limited to about
                           sixteen hours.  Although this value is precise
                           to nearly 20 microseconds it is only accurate to
                           within 200 microseconds.

  SEE ALSO:
       timer.device/ReadEClock()
lowlevel.library/GetKey                               lowlevel.library/GetKey

   NAME
       GetKey - Returns the currently pressed raw key code and qualifiers.

   SYNOPSIS
       Key = GetKey ()
       d0

       ULONG GetKey (VOID)

   FUNCTION
       This function returns the currently pressed non-qualifier key and
       all pressed qualifiers.

       This function is safe within an interrupt.

   NOTE
       This is a low level function that does not fit the normal Amgia
       multitasking model.  The values returned by this function are
       not modified by which window/screen currently has input focus.

   INPUTS
       NONE

   RESULT
       Key - key code for the last non-qualifier key pressed is in the low
             order word.  If no key is pressed this word will be FF.  The
             upper order word contains the qualifiers which can be found
             within the long word as follows:
                       Qualifier               Key
                       LLKB_LSHIFT             Left Shift
                       LLKB_RSHIFT             Rigt Shift
                       LLKB_CAPSLOCK           Caps Lock
                       LLKB_CONTROL            Control
                       LLKB_LALT               Left Alt
                       LLKB_RALT               Right Alt
                       LLKB_LAMIGA             Left Amiga
                       LLKB_RAMIGA             Right Amiga
lowlevel.library/GetLanguageSelection   lowlevel.library/GetLanguageSelection

   NAME
       GetLanguageSelection - Returns the current language selection.

   SYNOPSIS
       Language = GetLanguageSelection()
       d0

       ULONG GetLanguageSelection (VOID)

   FUNCTION
       Determine what the user has specified as a language.

   INPUTS
       NONE

   RESULT
       Language - User specified language, or zero if none has yet been
                  specified.

lowlevel.library/QueryKeys                         lowlevel.library/QueryKeys

   NAME
       QueryKeys - Returns the states for a set of keys.

   SYNOPSIS
       QueryKeys (QueryArray, ArraySize)
                  a0          d1

       VOID QueryKeys(struct KeyQuery *, UBYTE)

   FUNCTION
       Scans the keyboard to determines which, if any, of the raw key codes
       listed in the QueryArray are currently pressed.  The state for each
       code is returned in the array.

       This function may be invoked from within an interrupt, but the size
       of QueryArray should be kept as small as possible.

   NOTE
       This is a low level function that does not fit the normal Amgia
       multitasking model.  The values returned have no knowledge
       of which window/screen currently has input focus.

   INPUTS
       QueryArray - Pointer to a block of memory that consists of raw key
                    codes alternated with the state, filled in by this
                    function, of that key.
       ArraySize - Number of keycode entries in QueryArray.

   RESULT
       NONE
lowlevel.library/ReadJoyPort                     lowlevel.library/ReadJoyPort

   NAME
       ReadJoyPort - Return the state of the selected joy/mouse port.

   SYNOPSIS
       PortState = ReadJoyPort(PortNumber)
       d0                      d0

       ULONG ReadJoyPort(ULONG)                            ;

   FUNCTION
       This function is used to determine what device is attached to the
       joy port and the current position/button state.  The user may attach
       a Mouse, Game Controller, or Joystick to the port and this function
       will dynamically detect which device is attached and return the
       appropriatly formatted PortState.

       To determine the type of controller that is attached, this function
       will clock the Game Controller and/or interpret changes in the joy
       port data.  Valid clocked data from the Game Controller is immediately
       detected.  However, to accuratly determine if a mouse or joystick is
       attached, several calls to this function are required along with some
       movement at the joy port by the user.

       This function always executes immediatly.

   NOTE
       This is a low level single threaded function that does not fit the
       normal Amgia multitasking model.  Only one process can be executing
       this routine at any time.  All others will return immediately with
       JP_TYPE_NOTAVAIL.

       The nature of this routine is not meant to encourage nonmultitasking
       friendly programming practices like polling loops.  If your task
       is waiting for a transition to be returned use a WaitTOF() between
       calls to minimize the total system impact.

       When called the first time for each port this function attempts to
       acquire certain system resources.  In order to aquire these resources
       this function MUST be called from a task, or a DOS process.  If this
       function fails to aquire the necessary resources the function will
       return with JP_TYPE_NOTAVAIL.  Once the resources are aquired (return
       value other than JP_TYPE_NOTAVAIL) this function may be used in
       interrupts.


   INPUTS
       PortNumber - Unsigned long that selects the port to read.  This
                    value should be in the range of 0..3.

   RESULT
       PortState - Bit map that identifys the device and the current
                   state of that device.  The format of the bit map is
                   dependant on the type of device attached.

                   The following constants (defined in
                   <libraries/lowlevel.i> and <libraries/lowlevel.h>)
                   can be used to determine which device is attached and
                   the state of that device :

                   The type of device can be determined by applying
                   the mask JP_TYPE_MASK to the return value and comparing
                   the resultant value with the following:

                       JP_TYPE_NOTAVAIL        port data unavailable
                       JP_TYPE_GAMECTLR        game controller
                       JP_TYPE_MOUSE           mouse
                       JP_TYPE_JOYSTK          joystick
                       JP_TYPE_UNKNOWN         unknown device

                   If type = JP_TYPE_GAMECTLR the bit map of PortState is:
                       JPF_BUTTON_BLUE         Blue - Stop
                       JPF_BUTTON_RED          Red - Select
                       JPF_BUTTON_YELLOW       Yellow - Repeat
                       JPF_BUTTON_GREEN        Green - Shuffle
                       JPF_BUTTON_FORWARD      Charcoal - Forward
                       JPF_BUTTON_REVERSE      Charcoal - Reverse
                       JPF_BUTTON_PLAY         Grey - Play/Pause
                       JPF_JOY_UP              Up
                       JPF_JOY_DOWN            Down
                       JPF_JOY_LEFT            Left
                       JPF_JOY_RIGHT           Right

                   If type = JP_TYPE_JOYSTK the bit map of PortState is:
                       JPF_BUTTON_BLUE         Right
                       JPF_BUTTON_RED          Fire
                       JPF_JOY_UP              Up
                       JPF_JOY_DOWN            Down
                       JPF_JOY_LEFT            Left
                       JPF_JOY_RIGHT           Right

                   If type = JP_TYPE_MOUSE the bit map of PortState is:
                       JPF_BUTTON_BLUE         Right mouse
                       JPF_BUTTON_RED          Left mouse
                       JPF_BUTTON_PLAY         Middle mouse
                       JP_MVERT_MASK           Mask for vertical counter
                       JP_MHORZ_MASK           Mask for horizontal counter

lowlevel.library/RemKBInt                           lowlevel.library/RemKBInt
  NAME
       RemKBInt - Remove a previously installed keyboard interrupt.

  SYNOPSIS
       RemKBInt(Handle)
                a1

       VOID RemKBInt(APTR)

  FUNCTION
       Remove a keyboard interrupt routine previously added with AddKBInt.
       Additionally, any resources involved in the interrupt will be freed.

  INPUTS
       Handle - Pointer to the handle returned from AddKBInt.  This can
                be NULL.

  RESULT
       NONE

  SEE ALSO:
       AddKBInt ()
lowlevel.library/RemTimerInt                     lowlevel.library/RemTimerInt
  NAME
       RemTimerInt - Remove the previously installed timer interrupt.

  SYNOPSIS
       RemTimerInt(TimerIntHandle)
                   a1

       VOID RemTimerInt(APTR)

  FUNCTION
       Calling this routine causes the system to remove a timer interrupt
       routine previously added with AddTimerInt.  Additionally any timer
       resources involved in the timer interval will be freed.

  INPUTS
       TimerIntHandle - Pointer to the handle returned from AddTimerInt().
                        This value may be NULL.

  RESULT
       NONE

  SEE ALSO:
       AddTimerInt(), StopTimerInt(), StartTimerInt()
lowlevel.library/RemVBlankInt                   lowlevel.library/RemVBlankInt
  NAME
	RemVBlankInt - Remove a previously installed vertical blank routine.

  SYNOPSIS
	RemVBlankInt(Handle)
		     a1

	VOID RemVBlankInt(APTR)

  FUNCTION
	Remove a vertical blank interrupt routine previously added with
	AddVBlankInt.  Additionally, any resources involved in the interrupt
	will be freed.

  INPUTS
	Handle - Pointer to the handle returned from AddVBlankInt().
		 This routine will handle a NULL.

  RESULT
	NONE

  SEE ALSO:
	AddVBlankInt()
lowlevel.library/SetJoyPortAttrsA           lowlevel.library/SetJoyPortAttrsA

   NAME
       SetJoyPortAttrsA -- change the attributes of a port.  (V40.27)
       SetJoyPortAttrs -- varargs stub for SetJoyPortAttrsA().  (V40.27)

   SYNOPSIS
       Success = SetJoyPortAttrsA(port, taglist)
       d0                         d0     a1

       BOOL SetJoyPortAttrsA(ULONG, struct TagItem *);

       Success = SetJoyPortAttrs(port, firstTag, ...)

       BOOL SetJoyPortAttrs(ULONG, tag1, tag2, ... );


   FUNCTION
       This function allows modification of several attributes held by
       ReadJoyPort() about both it's operation and the type of controller
       currently plugged into the port.

   NOTES
       ReadJoyPort()'s default behavior is to attempt to automatically
       sense the type of controller plugged into any given port, when
       asked to read that port.  This behavior is beneficial, to allow
       simple detection of the type of controller plugged into the port.
       Unfortunately, rare cases are possible where extremely fine
       mouse movements appear to be real joystick movements.  Also, this
       ability to auto-sense the controller type causes most reads to
       take longer than if there were no auto-sensing.

       SetJoyPortAttrs() is intended to provide for both of these cases.
       It allows the programmer to notify ReadJoyPort() to stop spending
       time attempting to sense which type of controller is in use -- and,
       optionally, to force ReadJoyPort() into utilizing a certain
       controller type.

   INPUTS
       port       - The joyport in question (0-3).
       taglist    - A pointer to an array of tags providing parameters
                    to SetJoyPortAttrs(); if NULL, the function
                    will return TRUE, but do nothing.

   TAGS
       All kinds:

       SJA_Type   - If provided, sets the current controller type to
                    the mouse, joystick, or game controller.  ti_Data can
                    be one of SJA_TYPE_GAMECTLR, SJA_TYPE_MOUSE,
                    SJA_TYPE_JOYSTK, or SJA_TYPE_AUTOSENSE.  If
                    SJA_TYPE_AUTOSENSE is used, ReadJoyPort() will attempt
                    to determine the type of controller plugged into the
                    given port automatically.  If one of the other types
                    is used, ReadJoyPort() will make no attempt to read
                    the given controller as anything other than the
                    type specified.  The default type is SJA_AUTOSENSE.
                    Note -- if you set the type to anything other than
                    autosense, it's your responsibility to return it
                    to autosense mode before exiting.

       SJA_Reinitialize -
                    Return a given port to it's initial state -- force
                    a port to deallocate any allocated resources;
                    return the implied type to SJA_TYPE_AUTOSENSE.

   RESULT
       Success    - A boolean defining success or failure of the function.



lowlevel.library/StartTimerInt                 lowlevel.library/StartTimerInt
  NAME
       StartTimerInt - Start the timer associated with the timer interrupt.

  SYNOPSIS
       StartTimerInt(TimerIntHandle, TimeInterval, Continuous)
                     a1              d0            d1

       VOID StartTimerInt(APTR, ULONG, BOOL)

  FUNCTION
       This routine restarts a stopped timer that is assocatied with a
       timer interrupt created by AddTimerInt().  Before the timer is
       started the time interval is reset.

  INPUTS
       TimerIntHandle - Pointer to the handle returned from AddTimerInt().
                        This must not be NULL or serious problems will
                        occur.
       TimeInterval - Number of micoseconds between interrupts.  The
                      maximum value allowed is 90,000.  If higher values
                      are passed there will be unexpected results.
       Continuous - FALSE for a one shot interrupt.  TRUE for multiple
                    interrupts.

  RESULT
       NONE

  SEE ALSO:
       AddTimerInt(), RemTimerInt(), StopTimerInt()
lowlevel.library/StopTimerInt                   lowlevel.library/StopTimerInt
  NAME
       StopTimerInt - Stop the timer associated with the timer interrupt.

  SYNOPSIS
       StopTimerInt(TimerIntHandle)
                    a1

       VOID StopTimerInt(APTR)

  FUNCTION
       Calling this routine causes the system stop the timer associated
       with the timer interrupt handle passed.

  INPUTS
       TimerIntHandle - Pointer to the handle returned from AddTimerInt().
                        This must not be NULL or serious problems will
                        occur.

  RESULT
       NONE

  SEE ALSO:
       AddTimerInt(), RemTimerInt(), StartTimerInt()
lowlevel.library/SystemControlA               lowlevel.library/SystemControlA

   NAME
       SystemControlA - Method for selectively disabling OS features.
       SystemControl - varargs stub for SystemControlA().

   SYNOPSIS
       FalTag = SystemControlA (tagList)
       d0                       a1

       ULONG SystemControlA (struct TagItem *);

       Failure = SystemControl(firsttag, ...)

       ULONG SystemControl(Tag, ...);

   FUNCTION
       This function is used to alter the operation of the system.  Some of
       the alterations involving controlling what are normally regarded as
       system resources.  In order to minimize confusion only one task is
       allowed to control any part of the system resources.  This prevents
       the possiblity of two task fighting each controlling a part of the
       system.  If the tag is identified as task exculsive it means that
       only one task can hold (set to TRUE) any one of the tags.  If
       another task attempts to set any of these tags TRUE the call to
       SystemControl will fail.

       It is important to remember that SystemControlA can fail.

   NOTE
       This is a low level function and certain tags do not fit the normal
       Amgia multitasking model.

   INPUTS
       tagList - pointer to an array of tags listing the features of the
                 system to be enabled/disabled.

   TAGS
       SCON_TakeOverSys:
       TRUE - Takes over the CPU to ensure that a program gets every ounce
           of CPU time (with the exception of crucial interrupts).  When in
           this mode, the CPU will belong completely to the program.  Task
           switching will be disabled and the program will get the all CPU
           cycles.  This means any calls to the OS that involve
           multitasking in some way will not execute.  Other tasks will not
           run until this tag is used with the data FALSE.  However, during
           a Wait() on a signal, multitasking will automatically be turned
           back on until the signal is recieved.  Once recieved,
           multitasking will again be disabled and the CPU will be
           exclusive to the owning program.
       FALSE - Relinquishes the CPU and reenables multitasking.
       This tag is task exculsive.
       This tag nests.  A task may take over the CPU several times before
       relinquishing it.  However, there must be a matching number of
       calls.

       SCON_KillReq:
       TRUE - Disables system requesters.  These are the reasons for NOT
           disabling system requesters:

           1   No calls in the program will cause a system requester.
           2   The only thing that could cause a requester to appear is the
               lack of a CD in the drive and SCON_CDReboot is CDReboot_On,
               therefore a requester can't appear.
           3   The only disk I/O is via a CD with SCON_CDReboot set to
               CDReboot_On and/or nonvolatile.library.

           When requesters should not be disabled.
           GAME PROGRAMS:
           No DOS calls are used after loading; or SCON_CDReboot is
           CDReboot_On; and nonvolatile.library is used for loading and
           saving user data.

           This fits the above case since; After loading either DOS calls
           are not used fitting reason 1, or the game is accessing the CD
           and has SCON_CDReboot set to CDReboot_On fitting reason 2.  The
           game accesses high scores, game position, etc through the
           nonvolatile.library  meeting the reason 3.
       FALSE - Enables requesters for the program.
       This tag nests.  Tasks may disable requesters several times before
       enabling them.  However, there must be a matching number of calls.

       SCON_CDReboot:
       CDReboot_On - Ejecting the CD will cause a reboot of the system.
           Use this only if the program cannot deal with error conditions.
       CDReboot_Off - Ejecting the CD will not cause a reboot of the
           system.  Use this if the program needs to insert CDs while
           running.
       CDReboot_Default - Restore the default reboot behaviour for this
           system.  This should be used upon exit, if this tag had been
           used to change the reboot behaviour.  For the game machine this
           value is synonomous with CDReboot_On.  For Amiga computers this
           value is synonomous with CDReboot_Off.

           NOTE:  The default reboot behaviour differs depending on the
           platform.  If an program requires a specific behaviour it must
           use this function to set the behaviour.  For example, a CD audio
           mixer would use this tag with the data CDReboot_Off.  This will
           allow the changing of audio CDs on the game machine as well as
           Amiga computers.

           If, however, there is no error detection code at all this tag
           should be used with the data CDReboot_On.

           It is hoped that no program will require CDReboot_On.  If all
           programs check for error condition and recover gracefully such a
           call should never be necessary.  With the default behavior the
           games machine will always reset on disk ejects, and programs
           run from Amiga will not reset.  Thus the leaving the default
           will increase the market for a program to include both types of
           platforms.
       This tag does not nest.

       SCON_StopInput:
       TRUE - Stop input.device from using any CPU.  Also prevents
           input.device from passing along any events from either the
           keyboard and/or port 0.
       This tag is task exclusive.
       This tag is NOT reversable.  Attempting to reverse will result in
       confused/garbled input events.

       SCON_AddCreateKeys:
       unit - Create raw keycodes for the joystick/game controller on unit.
           The unit value is checked for validity and must be either zero,
           or one.  Each different unit value results in some code added to
           the VBlank interrupt chain.
       This tag nests.  The tag SCON_RemCreateKeys is used to undo this
       tag.  Tasks may create keycodes several times before stopping them.
       However, there must be a matching number of calls.

       NOTE:
       When operating in an intuition Window, the controller's blue button
       is the equivilent of the mouse menu button -- therefore, intuition
       will be capturing most blue button events.  If notificiation of
       these events is important, review the documentation for WFLG_RMBTRAP
       in the intuition.library/OpenWindow() autodoc.

       SCON_RemCreateKeys:
       unit - Stop raw keycodes for the joystick/game controller on unit.
           The unit value is checked for validity and must be either zero,
           or one.
       This tag is used to match SCON_AddCreateKeys.

   RESULT
       FailTag - Zero if all tags succeeded.  If non zero indicates a tag
                 that has failed.  It is possible that other tags may
                 fail as well.

                 If any tag fails there will be no change in the system due
                 to other tags.

