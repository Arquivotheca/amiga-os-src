head     40.7;
branch   ;
access   ;
symbols  V40_35:40.7 rel40_34:40.6 rel40_33:40.6 rel40_32:40.6 rel40_29:40.6 rel40_28:40.6 rel40_27:40.5 rel40_26:40.5 rel40_25:40.5 rel40_24:40.5 rel40_23:40.5 rel40_22:40.5 rel40_21:40.5 rel40_20:40.5 rel40_19:40.5 rel40_18:40.5 rel40_17:40.5 rel40_16:40.5 rel40_15:40.5 rel40_14:40.5 rel40_13:40.4 rel40_12:40.3 rel40_11:40.2;
locks    ; strict;
comment  @* @;


40.7
date     93.07.30.16.10.18;  author vertex;  state Exp;
branches ;
next     40.6;

40.6
date     93.05.05.09.58.04;  author gregm;  state Exp;
branches ;
next     40.5;

40.5
date     93.03.23.14.46.55;  author Jim2;  state Exp;
branches ;
next     40.4;

40.4
date     93.03.19.11.41.22;  author Jim2;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.15.16.27.41;  author Jim2;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.12.20.10.21;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.08.10.28.52;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.02.13.13.00;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Assembler style includes for the interfacing to lowlevel library.
@


40.7
log
@Autodoc and include cleanup
@
text
@        IFND    LIBRARIES_LOWLEVEL_I
LIBRARIES_LOWLEVEL_I  SET 1
**
**      $Id: lowlevel.i,v 40.6 93/05/05 09:58:04 gregm Exp Locker: gregm $
**
**      lowlevel.library interface structures and definitions
**
**      (C) Copyright 1993 Commodore-Amiga, Inc.
**      All Rights Reserved
**

;---------------------------------------------------------------------------

    IFND EXEC_TYPES_I
    INCLUDE "exec/types.i"
    ENDC

    IFND UTILITY_TAGITEM_I
    INCLUDE "utility/tagitem.i"
    ENDC

;---------------------------------------------------------------------------

; structure for use with QueryKeys()
   STRUCTURE KeyQuery,0
        UWORD kq_KeyCode
        UWORD kq_Pressed
   LABEL KeyQuery_SIZEOF

;---------------------------------------------------------------------------

; bits in the return value of GetKey()
        BITDEF  LLK,LSHIFT,16
        BITDEF  LLK,RSHIFT,17
        BITDEF  LLK,CAPSLOCK,18
        BITDEF  LLK,CONTROL,19
        BITDEF  LLK,LALT,20
        BITDEF  LLK,RALT,21
        BITDEF  LLK,LAMIGA,22
        BITDEF  LLK,RAMIGA,23

;---------------------------------------------------------------------------

; Tags for SetJoyPortAttrs()
;
SJA_Dummy         equ (TAG_USER+$00C00100)
SJA_Type          equ (SJA_Dummy+1) ; force type to mouse, joy, game cntrlr
SJA_Reinitialize  equ (SJA_Dummy+2) ; free potgo bits, reset to autosense

; Controller types for SJA_Type tag
SJA_TYPE_AUTOSENSE equ 0
SJA_TYPE_GAMECTLR  equ 1
SJA_TYPE_MOUSE     equ 2
SJA_TYPE_JOYSTK    equ 3

;---------------------------------------------------------------------------

; ReadJoyPort() retunr value definitions

; Port types
JP_TYPE_NOTAVAIL equ (00<<28)        ; port data unavailable
JP_TYPE_GAMECTLR equ (01<<28)        ; port has game controller
JP_TYPE_MOUSE    equ (02<<28)        ; port has mouse
JP_TYPE_JOYSTK   equ (03<<28)        ; port has joystick
JP_TYPE_UNKNOWN  equ (04<<28)        ; port has unknown device
JP_TYPE_MASK     equ (15<<28)        ; controller type

; Button types, valid for all types except JP_TYPE_NOTAVAIL
        BITDEF  JP,BUTTON_BLUE,23     ; Blue - Stop; Right Mouse
        BITDEF  JP,BUTTON_RED,22      ; Red - Select; Left Mouse; Joystick Fire
        BITDEF  JP,BUTTON_YELLOW,21   ; Yellow - Repeat
        BITDEF  JP,BUTTON_GREEN,20    ; Green - Shuffle
        BITDEF  JP,BUTTON_FORWARD,19  ; Charcoal - Forward
        BITDEF  JP,BUTTON_REVERSE,18  ; Charcoal - Reverse
        BITDEF  JP,BUTTON_PLAY,17     ; Grey - Play/Pause; Middle Mouse

JP_BUTTON_MASK equ (JPF_BUTTON_BLUE|JPF_BUTTON_RED|JPF_BUTTON_YELLOW|JPF_BUTTON_GREEN|JPF_BUTTON_FORWARD|JPF_BUTTON_REVERSE|JPF_BUTTON_PLAY)

; Direction types, valid for JP_TYPE_GAMECTLR and JP_TYPE_JOYSTK
        BITDEF  JP,JOY_UP,3
        BITDEF  JP,JOY_DOWN,2
        BITDEF  JP,JOY_LEFT,1
        BITDEF  JP,JOY_RIGHT,0

JP_DIRECTION_MASK equ (JPF_JOY_UP|JPF_JOY_DOWN|JPF_JOY_LEFT|JPF_JOY_RIGHT)

; Mouse position reports, valid for JP_TYPE_MOUSE
JP_MHORZ_MASK equ (255<<0)        ; horizontal position
JP_MVERT_MASK equ (255<<8)        ; vertical position
JP_MOUSE_MASK equ (JP_MHORZ_MASK|JP_MVERT_MASK)

; Obsolete ReadJoyPort() definitions, here for source code compatibility only.
; Please do NOT use in new code.
        BITDEF  JP,BTN1,JPB_BUTTON_BLUE
        BITDEF  JP,BTN2,JPB_BUTTON_RED
        BITDEF  JP,BTN3,JPB_BUTTON_YELLOW
        BITDEF  JP,BTN4,JPB_BUTTON_GREEN
        BITDEF  JP,BTN5,JPB_BUTTON_FORWARD
        BITDEF  JP,BTN6,JPB_BUTTON_REVERSE
        BITDEF  JP,BTN7,JPB_BUTTON_PLAY
        BITDEF  JP,UP,JPB_JOY_UP
        BITDEF  JP,DOWN,JPB_JOY_DOWN
        BITDEF  JP,LEFT,JPB_JOY_LEFT
        BITDEF  JP,RIGHT,JPB_JOY_RIGHT

;---------------------------------------------------------------------------

; Tags for SystemControl()
SCON_Dummy         equ (TAG_USER+$00C00000)
SCON_TakeOverSys   equ (SCON_Dummy+0)
SCON_KillReq       equ (SCON_Dummy+1)
SCON_CDReboot      equ (SCON_Dummy+2)
SCON_StopInput     equ (SCON_Dummy+3)
SCON_AddCreateKeys equ (SCON_Dummy+4)
SCON_RemCreateKeys equ (SCON_Dummy+5)

; Reboot control values for use with the SCON_CDReboot tag
CDReboot_On      equ 1
CDReboot_Off     equ 0
CDReboot_Default equ 2

;---------------------------------------------------------------------------

; Rawkey codes returned when using SCON_AddCreateKeys with SystemControl()

RAWKEY_PORT0_BUTTON_BLUE        equ     $72
RAWKEY_PORT0_BUTTON_RED         equ     $78
RAWKEY_PORT0_BUTTON_YELLOW      equ     $77
RAWKEY_PORT0_BUTTON_GREEN       equ     $76
RAWKEY_PORT0_BUTTON_FORWARD     equ     $75
RAWKEY_PORT0_BUTTON_REVERSE     equ     $74
RAWKEY_PORT0_BUTTON_PLAY        equ     $73
RAWKEY_PORT0_JOY_UP             equ     $79
RAWKEY_PORT0_JOY_DOWN           equ     $7A
RAWKEY_PORT0_JOY_LEFT           equ     $7C
RAWKEY_PORT0_JOY_RIGHT          equ     $7B

RAWKEY_PORT1_BUTTON_BLUE        equ     $172
RAWKEY_PORT1_BUTTON_RED         equ     $178
RAWKEY_PORT1_BUTTON_YELLOW      equ     $177
RAWKEY_PORT1_BUTTON_GREEN       equ     $176
RAWKEY_PORT1_BUTTON_FORWARD     equ     $175
RAWKEY_PORT1_BUTTON_REVERSE     equ     $174
RAWKEY_PORT1_BUTTON_PLAY        equ     $173
RAWKEY_PORT1_JOY_UP             equ     $179
RAWKEY_PORT1_JOY_DOWN           equ     $17A
RAWKEY_PORT1_JOY_LEFT           equ     $17C
RAWKEY_PORT1_JOY_RIGHT          equ     $17B

RAWKEY_PORT2_BUTTON_BLUE        equ     $272
RAWKEY_PORT2_BUTTON_RED         equ     $278
RAWKEY_PORT2_BUTTON_YELLOW      equ     $277
RAWKEY_PORT2_BUTTON_GREEN       equ     $276
RAWKEY_PORT2_BUTTON_FORWARD     equ     $275
RAWKEY_PORT2_BUTTON_REVERSE     equ     $274
RAWKEY_PORT2_BUTTON_PLAY        equ     $273
RAWKEY_PORT2_JOY_UP             equ     $279
RAWKEY_PORT2_JOY_DOWN           equ     $27A
RAWKEY_PORT2_JOY_LEFT           equ     $27C
RAWKEY_PORT2_JOY_RIGHT          equ     $27B

RAWKEY_PORT3_BUTTON_BLUE        equ     $372
RAWKEY_PORT3_BUTTON_RED         equ     $378
RAWKEY_PORT3_BUTTON_YELLOW      equ     $377
RAWKEY_PORT3_BUTTON_GREEN       equ     $376
RAWKEY_PORT3_BUTTON_FORWARD     equ     $375
RAWKEY_PORT3_BUTTON_REVERSE     equ     $374
RAWKEY_PORT3_BUTTON_PLAY        equ     $373
RAWKEY_PORT3_JOY_UP             equ     $379
RAWKEY_PORT3_JOY_DOWN           equ     $37A
RAWKEY_PORT3_JOY_LEFT           equ     $37C
RAWKEY_PORT3_JOY_RIGHT          equ     $37B

;---------------------------------------------------------------------------

; return value for GetLanguageSelection()
LANG_UNKNOWN    equ 0
LANG_AMERICAN   equ 1   ; American English
LANG_ENGLISH    equ 2   ; British English
LANG_GERMAN     equ 3
LANG_FRENCH     equ 4
LANG_SPANISH    equ 5
LANG_ITALIAN    equ 6
LANG_PORTUGUESE equ 7
LANG_DANISH     equ 8
LANG_DUTCH      equ 9
LANG_NORWEGIAN  equ 10
LANG_FINNISH    equ 11
LANG_SWEDISH    equ 12
LANG_JAPANESE   equ 13
LANG_CHINESE    equ 14
LANG_ARABIC     equ 15
LANG_GREEK      equ 16
LANG_HEBREW     equ 17
LANG_KOREAN     equ 18

;---------------------------------------------------------------------------

        ENDC    ; LIBRARIES_LOWLEVEL_I
@


40.6
log
@Added tags for SetJoyPortAttrs().
@
text
@d4 1
a4 1
**      $Id: lowlevel.i,v 40.5 93/03/23 14:46:55 Jim2 Exp $
d14 2
a15 2
    IFND    EXEC_TYPES_I
    include "exec/types.i"
d18 2
a19 2
    IFND        UTILITY_TAGITEM_I
        INCLUDE "utility/tagitem.i"
d22 7
a28 4
 STRUCTURE KeyQuery,0
        UWORD   kq_KeyCode
        UWORD   kq_Pressed
        LABEL   KeyQuery_SIZEOF
d30 1
d32 1
d42 2
a43 1
;
d46 3
a48 2
SJA_Dummy               EQU     (TAG_USER+$00C00100)
SJA_Type                EQU     (SJA_Dummy+1)           ; force controller type to mouse, joy, game controller
d50 5
a54 5
; Controller types for ti_Data, when using SJA_Type w/ SetJoyPortAttrs()
SJA_TYPE_AUTOSENSE      EQU     0
SJA_TYPE_GAMECTLR       EQU     1
SJA_TYPE_MOUSE          EQU     2
SJA_TYPE_JOYSTK         EQU     3
d56 1
a56 3
;
; ***** ReadJoyPort() Return value equates *****
;
d58 1
a58 4
;
; Port Type Equates :
;
JP_TYPE_MASK            equ     (15<<28)        ; controller type
d60 45
a104 5
JP_TYPE_NOTAVAIL        equ     (00<<28)        ; port data unavailable
JP_TYPE_GAMECTLR        equ     (01<<28)        ; port has game controller
JP_TYPE_MOUSE           equ     (02<<28)        ; port has mouse
JP_TYPE_JOYSTK          equ     (03<<28)        ; port has joystick
JP_TYPE_UNKNOWN         equ     (04<<28)        ; port has unknown device
d106 1
a106 10
;
; Button Equates - Valid for types:  all except NOTAVAIL
;
        BITDEF  JP,BUTTON_BLUE,23               ; Blue - Stop; Right Mouse
        BITDEF  JP,BUTTON_RED,22                ; Red - Select; Left Mouse; Joystick Fire
        BITDEF  JP,BUTTON_YELLOW,21             ; Yellow - Repeat
        BITDEF  JP,BUTTON_GREEN,20              ; Green - Shuffle
        BITDEF  JP,BUTTON_FORWARD,19            ; Charcoal - Forward
        BITDEF  JP,BUTTON_REVERSE,18            ; Charcoal - Reverse
        BITDEF  JP,BUTTON_PLAY,17               ; Grey - Play/Pause; Middle Mouse
d108 13
a120 1
JP_BUTTON_MASK          EQU     (JPF_BUTTON_BLUE|JPF_BUTTON_RED|JPF_BUTTON_YELLOW|JPF_BUTTON_GREEN|JPF_BUTTON_FORWARD|JPF_BUTTON_REVERSE|JPF_BUTTON_PLAY)
d122 1
a122 7
;
; Direction Equates - Valid for types:  GAMECTLR, JOYSTK
;
        BITDEF  JP,JOY_UP,3                     ; Up
        BITDEF  JP,JOY_DOWN,2                   ; Down
        BITDEF  JP,JOY_LEFT,1                   ; Left
        BITDEF  JP,JOY_RIGHT,0                  ; Right
d124 1
a124 7
JP_DIRECTION_MASK       EQU     (JPF_JOY_UP|JPF_JOY_DOWN|JPF_JOY_LEFT|JPF_JOY_RIGHT)

;
; Mouse position Equates - Valid for types: MOUSE
;
JP_MHORZ_MASK           equ     (255<<0)        ; horizontal position
JP_MVERT_MASK           equ     (255<<8)        ; vertical position
d126 47
a172 1
JP_MOUSE_MASK           EQU     (JP_MHORZ_MASK|JP_MVERT_MASK)
d174 1
a174 105


*
* Rawkey codes returned when using SCON_AddCreateKeys
*

RAWKEY_PORT0_BUTTON_BLUE        EQU     $72
RAWKEY_PORT0_BUTTON_RED         EQU     $78
RAWKEY_PORT0_BUTTON_YELLOW      EQU     $77
RAWKEY_PORT0_BUTTON_GREEN       EQU     $76
RAWKEY_PORT0_BUTTON_FORWARD     EQU     $75
RAWKEY_PORT0_BUTTON_REVERSE     EQU     $74
RAWKEY_PORT0_BUTTON_PLAY        EQU     $73
RAWKEY_PORT0_JOY_UP             EQU     $79
RAWKEY_PORT0_JOY_DOWN           EQU     $7A
RAWKEY_PORT0_JOY_LEFT           EQU     $7C
RAWKEY_PORT0_JOY_RIGHT          EQU     $7B

RAWKEY_PORT1_BUTTON_BLUE        EQU     $172
RAWKEY_PORT1_BUTTON_RED         EQU     $178
RAWKEY_PORT1_BUTTON_YELLOW      EQU     $177
RAWKEY_PORT1_BUTTON_GREEN       EQU     $176
RAWKEY_PORT1_BUTTON_FORWARD     EQU     $175
RAWKEY_PORT1_BUTTON_REVERSE     EQU     $174
RAWKEY_PORT1_BUTTON_PLAY        EQU     $173
RAWKEY_PORT1_JOY_UP             EQU     $179
RAWKEY_PORT1_JOY_DOWN           EQU     $17A
RAWKEY_PORT1_JOY_LEFT           EQU     $17C
RAWKEY_PORT1_JOY_RIGHT          EQU     $17B

RAWKEY_PORT2_BUTTON_BLUE        EQU     $272
RAWKEY_PORT2_BUTTON_RED         EQU     $278
RAWKEY_PORT2_BUTTON_YELLOW      EQU     $277
RAWKEY_PORT2_BUTTON_GREEN       EQU     $276
RAWKEY_PORT2_BUTTON_FORWARD     EQU     $275
RAWKEY_PORT2_BUTTON_REVERSE     EQU     $274
RAWKEY_PORT2_BUTTON_PLAY        EQU     $273
RAWKEY_PORT2_JOY_UP             EQU     $279
RAWKEY_PORT2_JOY_DOWN           EQU     $27A
RAWKEY_PORT2_JOY_LEFT           EQU     $27C
RAWKEY_PORT2_JOY_RIGHT          EQU     $27B

RAWKEY_PORT3_BUTTON_BLUE        EQU     $372
RAWKEY_PORT3_BUTTON_RED         EQU     $378
RAWKEY_PORT3_BUTTON_YELLOW      EQU     $377
RAWKEY_PORT3_BUTTON_GREEN       EQU     $376
RAWKEY_PORT3_BUTTON_FORWARD     EQU     $375
RAWKEY_PORT3_BUTTON_REVERSE     EQU     $374
RAWKEY_PORT3_BUTTON_PLAY        EQU     $373
RAWKEY_PORT3_JOY_UP             EQU     $379
RAWKEY_PORT3_JOY_DOWN           EQU     $37A
RAWKEY_PORT3_JOY_LEFT           EQU     $37C
RAWKEY_PORT3_JOY_RIGHT          EQU     $37B


*
* Tags for SystemControlA()
*

SCON_Dummy              EQU     (TAG_USER+$00C00000)
SCON_TakeOverSys        EQU     (SCON_Dummy+0)
SCON_KillReq            EQU     (SCON_Dummy+1)
SCON_CDReboot           EQU     (SCON_Dummy+2)
SCON_StopInput          EQU     (SCON_Dummy+3)
SCON_AddCreateKeys      EQU     (SCON_Dummy+4)
SCON_RemCreateKeys      EQU     (SCON_Dummy+5)

CDReboot_On     EQU     1
CDReboot_Off    EQU     0
CDReboot_Default EQU    2

*
* Human Language Defines
*

LANG_UNKNOWN    EQU     0
LANG_AMERICAN   EQU     1       /* American English     */
LANG_ENGLISH    EQU     2       /* British English      */
LANG_GERMAN     EQU     3
LANG_FRENCH     EQU     4
LANG_SPANISH    EQU     5
LANG_ITALIAN    EQU     6
LANG_PORTUGUESE EQU     7
LANG_DANISH     EQU     8
LANG_DUTCH      EQU     9
LANG_NORWEGIAN  EQU     10
LANG_FINNISH    EQU     11
LANG_SWEDISH    EQU     12
LANG_JAPANESE   EQU     13
LANG_CHINESE    EQU     14
LANG_ARABIC     EQU     15
LANG_GREEK      EQU     16
LANG_HEBREW     EQU     17
LANG_KOREAN     EQU     18

*
* Original, less descriptive gamecontroller button definitions.
*
        BITDEF  JP,BTN1,JPB_BUTTON_BLUE         ; Blue - Stop
        BITDEF  JP,BTN2,JPB_BUTTON_RED          ; Red - Select
        BITDEF  JP,BTN3,JPB_BUTTON_YELLOW       ; Yellow - Repeat
        BITDEF  JP,BTN4,JPB_BUTTON_GREEN        ; Green - Shuffle
        BITDEF  JP,BTN5,JPB_BUTTON_FORWARD      ; Charcoal - Forward
        BITDEF  JP,BTN6,JPB_BUTTON_REVERSE      ; Charcoal - Reverse
        BITDEF  JP,BTN7,JPB_BUTTON_PLAY         ; Grey - Play/Pause
d176 20
d197 1
a197 10
;
; Direction Equates
;
        BITDEF  JP,UP,JPB_JOY_UP                ; Up
        BITDEF  JP,DOWN,JPB_JOY_DOWN            ; Down
        BITDEF  JP,LEFT,JPB_JOY_LEFT            ; Left
        BITDEF  JP,RIGHT,JPB_JOY_RIGHT          ; Right



d199 1
a199 3


    ENDC
@


40.5
log
@Played with the defintions for the tags of SystemControlA().
@
text
@d1 1
a1 1
	IFND    LIBRARIES_LOWLEVEL_I
d4 1
a4 1
**	$Id: lowlevel.i,v 40.4 93/03/19 11:41:22 Jim2 Exp Locker: Jim2 $
d6 1
a6 1
**	lowlevel.library interface structures and definitions
d8 2
a9 2
**	(C) Copyright 1993 Commodore-Amiga, Inc.
**	All Rights Reserved
d18 2
a19 2
    IFND	UTILITY_TAGITEM_I
	INCLUDE	"utility/tagitem.i"
d23 3
a25 3
	UWORD	kq_KeyCode
	UWORD	kq_Pressed
	LABEL	KeyQuery_SIZEOF
d28 20
a47 8
	BITDEF	LLK,LSHIFT,16
	BITDEF	LLK,RSHIFT,17
	BITDEF	LLK,CAPSLOCK,18
	BITDEF	LLK,CONTROL,19
	BITDEF	LLK,LALT,20
	BITDEF	LLK,RALT,21
	BITDEF	LLK,LAMIGA,22
	BITDEF	LLK,RAMIGA,23
d56 1
a56 1
JP_TYPE_MASK		equ	(15<<28)	; controller type
d58 5
a62 5
JP_TYPE_NOTAVAIL	equ	(00<<28)	; port data unavailable
JP_TYPE_GAMECTLR	equ	(01<<28)	; port has game controller
JP_TYPE_MOUSE		equ	(02<<28)	; port has mouse
JP_TYPE_JOYSTK		equ	(03<<28)	; port has joystick
JP_TYPE_UNKNOWN		equ	(04<<28)	; port has unknown device
d67 7
a73 7
	BITDEF	JP,BUTTON_BLUE,23		; Blue - Stop; Right Mouse
	BITDEF	JP,BUTTON_RED,22		; Red - Select; Left Mouse; Joystick Fire
	BITDEF	JP,BUTTON_YELLOW,21		; Yellow - Repeat
	BITDEF	JP,BUTTON_GREEN,20		; Green - Shuffle
	BITDEF	JP,BUTTON_FORWARD,19		; Charcoal - Forward
	BITDEF	JP,BUTTON_REVERSE,18		; Charcoal - Reverse
	BITDEF	JP,BUTTON_PLAY,17		; Grey - Play/Pause; Middle Mouse
d75 1
a75 1
JP_BUTTON_MASK		EQU	(JPF_BUTTON_BLUE|JPF_BUTTON_RED|JPF_BUTTON_YELLOW|JPF_BUTTON_GREEN|JPF_BUTTON_FORWARD|JPF_BUTTON_REVERSE|JPF_BUTTON_PLAY)
d80 4
a83 4
	BITDEF	JP,JOY_UP,3			; Up
	BITDEF	JP,JOY_DOWN,2			; Down
	BITDEF	JP,JOY_LEFT,1			; Left
	BITDEF	JP,JOY_RIGHT,0			; Right
d85 1
a85 1
JP_DIRECTION_MASK	EQU	(JPF_JOY_UP|JPF_JOY_DOWN|JPF_JOY_LEFT|JPF_JOY_RIGHT)
d90 2
a91 2
JP_MHORZ_MASK		equ	(255<<0)	; horizontal position
JP_MVERT_MASK		equ	(255<<8)	; vertical position
d93 1
a93 1
JP_MOUSE_MASK		EQU	(JP_MHORZ_MASK|JP_MVERT_MASK)
d101 47
a147 47
RAWKEY_PORT0_BUTTON_BLUE	EQU	$72
RAWKEY_PORT0_BUTTON_RED		EQU	$78
RAWKEY_PORT0_BUTTON_YELLOW	EQU	$77
RAWKEY_PORT0_BUTTON_GREEN	EQU	$76
RAWKEY_PORT0_BUTTON_FORWARD	EQU	$75
RAWKEY_PORT0_BUTTON_REVERSE	EQU	$74
RAWKEY_PORT0_BUTTON_PLAY	EQU	$73
RAWKEY_PORT0_JOY_UP		EQU	$79
RAWKEY_PORT0_JOY_DOWN		EQU	$7A
RAWKEY_PORT0_JOY_LEFT		EQU	$7C
RAWKEY_PORT0_JOY_RIGHT		EQU	$7B

RAWKEY_PORT1_BUTTON_BLUE	EQU	$172
RAWKEY_PORT1_BUTTON_RED		EQU	$178
RAWKEY_PORT1_BUTTON_YELLOW	EQU	$177
RAWKEY_PORT1_BUTTON_GREEN	EQU	$176
RAWKEY_PORT1_BUTTON_FORWARD	EQU	$175
RAWKEY_PORT1_BUTTON_REVERSE	EQU	$174
RAWKEY_PORT1_BUTTON_PLAY	EQU	$173
RAWKEY_PORT1_JOY_UP		EQU	$179
RAWKEY_PORT1_JOY_DOWN		EQU	$17A
RAWKEY_PORT1_JOY_LEFT		EQU	$17C
RAWKEY_PORT1_JOY_RIGHT		EQU	$17B

RAWKEY_PORT2_BUTTON_BLUE	EQU	$272
RAWKEY_PORT2_BUTTON_RED		EQU	$278
RAWKEY_PORT2_BUTTON_YELLOW	EQU	$277
RAWKEY_PORT2_BUTTON_GREEN	EQU	$276
RAWKEY_PORT2_BUTTON_FORWARD	EQU	$275
RAWKEY_PORT2_BUTTON_REVERSE	EQU	$274
RAWKEY_PORT2_BUTTON_PLAY	EQU	$273
RAWKEY_PORT2_JOY_UP		EQU	$279
RAWKEY_PORT2_JOY_DOWN		EQU	$27A
RAWKEY_PORT2_JOY_LEFT		EQU	$27C
RAWKEY_PORT2_JOY_RIGHT		EQU	$27B

RAWKEY_PORT3_BUTTON_BLUE	EQU	$372
RAWKEY_PORT3_BUTTON_RED		EQU	$378
RAWKEY_PORT3_BUTTON_YELLOW	EQU	$377
RAWKEY_PORT3_BUTTON_GREEN	EQU	$376
RAWKEY_PORT3_BUTTON_FORWARD	EQU	$375
RAWKEY_PORT3_BUTTON_REVERSE	EQU	$374
RAWKEY_PORT3_BUTTON_PLAY	EQU	$373
RAWKEY_PORT3_JOY_UP		EQU	$379
RAWKEY_PORT3_JOY_DOWN		EQU	$37A
RAWKEY_PORT3_JOY_LEFT		EQU	$37C
RAWKEY_PORT3_JOY_RIGHT		EQU	$37B
d154 11
a164 11
SCON_Dummy		EQU	(TAG_USER+$00C00000)
SCON_TakeOverSys	EQU	(SCON_Dummy+0)
SCON_KillReq		EQU	(SCON_Dummy+1)
SCON_CDReboot		EQU	(SCON_Dummy+2)
SCON_StopInput		EQU	(SCON_Dummy+3)
SCON_AddCreateKeys	EQU	(SCON_Dummy+4)
SCON_RemCreateKeys	EQU	(SCON_Dummy+5)

CDReboot_On	EQU	1
CDReboot_Off	EQU	0
CDReboot_Default EQU	2
d170 19
a188 19
LANG_UNKNOWN	EQU	0
LANG_AMERICAN	EQU	1	/* American English	*/
LANG_ENGLISH	EQU	2	/* British English	*/
LANG_GERMAN	EQU	3
LANG_FRENCH	EQU	4
LANG_SPANISH	EQU	5
LANG_ITALIAN	EQU	6
LANG_PORTUGUESE	EQU	7
LANG_DANISH	EQU	8
LANG_DUTCH	EQU	9
LANG_NORWEGIAN	EQU	10
LANG_FINNISH	EQU	11
LANG_SWEDISH	EQU	12
LANG_JAPANESE	EQU	13
LANG_CHINESE	EQU	14
LANG_ARABIC	EQU	15
LANG_GREEK	EQU	16
LANG_HEBREW	EQU	17
LANG_KOREAN	EQU	18
d193 7
a199 7
	BITDEF	JP,BTN1,JPB_BUTTON_BLUE		; Blue - Stop
	BITDEF	JP,BTN2,JPB_BUTTON_RED		; Red - Select
	BITDEF	JP,BTN3,JPB_BUTTON_YELLOW	; Yellow - Repeat
	BITDEF	JP,BTN4,JPB_BUTTON_GREEN	; Green - Shuffle
	BITDEF	JP,BTN5,JPB_BUTTON_FORWARD	; Charcoal - Forward
	BITDEF	JP,BTN6,JPB_BUTTON_REVERSE	; Charcoal - Reverse
	BITDEF	JP,BTN7,JPB_BUTTON_PLAY		; Grey - Play/Pause
d205 4
a208 4
	BITDEF	JP,UP,JPB_JOY_UP		; Up
	BITDEF	JP,DOWN,JPB_JOY_DOWN		; Down
	BITDEF	JP,LEFT,JPB_JOY_LEFT		; Left
	BITDEF	JP,RIGHT,JPB_JOY_RIGHT		; Right
@


40.4
log
@Use " on the include file names.
@
text
@d4 1
a4 1
**	$Id: lowlevel.i,v 40.3 93/03/15 16:27:41 Jim2 Exp Locker: Jim2 $
d139 1
a139 1
* Tags for SystemControl()
d142 7
a148 6
SCON_TakeOverSys	EQU	(TAG_USER+$00C00000)
SCON_KillReq	EQU	(SCON_TakeOverSys+1)
SCON_CDReboot	EQU	(SCON_KillReq+1)
SCON_StopInput	EQU	(SCON_CDReboot+1)
SCON_AddCreateKeys	EQU	(SCON_StopInput+1)
SCON_RemCreateKeys	EQU	(SCON_AddCreateKeys+1)
@


40.3
log
@Added multiple port raw key codes.
@
text
@d4 1
a4 1
**	$Id: lowlevel.i,v 40.2 93/03/12 20:10:21 Jim2 Exp Locker: Jim2 $
d15 1
a15 1
    include 'exec/types.i'
d19 1
a19 1
	INCLUDE	'utility/tagitem.i'
@


40.2
log
@Added rawkey codes for joystick/game controller input events.
Changed to defines for the buttons to be more verbose.
@
text
@d4 1
a4 1
**	$Id: lowlevel.i,v 40.1 93/03/08 10:28:52 Jim2 Exp Locker: Jim2 $
d89 47
a135 11
RAWKEY_BUTTON_BLUE	EQU	$72
RAWKEY_BUTTON_RED	EQU	$78
RAWKEY_BUTTON_YELLOW	EQU	$77
RAWKEY_BUTTON_GREEN	EQU	$76
RAWKEY_BUTTON_FORWARD	EQU	$75
RAWKEY_BUTTON_REVERSE	EQU	$74
RAWKEY_BUTTON_PLAY	EQU	$73
RAWKEY_JOY_UP		EQU	$79
RAWKEY_JOY_DOWN		EQU	$7A
RAWKEY_JOY_LEFT		EQU	$7C
RAWKEY_JOY_RIGHT	EQU	$7B
@


40.1
log
@Added to the comments.  Created masks for reading the various
fields in the return value of ReadJoyPort.
@
text
@d4 1
a4 1
**	$Id: lowlevel.i,v 40.0 93/03/02 13:13:00 Jim2 Exp Locker: Jim2 $
d6 1
a6 1
**	lowlevel.library interface structres and definitions
d55 7
a61 8
	BITDEF	JP,BTN1,23			; Blue - Stop; Right Mouse
	BITDEF	JP,BTN2,22			; Red - Select; Left Mouse; Joystick Fire
	BITDEF	JP,BTN3,21			; Yellow - Repeat
	BITDEF	JP,BTN4,20			; Green - Shuffle
	BITDEF	JP,BTN5,19			; Charcoal - Forward
	BITDEF	JP,BTN6,18			; Charcoal - Reverse
	BITDEF	JP,BTN7,17			; Grey - Play/Pause; Middle Mouse
	BITDEF	JP,RSVDBTN,16			; Reserved
d63 1
a63 1
JP_BTN_MASK		EQU	(JPF_BTN1|JPF_BTN2|JPF_BTN3|JPF_BTN4|JPF_BTN5|JPF_BTN6|JPF_BTN7|JPF_RSVDBTN)
d68 4
a71 4
	BITDEF	JP,UP,3				; Up
	BITDEF	JP,DOWN,2			; Down
	BITDEF	JP,LEFT,1			; Left
	BITDEF	JP,RIGHT,0			; Right
d73 1
a73 1
JP_DIRECTION_MASK	EQU	(JPF_UP|JPF_DOWN|JPF_LEFT|JPF_RIGHT)
d84 18
d110 2
d140 25
@


40.0
log
@Renamed from game.i
@
text
@d4 1
a4 1
**	$Id: game.i,v 40.3 93/02/24 15:43:09 Jim2 Exp Locker: Jim2 $
d53 1
a53 1
; Button Equates :
d61 1
a61 1
	BITDEF	JP,BTN7,17			; Grey - Play/Pause
d63 3
d67 1
a67 1
; Direction Equates :
d73 3
d77 1
a77 1
; Mouse Equates :
d82 1
@
