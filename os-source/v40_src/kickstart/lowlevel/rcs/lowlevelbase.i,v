head     40.9;
branch   ;
access   ;
symbols  V40_35:40.9 rel40_34:40.8 rel40_33:40.8 rel40_32:40.8 rel40_29:40.8 rel40_28:40.8 rel40_27:40.7 rel40_26:40.7 rel40_25:40.7 rel40_24:40.7 rel40_23:40.7 rel40_22:40.6 rel40_21:40.6 rel40_20:40.6 rel40_19:40.6 rel40_18:40.6 rel40_17:40.6 rel40_16:40.6 rel40_15:40.5 rel40_14:40.4 rel40_13:40.4 rel40_12:40.3 rel40_11:40.3;
locks    ; strict;
comment  @* @;


40.9
date     93.07.30.16.11.27;  author vertex;  state Exp;
branches ;
next     40.8;

40.8
date     93.05.05.09.57.00;  author gregm;  state Exp;
branches ;
next     40.7;

40.7
date     93.04.19.13.40.32;  author Jim2;  state Exp;
branches ;
next     40.6;

40.6
date     93.03.31.18.52.52;  author Jim2;  state Exp;
branches ;
next     40.5;

40.5
date     93.03.26.17.43.31;  author Jim2;  state Exp;
branches ;
next     40.4;

40.4
date     93.03.19.11.36.14;  author Jim2;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.12.20.07.11;  author Jim2;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.10.19.55.29;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.08.10.37.07;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.02.13.12.14;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Assembler style includes for the library base for lowlevel library.
@


40.9
log
@Autodoc and include cleanup
@
text
@******************************************************************************
*
*       $Id: lowlevelbase.i,v 40.8 93/05/05 09:57:00 gregm Exp $
*
******************************************************************************
*
*       $Log:   lowlevelbase.i,v $
* Revision 40.8  93/05/05  09:57:00  gregm
* added fields for RJPVector -- the readjoyport() locking jump vector.
* added structs for port2, 3.
*
* Revision 40.7  93/04/19  13:40:32  Jim2
* Moved the storage location for the orginal easyrequest vector
* from the library base to the setfunction memory.
*
* Revision 40.6  93/03/31  18:52:52  Jim2
* Extend the library base for the disk version to support the
* VBlank counter (CI105).  Also added macros for debugging.
*
* Revision 40.5  93/03/26  17:43:31  Jim2
* Added field to allow for VBlank counting.  Also to support
* opening the PotGo resource at init time.
*
* Revision 40.4  93/03/19  11:36:14  Jim2
* Yanked out the unused field ll_WaitPort.  Added a label for
* LL_Port2State so I could write the double controller code
* for now.
*
* Revision 40.3  93/03/12  20:07:11  Jim2
* Added the structure for supporting the joystick to rawkey convert
* routines.
*
* Revision 40.2  93/03/10  19:55:29  Jim2
* Declared the structure for holding the setfuction code.  Also took
* an extra byte to record General ReadJoyPort status.
*
* Revision 40.1  93/03/08  10:37:07  Jim2
* Added the new fields for setfunctioning EasyRequest.
*
* Revision 40.0  93/03/02  13:12:14  Jim2
* Renamed from GameBase.i.
*
* Revision 39.10  93/01/19  15:51:30  Jim2
* Removed language from structure.  Added nest count for killing
* input.device.
*
* Revision 39.9  93/01/18  13:36:26  Jim2
* Changed field that hold CD default behavior.
*
* Revision 39.8  93/01/15  14:04:58  Jim2
* Added fields from ReadJoyPort manipulation of gameport.device.
* Removed the fields used for keyboard repeat.
*
* Revision 39.7  93/01/13  13:55:13  Jim2
* Added structures for handling autorepeated keystrokes.
*
* Revision 39.6  93/01/07  14:29:46  Jim2
* Cleaned up comments and the ordering of fields.
*
* Revision 39.5  93/01/05  12:15:05  Jim2
* Added fields for keyboard support.
*
* Revision 39.4  92/12/17  18:17:22  Jim2
* Added the fields needed to support the routines in Timer.asm.
*
* Revision 39.3  92/12/14  15:01:09  Jim2
* *** empty log message ***
*
* Revision 39.2  92/12/11  14:16:18  Jim2
* Removed the list of process context and added nesting
* fields for the owning of the system and the killinf
* of requesters.
*
* Revision 39.1  92/12/09  18:15:32  Jim2
* Added the filed gpbi_OpenCnt to gpbi to guard against someone
* opening the library multiple times and our throwing away
* this information on the first close.
*
* Revision 39.0  92/12/07  15:59:46  Jim2
* Initial release prior to testing.
*
*
*       (C) Copyright 1992,1993 Commodore-Amiga, Inc.
*           All Rights Reserved
*
******************************************************************************

    IFND    LOWLEVELBASE_I
LOWLEVELBASE_I  SET 1

    IFND    EXEC_LISTS_I
    include 'exec/lists.i'
    ENDC

    IFND    EXEC_LIBRARIES_I
    include 'exec/libraries.i'
    ENDC

    IFND    EXEC_PORTS_I
    include 'exec/ports.i'
    ENDC

    IFND    EXEC_INTERRUPTS_I
    include 'exec/interrupts.i'
    ENDC

    IFND    EXEC/SEMAPHORES_I
    include 'exec/semaphores.i'
    ENDC

    IFND    DEVICES_TIMER_I
    include 'devices/timer.i'
    ENDC



 STRUCTURE llct_CIATimer,0
        STRUCT  llct_TimerInt,IS_SIZE           ;Interrupt sturcture.  (word sized)
        UWORD   llct_WhichTimer                 ;Timer within the CIA where the interrupt is hung.
        APTR    llct_Resource                   ;CIA resource where the interrupt is hung.
        LABEL   llct_Size

 STRUCTURE llsf_SetFunction,0
        STRUCT  llsf_Port,MP_SIZE               ;Random message port.  Used for DOIO calls.  Allows this code to be found.
        APTR    llsf_Original                   ;Original LVO for Intuition EasyRequest.
        APTR    llsf_Routine                    ;Pointer to the current EasyRequest routine to be executed.
        ULONG   llsf_Move                       ;move   llsf_Routine(pc),-(sp)
        UWORD   llsf_Clear                      ;CLEAR  d0
        UWORD   llsf_RTS                        ;rts
        LABEL   llsf_Size

 STRUCTURE lljp_JoyPortState,0
        ULONG   lljp_PreviousValue              ;Previous return value for this port.
        ULONG   lljp_LastVBlank                 ;Value of the VBlank counter for the last mouse reading.
        APTR    lljp_InputHandle                ;Handle for the input map code, if it is installed.
        UBYTE   lljp_NestCnt                    ;Nest count for the handle.
        UBYTE   lljp_Status                     ;ReadJoyPort status information.
        STRUCT  lljp_AddSafely,SS_SIZE          ;(word sized)
        APTR    lljp_RJPVector                  ; If NZ, Jump vector for locked controller
        LABEL   lljp_SIZE


 STRUCTURE  LowLevelBase,LIB_SIZE               ;(word sized)
        UBYTE   ll_TaskPri                      ;Orginal Task priority, if a task owns the system; 127 otherwise.
        UBYTE   ll_NestOwn                      ;Nest count for owning the system; starts at -1.
        UBYTE   ll_NestReq                      ;Nest count for killing requesters; starts at -1.
        UBYTE   ll_NestKillIn                   ;Nest count for killing input.device; starts at -1.
        UWORD   ll_DefaultCDReboot              ;CD Reboot behaviour reported at init time.
        ULONG   ll_LastKey                      ;Last key code read from the keyboard including modifiers.
        ULONG   ll_EClockConversion             ;E Clocks per second, used for converting from milliseconds to E Clocks.
        APTR    ll_SegList                      ;Segment Pointer for the game library.
        APTR    ll_ExecBase                     ;Pointer to exec.library.
        APTR    ll_UtilBase                     ;Pointer to utility.library.
        APTR    ll_SystemOwner                  ;Pointer to the task that has taken over part of the system via SystemControlA.
        APTR    ll_TimerDevice                  ;Pointer to timer.device.
        APTR    ll_KBDevice                     ;Pointer to keyboard.device.
        APTR    ll_KBOrig                       ;Pointer to the original keyboard interrupt.
        APTR    ll_RJP_Saved_IS                 ;Pointer to the original gameport interrrupt.
        APTR    ll_VBlankInt                    ;Pointer to the user's VBlank interrupt.
        APTR    ll_ERSetFunction                ;Pointer to the Easy Request SetFunction code.
        APTR    ll_PotGoResource                ;Pointer to the PotGo Resource.
        APTR    ll_VBCounter                    ;Pointer to the VBlank counter.

                        ;These structures have to be sequential and the first
                        ;needs to be less than 256 bytes from the start.

        STRUCT  ll_Port0State,lljp_SIZE         ;State information on Port 0.  (word sized)
        STRUCT  ll_Port1State,lljp_SIZE         ;State information on Port 1.  (word sized)
        STRUCT  ll_CIATimer,llct_Size           ;Structure used for allocating a CIA timer interrupt.
        STRUCT  ll_KBInterrupts,MLH_SIZE        ;List of extended keyboard interrupts.
        STRUCT  ll_RJP_Vblank_IS,IS_SIZE        ;Interrupt structure for our replacement gameport interrupt. (word sized)
        STRUCT  ll_KBExtend,IS_SIZE             ;Interrupt structure for our replacement keyboard interrupt. (word sized)

        STRUCT  ll_Port2State,lljp_SIZE         ;2
        STRUCT  ll_Port3State,lljp_SIZE         ;3
        STRUCT  ll_MsgPortSemaphore,SS_SIZE     ; Used because Jim keeps using the same port over and over again without locking it

   IFD  DISK_BASED
        STRUCT  ll_VBlankCNTR,IS_SIZE
        ULONG   ll_VBlankCount
   ENDC

        LABEL   ll_SIZE

* handy name macro

LOWLEVELNAME    MACRO
                DC.B  'lowlevel.library',0
                ENDM


*******************************************************************************
*
* Define DEBUGGING for debugging of code...  (0=NO, 1=YES)
*
DEBUGGING       SET     0
*
*******************************************************************************
*
                IFND    PUTCHAR
PUTCHAR         MACRO   ; #'c'  (Character)
                IFNE    DEBUGGING
                movem.l d0/d1/a0/a1/a6,-(sp)
                move.b  \1,d0
                move.l  4.w,a6
                JSRLIB  RawPutChar
                movem.l (sp)+,d0/d1/a0/a1/a6
                ENDC    ; DEBUGGING
                ENDM    ; MACRO PUTCHAR
                ENDC    ; PUTCHAR
*
*******************************************************************************
*
* A macro for PRINTF that does not touch the registers
* Also, it only produces code when DEBUGGING is defined above
*
                IFND    PRINTf
PRINTf          MACRO   ; <string>,...
                IFNE    DEBUGGING
                XREF    KPrintF
PUSHCOUNT       SET     0

                IFNC    '\9',''
                move.l  \9,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\8',''
                move.l  \8,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\7',''
                move.l  \7,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\6',''
                move.l  \6,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\5',''
                move.l  \5,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\4',''
                move.l  \4,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\3',''
                move.l  \3,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                IFNC    '\2',''
                move.l  \2,-(a7)
PUSHCOUNT       SET     PUSHCOUNT+4
                ENDC

                movem.l a0/a1/d0/d1,-(a7)
                lea.l   PSS\@@(pc),a0
                lea.l   16(a7),a1
                jsr     KPrintF
                movem.l (a7)+,a0/a1/d0/d1
                bra.s   PSE\@@

PSS\@@           dc.b    \1
                dc.b    10
                dc.b    0
                cnop    0,2
PSE\@@
                IFNE    PUSHCOUNT
                lea.l   PUSHCOUNT(a7),a7
                ENDC    ;IFNE   PUSHCOUNT
                ENDC    ;IFD    DEBUGGING
                ENDM    ;PRINTf MACRO
                ENDC    ;IFND   PRINTf
*
*******************************************************************************

    ENDC
@


40.8
log
@added fields for RJPVector -- the readjoyport() locking jump vector.
added structs for port2, 3.
@
text
@d3 1
a3 1
*       $Id: lowlevelbase.i,v 40.7 93/04/19 13:40:32 Jim2 Exp $
d8 4
d176 1
@


40.7
log
@Moved the storage location for the orginal easyrequest vector
from the library base to the setfunction memory.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.6 93/03/31 18:52:52 Jim2 Exp Locker: Jim2 $
d7 5
a11 1
*	$Log:	lowlevelbase.i,v $
d79 2
a80 2
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
d114 4
a117 4
	STRUCT	llct_TimerInt,IS_SIZE		;Interrupt sturcture.  (word sized)
	UWORD	llct_WhichTimer			;Timer within the CIA where the interrupt is hung.
	APTR	llct_Resource			;CIA resource where the interrupt is hung.
	LABEL	llct_Size
d120 7
a126 7
	STRUCT	llsf_Port,MP_SIZE		;Random message port.  Used for DOIO calls.  Allows this code to be found.
	APTR	llsf_Original			;Original LVO for Intuition EasyRequest.
	APTR	llsf_Routine			;Pointer to the current EasyRequest routine to be executed.
	ULONG	llsf_Move			;move	llsf_Routine(pc),-(sp)
	UWORD	llsf_Clear			;CLEAR	d0
	UWORD	llsf_RTS			;rts
	LABEL	llsf_Size
d129 44
a172 40
	ULONG	lljp_PreviousValue		;Previous return value for this port.
	ULONG	lljp_LastVBlank			;Value of the VBlank counter for the last mouse reading.
	APTR	lljp_InputHandle		;Handle for the input map code, if it is installed.
	UBYTE	lljp_NestCnt			;Nest count for the handle.
	UBYTE	lljp_Status			;ReadJoyPort status information.
	STRUCT	lljp_AddSafely,SS_SIZE		;(word sized)
	LABEL	lljp_SIZE


 STRUCTURE  LowLevelBase,LIB_SIZE		;(word sized)
	UBYTE	ll_TaskPri			;Orginal Task priority, if a task owns the system; 127 otherwise.
	UBYTE	ll_NestOwn			;Nest count for owning the system; starts at -1.
	UBYTE	ll_NestReq			;Nest count for killing requesters; starts at -1.
	UBYTE	ll_NestKillIn			;Nest count for killing input.device; starts at -1.
	UWORD	ll_DefaultCDReboot		;CD Reboot behaviour reported at init time.
	ULONG	ll_LastKey			;Last key code read from the keyboard including modifiers.
	ULONG	ll_EClockConversion		;E Clocks per second, used for converting from milliseconds to E Clocks.
	APTR	ll_SegList			;Segment Pointer for the game library.
	APTR	ll_ExecBase			;Pointer to exec.library.
	APTR	ll_UtilBase			;Pointer to utility.library.
	APTR	ll_SystemOwner			;Pointer to the task that has taken over part of the system via SystemControlA.
	APTR	ll_TimerDevice			;Pointer to timer.device.
	APTR	ll_KBDevice			;Pointer to keyboard.device.
	APTR	ll_KBOrig			;Pointer to the original keyboard interrupt.
	APTR	ll_RJP_Saved_IS			;Pointer to the original gameport interrrupt.
	APTR	ll_VBlankInt			;Pointer to the user's VBlank interrupt.
	APTR	ll_ERSetFunction		;Pointer to the Easy Request SetFunction code.
	APTR	ll_PotGoResource		;Pointer to the PotGo Resource.
	APTR	ll_VBCounter			;Pointer to the VBlank counter.

			;These structures have to be sequential and the first
			;needs to be less than 256 bytes from the start.

	STRUCT	ll_Port0State,lljp_SIZE		;State information on Port 0.  (word sized)
	STRUCT	ll_Port1State,lljp_SIZE		;State information on Port 1.  (word sized)
	STRUCT	ll_Port2State,0
	STRUCT	ll_CIATimer,llct_Size		;Structure used for allocating a CIA timer interrupt.
	STRUCT	ll_KBInterrupts,MLH_SIZE	;List of extended keyboard interrupts.
	STRUCT	ll_RJP_Vblank_IS,IS_SIZE	;Interrupt structure for our replacement gameport interrupt. (word sized)
	STRUCT	ll_KBExtend,IS_SIZE		;Interrupt structure for our replacement keyboard interrupt. (word sized)
d174 2
a175 2
	STRUCT	ll_VBlankCNTR,IS_SIZE
	ULONG	ll_VBlankCount
d177 2
a178 1
	LABEL	ll_SIZE
d182 3
a184 3
LOWLEVELNAME	MACRO
		DC.B  'lowlevel.library',0
		ENDM
d191 1
a191 1
DEBUGGING	SET	0
d195 11
a205 11
		IFND	PUTCHAR
PUTCHAR		MACRO	; #'c'  (Character)
		IFNE	DEBUGGING
		movem.l	d0/d1/a0/a1/a6,-(sp)
		move.b	\1,d0
		move.l	4.w,a6
		JSRLIB	RawPutChar
		movem.l	(sp)+,d0/d1/a0/a1/a6
		ENDC	; DEBUGGING
		ENDM	; MACRO PUTCHAR
		ENDC	; PUTCHAR
d212 52
a263 52
		IFND	PRINTf
PRINTf		MACRO	; <string>,...
		IFNE	DEBUGGING
		XREF	KPrintF
PUSHCOUNT	SET	0

		IFNC	'\9',''
		move.l	\9,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\8',''
		move.l	\8,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\7',''
		move.l	\7,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\6',''
		move.l	\6,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\5',''
		move.l	\5,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\4',''
		move.l	\4,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\3',''
		move.l	\3,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		IFNC	'\2',''
		move.l	\2,-(a7)
PUSHCOUNT	SET	PUSHCOUNT+4
		ENDC

		movem.l a0/a1/d0/d1,-(a7)
		lea.l	PSS\@@(pc),a0
		lea.l	16(a7),a1
		jsr	KPrintF
		movem.l (a7)+,a0/a1/d0/d1
		bra.s	PSE\@@
d265 4
a268 4
PSS\@@		dc.b	\1
		dc.b	10
		dc.b	0
		cnop	0,2
d270 6
a275 6
		IFNE	PUSHCOUNT
		lea.l	PUSHCOUNT(a7),a7
		ENDC	;IFNE	PUSHCOUNT
		ENDC	;IFD	DEBUGGING
		ENDM	;PRINTf	MACRO
		ENDC	;IFND	PRINTf
@


40.6
log
@Extend the library base for the disk version to support the
VBlank counter (CI105).  Also added macros for debugging.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.5 93/03/26 17:43:31 Jim2 Exp Locker: Jim2 $
d8 4
d117 2
a118 1
	ULONG	llsf_Routine			;Pointer to the current EasyRequest routine to be executed.
a142 1
	APTR	ll_EasyRequest			;Original LVO for Intuition EasyRequest.
@


40.5
log
@Added field to allow for VBlank counting.  Also to support
opening the PotGo resource at init time.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.4 93/03/19 11:36:14 Jim2 Exp Locker: Jim2 $
d8 4
d95 4
d125 1
d161 4
d172 93
@


40.4
log
@Yanked out the unused field ll_WaitPort.  Added a label for
LL_Port2State so I could write the double controller code
for now.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.3 93/03/12 20:07:11 Jim2 Exp Locker: Jim2 $
d8 5
d113 1
d138 3
a140 1
	APTR	ll_ERSetFunction
@


40.3
log
@Added the structure for supporting the joystick to rawkey convert
routines.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.2 93/03/10 19:55:29 Jim2 Exp Locker: Jim2 $
d8 4
a126 1
	APTR	ll_WaitPort			;Pointer to port used in shutting down the startup animation.
d133 4
d139 1
@


40.2
log
@Declared the structure for holding the setfuction code.  Also took
an extra byte to record General ReadJoyPort status.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.1 93/03/08 10:37:07 Jim2 Exp Locker: Jim2 $
d8 4
d95 5
a99 5
	STRUCT	llsf_Port,MP_SIZE
	ULONG	llsf_Routine
	ULONG	llsf_Move
	UWORD	llsf_Clear
	UWORD	llsf_RTS
d102 8
a114 3
	UBYTE	ll_NestReqAll			;Nest count for killing requesters including desire of nonvolatile.library; starts at -1
	UBYTE	ll_PortStatus			;
	UWORD	ll_Pad1				;Need to balance the single word, might as well keep them together.
a117 2
	ULONG	ll_Port0State			;State information on Port 0.  Used in type determination.
	ULONG	ll_Port1State			;State information on Port 1.  Used in type determination.
d130 2
@


40.1
log
@Added the new fields for setfunctioning EasyRequest.
@
text
@d3 1
a3 1
*	$Id: lowlevelbase.i,v 40.0 93/03/02 13:12:14 Jim2 Exp Locker: Jim2 $
d8 3
d70 2
a71 2
    IFND    EXEC_SEMAPHORES_I
    include 'exec/semaphores.i'
d90 8
d104 1
a104 1
	UBYTE	ll_Pad0				;Get to long word alignment.
a106 3
	ULONG	ll_ER_Location			;Pointer to the currently executing EasyRequest routine.
	ULONG	ll_ER_move			;move ll_ER_Location(pc),-(sp)
	ULONG	ll_ER_clear_rts			;CLEAR d0//rts
a114 1
	APTR	ll_NVBase			;Pointer to nonvolatile.library.
d122 1
@


40.0
log
@Renamed from GameBase.i.
@
text
@d3 1
a3 1
*	$Id: GameBase.i,v 39.10 93/01/19 15:51:30 Jim2 Exp Locker: Jim2 $
d7 4
a10 1
*	$Log:	GameBase.i,v $
d91 4
a94 1
	UBYTE	ll_NestKillIn
d96 3
d103 2
a104 1
	APTR	ll_SegList			;Sellent Pointer for the game library.
d107 1
a108 1
	APTR	ll_OwnerWin			;Original window pointer when the requesters have been disabled.
a116 1
	STRUCT	ll_ShutdownSemaphore,SS_SIZE	;Semaphore used to hold off all callers during startup animation shutdown. (word sized)
@
