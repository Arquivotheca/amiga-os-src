head     40.6;
branch   ;
access   ;
symbols  V40_35:40.6 rel40_34:40.6 rel40_33:40.6 rel40_32:40.6 rel40_29:40.6 rel40_28:40.6 rel40_27:40.6 rel40_26:40.6 rel40_25:40.6 rel40_24:40.6 rel40_23:40.6 rel40_22:40.5 rel40_21:40.5 rel40_20:40.5 rel40_19:40.5 rel40_18:40.5 rel40_17:40.5 rel40_16:40.5 rel40_15:40.5 rel40_14:40.5 rel40_13:40.5 rel40_12:40.4 rel40_11:40.4 rel40_4:39.6 rel40_3:39.6 rel40_2:39.6 rel40_1:39.6 rel39_7:39.6 rel39_6:39.6 rel39_5:39.6 rel39_4:39.5 rel39_3:39.4 rel39_2:39.4 rel39_1:39.3;
locks    ; strict;
comment  @* @;


40.6
date     93.04.19.13.41.11;  author Jim2;  state Exp;
branches ;
next     40.5;

40.5
date     93.03.19.11.33.56;  author Jim2;  state Exp;
branches ;
next     40.4;

40.4
date     93.03.12.21.04.40;  author Jim2;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.10.19.54.09;  author Jim2;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.08.10.48.22;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.02.13.21.54;  author Jim2;  state Exp;
branches ;
next     39.6;

39.6
date     93.01.07.14.24.32;  author Jim2;  state Exp;
branches ;
next     39.5;

39.5
date     93.01.05.12.08.28;  author Jim2;  state Exp;
branches ;
next     39.4;

39.4
date     92.12.14.14.57.12;  author Jim2;  state Exp;
branches ;
next     39.3;

39.3
date     92.12.11.14.05.04;  author Jim2;  state Exp;
branches ;
next     39.2;

39.2
date     92.12.09.17.55.38;  author Jim2;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.08.16.54.01;  author Jim2;  state Exp;
branches ;
next     39.0;

39.0
date     92.12.07.16.37.28;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Handles the setting and clearing of requesters for the games library.
@


40.6
log
@The location for the EasyRequest vector has been changed.
@
text
@******************************************************************************
*
*	$Id: requesters.asm,v 40.5 93/03/19 11:33:56 Jim2 Exp Locker: Jim2 $
*
******************************************************************************
*
*	$Log:	requesters.asm,v $
* Revision 40.5  93/03/19  11:33:56  Jim2
* Have to use the RTS in the set functioned code.  If we don't then
* the set function could crash in an unexpected manner if the
* user forgets to release requesters.
*
* Revision 40.4  93/03/12  21:04:40  Jim2
* I changed the calling code so it nolonger says the requesters
* are a resource that locks system ownership.  This means I can
* use a single byte to remember whether requesters are enabled
* rather than seperating out the byte for system ownership.
*
* Revision 40.3  93/03/10  19:54:09  Jim2
* Allowing for expunging requires the setfunctioned code stay around.
* This changed how this code addresses it.  Also we really
* should clear the cache when we modify the code.
*
* Revision 40.2  93/03/08  10:48:22  Jim2
* Added the new entry points for nonvolatile.library.  Changed
* the mechanisim for disabling the requesters from poking a minus
* one in the screen pointer to changing the setfuntion for
* EasyRequest.
*
* Revision 40.1  93/03/02  13:21:54  Jim2
* Changed all references from game.library to lowlevel.library
*
* Revision 39.6  93/01/07  14:24:32  Jim2
* Cleaned up comments and minimized the directly included files.
*
* Revision 39.5  93/01/05  12:08:28  Jim2
* Had .s on commands where I needed .b.  Also, forgot to retrieve
* ExecBase before calling Forbid.  This was masked previously
* due to the .s.b error.
*
* Revision 39.4  92/12/14  14:57:12  Jim2
* Nest multiple calls, Only allow one task to kill requesters.  Tested.
*
* Revision 39.3  92/12/11  14:05:04  Jim2
* Only one process can affect the requesters, so all of the
* process specific information was removed from this routine
* This routine is only called by SystemControlA that checks
* the current process before calling this one.
*
* Revision 39.2  92/12/09  17:55:38  Jim2
* Now it links with the code.  Removed the code that allocates
* context information.  This is now accomplished at library
* open time.
*
* Revision 39.1  92/12/08  16:54:01  Jim2
* Corrected errors that were parallels with System.ASM version 39.0.
*
* Revision 39.0  92/12/07  16:37:28  Jim2
* Initial release prior to testing.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

	INCLUDE 'exec/macros.i'
	INCLUDE	'dos/dosextens.i'

	INCLUDE	'/lowlevelbase.i'


		XDEF	TurnOffRequesters
		XDEF	KillReq
		XDEF	RestoreReq


*****l* lowlevel.library/TurnOffRequesters ***********************************
*
*   NAME
*	TurnOffRequesters - Inhibit any requesters in the system.
*
*   SYNOPSIS
*	TurnOffRequesters (requesterState, LowLevelBase)
*			   D1		   a6
*
*	TurnOffRequesters (BOOL);
*
*   FUNCTION
*	This function plays with a value monitored by the easyrequest patch
*	that determines whether any requesters should be shown or not.
*
*   INPUTS
*	SystemState - boolean that determines whether the requesters are
*		      inhibited, or allowed.
*
*   RESULT
*	NONE
*
******************************************************************************
*****l* lowlevel.library/KillReq *********************************************
*
*   NAME
*	KillReq - Inhibit all requesters in the system.
*
*   SYNOPSIS
*	KillReq ()
*
*	VOID KillReq (VOID);
*
*   FUNCTION
*	This function plays with a value monitored by the easyrequest patch
*	that determines whether any requesters should be shown or not.
*
*   INPUTS
*	NONE
*
*   RESULT
*	NONE
*
******************************************************************************
*****l* lowlevel.library/RestoreReq ******************************************
*
*   NAME
*	RestoreReq - Allow requesters to happen
*
*   SYNOPSIS
*	RestoreReq ()
*
*	VOID RestoreReq (VOID);
*
*   FUNCTION
*	This function plays with a value monitored by the easyrequest patch
*	that determines whether any requesters should be shown or not.
*
*   INPUTS
*	NONE
*
*   RESULT
*	NONE
*
******************************************************************************
TurnOffRequesters
		tst.w	d1
		bne.s	KillReq
						;The user wants requesters.
RestoreReq
		subq.b	#1,ll_NestReq(a6)	;Decrement the nest count.
		bpl.s	rr_Exit

		move.l	ll_ERSetFunction(a6),a0
		move.l	llsf_Original(a0),llsf_Routine(a0)
		move.l	a6,-(sp)
		move.l	ll_ExecBase(a6),a6
		JSRLIB	CacheClearU
		move.l	(sp)+,a6
rr_Exit:	rts
KillReq:					;The user does not wants requesters.
		addq.b	#1,ll_NestReq(a6)	;Increment the Nest count.
		bne.s	kr_Exit

		move.l	ll_ERSetFunction(a6),a1
		lea	llsf_RTS(a1),a0
		move.l	a0,llsf_Routine(a1)
		move.l	a6,-(sp)
		move.l	ll_ExecBase(a6),a6
		JSRLIB	CacheClearU
		move.l	(sp)+,a6
kr_Exit		rts

		END
@


40.5
log
@Have to use the RTS in the set functioned code.  If we don't then
the set function could crash in an unexpected manner if the
user forgets to release requesters.
@
text
@d3 1
a3 1
*	$Id: requesters.asm,v 40.4 93/03/12 21:04:40 Jim2 Exp Locker: Jim2 $
d8 5
d152 1
a152 1
		move.l	ll_EasyRequest(a6),llsf_Routine(a0)
@


40.4
log
@I changed the calling code so it nolonger says the requesters
are a resource that locks system ownership.  This means I can 
use a single byte to remember whether requesters are enabled
rather than seperating out the byte for system ownership.
@
text
@d3 1
a3 1
*	$Id: requesters.asm,v 40.3 93/03/10 19:54:09 Jim2 Exp Locker: Jim2 $
d8 6
a156 1
		lea	kr_Exit(pc),a0
d158 1
@


40.3
log
@Allowing for expunging requires the setfunctioned code stay around.
This changed how this code addresses it.  Also we really
should clear the cache when we modify the code.
@
text
@d3 1
a3 1
*	$Id: requesters.asm,v 40.2 93/03/08 10:48:22 Jim2 Exp Locker: Jim2 $
d8 5
d73 2
a74 2
*	TurnOffRequesters (requesterState)
*			   D1
d134 1
a134 1
		bne.s	NoRequesters
d136 1
a137 2
RestoreReq
		subq.b	#1,ll_NestReqAll(a6)
d147 1
a147 1
NoRequesters					;The user does not wants requesters.
a148 2
KillReq
		addq.b	#1,ll_NestReqAll(a6)
@


40.2
log
@Added the new entry points for nonvolatile.library.  Changed
the mechanisim for disabling the requesters from poking a minus
one in the screen pointer to changing the setfuntion for
EasyRequest.
@
text
@d3 1
a3 1
*	$Id: requesters.asm,v 40.1 93/03/02 13:21:54 Jim2 Exp Locker: Jim2 $
d8 6
d135 7
a141 1
		move.l	ll_EasyRequest(a6),ll_ER_Location(a6)
a145 2
		lea	rr_Exit(pc),a0
		move.l	a0,ll_ER_Location(a6)
d147 10
a156 1
		rts
@


40.1
log
@Changed all references from game.library to lowlevel.library
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.6 93/01/07 14:24:32 Jim2 Exp Locker: Jim2 $
d7 4
a10 1
*	$Log:	Requesters.asm,v $
d52 2
d59 1
a59 2
*	TurnOffRequesters - Inhibit any requestors that might arise from this
*		process.
d62 1
a62 1
*	TurnOffRequesters (requestorState)
d68 2
a69 4
*	This function is used to give the game developers a warm and fuzzy
*	feeling.  To 'turn off' requesters the processes window pointer is
*	poked to a -1.  This tells intuition there is no window associated
*	with the process.
d79 42
d126 5
a130 3
		bpl.s	Exit
						;The nest count is -1 so return the system.
		bra.s	SwapWindowPtr
d133 6
a138 13
		bne.s	Exit
						;Swap the current task windowPointer with the stored task windowPointer.
SwapWindowPtr:  movem.l	a5-a6,-(sp)
		move.l	a6,a5
		move.l	ll_ExecBase(a5),a6
		JSRLIB	Forbid			;Forbid(a6>ExecBase)
		move.l	ll_SystemOwner(a5),a1
		move.l	ll_OwnerWin(a0),d0
		move.l	pr_WindowPtr(a1),ll_OwnerWin(a0)
		move.l	d0,pr_WindowPtr(a1)
		JSRLIB	Permit			;Permit(a6>ExecBase)
		movem.l	(sp)+,a5-a6
Exit:		rts
@


39.6
log
@Cleaned up comments and minimized the directly included files.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.5 93/01/05 12:08:28 Jim2 Exp Locker: Jim2 $
d8 3
d45 1
a45 1
	INCLUDE	'/gamebase.i'
d51 1
a51 1
******l game.library/TurnOffRequesters ***************************************
d81 1
a81 1
		subq.b	#1,gm_NestReq(a6)	;Decrement the nest count.
d86 1
a86 1
		addq.b	#1,gm_NestReq(a6)	;Increment the Nest count.
d91 1
a91 1
		move.l	gm_ExecBase(a5),a6
d93 3
a95 3
		move.l	gm_SystemOwner(a5),a1
		move.l	gm_OwnerWin(a0),d0
		move.l	pr_WindowPtr(a1),gm_OwnerWin(a0)
@


39.5
log
@Had .s on commands where I needed .b.  Also, forgot to retrieve
ExecBase before calling Forbid.  This was masked previously
due to the .s.b error.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.4 92/12/14 14:57:12 Jim2 Exp Locker: Jim2 $
d8 5
d34 1
a34 1
*	(C) Copyright 1992 Commodore-Amiga, Inc.
d38 2
a39 9
*
* System include files...
*
	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE	'exec/lists.i'
	INCLUDE	'exec/memory.i'
	INCLUDE 'exec/resident.i'
	INCLUDE	'exec/execbase.i'
a40 4
*
* Neat macros
*
	INCLUDE	'/macros.i'
d42 1
a46 7
*
*******************************************************************************
*
* The library structure ...
*

	INCLUDE	'/gamebase.i'
d55 1
a55 1
*	TurnOffRequesters (reqestorState)
d61 4
a64 53
*	This function can used by a process to either surpress any
*	requesters from being generated from this process, or allow
*	requesters.
*
*	????This function does not disable file system requesters.
*
*	These are the reasons when you would NOT want turn off system
*	requesters:
*
*	    -	You don't want them turned off.
*	    -	You are not doing anything that would cause a system
*		requester to appear.
*	    -	The only thing that could cause a requester to appear is the
*		lack of a CD in the drive and you have "Reset on disk
*		removal" FORCED ON, therefore a requester can't appear.
*	    -	Item 3 is true, AND all other disk I/O is done through
*		nonvolatile.library (nonvolatile.library turns off requesters
*		when it needs to).
*
*	To help narrow down your options a bit, let me say the following:  If
*	you are programming a game, you should never want a system requester
*	to appear, so item 1 should never apply to you.  If your game gets
*	loaded, begins running, and never access a dos function again, then
*	item 2 will apply.  Otherwise, if you are intermittently going back
*	to the CD after your application has begun, you will either need to
*	turn off requesters, or FORCE ON reset on removal of the CD.  If your
*	application is a game, and you are allowing users to save high
*	scores, game position, etc...; you SHOULD be doing so through the
*	nonvolatile.library, and therefore,item 4 should be equivalent to
*	item 3.
*
*	To summarize, if you are programming a game, you should NOT NEED to
*	turn off requesters if any of the following apply:
*
*	    -	You are not calling any dos functions after your game has
*		loaded.
*	    -   Reset on removal of the CD is FORCED ON.
*
*	NOTE: nonvolatile.library should always be used for loading saving
*	user data.
*
*	Non-Game titles:
*
*	If your CD application requires more complex operations than
*	nonvolatile.library provides, by all means, use the traditional
*	methods.  Nonvolatile.library is provided to make saving relatively
*	small amounts of user data (game high scores, game position/equipment
*	information, etc...) to the best available device (NVRAM, floppy,
*	harddisk, etc...) an easy exercise.  It is provided for your
*	convenience.  Use it when practical, but if it is not powerful enough
*	for your needs (because you want to render 3-D images to disk or
*	something), use traditional methods.  Nonvolatile.library is designed
*	for small amounts of high-score-like information.
d71 1
a71 5
*	result - indicates success, or failure.  Failure can occur if a task that
*		 has not explictly opened game library utilizies this function.
*
*   SEE ALSO
*	SystemControl
d89 1
a89 1
		CALLSYS	Forbid			;Forbid(a6>ExecBase)
d94 1
a94 1
		CALLSYS	Permit			;Permit(a6>ExecBase)
@


39.4
log
@Nest multiple calls, Only allow one task to kill requesters.  Tested.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.3 92/12/11 14:05:04 Jim2 Exp Locker: Jim2 $
d8 3
d143 1
a143 1
		subq.s	#1,gm_NestReq(a6)	;Decrement the nest count.
d148 1
a148 1
		addq.s	#1,gm_NestReq(a6)	;Increment the Nest count.
d153 1
@


39.3
log
@Only one process can affect the requesters, so all of the
process specific information was removed from this routine
This routine is only called by SystemControlA that checks
the current process before calling this one.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.2 92/12/09 17:55:38 Jim2 Exp Locker: Jim2 $
d8 6
d141 1
a141 1
		bmi.s	Exit
@


39.2
log
@Now it links with the code.  Removed the code that allocates
context information.  This is now accomplished at library
open time.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.1 92/12/08 16:54:01 Jim2 Exp Locker: Jim2 $
d8 5
d41 1
a41 3
		XDEF	NoRequesters,OnRequesters

		XREF	SearchList
d51 1
a51 1
******i NoRequesters *********************************************************
d54 2
a55 1
*	NoRequesters - Inhibits requesters for a specific process.
d58 2
a59 2
*	Success = NoRequesters ()
*	D0
d61 2
d64 53
a116 1
*	This function changes the processes window pointer to -1.
d118 3
a120 3
*	Before changing the window pointer it is saved; unless the current
*	window pointer is -1.  This will allow this function to be called
*	multiple times.
d123 2
a124 39
*	If the current process cannot be found in the process list this
*	function will return with a FALSE.
******************************************************************************
NoRequesters
		move.l	a5,-(sp)
		movea.l	a6,a5
		move.l	gm_ExecBase(a5),a6
		CALLSYS Forbid			;Forbid (a6>ExecBase)

		moveq	#0,d0
		move.l	d0,a1
		CALLSYS	FindTask		;FindTask (a1>Null:Current Task, a6>ExecBase)
						;The Current task pointer is in d0.
		move.l	d0,a1
		moveq	#0,d0			;Setup the return value.
		cmp.l	#-1,pr_WindowPtr(a1)
		beq.s	EONoReq
						;The current window pointer is not -1.
		jsr	SearchList		;SearchList(a5>GameBase,a1>ProcessPtr)
		move.l	a0,d0
		beq.s	EONoReq
						;Store the process pointer and the window pointer.
		move.l	gbpi_Window(a0),d0
		move.l	pr_WindowPtr(a1),gbpi_Window(a0)
		move.l	d0,pr_WindowPtr(a1)
						;Permit and exit
EONoReq:
		CALLSYS	Permit			;Permit (a6>ExecBase)
		move.l	(sp)+,a5
		rts

******i OnRequesters *********************************************************
*
*   NAME
*	OnRequesters - Allows requesters for a specific process.
*
*   SYNOPSIS
*	Success = OnRequesters ()
*	D0
d126 2
a127 2
*   FUNCTION
*	This function restores the processes window.
a128 3
*   RESULT
*	If the current process cannot be found in the process list this
*	function will return with a FALSE.
d130 22
a151 28
OnRequesters
		move.l	a5,-(sp)
		movea.l	a6,a5
		move.l	gm_ExecBase(a5),a6
		CALLSYS Forbid			;Forbid (a6>ExecBase)

		moveq	#0,d0
		move.l	d0,a1
		CALLSYS	FindTask		;FindTask (a1>Null:Current Task, a6>ExecBase)
						;The Current task pointer is in d0.
		move.l	d0,a1
		moveq	#0,d0			;Set return value.
		cmp.l	#-1,pr_WindowPtr(a1)
		bne.s	EOOnReq
						;The current window pointer is -1.
		jsr	SearchList		;SearchList(a5>GameBase,a1>ProcessPtr)
		move.l	a0,d0
		beq.s	EOOnReq
						;Restore the process pointer and
		move.l	pr_WindowPtr(a1),d0
		move.l	gbpi_Window(a0),pr_WindowPtr(a1)
		move.l	d0,gbpi_Window(a0)
EOOnReq:
		CALLSYS	Permit		;Permit (a6>ExecBase)
		move.l	(sp)+,a5
		rts


@


39.1
log
@Corrected errors that were parallels with System.ASM version 39.0.
@
text
@d3 1
a3 1
*	$Id: Requesters.asm,v 39.0 92/12/07 16:37:28 Jim2 Exp Locker: Jim2 $
d8 3
d38 2
d47 2
d50 2
a51 1
*******************************************************************************
d53 10
a62 2
* If there is a current window pointer add the process and it's window pointer
* to the system list.
d64 4
a67 4
* The first element has already been allocated so it cannot fail.  Subsequent
* processes can fail if the memory to store the process information cannot
* be allocated.
*
d72 1
a72 1
		CALLSYS Forbid		;Forbid (a6>ExecBase)
d76 2
a77 2
		CALLSYS	FindTask	;FindTask (a1>Null:Current Task, a6>ExecBase)
					;The Current task pointer is in d0.
d79 1
a79 1
		moveq	#0,d0		;Setup the return value.
d82 6
a87 32
					;The current window pointer is not -1.
		move.l	gm_ProcList(a5),a0
		tst.l	gbpi_Process(a0)
		beq.s	StoreWindowPtr	;If the elements has not yet been used the process pointer is NULL.
					;Check the process pointer against the stored information.
SearchList:	cmpa.l	gbpi_Process(a0),a1
		beq.s	StoreWindowPtr
					;The process pointer does not match the current process.
		tst.l	gbpi_Next(a0)
		beq.s	AddNewProcess
					;There still remain more structures to check.
		move.l	a0,gbpi_Next(a0)
		bra.s	SearchList

					;A new element needs to be created to store the information
					;on this process.

AddNewProcess:  movem.l a0-a1,-(sp)	;Save the pointers.
		moveq	#gbpi_SIZE,d0
		move.l	#MEMF_CLEAR,d1
		CALLSYS	AllocMem	;AllocMem(d0>#bytes, d1>type, a6>ExecBase)
		movem.l	(sp)+,a0-a1	;Restore the pointers
		move.l	d0,gbpi_Next(a0);The new structure is the next to be used.
		move.l	d0,a0		;Advance to that structure.
		moveq	#0,d0		;Setup return value.
		tst.l	a0
		bne.s	StoreWindowPtr	;If a non NULL was returned there was no error.
					;AllocMem failied, so do we.
		addq.s	#1,d0
		bra.s	EONoReq
					;Store the process pointer and the window pointer.
StoreWindowPtr: move.l	a1,gbpi_Process(a0)
d89 2
a90 1
					;Permit and exit
d92 1
a92 1
		CALLSYS	Permit		;Permit (a6>ExecBase)
d96 1
d98 2
a99 1
*******************************************************************************
d101 6
a106 3
* If the current tasks has not had requesters disabled return immediately.
* If the current task is not on the list return with an error.
* Otherwise, restore the stored window pointer.
d108 4
d116 1
a116 1
		CALLSYS Forbid		;Forbid (a6>ExecBase)
d120 2
a121 2
		CALLSYS	FindTask	;FindTask (a1>Null:Current Task, a6>ExecBase)
					;The Current task pointer is in d0.
d123 1
a123 1
		moveq	#0,d0		;Set return value.
d126 6
a131 8
					;The current window pointer is -1.
		move.l	gm_ProcList(a5),a0
		tst.l	gbpi_Process(a0);If the first process pointer is NULL no information has yet been saved.
		beq.s	CannotRestore
					;Check the current elements process pointer.
Search:		cmpa.l	gbpi_Process(a0),a1
		bne.s	NextPointer
					;Found the stored window pointer, restore it.
d133 1
a133 10
		bra.s	EOOnReq
					;No luck lets check the next element.
NextPointer
		tst.l	gbpi_Next(a0)
		beq.s	CannotRestore
					;Good there is a next, well loop to check.
		move.l	a0,gbpi_Next(a0)
		bra.s	Search
					;Can not restore requesters, sorry.
CannotRestore:	addq.s	#1,d0
@


39.0
log
@Initial release prior to testing.
@
text
@d3 1
a3 1
*	$Id$
d7 3
a9 1
*	$Log$
d11 1
d55 1
a55 1
		move.l	ExecBase(a5),a6
d115 1
a115 1
		move.l	ExecBase(a5),a6
@
