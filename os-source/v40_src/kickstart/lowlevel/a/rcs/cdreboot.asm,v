head     40.5;
branch   ;
access   ;
symbols  V40_35:40.5 rel40_34:40.4 rel40_33:40.4 rel40_32:40.3 rel40_29:40.3 rel40_28:40.3 rel40_27:40.2 rel40_26:40.2 rel40_25:40.2 rel40_24:40.2 rel40_23:40.2 rel40_22:40.2 rel40_21:40.2 rel40_20:40.2 rel40_19:40.2 rel40_18:40.2 rel40_17:40.2 rel40_16:40.2 rel40_15:40.1 rel40_14:40.1 rel40_13:40.1 rel40_12:40.1 rel40_11:40.1 rel40_4:39.4 rel40_3:39.4 rel40_2:39.4 rel40_1:39.4 rel39_7:39.4 rel39_6:39.2 rel39_5:39.2 rel39_4:39.1 rel39_3:39.1 rel39_2:39.1 rel39_1:39.0;
locks    ; strict;
comment  @* @;


40.5
date     93.07.30.16.04.33;  author vertex;  state Exp;
branches ;
next     40.4;

40.4
date     93.05.18.15.04.53;  author gregm;  state Exp;
branches ;
next     40.3;

40.3
date     93.05.05.09.44.25;  author gregm;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.31.18.52.06;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.12.20.53.24;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.02.13.22.32;  author Jim2;  state Exp;
branches ;
next     39.4;

39.4
date     93.01.19.10.40.22;  author Jim2;  state Exp;
branches ;
next     39.3;

39.3
date     93.01.18.13.34.41;  author Jim2;  state Exp;
branches ;
next     39.2;

39.2
date     93.01.07.14.23.49;  author Jim2;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.14.14.55.23;  author Jim2;  state Exp;
branches ;
next     39.0;

39.0
date     92.12.11.14.02.00;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Using the cd.device change the behaviour of the system
upon the removal of the CD.
@


40.5
log
@Autodoc and include file cleanup

Now includes <devices/cd.i> instead of bogusly-pathed file...
@
text
@******************************************************************************
*
*       $Id: cdreboot.asm,v 40.4 93/05/18 15:04:53 gregm Exp Locker: gregm $
*
******************************************************************************
*
*       $Log:   cdreboot.asm,v $
* Revision 40.4  93/05/18  15:04:53  gregm
* Jim was move.l'ing into the word-sized field ll_CDRebootDefault.
* He was also using a bmi bpl pair that I replaced with blo, bhi.
* And lastly, I modified the code to determine the default the first
* time it's needed, rather than at init time -- as Jerry explained
* to me that things wouldn't be properly set up at init time.
*
* Revision 40.3  93/05/05  09:44:25  gregm
* fixes problems with systemcontrol's cdreboot tag -- Jim was using
* move.l's into IO_COMMAND instead of move.w's.
*
* Revision 40.2  93/03/31  18:52:06  Jim2
* Added a replyport to the DoIO message. (CI33).
*
* Revision 40.1  93/03/12  20:53:24  Jim2
* When simplifing the calling routine LowLevelBase stays in a5 and
* ExecBase appears in a6.
*
* Revision 40.0  93/03/02  13:22:32  Jim2
* Changed all references from game.library to lowlevel.library
*
* Revision 39.4  93/01/19  10:40:22  Jim2
* Was mainpulating the stack incorrectly in CDRebootOnRemove.
*
* Revision 39.3  93/01/18  13:34:41  Jim2
* Added CDRebootDefault.  Changed name for game library field
* that has the CD default behavior.
*
* Revision 39.2  93/01/07  14:23:49  Jim2
* Cleaned up comments and minimized the required include files.
*
* Revision 39.1  92/12/14  14:55:23  Jim2
* Tested failure, non-existant cd.device.
*
* Revision 39.0  92/12/11  14:02:00  Jim2
* Inital Release
*
*
*       (C) Copyright 1992,1993 Commodore-Amiga, Inc.
*           All Rights Reserved
*
******************************************************************************

        INCLUDE 'exec/macros.i'
        INCLUDE 'exec/io.i'
        INCLUDE 'exec/tasks.i'

        INCLUDE 'utility/tagitem.i'

        INCLUDE 'devices/cd.i'

        INCLUDE '/macros.i'
        INCLUDE '/lowlevelbase.i'


                XDEF    CDRebootOnRemove
                XDEF    CDRebootDefault


*****i* a/CDReboot.asm/CDRebootOnRemove **************************************
*
*   NAME
*       CDRebootOnRemove - Set the expected behaviour upon ejecting the CD.
*
*   SYNOPSIS
*       CDRebootOnRemove (resetState, LowLevelBase, ExecBase)
*                         D1          a5            a6
*
*   FUNCTION
*       Uses cd.device to change the system response to ejecting the CD.
*
*   INPUTS
*       resetState - Desired behavior.
*           0 - Do not reboot
*           1 - Reboot
*           2 - Reset to default behaviour.
*
*   RESULT
*       error - Zero if no error, otherwise sign extended io_error field from
*               the request.
*
******************************************************************************
CDRebootOnRemove

                move.l  d1,-(sp)
                move.w  ll_DefaultCDReboot(a5),d0
                bge     9$
                jsr     CDRebootDefault
9$
                move.l  (sp)+,d1

                moveq   #-1,d0                  ;Set return value.
                cmp.l   #2,d1
                bcs.s   NotDefault              ; blo.s   ---\ This is what he REALLY  0, 1
                bhi     CDROR_Exit              ;         ---/ wanted.  - Greg  for invalid codes

                                ;The user has requested the default behaviour.
                                ;This has been saved in ll_DefaultCDReboot at
                                ;library init time.


                moveq.l #0,d1
                move.w  ll_DefaultCDReboot(a5),d1
NotDefault:     tst.l   d1
                bmi     CDROR_Exit              ;No negative values should be passed.
                                ;d1 contains a valid desired reboot state (0,1).
ValidParameter:


TEMP_SIZE       set     0                       ;Determine the number of bytes wanted for local variables
                ARRAYVAR Request,IOSTD_SIZE     ;Need an standard IO Requester.
                LONGVAR EjectTag                ;A tag list starting with the eject tag.
                LONGVAR EjectParameter
                LONGVAR LastTag                 ;And ending with the end tag.

                ALLOCLOCALS sp

                move.l  d1,-(sp)
                lea.l   ll_MsgPortSemaphore(a5),a0
                JSRLIB  ObtainSemaphore
                move.l  (sp)+,d1

                CLEARA  a1
                move.l  d1,-(sp)
                JSRLIB  FindTask
                move.l  (sp)+,d1
                move.l  ll_ERSetFunction(a5),a0
                move.l  d0,MP_SIGTASK(a0)       ; SigTask
                move.b  #SIGB_SINGLE,MP_SIGBIT(a0)      ; SigBit
                move.b  #PA_SIGNAL,MP_FLAGS(a0) ; Signal...
                move.l  a0,Request+MN_REPLYPORT(sp)

                                ;Initialize the tag list
                move.l  #TAG_DONE,LastTag_l(sp)
                move.l  d1,EjectParameter_l(sp)
                move.l  #TAGCD_EJECTRESET,EjectTag_l(sp)
                lea     deviceName(pc),a0
                moveq   #0,d0
                lea     Request(sp),a1
                move.l  d0,d1
                JSRLIB  OpenDevice              ;OpenDevice(a0>ptr devicename, a1>ptr IOStdReq, d0>UnitNumber, d1>flags, a6>ExecBase)
                tst.l   d0
                bne.s   CDROR_Failed
                                ;Opened cd.device.
                move.w  #CD_CONFIG,Request+IO_COMMAND(sp)
                lea     EjectTag_l(sp),a1
                move.l  a1,Request+IO_DATA(sp)
                move.l  #0,Request+IO_LENGTH(sp)
                lea     Request(sp),a1
                JSRLIB  DoIO                    ;DoIO(a1>ptr to IOStdReq, a6>ExecBase)
                lea     Request(sp),a1
                move.l  d0,-(sp)                ;Store the return value of DoIO as return value for this funciton.
                JSRLIB  CloseDevice             ;CloseDevice(a1>ptr to IOStdReq, a6>ExecBase)
                move.l  (sp)+,d0                ;Restore return value.

CDROR_Failed:   move.l  Request+MN_REPLYPORT(sp),a0
                DONELOCALS sp
                move.b  #PA_IGNORE,MP_FLAGS(a0)
CDROR_Exit:
                move.l  d0,-(sp)
                lea.l   ll_MsgPortSemaphore(a5),a0
                JSRLIB  ReleaseSemaphore
                move.l  (sp)+,d0

                rts

*****i* a/CDReboot.asm/CDRebootDefault ***************************************
*
*   NAME
*       CDRebootDefault - Queries to establish the default reboot behaviour.
*
*   SYNOPSIS
*       CDRebootDefault (LowLevelBase, ExecBase)
*                        a5            a6
*
*   FUNCTION
*       Uses cd.device determine the current CD reboot behaviour and sets
*       ll_DefaultCDReboot.
*
*   INPUTS
*       LowLevelBase - Pointer to lowlevel.library
*       ExecBase - Pointer to exec.library
*
*   RESULT
*       NONE
*
******************************************************************************
CDRebootDefault
TEMP_SIZE       set     0                       ;Determine the number of bytes wanted for local variables
                ARRAYVAR Request,IOSTD_SIZE     ;Need an standard IO Requester.
                ARRAYVAR Data,CDINFO_Reserved1  ;and room for the return data.

                lea.l   ll_MsgPortSemaphore(a5),a0
                JSRLIB  ObtainSemaphore

                ALLOCLOCALS sp
                CLEARA  a1
                JSRLIB  FindTask
                move.l  ll_ERSetFunction(a5),a0 ;Get our general port structure.
                move.l  d0,MP_SIGTASK(a0)       ; SigTask
                move.b  #SIGB_SINGLE,MP_SIGBIT(a0)      ; SigBit
                move.b  #PA_SIGNAL,MP_FLAGS(a0) ; Signal...
                move.l  a0,Request+MN_REPLYPORT(sp)
                lea     deviceName(pc),a0
                moveq   #0,d0
                lea     Request(sp),a1
                move.l  d0,d1
                JSRLIB  OpenDevice              ;OpenDevice(a0>ptr devicename, a1>ptr IOStdReq, d0>UnitNumber, d1>flags, a6>ExecBase)
                tst.l   d0
                bne.s   Failed
                                ;Opened cd.device.
                move.w  #CD_INFO,Request+IO_COMMAND(sp)
                lea     Data(sp),a1
                move.l  a1,Request+IO_DATA(sp)
                move.l  #CDINFO_Reserved1,Request+IO_LENGTH(sp)
                lea     Request(sp),a1
                JSRLIB  DoIO                    ;DoIO(a1>ptr to IOStdReq, a6>ExecBase)
                lea     Request(sp),a1

                move.l  d0,-(sp)                ;Store the return value of DoIO as return value for this funciton.
                JSRLIB  CloseDevice             ;CloseDevice(a1>ptr to IOStdReq, a6>ExecBase)
                move.l  (sp)+,d0                ;Restore return value.
                beq.s   Succeed
Failed:         moveq   #0,d0
                bra.s   Exit
Succeed:        move.w  Data+CDINFO_EjectReset(sp),d0
Exit:           move.l  Request+MN_REPLYPORT(sp),a0
                DONELOCALS sp
                move.b  #PA_IGNORE,MP_FLAGS(a0)
                move.w  d0,ll_DefaultCDReboot(a5)

                lea.l   ll_MsgPortSemaphore(a5),a0
                JSRLIB  ReleaseSemaphore

                rts

deviceName      dc.b    'cd.device',0


                END
@


40.4
log
@Jim was move.l'ing into the word-sized field ll_CDRebootDefault.
He was also using a bmi bpl pair that I replaced with blo, bhi.
And lastly, I modified the code to determine the default the first 
time it's needed, rather than at init time -- as Jerry explained
to me that things wouldn't be properly set up at init time.
@
text
@d3 1
a3 1
*       $Id: cdreboot.asm,v 40.3 93/05/05 09:44:25 gregm Exp Locker: gregm $
d8 7
d57 1
a57 1
        INCLUDE 'cdgs:src/cd/cd.i'
d124 6
d131 1
d133 1
d166 7
a172 1
CDROR_Exit:     rts
d200 3
d238 4
@


40.3
log
@fixes problems with systemcontrol's cdreboot tag -- Jim was using
move.l's into IO_COMMAND instead of move.w's.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 40.2 93/03/31 18:52:06 Jim2 Exp Locker: Jim2 $
d7 5
a11 1
*	$Log:	CDReboot.asm,v $
d39 2
a40 2
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
d44 3
a46 3
	INCLUDE	'exec/macros.i'
	INCLUDE	'exec/io.i'
	INCLUDE	'exec/tasks.i'
d48 7
a54 8
	INCLUDE 'utility/tagitem.i'

	INCLUDE 'cdgs:src/cd/cd.i'

	INCLUDE	'/macros.i'
	INCLUDE	'/lowlevelbase.i'


d56 2
a57 2
		XDEF	CDRebootOnRemove
		XDEF	CDRebootDefault
d63 1
a63 1
*	CDRebootOnRemove - Set the expected behaviour upon ejecting the CD.
d66 2
a67 2
*	CDRebootOnRemove (resetState, LowLevelBase, ExecBase)
*			  D1	      a5	    a6
d70 1
a70 1
*	Uses cd.device to change the system response to ejecting the CD.
d73 4
a76 4
*	resetState - Desired behavior.
*	    0 - Do not reboot
*	    1 - Reboot
*	    2 - Reset to default behaviour.
d79 2
a80 2
*	error - Zero if no error, otherwise sign extended io_error field from
*		the request.
d84 24
a107 4
		moveq	#-1,d0			;Set return value.
		cmp.l	#2,d1
		bmi.s	NotDefault
		bpl	CDROR_Exit		;Two is the largest possible input.
a108 3
				;The user has requested the default behaviour.
				;This has been saved in ll_DefaultCDReboot at
				;library init time.
d110 42
a151 47
		move.w	ll_DefaultCDReboot(a5),d1
NotDefault:	tst.l	d1
		bmi.s	CDROR_Exit		;No negative values should be passed.
				;d1 contains a valid desired reboot state (0,1).
ValidParameter:
TEMP_SIZE	set	0			;Determine the number of bytes wanted for local variables
		ARRAYVAR Request,IOSTD_SIZE	;Need an standard IO Requester.
		LONGVAR	EjectTag		;A tag list starting with the eject tag.
		LONGVAR	EjectParameter
		LONGVAR	LastTag			;And ending with the end tag.

		ALLOCLOCALS sp
		CLEARA	a1
		JSRLIB	FindTask
		move.l	ll_ERSetFunction(a5),a0
		move.l	d0,MP_SIGTASK(a0)	; SigTask
		move.b	#SIGB_SINGLE,MP_SIGBIT(a0)	; SigBit
		move.b	#PA_SIGNAL,MP_FLAGS(a0)	; Signal...
		move.l	a0,Request+MN_REPLYPORT(sp)

				;Initialize the tag list
		move.l	#TAG_DONE,LastTag_l(sp)
		move.l	d1,EjectParameter_l(sp)
		move.l	#TAGCD_EJECTRESET,EjectTag_l(sp)
		lea	deviceName(pc),a0
		moveq	#0,d0
		lea	Request(sp),a1
		move.l	d0,d1
		JSRLIB	OpenDevice		;OpenDevice(a0>ptr devicename, a1>ptr IOStdReq, d0>UnitNumber, d1>flags, a6>ExecBase)
		tst.l	d0
		bne.s	CDROR_Failed
				;Opened cd.device.
		move.w	#CD_CONFIG,Request+IO_COMMAND(sp)
		lea	EjectTag_l(sp),a1
		move.l	a1,Request+IO_DATA(sp)
		move.l	#0,Request+IO_LENGTH(sp)
		lea	Request(sp),a1
		JSRLIB	DoIO			;DoIO(a1>ptr to IOStdReq, a6>ExecBase)
		lea	Request(sp),a1
		move.l	d0,-(sp)		;Store the return value of DoIO as return value for this funciton.
		JSRLIB	CloseDevice		;CloseDevice(a1>ptr to IOStdReq, a6>ExecBase)
		move.l	(sp)+,d0		;Restore return value.

CDROR_Failed:	move.l	Request+MN_REPLYPORT(sp),a0
		DONELOCALS sp
		move.b	#PA_IGNORE,MP_FLAGS(a0)
CDROR_Exit:	rts
d156 1
a156 1
*	CDRebootDefault - Queries to establish the default reboot behaviour.
d159 2
a160 2
*	CDRebootDefault (LowLevelBase, ExecBase)
*			 a5	       a6
d163 2
a164 2
*	Uses cd.device determine the current CD reboot behaviour and sets
*	ll_DefaultCDReboot.
d167 2
a168 2
*	LowLevelBase - Pointer to lowlevel.library
*	ExecBase - Pointer to exec.library
d171 1
a171 1
*	NONE
d175 42
a216 3
TEMP_SIZE	set	0			;Determine the number of bytes wanted for local variables
		ARRAYVAR Request,IOSTD_SIZE	;Need an standard IO Requester.
		ARRAYVAR Data,CDINFO_Reserved1	;and room for the return data.
a217 35
		ALLOCLOCALS sp
		CLEARA	a1
		JSRLIB	FindTask
		move.l	ll_ERSetFunction(a5),a0	;Get our general port structure.
		move.l	d0,MP_SIGTASK(a0)	; SigTask
		move.b	#SIGB_SINGLE,MP_SIGBIT(a0)	; SigBit
		move.b	#PA_SIGNAL,MP_FLAGS(a0)	; Signal...
		move.l	a0,Request+MN_REPLYPORT(sp)
		lea	deviceName(pc),a0
		moveq	#0,d0
		lea	Request(sp),a1
		move.l	d0,d1
		JSRLIB	OpenDevice		;OpenDevice(a0>ptr devicename, a1>ptr IOStdReq, d0>UnitNumber, d1>flags, a6>ExecBase)
		tst.l	d0
		bne.s	Failed
				;Opened cd.device.
		move.w	#CD_INFO,Request+IO_COMMAND(sp)
		lea	Data(sp),a1
		move.l	a1,Request+IO_DATA(sp)
		move.l	#CDINFO_Reserved1,Request+IO_LENGTH(sp)
		lea	Request(sp),a1
		JSRLIB	DoIO			;DoIO(a1>ptr to IOStdReq, a6>ExecBase)
		lea	Request(sp),a1
		move.l	d0,-(sp)		;Store the return value of DoIO as return value for this funciton.
		JSRLIB	CloseDevice		;CloseDevice(a1>ptr to IOStdReq, a6>ExecBase)
		move.l	(sp)+,d0		;Restore return value.
		beq.s	Succeed
Failed:		moveq	#0,d0
		bra.s	Exit
Succeed:	move.w	Data+CDINFO_EjectReset(sp),d0
Exit:		move.l	Request+MN_REPLYPORT(sp),a0
		DONELOCALS sp
		move.b	#PA_IGNORE,MP_FLAGS(a0)
		move.l	d0,ll_DefaultCDReboot(a5)
		rts
d219 1
a219 2
deviceName	dc.b	'cd.device',0
		END
@


40.2
log
@Added a replyport to the DoIO message. (CI33).
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 40.1 93/03/12 20:53:24 Jim2 Exp Locker: Jim2 $
d8 3
d122 1
a122 1
		move.l	#CD_CONFIG,Request+IO_COMMAND(sp)
a157 2
*   NOTE:  LowLevel base is NOT, NOT, NOT, NOT in a6, but a5.
*
d162 1
a162 1
		ARRAYVAR Data, CDINFO_Reserved1
d167 1
a167 1
		move.l	ll_ERSetFunction(a5),a0
d180 1
a180 1
		move.l	#CD_CONFIG,Request+IO_COMMAND(sp)
@


40.1
log
@When simplifing the calling routine LowLevelBase stays in a5 and
ExecBase appears in a6.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 40.0 93/03/02 13:22:32 Jim2 Exp Locker: Jim2 $
d8 4
d39 2
d81 1
a81 1
		bpl.s	CDROR_Exit		;Two is the largest possible input.
d99 8
d130 3
a132 1
CDROR_Failed:	DONELOCALS sp
d164 7
d193 3
a195 1
Exit:		DONELOCALS sp
@


40.0
log
@Changed all references from game.library to lowlevel.library
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 39.4 93/01/19 10:40:22 Jim2 Exp Locker: Jim2 $
d8 3
d54 2
a55 2
*	CDRebootOnRemove (resetState)
*			  D1
d81 1
a81 1
		move.w	ll_DefaultCDReboot(a6),d1
a91 2
		move.l	a6,-(sp)		;a6 will be changed.
		move.l	ll_ExecBase(a6),a6
a116 1
		move.l	(sp)+,a6
@


39.4
log
@Was mainpulating the stack incorrectly in CDRebootOnRemove.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 39.3 93/01/18 13:34:41 Jim2 Exp Locker: Jim2 $
d8 3
d37 1
a37 1
	INCLUDE	'/gamebase.i'
d75 1
a75 1
				;This has been saved in gm_DefaultCDReboot at
d78 1
a78 1
		move.w	gm_DefaultCDReboot(a6),d1
d90 1
a90 1
		move.l	gm_ExecBase(a6),a6
d125 2
a126 2
*	CDRebootDefault (GameBase, ExecBase)
*			 a5	   a6
d130 1
a130 1
*	gm_DefaultCDReboot.
d133 1
a133 1
*	GameBase - Pointer to game.library
d139 1
a139 1
*   NOTE:  Game base is NOT, NOT, NOT, NOT in a6, but a5.
d171 1
a171 1
		move.l	d0,gm_DefaultCDReboot(a5)
@


39.3
log
@Added CDRebootDefault.  Changed name for game library field
that has the CD default behavior.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 39.2 93/01/07 14:23:49 Jim2 Exp Locker: Jim2 $
d8 4
d112 2
a113 2
CDROR_Failed:	move.l	(sp)+,a6
		DONELOCALS sp
@


39.2
log
@Cleaned up comments and minimized the required include files.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 39.1 92/12/14 14:55:23 Jim2 Exp Locker: Jim2 $
d8 3
d35 1
d38 1
a38 1
******i game.library/CDRebootOnRemove ******************************************
d62 2
a63 2
		moveq	#0,d0			;Set return value.
		cmp.b	#2,d1
d65 7
a71 8
		bpl.s	Failed			;Two is the largest possible input.
						;The user has requested the default
						;behaviours.  The value for the
						;field gm_GameMachine provides the
						;default behavior.
		move.b	gm_GameMachine(a6),d1
		ext.w	d1
		bra.s	ValidParameter
d73 2
a74 2
		bmi.s	Exit			;No negative values should be passed.
						;d1 contains a valid desired reboot state (0,1).
d85 1
a85 1
						;Initialize the tag list
d95 2
a96 2
		bne.s	Failed
						;Opened cd.device.
d100 42
d143 10
a152 1
		move.l	d0,Request+IO_LENGTH(sp)
d159 7
a165 4

Failed:		DONELOCALS sp
		move.l	(sp)+,a6
Exit:		rts
@


39.1
log
@Tested failure, non-existant cd.device.
@
text
@d3 1
a3 1
*	$Id: CDReboot.asm,v 39.0 92/12/11 14:02:00 Jim2 Exp Locker: Jim2 $
d8 3
d15 1
a15 1
*	(C) Copyright 1992 Commodore-Amiga, Inc.
d19 2
a20 10
*
* System include files...
*
	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE	'exec/lists.i'
	INCLUDE	'exec/memory.i'
	INCLUDE 'exec/resident.i'
	INCLUDE	'exec/execbase.i'
	INCLUDE	'exec/libraries.i'
a21 1

a25 4

*
* Neat macros
*
d27 1
a33 11
*
*******************************************************************************
*
* The library structure ...
*

	INCLUDE	'/gamebase.i'




d44 1
d59 1
a59 1
		cmp.l	#2,d1
d64 1
a64 1
						;field GameMachine provided the
d66 2
a67 1
		move.w	gm_GameMachine(a6),d1
d90 1
a90 1
		CALLSYS	OpenDevice		;OpenDevice(a0>ptr devicename, a1>ptr IOStdReq, d0>UnitNumber, d1>flags, a6>ExecBase)
d100 1
a100 1
		CALLSYS	DoIO			;DoIO(a1>ptr to IOStdReq, a6>ExecBase)
d103 1
a103 1
		CALLSYS	CloseDevice		;CloseDevice(a1>ptr to IOStdReq, a6>ExecBase)
@


39.0
log
@Inital Release
@
text
@d3 1
a3 1
*	$Id: $
d7 3
a9 1
*	$Log: $
d11 1
d72 2
a73 1
*	NONE
d92 1
a92 1
		ARRAYVAR Request IO_STDSIZE	;Need an standard IO Requester.
d110 1
a110 1
		beq.s	Failed
@
