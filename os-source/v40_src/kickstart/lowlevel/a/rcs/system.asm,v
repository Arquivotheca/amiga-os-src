head     40.1;
branch   ;
access   ;
symbols  V40_35:40.1 rel40_34:40.1 rel40_33:40.1 rel40_32:40.1 rel40_29:40.1 rel40_28:40.1 rel40_27:40.1 rel40_26:40.1 rel40_25:40.1 rel40_24:40.1 rel40_23:40.1 rel40_22:40.1 rel40_21:40.1 rel40_20:40.1 rel40_19:40.1 rel40_18:40.1 rel40_17:40.1 rel40_16:40.1 rel40_15:40.1 rel40_14:40.1 rel40_13:40.1 rel40_12:40.1 rel40_11:40.1 rel40_4:39.6 rel40_3:39.6 rel40_2:39.6 rel40_1:39.6 rel39_7:39.6 rel39_6:39.6 rel39_5:39.5 rel39_4:39.4 rel39_3:39.3 rel39_2:39.3 rel39_1:39.2;
locks    ; strict;
comment  @* @;


40.1
date     93.03.12.21.06.30;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.03.02.13.22.19;  author Jim2;  state Exp;
branches ;
next     39.6;

39.6
date     93.01.13.13.44.03;  author Jim2;  state Exp;
branches ;
next     39.5;

39.5
date     93.01.07.14.25.40;  author Jim2;  state Exp;
branches ;
next     39.4;

39.4
date     93.01.05.12.10.20;  author Jim2;  state Exp;
branches ;
next     39.3;

39.3
date     92.12.14.14.56.22;  author Jim2;  state Exp;
branches ;
next     39.2;

39.2
date     92.12.11.14.06.36;  author Jim2;  state Exp;
branches ;
next     39.1;

39.1
date     92.12.08.16.53.40;  author Jim2;  state Exp;
branches ;
next     39.0;

39.0
date     92.12.07.16.38.17;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Does the system take over.
@


40.1
log
@When playing with the calling routine I noted that it already had
ExecBase in a useful place.  Also that LowLevelBase was in a5.
@
text
@******************************************************************************
*
*	$Id: system.asm,v 40.0 93/03/02 13:22:19 Jim2 Exp Locker: Jim2 $
*
******************************************************************************
*
*	$Log:	system.asm,v $
* Revision 40.0  93/03/02  13:22:19  Jim2
* Changed all references from game.library to lowlevel.library
*
* Revision 39.6  93/01/13  13:44:03  Jim2
* No longer use Forbid when taking over the system.
*
* Revision 39.5  93/01/07  14:25:40  Jim2
* Cleaned up the comments and minimized the list of included files.
*
* Revision 39.4  93/01/05  12:10:20  Jim2
* Had .s modifing commands when I wanted .b.
*
* Revision 39.3  92/12/14  14:56:22  Jim2
* Nest multiple calls for owning the system.  Tested.
*
* Revision 39.2  92/12/11  14:06:36  Jim2
* This became greatly simpler.  The process checking has
* migrated out to SystemControlA and nest counts have been
* added.
*
* Revision 39.1  92/12/08  16:53:40  Jim2
* Tested the functions here in.
*
* Revision 39.0  92/12/07  16:38:17  Jim2
* Initial release prior to testing.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

	INCLUDE	'exec/macros.i'

	INCLUDE	'/lowlevelbase.i'



		XDEF	TakeOverSystem





*****i* lowlevel.library/TakeOverSystem **************************************
*
*   NAME
*	TakeOverSystem - Shutdown or reenable multitasking.
*
*   SYNOPSIS
*	Success = TakeOverSystem (systemState, LowLevelBase, ExecBase)
*	D0			  D1	       a5	     a6
*
*	BOOL TakeOverSystem (BOOL);
*
*   FUNCTION
*	This function is used to give the game developers a warm and fuzzy
*	feeling.  To 'shutdown' multitasking the process is given a high
*	priority.
*
*	The result is the process that 'owns' the system will stay on the
*	CPU until a wait is invoked.  Since this places the process on the
*	waiting queue.  When this process returns to the ready queue it
*	will be rescheduled at the next available time quanta.
*
*   INPUTS
*	SystemState - boolean that determines whether the multitasking is to
*		      be shutdown or reenabled.
*
*   RESULT
*	NONE
*
******************************************************************************
TakeOverSystem
		tst.w	d1
		bne.s	OwnSystem
						;The user wants give up the system.
		subq.b	#1,ll_NestOwn(a5)	;Decrement the nest count.
		bpl.s	Exit
						;The nest count is -1 so return the system.
		bra.s	SwapPriority
OwnSystem					;The user wants to own the system.
		addq.b	#1,ll_NestOwn(a5)	;Increment the Next count.
		bne.s	Exit
						;The nest count is 0 so take over the system.
						;Swap the current task priority with the stored task priority.
SwapPriority:	move.l	ll_SystemOwner(a5),a1
		move.b	ll_TaskPri(a5),d0
		JSRLIB	SetTaskPri		;SetTaskPri(a1>Task,d0[7:0]>Priority,a6>ExecBase)
		move.b	d0,ll_TaskPri(a5)	;Save the original Priority.
Exit:		rts
		END
@


40.0
log
@Changed all references from game.library to lowlevel.library
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.6 93/01/13 13:44:03 Jim2 Exp Locker: Jim2 $
d7 4
a10 1
*	$Log:	System.asm,v $
d58 2
a59 2
*	Success = TakeOverSystem (systemState)
*	D0			  D1
d85 1
a85 1
		subq.b	#1,ll_NestOwn(a6)	;Decrement the nest count.
d90 1
a90 1
		addq.b	#1,ll_NestOwn(a6)	;Increment the Next count.
d94 1
a94 4
SwapPriority:	movem.l	a5-a6,-(sp)		;Store some scratch registers.
		move.l	a6,a5
		move.l	ll_ExecBase(a5),a6
		move.l	ll_SystemOwner(a5),a1
a97 1
		movem.l	(sp)+,a5-a6
@


39.6
log
@No longer use Forbid when taking over the system.
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.5 93/01/07 14:25:40 Jim2 Exp Locker: Jim2 $
d8 3
d39 1
a39 1
	INCLUDE	'/gamebase.i'
d49 1
a49 1
******i game.library/TakeOverSystem ******************************************
d82 1
a82 1
		subq.b	#1,gm_NestOwn(a6)	;Decrement the nest count.
d87 1
a87 1
		addq.b	#1,gm_NestOwn(a6)	;Increment the Next count.
d93 3
a95 3
		move.l	gm_ExecBase(a5),a6
		move.l	gm_SystemOwner(a5),a1
		move.b	gm_TaskPri(a5),d0
d97 1
a97 1
		move.b	d0,gm_TaskPri(a5)	;Save the original Priority.
@


39.5
log
@Cleaned up the comments and minimized the list of included files.
,
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.4 93/01/05 12:10:20 Jim2 Exp Locker: Jim2 $
d8 3
d59 2
a60 4
*	feeling.  To 'shutdown' multitasking the process is given the highest
*	possible priority.  In case there are other processes of equal
*	priority FORBID is called to prevent swapping upon the expiration
*	of the time quanta.
a81 4
		movem.l	a5-a6,-(sp)		;Store some scratch registers.
		move.l	a6,a5
		move.l	gm_ExecBase(a5),a6
		JSRLIB	Permit			;Permit(a6>ExecBase)
d87 3
a89 2
		movem.l	a5-a6,-(sp)
		movea.l	a6,a5
d91 1
a91 3
		JSRLIB	Forbid			;Forbid (a6>ExecBase)
						;Swap the current task priority with the stored task priority.
SwapPriority:	move.l	gm_SystemOwner(a5),a1
@


39.4
log
@Had .s modifing commands when I wanted .b.
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.3 92/12/14 14:56:22 Jim2 Exp Locker: Jim2 $
d8 3
d26 1
a26 1
*	(C) Copyright 1992 Commodore-Amiga, Inc.
d30 4
a33 14
*
* System include files...
*
	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE	'exec/lists.i'
	INCLUDE	'exec/memory.i'
	INCLUDE 'exec/resident.i'
	INCLUDE	'exec/execbase.i'
	INCLUDE	'exec/libraries.i'
*
* Neat macros
*
	INCLUDE	'/macros.i'
a39 7
*
*******************************************************************************
*
* The library structure ...
*

	INCLUDE	'/gamebase.i'
d71 1
a71 2
*	result - when attempting a shutdown of multitask indicates success,
*		 or failure.
d84 1
a84 1
		CALLSYS	Permit			;Permit(a6>ExecBase)
d93 1
a93 1
		CALLSYS Forbid			;Forbid (a6>ExecBase)
d97 1
a97 1
		CALLSYS SetTaskPri		;SetTaskPri(a1>Task,d0[7:0]>Priority,a6>ExecBase)
@


39.3
log
@Nest multiple calls for owning the system.  Tested.
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.2 92/12/11 14:06:36 Jim2 Exp Locker: Jim2 $
d8 3
d93 1
a93 1
		subq.s	#1,gm_NestOwn(a6)	;Decrement the nest count.
d102 1
a102 1
		addq.s	#1,gm_NestOwn(a6)	;Increment the Next count.
@


39.2
log
@This became greatly simpler.  The process checking has
migrated out to SystemControlA and nest counts have been
added.
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.1 92/12/08 16:53:40 Jim2 Exp Locker: Jim2 $
d8 5
d91 1
a91 1
		bmi.s	Exit
@


39.1
log
@Tested the functions here in.
@
text
@d3 1
a3 1
*	$Id: System.asm,v 39.0 92/12/07 16:38:17 Jim2 Exp Locker: Jim2 $
d8 3
d36 1
a36 2
		XDEF	OwnSystem
		XDEF	GiveupSystem
d46 7
d54 21
a74 1
*******************************************************************************
d76 3
a78 2
* Swap the current task priority with the one saved in the library structure.
* But only if either noone owns the system, or the current task owns the system.
d80 10
a89 3
OwnSystem
		move.l	a5,-(sp)
		movea.l	a6,a5
d91 7
a97 38
		CALLSYS Forbid		;Forbid (a6>ExecBase)

		moveq	#0,d0
		move.l	d0,a1
		CALLSYS	FindTask	;FindTask (a1>Null:Current Task, a6>ExecBase)
					;The Current task pointer is in d0.
		sub.l	gm_SystemOwner(a5),d0
		beq.s	1$
					;The current task does not own the system.
		tst.l	gm_SystemOwner(a5)
		beq.s	2$
		moveq	#-1,d0
1$:					;The system is currently owned (either this, or another task).
		addq	#1,d0		;If this was branched to then d0 is equal to
					;zero if it was droped, then d0 is equal to
					;minus one.
					;The branching means the task already owns
					;the system, so TRUE (1) must be returned in
					;d0.
					;Falling means the task cannot own the system
					;so FALSE (0) must be returned in d0.
		CALLSYS	Permit		;Permit (a6>ExecBase)
		bra.s	3$
					;No task owns the system yet.
2$:		move.l	d0,gm_SystemOwner(a5)
		move.l	d0,a1
		move.b	gm_TaskPri(a5),d0
		CALLSYS SetTaskPri	;SetTaskPri(a1>Task,d0[7:0]>Priority,a6>ExecBase)
		move.b	d0,gm_TaskPri(a5)	;Save the original Priority.
		moveq	#1,d0

3$:		move.l	(sp)+,a5
		rts



GiveupSystem
		move.l	a5,-(sp)
d100 3
a102 18
		CALLSYS Forbid		;Forbid (a6>ExecBase)

		moveq	#0,d0
		move.l	d0,a1
		CALLSYS	FindTask	;FindTask (a1>Null:Current Task, a6>ExecBase)
					;The Current task pointer is in d0.
		sub.l	gm_SystemOwner(a5),d0

					;We can do the permit now since we will only be
					;changing stuff if we already own the system.  If
					;we already own the system we are already in a
					;forbid.

		CALLSYS	Permit		;Permit (a6>ExecBase)
		tst.l	d0
		bne.s	1$
					;The current task owns the system.
		move.l	gm_SystemOwner(a5),a1
d104 1
a104 1
		CALLSYS SetTaskPri	;SetTaskPri(a1>Task,d0[7:0]>Priority,a6>ExecBase)
d106 2
a107 7

		moveq	#0,d0
		move.l	d0,gm_SystemOwner(a5)
		CALLSYS	Permit
1$:		move.l	(sp)+,a5
		moveq	#1,d0
		rts
@


39.0
log
@Initial release prior to testing.
@
text
@d3 1
a3 1
*	$Id$
d7 3
a9 1
*	$Log$
d11 1
d53 1
a53 1
		move.l	ExecBase(a5),a6
d65 1
d67 8
d83 1
a84 1
		moveq	#0,d0
d93 1
a93 1
		move.l	ExecBase(a5),a6
d120 1
@
