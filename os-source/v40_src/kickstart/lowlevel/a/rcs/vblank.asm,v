head     40.5;
branch   ;
access   ;
symbols  V40_35:40.5 rel40_34:40.4 rel40_33:40.4 rel40_32:40.4 rel40_29:40.4 rel40_28:40.4 rel40_27:40.3 rel40_26:40.3 rel40_25:40.3 rel40_24:40.3 rel40_23:40.3 rel40_22:40.3 rel40_21:40.3 rel40_20:40.3 rel40_19:40.3 rel40_18:40.3 rel40_17:40.3 rel40_16:40.3 rel40_15:40.3 rel40_14:40.3 rel40_13:40.2 rel40_12:40.2 rel40_11:40.2 rel40_4:40.0 rel40_3:39.1 rel40_2:39.1 rel40_1:39.1 rel39_7:39.1;
locks    ; strict;
comment  @* @;


40.5
date     93.07.30.16.08.05;  author vertex;  state Exp;
branches ;
next     40.4;

40.4
date     93.05.05.09.45.56;  author gregm;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.23.14.39.51;  author Jim2;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.10.12.21.50;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.02.13.37.40;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.02.22.13.13.51;  author Jim2;  state Exp;
branches ;
next     39.1;

39.1
date     93.01.18.13.21.57;  author Jim2;  state Exp;
branches ;
next     39.0;

39.0
date     93.01.15.13.46.46;  author Jim2;  state Exp;
branches ;
next     ;


desc
@Makes adding a VBlank interrupt as easy as a timer, or
keyboard interrupt.
@


40.5
log
@Autodoc and include cleanup
@
text
@******************************************************************************
*
*	$Id: vblank.asm,v 40.4 93/05/05 09:45:56 gregm Exp $
*
******************************************************************************
*
*	$Log:	vblank.asm,v $
* Revision 40.4  93/05/05  09:45:56  gregm
* autodoc changes
*
* Revision 40.3  93/03/23  14:39:51  Jim2
* Did some work polishing the autodocs.
*
* Revision 40.2  93/03/10  12:21:50  Jim2
* Cleaned up results of Vertex code walkthrough.
*
* Revision 40.1  93/03/02  13:37:40  Jim2
* Changed all references from game.library to lowlevel.library.
*
* Revision 40.0  93/02/22  13:13:51  Jim2
* AddVBlankInt saves the interrupt structure relative a5 not
* ExecBase (a6).
*
* Revision 39.1  93/01/18  13:21:57  Jim2
* Cleaned and formatted comments.
*
* Revision 39.0  93/01/15  13:46:46  Jim2
* Initial Release - Untested.
*
*
*
*	(C) Copyright 1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

	INCLUDE	'exec/macros.i'
	INCLUDE	'exec/interrupts.i'
	INCLUDE	'exec/memory.i'

	INCLUDE	'hardware/intbits.i'

	INCLUDE	'/macros.i'
	INCLUDE	'/lowlevelbase.i'




		XDEF	AddVBlankInt
		XDEF	RemVBlankInt


******* lowlevel.library/AddVBlankInt ****************************************
*
*   NAME
*	AddVBlankInt -- adds a routine executed every vertical blank. (V40)
*
*   SYNOPSIS
*	intHandle = AddVBlankInt(intRoutine, intData);
*	D0		         a0	  a1
*
*	APTR AddVBlankInt(APTR, APTR);
*
*   FUNCTION
*	Lets you attach a routine to the system which will get called
*	everytime a vertical blanking interrupt occurs.
*
*	The routine is called from within an interrupt, so normal
*	restrictions apply. The routine must preserve the following
*	registers: A2, A3, A4, A7, D2-D7. Other registers are
*	scratch, except for D0, which MUST BE SET TO 0 upon
*	exit. On entry to the routine, A1 holds 'intData' and A5
*	holds 'intRoutine'.
*
*	If your program is to exit without reboot, you MUST call
*	RemVBlankInt() before exiting.
*
*	Only one interrupt routine may be added to the system.  ALWAYS check
*	the return value in case some other task has previously used this
*	function.
*
*   INPUTS
*	intRoutine - the routine to invoke every vblank. This routine should
*		     be as short as possible to minimize its effect on overall
*		     system performance.
*	intData - data passed to the routine in register A1. If more than one
*		  long word of data is required this should be a pointer to
*		  a structure that contains the required data.
*
*   RESULT
*	intHandle - a handle used to manipulate the interrupt, or NULL
*		    if it was not possible to attach the routine.
*
*   SEE ALSO
*	RemVBlankInt()
*
******************************************************************************
AddVBlankInt

		movem.l	a0-a1/a5-a6,-(sp)
		move.l	a6,a5
		move.l	ll_ExecBase(a5),a6
		move.l	#IS_SIZE,d0
		move.l	#MEMF_PUBLIC|MEMF_CLEAR,d1
		JSRLIB	AllocMem		;Get memory for an interrupt structure.
		tst.l	d0
		beq.s	NoMem

		JSRLIB	Forbid			;Forbid does not change the value in d0.
		tst.l	ll_VBlankInt(a5)
		bne.s	avbi_ErrorExit		;Only one interrupt allowed.

		move.l	d0,ll_VBlankInt(a5)
		JSRLIB	Permit			;Permit does not change the value in d0.
		move.l	d0,a1
		move.b	#NT_INTERRUPT,LN_TYPE(a1)
		move.l	(sp)+,IS_CODE(a1)
		move.l	(sp)+,IS_DATA(a1)	;Initialize the structure.
		move.l	LN_NAME(a5),LN_NAME(a1)
		move.l	#INTB_VERTB,d0		;Add it to the list of interrupts.
		JSRLIB	AddIntServer
		move.l	ll_VBlankInt(a5),d0
		movem.l	(sp)+,a5-a6
		rts

avbi_ErrorExit:	JSRLIB	Permit			;Permit does not change d0.
		move.l	#IS_SIZE,a1
		exg	a1,d0
		JSRLIB	FreeMem
		CLEAR	d0
NoMem:		movem.l	(sp)+,a0-a1/a5-a6
		rts

******* lowlevel.library/RemVBlankInt ****************************************
*
*   NAME
*	RemVBlankInt -- remove a previously installed vertical blank routine.
*			(V40)
*
*   SYNOPSIS
*	RemVBlankInt(intHandle);
*		     A1
*
*	VOID RemVBlankInt(APTR);
*
*   FUNCTION
*	Removes a vertical blank interrupt routine previously added with
*	AddVBlankInt().
*
*   INPUTS
*	intHandle - handle obtained from AddVBlankInt(). This may be NULL,
*		    in which case this function does nothing.
*
*   SEE ALSO
*	AddVBlankInt()
*
******************************************************************************
RemVBlankInt
		movem.l	a5/a6,-(sp)		;Save the parameter and scratch registers.
		move.l	a6,a5
		move.l	ll_ExecBase(a5),a6
		move.l	a1,-(sp)
		beq.s	NullPtr

		clr.l	ll_VBlankInt(a5)	;Clear the remembered structure.
		move.l	#INTB_VERTB,d0
		JSRLIB	RemIntServer		;Remove it from the chain.
		move.l	(sp)+,a1
		move.l	#IS_SIZE,d0
		JSRLIB	FreeMem			;Free the memory for the structure.
		movem.l	(sp)+,a5/a6
		rts
	;NothingToDo:	JSRLIB	Permit		April 21, 1993 This is a dead line and should be removed.
NullPtr		movem.l	(sp)+,a1/a5-a6
		rts

		end
@


40.4
log
@autodoc changes
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 40.3 93/03/23 14:39:51 Jim2 Exp Locker: Jim2 $
d7 4
a10 1
*	$Log:	VBlank.asm,v $
d56 1
a56 1
*	AddVBlankInt - Adds routine executed every vertical blank.
d59 2
a60 2
*	Handle = AddVBlankInt(IntRoutine, IntData)
*	d0		      a0	  a1
d62 1
a62 1
*	APTR AddVBlankInt(APTR, APTR)
d65 9
a73 6
*	When the VBLANK occurs the routine pointed to by IntRoutine is
*	called.  As with any other assembly routines d0, d1, a0 and a1 can
*	be considered scratch, all other registers must have their values
*	preserved.  However, upon exit d0 MUST be cleared.  When the
*	interrupt routine is invoked a1 will contain the value passed to
*	this routine as IntData.
a74 1
*   NOTE
a81 6
*	An Exec Interrupt structure is created when adding the interupt.
*	All of the register conventions of interrupt server are observed
*	when invoking IntRoutine.  This means two additional scratch
*	registers are available; a5 (which will contain the address of
*	IntRoutine) and a6.  The priority used is zero.
*
d83 6
a88 8
*	IntRoutine - Pointer to the interrupt routine invoked every
*		     vertical blank.
*		     NOTE:  This routine should be as short as possible to
*		     minimize its effect to overall system preformance.
*	IntData - Data passed to the interrupt routine in register a1.
*		  If more than one long word of data is required this
*		  should be a pointer to structure that contains the
*		  required data.
d91 2
a92 2
*	Handle - Pointer to the handle used in manipulating the interrupt.
*		 NULL if it was not possible create the interrupt.
d94 1
a94 1
*   SEE ALSO:
d96 1
d135 4
a138 2
*  NAME
*	RemVBlankInt - Remove a previously installed vertical blank routine.
d140 9
a148 14
*  SYNOPSIS
*	RemVBlankInt(Handle)
*		     a1
*
*	VOID RemVBlankInt(APTR)
*
*  FUNCTION
*	Remove a vertical blank interrupt routine previously added with
*	AddVBlankInt.  Additionally, any resources involved in the interrupt
*	will be freed.
*
*  INPUTS
*	Handle - Pointer to the handle returned from AddVBlankInt().
*		 This routine will handle a NULL.
d150 3
a152 2
*  RESULT
*	NONE
d154 1
a154 1
*  SEE ALSO:
d156 1
@


40.3
log
@Did some work polishing the autodocs.
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 40.2 93/03/10 12:21:50 Jim2 Exp Locker: Jim2 $
d8 3
d71 1
a71 1
*	RemVBlankInt before exiting.
d77 6
d98 1
a98 1
*	RemVBlankInt
d152 2
a153 1
*	Handle - Pointer to the handle returned from AddVBlankInt.
d159 1
a159 1
*	AddVBlankInt
d168 1
a168 1
		clr.l	ll_VBlankInt(a5)
d170 1
a170 1
		JSRLIB	RemIntServer
d173 1
a173 1
		JSRLIB	FreeMem
d176 1
a176 1
NothingToDo:	JSRLIB	Permit
@


40.2
log
@Cleaned up results of Vertex code walkthrough.
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 40.1 93/03/02 13:37:40 Jim2 Exp Locker: Jim2 $
d8 3
d59 6
a64 4
*	This routine sets up IntRoutine so it is invoked every vertical
*	blank.  As with any other assembly routine d0, d1, a0 and a1 can be
*	considered scratch, all other registers must have their values
*	preserved.  When the IntRoutine is invoked a1 will contain IntData.
d66 2
a67 1
*	NOTE:  If your program is to exit without reboot, you MUST call
d70 3
a72 3
*	NOTE:  Only one interrupt routine may be added to the system.
*	ALWAYS check the return value in case some other task has previously
*	used this function.
@


40.1
log
@Changed all references from game.library to lowlevel.library.
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 40.0 93/02/22 13:13:51 Jim2 Exp Locker: Jim2 $
d8 3
a85 2
		tst.l	ll_VBlankInt(a6)
		bne.s	avbi_ErrorExit		;Only one interrupt allowed.
d96 6
a102 1
		move.l	d0,ll_VBlankInt(a5)
d106 1
d113 5
d119 1
a119 1
avbi_ErrorExit:	rts
d137 1
a137 2
*	Handle - Pointer to the handle returned from AddVBlankInt.  This
*		 must not be NULL or serious problems will occur.
d150 3
a152 6
		moveq.l	#0,d0
		JSRLIB	Forbid
		cmpa.l	ll_VBlankInt(a5),a1
		bne.s	NothingToDo
		move.l	d0,ll_VBlankInt(a5)
		JSRLIB	Permit
a153 1
		move.l	(sp),a1
d161 1
a161 1
		movem.l	(sp)+,a1/a5-a6
@


40.0
log
@AddVBlankInt saves the interrupt structure relative a5 not
ExecBase (a6).
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 39.1 93/01/18 13:21:57 Jim2 Exp Locker: Jim2 $
d8 4
d32 1
a32 1
	INCLUDE	'/gamebase.i'
d41 1
a41 1
******* game.library/AddVBlankInt ********************************************
d83 1
a83 1
		tst.l	gm_VBlankInt(a6)
d88 1
a88 1
		move.l	gm_ExecBase(a5),a6
d96 1
a96 1
		move.l	d0,gm_VBlankInt(a5)
d102 1
a102 1
		move.l	gm_VBlankInt(a5),d0
d109 1
a109 1
******* game.library/RemVBlankInt ********************************************
d137 1
a137 1
		move.l	gm_ExecBase(a5),a6
d141 1
a141 1
		cmpa.l	gm_VBlankInt(a5),a1
d143 1
a143 1
		move.l	d0,gm_VBlankInt(a5)
@


39.1
log
@Cleaned and formatted comments.
@
text
@d3 1
a3 1
*	$Id: VBlank.asm,v 39.0 93/01/15 13:46:46 Jim2 Exp Locker: Jim2 $
d8 3
d92 1
a92 1
		move.l	d0,gm_VBlankInt(a6)
d98 1
a98 1
		move.l	gm_VBlankInt(a6),d0
@


39.0
log
@Initial Release - Untested.
@
text
@d3 1
a3 1
*	$Id: $
d7 3
a9 1
*	$Log: $
d12 1
d43 1
a43 1
*	APTR = AddVBlankInt(APTR, APTR)
d54 3
a56 3
*	NOTE:  Only one interrupt routine may be added to the system.  ALWAYS
*	check the return value in case some other task has previously used
*	this function.
d77 2
a78 1
		bne.s	avbi_ErrorExit
d110 1
a110 1
*	RemVBlankInt(APTR)
d118 2
a119 2
*	Handle - Pointer to the handle returned from AddVBlankInt.  This must
*		 not be NULL or serious problems will occur.
@
