head     1.11;
branch   ;
access   ;
symbols  V40_1:1.11 V39_5:1.9 V39_4:1.8 V39_2:1.6 V39_1:1.5;
locks    ; strict;
comment  @**	@;


1.11
date     93.05.18.10.41.32;  author mks;  state Exp;
branches ;
next     1.10;

1.10
date     92.10.23.13.37.23;  author mks;  state Exp;
branches ;
next     1.9;

1.9
date     92.05.28.19.57.28;  author mks;  state Exp;
branches ;
next     1.8;

1.8
date     92.04.30.15.35.00;  author mks;  state Exp;
branches ;
next     1.7;

1.7
date     92.04.06.14.05.37;  author mks;  state Exp;
branches ;
next     1.6;

1.6
date     92.02.27.17.52.39;  author mks;  state Exp;
branches ;
next     1.5;

1.5
date     92.02.25.20.47.47;  author mks;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.17.15.40.43;  author bryce;  state Exp;
branches ;
next     1.3;

1.3
date     91.05.16.01.12.15;  author bryce;  state Exp;
branches ;
next     1.2;

1.2
date     91.05.15.10.11.12;  author bryce;  state Exp;
branches ;
next     1.1;

1.1
date     91.05.14.13.26.55;  author bryce;  state Exp;
branches ;
next     ;


desc
@A3000 specific software.  This is the first of many such hardware-
specific "bonus" files.
@


1.11
log
@Updated the conditional assembly...
@
text
@**
** $Id: bonus.asm,v 1.10 92/10/23 13:37:23 mks Exp Locker: mks $
**
** The general bonus module.  This contains the hardware specific code
** needed on various machines.
**
**  (C) Copyright 1991,1992 Commodore-Amiga, Inc.
**      All Rights Reserved
**
*******************************************************************************

	SECTION	bonus,code

*
* The A3000 hardware currently only needs the SCRAM test
*
	IFD	MACHINE_A3000
SCRAM	EQU	1
	ENDC
*
* The A4000 also only needs the SCRAM test
*
	IFD	MACHINE_A4000
SCRAM	EQU	1
	ENDC
*
	INCLUDE	"bonus_rev.i"
*
* If we need scram testing...
*
	IFD	SCRAM
*
*
	INCLUDE "exec/types.i"
	INCLUDE "exec/nodes.i"
	INCLUDE "exec/macros.i"
	INCLUDE	"exec/execbase.i"
	INCLUDE "exec/memory.i"
	INCLUDE "exec/resident.i"
	INCLUDE "v:include/internal/a3000_hardware.i"
*
RAMEND		EQU $08000000
*
ResidentTag:				; STRUCTURE RT,0
		dc.w	RTC_MATCHWORD	;    UWORD RT_MATCHWORD
		dc.l	ResidentTag	;    APTR  RT_MATCHTAG
		dc.l	EndTag		;    APTR  RT_ENDSKIP
		dc.b	RTF_COLDSTART	;    BYTE  RT_FLAGS
		dc.b	VERSION		;    UBYTE RT_VERSION
		dc.b	NT_UNKNOWN	;    UBYTE RT_TYPE
		dc.b	101		;    BYTE  RT_PRI
		dc.l	BonusName	;    APTR  RT_NAME
		dc.l	BonusID		;    APTR  RT_IDSTRING
		dc.l	initcode	;    APTR  RT_INIT
					;    LABEL RT_SIZE
*
initcode:
*
* Save all the registers I will use...
*
		movem.l	d2-d7/a2-a5,-(sp)
*
* First check to make sure we have at least a 68030...
*
		btst.b	#AFB_68030,AttnFlags+1(a6)
		beq.s	scram_Bail	; if not 68030 or better, skip test
*
* Now allocate and copy the code to CHIP memory to do the test...
*
		moveq.l	#SCRAMtestE-SCRAMtest,d0	; Test size
		moveq	#MEMF_CHIP,d1			; memory type
		JSRLIB	AllocMem			; Allocate...
		tst.l	d0				; check if we got it
		beq.s	scram_Bail			; if not, we bail out
		move.l	d0,a1				; Get pointers to it
		move.l	d0,a5				; (a5 for supervisor)
		lea.l	SCRAMtest(pc),a0		; Code in ROM...
		moveq	#((SCRAMtestE-SCRAMtest)/2)-1,d0
scram_Copy:	move.w	(a0)+,(a1)+			; Copy it in words...
		dbra	d0,scram_Copy			; keep going...
		JSRLIB	CacheClearU			; Clear the caches...
*
* Now, we will need a 0xFF mask if we are not a 68040 or better...
*
		btst.b	#AFB_68040,AttnFlags+1(a6)
		seq	d3		; d3==0 if 68040...  -1 otherwise
*
* Now, we turn off all caches for a while...
*
		moveq.l	#0,d0		; No caches on...
		moveq.l	#-1,d1		; Do this for all of them
		JSRLIB	CacheControl	; Turn them all off
		move.l	d0,-(sp)	; Store old bits...
*
* Ok, so call the test routine that is now in CHIP memory...
*
		JSRLIB	Supervisor	; (a5/a6 are not trashed)
*
* Ok, now turn them on again...
*
		move.l	(sp)+,d0	; Get old bits
		move.l	d0,d1		; All of them
		JSRLIB	CacheControl	; Put them back...
*
* Free the memory...
*
		move.l	a5,a1				; a5 from before...
		moveq.l	#SCRAMtestE-SCRAMtest,d0	; test size
		JSRLIB	FreeMem				; Goodby...
*
* Restore and exit...
*
scram_Bail:	movem.l (sp)+,d2-d7/a2-a5
		moveq	#0,d0
		rts


*
* Oh me, oh my, what we have to do is not die...
*
* So, we get into this code and we need to make sure that things do
* not die...  (and do not use the stack!)
*
* Register usage:
*	a4	- pointer to the RAMSEY register...
*	a3	- pointer at memory under test...
*	a2	- temp pointer...
*	d4-d7	- saved memory...  (memory under test)
*	d3	- the 68040 flag... (set from above)
*	d2	- General flag mask for RAMSEY...
*	d0-d1	- scrap...
*
* This is the test for Static Column Dynamic RAM (aka "SCRAM").   Quite
* magic and messy, and that's after improvements.  You basically turn on
* the feature, and if all ram stops working, you've got a system without
* SCRAM.  Since the OS may be running from FAST memory we have this
* problem of the code going away if you don't have SCRAM memory so we
* also copy the test to CHIP memory first.  What a pain!
*
* For future compatiblity, Ramsey registers must be accessed in supervisor
* mode.  This code must run DISABLED, and not cause any MMU table searches.
* Chip ram is ok, chip registers or funny timing is not.  Test must be
* complete before the next refresh cycle.  Must never write while in
* "SCRAM" mode on an A4000 or may fry the hardware.  Must restore
* any values that may have been trashed in the test.  Must not turn on
* "WRAP TERMINATION" if running a 68040.  I'm trapped in a fortune cookie
* factory and can't wake up.
*
SCRAMtest:	or.w	#$0700,sr	; DISABLE, rte will restore SR...
*
* First, set up registers...
*
		lea.l	A3000_RamControl,a4
		lea	RAMEND-(512*1024)-(4*4),a3
		moveq.l	#RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE,d2	; Get mask...
*
* Check if we have a good RAMSEY
*
		cmp.b	#ANCIENT_RAMSEY,A3000_RamseyVersion-A3000_RamControl(a4)
		beq.s	scram_TooOld
*
* Ok, so first get the data from memory (save it) and write in a new set
*
		movem.l	(a3),d4/d5/d6/d7	; Get the old memory
*
* Now write the test pattern (non-scram mode)
*
		move.l	a3,a2			; Get temp pointer...
		move.l	a2,(a2)+		; Write 4 longs...
		move.l	a2,(a2)+		; Write 4 longs...
		move.l	a2,(a2)+		; Write 4 longs...
		move.l	a2,(a2)+		; Write 4 longs...
*
* Ok, now we need to turn on the burst page mode and read back the values...
*
		move.l	d2,d0			; Get full mode mask
		or.b	(a4),d0			; Get the mask...
		nop				; Must sync the bus... !!!!
		move.b	d0,(a4)			; Set the mode...
*
* Now spin until it takes effect...
*
scram_Spin1:	nop				; Sync the bus...
		move.b	(a4),d1			; Get status...
		and.b	d2,d1			; (mask it)
		cmp.b	d2,d1			; They need to match...
		bne.s	scram_Spin1		; Keep waiting for it...
*
* Ok, now read back the test pattern (in scram mode)
*
		move.l	d2,d0			; Get full mode mask
		moveq.l	#4-1,d1			; Number of longs...
scram_TestLoop:	cmp.l	-(a2),a2		; Check it!
		dbne.s	d1,scram_TestLoop	; test result and loop count
		bne.s	scram_NoGood		; If not good, skip
		moveq.l	#RAMCF_WRAP,d0		; Yes SCRAM
		and.b	d3,d0			; Mask with 68040 flag...
		addq.l	#RAMCF_PAGE,d0		; Never turn on page mode
*
* Ok, now d0 has the inverted scram settings...  So lets set everything to
* what it needs to be...
*
scram_NoGood:	not.l	d0			; Invert d0
		and.b	(a4),d0			; and in the current settings
		nop				; Must sync the bus... !!!!
		move.b	d0,(a4)			; Set the mode...
		and.b	d2,d0			; (mask it)
*
* Now spin until it takes effect...
*
scram_Spin2:	nop				; Sync the bus...
		move.b	(a4),d1			; Get status...
		and.b	d2,d1			; (maske it)
		cmp.b	d0,d1			; They need to match...
		bne.s	scram_Spin2		; Keep waiting for it...
*
* Ok, now restore what was in memory...
*
		movem.l	d4/d5/d6/d7,(a3)	; Restore old memory values
scram_TooOld:	rte
SCRAMtestE:
*
*******************************************************************************
*
* End of SCRAM testing code...
*
	ENDC
*
* The following name the bonus module based on the machine type
*
BonusName:
	IFD	MACHINE_A3000
	dc.b	'A3000 '
	ENDC
*
	IFD	MACHINE_A4000
	dc.b	'A4000 '
	ENDC

	dc.b	'bonus',0
*
* The version string is the same in all of them...
*
BonusID:	VSTRING
		ds.w	0
*
EndTag:		END
@


1.10
log
@Fixed bonus strings
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.9 92/05/28 19:57:28 mks Exp Locker: mks $
d21 1
a21 1
* The A1000jr also only needs the SCRAM test
d23 1
a23 1
	IFD	MACHINE_A1000
d144 1
a144 1
* "SCRAM" mode on an A1000jr or may fry the hardware.  Must restore
d236 1
a236 1
	IFD	MACHINE_A1000
@


1.9
log
@Added code to skip the test if not a 68030 or better...
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.8 92/04/30 15:35:00 mks Exp Locker: mks $
d237 1
a237 1
	dc.b	'A1000 '
d240 1
a240 1
	dc.b	'Bonus',0
@


1.8
log
@Make sure that we never use PAGE mode (as it is not a good idea...)
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.7 92/04/06 14:05:37 mks Exp Locker: mks $
d21 1
a21 1
* The A1000jr also only needs the SCRAM test  (Not any more ... - Mike)
d23 3
a25 3
;	IFD	MACHINE_A1000
;SCRAM	EQU	1
;	ENDC
d62 5
@


1.7
log
@Removed the making of the A1000 bonus code
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.6 92/02/27 17:52:39 mks Exp Locker: mks $
d141 1
a141 2
* "WRAP TERMINATION" if running a 68040.  If 68040, make sure we keep
* the PAGE mode turned on too!  I'm trapped in a fortune cookie
d191 1
a191 1
		moveq.l	#RAMCF_WRAP!RAMCF_PAGE,d0		;YesSCRAM
d193 1
@


1.6
log
@Now a brand new bonus source file that handles all sorts of cases.
This includes turning off the caches via the EXEC CacheControl()
call and building conditionally based on the machine defined.

@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.5 92/02/25 20:47:47 mks Exp Locker: mks $
d21 1
a21 1
* The A1000jr also only needs the SCRAM test
d23 3
a25 3
	IFD	MACHINE_A1000
SCRAM	EQU	1
	ENDC
d228 1
a228 1
	dc.b	'A3000 Bonus',0
d232 1
a232 1
	dc.b	'A1000 Bonus',0
d234 2
@


1.5
log
@Complete rework of the magic code that will test for the SCRAM modes
and turn them on as needed...
@
text
@d2 1
a2 1
** $Id$
d4 2
a5 3
** A3000 bonus module.  Had we figured out this concept earlier,
** it would contain all the A3000 hardware specific code.  As is
** this just does the SCRAM test.
a6 8
** ************ N O T E ************
**
** NOTE: Assumes the data cache is OFF at RTF_COLDSTART time!
** I can't do a processor-independent data cache flush in the
** middle of the test!
**
** ************ N O T E ************
**
d14 20
a33 3
**	Included Files

	NOLIST
d41 1
a41 4
	LIST

	INCLUDE	"bonus_rev.i"

d43 1
a43 1

d56 1
a56 1

d83 7
d94 6
d131 3
a133 2
* SCRAM.  Too bad we run the OS out of fast memory, memory mapped to ROM.
* What a pain!
d151 1
a151 1
		move.l	#RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE,d2	; Get mask...
d172 1
a172 1
		moveq.l	#RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE,d0
a175 1
		and.b	d2,d0			; (mask it)
d179 2
a180 1
scram_Spin1:	move.b	(a4),d1			; Get status...
d182 1
a182 1
		cmp.b	d0,d1			; They need to match...
d187 1
a187 1
		; d0 = #RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE
a193 2
;		tst.b	d3			; Check 68040
;		bne.s	scram_040		; If 040, we skip...
d206 2
a207 1
scram_Spin2:	move.b	(a4),d1			; Get status...
d220 18
a237 2
BonusName:	dc.b	'A3000 bonus',0
BonusID		VSTRING            	;Space pig
d239 2
a240 3
EndTag:

		END
@


1.4
log
@Don't use any stack during test.
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.3 91/05/16 01:12:15 bryce Exp Locker: bryce $
d4 14
a17 18
**      A3000 bonus module.  Had we figured out this concept earlier,
**	it would contain all the A3000 hardware specific code.  As is
**	this just does the SCRAM test.
**
**	NOTE: Assumes the data cache is OFF at RTF_COLDSTART time!
**	I can't do a processor-independent data cache flush in the
**	middle of the test!
**
**      (C) Copyright 1991 Commodore-Amiga, Inc.
**          All Rights Reserved
**
**	$Log:	bonus.asm,v $
**	Revision 1.3  91/05/16  01:12:15  bryce
**	Don't use any stack during test
**
**	Revision 1.2  91/05/15  10:11:12  bryce
**	Test for the '040, and leave different bits set.  In particular,
**	set the WRAP bit (the 040 can't terminate a burst mid-stream).
d19 1
a19 3
**	Revision 1.1  91/05/14  13:26:55  bryce
**	Initial revision
**
d37 1
a37 1
ABSEXECBASE	EQU	4
d53 15
a67 32
;
;  This is the test for Static Column Dynamic RAM (aka "SCRAM").   Quite
;  magic and messy, and that's after improvements.  You basically turn on
;  the feature, and if all ram stops working, you've got a system without
;  SCRAM.  Too bad we run the OS out of fast memory, memory mapped to RAM.
;  What a pain!
;
;  For future compatiblity, Ramsey registers must be accessed in supervisor
;  mode.  This code must run DISABLED, and not cause any MMU table searches.
;  Chip ram is ok, chip registers or funny timing is not.  Test must be
;  complete before the next refresh cycle.  I'm trapped in a fortune cookie
;  factory and can't get up.
;
SAVEREGS	REG  d3/d4/d5/d6
OH40FLAG	EQUR d2
MEMORY		EQUR a0
TEMP		EQUR a1
RAMCONTROL	EQUR a2

RAMEND		EQU $08000000


		movem.l d2/d3/d4/d5/d6/a2/a5/a6,-(sp)
		moveq.l	#SCRAMtestE-SCRAMtest,d0
		moveq	#MEMF_CHIP,d1
		JSRLIB	AllocMem
		tst.l	d0
		beq.s	scram_Bail
		move.l	d0,a1
		move.l	d0,a5

		lea.l	SCRAMtest(pc),a0
d69 6
a74 4
scram_Copy:	move.w	(a0)+,(a1)+
		dbra	d0,scram_Copy
		JSRLIB	CacheClearU

d76 15
a90 7
		sne	OH40FLAG
		JSRLIB	Supervisor	;(a5)

		move.l	a5,a1
		moveq.l	#SCRAMtestE-SCRAMtest,d0
		JSRLIB	FreeMem
scram_Bail:	movem.l (sp)+,d2/d3/d4/d5/d6/a2/a5/a6
d95 42
a136 8
;
;   For the ROM version of the test, we have a stack.  Makes life easier.
;   The definition of the Ramsey register briefly changed, the AND code
;   below allowed testing of the (eventually) rejected part.
;
SCRAMtest:	lea.l	RAMEND-(512*1024)-(4*4),MEMORY
		lea.l	A3000_RamControl,RAMCONTROL
		cmp.b	#ANCIENT_RAMSEY,A3000_RamseyVersion-A3000_RamControl(RAMCONTROL)
d138 59
a196 44

		    ;
		    ;	Cause the MMU to update the used bit before
		    ;	we "turn off" the memory.
		    ;
		    movem.l (MEMORY),SAVEREGS   ;Save valuable data
		    move.l  RAMCONTROL,(MEMORY) ;Write junk
		    ;
		    ;	Set PAGE mode (which makes the ram unusable if
		    ;	SCRAMs are not installed).
		    ;	Ramsey registers don't take effect until the next
		    ;	refresh event.	We spin on the register until it
		    ;	reads back what was written.
		    ;
		    moveq   #RAMCF_WRAP|RAMCF_BURST|RAMCF_PAGE,d0
		    or.b    (RAMCONTROL),d0
		    lea.l   scram_SetBitsRet(pc),TEMP
		    bra.s   WriteRamsey 	;get end code in ATC also...
scram_SetBitsRet:

		    move.l  MEMORY,TEMP
		    move.l  TEMP,(TEMP)+
		    move.l  TEMP,(TEMP)+
		    move.l  TEMP,(TEMP)+
		    move.l  TEMP,(TEMP)+
		    nop 		; make sure writes reach memory

		    moveq   #~(RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE),d0 ;NoSCRAM
		    moveq   #4-1,d1
scram_TestLP:	    cmpa.l  -(TEMP),TEMP
		    dbne    d1,scram_TestLP
		    bne.s   scram_nogood

		    moveq   #~(RAMCF_WRAP!RAMCF_PAGE),d0    ;YesSCRAM
		    tst.b   OH40FLAG
		    bne.s   scram_FinalBitsRet
		    ;
		    ;	Set final settings.
		    ;
scram_nogood:  	    and.b   (RAMCONTROL),d0
		    lea.l   scram_FinalBitsRet(pc),TEMP
		    bra.s   WriteRamsey

scram_FinalBitsRet: movem.l SAVEREGS,(MEMORY)
a197 12


;
;
WriteRamsey:        nop		;very important!  Be sure bus is quiet
		    move.b  d0,(RAMCONTROL)
		    and.b   #RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE,d0
scram_Spin1:	    move.b  (RAMCONTROL),d1
		    and.b   #RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE,d1
		    cmp.b   d0,d1
		    bne.s   scram_Spin1
		    jmp	    (TEMP)
d199 3
a201 3


;--------------------------------------------------------------------------
@


1.3
log
@Don't use any stack during test
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.2 91/05/15 10:11:12 bryce Exp Locker: bryce $
d16 3
d157 1
a157 1
		    lea.l   scram_FinalBitsRet(pc),a5
@


1.2
log
@Test for the '040, and leave different bits set.  In particular,
set the WRAP bit (the 040 can't terminate a burst mid-stream).
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.1 91/05/14 13:26:55 bryce Exp Locker: bryce $
d16 4
d86 1
d98 1
a98 1
		move.l	#SCRAMtestE-SCRAMtest,d0
d130 3
a132 1
		    bsr.s   WriteRamsey
d141 1
a141 1
		    moveq   #~(RAMCF_WRAP!RAMCF_BURST!RAMCF_PAGE),d0    ;!AND
d147 1
d149 1
a149 3
		    bne.s   scram_good
		    moveq   #~(RAMCF_WRAP!RAMCF_PAGE),d0    ;!AND

d153 3
a155 2
scram_nogood:	    and.b   (RAMCONTROL),d0
		    bsr.s   WriteRamsey
d157 1
a157 1
scram_good:	    movem.l SAVEREGS,(MEMORY)
a161 1
;   For the ROM version of the test, we have a stack.  Makes life easier.
d170 1
a170 3
		    nop		;sync pipeline (paranoia)
		    rts

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** $Id: bonus.asm,v 1.2 91/05/14 13:21:48 bryce Exp $
d16 2
a17 3
*      Revision 1.2  91/05/14  13:21:48  bryce
*      Fix comment leader
*      
d65 2
a66 1
SAVEREGS	REG  d2/d3/d4/d5
d74 1
a74 1
		movem.l d2/d3/d4/d5/a2/a5/a6,-(sp)
d87 3
d91 1
d95 1
a95 1
scram_Bail:	movem.l (sp)+,d2/d3/d4/d5/a2/a5/a6
d123 1
a123 1
		    moveq   #RAMCF_BURST|RAMCF_PAGE,d0
d139 3
@
