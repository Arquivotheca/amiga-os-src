head     38.3;
branch   ;
access   ;
symbols  V40_1:38.3 V39_62:38.3 V39_61:38.3 V39_60:38.3 V39_58:38.3 V39_56:38.3 V39_55:38.3 V39_54:38.3 V39_53:38.3 V39_52:38.3 V39_51:38.3 V39_50:38.3 V39_49:38.3 V39_48:38.3 V39_46:38.3 V39_45:38.3 V39_44:38.3 V39_42:38.3 V39_41:38.3 V39_40:38.3 V39_39:38.3 V39_38:38.3 V39_37:38.3 V39_36:38.3 V39_35:38.3 V39_34:38.3 V39_33:38.3 V39_32:38.3 V39_30:38.3 V39_28:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.3
date     91.11.15.20.22.59;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.20.38;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.44;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.3
log
@Type casting changes
@
text
@/******************************************************************************
*
*	$Id: lock.c,v 38.2 91/08/02 10:20:38 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/layers.h>

#include "layersbase.h"

#define ObtainGfxSemaphoreList(x)	ObtainSemaphoreList(x)

/****** layers.library/LockLayers **********************************************
*
*    NAME
*	LockLayers -- lock all layers from graphics output.
*
*    SYNOPSIS
*	LockLayers( li )
*	            a0
*
*	void LockLayers( struct Layer_Info *);
*
*    FUNCTION
*	First calls LockLayerInfo()
*	Make all layers in this layer list locked.
*
*    INPUTS
*	li - pointer to Layer_Info structure
*
*    BUGS
*
*    SEE ALSO
*	LockLayer, LockLayerInfo, graphics/layers.h
*
*******************************************************************************/

void __stdargs __asm locklayers(register __a0 struct Layer_Info *li)
{
	LockLayerInfo(li);
	li->LockLayersCount++;
	ObtainGfxSemaphoreList((struct List *)&li->gs_Head);
	if (li->LockLayersCount == 1)	pushusercliprects(li);
}

/****** layers.library/UnlockLayers ********************************************
*
*    NAME
*	UnlockLayers -- Unlock all layers from graphics output.
*	                Restart graphics output to layers that have been waiting
*
*    SYNOPSIS
*	UnlockLayers( li )
*	              a0
*
*	void UnlockLayers( struct Layer_Info *);
*
*    FUNCTION
*	Make all layers in this layer list unlocked.
*	Then call UnlockLayerInfo
*
*    INPUTS
*	li - pointer to the Layer_Info structure
*
*    BUGS
*
*    SEE ALSO
*	LockLayers, UnlockLayer, graphics/layers.h
*
*******************************************************************************/

void __stdargs __asm unlocklayers(register __a0 struct Layer_Info *wi)
{
	wi->LockLayersCount--;
	if (wi->LockLayersCount == 0)	popusercliprects(wi);
	ReleaseSemaphoreList((struct List *)&wi->gs_Head);
	UnlockLayerInfo(wi);
}

/****** layers.library/LockLayer ***********************************************
*
*    NAME
*	LockLayer -- Lock layer to make changes to ClipRects.
*
*    SYNOPSIS
*	LockLayer( dummy, l )
*	           a0     a1
*
*	void LockLayer( LONG, struct Layer *);
*
*    FUNCTION
*	Make this layer unavailable for other tasks to use.
*	If another task is already using this layer then wait for
*	it to complete and then reserve the layer for your own use.
*	(this function does the same thing as graphics.library/LockLayerRom)
*
*	Note: if you wish to lock MORE THAN ONE layer at a time, you
*	    must call LockLayerInfo() before locking those layers and
*	    then call UnlockLayerInfo() when you have finished. This
*	    is to prevent system "deadlocks".
*
*	Further Note: while you hold the lock on a layer, Intuition will block
*	    on operations such as windowsizing, dragging, menus, and depth
*	    arranging windows in this layer's screen.  It is recommended that
*	    YOU do not make Intuition function calls while the layer is locked.
*
*    INPUTS
*	dummy - unused
*	l - pointer to a layer
*
*    BUGS
*
*    SEE ALSO
*	UnlockLayer, LockLayerInfo, UnlockLayerInfo,
*	graphics.library/LockLayerRom, graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

/****** layers.library/UnlockLayer *********************************************
*
*    NAME
*	UnlockLayer -- Unlock layer and allow graphics routines to use it.
*
*    SYNOPSIS
*	UnlockLayer( l )
*	             a0
*
*	void UnlockLayer( struct Layer *);
*
*    FUNCTION
*	When finished changing the ClipRects or whatever you were
*	doing with this layer you must call UnlockLayer() to allow
*	other tasks to proceed with graphic output to the layer.
*
*    INPUTS
*	l - pointer to a layer
*
*    BUGS
*
*    SEE ALSO
*	graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

/****** layers.library/LockLayerInfo *******************************************
*
*    NAME
*	LockLayerInfo -- Lock the LayerInfo structure.
*
*    SYNOPSIS
*	LockLayerInfo( li )
*	               a0
*
*	void LockLayerInfo( struct Layer_Info *);
*
*    FUNCTION
*	Before doing an operation that requires the LayerInfo
*	structure, make sure that no other task is also using the
*	LayerInfo structure.  LockLayerInfo() returns when the
*	LayerInfo belongs to this task.  There should be
*	an UnlockLayerInfo for every LockLayerInfo.
*
*	Note: All layer routines presently LockLayerInfo() when they
*	start up and UnlockLayerInfo() as they exit.  Programmers
*	will need to use these Lock/Unlock routines if they wish
*	to do something with the LayerStructure that is not
*	supported by the layer library.
*
*    INPUTS
*	li - pointer to Layer_Info structure
*
*    BUGS
*
*    SEE ALSO
*	UnlockLayerInfo, graphics/layers.h
*
*******************************************************************************/

/****** layers.library/UnlockLayerInfo *****************************************
*
*    NAME
*	UnlockLayerInfo -- Unlock the LayerInfo structure.
*
*    SYNOPSIS
*	UnlockLayerInfo( li )
*	                 a0
*
*	void UnlockLayerInfo( struct Layer_Info *);
*
*    FUNCTION
*	After the operation is complete that required a LockLayerInfo,
*	unlock the LayerInfo structure so that  other tasks may
*	affect the layers.
*
*    INPUTS
*	li - pointer to the Layer_Info structure
*
*     BUGS
*
*     SEE ALSO
*	LockLayerInfo, graphics/layers.h
*
*******************************************************************************/
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: lock.c,v 38.1 91/07/25 09:55:44 bart Exp $
d53 1
a53 1
	ObtainGfxSemaphoreList(&li->gs_Head);
d87 1
a87 1
	ReleaseSemaphoreList(&wi->gs_Head);
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: lock.c,v 1.5 90/10/11 15:16:31 rsbx Exp $
d7 2
d20 2
a23 6
/*#define DEBUG*/
/*#define DEBUGDEBUG*/
#define LISTLOCK
/*#define TEST*/
struct Task *FindTask();

d29 1
a29 1
*    SYNOPSIS   
d35 1
a35 1
*    FUNCTION   
d39 3
a41 3
*    INPUTS   
*	li - pointer to Layer_Info structure  
* 
d44 1
a44 1
*    SEE ALSO   
d49 1
a49 2
locklayers(li)
struct Layer_Info *li;
d51 1
a51 14
#ifdef DEBUG
    printf("locklayers(%lx)",li);
	printf("Lock at %lx\n",&li->Lock);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
    locklayerinfo(li);
#ifdef DEBUG
	printf("after locklayer info\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
a54 3
#ifdef DEBUG
    printf("endll");
#endif
d58 2
a59 2
*    
*    NAME    
d62 2
a63 2
*   
*    SYNOPSIS    
d69 1
a69 1
*    FUNCTION    
d72 4
a75 4
*   
*    INPUTS    
*	li - pointer to the Layer_Info structure   
*  
d83 1
a83 2
unlocklayers(wi)
struct Layer_Info *wi;
a84 4
    struct Layer *l;
#ifdef DEBUG
    printf("unlocklayers");
#endif
d88 1
a88 7
    unlocklayerinfo(wi);
#ifdef DEBUG
    printf("endunll");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
d95 5
a99 5
* 
*    SYNOPSIS  
*	LockLayer( dummy, l ) 
*	           a0     a1  
*  
d102 1
a102 1
*    FUNCTION  
d107 2
a108 2
* 
*	Note: if you wish to lock MORE THAN ONE layer at a time, you 
d117 1
a117 1
*	    
d120 2
a121 2
*	l - pointer to a layer 
* 
d124 1
a124 1
*    SEE ALSO  
d131 1
a131 1
*   
d136 1
a136 1
*	UnlockLayer( l )  
d141 1
a141 1
*    FUNCTION   
d145 1
a145 1
*  
d151 1
a151 1
*    SEE ALSO   
d153 60
@
