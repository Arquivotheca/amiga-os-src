head     39.6;
branch   ;
access   ;
symbols  V40_1:39.6 V39_62:39.6 V39_61:39.6 V39_60:39.6 V39_58:39.5 V39_56:39.4 V39_55:39.4 V39_54:39.4 V39_53:39.4 V39_52:39.4 V39_51:39.4 V39_50:39.4 V39_49:39.4 V39_48:39.4 V39_46:39.4 V39_45:39.4 V39_44:39.4 V39_42:39.4 V39_41:39.4 V39_40:39.4 V39_39:39.4 V39_38:39.4 V39_37:39.4 V39_36:39.4 V39_35:39.4 V39_34:39.4 V39_33:39.4 V39_32:39.4 V39_30:39.2 V39_28:39.2 V39_27:39.1 V39_26:39.1;
locks    ; strict;
comment  @* @;


39.6
date     92.06.05.11.46.00;  author mks;  state Exp;
branches ;
next     39.5;

39.5
date     92.05.27.14.54.18;  author mks;  state Exp;
branches ;
next     39.4;

39.4
date     91.11.19.12.50.18;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     91.11.18.18.34.42;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.14.07.23.52;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.09.00.38.40;  author mks;  state Exp;
branches ;
next     ;


desc
@Downcoded versions of various memory routines in layers
Much faster now
@


39.6
log
@Completely removed the LayerInfoExtra Buffered Cliprects list...
It was not used anymore and thus will save some code and help
the speed a bit.
@
text
@*******************************************************************************
*
*	$Id: layersallocmem.asm,v 39.5 92/05/27 14:54:18 mks Exp Locker: mks $
*
*******************************************************************************
*
	include 'exec/types.i'
	include 'exec/nodes.i'
	include 'exec/lists.i'
	include	'exec/memory.i'
	include 'graphics/clip.i'
	include	'graphics/layers.i'
	include	'layersbase.i'
*
		xref	abort
		xref	_remember_to_free
*
*******************************************************************************
*
* APTR LayersAllocMem(ULONG numbytes,ULONG flags,struct LayerInfo *li)
* d0                  D0             D1          D2
*
_LayersAllocMem:	xdef	_LayersAllocMem
LayersAllocMem:	move.l	d0,-(sp)	; Save this...
		move.l	a6,-(sp)	; Save a6...
		move.l	lb_ExecBase(a6),a6	; Get execbase
		CALLSYS	AllocMem	; Allocate the memory...
		move.l	(sp)+,a6	; Get a6 back...
		tst.l	d2		; Do we have a LayerInfo?
		beq.s	lam_done	; If not, we are done...
		move.l	d2,a0		; Get a0 set up...
		tst.l	d0		; Is is ok?
		beq	abort		; Abort due to error? (never returns)
		move.l	d0,-(sp)	; save pointer onto the stack...
		move.l	d0,a1		; Move to address reg.
		move.l	4(sp),d0	; Get size of alloc
		bsr	_remember_to_free
		tst.l	d0		; Check result...
		bne.s	lam_good	; If not bad, exit
*
* Now release the extra memory and abort...
*
		move.l	(sp)+,a1	; Get allocation back
		move.l	(sp)+,d0	; Get size
		move.l	a6,-(sp)	; Save a6...
		move.l	lb_ExecBase(a6),a6	; Get execbase
		CALLSYS	FreeMem		; Free the memory
		move.l	(sp)+,a6	; Restore layersbase
		move.l	d2,a0		; Get set up...
		bra	abort		; Abort this one! (Never returns)
*
* All cool or allocation failed with no LayerInfo
*
lam_good:	move.l	(sp)+,d0	; Get allocation back
lam_done:	addq.l	#4,sp		; Drop the stack...
		rts			; And we are done...
*
*******************************************************************************
*
* AllocCR() - Allocate a ClipRect for the layerinfo given
*
* a0 = LayerInfo
*
_AllocCR:	xdef	_AllocCR
AllocCR:	move.l	d2,-(sp)			; Save d2...
		move.l	a0,d2				; Get layer info...
		move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1	; Memory type
		move.l	#cr_SIZEOF,d0			; Memory size
		bsr	LayersAllocMem			; Allocate...
		move.l	(sp)+,d2			; Restore
		rts					; Exit...

*
*******************************************************************************
*
* struct ClipRect *newAllocCR(struct Layer *l)
* d0                          a0
*
_newAllocCR:	xdef	_newAllocCR
newAllocCR:	move.l	lr_LayerInfo(a0),a0	; Get layer info...
		lea	li_FreeClipRects(a0),a1	; Point at first pointer...
		move.l	cr_Next(a1),a0		; Get first one...
		move.l	a0,d0			; Check it
		beq	AllocCR			; If none, we skip...
		move.l	cr_Next(a0),cr_Next(a1)	; Unlink it...
		move.l	a1,cr_Prev(a0)		; And clean up prev...
		moveq.l	#0,d1			; Get a null...
		move.l	d1,cr_lobs(a0)		; Clear LOBS
		move.l	d1,cr_BitMap(a0)	; Clear bitmap
		move.l	d1,cr_Flags(a0)		; Clear the flags
		rts
*
*******************************************************************************
*
* newDeleteCR(struct Layer *l,struct ClipRect *cr)
*             a0              a1
*
_newDeleteCR:	xdef	_newDeleteCR
newDeleteCR:	move.l	a0,d1			; Temp storage...
		lea	lr_ClipRect(a0),a0	; Point at first pointer
newDel_loop:	cmp.l	cr_Next(a0),a1		; Check for match...
		beq.s	newDel_found		; Found it
		move.l	cr_Next(a0),a0		; Get next one...
		bra.s	newDel_loop		; Loop until found
*
newDel_found:	move.l	cr_Next(a1),cr_Next(a0)	; Un-link
		move.l	d1,a0			; Get back layer...
		move.l	lr_LayerInfo(a0),a0	; Get layer info...
		lea	li_FreeClipRects(a0),a0	; Point at list...
		move.l	cr_Next(a0),d0		; Get old NEXT pointer
		beq.s	newDel_noNext		; If none, skip...
		exg.l	d0,a0			; Get into address reg...
		move.l	a1,cr_Prev(a0)		; Store prev pointer
		exg.l	d0,a0			; And restore a0/d0
newDel_noNext:	move.l	d0,cr_Next(a1)		; Put in NEXT pointer
		move.l	a1,cr_Next(a0)		; Store on list...
		move.l	a0,cr_Prev(a1)		; Back-Link to list
		rts				; And we are done!
*
*******************************************************************************
*
* This is the kludge design for the Store_CR and UnStore_CR functions
*
 STRUCTURE	KludgeClipRect,0
	LONG	kcr_trash1
	LONG	kcr_trash2
	LONG	kcr_trash3
	LONG	kcr_trash4
	STRUCT	kcr_Bounds1,8
	STRUCT	kcr_Bounds2,8
	LONG	kcr_Next
	LONG    kcr_trash5
	LABEL	kcr_SIZEOF
*
*******************************************************************************
*
* Store_CR(struct Layer *l,struct ClipRect *cr)
*          a0              a1
*
_Store_CR:	xdef	_Store_CR
		move.l	lr__cliprects(a0),kcr_Next(a1)	; Link to layer
		move.l	a1,lr__cliprects(a0)		; this cliprect
		lea	kcr_Bounds1(a1),a0		; Now copy the
		lea	kcr_Bounds2(a1),a1		; bounds
		move.l	(a0)+,(a1)+			; MinX/Y
		move.l	(a0)+,(a1)+			; MaxX/Y
		rts
*
*******************************************************************************
*
* struct ClipRect *UnStore_CR(struct Layer *l)
* d0                          a0
*
_UnStore_CR:	xdef	_UnStore_CR
		move.l	lr__cliprects(a0),d0	; Get cliprect
		beq.s	UnStore_Done		; If NULL, no go...
		move.l	d0,a1			; Get into address
		move.l	kcr_Next(a1),lr__cliprects(a0)	; Remove from layer
		move.l	cr_Prev(a1),a0		; Get back pointer
		move.l	cr_Next(a1),d1		; Get next pointer
		move.l	d1,cr_Next(a0)		; Unlink...
		beq.s	UnStore_NoNext		; Check if we have a next
		exg.l	d1,a0			; Swap the two
		move.l	d1,cr_Prev(a0)		; Unlink prev...
UnStore_NoNext:	lea	kcr_Bounds1(a1),a0	; Now copy the
		lea	kcr_Bounds2(a1),a1	; bounds
		move.l	(a1)+,(a0)+		; MinX/Y
		move.l	(a1)+,(a0)+		; MaxX/Y
UnStore_Done:	rts
*
*******************************************************************************
*
		end
@


39.5
log
@New AllocCR that does not allocate 8 cliprects at once!
@
text
@d3 1
a3 1
*	$Id: layersallocmem.asm,v 39.4 91/11/19 12:50:18 mks Exp Locker: mks $
d65 3
a67 14
AllocCR:	movem.l	d2/a2,-(sp)	; Save d2...
		move.l	a0,d2		; Check layer info...
		beq.s	AllocCR_noli	; If no li, we skip li stuff
		move.l	li_LayerInfo_extra(a0),a1	; Get LayerInfo_extra
		lea	lie_buffered_cliprects(a1),a2	; Point at list...
		move.l	(a2),d0		; get a cliprect
		beq.s	AllocCR_noli	; If we did not get one...
		move.l	d0,a0		; Get pointer...
		move.l	(a0),(a2)	; Unlink it...
		bra.s	AllocCR_yes	; If so, we are done...
*
* Now just allocate the memory since none in the layer info...
*
AllocCR_noli:	move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1	; Memory type
d70 1
a70 1
AllocCR_yes:	movem.l	(sp)+,d2/a2			; Restore
@


39.4
log
@Changed the way cliprect buffering works
@
text
@d3 1
a3 1
*	$Id: layersallocmem.asm,v 39.3 91/11/18 18:34:42 mks Exp Locker: mks $
d71 1
a71 1
		beq.s	AllocCR_No	; If we did not get one...
d76 1
a76 18
* Oh no, you know what needs to be done now:  Allocate it...
*
AllocCR_No:	move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1	; Allocate type
		move.l	#cr_SIZEOF*8,d0			; Get size...
		bsr.s	LayersAllocMem			; Get the memory
*
* We know this worked...
*
		move.l	d0,a1		; Get pointer at node
		move.l	#6,d1		; Do all but the last one...
AllocCR_loop:	move.l	(a2),(a1)	; Link in...
		move.l	a1,(a2)		; ...the cliprect
		add.l	#cr_SIZEOF,a1	; Next one...
		dbra.s	d1,AllocCR_loop	; Do them all...
		move.l	a1,d0		; Get answer into d0
		bra.s	AllocCR_yes	; We worked...
*
* Now just allocate the memory since no layer info...
@


39.3
log
@Simplified the free cliprect list
@
text
@d3 1
a3 1
*	$Id: layersallocmem.asm,v 39.2 91/11/14 07:23:52 mks Exp Locker: mks $
d70 5
a74 4
		move.l	a2,a0		; Set up for REMHEAD
		REMHEAD			; The macro...  (a0)
		tst.l	d0		; Did we get one?
		bne.s	AllocCR_yes	; If so, we are done...
d78 1
a78 1
		move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1	; Allocate type
d86 2
a87 2
AllocCR_loop:	move.l	a2,a0		; Get list...
		ADDTAIL			; Put a1 onto a0 list...
d114 1
d138 6
a143 1
		move.l	cr_Next(a0),cr_Next(a1)	; Put in NEXT pointer
d145 53
a197 1
		rts				; Adn we are done!
@


39.2
log
@Calls the assembly ABORT now
@
text
@d3 1
a3 1
*	$Id: layersallocmem.asm,v 39.1 91/11/09 00:38:40 mks Exp Locker: mks $
d108 5
a112 5
		lea	li_FreeClipRects(a0),a0	; Point at list...
		REMHEAD				; Get d0...
		move.l	d0,a0			; Put result into a0...
		tst.l	d0			; Did we?
		beq	AllocCR			; If not, we allocate one
d127 1
a127 1
newDel_loop:	cmp.l	(a0),a1			; Check for match...
d129 1
a129 1
		move.l	(a0),a0			; Get next one...
d132 1
a132 1
newDel_found:	move.l	(a1),(a0)		; Un-link
d136 2
a137 1
		ADDHEAD				; Put it on the list...
@


39.1
log
@First release
@
text
@d3 1
a3 1
*	$Id$
d15 1
a15 1
		xref	_abort
d33 1
a33 1
		beq	_abort		; Abort due to error? (never returns)
d50 1
a50 1
		bra	_abort		; Abort this one! (Never returns)
@
