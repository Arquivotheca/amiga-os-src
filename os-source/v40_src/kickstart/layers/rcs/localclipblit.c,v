head     38.7;
branch   ;
access   ;
symbols  V40_1:38.7 V39_62:38.7 V39_61:38.7 V39_60:38.7 V39_58:38.7 V39_56:38.7 V39_55:38.6 V39_54:38.6 V39_53:38.6 V39_52:38.6 V39_51:38.6 V39_50:38.6 V39_49:38.6 V39_48:38.6 V39_46:38.6 V39_45:38.6 V39_44:38.6 V39_42:38.6 V39_41:38.6 V39_40:38.6 V39_39:38.6 V39_38:38.6 V39_37:38.6 V39_36:38.6 V39_35:38.6 V39_34:38.6 V39_33:38.6 V39_32:38.6 V39_30:38.6 V39_28:38.5 V39_27:38.5 V39_26:38.5 V39_25:38.5 V39_24:38.5 V39_23:38.5 V39_22:38.5 V39_21:38.5 V39_20:38.5 V39_18:38.5 V39_16:38.5 V39_15:38.5 V39_14:38.5 V39_12:38.5 V39_10:38.5 V38_7:38.3 V38_6:38.3 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.7
date     92.04.14.16.38.49;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.11.15.20.22.28;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.10.04.15.49.09;  author bart;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.03.15.59.32;  author bart;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.05.20.18.09;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.21.08;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.41;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.7
log
@Added the setting of two more bits for damage work
@
text
@/******************************************************************************
*
*	$Id: localclipblit.c,v 38.6 91/11/15 20:22:28 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>

#include "macros.h"

#include "layersbase.h"

void LayerBlit(struct Layer *src,SHORT srcx,SHORT srcy, struct Layer *dst,SHORT dstx,SHORT dsty,SHORT xsize,SHORT ysize,USHORT mode)
{
struct ClipRect *CR;
struct Rectangle srcrect;
struct Rectangle src_workrect;
struct BitMap *BMap;

	/* basic source rectangle */
	/* offset by position of layer and scroll value */

	srcrect.MinX = srcrect.MaxX = srcx + src->bounds.MinX - src->Scroll_X;
	srcrect.MinY = srcrect.MaxY = srcy + src->bounds.MinY - src->Scroll_Y;
	srcrect.MaxX += xsize - 1;
	srcrect.MaxY += ysize - 1;

	/* now, loop on all ClipRects */
	CR = src->ClipRect;
	while (CR)
	{
	    int dx,dy;
	    int w,h;
	    if (rectXrect(&srcrect, &CR->bounds))
	    {
			/* break down source and get its bitmap */
			/* calculate intersection of 2 rectangles */
			intersect(&srcrect,&CR->bounds,&src_workrect);
			w = src_workrect.MaxX - src_workrect.MinX + 1;
			h = src_workrect.MaxY - src_workrect.MinY + 1;
			dx = src_workrect.MinX - srcrect.MinX;
			dy = src_workrect.MinY - srcrect.MinY;
	    	/* if this layer is obscured, fetch the alternate BitMap */
	    	if(CR->lobs)
			{
			    BMap = CR->BitMap; /* set zero if this is SIMPLE_REFRESH! */
			    /* adjust regions */
			    /* But first do the damage thing */
			    if (BMap == 0)
			    {
				struct Rectangle damnrect;

				damnrect.MaxX =  damnrect.MinX = dstx + dx;
				damnrect.MaxY =  damnrect.MinY = dsty + dy;
				damnrect.MaxX += (w - 1);
				damnrect.MaxY += (h - 1);

				if(CR->Flags & CR_NEEDS_NO_LAYERBLIT_DAMAGE)
				{
				    CR->Flags &= ~CR_NEEDS_NO_LAYERBLIT_DAMAGE;
				}
				else
				{
					OrRectRegion(dst->DamageList,&damnrect);
					dst->Flags |= LAYERREFRESH|LAYERIREFRESH|LAYERIREFRESH2;
				}

			    }
			    src_workrect.MinX -= (CR->bounds.MinX & ~0xF);
			    src_workrect.MinY -= CR->bounds.MinY;
			}
	    	else BMap = src->rp->BitMap;
	    	/* if it's a valid BitMap, go bliss it */
	    	if (BMap)
			{
				BltBitMapRastPort(  BMap, src_workrect.MinX, src_workrect.MinY,
								    dst->rp, dstx + dx, dsty + dy,
								    w, h, mode);
			}
	    }
	    CR = CR->Next;
	}
}
@


38.6
log
@Removed reference to CR_NEEDS_NO_CONCEALED_RASTERS
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 38.5 91/10/04 15:49:09 bart Exp Locker: mks $
d74 1
a74 1
					dst->Flags |= LAYERREFRESH;
@


38.5
log
@minor byte savings
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 38.4 91/10/03 15:59:32 bart Exp Locker: bart $
a72 2
				    if(!(CR->Flags & CR_NEEDS_NO_CONCEALED_RASTERS))
				    {
a74 1
				    }
@


38.4
log
@save bytes initializing srcrect
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 38.3 91/08/05 20:18:09 mks Exp Locker: bart $
a23 1
struct Layer *layer;
a28 2
	layer = src;

d32 2
a33 2
	srcrect.MinX = srcrect.MaxX = srcx + layer->bounds.MinX - layer->Scroll_X;
	srcrect.MinY = srcrect.MaxY = srcy + layer->bounds.MinY - layer->Scroll_Y;
d38 1
a38 1
	CR = layer->ClipRect;
d45 7
a51 7
		/* break down source and get its bitmap */
		/* calculate intersection of 2 rectangles */
		intersect(&srcrect,&CR->bounds,&src_workrect);
		w = src_workrect.MaxX - src_workrect.MinX + 1;
		h = src_workrect.MaxY - src_workrect.MinY + 1;
		dx = src_workrect.MinX - srcrect.MinX;
		dy = src_workrect.MinY - srcrect.MinY;
a53 18
		{
		    BMap = CR->BitMap; /* set zero if this is SIMPLE_REFRESH! */
		    /* adjust regions */
		    /* But first do the damage thing */
		    if (BMap == 0)
		    {
			struct Rectangle damnrect;

			damnrect.MaxX =  damnrect.MinX = dstx + dx;
			damnrect.MaxY =  damnrect.MinY = dsty + dy;
			damnrect.MaxX += (w - 1);
			damnrect.MaxY += (h - 1);

			if(CR->Flags & CR_NEEDS_NO_LAYERBLIT_DAMAGE)
			{
			    CR->Flags &= ~CR_NEEDS_NO_LAYERBLIT_DAMAGE;
			}
			else
d55 4
a58 1
			    if(!(CR->Flags & CR_NEEDS_NO_CONCEALED_RASTERS))
d60 20
a79 2
				OrRectRegion(dst->DamageList,&damnrect);
				dst->Flags |= LAYERREFRESH;
d81 2
a83 5

		    }
		    src_workrect.MinX -= (CR->bounds.MinX & ~0xF);
		    src_workrect.MinY -= CR->bounds.MinY;
		}
d87 5
a91 5
		{
		BltBitMapRastPort(  BMap, src_workrect.MinX, src_workrect.MinY,
				    dst->rp, dstx + dx, dsty + dy,
				    w, h, mode);
		}
@


38.3
log
@Moved the intersect() function into assembly and into layerop.asm
.,
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 38.2 91/08/02 10:21:08 mks Exp Locker: mks $
a32 4
	srcrect.MinX = srcx;
	srcrect.MinY = srcy;
	srcrect.MaxX = srcx + xsize - 1;
	srcrect.MaxY = srcy + ysize - 1;
d34 5
a38 4
	srcrect.MinX += layer->bounds.MinX - layer->Scroll_X;
	srcrect.MaxX += layer->bounds.MinX - layer->Scroll_X;
	srcrect.MinY += layer->bounds.MinY - layer->Scroll_Y;
	srcrect.MaxY += layer->bounds.MinY - layer->Scroll_Y;
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 38.1 91/07/25 09:55:41 bart Exp $
a20 8

void intersect(struct Rectangle *a,struct Rectangle *b,struct Rectangle *c)
{
	c->MinX = SHORTMAX(a->MinX,b->MinX);
	c->MinY = SHORTMAX(a->MinY,b->MinY);
	c->MaxX = SHORTMIN(a->MaxX,b->MaxX);
	c->MaxY = SHORTMIN(a->MaxY,b->MaxY);
}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: localclipblit.c,v 1.6 91/01/28 16:46:25 bart Exp $
d7 2
a12 1
/*#include <clib/macros.h>*/
d17 1
d19 1
d22 1
a22 6
/*#define DEBUG
#define DEBUGDEBUG*/

intersect(a,b,c)
struct Rectangle *a,*b;
struct Rectangle *c;
d30 1
a30 5
LayerBlit(src, srcx, srcy, dst, dstx, dsty, xsize, ysize, mode)
struct Layer *src,*dst;
SHORT srcx, srcy;
SHORT dstx, dsty, xsize, ysize;
USHORT mode;
d32 6
a37 14
	struct Layer *layer;
	struct ClipRect *CR;
	struct Rectangle srcrect;
	struct Rectangle src_workrect;
	struct BitMap *BMap;
	Point t;

#ifdef DEBUG
	printf("localclipblit(%lx,%ld,%ld,%lx,%ld,%ld,%ld,%ld,%lx)\n",
		src, srcx, srcy, dst, dstx, dsty, xsize, ysize, mode);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
d103 1
a103 1
				    dst->rp, dstx + dx, dsty + dy, 
a108 1
	/*WaitBlit();*/
@
