head     39.1;
branch   ;
access   ;
symbols  V40_1:39.1 V39_62:39.1 V39_61:39.1 V39_60:39.1 V39_58:38.6 V39_56:38.5 V39_55:38.5 V39_54:38.5 V39_53:38.5 V39_52:38.5 V39_51:38.5 V39_50:38.5 V39_49:38.5 V39_48:38.5 V39_46:38.5 V39_45:38.5 V39_44:38.5 V39_42:38.5 V39_41:38.4 V39_40:38.4 V39_39:38.4 V39_38:38.4 V39_37:38.4 V39_36:38.4 V39_35:38.4 V39_34:38.4 V39_33:38.4 V39_32:38.4 V39_30:38.3 V39_28:38.3 V39_27:38.3 V39_26:38.3 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


39.1
date     92.06.05.11.47.19;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     92.05.27.14.42.02;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     92.02.12.13.53.38;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.19.12.47.39;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.09.00.47.43;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.19.15;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.54.50;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@Completely removed the LayerInfoExtra Buffered Cliprects list...
It was not used anymore and thus will save some code and help
the speed a bit.
@
text
@/******************************************************************************
*
*	$Id: cleanup.c,v 38.6 92/05/27 14:42:02 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <graphics/layers.h>

#include "layersbase.h"

struct mem_node
{
    UWORD   *where;
    LONG    how_big;
};

#define MAX_MN_PER_TABLE    48

struct mem_table
{
    struct Node n;
    struct mem_node *current;
    LONG    slots_available;
    struct mem_node mem_node[MAX_MN_PER_TABLE];
};

void __stdargs __asm common_cleanup(register __a0 struct Layer_Info *li,register __d0 long abortion)
{
struct mem_table *mt;
struct mem_node *p;
struct LayerInfo_extra *lie=li->LayerInfo_extra;
LONG max_nodes;

	while (mt = (struct mem_table *)RemHead((struct List *)&(lie->mem)))
	{
		if (abortion)
		{
			max_nodes = MAX_MN_PER_TABLE - mt->slots_available;
			p = mt->mem_node;
			while (max_nodes--)
			{
				if (LMN_REGION==p->how_big) DisposeRegion((struct Region *)(p->where));
				else if (LMN_BITMAP==p->how_big) FreeBitMap((struct BitMap *)(p->where));
				else FreeMem(p->where,p->how_big);
				p++;
			};
		}
		FreeMem(mt,sizeof(struct mem_table));
	}
}

struct mem_table *new_mem_table(struct Layer_Info *li)
{
    struct mem_table *mt;
    mt = (struct mem_table *)AllocMem(sizeof(struct mem_table),0);
    if (mt)
    {
        mt->current = mt->mem_node;
        mt->slots_available = MAX_MN_PER_TABLE;
        AddHead((struct List *)&(((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem),mt);
    }
    return (mt);
}

BOOL __stdargs __asm remember_to_free(register __a0 struct Layer_Info *li,register __a1 VOID *where,register __d0 ULONG how_big)
{
struct mem_node *mn;
struct mem_table *mt;

    if (li == 0)    return (TRUE);

    mt = (struct mem_table *)(((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.mlh_Head);
    if ( mt == (struct mem_table *)&(((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.mlh_Tail)) /* is there a table ?*/
        if ( !(mt = new_mem_table(li)) )    return (FALSE);

    if (--mt->slots_available < 0)  /* any room left in current table? */
    {
        mt->slots_available = 0;
        if ( !(mt = new_mem_table(li)) )    return(FALSE); /* get another */
        mt->slots_available--;
    }

    mn = mt->current++; /* where to stash this guy */
    mn->where = where;
    mn->how_big = how_big;
    return(TRUE);
}

void cleanup(struct Layer_Info *li)
{
	common_cleanup(li,FALSE);
	UnlockLayerInfo(li);
}
@


38.6
log
@Changed table size to make up for the cliprect allocation...
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 38.5 92/02/12 13:53:38 mks Exp Locker: mks $
a51 6
	}
	/* now free buffered cliprect list */
	if (!abortion)
	{
		Freecrlist(lie->buffered_cliprects);
		lie->buffered_cliprects=NULL;
@


38.5
log
@Now handles the bitmap allocation unit in the cleanup code
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 38.4 91/11/19 12:47:39 mks Exp Locker: mks $
d20 1
a20 1
#define MAX_MN_PER_TABLE    32
@


38.4
log
@Smaller and smarter cleanup
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 38.3 91/11/09 00:47:43 mks Exp Locker: mks $
d45 2
a46 4
				if (p->how_big < 0)
				{
					DisposeRegion((struct Region *)(p->where));
				}
@


38.3
log
@Changed the function prototype such that it can be called from
assembly.
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 38.2 91/08/02 10:19:15 mks Exp Locker: mks $
a34 1
struct List *memlist = &lie->mem;
a35 1
struct ClipRect *cr;
d37 1
a37 1
	while (mt = (struct mem_table *)RemHead(memlist))
d58 2
a59 2
		memlist = &lie->buffered_cliprects;
		while (cr = (struct ClipRect *)RemHead(memlist)) Freecr(cr);
d71 1
a71 1
        AddHead(&((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem,mt);
d83 2
a84 2
    mt = (struct mem_table *)(((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.lh_Head);
    if ( mt == (struct mem_table *)&(((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.lh_Tail)) /* is there a table ?*/
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 38.1 91/07/25 09:54:50 bart Exp $
d78 1
a78 1
BOOL remember_to_free(struct Layer_Info *li,VOID *where,ULONG how_big)
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: cleanup.c,v 1.4 90/07/31 11:40:05 rsbx Exp $
d7 2
d11 1
a13 4
/*#define DEBUG*/

#define CODE_SQUEEZE

d21 1
a21 1
 
d30 36
a65 2
struct mem_table *new_mem_table(li)
struct Layer_Info *li;
d74 1
a74 1
    }   
d78 1
a78 4
remember_to_free(li,where,how_big)
struct Layer_Info *li;
int how_big;
WORD *where;
d80 2
a81 2
    struct mem_node *mn;
    struct mem_table *mt;
d85 2
a86 2
    mt = ((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.lh_Head;
    if ( mt == &((struct LayerInfo_extra *)(li->LayerInfo_extra))->mem.lh_Tail) /* is there a table ?*/
d95 1
a95 1
 
d102 1
a102 2
cleanup(li)
struct Layer_Info *li;
d105 1
a105 63
	unlocklayerinfo(li);
}

common_cleanup(li,abortion)
struct Layer_Info *li;
int abortion;
{
	struct mem_table *mt;
	struct mem_node *p;
	struct LayerInfo_extra *lie=li->LayerInfo_extra;
	struct List *memlist = &lie->mem;
	LONG	max_nodes;
	struct ClipRect *cr;

#ifdef DEBUG
	printf("CLEANUP(%lx)\n",lie);
#endif
	while (mt = (struct mem_table *)RemHead(memlist))
	{
		if (abortion)
		{
#ifdef DEBUG
			printf("abortion slots=%ld\n",mt->slots_available);
			Debug();
#endif
			max_nodes = MAX_MN_PER_TABLE - mt->slots_available;
			p = mt->mem_node;
			while (max_nodes--)
			{
#ifdef DEBUG
	printf("( %lx @@ %lx size:%lx )",p,p->where,p->how_big);
#endif
				if (p->how_big < 0)
				{
#ifdef CODE_SQUEEZE
					DisposeRegion(p->where);
#else
					switch(p->how_big)
					{
						case LMN_REGION:
									DisposeRegion(p->where);
									break;
					}
#endif
				}
				else FreeMem(p->where,p->how_big);
				p++;
			};
		}
		FreeMem(mt,sizeof(struct mem_table));
	}
	/* now free buffered cliprect list */
	if (!abortion)
	{
		memlist = &lie->buffered_cliprects;
		while (cr = (struct ClipRect *)RemHead(memlist))
		{
			Freecr(cr);
		}
	}
#ifdef DEBUG
	printf("cleanupEXIT\n");
#endif
a106 3



@
