head     38.2;
branch   ;
access   ;
symbols  V40_1:38.2 V39_62:38.2 V39_61:38.2 V39_60:38.2 V39_58:38.2 V39_56:38.2 V39_55:38.2 V39_54:38.2 V39_53:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_49:38.2 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.2 V39_32:38.2 V39_30:38.2 V39_28:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.2
date     91.08.02.10.20.13;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.12;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@Native build version checkin...
@
text
@/******************************************************************************
*
*	$Id: layerop.c,v 38.1 91/07/25 09:55:12 bart Exp $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>

#include "macros.h"
#include "layersbase.h"

struct recurs_info
{
	struct Layer *lp;
	void *stuff;
	long myflag;
};


void Rlayerop(struct recurs_info *ri,struct Rectangle *r,struct ClipRect *op)
{
struct Rectangle temp;

try_again:
    if (op == NULL)
    {
	if (ri->myflag) myaddpiece(ri->lp,*r,ri->lp->rp,ri->stuff,op);
	else addpiece(ri->lp,*r,ri->lp->rp,ri->stuff,op);
    }
    else
    {
	if ( (op->lobs == 0)  /* skip if screen ClipRect */
	   || (rectXrect(r,&op->bounds) == FALSE) )
	{
		op = op->Next;
		goto try_again;
	}

	/* must split and try again */

	if (r->MinY < op->bounds.MinY)
	{
		    temp = *r;
		    r->MaxY = op->bounds.MinY - 1;
		    Rlayerop(ri,r,op->Next);
		    *r = temp;
		    r->MinY = op->bounds.MinY;
	}
	if (r->MaxY > op->bounds.MaxY)
	{
		    temp = *r;
		    r->MinY = op->bounds.MaxY + 1;
		    Rlayerop(ri,r,op->Next);
		    *r = temp;
		    r->MaxY = op->bounds.MaxY;
	}
	if (r->MinX < op->bounds.MinX)
	{
		    temp = *r;
		    r->MaxX = op->bounds.MinX - 1;
		    Rlayerop(ri,r,op->Next);
		    *r = temp;
		    r->MinX = op->bounds.MinX;
	}
	if (r->MaxX > op->bounds.MaxX)
	{
		    temp = *r;
		    r->MinX = op->bounds.MaxX + 1;
		    Rlayerop(ri,r,op->Next);
		    *r = temp;
		    r->MaxX = op->bounds.MaxX;
	}

	if (ri->myflag) myaddpiece(ri->lp,*r,ri->lp->rp,ri->stuff,op);
	else addpiece(ri->lp,*r,ri->lp->rp,ri->stuff,op);
    }
}

void layerop(struct Layer *lp,long myflag,struct Rectangle *r,void *stuff)
{
struct recurs_info ri;
struct Rectangle intersect_r;

	if (rectXrect(r,&lp->bounds))
	{
		/* compute intersection of two Rectangles */
		ri.lp = lp;
		ri.stuff = stuff;
		ri.myflag = myflag;

		intersect(r,&lp->bounds,&intersect_r);

		Rlayerop(&ri,&intersect_r,lp->ClipRect);
	}
}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: layerop.c,v 1.9 91/01/25 10:14:08 bart Exp $
d7 2
d16 1
a16 1
/*#include <clib/macros.h>*/
d18 1
a19 2
/*#define DEBUG*/

d23 2
a24 2
	int	stuff;
	int (*fn)();
d28 1
a28 5
layerop(lp,fn,r,stuff)
struct Layer *lp;
int (*fn)();
struct Rectangle *r;
int stuff;
d30 1
a30 16
	struct recurs_info ri;
	struct Rectangle intersect_r;
    if (rectXrect(r,&lp->bounds))
    {
		/* compute intersection of two Rectangles */
		ri.lp = lp;
		ri.stuff = stuff;
		ri.fn = fn;

		intersect(r,&lp->bounds,&intersect_r);

		Rlayerop(&ri,&intersect_r,lp->ClipRect);
    }
}

#define MAKE_CODE_SMALLER
a31 10
Rlayerop(ri,r,op)
struct recurs_info *ri;
struct Rectangle *r; 
struct ClipRect *op;
{
    struct Rectangle temp;
	
#ifdef DEBUG
    printf("Rlayerop(%lx,%lx,%d,%d,%d,%d,%lx\n",ri->lp,ri->fn,r,op);
#endif
d35 2
a36 1
	(*ri->fn)(ri->lp,*r,ri->lp->rp,ri->stuff,op);
d81 3
a83 1
	(*ri->fn)(ri->lp,*r,op,ri->stuff,op);
d85 18
@
