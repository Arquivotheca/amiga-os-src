head     38.7;
branch   ;
access   ;
symbols  V40_1:38.7 V39_62:38.7 V39_61:38.7 V39_60:38.7 V39_58:38.7 V39_56:38.7 V39_55:38.7 V39_54:38.7 V39_53:38.7 V39_52:38.7 V39_51:38.7 V39_50:38.7 V39_49:38.7 V39_48:38.7 V39_46:38.7 V39_45:38.7 V39_44:38.7 V39_42:38.7 V39_41:38.7 V39_40:38.7 V39_39:38.7 V39_38:38.7 V39_37:38.7 V39_36:38.7 V39_35:38.7 V39_34:38.7 V39_33:38.7 V39_32:38.7 V39_30:38.7 V39_28:38.7 V39_27:38.7 V39_26:38.7 V39_25:38.7 V39_24:38.7 V39_23:38.7 V39_22:38.7 V39_21:38.7 V39_20:38.7 V39_18:38.7 V39_16:38.7 V39_15:38.7 V39_14:38.7 V39_12:38.7 V39_10:38.6 V38_7:38.4 V38_6:38.4 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.7
date     91.10.23.16.40.59;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.10.03.12.52.08;  author bart;  state Exp;
branches ;
next     38.5;

38.5
date     91.09.30.14.10.22;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.21.15.25.00;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.05.20.19.16;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.20.51;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.33;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.7
log
@No more code left here.  All in search_for_cr.asm
@
text
@/******************************************************************************
*
*	$Id: layersubs.c,v 38.6 91/10/03 12:52:08 bart Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

@


38.6
log
@removed unlinkcr
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 38.5 91/09/30 14:10:22 mks Exp Locker: bart $
a8 81
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <hardware/dmabits.h>
#include <graphics/layers.h>
#include <hardware/custom.h>

#include "layersbase.h"

extern struct Custom far custom;

BOOL obscured(struct Rectangle *l,struct Rectangle *cr)
{
    if ( (l->MinX <= cr->MinX) &&
	 (l->MaxX >= cr->MaxX) &&
	 (l->MinY <= cr->MinY) &&
	 (l->MaxY >= cr->MaxY) )    return(TRUE);
    else                            return(FALSE);
}

void __stdargs __asm unlinklayer(register __a0 struct Layer *l)
{
    /* extract layer l from list */
	struct Layer_Info *wi=l->LayerInfo;
    struct Layer *top_layer;
    top_layer = wi->top_layer;
    if (top_layer)
    {
	if (l->back)    l->back->front = l->front;
	if (l == top_layer)
	{
	    top_layer = l->back;
	}
	else
	{
	    l->front->back = l->back;
	}
    }
    wi->top_layer = top_layer;
}

void linkcr(struct Layer *l,struct ClipRect *cr)
{
    cr->Next = l->ClipRect;
    l->ClipRect = cr;
}

void __stdargs __asm Freecr(register __a0 struct ClipRect *cr)
{
    if (cr->lobs)
    {
	if (cr->BitMap) free_concealed_rasters(cr);
    }
    FreeMem(cr,sizeof(struct ClipRect));
}

void __stdargs __asm Freecrlist(register __a0 struct ClipRect *cr)
{
	struct ClipRect *cr2;

	WaitBlit();	/* this is a KLUDGE! */
			/* It seems to prevent the premature */
			/* freeing of a bitmap before the blitter */
			/* is finished blitting from it. */

	while (cr)
	{
		cr2 = cr->Next;
		Freecr(cr);
		cr = cr2;
	}
}
@


38.5
log
@Changed to use new prototypes for assembly calling
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 38.4 91/08/21 15:25:00 mks Exp Locker: mks $
a56 15
}

void unlinkcr(struct Layer *l,struct ClipRect *cr)
{
    struct ClipRect *p;
    p = l->ClipRect;
    if (p == cr)
    {
	l->ClipRect = cr->Next;
    }
    else
    {
	while (p->Next != cr) p = p->Next;
	p->Next = cr->Next;
    }
@


38.4
log
@Removed unused functions
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 38.3 91/08/05 20:19:16 mks Exp Locker: mks $
d38 1
a38 1
void unlinklayer(struct Layer *l)
d80 1
a80 1
void Freecr(struct ClipRect *cr)
d89 1
a89 1
void Freecrlist(struct ClipRect *cr)
@


38.3
log
@Moved rectXrect() into assembly and into layerop.asm
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 38.2 91/08/02 10:20:51 mks Exp Locker: mks $
a27 13

long BLITBYTES(short x0,short x1)
{
long b;

    b = (((x1&(~0xf)) - (x0&(~0xf)) + 16)>>3);
    return(b);
}

long BYTECOUNT(short x0,short y0,short x1,short y1)
{
    return( (y1 - y0 + 1) * BLITBYTES(x0,x1) );
}
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 38.1 91/07/25 09:55:33 bart Exp $
a48 9
}

BOOL rectXrect(struct Rectangle *l,struct Rectangle *cr)
{
    if ( (cr->MaxX < l->MinX) ||
	 (cr->MinX > l->MaxX) ||
	 (cr->MaxY < l->MinY) ||
	 (cr->MinY > l->MaxY) ) return(FALSE);
    else return(TRUE);
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: layersubs.c,v 1.4 90/10/11 15:16:21 rsbx Exp $
d7 2
d25 1
a25 2
/*#define DEBUG*/
/*#define DEBUGMEM*/
d27 1
a27 1
extern struct Custom custom;
d29 1
a29 1
BLITBYTES(x0,x1)
d31 2
a32 1
    int b;
a33 3
#ifdef DEBUG
    printf("BLITBYTES = %ld",b);
#endif
d37 1
a37 2
int BYTECOUNT(x0,y0,x1,y1)
short x0,y0,x1,y1;
d39 1
a39 1
    return( smuls((y1 - y0 + 1) , BLITBYTES(x0,x1)));
d41 2
a42 3

obscured(l,cr)
struct Rectangle *l,*cr;
a43 3
#ifdef DEBUG
    printf("obscured(%lx,%lx)\n",l,cr);
#endif
d51 1
a51 2
int rectXrect(l,cr)
struct Rectangle *l,*cr;
a52 3
#ifdef DEBUG
    printf("rectXrect(%lx,%lx)\n",l,cr);
#endif
d60 1
a60 2
unlinklayer(l)
struct Layer *l;
a67 4
#ifdef DEBUG
	printf("top_layer=%lx\n",top_layer);
	Debug();
#endif
d81 1
a81 3
unlinkcr(l,cr)
struct Layer *l;
struct ClipRect *cr;
a83 3
#ifdef DEBUG
    printf("unlinkcr(%lx,%lx)",l,cr);
#endif
d96 1
a96 3
linkcr(l,cr)
struct Layer *l;
struct ClipRect *cr;
d101 2
a102 2
Freecr(cr)
struct ClipRect *cr;
a103 3
#ifdef DEBUGMEM
    printf("Freeing cliprect cr=%lx rp=%lx ",cr);
#endif
d111 1
a111 2
Freecrlist(cr)
struct ClipRect *cr;
@
