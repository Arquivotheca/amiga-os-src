head     38.5;
branch   ;
access   ;
symbols  V40_1:38.5 V39_62:38.5 V39_61:38.5 V39_60:38.4 V39_58:38.4 V39_56:38.4 V39_55:38.4 V39_54:38.4 V39_53:38.4 V39_52:38.4 V39_51:38.4 V39_50:38.4 V39_49:38.4 V39_48:38.4 V39_46:38.4 V39_45:38.4 V39_44:38.4 V39_42:38.4 V39_41:38.4 V39_40:38.4 V39_39:38.4 V39_38:38.4 V39_37:38.4 V39_36:38.4 V39_35:38.4 V39_34:38.4 V39_33:38.4 V39_32:38.4 V39_30:38.4 V39_28:38.4 V39_27:38.4 V39_26:38.4 V39_25:38.4 V39_24:38.4 V39_23:38.4 V39_22:38.4 V39_21:38.4 V39_20:38.4 V39_18:38.4 V39_16:38.4 V39_15:38.4 V39_14:38.4 V39_12:38.3 V39_10:38.3 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.5
date     92.07.01.19.47.06;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.24.08.52.57;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.03.16.04.46;  author bart;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.22.47;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.27;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.5
log
@Autodoc spelling error fix
@
text
@/******************************************************************************
*
*	$Id: update.c,v 38.4 91/10/24 08:52:57 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/layers.h>
#include <graphics/regions.h>

#include "layersbase.h"


long internal_beginupdate(struct Layer *cw)
{
struct LayerInfo *li;
struct Region *clipregion;
struct Region *tmpregion = 0;	/* this will be disposed */
long out_of_memory = FALSE;
struct Region *ScreenRegion = NULL;
struct Region *ObscuredRegion = NULL;

	li = cw->LayerInfo;
	cw->_cliprects = cw->ClipRect;	/* store for here for now */
	cw->ClipRect = 0;
	clipregion = cw->ClipRegion;

	/* attempt to avoid creating a new region */
	if (cw->Flags & LAYERUPDATING)
	{
		if (clipregion)
		{
			if ( (!(tmpregion = NewRegion()))
			||   (!OrRegionRegion(cw->DamageList,tmpregion))
			||   (!AndRegionRegion(clipregion,tmpregion)))
			{
				out_of_memory = TRUE;
				goto abortupdate;
			}
			clipregion = tmpregion;
		}
		else
		{
			clipregion = cw->DamageList;
		}
	}

	if (clipregion && clipregion->RegionRectangle)
	{
		/* convert region stuff to cliprect list */
		struct RegionRectangle *rr;
		struct Region *region;
		struct ClipRect *cr;
		int dx,dy;

		if ( (!(ScreenRegion = ClipRectsToRegion(cw,cw->_cliprects,0)))
		||   (!(ObscuredRegion = ClipRectsToRegion(cw,cw->_cliprects,1)))
		||   (!(AndRegionRegion(clipregion,ScreenRegion)))
		||   (!(AndRegionRegion(clipregion,ObscuredRegion))) )
		{
			out_of_memory = TRUE;
			goto abortupdate;
		}
		/* always results in smaller rectangles */

		if (ScreenRegion->RegionRectangle)	/* anything left? */
		{
			region = ScreenRegion;
			dx = cw->bounds.MinX + region->bounds.MinX;
			dy = cw->bounds.MinY + region->bounds.MinY;

			for (rr = region->RegionRectangle; rr ; rr = rr->Next )
			{
				if (!(cr = AllocCR(0)))
				{
					out_of_memory = TRUE;
					goto abortupdate;
				}

				cr->bounds.MinX = rr->bounds.MinX + dx;
				cr->bounds.MinY = rr->bounds.MinY + dy;
				cr->bounds.MaxX = rr->bounds.MaxX + dx;
				cr->bounds.MaxY = rr->bounds.MaxY + dy;

				linkcr(cw,cr);
			}
		}

		if (ObscuredRegion->RegionRectangle)
		{
		struct ClipRect *crt;

			region = ObscuredRegion;
			dx = cw->bounds.MinX + region->bounds.MinX;
			dy = cw->bounds.MinY + region->bounds.MinY;
			cw->LayerInfo = 0;

			for (rr = region->RegionRectangle; rr ; rr = rr->Next )
			{
				if (!(cr = AllocCR(0)))
				{
					out_of_memory = TRUE;
					goto abortupdate;
				}

				cr->bounds.MinX = rr->bounds.MinX + dx;
				cr->bounds.MinY = rr->bounds.MinY + dy;
				cr->bounds.MaxX = rr->bounds.MaxX + dx;
				cr->bounds.MaxY = rr->bounds.MaxY + dy;

				cr->lobs = (struct Layer *)1;	/* make it non zero */

				/* don't worry about clearing for now */
				if (!get_concealed_rasters(cw,cr))
				{
					cw->LayerInfo = li;
					Freecr(cr);
					out_of_memory = TRUE;
					goto abortupdate;
				}

				/* transfer contents of real bitmap to temp bitmap */
				for (crt = cw->_cliprects; crt ; crt = crt->Next)
				{
					if ( (crt->lobs) && (obscured(&crt->bounds,&cr->bounds)))
					{
						/* transfer bits from crt to cr */
						copyrect(crt,cr);
						break;
					}
				}

				linkcr(cw,cr);
			}

			cw->LayerInfo = li;
			out_of_memory = FALSE;
		}
abortupdate:
		if (ScreenRegion)
		{
			DisposeRegion(ScreenRegion);
		}
		if (ObscuredRegion)
		{
			DisposeRegion(ObscuredRegion);
		}
	}

	if (tmpregion)
	{
		DisposeRegion(tmpregion);
	}

	if (out_of_memory)
	{
		cw->Flags |= LAYER_CLIPRECTS_LOST;
	}

	return(!out_of_memory);
}

void internal_endupdate(struct Layer *cw)
{
	/* transfer contents of temporary ClipRects to real ClipRects */
	struct ClipRect *cr,*crp;
	for(cr = cw->ClipRect; cr ; cr = crp)	/* for all sub cliprects */
	{
		crp = cr->Next;
		if (cr->lobs)
		{
			struct ClipRect *crt;
			/* transfer contents into the real obscured cliprect */
			for (crt = cw->_cliprects; crt ; crt = crt->Next)
				if ( (crt->lobs) && (obscured(&crt->bounds,&cr->bounds)) )
				{
					/* transfer bits from cr to crt */
					copyrect(cr,crt);
					break;
				}
		}
	}
	/* Freecrlist() does a WaitBlit if needed */
	Freecrlist(cw->ClipRect);	/* free all at once */
	cw->ClipRect = cw->_cliprects;
	cw->_cliprects = 0;
}

/****** layers.library/BeginUpdate *********************************************
*
*    NAME
*	BeginUpdate -- Prepare to repair damaged layer.
*
*    SYNOPSIS
*	result = BeginUpdate( l )
*	d0                    a0
*
*	LONG BeginUpdate( struct Layer *);
*
*    FUNCTION
*	Convert damage list to ClipRect list and swap in for
*	programmer to redraw through. This routine simulates
*	the ROM library environment. The idea is to only render in the
*	"damaged" areas, saving time over redrawing all of the layer.
*	The layer is locked against changes made by the layer library.
*
*    INPUTS
*	l - pointer to a layer
*
*    RESULTS
*	result - TRUE if damage list converted to ClipRect list successfully.
*	         FALSE if list conversion aborted. (probably out of memory)
*
*    BUGS
*	If BeginUpdate returns FALSE, programmer must abort the attempt to
*	refresh this layer and instead call EndUpdate( l, FALSE ) to restore
*	original ClipRect and damage list.
*
*    SEE ALSO
*	EndUpdate, graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

long __stdargs __asm beginupdate(register __a0 struct Layer *cw)
{
	/* begin update takes the current damage list */
	/* if there is a ClipRegion, it ands it with the */
	/* ClipRegion, the result is the new cliprect list */
long status;

	LockLayerRom(cw);
	if (cw->ClipRegion)
	{
		internal_endupdate(cw);	/* transfer current clipregion */
	}
	cw->Flags |= LAYERUPDATING;
	status = internal_beginupdate(cw);	/* install new cliprects */
	return(status);
}

/****** layers.library/EndUpdate ***********************************************
*
*    NAME
*	EndUpdate -- remove damage list and restore state of layer to normal.
*
*    SYNOPSIS
*	EndUpdate( l, flag )
*	           a0  d0
*
*	void EndUpdate( struct Layer *, UWORD);
*
*    FUNCTION
*	After the programmer has redrawn his picture he calls this
*	routine to restore the ClipRects to point to his standard
*	layer tiling. The layer is then unlocked for access by the
*	layer library.
*
*	Note: use flag = FALSE if you are only making a partial update.
*	    You may use the other region functions (graphics functions such as
*	    OrRectRegion, AndRectRegion, and XorRectRegion ) to clip adjust
*	    the DamageList to reflect a partial update.
*
*    INPUTS
*	l - pointer to a layer
*	flag - use TRUE if update was completed. The damage list is cleared.
*	       use FALSE if update not complete. The damage list is retained.
*
*    EXAMPLE
*
*	-- begin update for first part of two-part refresh --
*	BeginUpdate(my_layer);
*
*	-- do some refresh, but not all --
*	my_partial_refresh_routine(my_layer);
*
*	-- end update, false (not completely done refreshing yet) --
*	EndUpdate(my_layer, FALSE);
*
*	-- begin update for last part of refresh --
*	BeginUpdate(my_layer);
*
*	-- do rest of refresh --
*	my_complete_refresh_routine(my_layer);
*
*	-- end update, true (completely done refreshing now) --
*	EndUpdate(my_layer, TRUE);
*
*    BUGS
*
*    SEE ALSO
*	BeginUpdate, graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

void __stdargs __asm endupdate(register __a0 struct Layer *cw,register __d0 UWORD flag)
{
	if (flag)	ClearRegion(cw->DamageList);
	internal_endupdate(cw);
	cw->Flags &= ~LAYERUPDATING;
	if (cw->ClipRegion)
	{
		/* restore to old ClipRegion */
		internal_beginupdate(cw);
	}
	UnlockLayerRom(cw);
}
@


38.4
log
@Removed unused WaitBlit()
@
text
@d3 1
a3 1
*	$Id: update.c,v 38.3 91/10/03 16:04:46 bart Exp Locker: mks $
d218 1
a218 1
*	result - TRUE if damage list converted to ClipRect list sucessfully.
@


38.3
log
@combine memory tests
and smaller initialization of cliprect bounds
@
text
@d3 1
a3 1
*	$Id: update.c,v 38.2 91/08/02 10:22:47 mks Exp Locker: bart $
d190 1
a190 1
	WaitBlit();
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: update.c,v 38.1 91/07/25 09:56:27 bart Exp $
d40 3
a42 1
			if (!(tmpregion = NewRegion()))
a46 10
			if (!OrRegionRegion(cw->DamageList,tmpregion))
			{
				out_of_memory = TRUE;
				goto abortupdate;
			}
			if (!AndRegionRegion(clipregion,tmpregion))
			{
				out_of_memory = TRUE;
				goto abortupdate;
			}
d63 4
a66 17
		if (!(ScreenRegion = ClipRectsToRegion(cw,cw->_cliprects,0)))
		{
			out_of_memory = TRUE;
			goto abortupdate;
		}
		if (!(ObscuredRegion = ClipRectsToRegion(cw,cw->_cliprects,1)))
		{
			out_of_memory = TRUE;
			goto abortupdate;
		}

		if (!(AndRegionRegion(clipregion,ScreenRegion)))
		{
			out_of_memory = TRUE;
			goto abortupdate;
		}
		if (!(AndRegionRegion(clipregion,ObscuredRegion)))
a85 1
				cr->bounds = rr->bounds;
d87 5
a91 4
				cr->bounds.MinX += dx;
				cr->bounds.MinY += dy;
				cr->bounds.MaxX += dx;
				cr->bounds.MaxY += dy;
d112 5
a116 1
				cr->bounds = rr->bounds;
a117 4
				cr->bounds.MinX += dx;
				cr->bounds.MinY += dy;
				cr->bounds.MaxX += dx;
				cr->bounds.MaxY += dy;
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: update.c,v 1.11 90/12/07 14:17:37 rsbx Exp $
d7 2
d18 1
a18 1
/*#define DEBUG*/
a19 1
#define copyrect2 copyrect
d21 8
a28 56
struct ClipRect *AllocCR();
struct Region *ClipRectsToRegion();
struct Region *NewRegion();

/****** layers.library/BeginUpdate *********************************************
*
*    NAME
*	BeginUpdate -- Prepare to repair damaged layer.
*
*    SYNOPSIS
*	result = BeginUpdate( l )
*	d0                    a0
*
*	LONG BeginUpdate( struct Layer *);
*
*    FUNCTION
*	Convert damage list to ClipRect list and swap in for
*	programmer to redraw through. This routine simulates
*	the ROM library environment. The idea is to only render in the
*	"damaged" areas, saving time over redrawing all of the layer.
*	The layer is locked against changes made by the layer library.
*
*    INPUTS
*	l - pointer to a layer
*
*    RESULTS
*	result - TRUE if damage list converted to ClipRect list sucessfully.
*	         FALSE if list conversion aborted. (probably out of memory)
*
*    BUGS
*	If BeginUpdate returns FALSE, programmer must abort the attempt to
*	refresh this layer and instead call EndUpdate( l, FALSE ) to restore
*	original ClipRect and damage list.
*
*    SEE ALSO
*	EndUpdate, graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

int beginupdate(cw)
	struct Layer *cw;
	{
	/* begin update takes the current damage list */
	/* if there is a ClipRegion, it ands it with the */
	/* ClipRegion, the result is the new cliprect list */
	int status;
	LockLayerRom(cw);
	if (cw->ClipRegion)
		{
		internal_endupdate(cw);	/* transfer current clipregion */
		}
	cw->Flags |= LAYERUPDATING;
	status = internal_beginupdate(cw);	/* install new cliprects */
	return(status);
	}

a29 14
int internal_beginupdate(cw)
	struct Layer *cw;
	{
	struct LayerInfo *li;
	struct Region *clipregion;
	struct Region *tmpregion = 0;	/* this will be disposed */
	int out_of_memory = FALSE;
	struct Region *ScreenRegion = NULL;
	struct Region *ObscuredRegion = NULL;

#ifdef DEBUG
	printf("begindupdate(%lx)\n",cw);
#endif

d37 2
d40 1
a40 1
		if (clipregion)
a41 2
			if (!(tmpregion = NewRegion()))
				{
d44 1
a44 1
				}
d46 1
a46 1
				{
d49 1
a49 1
				}
d51 1
a51 1
				{
d54 1
a54 1
				}
d56 1
a56 1
			}
d58 1
a58 1
			{
a59 1
			}
d61 1
d64 1
a64 1
		{
d72 1
a72 1
			{
d75 1
a75 1
			}
d77 1
a77 1
			{
d80 1
a80 1
			}
a81 5
#ifdef DEBUG
		printf("anding onscreen region to damagelist(%lx,%lx)\n",
			ScreenRegion,clipregion);
#endif

d83 1
a83 1
			{
d86 1
a86 1
			}
d88 1
a88 1
			{
d91 1
a91 1
			}
a93 4
#ifdef DEBUG
		printf("anythingleft?\n");
#endif

d95 1
a95 6
			{

#ifdef DEBUG
			printf("converting region to cliprects\n");
#endif

a99 5
#ifdef DEBUG
			printf("cw->bounds(%d,%d,%d,%d)\n",cw->bounds);
			printf("regionbounds(%d,%d,%d,%d)\n",region->bounds);
#endif

d101 2
a103 2
				if (!(cr = AllocCR(0)))
					{
d106 1
a106 1
					}
a108 4
#ifdef DEBUG
				printf("damage(%d,%d,%d,%d)\n",cr->bounds);
#endif

a113 1
				}
d115 1
d118 2
a119 2
			{
			struct ClipRect *crt;
d127 2
a129 2
				if (!(cr = AllocCR(0)))
					{
d132 1
a132 1
					}
a134 4
#ifdef DEBUG
				printf("damage(%d,%d,%d,%d)\n",cr->bounds);
#endif

d143 1
a143 1
					{
d148 1
a148 1
					};
d152 2
a154 2
					if ( (crt->lobs) && (obscured(&crt->bounds,&cr->bounds)))
						{
a157 1
						}
d159 1
d162 1
a162 1
				}
d166 1
a166 1
			}
d169 1
a169 1
			{
d171 1
a171 1
			}
d173 1
a173 1
			{
a174 1
			}
d176 1
a176 7

#ifdef DEBUG
		printf("end of begin update\n");
#ifdef DEBUGDEBUG
		Debug();
#endif
#endif
d179 1
a179 1
		{
d181 1
a181 1
		}
d184 1
a184 1
		{
d186 1
a186 1
		}
d189 21
d211 47
d259 9
d273 1
a273 1
* 
d287 1
a287 1
*	    You may use the other region functions (graphics functions such as 
d295 1
a295 1
* 
d298 1
a298 1
*	-- begin update for first part of two-part refresh -- 
d307 1
a307 1
*	-- begin update for last part of refresh -- 
d310 1
a310 1
*	-- do rest of refresh -- 
d318 1
a318 1
*    SEE ALSO 
d323 1
a323 3
endupdate(cw,flag)
struct Layer *cw;
USHORT	flag;
a333 30
}

internal_endupdate(cw)
struct Layer *cw;
{
	/* transfer contents of temporary ClipRects to real ClipRects */
	struct ClipRect *cr,*crp;
#ifdef DEBUG
	printf("endupdate(%lx)\n",cw);
#endif
	for(cr = cw->ClipRect; cr ; cr = crp)	/* for all sub cliprects */
	{
		crp = cr->Next;
		if (cr->lobs)
		{
			struct ClipRect *crt;
			/* transfer contents into the real obscured cliprect */
			for (crt = cw->_cliprects; crt ; crt = crt->Next)
				if ( (crt->lobs) && (obscured(&crt->bounds,&cr->bounds)) )
				{
					/* transfer bits from cr to crt */
					copyrect2(cr,crt);
					break;
				}
		}
	}
	WaitBlit();
	Freecrlist(cw->ClipRect);	/* free all at once */
	cw->ClipRect = cw->_cliprects;
	cw->_cliprects = 0;
@
