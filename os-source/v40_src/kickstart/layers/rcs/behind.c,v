head     38.2;
branch   ;
access   ;
symbols  V40_1:38.2 V39_62:38.2 V39_61:38.2 V39_60:38.2 V39_58:38.2 V39_56:38.2 V39_55:38.2 V39_54:38.2 V39_53:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_49:38.2 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.2 V39_32:38.2 V39_30:38.2 V39_28:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.2
date     91.08.02.10.19.10;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.54.46;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@Native build version checkin...
@
text
@/******************************************************************************
*
*	$Id: behind.c,v 38.1 91/07/25 09:54:46 bart Exp $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>
#include <graphics/gfxbase.h>

#include "layersbase.h"

/****** layers.library/BehindLayer *********************************************
*
*    NAME
*	BehindLayer -- Put layer behind other layers.
*
*    SYNOPSIS
*	result = BehindLayer( dummy, l )
*	d0                    a0     a1
*
*	LONG BehindLayer( LONG, struct Layer *);
*
*    FUNCTION
*	Move this layer to the most behind position swapping bits
*	in and out of the display with other layers.
*	If other layers are REFRESH then collect their damage lists and
*	set the LAYERREFRESH bit in the Flags fields of those layers that
*	may be revealed.  If this layer is a backdrop layer then
*	put this layer behind all other backdrop layers.
*	If this layer is NOT a backdrop layer then put in front of the
*	top backdrop layer and behind all other layers.
*
*	Note: this operation may generate refresh events in other layers
*	   associated with this layer's Layer_Info structure.
*
*    INPUTS
*	dummy - unused
*	l - pointer to a layer
*
*    RESULTS
*	result - TRUE    if operation successful
*	         FALSE   if operation unsuccessful (probably out of memory)
*
*    BUGS
*
*    SEE ALSO
*       graphics/layers.h, graphics/clip.h
*
*******************************************************************************/

BOOL behindcode(struct Layer *l,UWORD stop)
{
struct Layer *p = 0;	/* assume behind everything */

	/* find the guy l will be placed in front of and call new routine */
	if (stop)
		for (p = l->back; p ; p = p->back)
		{
				if (p->Flags & stop)	break;
		}
	return(movelayerinfrontof(l,p,FALSE));
}

LONG __stdargs __asm behind(register __a1 struct Layer *l)
{
struct Layer_Info *li=l->LayerInfo;
LONG status = FALSE;

	if (fatten_lock(li))
	{
		if (behindcode(l,l->Flags & LAYERBACKDROP?0:LAYERBACKDROP))
		{
			regen_display(li);
			status = TRUE;
		}
	    	unlock_thin(li);
	}
	return(status);
}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: behind.c,v 1.8 90/10/11 15:15:40 rsbx Exp $
d7 2
d19 1
a19 1
/*#define DEBUG*/
d33 1
a33 1
*	Move this layer to the most behind position swapping bits 
d35 1
a35 1
*	If other layers are REFRESH then collect their damage lists and 
d47 1
a47 1
*	l - pointer to a layer 
d50 1
a50 1
*	result - TRUE    if operation successful 
d60 14
a73 2
behind(l)
struct Layer *l;
d75 3
a77 2
	struct Layer_Info *li=l->LayerInfo;
	int status = FALSE;
d82 1
a82 1
    		regen_display(li);
d85 1
a85 1
    	unlock_thin(li);
a87 15
}

behindcode(l,stop)
struct Layer *l;
UWORD stop;
{
	struct Layer *p = 0;	/* assume behind everything */

	/* find the guy l will be placed in front of and call new routine */
	if (stop)
		for (p = l->back; p ; p = p->back)
		{
				if (p->Flags & stop)	break;
		}
	return(movelayerinfrontof(l,p,FALSE));
@
