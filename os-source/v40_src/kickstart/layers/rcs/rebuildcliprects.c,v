head     38.12;
branch   ;
access   ;
symbols  V40_1:38.12 V39_62:38.12 V39_61:38.12 V39_60:38.12 V39_58:38.12 V39_56:38.12 V39_55:38.12 V39_54:38.12 V39_53:38.12 V39_52:38.12 V39_51:38.12 V39_50:38.12 V39_49:38.12 V39_48:38.12 V39_46:38.12 V39_45:38.12 V39_44:38.12 V39_42:38.12 V39_41:38.12 V39_40:38.12 V39_39:38.12 V39_38:38.12 V39_37:38.12 V39_36:38.11 V39_35:38.10 V39_34:38.10 V39_33:38.10 V39_32:38.10 V39_30:38.9 V39_28:38.8 V39_27:38.8 V39_26:38.8 V39_25:38.8 V39_24:38.8 V39_23:38.8 V39_22:38.8 V39_21:38.8 V39_20:38.8 V39_18:38.7 V39_16:38.7 V39_15:38.7 V39_14:38.7 V39_12:38.6 V39_10:38.6 V38_7:38.4 V38_6:38.4 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.12
date     92.01.10.09.21.44;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     91.12.31.19.44.11;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     91.11.19.12.50.57;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     91.11.15.20.16.44;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     91.11.01.08.23.32;  author mks;  state Exp;
branches ;
next     38.7;

38.7
date     91.10.24.08.35.26;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.10.04.15.50.19;  author bart;  state Exp;
branches ;
next     38.5;

38.5
date     91.09.30.14.10.47;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.15.10.39.36;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.05.20.15.14;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.21.52;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.02;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.12
log
@Obsolete!
Well, this is no longer needed since the new dedice routine
always makes optimal cliprects!!!  Cool stuff, dude!
@
text
@/*
 * $Id: rebuildcliprects.c,v 38.11 91/12/31 19:44:11 mks Exp Locker: mks $
 */

/**************************************************************/
/*   Code to regenerate new set of optimal obscured cliprects */
/*   To replace current interative dedice strategy.           */
/**************************************************************/

/*
 * Well, this is no longer needed since the new dedice routine
 * always makes optimal cliprects!!!  Cool stuff, dude!
 */

Obsolete!
@


38.11
log
@Removed the optimizeClipRects() call.  It now is part of dedice.
This also removed the rebuild count stuff...
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.10 91/11/19 12:50:57 mks Exp Locker: mks $
a9 9
#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <graphics/layers.h>
#include <graphics/clip.h>
#include <hardware/blit.h>

#include "layersbase.h"

d11 2
a12 19
 * This function rebuild (recreates) all of the cliprects in the layers
 * that are associated with the layer info structure given.
 *
 * Method:
 *
 * Walk down the layers, from top to bottom, making new, optimal
 * cliprects for each layer as it is worked on.
 *
 * This means that the first layer is trivial, and the next layer would then
 * cause breakups in the first layer (and itself).  The next layer would cause
 * cliprects in the ones above it, etc. until we finish all of the layers.
 *
 * Once the cliprects are completed, all of the hidden ones that need to have
 * the bits "saved" are noted and the memory for them is allocated.  This
 * process is to make sure that a low memory condition can be worked around.
 * If all of the memory needed can be allocated, the new cliprects are then
 * installed and the hidden (obscured) bits are copied to them.  For those
 * obscured cliprects that are the same size, the bitmap pointers are just
 * moved over and not copied.
d15 1
a15 132
BOOL __stdargs __asm rebuildcliprects(register __a0 struct Layer_Info *li)
{
	struct LayerInfo_extra *old_lie = li->LayerInfo_extra;
	struct LayerInfo_extra new_lie;
	struct Layer *l;
	struct ClipRect *cr,*cr2;

	/* First move the current ClipRect for safe keeping */
	for (l = li->top_layer; l ; l = l->back)
	{
		l->cr = l->ClipRect;
		l->ClipRect = 0;
	}
	li->LayerInfo_extra = &new_lie;	/* for setjmp-longjmp */
	if (aborted(li))
	{
		/* oops ran out of memory some where */
		for (l = li->top_layer; l ; l = l->back)
		{
			/* no need to free cliprects, they are */
			/* freed by the cleanup code */
			/* just get the old ClipRect back */
			l->ClipRect = l->cr;
		}
		li->LayerInfo_extra = old_lie;
		return(FALSE);
	}
	/* now generate new list of supposedly better cliprects */
	for (l = li->top_layer; l ; l = l->back)
	{
		struct Layer *l2;
		/* first bust up existing cliprects into pieces */
		li->obs = 0;
		/** for each layer already rediced */
		for (l2 = li->top_layer; l != l2 ; l2 = l2->back)
		{
			/* bart -- speed up delinking of busted up cr's */
			struct ClipRect *cr;
			struct ClipRect **crp;
			if (rectXrect(&l->bounds,&l2->bounds))
			for (crp = &l2->ClipRect; cr = *crp; )
			{
				if (rectXrect(&l->bounds,&cr->bounds) &&
					addobs(cr,&cr->bounds,&l->bounds,l2) )
				{
					/* got busted up, delete old */
					*crp = cr->Next;

					/* Might have to clear the ClipRect first though */
					cr->Next=new_lie.buffered_cliprects;
					new_lie.buffered_cliprects=cr;
				}
				else
				{
				    crp = (struct ClipRect **)*crp;
				}
			}
		}
		/* Now add pieces associated with current layer */
		l->ClipRect = li->obs;
		for (l2 = li->top_layer; l2 != l; l2 = l2->back)
		{
			li->check_lp = l2;
			layerop(l,&addpiece,&l2->bounds,li);
		}
		l->ClipRect = li->obs;
	}
	/* Now have simple set of cliprects */
	/* First pass is memory intensive to verify algorithm *.
	/* Allocate needed bitmaps */
	for (l = li->top_layer; l ; l = l->back)
		if ( (l->Flags & LAYERSIMPLE) == 0)
			for (cr = l->ClipRect; cr ; cr = cr->Next)
			{
				BOOL getflag=TRUE;

				/* bart -- let's not allocate too much */
				for (cr2 = l->cr ; cr2 ; cr2 = cr2->Next)
				{
					if((*(ULONG *)&cr->bounds.MinX == *(ULONG *)&cr2->bounds.MinX) &&
					   (*(ULONG *)&cr->bounds.MaxX == *(ULONG *)&cr2->bounds.MaxX) )
					{
						getflag=FALSE;
						break;
					}
				}

				if (getflag) get_concealed_rasters(l,cr);
			}

	/* Now have all the memory required and newly allocated bitmaps */
	cleanup(li);	/* no longer need memory protection */
	li->LayerInfo_extra = old_lie;
	/* all we have to do is copy the bits from one to another now */
	for (l = li->top_layer; l ; l = l->back)
	{
		if ( (l->Flags & LAYERSIMPLE) == 0)
		{
			struct ClipRect *crtmp;
			/* For all new ClipRect */
			/* All cliprects have bitmaps */
			/* except for those that are already duplicates */
			for (cr = l->ClipRect; cr ; cr = cr->Next)
				/* check list of old cliprects */
				for (cr2 = l->cr ; cr2 ; cr2 = crtmp)
				{
					crtmp = cr2->Next;
					if (rectXrect(&cr->bounds,&cr2->bounds))
					{
					if((*(ULONG *)&cr->bounds.MinX == *(ULONG *)&cr2->bounds.MinX) &&
					   (*(ULONG *)&cr->bounds.MaxX == *(ULONG *)&cr2->bounds.MaxX) )
						{
							/* just swap bitmaps */
							struct BitMap *bm;
							bm = cr->BitMap;
							cr->BitMap = cr2->BitMap;
							cr2->BitMap = bm;
							/* And delete the CR */
						}
						else
						{
						    /* else we have to blit */
						    copyrect(cr2,cr);
						}
					}
			}
		}
		/* now free any left over memory hanging on for this layer*/
		Freecrlist(l->cr);
	}
	return(TRUE);
}
@


38.10
log
@Changed the way buffered cliprects work
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.9 91/11/15 20:16:44 mks Exp Locker: mks $
d41 1
a41 1
BOOL rebuildcliprects(struct Layer_Info *li)
a171 16
}

void __stdargs __asm optimizeClipRects(register __a0 struct Layer_Info *li)
{
    /* Make several attempts if failure */
    /* First the memory hungry one */
    if( (--(li->RebuildCount)) < 0)
    {
        if (!rebuildcliprects(li)) dedice(li);

        li->RebuildCount = LAYERSBASE->RebuildIncrement;
    }
    else
    {
        dedice(li);
    }
@


38.9
log
@Changed where the rebuild counter was stored
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.8 91/11/01 08:23:32 mks Exp Locker: mks $
d88 1
d90 2
a91 1
					AddTail(&new_lie.buffered_cliprects,(struct Node *)cr);
@


38.8
log
@Removed extra call to RebuildClipRects
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.7 91/10/24 08:35:26 mks Exp Locker: mks $
d176 1
a176 1
    if( (--(li->longreserved)) < 0)
d180 1
a180 1
        li->longreserved = LAYERSBASE->RebuildIncrement;
@


38.7
log
@Removed a WaitBlit() that was not needed
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.6 91/10/04 15:50:19 bart Exp Locker: mks $
d178 1
a178 7
        if (!rebuildcliprects(li))
        {
            if(dedice(li))
            {
                rebuildcliprects(li);
            }
        }
@


38.6
log
@minor byte savings
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.5 91/09/30 14:10:47 mks Exp Locker: bart $
a166 1
		WaitBlit();
@


38.5
log
@Changed to use new prototypes for assembly calling
@
text
@d2 1
a2 1
 * $Id: rebuildcliprects.c,v 38.4 91/08/15 10:39:36 mks Exp Locker: mks $
d113 1
a113 1
			BOOL getflag=TRUE;
d118 2
a119 4
					if ((cr->bounds.MinX == cr2->bounds.MinX) &&
					    (cr->bounds.MinY == cr2->bounds.MinY) &&
					    (cr->bounds.MaxX == cr2->bounds.MaxX) &&
					    (cr->bounds.MaxY == cr2->bounds.MaxY) )
d122 1
d148 2
a149 4
						if ((cr->bounds.MinX == cr2->bounds.MinX) &&
						    (cr->bounds.MinY == cr2->bounds.MinY) &&
						    (cr->bounds.MaxX == cr2->bounds.MaxX) &&
						    (cr->bounds.MaxY == cr2->bounds.MaxY) )
@


38.4
log
@Added some comments and RCS header information
@
text
@d2 1
a2 1
 * $Id$
d176 1
a176 1
void optimizeClipRects(struct Layer_Info *li)
@


38.3
log
@Changed call to layerop() to use pass a function pointer again.
@
text
@d1 4
d19 22
d119 1
a120 1
					    (cr->bounds.MinY == cr2->bounds.MinY) &&
d150 1
a151 1
						    (cr->bounds.MinY == cr2->bounds.MinY) &&
@


38.2
log
@Native build version checkin...
@
text
@d76 1
a76 1
			layerop(l,FALSE,&l2->bounds,li);
@


38.1
log
@begin_v38_development
@
text
@d6 2
d12 1
d15 1
a15 22
int	addpiece();

/*#define PROFILE*/

#ifdef PROFILE
extern short addobs_metric;
extern short alloccr_metric;
#endif

#define STARTMETRIC(x)	/*x = 0;*/

#define DBUG(x)	/*kprintf x*/
#define KDBUG(x)	/*kprintf x*/
#define DEBUG	/*Debug()*/
/*#define DEDICEONLY*/

#define copyrect3 copyrect

#define TIMESTAMP(x)  /*if (*(short *)x);*/

rebuildcliprects(li)
struct Layer_Info *li;
a20 6
#ifdef DELETECR
	struct ClipRect *deletecr = 0;
#endif

	DBUG(("rebuildcliprects\n"));
	DEBUG;
a21 1
	TIMESTAMP(0x666606);
a25 1
		DBUG(("saving old cr list:%lx\n",l->cr));
a28 1
	TIMESTAMP(0x666616);
a31 1
		KDBUG(("oops ran out of memory some where\n"));
d40 1
a40 1
		return (0);
a41 1
	TIMESTAMP(0x666626);
a42 6
	DBUG(("now generate new list of supposedly better cliprects\n"));
	DEBUG;
#ifdef PROFILE
	STARTMETRIC(alloccr_metric);
	STARTMETRIC(addobs_metric);
#endif
a46 2
		/*struct Rectangle r;*/
		/*r = l->bounds;*/
d62 2
a63 8
#ifdef DELETECR
					cr->Next = deletecr;
					deletecr = cr;
#else
	/* Might have to clear the ClipRect first though */
	AddTail(&new_lie.buffered_cliprects,cr);
#endif
					/*Freecr(cr);*/
d67 1
a67 1
				    crp = *crp;
d76 1
a76 1
			layerop(l,addpiece,&l2->bounds,li);
a79 13
#ifdef PROFILE
	kprintf("alloccr called %ld times\n",alloccr_metric);
	kprintf("addobs called %ld times\n",addobs_metric);
#ifdef DELETECR
	{
		int cnt = 0;
		for (cr = deletecr; cr ; cr = cr->Next) cnt++;
		printf("size of delete cr list=%ld\n",cnt);
	}
#endif
	Debug();
#endif
	TIMESTAMP(0x666636);
a82 2
	DBUG(("Allocate needed bitmaps\n"));
	DEBUG;
d87 2
a90 1
				if (cr->bounds != cr2->bounds)
d92 7
a98 1
				    continue;
a99 1
				else goto duplicate_cliprect;
d101 1
a101 7
				/* if ( cr->BitMap == 0) */
				{
				    DBUG(("get_concealed_rasters\n"));
				    get_concealed_rasters(l,cr);
				    /*Clear_BitMap(cr->BitMap);*/
				}
duplicate_cliprect:
a103 1
	TIMESTAMP(0x666646);
a104 1
	DBUG(("call cleanup\n"));
a105 3
#ifdef DELETECR
	Freecrlist(deletecr);
#endif
a107 3
	DBUG(("Now copy bits\n"));
	DEBUG;
	TIMESTAMP(0x666656);
a112 1
			DBUG(("Processing complex layer\n"));
a115 2
#define TRANSFERBITS
#ifdef TRANSFERBITS
d123 4
a126 2
						DBUG(("copy(%lx,%lx)\n",cr,cr2));
						if (cr->bounds == cr2->bounds)
a129 1
			DBUG(("just swap bitmaps\n"));
d138 1
a138 2
			DBUG(("call copyrect(%lx,%lx)\n",cr2,cr));
						    copyrect3(cr2,cr);
a141 1
#endif
a143 2
		DBUG(("free any left over memory layer %lx\n",l->cr));
		DEBUG;
d147 1
a147 4
	TIMESTAMP(0x666666);
	DBUG(("leaving rebuildcliprects\n"));
	DEBUG;
	return (1);
d150 1
a150 4
extern struct LayersBase *FetchLayersBase();

optimizeClipRects(li)
struct Layer_Info *li;
d152 11
a162 8
	/* Make several attempts if failure */
	/* First the memory hungry one */
#ifdef DEDICEONLY
	dedice(li);
#else
	if( (--(li->longreserved)) < 0)
	{
	    struct LayersBase *LB = (struct LayersBase *)FetchLayersBase();
d164 5
a168 15
	    if (!rebuildcliprects(li))
	    {
		if(dedice(li))	
		{
		    rebuildcliprects(li);
		}
	    }

	    li->longreserved = LB->RebuildIncrement;
	}
	else
	{
		dedice(li);
	}
#endif
d170 1
a170 1

@
