head     38.10;
branch   ;
access   ;
symbols  V40_1:38.10 V39_62:38.10 V39_61:38.10 V39_60:38.9 V39_58:38.9 V39_56:38.9 V39_55:38.8 V39_54:38.8 V39_53:38.8 V39_52:38.8 V39_51:38.8 V39_50:38.8 V39_49:38.8 V39_48:38.8 V39_46:38.8 V39_45:38.8 V39_44:38.6 V39_42:38.6 V39_41:38.6 V39_40:38.6 V39_39:38.6 V39_38:38.6 V39_37:38.6 V39_36:38.6 V39_35:38.6 V39_34:38.6 V39_33:38.6 V39_32:38.6 V39_30:38.5 V39_28:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.10
date     92.09.18.14.49.21;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.22.08.56.03;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     92.03.03.17.54.13;  author mks;  state Exp;
branches ;
next     38.7;

38.7
date     92.03.03.17.26.31;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.11.18.18.37.33;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.11.18.13.53.17;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.18.13.25.48;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.15.13.17.08;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.20.08;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.07;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.10
log
@Updated the autodoc
@
text
@/******************************************************************************
*
*	$Id: hook.c,v 38.9 92/04/22 08:56:03 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <utility/hooks.h>
#include <graphics/clip.h>
#include <graphics/layers.h>

#include "layersbase.h"

/****** layers.library/InstallLayerHook ***************************************
*
*    NAME
*	InstallLayerHook -- safely install a new Layer->BackFill hook.    (V36)
*
*    SYNOPSIS
*	oldhook = InstallLayerHook( layer, hook )
*	d0                          a0     a1
*
*	struct Hook *InstallLayerHook( struct Layer *, struct Hook *);
*
*    FUNCTION
*	Installs a new Layer->Backfill Hook, waiting until it is safe to do
*	so. Locks the layer while substituting the new Hook and removing the
*	old one. If a new Hook is not provided, will install the default layer
*	BackFill Hook.
*
*    INPUTS
*	layer - pointer to the layer in which to install the Backfill Hook.
*	hook -  pointer to layer callback Hook which will be called
*	        with object == (struct RastPort *) result->RastPort
*	        and message == [ (Layer *) layer, (struct Rectangle) bounds,
*	                         (LONG) offsetx, (LONG) offsety ]
*
*	        This hook should fill the Rectangle in the RastPort
*	        with the BackFill pattern appropriate for offset x/y.
*
*	        If hook is LAYERS_BACKFILL, the default backfill is
*	        used for the layer.  (Same as pre-2.0)
*
*	        As of V39:
*		If hook is LAYERS_NOBACKFILL, the layer will not be
*	        backfilled (NO-OP).
*
*    RESULTS
*	oldhook - pointer to the Layer->BackFill Hook that was previously
*	          active.  Returns NULL if it was the default hook.
*		  In V39, it could return 1 if there was no hook.
*
*    EXAMPLE
*	The following hook is a very simple example that does rather little
*	but gives the basis idea of what is going on.
*
*	*
*	* This is the code called by the layer hook...
*	* Note that some other setup is required for this to work, including
*	* the definition of the PrivateData structure (pd_...) and the
*	* definition of the BitMapPattern structure (bmp_...)
*	*
*	CoolHook:	xdef	CoolHook
*			movem.l	d2-d7/a3-a6,-(sp)	; Save these...
*			move.l	h_SubEntry(a0),a4	; (my private data #1 here)
*			move.l	h_Data(a0),a5		; Put data into address reg
*	*
*	* Now, we do the rendering...
*	* Note that the layer may not be important...  But it is here...
*	*
*			move.l	(a1)+,a0		; Get the layer...
*	*
*	* a1 now points at the rectangle...
*	*
*			move.l	pd_GfxBase(a4),a6	; Point at GfxBase
*			move.l	bmp_Pattern(a5),d0	; Get PatternBitMap
*			beq	SimpleCase		; None?  Simple (0) case
*	*
*	* Now do the complex case of a pattern...
*	*
*			move.l	a1,a3			; Pointer to rectangle
*			addq.l	#8,a1			; Get past rectangle
*			move.l	(a1)+,d2		; X Offset (For pattern)
*			move.l	(a1)+,d3		; Y Offset
*		;
*		; Whatever complex blitting you would do in the complex case
*		; goes here
*		;
*	*
*	* No bitmap, so just do the simple (0) minterm case...
*	*
*	SimpleCase:	moveq.l	#0,d2			; Clear d2
*			move.w	ra_MinX(a1),d2		; Get X pos
*	*
*			moveq.l	#0,d3
*			move.w	ra_MinY(a1),d3		; Get Y pos
*	*
*			moveq.l	#0,d4
*			move.w	ra_MaxX(a1),d4
*			sub.l	d2,d4
*			addq.l	#1,d4			; Get X size
*	*
*			moveq.l	#0,d5
*			move.w	ra_MaxY(a1),d5
*			sub.l	d3,d5
*			addq.l	#1,d5			; Get Y size
*	*
*			move.l	d2,d0			; X Source
*			move.l	d3,d1			; Y Source
*			moveq.l	#0,d6			; NULL minterm
*			moveq.l	#-1,d7			; FF mask
*	*
*			move.l	rp_BitMap(a2),a1	; Get bitmap
*			move.l	a1,a0
*			CALLSYS	BltBitMap		; Do the backfill-0
*	*
*	HookDone:	movem.l	(sp)+,d2-d7/a3-a6	; Restore
*			rts
*
*    NOTES
*	The RastPort you are passed back is the same one passed to the
*	function.  You should *not* use "layered" rendering functions
*	on this RastPort.  Generally, you will wish to do BitMap operations
*	such as BltBitMap().  The callback is a raw, low-level rendering
*	call-back.  If you need to call a rendering operation with a
*	RastPort, make sure you use a copy of the RastPort and NULL the
*	Layer pointer.
*
*    BUGS
*
*    SEE ALSO
*	graphics/clip.h utility/hooks.h
*
*******************************************************************************/

struct Hook * __stdargs __asm install_backfill_hook(register __a0 struct Layer *layer,register __a1 struct Hook *hook)
{
struct Hook *old_hook = NULL;

	if (layer)
	{
		LockLayerRom(layer);

		old_hook=layer->BackFill;
		layer->BackFill = hook;

		UnlockLayerRom(layer);
	}

	return(old_hook);
}

/****** layers.library/InstallLayerInfoHook ***********************************
*
*    NAME
*	InstallLayerInfoHook - Install a backfill hook for non-layer      (V39)
*
*    SYNOPSIS
*	oldhook=InstallLayerInfoHook(li,hook)
*	d0                           a0 a1
*
*	struct Hook *InstallLayerInfoHook(struct Layer_Info *,struct Hook *);
*
*    FUNCTION
*	This function will install a backfill hook for the Layer_Info
*	structure passed.  This backfill hook will be used to clear the
*	background area where no layer exists.  The hook function is
*	passed the RastPort and the bounds just like the layer backfill
*	hook.  Note that this hook could be called for any layer.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*	hook -  pointer to layer callback Hook which will be called
*	        with object == (struct RastPort *) result->RastPort
*	        and message == [ (ULONG) undefined, (struct Rectangle) bounds ]
*
*	        This hook should fill the Rectangle in the RastPort
*	        with the BackFill pattern appropriate for rectangle given.
*
*	        If hook is LAYERS_BACKFILL, the default backfill is
*	        used.  (Same as pre-2.0)
*
*		If hook is LAYERS_NOBACKFILL, there will be no
*	        backfill.  (NO-OP).
*
*    RESULTS
*	oldhook - Returns the backfill hook that was in the Layer_Info.
*	          Returns LAYERS_BACKFILL if the default was installed.
*	          Returns LAYERS_NOBACKFILL if there was a NO-OP hook.
*	          Returns -1 if there was some failure.
*
*    EXAMPLE
*	See the example in InstallLayerHook.  Note that both the Layer
*	pointer and the OffsetX/Y values are not available in the
*	LayerInfo backfill hook.
*
*    NOTES
*	When the hook is first installed, it is *NOT* called.  It is up
*	to the application to know if it is safe to fill in the area.
*	Since the hook will be called when a layer is deleted, the easiest
*	way to have layers call this hook is to create and delete a backdrop
*	layer that is the size of the area.
*
*	Also, note that currently the first long word of the hook message
*	contains an undefined value.  This value may look like a layer pointer.
*	It is *not* a layer pointer.
*
*	The RastPort you are passed back is the same one passed to the
*	function.  You should *not* use "layered" rendering functions
*	on this RastPort.  Generally, you will wish to do BitMap operations
*	such as BltBitMap().  The callback is a raw, low-level rendering
*	call-back.  If you need to call a rendering operation with a
*	RastPort, make sure you use a copy of the RastPort and NULL the
*	Layer pointer.
*
*    SEE ALSO
*	InstallLayerHook
*
*******************************************************************************/
struct Hook * __asm InstallLayerInfoHook(register __a0 struct Layer_Info *li,register __a1 struct Hook *hook)
{
struct Hook *oldHook;

	oldHook=(struct Hook *)(-1);

	if (fatten_lock(li))
	{
		oldHook=li->BlankHook;
		li->BlankHook=hook;

		unlock_thin(li);
	}
	return(oldHook);
}
@


38.9
log
@Updated autodocs
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.8 92/03/03 17:54:13 mks Exp Locker: mks $
d122 9
d210 8
@


38.8
log
@More autodoc cleanup.
,
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.7 92/03/03 17:26:31 mks Exp Locker: mks $
d55 67
d172 1
a172 1
*	        with the BackFill pattern appropriate for offset x/y.
d185 5
@


38.7
log
@Cleaned up autodocs
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.6 91/11/18 18:37:33 mks Exp Locker: mks $
d102 1
a102 2
*	        and message == [ (ULONG) undefined, (struct Rectangle) bounds,
*	                         (LONG) offsetx, (LONG) offsety ]
d125 4
@


38.6
log
@Autodoc changes
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.5 91/11/18 13:53:17 mks Exp Locker: mks $
d38 1
a38 1
*	                       (WORD) offsetx, (WORD) offsety ]
d102 2
a103 2
*	        and message == [ NULL, (struct Rectangle) bounds,
*	                       (WORD) offsetx, (WORD) offsety ]
@


38.5
log
@Autodoc cleanup
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.4 91/11/18 13:25:48 mks Exp Locker: mks $
d43 2
a44 2
*	        If this hook pointer is NULL, the function installs
*	        the "default" Layers BackFill Hook into this Layer.
d46 3
a48 1
*		In V39, if hook is 1, no backfill hook will be installed.
d108 2
a109 2
*	        If hook is NULL, the default hook will be installed.
*		If hook is 1, a NO-OP hook will be installed
d111 3
d116 2
a117 2
*	          Returns NULL if the default was installed.
*	          Returns 1 if there was a NO-OP hook.
@


38.4
log
@Cleaned up the way hooks are installed into layers
Added the non-layer hook install routine
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.3 91/11/15 13:17:08 mks Exp Locker: mks $
d93 1
a93 2
*	hook.  However, the layer pointer is not passed as there is no
*	layer in the Layer_Info backfill.
@


38.3
log
@Changed install_backfill_hook to do the (1) hook.
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.2 91/08/02 10:20:08 mks Exp Locker: mks $
a9 5
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
a10 2
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
d12 1
a12 1
#include <graphics/rastport.h>
d16 1
a16 14
ULONG __stdargs CallBackFillHook(struct Hook *hook,VOID *object,struct Layer *layer,struct Rectangle bounds,WORD x,WORD y)
{
	if (hook)
	{
		return( CallHookPkt( hook, object, &layer) );
	}
	else
	{
		return( NULL );
	}
}


/****** layers.library/InstallLayerHook ****************************************
d18 2
a19 2
*    NAME                                                              (V36)
*	InstallLayerHook -- safely install a new Layer->BackFill hook.
d64 1
a64 1
	if( layer )
d66 1
a66 1
		LockLayerRom( layer );
d69 7
d77 53
a129 2
		if (!old_hook) old_hook=(struct Hook *)1;
		if (old_hook==&(LAYERSBASE->BackFillHook)) old_hook=NULL;
d131 1
a131 2
		if (!hook) hook=&(LAYERSBASE->BackFillHook);
		if (hook==(struct Hook *)1) hook=NULL;
d133 4
a136 1
		layer->BackFill = hook;
d138 1
a138 1
		UnlockLayerRom( layer );
d140 1
a140 2

	return( old_hook );
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: hook.c,v 38.1 91/07/25 09:55:07 bart Exp $
d66 2
d70 2
a71 1
*	          active.
d88 7
a94 1
		old_hook = layer->BackFill;
d96 1
a96 13
		if (old_hook == &(LAYERSBASE->BackFillHook))
		{
			old_hook = NULL;
		}

		if(hook)
		{
			layer->BackFill = hook;
		}
		else
		{
			layer->BackFill = &(LAYERSBASE->BackFillHook);
		}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: hook.c,v 36.12 91/02/22 15:00:00 mks Exp $
d7 2
d23 3
a25 8
/*#define DEBUG*/

extern struct LayersBase *FetchLayersBase();
extern int hookEntry();
extern int HookFill();

init_backfill_hook( hook )
	struct Hook	*hook;
d27 1
a27 3
	hook->h_Entry = (ULONG *())hookEntry;
	hook->h_SubEntry = (ULONG *())HookFill;
	hook->h_Data = (VOID *) FetchLayersBase();
d29 1
a29 9


CallBackFillHook( hook, object, layer, bounds, x, y )
	struct Hook 	 *hook;
	VOID		 *object;
	struct Layer     *layer;
	struct Rectangle  bounds;
	WORD		  x;
	WORD		  y;
a30 6
	if (hook)
		{
		return( CallHookPkt( hook, object, &layer) );
		}
	else
		{
a31 1
		}
d33 1
d77 3
a79 6
struct Hook *install_backfill_hook( layer, hook )
	struct Layer	*layer;
	struct Hook	*hook;
	{
	struct Hook *old_hook = NULL;
	struct LayersBase *LB = FetchLayersBase();
d82 1
a82 1
		{
d87 2
a88 2
		if (old_hook == &LB->BackFillHook)
			{
d90 1
a90 1
			}
d93 1
a93 1
			{
d95 1
a95 1
			}
d97 3
a99 3
			{
			layer->BackFill = &LB->BackFillHook;
			}
d102 1
a102 1
		}
d104 2
a105 2
		return( old_hook );
	}
@
