head     38.13;
branch   ;
access   ;
symbols  V40_1:38.13 V39_62:38.13 V39_61:38.13 V39_60:38.13 V39_58:38.13 V39_56:38.13 V39_55:38.13 V39_54:38.13 V39_53:38.13 V39_52:38.13 V39_51:38.13 V39_50:38.13 V39_49:38.13 V39_48:38.13 V39_46:38.13 V39_45:38.13 V39_44:38.13 V39_42:38.13 V39_41:38.13 V39_40:38.13 V39_39:38.13 V39_38:38.12 V39_37:38.12 V39_36:38.11 V39_35:38.10 V39_34:38.10 V39_33:38.10 V39_32:38.10 V39_30:38.9 V39_28:38.9 V39_27:38.9 V39_26:38.9 V39_25:38.9 V39_24:38.9 V39_23:38.9 V39_22:38.9 V39_21:38.9 V39_20:38.9 V39_18:38.8 V39_16:38.8 V39_15:38.8 V39_14:38.8 V39_12:38.8 V39_10:38.8 V38_7:38.4 V38_6:38.4 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.13
date     92.01.10.18.03.15;  author mks;  state Exp;
branches ;
next     38.12;

38.12
date     92.01.10.09.47.13;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     91.12.31.19.43.21;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     91.11.19.13.55.24;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     91.10.29.13.05.45;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     91.10.04.15.48.40;  author bart;  state Exp;
branches ;
next     38.7;

38.7
date     91.09.27.15.03.53;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.09.27.13.11.22;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.30.11.29.04;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.27.14.13.24;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.16.08.31.31;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.19.46;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.54.58;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.13
log
@Now fully obsolete.  All work is done in dedicer.asm
@
text
@/******************************************************************************
*
*	$Id: dedice.c,v 38.12 92/01/10 09:47:13 mks Exp Locker: mks $
*
******************************************************************************/

Obsolete!!!
@


38.12
log
@New!  Optimal dedice all the time
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.11 91/12/31 19:43:21 mks Exp Locker: mks $
d7 1
a7 351
#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <graphics/layers.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>

#include "layersbase.h"

BOOL preunslice_and_dice(struct Layer *l,struct ClipRect *cr,struct ClipRect *cr2,struct Rectangle *temp)
{
struct ClipRect *newop;
struct Layer_Info *li = l->LayerInfo;
BOOL got_rasters;

	if (!(newop = (struct ClipRect *)AllocCR(0))) return(FALSE);

	newop->bounds = *temp;
	newop->lobs = cr->lobs;

	if (cr->BitMap)
	{
		l->LayerInfo = 0;
		got_rasters = get_concealed_rasters(l,newop);
		l->LayerInfo = li;

		if (!got_rasters)
		{
			Freecr(newop);
			return(FALSE);
		}
	}

	l->crnew = newop;	/* Ok, we worked! */
	l->cr = cr;
	l->cr2 = cr2;
	return(TRUE);
}

/*
 * This does the unslice but keeps the cliprects sorted...
 * Thus, the new cliprect is installed into the list where the
 * first of the old cliprects were...
 */
void unslice_and_dice(struct Layer *l)
{
register struct ClipRect *newop;
register struct ClipRect *tmp;

	/*
	 * find where we will insert this one and
	 * remove the old cliprect l->cr...  (We do l->cr2 later)
	 * Nice find by Bart:  Use the fact we know where l->cr is at...
	 */
	tmp=(struct ClipRect *)&(l->ClipRect);
	newop=l->cr;
	while (tmp->Next != newop) tmp=tmp->Next;
	tmp->Next=newop->Next;

	/*
	 * Build the new one from the old ones...
	 */
	newop=l->crnew;
	if (newop->BitMap)
	{
		copyrect(l->cr,newop);
		copyrect(l->cr2,newop);
	}

	/*
	 * Now, install the new cliprect...
	 */
	newop->Next=tmp->Next;
	tmp->Next=newop;

	/*
	 * Remove the other cliprect from list...
	 */
	tmp=l->cr2;
	while (newop->Next != tmp) newop=newop->Next;
	newop->Next=tmp->Next;

	/*
	 * Free the old cliprects...
	 */
	Freecr(l->cr);
	WaitBlit();	/* Needed since we might still be blitting the data */
	Freecr(l->cr2);
}

/*
 * This is now called from the assembly code dedice() function.
 * The register layout makes the dedice() function small and fast...
 *
 * This routine returns the number of cliprects removed from the
 * stack...
 */
ULONG __stdargs __asm unslice(register __a3 struct ClipRect *cr,register __a1 struct ClipRect *cr2,register __a0 struct Rectangle *both)
{
register struct ClipRect *mycr;
register struct ClipRect *mycr2;
register struct Layer *l;
register ULONG clipcount=0;

	/*
	 * Now, go though all of the layers and unslice the ones
	 * that need it...  (At least get the data/memory for the work)
	 */
	mycr=cr;
	mycr2=cr2;
	while (mycr)
	{
		l=(struct Layer *)(mycr->_p2);
		if (!preunslice_and_dice(l,mycr,mycr2,both))
		{
			/*
			 * Oops, we ran out of memory
			 * Free up what we got already...
			 */
			while (cr!=mycr)
			{
				l=(struct Layer *)(cr->_p2);
				Freecr(l->crnew);
				cr=(struct ClipRect *)(cr->_p1);
			}
			cr=NULL;	/* We bail! */
			mycr=NULL;
		}
		else
		{
			mycr=(struct ClipRect *)(mycr->_p1);
			mycr2=(struct ClipRect *)(mycr2->_p1);
		}
	}

	/*
	 * Now, go through all of the layers and unslice the ones
	 * that have the data structures set up.  If we had bailed
	 * out above, cr will be NULL...
	 */
	while (cr)
	{
		clipcount++;

		/*
		 * Get the layer...
		 */
		l=(struct Layer *)(cr->_p2);

		/*
		 * Get next cliprect before we call
		 * unslice since unslice will free this one
		 */
		cr=(struct ClipRect *)(cr->_p1);
		unslice_and_dice(l);
	}

	/*
	 * This is NULL if we did nothing...
	 */
	return(clipcount);
}

/**********
 *
 * Code for the optimal dedice method:  misaligned lateral pairs
 *
 **********/

BOOL preunslice_and_dice2(struct Layer *l,struct ClipRect *cr,struct ClipRect *cr2,struct Rectangle *temp)
{
struct ClipRect *newop;
struct ClipRect *newop2;
struct Layer_Info *li = l->LayerInfo;
BOOL got_rasters;

	if (!(newop = AllocCR(0))) return(FALSE);
	if (!(newop2= AllocCR(0)))
	{
		Freecr(newop);
		return(FALSE);
	}

	newop->bounds = temp[0];
	newop->lobs = cr->lobs;

	newop2->bounds = temp[1];
	newop2->lobs = cr->lobs;

	newop2->Next=NULL;
	newop->Next=newop2;

	if (cr->BitMap)
	{
		l->LayerInfo = 0;
		got_rasters = get_concealed_rasters(l,newop) & get_concealed_rasters(l,newop2);
		l->LayerInfo = li;

		if (!got_rasters)
		{
			Freecr(newop);
			Freecr(newop2);
			return(FALSE);
		}
	}

	l->crnew = newop;	/* Ok, we worked! */
	l->cr = cr;
	l->cr2 = cr2;
	return(TRUE);
}

/*
 * This does the unslice but keeps the cliprects sorted...
 * Thus, the new cliprect is installed into the list where the
 * first of the old cliprects were...
 */
void unslice_and_dice2(struct Layer *l)
{
register struct ClipRect *newop;
register struct ClipRect *newop2;
register struct ClipRect *tmp;

	/*
	 * find where we will insert this one and
	 * remove the old cliprect l->cr...  (We do l->cr2 later)
	 * Nice find by Bart:  Use the fact we know where l->cr is at...
	 */
	tmp=(struct ClipRect *)&(l->ClipRect);
	newop=l->cr;
	while (tmp->Next != newop) tmp=tmp->Next;
	tmp->Next=newop->Next;

	/*
	 * Build the new one from the old ones...
	 */
	newop=l->crnew;
	newop2=newop->Next;

	if (newop->BitMap)
	{
		/* Must sub cliprects first so the waitblit is best... */
		copyrect(l->cr,newop2);
		copyrect(l->cr2,newop2);

		copyrect(l->cr,newop);
		copyrect(l->cr2,newop);
	}

	/*
	 * Now, install the new cliprect...
	 */
	newop->Next=tmp->Next;
	tmp->Next=newop;

	/*
	 * Remove the other cliprect from list...
	 */
	tmp=l->cr2;
	while (newop->Next != tmp) newop=newop->Next;
	newop->Next=tmp->Next;

	/*
	 * Link in the new sub cliprect at the right spot
	 * so we stay sorted...
	 */
	sortlinkcr(l,newop2);

	/*
	 * Free the old cliprects...
	 */
	l->cr->Next=l->cr2;
	l->cr2->Next=NULL;
	Freecrlist(l->cr);
}

/*
 * This routine is much like unslice but it is called with
 * latteral cliprects that do not line up at the bottom.  The
 * rectangle structure contains passed in contains two
 * rectangles needed to make the new cliprects...
 */
ULONG __stdargs __asm unslice2(register __a3 struct ClipRect *cr,register __a1 struct ClipRect *cr2,register __a0 struct Rectangle *both)
{
register struct ClipRect *mycr;
register struct ClipRect *mycr2;
register struct Layer *l;
register ULONG clipcount=0;

	/*
	 * Now, go though all of the layers and unslice the ones
	 * that need it...  (At least get the data/memory for the work)
	 */
	mycr=cr;
	mycr2=cr2;
	while (mycr)
	{
		l=(struct Layer *)(mycr->_p2);
		if (!preunslice_and_dice2(l,mycr,mycr2,both))
		{
			/*
			 * Oops, we ran out of memory
			 * Free up what we got already...
			 */
			while (cr!=mycr)
			{
				l=(struct Layer *)(cr->_p2);
				Freecrlist(l->crnew);
				cr=(struct ClipRect *)(cr->_p1);
			}
			cr=NULL;	/* We bail! */
			mycr=NULL;
		}
		else
		{
			mycr=(struct ClipRect *)(mycr->_p1);
			mycr2=(struct ClipRect *)(mycr2->_p1);
		}
	}

	/*
	 * Now, go through all of the layers and unslice the ones
	 * that have the data structures set up.  If we had bailed
	 * out above, cr will be NULL...
	 */
	while (cr)
	{
		clipcount++;

		/*
		 * Get the layer...
		 */
		l=(struct Layer *)(cr->_p2);

		/*
		 * Get next cliprect before we call
		 * unslice since unslice will free this one
		 */
		cr=(struct ClipRect *)(cr->_p1);
		unslice_and_dice2(l);
	}

	/*
	 * This is NULL if we did nothing...
	 */
	return(clipcount);
}
@


38.11
log
@unslice now counts the cliprects it removes...
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.10 91/11/19 13:55:24 mks Exp Locker: mks $
d169 185
a353 1
	 * Now, return the number of cliprects removed.
@


38.10
log
@Finally found that last low-memory problem!
By-george, I think I've got it!!!
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.9 91/10/29 13:05:45 mks Exp Locker: mks $
d104 3
d113 1
a114 1

d151 1
a151 2
	mycr=cr;
	while (mycr)
d153 2
d158 1
a158 1
		l=(struct Layer *)(mycr->_p2);
d164 1
a164 1
		mycr=(struct ClipRect *)(mycr->_p1);
d169 2
a170 1
	 * Now, return non-NULL if we did the unslice...
d172 1
a172 1
	return((ULONG)cr);
@


38.9
log
@Now uses the fact that the cliprects that are going to be dedices are
vertically linked.  Much faster now.
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.8 91/10/04 15:48:40 bart Exp Locker: mks $
d26 2
a27 3
	newop = (struct ClipRect *)AllocCR(0);
	if (!newop)	return(FALSE);
	l->crnew = newop;
d43 2
d73 1
a73 1
	newop = l->crnew;
d134 1
@


38.8
log
@minor byte savings
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.7 91/09/27 15:03:53 mks Exp Locker: bart $
d20 1
a20 1
BOOL preunslice_and_dice(struct Layer *l,struct ClipRect *cr,struct ClipRect *cr2,struct Rectangle temp)
d29 1
a29 1
	newop->bounds = temp;
d104 1
a104 1
ULONG __stdargs __asm unslice(register __a4 struct Layer *top,register __a2 struct Layer *thisl,register __a3 struct ClipRect *cr,register __a1 struct ClipRect *cr2)
a108 1
struct Rectangle temp;
a111 15
	 * Now produce bounds that are the combination of cr and cr2
	 *
	 * Since they are ordered, we just need MIN from cr and MAX from cr2
	 */
	temp.MinX=cr->bounds.MinX;
	temp.MinY=cr->bounds.MinY;
	temp.MaxX=cr2->bounds.MaxX;
	temp.MaxY=cr2->bounds.MaxY;

	/*
	 * First, clear out all of the l->cr fields...
	 */
	for (l=top;l;l=l->back) l->cr=NULL;

	/*
d115 3
a117 2
	l=top->back;
	while (l)
d119 2
a120 14
		/*
		 * Now, check if the layer needs to be dediced...
		 * to do this, we check if we are the same layer
		 * of, if not, if the layer intersects the area.
		 * If it intersects the area, we do a cliprect search
		 * to determine the need...
		 */
		mycr=NULL;
		if (l == thisl)
		{
			mycr=cr;
			mycr2=cr2;
		}
		else if (rectXrect(&(l->bounds),&temp))
d123 2
a124 9
			 * Ok, so we have a possible cliprect here
			 * so look for them...
			 *
			 * In fact, we will always find these except
			 * in the layer that is topmost.  In that one
			 * layer, we will never find these.  The
			 * intersection test above and the fact that
			 * the dedice has been verified provides this
			 * as a known fact.
d126 1
a126 1
			if (mycr=search_next_cr((struct ClipRect *)&(l->ClipRect),&(cr->bounds)))
d128 3
a130 5
				/*
				 * Now, look for the next cliprect starting
				 * at the first one...
				 */
				mycr2=search_next_cr(mycr,&(cr2->bounds));
d132 1
d134 1
a134 6

		/*
		 * So, if we got a cliprect, we know we have to
		 * do some work...
		 */
		if (mycr) if (!preunslice_and_dice(l,mycr,mycr2,temp))
d136 2
a137 10
			/*
			 * Oops, we ran out of memory and can
			 * not do the dedice!
			 */
			while (l)
			{
				if (l->cr) Freecr(l->crnew);
				l->cr=NULL;
				l=l->front;
			}
a138 5

		/*
		 * If we still have a layer, contine the search
		 */
		if (l) l=l->back;
d144 1
a144 1
	 * out above, none of them will be set up...
d146 15
a160 1
	for (l=top;l;l=l->back) if (l->cr) unslice_and_dice(l);
d165 1
a165 1
	return((ULONG)(thisl->cr));
@


38.7
log
@Removed the last call to unlinkcr() here in dedice.
Since dedice has special understanding of how the cliprects
are ordered, it gets to be much faster this way.
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.6 91/09/27 13:11:22 mks Exp Locker: mks $
d24 1
d31 1
a31 1
	l->LayerInfo = 0;
d34 5
a38 1
		if (!(get_concealed_rasters(l,newop)))
a39 1
			l->LayerInfo = li;
a43 1
	l->LayerInfo = li;
@


38.6
log
@Implemented the code/speed saving line that Bart found in
unslice_and_dice()
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.5 91/08/30 11:29:04 mks Exp Locker: mks $
d57 3
a59 1
	 * find where we will insert this one...
d64 1
a66 7
	 * remove the old cliprects...
	 */
	/* Nice find by Bart:  Use the fact we know where l->cr is */
	tmp->Next=l->cr->Next;
	unlinkcr(l,l->cr2);

	/*
d81 7
@


38.5
log
@No longer does a test to see which cliprect side is merging
since it is always the same top/left to bottom/right connection.
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.4 91/08/27 14:13:24 mks Exp Locker: mks $
d66 2
a67 1
	unlinkcr(l,l->cr);
@


38.4
log
@Major reworking of the dedice() routine.  In fact, the rather
simple base routine is now in search_for_cr.asm.  (It was
less lines of assembly than C code!!!)
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.3 91/08/16 08:31:31 mks Exp Locker: mks $
d97 1
a97 1
ULONG __stdargs __asm unslice(register __a4 struct Layer *top,register __a2 struct Layer *thisl,register __a3 struct ClipRect *cr,register __a1 struct ClipRect *cr2,register __d0 BOOL side)
a103 1
	temp = cr->bounds;
d106 3
a108 3
	 * Now determin which side:
	 * side=TRUE  (<cr2> is below <cr>)
	 * side=FALSE (<cr2> is right of <cr>)
d110 4
a113 2
	if (side) temp.MaxY = cr2->bounds.MaxY;
	else temp.MaxX = cr2->bounds.MaxX;
@


38.3
log
@Moved the search_obs_cr into the file with search_for_cr
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.2 91/08/02 10:19:46 mks Exp Locker: mks $
d46 5
d53 9
a61 1
struct ClipRect *newop;
d63 3
d68 4
d78 10
a87 1
	linkcr(l,newop);
d89 1
a89 1
	WaitBlit();
d93 5
a97 1
BOOL verify_dedice(struct Layer *thisl,struct ClipRect *cr,struct ClipRect *cr2)
d99 6
a104 1
struct Layer *l;
d106 18
a123 1
	l = thisl->LayerInfo->top_layer->back;
d126 9
a134 1
		if (l != thisl)
d136 2
a137 5
			if (search_obs_cr(l,&cr->bounds))
			{
				if (search_obs_cr(l,&cr2->bounds)==0) return(FALSE);
			}
			else if (search_obs_cr(l,&cr2->bounds)) return(FALSE);
d139 1
a139 30
		l = l->back;
	}
	return(TRUE);
}

BOOL unslice(struct Layer *thisl,struct ClipRect *cr,struct ClipRect *cr2,long side)
{
struct Rectangle temp,bounds_cr2;
struct Rectangle bounds_cr;
struct Layer *l;

	/* must verify thid dice pair */
	/*if (!verify_dedice(thisl,cr,cr2))	return(FALSE);*/

	temp = cr->bounds;
	bounds_cr = temp;
	bounds_cr2 = cr2->bounds;

	switch (side)
	{
		case 0:	temp.MinY = cr2->bounds.MinY;	break;
		case 1:	temp.MaxY = cr2->bounds.MaxY;	break;
		case 2:	temp.MinX = cr2->bounds.MinX;	break;
		case 3:	temp.MaxX = cr2->bounds.MaxX;	break;
	}

	thisl->cr = 0;
	if (!preunslice_and_dice(thisl,cr,cr2,temp)) return(FALSE);
	for (l = thisl->LayerInfo->top_layer->back; l ; l = l->back)	/* look at whole list */
		if (l != thisl)
d141 12
a152 2
			l->cr = 0;
			if (cr = search_obs_cr(l,&bounds_cr))
d154 5
a158 18
			    /* if there is 1 there must be the second */
			    /* NO !!! , there MAY be a second -- bart */

			    if( cr2 = search_for_cr(l,&bounds_cr2) )
			    {
				if (!(preunslice_and_dice(l,cr,cr2,temp)))
				{
					struct Layer *l2;
					/* backup some */
					Freecr(thisl->crnew);
					thisl->cr = 0;
					for (l2 = thisl->LayerInfo->top_layer->back; l != l2 ; l2 = l2->back)
					{
						if (l2->cr)	Freecr(l2->crnew);
					}
					return(FALSE);
				}
			    }
a160 15
	for (l = thisl->LayerInfo->top_layer->back; l ; l = l->back)	/* look at whole list */
	{
		if (l->cr)	unslice_and_dice(l);
	}
	return(TRUE);
}

/*  all layers are assumed to be locked */
/*  also, caller has stripped the onscreen cliprects away already */
BOOL dedice(struct Layer_Info *li)
{
struct Layer *l;
struct ClipRect *cr,*cr2;
int	side;
BOOL	something_changed = FALSE;
d162 5
a166 6
	l = li->top_layer;
	if (!l)	return(FALSE);	/* no layers to dedice */
	for (l = l->back; l ; l = l->back)	/* skip top layer! */
	{
restart:
		for (cr = l->ClipRect; cr ; cr = cr->Next)
d168 5
a172 3
			/* new code insures that cr->lobs is != 0 */
			/* For all layers in this list */
			for (cr2 = cr->Next; cr2 ; cr2 = cr2->Next)
d174 3
a176 39
				if (cr2->lobs == cr->lobs)	/* same layer obscuring these?*/
				{
					side = -1;
					/* check all 4 sides of cr to see if this one fits */
					if ( (cr->bounds.MinX == cr2->bounds.MinX) &&
						 (cr->bounds.MaxX == cr2->bounds.MaxX) )
					{	/* vertical match are they really adjacent? */
						if ( cr->bounds.MinY == (SHORT)(cr2->bounds.MaxY+1))
						{	/* a real match above */
							side = 0;
						}
						else
						if ( cr->bounds.MaxY == (SHORT)(cr2->bounds.MinY-1))
						{	/* another match below */
							side = 1;
						}
					}
					else
					if ( (cr->bounds.MinY == cr2->bounds.MinY) &&
						 (cr->bounds.MaxY == cr2->bounds.MaxY) )
					{	/* horizontal match are they really adjacent? */
						if ( cr->bounds.MinX == (SHORT)(cr2->bounds.MaxX+1))
						{	/* a real match left */
							side = 2;
						}
						else
						if ( cr->bounds.MaxX == (SHORT)(cr2->bounds.MinX-1))
						{	/* another match right */
							side = 3;
						}
					}
					if (side >= 0)
						if (verify_dedice(l,cr,cr2))
							if (unslice(l,cr,cr2,side))
							{
								something_changed = 1;
								 goto restart;
							}
				}
d179 5
d185 12
a196 1
	return (something_changed);
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 38.1 91/07/25 09:54:58 bart Exp $
a18 10

struct ClipRect *search_obs_cr(struct Layer *l,struct Rectangle *r)
{
	/* this routine is used by tomiddle */
struct ClipRect *cr;

	if (cr = search_for_cr(l,r))
		if (cr->lobs == 0)	cr = 0;
	return(cr);
}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: dedice.c,v 1.6 91/01/25 10:14:22 bart Exp $
d7 2
d18 1
a18 7
/* #define DEBUG */

#define printf kprintf

#define copyrect2 copyrect

struct ClipRect *search_for_cr();
d20 1
a20 3
struct ClipRect *search_obs_cr(l,r)
struct Layer *l;
struct Rectangle *r;
d23 2
a24 1
	struct ClipRect *cr;
d30 25
d56 1
a56 4
/*  all layers are assumed to be locked */
/*  also, caller has stripped the onscreen cliprects away already */
dedice(li)
struct Layer_Info *li;
d58 15
a72 4
	struct Layer *l;
	struct ClipRect *cr,*cr2;
	int	side;
	int	something_changed = 0;
d74 3
a76 3
#ifdef DEBUG
	printf("dedice(%lx)\n",li);
#endif
d78 2
a79 3
	l = li->top_layer;
	if (!l)	return;	/* no layers to dedice */
	for (l = l->back; l ; l = l->back)	/* skip top layer! */
d81 1
a81 5
restart:
#ifdef DEBUG
	printf("doing layer:%lx\n",l);
#endif
		for (cr = l->ClipRect; cr ; cr = cr->Next)
d83 1
a83 13
#ifdef DEBUG
			printf(" cr=%lx\n",cr);
#endif
			/* new code insures that cr->lobs is != 0 */
#ifdef DEBUG
			if (cr->lobs == 0)
			{
				printf("error in dedice\n");
				Debug();
			}
#endif
			/* For all layers in this list */
			for (cr2 = cr->Next; cr2 ; cr2 = cr2->Next)
d85 1
a85 42
#ifdef DEBUG
				printf("cr2 = %lx\n",cr2);
#endif
				if (cr2->lobs == cr->lobs)	/* same layer obscuring these?*/
				{
					side = -1;
					/* check all 4 sides of cr to see if this one fits */
					if ( (cr->bounds.MinX == cr2->bounds.MinX) &&
						 (cr->bounds.MaxX == cr2->bounds.MaxX) )
					{	/* vertical match are they really adjacent? */
						if ( cr->bounds.MinY == (SHORT)(cr2->bounds.MaxY+1))
						{	/* a real match above */
							side = 0;
						}
						else
						if ( cr->bounds.MaxY == (SHORT)(cr2->bounds.MinY-1))
						{	/* another match below */
							side = 1;
						}
					}
					else
					if ( (cr->bounds.MinY == cr2->bounds.MinY) &&
						 (cr->bounds.MaxY == cr2->bounds.MaxY) )
					{	/* horizontal match are they really adjacent? */
						if ( cr->bounds.MinX == (SHORT)(cr2->bounds.MaxX+1))
						{	/* a real match left */
							side = 2;
						}
						else
						if ( cr->bounds.MaxX == (SHORT)(cr2->bounds.MinX-1))
						{	/* another match right */
							side = 3;
						}
					}
					if (side >= 0)
						if (verify_dedice(l,cr,cr2))
							if (unslice(l,cr,cr2,side))
							{
								something_changed = 1;
								 goto restart;
							}
				}
d87 1
d89 1
d91 1
a91 4
#ifdef DEBUG
	printf("dediceend\n");
#endif
	return (something_changed);
d94 1
a94 4
unslice(thisl,cr,cr2,side)
struct Layer *thisl;
struct ClipRect *cr,*cr2;
int side;
d96 3
a98 4
	struct Rectangle temp,bounds_cr2;
	struct Rectangle bounds_cr;
	struct Layer *obs;
	struct Layer *l;
a99 3
#ifdef DEBUG
	printf("deslice");
#endif
a101 3
#ifdef DEBUG
	printf("(%lx,%lx,%lx,%ld)\n",thisl,cr,cr2,side);
#endif
a105 1
	obs = cr->lobs;
a106 11
	/* this compiler generates brain damage here */
#define BRAINDAMAGED_SWITCH
#ifdef BRAINDAMAGED_SWITCH
		if (--side < 0)	/* case 0 */
			temp.MinY = cr2->bounds.MinY;
		else if (--side < 0)	/* case 1 */
			temp.MaxY = cr2->bounds.MaxY;
		else if (--side < 0)	/* case 2 */
			temp.MinX = cr2->bounds.MinX;
		else	temp.MaxX = cr2->bounds.MaxX;
#else
d114 1
a114 1
#endif
a131 3
#ifdef DEBUG
					printf("abort dedice\n");
#endif
a137 3
#ifdef DEBUG
	printf("unslice aborting\n");
#endif
d149 5
a153 1
preunslice_and_dice(l,cr,cr2,temp)
d156 2
a157 30
struct Rectangle temp;
{
	struct ClipRect *newop;
	struct Layer_Info *li = l->LayerInfo;
	newop = (struct ClipRect *)AllocCR(0);
	if (!newop)	return(FALSE);
	l->crnew = newop;
	newop->bounds = temp;
	newop->lobs = cr->lobs;
	l->LayerInfo = 0;
	if (cr->BitMap)
	{
#ifdef DEBUG
		printf("get concealed raster\n");
#endif
		if (!(get_concealed_rasters(l,newop)))
		{
			l->LayerInfo = li;
			Freecr(newop);
			return(FALSE);
		}
	}
	l->LayerInfo = li;
	l->cr = cr;
	l->cr2 = cr2;
#ifdef DEBUG
	printf("preslice ok\n");
#endif
	return(TRUE);
}
d159 3
a161 8
unslice_and_dice(l)
struct Layer *l;
{
	struct ClipRect *newop;
	unlinkcr(l,l->cr);
	unlinkcr(l,l->cr2);
	newop = l->crnew;
	if (newop->BitMap)
d163 2
a164 19
		copyrect2(l->cr,newop);
		copyrect2(l->cr2,newop);
	}
	linkcr(l,newop);
	Freecr(l->cr);
	WaitBlit();
	Freecr(l->cr2);
}

verify_dedice(thisl,cr,cr2)
struct Layer *thisl;
struct ClipRect *cr,*cr2;
{
	struct ClipRect *crtest;
	struct Layer *l;
	l = thisl->LayerInfo->top_layer->back;
	while (l)
	{
		if (l != thisl)
d166 3
a168 1
			if (search_obs_cr(l,&cr->bounds))
d170 39
a208 1
				if (search_obs_cr(l,&cr2->bounds)==0)	return (FALSE);
a209 2
			else
				if (search_obs_cr(l,&cr2->bounds)) return(FALSE);
a210 1
		l = l->back;
d212 1
a212 1
	return(TRUE);
@
