head     38.20;
branch   ;
access   ;
symbols  V40_1:38.20 V39_62:38.20 V39_61:38.20 V39_60:38.20 V39_58:38.20 V39_56:38.20 V39_55:38.18 V39_54:38.18 V39_53:38.18 V39_52:38.18 V39_51:38.18 V39_50:38.18 V39_49:38.18 V39_48:38.18 V39_46:38.18 V39_45:38.18 V39_44:38.17 V39_42:38.16 V39_41:38.15 V39_40:38.15 V39_39:38.15 V39_38:38.15 V39_37:38.15 V39_36:38.15 V39_35:38.15 V39_34:38.15 V39_33:38.15 V39_32:38.14 V39_30:38.12 V39_28:38.9 V39_27:38.9 V39_26:38.9 V39_25:38.9 V39_24:38.9 V39_23:38.8 V39_22:38.8 V39_21:38.8 V39_20:38.8 V39_18:38.8 V39_16:38.8 V39_15:38.8 V39_14:38.8 V39_12:38.8 V39_10:38.8 V38_7:38.6 V38_6:38.6 First_Native_Build:38.4;
locks    ; strict;
comment  @ * @;


38.20
date     92.04.22.08.56.20;  author mks;  state Exp;
branches ;
next     38.19;

38.19
date     92.04.14.16.39.07;  author mks;  state Exp;
branches ;
next     38.18;

38.18
date     92.03.03.17.25.15;  author mks;  state Exp;
branches ;
next     38.17;

38.17
date     92.02.24.19.45.02;  author mks;  state Exp;
branches ;
next     38.16;

38.16
date     92.02.12.14.41.57;  author mks;  state Exp;
branches ;
next     38.15;

38.15
date     91.11.20.12.30.30;  author mks;  state Exp;
branches ;
next     38.14;

38.14
date     91.11.19.12.51.46;  author mks;  state Exp;
branches ;
next     38.13;

38.13
date     91.11.18.18.37.21;  author mks;  state Exp;
branches ;
next     38.12;

38.12
date     91.11.18.13.27.20;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     91.11.15.20.23.29;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     91.11.15.12.12.17;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     91.11.08.13.10.52;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     91.10.04.15.49.50;  author bart;  state Exp;
branches ;
next     38.7;

38.7
date     91.10.03.16.03.24;  author bart;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.12.15.32.52;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.05.20.20.06;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.02.10.21.41;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.07.25.16.57.42;  author bart;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.25.16.49.14;  author bart;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.58;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.20
log
@Updated autodocs
@
text
@/******************************************************************************
*
*	$Id: newlayer.c,v 38.19 92/04/14 16:39:07 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>

#include "layersbase.h"

void addrect(struct Rectangle *r,struct Layer *lp)
{
struct ClipRect *op;
struct Layer_Info *wi = lp->LayerInfo;

	for (op = wi->obs; op; op = op->Next)
	{
		/* compare both MinX/Y in one test: save space, time... bart */
		if( *((ULONG *)(&op->bounds.MinX)) == *((ULONG *)(&r->MinX)) ) return;
	}

	op = AllocCR(lp->LayerInfo);
	op->bounds = *r;
	op->lobs = lp;
	/* put on list */
	op->Next = wi->obs;
	wi->obs = op;
}

void __stdargs addpiece(struct Layer *lp,struct Rectangle *r,struct Layer_Info *wi)
{
	addrect(r,wi->check_lp);
}

void __stdargs myaddpiece(struct Layer *lp,struct Rectangle *r,struct Layer_Info *wi)
{
struct	ClipRect	*op;

	op = lp->SuperSaveClipRects;
	lp->SuperSaveClipRects = op->Next;
	op->BitMap = 0;
	op->lobs = 0;
	op->bounds = *r;
	/* put on list */
	op->Next = lp->SuperClipRect;
	lp->SuperClipRect = op;
}

/* flags&LAYERSIMPLE --> this window can handle its own refresh if uncovered */
/* flags&LAYERSUPER --> this window has another BitMap to use for SuperBitMap */

void newlayer(struct Layer *newlp)
{
struct Layer_Info *wi=newlp->LayerInfo;
struct LayerInfo_extra *old_lie=wi->LayerInfo_extra;
struct LayerInfo_extra new_lie;
struct ClipRect *crob;  /* obscured ClipRects */
struct Layer *lp;
struct ClipRect *cr_deletelist;
struct ClipRect **crp;  /* let's speed this baby up a bit... bart */

	wi->obs = NULL;

	wi->LayerInfo_extra = &new_lie;
	if (aborted(wi))
	{	/* list is now completely mangled */
		/* attempt to restore damaged cliprects */
	    	for (lp = wi->top_layer ; lp ; lp = lp->back)
		{
			lp->ClipRect = lp->_cliprects;
            for (crob = lp->_cliprects ; crob ; crob = crob->prev)
                crob->Next = crob->prev;

		}
		wi->LayerInfo_extra = old_lie;
		abort(wi);
	}

	/* make a copy of the original list for error recovery*/
	for (lp = wi->top_layer ; lp ; lp = lp->back)
	{
		lp->_cliprects = lp->ClipRect;	/* save head */
		for (crob = lp->ClipRect ; crob ; crob = crob->Next)
		{
			crob->prev = crob->Next;	/* copy state of list */
		}
	}

	cr_deletelist = 0;

	for (lp = wi->top_layer ; lp ; lp = lp->back)
	{
	    for (crp = &lp->ClipRect ; crob = *crp; )
	    {
		if (crob->lobs)
		{
		    if (rectXrect(&newlp->bounds,&crob->bounds) &&
		    addobs(crob,&crob->bounds,&newlp->bounds,lp) )
		    {
			    /* unlink op from lp->obs */
			    *crp = crob->Next;

			    /* attach Cliprect to single savecliprect list */
			    crob->Next = cr_deletelist;
			    cr_deletelist = crob;
			    continue;
		    }
		}
		crp = (struct ClipRect **)*crp;
	    }
	}

	/* now add rectangles ClipRects for newlp */
	newlp->ClipRect = wi->obs;
	for(lp = wi->top_layer; lp ; lp = lp->back)
	{
	   	wi->check_lp = lp;
	   	layerop(newlp,addpiece,&lp->bounds,wi);
	}

	newlp->ClipRect = wi->obs;

	/* allocate offscreen buffers */
	if (!(newlp->Flags & LAYERSIMPLE))
	{
	struct RastPort myRP;

		InitRastPort(&myRP);

		for (crob=newlp->ClipRect;crob;crob=crob->Next)
		{
	    		if ((crob->lobs) && (!(crob->BitMap)))
	    		{
				get_concealed_rasters(newlp,crob);

				/*
				 * This code is here for
				 * visual reasons only.  It does
				 * not change the way layers
				 * works other than remove a flash
				 * from the display.
				 */
				myRP.BitMap=crob->BitMap;
				SetRast(&myRP,0);
	    		}
		}
	}

	if ( newlp->Flags & LAYERSUPER ) gen_sbitmap_cr(newlp);

	cleanup(wi);
	wi->LayerInfo_extra = old_lie;	/* pop back */

	/* put new layer at bottom of list */
	insertlayer(0,newlp);
	/* put lock node in central list */
	AddTail((struct List *)&wi->gs_Head,&newlp->Lock);
	/*bottomlayer(newlp,0);*/
	/* past point of no return */

	if ( (newlp->Flags&LAYERBACKDROP) == 0)
	{
	struct Layer *cw;

		for(cw = wi->top_layer; cw != newlp ; cw = cw->back)
			/* place it above all backdrops */
			if (cw->Flags & LAYERBACKDROP)
			{
				if (!movelayerinfrontof(newlp,cw,FALSE))
				{
					/* have to delete this guy now */
					deletelayer2(newlp, 1);
					abort(wi);
				}
				break;
			}
	}

	regen_display(wi);	/* this will work */

	if (newlp->Flags & LAYERSUPER) CopySBitMap(newlp);

	/* release cliprects no longer needed */
	Freecrlist(cr_deletelist);
}

void gen_sbitmap_cr(struct Layer *newlp)
{
struct BitMap *bitmap2=newlp->SuperBitMap;
struct Rectangle rect;
struct Layer cw;
struct ClipRect *cr;
struct ClipRect *crtmp;

	rect.MinX = 0;
	rect.MinY = 0;

	rect.MaxX = GetBitMapAttr(bitmap2,BMA_WIDTH)-1;
	rect.MaxY = GetBitMapAttr(bitmap2,BMA_HEIGHT)-1;

	default_layer(newlp->LayerInfo,&cw,&rect);

	/* delete all old Virtual ClipRects */
	cr = newlp->SuperClipRect;
	while (cr)
	{
		crtmp = cr->Next;
		cr->Next = newlp->SuperSaveClipRects;
		newlp->SuperSaveClipRects = cr;
		cr = crtmp;
	}
	cw.SuperSaveClipRects = newlp->SuperSaveClipRects;
	cr = cw.SuperSaveClipRects;
	cw.SuperSaveClipRects = cr->Next;
	cw.SuperClipRect = 0;
	cr->Next = 0;
	cr->lobs = &cw;
	cw.ClipRect = cr;
	cr->bounds.MinX = newlp->Scroll_X;
	cr->bounds.MinY = newlp->Scroll_Y;
	cr->bounds.MaxX = newlp->Scroll_X
			    + newlp->bounds.MaxX - newlp->bounds.MinX;
	cr->bounds.MaxY = newlp->Scroll_Y
			    + newlp->bounds.MaxY - newlp->bounds.MinY;

	layerop(&cw,myaddpiece,&rect,0);
	newlp->SuperClipRect = cw.SuperClipRect;
	/* return cr to save list and reinstall list*/
	cr->Next = cw.SuperSaveClipRects;
	newlp->SuperSaveClipRects = cr;
}

/****** layers.library/CreateBehindHookLayer ***********************************
*
*    NAME                                                              (V36)
*	CreateBehindHookLayer -- Create a new layer behind all existing layers,
*	                         using supplied callback BackFill hook.
*
*    SYNOPSIS
*	result = CreateBehindHookLayer(li,bm,x0,y0,x1,y1,flags,hook,[,bm2])
*	d0                             a0 a1 d0 d1 d2 d3 d4    a3   [ a2 ]
*
*	struct Layer *CreateBehindHookLayer(struct Layer_Info *, struct BitMap *,
*	    LONG, LONG, LONG, LONG, LONG, struct Hook *, ... );
*
*    FUNCTION
*	Create a new Layer of position and size (x0,y0)->(x1,y1)
*	Make this layer of type found in flags.
*	Install Layer->BackFill callback Hook.
*	If SuperBitMap, use bm2 as pointer to real SuperBitMap,
*	and copy contents of Superbitmap into display layer.
*	If this layer is a backdrop layer then place it behind all
*	other layers including other backdrop layers. If this is
*	not a backdrop layer then place it behind all nonbackdrop
*	layers.
*
*	Note: when using SUPERBITMAP, you should also set LAYERSMART flag.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*	bm - pointer to common BitMap used by all Layers
*	x0,y0 - upper left hand corner of layer
*	x1,y1 - lower right hand corner of layer
*	flags - various types of layers supported as bit sets.
*	        (for bit definitions, see graphics/layers.h )
*	hook -  Layer->BackFill callback Hook (see InstallLayerHook())
*
*	        If hook is LAYERS_BACKFILL, the default backfill is
*	        used for the layer.  (Same as pre-2.0)
*
*	        As of V39:
*		If hook is LAYERS_NOBACKFILL, the layer will not be
*	        backfilled (NO-OP).
*
*	bm2 - pointer to optional Super BitMap
*
*    RESULTS
*	result - pointer to Layer structure if successful
*	         NULL if not successful
*
*    BUGS
*
*    SEE ALSO
*	InstallLayerHook, DeleteLayer, graphics/layers.h, graphics/clip.h,
*	graphics/gfx.h, utility/hooks.h
*
*******************************************************************************/

/****** layers.library/CreateBehindLayer ***************************************
*
*    NAME
*	CreateBehindLayer -- Create a new layer behind all existing layers.
*
*    SYNOPSIS
*	result = CreateBehindLayer(li,bm,x0,y0,x1,y1,flags [,bm2])
*	d0                         a0 a1 d0 d1 d2 d3   d4  [ a2 ]
*
*	struct Layer *CreateBehindLayer(struct Layer_Info *, struct BitMap *,
*	    LONG, LONG, LONG, LONG, LONG, ... );
*
*    FUNCTION
*	Create a new Layer of position and size (x0,y0)->(x1,y1)
*	Make this layer of type found in flags.
*	If SuperBitMap, use bm2 as pointer to real SuperBitMap,
*	and copy contents of Superbitmap into display layer.
*	If this layer is a backdrop layer then place it behind all
*	other layers including other backdrop layers. If this is
*	not a backdrop layer then place it behind all nonbackdrop
*	layers.
*
*	Note: when using SUPERBITMAP, you should also set LAYERSMART flag.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*	bm - pointer to common BitMap used by all Layers
*	x0,y0 - upper left hand corner of layer
*	x1,y1 - lower right hand corner of layer
*	flags - various types of layers supported as bit sets.
*	        (for bit definitions, see graphics/layers.h )
*	bm2 - pointer to optional Super BitMap
*
*    RESULTS
*	result - pointer to Layer structure if successful
*	         NULL if not successful
*
*    BUGS
*
*    SEE ALSO
*	DeleteLayer, graphics/layers.h, graphics/clip.h, graphics/gfx.h
*
*******************************************************************************/

/* there are too many arguments here now, we need to go to a structure */
struct Layer * __stdargs createbehindlayer(struct Layer_Info *wi,struct BitMap *bitmap,struct Rectangle bnds,long flags,struct BitMap *bitmap2,struct Hook *backfill)
{
struct Layer *newlp;
struct RastPort *rp;

	if (!fatten_lock(wi))	return(FALSE);

	if (!bitmap) return(FALSE);

	if (aborted(wi))
	{
		unlock_thin(wi);
		return(FALSE);
	}

	newlp = (struct Layer *)LayersAllocMem(sizeof(struct Layer),MEMF_CLEAR,wi);
	default_layer(wi,newlp,&bnds);

	/*
	 * Install backfill hook
	 */
	newlp->BackFill=backfill;

	if (flags & LAYERSUPER)
	{
	int i;
	struct ClipRect *cr;

		newlp->SuperBitMap = bitmap2;
		/* preallocate 5 ClipRects */
		for (i = 0; i < 5 ; i++)
		{
			cr = AllocCR(wi);
			cr->Next = newlp->SuperSaveClipRects;
			newlp->SuperSaveClipRects = cr;
		}
	}

	rp = (struct RastPort *)LayersAllocMem(sizeof(struct RastPort),MEMF_PUBLIC,wi);

	/* get damage region holder */
	if ( !(newlp->DamageList = NewRegion())
	||   !remember_to_free(wi,newlp->DamageList,LMN_REGION) )
	{
		if(newlp->DamageList) DisposeRegion(newlp->DamageList);
		abort(wi);
	};

	InitRastPort(rp);
	rp->BitMap = bitmap;
	newlp->rp = rp;
	rp->Layer = newlp;
	newlp->Flags = flags;

	newlayer(newlp);

	cleanup(wi);
	unlock_thin(wi);	/* also unlocklayer info*/
	if ((flags & LAYERSUPER)==0) FullBackFill(newlp);
					/* used to be SetRast(rp,0); */
	/* damage? we ain't got to show you no steenkeen' damage... */
	newlp->Flags &= ~(LAYERREFRESH|LAYERIREFRESH|LAYERIREFRESH2);

	WaitBlit();
	return(newlp);
}

/****** layers.library/CreateUpfrontHookLayer **********************************
*
*    NAME                                                              (V36)
*	CreateUpfrontHookLayer -- Create a new layer on top of existing layers,
*	                          using supplied callback BackFill hook.
*
*    SYNOPSIS
*	result = CreateUpfrontHookLayer(li,bm,x0,y0,x1,y1,flags,hook,[,bm2])
*	d0                              a0 a1 d0 d1 d2 d3   d4  a3   [ a2 ]
*
*	struct Layer *CreateUpfrontHookLayer(struct Layer_Info *, struct BitMap *,
*	    LONG, LONG, LONG, LONG, LONG, struct Hook *, ... );
*
*    FUNCTION
*	Create a new Layer of position and size (x0,y0)->(x1,y1)
*	and place it on top of all other layers.
*	Make this layer of type found in flags
*	Install Layer->BackFill callback hook.
*	if SuperBitMap, use bm2 as pointer to real SuperBitMap.
*	and copy contents of Superbitmap into display layer.
*
*	Note: when using SUPERBITMAP, you should also set LAYERSMART flag.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*	bm - pointer to common BitMap used by all Layers
*	x0,y0 - upper left hand corner of layer
*	x1,y1 - lower right hand corner of layer
*	flags - various types of layers supported as bit sets.
*	hook -  Layer->BackFill callback Hook (see InstallLayerHook())
*
*	        If hook is LAYERS_BACKFILL, the default backfill is
*	        used for the layer.  (Same as pre-2.0)
*
*	        As of V39:
*		If hook is LAYERS_NOBACKFILL, the layer will not be
*	        backfilled (NO-OP).
*
*	bm2 - pointer to optional Super BitMap
*
*    RESULTS
*	result - pointer to Layer structure if successful
*	         NULL if not successful
*
*    BUGS
*
*    SEE ALSO
*	InstallLayerHook, DeleteLayer, graphics/layers.h, graphics/clip.h,
*	graphics/gfx.h, utility/hooks.h
*
*******************************************************************************/

/****** layers.library/CreateUpfrontLayer **************************************
*
*    NAME
*	CreateUpfrontLayer -- Create a new layer on top of existing layers.
*
*    SYNOPSIS
*	result = CreateUpfrontLayer(li,bm,x0,y0,x1,y1,flags [,bm2])
*	d0                          a0 a1 d0 d1 d2 d3   d4  [ a2 ]
*
*	struct Layer *CreateUpfrontLayer(struct Layer_Info *, struct BitMap *,
*	    LONG, LONG, LONG, LONG, LONG, ... );
*
*    FUNCTION
*	Create a new Layer of position and size (x0,y0)->(x1,y1)
*	and place it on top of all other layers.
*	Make this layer of type found in flags
*	if SuperBitMap, use bm2 as pointer to real SuperBitMap.
*	and copy contents of Superbitmap into display layer.
*
*	Note: when using SUPERBITMAP, you should also set LAYERSMART flag.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*	bm - pointer to common BitMap used by all Layers
*	x0,y0 - upper left hand corner of layer
*	x1,y1 - lower right hand corner of layer
*	flags - various types of layers supported as bit sets.
*	bm2 - pointer to optional Super BitMap
*
*    RESULTS
*	result - pointer to Layer structure if successful
*	         NULL if not successful
*
*    BUGS
*
*    SEE ALSO
*       DeleteLayer, graphics/layers.h, graphics/clip.h, graphics/gfx.h
*
*******************************************************************************/

struct Layer * __stdargs createupfrontlayer(struct Layer_Info *wi,struct BitMap *bm,struct Rectangle bnds,long flags,struct BitMap *bitmap2,struct Hook *backfill)
{
struct Layer *cw;

	/* aborted does a lock screen */
	if (cw = createbehindlayer(wi,bm,bnds,flags,bitmap2,backfill))
	{
		if (upfront(cw))
		{
			ClearRegion(cw->DamageList);
			cw->Flags &= ~(LAYERREFRESH|LAYERIREFRESH|LAYERIREFRESH2);
		}
		else
		{
			deletelayer(cw);
			cw = 0;
		}
	}
	return(cw);
}
@


38.19
log
@Added the setting of two more bits for damage work
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.18 92/03/03 17:25:15 mks Exp Locker: mks $
d276 1
a276 4
*	hook -  Layer->BackFill callback Hook which will be called
*	        with object == (struct RastPort *) result->RastPort
*	        and message == [ (Layer *) layer, (struct Rectangle) bounds,
*	                       (LONG) offsetx, (LONG) offsety ]
d294 2
a295 2
*	DeleteLayer, graphics/layers.h, graphics/clip.h, graphics/gfx.h
*	utility/hooks.h
d440 1
a440 4
*	hook -  Layer->BackFill callback Hook which will be called
*	        with object == (struct RastPort *) result->RastPort
*	        and message == [ (Layer *) layer, (struct Rectangle) bounds,
*	                       (LONG) offsetx, (LONG) offsety ]
d458 2
a459 2
*       DeleteLayer, graphics/layers.h, graphics/clip.h, graphics/gfx.h
*	utility/hooks.h
@


38.18
log
@Cleaned up autodoc
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.17 92/02/24 19:45:02 mks Exp Locker: mks $
d408 1
a408 1
	newlp->Flags &= ~LAYERREFRESH; 		/* bart -- 07.25.89 */
d519 1
a519 1
			cw->Flags &= ~LAYERREFRESH;  /* bart -- 07.25.89 */
@


38.17
log
@Now uses the GetBitMapAttr() routine.
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.16 92/02/12 14:41:57 mks Exp Locker: mks $
d279 1
a279 1
*	                       (WORD) offsetx, (WORD) offsety ]
d446 1
a446 1
*	                       (WORD) offsetx, (WORD) offsety ]
@


38.16
log
@Kludge to keep layers working until BitMapWidth() is implemented.
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.15 91/11/20 12:30:30 mks Exp Locker: mks $
d208 2
a209 13
/* To be changed...  The BytesPerRow thing is wrong... */
	{
	UWORD	width;

		width=bitmap2->BytesPerRow;
		if (bitmap2->pad) width=bitmap2->Planes[1]-bitmap2->Planes[0];
		width=(width << 3)-1;

		rect.MaxX = width;
	}
/*******************************************************/

	rect.MaxY = bitmap2->Rows-1;
@


38.15
log
@Cleaned up some comments
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.14 91/11/19 12:51:46 mks Exp Locker: mks $
d199 1
a199 1
struct BitMap *bitmap2;
d202 2
a203 1
struct ClipRect *cr,*crtmp;
a204 2
	bitmap2 = newlp->SuperBitMap;

d207 13
a219 1
	rect.MaxX = (bitmap2->BytesPerRow<<3)-1;
d221 1
@


38.14
log
@Changed the way obscured bitmaps are cleared
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.13 91/11/18 18:37:21 mks Exp Locker: mks $
d145 8
@


38.13
log
@Autodoc changes
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.12 91/11/18 13:27:20 mks Exp Locker: mks $
d134 1
a134 1
	if ( (newlp->Flags & LAYERSIMPLE) == 0) for (crob = newlp->ClipRect; crob; crob = crob->Next)
d136 13
a148 5
	    	if ((crob->lobs != 0) && (crob->BitMap == 0) )
	    	{
			get_concealed_rasters(newlp,crob);
			Clear_BitMap(crob->BitMap);
	    	}
@


38.12
log
@Cleaned up how the hooks are installed into a new layer
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.11 91/11/15 20:23:29 mks Exp Locker: mks $
d263 8
a270 2
*		If hook is NULL, the default backfill hook is used.
*		In V39, if hook is 1, no backfill hook will be installed.
d430 8
a437 2
*		If hook is NULL, the default backfill hook is used.
*		In V39, if hook is 1, no backfill hook will be installed.
@


38.11
log
@Type casting changes
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.10 91/11/15 12:12:17 mks Exp Locker: mks $
d343 1
a343 1
	 * If BackFillHook is NULL, we use the default
d345 1
a345 1
	if (!backfill) backfill=&(LAYERSBASE->BackFillHook);
a346 7
	/*
	 * If the backfill hook passed in is (1), then
	 * it can not be a pointer but a signal that we
	 * want a NULL backfill hook.
	 */
	if (backfill!=((struct Hook *)1)) newlp->BackFill=backfill;

d381 2
a382 2
	unlock_thin(wi);	/* also unlcoklayer info*/
	if ((flags & LAYERSUPER)==0)	FullBackFill(newlp);
@


38.10
log
@Updated docs
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.9 91/11/08 13:10:52 mks Exp Locker: mks $
d151 1
a151 1
	AddTail(&wi->gs_Head,&newlp->Lock);
@


38.9
log
@Added the feature to be able to set a no-op backfill hook
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.8 91/10/04 15:49:50 bart Exp Locker: mks $
d263 2
d431 2
@


38.8
log
@minor byte savings
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.7 91/10/03 16:03:24 bart Exp Locker: bart $
d322 1
a322 1
struct Layer * __stdargs createbehindlayer(struct Layer_Info *wi,struct BitMap *bitmap,struct Rectangle bnds,long flags,struct BitMap *bitmap2,void (*backfill)())
d340 11
a350 8
	if(backfill)
	{
		newlp->BackFill = (struct Hook *)backfill;
	}
	else
	{
		newlp->BackFill = &(LAYERSBASE->BackFillHook);
	}
a442 1

d483 1
a483 1
struct Layer * __stdargs createupfrontlayer(struct Layer_Info *wi,struct BitMap *bm,struct Rectangle bnds,long flags,struct BitMap *bitmap2,void (*backfill)())
@


38.7
log
@compare both MinX/Y in one test, save space and time
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.6 91/08/12 15:32:52 mks Exp Locker: bart $
d367 2
a368 2
	if (!(newlp->DamageList = NewRegion()))	abort(wi);
	if (!remember_to_free(wi,newlp->DamageList,LMN_REGION))
d370 1
a370 1
		DisposeRegion(newlp->DamageList);
@


38.6
log
@Minor cleanup
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.5 91/08/05 20:20:06 mks Exp Locker: mks $
d28 2
a29 2
		if ((op->bounds.MinX == r->MinX) &&
			(op->bounds.MinY == r->MinY) )	return;
d81 3
a83 2
			for (crob = lp->_cliprects ; crob ; crob = crob->prev)
				crob->Next = crob->prev;
@


38.5
log
@Changed the calling interface to addpiece() and myaddpiece()
The only get called when needed and they only get 3 parameters
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.4 91/08/02 10:21:41 mks Exp Locker: mks $
d21 10
a30 2
void newlayer(struct Layer *);
void addrect(struct Rectangle *,struct Layer *);
d32 8
a498 19
}

void addrect(struct Rectangle *r,struct Layer *lp)
{
struct ClipRect *op;
struct Layer_Info *wi = lp->LayerInfo;

	for (op = wi->obs; op; op = op->Next)
	{
		if ((op->bounds.MinX == r->MinX) &&
			(op->bounds.MinY == r->MinY) )	return;
	}

	op = AllocCR(lp->LayerInfo);
	op->bounds = *r;
	op->lobs = lp;
	/* put on list */
	op->Next = wi->obs;
	wi->obs = op;
@


38.4
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.1 91/07/25 09:55:58 bart Exp $
d24 1
a24 1
void __stdargs addpiece(struct Layer *lp,struct Rectangle r,struct RastPort *bp,struct Layer_Info *wi,struct ClipRect *op)
d26 1
a26 1
    if (op == NULL) addrect(&r,wi->check_lp);
d29 1
a29 1
void __stdargs myaddpiece(struct Layer *lp,struct Rectangle r,struct RastPort *bp,struct Layer_Info *wi,struct ClipRect *op)
d31 10
a40 11
	if (op == NULL)
	{
		op = lp->SuperSaveClipRects;
		lp->SuperSaveClipRects = op->Next;
		op->BitMap = 0;
		op->lobs = 0;
		op->bounds = r;
		/* put on list */
		op->Next = lp->SuperClipRect;
		lp->SuperClipRect = op;
	}
d111 1
a111 1
	   	layerop(newlp,FALSE,&lp->bounds,wi);
d202 1
a202 1
	layerop(&cw,TRUE,&rect,0);
@


38.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.2 91/07/25 16:49:14 bart Exp Locker: bart $
d7 2
d21 2
a22 3
/*#define DEBUG
#define DEBUGA*/
/*#define DEBUGDEBUG*/
d24 4
a27 7
/*#define SBM_DEBUG
#define SBM_DEBUGDEBUG*/

struct Region *NewRegion();
struct ClipRect *AllocCR();

/*#define DEBUGADDPIECE*/
d29 1
a29 6
addpiece(lp,r,bp,wi,op)
struct Layer *lp;
struct Rectangle r;
struct RastPort *bp;
struct Layer_Info *wi;  /* passed in as 'stuff' by layerop */
struct ClipRect *op;
d31 11
a41 4
#ifdef DEBUGADDPIECE
    printf("addpiece(%lx,%lx)",lp,op);
#endif
    if (op == NULL) addrect(&r,wi->check_lp,wi);
d47 1
a47 2
newlayer(newlp)
struct Layer *newlp;
d49 7
a55 3
	struct Layer_Info *wi=newlp->LayerInfo;
	struct LayerInfo_extra *old_lie=wi->LayerInfo_extra;
	struct LayerInfo_extra new_lie;
d57 1
a57 21
    /*struct Rectangle r,c_r;*/

    struct ClipRect *crob;  /* obscured ClipRects */
    struct Layer *lp;
	struct ClipRect *cr_deletelist;

#define NEWADDOBS
#ifdef NEWADDOBS
    struct ClipRect **crp;  /* let's speed this baby up a bit... bart */
#else
    struct Rectangle c_r;
    struct ClipRect *crtmp;
#endif

	/*r = newlp->bounds;*/

#ifdef DEBUG
	printf("newlayer(%lx)\n",newlp);
#endif
    crob = 0;
    wi->obs = NULL;
a59 3
#ifdef DEBUG
	printf("call aborted\n");
#endif
d61 1
a61 8
	{
#ifdef DEBUG
	printf("ABORTION\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
		/* list is now completely mangled */
d63 1
a63 1
    	for (lp = wi->top_layer ; lp ; lp = lp->back)
a69 3
#ifdef DEBUG
	printf("propogate abort from newlayer \n");
#endif
d72 1
a72 3
#ifdef DEBUG
	printf("about to make backup copy of list\n");
#endif
d74 1
a74 1
    for (lp = wi->top_layer ; lp ; lp = lp->back)
a82 4
#ifdef DEBUG
	printf("now enter addobs loop\n");
#endif

a84 1
#ifdef  NEWADDOBS
d103 1
a103 24
		crp = *crp;
	    }
	}
#else
	for (lp = wi->top_layer ; lp ; lp = lp->back)
	{
	    for (crob = lp->ClipRect ; crob ; crob = crtmp)
	    {
		crtmp = crob->Next;

		if (crob->lobs)
		{
		    c_r = crob->bounds;
		    if (rectXrect(&newlp->bounds,&crob->bounds) &&
		    addobs(crob,&c_r,&newlp->bounds,lp) )
		    {
			    /* unlink op from lp->obs */
			    unlinkcr(lp,crob);
			    /* attach Cliprect to single savecliprect list */
			    crob->Next = cr_deletelist;
			    cr_deletelist = crob;
		    }
		}

a105 8
#endif

#ifdef DEBUG
    printf("now add rectangles\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
d107 2
a108 2
    /* now add rectangles ClipRects for newlp */
    newlp->ClipRect = wi->obs;
d112 1
a112 1
	   	layerop(newlp,addpiece,&lp->bounds,wi);
d115 5
a119 9
    newlp->ClipRect = wi->obs;
#ifdef DEBUG
    printf("obs = %lx\n",wi->obs);
#endif
    /* allocate offscreen buffers */
    if ( (newlp->Flags & LAYERSIMPLE) == 0)
    /*if ( newlp->Flags & LAYERSMART ) put back */
		for (crob = newlp->ClipRect; crob; crob = crob->Next)
		{
d122 2
a123 2
				get_concealed_rasters(newlp,crob);
				Clear_BitMap(crob->BitMap);
d125 1
a125 1
		}
d127 1
a127 1
    if ( newlp->Flags & LAYERSUPER ) gen_sbitmap_cr(newlp);
d132 4
a135 7
    /* put new layer at bottom of list */
#ifdef DEBUG
    printf("put new layer at bottom\n");
#endif
    insertlayer(0,newlp);
    /* put lock node in central list */
    AddTail(&wi->gs_Head,&newlp->Lock);
d139 4
a142 3
    if ( (newlp->Flags&LAYERBACKDROP) == 0)
    {
		struct Layer *cw;
a146 3
#ifdef DEBUG
	printf("call tomiddle\n");
#endif
d155 3
a157 5
    }
#ifdef DEBUG
	printf("call regen display\n");
#endif
    regen_display(wi);	/* this will work */
d159 1
a159 1
    if (newlp->Flags & LAYERSUPER) CopySBitMap(newlp);
a162 26
#ifdef DEBUG
    printf("now return(%lx)\n",newlp);
#endif
}

myaddpiece(lp,r,bp,wi,op)
struct Layer *lp;
struct Rectangle r;
struct RastPort *bp;
struct Layer_Info *wi;  /* passed in as 'stuff' by layerop */
struct ClipRect *op;
{
#ifdef DEBUG
    printf("addpiece(%lx,%lx)",lp,op);
#endif
    if (op == NULL)
	{
		op = lp->SuperSaveClipRects;
		lp->SuperSaveClipRects = op->Next;
		op->BitMap = 0;
		op->lobs = 0;
    	op->bounds = r;
		/* put on list */
    	op->Next = lp->SuperClipRect;
    	lp->SuperClipRect = op;
	}
d165 1
a165 2
gen_sbitmap_cr(newlp)
struct Layer *newlp;
d167 4
a170 4
	struct BitMap *bitmap2;
	struct Rectangle rect;
	struct Layer cw;
	struct ClipRect *cr,*crtmp;
a171 3
#ifdef SBM_DEBUG
    printf("gen_sbitmap(%lx)sscr=%lx\n",newlp,&newlp->SuperSaveClipRects);
#endif
a173 3
#ifdef SBM_DEBUG
    printf("bitmap2 = %lx\n",bitmap2);
#endif
a178 3
#ifdef SBM_DEBUG
    printf("after defaultlayer\n");
#endif
d184 1
a184 1
	    crtmp = cr->Next;
d187 1
a187 1
	    cr = crtmp;
a189 6
#ifdef SBM_DEBUG
	printf("after deleting all old virtual cliprects\n");
#ifdef SBM_DEBUGDEBUG
	Debug();
#endif
#endif
d203 1
a203 10
	/* Next statement should not be needed */
	/* Dale 6/22/88 */
	/*rect = cw.bounds;*/
#ifdef SBM_DEBUG
    printf("gen_sbitmap:call layerop\n");
#ifdef SBM_DEBUGDEBUG
    Debug();
#endif
#endif
	layerop(&cw,myaddpiece,&rect,0);
a207 8
	/*newlp->SuperSaveClipRects = cw.SuperSaveClipRects;*/

#ifdef SBM_DEBUG
    printf("return from gen_sbitmap\n");
#ifdef SBM_DEBUGDEBUG
    Debug();
#endif
#endif
a304 18
#define CREATEINFRONTOFLAYER

#ifdef  CREATEINFRONTOFLAYER

struct Layer *createbehindlayer(wi,bitmap,bnds,flags,bitmap2,backfill)
struct Layer_Info *wi;
struct BitMap *bitmap,*bitmap2;
struct Rectangle bnds;
void (*backfill)();	/* optional backfill hook */
{
    extern struct Layer *createlayerinfrontof();

    /* test new "create in place" routine */
    return(createlayerinfrontof(wi,bitmap,bnds,flags,bitmap2,backfill,NULL));
}

#else

d306 1
a306 5
struct Layer *createbehindlayer(wi,bitmap,bnds,flags,bitmap2,backfill)
struct Layer_Info *wi;
struct BitMap *bitmap,*bitmap2;
struct Rectangle bnds;
void (*backfill)();	/* optional backfill hook */
d308 2
a309 2
	struct Layer *newlp;
	struct RastPort *rp;
d313 1
a313 1
	if (!bitmap) return FALSE;
a314 6
#ifdef DEBUG
	printf("call aborted\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
a316 3
#ifdef DEBUG
	printf("abort in progress:createbehind layer\n");
#endif
d320 3
a322 5
#ifdef DEBUG
	printf("get memory for layer\n");
#endif
    newlp = (struct Layer *)LayersAllocMem(sizeof(struct Layer),MEMF_CLEAR,wi);
    default_layer(wi,newlp,&bnds);
d325 3
a327 3
		{
		newlp->BackFill = backfill;
		}
d329 3
a331 5
		{
		struct LayersBase *LB = (struct LayersBase *) FetchLayersBase();

		newlp->BackFill = &LB->BackFillHook;
		}
d335 3
a337 2
		int i;
		struct ClipRect *cr;
d348 1
a348 9
#ifdef DEBUGA
		printf("createbehind(%lx,%lx,%d,%d,%d,%d,%lx)\n",
					wi,bitmap,bnds,flags);
    	printf("newlp = %lx\n",newlp);
		if (flags & LAYERSUPER)	printf("bm2 = %lx\n",bitmap2);
#ifdef DEBUGDEBUG
		Debug();
#endif
#endif
a349 2
    rp = (struct RastPort *)LayersAllocMem(sizeof(struct RastPort),
				MEMF_PUBLIC,wi);
a350 1

d358 5
a362 12
#ifdef DEBUG
	printf("call InitRastPort\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif

    InitRastPort(rp);
    rp->BitMap = bitmap;
    newlp->rp = rp;
    rp->Layer = newlp;
    newlp->Flags = flags;
a369 6
#ifdef DEBUG
	printf("now return from cbl newlp=%lx\n",newlp);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
a376 2
#endif

d465 1
a465 6
struct Layer *createupfrontlayer(wi,bm,bnds,flags,bitmap2,backfill)
struct Layer_Info *wi;
struct BitMap *bm,*bitmap2;
struct Rectangle bnds;
int flags;
void (*backfill)();
d467 2
a468 4
    struct Layer *cw;
#ifdef DEBUG
	printf("CreateUpfront(%lx)\n",flags);
#endif
d483 1
a483 5
#ifdef DEBUG
	printf("cufl return(%lx)\n",cw);
#endif

    return(cw);
d486 1
a486 3
addrect(r,lp)
struct Rectangle *r;
struct Layer *lp;
d488 2
a489 2
    struct ClipRect *op;
	struct Layer_Info *wi = lp->LayerInfo;
d491 2
a492 6
#ifdef DEBUG
    printf("addrect(%lx)",lp);
#endif

    for (op = wi->obs; op; op = op->Next)
    {
d494 2
a495 2
	    	(op->bounds.MinY == r->MinY) )   return;
    }
d497 3
a499 3
    op = AllocCR(lp->LayerInfo);
    op->bounds = *r;
    op->lobs = lp;
d501 2
a502 2
    op->Next = wi->obs;
    wi->obs = op;
@


38.2
log
@createbehindlayer calls createlayerinfrontof
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 38.1 91/07/25 09:55:58 bart Exp Locker: bart $
d453 2
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: newlayer.c,v 1.22 91/02/22 14:53:14 mks Exp $
d443 16
d570 3
@
