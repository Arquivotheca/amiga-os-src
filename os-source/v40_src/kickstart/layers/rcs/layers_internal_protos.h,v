head     38.28;
branch   ;
access   ;
symbols  V40_1:38.28 V39_62:38.28 V39_61:38.28 V39_60:38.28 V39_58:38.28 V39_56:38.28 V39_55:38.28 V39_54:38.28 V39_53:38.28 V39_52:38.28 V39_51:38.28 V39_50:38.28 V39_49:38.26 V39_48:38.26 V39_46:38.26 V39_45:38.26 V39_44:38.26 V39_42:38.26 V39_41:38.25 V39_40:38.25 V39_39:38.25 V39_38:38.24 V39_37:38.24 V39_36:38.23 V39_35:38.22 V39_34:38.22 V39_33:38.22 V39_32:38.22 V39_30:38.21 V39_28:38.20 V39_27:38.20 V39_26:38.20 V39_25:38.19 V39_24:38.19 V39_23:38.18 V39_22:38.18 V39_21:38.18 V39_20:38.18 V39_18:38.16 V39_16:38.14 V39_15:38.13 V39_14:38.13 V39_12:38.13 V39_10:38.10 V38_7:38.6 V38_6:38.6 First_Native_Build:38.1;
locks    ; strict;
comment  @ * @;


38.28
date     92.03.26.08.43.39;  author mks;  state Exp;
branches ;
next     38.27;

38.27
date     92.03.26.08.36.11;  author mks;  state Exp;
branches ;
next     38.26;

38.26
date     92.02.12.13.58.14;  author mks;  state Exp;
branches ;
next     38.25;

38.25
date     92.01.10.18.43.07;  author mks;  state Exp;
branches ;
next     38.24;

38.24
date     92.01.10.09.46.19;  author mks;  state Exp;
branches ;
next     38.23;

38.23
date     91.12.31.19.43.51;  author mks;  state Exp;
branches ;
next     38.22;

38.22
date     91.11.19.12.49.12;  author mks;  state Exp;
branches ;
next     38.21;

38.21
date     91.11.18.13.26.48;  author mks;  state Exp;
branches ;
next     38.20;

38.20
date     91.11.09.00.46.58;  author mks;  state Exp;
branches ;
next     38.19;

38.19
date     91.11.08.13.09.05;  author mks;  state Exp;
branches ;
next     38.18;

38.18
date     91.11.01.09.33.08;  author mks;  state Exp;
branches ;
next     38.17;

38.17
date     91.10.29.13.03.18;  author mks;  state Exp;
branches ;
next     38.16;

38.16
date     91.10.28.09.20.07;  author mks;  state Exp;
branches ;
next     38.15;

38.15
date     91.10.25.16.56.41;  author mks;  state Exp;
branches ;
next     38.14;

38.14
date     91.10.25.00.28.03;  author mks;  state Exp;
branches ;
next     38.13;

38.13
date     91.10.23.16.51.38;  author mks;  state Exp;
branches ;
next     38.12;

38.12
date     91.10.23.09.53.18;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     91.10.22.17.06.30;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     91.10.03.12.52.25;  author bart;  state Exp;
branches ;
next     38.9;

38.9
date     91.09.30.14.08.58;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     91.09.27.15.29.07;  author mks;  state Exp;
branches ;
next     38.7;

38.7
date     91.08.30.11.28.38;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.08.27.14.05.06;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.21.15.25.35;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.16.08.31.59;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.12.15.32.28;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.05.20.17.04;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.08.02.10.42.14;  author mks;  state Exp;
branches ;
next     ;


desc
@Prototypes for functions that cross files...
@


38.28
log
@CallBackFillHook() was simplified...
@
text
@/******************************************************************************
*
* $Id: layers_internal_protos.h,v 38.27 92/03/26 08:36:11 mks Exp Locker: mks $
*
******************************************************************************/

/* These are the prototypes for internal layers routines */
void kprintf(char *,...);

/*
 * layerface.asm
 */
void __stdargs __asm NewList(register __a1 struct List *);

/*
 * layersallocmem.asm
 */
APTR __stdargs __asm LayersAllocMem(register __d0 ULONG,register __d1 ULONG,register __d2 struct LayerInfo *);
struct ClipRect * __stdargs __asm AllocCR(register __a0 struct Layer_Info *);
struct ClipRect * __stdargs __asm newAllocCR(register __a0 struct Layer *);
void __stdargs __asm newDeleteCR(register __a0 struct Layer *,register __a1 struct ClipRect *);
void __stdargs __asm Store_CR(register __a0 struct Layer *,register __a1 struct ClipRect *);
struct ClipRect * __stdargs __asm UnStore_CR(register __a0 struct Layer *);

/*
 * r_split.asm
 */
BOOL __stdargs __asm r_split(register __a2 struct Layer *,register __a0 struct Layer *,register __a1 struct ClipRect *);

/*
 * abort.asm
 */
void __stdargs abort(struct LayerInfo *);
BOOL __stdargs aborted(struct LayerInfo *);

/*
 * cleanup.c
 */
BOOL __stdargs __asm remember_to_free(register __a0 struct Layer_Info *,register __a1 VOID *,register __d0 ULONG);
void cleanup(struct Layer_Info *);

/*
 * lock.c
 */
void __stdargs __asm locklayers(register __a0 struct Layer_Info *);
void __stdargs __asm unlocklayers(register __a0 struct Layer_Info *);

/*
 * locklayer.asm
 */
void __stdargs __asm LockLayerInfo(register __a0 struct Layer_Info *);
void __stdargs __asm UnlockLayerInfo(register __a0 struct Layer_Info *);

/*
 * layers.c
 */
void regen_display(struct Layer_Info *);
BOOL fatten_lock(struct Layer_Info *);
void unlock_thin(struct Layer_Info *);
void default_layer(struct Layer_Info *,struct Layer *,struct Rectangle *);
void __stdargs __asm gen_onscreen_cliprects(register __a0 struct Layer_Info *);
void __stdargs __asm strip_onscreen_cliprects(register __a0 struct Layer_Info *);
BOOL genrect(struct Layer *);

/*
 * addobs.c
 */
BOOL addobs(struct ClipRect *,struct Rectangle *,struct Rectangle *,struct Layer *);

/*
 * copyrect.c
 */
void __stdargs __asm copyrect(register __a0 struct ClipRect *,register __a1 struct ClipRect *);

/*
 * newlayer.c
 */
void addrect(struct Rectangle *,struct Layer *);
void gen_sbitmap_cr(struct Layer *);
struct Layer * __stdargs createbehindlayer(struct Layer_Info *,struct BitMap *,struct Rectangle,long,struct BitMap *,struct Hook *);
void __stdargs addpiece(struct Layer *,struct Rectangle *,struct Layer_Info *);
void __stdargs myaddpiece(struct Layer *,struct Rectangle *,struct Layer_Info *);

/*
 * localclipblit.c
 */
void LayerBlit(struct Layer *,SHORT,SHORT, struct Layer *,SHORT,SHORT,SHORT,SHORT,USHORT);

/*
 * layerop.asm
 */
void __stdargs __asm intersect(register __a0 struct Rectangle *,register __a1 struct Rectangle *,register __a2 struct Rectangle *);
BOOL __stdargs __asm rectXrect(register __a0 struct Rectangle *,register __a1 struct Rectangle *);
void __stdargs __asm layerop(register __a0 struct Layer *,register __a1 void (*)(),register __a2 struct Rectangle *,register __a3 void *);

/*
 * tomiddle.c
 */
BOOL movelayerinfrontof(struct Layer *,struct Layer *,long);

/*
 * deletelayer.c
 */
BOOL __stdargs __asm deletelayer(register __a1 struct Layer *);
void __stdargs __asm deletelayer2(register __a0 struct Layer *,register __d0 long);

/*
 * upfront.c
 */
LONG __stdargs __asm upfront(register __a1 struct Layer *);

/*
 * behind.c
 */
BOOL behindcode(struct Layer *,UWORD);

/*
 * screenswap.c
 */
void screentocr(struct RastPort *,struct ClipRect *);
void __stdargs __asm crtoscreen(register __a0 struct RastPort *,register __a1 struct ClipRect *);
void __stdargs __asm screenswap(register __a0 struct RastPort *,register __a1 struct ClipRect *);

/*
 * hook.c
 */

/*
 * moreregions.c
 */
struct Region *ClipRectsToRegion(struct Layer *,struct ClipRect *,long);

/*
 * usercliprects.c
 */
void pushusercliprects(struct Layer_Info *);
void popusercliprects(struct Layer_Info *);

/*
 * dedicer.asm
 */
void __stdargs __asm optimizeClipRects(register __a0 struct Layer_Info *);

/*
 * crtools.asm
 */
void __stdargs __asm free_concealed_rasters(register __a0 struct ClipRect *);
BOOL __stdargs __asm get_concealed_rasters(register __a0 struct Layer *,register __a1 struct ClipRect *);
BOOL __stdargs __asm obscured(register __a0 struct Rectangle *,register __a1 struct Rectangle *);
void __stdargs __asm unlinklayer(register __a0 struct Layer *);
void __stdargs __asm insertlayer(register __a0 struct Layer *,register __a1 struct Layer *);
void __stdargs __asm Freecr(register __a0 struct ClipRect *);
void __stdargs __asm Freecrlist(register __a0 struct ClipRect *);
void __stdargs __asm vlink_cr(register __a0 struct Layer *,register __a1 struct ClipRect *,register __a2 struct Layer *);
void __stdargs __asm linkcr(register __a0 struct Layer *,register __a1 struct ClipRect *);

/*
 * update.c
 */
long internal_beginupdate(struct Layer *);
void internal_endupdate(struct Layer *);

/*
 * copylayer.c
 */
void copylayer(struct Layer *,struct Layer *);

/*
 * backfill.asm
 */
void __stdargs __asm CallBackFillHook(register __a1 struct Layer *,register __a0 struct ClipRect *);
void __stdargs __asm FullBackFill(register __a0 struct Layer *);
@


38.27
log
@Changed the CallBackFillHook() routine prototype
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.26 92/02/12 13:58:14 mks Exp Locker: mks $
d171 1
a171 1
void __stdargs __asm CallBackFillHook(register __a0 struct Hook *,register __a1 struct Layer *,register __a3 struct ClipRect *);
@


38.26
log
@Moved prototypes from layers.c to crtool.asm for bitmap allocation
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.25 92/01/10 18:43:07 mks Exp Locker: mks $
d171 1
a171 1
void __stdargs __asm CallBackFillHook(register __a0 struct Hook *,register __a2 struct RastPort *,register __a1 struct Layer *,register __a3 struct ClipRect *);
@


38.25
log
@Cleaned up the prototypes now that dedice.c is gone.
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.24 92/01/10 09:46:19 mks Exp Locker: mks $
a56 2
void __stdargs __asm free_concealed_rasters(register __a0 struct ClipRect *);
BOOL __stdargs __asm get_concealed_rasters(register __a0 struct Layer *,register __a1 struct ClipRect *);
d147 2
@


38.24
log
@Changes as needed for the new optimal dedice...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.23 91/12/31 19:43:51 mks Exp Locker: mks $
d58 1
a58 1
BOOL get_concealed_rasters(struct Layer *,struct ClipRect *);
d75 1
a75 1
void copyrect(struct ClipRect *,struct ClipRect *);
d142 1
a142 1
 * search_for_cr.asm
a144 1
void __stdargs __asm sortlinkcr(register __a0 struct Layer *,register __a1 struct ClipRect *);
a155 5

/*
 * dedice.c
 */
ULONG __stdargs __asm unslice(register __a3 struct ClipRect *,register __a1 struct ClipRect *,register __a0 struct Rectangle *);
@


38.23
log
@Fixed up as needed...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.22 91/11/19 12:49:12 mks Exp Locker: mks $
a130 5
 * rebuildcliprects.c
 */
BOOL __stdargs __asm rebuildcliprects(register __a0 struct Layer_Info *);

/*
a143 3
struct ClipRect * __stdargs __asm search_for_cr(register __a0 struct Layer *,register __a1 struct Rectangle *);
struct ClipRect * __stdargs __asm search_side_cr(register __a0 struct ClipRect *,register __a2 struct Layer *);
struct ClipRect * __stdargs __asm search_next_cr(register __a0 struct ClipRect *,register __a1 struct Rectangle *);
d145 5
@


38.22
log
@Prototype changes as needed
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.21 91/11/18 13:26:48 mks Exp Locker: mks $
d133 1
a133 1
void __stdargs __asm optimizeClipRects(register __a0 struct Layer_Info *);
d152 1
a152 2
BOOL __stdargs __asm dedice(register __a0 struct Layer_Info *);
void __stdargs __asm sort_layer_cr(register __a0 struct Layer *);
@


38.21
log
@Had to move some prototypes around
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.20 91/11/09 00:46:58 mks Exp Locker: mks $
d22 2
a58 1
void Clear_BitMap(struct BitMap *);
@


38.20
log
@Ready to go to assembly for rsplit.c
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.19 91/11/08 13:09:05 mks Exp Locker: mks $
a108 5
 * fullbackfill.c
 */
void FullBackFill(struct Layer *);

/*
a127 6
ULONG __stdargs CallBackFillHook(struct Hook *,VOID *,struct Layer *,struct Rectangle,WORD,WORD);

/*
 * refreshclean.c
 */
void __stdargs refreshclean(struct RastPort *,struct Rectangle);
d180 2
a181 2
long hookEntry(void);
long HookFill(void *,void *,void *);
@


38.19
log
@Cleaned up prototype
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.18 91/11/01 09:33:08 mks Exp Locker: mks $
d16 1
a16 1
 * layersallocmem.c
d18 4
a21 1
APTR LayersAllocMem(ULONG,ULONG,struct LayerInfo *);
d23 4
d37 1
a37 1
BOOL remember_to_free(struct Layer_Info *,VOID *,ULONG);
a52 5
 * rsplit.c
 */
BOOL r_split(struct Layer *,struct Layer *,struct ClipRect *);

/*
a54 2
struct ClipRect *newAllocCR(struct Layer *);
void newDeleteCR(struct Layer *,struct ClipRect *);
a56 1
struct ClipRect * __stdargs __asm AllocCR(register __a0 struct Layer_Info *);
@


38.18
log
@Just cosmetic change to prototypes
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.17 91/10/29 13:03:18 mks Exp Locker: mks $
d65 1
d82 1
a82 1
struct Layer * __stdargs createbehindlayer(struct Layer_Info *,struct BitMap *,struct Rectangle,long,struct BitMap *,void (*)());
@


38.17
log
@Changed the way unslice worked...  New prototype
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.16 91/10/28 09:20:07 mks Exp Locker: mks $
d106 1
a192 5

/*
 * newdelete.asm
 */
void __stdargs __asm deletelayer2(register __a0 struct Layer *,register __d0 long);
@


38.16
log
@Added parameter to vlink_cr()
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.15 91/10/25 16:56:41 mks Exp Locker: mks $
d174 1
a174 1
ULONG __stdargs __asm unslice(register __a4 struct Layer *,register __a2 struct Layer *,register __a3 struct ClipRect *,register __a1 struct ClipRect *);
@


38.15
log
@New prototypes to match changes...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.14 91/10/25 00:28:03 mks Exp Locker: mks $
d168 1
a168 1
void __stdargs __asm vlink_cr(register __a0 struct Layer *,register __a1 struct ClipRect *);
@


38.14
log
@Updated to match current layers...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.13 91/10/23 16:51:38 mks Exp Locker: mks $
a99 1
void insertlayer(struct Layer *,struct Layer *);
a162 1
void __stdargs __asm linkcr(register __a0 struct Layer *,register __a1 struct ClipRect *);
d165 1
a167 1
void __stdargs __asm unlinkcr(register __a0 struct Layer *,register __a1 struct ClipRect *);
d169 1
a169 1
UWORD __stdargs __asm set_pri(register __a0 struct Layer *);
@


38.13
log
@Removed layersubs from the prototypes...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.12 91/10/23 09:53:18 mks Exp Locker: mks $
a163 2
void __stdargs __asm set_cr_lobs(register __a0 struct Layer *,register __a1 struct ClipRect *,register __a2 struct Layer *,register __d2 ULONG,register __d3 ULONG);
void __stdargs __asm sortlinkcr(register __a0 struct Layer *,register __a1 struct ClipRect *);
d169 3
@


38.12
log
@Changed prototypes as needed
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.11 91/10/22 17:06:30 mks Exp Locker: mks $
a45 10
 * layersubs.c
 */
void linkcr(struct Layer *,struct ClipRect *);
void __stdargs __asm Freecr(register __a0 struct ClipRect *);
BOOL __stdargs __asm rectXrect(register __a0 struct Rectangle *,register __a1 struct Rectangle *);
void __stdargs __asm Freecrlist(register __a0 struct ClipRect *);
void __stdargs __asm unlinklayer(register __a0 struct Layer *);
BOOL obscured(struct Rectangle *,struct Rectangle *);

/*
d55 1
a55 1
void free_concealed_rasters(struct ClipRect *);
d165 6
@


38.11
log
@removed the search_obs_cr prototype as it is not used any more...
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.10 91/10/03 12:52:25 bart Exp Locker: mks $
a126 1
void swap_these(struct Layer *,struct Layer *,struct ClipRect ***,long,struct ClipRect **);
d174 1
@


38.10
log
@removed unlinkcr
modified cliprect * in swap_these call
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.9 91/09/30 14:08:58 mks Exp Locker: bart $
a170 1
struct ClipRect * __stdargs __asm search_obs_cr(register __a0 struct Layer *,register __a1 struct Rectangle *);
@


38.9
log
@Updated prototypes to make full assembly integration of deletelayer
work better.
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.8 91/09/27 15:29:07 mks Exp Locker: mks $
a47 1
void unlinkcr(struct Layer *,struct ClipRect *);
d127 1
a127 1
void swap_these(struct Layer *,struct Layer *,struct ClipRect *,long,struct ClipRect **);
@


38.8
log
@Made the sort routine available to the C compiler
@
text
@d3 1
a3 1
* $Id: layers_internal_protos.h,v 38.7 91/08/30 11:28:38 mks Exp Locker: mks $
d50 1
a50 1
void Freecr(struct ClipRect *);
d52 2
a53 2
void Freecrlist(struct ClipRect *);
void unlinklayer(struct Layer *);
d74 2
a75 2
void gen_onscreen_cliprects(struct Layer_Info *);
void strip_onscreen_cliprects(struct Layer_Info *);
a116 1
void deletelayer2(struct Layer *,long);
d139 1
a139 1
void crtoscreen(struct RastPort *,struct ClipRect *);
d155 1
a155 1
void optimizeClipRects(struct Layer_Info *);
d199 5
@


38.7
log
@Modified a prototype a bit...
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.6 91/08/27 14:05:06 mks Exp Locker: mks $
d177 1
@


38.6
log
@Updated the prototypes as needed for dedice work...
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.5 91/08/21 15:25:35 mks Exp Locker: mks $
d181 1
a181 1
ULONG __stdargs __asm unslice(register __a4 struct Layer *,register __a2 struct Layer *,register __a3 struct ClipRect *,register __a1 struct ClipRect *,register __d0 BOOL);
@


38.5
log
@Removed unused functions from layersubs.c prototypes
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.4 91/08/16 08:31:59 mks Exp Locker: mks $
d174 3
d181 1
a181 1
BOOL dedice(struct Layer_Info *);
@


38.4
log
@Move search_obs_cr to be with search_for_cr
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.3 91/08/12 15:32:28 mks Exp Locker: mks $
a47 2
long BLITBYTES(short,short);
long BYTECOUNT(short,short,short,short);
@


38.3
log
@Changed prototype to match AllocCR()
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.2 91/08/05 20:17:04 mks Exp Locker: mks $
d175 1
a179 1
struct ClipRect *search_obs_cr(struct Layer *,struct Rectangle *);
@


38.2
log
@Changed prototypes as needed
@
text
@d3 1
a3 1
*	$Id: layers_internal_protos.h,v 38.1 91/08/02 10:42:14 mks Exp Locker: mks $
d70 1
a70 1
struct ClipRect *AllocCR(struct Layer_Info *);
@


38.1
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id$
d53 1
a53 1
BOOL rectXrect(struct Rectangle *,struct Rectangle *);
d95 2
a96 2
void __stdargs addpiece(struct Layer *,struct Rectangle,struct RastPort *,struct Layer_Info *,struct ClipRect *);
void __stdargs myaddpiece(struct Layer *,struct Rectangle,struct RastPort *,struct Layer_Info *,struct ClipRect *);
a100 1
void intersect(struct Rectangle *,struct Rectangle *,struct Rectangle *);
d104 1
a104 1
 * layerop.c
d106 3
a108 1
void layerop(struct Layer *,long,struct Rectangle *,void *);
@
