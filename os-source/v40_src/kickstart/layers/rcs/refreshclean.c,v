head     38.2;
branch   ;
access   ;
symbols  V40_1:38.2 V39_62:38.2 V39_61:38.2 V39_60:38.2 V39_58:38.2 V39_56:38.2 V39_55:38.2 V39_54:38.2 V39_53:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_49:38.2 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.2 V39_32:38.2 V39_30:38.2 V39_28:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_24:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.2
date     91.08.02.10.22.01;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.05;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@Native build version checkin...
@
text
@/******************************************************************************
*
*	$Id: refreshclean.c,v 38.1 91/07/25 09:56:05 bart Exp $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <utility/hooks.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <hardware/dmabits.h>
#include <hardware/custom.h>

#include "layersbase.h"

void __stdargs refreshclean(struct RastPort *rp,struct Rectangle bounds)
{
struct BitMap bm;
short i;

	bm = *(rp->BitMap);

	for (i=0; i<8; bm.Planes[i++] = NULL);

	BltBitMap(&bm, bounds.MinX, bounds.MinY,
		rp->BitMap, bounds.MinX, bounds.MinY,
		bounds.MaxX-bounds.MinX+1, bounds.MaxY-bounds.MinY+1, 0, 0xff, NULL);
}
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: refreshclean.c,v 1.14 90/10/15 14:36:38 rsbx Exp $
d7 2
d24 1
a24 1
/*#define DEBUG*/
d26 4
a29 8
#ifndef USE_BLITTER

void refreshclean(rp, bounds)
	struct RastPort *rp;
	struct Rectangle bounds;
	{
	struct BitMap bm;
	int i;
d33 1
a33 4
	for (i=0; i<8; i++)
		{
		bm.Planes[i] = NULL;
		}
d35 1
a35 1
	(void) BltBitMap(&bm, bounds.MinX, bounds.MinY,
a37 117

#ifdef DEBUG
	printf("after refresh clean\n");
	Debug();
#endif
	}


#else
extern struct Custom custom;

refreshclean(rp, bounds)
struct RastPort *rp;
struct Rectangle bounds;
{
	UWORD bltbytes;

	bltbytes = BLITBYTES(bounds.MinX,bounds.MaxX);
	if (bltbytes <= 6 )	bitclean(rp,bounds,NULL);
	else
	{
		/* there is atleast 2 words we can clear fast per row */
		struct Rectangle temp;
		if (bounds.MinX & 15)
			{	/* clear strip on left */
				temp = bounds;
				temp.MaxX = temp.MinX | 15;
				bounds.MinX = temp.MaxX + 1;
				bitclean(rp,temp,NULL);
			}
		if ( (bounds.MaxX&15) != 15)
			{
				/* clear strip on right */
				temp = bounds;
				temp.MinX = temp.MaxX & 0xFFF0;
				bounds.MaxX = temp.MinX - 1;
				bitclean(rp,temp,NULL);
			}
		blockclean(rp,bounds,NULL); /* now fast clear the middle */
	}
#ifdef DEBUG
	printf("after refresh clean\n");
	Debug();
#endif
}

bitclean(rp,bounds,data)
struct RastPort *rp;
struct Rectangle bounds;
ULONG data;
{
    int i;
    int bltbytes;
    struct Custom *io;
    short BltSize;
    short BltSizV;
    short BltSizH;
    int offset;

    int color = data; 

    struct BitMap *rpbm;
    /* clear the area in RastPort associated with ClipRect to prepare */
    /* for user refresh */
    /* rp is assumed to be totally on the screen */
    /* this code currently just grabs the blitter */
    io = &custom;
    rpbm = rp->BitMap;

    i = bounds.MaxX & 0xf;
    bltbytes = BLITBYTES(bounds.MinX,bounds.MaxX);
    BltSizH = (bltbytes>>1);
    BltSizV = (bounds.MaxY - bounds.MinY + 1);
    BltSize = ((BltSizV)<<6) + (0x3f & BltSizH);
    offset = (bounds.MinY * rpbm->BytesPerRow) + (bounds.MinX>>3);
 
    OwnBlitter();
    WaitBlit();
    /* now some real rom code */
    /* set up blitter to blit asrc = onscreen
			      csrc = offscreen
			      dest = offscreen
    */
    io->bltcon1 = 0;
    io->bltafwm = (USHORT)0xffff >> (bounds.MinX&0xF);
    io->bltadat = 0xffff;
    io->bltalwm = (USHORT)0xffff << ( 15 - i);
    
    io->bltcmod = rpbm->BytesPerRow - bltbytes;
    io->bltdmod = rpbm->BytesPerRow - bltbytes;

    for(i = 0;i < rpbm->Depth; i++)
    {
	/*if ( (rp->Mask>>i) & 1)*/
	{
	    WaitBlit();
	    if (color & (1<<i))
						 /* set with A mask */
    		io->bltcon0 = SRCC|DEST|NANBC|NABC|ANBNC|ANBC|ABNC|ABC;
	    else
    		io->bltcon0 = SRCC|DEST|NANBC|NABC; /* clear with A mask */
	    io->bltcpt = rpbm->Planes[i] + offset;
	    io->bltdpt = rpbm->Planes[i] + offset;
	    if(io->vposr & (0x2000))
	    {
		io->bltsizv = (BltSizV & 0x7fff);
		io->bltsizh = (BltSizH & 0x07ff);
	    }
	    else
	    {
		io->bltsize = BltSize;
	    }
	}
    }

    /*WaitBlit();*/
    DisownBlitter();
a38 1
#endif	/* USE_BLITTER */
@
