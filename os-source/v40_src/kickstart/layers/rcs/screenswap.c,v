head     38.4;
branch   ;
access   ;
symbols  V40_1:38.4 V39_62:38.4 V39_61:38.4 V39_60:38.4 V39_58:38.4 V39_56:38.4 V39_55:38.4 V39_54:38.4 V39_53:38.4 V39_52:38.4 V39_51:38.4 V39_50:38.4 V39_49:38.4 V39_48:38.4 V39_46:38.4 V39_45:38.4 V39_44:38.4 V39_42:38.4 V39_41:38.4 V39_40:38.4 V39_39:38.4 V39_38:38.4 V39_37:38.4 V39_36:38.4 V39_35:38.4 V39_34:38.4 V39_33:38.4 V39_32:38.4 V39_30:38.4 V39_28:38.3 V39_27:38.3 V39_26:38.3 V39_25:38.3 V39_24:38.3 V39_23:38.3 V39_22:38.3 V39_21:38.3 V39_20:38.3 V39_18:38.3 V39_16:38.3 V39_15:38.3 V39_14:38.3 V39_12:38.3 V39_10:38.3 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.4
date     91.11.15.20.20.16;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.09.30.14.11.10;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.22.25;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.13;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.4
log
@New screen swap that does not have the old flags/conditions
@
text
@/******************************************************************************
*
*	$Id: screenswap.c,v 38.3 91/09/30 14:11:10 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <hardware/dmabits.h>

#include "layersbase.h"

/****** layers.library/SwapBitsRastPortClipRect ********************************
*
*    NAME
*	SwapBitsRastPortClipRect -- Swap bits between common bitmap
*	                            and obscured ClipRect
*
*    SYNOPSIS
*	SwapBitsRastPortClipRect( rp, cr )
*	                          a0  a1
*
*	void SwapBitsRastPortClipRect( struct RastPort *, struct ClipRect *);
*
*    FUNCTION
*	Support routine useful for those that need to do some
*	operations not done by the layer library.  Allows programmer
*	to swap the contents of a small BitMap with a subsection of
*	the display. This is accomplished without using extra memory.
*	The bits in the display RastPort are exchanged with the
*	bits in the ClipRect's BitMap.
*
*	Note: the ClipRect structures which the layer library allocates are
*	actually a little bigger than those described in the graphics/clip.h
*	include file.  So be warned that it is not a good idea to have
*	instances of cliprects in your code.
*
*    INPUTS
*	rp - pointer to rastport
*	cr - pointer to cliprect to swap bits with
*
*    NOTE
*	Because the blit operation started by this function is done asynchronously,
*	it is imperative that a WaitBlit() be performed before releasing or using
*	the processor to modify any of the associated structures.
*
*    BUGS
*
*    SEE ALSO
*	graphics/clip.h, graphics/rastport.h, graphics/clip.h
*
*******************************************************************************/

void newscreentocr(struct RastPort *rp,struct ClipRect *cr,long minterm)
{
	BltBitMap(rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
			cr->BitMap,cr->bounds.MinX&15,0,
			cr->bounds.MaxX-cr->bounds.MinX+1,
			cr->bounds.MaxY-cr->bounds.MinY+1,
			minterm,-1,0);
}

void newcrtoscreen(struct RastPort *rp,struct ClipRect *cr,long minterm)
{
	BltBitMap(cr->BitMap,cr->bounds.MinX&15,0,
			rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
			cr->bounds.MaxX-cr->bounds.MinX+1,
			cr->bounds.MaxY-cr->bounds.MinY+1,
			minterm,-1,0);
}

/* similar to screenswap but only one way */
void screentocr(struct RastPort *rp,struct ClipRect *cr)
{
	newscreentocr(rp,cr,NANBC|NABC|ABNC|ABC);
}

void __stdargs __asm crtoscreen(register __a0 struct RastPort *rp,register __a1 struct ClipRect *cr)
{
	newcrtoscreen(rp,cr,NANBC|NABC|ABNC|ABC);
}

void __stdargs __asm screenswap(register __a0 struct RastPort *rp,register __a1 struct ClipRect *cr)
{
	newscreentocr(rp,cr,NANBC|NABC|ANBC|ABNC);
	newcrtoscreen(rp,cr,NANBC|NABC|ANBC|ABNC);
	newscreentocr(rp,cr,NANBC|NABC|ANBC|ABNC);
}
@


38.3
log
@Changed to use new prototypes for assembly calling
@
text
@d3 1
a3 1
*	$Id: screenswap.c,v 38.2 91/08/02 10:22:25 mks Exp Locker: mks $
d67 1
a67 3
	if(!(cr->Flags & CR_NEEDS_NO_CONCEALED_RASTERS))
	{
	    BltBitMap(rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
a71 1
	}
d76 5
a80 18
	if(!(cr->Flags & CR_NEEDS_NO_CONCEALED_RASTERS))
	{
	    BltBitMap(cr->BitMap,cr->bounds.MinX&15,0,
		      rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
		      cr->bounds.MaxX-cr->bounds.MinX+1,
		      cr->bounds.MaxY-cr->bounds.MinY+1,
		      minterm,-1,0);
	}
	else
	{
	    /* no concealed rasters, clear the rastport's bitmap */
	    BltBitMap(rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
		      rp->BitMap,cr->bounds.MinX,cr->bounds.MinY,
		      cr->bounds.MaxX-cr->bounds.MinX+1,
		      cr->bounds.MaxY-cr->bounds.MinY+1,
		      NULL,-1,0);

	}
d96 3
a98 10
long minterm = NANBC|NABC|ANBC|ABNC;
struct ClipRect copycr;

	copycr = *cr;

	copycr.Flags &= ~CR_NEEDS_NO_CONCEALED_RASTERS;

	newscreentocr(rp,&copycr,minterm);
	newcrtoscreen(rp,&copycr,minterm);
	newscreentocr(rp,&copycr,minterm);
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: screenswap.c,v 38.1 91/07/25 09:56:13 bart Exp $
d105 1
a105 1
void crtoscreen(struct RastPort *rp,struct ClipRect *cr)
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: screenswap.c,v 1.13 90/10/11 15:16:58 rsbx Exp $
d7 2
d22 1
a22 4

/*#define DEBUG*/

#define NEWSTUFF
a23 3
extern struct AmigaRegs custom;


d27 1
a27 1
*	SwapBitsRastPortClipRect -- Swap bits between common bitmap 
d65 1
a65 33
#ifdef NEWSTUFF

screenswap(rp,cr)
struct ClipRect *cr;
struct RastPort *rp;
{
	int minterm = NANBC|NABC|ANBC|ABNC;
	struct ClipRect copycr;
	copycr = *cr;
	copycr.Flags &= ~CR_NEEDS_NO_CONCEALED_RASTERS;

	newscreentocr(rp,&copycr,minterm);
	newcrtoscreen(rp,&copycr,minterm);
	newscreentocr(rp,&copycr,minterm);
}

screentocr(rp,cr)
/* similar to screenswap but only one way */
struct RastPort *rp;
struct ClipRect *cr;
{
	newscreentocr(rp,cr,NANBC|NABC|ABNC|ABC);
}
crtoscreen(rp,cr)
struct RastPort *rp;
struct ClipRect *cr;
{
	newcrtoscreen(rp,cr,NANBC|NABC|ABNC|ABC);
}

newscreentocr(rp,cr,minterm)
struct RastPort *rp;
struct ClipRect *cr;
d76 2
a77 3
newcrtoscreen(rp,cr,minterm)
struct RastPort *rp;
struct ClipRect *cr;
d99 10
a108 1
#else
d110 1
a110 3
screenswap(rp,cr)
struct ClipRect *cr;
struct RastPort *rp;
d112 2
a113 57
    int i;
/* RJ Change */
    int bltbytes, RPModulo, CRModulo;
    struct AmigaRegs *io;
    short BltSize;
    short BltSizV;
    short BltSizH;
    int offset;
    struct BitMap *crbm,*rpbm;
    /* swap contents of RastPort with ClipRect */
    /* first XOR contents of display into offscreen buffer */
    /* second XOR resulting offscreen buffer back into screen */
    /* third XOR screen back into off screen buffer */
    /* rp is assumed to be totally on the screen */
    /* cr is an offscreen buffer */

    /* this code currently just grabs the blitter */
    io = &custom;
    crbm = cr->BitMap;
    rpbm = rp->BitMap;

    OwnBlitter();
    WaitBlit();
    /* now some real rom code */
    /* set up blitter to blit asrc = onscreen
			      csrc = offscreen
			      dest = offscreen
    */
    io->bltcon1 = 0;
    io->bltcon0 = SRCA|SRCC|DEST|NANBC|NABC|ANBNC|ABNC; /* A xor C -> D */
    io->fwmask = (USHORT)0xffff >> (cr->bounds.MinX&0xF);
    i = cr->bounds.MaxX & 0xf;
    io->lwmask = (USHORT)0xffff << ( 15 - i);

/* RJ Change */
/*  bltbytes = crbm->BytesPerRow;*/
    bltbytes = BLITBYTES(cr->bounds.MinX, cr->bounds.MaxX);
    RPModulo = rpbm->BytesPerRow - bltbytes;
    CRModulo = crbm->BytesPerRow - bltbytes;
    
/* RJ Change */
/*  io->bltmda = rpbm->BytesPerRow - bltbytes;*/
/*  io->bltmdc = 0;*/
/*  io->bltmdd = 0;*/
    io->bltmda = RPModulo;
    io->bltmdc = CRModulo;
    io->bltmdd = CRModulo;

    BltSizH = (bltbytes>>1);
    BltSizV = (bounds.MaxY - bounds.MinY + 1);
    BltSize = ((BltSizV)<<6) + (0x3f & BltSizH);

#ifdef DEBUG
    printf("bltbytes = %lx\n",bltbytes);
    printf("XOR into offscreen buffer\n");
    Debug();
#endif
d115 1
a115 20
    offset = (cr->bounds.MinY * rpbm->BytesPerRow) + (cr->bounds.MinX>>3);
    for(i = 0;i < crbm->Depth; i++)
    {
	if ( (rp->Mask>>i) & 1)
	{
	    WaitBlit();
	    io->bltpta = offset + rpbm->Planes[i];
	    io->bltptc = crbm->Planes[i];
	    io->bltptd = crbm->Planes[i];
	    if(io->vposr & (0x2000))
	    {
		io->bltsizv = (BltSizV & 0x7fff);
		io->bltsizh = (BltSizH & 0x07ff);
	    }
	    else
	    {
		io->bltsize = BltSize;
	    }
	}
    }
d117 1
a117 32
    WaitBlit();
/* RJ Change */
/*  io->bltmdc = rpbm->BytesPerRow - bltbytes;*/
/*  io->bltmdd = rpbm->BytesPerRow - bltbytes;*/
/*  io->bltmda = 0;*/
    io->bltmdc = RPModulo;
    io->bltmdd = RPModulo;
    io->bltmda = CRModulo;
    /* set up for the other way */
#ifdef DEBUG
    printf("XOR into screen buffer\n");
    Debug();
#endif
    for(i = 0;i < rpbm->Depth; i++)
    {
	if ( (rp->Mask>>i) & 1)
	{
	    WaitBlit();
	    io->bltptc = offset + rpbm->Planes[i];
	    io->bltptd = offset + rpbm->Planes[i];
	    io->bltpta = crbm->Planes[i];
	    if(io->vposr & (0x2000))
	    {
		io->bltsizv = (BltSizV & 0x7fff);
		io->bltsizh = (BltSizH & 0x07ff);
	    }
	    else
	    {
		io->bltsize = BltSize;
	    }
	}
    }
d119 3
a121 34
    WaitBlit();
/* RJ Change */
/*  io->bltmda = rpbm->BytesPerRow - bltbytes;*/
/*  io->bltmdc = 0;*/
/*  io->bltmdd = 0;*/
    io->bltmda = RPModulo;
    io->bltmdc = CRModulo;
    io->bltmdd = CRModulo;
#ifdef DEBUG
    printf("XOR into offscreen buffer\n");
    Debug();
#endif
    /* now back again */
    for(i = 0;i < rpbm->Depth; i++)
    {
	if ( (rp->Mask>>i) & 1)
	{
	    WaitBlit();
	    io->bltpta = offset + rpbm->Planes[i];
	    io->bltptc = crbm->Planes[i];
	    io->bltptd = crbm->Planes[i];
	    if(io->vposr & (0x2000))
	    {
		io->bltsizv = (BltSizV & 0x7fff);
		io->bltsizh = (BltSizH & 0x07ff);
	    }
	    else
	    {
		io->bltsize = BltSize;
	    }
	}
    }
    
    DisownBlitter();
a122 1
#endif
@
