head     38.1;
branch   ;
access   ;
symbols  V40_1:38.1 V39_62:38.1 V39_61:38.1 V39_60:38.1 V39_58:38.1 V39_56:38.1 V39_55:38.1 V39_54:38.1 V39_53:38.1 V39_52:38.1 V39_51:38.1 V39_50:38.1 V39_49:38.1 V39_48:38.1 V39_46:38.1 V39_45:38.1 V39_44:38.1 V39_42:38.1 V39_41:38.1 V39_40:38.1 V39_39:38.1 V39_38:38.1 V39_37:38.1 V39_36:38.1 V39_35:38.1 V39_34:38.1 V39_33:38.1 V39_32:38.1 V39_30:38.1 V39_28:38.1 V39_27:38.1 V39_26:38.1 V39_25:38.1 V39_24:38.1 V39_23:38.1 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V38_7:38.1 V38_6:38.1 First_Native_Build:38.1;
locks    ; strict;
comment  @ * @;


38.1
date     91.07.25.09.55.30;  author bart;  state Exp;
branches ;
next     ;


desc
@@



38.1
log
@begin_v38_development
@
text
@/******************************************************************************
*
*	$Id: layerstartup.c,v 37.2 91/03/13 13:01:11 mks Exp $
*
******************************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/resident.h>
#include <exec/libraries.h>

#include "layers_rev.h"
#include "layersbase.h"

/*#define DEBUG*/

extern char layers_library[];
extern int hookEntry();
extern int HookFill();
extern int newmain();
extern int NewList();

/*
 * Here we have a major kludge to get the ENDSKIP to point to
 * the real end of the layers code.  Since ROM.lib is the last
 * thing linked in and _NewList is the last thing in ROM.lib
 * that we use, we will make _layer_end be the same as _NewList
 * and thus be able to encompass the whole ROM.lib.  This will
 * make debugging tools much easier to write since the ROMtag
 * will correctly identify the end of the code.
 */
#define	layer_end	NewList

struct Resident layertag =
{
	RTC_MATCHWORD,
	&layertag,
	layer_end,
	RTW_COLDSTART,
	VERSION,				/* version number */
	NT_LIBRARY,
	31,				/* must be before intuition */
	layers_library,
	VSTRING,
	newmain
};

extern struct GfxBase *GfxBase;

#define SHORTTABLE

#ifndef SHORTTABLE
extern
    OpenLayerLib(),
    CloseLayerLib(),
    ExpungeLayerLib(),
    ExtFuncLayerLib(),
    InitLayers(),
    CreateUpfrontLayer(),
    CreateBehindLayer(),
    UpfrontLayer(),
    BehindLayer(),
    MoveLayer(),
    SizeLayer(),
    ScrollLayer(),
    BeginUpdate(),
    EndUpdate(),
    DeleteLayer(),
    LockLayer(),
    UnlockLayer(),
    LockLayers(),
    UnlockLayers(),
    LockLayerInfo(),
	SwapBitsRastPortClipRect(),
	WhichLayer(),
    UnlockLayerInfo(),
	NewLayerInfo(),
	DisposeLayerInfo(),
	FattenLayerInfo(),
	ThinLayerInfo(),
	MoveLayerInFrontOf();
	InstallClipRegion(),
	MoveSizeLayer();
	CreateUpfrontHookLayer(),
	CreateBehindHookLayer(),
	InstallLayerHook(),
	/* these are not used anymore */


int (*layertable[])() =
{
	OpenLayerLib,
	CloseLayerLib,
	ExpungeLayerLib,
	ExtFuncLayerLib,
	InitLayers,
	CreateUpfrontLayer,
	CreateBehindLayer,
	UpfrontLayer,
	BehindLayer,
	MoveLayer,
	SizeLayer,
	ScrollLayer,
	BeginUpdate,
	EndUpdate,
	DeleteLayer,
	LockLayer,
	UnlockLayer,
	LockLayers,
	UnlockLayers,
	LockLayerInfo,
	SwapBitsRastPortClipRect,
	WhichLayer,
    UnlockLayerInfo,
	NewLayerInfo,
	DisposeLayerInfo,
	FattenLayerInfo,
	ThinLayerInfo,
	MoveLayerInfrontOf,
	InstallClipRegion,
	MoveSizeLayer,
	CreateUpfrontHookLayer,
	CreateBehindHookLayer,
	InstallLayerHook,
	/* these are not used anymore */
	/* you need to edit layertable.asm */
	(int *)-1
};
#else
extern	WORD layertable[];
#endif

char layers_library[] = "layers.library";

#define REBUILD_OCCASIONALLY 7

main()
{
	struct LayersBase *l;

	l = (struct LayersBase *)MakeLibrary(
				layertable,
				0,0,sizeof(struct LayersBase));
		/* this code ignores the last parameter to MakeLibrary*/

	l->LibNode.lib_Node.ln_Name = layers_library;
	l->LibNode.lib_Version = VERSION;
	l->LibNode.lib_Revision = REVISION;
	l->LibNode.lib_Flags |= LIBF_SUMUSED|LIBF_CHANGED;
	l->LibNode.lib_OpenCnt = 1;	/* never expunge */
	l->LibNode.lib_Node.ln_Type = NT_LIBRARY;
	l->LibNode.lib_IdString = layertag.rt_IdString;
	l->ExecBase = (ULONG *)(*((ULONG *)4));
	AddLibrary(l);

	/* the following statement is assumed to return something <>0 */
	l->GfxBase = (struct GfxBase *)OpenLibrary("graphics.library",0);

	/* use hooks for backfill -- bart */
	l->UtilityBase = (ULONG *)OpenLibrary("utility.library",0);
	l->BackFillHook.h_Entry 	= (ULONG *())hookEntry;
	l->BackFillHook.h_SubEntry 	= (ULONG *())HookFill;
	l->BackFillHook.h_Data 		= (VOID *)   l;

	l->RebuildIncrement 		= REBUILD_OCCASIONALLY;

#ifdef DEBUG
	printf("now returning from init layer library\n");
	/*Debug();*/
#endif
}
@
