head     39.1;
branch   ;
access   ;
symbols  V40_1:39.1 V39_62:39.1 V39_61:39.1 V39_60:39.1 V39_58:38.20 V39_56:38.20 V39_55:38.20 V39_54:38.20 V39_53:38.20 V39_52:38.20 V39_51:38.20 V39_50:38.20 V39_49:38.20 V39_48:38.20 V39_46:38.20 V39_45:38.20 V39_44:38.20 V39_42:38.20 V39_41:38.19 V39_40:38.19 V39_39:38.19 V39_38:38.18 V39_37:38.18 V39_36:38.18 V39_35:38.18 V39_34:38.18 V39_33:38.17 V39_32:38.17 V39_30:38.15 V39_28:38.13 V39_27:38.13 V39_26:38.13 V39_25:38.12 V39_24:38.12 V39_23:38.10 V39_22:38.10 V39_21:38.10 V39_20:38.10 V39_18:38.10 V39_16:38.10 V39_15:38.10 V39_14:38.10 V39_12:38.9 V39_10:38.8 V38_7:38.5 V38_6:38.5 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


39.1
date     92.06.05.11.47.06;  author mks;  state Exp;
branches ;
next     38.20;

38.20
date     92.02.12.13.52.57;  author mks;  state Exp;
branches ;
next     38.19;

38.19
date     92.01.10.18.20.35;  author mks;  state Exp;
branches ;
next     38.18;

38.18
date     91.12.03.14.48.35;  author mks;  state Exp;
branches ;
next     38.17;

38.17
date     91.11.19.12.48.37;  author mks;  state Exp;
branches ;
next     38.16;

38.16
date     91.11.18.18.35.03;  author mks;  state Exp;
branches ;
next     38.15;

38.15
date     91.11.18.13.30.20;  author mks;  state Exp;
branches ;
next     38.14;

38.14
date     91.11.15.20.15.22;  author mks;  state Exp;
branches ;
next     38.13;

38.13
date     91.11.09.00.40.08;  author mks;  state Exp;
branches ;
next     38.12;

38.12
date     91.11.08.13.10.05;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     91.11.08.10.43.49;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     91.10.24.08.39.10;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     91.10.23.16.52.13;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     91.10.04.15.49.36;  author bart;  state Exp;
branches ;
next     38.7;

38.7
date     91.10.03.12.51.06;  author bart;  state Exp;
branches ;
next     38.6;

38.6
date     91.09.30.14.10.01;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.08.21.16.22.20;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.08.19.14.33.34;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.12.17.04.04;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.20.22;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.55.15;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@Completely removed the LayerInfoExtra Buffered Cliprects list...
It was not used anymore and thus will save some code and help
the speed a bit.
@
text
@/******************************************************************************
*
*	$Id: layers.c,v 38.20 92/02/12 13:52:57 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/memory.h>
#include <utility/hooks.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>
#include <hardware/blit.h>

#include "layersbase.h"

#define BUFFER_CLIPRECTS	8

/* Prototypes for functions in this file */
BOOL fattenlayerinfo(struct Layer_Info *);
BOOL xfattenlayerinfo(struct Layer_Info *);
void thinlayerinfo(struct Layer_Info *);
void xthinlayerinfo(struct Layer_Info *);

#define	clear_struct(p,n)	memset(p,0,n)

/****** layers.library/InitLayers **********************************************
*
*    NAME
*	InitLayers -- Initialize Layer_Info structure
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    SYNOPSIS
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*	InitLayers( li )
*	            a0
*
*	void InitLayers( struct Layer_Info *);
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    FUNCTION
*	Initialize Layer_Info structure in preparation to use
*	other layer operations on this list of layers.
*	Make the Layers unlocked (open), available to layer operations.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*    BUGS
*
*    SEE ALSO
*	NewLayerInfo, DisposeLayerInfo, graphics/layers.h
*
*******************************************************************************/

void __stdargs __asm initlayers(register __a0 struct Layer_Info *li)
{
	clear_struct(li,sizeof(struct Layer_Info));
	li->FreeClipRects=NULL;
	NewList((struct List *)&(li->gs_Head));	/* used for storage */
	InitSemaphore(&(li->Lock));
	li->fatten_count = -1;
}

/****** layers.library/FattenLayerInfo *****************************************
*
*    NAME
*	FattenLayerInfo -- convert 1.0 LayerInfo to 1.1 LayerInfo
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    SYNOPSIS
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*	FattenLayerInfo( li )
*	                 a0
*
*	LONG FattenLayerInfo( struct Layer_Info *);
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    FUNCTION
*	V1.1 software and any later releases need to have more info in the
*	Layer_Info structure. To do this in a 1.0 supportable manner requires
*	allocation and deallocation of the memory whenever most
*	layer library functions are called.  To prevent unnecessary
*	allocation/deallocation FattenLayerInfo will preallocate the
*	necessary data structures and fake out the layer library into
*	thinking it has a LayerInfo gotten from NewLayerInfo.
*	NewLayerInfo is the approved method for getting this structure.
*	When a program needs to give up the LayerInfo structure it
*	must call ThinLayerInfo before freeing the memory. ThinLayerInfo
*	is not necessary if New/DisposeLayerInfo are used however.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*    BUGS
*
*    SEE ALSO
*
*	NewLayerInfo, ThinLayerInfo, DisposeLayerInfo, graphics/layers.h
*
*******************************************************************************/

BOOL __stdargs __asm extern_fattenlayerinfo(register __a0 struct Layer_Info *li)
{
	if (xfattenlayerinfo(li))
	{
		li->Flags |= NEWLAYERINFO_CALLED;
		return(TRUE);
	}
	return(FALSE);
}

/****** layers.library/ThinLayerInfo *******************************************
*
*    NAME
*	ThinLayerInfo -- convert 1.1 LayerInfo to 1.0 LayerInfo.
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    SYNOPSIS
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*	ThinLayerInfo( li )
*	               a0
*
*	void ThinLayerInfo( struct Layer_Info *);
*	OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
*
*    FUNCTION
*	return the extra memory needed that was allocated with
*	FattenLayerInfo. This is must be done prior to freeing
*	the Layer_Info structure itself. V1.1 software should be
*	using DisposeLayerInfo.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*    BUGS
*
*    SEE ALSO
*	DisposeLayerInfo, FattenLayerInfo, graphics/layers.h
*
*******************************************************************************/

void __stdargs __asm extern_thinlayerinfo(register __a0 struct Layer_Info *li)
{
	xthinlayerinfo(li);
	li->Flags &= ~NEWLAYERINFO_CALLED;
}

/****** layers.library/NewLayerInfo ********************************************
*
*    NAME
*	NewLayerInfo -- Allocate and Initialize full Layer_Info structure.
*
*    SYNOPSIS
*	result = NewLayerInfo()
*	d0
*
*	struct Layer_Info *NewLayerInfo( void );
*
*    FUNCTION
*	Allocate memory required for full Layer_Info structure.
*	Initialize Layer_Info structure in preparation to use
*	other layer operations on this list of layers.
*	Make the Layer_Info unlocked (open).
*
*    INPUTS
*	None
*
*    RESULT
*	result- pointer to Layer_Info structure if successful
*	        NULL if not enough memory
*
*    BUGS
*
*    SEE ALSO
*	graphics/layers.h
*
*******************************************************************************/

struct Layer_Info * __stdargs NewLayerInfo(void)
{
	struct Layer_Info *li;
	if (li = AllocMem(sizeof(struct Layer_Info),MEMF_PUBLIC))
	{
		initlayers(li);
		if (!xfattenlayerinfo(li))
		{
			FreeMem(li,sizeof(struct Layer_Info));
			return(FALSE);
		}
		li->Flags |= NEWLAYERINFO_CALLED;
	}
	return(li);
}

/****** layers.library/DisposeLayerInfo ****************************************
*
*    NAME
*	DisposeLayerInfo -- Return all memory for LayerInfo to memory pool
*
*    SYNOPSIS
*	DisposeLayerInfo( li )
*	                  a0
*
*	void DisposeLayerInfo( struct Layer_Info *);
*
*    FUNCTION
*	return LayerInfo and any other memory attached to this LayerInfo
*	to memory allocator.
*
*	Note: if you wish to delete the layers associated with this Layer_Info
*	    structure, remember to call DeleteLayer() for each of the layers
*	    before calling DisposeLayerInfo().
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*    EXAMPLE
*
*	-- delete the layers associated this Layer_Info structure --
*
*	DeleteLayer(li,simple_layer);
*	DeleteLayer(li,smart_layer);
*
*	-- see documentation on DeleteLayer about deleting SuperBitMap layers --
*	my_super_bitmap_ptr = super_layer->SuperBitMap;
*	DeleteLayer(li,super_layer);
*
*	-- now dispose of the Layer_Info structure itself --
*	DisposeLayerInfo(li);
*
*
*    BUGS
*
*    SEE ALSO
*	DeleteLayer, graphics/layers.h
*
*******************************************************************************/

void __stdargs __asm disposelayerinfo(register __a0 struct Layer_Info *li)
{
	xthinlayerinfo(li);
	FreeMem(li,sizeof(struct Layer_Info));
}

BOOL fatten_lock(struct Layer_Info *li)
{
	if (!fattenlayerinfo(li))	return (FALSE);
	locklayers(li);
	return(TRUE);
}

void unlock_thin(struct Layer_Info *li)
{
	unlocklayers(li);
	thinlayerinfo(li);
}

BOOL fattenlayerinfo(struct Layer_Info *li)
{
	LockLayerInfo(li);
	if ( (li->Flags & NEWLAYERINFO_CALLED) || (xfattenlayerinfo(li)) ) return(TRUE);
	UnlockLayerInfo(li);
	return(FALSE);
}

BOOL xfattenlayerinfo(struct Layer_Info *li)
{
struct LayerInfo_extra *lie;

	if (++li->fatten_count != 0)	return(TRUE);
	lie = li->LayerInfo_extra = AllocMem(sizeof(struct LayerInfo_extra),MEMF_PUBLIC|MEMF_CLEAR);
	if (lie)
	{
		NewList((struct List *)&(lie->mem));
		return(TRUE);
	}
	return(FALSE);
}

void thinlayerinfo(struct Layer_Info *li)
{
	if (0==(li->Flags & NEWLAYERINFO_CALLED)) xthinlayerinfo(li);
	UnlockLayerInfo(li);
}

void xthinlayerinfo(struct Layer_Info *li)
{
struct LayerInfo_extra *lie;

	if (--li->fatten_count < 0)
	{
		if (lie=li->LayerInfo_extra) FreeMem(lie,sizeof(struct LayerInfo_extra));
		li->LayerInfo_extra = 0;
	}
}

void default_layer(struct Layer_Info *li,struct Layer *l,struct Rectangle *r)
{
int i;

	/* all fields are assumed to already by zero */
	l->bounds = *r;
	l->Width = r->MaxX - r->MinX + 1;
	l->Height = r->MaxY - r->MinY +1;
	l->DamageList = 0;
	l->LayerInfo = li;
	InitSemaphore(&l->Lock);
	for (i = 0; i<li->LockLayersCount ; i++) LockLayerRom(l);
}

/* and call r_split */
/* generate additional list of ClipRects for the Display */
BOOL genrect(struct Layer *l)
{
	struct ClipRect *cr;

	if (!(cr = newAllocCR(l)))
	{
		return(FALSE);
	}

	cr->bounds = l->bounds;
	/* insert at head of list */
	cr->Next = l->ClipRect;
    	l->ClipRect = cr;

	return(r_split(l,l->front,cr));
}

void __stdargs __asm strip_onscreen_cliprects(register __a0 struct Layer_Info *li)
{
struct Layer *l;
struct ClipRect *cr, *crtmp;

	for (l = li->top_layer; l ; l = l->back)
	{
		l->_cliprects = NULL;

		/* remove all onscreen cliprects */
		for (cr = l->ClipRect; cr ; cr = crtmp)
		{
			crtmp = cr->Next;
			if (cr->lobs == 0)
			{
				Store_CR(l, cr);
				newDeleteCR(l, cr);
			}
    		}
	}
}

void __stdargs __asm gen_onscreen_cliprects(register __a0 struct Layer_Info *li)
{
struct Layer *l;
struct ClipRect *cr, *crtmp;
BOOL status;

	status=TRUE;
	for (l=li->top_layer;l;l=l->back) status &= genrect(l);

	if (!status)
	{
		/* we get here if genrect() failed [no memory] */

		/* remove partial results */
		for (l=li->top_layer;l;l=l->back)
		{
			/* remove all onscreen cliprects */
			for (cr=l->ClipRect;cr;cr=crtmp)
			{
				crtmp = cr->Next;
				if (!(cr->lobs)) newDeleteCR(l,cr);
			}
		}

		for (l=li->top_layer;l;l=l->back)
		{
			while (cr=UnStore_CR(l)) linkcr(l, cr);
		}
	}

	/* free any leftover cliprects */
	Freecrlist(li->FreeClipRects);
	li->FreeClipRects=NULL;
}


void regen_display(struct Layer_Info *wi)
{
	strip_onscreen_cliprects(wi);
	gen_onscreen_cliprects(wi);
}
@


38.20
log
@BitMap allocation is now in CRTool.asm
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.19 92/01/10 18:20:35 mks Exp Locker: mks $
a281 1
		lie->buffered_cliprects=NULL;
@


38.19
log
@Had to change a function to be assembly callable...
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.18 91/12/03 14:48:35 mks Exp Locker: mks $
a29 1
ULONG bitmapsize(long);
a399 67
}


ULONG bitmapsize(long depth)
{
	/* returns number of bytes needed for this structure with */
	/* depth bitplanes */
	return(sizeof(struct BitMap) - ((8-depth)<<2));
}

void free_bitmap(struct BitMap *bm)
{
int i;
int bytecount;

    	bytecount = bm->BytesPerRow * bm->Rows;
	for(i = 0;i < bm->Depth;i++)
    	{
		FreeMem(bm->Planes[i],bytecount);
	}
}

BOOL __stdargs __asm get_concealed_rasters(register __a0 struct Layer *l,register __a1 struct ClipRect *cr)
{
int i;
int bytecount;
int depth;
struct BitMap *bm;

	depth = l->rp->BitMap->Depth;
	/* lets try to conserve memory */
	/* for 2 bitplane system this will save 24 bytes per bitmap */
	if (bm = (struct BitMap *)LayersAllocMem(bitmapsize(depth),MEMF_CLEAR,l->LayerInfo))
	{
		InitBitMap(bm,depth,
			((cr->bounds.MaxX) & (~0xf))-((cr->bounds.MinX) & (~0xf))+16,
			cr->bounds.MaxY-cr->bounds.MinY + 1);

		bytecount=bm->BytesPerRow * bm->Rows;

		for(i=0;i<depth;i++)
		{
			bm->Planes[i] = (UBYTE *)LayersAllocMem(bytecount,MEMF_CHIP,l->LayerInfo);
			if (bm->Planes[i] == 0)
			{
				bm->Depth=i;
				free_bitmap(bm);
				FreeMem(bm,bitmapsize(depth));
				bm=NULL;
				break;
			}
		}
	}

	cr->BitMap = bm;

	return((bm!=NULL));
}

void __stdargs __asm free_concealed_rasters(register __a0 struct ClipRect *cr)
{
	if (cr->BitMap)
	{
		free_bitmap(cr->BitMap);
		FreeMem(cr->BitMap,bitmapsize(cr->BitMap->Depth));
		cr->BitMap = 0;
	}
@


38.18
log
@Now checks to see if the lie was actually allocated.
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.17 91/11/19 12:48:37 mks Exp Locker: mks $
d423 1
a423 1
BOOL get_concealed_rasters(struct Layer *l,struct ClipRect *cr)
@


38.17
log
@Changed the way old cliprects are buffered for on-screen
cliprect generation
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.16 91/11/18 18:35:03 mks Exp Locker: mks $
d301 1
a301 3
		lie = li->LayerInfo_extra;
		/* Why was a wait blit here? */
		FreeMem(lie,sizeof(struct LayerInfo_extra));
@


38.16
log
@Simplified the free cliprect list
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.15 91/11/18 13:30:20 mks Exp Locker: mks $
a29 2
void STORE_CR(struct Layer *,struct ClipRect *);
struct ClipRect *UNSTORE_CR(struct Layer *);
d282 2
a283 2
		NewList(&lie->mem);
		NewList(&lie->buffered_cliprects);
a321 35

struct Kludge_CR
{
	void *No_Touch_1;
	void *No_Touch_2;
	void *No_Touch_3;
	void *No_Touch_4;
struct	Rectangle bounds1;
struct	Rectangle bounds2;
struct	Kludge_CR *Next;
	void *No_Touch_5;
};

void STORE_CR(struct Layer *l,struct ClipRect *cr)
{
	((struct Kludge_CR *)cr)->bounds2 = ((struct Kludge_CR *)cr)->bounds1;
	((struct Kludge_CR *)cr)->Next = (struct Kludge_CR *)(l->_cliprects);
	l->_cliprects = cr;
}

struct ClipRect *UNSTORE_CR(struct Layer *l)
{
	struct ClipRect *cr;

	if (cr = l->_cliprects)
	{
		l->_cliprects = (struct ClipRect *)((struct Kludge_CR *)cr)->Next;
		((struct Kludge_CR *)cr)->bounds1 = ((struct Kludge_CR *)cr)->bounds2;

		Remove((struct Node *)cr);
	}

	return cr;
}

a340 1

d343 2
a344 2
	struct Layer *l;
	struct ClipRect *cr, *crtmp;
d356 1
a356 1
				STORE_CR(l, cr);
d365 3
a367 3
	struct Layer *l;
	struct ClipRect *cr, *crtmp;
	int status;
d369 2
a370 7
	for (l = li->top_layer; l ; l = l->back)
	{
		if (!(status = genrect(l)))
		{
			break;
		}
	}
d377 1
a377 1
		for (l = li->top_layer; l ; l = l->back)
d380 1
a380 1
			for (cr = l->ClipRect; cr ; cr = crtmp)
d383 1
a383 4
				if (cr->lobs == 0)
				{
					newDeleteCR(l,cr);
				}
d387 1
a387 3
		/*$*/

		for (l = li->top_layer; l ; l = l->back)
d389 1
a389 4
			while (cr = UNSTORE_CR(l))
			{
				linkcr(l, cr);
	    		}
a469 12
}

void Clear_BitMap(struct BitMap *bm)
{
    int i;
    long BltSize;

    BltSize = (bm->Rows<<16)|bm->BytesPerRow;
    for (i=0;i<bm->Depth;i++)
    {
		BltClear(bm->Planes[i],BltSize,2);
    }
@


38.15
log
@Removed the global backfill hook initialization
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.14 91/11/15 20:15:22 mks Exp Locker: mks $
d68 1
a68 1
	NewList((struct List *)&(li->FreeClipRects));	/* used for storage */
d445 2
a446 4
	while (cr = (struct ClipRect *)RemHead((struct List *)&(li->FreeClipRects)))
	{
		Freecr(cr);
	}
@


38.14
log
@Added routine to install the LayerInfoHook
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.13 91/11/09 00:40:08 mks Exp Locker: mks $
a534 67
}


/****** layers.library/InstallLayerInfoHook ***********************************
*
*    NAME
*	InstallLayerInfoHook - Install a backfill hook for non-layer      (V39)
*
*    SYNOPSIS
*	oldhook=InstallLayerInfoHook(li,hook)
*	d0                           a0 a1
*
*	struct Hook *InstallLayerInfoHook(struct Layer_Info *,struct Hook *);
*
*    FUNCTION
*	This function will install a backfill hook for the Layer_Info
*	structure passed.  This backfill hook will be used to clear the
*	background area where no layer exists.  The hook function is
*	passed the RastPort and the bounds just like the layer backfill
*	hook.  However, the layer pointer is not passed as there is no
*	layer in the Layer_Info backfill.
*
*    INPUTS
*	li - pointer to LayerInfo structure
*
*	hook -  pointer to layer callback Hook which will be called
*	        with object == (struct RastPort *) result->RastPort
*	        and message == [ NULL, (struct Rectangle) bounds,
*	                       (WORD) offsetx, (WORD) offsety ]
*
*	        This hook should fill the Rectangle in the RastPort
*	        with the BackFill pattern appropriate for offset x/y.
*
*	        If hook is NULL, the default hook will be installed.
*		If hook is 1, a NO-OP hook will be installed
*
*    RESULTS
*	oldhook - Returns the backfill hook that was in the Layer_Info.
*	          Returns NULL if the default was installed.
*	          Returns 1 if there was a NO-OP hook.
*	          Returns -1 if there was some failure.
*
*    NOTES
*	When the hook is first installed, it is *NOT* called.  It is up
*	to the application to know if it is safe to fill in the area.
*	Since the hook will be called when a layer is deleted, the easiest
*	way to have layers call this hook is to create and delete a backdrop
*	layer that is the size of the area.
*
*    SEE ALSO
*	InstallLayerHook
*
*******************************************************************************/
struct Hook * __asm InstallLayerInfoHook(register __a0 struct Layer_Info *li,register __a1 struct Hook *hook)
{
struct Hook *oldHook;

	oldHook=(struct Hook *)(-1);

	if (fatten_lock(li))
	{
		oldHook=li->BlankHook;
		li->BlankHook=hook;

		unlock_thin(li);
	}
	return(oldHook);
@


38.13
log
@Downcoded a few of the memory routines into layersallocmem.asm
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.12 91/11/08 13:10:05 mks Exp Locker: mks $
d69 1
a69 1
	NewList(&(li->gs_Head));	/* used for storage */
d281 1
a281 3
	li->LayerInfo_extra_size = sizeof(struct LayerInfo_extra);
	lie = li->LayerInfo_extra = (struct LayerInfo_extra *)
		AllocMem(sizeof(struct LayerInfo_extra),MEMF_PUBLIC|MEMF_CLEAR);
d535 67
@


38.12
log
@Removed unused internal prototype
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.11 91/11/08 10:43:49 mks Exp Locker: mks $
a33 26
struct ClipRect * __stdargs __asm AllocCR(register __a0 struct Layer_Info *li)
{
struct ClipRect *cr;

	if (li)
	{
	struct List *list = &(((struct LayerInfo_extra *)(li->LayerInfo_extra))->buffered_cliprects);

		if (!(cr=(struct ClipRect *)RemHead(list)))
		{
		int i;

			/* allocate a chunk */
			cr = (struct ClipRect *)LayersAllocMem(BUFFER_CLIPRECTS*sizeof(*cr),MEMF_CLEAR,li);
			/* add all except the one to free list */
			for (i = 1; i < BUFFER_CLIPRECTS; i++,cr++) AddTail(list,(struct Node *)cr);
		}
	}
	else
	{
		cr=(struct ClipRect *)LayersAllocMem(sizeof(struct ClipRect),MEMF_CLEAR,li);
	}

	return(cr);
}

a359 44


struct ClipRect *newAllocCR(struct Layer *l)
{
	struct ClipRect *cr;

	cr = (struct ClipRect *)RemHead((struct List *)&(l->LayerInfo->FreeClipRects));

	if (!cr)
	{
		cr = AllocCR(0);
	}
	else
	{
		cr->lobs = NULL;
		cr->BitMap = NULL;
		cr->Flags = NULL;
	}

	return(cr);
}


void newDeleteCR(struct Layer *l,struct ClipRect *cr)
{
    struct ClipRect *p;

    p = l->ClipRect;

	/* unlink cr */

    if (p == cr)
    {
		l->ClipRect = cr->Next;
    }
    else
    {
		while (p->Next != cr) p = p->Next;
		p->Next = cr->Next;
    }

	AddTail((struct List *)&(l->LayerInfo->FreeClipRects),(struct Node *)cr);
}

@


38.11
log
@Saved some code
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.10 91/10/24 08:39:10 mks Exp Locker: mks $
a31 1
BOOL genrect(struct Layer *);
@


38.10
log
@Removed ?unneeded? waitblit...  (I see no reason it was needed)
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.9 91/10/23 16:52:13 mks Exp Locker: mks $
d448 1
a448 6
	if (!r_split(l, l->front, cr))
	{
		return(FALSE);
	}

	return(TRUE);
@


38.9
log
@Changed routine to be callable from assembly
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.8 91/10/04 15:49:36 bart Exp Locker: mks $
d333 1
a333 2
		/* free off blitbuff */
		WaitBlit();
@


38.8
log
@minor byte savings
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.7 91/10/03 12:51:06 bart Exp Locker: bart $
d594 1
a594 1
void free_concealed_rasters(struct ClipRect *cr)
@


38.7
log
@removed call to unlinkcr
unlink locally
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.6 91/09/30 14:10:01 mks Exp Locker: bart $
d298 1
a298 2
	if (li->Flags & NEWLAYERINFO_CALLED)	return(TRUE);
	if (xfattenlayerinfo(li))	return(TRUE);
d575 1
a575 1
		for(i=0;i<depth;i++) if (bm)
d582 1
a582 1
    				FreeMem(bm,bitmapsize(depth));
d584 1
d612 1
a612 1
	BltClear(bm->Planes[i],BltSize,2);
@


38.6
log
@Changed to use new prototypes for assembly calling
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.5 91/08/21 16:22:20 mks Exp Locker: mks $
d414 16
a429 1
	unlinkcr(l,cr);
@


38.5
log
@Cleaned up some code and minor "bugs" found during the search
for the low memory bug in layers.
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.4 91/08/19 14:33:34 mks Exp Locker: mks $
d444 1
a444 1
void strip_onscreen_cliprects(struct Layer_Info *li)
d466 1
a466 1
void gen_onscreen_cliprects(struct Layer_Info *li)
@


38.4
log
@Removed the unused __asm from the NewLayerInfo() routine.
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.3 91/08/12 17:04:04 mks Exp Locker: mks $
a33 1
void free_bitmap(struct BitMap *);
d531 12
d545 4
a548 4
    int i;
    int bytecount;
	int depth;
    struct BitMap *bm;
d553 7
a559 2
    bm = (struct BitMap *)LayersAllocMem(bitmapsize(depth),MEMF_CLEAR,l->LayerInfo);
	if (bm == 0)	return(FALSE);
d561 10
a570 18
    bytecount =
     BYTECOUNT(cr->bounds.MinX,cr->bounds.MinY,cr->bounds.MaxX,cr->bounds.MaxY);
    cr->BitMap = bm;

    InitBitMap(bm,depth,
	    BLITBYTES(cr->bounds.MinX,cr->bounds.MaxX)<<3,
		    cr->bounds.MaxY-cr->bounds.MinY + 1);
    for(i=0;i<depth;i++)
	{
		bm->Planes[i] = (UBYTE *)LayersAllocMem(bytecount,MEMF_CHIP,l->LayerInfo);
		if (bm->Planes[i] == 0)
		{
			int j;
			for (j = 0; j < i ; j++)
				FreeMem(bm->Planes[j],bytecount);
			FreeMem(bm,bitmapsize(depth));
			cr->BitMap = 0;
			return(FALSE);
d573 4
a576 1
	return(TRUE);
d581 6
a586 2
    free_bitmap(cr->BitMap);
    cr->BitMap = 0;
a598 16
}

void free_bitmap(struct BitMap *bm)
{
    int i;
    int bytecount;

	if (bm)
	{
	    	bytecount = bm->BytesPerRow * bm->Rows;
    		for(i = 0;i < bm->Depth;i++)
    		{
			FreeMem(bm->Planes[i],bytecount);
    		}
    		FreeMem(bm,bitmapsize(bm->Depth));
	}
@


38.3
log
@Cleaned up prototype needed for AllocCR() as I get ready for
some future work...
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.2 91/08/02 10:20:22 mks Exp Locker: mks $
d217 1
a217 1
struct Layer_Info * __stdargs __asm NewLayerInfo(void)
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: layers.c,v 38.1 91/07/25 09:55:15 bart Exp $
d36 1
a36 1
struct ClipRect *AllocCR(struct Layer_Info *li)
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: layers.c,v 1.19 91/01/25 10:13:36 bart Exp $
d7 2
d23 1
a23 3
/*#define DEBUG
#define DEBUG1*/
/*#define DEBUGDEBUG*/
d25 10
a34 4
/*#define PROFILE*/
#ifdef PROFILE
short alloccr_metric;
#endif
d36 3
a38 3
#define METRIC(x)       /* x++ */

#define BUFFER_CLIPRECTS	8
a39 8
struct ClipRect *AllocCR(li)
struct Layer_Info *li;
{
#ifdef DEBUG1
	printf("AllocCR(%lx)\n",li);
#endif
	METRIC(alloccr_metric);
#ifdef BUFFER_CLIPRECTS
d42 3
a44 3
		struct LayerInfo_extra *lie = li->LayerInfo_extra;
		struct ClipRect *cr = (struct ClipRect *)RemHead(&lie->buffered_cliprects);
		if (cr)
d46 2
a47 5
			/*kprintf("get from buffer\n");*/
		}
		else
		{
			int i;
d49 1
a49 4
			/*kprintf("Add another %ld to buffer\n",
				BUFFER_CLIPRECTS-1);*/
			cr = (struct ClipRect *)LayersAllocMem(
				BUFFER_CLIPRECTS*sizeof(*cr),MEMF_CLEAR,li);
d51 1
a51 2
			for (i = 1; i < BUFFER_CLIPRECTS; i++)
				AddTail(&lie->buffered_cliprects,cr++);
a52 1
		return (cr);
a54 1
#endif
d56 1
a56 1
	return((struct ClipRect *)LayersAllocMem(sizeof(struct ClipRect),MEMF_CLEAR,li));
d58 2
d61 2
a62 7

clear_struct(p,n)
UBYTE *p;
int n;
{
    while (n--) *p++ = 0;
}
d93 1
a93 2
initlayers(li)
struct Layer_Info *li;
d95 4
a98 10
#ifdef DEBUG
	printf("initlayers(%lx)\n",li);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
    clear_struct(li,sizeof(struct Layer_Info));
	NewList(&li->FreeClipRects);	/* used for storage */
	NewList(&li->gs_Head);	/* used for storage */
	InitSemaphore(&li->Lock);
a99 3
#ifdef DEBUG
	printf("exit from initlayers\n");
#endif
a101 2
/*#define PREALLCR*/

d117 1
a117 1
*	V1.1 software and any later releases need to have more info in the 
d140 1
a140 2
extern_fattenlayerinfo(li)
struct Layer_Info *li;
a141 3
#ifdef DEBUG
	printf("FattenLayerInfo(%lx)\n",li);
#endif
d180 1
a180 2
extern_thinlayerinfo(li)
struct Layer_Info *li;
a181 3
#ifdef DEBUG
	printf("ThinLayerInfo(%lx)\n",li);
#endif
d217 1
a217 1
struct Layer_Info *NewLayerInfo()
d220 1
a220 4
#ifdef DEBUG
	printf("NewLayerInfo ");
#endif
	if (li = (struct LayerInfo *)AllocMem(sizeof(struct Layer_Info),MEMF_PUBLIC))
a225 3
#ifdef DEBUG
	printf("= 0\n");
#endif
a229 3
#ifdef DEBUG
	printf("= %lx\n",li);
#endif
d257 1
a257 1
*	-- delete the layers associated this Layer_Info structure -- 
d266 1
a266 1
*	-- now dispose of the Layer_Info structure itself -- 
a267 1
*	
d269 1
d277 1
a277 2
disposelayerinfo(li)
struct Layer_Info *li;
a278 3
#ifdef DEBUG
	printf("DisposeLayerInfo(%lx)\n",li);
#endif
d283 1
a283 2
fatten_lock(li)
struct Layer_Info *li;
d289 2
a290 2
unlock_thin(li)
struct Layer_Info *li;
d296 1
a296 2
fattenlayerinfo(li)
struct Layer_Info *li;
d298 1
a298 1
	locklayerinfo(li);
d301 1
a301 1
	unlocklayerinfo(li);
d305 1
a305 2
xfattenlayerinfo(li)
struct Layer_Info *li;
d307 2
a308 5
	struct LayerInfo_extra *lie;
	int i;
#ifdef DEBUG
	printf("fattenlayerinfo(%lx)",li);
#endif
a309 3
#ifdef DEBUG
	printf("firstfat");
#endif
d312 1
a312 2
		AllocMem(sizeof(struct LayerInfo_extra),
						MEMF_PUBLIC|MEMF_CLEAR);
a318 3
#ifdef DEBUG
	printf("fatten FAIL\n");
#endif
d322 1
a322 2
thinlayerinfo(li)
struct Layer_Info *li;
d325 1
a325 1
	unlocklayerinfo(li);
d328 1
a328 2
xthinlayerinfo(li)
struct Layer_Info *li;
d330 2
a331 5
	struct LayerInfo_extra *lie;
	struct ClipRect *cr;
#ifdef DEBUG
	printf("thinlayerinfo(lie=%lx)",li->LayerInfo_extra);
#endif
a333 3
#ifdef DEBUG
	printf("lastthin\n");
#endif
d342 1
a342 4
default_layer(li,l,r)
struct Layer_Info *li;
struct Layer *l;
struct Rectangle *r;
d344 1
a344 2
	int i;
	struct  LayersBase *lb = (struct LayersBase *)FetchLayersBase();
a346 3
#ifdef DEBUG
	printf("default layer start\n");
#endif
d353 1
a353 10
	for (i = 0; i<li->LockLayersCount ; i++)
		LockLayerRom(l);
/*
	l->Lock.NestCount = li->LockLayersCount;
	l->Lock.QCount = li->LockLayersCount - 1;
	l->Lock.Owner = (struct Task *)FindTask(0);
*/
#ifdef DEBUG
	printf("default layer exit\n");
#endif
d358 1
a358 1
	{
d363 3
a365 3
	struct Rectangle bounds1;
	struct Rectangle bounds2;
	struct Kludge_CR *Next;
d367 1
a367 1
	};
d369 2
a370 6

void STORE_CR(l, cr)
	struct Layer *l;
	struct ClipRect *cr;
	{
	/* kprintf("ENTER\tSTORE_CR\n"); */
d374 1
a374 2
	/* kprintf("EXIT\tSTORE_CR\n"); */
	}
d376 2
a377 4

struct ClipRect *UNSTORE_CR(l)
	struct Layer *l;
	{
a379 1
	/* kprintf("ENTER\tUNSTORE_CR\n"); */
d381 2
a382 2
		{
		l->_cliprects = ((struct Kludge_CR *)cr)->Next;
d385 2
a386 2
		Remove(cr);
		}
a387 1
	/* kprintf("EXIT\tUNSTORE_CR\n"); */
d389 1
a389 1
	}
d392 2
a393 3
struct ClipRect *newAllocCR(l)
	struct Layer *l;
	{
d396 1
a396 1
	cr = (struct ClipRect *)RemHead(&l->LayerInfo->FreeClipRects);
d399 1
a399 1
		{
d401 1
a401 1
		}
d403 1
a403 1
		{
d407 1
a407 1
		}
d410 1
a410 1
	}
d413 2
a414 4
void newDeleteCR(l,cr)
	struct Layer *l;
	struct ClipRect *cr;
	{
d416 2
a417 2
	AddTail(&l->LayerInfo->FreeClipRects, cr);	/* save here */
	}
d422 2
a423 3
int genrect(l)
	struct Layer *l;
	{
a425 2
	/* kprintf("ENTER\tgenrect\n"); */

d427 3
a429 4
		{
		/* kprintf("EXIT\tgenrect FAILED 1\n"); */
		return 0;
		}
a435 4
#ifdef DEBUG
	printf("call rsplit\n");
#endif

d437 3
a439 4
		{
		/* kprintf("EXIT\tgenrect FAILED 2\n"); */
		return 0;
		}
d441 2
a442 15
#ifdef DEBUG
	printf("onscreen cliprects at: ");
	for (cr = l->ClipRect ; cr ; cr = cr->Next)
		{
		if (cr->lobs == 0)
			{
			printf("%lx ,",cr);
			}
		}
	printf("\n");
#endif

	/* kprintf("EXIT\tgenrect\n"); */
	return 1;
	}
d445 2
a446 3
void strip_onscreen_cliprects(li)
	struct Layer_Info *li;
	{
a449 1
	/* kprintf("ENTER\tstrip_onscreen_cliprects\n"); */
d451 1
a451 1
		{
d456 1
a456 1
			{
d459 1
a459 1
				{
d462 2
a463 4
				}
	    		}
		}
	/* kprintf("EXIT\tstrip_onscreen_cliprects\n"); */
d465 1
d467 2
a468 4

void gen_onscreen_cliprects(li)
	struct Layer_Info *li;
	{
a472 1
	/* kprintf("ENTER\tgen_onscreen_cliprects\n"); */
d474 2
a476 2
		if (!(status = genrect(l)))
			{
a477 1
			}
d479 1
d482 1
a482 1
		{
d487 1
a487 1
			{
d490 1
a490 1
				{
d493 1
a493 1
					{
d495 1
a495 2
					}
	    			}
d497 1
d502 2
a504 2
			while (cr = UNSTORE_CR(l))
				{
d506 1
a506 3
		    		}
			}

d508 1
d511 2
a512 2
	while (cr = (struct ClipRect *)RemHead(&li->FreeClipRects))
		{
a513 3
		}

	/* kprintf("EXIT\tgen_onscreen_cliprects\n"); */
d515 1
d518 2
a519 4
void regen_display(wi)
	struct Layer_Info *wi;
	{
	/* kprintf("ENTER\tregen_display\n"); */
d522 1
a522 2
	/* kprintf("EXIT\tregen_display\n"); */
	}
d525 1
a525 2
bitmapsize(depth)
int depth;
d532 1
a532 3
get_concealed_rasters(l,cr)
struct Layer *l;
struct ClipRect *cr;
d545 1
a545 1
    bytecount = 
d568 1
a568 2
free_concealed_rasters(cr)
struct ClipRect *cr;
d574 1
a574 2
Clear_BitMap(bm)
struct BitMap *bm;
d586 1
a586 2
free_bitmap(bm)
struct BitMap *bm;
d593 6
a598 6
    	bytecount = bm->BytesPerRow * bm->Rows;
    	for(i = 0;i < bm->Depth;i++)
    	{
		FreeMem(bm->Planes[i],bytecount);
    	}
    	FreeMem(bm,bitmapsize(bm->Depth));
@
