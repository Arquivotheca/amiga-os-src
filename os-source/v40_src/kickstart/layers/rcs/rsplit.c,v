head     39.1;
branch   ;
access   ;
symbols  V40_1:39.1 V39_62:39.1 V39_61:39.1 V39_60:39.1 V39_58:39.1 V39_56:39.1 V39_55:39.1 V39_54:39.1 V39_53:39.1 V39_52:39.1 V39_51:39.1 V39_50:39.1 V39_49:39.1 V39_48:39.1 V39_46:39.1 V39_45:39.1 V39_44:39.1 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:39.1 V39_33:39.1 V39_32:39.1 V39_30:39.1 V39_28:39.1 V39_27:39.1 V39_26:39.1 V39_25:38.3 V39_24:38.3 V39_23:38.3 V39_22:38.3 V39_21:38.3 V39_20:38.3 V39_18:38.3 V39_16:38.3 V39_15:38.3 V39_14:38.3 V39_12:38.3 V39_10:38.3 V38_7:38.2 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


39.1
date     91.11.09.00.42.39;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.10.04.15.50.04;  author bart;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.22.06;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.07;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@Well, this is now just like the assembly version.  The
assembly version does not work, however, so this is here
for now...
@
text
@/******************************************************************************
*
*	$Id: rsplit.c,v 38.3 91/10/04 15:50:04 bart Exp $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>

#include "layersbase.h"

/* for new system, r_split only needs to subdivide the ClipRects that */
/* affect the display stuff, all offscreen ClipRects are maintained */

BOOL __stdargs __asm r_split(register __a2 struct Layer *l,register __a0 struct Layer *p,register __a1 struct ClipRect *cr)
{

r_split_again:
	if (p != 0)
	{
		struct ClipRect *crnew;

		if (!rectXrect(&p->bounds,&cr->bounds))	/* test intersection first */
		{
			p = p->front;
			goto r_split_again;
		}

		if (p->bounds.MaxY < cr->bounds.MaxY)
		{
			if (!(crnew = newAllocCR(l)))
			{
error_exit:			return(FALSE);
			}
			linkcr(l, crnew);

			crnew->bounds = cr->bounds;
			cr->bounds.MaxY = p->bounds.MaxY;
			crnew->bounds.MinY = p->bounds.MaxY+1;
			if (!r_split(l, p->front, crnew))
			{
				goto error_exit;
			}
		}

		if (p->bounds.MinY > cr->bounds.MinY)
		{
			if (!(crnew = newAllocCR(l)))
			{
				goto error_exit;
			}
			linkcr(l, crnew);

			crnew->bounds = cr->bounds;
			cr->bounds.MinY = p->bounds.MinY;
			crnew->bounds.MaxY = p->bounds.MinY-1;
			if (!r_split(l, p->front, crnew))
			{
				goto error_exit;
			}
		}
		if (p->bounds.MaxX < cr->bounds.MaxX)
		{
			if (!(crnew = newAllocCR(l)))
			{
				goto error_exit;
			}
			linkcr(l, crnew);

			crnew->bounds = cr->bounds;
			cr->bounds.MaxX = p->bounds.MaxX;
			crnew->bounds.MinX = p->bounds.MaxX+1;
			if (!r_split(l, p->front, crnew))
			{
				goto error_exit;
			}
		}

		if (p->bounds.MinX > cr->bounds.MinX)
		{
			if (!(crnew = newAllocCR(l)))
			{
				goto error_exit;
			}
			linkcr(l, crnew);

			crnew->bounds = cr->bounds;
			cr->bounds.MinX = p->bounds.MinX;
			crnew->bounds.MaxX = p->bounds.MinX-1;
			if (!r_split(l, p->front, crnew))
			{
				goto error_exit;
			}
		}
		newDeleteCR(l, cr);	/* what's left of cr is inside p->bounds */
	}
	return(TRUE);
}
@


38.3
log
@minor byte savings
@
text
@d3 1
a3 1
*	$Id: rsplit.c,v 38.2 91/08/02 10:22:06 mks Exp $
d23 1
a23 1
BOOL r_split(struct Layer *l,struct Layer *p,struct ClipRect *cr)
d41 1
a41 1
error_exit: 	return(FALSE);
d43 1
a43 1
			else linkcr(l, crnew);
d46 1
a51 1
			cr->bounds.MaxY = p->bounds.MaxY;
d60 1
a60 1
			else linkcr(l, crnew);
d63 1
a68 1
			cr->bounds.MinY = p->bounds.MinY;
d76 1
a76 1
			else linkcr(l, crnew);
d79 1
a84 1
			cr->bounds.MaxX = p->bounds.MaxX;
d93 1
a93 1
			else linkcr(l, crnew);
d96 1
a101 1
			cr->bounds.MinX = p->bounds.MinX;
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: rsplit.c,v 38.1 91/07/25 09:56:07 bart Exp $
a19 13

struct ClipRect *getcr(struct Layer *l)
{
struct ClipRect *crnew;

	if (crnew = (struct ClipRect *)newAllocCR(l))
	{
		linkcr(l, crnew);
	}
	return(crnew);
}


d39 1
a39 1
			if (!(crnew = getcr(l)))
d41 1
a41 1
				return(FALSE);
d43 2
d49 1
a49 1
				return(FALSE);
d56 1
a56 1
			if (!(crnew = getcr(l)))
d58 1
a58 1
				return(FALSE);
d60 2
d66 1
a66 1
				return(FALSE);
d72 1
a72 1
			if (!(crnew = getcr(l)))
d74 1
a74 1
				return(FALSE);
d76 2
d82 1
a82 1
				return(FALSE);
d89 1
a89 1
			if (!(crnew = getcr(l)))
d91 1
a91 1
				return(FALSE);
d93 2
d99 1
a99 1
				return(FALSE);
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: rsplit.c,v 1.9 91/01/25 10:13:55 bart Exp $
d7 2
d21 3
a23 4
struct ClipRect *getcr(l)
	struct Layer *l;
	{
	struct ClipRect *crnew;
d26 1
a26 1
		{
d28 1
a28 2
		}

d30 1
a30 1
	}
d36 2
a37 10
int r_split(l, p, cr)
	struct Layer *l,*p;
	struct ClipRect *cr;
	{

	/* kprintf("ENTER\tr_split\n"); */

#ifdef DEBUG
	printf("r_split(%lx,%lx,%lx,%ld)\n",l,p,cr);
#endif
d41 1
a41 1
		{
d45 1
a45 1
			{
d48 1
a48 1
			}
d50 3
a52 1
		if (p->bounds.MaxY < cr->bounds.MaxY) 
d54 2
a55 5
			if (!(crnew = getcr(l)))
				{
				/* kprintf("EXIT\tr_split FAILED 3.1\n"); */
				return 0;
				}
d59 3
a61 4
				{
				/* kprintf("EXIT\tr_split FAILED 3.2\n"); */
				return 0;
				}
d63 1
a63 1
			}
d66 2
d69 2
a70 5
			if (!(crnew = getcr(l)))
				{
				/* kprintf("EXIT\tr_split FAILED 4.1\n"); */
				return 0;
				}
d74 3
a76 4
				{
				/* kprintf("EXIT\tr_split FAILED 4.2\n"); */
				return 0;
				}
d78 6
a84 7
		if (p->bounds.MaxX < cr->bounds.MaxX) 
			{
			if (!(crnew = getcr(l)))
				{
				/* kprintf("EXIT\tr_split FAILED 1.1\n"); */
				return 0;
				}
d88 3
a90 4
				{
				/* kprintf("EXIT\tr_split FAILED 1.2\n"); */
				return 0;
				}
d92 1
a92 1
			}
d95 2
d98 2
a99 5
			if (!(crnew = getcr(l)))
				{
				/* kprintf("EXIT\tr_split FAILED 2.1\n"); */
				return 0;
				}
d103 3
a105 4
				{
				/* kprintf("EXIT\tr_split FAILED 2.2\n"); */
				return 0;
				}
d107 1
a107 3
			}


a108 4
		}

	/* kprintf("EXIT\tr_split\n"); */
	return 1;
d110 2
@
