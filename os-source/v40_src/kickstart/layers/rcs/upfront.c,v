head     38.7;
branch   ;
access   ;
symbols  V40_1:38.7 V39_62:38.7 V39_61:38.7 V39_60:38.7 V39_58:38.7 V39_56:38.7 V39_55:38.7 V39_54:38.7 V39_53:38.7 V39_52:38.7 V39_51:38.7 V39_50:38.7 V39_49:38.7 V39_48:38.7 V39_46:38.7 V39_45:38.7 V39_44:38.7 V39_42:38.7 V39_41:38.7 V39_40:38.7 V39_39:38.7 V39_38:38.7 V39_37:38.7 V39_36:38.7 V39_35:38.7 V39_34:38.7 V39_33:38.7 V39_32:38.7 V39_30:38.7 V39_28:38.6 V39_27:38.6 V39_26:38.6 V39_25:38.6 V39_24:38.6 V39_23:38.6 V39_22:38.6 V39_21:38.6 V39_20:38.6 V39_18:38.6 V39_16:38.6 V39_15:38.6 V39_14:38.6 V39_12:38.6 V39_10:38.5 V38_7:38.3 V38_6:38.2 First_Native_Build:38.2;
locks    ; strict;
comment  @ * @;


38.7
date     91.11.15.20.15.56;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     91.10.23.09.53.33;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.10.03.14.32.00;  author bart;  state Exp;
branches ;
next     38.4;

38.4
date     91.10.03.12.53.22;  author bart;  state Exp;
branches ;
next     38.3;

38.3
date     91.08.28.18.48.26;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.08.02.10.22.55;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.25.09.56.30;  author bart;  state Exp;
branches ;
next     ;


desc
@@


38.7
log
@Removed the LayerObscured function (no longer needed)
@
text
@/******************************************************************************
*
*	$Id: upfront.c,v 38.6 91/10/23 09:53:33 mks Exp Locker: mks $
*
******************************************************************************/

#define	NEWCLIPRECTS_1_1

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <graphics/layers.h>

#include "layersbase.h"

/****** layers.library/UpfrontLayer ********************************************
*
*    NAME
*	UpfrontLayer -- Put layer in front of all other layers.
*
*    SYNOPSIS
*	result = UpfrontLayer( dummy, l )
*	d0                     a0     a1
*
*	LONG UpfrontLayer( LONG, struct Layer *);
*
*    FUNCTION
*	Move this layer to the most upfront position swapping bits
*	in and out of the display with other layers.
*	If this is a refresh layer then collect damage list and
*	set the LAYERREFRESH bit in layer->Flags if redraw required.
*	By clearing the BACKDROP bit in the layers Flags you may
*	bring a Backdrop layer up to the front of all other layers.
*
*	Note: this operation may generate refresh events in other layers
*	   associated with this layer's Layer_Info structure.
*
*    INPUTS
*	dummy - unused
*	l - pointer to a nonbackdrop layer
*
*    RESULTS
*	result - TRUE   if operation successful
*	         FALSE  if operation unsuccessful (probably out of memory)
*
*    BUGS
*
*    SEE ALSO
*	graphics/layers.h
*
*******************************************************************************/

BOOL upfrontcode(struct Layer *l)
{
	struct Layer *target;

	if (l->Flags & LAYERBACKDROP)
	{
		/* only go above other BACKDROPS */
		/* find first backdrop */
		for (target = l->LayerInfo->top_layer; target ; target = target->back)
			if (target->Flags & LAYERBACKDROP) break;
	}
	else	target = l->LayerInfo->top_layer;
	if (target == l)	return (TRUE);
	return(movelayerinfrontof(l,target,FALSE));
}

LONG __stdargs __asm upfront(register __a1 struct Layer *l)
{
struct Layer_Info *li=l->LayerInfo;
LONG status=FALSE;

	if (fatten_lock(li))
	{
		if (upfrontcode(l))
		{
			regen_display(li);
			status = TRUE;
		}
		unlock_thin(li);
	}
	return(status);
}
@


38.6
log
@Moved the swap_these() function to the routine that uses it...
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 38.5 91/10/03 14:32:00 bart Exp Locker: mks $
a18 55

/****** layers.library/LayerObscured *******************************************
*
*    NAME
*	LayerObscured - Tells if the layer is obscured			(V39)
*
*    SYNOPSIS
*	result = LayerObscured( l )
*	d0                      a0
*
*	BOOL LayerObscured(struct Layer *);
*
*    FUNCTION
*	This function returns TRUE if any part of the given layer is
*	obscured by a layer above it.
*
*    INPUTS
*	l - pointer to a layer
*
*    RESULTS
*	result - TRUE   if given layer is obscured
*	         FALSE  if given layer is fully visible
*
*    BUGS
*
*    NOTES
*	May also return TRUE if memory conditions prevent a layer lock...
*	(Very unlikely)
*
*    SEE ALSO
*	graphics/layers.h
*
*******************************************************************************/
BOOL __stdargs __asm LayerObscured(register __a0 struct Layer *thisl)
{
struct	Layer *l;
struct	Layer_Info *li;
BOOL	result=TRUE;

	li=thisl->LayerInfo;
	if (fatten_lock(li))
	{
		result=FALSE;

		l=li->top_layer;
		while ((l!=thisl) && !result)
		{
			result=rectXrect(&(l->bounds),&(thisl->bounds));
			l=l->back;
		}

		unlock_thin(li);
	}
	return(result);
}
@


38.5
log
@saved 4 bytes
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 38.4 91/10/03 12:53:22 bart Exp Locker: bart $
a142 71
}

void swap_these(struct Layer *l,struct Layer *fr,struct ClipRect ***crp,long flag,struct ClipRect **buffer)
{
	struct ClipRect *cr = **crp;
	BOOL fr_simple = (fr->Flags & LAYERSIMPLE);


	if ( l->Flags & LAYERSIMPLE )
	{   /* new upfront layer does its own refresh */
		if(!fr_simple)
		{
		    /* the layer going behind needs transparent refresh */
		    /* must allocate buffers */
		    /* Dale, no longer needed if correctly preallocated */
		    /*get_concealed_rasters(l,cr);*/
		    /* will probably have to initialize to something */
		    /* this will junk up display */
		    /* but thats ok he's now supposed to refresh himself */

		    screentocr(l->rp,cr);

		    if(flag)
		    {
				struct ClipRect *ncr = *buffer;

				if(ncr)
				{
				    *buffer = ncr->Next;
				    ncr->bounds = cr->bounds;
					/* insert the new cr */
					ncr->Next = cr->Next;
					**crp = ncr;
					*crp = (struct ClipRect **)**crp;
				}
		    }
		}
		/* else, the screen that is going behind can refresh itself */

		if(!flag)
		{
			struct Rectangle damage;

			damage.MinX = cr->bounds.MinX - l->bounds.MinX;
			damage.MinY = cr->bounds.MinY - l->bounds.MinY;
			damage.MaxX = cr->bounds.MaxX - l->bounds.MinX;
			damage.MaxY = cr->bounds.MaxY - l->bounds.MinY;

	   	    CallBackFillHook(l->BackFill,
				    l->rp,
				    l,
				    cr->bounds,
				    cr->bounds.MinX,
				    cr->bounds.MinY);

			OrRectRegion(l->DamageList,&damage);
		    l->Flags |= LAYERREFRESH;   /* trigger refresh */
		}
	}
	else
	{   /* layer coming to top has obscured buffers */
		if(fr_simple)
		{
			crtoscreen(l->rp,cr);
			WaitBlit();
			free_concealed_rasters(cr);
		}
		else screenswap(l->rp,cr);
	}
	/* unlink the old cr */ **crp = cr->Next;
	linkcr(fr,cr);
@


38.4
log
@swap_these uses pointer-pointer-pointer to remove unlinkcr
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 38.3 91/08/28 18:48:26 mks Exp Locker: bart $
d148 1
d153 1
a153 1
		if(!(fr->Flags & LAYERSIMPLE))
d204 1
a204 1
		if (fr->Flags & LAYERSIMPLE)
@


38.3
log
@Added code (and autodoc) for LayerObscured()
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 38.2 91/08/02 10:22:55 mks Exp Locker: mks $
d145 1
a145 1
void swap_these(struct Layer *l,struct Layer *fr,struct ClipRect *cr,long flag,struct ClipRect **buffer)
d147 3
a151 7
	struct Rectangle damage;

		damage.MinX = cr->bounds.MinX - l->bounds.MinX;
		damage.MinY = cr->bounds.MinY - l->bounds.MinY;
		damage.MaxX = cr->bounds.MaxX - l->bounds.MinX;
		damage.MaxY = cr->bounds.MaxY - l->bounds.MinY;

d166 1
a166 1
			struct ClipRect *ncr = *buffer;
d168 9
a176 6
			if(ncr)
			{
			    *buffer = ncr->Next;
			    ncr->bounds = cr->bounds;
			    linkcr(l,ncr);
			}
d183 8
a190 1
	   	   CallBackFillHook(l->BackFill,
d197 2
a198 2
		   OrRectRegion(l->DamageList,&damage);
		   l->Flags |= LAYERREFRESH;   /* trigger refresh */
d211 1
a211 1
	unlinkcr(l,cr);
@


38.2
log
@Native build version checkin...
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 38.1 91/07/25 09:56:30 bart Exp $
d19 55
@


38.1
log
@begin_v38_development
@
text
@d3 1
a3 1
*	$Id: upfront.c,v 1.18 91/01/28 16:46:58 bart Exp $
d7 2
d18 1
a18 8
/*#define DEBUG
#define DEBUGDAMAGE*/

#ifdef DEBUGDAMAGE
#include <graphics/gfxbase.h>
#define TRACETRAP	(GfxBase->Debug)
extern struct GfxBase *GfxBase;
#endif
d57 1
a57 22
int upfront(l)
struct Layer *l;
{
	struct Layer_Info *li=l->LayerInfo;
	int status=FALSE;
#ifdef DEBUG
    printf("upfront(%lx)",l);
#endif
	if (fatten_lock(li))
	{
		if (upfrontcode(l))
		{
			regen_display(li);
			status = TRUE;
		}
		unlock_thin(li);
	}
	return(status);
}

upfrontcode(l)
struct Layer *l;
d73 18
a90 5
swap_these(l,fr,cr,flag,buffer)
struct Layer *l,*fr;
struct ClipRect *cr;
int    flag;
struct ClipRect **buffer;
d92 3
a94 6
#ifdef DEBUG
	printf("swapthese(%lx,%lx,%lx)\n",l,fr,cr);
#endif
    if ( l->Flags & LAYERSIMPLE )
    {   /* new upfront layer does its own refresh */
		struct Rectangle damage;
d121 1
a121 1
			    linkcr(l,ncr);	
d139 3
a141 6
    }
    else
    {   /* layer coming to top has obscured buffers */
#ifdef DEBUGDAMAGE
		printf("cr to top has buffers, no damage\n");
#endif
d147 5
a151 12
		} else screenswap(l->rp,cr);
    }
#ifdef DEBUG
	printf("call unlinkcr\n");
	/*if TRACETRAP	Debug();*/
#endif
    unlinkcr(l,cr);
    linkcr(fr,cr);
#ifdef DEBUG
	printf("return from swapthese\n");
	/*if TRACETRAP	Debug();*/
#endif
@
