head     38.1;
branch   ;
access   ;
symbols  V40_1:38.1 V39_62:38.1 V39_61:38.1 V39_60:38.1 V39_58:38.1 V39_56:38.1 V39_55:38.1 V39_54:38.1 V39_53:38.1 V39_52:38.1 V39_51:38.1 V39_50:38.1 V39_49:38.1 V39_48:38.1 V39_46:38.1 V39_45:38.1 V39_44:38.1 V39_42:38.1 V39_41:38.1 V39_40:38.1 V39_39:38.1 V39_38:38.1 V39_37:38.1 V39_36:38.1 V39_35:38.1 V39_34:38.1 V39_33:38.1 V39_32:38.1 V39_30:38.1 V39_28:38.1 V39_27:38.1 V39_26:38.1 V39_25:38.1 V39_24:38.1 V39_23:38.1 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V38_7:38.1 V38_6:38.1 First_Native_Build:38.1;
locks    ; strict;
comment  @ * @;


38.1
date     91.07.25.09.56.10;  author bart;  state Exp;
branches ;
next     ;


desc
@@



38.1
log
@begin_v38_development
@
text
@/******************************************************************************
*
*	$Id: screenlock.c,v 1.5 90/10/11 15:16:52 rsbx Exp $
*
******************************************************************************/

#include <exec/types.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/layers.h>

/*#define DEBUG*/

struct Task *FindTask();

/****** layers.library/LockLayerInfo *******************************************
*
*    NAME
*	LockLayerInfo -- Lock the LayerInfo structure.
*
*    SYNOPSIS
*	LockLayerInfo( li )
*	               a0
*
*	void LockLayerInfo( struct Layer_Info *);
*
*    FUNCTION
*	Before doing an operation that requires the LayerInfo
*	structure, make sure that no other task is also using the
*	LayerInfo structure.  LockLayerInfo() returns when the 
*	LayerInfo belongs to this task.  There should be 
*	an UnlockLayerInfo for every LockLayerInfo. 
*
*	Note: All layer routines presently LockLayerInfo() when they 
*	start up and UnlockLayerInfo() as they exit.  Programmers 
*	will need to use these Lock/Unlock routines if they wish 
*	to do something with the LayerStructure that is not 
*	supported by the layer library.
*
*    INPUTS
*	li - pointer to Layer_Info structure
*
*    BUGS
*
*    SEE ALSO
*	UnlockLayerInfo, graphics/layers.h 
*
*******************************************************************************/
locklayerinfo(li)
struct Layer_Info *li;
{
#ifdef DEBUG
	printf("locklayerinfo start(lock=%lx,task=%lx)\n",&li->Lock,FindTask(0));
	/*Debug();*/
#endif
	ObtainSemaphore(&li->Lock);
	/*ObtainGfxSemaphore(&li->Lock);*/
#ifdef DEBUG
	printf("locklayerinfo end\n");
#endif
}

/****** layers.library/UnlockLayerInfo *****************************************
* 
*    NAME 
*	UnlockLayerInfo -- Unlock the LayerInfo structure.
*
*    SYNOPSIS 
*	UnlockLayerInfo( li ) 
*	                 a0 
*
*	void UnlockLayerInfo( struct Layer_Info *);
*
*    FUNCTION 
*	After the operation is complete that required a LockLayerInfo,
*	unlock the LayerInfo structure so that  other tasks may
*	affect the layers.
*
*    INPUTS 
*	li - pointer to the Layer_Info structure 
* 
*     BUGS
*
*     SEE ALSO
*	LockLayerInfo, graphics/layers.h  
*
*******************************************************************************/

unlocklayerinfo(li)
struct Layer_Info *li;
{
#ifdef DEBUG
	printf("unlocklayerinfo start(task=%lx)\n",FindTask(0));
#endif
	ReleaseSemaphore(&li->Lock);
	/*ReleaseGfxSemaphore(&li->Lock);*/
#ifdef DEBUG
	printf("unlocklayerinfo end\n");
#endif
}
@
