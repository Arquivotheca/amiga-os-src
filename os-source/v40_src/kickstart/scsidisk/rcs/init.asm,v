head     1.21;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.21
date     94.01.21.15.20.27;  author jesup;  state Exp;
branches ;
next     1.20;

1.20
date     94.01.20.17.40.30;  author jesup;  state Exp;
branches ;
next     1.19;

1.19
date     93.05.06.21.55.36;  author jesup;  state Exp;
branches ;
next     1.18;

1.18
date     93.03.12.16.39.53;  author jesup;  state Exp;
branches ;
next     1.17;

1.17
date     92.08.13.12.58.48;  author jesup;  state Exp;
branches ;
next     1.16;

1.16
date     92.08.10.16.57.11;  author jesup;  state Exp;
branches ;
next     1.15;

1.15
date     92.04.14.20.06.08;  author jesup;  state Exp;
branches ;
next     1.14;

1.14
date     92.03.24.23.02.06;  author jesup;  state Exp;
branches ;
next     1.13;

1.13
date     92.03.24.14.31.13;  author jesup;  state Exp;
branches ;
next     1.12;

1.12
date     92.03.16.23.34.57;  author jesup;  state Exp;
branches ;
next     1.11;

1.11
date     92.03.13.20.22.38;  author jesup;  state Exp;
branches ;
next     1.10;

1.10
date     92.03.12.19.05.07;  author jesup;  state Exp;
branches ;
next     1.9;

1.9
date     91.12.30.20.34.49;  author jesup;  state Exp;
branches ;
next     1.8;

1.8
date     91.10.22.16.20.07;  author jesup;  state KS_V37_300;
branches ;
next     1.7;

1.7
date     91.10.14.15.44.00;  author jesup;  state Exp;
branches ;
next     1.6;

1.6
date     91.10.14.15.33.55;  author jesup;  state Exp;
branches ;
next     1.5;

1.5
date     91.10.13.23.05.56;  author jesup;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.13.22.17.56;  author jesup;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.03.12.13.22;  author jesup;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.03.11.20.35;  author jesup;  state Exp;
branches ;
next     1.1;

1.1
date     91.06.04.15.00.08;  author jesup;  state Exp;
branches ;
next     ;


desc
@initialization code
@


1.21
log
@added test for scsi chip.  A4000's decode the address, but nothing responds
Use gary to find out if anything timed out an the first access
@
text
@		SECTION driver,CODE

		NOLIST
		INCLUDE	"exec/types.i"
		INCLUDE	"exec/nodes.i"
		INCLUDE	"exec/lists.i"
		INCLUDE	"exec/resident.i"
		INCLUDE	"exec/alerts.i"
		INCLUDE	"exec/memory.i"
		INCLUDE	"exec/tasks.i"
		INCLUDE	"exec/interrupts.i"
		INCLUDE	"exec/execbase.i"
		INCLUDE "exec/ables.i"
		INCLUDE	"libraries/configvars.i"
		INCLUDE	"libraries/expansion.i"
		INCLUDE	"devices/scsidisk.i"
		INCLUDE "internal/librarytags.i"

		INCLUDE	"modifiers.i"
		INCLUDE	"device.i"
		INCLUDE "board.i"
		INCLUDE	"scsidisk_rev.i"
		INCLUDE	"printf.mac"
		LIST

;		DEBUGENABLE

		XREF	_AbsExecBase,_LVOOpenLibrary,_LVOCloseLibrary
		XREF	_LVOTaggedOpenLibrary
		XREF	_LVOAddTask,_LVOAlert,_LVOAddDevice
		XREF	_LVOAllocMem,_LVOForbid,_LVOPermit

		XREF	_LVOAllocConfigDev,_LVOFindResident
		XREF	_LVOGetCurrentBinding
		XREF	_LVOFindTask,_LVOWait,_LVOSetSignal
		XREF	_LVOSupervisor

		XREF	MyMakeLibrary,IOTask,Open,EndCode,WaitASecond

		XDEF	GetPubMem,DosName
	IFND V39
		XDEF	ExpanName
	ENDC

		INT_ABLES

;==============================================================================
; Put some safe code here in case some jerk tries to run the device.
;==============================================================================
	IFND AUTOBOOT_ROM
DummyCode	moveq.l	#-1,d0			return an error
		rts
	ENDC AUTOBOOT_ROM

	IFD AUTOBOOT_ROM
	IFD NOT_EXECUTE_IN_PLACE
SegInit:	bra	Init	; LoadSeg'd, and romtag rt_Init points here
	ENDC
	ENDC

;==============================================================================
; This is the ROM diagnostic table that's used to call us at config time.
; Since this is not an expansion device, we're not going to get called at
; autoconfig time to relocate the RomTag and DiagTable.  However, we are
; going to need the contents of the DiagTable to boot the device properly.
; There will be no need for relocation of the DiagTable anyway because we're
; in wordwide ROMs, so the offsets will be correct.  The RomTag will already
; be relocated when it's loaded into the ROMs.
;==============================================================================
; Added conditional - really a590/a2091
; a3090 roms are byte-wide Z-III
; No they're not - Z-III in expansion doesn't do rom size correctly - we had
; to re-route 4 data lines so our byte-wide rom appears as nibble-wide.
;
	IFND NOT_EXECUTE_IN_PLACE
	IFD AUTOBOOT_ROM
	IFND IS_A3090
DiagTable	DC.B	DAC_WORDWIDE+DAC_CONFIGTIME	rom type and call time
	ENDC
	IFD IS_A3090
DiagTable	DC.B	DAC_NIBBLEWIDE+DAC_CONFIGTIME	rom type and call time
	ENDC
		DC.B	0
	IFD EXPANSION_DEV
		DC.W	DiagEnd-DiagTable	how much to copy
		DC.W	RelocRT-DiagTable	what's called at config time
	ENDC
	IFND EXPANSION_DEV
		DC.W	0			how much to copy (not used)
		DC.W	0			called at config time (not used)
	ENDC
		DC.W	BootMe-DiagTable	DOS boot code
		DC.W	BootName-DiagTable	What's this for ?
		DC.W	0
		DC.W	0

;==============================================================================
; This code is called at boot time and is expected to call DOS's init routine.
; We've allready created boot nodes, so DOS will call us normally for booting.
;==============================================================================
BootMe		lea.l	DosName(pc),a1		find DOS's RomTag
		jsr	_LVOFindResident(a6)
		tst.l	d0			did we find it
		beq.s	BootedMe		nope, bad boot
		movea.l	d0,a0
		movea.l	RT_INIT(a0),a0		call init vector from RomTag
		jsr	(a0)			DOS may boot off our device
BootedMe	rts

	ENDC AUTOBOOT_ROM
	ENDC EXECUTE_IN_PLACE
		CNOP	0,4			DosName must be lword aligned
DosName		DC.B	'dos.library',0
		CNOP	0,2

	IFND NOT_EXECUTE_IN_PLACE
;==============================================================================
; This code is actually called at config time and we use it to resolve all of
; the absolute references in the RomTag so that our init routine can be found
; at "binddrivers" time.  On entry to the routine, useful registers are:-
;
; a0 = BoardAddress (For A590/2091 the offset to the ROM code is $2000)
; a2 = pointer to a memory copy of DiagTable and this code up to EndCode
; a3 = pointer to the configdev struct for this board (can stash stuff there)
;==============================================================================
	IFD AUTOBOOT_ROM
	IFD EXPANSION_DEV
RelocRT		move.l	a1,-(sp)
		move.l	#AUTOBOOT_ROM,d0	offset from board to ROM
		add.l	a0,d0			d0 is correct offsets now
		lea.l	InitDescriptor(pc),a0	point to our RomTag
		lea.l	DiagEnd(pc),a1
		move.l	a0,RT_MATCHTAG(a0)	RomTag must point to itself
		move.l	a1,RT_ENDSKIP(a0)	just skip over ram version
		add.l	d0,RT_NAME(a0)		rest of stuff is in ROM
		add.l	d0,RT_IDSTRING(a0)
		add.l	d0,RT_INIT(a0)
; We need to find our DiagTable at autoboot time to construct a bootnode.  We
; stash it in the reserved0c field of this configdev so we can find it later.
	IFND ROMBOOT_FIXED
		move.l	a2,cd_Rom+er_Reserved0c(a3)
	ENDC
		moveq.l	#1,d0			indicate success
		move.l	(sp)+,a1
		rts
	ENDC EXPANSION_DEV
	ENDC AUTOBOOT_ROM

;==============================================================================
; This is just treated as a normal RomTag and allows us to init the fake
; ConfigDev structure for autobooting.  Our priority should be > RomBoot
;==============================================================================
InitDescriptor	DC.W	RTC_MATCHWORD		so we can be found
		DC.L	InitDescriptor		firewall consistency check
		DC.L	EndCode			how to skip over this code
		DC.B	RTW_COLDSTART		flags
		DC.B	VERSION			version number
		DC.B	NT_DEVICE		node type when we are linked
		DC.B	HD_PRI			priority to run this task at
		DC.L	ROMTagName		root name of this device
		DC.L	IDString		descriptive ID string
		DC.L	Init			code to call for initialisation

; only needed for A590/A2091 (?A2090?)
	IFD EXPANSION_DEV
DiagEnd:	;config code will copy from the beginning to here
	ENDC EXPANSION_DEV
	ENDC EXECUTE_IN_PLACE

	IFND V39
ExpanName	DC.B	'expansion.library',0
	ENDC

BootName
	IFD IS_SCSIDISK
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	VSTRING
	ENDC IS_SCSIDISK

	IFD IS_IDE
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	VSTRING
	ENDC IS_IDE

	IFD IS_A590
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	DC.B	'SCSI/XT driver',0
XTRootName	DC.B	'xt.device',0
	ENDC IS_A590

	IFD IS_A2091
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	DC.B	'SCSI driver',0
XTRootName	DC.B	'xt.device',0
	ENDC IS_A2091

	IFD IS_A2090
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	DC.B	'SCSI/ST506 driver by SMB',0
XTRootName	DC.B	'st506.device',0
	ENDC IS_A2090

	IFD IS_A3090
	IFND IS_A3090_DISK
ROMTagName
DeviceName	DC.B	'scsi.device',0
IDString	DC.B	VSTRING
	ENDC
	IFD IS_A3090_DISK
ROMTagName
DeviceName	DC.B	'ncr.device',0
IDString	DC.B	VSTRING
	ENDC
	ENDC IS_A3090

	IFD IS_A4000T
ROMTagName	DC.B	'NCR scsi.device',0
DeviceName	DC.B	'scsi.device',0
IDString	DC.B	VSTRING
	ENDC IS_A4000T
		CNOP	0,2

;==============================================================================
; Error = Init( DeviceName ),_AbsExecBase
;  d0		    a1		  a6
;
; Called by BindDrivers to initialise the device driver from nothing either
; at boot time (as part of the exec.library task) or at binddrivers time (as
; part of the initial CLI task).  This initialisation finds the board and
; then creates the main IOTask and the two library entries (xt.device and
; scsi.device).  Once this is complete, this init sequence attempts to open
; unit 0 on both devices using a flags value of -1 to force mounting of all
; known units and their partitions and file systems.  If this is boot time
; then the mounted partitions will be put on eb_Mountlist for DOS to boot from
;
; A3000 only: this will be the only initialisation call to this device and
; we have to fake up all the expansion stuff for a ConfigDev structure.
;==============================================================================
Init		movem.l	d2-d7/a2-a5,-(sp)
		suba.l	a1,a1			find this task
		jsr	_LVOFindTask(a6)
		move.l	d0,d5			stash for IOTask

	printf <'Init: starting up\n'>
	IFND V39
		lea.l	ExpanName(pc),a1	first, find our board
		moveq.l	#0,d0			using any expansion.library
		jsr	_LVOOpenLibrary(a6)
	ENDC
	IFD V39
		moveq	#OLTAG_EXPANSION,d0
		jsr	_LVOTaggedOpenLibrary(a6)
	ENDC
		tst.l	d0			make sure we got it
		bne.s	GetBoardAddr		yep, no problems

; We didn't get the expansion library.  This is very serious so put up an alert
		move.l	#AN_TrackDiskDev!AG_OpenLib,d7
		jsr	_LVOAlert(a6)
		bra	BadExit			do we come back to here ?

	IFND EXPANSION_DEV
; We opened the expansion library OK so allocate a fake ConfigDev structure
GetBoardAddr
		moveq	#0,d6			assume it's a new dmac
	IFD IS_SCSIDISK
		lea	$00dd0000,a4		hard coded board address
	ENDC
	IFD IS_A4000T
		lea	NCR_ADDRESS,a4		hard coded board address
		; confirm there really is an NCR chip out there

		; to find if there's a chip there:
		; b) jump to supervisor mode
		; a) disable()
		; c) change GARY to timeout instead of bus-erroring
		; d) clear the GARY timeout flag
		; e) write to the DCNTL register (EA bit)
		; f) check the timeout flag.  TRUE == no NCR chip
		; g) set GARY back to BERR mode
		; h) enable()
		; i) RTE

		move.l	a5,-(sp)
		lea	test_scsi(pc),a5
		jsr	_LVOSupervisor(a6)
		bra	scsi_done

test_scsi:	DISABLE
		move.b	#0,$de0000	; set GARY to DSACK timeout (9us)
		move.b	$de0000,d1	; read register to reset timeout bit
		nop			; sync pipeline (paranoia)

		; must set EA in DCNTL _before_ adding the int server.  THis is
		; because the first access will never end unless the chip is
		; set to link STERM and SLAC internally.
		move.b	#DCNTLF_EA!DCNTLF_COM,dcntl(a4)
		nop			; paranoia
		move.b	$de0000,d1	; read timeout bit (bit 0)
		move.b	#$80,$de0000	; back to bus-error mode
		ENABLE
		rte

scsi_done:	; d1 is gary timeout register.  bit 0 is timeout or not
	printf <'gary timeout = $%lx'>,d1
		move.l	(sp)+,a5
		btst.b	#7,d1
		bne	BadExit			; no NCR chip!

	ENDC
	IFD IS_A3090_DISK
		; actually kludged for board at $40000000
		lea	NCR_ADDRESS,a4		hard coded board address
	ENDC
	IFD IS_IDE
		lea	IDE_Fast,a4		hard coded board address

		XREF	ATFindHardware

		; confirm there really is a hard drive out there before
		; allocating everything.  The A300 is memory-tight, so we
		; don't want to start extraneous tasks.  Also, we want to
		; exit soon and smooth for 68000-based machines without the
		; IDE hardware (a500/a2000/a1000).
		move.l	d0,-(sp)
		moveq	#0,d0			check if drive 0 exists
		bsr	ATFindHardware
		move.l	d0,d1			annoying, but easier to
		move.l	(sp)+,d0		 maintain
		tst.l	d1
		; no need to close expansion, it MUST be in rom and it doesn't
		; care.
		beq	BadExit			return failure
	ENDC
		movea.l	d0,a6
		jsr	_LVOAllocConfigDev(a6)	get a configdev structure
		; no need to close expansion - forced ROM rtn
		movea.l	_AbsExecBase,a6		get execbase back
		move.l	d0,d4			ConfigDev ptr
		beq	NoMemory		allocation faled

; will be needing SIGF_SINGLE later, clear it now instead
		moveq.l	#0,d0
		moveq.l	#SIGF_SINGLE,d1
		jsr	_LVOSetSignal(a6)

		movea.l	d4,a0			configdev ptr

		move.l	a4,cd_BoardAddr(a0)	save board addr in configdev
		lea.l	DiagTable(pc),a1
		move.l	a1,cd_Rom+er_Reserved0c(a0)
		move.l	a1,d3			used as an autoboot flag
		move.b	#ERTF_DIAGVALID,cd_Rom+er_Type(a0)  so it autoboots
	ENDC !EXPANSION_DEV

	IFD EXPANSION_DEV
; We opened the expansion library OK so now use it to find our board address
GetBoardAddr	movea.l	d0,a6			stash expansion lib base
		lea.l	-CurrentBinding_SIZEOF(sp),sp	get temp workspace
		movea.l	sp,a0			and point a0 at it
		moveq.l	#CurrentBinding_SIZEOF,d0
		jsr	_LVOGetCurrentBinding(a6)
		; don't need to close expansion
		movea.l	_AbsExecBase,a6		get execbase back

; will be needing SIGF_SINGLE later, clear it now instead
		moveq.l	#0,d0
		moveq.l	#SIGF_SINGLE,d1
		jsr	_LVOSetSignal(a6)

; get the first board on the list and stash its address for use by IOTask
		movea.l	cb_ConfigDev(sp),a0	save first configdev ptr
		lea.l	CurrentBinding_SIZEOF(sp),sp	reclaim workspace
		move.l	cd_BoardAddr(a0),a4	board address to a4
	    IFD A590_A2091_ONLY
		; product code 2 Dmacs require terminal count, newer ones
		; don't work with it but have flush (see modifiers.i)
		cmp.b	#DMAC_FLUSH_REV,cd_Rom+er_Product(a0)
		scs.b	d6		; set(byte) on product < 3
	printf <'DMAC is 0x%lx'>,d6
	    ENDC
		bclr.b	#CDB_CONFIGME,cd_Flags(a0)	we've configured it
		move.l	cd_Rom+er_Reserved0c(a0),d3	d3=0 if not autoboot
		move.l	a0,d4				save ConfigDev anyway
	ENDC EXPANSION_DEV

; The task we just added has signalled us that it finished initialisation of
; itself and SCSITask.  Now we make the actual library nodes for both the
; xt.device and the scsi.device.
; Note: NOT FOR IDE!
	IFD XT_SUPPORTED
		lea.l	XTRootName(pc),a0	make the xt.device
		bsr	MakeDevice		makes it but doesn't add it
		tst.l	d0			returns 0 = error
		beq	LibFailed
		movea.l	d0,a2			a2 points to xt.device
	ENDC

		lea.l	DeviceName(pc),a0	make the scsi/at.device
		bsr	MakeDevice
		tst.l	d0			returns 0 = error
		beq	LibFailed
		movea.l	d0,a3			a3 points to scsi/at.device

; initialise some of the globals for each of the device entries
	IFD XT_SUPPORTED
		move.l	a6,hd_SysLib(a2)	exec.library pointer
		move.l	d3,hd_DiagArea(a2)	may be a diag table ptr here
		move.l	d4,hd_ConfigDev(a2)	so we'll need configdev ptr
		clr.w	hd_Type(a2)		mark this as an xt device

		moveq	#0,d0
		lea.l	hd_HDUnits(a2),a1	initialise unit lists
10$:		NEWLIST	a1			; a1 isn't affected
		move.b	d0,ha_ID(a1)
		lea	ha_SIZEOF(a1),a1
		addq.w	#1,d0
		cmp.w	#MAX_XT_ADDR,d0
		ble.s	10$
	ENDC

		move.l	a6,hd_SysLib(a3)
		move.l	d3,hd_DiagArea(a3)
		move.l	d4,hd_ConfigDev(a3)

	IFND IS_IDE
		move.w	#1,hd_Type(a3)		mark this as a scsi device
	ENDC
	IFD IS_IDE
		clr.w	hd_Type(a3)		mark as xt/at device
	ENDC
		moveq	#0,d0
		lea.l	hd_HDUnits(a3),a1	initialise unit lists
20$:		NEWLIST	a1			; a1 isn't affected
		move.b	d0,ha_ID(a1)
		lea	ha_SIZEOF(a1),a1
		addq.w	#1,d0
		cmp.w	#MAX_ADDR,d0
		ble.s	20$
	printf <'Init: device = $%lx, hd_STGlobals = $%lx'>,a3,hd_STGlobals(a3)

; allocate the message port we want IOTask to use, we stash it for later use
; we make one allocation to ease freeing, and reduce code.
; DEVSTACK is guaranteed to be a multiple of 4, MP_SIZE is 34 (not multiple of
; 4).  We'll put the msgport last to keep alignment.  (TC_SIZE must be $5c)

ALLOC_SIZE	EQU	DEVSTACK+TC_SIZE+MP_SIZE
		move.l	#ALLOC_SIZE,d0		get a msgport, stack, and task
		bsr	GetPubMem
		tst.l	d0
		bne.s	StartIOTask

; if we fail to get any memory, this code is called to put up an alert.
NoMemory	move.l	#AN_TrackDiskDev!AG_NoMemory,d7
		jsr	_LVOAlert(a6)
		bra	BadExit			do we come back to here ?

; we got the memory we need so start up the main IOTask (which handles
; IORequests).  It will, in turn, start up the SCSITask that talks to
; the hardware directly.  When it has completed we'll receive a signal.
StartIOTask	move.l	d0,a0			stack for later AddTask call
		lea	DEVSTACK(a0),a1		set pointer to TCB
		lea	TC_SIZE(a1),a5		save port for library code

		move.l	a0,TC_SPLOWER(a1)
		lea.l	DEVSTACK(a0),a0		top of stack
		move.l	a0,TC_SPUPPER(a1)
		move.l	a3,-(a0)		HDDevice
		move.l	d6,-(a0)		pass (byte) terminal count flag
		move.l	a5,-(a0)		pass message port address
		move.l	d5,-(a0)		and a pointer to this task
		move.l	a4,-(a0)		and board address
		move.l	a0,TC_SPREG(a1)		set initial sp

		move.b	#NT_TASK,LN_TYPE(a1)	this is a task
		move.b	#HD_PRI+1,LN_PRI(a1)	1 higher than current task
		lea.l	DeviceName(pc),a0	give it some kinda name
		move.l	a0,LN_NAME(a1)
		movem.l	a2/a3,-(sp)		save device ptr(s)
		lea.l	IOTask(pc),a2		initialPC
		suba.l	a3,a3			no finalPC
		jsr	_LVOAddTask(a6)		and start it up
		movem.l	(sp)+,a2/a3		restore device ptr(s)

	printf <'Init: started IOTask\n'>
		moveq.l	#SIGF_SINGLE,d0
		jsr	_LVOWait(a6)		wait for init complete signal
	printf <'Init: IOTask signalled\n'>

		; couldn't do these above, since I hadn't allocated it yet
	IFD XT_SUPPORTED
		move.l	a5,hd_IOPort(a2)	IOTasks message port
	ENDC
		move.l	a5,hd_IOPort(a3)

		bra.s	AddDevices		everything is ready now

; We failed to make a device node so put up an alert (this is pretty drastic)
LibFailed	move.l	#AN_TrackDiskDev!AG_MakeLib,d7
		jsr	_LVOAlert(a6)
		bra.s	BadExit

; Finally, now we got this far, we can add our devices to the systems list. We
; are ready to be Opened and called now. This will happen when we mount stuff
; using the Open call with a flags value of -1 (find and mount all units).
AddDevices:
	IFD XT_SUPPORTED
		movea.l	a2,a1			add xt.device
		jsr	_LVOAddDevice(a6)
	ENDC

		movea.l	a3,a1			add scsi/at.device
		jsr	_LVOAddDevice(a6)

; since we know where the devices are in memory it is quite valid for us to
; call the Open routine of each of these devices directly.  We use a flags
; value of -1 which causes each device to allocate and initialise all units
; found on that particular device. Using this flags value means we need no
; IORequest or unit number since the Open routine will simply return here.
; Open will also return the number of device actually mounted so we know to
; retry the open operation if nothing at all responded.
		movea.l	a6,a5			stash exec.library
		moveq.l	#4,d2			maximum retry count
		moveq.l	#0,d3			total units found

ReInitUnits:
	IFD XT_SUPPORTED
		movea.l	a2,a6			xt device pointer to a6
		moveq.l	#-1,d1			flags are -1 (init units)
		bsr	Open			call directly (this is OK)
; took this out so the timeout jumper only affects scsi drives (XT not noted)
;		add.l	d0,d3
	ENDC

		movea.l	a3,a6			scsi/at device pointer to a6
		moveq.l	#-1,d1			flags are -1 (init units)
	printf <'Init: calling open\n'>
		bsr	Open			call directly
	printf <'Open returned %ld\n'>,d0
		add.l	d0,d3
		dbne	d2,ReInitUnits		none found, try again

		movea.l	a5,a6			restore exec.library

; if this was autoboot time, then available devices will have been added to
; the eb_Mountlist instead of DOS's device list.  To prevent this from being
; done on subsequent Opens with non zero flags the DiagArea ptrs are cleared
	IFD XT_SUPPORTED
		clr.l	hd_DiagArea(a2)		don't boot anymore....
	ENDC
		clr.l	hd_DiagArea(a3)		...just add to device list

;==============================================================================
; Everything initialised OK, so return non-zero in d0 to mark this fact.
; OOPS! If this is a DEVS: device we have to return the DeviceBase instead.
;
;==============================================================================
GoodExit	move.l	a3,d0			this means all went OK
		bra.s	Exit

BadExit		moveq.l	#0,d0			this means we screwed up
Exit		movem.l	(sp)+,d2-d7/a2-a5
		rts

;==============================================================================
; DeviceBase = MakeDevice( rootname )
;     d0		      a0
;
; Makes a library node for the given root device name and constructs a unique
; name for that device based on the root name and the names already known by
; the system.  I'm calling a routine in a separate module because the linker
; or assembler were screwing up the initial library table if it had relative
; references to external routines.  Now the table is in the same module as
; the routines being referenced, there are no link problems.
;==============================================================================
MakeDevice	movem.l	a2-a3,-(sp)
	printf <'MakeDevice(%s)\n'>,a0
		movea.l	a0,a2			stash the root name
		bsr	MyMakeLibrary		make the library node
		tst.l	d0			did we get it ?
		beq.s	MDFailed		nope, return 0
		movea.l	d0,a3			yes, stash lib base

		move.b	#NT_DEVICE,LN_TYPE(a3)	make our 'lib' a device
		move.b	#LIBF_SUMUSED!LIBF_CHANGED,LIB_FLAGS(a3)
		move.w	#VERSION,LIB_VERSION(a3)
		move.w	#REVISION,LIB_REVISION(a3)
		lea.l	IDString(pc),a0		some kinda descriptive ID
		move.l	a0,LIB_IDSTRING(a3)

		moveq.l	#24,d0			get memory for largest name
		bsr	GetPubMem
		move.l	d0,LN_NAME(a3)		this will be device name
		beq.s	MDFailed		no, return 0

		movea.l	d0,a1			now construct the name here
		movea.l	a2,a0
		bsr.s	MakeDeviceName
		tst.l	d0			did we get the name ?
		beq.s	MDFailed		nope, error out

		move.l	a3,d0			return devicebase in d0
	printf <'MakeDevice worked OK\n'>
MDFailed	movem.l	(sp)+,a2-a3
		rts

;==============================================================================
; name = MakeDeviceName( rootname, buffer ), _AbsExecBase
;  d0			    a0	     a1		   a6
;
; Constructs a device name in buffer based on the provided root name.  Scans
; execs list of devices to make sure there are no name collisions and prepends
; second, third, fourth, fifth etc. to the name until no collision occurs.
; The buffer should be large enough to hold the root name plus 10 characters.
;==============================================================================
; if in kickstart ROM, no other scsi device can have been inited yet!

MakeDeviceName
; can't make this depend on IN_KICK alone
; if it's the A4000T scsi device, or the A4000/A4000T ide device, use the
; funny name code
	IFND IN_KICK
USE_FUNNY_NAMES		SET	1
	ENDC
	IFD IN_KICK
USE_FUNNY_NAMES		SET	0
	ENDC
	IFD IS_A4000T
USE_FUNNY_NAMES		SET	1
	ENDC
	IFD IS_A1000
USE_FUNNY_NAMES		SET	1
	ENDC

	IFNE USE_FUNNY_NAMES
		movem.l	d2-d3/a2-a4,-(sp)
		movea.l	a0,a2			save root name
		movea.l	a1,a3			and destination buffer
		lea.l	Prepends(pc),a4		list of names we use
		jsr	_LVOForbid(a6)		stop race conditions
		moveq.l	#7,d3			maximum names - 1

NextName	movea.l	a3,a1			get destination buffer
10$		move.b	(a4)+,(a1)+		copy pre-string to buffer
		bne.s	10$			up to the null terminator
		subq.l	#1,a1			went one byte too far
		movea.l	a2,a0			now append root name
20$		move.b	(a0)+,(a1)+
		bne.s	20$

		move.l	a2,-(sp)		stash root name pointer
		lea.l	DeviceList+LH_HEAD(a6),a2  point to first link
ScanList	move.l	(a2),d0			is there a next pointer ?
		beq.s	NoMatch			nope, we finished the scan
		movea.l	d0,a2			yep, check this entry
		movea.l	LN_NAME(a2),a0		devices must have names
		movea.l	a3,a1			check against constructed name
		bsr.s	strcmp
		tst.l	d0			was it the same ?
		bne.s	ScanList		nope, check the next one
		movea.l	(sp)+,a2		found a matching name
		dbra	d3,NextName		so construct another one
		suba.l	a3,a3			ran out of names, return 0
		bra.s	NoSpace			stack fixed up already

NoMatch		addq.l	#4,sp			scrap root name pointer
NoSpace		jsr	_LVOPermit(a6)		we were in Forbid() state
		move.l	a3,d0			return constructed name pointer
		movem.l	(sp)+,d2-d3/a2-a4	restore work registers
		rts				all done

Prepends	DC.B	0			first name is      xxxx.device
		DC.B	'2nd.',0		followed by    2nd.xxxx.device
		DC.B	'3rd.',0		followed by    3rd.xxxx.device
		DC.B	'4th.',0		followed by    4th.xxxx.device
		DC.B	'5th.',0		probably never more than this..
		DC.B	'6th.',0		...but just for safety...
		DC.B	'7th.',0		...I'm putting these in too
		DC.B	'8th.',0
		CNOP	0,2
	ENDC

	IFEQ USE_FUNNY_NAMES
		move.l	a1,d0
1$:		move.b	(a0)+,(a1)+
		bne.s	1$
		rts
	ENDC

	IFNE USE_FUNNY_NAMES
; not used except in expansion devices

;==============================================================================
; Length = strlen( string )
;  d0.w		     a0
;
; Returns the length of the given NULL terminated string in d0.w
;==============================================================================
strlen		moveq.l	#-1,d0		initialise count
10$		tst.b	(a0)+		check for ending byte
		dbeq	d0,10$		and branch back if not there yet
		addq.w	#1,d0		adjust count back up (started at -1)
		neg.w	d0		convert from negative to positive
		rts			and that's all

;==============================================================================
; result = strcmp( string1, string2 )
;   d0		     a0       a1
;
; Returns the relationship between string1 and string2.  Results returned are
;
; -1	string2 < string1
;  0	string2 = string1
;  1	string2 > string1
;
; both string1 and string2 must be null terminated.
;==============================================================================
strcmp		move.l	a0,-(sp)	save string1 pointer
		bsr.s	strlen		get length of string1
		movea.l	(sp)+,a0	get back string1 pointer
10$		cmpm.b	(a0)+,(a1)+	start comparing memory
		dbne	d0,10$		loop until unequal
		blt.s	20$		string2 < string1
		bgt.s	30$		string2 > string1
		moveq.l	#0,d0		string2 = string1
		rts
20$		moveq.l	#-1,d0
		rts
30$		moveq.l	#1,d0
		rts
	ENDC

;==============================================================================
; Memory = GetPubMem( size )
;  d0  		       d0
;
; Allocates the required amount of public memory and returns its address or 0
;==============================================================================
GetPubMem	move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		jmp	_LVOAllocMem(a6)

		END

@


1.20
log
@fixes to make init use 2nd.scsi.device if in A4000T rom
@
text
@d13 1
d36 1
d45 2
d276 39
a329 3
		; Some ide drives wait too long before asserting busy (esp.
		; with a1000).  Add a 1-second delay before looking for
		; hardware.
a330 4
	    IFD IS_A1000
;		bsr	WaitASecond
;		bsr	WaitASecond		FIX!!!! too long!!!
	    ENDC
@


1.19
log
@A4091 checkin
Add many ifdefs for A4000 and A4000T, and to save space in the rom
(mainly strings)
@
text
@d156 1
a156 1
		DC.L	DeviceName		root name of this device
d172 1
d178 1
d184 1
d191 1
d198 1
d206 1
d211 1
d218 1
d588 3
d592 13
d650 1
a650 1
	ENDC !IN_KICK
d652 1
a652 1
	IFD IN_KICK
d659 1
a659 1
	IFND IN_KICK
d679 1
a679 1
; Returns the relationship between string1 and string2.  Results returned are;
d700 1
a700 1
	ENDC !IN_KICK
@


1.18
log
@removed strings
@
text
@d51 6
d67 3
d71 1
d73 1
d75 4
d105 1
d107 1
a107 1

d112 1
d164 1
d198 16
d262 7
d301 1
a301 1
		beq.s	NoMemory		allocation faled
d348 55
d429 1
a429 1
	IFD A590_A2091_ONLY
a430 1
	ENDC
d440 1
d444 1
d451 1
a451 19
; The task we just added has signalled us that it finished initialisation of
; itself and SCSITask.  Now we make the actual library nodes for both the
; xt.device and the scsi.device.
; Note: NOT FOR IDE!
	IFD XT_SUPPORTED
		lea.l	XTRootName(pc),a0	make the xt.device
		bsr	MakeDevice		makes it but doesn't add it
		tst.l	d0			returns 0 = error
		beq.s	LibFailed
		movea.l	d0,a2			a2 points to xt.device
	ENDC

		lea.l	DeviceName(pc),a0	make the scsi/at.device
		bsr	MakeDevice
		tst.l	d0			returns 0 = error
		beq.s	LibFailed
		movea.l	d0,a3			a3 points to scsi/at.device

; initialise some of the globals for each of the device entries
a452 1
		move.l	a6,hd_SysLib(a2)	exec.library pointer
a453 5
		move.l	d3,hd_DiagArea(a2)	may be a diag table ptr here
		move.l	d4,hd_ConfigDev(a2)	so we'll need configdev ptr
		clr.w	hd_Type(a2)		mark this as an xt device
		lea.l	hd_HDUnits(a2),a1	initialise unit lists
		NEWLIST	a1
d455 1
a456 12
		move.l	a6,hd_SysLib(a3)
		move.l	a5,hd_IOPort(a3)
		move.l	d3,hd_DiagArea(a3)
		move.l	d4,hd_ConfigDev(a3)
	IFND IS_IDE
		move.w	#1,hd_Type(a3)		mark this as a scsi device
	ENDC
	IFD IS_IDE
		clr.w	hd_Type(a3)		mark as xt/at device
	ENDC
		lea.l	hd_HDUnits(a3),a1
		NEWLIST	a1
@


1.17
log
@Dosname must be public
@
text
@d90 1
a90 2

BootName	DC.B	'romboot.device',0
a91 1
	ENDC AUTOBOOT_ROM
d152 1
d164 1
a165 1
DeviceName	DC.B	'scsi.device',0
d170 1
a171 1
DeviceName	DC.B	'scsi.device',0
d176 1
a177 1
DeviceName	DC.B	'scsi.device',0
@


1.16
log
@Use TaggedOpenLibrary for V39
@
text
@d38 1
a38 1
		XDEF	GetPubMem
d40 1
a40 1
		XDEF	DosName,ExpanName
@


1.15
log
@removed the "wait 2 seconds" hack
@
text
@d16 1
d28 1
d39 3
a41 1
		XDEF	DosName
d150 1
d152 1
d205 1
d209 5
@


1.14
log
@Added a SECOND waitasecond for IDE drives.  ALso made waits only happen
on A1000 (a600 & CDTV are too slow to need it).
@
text
@d232 2
a233 2
		bsr	WaitASecond
		bsr	WaitASecond		FIX!!!! too long!!!
@


1.13
log
@Added 1-second wait to IDE drives (to try to fix broken drives).
@
text
@d231 1
d233 2
@


1.12
log
@DOn't pass execbase
@
text
@d34 1
a34 1
		XREF	MyMakeLibrary,IOTask,Open,EndCode
d227 3
d231 1
@


1.11
log
@Oops.  the new tasks stack is in a0, not sp.
@
text
@d282 1
a320 1
		move.l	a6,-(a0)		and exec library
@


1.10
log
@Added support for dmac identification
@
text
@d315 1
a315 1
		move.l	d6,-(sp)		pass (byte) terminal count flag
@


1.9
log
@Changes to DosName (IFD's, CNOPs)
@
text
@d193 1
a193 1
Init		movem.l	d2-d5/d7/a2-a5,-(sp)
d213 1
d277 6
d314 3
d443 1
a443 1
Exit		movem.l	(sp)+,d2-d5/d7/a2-a5
@


1.8
log
@saved some space - don't close expansion, if IN_KICK it can't be
2nd.scsi.device, etc.
@
text
@a36 2

	IFD AUTOBOOT_ROM
a37 1
	ENDC AUTOBOOT_ROM
d87 3
a91 2
		CNOP	0,4
BootName	DC.B	'romboot.device',0
a92 2

	ENDC AUTOBOOT_ROM
@


1.7
log
@Couldn't make it bra.s, a590 version chokes.  Need macro.
@
text
@d236 3
a238 7
		bne.s	found_ide

		; no hardware, close expansion and exit fast
		movea.l	d0,a1
		jsr	_LVOCloseLibrary(a6)	a6 is still exec
		bra	BadExit			return failure
found_ide:
d242 3
a244 5
		move.l	d0,-(sp)		and save the pointer
		movea.l	a6,a1			done with expansion lib now
		movea.l	_AbsExecBase,a6		so it's safe to close it
		jsr	_LVOCloseLibrary(a6)
		move.l	(sp)+,d4		get back ConfigDev ptr
d268 2
a269 3
		movea.l	a6,a1			done with expansion lib now
		movea.l	_AbsExecBase,a6		so it's safe to close it
		jsr	_LVOCloseLibrary(a6)
d491 1
a491 1
; FIX! not really needed for AT IDE!
d493 3
a495 1
MakeDeviceName	movem.l	d2-d3/a2-a4,-(sp)
d540 11
d590 1
@


1.6
log
@bra -> bra.s
@
text
@d350 1
a350 1
		bsr.s	MakeDevice
@


1.5
log
@For IDE, check if there appears to be a drive before starting the
somewhat irreversible allocation and startup stuff.  If no drive, just
exit with an error fast.  Check may not be quite 100% - this is ok.
@
text
@d350 1
a350 1
		bsr	MakeDevice
@


1.4
log
@Made three allocations one for code space savings, also makes it easier
to try to shut down.
a bit of cleanup
@
text
@d216 29
a244 1
GetBoardAddr	movea.l	d0,a6
d258 1
a258 1
		movea.l	d4,a0
d260 1
a260 7
	IFD IS_SCSIDISK
		lea	$00dd0000,a4		hard coded board address
	ENDC
	IFD IS_IDE
		lea	IDE_Fast,a4		hard coded board address
	ENDC
		move.l	a4,cd_BoardAddr(a0)	save in configdev
@


1.3
log
@Fixed include file issues (use include: files instead of private ones)
@
text
@d150 2
a154 1
ExpanName	DC.B	'expansion.library',0
a159 1
ExpanName	DC.B	'expansion.library',0
a163 1
ExpanName	DC.B	'expansion.library',0
a169 1
ExpanName	DC.B	'expansion.library',0
a175 1
ExpanName	DC.B	'expansion.library',0
d233 1
a233 1
		movea.l	#$00dd0000,a4		hard coded board address
d271 3
a273 5
		moveq.l	#MP_SIZE,d0		get a message port
		bsr	GetPubMem
		tst.l	d0
		beq.s	NoMemory
		movea.l	d0,a5			save port for library code
d275 2
a276 1
		move.l	#DEVSTACK,d0		get the stack memory
a277 5
		move.l	d0,d2			stash for later AddTask call
		beq.s	NoMemory		didn't get the memory

		move.l	#TC_SIZE,d0		and the task control block
		bsr	GetPubMem
d279 1
a279 1
		bne.s	StartIOTask		got it, now start the IOTask
d289 4
a292 2
StartIOTask	movea.l	d0,a1			point to TCB
		movea.l	d2,a0			and to the stack
@


1.2
log
@first major checkin, now that it's home is determined
Init now for the ide driver spawns the scsitask as a coroutine instead of
an actual second task, to save memory and space, since the ide driver
con't do reselect anyways.
@
text
@a3 1
		INCLUDE	"modifiers.i"
d15 3
a19 1
		INCLUDE	"scsidirect.i"
@


1.1
log
@Initial revision
@
text
@d17 1
d30 1
d37 1
d39 1
d42 8
d58 3
d63 5
d70 1
d95 34
d144 6
a149 1
		CNOP	0,4
d151 3
a153 1
		CNOP	0,4
d155 2
d158 16
a173 1
		CNOP	0,4
d175 2
d178 3
d216 1
d233 2
d236 4
d245 26
d324 1
d333 2
a334 2
		lea.l	DeviceName(pc),a0	make the scsi.device
		bsr.s	MakeDevice		makes it but doesn't add it
d337 1
a337 1
		movea.l	d0,a3			a3 points to scsi.device
d354 1
d356 4
d378 1
a378 1
		movea.l	a3,a1			add scsi.device
d401 1
a401 1
		movea.l	a3,a6			scsi device pointer to a6
d482 2
@
