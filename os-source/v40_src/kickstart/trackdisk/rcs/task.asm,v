head     27.10;
branch   ;
access   ;
symbols  V36_21:27.9 V36_20:27.9 V36_19:27.9 V36_18:27.9 V36_16:27.8 V36_15:27.8 V36_14:27.8 V36_13:27.8 V36_10:27.7 V36_9:27.6 V36_6:27.5 V36_5:27.4 V36_4:27.4 L36_2:27.1 L33_127:27.1 L33_126:27.1 L33_124:27.1 L33_120:27.1 L33_119:27.1 L33_116:27.1 L33_113:27.1 L33_106:27.1 L32_98:27.1 L31_87:27.1 L31_57:27.1 L31_56:27.1 L1_55:27.1 L1_54:27.1 L1_51:27.1 L1_47:27.1 L1_45:27.1 L1_44:27.1 L29_44:27.1 L29_42:27.1 L28_37:27.1 L28_35:27.1 L28_27:27.1 L28_26:27.1 L27_5:27.1 L27_2:27.1 L26_3:26.1 L26_0:26.1;
locks    ; strict;
comment  @* @;


27.10
date     91.03.13.20.45.39;  author jesup;  state Exp;
branches ;
next     27.9;

27.9
date     90.11.21.04.19.27;  author jesup;  state Exp;
branches ;
next     27.8;

27.8
date     90.06.01.23.18.09;  author jesup;  state Exp;
branches ;
next     27.7;

27.7
date     90.03.03.16.20.01;  author jesup;  state Exp;
branches ;
next     27.6;

27.6
date     90.03.01.23.00.55;  author jesup;  state Exp;
branches ;
next     27.5;

27.5
date     89.12.10.18.35.57;  author jesup;  state Exp;
branches ;
next     27.4;

27.4
date     89.04.27.23.40.19;  author jesup;  state Exp;
branches ;
next     27.3;

27.3
date     89.02.17.19.22.37;  author jesup;  state Exp;
branches ;
next     27.2;

27.2
date     89.02.16.18.02.23;  author jesup;  state Exp;
branches ;
next     27.1;

27.1
date     85.06.24.13.37.50;  author neil;  state Exp;
branches ;
next     26.1;

26.1
date     85.06.17.15.13.33;  author neil;  state Exp;
branches ;
next     ;


desc
@@


27.10
log
@Fixed CMD_START - when stopped, clear the active bit
@
text
@
*************************************************************************
*									*
*	Copyright (C) 1985, Commodore Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************

*************************************************************************
*
* task.asm
*
* Source Control
* ------ -------
* 
* $Id: task.asm,v 27.9 90/11/21 04:19:27 jesup Exp Locker: jesup $
*
* $Locker: jesup $
*
* $Log:	task.asm,v $
* Revision 27.9  90/11/21  04:19:27  jesup
* *** empty log message ***
* 
* Revision 27.8  90/06/01  23:18:09  jesup
* Conform to include standard du jour
* 
* Revision 27.7  90/03/03  16:20:01  jesup
* fixed the signaling stuff, pass task as arg to new task
* 
* Revision 27.6  90/03/01  23:00:55  jesup
* OpenDevice waits for the task to start before returning (uses SIGF_SINGLE)
* 
* Revision 27.5  89/12/10  18:35:57  jesup
* Support for Stop/Start
* 
* Revision 27.4  89/04/27  23:40:19  jesup
* fixed autodocs
* 
* Revision 27.3  89/02/17  19:22:37  jesup
* minor cleaup
* 
* Revision 27.2  89/02/16  18:02:23  jesup
* minor branch optimizations
* 
* Revision 27.1  85/06/24  13:37:50  neil
* Upgrade to V27
* 
* Revision 26.1  85/06/17  15:13:33  neil
* *** empty log message ***
* 
* 
*************************************************************************

****** Included Files ***********************************************

	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE 'exec/lists.i'
	INCLUDE 'exec/ports.i'
	INCLUDE 'exec/libraries.i'
	INCLUDE 'exec/io.i'
	INCLUDE 'exec/devices.i'
	INCLUDE 'exec/tasks.i'
	INCLUDE 'exec/ables.i'
	INCLUDE 'exec/interrupts.i'
	INCLUDE	'exec/execbase.i'

	INCLUDE 'resources/disk.i'

	INCLUDE 'devices/timer.i'

	INCLUDE 'trackdisk.i'
	INCLUDE 'asmsupp.i'
	INCLUDE 'internal.i'
	INCLUDE 'messages.i'

	SECTION section


****** Imported Globals *********************************************

	XREF	tdName

****** Imported Functions *******************************************

	EXTERN_LIB GetMsg
	EXTERN_LIB RemTask
	EXTERN_LIB Wait
	EXTERN_LIB Signal

	XREF	TDChangeTick
	XREF	TDMotor
	XREF	TDWriteBuffer
	XREF	PerformIO

	TASK_ABLES

****** Exported Functions *******************************************

	XDEF	TDTaskStart
	XDEF	perform


***** Local Definitions **********************************************


*****i* trackdisk.device/internal/TDTaskStart *************************
*
*   NAME
*	TDTaskStart - main unit task code
*
*   SYNOPSIS
*	TDTaskStart( TDUnit, TDLib, parent_task )
*		      4(sp)   8(sp)    12(sp)
*
*   FUNCTION
*	This driver is modelled as two independant, mutually asynchronous
*	units -- the read side and the write side.  This gets to be a
*	little fun because we are supposed to look like only one unit
*	to the user.
*
*	We will do this by having three unit structures:  One for the
*	main task (for GoIO to send things to), one for reading, and
*	one for writting. (!!! What should we do for CONTROL operations?)
*
***********************************************************************


TDTaskStart:
*		;------ Grab the arguments
		MOVE.L	12(SP),A2	; task who started us
		MOVE.L	8(SP),A6
		MOVE.L	4(SP),A3

		IFGE	INFO_LEVEL-40
		MOVE.L	A3,-(SP)
		MOVE.L	A6,-(SP)
		INFOMSG	40,<'%s/TDTaskStart: dev 0x%lx unit 0x%lx'>
		ADDQ.L	#8,SP
		ENDC

*		;------ Initialize the unit ports(s).
		LEA	TDU_TCB(A3),A0
		MOVE.L	A0,MP_SIGTASK(A3)

*		;------ kick off the timer daemon
		BSR	TDChangeTick

*		;------ Say we're ready for business (we know if a disk is in)
		MOVE.L	A2,A1			; task that called OpenDevice
		MOVEQ	#SIGF_SINGLE,D0		; convenient
		MOVE.L	A6,A5			; save device ptr
		MOVE.L	TD_SYSLIB(A6),A6
		JSR	_LVOSignal(A6)
		MOVE.L	A5,A6			; restore device ptr

task_start:
*		;------ Wait for something to do
		MOVE.L	#TDF_PORT!TDF_DEVDONE,D0
		LINKSYS Wait

		BSR.S	perform
		BRA.S	task_start

perform:
*		;------ See if the unit(s) is busy
		BSET.B	#UNITB_ACTIVE,UNIT_FLAGS(A3)
		BNE	perform_end

perform_msg:
*		;------ Make sure we haven't been stopped
*		;------ To make this work, CMD_START _must_ be immediate!
*		;------ Goes to clear to indicate we're not in perform now
		BTST.B	#TDUB_STOPPED,TDU_FLAGS(A3)
		BNE	perform_clear

*		;------ The unit is not busy.  Start it up.
		MOVE.L	A3,A0
		LINKSYS GetMsg

*		;------ See if the port is empty
		TST.L	D0
		BEQ	perform_clear

		MOVE.L	D0,A2

*		;------ see if we had a delayed motor off command
		BCLR	#TDUB_DELMOTOROFF,TDU_FLAGS(A3)
		BEQ.S	perform_timer

		INFOMSG 50,<'%s/perform: delayed cleanup'>

*		;----- If the buffer was dirty, write it out
		MOVE.L	TDU_BUFPTR(A3),A0
		BCLR	#TDBB_DIRTY,TDB_FLAGS(A0)
		BEQ.S	perform_stale

		MOVE.L	A0,TDU_BUFFER(A3)
		BSR	TDWriteBuffer

perform_stale:
*		;----- Mark the buffer as invalid
		MOVE.L TDU_BUFPTR(A3),A0
		MOVEQ	#-1,D0
		MOVE.W	D0,TDB_TRACK(A0)

*		;------ force a calibrate
		MOVE.W	D0,TDU_SEEKTRK(A3)

*		;------ turn the motor off
		MOVEQ	#0,D0
		BSR	TDMotor

		MOVE.L	A6,A0
		MOVE.L	TD_SYSLIB(A0),A6
		FORBID
		MOVE.L	A0,A6

		TST.W	UNIT_OPENCNT(A3)
		BNE.S	perform_notexpunge

		INFOMSG 50,<'%s/perform: removing unit'>

		;------ free up the resource unit
		CLEAR	D0
		MOVE.B	TDU_UNITNUM(A3),D0
		LINKLIB	DR_FREEUNIT,TD_DISCRESOURCE(A6)

		;------ mark us as gone
		LEA	TDU0(A6),A0
		CLEAR	D0
		MOVE.B	TDU_UNITNUM(A3),D0
		LSL.L	#2,D0
		ADD.L	D0,A0
		CLR.L	(A0)

		;------ and make us go away
		SUB.L	A1,A1
		LINKSYS	RemTask,TD_SYSLIB(A6)

		;------ never get here (hope, hope)
		INFOMSG	40,<'%s/perform:  came back after RemTask!!'>


perform_notexpunge:
		LINKSYS	Permit,TD_SYSLIB(A6)


perform_timer:
		MOVE.L	A2,A1
		LEA	TDU_CHANGETIMER(A3),A0
		CMP.L	A0,A2
		BNE.S	perform_request

*		;------ This is not really a user request -- it is one of our
*		;------ timers.

		BSR	TDChangeTick
		BRA	perform_msg

perform_request:

*		;------ mark us as being in the "driver task"
		BSET	#UNITB_INTASK,UNIT_FLAGS(A3)

		IFGE	INFO_LEVEL-50
		PEA	0
		MOVE.W	IO_COMMAND(A1),2(SP)
		MOVE.L	A1,-(SP)
		INFOMSG	50,<'%s/task: performing IOB 0x%lx command 0x%lx'>
		ADDQ.L	#8,SP
		ENDC

*		;------ actually do the IO
		BSR	PerformIO

		BRA	perform_msg

perform_clear:
*		;------ There is no more work to do.  Clear the driver.
		BCLR	#UNITB_INTASK,UNIT_FLAGS(A3)
		BCLR	#UNITB_ACTIVE,UNIT_FLAGS(A3)


perform_end:
		RTS

	END
@


27.9
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Id: task.asm,v 27.8 90/06/01 23:18:09 jesup Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d172 1
d174 1
a174 1
		BNE	perform_end
@


27.8
log
@Conform to include standard du jour
@
text
@d15 1
a15 1
* $Id: /usr/rebma/jesup/trackdisk/RCS/task.asm,v 27.7 90/03/03 16:20:01 jesup Exp Locker: jesup $
d17 1
a17 1
* $Locker: jesup $
d20 3
d163 1
a163 1
		BSET	#UNITB_ACTIVE,UNIT_FLAGS(A3)
@


27.7
log
@fixed the signaling stuff, pass task as arg to new task
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.6 90/03/01 23:00:55 jesup Exp $
d17 1
a17 1
* $Locker:  $
d20 3
@


27.6
log
@OpenDevice waits for the task to start before returning (uses SIGF_SINGLE)
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.5 89/12/10 18:35:57 jesup Exp $
d17 1
a17 1
* $Locker: jesup $
d20 3
d103 2
a104 2
*	TDTaskStart( TDUnit, TDLib )
*		      4(sp)   8(sp)
a147 2
		BSR.S	perform

d151 2
@


27.5
log
@Support for Stop/Start
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.4 89/04/27 23:40:19 jesup Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d76 1
d117 2
a118 1
*		;------ Grab the argument
d135 8
@


27.4
log
@fixed autodocs
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.3 89/02/17 19:22:37 jesup Exp $
d17 1
a17 1
* $Locker: jesup $
d20 3
d145 5
@


27.3
log
@minor cleaup
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.2 89/02/16 18:02:23 jesup Exp $
d20 3
d35 1
a35 1
******* Included Files ***********************************************
d61 1
a61 1
******* Imported Globals *********************************************
d65 1
a65 1
******* Imported Functions *******************************************
d78 1
a78 1
******* Exported Functions *******************************************
d87 1
a87 1
*---------------------------------------------------------------------
d89 2
a90 1
* Task stuff
d92 3
a94 1
*---------------------------------------------------------------------
d96 5
a100 4
* This driver is modelled as two independant, mutually asynchronous
* units -- the read side and the write side.	This gets to be a
* little fun because we are supposed to look like only one unit
* to the user.
d102 3
a104 3
* We will do this by having three unit structures:  One for the
* main task (for GoIO to send things to), one for reading, and
* one for writting. (!!! What should we do for CONTROL operations?)
d106 1
a106 1
*
a109 2


@


27.2
log
@minor branch optimizations
@
text
@d15 1
a15 1
* $Header: task.asm,v 27.1 85/06/24 13:37:50 neil Exp $
d20 3
a125 1
task_wait:
a129 1

@


27.1
log
@Upgrade to V27
@
text
@d15 1
a15 1
* $Header: task.asm,v 26.1 85/06/17 15:13:33 neil Exp $
d17 1
a17 1
* $Locker:  $
d20 3
a120 2


a122 1

d127 1
a127 1
		BRA	task_start
d148 1
a148 1
		BEQ	perform_timer
d155 1
a155 1
		BEQ	perform_stale
d179 1
a179 1
		BNE	perform_notexpunge
@


26.1
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: task.asm,v 25.4 85/06/07 22:16:49 neil Exp $
d20 3
@
