head     40.2;
branch   ;
access   ;
symbols  V40_2:40.2;
locks    ; strict;
comment  @ * @;


40.2
date     93.06.04.09.49.53;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.06.03.15.41.20;  author mks;  state Exp;
branches ;
next     ;


desc
@ROM Disk
@


40.2
log
@New transfer code that knows that there is only one block
@
text
@/* transfer.c */

#include "ram_includes.h"
#include "ram.h"

LONG read(struct lock *lock,CPTR buf,LONG bsize)
{
struct data *pos;
LONG offset;
LONG count=0;

	/* get data about the file */
	offset = lock->offset;		/* offset of next valid position */

	if (pos=(struct data *)(lock->block))
	{
		count = pos->size - offset;
		if (count > bsize) count=bsize;
		CopyMem(((char *)pos) + offset,(char *)buf,count);
		lock->offset += count;
		lock->cpos +=count;
	}

	return count;	/* number of bytes read/written */
}
@


40.1
log
@*** empty log message ***
@
text
@d6 1
a6 12
/********************************************************/
/* nbytes := transfer(lock,buf,bsize,readflag)          */
/*                                                      */
/* General read/write routine                           */
/********************************************************/

#ifdef DOWN_CODED
LONG
read (lock,buf,bsize)
	struct lock *lock;
	CPTR buf;
	LONG bsize;
d8 3
a10 5
	struct data *pos;
	struct data *next;
	LONG offset;
	LONG max,count;
	LONG avail,needed,tsize;
a12 1
	pos    = (struct data *) lock->block;		/* current block */
d15 7
a21 32
	if (pos == NULL)
		return 0;

	max = pos->size;

	/* number of bytes read */
	count  = 0;
	needed = bsize;

	while (needed > 0) {
		avail  = max - offset + 1;	/* space in this block */
		if (avail <= 0)			/* next block needed */
		{
			next = pos->next;
			if (next == NULL)	/* new block needed */
			{
				break;	/* EOF */
			}
			pos    = next;
			max    = pos->size;
			offset = FIRSTBUFFPOS;
			continue;
		}
		tsize = (avail < needed ? avail : needed);

		/* src, dest,size (bytes) */
		xfer(((char *) pos) + offset,
		     ((char *) buf) + count, tsize);

		count  += tsize;
		offset += tsize;
		needed -= tsize;
a23 5
	/* save end positions */
	lock->block  = (struct node *) pos;
	lock->offset = offset;
	lock->cpos   += count;

a25 1
#endif
@
