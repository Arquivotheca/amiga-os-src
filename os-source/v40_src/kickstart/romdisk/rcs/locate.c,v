head     40.2;
branch   ;
access   ;
symbols  V40_2:40.2;
locks    ; strict;
comment  @ * @;


40.2
date     93.06.04.10.18.52;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.06.03.15.41.04;  author mks;  state Exp;
branches ;
next     ;


desc
@ROM Disk
@


40.2
log
@Locate simplified (all link support removed)
@
text
@/* locate.c */

#include "ram_includes.h"
#include "ram.h"

struct lock *locate(struct lock *lock,char *str,LONG mode)
{
struct node *dptr;
char name[MAX_FILENAME+1];

	if (dptr=checklock(lock))
	{
		/* note: readlink() depends on the behavior of this routine (and of */
		/* finddir()).  It assumes current_node is valid if finddir fails.  */

		if (dptr=finddir(dptr,str,name))
		{
			if (name[0]!='\0')
			{
				if (findentry(dptr,name)) dptr=current_node;
				else dptr=NULL;
			}
		}
	}

	return (dptr ? getlock(dptr,mode) : NULL);
}
@


40.1
log
@*** empty log message ***
@
text
@d6 1
a6 5
struct lock *
locate (lock,str,mode)
	struct lock *lock;
	char *str;
	LONG mode;
d8 2
a9 1
	struct node *dptr;
d11 4
a14 22
	/* find the node to try to lock (following links) */
	dptr = locatenode(lock,str,TRUE);

	return (dptr ? getlock(dptr,mode) : NULL);
}

/* for when we have a lock */

struct node *
locatenode (lock,str,follow_links)
	struct lock *lock;
	char *str;
	LONG follow_links;
{
	struct node *dptr;

	dptr = checklock(lock);
	if (dptr == NULL)
		return NULL;

	return findnode(dptr,str,follow_links);
}
d16 8
a23 22
/* for when we have a dptr (node) */

struct node *
findnode (dptr,str,follow_links)
	struct node *dptr;
	char *str;
	LONG follow_links;
{
	char name[MAX_FILENAME+1];

	/* note: readlink() depends on the behavior of this routine (and of */
	/* finddir()).  It assumes current_node is valid if finddir fails.  */

	dptr = finddir(dptr,str,name);
	if (dptr == NULL)
		return NULL;

	if (name[0] != '\0')
	{
		if (!findentry(dptr,name,follow_links))
			return NULL;
		dptr = current_node;
d26 1
a26 1
	return dptr;
@
