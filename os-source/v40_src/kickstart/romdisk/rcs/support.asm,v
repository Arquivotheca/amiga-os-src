head     40.2;
branch   ;
access   ;
symbols  V40_2:40.2;
locks    ; strict;
comment  @* @;


40.2
date     93.06.04.09.49.18;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.06.03.15.41.30;  author mks;  state Exp;
branches ;
next     ;


desc
@ROM Disk
@


40.2
log
@Removed the downcoded transfer code
@
text
@*
* support.asm
*
        INCLUDE "exec/types.i"
        INCLUDE "exec/nodes.i"
        INCLUDE "exec/lists.i"
        INCLUDE "exec/ports.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/tasks.i"
        INCLUDE "exec/memory.i"
        INCLUDE "exec/execbase.i"
        INCLUDE "libraries/dos.i"
        INCLUDE "libraries/dosextens.i"
        INCLUDE "libraries/dos_lib.i"

FUNCDEF	MACRO
	XREF	_LVO\1
	ENDM

        INCLUDE "exec/exec_lib.i"

callsys macro
        CALLLIB _LVO\1
        endm

        section text,code

	BASEREG	a4

	XREF _SysBase
	XREF _UtilityBase
	XREF _LVOStricmp
	XREF _LVOSMult32
	XREF _LVOSDivMod32

	XDEF @@BtoC
	XDEF @@CtoBcpy
	XDEF @@stricmp
	XDEF @@mult32
	XDEF @@div32
	XDEF @@rem32
	XDEF @@freelist
	XDEF @@NewList
	XDEF @@freevec

*
* char *BtoC(char * __reg A0 objname, LONG __reg D0 bstr)
*
@@BtoC:
	asl.l	#2,d0		; also return value
	move.l	d0,a1		; source (bstr)
	move.l	a0,d0		; destination, also return code
	moveq	#0,d1
	move.b	(a1)+,d1	; length
	bra.s	2$

1$:	move.b  (a1)+,(a0)+	; a1 is one char ahead of a0
2$:	dbra	d1,1$

	clr.b	(a0)		; terminate
				; d0 already has return value
	rts

*
* void CtoBcpy(char * __reg a0 dest, char * __reg a1 src)
*
@@CtoBcpy:
	move.l	a0,d0
	addq.l	#1,a0

1$:	move.b	(a1)+,(a0)+	; non-overlapping
	bne.s	1$

	move.l	d0,a1
	sub.l	a0,d0
	neg.w	d0		; may be 257
	subq.w	#2,d0
	move.b	d0,(a1)
	rts

*
* stricmp
*
@@stricmp:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)!!!!!!
	jsr	_LVOStricmp(a6)
	move.l	(sp)+,a6
	rts

*
* multiply d0 * d1, result in d0.
*
@@mult32:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)
	jsr	_LVOSMult32(a6)
	move.l	(sp)+,a6
	rts

*
* divide d0 by d1, result in d0, remainder in d1
*
@@div32:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)
	jsr	_LVOSDivMod32(a6)
	move.l	(sp)+,a6
	rts

@@rem32:	jsr	@@div32
	move.l	d1,d0
	rts

*
* long(d0) freelist (struct node * __reg a0 list);
* duplicate of unloadseg, mostly
* handles freelist(0);
* returns number of nodes freed
*
@@freelist:
	movem.l	d2/a2/a6,-(a7)	; save
	move.l	_SysBase,a6	; actually (a4)!!!!
	moveq	#0,d2
	move.l	a0,a2
1$:	move.l	a2,a1		; freevec takes arg in a1
	move.l	a1,d0		; end on null
	beq.s	2$
	move.l	(a2),a2		; next pointer
	jsr	_LVOFreeVec(a6)
	addq.l	#1,d2
	bra.s	1$
2$:	move.l	d2,d0
	movem.l	(a7)+,d2/a2/a6
	rts


*
* Stub routine to reduce code size
* freevec(void *ptr)
*
@@freevec:
	move.l	a6,-(sp)
	move.l	_SysBase,a6	; actually (a4)
	move.l	a0,a1		; freevec takes arg in a1
	jsr	_LVOFreeVec(a6)
	move.l	(sp)+,a6
	rts

*
* NewList(struct List *list)
*
@@NewList:
	NEWLIST	A0
	rts

	END
@


40.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
* 
d25 1
a25 1
        
a43 1
	XDEF @@read
d60 1
a60 1
	clr.b	(a0)		; terminate 
a154 78
	rts


*
* a0 lock, d0 buf, d1 buffsize
*

* equates for ram.h structures:
next		EQU	0
size		EQU	4
FIRSTBUFPOS	EQU	8

block		EQU	fl_SIZEOF
offset		EQU	fl_SIZEOF+4
cpos		EQU	fl_SIZEOF+8

@@read:
	movem.l	d2-d5/a2-a3/a5-a6,-(a7)
	move.l	_SysBase,a6		; actually (a4)!!!!

	; get args
	move.l	a0,a2			; lock
	move.l	d0,a5			; buffer ptr
	move.l	d1,d5			; bsize (bytes still needed)

	move.l	offset(a2),d3		; offset (in current block)
	move.l	block(a2),a3		; pos (current block) (cannot be null)
	move.l	size(a3),d2		; pos->size (max chars in block)

	moveq	#0,d4			; count of characters read so far
	bra.s	loop_test

loop:
	move.l	d2,d0			; are there any characters in block?
	sub.l	d3,d0
	addq.l #1,d0			; avail = max - offset + 1
	bgt.s	have_chars

	;-- no characters left in this block, find another
	move.l	next(a3),d0		; next is at offset 0!
	beq.s	loop_break		; EOF - return what we got
	move.l	d0,a3			; new block ptr (pos)
	move.l	size(a3),d2		; all characters are available for read
	moveq	#FIRSTBUFPOS,d3		; start position in block (offset)
	bra.s 	loop			; will recalculate available chars

have_chars:
	;-- # of characters available in block is in d0
	cmp.l	d0,d5			; calculate # to xfer (needed - avail)
	bge.s	use_all_available	; need more than we have
	move.l	d5,d0			; have more in block than we need

use_all_available:
	; set up xfer args (d0 has # to xfer)
	move.l	a3,a0			; source 
	add.l	d3,a0			; offset (pos + offset)	
	move.l	a5,a1			; destination
	add.l	d4,a1			; count  (buf + count)

	; bump counts before xfer
	add.l	d0,d4			; count  += tsize
	add.l	d0,d3			; offset += tsize
	sub.l	d0,d5			; needed -= tsize

	jsr	_LVOCopyMem(a6)		; a0 - src, a1 - dest, d0 - count

loop_test:
	tst.l	d5			; still need characters?
	bgt.s	loop

loop_break:
	; save end positions in lock
	move.l	a3,block(a2)
	move.l	d3,offset(a2)
	add.l	d4,cpos(a2)		; current seek position += count
	move.l	d4,d0			; return count

	movem.l	(a7)+,d2-d5/a2-a3/a5-a6
@
