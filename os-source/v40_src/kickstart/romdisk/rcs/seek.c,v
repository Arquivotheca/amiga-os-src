head     40.2;
branch   ;
access   ;
symbols  V40_2:40.2;
locks    ; strict;
comment  @ * @;


40.2
date     93.06.04.09.52.35;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.06.03.15.41.08;  author mks;  state Exp;
branches ;
next     ;


desc
@ROM Disk
@


40.2
log
@New, simpler SEEK routine - Single data block only
@
text
@/* seek.c */

#include "ram_includes.h"
#include "ram.h"

/********************************************************/
/* ptr := seek(scb, n, wrt)                             */
/*                                                      */
/* code to handle seek on the RAM disk                  */
/********************************************************/

LONG seek(struct lock *lock,LONG dest,LONG frompos)
{
struct node *node;
LONG count;

	node   = (struct node *) lock->lock.fl_Key;
	count  = lock->cpos;

	/* find out where we're going */
	if (frompos == OFFSET_CURRENT) dest += count;
	else if (frompos == OFFSET_END) dest += node->size;
	else if (frompos != OFFSET_BEGINNING) dest = -1;

	/* no seek before start or past end */
	/* except for seek past end for truncate! */
	if (dest < 0 || dest > node->size)
	{
		fileerr = ERROR_SEEK_ERROR;
		count = -1;
	}
	else
	{
		lock->block=(struct data *) node->list;
		lock->offset=dest+FIRSTBUFFPOS;
		lock->cpos=dest;
	}

	return count;	/* return old position in file for Seek() */
}
@


40.1
log
@*** empty log message ***
@
text
@d12 1
a12 5
LONG
seek (lock,dest,frompos)
	struct lock *lock;
	LONG dest;
	LONG frompos;
d14 2
a15 3
	struct node *node;
	struct data *p;
	LONG count,ptr,newcount;
d21 3
a23 10
	if (frompos == OFFSET_CURRENT)
		dest += count;
	else if (frompos == OFFSET_END)
		dest += node->size;
	else if (frompos != OFFSET_BEGINNING)
	{
seek_error:
		fileerr = ERROR_SEEK_ERROR;
		return -1;
	}
a27 6
		goto seek_error;

	/* we have position in file needed (dest) and current (count) */
	/* NOTE: lock->block cannot be NULL any longer */

	if (dest > count)
d29 2
a30 7
		/* going farther into file */
		p = (struct data *) lock->block;
		ptr   = count - (lock->offset - FIRSTBUFFPOS);
	} else {
		/* going towards beginning of file */
		p = (struct data *) node->list;
		ptr = 0;
d32 5
a36 13

	/* main seek loop */
	while (1) {
		if (p == NULL) goto seek_error;   /* should NEVER happen */

		/* the meat of seek */
		/* a block with FIRSTBUFFPOS-1 size has no bytes in it */
		newcount = ptr + p->size - (FIRSTBUFFPOS-1);
		if (newcount >= dest)
			break; 		/* it's in this block */

		ptr = newcount;		/* remember size at block beginning */
		p = p->next;		/* do next block */
a37 4

	lock->block  = p;
	lock->offset = dest-ptr + FIRSTBUFFPOS;  /* to next byte */
	lock->cpos   = dest;
@
