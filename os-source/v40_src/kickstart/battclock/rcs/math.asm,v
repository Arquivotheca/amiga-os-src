head     36.2;
branch   ;
access   ;
symbols  V39_3:36.2 V39_1:36.2 V36_7:36.1 V36_6:36.1 V36_5:36.1 V36_4:36.1 V36_3:35.1 V36_1:35.1;
locks    ; strict;
comment  @* @;


36.2
date     90.03.28.16.28.28;  author rsbx;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.06.13.57.53;  author rsbx;  state Exp;
branches ;
next     35.1;

35.1
date     89.10.06.11.56.01;  author rsbx;  state Exp;
branches ;
next     ;


desc
@32 bit math routines that will eventually move to utility.library.
@


36.2
log
@RCS version change.
@
text
@	XDEF	SMult32
	XDEF	UMult32
	XDEF	SDivMod32
	XDEF	UDivMod32

SMult32:
UMult32:
	movem.l	D2-D3,-(A7)	; need these
	move.l	D0,D2		; d0=Al
	move.l	D1,D3		; d1=Bl
	swap	D2		; d2=Ah
	swap	D3		; d3=Bh
	mulu.w	D1,D2		; d2=Ah*Bl
	mulu.w	D0,D3		; d3=Al*Bh
	mulu.w	D1,D0		; d0=Al*Bl
	add.w	D3,D2		; ignore overflow
	swap.w	D2		; shift to where it belongs
	clr.w	D2
	add.l	D2,D0		; ignore overflow
	movem.l	(A7)+,D2-D3
	rts




; d0=d0/d1
; d1=d0%d1


SDivMod32:
	tst.l	d0
	bpl.s	NumPos
	neg.l	d0
	tst.l	d1
	bpl.s	DenomPos
	neg.l	d1
	bsr.s	UDivMod32
	neg.l	d1
	rts
DenomPos
	bsr.s	UDivMod32
	neg.l	d0
	neg.l	d1
	rts
NumPos
	tst.l	d1
	bpl.s	UDivMod32
	neg.l	d1
	bsr.s	UDivMod32
	neg.l	d0
	rts



UDivMod32:
	move.l	d3,-(sp)
	cmpi.l	#$0ffff,d1	; can we do this easily?
	bhi.s	BigDenom	; no, we have to work for it
	move.l	d1,d3
	swap.w	d0
	move.w	d0,d3
	beq.s	SmallNum
	divu.w	d1,d3
	move.w	d3,d0
SmallNum
	swap.w	d0
	move.w	d0,d3
	divu.w	d1,d3
	move.w	d3,d0
	swap.w	d3
	move.w	d3,d1
	move.l	(sp)+,d3
	rts

BigDenom:
	move.l	d2,-(sp)
	move.l	d1,d3
	move.l	d0,d1
	clr.w	d1
	swap	d1
	swap	d0
	clr.w	d0
	moveq	#15,d2		; 16 times through the loop
DMls	add.l	d0,d0		
	addx.l	d1,d1
	cmp.l	d1,d3
	bhi.s	DMle
	sub.l	d3,d1
	addq.w	#1,d0
DMle	dbf	d2,DMls
	movem.l	(sp)+,d2-d3
	rts

	end
@


36.1
log
@Fixed revision number.
@
text
@@


35.1
log
@Initial checkin.
@
text
@@
