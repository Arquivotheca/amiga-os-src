head     39.18;
branch   ;
access   ;
symbols  rel39_24:39.18 rel39_18:39.18 rel39_97:39.17 rel39_90:39.17 rel39_89:39.16 rel39_82:39.16 rel39_76:39.15 rel39_71:39.13 rel39_65:39.12 rel39_64:39.12 rel39_61:39.12 rel39_60:39.12 rel39_55:39.12 rel39_47:39.12 rel39_39:39.11 rel39_38:39.11 rel39_37:39.11 rel39_35:39.10 rel39_34:39.9;
locks    ; strict;
comment  @ * @;


39.18
date     93.02.15.11.01.02;  author spence;  state Exp;
branches ;
next     39.17;

39.17
date     92.09.17.15.11.44;  author spence;  state Exp;
branches ;
next     39.16;

39.16
date     92.08.11.14.03.30;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     92.07.24.12.03.29;  author spence;  state Exp;
branches ;
next     39.14;

39.14
date     92.07.21.14.47.03;  author chrisg;  state Exp;
branches ;
next     39.13;

39.13
date     92.06.11.10.49.23;  author spence;  state Exp;
branches ;
next     39.12;

39.12
date     92.03.06.12.43.00;  author spence;  state Exp;
branches ;
next     39.11;

39.11
date     92.02.24.14.11.01;  author chrisg;  state Exp;
branches ;
next     39.10;

39.10
date     92.02.20.13.34.34;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     92.01.29.13.15.27;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     92.01.21.15.48.31;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     92.01.21.15.39.53;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     92.01.21.12.54.08;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     92.01.17.11.51.28;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     91.11.26.16.33.52;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     91.10.28.19.35.41;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     91.10.18.16.24.17;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.08.27.16.41.24;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.19.11;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.22.14.42.15;  author spence;  state Exp;
branches ;
next     ;


desc
@Make graphics great
@


39.18
log
@Uses graphic's LVOs.
Bumps Max and VideoOScan MaxX values of SuperHires to the AA resolutions,
which are greater than the ECS resolution.
@
text
@/******************************************************************************
*
*   $Id: great.c,v 39.17 92/09/17 15:11:44 spence Exp Locker: spence $
*
******************************************************************************/

#include <exec/types.h>
#include <exec/memory.h>

#include "/copper.h"
#include "/macros.h"
#include "/displayinfo_internal.h"
#include "/displayinfo.h"
#include "/gfx.h"
#include "/gfxbase.h"
#include "/sane_names.h"
#include "gfxprivate.h"
#include "c.protos"
#include "/d/d.protos"
#include "/gfxpragmas.h"

/****** graphics.library/SetChipRev *******************************************
*
*   NAME
*	SetChipRev -- turns on the features of a Chip Set  (V39)
*
*   SYNOPSIS
*	chiprevbits = SetChipRev(ChipRev)
*	                           d0
*
*	ULONG SetChipRev(ULONG);
*
*   FUNCTION
*	Enables the features of the requested Chip Set if available,
*	and updates the graphics database accordingly.
*
*   INPUTS
*	ChipRev - Chip Rev that you would like to be enabled.
*
*   RESULT
*	chiprevbits - Actual bits set in GfxBase->ChipRevBits0.
*
*   NOTES
*	This routine should only be called once. It will be called by the system
*	in the startup-sequence, but is included in the autodocs for authors
*	of bootblock-games that wish to take advantage of post-ECS features.
*
*   SEE ALSO
*	<graphics/gfxbase.h>
*
*******************************************************************************/

/*#define DEBUG*/
#ifdef DEBUG
#define D(x) {x};
#else
#define D(x)
#endif

extern struct AmigaRegs custom;

ULONG __asm SetChipRev(register __d0 ULONG want)
{
    struct AmigaRegs *io;
    DisplayInfoHandle handle;
    ULONG ID = INVALID_ID;
    APTR buf;
    BOOL isehb = FALSE;
    UBYTE agnus_chip_id;
    UBYTE denise_chip_id;
    UBYTE have = 0;
    UBYTE set;

    io = &custom;

    agnus_chip_id = (io->vposr>>8) & 0x7f;
    denise_chip_id = get_denise_id();
    D(kprintf("agnus = 0x%lx, denise = 0x%lx\n", agnus_chip_id, denise_chip_id);)

/* denise ID bits according to Raible:
 *	orig	XXXX XXXX
 *	ecs     1111 1100
 *	ecs2	1110 1100	ecs fixed for video toaster
 *	lisa    1111 1000
 *	AAA	???? 0100
 *
 *	B0=unused
 *	B1=does this chip support ECS screen modes?
 *	B2=does this chip support AA screen modes?
 *
 * memory type is defined in bits 8 and 9 of io->deniseid.
 *			Bit9 Bit8
 * NmlCAS, 16BitBus	 0    0		1x
 * NmlCAS, 32BitBus	 0    1		2x
 * DblCAS, 16BitBus	 1    0		2x
 * DblCAS, 32BitBus	 1    1		4x
 *
*/

    /* Let's see what we have... */
    if (!(denise_chip_id & 0x04))
    {
    	/* we have a Lisa */
	have |= (GFXF_AA_LISA | GFXF_AA_MLISA);
    }
    if (!(denise_chip_id & 0x02))
    {
    	have |= GFXF_HR_DENISE;
    }
    if (agnus_chip_id & 0x20)
    {
    	have |= GFXF_HR_AGNUS;
    }
    if (agnus_chip_id & 0x02)	/* alice bit set */
    {
	have |= GFXF_AA_ALICE;
    }

    /* if we want the best chips possible (from setpatch or enlighten), then
     * we should see if a selection was made from bootmenu.
     * No bootmenu selection had been made if GBASE->WantChips == BEST,
     * so read the saved option from BattMem.
     */

    if (want == SETCHIPREV_BEST)
    {
	(want = GBASE->WantChips);
    }
    else
    {
	/* Cannot go from a AA setting down to ECS or A */
	if ((GBASE->ChipRevBits0 & SETCHIPREV_AA) == SETCHIPREV_AA)
	{
		return(SETCHIPREV_AA);
	}
    }

    want |= GFXF_AA_MLISA;


    D(kprintf("have = 0x%lx, want = 0x%lx\n", have, want);)
    D(kprintf("crb = 0x%lx\n", GBASE->ChipRevBits0);)

    set = (have & want);

    if (set != GBASE->ChipRevBits0)
    {
	GBASE->ChipRevBits0 = set;
	if (set & GFXF_AA_LISA)
	{
	    	GBASE->MemType = (((~(io->deniseid)) & 0x0300) >> 8);
		GBASE->ColorMask=0xff000000;
	}
	else GBASE->ColorMask=0xf0000000;

	if (!(set & GFXF_HR_DENISE))
	{
		/* Put in 'A' mode. This requires removing the AA '1-blank-line'
		 * kludge from copinit.
		 */
		extern UWORD copinit_mid_a[];
		CopyWords(copinit_mid_a, &(GBASE->copinit->diagstrt[10]), 16);
	}

	/* We also need to update the database. ALICE determines the maxdepths of
	 * the display modes, LISA the sprite characteristics.
	 */

	if (buf = (APTR)AllocVec(MAX(MAX(sizeof (struct VecInfo), sizeof(struct DimensionInfo)), sizeof(struct DisplayInfo)), MEMF_CLEAR))
	{
		while ((ID = gfx_NextDisplayInfo(ID)) != INVALID_ID)
		{
			if (handle = (DisplayInfoHandle)gfx_FindDisplayInfo(ID))
			{
				D(kprintf("ID = 0x%lx\n", ID);)
				if (ID & MONITOR_ID_MASK)	/* don't do it twice for default */
				{
					/* change the ProgInfo */
					if (gfx_GetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID))
					{
						correct_driver((struct RawVecInfo *)buf);
						gfx_SetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
					}

					/* change the DisplayInfo */
					if (gfx_GetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID))
					{
						isehb = ((((struct DisplayInfo *)buf)->PropertyFlags) & DIPF_IS_EXTRAHALFBRITE);
						if (set & GFXF_AA_LISA)
						{
							make_aa((struct RawDisplayInfo *)buf);
							gfx_SetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
						}
					}
					if (gfx_GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID))
					{
						limit_blit((struct RawDimensionInfo *)buf);
						/* change the DimensionInfo for non-EHB modes */
						if (!isehb)
						{
							increase_depth((struct RawDimensionInfo *)buf);
						}
						if ((set & GFXF_AA_LISA) &&

						/* In a 2 cycle mode, there are 8 less pixels per line
						 * than twice the number in a 4 cycle hires mode.
						 * This is reflected in the database when unpacked.
						 * However, on a AA machine, SuperHires will execute
						 * in at least a 4 cycle mode (for 2x), so increment
						 * the range accordingly.
						 */
						    (((ID & (MONITOR_ID_MASK | SUPER_KEY)) == (NTSC_MONITOR_ID | SUPER_KEY)) || 
						     ((ID & (MONITOR_ID_MASK | SUPER_KEY)) == (PAL_MONITOR_ID | SUPER_KEY))))
						{
							((struct DimensionInfo *)buf)->MaxOScan.MaxX = (1447 + ((struct DimensionInfo *)buf)->MaxOScan.MinX);
							((struct DimensionInfo *)buf)->VideoOScan.MaxX = (1471 + ((struct DimensionInfo *)buf)->VideoOScan.MinX);
							D(kprintf(">>> Fudging for SHires,\n");)
							D(kprintf("Max = %ld, Video = %ld\n",((struct DimensionInfo *)buf)->MaxOScan.MaxX, ((struct DimensionInfo *)buf)->VideoOScan.MaxX);)
						}
						gfx_SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
					}
				}
			}
		}
		all_db_avail();	/* check availability of all modes. */
		FreeVec(buf);
	}
    }

    D(kprintf("setting 0x%lx\n", set);)
    return((ULONG)set);		
}
@


39.17
log
@Clean up the autodocs
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.16 92/08/11 14:03:30 spence Exp Locker: spence $
d20 1
a21 1

d72 1
a72 1
    UBYTE set = 0;
d171 1
a171 1
		while ((ID = NextDisplayInfo(ID)) != INVALID_ID)
d173 1
a173 1
			if (handle = FindDisplayInfo(ID))
d179 1
a179 1
					if (GetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID))
d182 1
a182 1
						SetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
d186 1
a186 1
					if (GetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID))
d192 1
a192 1
							SetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
d195 1
a195 1
					if (GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID))
d203 18
a220 1
						SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
@


39.16
log
@Use all_db_avail() to make sure modes are properly made availale on
the correct machine.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.15 92/07/24 12:03:29 spence Exp Locker: spence $
d25 1
a25 1
*	SetChipRev - turns on the features of a Chip Set  (V39)
d44 3
a46 3
*	This routine can only be called once. It will be done by the system in
*	the startup-sequence, but is included in the autodocs for bootblock
*	writers.
@


39.15
log
@Too much removed last time! Need to read GBASE->WantChips, else cannot
set chip rev from Bootmenu.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.14 92/07/21 14:47:03 chrisg Exp Locker: spence $
d188 1
a188 12
						ULONG dipf = ((struct DisplayInfo *)buf)->PropertyFlags;
						BOOL isecs = (set & GFXF_HR_DENISE);
						BOOL isaa = (set & (GFXF_AA_LISA | GFXF_AA_ALICE));
						isehb = (dipf & DIPF_IS_EXTRAHALFBRITE);

						if ((!(isaa)) && 
						    ((isecs && (dipf & DIPF_IS_AA)) ||
						    ((isecs == 0) && (dipf & (DIPF_IS_ECS | DIPF_IS_AA)))))
						{
							D(kprintf("whoops - NO_CHIPS\n");)
							((struct DisplayInfo *)buf)->NotAvailable |= DI_AVAIL_NOCHIPS;
						}
d192 1
a193 1
						SetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
a194 1

d208 1
@


39.14
log
@removed battmem code.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.13 92/06/11 10:49:23 spence Exp Locker: chrisg $
d125 6
d132 4
a135 3
    if ((GBASE->ChipRevBits0 & SETCHIPREV_AA) == SETCHIPREV_AA)
    {
	return(SETCHIPREV_AA);
@


39.13
log
@When putting into 'A' mode, copinit must be loaded with the 'A' instructions.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.12 92/03/06 12:43:00 spence Exp Locker: spence $
a8 2
#include <resources/battmem.h>
#include <resources/battmembitsamiga.h>
a20 1
#include <pragmas/battmem_pragmas.h>
d125 2
a126 26
    if (want == SETCHIPREV_BEST)
    {
	if ((want = GBASE->WantChips) == SETCHIPREV_BEST)
	{
		/* Read from BattMem */
		ULONG err;
		UBYTE battmem = 0;

		err = GetBattMem(&battmem, BATTMEM_CHIP_REV_ADDR, BATTMEM_CHIP_REV_LEN);

		/* ensure that BattMem was read properly, and that we are not
		 * reading uninitialised battmem data (ie at least one bit is set)
		 */
		if ((err == NULL) && battmem)
		{
			switch (battmem) 
			{
				case BATTMEM_CHIP_REV_ORIGINAL : want = SETCHIPREV_A; break;
				case BATTMEM_CHIP_REV_ECS : want = SETCHIPREV_ECS; break;
				case BATTMEM_CHIP_REV_BEST : want = SETCHIPREV_BEST; break;
				default: break;
			}
		}
	}
    }
    else
d128 1
a128 5
	/* Cannot go from a AA setting down to ECS or A */
	if ((GBASE->ChipRevBits0 & SETCHIPREV_AA) == SETCHIPREV_AA)
	{
		return(SETCHIPREV_AA);
	}
@


39.12
log
@Handles ChipRev options set in Battmem by Bootmenu
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.11 92/02/24 14:11:01 chrisg Exp Locker: spence $
d12 1
d179 9
@


39.11
log
@made set colormask.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.10 92/02/20 13:34:34 chrisg Exp Locker: chrisg $
d9 2
d22 2
a77 2
    want |= GFXF_AA_MLISA;

d121 43
d166 1
d203 1
a203 1
						BOOL isecs = (set & (GFXF_HR_DENISE | GFXF_HR_AGNUS));
@


39.10
log
@made include macros.h for exec pragmas.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.9 92/01/29 13:15:27 spence Exp Locker: chrisg $
d129 1
d131 1
@


39.9
log
@Changed name to SetChipRev()
Now takes a parameter to change the chip revision number (A, ECS or AA).
Altered the database-fudging code approprately.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.8 92/01/21 15:48:31 spence Exp Locker: spence $
d10 1
@


39.8
log
@Fixed autodoc
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.7 92/01/21 15:39:53 spence Exp Locker: spence $
d19 1
a19 1
/****** graphics.library/MakeGfxGreat *******************************************
d22 1
a22 1
*	MakeGfxGreat - turns on the features of a Chip Set  (V39)
d25 1
a25 1
*	chiprevbits = MakeGfxGreat(ChipRev)
d28 1
a28 1
*	ULONG MakeGfxGreat(ULONG);
d59 1
a59 1
ULONG __asm MakeGfxGreat(register __d0 ULONG want)
d65 1
a65 1
    BOOL isehb;
d140 2
a141 1
				if (set & GFXF_AA_LISA)
d144 5
a148 4
					GetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
					correct_driver((struct RawVecInfo *)buf);
					SetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
				}
d150 2
a151 3
				if (ID & MONITOR_ID_MASK)	/* don't do it twice for default */
				{
					if (set & GFXF_AA_LISA)
d153 16
a168 3
						/* change the DisplayInfo */
						GetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
						make_aa((struct RawDisplayInfo *)buf);
d172 1
a172 5
					isehb = (((struct DisplayInfo *)buf)->PropertyFlags & DIPF_IS_EXTRAHALFBRITE);
					GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
					limit_blit((struct RawDimensionInfo *)buf);
					/* change the DimensionInfo for non-EHB modes */
					if (!isehb)
d174 7
a180 1
						increase_depth((struct RawDimensionInfo *)buf);
a181 2
					SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);

@


39.7
log
@Whoops - check for EB modes *before* reusing the buffer.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.6 92/01/21 12:54:08 spence Exp Locker: spence $
d19 1
a19 1
/***** graphics.library/MakeGfxGreat *******************************************
@


39.6
log
@Made autodocs public. Now takes a parameter - ChipRev to determine
which ChipRev to update to.
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.5 92/01/17 11:51:28 spence Exp Locker: spence $
d65 1
d158 1
d162 1
a162 1
					if (!(((struct DisplayInfo *)buf)->PropertyFlags & DIPF_IS_EXTRAHALFBRITE))
@


39.5
log
@does not call increase_depth() for EXTRAHALFBRITE modes.
/
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.4 91/11/26 16:33:52 spence Exp Locker: spence $
d19 1
a19 1
/****i************************************************************************
d22 1
a22 1
*	MakeGfxGreat - turns on the features of the new Chip Set (AA) (V38)
d25 2
a26 1
*	void MakeGfxGreat()
d28 2
d31 2
a32 3
*	checks if AA chips are in the machine. If so, turns on the bit in
*	GfxBase->ChipRevBits0, and alters the database to to reflect new
*	graphics features.
d35 1
a35 1
*	A booted system
d38 1
a38 1
*	An enlightened being.
d41 6
a46 3
*	This is a private call. It must be called early in the startup-sequence,
*	either in SetPatch, or by some other function. It *must* be called before
*	iprefs kicks in.
d50 7
d59 1
a59 1
void MakeGfxGreat()
a64 1
    BOOL Lisa = FALSE;
d67 2
d72 2
d76 1
d98 1
d102 13
a114 3
    	GBASE->ChipRevBits0 |= (GFXF_AA_LISA | GFXF_HR_DENISE);
    	GBASE->MemType = (((~(io->deniseid)) & 0x0300) >> 8);
	Lisa = TRUE;
d117 3
d121 1
a121 1
    if (agnus_chip_id & 0x02)	/* alice bit set */
d123 5
a127 1
	GBASE->ChipRevBits0 |= GFXF_AA_ALICE;
d139 7
a145 4
				/* change the ProgInfo */
				GetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
				correct_driver((struct RawVecInfo *)buf);
				SetDisplayInfoData(handle, buf, sizeof(struct VecInfo), DTAG_VEC, ID);
d149 1
a149 1
					if (Lisa)
d157 2
a161 1
						GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
a162 1
						SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
d164 1
d172 3
a174 1
		
@


39.4
log
@No longer changes GBASE->TopLine (handled dynamically by MrgCop()).
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.3 91/10/28 19:35:41 spence Exp Locker: spence $
a111 5
					/* change the DimensionInfo */
					GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
					increase_depth((struct RawDimensionInfo *)buf);
					SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);

d119 9
@


39.3
log
@Replace GetDeniseID() with get_denise_id().
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.2 91/10/18 16:24:17 spence Exp Locker: spence $
a100 2
		GBASE->TopLine = AATOPLINE;
		GBASE->Flags |= TOPLINE_CHANGE;
@


39.2
log
@ProgInfo -> Vecinfo
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.1 91/08/27 16:41:24 spence Exp Locker: spence $
d60 1
a60 1
    denise_chip_id = GetDeniseID(io);
@


39.1
log
@Set GfxBase->TopLine to AATOPLINE.
Don't update the DEFAULT_MONITOR database entries twice!
@
text
@d3 1
a3 1
*   $Id: great.c,v 39.0 91/08/21 17:19:11 chrisg Exp Locker: spence $
d99 1
a99 1
	if (buf = (APTR)AllocVec(MAX(MAX(sizeof (struct ProgInfo), sizeof(struct DimensionInfo)), sizeof(struct DisplayInfo)), MEMF_CLEAR))
d108 3
a110 5
				GetDisplayInfoData(handle, buf, sizeof(struct ProgInfo), DTAG_PROG, ID);
				correct_driver((struct RawProgInfo *)buf);
				if (((struct ProgInfo *)buf)->Flags & PROGINFO_MODELACE)
					correct_driver_lace((struct RawProgInfo *)buf);
				SetDisplayInfoData(handle, buf, sizeof(struct ProgInfo), DTAG_PROG, ID);
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*   $Id: great.c,v 38.0 91/07/22 14:42:15 spence Exp Locker: chrisg $
d15 1
d99 1
a99 1
	if (buf = AllocVec(MAX(MAX(sizeof (struct ProgInfo), sizeof(struct DimensionInfo)), sizeof(struct DisplayInfo)), MEMF_CLEAR))
d101 2
d114 6
a119 4
				/* change the DimensionInfo */
				GetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
				increase_depth((struct RawDimensionInfo *)buf);
				SetDisplayInfoData(handle, buf, sizeof(struct DimensionInfo), DTAG_DIMS, ID);
d121 7
a127 6
				if (Lisa)
				{
					/* change the DisplayInfo */
					GetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
					make_aa((struct RawDisplayInfo *)buf);
					SetDisplayInfoData(handle, buf, sizeof(struct DisplayInfo), DTAG_DISP, ID);
@


38.0
log
@First log in. Check if we have AA chips. If so, register it in
GfxBase, and alter the contents of the Database.
@
text
@d3 1
a3 1
*   $Id:  $
@
