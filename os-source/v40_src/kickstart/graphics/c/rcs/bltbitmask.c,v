head     39.7;
branch   ;
access   ;
symbols  rel39_24:39.7 rel39_18:39.7 rel39_97:39.7 rel39_90:39.6 rel39_89:39.6 rel39_82:39.6 rel39_76:39.6 rel39_71:39.6 rel39_65:39.6 rel39_64:39.6 rel39_61:39.6 rel39_60:39.6 rel39_55:39.6 rel39_52:39.5 rel39_47:39.5 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.3 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.6 V36_196:36.6 V36_195:36.6 V36_194:36.6 V36_193:36.6 V36_192:36.6 V36_191:36.6 V36_190:36.6 V36_189:36.6 V36_188:36.6 V36_186:36.6 V36_185:36.6 V36_184:36.6 V36_182:36.6 V36_181:36.6;
locks    ; strict;
comment  @ * @;


39.7
date     92.10.22.08.56.49;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.27.12.27.48;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.27.11.31.13;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.27.18;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.21.13.18.25;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.07.14.16.53;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.11.16.11.16;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.14.19;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.20.11.05.44;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.02.12.46.46;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.46.43;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.18.08;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.07.27.16.54.48;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.18.12.38.18;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.28.09.13.00;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.02.27.13.28.45;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.09.17.13.37;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.10.59;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.7
log
@fixed interleaved blit.
@
text
@/******************************************************************************
*
*	$Id: bltbitmask.c,v 39.6 92/04/27 12:27:48 chrisg Exp Locker: chrisg $
*
*****************************************************************************/

/****** graphics.library/BltMaskBitMapRastPort *********************************
*
*   NAME
*	BltMaskBitMapRastPort -- blit from source bitmap to destination rastport
*	with masking of source image.
*
*   SYNOPSIS
*	BltMaskBitMapRastPort
*	    (srcbm, srcx, srcy, destrp, destX, destY, sizeX, sizeY,
*	     A0     D0    D1    A1      D2     D3     D4     D5
*	     minterm, bltmask)
*	     D6       A2
*
*	void BltMaskBitMapRastPort
*	     (struct BitMap *, WORD, WORD, struct RastPort *, WORD, WORD,
*	      WORD, WORD, UBYTE, APTR);
*
*   FUNCTION
*	Blits from source bitmap to position specified in destination rastport
*	using bltmask to determine where source overlays destination, and
*	minterm to determine whether to copy the source image "as is" or
*	to "invert" the sense of the source image when copying. In either
*	case, blit only occurs where the mask is non-zero.
*
*   INPUTS
*	srcbm   - a pointer to the source bitmap
*	srcx    - x offset into source bitmap
*	srcy    - y offset into source bitmap
*	destrp  - a pointer to the destination rastport
*	destX   - x offset into dest rastport
*	destY   - y offset into dest rastport
*	sizeX   - width of blit in pixels
*	sizeY   - height of blit in rows 
*	minterm - either (ABC|ABNC|ANBC) if copy source and blit thru mask
*	          or     (ANBC)          if invert source and blit thru mask
*	bltmask - pointer to the single bit-plane mask, which must be the
*	          same size and dimensions as the planes of the
*	          source bitmap.
*
*   RESULT
*
*   BUGS
*
*   SEE ALSO
*	BltBitMapRastPort() graphics/gfx.h graphics/rastport.h
*
******************************************************************************/


#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <utility/hooks.h>
#include <graphics/gfxbase.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <pragmas/layers_pragmas.h>
#include "/gfxpragmas.h"

#include "/macros.h"
#include "c.protos"

struct MaskHook
{
    struct Hook hook;
    int	       *args;
};

void __asm mask_hook(register __a0 struct MaskHook *hook,register __a2 struct RastPort *object,register __a1 int *message)
{
    struct BitMap    *srcbm   =  (struct BitMap *)(*(hook->args+0));
    WORD 	      srcx    =  (WORD)		  (*(hook->args+1));
    WORD 	      srcy    =  (WORD)		  (*(hook->args+2));
    WORD 	      oldx    =  (WORD)		  (*(hook->args+4));
    WORD 	      oldy    =  (WORD)		  (*(hook->args+5));
    UWORD	      minterm =  (UWORD)	  (*(hook->args+8));
    UWORD	     *bltmask =  (UWORD *)	  (*(hook->args+9));

    struct Layer     *layer   = *(struct Layer **)   (message+0);
    struct Rectangle *rect    =  (struct Rectangle *)(message+1);
    WORD	      xoff    = *(LONG *)	     (message+3);
    WORD	      yoff    = *(LONG *)	     (message+4);
    struct RastPort  *dst     =  (object);
    WORD 	      dstx    =  (rect->MinX);
    WORD 	      dsty    =  (rect->MinY);
    WORD 	      xsize   =  (rect->MaxX - rect->MinX + 1);
    WORD 	      ysize   =  (rect->MaxY - rect->MinY + 1);


    /* call old routine for now to perform actual work */

    if (bltmask)
    {
	int i;
	UWORD *TempA;
	struct BitMap tempbm,*tbm;
	UWORD   using_tmpras;

        if(layer)
	{
	    /* adjust source offsets for cliprects */

	    srcx  += (xoff - oldx);
	    srcy  += (yoff - oldy);
	}
	using_tmpras = getmaxbytesperrow(dst,&TempA);
	tempbm = *srcbm;
	tempbm.pad=0;	/* defeat interleaved source */
	tbm = &tempbm;

	for (i=0; i<srcbm->Depth; i++)
	{
	    tbm->Planes[i] = bltmask;	
	}

	gfx_BltBitMap(srcbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,(ABC|ANBNC),dst->Mask,TempA);

	gfx_BltBitMap(tbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,minterm,dst->Mask,TempA);

	gfx_BltBitMap(srcbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,(ABC|ANBNC),dst->Mask,TempA);

	if (!using_tmpras)
	{
	    waitblitdone();
	    freemustmem(TempA,MAXBYTESPERROW);
	}
    
    }

}

extern int hookEntry();

bltmaskrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,bltmask)
struct BitMap *srcbm;
WORD srcx, srcy;
struct RastPort *dst;
WORD dstx, dsty, xsize, ysize;
UWORD minterm;
UWORD *bltmask;
{
    struct MaskHook  mh;
    struct Rectangle rect;

    /* initialize hook */

    mh.hook.h_Entry 	= hookEntry;
    mh.hook.h_SubEntry   = mask_hook;
    mh.hook.h_Data	= GBASE;
    mh.args 		= &srcbm;

    /* initialize rect */

    rect.MinX = rect.MaxX =  dstx; rect.MaxX += (xsize - 1);
    rect.MinY = rect.MaxY =  dsty; rect.MaxY += (ysize - 1);

    /* intersect rect with cliprects and call hook */

	DoHookClipRects(&mh,dst,&rect);

}

@


39.6
log
@ pragma calls.
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.5 92/03/27 11:31:13 chrisg Exp Locker: chrisg $
d117 1
@


39.5
log
@now calls layers directly!
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.4 92/03/24 15:27:18 chrisg Exp Locker: chrisg $
d124 1
a124 1
	BLTBITMAP(srcbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,(ABC|ANBNC),dst->Mask,TempA);
d126 1
a126 1
	BLTBITMAP(tbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,minterm,dst->Mask,TempA);
d128 1
a128 1
	BLTBITMAP(srcbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,(ABC|ANBNC),dst->Mask,TempA);
@


39.4
log
@ now uses better rastrect, and takes register args. much smaller.
optimization for new hook stuff.
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.3 92/01/21 13:18:25 chrisg Exp Locker: chrisg $
d66 1
d167 1
a167 1
    rastrect(dst,PASSRECT(rect),&mh);
@


39.3
log
@killed fetchgbase
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.2 92/01/07 14:16:53 chrisg Exp Locker: chrisg $
d66 1
d77 1
a77 4
mask_hook(hook,object,message)
struct MaskHook *hook;
struct RastPort *object;
int		*message;
d97 4
a100 1
    if(layer)
d102 4
a105 1
		/* adjust source offsets for cliprects */
d107 3
a109 3
		srcx  += (xoff - oldx);
		srcy  += (yoff - oldy);
    }
d111 6
a116 3
	if(layer = object->Layer)
    {
		/* adjust dest offsets for cliprects */
d118 3
a120 2
		dstx  -= (layer->bounds.MinX-layer->Scroll_X);
		dsty  -= (layer->bounds.MinY-layer->Scroll_Y);
d123 5
a127 1
    /* call old routine for now to perform actual work */
d129 7
a135 1
    xbltmaskrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,bltmask);
a169 67
xbltmaskrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,bltmask)
struct BitMap *srcbm;
WORD srcx, srcy;
struct RastPort *dst;
WORD dstx, dsty, xsize, ysize;
UWORD minterm;
UWORD *bltmask;
{
    if (bltmask)
    {
	int i;
	UWORD *TempA;
	struct Layer *l;
	struct BitMap *bm;
	struct BitMap tempbm,*tbm;
	UWORD   using_tmpras;

	bm = NULL;
	tbm = NULL;
	using_tmpras = getmaxbytesperrow(dst,&TempA);
	tempbm = *srcbm;
	tbm = &tempbm;

	for (i=0; i<srcbm->Depth; i++)
	{
	    tbm->Planes[i] = bltmask;	
	}

	if ( l = dst->Layer )
	{

	    LOCKLAYER(dst->Layer);

	    if (l->SuperBitMap)
	    {
		SyncSBitMap(l);
		dst->Layer = 0;
		bm = dst->BitMap;
		dst->BitMap = l->SuperBitMap;
	    }
	}

clipbltrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,(ABC|ANBNC),TempA);

clipbltrastport(tbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,TempA);

clipbltrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,(ABC|ANBNC),TempA);

	if (bm)
	{
	    dst->BitMap = bm;
	    dst->Layer = l;
	    CopySBitMap(l);
	}
    
	if (!using_tmpras)
	{
	    waitblitdone();
	    freemustmem(TempA,MAXBYTESPERROW);
	}
    
	if ( l = dst->Layer )
	{
	    UNLOCKLAYER(l);
	}
    }
}
@


39.2
log
@ CopySBitMap() and SyncSBitmap() no longer have assembly glue.
the C functions now have the real names.
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.1 91/11/11 16:11:16 chrisg Exp Locker: chrisg $
a131 1
    struct GfxBase  *GB;
a133 2
    FETCHGBASE;

d138 1
a138 1
    mh.hook.h_Data	= GB;
@


39.1
log
@ fixed chromapen thing.
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 39.0 91/08/21 17:14:19 chrisg Exp Locker: chrisg $
d190 1
a190 1
		syncsbitmap(l);
d207 1
a207 1
	    copysbitmap(l);
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 37.3 91/05/20 11:05:44 chrisg Exp Locker: chrisg $
d151 1
a151 1
    rastrect(dst,rect,&mh);
@


37.3
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 1.1 91/05/20 10:39:01 chrisg Exp $
@


37.2
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 37.1 91/02/12 15:46:43 spence Exp Locker: chrisg $
d68 1
@


37.1
log
@autodocs
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 37.0 91/01/07 15:18:08 spence Exp Locker: spence $
d67 1
a67 1
#include "../macros.h"
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: bltbitmask.c,v 36.6 90/07/27 16:54:48 bart Exp Locker: spence $
d7 1
a7 1
/****** graphics.library/BltMaskBitMapRastPort ********************************
d10 2
a12 3
*   	BltMaskBitMapRastPort -- blit from source bitmap to destination rastport
*				with masking of source image.
*
a13 1
*
d15 4
a18 2
*	    (srcbm,srcx,srcy,destrp,destX,destY,sizeX,sizeY,minterm,bltmask)
*	     a0    d0   d1   a1     d2    d3    d4    d5    d6      a2 
d20 3
a22 7
*	struct BitMap *srcbm;
*	WORD srcx,srcy;
*	struct RastPort *destrp;
*	WORD destX,destY;
*	WORD sizeX,sizeY;
*	UBYTE	minterm;
*	APTR	bltmask;	* chip memory *
d25 2
a26 2
*	Blits from source bitmap to position specified in destination rastport	
*	using bltmask to determine where source overlays destination, and 
d29 1
a29 1
*	case, blit only occurs where the mask is non-zero.	
a30 1
*
d32 8
a39 8
*	srcbm - a pointer to the source bitmap
*	srcx  - x offset into source bitmap
*	srcy  - y offset into source bitmap
*	destrp - a pointer to the destination rastport
*	destX - x offset into dest rastport
*	destY - y offset into dest rastport
*	sizeX - width of blit in pixels
*	sizeY - height of blit in rows 
d41 1
a41 1
*		  or     (ANBC)        if invert source and blit thru mask
d43 2
a44 2
*		  same size and dimensions as the planes of the
*		  source bitmap.
d46 1
a46 1
*   RETURNS
d51 1
a51 1
*   BltBitMapRastPort	graphics/gfx.h graphics/rastport.h
@


36.6
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.5
log
@fixed smart_refresh layer origin bug
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/bltbitmask.c,v 36.4 90/03/28 09:13:00 bart Exp Locker: bart $
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/bltbitmask.c,v 36.3 90/02/27 13:28:45 bart Exp Locker: bart $
d105 1
a105 1
	/* adjust source offsets for cliprects */
d107 3
a109 2
	srcx  += (xoff - oldx);
	srcy  += (yoff - oldy);
d111 3
a113 1
	/* adjust dest offsets for cliprects */
d115 3
a117 3
	dstx  -= (layer->bounds.MinX-layer->Scroll_X);
	dsty  -= (layer->bounds.MinY-layer->Scroll_Y);
    }
@


36.3
log
@correllary to fixing eraserect offset
@
text
@d3 1
a3 1
*	$Header: bltbitmask.c,v 36.2 89/11/09 17:13:37 bart Exp $
@


36.2
log
@bltbitmask rastrect hook
@
text
@d3 1
a3 1
*	$Header: bltbitmask.c,v 36.1 88/03/10 16:10:59 dale Exp $
d109 5
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d21 1
a21 1
*	SHORT srcx,srcy;
d23 2
a24 2
*	SHORT destX,destY;
*	SHORT sizeX,sizeY;
a60 2
/*#define DEBUG*/

d65 2
d74 5
a78 1
BYTE *AllocRaster();
d80 40
a119 1
bltmaskrastport(srcbm,srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm,bltmask)
d121 1
a121 1
SHORT srcx, srcy;
d123 2
a124 2
SHORT dstx, dsty, xsize, ysize;
USHORT minterm;
d127 48
a174 1
	if (bltmask)
d176 2
a177 6
	    int i;
    	UWORD *TempA;
		struct Layer *l;
		struct BitMap *bm;
		struct BitMap tempbm,*tbm;
		UWORD   using_tmpras;
d179 2
a180 5
		bm = NULL;
		tbm = NULL;
    	using_tmpras = getmaxbytesperrow(dst,&TempA);
	    tempbm = *srcbm;
	    tbm = &tempbm;
d182 3
a184 1
	    for (i=0; i<srcbm->Depth; i++)
d186 4
a189 1
		tbm->Planes[i] = bltmask;	
d191 1
a191 13
		if ( l = dst->Layer )
		{
	
	    	LOCKLAYER(dst->Layer);
	
			if (l->SuperBitMap)
			{
				syncsbitmap(l);
				dst->Layer = 0;
				bm = dst->BitMap;
				dst->BitMap = l->SuperBitMap;
			}
		}
d193 1
a193 1
		clipbltrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,(ABC|ANBNC),TempA);
d195 1
a195 1
		clipbltrastport(tbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,TempA);
d197 1
a197 1
		clipbltrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,(ABC|ANBNC),TempA);
d199 5
a203 17
		if (bm)
		{
			dst->BitMap = bm;
			dst->Layer = l;
			copysbitmap(l);
		}
	
    	if (!using_tmpras)
    	{
        	waitblitdone();
        	freemustmem(TempA,MAXBYTESPERROW);
    	}
	
		if ( l = dst->Layer )
		{
	    	UNLOCKLAYER(l);
		}
d205 12
@
