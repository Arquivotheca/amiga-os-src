head     39.8;
branch   ;
access   ;
symbols  rel39_24:39.8 rel39_18:39.6 rel39_97:39.6 rel39_90:39.6 rel39_89:39.6 rel39_82:39.6 rel39_76:39.6 rel39_71:39.6 rel39_65:39.6 rel39_64:39.6 rel39_61:39.6 rel39_60:39.6 rel39_55:39.5 rel39_52:39.4 rel39_47:39.3 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.3 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.6 V36_196:36.6 V36_195:36.6 V36_194:36.6 V36_193:36.6 V36_192:36.6 V36_191:36.6 V36_190:36.6 V36_189:36.6 V36_188:36.6 V36_186:36.6 V36_185:36.6 V36_184:36.6 V36_182:36.6 V36_181:36.6;
locks    ; strict;
comment  @ * @;


39.8
date     93.05.07.13.41.56;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     93.05.06.11.59.52;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     92.05.05.11.52.32;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.14.09.18.47;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.08.17.47.54;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.07.14.16.15;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.08.11.30.53;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.04.15.39.44;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.14.26;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.08.21.13.22.53;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.20.11.05.58;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.02.13.07.10;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.14.14.05.58;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.47.01;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.18.12;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.08.28.16.25.27;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.27.16.54.53;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.28.09.12.50;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.02.27.13.38.27;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.11.02.15.23.30;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.02;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.8
log
@sas5 bug broek clipblit because of K+R style prototype!!
@
text
@/******************************************************************************
*
*	$Id: bltrastport.c,v 39.7 93/05/06 11:59:52 chrisg Exp Locker: chrisg $
*
*****************************************************************************/

/*#define DEBUG*/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <graphics/layers.h>
#include <pragmas/layers_pragmas.h>
#include "/gfxpragmas.h"
#include "/macros.h"
#include "c.protos"
#include "/gfxbase.h"

BYTE *AllocRaster();

UWORD * __regargs getTempA(rp)
struct RastPort *rp;
{
    if (rp->TmpRas == 0)    return(FALSE);
    if (rp->TmpRas->Size < MAXBYTESPERROW) return(FALSE);
    return ((UWORD *)rp->TmpRas->RasPtr);
}

intersect(a,b,c)
struct Rectangle *a,*b;
struct Rectangle *c;
{
	c->MinX = MAX(a->MinX,b->MinX);
	c->MinY = MAX(a->MinY,b->MinY);
	c->MaxX = MIN(a->MaxX,b->MaxX);
	c->MaxY = MIN(a->MaxY,b->MaxY);
}

static int __regargs testintersect(struct Rectangle *a,struct Rectangle *b,struct Rectangle *c)
{
	if ( (a->MinX > b->MaxX) ||
		 (b->MinX > a->MaxX) ||
		 (a->MinY > b->MaxY) ||
		 (b->MinY > a->MaxY) )	return(FALSE);	/* no intersection */
	intersect(a,b,c);
	return(TRUE);
}

/****** graphics.library/BltBitMapRastPort *************************************
*
*   NAME
*	BltBitMapRastPort -- Blit from source bitmap to destination rastport.
*
*   SYNOPSIS
*	error = BltBitMapRastPort
*	        (srcbm, srcx, srcy, destrp, destX, destY, sizeX, sizeY, minterm)
*	 D0      A0     D0    D1    A1      D2     D3     D4     D5     D6
*
*	BOOL BltBitMapRastPort
*	     (struct BitMap *, WORD, WORD, struct RastPort *, WORD, WORD,
*	      WORD, WORD, UBYTE);
*
*   FUNCTION
*	Blits from source bitmap to position specified in destination rastport
*	using minterm.
*
*   INPUTS
*	srcbm   - a pointer to the source bitmap
*	srcx    - x offset into source bitmap
*	srcy    - y offset into source bitmap
*	destrp  - a pointer to the destination rastport
*	destX   - x offset into dest rastport
*	destY   - y offset into dest rastport
*	sizeX   - width of blit in pixels
*	sizeY   - height of blit in rows 
*	minterm - minterm to use for this blit
*
*   RESULT
*	TRUE
*
*   BUGS
*
*   SEE ALSO
*	BltMaskBitMapRastPort() graphics/gfx.h graphics/rastport.h
*
******************************************************************************/

bltbitmaprastport(srcbm,srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm)
struct BitMap *srcbm;
SHORT srcx, srcy;
struct RastPort *dst;
SHORT dstx, dsty, xsize, ysize;
USHORT minterm;
{
	UWORD *TempA;
	struct Layer *l;
	UWORD	using_tmpras;

	if ( l = dst->Layer ) LOCKLAYER( l );

	using_tmpras = getmaxbytesperrow(dst,&TempA);

	clipbltrastport(srcbm,srcx,srcy,dst,dstx,dsty,xsize,ysize,minterm,TempA);

	if (!using_tmpras)
	{
		waitblitdone();
		freemustmem(TempA,MAXBYTESPERROW);
	}

	if (l)	UNLOCKLAYER( l );
	return(TRUE);
}

struct BltHook { struct Hook hook; int *args; };


void hookEntry();

void __asm blit_hook(register __a0 struct BltHook *hook, register __a2 struct RastPort *object, register __a1 int *message)
{
	struct BitMap    *srcbm   =  (struct BitMap *)(*(hook->args+0));
    WORD 	      srcx    =  (WORD)		  (*(hook->args+1));
    WORD 	      srcy    =  (WORD)		  (*(hook->args+2));
    UWORD	      minterm =  (UWORD)	  (*(hook->args+8));
    UWORD	     *tempA =  (UWORD *)	  (*(hook->args+9));

    struct Rectangle *rect    =  (struct Rectangle *)(message+1);
    WORD 	      xsize   =  (rect->MaxX - rect->MinX + 1);
    WORD 	      ysize   =  (rect->MaxY - rect->MinY + 1);


	if(message[0])
	{
	    /* adjust source offsets for cliprects */
	    srcx  += *((LONG *)(message+3))-hook->args[4];
	    srcy  += *((LONG *)(message+4))-hook->args[5];
	}
	gfx_BltBitMap(srcbm,srcx,srcy,object->BitMap,rect->MinX,rect->MinY,xsize,ysize,minterm,object->Mask,tempA);
}


clipbltrastport(srcbm,srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm, TempA)
struct BitMap *srcbm;
SHORT srcx, srcy;
struct RastPort *dst;
SHORT dstx, dsty, xsize, ysize;
USHORT minterm;
UWORD *TempA;
{
	struct BltHook bh;
	struct Rectangle rect;

	bh.hook.h_Entry=hookEntry;
	bh.hook.h_SubEntry=blit_hook;
	bh.hook.h_Data=GBASE;
	bh.args=&srcbm;
    rect.MinX = rect.MaxX =  dstx; rect.MaxX += (xsize - 1);
    rect.MinY = rect.MaxY =  dsty; rect.MaxY += (ysize - 1);
	DoHookClipRects(&bh,dst,&rect);
}



bltrastport(src, srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm)
struct RastPort *src,*dst;
SHORT srcx, srcy;
SHORT dstx, dsty, xsize, ysize;
USHORT minterm;
{
    struct Layer *layer;
	UWORD *TempA;
	UWORD	using_tmpras;

    /* can we use TmpRas? */
    if (TempA = getTempA(dst)) using_tmpras = TRUE;
    else
		using_tmpras = getmaxbytesperrow(src,&TempA);

	if (layer = src->Layer)
	{
    	struct ClipRect *CR;
		struct Rectangle srcrect;
		struct Rectangle src_workrect;
		struct BitMap *BMap;
		int dx,dy;
		int w,h;

		/* basic source rectangle */
		srcrect.MinX = srcx;
		srcrect.MinY = srcy;
		srcrect.MaxX = srcx + xsize - 1;
		srcrect.MaxY = srcy + ysize - 1;

		if (src == dst)
		{
			/* are the source and destination overlapping? */
			src_workrect.MinX = dstx;
			src_workrect.MinY = dsty;
			src_workrect.MaxX = dstx + xsize -1;
			src_workrect.MaxY = dsty + ysize -1;
			if (rectXrect(&srcrect,&src_workrect))
			{
#ifdef DEBUG
				printf("calling crsort(%lx,%lx,%lx)\n",layer,srcx-dstx,srcy-dsty);
#endif

					SortLayerCR(layer,srcx-dstx,srcy-dsty);
			}
		}
		/* offset by position of layer and scroll value */
		dx = layer->bounds.MinX - layer->Scroll_X;
		dy = layer->bounds.MinY - layer->Scroll_Y;
		srcrect.MinX += dx;
		srcrect.MaxX += dx;
		srcrect.MinY += dy;
		srcrect.MaxY += dy;

    	/* now, loop on all ClipRects */
    	for (CR = layer->ClipRect; CR ; CR = CR->Next)
		{
			if (testintersect(&srcrect,&CR->bounds,&src_workrect))
			{
				w = src_workrect.MaxX - src_workrect.MinX + 1;
				h = src_workrect.MaxY - src_workrect.MinY + 1;
				dx = src_workrect.MinX - srcrect.MinX;
				dy = src_workrect.MinY - srcrect.MinY;
	    		/* if this layer is obscured, fetch the alternate BitMap */
	    		if (CR->lobs)
				{
					BMap = CR->BitMap; /* set zero if this is SIMPLE_REFRESH! */
					/* adjust regions */
					src_workrect.MinX -= (CR->bounds.MinX & ~0xF);
					src_workrect.MinY -= CR->bounds.MinY;
				}
	    		else BMap = src->BitMap;
	    		/* if it's a valid BitMap, go bliss it */
	    		if (BMap)
					clipbltrastport(BMap, src_workrect.MinX, src_workrect.MinY,
							dst, dstx + dx, dsty + dy, 
							w, h, minterm, TempA);
	    	}
		}
		if (BMap = layer->SuperBitMap)
		{
			srcrect.MinX = srcx;
			srcrect.MinY = srcy;
			srcrect.MaxX = srcx + xsize - 1;
			srcrect.MaxY = srcy + ysize - 1;
			for (CR = layer->SuperClipRect; CR ; CR = CR->Next)
			{
				if (testintersect(&srcrect,&CR->bounds,&src_workrect))
	    		{
					w = src_workrect.MaxX - src_workrect.MinX + 1;
					h = src_workrect.MaxY - src_workrect.MinY + 1;
					dx = src_workrect.MinX - srcrect.MinX;
					dy = src_workrect.MinY - srcrect.MinY;
					clipbltrastport(BMap, src_workrect.MinX, src_workrect.MinY,
								dst, dstx + dx, dsty + dy, 
								w, h, minterm, TempA);
				}
			}
		}
	}
	else	clipbltrastport(src->BitMap,srcx,srcy, dst, dstx, dsty,
						 xsize, ysize,
						minterm, TempA);
    if (!using_tmpras)
	{
		waitblitdone();
		freemustmem(TempA,MAXBYTESPERROW);
	}
	return(TRUE);
}

/****** graphics.library/ClipBlit **********************************************
*
*   NAME
*	ClipBlit  --  Calls BltBitMap() after accounting for windows
*
*   SYNOPSIS
*	ClipBlit(Src, SrcX, SrcY, Dest, DestX, DestY, XSize, YSize, Minterm)
*	         A0   D0    D1    A1    D2     D3     D4     D5     D6
*
*	void ClipBlit
*	     (struct RastPort *, WORD, WORD, struct RastPort *, WORD, WORD,
*	      WORD, WORD, UBYTE);
*
*   FUNCTION
*	Performs the same function as BltBitMap(), except that it
*	takes into account the Layers and ClipRects of the layer library,
*	all of which are (and should be) transparent to you.  So, whereas
*	BltBitMap() requires pointers to BitMaps, ClipBlit requires pointers to
*	the RastPorts that contain the Bitmaps, Layers, etcetera.
*
*	If you are going to blit blocks of data around via the RastPort of your
*	Intuition Window, you must call this routine (rather than BltBitMap()).
*
*	Either the Src RastPort, the Dest RastPort, both, or neither, can have
*	Layers. This routine takes care of all cases.
*
*	See BltBitMap() for a thorough explanation.
*
*   INPUTS
*	Src          = pointer to the RastPort of the source for your blit
*	SrcX, SrcY   = the topleft offset into Src for your data
*	Dest         = pointer to the RastPort to receive the blitted data
*	DestX, DestY = the topleft offset into the destination RastPort
*	XSize        = the width of the blit (must be ta least 1)
*	YSize        = the height of the blit (must be at least 1)
*	Minterm      = the boolean blitter function, where SRCB is associated
*	               with the Src RastPort and SRCC goes to the Dest RastPort
*
*   RESULT
*
*   BUGS
*
*   SEE ALSO
*	BltBitMap();
*
*******************************************************************************/

external_bltrastport(src, srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm)
struct RastPort *src,*dst;
SHORT srcx, srcy;
SHORT dstx, dsty, xsize, ysize;
USHORT minterm;
{
	struct Layer *s,*d;
	int qwe = 0;

	s = src->Layer;
	d = dst->Layer;
	if (  (s) && (d)  && (s != d) )
	{
		if (s->LayerInfo == d->LayerInfo)
		{
			qwe = TRUE;
			LOCKLAYERINFO(s->LayerInfo);
		}
	}
	if ( s ) LOCKLAYER(s);
	if ( d ) LOCKLAYER(d);

	if (qwe)	UNLOCKLAYERINFO(s->LayerInfo);

	/* special kluge for same src/dst and super */
	if (src == dst)
	{
		if ( s )
		{
			if (s->SuperBitMap)
			{
				struct BitMap *bm;
				bm = src->BitMap;
				/* have to kluge it up */
				SyncSBitMap(s);
				src->Layer = 0;		/* cheat */
				src->BitMap = s->SuperBitMap;
	qwe = bltrastport(src,srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm);
				src->Layer = s;
				src->BitMap = bm;
				CopySBitMap(s);
				goto lcl_exit;
			}
		}
	}
	qwe = bltrastport(src,srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm);
lcl_exit: ;
	if ( s ) UNLOCKLAYER(s);
	if ( d ) UNLOCKLAYER(d);
	return (qwe);
}
@


39.7
log
@space.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.6 92/05/05 11:52:32 chrisg Exp Locker: chrisg $
d44 1
a44 3
static int __regargs testintersect(a,b,c)
struct Rectangle *a,*b;
struct Rectangle *c;
@


39.6
log
@call sortlayer cr direct, +regargs.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.5 92/04/14 09:18:47 chrisg Exp Locker: chrisg $
d44 1
a44 1
testintersect(a,b,c)
@


39.5
log
@ reduced stack usage.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.4 92/04/08 17:47:54 chrisg Exp Locker: chrisg $
d26 1
a26 1
UWORD *getTempA(rp)
d215 1
a215 1
					sortcr(layer,srcx-dstx,srcy-dsty);
@


39.4
log
@made bltbmrp call dohook cliprects.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.3 92/01/07 14:16:15 chrisg Exp Locker: chrisg $
a131 2
    WORD 	      oldx    =  (WORD)		  (*(hook->args+4));
    WORD 	      oldy    =  (WORD)		  (*(hook->args+5));
a134 1
    struct Layer     *layer   = *(struct Layer **)   (message+0);
a135 4
    WORD	      xoff    = *(LONG *)	     (message+3);
    WORD	      yoff    = *(LONG *)	     (message+4);
    WORD 	      dstx    =  (rect->MinX);
    WORD 	      dsty    =  (rect->MinY);
d140 1
a140 1
	if(layer)
d143 2
a144 2
	    srcx  += (xoff - oldx);
	    srcy  += (yoff - oldy);
d146 1
a146 1
	gfx_BltBitMap(srcbm,srcx,srcy,object->BitMap,dstx,dsty,xsize,ysize,minterm,object->Mask,tempA);
@


39.3
log
@ CopySBitMap() and SyncSBitmap() no longer have assembly glue.
the C functions now have the real names.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.2 91/11/08 11:30:53 chrisg Exp Locker: chrisg $
d18 2
a103 1
	struct BitMap *bm;
a105 4
	bm = 0;

	/* must lock layer before possibly obtaining mustmemlock -- bart */

a109 7
	if( l  && (l->SuperBitMap))
	{
		SyncSBitMap(l);
		dst->Layer = 0;
		bm = dst->BitMap;
		dst->BitMap = l->SuperBitMap;
	}
d111 1
a111 6
	if (bm)
	{
		dst->BitMap = bm;
		dst->Layer = l;
		CopySBitMap(l);
	}
d122 35
d165 2
a166 5
    struct Layer *layer;
    struct ClipRect *CR;
	struct Rectangle dstrect;
	struct Rectangle dst_workrect;
	struct BitMap *BMap;
d168 7
a174 102
#ifdef DEBUG
	printf("clipclipblit(%lx,%ld,%ld,%lx,%ld,%ld,%ld,%ld,%lx)\n",
				srcbm, srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
	layer = dst->Layer;
	if (layer)
	{
		int dx,dy;
		int w,h;
		/* set up destination rectangle */
		dstrect.MinX = dstx;
		dstrect.MinY = dsty;
		dstrect.MaxX = dstx + xsize - 1;
		dstrect.MaxY = dsty + ysize - 1;
		/* offset by position of layer and scroll value */
		dx = layer->bounds.MinX - layer->Scroll_X;
		dy = layer->bounds.MinY - layer->Scroll_Y;
		dstrect.MinX += dx;
		dstrect.MaxX += dx;
		dstrect.MinY += dy;
		dstrect.MaxY += dy;

    	for(CR=layer->ClipRect; CR ; CR = CR->Next)
		{
			/* look into calling blisser for each ClipRect */
#ifdef DEBUG
	printf("check cr=%lx ",CR);
#endif
			if (testintersect(&dstrect,&CR->bounds,&dst_workrect))
			{
				w = dst_workrect.MaxX - dst_workrect.MinX + 1;
				h = dst_workrect.MaxY - dst_workrect.MinY + 1;
				dx = dst_workrect.MinX - dstrect.MinX;
				dy = dst_workrect.MinY - dstrect.MinY;
		   		/* if this layer is obscured, fetch the alternate BitMap */
		   		if (CR->lobs)
				{
					BMap = CR->BitMap; /* set zero if this is SIMPLE_REFRESH! */
					/* adjust dest gelRect x,y coordinates for special BitMap */
					dst_workrect.MinX -= (CR->bounds.MinX & ~0xF);
					dst_workrect.MinY -= CR->bounds.MinY;
				}
		   		else BMap = dst->BitMap;
		   		/* if it's a valid BitMap, go bliss it */
#ifdef DEBUG
			printf("BltBitMap(%lx,%ld,%ld,%lx,%ld,%ld,%ld,%ld)\n",
					srcbm, srcx + dx, srcy + dy,BMap,
				 	dst_workrect.MinX, dst_workrect.MinY,
             		w,h);
#ifdef DEBUGDEBUG
			Debug();
#endif
#endif
		   		if (BMap)
				{

				    /* bart - 1.02.86 protect against trashing TempA in loop */
					/*waitblitdone(); removed by Dale Jan 6,1986 */
					/* end bart - 1.02.86 */

						BLTBITMAP(srcbm, srcx + dx, srcy + dy,
							BMap, dst_workrect.MinX, dst_workrect.MinY, 
							w,h,
							minterm, dst->Mask, TempA);
				}
		   	}
		}
		if (BMap = layer->SuperBitMap)
		{
			dstrect.MinX = dstx;
			dstrect.MinY = dsty;
			dstrect.MaxX = dstx + xsize - 1;
			dstrect.MaxY = dsty + ysize - 1;
			for (CR = layer->SuperClipRect; CR ; CR = CR->Next)
			{
				if (testintersect(&dstrect,&CR->bounds,&dst_workrect))
	    		{
					w = dst_workrect.MaxX - dst_workrect.MinX + 1;
					h = dst_workrect.MaxY - dst_workrect.MinY + 1;
					dx = dst_workrect.MinX - dstrect.MinX;
					dy = dst_workrect.MinY - dstrect.MinY;

				    /* bart - 1.02.86 protect against trashing TempA in loop */
					/*waitblitdone(); removed by Dale */
					/* end bart - 1.02.86 */

					BLTBITMAP(srcbm, srcx + dx, srcy + dy,
						BMap, dst_workrect.MinX, dst_workrect.MinY, 
						w,h,
						minterm, dst->Mask, TempA);
				}
			}
		}
	}
	else	BLTBITMAP(srcbm,srcx,srcy,dst->BitMap,dstx,dsty,xsize,ysize,
						minterm, dst->Mask, TempA);
#ifdef DEBUG
	printf("exit clipblitrp\n");
#endif
d177 2
a188 7
#ifdef DEBUG
	printf("localclipblit(%lx,%ld,%ld,%lx,%ld,%ld,%ld,%ld,%lx)\n",
				src, srcx, srcy, dst, dstx, dsty, xsize, ysize, minterm);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
@


39.2
log
@  made call new sortcr function in misc.asm
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.1 91/11/04 15:39:44 chrisg Exp Locker: chrisg $
d115 1
a115 1
		syncsbitmap(l);
d125 1
a125 1
		copysbitmap(l);
d454 1
a454 1
				syncsbitmap(s);
d460 1
a460 1
				copysbitmap(s);
@


39.1
log
@ made use the new layers cliprect sorting function
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 39.0 91/08/21 17:14:26 chrisg Exp Locker: chrisg $
d305 1
a305 6
#pragma libcall GBASE->LayersBase SortLayerCR d2 10803

				if (! GBASE->LayersBase)
					GBASE->LayersBase=(ULONG *) OpenLibrary("layers.library",39);
				if (GBASE->LayersBase)
					SortLayerCR(layer,srcx-dstx,srcy-dsty);
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 38.0 91/08/21 13:22:53 chrisg Exp Locker: chrisg $
d20 1
d304 7
a310 1
				cr_sort(layer,srcx-dstx,srcy-dsty);
@


38.0
log
@  Added warning about width/height=0 to autodoc
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 37.4 91/05/20 11:05:58 chrisg Exp Locker: chrisg $
@


37.4
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 1.1 91/05/20 10:39:07 chrisg Exp $
d404 2
a405 2
*	XSize        = the width of the blit
*	YSize        = the height of the blit
@


37.3
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 37.2 91/02/14 14:05:58 chrisg Exp Locker: chrisg $
d19 1
@


37.2
log
@ edited autodoc for bltbitmaprastport
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 37.1 91/02/12 15:47:01 spence Exp Locker: chrisg $
d18 1
a18 1
#include "../macros.h"
@


37.1
log
@autodocs
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 37.0 91/01/07 15:18:12 spence Exp Locker: spence $
d59 2
a60 2
*	D0      (srcbm, srcx, srcy, destrp, destX, destY, sizeX, sizeY, minterm)
*	         A0     D0    D1    A1      D2     D3     D4     D5     D6
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 36.6 90/08/28 16:25:27 spence Exp Locker: spence $
d52 1
a52 1
/****** graphics.library/BltBitMapRastPort ********************************
d55 1
a55 1
*   	BltBitMapRastPort -- Blit from source bitmap to destination rastport.
d58 3
a60 3
*	BltBitMapRastPort
*	    (srcbm,srcx,srcy,destrp,destX,destY,sizeX,sizeY,minterm)
*	     a0    d0   d1   a1     d2    d3    d4    d5    d6
d62 3
a64 6
*	struct BitMap *srcbm;
*	WORD   srcx,srcy;
*	struct RastPort *destrp;
*	WORD   destX,destY;
*	WORD   sizeX,sizeY;
*	UBYTE  minterm;
d67 2
a68 2
*	Blits from source bitmap to position specified in destination rastport	
*	 using minterm.
d71 8
a78 8
*	srcbm - a pointer to the source bitmap
*	srcx  - x offset into source bitmap
*	srcy  - y offset into source bitmap
*	destrp - a pointer to the destination rastport
*	destX -	x offset into dest rastport
*	destY -	y offset into dest rastport
*	sizeX -	width of blit in pixels
*	sizeY -	height of blit in rows 
d81 1
a81 1
*   RETURNS
d87 1
a87 1
*	BltMaskBitMapRastPort graphics/gfx.h graphics/rastport.h
d372 2
a373 1
*NAME
d375 3
a377 1
*   ClipBlit  --  Calls BltBitMap() after accounting for windows
d379 3
a381 1
*SYNOPSIS
d383 6
a388 2
*   ClipBlit(Src, SrcX, SrcY, Dest, DestX, DestY, XSize, YSize, Minterm );
*            a0   d0    d1    a1    d2     d3     d4     d5     d6
d390 2
a391 6
*	struct RastPort *Src;
*	WORD   SrcX, SrcY;
*	struct RastPort *Dest;
*	WORD   DestX, DestY;
*	WORD   XSize, YSize;
*	UBYTE  Minterm;
d393 2
a394 6
*FUNCTION
*   Performs the same function as BltBitMap(), except that it
*   takes into account the Layers and ClipRects of the layer library,
*   all of which are (and should be) transparent to you.  So, whereas
*   BltBitMap() requires pointers to BitMaps, ClipBlit requires pointers to
*   the RastPorts that contain the Bitmaps, Layers, et cetera.
d396 1
a396 2
*   If you are going to blit blocks of data around via the RastPort of your
*   Intuition Window, you must call this routine (rather than BltBitMap()).
d398 9
a406 2
*   Either the Src RastPort, the Dest RastPort, both, or neither, can have 
*   Layers.  This routine takes care of all cases.
d408 1
a408 1
*   See BltBitMap() for a thorough explanation.
d410 1
a410 1
*INPUTS
d412 2
a413 20
*   Src = pointer to the RastPort of the source for your blit
*   SrcX, SrcY = the topleft offset into Src for your data
*   Dest = pointer to the RastPort to receive the blitted data
*   DestX, DestY = the topleft offset into the destination RastPort
*   XSize = the width of the blit
*   YSize = the height of the blit
*   Minterm = the boolean blitter function, where SRCB is associated with the
*             Src RastPort and SRCC goes to the Dest RastPort
*
*RESULT
*
*   None
*
*BUGS
*
*   None
*
*SEE ALSO
*
*   BltBitMap();
@


36.6
log
@Should be unchanged from last
@
text
@d3 1
a3 1
*	$Id: bltrastport.c,v 36.5 90/07/27 16:54:53 bart Exp Locker: spence $
@


36.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/bltrastport.c,v 36.3 90/02/27 13:38:27 bart Exp Locker: bart $
@


36.3
log
@must lock layer before possibly obtaining mustmemlock -- bart
@
text
@d3 1
a3 1
*	$Header: bltrastport.c,v 36.2 89/11/02 15:23:30 bart Exp $
@


36.2
log
@clipblit doc
@
text
@d3 1
a3 1
*	$Header: bltrastport.c,v 36.1 88/03/10 16:11:02 dale Exp $
d108 4
d114 1
a114 1
	if ( l = dst->Layer )
d116 4
a119 8
		LOCKLAYER(l);
		if (l->SuperBitMap)
		{
			syncsbitmap(l);
			dst->Layer = 0;
			bm = dst->BitMap;
			dst->BitMap = l->SuperBitMap;
		}
d128 1
a128 1
    if (!using_tmpras)
d133 2
a134 1
	if (l)	UNLOCKLAYER(l);
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d63 1
a63 1
*	SHORT srcx,srcy;
d65 3
a67 3
*	SHORT destX,destY;
*	SHORT sizeX,sizeY;
*	UBYTE minterm;
d382 7
@
