head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0;
locks    ; strict;
comment  @ * @;


39.0
date     91.08.21.17.22.56;  author chrisg;  state Exp;
branches ;
next     1.3;

1.3
date     91.06.18.09.53.53;  author chrisg;  state Exp;
branches ;
next     1.2;

1.2
date     91.05.20.11.22.03;  author chrisg;  state Exp;
branches ;
next     1.1;

1.1
date     91.05.02.13.08.42;  author chrisg;  state Exp;
branches ;
next     ;


desc
@ changed "../" to "/" for native build
@


39.0
log
@Bumped
@
text
@obsolete file
@


1.3
log
@stupid file.
@
text
@@


1.2
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d1 1
a1 285
#include <exec/types.h>
#include <graphics/gfxbase.h>
#include <graphics/view.h>
#include <graphics/videocontrol.h>
#include "/macros.h"
#include "c.protos"

/* need to consider GlobalVideoControl issues at length -- bart */

/* returns the number of pens currently set up for chroma_key */

num_chroma_pens(cm) 
struct ColorMap *cm;
{
    int i, num = 0;
    UWORD *p = cm->TransparencyBits;

    Forbid();

    for(i=0; i<cm->Count; i++)
    {
	int bit_no = i & 15;
	UWORD mask = 0x8000;
	mask >>= bit_no;
	if(*(p+(i>>4)) & mask) num ++;
    }

    Permit();

    return(num); 
}

/* This function may then be renamed to LocalVideoControl */

long	videocontrol(cm,v)
struct ColorMap *cm;
struct TagItem *v;
{
	int error = FALSE;

	if(!cm || (!(cm->Type))) error = -1; /* error, bad colormap */
	if(!v ) error = -2; 		     /* error, bad tagitems */

	while((!error) && v->ti_Tag)
	{
		switch(v->ti_Tag)
		{
			case	VTAG_CHROMAKEY_CLR:
				cm->Flags &= ~COLORMAP_TRANSPARENCY;
				break;
			case	VTAG_CHROMAKEY_SET:
				cm->Flags |=  COLORMAP_TRANSPARENCY;
				break;
			case	VTAG_BITPLANEKEY_CLR:
				cm->Flags &= ~COLORPLANE_TRANSPARENCY;
				break;
			case	VTAG_BITPLANEKEY_SET:
				cm->Flags |=  COLORPLANE_TRANSPARENCY;
				break;
			case	VTAG_BORDERBLANK_CLR:
				cm->Flags &= ~BORDER_BLANKING;
				break;
			case	VTAG_BORDERBLANK_SET:
				cm->Flags |=  BORDER_BLANKING;
				break;
			case	VTAG_BORDERNOTRANS_CLR:
				cm->Flags &= ~BORDER_NOTRANSPARENCY;
				break;
			case	VTAG_BORDERNOTRANS_SET:
				cm->Flags |=  BORDER_NOTRANSPARENCY;
				break;
			case	VTAG_CHROMA_PEN_CLR:
				{
				    int pen_no = v->ti_Data;
				    int bit_no = pen_no & 15;
				    UWORD mask = 0x8000;
				    UWORD *p = cm->TransparencyBits;
				    mask >>= bit_no;
				    p += pen_no >> 4; /* bump to correct word */
				    *p &= ~mask;
				}
				break;
			case	VTAG_CHROMA_PEN_SET:
				{
				    int pen_no = v->ti_Data;
				    int bit_no = pen_no & 15;
				    UWORD mask = 0x8000;
				    UWORD *p = cm->TransparencyBits;
				    mask >>= bit_no;
				    p += pen_no >> 4; /* bump to correct word */
				    *p |= mask;
				}
				break;
			case	VTAG_CHROMA_PLANE_SET:
				if( v->ti_Data < 6 ) /* 6,7 reserved for now */
				{
				    cm->TransparencyPlane = v->ti_Data;
				}
				break;
			case	VTAG_ATTACH_CM_SET:
				Forbid();
				{
				    struct ViewPort *vp = 
				    (struct ViewPort *) v->ti_Data;
				    if(cm->cm_vp = vp)
				    {
					/* remove old reference */
					struct ColorMap *oldcm = vp->ColorMap;
					if (oldcm) oldcm->cm_vp = 0;
					vp->ColorMap = cm;
				    }
				}
				Permit();
				break;
			case	VTAG_NEXTBUF_CM:
				v = (struct TagItem *)v->ti_Data;
				v--;	/* back up here so we can just */
					/* keep incrementing at bottom */
				break;
			case	VTAG_BATCH_CM_CLR:
				cm->Flags &= ~VIDEOCONTROL_BATCH;
				break;
			case	VTAG_BATCH_CM_SET:
				cm->Flags |=  VIDEOCONTROL_BATCH;
				break;
			case	VTAG_NORMAL_DISP_GET:
				v->ti_Tag  = VTAG_NORMAL_DISP_SET;
				v->ti_Data = (ULONG)cm->NormalDisplayInfo;
				break;
			case	VTAG_NORMAL_DISP_SET:
				cm->NormalDisplayInfo = (APTR)v->ti_Data;
				break;
			case	VTAG_COERCE_DISP_GET:
				v->ti_Tag  = VTAG_COERCE_DISP_SET;
				v->ti_Data = (ULONG)cm->CoerceDisplayInfo;
				break;
			case	VTAG_COERCE_DISP_SET:
				cm->CoerceDisplayInfo = (APTR)v->ti_Data;
				break;
			case	VTAG_VIEWPORTEXTRA_GET:
				v->ti_Tag  = VTAG_VIEWPORTEXTRA_SET;
				v->ti_Data = (ULONG)cm->cm_vpe;
				break;
			case	VTAG_VIEWPORTEXTRA_SET:
				cm->cm_vpe = (struct ViewPortExtra *)v->ti_Data;
				break;
			case	VTAG_CHROMAKEY_GET:
				if(cm->Flags & COLORMAP_TRANSPARENCY)
				{
				    v->ti_Tag = VTAG_CHROMAKEY_SET;
				}
				else
				{
				    v->ti_Tag = VTAG_CHROMAKEY_CLR;
				}
				v->ti_Data = num_chroma_pens(cm);
				break;
			case	VTAG_BITPLANEKEY_GET:
				if(cm->Flags & COLORPLANE_TRANSPARENCY)
				{
				    v->ti_Tag = VTAG_BITPLANEKEY_SET;
				}
				else
				{
				    v->ti_Tag = VTAG_BITPLANEKEY_CLR;
				}
				break;
			case	VTAG_BORDERBLANK_GET:
				if(cm->Flags & BORDER_BLANKING)
				{
				    v->ti_Tag = VTAG_BORDERBLANK_SET;
				}
				else
				{
				    v->ti_Tag = VTAG_BORDERBLANK_CLR;
				}
				break;
			case	VTAG_BORDERNOTRANS_GET:
				if(cm->Flags & BORDER_NOTRANSPARENCY)
				{
				    v->ti_Tag = VTAG_BORDERNOTRANS_SET;
				}
				else
				{
				    v->ti_Tag = VTAG_BORDERNOTRANS_CLR;
				}
				break;
			case	VTAG_CHROMA_PEN_GET:
				{
				    int pen_no = v->ti_Data;
				    int bit_no = pen_no & 15;
				    UWORD mask = 0x8000;
				    UWORD *p = cm->TransparencyBits;
				    mask >>= bit_no;
				    p += pen_no >> 4; /* bump to correct word */
				    if(*p & mask)
				    {
					v->ti_Tag = VTAG_CHROMA_PEN_SET;
				    }
				    else
				    {
					v->ti_Tag = VTAG_CHROMA_PEN_CLR;
				    }
				}
				break;
			case	VTAG_CHROMA_PLANE_GET:
				v->ti_Tag  = VTAG_CHROMA_PLANE_SET;
				v->ti_Data = (ULONG)cm->TransparencyPlane;
				break;
			case	VTAG_ATTACH_CM_GET:
				v->ti_Tag  = VTAG_ATTACH_CM_SET;
				v->ti_Data = (ULONG)cm->cm_vp;
				break;
			case	VTAG_BATCH_CM_GET:
				if(cm->Flags & VIDEOCONTROL_BATCH)
				{
				    v->ti_Tag  = VTAG_BATCH_CM_SET;
				}
				else
				{
				    v->ti_Tag  = VTAG_BATCH_CM_CLR;
				}
				break;
			case	VTAG_BATCH_ITEMS_GET:
				v->ti_Tag  = VTAG_BATCH_ITEMS_SET;
				v->ti_Data = (ULONG)cm->cm_batch_items;
				break;
			case	VTAG_BATCH_ITEMS_SET:
				cm->cm_batch_items = (struct TagItem *)
				v->ti_Data;
				break;
			case	VTAG_BATCH_ITEMS_ADD:
				Forbid(); 
				{
				    struct TagItem *oi = cm->cm_batch_items;
				    struct TagItem *ti = (struct TagItem *)
				    v->ti_Data;

				    while(ti && (ti->ti_Tag != VTAG_END_CM))
				    {
					if(ti->ti_Tag == VTAG_NEXTBUF_CM)
					{
					    ti = (struct TagItem *)ti->ti_Data;
					}
					else 
					{
					    ti++;
					}
				    }
				    if(ti != (struct TagItem *)v->ti_Data) 
				    {
					ti->ti_Tag  = VTAG_NEXTBUF_CM;
					ti->ti_Data = (ULONG)oi;
					ti = (struct TagItem *)v->ti_Data;
				    }
				    else
				    {
					ti = oi;
				    }
				    cm->cm_batch_items = ti;
				}
				Permit();
				break;
			default:
				error = -3; /* error, unknown command */
		}
		v++;	/* to next video command */
	}

#ifdef  IMMEDIATE_MODE
	/* color map needs to be attached to make immediate changes */
	if (cm->cm_vp && (!(cm->Flags & VIDEOCONTROL_BATCH))) 
	{
		struct GfxBase *GB;
		FETCHGBASE;
		/* chock full of race conditions */
		makevport(GB->ActiView,cm->cm_vp);
		mrgcop(GB->ActiView);
		waittof();
		loadview(GB->ActiView);
	}
#endif

	return (error);	/* ok?, or not... */
}
@


1.1
log
@Initial revision
@
text
@d6 1
@
