head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.5 V36_208:36.5 V36_207:36.5 V36_205:36.5 V36_203:36.5 V36_202:36.5 V36_201:36.5 V36_200:36.5 V36_199:36.5 V36_198:36.5 V36_196:36.5 V36_195:36.5 V36_194:36.5 V36_193:36.5 V36_192:36.5 V36_191:36.5 V36_190:36.5 V36_189:36.5 V36_188:36.5 V36_186:36.5 V36_185:36.5 V36_184:36.5 V36_182:36.5 V36_181:36.5;
locks    ; strict;
comment  @@;


39.1
date     91.11.18.11.44.25;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.20.10;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.08.07.13.52.20;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.14.58.26;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.27.44;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.27.16.58.40;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.05.21.14.59.04;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.03.28.09.08.56;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.14.14.48.16;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.12.36;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@ added lc asm proto
@
text
@*******************************************************************************
*
*	$Id: minterms.asm,v 38.0 91/08/07 13:52:20 chrisg Exp $
*
*******************************************************************************


    include 'exec/types.i'                  * Data type definitions
    include 'graphics/rastport.i'           * RastPort/BitMap structures
    include 'hardware/blit.i'               * Blitter constants

    section graphics
    xdef GenMinTerms			   

***** GenMinTerms *****************************************************
* 
*NAME   
* 
*   GenMinTerms - Generate minterms into RastPort structure
*
*
*SYNOPSIS
* 
*   GenMinTerms is called as follows:
*
*               A1 = Pointer to RastPort structure (w)
*               JSR  GenMinTerms
*
* 
*FUNCTION
* 
*   This function was
*   converted from C code with an associated assembly language interface.  The
*   C calling sequence was as follows:
*
*           genminterms(w)
*             register struct RastPort *w;
*           {
*           }
*
*   The assembly language interface called genminterms by pushing the data
*   contained within the following registers onto the stack:
*
*           w       = A1 
*
*
*INPUTS
*
*   Inputs to the GenMinTerms function are required in the following registers:
*
*               A1 = Pointer to the RastPort memory structure
*
*
*REGISTERS USED
*
*   The following registers are defined for use within BltClear
*
*       Register    C Variable Name     Byte Length     Restored For Exit
*
*         D0            minterm              1                No
*         D1            i                    2                No
*         D2            N/A                 N/A               Yes
*         D4            N/A                 N/A               Yes
*         D5          (w->DrawMode)          1                Yes
*         D6        (1&(w->BgPen>>i))        1                Yes
*         D7        (1&(w->FgPen>>1))        1                Yes
*
*         A0            minterm address ptr  4                No
*         A1            w                    4                No
*         A2            N/A                  4                Yes
*         A3            N/A                  4                Yes
*         A4            N/A                  4                Yes
*         A5            N/A                  4                Yes
*         A6            N/A                  4                Yes
*
* 
*RESULT
* 
* 
*EXAMPLE
*
*   Callng sequence shown above.  The table lookup procedure was implemented
*   in accordance with the following MinTerm information:
*
*
*            MinTerm Input Variables              Hex           Decision Table
*                                                Offsets        MinTerm Output
*
*                                               |      |
*     FGPEN   BGPEN    INV     XOR    JAM1/2    |      |
*_______________________________________________|______|________________________
*                                               |      |
*       0       0       0       0       0       |  00  |    NANBC+NABC+ANBC
*                                               |      |
*       0       0       0       0       1       |  01  |    NANBC+NABC
*                                               |      |
*       0       0       0       1       0       |  02  |    NANBC+NABC+ANBC+ABNC
*                                               |      |
*       0       0       0       1       1       |  03  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       0       0       1       0       0       |  04  |    NANBC+NABC+ABC
*                                               |      |
*       0       0       1       0       1       |  05  |    NANBC+NABC
*                                               |      |
*       0       0       1       1       0       |  06  |    NANBC+NABC+ANBNC+ABC
*                                               |      |
*       0       0       1       1       1       |  07  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       0       1       0       0       0       |  08  |    NANBC+NABC+ANBC
*                                               |      |
*       0       1       0       0       1       |  09  |    NANBC+NABC+ANBNC+ANBC
*                                               |      |
*       0       1       0       1       0       |  10  |    NANBC+NABC+ANBC+ABNC
*                                               |      |
*       0       1       0       1       1       |  11  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       0       1       1       0       0       |  12  |    NANBC+NABC+ABC
*                                               |      |
*       0       1       1       0       1       |  13  |    NANBC+NABC+ABNC+ABC
*                                               |      |
*       0       1       1       1       0       |  14  |    NANBC+NABC+ANBNC+ABC
*                                               |      |
*       0       1       1       1       1       |  15  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       1       0       0       0       0       |  16  |    NANBC+NABC+ANBC+ABNC+ABC
*                                               |      |
*       1       0       0       0       1       |  17  |    NANBC+NABC+ABNC+ABC
*                                               |      |
*       1       0       0       1       0       |  18  |    NANBC+NABC+ANBC+ABNC
*                                               |      |
*       1       0       0       1       1       |  19  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       1       0       1       0       0       |  20  |    NANBC+NABC+ABC+ANBNC+ANBC
*                                               |      |
*       1       0       1       0       1       |  21  |    NANBC+NABC+ANBNC+ANBC
*                                               |      |
*       1       0       1       1       0       |  22  |    NANBC+NABC+ANBNC+ABC
*                                               |      |
*       1       0       1       1       1       |  23  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       1       1       0       0       0       |  24  |    NANBC+NABC+ANBC+ABNC+ABC
*                                               |      |
*       1       1       0       0       1       |  25  |    NANBC+NABC+ANBNC+ANBC+ABNC+ABC
*                                               |      |
*       1       1       0       1       0       |  26  |    NANBC+NABC+ANBC+ABNC
*                                               |      |
*       1       1       0       1       1       |  27  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*       1       1       1       0       0       |  28  |    NANBC+NABC+ABC+ANBNC+ANBC
*                                               |      |
*       1       1       1       0       1       |  29  |    NANBC+NABC+ABNC+ABC+ANBNC+ANBC
*                                               |      |
*       1       1       1       1       0       |  30  |    NANBC+NABC+ANBNC+ABC
*                                               |      |
*       1       1       1       1       1       |  31  |    NANBC+NABC+ANBNC+ABNC
*                                               |      |
*
* 
*BUGS
* 
*   None known.
*
*
*SEE ALSO
* 
*   The graph.s,blit.s, types.s, submacs.s and graph.h include files.
*
* CHANGES:
*   6-20-88 REJ speed improvements
*           new version is somewhat larger, esp tables.
*   8-14-89 REJ's code had some bugs -- bart
*	    analyze, fix, optimise and include for v1.4 alpha 17 release
*
* 
******************************************************************************

    PAGE
*                                                 Define all minterms possible

*  NOTE:  Optimized for execution speed rather than memory size



*                               GENERATE MINTERMS FOR RastPort STRUCTURE
	xdef    _genminterms
; void __asm genminterms(register __a1 struct RastPort *rp);
GenMinTerms:
_genminterms:
	movem.w d5-d7,-(sp)             * save registers used

	lea rp_minterms+8(a1),a0        * set up destination

	move.b  rp_DrawMode(a1),d5      * d0.b = w->DrawMode
	andi.w  #$07,d5                 * d0.w = INV, XOR and JAM1/2 bits ONLY
	btst	#1,d5			* test for xormode
	bne.s   xormode             	* if xor, ignore pens

	move.b  rp_FgPen(a1),d7         * d7.b = w->FgPen
	moveq   #3,d1                   * start with msb
	btst    #0,d5               	* check jam bit
	bne.s   jam2mode            	* if jam2, respect bgpen
*
*   	JAM1 mode, ignore bgpen
*

jam1mode:
	lsr.w	 #2,d5			* prepare inv bit
loop2:  move.w   d5,d0           	* get inv bit
	add.b	d7,d7           	* get a bit from FgPen
	addx.w	d0,d0           	* move into index
	add.b	d7,d7           	* get a bit from FgPen
	addx.w	d0,d0           	* now we have index
	add.w	d0,d0	          	* adjust index for WORD fetch
	move.w  JAM1_Table(pc,d0.w),-(a0)  * w->minterms[i] = minterm;
	dbra d1,loop2
	bra.s exit

*
*   	JAM2, not xor, maybe INV
*
jam2mode:
	lsr.w	 #2,d5			* prepare inv bit
	move.b   rp_BgPen(a1),d6        * d6.b = w->BgPen

loop1: 	move.w   d5,d0                  * d0.w = INV bits
        add.b	d7,d7           	* get a bit from FgPen
        addx.w	d0,d0           	* move into index
        add.b	d6,d6           	* a bit from BgPen
        addx.w	d0,d0           	* move into index
        add.b	d7,d7           	* get a bit from FgPen
        addx.w	d0,d0           	* move into index
        add.b	d6,d6           	* a bit from BgPen
        addx.w	d0,d0           	* now we have index
	add.w	d0,d0           	* adjust index for WORD fetch
        move.w   JAM2_TABLE(pc,d0.w),-(a0)   * w->minterms[i] = minterm;
    	dbra     d1,loop1

exit:   move.w  (sp)+,d5
	move.w  (sp)+,d6                * movem.w (sp)+,d5-d7 without extend
    	move.w  (sp)+,d7

	rts                             * Exit to caller

xormode:
	andi	#$ef,ccr		* clear extend
	roxr.w  #2,d5			* roll thru extend in order to
	rol.w   #3,d5                   * eliminate xor bit, adjust LONG fetch
	move.l  XOR_Table(pc,d5.w),d0      * get the minterms
	move.l  d0,-(a0)		* and copy into
	move.l  d0,-(a0)		* the minterms
	bra.s   exit

* NOTE: word align tables for word and longword access !!!
	ds.w	0

JAM1_Table:
* NOTE: this table generates 2 bytes at a time!
* here is the one byte at a time version for reference:
*
*   dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /INV   
*   dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /INV    
*   dc.b    NANBC+NABC+ABC                      * 04 - /FGPEN, INV    
*   dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20 - FGPEN, INV     
*
* Ordering is <INV><FGPEN-HIGH><FGPEN-LOW>
*   the high and low refer to higher and lower numbered bitplanes, in the
*   table, the ordering is: <minterm-low><minterm-high>
*
    dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /INV   
    dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /INV   
    dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /INV    
    dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /INV   

    dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /INV   
    dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /INV    
    dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /INV    
    dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /INV    

    dc.b    NANBC+NABC+ABC                      * 04 - /FGPEN, INV    
    dc.b    NANBC+NABC+ABC                      * 04 - /FGPEN, INV    
    dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20 - FGPEN, INV     
    dc.b    NANBC+NABC+ABC                      * 04 - /FGPEN, INV    

    dc.b    NANBC+NABC+ABC                      * 04 - /FGPEN, INV    
    dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20 - FGPEN, INV     
    dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20 - FGPEN, INV     
    dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20 - FGPEN, INV     

	ds.l	0
XOR_Table:
*
* This table is read a longword at a time.
*
    dc.b    NANBC+NABC+ANBC+ABNC                * 02    /INV XOR JAM1
    dc.b    NANBC+NABC+ANBC+ABNC                * 02    /INV XOR JAM1
    dc.b    NANBC+NABC+ANBC+ABNC                * 02    /INV XOR JAM1
    dc.b    NANBC+NABC+ANBC+ABNC                * 02    /INV XOR JAM1

    dc.b    NANBC+NABC+ANBNC+ABNC               * 03    /INV XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 03    /INV XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 03    /INV XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 03    /INV XOR JAM2

    dc.b    NANBC+NABC+ANBNC+ABC                * 06    INV  XOR JAM1
    dc.b    NANBC+NABC+ANBNC+ABC                * 06    INV  XOR JAM1
    dc.b    NANBC+NABC+ANBNC+ABC                * 06    INV  XOR JAM1
    dc.b    NANBC+NABC+ANBNC+ABC                * 06    INV  XOR JAM1

    dc.b    NANBC+NABC+ANBNC+ABNC               * 07    INV  XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 07    INV  XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 07    INV  XOR JAM2
    dc.b    NANBC+NABC+ANBNC+ABNC               * 07    INV  XOR JAM2

JAM2_TABLE:
*
* JAM2 is in effect.
*
* Ordering is <INV><FGPEN-HIGH><BGPEN-HIGH><FGPEN-LOW><BGPEN_LOW>
*   the high and low refer to higher and lower numbered bitplanes, in the
*   table, the ordering is: <minterm-low><minterm-high>
*
* NOTE: this table generates 2 bytes at a time!
* here is the one byte at a time version for reference: 
*
*   dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
*   dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
*   dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
*   dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
*
*   dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
*   dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
*   dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
*   dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
*
    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN

    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN

    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN

    dc.b    NANBC+NABC                          * 01 /INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 09 /INV, /FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 17 /INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25 /INV, FGPEN, BGPEN

    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN

    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 

    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN

    dc.b    NANBC+NABC                          * 05 INV, /FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC                 * 13 INV, /FGPEN, BGPEN 
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ANBNC+ANBC               * 21 INV, FGPEN, /BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN
    dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29 INV, FGPEN, BGPEN

    end                                 * End of SetRast

@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: minterms.asm,v 38.0 91/08/07 13:52:20 chrisg Exp Locker: chrisg $
d183 1
d185 2
d188 1
@


38.0
log
@ optimized and checked in under V38
@
text
@d3 1
a3 1
*	$Id: minterms.asm,v 37.1 91/05/02 14:58:26 chrisg Exp Locker: chrisg $
@


37.1
log
@ changed "LBL(d0.w)" to "LBL(PC,D0.w)"
@
text
@d3 1
a3 1
*	$Id: minterms.asm,v 37.0 91/01/07 15:27:44 spence Exp Locker: chrisg $
d205 5
a209 5
	roxl.b   #1,d7           	* get a bit from FgPen
	roxl.w   #1,d0           	* move into index
	roxl.b   #1,d7           	* get a bit from FgPen
	roxl.w   #1,d0           	* now we have index
	lsl.w    #1,d0           	* adjust index for WORD fetch
a211 1

d222 9
a230 9
        roxl.b   #1,d7           	* get a bit from FgPen
        roxl.w   #1,d0           	* move into index
        roxl.b   #1,d6           	* a bit from BgPen
        roxl.w   #1,d0           	* move into index
        roxl.b   #1,d7           	* get a bit from FgPen
        roxl.w   #1,d0           	* move into index
        roxl.b   #1,d6           	* a bit from BgPen
        roxl.w   #1,d0           	* now we have index
	lsl.w    #1,d0           	* adjust index for WORD fetch
d285 1
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: minterms.asm,v 36.5 90/07/27 16:58:40 bart Exp Locker: spence $
d210 1
a210 1
	move.w  JAM1_Table(d0.w),-(a0)  * w->minterms[i] = minterm;
d232 1
a232 1
        move.w   JAM2_TABLE(d0.w),-(a0)   * w->minterms[i] = minterm;
d245 1
a245 1
	move.l  XOR_Table(d5.w),d0      * get the minterms
@


36.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.4
log
@clear extend in xormode code before using roxr instruction
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/minterms.asm,v 36.3 90/03/28 09:08:56 bart Exp Locker: kodiak $
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/minterms.asm,v 36.2 89/08/14 14:48:16 bart Exp Locker: bart $
d242 1
@


36.2
log
@optimse genminterms
for speed not space
bart
@
text
@d3 1
a3 1
*	$Header: minterms.asm,v 36.1 88/03/10 16:12:36 dale Exp $
@


36.1
log
@
@
text
@d3 1
a3 1
*	$Header: $
a6 3
	include 'exec/types.i'                  * Data type definitions
	include 'graphics/rastport.i'           * RastPort/BitMap structures
	include 'hardware/blit.i'               * Blitter constants
d8 3
a10 2
	section	graphics
	xdef GenMinTerms,_GenMinTerms * Define function entries as public symbols
d12 3
d27 1
a27 1
*               JSR SetRast
d68 1
a68 1
*         A0            N/A                  4                No
d167 7
d177 1
a177 1
	PAGE
a178 9
MT_Table:
	dc.b    NANBC+NABC+ANBC                     * 00 - /FGPEN, /BGPEN
	dc.b    NANBC+NABC                          * 01
	dc.b    NANBC+NABC+ANBC+ABNC                * 02
	dc.b    NANBC+NABC+ANBNC+ABNC               * 03
	dc.b    NANBC+NABC+ABC                      * 04
	dc.b    NANBC+NABC                          * 05
	dc.b    NANBC+NABC+ANBNC+ABC                * 06
	dc.b    NANBC+NABC+ANBNC+ABNC               * 07
d180 1
a180 8
	dc.b    NANBC+NABC+ANBC                     * 08 - /FGPEN, BGPEN
	dc.b    NANBC+NABC+ANBNC+ANBC               * 09
	dc.b    NANBC+NABC+ANBC+ABNC                * 10
	dc.b    NANBC+NABC+ANBNC+ABNC               * 11
	dc.b    NANBC+NABC+ABC                      * 12
	dc.b    NANBC+NABC+ABNC+ABC                 * 13
	dc.b    NANBC+NABC+ANBNC+ABC                * 14
	dc.b    NANBC+NABC+ANBNC+ABNC               * 15
a181 8
	dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 16 - FGPEN, /BGPEN
	dc.b    NANBC+NABC+ABNC+ABC                 * 17
	dc.b    NANBC+NABC+ANBC+ABNC                * 18
	dc.b    NANBC+NABC+ANBNC+ABNC               * 19
	dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 20
	dc.b    NANBC+NABC+ANBNC+ANBC               * 21
	dc.b    NANBC+NABC+ANBNC+ABC                * 22
	dc.b    NANBC+NABC+ANBNC+ABNC               * 23
d183 3
a185 8
	dc.b    NANBC+NABC+ANBC+ABNC+ABC            * 24 - FGPEN, BGPEN
	dc.b    NANBC+NABC+ANBNC+ANBC+ABNC+ABC      * 25
	dc.b    NANBC+NABC+ANBC+ABNC                * 26
	dc.b    NANBC+NABC+ANBNC+ABNC               * 27
	dc.b    NANBC+NABC+ABC+ANBNC+ANBC           * 28
	dc.b    NANBC+NABC+ABNC+ABC+ANBNC+ANBC      * 29
	dc.b    NANBC+NABC+ANBNC+ABC                * 30
	dc.b    NANBC+NABC+ANBNC+ABNC               * 31
d187 1
d189 4
d194 7
a200 1
*  NOTE:  Optimized for execution speed rather than memory size
d202 10
d213 1
a213 4
*                               GENERATE MINTERMS FOR RastPort STRUCTURE
GenMinTerms:
_GenMinTerms:
	movem   d6-d7,-(sp)                 * save registers used
d215 6
a220 3
	move.b  rp_DrawMode(a1),d0          * d0.b = w->DrawMode
	move.b  rp_BgPen(a1),d6             * d6.b = w->BgPen
	move.b  rp_FgPen(a1),d7             * d7.b = w->FgPen
d222 12
a233 2
	moveq   #7,d1                       * start with msb
loop:
d235 3
a237 1
	    and     #$07,d0                 * d0.w = INV, XOR and JAM1/2 bits
d239 1
a239 4
	    btst    d1,d6                   * Check (1 & (w->BgPen>>i)) bit
	    if <>
		or      #$08,d0             * Set the BgPen bit in table index
	    endif
d241 7
a247 4
	    btst    d1,d7                   * Check (1 & (w->FgPen>>i)) bit
	    if <>
		or      #$10,d0             * Set the FgPen bit in table index
	    endif
d249 2
a250 1
	    move.b  MT_Table(d0.w),rp_minterms(a1,d1.w) * w->minterms[i] = minterm;
d252 17
a268 1
	dbf d1,loop
d270 4
a273 2
	move.w  (sp)+,d6                    * movem.w -(sp),d6-d7 without sign extend
	move.w  (sp)+,d7
d275 4
a278 1
	rts                                 * Exit to caller
d280 4
d285 119
a403 1
	end                                 * End of SetRast
@
