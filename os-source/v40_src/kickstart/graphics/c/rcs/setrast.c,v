head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_17:37.2 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.6 V36_196:36.6 V36_195:36.6 V36_194:36.6 V36_193:36.6 V36_192:36.6 V36_191:36.6 V36_190:36.6 V36_189:36.6 V36_188:36.6 V36_186:36.6 V36_185:36.6 V36_184:36.6 V36_182:36.6 V36_181:36.6;
locks    ; strict;
comment  @ * @;


39.1
date     92.01.21.13.31.03;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.22.11;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.20.11.20.45;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.02.13.03.26;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.28.13.50.29;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.27.13.16.54;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.20.52;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.07.27.16.59.59;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.28.09.10.17;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     88.11.16.10.06.09;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     88.09.21.21.27.35;  author dale;  state Exp;
branches ;
next     36.2;

36.2
date     88.06.17.22.15.57;  author dale;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.12.13;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@killed fetchgbase
@
text
@/******************************************************************************
*
*	$Id: setrast.c,v 39.0 91/08/21 17:22:11 chrisg Exp Locker: chrisg $
*
******************************************************************************/

#define CHRIS_DOWNCODE 1

#ifndef CHRIS_DOWNCODE

/* graphics  kernel routines */
#include <exec/types.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <hardware/dmabits.h>
#include "/sane_names.h"
#include "/macros.h"
#include <graphics/gfxbase.h>
#include "c.protos"

/*#define DEBUG*/
/*#define QWE*/
#define NO_BIG_BLIT

extern struct AmigaRegs custom;

#ifdef QWE
setrast1(cr,color,w)
register struct RastPort *w;
short color;
struct ClipRect *cr;
{
	struct BitMap *bm;
	UWORD	mask = 1;
    USHORT BltSize;
    long dstoffset,bltbytes;
    UBYTE **p;
    int i;
    register struct AmigaRegs *io = &custom;

	bm = w->BitMap;
	bltbytes = BLTBYTES(cr->bounds.MinX,cr->bounds.MaxX);
	BltSize = ((cr->bounds.MaxY-cr->bounds.MinY+1)<<6) | (bltbytes >> 1);
#ifdef DEBUG
   	printf("cr=%lx\n",cr);
   	printf("Bltbyte = %lx\n",bltbytes);
   	printf("BltSize = %lx\n",BltSize);
   	Debug();
#endif
   	p = bm->Planes;
   	dstoffset = umuls(cr->bounds.MinY,bm->BytesPerRow) + (cr->bounds.MinX>>3);
	i = cr->bounds.MaxX & 0xf;
   	OwnBlitter();
	waitblitdone();
   	io->bltmdd = bm->BytesPerRow - bltbytes;
   	io->bltmdc = bm->BytesPerRow - bltbytes;
	io->bltcon1 = 0;
   	io->bltcon0 = 0;    /* set shift to 0 for adata put*/
   	io->adata = 0xffff;
	io->fwmask = (USHORT)0xffff >> (cr->bounds.MinX&0xF);
	io->lwmask = (USHORT)0xffff << ( 15 - i);
	for(i=0;i<bm->Depth;i++)
	{
   		if (w->Mask  & mask)
   		{
			waitblitdone();
			io->bltcon0 = DEST|SRCC | NANBC|NABC |
 				(color & mask ? ABC|ABNC|ANBC|ANBNC  : 0 );
			io->bltptd = *p + dstoffset;
			io->bltptc = *p + dstoffset;
			io->bltsize = BltSize;
   		}
		mask <<= 1;
   		p++;
	}
	DisownBlitter();
}

bigsetrast1(cr,color,w)
register struct RastPort *w;
short color;
register struct ClipRect *cr;
{
	struct BitMap *bm;
	UWORD	mask = 1;
    USHORT BltHSize,BltVSize;
    long dstoffset,bltbytes;
    UBYTE **p;
    int i;
    register struct AmigaRegs *io = &custom;
    USHORT BltSize;
	struct ClipRect newcr;

	bm = w->BitMap;
	bltbytes = BLTBYTES(cr->bounds.MinX,cr->bounds.MaxX);
	BltHSize = bltbytes >> 1;
	BltVSize = cr->bounds.MaxY-cr->bounds.MinY+1;
	if ( (GBASE->ChipRevBits0 & GFXF_BIG_BLITS) == 0) /* old blitter? */
	{
		if ( (BltVSize > 1024) | (BltHSize & 0xFFC0) )
		{	/* too big! */
			/* subdivide and recurs */
			newcr = *cr;	/* get all goodies */
			do
			{
				unsigned short saverowsize;
				unsigned short rows_to_do;
				rows_to_do = SHORTMIN(1024,BltVSize);
				saverowsize = cr->bounds.MaxX - cr->bounds.MinX + 1;
				/* recover original x size */
				newcr.bounds.MinX = cr->bounds.MinX;
				newcr.bounds.MaxX = cr->bounds.MaxX;
				newcr.bounds.MaxY = newcr.bounds.MinY + rows_to_do - 1;
				do
				{
					unsigned short columns_to_do;
					columns_to_do = SHORTMIN(1008,saverowsize);
					newcr.bounds.MaxX = newcr.bounds.MinX+columns_to_do-1;
					bigsetrast1(&newcr,color,w);
					saverowsize -= columns_to_do;
					newcr.bounds.MinX += columns_to_do;
				} while (saverowsize);
				newcr.bounds.MinY += rows_to_do;
				BltVSize -= rows_to_do;
			}	while (BltVSize);
			return;
		}
		BltSize = (BltVSize<<6)|(BltHSize);
	}
#ifdef DEBUG
   	printf("cr=%lx\n",cr);
   	printf("Bltbyte = %lx\n",bltbytes);
   	printf("BltHSize = %lx\n",BltHSize);
   	printf("BltVSize = %lx\n",BltVSize);
   	Debug();
#endif
   	p = bm->Planes;
   	dstoffset = umuls(cr->bounds.MinY,bm->BytesPerRow) + (cr->bounds.MinX>>3);
	i = cr->bounds.MaxX & 0xf;
   	OwnBlitter();
	waitblitdone();
   	io->bltmdd = bm->BytesPerRow - bltbytes;
   	io->bltmdc = bm->BytesPerRow - bltbytes;
	io->bltcon1 = 0;
   	io->bltcon0 = 0;    /* set shift to 0 for adata put*/
   	io->adata = 0xffff;
	io->fwmask = (USHORT)0xffff >> (cr->bounds.MinX&0xF);
	io->lwmask = (USHORT)0xffff << ( 15 - i);
	io->bltsizv = (BltVSize & 0x7fff);
	for(i=0;i<bm->Depth;i++)
	{
   		if (w->Mask  & mask)
   		{
			waitblitdone();
			io->bltcon0 = DEST|SRCC | NANBC|NABC |
 				(color & mask ? ABC|ABNC|ANBC|ANBNC  : 0 );
			io->bltptd = *p + dstoffset;
			io->bltptc = *p + dstoffset;
			if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
				io->bltsizh = (BltHSize & 0x07ff);
			else	io->bltsize = BltSize;
   		}
		mask <<= 1;
   		p++;
	}
	DisownBlitter();
}

#else

bigsetrast1(cr,color,w)
register struct RastPort *w;
short color;
register struct ClipRect *cr;
{
	struct BitMap *bm;
	UWORD	mask = 1;
    USHORT BltHSize,BltVSize;
    long dstoffset,bltbytes;
    UBYTE **p;
    int i;
    register struct AmigaRegs *io = &custom;
    USHORT BltSize;

	bm = w->BitMap;
	bltbytes = BLTBYTES(cr->bounds.MinX,cr->bounds.MaxX);
	BltHSize = bltbytes >> 1;
	BltVSize = cr->bounds.MaxY-cr->bounds.MinY+1;
#ifdef DEBUG
   	printf("cr=%lx\n",cr);
   	printf("Bltbyte = %lx\n",bltbytes);
   	printf("BltHSize = %lx\n",BltHSize);
   	printf("BltVSize = %lx\n",BltVSize);
   	Debug();
#endif
   	p = bm->Planes;
   	dstoffset = umuls(cr->bounds.MinY,bm->BytesPerRow) + (cr->bounds.MinX>>3);
	i = cr->bounds.MaxX & 0xf;
   	OwnBlitter();
	waitblitdone();
   	io->bltmdd = bm->BytesPerRow - bltbytes;
   	io->bltmdc = bm->BytesPerRow - bltbytes;
	io->bltcon1 = 0;
   	io->bltcon0 = 0;    /* set shift to 0 for adata put*/
   	io->adata = 0xffff;
	io->fwmask = (USHORT)0xffff >> (cr->bounds.MinX&0xF);
	io->lwmask = (USHORT)0xffff << ( 15 - i);
	if ( (GBASE->ChipRevBits0 & GFXF_BIG_BLITS) == 0) /* old blitter? */
	{
		BltSize = (BltVSize<<6)|(BltHSize & 63);
	}
	else
	{
		io->bltsizv = (BltVSize & 0x7fff);
	}
	for(i=0;i<bm->Depth;i++)
	{
   		if (w->Mask  & mask)
   		{
			waitblitdone();
			io->bltcon0 = DEST|SRCC | NANBC|NABC |
 				(color & mask ? ABC|ABNC|ANBC|ANBNC  : 0 );
			io->bltptd = *p + dstoffset;
			io->bltptc = *p + dstoffset;
			if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
			{
				io->bltsizh = (BltHSize & 0x07ff);
			}
			else	io->bltsize = BltSize;
   		}
		mask <<= 1;
   		p++;
	}
	DisownBlitter();
}

#endif


#endif
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 37.4 91/05/20 11:20:45 chrisg Exp Locker: chrisg $
a93 1
	struct GfxBase *GB;
a95 2
	FETCHGBASE;

d100 1
a100 1
	if ( (GB->ChipRevBits0 & GFXF_BIG_BLITS) == 0) /* old blitter? */
d161 1
a161 1
			if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
a185 3
	struct GfxBase *GB;

	FETCHGBASE;
d210 1
a210 1
	if ( (GB->ChipRevBits0 & GFXF_BIG_BLITS) == 0) /* old blitter? */
d227 1
a227 1
			if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
@


37.4
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 1.1 91/05/20 10:47:56 chrisg Exp $
@


37.3
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 37.2 91/02/28 13:50:29 chrisg Exp Locker: chrisg $
d21 1
@


37.2
log
@  #IFDEF'd out bigsetrast1 because I downcoded it (look at a/SetRast.asm).
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 37.1 91/02/27 13:16:54 spence Exp Locker: chrisg $
d18 2
a19 2
#include "../sane_names.h"
#include "../macros.h"
@


37.1
log
@No more big-blit code. Dale's code recursed infinitely, and nowhere else
in the system are big-blits emulated, so we save ROM space.
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 37.0 91/01/07 15:20:52 spence Exp Locker: spence $
d7 4
d217 1
a217 1
		BltSize = (BltVSize<<6)|(BltHSize);
d243 3
d247 1
a247 1
#endif
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: setrast.c,v 36.6 90/07/27 16:59:59 bart Exp Locker: spence $
d19 2
a74 1
#endif
d90 1
d100 1
a100 1
		if ( (BltVSize & 0xFC00) | (BltHSize & 0xFFC0) )
a102 1
			struct ClipRect newcr;
d168 73
@


36.6
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/setrast.c,v 36.4 88/11/16 10:06:09 bart Exp Locker: bart $
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: setrast.c,v 36.3 88/09/21 21:27:35 dale Exp $
@


36.3
log
@Folded big/little blits into one routine. Added untested code
for big blits on small blitter.
@
text
@d3 1
a3 1
*	$Header: setrast.c,v 36.2 88/06/17 22:15:57 dale Exp $
d148 1
a148 1
	io->bltsizv = BltVSize;
d159 1
a159 1
				io->bltsizh = BltHSize;
@


36.2
log
@Big Blits.
@
text
@d3 1
a3 1
*	$Header: setrast.c,v 36.1 88/03/10 16:12:13 dale Exp $
a9 3
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
d16 1
d22 1
d73 1
d78 1
a78 1
struct ClipRect *cr;
d87 2
d90 2
d96 33
d158 3
a160 1
			io->bltsizh = BltHSize;
@


36.1
log
@
@
text
@d3 1
a3 1
*	$Header: $
d68 54
@
