head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.8 V36_208:36.8 V36_207:36.8 V36_205:36.8 V36_203:36.8 V36_202:36.8 V36_201:36.7 V36_200:36.7 V36_199:36.7 V36_198:36.7 V36_196:36.7 V36_195:36.7 V36_194:36.7 V36_193:36.7 V36_192:36.7 V36_191:36.7 V36_190:36.7 V36_189:36.7 V36_188:36.7 V36_186:36.7 V36_185:36.7 V36_184:36.7 V36_182:36.5 V36_181:36.5;
locks    ; strict;
comment  @ * @;


39.2
date     92.10.06.13.51.01;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.05.12.11.10;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.17.32;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.20.11.09.55;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.02.15.07.11;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.12.53.14;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.11;  author spence;  state Exp;
branches ;
next     36.8;

36.8
date     90.12.07.15.42.50;  author spence;  state Exp;
branches ;
next     36.7;

36.7
date     90.09.20.11.01.03;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     90.09.13.13.51.44;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.27.16.56.43;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.28.09.11.22;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.03.13.12.56.14;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     88.07.23.13.57.10;  author dale;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.28;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@void.
@
text
@/******************************************************************************
*
*	$Id: drawvect.c,v 39.1 92/05/05 12:11:10 chrisg Exp Locker: chrisg $
*
******************************************************************************/

#include <exec/types.h>
#include <graphics/gfx.h>
#include <graphics/rastport.h>
#include <hardware/blit.h>
#include <hardware/dmabits.h>
#include "/sane_names.h"
#include "c.protos"

/*#define DEBUG*/
/*#define DEBUGALL*/
#include "cdrawinfo.h"

extern struct AmigaRegs custom;

void __regargs draw_vect(rp,cdi,x0,y0,dot_count,e,fudge)
struct cdraw_info *cdi;
struct RastPort *rp;
int x0,y0,dot_count;
int e;
WORD fudge;
{
    int i=0;
    UWORD bit_position;
    struct BitMap *bm;
    int offset;
    UWORD con0,con1;
    struct AmigaRegs *io;
    ULONG   BltSize;

#ifdef DEBUG
#ifndef DEBUGALL
    if ( (y0 < 0) || (x0 < 0))
#endif
    {
	printf("entering drawvect\n");
	printf("rp=%lx,x0=%ld,y0=%ld,dotcount=%ld,e=%ld\n",
	    rp,x0,y0,dot_count,e);
	printf("CALL DALE\n");
	printf("to continue just hit control d\n");
	Debug();
    }
#endif

    bm = rp->BitMap;
    bit_position = x0 & 15;
    offset = IMulU(y0,bm->BytesPerRow) + (x0>>3);

    con1 = cdi->con1|LINEMODE;
    if (e < 0)  con1 |= SIGNFLAG;
    e = e + e;
    /* not worrying about one dot for now */
    io = &custom;
	
    /* con1 |= rp->linpatcnt<<12; */
	/* bart - 07.01.86 - adjust linpatcnt*/

/*    con1 |=
	(rp->linpatcnt-((cdi->xmajor)?(x0 - rp->cp_x):( (y0 + fudge) - rp->cp_y)))<<12;*/

	i = ((cdi->xmajor)?(x0 - rp->cp_x):(y0 - rp->cp_y)) + fudge;
	if (i < 0)
		i = -i;
	con1 |= ((rp->linpatcnt - i) << 12);	/* spence - Dec  5 1990 */

    dot_count++;
    BltSize = (dot_count<<6)|2;     /* truncate this vector */
    con0 = DEST|SRCA|SRCC|(bit_position<<12);

    OwnBlitter();
    waitblitdone();

    io->bltmdb = (cdi->absdy<<1)<<1;        /* inc 2 */
    io->bltmda = ((cdi->absdy-cdi->absdx)<<1)<<1; /*inc1;*/
    io->fwmask = -1;
    io->lwmask = -1;
    io->adata = 0x8000;
    io->bltmdc = bm->BytesPerRow;

    /* not worrying about first dot */

    for(i = 0;i < bm->Depth; i++)
    {
		ULONG local_BltSize = BltSize;
		if ( (rp->Mask>>i) & 1)
		{
			waitblitdone();
			io->bltcon0 = con0|rp->minterms[i];
			io->bltcon1 = con1;
			io->bltpta = (UBYTE *)e;
			io->bltptc = bm->Planes[i] + offset;
			io->bltptd = bm->Planes[i] + offset;
			io->bdata = rp->LinePtrn;
			while (local_BltSize > 0x10002)
			{
				io->bltsize = 2;
				local_BltSize -= 0x10000;
				waitblitdone();
			}
			if(local_BltSize >= 0x42)
			{
			    io->bltsize = local_BltSize;
			}
			/* else exact multiple of 1024 -- bart */
		}
    }
    DisownBlitter();
}
@


39.1
log
@regargs.
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 39.0 91/08/21 17:17:32 chrisg Exp Locker: chrisg $
d21 1
a21 1
__regargs draw_vect(rp,cdi,x0,y0,dot_count,e,fudge)
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 37.3 91/05/20 11:09:55 chrisg Exp Locker: chrisg $
d21 1
a21 1
draw_vect(rp,cdi,x0,y0,dot_count,e,fudge)
@


37.3
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 1.1 91/05/20 10:40:36 chrisg Exp $
@


37.2
log
@ changed </sane_names> to "sane_names" for lattice
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 37.1 91/05/02 12:53:14 chrisg Exp Locker: chrisg $
d13 1
@


37.1
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 37.0 91/01/07 15:19:11 spence Exp Locker: chrisg $
d12 1
a12 1
#include </sane_names.h>
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 36.8 90/12/07 15:42:50 spence Exp Locker: spence $
d12 1
a12 1
#include <../sane_names.h>
@


36.8
log
@patterned line now drawn properly through cliprects by using fudge
value in x as well as y direction. Correctly handles lines drawn in
the reverse direction.
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 36.7 90/09/20 11:01:03 bart Exp Locker: spence $
@


36.7
log
@fix length one lines
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 36.6 90/09/13 13:51:44 bart Exp Locker: bart $
d25 1
a25 1
BYTE fudge;
d27 1
a27 1
    int i;
d62 7
a68 2
    con1 |=
	(rp->linpatcnt-((cdi->xmajor)?(x0 - rp->cp_x):( (y0 + fudge) - rp->cp_y)))<<12;
@


36.6
log
@prevent runaways on exact multiples of 1024 in drawvect -- bart
@
text
@d3 1
a3 1
*	$Id: drawvect.c,v 36.5 90/07/27 16:56:43 bart Exp Locker: bart $
d99 1
a99 1
			if(local_BltSize >= 0x82)
@


36.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
d99 5
a103 1
			io->bltsize = local_BltSize;
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/drawvect.c,v 36.3 90/03/13 12:56:14 bart Exp Locker: bart $
@


36.3
log
@local_bltsize
@
text
@d3 1
a3 1
*	$Header: drawvect.c,v 36.2 88/07/23 13:57:10 dale Exp $
@


36.2
log
@checkin before merging monitorspec
@
text
@d3 1
a3 1
*	$Header: drawvect.c,v 36.1 88/03/10 16:11:28 dale Exp $
a57 1

d78 1
d80 1
d83 18
a100 17
	if ( (rp->Mask>>i) & 1)
	{
	    waitblitdone();
	    io->bltcon0 = con0|rp->minterms[i];
	    io->bltcon1 = con1;
	    io->bltpta = (UBYTE *)e;
	    io->bltptc = bm->Planes[i] + offset;
	    io->bltptd = bm->Planes[i] + offset;
	    io->bdata = rp->LinePtrn;
	    while (BltSize > 0x10002)
	    {
		io->bltsize = 2;
		BltSize -= 0x10000;
		waitblitdone();
	    }
	    io->bltsize = BltSize;
	}
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d33 1
a33 1
    UWORD   BltSize;
d91 6
@
