head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.3 V36_208:36.3 V36_207:36.3 V36_205:36.3 V36_203:36.3 V36_202:36.3 V36_201:36.3 V36_200:36.3 V36_199:36.3 V36_198:36.3 V36_196:36.3 V36_195:36.3 V36_194:36.3 V36_193:36.3 V36_192:36.3 V36_191:36.3 V36_190:36.3 V36_189:36.3 V36_188:36.3 V36_186:36.3 V36_185:36.3 V36_184:36.3 V36_182:36.3 V36_181:36.3;
locks    ; strict;
comment  @ * @;


39.2
date     92.10.07.13.50.45;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.05.12.11.47;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.18.05;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.20.11.10.36;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.23;  author spence;  state Exp;
branches ;
next     36.3;

36.3
date     90.07.27.16.57.08;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.28.09.10.32;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.35;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@compiler warnings.
@
text
@/******************************************************************************
*
*	$Id: ffill2.c,v 39.1 92/05/05 12:11:47 chrisg Exp Locker: chrisg $
*
******************************************************************************/

/* ffill.c -- flood fill using dumb pixel retd routines
 *
 *
 */

#include <exec/types.h>
#include <graphics/gfx.h>
#include <graphics/rastport.h>

#include "ffill.h"
#include "c.protos"

/*#define DEBUG*/
/*#define BLOCKDEBUG*/

#define NEWCODE
#define NEWCODE2
#define  FFBUG

#define DOWNCODE

#ifndef DOWNCODE
USHORT  *address(bm,x,y)
struct BitMap *bm;
{
    return((USHORT *)(bm->Planes[0] +
	 umuls(bm->BytesPerRow,y) + 
	( (x>>3) & 0xFFFE)));
}
#endif

static __regargs EXTREM(struct flood_info *fi, SHORT x, SHORT y, SHORT *left, SHORT *right);
static __regargs EXPLOR(struct flood_info *fi, SHORT x1, SHORT x2, SHORT YCHECK, SHORT direction );

/*********************************************************************/
/* SEARCHCOLOR is used to determine boundaries of a region */

__regargs fillfast_region(struct RastPort *rp, struct RastPort *destrp,  SHORT x, SHORT ty )        /* FILL REGION WITH COLOR */
{
    SHORT left, right, y, direction;
    SHORT WORKY, nuleft, nuright;
    struct flood_info flood_info,*fi;
    int error = FALSE;

#ifdef DEBUG
    printf("fill_region(%lx,%ld,%ld)\n",rp,x,ty);
#endif

    y = ty;

    /*  abort if starting at SEARCHCOLOR */
    if( READPIXEL(rp, x, y ) == SEARCHCOLOR ) return(TRUE);

    /* initialize flood info structure */
    fi = &flood_info;

    init_fi(fi,rp);

/*  scan current line, and save limits. */
    EXTREM(fi, x, y, &left, &right);
    if (!(PUSH( fi, left, right, y,  1 ))) error = TRUE;

/*  scan above   line, and save limits. */
    x = left;        /* bart - added this line 08.05.85 */
    y -= 1;
    if (y >=  fi->MinY)
    {
	/* line is on screen. find new limits. */
	if (EXTREM(fi, x, y, &nuleft, &nuright))
	{
#ifdef DEBUG
     printf("scan of above line-> left=%ld,right=%ld\n",nuleft,nuright);
#endif

	    if ( (nuleft <= right)&&(nuright >= left))
	    {
		/* bart - 08.05.85 - modified the following line for bugfix */
		/* if ( (x <= nuright) && (x >= nuleft) ) */
		if (!(PUSH( fi, nuleft, nuright, y, -1 ))) error = TRUE;
		if ( (nuleft < left) || (nuright > right) )
		  if (!(PUSH( fi, nuleft, nuright,y, 1))) error = TRUE;

		/* bart - bugfix 08.29.85 */
		/* check if this newright does not extend all the way right */
		/* to previous right: there may be other connecting paths */
		/* in this direction */

		if( nuright < right)
		{
		   /* bart - 04.07.86 removed following line - handled above */
		   /* if (!(EXPLOR(fi, nuright, right, y, 1))) error = TRUE; */
		   /* bart - 04.07.86 still need the next line */
		   /* bart - 06.23.86 adjust right limit */
		   /* if (!(EXPLOR(fi, nuright, right+1, y, -1))) error = TRUE; */

		   /* bart - 07.22.86 adjust nuright limit */
		   if (!(EXPLOR(fi, nuright+1, right+1, y, -1))) error = TRUE;
		   /* bart - 07.22.86 restored following line - not handled above */
		   if (!(EXPLOR(fi, nuright+1, right+1, y, 1))) error = TRUE;
		}

		/* check if this newleft does not extend all the way left */
		/* to previous left: there may be other connecting paths */
		/* in this direction */

		if( nuleft > left)
		{
		   /* bart - 04.07.86 removed following line - handled above */
		   /* if (!(EXPLOR(fi, left, nuleft, y, 1))) error = TRUE; */
		   /* bart - 04.07.86 still need the next line */
		   if (!(EXPLOR(fi, left, nuleft, y, -1))) error = TRUE;
		}
		/* end bart - 08.29.85 */

	    }


	}

    }

  while( fi->top )
  {
/* get and draw the next line */
    POP( fi, &left, &right, &y, &direction );
	MOVE(rp, left, y );
	DRAW(rp, right, y );
#ifdef DEBUG
	printf("Line from %ld to %ld row=%ld\n",left,right,y);
#endif
    if (rp != destrp)
    {
	MOVE(destrp, left, y );
	DRAW(destrp, right, y );
    }
/* wait after line is drawn */

/* scan next line if it is on-screen. */
    WORKY = y + direction;
    if( (WORKY >= YMIN)  &&  (WORKY <= YMAX) )
    {

/* line is on screen. find new limits. */
	if (EXTREM(fi, left, WORKY, &nuleft, &nuright ))

/*   break if left and right margins cross,
   or if the working line is already filled. */

	if( (nuleft <= right)  &&  (READPIXEL(rp, nuleft, WORKY ) != FILLCOLOR))
	{

/* bart - bugfix 08.29.85 */
	    /* check if this newright does not extend all the way right */
	    /* to previous right: there may be other connecting paths */
	    /* in this direction */

	    if( nuright < right)
	       /* EXPLOR(fi, nuright, right, WORKY, -direction ); */

	       /* bart - 09.30.85 */
	       {
		   		/* bart - 04.07.86 removed following line - handled above */
		   		/* if (!(EXPLOR(fi, nuright, right+1, WORKY, -direction )))
		     		error = TRUE; */

		   		/* bart - 04.07.86 still need the next line */
		   		/* bart - 04.08.86 little bugfix? - replace next line */
		   		/* if (!(EXPLOR(fi, nuright+1, right+1, WORKY, direction )))
		     		error = TRUE; */
		   		/* bart - 06.23.86 limits for EXPLOR? - add one to right */
		   		/* if (!(EXPLOR(fi, nuright, right+1, WORKY, direction )))
		     		error = TRUE; */

		   		/* bart - 07.22.86 limits for EXPLOR? - add one to nuright */
		   		if (!(EXPLOR(fi, nuright+1, right+1, WORKY, direction )))
		     		error = TRUE;
		   		/* bart - 07.22.86 */
				/* restored following line - not handled above after all */
		   		if (!(EXPLOR(fi, nuright+1, right+1, WORKY, -direction )))
		     		error = TRUE;

	       }
	       /* end bart - 09.30.85 */

	    /* check if this newleft does not extend all the way left */
	    /* to previous left: there may be other connecting paths */
	    /* in this direction */

		/* bart - 07.22.86 changed -direction to +direction */
	    if( nuleft > left)
	       if (!(EXPLOR(fi, left, nuleft, WORKY, direction )))
		 error = TRUE;

/* end bart - 08.29.85 */

/*  explore for ever widening horizons */

	    if( nuleft < --left)
	       if (!(EXPLOR(fi, nuleft, left, y, -direction )))
		 error = TRUE;

	    if( nuright > ++right)
	       if (!(EXPLOR(fi, right, nuright+1, y, -direction )))
		 error = TRUE;
	       /* if (!(EXPLOR(fi, right, nuright, y, -direction )))
		 error = TRUE; */ /* bart - 05.09.86 bugfix */

	    if(!(PUSH( fi, nuleft, nuright, WORKY, direction ))) error = TRUE;

/* bart - 04.07.86 removed following chunk... unnecessary ? */
/* bart - 07.22.86 restored following chunk... it WAS necessary! */

		/* bart - bugfix 08.29.85 */
	    if ( (nuleft < left) || (nuright > right) )
	      if (!(PUSH( fi, nuleft, nuright, WORKY, -direction))) error = TRUE;
		/* end bart - 08.29.85 */

	}   /* end while margins not crossed AND scan line is NOT filled */

    }       /* end while working line is on screen */

  }         /* end while stack not resolved */

    /* bart - 10.09.85 removed to make way for blocklist cleanup code */
    /* free off the unused freelist nodes */
    /*
    while ( p = fi->freelist)
    {
	fi->freelist = p->Next;
	FreeMem(p,sizeof(struct stacknode));
    }
    */

    /* bart - 10.09.85 blocklist cleanup code */

#ifdef BLOCKDEBUG
    printf("fill_region: about to call CLEANUP\n");
    Debug();
#endif

    CLEANUP(fi);

    if (error) return(FALSE);
    else return(TRUE);
    
}           /* end fill_region  */

/*********************************************************************/
static __regargs EXPLOR(fi, x1, x2, YCHECK, direction ) /* scan left to right */
register struct flood_info *fi;
SHORT x1, x2, YCHECK, direction;
{
    SHORT x, left, right;
    register USHORT data,mask,*p;

#ifdef DEBUG
    printf("EXPLOR : L %ld, R %ld, Y %ld, DIR %ld",x1, x2, YCHECK, direction );
#endif

    p = (SHORT *)address(fi->bm,x1,YCHECK);
    mask = 0x8000 >> (x1 & 15);
    data = *p;

    for( x=x1; x<x2; x++ )
    {
	if ( (data & mask) == 0)
	{
	    EXTREM(fi, x, YCHECK, &left, &right );
	    if (!(PUSH( fi, left, right, YCHECK, direction ))) return(FALSE);
	    x = right + 1;
	    p = (SHORT *)address(fi->bm,x,YCHECK);
	    mask = 0x8000 >> (x & 15);
	    data = *p;
	}
	mask >>= 1;
	if (mask == 0)
	{
	    mask = 0x8000;
	    while ( (~(data = *++p)) == 0)
	    {
		x += 16;
		if (x >= x2) break;
	    }
	}
    }
    return(TRUE);
}

/*********************************************************************/
static __regargs EXTREM(fi, x, y, left, right)        /* find left and right margins */
struct flood_info *fi;
SHORT y, *left, *right;
register SHORT x;
{
    register USHORT *p,mask,data;
    SHORT ctr=XMAX;

#ifdef DEBUG
    printf("(%lx,%lx,%ld,%ld)",rp,rp->BitMap->Planes[0],x,y);
#endif
    p = (SHORT *)address(fi->bm,x,y);
    mask = 0x8000 >> (x & 15);
    data = *p;
#ifdef DEBUG
    printf("x=%lx,p = %lx,mask=%lx,data=%lx",x,p,mask,data);
#endif

    if (data & mask)	/* if starting on outline */
	while (data & mask)	/* find the left margin,search rightward */
	{
	    if (x > XMAX) return(FALSE);	/* could not find a left margin */
	    x++;
	    ctr = x;
	    mask >>= 1;
	    if (mask == 0)
	    {
		while ( (~(data = *++p)) == 0)	/* look 16 bits at a time */
		{
		    x += 16;
		    if ( x >= XMAX)
		    {
			x -= 16;
			ctr = x;
			mask = 0x8000; /* bart - 09.18.85 */
			break;
		    }
		}
		ctr = x;
		mask = 0x8000;
	    }
	}
    else
	while ( (data & mask) == 0)
	{
	    ctr = x;
	    if ( x == XMIN) break;
	    --x;
	    mask <<= 1;
	    if (mask == 0)
	    {
		while ( (data = *--p) == 0)
		{
		    x -= 16;
		    if (x <= XMIN) /* bart - 09.18.85 */
		    {
			x += 16;
			mask = 1; /* bart - 09.18.85 */
			break;
		    }
		    /* ctr = x; */ /* bart - 09.18.85 */
		    ctr -= 16;
		}
		mask = 1;
	    }
	}
    *left = x = ctr;                /* starting from the left margin,    */
    p = (SHORT *)address(fi->bm,x,y);
    mask = 0x8000 >> (x & 15);
    data = *p;
    do
    {
	ctr = x;
	if (x == XMAX)  break;
	x++;
	mask >>= 1;
	if (mask == 0)
	{
	    while ( (data = *++p) == 0)
	    {
		x += 16;
		if ( x >= XMAX )
		{
		    x -= 16;
		    break;
		}
		ctr = x-1;
	    }
	    mask = 0x8000;
	}
    }   while ( (data & mask) == 0);
    *right = ctr;
#ifdef DEBUG
    printf("\nEXTREM : L %ld, R %ld, Y %ld", *left, *right, y );
#endif
	return(TRUE);
}

@


39.1
log
@regargs.
@
text
@d3 1
a3 1
*	$Id: ffill2.c,v 39.0 91/08/21 17:18:05 chrisg Exp Locker: chrisg $
d47 1
a47 2
    SHORT WORKY, nuleft, nuright, temp;
    SHORT i, j;
a48 1
    struct stacknode *p;
a212 11

/* bart - 04.07.86 removed following chunk... unnecessary ? */
#ifdef UNDEFINED

/*  explore for ever narrowing horizons */
	    temp = --right - 1;

	    if( nuright < temp)
	       if (!(EXPLOR(fi, nuright+2, right, WORKY, direction )))
		 error = TRUE;
#endif
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: ffill2.c,v 37.1 91/05/20 11:10:36 chrisg Exp Locker: chrisg $
d38 3
d44 1
a44 3
fillfast_region(rp, destrp,  x, ty )        /* FILL REGION WITH COLOR */
register struct RastPort *rp,*destrp;
SHORT x, ty;
d268 1
a268 1
static EXPLOR(fi, x1, x2, YCHECK, direction ) /* scan left to right */
d309 1
a309 1
static EXTREM(fi, x, y, left, right)        /* find left and right margins */
@


37.1
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: ffill2.c,v 1.1 91/05/20 10:40:56 chrisg Exp $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: ffill2.c,v 36.3 90/07/27 16:57:08 bart Exp Locker: spence $
d17 2
@


36.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/ffill2.c,v 36.1 88/03/10 16:11:35 dale Exp Locker: bart $
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
@
