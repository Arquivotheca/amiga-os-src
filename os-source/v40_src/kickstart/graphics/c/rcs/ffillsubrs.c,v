head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.3 V36_208:36.3 V36_207:36.3 V36_205:36.3 V36_203:36.3 V36_202:36.3 V36_201:36.3 V36_200:36.3 V36_199:36.3 V36_198:36.3 V36_196:36.3 V36_195:36.3 V36_194:36.3 V36_193:36.3 V36_192:36.3 V36_191:36.3 V36_190:36.3 V36_189:36.3 V36_188:36.3 V36_186:36.3 V36_185:36.3 V36_184:36.3 V36_182:36.3 V36_181:36.3;
locks    ; strict;
comment  @ * @;


39.2
date     92.10.07.13.55.22;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.02.20.13.47.38;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.18.19;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.20.11.10.52;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.28;  author spence;  state Exp;
branches ;
next     36.3;

36.3
date     90.07.27.16.57.18;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.28.09.10.37;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.37;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@compiler warnings.
@
text
@/******************************************************************************
*
*	$Id: ffillsubrs.c,v 39.1 92/02/20 13:47:38 chrisg Exp Locker: chrisg $
*
******************************************************************************/

/* ffillsubrs.c -- flood fill using dumb pixel read routines
 *
 *
 */

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include "/gfx.h"
#include "/macros.h"

#include "ffill.h"
#include "c.protos"

/*********************************************************************/
#ifndef MAKE_PROTOS
PUSH( fi, p1, p2, p3, p4 )          /* push onto point stack */
register struct flood_info *fi;
SHORT p1, p2, p3, p4;
{
    register struct stacknode *p;
    if ((p = fi->freelist) == 0)
    {   /* need to get some stack space */

                /* bart - 10.09.85 replaced with block allocation code */
		/*
		if ((p = (struct stacknode *)AllocMem(sizeof(struct stacknode),MEMF_PUBLIC)) == 0)
		{
#ifdef MEMDEBUG
	    	printf("memory flood fill\n");
#endif
			return (FALSE);
		}
		*/


		/* bart - 10.09.85 buy in bulk and save */
		{
		    struct stackblock *b;

		    if ((b = (struct stackblock *)
		       AllocMem(sizeof(struct stackblock),MEMF_PUBLIC)) == 0)
		    {
#ifdef MEMDEBUG
		    printf("push: can't allocate stackblock\n");
#endif
			    return (FALSE);
		    }
		    else
		    {
			int i;

			/* link into floodinfo */
			b->Next = fi->blocklist;
			fi->blocklist = b;

			/* use the first stacknode */
			p = &(b->nodes[0]);

			/* put the other nodes on the freelist */
                        for (i=1; i < STKBLKNUM; i++)
			{
			    (b->nodes[i]).Next = fi->freelist;
			    fi->freelist = &(b->nodes[i]);
			}
		    }
		}
    }
    else fi->freelist = p->Next;    /* remove from freelist */

    p->Next = fi->top;
    fi->top = p;

    /* bart - 10.09.85 removed to make way for packing code */
    /*
    p->p1 = p1;
    p->p2 = p2;
    p->p3 = p3;
    p->p4 = p4;
    */
    
    /* bart - 10.09.85 pack ulong p1234 from shorts p1,p2,p3,p4 */
    /* three ten bit values and one one bit flag value */
    /* bit 31 - sign bit: 1 if direction is -1 , 0 if direction is 1 */
    /* bits 20-29: p3 */
    /* bits 10-19: p2 */
    /* bits 00-09: p1 */

    p->p1234 = ( (ULONG)(p1 & 0x3ff) |
	      (ULONG)(p2 & 0x3ff)<<10 |
	      (ULONG)(p3 & 0x3ff)<<20 |
	      (ULONG)((p4 < 0)?1<<31:0) );

#ifdef DEBUG
    printf( "Push %lx:",p);
#endif
#ifdef BDEBUG
    printf( "\nPush %lx: L %ld, R %ld, Y %ld, DIR %ld",
    p,p1,p2,p3,p4 );
#endif

    return(TRUE);
}

void POP( struct flood_info *fi, SHORT *p1, SHORT *p2, SHORT *p3, SHORT *p4 )	/* get from stack */
{
    register struct stacknode *p;
    p = fi->top;
#ifdef DEBUG
    printf("POP %lx:",p);
#endif

    /* bart - 10.09.85 removed to make way for unpacking code */
    /*
    *p1 = p->p1;
    *p2 = p->p2;
    *p3 = p->p3;
    *p4 = p->p4;
    */
    
    /* bart - 10.09.85 unpack from ulong p1234 to shorts p1,p2,p3,p4 */
    /* three ten bit values and one one bit flag value */
    /* bit 31 - sign bit: 1 if direction is -1 , 0 if direction is 1 */
    /* bits 20-29: p3 */
    /* bits 10-19: p2 */
    /* bits 00-09: p1 */

    *p1 = (((p->p1234)) & 0x3ff);
    *p2 = (((p->p1234)>>10) & 0x3ff);
    *p3 = (((p->p1234)>>20) & 0x3ff);
    *p4 = (((p->p1234)>>31) & 0x1)?-1:1;

    fi->top = p->Next;
    p->Next = fi->freelist;
    fi->freelist = p;
}

void CLEANUP( struct flood_info *fi )          /* deallocate stackblocks for this floodinfo */
{
    struct stackblock *b;

    while (b =fi->blocklist)
    {
	fi->blocklist = b->Next;
	FreeMem(b,sizeof(struct stackblock));
    }
}

#endif // MAKE_PROTOS
@


39.1
log
@made use exec pragmas.
@
text
@d3 1
a3 1
*	$Id: ffillsubrs.c,v 39.0 91/08/21 17:18:19 chrisg Exp Locker: chrisg $
d112 1
a112 3
POP( fi, p1, p2, p3, p4 )               /* get from stack */
register struct flood_info *fi;
SHORT *p1, *p2, *p3, *p4;
d145 1
a145 2
CLEANUP( fi )          /* deallocate stackblocks for this floodinfo */
register struct flood_info *fi;
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: ffillsubrs.c,v 37.1 91/05/20 11:10:52 chrisg Exp Locker: chrisg $
d16 2
a17 1
#include <graphics/gfx.h>
@


37.1
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: ffillsubrs.c,v 1.1 91/05/20 10:41:05 chrisg Exp $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: ffillsubrs.c,v 36.3 90/07/27 16:57:18 bart Exp Locker: spence $
d16 1
d19 1
d22 1
d157 2
@


36.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/ffillsubrs.c,v 36.1 88/03/10 16:11:37 dale Exp Locker: bart $
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
@
