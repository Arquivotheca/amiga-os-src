head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.7 V36_208:36.7 V36_207:36.7 V36_205:36.7 V36_203:36.7 V36_202:36.7 V36_201:36.7 V36_200:36.7 V36_199:36.7 V36_198:36.7 V36_196:36.7 V36_195:36.7 V36_194:36.7 V36_193:36.7 V36_192:36.7 V36_191:36.7 V36_190:36.7 V36_189:36.7 V36_188:36.7 V36_186:36.7 V36_185:36.7 V36_184:36.7 V36_182:36.7 V36_181:36.7;
locks    ; strict;
comment  @*   @;


39.2
date     93.03.19.11.54.53;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.07.15.55.26;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.20.34;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.06.14.11.09.13;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.20.11.17.39;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.14.12.42.41;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.20.13;  author spence;  state Exp;
branches ;
next     36.7;

36.7
date     90.07.27.16.58.59;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     90.05.27.12.57.23;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.28.09.13.40;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.11.21.10.56.35;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.21.11.42.34;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.21.11.35.53;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.21.11.20.22;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.08.21.10.52.30;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@Use regargs to remove the asm stub
@
text
@/******************************************************************************
*
*       $Id: modeid.c,v 39.1 92/01/07 15:55:26 spence Exp Locker: spence $
*
******************************************************************************/

#include <exec/types.h>
#include <exec/memory.h>
#include <utility/tagitem.h>
#include <graphics/view.h>
#include <graphics/videocontrol.h>
#include <graphics/displayinfo.h>
#include "/d/d.protos"
#include "c.protos"

struct TagItem template[] =
{
    { VTAG_NORMAL_DISP_GET, NULL }, 
    { VTAG_VPMODEID_GET, NULL }, 
    { VTAG_END_CM, NULL }             
};

ULONG __asm GetVPModeID(register __a0 struct ViewPort *vp)
{
    struct TagItem commands[ (sizeof( template )/ sizeof( struct TagItem )) ];
    ULONG modeID = INVALID_ID;
    struct QueryHeader query;
    int i;

    for( i = 0; i < (sizeof( template )/ sizeof( struct TagItem )); i++ )
    {
		*(commands+i) = *(template+i);
    }

    if(!(videocontrol( vp->ColorMap, commands )))
    {
	    if((modeID = commands[1].ti_Data) == INVALID_ID)
		{
			DisplayInfoHandle handle = (DisplayInfoHandle)commands[0].ti_Data;
	
			if(GetDisplayInfoData(handle,(UBYTE *) &query,sizeof(query),DTAG_DISP,modeID))
			{
				modeID = query.DisplayID; /* determine modeID */
			}
		}
    }

    return( modeID );
}

ULONG __asm ModeNotAvailable(register __d0 ULONG modeID)
{
    struct DisplayInfo dinfo;

    if ( ((ULONG)GetDisplayInfoData(NULL,(UBYTE *) &dinfo,sizeof(dinfo),DTAG_DISP,modeID)) >
       ( (ULONG) (&((struct DisplayInfo *)0)->PropertyFlags) )  )

	    return((ULONG) dinfo.NotAvailable); /* determine availability */
	else
	    return( INVALID_ID );
}
@


39.1
log
@cook_chunk -> GetDisplayInfoData etc.
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 39.0 91/08/21 17:20:34 chrisg Exp Locker: spence $
d23 1
a23 1
ULONG getvpmodeid( struct ViewPort *vp)
d51 1
a51 1
ULONG modenotavailable(ULONG modeID)
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 37.3 91/06/14 11:09:13 chrisg Exp Locker: chrisg $
d41 1
a41 1
			if(cook_chunk(handle,(UBYTE *) &query,sizeof(query),DTAG_DISP,modeID))
d55 1
a55 1
    if ( ((ULONG)cook_chunk(NULL,(UBYTE *) &dinfo,sizeof(dinfo),DTAG_DISP,modeID)) >
@


37.3
log
@reduced compiler warnings.
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 37.2 91/05/20 11:17:39 chrisg Exp Locker: chrisg $
@


37.2
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 1.1 91/05/20 10:42:23 chrisg Exp $
d41 1
a41 1
			if(cook_chunk(handle,&query,sizeof(query),DTAG_DISP,modeID))
d55 1
a55 1
    if ( ((ULONG)cook_chunk(NULL,&dinfo,sizeof(dinfo),DTAG_DISP,modeID)) >
d58 1
a58 1
	    return(dinfo.NotAvailable); /* determine availability */
@


37.1
log
@uses d.protos
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 37.0 91/01/07 15:20:13 spence Exp Locker: spence $
d14 1
d23 1
a23 2
ULONG  getvpmodeid( vp )
struct ViewPort *vp;
d51 1
a51 2
ULONG modenotavailable( modeID )
ULONG modeID;
a53 1
    ULONG  error = INVALID_ID; 
a56 3
    {
		error = dinfo.NotAvailable ; /* determine availability */
    }
d58 3
a60 1
    return( error );
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*       $Id: modeid.c,v 36.7 90/07/27 16:58:59 bart Exp Locker: spence $
d13 1
d57 1
a57 1
    if ( cook_chunk(NULL,&dinfo,sizeof(dinfo),DTAG_DISP,modeID) >
@


36.7
log
@id
@
text
@d3 1
a3 1
*       $Id: $
@


36.6
log
@cm->vpmodeid processing
@
text
@d3 1
a3 1
*       $Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/modeid.c,v 36.5 90/03/28 09:13:40 bart Exp Locker: bart $
@


36.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/modeid.c,v 36.4 89/11/21 10:56:35 bart Exp Locker: bart $
d17 1
d31 1
a31 1
	*(commands+i) = *(template+i);
d36 3
a38 1
	DisplayInfoHandle handle = (DisplayInfoHandle)commands[0].ti_Data;
d40 5
a44 4
	if(cook_chunk(handle,&query,sizeof(query),DTAG_DISP,modeID))
	{
	    modeID = query.DisplayID; /* determine modeID */
	}
d59 1
a59 1
	error = dinfo.NotAvailable ; /* determine availability */
@


36.4
log
@utility/tagitem
@
text
@d3 1
a3 1
*       $Header: modeid.c,v 36.3 89/08/21 11:42:34 bart Exp $
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: modeid.c,v 36.2 89/08/21 11:35:53 bart Exp $
d9 2
a12 2
#include <intuition/intuition.h>
#include <intuition/tagitem.h>
@


36.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: modeid.c,v 36.1 89/08/21 11:20:22 bart Exp $
d50 1
a50 1
    ULONG  error = ~FALSE; 
d52 1
a52 1
    if ( cood_chunk(NULL,&dinfo,sizeof(dinfo),DTAG_DISP,modeID) >
@


36.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: modeid.c,v 36.0 89/08/21 10:52:30 bart Exp $
d37 1
a37 1
	if(cood_chunk(handle,&query,sizeof(query),DTAG_DISP,modeID))
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*       $Header:  $
a13 36
/***** graphics.library/GetVPModeID ********************************************
*
*   NAME
*	GetVPModeID -- get the 32 bit DisplayID from a ViewPort.
*
*   SYNOPSIS
*	modeID =  GetVPModeID( vp )
*	d0		       a0
*
*	struct ViewPort *vp;
*	ULONG	modeID;
*
*   FUNCTION
*	returns the normal display modeID, if one is currently  associated 
*	with this ViewPort.
*
*   INPUTS
*	vp -- pointer to a ViewPort structure.
*
*   RESULT
*	
*	modeID -- a 32 bit DisplayInfoRecord identifier associated with 
*		  this ViewPort, or INVAILD_ID.
*
*   NOTE
*	test the return value of this function against INVALID_ID, not NULL.
*	(INVALID_ID is defined in graphics/displayinfo.h).
*
*   BUGS
*
*   SEE ALSO
*	graphics/displayinfo.h, ModeNotAvailable()
*
*******************************************************************************/


d20 1
a20 1
ULONG  GetVPModeID( vp )
d46 1
a46 35
/***** graphics.library/ModeNotAvailable ***************************************
*
*   NAME
*	ModeNotAvailable -- check to see if a DisplayID isn't available.
*
*   SYNOPSIS
*	error =  ModeNotAvailable( modeID )
*	d0		           d0
*
*	ULONG	modeID;
*	ULONG	error;
*
*   FUNCTION
*	returns an error code, indicating why this modeID is not available, 
*	or NULL if there is no reason known why this mode should not be there.
*
*   INPUTS
*	modeID -- a 32 bit DisplayInfoRecord identifier.
*
*   RESULT
*	error -- a general indication of why this modeID is not available,
*		 or NULL if there is no reason why it shouldn't be available.
*
*   NOTE
*	ULONG return values from this function are a proper superset of the
*	DisplayInfo.NotAvailable field (defined in graphics/displayinfo.h).
*
*   BUGS
*
*   SEE ALSO
*	graphics/displayinfo.h, GetVPModeID()
*
*******************************************************************************/

ULONG ModeNotAvailable( modeID )
@
