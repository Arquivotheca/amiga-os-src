head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.13 V36_208:36.13 V36_207:36.13 V36_205:36.13 V36_203:36.13 V36_202:36.13 V36_201:36.13 V36_200:36.12 V36_199:36.12 V36_198:36.12 V36_196:36.12 V36_195:36.12 V36_194:36.12 V36_193:36.12 V36_192:36.12 V36_191:36.12 V36_190:36.12 V36_189:36.12 V36_188:36.11 V36_186:36.11 V36_185:36.11 V36_184:36.11 V36_182:36.11 V36_181:36.11;
locks    ; strict;
comment  @ * @;


39.1
date     91.11.04.15.40.52;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.16.51;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.20.11.09.41;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.08;  author spence;  state Exp;
branches ;
next     36.13;

36.13
date     90.12.03.16.49.07;  author bart;  state Exp;
branches ;
next     36.12;

36.12
date     90.10.10.11.33.49;  author bart;  state Exp;
branches ;
next     36.11;

36.11
date     90.07.27.16.56.16;  author bart;  state Exp;
branches ;
next     36.10;

36.10
date     90.05.31.12.23.33;  author bart;  state Exp;
branches ;
next     36.9;

36.9
date     90.05.31.12.02.31;  author bart;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.31.11.35.40;  author bart;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.24.07.20.32;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     90.05.24.06.56.29;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.05.23.16.02.16;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.28.09.11.35;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.09.01.16.48.18;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.09.01.16.17.18;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.26;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@obsoleted file. cliprect osrting is handled by layers. The one rectXrect
routine has been downcoded in misc.asm
@
text
@/******************************************************************************
*
*	$Id: crsort.c,v 39.0 91/08/21 17:16:51 chrisg Exp Locker: chrisg $
*
******************************************************************************/

	THIS FILE IS OBSOLETE
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: crsort.c,v 37.1 91/05/20 11:09:41 chrisg Exp Locker: chrisg $
d7 1
a7 139
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include "c.protos"

/*#define DEBUG*/

int rectXrect(l,cr)
struct Rectangle *l,*cr;
{
#ifdef DEBUGRECT
    printf("rectXrect(%lx,%lx)\n",l,cr);
#endif
    if ( (cr->MaxX < l->MinX) ||
	 (cr->MinX > l->MaxX) ||
	 (cr->MaxY < l->MinY) ||
	 (cr->MinY > l->MaxY) ) return(FALSE);
    else return(TRUE);
}

#define DOWNCODE

#ifndef DOWNCODE

/* this is special rom code, a writer for cliprects */

cr_sort(cw,dx,dy)
struct Layer *cw;
short dx,dy;
{
    struct ClipRect *listhead;
    struct ClipRect *cr,*crnext;

#ifdef DEBUG
    printf("<");
#endif
    listhead = 0;

    /* put in back links */
    cr = cw->ClipRect;
	if (cr == 0)	return;
    cr->prev = 0;
    while (cr->Next)
    {
	cr->Next->prev = cr;
	cr = cr->Next;
    }

    /* final sort */
    while(cr)
    {
	crnext = cr->prev;
	addsortcr(&listhead,cr,dx,dy);
	cr = crnext;
    }
    cw->ClipRect = listhead;

#ifdef DEBUG
    printf(">");
#endif
}

addsortcr(listhead,cr,dx,dy)
struct ClipRect **listhead,*cr;
short dx,dy;
{
    struct ClipRect *e,*pre;

    pre = listhead;
    for (e = *listhead; e ;e = e->Next)
    {
	if ( prior(cr,e,dx,dy) )
	{
	    /* insert cr before e */
	    cr->Next = e;
	    pre->Next = cr;
	    return;
	}
	pre = e;
    }
    appendcr(listhead,cr);
}

appendcr(listhead,cr)
struct ClipRect **listhead;
struct ClipRect *cr;
{
    struct ClipRect *p;
    cr->Next = 0;
    if ( (p = *listhead) == 0) *listhead = cr;
    else
    {
	while(p->Next)  p = p->Next;
	p->Next = cr;
    }
}

#ifdef UNDEFINED
/* this old routine did not catch circular dependancies */
lessthan(a,b,dx,dy)
struct ClipRect *a,*b;
short dx,dy;
{
    if ((a->bounds.MinY < b->bounds.MaxY)&&(b->bounds.MinY<a->bounds.MaxY))
	return( IMulS(a->bounds.MinX-b->bounds.MinX,dx) >= 0);
    else
	return( IMulS(a->bounds.MinY-b->bounds.MinY,dy) >= 0);
}
#endif

prior(a,b,dx,dy)
struct ClipRect *a,*b;
short dx,dy;
{
	int prior = FALSE;

	if ((a->bounds.MinY<=b->bounds.MaxY)&&(b->bounds.MinY<=a->bounds.MaxY))
	{
		prior = ( IMulS(a->bounds.MinX-b->bounds.MinX,dx) < 0);
	}
	else
	{
		if ((a->bounds.MinX<=b->bounds.MaxX)&&(b->bounds.MinX<=a->bounds.MaxX))
		{
			prior = ( IMulS(a->bounds.MinY-b->bounds.MinY,dy) < 0);
		}
		else
		{
			prior = ( IMulS(a->bounds.MinY-b->bounds.MinY,dy) < 0 );
		}
	}

	return( prior );
}

#endif
@


37.1
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: crsort.c,v 1.1 91/05/20 10:40:31 chrisg Exp $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: crsort.c,v 36.13 90/12/03 16:49:07 bart Exp Locker: spence $
d13 1
@


36.13
log
@fix one line high/wide cliprect prioritisation bug -- bart
@
text
@d3 1
a3 1
*	$Id: crsort.c,v 36.12 90/10/10 11:33:49 bart Exp Locker: bart $
@


36.12
log
@downcoded _cr_sort
@
text
@d3 1
a3 1
*	$Id: crsort.c,v 36.11 90/07/27 16:56:16 bart Exp Locker: bart $
d125 1
a125 1
	if ((a->bounds.MinY < b->bounds.MaxY)&&(b->bounds.MinY<a->bounds.MaxY))
d131 1
a131 1
		if ((a->bounds.MinX < b->bounds.MaxX)&&(b->bounds.MinX<a->bounds.MaxX))
@


36.11
log
@id
@
text
@d3 1
a3 1
*	$Id: $
d29 4
d144 1
@


36.10
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/crsort.c,v 36.9 90/05/31 12:02:31 bart Exp Locker: bart $
@


36.9
log
@clean up code, back to the future
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/kickstart/working/graphics/c/RCS/crsort.c,v 36.8 90/05/31 11:35:40 bart Exp Locker: bart $
@


36.8
log
@sort truely disjoint cliprects on y by default
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/kickstart/working/graphics/c/RCS/crsort.c,v 36.7 90/05/24 07:20:32 bart Exp Locker: bart $
d133 1
a133 7
			prior = ( ( IMulS(a->bounds.MinX-b->bounds.MinX,dx) < 0)
			&&        ( IMulS(a->bounds.MinY-b->bounds.MinY,dy) < 0) );

			if(!prior) 
			{
				prior = ( IMulS(a->bounds.MinY-b->bounds.MinY,dy) < 0 );
			}
@


36.7
log
@oops
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/crsort.c,v 36.6 90/05/24 06:56:29 bart Exp Locker: bart $
d53 1
a53 1
    /* now starting at end go backwards */
d61 1
d135 5
@


36.6
log
@oops
rerelease 36.157
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/crsort.c,v 36.5 90/05/23 16:02:16 bart Exp Locker: bart $
d113 1
a138 1

@


36.5
log
@disjoint cliprects must compare to remainder of rects
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/crsort.c,v 36.4 90/03/28 09:11:35 bart Exp Locker: bart $
a112 1

d117 1
a117 1
    int subsequent = NULL;
d119 1
a119 7
    if ((a->bounds.MinY < b->bounds.MaxY)&&(b->bounds.MinY<a->bounds.MaxY))
    {
	subsequent = ( IMulS(a->bounds.MinX-b->bounds.MinX,dx) >= 0);
    }
    else
    {
	if ((a->bounds.MinX < b->bounds.MaxX)&&(b->bounds.MinX<a->bounds.MaxX))
d121 1
a121 1
	    subsequent = ( IMulS(a->bounds.MinY-b->bounds.MinY,dy) >= 0);
d125 9
a133 2
		/* disjoint : MUST compare to remainder of cliprects -- bart */
		subsequent = TRUE;
a134 1
    }
d136 1
a136 1
    return(!subsequent);
d138 2
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/crsort.c,v 36.3 89/09/01 16:48:18 bart Exp Locker: bart $
d132 2
a133 1
	    subsequent = ( IMulS(a->bounds.MinX-b->bounds.MinX,dx) >= 0);
@


36.3
log
@oops, dont want to process "forever"... put
listhead processing back but use the improved priority test... bart
@
text
@d3 1
a3 1
*	$Header: crsort.c,v 36.1 88/03/10 16:11:26 dale Exp $
@


36.2
log
@fixed cr_sort algorithm
removed circular dependancies
from lessthan test
and renamed it "prior"
@
text
@a12 2
#include <graphics/rastport.h>
#include "../macros.h"
a15 2
#define XOR 0x50

d30 2
a31 1
cr_sort(cw,dx,dy,rp,TempA)
a33 2
struct RastPort *rp;
struct TmpRas *TempA;
d35 2
a36 1
    struct ClipRect *cr,*crnext,**cre;
d38 5
d44 4
a47 4

    cre = &cw->ClipRect;

    for(cr = *cre; (cr && (cr->prev = cre)); cr = cr->Next)
d49 2
a50 1
	if (cr->Next) cre = *cre;
d54 1
a54 4

    if(!(cr = *cre)) return;

    while(cr != &cw->ClipRect)
d57 1
a57 9

	cr->prev->Next = cr->Next; 
	if(cr->Next) cr->Next->prev = cr->prev; 

	cr->prev = NULL;
	cr->Next = NULL;

	addsortcr(&cw->ClipRect,cr,dx,dy);

d60 4
d70 1
a70 1
    struct ClipRect *e,**pre;
d73 1
a73 1
    for (e = *pre; e ; e = e->Next, pre = *pre)
d79 1
a79 3
	    e->prev = cr;
	    *pre = cr;
	    cr->prev = (struct ClipRect *)pre;
d82 1
d93 1
a93 5
    if ( (p = *listhead) == 0) 
    {
	*listhead = cr;
	cr->prev = listhead;
    }
d96 1
a96 4
	while(p->Next)
	{
	    p = p->Next;
	}
a97 1
	cr->prev= p;
d100 13
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d13 2
d18 2
d34 1
a34 2

cr_sort(cw,dx,dy)
d37 2
d40 1
a40 2
    struct ClipRect *listhead;
    struct ClipRect *cr,*crnext;
d42 1
a42 4
#ifdef DEBUG
    printf("<");
#endif
    listhead = 0;
d44 3
a46 5
    /* put in back links */
    cr = cw->ClipRect;
	if (cr == 0)	return;
    cr->prev = 0;
    while (cr->Next)
d48 1
a48 2
	cr->Next->prev = cr;
	cr = cr->Next;
d52 4
a55 1
    while(cr)
d58 9
a66 1
	addsortcr(&listhead,cr,dx,dy);
a68 4
    cw->ClipRect = listhead;
#ifdef DEBUG
    printf(">");
#endif
d75 1
a75 1
    struct ClipRect *e,*pre;
d78 1
a78 1
    for (e = *listhead; e ;e = e->Next)
d80 1
a80 1
	if ( ! lessthan(cr,e,dx,dy) )
d84 3
a86 1
	    pre->Next = cr;
a88 1
	pre = e;
d99 5
a103 1
    if ( (p = *listhead) == 0) *listhead = cr;
d106 4
a109 1
	while(p->Next)  p = p->Next;
d111 1
d115 1
a115 1
lessthan(a,b,dx,dy)
d119 2
d122 3
a124 1
	return( IMulS(a->bounds.MinX-b->bounds.MinX,dx) >= 0);
d126 12
a137 1
	return( IMulS(a->bounds.MinY-b->bounds.MinY,dy) >= 0);
@
