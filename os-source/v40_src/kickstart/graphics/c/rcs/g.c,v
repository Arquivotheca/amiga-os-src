head     39.5;
branch   ;
access   ;
symbols  rel39_24:39.5 rel39_18:39.5 rel39_97:39.3 rel39_90:39.3 rel39_89:39.3 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.2 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.2 rel39_35:39.2 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.4 V36_208:36.4 V36_207:36.4 V36_205:36.4 V36_203:36.4 V36_202:36.4 V36_201:36.4 V36_200:36.3 V36_199:36.3 V36_198:36.3 V36_196:36.3 V36_195:36.3 V36_194:36.3 V36_193:36.3 V36_192:36.3 V36_191:36.3 V36_190:36.3 V36_189:36.3 V36_188:36.3 V36_186:36.3 V36_185:36.3 V36_184:36.3 V36_182:36.3 V36_181:36.3;
locks    ; strict;
comment  @ * @;


39.5
date     93.04.15.16.16.42;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     93.02.22.10.20.38;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.05.05.12.13.23;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.20.13.47.49;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.29.16.47.51;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.18.44;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.20.11.11.43;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.40;  author spence;  state Exp;
branches ;
next     36.4;

36.4
date     90.12.06.13.49.19;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.07.27.16.57.37;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.28.09.10.42;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.46;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.5
log
@If the number of intermediate copper instructions asked for in copinit()
is greater than the current MaxCount, then FreeMem() the current copper
instructions, and allocate a new buffer.
@
text
@/******************************************************************************
*
*	$Id: g.c,v 39.4 93/02/22 10:20:38 spence Exp Locker: spence $
*
******************************************************************************/

/* graphics  kernel routines */
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>
#include "/copper.h"
#include "/gfx.h"
#include "/macros.h"
#include "tune.h"
#include "/view.h"
#include "c.protos"

/*#define DEBUG*/

void __asm CBump(register __a1 struct UCopList *ucl)
{
    struct CopIns *ci;

    ci = ucl->CopList->CopPtr;
    /* let new cbump do the work - bart 08.01.85 */
    ci = cbump(&ucl->CopList,++ci);
    /* do the following rather than directly assign value of
	 cbump to ucl->CopList->CopPtr because of side effects */

    ucl->CopList->CopPtr = ci;

}

struct CopList * __regargs copinit(cl,num)
struct CopList *cl;
int num;
{
    struct CopIns *ci;
	UBYTE	flag;	/* set TRUE if head node allocated */

#ifdef DEBUG
	printf("copinit(%lx,%ld)\n",cl,num);
#endif
	flag = FALSE;
	if (cl == NULL)
	{
		/* allocate head node */
    		if ( (cl = (struct CopList *)
				AllocMem(sizeof(struct CopList),MEMF_CLEAR)) == 0)
    		{
#ifdef MEMDEBUG
	    		printf("copinit: error in getting cop list header\n");
#endif
			return (0);
    		}
		flag = TRUE;
		/*cl->CopIns = 0;
		cl->Next = 0;*/
	}
	if (( cl->CopIns == NULL ) ||
	    (cl->MaxCount < num))
	{
	    if (cl->CopIns)
	    {
	    	FreeMem(cl->CopIns, (sizeof(struct CopIns) * cl->MaxCount));
	    }
	    /* get actual memory for coplist instructions */
	    if ((ci = (struct CopIns *)
		 AllocMem(sizeof(struct CopIns)*num,0)) == 0)
	    {
#ifdef MEMDEBUG  
		printf("copinit: error in getting copper list memory\n");
#endif   
		if (flag)	
		{
		    FreeMem(cl,sizeof(struct CopList));
		    return(FALSE);
		}
		cl->MaxCount = 0;
		cl->CopIns = 0;
		cl->CopPtr = cl->CopIns;
		cl->Count = 0;
		return(cl);
	    }
	    cl->CopIns = ci;
	    cl->MaxCount = num;
	}
	cl->CopPtr = cl->CopIns;
	cl->Count = 0;
	cl->SLRepeat = 1;	/* always subtract 1 in CalcIVG() for the CEND */
	cl->Flags = 0;
	return(cl);
}

struct CopList * __asm UCopperListInit(register __a0 struct UCopList *ucl,
					register __d0 num)
{
  struct CopList *cl;

  /* bart - 10.03.85 */

  if ( ( cl = copinit(ucl->FirstCopList,num) ) == NULL ) return(NULL);
  ucl->FirstCopList = cl;
  ucl->CopList = cl;

  return(cl);
}

void __asm CLoad(register __a1 struct UCopList *ucl, register __d0 a, register __d1 b, register __d2 opcode)
{
	struct CopList *cl;
	struct CopIns *c;

	if ((cl = ucl->CopList) == 0)
	{
	    /* ucl->CopList = copinit(0,UCLSIZE);*/
	    /* cl = ucl->CopList; */

	    /* bart - 10.03.85 */
	    cl = UCopperListInit(ucl,UCLSIZE);
	}

	if( (cl) && (cl->MaxCount) && (cl->Count <= cl->MaxCount) )
	{
	    c = cl->CopPtr;
	    c->OpCode = opcode;
	    c->DESTADDR = a;	/* also c->VWAITPOS, c->HIRGB */
	    c->DESTDATA = b;	/* also c->HWAITPOS, c->LORGB */
	}
}

void __asm CMove(register __a1 struct UCopList *ucl, register __d0 a, register __d1 b)
{
	CLoad(ucl, a, b, COPPER_MOVE);
}

void __asm CWait(register __a1 struct UCopList *ucl, register __d0 a, register __d1 b)
{
	CLoad(ucl, a, b, COPPER_WAIT);
}

@


39.4
log
@Initialise CopList->SLRepeate and CopList->Flags
@
text
@d3 1
a3 1
*	$Id: g.c,v 39.3 92/05/05 12:13:23 chrisg Exp Locker: spence $
d61 2
a62 1
	if ( cl->CopIns == NULL )
d64 4
@


39.3
log
@killed cbump decl.
@
text
@d3 1
a3 1
*	$Id: g.c,v 39.2 92/02/20 13:47:49 chrisg Exp Locker: chrisg $
d12 2
a13 1
#include <graphics/gfx.h>
d16 1
a16 2
#include <graphics/view.h>
#include <graphics/copper.h>
d86 2
@


39.2
log
@made use exec pragmas.
@
text
@d3 1
a3 1
*	$Id: g.c,v 39.1 92/01/29 16:47:51 spence Exp Locker: chrisg $
a19 2

struct CopIns *cbump();
@


39.1
log
@space savings. Merger CWait and CMove into CLoad()
@
text
@d3 1
a3 1
*	$Id: g.c,v 39.0 91/08/21 17:18:44 chrisg Exp Locker: spence $
d13 1
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: g.c,v 37.1 91/05/20 11:11:43 chrisg Exp Locker: chrisg $
d104 1
a104 1
void __asm CMove(register __a1 struct UCopList *ucl, register __d0 a, register __d1 b)
d121 3
a123 3
	    c->OpCode = COPPER_MOVE;
	    c->DESTADDR = a;
	    c->DESTDATA = b;
d127 1
a127 1
void __asm CWait(register __a1 struct UCopList *ucl,register __d0 a, register __d1 b)
d129 2
a130 2
	struct CopList *cl;
	struct CopIns *c;
d132 4
a135 8
	if ((cl = ucl->CopList) == 0)
	{
	    /* ucl->CopList = copinit(0,UCLSIZE);*/
	    /* cl = ucl->CopList; */

	    /* bart - 10.03.85 */
	    cl = UCopperListInit(ucl,UCLSIZE);
	}
a136 8
	if( (cl) && (cl->MaxCount) && (cl->Count <= cl->MaxCount) )
	{
	    c = cl->CopPtr;
	    c->OpCode = COPPER_WAIT;
	    c->VWAITPOS = a;
	    c->HWAITPOS = b;
	}
}
@


37.1
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: g.c,v 1.1 91/05/20 10:41:31 chrisg Exp $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: g.c,v 36.4 90/12/06 13:49:19 bart Exp Locker: spence $
d16 1
d22 1
a22 2
ucbump(ucl)
struct UCopList *ucl;
d36 1
a36 1
struct CopList *copinit(cl,num)
d90 2
a91 3
struct CopList *ucinit(ucl,num)
struct UCopList *ucl;
short num;
d104 1
a104 3
ucmove(ucl,a,b)
register struct UCopList *ucl;
short a,b;
d115 1
a115 1
	    cl = ucinit(ucl,UCLSIZE);
d127 1
a127 3
ucwait(ucl,a,b)
register struct UCopList *ucl;
short a,b;
d138 1
a138 1
	    cl = ucinit(ucl,UCLSIZE);
@


36.4
log
@removed gfxallocmem.c and implemented better lo-mem error recovery -- bart
@
text
@d3 1
a3 1
*	$Id: g.c,v 36.3 90/07/27 16:57:37 bart Exp Locker: bart $
@


36.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
d51 1
a51 1
				GfxAllocMem(sizeof(struct CopList),MEMF_CLEAR)) == 0)
d62 6
a67 5
    if ( cl->CopIns == NULL )
    {
       	/* get actual memory for coplist instructions */
       	if ((ci = (struct CopIns *)GfxAllocMem(sizeof(struct CopIns)*num,0)) == 0)
       	{
d69 1
a69 1
	   printf("copinit: error in getting copper list memory\n");
d71 14
a84 6
			if (flag)	FreeMem(cl,sizeof(struct CopList));
	   		return(FALSE);
       	}
		cl->CopIns = ci;
  		cl->MaxCount = num;
     }
d109 1
a109 1
    struct CopList *cl;
d112 1
a112 1
    if ((cl = ucl->CopList) == 0)
d114 2
a115 2
		/* ucl->CopList = copinit(0,UCLSIZE);*/
		/* cl = ucl->CopList; */
d117 2
a118 2
		/* bart - 10.03.85 */
		cl = ucinit(ucl,UCLSIZE);
d121 7
a127 4
	c = cl->CopPtr;
	c->OpCode = COPPER_MOVE;
	c->DESTADDR = a;
	c->DESTDATA = b;
d134 1
a134 1
    struct CopList *cl;
d137 1
a137 1
    if ((cl = ucl->CopList) == 0)
d139 2
a140 2
		/* ucl->CopList = copinit(0,UCLSIZE);*/
		/* cl = ucl->CopList; */
d142 2
a143 2
		/* bart - 10.03.85 */
		cl = ucinit(ucl,UCLSIZE);
d146 7
a152 4
	c = cl->CopPtr;
	c->OpCode = COPPER_WAIT;
	c->VWAITPOS = a;
	c->HWAITPOS = b;
@


36.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/g.c,v 36.1 88/03/10 16:11:46 dale Exp Locker: bart $
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
@
