head     39.3;
branch   ;
access   ;
symbols  rel39_24:39.3 rel39_18:39.3 rel39_97:39.3 rel39_90:39.3 rel39_89:39.3 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.3 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.2 rel39_35:39.2 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.4 V36_208:36.4 V36_207:36.4 V36_205:36.4 V36_203:36.4 V36_202:36.4 V36_201:36.4 V36_200:36.4 V36_199:36.4 V36_198:36.4 V36_196:36.4 V36_195:36.4 V36_194:36.4 V36_193:36.4 V36_192:36.4 V36_191:36.4 V36_190:36.4 V36_189:36.4 V36_188:36.4 V36_186:36.4 V36_185:36.4 V36_184:36.4 V36_182:36.4 V36_181:36.4;
locks    ; strict;
comment  @ * @;


39.3
date     92.04.27.12.29.10;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.20.13.47.21;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.21.13.22.12;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.18.25;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.06.07.10.17.27;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.20.11.11.04;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.02.14.43.12;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.12.54.37;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.19.31;  author spence;  state Exp;
branches ;
next     36.4;

36.4
date     90.07.27.16.57.23;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.03.28.09.10.04;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     88.08.16.14.21.14;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.39;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.3
log
@ pragmas.
@
text
@/******************************************************************************
*
*	$Id: flood.c,v 39.2 92/02/20 13:47:21 chrisg Exp Locker: chrisg $
*
******************************************************************************/

#include <exec/types.h>
#include <graphics/gfx.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <exec/interrupts.h>
#include <exec/libraries.h>
#include <exec/memory.h>
#include "/macros.h"
#include "/gfxbase.h"
#include "/clip.h"
#include "/rastport.h"
#include <hardware/blit.h>
#include "/sane_names.h"
#include "/gfxpragmas.h"
#include "c.protos"

/*#define DEBUG*/
/* #define MASKDEBUG */

#ifdef DEBUG
#define KPRINTF
#endif

#ifdef KPRINTF
#define printf kprintf
#endif

newfill(w,cw,mode,x,y)
register struct RastPort *w;
int x,y;
int mode;
struct Layer *cw;
{
    struct RastPort floodrast;
    struct BitMap bitmap;
    struct BitMap savebitmap;
    int savedepth;
    /*char **p;*/
    int fillbytes;
    int pen;
    SHORT planecount;
    int error = FALSE;

#ifdef DEBUG
        printf("newfill: starting newfill...\n");
#endif

    if (mode == 0)  pen = w->AOlPen;
    else
    {
	if ( (pen = READPIXEL(w,x,y) ) == -1) return(-1);
    }

    /* newfill relies on w->TmpRas being at least as large a this layer's maximum rassize */

    fillbytes = (w->TmpRas->Size);	/* default if no layer */

#ifdef DEBUG
    printf("tmpras size == %lx\n",fillbytes);
#endif

    /* starting at (x,y) change all adjoining pixels from color p to penclra */
    shortinitrast(&floodrast);
    floodrast.BitMap = &bitmap;
    floodrast.Layer = 0;
    bitmap = *w->BitMap;        /* copy all info */

    if(cw)
    {
	int layerbytes;

	/* (floodrast.BitMap)->Width is byte width */
	/* of left-word-boundary adjusted layer */
	/* rounded up to high word --- */
	/* note: the +16 in the line below is intentional ! */

	bitmap.BytesPerRow = BLTBYTES(cw->bounds.MinX,cw->bounds.MaxX);

	/* (floodrast.BitMap)->Height is row height of the layer */

	bitmap.Rows = ((cw->bounds.MaxY - cw->bounds.MinY)+1);
	layerbytes = umuls(bitmap.BytesPerRow,bitmap.Rows);

#ifdef DEBUG
    printf("layerbytes == %lx\n",layerbytes);
#endif
	
	if(layerbytes > fillbytes)
	{
	    return(FALSE); /* tmpras too small */
	}
	else 
	{
	    fillbytes = layerbytes;
	}
    }

    bitmap.Depth = 1;
    bitmap.Planes[0] = w->TmpRas->RasPtr;
    floodrast.AOlPen = 1;
    /* try to use second buffer for real fill */
#ifdef DEBUG
    printf("allocate fillbytes == %lx\n",fillbytes);
#endif
    bitmap.Planes[1] = (char *)AllocMem(fillbytes,MEMF_PUBLIC|MEMF_CHIP);
    if (bitmap.Planes[1])
    {
#ifdef DEBUG
    printf("new faster filler\n");
    printf("flood fill buffers at:%lx %lx\n",bitmap.Planes[0],bitmap.Planes[1]);
    /*printf("blither");*/
#endif
	bitmap.Depth = 2;
    }
    else
    {
#ifdef DEBUG
	printf("newfill: couldn't allocate bitmap.planes[1]...\n");
#endif
	return(FALSE);
    }

#ifdef DEBUG
    printf("newfill: about to call setrast\n");
#endif
    SETRAST(&floodrast,0);
    waitblitdone();

/* bart - start of new blitmask generation code to correct problem in old genblit code */

#ifdef DEBUG
        printf("newfill: beginning to generate blitmask using newGenBlit...\n");
#endif

    if (bitmap.Planes[1])
    {
	/* make sure we don't get the rug pulled out from under us */

	savebitmap = *(w->BitMap); /* copy all fields */
	savedepth = bitmap.Depth;

	/* genblit only one plane at at time */
	w->BitMap->Depth = 1;
	bitmap.Depth = 1;

	for (planecount=0; planecount<savebitmap.Depth; planecount++)
	{
	    /* move planecount planepointer to zeroth plane pointer, for this blit */
	    w->BitMap->Planes[0] = savebitmap.Planes[planecount];

	    /* now, generate blitmask in floodrast.BitMap->Planes[0] */
	    /* clipping to SOURCE cliprects */

	    if((pen>>planecount)&1)
	    {

#ifdef DEBUG
        printf("newfill: generating blitmask for plane[%lx]=%lx ...\n",planecount,w->BitMap->Planes[0]);
        printf("newfill: (pen>>planecount)&1=%lx...\n",(pen>>planecount)&1);
#endif
		newGenBlit(w,0,0,
				&floodrast,0,0,
			        (bitmap.BytesPerRow<<3),
			        (bitmap.Rows),
			        ((planecount == 0)?(ABNC):(ABC)),
			        planecount);
	    }
	    else
	    {

#ifdef DEBUG
        printf("newfill: generating blitmask for plane[%lx]=%lx ...\n",planecount,w->BitMap->Planes[0]);
        printf("newfill: (pen>>planecount)&1=%lx...\n",(pen>>planecount)&1);
#endif
		newGenBlit(w,0,0,
				&floodrast,0,0,
			        (bitmap.BytesPerRow<<3),
			        (bitmap.Rows),
			        ((planecount == 0)?(ANBNC):(ANBC)),
			        planecount);
	    }
	}

#ifdef DEBUG
        printf("newfill: generated blitmask for all planes...\n");
#endif

	/* remember to clear floodrast.BitMap->Planes[1] to zero !!! */
	/* because of it's use as a temporary raster by newGenBlit!!! */

#ifdef DEBUG
        printf("newfill: bltclear bitmap.Planes[1] = %lx; fillbytes = %lx...\n",
		bitmap.Planes[1],fillbytes);
#endif

	BLTCLEAR(bitmap.Planes[1],fillbytes,1);

#ifdef DEBUG
        printf("newfill: returned from bltclear...\n");
#endif

#ifdef DEBUG
        printf("newfill: restore *(w->BitMap)...\n");
#endif
	*(w->BitMap) = savebitmap;  /* restore all fields */

	/* ok, critical stuff done */

	if (mode == 1)
	{

#ifdef DEBUG
	    printf("newfill: mode == 1... invert blitmask\n");
#endif

	    gfx_BltBitMap(&bitmap,0,0,&bitmap,0,0,
		      (bitmap.BytesPerRow<<3),
		      (bitmap.Rows),
		      (NANBNC|ANBNC|NANBC|ANBC),
		      1,bitmap.Planes[1]);
	}

#ifdef MASKDEBUG

	/* for mask debugging ... copy mask into all planes of rastport w then return */

	{
	    savebitmap = *(floodrast.BitMap); /* copy all fields */

	    /* duplicate bitmap data from w->Bitmap */
	    (floodrast.BitMap)->Depth  = (w->BitMap)->Depth;

	    /* duplicate bitMap.Planes[0] (mask data pointer) for all planes of floodrast */
	    for (planecount=0; planecount<floodrast.BitMap->Depth; planecount++)
	    {
		floodrast.BitMap->Planes[planecount] = savebitmap.Planes[0];
	    }

#ifdef DEBUG
        printf("newfill: about to clipblit blitmask for maskdebugging purposes...\n");
#endif
	    /* now copy floodrast to w rastport using clipblit */
	    clipbltrastport(floodrast.BitMap, 0,0, w,
			0, 0,
		        (((floodrast.BitMap->BytesPerRow)<<3)),
		        ((floodrast.BitMap->Rows)),
		        (NABNC|NABC|ABNC|ABC),
			savebitmap.Planes[1]);
#ifdef DEBUG
        printf("newfill: returned from clipblit blitmask for maskdebugging purposes...\n");
#endif

	    *(floodrast.BitMap) = savebitmap; /* restore all fields */
	}
#endif

	bitmap.Depth = savedepth;   /* restore depth */ 
    }
    
#ifdef DEBUG
    printf("newfill: generated blitmask using newGenBlit...\n");
#endif

#ifdef MASKDEBUG
    FreeMem(bitmap.Planes[1],fillbytes);
    return(TRUE);
#endif

/* bart - end of new blitmask generation code */

    /*p = w->BitMap->Planes;*/

    /* now use processor to do flood fill */

    waitblitdone();

#ifdef DEBUG
    printf("flood rast at %lx\n",&floodrast);
#endif

    /* try to use second buffer for real fill */

#ifdef DEBUG
    printf("now call fillfast\n");
	/*Debug();*/
#endif

    if (bitmap.Planes[1] == 0) {
        if (!(fillfast_region(&floodrast,w,x,y))) error = TRUE;
    }
    else
    {
	if (!(fillfast_region(&floodrast,&floodrast,x,y))) error = TRUE;
#ifdef DEBUG
	printf("call blit plate\n");
#endif
        if (!error)
	gfx_BltPattern(w,bitmap.Planes[1],0,0,
			(bitmap.BytesPerRow<<3)-1,
			bitmap.Rows-1, 
			bitmap.BytesPerRow
			);
#ifdef DEBUG
#endif
	waitblitdone();
	FreeMem(bitmap.Planes[1],fillbytes);
#ifdef DEBUG
        printf("newfill: returning from newfill...\n");
#endif
    }

    if (error) return(FALSE);
    else return(TRUE);
}

@


39.2
log
@made use exec pragmas.
@
text
@d3 1
a3 1
*	$Id: flood.c,v 39.1 92/01/21 13:22:12 chrisg Exp Locker: chrisg $
d21 1
d223 1
a223 1
	    BLTBITMAP(&bitmap,0,0,&bitmap,0,0,
d305 1
a305 1
	BLTPATTERN(w,bitmap.Planes[1],0,0,
@


39.1
log
@ removed never used array
@
text
@d3 1
a3 1
*	$Id: flood.c,v 39.0 91/08/21 17:18:25 chrisg Exp Locker: chrisg $
d15 4
a18 3
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: flood.c,v 37.4 91/06/07 10:17:27 chrisg Exp Locker: chrisg $
a31 2

static minterm[8] = { NANBNC,ANBNC,NABNC,ABNC,NANBC,ANBC,NABC,ABC };
@


37.4
log
@  Removed unused variable I.
@
text
@d3 1
a3 1
*	$Id: flood.c,v 37.3 91/05/20 11:11:04 chrisg Exp Locker: chrisg $
@


37.3
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: flood.c,v 1.1 91/05/20 10:41:11 chrisg Exp $
a44 1
    register int i;
a277 1
    i = w->BitMap->Depth;
@


37.2
log
@ changed "</sane_names.h> to "/sane_names.h" for lattice
@
text
@d3 1
a3 1
*	$Id: flood.c,v 37.1 91/05/02 12:54:37 chrisg Exp Locker: chrisg $
d20 1
@


37.1
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: flood.c,v 37.0 91/01/07 15:19:31 spence Exp Locker: chrisg $
d19 1
a19 1
#include </sane_names.h>
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: flood.c,v 36.4 90/07/27 16:57:23 bart Exp Locker: spence $
d19 1
a19 1
#include <../sane_names.h>
@


36.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/flood.c,v 36.2 88/08/16 14:21:14 bart Exp Locker: bart $
@


36.2
log
@address bugs B4062 B4066
@
text
@d3 1
a3 1
*	$Header: flood.c,v 36.1 88/03/10 16:11:39 dale Exp $
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d24 8
d65 4
d77 1
a77 2
	/* (floodrast.BitMap)->Width is byte width of left-word-boundary adjusted layer */
	/* rounded up to high word --- note: the +16 in the line below is intentional ! */
d79 4
a82 1
		bitmap.BytesPerRow = BLTBYTES(cw->bounds.MinX,cw->bounds.MaxX);
d84 1
a84 1
		/* (floodrast.BitMap)->Height is row height of the layer */
d86 17
a102 2
		bitmap.Rows = ((cw->bounds.MaxY - cw->bounds.MinY)+1);
		fillbytes = umuls(bitmap.BytesPerRow,bitmap.Rows);
d109 3
@
