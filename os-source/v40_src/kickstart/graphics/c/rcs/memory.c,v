head     39.6;
branch   ;
access   ;
symbols  rel39_24:39.6 rel39_18:39.6 rel39_97:39.5 rel39_90:39.5 rel39_89:39.3 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.3 rel39_52:39.3 rel39_47:39.3 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.3 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_17:37.1 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.16 V36_208:36.16 V36_207:36.16 V36_205:36.16 V36_203:36.16 V36_202:36.16 V36_201:36.16 V36_200:36.15 V36_199:36.15 V36_198:36.15 V36_196:36.15 V36_195:36.15 V36_194:36.15 V36_193:36.15 V36_192:36.15 V36_191:36.15 V36_190:36.15 V36_189:36.15 V36_188:36.15 V36_186:36.14 V36_185:36.14 V36_184:36.14 V36_182:36.14 V36_181:36.14;
locks    ; strict;
comment  @ * @;


39.6
date     92.11.23.16.30.49;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     92.10.08.15.58.33;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     92.10.07.18.25.36;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.17.12.05.18;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.07.13.43.55;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.18.16.25.05;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.20.01;  author chrisg;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.27.17.01.15;  author spence;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.14.14.43.24;  author spence;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.14.11.25.59;  author spence;  state Exp;
branches ;
next     37.5;

37.5
date     91.06.04.14.31.19;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.20.11.17.16;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.02.15.25.21;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.02.13.04.02;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.28.13.58.20;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.20.08;  author spence;  state Exp;
branches ;
next     36.16;

36.16
date     90.12.06.14.08.39;  author bart;  state Exp;
branches ;
next     36.15;

36.15
date     90.10.08.14.06.20;  author bart;  state Exp;
branches ;
next     36.14;

36.14
date     90.07.27.16.58.33;  author bart;  state Exp;
branches ;
next     36.13;

36.13
date     90.03.28.09.13.10;  author bart;  state Exp;
branches ;
next     36.12;

36.12
date     88.11.01.15.46.48;  author bart;  state Exp;
branches ;
next     36.11;

36.11
date     88.10.24.18.52.06;  author bart;  state Exp;
branches ;
next     36.10;

36.10
date     88.10.21.13.48.57;  author bart;  state Exp;
branches ;
next     36.9;

36.9
date     88.09.13.17.01.41;  author bart;  state Exp;
branches ;
next     36.8;

36.8
date     88.09.13.11.21.13;  author bart;  state Exp;
branches ;
next     36.7;

36.7
date     88.09.13.10.31.18;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     88.09.12.16.58.43;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     88.08.07.16.50.47;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     88.09.01.09.42.10;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     88.07.23.17.09.04;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     88.05.31.11.56.26;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.57;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.6
log
@BIG changes to GfxAssociate(), GfxLookUp() and GfxFree():
1) Locking. Previously, these lists were left exposed to timing holes!
2) Chaining. The hash table was meant to handle hash collisions by
chaining entries together. This was not actually implemented. Instead, the
next available slot after the hash entry was used. This meant there were
a limited number of slots available, instead of the unlimitied that were
intended.
@
text
@/******************************************************************************
*
*	$Id: memory.c,v 39.5 92/10/08 15:58:33 spence Exp Locker: spence $
*
******************************************************************************/


#include <exec/types.h>
#include "/gfxbase.h"
#include "/monitor.h"
#include "/macros.h"
#include "/gfxnodes.h"
#include "/view.h"
#include "/gfxpragmas.h"
#include "gfxprivate.h"
#include "c.protos"
#include <exec/nodes.h>
#include <exec/memory.h>
#include <exec/alerts.h>


#define	FORGOTTEN -1

struct AssociatedNode
{
	struct ExtendedNode n;
	APTR	backlink;
};

/* default initialization routine for allocation of graphics */

LONG gfxinit(gfxnode)
struct ExtendedNode *gfxnode;
{
    LONG error =  FALSE;

    if(!gfxnode) 
    {
	error = TRUE;
    }
    return(error);
}

/* routines for allocation and deallocation of graphics */
/* data structures */

struct ExtendedNode * __asm GfxNew(register __d0 ULONG nodetype)
{
    struct ExtendedNode *n;

    switch (nodetype)
    {
	extern LONG gfxnode_init();
	case VIEW_EXTRA_TYPE :
	{
	    if( n = (struct ExtendedNode *) AllocMem(sizeof(struct ViewExtra), MEMF_PUBLIC|MEMF_CLEAR) )
	    {

		/* bart - 11.30.87 extended node */
		/* n->ln_Type = VIEW_EXTRA_TYPE; */
	    
		n->xln_Type = NT_GRAPHICS;
		n->xln_Subsystem = SS_GRAPHICS;
		n->xln_Subtype = VIEW_EXTRA_TYPE;
		n->xln_Library = (LONG) GBASE;
		n->xln_Init = gfxnode_init;

		/* fetch default monitorspec from list */
		{
		    /* assume that we can ALWAYS find the default monitor */
		    {
			struct MonitorSpec *mspc = 
			(struct MonitorSpec *) FindName(&(GBASE->MonitorList),DEFAULT_MONITOR_NAME);

#ifdef BARTDEBUG
			kprintf("gfxnew: default monitorspec @@0x%08lx\n",mspc);
#endif
			((struct ViewExtra *)n)->Monitor = mspc;
			((struct ViewExtra *)n)->TopLine = DEFAULTTOPLINE;
		    }
		}
	    }
	}
	break;

	case VIEWPORT_EXTRA_TYPE :
	{
	    if(n = (struct ExtendedNode *) AllocMem(sizeof(struct ViewPortExtra),MEMF_PUBLIC|MEMF_CLEAR))
	    {
		/* bart - 11.30.87 extended node */
		/* n->ln_Type = VIEWPORT_EXTRA_TYPE; */

		n->xln_Type = NT_GRAPHICS;
		n->xln_Subsystem = SS_GRAPHICS;
		n->xln_Subtype = VIEWPORT_EXTRA_TYPE;
		n->xln_Library = (LONG) GBASE;
		n->xln_Init = gfxinit;
	    }
	}
	break;

	case SPECIAL_MONITOR_TYPE:
	{
	    if(n = (struct ExtendedNode *) AllocMem(sizeof(struct SpecialMonitor),MEMF_PUBLIC|MEMF_CLEAR))
	    {
		n->xln_Type = NT_GRAPHICS;
		n->xln_Subsystem = SS_GRAPHICS;
		n->xln_Subtype = SPECIAL_MONITOR_TYPE;
		n->xln_Library = (LONG) GBASE;
		n->xln_Init = gfxinit;
		((struct SpecialMonitor *)n)->do_monitor = (void *) default_monitor;
	    }
	}
	break;

	case MONITOR_SPEC_TYPE:
	{
	    extern LONG monitor_init();
	    extern LONG monitor_transform();
	    extern LONG monitor_translate();
	    extern LONG monitor_scale();
	    extern LONG monitor_bounds();
	    extern LONG video_bounds();
	    extern ULONG mrgcop();
	    extern void loadview();

	    if(n = (struct ExtendedNode *) AllocMem(sizeof(struct MonitorSpec),MEMF_PUBLIC|MEMF_CLEAR))
	    {
		n->xln_Type = NT_GRAPHICS;
		n->xln_Subsystem = SS_GRAPHICS;
		n->xln_Subtype = MONITOR_SPEC_TYPE;
		n->xln_Library = (LONG) GBASE;
		n->xln_Init = monitor_init;

		/* initialize transformation functions */
		((struct MonitorSpec *)n)->ms_transform = monitor_transform;
		((struct MonitorSpec *)n)->ms_translate = monitor_translate;
		((struct MonitorSpec *)n)->ms_scale     = monitor_scale;

		/* initialize transformation offsets */
		((struct MonitorSpec *)n)->ms_xoffset   = STANDARD_XOFFSET;
		((struct MonitorSpec *)n)->ms_yoffset   = STANDARD_YOFFSET;

		/* initialize bounding function */
		((struct MonitorSpec *)n)->ms_maxoscan  = monitor_bounds;
		((struct MonitorSpec *)n)->ms_videoscan = video_bounds;

		/* Set up the default vectors for MrgCop() and LoadView() */
		((struct MonitorSpec *)n)->ms_MrgCop = mrgcop;
		((struct MonitorSpec *)n)->ms_LoadView = loadview;

	    }
	}
	break;

	default :
	{
	    Alert(AN_GfxNewError);
	}
	break;
    }
    return (n);
}

void __asm GfxAssociate(register __a0 VOID *old, register __a1 struct AssociatedNode *new)
{
    struct AssociatedNode *n;
    struct AssociatedNode **table;
    int key = hashit((ULONG) old);

    table = (struct AssociatedNode **) GBASE->hash_table;
    new->backlink = old;

    ObtainSemaphore(GBASE->HashTableSemaphore);
    /* add this to the head of the chain */
    if (n = table[key])
    {
	new->n.xln_Succ = (struct Node *)n;
	n->n.xln_Pred = (struct Node *)new;
	table[key] = new;
    }
    else
    {
    	/* no links, so this is the first */
    	table[key] = new;
    }
    ReleaseSemaphore(GBASE->HashTableSemaphore);

}

void gfxforget(old,new)
APTR old;
struct AssociatedNode *new;
{
    struct AssociatedNode *pred, *succ;

    /* Unlink this node from the chain */
    ObtainSemaphore(GBASE->HashTableSemaphore);
    pred = new->n.xln_Pred;
    succ = new->n.xln_Succ;
    if (pred)
    {
	pred->n.xln_Succ = (struct Node *)succ;
    }
    else
    {
	/* this entry was the first in the chain */
	int key = hashit((ULONG) old);
	struct AssociatedNode **table;

	table = (struct AssociatedNode **) GBASE->hash_table;
	table[key] = succ;
    }
    if (succ)
    {
	succ->n.xln_Pred = (struct Node *)pred;
    }
    ReleaseSemaphore(GBASE->HashTableSemaphore);
}

struct AssociatedNode * __asm GfxLookUp(register __a0 VOID *old)
{
    struct AssociatedNode *n;
    int key = hashit((ULONG) old);
    struct AssociatedNode **table;

    table = (struct AssociatedNode **) GBASE->hash_table;

    ObtainSemaphore(GBASE->HashTableSemaphore);
    /* find the entry in the chain */
    for(n = table[key]; n && (n->backlink != old); n = (struct Node *)n->n.xln_Succ);
    ReleaseSemaphore(GBASE->HashTableSemaphore);
    return(n);
}

void gfxcheck(n)
struct AssociatedNode *n;
{
    if(n = gfx_GfxLookUp((struct AssociatedNode*)n->backlink))
    {
	gfxforget(n->backlink,n);
    }
}

void __asm GfxFree(register __a0 struct ExtendedNode *n)
{
    switch(n->xln_Type)
    {
	case NT_GRAPHICS :
	{
	    switch(n->xln_Subsystem)
	    {
		case SS_GRAPHICS:
		{
		    switch(n->xln_Subtype)
		    {
			case VIEW_EXTRA_TYPE :
			    gfxcheck(n); /* associated node */
			    FreeMem(n,sizeof(struct ViewExtra));
			    break;
			case VIEWPORT_EXTRA_TYPE :
			    gfxcheck(n); /* associated node */
			    FreeMem(n,sizeof(struct ViewPortExtra));
			    break;
			case SPECIAL_MONITOR_TYPE:
			    FreeMem(n,sizeof(struct SpecialMonitor));
			    break;
			case MONITOR_SPEC_TYPE:
			    FreeMem(n,sizeof(struct MonitorSpec));
			    break;
			default :       Alert(AN_GfxFreeError);
			    break;
		    }
		}   break;
		default :       Alert(AN_GfxFreeError);
		    break;
	    }
	}   break;
	default :       Alert(AN_GfxFreeError);
	    break;
    }
}

@


39.5
log
@Changed the default ViewExtra->TopLine value from TOPLINE to
DEFAULTTOPLINE. This valus is the highest line number that will be needed
for an 8 bitplane max oscanned NTSC or PAL screen.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 39.4 92/10/07 18:25:36 spence Exp Locker: spence $
d9 1
d14 1
a14 1
#include "/gfxbase.h"
d167 3
a169 3
	struct AssociatedNode *n;
	struct AssociatedNode **table;
	int key = hashit((ULONG) old), cnt = HASHTABLE_NUMENTRIES;
d171 2
a172 1
	table = (struct AssociatedNode **) GBASE->hash_table;
d174 14
a187 3
	/* find unused entry */
	for( ; (n = table[key]) && (((int)n) != FORGOTTEN) && (cnt); 
	    (key = (key+1)%HASHTABLE_NUMENTRIES , cnt--));
a188 5
	if(cnt)
	{
	    table[key] = new;
	    new->backlink = old;
	}
d195 14
a208 3
	int before,after;
	int key = hashit((ULONG) old), cnt = HASHTABLE_NUMENTRIES;
	struct AssociatedNode *n;
d212 7
a218 67

	for(;(n = table[key]) && cnt; key = (key+1)%HASHTABLE_NUMENTRIES, cnt--)
	{
	    if((((int)n) != FORGOTTEN) && (n->backlink == old)) 
	    {
		table[key] = (void *) FORGOTTEN;	/* free that entry */
		break;
	    }
	}

	if(cnt)
	{
	    /* now garbage collect */
	    /* this should work most of the time -- bart */

	    after  = (key+1)%HASHTABLE_NUMENTRIES;

	    if (table[after] == 0) 	
	    {
		table[key] = 0;
	    }
	    else
	    {
		cnt = HASHTABLE_NUMENTRIES;
		after = key;
		do
		{
		    for(   after = (after+1)%HASHTABLE_NUMENTRIES, cnt-- ;
			 (((int)(n = table[after%HASHTABLE_NUMENTRIES]))==FORGOTTEN)
			   && (cnt); 
			   after = (after+1)%HASHTABLE_NUMENTRIES, cnt-- );
		}
		while((cnt) && (n) && (hashit((ULONG) n->backlink) == after));

		if(!n || !cnt)
		{
		    cnt = HASHTABLE_NUMENTRIES;
		    after = key;
		    do
		    {
			for(  after = (after+1)%HASHTABLE_NUMENTRIES, cnt-- ;
			    (((int)(n = table[after%HASHTABLE_NUMENTRIES]))==FORGOTTEN)
			      && (cnt); 
			      after = (after+1)%HASHTABLE_NUMENTRIES, cnt-- )
			 {
			     table[after] = 0;	
			 }
		    }
		    while((cnt) && (n) && (hashit((ULONG) n->backlink) == after));
		    table[key] = 0; /* guaranteed safe */	
		}
	    }

	    if (table[key] == 0)
	    {
		    before = (key-1)%HASHTABLE_NUMENTRIES;

		    while (((int)table[before]) == FORGOTTEN)
		    {
			    table[before] = 0;
			    before = (before - 1) % HASHTABLE_NUMENTRIES;
		    }
	    }
	    /* there is enough info in the table to completely */
	    /* reconstruct table, each entry points to an Associated Node */
	    /* and each Associated Node contains the key */
	}
d223 3
a225 5
	struct AssociatedNode *n;
	int key = hashit((ULONG) old), cnt = HASHTABLE_NUMENTRIES;
	struct AssociatedNode **table;

	table = (struct AssociatedNode **) GBASE->hash_table;
d227 7
a233 5
	for(;(n = table[key])&&cnt; key = (key+1)%HASHTABLE_NUMENTRIES, cnt--)
	{
	    if((((int)n) != FORGOTTEN) && (n->backlink == old)) break;
	}
	if (cnt) return(n); else return((struct AssociatedNode*) cnt);
d239 1
a239 1
    if(n = GfxLookUp((struct AssociatedNode*)n->backlink))
@


39.4
log
@ViewExtra->TopLine default changed from 0 to TOPLINE
@
text
@d3 1
a3 1
*	$Id: memory.c,v 39.3 92/01/17 12:05:18 spence Exp Locker: spence $
d78 1
a78 1
			((struct ViewExtra *)n)->TopLine = TOPLINE;
@


39.3
log
@MonitorSpec->MrgCop/LoadView changed to ms_MrgCop and ms_LoadView.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 39.2 92/01/07 13:43:55 spence Exp Locker: spence $
d78 1
@


39.2
log
@Registerized all external function parameters.
mrgcop/loadview function addresses put into MonitorSpec.
downcoded hashit().
@
text
@d3 1
a3 1
*	$Id: memory.c,v 39.1 91/10/18 16:25:05 spence Exp Locker: spence $
d147 2
a148 2
		((struct MonitorSpec *)n)->MrgCop = mrgcop;
		((struct MonitorSpec *)n)->LoadView = loadview;
@


39.1
log
@removed reference to viewportextra->blank
,
@
text
@d3 1
a3 1
*	$Id: memory.c,v 39.0 91/08/21 17:20:01 chrisg Exp Locker: spence $
d9 1
d46 1
a46 2
struct ExtendedNode *gfxnew(nodetype)
int nodetype;
d122 2
d145 5
d163 1
a163 21
int __regargs hashit(ULONG l)
{
	int k;

	k = l;

	l >>= 8;
	k += l;

	l >>= 8;
	k += l;

	l >>= 8;
	k += l;

	return (k & (HASHTABLE_NUMENTRIES - 1));
}

void gfxassociate(old,new)
APTR old;
struct AssociatedNode *new;
d261 1
a261 2
struct AssociatedNode *gfxlookup(old)
APTR old;
d279 1
a279 1
    if(n = gfxlookup((struct AssociatedNode*)n->backlink))
d285 1
a285 2
void gfxfree(n)
struct ExtendedNode *n;
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: memory.c,v 38.2 91/07/27 17:01:15 spence Exp Locker: chrisg $
a95 4
		{
			struct ViewPortExtra *v = (struct ViewPortExtra *)n;
			v->Blank = -1;
		}
@


38.2
log
@Default values for new ViewPortExtra fields.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 38.1 91/06/14 14:43:24 spence Exp Locker: spence $
@


38.1
log
@gfxinit() should return LONG
@
text
@d3 1
a3 1
*	$Id: memory.c,v 38.0 91/06/14 11:25:59 spence Exp Locker: spence $
d96 4
@


38.0
log
@includes local headers, so knows about new ViewPortExtra size.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 37.5 91/06/04 14:31:19 chrisg Exp Locker: spence $
d30 1
a30 1
gfxinit(gfxnode)
@


37.5
log
@ Got rid of all compiler warnings.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 37.4 91/05/20 11:17:16 chrisg Exp Locker: chrisg $
d9 6
a18 7
#include "/macros.h"
#include <graphics/gfxnodes.h>
#include <graphics/view.h>
#include <graphics/gfxbase.h>

#include "gfxprivate.h"
#include "c.protos"
@


37.4
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 1.1 91/05/20 10:42:16 chrisg Exp $
d46 1
a46 1
gfxnew(nodetype)
a49 3
    struct GfxBase *GB;   
     
    FETCHGBASE;
d56 1
a56 1
	    if( n = AllocMem(sizeof(struct ViewExtra), MEMF_PUBLIC|MEMF_CLEAR) )
d65 1
a65 1
		n->xln_Library = GB;
d73 1
a73 1
			FindName(&GB->MonitorList,DEFAULT_MONITOR_NAME);
d87 1
a87 1
	    if(n = AllocMem(sizeof(struct ViewPortExtra),MEMF_PUBLIC|MEMF_CLEAR))
d95 1
a95 1
		n->xln_Library = GB;
d103 1
a103 1
	    if(n = AllocMem(sizeof(struct SpecialMonitor),MEMF_PUBLIC|MEMF_CLEAR))
d108 1
a108 1
		n->xln_Library = GB;
d110 1
a110 1
		((struct SpecialMonitor *)n)->do_monitor = default_monitor;
d124 1
a124 1
	    if(n = AllocMem(sizeof(struct MonitorSpec),MEMF_PUBLIC|MEMF_CLEAR))
d129 1
a129 1
		n->xln_Library = GB;
d157 1
a157 2
int hashit(l)
ULONG	l;
d175 1
a175 1
gfxassociate(old,new)
a178 1
	struct GfxBase *GB;
d181 1
a181 1
	int key = hashit(old), cnt = HASHTABLE_NUMENTRIES;
d183 1
a183 2
	FETCHGBASE;
	table = GB->hash_table;
d196 1
a196 1
gfxforget(old,new)
a199 1
	struct GfxBase *GB;
d201 1
a201 1
	int key = hashit(old), cnt = HASHTABLE_NUMENTRIES;
d205 1
a205 1
	FETCHGBASE; table = GB->hash_table;
d211 1
a211 1
		table[key] = FORGOTTEN;	/* free that entry */
d238 1
a238 1
		while((cnt) && (n) && (hashit(n->backlink) == after));
d254 1
a254 1
		    while((cnt) && (n) && (hashit(n->backlink) == after));
a277 1
	struct GfxBase *GB;
d279 1
a279 1
	int key = hashit(old), cnt = HASHTABLE_NUMENTRIES;
d282 1
a282 1
	FETCHGBASE; table = GB->hash_table;
d288 1
a288 1
	if (cnt) return(n); else return(cnt);
d291 1
a291 1
gfxcheck(n)
d300 1
a300 1
gfxfree(n)
@


37.3
log
@  had to add a lot of casts for pointer comparisons with -1 to get lattice to work.

@
text
@d3 1
a3 1
*	$Id: memory.c,v 37.2 91/05/02 13:04:02 chrisg Exp Locker: chrisg $
d19 1
a105 2
	    int default_monitor();

@


37.2
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: memory.c,v 37.1 91/02/28 13:58:20 spence Exp Locker: chrisg $
d189 2
a190 1
	FETCHGBASE; table = GB->hash_table;
d193 2
a194 3
	for( ;
	    (n = table[key]) && (n != FORGOTTEN) && (cnt); 
	    key = (key+1)%HASHTABLE_NUMENTRIES , cnt--);
d217 1
a217 1
	    if((n != FORGOTTEN) && (n->backlink == old)) 
d242 1
a242 1
			 ((n = table[after%HASHTABLE_NUMENTRIES])==FORGOTTEN)
d255 1
a255 1
			    ((n = table[after%HASHTABLE_NUMENTRIES])==FORGOTTEN)
d271 1
a271 1
		    while (table[before] == FORGOTTEN)
d295 1
a295 1
	    if((n != FORGOTTEN) && (n->backlink == old)) break;
@


37.1
log
@hashit() uses HASHTABLE_NUMENTRIES instead of hardcoded value.
@
text
@d3 1
a3 1
*	$Id: memory.c,v 37.0 91/01/07 15:20:08 spence Exp Locker: spence $
d13 1
a13 1
#include "../macros.h"
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: memory.c,v 36.16 90/12/06 14:08:39 bart Exp Locker: spence $
d177 1
a177 1
	return (k & 0xff);
@


36.16
log
@error handling for lo-mem situations
@
text
@d3 1
a3 1
*	$Id: memory.c,v 36.15 90/10/08 14:06:20 bart Exp Locker: bart $
@


36.15
log
@new alert defines
@
text
@d3 1
a3 1
*	$Id: memory.c,v 36.14 90/07/27 16:58:33 bart Exp Locker: bart $
d58 2
a59 1
	    n = AllocMem(sizeof(struct ViewExtra), MEMF_PUBLIC|MEMF_CLEAR);
d61 8
a68 8
	    /* bart - 11.30.87 extended node */
	    /* n->ln_Type = VIEW_EXTRA_TYPE; */
	
	    n->xln_Type = NT_GRAPHICS;
	    n->xln_Subsystem = SS_GRAPHICS;
	    n->xln_Subtype = VIEW_EXTRA_TYPE;
	    n->xln_Library = GB;
	    n->xln_Init = gfxnode_init;
d70 1
a70 3
	    /* fetch default monitorspec from list */
	    {
		/* assume that we can ALWAYS find the default monitor */
d72 4
a75 2
		    struct MonitorSpec *mspc = 
		    FindName(&GB->MonitorList,DEFAULT_MONITOR_NAME);
d78 1
a78 1
		    kprintf("gfxnew: default monitorspec @@0x%08lx\n",mspc);
d80 2
a81 1
		    ((struct ViewExtra *)n)->Monitor = mspc;
d89 4
a92 3
	    n = AllocMem(sizeof(struct ViewPortExtra),MEMF_PUBLIC|MEMF_CLEAR);
	    /* bart - 11.30.87 extended node */
	    /* n->ln_Type = VIEWPORT_EXTRA_TYPE; */
d94 6
a99 5
	    n->xln_Type = NT_GRAPHICS;
	    n->xln_Subsystem = SS_GRAPHICS;
	    n->xln_Subtype = VIEWPORT_EXTRA_TYPE;
	    n->xln_Library = GB;
	    n->xln_Init = gfxinit;
d107 9
a115 7
	    n = AllocMem(sizeof(struct SpecialMonitor),MEMF_PUBLIC|MEMF_CLEAR);
	    n->xln_Type = NT_GRAPHICS;
	    n->xln_Subsystem = SS_GRAPHICS;
	    n->xln_Subtype = SPECIAL_MONITOR_TYPE;
	    n->xln_Library = GB;
	    n->xln_Init = gfxinit;
	    ((struct SpecialMonitor *)n)->do_monitor = default_monitor;
d128 7
a134 6
	    n = AllocMem(sizeof(struct MonitorSpec),MEMF_PUBLIC|MEMF_CLEAR);
	    n->xln_Type = NT_GRAPHICS;
	    n->xln_Subsystem = SS_GRAPHICS;
	    n->xln_Subtype = MONITOR_SPEC_TYPE;
	    n->xln_Library = GB;
	    n->xln_Init = monitor_init;
d136 4
a139 4
	    /* initialize transformation functions */
	    ((struct MonitorSpec *)n)->ms_transform = monitor_transform;
	    ((struct MonitorSpec *)n)->ms_translate = monitor_translate;
	    ((struct MonitorSpec *)n)->ms_scale     = monitor_scale;
d141 3
a143 3
	    /* initialize transformation offsets */
	    ((struct MonitorSpec *)n)->ms_xoffset   = STANDARD_XOFFSET;
	    ((struct MonitorSpec *)n)->ms_yoffset   = STANDARD_YOFFSET;
d145 4
a148 3
	    /* initialize bounding function */
	    ((struct MonitorSpec *)n)->ms_maxoscan  = monitor_bounds;
	    ((struct MonitorSpec *)n)->ms_videoscan = video_bounds;
@


36.14
log
@id
@
text
@d3 1
a3 1
*	$Id: $
d11 1
d146 1
a146 1
	    Alert(0x12345);
d328 1
a328 1
			default :       Alert(0x54321);
d332 1
a332 1
		default :       Alert(0x54321);
d336 1
a336 1
	default :       Alert(0x54321);
@


36.13
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/memory.c,v 36.12 88/11/01 15:46:48 bart Exp Locker: bart $
@


36.12
log
@extended monitorspec structure
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.11 88/10/24 18:52:06 bart Exp $
@


36.11
log
@hash table allocate/forget optimisations for performance
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.10 88/10/21 13:48:57 bart Exp $
@


36.10
log
@speed up/debug/optimise hash table algorithms
bart
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.9 88/09/13 17:01:41 bart Exp $
d183 3
a185 1
	for(;(n = table[key])&&cnt; key = (key+1)%HASHTABLE_NUMENTRIES, cnt--);
d206 1
a206 1
	for(;(n = table[key])&&cnt; key = (key+1)%HASHTABLE_NUMENTRIES, cnt--)
d218 1
d220 1
a220 2
	    /* come up with some hack */
	    /* this should work most of the time */
d222 36
a257 4
	    before = (key-1)%HASHTABLE_NUMENTRIES;
	    after  = (key+1)%HASHTABLE_NUMENTRIES;
	    if (table[before] == 0)	table[key] = 0;
	    if (table[after] == 0) 	table[key] = 0;
d260 2
a265 5
		    }
		    while (table[after] == FORGOTTEN)
		    {
			    table[after] = 0;
			    after = (after + 1) % HASHTABLE_NUMENTRIES;
@


36.9
log
@videoscan() processing and denise backwards compatibility
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.8 88/09/13 11:21:13 bart Exp $
d17 4
a40 1

a151 38
gfxfree(n)
struct ExtendedNode *n;
{
    switch(n->xln_Type)
    {
	case NT_GRAPHICS :
	{
	    switch(n->xln_Subsystem)
	    {
		case SS_GRAPHICS:
		{
		    switch(n->xln_Subtype)
		    {
			case VIEW_EXTRA_TYPE :
			    FreeMem(n,sizeof(struct ViewExtra));
			    break;
			case VIEWPORT_EXTRA_TYPE :
			    FreeMem(n,sizeof(struct ViewPortExtra));
			    break;
			case SPECIAL_MONITOR_TYPE:
			    FreeMem(n,sizeof(struct SpecialMonitor));
			    break;
			case MONITOR_SPEC_TYPE:
			    FreeMem(n,sizeof(struct MonitorSpec));
			    break;
			default :       Alert(0x54321);
			    break;
		    }
		}   break;
		default :       Alert(0x54321);
		    break;
	    }
	}   break;
	default :       Alert(0x54321);
	    break;
    }
}

a175 2
	int index;
	int key;
d178 1
d180 1
a180 1
	key = old;
d182 2
a183 1
	FETCHGBASE;
d185 5
a189 7
	table = GB->hash_table;

	while (n = table[hashit(key++)]);	/* find unused entry */
	key--;					/* backup */
	index = hashit(key);
	table[index] = new;
	new->backlink = old;
d197 2
a198 2
	int index,before,after;
	int key;
d202 1
a202 1
	key = old;
d204 8
a211 1
	FETCHGBASE;
d213 1
a213 3
	table = GB->hash_table;

	do
d215 1
a215 4
		index = hashit(key++);
		n =  table[index];
		if (n == 0)	return (0);
	} while (n->backlink != old);
d217 2
a218 1
	table[index] = -1;	/* free that entry */
d220 20
a239 22
	/* now garbage collect */

	/* come up with some hack */
	/* this should work most of the time */


	before = (index - 1) & 0xff;
	after = (index + 1) & 0xff;
	if (table[before] == 0)	table[index] = 0;
	if (table[after] == 0) table[index] = 0;
	if (table[index] == 0)
	{
		while (table[before] == -1)
		{
			table[before] = 0;
			before = (before - 1) & 0xff;
		}
		while (table[after] == -1)
		{
			table[after] = 0;
			after = (after + 1) & 0xff;
		}
a240 3
	/* there is enough info in the table to completely */
	/* reconstruct table, each entry points to an Associated Node */
	/* and each Associated Node contains the key */
d248 1
a249 2
	int key = old;
	int index;
d251 1
a251 2
	FETCHGBASE;
	table = GB->hash_table;
d253 1
a253 1
	do
d255 3
a257 5
		index = hashit(key++);
		n =  table[index];
		if (n == 0)	return (0);
	} while (n->backlink != old);
	return(n);
d259 50
@


36.8
log
@back to maxoscan for jimm
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.7 88/09/13 10:31:18 bart Exp $
d116 1
d134 3
a136 5
	    /* initialize safe bounding function */
	    ((struct MonitorSpec *)n)->ms_maxoscan = monitor_bounds;

	    /* initialize extreme bounding function -- same for now */
	    ((struct MonitorSpec *)n)->ms_videoscan = monitor_bounds;
@


36.7
log
@ms_normaloscan
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.6 88/09/12 16:58:43 bart Exp $
d134 1
a134 1
	    ((struct MonitorSpec *)n)->ms_normaloscan = monitor_bounds;
@


36.6
log
@ms_videoscan = monitor_bounds (temporarily the same as maxoscan)
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.5 88/08/07 16:50:47 bart Exp $
d134 1
a134 1
	    ((struct MonitorSpec *)n)->ms_maxoscan = monitor_bounds;
@


36.5
log
@checkpoint - assembly interface to monitorspec routines
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.4 88/09/01 09:42:10 bart Exp $
d133 1
a133 1
	    /* initialize bounding function */
d136 2
@


36.4
log
@maxoscan() initialization
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.3 88/07/23 17:09:04 bart Exp $
d51 1
d63 1
a63 1
	    n->xln_Init = gfxinit;
d111 5
a115 5
	    extern LONG init_monitorspec();
	    extern LONG transform_monitorspec();
	    extern LONG translate_monitorspec();
	    extern LONG scale_monitorspec();
	    extern LONG maxoscan();
d122 1
a122 1
	    n->xln_Init = init_monitorspec;
d125 3
a127 3
	    ((struct MonitorSpec *)n)->ms_transform = transform_monitorspec;
	    ((struct MonitorSpec *)n)->ms_translate = translate_monitorspec;
	    ((struct MonitorSpec *)n)->ms_scale     = scale_monitorspec;
d134 1
a134 1
	    ((struct MonitorSpec *)n)->ms_maxoscan = maxoscan;
@


36.3
log
@monitorspec -- bart 07.23.88 merge source
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.2 88/05/31 11:56:26 bart Exp $
d45 4
d61 1
a65 4
		struct GfxBase *GB;

		FETCHGBASE;

d89 1
d102 1
d114 1
a115 6
#ifdef BARTDEBUG
	    struct GfxBase *GB;

	    FETCHGBASE;
#endif

d120 1
d132 2
a133 3
#ifdef BARTDEBUG
	    ((struct MonitorSpec *)n)->ms_reserved = GB;
#endif
@


36.2
log
@NT_GRAPHICS (extended type removed from exec)
bart
@
text
@d3 1
a3 1
*	$Header: memory.c,v 36.1 88/03/10 16:11:57 dale Exp $
d23 15
d44 4
a47 2
	struct ExtendedNode *n;
	switch (nodetype)
d49 1
a49 8
		case VIEW_EXTRA_TYPE :
					n = AllocMem(sizeof(struct ViewExtra),MEMF_PUBLIC|MEMF_CLEAR);
					/* bart - 11.30.87 extended node */
					/* n->ln_Type = VIEW_EXTRA_TYPE; */
				
					n->xln_Type = NT_GRAPHICS;
					n->xln_Subsystem = SS_GRAPHICS;
					n->xln_Subtype = VIEW_EXTRA_TYPE;
d51 7
a57 5
					break;
		case VIEWPORT_EXTRA_TYPE :
					n = AllocMem(sizeof(struct ViewPortExtra),MEMF_PUBLIC|MEMF_CLEAR);
					/* bart - 11.30.87 extended node */
					/* n->ln_Type = VIEWPORT_EXTRA_TYPE; */
d59 3
a61 3
					n->xln_Type = NT_GRAPHICS;
					n->xln_Subsystem = SS_GRAPHICS;
					n->xln_Subtype = VIEWPORT_EXTRA_TYPE;
d63 13
a75 4
					break;
		default :
				Alert(0x12345);
				break;
d77 70
a146 1
	return (n);
d152 3
a154 1
	switch(n->xln_Type)
d156 3
a158 1
		case NT_GRAPHICS :
d160 25
a184 23
			switch(n->xln_Subsystem)
			{
				case SS_GRAPHICS:
				{
					switch(n->xln_Subtype)
					{
						case VIEW_EXTRA_TYPE :
							FreeMem(n,sizeof(struct ViewExtra));
							break;
						case VIEWPORT_EXTRA_TYPE :
							FreeMem(n,sizeof(struct ViewPortExtra));
							break;
						default :		Alert(0x54321);
							break;
					}
				}	break;
				default :		Alert(0x54321);
					break;
			}
		}	break;
		default :		Alert(0x54321);
			break;
	}
@


36.1
log
@
@
text
@d3 1
a3 1
*	$Header: $
d37 1
a37 1
					n->xln_Type = NT_EXTENDED;
d47 1
a47 1
					n->xln_Type = NT_EXTENDED;
d64 1
a64 1
		case NT_EXTENDED :
@
