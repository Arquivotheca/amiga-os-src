head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.2 rel39_76:39.2 rel39_71:39.2 rel39_65:39.2 rel39_64:39.2 rel39_61:39.2 rel39_60:39.2 rel39_55:39.1 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.1 V37_9:37.1 V37_8:37.1 V37_7:37.1 V37_6:37.1 V37_5:37.1 V37_4:37.1 V37_3:37.1 V37_2:37.0 V37_1:37.0 V36_209:36.7 V36_208:36.7 V36_207:36.7 V36_205:36.7 V36_203:36.7 V36_202:36.7 V36_201:36.7 V36_200:36.7 V36_199:36.7 V36_198:36.7 V36_196:36.7 V36_195:36.7 V36_194:36.7 V36_193:36.7 V36_192:36.7 V36_191:36.7 V36_190:36.7 V36_189:36.7 V36_188:36.7 V36_186:36.7 V36_185:36.7 V36_184:36.7 V36_182:36.7 V36_181:36.7;
locks    ; strict;
comment  @ * @;


39.2
date     92.05.05.11.47.58;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.04.27.12.26.22;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.14.01;  author chrisg;  state Exp;
branches ;
next     37.6;

37.6
date     91.05.20.11.05.12;  author chrisg;  state Exp;
branches ;
next     37.5;

37.5
date     91.05.03.15.37.57;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.03.10.49.16;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.02.14.22.16;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.02.12.42.18;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.18.17.33.10;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.17.59;  author spence;  state Exp;
branches ;
next     36.7;

36.7
date     90.07.27.16.54.37;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     90.03.28.09.09.46;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     88.11.16.10.04.12;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     88.11.14.10.33.08;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     88.09.22.15.56.34;  author dale;  state Exp;
branches ;
next     36.2;

36.2
date     88.09.20.21.02.26;  author dale;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.10.51;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@ made pass 0 for temp.
@
text
@/******************************************************************************
*
*	Source Control
*	--------------
*	$Id: blitplate.c,v 39.1 92/04/27 12:26:22 chrisg Exp Locker: chrisg $
*
******************************************************************************/

/* areafill code */
#include <exec/types.h>
#include <graphics/gfx.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/libraries.h>
#include <exec/interrupts.h>
#include <graphics/gfxbase.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <hardware/custom.h>
#include <hardware/blit.h>
#include <hardware/intbits.h>
#include <hardware/dmabits.h>
#include "/sane_names.h"
#include "gfxblit.h"
#include "/gfxpragmas.h"
#include "/macros.h"
#include <exec/memory.h>
#include "c.protos"

extern struct Custom custom;

#define DOWNCODE

#define	TRAP	( TRUE )

/*#define DEBUG*/
/*#define DEBUG1*/
/*#define DEBUGFILL*/
/*#define DEBUGDEBUG*/
#define BUGFIXED

extern USHORT fwmaskTable[16];
extern USHORT lwmaskTable[16];

/*
unsigned short fwmaskTable[]=
{
    0xffff,0x7fff,0x3fff,0x1fff,
    0xfff,0x7ff,0x3ff,0x1ff,
    0xff,0x7f,0x3f,0x1f,
    0xf,0x7,0x3,0x1
};
*/

char * __regargs makemask(char *ras,short bpr, short x,short width,
			  short height,int *newras)
{
	int tot_bytes;
	char *p;
	struct BitMap sbm,dbm;
//	int to_x;	not referenced CHG

	tot_bytes = smuls(bpr,height);
#ifdef DEBUG
	printf("makemask(%lx,bpr=%ld,%ld,h=%ld ",ras,bpr,height);
#endif
	p = (char *)getmustmem(tot_bytes,MEMF_CHIP);
#ifdef DEBUG
	printf("%lx\n",p);
#endif
	if (p)	/* getmustmem() now returns NULL instead of GURUing - spence Jan 18 1991 */
	{
		BLTCLEAR(p,tot_bytes,0);
		INITBITMAP(&sbm,1,bpr<<3,height);
		INITBITMAP(&dbm,1,bpr<<3,height);
		sbm.Planes[0] = ras;
		dbm.Planes[0] = p;
		gfx_BltBitMap(&sbm,x,0,&dbm,x,0,width,height,NANBC|NABC|ABNC|ABC,1,0);
#ifdef DEBUGDEBUG
	Debug();
#endif
		*newras = tot_bytes;
	}
	return(p);
}

void oldbltpattern(w,ras,cr,rect,fillbytes,fudge,rx,offsetx,offsety)
register struct RastPort *w;
char *ras;
int fillbytes;
struct Rectangle rect;
struct ClipRect *cr;
short fudge,rx;
short offsetx,offsety;
{
    short shift;
	short height;
	short width;
    int rasdx;
    char **pptr;
    short fillbytes_needed;
#ifndef DOWNCODE
    struct AmigaRegs *io;
#endif
    register struct gfxbltnd *l;
	int newras;

    struct gfxbltnd lptmp;

    l = &lptmp;
#ifndef DOWNCODE
    io = &custom;
#endif
	height = rect.MaxY - rect.MinY + 1;
	width = rect.MaxX - rect.MinX + 1;
	fillbytes_needed = BLTBYTES(rect.MinX,rect.MaxX);
	/* Dale's new blither */
	fillbytes_needed = MAX(fillbytes_needed,BLTBYTES(offsetx,offsetx+width-1));
	newras = 0;
	l->bltcon1 = 0;
#ifdef DEBUG
	if TRAP printf("height=%ld,width=%ld\n",height,width);
#endif

    pptr = w->BitMap->Planes;
    rasdx = smuls(rect.MinY , w->BitMap->BytesPerRow) + (rect.MinX>>3);
#ifdef DEBUG
	if TRAP
	{
    printf("blitplate(%lx,%lx,%lx,%d,%d,%d,%d,%lx,%lx)\n",w,ras,cr,rect,offsetx,offsety);
#ifdef DEBUGDEBUG
    Debug();
#endif
	}
#endif
    if (ras == 0)
    {
		shift = 0;
		l->fwmask = fwmaskTable[0xf & rect.MinX];
		l->lwmask = fwmaskTable[0xf & (rect.MaxX +1)];
		if (l->lwmask != 0xffff) l->lwmask = ~l->lwmask;
		l->bltcon0 = DEST|SRCC;
		fillbytes = fillbytes_needed;
    }
    else
    {	/* real areafill here */
	/* Dale's blither */
		shift = (rect.MinX&15) - (offsetx & 15);
		l->bltcon0 = DEST|SRCA|SRCC|(shift<<ASHIFTSHIFT);
		if (cr == 0)
		{
			/*l->bltpta = (char *)ras;*/
			l->fwmask = 0xffff;
	    	if (fillbytes == fillbytes_needed)
			{
				/* l->lwmask = 0xffff; */
				l->lwmask = lwmaskTable[(width - 1) & 0xf];
			}
	    	else
				l->lwmask = 0;
				/*l->lwmask = lwmaskTable[shift & 15];*/
		}
		else
		{
#ifdef DEBUG
		if TRAP
			printf("offsetx = %lx y=%lx",offsetx,offsety);
    /*printf("clipping(%lx,%lx,%ld,%ld,%ld,%ld)",ras,cr,xl,yl,maxx,maxy);*/
#endif
			/* clipping */
			/* marker */
			if (shift < 0)
			{
				/* set up new mask */
				ras = makemask(ras,fillbytes,offsetx,width,height+offsety,
								&newras);
			}
			if (newras == 0)
			{
				/* HERE */
				if (fillbytes != fillbytes_needed)
				{
#ifdef DEBUG
					printf(" here you dork\n");
#endif
					l->fwmask = fwmaskTable[offsetx & 15];
					l->lwmask = 0;
					if (fillbytes == 2)
					{
						/* use fwmask to trim end as well */
						if ( width >= (fillbytes<<3) ) ;
						else l->fwmask &= lwmaskTable[(offsetx+width-1) & 15];
					}
					else
					{
							/* have to use another temp buffer to do this */
						ras = makemask(ras,fillbytes,offsetx,width,height+offsety,
								&newras);
					}
				}
				else
				{
#ifdef DEBUG
					printf("no asshole, over here\n");
#endif
					l->fwmask = fwmaskTable[offsetx & 15];
					if ( width >= (fillbytes<<3) ) l->lwmask = 0xffff;
					else
					{
						ras = makemask(ras,fillbytes,offsetx,width,height+offsety,
								&newras);
						l->lwmask = 0xffff;
					}
				}
			}
			if (newras)
			{
				if (shift < 0)
				{
					l->lwmask = 0xffff;
					l->fwmask = 0xffff;
					l->bltcon1 = BLITREVERSE;
					l->bltcon0 = (l->bltcon0 & 0xfff) | ((-shift)<<12);
				}
				else
				{
					if (fillbytes >= fillbytes_needed)	l->lwmask = 0xffff;
					else					l->lwmask = 0;
					l->fwmask = 0xffff;
				}
			}
		}
    }
	if (ras)	l->bltpta = (char *)ras + (offsetx>>3) + smuls(offsety,fillbytes);
	if (l->bltcon1 & BLITREVERSE)
	{
		if (w->AreaPtrn == 0)
		{
	   		l->bltmdc = -w->BitMap->BytesPerRow;
	   		l->bltmda = -fillbytes;
		}
		else
		{
	    	l->bltmdc = -(w->BitMap->BytesPerRow<<ABS(w->AreaPtSz));
	    	l->bltmda = -(fillbytes<<ABS(w->AreaPtSz));
		}
		if (ras)	l->bltpta += fillbytes_needed - 2;
		rasdx += fillbytes_needed - 2;
	}
	else
	{
		if (w->AreaPtrn == 0)
		{
	   		l->bltmdc = w->BitMap->BytesPerRow;
	   		l->bltmda = fillbytes;
		}
		else
		{
	    	l->bltmdc = (w->BitMap->BytesPerRow<<ABS(w->AreaPtSz));
	    	l->bltmda = (fillbytes<<ABS(w->AreaPtSz));
		}
	}
	l->bltmdc -= fillbytes_needed;
	l->bltmda -= fillbytes_needed;
#ifdef DEBUG
	if TRAP
	{
		printf("pta = %lx fwm=%lx lwm=%lx\n",l->bltpta,l->fwmask,l->lwmask);
		printf("con0=%lx fbn=%lx shift=%ld\n",l->bltcon0,fillbytes_needed,shift);
		printf("ras=%lx rasdx=%lx\n",ras,rasdx);
		Debug();
	}
#endif

	l->bltsize = (height<<6)|(0x3f&(fillbytes_needed>>1));
	/* additions for new chips V1.4 */
	l->blitrows = height;
	l->blitwords = fillbytes_needed>>1;
    /*l->bltmdc = i;*/	/* to be changed to l->bltmdc */
	if (w->AreaPtrn)
	{
    	l->lminy = rect.MinY;
    	l->lmaxy = rect.MaxY;
    	l->fillbytes = fillbytes;
		l->fudge = fudge;
		l->rx = rx;
	}
#ifdef DOWNCODE
	bp_downcode(rasdx,l,w,pptr);
#else
	/* now only do if AreaPtrn */
    l->bpw = w->BitMap->BytesPerRow;
    l->j = 0;
    l->filln = ABS(w->AreaPtSz);
    l->bltptb = w->AreaPtrn;
    l->jstop = 1<<l->filln;
    OwnBlitter();
    waitblitdone();
    io->adata = 0xffff;
    io->bdata = 0xffff;
    io->fwmask = l->fwmask;
    io->lwmask = l->lwmask;
    io->bltmda = TOBB(l->bltmda);
    io->bltmdc = TOBB(l->bltmdc);
    io->bltmdd = TOBB(l->bltmdc);
    io->bltcon1 = l->bltcon1;
    if (w->AreaPtrn != 0)   /* pattern */
    {
#ifdef DEBUG
			printf("fudge=%lx\n",fudge);
#endif
	l->bltsize &= 0x3f;
	if (w->AreaPtSz >= 0 )
	{
#ifdef BUGFIXED
	    for(i=0;i<w->BitMap->Depth;i++) /* do all rasters */
	    {
		if (1 & (w->Mask>>i))   /* only if write mask allows */
		{
		    l->bltcon = w->minterms[i]|l->bltcon0;
		    l->bltptr = (int)(*pptr + rasdx);
		    do
		    {
			waitblitdone();
		    } while (patblit(l,&custom));
		}
		pptr++;
	    }
#endif
	}
	else
	    for(i=0;i<w->BitMap->Depth;i++) /* do all rasters */
	    {
		if (1 & (w->Mask>>i))   /* only if write mask allows */
		{
		    l->bltcon = w->minterms[i]|l->bltcon0;
		    l->bltptr = (int)(*pptr + rasdx);
		    do
		    {
			waitblitdone();
		    } while (clrblit(l,&custom));
		}
		pptr++;
	    }

    }
    else
	for(i=0;i<w->BitMap->Depth;i++) /* do all rasters */
	{
	    if (1 & (w->Mask>>i))   /* only if write mask allows */
	    {
		waitblitdone();
		io->bltpta = (UBYTE *)TOBB(l->bltpta);
		io->bltcon0 = w->minterms[i]|l->bltcon0;
		io->bltptc = (UBYTE *)(*pptr + rasdx);
		io->bltptd = (UBYTE *)(*pptr + rasdx);
		/* io->bltsize = l->bltsize; */
		start_bltnd(l,&custom);
	    }
	    pptr++;
	}
    DisownBlitter();
#endif
	if (newras)
	{
		waitblitdone();
		freemustmem(ras,newras);
	}
}

#ifndef DOWNCODE
start_blit(height,width)
UWORD height,width;
{
    register struct AmigaRegs *io = &custom;

    if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
    {
	if( (height < (1<<15)) && (width < ( 1<<11)) )
	{
	    io->bltsizv= (height & 0x7fff);
	    io->bltsizh= (width & 0x07ff);
	    return(TRUE);
	}
    }
    else
    {
	if( (height < (1<<10)) && (width < ( 1<<6)) )
	{
	    io->bltsize= (height << 6) + width;
	    return(TRUE);
	}
    }
    return(FALSE);
}

start_bltnd(bn)
register struct gfxbltnd *bn;
{
    register struct AmigaRegs *io = &custom;

    if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
    {
	start_blit(bn->blitrows,bn->blitwords);
    }
    else
    {
	io->bltsize= bn->bltsize;
    }
}
#endif

patblit(fl)
register struct gfxbltnd *fl;
{
	register struct AmigaRegs *io = (struct AmigaRegs *) (&custom);
    register int t;
	UWORD	mypat;
    mypat = *(fl->bltptb + ((fl->fudge+fl->lminy+fl->j)&(0xff>>(8-fl->filln))));
	/* must prerotate pattern by rx amount to the right */
	/*mypat = rotate(mypat,rx);*/
    io->bdata = rotate(mypat,fl->rx);
    t = umuls(fl->j,fl->fillbytes);
    io->bltpta = (UBYTE *)TOBB((int)fl->bltpta + t);
    io->bltcon0 = fl->bltcon0;
    t = umuls(fl->j,fl->bpw);
    io->bltptc = (UBYTE *)TOBB(fl->bltptr+t);
    io->bltptd = (UBYTE *)TOBB(fl->bltptr+t);
	if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
	/*if (0)*/
	{
	    io->bltsizv=((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1) & 0x7fff);
	    io->bltsizh=(fl->blitwords & 0x07ff);
	}
	else
    		io->bltsize = fl->bltsize +
			 ((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1)<<6);

    fl->j++;
    if  ((fl->j == fl->jstop)||(fl->lminy + fl->j > fl->lmaxy))
    {
	fl->j = 0;
	return(FALSE);  /* goto next bitplane */
    }
    return(TRUE);
}

clrblit(fl)
register struct gfxbltnd *fl;
{
	register struct AmigaRegs *io = (struct AmigaRegs *) (&custom);
    register int t;
	UWORD	mypat;
    mypat = *(fl->bltptb + ((fl->fudge+fl->lminy+fl->j)&(0xff>>(8-fl->filln))));
    io->bdata = rotate(mypat,fl->rx);
    t = umuls(fl->j,fl->fillbytes);
    io->bltpta = (UBYTE *)TOBB((int)fl->bltpta + t);
    io->bltcon0 = fl->bltcon0;
    t = umuls(fl->j,fl->bpw);
    io->bltptc = (UBYTE *)TOBB(fl->bltptr+t);
    io->bltptd = (UBYTE *)TOBB(fl->bltptr+t);
	if (GBASE->ChipRevBits0 & GFXF_BIG_BLITS)
	{
	    io->bltsizv=((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1) & 0x7fff);
	    io->bltsizh=(fl->blitwords & 0x07ff);
	}
	else
    		io->bltsize=fl->bltsize+
			((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1)<<6);
    fl->j++;
    if ( (fl->j == fl->jstop) || (fl->lminy + fl->j > fl->lmaxy))
    {
	fl->j = 0;
	fl->bltptb += 1<<(fl->filln);
	return(FALSE);  /* goto next bitplane */
    }
    return(TRUE);
}

@


39.1
log
@registerized blitbitmap.
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 39.0 91/08/21 17:14:01 chrisg Exp Locker: chrisg $
d78 1
a78 1
		gfx_BltBitMap(&sbm,x,0,&dbm,x,0,width,height,NANBC|NABC|ABNC|ABC,1);
@


39.0
log
@Bumped
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.6 91/05/20 11:05:12 chrisg Exp Locker: chrisg $
d25 1
d78 1
a78 1
		BLTBITMAP(&sbm,x,0,&dbm,x,0,width,height,NANBC|NABC|ABNC|ABC,1);
@


37.6
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 1.1 91/05/20 10:38:47 chrisg Exp $
@


37.5
log
@ optimized to use GBASE #define
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.4 91/05/03 10:49:16 chrisg Exp Locker: chrisg $
d27 1
d54 2
a55 5
char *makemask(ras,bpr,x,width,height,newras)
char *ras;
short bpr;
short width,height,x;
int *newras;
@


37.4
log
@ added a cast to kill compiler warning.
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.3 91/05/02 14:22:16 chrisg Exp Locker: chrisg $
a376 2
    struct GfxBase *GB;
    FETCHGBASE;
d378 1
a378 1
    if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
a401 2
    struct GfxBase *GB;
    FETCHGBASE;
d403 1
a403 1
    if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
a419 2
	struct GfxBase *GB;
	FETCHGBASE;
d430 1
a430 1
	if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
a451 1
struct GfxBase *GB;
a454 1
	FETCHGBASE;
d463 1
a463 1
	if (GB->ChipRevBits0 & GFXF_BIG_BLITS)
@


37.3
log
@ fixed some compiler warnings and added an include for lattice.
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.2 91/05/02 12:42:18 chrisg Exp Locker: chrisg $
d459 1
a459 1
	register struct AmigaRegs *io = &custom;
@


37.2
log
@ changed "../" to "/" for native build
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.1 91/01/18 17:33:10 spence Exp Locker: chrisg $
d19 1
d23 1
a23 1
#include </sane_names.h>
d62 1
a62 1
	int to_x;
d88 1
a88 1
oldbltpattern(w,ras,cr,rect,fillbytes,fudge,rx,offsetx,offsety)
d421 1
a421 1
	register struct AmigaRegs *io = &custom;
@


37.1
log
@y
makemask() now checks value returned from getmustmem() for NULL.
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 37.0 91/01/07 15:17:59 spence Exp Locker: spence $
d22 1
a22 1
#include <../sane_names.h>
d24 1
a24 1
#include "../macros.h"
@


37.0
log
@initial switchover from V36
@
text
@d5 1
a5 1
*	$Id: blitplate.c,v 36.7 90/07/27 16:54:37 bart Exp Locker: spence $
d71 8
a78 6
	BLTCLEAR(p,tot_bytes,0);
	INITBITMAP(&sbm,1,bpr<<3,height);
	INITBITMAP(&dbm,1,bpr<<3,height);
	sbm.Planes[0] = ras;
	dbm.Planes[0] = p;
	BLTBITMAP(&sbm,x,0,&dbm,x,0,width,height,NANBC|NABC|ABNC|ABC,1);
d82 2
a83 1
	*newras = tot_bytes;
@


36.7
log
@id
@
text
@d5 1
a5 1
*	$Id: $
@


36.6
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/blitplate.c,v 36.5 88/11/16 10:04:12 bart Exp Locker: bart $
@


36.5
log
@mask big blits for upwards compatibility
@
text
@d5 1
a5 1
*	$Header: blitplate.c,v 36.4 88/11/14 10:33:08 bart Exp $
@


36.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: blitplate.c,v 36.3 88/09/22 15:56:34 dale Exp $
d380 2
a381 2
	    io->bltsizv= height;
	    io->bltsizh= width;
d435 2
a436 2
    		io->bltsizv=(((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1);
    		io->bltsizh=fl->blitwords;
d469 2
a470 2
    		io->bltsizv=(((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1);
    		io->bltsizh=fl->blitwords;
@


36.3
log
@Code reduction.

@
text
@d5 1
a5 1
*	$Header: blitplate.c,v 36.2 88/09/20 21:02:26 dale Exp $
d354 2
a355 1
		io->bltsize = l->bltsize;
d367 46
@


36.2
log
@Added big blit support (new chips only) for areafills/rectfill.
@
text
@d5 1
a5 1
*	$Header: blitplate.c,v 36.1 88/03/10 16:10:51 dale Exp $
d367 1
a367 1
patblit(fl,gb)
a368 1
struct GfxBase *gb;
d373 2
d385 1
a385 1
	if (gb->ChipRevBits0 & GFXF_BIG_BLITS)
d404 1
a404 1
clrblit(fl,gb)
a405 1
struct GfxBase *gb;
d407 1
d411 1
d420 1
a420 1
	if (gb->ChipRevBits0 & GFXF_BIG_BLITS)
@


36.1
log
@V36 initial check in
@
text
@d5 1
a5 1
*	$Header: $
d273 3
a278 1
    	l->fillbytes = fillbytes;
d281 1
d360 5
a364 2
	if (newras)	waitblitdone();
	if (newras)	freemustmem(ras,newras);
d367 1
a367 1
patblit(fl)
d369 1
d384 10
a393 1
    io->bltsize=fl->bltsize+((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1)<<6);
d403 1
a403 1
clrblit(fl)
d405 1
d418 8
a425 1
    io->bltsize=fl->bltsize+((((fl->lmaxy-fl->lminy-fl->j)>>fl->filln)+1)<<6);
@
