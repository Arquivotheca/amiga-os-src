head     39.4;
branch   ;
access   ;
symbols  rel39_24:39.4 rel39_18:39.4 rel39_97:39.4 rel39_90:39.4 rel39_89:39.4 rel39_82:39.4 rel39_76:39.4 rel39_71:39.4 rel39_65:39.4 rel39_64:39.4 rel39_61:39.4 rel39_60:39.4 rel39_55:39.4 rel39_47:39.4 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.2 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.11 V36_208:36.11 V36_207:36.11 V36_205:36.11 V36_203:36.11 V36_202:36.11 V36_201:36.11 V36_200:36.11 V36_199:36.11 V36_198:36.11 V36_196:36.11 V36_195:36.11 V36_194:36.11 V36_193:36.11 V36_192:36.11 V36_191:36.11 V36_190:36.11 V36_189:36.11 V36_188:36.11 V36_186:36.11 V36_185:36.11 V36_184:36.11 V36_182:36.11 V36_181:36.11;
locks    ; strict;
comment  @*   @;


39.4
date     92.03.24.15.31.47;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.13.50.52;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.11.16.11.37;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.11.11.48.22;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.21.18;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.20.11.19.16;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.12.50.18;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.20.28;  author spence;  state Exp;
branches ;
next     36.11;

36.11
date     90.07.27.16.59.21;  author bart;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.06.12.29.40;  author bart;  state Exp;
branches ;
next     36.9;

36.9
date     90.04.05.17.28.59;  author bart;  state Exp;
branches ;
next     36.8;

36.8
date     90.03.28.09.13.44;  author bart;  state Exp;
branches ;
next     36.7;

36.7
date     90.02.27.13.28.09;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     89.11.09.17.14.05;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     89.11.06.13.33.29;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.10.30.10.20.01;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.27.09.43.09;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.27.09.40.34;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.26.11.36.19;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.10.25.18.14.32;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.4
log
@obsolete. rastrect now in misc.asm
@
text
@/******************************************************************************
*
*	Source Control
*	--------------
*	$Id: rastrect.c,v 39.3 92/02/20 13:50:52 chrisg Exp Locker: chrisg $
*
******************************************************************************/

obsolete.
@


39.3
log
@made use utility pragmas.
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 39.2 91/11/11 16:11:37 chrisg Exp Locker: chrisg $
d9 1
a9 136
/* hookfill code */

#include <exec/types.h>
#include <exec/nodes.h>
#include <utility/hooks.h>
#include <graphics/gfx.h>
#include <graphics/clip.h>
#include <graphics/rastport.h>
#include <pragmas/utility_pragmas.h>
#include "/macros.h"
#include "c.protos"

/* intersect rect with cliprects and call hook */

void rastrect(struct RastPort  *rp, struct Rectangle rect,
						struct Hook *hook)
{
    struct Layer  *l = rp->Layer;

    if(l) /* intersect rect with ClipRects, calling hook for each */
    {
		struct RastPort tmprp;	/* work rastport */
		struct BitMap   *sbm;	/* shared bitmap */
		struct ClipRect *cr;	/* cliprect */

		LOCKLAYER(l);

		tmprp = *rp;

		sbm = tmprp.BitMap;

		for (cr = l->ClipRect; cr; cr = cr->Next)
		{
			struct Rectangle clip;

			clip = rect;

			clip.MinX += (l->bounds.MinX-l->Scroll_X);
			clip.MaxX += (l->bounds.MinX-l->Scroll_X);
			clip.MinY += (l->bounds.MinY-l->Scroll_Y);
			clip.MaxY += (l->bounds.MinY-l->Scroll_Y);

			if( rectXrect(&clip,&cr->bounds) )
			{
				WORD offsetx;
				WORD offsety;

				intersect(&clip,&cr->bounds,&clip);

				offsetx = clip.MinX - (l->bounds.MinX-l->Scroll_X);
				offsety = clip.MinY - (l->bounds.MinY-l->Scroll_Y);

				if (cr->lobs)		      /* obscured? */
				{
					struct BitMap *bm;

					if (bm = cr->BitMap)
					{

						/* adjust obscured cliprect origin */

						clip.MinX -= cr->bounds.MinX;
						clip.MaxX -= cr->bounds.MinX; 
						clip.MinY -= cr->bounds.MinY;
						clip.MaxY -= cr->bounds.MinY; 

						/* re-align for off-screen bitmaps */

						clip.MinX += (cr->bounds.MinX & 0xF);
						clip.MaxX += (cr->bounds.MinX & 0xF);

						/* obscured bitmaps are nonlayered */

						tmprp.BitMap = bm;
						tmprp.Layer  = NULL;

						if(hook)
						{
						   CallRastRectHook(hook,&tmprp,l,PASSRECT(clip),offsetx,offsety);
						}

						tmprp.Layer  = l;
					}
				}
				else			  /* on screen */
				{
					/* onscreen bitmaps always layered */

					tmprp.BitMap = sbm;

					CallRastRectHook(hook,&tmprp,l,clip,offsetx,offsety);
				}
						
			}
		}

		if(sbm = l->SuperBitMap) 
		{
			tmprp.BitMap = sbm;
			tmprp.Layer  = NULL;

			for (cr = l->SuperClipRect; cr; cr = cr->Next)
			{
				struct Rectangle clip;

				clip = rect;

				if( rectXrect(&clip,&cr->bounds) )
				{
					WORD offsetx;
					WORD offsety;

					intersect(&clip,&cr->bounds,&clip);

					offsetx = clip.MinX;
					offsety = clip.MinY;

					CallRastRectHook(hook,&tmprp,NULL,PASSRECT(clip),offsetx,offsety);
				}
			}
		}

		UNLOCKLAYER(l); 

    }
    else
    {
		if(hook) CallRastRectHook(hook,rp,l,rect,rect.MinX,rect.MinY);
    }
}

int CallRastRectHook( struct Hook *hook,void *object, struct Layer *layer,
								struct Rectangle bounds,WORD x, WORD y)
{
    if (hook) return( CallHookPkt( hook, object, &layer) ); else return( NULL );
}
@


39.2
log
@ used PASSRECT macro to fool LC into generating good code.
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 39.1 91/11/11 11:48:22 chrisg Exp Locker: chrisg $
d17 1
@


39.1
log
@  removed __regargs. this caused the ICON bug! In my opinion,
stack tricks like this should be done in assembly language,
not C.
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 39.0 91/08/21 17:21:18 chrisg Exp Locker: chrisg $
d86 1
a86 1
						   CallRastRectHook(hook,&tmprp,l,clip,offsetx,offsety);
d125 1
a125 1
					CallRastRectHook(hook,&tmprp,NULL,clip,offsetx,offsety);
@


39.0
log
@Bumped
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 37.2 91/05/20 11:19:16 chrisg Exp Locker: chrisg $
d139 1
a139 1
int __regargs CallRastRectHook( struct Hook *hook,void *object, struct Layer *layer,
@


37.2
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 1.1 91/05/20 10:42:50 chrisg Exp $
@


37.1
log
@ changed "../" to "/" for native build
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 37.0 91/01/07 15:20:28 spence Exp Locker: chrisg $
d18 1
d22 2
a23 4
rastrect(rp,rect,hook)
struct RastPort  *rp;
struct Rectangle rect;
struct Hook   	 *hook;
d139 2
a140 7
CallRastRectHook( hook, object, layer, bounds, x, y )
struct Hook	*hook;
VOID		*object;
struct Layer    *layer;
struct Rectangle bounds;
WORD            x; 
WORD            y;
@


37.0
log
@initial switchover from V36
@
text
@d5 1
a5 1
*	$Id: rastrect.c,v 36.11 90/07/27 16:59:21 bart Exp Locker: spence $
d17 1
a17 1
#include "../macros.h"
@


36.11
log
@id
@
text
@d5 1
a5 1
*	$Id: $
@


36.10
log
@add superbitmap processing to rastrect (called from eraserect)
remove kludge for layers rp->layer->rp != rp
rsbx has fixed at his end
@
text
@d5 1
a5 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/c/RCS/rastrect.c,v 36.9 90/04/05 17:28:59 bart Exp Locker: bart $
@


36.9
log
@l->rp = rp for default_backfillhook of layers
@
text
@d5 1
a5 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/rastrect.c,v 36.8 90/03/28 09:13:44 bart Exp Locker: bart $
a26 1
    struct BitMap *bm;
d30 3
a32 3
		struct RastPort *srp = l->rp;		/* saved rastport */
		struct BitMap   *sbm = rp->BitMap;	/* shared bitmap */
		struct ClipRect *cr;
d36 1
a36 1
		l->rp = rp;		/* be very very careful */
d38 2
d63 2
d82 2
a83 2
						rp->BitMap = bm;
						rp->Layer  = NULL;
d85 4
a88 4
					if(hook)
					{
						CallRastRectHook(hook,rp,l,clip,offsetx,offsety);
					}
d90 1
a90 1
					rp->Layer  = l;
d97 1
a97 1
					rp->BitMap = sbm;
d99 1
a99 1
					CallRastRectHook(hook,rp,l,clip,offsetx,offsety);
d105 4
a108 1
		l->rp = srp; 	/* restore saved rastport */
d110 20
a129 1
		rp->BitMap = sbm;
@


36.8
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/rastrect.c,v 36.7 90/02/27 13:28:09 bart Exp Locker: bart $
a25 1
    struct BitMap *sbm = rp->BitMap;	/* shared bitmap */
d31 3
a33 1
	struct ClipRect *cr;
d35 1
a35 1
	LOCKLAYER(l);
d37 1
a37 3
	for (cr = l->ClipRect; cr; cr = cr->Next)
	{
	    struct Rectangle clip;
d39 3
a41 1
	    clip = rect;
d43 1
a43 4
	    clip.MinX += (l->bounds.MinX-l->Scroll_X);
	    clip.MaxX += (l->bounds.MinX-l->Scroll_X);
	    clip.MinY += (l->bounds.MinY-l->Scroll_Y);
	    clip.MaxY += (l->bounds.MinY-l->Scroll_Y);
d45 4
a48 4
	    if( rectXrect(&clip,&cr->bounds) )
	    {
		WORD offsetx;
		WORD offsety;
d50 4
a53 1
		intersect(&clip,&cr->bounds,&clip);
d55 1
a55 2
		offsetx = clip.MinX - (l->bounds.MinX-l->Scroll_X);
		offsety = clip.MinY - (l->bounds.MinY-l->Scroll_Y);
d57 2
a58 5
		if (cr->lobs)		      /* obscured? */
		{
		    if (bm = cr->BitMap)
		    {
			/* adjust obscured cliprect origin */
d60 4
a63 4
			clip.MinX -= cr->bounds.MinX;
			clip.MaxX -= cr->bounds.MinX; 
			clip.MinY -= cr->bounds.MinY;
			clip.MaxY -= cr->bounds.MinY; 
d65 1
a65 1
			/* re-align for off-screen bitmaps */
d67 4
a70 2
			clip.MinX += (cr->bounds.MinX & 0xF);
			clip.MaxX += (cr->bounds.MinX & 0xF);
d72 1
a72 1
			/* obscured bitmaps are nonlayered */
d74 2
a75 2
			rp->BitMap = bm;
			rp->Layer  = NULL;
d77 1
a77 4
			if(hook)
			{
			    CallRastRectHook(hook,rp,l,clip,offsetx,offsety);
			}
d79 2
a80 6
			rp->Layer  = l;
		    }
		}
		else			  /* on screen */
		{
		    /* onscreen bitmaps always layered */
d82 4
a85 1
		    rp->BitMap = sbm;
d87 13
a99 1
		    CallRastRectHook(hook,rp,l,clip,offsetx,offsety);
a100 3
				
	    }
	}
d102 1
a102 1
	rp->BitMap = sbm;
d104 4
a107 1
	UNLOCKLAYER(l); 
d111 1
a111 1
	if(hook) CallRastRectHook(hook,rp,l,rect,rect.MinX,rect.MinY);
@


36.7
log
@fix eraserect offset
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.6 89/11/09 17:14:05 bart Exp $
@


36.6
log
@bltbitmask rastrect hook
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.5 89/11/06 13:33:29 bart Exp $
a87 7
		    /* adjust onscreen cliprect origin */

		    clip.MinX -= (l->bounds.MinX-l->Scroll_X);
		    clip.MaxX -= (l->bounds.MinX-l->Scroll_X);
		    clip.MinY -= (l->bounds.MinY-l->Scroll_Y);
		    clip.MaxY -= (l->bounds.MinY-l->Scroll_Y);

@


36.5
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.4 89/10/30 10:20:01 bart Exp $
d30 1
a30 1
    if(l) /* intersect rect with ClipRects, calling BackFill for each */
d49 3
d54 4
a57 1
		if (cr->lobs)	/* obscured? */
d61 1
a61 2
			WORD	offsetx = clip.MinX;
			WORD	offsety = clip.MinY;
d68 7
d76 1
d82 2
d86 1
a86 1
		else		/* on screen */
d88 9
d98 2
a99 1
		    CallRastRectHook(hook,rp,l,clip,clip.MinX,clip.MinY);
@


36.4
log
@better adjustment of clip rectangle for offscreen bitmaps
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.3 89/10/27 09:43:09 bart Exp $
d86 1
a86 1
	if(hook) CallRastRectHook(hook,rp,l,rect);
@


36.3
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.2 89/10/27 09:40:34 bart Exp $
d58 5
d64 1
a64 2
			clip.MaxX -= clip.MinX; clip.MinX = 0;
			clip.MaxY -= clip.MinY; clip.MinY = 0;
@


36.2
log
@offsetx/y in callrastrecthook
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.1 89/10/26 11:36:19 bart Exp $
d86 1
a86 1
CallRastRectHook( hook, object, layer, bounds )
d91 2
@


36.1
log
@eraserect
@
text
@d5 1
a5 1
*	$Header: rastrect.c,v 36.0 89/10/25 18:14:32 bart Exp $
d55 3
d63 1
a63 1
			    CallRastRectHook(hook,rp,l,clip);
d70 1
a70 1
		    CallRastRectHook(hook,rp,l,clip);
@


36.0
log
@added to rcs for updating
@
text
@d5 1
a5 1
*	$Header: $
@
