head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0;
locks    chrisg:39.0; strict;
comment  @ * @;


39.0
date     91.08.21.17.21.04;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.14.11.31.44;  author spence;  state Exp;
branches ;
next     ;


desc
@The original (v37) makevp().
@


39.0
log
@Bumped
@
text
@ /******************************************************************************
*
*	$Id: oldmakevp.c,v 38.0 91/06/14 11:31:44 spence Exp Locker: chrisg $
*
******************************************************************************/

#define BUGGY_HARDWARE

/* graphics  kernel routines */
#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/interrupts.h> 
#include <exec/libraries.h>
#include <exec/memory.h>
#include <graphics/gfx.h>
#include <graphics/gfxbase.h>
#include <graphics/display.h>
#include <graphics/copper.h>
#include <graphics/view.h>
#include "tune.h"
#include <hardware/intbits.h>
#include <hardware/custom.h>
#include "/macros.h"
#include "/displayinfo_internal.h"

#define BATCH_MODE

#ifdef  BATCH_MODE
#ifndef  UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif
#endif

#include "c.protos"

#define DENISE_OFFSET	9

/*#define SAS_DEBUG*/
/*#define DEBUG*/
/*#define DEBUGDEBUG*/
/*#define MEMDEBUG*/
#define MAX_COLORS	32

#define HFIX(x)	(((x)*mspc->ratioh)>>4)
#define VFIX(y)	(((y)*mspc->ratiov)>>4)

#define NEW_HFIX(x)	((HFIX(x-4))+4)
#define DENISE_HFIX(x) ((HFIX(x-DENISE_OFFSET))+DENISE_OFFSET)

/*static int bplseq[] = { 3,5,1,2,4,0 };*/
			/* the firing order of a 6 cylinder engine */
static USHORT field_pick[6] = { 0xbc00, 0x7c00, 0xdc00, 0xec00,
				0xf400, 0xf800 };

/* to zero the display, no scroll, all sprites */
#define LEFT_EDGE_MAGIC 0x81
struct CopIns *cbump();

struct CopIns * __regargs clongmove(struct CopList **cl,struct CopIns *c,
									long a,long p,USHORT frame)
/* a = bpl register, p = bitplane address */
{
	/* move 2 words into 2 consecutive locations */
	/* first take care of long frame */
	c->OpCode = COPPER_MOVE|frame;
	c->DESTADDR = a;
	c->DESTDATA = (long)p>>16;
        CBUMP(cl);

        /*CMOVE(c,io->bplpt[i],TOBB((long)p));*/
	c->OpCode = COPPER_MOVE|frame;
	c->DESTADDR = a+2;
	c->DESTDATA = p;
        CBUMP(cl);
	return(c);
}

struct CopIns * __regargs cshortmove(struct CopList **cl,struct CopIns *c,
					long a,short p,USHORT frame)
/* a = bpl register, p = short something */
{
	/* first take care of long frame */
	c->OpCode = COPPER_MOVE|frame;
	c->DESTADDR = a;
	c->DESTDATA = p;
        CBUMP(cl);

	return(c);
}

extern UWORD dflt_clrs[];

#include "gs_info.h"

extern  struct Custom custom;

#define ALERTGFXNOMEMMAKEVP 0x82010030

ULONG new_mode(struct ViewPort *vp)
{
    ULONG  modes = vp->Modes;
    struct ColorMap *cm = vp->ColorMap;
    struct DisplayInfoRecord   *record = NULL;
	
    if( (cm && cm->Type)
    &&  ((record = cm->CoerceDisplayInfo)|| (record = cm->NormalDisplayInfo)) )
    {
	modes = record->rec_Control; /* v1.4 modes */
    }
    else
    {
	if(modes & EXTENDED_MODE)
	{
	    modes &= (0x8C04 | ((vp->Modes & DUALPF)? PF2PRI : 0));
	}
	else
	{
	    modes &= ((vp->Modes & SUPERHIRES)? ~HIRES : ~0);
	}
    }

    return(modes);
}

short __regargs get_dbytes(struct ViewPort *vp, short fstart, short fstop)
{
	short dbytes;
	ULONG  modes = new_mode(vp);

#ifndef ULTRA_RES
	if (modes      & SUPERHIRES)
	    dbytes = (0xfffc & (6 + ((fstop-fstart)>>1)))<<1;
	else
	    if (modes     & HIRES)
		dbytes = 0xfffc & (6 + ((fstop-fstart)>>1));
	else
#endif
		dbytes = 2 + ( (fstop - fstart)>>2 );
#ifdef DEBUG
		kprintf("fstop=%lx fstart=%lx dbytes=%ld\n",
			fstop , fstart,dbytes);
#endif
	return(dbytes);
};

unsigned short check_genlock(struct ColorMap *cm,int i)
{
	if ( cm && cm->Type && (cm->Flags & COLORMAP_TRANSPARENCY))
	{
		unsigned short *genlock_bits = cm->TransparencyBits;
		unsigned short mask = 0x8000;
		if (genlock_bits[i>>4] & (mask>>(i & 15)))
				return (mask);	/* mask happens to be 0x8000 */
	}
	return (0);
}

UWORD __regargs display_stop(struct MonitorSpec *mspc,UWORD dwstop)
{
	struct GfxBase *GB;

	FETCHGBASE;

	if (dwstop > mspc->DeniseMaxDisplayColumn)
	{
	    dwstop = DENISE_OFFSET+1;

	    if (!(GB->ChipRevBits0 & GFXF_HR_DENISE))
	    {
		dwstop += (mspc->DeniseMaxDisplayColumn);
	    }
	}
	return( dwstop );
}

makevport(view,vp)
struct View *view;
struct ViewPort *vp;
/* generate a set op intermediate copper instructions given a pointer */
/* to a View structure and a ViewPort */
{
    struct ViewExtra *ve=0;
    struct MonitorSpec *mspc=0;
    struct CopList *cl;
    struct CopIns *c;
    short x,y;
    short i;
    short min_ytop;
    short ytop;	/* absolute top of this viewport */
    short ybot;	/* absolute bottom of this viewport */
    short yclip;	/* force clipping of top lines of viewport */
    short depth;
    short mybplcon0;
    unsigned short bplcon3 = 0;
    unsigned short realbplcon0;
    struct Custom *io;
    struct RasInfo *r1,*r2=0;
    struct GfxBase *GB;
    struct gs_info info[2];
    USHORT frame = 0;
    ULONG  modes = new_mode(vp);
    UWORD  lace = (modes & INTERLACE);
    short  lshift = lace?1:0;
	UWORD t1,t2;

#ifdef NEW_HEDLEY
    struct ViewPort *old_vp=0;
    struct ViewPort hvp;
    struct RasInfo hri;
    struct BitMap hbm;
    struct ColorMap *cm = vp->ColorMap;
#endif

    /*kprintf("MAKEVP(%lx,%lx)\n",view,vp);*/
    FETCHGBASE;

    TestMe(view, vp);
}

#ifdef UNDEF {

#ifdef BATCH_MODE
    if(cm && cm->Type)
    {
	if(cm->Flags & VIDEOCONTROL_BATCH) /* avoid unneccesary forbids */
	{
	    struct TagItem *vc;
	    Forbid(); 
	    {
		if(vc = cm->cm_batch_items)
		{
		    if(cm->Flags & VIDEOCONTROL_BATCH)
		    {
			videocontrol(cm,vc); /* process batch */
		    }
		    /* cm->Flags &= ~VIDEOCONTROL_BATCH; */ /* do it again */
		}
	    }
	    Permit();
	}
    } 
#endif 

	mspc = GB->default_monitor;

	if (view->Modes & EXTEND_VSTRUCT)
	{
	    if((ve = (struct ViewExtra *) gfxlookup(view)) && ve->Monitor)
	    {
		mspc = ve->Monitor;
	    }
	}

	if (mspc->ms_Flags & REQUEST_A2024)
	{
		int width;
		int bpr;	/*bytes per physical row */
		int phys_rows = 200;	/* assume NTSC */
		struct RasInfo *ri = vp->RasInfo;
		struct BitMap *obm = ri->BitMap;
		if (GB->DisplayFlags & PAL)	phys_rows = 256;
		bpr = obm->BytesPerRow;
		width = bpr << 3;
		hvp = *vp;	/* copy whole structure */
		old_vp = vp;
		vp = &hvp;	/* bait and switch */
		vp->ExtendedModes = old_vp->ExtendedModes;
		vp->DxOffset = 0;	/* these are most likely ok */
		vp->DyOffset = 0;
		/* maybe we can support scrolling?, just a thot */
		hri.Next = 0;
		hri.RxOffset = ri->RxOffset; /*old_vp->RasInfo->RxOffset;*/
		hri.RyOffset = ri->RyOffset; /*old_vp->RasInfo->RyOffset;*/
		vp->RasInfo = &hri;
		hri.BitMap = &hbm;
		/* tweek viewport around for degenerate hardware */
		/* user depth of 1 requires cheating with 2 */
		/* user depth of 2 requires cheating with 4 */
		INITBITMAP(&hbm,obm->Depth<<1,width*2,obm->Rows);
		hbm.Planes[0] = obm->Planes[0];
		hbm.Planes[1] = obm->Planes[0]+bpr;
		if (obm->Depth == 2)
		{
			hbm.Planes[2] = obm->Planes[1];
			hbm.Planes[3] = obm->Planes[1]+bpr;
		}
		vp->DHeight = phys_rows;
		if (modes == A2024TENHERTZ_KEY)
		{
			vp->Modes &= ~HIRES;
			vp->DWidth = 352;
			/* view->DxOffset = 0x81-16; */
		}
		else
		{
			vp->DWidth = 512;
			/* view->DxOffset = 0x81; */
		}
	}

        min_ytop = mspc->min_row ;

	/* hedley support is now done as a variant of interlace */
	/* this is where the hedley stuff used to be */

	/* both must be defined */

	/* define for first frame */
	if (lace)    frame = CPR_NT_LOF;

	if (mspc->ms_Flags & REQUEST_A2024)	frame = field_pick[0];

	/*printf("MAKEVP(%lx,%lx)\n",view,vp);*/
	/* backwards compatibility for a short time */
	r1 = vp->RasInfo;
	if (modes & DUALPF)	r2 = r1->Next;
	io = &custom;

#ifdef DEBUG
	kprintf("makevp(%lx,%lx) rasinfo=%lx\n",view,vp,r1);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif

	cl = vp->DspIns = (struct CopList *)copinit(vp->DspIns,DSPINS+32);
	if ( (!cl) || (!cl->MaxCount) )
	{
		/* Alert(ALERTGFXNOMEMMAKEVP); */ /* does not return */
		return;  /* implement better error handling -- bart */
	}
	c = cl->CopIns;

	depth = r1->BitMap->Depth;
	if (r2) depth += r2->BitMap->Depth;
	else if ((modes & (HAM|EXTRA_HALFBRITE))== 0)
			depth = SHORTMIN(depth,5);

	/* protect the user from stupidity */
	if (modes & HIRES) depth = SHORTMIN(depth,4);
	if (modes & SUPERHIRES) depth = SHORTMIN(depth,2);

	/* wait for correct position on the display */
	/* y is relative to view.DyOffset */
	/* all waits are positioned relative to view.DyOffset during MrgCop */
	/* y if where the display is to begin */
	/* adjust y to leave enough space for copper maneuvers */
	/* if we have more than 4 bit planes then or sprite colors */

	ytop   =     vp->DyOffset;
	ytop  +=  (((mspc->ms_Flags & REQUEST_A2024)?0x2c:view->DyOffset) 
		   << lshift);
	ytop  += lshift;
	ytop >>= lshift;

#ifdef VARIABLE_COPPER_SPACE
	y = -1;	/* need some space for copper instructions */
	if ( (depth>4) && (r2 == 0) ) 
	{
		y--;
	}
	else 
	{
	    if( ( depth > 3 ) || 
	        ( modes & SUPERHIRES) || 
		(!(GB->ChipRevBits0 & GFXF_HR_DENISE)) )
	    {
		if (vp->Modes & SPRITES)    y--;
	    }
	}
#else
	y = -2;	/* need some space for copper instructions */
#endif

#ifdef UNDEFINED
	y += MAX(
		    MIN(lace?(vp->DyOffset>>1):vp->DyOffset,0),
		    (min_ytop- ((mspc->ms_Flags & REQUEST_A2024)?
				0x2c:
				view->DyOffset))
		);
#endif

	y <<= lshift;

	yclip = MIN( ytop - min_ytop, 0 );

	yclip <<= lshift;
	ytop  <<= lshift;

	ybot   = ytop;
	ybot  += vp->DHeight;
#ifdef SAS_DEBUG
	kprintf("in makevp(), ytop = %ld, ybot = %ld\n", ytop, ybot);
#endif
	ytop     -= yclip;

#ifdef NEW_HEDLEY
	/* need an absolute wait position */
	if (mspc->ms_Flags & REQUEST_A2024)
	{
		UWORD t;
		int real_depth;
#define H_OFFSET	0x20
/*#define OLDPIXELALIGN*/
#define NEWPIXELALIGN

#ifdef NEWPIXELALIGN
#define KEYCOLOR	1
#else
#define KEYCOLOR	0
#endif
/*#define H_OFFSET	0x0*/
		short tcolor;
		/*short ypos = 0x28-0x2c;*/
		short ypos = -0x1b+4;	/* 1c in docs */
		/*ypos = -4-3;*/	/* visible control region debug */

		/* to make the sprites work, the output depth */
		/* must always be two */
		/*ypos += 16;*/
		/*real_depth = old_vp->RasInfo->BitMap->Depth;*/
		real_depth = 2;
		/* position 0-127 */
		if (GB->DisplayFlags & PAL)
		{
			ypos += 8;
			ypos += GB->control_delta_pal;
		}
		else
		{
			ypos += GB->control_delta_ntsc;
		}
		CWAIT(c,ypos-9,0);	/* was a -1 */
		CBUMP(&cl);
		CMOVE(c,io->color[0],0xf00);	/* all colors 0 */
		CBUMP(&cl);
#ifdef OLDPIXELALIGN
		CWAIT(c,ypos,0x45);		/* also trigger pixel catcher */
		CBUMP(&cl);
		t = 1; /* F6-4=0,INTERLACE=0 */
		if (modes == A2024TENHERTZ_KEY) t |= 0x800;  /* F6_4 = 1*/
		CMOVE(c,io->color[0],t);
		CBUMP(&cl);
#endif
#ifdef NEWPIXELALIGN
		/* set up real raster */
		c = clongmove(&cl,c,&io->bplpt[0],GB->a2024_sync_raster,0);
		t = 0x15;
		if (GB->DisplayFlags & PAL)
		{
			t += 8;
			t += GB->control_delta_pal;
		}
		else
		{
			t += GB->control_delta_ntsc;
		}
		t <<= 8;		/* move y over to left byte */
		t += 0x61;		/* get x diwstart */
		CMOVE(c,io->diwstrt,t)	/* was 0x1561 for ntsc */
		CBUMP(&cl);
		t &= 0xff00;
		t += 0xd1;
		if (GB->ChipRevBits0 & GFXF_HR_DENISE) t += 0x100;
		CMOVE(c,io->diwstop,t);
		CBUMP(&cl);
		if (GB->ChipRevBits0 & GFXF_HR_DENISE)
		{
			CMOVE(c,io->diwhigh,0x2000); /* must close window */
			CBUMP(&cl);		     /* bart */
		}
		CMOVE(c,io->ddfstrt,0x40);
		CBUMP(&cl);
		CMOVE(c,io->ddfstop,0xd0);
		CBUMP(&cl);
		/* 1 bitplane hires */
		CMOVE(c,io->bplcon0,HIRES|0x1000|0x200);
		CBUMP(&cl);
		t = 1; /* F6-4=0,INTERLACE=0 */
		if (modes == A2024TENHERTZ_KEY) t |= 0x800;  /* F6_4 = 1*/
		CMOVE(c,io->color[1],t);
		CBUMP(&cl);
#endif

		/* position 128-256 0x67*/
		CWAIT(c,ypos,0x5f+H_OFFSET);
		CBUMP(&cl);
		{
			int i;
			t = 4;
			if (modes == A2024TENHERTZ_KEY) t = 6;
			for (i = 0; i<t ; i++)
			{
				tcolor = 0x1;
				if (i & 1)	tcolor |= 0xf00;
				if (i & 2)	tcolor |= 0x0f0;
				if (i & 4)	tcolor |= 0x008;
				c = cshortmove(&cl,c,&io->color[KEYCOLOR],
				tcolor,field_pick[i]); /* quadrant, expand */
			}
		}

		/* position 256-337? 0x87*/
		CWAIT(c,ypos,0x7f+H_OFFSET);
		CBUMP(&cl);
		t = 0x800;		/* for 1 bitplane */
		if (real_depth == 2)	t = 0x8f0;
		CMOVE(c,io->color[KEYCOLOR],t); /* enp1=enp0=1 wpb=0 */
		CBUMP(&cl);

		/* position 340-512 0xa3*/
		CWAIT(c,ypos,0x9f+H_OFFSET);
		CBUMP(&cl);
		t = 0xfff;		/* for two bitplanes */
		if (real_depth == 1)	t = 0xf0f;	/* one plane */
		t = 0xfff;
		/*real_depth = old_vp->RasInfo->BitMap->Depth;*/
		if (old_vp->RasInfo->BitMap->BytesPerRow > 128 - 2)
			t = 0xff1;
		CMOVE(c,io->color[KEYCOLOR],t); /* 0x889 dpl0=dpl1=1,less16=1*/
		CBUMP(&cl);
		CWAIT(c,ypos+1,0);
		CBUMP(&cl);
		CMOVE(c,io->color[0],0x000); /* turn off for rest of display */
		CBUMP(&cl);
#ifdef NEWPIXELALIGN
		CMOVE(c,io->bplcon0,0);
		CBUMP(&cl);
#endif

	}
#endif

	CWAIT(c,HFIX(VFIX(y)-(VFIX(1)>>1)),0); /* bart -- better spacing */
	CBUMP(&cl);

    /* load up copper list with color stuff */

    if (modes & (DUALPF|HAM))   x = 16;
    else                    x = 1<<(SHORTMIN(5,depth));
	{
    		UWORD   *colors,*colortable;
		unsigned short color;
		short blue_and_clear,colortablecount;
    		if ( cm == 0)
		{
			colortable = dflt_clrs;
			colortablecount = MAX_COLORS;
		}
		else
		{
			colortable = (UWORD *)cm->ColorTable;
			colortablecount = cm->Count;
			if (colortablecount > MAX_COLORS)
				colortablecount = MAX_COLORS;
		}
	if ( (mspc->ms_Flags & REQUEST_A2024) ||
	     (modes & SUPERHIRES) )
	{
		WORD	new_colors[32];
		/* convert colors from users colormap to hedley colors */
#ifdef DEBUg
		kprintf("colortable in = %lx\n",colortable);
#endif
		if (mspc->ms_Flags & REQUEST_A2024)
			convert_to_hedley(colortable,new_colors);
		else
		{
			convert_to_superhires(colortable,new_colors,cm);
		}
#ifdef DEBUg
		kprintf("colortable out= %lx\n",new_colors);
		Debug();
#endif
		colors = new_colors;
		for (i = 0; i<32 ; i++)
		{
			CMOVE(c,io->color[i],*colors++);
			CBUMP(&cl);
		}
	}
	else
	{
		/* let us speed this baby up a bit */
		/* using my intimate knowledge of cbump we can find out */
		/* how many instructions can go into this buffer */
		blue_and_clear = MIN(x,cl->MaxCount - cl->Count)-1;
		i = 0;
		colors = colortable;
		if (blue_and_clear > 0)
		{
			for (; i < blue_and_clear ; i++)
			{
				color = *colors++;
				color |= check_genlock(cm,i);
				CMOVE(c,io->color[i],color);
				c++;
			}
			cl->Count += blue_and_clear;
		}
		
		/* finish the rest slowly */
    		for (;i < x; i++)
    		{
			color = *colors++;
			color |= check_genlock(cm,i);
			CMOVE(c,io->color[i],color);
			CBUMP(&cl);
    		}
    		if (vp->Modes & SPRITES)
			/* this guy needs sprite colors loaded */
			if( (depth < 5) /* already all load up? */
			    || 
			    (modes & (DUALPF|HAM)) /* special? */ )
			{
				/* skip raster colors */
				colortable += 16;
	    			/* have to load up sprite colors */
	    			for(i = 16;i < colortablecount; i++)
	    			{
					color = *colortable++;
					color |= check_genlock(cm,i);
		    			CMOVE(c,io->color[i],color);
		    			CBUMP(&cl);
	    			}
			}
		}
	}

	/* load up dw,dx and other stuff for primary rasinfo/playfield */

	getclipstuff(view,vp,r1,&info[0],yclip);

	ybot += HFIX((~info[0].yxtra) & lshift);
	ytop += info[0].yxtra;
	y    += info[0].yxtra;

#ifdef UNDEFINED
	/* display clip bottom */
	{
	    ybot -= vp->DyOffset+(view->DyOffset<<lshift);
	    ybot = MAXYCLIP( ybot );
	    ybot += vp->DyOffset+(view->DyOffset<<lshift);
	}
#endif

	ytop >>= lshift;
	ybot >>= lshift;


#ifdef DEBUG
    kprintf("diwxstrt = %lx ",info[0].dwxstrt);
#endif
	/* This next value is worng for final release */
	/* I think there is a chip problem */
	/*x = VFIX(0x2b)<<8;*/

	if ( (GB->ChipRevBits0 & GFXF_HR_DENISE) == 0)
	{
	    x = (min_ytop<<8) | (0xff&info[0].dwxstrt);
	}
	else
	{
	    x = (ytop<<8)|(0xff&info[0].dwxstrt);
	}

    	CMOVE(c,io->diwstrt,x);
	CBUMP(&cl);
	/* hopefully sprites are still see able */

	mybplcon0 = GB->system_bplcon0 | ( depth << PLNCNTSHFT ) |
	(view->Modes & INTERLACE) |
	((modes & SUPERHIRES)?0x40:0) |	/* new SUPERHIRES */
#ifdef ULTRA_RES
	(modes & (HOLDNMODIFY|DUALPF) );
#else
	(modes & (HOLDNMODIFY|DUALPF|HIRES) );
#endif

	if (GB->ChipRevBits0 & GFXF_HR_DENISE)
    		realbplcon0 = mybplcon0;
	else	realbplcon0 = (view->Modes&INTERLACE)|(GB->system_bplcon0);

    	x = vp->SpritePriorities;

	/* temp hack */
	if (modes & SUPERHIRES) x >>= 1;

	x |= (modes & PF2PRI);
	
	if (cm && cm->Type)
	{
		if (cm->Flags & COLORMAP_TRANSPARENCY)
			x |= BPLCON2_ZDCTEN;
		if (cm->Flags & COLORPLANE_TRANSPARENCY)
		{
			x |= BPLCON2_ZDBPEN;
			x |= cm->TransparencyPlane <<12;
		}
	}

	if (mspc->BeamCon0 & CSBLANK) /* for new chips */
	{
	    realbplcon0 |= USE_BPLCON3;
	    bplcon3 |= BPLCON3_EXTBLNKEN;   /* EXTBLKEN */
	}

	if(cm && cm->Type)
	{
		if(cm->Flags & BORDER_BLANKING)
		{
		    realbplcon0 |= USE_BPLCON3;
		    bplcon3 |= BPLCON3_BRDNBLNK;
		}
		if(cm->Flags & BORDER_NOTRANSPARENCY)
		{
		    realbplcon0 |= USE_BPLCON3;
		    bplcon3 |= BPLCON3_BRDNTRAN;
		}
	}

	CMOVE(c,io->bplcon0,realbplcon0); CBUMP(&cl);
	CMOVE(c,io->bplcon2,x); CBUMP(&cl);
	if (realbplcon0 & USE_BPLCON3)
	{
	    CMOVE(c,io->bplcon3,bplcon3); CBUMP(&cl);
	}

    /* do stuff for standard view */

    if ( r2 == 0)
    {
	short dbytes,bplmod;
	UWORD my_dwstop,my_dwhigh;
	UBYTE **pptr,*p;
	/* hack for new chips */
	my_dwstop = info[0].dwxstrt + info[0].dw;

	my_dwstop = display_stop( mspc, my_dwstop );

	if ( (GB->ChipRevBits0 & GFXF_HR_DENISE) == 0)
	{
    		CMOVE(c,io->diwstop,(0x7f<<8) | ( 0xff & my_dwstop));
		CBUMP(&cl);
	}
	else
	{
		short ymax = mspc->total_rows;

		/* ECS genlock */
		if(realbplcon0 & (GENLOCK_AUDIO|GENLOCK_VIDEO)) ymax -= 2;

		if (ybot > ymax) ybot = ymax; 

		/* compute diwhigh */
#ifdef SAS_DEBUG
	kprintf("compute diwstop for 1st pf with ybot = %ld\n",ybot);
#endif
		t1 = ((ytop & 0x700) >> 8) | (ybot & 0x700)
			|  ( (my_dwstop & 0x100)<< 5)
			|  ( (info[0].dwxstrt & 0x100) >> 3);

		if(lace)
		{
			c = cshortmove(&cl,c,&io->diwstop,(ybot<<8)|(0xff & my_dwstop),
				CPR_NT_LOF);
			/*c = cshortmove(&cl,c,&io->diwhigh,t,CPR_NT_LOF);*/

			ybot  -= (vp->DHeight&1);

			/* recompute diwhigh */

			t2 = ((ytop & 0x700) >> 8) | (ybot & 0x700)
				|  ( (my_dwstop & 0x100)<< 5)
				|  ( (info[0].dwxstrt & 0x100) >> 3);

			c = cshortmove(&cl,c,&io->diwstop,(ybot<<8)|(0xff & my_dwstop),
				CPR_NT_SHT);
			/*c = cshortmove(&cl,c,&io->diwhigh,t,CPR_NT_SHT);*/
		}
		else
		{
			CMOVE(c,io->diwstop,(ybot<<8) | ( 0xff & my_dwstop));
			CBUMP(&cl);
			/*CMOVE(c,io->diwhigh,t);  CBUMP(&cl);*/
		}
	}

	dbytes = get_dbytes(vp,info[0].dafstrt,info[0].dafstop);

	CMOVE(c,io->ddfstrt,info[0].dafstrt);       CBUMP(&cl);

	CMOVE(c,io->ddfstop,info[0].dafstop);       CBUMP(&cl);

	CMOVE(c,io->bplcon1,(info[0].scroll<<4)|info[0].scroll);        CBUMP(&cl);

	    /* set up bit plane modulos */
	bplmod = info[0].rbytes - dbytes;
	if (view->Modes & lace)
	{
	    bplmod += info[0].rbytes;
	}
	CMOVE(c,io->bpl1mod,bplmod);    CBUMP(&cl);

	if (depth > 1)
	{
	    CMOVE(c,io->bpl2mod,bplmod);    CBUMP(&cl);
	}
	pptr = r1->BitMap->Planes;
#ifdef DEBUG
	kprintf("plnskip=%lx ",info[0].plnskip);
#endif
	for (i=0;i<depth;i++)
	{

	    /* grab em and jam em */
	    p = (*pptr++) + info[0].plnskip;

	    c = clongmove(&cl,c,&io->bplpt[i],p,frame);

	    if (view->Modes&lace)
	    {
		p = (long)p + (long)info[0].rbytes;
		c = clongmove(&cl,c,&io->bplpt[i],p,CPR_NT_SHT);
	    }

	    if ( (mspc->ms_Flags & REQUEST_A2024) &&
		 (modes != A2024TENHERTZ_KEY) )
	    {
		long p1;

		/* kprintf("makevp: modes != A2024TENHERTZ_KEY\n"); */

		/* frame lower left */
		p1 = (long)p + vp->DHeight*(long)info[0].rbytes;
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[1]);
		/* frame upper right */
		p1 = (long)p + (512>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[2]);
		/* lower right */
		p1 = (long)p + vp->DHeight*(long)info[0].rbytes+(512>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[3]);
		
	    }
	    if ( (mspc->ms_Flags & REQUEST_A2024) &&
		 (modes == A2024TENHERTZ_KEY) )
	    {
		long p1;

		/* kprintf("makevp: modes == A2024TENHERTZ_KEY\n"); */

		/* frame lower left */
		p1 = (long)p + vp->DHeight*(long)info[0].rbytes;
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[1]);
		/* frame upper middle */
		p1 = (long)p + (336>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[2]);
		/* frame upper right */
		p1 = (long)p + ((336+336)>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[4]);
		/* lower middle */
		p1 = (long)p + vp->DHeight*(long)info[0].rbytes+(336>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[3]);
		/* lower right */
		p1 = (long)p + vp->DHeight*(long)info[0].rbytes+((336+336)>>3);
		c = clongmove(&cl,c,&io->bplpt[i],p1,field_pick[5]);
	    }
	}
    }
    else    /* do dual playfield mode */
    {
	short bplmod;
	short fstrt,fstop,dbytes;
	UBYTE **pptr1,**pptr2;
	UBYTE *p;
	UWORD my_dwstop,my_dwhigh;

	getclipstuff(view,vp,r2,&info[1],yclip);

#ifdef UNDEFINED
	ybot += HFIX((~info[0].yxtra) & lshift);
	ytop += info[0].yxtra;
	y    += info[0].yxtra;
#endif

#ifdef UNDEFINED
	/* display clip bottom */
	{
	    ybot -= vp->DyOffset+(view->DyOffset<<lshift);
	    ybot = MAXYCLIP( ybot );
	    ybot += vp->DyOffset+(view->DyOffset<<lshift);
	}
#endif

#ifdef UNDEFINED
	ytop >>= lshift;
	ybot >>= lshift;
#endif

	/* funny hardware fix, Dale */
	/* denise 8362R8 and above fixed the hardware problem -- bart */
	/* if (info[1].scroll != info[0].scroll) info[0].dw--;	*/ 

	my_dwstop = info[0].dwxstrt + info[0].dw;

	my_dwstop = display_stop( mspc, my_dwstop );

	if ( (GB->ChipRevBits0 & GFXF_HR_DENISE) == 0)
	{
		CMOVE(c,io->diwstop,(0x7f<<8) | ( 0xff & my_dwstop));
		CBUMP(&cl);
	}
	else
	{
		short ymax = mspc->total_rows;

		/* ECS genlock */
		if(realbplcon0 & (GENLOCK_AUDIO|GENLOCK_VIDEO)) ymax -= 2;

		if (ybot > ymax) ybot = ymax; 

		/* compute diwhigh */
#ifdef SAS_DEBUG
	kprintf("compute diwstop for 2nd pf with ybot = %ld\n",ybot);
#endif

		t1 = ((ytop & 0x700) >> 8) | (ybot & 0x700)
			|  ( (my_dwstop & 0x100)<< 5)
			|  ( (info[0].dwxstrt & 0x100) >> 3);

		if(lace)
		{
			c = cshortmove(&cl,c,&io->diwstop,(ybot<<8)|(0xff & my_dwstop),
				CPR_NT_LOF);
			/*c = cshortmove(&cl,c,&io->diwhigh,t,CPR_NT_LOF);*/

			ybot  -= (vp->DHeight&1);

			/* recompute diwhigh */

			t2 = ((ytop & 0x700) >> 8) | (ybot & 0x700)
				|  ( (my_dwstop & 0x100)<< 5)
				|  ( (info[0].dwxstrt & 0x100) >> 3);

			c = cshortmove(&cl,c,&io->diwstop,(ybot<<8)|(0xff & my_dwstop),
				CPR_NT_SHT);
			/*c = cshortmove(&cl,c,&io->diwhigh,t,CPR_NT_SHT);*/
		}
		else
		{
			CMOVE(c,io->diwstop,(ybot<<8) | ( 0xff & my_dwstop));
			CBUMP(&cl);
			/*CMOVE(c,io->diwhigh,t);  CBUMP(&cl);*/
		}
	}

	fstrt = SHORTMIN(info[0].dafstrt,info[1].dafstrt);
	fstop = SHORTMAX(info[0].dafstop,info[1].dafstop);

	if (modes & SUPERHIRES)	i = 8;
	else 			i = 2;

	    if (fstrt < info[0].dafstrt) info[0].plnskip -= i;
	    if (fstrt < info[1].dafstrt) info[1].plnskip -= i;

	    CMOVE(c,io->ddfstrt,fstrt); CBUMP(&cl);
	    CMOVE(c,io->ddfstop,fstop); CBUMP(&cl);

	    /* pfa is [0] pfb is [1] */
	    CMOVE(c,io->bplcon1,(info[1].scroll<<4)|info[0].scroll);
	  CBUMP(&cl);

	    /*dbytes = 2 + ( (fstop - fstrt)>>2 );*/
#ifndef ULTRA_RES
	    /*if (modes & HIRES)   dbytes <<= 1;*/
#endif
	dbytes = get_dbytes(vp,fstrt,fstop);

	    /* set up bit plane modulos */
	    bplmod = info[0].rbytes - dbytes;
	    if (view->Modes & lace)
		    bplmod += info[0].rbytes;
	    CMOVE(c,io->bpl1mod,bplmod);             CBUMP(&cl);

	    /* set up bit plane modulos */
	    if (depth > 1)
	    {
		bplmod = info[1].rbytes - dbytes;
		if (view->Modes & lace)
			    bplmod += info[1].rbytes;
		CMOVE(c,io->bpl2mod,bplmod);    CBUMP(&cl);
	    }
	/* now send out bit plane pointers */
	pptr1 = r1->BitMap->Planes;
	pptr2 = r2->BitMap->Planes;
	for (i=0;i<depth;i++)
	{
	    if (i & 1)  p = *pptr2++ + info[1].plnskip;
	    else
		{
#ifdef SAS_DEBUG
			p = *pptr1++;
			kprintf("*** p = %lx, diff = %lx, shift = %lx skip = %lx\n",p,(info[1].dafstrt - info[0].dafstrt),((modes & HIRES)?3:4),info[0].plnskip);
			p += (info[0].plnskip - (BYTE) ((info[0].dafstrt - info[1].dafstrt) >> ((modes & HIRES)?3:4)));
			kprintf("**** new p = %lx\n",p);
#else
			p = ( (*pptr1++ + info[0].plnskip) -
						(BYTE) ((info[0].dafstrt - info[1].dafstrt) >> ((modes & HIRES)?3:4)) );	/* spence - Nov 14 1990 */
#endif
		}
		c = clongmove(&cl,c,&io->bplpt[i],p,frame);

	    if (view->Modes & lace)
	    {
		p = (long)p + (long)info[i&1].rbytes;
		c = clongmove(&cl,c,&io->bplpt[i],p,CPR_NT_SHT);
	    }
	}
    }
	/* now put the new DIWHIGH at the end of the list */
	if (GB->ChipRevBits0 & GFXF_HR_DENISE)
	{
		if(lace)
		{
			c = cshortmove(&cl,c,&io->diwhigh,t1,CPR_NT_LOF);
			c = cshortmove(&cl,c,&io->diwhigh,t2,CPR_NT_SHT);
		}
		else
		{
			CMOVE(c,io->diwhigh,t1);  CBUMP(&cl);
		}
	}

	if ((GB->ChipRevBits0 & GFXF_HR_DENISE) == 0)
	{
	    short ystop;
	    short adjust = (vp->DyOffset<0) ? 
			  -(lshift & ~vp->DyOffset) :
			   (lshift &  vp->DyOffset) ;

	    short tot_rows = mspc->total_rows;
	    short viewoff = 
	    ((mspc->ms_Flags & REQUEST_A2024)? 0x2C: view->DyOffset);

	    if( GB->system_bplcon0 & (GENLOCK_AUDIO|GENLOCK_VIDEO) ) 
	    {
		    tot_rows -= 1;
	    }

	    if( ( ( vp->DyOffset >> lshift ) + viewoff ) < ( tot_rows - 1 ) )
	    {
		struct ViewPortExtra *vpe;

		WORD clpy = 0;

		if( (cm) && (cm->Type) && (vpe = cm->cm_vpe) )
		{
		    if( vpe->DisplayClip.MinY < 0 )
		    {
			struct DisplayInfoRecord *record;

			clpy = vpe->DisplayClip.MinY;

			if( ( record = cm->CoerceDisplayInfo )
			||  ( record = cm->NormalDisplayInfo ) )
			{
			    clpy = SHORTMAX( record->rec_ClipOScan.MinY, clpy );
			}
		    }
		}

		/* bart - display clipping */
		/* ystop = vp->DHeight;    */
		/* ystop = MAX(vp->DHeight+MIN(vp->DyOffset,0),0); */
		/* ystop =  ((ybot- ((mspc->ms_Flags & REQUEST_A2024)? 0x2C:
		view->DyOffset+((vp->DyOffset+lshift)>>lshift)))<<lshift); */

		ystop = ((ybot-viewoff)<<lshift)-(vp->DyOffset+adjust);

		CWAIT( c, ( (vp->DyOffset >= clpy) ?  0 : -vp->DyOffset ) , 0 );

		CBUMP(&cl); /* relative to top of vp */
		CMOVE(c,io->bplcon0,mybplcon0);    
		CBUMP(&cl);

		if( lshift && ( vp->DHeight & 1 ) )
		{
		    CWAIT(c,ystop-1-((adjust<0)?-adjust:adjust),0);
		    c->OpCode |= CPR_NT_LOF;
		    CBUMP(&cl);
		    c = cshortmove(&cl,c,&io->bplcon0,realbplcon0,CPR_NT_SHT);
		    CWAIT(c,ystop,0);   		    
		    c->OpCode |= CPR_NT_SHT;
		    CBUMP(&cl);
		    c = cshortmove(&cl,c,&io->bplcon0,realbplcon0,CPR_NT_LOF);
		}
		else
		{
		    CWAIT(c,ystop,0);   		    
		    CBUMP(&cl);
		    CMOVE(c,io->bplcon0,realbplcon0);
		    CBUMP(&cl);
		}
	    }
	}
#ifdef WAITBOV
	CMOVE(c,io->intreqw,BITSET|ICOPPER);    CBUMP(&cl);
#endif
	CEND(c);   CBUMP(&cl);
#ifdef NEW_HEDLEY
	/* unswizzle viewport stuff */
	if (old_vp)
	{
		old_vp->DspIns = vp->DspIns;
	}
#endif
}
#endif
 @


38.0
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: makevp.c,v 37.3 91/05/20 11:13:08 chrisg Exp Locker: spence $
@
