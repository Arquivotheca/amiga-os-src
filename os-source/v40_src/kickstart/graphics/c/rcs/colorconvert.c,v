head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.6 V36_196:36.6 V36_195:36.6 V36_194:36.6 V36_193:36.6 V36_192:36.6 V36_191:36.6 V36_190:36.6 V36_189:36.6 V36_188:36.6 V36_186:36.6 V36_185:36.6 V36_184:36.6 V36_182:36.6 V36_181:36.6;
locks    ; strict;
comment  @ * @;


39.1
date     91.10.30.15.50.26;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.15.42;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.20.11.07.18;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.18.39;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.07.27.16.55.34;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.28.09.10.22;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.04.29.15.41.35;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     88.05.02.19.00.45;  author dale;  state Exp;
branches ;
next     36.2;

36.2
date     88.05.01.23.17.58;  author dale;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.11.15;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@  removed a2024 code
@
text
@/******************************************************************************
*
*	$Id: colorconvert.c,v 39.0 91/08/21 17:15:42 chrisg Exp Locker: chrisg $
*
******************************************************************************/


/* graphics  kernel routines */
#include <exec/types.h>
#include <graphics/view.h>
#include "c.protos"

#define DAVEB

@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: colorconvert.c,v 37.1 91/05/20 11:07:18 chrisg Exp Locker: chrisg $
a14 135
UWORD __regargs c_to_h(int r,int g,int b)
{
	int i;
#ifdef DAVEB
	i = (77*r + g*150 + b*29 +128) / 1024;
#else
	i = 4*r + 3*g + 3*b;
	i /= 10;
	/* only want upper 2 bits */
	i >>= 2;
	i &= 3;
#endif
	/* spread the bits out */
	/*i = (i&1) | ((i&2)<<1);*/
	return (i);
}

__regargs bmswizzle(UWORD c)
{
	int r,g,b;
	r = 0xf & (c>>8);
	g = 0xf & (c>>4);
	b = 0xf & c;
	c = c_to_h(r,g,b);
	return (c);
}

__regargs swizzle(UWORD c)
{
	int r,g,b;
	r = 0xf & (c>>8);
	g = 0xf & (c>>4);
	b = 0xf & c;
	c = c_to_h(r,g,b);
	c = (c&1) | ((c&2)<<1);
	return (c);
}

UWORD __regargs to_digital(UWORD c)
{
	UWORD new_c;
	new_c = 0;
	if (c & 1) new_c = 1;
	if (c & 2) new_c |= 8;
	if (c & 4) new_c |= 0x80;
	if (c & 8) new_c |= 0x800;
	return (new_c);
}

__regargs convert_to_hedley(WORD *input,WORD *output)
{
	int i;
	int j;
	int k;
	UWORD c;
	k = 0;
#ifdef DEBUG
	kprintf("convert_to_hedley(%lx,%lx)\n",input,output);
#endif
	/*Debug();*/
	for (i = 0; i < 4; i++)	/* colors for even rows  for sprites*/
	{
		for (j = 0; j < 4; j++)	/* odd row colors for sprites*/
		{
			int odd_c,even_c;
			/* do bitmap colors */
			/* i = bitplane 1 */
			/* j = bitplane 0 */
			even_c = ( j & 1) | ((i & 1)<<1);
			c = swizzle(input[even_c])<<1;
			odd_c = (i & 2) | (j >> 1);
			c |= swizzle(input[odd_c]);	/* was [i] */
			output[k] = to_digital(c);
			/* now do sprite colors */
			c = swizzle(input[j+16])<<1;
			c |= swizzle(input[i+16]);
			output[k+16] = to_digital(c);
			k++;
		}
	}
}

__regargs pass_superhires(int index,unsigned short *input,unsigned short *output,
							struct ColorMap *cm)
{
	/* format of input is 0000RRRRGGGGBBBB */
	int i,j,k;
	UWORD	c;
	UWORD	red[4],green[4],blue[4];
	UWORD	genlock[4];
#ifdef DEBUG
	kprintf("pass_superhires(%ld,%lx,%lx)\n",index,input,output);
#endif
	/* extract colors */
	for (i = 0; i < 4 ; i++)
	{
		red[i] = input[i+index] & 0x0C00;
		green[i] = input[i+index] & 0x00c0;
		blue[i] = input[i+index] & 0x000c;
		genlock[i] = check_genlock(cm,i);
#ifdef DEBUG
		kprintf("i=%ld ",i);
		kprintf("input=%lx r=%lx g=%lx b=%lx\n",
				input[i+index],red[i],green[i],blue[i]);
#endif
	}
	output += index;
#ifdef DEBUG
	kprintf("output=%lx\n",output);
#endif
	for (i = 0; i < 4 ; i++)
	{
		for (j = 0; j < 4 ; j++)
		{
			c  = red[j] | (red[i]>>2);
			c |= green[j] | (green[i]>>2);
			c |= blue[j] | (blue[i]>>2);
			c |= genlock[j] | (genlock[i]>>1);
#ifdef DEBUG
			kprintf("%lx <- %lx ",output,c);
#endif
			*output++ = c;
		}
#ifdef DEBUG
		kprintf("\n");
#endif
	}
		
}

__regargs convert_to_superhires(WORD *input,WORD *output,struct ColorMap *cm)
{
	pass_superhires(0,input,output,cm);	/* bitplanes */
	pass_superhires(16,input,output,cm);	/* sprites */
}
@


37.1
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: colorconvert.c,v 1.1 91/05/20 10:39:47 chrisg Exp $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: colorconvert.c,v 36.6 90/07/27 16:55:34 bart Exp Locker: spence $
d11 1
d15 1
a15 1
UWORD c_to_h(r,g,b)
d32 1
a32 2
bmswizzle(c)
UWORD c;
d42 1
a42 2
swizzle(c)
UWORD c;
d53 1
a53 2
UWORD to_digital(c)
UWORD c;
d64 1
a64 2
convert_to_hedley(input,output)
WORD *input,*output;
d97 2
a98 4
pass_superhires(index,input,output,cm)
int index;
unsigned short *input, *output;
struct ColorMap *cm;
d144 2
a145 3
convert_to_superhires(input,output,cm)
WORD *input, *output;
struct ColorMap *cm;
@


36.6
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/colorconvert.c,v 36.4 89/04/29 15:41:35 bart Exp Locker: bart $
@


36.4
log
@cm->Type checking
@
text
@d3 1
a3 1
*	$Header: colorconvert.c,v 36.3 88/05/02 19:00:45 dale Exp $
@


36.3
log
@More changes to support setrgb4,loadrgb4 for genlock control.
Also changed the interface to check_genlock to take a ColorMap
ptr instead of Flags and Bits. Makes it a little more general purpose
as well as all the callers a little more efficient.
@
text
@d3 1
a3 1
*	$Header: colorconvert.c,v 36.2 88/05/01 23:17:58 dale Exp $
@


36.2
log
@Additions for new amiga genlock modes.
Changes to superhires conversion routines to deal with genlock.
It should work in all modes.
@
text
@d3 1
a3 1
*	$Header: colorconvert.c,v 36.1 88/03/10 16:11:15 dale Exp $
d119 1
a119 2
		genlock[i] = check_genlock(cm->Flags,i,
				cm->TransparencyBits);
@


36.1
log
@V36 initial check in
@
text
@d3 1
a3 1
*	$Header: $
d10 1
d100 1
a100 1
pass_superhires(index,input,output)
d102 2
a103 1
WORD *input, *output;
d109 1
d119 2
d138 1
d150 1
a150 1
convert_to_superhires(input,output)
d152 1
d154 2
a155 2
	pass_superhires(0,input,output);	/* bitplanes */
	pass_superhires(16,input,output);	/* sprites */
@
