head     39.16;
branch   ;
access   ;
symbols  rel39_24:39.16 rel39_18:39.16 rel39_97:39.15 rel39_90:39.15 rel39_89:39.15 rel39_82:39.15 rel39_76:39.11 rel39_71:39.10 rel39_65:39.10 rel39_64:39.8 rel39_61:39.8 rel39_60:39.8 rel39_55:39.5 rel39_47:39.5 rel39_39:39.5 rel39_38:39.5 rel39_37:39.4 rel39_35:39.4 rel39_34:39.3 V37_30:37.3 V37_29:37.3 V37_28:37.3 V37_27:37.3 V37_25:37.3 V37_24:37.3 V37_23:37.3 V37_22:37.3 V37_21:37.3 V37_20:37.3 V37_19:37.3 V37_17:37.3 V37_15:37.3 V37_14:37.3 V37_13:37.3 V37_12:37.3 V37_11:37.3 V37_10:37.3 V37_9:37.3 V37_8:37.3 V37_7:37.3 V37_6:37.3 V37_5:37.3 V37_4:37.3 V37_3:37.2 V37_2:37.2 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.6 V36_196:36.6 V36_195:36.6 V36_194:36.6 V36_193:36.6 V36_192:36.6 V36_191:36.6 V36_190:36.6 V36_189:36.6 V36_188:36.6 V36_186:36.6 V36_185:36.6 V36_184:36.6 V36_182:36.6 V36_181:36.6;
locks    ; strict;
comment  @*   @;


39.16
date     93.04.21.18.35.43;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     92.08.18.01.16.13;  author spence;  state Exp;
branches ;
next     39.14;

39.14
date     92.08.17.13.44.08;  author chrisg;  state Exp;
branches ;
next     39.13;

39.13
date     92.08.11.14.05.05;  author chrisg;  state Exp;
branches ;
next     39.12;

39.12
date     92.08.03.08.37.51;  author chrisg;  state Exp;
branches ;
next     39.11;

39.11
date     92.07.09.12.11.04;  author spence;  state Exp;
branches ;
next     39.10;

39.10
date     92.06.09.12.11.56;  author spence;  state Exp;
branches ;
next     39.9;

39.9
date     92.06.08.15.58.01;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     92.05.15.07.28.11;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     92.05.13.11.31.59;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.29.12.13.05;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     92.02.28.13.39.53;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     92.02.19.14.39.31;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.29.16.55.02;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.08.12.11.33;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.08.27.16.54.15;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.22.49;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.01.22.14.01.05;  author bart;  state Exp;
branches ;
next     37.2;

37.2
date     91.01.14.14.55.35;  author bart;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.14.13.45.27;  author bart;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.28.00;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.07.27.17.00.25;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     90.03.28.09.09.34;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.10.31.13.00.52;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.22.09.36.36;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.04.29.15.43.01;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.04.28.18.23.13;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.03.20.16.39.55;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.16
log
@For ECS, update_top_color() would change copinit with 2 writes to colour 0,
and 3 writes to bplcon3 (Hi order, Lo order, Hi order bits), and then reset
the 2nd colour 0 and last 2 bplcon3s to NOPs.
Under ECS emulation on AA, there was a small window where the copper
could read the 2nd bplcon3 (set LOCT bit), and the CPU would then change
the 3rd bplcon3 to a NOP, leaving the LOCT bit set for one whole frame of
the top ViewPort. This caused a 1 frame screen flash!
@
text
@*******************************************************************************
*
*	$Id: update.asm,v 39.15 92/08/18 01:16:13 spence Exp Locker: spence $
*
*******************************************************************************

    include 'exec/types.i'
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/interrupts.i'
    include 'exec/libraries.i'
    include '/monitor.i'
    include '/vp_internal.i'
    include '/copper.i'
    include '/gfx.i'
    include '/gfxbase.i'
    include '/view.i'
    include '/display.i'
    include 'hardware/intbits.i'
    include 'hardware/dmabits.i'
    include 'hardware/custom.i'

    section	graphics

    xdef _update_top_color
    xref _new_mode
    xref _check_genlock
    xref _get_bplcon3
    xref _get_bplcon2

*   downcoded from c 03.20.89 -- bart
*   update_top_color(mspc)    -- modifies copinit variables for current display
*   needs various hardcoded bit fields redefined as equ's in include files
*   does not return any specific value in d0
* NOTE this routine must be called while ActiViewCPRSemaphore is held!!!!

_update_top_color:

    move.l	gb_ActiView(a6),d0
    beq		utc_rts				; no view
    move.l	d0,a1
    move.l	v_ViewPort(a1),d1
    beq		utc_novp			; no viewport

utc_save:
    movem.l	a2/d0-d5,-(sp)	; save registers
    move.l	d1,a0
    move.l	a0,a2				; bestvp in a2
    move.w	#10000,d3			; bestdy in d3
    move.l	a0,(sp)				; preset stack

utc_loop:
    btst.b	#5,vp_Modes(a0)			; visible?
    bne.s	utc_next
    move.w	vp_DyOffset(a0),d2		; tempdy in d2
    jsr		_new_mode			; control modes in d0
    move.l	d0,d4				; tempmd in d4
    btst	#2,d0				; interlace?
    beq.s	utc_chksdbl
    asr.w	#1,d2
    bra.s	utc_noshift
utc_chksdbl:
    btst	#3,d0				; doublescan?
    beq.s	utc_noshift
    asl.w	#1,d2

utc_noshift:
    cmp.w	d2,d3	
    ble.s	utc_next			; tempdy <= bestdy

utc_newbest:

    move.l	(sp),a2				; new bestvp
    move.w	d2,d3				; new bestdy
    move.l	d4,d5				; new bestmd

utc_next:
    move.l	(sp),a0				; lastvp
    move.l	vp_Next(a0),a0			; nextvp
    move.l	a0,(sp)				; preset stack
    bne.s	utc_loop			; more to check...

utc_getcm:

    clr.l	4(sp)				; clear second stack arg
    move.l	vp_ColorMap(a2),(sp)		; cm arg to check_genlock
    beq		utc_nocm

utc_cm:

    jsr		_check_genlock			; gen in d0

    move.l	(sp),a0				; cm
    move.l	cm_ColorTable(a0),a0		; cm->colortable
    move.w	(a0),d1				; cm->colortable[0]

    btst	#5,d5				; superhires?
    beq.s	utc_notsuper
    btst.b	#GFXB_AA_MLISA,gb_ChipRevBits0(a6)
    bne.s	utc_notsuper
    bsr		fix_super

utc_notsuper:

    move.w	#color,d2
    swap	d2
    move.w	d0,d2
    or.w	d1,d2		
    move.l	gb_copinit(a6),a1
    lea		copinit_diagstrt+4(a1),a1
    move.l	#((bplcon3<<16)|$0c00),d3
    move.l	(sp),a0				; colormap
    movem.l	d0/d1/a1,-(sp)
    jsr		_get_bplcon3			; get border genloc stuff
    or.w	d0,d3
    movem.l	(sp)+,d0/d1/a1
    move.l	32(sp),d4			; mspec
    beq.s	1$
    move.l	d4,a0
    btst.b	#3,ms_BeamCon0+1(a0)		; BLANKEN
    beq.s	1$
    or.b	#$1,d3				; EXTBLNKEN
1$:
    move.l	d3,(a1)+			; bank 0
    move.l	d2,(a1)+
    move.l	(sp),a0				; colormap
    move.b	cm_Type(a0),d2
    cmp.b	#COLORMAP_TYPE_V39,d2
    bne.s	utc_notsuperlow			; use the same bits
    btst.b	#GFXB_AA_LISA,gb_ChipRevBits0(a6)
    beq.s	utc_notsuperlow
    move.l	cm_LowColorBits(a0),a0
    move.w	(a0),d1
    btst	#5,d5
    beq.s	utc_notsuperlow

    bsr		fix_super

utc_notsuperlow:
    move.w	#color,d2
    ; do we want a COLOUR0, BPLCON3 or two NOPs?
    btst.b	#GFXB_AA_LISA,gb_ChipRevBits0(a6)
    bne.s	1$
    swap	d3
    move.w	#$1fe,d3
    move.w	#$1fe,d2
    swap	d3
1$:
    swap	d2
    move.w	d0,d2
    or.w	d1,d2
    or.w	#$200,d3			; bank 0 loct 1
    move.l	d3,(a1)+
    move.l	d2,(a1)+

utc_mspc:

    move.l	32(sp),d0			
    beq		utc_delay			; delay diwstrt...

    move.l	gb_copinit(a6),a2
*    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
*    beq		utc_exit			; nothing more to do...

    move.l	d0,a1				; a1 == mspc			
						; d1 == bplcon0
						; d2 == bplcon2
						; d3 == bplcon3
utc_bplcon0:

    move.w	#bplcon0,d4
    swap	d4
    move.w	gb_system_bplcon0(a6),d4
    move.l	gb_ActiView(a6),a0
    move.w	v_Modes(a0),d0
    and.w	#4,d0				; view interlaced?
    or.w	d0,d4
    btst	#5,d5				; vp superhires?
    beq.s	utc_nosuperbpl
    or.w	#$40,d4				; set super in bplcon0
utc_nosuperbpl:
    move.w	d5,d0
    and.w	#V_HAM+V_DUALPF+V_HIRES,d0	; misc bits
    or.w	d0,d4				; basic bplcon0
    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
    bne.s	utc_bplcon2
    move.l	d4,copinit_diagstrt(a2)		; stuf bplcon0 in init list
    bra		utc_exit			; nothing more to do.

utc_bplcon2:
    or.w	#1,d4				; set ECSENA - we will be writing
    						; to bplcon3
    move.l	(sp),a0
    moveq.l	#0,d2
    move.w	#bplcon2,d2
    swap	d2
    jsr		_get_bplcon2
    move.w	d0,d2
    move.l	d4,d1

    moveq.l	#0,d0
    move.w	d5,d0
    and.w	#V_PFBA,d0			; playfield 2 priority?
    or.w	d0,d2				; basic bplcon2

utc_cmtype:

    move.b	cm_Type(a0),d0			; test version
    beq.s	utc_nobdtrans			; && skip V1.2

utc_cmflags:

    move.b	cm_Flags(a0),d0
    btst	#0,d0
    beq.s	utc_nomaptrans
    or.w	#$400,d2			; set zdcten

utc_nomaptrans:

    btst	#1,d0
    beq.s	utc_nobdtrans
    or.w	#$800,d2			; set zdbpen

    swap	d0
    move.b	cm_TransparenyPlane(a0),d0
    moveq	#12,d4
    lsl.w	d4,d0
    or.w	d0,d2				; set zdbplanes
    swap	d0
	
utc_nobdtrans:

    moveq	#0,d3
    move.w	#bplcon3,d3
    btst.b	#GFXB_AA_LISA,gb_ChipRevBits0(a6)
    bne.s	1$
    move.w	#$1fe,d3			; NOP for ECS and A
1$:
    swap	d3				; basic bplcon3
    move.w	ms_BeamCon0(a1),d4
    btst	#3,d4				; csblank?
    beq.s	utc_nocsblank
    or.w	#1,d1				; use bplcon3...
    or.w	#1,d3				; and extblnken...

utc_nocsblank:

	move.w	gb_SpriteFMode(a6),d0
	btst.b	#MSB_DOUBLE_SPRITES,ms_Flags+1(a1)
	beq.s	1$
	or.w	#FMF_SSCAN2,d0
1$:	move.w	d0,copinit_fm0+2(a2)
    move.l	d1,copinit_diagstrt(a2)		; stuf bplcon0 in init list
    move.l	d2,copinit_bplcon2(a2)		; stuf bplcon2 in init list
    jsr		_get_bplcon3				; d0=bplcon3
    or.w	d0,d3
    move.l	d3,copinit_diagstrt+20(a2)	; stuf bplcon3 in init list
utc_bpldone:

    bra.s	utc_delay	

utc_nocm:

    moveq.l 	#0,d2
    move.w	#bplpt,d2
    swap	d2
    move.l	gb_copinit(a6),a0
    lea		copinit_diagstrt+4(a0),a1
    move.l	d2,(a1)+
    move.l	d2,(a1)+
    move.l	d2,(a1)+
    move.l	d2,(a1)		; kill top color in init list

utc_delay:

* restore the blank line in copinit. This may have been overriden by the
* no_viewport fix below. BUT, not for 'A' machines. 

    btst.b	#GFXB_HR_DENISE,gb_ChipRevBits0(a6)
    beq.s		utc_exit
    move.w	#diwstrt,d0
    swap	d0
    move.w	#$0181,d0
    move.w	#diwstop,d1
    swap	d1
    move.w	#$0281,d1
    move.l	gb_copinit(a6),a0
    move.l	d0,copinit_diwstart(a0)		; stuf diwstrt in init list
    move.l	d1,copinit_diwstart+4(a0)	; stuf diwstop in init list

utc_exit:

    movem.l	(sp)+,a2/d0-d5	; restore registers

utc_rts:

	btst	#GFXB_AA_LISA,gb_ChipRevBits0(a6)
	bne.s	no_hackhack
; set the extra color00 writes to nops so as to not fool
; copper list pokers. The bplcon3 instructions in AA copinit should be NOPs from
; above.
	move.l	gb_copinit(a6),a0
	move.w	#$1fe,16+copinit_diagstrt(a0)

no_hackhack:
    rts

utc_novp:
	
*    view with no viewport" are there old style copper lists???
*    when such old style copper lists are loaded we can sniff them out
*    by looking at first bplcon0 having a depth of zero, or by the lack
*    of finding a diwhigh: the latter is preferable, but the first is faster
*
*    (in the interests of space and speed, check code removed for 37.2 release)
*
*    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
*    beq.s	utc_rts				; nothing more to do...
*
*    move.l	v_LOFCprList(a1),d0		; must check for old style lists
*    beq.s	utc_rts
*    move.l	d0,a0
*    move.w	crl_MaxCount(a0),d1
*    beq.s	utc_rts
*    move.l	crl_start(a0),d0
*    beq.s	utc_rts
*    move.l	d0,a0
*    bra.s	1$
*2$  move.l	(a0)+,d0		
*    and.l	#$FFFF7010,d0
*    cmp.l	#$01000000,d0
*    beq.s	3$
*1$  dbra	d1,2$
*    bra.s 	utc_rts
*
*   found old style lists, may kludge display window open for showanim
*

3$  move.l	gb_copinit(a6),a0
    lea.l	copinit_diwstart(a0),a0
    move.w	#diwstrt,(a0)+
    move.w	#$14ff,(a0)+
    move.w	#diwhigh,(a0)+
    move.w	#$0000,(a0)
    bra.s 	utc_rts

fix_super:
    btst	#GFXB_AA_LISA,gb_ChipRevBits0(a6)   
    bne.s	fix_super.		; don't fudge the colours for AA
    and.w	#$ccc,d1
    move.w	d1,d2	
    lsr.w	#2,d2
    or.w	d2,d1				; funny hardware

    move.w	d0,d2	
    lsr.w	#1,d2
    or.w	d2,d0		
fix_super.:
    rts

    end   
@


39.15
log
@bplcon0 was not updated on 'A' machines.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.14 92/08/17 13:44:08 chrisg Exp Locker: spence $
d141 8
d235 4
d299 3
a301 3
; set the extra color00 and bplcon3 writes to nops so as to not fool
; copper list pokers.
	move.w	#$1fe,d0
d303 1
a303 3
	move.w	d0,12+copinit_diagstrt(a0)
	move.w	d0,16+copinit_diagstrt(a0)
	move.w	d0,20+copinit_diagstrt(a0)
@


39.14
log
@poke extra bplcon3 and color00 writes to NOPs when running in ECS or A mode.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.13 92/08/11 14:05:05 chrisg Exp Locker: chrisg $
d153 3
a155 2
    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
    beq		utc_exit			; nothing more to do...
d178 5
a182 1
    beq.s	utc_bplcon2
a184 2
utc_bplcon2:

a235 1
    move.l	gb_copinit(a6),a2
@


39.13
log
@set spritefmode.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.12 92/08/03 08:37:51 chrisg Exp Locker: chrisg $
d177 1
a177 1
    beq		utc_bplcon2
d266 1
a266 1
    beq		utc_exit
d283 11
@


39.12
log
@no longer locks semaphore for int fix. callers must lock semaphore!
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.11 92/07/09 12:11:04 spence Exp Locker: chrisg $
d234 5
a238 6
* Set the sprite scan-double bit in fmode?
    bclr.b	#(FMB_SSCAN2-8),copinit_fm0+2(a2)	; assume cleared
    btst.b	#MSB_DOUBLE_SPRITES,ms_Flags+1(a1)
    beq.s	1$
    or.w	#FMF_SSCAN2,copinit_fm0+2(a2)
1$:
d241 1
a241 1
    jsr		_get_bplcon3
@


39.11
log
@correctly calculates the top colour if there is a scan doubled ViewPort
visible.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.10 92/06/09 12:11:56 spence Exp Locker: spence $
d35 1
a37 6
    xref	_LVOObtainSemaphore 		; single thread access	
    move.l	gb_ActiViewCprSemaphore(a6),a0	; to ActiView hardware
    move.l	a6,-(sp) 			; copper list
    move.l	gb_ExecBase(a6),a6 
    jsr     	_LVOObtainSemaphore(a6) 
    move.l	(sp)+,a6 	
a282 7

    xref	_LVOReleaseSemaphore 
    move.l	gb_ActiViewCprSemaphore(a6),a0 	
    move.l	a6,-(sp) 		
    move.l	gb_ExecBase(a6),a6 
    jsr     	_LVOReleaseSemaphore(a6)
    move.l	(sp)+,a6 		
@


39.10
log
@The blank line in copinit is not restore for 'A' machines.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.9 92/06/08 15:58:01 spence Exp Locker: spence $
d64 5
d70 1
a70 1
    asr.w	#1,d2
@


39.9
log
@sets the sprite scandouble bit in copinit->fm0 if the monitorspec has
the DOUBLE_SPRITE bit set.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.8 92/05/15 07:28:11 spence Exp Locker: spence $
d264 1
a264 1
* no_viewport fix below.
d266 2
@


39.8
log
@always rewrite the copinit instructions that make up the one blank line,
because the no_vp code that always keeps the display window open
overwrites it.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.7 92/05/13 11:31:59 spence Exp Locker: spence $
d12 2
a18 1
    include '/monitor.i'
d234 6
@


39.7
log
@modified for new copinit structure.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.6 92/04/29 12:13:05 spence Exp Locker: spence $
d256 2
a257 1
    IFD	DIWSTART
a258 8
* removed this code. A single line display window is always open in
* copinit, irrespective of Chip rev to fix Alice bug. Leaving it open in
* the other ChipSets should (?) be harmless.
* spence - Apr 29 1992

    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
    beq.s	utc_exit			; nothing more to do...

d261 2
a262 2
    move.w	#$ffff,d0
    move.w	#diwhigh,d1
d264 1
a264 1
    move.w	#$ff,d1
d267 1
a267 3
    move.l	d1,copinit_diwstart+4(a0)	; stuf diwhigh in init list

    ENDC
@


39.6
log
@No longer updates the copinit_diwstart register in copinit.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.5 92/02/28 13:39:53 spence Exp Locker: spence $
d234 1
a234 1
    move.l	d2,copinit_genloc(a2)		; stuf bplcon2 in init list
d237 1
a237 2
    move.l	d3,copinit_genloc+4(a2)		; stuf bplcon3 in init list
    move.l	d3,copinit_diagstrt+20(a2)
@


39.5
log
@calls get_bplcon2()
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.4 92/02/19 14:39:31 spence Exp Locker: spence $
d12 1
a17 1
    include '/copper.i'
d257 7
d276 2
@


39.4
log
@sets the EXTBLNKEN bit and genloc bits in bplcon3 in copinit
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.3 92/01/29 16:55:02 spence Exp Locker: spence $
d28 1
d161 3
a163 3
    move.w	#bplcon0,d1
    swap	d1
    move.w	gb_system_bplcon0(a6),d1
d167 5
a171 1
    or.w	d0,d1
d174 1
a174 1
    or.w	d0,d1				; basic bplcon0
d177 1
a177 1
    or.w	#1,d1				; set ECSENA - we will be writing
d181 1
d185 3
a187 7

    move.b	vp_SpritePriorities(a2),d2
    btst	#5,d5				; vp superhires?

    beq.s	utc_nosuperbpl
    lsr.w	#1,d2				; temp hack
    or.w	#$40,d1				; set super in bplcon0
a188 2
utc_nosuperbpl:

a200 1
    move.l	(sp),a0
@


39.3
log
@knows about reordered copinit
Don't read lowbits of a colormap in non-AA modes.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.2 91/11/08 12:11:33 spence Exp Locker: spence $
d109 14
a122 1
    move.l	#((bplcon3<<16)|$0c00),(a1)+	; bank 0
d141 3
a143 2
    or.w	d1,d2		
    move.l	#((bplcon3<<16)|$0e00),(a1)+	; bank 0 loct 1
d215 1
a215 1
    move.l	#12,d4
d239 1
a239 1

@


39.2
log
@Only swizzles 35ns colours on true ECS machines.
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.1 91/08/27 16:54:15 spence Exp Locker: spence $
d27 1
d49 1
a49 1
    movem.l	a2/d5/d4/d3/d2/d1/d0,-(sp)	; save registers
d107 2
a108 2
    move.l	gb_copinit(a6),a0
    lea		copinit_diagstrt(a0),a1
d111 6
a116 1
    move.l	(sp),a0
d156 4
a159 1

a179 6
utc_bplcon3:

    moveq.l	#0,d3
    move.w	#bplcon3,d3
    swap	d3				; basic bplcon3

d196 1
a196 1
    beq.s	utc_noplanetrans
a205 14
utc_noplanetrans:

    btst	#2,d0				; border_blanking?
    beq.s	utc_nobdblank
    or.w	#1,d1				; use bplcon3...
    or.w	#$20,d3				; and brdnblnk..

utc_nobdblank:

    btst	#3,d0				; border_notransparency?
    beq.s	utc_nobdtrans
    or.w	#1,d1				; use bplcon3...
    or.w	#$10,d3				; and brdntrans..

d208 3
d219 6
a224 4
    move.l	gb_copinit(a6),a0
    move.l	d1,copinit_diagstrt+16(a0)	; stuf bplcon0 in init list
    move.l	d2,copinit_genloc(a0)		; stuf bplcon2 in init list
    move.l	d3,copinit_genloc+4(a0)		; stuf bplcon3 in init list
d236 1
a236 1
    lea		copinit_diagstrt(a0),a1
d253 1
d259 1
a259 1
    movem.l	(sp)+,a2/d5/d4/d3/d2/d1/d0	; restore registers
@


39.1
log
@poke high and low nybbles of colour0 in copinit
@
text
@d3 1
a3 1
*	$Id: update.asm,v 39.0 91/08/21 17:22:49 chrisg Exp Locker: spence $
d96 2
a97 1

@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: update.asm,v 37.3 91/01/22 14:01:05 bart Exp Locker: chrisg $
d12 6
a17 6
    include 'graphics/gfx.i'
    include 'graphics/gfxbase.i'
    include 'graphics/view.i'
    include 'graphics/display.i'
    include 'graphics/monitor.i'
    include 'graphics/copper.i'
d97 1
a97 8
    and.w	#$ccc,d1
    move.w	d1,d2	
    lsr.w	#2,d2
    or.w	d2,d1				; funny hardware

    move.w	d0,d2	
    lsr.w	#1,d2
    or.w	d2,d0		
d106 18
a123 1
    move.l	d2,copinit_diagstrt(a0)		; stuf top color in init list
d227 1
a227 1
    move.l	d1,copinit_diagstrt+4(a0)	; stuf bplcon0 in init list
d241 5
a245 1
    move.l	d2,copinit_diagstrt(a0)		; kill top color in init list
d314 14
@


37.3
log
@fix bplcon3 processing
@
text
@d3 1
a3 1
*	$Id: update.asm,v 37.2 91/01/14 14:55:35 bart Exp Locker: bart $
@


37.2
log
@in the interests of space and speed, check code removed for 37.2 release
@
text
@d3 1
a3 1
*	$Id: update.asm,v 37.1 91/01/14 13:45:27 bart Exp Locker: bart $
d163 1
a163 1
    move.w	#bplcon2,d3
@


37.1
log
@kludge to fix showanim -- if no viewport and old style lists open diwindow
@
text
@d3 1
a3 1
*	$Id: update.asm,v 37.0 91/01/07 15:28:00 spence Exp Locker: bart $
d264 26
a289 24
*   view with no viewport" are there old style copper lists???
*   when such old style copper lists are loaded we can sniff them out
*   by looking at first bplcon0 having a depth of zero, or by the lack
*   of finding a diwhigh: the latter is preferable, but the first is faster

    btst.b	#1,gb_ChipRevBits0(a6)		; ecs denise?
    beq.s	utc_rts				; nothing more to do...

    move.l	v_LOFCprList(a1),d0		; must check for old style lists
    beq.s	utc_rts
    move.l	d0,a0
    move.w	crl_MaxCount(a0),d1
    beq.s	utc_rts
    move.l	crl_start(a0),d0
    beq.s	utc_rts
    move.l	d0,a0
    bra.s	1$
2$  move.l	(a0)+,d0		
    and.l	#$FFFF7010,d0
    cmp.l	#$01000000,d0
    beq.s	3$
1$  dbra	d1,2$
    bra.s 	utc_rts

d291 1
d294 5
a298 8
    move.w	#diwstrt,d0
    swap	d0
    move.w	#$14ff,d0
    move.w	#diwhigh,d1
    swap	d1
    move.w	#$0000,d1
    move.l	d0,copinit_diwstart(a0)		; stuf diwstrt in init list
    move.l	d1,copinit_diwstart+4(a0)	; stuf diwhigh in init list
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: update.asm,v 36.6 90/07/27 17:00:25 bart Exp Locker: spence $
d45 1
a45 1
    beq		utc_rts				; no viewport
d261 39
@


36.6
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/update.asm,v 36.4 89/10/31 13:00:52 bart Exp Locker: bart $
@


36.4
log
@gb_ExecBase
@
text
@d3 1
a3 1
*	$Header: update.asm,v 36.3 89/08/22 09:36:36 bart Exp $
@


36.3
log
@single thread access to ActiView hardware copper list
@
text
@d3 1
a3 1
*	$Header: update.asm,v 36.2 89/04/29 15:43:01 bart Exp $
a33 1
    xref	_AbsExecBase			
d37 1
a37 1
    move.l	_AbsExecBase,a6 
d256 1
a256 1
    move.l	_AbsExecBase,a6 	
@


36.2
log
@cm->Type checking
@
text
@d3 1
a3 1
*	$Header: update.asm,v 36.1 89/04/28 18:23:13 bart Exp $
d34 8
d253 7
@


36.1
log
@fix alert bug (no colormap attached to alert view) in utc_delay 04.28.89
@
text
@d3 1
a3 1
*	$Header: update.asm,v 36.0 89/03/20 16:39:55 bart Exp $
d159 5
d175 1
a175 1
    beq.s	utc_nocpltrans
d185 1
a185 1
utc_nocpltrans:
a186 8
    move.w	ms_BeamCon0(a1),d4
    btst	#3,d4				; csblank?
    beq.s	utc_nocsblank
    or.w	#1,d1				; use bplcon3...
    or.w	#1,d3				; and extblnken...

utc_nocsblank:

d200 8
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*	$Header: $
d110 3
a115 2
    move.l	32(sp),d0			
    beq		utc_delay			; delay diwstrt...
d222 3
@
