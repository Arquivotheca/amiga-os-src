head     39.19;
branch   ;
access   ;
symbols  rel39_24:39.19 rel39_18:39.19 rel39_97:39.18 rel39_90:39.18 rel39_89:39.16 rel39_82:39.16 rel39_76:39.16 rel39_71:39.15 rel39_65:39.15 rel39_64:39.15 rel39_61:39.14 rel39_60:39.14 rel39_55:39.14 rel39_47:39.14 rel39_39:39.12 rel39_38:39.12 rel39_37:39.11 rel39_35:39.9 rel39_34:39.9;
locks    ; strict;
comment  @ * @;


39.19
date     93.02.15.10.58.47;  author spence;  state Exp;
branches ;
next     39.18;

39.18
date     92.10.07.18.24.41;  author spence;  state Exp;
branches ;
next     39.17;

39.17
date     92.09.17.15.11.24;  author spence;  state Exp;
branches ;
next     39.16;

39.16
date     92.07.09.12.05.03;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     92.06.03.18.05.25;  author spence;  state Exp;
branches ;
next     39.14;

39.14
date     92.04.03.10.57.04;  author spence;  state Exp;
branches ;
next     39.13;

39.13
date     92.03.18.16.00.25;  author spence;  state Exp;
branches ;
next     39.12;

39.12
date     92.03.03.10.25.42;  author spence;  state Exp;
branches ;
next     39.11;

39.11
date     92.02.26.11.33.28;  author spence;  state Exp;
branches ;
next     39.10;

39.10
date     92.02.25.17.38.17;  author spence;  state Exp;
branches ;
next     39.9;

39.9
date     92.01.03.16.03.20;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     91.12.31.14.28.42;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     91.12.20.15.47.48;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     91.11.25.15.55.10;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     91.11.21.10.27.06;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     91.11.15.18.57.19;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     91.11.15.11.48.29;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.15.10.51.11;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.12.20.34.42;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.11.12.12.22.32;  author spence;  state Exp;
branches ;
next     ;


desc
@Mode Coercion code
@


39.19
log
@If passed new IGNORE_MCOMPAT flag from intuition, then check bitplane
alignment. If unaligned, then uses BestModeID() as before. Intuition uses
this feature before calling MakeVPort() to decide if the ViewPort can
be displayed, rather than after MakeVPort().
@
text
@/******************************************************************************
*
*	$Id: coerce.c,v 39.18 92/10/07 18:24:41 spence Exp Locker: spence $
*
******************************************************************************/


	#include "/modeid.h"
	#include "/coerce.h"
	#include "/displayinfo.h"
	#include "c.protos"
	#include "/gfxpragmas.h"
	#include <utility/tagitem.h>

/****** graphics.library/CoerceMode ********************************************
*
*   NAME
*	CoerceMode -- calculate ViewPort mode coercion (V39)
*
*   SYNOPSIS
*	ID = CoerceMode(RealViewPort, MonitorID, Flags);
*	d0              a0            d0         d1
*
*	ULONG CoerceMode(struct ViewPort *, ULONG, ULONG);
*
*   FUNCTION
*	To determine the best mode in the MonitorID to coerce RealViewPort to,
*	given the restrictions set in Flags.
*
*   INPUTS
*	RealViewPort - ViewPort to coerce
*	MonitorID    - Montor number to coerce to (ie a mode masked with
*	               MONITOR_ID_MASK).
*	Flags        - PRESERVE_COLORS - keep the number of bitplanes
*	               in the ViewPort.
*	               AVOID_FLICKER - do not coerce to an interlace mode
*
*   RESULTS
*	ID      - ID of the best mode to coerce to, or INVALID_ID if could not
*	          coerce (see NOTES).
*
*   NOTES
*	This function takes into account the compatibility of the Monitor
*	being coerced to, and the ViewPort that is being coerced.
*	Incompatibilities will cause a result of INVALID_ID.
*
*   EXAMPLE
*	newmode = CoerceMode(vp, VGA_MONITOR_ID, PRESERVE_COLORS);
*
*   SEE ALSO
*	<graphics/coerce.h> <graphics/displayinfo.h>
*
******************************************************************************/


/*#define DEBUG*/
#ifdef DEBUG
#define D(x) {x;}
#else
#define D(x)
#endif

ULONG __asm CoerceMode(register __a0 struct ViewPort *vp, register __d0 ULONG MonitorID, register __d1 ULONG Flags)
{
    ULONG ID = gfx_GetVPModeID(vp);
    ULONG mntr;
    ULONG must, mustnot;
    int t = 0;
    struct DisplayInfo dinfo;
    struct TagItem tag[9];

    D(kprintf("CoerceMode(). vp = 0x%lx, MonitorID = 0x%lx, Flags = 0x%lx\n", vp, MonitorID, Flags);)
    D(kprintf("ID = 0x%lx\n", ID);)

    mntr = MonitorID & MONITOR_ID_MASK;
    if (((ID >> 16) == 0) && 
        (mntr == ((GBASE->DisplayFlags & PAL) ? PAL_MONITOR_ID : NTSC_MONITOR_ID)))
    {
	/* coercing default monitor to PAL or NTSC */
	D(kprintf("coercing default\n");)
	return(mntr | ID);
    }

    /* If coercing to itself, and this is the first ViewPort, then check
     * the alignment, as intuition uses this feature to promote misaligned
     * screens. If it's not the first ViewPort (as declared by intuition, then
     * let BestModeID() handle monitor compatibility issues.
     */
    if (((ID >> 16) == (MonitorID >> 16)) && (Flags & IGNORE_MCOMPAT) &&
        (CalcFMode(vp) != -1))
    {
	/* coercing to itself */
	D(kprintf("Coercing itself\n");)
	return(ID);
    }

    must = NULL;
    mustnot = SPECIAL_FLAGS;
    tag[t].ti_Tag = BIDTAG_ViewPort;
    tag[t++].ti_Data = (ULONG)vp;
    tag[t].ti_Tag = BIDTAG_MonitorID;
    tag[t++].ti_Data = MonitorID;
    if (gfx_GetDisplayInfoData(NULL, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, ID))
    {
	must = (dinfo.PropertyFlags & SPECIAL_FLAGS);
	mustnot = (SPECIAL_FLAGS & ~must);
	if ((Flags & AVOID_FLICKER) && (!(dinfo.PropertyFlags & DIPF_IS_LACE)))
	{
		/* we don't want lace if AVOID_FLICKER is set, and this
		 * ViewPort is not naturally laced.
		 */
		mustnot |= DIPF_IS_LACE;
	}
	D(kprintf("must = 0x%lx, mustnot = 0x%lx\n", must, mustnot);)

	tag[t].ti_Tag = BIDTAG_RedBits;
	tag[t++].ti_Data = dinfo.RedBits;
	tag[t].ti_Tag = BIDTAG_GreenBits;
	tag[t++].ti_Data = dinfo.GreenBits;
	tag[t].ti_Tag = BIDTAG_BlueBits;
	tag[t++].ti_Data = dinfo.BlueBits;
    }
    tag[t].ti_Tag = BIDTAG_DIPFMustNotHave;
    tag[t++].ti_Data = mustnot;
    tag[t].ti_Tag = BIDTAG_DIPFMustHave;
    tag[t++].ti_Data = must;
    if (!(Flags & IGNORE_MCOMPAT))
    {
	tag[t].ti_Tag = BIDTAG_GfxPrivate;
	tag[t++].ti_Data = BIDTAG_COERCE;
    }
    tag[t].ti_Tag = TAG_DONE;

    return(gfx_BestModeIDA(tag));
}
@


39.18
log
@Ignores AVOID_FLICKER if the viewport is naturally laced.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.17 92/09/17 15:11:24 spence Exp Locker: spence $
d65 43
a107 19
	ULONG ID = gfx_GetVPModeID(vp);
	ULONG mntr;
	ULONG must, mustnot;
	int t = 0;
	struct DisplayInfo dinfo;
	struct TagItem tag[8];

	D(kprintf("CoerceMode(). vp = 0x%lx, MonitorID = 0x%lx, Flags = 0x%lx\n", vp, MonitorID, Flags);)
	D(kprintf("ID = 0x%lx\n", ID);)

	mntr = MonitorID & MONITOR_ID_MASK;
	if (((ID >> 16) == 0) && 
            (mntr == ((GBASE->DisplayFlags & PAL) ? PAL_MONITOR_ID : NTSC_MONITOR_ID)))
	{
		/* coercing default monitor to PAL or NTSC */
		D(kprintf("coercing default\n");)
		return(mntr | ID);
	}
	if ((ID >> 16) == (MonitorID >> 16))
d109 4
a112 3
		/* coercing to itself */
		D(kprintf("Coercing itself\n");)
		return(ID);
d114 1
d116 17
a132 31
	must = NULL;
	mustnot = SPECIAL_FLAGS;
	tag[t].ti_Tag = BIDTAG_ViewPort;
	tag[t++].ti_Data = vp;
	tag[t].ti_Tag = BIDTAG_MonitorID;
	tag[t++].ti_Data = MonitorID;
	if (gfx_GetDisplayInfoData(NULL, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, ID))
	{
		must = (dinfo.PropertyFlags & SPECIAL_FLAGS);
		mustnot = (SPECIAL_FLAGS & ~must);
		if ((Flags & AVOID_FLICKER) && (!(dinfo.PropertyFlags & DIPF_IS_LACE)))
		{
			/* we don't want lace if AVOID_FLICKER is set, and this
			 * ViewPort is not naturally laced.
			 */
			mustnot |= DIPF_IS_LACE;
		}
		D(kprintf("must = 0x%lx, mustnot = 0x%lx\n", must, mustnot);)

		tag[t].ti_Tag = BIDTAG_RedBits;
		tag[t++].ti_Data = dinfo.RedBits;
		tag[t].ti_Tag = BIDTAG_GreenBits;
		tag[t++].ti_Data = dinfo.GreenBits;
		tag[t].ti_Tag = BIDTAG_BlueBits;
		tag[t++].ti_Data = dinfo.BlueBits;
	}
	tag[t].ti_Tag = BIDTAG_DIPFMustNotHave;
	tag[t++].ti_Data = mustnot;
	tag[t].ti_Tag = BIDTAG_DIPFMustHave;
	tag[t++].ti_Data = must;
	tag[t].ti_Tag = TAG_DONE;
d134 1
a134 1
	return(gfx_BestModeIDA(tag));
@


39.17
log
@Clean up the autodocs
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.16 92/07/09 12:05:03 spence Exp Locker: spence $
d72 3
d100 9
d117 1
a117 1
	tag[t++].ti_Data = (mustnot | ((Flags & AVOID_FLICKER) ? DIPF_IS_LACE : 0));
@


39.16
log
@removed PROMOTE option from autodocs.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.15 92/06/03 18:05:25 spence Exp Locker: spence $
d43 1
a43 1
*	This function takes into account the Compatability of the Monitor
d45 1
a45 1
*	Incompatibilitys will cause a result of INVALID_ID.
@


39.15
log
@Calls BestModeID() instead.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.14 92/04/03 10:57:04 spence Exp Locker: spence $
a36 1
*	               PROMOTE - promote to a "flicker-fixed" mode.
a46 7
*	Promotion is valid only for NTSC and PAL viewports. Any other 
*	ViewPort asked to be promoted will result in RealViewPort being
*	returned. For Promotion, the MonitorID value is ignored.
*
*	If the Promotion monitor is not available, the ModeID of
*	RealViewPort is returned.
*
a48 2
*
*       newmode = CoerceMode(vp, 0, PROMOTE);
@


39.14
log
@No longer looks at the View->Modes LACE bit (which is not relevant
to the NEW View coming up!)
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.13 92/03/18 16:00:25 spence Exp Locker: spence $
d7 2
a8 1
	#include <exec/types.h>
a9 1
	#include "/view.h"
d11 1
a11 4
	#include "/gfx.h"
	#include "/gfxbase.h"
	#include "/displayinfo_internal.h"
	#include "/macros.h"
d13 1
a13 2
	#include "c.protos"
	#include "/d/d.protos"
d65 1
a72 5
#define MUST_FLAGS (DIPF_IS_DUALPF | DIPF_IS_PF2PRI | DIPF_IS_HAM | DIPF_IS_EXTRAHALFBRITE)
#define TOPROMOTE 0x80000
#define NTSCFIXED 0x91000
#define PALFIXED  0xa1000

d75 6
a80 38
    ULONG vpid = gfx_GetVPModeID(vp);
    struct DisplayInfo dinfo;
    struct MonitorInfo vpminfo, tominfo;
    DisplayInfoHandle handle = (DisplayInfoHandle)gfx_FindDisplayInfo(vpid);
    DisplayInfoHandle mhandle = NULL;
    struct DimensionInfo *dims = (struct DimensionInfo *)&tominfo;	/* reuse */
    struct DisplayInfoRecord *rec;
    ULONG mntr;
    ULONG bestid = INVALID_ID;
    BOOL mix = TRUE;
    BOOL havewidth = FALSE, haveheight = FALSE;
    BOOL ispal;
    WORD vpwidth = vp->DWidth, vpheight = vp->DHeight;
    UWORD bestdepth = 0;
    UWORD bestwidth = 0, bestheight = 0;

    D(kprintf("Flags = 0x%lx, vpid = 0x%lx, MonitorID = 0x%lx\n", Flags, vpid, MonitorID);)

    if ((vp->RasInfo) && (vp->RasInfo->BitMap))
    {
	bestdepth = vp->RasInfo->BitMap->Depth;
    }

    mntr = MonitorID & MONITOR_ID_MASK;
    if ((GBASE->DisplayFlags & PAL) && ((vpid & MONITOR_ID_MASK) == 0))
    {
	ispal = TRUE;
    }
    else
    {
	ispal = (((vpid & MONITOR_ID_MASK) == PAL_MONITOR_ID) ? TRUE : FALSE);
    }

    if (Flags & PROMOTE)
    {
	if ((vpid & MONITOR_ID_MASK) <= PAL_MONITOR_ID)
	{
		/* Promoting an NTSC/PAL/default monitor */
d82 2
a83 13
		MonitorID = (ispal ? PALFIXED : NTSCFIXED);
		D(kprintf("Promoting to MonitorID of 0x%lx\n", MonitorID);)
		mntr = MonitorID & MONITOR_ID_MASK;
	}
	else
	{
		D(kprintf("Not promoting NTSC or PAL\n");)
		return(vpid);
	}
    }
    else
    {
	if (((vpid >> 16) == 0) && 
d88 1
a88 25
		return(vpid | mntr);
	}
    }

    if (rec = find_key((struct DisplayInfoRecord *)(SubRecord((struct DisplayInfoRecord *)GBASE->DisplayInfoDataBase)), (mntr >> 16), (UWORD)~0))
    {
	mhandle = SubRecord(rec);
	D(kprintf("mhandle = 0x%lx\n", mhandle);)
    }

    /* check monitor compatibility */

    if (gfx_GetDisplayInfoData(handle, (APTR)&vpminfo, sizeof(struct MonitorInfo), DTAG_MNTR, vpid) &&
        gfx_GetDisplayInfoData(mhandle, (APTR)&tominfo, sizeof(struct MonitorInfo), DTAG_MNTR, MonitorID))
    {
	WORD vpcomp = vpminfo.Compatibility;
	WORD tocomp = tominfo.Compatibility;

	D(kprintf("check compatibilty\n");)
	if ((vpcomp == MCOMPAT_NOBODY) || (tocomp == MCOMPAT_NOBODY) ||
	   (((vpcomp == MCOMPAT_SELF) || (tocomp == MCOMPAT_SELF)) &&
	    ((vpid & MONITOR_ID_MASK) != mntr)))
	{
		D(kprintf("Not compatible\n");)
		mix = FALSE;
d90 1
a90 17
    }
    else
    {
	D(kprintf("No MonitorInfo\n");)
	mix = FALSE;
    }

    /* the width to look for is the Min of vp->DWidth and
     * the DisplayClip.
     */

    if (mix)
    {
	struct ColorMap *cm;
	struct ViewPortExtra *vpe;

	if ((vpid >> 16) == (MonitorID >> 16))
d94 1
a94 11
		return(vpid);
	}

	if ((cm = vp->ColorMap) && (cm->Type) && (vpe = cm->cm_vpe) && (vpe->DisplayClip.MaxX))
	{
//		vpwidth = MIN(vpwidth, (vpe->DisplayClip.MaxX + 1));
		if (gfx_GetDisplayInfoData(handle, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, vpid))
		{
			vpwidth = (dims->Nominal.MaxX + 1);
			vpheight = (dims->Nominal.MaxY + 1);
		}
a95 64
	D(kprintf("vpwidth = 0x%lx vpheight = 0x%lx\n", vpwidth, vpheight);)

	/* OK - we can mix. Find the best coerced mode */
	if (gfx_GetDisplayInfoData(handle, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, vpid))
	{
		struct DisplayInfo *cdi = (struct DisplayInfo *)&vpminfo;
		ULONG nextid = INVALID_ID;
		/* musthave is a mask of properties that a coerced mode must have */
		ULONG musthave = (dinfo.PropertyFlags & MUST_FLAGS);
		ULONG mustnothave;

		/* We're going to look at the View, so make sure it isn't changed
		 * from under our feet.
		 */
		ObtainSemaphore(GBASE->ActiViewCprSemaphore);

		mustnothave = ((MUST_FLAGS & ~(musthave)) | ((Flags & AVOID_FLICKER) ? DIPF_IS_LACE : 0));
		D(kprintf("musthave = 0x%lx, mustnothave = 0x%lx\n", musthave, mustnothave);)

		if (((Flags & PRESERVE_COLORS) || (dinfo.PropertyFlags & (DIPF_IS_HAM | DIPF_IS_EXTRAHALFBRITE)))
		    && (bestdepth))	/* bestdepth == 0 if vp->rasinfo->bitmap link is incomplete */
		{
			bestdepth = vp->RasInfo->BitMap->Depth;
		}

		/* loop through all known modes, looking for a mode of the
		 * MonitorID.
		 */
		while ((nextid = gfx_NextDisplayInfo(nextid)) != INVALID_ID)
		{
			if ((nextid & MONITOR_ID_MASK) == mntr)
			{
				DisplayInfoHandle handle = gfx_FindDisplayInfo(nextid);
				D(kprintf("nextid = 0x%lx\n", nextid);)
				if (gfx_GetDisplayInfoData(handle, (APTR)cdi, sizeof(struct DisplayInfo), DTAG_DISP, nextid) &&
				    ((cdi->PropertyFlags & musthave) == musthave) &&
				    ((cdi->PropertyFlags & mustnothave) == 0) &&
		    		    ((cdi->NotAvailable & (DI_AVAIL_NOCHIPS | DI_AVAIL_NOMONITOR)) == 0) &&
				    (gfx_GetDisplayInfoData(handle, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, nextid)))
				{
					/* we have a possible candidate.
					 * do the checks to increase best match.
					 *
					 * I believe it is more important to preserve the depth
					 * than the width of the coerced mode, so depth takes
					 * priority in any comparisons.
					 */
	
					WORD nomw = (dims->Nominal.MaxX + 1);
					WORD nomh = (dims->Nominal.MaxY + 1);
					D(kprintf("nomw = 0x%lx, nomh = 0x%lx, maxh = 0x%lx\n", nomw, nomh);)
					D(kprintf("havewidth = %s, haveheight = %s\n", (havewidth ? "TRUE" : "FALSE"), (haveheight ? "TRUE" : "FALSE"));)

					if ((dims->MaxDepth >= bestdepth) &&
					    ((bestheight == 0) || 
					     (((!(haveheight)) && (nomh > bestheight)) ||
					      ((!(havewidth)) && (nomw > bestwidth)))))
					{
						D(kprintf(">>> best so far = 0x%lx\n", nextid);)
						bestdepth = MIN(dims->MaxDepth, bestdepth);
						bestid = nextid;
						bestwidth = nomw; bestheight = nomh;
						havewidth = (nomw >= vpwidth); haveheight= (nomh >= vpheight);
					}
d97 22
a118 6
				}
			}
		}
		ReleaseSemaphore(GBASE->ActiViewCprSemaphore);
	}
    }
d120 1
a120 2
    D(kprintf("bestid = 0x%lx\n", bestid);)
    return(bestid);
@


39.13
log
@Ignores the AVOID_FLICKER flag if the View is laced.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.12 92/03/03 10:25:42 spence Exp Locker: spence $
d213 1
a213 2
		mustnothave = ((MUST_FLAGS & ~(musthave)) |
		               (((!(GBASE->ActiView->Modes & LACE)) && (Flags & AVOID_FLICKER)) ? DIPF_IS_LACE : 0));
@


39.12
log
@autodoc changes
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.11 92/02/26 11:33:28 spence Exp Locker: spence $
d207 8
a214 1
		mustnothave = ((MUST_FLAGS & ~(musthave)) | ((Flags & AVOID_FLICKER) ? DIPF_IS_LACE : 0));
d266 1
@


39.11
log
@All GFX calls go through LVO
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.10 92/02/25 17:38:17 spence Exp Locker: spence $
d31 2
a32 2
*	To determine the best mode in the MonitorID to coerced RealViewPort to,
*	given the restrictions chosen set in Flags.
@


39.10
log
@removed enforcer hit in vp->rasinfo->bitmap->depth chain
BOOL ispal was FALSE if on a PAL machine and vp was default mode!!
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.9 92/01/03 16:03:20 spence Exp Locker: spence $
d15 1
d83 1
a83 1
    ULONG vpid = getvpmodeid(vp);
d86 1
a86 1
    DisplayInfoHandle handle = (DisplayInfoHandle)FindDisplayInfo(vpid);
d151 2
a152 2
    if (GetDisplayInfoData(handle, (APTR)&vpminfo, sizeof(struct MonitorInfo), DTAG_MNTR, vpid) &&
        GetDisplayInfoData(mhandle, (APTR)&tominfo, sizeof(struct MonitorInfo), DTAG_MNTR, MonitorID))
d191 1
a191 1
		if (GetDisplayInfoData(handle, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, vpid))
d200 1
a200 1
	if (GetDisplayInfoData(handle, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, vpid))
d219 1
a219 1
		while ((nextid = NextDisplayInfo(nextid)) != INVALID_ID)
d223 1
a223 1
				DisplayInfoHandle handle = FindDisplayInfo(nextid);
d225 1
a225 1
				if (GetDisplayInfoData(handle, (APTR)cdi, sizeof(struct DisplayInfo), DTAG_DISP, nextid) &&
d229 1
a229 1
				    (GetDisplayInfoData(handle, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, nextid)))
@


39.9
log
@bestdepth is now the min of MaxDepth and the vp->ri->bm->depth (was
coercing to wrong mode in <4x).
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.8 91/12/31 14:28:42 spence Exp Locker: spence $
d108 1
a108 1
	ispal = FALSE;
d209 2
a210 1
		if ((Flags & PRESERVE_COLORS) || (dinfo.PropertyFlags & (DIPF_IS_HAM | DIPF_IS_EXTRAHALFBRITE)))
@


39.8
log
@Use cdi-> instead of dinfo. when checking mode availability.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.7 91/12/20 15:47:48 spence Exp Locker: spence $
d100 5
d248 1
a248 1
						bestdepth = dims->MaxDepth;
@


39.7
log
@Promotion dependant on original modeid, not machine type.
Better logic for determining coerced mode, and monitor availability.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.6 91/11/25 15:55:10 spence Exp Locker: spence $
d221 1
a221 1
		    		    ((dinfo.NotAvailable & (DI_AVAIL_NOCHIPS | DI_AVAIL_NOMONITOR)) == 0) &&
@


39.6
log
@Was using MaxX instead of MaxY for vpheight.
Better logic for checking monitor compatibility.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.5 91/11/21 10:27:06 spence Exp Locker: spence $
d93 1
a93 1
    BOOL ispal = ((GBASE->DisplayFlags & PAL) ? TRUE : FALSE);
d101 1
a101 1
    if ((Flags & PROMOTE) && (mntr <= PAL_MONITOR_ID))
d103 6
a108 1
	/* Promoting an NTSC/PAL/default monitor */
d110 5
a114 2
	MonitorID = (ispal ? PALFIXED : NTSCFIXED);
	D(kprintf("Promoting to MonitorID of 0x%lx\n", MonitorID);)
d116 5
a120 3
	/* check if the monitor is actually available */
	if ((GetDisplayInfoData(NULL, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, ((vpid & ~(MONITOR_ID_MASK)) | MonitorID))) &&
	    (dinfo.NotAvailable & (DI_AVAIL_NOCHIPS | DI_AVAIL_NOMONITOR)))
d122 1
a124 1
	mntr = MonitorID & MONITOR_ID_MASK;
d129 1
a129 1
            (mntr == (ispal ? PAL_MONITOR_ID : NTSC_MONITOR_ID)))
d132 1
d156 1
d162 1
d178 1
d184 1
a184 1
		vpwidth = MIN(vpwidth, (vpe->DisplayClip.MaxX + 1));
d187 1
a191 1
	D(kprintf("mix = 0x%lx\n", mix);)
d216 1
d218 1
a218 1
				if (GetDisplayInfoData(NULL, (APTR)cdi, sizeof(struct DisplayInfo), DTAG_DISP, nextid) &&
d221 2
a222 1
				    (GetDisplayInfoData(NULL, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, nextid)))
d232 9
a240 2
/*					if ((Flags == PRESERVE_COLORS) || (Flags == 0) || 
					    ((Flags & AVOID_FLICKER) && (!(cdi->PropertyFlags & DIPF_IS_LACE))))*/
d242 5
a246 22
						WORD nomw = (dims->Nominal.MaxX + 1);
						WORD maxw = (dims->MaxOScan.MaxX - dims->MaxOScan.MinX + 1);
						WORD nomh = (dims->Nominal.MaxY + 1);
						WORD maxh = (dims->MaxOScan.MaxY - dims->MaxOScan.MinY + 1);
						D(kprintf("nomw = 0x%lx, maxw = 0x%lx, nomh = 0x%lx, maxh = 0x%lx\n", nomw, maxw, nomh, maxh);)
						D(kprintf("havewidth = %s, haveheight = %s\n", (havewidth ? "TRUE" : "FALSE"), (haveheight ? "TRUE" : "FALSE"));)

						if ((dims->MaxDepth >= bestdepth) && 
						     (((nomw >= bestwidth) && ((!(havewidth)) || ((nomw <= vpwidth) && (maxw >= vpwidth))))))
						     
						{
							D(kprintf("checking the height\n");)
							if ((!(havewidth)) || 
							    (((nomh >= bestheight) && ((!(haveheight)) || ((nomh <= vpheight) && (maxh >= vpheight))))))
							{
								D(kprintf(">>> best so far = 0x%lx\n", nextid);)
								bestdepth = dims->MaxDepth;
								bestid = nextid;
								bestwidth = nomw; bestheight = nomh;
								havewidth = (nomw >= vpwidth); haveheight = (nomh >= vpheight);
							}
						}
d248 1
@


39.5
log
@Was trying to promote non NTSC/PAL modes.
Modified Autodocs.
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.4 91/11/15 18:57:19 spence Exp Locker: spence $
a125 6
    if ((vpid >> 16) == (MonitorID >> 16))
    {
	/* coercing to itself */
	return(vpid);
    }

d142 2
a143 2
	   ((vpcomp == MCOMPAT_SELF) && ((vpid & MONITOR_ID_MASK) != mntr)) || 
	   ((tocomp == MCOMPAT_SELF) && ((vpid & MONITOR_ID_MASK) != mntr)))
d161 7
d173 1
a173 1
			vpheight = (dims->Nominal.MaxX + 1);
@


39.4
log
@uses height of the ViewPort's Nominal overscan (from the db).

@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.3 91/11/15 11:48:29 spence Exp Locker: spence $
d51 3
a53 3
*	For Promotion to "flicker-fixed" modes, the Monitor parameter is
*	ignored. Promotion is valid for NTSC and PAL monitors only. The
*	PROMOTION option is mutually exclusive to the other options.
d55 3
d100 2
a101 1
    if (Flags & PROMOTE)
d103 2
d106 1
d112 1
a112 1
		return(INVALID_ID);
d114 1
d118 2
a119 5
	/* check for simple cases -
	 * coercing to self, or coercing DEFAULT monitor to PAL/NTSC default.
	 */

	if ((vpid >> 16) == (MonitorID >> 16))
d121 2
a122 1
		return(vpid);
d124 1
d126 4
a129 5
	if (((vpid >> 16) == 0) && 
            ((MonitorID >> 16) == (ispal ? 2 : 1)))
	{
		return(vpid | (MonitorID & MONITOR_ID_MASK));
	}
a130 1
    mntr = MonitorID & MONITOR_ID_MASK;
d163 1
d175 2
a176 3
    }
    D(kprintf("vpwidth = 0x%lx vpheight = 0x%lx\n", vpwidth, vpheight);)
    D(kprintf("mix = 0x%lx\n", mix);)
a177 2
    if (mix)
    {
d233 1
a233 1
								D(kprintf("best so far = 0x%lx\n", nextid);)
@


39.3
log
@Autodoc correction
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.2 91/11/15 10:51:11 spence Exp Locker: spence $
d84 1
d164 4
a167 1
		vpheight = MIN(vpheight, (vpe->DisplayClip.MaxY + 1));
a177 1
		struct DimensionInfo *dims = (struct DimensionInfo *)&tominfo;	/* reuse */
@


39.2
log
@Respect the vertical size too.

@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.1 91/11/12 20:34:42 spence Exp Locker: spence $
d18 1
a18 1
/****** graphics.library/CoerceMode********************************************
@


39.1
log
@PROMOTE sets the monitorID number, then algorithmically finds best mathch.
Also checks flags that are NOT wanted as well as those that are wanted.
Better sniffing of best match (at least, horizontally).
@
text
@d3 1
a3 1
*	$Id: coerce.c,v 39.0 91/11/12 12:22:32 spence Exp Locker: spence $
d88 1
a88 1
    BOOL havewidth = FALSE;
d90 1
a90 1
    WORD vpwidth = vp->DWidth;
d92 1
a92 1
    UWORD bestwidth = 0;
d94 1
a94 1
    D(kprintf("Flags = 0x%lx, vpid = 0x%lx, MonitorID = 0x%lx vpwidth = 0x%lx\n", Flags, vpid, MonitorID, vpwidth);)
d162 2
a163 1
		vpwidth = MIN(vpwidth, vpe->DisplayClip.MaxX);
d166 2
a168 1
    D(kprintf("mix = 0x%lx\n", mix);)
d209 2
a210 2
					if ((Flags == PRESERVE_COLORS) || (Flags == 0) || 
					    ((Flags & AVOID_FLICKER) && (!(cdi->PropertyFlags & DIPF_IS_LACE))))
d214 4
a217 1
						D(kprintf("nomw = 0x%lx, maxw = 0x%lx\n", nomw, maxw);)
d220 1
a220 1
						     (((nomw > bestwidth) && ((!(havewidth)) || (nomw <= vpwidth) && (maxw <= vpwidth)))))
d223 10
a232 4
							bestdepth = dims->MaxDepth;
							bestwidth = nomw;
							bestid = nextid;
							havewidth = (nomw >= vpwidth);
@


39.0
log
@Initial login
@
text
@d3 1
a3 1
*	$Id: Exp $
d14 1
d65 7
d83 3
a85 2
    struct DisplayInfoRecord *mhandle;
    ULONG mntr = MonitorID & MONITOR_ID_MASK;
d89 2
d94 14
a107 1
    if (mhandle = find_key((struct DisplayInfoRecord *)(SubRecord((struct DisplayInfoRecord *)GBASE->DisplayInfoDataBase)), (mntr >> 16), (UWORD)~0))
d109 14
a122 1
	mhandle = SubRecord(mhandle);
d124 1
d126 4
a129 3
    if (Flags & PRESERVE_COLORS)
    {
	bestdepth = vp->RasInfo->BitMap->Depth;
d132 1
a132 1
    /* first, check monitor compatibility */
d140 1
d153 14
d170 10
d181 1
a181 3
	if (Flags & PROMOTE)
	{
		if ((vpid & MONITOR_ID_MASK) != DEFAULT_MONITOR_ID)
d183 1
a183 1
			vpid = (vpid + TOPROMOTE);
d185 5
a189 6
		else
		{
			vpid = (vpid | ((GBASE->DisplayFlags & PAL) ? PALFIXED : NTSCFIXED));
		}
		if ((GetDisplayInfoData(NULL, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, bestid)) &&
		    ((dinfo.NotAvailable & (DI_AVAIL_NOCHIPS | DI_AVAIL_NOMONITOR)) == 0))
d191 1
a191 18
			bestid = vpid;
		}
	}
	else
	{
		if (GetDisplayInfoData(handle, (APTR)&dinfo, sizeof(struct DisplayInfo), DTAG_DISP, vpid))
		{
			struct DimensionInfo *dims = (struct DimensionInfo *)&tominfo;	/* reuse */
			struct DisplayInfo *cdi = (struct DisplayInfo *)&vpminfo;
			ULONG nextid = INVALID_ID;
			/* musthave is a mask of properties that a coerced mode must have */
			ULONG musthave = (dinfo.PropertyFlags & MUST_FLAGS);
			musthave |= ((Flags & AVOID_FLICKER) ? 0 : (dinfo.PropertyFlags & DIPF_IS_LACE));

			/* loop through all known modes, looking for a mode of the
			 * MonitorID.
			 */
			while ((nextid = NextDisplayInfo(nextid)) != INVALID_ID)
d193 5
a197 1
				if ((nextid & MONITOR_ID_MASK) == mntr)
d199 10
a208 3
					if (GetDisplayInfoData(NULL, (APTR)cdi, sizeof(struct DisplayInfo), DTAG_DISP, nextid) &&
					    ((cdi->PropertyFlags & musthave) == musthave) &&
					    (GetDisplayInfoData(NULL, (APTR)dims, sizeof(struct DimensionInfo), DTAG_DIMS, nextid)))
d210 7
a216 10
						/* we have a possible candidate.
						 * do the checks to increase best match.
						 *
						 * I believe it is more important to preserve the depth
						 * than the width of the coerced mode, so depth takes
						 * priority in any comparisons.
						 */
	
						if ((Flags == PRESERVE_COLORS) || (Flags == 0) || 
						    ((Flags & AVOID_FLICKER) && (!(cdi->PropertyFlags & DIPF_IS_LACE))))
d218 4
a221 8
							if ((dims->MaxDepth > bestdepth) ||
							    ((dims->MaxDepth == bestdepth) && (!(havewidth)) && (dims->Nominal.MaxX >= bestwidth)))
							{
								bestdepth = dims->MaxDepth;
								bestwidth = dims->Nominal.MaxX;
								bestid = nextid;
								havewidth = (dims->Nominal.MaxX == vp->DWidth) ? TRUE : FALSE;
							}
d230 1
@
