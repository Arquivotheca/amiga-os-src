head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0;
locks    ; strict;
comment  @ * @;


39.0
date     91.08.21.17.21.25;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.20.11.19.33;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.13.00.09;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.20.31;  author spence;  state Exp;
branches ;
next     36.8;

36.8
date     90.07.27.16.59.26;  author bart;  state Exp;
branches ;
next     36.7;

36.7
date     90.03.28.09.12.21;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     89.08.22.15.59.52;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     89.03.30.13.46.24;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.03.29.17.26.38;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.03.28.18.15.03;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     88.10.12.17.42.44;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.03.10.16.12.07;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@/******************************************************************************
*
*	$Id: regions.c,v 37.2 91/05/20 11:19:33 chrisg Exp Locker: chrisg $
*
******************************************************************************/

#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/lists.h>
#include <exec/memory.h>

#include <graphics/gfx.h>
#include "/macros.h"
#include "c.protos"

/*#define DEBUG*/
/*#define XORDEBUG*/
/*#define DEBUGAND*/

#include <graphics/regions.h>
#define OPERATION_OR    0
#define OPERATION_AND	1

#ifdef OLDRECTSPLIT

#define OPERATION_XOR	2
#define OPERATION_CLEAR	3

#endif

#define AN_REGIONMEMORY	0x8201000B

#define DOWNREGIONS

#ifndef DOWNREGIONS

obscured(r1,r2)
struct Rectangle *r1,*r2;
{
#ifdef DEBUG
    printf("obscured(%lx,%lx)\n",r1,r2);
#endif
    if ( (r1->MinX <= r2->MinX) &&
     (r1->MaxX >= r2->MaxX) &&
     (r1->MinY <= r2->MinY) &&
     (r1->MaxY >= r2->MaxY) )    return(TRUE);
    else                            return(FALSE);
}


freerr(rr)
struct RegionRectangle *rr;
{
#ifdef DEBUG
    printf("freerr(%lx)\n",rr);
#endif
	FreeMem(rr,sizeof(struct RegionRectangle));
}

struct RegionRectangle *newrect()
{
	return( (struct RegionRectangle *)
					AllocMem(sizeof(struct RegionRectangle),MEMF_CLEAR));
}

struct Region *NewRegion()
{
	return(
    	(struct Region *)AllocMem(sizeof(struct Region),MEMF_CLEAR));
}

#ifdef OLDRECTSPLIT
rectsplit(rgn,r1,r2,op)
struct Region *rgn;
struct Rectangle r1,*r2;
{
    /* split r1 in pieces that do not overlap r2 */
#ifdef DEBUG
    printf("rectsplit(%lx[%x,%x,%x,%x][%x,%x,%x,%x] op:%lx \n",rgn,r1,r2,op);
#endif
    if (rectXrect(&r1,r2))
    {
#ifdef DEBUG
    printf(" they cross over\n");
#endif
		if (r1.MinX < r2->MinX)
		{
		    struct Rectangle temp;
		    temp = r1;
		    temp.MaxX = r2->MinX - 1;
		    rectsplit(rgn,temp,r2,op);
		    r1.MinX = r2->MinX;
		}
		if (r1.MaxX > r2->MaxX)
		{
		    struct Rectangle temp;
		    temp = r1;
		    temp.MinX = r2->MaxX + 1;
		    rectsplit(rgn,temp,r2,op);
		    r1.MaxX = r2->MaxX;
		}
		if (r1.MinY < r2->MinY)
		{
		    struct Rectangle temp;
		    temp = r1;
		    temp.MaxY = r2->MinY - 1;
		    rectsplit(rgn,temp,r2,op);
		    r1.MinY = r2->MinY;
		}
		if (r1.MaxY > r2->MaxY)
		{
		    struct Rectangle temp;
		    temp = r1;
		    temp.MinY = r2->MaxY + 1;
		    rectsplit(rgn,temp,r2,op);
		    r1.MaxY = r2->MaxY;
		}
		/* what is left is inside r2 */
#ifdef DEBUG
    printf("what is left is inside\n");
#endif
		/* for OR we do not want the overlap */
		if (op == OPERATION_OR) return;
		/* if (op == OPERATION_CLEAR)	return; */
		/* op == OPERATION_AND */
		goto appendit;
		/*
		{
			struct RegionRectangle *nr;
			nr = newrect();
			if (!nr)	Alert(AN_REGIONMEMORY);
			nr->bounds = r1;
			appendrr(rgn,nr);
			return;
		}
		*/
    }
    /* if we get here then r1 is outside of r2 */
	if (op == OPERATION_AND)	return;	/* don't want this if anding */
	/* for OPERATION_OR,OPERATION_CLEAR */
appendit:
    {
		struct RegionRectangle *nr;
		nr = newrect();
		if (!nr)	Alert(AN_REGIONMEMORY);
		nr->bounds = r1;
		appendrr(rgn,nr);
    }
}

#else

rectsplit(rgn,r1,r2,op)
struct Region *rgn;
struct Rectangle r1,*r2;
{
    struct RegionRectangle *nr = NULL; 
    int xrect = rectXrect( &r1, r2 );

    switch( op )
    {
	case( OPERATION_OR ):
	{
	    if( xrect )
	    {
		if( r2->MaxX < r1.MaxX ) 
		{
		    if(nr = newrect())
		    {
			nr->bounds = r1;
			nr->bounds.MinX = r2->MaxX+1;
			appendrr(rgn,nr);
			r1.MaxX = r2->MaxX;
		    }
		}
		if( r2->MinX > r1.MinX )
		{
		    if(nr = newrect())
		    {
			nr->bounds = r1;
			nr->bounds.MaxX = r2->MinX-1;
			appendrr(rgn,nr);
			r1.MinX = r2->MinX;
		    }
		}
		if( r2->MaxY < r1.MaxY ) 
		{
		    if(nr = newrect())
		    {
			nr->bounds = r1;
			nr->bounds.MinY = r2->MaxY+1;
			appendrr(rgn,nr);
			r1.MaxY = r2->MaxY;
		    }
		}
		if( r2->MinY > r1.MinY )
		{
		    if(nr = newrect())
		    {
			nr->bounds = r1;
			nr->bounds.MaxY = r2->MinY-1;
			appendrr(rgn,nr);
			r1.MinY = r2->MinY;
		    }
		}
	    }
	    else
	    {
		if(nr = newrect())
		{
		    nr->bounds = r1;
		    appendrr(rgn,nr);
		}
	    }
	}   break;
	case( OPERATION_AND ):
	{
	    if( xrect )
	    {
		if(nr = newrect())
		{
		    if( r2->MaxX < r1.MaxX ) r1.MaxX = r2->MaxX;
		    if( r2->MinX > r1.MinX ) r1.MinX = r2->MinX;
		    if( r2->MaxY < r1.MaxY ) r1.MaxY = r2->MaxY;
		    if( r2->MinY > r1.MinY ) r1.MinY = r2->MinY;
		    nr->bounds = r1;
		    appendrr(rgn,nr);
		}
	    }
	}   break;
    }
}

#endif

#endif !DOWNREGIONS


#ifndef DOWNREGIONS

/*
OffsetRectangle(r,x,y)
struct Rectangle *r;
short x,y;
{
	r->MinX += x;
	r->MinY += y;
	r->MaxX += x;
	r->MaxY += y;
}
*/

OffsetRegionRectangle(r,x,y)
struct RegionRectangle *r;
{
    r->bounds.MinX -= x;
    r->bounds.MaxX -= x;
    r->bounds.MinY -= y;
    r->bounds.MaxY -= y;
    /*OffsetRectangle(&r->bounds,-x,-y);*/
}

adjustregionrectangles(rgn,x,y)
struct Region *rgn;
{
    struct RegionRectangle *r;
    for (r = rgn->RegionRectangle; r ; r = r->Next) OffsetRegionRectangle(r,x,y);
}

#endif !DOWNREGIONS

#ifndef DOWNREGIONS

adjustregion(newrgn,rgn,rect)
struct Region *newrgn,*rgn;
struct Rectangle *rect;
{
    /* first calculate new bounds */
    if (rgn->RegionRectangle == 0)   newrgn->bounds = *rect;
    else
    {
	newrgn->bounds.MinX = SHORTMIN(rgn->bounds.MinX,rect->MinX);
	newrgn->bounds.MinY = SHORTMIN(rgn->bounds.MinY,rect->MinY);
	newrgn->bounds.MaxX = SHORTMAX(rgn->bounds.MaxX,rect->MaxX);
	newrgn->bounds.MaxY = SHORTMAX(rgn->bounds.MaxY,rect->MaxY);
		    
	/* do I need to readjust all Rectangle currently there? */
	if ( (newrgn->bounds.MinX != rgn->bounds.MinX) ||
	     (newrgn->bounds.MinY != rgn->bounds.MinY) )
	{
	    adjustregionrectangles(rgn,newrgn->bounds.MinX-rgn->bounds.MinX,
				       newrgn->bounds.MinY-rgn->bounds.MinY);
	}
    }
    newrgn->RegionRectangle = 0;
    rgn->bounds = newrgn->bounds;
}

appendrr(rgn,r)
struct Region *rgn;
struct RegionRectangle *r;
{
    struct RegionRectangle *p,*q;
#ifdef DEBUG
    printf("prependrr(%lx,%lx)\n",rgn,r);
#endif
    q = &rgn->RegionRectangle;
    while (p = q->Next) q = p;
    q->Next = r;
    r->Next = 0;
    r->Prev = q;
}

prependrr(rgn,r)
struct Region *rgn;
struct RegionRectangle *r;
{
    struct RegionRectangle *p,*q;
#ifdef DEBUG
    printf("prependrr(%lx,%lx)\n",rgn,r);
#endif
    q = r->Prev = &rgn->RegionRectangle;
    if(p = r->Next = q->Next)
    {
	p->Prev = r;
    }
    q->Next = r;
}

removerr(rgn,r)
struct Region *rgn;
struct RegionRectangle *r;
{
#ifdef DEBUG
    printf("removerr(%lx,%lx)\n",rgn,r);
#endif
    if (r->Next) r->Next->Prev = r->Prev;
    if (r->Prev == &rgn->RegionRectangle)
    {
	rgn->RegionRectangle = r->Next;
    }
    else
    {
	r->Prev->Next = r->Next;
    }
}

orrectregion(rgn,rect)
struct Region *rgn;
struct Rectangle *rect;
{
    struct RegionRectangle *r,*r1,*r2;
    struct Region newrgn;
    
#ifdef DEBUG
	printf("OrRectRegion(%lx,%d,%d,%d,%d)",rgn,*rect);
#endif
	/* first calculate new bounds */
	adjustregion(&newrgn,rgn,rect);
    /* now everyone is in the same coordinate system */
    if (r = newrect())
    {
	    prependrr(&newrgn,r);
    	r->bounds = *rect;  /* copy rectangle into real storage */
    	OffsetRegionRectangle(r,rgn->bounds.MinX,rgn->bounds.MinY);
    	/* for r = all cliprects in current region */
    	for (r = rgn->RegionRectangle; r ; r = r->Next)
    	{
	    /* for r1 = all cliprects in tmp region list */
	    for (r1 = newrgn.RegionRectangle ; r1 ; r1 = r2)
	    {
		r2 = r1->Next;
#ifdef DEBUG
		printf("checking r=%lx r1=%lx r2=%lx\n",r,r1,r2);
#endif
		if (rectXrect(&r->bounds,&r1->bounds))
		{
		    if (!obscured(&r->bounds,&r1->bounds) )
		    {   /* need to cut it up into parts */
			rectsplit(&newrgn,r1->bounds,&r->bounds,OPERATION_OR);
			if (r2 == 0)	r2 = r1->Next;
		    }
		    removerr(&newrgn,r1);
		    freerr(r1);
#ifdef DEBUG
		    printf("nr.rr=%lx\n",newrgn.RegionRectangle);
#endif
		}
	    }
    	}
#ifdef DEBUG
	printf("anything left? %lx\n",newrgn.RegionRectangle);
#endif
    	/* add whatever is left to list */
    	for (r = newrgn.RegionRectangle ; r ; r = r1 )
    	{
	    r1 = r->Next;
	    prependrr(rgn,r);
    	}
#ifdef DEBUG
	printf("orrectregion returning\n");
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
	return (TRUE);
    }
    return (FALSE);
}

andrectregion(rgn,rect)
struct Region *rgn;
struct Rectangle *rect;
{
    struct RegionRectangle *r,*r1;
    struct Region newrgn;
	struct RegionRectangle rr_tmp;
    
#ifdef DEBUGAND
	printf("AndRectRegion(%lx,%d,%d,%d,%d)",rgn,*rect);
#ifdef DEBUGDEBUG
	Debug();
#endif
#endif
	/* first calculate new bounds */
	newrgn.RegionRectangle = 0;
    if (rgn->RegionRectangle == 0)	return;		/* null region */
    else
    {
		/* intersect(&rgn->bounds,&rect,&newrgn.bounds); */ 
		/* bart found this here bug ... */
		intersect(&rgn->bounds,rect,&newrgn.bounds);
		    
		/* do I need to readjust all Rectangle currently there? */
		if ( (newrgn.bounds.MinX != rgn->bounds.MinX) ||
		     (newrgn.bounds.MinY != rgn->bounds.MinY) )
		{
		    adjustregionrectangles(rgn,newrgn.bounds.MinX-rgn->bounds.MinX,
					     newrgn.bounds.MinY-rgn->bounds.MinY);
		}
		rgn->bounds = newrgn.bounds;
    }
    /* now everyone is in the same coordinate system */
	r = &rr_tmp;
	r->bounds = *rect;
    OffsetRegionRectangle(r,rgn->bounds.MinX,rgn->bounds.MinY);

    /* for r = all cliprects in current region */
    for (r = rgn->RegionRectangle; r ; r = r1)
    {
	r1 = r->Next;
	if (rectXrect(&rr_tmp.bounds,&r->bounds))
	{
	    if (!obscured(&r->bounds,&rr_tmp.bounds) )
	    {   /* need to cut it up into parts */
		if (obscured(&rr_tmp.bounds,&r->bounds))
		{
		    removerr(rgn,r);
		    prependrr(&newrgn,r);
		}
		else 
		{
		    rectsplit(&newrgn,rr_tmp.bounds,&r->bounds,OPERATION_AND);
		}
	    }
	    else
	    {
		/* accept completely as the NewRegion this new rect */
		r = newrgn.RegionRectangle = newrect();
		if (!r)	Alert(AN_REGIONMEMORY);
		r->bounds = rr_tmp.bounds;
		break;
	    }
	}
    }
    /* AND is now in NewRegion */
    /* we now clean out the old list */
    replaceregion(&newrgn,rgn);
    /* now must adjust to minimums again */
#ifdef DEBUGAND
    printf("return from andrectregion\n");
#ifdef DEBUGDEBUG
    Debug();
#endif
#endif
}

#endif !DOWNREGIONS

#ifndef DOWNREGIONS

replaceregion(from,to)
struct Region *from,*to;
{
	clearregion(to);
	*to = *from;
	/* now patch up backwards pointer */
	if (to->RegionRectangle)
		to->RegionRectangle->Prev = &to->RegionRectangle;
	from->RegionRectangle = 0;
	SettleDown(to);
}

#ifdef QWE
SettleDown(rgn)
struct Region *rgn;
{
	/*  check all offsets, make sure they are at minimum */
	short x,y;
	short xmax,ymax;
	struct RegionRectangle *r;

	y = x = 15000;
	xmax = ymax = -1;
	for (r = rgn->RegionRectangle; r ; r = r->Next)
	{
		x = SHORTMIN(x,r->bounds.MinX);
		y = SHORTMIN(y,r->bounds.MinY);
		xmax = SHORTMAX(xmax,r->bounds.MaxX);
		ymax = SHORTMAX(ymax,r->bounds.MaxY);
	}
	/* we now have minimum, reoffset all */
	adjustregionrectangles(rgn,x,y);
	rgn->bounds.MinX = x;
	rgn->bounds.MaxX = xmax;
	rgn->bounds.MinY = y;
	rgn->bounds.MaxY = ymax;
}
#else
SettleDown(rgn)
struct Region *rgn;
{
    /*  check all offsets, make sure they are at minimum */
    register short x,y;
    struct RegionRectangle *r;

    y = x = 15000;
    for (r = rgn->RegionRectangle; r ; r = r->Next)
    {
        x = SHORTMIN(x,r->bounds.MinX);
        y = SHORTMIN(y,r->bounds.MinY);
    }
    /* we now have minimum, reoffset all */
    adjustregionrectangles(rgn,x,y);
	/*OffsetRectangle(&rgn->bounds,x,y);*/
    rgn->bounds.MinX += x;
    rgn->bounds.MaxX += x;
    rgn->bounds.MinY += y;
    rgn->bounds.MaxY += y;
}
#endif

clearregion(rgn)
struct Region *rgn;
{
    struct RegionRectangle *r,*r1;
    rgn->bounds.MinX = 0;
    rgn->bounds.MinY = 0;
    rgn->bounds.MaxX = 0;
    rgn->bounds.MaxY = 0;
    for (r = rgn->RegionRectangle; r ; r = r1)  
    {
		r1 = r->Next;
		freerr(r);
    }
    rgn->RegionRectangle = 0;
}

#endif

#ifndef DOWNREGIONS

disposeregion(rgn)
struct Region *rgn;
{
    struct RegionRectangle *r,*r1;
#ifdef DEBUG
	printf("disposeregion(%lx)\n",rgn);
#endif
	clearregion(rgn);
    FreeMem(rgn,sizeof(struct Region));
}

xorrectregion(rgn,rect)
struct Region *rgn;
struct Rectangle *rect;
{
	/* handle simple case */
	if (rgn->RegionRectangle == 0) return(orrectregion(rgn,rect));
	else
	{
		struct Region outsideregion,insideregion;
		struct RegionRectangle *nrect,*r,*r1,*r2;

		adjustregion(&outsideregion,rgn,rect);
		insideregion = outsideregion;	/* make identical */
		nrect = newrect();
		if (!nrect)	Alert(AN_REGIONMEMORY);
		nrect->bounds = *rect;
		OffsetRegionRectangle(nrect,rgn->bounds.MinX,rgn->bounds.MinY);
		/* is rect in rgn coordinates */
		/* now construct outside list */
#ifdef XORDEBUG
		printf("start xor first loop\n");
#endif
		for (r = rgn->RegionRectangle; r ; r = r->Next)
		{
			/* or in everything outside of both */
			rectsplit(&outsideregion,r->bounds,&nrect->bounds,OPERATION_OR);
		}
		/* now have outsideregion with everything outside of rect */
		/* what is inside now */
#ifdef XORDEBUG
		printf("call prependrr\n");
#endif
		prependrr(&insideregion,nrect);	/* start with everything */
#ifdef DEBUG
		printf("enter second loop\n");
#endif
		for (r = rgn->RegionRectangle; r ; r = r->Next)
		{
			r1 = insideregion.RegionRectangle;
			insideregion.RegionRectangle = 0; /* start from scratch */
			for ( ; r1 ; r1 = r2)
			{
				/* or in everything outside of both */
				rectsplit(&insideregion,r1->bounds,&r->bounds,OPERATION_OR);
				r2 = r1->Next;
				freerr(r1);
			}
		}
		/* now have 2 disjoint regions inside and outside */
#ifdef XORDEBUG
		printf("combine inside and outside regions\n");
#endif
		while  ( r = insideregion.RegionRectangle )
		{
			removerr(&insideregion,r);
			prependrr(&outsideregion,r);
		}
#ifdef DEBUG
		printf("call replace region\n");
#endif
		replaceregion(&outsideregion,rgn);
	}
	return (TRUE);
}

#endif

#ifndef DOWNREGIONS

orregionregion(rgnsrc,rgndst)
struct Region *rgnsrc,*rgndst;
{
    struct RegionRectangle *rr;
    struct Rectangle rect;
    for (rr = rgnsrc->RegionRectangle; rr ; rr = rr->Next)
    {
        rect = rr->bounds;
        rect.MinX += rgnsrc->bounds.MinX;
        rect.MaxX += rgnsrc->bounds.MinX;
        rect.MinY += rgnsrc->bounds.MinY;
        rect.MaxY += rgnsrc->bounds.MinY;
        orrectregion(rgndst,&rect);
    }
    return (TRUE);
}

xorregionregion(rgnsrc,rgndst)
struct Region *rgnsrc,*rgndst;
{
    struct RegionRectangle *rr;
    struct Rectangle rect;
    for (rr = rgnsrc->RegionRectangle; rr ; rr = rr->Next)
    {
        rect = rr->bounds;
        rect.MinX += rgnsrc->bounds.MinX;
        rect.MaxX += rgnsrc->bounds.MinX;
        rect.MinY += rgnsrc->bounds.MinY;
        rect.MaxY += rgnsrc->bounds.MinY;
        xorrectregion(rgndst,&rect);
    }
    return (TRUE);
}

clearrectregion(rgn,rect)
struct Region *rgn;
struct Rectangle *rect;
{
	struct Region *rgntmp;
	if (rgntmp = NewRegion())
	{
		orregionregion(rgn,rgntmp);
		andrectregion(rgntmp,rect);
		xorregionregion(rgntmp,rgn);
		disposeregion(rgntmp);
		return (TRUE);
	}
	return (FALSE);
}

andregionregion(rgnsrc,rgndst)
struct Region *rgnsrc,*rgndst;
{
	struct Region *newrgn,*rgn;
	struct RegionRectangle *rr;
	struct Rectangle rect;
	int out_of_memory = TRUE;
#ifdef DEBUG
	printf("AndRegionRegion(%lx,%lx)\n",rgnsrc,rgndst);
	Debug();
#endif
	newrgn = NewRegion();	/* collect pieces in here */
	if (newrgn == 0)	return(FALSE);
	rgn = NewRegion();
	if (rgn == 0)	goto abortarr;
	for( rr = rgnsrc->RegionRectangle; rr ; rr = rr->Next )
	{
		if (!orregionregion(rgndst,rgn))	goto abortarr;
		rect = rr->bounds;
		rect.MinX += rgnsrc->bounds.MinX;
		rect.MaxX += rgnsrc->bounds.MinX;
		rect.MinY += rgnsrc->bounds.MinY;
		rect.MaxY += rgnsrc->bounds.MinY;
		andrectregion(rgn,&rect);
		if (!orregionregion(rgn,newrgn))	goto abortarr;	/* accumulate the ANDS */
		clearregion(rgn);
	}
	disposeregion(rgn);
	/*copyregion(newrgn,rgndst);*/
	replaceregion(newrgn,rgndst);
	disposeregion(newrgn);
#ifdef DEBUG
	printf("return from AndRegionRegion\n");
	Debug();
#endif
	return(TRUE);
abortarr:
	if (rgn)	disposeregion(rgn);
	if (newrgn)	disposeregion(newrgn);
	return(FALSE);
}

#endif

@


37.2
log
@Added prototypes, improved warnings, and glue code. still needs work.
@
text
@d3 1
a3 1
*	$Id: regions.c,v 1.1 91/05/20 10:43:03 chrisg Exp $
@


37.1
log
@ changed "../" to "/" for native build
@
text
@d3 1
a3 1
*	$Id: regions.c,v 37.0 91/01/07 15:20:31 spence Exp Locker: chrisg $
d14 1
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: regions.c,v 36.8 90/07/27 16:59:26 bart Exp Locker: spence $
d13 1
a13 1
#include "../macros.h"
@


36.8
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/c/RCS/regions.c,v 36.6 89/08/22 15:59:52 bart Exp Locker: bart $
@


36.6
log
@return error code from orrect in xorrect
@
text
@d3 1
a3 1
*	$Header: regions.c,v 36.5 89/03/30 13:46:24 bart Exp $
@


36.5
log
@downcode andrectregion... done with downcode of regions.c
@
text
@d3 1
a3 1
*	$Header: regions.c,v 36.4 89/03/29 17:26:38 bart Exp $
d588 1
a588 1
	if (rgn->RegionRectangle == 0) orrectregion(rgn,rect);
@


36.4
log
@downcoded xorrectregion and defined assembly entry points
@
text
@d3 1
a3 1
*	$Header: regions.c,v 36.3 89/03/28 18:15:03 bart Exp $
a409 2
#endif !DOWNREGIONS

d450 24
a473 20
		r1 = r->Next;
		if (rectXrect(&rr_tmp.bounds,&r->bounds))
			if (!obscured(&r->bounds,&rr_tmp.bounds) )
			{   /* need to cut it up into parts */
				if (obscured(&rr_tmp.bounds,&r->bounds))
				{
					removerr(rgn,r);
					prependrr(&newrgn,r);
				}
			    else rectsplit(&newrgn,rr_tmp.bounds,&r->bounds,OPERATION_AND);
			}
			else
			{
				/* accept completely as the NewRegion this new rect */
				r = newrgn.RegionRectangle = newrect();
				if (!r)	Alert(AN_REGIONMEMORY);
				r->bounds = rr_tmp.bounds;
				break;
			}

d475 4
a478 4
	/* AND is now in NewRegion */
	/* we now clean out the old list */
	replaceregion(&newrgn,rgn);
	/* now must adjust to minimums again */
d480 1
a480 1
	printf("return from andrectregion\n");
d482 1
a482 1
	Debug();
d486 2
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: regions.c,v 36.2 88/10/12 17:42:44 bart Exp $
a578 2
#endif

d644 1
@


36.2
log
@andrectregion -- call intersect with proper rect pointer...
@
text
@d3 1
a3 1
*	$Header: regions.c,v 36.1 88/03/10 16:12:07 dale Exp $
d20 2
a21 4
#define OPERATION_OR    1
#define OPERATION_AND	2
#define OPERATION_XOR	3
#define OPERATION_CLEAR	4
d23 7
d32 4
d49 1
d71 1
d74 1
a74 1
struct Rectangle r1,r2;
d80 1
a80 1
    if (rectXrect(&r1,&r2))
d85 1
a85 1
		if (r1.MinX < r2.MinX)
d89 1
a89 1
		    temp.MaxX = r2.MinX - 1;
d91 1
a91 1
		    r1.MinX = r2.MinX;
d93 1
a93 1
		if (r1.MaxX > r2.MaxX)
d97 1
a97 1
		    temp.MinX = r2.MaxX + 1;
d99 1
a99 1
		    r1.MaxX = r2.MaxX;
d101 1
a101 1
		if (r1.MinY < r2.MinY)
d105 1
a105 1
		    temp.MaxY = r2.MinY - 1;
d107 1
a107 1
		    r1.MinY = r2.MinY;
d109 1
a109 1
		if (r1.MaxY > r2.MaxY)
d113 1
a113 1
		    temp.MinY = r2.MaxY + 1;
d115 1
a115 1
		    r1.MaxY = r2.MaxY;
d123 1
a123 1
		if (op == OPERATION_CLEAR)	return;
d125 2
d135 1
d140 1
d150 90
d259 1
a259 1
	/*OffsetRectangle(&r->bounds,-x,-y);*/
d269 4
d277 1
a277 1
	/* first calculate new bounds */
d281 4
a284 4
		newrgn->bounds.MinX = SHORTMIN(rgn->bounds.MinX,rect->MinX);
		newrgn->bounds.MinY = SHORTMIN(rgn->bounds.MinY,rect->MinY);
		newrgn->bounds.MaxX = SHORTMAX(rgn->bounds.MaxX,rect->MaxX);
		newrgn->bounds.MaxY = SHORTMAX(rgn->bounds.MaxY,rect->MaxY);
d286 6
a291 7
		/* do I need to readjust all Rectangle currently there? */
		if ( (newrgn->bounds.MinX != rgn->bounds.MinX) ||
		     (newrgn->bounds.MinY != rgn->bounds.MinY) )
		{
		    adjustregionrectangles(rgn,newrgn->bounds.MinX-rgn->bounds.MinX,
					     newrgn->bounds.MinY-rgn->bounds.MinY);
		}
d293 3
a295 2
	newrgn->RegionRectangle = 0;
	rgn->bounds = newrgn->bounds;
d304 1
a304 1
    printf("appendrr(%lx,%lx)\n",rgn,r);
d313 16
d361 2
a362 2
	{
		appendrr(&newrgn,r);
d368 4
a371 4
			/* for r1 = all cliprects in tmp region list */
			for (r1 = newrgn.RegionRectangle ; r1 ; r1 = r2)
			{
		    	r2 = r1->Next;
d373 1
a373 1
				printf("checking r=%lx r1=%lx r2=%lx\n",r,r1,r2);
d375 9
a383 9
		    	if (rectXrect(&r->bounds,&r1->bounds))
		    	{
					if (!obscured(&r->bounds,&r1->bounds) )
					{   /* need to cut it up into parts */
			    		rectsplit(&newrgn,r1->bounds,r->bounds,OPERATION_OR);
						if (r2 == 0)	r2 = r1->Next;
					}
					removerr(&newrgn,r1);
					freerr(r1);
d385 1
a385 1
		printf("nr.rr=%lx\n",newrgn.RegionRectangle);
d387 2
a388 2
		    	}
			}
d391 1
a391 1
		printf("anything left? %lx\n",newrgn.RegionRectangle);
d396 2
a397 2
			r1 = r->Next;
			appendrr(rgn,r);
d400 1
a400 1
		printf("orrectregion returning\n");
d402 1
a402 1
		Debug();
d405 3
a407 3
		return (TRUE);
	}
	return (FALSE);
d410 2
d459 1
a459 1
					appendrr(&newrgn,r);
d461 1
a461 1
			    else rectsplit(&newrgn,rr_tmp.bounds,r->bounds,OPERATION_AND);
d485 2
d564 4
d579 1
d606 1
a606 1
			rectsplit(&outsideregion,r->bounds,nrect->bounds,OPERATION_OR);
d611 1
a611 1
		printf("call apendrr\n");
d613 1
a613 1
		appendrr(&insideregion,nrect);	/* start with everything */
d624 1
a624 1
				rectsplit(&insideregion,r1->bounds,r->bounds,OPERATION_OR);
d636 1
a636 1
			appendrr(&outsideregion,r);
d645 4
d665 1
d682 1
d740 3
@


36.1
log
@
@
text
@d3 1
a3 1
*	$Header: $
d304 3
a306 1
		intersect(&rgn->bounds,&rect,&newrgn.bounds);
@
