head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.2 rel39_76:39.2 rel39_71:39.2 rel39_65:39.2 rel39_64:39.2 rel39_61:39.2 rel39_60:39.2 rel39_55:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.2 rel39_35:39.2 rel39_34:39.2 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.2 V37_12:37.2 V37_11:37.2 V37_10:37.2 V37_9:37.2 V37_8:37.2 V37_7:37.2 V37_6:37.2 V37_5:37.2 V37_4:37.2 V37_3:37.2 V37_2:37.2 V37_1:37.2 V36_209:37.2 V36_208:37.2 V36_207:37.2 V36_205:37.2 V36_203:37.2 V36_202:37.2 V36_201:37.2 V36_200:37.1 V36_199:37.1 V36_198:37.1 V36_196:37.1 V36_195:37.1 V36_194:37.1 V36_193:37.1 V36_192:37.1 V36_191:37.1 V36_190:37.1 V36_189:37.1;
locks    ; strict;
comment  @*   @;


39.2
date     91.11.04.15.41.32;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.10.09.47.20;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.16.58;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     90.12.03.16.49.25;  author bart;  state Exp;
branches ;
next     37.1;

37.1
date     90.10.10.11.33.22;  author bart;  state Exp;
branches ;
next     37.0;

37.0
date     90.10.10.11.31.33;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@obsoleted file. cr sorting is now handled by layers.
@
text
@*******************************************************************************
*
*       $Id: downcrsort.asm,v 39.1 91/10/10 09:47:20 chrisg Exp Locker: chrisg $
*
*******************************************************************************



	Obsolete file! function now in layers!!
@


39.1
log
@  Fixed bad assembly code.
@
text
@d3 1
a3 1
*       $Id: downcrsort.asm,v 39.0 91/08/21 17:16:58 chrisg Exp Locker: chrisg $
a6 1
	section graphics
a7 6
	include	'exec/types.i'
	include	'exec/nodes.i'
	include	'exec/lists.i'
	include	'exec/ports.i'
	include	'graphics/gfx.i'
	include	'graphics/clip.i'
d9 1
a9 96
	xdef	_cr_sort

*	assure that  cr_Next == 0
	ifne	cr_Next
		fail
	endc

; void __asm cr_sort(register __a2 struct Layer *cw,register __d2 short dx, register __d3 short dy);
_cr_sort:

	movem.l	a3-a4,-(sp)	; save registers

	move.l	lr_ClipRect(a2),d0
	beq.s	1$

	clr.l	lr_ClipRect(a2)		; cliprect listhead

	move.l	d0,a3			; cr pointer
	clr.l	cr_prev(a3)

2$	move.l	(a3),d0
	beq.s	3$
	move.l	d0,a4
	move.l	a3,cr_prev(a4)
	move.l	a4,a3
	bra.s	2$

3$	move.l	a3,d0
	beq.s	1$
	move.l	cr_prev(a3),a4
	bsr	addsortcr
	move.l	a4,a3
	bra.s	3$

1$	movem.l	(sp)+,a3/a4
	rts


addsortcr:

	lea.l	lr_ClipRect(a2),a1	; pre = listhead

1$	move.l	(a1),d0		
	move.l	d0,a0
	beq.s	2$
	bsr	prior
	tst.l	d0
	bne.s	2$
	move.l	a0,a1			; pre = e
	bra.s	1$

2$	move.l	a0,(a3)			; cr->Next = e
	move.l	a3,(a1)			; pre->Next = cr
	rts

prior: 	moveq.l	#0,d0
	move.w	cr_MaxY(a0),d1
	cmp.w	cr_MinY(a3),d1
	blt.s	1$
	move.w	cr_MaxY(a3),d1
	cmp.w	cr_MinY(a0),d1
	blt.s	1$
	move.w	cr_MinX(a3),d1
	sub.w	cr_MinX(a0),d1
	muls.w	d2,d1
	blt.s	3$
	rts

1$ 	move.w	cr_MinY(a3),d1
	sub.w	cr_MinY(a0),d1
	muls.w	d3,d1
	bge.s	2$
3$	moveq.l	#-1,d0
2$	rts


*appendcr: 
*
*	clr.l	(a3)
*	move.l	lr_ClipRect(a2),d0	; *listhead == NULL?
*	beq.s	3$
*
*1$	move.l	d0,a0
*	move.l	(a0),d1
*	beq.s	2$			; while p->Next
*	move.l	d1,d0			; p = p->Next
*	bra.s	1$
*
*2$	move.l	a3,(a0)			; p->Next = cr
*	rts
*
*3$	move.l	a3,lr_ClipRect(a2)	; *listhead = cr
*	rts


	end
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*       $Id: downcrsort.asm,v 37.2 90/12/03 16:49:25 bart Exp Locker: chrisg $
d23 1
d26 1
a26 9
	movem.l	d2-d3/a2-a4,-(sp)	; save registers
	move.l	24(sp),a2		; layer
	move.w	30(sp),d2		; dx 
	move.w	34(sp),d3		; dy
	jsr	cr_sort			; call the routine
	movem.l	(sp)+,d2-d3/a2-a4	; restore registers
	rts

cr_sort:
d46 1
a46 1
	jsr	addsortcr
d50 2
a51 1
1$	rts
d61 1
a61 1
	jsr	prior
@


37.2
log
@fix one line high/wide cliprect prioritisation bug -- bart
@
text
@d3 1
a3 1
*       $Id: downcrsort.asm,v 37.1 90/10/10 11:33:22 bart Exp Locker: bart $
@


37.1
log
@used one less a register
@
text
@d3 1
a3 1
*       $Id: downcrsort.asm,v 37.0 90/10/10 11:31:33 bart Exp Locker: bart $
d80 1
a80 1
	ble.s	1$
d83 1
a83 1
	ble.s	1$
@


37.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*       $Id: $
d25 4
a28 4
	movem.l	d2-d3/a2-a5,-(sp)	; save registers
	move.l	28(sp),a2		; layer
	move.w	34(sp),d2		; dx 
	move.w	38(sp),d3		; dy
d30 1
a30 1
	movem.l	(sp)+,d2-d3/a2-a5	; restore registers
d40 2
a41 2
	move.l	d0,a4			; cr pointer
	clr.l	cr_prev(a4)
d43 1
a43 1
2$	move.l	(a4),d0
d45 3
a47 3
	move.l	d0,a5
	move.l	a4,cr_prev(a5)
	move.l	a5,a4
d50 1
a50 1
3$	move.l	a4,d0
d52 1
a52 1
	move.l	cr_prev(a4),a5
d54 1
a54 1
	move.l	a5,a4
d73 2
a74 2
2$	move.l	a0,(a4)			; cr->Next = e
	move.l	a4,(a1)			; pre->Next = cr
d79 1
a79 1
	cmp.w	cr_MinY(a4),d1
d81 1
a81 1
	move.w	cr_MaxY(a4),d1
d84 1
a84 1
	move.w	cr_MinX(a4),d1
d90 1
a90 1
1$ 	move.w	cr_MinY(a4),d1
d100 1
a100 1
*	clr.l	(a4)
d110 1
a110 1
*2$	move.l	a4,(a0)			; p->Next = cr
d113 1
a113 1
*3$	move.l	a4,lr_ClipRect(a2)	; *listhead = cr
@
