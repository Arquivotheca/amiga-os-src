head     39.8;
branch   ;
access   ;
symbols  rel39_24:39.8 rel39_18:39.8 rel39_97:39.7 rel39_90:39.7 rel39_89:39.7 rel39_82:39.7 rel39_76:39.7 rel39_71:39.7 rel39_65:39.5 rel39_64:39.5 rel39_61:39.5 rel39_60:39.5 rel39_55:39.4 rel39_52:39.4 rel39_47:39.4 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.2 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_18:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:33.4 V36_208:33.4 V36_207:33.4 V36_205:33.4 V36_203:33.4 V36_202:33.4 V36_201:33.4 V36_200:33.4 V36_199:33.4 V36_198:33.4 V36_196:33.4 V36_195:33.4 V36_194:33.4 V36_193:33.4 V36_192:33.4 V36_191:33.4 V36_190:33.4 V36_189:33.4 V36_188:33.4 V36_187:33.4 V36_186:33.4 V36_185:33.4 V36_184:33.4 V36_183:33.4 V36_182:33.4 V36_181:33.4 V36_180:33.4 V36_179:33.4 V36_161:33.3 V36_160:33.3 V36_158:33.3 V36_157:33.3 V36_153:33.3 V36_151:33.3 V36_147:33.3 V36_146:33.3 V36_144:33.3 V36_143:33.3 V36_142:33.3 V36_141:33.3 V36_139:33.3 V36_137:33.3 V36_136:33.3 V36_135:33.3 V36_133:33.3 V36_131:33.2 V36_130:33.2 V36_129:33.2 V36_128:33.2 V36_127:33.2 V36_126:33.2 V36_125:33.2 V36_123:33.2 V36_122:33.2 V36_121:33.2 V36_0:33.2 V36_118:33.2 V36_116:33.2 V36_115:33.2 V36_114:33.2 V36_112:33.2 V36_107:33.2 V36_106:33.2 V36_104:33.2 V36_103:33.2 V36_101:33.2 V36_100:33.2 V36_99:33.2 V36_95:33.2 V36_94:33.2 V36_92:33.2 V36_90:33.2 V36_89:33.2 V36_88:33.2 V36_83:33.2 V36_82:33.2 V36_79:33.2 V36_78:33.2 V36_77:33.2 V36_75:33.2 V36_74:33.2 V36_73:33.2 V36_72:33.2 V36_70:33.2 V36_69:33.2 V36_61:33.2 V36_60:33.2 V36_59:33.2 V36_57:33.1 V36_56:33.1 V36_55:33.1 V36_54:33.1 V36_52:33.1 V36_51:33.1 V36_50:33.1 V36_48:33.1 V36_47:33.1 V36_46:33.1 V36_45:33.1 V36_44:33.1 V36_43:33.1 V36_42:33.1 V36_41:33.1 V36_40:33.1 V36_37:33.1 V36_36:33.1 V36_35:33.1 V36_34:33.1 V36_33:33.1 V36_30:33.1 V36_29:33.1 V36_27:33.1;
locks    ; strict;
comment  @*   @;


39.8
date     93.02.11.08.23.16;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     92.07.01.11.01.37;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     92.06.19.14.57.08;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     92.05.19.13.08.30;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.37.11;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.19.15.53.58;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.21.13.38.42;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.11.16.50.24;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.11.31;  author chrisg;  state Exp;
branches ;
next     37.5;

37.5
date     91.05.13.14.48.12;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.07.17.05.32;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.03.15.32.04;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.03.15.29.03;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.02.13.52.51;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.14.44;  author spence;  state Exp;
branches ;
next     33.4;

33.4
date     90.07.27.16.30.07;  author bart;  state Exp;
branches ;
next     33.3;

33.3
date     90.03.28.09.37.07;  author bart;  state Exp;
branches ;
next     33.2;

33.2
date     89.05.02.09.30.13;  author bart;  state Exp;
branches ;
next     33.1;

33.1
date     88.06.23.18.39.52;  author dale;  state Exp;
branches ;
next     33.0;

33.0
date     86.05.17.14.58.13;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.8
log
@new SUPERBUMP, SUPERMOVE, etc. maros for makevp speedup.
@
text
@/******************************************************************************
*
*	Source Control
*	--------------
*	$Id: macros.h,v 39.7 92/07/01 11:01:37 chrisg Exp Locker: chrisg $
*
*	$Locker: chrisg $
*
*	$Log:	macros.h,v $
*   Revision 39.7  92/07/01  11:01:37  chrisg
*   CMOVER macro. generates better code.
*   
*   Revision 39.6  92/06/19  14:57:08  spence
*   ENFORCER macro
*   
*   Revision 39.5  92/05/19  13:08:30  chrisg
*   added pragma for TaggedOpenLibrary.
*   
*   Revision 39.4  92/03/24  15:37:11  chrisg
*   added LayersBase #define.
*   
*   Revision 39.3  92/02/19  15:53:58  chrisg
*   mods so that graphics can call exec via pragmas.
*   
*   Revision 39.2  92/01/21  13:38:42  chrisg
*    redefinition of includes for pragma calling.
*   
*   Revision 39.1  91/11/11  16:50:24  chrisg
*   defined macro PASSRECT tpo trick lattice into generating good code.
*   
*   Revision 39.0  91/08/21  17:11:31  chrisg
*   Bumped
*   
*   Revision 37.5  91/05/13  14:48:12  chrisg
*   added #define for SysBase.
*   
*   Revision 37.4  91/05/07  17:05:32  chrisg
*    added GBASE #define
*   
*   Revision 37.3  91/05/03  15:32:04  chrisg
*    added #define for GBASE. instead of doing:
*      register struct GfxBase *GB;
*      FETCHGBASE;
*      GB->blah=0;
*   
*    do  GBASE->blah=0;
*      this will generate CLR.L (A6)
*   
*   Revision 37.2  91/05/03  15:29:03  spence
*   *** empty log message ***
*   
*   Revision 37.1  91/05/02  13:52:51  chrisg
*    changed FETCHGBASE macro for lattice
*   
*   Revision 37.0  91/01/07  15:14:44  spence
*   initial switchover from V36
*   
*   Revision 33.4  90/07/27  16:30:07  bart
*   *** empty log message ***
*   
*   Revision 33.3  90/03/28  09:37:07  bart
*   *** empty log message ***
*   
*   Revision 33.2  89/05/02  09:30:13  bart
*   copyright 1989
*   
*   Revision 33.1  88/06/23  18:39:52  dale
*   cp
*   
*   Revision 33.0  86/05/17  14:58:13  bart
*   added to rcs for updating
*   
*
******************************************************************************/

#ifndef REG_A6
#include <dos.h>
#endif

#ifndef GRAPHICS_GFXBASE_H
#include "/gfxbase.h"
#endif

#define SHORTMIN(a,b)	(SHORT)(MIN((SHORT)(a),(SHORT)(b)))
#define SHORTMAX(a,b)	(SHORT)(MAX((SHORT)(a),(SHORT)(b)))

#define	MAX(a,b)	((a)>(b)?(a):(b))
#define	MIN(a,b)	((a)<(b)?(a):(b))
#define	ABS(x)	((x<0)?(-(x)):(x))

#define LOCKLAYER(l)	ObtainSemaphore(&(l)->Lock)
#define UNLOCKLAYER(l)	ReleaseSemaphore(&(l)->Lock)

#define CMOVE(c,a,b)    { (c)->OpCode = COPPER_MOVE;(c)->DESTADDR=(int)(&a);(c)->DESTDATA = b; }

#define REGNUM(field) (UWORD)(&(((struct Custom *)0)->field))

/* CMOVER generates better code and is more readable. it also doesn't generate f106 for bplcon3! */
#define CMOVER(c,a,b)    { (c)->OpCode = COPPER_MOVE;(c)->DESTADDR=REGNUM(a);(c)->DESTDATA = b; }
#define SUPERCMOVE(c,a,b) { *(c++)=COPPER_MOVE; *(c++)=REGNUM(a); *(c++)=b; }
#define SUPERBUMP(acl) ++((*acl)->Count)
#define SUPERWAIT(c,a,b) { *(c++)=COPPER_WAIT; *(c++)=a; *(c++)=b; }

/* CBUMPR generates good code when there is no possibility of overflow */
#define CBUMPR(acl) { ++c ; ++((*acl)->Count); }

#define CWAIT(c,a,b)    { (c)->OpCode=COPPER_WAIT;(c)->VWAITPOS = a;(c)->HWAITPOS = b; }
#define CEND(c)                 CWAIT(c,10000,255)
#define SUPERCEND(c)                 SUPERWAIT(c,10000,255)

/* acl is address of a CopList ptr */
#define CBUMP(acl)      c = cbump(acl,++c)

#define FETCHGBASE		GB = (struct GfxBase *) getreg(REG_A6)
#define GBASE ((struct GfxBase *) getreg(REG_A6))

#define SysBase (((struct GfxBase *)getreg(14))->ExecBase)
#define LayersBase (((struct GfxBase *)getreg(14))->gb_LayersBase)
#define UtilityBase (GBASE->UtilBase)

#define LOCKLAYERINFO(li)  ObtainSemaphore(&(li)->Lock)
#define UNLOCKLAYERINFO(li)  ReleaseSemaphore(&(li)->Lock)

/* pass a rectangle by value on the stack. avoid lattice inefficiency */
/* if lattice gets smarter, can do #define PASSRECT(x) x */
#define PASSRECT(x) *((ULONG *) &x),*(((ULONG *) &x)+1)


/* create an enforcer hit */
#define ENFORCER(x) ((*(UWORD *)2) = (x))

#include <pragmas/exec_pragmas.h>
#pragma libcall SysBase TaggedOpenLibrary 32a 001
@


39.7
log
@CMOVER macro. generates better code.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.6 92/06/19 14:57:08 spence Exp Locker: chrisg $
d10 3
d100 6
d109 1
@


39.6
log
@ENFORCER macro
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.5 92/05/19 13:08:30 chrisg Exp Locker: spence $
d7 1
a7 1
*	$Locker: spence $
d10 3
d92 5
@


39.5
log
@added pragma for TaggedOpenLibrary.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.4 92/03/24 15:37:11 chrisg Exp Locker: chrisg $
d7 1
a7 1
*	$Locker: chrisg $
d10 3
d109 4
@


39.4
log
@added LayersBase #define.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.3 92/02/19 15:53:58 chrisg Exp Locker: chrisg $
d10 3
d108 1
@


39.3
log
@mods so that graphics can call exec via pragmas.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.2 92/01/21 13:38:42 chrisg Exp Locker: chrisg $
d10 3
d94 1
@


39.2
log
@ redefinition of includes for pragma calling.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.1 91/11/11 16:50:24 chrisg Exp Locker: chrisg $
d10 3
d61 1
d63 1
d90 1
a90 1
#define SysBase (GBASE->ExecBase)
d100 1
@


39.1
log
@defined macro PASSRECT tpo trick lattice into generating good code.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 39.0 91/08/21 17:11:31 chrisg Exp Locker: chrisg $
d10 3
d59 5
d86 1
@


39.0
log
@Bumped
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.5 91/05/13 14:48:12 chrisg Exp Locker: chrisg $
d10 3
d82 3
@


37.5
log
@added #define for SysBase.
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.4 91/05/07 17:05:32 chrisg Exp Locker: chrisg $
d10 3
@


37.4
log
@ added GBASE #define
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.3 91/05/03 15:32:04 chrisg Exp Locker: chrisg $
d10 3
d70 3
@


37.3
log
@ added #define for GBASE. instead of doing:
   register struct GfxBase *GB;
   FETCHGBASE;
   GB->blah=0;

 do  GBASE->blah=0;
   this will generate CLR.L (A6)
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.2 91/05/03 15:29:03 spence Exp Locker: chrisg $
d10 9
d69 1
@


37.2
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.1 91/05/02 13:52:51 chrisg Exp Locker: spence $
d7 1
a7 1
*	$Locker: spence $
d10 3
d57 1
a57 1

@


37.1
log
@ changed FETCHGBASE macro for lattice
@
text
@d5 1
a5 1
*	$Id: macros.h,v 37.0 91/01/07 15:14:44 spence Exp Locker: chrisg $
d7 1
a7 1
*	$Locker: chrisg $
d10 3
d53 1
a53 1
#define FETCHGBASE		GB = getreg(REG_A6)
@


37.0
log
@initial switchover from V36
@
text
@d5 1
a5 1
*	$Id: macros.h,v 33.4 90/07/27 16:30:07 bart Exp Locker: spence $
d7 1
a7 1
*	$Locker: spence $
d10 3
d31 1
d50 1
a50 2
extern	struct GfxBase *getGfxBaseDefine;
#define FETCHGBASE		GB = getGfxBaseDefine
@


33.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Id: $
d7 1
a7 1
*	$Locker: bart $
d10 3
@


33.3
log
@*** empty log message ***
@
text
@d5 1
a5 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/RCS/macros.h,v 33.2 89/05/02 09:30:13 bart Exp Locker: bart $
d10 3
@


33.2
log
@copyright 1989
@
text
@d5 1
a5 1
*	$Header: macros.h,v 33.1 88/06/23 18:39:52 dale Exp $
d10 3
@


33.1
log
@cp
@
text
@d5 1
a5 1
*	$Header: macros.h,v 33.0 86/05/17 14:58:13 bart Exp $
d7 1
a7 1
*	$Locker: dale $
d10 3
@


33.0
log
@added to rcs for updating
@
text
@d5 1
a5 1
*	$Header: $
d7 1
a7 1
*	$Locker: $
d9 4
a12 1
*	$Log: $
d18 4
@
