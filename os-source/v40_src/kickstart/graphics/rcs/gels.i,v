head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_18:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.5 V36_208:36.5 V36_207:36.5 V36_205:36.5 V36_203:36.5 V36_202:36.5 V36_201:36.5 V36_200:36.5 V36_199:36.5 V36_198:36.5 V36_196:36.5 V36_195:36.4 V36_194:36.4 V36_193:36.4 V36_192:36.4 V36_191:36.4 V36_190:36.4 V36_189:36.4 V36_188:36.4 V36_187:36.4 V36_186:36.4 V36_185:36.4 V36_184:36.4 V36_183:36.4 V36_182:36.4 V36_181:36.4 V36_180:36.4 V36_179:36.4 V36_161:36.3 V36_160:36.3 V36_158:36.3 V36_157:36.3 V36_153:36.3 V36_151:36.3 V36_147:36.3 V36_146:36.3 V36_144:36.3 V36_143:36.2 V36_142:36.2 V36_141:36.2 V36_139:36.2 V36_137:36.2 V36_136:36.2 V36_135:36.2 V36_133:36.2 V36_131:36.1 V36_130:36.1 V36_129:36.1 V36_128:36.1 V36_127:36.1 V36_126:36.1 V36_125:36.1 V36_123:36.1 V36_122:36.1 V36_121:36.1 V36_0:36.1 V36_118:36.1 V36_116:36.1 V36_115:36.1 V36_114:36.1 V36_112:36.1 V36_107:36.1 V36_106:36.1 V36_104:36.1 V36_103:36.1 V36_101:36.1 V36_100:36.1 V36_99:36.1 V36_95:36.1 V36_94:36.1 V36_92:36.1 V36_90:36.1 V36_89:36.1 V36_88:36.1 V36_83:36.1 V36_82:36.1 V36_79:36.1 V36_78:36.1 V36_77:36.1 V36_75:36.1 V36_74:36.1 V36_73:36.1 V36_72:36.1 V36_70:36.1 V36_69:36.1 V36_61:36.1 V36_60:36.1 V36_59:36.1 V36_57:36.0 V36_56:36.0 V36_55:36.0 V36_54:36.0 V36_52:36.0 V36_51:36.0 V36_50:36.0 V36_48:36.0 V36_47:36.0 V36_46:36.0 V36_45:36.0 V36_44:36.0 V36_43:36.0 V36_42:36.0 V36_41:36.0 V36_40:36.0 V36_37:36.0 V36_36:36.0 V36_35:36.0 V36_34:36.0 V36_33:36.0 V36_30:36.0 V36_29:36.0 V36_27:36.0;
locks    ; strict;
comment  @*   @;


39.0
date     91.08.21.17.09.51;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.14.01;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.11.05.14.37.42;  author spence;  state Exp;
branches ;
next     36.4;

36.4
date     90.07.27.16.27.50;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.05.02.10.33.41;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.28.09.41.03;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.05.02.09.31.25;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     88.12.13.11.56.28;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@	IFND	GRAPHICS_GELS_I
GRAPHICS_GELS_I	SET	1
**
**	$Id: gels.i,v 37.0 91/01/07 15:14:01 spence Exp Locker: chrisg $
**
**	include file for AMIGA GELS (Graphics Elements) 
**
**	(C) Copyright 1985,1986,1987,1988,1989 Commodore-Amiga, Inc.
**	    All Rights Reserved
**

    IFND    EXEC_TYPES_I
    include 'exec/types.i'
    ENDC

*------ VS_vSflags ---------------------------------------------------

*   ;-- user-set vSprite flags --
SUSERFLAGS  EQU $00FF         ; mask of all user-settable vSprite-flags
    BITDEF  VS,VSPRITE,0      ; set if vSprite, clear if bob
    BITDEF  VS,SAVEBACK,1     ; set if background is to be saved/restored
    BITDEF  VS,OVERLAY,2      ; set to mask image of bob onto background
    BITDEF  VS,MUSTDRAW,3     ; set if vSprite absolutely must be drawn
*   ;-- system-set vSprite flags --
    BITDEF  VS,BACKSAVED,8    ; this bob's background has been saved
    BITDEF  VS,BOBUPDATE,9    ; temporary flag, useless to outside world
    BITDEF  VS,GELGONE,10     ; set if gel is completely clipped (offscreen)
    BITDEF  VS,VSOVERFLOW,11  ; vSprite overflow (if MUSTDRAW set we draw!)


*------ B_flags ------------------------------------------------------
*   ;-- these are the user flag bits --
BUSERFLAGS  EQU $00FF         ; mask of all user-settable bob-flags
    BITDEF  B,SAVEBOB,0       ; set to not erase bob
    BITDEF  B,BOBISCOMP,1     ; set to identify bob as animComp
*   ;-- these are the system flag bits --
    BITDEF  B,BWAITING,8      ; set while bob is waiting on 'after'
    BITDEF  B,BDRAWN,9        ; set when bob is drawn this DrawG pass
    BITDEF  B,BOBSAWAY,10     ; set to initiate removal of bob
    BITDEF  B,BOBNIX,11       ; set when bob is completely removed
    BITDEF  B,SAVEPRESERVE,12 ; for back-restore during double-buffer
    BITDEF  B,OUTSTEP,13      ; for double-clearing if double-buffer


*------ defines for the animation procedures -------------------------

ANFRACSIZE  EQU 6
ANIMHALF    EQU $0020
RINGTRIGGER EQU $0001

*------ macros --------------------------------------------------------
* these are GEL functions that are currently simple enough to exist as a
* definition.  It should not be assumed that this will always be the case

InitAnimate MACRO   * &animKey
       CLR.L   \1
       ENDM


RemBob      MACRO   * &b
       OR.W    #BF_BOBSAWAY,b_BobFlags+\1
       ENDM

*------ VS : vSprite -------------------------------------------------
 STRUCTURE  VS,0    ; vSprite
*   -- SYSTEM VARIABLES --
*   GEL linked list forward/backward pointers sorted by y,x value
    APTR    vs_NextVSprite    ; struct *vSprite
    APTR    vs_PrevVSprite    ; struct *vSprite
*   GEL draw list constructed in the order the bobs are actually drawn, then
*   list is copied to clear list
*   must be here in vSprite for system boundary detection
    APTR    vs_DrawPath       ; struct *vSprite: pointer of overlay drawing
    APTR    vs_ClearPath      ; struct *vSprite: pointer for overlay clearing
*   the vSprite positions are defined in (y,x) order to make sorting
*   sorting easier, since (y,x) as a long integer
    WORD    vs_Oldy           ; previous position
    WORD    vs_Oldx           ;
*   -- COMMON VARIABLES --
    WORD    vs_VSFlags        ; vSprite flags
*   -- USER VARIABLES --
*    the vSprite positions are defined in (y,x) order to make sorting
*    easier, since (y,x) as a long integer
    WORD    vs_Y              ; screen position
    WORD    vs_X
    WORD    vs_Height
    WORD    vs_Width          ; number of words per row of image data
    WORD    vs_Depth          ; number of planes of data
    WORD    vs_MeMask         ; which types can collide with this vSprite
    WORD    vs_HitMask        ; which types this vSprite can collide with
    APTR    vs_ImageData      ; *WORD pointer to vSprite image
*    borderLine is the one-dimensional logical OR of all
*    the vSprite bits, used for fast collision detection of edge
    APTR    vs_BorderLine     ; *WORD: logical OR of all vSprite bits
    APTR    vs_CollMask       ; *WORD: similar to above except this is a 
*    matrix pointer to this vSprite's color definitions (not used by bobs)
    APTR    vs_SprColors      ; *WORD
    APTR    vs_VSBob          ; struct *bob: points home if this vSprite is 
                              ;  part of a bob
*    planePick flag:  set bit selects a plane from image, clear bit selects
*         use of shadow mask for that plane
*    OnOff flag: if using shadow mask to fill plane, this bit (corresponding
*         to bit in planePick) describes whether to fill with 0's or 1's
*    There are two uses for these flags:
*              - if this is the vSprite of a bob, these flags describe how 
*                the bob is to be drawn into memory
*              - if this is a simple vSprite and the user intends on setting 
*                the MUSTDRAW flag of the vSprite, these flags must be set 
*                too to describe which color registers the user wants for 
*                the image
    BYTE    vs_PlanePick
    BYTE    vs_PlaneOnOff
    LABEL   vs_SUserExt       ; user definable
    LABEL   vs_SIZEOF


*------ BOB : bob ------------------------------------------------------

 STRUCTURE  BOB,0     ; bob: blitter object
*   -- COMMON VARIABLES --
    WORD    bob_BobFlags      ; general purpose flags (see definitions below)
*   -- USER VARIABLES --
    APTR    bob_SaveBuffer    ; *WORD pointer to the buffer for background 
*    save used by bobs for "cookie-cutting" and multi-plane masking
    APTR    bob_ImageShadow   ; *WORD
*    pointer to BOBs for sequenced drawing of bobs
*      for correct overlaying of multiple component animations
    APTR    bob_Before        ; struct *bob: draw this bob before bob pointed
                              ; to by before
    APTR    bob_After         ; struct *bob: draw this bob after bob pointed
                              ; to by after
    APTR    bob_BobVSprite    ; struct *vSprite: this bob's vSprite definition
    APTR    bob_BobComp       ; struct *animComp: pointer to this bob's 
                              ; animComp def
    APTR    bob_DBuffer       ; struct dBufPacket: pointer to this bob's 
                              ; dBuf packet
    LABEL   bob_BUserExt      ; bob user extension
    LABEL   bob_SIZEOF

*------ AC : animComp ------------------------------------------------

 STRUCTURE  AC,0    ; animComp
*   -- COMMON VARIABLES --
    WORD    ac_CompFlags      ; animComp flags for system & user
*    timer defines how long to keep this component active:
*      if set non-zero, timer decrements to zero then switches to nextSeq
*      if set to zero, animComp never switches
    WORD    ac_Timer
*   -- USER VARIABLES --
*    initial value for timer when the animComp is activated by the system
    WORD    ac_TimeSet
*    pointer to next and previous components of animation object
    APTR    ac_NextComp       ; struct *animComp
    APTR    ac_PrevComp       ; struct *animComp
*    pointer to component component definition of next image in sequence
    APTR    ac_NextSeq        ; struct *animComp
    APTR    ac_PrevSeq        ; struct *animComp
    APTR    ac_AnimCRoutine   ; address of special animation procedure
    WORD    ac_YTrans         ; initial y translation (if this is a component)
    WORD    ac_XTrans         ; initial x translation (if this is a component)
    APTR    ac_HeadOb         ; struct *animOb
    APTR    ac_AnimBob        ; struct *bob
    LABEL   ac_SIZE

*------ AO : animOb --------------------------------------------------

 STRUCTURE  AO,0    ; animOb
*   -- SYSTEM VARIABLES --
    APTR    ao_NextOb         ; struct *animOb
    APTR    ao_PrevOb         ; struct *animOb
*    number of calls to Animate this animOb has endured
    LONG    ao_Clock
    WORD    ao_AnOldY         ; old y,x coordinates
    WORD    ao_AnOldX         ;
*   -- COMMON VARIABLES --
    WORD    ao_AnY            ; y,x coordinates of the animOb
    WORD    ao_AnX            ;
*   -- USER VARIABLES --
    WORD    ao_YVel           ; velocities of this object
    WORD    ao_XVel           ;
    WORD    ao_XAccel         ; accelerations of this object
    WORD    ao_YAccel         ;   !!! backwards !!!
    WORD    ao_RingYTrans     ; ring translation values
    WORD    ao_RingXTrans     ;
    APTR    ao_AnimORoutine   ; address of special animation procedure
    APTR    ao_HeadComp       ; struct *animComp: pointer to first component
    LABEL   ao_AUserExt       ; animOb user extension
    LABEL   ao_SIZEOF


*------ DBP : dBufPacket ---------------------------------------------
* dBufPacket defines the values needed to be saved across buffer to buffer
*   when in double-buffer mode

 STRUCTURE  DBP,0             ; dBufPacket
    WORD    dbp_BufY          ; save the other buffers screen coordinates
    WORD    dbp_BufX          ;
    APTR    dbp_BufPath       ; struct *vSprite: carry the draw path over
                              ; the gap
*    these pointers must be filled in by the user
*    pointer to other buffer's background save buffer
    APTR    dbp_BufBuffer     ; *WORD
*    pointer to other buffer's background plane pointers
    APTR    dbp_BufPlanes     ; **WORD
    LABEL   dbp_SIZEOF

	ENDC	; GRAPHICS_GELS_I
@


37.0
log
@initial switchover from V36
@
text
@d4 1
a4 1
**	$Id: gels.i,v 36.5 90/11/05 14:37:42 spence Exp Locker: spence $
@


36.5
log
@includes exec/types.i
@
text
@d4 1
a4 1
**	$Id: gels.i,v 36.4 90/07/27 16:27:50 bart Exp Locker: spence $
@


36.4
log
@*** empty log message ***
@
text
@d4 1
a4 1
**	$Id: gels.i,v 36.3 90/05/02 10:33:41 kodiak Exp Locker: bart $
d11 4
@


36.3
log
@standardize include header
@
text
@d4 1
a4 1
**	$Id$
@


36.2
log
@*** empty log message ***
@
text
@d4 1
a4 4
**	$Filename: graphics/gels.i $
**	$Release: 1.3 $
**	$Revision: 36.1 $
**	$Date: 89/05/02 09:31:25 $
@


36.1
log
@copyright 1989
@
text
@d6 2
a7 2
**	$Revision: 36.0 $
**	$Date: 88/12/13 11:56:28 $
@


36.0
log
@added to rcs for updating
@
text
@d6 2
a7 2
**	$Revision$
**	$Date$
d11 1
a11 1
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
@
