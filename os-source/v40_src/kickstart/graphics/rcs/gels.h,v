head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_27:37.0 V37_25:37.0 V37_24:37.0 V37_23:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_18:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.6 V36_208:36.6 V36_207:36.6 V36_205:36.6 V36_203:36.6 V36_202:36.6 V36_201:36.6 V36_200:36.6 V36_199:36.6 V36_198:36.5 V36_196:36.4 V36_195:36.4 V36_194:36.4 V36_193:36.4 V36_192:36.4 V36_191:36.4 V36_190:36.4 V36_189:36.4 V36_188:36.4 V36_187:36.4 V36_186:36.4 V36_185:36.4 V36_184:36.4 V36_183:36.4 V36_182:36.4 V36_181:36.4 V36_180:36.4 V36_179:36.4 V36_161:36.3 V36_160:36.3 V36_158:36.3 V36_157:36.3 V36_153:36.3 V36_151:36.3 V36_147:36.3 V36_146:36.3 V36_144:36.3 V36_143:36.2 V36_142:36.2 V36_141:36.2 V36_139:36.2 V36_137:36.2 V36_136:36.2 V36_135:36.2 V36_133:36.2 V36_131:36.1 V36_130:36.1 V36_129:36.1 V36_128:36.1 V36_127:36.1 V36_126:36.1 V36_125:36.1 V36_123:36.1 V36_122:36.1 V36_121:36.1 V36_0:36.1 V36_118:36.1 V36_116:36.1 V36_115:36.1 V36_114:36.1 V36_112:36.1 V36_107:36.1 V36_106:36.1 V36_104:36.1 V36_103:36.1 V36_101:36.1 V36_100:36.1 V36_99:36.1 V36_95:36.1 V36_94:36.1 V36_92:36.1 V36_90:36.1 V36_89:36.1 V36_88:36.1 V36_83:36.1 V36_82:36.1 V36_79:36.1 V36_78:36.1 V36_77:36.1 V36_75:36.1 V36_74:36.1 V36_73:36.1 V36_72:36.1 V36_70:36.1 V36_69:36.1 V36_61:36.1 V36_60:36.1 V36_59:36.1 V36_57:36.0 V36_56:36.0 V36_55:36.0 V36_54:36.0 V36_52:36.0 V36_51:36.0 V36_50:36.0 V36_48:36.0 V36_47:36.0 V36_46:36.0 V36_45:36.0 V36_44:36.0 V36_43:36.0 V36_42:36.0 V36_41:36.0 V36_40:36.0 V36_37:36.0 V36_36:36.0 V36_35:36.0 V36_34:36.0 V36_33:36.0 V36_30:36.0 V36_29:36.0 V36_27:36.0;
locks    ; strict;
comment  @*   @;


39.0
date     91.08.21.17.09.41;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.13.55;  author spence;  state Exp;
branches ;
next     36.6;

36.6
date     90.11.16.14.12.32;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.11.06.13.16.09;  author spence;  state Exp;
branches ;
next     36.4;

36.4
date     90.07.27.16.27.41;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     90.05.02.10.33.39;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.28.09.38.02;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.05.02.09.29.37;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     88.12.13.11.56.27;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@#ifndef	GRAPHICS_GELS_H
#define	GRAPHICS_GELS_H
/*
**	$Id: gels.h,v 37.0 91/01/07 15:13:55 spence Exp Locker: chrisg $
**
**	include file for AMIGA GELS (Graphics Elements) 
**
**	(C) Copyright 1985,1986,1987,1988,1989 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

/* VSprite flags */
/* user-set VSprite flags: */
#define SUSERFLAGS  0x00FF    /* mask of all user-settable VSprite-flags */
#define VSPRITE     0x0001    /* set if VSprite, clear if Bob */
#define SAVEBACK    0x0002    /* set if background is to be saved/restored */
#define OVERLAY     0x0004    /* set to mask image of Bob onto background */
#define MUSTDRAW    0x0008    /* set if VSprite absolutely must be drawn */
/* system-set VSprite flags: */
#define BACKSAVED   0x0100    /* this Bob's background has been saved */
#define BOBUPDATE   0x0200    /* temporary flag, useless to outside world */
#define GELGONE     0x0400    /* set if gel is completely clipped (offscreen) */
#define VSOVERFLOW  0x0800    /* VSprite overflow (if MUSTDRAW set we draw!) */

/* Bob flags */
/* these are the user flag bits */
#define BUSERFLAGS  0x00FF    /* mask of all user-settable Bob-flags */
#define SAVEBOB     0x0001    /* set to not erase Bob */
#define BOBISCOMP   0x0002    /* set to identify Bob as AnimComp */
/* these are the system flag bits */
#define BWAITING    0x0100    /* set while Bob is waiting on 'after' */
#define BDRAWN      0x0200    /* set when Bob is drawn this DrawG pass*/
#define BOBSAWAY    0x0400    /* set to initiate removal of Bob */
#define BOBNIX      0x0800    /* set when Bob is completely removed */
#define SAVEPRESERVE 0x1000   /* for back-restore during double-buffer*/
#define OUTSTEP     0x2000    /* for double-clearing if double-buffer */

/* defines for the animation procedures */
#define ANFRACSIZE  6
#define ANIMHALF    0x0020
#define RINGTRIGGER 0x0001


/* UserStuff definitions
 *  the user can define these to be a single variable or a sub-structure
 *  if undefined by the user, the system turns these into innocuous variables
 *  see the manual for a thorough definition of the UserStuff definitions
 *
 */
#ifndef VUserStuff            /* VSprite user stuff */
#define VUserStuff WORD
#endif

#ifndef BUserStuff            /* Bob user stuff */
#define BUserStuff WORD
#endif

#ifndef AUserStuff            /* AnimOb user stuff */
#define AUserStuff WORD
#endif




/*********************** GEL STRUCTURES ***********************************/

struct VSprite
{
/* --------------------- SYSTEM VARIABLES ------------------------------- */
/* GEL linked list forward/backward pointers sorted by y,x value */
    struct VSprite   *NextVSprite;
    struct VSprite   *PrevVSprite;

/* GEL draw list constructed in the order the Bobs are actually drawn, then
 *  list is copied to clear list
 *  must be here in VSprite for system boundary detection
 */
    struct VSprite   *DrawPath;     /* pointer of overlay drawing */
    struct VSprite   *ClearPath;    /* pointer for overlay clearing */

/* the VSprite positions are defined in (y,x) order to make sorting
 *  sorting easier, since (y,x) as a long integer
 */
    WORD OldY, OldX;          /* previous position */

/* --------------------- COMMON VARIABLES --------------------------------- */
    WORD Flags;               /* VSprite flags */


/* --------------------- USER VARIABLES ----------------------------------- */
/* the VSprite positions are defined in (y,x) order to make sorting
 *  sorting easier, since (y,x) as a long integer
 */
    WORD Y, X;                /* screen position */

    WORD Height;
    WORD Width;               /* number of words per row of image data */
    WORD Depth;               /* number of planes of data */

    WORD MeMask;              /* which types can collide with this VSprite*/
    WORD HitMask;             /* which types this VSprite can collide with*/

    WORD *ImageData;          /* pointer to VSprite image */

/* borderLine is the one-dimensional logical OR of all
 *  the VSprite bits, used for fast collision detection of edge
 */
    WORD *BorderLine;         /* logical OR of all VSprite bits */
    WORD *CollMask;           /* similar to above except this is a matrix */

/* pointer to this VSprite's color definitions (not used by Bobs) */
    WORD *SprColors;

    struct Bob *VSBob;        /* points home if this VSprite is part of 
                                   a Bob */

/* planePick flag:  set bit selects a plane from image, clear bit selects
 *  use of shadow mask for that plane
 * OnOff flag: if using shadow mask to fill plane, this bit (corresponding
 *  to bit in planePick) describes whether to fill with 0's or 1's
 * There are two uses for these flags:
 *      - if this is the VSprite of a Bob, these flags describe how the Bob
 *        is to be drawn into memory
 *      - if this is a simple VSprite and the user intends on setting the
 *        MUSTDRAW flag of the VSprite, these flags must be set too to describe
 *        which color registers the user wants for the image
 */
    BYTE PlanePick;
    BYTE PlaneOnOff;

    VUserStuff VUserExt;      /* user definable:  see note above */
};

struct Bob
/* blitter-objects */
{
/* --------------------- SYSTEM VARIABLES --------------------------------- */

/* --------------------- COMMON VARIABLES --------------------------------- */
    WORD Flags;         /* general purpose flags (see definitions below) */

/* --------------------- USER VARIABLES ----------------------------------- */
    WORD *SaveBuffer;   /* pointer to the buffer for background save */

/* used by Bobs for "cookie-cutting" and multi-plane masking */
    WORD *ImageShadow;

/* pointer to BOBs for sequenced drawing of Bobs
 *  for correct overlaying of multiple component animations
 */
    struct Bob *Before; /* draw this Bob before Bob pointed to by before */
    struct Bob *After;  /* draw this Bob after Bob pointed to by after */

    struct VSprite   *BobVSprite;   /* this Bob's VSprite definition */

    struct AnimComp  *BobComp;      /* pointer to this Bob's AnimComp def */

    struct DBufPacket *DBuffer;     /* pointer to this Bob's dBuf packet */

    BUserStuff BUserExt;            /* Bob user extension */
};

struct AnimComp
{
/* --------------------- SYSTEM VARIABLES --------------------------------- */

/* --------------------- COMMON VARIABLES --------------------------------- */
    WORD Flags;                     /* AnimComp flags for system & user */

/* timer defines how long to keep this component active:
 *  if set non-zero, timer decrements to zero then switches to nextSeq
 *  if set to zero, AnimComp never switches
 */
    WORD Timer;

/* --------------------- USER VARIABLES ----------------------------------- */
/* initial value for timer when the AnimComp is activated by the system */
    WORD TimeSet;

/* pointer to next and previous components of animation object */
    struct AnimComp  *NextComp;
    struct AnimComp  *PrevComp;

/* pointer to component component definition of next image in sequence */
    struct AnimComp  *NextSeq;
    struct AnimComp  *PrevSeq;

    WORD (*AnimCRoutine)(); /* address of special animation procedure */

    WORD YTrans;     /* initial y translation (if this is a component) */
    WORD XTrans;     /* initial x translation (if this is a component) */

    struct AnimOb    *HeadOb;

    struct Bob       *AnimBob;
};

struct AnimOb
{
/* --------------------- SYSTEM VARIABLES --------------------------------- */
    struct AnimOb    *NextOb, *PrevOb;

/* number of calls to Animate this AnimOb has endured */
    LONG Clock;

    WORD AnOldY, AnOldX;            /* old y,x coordinates */

/* --------------------- COMMON VARIABLES --------------------------------- */
    WORD AnY, AnX;                  /* y,x coordinates of the AnimOb */

/* --------------------- USER VARIABLES ----------------------------------- */
    WORD YVel, XVel;                /* velocities of this object */
    WORD YAccel, XAccel;            /* accelerations of this object */

    WORD RingYTrans, RingXTrans;    /* ring translation values */

    WORD (*AnimORoutine)();         /* address of special animation 
                                       procedure */

    struct AnimComp  *HeadComp;     /* pointer to first component */

    AUserStuff AUserExt;            /* AnimOb user extension */
};

/* dBufPacket defines the values needed to be saved across buffer to buffer
 *  when in double-buffer mode
 */
struct DBufPacket
{
    WORD BufY, BufX;                /* save the other buffers screen coordinates */
    struct VSprite   *BufPath;      /* carry the draw path over the gap */

/* these pointers must be filled in by the user */
/* pointer to other buffer's background save buffer */
    WORD *BufBuffer;
};



/* ************************************************************************ */

/* these are GEL functions that are currently simple enough to exist as a
 *  definition.  It should not be assumed that this will always be the case
 */
#define InitAnimate(animKey) {*(animKey) = NULL;}
#define RemBob(b) {(b)->Flags |= BOBSAWAY;}


/* ************************************************************************ */

#define B2NORM      0
#define B2SWAP      1
#define B2BOBBER    2

/* ************************************************************************ */

/* a structure to contain the 16 collision procedure addresses */
struct collTable
{
    int (*collPtrs[16])();
};

#endif	/* GRAPHICS_GELS_H */
@


37.0
log
@initial switchover from V36
@
text
@d4 1
a4 1
**	$Id: gels.h,v 36.6 90/11/16 14:12:32 spence Exp Locker: spence $
@


36.6
log
@changed SHORT to WORD
@
text
@d4 1
a4 1
**	$Id: gels.h,v 36.5 90/11/06 13:16:09 spence Exp Locker: spence $
@


36.5
log
@includes exec/types.h
@
text
@d4 1
a4 1
**	$Id: gels.h,v 36.4 90/07/27 16:27:41 bart Exp Locker: spence $
d55 1
a55 1
#define VUserStuff SHORT
d59 1
a59 1
#define BUserStuff SHORT
d63 1
a63 1
#define AUserStuff SHORT
@


36.4
log
@*** empty log message ***
@
text
@d4 1
a4 1
**	$Id: gels.h,v 36.3 90/05/02 10:33:39 kodiak Exp Locker: bart $
d11 4
@


36.3
log
@standardize include header
@
text
@d4 1
a4 1
**	$Id$
@


36.2
log
@*** empty log message ***
@
text
@d4 1
a4 4
**	$Filename: graphics/gels.h $
**	$Release: 1.3 $
**	$Revision: 36.1 $
**	$Date: 89/05/02 09:29:37 $
@


36.1
log
@copyright 1989
@
text
@d6 2
a7 2
**	$Revision: 36.0 $
**	$Date: 88/12/13 11:56:27 $
@


36.0
log
@added to rcs for updating
@
text
@d6 2
a7 2
**	$Revision$
**	$Date$
d11 1
a11 1
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
@
