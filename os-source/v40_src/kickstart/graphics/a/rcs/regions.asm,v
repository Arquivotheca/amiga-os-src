head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.2 rel39_76:39.2 rel39_71:39.2 rel39_65:39.2 rel39_64:39.2 rel39_61:39.2 rel39_60:39.2 rel39_55:39.2 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.2 rel39_35:39.2 rel39_34:39.2 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.2
date     92.01.07.11.15.18;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.11.11.45.54;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.30;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.33.00;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.02;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.28.19;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.16.29.08;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.03.29.17.27.29;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.57;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@obsoleted file. regions were downcoded, so glue routines no longer
needed.
@
text
@*******************************************************************************
*
*	$Id: regions.asm,v 39.1 91/11/11 11:45:54 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	This file is OBSOLETE!!!!
@


39.1
log
@ autodoc change
@
text
@d3 1
a3 1
*	$Id: regions.asm,v 39.0 91/08/21 17:27:30 chrisg Exp Locker: chrisg $
d7 1
a7 388
	section	graphics

DOWNREGIONS equ 0

    ifne DOWNREGIONS

    xdef    _AndRectRegion
    xref    _andrectregion
******* graphics.library/AndRectRegion **************************************
*
*   NAME
*	AndRectRegion -- Perform 2d AND operation of rectangle
*			 with region, leaving result in region.
*
*   SYNOPSIS
*	AndRectRegion(region,rectangle)
* 			a0	a1
*
*	void AndRectRegion( struct Region *, struct Rectangle * );
*
*   FUNCTION
*	Clip away any portion of the region that exists outside
*	of the rectangle. Leave the result in region.
*
*   INPUTS
*	region - pointer to Region structure
*	rectangle - pointer to Rectangle structure
*
*   NOTES
*	Unlike the other rect-region primitives, AndRectRegion() cannot
*	fail.
*
*   BUGS
*
*   SEE ALSO
*	AndRegionRegion() OrRectRegion() graphics/regions.h
*
*********************************************************************

_AndRectRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Rectangle
    move.l  a0,-(sp)    * Region
    jsr     _andrectregion
    lea     8(sp),sp   * reset stack
    rts

    xdef    _OrRectRegion
    xref    _orrectregion
******* graphics.library/OrRectRegion **************************************
*
*   NAME 
*       OrRectRegion -- Perform 2d OR operation of rectangle
*                       with region, leaving result in region.
* 
*   SYNOPSIS 
*       status = OrRectRegion(region,rectangle) 
*         d0                    a0      a1 
*
*	BOOL OrRectRegion( struct Region *, struct Rectangle * );
* 
*   FUNCTION 
*       If any portion of rectangle is not in the region then add
*       that portion to the region.
* 
*   INPUTS 
*       region - pointer to Region structure
*       rectangle - pointer to Rectangle structure 
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
* 
*   BUGS 
* 
*   SEE ALSO
*	AndRectRegion() OrRegionRegion() graphics/regions.h
*
*********************************************************************
_OrRectRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Rectangle
    move.l  a0,-(sp)    * Region
    jsr     _orrectregion
    lea     8(sp),sp   * reset stack
    rts

    xdef    _OrRegionRegion
    xref    _orregionregion
******* graphics.library/OrRegionRegion ************************************
*
*   NAME 
*       OrRegionRegion -- Perform 2d OR operation of one region
*                       with second region, leaving result in second region 
* 
*   SYNOPSIS 
*       status = OrRegionRegion(region1,region2) 
*         d0                       a0      a1 
*
*	BOOL OrRegionRegion( struct Region *, struct Region * );
* 
*   FUNCTION 
*       If any portion of region1  is not in the region then add
*       that portion to the region2
* 
*   INPUTS 
*       region1 - pointer to Region structure
*       region2 - pointer to Region structure
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
* 
*   BUGS 
*
*   SEE ALSO
* 	OrRectRegion() graphics/regions.h
*
*********************************************************************
_OrRegionRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Region2
    move.l  a0,-(sp)    * Region1
    jsr     _orregionregion
    lea     8(sp),sp   * reset stack
    rts

    xdef    _XorRectRegion
    xref    _xorrectregion
******* graphics.library/XorRectRegion **************************************
*
*   NAME
*       XorRectRegion -- Perform 2d XOR operation of rectangle
*                       with region, leaving result in region
*
*   SYNOPSIS
*       status = XorRectRegion(region,rectangle)
*         d0                     a0      a1
*
*	BOOL XorRectRegion( struct Region *, struct Rectangle * );
*
*   FUNCTION
*	Add portions of rectangle to region if they are not in
*	the region.
*	Remove portions of rectangle from region if they are
*	in the region.
*
*   INPUTS
*       region - pointer to Region structure
*       rectangle - pointer to Rectangle structure
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
*
*   BUGS
*
*   SEE ALSO
*	OrRegionRegion() AndRegionRegion() graphics/regions.h
*
*********************************************************************
_XorRectRegion:
*               current routine calls a C subroutine to do the work
    move.l  a1,-(sp)    * Rectangle
    move.l  a0,-(sp)    * Region
    jsr     _xorrectregion
    lea     8(sp),sp   * reset stack
    rts



******* graphics.library/NewRegion **************************************
*
*   NAME 
*       NewRegion -- Get an empty region.
* 
*   SYNOPSIS 
*       region = NewRegion()
*	d0
*
*	struct Region *NewRegion();
* 
*   FUNCTION 
*	Create a Region structure, initialize it to empty, and return
*	a pointer it.
*
*   RESULTS
*	region - pointer to initialized region. If it could not allocate
*		required memory region = NULL.
* 
*   INPUTS 
*	none
* 
*   BUGS 
* 
*   SEE ALSO
*	graphics/regions.h
*
*********************************************************************

	xdef	_NotRegion
_NotRegion: rts

	xdef	_ClearRegion
	xref	_clearregion
******* graphics.library/ClearRegion **************************************
*
*   NAME 
*       ClearRegion -- Remove all rectangles from region.
* 
*   SYNOPSIS 
*       ClearRegion(region)
*                     a0
*
*	viod ClearRegion( struct Region * );
* 
*   FUNCTION 
*       Clip away all rectangles in the region leaving nothing.
* 
*   INPUTS 
*       region - pointer to Region structure
* 
*   BUGS 
*
*   SEE ALSO
*	NewRegion() graphics/regions.h
*
*********************************************************************
_ClearRegion:
	move.l	a0,-(sp)
	jsr	_clearregion
	addq.l	#4,sp
	rts

	xdef	_DisposeRegion
	xref	_disposeregion
******* graphics.library/DisposeRegion **************************************
*
*   NAME
*       DisposeRegion -- Return all space for this region to free
*			 memory pool.
*
*   SYNOPSIS
*       DisposeRegion(region)
*                      a0 
*
*	void DisposeRegion( struct Region * );
*
*   FUNCTION
*       Free all RegionRectangles for this Region then
*	free the Region itself.
*
*   INPUTS
*       region - pointer to Region structure
*
*   BUGS
*
*   SEE ALSO
*	NewRegion() graphics/regions.h
*
*********************************************************************
_DisposeRegion:
	move.l	a0,-(sp)
	jsr	_disposeregion
	addq.l	#4,sp
	rts

    xdef    _ClearRectRegion
    xref    _clearrectregion
******* graphics.library/ClearRectRegion **************************************
*
*   NAME
*	ClearRectRegion -- Perform 2d CLEAR operation of rectangle
*			with region, leaving result in region.
*
*   SYNOPSIS
*	status = ClearRectRegion(region,rectangle)
*	 d0	 	 	  a0 	  a1
*
*	BOOL ClearRectRegion(struct Region *, struct Rectangle * );
*
*   FUNCTION
*	Clip away any portion of the region that exists inside
*	of the rectangle. Leave the result in region.
*
*   INPUTS
*	region - pointer to Region structure
*	rectangle - pointer to Rectangle structure
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
*
*   BUGS
*
*   SEE ALSO
*	AndRectRegion() graphics/regions.h
*
*********************************************************************
_ClearRectRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Rectangle
    move.l  a0,-(sp)    * Region
    jsr     _clearrectregion
    lea     8(sp),sp   * reset stack
    rts

    xdef    _AndRegionRegion
    xref    _andregionregion
******* graphics.library/AndRegionRegion ************************************
*
*   NAME 
*       AndRegionRegion -- Perform 2d AND operation of one region
*                       with second region, leaving result in second region.
* 
*   SYNOPSIS 
*       status = AndRegionRegion(region1,region2) 
*          d0                       a0      a1 
*
*	BOOL AndregionRegion(struct Region *, struct Region * );
* 
*   FUNCTION 
*       Remove any portion of region2 that is not in region1.
* 
*   INPUTS 
*       region1 - pointer to Region structure
*       region2 - pointer to Region structure to use and for result
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
* 
*   BUGS 
* 
*   SEE ALSO
*	OrRegionRegion() AndRectRegion() graphics/regions.h
*
*********************************************************************
_AndRegionRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Region2
    move.l  a0,-(sp)    * Region1
    jsr     _andregionregion
    lea     8(sp),sp   * reset stack
    rts

    xdef    _XorRegionRegion
    xref    _xorregionregion
******* graphics.library/XorRegionRegion ************************************
*
*   NAME 
*       XorRegionRegion -- Perform 2d XOR operation of one region
*                       with second region, leaving result in second region 
* 
*   SYNOPSIS 
*       status = XorRegionRegion(region1,region2) 
*         d0                        a0      a1 
*
*	BOOL XorRegionRegion( struct Region *, struct Region * );
* 
*   FUNCTION 
*	Join the regions together. If any part of region1 overlaps
*	region2 then remove that from the new region.
* 
*   INPUTS 
*       region1      = pointer to Region structure
*       region2      = pointer to Region structure
*
*   RESULTS
*	status - return TRUE if successful operation
*		 return FALSE if ran out of memory
* 
*   BUGS 
* 
*
*********************************************************************
_XorRegionRegion:
*               current routine calls a C subroutine to do the work
	move.l	a1,-(sp)    * Region2
    move.l  a0,-(sp)    * Region1
    jsr     _xorregionregion
    lea     8(sp),sp   * reset stack
    rts

    endc


	end
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: Regions.asm,v 37.1 91/02/12 15:33:00 chrisg Exp Locker: chrisg $
d106 1
a106 1
*	BOOL OrRegionRegion( struct Region *, struct region * );
d146 1
a146 1
*	BOOL XorrectRegion( struct Region *, struct Rectangle * );
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: Regions.asm,v 37.0 91/01/07 15:26:02 spence Exp Locker: chrisg $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: Regions.asm,v 1.4 90/08/24 11:28:19 bart Exp Locker: spence $
d19 1
a19 1
*			with region, leaving result in region.
d25 1
a25 2
*	struct Region *region;
*	struct Rectangle *rectangle;
d35 4
d42 1
a42 1
*	AndRegionRegion OrRectRegion graphics/regions.h
d66 1
a66 3
*	BOOL status
*	struct Region *region;
*	struct Rectangle *rectangle;
d83 1
a83 1
*	AndRectRegion OrRegionRegion graphics/regions.h
d106 1
a106 2
*	BOOL status;
*	struct Region *region1, *region2;
d123 1
a123 1
* 	OrRectRegion graphics/regions.h
d146 1
a146 3
*	BOOL status;
*	struct Region *region;
*	struct Rectangle *rectangle;
d165 1
a165 1
*	OrRegionRegion AndRegionRegion graphics/regions.h
d181 1
a181 1
*       NewRegion -- Get a clear region.
d187 1
a187 1
*	struct Region *region;
d190 1
a190 1
*	Create a Region structure, initialize it to empty and return
d221 1
a221 1
*	struct Region *region;
d232 1
a232 1
*	NewRegion graphics/regions.h
d253 1
a253 1
*	struct Region *region;
d265 1
a265 1
*	NewRegion graphics/regions.h
d286 1
a286 3
*	BOOL error;
*	struct Region *region;
*	struct Rectangle *rectangle;
d303 1
a303 1
*	AndRectRegion graphics/regions.h
d326 1
a326 2
*	BOOL status;
*	struct Region *region1, *region2;
d342 1
a342 1
*	OrRegionRegion AndRectRegion graphics/regions.h
d365 1
a365 2
*	BOOL status;
*	struct Region *region1, *region2;
d372 2
a373 2
*           region1      = pointer to Region structure
*           region2      = pointer to Region structure
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: Regions.asm,v 1.2 89/03/29 17:27:29 bart Exp $
@


1.2
log
@conditionally defined out regions entry points
entry points now in c/downregions.asm
@
text
@d3 1
a3 1
*	$Header: Regions.asm,v 1.1 88/05/01 15:37:57 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: Regions.asm,v 33.0 86/05/17 15:09:57 bart Exp $
d8 5
d42 1
a208 1

d396 2
@
