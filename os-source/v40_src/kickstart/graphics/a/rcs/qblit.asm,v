head     39.4;
branch   ;
access   ;
symbols  rel39_24:39.4 rel39_18:39.4 rel39_97:39.4 rel39_90:39.4 rel39_89:39.4 rel39_82:39.4 rel39_76:39.2 rel39_71:39.2 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.5 V37_29:37.5 V37_28:37.5 V37_27:37.4 V37_25:37.4 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.4
date     92.08.11.13.58.58;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.08.10.10.23.03;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.01.10.37.33;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.16.12.12.19;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.17;  author chrisg;  state Exp;
branches ;
next     37.6;

37.6
date     91.05.01.14.18.47;  author chrisg;  state Exp;
branches ;
next     37.5;

37.5
date     91.04.18.15.40.58;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.04.15.16.01.59;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.04.11.15.59.49;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.02.16.48.06;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.19.02;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.53;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.28.10;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.16.20.53;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.08.14.20.39;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.54;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.4
log
@correct include files.
clear pending change.
@
text
@*******************************************************************************
*
*	$Id: qblit.asm,v 39.3 92/08/10 10:23:03 chrisg Exp Locker: chrisg $
*
*******************************************************************************

    
    include 'exec/types.i'
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/ports.i'
    include 'exec/interrupts.i'
    include 'exec/libraries.i'
    include	'exec/ables.i'

    include '/gfx.i'
    include '/gfxbase.i'
    include 'hardware/blit.i'
    include 'hardware/intbits.i'
    include 'hardware/dmabits.i'
    include 'hardware/custom.i'
    include '/view.i'


	section	graphics
    xref    _intreq
    xref    _intreqr
    xref    _intena
    xref    _intenar
    xref    _custom
    xref    _dmaconr

	xref	_LVOPermit

	IFNE	bn_n
	FAIL	"bn_n NOT ZERO; recode!"
	ENDC

    xdef    _QBlit
    xdef    qbs_entry

******* graphics.library/QBlit ************************************************
*
*   NAME
*
*	QBlit -- Queue up a request for blitter usage
*
*   SYNOPSIS
*	QBlit( bp )
*	       a1
*
*	void QBlit( struct bltnode * );
*
*   FUNCTION
*	Link a request for the use of the blitter to the end of the
*       current blitter queue.  The pointer bp points to a blit structure
*       containing, among other things, the link information, and the
*       address of your routine which is to be called when the blitter
*       queue finally gets around to this specific request.  When your
*       routine is called, you are in control of the blitter ... it is
*       not busy with anyone else's requests.  This means that you can
*       directly specify the register contents and start the blitter.
*       See the description of the blit structure and the uses of QBlit
*       in the section titled Graphics Support in the OS Kernel Manual.
*       Your code must be written to run either in supervisor or user
*       mode on the 68000.
*
*   INPUTS
*	bp - pointer to a blit structure
*
*   RESULT
*	Your routine is called when the blitter is ready for you.
*	In general requests for blitter usage through this channel are
*	put in front of those who use the blitter via OwnBlitter and
*	DisownBlitter. However for small blits there is more overhead
*	using the queuer than Own/Disown Blitter.
*
*   NOTES
*	Code which uses QBlit(), or QBSBlit() should make use of
*	the pointer to a cleanup routine in the bltnode structure.
*	The cleanup routine may be called on the context of an
*	interrupt, therefore the routine may set a flag, and signal
*	a task, but it may not call FreeMem() directly.  Use of
*	the cleanup routine is the only safe way to signal that
*	your bltnode has completed.
*
*   BUGS
*	QBlit(), and QBSBlit() have been rewritten for V39 due to
*	various long standing bugs in earlier versions of this code.
*
*   SEE ALSO
*	QBSBlit() hardware/blit.h
*
******************************************************************************

_QBlit:

	;-- Indicate that beam sync'ed blits not requested.  We will
	;-- use the upper bit of the bn_beamsync WORD to indicate this,
	;-- thereby trying not to munge the actual beamsync value provided.
	;-- This bit must be TRUE, or else we interpret this to mean that
	;-- beamsync value is to be ignored.  An example of this is
	;-- QBSBlit(); the flag is cleared for each node at VBLANK time
	;-- meaning we should not bother trying to beamsync the node any
	;-- longer because VBLANK has occured sometime between the call
	;-- to QBSBlit(), and the time the node is handled.  As it turns
	;-- out, the old code had special case handling for negative
	;-- beamsync values, and clipped those to mean MaxDisplayRows.
	;-- So the 15 bit number is not a new limit.

		bclr	#7,bn_beamsync(a1)

	;-- An entry point for QBSBlit(); do not munge bn_beamsync high bit

qbs_entry:

	;-- clear pointer to next blit node

		clr.l	(a1)
		move.l	a2,d1
		lea	_custom,a2

	;-- protect QBlit list (DISABLE does all we need; no need for
	;-- for FORBID).

		move.l	gb_ExecBase(a6),a0
		DISABLE	A0,NOFETCH


	;-- If something already on QBlit list, then just add to list,
	;-- and bail out.

		tst.l	gb_blthd(a6)
		bne.s	qb_inuse

	;-- This node is now head, and tail of QBlit list

		move.l	a1,gb_blthd(a6)		;AddHead

	;-- Try to own the blitter immediately

		addq.w	#1,gb_BlitLock(a6)	;one lock for all qblits
		bne.s	qb_enable

	;-- mark that QBlit owns the blitter.

		or.w	#QBOWNER,gb_Flags(a6)

	;-- clear any pending interrupt requests and let the current blit
	;-- cause one (or we'll cause one below).
	;-- Enable blitter interrupts; let the next blitter interrupt
	;-- trigger our blitter interrupt code when the current
	;-- blit (if any) is done, or as a result of this code
	;-- causing a blitter interrupt.

		move.w	#INTF_BLIT,intreq(a2)
		move.w	#BITSET+INTF_BLIT,intena(a2)

	;-- make sure we get a blitter interrupt to wake up the
	;-- blitter interrupt code, which will actually deal with this
	;-- node

		tst.b	dmaconr(a2)		; pretest (for bad agnus)


		btst	#DMAB_BLTDONE-8,dmaconr(a2)
		bne.s	qb_enable

		move.w	#BITSET!INTF_BLIT,intreq(a2)

qb_enable:
		move.l	a1,gb_blttl(a6)		;This new node is now tail of list
		ENABLE	A0,NOFETCH
		move.l	d1,a2
		rts

	;-----------------------------------------------------------
	;-- The QBlit list is active, so simply add to qblit list.
	;-- We know that we have already incremented the BlitLock
	;-- count because some blit node had to go on this list
	;-- when the list was empty.
	;-----------------------------------------------------------
  

qb_inuse:
		move.l	gb_blttl(a6),a0		;link at tail
		move.l	a1,(a0)

		move.l	gb_ExecBase(a6),a0
		bra.s	qb_enable

		END
@


39.3
log
@replaced with darren's code, which actually works
(unlike the previous code).
@
text
@d3 1
a3 1
*	$Id: qblit.asm,v 39.2 92/07/01 10:37:33 chrisg Exp $
d16 2
a17 2
    include 'graphics/gfx.i'
    include 'graphics/gfxbase.i'
d22 1
a22 1
    include 'graphics/view.i'
d120 2
d149 2
d156 2
a157 1
		move.w	#BITSET+INTF_BLIT,_intena
d163 1
a163 1
		tst.b	_dmaconr		; pretest (for bad agnus)
d166 1
a166 1
		btst	#DMAB_BLTDONE-8,_dmaconr
d169 1
a169 1
		move.w	#BITSET!INTF_BLIT,_intreq
d174 1
@


39.2
log
@no stubs.
@
text
@d3 1
a3 1
*	$Id: qblit.asm,v 39.1 92/06/16 12:12:19 chrisg Exp Locker: chrisg $
d14 1
a14 1
	include	'exec/ables.i'
a22 2
    include 'submacs.i'
    include '/sane_names.i'
d24 1
d33 1
a33 1
    xref    DEBUG
d35 3
a37 1
	xref	_LVOPermit
d40 2
d65 2
a66 2
*	Your code must be written to run either in supervisor or user
*	mode on the 68000.
d78 9
d88 2
a94 3
    xref    waitblitdone
	xdef	qb_entry
	xdef	qb_entry2
d97 88
a184 88
*   pure assembly code
    clr.l   (a1)        *   clear ptr to next blit node
	move.l	gb_ExecBase(a6),a0
	FORBID	a0,NOFETCH
	DISABLE	a0,NOFETCH
qb_entry:
    if  gb_blthd(a6)=#0.l .ex
qb_entry2:
	addq.w  #1,gb_BlitLock(a6)
	if  =   .ex * if = then now owned
* let us call the routine now
	    movem.l a2/a5,-(sp) * save a2 and a5
	    move.l  a1,a2       * save ptr into a2
	    move.l  4(a1),a5    * get entry point of handler

; this is the first time. we must disable blit interrupts.
	    or.w    #QBOWNER,gb_Flags(a6)
	    move.w	_intenar,d0
	    and.w	#INTF_BLIT,d0
	    bset	#15,d0
	    move.w	#INTF_BLIT,_intena	; disable blit ints
	    enable_interrupts
	    WAITBLITDONE
	    disable_interrupts
	    move	d0,_intena
go_again:
	    lea _custom,a0  * get ptr to I/O space
	    move.w  #INTF_BLIT,intreq(a0)
	    jsr     (a5)
* anymore blits to do?
	    if =
		btst    #CLEANMEn,bn_stat(a2)
		if <>
		    enable_interrupts
		    WAITBLITDONE
		    move.l  bn_cleanup(a2),a5
		    disable_interrupts
		    jsr (a5)
		endif
		bclr    #QBOWNERn,gb_Flags+1(a6)
		DISOWNBLITTER
		move.l	gb_ExecBase(a6),a2
		ENABLE	a2,NOFETCH
		exg.l	a2,a6
		jsr	_LVOPermit(a6)
		move.l	a2,a6
		movem.l (sp)+,a2/a5
	* bart - 10.07.85
		rts 
	    endif
* clean up
	    move.l  a2,a1       * ptr back to a1
	    move.l  4(a1),a5    * incase he changed it
	    tst.b	_dmaconr 					* bart - 03.08.90 if bad agnus
	    btst    #DMAB_BLTDONE-8,_dmaconr
*	    beq     go_again
	    beq.s     enabl_disabl  * bart - 10.07.85
	    movem.l (sp)+,a2/a5 * restore a2
* more blits on this node to do
	endif
	move.l  a1,gb_blthd(a6) * put at head of list
    else
	addq.w  #1,gb_BlitLock(a6)
	move.l  gb_blttl(a6),a0
	move.l  a1,(a0)         * link at end of list
    endif
    move.l  a1,gb_blttl(a6)     * new end of list
    move.w  #BITSET+INTF_BLIT,_intena
	move.l	a6,a0
	move.l	gb_ExecBase(a0),a6
	ENABLE
	jsr	_LVOPermit(a6)
	move.l	a0,a6
    rts

enabl_disabl:
    btst.b  #INTB_BLIT,_intenar+1 * bart - 1.06.85
    if = 
	enable_interrupts	* bart - 10.07.85
	disable_interrupts	* bart - 10.07.85
	bra     go_again
    else
	move.w  #INTF_BLIT,_intena
	enable_interrupts	* bart - 10.07.85
	disable_interrupts	* bart - 10.07.85
	move.w  #BITSET+INTF_BLIT,_intena
	bra     go_again
    endif
d186 1
a186 1
    end
@


39.1
log
@short branches
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.6 91/05/01 14:18:47 chrisg Exp $
d14 1
d36 1
a36 2
    xref    _Forbid
    xref    _Permit
d88 3
a90 2
    jsr _Forbid		*   bart - 10.07.85
    disable_interrupts
d127 5
a131 1
		enable_interrupts
d133 1
a133 1
		jsr _Permit	* bart - 10.07.85
d154 5
a158 2
    enable_interrupts
    jsr _Permit * bart - 10.07.85
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.6 91/05/01 14:18:47 chrisg Exp Locker: chrisg $
d137 1
a137 1
	    beq     enabl_disabl  * bart - 10.07.85
@


37.6
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.5 91/04/18 15:40:58 chrisg Exp Locker: chrisg $
@


37.5
log
@ Fixed previous fix to preserve blit int flag. Accidentally
wrote into intenaR !!!
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.4 91/04/15 16:01:59 chrisg Exp Locker: chrisg $
d23 1
a23 1
    include '../sane_names.i'
@


37.4
log
@ swapped order of forbid and disable (rom crit item #125b)
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.3 91/04/11 15:59:49 chrisg Exp Locker: chrisg $
d109 1
a109 1
	    move	d0,_intenar
@


37.3
log
@ Made blit interrupt disable restore previous state of blit interrupt enable
(bart request).

@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.2 91/04/02 16:48:06 chrisg Exp Locker: chrisg $
d88 1
a89 1
    jsr _Forbid		*   bart - 10.07.85
d126 1
a128 1
		enable_interrupts
d149 1
a150 1
    enable_interrupts
@


37.2
log
@  Modified code to not disable interrupts while doing a WaitBlit. This should
be OK, and Bart says it looks OK to him, also. Should reduce interrupt latency
when doing gels.
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.1 91/02/12 15:19:02 chrisg Exp Locker: chrisg $
d102 3
d109 1
@


37.1
log
@cleaned up autodoc
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 37.0 91/01/07 15:25:53 spence Exp Locker: chrisg $
d99 5
d105 1
a105 1
	    or.w    #QBOWNER,gb_Flags(a6)
a111 1
		WAITBLITDONE
d114 2
d117 1
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: QBlit.asm,v 1.4 90/08/24 11:28:10 bart Exp Locker: spence $
d49 1
a49 1
*	struct bltnode *bp;
d78 1
a78 1
*	QBSBlit hardware/blit.h
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: QBlit.asm,v 1.2 90/03/08 14:20:39 bart Exp $
@


1.2
log
@minor optimisation on test of dmaconr
@
text
@d3 1
a3 1
*	$Header: QBlit.asm,v 1.1 88/05/01 15:37:54 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: QBlit.asm,v 33.0 86/05/17 15:09:28 bart Exp $
d123 1
a124 1
	    btst    #DMAB_BLTDONE-8,_dmaconr * bart - 11.24.85 if bad agnus
@
