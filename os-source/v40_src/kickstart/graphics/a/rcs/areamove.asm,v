head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.0
date     91.08.21.17.23.51;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.13.58.28;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.17.03.49;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.12.13.08;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.24.00;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.07.27.16.36.35;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.16.18.50;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.05.05.19.00.10;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.04;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@*******************************************************************************
*
*	$Id: AreaMove.asm,v 37.3 91/05/01 13:58:28 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	section	graphics
    xdef    _AreaMove
******* graphics.library/AreaMove ********************************************
*
*   NAME
*	AreaMove -- Define a new starting point for a new
*	            shape in the vector list.
*
*
*   SYNOPSIS
*	error =  AreaMove( rp,   x,     y)
*	 d0                a1  d0:16  d1:16
*
*	LONG AreaMove( struct RastPort *, SHORT, SHORT );
*
*   FUNCTION
*	Close  the last polygon and start another polygon
*	at  (x,y). Add the necessary  points  to  vector
*	buffer. Closing a polygon may result in the generation
*	of another AreaDraw() to close previous polygon.
*	Remember to have an initialized AreaInfo structure attached
*	to the RastPort.
*
*   INPUTS
*	rp  - points to a RastPort structure
*	x,y - positions in the raster
*
*   RETURNS
*	error - zero for success, or -1 if there is no space left in the
*	vector list
*
*   BUGS
*
*   SEE ALSO
*	InitArea() AreaDraw() AreaEllipse() AreaEnd() graphics/rastport.h
*
*
******************************************************************************
    include 'exec/types.i'
    include 'graphics/rastport.i'
    include '/c/areafill.i'

	xref	_LVOAreaDraw

_AreaMove:
	move.w	d7,-(sp)
	move.l	rp_AreaInfo(a1),a0	*	get pointer to AreaInfo structure
	move.w	ai_Count(a0),d7
	addq	#1,d7
	if	ai_MaxCount(a0)<d7.w
bad:
		moveq	#-1,d0
	else
		move.w	d7,ai_Count(a0)
		if #1<>d7.w
			move.l	a2,-(sp)	* need another register
			move.l	ai_FlagPtr(a0),a2
			if -(a2).b=#0		* was previous point a move?
				sub.w	#1,ai_Count(a0)	* yes, lets just backup
				move.l	a2,ai_FlagPtr(a0)
				subq.l	#4,ai_VctrPtr(a0)
			else
				move.l	ai_VctrPtr(a0),a2	* now check if previous
*											* polygon was closed properly
				move.w	-4(a2),d7			* get old x
				if ai_FirstX(a0)=d7
					move.w -2(a2),d7		* get old y
					cmp.w ai_FirstY(a0),d7
					beq.s closed
				endif
*				We have to call AreaDraw now
				move.l	a1,a2				* lets save RastPort here
				movem.w	d0/d1,-(sp)			* save these guys also
				movem.w	ai_FirstX(a0),d0/d1	* get original start
				jsr	_LVOAreaDraw(a6)		* close it up, sets cc
				movem.w	(sp)+,d0/d1			* restore d0/d1
				move.l	a2,a1				* get RastPort back
				if <						* now test the cc return
					move.l	(sp)+,a2
					bra bad
				endif
			endif
closed:
			move.l	(sp)+,a2
		endif
		movem.w	d0/d1,ai_FirstX(a0)	* we have a new beginning of polygon
		move.l	ai_VctrPtr(a0),a1	* get pointer to next pair
		move.w	d0,(a1)+			* stash x
		move.w	d1,(a1)+			* stash y
		move.l	a1,ai_VctrPtr(a0)	* save new pointer
		move.l	ai_FlagPtr(a0),a1	* get pointer to flag matrix
		moveq	#0,d0				* this one is a MOVE
		move.b	d0,(a1)+			* also return(0)
		move.l	a1,ai_FlagPtr(a0)	* new flag pointer
	endif
	move.w	(sp)+,d7
	tst.l	d0						* set up correct condition codes
	rts

	end
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: AreaMove.asm,v 37.2 91/02/12 17:03:49 chrisg Exp Locker: chrisg $
@


37.2
log
@autodoc - spacing
@
text
@d3 1
a3 1
*	$Id: AreaMove.asm,v 37.1 91/02/12 12:13:08 chrisg Exp Locker: chrisg $
d47 1
a47 1
    include '../c/areafill.i'
@


37.1
log
@Cleaned up autodoc
@
text
@d3 1
a3 1
*	$Id: AreaMove.asm,v 37.0 91/01/07 15:24:00 spence Exp Locker: chrisg $
d12 2
a13 2
*       AreaMove -- Define a new starting point for a new
*                   shape in the vector list.
d17 1
a17 1
*       error =  AreaMove( rp,   x,     y)
d20 1
a20 1
*	LONG AreaMove( struct RastPort *, SHORT, SHORT);
d23 3
a25 3
*       Close  the last polygon and start another  polygon
*       at  (x,y). Add the necessary  points  to  vector
*       buffer. Closing a polygon may result in the generation
d31 2
a32 2
*       rp - points to a RastPort structure
*       x,y - positions in the raster
d35 1
a35 1
*       error - zero for success, or -1 if there is no space left in the
d41 1
a41 1
*       InitArea() AreaDraw() AreaEllipse() AreaEnd() graphics/rastport.h
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: AreaMove.asm,v 1.4 90/07/27 16:36:35 bart Exp Locker: spence $
d20 1
a20 3
*	LONG error;
*	struct RastPort *rp;
*	SHORT	x,y;
d24 2
a25 2
*       at  (x,y).    Enter  necessary  points  in  vector
*       buffer. Cosing a polygon may result in the generation
d35 2
a36 2
*       0 if no error
*	-1 if no space left in vector list
d41 1
a41 1
*       InitArea AreaDraw AreaEllipse AreaEnd graphics/rastport.h
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: AreaMove.asm,v 1.2 89/05/05 19:00:10 bart Exp $
@


1.2
log
@fixed bug B4338, B4330
@
text
@d3 1
a3 1
*	$Header: AreaMove.asm,v 1.1 88/05/01 15:36:04 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: AreaMove.asm,v 33.0 86/05/17 15:04:11 bart Exp $
@
