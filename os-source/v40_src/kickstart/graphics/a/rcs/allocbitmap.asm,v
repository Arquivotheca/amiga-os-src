head     39.28;
branch   ;
access   ;
symbols  rel39_24:39.28 rel39_18:39.28 rel39_97:39.25 rel39_90:39.25 rel39_89:39.23 rel39_82:39.22 rel39_76:39.22 rel39_71:39.22 rel39_65:39.19 rel39_64:39.18 rel39_61:39.18 rel39_60:39.18 rel39_55:39.17 rel39_52:39.16 rel39_47:39.15 rel39_39:39.13 rel39_38:39.13 rel39_37:39.11 rel39_35:39.9 rel39_34:39.8 rel1_0:39.7 rel1-0:39.7;
locks    ; strict;
comment  @* @;


39.28
date     93.03.19.07.32.21;  author chrisg;  state Exp;
branches ;
next     39.27;

39.27
date     93.03.17.16.11.54;  author spence;  state Exp;
branches ;
next     39.26;

39.26
date     92.11.24.10.40.58;  author chrisg;  state Exp;
branches ;
next     39.25;

39.25
date     92.09.24.13.32.50;  author chrisg;  state Exp;
branches ;
next     39.24;

39.24
date     92.09.17.15.10.19;  author spence;  state Exp;
branches ;
next     39.23;

39.23
date     92.09.03.15.35.44;  author spence;  state Exp;
branches ;
next     39.22;

39.22
date     92.07.01.10.17.12;  author chrisg;  state Exp;
branches ;
next     39.21;

39.21
date     92.06.19.13.50.28;  author chrisg;  state Exp;
branches ;
next     39.20;

39.20
date     92.06.18.15.33.08;  author chrisg;  state Exp;
branches ;
next     39.19;

39.19
date     92.06.09.08.40.23;  author chrisg;  state Exp;
branches ;
next     39.18;

39.18
date     92.05.05.11.35.39;  author chrisg;  state Exp;
branches ;
next     39.17;

39.17
date     92.04.27.12.22.46;  author chrisg;  state Exp;
branches ;
next     39.16;

39.16
date     92.04.07.14.54.13;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     92.03.24.16.13.39;  author chrisg;  state Exp;
branches ;
next     39.14;

39.14
date     92.03.19.15.58.14;  author chrisg;  state Exp;
branches ;
next     39.13;

39.13
date     92.03.03.13.28.49;  author chrisg;  state Exp;
branches ;
next     39.12;

39.12
date     92.02.28.13.59.48;  author chrisg;  state Exp;
branches ;
next     39.11;

39.11
date     92.02.26.11.33.33;  author chrisg;  state Exp;
branches ;
next     39.10;

39.10
date     92.02.24.14.08.18;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     92.02.20.13.45.11;  author chrisg;  state Exp;
branches ;
next     39.8;

39.8
date     92.02.14.15.57.23;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     91.12.02.10.54.56;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     91.11.21.10.37.30;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     91.11.18.11.41.03;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     91.11.15.12.09.05;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     91.11.15.12.04.15;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.15.10.59.17;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.08.27.16.21.17;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.28.32;  author chrisg;  state Exp;
branches ;
next     38.1;

38.1
date     91.08.21.16.21.57;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.08.20.16.08.42;  author chrisg;  state Exp;
branches ;
next     ;


desc
@ Contains routines for allocating bitmap rasters in V38
@


39.28
log
@removed redudant clr.w since now using MEMF_CLEAR
,
@
text
@*******************************************************************************
*
*	$Id: allocbitmap.asm,v 39.27 93/03/17 16:11:54 spence Exp Locker: chrisg $
*
*******************************************************************************

	include	"exec/types.i"
	include	"/gfxbase.i"
	include	"/gfx.i"
	include	"/macros.i"
	include	"exec/memory.i"

	SECTION graphics

	OPTIMON

	xref	_LVOAllocMem,_LVOFreeMem,_LVOAllocVec,_LVOFreeVec


	xdef	_AllocBitMapData,_FreeBitMapData
	xdef	_AllocBitMap,_FreeBitMap
	xdef	_GetBitMapAttr

******* graphics.library/GetBitMapAttr ****************************************
*
*   NAME
*	GetBitMapAttr -- Returns information about a bitmap (V39)
*
*
*   SYNOPSIS
*	value=GetBitMapAttr(bitmap,attribute_number);
*	  d0	                 a0       d1
*
*	ULONG GetBitMapAttr(struct BitMap *,ULONG);
*
*   FUNCTION
*	Determines information about a bitmap. This function should be used
*	instead of reading the bitmap structure fields directly. This will
*	provide future compatibility.
*
*   INPUTS
*	bm  =  A pointer to a BitMap structure.
*
*	attribute_number = A number telling graphics which attribute
*	                   of the bitmap should be returned:
*
*	                BMA_HEIGHT returns the height in pixels
*	                BMA_WIDTH  returns the width in pixels.
*	                BMA_DEPTH  returns the depth. This is the number of
*	                        bits which are required to store the information
*	                        for one pixel in the bitmap.
*	                BMA_FLAGS  returns a longword bitfield describing
*	                        various attributes which the bitmap may have.
*	                        Currently defined flags are BMF_DISPLAYABLE,
*	                        BMF_INTERLEAVED (see AllocBitMap()). The flag
*	                        BMF_STANDARD returns will be set if the
*	                        bitmap is represented as planar data in Amiga
*	                        Chip RAM.
*
*   BUGS
*
*   NOTES
*
*	Unknown attributes are reserved for future use, and return zero.
*
*	BMF_DISPLAYABLE will only be set if the source bitmap meets all of the
*	required alignment restrictions. A bitmap which does not meet these
*	restrictions may still be displayable at some loss of efficiency.
*
*	Size values returned by this function may not exactly match the values
*	which were passed to AllocBitMap(), due to alignment restrictions.
*
*   SEE ALSO
*	AllocBitMap()
*
*********************************************************************************
_GetBitMapAttr:
	moveq	#0,d0
	subq.l	#4,d1
	bpl.s	not_height
	move.w	bm_Rows(a0),d0
	rts
not_height:
	subq.l	#4,d1
	bpl.s	not_depth
	move.b	bm_Depth(a0),d0
	rts
not_depth:
	cmp.w	#UNLIKELY_WORD,bm_Pad(a0)
	bne.s	not_interleaved1
	cmp.b	#2,bm_Depth(a0)
	blt.s	not_interleaved1
	move.l	bm_Planes+4(a0),a1
	sub.l	bm_Planes(a0),a1
	cmp.w	#0,a1
	beq.s	not_interleaved1
	cmp.w	bm_BytesPerRow(a0),a1
	bhi.s	not_interleaved1
	bset	#BMB_INTERLEAVED,d0
not_interleaved1:
	subq.l	#4,d1
	bpl.s	not_width
	move.w	bm_BytesPerRow(a0),d1
	tst.l	d0
	beq.s	no_il2
	move.l	a1,d1
no_il2:
; do bytesperrow / 8 = pixels
	lsl.w	#3,d1
	move.w	d1,d0
	rts
not_width:
; return flags
	subq.l	#4,d1
	bpl.s	unknown_attr
	bset	#BMB_STANDARD,d0
	movem.l	d2/d3,-(a7)
	moveq	#0,d2
	moveq	#2,d1
	move.b	gb_MemType(a6),d2
	move.l	gb_bwshifts(a6),a1
	move.b	0(a1,d2.w),d3
	asl.b	d3,d1
	subq.w	#1,d1
	move.w	bm_BytesPerRow(a0),d2
	and	d1,d2
	bne.s	not_displayable
	moveq	#0,d2
	move.b	bm_Depth(a0),d2
	subq	#1,d2
	lea	bm_Planes(a0),a0
1$:	move.l	(a0)+,d3
	and	d1,d3
	dbne	d2,1$
	bne.s	not_displayable
	bset	#BMB_DISPLAYABLE,d0
not_displayable:
	movem.l	(a7)+,d2/d3
	rts
unknown_attr:
	moveq	#0,d0
	rts

; AllocBitMapData
; initialize pad field of bitmap and allocates planes. returns non-zero on error.
;	flags = BMF_CLEAR to specify that the allocated raster should be
;		filled with color 0.
;
;		BMF_DISPLAYABLE to specify that this bitmap data should
;		be allocated in such a manner that it can be displayed.
;		Displayable data has more severe alignment restrictions
;		than non-displyable data.
;
;		BMF_INTERLEAVED tells graphics that you would like your
;		bitmap to be allocated with one large chunk of display
;		memory for all bitplanes. This minimizes color flashing
;		on deep displays.


_AllocBitMapData:
; first, align sizex
	movem.l	d2-d4/a2/a3/a6,-(a7)
	moveq	#16,d4
	btst	#BMB_DISPLAYABLE,d3
	beq.s	1$
	swap	d3
	clr.w	d3
	move.b	gb_MemType(a6),d3
	move.l	gb_bwshifts(a6),a1
	move.b	0(a1,d3.w),d3
	asl.b	d3,d4
	swap	d3
1$:	subq.w	#1,d4
	add.w	d4,d0
	addq.w	#1,d4
	neg.w	d4		; d4=$ffff-d4
	and.w	d4,d0
	move	d1,bm_Rows(a0)
	lsr.w	#3,d0
	cmp	#2,d2
	blt.s	no_il
	btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)	; don't do on stupid old chips
	beq.s	no_il
	cmp	#4093,d0		; don't do for bitmaps wider than 4094
	bgt.s	no_il
	cmp	#4093,d1
	bgt.s	no_il
	btst	#BMB_INTERLEAVED,d3
	bne.s	do_interleaved
no_il:
	move.w	d0,bm_BytesPerRow(a0)
	mulu	d1,d0
	clr.b	bm_Depth(a0)	; count up bm_depth for recovery reasons
	subq.w	#1,d2		; DBRA adjustment
	move.l	gb_ExecBase(a6),a6
	move.l	d0,d4		; allocsize
	move.l	#MEMF_CHIP,d1
	btst	#BMB_CLEAR,d3
	beq.s	2$
	or.l	#MEMF_CLEAR,d1
2$:	move.l	d1,d3
	lea	bm_Planes(a0),a2
	move.l	a0,a3
3$:	move.l	d4,d0
	move.l	d3,d1
	jsr	_LVOAllocMem(a6)
	move.l	d0,(a2)+
	beq.s	alloc_failure
	addq.b	#1,bm_Depth(a3)
	dbra	d2,3$
	movem.l	(a7)+,d2-d4/a2/a3/a6
	moveq	#0,d0	
	rts
alloc_failure:
	move.l	a3,a0
	movem.l	(a7)+,d2-d4/a2/a3/a6
	bsr.s	_FreeBitMapData
	moveq	#-1,d0
	rts

do_interleaved:
	movem.l	d0/d1/a6,-(a7)
	move.l	d0,d4
	move.l	a0,a3
	move.b	d2,bm_Depth(a0)
	mulu	d2,d0
	move.w	d0,bm_BytesPerRow(a0)
	mulu	bm_Rows(a0),d0
	move.l	#MEMF_CHIP,d1
	btst	#BMB_CLEAR,d3
	beq.s	2$
	or.l	#MEMF_CLEAR,d1
2$:	move.l	gb_ExecBase(a6),a6
	jsr	_LVOAllocMem(a6)
	tst.l	d0
	bne.s	doi_1
	movem.l	(a7)+,d0/d1/a6
	move.l	a3,a0
	bra	no_il
doi_1:	subq	#1,d2
	lea	bm_Planes(a3),a2
	ext.l	d4
3$:	move.l	d0,(a2)+
	add.l	d4,d0
	dbra	d2,3$
	move.w	#UNLIKELY_WORD,bm_Pad(a3)
	lea	12(a7),a7
	movem.l	(a7)+,d2-d4/a2/a3/a6
	moveq	#0,d0
	rts


_FreeBitMapData:
; void __asm FreeBitMapData(register __a0 struct BitMap *bm);
	movem.l	d2/d3/a2/a6,-(a7)
	moveq	#0,d2
	move.b	bm_Depth(a0),d2
	cmp.w	#UNLIKELY_WORD,bm_Pad(a0)
	bne.s	not_interleaved
; this bitmap is interleaved, so we had better treat it as a one bit deep bitmap
	moveq	#1,d2
not_interleaved:
	move.l	gb_ExecBase(a6),a6
	move.w	bm_BytesPerRow(a0),d3
	mulu	bm_Rows(a0),d3
	lea	bm_Planes(a0),a2
	bra.s	2$
1$:	move.l	(a2)+,a1
	move.l	d3,d0
	jsr	_LVOFreeMem(a6)
2$:	dbra	d2,1$
	movem.l	(a7)+,d2/d3/a2/a6	
	rts

******* graphics.library/AllocBitMap ******************************************
*
*   NAME
*	AllocBitMap -- Allocate a bitmap and attach bitplanes to it. (V39)
*
*
*   SYNOPSIS
*	bitmap=AllocBitMap(sizex,sizey,depth, flags, friend_bitmap)
*	                   d0    d1    d2     d3       a0
*
*	struct BitMap *AllocBitMap(ULONG,ULONG,ULONG,ULONG, struct BitMap *);
*
*   FUNCTION
*	Allocates and initializes a bitmap structure. Allocates and initializes
*	bitplane data, and sets the bitmap's planes to point to it.
*
*   INPUTS
*	sizex = the width (in pixels) desired for the bitmap data.
*
*	sizey = the height (in pixels) desired.
*
*	depth = the number of bitplanes deep for the allocation.
*		Pixels with AT LEAST this many bits will be allocated.
*
*	flags = BMF_CLEAR to specify that the allocated raster should be
*	        filled with color 0.
*
*	        BMF_DISPLAYABLE to specify that this bitmap data should
*	        be allocated in such a manner that it can be displayed.
*	        Displayable data has more severe alignment restrictions
*	        than non-displayable data in some systems. 
*
*	        BMF_INTERLEAVED tells graphics that you would like your
*	        bitmap to be allocated with one large chunk of display
*	        memory for all bitplanes. This minimizes color flashing
*	        on deep displays. If there is not enough contiguous RAM
*		for an interleaved bitmap, graphics.library will fall
*		back to a non-interleaved one.
*
*	        BMF_MINPLANES causes graphics to only allocate enough space
*	        in the bitmap structure for "depth" plane pointers. This
*		is for system use and should not be used by applications use
*		as it is inefficient, and may waste memory.
*
*	friend_bitmap = pointer to another bitmap, or NULL. If this pointer
*	        is passed, then the bitmap data will be allocated in
*	        the most efficient form for blitting to friend_bitmap.
*
*   BUGS
*
*   NOTES
*	When allocating using a friend bitmap, it is not safe to assume
*	anything about the structure of the bitmap data if that friend
*	BitMap might not be a standard amiga bitmap (for instance, if
*	the workbench is running on a non-amiga display device, its
*	Screen->RastPort->BitMap won't be in standard amiga format.
*	The only safe operations to perform on a non-standard BitMap are:
*
*	        - blitting it to another bitmap, which must be either a standard
*	          Amiga bitmap, or a friend of this bitmap.
*
*	        - blitting from this bitmap to a friend bitmap or to a standard
*	          Amiga bitmap.
*
*	        - attaching it to a rastport and making rendering calls. 
*
*	Good arguments to pass for the friend_bitmap are your window's
*	RPort->BitMap, and your screen's RastPort->BitMap.
*	Do NOT pass &(screenptr->BitMap)!
*
*	BitMaps not allocated with BMF_DISPLAYABLE may not be used as
*	Intuition Custom BitMaps or as RasInfo->BitMaps.  They may be blitted
*	to a BMF_DISPLAYABLE BitMap, using one of the BltBitMap() family of
*	functions.
*
*   SEE ALSO
*	FreeBitMap()
*
********************************************************************************
_AllocBitMap:
	movem.l	d3/d4,-(a7)
	cmp.l	#256,d3
	bhs.s	abm_failure
	movem.l	d0/d1/a6,-(a7)
	cmp	#0,a0		; friend_bitmap=0?
	beq.s	abm_1
	cmp.b	bm_Depth(a0),d2
	bne.s	abm_1
	cmp.w	#UNLIKELY_WORD,bm_Pad(a0)
	bne.s	abm_1
	bset	#BMB_INTERLEAVED,d3
abm_1:
	move.l	gb_ExecBase(a6),a6
	moveq	#bm_Planes,d0
	move	d2,d1
	btst	#BMB_MINPLANES,d3
	bne.s	2$
	moveq	#bm_SIZEOF,d0
	subq	#8,d1
	ble.s	11$
2$:	add	d1,d1
	add	d1,d1
	add	d1,d0
11$	move.l	#MEMF_CLEAR,d1
	jsr	_LVOAllocVec(a6)
	move.l	d0,a0
	tst.l	d0
	movem.l	(a7)+,d0/d1/a6
	beq.s	abm_failure
	move.l	a0,-(a7)
	bsr	_AllocBitMapData
	tst.l	d0
	bne.s	abm_failure_1
	move.l	(a7)+,d0
	movem.l	(a7)+,d3/d4
	rts
abm_failure_1:
	move.l	(a7)+,a1
	move.l	a6,-(a7)
	move.l	gb_ExecBase(a6),a6
	jsr	_LVOFreeVec(a6)
	move.l	(a7)+,a6
abm_failure:
	moveq	#0,d0
	movem.l	(a7)+,d3/d4
	rts
		
******* graphics.library/FreeBitMap ****************************************
*
*   NAME
*	FreeBitMap -- free a bitmap created by AllocBitMap (V39)
*
*   SYNOPSIS
*	FreeBitMap(bm)
*	           a0
*
*	VOID FreeBitMap(struct BitMap *)
*
*   FUNCTION
*	Frees bitmap and all associated bitplanes
*
*   INPUTS
*	bm  =  A pointer to a BitMap structure. Passing a NULL-pointer
*	       (meaning "do nothing") is OK.
*
*   BUGS
*
*   NOTES
*	Be careful to insure that any rendering done to the bitmap has
*	completed (by calling WaitBlit()) before you call this function.
*
*   SEE ALSO
*	AllocBitMap()
*
*********************************************************************************
_FreeBitMap:
	move.l	a0,-(a7)
	beq.s	no_bm
	bsr	_FreeBitMapData
	move.l	(a7),a1
	move.l	a6,(a7)
	move.l	gb_ExecBase(a6),a6
1$:	jsr	_LVOFreeVec(a6)
	move.l	(a7)+,a6
	rts
no_bm:	addq.l	#4,a7
	rts
@


39.27
log
@Allocates the BitMap structure MEMF_CLEAR
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.26 92/11/24 10:40:58 chrisg Exp Locker: spence $
a161 1
	clr.w	bm_Pad(a0)
@


39.26
log
@autodoc.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.25 92/09/24 13:32:50 chrisg Exp Locker: chrisg $
d379 1
a379 1
11$	moveq	#0,d1
@


39.25
log
@autodoc
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.24 92/09/17 15:10:19 spence Exp Locker: chrisg $
d311 3
a313 1
*	        on deep displays.
@


39.24
log
@Clean up the autodocs
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.23 92/09/03 15:35:44 spence Exp Locker: spence $
d58 1
a58 1
*	                        Chip ram.
d306 1
a306 1
*	        than non-displayable data in some systems.
d314 3
a316 1
*	        in the bitmap structure for "depth" plane pointers.
d326 6
a331 2
*	anything about the structure of the bitmap data. The only safe
*	operations to perform on it are:
a339 2
*	It is also safe	to examine the Depth field of the bitmap to determine
*	how deep of a bitmap must be allocated to hold a copy of this one.
a342 4
*
*	Under RTG, this structure may not be valid on all devices.
*	When finished with the bitmap, you should call	FreeBitMap()
*	to dispose of it.
@


39.23
log
@Autodoc spelling corrections
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.22 92/07/01 10:17:12 chrisg Exp Locker: spence $
d27 1
a27 1
*       GetBitMapAttr -- Returns information about a bitmap (V39)
d31 1
a31 1
*       value=GetBitMapAttr(bitmap,attribute_number);
d42 1
a42 1
*       bm  =  A pointer to a BitMap structure.
d45 1
a45 1
*			   of the bitmap should be returned:
d47 12
a58 12
*			BMA_HEIGHT returns the height in pixels
*			BMA_WIDTH  returns the width in pixels.
*			BMA_DEPTH  returns the depth. This is the number of
*				bits which are required to store the information
*				for one pixel in the bitmap.
*			BMA_FLAGS  returns a longword bitfield describing various
*				attributes which the bitmap may have.
*				currently defined flags are BMF_DISPLAYABLE,
*				BMF_INTERLEAVED (see AllocBitMap). The flag
*				BMF_STANDARD returns will be set if the
*				bitmap is represented as planar data in Amiga
*				Chip ram.
d61 1
a61 1
*		
d74 1
a74 1
*	AllocBitMap() 
d276 1
a276 1
******* graphics.library/AllocBitMap ****************************************
d279 1
a279 1
*       AllocBitMap -- Allocate a bitmap and attach bitplanes to it. (V39)
d284 1
a284 1
*		           d0    d1    d2     d3       a0
d301 1
a301 1
*		filled with color 0.
d303 9
a311 9
*		BMF_DISPLAYABLE to specify that this bitmap data should
*		be allocated in such a manner that it can be displayed.
*		Displayable data has more severe alignment restrictions
*		than non-displayable data in some systems.
*
*		BMF_INTERLEAVED tells graphics that you would like your
*		bitmap to be allocated with one large chunk of display
*		memory for all bitplanes. This minimizes color flashing
*		on deep displays.
d313 2
a314 2
*		BMF_MINPLANES causes graphics to only allocate enough space
*		in the bitmap structure for "depth" plane pointers.
d317 2
a318 2
*		is passed, then the bitmap data will be allocated in
*		the most efficient form for blitting to friend_bitmap.
d324 4
a327 4
*	anything about the structure of the bitmap data. The only safe operations
*	to perform on it are:
*		- blitting it to another bitmap, which must be either a standard
*		  Amiga bitmap, or a friend of this bitmap.
d329 1
a329 1
*		- blitting from this bitmap to a friend bitmap or to a standard
d332 7
a338 1
*		- attaching it to a rastport and making rendering calls. 
a339 4
*	It is also safe	to examine the Depth field of the bitmap to determine how
*	deep of a bitmap must be allocated to hold a copy of this one.
*	Good arguments to pass for the friend_bitmap are your window's RPort->BitMap,
*	and your screen's RastPort->BitMap. Do NOT pass &(screenptr->BitMap)!
d341 1
a341 1
*       When finished with the bitmap, you should call	FreeBitMap()
d344 5
d352 1
a352 1
*********************************************************************************
d404 1
a404 1
*       FreeBitMap -- free a bitmap created by AllocBitMap (V39)
d407 1
a407 1
*       FreeBitMap(bm)
d416 2
a417 2
*       bm  =  A pointer to a BitMap structure. Passing a NULL-pointer
*		(meaning "do nothing") is OK.
@


39.22
log
@ warning about waitblit.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.21 92/06/19 13:50:28 chrisg Exp Locker: chrisg $
d316 1
a316 1
**	friend_bitmap = pointer to another bitmap, or NULL. If this pointer
d327 1
a327 1
*		  amiga bitmap, or a friend of this bitmap.
d330 1
a330 1
*		   amiga bitmap.
@


39.21
log
@fixe dfailure path.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.20 92/06/18 15:33:08 chrisg Exp Locker: chrisg $
d415 2
@


39.20
log
@autodoc.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.19 92/06/09 08:40:23 chrisg Exp Locker: chrisg $
d373 1
a374 1
	tst.l	d0
@


39.19
log
@uses memtype instead of boardmemtype.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.18 92/05/05 11:35:39 chrisg Exp Locker: chrisg $
d409 2
a410 1
*       bm  =  A pointer to a BitMap structure.
@


39.18
log
@fixed GBMAttr(flags), and depth>256.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.17 92/04/27 12:22:46 chrisg Exp Locker: chrisg $
d120 1
a120 1
	move.b	gb_BoardMemType(a6),d2
d169 1
a169 1
	move.b	gb_BoardMemType(a6),d3
@


39.17
log
@autodoc.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.16 92/04/07 14:54:13 spence Exp Locker: chrisg $
d115 1
a115 1
	bne.s	unknown_attr
d348 2
@


39.16
log
@Uses gb_BoardMemType instead of gb_MemType.
Removed the alignment table. Now uses gb_bwshifts instead, in case we
ever get an 8x machine.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.15 92/03/24 16:13:39 chrisg Exp $
d69 3
@


39.15
log
@made use allocvec.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.14 92/03/19 15:58:14 chrisg Exp Locker: chrisg $
a16 1
	xdef	alignment_table
a113 4
	moveq	#0,d1
	move.b	gb_MemType(a6),d1
	move.b	alignment_table(pc,d1.w),d1
	lsr.w	#3,d1
d115 7
a155 2
alignment_table:
	dc.b	15,31,31,63
d161 1
a161 1
	moveq	#0,d4
d164 8
a171 2
	move.b	gb_MemType(a6),d4
1$:	move.b	alignment_table(pc,d4.w),d4
@


39.14
log
@ Now checks if pl2=pl1 when determining interleaved status.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.13 92/03/03 13:28:49 chrisg Exp Locker: chrisg $
d18 1
a18 1
	xref	_LVOAllocMem,_LVOFreeMem
d360 1
a360 2
	move.l	d0,d4
	jsr	_LVOAllocMem(a6)
a364 1
	move.b	d4,bm_Flags(a0)
d376 1
a376 2
	move.l	d4,d0
	jsr	_LVOFreeMem(a6)
d415 1
a415 3
	moveq	#0,d0
	move.b	bm_Flags(a1),d0
1$:	jsr	_LVOFreeMem(a6)
@


39.13
log
@ autodoc.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.12 92/02/28 13:59:48 chrisg Exp Locker: chrisg $
d93 2
@


39.12
log
@run q dh0:text/rel5
killed allocbitmapdata and freebitmap data
fixed bug where friend-allocated bitmaps werne't interleaved.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.11 92/02/26 11:33:33 chrisg Exp Locker: chrisg $
d28 1
a28 1
*       GetBitMapAttr -- Returns information about a bitmap
d268 1
a268 1
*       AllocBitMap -- Allocate a bitmap and attach bitplanes to it.
d387 1
a387 1
*       FreeBitMap -- free a bitmap created by AllocBitMap
@


39.11
log
@new recog scheme and cleanup.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.10 92/02/24 14:08:18 chrisg Exp Locker: chrisg $
d137 14
a150 56
******* graphics.library/AllocBitMapData ****************************************
*
*   NAME
*       AllocBitMapData -- Initialize a bitmap and attach bitplanes to it.
*
*
*   SYNOPSIS
*       error=AllocBitMapData(bm,sizex,sizey,depth,flags)
*		              a0  d0    d1    d2    d3
*
*	ULONG AllocBitMapData(struct BitMap *,ULONG,ULONG,ULONG,ULONG);
*
*   FUNCTION
*	Initializes a bitmap structure. Allocates and initializes
*	bitplane data, and sets the bitmap's planes to point to it.
*	This function is similar to a call to InitBitMap() followed
*	by multiple calls to AllocRaster().
*
*   INPUTS
*       bm  =  A pointer to a BitMap structure, which will be filled in.
*
*	sizex = the width (in pixels) desired for the bitmap data.
*
*	sizey = the height (in pixels) desired.
*
*	depth = the number of bitplanes deep for the allocation.
*
*	error=0 if success, or an error #. The only currently defined
*		error is out of memory.
*
*	flags = BMF_CLEAR to specify that the allocated raster should be
*		filled with color 0.
*
*		BMF_DISPLAYABLE to specify that this bitmap data should
*		be allocated in such a manner that it can be displayed.
*		Displayable data has more severe alignment restrictions
*		than non-displyable data.
*
*		BMF_INTERLEAVED tells graphics that you would like your
*		bitmap to be allocated with one large chunk of display
*		memory for all bitplanes. This minimizes color flashing
*		on deep displays.
*
*   BUGS
*
*   NOTES
*	This call is not recommended. For maximum upwards compatibility,
*	you should use the AllocBitMap() call.
*
*       When finished with the bitmap data, you should call
*	FreeBitMapData() to dispose of it.
*
*   SEE ALSO
*	FreeBitMapData() AllocBitMap() FreeBitMap()
*
*********************************************************************************
d226 1
a226 1
	bne.s	1$
d230 1
a230 1
1$:	subq	#1,d2
d244 1
a244 25
******* graphics.library/FreeBitMapData ****************************************
*
*   NAME
*       FreeBitMapData -- free the graphics memory associated with a bitmap.
*
*   SYNOPSIS
*       FreeBitMapData(bm)
*		       a0
*
*	VOID FreeBitMapData(struct BitMap *)
*
*   FUNCTION
*	Frees all the bitplanes associated with a bitmap.
*
*   INPUTS
*       bm  =  A pointer to a BitMap structure.
*
*   BUGS
*
*   NOTES
*
*   SEE ALSO
*	AllocBitMapData() AllocBitMap() FreeBitMap()
*
*********************************************************************************
d332 1
a332 1
*	FreeBitMap() AllocBitMapData() FreeBitMapData()
d336 2
a337 2
	move.l	d4,-(a7)
	movem.l	d0/d1/d3/a6,-(a7)
d339 1
a339 1
	beq.s	1$
d341 1
a341 1
	bne.s	1$
d343 1
a343 1
	bne.s	1$
d345 2
a346 1
1$:	move.l	gb_ExecBase(a6),a6
d361 1
a361 1
	movem.l	(a7)+,d0/d1/d3/a6
d370 1
a370 1
	move.l	(a7)+,d4
d381 1
a381 1
	move.l	(a7)+,d4
d406 1
a406 1
*	FreeBitMapData() AllocBitMap() FreeBitMap()
@


39.10
log
@fixed byte<>word problem.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.9 92/02/20 13:45:11 chrisg Exp Locker: chrisg $
d87 1
a87 1
	cmp.b	#UNLIKELY_BYTE,bm_Flags(a0)
a198 1
	clr.b	bm_Flags(a0)
d278 1
a278 2
	move.b	#UNLIKELY_BYTE,bm_Flags(a3)
	move.w	a3,bm_Pad(a3)
d314 1
a314 1
	cmp.b	#UNLIKELY_BYTE,bm_Flags(a0)
a315 3
	move.w	a0,d3
	cmp.w	bm_Pad(a0),d3
	bne.s	not_interleaved
d402 2
d408 1
a408 1
	cmp.b	#UNLIKELY_BYTE,bm_Flags(a0)
d411 1
a411 2
1$:	movem.l	d0/d1/a6,-(a7)
	move.l	gb_ExecBase(a6),a6
d419 2
a420 1
2$:	add	d1,d0
d423 1
d426 1
a426 1
	movem.l	(a7)+,d0/d1/a6
d429 1
d435 1
d441 1
a441 1
	moveq	#bm_SIZEOF,d0
d446 1
d481 2
a482 7
	moveq	#bm_SIZEOF,d0
	moveq	#0,d1
	move.b	bm_Depth(a1),d1
	subq	#8,d1
	bmi.s	1$
	add.l	d1,d0
	add.l	d1,d0
@


39.9
log
@added BMx_MINPLANES support.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.8 92/02/14 15:57:23 chrisg Exp Locker: chrisg $
d87 1
a87 1
	cmp.w	#UNLIKELY_BYTE,bm_Flags(a0)
@


39.8
log
@ added getbitmapattr function and fixed bugs.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.7 91/12/02 10:54:56 chrisg Exp Locker: chrisg $
d373 4
a376 1
*	friend_bitmap = pointer to another bitmap, or NULL. If this pointer
d416 4
a420 1
	move	d2,d1
d423 1
a423 1
	add	d1,d0
@


39.7
log
@  took out default interleaved bitmaps. I'ts in Intuition's corner now.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.6 91/11/21 10:37:30 chrisg Exp Locker: chrisg $
d15 2
d23 113
d200 1
a200 1
	clr.b	bm_Pad(a0)
d250 1
a250 1
	bsr	_FreeBitMapData
d255 1
d268 6
a273 1
	subq	#1,d2
d281 1
d414 6
a419 1
	moveq	#0,d1
d469 1
d475 7
a481 1
	jsr	_LVOFreeMem(a6)
d483 2
@


39.6
log
@  made initbitmap data not do interleaved blits if the blitter
size registers could overflow.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.5 91/11/18 11:41:03 chrisg Exp Locker: chrisg $
d60 5
a107 2
	btst	#BMB_DISPLAYABLE,d3		; temp!!
	bne.s	do_interleaved
d245 5
@


39.5
log
@Made set the Pad field to the low word of the bitmap address.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.4 91/11/15 12:09:05 chrisg Exp Locker: chrisg $
d74 3
d95 6
a134 2
alignment_table:
	dc.b	15,31,31,63
@


39.4
log
@ i was stupid.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.3 91/11/15 12:04:15 chrisg Exp Locker: chrisg $
d149 1
a149 1
	move.w	#UNLIKELY_WORD,bm_Pad(a3)
d186 2
a187 1
	cmp.w	#UNLIKELY_WORD,bm_Pad(a0)
a271 2
	bne.s	1$
	cmp.w	#UNLIKELY_WORD,bm_Pad(a0)
@


39.3
log
@ added use of INTERLEAVED flag
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.2 91/11/15 10:59:17 chrisg Exp Locker: chrisg $
d272 1
a272 1
	cmp.b	#UNLIKELY_WORD,bm_Pad(a0)
@


39.2
log
@ added support for interleavd bitmaps. right now, any bitmap that
is BMF_DISPLAYABLE will be created interleaved. I need to change it to
(a) use BMF_INTERLEAVED and
(b) habe INTERLEAVED implied when using a friend bitmap.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.1 91/08/27 16:21:17 chrisg Exp Locker: chrisg $
d92 3
a94 1
	btst	#BMB_DISPLAYABLE,d3
d268 7
a274 6
;	tst.b	bm_Flags(a0)
;	bne.s	abm_failure
;	tst.b	bm_Pad(a0)
;	bne.s	abm_failure
	tst.w	bm_BytesPerRow(a0)
	bmi.s	abm_failure
@


39.1
log
@ fixed BMB_CLEAR
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 39.0 91/08/21 17:28:32 chrisg Exp Locker: chrisg $
d10 1
d90 5
d127 26
a179 1
	move.l	gb_ExecBase(a6),a6
d182 8
d266 4
a269 4
	tst.b	bm_Flags(a0)
	bne.s	abm_failure
	tst.b	bm_Pad(a0)
	bne.s	abm_failure
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v 38.1 91/08/21 16:21:57 chrisg Exp Locker: chrisg $
d96 1
a96 1
	btst	#BMF_CLEAR,d3
@


38.1
log
@fixed RCS header
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v $
@


38.0
log
@  initial revision. coded and tested lightly.
@
text
@d3 1
a3 1
*	$Id: allocbitmap.asm,v
@
