head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.8 V36_208:1.8 V36_207:1.8 V36_205:1.8 V36_203:1.8 V36_202:1.8 V36_201:1.8 V36_200:1.8 V36_199:1.8 V36_198:1.8 V36_196:1.8 V36_195:1.8 V36_194:1.8 V36_193:1.8 V36_192:1.8 V36_191:1.8 V36_190:1.8 V36_189:1.8 V36_188:1.8 V36_187:1.8 V36_186:1.8 V36_185:1.8 V36_184:1.8 V36_183:1.8 V36_182:1.8 V36_181:1.8 V36_180:1.8;
locks    ; strict;
comment  @@;


39.2
date     92.09.03.15.37.37;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.15.07.52.04;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.28.20;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.04.45;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.45;  author spence;  state Exp;
branches ;
next     1.8;

1.8
date     90.08.25.10.38.34;  author bart;  state Exp;
branches ;
next     1.7;

1.7
date     90.08.24.11.29.05;  author bart;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.27.16.22.02;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.08.14.20.13;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     89.07.24.10.49.51;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     89.05.02.13.24.08;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.05.02.13.21.45;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.10;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@Autodoc spelling corrections
@
text
@*******************************************************************************
*
*	$Id: waitblit.asm,v 39.1 92/05/15 07:52:04 chrisg Exp Locker: spence $
*
*******************************************************************************

	xref	_dmaconr

	section	graphics
	xdef    _WaitBlit
	xdef	waitblitdone,_waitblitdone
******* graphics.library/WaitBlit *********************************************
*
*   NAME
*       WaitBlit -- Wait for the blitter to be finished before proceeding
*                   with anything else.
*
*   SYNOPSIS
*       WaitBlit()
*
*	void WaitBlit( void );
*
*   FUNCTION
*	WaitBlit returns when the blitter is idle. This function should
*	normally only be used when dealing with the blitter in a
*	synchronous manner, such as when using OwnBlitter and DisownBlitter.
*	WaitBlit does not wait for all blits queued up using QBlit or
*	QBSBlit. You should call WaitBlit if you are just about to modify or
*	free some memory that the blitter may be using.
*
*   INPUTS
*       none
*
*   RESULT
*       Your program waits until the blitter is finished.
*	This routine does not use any the CPU registers.
*	do/d1/a0/a1 are preserved by this routine.
*	It may change the condition codes though.
*
*   BUGS
*	When examining bits with the CPU right after a blit, or when freeing
*	temporary memory used by the blitter, a WaitBlit() may be required.
*
*	Note that many graphics calls fire up the blitter, and let it run.
*	The CPU does not need to wait for the blitter to finish before 
*	returning.
*
*	Because of a bug in Agnus (prior to all revisions of fat Agnus)
* 	this code may return too soon when the blitter has, in fact, not 
*	started the blit yet, even though BltSize has been written.  
*
*	This most often occurs in a heavily loaded system with extended memory,
*	HIRES, and 4 bitplanes.
*
*	WaitBlit currently tries to avoid this Agnus problem by testing
*	the BUSY bit multiple times to make sure the blitter has started.
*	If the blitter is BUSY at first check, this function busy waits.
*
*	This initial hardware bug was fixed as of the first "Fat Agnus" chip, 
*	as used in all A500 and A2000 computers.
*
*	Because of a different bug in Agnus (currently all revisions thru ECS)
* 	this code may return too soon when the blitter has, in fact, not 
*	stopped the blit yet, even though blitter busy has been cleared.  
*
*	This most often occurs in a heavily loaded system with extended memory,
*	in PRODUCTIVITY mode, and 2 bitplanes.
*
*	WaitBlit currently tries to avoid this Agnus problem by testing
*	the BUSY bit multiple times to make sure the blitter has really
*	written its final word of destination data.
*
*   SEE ALSO
*	OwnBlitter() DisownBlitter() hardware/blit.h
*
******************************************************************************

_WaitBlit:
waitblitdone:
_waitblitdone:
*   current routine calls a C subroutine to do the work
*   must test twice incase blitter has not actually started
    tst.b	_dmaconr			* only needed if BAD Agnus
    btst 	#14-8,_dmaconr
	bne.s	not_done
    rts
not_done:
	tst.b	$bfe001				; fake access to ciaa PRA register so as to not slow down blitter
	tst.b	$bfe001				; on fast machines.
    btst #14-8,_dmaconr
	bne.s	not_done
    tst.b	_dmaconr			* only needed if BAD Agnus
    rts

    end
@


39.1
log
@changed NOPs to CIA-A accesses.
@
text
@d3 1
a3 1
*	$Id: waitblit.asm,v 39.0 91/08/21 17:28:20 chrisg Exp Locker: chrisg $
d41 2
a42 2
*	When examining bits with the CPU right after a blit, or when freeeing
*	temorary memory used by the blitter, a WaitBlit() may be required.
d48 1
a48 1
*	Because of a bug in agnus (prior to all revisions of fat agnus)
d52 1
a52 1
*	This most often occurs in a heavily loaded systen with extended memory,
d55 1
a55 1
*	WaitBlit currently tries to avoid this agnus problem by testing
d62 1
a62 1
*	Because of a different bug in agnus (currently all revisions thru ECS)
d66 1
a66 1
*	This most often occurs in a heavily loaded systen with extended memory,
d69 1
a69 1
*	WaitBlit currently tries to avoid this agnus problem by testing
d71 1
a71 1
*	written its final word of desination data.
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: WaitBlit.asm,v 37.1 91/02/12 16:04:45 chrisg Exp Locker: chrisg $
d85 7
a91 9
    if =
        rts
    endif
    repeat
        nop     * waste some time
        nop
        btst #14-8,_dmaconr
    until =
*   must test again incase blitter has not actually stopped
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: WaitBlit.asm,v 37.0 91/01/07 15:26:45 spence Exp Locker: chrisg $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: WaitBlit.asm,v 1.8 90/08/25 10:38:34 bart Exp Locker: spence $
d10 1
a10 1
    xdef    _WaitBlit
d21 2
d28 2
a29 2
*	QBSBlit. You should call WaitBlit if you are just about to free
*	some memory that you have used with the blitter.
d74 1
a74 1
*	OwnBlitter DisownBlitter hardware/blit.h
@


1.8
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: $
@


1.7
log
@id
@
text
@d3 1
a3 1
*	$Header: /usr.MC68010/ghostwheel/commodore/amiga/V36/src/kickstart/graphics/a/RCS/WaitBlit.asm,v 1.6 90/03/27 16:22:02 bart Exp Locker: bart $
@


1.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 1.5 90/03/08 14:20:13 bart Exp $
@


1.5
log
@minor optimisation on test of dmaconr
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 1.4 89/07/24 10:49:51 bart Exp $
@


1.4
log
@must test again incase blitter has not actually stopped
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 1.3 89/05/02 13:24:08 bart Exp $
d80 3
a82 3
    btst #14-8,_dmaconr
*   must test again incase blitter has not actually started
    btst #14-8,_dmaconr		* only needed if BAD Agnus
d92 1
a92 1
    btst #14-8,_dmaconr		* only needed if BAD Agnus
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 1.2 89/05/02 13:21:45 bart Exp $
d39 7
d53 1
a53 1
*	WaitBlit currently tries to avoid the agnus problem by testing
d57 2
a58 2
*	The hardware bug was fixed as of the first "Fat Agnus" chip, as used
*	in all A500 and A2000 computers.
d60 3
a62 3
*	Note that many graphics calls fire up the blitter, and let it run.
*	The CPU does not need to wait for the blitter to finish before 
*	returning.
d64 2
a65 2
*	When examining bits with the CPU right after a blit, or when freeeing
*	temorary memory used by the blitter, a WaitBlit() may be required.
d67 4
d79 1
a79 1
*               current routine calls a C subroutine to do the work
d81 1
a81 1
*	must test again incase blitter has not actually started
d91 2
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 1.1 88/05/01 15:38:10 dale Exp $
d39 1
a39 1
*	Because of a bug in agnus (fixed with all revisions of fat agnus)
d42 1
d49 3
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: WaitBlit.asm,v 33.1 86/10/09 23:46:13 dale Exp $
d39 6
a44 4
*	Because of a bug in agnus. This code may return too soon when
*	the blitter has, in fact, not started the blit yet, even though
*	BltSize has been written.  This most often occurs in a heavily
*	loaded systen with extended memory, HIRES, and 4 bitplanes.
d47 8
a54 1
*	Also this pig busy waits. (sigh)
@
