head     38.5;
branch   ;
access   ;
symbols  rel39_24:38.5 rel39_18:38.5 rel39_97:38.5 rel39_90:38.4 rel39_89:38.4 rel39_82:38.4 rel39_76:38.4 rel39_71:38.3 rel39_65:38.2 rel39_64:38.2 rel39_61:38.2 rel39_60:38.2 rel39_55:38.2 rel39_52:38.2 rel39_47:38.2 rel39_39:38.1 rel39_38:38.1 rel39_37:38.1 rel39_35:38.1 rel39_34:38.1 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


38.5
date     92.10.22.08.52.02;  author chrisg;  state Exp;
branches ;
next     38.4;

38.4
date     92.07.09.13.30.44;  author chrisg;  state Exp;
branches ;
next     38.3;

38.3
date     92.07.01.10.36.21;  author chrisg;  state Exp;
branches ;
next     38.2;

38.2
date     92.03.19.16.05.29;  author chrisg;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.11.11.42.07;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.03.10.47.40;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.14.55.08;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.24;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.24.11.27.38;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.16.26.07;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.33;  author dale;  state Exp;
branches ;
next     ;


desc
@@


38.5
log
@loading 0 colors now does nothing.
@
text
@*******************************************************************************
*
*	$Id: loadrgb4.asm,v 38.4 92/07/09 13:30:44 chrisg Exp Locker: chrisg $
*
*******************************************************************************


	section	graphics
	include	'/view.i'
	include	'hardware/custom.i'

	xref	_custom
	xref	_pokecolors,_pokevp
	xdef	_LoadRGB4

******* graphics.library/LoadRGB4 ********************************************
*
*   NAME
*	LoadRGB4 -- Load RGB color values from table.
*
*   SYNOPSIS
*	LoadRGB4( vp, colors , count )
*                 a0  	a1     d0:16
*
*	void LoadRGB4( struct ViewPort *, UWORD *, WORD);
*
*   FUNCTION
*   	load the count words of the colormap from table starting at
*	entry 0.
*
*   INPUTS
*	vp - pointer to ViewPort, whose colors you wish to change
*	colors - pointer to table of RGB values set up as an array
*	         of USHORTS
*		 	background--  0x0RGB
*			color1	  --  0x0RGB
*			color2    --  0x0RGB
*			 etc.         UWORD per value.
*		The colors are interpreted as 15 = maximum intensity.
*		                              0 = minimum intensity.
*	count	= number of UWORDs in the table to load into the
*	  colormap starting at color 0(background) and proceeding
*	  to the next higher color number
*
*   RESULTS
*	The ViewPort should have a pointer to a valid ColorMap to store
*	the colors in.
*	Updates the hardware copperlist to reflect the new colors.
*	Updates the intermediate copperlist with the new colors.
*
*   BUGS
*
*	NOTE: Under V36 and up, it is not safe to call this function
*	from an interrupt, due to semaphore protection of graphics
*	copper lists.
*
*   SEE ALSO
*	SetRGB4() GetRGB4() GetColorMap() graphics/view.h
*
*********************************************************************
_LoadRGB4:
	tst.w	d0
	beq.s	5$
	swap	d0
	clr.w	d0
	swap	d0
	cmp.w	#0,a0				; stupid Eye of the beholder jerks
	bne.s	1$
4$:	move.l	#_custom+color,a0
	bra.s	2$
3$:	move.w	(a1)+,(a0)+
2$:	dbra	d0,3$
5$:	rts
1$:	tst.l	vp_ColorMap(a0)
	beq.s	no_cm_kludge
	movem.l	d2/a2/a3/a4,-(a7)
	move.l	a0,a2
	move.l	vp_ColorMap(a2),a0
	cmp.w	cm_Count(a0),d0
	bls.s	no_too_many
	move.w	cm_Count(a0),d0
no_too_many:
	move.l	cm_ColorTable(a0),a3
	move.l	a3,a4
	tst.b	cm_Type(a0)
	beq.s	no_low
	tst.l	cm_LowColorBits(a0)
	beq.s	no_low
	move.l	cm_LowColorBits(a0),a4
no_low:	subq	#1,d0
1$:	move.w	(a1)+,d1
	and.w	#$7fff,d1
	move.w	(a3),d2
	and.w	#$8000,d2
	or.w	d1,d2
	move.w	d2,(a3)+
	move.w	(a4),d2
	and.w	#$8000,d2
	or.w	d1,d2
	move.w	d2,(a4)+
	dbra	d0,1$
	bsr	_pokecolors
	movem.l	(a7)+,d2/a2/a3/a4
no_loadrgb4:
	rts

no_cm_kludge:
; load directly to copper lists - no colormap to store in!
	movem.l	a2/d2/d6/d7,-(a7)
	cmp.w	#32,d0
	bls.s	no_limit_regnum
	moveq	#32,d0
no_limit_regnum:
	move.l	a1,a2
	move	d0,d7
	move.w	#color,d6
	move.w	#$fff,d2	; mask (leave genlock bits alone)
no_cm_lp:
	move.w	(a2)+,d1	; rgb word
	move.w	d6,d0		; reg index
	bsr	_pokevp			; pokevp(a0=vp,d0=regnum, d1=value, d2=mask)
	add.w	#2,d6		; next color reg
no_cm_kludge_end:
	dbra	d7,no_cm_lp
	movem.l	(a7)+,a2/d2/d6/d7
	rts

	end
@


38.4
log
@added no-cm case.
@
text
@d3 1
a3 1
*	$Id: loadrgb4.asm,v 38.3 92/07/01 10:36:21 chrisg Exp Locker: chrisg $
d62 2
d73 1
a73 1
	rts
@


38.3
log
@zero upper word of count.
@
text
@d3 1
a3 1
*	$Id: loadrgb4.asm,v 38.2 92/03/19 16:05:29 chrisg Exp Locker: chrisg $
d13 1
a13 1
	xref	_pokecolors
d73 1
a73 1
	beq.s	4$
d103 21
@


38.2
log
@ made loadrgb4 work for a null viewport. fixes brain dead eye of the beholder
programmers.
@
text
@d3 1
a3 1
*	$Id: loadrgb4.asm,v 38.1 91/11/11 11:42:07 chrisg Exp Locker: chrisg $
d62 3
@


38.1
log
@ Made it preserve the genlock transparency bit.
@
text
@d3 1
a3 1
*	$Id: Loadrgb4.asm,v 38.0 91/07/03 10:47:40 chrisg Exp Locker: chrisg $
d10 1
d12 1
d62 9
a70 2
	tst.l	vp_ColorMap(a0)
	beq.s	no_loadrgb4
@


38.0
log
@killed c stub and made use pokecolors stuff.
@
text
@d3 1
a3 1
*	$Id: loadrgb4.asm,v 37.1 91/02/12 14:55:08 chrisg Exp Locker: chrisg $
d51 4
d62 1
a62 1
	movem.l	a2/a3/a4,-(a7)
d78 9
a86 2
	move.w	d1,(a3)+
	move.w	d1,(a4)+
d89 1
a89 1
	movem.l	(a7)+,a2/a3/a4
d92 1
a92 1
	
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: LoadRGB4.asm,v 37.0 91/01/07 15:25:24 spence Exp Locker: chrisg $
d9 5
a13 2
    xdef    _LoadRGB4
    xref    _loadrgb4
d56 26
a81 7
    move.l  d0,-(sp)    * cnt
    move.l  a1,-(sp)
    move.l  a0,-(sp)
    jsr     _loadrgb4
    lea     12(sp),sp
    rts

@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: LoadRGB4.asm,v 1.3 90/08/24 11:27:38 bart Exp Locker: spence $
d13 1
a13 1
*NAME
d16 1
a16 1
*SYNOPSIS
d20 1
a20 3
*	struct ViewPort *vp;
*	UWORD colors[];
*	SHORT count;
d22 2
a23 2
*FUNCTION
*   	load the count words of the colormapper from table starting at
d26 2
a27 2
*INPUTS
*	vp - pointer to ViewPort, whos colors you want to change
d29 7
a35 7
*			  of USHORTS
*				background--  0x0RGB
*				color1	  --  0x0RGB
*				color2    --  0x0RGB
*				 etc.         UWORD per value.
*			The colors are interpreted as 15 = maximum intensity.
*				   0 = minimum intensity.
d40 1
a40 1
*RESULTS
d43 2
a44 2
*	Update the hardware copperlist to reflect the new colors.
*	Update the intermediate copperlist with the new colors.
d46 1
a46 1
*BUGS
d48 2
a49 2
*SEE ALSO
*	SetRGB4 GetRGB4 GetColorMap graphics/view.h
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: LoadRGB4.asm,v 1.1 88/05/01 15:36:33 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: LoadRGB4.asm,v 33.0 86/05/17 15:08:09 bart Exp $
@
