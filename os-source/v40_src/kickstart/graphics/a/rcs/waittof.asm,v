head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.6 V37_29:37.6 V37_28:37.6 V37_27:37.6 V37_25:37.5 V37_24:37.3 V37_23:37.3 V37_22:37.2 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


39.2
date     92.09.03.15.37.51;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.12.20.15.42.21;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.28.27;  author chrisg;  state Exp;
branches ;
next     37.6;

37.6
date     91.04.16.10.53.02;  author bryce;  state Exp;
branches ;
next     37.5;

37.5
date     91.04.15.11.34.15;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.04.12.16.19.15;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.04.05.17.30.35;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.02.14.58.22;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.06.12;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.48;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.24.11.29.08;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.16.22.21;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.11;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@Autodoc spelling corrections
@
text
@*******************************************************************************
*
*	$Id: waittof.asm,v 39.1 91/12/20 15:42:21 chrisg Exp Locker: spence $
*
*******************************************************************************

    include 'exec/types.i'
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/interrupts.i'
    include 'exec/libraries.i'
    include 'exec/ables.i'
    include 'exec/execbase.i'

    section	graphics
    include 'graphics/gfxbase.i'
    include 'submacs.i'

    xdef    _WaitTOF
******* graphics.library/WaitTOF ***********************************************
*
*   NAME
*       WaitTOF -- Wait for the top of the next video frame.
*
*   SYNOPSIS
*       WaitTOF()
*
*	void WaitTOF( void );
*
*   FUNCTION
*       Wait  for vertical blank to occur and all vertical blank
*       interrupt routines to complete before returning to caller.
*
*   INPUTS
*       none
*
*   RESULT
*	Places this task on the TOF wait queue. When the vertical blank
*	interrupt comes around, the interrupt service routine will fire off
*	signals to all the tasks doing WaitTOF. The highest priority task
*	ready will get to run then.
*
*   BUGS
*
*   SEE ALSO
*	exec.library/Wait() exec.library/Signal()
*
******************************************************************************
* now downcoded from waittof() in waitbovp.c

TOF_SIGNAL equ 4		/* stolen SIGF_BLIT & SIGF_SINGLE */
	xref	_LVOFindTask
	xref	_LVOSetSignal
	xref	_LVOAddTail
	xref	_LVOWait
	xref	_LVORemove
	xref	_LVODisable
	xref	_LVOEnable
	xref	_intena

*	xref	_waittof
_WaitTOF:
*	jmp		_waittof
	movem.l	a5-a6,-(sp)
	sub.w	#LN_SIZE+2,sp	; build a <longword aligned> node on the stack
	lea	gb_TOF_WaitQ(a6),a5
	move.l	gb_ExecBase(a6),a6		; get execbase
	move.l	ThisTask(a6),LN_NAME(sp)	; cheat!! (It's ok -Bryce)
	move.b	#TOF_SIGNAL,LN_PRI(sp)		; now stores sigbit in LN_PRI!
	moveq	#0,d0
	move.b	d0,LN_TYPE(sp)
	moveq	#1<<TOF_SIGNAL,d1
	jsr	_LVOSetSignal(a6)		; Clear TOF signal bit
	move.l	a5,a0				; gb_TOF_WaitQ(GfxBase)
	move.l	sp,a1
	DISABLE
	ADDTAIL
	moveq	#1<<TOF_SIGNAL,d0
	jsr	_LVOWait(a6)
	move.l	sp,a1
	REMOVE
	ENABLE
	add.w	#LN_SIZE+2,sp
	movem.l	(sp)+,a5-a6
	rts

	end
@


39.1
log
@  Changed WaitTOF signalling scheme for double buffering.
@
text
@d3 1
a3 1
*	$Id: waittof.asm,v 39.0 91/08/21 17:28:27 chrisg Exp Locker: chrisg $
d39 1
a39 1
*	interupt comes around, the interrupt service routine will fire off
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.6 91/04/16 10:53:02 bryce Exp Locker: chrisg $
d69 1
@


37.6
log
@Correctly longword align the stack before diving into Wait() [this prevents
Exec from doing huge misaligned transfers under Disable()].  Take the
wimpy way out and use A5 as a temporary ;-).
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.6 91/04/16 01:46:24 bryce Exp Locker: bryce $
@


37.5
log
@ changed to use gb_ExecBase
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.4 91/04/12 16:19:15 chrisg Exp Locker: chrisg $
a48 1

d51 1
a51 1
TOF_SIGNAL equ 4		/* stolen BLITTERSIGNAL */
d65 1
a65 1
	sub.l	#LN_SIZE,sp			; build a node on the stack
d67 2
a68 2
	move.l	gb_ExecBase(a6),a6				; get exec base
	move.l	ThisTask(a6),LN_NAME(sp)		; cheat!!
d72 2
a73 2
	jsr	_LVOSetSignal(a6)
	move.l	a5,a0
d82 1
a82 1
	add.l	#LN_SIZE,sp
@


37.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.3 91/04/05 17:30:35 chrisg Exp Locker: chrisg $
d68 1
a68 1
	move.l	4,a6
@


37.3
log
@ reduced portion inside of DISABLE and optimized
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.2 91/04/02 14:58:22 spence Exp Locker: chrisg $
@


37.2
log
@downcoded waittof() - optimised for speed within DISABLE/ENABLE.
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.1 91/02/12 16:06:12 chrisg Exp Locker: spence $
d13 1
d15 1
a15 1
	section	graphics
d17 1
a17 1
	include 'submacs.i'
d65 1
a65 1
	movem.l	a4-a6,-(sp)
d67 1
a67 3
	move.l	sp,a5
	lea		gb_TOF_WaitQ(a6),a4
	sub.l	a1,a1
d69 1
a69 2
	jsr		_LVOFindTask(a6)
	move.l	d0,LN_NAME(a5)		; cheat!!
d71 1
a71 1
	move.b	d0,LN_TYPE(a5)
d73 3
a76 4
	jsr		_LVOSetSignal(a6)
	move.l	a4,a0
	move.l	a5,a1
*	jsr		_LVOAddTail(a6)
d79 2
a80 3
	jsr		_LVOWait(a6)
	move.l	a5,a1
*	jsr		_LVORemove(a6)
d84 1
a84 1
	movem.l	(sp)+,a4-a6
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 37.0 91/01/07 15:26:48 spence Exp Locker: chrisg $
d12 1
d16 2
d48 14
a61 1
	xref	_waittof
d63 27
a89 1
	jmp		_waittof
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: WaitTOF.asm,v 1.3 90/08/24 11:29:08 bart Exp Locker: spence $
d24 2
d34 2
a35 2
*	Place this task on the TOF wait queue. When vertical blank
*	interupt comes around the interrupt service routine fires off
d37 1
a37 1
*	ready gets to run then.
d42 1
a42 1
*	exec/Wait exec/Signal
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WaitTOF.asm,v 1.1 88/05/01 15:38:11 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: WaitTOF.asm,v 33.0 86/05/17 15:11:59 bart Exp $
@
