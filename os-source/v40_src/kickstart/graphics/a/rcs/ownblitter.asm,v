head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.1 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.12 V37_29:37.12 V37_28:37.12 V37_27:37.11 V37_25:37.9 V37_24:37.4 V37_23:37.3 V37_22:37.2 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


39.2
date     92.09.24.13.30.55;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.08.24.12.15.32;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.26.58;  author chrisg;  state Exp;
branches ;
next     37.13;

37.13
date     91.05.01.14.17.48;  author chrisg;  state Exp;
branches ;
next     37.12;

37.12
date     91.04.18.15.43.25;  author chrisg;  state Exp;
branches ;
next     37.11;

37.11
date     91.04.17.14.18.08;  author chrisg;  state Exp;
branches ;
next     37.10;

37.10
date     91.04.16.13.14.22;  author chrisg;  state Exp;
branches ;
next     37.9;

37.9
date     91.04.15.16.02.35;  author chrisg;  state Exp;
branches ;
next     37.8;

37.8
date     91.04.15.11.34.33;  author chrisg;  state Exp;
branches ;
next     37.7;

37.7
date     91.04.12.12.25.50;  author chrisg;  state Exp;
branches ;
next     37.6;

37.6
date     91.04.11.10.07.47;  author chrisg;  state Exp;
branches ;
next     37.5;

37.5
date     91.04.09.10.29.05;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.04.08.15.19.24;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.04.08.11.25.02;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.02.14.57.11;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.21.16;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.45;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.08.24.11.28.01;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.17.12.59;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.08.14.20.33;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.05.02.12.22.27;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.51;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@autodoc
@
text
@*******************************************************************************
*
*	$Id: OwnBlitter.asm,v 39.1 92/08/24 12:15:32 chrisg Exp Locker: chrisg $
*
*******************************************************************************

    include 'exec/types.i'
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/ports.i'
    include 'exec/interrupts.i'
    include 'exec/libraries.i'
	include	'exec/ables.i'
    include 'graphics/gfx.i'
    include 'graphics/gfxbase.i'

    include 'hardware/blit.i'
    include '/a/submacs.i'
    include 'hardware/intbits.i'
    include 'hardware/dmabits.i'
    include '/sane_names.i'

	section	graphics
    xref    _intena
    xref    _intreq
    xref    _dmaconr
******* graphics.library/OwnBlitter ********************************************
*
*   NAME
*       OwnBlitter -- get the blitter for private usage
*
*   SYNOPSIS
*       OwnBlitter()
*
*	void OwnBlitter( void );
*
*   FUNCTION
*	If blitter is available return immediately with the blitter
*	locked for your exclusive use. If the blitter is not available
*	put task to sleep. It will be awakened as soon as the blitter
*	is available. When the task first owns the blitter the blitter
*	may still be finishing up a blit for the previous owner. You
*	must do a WaitBlit before actually using the blitter registers.
*
*	Calls to OwnBlitter() do not nest. If a task that owns the
*	blitter calls OwnBlitter() again, a lockup will result. 
*	(Same situation if the task calls a system function
*	that tries to own the blitter).
*
*   INPUTS
*	NONE
*
*   RETURNS
*	NONE
*
*   SEE ALSO
*	DisownBlitter() WaitBlit()
***********************************************************

    xdef    _OwnBlitter
	xdef	OwnBlitmacroentry
    xref    _cownblitter

	xref	_LVOFindTask
	xref	_LVOSetSignal
	xref	_LVOSignal
	xref	_LVOAddTail
	xref	_LVOWait
	xref	_intena

BLITTER_SIGNAL equ 4

_OwnBlitter:
* enter with a6->GfxBase
    addq.w  #1,gb_BlitLock(a6)
    if =
		rts
    endif
OwnBlitmacroentry:
	movem.l d0/d1/a0/a1/a5-a6,-(sp)
*    jsr _cownblitter
	sub.w	#LN_SIZE+2,sp
	lea	gb_BlitWaitQ(a6),a5
	move.l	gb_ExecBase(a6),a6
	move.l	ThisTask(a6),LN_NAME(sp)
	moveq	#0,d0
	moveq	#1<<BLITTER_SIGNAL,d1
	jsr	_LVOSetSignal(a6)
	lea	(gb_Flags+1)-gb_BlitWaitQ(a5),a0
	moveq	#BLITMSG_FAULTn,d0
	move.l	sp,a1	; for ADDTAIL below
	DISABLE
	bclr.b	d0,(a0)	; test and clear
	bne.s	OBme1
	move.l	a5,a0
	ADDTAIL
	ENABLE
	moveq	#1<<BLITTER_SIGNAL,d0
	jsr	_LVOWait(a6)
	add.w	#LN_SIZE+2,sp
	movem.l (sp)+,d0/d1/a0/a1/a5-a6
	rts
OBme1:
	ENABLE
	add.w	#LN_SIZE+2,sp
	movem.l (sp)+,d0/d1/a0/a1/a5-a6
	rts

******* graphics.library/DisownBlitter **********************************
*
*   NAME
*       DisownBlitter -- return blitter to free state.
*
*
*   SYNOPSIS
*       DisownBlitter()
*
*	void DisownBlitter( void );
*
*   FUNCTION
*	Free blitter up for use by other blitter users.
*
*   INPUTS
*
*   RETURNS
*
*   SEE ALSO
*       OwnBlitter()
*
*
***********************************************************
* called like disownblitter(GB)
    xdef    _DisownBlitter
    xdef    _disownnodec
    xdef    DisownBlitmacroen   * used if already decremented
    xref    _cdisownblitter
_DisownBlitter:
	subq.w  #1,gb_BlitLock(a6)
_disownnodec:
	blt.s	rts1
DisownBlitmacroen:
	movem.l	d0/d1/a0/a1/a5/a6,-(sp)
	move.l	gb_ExecBase(a6),a5
	lea	gb_BlitWaitQ(a6),a0	* for REMHEAD below
	DISABLE	a5,NOFETCH
	tst.l	gb_blthd(a6)		* any blits queued?
	beq.s	no_qb1
enablit:
	tst.b   _dmaconr 		* bart - 03.08.90 - if bad agnus !!!
	btst    #DMAB_BLTDONE-8,_dmaconr
	bne.s	no_cause_int
	move.w  #BITSET+INTF_BLIT,_intreq
no_cause_int:
	move.w  #BITSET+INTF_BLIT,_intena
	or.w    #QBOWNER,gb_Flags(a6)
	ENABLE	a5,NOFETCH
	movem.l	(sp)+,d0/d1/a0/a1/a5/a6
rts1:	rts
no_qb1:
    MOVE.L  (A0),A1
    MOVE.L  (A1),D0
    BEQ.S   set_fault
    MOVE.L  D0,(A0)
    MOVE.L  LN_NAME(a1),a6
    MOVE.L  D0,A1
    MOVE.L  A0,LN_PRED(A1)
	move.l	a6,a1
	move.l	a5,a6
	move.l	#1<<BLITTER_SIGNAL,d0
	jsr	_LVOSignal(a6)
	ENABLE
	movem.l	(sp)+,d0/d1/a0/a1/a5/a6
	rts
set_fault:
	bset.b	#BLITMSG_FAULTn,gb_Flags+1(a6)
	ENABLE	a5,NOFETCH
	movem.l	(sp)+,d0/d1/a0/a1/a5/a6
	rts

	end
@


39.1
log
@reduce Disable time.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 39.0 91/08/21 17:26:58 chrisg Exp Locker: chrisg $
d112 1
a112 1
*       DisownBlitter - return blitter to free state.
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.13 91/05/01 14:17:48 chrisg Exp Locker: chrisg $
d93 1
a93 1
	btst.b	d0,(a0)
a103 1
	bclr.b	d0,(a0)
d160 7
a166 9
	tst.l	gb_bsblthd(a6)	* new code by Dale 11/4/85 any beam sync qblits?
	bne.s	enablit
	    MOVE.L  (A0),A1
	    MOVE.L  (A1),D0
	    BEQ.S   set_fault
	    MOVE.L  D0,(A0)
	    MOVE.L  LN_NAME(a1),a6
	    MOVE.L  D0,A1
	    MOVE.L  A0,LN_PRED(A1)
@


37.13
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.12 91/04/18 15:43:25 chrisg Exp Locker: chrisg $
@


37.12
log
@ optimized disownblitter by inlining REMHEAD.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.11 91/04/17 14:18:08 chrisg Exp $
d18 1
a18 1
    include '../a/submacs.i'
d21 1
a21 1
    include '../sane_names.i'
@


37.11
log
@  Slight optimization.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.10 91/04/16 13:14:22 chrisg Exp Locker: chrisg $
d163 8
a170 3
	REMHEAD			; a0=list a1=trashed d0=node
	tst.l	d0
	beq.s	set_fault
a171 2
	move.l	d0,a1
	move.l	LN_NAME(a1),a1
@


37.10
log
@  Took the Wait out of the Disable/Enable in OwnBlitter. Should be OK.
Downcoded cdisownblitter (why was it in C anyway?).
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.9 91/04/15 16:02:35 chrisg Exp Locker: chrisg $
d145 1
a162 1
	lea	gb_BlitWaitQ(a6),a0
@


37.9
log
@  Padded stack allocate to make it longword aligned
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.8 91/04/15 11:34:33 chrisg Exp Locker: chrisg $
d66 1
d82 1
a82 1
	sub.l	#LN_SIZE+2,sp
d91 1
a95 1
	move.l	sp,a1
d97 1
d100 1
a100 2
	ENABLE
	add.l	#LN_SIZE+2,sp
d106 1
a106 1
	add.l	#LN_SIZE+2,sp
d139 1
a139 1
    subq.w  #1,gb_BlitLock(a6)
d141 1
a141 1
    if >=
d143 5
a147 2
	disable_interrupts
	if gb_blthd(a6).l
d149 30
a178 21
		tst.b   _dmaconr 		* bart - 03.08.90 - if bad agnus !!!
		btst    #DMAB_BLTDONE-8,_dmaconr
	    if =
			move.w  #BITSET+INTF_BLIT,_intreq
	    endif
	    move.w  #BITSET+INTF_BLIT,_intena
	    or.w    #QBOWNER,gb_Flags(a6)
	else
		tst.l	gb_bsblthd(a6)	* new code by Dale 11/4/85
		bne		enablit
*		if gb_bsblthd(a6).l
*			bra enablit
*		else
			movem.l d0/d1/a0/a1,-(sp)
			jsr _cdisownblitter
			movem.l (sp)+,d0/d1/a0/a1
*		endif
	endif
	enable_interrupts
    endif
    rts
d180 1
a180 1
    end
@


37.8
log
@ changed to use gb_ExecBase
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.7 91/04/12 12:25:50 chrisg Exp Locker: chrisg $
d81 1
a81 1
	sub.l	#LN_SIZE,sp
d99 1
a99 1
	add.l	#LN_SIZE,sp
d105 1
a105 1
	add.l	#LN_SIZE,sp
@


37.7
log
@  a word about all of these OwnBlitter changes: After the downcoding of OwnBlitter, and
subsequent optimization, I started having reliability problems with graphics while
running multiple copies of BOXES while doing console activity. The problem seemed to
go away upon reverting to pre-downcode versions of graphics. I attempted several fixes to
it, and had false hopes that I had fixed it several times (the problem takes hours to
show up). Final result: my f00000 card was flaky!!!!!!!!!!
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.6 91/04/11 10:07:47 chrisg Exp Locker: chrisg $
d83 1
a83 1
	move.l	$4,a6
@


37.6
log
@optimized slightly
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.5 91/04/09 10:29:05 chrisg Exp Locker: chrisg $
@


37.5
log
@  Bumped back to rev 37.2 because of flakiness.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.2 91/04/02 14:57:11 spence Exp $
d79 1
a79 1
    movem.l d0/d1/a0/a1/a4-a6,-(sp)
d81 8
a88 2
	sub.l	a1,a1
	lea		gb_BlitWaitQ(a6),a4
d90 2
a91 3
	sub.l	#LN_SIZE,sp
	DISABLE	a5
	btst.b	d0,gb_Flags+1(a6)
d93 2
a94 10
	move.l	a5,a6			; a5->ExecBase from DISABLE macro
	move.l	sp,a5
	jsr		_LVOFindTask(a6)
	move.l	d0,LN_NAME(a5)		; cheat!!
	moveq	#0,d0
	moveq	#1<<BLITTER_SIGNAL,d1	
	jsr		_LVOSetSignal(a6)
	move.l	a4,a0
	move.l	a5,a1
*	jsr		_LVOAddTail(a6)
d97 1
a97 2
	jsr		_LVOWait(a6)
OBme2:
d100 2
a101 2
    movem.l (sp)+,d0/d1/a0/a1/a4-a6
    rts
d103 5
a107 3
	bclr.b	d0,gb_Flags+1(a6)
	move.l	4,a6			; for ENABLE
	bra.s	OBme2
@


37.4
log
@  Fixed previous optimization. Unfortunately, due to system sharing of
the blitter signal bit, OwnBlitter MUST clear it before waiting. To
reduce the interrupt overhead, I put a hack in (clearing the sig bit
in the task structure directly). This hack should be watched closely,
as an exec change could break it.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.3 91/04/08 11:25:02 chrisg Exp Locker: chrisg $
a13 1
	include	'exec/tasks.i'
d79 1
a79 1
	movem.l d0/d1/a0/a1/a5/a6,-(sp)
d81 2
d85 1
a85 3
	lea	gb_BlitWaitQ(a6),a0	; for addtail below
	move.l	sp,a1			; for addtail below
	DISABLE	a5			; sets a5=execbase
d88 11
a98 12
	move.l	ThisTask(a5),a6			; dont call FindTask 08-apr-91 CHG
	move.l	a6,LN_NAME(sp)

;!!! below is a hack which may break under future exec's
	bclr	#BLITTER_SIGNAL,TC_SIGRECVD+3(a6)	; !!! hack hack hack CHG !!!
;!!! above is a hack which may break under future exec's.

;	moveq	#0,d0
;	moveq	#1<<BLITTER_SIGNAL,d1		; Don't need this! 08-Apr-91 CHG
;	jsr		_LVOSetSignal(a6)
	ADDTAIL					; uses a0/a1 from above
	move.l	a5,a6				; a5 contains execbase
d100 2
a101 1
	jsr	_LVOWait(a6)
d104 2
a105 2
	movem.l (sp)+,d0/d1/a0/a1/a5/a6
	rts
d108 2
a109 16
	ENABLE	a5,NOFETCH
	add.l	#LN_SIZE,sp
	movem.l	(sp)+,d0/d1/a0/a1/a5/a6
	rts

; the reason for the hack with the BCLR mentioned above is as follows:
;  Due to unreliability and re-use of the blitter_signal sigbit, Ownblitter
;   must cleat it before adding the task to the queue.
;  SetSignal takes a long time.
;  In order to call SetSignal out of the disable, it must be inserted in the
;   beginning of the code. If so, than a SetSignal will be done when it does
;   not have to (before the BTST of BLITMSG_FAULT). The case when it has to be
;   done is the least likely one, so graphics would be needlessly (most of the time)
;   slowing itself down.


@


37.3
log
@  Optimized OwnBlitter. Reduced amount of time spent inside of a Disable(). I also removed
the clear of the BLITTERSIGNAL signal bit. Looking at all the stuff that references it, it
looks like it was unnecessary.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.2 91/04/02 14:57:11 spence Exp Locker: chrisg $
d14 1
d80 1
a80 1
	movem.l d0/d1/a0/a1/a5-a6,-(sp)
d83 1
a83 1
	sub.w	#LN_SIZE,sp
d86 1
a86 1
	DISABLE	a5
d89 7
a95 1
	move.l	ThisTask(a5),LN_NAME(sp)	; dont call FindTask 08-apr-91 CHG
a99 1
	ENABLE	a5,NOLOAD
d103 2
a104 1
	add.w	#LN_SIZE,sp
d109 2
a110 2
	ENABLE	a5,NOLOAD
	add.w	#LN_SIZE,sp
d113 12
@


37.2
log
@downcoded cownblitter() - new assembly version also reached by OWNBLITTER
macro.
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.1 91/02/12 16:21:16 chrisg Exp Locker: spence $
d79 1
a79 1
    movem.l d0/d1/a0/a1/a4-a6,-(sp)
a80 2
	sub.l	a1,a1
	lea		gb_BlitWaitQ(a6),a4
d82 3
a84 1
	sub.l	#LN_SIZE,sp
d88 7
a94 11
	move.l	a5,a6			; a5->ExecBase from DISABLE macro
	move.l	sp,a5
	jsr		_LVOFindTask(a6)
	move.l	d0,LN_NAME(a5)		; cheat!!
	moveq	#0,d0
	moveq	#1<<BLITTER_SIGNAL,d1	
	jsr		_LVOSetSignal(a6)
	move.l	a4,a0
	move.l	a5,a1
*	jsr		_LVOAddTail(a6)
	ADDTAIL
d96 4
a99 6
	jsr		_LVOWait(a6)
OBme2:
	ENABLE
	add.l	#LN_SIZE,sp
    movem.l (sp)+,d0/d1/a0/a1/a4-a6
    rts
d102 4
a105 2
	move.l	4,a6			; for ENABLE
	bra.s	OBme2
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 37.0 91/01/07 15:25:45 spence Exp Locker: chrisg $
d13 1
d63 9
d79 26
a104 3
    movem.l d0/d1/a0/a1,-(sp)
    jsr _cownblitter
    movem.l (sp)+,d0/d1/a0/a1
d106 4
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: OwnBlitter.asm,v 1.5 90/08/24 11:28:01 bart Exp Locker: spence $
d34 2
d44 1
a44 1
*	Calls to OwnBlitter() not nest. If a task that owns the
d53 1
d56 1
a56 2
*	DisownBlitter
*
d76 1
a76 1
*NAME
d80 1
a80 1
*SYNOPSIS
d83 1
a83 2
*FUNCTION
*		Free blitter up for use by other blitter users.
d85 2
a86 1
*INPUTS
d88 1
a88 1
*RETURNS
d90 4
a93 2
*SEE ALSO
*       OwnBlitter
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: OwnBlitter.asm,v 1.3 90/03/08 14:20:33 bart Exp $
@


1.3
log
@minor optimisation on test of dmaconr
@
text
@d3 1
a3 1
*	$Header: OwnBlitter.asm,v 1.2 89/05/02 12:22:27 bart Exp $
@


1.2
log
@doc
@
text
@d3 1
a3 1
*	$Header: OwnBlitter.asm,v 1.1 88/05/01 15:37:51 dale Exp $
d106 1
a107 1
		btst    #DMAB_BLTDONE-8,_dmaconr * bart - 11.24.85 - if bad agnus !!!
d109 1
a109 1
		move.w  #BITSET+INTF_BLIT,_intreq
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: OwnBlitter.asm,v 33.0 86/05/17 15:09:02 bart Exp $
d41 5
@
