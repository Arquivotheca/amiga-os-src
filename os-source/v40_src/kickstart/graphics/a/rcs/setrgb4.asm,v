head     38.8;
branch   ;
access   ;
symbols  rel39_24:38.8 rel39_18:38.8 rel39_97:38.8 rel39_90:38.8 rel39_89:38.8 rel39_82:38.8 rel39_76:38.7 rel39_71:38.6 rel39_65:38.4 rel39_64:38.4 rel39_61:38.4 rel39_60:38.4 rel39_55:38.4 rel39_52:38.4 rel39_47:38.4 rel39_39:38.4 rel39_38:38.4 rel39_37:38.4 rel39_35:38.4 rel39_34:38.4 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


38.8
date     92.08.17.13.37.50;  author chrisg;  state Exp;
branches ;
next     38.7;

38.7
date     92.07.09.10.01.10;  author chrisg;  state Exp;
branches ;
next     38.6;

38.6
date     92.07.01.10.38.37;  author chrisg;  state Exp;
branches ;
next     38.5;

38.5
date     92.06.11.14.27.58;  author chrisg;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.18.11.43.24;  author chrisg;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.11.11.41.49;  author chrisg;  state Exp;
branches ;
next     38.2;

38.2
date     91.10.29.16.24.46;  author chrisg;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.12.13.32.50;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.27.11.40.25;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.47.02;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.16;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.24.11.28.32;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.16.21.24;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.01;  author dale;  state Exp;
branches ;
next     ;


desc
@@


38.8
log
@handle any # of wiats at the bgeinning of the copper list.
@
text
@*******************************************************************************
*
*	$Id: setrgb4.asm,v 38.7 92/07/09 10:01:10 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	section graphics
	include	'/macros.i'
	include	'/view.i'
	include	'/gfxbase.i'
	include	'hardware/custom.i'

	xref	_custom
    xdef    _SetRGB4
    xref    _pokecolors,_LVOSetRGB32

******* graphics.library/SetRGB4 ***********************************************
*
*    NAME
*       SetRGB4 -- Set one color register for this viewport.
*
*    SYNOPSIS
*       SetRGB4(  vp, n,   r,    g,    b)
*                 a0  d0  d1:4  d2:4  d3:4
*
*	void SetRGB4( struct ViewPort *, SHORT, UBYTE, UBYTE, UBYTE );
*
*    FUNCTION
*	Change the color look up table so that this viewport displays
*	the color (r,g,b) for pen number n.
*
*    INPUTS
*	vp - pointer to  viewport structure
*       n - the color number (range from 0 to 31)
*       r - red level (0-15)
*       g - green level (0-15)
*       b - blue level (0-15)
*
*    RESULT
*	If there is a ColorMap for this viewport, then the value will
*	be stored in the ColorMap.
*       The selected color register is changed to match your specs.
*	If the color value is unused then nothing will happen.
*
*    BUGS
*
*	NOTE: Under V36 and up, it is not safe to call this function
*	from an interrupt, due to semaphore protection of graphics
*	copper lists.
*
*    SEE ALSO
*       LoadRGB4() GetRGB4() graphics/view.h
******************************************************************************

	xref	_SetRGB32

_SetRGB4:
	swap	d0
	clr.w	d0
	swap	d0
	cmp.w	#0,a0
	beq.s	no_vp_hack
	tst.l	vp_ColorMap(a0)
	beq.s	no_cm_hack
	movem.l	d2/d3/d4,-(a7)
	swap	d1
	swap	d2
	swap	d3
	lsl.l	#8,d1
	lsl.l	#8,d2
	lsl.l	#8,d3
	move.l	d1,d4
	lsl.l	#4,d4
	or.l	d4,d1
	move.l	d2,d4
	lsl.l	#4,d4
	or.l	d4,d2
	move.l	d3,d4
	lsl.l	#4,d4
	or.l	d4,d3
	jsr	_LVOSetRGB32(a6)
	movem.l	(a7)+,d2/d3/d4
	rts
no_vp_hack:
	bsr.s	get_12bit_color	;d1=12bit(d1,d2,d3)
	add.w	d0,d0
	move.l	#_custom+color,a0
	move.w	d1,0(a0,d0.w)
	rts

get_12bit_color:
	move.l	d0,-(a7)
	and.w	#$f,d1
	lsl.w	#8,d1
	move	d2,d0
	and.w	#$f,d0
	lsl.w	#4,d0
	or.w	d0,d1
	move	d3,d0
	and.w	#$f,d0
	or.w	d0,d1
	move.l	(a7)+,d0
	rts

no_cm_hack:
	move.l	d2,-(a7)
	bsr	get_12bit_color	; d1=12bit(d1,d2,d3)
	add.w	d0,d0
	add.w	#color,d0
	move.w	#$fff,d2
; no point in holding the semaphore for a hack like this!
	bsr.s	_pokevp
	move.l	(a7)+,d2
	rts

; void __asm pokevp(register __a0 struct ViewPort *vp,register __d0 UWORD regnum, register __d1 UWORD value, 
;					register __d2 UWORD vmask); /* __asm */

; must be called with GfxBase->ActiViewCprSemaphore held!
_pokevp::
	movem.l	d2/d3/d4/a2,-(a7)
	and.w	d2,d1
	not.w	d2
	move.w	vp_Modes(a0),d3
	and.w	#V_VP_HIDE,d3
	bne.s	done_pokevp
	move.l	vp_DspIns(a0),d3
	beq.s	done_pokevp
	move.l	d3,a1
	move.l	cl_CopLStart(a1),a2
	bsr.s	pokevp_hw
	move.l	cl_CopSStart(a1),a2
	bsr.s	pokevp_hw
; now, try intermediate copper list
	move.l	cl_CopIns(a1),a1
; now, do intermediate copper list
	cmp.w	#0,a1
	beq.s	done_pokevp
pokevp_intermed:
	move.w	(a1)+,d3	; opcode
	and.w	#3,d3		; filter lof/shf bits
	beq.s	is_move
	subq.w	#1,d3		; wait?
	beq.s	is_wait
; it's a cprnxtbuf!
	move.l	(a1),a1
	bra.s	pokevp_intermed
is_wait:
	cmp.w	#255,2(a1)	; end of list?
	beq.s	done_pokevp
	lea	4(a1),a1
	bra.s	pokevp_intermed
is_move:
	cmp.w	(a1),d0
	bne.s	skipback
	move.w	2(a1),d4
	and.w	d2,d4
	or.w	d1,d4
	move.w	d4,2(a1)
skipback:
	lea	4(a1),a1
	bra.s	pokevp_intermed
done_pokevp:
	movem.l	(a7)+,d2/d3/d4/a2
	rts


pokevp_hw:
; poke all register values between the first and last WAIT's
; trashes a2,d3/d4
	cmp.w	#0,a2
	beq.s	done_list
skip_waits:
	btst	#0,1(a2)	; 2nd wait because of line 255?
	beq.s	1$
	lea	4(a2),a2		; skip 2nd wait
	bra.s	skip_waits
1$:	move.w	(a2)+,d3
	move.w	(a2)+,d4
	btst	#0,d3		; move or wait?
	bne.s	done_list	; it's a WAIT
	cmp.w	d0,d3		; right register?
	bne.s	1$		; nope
	and.w	d2,d4
	or.w	d1,d4
	move.w	d4,-2(a2)
	bra.s	1$
done_list:
	rts


	end
@


38.7
log
@added no colormap hack. new routine pokevp is useful!
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.6 92/07/01 10:38:37 chrisg Exp Locker: chrisg $
d173 5
a177 1
	lea	4(a2),a2	; skip initial wait
@


38.6
log
@clear upper word of value. fixes ProCalc.
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.5 92/06/11 14:27:58 chrisg Exp Locker: chrisg $
d8 1
d61 4
d84 103
@


38.5
log
@made call setrgb32.
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.4 91/11/18 11:43:24 chrisg Exp Locker: chrisg $
d57 3
@


38.4
log
@fixed serious bug!
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.3 91/11/11 11:41:49 chrisg Exp Locker: chrisg $
d14 2
a15 1
    xref    _pokecolors
d57 4
a60 1
	movem.l	a2/d2/d3/d7,-(a7)
d62 13
a74 24
	lsl.l	#4,d2
	or.l	d2,d1
	or.l	d3,d1
	add.l	d0,d0
	cmp	#0,a0
	beq.s	no_cm_kludge
	move.l	a0,a2
	move.l	vp_ColorMap(a0),a1
	cmp	#0,a1
	beq.s	no_cm_kludge		; do nothing if no color map
	move.l	cm_ColorTable(a1),a0
	move.w	0(a0,d0.w),d2
	and.w	#$8000,d2
	or.w	d1,d2
	move.w	d2,0(a0,d0.w)
	tst.b	cm_Type(a1)
	beq.s	no_low
	tst.l	cm_LowColorBits(a1)
	beq.s	no_low
	move.l	cm_LowColorBits(a1),a0
	move.w	d1,0(a0,d0.w)
no_low:	bsr	_pokecolors
my_exit:
	movem.l	(a7)+,a2/d2/d3/d7
d76 1
a76 9
no_cm_kludge:
; if there is no color map, then poke the color registers (unless
; on AA, because color banking could fuck up)!
;	btst	#GFXB_AA_LISA,gb_ChipRevBits0(a6)
;	bne.s	my_exit
	lea	_custom+color,a1
	move.w	d1,0(a1,d0.w)
	bra.s	my_exit
	
@


38.3
log
@ Made it preserve the genlock transparency bit.
@
text
@d3 1
a3 1
*	$Id: SetRGB4.asm,v 38.2 91/10/29 16:24:46 chrisg Exp Locker: chrisg $
a56 1
	move.l	a0,a2
d62 3
d67 1
a67 1
	beq.s	no_cm_kludge
@


38.2
log
@ added kludge code for viewports w/o colormaps.
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.1 91/07/12 13:32:50 chrisg Exp Locker: chrisg $
d45 4
d67 4
a70 1
	move.w	d1,0(a0,d0.w)
d84 1
a84 1
;	btst	#GFXB_AA_LISA,gb_ChipRevBits0(a6)		; super hires not scrambled 
@


38.1
log
@  Fixed awful register bug!!!!!!
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 38.0 91/06/27 11:40:25 chrisg Exp Locker: chrisg $
d9 2
d12 1
d60 2
d71 1
d74 9
a82 1

@


38.0
log
@downcoded to use new _pokecolors stuff and initial v38 checkin
@
text
@d3 1
a3 1
*	$Id: setrgb4.asm,v 37.1 91/02/12 15:47:02 chrisg Exp Locker: chrisg $
d59 1
a59 1
	tst.b	cm_Type(a2)
d61 1
a61 1
	tst.l	cm_LowColorBits(a2)
d63 1
a63 1
	move.l	cm_LowColorBits(a2),a0
@


37.1
log
@ edited autodoc
@
text
@d3 1
a3 1
*	$Id: SetRGB4.asm,v 37.0 91/01/07 15:26:16 spence Exp Locker: chrisg $
d8 2
d11 1
a11 1
    xref    _setrgb4
d45 3
d49 19
a67 10
*               current routine calls a C subroutine to do the work
    movem.l d0/d1/d2/d3,-(sp)
*    move.l  d3,-(sp)
*    move.l  d2,-(sp)
*    move.l  d1,-(sp)
*    move.l  d0,-(sp)
    move.l  a0,-(sp)
    jsr     _setrgb4
    lea     20(sp),sp   * reset stack
    rts
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: SetRGB4.asm,v 1.3 90/08/24 11:28:32 bart Exp Locker: spence $
d19 1
a19 3
*	struct ViewPort *vp;
*	SHORT n;
*	UBYTE r,g,b;
d28 3
a30 3
*       r - red level
*       g - green level
*       b - blue level
d33 2
a34 2
*	If there is a ColorMap for this viewport store the value in
*	in the structure ColorMap.
d41 1
a41 1
*       LoadRGB4 GetRGB4 graphics/view.h
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: SetRGB4.asm,v 1.1 88/05/01 15:38:01 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: SetRGB4.asm,v 33.0 86/05/17 15:10:35 bart Exp $
@
