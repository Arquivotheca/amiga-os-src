head     39.4;
branch   ;
access   ;
symbols  rel39_24:39.4 rel39_18:39.4 rel39_97:39.4 rel39_90:39.4 rel39_89:39.4 rel39_82:39.4 rel39_76:39.4 rel39_71:39.4 rel39_65:39.4 rel39_64:39.4 rel39_61:39.4 rel39_60:39.4 rel39_55:39.4 rel39_52:39.4 rel39_47:39.4 rel39_39:39.4 rel39_38:39.4 rel39_37:39.4 rel39_35:39.4 rel39_34:39.4 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


39.4
date     92.02.10.13.12.17;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     91.12.20.15.43.47;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.09.23.16.14.58;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.09.23.13.19.54;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.29.15.32.51;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.08.07.13.51.12;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.01.14.45.26;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.07.35;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.50;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.24.11.29.10;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.17.22.32;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.11;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.4
log
@  checked for "non-modifying" minterms.
 if minterm=10xx then I don't modify the data.
fixed dpaint cursor tracking. hoipefully the last one.
they were using minterm $aa.
@
text
@*******************************************************************************
*
*	$Id: writepixel.asm,v 39.3 91/12/20 15:43:47 chrisg Exp Locker: chrisg $
*
*******************************************************************************

  include 'exec/types.i'     * Required data type definitions
  include 'graphics/gfx.i'    * BitMap structure definition
  include 'graphics/gfxbase.i'
  include 'graphics/clip.i'   * Layer structure definition
  include 'graphics/rastport.i'   * RastPort structure definition
  include 'hardware/blit.i'    * Blitter structure definitions
  include 'hardware/custom.i'  * Amiga hardware registers
  include 'submacs.i'     * Macros for subroutines called
  include '/sane_names.i'

	section	graphics
  xdef _WritePixel

	xref _custom      * extern struct AmigaRegs ioregs;
	xref waitblitdone

******* graphics.library/WritePixel ******************************************
*
*   NAME
*       WritePixel -- Change the pen num of one specific pixel in a
*                     specified RastPort.
*
*   SYNOPSIS
*       error = WritePixel(  rp, x,  y)
*         d0                 a1 D0  D1
*
*	LONG WritePixel( struct RastPort *, SHORT, SHORT );
*
*   FUNCTION
*       Changes the pen number of the selected pixel in the specified
*       RastPort to that currently specified by PenA, the primary
*       drawing pen. Obeys minterms in RastPort.
*
*   INPUTS
*       rp - a pointer to the RastPort structure
*       (x,y) - point within the RastPort at which the selected
*           pixel is located.
*
*   RESULT
*       error = 0 if pixel succesfully changed
*	      = -1 if (x,y) is outside the RastPort
*
*   BUGS
*
*   SEE ALSO
*       ReadPixel() graphics/rastport.h
*
******************************************************************************

*		this kluge needed to preserve RastPort pointer
_WritePixel:
	movem.l d2/d3/a3/a4/a5,-(sp)		* Save registers used
* begin downcoded stuff
	ifne	rp_Layer
		fail
	endc
	move.l	(a1),a5
	move.l	a5,d2				* is there a layer?
	if <>	.extend
		LOCKLAYER
*		a1 points to rastport
*		d0/d1 is the coordinate
*		d2 points to the layer
*		a5 points to layer
		move.l	lr_ClipRect(a5),d2	* get first ClipRect *
		if <>	.extend
			add.w	lr_MinX(a5),d0
			add.w	lr_MinY(a5),d1
			sub.w	lr_Scroll_X(a5),d0
			sub.w	lr_Scroll_Y(a5),d1
			repeat
				move.l	d2,a0		* get cr pointer in a0
*				is the point in this ClipRect?
				if cr_MinX(a0)<=d0.w
					if cr_MaxX(a0)>=d0.w
						if cr_MinY(a0)<=d1.w
							if cr_MaxY(a0)>=d1.w
*								found a cliprect
								tst.l	cr_lobs(a0)
								beq.s	finish		* simple, on screen
*									not on screen
*									special for obscuration
									move.w	cr_MinX(a0),d2
									and.w	#$FFF0,d2
									sub.w	d2,d0		* offset x
									sub.w	cr_MinY(a0),d1	* offset y
									move.l	cr_BitMap(a0),d2
									if =
*										no bitmap here
										bra	wend
									endif
									move.l	d2,a0
									bra.s	finish2
*
							endif
						endif
					endif
				endif
	ifne	cr_Next
		fail
	endc
				move.l	(a0),d2		* try next cliprect
			until =
*			not in these cliprects try superbitmap
*			restore to original coordinates
			move.l	lr_SuperBitMap(a5),d2
			if <>
				add.w	lr_Scroll_X(a5),d0
				add.w	lr_Scroll_Y(a5),d1
				sub.w	lr_MinX(a5),d0
				sub.w	lr_MinY(a5),d1
				move.l	lr_SuperClipRect(a5),d3
				if <>
					repeat
						move.l	d3,a0
		                if cr_MinX(a0)<=d0.w
		                    if cr_MaxX(a0)>=d0.w
		                        if cr_MinY(a0)<=d1.w
		                            if cr_MaxY(a0)>=d1.w
*		                               found a cliprect
										move.l	d2,a0
		                                bra.s finish2
		                            endif
		                        endif
		                    endif
		                endif
		                move.l  (a0),d3     * try next cliprect
					until =
				endif
			endif
		endif
		bra wend
	endif
finish:
	move.l	rp_BitMap(a1),a0
finish2:
	ifne bm_BytesPerRow
		fail
	endc
	muls	(a0),d1		* could be BytesPerRow(a0)
	move.w	d0,d3
	ext.l	d0	* only use word
	asr.l	#3,d0
	add.l	d0,d1
	move.l	d1,a5
	moveq	#7,d0
	and.w	d0,d3
	sub.w	d3,d0
	move.b	bm_Depth(a0),d3
	subq	#1,d3
	lea	bm_Planes(a0),a0
* end downcodeing

	move.b	rp_Mask(a1),d1

	lea  _custom,a4       * io = &ioregs;
	OWNBLITTER         * ownblitter(GB);
	WAITBLITDONE  a4    * waitblitdone();

	lea	rp_minterms(a1),a3
; now, (a0)=planes
;       a5=byte offset from beginning of plane
;	d0=bit number
;	d1=mask
;	(a3)=minterms 2a=clr ea=set 6a=xor
;       d3.b=depth-1
; kludge! kludge! kludge alert! :
; I can't go off of the rp_FgPen/BgPen/DrawMode, because dpaint pokes minterms!!
	
pl_loop:
	move.b	(a3)+,d2
	move.l	(a0)+,a4
	lsr.b	#1,d1
	bcc.s	done_plane
	tst.b	d2
	bpl.s	no_set
	add.b	d2,d2
	bpl.s	no_set1
	bset	d0,0(a4,a5.l)
no_set1:
	dbra	d3,pl_loop
	bra.s	end_set_px
no_set:
	add.b	d2,d2		; 6a<<1=-
	bmi.s	is_xor
	bclr	d0,0(a4,a5.l)
	dbra	d3,pl_loop
	bra.s	end_set_px

is_xor:
	bchg	d0,0(a4,a5.l)
done_plane:
	dbra	d3,pl_loop
	
end_set_px:
	DISOWNBLITTER     * disownblitter(GB);

	move.l	rp_Layer(a1),d0
	if <>
		move.l	d0,a5
		UNLOCKLAYER
	endif
	moveq	#0,d0
	movem.l (sp)+,d2/d3/a3/a4/a5  * Restore registers used
	rts


wend:
; return failure
	move.l	rp_Layer(a1),d0
	if <>
		move.l	d0,a5
		UNLOCKLAYER
	endif
	moveq	#-1,d0
	movem.l (sp)+,d2/d3/a3/a4/a5  * Restore registers used
	rts

	end
@


39.3
log
@  Made WritePixel use minterms instead of DrawMode and Pens.
DPaint pokes minterms directly when using cycle draw.
@
text
@d3 1
a3 1
*	$Id: writepixel.asm,v 39.2 91/09/23 16:14:58 chrisg Exp Locker: chrisg $
d183 2
d186 1
@


39.2
log
@  WritePixel was missing a .l on the address register offset.
@
text
@d3 1
a3 1
*	$Id: writepixel.asm,v 39.1 91/09/23 13:19:54 chrisg Exp Locker: chrisg $
d58 1
a58 1
	movem.l d2/d3/a4/a5,-(sp)		* Save registers used
a95 1
										moveq	#-1,d3
a137 1
		moveq	#-1,d3
d166 1
a166 7
	btst.b	#1,rp_DrawMode(a1)  ; complement?
	bne.s	complement_pixel
	move.b	rp_FgPen(a1),d2
	btst.b	#2,rp_DrawMode(a1)  ; inversevid?
	beq.s	no_inverse
	move.b	rp_BgPen(a1),d2
no_inverse:
d171 1
a171 1
;	d2=pen number
d173 2
d177 1
a178 2
	lsr.b	#1,d2
	bcc.s	zero_plane
d181 2
a183 1
done_plane:
d186 3
a188 4
	
zero_plane:
	lsr.b	#1,d1
	bcc.s	done_plane
d193 1
a193 4
complement_pixel:
	move.l	(a0)+,a4
	lsr.b	#1,d1
	bcc.s	ignore_plane
d195 3
a197 3
ignore_plane:
	dbra	d3,complement_pixel

d201 10
a210 1
	clr.l	d3		* return condition
d212 1
d218 2
a219 2
	move.l	d3,d0
	movem.l (sp)+,d2/d3/a4/a5  * Restore registers used
@


39.1
log
@ no need for inversevid removal
@
text
@d3 1
a3 1
*	$Id: writepixel.asm,v 38.0 91/08/07 13:51:12 chrisg Exp $
d188 1
a188 1
	bset	d0,0(a4,a5)
d196 1
a196 1
	bclr	d0,0(a4,a5)
d204 1
a204 1
	bchg	d0,0(a4,a5)
@


39.0
log
@ removed inversevide smarts - borke dpaint!
@
text
@d3 1
a3 1
*	$Id: writepixel.asm,v 38.0 91/08/07 13:51:12 chrisg Exp Locker: chrisg $
d171 2
a172 2
;	btst.b	#2,rp_DrawMode(a1)  ; inversevid? Cna't do this it breaks dpaint!
;	beq.s	no_inverse
@


38.0
log
@WritePixel now uses the CPU instaed of the blitter!
@
text
@d3 1
a3 1
*	$Id: writepixel.asm,v 37.2 91/05/01 14:45:26 chrisg Exp Locker: chrisg $
d171 2
a172 2
	btst.b	#2,rp_DrawMode(a1)  ; inversevid?
	beq.s	no_inverse
@


37.2
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: WritePixel.asm,v 37.1 91/02/12 16:07:35 chrisg Exp Locker: chrisg $
d153 2
a154 1
	moveq	#15,d0
d158 2
a159 1
	lea		bm_Planes(a0),a0
d162 1
a162 1
	moveq	#-1,d2
d168 39
a206 2
	move.l	d2,fwmask(a4)   * io->fwmask = io->lwmask = 0xffff;
	clr.w	d2
d208 1
a208 25
	move.w d2,bltcon1(a4)   * io->bltcon1 = 0;


	bset	d0,d2		* this bit will be hit
	move.l	d2,bdata(a4)    * io->adata = bitMask;
*						    * io->bdata = 0xffff;

	clr.w	d2
	move #SRCC+DEST,d0	* bltcon0
	repeat
		btst.b d2,rp_Mask(a1)
		if <>
			move.b rp_minterms(a1,d2.w),d0  * d0 = rP_minterms[i]
			WAITBLITDONE  a4    * waitblitdone();
			move d0,bltcon0(a4) * io->bltcon0 = SRCC|DEST|rP_minterms[i];
			move.l	(a0),a5
			add.l	d1,a5		* add in offset
			move.l a5,bltptc(a4) * io->bltptc = bm->Planes[i] + byteOffset;
			move.l a5,bltptd(a4) * io->bltptd = bm->Planes[i] + byteOffset;
			move #$41,bltsize(a4) * io->bltsize = 0x41;
		endif
		addq.l	#4,a0
		addq.w	#1,d2
	until	d2=d3.b

@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: WritePixel.asm,v 37.0 91/01/07 15:26:50 spence Exp Locker: chrisg $
d15 1
a15 1
  include '../sane_names.i'
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: WritePixel.asm,v 1.3 90/08/24 11:29:10 bart Exp Locker: spence $
d27 1
a27 1
*                     specified RasterPort.
d33 1
a33 3
*	LONG error;
*	struct RastPort *rp;
*	SHORT x,y;
d38 1
a38 1
*       drawing pen. Obey minterms in RastPort.
d52 1
a52 1
*       ReadPixel graphics/rastport.h
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WritePixel.asm,v 1.1 88/05/01 15:38:11 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: WritePixel.asm,v 33.1 87/03/12 17:59:26 dale Exp $
@
