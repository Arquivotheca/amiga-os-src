head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


39.1
date     92.01.07.16.38.17;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.28.03;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.57.34;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.33;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.24.11.28.53;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.16.30.23;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.07;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@run q CopySBitMap.asm
obsolete
@
text
@*******************************************************************************
*
*	$Id: SyncSBitMap.asm,v 39.0 91/08/21 17:28:03 chrisg Exp Locker: chrisg $
*
*******************************************************************************

		OBSOLETE
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: SyncSBitMap.asm,v 37.1 91/02/12 15:57:34 chrisg Exp Locker: chrisg $
d7 1
a7 45
	section	graphics
    xdef    _SyncSBitMap
    xref    _syncsbitmap
******* graphics.library/SyncSBitMap *******************************************
*
*   NAME
*       SyncSBitMap --	Syncronize Super BitMap with whatever is
*			in the standard Layer bounds.
*
*   SYNOPSIS
*       SyncSBitMap( layer )
*                      a0
*
*	void SyncSBitMap( struct Layer * );
*
*   FUNCTION
*       Copy all bits from ClipRects in Layer into Super BitMap
*	BitMap.  This is used for those functions that do not
*	want to deal with the ClipRect structures but do want
*	to be able to work with a SuperBitMap Layer.
*
*   INPUTS
*	layer - pointer to a Layer that has a SuperBitMap
*		The Layer should already be locked by the caller.
*
*   RESULT
*	After calling this function, the programmer can manipulate
*	the bits in the superbitmap associated with the layer.
*	Afterwards, the programmer should call CopySBitMap to
*	copy the bits back into the onscreen layer.
*
*   BUGS
*
*   SEE ALSO
*	CopySBitMap() graphics/clip.h
*
******************************************************************************
_SyncSBitMap:
*               current routine calls a C subroutine to do the work
    move.l  a0,-(sp)    * push Clipwindow *
    jsr _syncsbitmap
    addq.l #4,sp        * remove args from stack
    rts

	end
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: SyncSBitMap.asm,v 37.0 91/01/07 15:26:33 spence Exp Locker: chrisg $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: SyncSBitMap.asm,v 1.3 90/08/24 11:28:53 bart Exp Locker: spence $
d20 1
a20 1
*	struct Layer *layer;
d33 3
a35 2
*	A bitmap that the programmer can now diddle with the bits.
*	After diddling the programmer should call CopySBitMap to
d41 1
a41 1
*	CopySBitMap graphics/clip.h
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: SyncSBitMap.asm,v 1.1 88/05/01 15:38:07 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: SyncSBitMap.asm,v 33.0 86/05/17 15:11:21 bart Exp $
@
