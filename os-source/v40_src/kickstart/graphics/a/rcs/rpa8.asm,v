head     39.3;
branch   ;
access   ;
symbols  rel39_24:39.3 rel39_18:39.3 rel39_97:39.3 rel39_90:39.3 rel39_89:39.3 rel39_82:39.2 rel39_76:39.2 rel39_71:39.1 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.3 V37_29:37.3 V37_28:37.3 V37_27:37.3 V37_25:37.3 V37_24:37.3 V37_23:37.3 V37_22:37.3 V37_21:37.3 V37_20:37.3 V37_19:37.3 V37_18:37.3 V37_17:37.3 V37_15:37.3 V37_14:37.3 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.5 V36_208:36.5 V36_207:36.5 V36_205:36.5 V36_203:36.5 V36_202:36.5 V36_201:36.5 V36_200:36.5 V36_199:36.5 V36_198:36.5 V36_196:36.5 V36_195:36.5 V36_194:36.5 V36_193:36.5 V36_192:36.5 V36_191:36.5 V36_190:36.5 V36_189:36.5 V36_188:36.5 V36_187:36.5 V36_186:36.5 V36_185:36.5 V36_184:36.5 V36_183:36.5 V36_182:36.5 V36_181:36.5 V36_180:36.5;
locks    ; strict;
comment  @*   @;


39.3
date     92.09.03.15.36.29;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     92.07.29.16.43.28;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.16.12.13.35;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.29.31;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.02.12.16.47.25;  author spence;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.16.18.02;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.04.19.32.59;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.27.04;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.08.24.11.29.23;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.27.17.32.57;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.11.15.49.15;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.11.12.47.54;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.11.10.52.25;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.08.11.09.35.58;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.3
log
@Autodoc spelling corrections
@
text
@******************************************************************************
*
*   Source Control
*   --------------
*   $Id: rpa8.asm,v 39.2 92/07/29 16:43:28 chrisg Exp Locker: spence $
*
******************************************************************************

    include 'exec/types.i'      * Required data type definitions
    include 'graphics/gfx.i'        * BitMap structure definition
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/interrupts.i'
    include 'exec/ports.i'
    include 'exec/libraries.i'
    include 'graphics/gfxbase.i'
    include 'graphics/clip.i'       * Layer structure definition
    include 'graphics/rastport.i'   * RastPort structure definition
    include 'hardware/blit.i'       * Minterm definitions
	include	'/macros.i'

    section graphics

    xdef _ReadPixelArray8  * Define public entry points
    xdef _ReadPixelLine8
	xref	_LVOReadPixelLine8

    PAGE

******* graphics.library/ReadPixelArray8 **************************************
*
*   NAME
*	ReadPixelArray8 -- read the pen number value of a rectangular array
*	of pixels starting at a specified x,y location and continuing 
*	through to another x,y location within a certain RastPort. (V36)
*
*   SYNOPSIS
*	count = ReadPixelArray8(rp,xstart,ystart,xstop,ystop,array,temprp)
*	D0                      A0 D0:16  D1:16  D2:16 D3:16 A2    A1
*
*     LONG ReadPixelArray8(struct  RastPort *, UWORD, UWORD, UWORD, UWORD,
*	   UBYTE *, struct RastPort *);
*
*   FUNCTION
*	For each pixel in a rectangular region, combine the bits from each
*	of the bit-planes used to describe a particular RastPort into the pen
*	number selector which that bit combination normally forms for the
*	system hardware selection of pixel color.
*
*   INPUTS
*	rp    -  pointer to a RastPort structure
*	(xstart,ystart) - starting point in the RastPort
*	(xstop,ystop)   - stopping point in the RastPort
*	array - pointer to an array of UBYTEs from which to fetch the pixel data
*	        allocate at least ((((width+15)>>4)<<4)*(ystop-ystart+1)) bytes.
*	temprp - temporary rastport (copy of rp with Layer set == NULL,
*	         temporary memory allocated for
*	         temprp->BitMap with Rows set == 1,
*	         temprp->BytesPerRow == (((width+15)>>4)<<1),
*	         and temporary memory allocated for 
*	         temprp->BitMap->Planes[])
*
*   RESULT
*	For each pixel in the array:
*	    Pen - (0..255) number at that position is returned
*	count   - the number of pixels read.
*
*   NOTE
*	xstop must be >= xstart
*	ystop must be >= ystart
*
*   BUGS
*
*   SEE ALSO
*	ReadPixel()  ReadPixelLine8()  graphics/rastport.h
*
******************************************************************************

    xref    _LVOClipBlit
    xref    _LVOWaitBlit

_ReadPixelArray8:

    movem.l d2/d3/d4/d5/d6/d7/a2/a3/a4,-(sp)

    sub.w   d0,d2       ; width of rectangle to read
    ext.l   d2
    addq.l  #1,d2
	move.l	d2,d4
	add.w	#$f,d4
	and.w	#$fff0,d4

    ble.s   array_error ; width non-positive ?
    move.l  d0,d7       ; temp storage for current x
    move.l  d1,d5       ; temp storage for current y

    sub.w   d1,d3       ; height of rectangle to read
    ext.l   d3
    addq.l  #1,d3
    ble.s   array_error ; height non-positive ?

    movea.l a0,a3       ; protect rastport pointer -- does not modify cc
    movea.l a1,a4       ; protect temprp pointer -- does not modify cc

    moveq.l #0,d6       ; clear count of pixels returned

    bra.s   rpxaloop_count

rpxaloop_start:

    movea.l a3,a0       ; rp
    move.l  d7,d0       ; x
    move.l  d5,d1       ; y (current line)
                        ; width in d2 (see above)
                        ; array in a2 (see above)
    movea.l a4,a1       ; temprp 

    jsr _LVOReadPixelLine8(a6)

    addq.l  #1,d5       ; next line
    adda.l  d4,a2       ; increment base pointer to array by width bytes
    add.l   d0,d6       ; add one line of pixels to pixel count

rpxaloop_count:

    dbra    d3,rpxaloop_start

rpxaloop_end:

    move.l  d6,d0       ; return pixel count
    movem.l (sp)+,d2/d3/d4/d5/d6/d7/a2/a3/a4
    rts

array_error:

    moveq.l #-1,d0
    movem.l (sp)+,d2/d3/d4/d5/d6/d7/a2/a3/a4
    rts

******* graphics.library/ReadPixelLine8 ***************************************
*
*   NAME
*	ReadPixelLine8 -- read the pen number value of a horizontal line
*	of pixels starting at a specified x,y location and continuing
*	right for count pixels. (V36)
*
*   SYNOPSIS
*	count = ReadPixelLine8(rp,xstart,ystart,width,array,temprp)
*	D0                     A0 D0:16  D1:16  D2    A2    A1
*
*	LONG ReadPixelLine8(struct RastPort *, UWORD, UWORD, UWORD,
*	     UBYTE *, struct RastPort * );
*
*   FUNCTION
*	For each pixel in a rectangular region, combine the bits from each
*	of the bit-planes used to describe a particular RastPort into the pen
*	number selector which that bit combination normally forms for the
*	system hardware selection of pixel color.
*
*   INPUTS
*	rp    - pointer to a RastPort structure
*	(x,y) - a point in the RastPort
*	width - count of horizontal pixels to read
*	array - pointer to an array of UBYTEs from which to fetch the pixel data
*	        allocate at least (((width+15)>>4)<<4) bytes.
*	temprp - temporary rastport (copy of rp with Layer set == NULL,
*	         temporary memory allocated for
*	         temprp->BitMap with Rows set == 1,
*	         temprp->BytesPerRow == (((width+15)>>4)<<1),
*	         and temporary memory allocated for 
*	         temprp->BitMap->Planes[])
*
*   RESULT
*	For each pixel in the array:
*	    Pen - (0..255) number at that position is returned
*	count   - the number of pixels read.
*
*   NOTE
*	width must be non negative
*
*   BUGS
*
*   SEE ALSO
*	ReadPixel()  graphics/rastport.h
*
******************************************************************************

_ReadPixelLine8:

    movem.l d2/d3/d4/d5/d6/a2/a3,-(sp)

    tst.l	rp_Layer(a0)
    beq.s	do_blit

************************* initialize tmprp to null *****************************

tmploop_init:
    movem.l		a0/a1,-(sp)	

    movea.l    	rp_BitMap(a1),a1	; get BitMap pointer
    moveq.l    	#0,d5
    move.b    	bm_Depth(a1),d5         ; Depth in d5
    cmp.w	#UNLIKELY_WORD,bm_Pad(a1)	; interleaved?
    bne.s	no_interleaved			; no, use depth
    moveq	#1,d5			; yes, only clear one plane
no_interleaved:
    move.w    	bm_BytesPerRow(a1),d3  	; numbytes in d3
    lsr.w    	#1,d3                	; convert to numwords
    lea.l    	bm_Planes(a1),a1    	; address of first plane pointer in a1

    moveq.l	#0,d6			; clear tmpras with this data
    bra.s    	tmpshift_count

tmpshift_start:    		        ; fill temprp with defval
    movea.l    	(a1)+,a0        	; get plane pointer
    move.w    	d3,d4                	; init numwords for loop
    lsr.w	#1,d4
    bcc.s	no_odd_words
    move.w	d6,(a0)+
no_odd_words:
    lsr.w	#1,d4
    bcc.s	tmploop_count
    move.l	d6,(a0)+
    bra.s    	tmploop_count		; clear this plane

tmploop_start:
    move.l    	d6,(a0)+        	; stuff proper word into tmpras plane
    move.l    	d6,(a0)+        	; stuff proper word into tmpras plane

tmploop_count:
    dbra    	d4,tmploop_start    	; d4 words

tmpshift_count:
    dbra	d5,tmpshift_start

    movem.l		(sp)+,a0/a1

;*******************************************************************************

do_blit:
                    		; xstart, ystart in d0, d1
                    		; rp, temprp in a0, a1
    move.l  d2,d4       	; save "width" pixels, copy this many pixels
    moveq.l #1,d5           ; copy one row of pixels
    move.l  #(ABC+ABNC),d6  ; vanilla copy
    moveq.l #0,d2           ; copy to temprp(0,0)
    moveq.l #0,d3
    move.l  a1,-(sp)        ; save temprp
    jsr _LVOClipBlit(a6)    ; copy rp to temprp the easy/quick way
    jsr _LVOWaitBlit(a6)    ; wait for blit to finish 
    move.l  (sp)+,a1        ; restore temprp
                    		; width now in d4

;*******************************************************************************
; a1 - temprp
; a2 - array
; d4 - width
afterblit:
    movea.l rp_BitMap(a1),a1    ; get BitMap ptr
    clr.l   d1
    move.b  bm_Depth(a1),d1     ; get depth (# of bitplanes)
    subq.b  #1,d1
    lsl.b   #2,d1               ; convert to longword index
    lea.l   bm_Planes(a1),a0    ; address of first plane pointer in a0
    add.w   #15,d4
    lsr.w   #4,d4               ; convert pixel width to word width
    subq.w  #1,d4               ; adjust for dbra

    move.l  d4,d2               ; copy of width in words in d2
    movea.l 0(a0,d1),a1         ; get addr of last plane ptr in a1
    movea.l a2,a3               ; copy of dest ptr in a3

outer_loop1:

    clr.l   d5                  ; clear all bits for later use
    move.l	d5,(a3)		; and make certain that the next
    move.l	d5,4(a3)	; 16 bytes of destination array
    move.l	d5,8(a3)	; are guaranteed to be cleared
    move.l	d5,12(a3)	; before building the pen nos.

    move.w  (a1)+,d5        	; get source data, anything in it?
    beq     zero1       	; nope, so just zero the dest

; shoot, I guess we're just gonna have to figure out what's in it!

    moveq.l #0,d3           ; 1
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 2
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 3
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 4
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 5
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 6
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 7
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 8
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 9
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 10
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 11
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 12
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 13
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 14
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 15
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte
    moveq.l #0,d3           ; 16
    roxl.w  #1,d5           ; put left-most bit in extend bit
    addx.w  d3,d3           ; put extend bit in right-most bit
    move.b  d3,(a3)+        ; init byte

outer_count1:

    dbra    d2,outer_loop1      ; go back while more words to do

    bra     plane_count ; do rest of planes (if any) 

zero1:  ; source word (16 bits) is zero, next 16 dest bytes already 0; incr a3

    lea.l   16(a3),a3	    ; these 16 bytes already zero'd, skip over
    bra     outer_count1

zero2:  ; source word (16 bits) is zero, shift 0 into next 16 dest bytes

    lsl.w   (a3)+           ; 1 2
    lsl.w   (a3)+           ; 3 4
    lsl.w   (a3)+           ; 5 6
    lsl.w   (a3)+           ; 7 8
    lsl.w   (a3)+           ; 9 10
    lsl.w   (a3)+           ; 11 12
    lsl.w   (a3)+           ; 13 14
    lsl.w   (a3)+           ; 15 16
    bra.s     outer_count2

plane_loop:

    move.l  d4,d2           ; copy of width in words in d2
    movea.l 0(a0,d1),a1     ; get addr of next plane ptr in a1
    movea.l a2,a3           ; copy of dest ptr in a3

outer_loop2:

    move.w  (a1)+,d5        ; get source data, anything in it?
    beq     zero2           ; nope, so just left-shift the dest

    ; shoot, I guess we're just gonna have to figure out what's in it!

	swap	d5		; tmpdata upper word of d5.l, lower word clear
	move.b	(a3),d5		    	; 1
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5		    	; 2
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5		    	; 3
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 4
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 5
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 6
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 7
	rol.l	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 8
	rol.l	#1,d5
	move.b	d5,(a3)+

	swap	d5		; tmpdata upper byte of d5.w, lower byte clear
	move.b	(a3),d5			; 9
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 10
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 11
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 12
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 13
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 14
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 15
	rol.w	#1,d5
	move.b	d5,(a3)+
	move.b	(a3),d5			; 16
	rol.w	#1,d5
	move.b	d5,(a3)+

outer_count2:
    dbra    d2,outer_loop2  ; go back while more words to do
plane_count:
    subq.b  #4,d1           ; decrement long offset
    bge     plane_loop  	; go back while more planes to do

    movem.l (sp)+,d2/d3/d4/d5/d6/a2/a3
    move.l	d2,d0			; return count pixels
    rts

    END
@


39.2
log
@made use LVO.
fixed for interleaved temprp.

@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 39.1 92/06/16 12:13:35 chrisg Exp Locker: chrisg $
d54 1
a54 1
*	array - pointer to an array of ubytes from which to fetch the pixel data
@


39.1
log
@short branches
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 37.3 91/02/12 16:47:25 spence Exp $
d20 1
d26 1
d118 1
a118 1
    jsr _ReadPixelLine8
d203 4
a206 1
    moveq.l    	#0,d3
a210 1
    lsl.w    	#2,d5            	; build plane pointer offset in d5
d215 1
a215 1
    movea.l    	0(a1,d5.w),a0        	; get plane pointer
d217 7
d227 2
a228 1
    move.w    	d6,(a0)+        	; stuff proper word into tmpras plane
d234 1
a234 2
    subq.l    	#4,d5                	; adjust plane offset for high to low 
    bge.s		tmpshift_start	; loop for all planes
@


39.0
log
@Bumped
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 37.3 91/02/12 16:47:25 spence Exp Locker: chrisg $
d361 1
a361 1
    bra     outer_count2
@


37.3
log
@autodoc
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 37.2 91/02/12 16:18:02 chrisg Exp Locker: spence $
@


37.2
log
@edited autodoc -- still have to document return values (?what are they?)
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 37.1 91/02/04 19:32:59 spence Exp Locker: chrisg $
d31 3
a33 3
*       ReadPixelArray8 -- read the pen number value of a rectangular array
*       of pixels starting at a specified x,y location and continuing 
*       through to another x,y location within a certain RastPort. (V36)
d36 2
a37 2
*     count = ReadPixelArray8(rp,xstart,ystart,xstop,ystop,array,temprp)
*      d0                     a0 d0:16  d1:16  d2:16 d3:16  a2   a1     
d39 2
a40 2
*     LONG ReadPixelArray8(struct  RastPort *, UWORD, UWORD, UWORD, UWORD, UBYTE *,
*				struct RastPort * );
d43 4
a46 4
*       For each pixel in a rectangular region, combine the bits from each
*       of the bit-planes used to describe a particular RastPort into the pen
*       number selector which that bit combination normally forms for the
*       system hardware selection of pixel color.
d49 11
a59 11
*       rp -  pointer to a RastPort structure
*       (xstart,ystart) starting point in the RastPort
*       (xstop,ystop) stopping point in the RastPort
*       array - pointer to an array of ubytes from which to fetch the pixel data
*		allocate at least ((((width+15)>>4)<<4)*(ystop-ystart+1)) bytes.
*       temprp - temporary rastport (copy of rp with Layer set == NULL,
*                temporary memory allocated for
*                temprp->BitMap with Rows set == 1,
*                temprp->BytesPerRow == (((width+15)>>4)<<1),
*                and temporary memory allocated for 
*		 temprp->BitMap->Planes[])
d62 3
a64 2
*       For each pixel in the array:
*           Pen - (0..255) number at that position is returned
d67 2
a68 2
*       xstop must be >= xstart
*       ystop must be >= ystart
d73 1
a73 1
*       ReadPixel() ReadPixelLine8() graphics/rastport.h
d141 3
a143 3
*       ReadPixelLine8 -- read the pen number value of a horizontal line 
*       of pixels starting at a specified x,y location and continuing 
*       right for count pixels. (V36)
d146 2
a147 2
*       count = ReadPixelLine8(rp,xstart,ystart,width,array,temprp)
*       d0		       a0 d0:16  d1:16   d2     a2    a1   
d149 2
a150 2
*	LONG ReadPixelLine8( struct  RastPort *, UWORD, UWORD, UWORD, UBYTE *,
*				struct RastPort * );
d153 4
a156 4
*       For each pixel in a rectangular region, combine the bits from each
*       of the bit-planes used to describe a particular RastPort into the pen
*       number selector which that bit combination normally forms for the
*       system hardware selection of pixel color.
d159 11
a169 11
*       rp -  pointer to a RastPort structure
*       (x,y) a point in the RastPort
*       width - count of horizontal pixels to read
*       array - pointer to an array of ubytes from which to fetch the pixel data
*				allocate at least (((width+15)>>4)<<4) bytes.
*       temprp - temporary rastport (copy of rp with Layer set == NULL,
*                temporary memory allocated for
*                temprp->BitMap with Rows set == 1,
*                temprp->BytesPerRow == (((width+15)>>4)<<1),
*                and temporary memory allocated for 
*		 temprp->BitMap->Planes[])
d172 3
a174 2
*       For each pixel in the array:
*           Pen - (0..255) number at that position is returned
d177 1
a177 1
*       width must be non negative
d182 1
a182 1
*       ReadPixel  graphics/rastport.h
@


37.1
log
@AutoDocs
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 37.0 91/01/07 15:27:04 spence Exp Locker: spence $
d39 2
a40 6
*   LONG    count;
*   struct  RastPort *rp;
*   UWORD   xstart, ystart;
*   UWORD   xstop, ystop;
*   UBYTE  *array;
*   struct  RastPort *temprp;
d72 1
a72 1
*       ReadPixel  graphics/rastport.h
d148 2
a149 6
*   LONG    count;
*   struct  RastPort *rp;
*   UWORD   xstart, ystart;
*   UWORD   width;
*   UBYTE  *array;
*   struct  RastPort *temprp;
@


37.0
log
@initial switchover from V36
@
text
@d5 1
a5 1
*   $Id: rpa8.asm,v 36.5 90/08/24 11:29:23 bart Exp Locker: spence $
d31 1
a31 1
*       ReadPixelArray8 -- read the pen number value of a rectangular array 
d33 1
a33 1
*       through to another x,y location within a certain RastPort.
d146 1
a146 1
*       right for count pixels.
@


36.5
log
@id
@
text
@d5 1
a5 1
*   $Id: $
@


36.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
*   $Header: rpa8.asm,v 36.3 89/08/11 15:49:15 bart Exp $
@


36.3
log
@optimise zero1
@
text
@d5 1
a5 1
*   $Header: rpa8.asm,v 36.2 89/08/11 12:47:54 bart Exp $
@


36.2
log
@assembly interface
@
text
@d5 1
a5 1
*   $Header: rpa8.asm,v 36.1 89/08/11 10:52:25 bart Exp $
d274 1
a274 1
    move.l	d5,16(a3)	; before builing the pen nos.
d352 1
a352 1
zero1:  ; source word (16 bits) is zero, clear next 16 dest bytes; d5 = 0
d354 1
a354 4
    move.l  d5,(a3)+        ; 1 2 3 4
    move.l  d5,(a3)+        ; 5 6 7 8
    move.l  d5,(a3)+        ; 9 10 11 12
    move.l  d5,(a3)+        ; 13 14 15 16
@


36.1
log
@integrate readpixline readpixarray into graphics
@
text
@d5 1
a5 1
*   $Header: rpa8.asm,v 36.0 89/08/11 09:35:58 bart Exp $
a83 8
    movem.l d2/d3/a2,-(sp)
    move.l  16(sp),a0           ; rp
    movem.l 20(sp),d0/d1/d2/d3  ; xstart, ystart, xstop, ystop
    movea.l 36(sp),a2           ; array
    movea.l 40(sp),a1           ; temprp
    jsr readpixelarray
    movem.l (sp)+,d2/d3/a2
    rts
a84 2
readpixelarray:

d119 1
a119 1
    jsr readpixelline
a192 10
    movem.l d2/a2,-(sp)
    move.l  12(sp),a0       ; rp
    movem.l 16(sp),d0/d1/d2 ; xstart, ystart, width
    movea.l 28(sp),a2       ; array
    movea.l 32(sp),a1       ; temprp
    jsr readpixelline
    movem.l (sp)+,d2/a2
    rts

readpixelline:
@


36.0
log
@added to rcs for updating
@
text
@d5 1
a5 1
*   $Header: rpa8.asm,v 36.0 89/05/29 15:48:05 bart Exp $
d28 1
a28 1
; graphics.library/ReadPixelArray8 **************************************
d57 1
a57 1
*				allocate at least ((((width+15)>>4)<<4)*(ystop-ystart+1)) bytes.
d63 1
a63 1
*				 temprp->BitMap->Planes[])
a81 1
    xref    _GfxBase
d84 5
a88 6
    movem.l d2/d3/a2/a6,-(sp)
    move.l  _GfxBase,a6
    move.l  20(sp),a0           ; rp
    movem.l 24(sp),d0/d1/d2/d3  ; xstart, ystart, xstop, ystop
    movea.l 40(sp),a2           ; array
    movea.l 44(sp),a1           ; temprp
d90 1
a90 1
    movem.l (sp)+,d2/d3/a2/a6
d151 1
a151 1
; graphics.library/ReadPixelLine8 ***************************************
d160 1
a160 1
*       d0					   a0 d0:16  d1:16   d2     a2    a1   
d186 1
a186 1
*				 temprp->BitMap->Planes[])
d203 5
a207 6
    movem.l d2/a2/a6,-(sp)
    move.l  _GfxBase,a6
    move.l  16(sp),a0       ; rp
    movem.l 20(sp),d0/d1/d2 ; xstart, ystart, width
    movea.l 32(sp),a2       ; array
    movea.l 36(sp),a1       ; temprp
d209 1
a209 1
    movem.l (sp)+,d2/a2/a6
d216 2
a217 2
	tst.l	rp_Layer(a0)
	beq.s	do_blit
d222 1
a222 1
	movem.l		a0/a1,-(sp)	
d224 1
a224 1
    movea.l    	rp_BitMap(a1),a1		; get BitMap pointer
d232 2
a233 2
    lsl.w    	#2,d5            		; build plane pointer offset in d5
    moveq.l	    #0,d6					; clear tmpras with this data
d236 1
a236 1
tmpshift_start:    						; fill temprp with defval
d239 1
a239 1
    bra.s    	tmploop_count			; clear this plane
d242 1
a242 1
    move.w    	d6,(a0)+        		; stuff proper word into tmpras plane
d249 1
a249 1
    bge.s		tmpshift_start			; loop for all planes
d251 1
a251 1
	movem.l		(sp)+,a0/a1
d253 2
a254 2
********************************************************************************

d269 1
a269 1
******************************************************************************
d291 4
a294 4
	move.l	d5,(a3)				; and make certain that the next
	move.l	d5,4(a3)			; 16 bytes of destination array
	move.l	d5,8(a3)			; are guaranteed to be cleared
	move.l	d5,16(a3)			; before builing the pen nos.
d297 1
a297 1
    beq     zero1       		; nope, so just zero the dest
d299 1
a299 1
    ; shoot, I guess we're just gonna have to figure out what's in it!
d405 2
a406 2
	swap	d5			    ; tmpdata upper word of d5.l, lower word clear
	move.b	(a3),d5		    ; 1
d409 1
a409 1
	move.b	(a3),d5		    ; 2
d412 1
a412 1
	move.b	(a3),d5		    ; 3
d431 1
a431 1
	swap	d5				; tmpdata upper byte of d5.w, lower byte clear
d464 1
a464 1
	move.l	d2,d0			; return count pixels
@
