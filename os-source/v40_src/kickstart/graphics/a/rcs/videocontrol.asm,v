head     39.10;
branch   ;
access   ;
symbols  rel39_24:39.9 rel39_18:39.9 rel39_97:39.7 rel39_90:39.7 rel39_89:39.4 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.2 rel39_64:39.2 rel39_61:39.2 rel39_60:39.2 rel39_55:39.2 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.1 rel39_35:39.0 rel39_34:39.0 V37_30:37.3 V37_29:37.3 V37_28:37.3 V37_27:37.3 V37_25:37.3 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.8 V36_208:1.8 V36_207:1.8 V36_205:1.8 V36_203:1.8 V36_202:1.8 V36_201:1.8 V36_200:1.8 V36_199:1.8 V36_198:1.8 V36_196:1.8 V36_195:1.8 V36_194:1.8 V36_193:1.8 V36_192:1.8 V36_191:1.8 V36_190:1.8 V36_189:1.8 V36_188:1.8 V36_187:1.8 V36_186:1.8 V36_185:1.8 V36_184:1.8 V36_183:1.8 V36_182:1.8 V36_181:1.8 V36_180:1.8;
locks    ; strict;
comment  @@;


39.10
date     93.05.31.14.37.59;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     93.03.12.12.25.56;  author chrisg;  state Exp;
branches ;
next     39.8;

39.8
date     93.02.15.17.33.25;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     92.09.24.13.38.35;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     92.09.24.13.36.18;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     92.09.17.15.09.52;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     92.09.03.15.37.22;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.01.10.39.57;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.28.13.37.24;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     92.02.25.13.08.07;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.29.46;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.03.10.49.57;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.06.14.11.08.43;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.04.11.14.26.04;  author bart;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.16.00.35;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.04.19.34.00;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.38;  author spence;  state Exp;
branches ;
next     1.8;

1.8
date     90.08.24.11.28.59;  author bart;  state Exp;
branches ;
next     1.7;

1.7
date     90.03.27.17.29.47;  author bart;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.20.11.05.13;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     89.03.03.17.23.15;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     89.02.14.10.09.05;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     89.02.01.17.53.57;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.23.16.20.41;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.09.19.20.43.55;  author dale;  state Exp;
branches ;
next     ;


desc
@New VideoControl procedure
@


39.10
log
@massive fixes to includes & autodocs.
@
text
@*******************************************************************************
*
*	$Id: videocontrol.asm,v 39.9 93/03/12 12:25:56 chrisg Exp Locker: chrisg $
*
*******************************************************************************

  include 'exec/types.i'     * Required data type definitions

	section	graphics
  xdef _VideoControl

  PAGE

******* graphics.library/VideoControl **************************************
*
*   NAME
*	VideoControl -- Modify the operation of a ViewPort's ColorMap (V36)
*	VideoControlTags -- varargs stub for VideoControl (V36)
*   SYNOPSIS
*	error = VideoControl( cm , tags )
*	d0                    a0   a1
*
*	ULONG VideoControl( struct ColorMap *, struct TagItem * );
*
*	error= VideoControlTags(cm, tags,...);
*
*
*   FUNCTION
*	Process the commands in the VideoControl command TagItem buffer 
*	using cm as the target, with respect to its "attached" ViewPort.
*
*	viewport commands:
*
*	VTAG_ATTACH_CM     [_SET        | _GET] -- set/get attached viewport
*	VTAG_VIEWPORTEXTRA [_SET        | _GET] -- set/get attached vp_extra 
*	VTAG_NORMAL_DISP   [_SET        | _GET] -- set/get DisplayInfoHandle
*	                                           (natural mode)
*	VTAG_COERCE_DISP   [_SET        | _GET] -- set/get DisplayInfoHandle 
*	                                           (coerced mode)
*	VTAG_PF1_BASE      [_SET        | _GET] -- set/get color base for
*	                                           first playfield. (V39)
*	VTAG_PF2_BASE      [_SET        | _GET] -- set/get color base for
*	                                           second playfield. (V39)
*	VTAG_SPODD_BASE    [_SET        | _GET] -- set/get color base for odd
*	                                           sprites. (V39)
*	VTAG_SPEVEN_BASE   [_SET        | _GET] -- set/get color base for even
*	                                           sprites. (V39)
*	VTAG_BORDERSPRITE  [_SET        | _GET] -- on/off/inquire sprites in 
*	                                           borders. (V39)
*	VTAG_SPRITERESN    [_SET        | _GET] -- set/get sprite resolution
*	              (legal values are SPRITERESN_ECS/_140NS/_70NS/_35NS.
*	               see graphics/view.h) (V39)
*	VTAG_PF1_TO_SPRITEPRI [_SET     | _GET] -- set/get playfield1 priority
*                                                  with respect to sprites (V39)
*	VTAG_PF2_TO_SPRITEPRI [_SET     | _GET] -- set/get playfield2 priority
*                                                  with respect to sprites (V39)
*	(These two require that the ColorMap is attached to a ViewPort to be
*	 effective).
*
*	genlock commands:
*
*	VTAG_BORDERBLANK   [_SET | _CLR | _GET] -- on/off/inquire blanking
*	VTAG_BORDERNOTRANS [_SET | _CLR | _GET] -- on/off/inquire notransparency
*	VTAG_CHROMAKEY     [_SET | _CLR | _GET] -- on/off/inquire chroma mode
*	VTAG_BITPLANEKEY   [_SET | _CLR | _GET] -- on/off/inquire bitplane mode
*	VTAG_CHROMA_PEN    [_SET | _CLR | _GET] -- set/clr/get chromakey pen #
*	VTAG_CHROMA_PLANE  [_SET |      | _GET] -- set/get bitplanekey plane #
*
*	control commands:
*
*	VTAG_IMMEDIATE	- normally, VideoControl changes do not occur until the
*	        next MakeVPort. Using this tag, some changes can be made to
*	        happen immediately. The tag data is a pointer to a longword
*	        flag variable which will be cleared if all changes happened
*	        immediately. See the example. (V39)
*
*	VTAG_FULLPALETTE   [_SET | _CLR | _GET] -- enable/disable loading of all
*	        colors in the copper list.
*	        Normally, graphics will only load the color which are necessary
*	        for the viewport, based upon the screen depth and mode. In order
*	        to use the color palette banking features, you may need to use
*	        this tag to tell graphics to load ALL colors, regardless of
*	        screen depth. (V39)
*
*	VC_IntermediateCLUpdate
*	VC_IntermediateCLUpdate_Query
*	         When set, graphics will update the intermediate copper
*		 lists on colour changes. When FALSE, graphics won't update
*	         the intermediate copperlists, so ScrollVPort(), 
*	         ChangeVPBitMap() and colour loading functions will be faster.
*	         This value is TRUE by default. (V40)
*
*	VC_NoColorPaletteLoad
*	VC_NoColorPaletteLoad_Query
*	         When set, only colour 0 will be loaded for this ViewPort,
*	         hence the inter-ViewPort gap will be smaller. The colours for
*	         this ViewPort are inherited from the next higher ViewPort. The
*		 results are undefined if this is the first or only ViewPort in
*	         the display, and undefined when used in conjunction with
*	         VTAG_FULLPALETTE (!?!).
*	         This value is FALSE by default. (V40)
*
*	VC_DUALPF_Disable
*	VC_DUALPF_Disable_Query
*		When set, disables the setting of the dual-playfield
*		bit in bplcon0. When used with a dual-playfield mode
*		screen, this allows using separate scroll and bitmaps
*		for the odd and even bitplanes, without going through
*		the normal dual-playfield priority and palette selection.
*		With appropriate palette setup, this can be used for
*		transparency effects, etc.
*
*	copper commands
*
*	VTAG_USERCLIP      [_SET | _CLR | _GET] -- on/off/inquire clipping of
*	                                           UserCopperList at bottom
*	                                           edge of ColorMap->cm_vp 
*	                                           (defaults to off)
*
*	buffer commands:
*
*	VTAG_NEXTBUF_CM                         -- link to more VTAG commands
*	VTAG_END_CM                             -- terminate command buffer
*
*	batch mode commands:
*
*	(if you want your videocontrol taglist to be processed in "batch"
*	 mode, that is, at the next MakeVPort() for the ColorMap->cm_vp;
*	 you may install a static list of videocontrol TagItems into the 
*	 ColorMap with the BATCH_ITEMS_SET command; and then enable/disable
*	 batch mode processing of those items via the BATCH_CM control
*	 command)
*				
*	VTAG_BATCH_CM      [_SET | _CLR | _GET] -- on/off/inquire batch mode
*	VTAG_BATCH_ITEMS   [_SET | _ADD | _GET] -- set/add/get batched TagLists
*
*	private commands (used internally by intuition -- do not call):
*
*	VTAG_VPMODEID      [_SET | _CLR | _GET] -- force GetVPModeID() return
*	
*
*   INPUTS
*	cm   = pointer to struct ColorMap obtained via GetColorMap().
*	tags = pointer to a table of videocontrol tagitems.
*
*   RESULT
*	error = NULL if no error occurred in the control operation.
*	(non-NULL if bad colormap pointer, no tagitems or bad tag) 
*
*	The operating characteristics of the ColorMap and its attached 
*	ViewPort are modified. The result will be incorporated into the 
*	ViewPort when its copper lists are reassembled via MakeVPort().
*
*	Note that you must NOT change colors in the viewport (via SetRGB4(),
*	LoadRGB4(), SetRGB4(), etc.) after changing any of the color palette
*	offsets (VTAG_PF1_BASE, etc), without first remaking the ViewPort.
*
*   NOTES
*	Sprite resolutions is controlled by two sets of tags, SPRITERESN
*	and DEFSPRITERESN. If you don't set the sprite resolution, it will
*	follow the intuition-controlled "default" sprite resolution. Setting
*	the sprite resolution to one of the SPRITERESN_ values will allow the
*	application to override intuition's control of it.
*
*	This function will modify the contents of the TagList you pass to it by
*	changing _GET tags to the corresponding _SET or _CLR tag. The
*	exceptions to this rule are documented as such above (such as
*	VTAG_IMMEDIATE).
*
*	The new tags added for V40 have the prefix VC_ instead of VTAG_. These
*	tags work in the same manner as all other tags in the system, and will
*	not be modified by VideoControl().
*
*   EXAMPLE
*	must_remake=-1;
*	error=VideoControl(myvp->ColorMap,VTAG_BORDERBLANK_SET,-1,
*	                   (GFXBase->lib_Version>=39)?VTAG_IMMEDIATE:TAG_IGNORE,
*						&must_remake);
*	if (must_remake) { MakeVPort(myview,myvp); MrgCop(myview); }
*
*   EXAMPLE
*	struct TagItem VCTags[] =
*	{
*	    {VTAG_BORDERBLANK_GET, NULL},
*	    {VTAG_SPRITERESN_SET, SPRITERESN_35NS},
*	    {TAG_DONE, NULL},
*	};
*	BOOL bblank = FALSE;
*
*	if (VideoControl(cm, VCTags) == NULL)
*	{
*	    bblank = (VCTags[0].ti_Tag == VTAG_BORDERBLANK_SET);
*	}
*
*   EXAMPLE
*	struct TagItem VCTags[] =
*	{
*	    {VC_NoColorPaletteLoad_Query, NULL},
*	    {TAG_DONE},
*	};
*	ULONG query;
*
*	VCTags[0].ti_Data = (ULONG)&query;
*	if (VideoControl(cm, VCTags) == NULL)
*	{
*	    printf("Palette loading is %s\n", (query ? "off" : "on"));
*	}
*
*   BUGS
*
*   SEE ALSO
*	graphics/videocontrol.h, GetColorMap(), FreeColorMap()
*
******************************************************************************
	
	xref	_videocontrol
_VideoControl:
	movem.l	a0/a1,-(sp)
	jsr	_videocontrol
	addq.l	#8,sp
	rts

	end
@


39.9
log
@autodoc for dualpf_disable.
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.8 93/02/15 17:33:25 spence Exp Locker: chrisg $
d18 1
a18 1
*
d24 3
@


39.8
log
@V40 tags documented
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.7 92/09/24 13:38:35 chrisg Exp Locker: spence $
d99 10
@


39.7
log
@autodoc
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.6 92/09/24 13:36:18 chrisg Exp Locker: chrisg $
d78 3
a80 3
*	        to use the color palette banking features, you may need to use this
*	        tag to tell graphics to load ALL colors, regardless of screen
*	        depth. (V39)
d82 18
d157 4
d177 1
a177 1
*	if (VideoControl(cm, &VCTags) == NULL)
d180 14
@


39.6
log
@autodoc
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.5 92/09/17 15:09:52 spence Exp Locker: chrisg $
d143 1
a143 1
						&must_remake);
@


39.5
log
@Clean up the autodocs
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.4 92/09/03 15:37:22 spence Exp Locker: spence $
d142 2
a143 1
*	                   VTAG_IMMEDIATE,&must_remake);
@


39.4
log
@Autodoc spelling corrections
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.3 92/07/01 10:39:57 chrisg Exp Locker: spence $
d17 1
a17 1
*       VideoControl -- Modify the operation of a ViewPort's ColorMap (V36)
d20 2
a21 2
*       error = VideoControl( cm , tags )
*       d0                    a0   a1
d38 1
a38 1
*	                                           first playfield.
d40 1
a40 1
*	                                           second playfield.
d42 1
a42 1
*	                                           sprites.
d44 3
a46 2
*	                                           sprites.
*	VTAG_BORDERSPRITE  [_SET        | _GET] -- on/off/inquire sprites in borders
d49 1
a49 1
*	               see graphics/view.h)
d51 1
a51 1
*                                                  with respect to sprites
d53 1
a53 1
*                                                  with respect to sprites
d69 4
a72 4
*		next MakeVPort. Using this tag, some changes can be made to
*		happen immediately. The tag data is a pointer to a longword
*		flag variable which will be cleared if all changes happened
*		immediately. See the example.
d74 7
a80 7
*	VTAG_FULLPALETTE   [_SET |      | _GET] -- enable/disable loading of all
*						colors in the copper list.
*		Normally, graphics will only load the color which are necessary
*		for the viewport, based upon the screen depth and mode. In order
*		to use the color palette banking features, you may need to use this
*		tag to tell graphics to load ALL colors, regardless of screen
*		depth.
d85 3
a87 3
*						   UserCopperList at bottom
*						   edge of ColorMap->cm_vp 
*						   (defaults to off)
d91 2
a92 2
*	VTAG_NEXTBUF_CM    		        -- link to more VTAG commands
*	VTAG_END_CM    		    	        -- terminate command buffer
d117 1
a117 1
*       (non-NULL if bad colormap pointer, no tagitems or bad tag) 
d127 1
a127 2
*	NOTES
*
d134 4
a139 1
*
d142 1
a142 1
*		VTAG_IMMEDIATE,&must_remake);
d145 13
@


39.3
log
@docs.
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.2 92/02/28 13:37:24 spence Exp Locker: chrisg $
d95 1
a95 1
*	(if you want your videocontol taglist to be processed in "batch"
d97 1
a97 1
*	 you may intall a static list of videocontrol TagItems into the 
d115 1
a115 1
*	error = NULL if no error occured in the control operation.
@


39.2
log
@VTAG_PFx_TO_SPRITEPRI doc
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.1 92/02/25 13:08:07 spence Exp Locker: spence $
d65 16
d125 17
@


39.1
log
@Autodoc for VTAG_SPRITERESN
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 39.0 91/08/21 17:29:46 chrisg Exp Locker: spence $
d49 6
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 38.0 91/07/03 10:49:57 chrisg Exp Locker: chrisg $
d34 1
a34 1
*							   (natural mode)
d36 13
a48 10
*							   (coerced mode)
*	VTAG_PF1_BASE 	   [_SET	| _GET] -- set/get color base for
*						   first playfield.
*	VTAG_PF2_BASE  	   [_SET	| _GET] -- set/get color base for
*						   second playfield.
*	VTAG_SPODD_BASE    [_SET	| _GET] -- set/get color base for odd
*						   sprites.
*	VTAG_SPEVEN_BASE   [_SET	| _GET] -- set/get color base for even
*						   sprites.
*	VTAG_BORDERSPRITE  [_SET	| _GET] -- on/off/inquire sprites in borders
@


38.0
log
@updated doc and checked in under v38.
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 37.4 91/06/14 11:08:43 chrisg Exp Locker: chrisg $
@


37.4
log
@  Changed autodoc for new color base set tags.
@
text
@d3 1
a3 1
*	$Id: videocontrol.asm,v 37.3 91/04/11 14:26:04 bart Exp Locker: chrisg $
d96 4
@


37.3
log
@more docs
@
text
@d3 1
a3 1
*	$Id: VideoControl.asm,v 37.2 91/02/12 16:00:35 chrisg Exp Locker: bart $
d31 3
a33 3
*	VTAG_ATTACH_CM     [_SET        | _GET] -- set\get attached viewport
*	VTAG_VIEWPORTEXTRA [_SET        | _GET] -- set\get attached vp_extra 
*	VTAG_NORMAL_DISP   [_SET        | _GET] -- set\get DisplayInfoHandle
d35 1
a35 1
*	VTAG_COERCE_DISP   [_SET        | _GET] -- set\get DisplayInfoHandle 
d37 9
d49 6
a54 6
*	VTAG_BORDERBLANK   [_SET | _CLR | _GET] -- on\off\inquire blanking
*	VTAG_BORDERNOTRANS [_SET | _CLR | _GET] -- on\off\inquire notransparency
*	VTAG_CHROMAKEY     [_SET | _CLR | _GET] -- on\off\inquire chroma mode
*	VTAG_BITPLANEKEY   [_SET | _CLR | _GET] -- on\off\inquire bitplane mode
*	VTAG_CHROMA_PEN    [_SET | _CLR | _GET] -- set\clr\get chromakey pen #
*	VTAG_CHROMA_PLANE  [_SET |      | _GET] -- set\get bitplanekey plane #
d58 1
a58 1
*	VTAG_USERCLIP      [_SET | _CLR | _GET] -- on\off\inquire clipping of
d77 2
a78 2
*	VTAG_BATCH_CM      [_SET | _CLR | _GET] -- on\off\inquire batch mode
*	VTAG_BATCH_ITEMS   [_SET | _ADD | _GET] -- set\add\get batched TagLists
@


37.2
log
@edited autotodoc
@
text
@d3 1
a3 1
*	$Id: VideoControl.asm,v 37.1 91/02/04 19:34:00 spence Exp Locker: chrisg $
d47 7
d56 1
a56 1
*	VTAG_NEXTBUF_CM    		        -- link to further commands
d59 16
@


37.1
log
@AutoDocs
@
text
@d3 1
a3 1
*	$Id: VideoControl.asm,v 37.0 91/01/07 15:26:38 spence Exp Locker: spence $
d21 1
a21 1
*       d0               	a0   a1
d23 1
a23 2
*	struct ColorMap *cm;
*	struct TagItem   tags[];
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: VideoControl.asm,v 1.8 90/08/24 11:28:59 bart Exp Locker: spence $
d17 1
a17 1
*       VideoControl -- Modify the operation of a ViewPort's ColorMap
@


1.8
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.6 90/03/20 11:05:13 bart Exp $
@


1.6
log
@doc fixes for 1.4
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.5 89/03/03 17:23:15 bart Exp $
@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.4 89/02/14 10:09:05 bart Exp $
d20 1
a20 1
*       success = VideoControl( cm , tags )
d34 4
a37 2
*	VTAG_NORMAL_DISP   [_SET        | _GET] -- set\get natural DisplayInfo
*	VTAG_COERCE_DISP   [_SET        | _GET] -- set\get coerced DisplayInfo 
d59 3
@


1.4
log
@checkpoint 02.14.89
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.3 89/02/01 17:53:57 bart Exp $
d17 1
a17 2
*       VideoControl -- Modify the operation of a ColorMap and/or
*			ViewPort
d20 2
a21 2
*       success = VideoControl( cm , tbl )
*         d0               	a0    a1
d24 1
a24 1
*	struct TagItem   tbl[];
d27 2
a28 2
*	Process the commands in the VideoControlCommand buffer using
*	cm as the target.
d30 22
d53 2
a54 2
*	cm = pointer to struct ColorMap
*	tbl = pointer to a table of tagitems interpereted as videocommands
d57 3
a59 2
*	The operating characteristics of the ColorMap/ViewPort are
*	modified and the result is displayed.
d64 1
@


1.3
log
@checkpoint - a2024 10hz and 15hz works from 32 bit id
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.2 89/01/23 16:20:41 bart Exp $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: VideoControl.asm,v 1.1 88/09/19 20:43:55 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: VideControl.asm,v 1.1 88/05/01 15:37:55 dale Exp $
d25 1
a25 1
*	VideoControlCommands *tbl;
d33 1
a33 1
*	tbl = pointer to a table of commands
@
