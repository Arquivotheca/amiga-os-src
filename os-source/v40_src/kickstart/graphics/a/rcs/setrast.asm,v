head     39.6;
branch   ;
access   ;
symbols  rel39_24:39.6 rel39_18:39.6 rel39_97:39.6 rel39_90:39.6 rel39_89:39.6 rel39_82:39.6 rel39_76:39.6 rel39_71:39.6 rel39_65:39.6 rel39_64:39.6 rel39_61:39.6 rel39_60:39.6 rel39_55:39.6 rel39_52:39.6 rel39_47:39.6 rel39_39:39.6 rel39_38:39.6 rel39_37:39.6 rel39_35:39.5 rel39_34:39.5 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


39.6
date     92.02.26.10.39.19;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     91.11.25.16.06.24;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     91.11.18.11.42.52;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     91.11.15.17.48.11;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.11.15.11.09.58;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.15.11.01.37;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.56;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.14.39.28;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.28.13.48.50;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.55.25;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.22;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.08.24.11.28.38;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.16.26.26;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     88.09.21.21.28.15;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.17.22.15.01;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.04;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.6
log
@ changed interleaved ecognition scheme again.
@
text
@*******************************************************************************
*
*	$Id: setrast.asm,v 39.5 91/11/25 16:06:24 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	include 'exec/types.i'

	include 'graphics/gfx.i'
	include 'graphics/rastport.i'
	include 'graphics/gfxbase.i'
	include 'graphics/clip.i'
	include 'graphics/gfxbase.i'

	include 'hardware/blit.i'
	include 'hardware/custom.i'
	include 'submacs.i'
	include '/sane_names.i'
	include	'/macros.i'

	section	graphics
    xdef    _SetRast
	xref	_LVOBltClear
	xref	_LVOOwnBlitter
	xref	_LVODisownBlitter
	xref	waitblitdone
	xref	_custom
	xref	bltbytes

******* graphics.library/SetRast ***********************************************
*
*   NAME
*       SetRast - Set an entire drawing area to a specified color.
*
*   SYNOPSIS
*       SetRast( rp, pen )
*                a1  d0
*
*	void SetRast( struct RastPort *, UBYTE );
*
*   FUNCTION
*       Set the entire contents of the specified RastPort to the
*       specified pen.
*
*   INPUTS
*       rp - pointer to RastPort structure
*       pen - the pen number (0-255) to jam into bitmap
*
*   RESULT
*       All pixels within the drawing area are set to the
*	selected pen number.
*
*   BUGS
*
*   SEE ALSO
*	RectFill() graphics/rastport.h
*
******************************************************************************
_SetRast:
	
	move.l	rp_Layer(a1),d1
	if <>					* is there a layer?
		movem.l	a2/a3/a5,-(sp)
		move.l	d1,a5
		LOCKLAYER

		move.l	a1,a2		* save rastport in a2
		move.l	lr_ClipRect(a5),d1
		while <>
			move.l	d1,a3		* check a3 cliprect
			if cr_lobs(a3).l
				move.l	cr_BitMap(a3),d1	* are there any bits?
				if <>
					move.l	d1,a1			* set up bitmap
					move.b	rp_Mask(a2),d1	* writemask
*											* d0 = color
					bsr.s	setrast_bm
				endif
			else
				bsr bigsetrast1
			endif
			move.l	(a3),d1			* next ClipRect
		whend

*		check for super bitmap
		move.l	lr_SuperBitMap(a5),d1
		if <>
			move.l	d1,a0			* save here for now
			move.b	rp_Mask(a2),d1	* writemask
			move.l	a0,a1			* bitmap
*						* d0 = color
			bsr.s	setrast_bm
		endif
		UNLOCKLAYER
		movem.l	(sp)+,a2/a3/a5
		rts
	endif
*	drop into setrast_bm
	move.b	rp_Mask(a1),d1	* get writemask
	move.l	rp_BitMap(a1),a1	* get bitmap pointer

setrast_bm:
* inputs = (color = d0, writemask = d1, bm = a1)
* other variables   d2 = counter d3 = Depth
* new variables		Planes = a1

	movem.l	d2/d3/d4/d5/d6/a0/a3,-(sp)
*	calculate constant bltsize for each blit
	ifne bm_BytesPerRow
		fail
	endc
*	move.w	bm_BytesPerRow(a1),d4
	move.w	bm_Rows(a1),d4
	swap	d4
	move.w	(a1),d4

	cmp.w	#UNLIKELY_WORD,bm_Pad(a1)
	bne.s	non_interleaved
	move.l	bm_Planes+4(a1),d2
	sub.l	bm_Planes(a1),d2
	move.w	bm_BytesPerRow(a1),d5
	ext.l	d5
	cmp.l	d5,d2
	bls.s	is_interleaved
non_interleaved:

	moveq	#0,d2
	move.b	bm_Depth(a1),d3
	lea	bm_Planes(a1),a3
	move.l	d1,d5	; writemask
	move.l	d0,d6	; pencolor

	while d2<d3.b
		btst d2,d5
		if <>
			btst	d2,d6
			if <>
				move.l	#$FFFF0006,d1
			else
				move.l	#$00000002,d1
			endif
			move.l	(a3),a1
			move.l	d4,d0
			jsr	_LVOBltClear(a6)
		endif
		addq.l	#4,a3
		addq.b	#1,d2
	whend
	move.l	d5,d1
	move.l	d6,d0

	movem.l	(sp)+,d2/d3/d4/d5/d6/a0/a3
    rts

is_interleaved:
; must do an interleaved bitmap clear. d0=color d1=mask bm=a1
	movem.l	a2/d0/d1,-(a7)
	lea	_custom,a0
	move.w	bm_Rows(a1),d2
	move.l	bm_Planes+4(a1),d3
	sub.l	bm_Planes(a1),d3	; d3=# of bytes to blit
	move.w	bm_BytesPerRow(a1),d4
	sub	d3,d4			; d4=blitter modulo
	lsr.l	#1,d3			; d3=# of words to blit
	btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)
	bne.s	have_big_blits
	lsl	#6,d2
	and	#63,d3
	add.w	d3,d2
have_big_blits:
	lea	bm_Planes(a1),a2
	moveq	#0,d5
	move.b	bm_Depth(a1),d5
	move.w	#$100,d6		; USED
	OWNBLITTER
	bra.s	end_loop
blit_loop:
	move.l	(a2)+,a3		; planeptr
	lsr.w	#1,d0
	scs	d6
	lsr.w	#1,d1			; masked?
	bcc.s	end_loop
	WAITBLITDONE	a0
	clr.w	bltcon1(a0)
	move.w	d4,bltdmod(a0)
	move.w	d6,bltcon0(a0)
	move.l	a3,bltdpt(a0)
	btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)
	bne.s	have_big_blits1
	move.w	d2,bltsize(a0)		; go!!
	bra.s	end_loop
have_big_blits1:
	move.w	d2,bltsizv(a0)
	move.w	d3,bltsizh(a0)		; go!!
end_loop:
	dbra	d5,blit_loop
	DISOWNBLITTER
	movem.l	(a7)+,a2/d0/d1
	movem.l	(sp)+,d2/d3/d4/d5/d6/a0/a3
	rts
			

bigsetrast1:
;
; internal graphics routine, called by setrast.asm for cliprects that are onscreen.
;
; bigsetrast1(a3=cr,d0=color,a2=w)
;
; ok to trash a2/d1/a0/a1
;

	movem.l	d0/d2/d3/d4/d5/d7/a3-a5,-(a7)
	move	d0,d7				; d7=color
	move.l	rp_BitMap(a2),a5		; a5=w->BitMap
	move	bm_BytesPerRow(a5),d5
	move	cr_MinX(a3),d0
	move	cr_MaxX(a3),d1
	bsr	bltbytes
	move	d0,d2				; d2=bltbytes


	move	cr_MaxY(a3),d3
	move	cr_MinY(a3),d1
	sub	d1,d3
	addq	#1,d3				; d3=maxy-miny+1=bltvsize

	mulu	d5,d1
	move.l	d1,a4
	move	cr_MinX(a3),d1
	lsr	#3,d1
	add	d1,a4				; a4=dstoffset=(MinY*BytesPerRow)+minx>>3

	OWNBLITTER

	lea	_custom,a0

	sub	d2,d5				; d5=BytesPerRow-bltbytes=modulus

	lsr	#1,d2				; d2=bltbytes>>1=blthsize

	WAITBLITDONE	a0
	move	d5,bltdmod(a0)
	move	d5,bltcmod(a0)
	clr.w	bltcon1(a0)
	moveq	#-1,d0
	move	d0,bltadat(a0)
	move	cr_MinX(a3),d1
	and	#$0f,d1
	lsr	d1,d0
	move	d0,bltafwm(a0)
	moveq	#15,d1
	move	cr_MaxX(a3),d0
	and	#15,d0
	sub	d0,d1
	moveq	#-1,d0
	lsl	d1,d0
	move	d0,bltalwm(a0)

	moveq	#1,d1				; d1=mask
	moveq	#0,d0
	move.b	bm_Depth(a5),d0			; could this be zero?
	lea	bm_Planes(a5),a5		; plane ptr

	btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)
	bne.s	is_new_blitter
	lsl	#6,d3
	and	#63,d2
	or	d3,d2				; d2=bltsize for old blitter
	bra.s	end_of_loop
is_new_blitter:
	and	#$7ff,d2
	and	#$7fff,d3
	move	d3,bltsizv(a0)
	bra.s	end_of_loop

plane_loop:
	move.l	(a5)+,a1			; a1=plane ptr
	move.b	rp_Mask(a2),d3
	and.b	d1,d3				; write this plane?
	beq.s	no_write_this_plane
	add.l	a4,a1
	move.w	#DEST+SRCC+NANBC+NABC,d4
	move.b	d1,d3
	and.b	d7,d3
	beq.s	no_c1
	or.w	#ABC+ABNC+ANBC+ANBNC,d4
no_c1:	WAITBLITDONE	a0
	move	d4,bltcon0(a0)
	move.l	a1,bltdpt(a0)
	move.l	a1,bltcpt(a0)
	btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)
	bne.s	new_blitter
	move	d2,bltsize(a0)			; go!
	bra.s	no_write_this_plane
new_blitter:
	move	d2,bltsizh(a0)			; go!
no_write_this_plane
	add	d1,d1
end_of_loop:
	dbra	d0,plane_loop

	DISOWNBLITTER
	movem.l	(a7)+,d0/d2/d3/d4/d5/d7/a3-a5
	rts

	end
@


39.5
log
@forgot to poke bltcon1
broek CED menus.
@
text
@d3 1
a3 1
*	$Id: setrast.asm,v 39.4 91/11/18 11:42:52 chrisg Exp Locker: chrisg $
d117 1
a117 1
	cmp.b	#UNLIKELY_BYTE,bm_Flags(a1)
d119 6
a124 3
	move.w	a1,d2
	cmp.w	bm_Pad(a1),d2
	beq.s	is_interleaved
@


39.4
log
@made work for interleaved bitmaps with adr key
@
text
@d3 1
a3 1
*	$Id: setrast.asm,v 39.3 91/11/15 17:48:11 chrisg Exp Locker: chrisg $
d181 1
@


39.3
log
@ fixed setrast agin for interleaved bitmaps
@
text
@d3 1
a3 1
*	$Id: setrast.asm,v 39.2 91/11/15 11:09:58 chrisg Exp Locker: chrisg $
d119 2
a120 1
	cmp.w	#UNLIKELY_WORD,bm_Pad(a1)
@


39.2
log
@ fixed error.
@
text
@d3 1
a3 1
*	$Id: setrast.asm,v 39.1 91/11/15 11:01:37 chrisg Exp Locker: chrisg $
d120 1
a120 3
	bne.s	non_interleaved
	move.l	bm_Planes+4(a1),d4
	sub.l	bm_Planes(a1),d4
d150 47
@


39.1
log
@ added support for interleaved bitmaps!
@
text
@d3 1
a3 1
*	$Id: setrast.asm,v 39.0 91/08/21 17:27:56 chrisg Exp Locker: chrisg $
d119 2
a120 2
	cmp.w	#UNLIKLEY_WORD,bm_Pad(a1)
	beq.s	is_interleaved
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: SetRast.asm,v 37.3 91/05/01 14:39:28 chrisg Exp Locker: chrisg $
d19 1
a107 1

d116 8
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: SetRast.asm,v 37.2 91/02/28 13:48:50 chrisg Exp Locker: chrisg $
@


37.2
log
@ Downcoded internal routine bigsetrast1. Saved lots of bytes.
@
text
@d3 1
a3 1
*	$Id: SetRast.asm,v 37.1 91/02/12 15:55:25 chrisg Exp Locker: chrisg $
d18 1
a18 1
	include '../sane_names.i'
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: SetRast.asm,v 37.0 91/01/07 15:26:22 spence Exp Locker: chrisg $
a21 1
    xref    _bigsetrast1
d23 2
d27 2
d79 1
a79 7
				move.l	d0,-(sp)	* save d0 on stack
				move.l	a2,-(sp)	* rastport
    			move.l  d0,-(sp)    * push color on stack
				move.l	a3,-(sp)	* currect cr
				jsr _bigsetrast1
    			lea 12(sp),sp       * remove args from stack
				move.l	(sp)+,d0	* restore color d0
d144 103
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: SetRast.asm,v 1.5 90/08/24 11:28:38 bart Exp Locker: spence $
d35 1
a35 2
*	struct RastPort *rp;
*	UBYTE pen;
d46 2
a47 1
*       The drawing area becomes the selected pen number.
d52 1
a52 1
*	RectFill graphics/rastport.h
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: SetRast.asm,v 1.3 88/09/21 21:28:15 dale Exp $
@


1.3
log
@folded big/small blitter routines into one routine.
@
text
@d3 1
a3 1
*	$Header: SetRast.asm,v 1.2 88/06/17 22:15:01 dale Exp $
@


1.2
log
@SetRast for Big blits.
@
text
@d3 1
a3 1
*	$Header: SetRast.asm,v 1.1 88/05/01 15:38:04 dale Exp $
d22 1
a22 1
    xref    _setrast1,_bigsetrast1
a79 4
			btst	#GFXB_BIG_BLITS,gb_ChipRevBits0(a6)
			if =
    				jsr _setrast1       * call C routine for layers
			else
a80 1
			endif
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: SetRast.asm,v 33.3 86/10/08 16:41:17 dale Exp $
d13 1
d22 2
a23 1
    xref    _setrast1
d80 6
a85 1
    			jsr _setrast1       * call C routine for layers
d98 1
a98 1
*									* d0 = color
d114 1
a114 1
	movem.l	d2/d3/d4,-(sp)
d121 2
a123 5
	asr.w	#1,d4	* convert to words
	and.w	#$3F,d4
	move.w	bm_Rows(a1),d2
	asl.w	#6,d2
	or.w	d2,d4		* BltSize
d127 3
a129 6
	lea		bm_Planes(a1),a1
	lea		_custom,a0
	OWNBLITTER
	WAITBLITDONE a0
	move.w	d2,bltcon1(a0)		* <-- 0
	move.w	d2,bltmdd(a0)		* <-- 0
d132 1
a132 1
		btst d2,d1
d134 1
a134 1
			btst	d2,d0
d136 1
a136 2
				WAITBLITDONE a0
				move.w	#DEST+$FF,bltcon0(a0)
d138 1
a138 2
				WAITBLITDONE a0
				move.w	#DEST,bltcon0(a0)
d140 3
a142 2
			move.l	(a1),bltptd(a0)
			move.w	d4,bltsize(a0)
d144 1
a144 1
		addq.l	#4,a1
d147 2
d150 1
a150 2
	DISOWNBLITTER
	movem.l	(sp)+,d2/d3/d4
@
