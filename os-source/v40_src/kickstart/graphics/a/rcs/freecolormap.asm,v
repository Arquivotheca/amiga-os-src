head     38.3;
branch   ;
access   ;
symbols  rel39_24:38.3 rel39_18:38.3 rel39_97:38.3 rel39_90:38.3 rel39_89:38.3 rel39_82:38.3 rel39_76:38.3 rel39_71:38.3 rel39_65:38.2 rel39_64:38.2 rel39_61:38.2 rel39_60:38.2 rel39_55:38.1 rel39_52:38.1 rel39_47:38.1 rel39_39:38.1 rel39_38:38.1 rel39_37:38.1 rel39_35:38.1 rel39_34:38.1 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


38.3
date     92.07.01.10.19.58;  author chrisg;  state Exp;
branches ;
next     38.2;

38.2
date     92.05.19.13.11.58;  author chrisg;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.11.11.43.11;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.03.10.45.51;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.30.08.33.24;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.15.11.33.57;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.13.38.52;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.24.43;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.07.27.16.38.34;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.17.14.15;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     88.05.03.13.24.33;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.01.20.39.14;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.17;  author dale;  state Exp;
branches ;
next     ;


desc
@@


38.3
log
@made freecm(null) OK.
@
text
@*******************************************************************************
*
*	$Id: freecolormap.asm,v 38.2 92/05/19 13:11:58 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	section	graphics
    xdef    _FreeColorMap
******* graphics.library/FreeColorMap ****************************************
*
*   NAME
*       FreeColorMap -- Free the ColorMap structure and return memory
*						to free memory pool.
*
*   SYNOPSIS
*       FreeColorMap( colormap )
*                       a0
*
*	void FreeColorMap(struct ColorMap *);
*
*   FUNCTION
*	Return the memory to the free memory pool that was allocated
*	with GetColorMap.
*
*   INPUTS
*	colormap - pointer to ColorMap allocated with GetColorMap.
*		
*		  Passing a NULL pointer (meaning "do nothing") is 
*		  acceptable (V39).
*
*   RESULT
*	The space is made available for others to use.
*
*   BUGS
*
*   SEE ALSO
*       SetRGB4() GetColorMap() graphics/view.h
******************************************************************************

	include 'exec/types.i'
	include '/view.i'
	include	'graphics/gfxbase.i'

	xref	_LVOFreeMem
	xref	get_genlock_byte_count

_FreeColorMap:
*	We now check for ptrs being there first before
*	freeing the memory. This is needed to GetColorMap
*	can use FreeColorMap for cleanup
	cmp.w	#0,a0
	beq.s	an_rts
	movem.l	a2/a6,-(sp)		* save my gfxbase
	move.l	gb_ExecBase(a6),a6	* get execbase

	move.l  a0,a2
	move.l	cm_ColorTable(a0),d1
	if <>
		moveq	#0,d0
		move.w	cm_Count(a0),d0
		add.l	d0,d0		* 1 word per entry
		move.l	d1,a1
		jsr	_LVOFreeMem(a6)	* free off colortable
	endif

	move.l	cm_LowColorBits(a2),d1
	if <>
		moveq	#0,d0
		move.w	cm_Count(a2),d0
		add.l	d0,d0		* 1 word per entry
		move.l	d1,a1
		jsr	_LVOFreeMem(a6)	* free off low colortable
	endif

	move.l	cm_PalExtra(a2),d1
	if	<>
		move.l	d1,a1
		moveq	#0,d0
		move.w	cm_Count(a2),d0
		move.l	d0,d1
		add.l	d0,d0	;*2
		add.l	d1,d0	; *3
		add.l	#pe_SIZEOF,d0
		jsr	_LVOFreeMem(a6)
	endif

	lea	-4(a2),a1		* get back pointer to colormap structure
	moveq	#cm_SIZEOF+4,d0
	jsr	_LVOFreeMem(a6)	* free off colormap structure
	movem.l	(sp)+,a2/a6	* restore GfxBase
an_rts:
	rts

	end
@


38.2
log
@ added magic cookie, plus changed for new 16 bit ref counters for
pallete sharing.
@
text
@d3 1
a3 1
*	$Id: freecolormap.asm,v 38.1 91/11/11 11:43:11 chrisg Exp Locker: chrisg $
d26 4
a29 1
*	colormap - pointer to ColorMap allocated with GetColorMap
d51 2
d91 1
@


38.1
log
@removed genlock transparency bits stuff.
@
text
@d3 1
a3 1
*	$Id: freecolormap.asm,v 38.0 91/07/03 10:45:51 chrisg Exp Locker: chrisg $
d75 3
a77 1
		add.l	d0,d0
d82 2
a83 2
	move.l	a2,a1	* get back pointer to colormap structure
	moveq	#cm_SIZEOF,d0
@


38.0
log
@  Made it free up the attached palextra structure if it is there.
@
text
@d3 1
a3 1
*	$Id: Freecolormap.asm,v 37.3 91/05/30 08:33:24 chrisg Exp Locker: chrisg $
a76 8
		jsr	_LVOFreeMem(a6)
	endif

	move.l	a2,a0			* get struct ColorMap * again
	move.l	cm_TransparencyBits(a0),d1
	if <>
		jsr	get_genlock_byte_count
		move.l	d1,a1
@


37.3
log
@ Modified to free up low bits info for 24 bit palettes.
@
text
@d3 1
a3 1
*	$Id: FreeColorMap.asm,v 37.2 91/04/15 11:33:57 chrisg Exp Locker: chrisg $
d68 10
@


37.2
log
@ changed to use gb_ExecBase
,
@
text
@d3 1
a3 1
*	$Id: FreeColorMap.asm,v 37.1 91/02/12 13:38:52 chrisg Exp Locker: chrisg $
d38 1
a38 1
	include 'graphics/view.i'
a44 1
*               current routine calls a C subroutine to do the work
d48 1
a48 1
	move.l	a6,-(sp)		* save my gfxbase
d51 1
a51 1
	move.l  a0,-(sp)		* save param on stack
d61 10
a70 1
	move.l	(sp),a0			* get struct ColorMap * again
d78 1
a78 1
	move.l	(sp)+,a1	* get back pointer to colormap structure
d81 1
a81 1
	move.l	(sp)+,a6	* restore GfxBase
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: FreeColorMap.asm,v 37.0 91/01/07 15:24:43 spence Exp Locker: chrisg $
d39 1
d49 2
a50 2
	move.l	a6,-(sp)	* save my gfxbase
	move.l	4,a6		* get execbase
d52 1
a52 1
	move.l  a0,-(sp)	* save param on stack
d62 1
a62 1
	move.l	(sp),a0		* get struct ColorMap * again
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: FreeColorMap.asm,v 1.5 90/07/27 16:38:34 bart Exp Locker: spence $
d19 1
a19 1
*	struct ColorMap *colormap;
d21 1
a21 1
*    FUNCTION
d23 1
a23 1
*	    with GetColorMap.
d34 1
a34 1
*       SetRGB4 GetColorMap graphics/view.h
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: FreeColorMap.asm,v 1.3 88/05/03 13:24:33 dale Exp $
@


1.3
log
@New colormap allocation/deallocation for bigger structure.
@
text
@d3 1
a3 1
*	$Header: FreeColorMap.asm,v 1.2 88/05/01 20:39:14 dale Exp $
@


1.2
log
@Support of new ColorMap structure for Genlock support.
@
text
@d3 1
a3 1
*	$Header: FreeColorMap.asm,v 1.1 88/05/01 15:36:17 dale Exp $
d41 1
d61 2
a62 2
	move.l	(sp),a1		* get struct ColorMap * again
	move.l	cm_TransparencyBits(a1),d1
d64 1
a64 3
		moveq	#0,d0
		move.w	cm_Count(a1),d0
		lsr.w	#3,d0
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: FreeColorMap.asm,v 33.0 86/05/17 15:06:06 bart Exp $
d44 3
d50 9
a58 6
    move.l  a0,-(sp)
	move.w	cm_Count(a0),d0
	add.w	d0,d0		* 1 word per entry
	ext.l	d0			* make it long
	move.l	cm_ColorTable(a0),a1
	jsr		_LVOFreeMem(a6)	* free off colortable
d60 10
d72 1
a72 1
	jsr		_LVOFreeMem(a6)	* free off colormap structure
d74 1
a74 1
    rts
@
