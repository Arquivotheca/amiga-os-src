head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.7 V36_208:36.7 V36_207:36.7 V36_205:36.7 V36_203:36.7 V36_202:36.7 V36_201:36.7 V36_200:36.7 V36_199:36.7 V36_198:36.7 V36_196:36.7 V36_195:36.7 V36_194:36.7 V36_193:36.7 V36_192:36.7 V36_191:36.7 V36_190:36.7 V36_189:36.7 V36_188:36.7 V36_187:36.7 V36_186:36.7 V36_185:36.7 V36_184:36.7 V36_183:36.7 V36_182:36.7 V36_181:36.7 V36_180:36.7;
locks    ; strict;
comment  @*   @;


39.0
date     91.08.21.17.26.35;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.06.20.14.48.21;  author spence;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.15.04.40;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.04.19.30.55;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.34;  author spence;  state Exp;
branches ;
next     36.7;

36.7
date     90.08.24.11.27.50;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     90.03.27.17.31.30;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     89.02.14.10.08.35;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.02.01.17.53.30;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.01.17.16.32.54;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     88.10.21.12.03.06;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     88.09.14.11.18.30;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     88.09.14.10.45.05;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@*******************************************************************************
*
*       $Id: Monitor.asm,v 38.0 91/06/20 14:48:21 spence Exp Locker: chrisg $
*
*******************************************************************************

	include 'exec/types.i'
	include 'graphics/view.i'

	section graphics

	xdef    _OpenMonitor
	xref    _open_monitor

******* graphics.library/OpenMonitor *****************************************
*
*   NAME
*       OpenMonitor -- open a named MonitorSpec (V36)
*
*   SYNOPSIS
*       mspc = OpenMonitor( monitor_name , display_id)
*       d0                  a1		   d0
*
*       struct MonitorSpec *OpenMonitor( char *, ULONG );
*
*   FUNCTION
*       Locate and open a named MonitorSpec.
*
*   INPUTS
*       monitor_name - a pointer to a null terminated string.
*       display_id - an optional 32 bit monitor/mode identifier 
*
*   RESULTS
*       mspc - a pointer to an open MonitorSpec structure.
*              NULL if MonitorSpec could not  be opened.
*
*   NOTE
*	if monitor_name is non-NULL, the monitor will be opened by name.
*	if monitor_name is NULL the monitor will be opened by optional ID.
*	if both monitor_name and display_id are NULL returns default monitor.
*
*   BUGS
*
*   SEE ALSO
*       CloseMonitor() graphics/monitor.h
*
******************************************************************************

_OpenMonitor:
*                         current routine calls a C subroutine to do the work
	move.l  d0,-(sp)        * push optional display ID 
	move.l  a1,-(sp)        * push ptr to name string
	jsr _open_monitor       * call C routine
	addq.l  #8,sp           * remove args from stack
	rts

	xdef    _CloseMonitor
	xref    _close_monitor

******* graphics.library/CloseMonitor ****************************************
*
*   NAME
*	CloseMonitor -- close a MonitorSpec (V36)
*
*   SYNOPSIS
*	error = CloseMonitor( monitor_spec )
*	d0                    a0
*
*	LONG CloseMonitor( struct MonitorSpec * );
*
*   FUNCTION
*	Relinquish access to a MonitorSpec.
*
*   INPUTS
*	monitor_spec - a pointer to a MonitorSpec opened via OpenMonitor(),
*	or NULL.
*
*   RESULTS
*	error - FALSE if MonitorSpec closed uneventfully.
*	        TRUE if MonitorSpec could not be closed.
*
*   BUGS
*
*   SEE ALSO
*	OpenMonitor()
*
******************************************************************************

_CloseMonitor:
*                         current routine calls a C subroutine to do the work
	move.l  a0,-(sp)        * push ptr to monitor_spec
	jsr _close_monitor      * call C routine
	addq.l  #4,sp           * remove args from stack
	rts

	end
@


38.0
log
@Autodoc change for CloseMonitor() (also takes NULL)
@
text
@d3 1
a3 1
*       $Id: Monitor.asm,v 37.2 91/02/12 15:04:40 chrisg Exp Locker: spence $
@


37.2
log
@edited autodoc
@
text
@d3 1
a3 1
*       $Id: Monitor.asm,v 37.1 91/02/04 19:30:55 spence Exp Locker: chrisg $
d63 1
a63 1
*       CloseMonitor -- close a MonitorSpec (V36)
d66 2
a67 2
*       error = CloseMonitor( monitor_spec )
*       d0                    a0
d69 1
a69 1
*       LONG CloseMonitor( struct MonitorSpec * );
d72 1
a72 1
*       Relinquish access to a MonitorSpec.
d75 2
a76 1
*       monitor_spec - a pointer to a MonitorSpec opened via OpenMonitor()
d79 2
a80 2
*       error - FALSE if MonitorSpec closed uneventfully.
*               TRUE if MonitorSpec could not be closed.
d85 1
a85 1
*       OpenMonitor()
@


37.1
log
@AutoDocs
@
text
@d3 1
a3 1
*       $Id: Monitor.asm,v 37.0 91/01/07 15:25:34 spence Exp Locker: spence $
d24 1
a24 2
*       char *monitor_name;
*       ULONG display_id;
d45 1
a45 1
*       CloseMonitor graphics/monitor.h
d69 1
a69 1
*       struct MonitorSpec *monitor_spec;
d84 1
a84 1
*       OpenMonitor
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*       $Id: Monitor.asm,v 36.7 90/08/24 11:27:50 bart Exp Locker: spence $
d18 1
a18 1
*       OpenMonitor -- open a named MonitorSpec
d64 1
a64 1
*       CloseMonitor -- close a MonitorSpec
@


36.7
log
@id
@
text
@d3 1
a3 1
*       $Id: $
@


36.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: Monitor.asm,v 36.5 89/02/14 10:08:35 bart Exp $
@


36.5
log
@checkpoint 02.14.89
@
text
@d3 1
a3 1
*       $Header: Monitor.asm,v 36.4 89/02/01 17:53:30 bart Exp $
@


36.4
log
@checkpoint - a2024 10hz and 15hz works from 32 bit id
@
text
@d3 1
a3 1
*       $Header: Monitor.asm,v 36.3 89/01/17 16:32:54 bart Exp $
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*       $Header: Monitor.asm,v 36.2 88/10/21 12:03:06 bart Exp $
@


36.2
log
@activated interface, changed "name" register to a1
@
text
@d3 1
a3 1
*       $Header: Monitor.asm,v 36.1 88/09/14 11:18:30 bart Exp $
d21 2
a22 2
*       mspc = OpenMonitor( monitor_name )
*       d0                  a1
d25 1
d32 1
d38 5
d52 1
d55 1
a55 1
	addq.l  #4,sp           * remove args from stack
@


36.1
log
@not currently linked in
for future development
@
text
@d3 1
a3 1
*	$Header: Monitor.asm,v 36.0 88/09/14 10:45:05 bart Exp $
d7 2
a8 2
    include 'exec/types.i'
    include 'exec/view.i'
d10 1
a10 1
    section	graphics
d12 2
a13 2
    xdef    _OpenMonitor
    xref    _open_monitor
d15 1
a15 1
****** graphics.library/OpenMonitor *****************************************
d18 1
a18 1
*	OpenMonitor -- open a named MonitorSpec
d21 2
a22 2
*	mspc = OpenMonitor( monitor_name )
*       d0       	    a0
d24 1
a24 1
*	char *monitor_name;
d27 1
a27 1
*	Locate and open a named MonitorSpec.
d30 1
a30 1
*	monitor_name - a null terminated string.
d33 2
a34 2
*	mspc - a pointer to an open MonitorSpec structure.
*	       NULL if MonitorSpec could not  be opened.
d39 1
a39 1
*	CloseMonitor
d44 5
a48 5
*   			  current routine calls a C subroutine to do the work
    move.l  a0,-(sp)    * push ptr to name string
    jsr _open_monitor 	* call C routine
    lea 4(sp),sp       	* remove args from stack
    rts
d50 2
a51 2
    xdef    _CloseMonitor
    xref    _close_monitor
d53 1
a53 1
***** graphics.library/CloseMonitor ****************************************
d56 1
a56 1
*	CloseMonitor -- close a MonitorSpec
d59 2
a60 2
*	error = CloseMonitor( monitor_spec )
*       d0       	      a0
d62 1
a62 1
*	struct MonitorSpec *monitor_spec;
d65 1
a65 1
*	Relinquish access to a MonitorSpec.
d68 1
a68 1
*	monitor_spec - a pointer to a MonitorSpec opened via OpenMonitor()
d71 2
a72 1
*	error - NULL if MonitorSpec closed uneventfully.
d77 1
a77 1
*	OpenMonitor
d82 5
a86 5
*   			  current routine calls a C subroutine to do the work
    move.l  a0,-(sp)    * push ptr to monitor_spec
    jsr _close_monitor 	* call C routine
    lea 4(sp),sp       	* remove args from stack
    rts
d88 1
a88 1
    end
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*	$Header: $
d10 1
a10 2
	section	graphics
    include 'graphics/gfxbase.i'
d12 4
a15 1
******* graphics.library/OpenMonitor ******************************************
d17 25
a41 1
*******************************************************************************
d43 11
a53 1
******* graphics.library/CloseMonitor *****************************************
d55 33
a87 2
*******************************************************************************
	end
@
