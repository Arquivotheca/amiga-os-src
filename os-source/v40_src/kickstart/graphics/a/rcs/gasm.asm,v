head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


39.0
date     91.08.21.17.28.52;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.20.10.58.50;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.13.31;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.27.00;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.08.24.11.29.19;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.16.25.07;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     89.06.23.16.42.21;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.05.02.10.55.23;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.14;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@*******************************************************************************
*
*	$Id: gasm.asm,v 37.2 91/05/20 10:58:50 chrisg Exp Locker: chrisg $
*
*******************************************************************************

    
USE_GLUE_CODE	equ	0
	ifne	USE_GLUE_CODE
	xdef    _CBump
    xref    _ucbump
_CBump:
*               current routine calls a C subroutine to do the work
    move.l  a1,-(sp)    * push user copper list ptr on stack
    jsr _ucbump     * call C routine
    addq.l #4,sp        * remove args from stack
    rts

    xdef    _UCopperListInit
    xref    _ucinit
******* graphics.library/CINIT *************************************************
*
*   NAME
*	CINIT -- Initialize user copperlist to accept intermediate 
*		 user copper instructions.
*
*   SYNOPSIS
* 	cl = CINIT( ucl , n )
*
*	cl = UCopperListInit( ucl , n )
*			      a0    d0
*
*	struct CopList *UCopperListInit( struct UCopList *, UWORD );
*
*   FUNCTION
*	Allocates and/or initialize copperlist structures/buffers
*	internal to a UCopList structure.
*
*	This is a macro that calls UCopListInit. You must pass a 
*	(non-initialized) UCopList to CINIT (CINIT will NOT allocate 
*	a new UCopList if ucl==0 ). If (ucl != 0) it will initialize the
*	intermediate data buffers internal to a UCopList. 
*
*	The maximum number of intermediate copper list instructions
*	that these internal CopList data buffers contain is specified
*	as the parameter n.
*
*   INPUTS
*	ucl - pointer to UCopList structure
*	n - number of instructions buffer must be able to hold
*
*   RESULTS
*	cl- a pointer to a buffer which will accept n intermediate copper 
*	    instructions. 
*
*	NOTE: this is NOT a UCopList pointer, rather a pointer to the 
*	      UCopList's->FirstCopList sub-structure.
*		
*   BUGS
*	CINIT will not actually allocate a new UCopList if ucl==0.
*	Instead you must allocate a block MEMF_PUBLIC|MEMF_CLEAR, the 
*	sizeof(struct UCopList) and pass it to this function.  
*
*	The system's FreeVPortCopLists function will take care of 
*	deallocating it if they are called.
*
*	Prior to release V36 the  CINIT macro had { } braces surrounding
*	the definition, preventing the proper return of the result value.
*	These braces have been removed for the V36 include definitions.
*
*   SEE ALSO
* 	CINIT CMOVE CEND graphics/copper.h
*
*******************************************************************************

_UCopperListInit:
*               current routine calls a C subroutine to do the work
    move.l  d0,-(sp)	* num of copper instructions if a1==0
    move.l  a0,-(sp)    * push user copper list ptr on stack
    jsr _ucinit		* call C routine
    lea 8(sp),sp       	* remove args from stack
    rts

    xdef    _CMove
    xref    _ucmove
******* graphics.library/CMOVE *************************************************
*
*   NAME
*	CMOVE -- append copper move instruction to user copper list.
*
*   SYNOPSIS
*	CMOVE( c , a , v )
*
*	CMove( c , a , v )
*	      a1  d0  d1
*	CBump( c )
*	      a1
*
*	void CMove( struct UCopList *, void *, WORD );
*
*   FUNCTION
*	Add instruction to move value v to hardware register a.
*
*   INPUTS
*	c - pointer to UCopList structure
*	a - hardware register
*	v - 16 bit value to be written
*
*   RESULTS
*	This is actually a macro that calls CMove(c,&a,v)
*	and then calls CBump(c) to bump the local pointer
*	to the next instruction. Watch out for macro side affects.
*
*   BUGS
*	
*   SEE ALSO
*	CINIT CWAIT CEND graphics/copper.h
*
********************************************************************************
_CMove:
*               current routine calls a C subroutine to do the work
    move.l  d1,-(sp)
    move.l  d0,-(sp)
    move.l  a1,-(sp)    * push user copper list ptr on stack
    jsr _ucmove     * call C routine
    lea 12(sp),sp       * remove args from stack
    rts

    xdef    _CWait
    xref    _ucwait
******* graphics.library/CWAIT *************************************************
*
*   NAME
*	CWAIT -- Append copper wait instruction to user copper list.
*
*   SYNOPSIS
*	CWAIT( c , v , h )
*
*	CWait( c , v , h )
*	       a1  d0  d1
*	CBump( c )
*	      a1
*
*	void CWait( struct UCopList *, WORD, WORD)
*
*   FUNCTION
*	Add instruction to wait for vertical beam position v and
*	horizontal position h to this intermediate copper list.
*
*   INPUTS
*	c - pointer to UCopList structure
*	v - vertical beam position (relative to top of viewport)
*	h - horizontal beam position
*
*   RESULTS
*	this is actually a macro that calls CWait(c,v,h)
*	and then calls CBump(c) to bump the local pointer
*	to the next instruction.
*
*   BUGS
*	User waiting for horizontal values of greater than 222 decimal 
*	is illegal.
*
*   SEE ALSO
* 	CINIT CMOVE CEND graphics/copper.h
*
*******************************************************************
_CWait:
*               current routine calls a C subroutine to do the work
    move.l  d1,-(sp)
    move.l  d0,-(sp)
    move.l  a1,-(sp)    * push user copper list ptr on stack
    jsr _ucwait     * call C routine
    lea 12(sp),sp       * remove args from stack
    rts


******* graphics.library/CEND ***************************************************
*   NAME
*	CEND -- Terminate user copper list.
*
*   SYNOPSIS
*	CEND( c )
*
*	struct UCopList *c;
*
*   FUNCTION
*	Add instruction to terminate user copper list.
*
*   INPUTS
*	c - pointer to UCopList structure
*
*   RESULTS
*	This is actually a macro that calls the macro CWAIT(c,10000,255)
*	10000 is a magical number that the graphics.library uses.
*	I hope display technology doesn't catch up too fast!
*
*   BUGS
*
*   SEE ALSO
*	CINIT CWAIT CMOVE graphics/copper.h
********************************************************************************

******* graphics.library/CBump **************************************************
*   NAME
*	CBump -  increment user copper list pointer (bump to next position in list).
*
*   SYNOPSIS
*	CBump( c )
*	      a1
*
*	void CBump( struct UCopList * );
*
*   FUNCTION
*	Increment pointer to space for next instruction in user copper list.
*
*   INPUTS
*	c - pointer to UCopList structure
*
*   RESULTS
*	User copper list pointer is incremented to next position.  
*	Pointer is repositioned to next user copperlist instruction block 
*	if the current block is full.
*
*	    Note: CBump is usually invoked for the programmer as part of the
*	          macro definitions CWAIT or CMOVE.
*
*   BUGS
*
*   SEE ALSO
*	CINIT CWAIT CMOVE CEND graphics/copper.h
********************************************************************************

******* graphics.library/SetOPen ***********************************************
*
*   NAME
*	SetOPen -- Change the Area OutLine pen and turn on Outline
*			mode for areafills.
*
*   SYNOPSIS
*	SetOPen(rp, pen)
*
*	void SetOPen( struct RastPort *, UBYTE );
*
*   FUNCTION
*	This is implemented as a c-macro.
*	Pen is the pen number that will be used to draw a border
*	around an areafill during AreaEnd().
*
*   INPUTS
*	rp = pointer to RastPort structure
*	pen = number  between 0-255
*
*   BUGS
*
*   SEE ALSO
*	AreaEnd() graphics/gfxmacros.h graphics/rastport.h
*
********************************************************************************

	endc		* USE_GLUE_CODE
	end
@


37.2
log
@ conditionally removed glue code for native build.
@
text
@d3 1
a3 1
*	$Id: gasm.asm,v 1.1 91/05/20 10:38:34 chrisg Exp $
@


37.1
log
@edited autodocs
@
text
@d3 1
a3 1
*	$Id: gasm.asm,v 37.0 91/01/07 15:27:00 spence Exp Locker: chrisg $
d8 2
d261 1
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: gasm.asm,v 1.5 90/08/24 11:29:19 bart Exp Locker: spence $
d31 1
a31 2
*	struct UCopList *ucl;
*	short n;
a32 2
*	struct CopList  *cl;
*
d65 1
a65 1
*	Prior to release 1.4 the  CINIT macro had { } braces surrounding
d67 1
a67 1
*	These braces have been removed for the 1.4 include definitions.
d97 1
a97 3
*	struct UCopList *c;
*	APTR	a;
*	SHORT	v;
d142 1
a142 2
*	struct UCopList *c;
*	short v,h;
d210 1
a210 1
*	struct UCopList *c;
d241 1
a241 2
*	struct RastPort *rp;
*	UBYTE pen;
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: gasm.asm,v 1.3 89/06/23 16:42:21 bart Exp $
@


1.3
log
@autodoc
@
text
@d3 1
a3 1
*	$Header: gasm.asm,v 1.2 89/05/02 10:55:23 bart Exp $
@


1.2
log
@doc
@
text
@d3 1
a3 1
*	$Header: gasm.asm,v 1.1 88/05/01 15:38:14 dale Exp $
d23 1
a23 1
*		user copper instructions.
d26 1
a26 1
* 	ucl = CINIT( c , n )
d28 2
a29 2
*	UCopperListInit( c , n )
*			 a0  d0
a31 1
*	struct UCopList *c;
d34 2
d37 2
a38 5
*	Allocates and/or initialize copperlist structures/buffers.
*	This is a macro that calls UCopListLinit. CINIT will
*	allocate a new UCopList if c==0. If (c != 0) it will
*	initialize the data structures to begin new copperlist
*	without allocating more memory and it ignores n.
d40 9
d50 2
a51 2
*	c - pointer to UCopList structure
*	n - number of instructions buffer must hold
d54 5
a58 1
*	An initialize list to accept intermediate copper instructions.
d61 3
a63 4
*	CINIT will not actually allocate a new copperlist if c==0.
*	Instead you must allocate a 12 byte MEMF_PUBLIC|MEMF_CLEAR block,
*	and pass it to this function.  The system's FreeVPortCopLists
*	function will take care of deallocating it.
d65 7
d73 1
d75 2
a76 2
********************************************************************************

d120 1
a120 1
*	CINIT CMOVE CWAIT graphics/copper.h
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: gasm.asm,v 33.4 87/05/12 15:27:46 dale Exp $
d50 4
a53 1
*	Does not handle c==0 correctly.
d145 1
a145 1

d147 2
a148 1
*	User waiting for horizontal values of greater than 222 decimal is illegal.
d180 3
a182 3
*	This is actually a macro that the macro CWAIT(c,10000,255)
*	10000 is a magical number that the underlieing graphics
*	uses. I hope display technology doesn't catch up too fast!
@
