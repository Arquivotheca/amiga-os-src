head     39.6;
branch   ;
access   ;
symbols  rel39_24:39.6 rel39_18:39.6 rel39_97:39.6 rel39_90:39.6 rel39_89:39.6 rel39_82:39.6 rel39_76:39.5 rel39_71:39.5 rel39_65:39.5 rel39_64:39.5 rel39_61:39.5 rel39_60:39.5 rel39_55:39.5 rel39_52:39.5 rel39_47:39.2;
locks    ; strict;
comment  @* @;


39.6
date     92.08.11.13.57.22;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.08.17.29.16;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.08.17.28.29;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.04.06.11.00.43;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     92.04.04.14.19.23;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     92.04.04.14.16.40;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     92.04.02.11.02.58;  author spence;  state Exp;
branches ;
next     ;


desc
@VPOrigin() function
@


39.6
log
@IFDEFd out - npo longer used.
@
text
@*******************************************************************************
*
*	$Id: vporigin.asm,v 39.5 92/04/08 17:29:16 spence Exp Locker: spence $
*
*******************************************************************************

* Thankfully, no longer used.

	IFD	USE_VP_ORIGIN
	section	graphics

	include "/view.i"

	xdef	_VPOrigin
	xref	_LVOGfxLookUp

******* graphics.library/VPOrigin *********************************************
*
*   NAME
*	VPOrigin -- Find the first visible pixel in the ViewPort (V39)
*
*   SYNOPSIS
*	VPOrigin(v, vp, origin1, origin2)
*	         a0 a1  a2       a3
*
*	void VPOrigin(struct View *, struct ViewPort *, Point *, Point *);
*
*   FUNCTION
*	To find the top left visible pixel in a viewport after accounting for
*	hardware limitations.
*
*   INPUTS
*	v       - View the ViewPort is in.
*	vp      - This ViewPort
*	origin1 - The Point structure that is to be filled for the first
*	          playfield.
*	origin2 - The Point structure that is to be filled for the second
*	          playfield, or NULL if not dualplayfield.
*
*   RESULT
*	originx - The Point structure will hold the coordinate
*	          in ViewPort resolution of the first visible pixel,
*	          relative to the View origin.
*
*   NOTES
*	The ViewPort must have a properly initialised DisplayClip in a
*	ViewPortExtra that has been Associated with the ViewPort.
*
*   SEE ALSO
*	<graphics/view.h> <graphics/gfx.h> GfxNew() GfxAssociate()
*
*******************************************************************************

_VPOrigin:
	move.l	a2,d0
	beq.s	_VPOrigin.		; Prevents silly enforcer hits.
	move.w	vp_Modes(a1),d1
	move.l	vp_ColorMap(a1),d0
	beq.s	_VPOrigin.
	move.l	d0,a1
	tst.b	cm_Type(a1)
	beq.s	_VPOrigin.
	move.l	cm_vpe(a1),d0
	beq.s	_VPOrigin.
	move.l	d0,a1
	move.w	v_DxOffset(a0),d0
	btst.b	#5,d1			; superhires?
	beq.s	1$
	add.w	d0,d0
1$:
	and.w	#V_HIRES,d1
	beq.s	2$
	add.w	d0,d0
2$:
	move.w	v_DyOffset(a1),d1
	btst.b	#2,v_Modes+1(a0)	; lace?
	beq.s	3$
	add.w	d1,d1
3$:
	move.l	vpe_Origin(a1),(a2)	; Both WORDS together.
	add.w	d0,tpt_x(a2)
	add.w	d1,tpt_y(a2)
	cmp.l	#0,a3
	beq.s	_VPOrigin.		; no dualplayfield.
	move.l	vpe_Origin+tpt_SIZEOF(a0),(a3)
	add.w	d0,tpt_x(a3)
	add.w	d1,tpt_y(a3)
_VPOrigin.:
	rts

	end

	ENDC@


39.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: vporigin.asm,v 39.4 92/04/08 17:28:29 spence Exp Locker: spence $
d7 3
d92 2
@


39.4
log
@Silly typo.
@
text
@d3 1
a3 1
*	$Id: vporigin.asm,v 39.3 92/04/06 11:00:43 spence Exp Locker: spence $
a88 1
°
@


39.3
log
@If returning relative to View, then I really should use the v_DxOffset
instead of the vp_DxOffset!
@
text
@d3 1
a3 1
*	$Id: vporigin.asm,v 39.2 92/04/04 14:19:23 spence Exp Locker: spence $
d68 1
a68 1
	and.w	#$V_HIRES,d1
d89 1
@


39.2
log
@No, you can't use '->' in assembler!
@
text
@d3 1
a3 1
*	$Id: vporigin.asm,v 39.1 92/04/04 14:16:40 spence Exp Locker: spence $
a51 1
* Currently, the View is unused. It may be needed though under RTG.
d54 2
a55 2
	move.l	vp_ColorMap(a1),a0
	tst.b	cm_Type(a0)
d57 2
a58 1
	move.l	cm_vpe(a0),d0
d60 18
a77 4
	move.l	d0,a0
	move.w	vp_DxOffset(a1),d0
	move.w	vp_DyOffset(a1),d1
	move.l	vpe_Origin(a0),(a2)	; Both WORDS together.
@


39.1
log
@Now returns relative to View instead of DClip
@
text
@d3 1
a3 1
*	$Id: vporigin.asm,v 39.0 92/04/02 11:02:58 spence Exp Locker: spence $
d61 2
a62 2
	move.w	vp->DxOffset(a1),d0
	move.w	vp->DyOffset(a1),d1
@


39.0
log
@Initial login
@
text
@d3 1
a3 1
*	$Id: Exp $
d40 1
a40 1
*	          relative to the ViewPort's DisplayClip.
d53 2
d61 2
a62 3
	lea	vpe_DisplayClip(a0),a1
	move.w	ra_MinX(a1),d0
	move.w	ra_MinY(a1),d1
@
