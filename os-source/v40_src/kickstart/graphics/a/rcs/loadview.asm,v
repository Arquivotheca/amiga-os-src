head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.2 rel39_76:39.2 rel39_71:39.2 rel39_65:39.2 rel39_64:39.2 rel39_61:39.2 rel39_60:39.2 rel39_55:39.2 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.2 rel39_35:39.2 rel39_34:39.2 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.2
date     92.01.30.20.03.20;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.07.13.39.56;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.26.23;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.16.17.13.37;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.14.56.48;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.26;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.27.40;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.16.32.19;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.20.11.15.29;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.34;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@Loads View into a1 before calling vector.
@
text
@*******************************************************************************
*
*	$Id: loadview.asm,v 39.1 92/01/07 13:39:56 spence Exp Locker: spence $
*
*******************************************************************************

	section	graphics

	include '/monitor.i'
	include '/view.i'
	include '/macros.i'

	xdef    _LoadView   
	xref    _loadview
	xref	_LVOGfxLookUp

******* graphics.library/LoadView *********************************************
*
*   NAME
*       LoadView -- Use a (possibly freshly created) coprocessor instruction
*                   list to create the current display.
*
*   SYNOPSIS
*       LoadView( View )
*                  A1
*
*	void LoadView( struct View * );
*
*   FUNCTION
*	Install a new view to be displayed during the next display
*	refresh pass.
*       Coprocessor instruction list has been created by
*       InitVPort(), MakeVPort(), and MrgCop().
*
*   INPUTS
*       View - a pointer to the View structure which contains the
*       pointer to the constructed coprocessor instructions list, or NULL.
*
*   RESULT
*	If the View pointer is non-NULL, the new View is displayed, 
*	according to your instructions.  The vertical blank routine 
*	will pick this pointer up and direct the copper to start 
*	displaying this View.
*
*	If the View pointer is NULL, no View is displayed. 
*
*   NOTE
*	Even though a LoadView(NULL) is performed, display DMA will still be 
*	active.  Sprites will continue to be displayed after a LoadView(NULL)
*	unless an OFF_SPRITE is subsequently performed. 
*
*   BUGS
*
*   SEE ALSO
*       InitVPort() MakeVPort() MrgCop() intuition/RethinkDisplay()
*	graphics/view.h
*
******************************************************************************

_LoadView:
* From V39, LoadView() is vectored through the MonitorSpec. Use _loadview as
* a default.

	move.l	a1,-(sp)		; push view pointer on stack
	beq.s	lv_default			; LoadViewDefault

	move.l	a1,a0
	jsr	_LVOGfxLookUp(a6)
	tst.l	d0
	beq.s	lv_default
	move.l	d0,a0			; ViewExtra
	move.l	ve_Monitor(a0),d0
	beq.s	lv_default
	move.l	d0,a0
	move.l	ms_LoadView(a0),a0	; address to call
	move.l	(sp),a1			; get view address
lv_doit:
	jsr	(a0)
	addq.l	#4,sp
	rts
lv_default:
	lea	_loadview,a0
	bra.s	lv_doit

	end
@


39.1
log
@Calls Through MonitorSpec (if available), else uses default.
@
text
@d3 1
a3 1
*	$Id: loadview.asm,v 39.0 91/08/21 17:26:23 chrisg Exp Locker: spence $
d76 1
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: LoadView.asm,v 37.2 91/04/16 17:13:37 spence Exp Locker: chrisg $
d8 9
a16 2
    xdef    _LoadView   
    xref    _loadview
d59 1
d61 22
a82 5
*               current routine calls a C subroutine to do the work
    move.l  a1,-(sp)    * push ptr to drastr on the stack
    jsr _loadview       * call C routine
    addq.l #4,sp        * remove args from stack
    rts
@


37.2
log
@Autodoc change
@
text
@d3 1
a3 1
*	$Id: LoadView.asm,v 37.1 91/02/12 14:56:48 chrisg Exp Locker: spence $
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: LoadView.asm,v 37.0 91/01/07 15:25:26 spence Exp Locker: chrisg $
d26 1
a26 1
*       InitVPort(), MakeView(), and MrgCop().
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: LoadView.asm,v 1.4 90/08/24 11:27:40 bart Exp Locker: spence $
d20 1
a20 1
*	struct View *View;
d26 1
a26 1
*       InitVPort, MakeView, and MrgCop.
a30 1
*	
d39 2
a40 1
*  NOTE
d48 2
a49 1
*       InitVPort MakeVPort MrgCop intuition/RethinkDisplay graphics/view.h
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: LoadView.asm,v 1.2 90/03/20 11:15:29 bart Exp $
@


1.2
log
@loadview NULL docs
@
text
@d3 1
a3 1
*	$Header: LoadView.asm,v 1.1 88/05/01 15:36:34 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: LoadView.asm,v 33.0 86/05/17 15:08:17 bart Exp $
d30 2
a31 1
*       pointer to the constructed coprocessor instructions list.
d34 10
a43 3
*       The new View is displayed, according to your instructions.
*	The vertical blank routine will pick this pointer up and
*	direct the copper to start displaying this View.
@
