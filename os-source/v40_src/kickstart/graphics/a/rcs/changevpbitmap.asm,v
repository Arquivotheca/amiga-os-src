head     39.15;
branch   ;
access   ;
symbols  rel39_24:39.15 rel39_18:39.15 rel39_97:39.11 rel39_90:39.10 rel39_89:39.9 rel39_82:39.9 rel39_76:39.9 rel39_71:39.9 rel39_65:39.8 rel39_64:39.7 rel39_61:39.7 rel39_60:39.6 rel39_55:39.5 rel39_52:39.5 rel39_47:39.5 rel39_39:39.5 rel39_38:39.5 rel39_37:39.3 rel39_35:39.3 rel39_34:39.2;
locks    ; strict;
comment  @* @;


39.15
date     93.02.16.12.22.15;  author chrisg;  state Exp;
branches ;
next     39.14;

39.14
date     93.02.09.15.43.08;  author chrisg;  state Exp;
branches ;
next     39.13;

39.13
date     92.12.11.10.25.18;  author chrisg;  state Exp;
branches ;
next     39.12;

39.12
date     92.12.07.16.13.59;  author chrisg;  state Exp;
branches ;
next     39.11;

39.11
date     92.11.02.17.32.31;  author chrisg;  state Exp;
branches ;
next     39.10;

39.10
date     92.09.24.13.33.06;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     92.07.01.10.17.46;  author chrisg;  state Exp;
branches ;
next     39.8;

39.8
date     92.06.09.08.42.25;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     92.06.03.16.25.08;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     92.05.05.11.40.07;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.03.13.59.23;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.02.28.14.02.40;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.13.46.01;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.14.15.58.09;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.29.17.00.45;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.12.20.15.55.07;  author chrisg;  state Exp;
branches ;
next     ;


desc
@ initial check in.
@


39.15
log
@o	Changed ChangeVPBitMap to not reply immediately to the "safe-to-write"
	message when VP_HIDE is set. This should prevent some animations
	from taking 100% CPU when their screen is put behind. Also fixed a
	bug in the signalling system which needs testing!!!!
@
text
@*******************************************************************************
*
*	$Id: changevpbitmap.asm,v 39.14 93/02/09 15:43:08 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	include	'/gfxbase.i'
	include	'/monitor.i'
	include	'/view.i'
	include	'exec/memory.i'
	include	'exec/ables.i'
	include	'exec/execbase.i'
	include	'hardware/custom.i'
	include	'/macros.i'

	SECTION	graphics
	
	OPTIMON

	xref	_LVOFreeSignal,_LVOAllocSignal,_LVOFreeMem,_LVOAllocMem
	xref	_LVOReplyMsg

******* graphics.library/AllocDBufInfo ****************************************
*
*   NAME
*       AllocDBufInfo -- Allocate structure for multi-buffered animation (V39)
*
*   SYNOPSIS
*       AllocDBufInfo(vp)
*		      a0
*
*	struct DBufInfo * AllocDBufInfo(struct ViewPort *)
*
*   FUNCTION
*	Allocates a structure which is used by the ChangeVPBitMap()
*	routine.
*
*   INPUTS
*       vp  =  A pointer to a ViewPort structure.
*
*   BUGS
*
*   NOTES
*	Returns 0 if there is no memory available or if the display mode
*	of the viewport does not support double-buffering.
*
*	The only fields of the DBufInfo structure which can be used by application
*	programs are the dbi_SafeMessage, dbi_DispMessage, dbi_UserData1 and 
*	dbi_UserData2 fields.
*
*	dbi_SafeMessage and dbi_DispMessage are standard exec message structures
*	which may be used for synchronizing your animation with the screen update.
*
*	dbi_SafeMessage is a message which is replied to when it is safe to write to
*	the old BitMap (the one which was installed when you called ChangeVPBitMap).
*
*	dbi_DispMessage is replied to when it is safe to call ChangeVPBitMap again
*	and be certain that the new frame has been seen at least once.
*
*	The dbi_UserData1 and dbi_UserData2 fields, which are stored after each
*	message, are for your application to stuff any data into that it may need
*	to examine when looking at the reply coming into the ReplyPort for either
*	of the embedded Message structures.
*
*	DBufInfo structures MUST be allocated with this function. The size of
*	the structure will grow in future releases. 
*
*	The following fragment shows proper double buffering synchronization:
*
*	int SafeToChange=TRUE, SafeToWrite=TRUE, CurBuffer=1;
*	struct MsgPort *ports[2];    /* reply ports for DispMessage and SafeMessage */
*	struct BitMap *BmPtrs[2];
*	struct DBufInfo *myDBI;
*
*	... allocate bitmap pointers, DBufInfo, set up viewports, etc.
*
*	myDBI->dbi_SafeMessage.mn_ReplyPort=ports[0];
*	myDBI->dbi_DispMessage.mn_ReplyPort=ports[1];
*	while (! done)
*	{
*	    if (! SafeToWrite)
*		while(! GetMsg(ports[0])) Wait(1l<<(ports[0]->mp_SigBit));
*	    SafeToWrite=TRUE;
*
*	    ... render to bitmap # CurBuffer.
*
*	    if (! SafeToChange)
*		while(! GetMsg(ports[1])) Wait(1l<<(ports[1]->mp_SigBit));
*	    SafeToChange=TRUE;
*	    WaitBlit();         /* be sure rendering has finished */
*	    ChangeVPBitMap(vp,BmPtrs[CurBuffer],myDBI);
*	    SafeToChange=FALSE;
*	    SafeToWrite=FALSE;
*	    CurBuffer ^=1;	/* toggle current buffer */
*	}
*       if (! SafeToChange)	/* cleanup pending messages */
*	    while(! GetMsg(ports[1])) Wait(1l<<(ports[1]->mp_SigBit));
*       if (! SafeToWrite)	/* cleanup */
*	    while(! GetMsg(ports[0])) Wait(1l<<(ports[0]->mp_SigBit));
*
*   SEE ALSO
*	FreeDBufInfo() ChangeVPBitMap()
*
*********************************************************************************

	xdef	_AllocDBufInfo

_AllocDBufInfo:
	move.l	a6,-(a7)
	move.l	gb_ExecBase(a6),a6
	move.l	#dbi_SIZEOF,d0
	move.l	#MEMF_CLEAR,d1
	jsr	_LVOAllocMem(a6)
1$:	move.l	(a7)+,a6
	rts

******* graphics.library/FreeDBufInfo ****************************************
*
*   NAME
*       FreeDBufInfo -- free information for multi-buffered animation (V39)
*
*   SYNOPSIS
*       FreeDBufInfo(db)
*	             a1
*
*	void FreeDBufInfo(struct DBufInfo *)
*
*   FUNCTION
*	Frees a structure obtained from AllocDBufInfo
*
*   INPUTS
*       db  =  A pointer to a DBufInfo.
*
*   BUGS
*
*   NOTES
*	FreeDBufInfo(NULL) is a no-op.
*
*   SEE ALSO
*	AllocDBufInfo() ChangeVPBitMap()
*
*********************************************************************************

	xdef	_FreeDBufInfo

_FreeDBufInfo:
	move.l	a1,d0
	beq.s	1$
	movem.l	a6,-(a7)
	move.l	gb_ExecBase(a6),a6
	move.l	#dbi_SIZEOF,d0
	jsr	_LVOFreeMem(a6)
	movem.l	(a7)+,a6
1$:	rts

	xdef	_ChangeVPBitMap
******* graphics.library/ChangeVPBitMap ****************************************
*
*   NAME
*       ChangeVPBitMap -- change display memory address for multi-buffered
*			  animation (V39)
*
*   SYNOPSIS
*       ChangeVPBitMap(vp,bm,db)
*	               a0 a1 a2
*
*	void ChangeVPBitMap(struct ViewPort *, struct BitMap *, struct DBufInfo *);
*
*   FUNCTION
*	Changes the area of display memory which will be displayed in a
*	viewport. This can be used to implement double (or triple)
*	buffering, a method of achieving smooth animation.
*
*   INPUTS
*	vp  =  a pointer to a viewport
*       bm  = a pointer to a BitMap structure. This BitMap structure must be
*	      of the same layout as the one attached to the viewport (same
*	      depth, alignment, and BytesPerRow).
*	db  =  A pointer to a DBufInfo.
*	
*   BUGS
*
*   NOTES
*	This will set the vp->RasInfo->BitMap field to the bm pointer which is
*	passed.
*
*	When using the synchronization features, you MUST carefully insure that
*	all messages have been replied to before calling FreeDBufInfo or
*	calling ChangeVPBitMap with the same DBufInfo.
*	
*
*   SEE ALSO
*	AllocDBufInfo() AllocBitMap()
*
*********************************************************************************

	xref	_vposr,_vhposr,_intena
	xref	_LVOObtainSemaphore,_LVOReleaseSemaphore

_ChangeVPBitMap:
	movem.l	d2-d7/a2-a6,-(a7)
	move.l	a0,a3	; a3=vp
	move.l	gb_ActiViewCprSemaphore(a6),a0
	move.l	a6,a5
	move.l	gb_ExecBase(a6),a6
	jsr	_LVOObtainSemaphore(a6)		; obtainsemaphore better not touch my fucking registers.
; now, we need to get registers a5=lof a4=shf a0=dspins

no_hide:
	move.l	a5,a6
	move.l	gb_SpecialCounter(a6),d0
	cmp.l	dbi_MatchLong(a2),d0
	beq	cache_hit			; cache is valid
	move.l	vp_DspIns(a3),d0
	beq	no_dspins
	move.l	d0,a4				; a4=dspins
	move.w	vp_Modes(a3),d0
	and.w	#V_VP_HIDE,d0
	beq.s	no_hidden
	sub.l	a5,a5
	sub.l	a4,a4
	sub.l	a0,a0
	bra.s	synced_hw_2
no_hidden:
	move.l	vp_DspIns(a3),a0
	move.l	cl_CopIns(a0),a0		; a0=intermediate copper list ptr
; now, let's skip all three copper list pointers until we hit the bitplane ptr loads
	moveq	#3,d1
	move.w	#$fff,d3
	cmp	#0,a0
	beq.s	synced_intermed
	move.l	vp_ColorMap(a3),d0	; get colormap
	beq.s	sync_intermed
	move.l	d0,a5
	btst	#CMAB_NO_INTERMED_UPDATE,cm_AuxFlags(a5)
	beq.s	sync_intermed
	sub.l	a0,a0
	bra.s	synced_intermed
sync_intermed:
	move.w	ci_OpCode(a0),d0
	and.w	d1,d0
	ifne	COPPER_MOVE
		fail copper_move not zero
	endc
	bne.s	is_wait_ins
	move.w	ci_DestAddr(a0),d2		; d2=reg ofs
	and.w	d3,d2
	cmp.w	#$e0,d2				; is it bpl1pth?
	beq.s	synced_intermed
is_wait_ins:
	lea	ci_SIZEOF(a0),a0
	bra.s	sync_intermed
synced_intermed:
; now, sync hw copper lists
	move.l	cl_CopLStart(a4),a5		; a5=lof
	move.l	cl_CopSStart(a4),a4		; a4=shf
	cmp	#0,a4
	beq.s	synced_hw_1
1$:	cmp.w	#bplpt,(a4)
	lea	4(a4),a4
	bne.s	1$
	lea	-4(a4),a4
synced_hw_1:
	cmp	#0,a5
	beq.s	synced_hw_2
1$:	cmp.w	#bplpt,(a5)
	lea	4(a5),a5
	bne.s	1$
	lea	-4(a5),a5
synced_hw_2:
; now, we're pointing at the copper list
; a0=intermediate copper list
; a4=hw 1 shf
; a5=hw 2 lof
; a2=dbufinfo
; a3=vp
; a1=change to bitmap
; a6=gfxbase
	movem.l	a0/a4/a5,dbi_CopPtr1(a2)
	move.l	a3,-(sp)
	move.l	a1,a3
	xref	_new_mode
	jsr	_new_mode
	move.l	a3,a1
	move.l	(sp)+,a3
	move	#30000,d1					; set if sync not needed.
	btst	#13-8,vp_Modes(a3)		; VP_HIDE?
	bne.s	no_sync_needed
	move.l	gb_ActiView(a6),a0
	cmp	#0,a0
	beq.s	no_sync_needed
	move.w	vp_DyOffset(a3),d1
	btst	#2,d0				; LACE?
	beq.s	no_lace1
	asr.w	#1,d1
no_lace1:
	btst	#3,d0				; doublescan?
	beq.s	no_dbscan2
	add.w	d1,d1
no_dbscan2:
	add.w	v_DyOffset(a0),d1

no_sync_needed:
	move.w	vp_DHeight(a3),d2
	btst	#3,d0				; double scan?
	beq.s	no_dbscan
	add.w	d2,d2
no_dbscan:
	add.w	d1,d2
	move.l	gb_SpecialCounter(a6),dbi_MatchLong(a2)
	move.l	gb_current_monitor(a6),a0
	move.w	d1,d0
	sub.w	ms_min_row(a0),d0
	bpl.s	1$
; if top-min_row <0
;    bot+=(top-min_row)
;    top=min_row
	add.w	d0,d2
	sub.w	d0,d1
1$:
	move.w	d1,dbi_BeamPos1(a2)
	move.w	d2,dbi_BeamPos2(a2)

cache_hit:
; first, let's avoid the beam.
	move.l	gb_ExecBase(a6),a0
; let's set d3 to the line to avoid
	move.w	dbi_BeamPos1(a2),d3
loopagain:
	DISABLE	a0,NOFETCH			; disable ints while examining beam position.
bad_count:
	move.w	_vposr,d0
	move.w	_vhposr,d2
	move.w	_vposr,d1

	cmp.w	d0,d1
	bne.s	bad_count
	lsr.w	#1,d1
	roxr.w	#1,d2
	lsr.w	#1,d1
	roxr.w	#1,d2
	lsr.w	#1,d1
	roxr.w	#1,d2
	lsr.w	#5,d2
	btst	#GFXB_HR_AGNUS,gb_ChipRevBits0(a6)
	bne.s	smart_agnus
	and.w	#511,d2				; mask out pre-ECS bits
smart_agnus:
	sub.w	d3,d2
	bge.s	good_count
	cmp.w	#-5,d2
	blt.s	good_count
	ENABLE	a0,NOFETCH
	bra.s	loopagain

good_count:
	movem.l	dbi_CopPtr1(a2),a0/a4/a5
	moveq	#0,d5
	move.w	vp_Modes(a3),d0
	btst	#13,d0				; VP_HIDE?
	beq.s	no_hide1
	moveq	#0,d2
	bra	done_pokes
no_hide1:
	btst	#8+3,d0				; HAM?
	beq.s	1$
	moveq	#2*4,d5				; ham8 bitplane fudge
1$:	move.l	vp_RasInfo(a3),a3
	move.l	ri_BitMap(a3),d0
	move.l	a1,ri_BitMap(a3)
	move.l	d0,a3
	moveq	#0,d0
	move.b	bm_Depth(a1),d0
	cmp.b	#8,d0
	beq.s	2$
	moveq	#0,d5
2$:
	lea	bm_Planes(a3),a3
	lea	bm_Planes(a1),a1
	moveq	#$1c,d4
	bra.s	end_loop
pl_loop:
	move.l	a5,d1
	beq.s	no_1st
; now, look at which register this is
	move.w	4(a5),d1	; bplxptl
	sub.w	d5,d1
	and.w	d4,d1
	move.w	2(a5),d6
	swap	d6
	move.w	6(a5),d6	; d6=generated pointer
	sub.l	0(a3,d1.w),d6	; d6=generated-old
	add.l	0(a1,d1.w),d6	; d6=new+(gen-old)
	move.w	d6,6(a5)
	swap	d6
	move.w	d6,2(a5)
	lea	8(a5),a5
no_1st:
	move.l	a4,d1
	beq.s	no_2nd
	move.w	4(a4),d1	; bplxptl
	sub.w	d5,d1
	and.w	d4,d1
	move.w	2(a4),d6
	swap	d6
	move.w	6(a4),d6	; d6=generated pointer
	sub.l	0(a3,d1.w),d6	; d6=generated-old
	add.l	0(a1,d1.w),d6	; d6=new+(gen-old)
	move.w	d6,6(a4)
	swap	d6
	move.w	d6,2(a4)
	lea	8(a4),a4
no_2nd:
end_loop:
	dbra	d0,pl_loop

	move.l	a0,d1
	beq.s	no_intermed
	move.w	#$fff,d7
it_lp:	move.w	ci_DestAddr+ci_SIZEOF(a0),d1
	and.w	d7,d1
	cmp.w	#bplpt,d1
	blo.s	no_intermed
	cmp.w	#bplpt+8*4,d1
	bhs.s	no_intermed

	sub.w	d5,d1
	and.w	d4,d1
	
	move.w	ci_DestData(a0),d6
	swap	d6
	move.w	ci_DestData+ci_SIZEOF(a0),d6
	sub.l	0(a3,d1.w),d6
	add.l	0(a1,d1.w),d6
	move.w	d6,ci_DestData+ci_SIZEOF(a0)
	swap	d6
	move.w	d6,ci_DestData(a0)
	lea	ci_SIZEOF*2(a0),a0
	bra.s	it_lp
no_intermed:

done_pokes:
; now, we need to signal queue the db node if the replyports are set.
;
;
;    d2 neg	---------------------------------	safe2write      safe2change
;		|other vp			|	  now		  nextvb
;		|				|
;    d2=0	---------------------------------
;		|the vp				|	  nextvb	  2ndvb
;		|				|
;		|				|
;    d2=bpos2	---------------------------------
;		|other vp			|	  now		  2ndvb
;		|				|
;		---------------------------------
;

	move.l	a6,a5
	move.l	gb_ExecBase(a6),a6

	tst.l	dbi_SafeMessage+MN_REPLYPORT(a2)
	beq.s	no_safesig
; sig now if d3 <0 or >bpos2, else queue 1 vb ahead.
	tst.w	d2
	bmi.s	signow
	cmp.w	dbi_BeamPos2(a2),d2
	blt.s	signext
signow:	lea	dbi_SafeMessage(a2),a1
	jsr	_LVOReplyMsg(a6)
	bra.s	no_safesig
signext:
	move.l	#1,dbi_Count1(a2)
	move.l	gb_DBList(a5),dbi_Link1(a2)
	move.l	a2,gb_DBList(a5)
no_safesig:
	tst.l	dbi_DispMessage+MN_REPLYPORT(a2)
	beq.s	no_chgsig
	moveq	#1,d3
	tst.w	d2
	bmi.s	chgnextvb
	addq.l	#1,d3
chgnextvb:
	lea	dbi_Link2(a2),a2
	move.l	d3,dbi_Count1(a2)
	move.l	gb_DBList(a5),dbi_Link1(a2)
	move.l	a2,gb_DBList(a5)
no_chgsig:
	ENABLE
	move.l	a5,a6
no_dspins:
	movem.l	(a7)+,d2-d7/a2-a6
	move.l	a6,d0
	move.l	gb_ActiViewCprSemaphore(a6),a0
	move.l	gb_ExecBase(a6),a6
	jsr	_LVOReleaseSemaphore(a6)
	move.l	d0,a6
	rts




	

	end
@


39.14
log
@added support for no cl update
fixed sync bug. Now clips beampos against gbase->min_row.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.13 92/12/11 10:25:18 chrisg Exp Locker: chrisg $
d345 1
a345 1
	btst	#GFXF_HR_AGNUS,gb_ChipRevBits0(a6)
d359 7
a365 1
	btst	#3,vp_Modes(a3)			; HAM?
d446 1
a446 1
;    d3 neg	---------------------------------	safe2write      safe2change
d449 1
a449 1
;    d3=0	---------------------------------
d453 1
a453 1
;    d3=bpos2	---------------------------------
d465 1
a465 1
	tst.w	d3
d467 1
a467 1
	cmp.w	dbi_BeamPos2(a2),d3
d479 2
a480 2
	moveq	#1,d2
	tst.w	d3
d482 1
a482 1
	addq.l	#1,d2
d485 1
a485 1
	move.l	d2,dbi_Count1(a2)
@


39.13
log
@fixed a bunch of synchronization problems.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.12 92/12/07 16:13:59 chrisg Exp Locker: chrisg $
d8 1
a224 2
	move.l	cl_CopLStart(a4),a5		; a5=lof
	move.l	cl_CopSStart(a4),a4		; a4=shf
d232 7
d255 2
a303 1
	move.w	d1,dbi_BeamPos1(a2)
d309 1
a309 2
	add.w	d2,d1
	move.w	d1,dbi_BeamPos2(a2)
d311 12
@


39.12
log
@fixed negative dyoffset hang.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.11 92/11/02 17:32:31 chrisg Exp Locker: chrisg $
d81 2
a82 2
*		while(! GetMsg(ports[1])) Wait(1l<<(ports[1]->mp_SigBit));
*	    SafeToWrite=TRUE1;
d98 1
a98 1
*	    while(! GetMsg(ports[1])) Wait(1l<<(ports[1]->mp_SigBit));
d272 7
a278 1
	move	#30000,d0					; set if sync not needed.
d284 11
a294 2
	move.w	v_DyOffset(a0),d0
	add.w	vp_DyOffset(a3),d0
d296 8
a303 2
	move.w	d0,dbi_BeamPos1(a2)
	move.w	vp_DHeight(a3),dbi_BeamPos2(a2)
d333 1
a333 1
	cmp.w	#-3,d2
d341 1
a341 1
	btst	#4,vp_Modes(a3)			; HAM?
d351 1
a351 1
	bne.s	2$
@


39.11
log
@fixed for ham8
tested in lace & non-lace & intermed
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.10 92/09/24 13:33:06 chrisg Exp Locker: chrisg $
d311 1
a311 1
	bhs.s	good_count
@


39.10
log
@autodoc
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.9 92/07/01 10:17:46 chrisg Exp Locker: chrisg $
d319 5
a323 1
	move.l	vp_RasInfo(a3),a3
d329 4
d335 1
a337 2
	move.l	(a1)+,d7
	sub.l	(a3)+,d7
d340 12
a351 7
	move.w	2(a5),d1
	swap	d1
	move.w	6(a5),d1
	add.l	d7,d1
	move.w	d1,6(a5)
	swap	d1
	move.w	d1,2(a5)
d356 11
a366 7
	move.w	2(a4),d1
	swap	d1
	move.w	6(a4),d1
	add.l	d7,d1
	move.w	d1,6(a4)
	swap	d1
	move.w	d1,2(a4)
d369 3
d374 19
a392 7
	move.w	ci_DestData(a0),d1
	swap	d1
	move.w	ci_DestData+ci_SIZEOF(a0),d1
	add.l	d7,d1
	move.w	d1,ci_DestData+ci_SIZEOF(a0)
	swap	d1
	move.w	d1,ci_DestData(a0)
d394 1
d396 1
a396 2
end_loop:
	dbra	d0,pl_loop
@


39.9
log
@docs on signalling.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.8 92/06/09 08:42:25 chrisg Exp Locker: chrisg $
d25 1
a25 1
*       AllocDBufInfo -- Allocate information for multi-buffered animation (V39)
a44 4
*	The only field of the DBufInfo structure which can be used by application
*	programs is the DB_SigBit field, which contains a signal number
*	which may be waited on in order to pause until the buffers have
*	switched.
d46 18
d65 3
a67 3
*	the structure will grow in future releases. The only fields which an
*	Application may use are dbi_SafeMessafe, dbi_UserData1, dbi_DispMessage,
*	and dbi_UserData2.
d69 31
a171 12
*
*	Synchronization of double-buffering can be achieved by modifying
*	the dbi_SafeMessage and dbi_DispMessage fields of the DBufInfo
*	structure. If you set the mn_ReplyPort of these message structures
*	to point at your own MsgPort, than these messages will be replied
*	to when it is safe to write to the old bitmap, and when it the new
*	image data has been seen at least once. The dbi_UserData1 and
*	dbi_UserData2 fields of the DBufInfo can be used to store application
*	specific information, which can be examined when a syncronization
*	message arrives at the sepcified ReplyPort.
*
*	
@


39.8
log
@ was using wrong bit and constant for VP_HIDE.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.7 92/06/03 16:25:08 chrisg Exp Locker: chrisg $
d50 5
d128 10
a137 1
*	This call allows you to synchronize the switching of buffers with
a138 1

d152 5
@


39.7
log
@changes.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.6 92/05/05 11:40:07 chrisg Exp Locker: chrisg $
d207 1
a207 1
	cmp.w	#bplpt,(a5)
d209 1
a209 1
	bne.s	synced_hw_1
d221 2
a222 2
	moveq	#-127,d0					; set if sync not needed.
	btst	#11-8,vp_Modes(a3)		; VP_HIDE?
@


39.6
log
@copper list caching and autodoc change.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.5 92/03/03 13:59:23 chrisg Exp Locker: chrisg $
d10 1
d20 1
d145 1
d155 3
a158 1
; now, we need to get registers a5=lof a4=shf a0=dspins
d161 1
a161 1
	beq.s	cache_hit			; cache is valid
d167 6
a172 1
	bne	no_dspins
d213 7
d221 11
d235 32
a312 1
	
d315 49
@


39.5
log
@  autodoc.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.4 92/02/28 14:02:40 chrisg Exp Locker: chrisg $
d12 1
a119 6
*	After calling ChangeVPBitMap, it may not yet be safe to write to
*	the old BitMap, depending on where the beam position was.
*	So, you should Wait() for the signal in db->dbi_SigBit, which will be
*	sent to you when it is safe to write to the old bitmap. If the video
*	beam was outside of the viewport when ChangeVPBitMap was called,
*	This signal may be issued immediately.
d121 4
d149 1
d152 5
d203 5
d218 3
a220 3
	move.l	(a1),d7
	sub.l	(a3),d7
	cmp	#0,a5
d231 1
a231 1
	cmp	#0,a4
d242 1
a242 1
	cmp	#0,a0
a252 2
	lea	4(a3),a3
	lea	4(a1),a1
@


39.4
log
@made load execbase. stupid.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.3 92/02/20 13:46:01 chrisg Exp Locker: chrisg $
d22 1
a22 1
*       AllocDBufInfo -- Allocate information for multi-buffered animation
d66 1
a66 1
*       FreeDBufInfo -- free information for multi-buffered animation
d107 1
a107 1
*			  animation
@


39.3
log
@freedbufinfo(NULL) is now ok.
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.2 92/02/14 15:58:09 chrisg Exp Locker: chrisg $
d55 2
a56 1
	movem.l	a6,-(a7)
d60 1
a60 1
1$:	movem.l	(a7)+,a6
@


39.2
log
@massive fixes!
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.1 92/01/29 17:00:45 chrisg Exp Locker: chrisg $
d55 1
a55 6
	movem.l	d2/a6,-(a7)
	move.l	gb_ExecBase(a6),a6
	moveq	#-1,d0
	jsr	_LVOAllocSignal(a6)
	move.l	d0,d2
	bmi.s	2$
d59 1
a59 7
	tst.l	d0
	beq.s	2$
	move.l	d0,a0
	move.l	ThisTask(a6),dbi_SigTask(a0)
	move.b	d2,dbi_SigBit(a0)
	move.l	a0,d0
1$:	movem.l	(a7)+,d2/a6
a60 2
2$:	moveq	#0,d0
	bra.s	1$
d69 1
a69 1
*	             a0
d82 1
d92 3
a94 2
	movem.l	a2/a6,-(a7)
	move.l	a0,a2
a95 4
	moveq	#0,d0
	move.b	dbi_SigBit(a2),d0
	jsr	_LVOFreeSignal(a6)
	move.l	a2,a1
d98 2
a99 2
	movem.l	(a7)+,a2/a6
	rts
@


39.1
log
@ fixed syntax error in conditional code
@
text
@d3 1
a3 1
*	$Id: changevpbitmap.asm,v 39.0 91/12/20 15:55:07 chrisg Exp Locker: chrisg $
d14 2
d179 2
d202 1
d204 2
d209 1
a219 2
	lea	-2(a5),a5	; point at data part of opcode so that 0 ofs adr can be used.
	lea	-2(a4),a4
d222 5
a226 1
	move.w	(a5),d1
d228 3
a230 4
	move.w	4(a5),d1
	sub.l	(a3)+,d1
	add.l	(a1)+,d1
	move.w	d1,4(a5)
d232 1
a232 1
	move.w	d1,(a5)
d234 1
d236 2
a237 2
	beq.s	end_loop
	move.w	(a4),d1
d239 3
a241 4
	move.w	4(a4),d1
	sub.l	(a3)+,d1
	add.l	(a1)+,d1
	move.w	d1,4(a4)
d243 1
a243 1
	move.w	d1,(a4)
d245 15
@


39.0
log
@  first semi working version
@
text
@d3 1
a3 1
*	$Id: Exp $
d181 1
a181 1
		failt copper_move not zero
@
