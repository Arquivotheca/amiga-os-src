head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.1 rel39_76:39.1 rel39_71:39.1 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


39.1
date     92.06.16.12.11.22;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.23.34;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.13.57.18;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.17.01.34;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.12.05.26;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.23.51;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.07.27.16.36.09;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.17.28.48;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     89.05.05.18.58.04;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     88.10.04.15.54.53;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.02;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@short branches
@
text
@*******************************************************************************
*
*	$Id: AreaEllipse.asm,v 37.3 91/05/01 13:57:18 chrisg Exp $
*
*******************************************************************************

	section	graphics
    xdef    _AreaEllipse

******* graphics.library/AreaEllipse ********************************************
*
*    NAME
*	AreaEllipse -- add a ellipse to areainfo list for areafill.
*
*
*    SYNOPSIS
*	error = AreaEllipse( rp, cx,   cy,   a,    b    )
*	d0		     a1  d0:16 d1:16 d2:16 d3:16
*
*	LONG AreaEllipse( struct RastPort *, SHORT, SHORT, SHORT, SHORT)
*
*    FUNCTION
*	Add an ellipse to the vector buffer. It will be draw when AreaEnd() is
*	called.
*
*    INPUTS
*	rp - pointer to a RastPort structure
*	cx - x coordinate of the centerpoint relative to the rastport.
*	cy - y coordinate of the centerpoint relative to the rastport.
*	a  - the horizontal radius of the ellipse (note: a must be > 0)
*	b  - the vertical radius of the ellipse (note: b must be > 0)
*
*    RESULT
*	error - zero for success, or -1 if there is no space left in the
*		vector list
*
*    SEE ALSO
*	AreaMove() AreaDraw() AreaCircle() InitArea() AreaEnd()
*	graphics/rastport.h
*
********************************************************************************

	include 'exec/types.i'
	include 'graphics/rastport.i'
	include '/c/areafill.i'

	xref	_LVOAreaDraw

_AreaEllipse:
*				use a0 as scratch pointer
* this could be speeded up by using upper 16 bits of d0/d1 as scratch
	movem.l	d2/d3/d7,-(sp)
	move.l	rp_AreaInfo(a1),a0		*get pointer to AreaInfo structure

*	bart - 05.01.86 begin routine - close last polygon if still open

	move.w	ai_Count(a0),d7			* copy current count
	if #0<>d7.w
	    move.l	a2,-(sp)		* need another register
	    move.l	ai_FlagPtr(a0),a2
	    if -(a2).b=#0			* was previous point a move?
		sub.w	#1,ai_Count(a0)		* yes, lets just backup
		move.l	a2,ai_FlagPtr(a0)
		subq.l	#4,ai_VctrPtr(a0)
	    else
		cmp.w	#2,d7			* at least two instructions ?
		blt.s	not_extended		* no, could not be extended...
		btst    #EXTENDEDn,-(a2)	* was an extended instruction ?
		if =
not_extended:
		    move.l	ai_VctrPtr(a0),a2 
*		    				* now check if previous polygon 
*						* was closed properly
		    move.w	-4(a2),d7	* get old x
		    if ai_FirstX(a0)=d7
			move.w -2(a2),d7	* get old y
			cmp.w ai_FirstY(a0),d7
			beq.s closed
		    endif
		    move.l	a1,a2			* save RastPort here
		    movem.w	d0/d1,-(sp)		* save these guys also
		    movem.w	ai_FirstX(a0),d0/d1	* get original start
		    jsr	_LVOAreaDraw(a6)		* close it up, sets cc
		    movem.w	(sp)+,d0/d1		* restore d0/d1
		    move.l	a2,a1			* get RastPort back
		    if <				* now test the cc return
			move.l	(sp)+,a2
			bra.s bad
		    endif
		endif
	    endif	
closed:
	    move.l	(sp)+,a2		* restore the saved register
	endif

*	bart - 05.01.86 end routine  - close last polygon if still open

	move.w	ai_Count(a0),d7			* get current count of vectors
	addq.w	#2,d7				* ellipse takes two points
	if ai_MaxCount(a0)>=d7.w
		move.w	d7,ai_Count(a0)		* store new count

*		always draw boundary for ellipses
		moveq	#MDFLAG2,d7

*		overwrite boundary with outline -- bart 88.10.04 
		btst #RPB_AREAOUTLINE,rp_Flags+1(a1)
		if <>
			or.b	#DRWBNDRY,d7
		endif

*		ellipse is extended instuction
		or.b	#EXTENDED,d7

*		no longer need RastPort pointer so we can use a1 now
		move.l	ai_VctrPtr(a0),a1

*		don't need to look at previous instruction - bart - 04.28.86
*		if -2(a1)<>d1.w
			or.b	#MDFLAG1,d7
*		endif

		move.w	d0,(a1)		
		sub.w	d2,(a1)+		* stash away xmin
		move.w	d1,(a1)		
		sub.w	d3,(a1)+		* stash away ymin
		move.w	d0,(a1)		
		add.w	d2,(a1)+		* stash away xmax
		move.w	d1,(a1)		
		add.w	d3,(a1)+		* stash away ymax

		move.l	a1,ai_VctrPtr(a0)	* new pointer

		move.l	ai_FlagPtr(a0),a1	* get pointer to flags
		move.b	d7,(a1)+		* stash first flag btye
		moveq	#ELLIPSE,d7		* extended command
		move.b	d7,(a1)+		* stash extended flag btye
		move.l	a1,ai_FlagPtr(a0)
		
		moveq	#0,d0			* no error
	else
*		too many vectors
bad:
		moveq	#-1,d0				* return error
	endif
	movem.l	(sp)+,d2/d3/d7				* does not affect ccr
	rts

	end
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: AreaEllipse.asm,v 37.3 91/05/01 13:57:18 chrisg Exp Locker: chrisg $
d88 1
a88 1
			bra bad
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: AreaEllipse.asm,v 37.2 91/02/12 17:01:34 chrisg Exp Locker: chrisg $
@


37.2
log
@autodocs - parens
@
text
@d3 1
a3 1
*	$Id: AreaEllipse.asm,v 37.1 91/02/12 12:05:26 chrisg Exp Locker: chrisg $
d45 1
a45 1
	include '../c/areafill.i'
@


37.1
log
@ Autodoc editing.
@
text
@d3 1
a3 1
*	$Id: AreaEllipse.asm,v 37.0 91/01/07 15:23:51 spence Exp Locker: chrisg $
d23 1
a23 1
*	Add ellipse to the vector buffer. It will be draw when AreaEnd is
d38 1
a38 1
*	AreaMove(), AreaDraw(), AreaCircle(), InitArea(), AreaEnd(),
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: AreaEllipse.asm,v 1.5 90/07/27 16:36:09 bart Exp Locker: spence $
d20 1
a20 4
*	LONG error;
*	struct RastPort *rp;
*	SHORT cx, cy;
*	SHORT a, b;
d23 2
a24 1
*	Add ellipse to the vector buffer.
d30 2
a31 2
*	a - the horizontal radius of the ellipse (note: a must be > 0)
*	b - the vertical radius of the ellipse (note: b must be > 0)
d33 3
a35 3
*    RESULTS
*	0 if no error
*	-1 if no space left in vector list
d38 2
a39 1
*	AreaMove, AreaDraw, AreaCircle, InitArea, AreaEnd, graphics/rastport.h
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: AreaEllipse.asm,v 1.3 89/05/05 18:58:04 bart Exp $
@


1.3
log
@fixed bug B4338, B4330
@
text
@d3 1
a3 1
*	$Header: AreaEllipse.asm,v 1.2 88/10/04 15:54:53 bart Exp $
@


1.2
log
@areaoutline for ellipses
@
text
@d3 1
a3 1
*	$Header: AreaEllipse.asm,v 1.1 88/05/01 15:36:02 dale Exp $
d68 1
a69 1
		blt.s	not_extended
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: AreaEllipse.asm,v 33.0 86/05/17 15:03:51 bart Exp $
d106 6
@
