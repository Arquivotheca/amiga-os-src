head     39.12;
branch   ;
access   ;
symbols  rel39_24:39.12 rel39_18:39.11 rel39_97:39.10 rel39_90:39.10 rel39_89:39.10 rel39_82:39.10 rel39_76:39.10 rel39_71:39.10 rel39_65:39.8 rel39_64:39.8 rel39_61:39.8 rel39_60:39.8 rel39_55:39.7 rel39_52:39.7 rel39_47:39.7 rel39_39:39.6 rel39_38:39.6 rel39_37:39.6 rel39_35:39.6 rel39_34:39.6 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.8 V36_208:1.8 V36_207:1.8 V36_205:1.8 V36_203:1.8 V36_202:1.8 V36_201:1.8 V36_200:1.8 V36_199:1.8 V36_198:1.8 V36_196:1.8 V36_195:1.8 V36_194:1.8 V36_193:1.8 V36_192:1.8 V36_191:1.8 V36_190:1.8 V36_189:1.8 V36_188:1.8 V36_187:1.8 V36_186:1.8 V36_185:1.8 V36_184:1.8 V36_183:1.8 V36_182:1.8 V36_181:1.8 V36_180:1.8;
locks    ; strict;
comment  @@;


39.12
date     93.05.05.08.58.09;  author chrisg;  state Exp;
branches ;
next     39.11;

39.11
date     93.03.12.16.22.18;  author chrisg;  state Exp;
branches ;
next     39.10;

39.10
date     92.07.01.10.32.38;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     92.06.16.13.06.08;  author chrisg;  state Exp;
branches ;
next     39.8;

39.8
date     92.05.19.13.10.45;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.04.14.32.49;  author chrisg;  state Exp;
branches ;
next     39.6;

39.6
date     91.11.11.11.42.33;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     91.10.30.19.10.37;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     91.10.17.13.58.01;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     91.10.15.15.49.10;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     91.10.07.13.22.32;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.09.26.10.10.47;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.29.01;  author chrisg;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.12.16.29.57;  author chrisg;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.03.11.54.45;  author chrisg;  state Exp;
branches ;
next     37.5;

37.5
date     91.06.14.11.07.14;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.06.06.14.15.23;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.30.08.34.09;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.15.11.33.29;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.14.33.43;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.24.55;  author spence;  state Exp;
branches ;
next     1.8;

1.8
date     90.07.27.16.39.13;  author bart;  state Exp;
branches ;
next     1.7;

1.7
date     90.05.27.12.58.30;  author bart;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.27.17.13.53;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     90.03.13.15.15.53;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     89.04.29.15.36.52;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     88.05.03.13.24.15;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.01.20.39.32;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.22;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.12
log
@fixed failure case to not FreeMem(x,0)!!!!
@
text
@*******************************************************************************
*
*	$Id: getcolormap.asm,v 39.11 93/03/12 16:22:18 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	section	graphics

	IFD	AA_ONLY
	OPT	P=68020
	endc

	xref	_AttachPaletteExtra
	xdef    _GetColorMap
	xdef	_dflt_clrs

******* graphics.library/GetColorMap ******************************************
*
*   NAME
*       GetColorMap -- allocate and initialize Colormap
*
*
*   SYNOPSIS
*       cm = GetColorMap( entries )
*       d0		    d0
*
*	struct ColorMap *GetColorMap( ULONG);
*
*   FUNCTION
*       Allocates, initializes and returns a pointer to a ColorMap
*       data structure, later enabling calls to SetRGB4 
*       and LoadRGB4 to load colors for a view port. The ColorTable
*	pointer in the ColorMap structure points to a hardware
*	specific colormap data structure. You should not count on
*	it being anything you can understand. Use GetRGB4() to
*	query it or SetRGB4CM to set it directly.
*
*   INPUTS
*	entries - number of entries for this colormap 
*
*    RESULT
*	The pointer value returned by this routine, if nonzero,
*       may be stored into the ViewPort.ColorMap pointer.
*       If a value of 0 is returned, the system was unable
*       to allocate enough memory space for the required
*       data structures.
*
*   BUGS
*
*   SEE ALSO
*       SetRGB4() FreeColorMap()
******************************************************************************

	include 'exec/types.i'
	include 'exec/memory.i'
	include	'/view.i'
	include	'graphics/videocontrol.i'
	include	'graphics/displayinfo.i'
	include	'graphics/gfxbase.i'

	xref	_LVOAllocMem
	xref	_LVOFreeColorMap

_GetColorMap:
	movem.l	d7/a2/a3/a6,-(sp)		* save GfxBase, scratch reg
	move.l	gb_ExecBase(a6),a6	* get ExecBase
	move.l  d0,d7			* save count

	moveq	#cm_SIZEOF+4,d0
	sub.l	a2,a2
;	using MEMF_CLEAR now, this will make default Type==0
;	for V1.4 and above we must set Type !=0 to indicate that
;	VideoCommand operations are acceptable for this colormap
	move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
	jsr	_LVOAllocMem(a6)
	tst.l	d0
	beq.s	didnt_get_it
	move.l	d0,a2		* save ColorMap * here for now
	move.l	d0,(a2)+	; store my magic cookie
	move.b	#COLORMAP_TYPE_V39,cm_Type(a2) ; new for V1.4 
	move.w	#16,cm_SpriteBase_Even(a2)
	move.w	#16,cm_SpriteBase_Odd(a2)
	move.w	#8,cm_Bp_1_base(a2)
	move.b	#-1,cm_SpriteResolution(a2)
; now, allocate space (zero filled) for low color bits
	move.l	d7,d0
	add.l	d0,d0
	move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
	jsr	_LVOAllocMem(a6)
	move.l	d0,cm_LowColorBits(a2)
	beq.s	no_colormap
	move.l	d0,a3

	move.l	d7,d0		* get the count again
	move.w	d0,cm_Count(a2)	* stash size of ColorTable
	add.l	d0,d0		* total number of bytes needed for table
	moveq	#MEMF_PUBLIC,d1
	jsr	_LVOAllocMem(a6)
	move.l	d0,cm_ColorTable(a2)	* save pointer to ColorTable
	beq.s	no_colormap
	move.l	d0,a0		; save pointer to color data
	move.l	d7,d1		* get count again
	lea	_dflt_clrs(pc),a1	* pointer to default colors
	IFD	AA_ONLY
	moveq	#0,d7
	endc
	bra.s	frog
qwe2
	IFND	AA_ONLY
	move.w	(a1)+,d0		* zero remainder of table
	else
	bfextu	(a1){d7:12},d0
	add.w	#12,d7
	endc
	move.w	d0,(a0)+
	move.w	d0,(a3)+
frog	dbra	d1,qwe2
no_oflow2:
	move.l	#INVALID_ID,cm_VPModeID(a2)
didnt_get_it:
	move.l	a2,d0
	tst.l	d0			* return with condition codes set
	movem.l	(sp)+,d7/a2/a3/a6
	rts

no_colormap:
	move.l	a2,a0
	movem.l	(sp)+,d7/a2/a3/a6
	jsr	_LVOFreeColorMap(a6)	; FreeColorMap is smart now
	clr.l	d0
	rts

_dflt_clrs:
	IFND	AA_ONLY
	dc.w		$0000,$0f00,$00f0,$0ff0,$000f,$0f0f,$00ff,$0fff
	dc.w		$0620,$0e50,$09f1,$0eb0,$055f,$092f,$00f8,$0ccc
	dc.w		$0000,$0111,$0222,$0333,$0444,$0555,$0666,$0777
	dc.w		$0888,$0999,$0aaa,$0bbb,$0ccc,$0ddd,$0eee,$0fff
	dc.w		$0fff,$0888,$0fff,$0ccc,$0444,$0fff,$0fff,$08ff
	dc.w		$0488,$0cff,$06cc,$0244,$0aff,$0eff,$0cff,$0688
	dc.w		$0fff,$09cc,$0344,$0fff,$0fff,$04ff,$0288,$06ff
	dc.w		$03cc,$0144,$05ff,$07ff,$0f8f,$0848,$0fcf,$0c6c
	dc.w		$0424,$0faf,$0fef,$088f,$0448,$0ccf,$066c,$0224
	dc.w		$0aaf,$0eef,$0c8f,$0648,$0fcf,$096c,$0324,$0faf
	dc.w		$0fef,$048f,$0248,$06cf,$036c,$0124,$05af,$07ef
	dc.w		$0fcf,$0868,$0fff,$0c9c,$0434,$0fff,$0fff,$08cf
	dc.w		$0468,$0cff,$069c,$0234,$0aff,$0eff,$0ccf,$0668
	dc.w		$0fff,$099c,$0334,$0fff,$0fff,$04cf,$0268,$06ff
	dc.w		$039c,$0134,$05ff,$07ff,$0f4f,$0828,$0f6f,$0c3c
	dc.w		$0414,$0f5f,$0f7f,$084f,$0428,$0c6f,$063c,$0214
	dc.w		$0a5f,$0e7f,$0c4f,$0628,$0f6f,$093c,$0314,$0f5f
	dc.w		$0f7f,$044f,$0228,$066f,$033c,$0114,$055f,$077f
	dc.w		$0ff8,$0884,$0ffc,$0cc6,$0442,$0ffa,$0ffe,$08f8
	dc.w		$0484,$0cfc,$06c6,$0242,$0afa,$0efe,$0cf8,$0684
	dc.w		$0ffc,$09c6,$0342,$0ffa,$0ffe,$04f8,$0284,$06fc
	dc.w		$03c6,$0142,$05fa,$07fe,$0f88,$0844,$0fcc,$0c66
	dc.w		$0422,$0faa,$0fee,$0888,$0444,$0ccc,$0666,$0222
	dc.w		$0aaa,$0eee,$0c88,$0644,$0fcc,$0966,$0322,$0faa
	dc.w		$0fee,$0488,$0244,$06cc,$0366,$0122,$05aa,$07ee
	dc.w		$0fc8,$0864,$0ffc,$0c96,$0432,$0ffa,$0ffe,$08c8
	dc.w		$0464,$0cfc,$0696,$0232,$0afa,$0efe,$0cc8,$0664
	dc.w		$0ffc,$0996,$0332,$0ffa,$0ffe,$04c8,$0264,$06fc
	dc.w		$0396,$0132,$05fa,$07fe,$0f48,$0824,$0f6c,$0c36
	dc.w		$0412,$0f5a,$0f7e,$0848,$0424,$0c6c,$0636,$0212
	dc.w		$0a5a,$0e7e,$0c48,$0624,$0f6c,$0936,$0312,$0f5a
	dc.w		$0f7e,$0448,$0224,$066c,$0336,$0112,$055a,$077e
	else

	dc.b		$00,$0f,$00,$0f,$0f,$f0,$00,$ff,$0f,$0f,$ff,$ff
	dc.b		$62,$0e,$50,$9f,$1e,$b0,$55,$f9,$2f,$0f,$8c,$cc
	dc.b		$00,$01,$11,$22,$23,$33,$44,$45,$55,$66,$67,$77
	dc.b		$88,$89,$99,$aa,$ab,$bb,$cc,$cd,$dd,$ee,$ef,$ff
	dc.b		$ff,$f8,$88,$ff,$fc,$cc,$44,$4f,$ff,$ff,$f8,$ff
	dc.b		$48,$8c,$ff,$6c,$c2,$44,$af,$fe,$ff,$cf,$f6,$88
	dc.b		$ff,$f9,$cc,$34,$4f,$ff,$ff,$f4,$ff,$28,$86,$ff
	dc.b		$3c,$c1,$44,$5f,$f7,$ff,$f8,$f8,$48,$fc,$fc,$6c
	dc.b		$42,$4f,$af,$fe,$f8,$8f,$44,$8c,$cf,$66,$c2,$24
	dc.b		$aa,$fe,$ef,$c8,$f6,$48,$fc,$f9,$6c,$32,$4f,$af
	dc.b		$fe,$f4,$8f,$24,$86,$cf,$36,$c1,$24,$5a,$f7,$ef
	dc.b		$fc,$f8,$68,$ff,$fc,$9c,$43,$4f,$ff,$ff,$f8,$cf
	dc.b		$46,$8c,$ff,$69,$c2,$34,$af,$fe,$ff,$cc,$f6,$68
	dc.b		$ff,$f9,$9c,$33,$4f,$ff,$ff,$f4,$cf,$26,$86,$ff
	dc.b		$39,$c1,$34,$5f,$f7,$ff,$f4,$f8,$28,$f6,$fc,$3c
	dc.b		$41,$4f,$5f,$f7,$f8,$4f,$42,$8c,$6f,$63,$c2,$14
	dc.b		$a5,$fe,$7f,$c4,$f6,$28,$f6,$f9,$3c,$31,$4f,$5f
	dc.b		$f7,$f4,$4f,$22,$86,$6f,$33,$c1,$14,$55,$f7,$7f
	dc.b		$ff,$88,$84,$ff,$cc,$c6,$44,$2f,$fa,$ff,$e8,$f8
	dc.b		$48,$4c,$fc,$6c,$62,$42,$af,$ae,$fe,$cf,$86,$84
	dc.b		$ff,$c9,$c6,$34,$2f,$fa,$ff,$e4,$f8,$28,$46,$fc
	dc.b		$3c,$61,$42,$5f,$a7,$fe,$f8,$88,$44,$fc,$cc,$66
	dc.b		$42,$2f,$aa,$fe,$e8,$88,$44,$4c,$cc,$66,$62,$22
	dc.b		$aa,$ae,$ee,$c8,$86,$44,$fc,$c9,$66,$32,$2f,$aa
	dc.b		$fe,$e4,$88,$24,$46,$cc,$36,$61,$22,$5a,$a7,$ee
	dc.b		$fc,$88,$64,$ff,$cc,$96,$43,$2f,$fa,$ff,$e8,$c8
	dc.b		$46,$4c,$fc,$69,$62,$32,$af,$ae,$fe,$cc,$86,$64
	dc.b		$ff,$c9,$96,$33,$2f,$fa,$ff,$e4,$c8,$26,$46,$fc
	dc.b		$39,$61,$32,$5f,$a7,$fe,$f4,$88,$24,$f6,$cc,$36
	dc.b		$41,$2f,$5a,$f7,$e8,$48,$42,$4c,$6c,$63,$62,$12
	dc.b		$a5,$ae,$7e,$c4,$86,$24,$f6,$c9,$36,$31,$2f,$5a
	dc.b		$f7,$e4,$48,$22,$46,$6c,$33,$61,$12,$55,$a7,$7e

	endc



	end
@


39.11
log
@packed default colors into 12 bits.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.10 92/07/01 10:32:38 chrisg Exp Locker: chrisg $
d95 1
a102 1
	move.w	d1,cm_Count(a2)	* stash size of ColorTable
@


39.10
log
@fixed failure case.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.9 92/06/16 13:06:08 chrisg Exp Locker: chrisg $
d9 4
d104 3
d108 7
a114 1
qwe2	move.w	(a1)+,d0		* zero remainder of table
d134 72
a205 256
	dc.w		$0000
	dc.w		$0f00
	dc.w		$00f0
	dc.w		$0ff0
	dc.w		$000f
	dc.w		$0f0f
	dc.w		$00ff
	dc.w		$0fff
	dc.w		$0620
	dc.w		$0e50
	dc.w		$09f1
	dc.w		$0eb0
	dc.w		$055f
	dc.w		$092f
	dc.w		$00f8
	dc.w		$0ccc
	dc.w		$0000
	dc.w		$0111
	dc.w		$0222
	dc.w		$0333
	dc.w		$0444
	dc.w		$0555
	dc.w		$0666
	dc.w		$0777
	dc.w		$0888
	dc.w		$0999
	dc.w		$0aaa
	dc.w		$0bbb
	dc.w		$0ccc
	dc.w		$0ddd
	dc.w		$0eee
	dc.w		$0fff
	dc.w		$0fff
	dc.w		$0888
	dc.w		$0fff
	dc.w		$0ccc
	dc.w		$0444
	dc.w		$0fff
	dc.w		$0fff
	dc.w		$08ff
	dc.w		$0488
	dc.w		$0cff
	dc.w		$06cc
	dc.w		$0244
	dc.w		$0aff
	dc.w		$0eff
	dc.w		$0cff
	dc.w		$0688
	dc.w		$0fff
	dc.w		$09cc
	dc.w		$0344
	dc.w		$0fff
	dc.w		$0fff
	dc.w		$04ff
	dc.w		$0288
	dc.w		$06ff
	dc.w		$03cc
	dc.w		$0144
	dc.w		$05ff
	dc.w		$07ff
	dc.w		$0f8f
	dc.w		$0848
	dc.w		$0fcf
	dc.w		$0c6c
	dc.w		$0424
	dc.w		$0faf
	dc.w		$0fef
	dc.w		$088f
	dc.w		$0448
	dc.w		$0ccf
	dc.w		$066c
	dc.w		$0224
	dc.w		$0aaf
	dc.w		$0eef
	dc.w		$0c8f
	dc.w		$0648
	dc.w		$0fcf
	dc.w		$096c
	dc.w		$0324
	dc.w		$0faf
	dc.w		$0fef
	dc.w		$048f
	dc.w		$0248
	dc.w		$06cf
	dc.w		$036c
	dc.w		$0124
	dc.w		$05af
	dc.w		$07ef
	dc.w		$0fcf
	dc.w		$0868
	dc.w		$0fff
	dc.w		$0c9c
	dc.w		$0434
	dc.w		$0fff
	dc.w		$0fff
	dc.w		$08cf
	dc.w		$0468
	dc.w		$0cff
	dc.w		$069c
	dc.w		$0234
	dc.w		$0aff
	dc.w		$0eff
	dc.w		$0ccf
	dc.w		$0668
	dc.w		$0fff
	dc.w		$099c
	dc.w		$0334
	dc.w		$0fff
	dc.w		$0fff
	dc.w		$04cf
	dc.w		$0268
	dc.w		$06ff
	dc.w		$039c
	dc.w		$0134
	dc.w		$05ff
	dc.w		$07ff
	dc.w		$0f4f
	dc.w		$0828
	dc.w		$0f6f
	dc.w		$0c3c
	dc.w		$0414
	dc.w		$0f5f
	dc.w		$0f7f
	dc.w		$084f
	dc.w		$0428
	dc.w		$0c6f
	dc.w		$063c
	dc.w		$0214
	dc.w		$0a5f
	dc.w		$0e7f
	dc.w		$0c4f
	dc.w		$0628
	dc.w		$0f6f
	dc.w		$093c
	dc.w		$0314
	dc.w		$0f5f
	dc.w		$0f7f
	dc.w		$044f
	dc.w		$0228
	dc.w		$066f
	dc.w		$033c
	dc.w		$0114
	dc.w		$055f
	dc.w		$077f
	dc.w		$0ff8
	dc.w		$0884
	dc.w		$0ffc
	dc.w		$0cc6
	dc.w		$0442
	dc.w		$0ffa
	dc.w		$0ffe
	dc.w		$08f8
	dc.w		$0484
	dc.w		$0cfc
	dc.w		$06c6
	dc.w		$0242
	dc.w		$0afa
	dc.w		$0efe
	dc.w		$0cf8
	dc.w		$0684
	dc.w		$0ffc
	dc.w		$09c6
	dc.w		$0342
	dc.w		$0ffa
	dc.w		$0ffe
	dc.w		$04f8
	dc.w		$0284
	dc.w		$06fc
	dc.w		$03c6
	dc.w		$0142
	dc.w		$05fa
	dc.w		$07fe
	dc.w		$0f88
	dc.w		$0844
	dc.w		$0fcc
	dc.w		$0c66
	dc.w		$0422
	dc.w		$0faa
	dc.w		$0fee
	dc.w		$0888
	dc.w		$0444
	dc.w		$0ccc
	dc.w		$0666
	dc.w		$0222
	dc.w		$0aaa
	dc.w		$0eee
	dc.w		$0c88
	dc.w		$0644
	dc.w		$0fcc
	dc.w		$0966
	dc.w		$0322
	dc.w		$0faa
	dc.w		$0fee
	dc.w		$0488
	dc.w		$0244
	dc.w		$06cc
	dc.w		$0366
	dc.w		$0122
	dc.w		$05aa
	dc.w		$07ee
	dc.w		$0fc8
	dc.w		$0864
	dc.w		$0ffc
	dc.w		$0c96
	dc.w		$0432
	dc.w		$0ffa
	dc.w		$0ffe
	dc.w		$08c8
	dc.w		$0464
	dc.w		$0cfc
	dc.w		$0696
	dc.w		$0232
	dc.w		$0afa
	dc.w		$0efe
	dc.w		$0cc8
	dc.w		$0664
	dc.w		$0ffc
	dc.w		$0996
	dc.w		$0332
	dc.w		$0ffa
	dc.w		$0ffe
	dc.w		$04c8
	dc.w		$0264
	dc.w		$06fc
	dc.w		$0396
	dc.w		$0132
	dc.w		$05fa
	dc.w		$07fe
	dc.w		$0f48
	dc.w		$0824
	dc.w		$0f6c
	dc.w		$0c36
	dc.w		$0412
	dc.w		$0f5a
	dc.w		$0f7e
	dc.w		$0848
	dc.w		$0424
	dc.w		$0c6c
	dc.w		$0636
	dc.w		$0212
	dc.w		$0a5a
	dc.w		$0e7e
	dc.w		$0c48
	dc.w		$0624
	dc.w		$0f6c
	dc.w		$0936
	dc.w		$0312
	dc.w		$0f5a
	dc.w		$0f7e
	dc.w		$0448
	dc.w		$0224
	dc.w		$066c
	dc.w		$0336
	dc.w		$0112
	dc.w		$055a
	dc.w		$077e
@


39.9
log
@short branches
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.8 92/05/19 13:10:45 chrisg Exp $
d115 1
a115 1
	movem.l	(sp)+,d7/a2/a6
@


39.8
log
@added magic cookie.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.7 92/04/04 14:32:49 chrisg Exp Locker: chrisg $
d73 1
a73 1
	beq	didnt_get_it
@


39.7
log
@ added init of spriteresoluition.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.6 91/11/11 11:42:33 chrisg Exp Locker: chrisg $
d65 1
a65 1
	moveq	#cm_SIZEOF,d0
d75 1
@


39.6
log
@removed genlock transparency bits stuff.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.5 91/10/30 19:10:37 spence Exp Locker: chrisg $
d79 1
a79 1

@


39.5
log
@default palette now complete (1st 32 colours were in cpwrup.c).
No longer hardcodes palette size to 256 entries.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.4 91/10/17 13:58:01 chrisg Exp Locker: spence $
a59 16
	xdef	get_genlock_byte_count
get_genlock_byte_count:
*	enter with a0 ptr to colormap structure
*	computes # of bytes for genlock transparency matrix
*	returns byte count in d0.l
*	zaps no registers except d0.l
*	this routine is used by FreeColorMap and GetColorMap
	clr.l	d0
	move.w	cm_Count(a0),d0		; get entry count
*	round to nearest 16 entries or 2 bytes
	addq.l	#7,d0	; really addq.l	#15,d0
	addq.l	#8,d0
	lsr.w	#3,d0	* we can stash 8 control bits per byte
	and.w	#$fffe,d0	; make it even
	rts

a104 9

*	Now allocate space for genlock control bits
*	again unused, a2 ptr to struct colormap
	move.l	a2,a0
	bsr	get_genlock_byte_count
	move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
	jsr	_LVOAllocMem(a6)
	move.l	d0,cm_TransparencyBits(a2)
	beq.s	no_colormap
@


39.4
log
@made default color table use only 1 word per entry. saves 512 bytes
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.3 91/10/15 15:49:10 chrisg Exp Locker: chrisg $
d8 1
a8 1
    xdef    _GetColorMap
d10 2
a59 2
	xref	_dflt_clrs

a78 1
	move.l	#256,d0			;!!! HACK !!!
d91 1
a91 1
	move.b	#COLORMAP_TYPE_V38,cm_Type(a2) ; new for V1.4 
d114 2
a115 13
	lea	_dflt_clrs,a1	* pointer to default colors
	sub	#32,d7
	ble.s	no_oflow
	moveq	#32,d1
no_oflow:
	subq	#1,d1		* predecrement for dbra
qwe	move.w	(a1),(a0)+
 	move.w	(a1)+,(a3)+	* load up colortable
	dbra	d1,qwe
	move.w	d7,d1
	ble.s	no_oflow2
	subq	#1,d1		* predecrement for dbra
	lea	_dflt_colors_new(pc),a1
d119 1
a119 1
	dbra	d1,qwe2
d144 33
a176 1
_dflt_colors_new:
@


39.3
log
@  removed cm_SpriteWidth field. in GfxBase now.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.2 91/10/07 13:22:32 chrisg Exp Locker: chrisg $
d128 3
a130 2
qwe2	move.w	(a1)+,(a0)+		* zero remainder of table
	move.w	(a1)+,(a3)+
d157 224
a380 224
	dc.w		$0fff,$0fff
	dc.w		$0888,$0000
	dc.w		$0fff,$0fff
	dc.w		$0ccc,$0000
	dc.w		$0444,$0000
	dc.w		$0fff,$0fff
	dc.w		$0fff,$0fff
	dc.w		$08ff,$00ff
	dc.w		$0488,$0000
	dc.w		$0cff,$00ff
	dc.w		$06cc,$0000
	dc.w		$0244,$0000
	dc.w		$0aff,$00ff
	dc.w		$0eff,$00ff
	dc.w		$0cff,$00ff
	dc.w		$0688,$0000
	dc.w		$0fff,$0fff
	dc.w		$09cc,$0000
	dc.w		$0344,$0000
	dc.w		$0fff,$00ff
	dc.w		$0fff,$0fff
	dc.w		$04ff,$00ff
	dc.w		$0288,$0000
	dc.w		$06ff,$00ff
	dc.w		$03cc,$0000
	dc.w		$0144,$0000
	dc.w		$05ff,$00ff
	dc.w		$07ff,$00ff
	dc.w		$0f8f,$0f0f
	dc.w		$0848,$0000
	dc.w		$0fcf,$0f0f
	dc.w		$0c6c,$0000
	dc.w		$0424,$0000
	dc.w		$0faf,$0f0f
	dc.w		$0fef,$0f0f
	dc.w		$088f,$000f
	dc.w		$0448,$0000
	dc.w		$0ccf,$000f
	dc.w		$066c,$0000
	dc.w		$0224,$0000
	dc.w		$0aaf,$000f
	dc.w		$0eef,$000f
	dc.w		$0c8f,$000f
	dc.w		$0648,$0000
	dc.w		$0fcf,$0f0f
	dc.w		$096c,$0000
	dc.w		$0324,$0000
	dc.w		$0faf,$000f
	dc.w		$0fef,$0f0f
	dc.w		$048f,$000f
	dc.w		$0248,$0000
	dc.w		$06cf,$000f
	dc.w		$036c,$0000
	dc.w		$0124,$0000
	dc.w		$05af,$000f
	dc.w		$07ef,$000f
	dc.w		$0fcf,$0f0f
	dc.w		$0868,$0000
	dc.w		$0fff,$0fff
	dc.w		$0c9c,$0000
	dc.w		$0434,$0000
	dc.w		$0fff,$0f0f
	dc.w		$0fff,$0fff
	dc.w		$08cf,$000f
	dc.w		$0468,$0000
	dc.w		$0cff,$00ff
	dc.w		$069c,$0000
	dc.w		$0234,$0000
	dc.w		$0aff,$000f
	dc.w		$0eff,$00ff
	dc.w		$0ccf,$000f
	dc.w		$0668,$0000
	dc.w		$0fff,$0fff
	dc.w		$099c,$0000
	dc.w		$0334,$0000
	dc.w		$0fff,$000f
	dc.w		$0fff,$0fff
	dc.w		$04cf,$000f
	dc.w		$0268,$0000
	dc.w		$06ff,$00ff
	dc.w		$039c,$0000
	dc.w		$0134,$0000
	dc.w		$05ff,$000f
	dc.w		$07ff,$00ff
	dc.w		$0f4f,$0f0f
	dc.w		$0828,$0000
	dc.w		$0f6f,$0f0f
	dc.w		$0c3c,$0000
	dc.w		$0414,$0000
	dc.w		$0f5f,$0f0f
	dc.w		$0f7f,$0f0f
	dc.w		$084f,$000f
	dc.w		$0428,$0000
	dc.w		$0c6f,$000f
	dc.w		$063c,$0000
	dc.w		$0214,$0000
	dc.w		$0a5f,$000f
	dc.w		$0e7f,$000f
	dc.w		$0c4f,$000f
	dc.w		$0628,$0000
	dc.w		$0f6f,$0f0f
	dc.w		$093c,$0000
	dc.w		$0314,$0000
	dc.w		$0f5f,$000f
	dc.w		$0f7f,$0f0f
	dc.w		$044f,$000f
	dc.w		$0228,$0000
	dc.w		$066f,$000f
	dc.w		$033c,$0000
	dc.w		$0114,$0000
	dc.w		$055f,$000f
	dc.w		$077f,$000f
	dc.w		$0ff8,$0ff0
	dc.w		$0884,$0000
	dc.w		$0ffc,$0ff0
	dc.w		$0cc6,$0000
	dc.w		$0442,$0000
	dc.w		$0ffa,$0ff0
	dc.w		$0ffe,$0ff0
	dc.w		$08f8,$00f0
	dc.w		$0484,$0000
	dc.w		$0cfc,$00f0
	dc.w		$06c6,$0000
	dc.w		$0242,$0000
	dc.w		$0afa,$00f0
	dc.w		$0efe,$00f0
	dc.w		$0cf8,$00f0
	dc.w		$0684,$0000
	dc.w		$0ffc,$0ff0
	dc.w		$09c6,$0000
	dc.w		$0342,$0000
	dc.w		$0ffa,$00f0
	dc.w		$0ffe,$0ff0
	dc.w		$04f8,$00f0
	dc.w		$0284,$0000
	dc.w		$06fc,$00f0
	dc.w		$03c6,$0000
	dc.w		$0142,$0000
	dc.w		$05fa,$00f0
	dc.w		$07fe,$00f0
	dc.w		$0f88,$0f00
	dc.w		$0844,$0000
	dc.w		$0fcc,$0f00
	dc.w		$0c66,$0000
	dc.w		$0422,$0000
	dc.w		$0faa,$0f00
	dc.w		$0fee,$0f00
	dc.w		$0888,$0000
	dc.w		$0444,$0000
	dc.w		$0ccc,$0000
	dc.w		$0666,$0000
	dc.w		$0222,$0000
	dc.w		$0aaa,$0000
	dc.w		$0eee,$0000
	dc.w		$0c88,$0000
	dc.w		$0644,$0000
	dc.w		$0fcc,$0f00
	dc.w		$0966,$0000
	dc.w		$0322,$0000
	dc.w		$0faa,$0000
	dc.w		$0fee,$0f00
	dc.w		$0488,$0000
	dc.w		$0244,$0000
	dc.w		$06cc,$0000
	dc.w		$0366,$0000
	dc.w		$0122,$0000
	dc.w		$05aa,$0000
	dc.w		$07ee,$0000
	dc.w		$0fc8,$0f00
	dc.w		$0864,$0000
	dc.w		$0ffc,$0ff0
	dc.w		$0c96,$0000
	dc.w		$0432,$0000
	dc.w		$0ffa,$0f00
	dc.w		$0ffe,$0ff0
	dc.w		$08c8,$0000
	dc.w		$0464,$0000
	dc.w		$0cfc,$00f0
	dc.w		$0696,$0000
	dc.w		$0232,$0000
	dc.w		$0afa,$0000
	dc.w		$0efe,$00f0
	dc.w		$0cc8,$0000
	dc.w		$0664,$0000
	dc.w		$0ffc,$0ff0
	dc.w		$0996,$0000
	dc.w		$0332,$0000
	dc.w		$0ffa,$0000
	dc.w		$0ffe,$0ff0
	dc.w		$04c8,$0000
	dc.w		$0264,$0000
	dc.w		$06fc,$00f0
	dc.w		$0396,$0000
	dc.w		$0132,$0000
	dc.w		$05fa,$0000
	dc.w		$07fe,$00f0
	dc.w		$0f48,$0f00
	dc.w		$0824,$0000
	dc.w		$0f6c,$0f00
	dc.w		$0c36,$0000
	dc.w		$0412,$0000
	dc.w		$0f5a,$0f00
	dc.w		$0f7e,$0f00
	dc.w		$0848,$0000
	dc.w		$0424,$0000
	dc.w		$0c6c,$0000
	dc.w		$0636,$0000
	dc.w		$0212,$0000
	dc.w		$0a5a,$0000
	dc.w		$0e7e,$0000
	dc.w		$0c48,$0000
	dc.w		$0624,$0000
	dc.w		$0f6c,$0f00
	dc.w		$0936,$0000
	dc.w		$0312,$0000
	dc.w		$0f5a,$0000
	dc.w		$0f7e,$0f00
	dc.w		$0448,$0000
	dc.w		$0224,$0000
	dc.w		$066c,$0000
	dc.w		$0336,$0000
	dc.w		$0112,$0000
	dc.w		$055a,$0000
	dc.w		$077e,$0000
@


39.2
log
@ Yet another default palette.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.1 91/09/26 10:10:47 chrisg Exp Locker: chrisg $
a95 1
	move.w	#1,cm_SpriteWidth(a2)
@


39.1
log
@ regenerated color entries. The brightness component is now
bit-reversed so that you get the same ranges (but less
precision) on shallower screens.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 39.0 91/08/21 17:29:01 chrisg Exp Locker: chrisg $
d157 1
a157 10
	dc.w		$0448,$0000
	dc.w		$044f,$000f
	dc.w		$0488,$0000
	dc.w		$048f,$000f
	dc.w		$04c8,$0000
	dc.w		$04cf,$000f
	dc.w		$04f8,$00f0
	dc.w		$04ff,$00ff
	dc.w		$0848,$0000
	dc.w		$084f,$000f
d159 5
a163 4
	dc.w		$088f,$000f
	dc.w		$08c8,$0000
	dc.w		$08cf,$000f
	dc.w		$08f8,$00f0
d165 6
a170 7
	dc.w		$0c48,$0000
	dc.w		$0c4f,$000f
	dc.w		$0c88,$0000
	dc.w		$0c8f,$000f
	dc.w		$0cc8,$0000
	dc.w		$0ccf,$000f
	dc.w		$0cf8,$00f0
d172 13
a184 3
	dc.w		$0f48,$0f00
	dc.w		$0f4f,$0f0f
	dc.w		$0f88,$0f00
d186 1
a186 1
	dc.w		$0fc8,$0f00
d188 1
a188 10
	dc.w		$0ff8,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0224,$0000
	dc.w		$0228,$0000
	dc.w		$0244,$0000
	dc.w		$0248,$0000
	dc.w		$0264,$0000
	dc.w		$0268,$0000
	dc.w		$0284,$0000
	dc.w		$0288,$0000
d190 3
a192 2
	dc.w		$0428,$0000
	dc.w		$0444,$0000
d194 6
a199 7
	dc.w		$0464,$0000
	dc.w		$0468,$0000
	dc.w		$0484,$0000
	dc.w		$0488,$0000
	dc.w		$0624,$0000
	dc.w		$0628,$0000
	dc.w		$0644,$0000
d201 7
a207 15
	dc.w		$0664,$0000
	dc.w		$0668,$0000
	dc.w		$0684,$0000
	dc.w		$0688,$0000
	dc.w		$0824,$0000
	dc.w		$0828,$0000
	dc.w		$0844,$0000
	dc.w		$0848,$0000
	dc.w		$0864,$0000
	dc.w		$0868,$0000
	dc.w		$0884,$0000
	dc.w		$0888,$0000
	dc.w		$066c,$0000
	dc.w		$066f,$000f
	dc.w		$06cc,$0000
d209 4
a212 15
	dc.w		$06fc,$00f0
	dc.w		$06ff,$00ff
	dc.w		$06fc,$00f0
	dc.w		$06ff,$00ff
	dc.w		$0c6c,$0000
	dc.w		$0c6f,$000f
	dc.w		$0ccc,$0000
	dc.w		$0ccf,$000f
	dc.w		$0cfc,$00f0
	dc.w		$0cff,$00ff
	dc.w		$0cfc,$00f0
	dc.w		$0cff,$00ff
	dc.w		$0f6c,$0f00
	dc.w		$0f6f,$0f0f
	dc.w		$0fcc,$0f00
d214 1
a214 1
	dc.w		$0ffc,$0ff0
d216 3
a218 1
	dc.w		$0ffc,$0ff0
d220 9
a228 5
	dc.w		$0f6c,$0f00
	dc.w		$0f6f,$0f0f
	dc.w		$0fcc,$0f00
	dc.w		$0fcf,$0f0f
	dc.w		$0ffc,$0ff0
d230 3
a232 1
	dc.w		$0ffc,$0ff0
d234 4
a237 5
	dc.w		$0112,$0000
	dc.w		$0114,$0000
	dc.w		$0122,$0000
	dc.w		$0124,$0000
	dc.w		$0132,$0000
d239 13
a251 3
	dc.w		$0142,$0000
	dc.w		$0144,$0000
	dc.w		$0212,$0000
d253 27
a279 4
	dc.w		$0222,$0000
	dc.w		$0224,$0000
	dc.w		$0232,$0000
	dc.w		$0234,$0000
d281 6
a286 7
	dc.w		$0244,$0000
	dc.w		$0312,$0000
	dc.w		$0314,$0000
	dc.w		$0322,$0000
	dc.w		$0324,$0000
	dc.w		$0332,$0000
	dc.w		$0334,$0000
d288 13
a300 3
	dc.w		$0344,$0000
	dc.w		$0412,$0000
	dc.w		$0414,$0000
d302 3
a304 4
	dc.w		$0424,$0000
	dc.w		$0432,$0000
	dc.w		$0434,$0000
	dc.w		$0442,$0000
d306 3
a308 10
	dc.w		$055a,$0000
	dc.w		$055f,$000f
	dc.w		$05aa,$0000
	dc.w		$05af,$000f
	dc.w		$05fa,$0000
	dc.w		$05ff,$000f
	dc.w		$05fa,$00f0
	dc.w		$05ff,$00ff
	dc.w		$0a5a,$0000
	dc.w		$0a5f,$000f
d310 6
a315 7
	dc.w		$0aaf,$000f
	dc.w		$0afa,$0000
	dc.w		$0aff,$000f
	dc.w		$0afa,$00f0
	dc.w		$0aff,$00ff
	dc.w		$0f5a,$0000
	dc.w		$0f5f,$000f
d317 13
a329 9
	dc.w		$0faf,$000f
	dc.w		$0ffa,$0000
	dc.w		$0fff,$000f
	dc.w		$0ffa,$00f0
	dc.w		$0fff,$00ff
	dc.w		$0f5a,$0f00
	dc.w		$0f5f,$0f0f
	dc.w		$0faa,$0f00
	dc.w		$0faf,$0f0f
d331 4
a334 15
	dc.w		$0fff,$0f0f
	dc.w		$0ffa,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0336,$0000
	dc.w		$033c,$0000
	dc.w		$0366,$0000
	dc.w		$036c,$0000
	dc.w		$0396,$0000
	dc.w		$039c,$0000
	dc.w		$03c6,$0000
	dc.w		$03cc,$0000
	dc.w		$0636,$0000
	dc.w		$063c,$0000
	dc.w		$0666,$0000
	dc.w		$066c,$0000
d336 6
a341 7
	dc.w		$069c,$0000
	dc.w		$06c6,$0000
	dc.w		$06cc,$0000
	dc.w		$0936,$0000
	dc.w		$093c,$0000
	dc.w		$0966,$0000
	dc.w		$096c,$0000
d343 13
a355 3
	dc.w		$099c,$0000
	dc.w		$09c6,$0000
	dc.w		$09cc,$0000
d357 5
a361 2
	dc.w		$0c3c,$0000
	dc.w		$0c66,$0000
d363 3
a365 12
	dc.w		$0c96,$0000
	dc.w		$0c9c,$0000
	dc.w		$0cc6,$0000
	dc.w		$0ccc,$0000
	dc.w		$077e,$0000
	dc.w		$077f,$000f
	dc.w		$07ee,$0000
	dc.w		$07ef,$000f
	dc.w		$07fe,$00f0
	dc.w		$07ff,$00ff
	dc.w		$07fe,$00f0
	dc.w		$07ff,$00ff
d367 6
a372 7
	dc.w		$0e7f,$000f
	dc.w		$0eee,$0000
	dc.w		$0eef,$000f
	dc.w		$0efe,$00f0
	dc.w		$0eff,$00ff
	dc.w		$0efe,$00f0
	dc.w		$0eff,$00ff
d374 7
a380 17
	dc.w		$0f7f,$0f0f
	dc.w		$0fee,$0f00
	dc.w		$0fef,$0f0f
	dc.w		$0ffe,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0ffe,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0f7e,$0f00
	dc.w		$0f7f,$0f0f
	dc.w		$0fee,$0f00
	dc.w		$0fef,$0f0f
	dc.w		$0ffe,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0ffe,$0ff0
	dc.w		$0fff,$0fff


@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 38.1 91/07/12 16:29:57 chrisg Exp Locker: chrisg $
d157 32
a188 32
	dc.w		$0112,$0000
	dc.w		$0114,$0000
	dc.w		$0122,$0000
	dc.w		$0124,$0000
	dc.w		$0132,$0000
	dc.w		$0134,$0000
	dc.w		$0142,$0000
	dc.w		$0144,$0000
	dc.w		$0212,$0000
	dc.w		$0214,$0000
	dc.w		$0222,$0000
	dc.w		$0224,$0000
	dc.w		$0232,$0000
	dc.w		$0234,$0000
	dc.w		$0242,$0000
	dc.w		$0244,$0000
	dc.w		$0312,$0000
	dc.w		$0314,$0000
	dc.w		$0322,$0000
	dc.w		$0324,$0000
	dc.w		$0332,$0000
	dc.w		$0334,$0000
	dc.w		$0342,$0000
	dc.w		$0344,$0000
	dc.w		$0412,$0000
	dc.w		$0414,$0000
	dc.w		$0422,$0000
	dc.w		$0424,$0000
	dc.w		$0432,$0000
	dc.w		$0434,$0000
	dc.w		$0442,$0000
	dc.w		$0444,$0000
a220 11
	dc.w		$0336,$0000
	dc.w		$033c,$0000
	dc.w		$0366,$0000
	dc.w		$036c,$0000
	dc.w		$0396,$0000
	dc.w		$039c,$0000
	dc.w		$03c6,$0000
	dc.w		$03cc,$0000
	dc.w		$0636,$0000
	dc.w		$063c,$0000
	dc.w		$0666,$0000
d222 1
a222 3
	dc.w		$0696,$0000
	dc.w		$069c,$0000
	dc.w		$06c6,$0000
d224 5
a228 11
	dc.w		$0936,$0000
	dc.w		$093c,$0000
	dc.w		$0966,$0000
	dc.w		$096c,$0000
	dc.w		$0996,$0000
	dc.w		$099c,$0000
	dc.w		$09c6,$0000
	dc.w		$09cc,$0000
	dc.w		$0c36,$0000
	dc.w		$0c3c,$0000
	dc.w		$0c66,$0000
d230 1
a230 3
	dc.w		$0c96,$0000
	dc.w		$0c9c,$0000
	dc.w		$0cc6,$0000
a231 21
	dc.w		$0448,$0000
	dc.w		$044f,$000f
	dc.w		$0488,$0000
	dc.w		$048f,$000f
	dc.w		$04c8,$0000
	dc.w		$04cf,$000f
	dc.w		$04f8,$00f0
	dc.w		$04ff,$00ff
	dc.w		$0848,$0000
	dc.w		$084f,$000f
	dc.w		$0888,$0000
	dc.w		$088f,$000f
	dc.w		$08c8,$0000
	dc.w		$08cf,$000f
	dc.w		$08f8,$00f0
	dc.w		$08ff,$00ff
	dc.w		$0c48,$0000
	dc.w		$0c4f,$000f
	dc.w		$0c88,$0000
	dc.w		$0c8f,$000f
	dc.w		$0cc8,$0000
d233 3
a235 1
	dc.w		$0cf8,$00f0
d237 11
a247 5
	dc.w		$0f48,$0f00
	dc.w		$0f4f,$0f0f
	dc.w		$0f88,$0f00
	dc.w		$0f8f,$0f0f
	dc.w		$0fc8,$0f00
d249 3
a251 1
	dc.w		$0ff8,$0ff0
d253 32
d317 11
d329 3
a331 1
	dc.w		$066f,$000f
d333 11
a343 5
	dc.w		$06cf,$000f
	dc.w		$06fc,$00f0
	dc.w		$06ff,$00ff
	dc.w		$06fc,$00f0
	dc.w		$06ff,$00ff
d345 3
a347 1
	dc.w		$0c6f,$000f
a348 21
	dc.w		$0ccf,$000f
	dc.w		$0cfc,$00f0
	dc.w		$0cff,$00ff
	dc.w		$0cfc,$00f0
	dc.w		$0cff,$00ff
	dc.w		$0f6c,$0f00
	dc.w		$0f6f,$0f0f
	dc.w		$0fcc,$0f00
	dc.w		$0fcf,$0f0f
	dc.w		$0ffc,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0ffc,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0f6c,$0f00
	dc.w		$0f6f,$0f0f
	dc.w		$0fcc,$0f00
	dc.w		$0fcf,$0f0f
	dc.w		$0ffc,$0ff0
	dc.w		$0fff,$0fff
	dc.w		$0ffc,$0ff0
	dc.w		$0fff,$0fff
@


38.1
log
@added initialization of spritewidth field
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 38.0 91/07/03 11:54:45 chrisg Exp Locker: chrisg $
@


38.0
log
@  added defautl palette!
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 37.5 91/06/14 11:07:14 chrisg Exp $
d96 1
@


37.5
log
@  Made initialize color offset fields to old chip defaults.
@
text
@d3 1
a3 1
*	$Id: getcolormap.asm,v 37.4 91/06/06 14:15:23 chrisg Exp Locker: chrisg $
d77 1
a77 1
	movem.l	d7/a2/a6,-(sp)		* save GfxBase, scratch reg
d79 1
d104 1
d121 2
a122 1
qwe 	move.w	(a1)+,(a0)+	* load up colortable
d127 3
a129 1
qwe2 	clr.w	(a0)+		* zero remainder of table
d131 1
a131 1
no_oflow2:  
d145 1
a145 1
	movem.l	(sp)+,d7/a2/a6
d154 227
@


37.4
log
@  Changed GetColorMap to set cm_Type to COLORMAP_TYPE_V38.
@
text
@d3 1
a3 1
*	$Id: GetColorMap.asm,v 37.3 91/05/30 08:34:09 chrisg Exp Locker: chrisg $
d88 7
a94 2
	if d0.l	* skip over if could not get
		move.l	d0,a2		* save ColorMap * here for now
d97 29
a125 29
		move.l	d7,d0
		add.l	d0,d0
		move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
		jsr	_LVOAllocMem(a6)
		move.l	d0,cm_LowColorBits(a2)
		beq.s	no_colormap

		move.l	d7,d0		* get the count again
		add.l	d0,d0		* total number of bytes needed for table
		moveq	#MEMF_PUBLIC,d1
		jsr	_LVOAllocMem(a6)
		move.b	#COLORMAP_TYPE_V38,cm_Type(a2) ; new for V1.4 
		move.l	d0,cm_ColorTable(a2)	* save pointer to ColorTable
		beq.s	no_colormap
		move.l	d0,a0		; save pointer to color data
		move.l	d7,d1		* get count again
		move.w	d1,cm_Count(a2)	* stash size of ColorTable
		lea	_dflt_clrs,a1	* pointer to default colors
		sub	#32,d7
		ble.s	no_oflow
		moveq	#32,d1
no_oflow:	subq	#1,d1		* predecrement for dbra
qwe 		move.w	(a1)+,(a0)+	* load up colortable
		dbra	d1,qwe
		move.w	d7,d1
		ble.s	no_oflow2
		subq	#1,d1		* predecrement for dbra
qwe2 		clr.w	(a0)+		* zero remainder of table
		dbra	d1,qwe2
d128 10
a137 10
*		Now allocate space for genlock control bits
*		again unused, a2 ptr to struct colormap
		move.l	a2,a0
		bsr	get_genlock_byte_count
		move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
		jsr	_LVOAllocMem(a6)
		move.l	d0,cm_TransparencyBits(a2)
		beq.s	no_colormap
		move.l	#INVALID_ID,cm_VPModeID(a2)
	endif
@


37.3
log
@ Modified to create storage for low bits of palette.
@
text
@d3 1
a3 1
*	$Id: GetColorMap.asm,v 37.2 91/04/15 11:33:29 chrisg Exp Locker: chrisg $
d103 1
a103 1
		move.b	#COLORMAP_TYPE_V1_4,cm_Type(a2) ; new for V1.4 
@


37.2
log
@ Changed to use gb_ExecBase instead of $4
,
@
text
@d3 1
a3 1
*	$Id: GetColorMap.asm,v 37.1 91/02/12 14:33:43 chrisg Exp Locker: chrisg $
d9 2
d50 1
a50 1
	include	'graphics/view.i'
d77 1
a77 1
	move.l	a6,-(sp)		* save GfxBase
d79 1
a79 1
	move.l  d0,-(sp)		* save count on stack
d82 1
d87 1
a87 1
	jsr		_LVOAllocMem(a6)
d89 11
a99 2
		move.l	d0,-(sp)	* save ColorMap * here for now
		move.l	4(sp),d0	* get the count again
d102 3
a104 4
		jsr		_LVOAllocMem(a6)
		move.l	(sp)+,a0	* get back pointer from stack
		move.b	#COLORMAP_TYPE_V1_4,cm_Type(a0) ; new for V1.4 
		move.l	d0,cm_ColorTable(a0)	* save pointer to ColorTable
d106 8
a113 10
			move.l	(sp),d1	* get count again
			move.w	d1,cm_Count(a0)	* stash size of ColorTable
			exg.l	d0,a0	* d0 is returned as pointer to structure

*					* put pointer to table in a0
			lea		_dflt_clrs,a1	* pointer to default colors
			subi.w	#32,2(sp)
			ble.s	no_oflow
			move.w	#32,d1
no_oflow:   subq.l	#1,d1		* predecrement for dbra
d115 6
a120 6
			dbra	d1,qwe
			move.w	2(sp),d1
			ble.s	no_oflow2
			subq.l	#1,d1		* predecrement for dbra
qwe2 		move.w	#0,(a0)+	* zero remainder of table
			dbra	d1,qwe2
d122 10
a131 12
*			Now allocate space for genlock control bits
*			again unused, d0 ptr to struct colormap
			move.l	d0,-(sp)	* save ptr on stack
			move.l	d0,a0
			bsr	get_genlock_byte_count
			move.l	#MEMF_PUBLIC+MEMF_CLEAR,d1
			jsr	_LVOAllocMem(a6)
			move.l	(sp)+,a0	; get struct ColorMap ptr
			move.l	d0,cm_TransparencyBits(a0)
			beq.s	no_colormap
			move.l	#INVALID_ID,cm_VPModeID(a0)
			move.l	a0,d0
d133 1
a133 3
getback:
	addq.l	#4,sp		* remove d0 from stack
	move.l	(sp)+,a6	* restore GfxBase
d135 2
a136 1
    rts
d139 2
a140 1
	move.l	4(sp),a6
d143 1
a143 1
	bra	getback
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: GetColorMap.asm,v 37.0 91/01/07 15:24:55 spence Exp Locker: chrisg $
d51 1
d76 1
a76 1
	move.l	4,a6			* get ExecBase
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: GetColorMap.asm,v 1.8 90/07/27 16:39:13 bart Exp Locker: spence $
d19 1
a19 2
*	struct ColorMap *cm;
*	LONG entries;
d43 1
a43 1
*       SetRGB4 FreeColorMap
@


1.8
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.7
log
@initialize cm->VPModeID
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/a/RCS/GetColorMap.asm,v 1.6 90/03/27 17:13:53 bart Exp Locker: bart $
@


1.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 1.5 90/03/13 15:15:53 bart Exp $
d50 2
d123 1
@


1.5
log
@load of >32 colors in colortable with NULL
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 1.4 89/04/29 15:36:52 bart Exp $
@


1.4
log
@cm->Type checking
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 1.3 88/05/03 13:24:15 dale Exp $
d96 1
d99 5
a103 3
			subq.l	#1,d1	* predecrement for dbra
qwe
				move.w	(a1)+,(a0)+	* load up colortable
d105 6
@


1.3
log
@New colormap allocation/deallocation for bigger structure.
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 1.2 88/05/01 20:39:32 dale Exp $
d79 2
a80 1
;	we used to explicitly clear the byte
d90 1
@


1.2
log
@Support of new ColorMap structure for Genlock support.
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 1.1 88/05/01 15:36:22 dale Exp $
d56 16
d104 1
a104 2
			move.w	cm_Count(a0),d0	get back count
			lsr.w	#3,d0	* we can stash 8 control bits per byte
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: GetColorMap.asm,v 33.0 86/05/17 15:06:49 bart Exp $
d52 1
a52 1
	xref	_LVOFreeMem
a56 1
*               current routine calls a C subroutine to do the work
d59 1
a59 1
    move.l  d0,-(sp)
d62 3
a64 1
	moveq	#MEMF_PUBLIC,d1
d66 2
a67 3
    tst.l	d0				* - bart - must explicitly test to set cc's 
	if <>	* skip over if could not get
		move.l	d0,-(sp)	*save here for now
d72 3
a74 7
		move.l	(sp)+,a1	* get back pointer from stack, dont disturb cc's
        tst.l	d0			* - bart - must explicitly test to set cc's 
		if =
			moveq	#cm_SIZEOF,d0
			jsr	_LVOFreeMem(a6)	* return to freestore before returning
			moveq	#0,d0		* return 0 for failure
		else
d76 4
a79 6
			move.w	d1,cm_Count(a1)	* stash size of ColorTable
			clr.b	cm_Type(a1)		* Amiga Type 0
			move.l	d0,cm_ColorTable(a1)	* save pointer to ColorTable
			exg.l	d0,a1	* d0 is returned as pointer to structure
*							* put pointer to table in a1
			lea		_dflt_clrs,a0	* pointer to default colors
d81 2
a82 2
qwe:
				move.w	(a0)+,(a1)+	* load up colortable
d84 12
a95 1
		endif
d97 1
d102 6
@
