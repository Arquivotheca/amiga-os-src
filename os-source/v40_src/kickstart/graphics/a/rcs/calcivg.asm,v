head     39.24;
branch   ;
access   ;
symbols  rel39_24:39.23 rel39_18:39.22 rel39_97:39.18 rel39_90:39.18 rel39_89:39.18 rel39_82:39.18 rel39_76:39.15 rel39_71:39.13 rel39_65:39.12 rel39_64:39.12 rel39_61:39.12 rel39_60:39.12 rel39_55:39.12 rel39_52:39.12 rel39_47:39.12 rel39_39:39.11 rel39_38:39.11 rel39_37:39.10 rel39_35:39.10 rel39_34:39.10;
locks    ; strict;
comment  @* @;


39.24
date     93.08.11.15.28.53;  author spence;  state Exp;
branches ;
next     39.23;

39.23
date     93.05.05.15.36.23;  author spence;  state Exp;
branches ;
next     39.22;

39.22
date     93.02.25.17.43.15;  author spence;  state Exp;
branches ;
next     39.21;

39.21
date     93.02.22.09.52.28;  author spence;  state Exp;
branches ;
next     39.20;

39.20
date     93.02.10.19.39.01;  author spence;  state Exp;
branches ;
next     39.19;

39.19
date     93.02.09.15.29.23;  author spence;  state Exp;
branches ;
next     39.18;

39.18
date     92.08.18.01.09.31;  author spence;  state Exp;
branches ;
next     39.17;

39.17
date     92.08.17.16.37.35;  author spence;  state Exp;
branches ;
next     39.16;

39.16
date     92.08.06.11.23.48;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     92.07.09.11.59.15;  author spence;  state Exp;
branches ;
next     39.14;

39.14
date     92.07.07.14.17.12;  author chrisg;  state Exp;
branches ;
next     39.13;

39.13
date     92.06.16.12.12.55;  author chrisg;  state Exp;
branches ;
next     39.12;

39.12
date     92.03.18.15.56.57;  author spence;  state Exp;
branches ;
next     39.11;

39.11
date     92.03.03.10.14.50;  author spence;  state Exp;
branches ;
next     39.10;

39.10
date     92.02.14.15.59.22;  author chrisg;  state Exp;
branches ;
next     39.9;

39.9
date     92.02.13.18.23.22;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     92.01.30.20.01.23;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     92.01.29.16.30.26;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     91.11.27.10.54.43;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     91.11.11.11.38.31;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     91.10.30.19.09.31;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     91.10.18.16.22.19;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     91.10.11.17.39.50;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.04.12.17.34;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.09.23.10.42.55;  author spence;  state Exp;
branches ;
next     38.2;

38.2
date     91.07.27.16.48.47;  author spence;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.14.28.08;  author spence;  state Exp;
branches ;
next     38.0;

38.0
date     91.05.29.17.01.24;  author spence;  state Exp;
branches ;
next     ;


desc
@Function to calculate inter-ViewPort gap
@


39.24
log
@cl_Flags -> cl_PrivateFlags
@
text
@*******************************************************************************
*
*	$Id: calcivg.asm,v 39.23 93/05/05 15:36:23 spence Exp Locker: spence $
*
*******************************************************************************

	SECTION	graphics

V1_3	EQU	1		; for copper.i

	include "/copper.i"
	include "/displayinfo.i"
	include "/gfxbase.i"
	include "/view.i"
	include "/displayinfo_internal.i"
	include	"/macros.i"
	include "exec/memory.i"
	include "exec/macros.i"

	xref	_LVOGfxLookUp
	xref	_LVOGetVPModeID
	xref	_LVOGetDisplayInfoData
	xref	_LVOAllocMem
	xref	_LVOFreeMem
	xref	_new_mode
	xref	_CleanMode
	xref	_GfxBase
	xdef	_CalcIVG
	xdef	_CalcFMode

COMPATIBILITY_KLUDGE	EQU	1

*DODEBUG	EQU	1
*GBDEBUG	EQU	1

	IFD	DODEBUG
D	MACRO
	IFD	GBDEBUG
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
	ENDC
	print	\1
dbg\@@
	ENDM	; D	MACRO
DR	MACRO
	IFD	GBDEBUG
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
	ENDC
	dbug	\1
dbg\@@
	ENDM	; DR	MACRO
DRW	MACRO
	IFD	GBDEBUG
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
	ENDC
	dbugw	\1
dbg\@@
	ENDM	; DRW	MACRO

	ELSE

D	MACRO
	ENDM
DR	MACRO
	ENDM
DRW	MACRO
	ENDM

	ENDC	; IFD	DODEBUG

*****i* graphics.library/CalcFMode ********************************************
*
*   NAME
*	CalcFMode -- Calculate the max FMode value to use in this ViewPort (V39)
*
*   SYNOPSIS
*	fmode = CalcFMode(ViewPort)
*	 d0.w              a0
*
*	WORD CalcFMode(struct ViewPort *);
*
*   FUNCTION
*	To calculate the maximum FMode (or Bandwidth) that this ViewPort can
*	use, considering the machine's memory type, the ViewPort mode, the
*	number of bitplanes used, and the starting addresses of all the
*	bitplanes.
*
*   INPUTS
*	ViewPort - pointer to this ViewPort
*
*   RESULT
*	fmode - fmode value that this ViewPort should use to maximise
*	        Bandwidth usage, or -1 if the requested mode is not possible
*	        with the machine's memory type or could not find the BitMap.
*
*******************************************************************************

; WORD __asm CalcFMode(register __a0 struct ViewPort *vp);

PHIRES_2x	equ	4
PSHIRES_2x	equ	2
PSHIRES_4x	equ	4

CalcFMErr:
	moveq	#-1,d0
	bra	CalcFM.
 
_CalcFMode:
	movem.l	a2-a3/d2-d6,-(sp)
	move.l	a0,d0
	beq.s	CalcFMErr
	move.l	a0,-(sp)
	jsr	_new_mode
	move.l	d0,d2
	move.l	(sp)+,a0
	move.l	vp_RasInfo(a0),d0
	beq.s	CalcFMErr
	move.l	d0,a1
	move.l	ri_BitMap(a1),d0
	beq.s	CalcFMErr
	move.l	d0,a2
	moveq	#0,d5
	btst	#10,d2	; dualpf?
	beq.s	cfm_nodpf
	move.l	ri_Next(a1),d5
	beq.s	cfm_nodpf
	move.l	d5,a3
	move.l	ri_BitMap(a3),d5
	beq.s	cfm_nodpf
	move.l	d5,a3
	moveq	#0,d5
	move.b	bm_Depth(a3),d5

* a0 -> ViewPort
* a1 -> RasInfo
* a2 -> BitMap
* a3 -> second BitMap
* d2.l = ViewPort mode
* d5.b = flag for dualpf (if not 0, then = Depth of second playfield)

* Find the minimum bandwidth needed for this mode.
* Use d3 for the shift value, d4 for BitMap depth.

cfm_nodpf:
	move.b	bm_Depth(a2),d4
* If DualPlayfield, sum the depths.
	add.b	d5,d4
cfm_sglpfd:
	moveq	#0,d3
	move.l	d2,d0
	and.l	#V_HIRES,d0
	beq.s	cfm_nothires
	cmp.b	#PHIRES_2x,d4
	bls.s	cfm_haveshift
	addq.w	#1,d3
	bra.s	cfm_haveshift

cfm_nothires:
	move.w	d2,d0
	and.w	#V_SUPERHIRES,d0
	beq.s	cfm_haveshift		; must be LORES
	cmp.b	#PSHIRES_2x,d4
	bls.s	cfm_haveshift
	addq.w	#1,d3
	cmp.b	#PSHIRES_4x,d4
	bls.s	cfm_haveshift
	addq.w	#1,d3

cfm_haveshift:
* Can the machine handle the bandwidth needed?
* If shift = 0, then only need 1x, so all's OK
* If shift = 1, then need 2x, so GB->MemType must = at least 1
* If shift = 2, then need 4x, so GB->MemType must = 3

	move.b	gb_MemType(a6),d2
	tst.b	d3
	beq.s	cfm_havebw
	cmp.w	#2,d3
	beq.s	cfm_need4x
	tst.b	d2
	beq	CalcFMErr		; Too bad. Have 1x, needed 2x
	bra.s	cfm_havebw
cfm_need4x:
	cmp.w	#BANDWIDTH_4X,d2
	blt	CalcFMErr

cfm_havebw:
	addq.w	#1,d3
	moveq	#-1,d0
	asl.w	d3,d0			; d0 has a mask for checking bitplane
	not.w	d0			; pointer values.

* Now, OR all the bitplane pointers together, and mask them for boundary checking.
* Also, check that the bytes-per-row fields are also aligned correctly.
* reuse d4 and a1

cfm_checkplanes:
	move.w	bm_BytesPerRow(a2),d6
	moveq	#0,d1
	lea	bm_Planes(a2),a1
	moveq	#0,d4
	move.b	bm_Depth(a2),d4
	D	"cfm_checkplanes bpr, depth "
	DRW	d6
	DRW	d4
	D	"Planes are: "
	bra.s	cfm_ckpl1.
cfm_ckpl1:
	DR	(a1)
	or.l	(a1)+,d1
	DR	d1
cfm_ckpl1.:
	dbra	d4,cfm_ckpl1
	tst.b	d5
	beq.s	cfm_noordpf

	or.w	bm_BytesPerRow(a3),d6
	D	"2nd playfield, bpr, depth "
	DRW	d6
	DRW	d5
	lea	bm_Planes(a3),a1
	bra.s	cfm_ckpl2.
cfm_ckpl2:
	DR	(a1)
	or.l	(a1)+,d1
	DR	d1
cfm_ckpl2.:
	dbra	d5,cfm_ckpl2

cfm_noordpf:
	D	"done. bplptrs, bprs "
	DR	d1
	DRW	d6
	D	"Mask "
	DRW	d0
	or.w	d6,d1			; check the bytes-per-row at the same time
	move.w	d1,d4
	and.w	d0,d1
	bne	CalcFMErr		; Too Bad. The bitplanes are misaligned.

* Now, we know the machine can provide the minimum bandwidth needed, but can we
* get any better?

cfm_getbest:
	cmp.w	#3,d3
	beq.s	CalcedFM		; max reached.
	asl.w	#1,d0
	or.w	#1,d0
	move.w	d4,d1
	and.w	d0,d1
	bne.s	CalcedFM		; can't do any better
	addq.w	#1,d3
	bra.s	cfm_getbest

CalcedFM:
* d3 has the solution.
* If d3 = 1, return 0 (1x)
* If d3 = 2, return 0, 1 or 2 depending on Chip type
* If d3 = 3, return 0 - 3 depending on Chip type

	subq.w	#1,d3
	beq.s	CalcedFM.
	move.b	gb_MemType(a6),d0
	cmp.w	#2,d3
	bne.s	1$
2$:
	move.b	d0,d3
	bra.s	CalcedFM.
1$:
	cmp.b	#BANDWIDTH_4X,d0
	bne.s	2$
	moveq	#BANDWIDTH_2XNML,d3

CalcedFM.:
	and.l	#$ff,d3
	move.l	d3,d0

CalcFM.:
	D	"fmode = "
	DR	d0
	movem.l	(sp)+,a2-a3/d2-d6
	rts

******* graphics.library/CalcIVG **********************************************
*
*   NAME
*	CalcIVG -- Calculate the number of blank lines above a ViewPort (V39)
*
*   SYNOPSIS
*	count = CalcIVG(View, ViewPort)
*	 d0.w           a0    a1
*
*	UWORD CalcIVG(struct View *, struct ViewPort *);
*
*   FUNCTION
*	To calculate the maximum number of blank lines above a viewport needed to
*	load all the copper instructions, after accounting for the viewport
*	bandwidth and size.
*
*   INPUTS
*	View       - pointer to the View
*	ViewPort   - pointer to the ViewPort you are interested in.
*
*   RESULT
*	count      - the number of ViewPort resolution scan lines needed to
*	             execute all the copper instructions for ViewPort,
*	             or 0 if any error. 
*
*   NOTES
*	The number of copper instructions comes from the vp->vp_DspIns list.
*	Although there may be other copper instructions in the final list (from
*	UCopIns, SprIns and ClrIns) they are currently ignored for this
*	function. This also means that if the ViewPort has never been made
*	(for example, the ViewPort of an intuition screen was opened behind)
*	then vp->vp_DspIns is NULL.
*
*	Although CalcIVG() returns the true number of lines needed by the
*	copper, intuition still maintains an inter-screen gap of 3 non-laced
*	lines (6 interlaced). Therefore, for intuition screens use:
*	MAX(CalcIVG(v, vp), (islaced ? 6 : 3))
*
*
*   SEE ALSO
*	GfxNew()  VideoControl()  graphics/view.h
*
*******************************************************************************
*
* How to calculate the Inter-ViewPort Gap:
*
* The copper can only use the DMA bus every other ColourClock.
* MOVE and SKIP instructions need 2 fetches, ie 4 colourclocks.
* WAIT needs 2 fetches (4 colourclocks) and another 2 colourclocks to wake up.
*
* Therefore, the total number of ColourClocks needed is:
*
* ( (Total number of copper instructions * 4) + 
*   (Total number of WAIT instructions * 2) )
*
* The number of copper instructions that can be executed per scanline depend on
* 1) The total number of ColourClocks on the line
* 2) The width of the display window if the display window is open.
* 3) The number of bitplanes turned on in the IVG.
* 4) The bandwidth (FMode) we are using.
* 5) The display mode (LORES, HIRES, SUPERHIRES)
*
* The total number of colourclocks per line is in MonitorInfo->TotalColorClocks
*
* (FOR OLD IMPLEMENTATION, NOW REMOVED BUT UNDER RCS:
* If the display window is left open, use the look-up tables to read the number
* of copper cycles for the relevant BitPlaneUsage and Bandwidth. Calculate the
* number of copper cycles available before the window opens
* from (View->DxOffset + ViewPort->DxOffset), and the number available after the
* window closes (View->DxOffset + ViewPort->DxOffset + ViewPort->DWidth).
* Subtract that total from the TotalColorClocks.)
*
* Therefore, the total number of lines needed = 
*
* 	 Total number of ColourClocks needed
* 	-------------------------------------
* 	Total number of ColourClocks per line
*
* (The total number of CopperInstructions per line is the total number of
* ColourClocks per line, divided by 2).
*
*******************************************************************************

; UWORD __asm CalcIVG(register __a0 struct View *v, register __a1 struct ViewPort *vp);

_CalcIVG:
	movem.l	a2-a4/d2/d4-d7,-(sp)

* d6.w	= fmode		(default = 1x bandwidth)
* d4.w	= TotalColorClocks per blank line
* d3.w	= TotalColorClocks per line with bpu
* d2.l	= vpmodeid
* d7.(31-16)	= PixelSpeed
* a2	-> View
* a3	-> ViewPort
* a4	-> MonitorInfo

	moveq	#0,d7
	move.w	d7,d6
	move.w	d7,d4
	move.l	a0,a2		; safe keeping
	move.l	a1,a3

	sub.l	#mtr_SIZEOF,sp
	move.l	sp,a4

* Now look for a ViewPortExtra
	move.l	a3,a0
	jsr	_LVOGetVPModeID(a6)
	cmp.l	#INVALID_ID,d0
	bne.s	toad
	move.l	a3,-(sp)
	jsr	_new_mode
	move.l	d0,(sp)
	jsr	_CleanMode
	addq.l	#4,sp
toad:
	move.l	d0,d2
	move.l	vp_ColorMap(a3),d0
	beq.s	not_in_diw
	move.l	d0,a0
	tst.b	cm_Type(a0)
	beq.s	not_in_diw
	move.l	cm_CoerceDisplayInfo(a0),d0
	bne.s	calc_coerced
	move.l	cm_NormalDisplayInfo(a0),d0
	beq.s	calc_nocoerce
calc_coerced:
	move.l	d0,a1		; DisplayInfoRecord
	move.w	rec_MajorKey(a1),d2
	swap	d2
	move.w	rec_MinorKey(a1),d2	; the coerced ModeID
calc_nocoerce:
	D	"ModeID = "
	DR	d2
	move.l	cm_vpe(a0),d0
	beq.s	not_in_diw
	move.l	d0,a1	

	move.l	a1,-(sp)
	move.l	a3,a0
	bsr	_CalcFMode
	move.l	(sp)+,a1
	D	"FMode = "
	DRW	d0
	tst.w	d0
	bmi.s	CalcIVGErr
	move.w	d0,d6
not_in_diw:
	bsr.s	calc_cc_perblankline

have_cc_per_line:

* OK - now how many copper instructions do we have for this ViewPort?
* Only look at DspIns. SprIns, ClrIns and UCopIns, may have copper 
* instructions before the ViewPort opens, but these are dynamic copper
* instructions. 

	moveq	#0,d0
	move.l	vp_DspIns(a3),d7
	beq.s	_CalcIVG.1
2$:
	move.l	d7,a0
	add.w	cl_Count(a0),d0
	move.l	cl_Next(a0),d7
	bne.s	2$
	sub.w	cl_SLRepeat(a0),d0	; subtract the number of instructions
					; repeated for Short and Long Frames.
* total CopInstructions is in d0.w
	D	"CopInstructions = "
	DR	d0
3$:
	asl.l	#1,d0		; total number of CopperCycles needed (without extras for WAIT)
	divu	d4,d0
	D	"After Division d0.l = "
	DR	d0
bollox:
* if there is a remainder, round the result up to the next whole value
	cmp.l	#$ffff,d0
	ble.s	no_rounding
	addq.w	#1,d0
	bra.s	chk_kludge
no_rounding:
	or.w	#EXACT_LINE,cl_PrivateFlags(a0)	; show an exact whole line
						; (cl_PrivateFlags is only cleared in copinit())
chk_kludge:
	IFNE	COMPATIBILITY_KLUDGE
	; Under V37, there was always at least 2 lines in the IVG for ECS.
	btst.b	#GFXB_AA_ALICE,gb_ChipRevBits0(a6)
	bne.s	chk_lace
	cmp.w	#2,d0
	bge.s	chk_lace
	moveq	#2,d0
	ENDC

chk_lace:
* double the result if the mode is laced.
	btst.b	#0,dis_PropertyFlags+3(a4)	; DIPF_IS_LACE
	beq.s	wanker
	D	"laced "
	asl.w	#1,d0
	bra.s	_CalcIVG.

* Halve the result if scan doubled

wanker:
	btst.b	#1,dis_PropertyFlags+1(a4)	; DIPF_IS_SCANDBL
	beq.s	_CalcIVG.
	D	"Scan Doubled "
	move.w	d0,d1
	and.w	#1,d1
	add.w	d1,d1
	or.w	d1,cl_PrivateFlags(a0)		; HALF_LINE
	addq.w	#1,d0
	asr.w	#1,d0

_CalcIVG.:
	move.l	d0,d7
_CalcIVG.1:
	add.l	#mtr_SIZEOF,sp
	moveq	#0,d0
	move.w	d7,d0

_CalcIVGrts:
	D	"CalcIVG returns "
	DRW	d0
	movem.l	(sp)+,a2-a4/d2/d4-d7
	rts

CalcIVGErr:
	moveq	#0,d7
	bra.s	_CalcIVG.1

calc_cc_perblankline:
	move.l	a4,a1		; buffer
	sub.l	a0,a0		; handle
	moveq	#mtr_SIZEOF,d0	; for a MonitorInfo
	move.l	#DTAG_MNTR,d1	; tagID
	jsr	_LVOGetDisplayInfoData(a6)	; (d2 has modeid)
	move.w	mtr_TotalColorClocks(a4),d4
*	addq.w	#1,d4
	asr.w	#1,d4		; The number of CopperCycles available is half the ColorClocks
	D	"Copper Cycles = "
	DRW	d4
	move.l	a4,a1		; buffer
	sub.l	a0,a0		; handle
	moveq	#dis_PixelSpeed+2,d0
	move.l	#DTAG_DISP,d1	; tagID
	jsr	_LVOGetDisplayInfoData(a6)	; (d2 has modeid)
	
cc_pbl.:
	rts

	end
@


39.23
log
@Set HALF_LINE in cl_Flags if we need an odd number of lines in the IVG
of a ScanDoubled screen. This is used by MrgCop().
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.22 93/02/25 17:43:15 spence Exp Locker: spence $
d469 2
a470 2
	or.w	#EXACT_LINE,cl_Flags(a0)	; show an exact whole line
						; (cl_Flags is only cleared in copinit())
d498 1
a498 1
	or.w	d1,cl_Flags(a0)			; HALF_LINE
@


39.22
log
@Added an ECS compatibility kludge that always returns a MIN of 2.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.21 93/02/22 09:52:28 spence Exp Locker: spence $
d495 4
@


39.21
log
@Check for an exact whole line of copper instrucitons, and if true, set
EXACT_LINE in cl_Flags.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.20 93/02/10 19:39:01 spence Exp Locker: spence $
d31 2
d467 1
a467 1
	bra.s	chk_lace
d471 9
@


39.20
log
@CalcFMode() was looking at the wrong register for checking BytesPerRow
alignment.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.19 93/02/09 15:29:23 spence Exp Locker: spence $
d9 3
d450 2
d465 1
d467 2
d470 1
d495 2
d511 1
@


39.19
log
@Autodoc changes to CalcIVG() to explain intuition's inter-screen gap.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.18 92/08/18 01:09:31 spence Exp Locker: spence $
d233 1
a234 1
	or.w	d6,d4			; check the bytes-per-row at the same time
@


39.18
log
@Hmmm . That MIN 3 lines didn't work!
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.17 92/08/17 16:37:35 spence Exp Locker: spence $
d310 9
a318 1
*	function.
@


39.17
log
@CalcIVG() always returns at least 3 so that value used in MakeVPort()
is always consistent with the value used by intuition.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.16 92/08/06 11:23:48 spence Exp Locker: spence $
d433 1
a433 1
	beq.s	bollox
d448 5
a452 8
* For compatibility, make sure the result is at least 3 lines. Intuition will
* use at least 3 anyway, and we need to ensure that the value used in intuition
* and MakeVPort() are the same.

	cmp.w	#3,d0
	bge	3$
	moveq	#3,d0
3$:
d456 1
a456 1
	beq.s	roundup
a459 8

* if there is a remainder, round the result up to the next whole value
* (except if laced, to reduce rounding errors in MrgCop()).
roundup:
	cmp.l	#$ffff,d0
	ble.s	no_rounding
	addq.w	#1,d0
no_rounding:
@


39.16
log
@check remainder of division before rounding up to the next whole line
count in CalcIVG()
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.15 92/07/09 11:59:15 spence Exp Locker: spence $
d448 8
a455 5
* if there is a remainder, round the result up to the next whole value.
	cmp.l	#$ffff,d0
	ble.s	no_rounding
	addq.w	#1,d0
no_rounding:
a457 1

d459 1
a459 1
	beq.s	wanker
d463 8
@


39.15
log
@CalcIVG() halves the result for scandoubled modes.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.14 92/07/07 14:17:12 chrisg Exp Locker: spence $
d28 2
a29 2
;DODEBUG	EQU	1
;GBDEBUG	EQU	1
d31 2
a33 1
GBDBG	MACRO
d35 1
a35 8
	beq,s	dbg\@@
	ENDM

	ELSE

GBDBG	MACRO
	ENDM

a36 4

	IFD	DODEBUG
D	MACRO
	GBDBG
d39 1
a39 1
	ENDM
d41 4
a44 1
	GBDBG
d47 1
a47 1
	ENDM
d49 4
a52 1
	GBDBG
d55 1
a55 1
	ENDM
d66 1
a66 1
	ENDC
a67 1
	
d406 2
d416 2
d433 1
a433 1
	beq.s	1$
d440 2
a441 1

d443 1
a443 1
	asl.w	#1,d0		; total number of CopperCycles needed (without extras for WAIT)
d445 6
a450 1
1$:
d452 1
d457 2
a458 1
	beq.s	4$
d464 1
a464 1
4$:
d467 1
d494 2
a495 1

@


39.14
log
@doesn't check ri_Next if not DUALPF. gave dpaint an enforcer hit when animating.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.13 92/06/16 12:12:55 chrisg Exp Locker: chrisg $
d435 1
a435 1
2$
d450 9
a458 1
	btst.b	#0,dis_PropertyFlags+3(a4)	; are we laced?
d460 2
a461 1
	asl.w	#1,d0
@


39.13
log
@short branches
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.12 92/03/18 15:56:57 spence Exp $
d124 3
@


39.12
log
@Walks through the vp->DspIns links to count all the copper instructions.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.11 92/03/03 10:14:50 spence Exp Locker: spence $
d214 1
a214 1
	beq	cfm_noordpf
d394 1
a394 1
	beq	not_in_diw
d397 1
a397 1
	beq	not_in_diw
d409 1
a409 1
	beq	not_in_diw
d417 1
a417 1
	bmi	CalcIVGErr
d420 1
a420 1
	bsr	calc_cc_perblankline
@


39.11
log
@Autodoc changes
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.10 92/02/14 15:59:22 chrisg Exp Locker: spence $
d29 1
d31 13
d46 1
a46 2
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
d51 1
a51 2
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
d56 1
a56 2
	tst.b	gb_Debug(a6)
	beq.s	dbg\@@
d278 2
d429 2
a430 1
	move.l	vp_DspIns(a3),d0
d432 5
a436 4
	move.l	d0,a0
	moveq	#0,d0
	move.w	cl_Count(a0),d0

@


39.10
log
@removed debug
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.9 92/02/13 18:23:22 spence Exp Locker: chrisg $
d65 1
a65 1
*	CalcFMode -- Calculate the max FMode value to use in this ViewPort (V38)
d273 1
a273 1
*	CalcIVG -- Calculate the number of blank lines above a ViewPort (V38)
d296 4
d326 1
d332 1
a332 1
* Subtract that total from the TotalColorClocks.
a398 4
* Do we need to calculate the FMode?

*	btst.b	#VPXB_HAVE_FMODE,vpe_Flags+1(a1)
*	bne.s	1$		; nope
a404 3
*	move.w	d0,vpe_FMode(a1)
*	bset.b	#VPXB_HAVE_FMODE,vpe_Flags+1(a1)
1$:
a405 1
*	move.w	vpe_FMode(a1),d6
@


39.9
log
@CalcFMode() Was assuming a depth of at least 1 in the bitmaps.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.8 92/01/30 20:01:23 spence Exp Locker: spence $
d28 1
a28 1
DODEBUG	EQU	1
@


39.8
log
@CalcIVG() no longer stores the fmode in ViewPortExtra->Fmode.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.7 92/01/29 16:30:26 spence Exp Locker: spence $
d13 1
d28 1
a28 1
* DEBUG	equ	1
d30 1
a30 2
	IFD	DEBUG
	xref	_kprintf
d32 17
a49 15
PUSHCOUNT	SET	4
	movem.l	d0/d1/a0/a1,-(a7)
	IFNC	'\2',''
	move.l	\2,-(sp)
PUSHCOUNT	SET	PUSHCOUNT+4	
	ENDC
	pea	a\@@(pc)
	jsr	_kprintf
	lea	PUSHCOUNT(sp),sp
	bra.s	b\@@
a\@@: dc.b	\1,10,13,0
	cnop	0,2
b\@@:
	movem.l	(a7)+,d0/d1/a0/a1
	ENDM
d51 1
d54 5
d191 5
a195 1
	subq.w	#1,d4
d197 1
d199 2
a204 1

d206 3
d210 1
a210 1
	subq.b	#1,d5
d212 1
d214 2
d219 5
@


39.7
log
@CalcFMode() checks RasInfo->BitMap for non-NULL.
CalcIVG() always calls CalcFMode().
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.6 91/11/27 10:54:43 spence Exp Locker: spence $
d379 1
a379 1
	move.w	d0,vpe_FMode(a1)
@


39.6
log
@Only counts DspIns Copper instructions (others are not usually
before the displaywindow opens).
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.5 91/11/11 11:38:31 spence Exp Locker: spence $
d108 3
a110 1
	move.l	ri_BitMap(a3),a3
d371 2
a372 2
	btst.b	#VPXB_HAVE_FMODE,vpe_Flags+1(a1)
	bne.s	1$		; nope
d380 1
a380 1
	bset.b	#VPXB_HAVE_FMODE,vpe_Flags+1(a1)
d382 2
a383 1
	move.w	vpe_FMode(a1),d6
@


39.5
log
@No longer supports calculating IVG when bpu is not 0, so removed
all that code and LUTs.
Altered autodocs accordingly.
Uses stack for workspace instead of AllocMem().
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.4 91/10/30 19:09:31 spence Exp Locker: spence $
d385 1
d387 7
d395 1
a395 11
	moveq	#3-1,d1		; Dsp, Spr and Clr
	lea	vp_DspIns(a3),a3
1$:
	move.l	(a3)+,a0
	bsr	count_copins
	dbra	d1,1$
	move.l	(a3),d1		; UCopIns
	beq.s	3$
	move.l	d1,a0
	move.l	ucl_FirstCopList(a0),a0
	bsr	count_copins
d402 1
a441 9
	rts

count_copins:
	cmp.l	#0,a0
	beq.s	count_copins.
	add.w	cl_Count(a0),d0
	move.l	cl_Next(a0),a0
	bra.s	count_copins
count_copins.
@


39.4
log
@better handling of ViewPorts with INVALID_IDs
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.3 91/10/18 16:22:19 spence Exp Locker: spence $
d257 1
a257 3
*	bandwidth, dimension, position, number of BitPlanes required in the
*	gap area. This may not be the actual number used, as some copper
*	instructions could be loaded before the highest viewport.
a268 15
*	For best results, attach a ViewPortExtra structure to ViewPort,
*	and initialise the ViewPortExtra->bpu, ViewPortExtra->FMode and
*	ViewPortExtra->Blank fields if you want anything other than 0,
*	Max-Bandwidth and -1 respectively (a -1 in vpe->Blank means all the
*	lines in the gap are to be blank).
*
*	If you are sure of setting the FMode correctly, then you must set
*	the FPXF_HAVE_FMODE flags in the ViewPortExtra->Flags field, else
*	the system will calculate it for you. It is recommended that
*	you leave the calculation to the system.
*
*	This function can also be used to calculate the number of scan lines
*	needed to execute a batch of copper instructions in the middle of a
*	display window by setting VPXF_IN_DIWINDOW in ViewPortExtra->Flags.
*	Setting this bit means vpe->Blank is ignored.
a317 1
* d7.w	= bpu		(default = 0)
a318 1
* d5.w	= blanks	(default = -1 = all lines are bpu of 0)
a329 1
	moveq	#-1,d5		; defaults
d333 2
a334 9
	moveq	#mtr_SIZEOF,d0	; for a MonitorInfo
	move.l	#MEMF_CLEAR,d1
	move.l	a6,-(sp)
	move.l	4,a6
	jsr	_LVOAllocMem(a6)
	move.l	(sp)+,a6
	tst.l	d0
	beq	_CalcIVGrts	; error!
	move.l	d0,a4
a347 2
*	move.l	a3,a0
*	jsr	_LVOGfxLookUp(a6)
d370 1
a370 1
	bne.s	1$		; yep
d381 1
a381 5
*	move.w	vpe_bpu(a1),d7
*	move.w	vpe_Blank(a1),d5
	move.w	#0,d7
	move.w	#-1,d5
	move.l	a1,-(sp)
a382 7
	move.l	(sp)+,a1
	btst.b	#VPXB_IN_DIWINDOW,vpe_Flags+1(a1)
	beq.s	have_cc_per_line

calc_in_diw:
	moveq	#0,d5
	bsr	calc_cc_perbpuline
a402 15
	move.w	d5,d1
	cmp.w	#-1,d5
	beq.s	2$
	mulu	d4,d5
	sub.w	d5,d0
	bgt.s	4$
	move.w	d1,d0
	bra.s	_CalcIVG.
4$:
	tst.w	d3
	beq.s	nodiv0
	divu	d3,d0
	addq.w	#1,d0		; for luck

2$:
d415 1
a415 8
	move.l	a4,d0
	beq.s	_CalcIVGrts
	move.l	a4,a1
	moveq	#mtr_SIZEOF,d0
	move.l	a6,-(sp)
	move.l	4,a6
	jsr	_LVOFreeMem(a6)
	move.l	(sp)+,a6
a426 8
not_in_diw:
	bsr.s	calc_cc_perblankline
	bra	have_cc_per_line

nodiv0:
	moveq	#-1,d0
	bra.s	_CalcIVG.

a440 3
	swap	d7
	move.w	dis_PixelSpeed(a4),d7
	swap	d7
a444 44
calc_cc_perbpuline:
* d4.w	has number of CopperCycles per blank line
	move.w	v_DxOffset(a2),d0
	add.w	vp_DxOffset(a3),d0	; starting position in LORES pixels
	lea	BandWidthTable,a0
	move.l	0(a0,d6.w),a0

	swap	d7		; get the PixelSpeed
	swap	d6		; spare
	swap	d5		; spare
	move.w	d0,d3
	lsr.w	#2,d3		; 4 CCs per 8 LORES pixels when bpu = 0
				; = CCs before display window opens
	move.w	#0,d6
	cmp.w	#140,d7
	beq.s	1$
	addq.w	#1,d6		; LORES to HIRES
	cmp.w	#70,d7
	beq.s	1$
	addq.w	#1,d6		; HIRES to SHIRES
1$:
	swap	d7
	move.w	d0,d5
	asl.w	d6,d5
	add.w	vp_DWidth(a3),d5
	asr.w	d6,d5
	asr.w	#2,d5
	sub.w	d4,d5		; (d5 will be -ve)
	sub.w	d5,d3		; Total CCs outside of DisplayWindow

	move.w	vp_DWidth(a3),d5
	asr.w	d6,d5		; to LORES pixels
	asl.w	#2,d6	
	move.l	0(a0,d6.w),a0
	lsr.w	#4,d5		; * 2 for ColorClocks, /32 for LUT = /16
	move.w	#0,d6
	move.b	0(a0,d7.w),d6
	mulu	d6,d5
	add.w	d5,d3
	swap	d5
	swap	d6

	rts

d454 1
a454 91
* The Look-Up tables:

LORES_1x:
LORES1x8	dc.b	4,4,4,4,4,3,2,1,0	; CCs for 1st 8 ColourClocks
LORES1x16	dc.b	8,8,8,8,8,6,4,2,0	; CCs for 1st 16 ColourClocks
LORES1x32	dc.b	16,16,16,16,16,12,8,4,0	; CCs for 1st 32 ColourClocks

LORES_2x:
LORES2x8	dc.b	4,4,4,4,4,3,2,1,0	; CCs for 1st 8 ColourClocks
LORES2x16	dc.b	8,8,8,8,8,7,6,5,4	; CCs for 1st 16 ColourClocks
LORES2x32	dc.b	16,16,16,16,16,14,12,10,8
						; CCs for 1st 32 ColourClocks

LORES_4x:
LORES4x8	dc.b	4,4,4,4,4,3,2,1,0	; CCs for 1st 8 ColourClocks
LORES4x16	dc.b	8,8,8,8,8,7,6,5,4	; CCs for 1st 16 ColourClocks
LORES4x32	dc.b	16,16,16,16,16,14,12,13,12
						; CCs for 1st 32 ColourClocks

HIRES_1x:
HIRES1x8	dc.b	4,4,4,3,2,0,0,0,0	; CCs for 1st 8 ColourClocks
HIRES1x16	dc.b	8,8,8,6,4,0,0,0,0	; CCs for 1st 16 ColourClocks
HIRES1x32	dc.b	16,16,16,12,8,0,0,0,0	; CCs for 1st 32 ColourClocks

HIRES_2x:
HIRES2x8	dc.b	4,4,4,3,2,2,2,1,0	; CCs for 1st 8 ColourClocks
HIRES2x16	dc.b	8,8,8,7,6,6,6,5,4	; CCs for 1st 16 ColourClocks
HIRES2x32	dc.b	16,16,16,14,12,12,12,10,8
						; CCs for 1st 32 ColourClocks

HIRES_4x:
HIRES4x8	dc.b	4,4,4,3,2,2,2,1,0	; CCs for 1st 8 ColourClocks
HIRES4x16	dc.b	8,8,8,7,6,6,6,5,4	; CCs for 1st 16 ColourClocks
HIRES4x32	dc.b	16,16,16,15,14,14,14,13,12
						; CCs for 1st 32 ColourClocks

SHIRES_1x:
SHIRES1x8	dc.b	4,4,0,0,0,0,0,0,0	; CCs for 1st 8 ColourClocks
SHIRES1x16	dc.b	8,8,0,0,0,0,0,0,0	; CCs for 1st 16 ColourClocks
SHIRES1x32	dc.b	16,16,0,0,0,0,0,0,0	; CCs for 1st 32 ColourClocks

SHIRES_2x:
SHIRES2x8	dc.b	4,4,2,2,0,0,0,0,0	; CCs for 1st 8 ColourClocks
SHIRES2x16	dc.b	8,8,4,4,0,0,0,0,0	; CCs for 1st 16 ColourClocks
SHIRES2x32	dc.b	16,16,8,8,0,0,0,0,0	; CCs for 1st 32 ColourClocks

SHIRES_4x:
SHIRES4x8	dc.b	4,4,3,3,2,2,1,1,0	; CCs for 1st 8 ColourClocks
SHIRES4x16	dc.b	8,8,7,7,6,6,5,5,4	; CCs for 1st 16 ColourClocks
SHIRES4x32	dc.b	16,16,15,15,14,14,13,13,12
						; CCs for 1st 32 ColourClocks
	CNOP	0,2

LUT1x:
	dc.l	LORES1x32
	dc.l	HIRES1x32
	dc.l	SHIRES1x32
	dc.l	LORES1x16
	dc.l	HIRES1x16
	dc.l	SHIRES1x16
	dc.l	LORES1x8
	dc.l	HIRES1x8
	dc.l	SHIRES1x8

LUT2x:
	dc.l	LORES2x32
	dc.l	HIRES2x32
	dc.l	SHIRES2x32
	dc.l	LORES2x16
	dc.l	HIRES2x16
	dc.l	SHIRES2x16
	dc.l	LORES2x8
	dc.l	HIRES2x8
	dc.l	SHIRES2x8

LUT4x:
	dc.l	LORES4x32
	dc.l	HIRES4x32
	dc.l	SHIRES4x32
	dc.l	LORES4x16
	dc.l	HIRES4x16
	dc.l	SHIRES4x16
	dc.l	LORES4x8
	dc.l	HIRES4x8
	dc.l	SHIRES4x8
	
BandWidthTable:
	dc.l	LUT1x
	dc.l	LUT2x
	dc.l	LUT2x
	dc.l	LUT4x
@


39.3
log
@no longer looks at vpe_bpu. Hardcoded a default value until I remove
the redundant code.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.2 91/10/11 17:39:50 spence Exp Locker: spence $
d22 1
d366 8
@


39.2
log
@Dualplayfield count was wrong (was not clearing bits 8-15 in d5 for
dbra).
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.1 91/10/04 12:17:34 chrisg Exp Locker: spence $
d401 4
a404 2
	move.w	vpe_bpu(a1),d7
	move.w	vpe_Blank(a1),d5
@


39.1
log
@ added prototype.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 39.0 91/09/23 10:42:55 spence Exp Locker: chrisg $
d14 1
d26 27
a85 1

d105 1
a105 1
	beq.s	1$
d108 1
d121 1
a121 1
1$:
d158 1
a158 1
	beq.s	CalcFMErr		; Too bad. Have 1x, needed 2x
d181 1
a181 1
1$:
d183 1
a183 1
	dbra	d4,1$
d185 3
a187 1
	beq.s	cfm_noordpf
d191 1
a191 1
2$:
d193 1
a193 1
	dbra	d5,2$
@


39.0
log
@uses coerced displayID if available.
Now returns in VP resolution scan lines (ie laced or non-laced).
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 38.2 91/07/27 16:48:47 spence Exp Locker: spence $
d52 2
d298 2
@


38.2
log
@CalcFMode() also checks bm->BytesPerRow for alignment.
CalcIVG() clears the upperword in d0 for returning.
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 38.1 91/06/24 14:28:08 spence Exp Locker: spence $
d9 1
d12 1
a12 1
	include "/displayinfo.i"
d233 1
a233 1
*	count      - the number of non-interlaced scan lines needed to
d235 1
a235 1
*	             or 0 if any error.
d339 10
d370 1
a370 1
	bsr.s	calc_cc_perblankline
d416 6
d423 1
a423 1
	move.l	d0,d2
d434 1
a434 1
	move.w	d2,d0
d441 1
a441 1
	moveq	#0,d2
d446 1
a446 1
	bra.s	have_cc_per_line
@


38.1
log
@CalcFMode()
@
text
@d3 1
a3 1
*	$Id: calcivg.asm,v 38.0 91/05/29 17:01:24 spence Exp Locker: spence $
d61 1
a61 1
	movem.l	a2-a3/d2-d5,-(sp)
d85 1
a85 1
* d5.b = flag for duaplf (if not 0, then = Depth of second playfield)
d96 2
a97 2
	move.w	d2,d0
	and.w	#V_HIRES,d0
d130 1
a130 1
	cmp.w	#BANDWIDTH_4X,d0
d140 1
d143 2
d155 1
d164 1
d184 2
a185 2
* If d3 = 0, return 0 (1x)
* If d3 = 1 or 2, return 0, 1 or 2 depending on Chip type
d188 1
a188 1
	tst.w	d3
d190 10
a199 1
	move.b	gb_MemType(a6),d3
d206 1
a206 1
	movem.l	(sp)+,a2-a3/d2-d5
d416 2
a417 1
	move.l	d2,d0
@


38.0
log
@Initial stuff, autodocs etc.
NB - Can save space by removing unused parts of LUTs
@
text
@d3 1
a3 1
*	$Id: Exp $
d9 1
d14 181
d226 1
a226 1
*	GfxBase->FMode and -1 respectively (a -1 in vpe->Blank means all the
d229 5
d240 1
a240 1
*	GfxNew()  GfxAssociate()  graphics/view.h
a281 8
	xref	_LVOGfxLookUp
	xref	_LVOGetVPModeID
	xref	_LVOGetDisplayInfoData
	xref	_LVOAllocMem
	xref	_LVOFreeMem
	xdef	_CalcIVG
	xref	_GfxBase

d317 8
a324 3
	move.l	a3,a0
	jsr	_LVOGfxLookUp(a6)
	tst.l	d0
d327 15
a342 1
	move.w	vpe_FMode(a1),d6
d393 1
d407 4
@
