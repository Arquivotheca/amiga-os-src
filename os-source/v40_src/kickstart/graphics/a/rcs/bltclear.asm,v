head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.1 rel39_90:39.1 rel39_89:39.1 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.8 V36_208:1.8 V36_207:1.8 V36_205:1.8 V36_203:1.8 V36_202:1.8 V36_201:1.8 V36_200:1.8 V36_199:1.8 V36_198:1.8 V36_196:1.8 V36_195:1.8 V36_194:1.8 V36_193:1.8 V36_192:1.8 V36_191:1.8 V36_190:1.8 V36_189:1.8 V36_188:1.8 V36_187:1.8 V36_186:1.8 V36_185:1.8 V36_184:1.8 V36_183:1.8 V36_182:1.8 V36_181:1.8 V36_180:1.8;
locks    ; strict;
comment  @@;


39.1
date     92.09.03.15.34.57;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.24.08;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.13.59.52;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.17.05.49;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.12.23.17;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.24.09;  author spence;  state Exp;
branches ;
next     1.8;

1.8
date     90.07.27.16.36.55;  author bart;  state Exp;
branches ;
next     1.7;

1.7
date     90.03.27.16.19.08;  author bart;  state Exp;
branches ;
next     1.6;

1.6
date     89.05.02.10.49.44;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     88.11.14.10.14.13;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     88.11.11.18.29.49;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     88.09.21.19.16.33;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.17.22.15.17;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.07;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@Autodoc spelling corrections
@
text
@*******************************************************************************
*
*	$Id: BltClear.asm,v 39.0 91/08/21 17:24:08 chrisg Exp Locker: spence $
*
*******************************************************************************

	include 'exec/types.i'                  * Data type definitions
	include 'exec/nodes.i'
	include 'exec/lists.i'
	include 'exec/interrupts.i'
	include 'exec/libraries.i'
	include 'hardware/custom.i'     * Amiga hardware registers
	include 'hardware/blit.i'               * Blitter constants
	include 'graphics/gfxbase.i'
	include 'submacs.i'                 * Subroutine/function macros
	include '/sane_names.i'           * sane names

	section	graphics
	xdef    _BltClear          * Define function entries as public symbols

	xref    _custom                     * extern struct AmigaRegs ioregs;
	xref    waitblitdone



	PAGE

******* graphics.library/BltClear *********************************************
* 
*   NAME   
* 
*	BltClear - Clear a block of memory words to zero.
* 
*   SYNOPSIS
*	BltClear( memBlock, bytecount, flags )
*		    a1         d0       d1
*
*	void BltClear( void *, ULONG, ULONG );
*
*   FUNCTION
*	For memory that is local and blitter accessible, the most
*	efficient way to clear a range of memory locations is
*       to use the system's most efficient data mover, the blitter.
*       This command accepts the starting location and count and clears
*       that block to zeros.
*
*   INPUTS
*	memBloc	- pointer to local memory to be cleared
*		  memBlock is assumed to be even.
*	flags	- set bit 0 to force function to wait until 
*		  the blit is done.
*		  set bit 1 to use row/bytesperrow.
*
*	bytecount - if (flags & 2) == 0 then
*				even number of bytes to clear.
*			else
*				low 16 bits is taken as number of bytes
*				per row and upper 16 bits taken as
*				number of rows.
*
*	This function is somewhat hardware dependent. In the rows/bytesperrow
*	mode (with the pre-ECS blitter) rows must be <- 1024. In bytecount mode 
*	multiple runs of the blitter may be used to clear all the memory.
*
*	Set bit 2 to use the upper 16 bits of the Flags as the data to fill 
*	memory with instead of 0 (V36).
*
*   RESULT
*	The block of memory is initialized.
* 
*   BUGS
* 
*   SEE ALSO
* 
******************************************************************************

*                               CLEAR BLITTER MEMORY BUFFER
_BltClear:

	move.l  d6,-(sp)                    * need a temporary register

	lea     _custom,a0                  * io = &ioregs;
	clr     d6                          * Can't use CLR on H/W registers

	OWNBLITTER

	WAITBLITDONE  a0                    * waitblitdone();

	move    d6,bltcon1(a0)          * so use move.w instead
	move    d6,bltmdd(a0)           * io->bltcon1 = io->bltmdd = 0;
	move    #DEST+ANBNC+ANBC+ABNC+ABC,bltcon0(a0)	* A->D
	btst	#2,d1
	if <>
		swap	d1
		move.w	d1,adata(a0)	; use upper word
		swap	d1
	else
		move.w	d6,adata(a0)	; use #0
	endif
	moveq	#-1,d6
	move.l	d6,fwmask(a0)		; get lwmask also
	move.l  a1,bltptd(a0)           * io->bltptd = (UBYTE *) a;

	btst    #1,d1                       * if (flags & 2)
	if <>
		if #$4000000 < d0.l
			bra.s too_big
		endif
		if #$80<d0.w
*			too many BytesPerRow
* use other BltClear mode
too_big:
			move.w	d0,d6				* d6 = BytesPerRow
			swap	d0					* d0 = # of Rows
			mulu	d6,d0				* total # of Bytes
			bra.s	long_way
		endif
		asr.l   #1,d0                       * d0 = size >> 1
		moveq   #$3F,d6
		and.l   d0,d6
	    asr.l   #8,d0
	    asr.l   #1,d0                   * d0 = size >> 10
	    and.w   #$FFC0,d0
	    or.w    d6,d0                   * d7 = ((size>>10)&0xFFC0)|((size>>1)&0x3F);
	    move.w  d0,bltsize(a0)      * start blit
	else
long_way:
*		asr.l   #1,d0                       * d0 = size >> 1
		lsr.l   #1,d0                       * shift unsigned -- bart
		moveq   #$3F,d6
		and.l   d0,d6
		sub.l   d6,d0                   * size -= t;

	    if d6<>#0.l                     * if (t)
		or      #$40,d6
		move    d6,bltsize(a0)  * io->bltsize = 0x40 | t;
	    endif

	    move.l  d0,d6
	    and.l   #$FFC0,d6               * t = size & 0xFFC0;

	    if <>                           * if (t)
		sub.l   d6,d0               * size = size - t;

		WAITBLITDONE   a0            * waitblitdone();

		move    d6,bltsize(a0)  * io->bltsize = t;
	    endif

	    swap d0                     * does a >>16 and test
	    if <>                       * if (size)
		clr.w   d6
		repeat
		    WAITBLITDONE  a0            * waitblitdone();
		    move    d6,bltsize(a0)  * io->bltsize = size = 0;
		    subq.w  #1,d0
		until =
	    endif
	endif

	btst    #0,d1                       * if (flags & 1)
	if <>
	    WAITBLITDONE    a0              * waitblitdone();
	endif

	DISOWNBLITTER                       * disownblitter(GB);

	move.l  (sp)+,d6
	rts                                 * Exit to caller

	end                                 * End of BltClear
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: BltClear.asm,v 37.3 91/05/01 13:59:52 chrisg Exp Locker: chrisg $
d41 1
a41 1
*	For memory that is local and blitter accessable, the most
d61 1
a61 1
*	This function is somewhat hardware dependant. In the rows/bytesperrow
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: BltClear.asm,v 37.2 91/02/12 17:05:49 chrisg Exp Locker: chrisg $
@


37.2
log
@autodoc - spacing
@
text
@d3 1
a3 1
*	$Id: BltClear.asm,v 37.1 91/02/12 12:23:17 chrisg Exp Locker: chrisg $
d16 1
a16 1
	include '../sane_names.i'           * sane names
@


37.1
log
@ cleaned up autodoc
@
text
@d3 1
a3 1
*	$Id: BltClear.asm,v 37.0 91/01/07 15:24:09 spence Exp Locker: chrisg $
d38 1
a38 1
*	void BltClear( void *, ULONG, ULONG);
d54 1
a54 1
*	bytecount	if (flags & 2) == 0 then
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: BltClear.asm,v 1.8 90/07/27 16:36:55 bart Exp Locker: spence $
d38 1
a38 3
*	APTR memBlock;
*	ULONG	bytecount;
*	ULONG	flags;
d41 2
a42 2
*	For memory that is local and blitter accessable
*       the most efficient way to clear a range of memory locations is
d49 5
a53 4
*		memBlock is assumed to be even.
*	flags	set bit 0 to force function to wait until blit
*		is done.
*		set bit1 to use row/bytesperrow
d65 2
a66 2
*	Set bit2 to use the upper 16 bits of the Flags as the data to fill 
*	memory with instead of 0 (New for V1.4).
d76 1
@


1.8
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.6 89/05/02 10:49:44 bart Exp $
@


1.6
log
@doc
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.5 88/11/14 10:14:13 bart Exp $
@


1.5
log
@unsigned shift -- bart
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.4 88/11/11 18:29:49 bart Exp $
d61 8
a68 2
*		set bit2 to use the upper 16 bits of the Flags as the
*		data to fill memory with instead of 0.
@


1.4
log
@[Dcheck for greater than 1024 hight
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.3 88/09/21 19:16:33 dale Exp $
d122 2
a123 1
		asr.l   #1,d0                       * d0 = size >> 1
d126 1
a126 1
	    sub.l   d6,d0                   * size -= t;
@


1.3
log
@Fixed BltClear with a nonzero jam value, fw and lw mask needed to be set.
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.2 88/06/17 22:15:17 dale Exp $
d100 3
d106 1
@


1.2
log
@BltClear with new option to use upper 16 bits as data instead of
zero.
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 1.1 88/05/01 15:36:07 dale Exp $
d94 2
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: BltClear.asm,v 33.0 86/05/17 15:04:37 bart Exp $
d61 2
a62 6
*
*	This function is somewhat hardware dependant. In the
*	rows/bytesperrow mode, rows must be <=1024.
*	In bytecount mode multiple runs of the blitter
*	may be used to clear all the memory.

d64 1
a64 1
*	The block of memory is set to zeros.
d85 9
a93 1
	move    #DEST,bltcon0(a0)       * io->bltcon0 = DEST;
@
