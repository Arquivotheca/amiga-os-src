head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.3 V37_29:37.3 V37_28:37.3 V37_27:37.3 V37_25:37.3 V37_24:37.3 V37_23:37.3 V37_22:37.3 V37_21:37.3 V37_20:37.3 V37_19:37.3 V37_18:37.3 V37_17:37.3 V37_15:37.3 V37_14:37.3 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.3 V36_208:1.3 V36_207:1.3 V36_205:1.3 V36_203:1.3 V36_202:1.3 V36_201:1.3 V36_200:1.3 V36_199:1.3 V36_198:1.3 V36_196:1.3 V36_195:1.3 V36_194:1.3 V36_193:1.3 V36_192:1.3 V36_191:1.3 V36_190:1.3 V36_189:1.3 V36_188:1.3 V36_187:1.3 V36_186:1.3 V36_185:1.3 V36_184:1.3 V36_183:1.3 V36_182:1.3 V36_181:1.3 V36_180:1.3;
locks    ; strict;
comment  @@;


39.0
date     91.08.21.17.23.29;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.05.01.13.56.48;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.02.12.17.00.30;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.12.04.01;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.11.56.04;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.23.48;  author spence;  state Exp;
branches ;
next     1.3;

1.3
date     90.07.27.16.36.03;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     90.03.27.16.28.32;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.01;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@*******************************************************************************
*
*	$Id: AreaDraw.asm,v 37.4 91/05/01 13:56:48 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	section	graphics
    xdef    _AreaDraw
******* graphics.library/AreaDraw *******************************************
*
*   NAME
*	AreaDraw -- Add a point to a list of end points for areafill.
*
*
*   SYNOPSIS
*	error = AreaDraw( rp,  x,     y)
*	  d0	          A1 D0:16 D1:16
*
*	ULONG AreaDraw( struct RastPort *, SHORT, SHORT);
*
*   FUNCTION
*	Add point to the vector buffer.
*
*
*   INPUTS
*	rp	- points to a RastPort structure.
*	x,y	- are coordinates of a point in the raster.
*
*   RESULT
*	error	- zero for success, else -1 if no there was no space
*		  left in the vector list.
*
*   BUGS
*
*   SEE ALSO
*	AreaMove() InitArea() AreaEnd() graphics/rastport.h
*
*
******************************************************************************
	include 'exec/types.i'
	include 'graphics/rastport.i'
	include '/c/areafill.i'

_AreaDraw:
*				use a0 as scratch pointer
* this could be speeded up by using upper 16 bits of d0/d1 as scratch
	move.l	d7,-(sp)
	move.l	rp_AreaInfo(a1),a0		*get pointer to AreaInfo structure
	move.w	ai_Count(a0),d7			* get current count of vectors
	addq.w	#1,d7
	if ai_MaxCount(a0)>=d7.w
		move.w	d7,ai_Count(a0)		* store new count
*		is boundary mode on?
		moveq	#MDFLAG2,d7
		btst #RPB_AREAOUTLINE,rp_Flags+1(a1)
		if <>
			or.b	#DRWBNDRY,d7
		endif
*		no longer need RastPort pointer so we can use a1 now
		move.l	ai_VctrPtr(a0),a1
*	assume that no one does a draw first
		if -2(a1)<>d1.w
			or.b	#MDFLAG1,d7
		endif
		move.w	d0,(a1)+	* stash away x
		move.w	d1,(a1)+	* stash away y
		move.l	a1,ai_VctrPtr(a0)	* new pointer
		move.l	ai_FlagPtr(a0),a1	* get pointer to flags
		move.b	d7,(a1)+	* stash flags for this point
		move.l	a1,ai_FlagPtr(a0)
		moveq	#0,d0
	else
*		too many vectors
		moveq	#-1,d0				* return error
	endif
	movem.l	(sp)+,d7				* does not affect ccr
	rts

	end
@


37.4
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: AreaDraw.asm,v 37.3 91/02/12 17:00:30 chrisg Exp Locker: chrisg $
@


37.3
log
@autodocs - tabs
@
text
@d3 1
a3 1
*	$Id: AreaDraw.asm,v 37.2 91/02/12 12:04:01 chrisg Exp Locker: chrisg $
d42 1
a42 1
	include '../c/areafill.i'
@


37.2
log
@ More autodoc editing (added ()'s)
@
text
@d3 1
a3 1
*	$Id: AreaDraw.asm,v 37.1 91/02/12 11:56:04 chrisg Exp Locker: chrisg $
d12 1
a12 1
*       AreaDraw -- Add a point to a list of end points for areafill.
d16 1
a16 1
*       error = AreaDraw( rp,  x,     y)
d22 1
a22 1
*       Add point to the vector buffer.
d26 2
a27 2
*       rp	- points to a RastPort structure.
*       x,y	- are coordinates of a point in the raster.
d30 1
a30 1
*       error	- zero for success, else -1 if no there was no space
d36 1
a36 1
*       AreaMove() InitArea() AreaEnd() graphics/rastport.h
d61 1
a61 1
*       assume that no one does a draw first
@


37.1
log
@ Cleaned up autodoc.
@
text
@d3 1
a3 1
*	$Id: AreaDraw.asm,v 37.0 91/01/07 15:23:48 spence Exp Locker: chrisg $
d36 1
a36 1
*       AreaMove InitArea AreaEnd graphics/rastport.h
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: AreaDraw.asm,v 1.3 90/07/27 16:36:03 bart Exp Locker: spence $
d19 1
a19 3
*	LONG error;
*	struct RastPort *rp;
*	SHORT	x,y;
d26 2
a27 2
*       rp - points to a RastPort structure
*       x,y -  are coordinates of a point in the raster
d29 3
a31 3
*   RETURNS
*       0 if no error
*	-1 if no space left in vector list
@


1.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: AreaDraw.asm,v 1.1 88/05/01 15:36:01 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: AreaDraw.asm,v 33.0 86/05/17 15:03:42 bart Exp $
@
