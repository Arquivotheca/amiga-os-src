head     39.1;
branch   ;
access   ;
symbols  rel39_24:39.1 rel39_18:39.1 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.3 V36_208:36.3 V36_207:36.3 V36_205:36.3 V36_203:36.3 V36_202:36.3 V36_201:36.3 V36_200:36.3 V36_199:36.3 V36_198:36.3 V36_196:36.3 V36_195:36.3 V36_194:36.3 V36_193:36.3 V36_192:36.3 V36_191:36.3 V36_190:36.3 V36_189:36.3 V36_188:36.3 V36_187:36.3 V36_186:36.3 V36_185:36.3 V36_184:36.3 V36_183:36.3 V36_182:36.3 V36_181:36.3 V36_180:36.3;
locks    ; strict;
comment  @*   @;


39.1
date     93.03.19.11.55.50;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.25.42;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.14.36.16;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.04.19.32.15;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.01;  author spence;  state Exp;
branches ;
next     36.3;

36.3
date     90.08.24.11.27.15;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     90.03.27.17.34.26;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.21.11.26.52;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.08.21.11.22.09;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.1
log
@IFD out as the C code is now declared as regargs.
@
text
@*******************************************************************************
*
*	$Id: GetVPModeID.asm,v 39.0 91/08/21 17:25:42 chrisg Exp Locker: spence $
*
*******************************************************************************

    IFD WASTE_ROMSPACE

    section	graphics


******* graphics.library/GetVPModeID *******************************************
*
*   NAME
*	GetVPModeID -- get the 32 bit DisplayID from a ViewPort. (V36)
*
*   SYNOPSIS
*	modeID =  GetVPModeID( vp )
*	d0		       a0
*
*	ULONG GetVPModeID( struct ViewPort *);
*
*   FUNCTION
*	returns the normal display modeID, if one is currently  associated 
*	with this ViewPort.
*
*   INPUTS
*	vp -- pointer to a ViewPort structure.
*
*   RESULT
*	
*	modeID -- a 32 bit DisplayInfoRecord identifier associated with 
*		  this ViewPort, or INVALID_ID.
*
*   NOTES
*	Test the return value of this function against INVALID_ID, not NULL.
*	(INVALID_ID is defined in graphics/displayinfo.h).
*
*   BUGS
*
*   SEE ALSO
*	graphics/displayinfo.h, ModeNotAvailable()
*
********************************************************************************


    xref    _getvpmodeid
    xdef    _GetVPModeID

_GetVPModeID:

    move.l a0,-(sp)
    jsr	   _getvpmodeid
    addq.l #4,sp
    rts

******* graphics.library/ModeNotAvailable **************************************
*
*   NAME
*	ModeNotAvailable -- check to see if a DisplayID isn't available. (V36)
*
*   SYNOPSIS
*	error =  ModeNotAvailable( modeID )
*	d0		           d0
*
*	ULONG	ModeNotAvailable( ULONG);
*
*   FUNCTION
*	returns an error code, indicating why this modeID is not available, 
*	or NULL if there is no reason known why this mode should not be there.
*
*   INPUTS
*	modeID -- a 32 bit DisplayInfoRecord identifier.
*
*   RESULT
*	error -- a general indication of why this modeID is not available,
*		 or NULL if there is no reason why it shouldn't be available.
*
*   NOTE
*	ULONG return values from this function are a proper superset of the
*	DisplayInfo.NotAvailable field (defined in graphics/displayinfo.h).
*
*   BUGS
*
*   SEE ALSO
*	graphics/displayinfo.h, GetVPModeID()
*
********************************************************************************

    xref    _modenotavailable
    xdef    _ModeNotAvailable

_ModeNotAvailable:

    move.l d0,-(sp)
    jsr	   _modenotavailable
    addq.l #4,sp
    rts

    ENDC

    end
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: GetVPModeID.asm,v 37.2 91/02/12 14:36:16 chrisg Exp Locker: chrisg $
d7 2
d11 1
d99 2
@


37.2
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: GetVPModeID.asm,v 37.1 91/02/04 19:32:15 spence Exp Locker: chrisg $
@


37.1
log
@AutoDocs
@
text
@d3 1
a3 1
*	$Id: GetVPModeID.asm,v 37.0 91/01/07 15:25:01 spence Exp Locker: spence $
d18 1
a18 2
*	struct ViewPort *vp;
*	ULONG	modeID;
d30 1
a30 1
*		  this ViewPort, or INVAILD_ID.
d32 2
a33 2
*   NOTE
*	test the return value of this function against INVALID_ID, not NULL.
d63 1
a63 2
*	ULONG	modeID;
*	ULONG	error;
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: GetVPModeID.asm,v 36.3 90/08/24 11:27:15 bart Exp Locker: spence $
d12 1
a12 1
*	GetVPModeID -- get the 32 bit DisplayID from a ViewPort.
d58 1
a58 1
*	ModeNotAvailable -- check to see if a DisplayID isn't available.
@


36.3
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: GetVPModeID.asm,v 36.1 89/08/21 11:26:52 bart Exp $
@


36.1
log
@check assembly interface
@
text
@d3 1
a3 1
*	$Header: GetVPModeID.asm,v 36.0 89/08/21 11:22:09 bart Exp $
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*	$Header: $
@
