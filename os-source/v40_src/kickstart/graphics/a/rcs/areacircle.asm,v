head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0;
locks    ; strict;
comment  @@;


39.0
date     91.08.21.17.23.22;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.13.54.49;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.16.59.25;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.11.44.03;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.17.06.40;  author spence;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@*******************************************************************************
*
*	$Id: AreaCircle.asm,v 37.3 91/05/01 13:54:49 chrisg Exp Locker: chrisg $
*
*******************************************************************************

******* graphics.library/AreaCircle ********************************************
*
*    NAME
*	AreaCircle -- add a circle to areainfo list for areafill.
*
*
*    SYNOPSIS
*	error = (int) AreaCircle( rp,  cx,  cy, radius)
*	D0			  A1   D0   D1	D2
*
*	ULONG AreaCircle(struct RastPort *, WORD, WORD, UWORD);
*
*    FUNCTION
*	Add circle to the vector buffer. It will be drawn to the rastport when
*	AreaEnd is executed.
*
*    INPUTS
*	rp	 - pointer to a RastPort structure
*
*	cx, cy   - the coordinates of the center of the desired circle.
*
*	radius	 - is the radius of the circle to draw around the centerpoint.
*
*    RESULTS
*	0 if no error
*	-1 if no space left in vector list
*
*    NOTES
*	This function is actually a macro which calls 
*	    AreaEllipse(rp,cx,cy,radius,radius).
*
*    SEE ALSO
*	AreaMove() AreaDraw() AreaCircle() InitArea() AreaEnd()
*	graphics/rastport.h graphics/gfxmacros.h
*
********************************************************************************


	include 'exec/types.i'
	include 'graphics/rastport.i'
	include '/c/areafill.i'

AREACIRCLE_MACRO equ 1

	ifnd AREACIRCLE_MACRO

	section	graphics
	xdef    _AreaCircle

	xref	_LVOAreaDraw

_AreaCircle:
*				use a0 as scratch pointer
* this could be speeded up by using upper 16 bits of d0/d1 as scratch
	movem.l	d2/d7,-(sp)
	move.l	rp_AreaInfo(a1),a0		*get pointer to AreaInfo structure

*	bart - 05.01.86 begin routine - close last polygon if still open

	move.w	ai_Count(a0),d7			* copy current count
	if #0<>d7.w
	    move.l	a2,-(sp)		* need another register
	    move.l	ai_FlagPtr(a0),a2
	    if -(a2).b=#0			* was previous point a move?
		sub.w	#1,ai_Count(a0)		* yes, lets just backup
		move.l	a2,ai_FlagPtr(a0)
		subq.l	#4,ai_VctrPtr(a0)
	    else
		cmp.w	#2,d7			* at least two instructions ?
		btst    #EXTENDEDn,-(a2)	* was an extended instruction ?
		blt.s	not_extended
		if =
not_extended:
		    move.l	ai_VctrPtr(a0),a2 
*		    				* now check if previous polygon 
*						* was closed properly
		    move.w	-4(a2),d7	* get old x
		    if ai_FirstX(a0)=d7
			move.w -2(a2),d7	* get old y
			cmp.w ai_FirstY(a0),d7
			beq.s closed
		    endif
		    move.l	a1,a2			* save RastPort here
		    movem.w	d0/d1,-(sp)		* save these guys also
		    movem.w	ai_FirstX(a0),d0/d1	* get original start
		    jsr	_LVOAreaDraw(a6)		* close it up, sets cc
		    movem.w	(sp)+,d0/d1		* restore d0/d1
		    move.l	a2,a1			* get RastPort back
		    if <				* now test the cc return
			move.l	(sp)+,a2
			bra bad
		    endif
		endif
	    endif
closed:
	    move.l	(sp)+,a2		* restore the saved register
	endif

*	bart - 05.01.86 end routine  - close last polygon if still open

	move.w	ai_Count(a0),d7			* get current count of vectors
	addq.w	#2,d7				* circle takes two points
	if ai_MaxCount(a0)>=d7.w
		move.w	d7,ai_Count(a0)		* store new count

*		always draw boundary for circles
		moveq	#MDFLAG2,d7

*		overwrite boundary with outline -- bart 88.10.04 
		btst #RPB_AREAOUTLINE,rp_Flags+1(a1)
		if <>
			or.b	#DRWBNDRY,d7
		endif

*		circle is extended instuction
		or.b	#EXTENDED,d7

*		no longer need RastPort pointer so we can use a1 now
		move.l	ai_VctrPtr(a0),a1

*		don't need to look at previous instruction - bart - 04.28.86
*		if -2(a1)<>d1.w
			or.b	#MDFLAG1,d7
*		endif

		move.w	d0,(a1)		* stash away xcenter - radius
		sub.w	d2,(a1)+
		move.w	d1,(a1)		* stash away ycenter - radius
		sub.w	d2,(a1)+
		move.w	d0,(a1)		* stash away xcenter + radius
		add.w	d2,(a1)+
		move.w	d1,(a1)		* stash away ycenter + radius
		add.w	d2,(a1)+

		move.l	a1,ai_VctrPtr(a0)	* new pointer

		move.l	ai_FlagPtr(a0),a1	* get pointer to flags
		move.b	d7,(a1)+		* stash first flag btye
		moveq	#CIRCLE,d7		* extended command
		move.b	d7,(a1)+		* stash extended flag btye
		move.l	a1,ai_FlagPtr(a0)
		
		moveq	#0,d0			* no error
	else
*		too many vectors
bad:
		moveq	#-1,d0			* return error
	endif
	movem.l	(sp)+,d2/d7			* does not affect ccr
	rts

	endc

	end
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: AreaCircle.asm,v 37.2 91/02/12 16:59:25 chrisg Exp Locker: chrisg $
@


37.2
log
@autodocs - tabs, parens, spacing.
@
text
@d3 1
a3 1
*	$Id: AreaCircle.asm,v 37.1 91/02/12 11:44:03 chrisg Exp Locker: chrisg $
d47 1
a47 1
	include '../c/areafill.i'
@


37.1
log
@ Cleaned up autodoc.
@
text
@d3 1
a3 1
*	$Id: AreaCircle.asm,v 37.0 91/01/07 17:06:40 spence Exp Locker: chrisg $
d26 1
a26 1
*	(cx, cy) - the coordinates of the center of the desired circle.
d39 2
a40 2
*       AreaMove, AreaDraw, AreaCircle, InitArea, AreaEnd, graphics/rastport.h
*	graphics/gfxmacros.h
@


37.0
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: AreaCircle.asm,v 1.4 90/07/27 16:35:54 bart Exp $
d17 1
a17 4
*	LONG error;
*	struct RastPort *rp;
*	SHORT cx, cy;
*	SHORT radius;
d20 2
a21 1
*	Add circle to the vector buffer.
d24 1
a24 1
*	rp - pointer to a RastPort structure
d26 1
a26 2
*	(cx, cy) - are coordinates of a "centerpoint" in the raster
*	radius is the radius of the circle to draw around the centerpoint
d28 1
a28 2
*	This function is a macro which calls 
*	    AreaEllipse(rp,cx,cy,radius,radius).
d33 4
@
