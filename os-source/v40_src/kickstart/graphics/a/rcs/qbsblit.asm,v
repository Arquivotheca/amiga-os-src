head     39.5;
branch   ;
access   ;
symbols  rel39_24:39.5 rel39_18:39.5 rel39_97:39.5 rel39_90:39.5 rel39_89:39.5 rel39_82:39.5 rel39_76:39.3 rel39_71:39.2 rel39_65:39.1 rel39_64:39.1 rel39_61:39.1 rel39_60:39.1 rel39_55:39.1 rel39_52:39.1 rel39_47:39.1 rel39_39:39.1 rel39_38:39.1 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.5 V36_208:1.5 V36_207:1.5 V36_205:1.5 V36_203:1.5 V36_202:1.5 V36_201:1.5 V36_200:1.5 V36_199:1.5 V36_198:1.5 V36_196:1.5 V36_195:1.5 V36_194:1.5 V36_193:1.5 V36_192:1.5 V36_191:1.5 V36_190:1.5 V36_189:1.5 V36_188:1.5 V36_187:1.5 V36_186:1.5 V36_185:1.5 V36_184:1.5 V36_183:1.5 V36_182:1.5 V36_181:1.5 V36_180:1.5;
locks    ; strict;
comment  @@;


39.5
date     92.08.11.14.00.32;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.08.10.10.23.27;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.07.23.10.50.14;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.06.16.12.13.22;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.10.09.45.18;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.10;  author chrisg;  state Exp;
branches ;
next     37.3;

37.3
date     91.05.01.14.19.17;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.04.17.14.18.36;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.18.11;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.50;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.08.24.11.28.07;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.27.15.54.11;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.22.16.55.02;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.11.06.13.34.45;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.53;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.5
log
@include path.
@
text
@*******************************************************************************
*
*	$Id: qbsblit.asm,v 39.4 92/08/10 10:23:27 chrisg Exp Locker: chrisg $
*
*******************************************************************************

    
    include 'exec/types.i'
    include 'exec/nodes.i'
    include 'exec/lists.i'
    include 'exec/ports.i'
    include 'exec/interrupts.i'
    include 'exec/libraries.i'
    include	'exec/ables.i'

    include '/gfx.i'
    include '/gfxbase.i'
    include 'hardware/blit.i'
    include 'hardware/intbits.i'
    include 'hardware/dmabits.i'
    include 'hardware/custom.i'
    include '/view.i'

	section	graphics
    xref    _ciab
    xref    _intreq
    xref    _intreqr
    xref    _intena
    xref    _intenar
    xref    _custom
    xref    _vposr
    xref    _dmaconr

    xref    disownblitter
    xref    start_timer

    xref    _Forbid
    xref    _Permit

    xref    _LVOAbleICR
    xref    waitblitdone
	xref	_LVOPermit

    xdef    _QBSBlit
    xref    _Debug
	xref	_QBlit
	xref	qbs_entry

******* graphics.library/QBSBlit **********************************************
*
*   NAME
*
*	QBSBlit -- Synchronize the blitter request with the video beam.
*
*   SYNOPSIS
*
*	QBSBlit( bsp )
*		 a1
*
*	void QBSBlit( struct bltnode * );
*
*   FUNCTION
*	Call a user routine for use of the blitter, enqueued separately from
*       the QBlit queue.  Calls the user routine contained in the blit
*       structure when the video beam is located at a specified position
*       onscreen.   Useful when you are trying to blit into a visible part
*       of the screen and wish to perform the data move while the beam is
*       not trying to display that same area.  (prevents showing part of
*       an old display and part of a new display simultaneously).  Blitter
*       requests on the QBSBlit queue take precedence over those on the
*       regular blitter queue. The beam position is specified the blitnode.
*
*   INPUTS
*	bsp - pointer to a blit structure.  See description in the
*             Graphics Support section of the manual for more info.
*
*   RESULT
*       User routine is called when the QBSBlit queue reaches this
*       request AND the video beam is in the specified position.
*       If there are lots of blits going on and the video beam
*       has wrapped around back to the top it will call all the
*       remaining bltnodes as fast as it can to try and catch up.
*
*   NOTES
*       QBlit(), and QBSBlit() have been rewritten for V39.  Queued
*       blits are now handled in FIFO order.  Tasks trying to
*       OwnBlitter() are now given a fair share of the total
*       blitter time available.  QBSBlit() are no longer queued
*       separately from nodes added by QBlit().  This fixes the
*       ordering dependencies listed under BUGS in prior autodoc
*       notes. 
*
*   BUGS
*
*   SEE ALSO
*	QBlit() hardware/blit.h
*
******************************************************************************
_QBSBlit:

	;-- This code is similar to QBlit().  The only real difference
	;-- is we try to honor the request for beam syncing... if
	;-- can do so before the next VBLANK


	move.w	bn_beamsync(a1),d0

	;-- The argument could be made that we should check the current
	;-- monitor's MaxDisplayRow value ... wait ...
	;
	;-- This is probably not what we want to check at all!  But this
	;-- is the value that the old QBSBlit() code used for beam position
	;-- clipping, so I do the same, but in any case...
	;
	;-- It could be argued that we really need to check this in FORBID,
	;-- but the answer to that is, why bother?  It doesn't really
	;-- matter that we clip now, and the active monitor changes before
	;-- we queue the blit, or after.   We could just as easily end
	;-- up checking inside of FORBID or DISABLE, and the current monitor
	;-- could switch after the blit is queued, but before it is actually
	;-- started (waiting for the beam position to trigger the timer).
	;
	;-- Since it doesn't matter ... regardless, we will fix ourselves
	;-- because at the next VBLANK will immediately satisfy any blitnode
	;-- waiting for the beamsynced timer to alarm.


	move.w	gb_MaxDisplayRow(a6),d1		;atomic read of value (may change)
	cmp.w	d1,d0
	bls.s	qbs_validbeam			;unsigned; also clips negative #'s
						;for compatability with old code
	move.w	d1,d0

qbs_validbeam:

	bset	#15,d0				;mark as beamsync if possible
	move.w	d0,bn_beamsync(a1)		;cache clipped value

	;-- Note that beam position 0 is really silly, but allowed.  This
	;-- new code does not use gb_BeamSync for anything anymore.  It use
	;-- to use it as a flag.  If someone had specified 0 for
	;-- beamsync value, the system was hosed.  Probably noone did,
	;-- but this isn't a bug anymore.  If the current beam position is
	;-- past the requested position, then the beam synced blit is
	;-- simply started immediately.

	bra	qbs_entry

	END

@


39.4
log
@replaced with darren's code, which actually works
(unlike the previous code).
@
text
@d3 1
a3 1
*	$Id: qbsblit.asm,v 39.3 92/07/23 10:50:14 chrisg Exp $
d16 2
a17 2
    include 'graphics/gfx.i'
    include 'graphics/gfxbase.i'
d22 1
a22 1
    include 'graphics/view.i'
@


39.3
log
@fixed tst.b gb_BeamSync to tst.w. Could this be the cause of
our icon dropping?

Found by Darren.
@
text
@d3 1
a3 1
*	$Id: qbsblit.asm,v 39.2 92/06/16 12:13:22 chrisg Exp Locker: chrisg $
d14 1
a14 1
	include	'exec/ables.i'
a17 1
    include '/cia8520.i'
a22 2
    include 'submacs.i'
    include '/sane_names.i'
a35 1
    xref    DEBUG
d47 2
a48 2
	xref	qb_entry
	xref	qb_entry2
d80 12
a91 3
*	If there are lots of blits going on and the video beam
*	has wrapped around back to the top it will call all the
*	remaining bltnodes as fast as it can to try and catch up.
a93 3
*	Not very smart when getting blits from different tasks.
*	They all get put in same queue so there are unfortunately
*	some interdependencies with the beam syncing.
d100 6
a105 11
*	jmp	_QBlit				* defeat for 6526
    clr.l   (a1)            *   clear ptr to next blit node
	move.l	gb_ExecBase(a6),a0
	FORBID	a0,NOFETCH
    disable_interrupts
	tst.b	gb_VBlank(a6)
	bne.s	give_up
	tst.w	gb_BeamSync(a6)
	beq.s	qb_entry
give_up:
* do clipping
d107 43
a149 47
	move.w	gb_MaxDisplayRow(a6),d1
	if d1<d0
		move.w	d1,bn_beamsync(a1)
	endif
* more clipping for possible negative offsets -- bart v1.3
	if #0>d0
		move.w  d1,bn_beamsync(a1)
	endif
    if  gb_bsblthd(a6)=#0.l .extend
	tst.l   gb_blthd(a6)
	if <>
	    move.w  #BITSET+INTF_BLIT,_intena   * o.k. for blit interrupt
	    move.w  bn_beamsync(a1),gb_BeamSync(a6) * we are waiting...
	    move.l  a1,gb_bsblthd(a6)
	    bra.s   bstailit
	endif
	
	move.w  bn_beamsync(a1),d0  *   get target beam position
	move.l  _vposr,d1   *   get beam position
	asr.l   #8,d1
	and.l	#$7FF,d1

*	bart -- prevent unpredicatble beam collisions for workbench icons
 	if d1<d0.w
 	    move.l  a1,-(sp)
 	    bsr start_timer
 	    move.l  (sp)+,a1
 	    move.l  a1,gb_bsblthd(a6)   * put at head of list
 	    move.w  bn_beamsync(a1),gb_BeamSync(a6) * we are waiting...
 	    bra.s     bstailit
 	else
*           move.w  #$F99,$dff180
 	    bra qb_entry2
 	endif

    else
	move.l  gb_bsblttl(a6),a0
	move.l  a1,(a0)         * link at end of list
    endif
bstailit:
    move.l  a1,gb_bsblttl(a6)       * new end of list
    enable_interrupts
	move.l	a6,a0
	move.l	gb_ExecBase(a6),a6
	jsr	_LVOPermit(a6)
	move.l	a0,a6
    rts
a150 1
	end
@


39.2
log
@short branches
@
text
@d3 1
a3 1
*	$Id: qbsblit.asm,v 39.1 91/10/10 09:45:18 chrisg Exp $
d105 1
a105 1
	tst.b	gb_BeamSync(a6)
@


39.1
log
@  made not call Forbid/Permit via stub.
@
text
@d3 1
a3 1
*	$Id: qbsblit.asm,v 39.0 91/08/21 17:27:10 chrisg Exp Locker: chrisg $
d103 5
a107 5
    if gb_VBlank(a6).b=#0
		if gb_BeamSync(a6).w=#0
	    	bra qb_entry
		endif
    endif
d124 1
a124 1
	    bra     bstailit
d139 1
a139 1
 	    bra     bstailit
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: QBSBlit.asm,v 37.3 91/05/01 14:19:17 chrisg Exp Locker: chrisg $
d14 1
d46 1
d100 2
a101 1
    jsr _Forbid		    *	bart - 10.07.85
d152 4
a155 1
    jsr _Permit	* bart - 10.07.85
@


37.3
log
@killed ".." for cape
@
text
@d3 1
a3 1
*	$Id: QBSBlit.asm,v 37.2 91/04/17 14:18:36 chrisg Exp Locker: chrisg $
@


37.2
log
@  Slight optimization to reduce Disable time
@
text
@d3 1
a3 1
*	$Id: QBSBlit.asm,v 37.1 91/02/12 15:18:11 chrisg Exp Locker: chrisg $
d17 1
a17 1
    include '../cia8520.i'
d24 1
a24 1
    include '../sane_names.i'
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: QBSBlit.asm,v 37.0 91/01/07 15:25:50 spence Exp Locker: chrisg $
d98 1
a99 1
    jsr _Forbid		    *	bart - 10.07.85
a102 1
		rts
d148 1
a149 1
    enable_interrupts
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: QBSBlit.asm,v 1.5 90/08/24 11:28:07 bart Exp Locker: spence $
d62 1
a62 1
*	struct bltnode *bsp;
d70 1
a70 1
*       not trying to display that same area.  (prevents showning part of
d73 1
a73 1
*       regular blitter queue. The beamposition is specified the blitnode.
d92 1
a92 1
*	QBlit hardware/blit.h
@


1.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.4
log
@prevent unpredicatble beam collisions for workbench icons
restore qb_entry2 now that vposr is masked correctly
@
text
@d3 1
a3 1
*	$Header: /usr/commodore/amiga/V36/src/kickstart/graphics/a/RCS/QBSBlit.asm,v 1.3 90/03/22 16:55:02 bart Exp Locker: bart $
@


1.3
log
@vposr masking for ecs
@
text
@d3 1
a3 1
*	$Header: QBSBlit.asm,v 1.2 89/11/06 13:34:45 bart Exp $
d131 1
a131 1
*	if d1<d0.w
d138 1
a138 1
*	else
d140 2
a141 2
*	    bra qb_entry2
*	endif
@


1.2
log
@better beam synchronization for first beam sync blit
avoids unneccesary flashing for wb icons when dragging 
@
text
@d3 1
a3 1
*	$Header: QBSBlit.asm,v 1.1 88/05/01 15:37:53 dale Exp $
d128 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: QBSBlit.asm,v 33.1 87/11/10 14:22:28 bart Exp $
d128 10
a137 8
	if d1<d0.w
	    move.l  a1,-(sp)
	    bsr start_timer
	    move.l  (sp)+,a1
	    move.l  a1,gb_bsblthd(a6)   * put at head of list
	    move.w  bn_beamsync(a1),gb_BeamSync(a6) * we are waiting...
	    bra     bstailit
	else
d139 3
a141 2
	    bra qb_entry2
	endif
@
