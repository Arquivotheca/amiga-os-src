head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.1 V37_9:37.1 V37_8:37.1 V37_7:37.1 V37_6:37.1 V37_5:37.1 V37_4:37.1 V37_3:37.1 V37_2:37.0 V37_1:37.0 V36_209:1.6 V36_208:1.6 V36_207:1.6 V36_205:1.6 V36_203:1.6 V36_202:1.6 V36_201:1.6 V36_200:1.6 V36_199:1.6 V36_198:1.6 V36_196:1.6 V36_195:1.6 V36_194:1.6 V36_193:1.6 V36_192:1.6 V36_191:1.6 V36_190:1.6 V36_189:1.6 V36_188:1.6 V36_187:1.6 V36_186:1.6 V36_185:1.6 V36_184:1.6 V36_183:1.6 V36_182:1.6 V36_181:1.6 V36_180:1.6;
locks    ; strict;
comment  @@;


39.0
date     91.08.21.17.26.52;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.01.18.17.32.07;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.43;  author spence;  state Exp;
branches ;
next     1.6;

1.6
date     90.08.24.11.27.59;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     90.05.04.13.37.36;  author bart;  state Exp;
branches ;
next     1.4;

1.4
date     89.10.31.12.59.12;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     88.11.14.10.22.30;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     88.11.14.10.18.38;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.43;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@	SECTION	graphics
	INCLUDE	"exec/types.i"
	INCLUDE	"exec/alerts.i"
	INCLUDE	"graphics/gfxbase.i"
	INCLUDE	"hardware/blit.i"

	XDEF	FreeMustMem
	XDEF	_freemustmem
	XDEF	GetMustMem
	XDEF	_getmustmem

	XREF	_LVOAlert
	XREF	_LVOAllocMem
	XREF	_LVOFreeMem
	XREF	_LVOAttemptSemaphore
	XREF	_LVOObtainSemaphore
	XREF	_LVOReleaseSemaphore

*******	GetMustMem ***************************************************
*
*   memory = GetMustMem(size, constraints), GfxBase
*   d0                  d0    d1            a6
*
**********************************************************************
*
* Jan 18 1991 - if cannot get any memory, and LCM is too small,
* now returns NULL instead of GURUing.
*
* This may cause problems for:
* Text() - shouldn't. Change was made for Text() in the first place!
* bltSetup() in text/bltcopy.asm - now checks for NULL, and returns.
* 		This may cause problems further up the calling chain, though
*		doubtful.
* makemask() in c/blitplate.c - now checks for NULL, and returns.
* makemask() is on;ly called by oldbltpattern(), which checks returned
* value anyway.
* getmaxbytesperrow() - will always (eventually) get LCM.
* bindrecord() in d/startup.c - if you have no memory at startup.....
*
* - spence Jan 18 1991
*
**********************************************************************
_getmustmem:
		movem.l	4(a7),d0/d1
GetMustMem:
		movem.l	d2/d3/a5/a6,-(a7)
		move.l	d0,d2			; save size
		move.l	d1,d3			; save constraints
		move.l	a6,a5			; save GfxBase
		move.l	gb_ExecBase(a6),a6

		;------ see if LCM is appropriate for use
		cmp.l	#MAXBYTESPERROW,d2
		bgt.s	mustTryAlloc

		move.l	gb_LastChanceMemory(a5),a0
		jsr	_LVOAttemptSemaphore(a6)
		tst	d0
		beq.s	mustTryAlloc

		move.l	gb_LCMptr(a5),d0	; get last chance pointer
		bra.s	gotMustMem

mustTryAlloc:
		move.l	d2,d0			; recover size
		move.l	d3,d1			; recover constraints
		jsr	_LVOAllocMem(a6)
		tst.l	d0
		bne.s	gotMustMem

		cmp.l	#MAXBYTESPERROW,d2	; check if size is < max avail
*		ble.s	getLastChance
		bgt.s	gotMustMem

*		;------ this is a dead end alert, don't fret trashing things
*		move.l	d2,a5			; (show size requested)
*		move.l	#AN_GfxNoLCM,d7
*		jsr	_LVOAlert(a6)
getLastChance:
		move.l	gb_LastChanceMemory(a5),a0
		jsr	_LVOObtainSemaphore(a6)
		move.l	gb_LCMptr(a5),d0	; get last chance pointer

gotMustMem:
		movem.l	(a7)+,d2/d3/a5/a6
		rts


*******	FreeMustMem **************************************************
*
*   FreeMustMem(address, size), GfxBase
*               a1       d0     a6
*
**********************************************************************
_freemustmem:
		move.l	4(a7),a1
		move.l	8(a7),d0
FreeMustMem:
		move.l	a6,-(a7)

		move.l	gb_LCMptr(a6),a0
		cmp.l	a0,a1
		beq.s	freeLastChance

		move.l	a1,d1			; getmustmem can now return NULL, so need to check
		beq.s	freedMem		; spence - Jan 16 1991

		move.l	gb_ExecBase(a6),a6
		jsr	_LVOFreeMem(a6)
freedMem:
		move.l	(a7)+,a6
		rts

freeLastChance:
		move.l	gb_LastChanceMemory(a6),a0
		move.l	gb_ExecBase(a6),a6
		jsr	_LVOReleaseSemaphore(a6)
		bra.s	freedMem
	END
@


37.1
log
@getmustmem() now returns NULL instead of GURUing.
FreeMustMem() now of course checks for freeing NULL.
@
text
@@


37.0
log
@initial switchover from V36
@
text
@d25 18
d72 2
a73 1
		ble.s	getLastChance
d75 4
a78 5
		;------ this is a dead end alert, don't fret trashing things
		move.l	d2,a5			; (show size requested)
		move.l	#AN_GfxNoLCM,d7
		jsr	_LVOAlert(a6)

d104 3
@


1.6
log
@id
@
text
@@


1.5
log
@save/recover size and constaints for allocmem call if attemptsem fails
@
text
@@


1.4
log
@gb_ExecBase
@
text
@d28 1
a28 1
		movem.l	d2/a5/a6,-(a7)
d30 1
d47 2
d67 1
a67 1
		movem.l	(a7)+,d2/a5/a6
@


1.3
log
@*** empty log message ***
@
text
@a11 1
	XREF	_AbsExecBase
d31 1
a31 1
		move.l	_AbsExecBase,a6
d84 1
a84 1
		move.l	_AbsExecBase,a6
d92 1
a92 1
		move.l	_AbsExecBase,a6
@


1.2
log
@MAXBYTESPERROW
@
text
@d5 1
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
		cmp.l	#2048,d2
d50 1
a50 1
		cmp.l	#2048,d2		; check if size is < 2048
@
