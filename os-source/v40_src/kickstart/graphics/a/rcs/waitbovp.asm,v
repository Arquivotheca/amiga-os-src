head     39.2;
branch   ;
access   ;
symbols  rel39_24:39.2 rel39_18:39.2 rel39_97:39.2 rel39_90:39.2 rel39_89:39.2 rel39_82:39.1 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_52:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.8 V36_208:1.8 V36_207:1.8 V36_205:1.8 V36_203:1.8 V36_202:1.8 V36_201:1.8 V36_200:1.8 V36_199:1.8 V36_198:1.8 V36_196:1.8 V36_195:1.8 V36_194:1.8 V36_193:1.8 V36_192:1.8 V36_191:1.8 V36_190:1.8 V36_189:1.8 V36_188:1.8 V36_187:1.8 V36_186:1.8 V36_185:1.8 V36_184:1.8 V36_183:1.8 V36_182:1.8 V36_181:1.8 V36_180:1.8;
locks    ; strict;
comment  @@;


39.2
date     92.09.01.14.23.05;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.08.06.11.23.19;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.28.14;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.16.02.30;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.41;  author spence;  state Exp;
branches ;
next     1.8;

1.8
date     90.08.24.11.29.01;  author bart;  state Exp;
branches ;
next     1.7;

1.7
date     90.04.12.14.30.57;  author bart;  state Exp;
branches ;
next     1.6;

1.6
date     90.03.27.16.27.27;  author bart;  state Exp;
branches ;
next     1.5;

1.5
date     89.09.05.10.53.20;  author kodiak;  state Exp;
branches ;
next     1.4;

1.4
date     89.07.24.13.08.41;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     89.04.29.15.37.21;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     88.10.05.15.33.45;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.08;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.2
log
@made double wait position for dblscan screens.
@
text
@*******************************************************************************
*
*	$Id: WaitBOVP.asm,v 39.1 92/08/06 11:23:19 spence Exp Locker: chrisg $
*
*******************************************************************************

	include 'exec/types.i'
	include '/gfxbase.i'
	include '/view.i'
	include '/monitor.i'

	section	graphics

    xdef    _WaitBOVP
******* graphics.library/WaitBOVP *******************************************
*                                                      
*   NAME
*	WaitBOVP -- Wait till vertical beam reached bottom of
*		    this viewport.
*
*   SYNOPSIS
*	WaitBOVP( vp )
*		  a0
*
*	void WaitBOVP( struct ViewPort * );
*
*   FUNCTION
*	Returns when the vertical beam has reached the bottom of this viewport
*
*   INPUTS
*	vp - pointer to ViewPort structure
*
*   RESULT
*	This function will return sometime after the beam gets beyond
*	the bottom of the viewport.  Depending on the multitasking load
*	of the system, the actual beam position may be different than
*	what would be expected in a lightly loaded system.
*
*   BUGS
*	Horrors! This function currently busy waits waiting for the
*	beam to get to the right place.  It should use the copper
*	interrupt to trigger and send signals like WaitTOF does.
*
*   SEE ALSO
*	WaitTOF() VBeamPos()
*
*********************************************************************
_WaitBOVP:
	move.w	vp_DHeight(a0),d0
	bra.s	_WaitTOVP

	xref	_LVOVBeamPos
	xref	_LVOGfxLookUp

	xdef	_waittovp
_waittovp:
* c interface for WaitTOVP
	move.l	4(sp),a0	* get vp
	move.w	8+2(sp),d0	* get offset
*	fall into code

_WaitTOVP:
*  a0 = viewport ptr, d0.w = offset into viewport
* this should really wait for a signal
	move.l	gb_ActiView(a6),d1		* get current actiview
	beq 	tvprts
	movem.l	d2/d3/d4/d5/a2,-(sp)
	move.w	d0,d2				* preserve offset   in d2
	move.l	d1,d4				* preserve actiview in d4
	moveq.l	#0,d5				* clear interlace shift

	move.l	a0,-(sp)			* store viewport on stack
	xref	_new_mode
	jsr	_new_mode			* new viewport modes
	btst	#3,d0				* double scan?
	beq.s	no_dbscan
	add.w	d2,d2

no_dbscan:
	and.b	#V_LACE,d0			* test for interlace and
	if <>
		moveq.l	#1,d5			* set interlace shift
	endif
	
	move.l	gb_natural_monitor(a6),a2	* preliminary mspc in a2
	move.l	d4,a0				* actiview in a0
	move.w	v_Modes(a0),d1			* view->Modes in d1
	and.w	#EXTEND_VSTRUCT,d1		* check for possible real mspc
	beq.s	not_xtnd			* and either skip or
	jsr 	_LVOGfxLookUp(a6)		* return viewextra in d0.l
	tst.l	d0			       
	beq.s	not_xtnd
        move.l  d0,a1
	move.l	ve_Monitor(a1),d0	
	beq.s	not_xtnd
        move.l  d0,a2 				* monitorspec pointer in a2
not_xtnd:
	move.l	(sp)+,a0			* restore viewport to a0
	move.l	d4,a1				* actiview in a1
	moveq.l	#0,d4				* use d4 for a2024 request 

	move.w	ms_total_rows(a2),d3
	btst.b	#MSB_REQUEST_A2024,ms_Flags+1(a2)	* request a2024?
	beq.s	localmax_found
	move.w	#$2C,d4
	bra.s	localmax_found
no_mspc:
	move.w	gb_MaxDisplayRow(a6),d3
localmax_found:
	subq.w	#1,d3				* localmax in d3

	repeat
		move.w	vp_DyOffset(a0),d1	* in case this changes
		add.w	d2,d1
		asr.w	d5,d1			* scale to account for lace
		tst.w	d4			* if d4 is NULL then use v_dy
		bne.s	fixed_voffset		* else use fixed offset
		add.w	v_DyOffset(a1),d1 	* in case this changes
fixed_voffset:  add.w	d4,d1		
		if d3<d1.w	* too many rows?
			move.w	d3,d1
		endif
		jsr _LVOVBeamPos(a6)			* returns in d0.l
	until d0>=d1.w
	movem.l	(sp)+,d2/d3/d4/d5/a2
tvprts: rts

	end
@


39.1
log
@Replace GBASE->default_monitor with GBASE->natural_monitor
@
text
@d3 1
a3 1
*	$Id: WaitBOVP.asm,v 39.0 91/08/21 17:28:14 chrisg Exp Locker: spence $
d75 5
d84 1
a84 1

@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: WaitBOVP.asm,v 37.1 91/02/12 16:02:30 chrisg Exp Locker: chrisg $
d8 3
a10 3
	include 'graphics/gfxbase.i'
	include 'graphics/view.i'
	include 'graphics/monitor.i'
d80 1
a80 1
	move.l	gb_default_monitor(a6),a2	* preliminary mspc in a2
@


37.1
log
@cleaned up autodoc
@
text
@d3 1
a3 1
*	$Id: WaitBOVP.asm,v 37.0 91/01/07 15:26:41 spence Exp Locker: chrisg $
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: WaitBOVP.asm,v 1.8 90/08/24 11:29:01 bart Exp Locker: spence $
d13 1
d16 1
a16 1
*                                                                   *
d25 2
d28 1
a28 1
*	Returns when vertical beam reaches bottom of this viewport
d45 1
a45 1
*	WaitTOF VBeamPos
@


1.8
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.7
log
@fixed waittovp thus fixed bug B6630
@
text
@d3 1
a3 1
*	$Header: /usr2/bart/v1.4/src/kickstart/working/graphics/a/RCS/WaitBOVP.asm,v 1.6 90/03/27 16:27:27 bart Exp Locker: bart $
@


1.6
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 1.5 89/09/05 10:53:20 kodiak Exp $
d63 2
a64 2
	beq.s 	tvprts
	movem.l	d2/d3/d4/a2,-(sp)
d66 2
a67 2
	move.l	a0,d3				* preserve viewport in d3
	move.w	d1,d4				* preserve actiview in d4
d69 8
a76 1
	move.l	d1,a0				* actiview in a0
d78 1
d80 4
a83 1
	and.w	#EXTEND_VSTRUCT,d1
d85 2
a86 2
	jsr 	_LVOGfxLookUp(a6)		* returns mspc in d0.l
	tst.l	d0
d88 1
a88 1
        move.l  d0,a2				* mon-spec in a2
d90 2
a91 2
	move.l	d3,a0				* preserves condition codes
	move.l	d4,a1				* preserves condition codes
a93 2
	move.l	a2,d0				* check for monitorspec
	beq.s	no_mspc				* may be unnecessary...
a103 6
*	btst.b	#V_LACE,v_Modes(a0)		* found a bug
	move.b	vp_Modes(a0),d1
	and.b	#V_LACE,d1
	if <>
		asr.w	#1,d2	* convert to non-interlaced
	endif
d105 1
a105 11
*		move.b	vp_ExtendedModes(a0),d1
*		and.b	#VPF_AGNUS,d1
*		if <>
*		    move.w	#$2C,d1 		* force for a2024
*		else
*		    move.w	v_DyOffset(a1),d1 	* in case this changes
*		endif
		move.w	d4,d1			
		bne.s	fixed_voffset
		add.w	v_DyOffset(a1),d1 		* in case this changes
fixed_voffset:  add.w	vp_DyOffset(a0),d1		* in case this changes
d107 5
d117 1
a117 1
	movem.l	(sp)+,d2/d3/d4/a2
@


1.5
log
@fix two asm lines:
    two address references changed from .w to .l
    one gb_ reference changed from (a0) to (a6)
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 1.4 89/07/24 13:08:41 bart Exp $
@


1.4
log
@use mspc for maxdisplayrow, a2024 view position
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 1.3 89/04/29 15:37:21 bart Exp $
d66 1
a66 1
	move.w	a0,d3				* preserve viewport in d3
d70 1
a70 1
	move.w	gb_default_monitor(a0),a2	* preliminary mspc in a2
@


1.3
log
@cm->Type checking
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 1.2 88/10/05 15:33:45 bart Exp $
d10 1
d50 1
d64 27
a90 2
	movem.l	d2/d3,-(sp)
	move.l	d1,a1				* actiview in a1
d92 3
a94 2
	subq.w	#1,d3
	move.w	d0,d2
d102 11
a112 8
		move.b	vp_ExtendedModes(a0),d1
		and.b	#VPF_AGNUS,d1
		if <>
		    move.w	#$2C,d1 		* force for a2024
		else
		    move.w	v_DyOffset(a1),d1 	* in case this changes
		endif
		add.w	vp_DyOffset(a0),d1		* in case this changes
d117 1
a117 1
		jsr _LVOVBeamPos(a6)	* returns in d0.l
d119 1
a119 1
	movem.l	(sp)+,d2/d3
@


1.2
log
@force view dy for a2024
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 1.1 88/05/01 15:38:08 dale Exp $
d60 2
d63 1
a63 1
	move.l	gb_ActiView(a6),a1		* get current actiview
d89 1
a89 1
	rts
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: WaitBOVP.asm,v 33.1 87/03/12 17:59:06 dale Exp $
d65 3
a67 1
	btst.b	#V_LACE,v_Modes(a0)
d72 8
a79 2
		move.w	v_DyOffset(a1),d1	* in case this changes
		add.w	vp_DyOffset(a0),d1	* in case this changes
@
