head     37.0;
branch   ;
access   ;
symbols  rel39_24:37.0 rel39_18:37.0 rel39_97:37.0 rel39_90:37.0 rel39_89:37.0 rel39_82:37.0 rel39_76:37.0 rel39_71:37.0 rel39_65:37.0 rel39_64:37.0 rel39_61:37.0 rel39_60:37.0 rel39_55:37.0 rel39_52:37.0 rel39_47:37.0 rel39_39:37.0 rel39_38:37.0 rel39_37:37.0 rel39_35:37.0 rel39_34:37.0;
locks    ; strict;
comment  @@;


37.0
date     91.01.07.15.26.25;  author spence;  state Exp;
branches ;
next     1.2;

1.2
date     90.08.24.11.28.41;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.05;  author dale;  state Exp;
branches ;
next     ;


desc
@@


37.0
log
@initial switchover from V36
@
text
@*******************************************************************************
*
*	$Id: SimpleSemaphore.asm,v 1.2 90/08/24 11:28:41 bart Exp Locker: spence $
*
*******************************************************************************

	section	graphics
	include 'exec/types.i'
	include 'graphics/semaphore.i'
	include 'exec/execbase.i'

	xref	_LVOForbid
	xref	_LVOPermit

EXECSEMAPHORES	equ 1

    xdef    _ObtainGfxSemaphore
    xdef    _obtaingfxsemaphore
	xref	_cobtaingfxsemaphore

_obtaingfxsemaphore:
	move.l	4(sp),a0
_ObtainGfxSemaphore:
	move.l	a6,-(sp)
	move.l	4,a6
*	jsr	_LVOForbid(a6)
	addq.b	#1,TDNestCnt(a6)		* do inline FORBID
	addq.w	#1,gs_QCount(a0)
	if =
		move.l	ThisTask(a6),gs_Owner(a0)
	else
		movem.l	d0/d1/a1,-(sp)
		move.l	ThisTask(a6),-(sp)		* FindTask(0)
		move.l	a0,-(sp)
		jsr	_cobtaingfxsemaphore
		move.l	(sp)+,a0				* get ss pointer back
		addq.l	#4,sp
		movem.l	(sp)+,d0/d1/a1
	endif
	addq.w	#1,gs_NestCount(a0)
	movem.l	d0/d1/a1,-(sp)
	jsr	_LVOPermit(a6)
	movem.l	(sp)+,d0/d1/a1
	move.l	(sp)+,a6
	rts

	xdef	_ReleaseGfxSemaphore
	xref	_creleasegfxsemaphore
	xdef	_releasegfxsemaphore
_releasegfxsemaphore:
	move.l	4(sp),a0
_ReleaseGfxSemaphore:
	subq.w	#1,gs_NestCount(a0)
	if =
		move.l	a6,-(sp)
		move.l	4,a6
		addq.b	#1,TDNestCnt(a6)		* FORBID
		subq.w	#1,gs_QCount(a0)
		if >=
			movem.l	d0/d1/a1,-(sp)
			move.l	a0,-(sp)
			jsr	_creleasegfxsemaphore
			move.l	(sp)+,a0
			movem.l	(sp)+,d0/d1/a1
		else
			clr.l	gs_Owner(a0)
		endif
*		this needs to be fixed so it does not need to save all registers
		movem.l	d0/d1/a1,-(sp)
		jsr	_LVOPermit(a6)
		movem.l	(sp)+,d0/d1/a1
		move.l	(sp)+,a6
	else
		subq.w	#1,gs_QCount(a0)
	endif
	rts

	xdef	_MaybeObtainGfxSemaphore
	xref	_maybeobtaingfxsemaphore
_MaybeObtainGfxSemaphore:
	move.l	a0,-(sp)
	jsr	_maybeobtaingfxsemaphore
	addq.l	#4,sp
	rts

	ifnd	EXECSEMAPHORES
	xdef	_ObtainGfxSemaphoreList
	xref	_obtaingfxsemaphorelist
_ObtainGfxSemaphoreList:
	move.l	a0,-(sp)
	jsr		_obtaingfxsemaphorelist
	addq.l	#4,sp
	rts
	endc

	end
@


1.2
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: SimpleSemaphore.asm,v 33.0 86/05/17 15:11:02 bart Exp $
@
