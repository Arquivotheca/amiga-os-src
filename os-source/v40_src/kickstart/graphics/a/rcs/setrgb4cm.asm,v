head     39.8;
branch   ;
access   ;
symbols  rel39_24:39.8 rel39_18:39.8 rel39_97:39.7 rel39_90:39.7 rel39_89:39.7 rel39_82:39.5 rel39_76:39.4 rel39_71:39.4 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.2 rel39_52:39.2 rel39_47:39.2 rel39_39:39.2 rel39_38:39.2 rel39_37:39.1 rel39_35:39.1 rel39_34:39.1 V37_30:37.1 V37_29:37.1 V37_28:37.1 V37_27:37.1 V37_25:37.1 V37_24:37.1 V37_23:37.1 V37_22:37.1 V37_21:37.1 V37_20:37.1 V37_19:37.1 V37_18:37.1 V37_17:37.1 V37_15:37.1 V37_14:37.1 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.7 V36_208:1.7 V36_207:1.6 V36_205:1.6 V36_203:1.6 V36_202:1.6 V36_201:1.5 V36_200:1.6 V36_199:1.5 V36_198:1.5 V36_196:1.4 V36_195:1.4 V36_194:1.5 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.8
date     93.03.19.14.50.04;  author chrisg;  state Exp;
branches ;
next     39.7;

39.7
date     92.09.03.15.37.09;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     92.08.20.14.53.26;  author chrisg;  state Exp;
branches ;
next     39.5;

39.5
date     92.08.17.13.41.57;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.06.16.16.21.23;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.05.05.11.45.47;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.03.02.14.50.27;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     91.11.18.11.43.42;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.49;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.16.11.13.14;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.53.52;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.19;  author spence;  state Exp;
branches ;
next     1.7;

1.7
date     90.12.17.17.27.50;  author spence;  state Exp;
branches ;
next     1.6;

1.6
date     90.12.07.13.56.19;  author spence;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.09.17.15.50;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.28.34;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.17.25.52;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.04.29.15.37.13;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.38.02;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.8
log
@fix range check arrgh!!!
@
text
@*******************************************************************************
*
*	$Id: setrgb4cm.asm,v 39.7 92/09/03 15:37:09 spence Exp Locker: chrisg $
*
*******************************************************************************

	section graphics
    xdef    _SetRGB4CM,_SetRGB32CM

******* graphics.library/SetRGB4CM ********************************************
*
*   NAME
*       SetRGB4CM -- Set one color register for this ColorMap.
*
*   SYNOPSIS
*       SetRGB4CM(  cm,  n,   r,    g,    b)
*                   a0  d0  d1:4  d2:4  d3:4
*
*       void SetRGB4CM( struct ColorMap *, SHORT, UBYTE, UBYTE, UBYTE );
*
*   INPUTS
*	cm = colormap
*       n = the number of the color register to set. Ranges from 0 to 31
*	    on current Amiga displays.
*       r = red level (0-15)
*       g = green level (0-15)
*       b = blue level (0-15)
*
*   RESULT
*	Store the (r,g,b) triplet at index n of the ColorMap structure.
*       This function can be used to set up a ColorMap before before
*	linking it into a viewport.
*
*   BUGS
*
*   SEE ALSO
*       GetColorMap() GetRGB4() SetRGB4() graphics/view.h
******************************************************************************

		include 'exec/types.i'
		include 'graphics/view.i'

_SetRGB4CM:
	movem.l	d2/d3/d7,-(a7)
	cmp	#0,a0
	beq.s	no_low
	cmp.w	cm_Count(a0),d0
	bhs.s	no_low
	lsl.l	#8,d1
	lsl.l	#4,d2
	or.l	d2,d1
	or.l	d3,d1
	add.l	d0,d0
	move.l	cm_ColorTable(a0),a1
	move.w	0(a1,d0.w),d2
	and.w	#$8000,d2
	or.w	d1,d2
	move.w	d2,0(a1,d0.w)
	tst.b	cm_Type(a0)
	beq.s	no_low
	tst.l	cm_LowColorBits(a0)
	beq.s	no_low
	move.l	cm_LowColorBits(a0),a1
	move.w	d1,0(a1,d0.w)
no_low:
	movem.l	(a7)+,d2/d3/d7
	rts


******* graphics.library/SetRGB32CM ********************************************
*
*   NAME
*       SetRGB32CM -- Set one color register for this ColorMap. (V39)
*
*   SYNOPSIS
*       SetRGB32CM(  cm,  n,   r,    g,    b)
*                    a0  d0   d1    d2    d3
*
*       void SetRGB4CM( struct ColorMap *, ULONG, ULONG, ULONG , ULONG);
*
*   INPUTS
*	cm = colormap
*       n = the number of the color register to set. Must not exceed the number of colors
*	    allocated for the colormap.
*       r = red level (32 bit unsigned left justified fraction)
*       g = green level
*       b = blue level
*
*   RESULT
*	Store the (r,g,b) triplet at index n of the ColorMap structure.
*       This function can be used to set up a ColorMap before before
*	linking it into a viewport.
*
*   BUGS
*
*   SEE ALSO
*       GetColorMap() GetRGB32() SetRGB32() SetRGB4CM() graphics/view.h
******************************************************************************
_SetRGB32CM:
	cmp.w	cm_Count(a0),d0
	bge.s	skip
	move.l	d4,-(a7)
	move.l	cm_ColorTable(a0),a1
	tst.b	cm_Type(a0)
	move.l	cm_LowColorBits(a0),a0	; doesn't set condition bits
	bne.s	new_style
	move.l	a1,a0
new_style:
; first, get high word
	add.w	d0,d0			; cvt to index
	add.w	d0,a0
	add.w	d0,a1

	swap	d1
	swap	d2
	swap	d3

	move.w	d1,d0	
	lsr.w	#4,d0
	and.w	#$0f00,d0

	move.w	d2,d4
	lsr.w	#8,d4
	and.w	#$00f0,d4
	or.w	d4,d0

	move.w	d3,d4
	rol.w	#4,d4
	and.w	#$000f,d4
	or.w	d4,d0
	move.w	(a1),d4			; fetch old data
	and.w	#$8000,d4
	or.w	d4,d0
	move.w	d0,(a1)			; set high

	move.w	d1,d0
	and.w	#$0f00,d0
	move.w	d2,d4
	lsr.w	#4,d4
	and.w	#$00f0,d4
	or.w	d4,d0
	move.w	d3,d4
	and.w	#$000f,d4
	or.w	d4,d0
	move.w	d0,(a0)
	move.l	(a7)+,d4
	swap	d2
	swap	d3
skip:
	rts



	end
@


39.7
log
@Autodoc spelling corrections
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.6 92/08/20 14:53:26 chrisg Exp Locker: spence $
d101 1
a101 1
	bgt.s	skip
@


39.6
log
@preserve genlock bit.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.5 92/08/17 13:41:57 chrisg Exp Locker: chrisg $
d24 1
a24 1
*	    on current amiga displays.
@


39.5
log
@was screwing low nibble of blue.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.4 92/06/16 16:21:23 chrisg Exp Locker: chrisg $
d130 3
@


39.4
log
@ added range check to setrgb4cm.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.3 92/05/05 11:45:47 chrisg Exp Locker: chrisg $
a139 1
	rol.w	#4,d4
@


39.3
log
@fixed to not trash d2/d3.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.2 92/03/02 14:50:27 chrisg Exp Locker: chrisg $
d47 2
@


39.2
log
@  added setrgb32cm
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.1 91/11/18 11:43:42 chrisg Exp Locker: chrisg $
d143 2
@


39.1
log
@ recoded for v39 stuff.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 39.0 91/08/21 17:27:49 chrisg Exp Locker: chrisg $
d8 2
a9 1
    xdef    _SetRGB4CM
d66 82
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 37.2 91/05/16 11:13:14 spence Exp Locker: chrisg $
a8 1
    xref    _setrgb4cm
d42 14
a55 27
	ifeq	1

*
* GetVPColours - finds the number of colours in a ViewPort.
*
* This was added to fix bug B10462, and is called from
* SetRGB4CM() and LoadRGB4().
*
* Takes		-	 a0 -> ColorMap, a1 -> ViewPort or NULL
*
* Returns	-	d1:32 = number of colours in the viewport
*				(or 0 if any error, or using a 1.3 ColorMap)
*
* spence Nov  9 1990
*

	xdef	GetVPColours
	xdef	GetVPColors

GetVPColours:
GetVPColors:			; for all you Americans who can't spell :-)
	move.l	a0,d1
	beq.s	GetVPColours..
	moveq	#0,d1
	move.l	d3,-(sp)
	move.l	a1,d3
	bne.s	GotVPAlready
d57 7
a63 28
	beq.s	GetVPColours.
	move.l	cm_vp(a0),d3
	beq.s	GetVPColours.
	move.l	d3,a1
GotVPAlready:
	move.l	vp_RasInfo(a1),d3
	beq.s	GetVPColours.
	move.l	d3,a1
	move.l	ri_BitMap(a1),d3
	beq.s	GetVPColours.
	move.l	d3,a1
	move.b	bm_Depth(a1),d3
	moveq	#1,d1
	asl.w	d3,d1
GetVPColours.:
	move.l	(sp)+,d3
GetVPColours..:
	rts

	xdef	_getvpcolours
	xdef	_getvpcolors

_getvpcolors:
_getvpcolours:
*	move.l	4(sp),a0
	movem.l	4(sp),a0/a1
	bsr.s	GetVPColours
	move.l	d1,d0
a64 93
	endc


_SetRGB4CM:
*               current routine calls a C subroutine to do the work
	if #0<>a0	* is there a real colormap there?
		if cm_Count(a0)<=d0	* index beyond end of table?
bad_boy:
			moveq	#-1,d0
			rts
		else
			move.w	d0,-(sp)
			move.l	cm_ColorTable(a0),a1
			add.w	d0,d0			* convert to word pointer
			add.w	d0,a1			* pointer to actual word
			and.w	#$F,d1			* get 4 bits of red

			asl.w	#4,d1			* make room for green
			move.w	d2,d0			* get green
			and.w	#$F,d0
			or.w	d0,d1
			
			asl.w	#4,d1			* make room for blue
			move.w	d3,d0			* get blue
			and.w	#$F,d0
			or.w	d0,d1			* now have 0000|red|green|blue

			move.w	d1,(a1)			* stash in table
			move.w	(sp)+,d0
		endif

* 	check if the index number passed to us was in fact legitimate for this
* 	viewport.

		if #16>d0.w

			tst.b	cm_Type(a0)
			beq.s	alls_ok		; can't find the viewport from this cmap
			moveq	#0,d1
			movem.l	d3/d4,-(sp)
			move.l	cm_vp(a0),d3
			beq.s	GetVPColours.1
			move.l	d3,a1
			move.w	vp_Modes(a1),d4
			move.l	vp_RasInfo(a1),d3
			beq.s	GetVPColours.
			move.l	d3,a1
			move.l	d3,a0		; for next rasinfo if DUALPF
			move.l	ri_BitMap(a1),d3
			beq.s	GetVPColours.
			move.l	d3,a1
			move.b	bm_Depth(a1),d3
			moveq	#1,d1
			asl.w	d3,d1
GetVPColours.:
			and.w	#V_DUALPF,d4
			bne.s	check_dpf

GetVPColours.1:
			movem.l	(sp)+,d3/d4

			tst.w	d1
			beq.s	alls_ok		; have to assume the colour's OK in an error or KS1.3
			cmp.w	d1,d0
			bge.s	bad_boy
		endif		
	endif
alls_ok:
	clr.l	d0
    rts

check_dpf:
* DualPlayfield mode - this is a special case for the following reasons:
* 1) Second playfield starts with colour number 8.
* 2) The max colour number = 8 + (number of colours in second playfield)
* 3) There may be gaps in the colour range if the 1st playfield has <3 bitplanes.

			cmp.w	#8,d0
			blt.s	GetVPColours.1	; compare against the 1st playfield's limit
			move.l	ri_Next(a0),d3
			beq.s	GetVPColours.2	; this should never happen!
			move.l	d3,a1
			move.l	ri_BitMap(a1),d3
			beq.s	GetVPColours.2	; nor should this.
			move.l	d3,a1
			move.b	bm_Depth(a1),d3
			moveq	#1,d1
			asl.w	d3,d1
			addq.w	#8,d1
			bra.s	GetVPColours.1
GetVPColours.2:
			moveq	#16,d1		; will always fail the ultimate test
			bra.s 	GetVPColours.1
@


37.2
log
@check if index number was legitimate for DUALPF viewport.
@
text
@d3 1
a3 1
*	$Id: setrgb4cm.asm,v 37.1 91/02/12 15:53:52 chrisg Exp Locker: spence $
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 37.0 91/01/07 15:26:19 spence Exp Locker: chrisg $
d139 1
a139 1
			move.l	d3,-(sp)
d141 1
a141 1
			beq.s	GetVPColours.
d143 1
d147 1
d155 5
a159 1
			move.l	(sp)+,d3
d171 22
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 1.7 90/12/17 17:27:50 spence Exp Locker: spence $
d19 1
a19 3
*       struct ColorMap *cm;
*       SHORT n;
*       UBYTE r,g,b;
d23 5
a27 4
*       n = the color number (range from 0 to 31)
*       r = red level
*       g = green level
*       b = blue level
d37 1
a37 1
*       GetColorMap GetRGB4 SetRGB4 graphics/view.h
@


1.7
log
@GetVPColours now part of SetRGB4CM()
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 1.6 90/12/07 13:56:19 spence Exp Locker: spence $
@


1.6
log
@fixed typo
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 1.5 90/11/09 17:15:50 spence Exp Locker: spence $
d44 2
d52 1
a52 1
* Takes		-	 a0 -> ColorMap
a56 2
* Corrupts	-	a1:32
*
d69 2
d76 1
d96 2
a97 1
	move.l	4(sp),a0
d101 1
d136 20
a155 1
			bsr.s	GetVPColours
@


1.5
log
@fixes bug B10462 - added GetVPColours() to return number of colours in a
viewport.
@
text
@d3 1
a3 1
*	$Id: SetRGB4CM.asm,v 1.4 90/08/24 11:28:34 bart Exp Locker: spence $
d66 1
a66 1
	beq.s	GetVPColours.
d85 1
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
d44 54
d102 1
d106 1
d123 1
d125 11
d137 1
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: SetRGB4CM.asm,v 1.2 89/04/29 15:37:13 bart Exp $
@


1.2
log
@cm->Type checking
@
text
@d3 1
a3 1
*	$Header: SetRGB4CM.asm,v 1.1 88/05/01 15:38:02 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: SetRGB4CM.asm,v 33.0 86/05/17 15:10:44 bart Exp $
@
