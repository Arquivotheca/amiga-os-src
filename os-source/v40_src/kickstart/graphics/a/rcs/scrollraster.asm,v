head     39.5;
branch   ;
access   ;
symbols  rel39_24:39.5 rel39_18:39.5 rel39_97:39.5 rel39_90:39.5 rel39_89:39.4 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.3 rel39_52:39.3 rel39_47:39.3 rel39_39:39.1 rel39_38:39.1 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.5
date     92.09.24.13.35.30;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.09.03.15.36.44;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.24.15.23.47;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.03.20.08.46.28;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.03.03.13.30.08;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.27.38;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.17.48.36;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.12.15.36.23;  author chrisg;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.26.07;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.28.25;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.16.25.23;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     89.05.02.13.14.40;  author bart;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.37.59;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.5
log
@autodoc
@
text
@*******************************************************************************
*
*   $Id: scrollraster.asm,v 39.4 92/09/03 15:36:44 spence Exp Locker: chrisg $
*
*******************************************************************************

******* graphics.library/ScrollRaster ***************************************
*
*   NAME
*   ScrollRaster -- Push bits in rectangle in raster around by
*                   dx,dy towards 0,0 inside rectangle.
*   SYNOPSIS
*   ScrollRaster(rp, dx, dy, xmin, ymin, xmax, ymax)
*                A1  D0  D1  D2    D3    D4    D5
*
*   void ScrollRaster
*        (struct RastPort *, WORD, WORD, WORD, WORD, WORD, WORD);
*
*   FUNCTION
*   Move the bits in the raster by (dx,dy) towards (0,0)
*   The space vacated is RectFilled with BGPen.
*   Limit the scroll operation to the rectangle defined
*   by (xmin,ymin)(xmax,ymax). Bits outside will not be
*   affected. If xmax,ymax is outside the rastport then use
*   the lower right corner of the rastport.
*   If you are dealing with a SimpleRefresh layered RastPort you
*   should check rp->Layer->Flags & LAYERREFRESH to see if
*   there is any damage in the damage list.  If there is you should
*   call the appropriate BeginRefresh(Intuition) or BeginUpdate(graphics)
*   routine sequence.
*
*   INPUTS
*   rp - pointer to a RastPort structure
*   dx,dy are integers that may be positive, zero, or negative
*   xmin,ymin - upper left of bounding rectangle
*   xmax,ymax - lower right of bounding rectangle
*
*   EXAMPLE
*   ScrollRaster(rp,0,1,minx,miny,maxx,maxy) /* shift raster up by one row */
*   ScrollRaster(rp,-1,-1,minx,miny,maxx,maxy)
*		  /* shift raster down and to the right by 1 pixel
*
*   BUGS
*   In 1.2/V1.3 if you ScrollRaster a SUPERBITMAP exactly left or 
*   right, and there is no TmpRas attached to the RastPort, the system
*   will allocate one for you, but will never free it or record its 
*   location. This bug has been fixed for V36.  The workaround for
*   1.2/1.3 is to attach a valid TmpRas of size at least 
*   MAXBYTESPERROW to the RastPort before the call.
*
*   Beginning with V36 ScrollRaster adds the shifted areas into the 
*   damage list for SIMPLE_REFRESH windows. Due to unacceptable 
*   system overhead, the decision was made NOT to propagate this 
*   shifted area damage for SMART_REFRESH windows.
*
*   SEE ALSO
*   ScrollRasterBF() graphics/rastport.h
*
*********************************************************************

******* graphics.library/ScrollRasterBF *************************************
*
*   NAME
*   ScrollRasterBF -- Push bits in rectangle in raster around by
*                   dx,dy towards 0,0 inside rectangle. Newly empty areas
*   		will be filled via EraseRect(). (V39)
*
*   SYNOPSIS
*   ScrollRasterBF(rp, dx, dy, xmin, ymin, xmax, ymax)
*                A1  D0  D1  D2    D3    D4    D5
*
*   void ScrollRasterBF
*        (struct RastPort *, WORD, WORD, WORD, WORD, WORD, WORD);
*
*   FUNCTION
*   Move the bits in the raster by (dx,dy) towards (0,0)
*   The space vacated is filled by calling EraseRect().
*   Limit the scroll operation to the rectangle defined
*   by (xmin,ymin)(xmax,ymax). Bits outside will not be
*   affected. If xmax,ymax is outside the rastport then use
*   the lower right corner of the rastport.
*   If you are dealing with a SimpleRefresh layered RastPort you
*   should check rp->Layer->Flags & LAYERREFRESH to see if
*   there is any damage in the damage list.  If there is you should
*   call the appropriate BeginRefresh(Intuition) or BeginUpdate(graphics)
*   routine sequence.
*
*   INPUTS
*   rp - pointer to a RastPort structure
*   dx,dy are integers that may be positive, zero, or negative
*   xmin,ymin - upper left of bounding rectangle
*   xmax,ymax - lower right of bounding rectangle
*
*   NOTES
*
*   This call is exactly the same as ScrollRaster, except that it calls
*   EraseRect() instead of RectFill() when clearing the newly exposed
*   area. This allows use of a custom layer backfill hook.
*
*   BUGS
*
*   SEE ALSO
*   ScrollRaster() EraseRect() intuition.library/ScrollWindowRaster() 
*   graphics/rastport.h
*
*********************************************************************


	end
@


39.4
log
@Autodoc spelling corrections
@
text
@d3 1
a3 1
*   $Id: scrollraster.asm,v 39.3 92/03/24 15:23:47 chrisg Exp Locker: spence $
d39 3
a41 2
*   ScrollRaster(rp,0,1)    /* shift raster up by one row */
*   ScrollRaster(rp,-1,-1)  /* shift raster down and to the right by 1 pixel
d47 1
a47 1
*   location. This bug has been fixed for V1.4.  The workaround for
d51 1
a51 1
*   Beginning with V1.4 ScrollRaster adds the shifted areas into the 
a93 4
*   EXAMPLE
*   ScrollRaster(rp,0,1)    /* shift raster up by one row */
*   ScrollRaster(rp,-1,-1)  /* shift raster down and to the right by 1 pixel
*
d99 1
@


39.3
log
@autodoc.
@
text
@d3 1
a3 1
*   $Id: scrollraster.asm,v 39.2 92/03/20 08:46:28 chrisg Exp Locker: chrisg $
d34 1
a34 1
*   dx,dy are integers that may be postive, zero, or negative
d50 1
a50 1
*   Begining with V1.4 ScrollRaster adds the shifted areas into the 
d89 1
a89 1
*   dx,dy are integers that may be postive, zero, or negative
@


39.2
log
@ autodoc for scrollrasterBF.
@
text
@d3 1
a3 1
*	$Id: scrollraster.asm,v 39.1 92/03/03 13:30:08 chrisg Exp Locker: chrisg $
d10 2
a11 2
*	ScrollRaster -- Push bits in rectangle in raster around by
*	                dx,dy towards 0,0 inside rectangle.
d13 2
a14 2
*	ScrollRaster(rp, dx, dy, xmin, ymin, xmax, ymax)
*	             A1  D0  D1  D2    D3    D4    D5
d16 2
a17 2
*	void ScrollRaster
*	     (struct RastPort *, WORD, WORD, WORD, WORD, WORD, WORD);
d20 11
a30 11
*	Move the bits in the raster by (dx,dy) towards (0,0)
*	The space vacated is RectFilled with BGPen.
*	Limit the scroll operation to the rectangle defined
*	by (xmin,ymin)(xmax,ymax). Bits outside will not be
*	affected. If xmax,ymax is outside the rastport then use
*	the lower right corner of the rastport.
*	If you are dealing with a SimpleRefresh layered RastPort you
*	should check rp->Layer->Flags & LAYERREFRESH to see if
*	there is any damage in the damage list.  If there is you should
*	call the appropriate BeginRefresh(Intuition) or BeginUpdate(graphics)
*	routine sequence.
d33 4
a36 4
*	rp - pointer to a RastPort structure
*	dx,dy are integers that may be postive, zero, or negative
*	xmin,ymin - upper left of bounding rectangle
*	xmax,ymax - lower right of bounding rectangle
d39 2
a40 2
*	ScrollRaster(rp,0,1)    /* shift raster up by one row */
*	ScrollRaster(rp,-1,-1)  /* shift raster down and to the right by 1 pixel
d43 11
a53 11
*	In 1.2/V1.3 if you ScrollRaster a SUPERBITMAP exactly left or 
*	right, and there is no TmpRas attached to the RastPort, the system
*	will allocate one for you, but will never free it or record its 
*	location. This bug has been fixed for V1.4.  The workaround for
*	1.2/1.3 is to attach a valid TmpRas of size at least 
*	MAXBYTESPERROW to the RastPort before the call.
*
*	Begining with V1.4 ScrollRaster adds the shifted areas into the 
*	damage list for SIMPLE_REFRESH windows. Due to unacceptable 
*	system overhead, the decision was made NOT to propagate this 
*	shifted area damage for SMART_REFRESH windows.
d56 1
a56 1
*	ScrollRasterBF() graphics/rastport.h
d63 3
a65 3
*	ScrollRasterBF -- Push bits in rectangle in raster around by
*	                dx,dy towards 0,0 inside rectangle. Newly empty areas
*			will be filled via EraseRect(). (V39)
d68 2
a69 2
*	ScrollRasterBF(rp, dx, dy, xmin, ymin, xmax, ymax)
*	             A1  D0  D1  D2    D3    D4    D5
d71 2
a72 2
*	void ScrollRasterBF
*	     (struct RastPort *, WORD, WORD, WORD, WORD, WORD, WORD);
d75 11
a85 11
*	Move the bits in the raster by (dx,dy) towards (0,0)
*	The space vacated is filled by calling EraseRect().
*	Limit the scroll operation to the rectangle defined
*	by (xmin,ymin)(xmax,ymax). Bits outside will not be
*	affected. If xmax,ymax is outside the rastport then use
*	the lower right corner of the rastport.
*	If you are dealing with a SimpleRefresh layered RastPort you
*	should check rp->Layer->Flags & LAYERREFRESH to see if
*	there is any damage in the damage list.  If there is you should
*	call the appropriate BeginRefresh(Intuition) or BeginUpdate(graphics)
*	routine sequence.
d88 4
a91 4
*	rp - pointer to a RastPort structure
*	dx,dy are integers that may be postive, zero, or negative
*	xmin,ymin - upper left of bounding rectangle
*	xmax,ymax - lower right of bounding rectangle
d94 2
a95 2
*	ScrollRaster(rp,0,1)    /* shift raster up by one row */
*	ScrollRaster(rp,-1,-1)  /* shift raster down and to the right by 1 pixel
d99 3
a101 3
*	This call is exactly the same as ScrollRaster, except that it calls
*	EraseRect() instead of RectFill() when clearing the newly exposed
*	area. This allows use of a custom layer backfill hook.
d105 2
a106 1
*	ScrollRaster() ScrollRasterBF() EraseRect() graphics/rastport.h
@


39.1
log
@killed stub.
@
text
@d3 1
a3 1
*	$Id: scrollraster.asm,v 39.0 91/08/21 17:27:38 chrisg Exp Locker: chrisg $
a6 1
	section	graphics
d27 1
a27 1
*	should check rp->Layer->Flags & LAYER_REFRESH to see if
d56 1
a56 1
*	graphics/rastport.h
d59 50
a108 16
	ifne	0
_ScrollRaster:
	movem.l	d5/d4/d3/d2/d1/d0,-(sp)
*	move.l  d5,-(sp)    * maxy
*	move.l  d4,-(sp)    * maxx
*	move.l  d3,-(sp)    * miny
*	move.l  d2,-(sp)    * minx
*	move.l  d1,-(sp)    * dy
*	move.l  d0,-(sp)    * dx
	move.l  a1,-(sp)    * RastPort
    jsr		_scrollraster
    lea     28(sp),sp
    rts
    xdef    _ScrollRaster
    xref    _scrollraster
	endc
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: ScrollRaster.asm,v 37.2 91/02/12 17:48:36 spence Exp Locker: chrisg $
a7 2
    xdef    _ScrollRaster
    xref    _scrollraster
d60 1
d73 3
@


37.2
log
@autodocs
@
text
@d3 1
a3 1
*	$Id: ScrollRaster.asm,v 37.1 91/02/12 15:36:23 chrisg Exp Locker: spence $
@


37.1
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: ScrollRaster.asm,v 37.0 91/01/07 15:26:07 spence Exp Locker: chrisg $
d12 1
a12 1
*    NAME
d14 4
a17 4
*			dx,dy towards 0,0 inside rectangle.
*    SYNOPSIS
*	ScrollRaster( rp, dx, dy, xmin, ymin, xmax, ymax)
*		      a1  d0  d1   d2    d3    d4    d5
d20 1
a20 1
*			( struct RastPort *, WORD, WORD, WORD, WORD, WORD, WORD );
d22 2
a23 2
*    FUNCTION
*       Move the bits in the raster by (dx,dy) towards (0,0)
d35 3
a37 3
*    INPUTS
*       rp - pointer to a RastPort structure
*       dx,dy are integers that may be postive, zero, or negative
d41 3
a43 3
*    EXAMPLE
*       ScrollRaster(rp,0,1)    /* shift raster up by one row */
*       ScrollRaster(rp,-1,-1)  /* shift raster down and to the right by 1 pixel
d45 1
a45 1
*    BUGS
d52 1
a52 1
*	
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: ScrollRaster.asm,v 1.4 90/08/24 11:28:25 bart Exp Locker: spence $
d12 1
a12 1
*NAME
d15 1
a15 1
*SYNOPSIS
d19 2
a20 4
*	struct RastPort *rp;
*	SHORT dx,dy;
*	SHORT xmin,ymin;
*	SHORT xmax,ymax;
d22 1
a22 1
*FUNCTION
d35 1
a35 1
*INPUTS
d41 1
a41 1
*EXAMPLE
d45 1
a45 1
*BUGS
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: ScrollRaster.asm,v 1.2 89/05/02 13:14:40 bart Exp $
@


1.2
log
@doc
@
text
@d3 1
a3 1
*	$Header: ScrollRaster.asm,v 1.1 88/05/01 15:37:59 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: ScrollRaster.asm,v 33.1 86/11/19 23:13:32 dale Exp $
d48 11
a58 4
* In 1.2 if you ScrollRaster a superbitmap exactly left or right without
* having attached a valid TmpRas of size atleast MAXBYTESPERROW then
* this function will eat a chunk of memory of size MAXBYTEPERROW
* and not give it back.
@
