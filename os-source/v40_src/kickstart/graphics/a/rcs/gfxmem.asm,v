head     39.4;
branch   ;
access   ;
symbols  rel39_24:39.4 rel39_18:39.4 rel39_97:39.4 rel39_90:39.4 rel39_89:39.4 rel39_82:39.3 rel39_76:39.3 rel39_71:39.3 rel39_65:39.3 rel39_64:39.3 rel39_61:39.3 rel39_60:39.3 rel39_55:39.3 rel39_52:39.3 rel39_47:39.3 rel39_39:39.3 rel39_38:39.3 rel39_37:39.3 rel39_35:39.3 rel39_34:39.3 V37_30:37.4 V37_29:37.4 V37_28:37.4 V37_27:37.4 V37_25:37.4 V37_24:37.4 V37_23:37.4 V37_22:37.4 V37_21:37.4 V37_20:37.4 V37_19:37.4 V37_18:37.4 V37_17:37.4 V37_15:37.4 V37_14:37.4 V37_13:37.2 V37_12:37.2 V37_11:37.2 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:1.4 V36_208:1.4 V36_207:1.4 V36_205:1.4 V36_203:1.4 V36_202:1.4 V36_201:1.4 V36_200:1.4 V36_199:1.4 V36_198:1.4 V36_196:1.4 V36_195:1.4 V36_194:1.4 V36_193:1.4 V36_192:1.4 V36_191:1.4 V36_190:1.4 V36_189:1.4 V36_188:1.4 V36_187:1.4 V36_186:1.4 V36_185:1.4 V36_184:1.4 V36_183:1.4 V36_182:1.4 V36_181:1.4 V36_180:1.4;
locks    ; strict;
comment  @@;


39.4
date     92.09.03.15.36.12;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.07.16.39.48;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.07.13.38.54;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     91.10.30.19.11.57;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.25.48;  author chrisg;  state Exp;
branches ;
next     37.4;

37.4
date     91.02.12.17.48.53;  author spence;  state Exp;
branches ;
next     37.3;

37.3
date     91.02.12.14.39.42;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.04.19.30.26;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.01.12.24.52;  author bart;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.25.03;  author spence;  state Exp;
branches ;
next     1.4;

1.4
date     90.08.24.11.27.18;  author bart;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.27.17.29.09;  author bart;  state Exp;
branches ;
next     1.2;

1.2
date     88.07.14.13.30.30;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.01.15.36.24;  author dale;  state Exp;
branches ;
next     ;


desc
@@


39.4
log
@Autodoc spelling corrections
@
text
@*******************************************************************************
*
*	$Id: gfxmem.asm,v 39.3 92/01/07 16:39:48 chrisg Exp Locker: spence $
*
*******************************************************************************


	include 'exec/types.i'

******* graphics.library/GfxNew **********************************************
*
*   NAME
*       GfxNew -- allocate a graphics extended data structure (V36)
*
*   SYNOPSIS
* 	result = GfxNew( node_type );    
*	d0		 d0
*
*	struct ExtendedNode *GfxNew( ULONG);
*
*   FUNCTION
*	Allocate a special graphics extended data structure (each of which
*	begins with an ExtendedNode structure).  The type of structure to
*	be allocated is specified by the node_type identifier.
*
*   INPUTS
*	node_type = which type of graphics extended data structure to allocate. 
*		    (see gfxnodes.h for identifier definitions.)
*
*   RESULT
*	result = a pointer to the allocated graphics node or NULL if the 
*		 allocation failed.
*
*   BUGS
*
*   SEE ALSO
*	graphics/gfxnodes.h GfxFree() GfxAssociate() GfxLookUp()
*
******************************************************************************

******* graphics.library/GfxFree *********************************************
*
*   NAME
*       GfxFree -- free a graphics extended data structure (V36)
*
*   SYNOPSIS
*       GfxFree( node );
*       	      a0
*	
*	void GfxFree(struct ExtendedNode *);
*
*   FUNCTION
*	Free a special graphics extended data structure (each of which
*	begins with an ExtendedNode structure).
*
*   INPUTS
*	node = pointer to a graphics extended data structure obtained via
*	       GfxNew().
*
*   RESULT
*	the node is deallocated from memory. graphics will disassociate
*	this special graphics extended node from any associated data
*	structures, if necessary, before freeing it (see GfxAssociate()).
*
*   BUGS
*	an Alert() will be called if you attempt to free any structure 
*	other than a graphics extended data structure obtained via GfxFree().
*
*   SEE ALSO
*	graphics/gfxnodes.h GfxNew() GfxAssociate() GfxLookUp()
*
******************************************************************************

******* graphics.library/GfxLookUP *******************************************
*
*   NAME
*    	GfxLookUp -- find a graphics extended node associated with a 
*		     given pointer (V36)
*
*   SYNOPSIS
*       result = GfxLookUp( pointer );
*       d0		    a0
*
*	struct ExtendedNode *GfxLookUp( void *);
*
*   FUNCTION
*	Finds a special graphics extended data structure (if any) associated
*	with the pointer to a data structure (eg: ViewExtra associated with
*	a View structure).
*
*   INPUTS
*	pointer = a pointer to a data structure which may have an 
*		  ExtendedNode associated with it (typically a View ).
*
*   RESULT
*	result = a pointer to the ExtendedNode that has previously been
*		 associated with the pointer.
*		
*   BUGS
*
*   SEE ALSO
*	graphics/gfxnodes.h GfxNew() GfxFree() GfxAssociate()
*
******************************************************************************

******* graphics.library/GfxAssociate ****************************************
*
*   NAME
*	GfxAssociate -- associate a graphics extended node with a given pointer
*	                (V36)
*
*   SYNOPSIS
*       GfxAssociate(pointer, node);
*                    A0       A1
*
*	void GfxAssociate(VOID *, struct ExtendedNode *);
*
*   FUNCTION
*	Associate a special graphics extended data structure (each of which
*	begins with an ExtendedNode structure)  with another structure via
*	the other structure's pointer. Later, when you call GfxLookUp()
*	with the other structure's pointer you may retrieve a pointer
*	to this special graphics extended data structure, if it is
*	available.
*
*   INPUTS
*	pointer = a pointer to a data structure.
*	node = an ExtendedNode structure to associate with the pointer
*	
*   RESULT
*	an association is created between the pointer and the node such
*	that given the pointer the node can be retrieved via GfxLookUp().
*
*   BUGS
*
*   SEE ALSO
*	graphics/gfxnodes.h GfxNew() GfxFree() GfxLookUp()
*
******************************************************************************

* The hashing algorithm is just the sum of the 4 bytes in the address.
; ULONG __asm hashit(register __d0 ULONG l);

NUMENTRIES	equ	8

	xdef	_hashit

_hashit:
	move.b	d0,d1
	swap	d0
	add.b	d0,d1
	ror.l	#8,d0
	add.b	d0,d1
	swap	d0
	add.b	d0,d1
	move.b	d1,d0
	moveq	#(NUMENTRIES-1),d1
	and.l	d1,d0
	rts

	end
@


39.3
log
@ fixed proto
@
text
@d3 1
a3 1
*	$Id: gfxmem.asm,v 39.2 92/01/07 13:38:54 spence Exp Locker: chrisg $
d61 1
a61 1
*	the node is deallocated from memory. graphics will dissassociate
d67 1
a67 1
*	other than a graphics extended data strucure obtained via GfxFree().
@


39.2
log
@Removed stubs (for registerized parameters).
Added _hashit function (downcoded).
@
text
@d3 1
a3 1
*	$Id: gfxmem.asm,v 39.1 91/10/30 19:11:57 spence Exp Locker: spence $
d142 1
a142 1
* ULONG __asm hashit(register __d0 ULONG l);
@


39.1
log
@commented proto lines for a.protos maker.
@
text
@d3 1
a3 1
*	$Id: gfxmem.asm,v 39.0 91/08/21 17:25:48 chrisg Exp Locker: spence $
a9 3
	xdef	_GfxNew
	xref	_gfxnew

a39 7
; struct ExtendedNode * __asm GfxNew(register __d0 ULONG node_type);

_GfxNew:
	move.l	d0,-(sp)
	jsr	_gfxnew
	addq.l	#4,sp
	rts
a72 9
; void __asm GfxFree(register __a0 struct ExtendedNode *node);

	xdef	_GfxFree
	xref	_gfxfree
_GfxFree:
	move.l	a0,-(sp)
	jsr	_gfxfree
	addq.l	#4,sp
	rts
a105 8
	xdef	_GfxLookUp
	xref	_gfxlookup
_GfxLookUp:
	move.l	a0,-(sp)
	jsr	_gfxlookup
	addq.l	#4,sp
	rts

d141 18
a158 6
	xdef	_GfxAssociate
	xref	_gfxassociate
_GfxAssociate:
	movem.l	a0/a1,-(sp)
	jsr	_gfxassociate
	addq.l	#8,sp
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 37.4 91/02/12 17:48:53 spence Exp Locker: chrisg $
d43 1
d83 1
@


37.4
log
@autodocs.
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 37.3 91/02/12 14:39:42 chrisg Exp Locker: spence $
@


37.3
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 37.2 91/02/04 19:30:26 spence Exp Locker: chrisg $
d134 2
a135 1
*	GfxAssociate -- associate a graphics extended node with a given pointer (V36)
d138 2
a139 2
*       GfxAssociate( pointer, node );
*       		   a0	    a1
d141 1
a141 1
*	void GfxAssociate( VOID *, struct ExtendedNode * );
d145 1
a145 1
*       begins with an ExtendedNode structure)  with another structure via
@


37.2
log
@AutoDocs
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 37.1 91/02/01 12:24:52 bart Exp Locker: spence $
d22 1
a22 2
*	LONG node_type;	
*	struct ExtendedNode *result;
d30 1
a30 1
*	node_type = which type of grphaics extended data structure to allocate. 
d56 1
a56 1
*       void GfxFree( node );
d59 1
a59 1
*	struct ExtendedNode *node;
d101 1
a101 2
*	VOID *pointer;
*	struct ExtendedNode *result;
d137 1
a137 1
*       void GfxAssociate( pointer, node );
d140 1
a140 2
*	VOID *pointer;
*	struct ExtendedNode *node;
@


37.1
log
@docs for gfxnew free associate and lookup
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 37.0 91/01/07 15:25:03 spence Exp Locker: bart $
d16 1
a16 1
*       GfxNew -- allocate a graphics extended data structure
d54 1
a54 1
*       GfxFree -- free a graphics extended data structure
d57 1
a57 1
*       VOID GfxFree( node );
d96 1
a96 1
*		     given pointer
d136 1
a136 1
*	GfxAssociate -- associate a graphics extended node with a given pointer
d139 1
a139 1
*       VOID GfxAssociate( pointer, node );
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: GfxMem.asm,v 1.4 90/08/24 11:27:18 bart Exp Locker: spence $
d13 32
d51 33
d92 33
d132 35
@


1.4
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


1.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: GfxMem.asm,v 1.2 88/07/14 13:30:30 dale Exp $
@


1.2
log
@Added GfxLookUp library asm interface routine.
@
text
@d3 1
a3 1
*	$Header: GfxMem.asm,v 1.1 88/05/01 15:36:24 dale Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
*	$Header: GfxMem.asm,v 35.0 87/11/10 14:23:46 bart Exp $
d24 8
@
