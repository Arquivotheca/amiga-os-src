head     39.5;
branch   ;
access   ;
symbols  rel39_24:39.5 rel39_18:39.5 rel39_97:39.5 rel39_90:39.5 rel39_89:39.5 rel39_82:39.5 rel39_76:39.5 rel39_71:39.5 rel39_65:39.5 rel39_64:39.5 rel39_61:39.5 rel39_60:39.5 rel39_55:39.5 rel39_52:39.5 rel39_47:39.5 rel39_39:39.1 rel39_38:39.1 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.2 V37_29:37.2 V37_28:37.2 V37_27:37.2 V37_25:37.2 V37_24:37.2 V37_23:37.2 V37_22:37.2 V37_21:37.2 V37_20:37.2 V37_19:37.2 V37_18:37.2 V37_17:37.2 V37_15:37.2 V37_14:37.2 V37_13:37.1 V37_12:37.1 V37_11:37.1 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.5 V36_208:36.5 V36_207:36.5 V36_205:36.5 V36_203:36.5 V36_202:36.5 V36_201:36.5 V36_200:36.5 V36_199:36.5 V36_198:36.5 V36_196:36.5 V36_195:36.5 V36_194:36.5 V36_193:36.5 V36_192:36.5 V36_191:36.5 V36_190:36.5 V36_189:36.5 V36_188:36.5 V36_187:36.5 V36_186:36.5 V36_185:36.5 V36_184:36.5 V36_183:36.5 V36_182:36.5 V36_181:36.5 V36_180:36.5;
locks    ; strict;
comment  @*   @;


39.5
date     92.03.27.15.17.41;  author chrisg;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.27.11.26.37;  author chrisg;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.24.15.21.15;  author chrisg;  state Exp;
branches ;
next     39.2;

39.2
date     92.03.20.10.02.23;  author chrisg;  state Exp;
branches ;
next     39.1;

39.1
date     92.03.03.13.31.04;  author chrisg;  state Exp;
branches ;
next     39.0;

39.0
date     91.08.21.17.25.04;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.02.12.13.30.41;  author chrisg;  state Exp;
branches ;
next     37.1;

37.1
date     91.02.04.19.31.37;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.24.37;  author spence;  state Exp;
branches ;
next     36.5;

36.5
date     90.07.27.16.38.19;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     90.03.27.17.35.00;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.14.17.47.11;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.30.11.39.09;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.10.26.11.36.59;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.10.25.18.12.53;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.5
log
@ fixed d0 trashing.
@
text
@*******************************************************************************
*
*	$Id: eraserect.asm,v 39.4 92/03/27 11:26:37 chrisg Exp Locker: chrisg $
*
*******************************************************************************

	xdef	_EraseRect

******* graphics.library/EraseRect *******************************************
*
*   NAME
*
*       EraseRect -- Fill a defined rectangular area using the current
*		     	BackFill hook. (V36)
*
*   SYNOPSIS
*	EraseRect( rp, xmin, ymin, xmax, ymax)
*                  a1  d0:16 d1:16 d2:16 d3:16
*
*	void EraseRect(struct RastPort *, SHORT, SHORT, SHORT, SHORT);
*
*   FUNCTION
*	Fill the rectangular region specified by the parameters with the
*	BackFill hook. If non-layered, the rectangular region specified by
*	the parameters is cleared. If layered the Layer->BackFill Hook is used.
*
*   INPUTS
*	rp	- pointer to a RastPort structure
*	xmin	- x coordinate of the upper left corner of the region to fill.
*	ymin	- y coordinate of the upper left corner of the region to fill.
*	xmax	- x coordinate of the lower right corner of the region to fill.
*	ymax	- y coordinate of the lower right corner of the region to fill.
*
*   BUGS
*
*   NOTES
*	The following relation MUST be true:
*	(xmax >= xmin) and (ymax >= ymin)
*
*   SEE ALSO
*	graphics/rastport.h graphics/clip.h
*
******************************************************************************

	section	graphics

	include 'exec/types.i'
	include 'graphics/rastport.i'
	include 'graphics/clip.i'
	include	'/gfxbase.i'
	include 'submacs.i'

	xref    _LVOClipBlit
	xref    _rastrect
	xref	_LVODoHookClipRects


; void __asm EraseRect(register __a1 struct RastPort *rp, register __d0 short xmin, register __d1 short ymin,
;			register __d2 short xmax, register __d3 short ymax); /* __asm */

_EraseRect:

	tst.l	rp_Layer(a1)
	beq.s	non_layered
	movem.l	a2/a5,-(sp)
	move.l	rp_Layer(a1),a5
	LOCKLAYER
	move.l	lr_BackFill(a5),a0 * hook routine is protected by layer lock
	movem.w	d0/d1/d2/d3,-(sp)	
	move.l	a7,a2
	move.l	a6,-(a7)
	move.l	gb_LayersBase(a6),a6
	jsr	_LVODoHookClipRects(a6)
	move.l	(a7)+,a6
	lea		4*2(a7),a7	; pop rect
	UNLOCKLAYER
	movem.l	(a7)+,a5/a2
	rts

non_layered:

	movem.l d4/d5/d6,-(sp)
	move.l	a1,a0		* src rp
	sub.l	d0,d2	
	addq.l  #1,d2
	move.l	d2,d4		* xsize
	move.l	d0,d2		* destx
	sub.l	d1,d3
	addq.l  #1,d3
	move.l	d3,d5		* ysize
	move.l	d1,d3		* desty
	moveq.l	#0,d6		* clear
	jsr	_LVOClipBlit(a6)
	movem.l (sp)+,d4/d5/d6
	rts
	
	end
@


39.4
log
@ Now calls DoHookClipRects directly.
@
text
@d3 1
a3 1
*	$Id: eraserect.asm,v 39.3 92/03/24 15:21:15 chrisg Exp Locker: chrisg $
d63 1
a63 1
	move.l	rp_Layer(a1),d0
d66 1
a66 1
	move.l	d0,a5
@


39.3
log
@removed check for null backfill hook. not needed anymore.
@
text
@d3 1
a3 1
*	$Id: eraserect.asm,v 39.2 92/03/20 10:02:23 chrisg Exp Locker: chrisg $
d50 1
d55 1
d63 1
a63 3
	move.l	a5,-(sp)
	move.l	rp_Layer(a1),a5
	cmpa.l	#0,a5
d65 2
a66 1

d68 1
a68 1
	move.l	lr_BackFill(a5),-(sp) * hook routine is protected by layer lock
d70 6
a75 3
	move.l	a1,-(sp)
	jsr 	_rastrect
	lea.l	16(sp),sp
d77 2
a78 2

	bra.s erase_exit
a94 4

erase_exit:

	move.l	(sp)+,a5
@


39.2
log
@ added proto
@
text
@d3 1
a3 1
*	$Id: eraserect.asm,v 39.1 92/03/03 13:31:04 chrisg Exp Locker: chrisg $
d67 1
a67 4
	move.l	lr_BackFill(a5),a0 * hook routine is protected by layer lock
	cmpa.l	#0,a0
	beq.s	no_hook		   * remember to unlock layer !!!
	move.l	a0,-(sp)
a74 4

no_hook:

	UNLOCKLAYER
@


39.1
log
@killed eraserect_internal.
@
text
@d3 1
a3 1
*	$Id: eraserect.asm,v 39.0 91/08/21 17:25:04 chrisg Exp Locker: chrisg $
d55 3
@


39.0
log
@Bumped
@
text
@d3 1
a3 1
*	$Id: EraseRect.asm,v 37.2 91/02/12 13:30:41 chrisg Exp Locker: chrisg $
a53 1
	xdef    _eraserect_internal
a54 9
_eraserect_internal:

	movem.l d2-d3/a1,-(sp)
	move.l	16(sp),a1
	movem.l	20(sp),d0-d3
	jsr	_EraseRect	  * handles both layered and non-layered cases
	movem.l (sp)+,d2-d3/a1
	rts
	
@


37.2
log
@edited autodoc
@
text
@d3 1
a3 1
*	$Id: EraseRect.asm,v 37.1 91/02/04 19:31:37 spence Exp Locker: chrisg $
@


37.1
log
@AutoDocs
@
text
@d3 1
a3 1
*	$Id: EraseRect.asm,v 37.0 91/01/07 15:24:37 spence Exp Locker: spence $
d20 1
a20 3
*	struct RastPort *rp;
*	SHORT xmin,ymin;
*	SHORT xmax,ymax;
d28 7
a34 6
*	rp - pointer to a RastPort structure
*	(xmin,ymin) (xmax,ymax) are the coordinates of the upper
*	left corner and the lower right corner, respectively, of the
*       rectangle.
*	The following relation MUST be true:
*	(xmax >= xmin) and (ymax >= ymin)
d36 3
a38 1
*   BUGS
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*	$Id: EraseRect.asm,v 36.5 90/07/27 16:38:19 bart Exp Locker: spence $
d13 2
a14 2
*       EraseRect -- Fill a defined rectangular area using the current 
*		     	BackFill hook.
d25 3
a27 3
*	Fill the  rectangular  region  specified  by  the parameters with the 
*	BackFill hook. If non-layered, the  rectangular  region specified  by 
*	the parameters is cleared. If layered the Layer->BackFill Hook is used. 
d35 1
a35 1
*	(xmax >= xmin) and (ymax >= ymin)  
@


36.5
log
@id
@
text
@d3 1
a3 1
*	$Id: $
@


36.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Header: EraseRect.asm,v 36.3 89/12/14 17:47:11 bart Exp $
@


36.3
log
@eraserect_internal for scrollraster to use to clear vacated area
@
text
@d3 1
a3 1
*	$Header: EraseRect.asm,v 36.2 89/10/30 11:39:09 bart Exp $
@


36.2
log
@locklayer
@
text
@d3 1
a3 1
*	$Header: EraseRect.asm,v 36.1 89/10/26 11:36:59 bart Exp $
d53 11
@


36.1
log
@eraserect
@
text
@d3 1
a3 1
*	$Header: EraseRect.asm,v 36.0 89/10/25 18:12:53 bart Exp $
d49 1
d55 4
a58 2
	move.l	rp_Layer(a1),a0
	cmpa.l	#0,a0
d60 3
a62 1
	move.l	lr_BackFill(a0),a0
d64 1
a64 1
	beq.s	no_hook
d70 1
a70 1
	rts
d72 1
d74 4
d79 1
a79 1
no_hook:
d93 4
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*	$Header: $
@
