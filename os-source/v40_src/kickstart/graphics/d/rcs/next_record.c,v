head     39.0;
branch   ;
access   ;
symbols  rel39_24:39.0 rel39_18:39.0 rel39_97:39.0 rel39_90:39.0 rel39_89:39.0 rel39_82:39.0 rel39_76:39.0 rel39_71:39.0 rel39_65:39.0 rel39_64:39.0 rel39_61:39.0 rel39_60:39.0 rel39_55:39.0 rel39_47:39.0 rel39_39:39.0 rel39_38:39.0 rel39_37:39.0 rel39_35:39.0 rel39_34:39.0 V37_30:37.0 V37_29:37.0 V37_28:37.0 V37_25:37.0 V37_22:37.0 V37_21:37.0 V37_20:37.0 V37_19:37.0 V37_17:37.0 V37_15:37.0 V37_14:37.0 V37_13:37.0 V37_12:37.0 V37_11:37.0 V37_10:37.0 V37_9:37.0 V37_8:37.0 V37_7:37.0 V37_6:37.0 V37_5:37.0 V37_4:37.0 V37_3:37.0 V37_2:37.0 V37_1:37.0 V36_209:36.10 V36_208:36.10 V36_207:36.10 V36_205:36.10 V36_203:36.10 V36_202:36.10 V36_201:36.10 V36_200:36.10 V36_199:36.10 V36_198:36.10 V36_196:36.10 V36_195:36.10 V36_194:36.10 V36_193:36.10 V36_192:36.10 V36_191:36.10 V36_190:36.10 V36_189:36.10 V36_188:36.10 V36_187:36.10 V36_186:36.10 V36_185:36.10 V36_184:36.10 V36_183:36.10 V36_182:36.10 V36_181:36.10 V36_67:36.10 V36_68:36.4 V36_66:36.4 V36_62:36.4 V36_56:36.4 V36_50:36.4 V36_45:36.4 V36_41:36.4 V36_38:36.3 V36_37:36.3;
locks    ; strict;
comment  @*   @;


39.0
date     91.08.21.17.31.13;  author chrisg;  state Exp;
branches ;
next     37.2;

37.2
date     91.05.15.12.58.39;  author spence;  state Exp;
branches ;
next     37.1;

37.1
date     91.05.09.14.27.17;  author spence;  state Exp;
branches ;
next     37.0;

37.0
date     91.01.07.15.21.36;  author spence;  state Exp;
branches ;
next     36.10;

36.10
date     90.07.27.16.38.29;  author bart;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.28.09.31.28;  author bart;  state Exp;
branches ;
next     36.8;

36.8
date     89.02.17.22.00.18;  author bart;  state Exp;
branches ;
next     36.7;

36.7
date     89.02.16.11.24.09;  author bart;  state Exp;
branches ;
next     36.6;

36.6
date     89.02.15.16.36.21;  author bart;  state Exp;
branches ;
next     36.5;

36.5
date     89.02.15.13.05.47;  author bart;  state Exp;
branches ;
next     36.4;

36.4
date     89.02.06.13.23.26;  author bart;  state Exp;
branches ;
next     36.3;

36.3
date     89.01.16.12.06.40;  author bart;  state Exp;
branches ;
next     36.2;

36.2
date     89.01.12.12.22.42;  author bart;  state Exp;
branches ;
next     36.1;

36.1
date     89.01.10.13.49.43;  author bart;  state Exp;
branches ;
next     36.0;

36.0
date     89.01.10.13.43.02;  author bart;  state Exp;
branches ;
next     ;


desc
@@


39.0
log
@Bumped
@
text
@/******************************************************************************
*
*   $Id: next_record.c,v 37.2 91/05/15 12:58:39 spence Exp Locker: chrisg $
*
*   $Locker: chrisg $
*
******************************************************************************/

/* next_record.c -- iterate available records */

#include    "/displayinfo_internal.h"
#include	"d.protos"

/***** display.library/NextRecord ********************************************
*
*   NAME
*       NextRecord -- find successive records
*
*   SYNOPSIS
*       next = NextRecord( root, current )
*       d0                 a1        a0       
*
*   FUNCTION
*
*   INPUTS
*       root - pointer to a Display DataBase RecordNode ("effective root")
*       current  - pointer to a current RecordNode or NULL
*
*   RESULT
*       next - pointer to the subsequent Record or NULL
*
*   BUGS
*
*   SEE ALSO
*       display/record.h
*
*******************************************************************************/

struct DisplayInfoRecord __regargs *next_record( root, record )
struct DisplayInfoRecord *root;
struct DisplayInfoRecord *record;
{
    struct DisplayInfoRecord *next = NULL;

    if( record ) next = find_key((struct DisplayInfoRecord *)(SibRecord(record)), 0, 0 );
    else if( root ) next = find_key((struct DisplayInfoRecord *)(SubRecord(root)), 0, 0 );

    return( next );
}

/***** display.library/NextID ********************************************
*
*   NAME
*       NextID -- find successive display identifiers
*
*   SYNOPSIS
*       nextID = NextID( root, currID)
*       d0               a1        d0     
*
*   FUNCTION
*
*   INPUTS
*       root - pointer to a Display DataBase RecordNode ("effective root")
*       currID   - current unsigned long display ID or NULL
*
*   RESULT
*       nextID   - subsequent unsigned long display ID or NULL
*
*   BUGS
*
*   SEE ALSO
*       FindID(), display/record.h
*
*******************************************************************************/

ULONG __regargs next_id( root, ID )
struct DisplayInfoRecord *root;
ULONG   ID;
{
	UWORD major  = ID >> 16;
	UWORD minor  = ID & 0xFFFF;
	struct DisplayInfoRecord *type = NULL;
	struct DisplayInfoRecord *object = NULL;
	UWORD mask = ((ID == INVALID_ID) ? 0 : ~0);

	if(root)
	{
	    if( type = find_key((struct DisplayInfoRecord *)(SubRecord(root)),major,mask))
	    {
		object = (struct DisplayInfoRecord *)(SubRecord(type));

		if(mask) 
		{
		    object = next_record(type,find_key(object,minor,mask));
		}
	    }

	    if(!object && type && (type = find_key((struct DisplayInfoRecord *)(SibRecord(type)),0,0)))
	    {
		object = find_key((struct DisplayInfoRecord *)(SubRecord(type)),0,0);
	    }
	}

	if( object ) 
	{
	    return((ULONG)(((struct DisplayInfoRecord *) object->rec_Node.rcn_Parent)->rec_MinorKey<<16 | object->rec_MinorKey));
	}
	else
	{
	    return( INVALID_ID );
	}
}
@


37.2
log
@Use protos. Registerized parameters. Removed compiler warnings
@
text
@d3 1
a3 1
*   $Id: next_record.c,v 37.1 91/05/09 14:27:17 spence Exp Locker: spence $
d5 1
a5 1
*   $Locker: spence $
@


37.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
*   $Id: next_record.c,v 37.0 91/01/07 15:21:36 spence Exp Locker: spence $
d12 1
d39 1
a39 1
struct DisplayInfoRecord *next_record( root, record )
d43 1
a43 1
    struct DisplayInfoRecord *find_key(), *next = NULL;
d45 2
a46 2
    if( record ) next = find_key( SibRecord(record), 0, 0 );
    else if( root ) next = find_key( SubRecord(root), 0, 0 );
d76 1
a76 1
ULONG   next_id( root, ID )
d88 1
a88 1
	    if( type = find_key(SubRecord(root),major,mask))
d90 1
a90 1
		object = SubRecord(type);
d98 1
a98 1
	    if(!object && type && (type = find_key(SibRecord(type),0,0)))
d100 1
a100 1
		object = find_key(SubRecord(type),0,0);
d106 1
a106 1
	    return((((struct DisplayInfoRecord *) object->rec_Node.rcn_Parent)->rec_MinorKey<<16)| object->rec_MinorKey);
@


37.0
log
@initial switchover from V36
@
text
@d3 1
a3 1
*   $Id: next_record.c,v 36.10 90/07/27 16:38:29 bart Exp Locker: spence $
d11 1
a11 1
#include    "../displayinfo_internal.h"
@


36.10
log
@id
@
text
@d3 1
a3 1
*   $Id: $
d5 1
a5 1
*   $Locker: bart $
@


36.9
log
@*** empty log message ***
@
text
@d3 1
a3 1
*   $Header: /usr/commodore/amiga/V36/src/kickstart/graphics/d/RCS/next_record.c,v 36.8 89/02/17 22:00:18 bart Exp Locker: bart $
@


36.8
log
@checkpoint
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.7 89/02/16 11:24:09 bart Exp $
@


36.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.6 89/02/15 16:36:21 bart Exp $
@


36.6
log
@DisplayInfoRecord
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.5 89/02/15 13:05:47 bart Exp $
d105 1
a105 1
	    return((((struct DisplayInfoRecord *) object->rec_Node.rcn_Parent)->rec_Key<<16)| object->rec_Key);
@


36.5
log
@merge DisplayInfoDataBase with graphics
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.4 89/02/06 13:23:26 bart Exp $
d11 1
a11 2
#include    "record.h"
#include    "defines.h"
d13 1
a13 1
/****** display.library/NextRecord ********************************************
d38 3
a40 3
struct Record *next_record( root, record )
struct Record *root;
struct Record *record;
d42 1
a42 1
    struct Record *find_key(), *next = NULL;
d50 1
a50 1
/****** display.library/NextID ********************************************
d76 1
a76 1
struct Record *root;
d81 2
a82 2
	struct Record *type = NULL;
	struct Record *object = NULL;
d105 1
a105 1
	    return((((struct Record *)object->rec_Node.rcn_Parent)->rec_Key<<16)                    | object->rec_Key);
@


36.4
log
@INVALID_ID
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.3 89/01/16 12:06:40 bart Exp $
@


36.3
log
@*** empty log message ***
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.2 89/01/12 12:22:42 bart Exp $
d12 1
d84 1
d88 1
a88 1
	    if( type = find_key(SubRecord(root),major,ID?~0:0))
d90 6
a95 1
		object = next_record(type,find_key(SubRecord(type),minor,~0));
d110 1
a110 1
	    return( NULL );
@


36.2
log
@checkpoint
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.1 89/01/10 13:49:43 bart Exp $
@


36.1
log
@checkpoint
@
text
@d3 1
a3 1
*   $Header: next_record.c,v 36.0 89/01/10 13:43:02 bart Exp $
@


36.0
log
@added to rcs for updating
@
text
@d3 1
a3 1
*   $Header: $
d5 1
a5 1
*   $Locker:  $
@
