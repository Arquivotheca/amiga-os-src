head     39.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.12
date     93.08.24.09.50.09;  author vertex;  state Exp;
branches ;
next     39.11;

39.11
date     92.08.19.18.06.45;  author vertex;  state Exp;
branches ;
next     39.10;

39.10
date     92.08.06.14.14.34;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.05.29.15.39.09;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.04.24.17.10.56;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.13.14.05.06;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.07.13.14.56;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.25.14.38.35;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.03.15.05.13;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.03.16.37.29;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.48.10;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.57.50;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.01.30.18.08.21;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.16.18.43.18;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.27.13.27.02;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.11.12.44.54;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.33.21;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.12
log
@*** empty log message ***
@
text
@	IFND LIBRARIES_GADTOOLS_I
LIBRARIES_GADTOOLS_I	SET	1
**
**	$Id: gadtools.i,v 39.11 92/08/19 18:06:45 vertex Exp Locker: vertex $
**
**	gadtools.library definitions
**
**	(C) Copyright 1989-1992, Commodore-Amiga, Inc.
**	All Rights Reserved.
**

*------------------------------------------------------------------------*

	IFND EXEC_TYPES_I
	INCLUDE "exec/types.i"
	ENDC

	IFND UTILITY_TAGITEM_I
	INCLUDE "utility/tagitem.i"
	ENDC

	IFND INTUITION_INTUITION_I
	INCLUDE "intuition/intuition.i"
	ENDC

*------------------------------------------------------------------------*

* The kinds (almost classes) of gadgets that GadTools supports.
* Use these identifiers when calling CreateGadgetA()

GENERIC_KIND	EQU	0
BUTTON_KIND	EQU	1
CHECKBOX_KIND	EQU	2
INTEGER_KIND	EQU	3
LISTVIEW_KIND	EQU	4
MX_KIND		EQU	5
NUMBER_KIND	EQU	6
CYCLE_KIND	EQU	7
PALETTE_KIND	EQU	8
SCROLLER_KIND	EQU	9
* Kind number 10 is reserved
SLIDER_KIND	EQU	11
STRING_KIND	EQU	12
TEXT_KIND	EQU	13

NUM_KINDS	EQU	14

*------------------------------------------------------------------------*

* 'Or' the appropriate set together for your Window IDCMPFlags: *

ARROWIDCMP	EQU	GADGETUP!GADGETDOWN!INTUITICKS!MOUSEBUTTONS

BUTTONIDCMP	EQU	GADGETUP
CHECKBOXIDCMP	EQU	GADGETUP
INTEGERIDCMP	EQU	GADGETUP
LISTVIEWIDCMP	EQU	GADGETUP!GADGETDOWN!MOUSEMOVE!ARROWIDCMP

MXIDCMP		EQU	GADGETDOWN
NUMBERIDCMP	EQU	0
CYCLEIDCMP	EQU	GADGETUP
PALETTEIDCMP	EQU	GADGETUP

* Use ARROWIDCMP!SCROLLERIDCMP if your scrollers have arrows: *
SCROLLERIDCMP	EQU	GADGETUP!GADGETDOWN!MOUSEMOVE
SLIDERIDCMP	EQU	GADGETUP!GADGETDOWN!MOUSEMOVE
STRINGIDCMP	EQU	GADGETUP

TEXTIDCMP	EQU	0

*------------------------------------------------------------------------*

* Generic NewGadget used by several of the gadget classes: *

    STRUCTURE NewGadget,0

	WORD	gng_LeftEdge
	WORD	gng_TopEdge	; gadget position
	WORD	gng_Width
	WORD	gng_Height	; gadget size
	APTR	gng_GadgetText	; gadget label
	APTR	gng_TextAttr	; desired font for gadget label
	UWORD	gng_GadgetID	; gadget ID
	ULONG	gng_Flags	; see below
	APTR	gng_VisualInfo	; Set to retval of GetVisualInfo()
	APTR	gng_UserData	; gadget UserData

	LABEL	gng_SIZEOF

* ng_Flags control certain aspects of the gadget.  The first five control
* the placement of the descriptive text.  Each gadget kind has its default,
* which is usually PLACETEXT_LEFT.  Consult the autodocs for details.

PLACETEXT_LEFT	EQU	$0001	* Right-align text on left side
PLACETEXT_RIGHT	EQU	$0002	* Left-align text on right side
PLACETEXT_ABOVE	EQU	$0004	* Center text above
PLACETEXT_BELOW	EQU	$0008	* Center text below
PLACETEXT_IN	EQU	$0010	* Center text on

NG_HIGHLABEL	EQU	$0020	* Highlight the label

*------------------------------------------------------------------------*

* Fill out an array of these and pass that to CreateMenus():

    STRUCTURE NewMenu,0

	UBYTE	gnm_Type		; See below
	UBYTE	gnm_Pad			; alignment padding
	APTR	gnm_Label		; Menu's label
	APTR	gnm_CommKey		; MenuItem Command Key Equiv
	UWORD	gnm_Flags		; Menu or MenuItem flags (see note)
	LONG	gnm_MutualExclude	; MenuItem MutualExclude word
	APTR	gnm_UserData		; For your own use, see note

	LABEL	gnm_SIZEOF

* Needed only by inside IM_ definitions below */
MENU_IMAGE	EQU	128

* nm_Type determines what each NewMenu structure corresponds to.
* for the NM_TITLE, NM_ITEM, and NM_SUB values, nm_Label should
* be a text string to use for that menu title, item, or sub-item.
* For IM_ITEM or IM_SUB, set nm_Label to point at the Image structure
* you wish to use for this item or sub-item.
* NOTE: At present, you may only use conventional images.
* Custom images created from Intuition image-classes do not work.
NM_TITLE	EQU	1	* Menu header
NM_ITEM		EQU	2	* Textual menu item
NM_SUB		EQU	3	* Textual menu sub-item

IM_ITEM		EQU	NM_ITEM!MENU_IMAGE	* Graphical menu item
IM_SUB		EQU	NM_SUB!MENU_IMAGE	* Graphical menu sub-item

* The NewMenu array should be terminated with a NewMenu whose
* nm_Type equals NM_END.
NM_END		EQU	0	* End of NewMenu array

* Starting with V39, GadTools will skip any NewMenu entries whose
* nm_Type field has the NM_IGNORE bit set.
NM_IGNORE	EQU	64


* nm_Label should be a text string for textual items, a pointer
* to an Image structure for graphical menu items, or the special
* constant NM_BARLABEL, to get a separator bar.
NM_BARLABEL	EQU	-1


* The nm_Flags field is used to fill out either the Menu->Flags or
* MenuItem->Flags field.  Note that the sense of the MENUENABLED or
* ITEMENABLED bit is inverted between this use and Intuition's use,
* in other words, NewMenus are enabled by default.  The following
* labels are provided to disable them:
NM_MENUDISABLED		EQU	MENUENABLED
NM_ITEMDISABLED		EQU	ITEMENABLED

* New for V39:  NM_COMMANDSTRING.  For a textual MenuItem or SubItem,
* point nm_CommKey at an arbitrary string, and set the NM_COMMANDSTRING
* flag.
NM_COMMANDSTRING	EQU	COMMSEQ

* The following are pre-cleared (COMMSEQ, ITEMTEXT, and HIGHxxx are set
* later as appropriate):
* Under V39, the COMMSEQ flag bit is not cleared, since it now has
* meaning.
NM_FLAGMASK		EQU	~(COMMSEQ!ITEMTEXT!HIGHFLAGS)
NM_FLAGMASK_V39		EQU	~(ITEMTEXT!HIGHFLAGS)

* You may choose among CHECKIT, MENUTOGGLE, and CHECKED.
* Toggle-select menuitems are of type CHECKIT!MENUTOGGLE, along
* with CHECKED if currently selected.  Mutually exclusive ones
* are of type CHECKIT, and possibly CHECKED too.  The nm_MutualExclude
* is a bit-wise representation of the items excluded by this one,
* so in the simplest case (choose 1 among n), these flags would be
* ~1, ~2, ~4, ~8, ~16, etc.  See the Intuition Menus chapter.

* A UserData pointer can be associated with each Menu and MenuItem structure.
* The CreateMenus() call allocates space for a UserData after each
* Menu or MenuItem (header, item or sub-item).  You should use the
* GTMENU_USERDATA or GTMENUITEM_USERDATA macro to extract it. */

GTMENU_USERDATA	MACRO
		move.l	mu_SIZEOF(\1),\2
		ENDM

GTMENUITEM_USERDATA	MACRO
		move.l	mi_SIZEOF(\1),\2
		ENDM

* Here is an old one for compatibility.  Do not use in new code!
MENU_USERDATA	MACRO
		move.l	mi_SIZEOF(\1),\2
		ENDM


* These return codes can be obtained through the GTMN_SecondaryError tag:
GTMENU_TRIMMED	EQU	$00000001	; Too many menus, items, or subitems,
					; menu has been trimmed down
GTMENU_INVALID	EQU	$00000002	; Invalid NewMenu array
GTMENU_NOMEM	EQU	$00000003	; Out of memory


*------------------------------------------------------------------------*

* Starting with V39, checkboxes and mx gadgets can be scaled to your
* specified gadget width/height.  Use the new GTCB_Scaled or GTMX_Scaled
* tags, respectively.  Under V37, and by default in V39, the imagery
* is of the following fixed size:

* MX gadget default dimensions:
MX_WIDTH	EQU	17
MX_HEIGHT	EQU	9

* Checkbox default dimensions:
CHECKBOX_WIDTH	EQU	26
CHECKBOX_HEIGHT	EQU	11

*------------------------------------------------------------------------*

* Tags for GadTools functions:

GT_TagBase	EQU	TAG_USER+$80000 ; Begin counting tags

GTVI_NewWindow	EQU	GT_TagBase+1	; NewWindow struct for GetVisualInfo
GTVI_NWTags	EQU	GT_TagBase+2	; NWTags for GetVisualInfo

GT_Private0	EQU	GT_TagBase+3	; (private)

GTCB_Checked	EQU	GT_TagBase+4	; State of checkbox

GTLV_Top	EQU	GT_TagBase+5	; Top visible one in listview
GTLV_Labels	EQU	GT_TagBase+6	; List to display in listview
GTLV_ReadOnly	EQU	GT_TagBase+7	; TRUE if listview is to be read-only
GTLV_ScrollWidth	EQU	GT_TagBase+8	; Width of scrollbar

GTMX_Labels	EQU	GT_TagBase+9	; NULL-terminated array of labels
GTMX_Active	EQU	GT_TagBase+10	; Active one in mx gadget

GTTX_Text	EQU	GT_TagBase+11	; Text to display
GTTX_CopyText	EQU	GT_TagBase+12	; Copy text label instead of referencing it

GTNM_Number	EQU	GT_TagBase+13	; Number to display

GTCY_Labels	EQU	GT_TagBase+14	; NULL-terminated array of labels
GTCY_Active	EQU	GT_TagBase+15	; The active one in the cycle gad

GTPA_Depth	EQU	GT_TagBase+16	; Number of bitplanes in palette
GTPA_Color	EQU	GT_TagBase+17	; Palette color
GTPA_ColorOffset	EQU	GT_TagBase+18	; First color to use in palette
GTPA_IndicatorWidth	EQU	GT_TagBase+19	; Width of current-color indicator
GTPA_IndicatorHeight	EQU	GT_TagBase+20	; Height of current-color indicator

GTSC_Top	EQU	GT_TagBase+21	; Top visible in scroller
GTSC_Total	EQU	GT_TagBase+22	; Total in scroller area
GTSC_Visible	EQU	GT_TagBase+23	; Number visible in scroller
GTSC_Overlap	EQU	GT_TagBase+24	; Unused

* GT_TagBase+25 through GT_TagBase+37 are reserved

GTSL_Min	EQU	GT_TagBase+38	; Slider min value
GTSL_Max	EQU	GT_TagBase+39	; Slider max value
GTSL_Level	EQU	GT_TagBase+40	; Slider level
GTSL_MaxLevelLen	EQU	GT_TagBase+41	; Max length of printed level
GTSL_LevelFormat	EQU	GT_TagBase+42	; Format string for level
GTSL_LevelPlace	EQU	GT_TagBase+43	; Where level should be placed
GTSL_DispFunc	EQU	GT_TagBase+44	; Callback for number calculation before display

GTST_String	EQU	GT_TagBase+45	; String gadget's displayed string
GTST_MaxChars	EQU	GT_TagBase+46	; Max length of string

GTIN_Number	EQU	GT_TagBase+47	; Number in integer gadget
GTIN_MaxChars	EQU	GT_TagBase+48	; Max number of digits

GTMN_TextAttr	EQU	GT_TagBase+49	; MenuItem font TextAttr
GTMN_FrontPen	EQU	GT_TagBase+50	; MenuItem text pen color

GTBB_Recessed	EQU	GT_TagBase+51	; Make BevelBox recessed

GT_VisualInfo	EQU	GT_TagBase+52	; result of VisualInfo call

GTLV_ShowSelected	EQU	GT_TagBase+53	; show selected entry beneath listview,
		 	; set tag data = NULL for display-only, or pointer
			; to a string gadget you've created
GTLV_Selected	EQU	GT_TagBase+54	; Set ordinal number of selected entry in the list
GT_Reserved1	EQU	GT_TagBase+56	; Reserved for future use

GTTX_Border	EQU	GT_TagBase+57	; Put a border around Text-display gadgets
GTNM_Border	EQU	GT_TagBase+58	; Put a border around Number-display gadgets

GTSC_Arrows	EQU	GT_TagBase+59	; Specify size of arrows for scroller
GTMN_Menu	EQU	GT_TagBase+60	; Pointer to Menu for use by
			; LayoutMenuItems()
GTMX_Spacing	EQU	GT_TagBase+61	; Added to font height to
			; figure spacing between mx choices.  Use this
			; instead of LAYOUTA_SPACING for mx gadgets.

* New to V37 GadTools.  Ignored by GadTools V36.
GTMN_FullMenu	EQU	GT_TagBase+62  ; Asks CreateMenus() to
		; validate that this is a complete menu structure
GTMN_SecondaryError	EQU	GT_TagBase+63  ; ti_Data is a pointer
		; to a ULONG to receive error reports from CreateMenus()
GT_Underscore	EQU	GT_TagBase+64	; ti_Data points to the symbol
		; that preceeds the character you'd like to underline in a
		; gadget label
GTST_EditHook	EQU	GT_TagBase+55	; String EditHook
GTIN_EditHook	EQU	GTST_EditHook	; Same thing, different name,
		; just to round out INTEGER_KIND gadgets


* New to V39 GadTools.  Ignored by GadTools V36 and V37
GTMN_Checkmark	EQU	GT_TagBase+65	; ti_Data is checkmark img to use
GTMN_AmigaKey	EQU	GT_TagBase+66	; ti_Data is Amiga-key img to use
GTMN_NewLookMenus	EQU	GT_TagBase+67 ; ti_Data is boolean

* New to V39 GadTools.  Ignored by GadTools V36 and V37.
* Set to TRUE if you want the checkbox or mx image scaled to
* the gadget width/height you specify.  Defaults to FALSE,
* for compatibility.
GTCB_Scaled	EQU	GT_TagBase+68	; ti_Data is boolean
GTMX_Scaled	EQU	GT_TagBase+69	; ti_Data is boolean

GTPA_NumColors	EQU	GT_TagBase+70	; Number of colors in palette

GTMX_TitlePlace      EQU GT_TagBase+71      ; Where to put the title

GTTX_FrontPen        EQU GT_TagBase+72      ; Text color in TEXT_KIND gad
GTTX_BackPen         EQU GT_TagBase+73      ; Bgrnd color in TEXT_KIND gad
GTTX_Justification   EQU GT_TagBase+74      ; See GTJ_#? constants

GTNM_FrontPen        EQU GT_TagBase+72      ; Text color in NUMBER_KIND gad
GTNM_BackPen         EQU GT_TagBase+73      ; Bgrnd color in NUMBER_KIND gad
GTNM_Justification   EQU GT_TagBase+74      ; See GTJ_#? constants
GTNM_Format          EQU GT_TagBase+75      ; Formatting string for number
GTNM_MaxNumberLen    EQU GT_TagBase+76      ; Maximum length of number

GTBB_FrameType       EQU GT_TagBase+77      ; defines what kind of boxes
                                            ; DrawBevelBox() renders. See
                                            ; the BBFT_#? constants for
                                            ; possible values

GTLV_MakeVisible     EQU GT_TagBase+78      ; Make this item visible

GTSL_MaxPixelLen     EQU GT_TagBase+80      ; Max pixel size of level display
GTSL_Justification   EQU GT_TagBase+81      ; how should the level be displayed

GTPA_ColorTable      EQU GT_TagBase+82      ; colors to use in palette

GTTX_Clipped         EQU GT_TagBase+85 	    ; make a TEXT_KIND clip text
GTNM_Clipped         EQU GT_TagBase+85 	    ; make a NUMBER_KIND clip text

* Old definition, now obsolete:
GT_Reserved0	EQU	GTST_EditHook

*------------------------------------------------------------------------*

* Justification types for GTTX_Justification and GTNM_Justification tags *
GTJ_LEFT   EQU 0
GTJ_RIGHT  EQU 1
GTJ_CENTER EQU 2

*------------------------------------------------------------------------*

* Bevel box frame types for GTBB_FrameType tag
BBFT_BUTTON	 EQU 1  * Standard button gadget box
BBFT_RIDGE	 EQU 2  * Standard string gadget box
BBFT_ICONDROPBOX EQU 3  * Standard icon drop box

*------------------------------------------------------------------------*

* Typical suggested spacing between "elements": *
INTERWIDTH	EQU	8
INTERHEIGHT	EQU	4

*------------------------------------------------------------------------*

* "NWay" is an old synonym for cycle gadgets

NWAY_KIND	EQU	CYCLE_KIND
NWAYIDCMP	EQU	CYCLEIDCMP

GTNW_Labels	EQU	GTCY_Labels
GTNW_Active	EQU	GTCY_Active

*------------------------------------------------------------------------*

* These two definitions are obsolete, but are here for backwards
* compatibility.  You never need to worry about these:
GADTOOLBIT	EQU	$8000

* Use this mask to isolate the user part: *
GADTOOLMASK	EQU	~GADTOOLBIT

*------------------------------------------------------------------------*

* These definitions are for the GTLV_CallBack tag

* The different types of messages that a listview callback hook can see
LV_DRAW		     equ $202	; draw yourself, with state

* Possible return values from a callback hook
LVCB_OK              equ 0	; callback understands this message type
LVCB_UNKNOWN         equ 1	; callback does not understand this message

* states for LVDrawMsg.lvdm_State
LVR_NORMAL	     equ 0  	; the usual
LVR_SELECTED	     equ 1	; for selected gadgets
LVR_NORMALDISABLED   equ 2	; for disabled gadgets
LVR_SELECTEDDISABLED equ 8	; disabled and selected

* structure of LV_DRAW messages, object is a (struct Node *)
   STRUCTURE LVDrawMsg,0
	ULONG	lvdm_MethodID		; LV_DRAW
	APTR	lvdm_RastPort		; where to render to
	APTR	lvdm_DrawInfo		; useful to have around
	STRUCT  lvdm_Bounds,ra_SIZEOF   ; limits of where to render
	ULONG	lvdm_State		; how to render

*------------------------------------------------------------------------*

	ENDC
@


39.11
log
@Added support for GTTX_Clipped tag
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.10 92/08/06 14:14:34 vertex Exp Locker: vertex $
d15 1
a15 1
	INCLUDE 'exec/types.i'
d19 1
a19 1
	INCLUDE 'utility/tagitem.i'
d23 1
a23 1
	INCLUDE 'intuition/intuition.i'
@


39.10
log
@*** empty log message ***
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.9 92/05/29 15:39:09 vertex Exp Locker: vertex $
d348 3
@


39.9
log
@Added GTLV_CallBack
Added GTLV_MaxPen
Added support structure and definitions for GTLV_CallBack
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.8 92/04/24 17:10:56 vertex Exp Locker: vertex $
d294 1
a294 1
GTMX_Spacing	EQU	GT_TagBase+$61	; Added to font height to
d351 14
@


39.8
log
@Added GTMX_TitlePlace
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.7 92/04/13 14:05:06 vertex Exp Locker: vertex $
a101 2
NG_REQGADGET    EQU     $0040   * NewGadget defines a gadget for a requester

d376 25
@


39.7
log
@New palette tags...
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.6 92/04/07 13:14:56 vertex Exp Locker: vertex $
d326 2
@


39.6
log
@Added many new tags
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.5 92/03/25 14:38:35 peter Exp Locker: vertex $
d102 2
d323 1
a323 1
GTMX_Scaled	EQU	GT_TagBase+69;	; ti_Data is boolean
d325 1
a325 12
* New to V39 GadTools.  Ignored by GadTools V36 and V37.
* These tags allow greater control over the PALETTE_KIND gadget.
* You can now specify an arbitrary number of colors to display
* in the palette kind.  Use GTPA_ColorRows and GTPA_ColorColumns
* to specify the number of rows and columns of color squares
* you wish to have in your gadget.  If neither tag is specified,
* then the gadget defaults to the old behavior, where it relies
* on GTPA_Depth for the number of colors, and subdivides itself.
* If one of GTPA_ColorRows or GTPA_ColorColumns is specified
* the other defaults to 1.
GTPA_ColorRows		EQU	GT_TagBase+70	; ti_Data is UWORD
GTPA_ColorColumns	EQU	GT_TagBase+71	; ti_Data is UWORD
d346 2
@


39.5
log
@Added GTPA_ColorRows and GTPA_ColorColumns.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.4 92/03/03 15:05:13 peter Exp Locker: peter $
d8 1
a8 1
**	(C) Copyright 1989, 1990, Commodore-Amiga, Inc.
d335 20
@


39.4
log
@Defined GTCB_Scaled and GTMX_Scaled.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.3 92/02/03 16:37:29 peter Exp Locker: peter $
d322 13
@


39.3
log
@Fixed typo.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.2 92/02/03 15:48:10 peter Exp Locker: peter $
d28 2
a29 2
*	The kinds (almost classes) of gadgets in the toolkit.  Use these
*	identifiers when calling CreateGadgetA()
d206 4
a209 1
* Tags for toolkit functions:
d211 12
d315 7
@


39.2
log
@Added NM_COMMANDSTRING, NM_IGNORE, and NM_FLAGMASK_V39 definitions.
Reworked comments.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 39.1 92/01/30 19:57:50 peter Exp Locker: peter $
d310 1
a310 1
g*------------------------------------------------------------------------*
@


39.1
log
@Bumped version to 39.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 38.4 92/01/30 18:08:21 peter Exp Locker: peter $
d50 1
a50 10
*  These two definitions are obsolete, but are here for backwards
*  compatibility.  You never need to worry about these:
GADTOOLBIT	EQU	$8000

*  Use this mask to isolate the user part: *
GADTOOLMASK	EQU	~GADTOOLBIT

*------------------------------------------------------------------------*

*  'Or' the appropriate set together for your Window IDCMPFlags: *
d64 1
a64 1
*  Use ARROWIDCMP!SCROLLERIDCMP if your scrollers have arrows: *
d73 1
a73 7
*  Typical suggested spacing between "elements": *
INTERWIDTH	EQU	8
INTERHEIGHT	EQU	4

*------------------------------------------------------------------------*

*  Generic NewGadget used by several of the gadget classes: *
d80 1
a80 1
	WORD	gng_Height	;  gadget size
d90 3
a92 3
*   ng_Flags control certain aspects of the gadget.  The first five control
*   the placement of the descriptive text.  All larger groups supply a
*   default:
d118 1
a118 6
*  Each nm_Type should be one of these:
NM_TITLE	EQU	1
NM_ITEM		EQU	2
NM_SUB		EQU	3
NM_END		EQU	0

d121 5
a125 2
* For an image menu-item or sub-item, use one of these.  Set
* nm_Label to point at the Image structure you wish to use.
d128 14
a142 2
IM_ITEM		EQU	NM_ITEM!MENU_IMAGE
IM_SUB		EQU	NM_SUB!MENU_IMAGE
d144 3
a146 1
*  If you set your label to NM_BARLABEL, you'll get a separator bar.
d150 32
a181 26
*   The nm_Flags field is used to fill out either the Menu->Flags or
*   MenuItem->Flags field.  Note that the sense of the MENUENABLED or
*   ITEMENABLED bit is inverted between this use and Intuition's use,
*   in other words, NewMenus are enabled by default.  The following
*   labels are provided to disable them:

NM_MENUDISABLED	EQU	MENUENABLED
NM_ITEMDISABLED	EQU	ITEMENABLED

*   The following are pre-cleared (COMMSEQ, ITEMTEXT, and HIGHxxx are set
*   later as appropriate):

NM_FLAGMASK	EQU	~(COMMSEQ!ITEMTEXT!HIGHFLAGS)

*   You may choose among CHECKIT, MENUTOGGLE, and CHECKED.
*   Toggle-select menuitems are of type CHECKIT!MENUTOGGLE, along
*   with CHECKED if currently selected.  Mutually exclusive ones
*   are of type CHECKIT, and possibly CHECKED too.  The nm_MutualExclude
*   is a bit-wise representation of the items excluded by this one,
*   so in the simplest case (choose 1 among n), these flags would be
*   ~1, ~2, ~4, ~8, ~16, etc.  See the Intuition Menus chapter.

*   A UserData pointer can be associated with each Menu and MenuItem structure.
*   The CreateMenus() call allocates space for a UserData after each
*   Menu or MenuItem (header, item or sub-item).  You should use the
*   GTMENU_USERDATA or GTMENUITEM_USERDATA macro to extract it. */
d191 1
a191 1
*  Here is an old one for compatibility.  Do not use in new code!
d197 1
a197 1
*  These return codes can be obtained through the GTMN_SecondaryError tag:
d206 1
a206 1
*  Tags for toolkit functions:
d283 1
a283 1
*  New to V37 GadTools.  Ignored by GadTools V36.
d296 1
a296 1
*  New to V39 GadTools.  Ignored by GadTools V36 and V37
d301 1
a301 1
*  Old definition, now obsolete:
d306 6
d319 11
@


38.4
log
@Changed tag offsets to decimal, to match the .h file.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 38.3 92/01/16 18:43:18 peter Exp Locker: peter $
@


38.3
log
@Now refers to V39 instead of V38.  Added GTIN_EditHook as synonym
for GTST_EditHook.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 38.2 91/11/27 13:27:02 peter Exp Locker: peter $
d207 2
a208 2
GTVI_NewWindow	EQU	GT_TagBase+$01	; NewWindow struct for GetVisualInfo
GTVI_NWTags	EQU	GT_TagBase+$02	; NWTags for GetVisualInfo
d210 1
a210 1
GT_Private0	EQU	GT_TagBase+$03	; (private)
d212 49
a260 49
GTCB_Checked	EQU	GT_TagBase+$04	; State of checkbox

GTLV_Top	EQU	GT_TagBase+$05	; Top visible one in listview
GTLV_Labels	EQU	GT_TagBase+$06	; List to display in listview
GTLV_ReadOnly	EQU	GT_TagBase+$07	; TRUE if listview is to be read-only
GTLV_ScrollWidth	EQU	GT_TagBase+$08	; Width of scrollbar

GTMX_Labels	EQU	GT_TagBase+$09	; NULL-terminated array of labels
GTMX_Active	EQU	GT_TagBase+$0A	; Active one in mx gadget

GTTX_Text	EQU	GT_TagBase+$0B	; Text to display
GTTX_CopyText	EQU	GT_TagBase+$0C	; Copy text label instead of referencing it

GTNM_Number	EQU	GT_TagBase+$0D	; Number to display

GTCY_Labels	EQU	GT_TagBase+$0E	; NULL-terminated array of labels
GTCY_Active	EQU	GT_TagBase+$0F	; The active one in the cycle gad

GTPA_Depth	EQU	GT_TagBase+$10	; Number of bitplanes in palette
GTPA_Color	EQU	GT_TagBase+$11	; Palette color
GTPA_ColorOffset	EQU	GT_TagBase+$12	; First color to use in palette
GTPA_IndicatorWidth	EQU	GT_TagBase+$13	; Width of current-color indicator
GTPA_IndicatorHeight	EQU	GT_TagBase+$14	; Height of current-color indicator

GTSC_Top	EQU	GT_TagBase+$15	; Top visible in scroller
GTSC_Total	EQU	GT_TagBase+$16	; Total in scroller area
GTSC_Visible	EQU	GT_TagBase+$17	; Number visible in scroller
GTSC_Overlap	EQU	GT_TagBase+$18	; Unused

* GT_TagBase+$19 through GT_TagBase+$25 are reserved

GTSL_Min	EQU	GT_TagBase+$26	; Slider min value
GTSL_Max	EQU	GT_TagBase+$27	; Slider max value
GTSL_Level	EQU	GT_TagBase+$28	; Slider level
GTSL_MaxLevelLen	EQU	GT_TagBase+$29	; Max length of printed level
GTSL_LevelFormat	EQU	GT_TagBase+$2A	; Format string for level
GTSL_LevelPlace	EQU	GT_TagBase+$2B	; Where level should be placed
GTSL_DispFunc	EQU	GT_TagBase+$2C	; Callback for number calculation before display

GTST_String	EQU	GT_TagBase+$2D	; String gadget's displayed string
GTST_MaxChars	EQU	GT_TagBase+$2E	; Max length of string

GTIN_Number	EQU	GT_TagBase+$2F	; Number in integer gadget
GTIN_MaxChars	EQU	GT_TagBase+$30	; Max number of digits

GTMN_TextAttr	EQU	GT_TagBase+$31	; MenuItem font TextAttr
GTMN_FrontPen	EQU	GT_TagBase+$32	; MenuItem text pen color

GTBB_Recessed	EQU	GT_TagBase+$33	; Make BevelBox recessed
d262 1
a262 1
GT_VisualInfo	EQU	GT_TagBase+$34	; result of VisualInfo call
d264 1
a264 1
GTLV_ShowSelected	EQU	GT_TagBase+$35	; show selected entry beneath listview,
d267 2
a268 2
GTLV_Selected	EQU	GT_TagBase+$36	; Set ordinal number of selected entry in the list
GT_Reserved1	EQU	GT_TagBase+$38	; Reserved for future use
d270 2
a271 2
GTTX_Border	EQU	GT_TagBase+$39	; Put a border around Text-display gadgets
GTNM_Border	EQU	GT_TagBase+$3A	; Put a border around Number-display gadgets
d273 2
a274 2
GTSC_Arrows	EQU	GT_TagBase+$3B	; Specify size of arrows for scroller
GTMN_Menu	EQU	GT_TagBase+$3C	; Pointer to Menu for use by
d276 1
a276 1
GTMX_Spacing	EQU	GT_TagBase+$3D	; Added to font height to
d281 1
a281 1
GTMN_FullMenu	EQU	GT_TagBase+$3E  ; Asks CreateMenus() to
d283 1
a283 1
GTMN_SecondaryError	EQU	GT_TagBase+$3F  ; ti_Data is a pointer
d285 1
a285 1
GT_Underscore	EQU	GT_TagBase+$40	; ti_Data points to the symbol
d288 1
a288 1
GTST_EditHook	EQU	GT_TagBase+$37	; String EditHook
d294 3
a296 3
GTMN_Checkmark	EQU	GT_TagBase+$41	; ti_Data is checkmark img to use
GTMN_AmigaKey	EQU	GT_TagBase+$42	; ti_Data is Amiga-key img to use
GTMN_NewLookMenus	EQU	GT_TagBase+$43 ; ti_Data is boolean
@


38.2
log
@GTST_EditHook is now publicly available.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 38.1 91/07/11 12:44:54 peter Exp Locker: peter $
d289 2
d293 1
a293 1
*  New to V38 GadTools.  Ignored by GadTools V36 and V37
@


38.1
log
@New tags: GTMN_Checkmark, GTMN_AmigaKey, GTMN_NewLookMenus.
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 38.0 91/07/11 12:33:21 peter Exp Locker: peter $
a267 1
GT_Reserved0	EQU	GT_TagBase+$37	; Reserved
d288 1
d290 1
d296 2
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d4 1
a4 1
**	$Id: gadtools.i,v 36.12 91/05/02 18:59:46 peter Exp $
d289 6
@
