head     39.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.10
date     92.10.16.18.30.28;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.05.29.15.26.19;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.04.15.11.34.54;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.13.13.49.38;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.07.13.54.06;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.26.15.19.37;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.14.30;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.11.49.36;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.47.14;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.52.17;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.30.18.08.07;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.28.08.29.50;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.18.33;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.34.25;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.10
log
@Changes for SAS/C 6.0
@
text
@/*** button.c *************************************************************
*
*   button.c	- Button gadget routines
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: button.c,v 39.9 92/05/29 15:26:19 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Private: */
struct ExtGadget *CreateButtonGadgetA (struct ExtGadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
void SetButtonAttrsA (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);

/*------------------------------------------------------------------------*/

typedef void (*SETATTRFCN)();


/* CreateButtonGadgetA() */

struct ExtGadget *CreateButtonGadgetA(struct ExtGadget *gad, struct NewGadget *ng,
                                   struct TagItem *taglist)
{
    DP(("CBG:  About to CreateGadget...\n"));

    /* NB: the scroller's arrows are built out of GadTools buttons,
     * and they depend on being able to pass GT_ExtraSize right
     * through here.  If ever button gadgets grow any extra data
     * of their own, someone will have to change a bit.
     */
    if (gad = (struct ExtGadget *)CreateGadgetA( GENERIC_KIND, gad, ng, taglist ))
    {
        DP(("CBG:  gad at $%lx\n", gad));
        /* A boolean RELVERIFY gadget with complement-highlighting: */

        gad->Flags |= GFLG_GADGIMAGE|GFLG_GADGHIMAGE;

        /* By default, buttons are RELVERIFY only */
        gad->Activation = GACT_RELVERIFY;
        if (getGATagData(GA_Immediate,FALSE,taglist))
        {
            /* V39 and up recognize GA_Immediate to mean GADGIMMEDIATE
             * too.  Scroller buttons use this.
             */
            gad->Activation |= GACT_IMMEDIATE;
        }

        gad->GadgetType        |= GTYP_BOOLGADGET;
        SGAD(gad)->sg_SetAttrs  = (SETATTRFCN)TagAbleGadget;
        SGAD(gad)->sg_GetTable  = Button_GetTable;
        SGAD(gad)->sg_Flags     = SG_EXTRAFREE_DISPOSE;

        placeGadgetText( gad, ng->ng_Flags, PLACETEXT_IN, NULL );

        if (!(gad->SelectRender = gad->GadgetRender =
                             NewObject(GadToolsBase->gtb_GTButtonIClass, NULL,
                                       IA_Width,     gad->Width,
                                       IA_Height,    gad->Height,
                                       MYIA_IText,   gad->GadgetText,
                                       IA_FrameType, FRAME_BUTTON,
                                       TAG_DONE)))
        {
            return(NULL);
        }
        gad->GadgetText = NULL;

        TagAbleGadget(gad,NULL,taglist);
    }

    DP(("CBG:  Done\n"));
    return(gad);
}


/*------------------------------------------------------------------------*/


/*/ SetButtonAttrsA()
 *
 * Function to change a button's attributes.  Currently, only GA_DISABLED
 * is recognized.
 *
 * Created:   8-Jan-90, Peter Cherna
 * Modified:  3-Apr-90, Peter Cherna
 *
 */
#if 0
void SetButtonAttrsA( struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist )
{
    /* Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
    TagAbleGadget(gad, win, taglist);
}
#endif

/*------------------------------------------------------------------------*/

@


39.9
log
@Removed requester support
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.8 92/04/15 11:34:54 vertex Exp Locker: vertex $
d42 1
a42 1
    if (gad = CreateGadgetA( GENERIC_KIND, gad, ng, taglist ))
@


39.8
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.7 92/04/13 13:49:38 vertex Exp Locker: vertex $
d20 1
a20 1
struct Gadget *CreateButtonGadgetA (struct Gadget *gad, struct NewGadget *ng,
d22 2
a23 2
void SetButtonAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
d32 1
a32 1
struct Gadget *CreateButtonGadgetA(struct Gadget *gad, struct NewGadget *ng,
d78 1
a78 1
        TagAbleGadget(gad,NULL,NULL,taglist);
d99 2
a100 2
void SetButtonAttrsA( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
d103 1
a103 1
    TagAbleGadget(gad, win, req, taglist);
@


39.7
log
@Moved some stuff around to save bytes
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.6 92/04/07 13:54:06 vertex Exp Locker: vertex $
d77 2
@


39.6
log
@TagAbleGadget() is now the Handle routine for BUTTON_KIND
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.5 92/03/26 15:19:37 peter Exp Locker: vertex $
d32 2
a33 2
struct Gadget *CreateButtonGadgetA( struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist )
d36 1
d42 1
a42 12
    gad = CreateGadgetA( GENERIC_KIND, gad, ng, taglist );

    if (!gad)
	return(NULL);

    DP(("CBG:  gad at $%lx\n", gad));
    /* A boolean RELVERIFY gadget with complement-highlighting: */

    gad->Flags |= GFLG_GADGIMAGE|GFLG_GADGHIMAGE;
    /* By default, buttons are RELVERIFY only */
    gad->Activation = GACT_RELVERIFY;
    if ( getGATagData( GA_Immediate, FALSE, taglist ) )
d44 2
a45 9
	/* V39 and up recognize GA_Immediate to mean GADGIMMEDIATE
	 * too.  Scroller buttons use this.
	 */
	gad->Activation |= GACT_IMMEDIATE;
    }
    gad->GadgetType        |= GTYP_BOOLGADGET;
    SGAD(gad)->sg_SetAttrs  = (SETATTRFCN)TagAbleGadget;
    SGAD(gad)->sg_GetTable  = Button_GetTable;
    SGAD(gad)->sg_Flags     = SG_EXTRAFREE_DISPOSE;
d47 1
a47 9
    placeGadgetText( gad, ng->ng_Flags, PLACETEXT_IN, NULL );

    gad->SelectRender = gad->GadgetRender =
	NewObject( GadToolsBase->gtb_GTButtonIClass, NULL,
	    IA_Width, gad->Width,
	    IA_Height, gad->Height,
	    MYIA_IText, gad->GadgetText,
	    IA_FrameType, FRAME_BUTTON,
	    TAG_DONE);
d49 28
a76 3
    if (!gad->GadgetRender)
    {
	return(NULL);
a77 2

    gad->GadgetText = NULL;
@


39.5
log
@GTButtonIClass now needs IA_FrameType, doesn't need MYIA_VisualInfo.
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.4 92/03/24 15:14:30 peter Exp Locker: peter $
d27 3
d59 4
a62 4
    gad->GadgetType |= GTYP_BOOLGADGET;
    SGAD(gad)->sg_SetAttrs = SetButtonAttrsA;
    SGAD(gad)->sg_GetTable = Button_GetTable;
    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;
d80 1
a80 1
	
d88 1
d98 1
a98 1

d105 1
d108 1
@


39.4
log
@Supports GetAttrs of GA_Disabled.
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.3 92/02/20 11:49:36 peter Exp Locker: peter $
d59 1
a66 1
	    MYIA_VisualInfo, ng->ng_VisualInfo,
d68 1
a77 2
    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;

@


39.3
log
@Now use SGAD() instead of SG_FROM_GAD().
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.2 92/02/03 15:47:14 peter Exp Locker: peter $
d58 1
@


39.2
log
@Deleted obsolete internal autodocs.  Creation simplified since
BorderCompIClass now handles the bevel box.
@
text
@d7 1
a7 1
*   $Id: button.c,v 39.1 92/01/30 19:52:17 peter Exp Locker: peter $
d57 1
a57 1
    SG_FROM_GAD(gad)->sg_SetAttrs = SetButtonAttrsA;
d76 1
a76 1
    SG_FROM_GAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: button.c,v 38.3 92/01/30 18:08:07 peter Exp Locker: peter $
d27 1
a27 51
/*i**** gadtools.library/CreateButtonGadgetA *********************************
*
*   NAME
*	CreateButtonGadgetA -- Create a button gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateButtonGadgetA(previous, newgad, taglist)
*	
*	struct Gadget *CreateButtonGadgetA(struct Gadget *,
*	    struct NewGadget *, struct TagItem *);
*
*   FUNCTION
*	CreateButtonGadgetA() allocates and fills out a Gadget structure
*	based on the information in the supplied NewGadget structure and the
*	system's idea of what a button gadget looks like, including
*	supplying a border and positioning the GadgetText.  The default
*	position of gadget text is centered, on the button.  The handling
*	of the NewGadget structure is the same as for CreateGadgetA().
*	CreateButtonGadgetA() sets the NextGadget field of the previous
*	gadget to the newly created Gadget.  If previous is NULL,
*	CreateButtonGadgetA() returns NULL immediately.
*
*   INPUTS
*	previous - pointer to the previous gadget that this new gadget
*	    is to be linked to.
*	newgad - a filled in NewGadget structure describing the desired
*	    gadget's size, position, label, etc.
*	taglist - pointer to a TagItem list.
*
*   TAGS
*	None recognized.
*
*   RESULT
*	gad - pointer to the new button gadget, or NULL if the allocation
*	    failed or if previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateGadgetA()
*
******************************************************************************
*
* Created:  06-Jun-89, Peter Cherna
* Modified: 19-Feb-90, Peter Cherna
*
*/
a31 1
    /* Create a generic gadget, with extra space for a BevelBox: */
d33 7
a39 2
    gad = CreateGenericBase(gad, ng, sizeof(struct BevelBox),
	taglist);
d46 11
a56 3
    gad->Flags |= GADGIMAGE|GADGHIMAGE;
    gad->Activation = RELVERIFY;
    gad->GadgetType |= BOOLGADGET;
d61 7
a67 11
    DP(("CBG:  Making border at $%lx (size $%lx)\n",
	MEMORY_FOLLOWING(gad), sizeof(struct BevelBox)));
    gad->SelectRender = gad->GadgetRender = NewObject( GadToolsBase->gtb_BorderCompIClass, NULL,
	IA_Width, gad->Width,
	IA_Height, gad->Height,
	IA_Data, MakeBevelBox((struct BevelBox *)
	    MEMORY_FOLLOWING(gad), 0, 0, ng->ng_Width, ng->ng_Height,
	    BB_RAISED, VI(ng->ng_VisualInfo)),
	IA_Pens, VI(ng->ng_VisualInfo)->vi_DrawInfo->dri_Pens,
	MYIA_IText, gad->GadgetText,
	TAG_DONE);
a68 1
    gad->GadgetText = NULL;
d73 2
@


38.3
log
@Uses new space-saving placeGadgetText() function.
@
text
@d7 1
a7 1
*   $Id: button.c,v 38.2 92/01/28 08:29:50 peter Exp Locker: peter $
a8 50
*   $Log:	button.c,v $
 * Revision 38.2  92/01/28  08:29:50  peter
 * BorderCompIClass now referenced off GadToolsBase.
 * 
 * Revision 38.1  91/11/27  13:18:33  peter
 * AbleGadget() no longer has a 'count' parameter.
 * 
 * Revision 38.0  91/07/11  12:34:25  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.11  91/04/08  13:27:41  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.10  91/03/28  13:30:15  peter
*   Because SG_EXTRAFREE_DISPOSE was being set too early, DisposeObject() would
*   be called even if NewObject() had failed.
*   
*   Revision 36.9  91/03/14  16:07:24  peter
*   Now uses stack-based tags instead of array-based ones when it calls
*   tag-based functions.
*   
*   Revision 36.8  90/11/19  12:56:04  peter
*   Updated to match modifications to BorderCompIClass.  Now works right in mono.
*   
*   Revision 36.7  90/11/07  19:42:12  peter
*   Uses new BorderCompIClass().  Ghosting is much simplified now.
*   Now takes advantage of vi_shinePen and vi_ShadowPen.
*   
*   Revision 36.6  90/10/12  19:43:31  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   Calls internal addGlist() and refreshGList() to save space.
*   
*   Revision 36.5  90/05/18  18:29:32  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.4  90/04/06  00:53:05  peter
*   No longer uses user's RastPort.
*   
*   Revision 36.3  90/04/02  15:56:15  peter
*   Warnings due to new clib/#?_protos.h eliminated.
*   GadgetType is now OR'd in.
*   
*   Revision 36.2  90/03/31  06:43:45  peter
*   Now use CreateGadgetA() instead of specific Create[xxx]GadgetA().
*   
*   Revision 36.1  90/03/16  14:04:06  peter
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Private: */
d79 4
a82 5
struct Gadget *CreateButtonGadgetA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
    /*  Create a generic gadget, with extra space for a BevelBox: */
d90 1
a90 1
    /*  A boolean RELVERIFY gadget with complement-highlighting: */
d113 1
a113 1
	{
d115 1
a115 1
	}
d121 1
a121 1
    }
d136 4
a139 5
void SetButtonAttrsA(struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist)

    {
    /*  Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
d141 1
a141 1
    }
@


38.2
log
@BorderCompIClass now referenced off GadToolsBase.
@
text
@d7 1
a7 1
*   $Id: button.c,v 38.1 91/11/27 13:18:33 peter Exp Locker: peter $
d10 3
a132 3
    struct Rectangle rect;
    ULONG place;

d148 1
a148 7
    rect.MinX = 0;
    rect.MinY = 0;
    rect.MaxX = gad->Width - 1;
    rect.MaxY = gad->Height - 1;
    if (!(place = ng->ng_Flags & PLACETEXT_MASK))
	place = PLACETEXT_IN;
    PlaceIntuiText(gad->GadgetText, &rect, place);
@


38.1
log
@AbleGadget() no longer has a 'count' parameter.
@
text
@d7 1
a7 1
*   $Id: button.c,v 38.0 91/07/11 12:34:25 peter Exp Locker: peter $
d10 3
d158 1
a158 1
    gad->SelectRender = gad->GadgetRender = NewObject( BorderCompIClass, NULL,
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: button.c,v 36.11 91/04/08 13:27:41 peter Exp $
d10 3
d194 2
a195 7
    struct TagItem *ti;

    if (ti = findGATagItem(GA_DISABLED, taglist))
	{
	/*  Do a regular enable/disable: */
	AbleGadget(gad, win, req, 1, (BOOL)ti->ti_Data);
	}
@
