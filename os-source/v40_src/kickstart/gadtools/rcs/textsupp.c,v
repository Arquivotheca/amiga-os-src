head     39.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.10
date     92.12.11.10.50.36;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.12.10.11.38.50;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.10.16.18.27.23;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.05.29.15.35.48;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.24.10.20.02;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.15.11.33.39;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.13.14.06.48;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.04.07.13.51.36;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.50.37;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.55.11;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.01.30.18.10.20;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.33.29;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.10
log
@Removed kludge for bug in graphics
@
text
@/*** textsupp.c ***********************************************************
*
*   textsupp.c	- Text support routines for Gadget Toolkit
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: textsupp.c,v 39.9 92/12/10 11:38:50 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Public: */

/* Internal: */
void intuiTextSize (struct IntuiText *itext, Point *textsize);
void printITextToFit (struct RastPort *rp, struct IntuiText *itext,
    WORD LeftOffset, WORD TopOffset, UWORD Width, UWORD justification,
    struct Rectangle *resultExtent);
void PlaceIntuiText (struct IntuiText *itext, struct Rectangle *extent,
    ULONG where);

void cloneRastPort ( struct RastPort *clonerp, struct RastPort *rp );
static struct TextFont *ISetFont (struct RastPort *rp, struct TextAttr *font);

/*------------------------------------------------------------------------*/

/*/ intuiTextSize()
 *
 * A function to return the Size (width & height) of a single IntuiText.
 *
 * Created:  26-Oct-89, Peter Cherna
 * Modified: 16-May-90, Peter Cherna
 *
 */

void intuiTextSize( struct IntuiText *itext, Point *textsize )
{
    /* !!!  I think we really do want "intuiTextExtent" here, and work
     * with the whole extent.  I don't know what meaning we want to
     * attach to extenders, as far as positioning text strings goes,
     * though
     */
    struct RastPort RPort;
    struct TextFont *font;
    struct TextExtent extent;
    struct Rectangle *rect = &extent.te_Extent;

    DP(("mITE:  Enter\n"));
    InitRastPort(&RPort);	/* system default font */

    DP(("mITE:  Setting font to TextAttr $%lx\n", itext->ITextFont));
    font = ISetFont(&RPort, itext->ITextFont);

    if (itext->IText)
    {
	DP(("mITE:  Calling TextExtent(&RPort $%lx, text '%s', len %ld, extent $%lx)\n",
	    &RPort, itext->IText, strlen(itext->IText), &extent));
	TextExtent(&RPort, itext->IText, (UWORD)strlen(itext->IText), &extent);
	DP(("mITE:  extent: [%ld,%ld]-[%ld,%ld]\n",
	    rect->MinX, rect->MinY,
	    rect->MaxX, rect->MaxY));
	textsize->x = rect->MaxX - rect->MinX + 1;
	textsize->y = rect->MaxY - rect->MinY + 1;
    }
    else
    {
	textsize->x = 0;
	textsize->y = 0;
    }

    DP(("mITE:  Size: [%ld,%ld]\n", textsize->x, textsize->y));
    closeFont(font);
    DP(("mITE:  Done\n"));
}

/*------------------------------------------------------------------------*/

/*/ printITextToFit()
 *
 * A function to print as much of an IntuiText as fits in the constraining
 * bit width.  Affects the RastPort cp_x and cp_y variables only.
 *
 * Created:   9-Nov-89, Peter Cherna (parts cribbed from PrintIText()
 * Modified:  4-Apr-90, Peter Cherna
 *
 */

VOID printITextToFit(struct RastPort *rp, struct IntuiText *itext,
                     WORD LeftOffset, WORD TopOffset, UWORD Width,
                     UWORD justification, struct Rectangle *resultExtent)
{
struct RastPort    clonerp;
UWORD              len;
struct TextExtent  extent;
struct TextExtent  resExtent;
struct TextFont   *font;
STRPTR             str;
WORD               left;
WORD               top;
WORD               xoffset;
WORD               slen;
WORD               plen, rlen;

    if (rp && (str = itext->IText))
    {
        cloneRastPort(&clonerp,rp);

        font    = ISetFont(&clonerp,itext->ITextFont);
        left    = LeftOffset + itext->LeftEdge;
        top     = TopOffset + itext->TopEdge;
        slen    = strlen(str);
        len     = 0;
        xoffset = 0;

        if (justification == GTJ_RIGHT)
        {
            /* below deals with (slen == 0) just fine */
            len     = TextFit(&clonerp,&str[slen-1],slen,&extent,NULL,-1,Width,32767);
            str     = &str[slen - len];
            xoffset = Width - (extent.te_Extent.MaxX - extent.te_Extent.MinX + 1);
        }
        else if (justification == GTJ_CENTER)
        {
            if (slen)
            {
                TextExtent(&clonerp,str,slen,&extent);

/*
                /* !!! These two lines compensate for a bug in graphics.library
                 *     Remove them once TextFit() is fixed. Bug should be
                 *     fixed in graphics > 39.98
                 */
                extent.te_Extent.MinY = -20000;
                extent.te_Extent.MaxY = 20000;
*/

                /* pixel length of whole string */
                plen = extent.te_Extent.MaxX - extent.te_Extent.MinX + 1;

                extent.te_Extent.MaxX -= (plen - Width) / 2;

                rlen = TextFit(&clonerp,str,slen,&resExtent,&extent,1,32767,32767);

                extent.te_Extent.MaxX -= (plen - Width + 1) / 2;

                len = TextFit(&clonerp,&str[rlen-1],rlen,&resExtent,&extent,-1,32767,32767);

                str = &str[rlen - len];

                xoffset = (Width - (resExtent.te_Extent.MaxX - resExtent.te_Extent.MinX + 1)) / 2;
            }
        }
        else  /* GTJ_LEFT */
        {
            len = TextFit(&clonerp,str,slen,&extent,NULL,1,Width,32767);
        }

        SetABPenDrMd(&clonerp,itext->FrontPen,itext->BackPen,itext->DrawMode);
        Move(&clonerp,left+xoffset,top+clonerp.TxBaseline);
        Text(&clonerp,str,len);

        if (resultExtent)
        {
            resultExtent->MinX = left+xoffset;
            resultExtent->MinY = top;
            resultExtent->MaxX = left+xoffset+TextLength(&clonerp,str,len)-1;
            resultExtent->MaxY = top+clonerp.TxHeight-1;
        }

        closeFont(font);

        rp->cp_x = clonerp.cp_x;
        rp->cp_y = clonerp.cp_y;
    }
}


/*------------------------------------------------------------------------*/

/*/ cloneRastPort()
 *
 * Clone a RastPort and set its mask to -1, APen to 1, BPen to zero.
 * Also sets DrawMode to JAM1, AreaPtrn to zero.
 * AOlPen to zero, LinePtrn,
 *
 */

void cloneRastPort( struct RastPort *clonerp, struct RastPort *rp )
{
    *clonerp = *rp;

    /* Set Mask to -1, APen to 1, DrawMode to JAM1,
     * turn off Area Pattern and Line Pattern:
     * And don't forget to clear our friend TmpRas
     */

    SetWriteMask(clonerp,-1);
    SetABPenDrMd(clonerp,1,0,JAM1);
    SetAfPt(clonerp,0,0);
    clonerp->LinePtrn = 0xFFFF;
    clonerp->TmpRas = NULL;
    BNDRYOFF(clonerp);
}

/*------------------------------------------------------------------------*/

/*/ ISetFont()
 *
 * Set font and softstyle with protection against NULLs and failures.
 *
 * Created:  26-Oct-89, Peter Cherna (copied from Intuition)
 * Modified: 26-Oct-89, Peter Cherna
 *
 */

static struct TextFont *ISetFont(struct RastPort *rp, struct TextAttr *attr)
{
struct TextFont *font = NULL;

    if (attr && (font = OpenFont(attr)))
    {
	SetFont(rp,font);
	SetSoftStyle(rp,attr->ta_Style, 0xFF);
    }

    return (font);
}


/*------------------------------------------------------------------------*/

/*/ PlaceIntuiText()
 *
 * Function to position IntuiText with respect to a rectangle representing
 * the extent of the "visual" of the gadget wrt the actual Intuition
 * gadget's upper-left corner.  You must supply a flag to indicate
 * where you'd like the label placed.
 *
 * It is safe to call this with a NULL IntuiText, if you're too lazy to
 * check.
 *
 * Created:  26-Oct-89, Peter Cherna
 * Modified: 06-Nov-89, Peter Cherna
 */

void PlaceSizedIntuiText( struct IntuiText *itext, struct Rectangle *extent,
    ULONG where, Point *textsize )
{
    WORD LeftEdge = 0;
    WORD TopEdge = 0;

    if (itext)
    {
#define PLACETEXT_VCENTER (PLACETEXT_LEFT | PLACETEXT_RIGHT | PLACETEXT_IN)

	if (where & PLACETEXT_VCENTER)
	{
	    /* We must do vertical centering:
	     * Consider the height of the extent (MaxY-MinY+1).  Subtract
	     * the height of the font.  That's what we want to distribute
	     * evenly above and below the font, so divide it by two and
	     * add it to the MinY to position it correctly.  We add an
	     * extra 1 so that if we have an odd amount of space to split,
	     * the extra pixel goes above, since we have some illusion
	     * of extra space below due to descenders.
	     * Note that it is critical to use ">> 1" and not "/ 2",
	     * because /2 rounds positive numbers down and negatives
	     * up (i.e. always towards zero).  We want always rounded
	     * down.
	     *
	     * From that, we can show that:
	     */

	    TopEdge =  (extent->MaxY + extent->MinY + 2 - textsize->y) >> 1;
	}
	else if (where == PLACETEXT_ABOVE)
	{
	    TopEdge = (extent->MinY - textsize->y - INTERHEIGHT);
	}
	else if (where == PLACETEXT_BELOW)
	{
	    TopEdge = (extent->MaxY + INTERHEIGHT);
	}

#define PLACETEXT_HCENTER (PLACETEXT_ABOVE | PLACETEXT_BELOW | PLACETEXT_IN)

	if (where & PLACETEXT_HCENTER)
	{
	    /* We must do horizontal centering: */
	    /* Follow a similar argument to vertical centering: */

	    LeftEdge = (extent->MaxX + extent->MinX + 2 - textsize->x) >> 1;
	}
	else if (where == PLACETEXT_LEFT)
	{
	    LeftEdge = (extent->MinX - textsize->x - INTERWIDTH);
	}
	else if (where == PLACETEXT_RIGHT)
	{
	    LeftEdge = (extent->MaxX + INTERWIDTH);
	}

	itext->LeftEdge += LeftEdge;
	itext->TopEdge += TopEdge;
	/* Because of GT_Underscore, we have to offset any IText->NextText */
	if (itext->NextText)
	{
	    itext->NextText->LeftEdge += LeftEdge;
	    itext->NextText->TopEdge += TopEdge;
	}
    }
}


/*------------------------------------------------------------------------*/


void PlaceIntuiText(struct IntuiText *itext, struct Rectangle *extent,
                    ULONG where )
{
Point textsize;

    if (itext)
	intuiTextSize(itext, &textsize);

    PlaceSizedIntuiText(itext,extent,where,&textsize);
}


/*------------------------------------------------------------------------*/


VOID CombineRects(struct Rectangle *r1, struct Rectangle *r2,
                  struct Rectangle *result)
{
    *result = *r1;

    if (r2->MinX < result->MinX)
        result->MinX = r2->MinX;

    if (r2->MinY < result->MinY)
        result->MinY = r2->MinY;

    if (r2->MaxX > result->MaxX)
        result->MaxX = r2->MaxX;

    if (r2->MaxY > result->MaxY)
        result->MaxY = r2->MaxY;
}


/*------------------------------------------------------------------------*/


/* Combines the gadget's hit box with the area occupied by the gadget text,
 * to form the gadget help box
 */
VOID PlaceHelpBox(struct ExtGadget *gad)
{
struct Rectangle  gadgetrect, textrect, result;
Point             point;
struct IntuiText *itext;

    if ((itext = gad->GadgetText) && itext->IText[0])
    {
        gadgetrect.MinX  = gad->BoundsLeftEdge;
        gadgetrect.MinY  = gad->BoundsTopEdge;
        gadgetrect.MaxX  = gadgetrect.MinX + gad->BoundsWidth - 1;
        gadgetrect.MaxY  = gadgetrect.MinY + gad->BoundsHeight - 1;

        intuiTextSize(itext,&point);
        textrect.MinX  = gad->LeftEdge + itext->LeftEdge;
        textrect.MinY  = gad->TopEdge + itext->TopEdge;
        textrect.MaxX  = textrect.MinX + point.x;
        textrect.MaxY  = textrect.MinY + point.y;

        CombineRects(&gadgetrect,&textrect,&result);

        gad->BoundsLeftEdge = result.MinX;
        gad->BoundsTopEdge  = result.MinY;
        gad->BoundsWidth    = result.MaxX - result.MinX + 1;
        gad->BoundsHeight   = result.MaxY - result.MinY + 1;
    }
}


/*------------------------------------------------------------------------*/


/*/ placeGadgetText()
 *
 * This function incorporates the most common use of PlaceIntuiText(),
 * which is to align the IntuiText against the gadget's box.
 *
 */

void placeGadgetText(struct ExtGadget *gad, ULONG flags, ULONG default_place,
                     struct Rectangle *rect)
{
struct Rectangle gadgetrect;
ULONG            place;

    gadgetrect.MinX = 0;
    gadgetrect.MinY = 0;
    gadgetrect.MaxX = gad->Width - 1;
    gadgetrect.MaxY = gad->Height - 1;

    if ( ! ( place = ( flags & PLACETEXT_MASK ) ) )
	place = default_place;

    PlaceIntuiText(gad->GadgetText, &gadgetrect, place );

    if (rect)
	*rect = gadgetrect;

    PlaceHelpBox(gad);
}


/*------------------------------------------------------------------------*/

#if 0
/* get a pointer to the requester containing the gadget, or NULL if the gadget
 * is not in a requester and is in the main window
 */
struct Requester *GetReq(struct ExtGadget *gad, struct Window *win)
{
struct Requester *req;
struct ExtGadget *g;

    if (win)
        for (req = win->FirstRequest; req; req = req->OlderRequest)
            for (g = req->ReqGadget; g; g = g->NextGadget)
                if (g == gad)
                    return(req);

    return(NULL);
}
#endif

/*------------------------------------------------------------------------*/


/* get a rastport, given a gadget and a window, accounting for requesters */
struct RastPort *GetRP(struct ExtGadget *gad, struct Window *win)
{
#ifdef DOREQUESTERS
struct Requester *req;

    if (req = GetReq(gad,win))
    {
        if (req->ReqLayer)
            return(req->ReqLayer->rp);
    }
    else
#endif

    if (win)
        return(win->RPort);

    return(NULL);
}


/*****************************************************************************/


static USHORT GhostPattern[2] =
{
     0x4444,
     0x1111,
};


VOID Ghost(struct RastPort *rp, UWORD pen, UWORD x0, UWORD y0, UWORD x1, UWORD y1)
{
    SetABPenDrMd(rp,pen,0,JAM1);
    SetAfPt(rp,GhostPattern,1);
    RectFill(rp,x0,y0,x1,y1);
    SetAfPt(rp,NULL,0);
}
@


39.9
log
@Fixed incorrect centering technique used for GTJ_CENTER text
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.8 92/10/16 18:27:23 vertex Exp Locker: vertex $
d135 1
d142 1
@


39.8
log
@Fixed usage of TextFit() in printITextToFit()
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.7 92/05/29 15:35:48 vertex Exp Locker: vertex $
d102 1
d109 1
a109 1
WORD               plen, rlen, llen;
d115 6
a120 4
        font = ISetFont(&clonerp,itext->ITextFont);
        left = LeftOffset + itext->LeftEdge;
        top  = TopOffset + itext->TopEdge;
        slen = strlen(str);
d124 1
d131 3
a133 1
            TextExtent(&clonerp,str,slen,&extent);
d135 17
a151 2
            /* pixel length of whole string */
            plen = extent.te_Extent.MaxX - extent.te_Extent.MinX + 1;
d153 1
a153 15
            /* now figure out the middle character (pixel wise) */
            len = TextFit(&clonerp,str,slen,&extent,NULL,1,plen / 2,32767);

            /* now get how many characters fit in the right side of the display */
            rlen = TextFit(&clonerp,&str[len],slen-len,&extent,NULL,1,Width / 2,32767);

            /* and finally, the number of chars on the left side */
            llen = TextFit(&clonerp,&str[len-1],len,&extent,NULL,-1,Width / 2,32767);

            /* if the number of characters on the left that will be printed
             * is less than the total number of characters on the left side
             * then bump the string pointer
             */
            if (llen < len)
                str = &str[len - llen];
d155 2
a156 2
            len = llen + rlen;
            xoffset = (Width / 2) - (extent.te_Extent.MaxX - extent.te_Extent.MinX + 1);
d160 1
a160 2
            len     = TextFit(&clonerp,str,slen,&extent,NULL,1,Width,32767);
            xoffset = 0;
@


39.7
log
@Cloning a rastport no longer clones the TmpRas
Removed requester support
Code optimizations
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.6 92/04/24 10:20:02 vertex Exp Locker: vertex $
d121 2
a122 2
            len     = TextFit(&clonerp,str,slen,&extent,NULL,-1,Width,32767);
            str     = (STRPTR)((ULONG)str + slen - len);
d136 1
a136 1
            rlen = TextFit(&clonerp,(STRPTR)((ULONG)str+len),slen-len,&extent,NULL,1,Width / 2,32767);
d139 1
a139 1
            llen = TextFit(&clonerp,str,len,&extent,NULL,-1,Width / 2,32767);
d146 1
a146 1
                str = (STRPTR)((ULONG)str + len - llen);
d154 1
a154 1
	    xoffset = 0;
d157 3
a159 3
	SetABPenDrMd(&clonerp,itext->FrontPen,itext->BackPen,itext->DrawMode);
	Move(&clonerp,left+xoffset,top+clonerp.TxBaseline);
	Text(&clonerp,str,len);
@


39.6
log
@Added PlaceHelpBox() by splitting up PlaceGadgetText()
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.5 92/04/15 11:33:39 vertex Exp Locker: vertex $
d193 1
d200 1
d215 1
a215 1
static struct TextFont *ISetFont( struct RastPort *rp, struct TextAttr *font )
d217 1
a217 1
    struct TextFont *fp = NULL;
d219 1
a219 1
    if ((font != NULL) && ((fp = OpenFont(font)) != NULL))
d221 2
a222 2
	SetFont(rp, fp);
	SetSoftStyle(rp, font->ta_Style, 0xFF);
d225 1
a225 1
    return (fp);
a322 1
    {
a323 1
    }
d357 1
a357 1
VOID PlaceHelpBox(struct Gadget *gad)
d363 1
a363 3
    itext = gad->GadgetText;

    if (itext && itext->IText[0])
d365 4
a368 4
        gadgetrect.MinX  = ((struct ExtGadget *)gad)->BoundsLeftEdge;
        gadgetrect.MinY  = ((struct ExtGadget *)gad)->BoundsTopEdge;
        gadgetrect.MaxX  = ((struct ExtGadget *)gad)->BoundsLeftEdge + ((struct ExtGadget *)gad)->BoundsWidth - 1;
        gadgetrect.MaxY  = ((struct ExtGadget *)gad)->BoundsTopEdge + ((struct ExtGadget *)gad)->BoundsHeight - 1;
d378 4
a381 4
        ((struct ExtGadget *)gad)->BoundsLeftEdge = result.MinX;
        ((struct ExtGadget *)gad)->BoundsTopEdge  = result.MinY;
        ((struct ExtGadget *)gad)->BoundsWidth    = result.MaxX - result.MinX + 1;
        ((struct ExtGadget *)gad)->BoundsHeight   = result.MaxY - result.MinY + 1;
d396 1
a396 1
void placeGadgetText(struct Gadget *gad, ULONG flags, ULONG default_place,
d421 1
a421 1

d425 1
a425 1
struct Requester *GetReq(struct Gadget *gad, struct Window *win)
d428 1
a428 1
struct Gadget    *g;
d438 1
a438 1

d444 1
a444 1
struct RastPort *GetRP(struct Gadget *gad, struct Window *win)
d446 1
d454 4
a457 2
    else if (win)
    {
a458 1
    }
d461 19
@


39.5
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.4 92/04/13 14:06:48 vertex Exp Locker: vertex $
d22 1
a22 1
static void intuiTextSize (struct IntuiText *itext, Point *textsize);
d43 1
a43 1
static void intuiTextSize( struct IntuiText *itext, Point *textsize )
d354 37
d401 2
a402 6
struct Rectangle  gadgetrect, textrect, result;
ULONG             place;
Point             point;
struct IntuiText *itext;

    itext = gad->GadgetText;
d412 1
a412 1
    PlaceIntuiText(itext, &gadgetrect, place );
d417 1
a417 21
    gadgetrect.MinX  = gad->LeftEdge;
    gadgetrect.MinY  = gad->TopEdge;
    gadgetrect.MaxX += gad->LeftEdge;
    gadgetrect.MaxY += gad->TopEdge;
    textrect         = gadgetrect;

    if (itext)
    {
        intuiTextSize(itext,&point);
        textrect.MinX += itext->LeftEdge;
        textrect.MinY += itext->TopEdge;
        textrect.MaxX  = textrect.MinX + point.x;
        textrect.MaxY  = textrect.MinY + point.y;
    }

    CombineRects(&gadgetrect,&textrect,&result);

    ((struct ExtGadget *)gad)->BoundsLeftEdge = result.MinX;
    ((struct ExtGadget *)gad)->BoundsTopEdge  = result.MinY;
    ((struct ExtGadget *)gad)->BoundsWidth    = result.MaxX - result.MinX + 1;
    ((struct ExtGadget *)gad)->BoundsHeight   = result.MaxY - result.MinY + 1;
@


39.4
log
@Added CombineRects(), GetRP() and GetReq()
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.3 92/04/07 13:51:36 vertex Exp Locker: vertex $
d332 2
a333 2
static VOID CombineRects(struct Rectangle *r1, struct Rectangle *r2,
                         struct Rectangle *result)
d361 2
a362 2
void placeGadgetText( struct Gadget *gad, ULONG flags, ULONG default_place,
    struct Rectangle *rect )
d364 4
a367 2
    struct Rectangle gadgetrect, textrect;
    ULONG place;
d369 2
a374 1
    textrect        = gadgetrect;
d379 1
a379 1
    PlaceIntuiText( gad->GadgetText, &textrect, place );
d382 18
a399 1
	*rect = textrect;
d401 4
a404 1
    CombineRects(&textrect,&gadgetrect,(struct Rectangle *)&((struct ExtGadget *)gad)->BoundsLeftEdge);
@


39.3
log
@printITextToFit() know does justification
Added PlaceSizedIntuiText()
Removed ICloseFont(), now in stubs.asm as closeFont()
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.2 92/02/03 15:50:37 peter Exp Locker: vertex $
d110 1
a110 1
    if (str = itext->IText)
d331 23
d364 1
a364 1
    struct Rectangle myrect;
d367 5
a371 3
    myrect.MinX = myrect.MinY = 0;
    myrect.MaxX = gad->Width - 1;
    myrect.MaxY = gad->Height - 1;
a373 1
    {
d375 33
a407 1
    }
d409 4
a412 1
    PlaceIntuiText( gad->GadgetText, &myrect, place );
d414 6
a419 1
    if ( rect )
d421 1
a421 1
	*rect = myrect;
d423 2
@


39.2
log
@Use new SetABPenDrMd().  cloneRastPort() replaces PrepareCloneRP().
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 39.1 92/01/30 19:55:11 peter Exp Locker: peter $
d22 1
a22 1
void intuiTextSize (struct IntuiText *itext, Point *textsize);
d24 2
a25 1
    WORD LeftOffset, WORD TopOffset, UWORD Width);
d30 1
a30 2
struct TextFont *ISetFont (struct RastPort *rp, struct TextAttr *font);
void ICloseFont (struct TextFont *fp);
d43 1
a43 1
void intuiTextSize( struct IntuiText *itext, Point *textsize )
d79 1
a79 1
    ICloseFont(font);
d95 3
a97 2
void printITextToFit( struct RastPort *rp, struct IntuiText *itext,
    WORD LeftOffset, WORD TopOffset, UWORD Width )
d99 75
a173 33
    struct RastPort clonerp;
    struct TextFont *font;
    WORD len;

    struct TextExtent dummyresultextent;

    DP(("mPITTF:  Enter\n"));
    cloneRastPort( &clonerp, rp );

    DP(("mPITTF:  Setting font to TextAttr $%lx\n", itext->ITextFont));
    font = ISetFont(&clonerp, itext->ITextFont);

    if (itext->IText)
    {
	DP(("mPITTF:  Asking about '%s' (%ld chars) in %ld pixels\n",
	    itext->IText, strlen(itext->IText), (LONG)Width));
	len = TextFit(&clonerp, itext->IText, (UWORD)strlen(itext->IText),
	     &dummyresultextent, NULL, 1, Width, 32767);
	DP(("mPITTF:  len %ld\n", ((LONG)len)));
	SetABPenDrMd( &clonerp, itext->FrontPen, itext->BackPen, itext->DrawMode);
	DP(("mPITTF: Moving to (%ld, %ld)\n",
	    ((LONG)LeftOffset+itext->LeftEdge),
	    ((LONG)TopOffset+itext->TopEdge+clonerp.TxBaseline)));
	Move(&clonerp, (WORD)(LeftOffset+itext->LeftEdge),
	    (WORD)(TopOffset+itext->TopEdge+clonerp.TxBaseline));
	DP(("mPITTF: Rendering '%s'\n", itext->IText));
	Text(&clonerp, itext->IText, len);
    }

    ICloseFont(font);
    rp->cp_x = clonerp.cp_x;
    rp->cp_y = clonerp.cp_y;
    DP(("mPITTF:  Done\n"));
d183 1
a183 1
 * AOlPen to zero, LinePtrn, 
d195 3
a197 3
    clonerp->Mask = -1;
    SetABPenDrMd( clonerp, 1, 0, JAM1 );
    SetAfPt(clonerp, 0, 0);
d213 1
a213 1
struct TextFont *ISetFont( struct RastPort *rp, struct TextAttr *font )
a228 20
/*/ ICloseFont()
 *
 * Close font with protection against NULL font.
 *
 * Created:   4-Apr-90, Peter Cherna (copied from Intuition)
 * Modified:  4-Apr-90, Peter Cherna
 *
 */

void ICloseFont( struct TextFont *fp )
{
    if (fp)
    {
	CloseFont(fp);
    }
}


/*------------------------------------------------------------------------*/

d243 2
a244 2
void PlaceIntuiText( struct IntuiText *itext, struct Rectangle *extent,
    ULONG where )
a245 1
    Point textsize;
a250 2
	intuiTextSize(itext, &textsize);

d267 1
a267 1
	     * 
d271 1
a271 1
	    TopEdge =  (extent->MaxY + extent->MinY + 2 - textsize.y) >> 1;
d275 1
a275 1
	    TopEdge = (extent->MinY - textsize.y - INTERHEIGHT);
d289 1
a289 1
	    LeftEdge = (extent->MaxX + extent->MinX + 2 - textsize.x) >> 1;
d293 1
a293 1
	    LeftEdge = (extent->MinX - textsize.x - INTERWIDTH);
d314 17
a359 2

/*------------------------------------------------------------------------*/
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 38.1 92/01/30 18:10:20 peter Exp Locker: peter $
d28 1
a28 2
struct RastPort *PrepareCloneRP (struct RastPort *clonerp,
    struct RastPort *rp, UBYTE apen);
d53 1
d67 4
a70 4
	    extent.te_Extent.MinX, extent.te_Extent.MinY,
	    extent.te_Extent.MaxX, extent.te_Extent.MaxY));
	textsize->x = extent.te_Extent.MaxX - extent.te_Extent.MinX + 1;
	textsize->y = extent.te_Extent.MaxY - extent.te_Extent.MinY + 1;
d105 1
a105 1
    PrepareCloneRP(&clonerp, rp, 0);
d117 1
a117 3
	SetAPen( &clonerp, itext->FrontPen);
	SetBPen( &clonerp, itext->BackPen);
	SetDrMd( &clonerp, itext->DrawMode);
d136 1
a136 1
/*/ PrepareCloneRP()
d138 2
a139 2
 * Clone a RastPort and set its mask to -1 and its APen to the supplied
 * value.  Also sets DrawMode to JAM1, AreaPtrn to zero.
a140 1
 * Returns the supplied new rp as its result, for your convenience.
a141 3
 * Created:  4-Apr-90, Peter Cherna (from Intuition/misc.c)
 * Modified: 4-Apr-90, Peter Cherna
 *
d144 1
a144 2
struct RastPort *PrepareCloneRP( struct RastPort *clonerp,
    struct RastPort *rp, UBYTE apen )
d148 1
a148 1
    /* Set Mask to -1, APen to supplied value, DrawMode to JAM1,
d153 1
a153 2
    SetAPen(clonerp, apen);
    SetDrMd(clonerp, JAM1);
a156 2

    return(clonerp);
@


38.1
log
@Added space-saving placeGadgetText() function.
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 38.0 91/07/11 12:33:29 peter Exp Locker: peter $
a8 29
*   $Log:	textsupp.c,v $
 * Revision 38.0  91/07/11  12:33:29  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.7  90/11/19  13:15:58  peter
*   Optimized PlaceIntuiText().
*   
*   Revision 36.6  90/11/19  12:55:10  peter
*   PlaceIntuiText() now handles linked IntuiTexts.
*   
*   Revision 36.5  90/05/18  18:33:34  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.4  90/05/17  17:35:51  peter
*   intuiTextSize didn't correctly handle the case of a NULL string.
*   
*   Revision 36.3  90/04/06  00:56:52  peter
*   Added PrepareCloneRP() and ICloseFont().
*   Changed myPrintITextToFit() to printITextToFit().
*   Changed myIntuiTextSize() to intuiTextSize().
*   
*   Revision 36.2  90/04/02  16:13:14  peter
*   Dropped prototypes for TextFit() and TextExtent().
*   
*   Revision 36.1  90/03/16  14:01:12  peter
*   
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Public: */
d21 1
a21 1
/*  Internal: */
d44 7
a50 10
void intuiTextSize(itext, textsize)

    struct IntuiText *itext;
    Point *textsize;

    {
    /*  !!!  I think we really do want "intuiTextExtent" here, and work
	with the whole extent.  I don't know what meaning we want to
	attach to extenders, as far as positioning text strings goes,
	though */
d62 1
a62 1
	{
d71 1
a71 1
	}
d73 1
a73 1
	{
d76 1
a76 1
	}
d81 1
a81 1
    }
d95 3
a97 9
void printITextToFit(rp, itext, LeftOffset, TopOffset, Width)

    struct RastPort *rp;
    struct IntuiText *itext;
    WORD LeftOffset;
    WORD TopOffset;
    UWORD Width;

    {
d111 1
a111 1
	{
d127 1
a127 1
	}
d133 1
a133 1
    }
d150 3
a152 7
struct RastPort *PrepareCloneRP(clonerp, rp, apen)

    struct RastPort *clonerp;
    struct RastPort *rp;
    UBYTE apen;

    {
d155 3
a157 2
    /*  Set Mask to -1, APen to supplied value, DrawMode to JAM1,
	turn off Area Pattern and Line Pattern: */
d167 1
a167 1
    }
d180 2
a181 6
struct TextFont *ISetFont(rp, font)

    struct RastPort *rp;
    struct TextAttr *font;

    {
d185 1
a185 1
	{
d188 1
a188 1
	}
d191 1
a191 1
    }
d205 3
a207 4
void ICloseFont(fp)

    struct TextFont *fp;

a208 2
    if (fp)
	{
a209 1
	}
d211 1
d230 3
a232 7
void PlaceIntuiText(itext, extent, where)

    struct IntuiText *itext;
    struct Rectangle *extent;
    ULONG where;

    {
d238 1
a238 1
	{
d244 16
a259 15
	    {
	    /*  We must do vertical centering: */
	    /*  Consider the height of the extent (MaxY-MinY+1).  Subtract
		the height of the font.  That's what we want to distribute
		evenly above and below the font, so divide it by two and
		add it to the MinY to position it correctly.  We add an
		extra 1 so that if we have an odd amount of space to split,
		the extra pixel goes above, since we have some illusion
		of extra space below due to descenders.
		Note that it is critical to use ">> 1" and not "/ 2",
		because /2 rounds positive numbers down and negatives
		up (i.e. always towards zero).  We want always rounded
		down.
		
		From that, we can show that: */
d262 1
a262 1
	    }
d264 1
a264 1
	    {
d266 1
a266 1
	    }
d268 1
a268 1
	    {
d270 1
a270 1
	    }
d275 3
a277 3
	    {
	    /*  We must do horizontal centering: */
	    /*  Follow a similar argument to vertical centering: */
d280 1
a280 1
	    }
d282 1
a282 1
	    {
d284 1
a284 1
	    }
d286 1
a286 1
	    {
d288 1
a288 1
	    }
d292 1
a292 1
	/*  Because of GT_Underscore, we have to offset any IText->NextText */
d294 1
a294 1
	    {
a296 1
	    }
d299 1
d311 3
a313 8
void placeGadgetText( gad, flags, default_place, rect )

    struct Gadget *gad;
    ULONG flags;
    ULONG default_place;
    struct Rectangle *rect;

    {
d322 1
a322 1
	{
d324 1
a324 1
	}
d329 1
a329 1
	{
a330 1
	}
d332 1
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: textsupp.c,v 36.7 90/11/19 13:15:58 peter Exp $
d10 3
d352 37
@
