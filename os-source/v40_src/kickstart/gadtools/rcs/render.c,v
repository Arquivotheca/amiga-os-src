head     39.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.6
date     93.02.18.18.27.49;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.05.29.15.33.50;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.07.13.45.14;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.26.15.15.43;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.49.40;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.54.29;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.28.08.28.56;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.26.33;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.32.48;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.6
log
@*** empty log message ***
@
text
@/*** render.c *************************************************************
*
*   render.c	- Graphics routines for Gadget Toolkit
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: render.c,v 39.5 92/05/29 15:33:50 vertex Exp $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Public: */
void __asm
LIB_DrawBevelBoxA (register __a0 struct RastPort *rport,
		  register __d0 WORD left,
		  register __d1 WORD top,
		  register __d2 WORD width,
		  register __d3 WORD height,
		  register __a1 struct TagItem *);

Class *initGTButtonIClass (void);
ULONG __asm
dispatchGTButtonI ( register __a0 Class *cl,
		     register __a2 Object *o,
		     register __a1 Msg msg );
void setGTButtonIAttrs ( Class *cl, Object *obj, Msg msg);
static VOID drawGTButtonI ( Class *cl, Object *o, struct impDraw *msg);

struct Border *MakeCycleBorder (struct CycleBorder *cycleborder,
    LONG height, struct VisualInfo *vi);

/*------------------------------------------------------------------------*/

STRPTR FrameIClassName = "frameiclass";

/*------------------------------------------------------------------------*/

#define IM(o)	((struct Image *)(o))	/* transparent base class */

/*------------------------------------------------------------------------*/

struct Image *getBevelImage( LONG left, LONG top, LONG width, LONG height, ULONG type )
{
    return((struct Image *)NewObject(NULL, FrameIClassName,
                                     IA_Left, left,
                                     IA_Top, top,
                                     IA_Width, width,
                                     IA_Height, height,
                                     IA_FrameType, type & FRAMETYPE_MASK,
                                     IA_Recessed, type & FRAMETYPE_RECESSED,
                                     IA_EdgesOnly, TRUE,
                                     TAG_DONE ) );
}

/*------------------------------------------------------------------------*/


struct Border *MakeCycleBorder(struct CycleBorder *cycleborder,
                               LONG gadheight, struct VisualInfo *vi )
{
    WORD *p;
    LONG height;

    /* Fill out the the border structure: */

    /* glyph height is always at least 9 */
    height = max(gadheight-5, 9);
    cycleborder->cb_Border.BackPen = DESIGNTEXT;
    cycleborder->cb_Border.LeftEdge = LEFTTRIM+2;
    cycleborder->cb_Border.TopEdge = (gadheight-height)/2;
    /* LeftEdge, TopEdge, DrawMode are already zero */
    cycleborder->cb_Border.Count = CB_COUNT;
    cycleborder->cb_Border.XY = cycleborder->cb_Points;

    /* Fill out the border points, based on the four coordinates: */
    p = cycleborder->cb_Points;

    *p++ = 7;		*p++ = 0;
    *p++ = 7;		*p++ = 5;
    *p++ = 5;		*p++ = 3;
    *p++ = 10;		*p++ = 3;
    *p++ = 8;		*p++ = 5;
    *p++ = 8;		*p++ = 1;
    *p++ = 7;		*p++ = 0;
    *p++ = 1;		*p++ = 0;
    *p++ = 0;		*p++ = 1;
    *p++ = 0;		*p++ = height-2;
    *p++ = 1;		*p++ = height-1;
    *p++ = 1;		*p++ = 1;
    *p++ = 1;		*p++ = height-1;
    *p++ = 7;		*p++ = height-1;
    *p++ = 7;		*p++ = height-2;
/** NOTE WELL:  The last post-increment is deliberately missing (optimization) **/
    *p++ = 8;		*p = height-2;

    return((struct Border *)cycleborder);
}


/*------------------------------------------------------------------------*/

/****** gadtools.library/DrawBevelBoxA ***************************************
*
*   NAME
*	DrawBevelBoxA -- draw a bevelled box. (V36)
*	DrawBevelBox -- varargs stub for DrawBevelBoxA(). (V36)
*
*   SYNOPSIS
*	DrawBevelBoxA(rport, left, top, width, height, tagList);
*	              A0     D0    D1   D2     D3      A1
*
*	VOID DrawBevelBoxA(struct RastPort *, WORD, WORD, WORD, WORD,
*	                   struct TagItem *taglist);
*
*	DrawBevelBox(rport, left, top, width, height, firsttag, ...);
*
*	VOID DrawBevelBox(struct RastPort *, WORD, WORD, WORD, WORD,
*	                  Tag, ...);
*
*   FUNCTION
*	This function renders a bevelled box of specified dimensions
*	and type into the supplied RastPort.
*
*   INPUTS
*	rport - RastPort into which the box is to be drawn.
*	left - left edge of the box.
*	top - top edge of the box.
*	width - width of the box.
*	height - height of the box.
*	tagList - pointer to an array of tags providing extra parameters
*
*   TAGS
*	GTBB_Recessed (BOOL) - Set to anything for a recessed-looking box.
*			If absent, the box defaults, it would be raised. (V36)
*
*	GTBB_FrameType (ULONG) - Determines what kind of box this function
*			renders. BBFT_BUTTON generates a box like what is
*			used around GadTools BUTTON_KIND gadgets. BBFT_RIDGE
*			generates a box like what is used around GadTools
*			STRING_KIND gadgets. Finally, BBFT_ICONDROPBOX
*			generates a box suitable for a standard icon drop
*			box imagery. (defaults to BBFT_BUTTON). (V39)
*
*	GT_VisualInfo (APTR) - You MUST supply the value you obtained
*			from an earlier call to GetVisualInfoA() with this
*			tag. (V36)
*
*   NOTES
*	DrawBevelBox() is a rendering operation, not a gadget. That
*	means you must refresh it at the appropriate time, like any
*	other rendering operation.
*
*   SEE ALSO
*	GetVisualInfoA(), <libraries/gadtools.h>
*
******************************************************************************
*
* Created:  10-Oct-89, Peter Cherna
* Modified: 14-Feb-90, Peter Cherna
*
*/

void __asm
LIB_DrawBevelBoxA( register __a0 struct RastPort *rport,
		   register __d0 WORD left,
		   register __d1 WORD top,
		   register __d2 WORD width,
		   register __d3 WORD height,
		   register __a1 struct TagItem *taglist )
{
ULONG              frameType;
struct VisualInfo *vi;
struct Image      *bevelimage;

    /* Get tough and require GT_VisualInfo or else don't draw anything */
    if (vi = (struct VisualInfo *)getGTTagData(GT_VisualInfo, NULL, taglist))
    {
        frameType = getGTTagData(GTBB_FrameType,BBFT_BUTTON,taglist);

	if (findGTTagItem(GTBB_Recessed,taglist))
	    frameType |= FRAMETYPE_RECESSED;

	if (bevelimage = getBevelImage(0,0,width,height,frameType))
	{
	    DrawImageState(rport,bevelimage,left,top,IDS_NORMAL,vi->vi_DrawInfo);
	    DisposeObject(bevelimage);
	}
    }
}

/*------------------------------------------------------------------------*/

struct LocalObjectData
{
    struct IntuiText *lod_IntuiText;
};

/*------------------------------------------------------------------------*/

Class *initGTButtonIClass( void )
{
Class *cl;

    if (cl = MakeClass(NULL,FrameIClassName,NULL,sizeof(struct LocalObjectData),0))
    {
	cl->cl_Dispatcher.h_SubEntry = dispatchGTButtonI;
	cl->cl_Dispatcher.h_Entry    = callCHook;
	cl->cl_Dispatcher.h_Data     = GadToolsBase;
    }
    return(cl);
}


/*------------------------------------------------------------------------*/

ULONG ASM dispatchGTButtonI(REG(a0) Class *cl,
		            REG(a2) Object *o,
		            REG(a1) Msg msg)
{
ULONG   result = 1;
Object *newobj;

    switch (msg->MethodID)
    {
	case IM_DRAW     :
	case IM_DRAWFRAME: SSM( cl, o, msg );
                           drawGTButtonI( cl, o, (struct impDraw *)msg );
                           break;

	case OM_SET      : SSM( cl, o, msg );
                           setGTButtonIAttrs( cl, o, msg );
                           break;

	case OM_NEW      : if (result = (ULONG)(newobj = (Object *) SSM( cl, o, msg )) )
                               setGTButtonIAttrs( cl, newobj, msg );
                           break;

	default          : result = (ULONG) SSM( cl, o, msg );
    }

    return(result);
}


/*------------------------------------------------------------------------*/

VOID setGTButtonIAttrs(Class *cl, Object *obj, Msg msg)
{
struct LocalObjectData *idata = INST_DATA( cl, obj );
struct TagItem         *taglist = ((struct opSet *)msg)->ops_AttrList;

    idata->lod_IntuiText = (struct IntuiText *)getTagData( MYIA_IText,(ULONG)idata->lod_IntuiText,taglist);
}

/*------------------------------------------------------------------------*/

static VOID drawGTButtonI(Class *cl, Object *o, struct impDraw *msg)
{
struct IBox             box;
BOOL                    selected;
UBYTE                   penText = 1;
UBYTE                   penShine = 2;
UBYTE                   penShadow = 1;
UBYTE                   penFillText = 1;
struct DrawInfo        *di;
struct LocalObjectData *idata = INST_DATA(cl,o);

    /* Only use DrawInfo if present */
    if ( di = msg->imp_DrInfo)
    {
	penText     = di->dri_Pens[TEXTPEN];
	penShine    = di->dri_Pens[SHINEPEN];
	penShadow   = di->dri_Pens[SHADOWPEN];
	penFillText = di->dri_Pens[FILLTEXTPEN];
    }

    /* get Image.Left/Top/Width/Height */
    box       = *IM_BOX( IM(o) );
    box.Left += msg->imp_Offset.X;
    box.Top  += msg->imp_Offset.Y;

    selected = ((msg->imp_State == IDS_SELECTED) || (msg->imp_State == IDS_INACTIVESELECTED));

    {
	/* This is ugly but efficient:  for each border on the list,
	 * the (unused) BackPen field will be DESIGNSHINE or DESIGNSHADOW
	 * or 0, indicating that this border was intended to be drawn
	 * with shine or shadow or something else.
	 * We key off this and set the FrontPen to SHINEPEN or SHADOWPEN
	 * or leave it alone, respectively.  If the gadget is selected,
	 * we invert the assignment of SHINEPEN and SHADOWPEN.
	 * The actual pen values of SHINEPEN and SHADOWPEN have been
	 * placed in the image->PlanePick and PlaneOnOff using
	 * IA_FGPen and IA_BGPen respectively.
	 */
	UBYTE designShine;
	UBYTE designShadow;
	UBYTE designText;
	struct Border *border;

	border = (struct Border *)IM(o)->ImageData;
	designShine = penShine;
	designShadow = penShadow;
	designText = penText;
	if (selected)
	{
	    /* Since we're going to change designText anyways, we can use
	     * it as a temp-variable
	     */
	    designText = designShine;
	    designShine = designShadow;
	    designShadow = designText;
	    designText = penFillText;
	}

	while (border)
	{
	    DP(("dBCI: coloring border at $%lx\n", border));
	    if (border->BackPen == DESIGNSHINE)
	    {
		border->FrontPen = designShine;
	    }
	    else if (border->BackPen == DESIGNSHADOW)
	    {
		border->FrontPen = designShadow;
	    }
	    else if (border->BackPen == DESIGNTEXT)
	    {
		border->FrontPen = designText;
	    }
	    /* else leave FrontPen alone */
	    border = border->NextBorder;
	}
    }

    if (idata->lod_IntuiText)
    {
	struct IntuiText *itext;

	DP(("dBCI: Printing Text '%s'\n", idata->lod_IntuiText->IText));
	for (itext = idata->lod_IntuiText; itext; itext = itext->NextText)
	{
	    itext->FrontPen = penText;
	    if ( selected )
	    {
		itext->FrontPen = penFillText;
	    }
	}
	PrintIText(msg->imp_RPort, idata->lod_IntuiText, box.Left, box.Top);
    }

    /* Then draw the border on top */
    if ( IM(o)->ImageData )
    {
	DrawBorder(msg->imp_RPort, ((struct Border *)IM(o)->ImageData),
	           box.Left, box.Top);
    }
}
@


39.5
log
@Code cleanup
Code optimizations
@
text
@d7 1
a7 1
*   $Id: render.c,v 39.4 92/04/07 13:45:14 vertex Exp Locker: vertex $
d144 2
a145 2
*			renders. FRAME_BUTTON generates a box like what is
*			used around GadTools BUTTON_KIND gadgets. FRAME_RIDGE
d147 1
a147 1
*			STRING_KIND gadgets. Finally, FRAME_ICONDROPBOX
d149 1
a149 1
*			box imagery. (defaults to FRAME_BUTTON). (V39)
d161 1
a161 1
*	GetVisualInfoA()
@


39.4
log
@Added GTBB_FrameType
@
text
@d7 1
a7 1
*   $Id: render.c,v 39.3 92/03/26 15:15:43 peter Exp Locker: vertex $
a27 8
/* ALGOBORDER was an attempt to generate the borders in a data-driven
 * way.  Makes the code bigger, unfortunately!
 */
#ifdef ALGOBORDER
void AlgoBorder (struct Border *border, UWORD overright, UWORD overbottom,
    BYTE *borderdata, UWORD paircount);
#endif

d51 13
a63 34
    return((struct Image *)NewObject( NULL, FrameIClassName,
	IA_Left, left,
	IA_Top, top,
	IA_Width, width,
	IA_Height, height,
	IA_FrameType, type & FRAMETYPE_MASK,
	IA_Recessed, type & FRAMETYPE_RECESSED,
	IA_EdgesOnly, TRUE,
	TAG_DONE ) );
}

/*------------------------------------------------------------------------*/

#ifdef ALGOBORDER
BYTE CycleBorderData[] =
{
     7, 0,
     7, 5,
     5, 3,
    10, 3,
     8, 5,
     8, 1,
     7, 0,
     1, 0,
     0, 1,
     0,-2,
     1,-1,
     1, 1,
     1,-1,
     7,-1,
     7,-2,
     8,-2,
};
#endif
d65 2
a66 2
struct Border *MakeCycleBorder( struct CycleBorder *cycleborder,
    LONG gadheight, struct VisualInfo *vi )
a67 1
#ifndef ALGOBORDER
a68 1
#endif
a77 5
#ifdef ALGOBORDER
    cycleborder->cb_Border.XY = cycleborder->cb_Points;
    AlgoBorder( (struct Border *)cycleborder, 11, height,
	CycleBorderData, CB_COUNT );
#else
a101 1
#endif
d209 1
a209 1
    Class *cl;
d211 1
a211 4
    DP(("init GTButtonIClass\n"));
    /* Create a private class: */
    if ( cl = MakeClass( NULL, FrameIClassName, NULL,
	sizeof(struct LocalObjectData), 0 ) )
d214 2
a215 3
	cl->cl_Dispatcher.h_Entry = callCHook;
	/* Stuff our context */
	cl->cl_Dispatcher.h_Data = GadToolsBase;
d217 1
a217 1
    return ( cl );
d219 55
a273 11


/*------------------------------------------------------------------------*/

ULONG __asm
dispatchGTButtonI( register __a0 Class *cl,
		     register __a2 Object *o,
		     register __a1 Msg msg )
{
    ULONG retval = 1;
    Object *newobj;
a274 53
    switch ( msg->MethodID )
    {
	case IM_DRAW:			/* draw with state */
	case IM_DRAWFRAME:			/* special case of draw	*/
	    SSM( cl, o, msg );
	    drawGTButtonI( cl, o, (struct impDraw *)msg );
	    break;

	case OM_SET:
	    SSM( cl, o, msg );
	    setGTButtonIAttrs( cl, o, msg );
	    break;

	case OM_NEW:
	    if ( retval = (ULONG)(newobj = (Object *) SSM( cl, o, msg )) )
	{
		setGTButtonIAttrs( cl, newobj, msg );
	}
	    break;
	default:
	    retval = (ULONG) SSM( cl, o, msg );
    }
    return( retval );
}


/*------------------------------------------------------------------------*/

void setGTButtonIAttrs( Class *cl, Object *obj, Msg msg )
{
    struct LocalObjectData *idata = INST_DATA( cl, obj );
    struct TagItem *taglist = ((struct opSet *)msg)->ops_AttrList;

    idata->lod_IntuiText = (struct IntuiText *)
	getTagData( MYIA_IText, (ULONG)idata->lod_IntuiText, taglist);
}

/*------------------------------------------------------------------------*/

static VOID drawGTButtonI( Class *cl, Object *o, struct impDraw *msg )
{
    struct IBox box;
    BOOL selected;

    UBYTE penText = 1;
    UBYTE penShine = 2;
    UBYTE penShadow = 1;
    UBYTE penFillText = 1;

    struct DrawInfo *drinfo;

    struct LocalObjectData *idata = INST_DATA( cl, o );

d276 1
a276 1
    if ( drinfo = msg->imp_DrInfo )
d278 4
a281 4
	penText = drinfo->dri_Pens[ TEXTPEN ];
	penShine = drinfo->dri_Pens[ SHINEPEN ];
	penShadow = drinfo->dri_Pens[ SHADOWPEN ];
	penFillText = drinfo->dri_Pens[ FILLTEXTPEN ];
d285 1
a285 1
    box = *IM_BOX( IM(o) );
d287 1
a287 1
    box.Top += msg->imp_Offset.Y;
d289 1
a289 4
    DP(("dBCI: LTWH = %ld, %ld, %ld, %ld\n",
	box.Left, box.Top, box.Width, box.Height));
    selected = ((msg->imp_State == IDS_SELECTED) ||
	(msg->imp_State == IDS_INACTIVESELECTED));
a358 1
    DP(("dBCI: About to draw border\n"));
d363 1
a363 37
	    box.Left, box.Top);
    }
    DP(("dBCI: Back from DrawBorder\n"));

    DP(("dBCI: All done\n"));
}


/*------------------------------------------------------------------------*/
#ifdef ALGOBORDER
/* AlgoBorder()
 *
 * Generate a border algorithmically, based on a data description.
 * Takes a border, an overright (i.e. left+width, or right+1),
 * an overbottom, a pointer to borderdata, and a paircount.
 * The border data is paircount data-pairs.  Positive numbers are
 * relative to the left or top (i.e. absolute), and negative values
 * are added to overright or overbottom.
 *
 */

void AlgoBorder( struct Border *border, UWORD overright, UWORD overbottom,
    BYTE *borderdata, UWORD paircount )
{
    BYTE data;
    UWORD *pointstore = border->XY;

    border->LeftEdge = 0;
    border->TopEdge = 0;
    border->DrawMode = JAM1;
    border->Count = paircount;
    while (paircount--)
    {
	data = *borderdata++;
	*pointstore++ = ( data >= 0 ) ? data : overright+data;
	data = *borderdata++;
	*pointstore++ = ( data >= 0 ) ? data : overbottom+data;
a365 3

#endif
/*------------------------------------------------------------------------*/
@


39.3
log
@Added getBevelImage() function.
@
text
@d7 1
a7 1
*   $Id: render.c,v 39.2 92/02/03 15:49:40 peter Exp Locker: peter $
d42 1
a42 1
VOID drawGTButtonI ( Class *cl, Object *o, struct impDraw *msg);
d59 1
a59 1
    return ( (struct Image *)NewObject( NULL, FrameIClassName,
d149 2
a150 2
*	DrawBevelBoxA -- Draws a bevelled box. (V36)
*	DrawBevelBox -- Varargs stub for DrawBevelBox(). (V36)
d153 1
a153 1
*	DrawBevelBoxA(rport, left, top, width, height, taglist)
d157 1
a157 1
*	    struct TagItem *taglist);
d159 1
a159 1
*	DrawBevelBox(rport, left, top, width, height, firsttag, ...)
d162 1
a162 1
*	    Tag, ...);
d165 2
a166 2
*	DrawBevelBoxA() renders a bevelled box of specified dimensions
*	into the supplied RastPort.
d169 6
a174 6
*	rport - The RastPort into which the box is to be drawn.
*	left - The left edge of the box.
*	top - The top edge of the box.
*	width - The width of the box.
*	height - The height of the box.
*	taglist - Pointer to a TagItem list.
d177 2
a178 4
*	GTBB_Recessed (BOOL):  Set to anything for a recessed-looking box.
*	    If absent, the box defaults, it would be raised.
*	GT_VisualInfo (APTR):  You MUST supply the value you obtained
*	    from an earlier call to GetVisualInfoA().
d180 7
a186 2
*   RESULT
*	None.
d188 3
a190 1
*   EXAMPLE
d193 1
a193 1
*	DrawBevelBox() is a rendering operation, not a gadget.  That
a196 2
*   BUGS
*
d215 3
a217 3
    ULONG frametype = FRAME_BUTTON;
    struct VisualInfo *vi;
    struct Image *bevelimage;
d222 6
a227 1
	if ( findGTTagItem( GTBB_Recessed, taglist ) )
d229 2
a230 1
	    frametype = FRAME_BUTTON | FRAMETYPE_RECESSED;
a231 6
	if ( bevelimage = getBevelImage( 0, 0, width, height, frametype ) )
	{
	    DrawImageState( rport, bevelimage, left, top,
		IDS_NORMAL, vi->vi_DrawInfo );
	    DisposeObject( bevelimage );
	}
d277 1
a277 1
	    drawGTButtonI( cl, o, msg );
d311 1
a311 1
VOID drawGTButtonI( Class *cl, Object *o, struct impDraw *msg )
d420 1
a420 1
	
@


39.2
log
@SetABPenDrMd() optimization.  Deleted obsolete internal autodocs.
BorderCompIClass now adds the BevelBox itself, and changes the way
ImageData is used.
@
text
@d7 1
a7 1
*   $Id: render.c,v 39.1 92/01/30 19:54:29 peter Exp Locker: peter $
a27 6
/* Internal: */
struct Border *MakeBevelBox (struct BevelBox *bbox,
    WORD left, WORD top, WORD width, WORD height, BOOL shadow,
    struct VisualInfo *vi);


d49 1
a49 1
#define IM(o)	((struct Image *)(o))	/* transparent base class */
d53 1
a53 1
/* MakeBevelBox() */
d55 1
a55 19
#ifdef ALGOBORDER
BYTE TrimBorderData[] =
{
     0, 0,
     0,-1,
     1,-2,
     1, 0,
    -1, 0,
};

BYTE ShadowBorderData[] =
{
     1,-1,
    -2,-1,
    -2, 1,
    -1, 0,
    -1,-1,
};
#endif
d57 1
a57 3
struct Border *MakeBevelBox( struct BevelBox *bbox,
    WORD left, WORD top, WORD width, WORD height, BOOL shadow,
    struct VisualInfo *vi )
d59 9
a67 72
#ifndef ALGOBORDER
    WORD *p;
#endif
    UBYTE shinepen, shadowpen;

    /* Fill out the two border structures: */

    DP(("MBB:  VisualInfo at $%lx\n", vi));
    DP(("MBB:  DrawInfo at $%lx\n", vi->vi_DrawInfo));
    DP(("MBB:  shinePen = %ld\n", vi->vi_shinePen));
    DP(("MBB:  shadowPen = %ld\n", vi->vi_shadowPen));
    shinepen = vi->vi_shinePen;
    shadowpen = vi->vi_shadowPen;
    bbox->bb_TrimBorder.FrontPen = shadowpen;
    bbox->bb_TrimBorder.BackPen = DESIGNSHADOW;
    bbox->bb_ShadowBorder.FrontPen = shinepen;
    bbox->bb_ShadowBorder.BackPen = DESIGNSHINE;
    if (shadow)
    {
	bbox->bb_TrimBorder.FrontPen = shinepen;
	bbox->bb_ShadowBorder.FrontPen = shadowpen;
	bbox->bb_TrimBorder.BackPen = DESIGNSHINE;
	bbox->bb_ShadowBorder.BackPen = DESIGNSHADOW;
    }

#ifdef ALGOBORDER
    bbox->bb_TrimBorder.XY = bbox->bb_TrimPoints;
    AlgoBorder( &bbox->bb_TrimBorder, left+width, top+height,
	TrimBorderData, BB_TRIMCOUNT );

    bbox->bb_ShadowBorder.XY = bbox->bb_ShadowPoints;
    AlgoBorder( &bbox->bb_ShadowBorder, left+width, top+height,
	ShadowBorderData, BB_SHADOWCOUNT );

    bbox->bb_TrimBorder.NextBorder = &bbox->bb_ShadowBorder;

#else
    bbox->bb_TrimBorder.LeftEdge = 0;
    bbox->bb_TrimBorder.TopEdge = 0;
    bbox->bb_TrimBorder.DrawMode = JAM1;
    bbox->bb_TrimBorder.Count = BB_TRIMCOUNT;
    bbox->bb_TrimBorder.XY = bbox->bb_TrimPoints;
    bbox->bb_TrimBorder.NextBorder = &bbox->bb_ShadowBorder;

    bbox->bb_ShadowBorder.LeftEdge = 0;
    bbox->bb_ShadowBorder.TopEdge = 0;
    bbox->bb_ShadowBorder.DrawMode = JAM1;
    bbox->bb_ShadowBorder.Count = BB_SHADOWCOUNT;
    bbox->bb_ShadowBorder.XY = bbox->bb_ShadowPoints;
    bbox->bb_ShadowBorder.NextBorder = NULL;

    /* Fill out the border points, based on the four coordinates: */
    p = bbox->bb_TrimPoints;

    *p++ = left;		*p++ = top;
    *p++ = left;		*p++ = top+height-1;
    *p++ = left+1;		*p++ = top+height-2;
    *p++ = left+1;		*p++ = top;
    *p++ = left+width-1;	*p++ = top;

/* Because of how we set up struct BevelBox, p is already pointing here! */
/* p = bbox->bb_ShadowPoints; */

    *p++ = left+1;		*p++ = top+height-1;
    *p++ = left+width-2;	*p++ = top+height-1;
    *p++ = left+width-2;	*p++ = top+1;
    *p++ = left+width-1;	*p++ = top;
/** NOTE WELL:  The last post-increment is deliberately missing (optimization) **/
    *p++ = left+width-1;	*p = top+height-1;
#endif

    return((struct Border *)bbox);
a69 1

d212 1
d214 1
a214 1
    struct BevelBox bbox;
d219 10
a228 5
	DP(("DBB:  vi at $%lx\n", vi));
	DrawBorder(rport, MakeBevelBox(&bbox,
	   left, top, width, height,
	   (BOOL) !findGTTagItem(GTBB_Recessed, taglist), vi),
	    0, 0);
a236 2
    UWORD *lod_Pens;
    struct BevelBox lod_BevelBox;
d247 2
a248 1
    if ( cl = MakeClass( NULL, "imageclass", NULL, sizeof(struct LocalObjectData), 0 ) )
d273 1
a300 1
    struct VisualInfo *vi;
a303 14

    if ( vi = (struct VisualInfo *)getTagData( MYIA_VisualInfo, NULL, taglist ) )
    {
	idata->lod_Pens = vi->vi_DrawInfo->dri_Pens;

	/* We make a standard BevelBox around the image */
	MakeBevelBox( &idata->lod_BevelBox,
	    0, 0, IM(obj)->Width, IM(obj)->Height,
	    BB_RAISED, vi );
    }
    /* IA_Data points to caller-supplied border structures.
     * Our superclass takes care of stuffing IA_Data into IM(o)->ImageData.
     */
    idata->lod_BevelBox.bb_ShadowBorder.NextBorder = (struct Border *)IM(obj)->ImageData;
a310 1
    struct Border *border;
d312 8
a319 3
    UBYTE designShine;
    UBYTE designShadow;
    UBYTE designText;
d322 9
a340 16
    /* This is ugly but efficient:  for each border on the list,
     * the (unused) BackPen field will be DESIGNSHINE or DESIGNSHADOW
     * or 0, indicating that this border was intended to be drawn
     * with shine or shadow or something else.
     * We key off this and set the FrontPen to SHINEPEN or SHADOWPEN
     * or leave it alone, respectively.  If the gadget is selected,
     * we invert the assignment of SHINEPEN and SHADOWPEN.
     * The actual pen values of SHINEPEN and SHADOWPEN have been
     * placed in the image->PlanePick and PlaneOnOff using
     * IA_FGPen and IA_BGPen respectively.
     */
    border = (struct Border *)&idata->lod_BevelBox;
    designShine = idata->lod_Pens[ SHINEPEN ];
    designShadow = idata->lod_Pens[ SHADOWPEN ];
    designText = idata->lod_Pens[ TEXTPEN ];
    if (selected)
d342 10
a351 2
	/* Since we're going to change designText anyways, we can use
	 * it as a temp-variable
d353 38
a390 4
	designText = designShine;
	designShine = designShadow;
	designShadow = designText;
	designText = idata->lod_Pens[ FILLTEXTPEN ];
a392 30
    while (border)
    {
	DP(("dBCI: coloring border at $%lx\n", border));
	if (border->BackPen == DESIGNSHINE)
	{
	    border->FrontPen = designShine;
	}
	else if (border->BackPen == DESIGNSHADOW)
	{
	    border->FrontPen = designShadow;
	}
	else if (border->BackPen == DESIGNTEXT)
	{
	    border->FrontPen = designText;
	}
	/* else leave FrontPen alone */
	border = border->NextBorder;
    }

    DP(("dBCI: Setting up for RectFill\n"));
    msg->imp_RPort->Mask = -1;
    SetABPenDrMd( msg->imp_RPort,
	idata->lod_Pens[ selected ? FILLPEN : BACKGROUNDPEN ],
	0, JAM1 );
    SetAfPt(msg->imp_RPort, NULL, 0)
    DP(("dBCI: About to RectFill\n"));
    /* RectFill the interior only */
    RectFill(msg->imp_RPort, box.Left+2, box.Top+1,
	box.Left + box.Width - 3, box.Top + box.Height - 2);

d400 5
a404 2
	    itext->FrontPen = idata->lod_Pens[ selected ?
		FILLTEXTPEN : TEXTPEN ];
d411 5
a415 2
    DrawBorder(msg->imp_RPort, ((struct Border *)&idata->lod_BevelBox),
	box.Left, box.Top);
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: render.c,v 38.2 92/01/28 08:28:56 peter Exp Locker: peter $
d42 1
a42 1
Class *initBorderCompIClass (void);
d44 1
a44 1
dispatchBorderCompI ( register __a0 Class *cl,
d47 2
a48 2
void setBorderCompIAttrs ( Class *cl, Object *obj, Msg msg);
VOID drawBorderCompI ( Class *cl, Object *o, struct impDraw *msg);
d51 1
a51 1
    WORD height, struct VisualInfo *vi);
d59 2
a60 45
/*i**** gadtools.library/MakeBevelBox ****************************************
*
*   NAME
*	MakeBevelBox - Make a bevelled box of specified size. (V36)
*
*   SYNOPSIS
*	border = MakeBevelBox(bbox, left, top, width, height, shadow)
*
*	struct Border *MakeBevelBox(struct BevelBox *, WORD, WORD,
*	    WORD, WORD, BOOL);
*
*   FUNCTION
*	MakeBevelBox() fills the supplied area of memory with a Border
*	which consists of a bevelled box.  The image may be of a raised
*	or recessed box.
*
*   INPUTS
*	bbox - An (uninitialized) area of memory of size
*	    sizeof(struct BevelBox) to receive the resulting border.
*	left - The left edge of the box.
*	top - The top edge of the box.
*	width - The width of the box.
*	height - The height of the box.
*	shadow - Set to BB_RAISED or BB_RECESSED depending on whether
*	    the box should be raised or recessed.
*
*   RESULT
*	border - Pointer to the resulting border (same pointer as your
*	    supplied bbox).
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	DrawBevelBox(), internal/gadtools.h
*
******************************************************************************
*
* Created:  30-May-89, Peter Cherna
* Modified: 14-Feb-90, Peter Cherna
*
*/
d185 1
a185 1
    WORD gadheight, struct VisualInfo *vi )
d190 1
a190 1
    WORD height;
d322 1
d327 1
a327 1
Class *initBorderCompIClass( void )
d331 1
a331 1
    DP(("init BorderCompIClass\n"));
d335 1
a335 1
	cl->cl_Dispatcher.h_SubEntry = dispatchBorderCompI;
d347 1
a347 1
dispatchBorderCompI( register __a0 Class *cl,
d358 1
a358 1
	    drawBorderCompI( cl, o, msg );
d363 1
a363 1
	    setBorderCompIAttrs( cl, o, msg );
d369 1
a369 1
		setBorderCompIAttrs( cl, newobj, msg );
d381 1
a381 1
void setBorderCompIAttrs( Class *cl, Object *obj, Msg msg )
d385 1
d390 13
a402 1
    idata->lod_Pens = (UWORD *)getTagData( IA_Pens, (ULONG) idata->lod_Pens, taglist);
d407 1
a407 1
VOID drawBorderCompI( Class *cl, Object *o, struct impDraw *msg )
d438 1
a438 1
    border = (struct Border *)IM(o)->ImageData;
d474 3
a476 2
    SetAPen(msg->imp_RPort, idata->lod_Pens[ selected ? FILLPEN : BACKGROUNDPEN ] );
    SetDrMd(msg->imp_RPort, JAM1);
d498 1
a498 1
    DrawBorder(msg->imp_RPort, ((struct Border *)IM(o)->ImageData),
@


38.2
log
@Removed __saveds.  Eliminated unneeded "last" post-increment.
@
text
@d7 1
a7 1
*   $Id: render.c,v 38.1 91/11/27 13:26:33 peter Exp Locker: peter $
a8 49
*   $Log:	render.c,v $
 * Revision 38.1  91/11/27  13:26:33  peter
 * Now uses callCHook instead of ugly C to establish hook context.
 * 
 * Revision 38.0  91/07/11  12:32:48  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.11  91/04/08  13:26:28  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.10  91/03/14  16:08:08  peter
*   Fixed error in register-list of DrawBevelBox() autodoc.
*   
*   Revision 36.9  91/01/07  21:01:15  peter
*   Fixed typo in the autodocs.
*   
*   Revision 36.8  90/12/01  20:19:11  peter
*   Updated autodocs.
*   
*   Revision 36.7  90/12/01  20:06:33  peter
*   BorderCompIClass was calling setBorderCompIAttrs() even if the OM_NEW
*   failed (caused enforcer hits).
*   
*   Revision 36.6  90/11/19  12:54:41  peter
*   BorderCompIClass now respects more pens (TEXTPEN, FILLTEXTPEN, FILLPEN).
*   The monochrome appearance of buttons and cycle gadgets is fixed.
*   BorderCompIClass now affects pens of the whole linked list of IntuiTexts.
*   
*   Revision 36.5  90/11/07  19:41:40  peter
*   Added BorderCompIClass to achieve the right look for buttons and
*   cycle gadgets in >2 bit planes.
*   MakeBevelBox() has changes to conspire correctly with BorderCompIClass.
*   Added MakeCycleBorder() to build the cycle gadget glyph.
*   Now takes advantage of vi_shinePen and vi_ShadowPen.
*   
*   Revision 36.4  90/10/12  19:43:23  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   
*   Revision 36.3  90/05/18  18:32:16  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.2  90/04/12  16:18:42  peter
*   Put register and varargs information into autodocs.
*   
*   Revision 36.1  90/03/16  14:02:26  peter
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Public: */
d28 1
a28 1
/*  Internal: */
d35 2
a36 1
   way.  Makes the code bigger, unfortunately! */
d106 1
a106 1
    {
d112 1
a112 1
    };
d115 1
a115 1
    {
d121 1
a121 1
    };
d124 1
a124 1
struct Border *MakeBevelBox(struct BevelBox *bbox,
d126 2
a127 3
    struct VisualInfo *vi)

    {
d133 1
a133 1
    /*  Fill out the two border structures: */
d146 1
a146 1
	{
d151 1
a151 1
	}
d179 1
a179 1
    /*  Fill out the border points, based on the four coordinates: */
d188 2
a189 2
/*  Because of how we set up struct BevelBox, p is already pointing here! */
/*  p = bbox->bb_ShadowPoints; */
d200 1
a200 1
    }
d207 1
a207 1
    {
d224 1
a224 1
    };
d227 3
a229 7
struct Border *MakeCycleBorder(cycleborder, gadheight, vi)

    struct CycleBorder *cycleborder;
    WORD gadheight;
    struct VisualInfo *vi;

    {
d235 1
a235 1
    /*  Fill out the the border structure: */
d251 1
a251 1
    /*  Fill out the border points, based on the four coordinates: */
d274 1
a274 1
    }
d338 7
a344 8
LIB_DrawBevelBoxA(register __a0 struct RastPort *rport,
		  register __d0 WORD left,
		  register __d1 WORD top,
		  register __d2 WORD width,
		  register __d3 WORD height,
		  register __a1 struct TagItem *taglist)

    {
d348 1
a348 1
    /*  Get tough and require GT_VisualInfo or else don't draw anything */
d350 1
a350 1
	{
a355 1
	}
d357 1
d362 1
a362 1
    {
d365 1
a365 1
    };
d369 2
a370 3
Class *initBorderCompIClass(void)

    {
d376 1
a376 1
	{
d381 1
a381 1
	}
d383 1
a383 1
    }
d392 1
a392 1
    {
d397 1
a397 1
	{
d410 1
a410 1
	    {
d412 1
a412 1
	    }
d416 1
a416 1
	}
d418 1
a418 1
    }
d423 2
a424 7
void setBorderCompIAttrs( cl, obj, msg )

    Class *cl;
    Object *obj;
    Msg msg;

    {
d432 1
a432 1
    }
d436 2
a437 7
VOID drawBorderCompI( cl, o, msg )

    Class *cl;
    Object *o;
    struct impDraw *msg;	/* superset of impDraw	*/

    {
d472 1
a472 1
	{
d474 2
a475 1
	   it as a temp-variable */
d480 1
a480 1
	}
d483 1
a483 1
	{
d486 1
a486 1
	    {
d488 1
a488 1
	    }
d490 1
a490 1
	    {
d492 1
a492 1
	    }
d494 1
a494 1
	    {
d496 1
a496 1
	    }
d499 1
a499 1
	}
d512 1
a512 1
	{
d517 1
a517 1
	    {
d520 1
a520 1
	    }
d522 1
a522 1
	}
d525 1
a525 1
    /*  Then draw the border on top */
d531 1
a531 1
    }
d547 3
a549 9
void AlgoBorder( border, overright, overbottom, borderdata, paircount )

    struct Border *border;
    UWORD overright;
    UWORD overbottom;
    BYTE *borderdata;
    UWORD paircount;

    {
d558 1
a558 1
	{
a562 1
	}
d564 1
@


38.1
log
@Now uses callCHook instead of ugly C to establish hook context.
@
text
@d7 1
a7 1
*   $Id: render.c,v 38.0 91/07/11 12:32:48 peter Exp Locker: peter $
d10 3
d69 1
a69 1
void __saveds __asm
d91 1
a91 1
ULONG __asm __saveds
d244 2
a245 1
    *p++ = left+width-1;	*p++ = top+height-1;
d322 2
a323 1
    *p++ = 8;		*p++ = height-2;
d390 1
a390 1
void __saveds __asm
d443 1
a443 1
ULONG __asm __saveds
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: render.c,v 36.11 91/04/08 13:26:28 peter Exp $
d10 3
d88 1
a88 1
ULONG __asm
d427 2
a428 1
	cl->cl_Dispatcher.h_Entry = dispatchBorderCompI;
d438 1
a438 1
ULONG __asm
a442 2
    /* !!! Very abominable but not incorrect way to preserve A6 */
    LONG oldA6 = getreg(REG_A6);
a445 3
    /* GadToolsBase is in h_Data.  Set up our context */
    putreg(REG_A6, (LONG)cl->cl_Dispatcher.h_Data);
    geta4();
a466 1
    putreg(REG_A6, oldA6);
@
