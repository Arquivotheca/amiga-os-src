head     39.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.10
date     92.05.29.15.31.56;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.04.24.10.24.21;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.04.15.11.35.11;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.13.13.50.52;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.07.13.38.25;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.24.15.14.37;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.03.15.04.57;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.11.49.42;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.47.20;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.52.24;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.30.18.08.14;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.18.40;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.34.28;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.10
log
@Removed requester support
Code optimizations
@
text
@/*** checkbox.c ***********************************************************
*
*   checkbox.c	- Checkbox gadget support routines
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: checkbox.c,v 39.9 92/04/24 10:24:21 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Internal: */
struct ExtGadget *CreateCheckBoxA (struct ExtGadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
void SetCheckBoxAttrsA (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);
BOOL HandleCheckbox (struct ExtGadget *gad, struct IntuiMessage *imsg);


/*---------------------------------------------------------------------*/

/* CreateCheckBoxA() */

struct ExtGadget *CreateCheckBoxA(struct ExtGadget *gad, struct NewGadget *ng,
                               struct TagItem *taglist)
{
    if (gad = CreateGenericBase(gad, ng, CHECKBOX_IDATA_SIZE,taglist))
    {
        /* V37 always had a fixed width checkbox.  We override for
         * compatibility, unless the new GTCB_Scaled tag is supplied.
         */
        if ( !getGTTagData( GTCB_Scaled, FALSE, taglist ) )
        {
            gad->Width = CHECKBOX_WIDTH;
            gad->Height = CHECKBOX_HEIGHT;
            gad->BoundsWidth  = CHECKBOX_WIDTH;
            gad->BoundsHeight = CHECKBOX_HEIGHT;

            /* Here we do a strange thing.  For most gadget classes, the text
             * is contained in a box whose TopEdge corresponds to what
             * the caller calls ng.ng_TopEdge.  So for any given font size,
             * the font is a constant distance below this point.  Unfortunately,
             * for checkboxes (and mx gadgets), the ng_TopEdge represented the
             * TopEdge of the CheckBox gadget, but the text is not a fixed
             * distance below this point, but rather vertically centered
             * with respect to the checkbox height (a constant).  So the
             * bigger the font, the higher it would appear.
             *
             * Smart checkboxes (GTCB_Scaled) allows checkboxes of arbitrary
             * height.  In these cases, the font is positioned correctly.
             *
             * In the meantime, we behave similar to that, except the checkbox
             * is of fixed size, and IT is vertically-centered within such
             * a space.  Things are arranged so that for 8-point fonts, the
             * positions are exactly as before.  With the new scheme, the text
             * will appear one pixel lower than before for every two pixels
             * of font height above 8.  This makes font-sensitive layout by
             * a GadTools client possible.
             */

            /* Since we default to PLACETEXT_LEFT, we want this adjustment
             * when the place field is LEFT, RIGHT, or zero.  The most efficient
             * coding for that is to say <= PLACETEXT_RIGHT.  Works out because
             * we got lucky chosing #defines.  Not pretty, but small!
             */
            if ( ( (ng->ng_Flags & PLACETEXT_MASK) <= PLACETEXT_RIGHT ) && (gad->GadgetText))
            {
                gad->TopEdge += (ng->ng_TextAttr->ta_YSize-7)/2;
                gad->BoundsTopEdge = gad->TopEdge;
            }
        }

        gad->Flags |= GADGIMAGE | GADGHIMAGE;
        SetCheckBoxAttrsA(gad,NULL,taglist);
        gad->Activation = RELVERIFY | TOGGLESELECT;
        gad->GadgetType |= BOOLGADGET;

        placeGadgetText(gad, ng->ng_Flags, PLACETEXT_LEFT, NULL);

        SGAD(gad)->sg_SetAttrs     = SetCheckBoxAttrsA;
        SGAD(gad)->sg_EventHandler = HandleCheckbox;
        SGAD(gad)->sg_GetTable     = Checkbox_GetTable;

        if (!(gad->SelectRender = gad->GadgetRender = getSysImage(ng->ng_VisualInfo,gad->Width,gad->Height,CHECKIMAGE)))
            return(NULL);
    }

    DP(("CCB:  Done\n"));

    return(gad);
}

/*------------------------------------------------------------------------*/

/*/ HandleCheckbox()
 *
 * Function to handle IDCMP events that relate to Checkbox gadgets.
 * Call this with each IDCMP message that relates to a checkbox gadget.
 *
 */

BOOL HandleCheckbox( struct ExtGadget *gad, struct IntuiMessage *imsg )
{
    DP(("HCB:  Entry\n"));

    imsg->Code = CBID(gad)->cbid_Checked = ((gad->Flags & GFLG_SELECTED) != 0);

    return(TRUE);
}

/*------------------------------------------------------------------------*/

void SetCheckBoxAttrsA(struct ExtGadget *gad, struct Window *win,
                       struct TagItem *taglist)
{
struct TagItem *ti;

    if (ti = findGTTagItem(GTCB_Checked,taglist))
    {
	CBID(gad)->cbid_Checked = (ti->ti_Data != 0);
	SelectGadget(gad,win,CBID(gad)->cbid_Checked);
    }

    TagAbleGadget(gad,win,taglist);

    DP(("SCBA:  Exit\n"));
}
@


39.9
log
@Fixed help bounding box positioning
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.8 92/04/15 11:35:11 vertex Exp Locker: vertex $
d20 1
a20 1
struct Gadget *CreateCheckBoxA (struct Gadget *gad, struct NewGadget *ng,
d22 3
a24 3
void SetCheckBoxAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
BOOL HandleCheckbox (struct Gadget *gad, struct IntuiMessage *imsg);
d31 1
a31 1
struct Gadget *CreateCheckBoxA(struct Gadget *gad, struct NewGadget *ng,
d43 2
a44 2
            ((struct ExtGadget *)gad)->BoundsWidth  = CHECKBOX_WIDTH;
            ((struct ExtGadget *)gad)->BoundsHeight = CHECKBOX_HEIGHT;
d76 1
a76 1
                ((struct ExtGadget *)gad)->BoundsTopEdge = gad->TopEdge;
d81 1
a81 1
        SetCheckBoxAttrsA(gad,NULL,NULL,taglist);
d109 1
a109 1
BOOL HandleCheckbox( struct Gadget *gad, struct IntuiMessage *imsg )
d120 2
a121 2
void SetCheckBoxAttrsA(struct Gadget *gad, struct Window *win,
                       struct Requester *req, struct TagItem *taglist)
d128 1
a128 1
	SelectGadget(gad,win,req,CBID(gad)->cbid_Checked);
d131 1
a131 1
    TagAbleGadget(gad,win,req,taglist);
@


39.8
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.7 92/04/13 13:50:52 vertex Exp Locker: vertex $
d43 3
d76 1
@


39.7
log
@Moved some stuff around to save bytes
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.6 92/04/07 13:38:25 vertex Exp Locker: vertex $
@


39.6
log
@Made CreateXX() use SetXX() instead of duplicating the code
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.5 92/03/24 15:14:37 peter Exp Locker: vertex $
d31 2
a32 2
struct Gadget *CreateCheckBoxA( struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist )
d34 1
a34 13
    DP(("Intended width/height:  %ld/%ld\n", (LONG)CHECKBOX_WIDTH,
	(LONG)CHECKBOX_HEIGHT));

    gad = CreateGenericBase(gad, ng, CHECKBOX_IDATA_SIZE,
	taglist);

    if (!gad)
	return(NULL);

    /* V37 always had a fixed width checkbox.  We override for
     * compatibility, unless the new GTCB_Scaled tag is supplied.
     */
    if ( !getGTTagData( GTCB_Scaled, FALSE, taglist ) )
d36 50
a85 39
	gad->Width = CHECKBOX_WIDTH;
	gad->Height = CHECKBOX_HEIGHT;
	/* Here we do a strange thing.  For most gadget classes, the text
	 * is contained in a box whose TopEdge corresponds to what
	 * the caller calls ng.ng_TopEdge.  So for any given font size,
	 * the font is a constant distance below this point.  Unfortunately,
	 * for checkboxes (and mx gadgets), the ng_TopEdge represented the
	 * TopEdge of the CheckBox gadget, but the text is not a fixed
	 * distance below this point, but rather vertically centered
	 * with respect to the checkbox height (a constant).  So the
	 * bigger the font, the higher it would appear.
	 *
	 * Smart checkboxes (GTCB_Scaled) allows checkboxes of arbitrary
	 * height.  In these cases, the font is positioned correctly.
	 *
	 * In the meantime, we behave similar to that, except the checkbox
	 * is of fixed size, and IT is vertically-centered within such
	 * a space.  Things are arranged so that for 8-point fonts, the
	 * positions are exactly as before.  With the new scheme, the text
	 * will appear one pixel lower than before for every two pixels
	 * of font height above 8.  This makes font-sensitive layout by
	 * a GadTools client possible.
	 */

	/* Since we default to PLACETEXT_LEFT, we want this adjustment
	 * when the place field is LEFT, RIGHT, or zero.  The most efficient
	 * coding for that is to say <= PLACETEXT_RIGHT.  Works out because
	 * we got lucky chosing #defines.  Not pretty, but small!
	 */
	if ( ( (ng->ng_Flags & PLACETEXT_MASK) <= PLACETEXT_RIGHT ) && (gad->GadgetText))
	{
	    gad->TopEdge += (ng->ng_TextAttr->ta_YSize-7)/2;
	}
    }

    gad->Flags |= GADGIMAGE | GADGHIMAGE;
    SetCheckBoxAttrsA(gad,NULL,NULL,taglist);
    gad->Activation = RELVERIFY | TOGGLESELECT;
    gad->GadgetType |= BOOLGADGET;
d87 2
a88 11
    placeGadgetText(gad, ng->ng_Flags, PLACETEXT_LEFT, NULL);

    SGAD(gad)->sg_SetAttrs = SetCheckBoxAttrsA;
    SGAD(gad)->sg_EventHandler = HandleCheckbox;
    SGAD(gad)->sg_GetTable = Checkbox_GetTable;
    DP(("CCB:  SetAttrs fcn at $%lx\n", SetCheckBoxAttrsA));

    if ( !( gad->SelectRender = gad->GadgetRender =
	getSysImage( ng->ng_VisualInfo, gad->Width, gad->Height, CHECKIMAGE ) ) )
    {
	return(NULL);
d91 1
a91 1
    DP(("CCB:  Boopsi Check Image at $%lx\n", gad->GadgetRender));
a92 1
    DP(("CCB:  Done\n"));
d107 1
a107 1
    LONG checked = FALSE;
d109 1
a109 8
    DP(("HCB:  Entry\n"));
    /* Activate the gadget, and see if it was not the active one: */
    if ( gad->Flags & GFLG_SELECTED )
    {
	checked = TRUE;
    }
    CBID(gad)->cbid_Checked = checked;
    imsg->Code = checked;
d116 2
a117 2
void SetCheckBoxAttrsA( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
d119 1
a119 1
    struct TagItem *ti;
d121 1
a121 1
    if (ti = findGTTagItem(GTCB_Checked, taglist))
d123 2
a124 10
	ULONG checked = ti->ti_Data;
	SelectGadget( gad, win, req, checked );
	if ( checked )
	{
	    CBID(gad)->cbid_Checked = TRUE;
	}
	else
	{
	    CBID(gad)->cbid_Checked = FALSE;
	}
d126 3
a128 2
    /* Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
    TagAbleGadget(gad, win, req, taglist);
@


39.5
log
@Supports GetAttrs of GTCB_Checked and GA_Disabled.  Added instance
data and event-handler.  Now returns checked state in code.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.4 92/03/03 15:04:57 peter Exp Locker: peter $
d84 1
a84 5
    if ( getGTTagData(GTCB_Checked, FALSE, taglist) )
    {
	gad->Flags |= SELECTED;
	CBID(gad)->cbid_Checked = TRUE;
    }
a155 2

/*------------------------------------------------------------------------*/
@


39.4
log
@GTCB_Scaled is now accepted to scale the checkbox image.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.3 92/02/20 11:49:42 peter Exp Locker: peter $
a12 10
/*
 * Notes:
 * Do I want to put in a HandleCheckBox() routine that basically
 * stuffs the state of the SELECTED bit into IntuiMessage->Code?
 * This way there can be a reading of the checkbox synchronous
 * with the action, instead of asynch.
 */

/*------------------------------------------------------------------------*/

d24 2
d37 2
a38 1
    gad = CreateGadgetA(GENERIC_KIND, gad, ng, taglist);
d87 1
d95 2
d113 24
a136 42
/*i**** gadtools.lib/SetCheckBoxAttrsA ***************************************
*
*   NAME
*	SetCheckBoxAttrsA -- Change the attributes of a checkbox gadget. (V36)
*
*   SYNOPSIS
*	SetCheckBoxAttrsA(win, gad, taglist)
*
*	void SetCheckBoxAttrs(struct Window *, struct Gadget *,
*	    struct TagItem *);
*
*   FUNCTION
*	Changes the selected state of a checkbox gadget.
*	The gadget is refreshed for you.
*
*   INPUTS
*	win - A pointer to the gadget's window.
*	gad - A pointer to the checkbox gadget (as returned by
*	    CreateCheckBox()).
*	taglist - Pointer to a TagItem list.
*
*   TAGS
*	GTCB_Checked (BOOL) - The desired new state of the checkbox.
*
*   RESULT
*	None.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateCheckBox()
*
******************************************************************************
*
* Created:  21-Nov-89, Peter Cherna
* Modified:  8-Jan-90, Peter Cherna
*
*/
d145 10
a154 1
	SelectGadget( gad, win, req, ti->ti_Data );
@


39.3
log
@Now use SGAD() instead of SG_FROM_GAD().
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.2 92/02/03 15:47:20 peter Exp Locker: peter $
d42 2
a43 2
    DP(("Intended width/height:  %ld/%ld\n", (LONG)CHECKBOXWIDTH,
	(LONG)CHECKBOXHEIGHT));
d50 39
a88 2
    gad->Width = CHECKBOXWIDTH;
    gad->Height = CHECKBOXHEIGHT;
a97 33
    /* Here we do an evil thing.  For most gadget classes, the text
     * is contained in a box whose TopEdge corresponds to what
     * the caller calls ng.ng_TopEdge.  So for any given font size,
     * the font is a constant distance below this point.  Unfortunately,
     * for checkboxes (and mx gadgets), the ng_TopEdge represented the
     * TopEdge of the CheckBox gadget, but the text is not a fixed
     * distance below this point, but rather vertically centered
     * with respect to the checkbox height (a constant).  So the
     * bigger the font, the higher it would appear.
     *
     * The nice way to solve this would be allowing checkboxes to be
     * of arbitrary (specifically ng_TextAttr->ta_YSize+const) height.
     * Then the font would be positioned correctly.
     *
     * In the meantime, we behave similar to that, except the checkbox
     * is of fixed size, and IT is vertically-centered within such
     * a space.  Things are arranged so that for 8-point fonts, the
     * positions are exactly as before.  With the new scheme, the text
     * will appear one pixel lower than before for every two pixels
     * of font height above 8.  This makes font-sensitive layout by
     * a GadTools client possible.
     */

    /* Since we default to PLACETEXT_LEFT, we want this adjustment
     * when the place field is LEFT, RIGHT, or zero.  The most efficient
     * coding for that is to say <= PLACETEXT_RIGHT.  Works out because
     * we got lucky chosing #defines.  Not pretty, but small!
     */
    if ( ( (ng->ng_Flags & PLACETEXT_MASK) <= PLACETEXT_RIGHT ) && (gad->GadgetText))
    {
	gad->TopEdge += (ng->ng_TextAttr->ta_YSize-7)/2;
    }

d104 1
a104 1
	getSysImage( ng->ng_VisualInfo, CHECKIMAGE ) ) )
@


39.2
log
@Deleted obsolete internal autodocs.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 39.1 92/01/30 19:52:24 peter Exp Locker: peter $
a33 1
void ExtraFreeCheckBox (struct Gadget *gad);
d96 1
a96 1
    SG_FROM_GAD(gad)->sg_SetAttrs = SetCheckBoxAttrsA;
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Deleted some obsolete code.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 38.2 92/01/30 18:08:14 peter Exp Locker: peter $
d38 1
a38 54
/*i**** gadtools.library/CreateCheckBoxA *************************************
*
*   NAME
*	CreateCheckBoxA -- Create a checkbox gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateCheckBoxA(previous, newgad, taglist)
*	
*	struct Gadget *CreateCheckBoxA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *);
*
*   FUNCTION
*	CreateCheckBoxA() allocates and fills out a Gadget structure
*	based on the supplied NewGadget structure and on the toolkit's
*	definition of what a checkbox gadget looks and behaves like.
*	Checkbox gadgets currently have a predefined fixed size.
*	If the ng_GadgetText field of newgad is non-NULL, an IntuiText is
*	also allocated and filled out, and attached to the GadgetText
*	field of the new gadget.  By default, the IntuiText is placed
*	to the left of the gadget.  CreateCheckBoxA() sets the NextGadget
*	field of the previous gadget to the newly created Gadget.
*	If previous is NULL, CreateCheckBoxA() returns NULL immediately.
*
*   INPUTS
*	previous - pointer to the previous gadget that this new gadget
*	    is to be linked to.
*	newgad - a filled in NewGadget structure describing the desired
*	    gadget's position, label, etc.
*	taglist - Pointer to TagItem list.
*
*   TAGS
*	GTCB_Checked (BOOL) - Initial state of checkbox, defaults to FALSE.
*
*   RESULT
*	gad - pointer to the new gadget, or NULL if the allocation failed
*	    or if previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*	These attributes may be changed by calling GT_SetGadgetAttrsA():
*	GTCB_Checked (BOOL) - State of checkbox.
*
*   BUGS
*
*   SEE ALSO
*	CreateGadgetA(), GT_SetGadgetAttrsA()
*
******************************************************************************
*
* Created:  10-Jul-89, Peter Cherna
* Modified:  9-May-90, Peter Cherna
*
*/
@


38.2
log
@Uses new space-saving placeGadgetText() function.  Minor other optimizations.
CheckImage is only allocated once per VisualInfo, and shared.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 38.1 91/11/27 13:18:40 peter Exp Locker: peter $
a8 49
*   $Log:	checkbox.c,v $
 * Revision 38.1  91/11/27  13:18:40  peter
 * AbleGadget() no longer has a 'count' parameter.
 * Uses new SelectGadget() call.
 * 
 * Revision 38.0  91/07/11  12:34:28  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.11  91/04/08  13:25:43  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.10  91/03/28  13:30:22  peter
*   Because SG_EXTRAFREE_DISPOSE was being set too early, DisposeObject() would
*   be called even if NewObject() had failed.
*   
*   Revision 36.9  90/11/07  19:43:03  peter
*   No longer use CheckBoxIData.  Now uses AddRefreshGList().  Use the
*   SG_EXTRAFREE_DISPOSE flag instead of ExtraFreeMX().
*   
*   Revision 36.8  90/10/12  19:44:01  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   Calls internal addGlist() and refreshGList() to save space.
*   
*   Revision 36.7  90/06/11  17:34:38  peter
*   Now passes SYSIA_DrawInfo to sysiclass as per new convention.
*   
*   Revision 36.6  90/05/18  18:29:42  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.5  90/05/15  14:15:58  peter
*   As required, now lies about screen depth for non-NewLook custom screens
*   when getting the glyph.
*   
*   Revision 36.4  90/04/06  00:53:18  peter
*   Put in fix to make font-sensitive layout manageable for checkboxes.
*   
*   Revision 36.3  90/04/02  16:02:42  peter
*   Warnings due to new clib/#?_protos.h eliminated.
*   Dropped prototype for DisposeObject().
*   GadgetType is now OR'd in.
*   
*   Revision 36.2  90/03/31  06:41:50  peter
*   Now use CreateGadgetA() instead of specific Create[xxx]GadgetA().
*   
*   Revision 36.1  90/03/16  14:02:42  peter
*   RCS Clean up.
*   
*
d14 6
a19 6
    Notes:
    Do I want to put in a HandleCheckBox() routine that basically
    stuffs the state of the SELECTED bit into IntuiMessage->Code?
    This way there can be a reading of the checkbox synchronous
    with the action, instead of asynch.
*/
d27 1
a27 1
/*  Function Prototypes: */
d29 1
a29 1
/*  Internal: */
a37 31
#ifdef undef
UWORD far NoCheckImageData[] =
    {
    0xFFFF, 0xFF80,	/*  1111 1111 1111 1111  1111 1111 1200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC07F, 0x8000,	/*  1100 0000 0111 1111  1000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0xC000, 0x0000,	/*  1100 0000 0000 0000  0000 0000 2200 */
    0x8000, 0x0000,	/*  1222 2222 2222 2222  2222 2222 2200 */

    0x0000, 0x0040,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x0000, 0x00C0,
    0x7FFF, 0xFFC0,
    };
#endif

/*---------------------------------------------------------------------*/

d93 3
a95 4
struct Gadget *CreateCheckBoxA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
a106 1
#if 11
d109 1
a109 1
	{
d111 1
a111 5
	}
#else
    gad->Flags |= ( getGTTagData(GTCB_Checked, FALSE, taglist) ) ?
	(GADGIMAGE | GADGHIMAGE | SELECTED) : (GADGIMAGE | GADGHIMAGE);
#endif
d115 22
a136 21
    /*  Here we do an evil thing.  For most gadget classes, the text
	is contained in a box whose TopEdge corresponds to what
	the caller calls ng.ng_TopEdge.  So for any given font size,
	the font is a constant distance below this point.  Unfortunately,
	for checkboxes (and mx gadgets), the ng_TopEdge represented the
	TopEdge of the CheckBox gadget, but the text is not a fixed
	distance below this point, but rather vertically centered
	with respect to the checkbox height (a constant).  So the
	bigger the font, the higher it would appear.

	The nice way to solve this would be allowing checkboxes to be
	of arbitrary (specifically ng_TextAttr->ta_YSize+const) height.
	Then the font would be positioned correctly.

	In the meantime, we behave similar to that, except the checkbox
	is of fixed size, and IT is vertically-centered within such
	a space.  Things are arranged so that for 8-point fonts, the
	positions are exactly as before.  With the new scheme, the text
	will appear one pixel lower than before for every two pixels
	of font height above 8.  This makes font-sensitive layout by
	a GadTools client possible. */
d144 1
a144 1
	{
d146 1
a146 1
	}
d153 3
a155 27
#if 00
	{
	struct DrawInfo *dri = VI(ng->ng_VisualInfo)->vi_DrawInfo;
	struct Image **im = &VI(ng->ng_VisualInfo)->vi_CheckImage;

	if ( !*im )
	    {
	    /*  Get the checkbox imagery from Intuition:
	     * Note that the only place this image is disposed
	     * is in FreeVisualInfo().
	     */
	    DP(("CCB:  Calling NewObject()\n"));
	    *im = NewObject(NULL, "sysiclass",
		SYSIA_Size, 0,
		SYSIA_DrawInfo, dri,
		SYSIA_Which, CHECKIMAGE,
		TAG_DONE);
	    if ( !*im )
		{
		return(NULL);
		}
	    }
	gad->SelectRender = gad->GadgetRender = *im;
	}
#else
    if ( !( gad->SelectRender = gad->GadgetRender = getSysImage( ng->ng_VisualInfo, CHECKIMAGE ) ) )
	{
d157 1
a157 2
	}
#endif
d163 1
a163 1
    }
d210 3
a212 4
void SetCheckBoxAttrsA(struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist)

    {
d216 1
a216 1
	{
d218 2
a219 2
	}
    /*  Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
d222 1
a222 1
    }
@


38.1
log
@AbleGadget() no longer has a 'count' parameter.
Uses new SelectGadget() call.
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 38.0 91/07/11 12:34:28 peter Exp Locker: peter $
d10 4
a176 8
    struct NewGadget mod_ng;
    struct Rectangle rect;
    ULONG place;

    mod_ng = *ng;

    mod_ng.ng_Width = CHECKBOXWIDTH;
    mod_ng.ng_Height = CHECKBOXHEIGHT;
d180 1
a180 1
    gad = CreateGadgetA(GENERIC_KIND, gad, &mod_ng, taglist);
d185 10
d197 1
a200 8
    /*  The extent of the visuals wrt the upper left of the actual gadget: */
    rect.MinX = 0;
    rect.MinY = 0;
    rect.MaxX = CHECKBOXWIDTH-1;
    rect.MaxY = CHECKBOXHEIGHT-1;
    if (!(place = (ng->ng_Flags & PLACETEXT_MASK)))
	place = PLACETEXT_LEFT;

d223 6
a228 1
    if ((place & (PLACETEXT_LEFT | PLACETEXT_RIGHT)) && (gad->GadgetText))
d233 1
a233 1
    PlaceIntuiText(gad->GadgetText, &rect, place);
d238 1
d241 1
d243 1
a243 10
	/*  Get the checkbox imagery from Intuition: */
	DP(("CCB:  Calling NewObject()\n"));
#ifndef SYSIA_DrawInfo
#define SYSIA_DrawInfo (IMAGE_ATTRIBUTES+24)
#endif
	if (!(gad->SelectRender = gad->GadgetRender = NewObject(NULL, "sysiclass",
	    SYSIA_Size, 0,
	    SYSIA_DrawInfo, dri,
	    SYSIA_Which, CHECKIMAGE,
	    TAG_DONE)))
d245 14
a258 1
	    return(NULL);
d260 6
a265 1
	SG_FROM_GAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;
d267 1
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: checkbox.c,v 36.11 91/04/08 13:25:43 peter Exp $
d10 3
a307 1
    UWORD pos;
d312 1
a312 17
	DP(("SCBA:  RemoveGList...\n"));
	pos = RemoveGList(win, gad, 1);
	if (ti->ti_Data)
	    {
	    gad->Flags |= SELECTED;
	    }
	else
	    {
	    gad->Flags &= ~SELECTED;
	    }
	AddRefreshGList(win, gad, pos, 1, NULL);
	DP(("SCBA:  Done setting state\n"));
	}
    if (ti = findGATagItem(GA_DISABLED, taglist))
	{
	/*  Do a regular enable/disable: */
	AbleGadget(gad, win, req, 1, (BOOL)ti->ti_Data);
d314 2
@
