head     38.2;
branch   ;
access   ;
symbols  ;
locks    vertex:38.2; strict;
comment  @ * @;


38.2
date     92.01.15.11.02.18;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.18.48;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.32.59;  author peter;  state Exp;
branches ;
next     ;


desc
@@


38.2
log
@Removed sketch gadget.  (File retired).
@
text
@/*** sketch.c *************************************************************
*
*   sketch.c	- Handles the Sketch gadget
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: sketch.c,v 38.1 91/11/27 13:18:48 peter Exp Locker: peter $
*
*   $Log:	sketch.c,v $
 * Revision 38.1  91/11/27  13:18:48  peter
 * Optimized extraction of instance data.
 * 
 * Revision 38.0  91/07/11  12:32:59  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.9  91/04/08  13:25:17  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.8  91/03/14  16:06:27  peter
*   Now uses stack-based tags instead of array-based ones when it calls
*   tag-based functions.
*   
*   Revision 36.7  90/10/12  19:43:39  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   
*   Revision 36.6  90/05/18  18:32:40  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.5  90/05/08  15:43:36  peter
*   Fixed bug in which you couldn't redraw over the last pixel you
*   drew in certain cases.
*   
*   Revision 36.4  90/04/06  00:56:21  peter
*   No longer uses user's RastPort.
*   
*   Revision 36.3  90/04/02  16:12:53  peter
*   Warnings due to new clib/#?_protos.h eliminated.
*   GadgetType is now OR'd in.
*   
*   Revision 36.2  90/03/31  06:42:48  peter
*   Now use CreateGadgetA() instead of specific Create[xxx]GadgetA().
*   
*   Revision 36.1  90/03/16  14:02:15  peter
*   RCS Clean up.
*   
*
**************************************************************************/

/* The sketch gadget is no longer part of GadTools.  This file is retired. */
@


38.1
log
@Optimized extraction of instance data.
@
text
@d7 1
a7 1
*   $Id: sketch.c,v 38.0 91/07/11 12:32:59 peter Exp Locker: peter $
d10 3
d50 1
a50 619
/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/*  Function Prototypes: */

/*  Internal: */
struct Gadget *CreateSketchA (struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
void RefreshSketch (struct Window *win, struct Gadget *sk, BOOL refresh);
BOOL HandleSketch (struct Gadget *gad, struct IntuiMessage *imsg);
void SetSketchAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
void MoveHotSpot (struct Window *win, struct Gadget *gad,
    UWORD newx, UWORD newy);
void DrawHotSpot (struct Window *win, struct Gadget *gad, UWORD color);

/*------------------------------------------------------------------------*/

/*i**** gadtools.library/CreateSketchA ***************************************
*
*   NAME
*	CreateSketchA -- Create a Sketch gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateSketchA(previous, ng, taglist)
*
*	struct Gadget *CreateSketchA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *);
*
*   FUNCTION
*	Allocates and initializes a Sketch gadget based on the supplied
*	NewGadget structure and tags.
*
*   INPUTS
*	previous - Pointer to the previous gadget.
*	ng - Pointer to an initialized NewGadget structure describing
*	    the desired gadget.
*	taglist - Pointer to a TagItem list.
*
*   TAGS
*	GTSK_BitMap (struct BitMap *) - BitMap to use (required).
*	GTSK_bmWidth (UWORD)-  Width of BitMap (defaults to
*	    BitMap->BytesPerRow * 8).
*	GTSK_bmHeight (UWORD) - Height of BitMap (defaults to BitMap->Rows).
*	GTSK_MagWidth (UWORD) - Horizontal magnification factor.  Also
*	    determines gadget width.  If not supplied, magnification will be
*	    derived from the gadget width.
*	GTSK_MagHeight (UWORD) - Vertical magnification factor.  Also
*	    determines gadget height.  If not supplied, magnification will be
*	    derived from the gadget height.
*	GTSK_Color (UWORD) - Color to draw with.
*	GTSK_FirstColor (UWORD) - First color to use when rendering.
*	GTSK_HotSpotX (UWORD) - X-coordinate of HotSpot (default ~0).
*	GTSK_HotSpotY (UWORD) - Y-coordinate of HotSpot (default ~0).
*	GTSK_HSXThick (UWORD) - X- thickness of HotSpot outline (default 1).
*	GTSK_HSYThick (UWORD) - Y-thickness of HotSpot outline (default 1).
*	GTSK_HSColor (UWORD) - Color to use for HotSpot outline (required).
*
*    RESULT
*	gad - Pointer to the resulting Sketch gadget, or NULL if failure
*	    or if previous was NULL.
*
*    EXAMPLE
*
*    NOTES
*	These attributes may be changed by calling GT_SetGadgetAttrsA():
*	GTSK_Color (UWORD) - Color to draw with.
*	GTSK_BitMap (struct BitMap *) - BitMap to use.  The display will
*	    be refreshed accordingly, so you may send the old bitmap if you've
*	    changed it externally.
*	GTSK_HotSpotX (UWORD) - X-coordinate of HotSpot (set it or
*	    GTSK_HotSpotY to ~0 to remove the HotSpot).
*	GTSK_HotSpotY (UWORD) - Y-coordinate of HotSpot (set it or
*	    GTSK_HotSpotX to ~0 to remove the HotSpot).
*	GTSK_SetHotSpot - Set this to make the user's next mouse action
*	    in the Sketch area select a new HotSpot.
*
*    BUGS
*
*    SEE ALSO
*	CreateGadgetA(), GT_SetGadgetAttrsA()
*
******************************************************************************
*
* Created:  01-Jun-89, Peter Cherna
* Modified: 14-Feb-90, Peter Cherna
*
*/

struct Gadget *CreateSketchA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
    struct SpecialGadget *sg;
    UWORD MagWidth, MagHeight;

    /*  !!! Note well:  the width/height of the gadget may change after
	the call to CreateGadgetA(GENERIC_KIND).  This should continue
	to be ok, but it was worth noting... */
    /*  Create the gadget, and allocate space for the Instance Data,
	a BevelBox, and a RastPort: */
    gad = CreateGenericBase(gad, ng, SKETCH_IDATA_SIZE +
	 sizeof(struct RastPort) + sizeof(struct BevelBox), taglist);
    if (!gad)
	return(NULL);

    DP(("CSk:  Got gadget at $%lx\n", gad));
    gad->Flags = GADGHNONE;
    gad->Activation = GADGIMMEDIATE | FOLLOWMOUSE | RELVERIFY;
    gad->GadgetType |= BOOLGADGET;

    sg = SG_FROM_GAD(gad);
    sg->sg_Refresh = RefreshSketch;
    sg->sg_EventHandler = HandleSketch;
    sg->sg_SetAttrs = SetSketchAttrsA;
    sg->sg_Flags |= SG_MOUSEMOVE;

    /*  Initialize a rastport for drawing into the actual working
	bitmap (not the scaled-up visible version) */
    SKID(gad)->skid_RastPort = (struct RastPort *) MEMORY_FOLLOWING(SKID(gad));
    InitRastPort(SKID(gad)->skid_RastPort);
    /*  Use the supplied bitmap: */
    SKID(gad)->skid_RastPort->BitMap = (struct BitMap *)getGTTagData(GTSK_BitMap,
	NULL, taglist);
    if (!SKID(gad)->skid_RastPort->BitMap)
	{
	return(NULL);
	}
    DP(("CSk:  Got supplied bitmap at $%lx\n", SKID(gad)->skid_RastPort->BitMap));

    SKID(gad)->skid_bmWidth = getGTTagData(GTSK_bmWidth,
	SKID(gad)->skid_RastPort->BitMap->BytesPerRow*8, taglist);
    SKID(gad)->skid_bmHeight = getGTTagData(GTSK_bmHeight,
	SKID(gad)->skid_RastPort->BitMap->Rows, taglist);

    if (!(MagWidth = getGTTagData(GTSK_MagWidth, 0, taglist)))
	{
	/*  Caller didn't want a specific scale, so we work out
	    what the scale would be: */
	MagWidth = (ng->ng_Width - (LRTRIM-1)) / SKID(gad)->skid_bmWidth;
	}
    /*  Figure out the actual width based on the supplied or calculated
	MagWidth: */
    gad->Width = SKID(gad)->skid_bmWidth * MagWidth + (LRTRIM-1);

    if (!(MagHeight = getGTTagData(GTSK_MagHeight, 0, taglist)))
	{
	/*  Caller didn't want a specific scale, so we work out
	    what the scale would be: */
	MagHeight = (ng->ng_Height - (TBTRIM-1)) / SKID(gad)->skid_bmHeight;
	}
    /*  Figure out the actual height based on the supplied or calculated
	MagHeight: */
    gad->Height = SKID(gad)->skid_bmHeight * MagHeight + (TBTRIM-1);

    SKID(gad)->skid_MagWidth = MagWidth;
    SKID(gad)->skid_MagHeight = MagHeight;
    SKID(gad)->skid_FirstColor = getGTTagData(GTSK_FirstColor, 0, taglist);
    SKID(gad)->skid_Color = getGTTagData(GTSK_Color, 1, taglist);
    DP(("CSk:  Color set to %ld\n", ((LONG) SKID(gad)->skid_Color)));

    /*  Set an invalid LastColor so that we are sure to not think
	that the first event is a replicate of some previous one.
	Don't have to invalidate LastX or LastY since all 3 must
	match for an event to be ignored: */
    SKID(gad)->skid_LastColor = ~0;

    gad->GadgetRender = (APTR) MakeBevelBox((struct BevelBox *)
	MEMORY_FOLLOWING(SKID(gad)->skid_RastPort),
	0, 0, gad->Width, gad->Height, BB_RAISED,
	VI(ng->ng_VisualInfo));

    /*  We use this to tell if there is to be a hotspot */
    if (findGTTagItem(GTSK_HSColor, taglist))
	{
	SKID(gad)->skid_Flags |= SK_HOTSPOT;
	SKID(gad)->skid_HotSpotX = getGTTagData(GTSK_HotSpotX, ~0, taglist);
	SKID(gad)->skid_HotSpotY = getGTTagData(GTSK_HotSpotY, ~0, taglist);
	SKID(gad)->skid_HSXThick = getGTTagData(GTSK_HSXThick, 1, taglist);
	SKID(gad)->skid_HSYThick = getGTTagData(GTSK_HSYThick, 1, taglist);
	SKID(gad)->skid_HSColor = getGTTagData(GTSK_HSColor, 1, taglist);
	}
    DP(("CSk: skid:\n"));
    DP(("\tskid_RastPort: $%lx\n", SKID(gad)->skid_RastPort));
    DP(("\tskid_bmWidth: $%lx\n", SKID(gad)->skid_bmWidth));
    DP(("\tskid_bmHeight: $%lx\n", SKID(gad)->skid_bmHeight));
    DP(("\tskid_MagWidth: $%lx\n", SKID(gad)->skid_MagWidth));
    DP(("\tskid_MagHeight: $%lx\n", SKID(gad)->skid_MagHeight));
    DP(("\tskid_FirstColor: $%lx\n", SKID(gad)->skid_FirstColor));
    DP(("\tskid_Flags: $%lx\n", SKID(gad)->skid_Flags));
    DP(("\tskid_HotSpotX: $%lx\n", SKID(gad)->skid_HotSpotX));
    DP(("\tskid_HotSpotY: $%lx\n", SKID(gad)->skid_HotSpotY));
    DP(("\tskid_HSColor: $%lx\n", SKID(gad)->skid_HSColor));
    DP(("\tskid_HSXThick: $%lx\n", SKID(gad)->skid_HSXThick));
    DP(("\tskid_HSYThick: $%lx\n", SKID(gad)->skid_HSYThick));

    return(gad);
    }


/*------------------------------------------------------------------------*/

/*i**** gadtools.lib/SetSketchAttrs ******************************************
*
*   NAME
*	SetSketchAttrs -- Change the attributes of a Sketch gadget. (V36)
*
*   SYNOPSIS
*	SetSketchAttrs(win, gad, newcolor, newbitmap, newflags)
*
*	void SetSketchAttrs(struct Window *, struct Gadget *,
*	    UBYTE, struct BitMap *, ULONG);
*
*   FUNCTION
*	SetSketchAttrs() allows the attributes of a Sketch gadget to
*	be changed.
*
*   INPUTS
*	win - Pointer to the Window containing the gadget.
*	gad - Pointer to the Sketch gadget as returned by CreateSketch().
*	newcolor - The new color to use when the user draws into the Sketch.
*	newbitmap - A pointer to a new BitMap to be displayed.  If NULL,
*	    then the previous one is kept.  If set to the previous, then
*	    it is redrawn.
*	newflags - Currently unused.  Set to zero.
*
*   RESULT
*	None.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateSketch()
*
******************************************************************************
*
* Created:  24-Oct-89, Peter Cherna
* Modified:  7-May-90, Peter Cherna
*
*/

void SetSketchAttrsA(struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist)
		   
    {
    struct TagItem *ti;
    BOOL movespot = FALSE;
    UWORD hsx, hsy;

    /*  Set an invalid LastColor so that we are sure to not think
	that the next drawing event is a replicate of the previous one.
	Don't have to invalidate LastX or LastY since all 3 must
	match for an event to be ignored: */
    SKID(gad)->skid_LastColor = ~0;

    SKID(gad)->skid_Color = getGTTagData(GTSK_Color, SKID(gad)->skid_Color, taglist);

    if (SKID(gad)->skid_Flags & SK_HOTSPOT)
	{
	if (findGTTagItem(GTSK_SetHotSpot, taglist))
	    {
	    SKID(gad)->skid_Flags |= SK_SETHOTSPOT;
	    }

	hsx = SKID(gad)->skid_HotSpotX;
	hsy = SKID(gad)->skid_HotSpotY;
	if (ti = findGTTagItem(GTSK_HotSpotX, taglist))
	    {
	    movespot = TRUE;
	    hsx = ti->ti_Data;
	    }
	if (ti = findGTTagItem(GTSK_HotSpotY, taglist))
	    {
	    movespot = TRUE;
	    hsy = ti->ti_Data;
	    }
	if (movespot)
	    {
	    MoveHotSpot(win, gad, hsx, hsy);
	    }
	}

    if (ti = findGTTagItem(GTSK_BitMap, taglist))
	{
	/*  Client wants us to use this new bitmap (or perhaps a new
	    image in the old one): */
	SKID(gad)->skid_RastPort->BitMap = (struct BitMap *)ti->ti_Data;
	RefreshSketch(win, gad, FALSE);
	}
    }


/*------------------------------------------------------------------------*/

/*/ RefreshSketch()
 *
 * Function to refresh the imagery inside a Sketch gadget.
 * Will redraw the image being worked on.
 *
 * Created:  01-Jun-89, Peter Cherna
 * Modified:  4-Apr-90, Peter Cherna
 *
 * Bugs: None
 *
 * Returns: None (void)
 *
 */

/*  Here was an attempt to speed up the rendering.  I don't think
    it was finished.  Skip down to the #else... */
#ifdef PIXEL_ARRAY
void RefreshSketch(win, gad, refresh)

    struct Window *win;
    struct Gadget *gad;
    BOOL refresh;

    {
    register WORD x, y;
    register LONG color;
    register WORD destx, desty, incx, incy;
    UBYTE pixelarray[256];
    UBYTE *array;
    struct RastPort CloneRP;

    struct RastPort TempRP;  /*  SKID(gad)->skid_TempRP ? */
    struct BitMap TempBM;
    TempRP = *SKID(gad)->skid_RastPort;
    TempRP.Layer = NULL;
    TempRP.BitMap = &TempBM;
    TempRP.BitMap->Rows = 1;
    TempRP.BitMap->BytesPerRow = (((SKID(gad)->skid_bmWidth+15)>>4)<<1);
    for (x = 0; x < SKID(gad)->skid_Depth; x++)
	{
	TempRP.BitMap->Planes[x] = AllocRaster(SKID(gad)->skid_bmWidth, 1);
	}

    ReadPixelArray8(SKID(gad)->skid_RastPort, 0, 0,
	SKID(gad)->skid_bmWidth, SKID(gad)->skid_bmHeight,
	pixelarray, &TempRP);

    for (x = 0; x < SKID(gad)->skid_Depth; x++)
	{
	FreeRaster(TempRP.BitMap->Planes[x], SKID(gad)->skid_bmWidth, 1);
	}

    incx = SKID(gad)->skid_MagWidth-2;
    incy = SKID(gad)->skid_MagHeight-2;

    array = pixelarray;
    desty = gad->TopEdge + TOPTRIM;
    PrepareCloneRP(&cloneRP, win->RPort, 0);
    for (y = 0; y < SKID(gad)->skid_bmHeight; y++)
	{
	destx = gad->LeftEdge + LEFTTRIM;
	for (x = 0; x < SKID(gad)->skid_bmWidth; x++)
            {
	    /*  Get pen color from actual bitmap */
	    SetAPen(&cloneRP, *(array++) + SKID(gad)->skid_FirstColor);
	    /*  Fill the magnified pixel: */
	    RectFill(&cloneRP, destx, desty, destx+incx, desty+incy);
	    destx += SKID(gad)->skid_MagWidth;
            }
	desty += SKID(gad)->skid_MagHeight;
        }
    if (SKID(gad)->skid_Flags & SK_HOTSPOT)
	{
	DrawHotSpot(win, gad, SKID(gad)->skid_HSColor);
	}
    }

#else

void RefreshSketch(win, gad, refresh)

    struct Window *win;
    struct Gadget *gad;
    BOOL refresh;

    {
    register WORD x, y;
    register LONG color;
    register WORD destx, desty, incx, incy;
    struct RastPort cloneRP;

    PrepareCloneRP(&cloneRP, win->RPort, 0);
    incx = SKID(gad)->skid_MagWidth-2;
    incy = SKID(gad)->skid_MagHeight-2;

    desty = gad->TopEdge + TOPTRIM;
    for (y = 0; y < SKID(gad)->skid_bmHeight; y++)
	{
	destx = gad->LeftEdge + LEFTTRIM;
	for (x = 0; x < SKID(gad)->skid_bmWidth; x++)
            {
	    /*  Get pen color from actual bitmap */
	    color = ReadPixel(SKID(gad)->skid_RastPort, x, y) +
		SKID(gad)->skid_FirstColor;
	    SetAPen(&cloneRP, (UBYTE)color);
	    /*  Fill the magnified pixel: */
	    RectFill(&cloneRP, destx, desty,
		(WORD)(destx+incx), (WORD)(desty+incy));
	    destx += SKID(gad)->skid_MagWidth;
            }
	desty += SKID(gad)->skid_MagHeight;
        }
    if (SKID(gad)->skid_Flags & SK_HOTSPOT)
	{
	DrawHotSpot(win, gad, SKID(gad)->skid_HSColor);
	}
    }
#endif PIXEL_ARRAY

/*------------------------------------------------------------------------*/

/*/ MoveHotSpot()
 *
 * Function to move the "hot-spot".
 *
 * Created:  5-Dec-89, Peter Cherna
 * Modified: 5-Dec-89, Peter Cherna
 *
 */

void MoveHotSpot(win, gad, newx, newy)

    struct Window *win;
    struct Gadget *gad;
    UWORD newx;
    UWORD newy;

    {
    UWORD color;

    color = ReadPixel(SKID(gad)->skid_RastPort, SKID(gad)->skid_HotSpotX,
	SKID(gad)->skid_HotSpotY) + SKID(gad)->skid_FirstColor;
    DrawHotSpot(win, gad, color);
    SKID(gad)->skid_HotSpotX = newx;
    SKID(gad)->skid_HotSpotY = newy;
    DrawHotSpot(win, gad, SKID(gad)->skid_HSColor);
    }

/*------------------------------------------------------------------------*/

/*/ DrawHotSpot()
 *
 * Function to draw a "hot-spot" on a single pixel in the sketch.
 *
 * Created:   5-Dec-89, Peter Cherna
 * Modified:  4-Apr-90, Peter Cherna
 *
 * Bugs: None
 *
 * Returns: None (void)
 *
 */

void DrawHotSpot(win, gad, color)

    struct Window *win;
    struct Gadget *gad;
    UWORD color;

    {
    UWORD minx, maxx, miny, maxy;
    struct RastPort cloneRP;

    if ((SKID(gad)->skid_HotSpotX != (UWORD)~0) &&
	((SKID(gad)->skid_HotSpotY != (UWORD)~0)))
	{
	minx = gad->LeftEdge + LEFTTRIM + SKID(gad)->skid_HotSpotX *
	    SKID(gad)->skid_MagWidth;
	maxx = minx + SKID(gad)->skid_MagWidth - 2;

	miny = gad->TopEdge + TOPTRIM + SKID(gad)->skid_HotSpotY *
	    SKID(gad)->skid_MagHeight;
	maxy = miny + SKID(gad)->skid_MagHeight - 2;

	/*  Get a working RastPort with the appropriate color: */
	PrepareCloneRP(&cloneRP, win->RPort, (UBYTE)color);
	Move(&cloneRP, minx, miny);
	Draw(&cloneRP, maxx, miny);
	Draw(&cloneRP, maxx, maxy);
	Draw(&cloneRP, minx, maxy);
	Draw(&cloneRP, minx, miny);
	}
    }

/*------------------------------------------------------------------------*/

/*/ HandleSketch()
 *
 * Function to handle IDCMP events that deal with the Sketch.
 * Call this with each IDCMP message that relates to the SKETCH
 * gadget.
 *
 * Created:  02-Jun-89, Peter Cherna
 * Modified:  4-Apr-90, Peter Cherna
 *
 * Bugs: None
 *
 *
 */

BOOL HandleSketch(gad, imsg)

    struct Gadget *gad;
    struct IntuiMessage *imsg;

    {
    struct Window *win = imsg->IDCMPWindow;
    WORD x, y, minx, miny, maxx, maxy;
    struct RastPort cloneRP;

    DP(("Hsk:  Enter.  Flags = $%lx\n", SKID(gad)->skid_Flags));
    if (SKID(gad)->skid_Flags & SK_POSTSETHS)
	{
	/*  The user just set the hot spot */
	if (imsg->Class == GADGETDOWN)
	    {
	    /*  Only unblock upon the next GADGETDOWN */
	    SKID(gad)->skid_Flags &= ~SK_POSTSETHS;
	    DP(("Hsk:  Reset SK_POSTSETHS\n"));
	    }
	else
	    {
	    /*  Throw away stuff, since the user still has the
		mouse down, from a SETHOTSPOT */
	    DP(("Hsk:  Discarded event since in SK_POSTSETHS\n"));
	    return(FALSE);
	    }
	}
    /*  Calculate x & y relative to actual drawing area: */
    x = imsg->MouseX - (gad->LeftEdge + LEFTTRIM);
    y = imsg->MouseY - (gad->TopEdge + TOPTRIM);

    /*  Normalize, but prevent a small negative number from being
	rounded to zero: */
    if (x > 0)
	x /= SKID(gad)->skid_MagWidth;
    if (y > 0)
	y /= SKID(gad)->skid_MagHeight;

    if ((x >= 0) && (x < SKID(gad)->skid_bmWidth)
	&& (y >= 0) && (y < SKID(gad)->skid_bmHeight))
	{
	DP(("HSk:  Pixel (%ld,%ld) is in bitmap\n", ((LONG)x), ((LONG)y)));
	if (SKID(gad)->skid_Flags & SK_SETHOTSPOT)
	    {
	    DP(("Hsk:  In SK_SETHOTSPOT, got it\n"));
	    /*  The Object of this message is the sketch gadget: */
	    imsg->IAddress = (APTR) gad;
	    /*  The coordinates of the new pixel will be found in the
		MouseX/Y fields of the IntuiMessage (!!! this is a poor
		place to stuff them!).  We will supply a code of ~0 to
		indicate a hot-spot setting */
	    imsg->MouseX = x;
	    imsg->MouseY = y;
	    imsg->Code = ~0;
	    /*  No longer in "set" mode: */
	    SKID(gad)->skid_Flags &= ~SK_SETHOTSPOT;
	    /*  But we do want to ignore MOUSEMOVE's until a gadgetup */
	    SKID(gad)->skid_Flags |= SK_POSTSETHS;
	    DP(("Hsk:  Now in SK_POSTSETHS, instead of SK_SETHOTSPOT.  Flags = $%lx\n",
		SKID(gad)->skid_Flags));
	    MoveHotSpot(win, gad, x, y);
	    return(TRUE);
	    }
	else if ((x != SKID(gad)->skid_LastX) || (y != SKID(gad)->skid_LastY) ||
	    (SKID(gad)->skid_Color != SKID(gad)->skid_LastColor))
	    {
	    /*  Filter out the event if we're recoloring the pixel the
		same as the last one !!! (do we blast these upon GADGETUP,
		so that repeats between mouseclicks are possible? */

	    DP(("HSk:  Setting to color %ld\n", SKID(gad)->skid_Color));
	    minx = gad->LeftEdge + LEFTTRIM + x*SKID(gad)->skid_MagWidth;
	    miny = gad->TopEdge + TOPTRIM + y*SKID(gad)->skid_MagHeight;
	    maxx = minx+SKID(gad)->skid_MagWidth-2;
	    maxy = miny+SKID(gad)->skid_MagHeight-2;

	    /*  Get a working RastPort with the appropriate color: */
	    PrepareCloneRP(&cloneRP, win->RPort, (UBYTE)SKID(gad)->skid_Color);
	    RectFill(&cloneRP, minx, miny, maxx, maxy);
	    /*  Refresh the hotspot if needed */
	    if ((SKID(gad)->skid_Flags & SK_HOTSPOT) &&
		(x == SKID(gad)->skid_HotSpotX) &&
		(y == SKID(gad)->skid_HotSpotY))
		{
		DrawHotSpot(win, gad, SKID(gad)->skid_HSColor);
		}
	    /*  Change the pixel in the supplied bitmap: */
	    SetAPen(SKID(gad)->skid_RastPort, (UBYTE)(SKID(gad)->skid_Color -
		SKID(gad)->skid_FirstColor));
	    WritePixel(SKID(gad)->skid_RastPort, x, y);
	    /*  The Object of this message is the sketch gadget: */
	    imsg->IAddress = (APTR) gad;
	    /*  The coordinates of the new pixel will be found in the
		MouseX/Y fields of the IntuiMessage (!!! this is a poor
		place to stuff them!).  The color laid down will be found
		in the Code field of the IntuiMessage: */
	    imsg->MouseX = SKID(gad)->skid_LastX = x;
	    imsg->MouseY = SKID(gad)->skid_LastY = y;
	    imsg->Code = SKID(gad)->skid_LastColor = SKID(gad)->skid_Color;
	    return(TRUE);
	    }
	}
    return(FALSE);
    }


/*------------------------------------------------------------------------*/
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: sketch.c,v 36.9 91/04/08 13:25:17 peter Exp $
d10 3
a143 1
    struct SketchIData *skid;
d151 1
a151 1
    gad = CreateGenericBase(gad, ng, sizeof(struct SketchIData) +
a166 2
    skid = SKID(gad);
    DP(("CSk:  skid at $%lx\n", skid));
d169 2
a170 2
    skid->skid_RastPort = (struct RastPort *) MEMORY_FOLLOWING(skid);
    InitRastPort(skid->skid_RastPort);
d172 1
a172 1
    skid->skid_RastPort->BitMap = (struct BitMap *)getGTTagData(GTSK_BitMap,
d174 1
a174 1
    if (!skid->skid_RastPort->BitMap)
d178 1
a178 1
    DP(("CSk:  Got supplied bitmap at $%lx\n", skid->skid_RastPort->BitMap));
d180 4
a183 4
    skid->skid_bmWidth = getGTTagData(GTSK_bmWidth,
	skid->skid_RastPort->BitMap->BytesPerRow*8, taglist);
    skid->skid_bmHeight = getGTTagData(GTSK_bmHeight,
	skid->skid_RastPort->BitMap->Rows, taglist);
d189 1
a189 1
	MagWidth = (ng->ng_Width - (LRTRIM-1)) / skid->skid_bmWidth;
d193 1
a193 1
    gad->Width = skid->skid_bmWidth * MagWidth + (LRTRIM-1);
d199 1
a199 1
	MagHeight = (ng->ng_Height - (TBTRIM-1)) / skid->skid_bmHeight;
d203 1
a203 1
    gad->Height = skid->skid_bmHeight * MagHeight + (TBTRIM-1);
d205 5
a209 5
    skid->skid_MagWidth = MagWidth;
    skid->skid_MagHeight = MagHeight;
    skid->skid_FirstColor = getGTTagData(GTSK_FirstColor, 0, taglist);
    skid->skid_Color = getGTTagData(GTSK_Color, 1, taglist);
    DP(("CSk:  Color set to %ld\n", ((LONG) skid->skid_Color)));
d215 1
a215 1
    skid->skid_LastColor = ~0;
d218 1
a218 1
	MEMORY_FOLLOWING(skid->skid_RastPort),
d225 6
a230 6
	skid->skid_Flags |= SK_HOTSPOT;
	skid->skid_HotSpotX = getGTTagData(GTSK_HotSpotX, ~0, taglist);
	skid->skid_HotSpotY = getGTTagData(GTSK_HotSpotY, ~0, taglist);
	skid->skid_HSXThick = getGTTagData(GTSK_HSXThick, 1, taglist);
	skid->skid_HSYThick = getGTTagData(GTSK_HSYThick, 1, taglist);
	skid->skid_HSColor = getGTTagData(GTSK_HSColor, 1, taglist);
d233 12
a244 12
    DP(("\tskid_RastPort: $%lx\n", skid->skid_RastPort));
    DP(("\tskid_bmWidth: $%lx\n", skid->skid_bmWidth));
    DP(("\tskid_bmHeight: $%lx\n", skid->skid_bmHeight));
    DP(("\tskid_MagWidth: $%lx\n", skid->skid_MagWidth));
    DP(("\tskid_MagHeight: $%lx\n", skid->skid_MagHeight));
    DP(("\tskid_FirstColor: $%lx\n", skid->skid_FirstColor));
    DP(("\tskid_Flags: $%lx\n", skid->skid_Flags));
    DP(("\tskid_HotSpotX: $%lx\n", skid->skid_HotSpotX));
    DP(("\tskid_HotSpotY: $%lx\n", skid->skid_HotSpotY));
    DP(("\tskid_HSColor: $%lx\n", skid->skid_HSColor));
    DP(("\tskid_HSXThick: $%lx\n", skid->skid_HSXThick));
    DP(("\tskid_HSYThick: $%lx\n", skid->skid_HSYThick));
a298 1
    struct SketchIData *skid = SKID(gad);
d307 1
a307 1
    skid->skid_LastColor = ~0;
d309 1
a309 1
    skid->skid_Color = getGTTagData(GTSK_Color, skid->skid_Color, taglist);
d311 1
a311 1
    if (skid->skid_Flags & SK_HOTSPOT)
d315 1
a315 1
	    skid->skid_Flags |= SK_SETHOTSPOT;
d318 2
a319 2
	hsx = skid->skid_HotSpotX;
	hsy = skid->skid_HotSpotY;
d340 1
a340 1
	skid->skid_RastPort->BitMap = (struct BitMap *)ti->ti_Data;
d365 1
a365 1
void RefreshSketch(win, sk, refresh)
d368 1
a368 1
    struct Gadget *sk;
a371 1
    register struct SketchIData *skid = SKID(sk);
d379 1
a379 1
    struct RastPort TempRP;  /*  skid->skid_TempRP ? */
d381 1
a381 1
    TempRP = *skid->skid_RastPort;
d385 2
a386 2
    TempRP.BitMap->BytesPerRow = (((skid->skid_bmWidth+15)>>4)<<1);
    for (x = 0; x < skid->skid_Depth; x++)
d388 1
a388 1
	TempRP.BitMap->Planes[x] = AllocRaster(skid->skid_bmWidth, 1);
d391 2
a392 2
    ReadPixelArray8(skid->skid_RastPort, 0, 0,
	skid->skid_bmWidth, skid->skid_bmHeight,
d395 1
a395 1
    for (x = 0; x < skid->skid_Depth; x++)
d397 1
a397 1
	FreeRaster(TempRP.BitMap->Planes[x], skid->skid_bmWidth, 1);
d400 2
a401 2
    incx = skid->skid_MagWidth-2;
    incy = skid->skid_MagHeight-2;
d404 1
a404 1
    desty = sk->TopEdge + TOPTRIM;
d406 1
a406 1
    for (y = 0; y < skid->skid_bmHeight; y++)
d408 2
a409 2
	destx = sk->LeftEdge + LEFTTRIM;
	for (x = 0; x < skid->skid_bmWidth; x++)
d412 1
a412 1
	    SetAPen(&cloneRP, *(array++) + skid->skid_FirstColor);
d415 1
a415 1
	    destx += skid->skid_MagWidth;
d417 1
a417 1
	desty += skid->skid_MagHeight;
d419 1
a419 1
    if (skid->skid_Flags & SK_HOTSPOT)
d421 1
a421 1
	DrawHotSpot(win, sk, skid->skid_HSColor);
d427 1
a427 1
void RefreshSketch(win, sk, refresh)
d430 1
a430 1
    struct Gadget *sk;
a433 1
    register struct SketchIData *skid = SKID(sk);
d440 2
a441 2
    incx = skid->skid_MagWidth-2;
    incy = skid->skid_MagHeight-2;
d443 2
a444 2
    desty = sk->TopEdge + TOPTRIM;
    for (y = 0; y < skid->skid_bmHeight; y++)
d446 2
a447 2
	destx = sk->LeftEdge + LEFTTRIM;
	for (x = 0; x < skid->skid_bmWidth; x++)
d450 2
a451 2
	    color = ReadPixel(skid->skid_RastPort, x, y) +
		skid->skid_FirstColor;
d456 1
a456 1
	    destx += skid->skid_MagWidth;
d458 1
a458 1
	desty += skid->skid_MagHeight;
d460 1
a460 1
    if (skid->skid_Flags & SK_HOTSPOT)
d462 1
a462 1
	DrawHotSpot(win, sk, skid->skid_HSColor);
a485 1
    struct SketchIData *skid = SKID(gad);
d488 2
a489 2
    color = ReadPixel(skid->skid_RastPort, skid->skid_HotSpotX,
	skid->skid_HotSpotY) + skid->skid_FirstColor;
d491 3
a493 3
    skid->skid_HotSpotX = newx;
    skid->skid_HotSpotY = newy;
    DrawHotSpot(win, gad, skid->skid_HSColor);
a517 1
    struct SketchIData *skid = SKID(gad);
d521 2
a522 2
    if ((skid->skid_HotSpotX != (UWORD)~0) &&
	((skid->skid_HotSpotY != (UWORD)~0)))
d524 3
a526 3
	minx = gad->LeftEdge + LEFTTRIM + skid->skid_HotSpotX *
	    skid->skid_MagWidth;
	maxx = minx + skid->skid_MagWidth - 2;
d528 3
a530 3
	miny = gad->TopEdge + TOPTRIM + skid->skid_HotSpotY *
	    skid->skid_MagHeight;
	maxy = miny + skid->skid_MagHeight - 2;
a563 1
    struct SketchIData *skid = SKID(gad);
d568 2
a569 2
    DP(("Hsk:  Enter.  Flags = $%lx\n", skid->skid_Flags));
    if (skid->skid_Flags & SK_POSTSETHS)
d575 1
a575 1
	    skid->skid_Flags &= ~SK_POSTSETHS;
d593 1
a593 1
	x /= skid->skid_MagWidth;
d595 1
a595 1
	y /= skid->skid_MagHeight;
d597 2
a598 2
    if ((x >= 0) && (x < skid->skid_bmWidth)
	&& (y >= 0) && (y < skid->skid_bmHeight))
d601 1
a601 1
	if (skid->skid_Flags & SK_SETHOTSPOT)
d614 1
a614 1
	    skid->skid_Flags &= ~SK_SETHOTSPOT;
d616 1
a616 1
	    skid->skid_Flags |= SK_POSTSETHS;
d618 1
a618 1
		skid->skid_Flags));
d622 2
a623 2
	else if ((x != skid->skid_LastX) || (y != skid->skid_LastY) ||
	    (skid->skid_Color != skid->skid_LastColor))
d629 5
a633 5
	    DP(("HSk:  Setting to color %ld\n", skid->skid_Color));
	    minx = gad->LeftEdge + LEFTTRIM + x*skid->skid_MagWidth;
	    miny = gad->TopEdge + TOPTRIM + y*skid->skid_MagHeight;
	    maxx = minx+skid->skid_MagWidth-2;
	    maxy = miny+skid->skid_MagHeight-2;
d636 1
a636 1
	    PrepareCloneRP(&cloneRP, win->RPort, (UBYTE)skid->skid_Color);
d639 3
a641 3
	    if ((skid->skid_Flags & SK_HOTSPOT) &&
		(x == skid->skid_HotSpotX) &&
		(y == skid->skid_HotSpotY))
d643 1
a643 1
		DrawHotSpot(win, gad, skid->skid_HSColor);
d646 3
a648 3
	    SetAPen(skid->skid_RastPort, (UBYTE)(skid->skid_Color -
		skid->skid_FirstColor));
	    WritePixel(skid->skid_RastPort, x, y);
d655 3
a657 3
	    imsg->MouseX = skid->skid_LastX = x;
	    imsg->MouseY = skid->skid_LastY = y;
	    imsg->Code = skid->skid_LastColor = skid->skid_Color;
@
