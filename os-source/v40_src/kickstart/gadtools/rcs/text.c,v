head     39.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.12
date     93.02.11.10.37.06;  author vertex;  state Exp;
branches ;
next     39.11;

39.11
date     92.10.16.18.26.07;  author vertex;  state Exp;
branches ;
next     39.10;

39.10
date     92.08.19.18.06.03;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.05.29.15.34.27;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.04.15.11.33.24;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.13.14.07.54;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.07.13.12.50;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.26.15.16.13;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.16.21;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.11.51.24;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.50.29;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.55.02;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.30.18.10.12;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.19.31;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.33.14;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.12
log
@Fixed bug where TEXT_KIND and NUMBER_KIND gadgets wouldn't render
correctly if the text was center or right justified, and GTTX_Clipped
or GTTX_Border were not used.                                        
@
text
@/*** text.c ***************************************************************
*
*   text.c	- Text label "gadgets" for Gadget Toolkit
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: text.c,v 39.11 92/10/16 18:26:07 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Internal: */

struct ExtGadget *CreateTextA (struct ExtGadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
struct ExtGadget *CreateNumberA (struct ExtGadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
void SetTextAttrsA (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);
void SetNumberAttrsA (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);


/*****************************************************************************/


VOID RefreshText(struct ExtGadget *gad, struct Window *win, BOOL refresh)
{
WORD             preserve;
struct Rectangle rect;

    /* We must position the text here, in case a previous text
     * (like the initial one) was NULL.  Of course, we never
     * move its left edge so the easiest thing to do with it
     * is preserve it across the call to PlaceIntuiText()
     */
    preserve                      = TXID(gad)->txid_IText.LeftEdge;
    rect.MinX                     = 0;
    rect.MinY                     = 0;
    rect.MaxX                     = TXID(gad)->txid_TextWidth - 1;
    rect.MaxY                     = gad->Height - 1;
    TXID(gad)->txid_IText.TopEdge = 0;

    /* since we reset the LeftEdge value below, the only thing this call
     * effectively does is vertically center the text within the gadget
     * box
     */
    PlaceIntuiText(&TXID(gad)->txid_IText, &rect, PLACETEXT_IN);
    TXID(gad)->txid_IText.LeftEdge = preserve;

    printITextToFit(GetRP(gad,win), &TXID(gad)->txid_IText,
	            gad->LeftEdge, gad->TopEdge,
                    TXID(gad)->txid_TextWidth,
                    TXID(gad)->txid_Justification,
                    &TXID(gad)->txid_Extent);
}


/*****************************************************************************/


static VOID SetNumberOrTextAttr(struct ExtGadget *gad, struct Window *win,
                                struct TagItem *taglist, BOOL numberKind)
{
struct TagItem   *tag;
struct Rectangle  oldExtent;
struct RastPort  *rp;

    TXID(gad)->txid_Justification  = getGTTagData(GTTX_Justification,TXID(gad)->txid_Justification,taglist);
    TXID(gad)->txid_IText.FrontPen = getGTTagData(GTTX_FrontPen,TXID(gad)->txid_IText.FrontPen,taglist);

    if (tag = findGTTagItem(GTTX_BackPen,taglist))
    {
        TXID(gad)->txid_IText.BackPen  = tag->ti_Data;
        TXID(gad)->txid_IText.DrawMode = JAM2;
    }

    if (numberKind)
    {
        NMID(gad)->nmid_Number = getGTTagData(GTNM_Number,NMID(gad)->nmid_Number,taglist);
        NMID(gad)->nmid_Format = (STRPTR)getGTTagData(GTNM_Format,(ULONG)NMID(gad)->nmid_Format,taglist);
        sprintf(NMID(gad)->nmid_IText.IText,NMID(gad)->nmid_Format,NMID(gad)->nmid_Number);
    }

    if (rp = GetRP(gad,win))
    {
        oldExtent = TXID(gad)->txid_Extent;

        /* We can be sure that if the rectangle is degenerate, it
         * is degenerate in both directions. This would be the result
         * of a NULL IntuiText->IText:
         */
        if (TXID(gad)->txid_IText.DrawMode == JAM1)
        {
            if (oldExtent.MaxX >= oldExtent.MinX)
                EraseRect(rp,oldExtent.MinX,oldExtent.MinY,oldExtent.MaxX,oldExtent.MaxY);
            RefreshText(gad,win,FALSE);
        }
        else
        {
            RefreshText(gad,win,FALSE);
            if (oldExtent.MaxX >= oldExtent.MinX)
                EraseOldExtent(rp,&oldExtent,&TXID(gad)->txid_Extent);
        }
    }
}


/*****************************************************************************/


static struct ExtGadget *CreateNumberOrText(struct ExtGadget *gad, struct NewGadget *ng,
                                         struct TagItem *taglist, BOOL numberKind)
{
STRPTR text;
BOOL   copytext;
ULONG  extraSize;
ULONG  borderTag;

    if (numberKind)
    {
        extraSize = NUMBER_IDATA_SIZE + getGTTagData(GTNM_MaxNumberLen,10,taglist) + 1;
    }
    else
    {
        extraSize = TEXT_IDATA_SIZE;
        text      = (STRPTR)getGTTagData(GTTX_Text,NULL,taglist);
        copytext  = getGTTagData(GTTX_CopyText,FALSE,taglist) && (text != NULL);

        if (copytext)
            extraSize += strlen(text)+1;
    }

    if (gad = CreateGenericBase(gad,ng,extraSize,taglist))
    {
        gad->Flags                     |= GADGIMAGE|GADGHNONE;
        SGAD(gad)->sg_Flags             = SG_EXTRAFREE_DISPOSE;
        SGAD(gad)->sg_Refresh           = RefreshText;
        TXID(gad)->txid_IText.ITextFont = ng->ng_TextAttr;
        TXID(gad)->txid_IText.FrontPen  = VI(ng->ng_VisualInfo)->vi_textPen;
        TXID(gad)->txid_Extent.MinX     = 1;   /* causes an invalid Extent, so first EraseRect() call won't happen */

        if (numberKind)
        {
            borderTag                   = GTNM_Border;
            SGAD(gad)->sg_SetAttrs      = SetNumberAttrsA;
            SGAD(gad)->sg_GetTable      = Number_GetTable;
            NMID(gad)->nmid_Format      = "%ld";
            NMID(gad)->nmid_IText.IText = MEMORY_FOLLOWING(NMID(gad));
        }
        else
        {
            borderTag              = GTTX_Border;
            SGAD(gad)->sg_SetAttrs = SetTextAttrsA;
            SGAD(gad)->sg_GetTable = Text_GetTable;

            if (copytext)
            {
                TXID(gad)->txid_IText.IText = MEMORY_FOLLOWING(TXID(gad));
                strcpy(TXID(gad)->txid_IText.IText,text);
            }
            else
            {
                TXID(gad)->txid_IText.IText = text;
            }
        }

        placeGadgetText(gad,ng->ng_Flags,PLACETEXT_LEFT,NULL);

        /* no clipping by default, set width to something really big */
        TXID(gad)->txid_TextWidth = 9999;

        if (getGTTagData(GTTX_Clipped,FALSE,taglist)
        || (getGTTagData(GTTX_Justification,GTJ_LEFT,taglist) != GTJ_LEFT))
        {
            TXID(gad)->txid_TextWidth = gad->Width;
        }

        if (getGTTagData(borderTag,FALSE,taglist))
        {
            if (!(gad->GadgetRender = (APTR)getBevelImage(0,0,ng->ng_Width,ng->ng_Height,FRAMETYPE_RECESSED|FRAME_BUTTON)))
                return(NULL);

            TXID(gad)->txid_IText.LeftEdge = LEFTTRIM;
            TXID(gad)->txid_TextWidth = gad->Width - LRTRIM;
        }

        SetNumberOrTextAttr(gad,NULL,taglist,numberKind);
    }

    return(gad);
}


/*****************************************************************************/


struct ExtGadget *CreateTextA(struct ExtGadget *gad, struct NewGadget *ng,
                              struct TagItem *taglist)
{
    return(CreateNumberOrText(gad,ng,taglist,FALSE));
}


/*****************************************************************************/


struct ExtGadget *CreateNumberA(struct ExtGadget *gad, struct NewGadget *ng,
                             struct TagItem *taglist)
{
    return(CreateNumberOrText(gad,ng,taglist,TRUE));
}


/*****************************************************************************/


VOID SetTextAttrsA(struct ExtGadget *gad, struct Window *win,
                   struct TagItem *taglist)
{
struct TagItem *tag;

    /* This must be here and not in SetNumberOrTextAttr(), otherwise it
     * would confuse the text pointer when dealing with GTTX_CopyText
     */
    if (tag = findGTTagItem(GTTX_Text,taglist))
	TXID(gad)->txid_IText.IText = (STRPTR)tag->ti_Data;

    SetNumberOrTextAttr(gad,win,taglist,FALSE);
}


/*****************************************************************************/


VOID SetNumberAttrsA(struct ExtGadget *gad, struct Window *win,
                     struct TagItem *taglist)
{
    SetNumberOrTextAttr(gad,win,taglist,TRUE);
}
@


39.11
log
@Fixed bugs in clipping code in TEXT_KIND and NUMBER_KIND gadgets. The
clipping didn't work correctly on right and center justified text, and
was under-evaluating the number of pixels available for the text in a
gadget that didn't have borders.                                         
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.10 92/08/19 18:06:03 vertex Exp Locker: vertex $
d180 3
a182 1
        if (getGTTagData(GTTX_Clipped,FALSE,taglist))
d184 1
@


39.10
log
@Added support for GTTX_Clipped tag
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.9 92/05/29 15:34:27 vertex Exp Locker: vertex $
a29 1
void RefreshText (struct ExtGadget *gad, struct Window *win, BOOL refresh);
a30 1

d42 1
a42 1
     * it preserve it across the call to PlaceIntuiText()
d47 1
a47 1
    rect.MaxX                     = gad->Width - 1;
d50 5
d60 1
a60 1
                    (UWORD)(TXID(gad)->txid_Clipped ? (gad->Width - LRTRIM) : 9999),
d177 6
d189 1
a189 1
            TXID(gad)->txid_Clipped        = TRUE;
a190 2

        TXID(gad)->txid_Clipped = getGTTagData(GTTX_Clipped,TXID(gad)->txid_Clipped,taglist);
@


39.9
log
@Removed requester support
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.8 92/04/15 11:33:24 vertex Exp Locker: vertex $
d57 1
a57 1
                    (UWORD)(gad->GadgetRender ? (gad->Width - LRTRIM) : 9999),
d180 1
d182 2
@


39.8
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.7 92/04/13 14:07:54 vertex Exp Locker: vertex $
d21 1
a21 1
struct Gadget *CreateTextA (struct Gadget *gad, struct NewGadget *ng,
d23 1
a23 1
struct Gadget *CreateNumberA (struct Gadget *gad, struct NewGadget *ng,
d25 7
a31 4
void SetTextAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
void SetNumberAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
a32 3
void RefreshText (struct Gadget *gad, struct Window *win, BOOL refresh);


d36 1
a36 1
VOID RefreshText(struct Gadget *gad, struct Window *win, BOOL refresh)
d66 1
a66 2
static VOID SetNumberOrTextAttr(struct Gadget *gad, struct Window *win,
                                struct Requester *req,
d107 1
a107 1
                ClearOldExtent(rp,&oldExtent,&TXID(gad)->txid_Extent);
d116 1
a116 1
static struct Gadget *CreateNumberOrText(struct Gadget *gad, struct NewGadget *ng,
a143 1
        TXID(gad)->txid_IText.IText     = MEMORY_FOLLOWING(TXID(gad));
d149 5
a153 4
            borderTag              = GTNM_Border;
            SGAD(gad)->sg_SetAttrs = SetNumberAttrsA;
            SGAD(gad)->sg_GetTable = Number_GetTable;
            NMID(gad)->nmid_Format = "%ld";
d162 2
d165 1
d167 1
d169 1
d182 1
a182 1
        SetNumberOrTextAttr(gad,NULL,NULL,taglist,numberKind);
d192 2
a193 2
struct Gadget *CreateTextA(struct Gadget *gad, struct NewGadget *ng,
                           struct TagItem *taglist)
d202 1
a202 1
struct Gadget *CreateNumberA(struct Gadget *gad, struct NewGadget *ng,
d212 2
a213 2
VOID SetTextAttrsA(struct Gadget *gad, struct Window *win,
                   struct Requester *req, struct TagItem *taglist)
d223 1
a223 1
    SetNumberOrTextAttr(gad,win,req,taglist,FALSE);
d230 2
a231 2
VOID SetNumberAttrsA(struct Gadget *gad, struct Window *win,
                     struct Requester *req, struct TagItem *taglist)
d233 1
a233 1
    SetNumberOrTextAttr(gad,win,req,taglist,TRUE);
@


39.7
log
@Moved some stuff around to save bytes
Added requester support
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.6 92/04/07 13:12:50 vertex Exp Locker: vertex $
d141 1
a141 1
        gad->Flags                      = GADGIMAGE|GADGHNONE;
@


39.6
log
@Added GTNM_FrontPen/BackPen
Added GTTX_FrontPen/BackPen
Merged NUMBER_KIND and TEXT_KIND treatment
Added GTTX_Justification
Added GTNM_Justification
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.5 92/03/26 15:16:13 peter Exp Locker: vertex $
d30 1
a30 1
void RefreshText (struct Window *win, struct Gadget *gad, BOOL refresh);
d36 1
a36 1
VOID RefreshText(struct Window *win, struct Gadget *gad, BOOL refresh)
d55 1
a55 1
    printITextToFit(win->RPort, &TXID(gad)->txid_IText,
d66 2
a67 1
static VOID SetNumberOrTextAttr(struct Window *win, struct Gadget *gad,
d72 1
d90 1
a90 1
    if (win)
d101 2
a102 2
                EraseRect(win->RPort,oldExtent.MinX,oldExtent.MinY,oldExtent.MaxX,oldExtent.MaxY);
            RefreshText(win,gad,FALSE);
d106 1
a106 1
            RefreshText(win,gad,FALSE);
d108 1
a108 1
                ClearOldExtent(win->RPort,&oldExtent,&TXID(gad)->txid_Extent);
d178 1
a178 1
        SetNumberOrTextAttr(NULL,gad,taglist,numberKind);
d219 1
a219 1
    SetNumberOrTextAttr(win,gad,taglist,FALSE);
d229 1
a229 1
    SetNumberOrTextAttr(win,gad,taglist,TRUE);
@


39.5
log
@Uses getBevelImage() instead of MakeBevelBox().
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.4 92/03/24 15:16:21 peter Exp Locker: peter $
a14 2
extern STRPTR Format20Dec;

d31 1
a31 2
void EraseText (struct Window *win, struct Gadget *gad);
void CalcExtent (struct Gadget *gad);
d33 1
a33 1
/*------------------------------------------------------------------------*/
a34 1
/* CreateTextA() */
d36 1
a36 2
struct Gadget *CreateTextA( struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist )
d38 86
a123 21
    struct Rectangle rect;

    STRPTR text = (STRPTR) getGTTagData(GTTX_Text, NULL, taglist);
    BOOL copytext = getGTTagData(GTTX_CopyText, FALSE, taglist);
    BOOL border = getGTTagData(GTTX_Border, FALSE, taglist);
    ULONG extrasize = TEXT_IDATA_SIZE;

    DP(("CTA:  Text '%s', copytext: $%lx, border: $%lx\n",
	text, copytext, border));
    if (copytext)
    {
	extrasize += ALIGNSIZE(strlen(text)+1);
    }

    gad = CreateGenericBase(gad, ng, extrasize, taglist);
    if (!gad)
    	return(NULL);
    gad->Flags = GADGIMAGE|GADGHNONE;
    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;

    if (copytext)
d125 1
a125 3
	TXID(gad)->txid_IText.IText = MEMORY_FOLLOWING(TXID(gad));
	DP(("CTA:  Text Buffer at $%lx\n", TXID(gad)->txid_IText.IText));
	strcpy(TXID(gad)->txid_IText.IText, text);
d129 3
a131 13
	DP(("CTA: Using source text at $%lx\n", text));
	TXID(gad)->txid_IText.IText = text;
    }
    TXID(gad)->txid_IText.ITextFont = ng->ng_TextAttr;
    TXID(gad)->txid_IText.FrontPen = VI(ng->ng_VisualInfo)->vi_textPen;
    if (border)
    {
	if ( !( gad->GadgetRender = (APTR) getBevelImage( 0, 0,
	    ng->ng_Width, ng->ng_Height, FRAMETYPE_RECESSED|FRAME_BUTTON ) ) )
	{
	    return( NULL );
	}
    }
d133 42
a174 3
    placeGadgetText( gad, ng->ng_Flags, PLACETEXT_LEFT, &rect );
    PlaceIntuiText(&TXID(gad)->txid_IText, &rect, PLACETEXT_IN);
    TXID(gad)->txid_IText.LeftEdge = (border) ? LEFTTRIM : 0;
d176 2
a177 5
    CalcExtent(gad);

    SGAD(gad)->sg_Refresh = RefreshText;
    SGAD(gad)->sg_SetAttrs = SetTextAttrsA;
    SGAD(gad)->sg_GetTable = Text_GetTable;
d183 1
a183 1
/*------------------------------------------------------------------------*/
a184 8
/*/ RefreshText()
 *
 * Function to refresh the text of a simple Text display gadget.
 *
 * Created:  14-Nov-89, Peter Cherna
 * Modified: 29-May-90, Peter Cherna
 *
 */
d186 2
a187 1
void RefreshText( struct Window *win, struct Gadget *gad, BOOL refresh )
d189 1
a189 4
    DP(("RT: Refreshing '%s'\n", TXID(gad)->txid_IText.IText));
    printITextToFit(win->RPort, &TXID(gad)->txid_IText,
	gad->LeftEdge, gad->TopEdge,
	(UWORD)(gad->GadgetRender ? (gad->Width - LRTRIM) : 9999));
d193 2
a194 1
/*------------------------------------------------------------------------*/
d196 2
a197 10
/*/ EraseText()
 *
 * Function to erase the text of a simple Text or Number display gadget.
 *
 * Created:  14-May-90, Peter Cherna
 * Modified: 17-May-90, Peter Cherna
 *
 */

void EraseText( struct Window *win, struct Gadget *gad )
d199 1
a199 61
    /* We can be sure that if the rectangle is degenerate, it
     * is degenerate in both directions.  This would be the result
     * of a NULL IntuiText->IText:
     */
    if (TXID(gad)->txid_Extent.MaxX >= TXID(gad)->txid_Extent.MinX)
    {
	EraseRect(win->RPort, TXID(gad)->txid_Extent.MinX, TXID(gad)->txid_Extent.MinY,
	    TXID(gad)->txid_Extent.MaxX, TXID(gad)->txid_Extent.MaxY);
    }
}


/*------------------------------------------------------------------------*/

/*/ SetTextAttrsA()
 *
 * Change the attribute (contents) of a text display gadget.
 *
 * Created:   8-Jan-90, Peter Cherna
 * Modified: 28-Jan-90, Peter Cherna
 *
 */

void SetTextAttrsA( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
{
    struct TagItem *ti;
    struct Rectangle rect;
    WORD preserve;

    /* Because of a need of the listview, this function protects against
     * win = NULL.  If win is NULL, it doesn't do any rendering, but
     * just adjusts its internals to account for the change.
     */
    if (ti = findGTTagItem(GTTX_Text, taglist))
    {
	DP(("STA:  Found GTTX_Text of '%s'\n", ti->ti_Data));
	TXID(gad)->txid_IText.IText = (STRPTR) ti->ti_Data;
	/* We must position the text here, in case a previous text
	 * (like the initial one) was NULL.  Of course, we never
	 * move its left edge so the easiest thing to do with it
	 * it preserve it across the call to PlaceIntuiText()
	 */
	preserve = TXID(gad)->txid_IText.LeftEdge;
	rect.MinX = 0;
	rect.MinY = 0;
	rect.MaxX = gad->Width - 1;
	rect.MaxY = gad->Height - 1;
	TXID(gad)->txid_IText.TopEdge = 0;
	PlaceIntuiText(&TXID(gad)->txid_IText, &rect, PLACETEXT_IN);
	TXID(gad)->txid_IText.LeftEdge = preserve;

	if (win)
	{
	    EraseText(win, gad);
	    /* Draw new text, if any */
	    RefreshText(win, gad, FALSE);
	}

	CalcExtent(gad);
    }
d203 1
a203 1
/*------------------------------------------------------------------------*/
a204 1
/* CreateNumberA() */
d206 2
a207 2
struct Gadget *CreateNumberA( struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist )
d209 1
a209 30
    struct Rectangle rect;
    BOOL border = getGTTagData(GTNM_Border, FALSE, taglist);

    gad = CreateGenericBase(gad, ng, NUMBER_IDATA_SIZE, taglist);
    if (!gad)
    	return(NULL);
    gad->Flags = GADGIMAGE|GADGHNONE;
    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;

    NMID(gad)->nmid_IText.IText = NMID(gad)->nmid_Buffer;
    NMID(gad)->nmid_Number = getGTTagData(GTNM_Number, 0, taglist);
    sprintf(NMID(gad)->nmid_Buffer, Format20Dec, NMID(gad)->nmid_Number);
    NMID(gad)->nmid_IText.ITextFont = ng->ng_TextAttr;
    NMID(gad)->nmid_IText.FrontPen = VI(ng->ng_VisualInfo)->vi_textPen;

    if (border)
    {
	if ( !( gad->GadgetRender = (APTR) getBevelImage( 0, 0,
	    ng->ng_Width, ng->ng_Height, FRAMETYPE_RECESSED|FRAME_BUTTON ) ) )
	{
	    return( NULL );
	}
    }

    placeGadgetText( gad, ng->ng_Flags, PLACETEXT_LEFT, &rect );
    PlaceIntuiText(&NMID(gad)->nmid_IText, &rect, PLACETEXT_IN);
    NMID(gad)->nmid_IText.LeftEdge = (border) ? LEFTTRIM : 0;

    DP(("CN:  Number is '%s'\n", NMID(gad)->nmid_IText.IText));
    CalcExtent(gad);
d211 5
a215 3
    SGAD(gad)->sg_Refresh = RefreshText;
    SGAD(gad)->sg_SetAttrs = SetNumberAttrsA;
    SGAD(gad)->sg_GetTable = Number_GetTable;
d217 1
a217 1
    return(gad);
d219 9
a227 61


/*------------------------------------------------------------------------*/

/*/ SetNumberAttrsA()
 *
 * Change the attribute (value) of a number display gadget.
 *
 * Created:   8-Jan-90, Peter Cherna
 * Modified: 28-Jan-90, Peter Cherna
 *
 */

void SetNumberAttrsA( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
{
    struct TagItem *ti;

    if (ti = findGTTagItem(GTNM_Number, taglist))
    {
	NMID(gad)->nmid_Number = (LONG) ti->ti_Data;
	sprintf(NMID(gad)->nmid_IText.IText, Format20Dec, (LONG) ti->ti_Data);
	DP(("SNAA:  Number is '%s'\n", NMID(gad)->nmid_IText.IText));
	EraseText(win, gad);
	RefreshText(win, gad, FALSE);
	CalcExtent(gad);
    }
}

/*------------------------------------------------------------------------*/

/*/ CalcExtent()
 *
 * Calculate extent so we can erase later.
 *
 * Created:  14-May-90, Peter Cherna
 * Modified: 14-May-90, Peter Cherna
 *
 */

void CalcExtent( struct Gadget *gad )
{
    Point point;

    /* Figure extent of text: */
    intuiTextSize(&TXID(gad)->txid_IText, &point);
    TXID(gad)->txid_Extent.MinX = gad->LeftEdge + TXID(gad)->txid_IText.LeftEdge;
    TXID(gad)->txid_Extent.MinY = gad->TopEdge+ TXID(gad)->txid_IText.TopEdge; 
    /* Constrain extent to fit inside gadget, if it has a border */
    if (gad->GadgetRender)
    {
	point.x = min(point.x, gad->Width - LRTRIM);
    }

    TXID(gad)->txid_Extent.MaxX = TXID(gad)->txid_Extent.MinX + point.x - 1;
    TXID(gad)->txid_Extent.MaxY = TXID(gad)->txid_Extent.MinY + point.y - 1;
    DP(("CE:  Extent (%ld,%ld)-(%ld,%ld)\n",
	TXID(gad)->txid_Extent.MinX,
	TXID(gad)->txid_Extent.MinY,
	TXID(gad)->txid_Extent.MaxX,
	TXID(gad)->txid_Extent.MaxY));
a228 2

/*------------------------------------------------------------------------*/
@


39.4
log
@Supports GetAttrs of GTNM_Number and GTTX_Text.  nmid_Number is now kept.
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.3 92/02/20 11:51:24 peter Exp Locker: peter $
a43 1
    struct BevelBox *bbox;
a55 4
    if (border)
    {
	extrasize += sizeof(struct BevelBox);
    }
d60 2
a61 1
    gad->Flags = GADGHNONE;
a67 2
	bbox = MEMORY_N_FOLLOWING(TXID(gad)->txid_IText.IText,
	    ALIGNSIZE(strlen(text)+1));
a72 1
	bbox = MEMORY_FOLLOWING(TXID(gad));
d78 5
a82 3
	gad->GadgetRender = (APTR) MakeBevelBox(bbox,
	    0, 0, ng->ng_Width, ng->ng_Height, BB_RECESSED,
	    VI(ng->ng_VisualInfo));
d206 1
a206 2
    gad = CreateGenericBase(gad, ng, ( NUMBER_IDATA_SIZE +
	        ((border) ? sizeof(struct BevelBox) : 0) ), taglist);
d209 2
a210 1
    gad->Flags = GADGHNONE;
d220 5
a224 3
	gad->GadgetRender = (APTR) MakeBevelBox(MEMORY_FOLLOWING(NMID(gad)),
	    0, 0, ng->ng_Width, ng->ng_Height, BB_RECESSED,
	    VI(ng->ng_VisualInfo));
@


39.3
log
@No need to store VisualInfo.
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.2 92/02/03 15:50:29 peter Exp Locker: peter $
d98 1
d218 2
a219 1
    sprintf(NMID(gad)->nmid_Buffer, Format20Dec, getGTTagData(GTNM_Number, 0, taglist));
d239 1
d263 1
a270 1

@


39.2
log
@Deleted obsolete internal autodocs.
@
text
@d7 1
a7 1
*   $Id: text.c,v 39.1 92/01/30 19:55:02 peter Exp Locker: peter $
a66 2
    TXID(gad)->txid_VisualInfo = ng->ng_VisualInfo;

d82 1
a82 1
    TXID(gad)->txid_IText.FrontPen = TXID(gad)->txid_VisualInfo->vi_textPen;
d96 2
a97 2
    SG_FROM_GAD(gad)->sg_Refresh = RefreshText;
    SG_FROM_GAD(gad)->sg_SetAttrs = SetTextAttrsA;
a215 2
    NMID(gad)->nmid_VisualInfo = ng->ng_VisualInfo;

d219 1
a219 1
    NMID(gad)->nmid_IText.FrontPen = NMID(gad)->nmid_VisualInfo->vi_textPen;
d235 2
a236 2
    SG_FROM_GAD(gad)->sg_Refresh = RefreshText;
    SG_FROM_GAD(gad)->sg_SetAttrs = SetNumberAttrsA;
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: text.c,v 38.2 92/01/30 18:10:12 peter Exp Locker: peter $
d38 1
a38 51
/*i**** gadtools.library/CreateTextA *****************************************
*
*   NAME
*	CreateTextA -- Creates a text display gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateTextA(previous, ng, taglist)
*
*	struct Gadget *CreateTextA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *taglist);
*
*   FUNCTION
*	Creates a Text Display.  This is actually a non-selectable non-
*	highlighting gadget.  This gadget may display the gadget label (from
*	ng->ng_GadgetText) and/or the text supplied as a parameter.  These
*	will be displayed according to the formatting chosen in ng->ng_Flags.
*
*   INPUTS
*	previous - Pointer to the previous gadget.
*	ng - Pointer to an initialized NewGadget structure that describes
*	    the desired gadget.
*	taglist - Pointer to a TagItem list.
*
*   TAGS
*	GTTX_Text - Pointer to a NULL terminated string to be displayed,
*	    or NULL. defaults to NULL.
*	GTTX_CopyText (BOOL) -	This flag instructs this gadget to copy the
*	    supplied text string, instead of continuing to refer to the
*	    address of the supplied string.
*	GTTX_Border (BOOL) - If TRUE, this flag asks for a recessed
*	    border to be placed around the gadget.
*
*   RESULT
*	gad - Pointer to the resulting gadget, or NULL if failure or if
*	    previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateGadgetA(), CreateNumberA()
*
****************************************************************************
*
* Created:  14-Nov-89, Peter Cherna
* Modified: 14-Feb-90, Peter Cherna
*
*/
d204 1
a204 46
/*i**** gadtools.library/CreateNumberA ***************************************
*
*   NAME
*	CreateNumberA -- Creates a Numeric Display. (V36)
*
*   SYNOPSIS
*	gad = CreateNumberA(previous, ng, taglist)
*
*	struct Gadget *CreateNumberA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *taglist);
*
*   FUNCTION
*	Creates a Numeric Display.  This is actually a non-selectable non-
*	highlighting gadget.  This gadget may display the gadget label (from
*	ng->ng_GadgetText (if any), and the number supplied as a parameter.
*
*   INPUTS
*	previous - Pointer to the previous gadget.
*	ng - Pointer to an initialized NewGadget structure that describes
*	    the desired gadget.
*	taglist - Pointer to TagItem list.
*
*   TAGS
*	GTNM_Number - A signed long integer to be displayed (default 0).
*	GTNM_Border (BOOL) - If TRUE, this flag asks for a recessed
*	    border to be placed around the gadget.
*
*   RESULT
*	gad - Pointer to the resulting gadget, or NULL if failure or if
*	    previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateGadgetA(), CreateTextA()
*
******************************************************************************
*
* Created:  14-Nov-89, Peter Cherna
* Modified: 15-May-90, Peter Cherna
*
*/
@


38.2
log
@Uses new space-saving placeGadgetText() function.
@
text
@d7 1
a7 1
*   $Id: text.c,v 38.1 91/11/27 13:19:31 peter Exp Locker: peter $
a8 46
*   $Log:	text.c,v $
 * Revision 38.1  91/11/27  13:19:31  peter
 * Optimized extraction of instance data.
 * 
 * Revision 38.0  91/07/11  12:33:14  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.10  91/04/08  13:26:51  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.9  91/03/14  16:05:53  peter
*   Now uses stack-based tags instead of array-based ones when it calls
*   tag-based functions.
*   
*   Revision 36.8  90/10/12  19:41:19  peter
*   Now uses our sprintf() instead of stcl_d to save space.
*   Calls internal findTagItem() and getTagData() to save space.
*   
*   Revision 36.7  90/07/19  11:50:33  peter
*   Fixed a bug in which the clearing of a display gadget could overwrite
*   its box.
*   
*   Revision 36.6  90/05/30  13:52:32  peter
*   Text and number gadgets with borders have their contents clipped
*   inside the box.
*   Minor byte-saver in ExtraSize calculation.
*   
*   Revision 36.5  90/05/18  18:33:21  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.4  90/05/17  17:35:19  peter
*   Number gadgets were being drawn in color 0 (i.e. blank).
*   No longer attempt to EraseRect() a degenerate rectangle.
*   
*   Revision 36.3  90/05/15  14:19:47  peter
*   Number and Text display gadgets now clear themselves more intelligently
*   when the text changes.
*   
*   Revision 36.2  90/03/31  06:41:23  peter
*   Now use CreateGadgetA() instead of specific Create[xxx]GadgetA().
*   
*   Revision 36.1  90/03/16  14:02:06  peter
*   RCS Clean up.
*   
*
d19 1
a19 1
/*  Function Prototypes: */
d21 1
a21 1
/*  Internal: */
d90 3
a92 4
struct Gadget *CreateTextA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
d104 1
a104 1
	{
d106 1
a106 1
	}
d108 1
a108 1
	{
d110 1
a110 1
	}
d120 1
a120 1
	{
d126 1
a126 1
	}
d128 1
a128 1
	{
d132 1
a132 1
	}
d136 1
a136 1
	{
d140 1
a140 1
	}
d152 1
a152 1
    }
d166 2
a167 7
void RefreshText(win, gad, refresh)

    struct Window *win;
    struct Gadget *gad;
    BOOL refresh;

    {
d172 1
a172 1
    }
d186 7
a192 5
void EraseText(win, gad)

    struct Window *win;
    struct Gadget *gad;

a193 5
    /*  We can be sure that if the rectangle is degenerate, it
	is degenerate in both directions.  This would be the result
	of a NULL IntuiText->IText: */
    if (TXID(gad)->txid_Extent.MaxX >= TXID(gad)->txid_Extent.MinX)
	{
a195 1
	}
d197 1
d211 3
a213 8
void SetTextAttrsA(gad, win, req, taglist)

    struct Gadget *gad;
    struct Window *win;
    struct Requester *req;
    struct TagItem *taglist;

    {
d218 4
a221 3
    /*  Because of a need of the listview, this function protects against
	win = NULL.  If win is NULL, it doesn't do any rendering, but
	just adjusts its internals to account for the change. */
d223 1
a223 1
	{
d226 5
a230 4
	/*  We must position the text here, in case a previous text
	    (like the initial one) was NULL.  Of course, we never
	    move its left edge so the easiest thing to do with it
	    it preserve it across the call to PlaceIntuiText() */
d241 1
a241 1
	    {
d243 1
a243 1
	    /*  Draw new text, if any */
d245 1
a245 1
	    }
a247 1
	}
d249 1
d301 3
a303 4
struct Gadget *CreateNumberA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
d321 1
a321 1
	{
d325 1
a325 1
	}
d338 1
a338 1
    }
d352 3
a354 8
void SetNumberAttrsA(gad, win, req, taglist)

    struct Gadget *gad;
    struct Window *win;
    struct Requester *req;
    struct TagItem *taglist;

    {
d358 1
a358 1
	{
a363 1
	}
d365 1
d379 2
a380 5
void CalcExtent(gad)

    struct Gadget *gad;

    {
d383 1
a383 1
    /*  Figure extent of text: */
d389 1
a389 1
	{
d391 1
a391 1
	}
d400 1
a400 1
    }
@


38.1
log
@Optimized extraction of instance data.
@
text
@d7 1
a7 1
*   $Id: text.c,v 38.0 91/07/11 12:33:14 peter Exp Locker: peter $
d10 3
a140 1
    ULONG place;
a181 4
    rect.MinX = 0;
    rect.MinY = 0;
    rect.MaxX = gad->Width - 1;
    rect.MaxY = gad->Height - 1;
d189 1
a189 3
    if (!(place = ng->ng_Flags & PLACETEXT_MASK))
	place = PLACETEXT_LEFT;
    PlaceIntuiText(gad->GadgetText, &rect, place);
a363 1
    ULONG place;
a378 4
    rect.MinX = 0;
    rect.MinY = 0;
    rect.MaxX = gad->Width - 1;
    rect.MaxY = gad->Height - 1;
d386 1
a386 3
    if (!(place = ng->ng_Flags & PLACETEXT_MASK))
	place = PLACETEXT_LEFT;
    PlaceIntuiText(gad->GadgetText, &rect, place);
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: text.c,v 36.10 91/04/08 13:26:51 peter Exp $
d10 3
a138 1
    struct TextIData *txid;
d144 1
a144 1
    ULONG extrasize = sizeof(struct TextIData);
d162 1
a162 2
    txid = TXID(gad);
    txid->txid_VisualInfo = ng->ng_VisualInfo;
d166 4
a169 4
	txid->txid_IText.IText = MEMORY_FOLLOWING(txid);
	DP(("CTA:  Text Buffer at $%lx\n", txid->txid_IText.IText));
	strcpy(txid->txid_IText.IText, text);
	bbox = MEMORY_N_FOLLOWING(txid->txid_IText.IText,
d175 2
a176 2
	txid->txid_IText.IText = text;
	bbox = MEMORY_FOLLOWING(txid);
d178 2
a179 2
    txid->txid_IText.ITextFont = ng->ng_TextAttr;
    txid->txid_IText.FrontPen = txid->txid_VisualInfo->vi_textPen;
d194 2
a195 2
    PlaceIntuiText(&txid->txid_IText, &rect, PLACETEXT_IN);
    txid->txid_IText.LeftEdge = (border) ? LEFTTRIM : 0;
d224 2
a225 3
    struct TextIData *txid = TXID(gad);
    DP(("RT: Refreshing '%s'\n", txid->txid_IText.IText));
    printITextToFit(win->RPort, &txid->txid_IText,
a247 2
    struct TextIData *txid = TXID(gad);

d251 1
a251 1
    if (txid->txid_Extent.MaxX >= txid->txid_Extent.MinX)
d253 2
a254 2
	EraseRect(win->RPort, txid->txid_Extent.MinX, txid->txid_Extent.MinY,
	    txid->txid_Extent.MaxX, txid->txid_Extent.MaxY);
a277 1
    struct TextIData *txid = TXID(gad);
d288 1
a288 1
	txid->txid_IText.IText = (STRPTR) ti->ti_Data;
d293 1
a293 1
	preserve = txid->txid_IText.LeftEdge;
d298 3
a300 3
	txid->txid_IText.TopEdge = 0;
	PlaceIntuiText(&txid->txid_IText, &rect, PLACETEXT_IN);
	txid->txid_IText.LeftEdge = preserve;
a368 1
    struct NumberIData *nmid;
d371 1
a371 1
    gad = CreateGenericBase(gad, ng, ( sizeof(struct NumberIData) +
d377 1
a377 2
    nmid = NMID(gad);
    nmid->nmid_VisualInfo = ng->ng_VisualInfo;
d379 4
a382 4
    nmid->nmid_IText.IText = nmid->nmid_Buffer;
    sprintf(nmid->nmid_Buffer, Format20Dec, getGTTagData(GTNM_Number, 0, taglist));
    nmid->nmid_IText.ITextFont = ng->ng_TextAttr;
    nmid->nmid_IText.FrontPen = nmid->nmid_VisualInfo->vi_textPen;
d390 1
a390 1
	gad->GadgetRender = (APTR) MakeBevelBox(MEMORY_FOLLOWING(nmid),
d398 2
a399 2
    PlaceIntuiText(&nmid->nmid_IText, &rect, PLACETEXT_IN);
    nmid->nmid_IText.LeftEdge = (border) ? LEFTTRIM : 0;
d401 1
a401 1
    DP(("CN:  Number is '%s'\n", nmid->nmid_IText.IText));
a429 1
    struct NumberIData *nmid = NMID(gad);
d434 2
a435 2
	sprintf(nmid->nmid_IText.IText, Format20Dec, (LONG) ti->ti_Data);
	DP(("SNAA:  Number is '%s'\n", nmid->nmid_IText.IText));
a459 1
    struct TextIData *txid = TXID(gad);
d462 3
a464 3
    intuiTextSize(&txid->txid_IText, &point);
    txid->txid_Extent.MinX = gad->LeftEdge + txid->txid_IText.LeftEdge;
    txid->txid_Extent.MinY = gad->TopEdge+ txid->txid_IText.TopEdge; 
d471 2
a472 2
    txid->txid_Extent.MaxX = txid->txid_Extent.MinX + point.x - 1;
    txid->txid_Extent.MaxY = txid->txid_Extent.MinY + point.y - 1;
d474 4
a477 4
	txid->txid_Extent.MinX,
	txid->txid_Extent.MinY,
	txid->txid_Extent.MaxX,
	txid->txid_Extent.MaxY));
@
