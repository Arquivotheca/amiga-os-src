head     39.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.9
date     92.08.19.18.12.26;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.05.29.15.38.40;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.24.17.10.46;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.13.14.05.15;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.07.13.14.36;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.25.14.38.26;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.03.15.05.05;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.48.01;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.55.44;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.16.18.43.10;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.27.13.26.53;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.07.11.12.44.46;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.32.23;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.9
log
@Added support for GTTX_Clipped tag
@
text
@#ifndef LIBRARIES_GADTOOLS_H
#define LIBRARIES_GADTOOLS_H
/*
**	$Id: gadtools.h,v 39.8 92/05/29 15:38:40 vertex Exp Locker: vertex $
**
**	gadtools.library definitions
**
**	(C) Copyright 1989-1992, Commodore-Amiga, Inc.
**	All Rights Reserved
*/

/*------------------------------------------------------------------------*/

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif

#ifndef INTUITION_INTUITION_H
#include <intuition/intuition.h>
#endif

/*------------------------------------------------------------------------*/

/* The kinds (almost classes) of gadgets that GadTools supports.
 * Use these identifiers when calling CreateGadgetA()
 */

#define GENERIC_KIND	0
#define BUTTON_KIND	1
#define CHECKBOX_KIND	2
#define INTEGER_KIND	3
#define LISTVIEW_KIND	4
#define MX_KIND		5
#define NUMBER_KIND	6
#define CYCLE_KIND	7
#define PALETTE_KIND	8
#define SCROLLER_KIND	9
/* Kind number 10 is reserved */
#define SLIDER_KIND	11
#define STRING_KIND	12
#define TEXT_KIND	13

#define NUM_KINDS	14

/*------------------------------------------------------------------------*/

/* 'Or' the appropriate set together for your Window IDCMPFlags: */

#define ARROWIDCMP	(IDCMP_GADGETUP | IDCMP_GADGETDOWN |\
	IDCMP_INTUITICKS | IDCMP_MOUSEBUTTONS)

#define BUTTONIDCMP	(IDCMP_GADGETUP)
#define CHECKBOXIDCMP	(IDCMP_GADGETUP)
#define INTEGERIDCMP	(IDCMP_GADGETUP)
#define LISTVIEWIDCMP	(IDCMP_GADGETUP | IDCMP_GADGETDOWN |\
	IDCMP_MOUSEMOVE | ARROWIDCMP)

#define MXIDCMP		(IDCMP_GADGETDOWN)
#define NUMBERIDCMP	(0L)
#define CYCLEIDCMP	(IDCMP_GADGETUP)
#define PALETTEIDCMP	(IDCMP_GADGETUP)

/* Use ARROWIDCMP|SCROLLERIDCMP if your scrollers have arrows: */
#define SCROLLERIDCMP	(IDCMP_GADGETUP | IDCMP_GADGETDOWN | IDCMP_MOUSEMOVE)
#define SLIDERIDCMP	(IDCMP_GADGETUP | IDCMP_GADGETDOWN | IDCMP_MOUSEMOVE)
#define STRINGIDCMP	(IDCMP_GADGETUP)

#define TEXTIDCMP	(0L)

/*------------------------------------------------------------------------*/

/* Generic NewGadget used by several of the gadget classes: */

struct NewGadget
{
    WORD ng_LeftEdge, ng_TopEdge;	/* gadget position */
    WORD ng_Width, ng_Height;		/* gadget size */
    UBYTE *ng_GadgetText;		/* gadget label */
    struct TextAttr *ng_TextAttr;	/* desired font for gadget label */
    UWORD ng_GadgetID;			/* gadget ID */
    ULONG ng_Flags;			/* see below */
    APTR ng_VisualInfo;			/* Set to retval of GetVisualInfo() */
    APTR ng_UserData;			/* gadget UserData */
};


/* ng_Flags control certain aspects of the gadget.  The first five control
 * the placement of the descriptive text.  Each gadget kind has its default,
 * which is usually PLACETEXT_LEFT.  Consult the autodocs for details.
 */

#define PLACETEXT_LEFT	0x0001	/* Right-align text on left side */
#define PLACETEXT_RIGHT	0x0002  /* Left-align text on right side */
#define PLACETEXT_ABOVE	0x0004  /* Center text above */
#define PLACETEXT_BELOW	0x0008  /* Center text below */
#define PLACETEXT_IN	0x0010  /* Center text on */

#define NG_HIGHLABEL	0x0020  /* Highlight the label */


/*------------------------------------------------------------------------*/

/* Fill out an array of these and pass that to CreateMenus(): */

struct NewMenu
{
    UBYTE nm_Type;		/* See below */
    /* Compiler inserts a PAD byte here */
    STRPTR nm_Label;		/* Menu's label */
    STRPTR nm_CommKey;		/* MenuItem Command Key Equiv */
    UWORD nm_Flags;		/* Menu or MenuItem flags (see note) */
    LONG nm_MutualExclude;	/* MenuItem MutualExclude word */
    APTR nm_UserData;		/* For your own use, see note */
};

/* Needed only by inside IM_ definitions below */
#define MENU_IMAGE	128

/* nm_Type determines what each NewMenu structure corresponds to.
 * for the NM_TITLE, NM_ITEM, and NM_SUB values, nm_Label should
 * be a text string to use for that menu title, item, or sub-item.
 * For IM_ITEM or IM_SUB, set nm_Label to point at the Image structure
 * you wish to use for this item or sub-item.
 * NOTE: At present, you may only use conventional images.
 * Custom images created from Intuition image-classes do not work.
 */
#define NM_TITLE	1	/* Menu header */
#define NM_ITEM		2	/* Textual menu item */
#define NM_SUB		3	/* Textual menu sub-item */

#define IM_ITEM		(NM_ITEM|MENU_IMAGE)	/* Graphical menu item */
#define IM_SUB		(NM_SUB|MENU_IMAGE)	/* Graphical menu sub-item */

/* The NewMenu array should be terminated with a NewMenu whose
 * nm_Type equals NM_END.
 */
#define NM_END		0	/* End of NewMenu array */

/* Starting with V39, GadTools will skip any NewMenu entries whose
 * nm_Type field has the NM_IGNORE bit set.
 */
#define NM_IGNORE	64


/* nm_Label should be a text string for textual items, a pointer
 * to an Image structure for graphical menu items, or the special
 * constant NM_BARLABEL, to get a separator bar.
 */
#define NM_BARLABEL	((STRPTR)-1)

/* The nm_Flags field is used to fill out either the Menu->Flags or
 * MenuItem->Flags field.  Note that the sense of the MENUENABLED or
 * ITEMENABLED bit is inverted between this use and Intuition's use,
 * in other words, NewMenus are enabled by default.  The following
 * labels are provided to disable them:
 */
#define NM_MENUDISABLED	MENUENABLED
#define NM_ITEMDISABLED	ITEMENABLED

/* New for V39:  NM_COMMANDSTRING.  For a textual MenuItem or SubItem,
 * point nm_CommKey at an arbitrary string, and set the NM_COMMANDSTRING
 * flag.
 */
#define NM_COMMANDSTRING COMMSEQ

/* The following are pre-cleared (COMMSEQ, ITEMTEXT, and HIGHxxx are set
 * later as appropriate):
 * Under V39, the COMMSEQ flag bit is not cleared, since it now has
 * meaning.
 */
#define NM_FLAGMASK	(~(COMMSEQ | ITEMTEXT | HIGHFLAGS))
#define NM_FLAGMASK_V39	(~(ITEMTEXT | HIGHFLAGS))

/* You may choose among CHECKIT, MENUTOGGLE, and CHECKED.
 * Toggle-select menuitems are of type CHECKIT|MENUTOGGLE, along
 * with CHECKED if currently selected.  Mutually exclusive ones
 * are of type CHECKIT, and possibly CHECKED too.  The nm_MutualExclude
 * is a bit-wise representation of the items excluded by this one,
 * so in the simplest case (choose 1 among n), these flags would be
 * ~1, ~2, ~4, ~8, ~16, etc.  See the Intuition Menus chapter.
 */

/* A UserData pointer can be associated with each Menu and MenuItem structure.
 * The CreateMenus() call allocates space for a UserData after each
 * Menu or MenuItem (header, item or sub-item).  You should use the
 * GTMENU_USERDATA() or GTMENUITEM_USERDATA() macro to extract it.
 */

#define GTMENU_USERDATA(menu) (* ( (APTR *)(((struct Menu *)menu)+1) ) )
#define GTMENUITEM_USERDATA(menuitem) (* ( (APTR *)(((struct MenuItem *)menuitem)+1) ) )

/* Here is an old one for compatibility.  Do not use in new code! */
#define MENU_USERDATA(menuitem) (* ( (APTR *)(menuitem+1) ) )

/* These return codes can be obtained through the GTMN_SecondaryError tag */
#define GTMENU_TRIMMED	0x00000001	/* Too many menus, items, or subitems,
					 * menu has been trimmed down
					 */
#define GTMENU_INVALID	0x00000002	/* Invalid NewMenu array */
#define GTMENU_NOMEM	0x00000003	/* Out of memory */

/*------------------------------------------------------------------------*/

/* Starting with V39, checkboxes and mx gadgets can be scaled to your
 * specified gadget width/height.  Use the new GTCB_Scaled or GTMX_Scaled
 * tags, respectively.  Under V37, and by default in V39, the imagery
 * is of the following fixed size:
 */

/* MX gadget default dimensions: */
#define MX_WIDTH	17
#define MX_HEIGHT	9

/* Checkbox default dimensions: */
#define CHECKBOX_WIDTH	26
#define CHECKBOX_HEIGHT	11

/*------------------------------------------------------------------------*/

/* Tags for GadTools functions: */

#define GT_TagBase	     TAG_USER + 0x80000

#define GTVI_NewWindow	     GT_TagBase+1  /* Unused */
#define GTVI_NWTags	     GT_TagBase+2  /* Unused */

#define GT_Private0	     GT_TagBase+3  /* (private) */

#define GTCB_Checked	     GT_TagBase+4  /* State of checkbox */

#define GTLV_Top	     GT_TagBase+5  /* Top visible one in listview */
#define GTLV_Labels	     GT_TagBase+6  /* List to display in listview */
#define GTLV_ReadOnly	     GT_TagBase+7  /* TRUE if listview is to be
					    * read-only
					    */
#define GTLV_ScrollWidth     GT_TagBase+8  /* Width of scrollbar */

#define GTMX_Labels	     GT_TagBase+9  /* NULL-terminated array of labels */
#define GTMX_Active	     GT_TagBase+10 /* Active one in mx gadget */

#define GTTX_Text	     GT_TagBase+11 /* Text to display */
#define GTTX_CopyText	     GT_TagBase+12 /* Copy text label instead of
					    * referencing it
					    */

#define GTNM_Number	     GT_TagBase+13 /* Number to display */

#define GTCY_Labels	     GT_TagBase+14 /* NULL-terminated array of labels */
#define GTCY_Active	     GT_TagBase+15 /* The active one in the cycle gad */

#define GTPA_Depth	     GT_TagBase+16 /* Number of bitplanes in palette */
#define GTPA_Color	     GT_TagBase+17 /* Palette color */
#define GTPA_ColorOffset     GT_TagBase+18 /* First color to use in palette */
#define GTPA_IndicatorWidth  GT_TagBase+19 /* Width of current-color indicator */
#define GTPA_IndicatorHeight GT_TagBase+20 /* Height of current-color indicator */

#define GTSC_Top	     GT_TagBase+21 /* Top visible in scroller */
#define GTSC_Total	     GT_TagBase+22 /* Total in scroller area */
#define GTSC_Visible	     GT_TagBase+23 /* Number visible in scroller */
#define GTSC_Overlap	     GT_TagBase+24 /* Unused */

/*  GT_TagBase+25 through GT_TagBase+37 are reserved */

#define GTSL_Min	     GT_TagBase+38 /* Slider min value */
#define GTSL_Max	     GT_TagBase+39 /* Slider max value */
#define GTSL_Level	     GT_TagBase+40 /* Slider level */
#define GTSL_MaxLevelLen     GT_TagBase+41 /* Max length of printed level */
#define GTSL_LevelFormat     GT_TagBase+42 /* Format string for level */
#define GTSL_LevelPlace      GT_TagBase+43 /* Where level should be placed */
#define GTSL_DispFunc	     GT_TagBase+44 /* Callback for number calculation
					    * before display
					    */

#define GTST_String	     GT_TagBase+45 /* String gadget's displayed string */
#define GTST_MaxChars	     GT_TagBase+46 /* Max length of string */

#define GTIN_Number	     GT_TagBase+47 /* Number in integer gadget */
#define GTIN_MaxChars	     GT_TagBase+48 /* Max number of digits */

#define GTMN_TextAttr	     GT_TagBase+49 /* MenuItem font TextAttr */
#define GTMN_FrontPen	     GT_TagBase+50 /* MenuItem text pen color */

#define GTBB_Recessed	     GT_TagBase+51 /* Make BevelBox recessed */

#define GT_VisualInfo	     GT_TagBase+52 /* result of VisualInfo call */

#define GTLV_ShowSelected    GT_TagBase+53 /* show selected entry beneath
		* listview, set tag data = NULL for display-only, or pointer
		* to a string gadget you've created
		*/
#define GTLV_Selected	     GT_TagBase+54 /* Set ordinal number of selected
					    * entry in the list
					    */
#define GT_Reserved1	     GT_TagBase+56 /* Reserved for future use */

#define GTTX_Border	     GT_TagBase+57 /* Put a border around
					    * Text-display gadgets
					    */
#define GTNM_Border	     GT_TagBase+58 /* Put a border around
					    * Number-display gadgets
					    */

#define GTSC_Arrows	     GT_TagBase+59 /* Specify size of arrows for
					    * scroller
					    */

#define GTMN_Menu	     GT_TagBase+60 /* Pointer to Menu for use by
					    * LayoutMenuItems()
					    */
#define GTMX_Spacing	     GT_TagBase+61 /* Added to font height to
		* figure spacing between mx choices.  Use this instead
		* of LAYOUTA_SPACING for mx gadgets.
		*/

/* New to V37 GadTools.  Ignored by GadTools V36 */
#define GTMN_FullMenu	     GT_TagBase+62 /* Asks CreateMenus() to
		* validate that this is a complete menu structure
		*/
#define GTMN_SecondaryError  GT_TagBase+63 /* ti_Data is a pointer
		* to a ULONG to receive error reports from CreateMenus()
		*/
#define GT_Underscore	     GT_TagBase+64 /* ti_Data points to the symbol
		* that preceeds the character you'd like to underline in a
		* gadget label
		*/
#define GTST_EditHook	     GT_TagBase+55 /* String EditHook */
#define GTIN_EditHook	     GTST_EditHook /* Same thing, different name,
		* just to round out INTEGER_KIND gadgets
		*/

/* New to V39 GadTools.  Ignored by GadTools V36 and V37 */
#define GTMN_Checkmark	     GT_TagBase+65 /* ti_Data is checkmark img to use */
#define GTMN_AmigaKey	     GT_TagBase+66 /* ti_Data is Amiga-key img to use */
#define GTMN_NewLookMenus    GT_TagBase+67 /* ti_Data is boolean */

/* New to V39 GadTools.  Ignored by GadTools V36 and V37.
 * Set to TRUE if you want the checkbox or mx image scaled to
 * the gadget width/height you specify.  Defaults to FALSE,
 * for compatibility.
 */
#define GTCB_Scaled	     GT_TagBase+68 /* ti_Data is boolean */
#define GTMX_Scaled	     GT_TagBase+69 /* ti_Data is boolean */

#define GTPA_NumColors       GT_TagBase+70 /* Number of colors in palette */

#define GTMX_TitlePlace      GT_TagBase+71 /* Where to put the title */

#define GTTX_FrontPen        GT_TagBase+72 /* Text color in TEXT_KIND gad */
#define GTTX_BackPen         GT_TagBase+73 /* Bgrnd color in TEXT_KIND gad */
#define GTTX_Justification   GT_TagBase+74 /* See GTJ_#? constants */

#define GTNM_FrontPen        GT_TagBase+72 /* Text color in NUMBER_KIND gad */
#define GTNM_BackPen         GT_TagBase+73 /* Bgrnd color in NUMBER_KIND gad */
#define GTNM_Justification   GT_TagBase+74 /* See GTJ_#? constants */
#define GTNM_Format          GT_TagBase+75 /* Formatting string for number */
#define GTNM_MaxNumberLen    GT_TagBase+76 /* Maximum length of number */

#define GTBB_FrameType       GT_TagBase+77 /* defines what kind of boxes
                                            * DrawBevelBox() renders. See
                                            * the BBFT_#? constants for
                                            * possible values
                                            */

#define GTLV_MakeVisible     GT_TagBase+78 /* Make this item visible */
#define GTLV_ItemHeight      GT_TagBase+79 /* Height of an individual item */

#define GTSL_MaxPixelLen     GT_TagBase+80 /* Max pixel size of level display */
#define GTSL_Justification   GT_TagBase+81 /* how should the level be displayed */

#define GTPA_ColorTable      GT_TagBase+82 /* colors to use in palette */

#define GTLV_CallBack        GT_TagBase+83 /* general-purpose listview call back */
#define GTLV_MaxPen          GT_TagBase+84 /* maximum pen number used by call back */

#define GTTX_Clipped         GT_TagBase+85 /* make a TEXT_KIND clip text */
#define GTNM_Clipped         GT_TagBase+85 /* make a NUMBER_KIND clip text */

/* Old definition, now obsolete: */
#define GT_Reserved0	     GTST_EditHook

/*------------------------------------------------------------------------*/

/* Justification types for GTTX_Justification and GTNM_Justification tags */
#define GTJ_LEFT   0
#define GTJ_RIGHT  1
#define GTJ_CENTER 2

/*------------------------------------------------------------------------*/

/* Bevel box frame types for GTBB_FrameType tag */
#define BBFT_BUTTON	 1  /* Standard button gadget box */
#define BBFT_RIDGE	 2  /* Standard string gadget box */
#define BBFT_ICONDROPBOX 3  /* Standard icon drop box     */

/*------------------------------------------------------------------------*/

/* Typical suggested spacing between "elements": */
#define INTERWIDTH	8
#define INTERHEIGHT	4

/*------------------------------------------------------------------------*/

/* "NWay" is an old synonym for cycle gadgets */
#define NWAY_KIND	CYCLE_KIND
#define NWAYIDCMP	CYCLEIDCMP
#define GTNW_Labels	GTCY_Labels
#define GTNW_Active	GTCY_Active

/*------------------------------------------------------------------------*/

/* These two definitions are obsolete, but are here for backwards
 * compatibility.  You never need to worry about these:
 */
#define GADTOOLBIT	(0x8000)
/* Use this mask to isolate the user part: */
#define GADTOOLMASK	(~GADTOOLBIT)

/*------------------------------------------------------------------------*/

/* These definitions are for the GTLV_CallBack tag */

/* The different types of messages that a listview callback hook can see */
#define LV_DRAW       0x202L	/* draw yourself, with state */

/* Possible return values from a callback hook */
#define LVCB_OK       0	        /* callback understands this message type    */
#define LVCB_UNKNOWN  1		/* callback does not understand this message */

/* states for LVDrawMsg.lvdm_State */
#define LVR_NORMAL	      0  	/* the usual                 */
#define LVR_SELECTED	      1 	/* for selected gadgets	     */
#define LVR_NORMALDISABLED    2		/* for disabled gadgets	     */
#define	LVR_SELECTEDDISABLED  8		/* disabled and selected     */

/* structure of LV_DRAW messages, object is a (struct Node *) */
struct LVDrawMsg
{
    ULONG             lvdm_MethodID;   /* LV_DRAW                   */
    struct RastPort  *lvdm_RastPort;   /* where to render to        */
    struct DrawInfo  *lvdm_DrawInfo;   /* useful to have around     */
    struct Rectangle  lvdm_Bounds;     /* limits of where to render */
    ULONG             lvdm_State;      /* how to render             */
};

/*------------------------------------------------------------------------*/

#endif /* LIBRARIES_GADTOOLS_H */
@


39.8
log
@Added GTLV_CallBack
Added GTLV_MaxPen
Added support structure and definitions for GTLV_CallBack
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.7 92/04/24 17:10:46 vertex Exp Locker: vertex $
d378 3
@


39.7
log
@Added GTMX_TitlePlace
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.6 92/04/13 14:05:15 vertex Exp Locker: vertex $
d63 1
a63 1
#define NUMBERIDCMP	(NULL)
d72 1
a72 1
#define TEXTIDCMP	(NULL)
a103 1
#define NG_REQGADGET    0x0040  /* NewGadget defines a gadget for a requester */
a104 1

d369 1
d376 3
d418 27
@


39.6
log
@New palette tags...
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.5 92/04/07 13:14:36 vertex Exp Locker: vertex $
d351 2
@


39.5
log
@Added many new tags
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.4 92/03/25 14:38:26 peter Exp Locker: vertex $
d104 3
d350 1
a350 13
/* New to V39 GadTools.  Ignored by GadTools V36 and V37.
 * These tags allow greater control over the PALETTE_KIND gadget.
 * You can now specify an arbitrary number of colors to display
 * in the palette kind.  Use GTPA_ColorRows and GTPA_ColorColumns
 * to specify the number of rows and columns of color squares
 * you wish to have in your gadget.  If neither tag is specified,
 * then the gadget defaults to the old behavior, where it relies
 * on GTPA_Depth for the number of colors, and subdivides itself.
 * If one of GTPA_ColorRows or GTPA_ColorColumns is specified
 * the other defaults to 1.
 */
#define GTPA_ColorRows	     GT_TagBase+70 /* ti_Data is UWORD */
#define GTPA_ColorColumns    GT_TagBase+71 /* ti_Data is UWORD */
d373 1
@


39.4
log
@Added GTPA_ColorRows and GTPA_ColorColumns.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.3 92/03/03 15:05:05 peter Exp Locker: peter $
d8 1
a8 1
**	(C) Copyright 1989, 1990, Commodore-Amiga, Inc.
d361 22
d385 14
@


39.3
log
@Defined GTCB_Scaled and GTMX_Scaled.  Made default check and mx dims
public.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.2 92/02/03 15:48:01 peter Exp Locker: peter $
d347 13
@


39.2
log
@Added NM_COMMANDSTRING, NM_IGNORE, and NM_FLAGMASK_V39 definitions.
Reworked comments.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 39.1 92/01/30 19:55:44 peter Exp Locker: peter $
d28 2
a29 2
/* The kinds (almost classes) of gadgets in the toolkit.  Use these
 * identifiers when calling CreateGadgetA()
d207 15
a221 1
/* Tags for toolkit functions: */
d223 2
d339 8
a346 1
/* GT_TagBase+68 on up reserved for future use */
@


39.1
log
@Re-did braces.  Bumped to V39.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 38.3 92/01/16 18:43:10 peter Exp Locker: peter $
d28 3
a30 2
/*  The kinds (almost classes) of gadgets in the toolkit.  Use these
    identifiers when calling CreateGadgetA() */
d51 1
a51 9
/*  These two definitions are obsolete, but are here for backwards
    compatibility.  You never need to worry about these: */
#define GADTOOLBIT	(0x8000)
/*  Use this mask to isolate the user part: */
#define GADTOOLMASK	(~GADTOOLBIT)

/*------------------------------------------------------------------------*/

/*  'Or' the appropriate set together for your Window IDCMPFlags: */
d67 1
a67 1
/*  Use ARROWIDCMP|SCROLLERIDCMP if your scrollers have arrows: */
d76 1
a76 7
/*  Typical suggested spacing between "elements": */
#define INTERWIDTH	8
#define INTERHEIGHT	4

/*------------------------------------------------------------------------*/

/*  Generic NewGadget used by several of the gadget classes: */
d80 8
a87 8
    WORD ng_LeftEdge, ng_TopEdge;	/*  gadget position */
    WORD ng_Width, ng_Height;		/*  gadget size */
    UBYTE *ng_GadgetText;		/*  gadget label */
    struct TextAttr *ng_TextAttr;	/*  desired font for gadget label */
    UWORD ng_GadgetID;			/*  gadget ID */
    ULONG ng_Flags;			/*  see below */
    APTR ng_VisualInfo;			/*  Set to retval of GetVisualInfo() */
    APTR ng_UserData;			/*  gadget UserData */
d91 4
a94 3
/*  ng_Flags control certain aspects of the gadget.  The first five control
    the placement of the descriptive text.  All larger groups supply a
    default: */
d110 1
a110 1
    UBYTE nm_Type;		/*  See below */
d112 5
a116 5
    STRPTR nm_Label;		/*  Menu's label */
    STRPTR nm_CommKey;		/*  MenuItem Command Key Equiv */
    UWORD nm_Flags;		/*  Menu or MenuItem flags (see note) */
    LONG nm_MutualExclude;	/*  MenuItem MutualExclude word */
    APTR nm_UserData;		/*  For your own use, see note */
d119 1
a119 6
/*  Each nm_Type should be one of these: */
#define NM_TITLE	1
#define NM_ITEM		2
#define NM_SUB		3
#define NM_END		0

d122 5
a126 2
/* For an image menu-item or sub-item, use one of these.  Set
 * nm_Label to point at the Image structure you wish to use.
d130 16
a145 2
#define IM_ITEM		(NM_ITEM | MENU_IMAGE)
#define IM_SUB		(NM_SUB | MENU_IMAGE)
d147 5
a151 1
/*  If you set your label to NM_BARLABEL, you'll get a separator bar. */
d154 6
a159 6

/*  The nm_Flags field is used to fill out either the Menu->Flags or
    MenuItem->Flags field.  Note that the sense of the MENUENABLED or
    ITEMENABLED bit is inverted between this use and Intuition's use,
    in other words, NewMenus are enabled by default.  The following
    labels are provided to disable them: */
d163 11
a173 2
/*  The following are pre-cleared (COMMSEQ, ITEMTEXT, and HIGHxxx are set
    later as appropriate): */
d175 1
d177 14
a190 12
/*  You may choose among CHECKIT, MENUTOGGLE, and CHECKED.
    Toggle-select menuitems are of type CHECKIT|MENUTOGGLE, along
    with CHECKED if currently selected.  Mutually exclusive ones
    are of type CHECKIT, and possibly CHECKED too.  The nm_MutualExclude
    is a bit-wise representation of the items excluded by this one,
    so in the simplest case (choose 1 among n), these flags would be
    ~1, ~2, ~4, ~8, ~16, etc.  See the Intuition Menus chapter. */

/*  A UserData pointer can be associated with each Menu and MenuItem structure.
    The CreateMenus() call allocates space for a UserData after each
    Menu or MenuItem (header, item or sub-item).  You should use the
    GTMENU_USERDATA() or GTMENUITEM_USERDATA() macro to extract it. */
d195 1
a195 1
/*  Here is an old one for compatibility.  Do not use in new code! */
d198 1
a198 1
/*  These return codes can be obtained through the GTMN_SecondaryError tag */
d200 2
a201 1
					   menu has been trimmed down */
d207 1
a207 1
/*  Tags for toolkit functions: */
d221 2
a222 1
					      read-only */
d230 2
a231 1
					      referencing it */
d258 2
a259 1
					      before display */
d275 3
a277 2
		listview, set tag data = NULL for display-only, or pointer
		to a string gadget you've created */
d279 2
a280 1
					      entry in the list */
d284 2
a285 1
					      Text-display gadgets */
d287 2
a288 1
					      Number-display gadgets */
d291 2
a292 1
					      scroller */
d295 2
a296 1
					      LayoutMenuItems() */
d298 3
a300 2
		figure spacing between mx choices.  Use this instead
		of LAYOUTA_SPACING for mx gadgets. */
d304 2
a305 1
		validate that this is a complete menu structure */
d307 2
a308 1
		to a ULONG to receive error reports from CreateMenus() */
d310 3
a312 2
		that preceeds the character you'd like to underline in a
		gadget label */
d315 2
a316 1
		just to round out INTEGER_KIND gadgets */
d323 1
a323 1
/*  GT_TagBase+68 on up reserved for future use */
d330 7
a336 1
/*  "NWay" is an old synonym for cycle gadgets */
d341 9
@


38.3
log
@Now refers to V39 instead of V38.  Added GTIN_EditHook as synonym
for GTST_EditHook.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 38.2 91/11/27 13:26:53 peter Exp Locker: peter $
d92 1
a92 1
    {
d101 1
a101 1
    };
d121 1
a121 1
    {
d129 1
a129 1
    };
@


38.2
log
@GTST_EditHook is now publicly available.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 38.1 91/07/11 12:44:46 peter Exp Locker: peter $
d284 2
d287 1
a287 1
/* New to V38 GadTools.  Ignored by GadTools V36 and V37 */
@


38.1
log
@New tags: GTMN_Checkmark, GTMN_AmigaKey, GTMN_NewLookMenus.
@
text
@d4 1
a4 1
**	$Id: gadtools.h,v 36.17 91/05/02 18:59:34 peter Exp $
a258 1
#define GT_Reserved0	     GT_TagBase+55 /* Reserved */
d283 1
d291 3
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d285 6
a290 1
/*  GT_TagBase+65 on up reserved for future use */
@
