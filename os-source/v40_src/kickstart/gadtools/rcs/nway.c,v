head     39.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.8
date     92.05.29.15.29.12;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.13.14.04.11;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.07.14.00.02;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.26.15.19.29;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.15.28;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.11.50.40;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.49.23;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.54.11;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.30.18.09.23;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.28.08.29.56;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.18.25;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.33.46;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.8
log
@Remove requester support
Code size optimizations
@
text
@/*** nway.c ***************************************************************
*
*   nway.c	- Cycle gadget routines
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: nway.c,v 39.7 92/04/13 14:04:11 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Internal: */
struct ExtGadget *CreateCycleA (struct ExtGadget *gad, struct NewGadget *ng,
    struct TagItem *taglist);
static void UpdateCycle(struct ExtGadget *gad, struct Window *win);
BOOL HandleCycle (struct ExtGadget *gad, struct IntuiMessage *imsg);
void SetCycleAttrsA (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);

/*------------------------------------------------------------------------*/

/* CreateCycleA() */

struct ExtGadget *CreateCycleA(struct ExtGadget *gad, struct NewGadget *ng,
                            struct TagItem *taglist)
{
struct Border *border;

    /* Create a generic gadget, with an extra space for a BevelBox
     * and the little divider border (two borders which have two
     * points each, but which can be shared):
     */
    if (gad = CreateGenericBase(gad,ng,CYCLE_IDATA_SIZE,taglist))
    {
        /* A boolean RELVERIFY gadget with complement-highlighting: */

        gad->Flags      |= GADGIMAGE|GADGHIMAGE;
        gad->Activation  = RELVERIFY;
        gad->GadgetType |= BOOLGADGET;

        SGAD(gad)->sg_EventHandler = HandleCycle;
        SGAD(gad)->sg_SetAttrs     = SetCycleAttrsA;
        SGAD(gad)->sg_GetTable     = Cycle_GetTable;
        SGAD(gad)->sg_Flags        = SG_EXTRAFREE_DISPOSE;

        placeGadgetText( gad, ng->ng_Flags, PLACETEXT_LEFT, NULL );

        /* GTButtonIClass will render this as TEXTPEN or FILLTEXTPEN.
         * The text itself will be set and positioned when UpdateCycle() is
         * called.
         */
        CYID(gad)->cyid_IText.DrawMode = JAM1;
        CYID(gad)->cyid_IText.ITextFont = ng->ng_TextAttr;

        border = MakeCycleBorder(&CYID(gad)->cyid_CycleBorder, gad->Height,
            VI(ng->ng_VisualInfo));

        /* Connect DarkStroke following cycle glyph, and point
         * 'border' at it.
         */
        border = border->NextBorder = &CYID(gad)->cyid_DarkStroke;

        border->XY = (UWORD *) CYID(gad)->cyid_StrokePoints;
        border->LeftEdge = CYCLEGLYPHWIDTH;
        border->TopEdge = 2;
        /* GTButtonIClass will render this as SHADOWPEN (SHINEPEN when selected) */
        border->BackPen = DESIGNSHADOW;
    /*
     *  border->DrawMode = JAM1;
     */
        border->Count = 2;
        border->XY[3] = gad->Height - 5;

        /* Connect LightStroke after DarkStroke, and point
         * 'border' at it
         */
        border = border->NextBorder = &CYID(gad)->cyid_LightStroke;
        /* LightStroke is a lot like DarkStroke, so start by copying it */
        *border = CYID(gad)->cyid_DarkStroke;
        border->LeftEdge++;
        /* GTButtonIClass will render this as SHINEPEN (SHADOWPEN when selected) */
        border->BackPen = DESIGNSHINE;
        border->NextBorder = NULL;

        if (!(gad->SelectRender = gad->GadgetRender =
                               NewObject(GadToolsBase->gtb_GTButtonIClass, NULL,
                                         IA_Width, gad->Width,
                                         IA_Height, gad->Height,
                                         IA_Data, &CYID(gad)->cyid_CycleBorder,
                                         IA_FrameType, FRAME_BUTTON,
                                         TAG_DONE)))
        {
            return(NULL);
        }

        SetCycleAttrsA(gad,NULL,taglist);

        if ( !CYID(gad)->cyid_Labels )
        {
            return( NULL );
        }
    }

    return(gad);
}


/*------------------------------------------------------------------------*/

/*/ HandleCycle()
 *
 * Function to handle messages pertaining to a Cycle gadget.
 *
 *  Notes:
 *
 *  When we go with the new custom gadget stuff, we should make
 *  the highlighted image contain the next label in sequence (but
 *  highlighted), and when the user releases the mouse, it stays,
 *  or reverts if the user rolls off.
 *
 * Created:  13-Oct-89, Peter Cherna
 * Modified: 17-Oct-89, Peter Cherna
 *
 */

BOOL HandleCycle( struct ExtGadget *gad, struct IntuiMessage *imsg )
{
    if (imsg->Qualifier & (IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT))
    {
	/* Cycle backwards: */
	if (CYID(gad)->cyid_Active-- == 0)
	{
	    CYID(gad)->cyid_Active = CYID(gad)->cyid_MaxLabel;
	}
    }
    else
    {
	/* Cycle forward, unless we were at the last: */
	if (CYID(gad)->cyid_Active++ == CYID(gad)->cyid_MaxLabel)
	{
	    CYID(gad)->cyid_Active = 0;
	}
    }
    UpdateCycle(gad,imsg->IDCMPWindow);

    imsg->Code = CYID(gad)->cyid_Active;

    return(TRUE);
}


/*------------------------------------------------------------------------*/

void SetCycleAttrsA( struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist )
{
    UWORD newactive = getGTTagData(GTCY_Active, CYID(gad)->cyid_Active, taglist);
    STRPTR *newlabels = (STRPTR *)getGTTagData(GTCY_Labels, 0, taglist);

    DP(("SCYA: Active is %ld (could be from before)\n", newactive ));
    DP(("SCYA: Labels at $%lx\n", newlabels ));
    /* At create-time, we require newlabels, and we historically
     * tested that the first label was itself non-null.
     * If either of those happen at create-time, we'll return with
     * cyid_Labels unaltered (i.e. NULL).
     * At set time, we take newlabels==NULL to mean unchanged.
     */
    if ( (newlabels) && ( newlabels[0] ) )
    {
	DP(("SCYA: Adopting labels\n"));
	CYID(gad)->cyid_Labels = newlabels;
	/* Find the highest-numbered label: */
	for (CYID(gad)->cyid_MaxLabel = 0;
	    CYID(gad)->cyid_Labels[CYID(gad)->cyid_MaxLabel+1];
	    CYID(gad)->cyid_MaxLabel++)
	    ;
	DP(("SCYA: MaxLabel is %ld\n", CYID(gad)->cyid_MaxLabel));
    }
    /* Idiot-Proofing:  don't let active surpass the last non-null
     * label:
     */
    CYID(gad)->cyid_Active = min(newactive, CYID(gad)->cyid_MaxLabel);
    DP(("SCYA: Adjusted Active is %ld\n", CYID(gad)->cyid_Active ));

    UpdateCycle(gad,win);

    /* Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
    TagAbleGadget(gad, win, taglist);
}


/*------------------------------------------------------------------------*/

/*/ UpdateCycle()
 *
 * Function to change the label on the Cycle gadget.
 *
 * Created:  13-Oct-89, Peter Cherna
 * Modified:  4-Apr-90, Peter Cherna
 *
 */

static void UpdateCycle(struct ExtGadget *gad, struct Window *win)
{
struct Rectangle rect;
UWORD            pos;

    DP(("UCycle:  Welcome\n"));

    rect.MinX = CYCLEGLYPHWIDTH;
    rect.MinY = 0;
    rect.MaxX = gad->Width - 1;
    rect.MaxY = gad->Height - 1;

    pos = removeGadget(win,gad);

    DP(("UCycle:  Active is %ld\n", CYID(gad)->cyid_Active));
    CYID(gad)->cyid_IText.IText    = CYID(gad)->cyid_Labels[CYID(gad)->cyid_Active];
    CYID(gad)->cyid_IText.LeftEdge = 0;
    CYID(gad)->cyid_IText.TopEdge  = 0;

    DP(("UCycle:  Re-placing Label text '%s'\n", CYID(gad)->cyid_IText.IText));
    PlaceIntuiText(&CYID(gad)->cyid_IText, &rect, PLACETEXT_IN);

    DP(("UCycle:  Calling SetAttrs\n"));
    SetAttrs(gad->GadgetRender, MYIA_IText, &CYID(gad)->cyid_IText,
                                TAG_DONE);

    AddRefreshGadget(gad, win, pos);

    DP(("UCycle:  All done\n"));
}
@


39.7
log
@Moved some stuff around to save bytes
Added requester support
@
text
@d7 1
a7 1
*   $Id: nway.c,v 39.6 92/04/07 14:00:02 vertex Exp Locker: vertex $
d20 1
a20 1
struct Gadget *CreateCycleA (struct Gadget *gad, struct NewGadget *ng,
d22 4
a25 4
static void UpdateCycle(struct Gadget *gad, struct Window *win, struct Requester *req);
BOOL HandleCycle (struct Gadget *gad, struct IntuiMessage *imsg);
void SetCycleAttrsA (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
d31 1
a31 1
struct Gadget *CreateCycleA(struct Gadget *gad, struct NewGadget *ng,
d103 1
a103 1
        SetCycleAttrsA(gad,NULL,NULL,taglist);
d133 1
a133 1
BOOL HandleCycle( struct Gadget *gad, struct IntuiMessage *imsg )
d151 1
a151 1
    UpdateCycle(gad,imsg->IDCMPWindow,GetReq(gad,imsg->IDCMPWindow));
d161 2
a162 2
void SetCycleAttrsA( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
d192 1
a192 1
    UpdateCycle(gad,win,req);
d195 1
a195 1
    TagAbleGadget(gad, win, req, taglist);
d210 1
a210 1
static void UpdateCycle(struct Gadget *gad, struct Window *win, struct Requester *req)
d222 1
a222 1
    pos = removeGList(win, gad, 1);
d236 1
a236 1
    AddRefreshGadget(gad, win, req, pos);
@


39.6
log
@*** empty log message ***
@
text
@d7 1
a7 1
*   $Id: nway.c,v 39.5 92/03/26 15:19:29 peter Exp Locker: vertex $
d22 1
a22 1
static void UpdateCycle(struct Window *win, struct Gadget *gad);
d31 2
a32 2
struct Gadget *CreateCycleA( struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist )
d34 1
a34 1
    struct Border *border;
d40 3
a42 43
    gad = CreateGenericBase(gad, ng, CYCLE_IDATA_SIZE, taglist );

    if (!gad)
	return(NULL);

    /* A boolean RELVERIFY gadget with complement-highlighting: */

    gad->Flags |= GADGIMAGE|GADGHIMAGE;
    gad->Activation = RELVERIFY;
    gad->GadgetType |= BOOLGADGET;

    SGAD(gad)->sg_EventHandler = HandleCycle;
    SGAD(gad)->sg_SetAttrs = SetCycleAttrsA;
    SGAD(gad)->sg_GetTable = Cycle_GetTable;
    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;

    placeGadgetText( gad, ng->ng_Flags, PLACETEXT_LEFT, NULL );

    /* GTButtonIClass will render this as TEXTPEN or FILLTEXTPEN.
     * The text itself will be set and positioned when UpdateCycle() is
     * called.
     */
    CYID(gad)->cyid_IText.DrawMode = JAM1;
    CYID(gad)->cyid_IText.ITextFont = ng->ng_TextAttr;

    border = MakeCycleBorder(&CYID(gad)->cyid_CycleBorder, gad->Height,
	VI(ng->ng_VisualInfo));

    /* Connect DarkStroke following cycle glyph, and point
     * 'border' at it.
     */
    border = border->NextBorder = &CYID(gad)->cyid_DarkStroke;

    border->XY = (UWORD *) CYID(gad)->cyid_StrokePoints;
    border->LeftEdge = CYCLEGLYPHWIDTH;
    border->TopEdge = 2;
    /* GTButtonIClass will render this as SHADOWPEN (SHINEPEN when selected) */
    border->BackPen = DESIGNSHADOW;
/*
 *  border->DrawMode = JAM1;
 */
    border->Count = 2;
    border->XY[3] = gad->Height - 5;
d44 60
a103 18
    /* Connect LightStroke after DarkStroke, and point
     * 'border' at it
     */
    border = border->NextBorder = &CYID(gad)->cyid_LightStroke;
    /* LightStroke is a lot like DarkStroke, so start by copying it */
    *border = CYID(gad)->cyid_DarkStroke;
    border->LeftEdge++;
    /* GTButtonIClass will render this as SHINEPEN (SHADOWPEN when selected) */
    border->BackPen = DESIGNSHINE;
    border->NextBorder = NULL;

    gad->SelectRender = gad->GadgetRender =
	NewObject( GadToolsBase->gtb_GTButtonIClass, NULL,
	    IA_Width, gad->Width,
	    IA_Height, gad->Height,
	    IA_Data, &CYID(gad)->cyid_CycleBorder,
	    IA_FrameType, FRAME_BUTTON,
	    TAG_DONE);
d105 4
a108 3
    if (! gad->GadgetRender )
    {
	return(NULL);
a110 5
    SetCycleAttrsA( gad, NULL, NULL, taglist );
    if ( !CYID(gad)->cyid_Labels )
    {
	return( NULL );
    }
a134 2
    /* Get instance data: */

d151 2
a152 1
    UpdateCycle(imsg->IDCMPWindow, gad);
d154 1
d192 1
a192 1
    UpdateCycle(win, gad);
d210 1
a210 1
static void UpdateCycle( struct Window *win, struct Gadget *gad )
d212 2
a213 2
    struct Rectangle rect;
    UWORD pos;
a215 1
    /* Get Cycle instance data: */
d225 1
a225 1
    CYID(gad)->cyid_IText.IText = CYID(gad)->cyid_Labels[CYID(gad)->cyid_Active];
d227 1
a227 1
    CYID(gad)->cyid_IText.TopEdge = 0;
d233 4
a236 3
    SetAttrs( gad->GadgetRender,
	MYIA_IText, &CYID(gad)->cyid_IText,
	TAG_DONE );
a237 1
    AddRefreshGadget(win, gad, pos);
@


39.5
log
@GTButtonIClass now needs IA_FrameType, doesn't need MYIA_VisualInfo.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 39.4 92/03/24 15:15:28 peter Exp Locker: peter $
d22 1
a22 1
void UpdateCycle(struct Window *win, struct Gadget *gad);
d124 1
a124 1
 *  
d196 2
a197 5
    if ( win )
    {
	/* Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
	TagAbleGadget(gad, win, req, taglist);
    }
d212 1
a212 1
void UpdateCycle( struct Window *win, struct Gadget *gad )
d225 1
a225 4
    if (win)
    {
	pos = RemoveGList(win, gad, 1);
    }
d240 1
a240 4
    if (win)
    {
	AddRefreshGList(win, gad, pos, 1, NULL);
    }
a242 3


/*------------------------------------------------------------------------*/
@


39.4
log
@Supports GetAttrs of GTCY_Active, GTCY_Labels, and GA_Disabled.
Renamed nway to cycle internally.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 39.3 92/02/20 11:50:40 peter Exp Locker: peter $
d54 1
d100 1
a100 1
	    MYIA_VisualInfo, ng->ng_VisualInfo,
a106 2

    SGAD(gad)->sg_Flags = SG_EXTRAFREE_DISPOSE;
@


39.3
log
@Now use SGAD() instead of SG_FROM_GAD().
@
text
@d3 1
a3 1
*   nway.c	- N-Way gadget routines
d7 1
a7 1
*   $Id: nway.c,v 39.2 92/02/03 15:49:23 peter Exp Locker: peter $
d20 1
a20 1
struct Gadget *CreateNWayA (struct Gadget *gad, struct NewGadget *ng,
d22 3
a24 3
void UpdateNWay(struct Window *win, struct Gadget *gad);
BOOL HandleNWay (struct Gadget *gad, struct IntuiMessage *imsg);
void SetNWayAttrsA (struct Gadget *gad, struct Window *win,
d29 1
a29 1
/* CreateNWayA() */
d31 1
a31 1
struct Gadget *CreateNWayA( struct Gadget *gad, struct NewGadget *ng,
d40 1
a40 1
    gad = CreateGenericBase(gad, ng, NWAY_IDATA_SIZE, taglist );
d51 3
a53 2
    SGAD(gad)->sg_EventHandler = HandleNWay;
    SGAD(gad)->sg_SetAttrs = SetNWayAttrsA;
d58 1
a58 1
     * The text itself will be set and positioned when UpdateNWay() is
d61 2
a62 2
    NWID(gad)->nwid_IText.DrawMode = JAM1;
    NWID(gad)->nwid_IText.ITextFont = ng->ng_TextAttr;
d64 1
a64 1
    border = MakeCycleBorder(&NWID(gad)->nwid_CycleBorder, gad->Height,
d70 1
a70 1
    border = border->NextBorder = &NWID(gad)->nwid_DarkStroke;
d72 2
a73 2
    border->XY = (UWORD *) NWID(gad)->nwid_StrokePoints;
    border->LeftEdge = NWAYGLYPHWIDTH;
d86 1
a86 1
    border = border->NextBorder = &NWID(gad)->nwid_LightStroke;
d88 1
a88 1
    *border = NWID(gad)->nwid_DarkStroke;
d98 1
a98 1
	    IA_Data, &NWID(gad)->nwid_CycleBorder,
d109 2
a110 2
    SetNWayAttrsA( gad, NULL, NULL, taglist );
    if ( !NWID(gad)->nwid_Labels )
d120 1
a120 1
/*/ HandleNWay()
d122 1
a122 1
 * Function to handle messages pertaining to an NWay gadget.
d136 1
a136 1
BOOL HandleNWay( struct Gadget *gad, struct IntuiMessage *imsg )
d143 1
a143 1
	if (NWID(gad)->nwid_Active-- == 0)
d145 1
a145 1
	    NWID(gad)->nwid_Active = NWID(gad)->nwid_MaxLabel;
d151 1
a151 1
	if (NWID(gad)->nwid_Active++ == NWID(gad)->nwid_MaxLabel)
d153 1
a153 1
	    NWID(gad)->nwid_Active = 0;
d156 2
a157 2
    UpdateNWay(imsg->IDCMPWindow, gad);
    imsg->Code = NWID(gad)->nwid_Active;
d164 1
a164 40
/*i**** gadtools.lib/SetNWayAttrs ********************************************
*
*   NAME
*	SetNWayAttrs -- Change the attributes of an NWay gadget. (V36)
*
*   SYNOPSIS
*	SetNWayAttrs(win, gad, newactive)
*
*	void SetNWayAttrs(struct Window *, struct Gadget *, UWORD);
*
*   FUNCTION
*	Changes the attribute (the active selection) of an NWay
*	gadget.
*
*   INPUTS
*	win - Pointer to the window containing the gadget.
*	gad - Pointer to the NWay gadget returned by CreateNWay().
*	newactive - Ordinal number (counting from zero) of the new
*	    desired active choice.
*
*   RESULT
*	None.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	CreateNWay()
*
******************************************************************************
*
* Created:  13-Oct-89, Peter Cherna
* Modified:  4-Dec-89, Peter Cherna
*
*/

void SetNWayAttrsA( struct Gadget *gad, struct Window *win,
d167 2
a168 2
    UWORD newactive = getGTTagData(GTNW_Active, NWID(gad)->nwid_Active, taglist);
    STRPTR *newlabels = (STRPTR *)getGTTagData(GTNW_Labels, 0, taglist);
d170 2
a171 2
    DP(("SNWA: Active is %ld (could be from before)\n", newactive ));
    DP(("SNWA: Labels at $%lx\n", newlabels ));
d175 1
a175 1
     * nwid_Labels unaltered (i.e. NULL).
d180 2
a181 2
	DP(("SNWA: Adopting labels\n"));
	NWID(gad)->nwid_Labels = newlabels;
d183 3
a185 3
	for (NWID(gad)->nwid_MaxLabel = 0;
	    NWID(gad)->nwid_Labels[NWID(gad)->nwid_MaxLabel+1];
	    NWID(gad)->nwid_MaxLabel++)
d187 1
a187 1
	DP(("SNWA: MaxLabel is %ld\n", NWID(gad)->nwid_MaxLabel));
d192 2
a193 2
    NWID(gad)->nwid_Active = min(newactive, NWID(gad)->nwid_MaxLabel);
    DP(("SNWA: Adjusted Active is %ld\n", NWID(gad)->nwid_Active ));
d195 1
a195 1
    UpdateNWay(win, gad);
d207 1
a207 1
/*/ UpdateNWay()
d209 1
a209 1
 * Function to change the label on the NWay gadget.
d216 1
a216 1
void UpdateNWay( struct Window *win, struct Gadget *gad )
d221 2
a222 2
    DP(("UNWay:  Welcome\n"));
    /* Get NWay instance data: */
d224 1
a224 1
    rect.MinX = NWAYGLYPHWIDTH;
d234 4
a237 4
    DP(("UNWay:  Active is %ld\n", NWID(gad)->nwid_Active));
    NWID(gad)->nwid_IText.IText = NWID(gad)->nwid_Labels[NWID(gad)->nwid_Active];
    NWID(gad)->nwid_IText.LeftEdge = 0;
    NWID(gad)->nwid_IText.TopEdge = 0;
d239 2
a240 2
    DP(("UNWay:  Re-placing Label text '%s'\n", NWID(gad)->nwid_IText.IText));
    PlaceIntuiText(&NWID(gad)->nwid_IText, &rect, PLACETEXT_IN);
d242 1
a242 1
    DP(("UNWay:  Calling SetAttrs\n"));
d244 1
a244 1
	MYIA_IText, &NWID(gad)->nwid_IText,
d251 1
a251 1
    DP(("UNWay:  All done\n"));
@


39.2
log
@Deleted obsolete internal autodocs.  Creation simplified since
BorderCompIClass now handles the bevel box.  Was wasting 160 bytes
of RAM per cycle.  Now uses SetAttrs() instead of SetAttrsA().
@
text
@d7 1
a7 1
*   $Id: nway.c,v 39.1 92/01/30 19:54:11 peter Exp Locker: peter $
a33 1
    struct SpecialGadget *sg;
d51 2
a52 3
    sg = SG_FROM_GAD(gad);
    sg->sg_EventHandler = HandleNWay;
    sg->sg_SetAttrs = SetNWayAttrsA;
d106 1
a106 1
    sg->sg_Flags = SG_EXTRAFREE_DISPOSE;
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 38.3 92/01/30 18:09:23 peter Exp Locker: peter $
d29 1
a29 48
/*i**** gadtools.library/CreateNWayA *****************************************
*
*   NAME
*	CreateNWayA -- Create an N-way toggle gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateNWayA(previous, ng, taglist)
*	struct Gadget *CreateNWayA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *);
*
*   FUNCTION
*	Creates an N-way toggle gadget based on the supplied NewGadget
*	structure and other parameters.
*
*   INPUTS
*	previous - Pointer to previous gadget.
*	ng - Pointer to initialized NewGadget structure that describes
*	    the gadget to create.
*	taglist - Pointer to a TagItem list.
*
*   TAGS
*	GTNW_Labels - Pointer to NULL-terminated array of strings that are
*	    the choices offered by the NWay (required).
*	GTNW_Active (UWORD) - The ordinal number (counting from zero) of
*	    the initially active choice (defaults to zero).
*
*   RESULT
*	gad - Pointer to the resulting NWay gadget if successful, or NULL
*	    if failure or if previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*	These attributes may be changed by calling GT_SetGadgetAttrsA():
*	GTNW_Active (UWORD) - The ordinal number (counting from zero) of
*	    the active choice.
*
*   BUGS
*
*   SEE ALSO
*	CreateGadgetA(), GT_SetGadgetAttrsA()
*
******************************************************************************
*
* Created:  13-Oct-89, Peter Cherna
* Modified: 31-Mar-90, Peter Cherna
*
*/
d35 1
a35 1
    struct Border *border, *firstborder;
d41 1
a41 3
    gad = CreateGenericBase(gad, ng, (NWAY_IDATA_SIZE +
	sizeof(struct BevelBox) + sizeof(struct CycleBorder) +
	2*sizeof(struct Border) + 4*sizeof(WORD)), taglist);
d58 1
a58 1
    /* BorderCompIClass will render this as TEXTPEN or FILLTEXTPEN.
d65 1
a65 2
    firstborder = border = MEMORY_FOLLOWING(NWID(gad));
    MakeCycleBorder((struct CycleBorder *)border, gad->Height,
d67 5
a71 5
    /* First stroke of the groove */
    border = border->NextBorder = MEMORY_FOLLOWING((struct CycleBorder *)border);
    /* Second stroke of the groove */
    border->NextBorder = (struct Border *) MEMORY_FOLLOWING(border);
    border->XY = (UWORD *) MEMORY_FOLLOWING(border->NextBorder);
d73 1
d76 1
a76 1
    /* BorderCompIClass will render this as SHADOWPEN (SHINEPEN when selected) */
d78 3
a80 1
/*  border->DrawMode = JAM1; */
a82 1
    *(border->NextBorder) = *border;
d84 6
a89 1
    border = border->NextBorder;
d91 1
a91 1
    /* BorderCompIClass will render this as SHINEPEN (SHADOWPEN when selected) */
d93 1
a93 7

    /* BevelBox */
    border->NextBorder = MakeBevelBox((struct BevelBox *)
	MEMORY_N_FOLLOWING(border,sizeof(struct Border) + 4*sizeof(WORD)),
	0, 0,
	gad->Width, gad->Height, BB_RAISED,
	VI(ng->ng_VisualInfo));
d95 7
a101 6
    gad->SelectRender = gad->GadgetRender = NewObject( GadToolsBase->gtb_BorderCompIClass, NULL,
	IA_Width, gad->Width,
	IA_Height, gad->Height,
	IA_Data, firstborder,
	IA_Pens, VI(ng->ng_VisualInfo)->vi_DrawInfo->dri_Pens,
	TAG_DONE);
a258 1
    struct TagItem mytags[2];
a268 3
    mytags[0].ti_Tag = MYIA_IText;
    mytags[0].ti_Data = (ULONG) &NWID(gad)->nwid_IText;
    mytags[1].ti_Tag = TAG_DONE;
d282 5
a286 2
    DP(("UNWay:  Calling SetAttrsA\n"));
    SetAttrsA( gad->GadgetRender, mytags );
@


38.3
log
@Uses new space-saving placeGadgetText() function.  Minor other optimizations.
Removed unneeded extra call to PlaceIntuiText().  Create and set now share
code for attributes.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 38.2 92/01/28 08:29:56 peter Exp Locker: peter $
a8 62
*   $Log:	nway.c,v $
 * Revision 38.2  92/01/28  08:29:56  peter
 * BorderCompIClass now referenced off GadToolsBase.
 * Removed unused local variable.
 * 
 * Revision 38.1  91/11/27  13:18:25  peter
 * AbleGadget() no longer has a 'count' parameter.
 * Optimized extraction of instance data.
 * 
 * Revision 38.0  91/07/11  12:33:46  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.13  91/04/08  13:27:13  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.12  91/03/28  13:31:24  peter
*   Because SG_EXTRAFREE_DISPOSE was being set too early, DisposeObject() would
*   be called even if NewObject() had failed.
*   
*   Revision 36.11  91/03/14  16:07:02  peter
*   Now uses stack-based tags instead of array-based ones when it calls
*   tag-based functions.
*   
*   Revision 36.10  90/11/19  12:55:37  peter
*   GA_Disabled now works at create-time too.
*   Updated to match modifications to BorderCompIClass.  Now works right in mono.
*   
*   Revision 36.9  90/11/07  19:42:33  peter
*   Uses new BorderCompIClass().  Glyph is now a border, not a bitmap.
*   Now takes advantage of vi_shinePen and vi_ShadowPen.
*   Now uses AddRefreshGList().  Supports the GA_Disabled tag.
*   
*   Revision 36.8  90/11/06  21:28:57  peter
*   GTCY_Labels can now also be set dynamically, as well as at create time.
*   
*   Revision 36.7  90/10/12  19:43:51  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   Calls internal addGlist() and refreshGList() to save space.
*   
*   Revision 36.6  90/05/18  18:31:51  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.5  90/04/06  00:55:48  peter
*   No longer uses user's RastPort.
*   New glyph is now vertically centered.
*   
*   Revision 36.4  90/04/02  16:11:24  peter
*   Warnings due to new clib/#?_protos.h eliminated.
*   GadgetType is now OR'd in.
*   
*   Revision 36.3  90/03/31  06:40:12  peter
*   Changed to use new design of cycle-gadget imagery.
*   Now use CreateGadgetA() instead of specific Create[xxx]GadgetA().
*   
*   Revision 36.2  90/03/31  00:49:48  peter
*   Uses builtin min().
*   
*   Revision 36.1  90/03/16  14:00:23  peter
*   RCS clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Internal: */
d78 3
a80 4
struct Gadget *CreateNWayA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
d84 4
a87 3
    /*  Create a generic gadget, with an extra space for a BevelBox
	and the little divider border (two borders which have two
	points each, but which can be shared): */
d95 1
a95 1
    /*  A boolean RELVERIFY gadget with complement-highlighting: */
d152 1
a152 1
	{
d154 1
a154 1
	}
d160 1
a160 1
	{
d162 1
a162 1
	}
d164 1
a164 1
    }
d185 3
a187 1
BOOL HandleNWay(gad, imsg)
d189 1
a189 3
    struct Gadget *gad;
    struct IntuiMessage *imsg;

d191 2
a192 3
    /*  Get instance data: */

    if (imsg->Qualifier & (IEQUALIFIER_LSHIFT | IEQUALIFIER_RSHIFT))
a193 3
	/*  Cycle backwards: */
	if (NWID(gad)->nwid_Active-- == 0)
	    {
a194 1
	    }
d196 1
d198 3
a201 3
	/*  Cycle forward, unless we were at the last: */
	if (NWID(gad)->nwid_Active++ == NWID(gad)->nwid_MaxLabel)
	    {
a202 1
	    }
d204 1
d208 1
a208 1
    }
d252 3
a254 4
void SetNWayAttrsA(struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist)

    {
d267 1
a267 1
	{
d270 1
a270 1
	/*  Find the highest-numbered label: */
d276 4
a279 3
	}
    /*  Idiot-Proofing:  don't let active surpass the last non-null
	label: */
d286 2
a287 2
	{
	/*  Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
a288 1
	}
d290 1
d304 2
a305 6
void UpdateNWay(win, gad)

    struct Window *win;
    struct Gadget *gad;

    {
d311 1
a311 1
    /*  Get NWay instance data: */
d322 1
a322 1
	{
d324 1
a324 1
	}
d337 1
a337 1
	{
d339 1
a339 1
	}
d341 1
a341 1
    }
@


38.2
log
@BorderCompIClass now referenced off GadToolsBase.
Removed unused local variable.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 38.1 91/11/27 13:18:25 peter Exp Locker: peter $
d10 4
a143 2
    struct NewGadget mod_ng;
    struct Rectangle rect;
a145 12
    ULONG place;
    STRPTR *labels = (STRPTR *) getGTTagData(GTNW_Labels, NULL, taglist);
    UWORD active = getGTTagData(GTNW_Active, 0, taglist);

    DP(("CNW:  gad at $%lx, ng at $%lx, labels at $%lx, active %ld\n",
	gad, ng, labels, active));
    /*  Creation will fail if pointer to labels is null or
	first label is null: */
    if ((!labels) || (!labels[0]))
	{
	return(NULL);
	}
d150 1
a150 2
    mod_ng = *ng;
    gad = CreateGenericBase(gad, &mod_ng, (NWAY_IDATA_SIZE +
d167 1
a167 18
    NWID(gad)->nwid_Labels = labels;
    NWID(gad)->nwid_VisualInfo = ng->ng_VisualInfo;
    /*  Find the highest-numbered label: */
    for (NWID(gad)->nwid_MaxLabel = 0;
	NWID(gad)->nwid_Labels[NWID(gad)->nwid_MaxLabel+1];
	NWID(gad)->nwid_MaxLabel++)
	;

    /*  Idiot-Proofing:  don't let Active surpass the last non-null
	label: */
    NWID(gad)->nwid_Active = min(active, NWID(gad)->nwid_MaxLabel);
    rect.MinX = 0;
    rect.MinY = 0;
    rect.MaxX = gad->Width - 1;
    rect.MaxY = gad->Height - 1;
    if (!(place = (ng->ng_Flags & PLACETEXT_MASK)))
	place = PLACETEXT_LEFT;
    PlaceIntuiText(gad->GadgetText, &rect, place);
d169 4
a172 1
    /* BorderCompIClass will render this as TEXTPEN or FILLTEXTPEN */
d174 1
a174 3
    NWID(gad)->nwid_IText.ITextFont = mod_ng.ng_TextAttr;
    NWID(gad)->nwid_IText.IText = NWID(gad)->nwid_Labels[NWID(gad)->nwid_Active];
    PlaceIntuiText(&NWID(gad)->nwid_IText, &rect, PLACETEXT_IN);
d178 1
a178 1
	NWID(gad)->nwid_VisualInfo);
d204 1
a204 1
	NWID(gad)->nwid_VisualInfo);
d220 5
a224 1
    UpdateNWay(NULL, gad);
d325 9
a333 1
    if (newlabels)
d335 1
d342 1
d347 1
d351 5
a355 2
    /*  Test for GA_Disabled, set GADGDISABLED and refresh accordingly */
    TagAbleGadget(gad, win, req, taglist);
d396 1
a396 1
    DP(("UNWay:  Re-placing Label text '%s'\n", NWID(gad)->nwid_IText.IText));
d401 1
@


38.1
log
@AbleGadget() no longer has a 'count' parameter.
Optimized extraction of instance data.
@
text
@d7 1
a7 1
*   $Id: nway.c,v 38.0 91/07/11 12:33:46 peter Exp Locker: peter $
d10 4
d233 1
a233 1
    gad->SelectRender = gad->GadgetRender = NewObject( BorderCompIClass, NULL,
a344 1
    struct TagItem *ti;
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: nway.c,v 36.13 91/04/08 13:27:13 peter Exp $
d10 3
a136 1
    struct NWayIData *nwid;
d157 1
a157 1
    gad = CreateGenericBase(gad, &mod_ng, (sizeof(struct NWayIData) +
d174 2
a175 3
    nwid = MEMORY_FOLLOWING(gad);
    nwid->nwid_Labels = labels;
    nwid->nwid_VisualInfo = ng->ng_VisualInfo;
d177 3
a179 3
    for (nwid->nwid_MaxLabel = 0;
	nwid->nwid_Labels[nwid->nwid_MaxLabel+1];
	nwid->nwid_MaxLabel++)
d184 1
a184 1
    nwid->nwid_Active = min(active, nwid->nwid_MaxLabel);
d194 4
a197 4
    nwid->nwid_IText.DrawMode = JAM1;
    nwid->nwid_IText.ITextFont = mod_ng.ng_TextAttr;
    nwid->nwid_IText.IText = nwid->nwid_Labels[nwid->nwid_Active];
    PlaceIntuiText(&nwid->nwid_IText, &rect, PLACETEXT_IN);
d199 1
a199 1
    firstborder = border = MEMORY_FOLLOWING(nwid);
d201 1
a201 1
	nwid->nwid_VisualInfo);
a218 1
    border->NextBorder = NULL;
d227 1
a227 1
	nwid->nwid_VisualInfo);
a271 2
    struct NWayIData *nwid;

a272 1
    nwid = NWID(gad);
d277 1
a277 1
	if (nwid->nwid_Active-- == 0)
d279 1
a279 1
	    nwid->nwid_Active = nwid->nwid_MaxLabel;
d285 1
a285 1
	if (nwid->nwid_Active++ == nwid->nwid_MaxLabel)
d287 1
a287 1
	    nwid->nwid_Active = 0;
d291 1
a291 1
    imsg->Code = nwid->nwid_Active;
a340 1
    struct NWayIData *nwid = NWID(gad);
d342 1
a342 1
    UWORD newactive = getGTTagData(GTNW_Active, nwid->nwid_Active, taglist);
d347 1
a347 1
	nwid->nwid_Labels = newlabels;
d349 3
a351 3
	for (nwid->nwid_MaxLabel = 0;
	    nwid->nwid_Labels[nwid->nwid_MaxLabel+1];
	    nwid->nwid_MaxLabel++)
d356 1
a356 1
    nwid->nwid_Active = min(newactive, nwid->nwid_MaxLabel);
d360 2
a361 5
    if (ti = findGATagItem(GA_DISABLED, taglist))
	{
	/*  Do a regular enable/disable: */
	AbleGadget(gad, win, req, 1, (BOOL)ti->ti_Data);
	}
a381 1
    struct NWayIData *nwid;
a387 1
    nwid = NWID(gad);
d395 1
a395 1
    mytags[0].ti_Data = (ULONG) &nwid->nwid_IText;
d402 4
a405 4
    DP(("UNWay:  Re-placing Label text '%s'\n", nwid->nwid_IText.IText));
    nwid->nwid_IText.IText = nwid->nwid_Labels[nwid->nwid_Active];
    nwid->nwid_IText.LeftEdge = 0;
    nwid->nwid_IText.TopEdge = 0;
d407 1
a407 1
    PlaceIntuiText(&nwid->nwid_IText, &rect, PLACETEXT_IN);
@
