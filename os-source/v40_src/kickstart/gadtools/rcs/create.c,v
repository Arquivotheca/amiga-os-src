head     39.15;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.15
date     93.02.11.10.39.43;  author vertex;  state Exp;
branches ;
next     39.14;

39.14
date     92.12.01.08.57.37;  author vertex;  state Exp;
branches ;
next     39.13;

39.13
date     92.10.16.18.28.04;  author vertex;  state Exp;
branches ;
next     39.12;

39.12
date     92.08.19.18.07.38;  author vertex;  state Exp;
branches ;
next     39.11;

39.11
date     92.05.29.15.32.25;  author vertex;  state Exp;
branches ;
next     39.10;

39.10
date     92.04.24.17.18.57;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.04.15.11.35.25;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.04.13.14.04.45;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.04.07.14.01.08;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.03.26.15.34.01;  author peter;  state Exp;
branches ;
next     39.5;

39.5
date     92.03.25.14.38.07;  author peter;  state Exp;
branches ;
next     39.4;

39.4
date     92.03.24.15.16.36;  author peter;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.03.15.04.47;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.47.26;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.52.33;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.28.08.28.47;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.15.11.02.10;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.26.42;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.40.30;  author peter;  state Exp;
branches ;
next     ;


desc
@
@


39.15
log
@Fixed autodocs
@
text
@/*** create.c *************************************************************
*
*   create.c	- General Creation dispatcher
*
*   Copyright 1989, Commodore-Amiga, Inc.
*
*   $Id: create.c,v 39.14 92/12/01 08:57:37 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Public: */
struct ExtGadget * __asm
LIB_CreateGadgetA (register __d0 ULONG kind,
		  register __a0 struct ExtGadget *gad,
		  register __a1 struct NewGadget *ng,
		  register __a2 struct TagItem *taglist);

/*------------------------------------------------------------------------*/

/****** gadtools.library/CreateGadgetA ***************************************
*
*   NAME
*	CreateGadgetA -- allocate and initialize a gadtools gadget. (V36)
*	CreateGadget -- varargs stub for CreateGadgetA(). (V36)
*
*   SYNOPSIS
*	gad = CreateGadgetA(kind, previous, newgad, tagList)
*	D0                  D0    A0        A1      A2
*
*	struct Gadget *CreateGadgetA(ULONG, struct Gadget *,
*	                             struct NewGadget *, struct TagItem *);
*
*	gad = CreateGadget(kind, previous, newgad, firsttag, ...)
*
*	struct Gadget *CreateGadget(ULONG, struct Gadget *,
*	                            struct NewGadget *, Tag, ...);
*
*   FUNCTION
*	CreateGadgetA() allocates and initializes a new gadget of the
*	specified kind, and attaches it to the previous gadget.  The
*	gadget is created based on the supplied kind, NewGadget structure,
*	and tags.
*
*   INPUTS
*	kind - kind of gadget is to be created, one of the XXX_KIND values
*	       defined in <libraries/gadtools.h>
*	previous - pointer to the previous gadget that this new gadget
*	           is to be attached to. This function will fail if this value
*		   is NULL
*	newgad - a filled in NewGadget structure describing the desired
*	         gadget's size, position, label, etc.
*	tagList - pointer to an array of tags providing optional extra
*		  parameters, or NULL
*
*   TAGS
*	All kinds:
*	GT_Underscore - Indicates the symbol that precedes the character in
*	    the gadget label to be underscored.  This can be to indicate
*	    keyboard equivalents for gadgets (note that GadTools does not
*	    process the keys - it just displays the underscore).  For example,
*	    to underscore the "M" in "Mode":
*		ng.ng_GadgetText = "_Mode:";
*		gad = CreateGadget(..._KIND, &ng, prev,
*			GT_Underscore, '_',
*			...
*			);
*	    (V37)
*
*	BUTTON_KIND (action buttons):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GA_Immediate (BOOL) - Hear IDCMP_GADGETDOWN events from button gadget
*	    (defaults to FALSE). (V39)
*
*	CHECKBOX_KIND (on/off items):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
*	GTCB_Checked (BOOL) - Initial state of checkbox (defaults to FALSE)
*	    (V36)
*	GTCB_Scaled (BOOL) - If true, then checkbox imagery will be scaled to
*	    fit the gadget's width & height.  Otherwise, a fixed size of
*	    CHECKBOXWIDTH by CHECKBOXHEIGHT will be used. (defaults to FALSE)
*	    (V39)
*
*	CYCLE_KIND (multiple state selections):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V37)
*	GTCY_Labels (STRPTR *) - Pointer to NULL-terminated array of strings
*	    that are the choices offered by the cycle gadget. This tag is
*	    required. (V36)
*	GTCY_Active (UWORD) - The ordinal number (counting from zero) of
*	    the initially active choice of a cycle gadget (defaults to zero).
*	    (V36)
*
*	INTEGER_KIND (numeric entry):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GA_Immediate (BOOL) - Hear IDCMP_GADGETDOWN events from integer
*	    gadget (defaults to FALSE). (V39)
*	GA_TabCycle (BOOL) - Set to TRUE so that pressing <TAB> or <Shift-TAB>
*	    will activate the next or previous such gadget. (defaults to TRUE,
*	    unlike regular Intuition string gadgets which default to FALSE).
*	    (V37)
*	GTIN_Number (LONG) - The initial contents of the integer gadget
*	    (defaults to 0). (V36)
*	GTIN_MaxChars (UWORD) - The maximum number of digits that the
*	    integer gadget is to hold (defaults to 10). (V36)
*	GTIN_EditHook (struct Hook *) - Hook to use as a custom
*	    integer gadget edit hook (StringExtend->EditHook) for this gadget.
*	    GadTools will allocate the StringExtend->WorkBuffer for you.
*	    (defaults to NULL). (V37)
*	STRINGA_ExitHelp (BOOL) - Set to TRUE to have the help-key cause an
*	    exit from the integer gadget.  You will then receive an
*	    IDCMP_GADGETUP event with Code = 0x5F (rawkey for help).
*	    (defaults to FALSE) (V37)
*	STRINGA_Justification - Controls the justification of the contents of
*	    an integer gadget.  Choose one of STRINGLEFT, STRINGRIGHT, or
*	    STRINGCENTER (defaults to STRINGLEFT). (V37)
*	STRINGA_ReplaceMode (BOOL) - If TRUE, this integer gadget is in
*	    replace-mode (defaults to FALSE (insert-mode)). (V37)
*
*	LISTVIEW_KIND (scrolling list):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V39)
*	GTLV_Top (WORD) - Top item visible in the listview.  This value
*	    will be made reasonable if out-of-range (defaults to 0). (V36)
*	GTLV_MakeVisible (WORD) - Number of an item that should be forced
*	    within the visible area of the listview by doing minimal scrolling.
*	    This tag overrides GTLV_Top. (V39)
*	GTLV_Labels (struct List *) - List of nodes whose ln_Name fields
*	    are to be displayed in the listview. (V36)
*	GTLV_ReadOnly (BOOL) - If TRUE, then listview is read-only
*	    (defaults to FALSE). (V36)
*	GTLV_ScrollWidth (UWORD) - Width of scroll bar for listview.
*	    Must be greater than zero (defaults to 16). (V36)
*	GTLV_ShowSelected (struct Gadget *) - NULL to have the currently
*	    selected item displayed beneath the listview under V37 or with
*	    a highlight bar in V39. If not NULL, this is a pointer to
*	    an already-created GadTools STRING_KIND gadget to have an
*	    editable display of the currently selected item. If the tag is
*	    not present, the currently selected item will not be displayed.
*	    (V36)
*	GTLV_Selected (UWORD) - Ordinal number of currently selected
*	    item, or ~0 to have no current selection (defaults to ~0). (V36)
*	LAYOUTA_Spacing (UWORD) - Extra space to place between lines of
*	    listview (defaults to 0). (V36)
*	GTLV_ItemHeight (UWORD) - The exact height of an item. This is
*	    normally useful for listviews that use the GTLV_CallBack
*	    rendering hook (defaults to ng->ng_TextAttr->ta_YSize). (V39)
*	GTLV_CallBack (struct Hook *) - Callback hook for various listview
*	    operations. As of V39, the only callback supported is for custom
*	    rendering of individual items in the listview. The call back hook
*	    is called with:
*		A0 - struct Hook *
*		A1 - struct LVDrawMsg *
*		A2 - struct Node *
*	    The callback hook *must* check the lvdm_MethodID field of the
*	    message and only do processing if it equals LV_DRAW. If any
*	    other value is passed, the callback hook must return LVCB_UNKNOWN
*	GTLV_MaxPen (UWORD) - The maximum pen number used by rendering
*	    in a custom rendering callback hook. This is used to optimize
*	    the rendering and scrolling of the listview display (default is
*	    the maximum pen number used by all of TEXTPEN, BACKGROUNDPEN,
*	    FILLPEN, TEXTFILLPEN, and BLOCKPEN. (V39)
*
*	MX_KIND (mutually exclusive, radio buttons):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V39)
*	GTMX_Labels (STRPTR *) - Pointer to a NULL-terminated array of
*	    strings which are to be the labels beside each choice in a
*	    set of mutually exclusive gadgets. This tag is required. (V36)
*	GTMX_Active (UWORD) - The ordinal number (counting from zero) of
*	    the initially active choice of an mx gadget (defaults to 0). (V36)
*	GTMX_Spacing (UWORD) - The amount of space between each choice
*	    of a set of mutually exclusive gadgets.  This amount is added
*	    to the font height to produce the vertical shift between
*	    choices (defaults to 1). (V36)
*	GTMX_Scaled (BOOL) - If true, then mx gadget imagery will be scaled
*	    to fit the gadget's width & height.  Otherwise, a fixed size of
*	    MXWIDTH by MXHEIGHT will be used. When setting this tag to TRUE,
*	    you should typically set the height of the gadget to be
*	    (ng.ng_TextAttr->ta_YSize + 1). (defaults to FALSE.) (V39)
*	GTMX_TitlePlace - One of PLACETEXT_LEFT, PLACETEXT_RIGHT,
*	    PLACETEXT_ABOVE, or PLACETEXT_BELOW, indicating where the title
*	    of the gadget is to be displayed. Without this tag, the
*	    NewGadget.ng_GadgetText field is ignored for MX_KIND gadgets.
*	    (V39)
*	LAYOUTA_Spacing - FOR COMPATIBILITY ONLY.  Use GTMX_Spacing instead.
*	    The number of extra pixels to insert between each choice of a
*	    mutually exclusive gadget.  This is added to the present gadget
*	    image height (9) to produce the true spacing between choices.
*	    (defaults to FontHeight-8, which is zero for 8-point font users).
*	    (V36)
*
*	NUMBER_KIND (read-only numeric):
*	GTNM_Number (LONG) - A signed long integer to be displayed as a read-only
*	    number (defaults to 0). (V36)
*	GTNM_Border (BOOL) - If TRUE, this flag asks for a recessed border to
*	    be placed around the gadget. (V36)
*	GTNM_FrontPen (UBYTE) - The pen to use when rendering the number
*	    (defaults to DrawInfo->dri_Pens[TEXTPEN]). (V39)
*	GTNM_BackPen (UBYTE) - The pen to use when rendering the background
*	    of the number (defaults to leaving the background untouched).
*	    (V39)
*	GTNM_Justification (UBYTE) - Determines how the number is rendered
*	    within the gadget box. GTJ_LEFT will make the rendering be
*	    flush with the left side of the gadget, GTJ_RIGHT will make it
*	    flush with the right side, and GTJ_CENTER will center the number
*	    within the gadget box. Under V39, using this tag also required
*	    using {GTNM_Clipped, TRUE}, otherwise the text would not show
*	    up in the gadget. This has been fixed in V40.
*	    (defaults to GTJ_LEFT). (V39)
*	GTNM_Format (STRPTR) - C-Style formatting string to apply on the number
*	    before display. Be sure to use the 'l' (long) modifier. This string
*	    is processed using exec.library/RawDoFmt(), so refer to that
*	    function for details. (defaults to "%ld") (V39)
*	GTNM_MaxNumberLen (ULONG) - Maximum number of bytes that can be
*	    generated by applying the GTNM_Format formatting string to the
*	    number (excluding the NULL terminator). (defaults to 10). (V39)
*	GTNM_Clipped (BOOL) - Determine whether text should be clipped to
*	    the gadget dimensions (defaults to FALSE for gadgets without
*	    borders, TRUE for gadgets with borders). (V39)
*
*	PALETTE_KIND (color selection):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GTPA_Depth (UWORD) - Number of bitplanes in the palette
*	    (defaults to 1). (V36)
*	GTPA_Color (UBYTE) - Initially selected color of the palette. This
*	    number is a pen number, and not the ordinal color number within
*	    the palette gadget itself. (defaults to 1). (V36)
*	GTPA_ColorOffset (UBYTE) - First color to use in palette
*	    (defaults to 0). (V36)
*	GTPA_IndicatorWidth (UWORD) - The desired width of the current-color
*	    indicator, if you want one to the left of the palette. (V36)
*	GTPA_IndicatorHeight (UWORD) - The desired height of the current-color
*	    indicator, if you want one above the palette. (V36)
*	GTPA_ColorTable (UBYTE *) - Pointer to a table of pen numbers
*	    indicating  which colors should be used and edited by the palette
*	    gadget. This array must contain as many entries as there are
*	    colors displayed in the palette gadget. The array provided with
*	    this tag must remain valid for the life of the gadget or until a
*	    new table is provided. (default is NULL, which causes a 1-to-1
*	    mapping of pen numbers). (V39)
*	GTPA_NumColors (UWORD) - Number of colors to display in the palette
*	    gadget. This override GTPA_Depth and allows numbers which aren't
*	    powers of 2. (defaults to 2) (V39)
*
*	SCROLLER_KIND (for scrolling through areas or lists):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GA_RelVerify (BOOL) - Hear every IDCMP_GADGETUP event from scroller
*	    (defaults to FALSE). (V36)
*	GA_Immediate (BOOL) - Hear every IDCMP_GADGETDOWN event from scroller
*	    (defaults to FALSE). (V36)
*	GTSC_Top (WORD) - Top visible in area scroller represents
*	    (defaults to 0). (V36)
*	GTSC_Total (WORD) - Total in area scroller represents
*	    (defaults to 0). (V36)
*	GTSC_Visible (WORD) - Number visible in scroller (defaults to 2). (V36)
*	GTSC_Arrows (UWORD) - Asks for arrows to be attached to the scroller.
*	    The value supplied will be taken as the width of each arrow button
*	    for a horizontal scroller, or the height of each button for a
*	    vertical scroller (the other dimension will match the whole
*	    scroller). (V36)
*	PGA_Freedom - Whether scroller is horizontal or vertical.
*	    Choose LORIENT_VERT or LORIENT_HORIZ (defaults to LORIENT_HORIZ).
*	    (V36)
*
*	SLIDER_KIND (to indicate level or intensity):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GA_RelVerify (BOOL) - If you want to hear each slider IDCMP_GADGETUP
*	    event (defaults to FALSE). (V36)
*	GA_Immediate (BOOL) - If you want to hear each slider IDCMP_GADGETDOWN
*	    event (defaults to FALSE). (V36)
*	GTSL_Min (WORD) - Minimum level for slider (defaults to 0). (V36)
*	GTSL_Max (WORD) - Maximum level for slider (defaults to 15). (V36)
*	GTSL_Level (WORD) - Current level of slider (defaults to 0). (V36)
*	GTSL_MaxLevelLen (UWORD) - Maximum length in characters of level string
*	    when rendered beside slider (defaults to 2). (V36)
*	GTSL_LevelFormat (STRPTR) - C-Style formatting string for slider
*	    level.  Be sure to use the 'l' (long) modifier.  This string
*	    is processed using exec.library/RawDoFmt(), so refer to that
*	    function for details. (defaults to "%ld"). (V36)
*	GTSL_LevelPlace - One of PLACETEXT_LEFT, PLACETEXT_RIGHT,
*	    PLACETEXT_ABOVE, or PLACETEXT_BELOW, indicating where the level
*	    indicator is to go relative to slider (default to PLACETEXT_LEFT).
*	    (V36)
*	GTSL_DispFunc ( LONG (*function)(struct Gadget *, WORD) ) - Function
*	    to calculate level to be displayed.  A number-of-colors slider
*	    might want to set the slider up to think depth, and have a
*	    (1 << n) function here.  Defaults to none.  Your function must
*	    take a pointer to gadget as the first parameter, the level
*	    (a WORD) as the second, and return the result as a LONG. (V36)
*	GTSL_MaxPixelLen (ULONG) - Indicates the maximum pixel size used up
*	    by the level display for any value of the slider. This is mostly
*	    useful when dealing with proportional fonts. (defaults to
*	    FontWidth*MaxLevelLen). (V39)
*	GTSL_Justification (UBYTE) - Determines how the level display is to
*	    be justified within its alotted space. Choose one of GTJ_LEFT,
*	    GTJ_RIGHT, or GTJ_CENTER (defaults to GTJ_LEFT). (V39)
*	PGA_Freedom - Set to LORIENT_VERT or LORIENT_HORIZ to have a
*	    vertical or horizontal slider (defaults to LORIENT_HORIZ). (V36)
*
*	STRING_KIND (text-entry):
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE). (V36)
*	GA_Immediate (BOOL) - Hear IDCMP_GADGETDOWN events from string
*	    gadget (defaults to FALSE). (V39)
*	GA_TabCycle (BOOL) - Set to TRUE so that pressing <TAB> or <Shift-TAB>
*	    will activate the next or previous such gadget. (defaults to TRUE,
*	    unlike regular Intuition string gadgets which default to FALSE).
*	    (V37)
*	GTST_String (STRPTR) - The initial contents of the string gadget,
*	    or NULL (default) if string is to start empty. (V36)
*	GTST_MaxChars (UWORD) - The maximum number of characters that the
*	    string gadget is to hold. (V36)
*	GTST_EditHook (struct Hook *) - Hook to use as a custom string gadget
*	    edit hook (StringExtend->EditHook) for this gadget. GadTools will
*	    allocate the StringExtend->WorkBuffer for you. (defaults to NULL).
*	    (V37)
*	STRINGA_ExitHelp (BOOL) - Set to TRUE to have the help-key cause an
*	    exit from the string gadget.  You will then receive an
*	    IDCMP_GADGETUP event with Code = 0x5F (rawkey for help).
*	    (V37)
*	STRINGA_Justification - Controls the justification of the contents of
*	    a string gadget.  Choose one of STRINGLEFT, STRINGRIGHT, or
*	    STRINGCENTER (defaults to STRINGLEFT). (V37)
*	STRINGA_ReplaceMode (BOOL) - If TRUE, this string gadget is in
*	    replace-mode (defaults to FALSE (insert-mode)). (V37)
*
*	TEXT_KIND (read-only text):
*	GTTX_Text - Pointer to a NULL terminated string to be displayed,
*	    as a read-only text-display gadget, or NULL. (defaults to NULL)
*	    (V36)
*	GTTX_CopyText (BOOL) -	This flag instructs the text-display gadget
*	    to copy the supplied text string, instead of using only
*	    pointer to the string.  This only works for the initial value
*	    of GTTX_Text set at CreateGadget() time.  If you subsequently
*	    change GTTX_Text, the new text will be referenced by pointer,
*	    not copied.  Do not use this tag with a NULL GTTX_Text. (V37)
*	GTTX_Border (BOOL) - If TRUE, this flag asks for a recessed
*	    border to be placed around the gadget. (V36)
*	GTTX_FrontPen (UBYTE) - The pen to use when rendering the text
*	    (defaults to DrawInfo->dri_Pens[TEXTPEN]). (V39)
*	GTTX_BackPen (UBYTE) - The pen to use when rendering the background
*	    of the text (defaults to leaving the background untouched).
*	    (V39)
*	GTTX_Justification (UBYTE) - Determines how the text is rendered
*	    within the gadget box. GTJ_LEFT will make the rendering be
*	    flush with the left side of the gadget, GTJ_RIGHT will make it
*	    flush with the right side, and GTJ_CENTER will center the text
*	    within the gadget box. Under V39, using this tag also required
*	    using {GTNM_Clipped, TRUE}, otherwise the text would not show
*	    up in the gadget. This has been fixed in V40.
*	    (defaults to GTJ_LEFT). (V39)
*	GTTX_Clipped (BOOL) - Determine whether text should be clipped to
*	    the gadget dimensions (defaults to FALSE for gadgets without
*	    borders, TRUE for gadgets with borders). (V39)
*
*   RESULT
*	gad - pointer to the new gadget, or NULL if the allocation failed
*	      or if previous was NULL.
*
*   NOTES
*	Note that the ng_VisualInfo and ng_TextAttr fields of the
*	NewGadget structure must be set to valid VisualInfo and
*	TextAttr pointers, or this function will fail.
*
*	Starting with V37, string and integer gadgets have the GFLG_TABCYCLE
*	feature automatically.  If the user presses Tab or Shift-Tab while
*	in a string or integer gadget, the next or previous one in
*	sequence will be activated.  You will hear an IDCMP_GADGETUP message
*	with a code of 0x09.  Use {GA_TabCycle, FALSE} to supress this.
*
*   SEE ALSO
*	FreeGadgets(), GT_SetGadgetAttrs(), GetVisualInfo(),
*	<libraries/gadtools.h>
*
******************************************************************************
*/

typedef struct ExtGadget *(*CREATEFUNC)(struct ExtGadget *, struct NewGadget *, struct TagItem *);

CREATEFUNC CreateKind[NUM_KINDS] =
{
    CreateGenericA,
    CreateButtonGadgetA,
    CreateCheckBoxA,
    CreateIntegerGadgetA,
    CreateListViewA,
    CreateMXA,
    CreateNumberA,
    CreateCycleA,
    CreatePaletteA,
    CreateScrollerA,
    NULL,
    CreateSliderA,
    CreateStringGadgetA,
    CreateTextA
};

struct ExtGadget * ASM LIB_CreateGadgetA(REG(d0) ULONG kind,
                                         REG(a0) struct ExtGadget *gad,
		                         REG(a1) struct NewGadget *ng,
                                         REG(a2) struct TagItem *taglist)
{
struct NewGadget localng;

    localng = *ng;

    if ((kind >= NUM_KINDS) || (kind == SKETCH_KIND) || (!localng.ng_VisualInfo))
	return(NULL);

    if (!localng.ng_TextAttr && (localng.ng_VisualInfo != IGNORE_VISUALINFO))
        localng.ng_TextAttr = VI(localng.ng_VisualInfo)->vi_Screen->Font;

    return((*CreateKind[kind])(gad, &localng, taglist));
}
@


39.14
log
@*** empty log message ***
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.13 92/10/16 18:28:04 vertex Exp Locker: vertex $
d217 4
a220 1
*	    within the gadget box (defaults to GTJ_LEFT). (V39)
d223 2
a224 2
*	    is processed using exec/RawDoFmt(), so refer to that function
*	    for details. (defaults to "%ld") (V39)
d243 1
a243 2
*	    indicator, if you want one to the left of the palette. Starting V39
*	    s(V36)
d292 2
a293 2
*	    is processed using exec/RawDoFmt(), so refer to that function
*	    for details. (defaults to "%ld"). (V36)
d362 4
a365 1
*	    within the gadget box (defaults to GTJ_LEFT). (V39)
@


39.13
log
@Autodoc changes
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.12 92/08/19 18:07:38 vertex Exp Locker: vertex $
d138 1
a138 1
*	GTLV_Labels (struct List *) - List of labels whose ln_Name fields
@


39.12
log
@Added support for GTTX_Clipped tag
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.11 92/05/29 15:32:25 vertex Exp Locker: vertex $
d188 3
a190 1
*	    MXWIDTH by MXHEIGHT will be used. (defaults to FALSE.) (V39)
d234 3
a236 2
*	GTPA_Color (UBYTE) - Initially selected color of the palette
*	    (defaults to 1). (V36)
d240 2
a241 1
*	    indicator, if you want one to the left of the palette. (V36)
d247 4
a250 2
*	    colors displayed in the palette gadget. (default is NULL, which
*	    causes a 1-to-1 mapping of pen numbers). (V39)
@


39.11
log
@Code optimizations
Updated docs
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.10 92/04/24 17:18:57 vertex Exp Locker: vertex $
d223 3
d355 3
@


39.10
log
@Added GTMX_TitlePlace to the autodocs
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.9 92/04/15 11:35:25 vertex Exp Locker: vertex $
d20 1
a20 1
struct Gadget * __asm
d22 1
a22 1
		  register __a0 struct Gadget *gad,
d131 2
d145 2
a146 1
*	    selected item displayed beneath the listview, or pointer to
d153 20
a172 2
*	LAYOUTA_Spacing - Extra space to place between lines of listview
*	    (defaults to 0). (V36)
d365 2
a366 2
*	sequence will be activated.  You will hear a GADGETUP with a code
*	of 0x09.  Use {GA_TabCycle, FALSE} to supress this.
d375 1
a375 1
typedef struct Gadget *(*CREATEFUNC)(struct Gadget *, struct NewGadget *, struct TagItem *);
d395 4
a398 5
struct Gadget * __asm
LIB_CreateGadgetA( register __d0 ULONG kind,
		   register __a0 struct Gadget *gad,
		   register __a1 struct NewGadget *ng,
		   register __a2 struct TagItem *taglist )
d404 1
a404 10
    /* Protect against illegal kinds */
    DP(("CGA:  Enter - VisualInfo at $%lx\n", ng->ng_VisualInfo));
    if ( (kind >= NUM_KINDS) || (kind == SKETCH_KIND) )
    {
	DP(("CGA:  Failing due to invalid kind\n"));
	return(NULL);
    }
    else if (!localng.ng_VisualInfo)
    {
	DP(("CGA:  Failing due to NULL VisualInfo\n"));
a405 1
    }
a409 7
    DP(("CGA:  VisualInfo before CK: $%lx\n", localng.ng_VisualInfo));
    DP(("CGA:  Calling CreateKind[%ld]()\n",kind));
#ifdef DEBUGGING
    gad = (*CreateKind[kind])(gad, &localng, taglist);
    kprintf("CGA:  VisualInfo after CK : $%lx\n", localng.ng_VisualInfo);
    return(gad);
#else
a410 1
#endif
a411 3


/*------------------------------------------------------------------------*/
@


39.9
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.8 92/04/13 14:04:45 vertex Exp Locker: vertex $
d168 5
@


39.8
log
@Updated autodocs for new tags
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.7 92/04/07 14:01:08 vertex Exp Locker: vertex $
d75 1
a75 1
*           (V37)
d190 2
a191 2
*	GTNM_Format (STRPTR) - C-Style formatting string to apply on the number before
*	    display. Be sure to use the 'l' (long) modifier. This string
d287 1
a287 1
*	     or NULL (default) if string is to start empty. (V36)
@


39.7
log
@Can now create with a NULL ng_TextAttr
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.6 92/03/26 15:34:01 peter Exp Locker: vertex $
d211 8
a218 14
*	GTPA_ColorRows (UWORD) - The number of rows of color squares you want
*	    in the palette gadget.  This tag, along with GTPA_ColorColumns,
*	    provides a more flexible specification of the total number of
*	    colors in the palette gadget than GTPA_Depth does.  Either of
*	    these two new tags overrides GTPA_Depth.  If only one is present,
*	    the other defaults to 1.  Under V37 and earlier, only GTPA_Depth
*	    matters. (V39)
*	GTPA_ColorColumns (UWORD) - The number of columns of color squares you
*	    want in the palette gadget.  This tag, along with GTPA_ColorRows,
*	    provides a more flexible specification of the total number of
*	    colors in the palette gadget than GTPA_Depth does.  Either of
*	    these two new tags overrides GTPA_Depth.  If only one is present,
*	    the other defaults to 1.  Under V37 and earlier, only GTPA_Depth
*	    matters. (V39)
@


39.6
log
@Fixed minor autodoc typo.
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.5 92/03/25 14:38:07 peter Exp Locker: peter $
d31 2
a32 2
*	CreateGadgetA -- Allocate and initialize a gadtools gadget. (V36)
*	CreateGadget -- Varargs stub for CreateGadgetA(). (V36)
d35 1
a35 1
*	gad = CreateGadgetA(kind, previous, newgad, taglist)
d37 1
a37 1
*	
d39 1
a39 1
*	    struct NewGadget *, struct TagItem *);
d42 1
a42 1
*	
d44 1
a44 1
*	    struct NewGadget *, Tag, ...);
d53 2
a54 1
*	kind - to indicate what kind of gadget is to be created.
d56 2
a57 1
*	    is to be attached to.
d59 3
a61 2
*	    gadget's size, position, label, etc.
*	taglist - pointer to a TagItem list.
d65 5
a69 5
*	GT_Underscore (New for V37) Indicates the symbol that precedes
*	    the character in the gadget label to be underscored.  This
*	    can be to indicate keyboard equivalents for gadgets (note
*	    that GadTools does not process the keys - it just displays
*	    the underscore).  Example: To underscore the "M" in "Mode"...
d75 1
d79 3
a81 3
*	    (defaults to FALSE).
*	GA_Immediate (BOOL) - (New for V39) Hear IDCMP_GADGETDOWN events
*	    from button gadget (defaults to FALSE).
a83 5
*	GTCB_Checked (BOOL) - Initial state of checkbox, defaults to FALSE.
*	GTCB_Scaled (BOOL) - (New for V39) If true, then checkbox imagery
*	    will be scaled to fit the gadget's width/height.  Otherwise,
*	    a fixed size of CHECKBOXWIDTH by CHECKBOXHEIGHT will be used.
*	    (defaults to FALSE, ignored by V37).
d86 6
d94 2
d97 2
a98 1
*	    that are the choices offered by the cycle gadget (required).
d101 1
a101 2
*	GA_Disabled (BOOL) - (New for V37) Set to TRUE to disable gadget,
*	    FALSE otherwise (defaults to FALSE).
d104 10
a113 2
*	GTIN_Number (ULONG) - The initial contents of the integer gadget
*	    (default zero).
d115 2
a116 13
*	    integer gadget is to hold (defaults to 10).
*	GA_Immediate (BOOL) - (New for V39) Hear IDCMP_GADGETDOWN events
*	    from integer gadget (defaults to FALSE).
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
*	STRINGA_ExitHelp (BOOL) - (New for V37) Set to TRUE to have the
*	    help-key cause an exit from the integer gadget.  You will
*	    then receive a GADGETUP with code = 0x5F (rawkey for help).
*	GA_TabCycle (BOOL) - (New for V37) Set to TRUE so that pressing
*	    <TAB> or <Shift-TAB> will activate the next or previous
*	    such gadget. (defaults to TRUE, unlike regular Intuition string
*	    gadgets, which default to FALSE).
*	GTST_EditHook (struct Hook *) - (New for V37) Hook to use as a custom
d119 10
a128 8
*	    Defaults to NULL.
*	GTIN_EditHook (struct Hook *) - (New for V39) Convenient synonym
*	    for GTST_EditHook, just for completeness.
*	STRINGA_Justification - (New for V37) Controls the justification of
*	    the contents of an integer gadget.  Choose one of STRINGLEFT,
*	    STRINGRIGHT, or STRINGCENTER.  (Defaults to STRINGLEFT).
*	STRINGA_ReplaceMode (BOOL) - (New for V37) If TRUE, this integer gadget
*	    is in replace-mode.  Defaults to FALSE (insert-mode).
d132 4
a135 1
*	    will be made reasonable if out-of-range (defaults to zero).
d137 3
a139 2
*	    are to be displayed in the listview.
*	GTLV_ReadOnly (BOOL) - If TRUE, then listview is read-only.
d141 1
a141 1
*	    Must be greater than zero (defaults to 16).
d145 3
a147 1
*	    editable display of the currently selected item.
d149 1
a149 1
*	    item, or ~0 to have no current selection (defaults to ~0).
d151 1
a151 1
*	    (defaults to zero).
d154 2
d158 1
a158 1
*	    set of mutually exclusive gadgets.
d160 1
a160 1
*	    the initially active choice of an mx gadget (Defaults to zero).
d164 4
a167 5
*	    choices. (defaults to one).
*	GTMX_Scaled (BOOL) - (New for V39) If true, then mx gadget imagery
*	    will be scaled to fit the gadget's width/height.  Otherwise,
*	    a fixed size of MXWIDTH by MXHEIGHT will be used.
*	    (defaults to FALSE, ignored by V37).
d169 5
a173 5
*	    The number of extra pixels to insert between
*	    each choice of a mutually exclusive gadget.  This is added
*	    to the present gadget image height (9) to produce the
*	    true spacing between choices.  (defaults to 
*	    FontHeight-8, which is zero for 8-point font users).
d176 21
a196 4
*	GTNM_Number - A signed long integer to be displayed as a read-only
*	     number (default 0).
*	GTNM_Border (BOOL) - If TRUE, this flag asks for a recessed
*	    border to be placed around the gadget.
d199 2
d202 1
a202 1
*	    (defaults to 1).
d204 1
a204 1
*	    (defaults to 1).
d206 1
a206 1
*	    (defaults to zero).
d208 1
a208 1
*	    indicator, if you want one to the left of the palette.
d210 15
a224 19
*	    indicator, if you want one above the palette.
*	GTPA_ColorRows (UWORD) - (New for V39) - The number of rows of
*	    color squares you want in the palette gadget.  This tag,
*	    along with GTPA_ColorColumns, provides a more flexible
*	    specification of the total number of colors in the palette
*	    gadget than GTPA_Depth does.  Either of these two new tags
*	    overrides GTPA_Depth.  If only one is present, the other
*	    defaults to one.  Under V37 and earlier, only GTPA_Depth
*	    matters.
*	GTPA_ColorColumns (UWORD) - (New for V39) - The number of columns
*	    of color squares you want in the palette gadget.  This tag,
*	    along with GTPA_ColorRows, provides a more flexible
*	    specification of the total number of colors in the palette
*	    gadget than GTPA_Depth does.  Either of these two new tags
*	    overrides GTPA_Depth.  If only one is present, the other
*	    defaults to one.  Under V37 and earlier, only GTPA_Depth
*	    matters.
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
d227 6
d234 1
a234 1
*	    (defaults to zero).
d236 2
a237 2
*	    (defaults to zero).
*	GTSC_Visible (WORD) - Number visible in scroller (defaults to 2).
d242 1
a242 1
*	    scroller).
d244 2
a245 7
*	    Choose LORIENT_VERT or LORIENT_HORIZ (defaults to horiz).
*	GA_Immediate (BOOL) - Hear every IDCMP_GADGETDOWN event from scroller
*	    (defaults to FALSE).
*	GA_RelVerify (BOOL) - Hear every IDCMP_GADGETUP event from scroller
*	    (defaults to FALSE).
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
d248 11
a258 5
*	GTSL_Min (WORD) - Minimum level for slider (default 0).
*	GTSL_Max (WORD) - Maximum level for slider (default 15).
*	GTSL_Level (WORD) - Current level of slider (default 0).
*	GTSL_MaxLevelLen (UWORD) - Max. length in characters of level string
*	    when rendered beside slider.
d262 1
a262 1
*	    for details.
d266 1
d272 8
a279 5
*	    (a WORD) as the second, and return the result as a LONG.
*	GA_Immediate (BOOL) - If you want to hear each slider IDCMP_GADGETDOWN
*	    event.
*	GA_RelVerify (BOOL) - If you want to hear each slider IDCMP_GADGETUP
*	    event.
d281 1
a281 3
*	    vertical or horizontal slider.
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
d284 8
d293 1
a293 1
*	     or NULL (default) if string is to start empty.
d295 14
a308 21
*	    string gadget is to hold.
*	GA_Immediate (BOOL) - (New for V39) Hear IDCMP_GADGETDOWN events
*	    from string gadget (defaults to FALSE).
*	GA_Disabled (BOOL) - Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
*	STRINGA_ExitHelp (BOOL) - (New for V37) Set to TRUE to have the
*	    help-key cause an exit from the string gadget.  You will
*	    then receive a GADGETUP with code = 0x5F (rawkey for help).
*	GA_TabCycle (BOOL) - (New for V37) Set to TRUE so that pressing
*	    <TAB> or <Shift-TAB> will activate the next or previous
*	    such gadget. (defaults to TRUE, unlike regular Intuition string
*	    gadgets, which default to FALSE).
*	GTST_EditHook (struct Hook *) - (New for V37) Hook to use as a custom
*	    string gadget edit hook (StringExtend->EditHook) for this gadget.
*	    GadTools will allocate the StringExtend->WorkBuffer for you.
*	    Defaults to NULL.
*	STRINGA_Justification - (New for V37) Controls the justification of
*	    the contents of a string gadget.  Choose one of STRINGLEFT,
*	    STRINGRIGHT, or STRINGCENTER.  (Defaults to STRINGLEFT).
*	STRINGA_ReplaceMode (BOOL) - (New for V37) If TRUE, this string gadget
*	    is in replace-mode.  Defaults to FALSE (insert-mode).
d312 2
a313 1
*	    as a read-only text-display gadget, or NULL. defaults to NULL.
d315 1
a315 1
*	    to copy the supplied text string, instead of using only 
d319 1
a319 1
*	    not copied.  Do not use this tag with a NULL GTTX_Text.
d321 11
a331 2
*	    border to be placed around the gadget.
*
d335 1
a335 1
*	    or if previous was NULL.
a336 2
*   EXAMPLE
*
a346 3
*	
*
*   BUGS
d349 2
a350 1
*	FreeGadgets(), GT_SetGadgetAttrs(), GetVisualInfo().
d372 1
a372 1
    CreateTextA,
d381 4
d392 1
a392 1
    else if (!ng->ng_VisualInfo)
d397 6
a402 18
    else if ((ng->ng_GadgetText) && (!ng->ng_TextAttr))
    {
	/* !!! Two notes:  One, I could just substitute the screen
	 * default font from the VisualInfo structure, by copying the
	 * ng structure and modifying that field.
	 * Also, I used to have a check for NULL TextAttr which I
	 * pulled because it participated in a problem.  I think
	 * the fix here should have been to require non-NULL
	 * GadgetText before this test is applied (as I now do),
	 * but at the time I pulled the whole test out for some reason.
	 */
	DP(("CGA:  Failing do to NULL TextAttr with non-NULL GadgetText\n"));
	return(NULL);
    }
    else
    {
	DP(("CGA:  VisualInfo before CK: $%lx\n", ng->ng_VisualInfo));
	DP(("CGA:  Calling CreateKind()\n"));
d404 3
a406 3
	gad = (*CreateKind[kind])(gad, ng, taglist);
	kprintf("CGA:  VisualInfo after CK : $%lx\n", ng->ng_VisualInfo);
	return(gad);
d408 1
a408 1
	return((*CreateKind[kind])(gad, ng, taglist));
a409 1
    }
@


39.5
log
@Added GTPA_ColorRows and GTPA_ColorColumns to autodocs.
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.4 92/03/24 15:16:36 peter Exp Locker: peter $
d187 1
a187 1
*	GTPA_ColorColumn (UWORD) - (New for V39) - The number of columns
@


39.4
log
@Fcn renamed to CreateCycleA.
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.3 92/03/03 15:04:47 peter Exp Locker: peter $
d179 16
@


39.3
log
@Added GTCB_Scaled and GTMX_Scaled to the autodocs.
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.2 92/02/03 15:47:26 peter Exp Locker: peter $
d306 1
a306 1
    CreateNWayA,
@


39.2
log
@Updated autodocs to show GA_Immediate is valid for button, string,
and integer kinds.
@
text
@d7 1
a7 1
*   $Id: create.c,v 39.1 92/01/30 19:52:33 peter Exp Locker: peter $
d62 5
a66 6
*	GT_Underscore (GadTools V37 and higher only).
*	    Indicates the symbol that precedes the character in the gadget
*	    label to be underscored.  This would be to indicate keyboard
*	    equivalents for gadgets (note that GadTools does not process
*	    the keys - it just displays the underscore).
*	    Example: To underscore the "M" in "Mode"...
d81 4
d93 2
a94 3
*	GA_Disabled (BOOL) - (GadTools V37 and higher only)
*	    Set to TRUE to disable gadget, FALSE otherwise
*	    (defaults to FALSE).
d112 1
a112 1
*	GTST_EditHook (struct Hook *) - (new for V37) Hook to use as a custom
d116 3
a118 1
*	STRINGA_Justification - (new for V37) Controls the justification of
d121 1
a121 1
*	STRINGA_ReplaceMode (BOOL) - (new for V37) If TRUE, this integer gadget
d151 4
d246 1
a246 1
*	GTST_EditHook (struct Hook *) - (new for V37) Hook to use as a custom
d250 1
a250 1
*	STRINGA_Justification - (new for V37) Controls the justification of
d253 1
a253 1
*	STRINGA_ReplaceMode (BOOL) - (new for V37) If TRUE, this string gadget
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: create.c,v 38.3 92/01/28 08:28:47 peter Exp Locker: peter $
d77 2
d99 2
d227 2
@


38.3
log
@Removed __saveds.
@
text
@d7 1
a7 1
*   $Id: create.c,v 38.2 92/01/15 11:02:10 peter Exp Locker: peter $
a8 58
*   $Log:	create.c,v $
 * Revision 38.2  92/01/15  11:02:10  peter
 * Removed reference to sketch gadget.
 * 
 * Revision 38.1  91/11/27  13:26:42  peter
 * Added undocumented tags (GTST_EditHook, STRINGA_Justification,
 * STRINGA_ReplaceMode).
 * 
 * Revision 38.0  91/07/11  12:40:30  peter
 * Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.14  91/05/07  18:03:38  peter
*   Minor autodoc update to GTLV_Top.
*   
*   Revision 36.13  91/02/02  00:42:47  peter
*   In the CreateGadgetA() autodoc, the following tags were clarified:
*   GTPA_IndicatorWidth/Height, GTLV_ScrollWidth, GTTX_CopyText.
*   CreateGadgetA() is now described as attaching, not linking, the
*   new gadget into the previous.
*   
*   Revision 36.12  91/01/07  21:01:02  peter
*   Updated autodoc to mention GA_TabCycle.
*   
*   Revision 36.11  90/12/01  20:18:46  peter
*   Updated autodocs.
*   
*   Revision 36.10  90/11/19  15:21:46  peter
*   Fixed a typo in the autodocs.
*   
*   Revision 36.9  90/11/19  12:57:00  peter
*   Autodocs now refer to GadTools V37 when necessary.
*   
*   Revision 36.8  90/10/12  19:41:29  peter
*   Autodocs now use modern Intuition names.
*   
*   Revision 36.7  90/08/15  13:05:31  peter
*   Added some debugging.
*   
*   Revision 36.6  90/06/21  13:58:59  peter
*   Improved CreateGadgetA() autodocs.
*   
*   Revision 36.5  90/05/18  18:29:54  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.4  90/05/03  16:30:09  peter
*   Added some DP()'s.
*   
*   Revision 36.3  90/04/12  16:17:14  peter
*   Put register and varargs information into autodocs.
*   
*   Revision 36.2  90/04/06  00:53:38  peter
*   Restored requirement for non-NULL ng_TextAttr, but this time I also
*   made that test only apply if there is a non-NULL ng_GadgetText.
*   
*   Revision 36.1  90/03/16  14:03:22  peter
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Public: */
d284 1
a284 1
    {
d299 1
a299 1
    };
d302 6
a307 7
LIB_CreateGadgetA(register __d0 ULONG kind,
		  register __a0 struct Gadget *gad,
		  register __a1 struct NewGadget *ng,
		  register __a2 struct TagItem *taglist)

    {
    /*  Protect against illegal kinds */
d310 1
a310 1
	{
d313 1
a313 1
	}
d315 1
a315 1
	{
d318 1
a318 1
	}
d320 10
a329 9
	{
	/*  !!! Two notes:  One, I could just substitute the screen
	    default font from the VisualInfo structure, by copying the
	    ng structure and modifying that field.
	    Also, I used to have a check for NULL TextAttr which I
	    pulled because it participated in a problem.  I think
	    the fix here should have been to require non-NULL
	    GadgetText before this test is applied (as I now do),
	    but at the time I pulled the whole test out for some reason. */
d332 1
a332 1
	}
d334 1
a334 1
	{
a343 1
	}
d345 1
@


38.2
log
@Removed reference to sketch gadget.
@
text
@d7 1
a7 1
*   $Id: create.c,v 38.1 91/11/27 13:26:42 peter Exp Locker: peter $
d10 3
d78 1
a78 1
struct Gadget * __saveds __asm
d359 1
a359 1
struct Gadget * __saveds __asm
@


38.1
log
@Added undocumented tags (GTST_EditHook, STRINGA_Justification,
STRINGA_ReplaceMode).
@
text
@d7 1
a7 1
*   $Id: create.c,v 38.0 91/07/11 12:40:30 peter Exp Locker: peter $
d10 4
a333 30
*
*	I've hid the sketch gadget for now, so here are the tags:
*
*	GTSK_BitMap (struct BitMap *) - BitMap to use in sketch gadget
*	    (required).
*	GTSK_bmWidth (UWORD)-  Width of sketch BitMap (defaults to
*	    BitMap->BytesPerRow * 8).
*	GTSK_bmHeight (UWORD) - Height of sketch BitMap (defaults to
*	    BitMap->Rows).
*	GTSK_MagWidth (UWORD) - Horizontal magnification factor for sketch
*	    gadget display.  Also determines gadget width.  If not supplied,
*	    magnification will be derived from the gadget width.
*	GTSK_MagHeight (UWORD) - Vertical magnification factor for sketch.
*	    Also determines gadget height.  If not supplied, magnification
*	    will be derived from the gadget height.
*	GTSK_Color (UWORD) - Color to draw with in sketch gadget.
*	GTSK_FirstColor (UWORD) - First color to use when rendering in
*	    sketch gadget.
*	GTSK_HotSpotX (UWORD) - X-coordinate of sketch HotSpot (default ~0).
*	GTSK_HotSpotY (UWORD) - Y-coordinate of sketch HotSpot (default ~0).
*	GTSK_HSXThick (UWORD) - X- thickness of sketch HotSpot outline
*	    (default 1).
*	GTSK_HSYThick (UWORD) - Y-thickness of sketch HotSpot outline
*	    (default 1).
*	GTSK_HSColor (UWORD) - Color to use for sketch HotSpot outline
*	    (required if using hotspot).
*
* Created:  14-Dec-89
* Modified:  5-Apr-90
*
d350 1
a350 1
    CreateSketchA,
d365 1
a365 1
    if (kind >= NUM_KINDS)
@


38.0
log
@Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: create.c,v 36.14 91/05/07 18:03:38 peter Exp $
d10 3
d157 9
d283 9
@
