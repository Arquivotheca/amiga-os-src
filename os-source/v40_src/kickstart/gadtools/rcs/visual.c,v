head     39.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.7
date     92.07.31.19.23.57;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.07.31.18.22.30;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.05.29.15.27.08;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.15.11.33.32;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.04.07.13.51.03;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.20.11.51.32;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.55.19;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.30.18.10.28;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     92.01.28.08.29.43;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.34.14;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.7
log
@Fixed silly extra parameter to FreeVec()
@
text
@/*** visual.c *************************************************************
*
*   visual.c	- Gadget Toolkit routines for Visuals
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: visual.c,v 39.6 92/07/31 18:22:30 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/****** gadtools.library/GetVisualInfoA **************************************
*
*   NAME
*	GetVisualInfoA -- get information GadTools needs for visuals. (V36)
*	GetVisualInfo -- varargs stub for GetVisualInfoA(). (V36)
*
*   SYNOPSIS
*	vi = GetVisualInfoA(screen, tagList)
*	D0                  A0      A1
*
*	APTR vi = GetVisualInfoA(struct Screen *, struct TagItem *);
*
*	vi = GetVisualInfo(screen, firsttag, ...)
*
*	APTR vi = GetVisualInfo(struct Screen *, Tag, ...);
*
*   FUNCTION
*	Get a pointer to a (private) block of data containing various bits
*	of information that GadTools needs to ensure the best quality
*	visuals.  Use the result in the NewGadget structure of any gadget
*	you create, or as a parameter to the various menu calls.  Once the
*	gadgets/menus are no longer needed (after the last CloseWindow),
*	call FreeVisualInfo().
*
*   INPUTS
*	screen - pointer to the screen you will be opening on. This parameter
*		 may be NULL, in which case this function fails.
*	tagList - pointer to an array of tags providing optional extra
*		  parameters, or NULL.
*
*   TAGS
*	There are currently no tags defined for this function.
*
*   RESULT
*	vi - pointer to private data, or NULL for failure
*
*   SEE ALSO
*	FreeVisualInfo(), intuition/LockPubScreen(),
*	intuition/UnlockPubScreen()
*
******************************************************************************
*
* NOTES
*	I could in the future call graphics/GetVPModeID() on &scr->ViewPort
*	so that I could find out more about the display mode, like aspect
*	ratio.
*
*	Since the taglist parameter is not currently used, the actual
*	function does not define this parameter which makes the code
*	smaller.
*
* Created:   3-Dec-89, Peter Cherna
* Modified: 14-Feb-90, Peter Cherna
*
*/

struct VisualInfo * ASM LIB_GetVisualInfoA(REG(a0) struct Screen *scr)
{
struct VisualInfo *vi;

    if (vi                = AllocVec(sizeof(struct VisualInfo),MEMF_CLEAR))
    if (vi->vi_Screen     = scr)
    if (vi->vi_ScreenFont = OpenFont(scr->Font))
    if (vi->vi_DrawInfo   = GetScreenDrawInfo(scr))
    {
        vi->vi_textPen       = vi->vi_DrawInfo->dri_Pens[TEXTPEN];
        vi->vi_backgroundPen = vi->vi_DrawInfo->dri_Pens[BACKGROUNDPEN];
        return(vi);
    }

    FreeVisualInfo(vi);
    return(NULL);
}


/*------------------------------------------------------------------------*/

/****** gadtools.library/FreeVisualInfo **************************************
*
*   NAME
*	FreeVisualInfo -- return any resources taken by GetVisualInfo. (V36)
*
*   SYNOPSIS
*	FreeVisualInfo(vi)
*	               A0
*
*	VOID FreeVisualInfo(APTR);
*
*   FUNCTION
*	FreeVisualInfo() returns any memory or other resources that
*	were allocated by GetVisualInfoA().  You should only call this function
*	once you are done with using the gadgets (i.e. after CloseWindow()),
*	but while the screen is still valid (i.e. before CloseScreen() or
*	UnlockPubScreen()).
*
*   INPUTS
*	vi - pointer that was obtained by calling GetVisualInfoA(). This
*	     value may be NULL.
*
*   SEE ALSO
*	GetVisualInfoA()
*
******************************************************************************
*
*   NOTES
*	Privately, vi is declared as a struct VisualInfo *
*
* Created:   3-Dec-89, Peter Cherna
* Modified: 14-Jan-90, Peter Cherna
*
*/

VOID ASM LIB_FreeVisualInfo(REG(a0) struct VisualInfo *vi)
{
struct ImageLink *il;
struct ImageLink *next;

    if (vi)
    {
        il = vi->vi_Images;
        while (il)
        {
            next = il->il_Next;
            DisposeObject(il->il_Image);
            FreeVec(il);
            il = next;
        }

	FreeScreenDrawInfo(vi->vi_Screen,vi->vi_DrawInfo);
	closeFont(vi->vi_ScreenFont);
	FreeVec(vi);
    }
}


/*------------------------------------------------------------------------*/
#if 0

/*/ ColorLevel()
 *
 * Find a measure of the color intensity.  It is calculated as
 * 3(R^2) + 6(G^2) + (B^2)
 *
 * Created:  15-Dec-89, Peter Cherna (from MKS RenderInfo)
 * Modified: 15-Dec-89, Peter Cherna
 *
 */

WORD ColorLevel( UWORD rgb )
{
    WORD level;
    WORD tmp;

    /* Red (30%) */
    tmp = ((rgb>>8) & 15);
    level = (tmp*tmp) * 3;

    /* Green (60%) */
    tmp = ((rgb>>4) & 15);
    level += (tmp*tmp) * 6;

    /* Blue (10%) */
    tmp = (rgb & 15);
    level += (tmp*tmp);


    return(level);
}


/*------------------------------------------------------------------------*/

/*/ PickPens()
 *
 * By looking at the available colors, pick the "most appropriate"
 * choices of pen colors for artwork.
 * We have:
 * FieldPen (always pen 0)
 * TextPen (always pen 1)
 * ShinePen (brightest color that isn't the FieldPen)
 * ShadowPen (darkest color that isn't the FieldPen)
 * HighFieldPen (most "contrasty" color to the FieldPen that isn't one of
 *	the above four, or equals the TextPen if no other free colors
 *	are to be had).
 * HighTextPen (if HighFieldPen is different from TextPen, then HighTextPen
 *	is just TextPen, else it's FieldPen)
 *
 * Created:  15-Dec-89, Peter Cherna (from MKS FillInRenderInfo())
 * Modified: 15-Dec-89, Peter Cherna
 *
 */

VOID PickPens( struct VisualInfo *vi, struct Screen *scr )
{
    WORD numcolors;
    WORD loop;
    WORD loop1;
    WORD tmp;
    WORD colors[16];
    WORD pens[16];
    WORD delta, newdelta;
    WORD bestcolor;

    /* !!! If we have a pair of identical (in brightness) colors,
     * we want to guarantee the lower pen number.  Even if the sort
     * algorithm guarantees low to high pens for identical color-levels,
     * ShinePen could end up being the higher numbered one since it
     * picks from the high end of the list
     */
    numcolors = 1 << (scr->RastPort.BitMap->Depth);
    /* !!! For no reason, we limit ourselves to picking from 16 colors */
    if (numcolors > 16)
    {
	numcolors = 16;
    }

    if (vi->vi_ScreenDepth == 1)
    {
	/* running with 2 colors... */
	vi->vi_ShinePen = 1;
	vi->vi_ShadowPen = 1;
	vi->vi_TextPen = 1;
	vi->vi_FieldPen = 0;
	vi->vi_HighTextPen = 0;
	vi->vi_HighFieldPen = 1;
    }
    else
    {
	/* Get the colors: */
	for (loop = 0; loop < numcolors; loop++)
	{
	    colors[loop] = ColorLevel(
		(UWORD)GetRGB4(scr->ViewPort.ColorMap, loop));
	    pens[loop]=loop;
	}

	/* Sort darkest to brightest... */
	for (loop = 0; loop < (numcolors-1); loop++)
	    for (loop1 = loop+1; loop1 < numcolors; loop1++)
	    {
		if (colors[loop] > colors[loop1])
		{
		    tmp = colors[loop];
		    colors[loop] = colors[loop1];
		    colors[loop1] = tmp;
		    tmp = pens[loop];
		    pens[loop] = pens[loop1];
		    pens[loop1] = tmp;
		}
	    }

	D(
	for (loop = 0; loop < numcolors; loop++)
	{
	    DP(("PP:  pen %ld, color level %ld\n",
		(LONG)pens[loop], (LONG)colors[loop]));
	}
	);
	/* Now, pick the pens... */
	vi->vi_TextPen = 1;
	vi->vi_FieldPen = 0;
	/* ShadowPen is darkest other than FieldPen */
	loop = 0;
	while (!(vi->vi_ShadowPen = pens[loop++]) != vi->vi_FieldPen)
	    ;

	/* ShinePen is brightest other than FieldPen */
	loop = numcolors - 1;
	while (!(vi->vi_ShinePen = pens[loop--]) != vi->vi_FieldPen)
	    ;

	/* HighFieldPen is the color farthest from the FieldPen that
	 * is none of FieldPen, ShinePen, ShadowPen
	 */
	/* Set bestcolor (future HighFieldPen) to the TextPen (by default) */
	bestcolor = 0;
	while (pens[bestcolor] != 1)
	{
	    bestcolor++;
	}

	/* Set loop to position number of FieldPen */
	loop = 0;
	while (pens[loop] != vi->vi_FieldPen)
	{
	    loop++;
	}
	DP(("PP:  Field Pen is at #%ld\n", (LONG)loop));
	delta = 0;
	for (loop1 = 0; loop1 < numcolors; loop1++)
	{
	    DP(("PP:  Considering #%ld\n", (LONG)loop1));
	    if ((pens[loop1] != vi->vi_TextPen) &&
		(pens[loop1] != vi->vi_FieldPen) &&
		(pens[loop1] != vi->vi_ShinePen) &&
		(pens[loop1] != vi->vi_ShadowPen))
	    {
		newdelta = colors[loop1] - colors[loop];
		if (newdelta < 0)
		{
		    newdelta = -newdelta;
		}
		DP(("PP:  Its delta is %ld\n", (LONG)newdelta));
		if (newdelta > delta)
		{
		    DP(("PP:  A new best color\n"));
		    delta = newdelta;
		    bestcolor = loop1;
		}
	    }
	}
	vi->vi_HighFieldPen = pens[bestcolor];

	if (vi->vi_HighFieldPen == vi->vi_TextPen)
	{
	    vi->vi_HighTextPen = vi->vi_FieldPen;
	}
	else
	{
	    vi->vi_HighTextPen = vi->vi_TextPen;
	}
    }
    DP(("PP:  TextPen %ld, FieldPen %ld\n", (LONG)vi->vi_TextPen,
	(LONG)vi->vi_FieldPen));
    DP(("PP:  HighTextPen %ld, HighFieldPen %ld\n", (LONG)vi->vi_HighTextPen,
	(LONG)vi->vi_HighFieldPen));
    DP(("PP:  ShinePen %ld, ShadowPen %ld\n", (LONG)vi->vi_ShinePen,
	(LONG)vi->vi_ShadowPen));
}

/*------------------------------------------------------------------------*/
#endif
@


39.6
log
@Added support for linked images in the VisualInfo
@
text
@d7 1
a7 1
*   $Id: visual.c,v 39.5 92/05/29 15:27:08 vertex Exp Locker: vertex $
d141 1
a141 1
            FreeVec(il,sizeof(struct ImageLink));
@


39.5
log
@Code size optimizations
@
text
@d7 1
a7 1
*   $Id: visual.c,v 39.4 92/04/15 11:33:32 vertex Exp Locker: vertex $
d131 3
d136 9
a144 7
	/* Easier to dispose these guys here rather than keep a
	 * use-count.  They're small anyways.  Of course, if they
	 * ever scale, this would have to change to manage some
	 * kind of list of objects.
	 */
	DisposeObject(vi->vi_CheckImage);
	DisposeObject(vi->vi_MXImage);
@


39.4
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: visual.c,v 39.3 92/04/07 13:51:03 vertex Exp Locker: vertex $
a16 17
/* Function Prototypes: */

/* Public: */
void * __asm
LIB_GetVisualInfoA (register __a0 struct Screen *scr,
		   register __a1 struct TagItem *taglist);

void __asm
LIB_FreeVisualInfo (register __a0 struct VisualInfo *vi);

/*
WORD ColorLevel (UWORD rgb);
VOID PickPens (struct VisualInfo *vi, struct Screen *scr);
*/

/*------------------------------------------------------------------------*/

d64 4
d73 1
a73 3
void * __asm
LIB_GetVisualInfoA( register __a0 struct Screen *scr,
		    register __a1 struct TagItem *taglist )
d75 1
a75 2
    struct VisualInfo *vi;
    UWORD *pens;
d77 4
a80 1
    if (vi = AllocVec(sizeof(struct VisualInfo), MEMF_CLEAR))
d82 3
a84 43
        DP(("GVI:  VisualInfo at $%lx\n", vi));
        DP(("GVI:  screen at $%lx\n", scr));

        if (vi->vi_Screen = scr)
        {
            vi->vi_ScreenFont  = OpenFont(scr->Font);
            vi->vi_DrawInfo    = GetScreenDrawInfo(scr);

            DP(("GVI:  vi_Screen: $%lx\n", vi->vi_Screen));
            DP(("GVI:  ta_Name: '%s'\n", vi->vi_Screen->Font->ta_Name));
            DP(("GVI:  ta_YSize: %ld\n", (LONG)vi->vi_Screen->Font->ta_YSize));
            DP(("GVI:  ta_Style: $%lx\n", (LONG)vi->vi_Screen->Font->ta_Style));
            DP(("GVI:  ta_Flags: $%lx\n", (LONG)vi->vi_Screen->Font->ta_Flags));
            DP(("GVI:  Calling GetScreenDrawInfo\n"));
        }

        if (!vi->vi_ScreenFont || !vi->vi_DrawInfo)
        {
            FreeVisualInfo(vi);
            return(NULL);
        }

        DP(("GVI:  Back.\n"));
        /* Establish a few shorthands: */
        pens = vi->vi_DrawInfo->dri_Pens;

        vi->vi_textPen       = pens[textPen];
        vi->vi_backgroundPen = pens[backgroundPen];

        DP(("GVI:  vi_DrawInfo at $%lx\n", vi->vi_DrawInfo));
        DP(("GVI:  shinePen = %ld\n", vi->vi_DrawInfo->dri_Pens[shinePen]));
        DP(("GVI:  shadowPen = %ld\n", vi->vi_DrawInfo->dri_Pens[shadowPen]));

    /*
        vi->vi_ScreenWidth = scr->Width;
        vi->vi_ScreenHeight = scr->Height;
    */

#if 0
        PickPens(vi, scr);
#endif

        DP(("GVI:  About to return vi at $%lx\n", vi));
d87 2
a88 1
    return(vi);
d129 1
a129 2
void __asm
LIB_FreeVisualInfo( register __a0 struct VisualInfo *vi )
d140 1
a140 1
	FreeScreenDrawInfo(vi->vi_Screen, vi->vi_DrawInfo);
@


39.3
log
@Made things smaller
@
text
@d7 1
a7 1
*   $Id: visual.c,v 39.2 92/02/20 11:51:32 peter Exp Locker: vertex $
d68 1
a68 1
*	vi - pointer to private data.
a120 2
        vi->vi_shinePen      = pens[shinePen];
        vi->vi_shadowPen     = pens[shadowPen];
a136 5
        /* This flag is marked Intuition-private, but hey, that's how
         * Intuition does it!
         */
        vi->vi_Flags = (scr->Flags & SCREENHIRES) ? VI_SCREENHIRES : 0;

d165 2
a166 1
*	vi - Pointer that was obtained by calling GetVisualInfoA().
@


39.2
log
@Re-ordered FreeVisualInfo() a bit.
@
text
@d7 1
a7 1
*   $Id: visual.c,v 39.1 92/01/30 19:55:19 peter Exp Locker: peter $
d37 2
a38 2
*	GetVisualInfoA -- Get information GadTools needs for visuals. (V36)
*	GetVisualInfo -- Varargs stub for GetVisualInfoA(). (V36)
d41 1
a41 1
*	vi = GetVisualInfoA(screen, taglist)
d59 4
a62 2
*	screen - Pointer to the screen you will be opening on.
*	taglist - Pointer to list of TagItems.  
d64 3
d68 1
a68 5
*	vi - Pointer to private data.
*
*   EXAMPLE
*
*   NOTES
a69 2
*   BUGS
*
d93 1
a93 9
    if (!scr)
    {
	return(NULL);
    }
    DP(("GVI:  screen at $%lx\n", scr));

    vi = AllocVec(sizeof(struct VisualInfo), MEMF_CLEAR);
    DP(("GVI:  VisualInfo at $%lx\n", vi));
    if (!vi)
d95 2
a96 2
	return(NULL);
    }
d98 45
a142 12
    vi->vi_Screen = scr;
    DP(("GVI:  vi_Screen: $%lx\n", vi->vi_Screen));
    vi->vi_ScreenTAttr = scr->Font;
    DP(("GVI:  ta_Name: '%s'\n", vi->vi_ScreenTAttr->ta_Name));
    DP(("GVI:  ta_YSize: %ld\n", (LONG)vi->vi_ScreenTAttr->ta_YSize));
    DP(("GVI:  ta_Style: $%lx\n", (LONG)vi->vi_ScreenTAttr->ta_Style));
    DP(("GVI:  ta_Flags: $%lx\n", (LONG)vi->vi_ScreenTAttr->ta_Flags));
    if (!(vi->vi_ScreenFont = OpenFont(scr->Font)))
    {
	FreeVisualInfo(vi);
	return(NULL);
    }
d144 1
a144 5
    DP(("GVI:  Calling GetScreenDrawInfo\n"));
    if (!(vi->vi_DrawInfo = GetScreenDrawInfo(scr)))
    {
	FreeVisualInfo(vi);
	return(NULL);
a145 25
    DP(("GVI:  Back.\n"));
    /* Establish a few shorthands: */
    pens = vi->vi_DrawInfo->dri_Pens;
    vi->vi_shinePen = pens[shinePen];
    vi->vi_shadowPen = pens[shadowPen];
    vi->vi_textPen = pens[textPen];
    vi->vi_backgroundPen = pens[backgroundPen];

    DP(("GVI:  vi_DrawInfo at $%lx\n", vi->vi_DrawInfo));
    DP(("GVI:  shinePen = %ld\n", vi->vi_DrawInfo->dri_Pens[shinePen]));
    DP(("GVI:  shadowPen = %ld\n", vi->vi_DrawInfo->dri_Pens[shadowPen]));

/*
    vi->vi_ScreenWidth = scr->Width;
    vi->vi_ScreenHeight = scr->Height;
*/

#ifdef undef
    PickPens(vi, scr);
#endif undef

    /* This flag is marked Intuition-private, but hey, that's how
     * Intuition does it!
     */
    vi->vi_Flags = (scr->Flags & SCREENHIRES) ? VI_SCREENHIRES : 0;
a146 1
    DP(("GVI:  About to return vi at $%lx\n", vi));
d156 1
a156 1
*	FreeVisualInfo -- Return any resources taken by GetVisualInfo. (V36)
a173 9
*   RESULT
*	None.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
d197 4
a200 11
	DisposeObject( vi->vi_CheckImage );
	DisposeObject( vi->vi_MXImage );

	if (vi->vi_DrawInfo)
	{
	    FreeScreenDrawInfo(vi->vi_Screen, vi->vi_DrawInfo);
	}
	if (vi->vi_ScreenFont)
	{
	    CloseFont(vi->vi_ScreenFont);
	}
d207 1
a207 1
#ifdef undef
d402 1
a402 1
#endif undef
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: visual.c,v 38.2 92/01/30 18:10:28 peter Exp Locker: peter $
d207 8
a222 8
	/* Easier to dispose these guys here rather than keep a
	 * use-count.  They're small anyways.  Of course, if they
	 * ever scale, this would have to change to manage some
	 * kind of list of objects.
	 */
	DisposeObject( vi->vi_CheckImage );
	DisposeObject( vi->vi_MXImage );

@


38.2
log
@Now handle shared Check and MX images.
@
text
@d7 1
a7 1
*   $Id: visual.c,v 38.1 92/01/28 08:29:43 peter Exp Locker: peter $
a8 28
*   $Log:	visual.c,v $
 * Revision 38.1  92/01/28  08:29:43  peter
 * Removed __saveds.
 * 
 * Revision 38.0  91/07/11  12:34:14  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.6  90/11/07  19:42:53  peter
*   Now sets the new VisualInfo fields vi_shinePen and vi_ShadowPen.
*   
*   Revision 36.5  90/06/21  14:00:07  peter
*   Cleaned up GetVisualInfo() autodoc.
*   
*   Revision 36.4  90/05/30  13:52:47  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   Removed prototypes for Get/FreeScreenDrawInfo.
*   Now use AllocVec/FreeVec instead of SmartAllocMem/SmartFreeMem.
*   
*   Revision 36.3  90/04/12  16:18:54  peter
*   Put register and varargs information into autodocs.
*   
*   Revision 36.2  90/03/31  00:49:15  peter
*   Added some DP()s.
*   
*   Revision 36.1  90/03/16  14:03:13  peter
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Public: */
d88 3
a90 4
LIB_GetVisualInfoA(register __a0 struct Screen *scr,
		   register __a1 struct TagItem *taglist)

    {
d95 1
a95 1
	{
d97 1
a97 1
	}
d103 1
a103 1
	{
d105 1
a105 1
	}
d115 1
a115 1
	{
d118 1
a118 1
	}
d122 1
a122 1
	{
d125 1
a125 1
	}
d127 1
a127 1
    /*  Establish a few shorthands: */
d147 3
a149 2
    /*  This flag is marked Intuition-private, but hey, that's how
	Intuition does it! */
d154 1
a154 1
    }
d203 3
a205 2
LIB_FreeVisualInfo(register __a0 struct VisualInfo *vi)

d207 1
a207 1
    if (vi)
a208 2
	if (vi->vi_DrawInfo)
	    {
d210 1
a210 1
	    }
d212 1
a212 1
	    {
d214 1
a214 1
	    }
a223 1
	}
d225 1
d241 2
a242 3
WORD ColorLevel(UWORD rgb)

    {
d246 1
a246 1
    /*  Red (30%) */
d250 1
a250 1
    /*  Green (60%) */
d254 1
a254 1
    /*  Blue (10%) */
d260 1
a260 1
    }
d285 2
a286 2
VOID PickPens(struct VisualInfo *vi, struct Screen *scr)
    {
d296 6
a301 5
    /*  !!! If we have a pair of identical (in brightness) colors,
	we want to guarantee the lower pen number.  Even if the sort
	algorithm guarantees low to high pens for identical color-levels,
	ShinePen could end up being the higher numbered one since it
	picks from the high end of the list */
d305 1
a305 1
	{
d307 1
a307 1
	}
d310 1
a310 1
	{
d318 1
a318 1
	}
d320 3
a323 3
	/*  Get the colors: */
	for (loop = 0; loop < numcolors; loop++)
	    {
d327 1
a327 1
	    }
d332 2
a334 2
		if (colors[loop] > colors[loop1])
		    {
a340 1
		    }
d342 1
d346 1
a346 1
	    {
d349 1
a349 1
	    }
d354 1
a354 1
	/*  ShadowPen is darkest other than FieldPen */
d359 1
a359 1
	/*  ShinePen is brightest other than FieldPen */
d364 4
a367 3
	/*  HighFieldPen is the color farthest from the FieldPen that
	    is none of FieldPen, ShinePen, ShadowPen */
	/*  Set bestcolor (future HighFieldPen) to the TextPen (by default) */
d370 1
a370 1
	    {
d372 1
a372 1
	    }
d374 1
a374 1
	/*  Set loop to position number of FieldPen */
d377 1
a377 1
	    {
d379 1
a379 1
	    }
d383 1
a383 1
	    {
d389 1
a389 1
		{
d392 1
a392 1
		    {
d394 1
a394 1
		    }
d397 1
a397 1
		    {
a400 1
		    }
d403 1
d407 1
a407 1
	    {
d409 1
a409 1
	    }
d411 1
a411 1
	    {
a412 1
	    }
d414 1
d421 1
a421 1
    }
@


38.1
log
@Removed __saveds.
@
text
@d7 1
a7 1
*   $Id: visual.c,v 38.0 91/07/11 12:34:14 peter Exp Locker: peter $
d10 3
d244 8
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: visual.c,v 36.6 90/11/07 19:42:53 peter Exp $
d10 3
d45 1
a45 1
void * __saveds __asm
d49 1
a49 1
void __saveds __asm
d112 1
a112 1
void * __saveds __asm
d227 1
a227 1
void __saveds __asm
@
