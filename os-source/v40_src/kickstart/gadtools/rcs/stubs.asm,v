head     39.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.8
date     92.10.16.18.29.51;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.05.29.15.27.44;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.15.11.34.09;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.13.13.58.37;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.07.13.43.13;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.03.20.12.47.19;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.50.22;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.55.59;  author peter;  state Exp;
branches ;
next     38.4;

38.4
date     92.01.30.18.10.04;  author peter;  state Exp;
branches ;
next     38.3;

38.3
date     92.01.28.08.28.01;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.27.13.26.25;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.09.24.18.12.43;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.34.00;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.8
log
@Changes for SAS/C 6.0
@
text
@*** stubs.asm ************************************************************
*
*   stubs.asm - useful things for useful people...
*
*   Copyright 1989-1992, Commodore-Amiga, Inc.
*
*   $Id: stubs.asm,v 39.7 92/05/29 15:27:44 vertex Exp Locker: vertex $
*
**************************************************************************

        OPTIMON

;---------------------------------------------------------------------------

        NOLIST

	INCLUDE	'gadtools.i'
	INCLUDE	'gtinternal.i'
	INCLUDE	'intuition/gadgetclass.i'

        LIST

;---------------------------------------------------------------------------

	XDEF	@@findTagItem
	XDEF	@@findTagItemGT
	XDEF	@@getTagData
	XDEF	@@getTagDataGT
	XDEF	@@getTagDataGA
	XDEF	@@getTagDataSTRING
	XDEF	_removeGadget
	XDEF	_AddRefreshGadget
	XDEF	_closeFont
	XDEF	_setAPen
	XDEF	__CXD33			; Signed divide
	XDEF	__CXD22			; Unsigned divide
	XDEF	__CXM33			; Signed multiply
	XDEF	__CXM22			; Unsigned multiply
	XDEF	@@stccpy

;---------------------------------------------------------------------------

	XREF	_LVOSetAPen
	XREF	_LVOCloseFont
	XREF	_LVOAddGList
	XREF	_LVORemoveGadget
	XREF	_LVORefreshGList
	XREF	_LVOGetTagData
	XREF	_LVOFindTagItem

;---------------------------------------------------------------------------

* getTagData() and findTagItem()
* These stubs were originally coded in C.  They're much smaller here.
* (We have them because for very frequently-called functions, it's
* more efficient to call a stub which calls the library.

* getTagDataGT() and findTagItemGT()
* Calls @@getTagData() or @@findTagItem() with the tag OR'd with GT_TagBase.
* Save much space, since our callers will have byte-sized values
* instead of longs to put in d0


;---------------------------------------------------------------------------

* findTagItem( TagVal d0, TagList a0 )
* findTagItemGT( TagVal d0, TagList a0 )

@@findTagItemGT:	ori.l	#GT_TagBase,d0
@@findTagItem:	move.l	a6,-(sp)
		movea.l	gtb_UtilityBase(a6),a6
		jsr	_LVOFindTagItem(a6)
		bra.s	PopA6Rts

;---------------------------------------------------------------------------

* getTagData( TagVal d0, Default d1, TagList a0 )
* getTagDataGT( TagVal d0, Default d1, TagList a0 )

@@getTagDataSTRING:
		ori.l	#STRINGA_Dummy,d0
		bra.s	@@getTagData
@@getTagDataGA:	ori.l	#GA_Dummy,d0
		bra.s	@@getTagData
@@getTagDataGT:	ori.l	#GT_TagBase,d0
@@getTagData:	move.l	a6,-(sp)
		movea.l	gtb_UtilityBase(a6),a6
		jsr	_LVOGetTagData(a6)

		; *** FALLS THROUGH!

;---------------------------------------------------------------------------
; just here to save some bytes in all the other routines

PopA6Rts:	movea.l	(sp)+,a6
DoRts:		rts

;---------------------------------------------------------------------------

* removeGadget( window a0, gadget a1)

_removeGadget:	move.l	a0,d1		; protect against a NULL window pointer
		beq.s	DoRts
		move.l	a6,-(sp)
		movea.l	gtb_IntuitionBase(a6),a6
		jsr	_LVORemoveGadget(a6)
		bra.s	PopA6Rts

;---------------------------------------------------------------------------

* AddRefreshGadget( gad a1, win a0, pos d0)

_AddRefreshGadget:
		move.l	a0,d1		; protect against a NULL window pointer
		beq.s	DoRts
		move.l	a6,-(sp)
		move.l	a2,-(sp)
		sub.l	a2,a2			; requester pointer
		moveq	#1,d1			; number of gadgets
		move.l	gtb_IntuitionBase(a6),a6
		movem.l	d1/a0-a1,-(sp)
		jsr	_LVOAddGList(a6)
		movem.l	(sp)+,d0/a0-a1		; NOTE! d1 gets restored to d0
		exg	a0,a1
		jsr	_LVORefreshGList(a6)
		move.l	(sp)+,a2
		bra.s	PopA6Rts

;---------------------------------------------------------------------------

_closeFont:	move.l	a1,d0		; protect against a NULL font pointer
		beq.s	DoRts
		move.l	a6,-(sp)
		movea.l	gtb_GfxBase(a6),a6
		jsr	_LVOCloseFont(a6)
		bra.s	PopA6Rts

;---------------------------------------------------------------------------

_setAPen:	move.l	a6,-(sp)
		movea.l	gtb_GfxBase(a6),a6
		jsr	_LVOSetAPen(a6)
		bra.s	PopA6Rts

;---------------------------------------------------------------------------
; Replacements for the SAS/C 32-bit integer math functions using
; utility.library instead

__CXD33:
		move.l	gtb_SDivMod32(a6),-(sp)	; address of vector
		rts				; go there!
__CXD22:
		move.l	gtb_UDivMod32(a6),-(sp)	; address of vector
		rts				; go there!
__CXM33:
		move.l	gtb_SMult32(a6),-(sp)	; address of vector
		rts				; go there!
__CXM22:
		move.l	gtb_UMult32(a6),-(sp)	; address of vector
		rts				; go there!

;-----------------------------------------------------------------------
; stccpy	- Smaller version of the copy routine...
;  a0 - destination
;  a1 - source
;  d0 - destination length

@@stccpy:	subq.l	#1,d0			; One less than given...
		bmi.s	2$			; if we end up with no bytes!
1$:		move.b	(a1)+,(a0)+		; Copy the data...
		dbeq.s	d0,1$			; Loop for max or null...
		clr.b	-(a0)			; Make sure NULL terminated
2$:		rts

;-----------------------------------------------------------------------

        END
@


39.7
log
@0.
@
text
@d7 1
a7 1
*   $Id: stubs.asm,v 39.6 92/04/15 11:34:09 vertex Exp Locker: vertex $
a24 4
	XDEF	_CreateGadget
	XDEF	_GT_SetGadgetAttrs
	XDEF	_NewObject
	XDEF	_SetAttrs
a49 49
	XREF	_LVOSetAttrsA
	XREF	_LVONewObjectA
	XREF	_LVOGT_SetGadgetAttrsA
	XREF	_LVOCreateGadgetA

;---------------------------------------------------------------------------
; Varargs stub for CreateGadgetA()

_CreateGadget:
	move.l	a2,-(a7)
	lea	$8(a7),a2
	movem.l	(a2)+,d0/a0-a1
	jsr	_LVOCreateGadgetA(a6)
	move.l	(sp)+,a2
	rts

;---------------------------------------------------------------------------
; Varargs stub for GT_SetGadgetAttrsA()

_GT_SetGadgetAttrs:
	movem.l	a2-a3,-(sp)
	lea	$C(sp),a3
	movem.l	(a3)+,a0-a2
	jsr	_LVOGT_SetGadgetAttrsA(a6)
	movem.l	(sp)+,a2-a3
	rts

;---------------------------------------------------------------------------
; Varargs stub for NewObjectA()

_NewObject:
	movem.l	a2/a6,-(sp)
	move.l	gtb_IntuitionBase(a6),a6
	lea	$C(sp),a2
	movem.l	(a2)+,a0-a1
	jsr	_LVONewObjectA(a6)
	movem.l	(sp)+,a2/a6
	rts

;---------------------------------------------------------------------------
; Varargs stub for SetAttrsA()

_SetAttrs:
	move.l	a6,-(sp)
	movea.l	gtb_IntuitionBase(a6),a6
	lea	$8(sp),a1
	move.l	(a1)+,a0
	jsr	_LVOSetAttrsA(a6)
	bra.s	PopA6Rts
@


39.6
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: stubs.asm,v 39.5 92/04/13 13:58:37 vertex Exp Locker: vertex $
d35 1
a35 1
	XDEF	_removeGList
d43 1
d50 1
a50 1
	XREF	_LVORemoveGList
d149 1
a149 1
		rts
d153 1
a153 1
* removeGList( window a0, gadget a0, numGad d0)
d155 3
a157 4
_removeGList:	move.l	a0,d1		; protect against a NULL window pointer
		bne.s	1$
		rts
1$:		move.l	a6,-(sp)
d159 1
a159 1
		jsr	_LVORemoveGList(a6)
d164 1
a164 1
* AddRefreshGadget( gad a1, win a0, req a2 pos d0)
d168 4
a171 3
		bne.s	1$
		rts
1$:		move.l	a6,-(sp)
d179 1
d185 2
a186 3
		bne.s	1$
		rts
1$:		move.l	a6,-(sp)
d214 13
@


39.5
log
@Added requester support to AddRefreshGadget()
@
text
@d7 1
a7 1
*   $Id: stubs.asm,v 39.4 92/04/07 13:43:13 vertex Exp Locker: vertex $
a25 1
	XDEF	_DrawBevelBox
d38 1
d46 1
a55 1
	XREF	_LVODrawBevelBoxA
a69 12
; Varargs stub for DrawBevelBoxA()

_DrawBevelBox:
	movem.l	d2-d3,-(sp)
	lea	$C(sp),a1
	movea.l	(a1)+,a0
	movem.l	(a1)+,d0-d3
	jsr	_LVODrawBevelBoxA(a6)
	movem.l	(sp)+,d2-d3
	rts

;---------------------------------------------------------------------------
d95 7
a101 7
_SetAttrs:	MOVE.L	a6,-(sp)
		MOVEA.L	gtb_IntuitionBase(a6),a6
		LEA	$8(sp),a1
		MOVE.L	(a1)+,a0
		JSR	_LVOSetAttrsA(a6)
		MOVE.L	(sp)+,a6
		RTS
d167 1
a167 1
		cmp.l	#0,a0	; protect against a NULL window pointer
d188 7
@


39.4
log
@Cleaned the source up
Added OPTIMON assembler directive
Removed removeGList()
Made some calls safe with no window
Added closeFont()
@
text
@d7 1
a7 1
*   $Id: stubs.asm,v 39.3 92/03/20 12:47:19 peter Exp Locker: vertex $
d164 1
a164 1
* removeGList( Window a0, Gadget a0, NumGad d0)
d176 1
a176 1
* AddRefreshGadget( win a0, Gad a1, Pos d0)
a182 1
		move.l	a2,-(sp)
a183 1
		sub.l	a2,a2			; requester pointer
a189 1
		move.l	(sp)+,a2
@


39.3
log
@Utility.library math LVOs now called through cached pointers.
@
text
@d3 1
a3 1
*   stubs.asm	- 	Stubs for V36 functions which can't be #pragma'd
d5 1
a5 2
*   Lattice puts suitable stubs in lc.lib so nobody notices, except that
*   V36 functions that can't be pragma'd don't yet appear in lc.lib
d7 1
a7 1
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
a8 2
*   $Id: stubs.asm,v 39.2 92/02/03 15:50:22 peter Exp Locker: peter $
*
d11 1
a11 32
		BASEREG	BLink
		SECTION text,code

		INCLUDE	'gadtools.i'
		INCLUDE	'gtinternal.i'
		INCLUDE	'intuition/gadgetclass.i'

*******************************************************************************
*
* Varargs stubs for CreateGadgetA(), DrawBevelBoxA(), GT_SetGadgetAttrsA(),
* and NewObject().
* You may ask why we have this stub, when amiga.lib has a perfectly
* good one.  Well, our model requires a special reference
* to IntuitionBase, but our amiga.lib uses a
* far reference.  So we have to roll our own right here.
* As well, for those fcns in GadTools itself, we can take advantage of
* the fact that a6 is already set up.

		XDEF	_CreateGadget
		XREF	_LVOCreateGadgetA

_CreateGadget:	MOVE.L	a2,-(a7)
		LEA	$8(a7),a2
		MOVEM.L	(a2)+,d0/a0-a1
		JSR	_LVOCreateGadgetA(a6)
		MOVE.L	(a7)+,a2
		RTS

* Varargs stub for DrawBevelBoxA()

		XDEF	_DrawBevelBox
		XREF	_LVODrawBevelBoxA
d13 1
a13 32
_DrawBevelBox:	MOVEM.L	d2-d3,-(a7)
		LEA	$C(a7),a1
		MOVEA.L	(a1)+,a0
		MOVEM.L	(a1)+,d0-d3
		JSR	_LVODrawBevelBoxA(a6)
		MOVEM.L	(a7)+,d2-d3
		RTS

* Varargs stub for GT_SetGadgetAttrsA()

		XDEF	_GT_SetGadgetAttrs
		XREF	_LVOGT_SetGadgetAttrsA

_GT_SetGadgetAttrs:	MOVEM.L	a2-a3,-(a7)
			LEA	$C(a7),a3
			MOVEM.L	(a3)+,a0-a2
			JSR	_LVOGT_SetGadgetAttrsA(a6)
			MOVEM.L	(a7)+,a2-a3
			RTS

* Varargs stub for NewObjectA()

		XDEF	_NewObject
		XREF	_LVONewObjectA

_NewObject:	MOVEM.L	a2/a6,-(a7)
		MOVEA.L	gtb_IntuitionBase(a6),a6
		LEA	$C(a7),a2
		MOVEM.L	(a2)+,a0-a1
		JSR	_LVONewObjectA(a6)
		MOVEM.L	(a7)+,a2/a6
		RTS
d15 88
a102 1
* Varargs stub for SetAttrsA()
d104 2
a105 2
		XDEF	_SetAttrs
		XREF	_LVOSetAttrsA
d107 1
a107 1
_SetAttrs:	MOVE.L	a6,-(a7)
d109 1
a109 1
		LEA	$8(a7),a1
d112 1
a112 1
		MOVE.L	(a7)+,a6
d115 1
d128 2
d133 5
a137 3
		XDEF	@@findTagItem
		XDEF	@@findTagItemGT
		XREF	_LVOFindTagItem
d139 1
a139 7
@@findTagItemGT:	ORI.L	#GT_TagBase,d0
@@findTagItem:	MOVE.L	a6,-(a7)
		MOVEA.L	gtb_UtilityBase(a6),a6
		JSR	_LVOFindTagItem(a6)

Popa6Rts:	MOVEA.L	(a7)+,a6
		RTS
d144 60
a203 70
		XDEF	@@getTagData
		XDEF	@@getTagDataGT
		XDEF	@@getTagDataGA
		XDEF	@@getTagDataSTRING
		XREF	_LVOGetTagData

@@getTagDataSTRING:	ORI.L	#STRINGA_Dummy,d0
		BRA.S	@@getTagData
@@getTagDataGA:	ORI.L	#GA_Dummy,d0
		BRA.S	@@getTagData
@@getTagDataGT:	ORI.L	#GT_TagBase,d0
@@getTagData:	MOVE.L	a6,-(a7)
		MOVEA.L	gtb_UtilityBase(a6),a6
		JSR	_LVOGetTagData(a6)
		bra.s	Popa6Rts

* refreshGList( Gadget a0, Window a1, Requester a2, NumGad d0)

		XDEF	@@refreshGList
		XREF	_LVORefreshGList

@@refreshGList:	MOVE.L	a6,-(a7)
		MOVEA.L	gtb_IntuitionBase(a6),a6
dorefresh:	JSR	_LVORefreshGList(a6)
		bra.s	Popa6Rts

		XDEF	@@AddRefreshGList
		XREF	_LVOAddGList

* AddRefreshGList( win a0, Gad a1, Pos d0, Num d1, Req a2 )
*     AddGList( win a0, Gad a1, Pos d0, Num d1, Req a2 ) [ SAME ]
*     RefreshGList( gad a0, win a1, req a2, num d0 ) [ a0 <-> a1, d1->d0 ]


@@AddRefreshGList:
		MOVE.L	a6,-(a7)
		MOVEA.L	gtb_IntuitionBase(a6),a6
		MOVEM.L	d1/a0-a1,-(a7)
		JSR	_LVOAddGList(a6)
		MOVEM.L	(a7)+,d1/a0-a1
		EXG	a0,a1
		MOVE.L	d1,d0
		bra.s	dorefresh


* Peter's attempted stub for ISLVA().  I guess that since a3 is used,
* SAS makes a stack-args, not a reg-args.
* InternalSetListViewAttrsA(gad a0, win a1, req a2, nosetscroller d0, taglist a3)
*
*		XDEF	_InternalSetListViewAttrs
*		XREF	@@InternalSetListViewAttrsA
*
*_InternalSetListViewAttrs:
*
*		MOVEM.L	a2-a3,-(a7)
*
*		LEA	$C(a7),a3
*		MOVEM.L	(a3)+,a0-a2
*		MOVE.L	(a3)+,d0
*		BSR.W	@@InternalSetListViewAttrsA
*
*		MOVEM.L (a7)+,a2-a3
*		RTS
*

*******************************************************************************
*
* This code assumes that gtb_UtilityBase(a6) is the place where the base
* pointer to the utility.library is stored.
*
d205 3
a207 5
*******************************************************************************
*
* __CXD33 replacement that uses utility.library
*
		XDEF	__CXD33			; Signed divide
a211 8

*
*******************************************************************************
*
* __CXD22 replacement that uses utility.library
*
		XDEF	__CXD22			; Unsigned divide

a214 8

*
*******************************************************************************
*
* __CXM33 replacement that uses utility.library
*
		XDEF	__CXM33			; Signed multiply

a217 8

*
*******************************************************************************
*
* __CXM22 replacement that uses utility.library
*
		XDEF	__CXM22			; Unsigned multiply

d222 3
a224 2
*
*******************************************************************************
@


39.2
log
@Removed findTagItemGA(), since it cost more than it saved.
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 39.1 92/01/30 19:55:59 peter Exp $
a197 1
		XREF	_LVOSDivMod32
d200 4
a203 4
__CXD33:	move.l	a6,-(sp)		; Save your base pointer
		move.l	gtb_UtilityBase(a6),a6	; Get utility base pointer
		jsr	_LVOSDivMod32(a6)	; Do the divide
		bra.s	Popa6Rts
a208 1
		XREF	_LVOUDivMod32
d211 4
a214 4
__CXD22:	move.l	a6,-(sp)		; Save your base pointer
		move.l	gtb_UtilityBase(a6),a6	; Get utility base pointer
		jsr	_LVOUDivMod32(a6)	; Do the divide
		bra.s	Popa6Rts
a219 1
		XREF	_LVOSMult32
d222 4
a225 4
__CXM33:	move.l	a6,-(sp)		; Save your base pointer
		move.l	gtb_UtilityBase(a6),a6	; Get utility base pointer
		jsr	_LVOSMult32(a6)		; Do the multiply
		bra.s	Popa6Rts
a230 1
		XREF	_LVOUMult32
d233 4
a236 4
__CXM22:	move.l	a6,-(sp)		; Save your base pointer
		move.l	gtb_UtilityBase(a6),a6	; Get utility base pointer
		jsr	_LVOUMult32(a6)		; Do the multiply
		bra.s	Popa6Rts
@


39.1
log
@Removed RCS log.  Bumped to V39.
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 38.4 92/01/30 18:10:04 peter Exp Locker: peter $
d80 14
a109 1
		XDEF	@@findTagItemGA
a111 3
@@findTagItemGA:	ORI.L	#GA_Dummy,d0
		BRA.S	@@findTagItem

d125 1
d130 2
@


38.4
log
@Easy optimization.
@
text
@d10 1
a10 43
*   $Id: stubs.asm,v 38.3 92/01/28 08:28:01 peter Exp Locker: peter $
*
*   $Log:	stubs.asm,v $
* Revision 38.3  92/01/28  08:28:01  peter
* Reserved stubs moved to gadtools_lib.asm.  Changed way in which
* library bases are accessed.
* 
* Revision 38.2  91/11/27  13:26:25  peter
* Added callCHook.
* 
* Revision 38.1  91/09/24  18:12:43  peter
* Changed @@GTReserved* to _GTReserved* for LC 5.10b.
* 
* Revision 38.0  91/07/11  12:34:00  peter
*  Initial V38 check-in (matches V37 release).
* 
*   Revision 36.8  91/04/08  13:25:09  peter
*   Added getTagDataGT(), getTagDataSTRING(), findTagItemGT(), and
*   findTagItemGA() stubs to save space.
*   
*   Revision 36.7  91/03/14  16:25:38  peter
*   Instated common return code to save some more bytes.
*   
*   Revision 36.6  91/03/14  16:07:49  peter
*   Recoded stubs that were in misc.c to save space.
*   
*   Revision 36.5  91/02/20  18:08:12  peter
*   Removed 354 words of "spare storage" equivalent to the space saved
*   when we went to registerized parameters.
*   
*   Revision 36.4  91/02/02  00:43:42  peter
*   Removed TextFit stub.  Compensated for registerization savings.
*   GTReservedX() stubs now live here.
*   
*   Revision 36.3  91/01/28  13:30:41  peter
*   Added CXD and CXM stubs that use utility.library.
*   
*   Revision 36.2  90/03/31  00:46:10  peter
*   Comment better explains why this module is needed.
*   
*   Revision 36.1  90/03/16  14:05:13  peter
*   RCS Clean up.
*   
@


38.3
log
@Reserved stubs moved to gadtools_lib.asm.  Changed way in which
library bases are accessed.
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 38.2 91/11/27 13:26:25 peter Exp Locker: peter $
d13 4
d175 1
a175 1
		JSR	_LVORefreshGList(a6)
d194 1
a194 2
		JSR	_LVORefreshGList(a6)
		bra.s	Popa6Rts
@


38.2
log
@Added callCHook.
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 38.1 91/09/24 18:12:43 peter Exp Locker: peter $
d13 3
d56 1
a57 17
		INCLUDE	'utility/hooks.i'

		XREF	_UtilityBase
		XREF	_IntuitionBase


		XDEF	_callCHook

* Restores context and calls high-level language hook

_callCHook:
	movem.l	a5/a6,-(sp)
	movem.l	h_SubEntry(a0),a5/a6	; h_SubEntry into A5, h_Data into A6
	jsr	(a5)			; call HLL
	movem.l	(sp)+,a5/a6
	rts

d64 2
a65 2
* good one.  Well, our register-model requires a near-reference
* (i.e. A4-relative) to IntuitionBase, but our amiga.lib uses a
d68 1
a68 1
* the fact that A6 is already set up.
d73 5
a77 5
_CreateGadget:	MOVE.L	A2,-(A7)
		LEA	$8(A7),A2
		MOVEM.L	(A2)+,D0/A0-A1
		JSR	_LVOCreateGadgetA(A6)
		MOVE.L	(A7)+,A2
d85 6
a90 6
_DrawBevelBox:	MOVEM.L	D2-D3,-(A7)
		LEA	$C(A7),A1
		MOVEA.L	(A1)+,A0
		MOVEM.L	(A1)+,D0-D3
		JSR	_LVODrawBevelBoxA(A6)
		MOVEM.L	(A7)+,D2-D3
d98 5
a102 5
_GT_SetGadgetAttrs:	MOVEM.L	A2-A3,-(A7)
			LEA	$C(A7),A3
			MOVEM.L	(A3)+,A0-A2
			JSR	_LVOGT_SetGadgetAttrsA(A6)
			MOVEM.L	(A7)+,A2-A3
d110 6
a115 6
_NewObject:	MOVEM.L	A2/A6,-(A7)
		MOVEA.L	_IntuitionBase(A4),A6
		LEA	$C(A7),A2
		MOVEM.L	(A2)+,A0-A1
		JSR	_LVONewObjectA(A6)
		MOVEM.L	(A7)+,A2/A6
d126 1
a126 1
* instead of longs to put in D0
d129 2
a130 2
* findTagItem( TagVal D0, TagList A0 )
* findTagItemGT( TagVal D0, TagList A0 )
d137 1
a137 1
@@findTagItemGA:	ORI.L	#GA_Dummy,D0
d140 4
a143 4
@@findTagItemGT:	ORI.L	#GT_TagBase,D0
@@findTagItem:	MOVE.L	A6,-(A7)
		MOVEA.L	_UtilityBase(A4),A6
		JSR	_LVOFindTagItem(A6)
d145 1
a145 1
PopA6Rts:	MOVEA.L	(A7)+,A6
d148 2
a149 2
* getTagData( TagVal D0, Default D1, TagList A0 )
* getTagDataGT( TagVal D0, Default D1, TagList A0 )
d156 1
a156 1
@@getTagDataSTRING:	ORI.L	#STRINGA_Dummy,D0
d158 5
a162 5
@@getTagDataGT:	ORI.L	#GT_TagBase,D0
@@getTagData:	MOVE.L	A6,-(A7)
		MOVEA.L	_UtilityBase(A4),A6
		JSR	_LVOGetTagData(A6)
		bra.s	PopA6Rts
d164 1
a164 1
* refreshGList( Gadget A0, Window A1, Requester A2, NumGad D0)
d169 4
a172 4
@@refreshGList:	MOVE.L	A6,-(A7)
		MOVEA.L	_IntuitionBase(A4),A6
		JSR	_LVORefreshGList(A6)
		bra.s	PopA6Rts
d177 3
a179 3
* AddRefreshGList( win A0, Gad A1, Pos D0, Num D1, Req A2 )
*     AddGList( win A0, Gad A1, Pos D0, Num D1, Req A2 ) [ SAME ]
*     RefreshGList( gad a0, win a1, req a2, num d0 ) [ A0 <-> A1, D1->D0 ]
d183 9
a191 9
		MOVE.L	A6,-(A7)
		MOVEA.L	_IntuitionBase(A4),A6
		MOVEM.L	D1/A0-A1,-(A7)
		JSR	_LVOAddGList(A6)
		MOVEM.L	(A7)+,D1/A0-A1
		EXG	A0,A1
		MOVE.L	D1,D0
		JSR	_LVORefreshGList(A6)
		bra.s	PopA6Rts
d194 1
a194 1
* Peter's attempted stub for ISLVA().  I guess that since A3 is used,
d196 1
a196 1
* InternalSetListViewAttrsA(gad A0, win A1, req A2, nosetscroller D0, taglist A3)
d203 1
a203 1
*		MOVEM.L	A2-A3,-(A7)
d205 3
a207 3
*		LEA	$C(A7),A3
*		MOVEM.L	(A3)+,A0-A2
*		MOVE.L	(A3)+,D0
d210 1
a210 1
*		MOVEM.L (A7)+,A2-A3
d216 1
a216 1
* This code assumes that _UtilityBase(a4) is the place where the base
d228 1
a228 1
		move.l	_UtilityBase(a4),a6	; Get utility base pointer
d230 1
a230 1
		bra.s	PopA6Rts
d240 1
a240 1
		move.l	_UtilityBase(a4),a6	; Get utility base pointer
d242 1
a242 1
		bra.s	PopA6Rts
d252 1
a252 1
		move.l	_UtilityBase(a4),a6	; Get utility base pointer
d254 1
a254 1
		bra.s	PopA6Rts
d264 1
a264 1
		move.l	_UtilityBase(a4),a6	; Get utility base pointer
d266 1
a266 1
		bra.s	PopA6Rts
a268 21

*
* Reserved library entry points:
*

		XDEF	_LIB_GTReserved0
		XDEF	_LIB_GTReserved1
		XDEF	_LIB_GTReserved2
		XDEF	_LIB_GTReserved3
		XDEF	_LIB_GTReserved4
		XDEF	_LIB_GTReserved5

_LIB_GTReserved0:
_LIB_GTReserved1:
_LIB_GTReserved2:
_LIB_GTReserved3:
_LIB_GTReserved4:
_LIB_GTReserved5:
		MOVEQ	#0,D0
		RTS

@


38.1
log
@Changed @@GTReserved* to _GTReserved* for LC 5.10b.
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 38.0 91/07/11 12:34:00 peter Exp $
d13 3
d54 1
d58 13
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d10 1
a10 1
*   $Id: stubs.asm,v 36.8 91/04/08 13:25:09 peter Exp $
d13 3
d270 13
a282 13
		XDEF	@@LIB_GTReserved0
		XDEF	@@LIB_GTReserved1
		XDEF	@@LIB_GTReserved2
		XDEF	@@LIB_GTReserved3
		XDEF	@@LIB_GTReserved4
		XDEF	@@LIB_GTReserved5

@@LIB_GTReserved0:
@@LIB_GTReserved1:
@@LIB_GTReserved2:
@@LIB_GTReserved3:
@@LIB_GTReserved4:
@@LIB_GTReserved5:
@
