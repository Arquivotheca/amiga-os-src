head     39.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.10
date     92.10.16.18.32.49;  author vertex;  state Exp;
branches ;
next     39.9;

39.9
date     92.09.02.10.59.12;  author vertex;  state Exp;
branches ;
next     39.8;

39.8
date     92.07.16.10.53.09;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     92.05.29.15.32.56;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     92.04.15.11.35.35;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.04.13.14.09.13;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.07.14.00.29;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.02.20.11.50.01;  author peter;  state Exp;
branches ;
next     39.2;

39.2
date     92.02.03.15.48.19;  author peter;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.30.19.52.57;  author peter;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.28.08.29.05;  author peter;  state Exp;
branches ;
next     38.1;

38.1
date     91.11.27.13.19.09;  author peter;  state Exp;
branches ;
next     38.0;

38.0
date     91.07.11.12.32.34;  author peter;  state Exp;
branches ;
next     ;


desc
@@


39.10
log
@Changes for SAS/C 6.0
@
text
@/*** generic.c ************************************************************
*
*   generic.c	- Generic gadget routines
*
*   Copyright 1989, 1990, Commodore-Amiga, Inc.
*
*   $Id: generic.c,v 39.9 92/09/02 10:59:12 vertex Exp Locker: vertex $
*
**************************************************************************/

/*------------------------------------------------------------------------*/

#include "gtinclude.h"

/*------------------------------------------------------------------------*/

/* Function Prototypes: */

/* Public: */
void __asm
LIB_FreeGadgets (register __a0 struct ExtGadget *gad);


/* Internal: */
struct ExtGadget *CreateGenericA (struct ExtGadget *prevgad, struct NewGadget *ng,
    struct TagItem *taglist);
struct TagItem *TagAbleGadget (struct ExtGadget *gad, struct Window *win,
    struct TagItem *taglist);
void SelectGadget (struct ExtGadget *gad, struct Window *win,
                   BOOL select);

struct ExtGadget *CreateGenericBase (struct ExtGadget *gad, struct NewGadget *ng,
	ULONG extrasize, struct TagItem *moretags);

/*------------------------------------------------------------------------*/

/* CreateGenericA() */

struct ExtGadget *CreateGenericA(struct ExtGadget *prevgad,
                                 struct NewGadget *ng,
                                 struct TagItem *taglist)
{
    /* !!! NOTE WELL:  CreateContext() passes us a NewGadget structure
     * with a VisualInfo pointer of ~0, so that CreateGadgetA() doesn't
     * complain.  We had better not depend on the VisualInfo for that
     * case (the whole NewGadget structure [including ng_GadgetText]
     * is NULL except for VisualInfo) !!!
     *
     * !!! The routines that call me here generally pass me their taglist.
     * They probably should filter out what they've used!
     */
    ULONG extrasize = getGTTagData(GT_ExtraSize, 0, taglist);
    char underline = getGTTagData(GT_Underscore, 0, taglist);
    ULONG textmem = 0;
    UWORD labellen;
    struct IntuiText *gitext;
    struct ExtGadget *gad;

    DP(("CG:  Enter.  VisualInfo at $%lx\n", ng->ng_VisualInfo));
    if (!prevgad)
    {
	DP(("CG: failing due to NULL prevgad\n"));
	return(NULL);
    }

    if (ng->ng_GadgetText)
    {
	/* Need an IntuiText structure */
	textmem = sizeof(struct IntuiText);
	/* To handle underlines, I need a string buffer plus another
	 * IntuiText structure and a TextAttr
	 */
	if (underline)
	{
	    labellen = strlen(ng->ng_GadgetText);
	    DP(("CG:  Underline symbol: '%lc' $%lx\n", underline, underline));
	    textmem += (sizeof(struct TTextAttr) + sizeof(struct IntuiText)) +
		labellen+3;
	}
    }

    if (gad = AllocVec((sizeof(struct SpecialGadget) + ALIGNSIZE(extrasize) +
	               textmem), MEMF_CLEAR))
    {
        DP(("CG:  Allocated $%lx bytes at $%lx\n", (sizeof(struct SpecialGadget) +
	    ALIGNSIZE(extrasize) + textmem),
        	gad));

	prevgad->NextGadget = gad;
	DP(("CG:  Gadget itself is $%lx bytes at $%lx\n",
	    sizeof(struct ExtGadget), gad));
	gad->LeftEdge       = ng->ng_LeftEdge;
	gad->TopEdge        = ng->ng_TopEdge;
	gad->Width          = ng->ng_Width;
	gad->Height         = ng->ng_Height;
	gad->GadgetID       = ng->ng_GadgetID;
	gad->UserData       = ng->ng_UserData;
	gad->GadgetType     = GADTOOL_TYPE;
	gad->BoundsLeftEdge = ng->ng_LeftEdge;
	gad->BoundsTopEdge  = ng->ng_TopEdge;
	gad->BoundsWidth    = ng->ng_Width;
	gad->BoundsHeight   = ng->ng_Height;
        gad->MoreFlags      = GMORE_BOUNDS | GMORE_GADGETHELP;
        gad->Flags          = GFLG_EXTENDED;

	DP(("CG:  Extrasize $%lx, rounded to $%lx\n", extrasize,
	    ALIGNSIZE(extrasize)));
	if (ng->ng_GadgetText)
	{
	    /* Space for gadget text follows gadget and extrasize: */
	    gitext = gad->GadgetText = (struct IntuiText *)
		MEMORY_N_FOLLOWING(MEMORY_FOLLOWING(SGAD(gad)),
		    ALIGNSIZE(extrasize));
	    DP(("CG:  Gadget IntuiText is $%lx bytes at $%lx\n",
		sizeof(struct IntuiText), gitext));
	    DP(("CG:  ng->ng_GadgetText pointer: $%lx, string '%s'\n",
		ng->ng_GadgetText, ng->ng_GadgetText));
	    DP(("CG:  gad->GadgetText->IText pointer is at $%lx\n",
		&gad->GadgetText->IText));
	    gitext->IText = ng->ng_GadgetText;
	    DP(("CG:  Set IText to '%s'\n", gitext->IText));
	    /* Use hilighttextPen or textPen: */
	    gitext->FrontPen = VI(ng->ng_VisualInfo)->
		vi_DrawInfo->dri_Pens[ (ng->ng_Flags & NG_HIGHLABEL) ?
		HIGHLIGHTTEXTPEN : TEXTPEN];

	    DP(("CG:  FrontPen set to %ld\n", ((LONG)gitext->FrontPen)));
	    gitext->DrawMode = JAM1;

	    gitext->ITextFont = ng->ng_TextAttr;
	    DP(("CG:  ITextFont set to $%lx\n", gitext->ITextFont));

	    if (underline)
	    {
		struct IntuiText *uitext;
		char *dest;
		char *src;

		uitext = MEMORY_FOLLOWING(gitext);
		*uitext = *gitext;
		gitext->NextText = uitext;

		uitext->ITextFont = MEMORY_FOLLOWING(uitext);
		/* Try *ng->ng_TextAttr */

                if (gitext->ITextFont->ta_Style & FSF_TAGGED)
                    *(struct TTextAttr *)uitext->ITextFont = *(struct TTextAttr *)gitext->ITextFont;
		else
                    *uitext->ITextFont = *gitext->ITextFont;

		/* Set style to underlined */
		uitext->ITextFont->ta_Style |= FSF_UNDERLINED;

		/* gitext should point to the text, with the underscore
		 * symbol removed.  uitext should point to an underscored
		 * copy of the right character
		 */
		dest = gitext->IText = (APTR)((ULONG)MEMORY_FOLLOWING(((struct TTextAttr *)uitext->ITextFont)));
		uitext->IText = (dest + (labellen+1));
		src = ng->ng_GadgetText;
		while (*src)
		{
		    if (*src != underline)
		    {
			DP(("CG: Copying '%lc'\n", *src));
			*dest++ = *src++;
		    }
		    else
		    {
			DP(("CG: Found underline.  Underscoring '%lc'\n",
			    *(src+1) ));
			/* Character after the underline */
			*uitext->IText = *(++src);
			uitext->LeftEdge = IntuiTextLength(gitext);
		    }
		}
		*dest = '\0';
		DP(("CG: GadgetText is now '%s'\n", gitext->IText));
		DP(("CG: UnderlineText is now '%s'\n", uitext->IText));
	    }
	}
    }
    return(gad);
}


/*------------------------------------------------------------------------*/

/****** gadtools.library/FreeGadgets *****************************************
*
*   NAME
*	FreeGadgets -- free a linked list of gadgets. (V36)
*
*   SYNOPSIS
*	FreeGadgets(glist)
*	            A0
*
*	VOID FreeGadgets(struct Gadget *glist);
*	                 A0
*
*   FUNCTION
*	Frees any GadTools gadgets found on the linked list of gadgets
*	beginning with the specified one.  Frees all the memory that was
*	allocated by CreateGadgetA().  This function will return safely
*	with no action if it receives a NULL parameter.
*
*   INPUTS
*	glist - pointer to first gadget in list to be freed.
*
*   SEE ALSO
*	CreateGadgetA()
*
******************************************************************************
*
* Created:  28-Jun-89 (based on jimm's FreeGadgets())
* Modified:  3-Dec-89
*
*/

VOID ASM LIB_FreeGadgets(REG(a0) struct ExtGadget *gad)
{
struct ExtGadget *nextgad;

    DP(("\nFG: gad at $%lx\n", gad));
    while (gad)
    {
	nextgad = (struct ExtGadget *)gad->NextGadget;
	if (gad->GadgetType & GADTOOL_TYPE)
	{
	    /* The most common ExtraFree job is a DisposeObject()
	     * on the imagery
	     */
	    if (SGAD(gad)->sg_Flags & SG_EXTRAFREE_DISPOSE)
		DisposeObject(gad->GadgetRender);

	    if (SGAD(gad)->sg_Flags & SG_EXTRAFREE_DISPOSE_LV)
		closeFont(LVID(gad)->lvid_Font);

	    if (SGAD(gad)->sg_Flags & SG_EXTRAFREE_CLOSEFONT)
		closeFont(STID(gad)->stid_Sex.Font);

	    /* It can happen that our caller calls FreeGadgets() before
	     * the last call to GT_ReplyIMsg().  In that case, we want
	     * to let GT_ReplyIMsg() free the context gadget (and its
	     * embedded message.
	     */
	    if (SGAD(gad)->sg_Flags & SG_CONTEXT)
	    {
		/* If QuasiMessage is in use, then set the
		 * Context Gadget's DelayedFree marker.
		 * Then, GT_PostFilterIMsg() will look for the
		 * DelayedFree marker and free the Context gadget
		 * for us.
		 *
		 * ** NOTE assignment, not equality test! **
		 *
		 */
		if (CTID(gad)->ctid_DelayedFree = CTID(gad)->ctid_QuasiUsed)
		{
		    /* Short-circuit the upcoming FreeVec() */
		    gad = NULL;
		}
	    }
	    FreeVec(gad);
	}
	gad = nextgad;
    }
}


/*------------------------------------------------------------------------*/

/*/ TagAbleGadget()
 *
 * Function to enable/disable a gadget and refresh, based on GA_Disabled
 * existing in the supplied tag-list.
 *
 */

struct TagItem *TagAbleGadget(struct ExtGadget *gad, struct Window *win,
                              struct TagItem *taglist)
{
UWORD           pos;
BOOL            disable, currently_disabled;
struct TagItem *tag;

    if (tag = findTagItem(GA_Disabled,taglist))
    {
	disable = tag->ti_Data;
	currently_disabled = (gad->Flags & GADGDISABLED);

	if (((disable) && (!currently_disabled)) ||
	    ((!disable) && (currently_disabled)))
	{
            pos = removeGadget(win,gad);
	    gad->Flags ^= GADGDISABLED;
            AddRefreshGadget(gad, win, pos);
	}
    }

    return(tag);
}

/*------------------------------------------------------------------------*/

/*/ SelectGadget()
 *
 * Function to (de)select a gadget and refresh, in the boring old way.
 *
 */


void SelectGadget(struct ExtGadget *gad, struct Window *win,
                  BOOL select)
{
WORD pos;

    pos = removeGadget(win,gad);

    if (select)
	gad->Flags |= SELECTED;
    else
	gad->Flags &= ~SELECTED;

    AddRefreshGadget(gad,win,pos);
}

/*------------------------------------------------------------------------*/

struct ExtGadget *CreateGenericBase(struct ExtGadget *gad, struct NewGadget *ng,
                                    ULONG extrasize, struct TagItem *moretags)
{
    return ((struct ExtGadget *)CreateGadget(GENERIC_KIND,gad,ng,
                                             GT_ExtraSize, extrasize,
                                             TAG_MORE,     moretags));
}
@


39.9
log
@Fixed handling of TTextAttr
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.8 92/07/16 10:53:09 vertex Exp Locker: vertex $
d227 1
a227 1
	nextgad = gad->NextGadget;
d333 2
a334 1
    return (CreateGadget(GENERIC_KIND,gad,ng,GT_ExtraSize, extrasize,
@


39.8
log
@Fixed comment showing RefreshWindow() with only a single argument
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.7 92/05/29 15:32:56 vertex Exp Locker: vertex $
d146 1
a146 1
                if (gitext->ITextFont->ta_Flags & FSF_TAGGED)
d151 2
a152 3
		/* Set style to underlined, not extended */
		uitext->ITextFont->ta_Style = (uitext->ITextFont->ta_Style &
		    ~FSF_TAGGED) | FSF_UNDERLINED;
d158 1
a158 1
		dest = gitext->IText = MEMORY_FOLLOWING(uitext->ITextFont);
@


39.7
log
@Removed requester support
Code optimizations
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.6 92/04/15 11:35:35 vertex Exp Locker: vertex $
d77 1
a77 1
	    textmem += (sizeof(struct TextAttr) + sizeof(struct IntuiText)) +
d145 6
a150 1
		*uitext->ITextFont = *gitext->ITextFont;
@


39.6
log
@Fully implemented gadget help
Optimized code for space
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.5 92/04/13 14:09:13 vertex Exp Locker: vertex $
d21 1
a21 1
LIB_FreeGadgets (register __a0 struct Gadget *gad);
d25 1
a25 1
struct Gadget *CreateGenericA (struct Gadget *prevgad, struct NewGadget *ng,
d27 4
a30 4
struct TagItem *TagAbleGadget (struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist);
void SelectGadget (struct Gadget *gad, struct Window *win,
                   struct Requester *req, BOOL select);
d32 1
a32 1
struct Gadget *CreateGenericBase (struct Gadget *gad, struct NewGadget *ng,
d39 3
a41 2
struct Gadget *CreateGenericA( struct Gadget *prevgad, struct NewGadget *ng,
    struct TagItem *taglist )
d91 8
a98 8
	    sizeof(struct Gadget), gad));
	gad->LeftEdge = ng->ng_LeftEdge;
	gad->TopEdge = ng->ng_TopEdge;
	gad->Width = ng->ng_Width;
	gad->Height = ng->ng_Height;
	gad->GadgetID = ng->ng_GadgetID;
	gad->UserData = ng->ng_UserData;
	gad->GadgetType = GADTOOL_TYPE;
d100 5
a104 11
	gad->BoundsTopEdge = ng->ng_TopEdge;
	gad->BoundsWidth = ng->ng_Width;
	gad->BoundsHeight = ng->ng_Height;
        gad->MoreFlags = GMORE_BOUNDS | GMORE_GADGETHELP;
        gad->Flags = GFLG_EXTENDED;

        if (ng->ng_Flags & NG_REQGADGET)
        {
            gad->GadgetType |= GTYP_REQGADGET;
            prevgad->GadgetType |= GTYP_REQGADGET;
        }
d216 1
a216 2
void __asm
LIB_FreeGadgets( register __a0 struct Gadget *gad )
d218 1
a218 1
    struct Gadget *nextgad;
a229 1
	    {
d231 3
a233 1
	    }
a235 1
	    {
a236 1
	    }
d276 2
a277 2
struct TagItem *TagAbleGadget( struct Gadget *gad, struct Window *win,
    struct Requester *req, struct TagItem *taglist )
d279 3
a281 3
    UWORD pos;
    BOOL disable, currently_disabled;
    struct TagItem *ti;
d283 1
a283 1
    if (ti = findTagItem(GA_Disabled, taglist))
d285 1
a285 1
	disable = ti->ti_Data;
d288 2
a289 2
	if ( ((disable) && (!currently_disabled)) ||
	    ((!disable) && (currently_disabled)) )
d291 1
a291 1
            pos = removeGList(win, gad, 1);
d293 1
a293 1
            AddRefreshGadget(gad, win, req, pos);
a294 1
	return( ti );
d296 2
a297 1
    return( NULL );
d309 2
a310 2
void SelectGadget( struct Gadget *gad, struct Window *win,
                   struct Requester *req, BOOL select )
d314 3
a316 3
    pos = removeGList( win, gad, 1 );
    if ( select )
    {
a317 1
    }
a318 1
    {
a319 1
    }
d321 1
a321 1
    AddRefreshGadget(gad,win,req,pos);
d326 2
a327 2
struct Gadget *CreateGenericBase( struct Gadget *gad, struct NewGadget *ng,
    ULONG extrasize, struct TagItem *moretags )
d329 2
a330 3
    return (CreateGadget(GENERIC_KIND, gad, ng,
	GT_ExtraSize, extrasize,
	TAG_MORE, moretags));
a331 2

/*------------------------------------------------------------------------*/
@


39.5
log
@Added gadget help support
Added requester support
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.4 92/04/07 14:00:29 vertex Exp Locker: vertex $
d81 6
a86 6
    gad = AllocVec((sizeof(struct SpecialGadget) + ALIGNSIZE(extrasize) +
	textmem), MEMF_CLEAR);

    DP(("CG:  Allocated $%lx bytes at $%lx\n", (sizeof(struct SpecialGadget) +
	ALIGNSIZE(extrasize) + textmem),
	gad));
a87 2
    if (gad)
    {
a101 1
	gad->Flags = GFLG_EXTENDED;
d103 1
a110 6
	if (getGATagData( GA_Disabled, FALSE, taglist ))
	{
	    DP(("CG:  Disabling gadget on account of GA_Disabled, TRUE\n"));
	    gad->Flags |= GFLG_DISABLED;
	}

d130 1
a130 1
		hilighttextPen : textPen];
d240 1
a240 1
	    if (SGAD(gad)->sg_ExtraFree)
d242 1
a242 2
		DP(("FG: Calling sg_ExtraFree at $%lx\n", SGAD(gad)->sg_ExtraFree));
		(*SGAD(gad)->sg_ExtraFree)(gad);
@


39.4
log
@*** empty log message ***
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.3 92/02/20 11:50:01 peter Exp Locker: vertex $
d30 1
a30 1
    struct Requester *req, BOOL select);
d56 1
a56 1
    struct Gadget *gad;
d100 12
d116 1
a116 1
	    gad->Flags = GADGDISABLED;
d309 1
a309 1
            AddRefreshGadget(win, gad, pos);
d326 1
a326 1
    struct Requester *req, BOOL select )
d328 1
a328 1
    WORD pos = removeGList( win, gad, 1 );
d330 1
d339 2
a340 1
    AddRefreshGadget(win,gad,pos);
@


39.3
log
@Now account for SpecialGadget fields following gadget.
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.2 92/02/03 15:48:19 peter Exp Locker: peter $
d64 1
a64 1
    
d76 1
a76 1
	    textmem += (sizeof(struct TextAttr) + sizeof(struct IntuiText)) + 
a99 21
#ifdef DEBUGGING
    {
	struct TagItem *ti = taglist;
	while (ti)
	{
	    DP(("ti: $%lx, ti->Tag $%lx, ti->data $%lx\n", ti, ti->ti_Tag,
		ti->ti_Data));
	    switch (ti->ti_Tag)
	    {
		case TAG_DONE:
		    ti = NULL;
		    break;
		case TAG_MORE:
		    ti = (struct TagItem *)ti->ti_Data;
		    break;
		default:
		    ti++;
	    }
	}
    }
#endif
d128 1
a128 1
	    DP(("CG:  FrontPen set to %ld\n", ((LONG)gitext->FrontPen))); 
d132 1
a132 1
	    DP(("CG:  ITextFont set to $%lx\n", gitext->ITextFont)); 
d189 1
a189 1
*	FreeGadgets -- Free a linked list of gadgets. (V36)
a206 9
*   RESULT
*	none
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
d295 1
a295 1
	    pos = RemoveGList(win, gad, 1);
d297 1
a297 1
	    AddRefreshGList(win, gad, pos, 1, NULL);
d316 1
a316 1
    WORD pos = RemoveGList( win, gad, 1 );
d326 1
a326 1
    AddRefreshGList( win, gad, pos, 1, req );
@


39.2
log
@Removed findGATagItem() and added getGATagData(), for space reasons.
Deleted obsolete internal autodocs.
@
text
@d7 1
a7 1
*   $Id: generic.c,v 39.1 92/01/30 19:52:57 peter Exp $
d25 1
a25 1
struct Gadget *CreateGenericA (struct Gadget *gad, struct NewGadget *ng,
d39 1
a39 1
struct Gadget *CreateGenericA( struct Gadget *gad, struct NewGadget *ng,
a50 1
    struct SpecialGadget *sg;
d56 1
d59 1
a59 1
    if (!gad)
d61 1
a61 1
	DP(("CG: failing due to NULL gad\n"));
d81 1
a81 1
    sg = AllocVec((sizeof(struct SpecialGadget) + ALIGNSIZE(extrasize) +
d86 1
a86 1
	sg));
d88 1
a88 1
    if (sg)
d90 1
a90 2
	gad->NextGadget = &sg->sg_Gadget;
	gad = gad->NextGadget;
d134 1
a134 1
		MEMORY_N_FOLLOWING(MEMORY_FOLLOWING(gad),
a199 1
	return(gad);
d201 1
a201 4
    else
    {
	return(NULL);
    }
a250 1
    struct SpecialGadget *sg;
a257 2
	    sg = SG_FROM_GAD(gad);

d261 1
a261 1
	    if (sg->sg_Flags & SG_EXTRAFREE_DISPOSE)
d266 1
a266 1
	    if (sg->sg_ExtraFree)
d268 2
a269 2
		DP(("FG: Calling sg_ExtraFree at $%lx\n", sg->sg_ExtraFree));
		(*sg->sg_ExtraFree)(gad);
d277 1
a277 1
	    if (sg->sg_Flags & SG_CONTEXT)
d279 8
a286 3
		struct ContextIData *ctid = CTID(sg);
		/* If QuasiMessage is in use, then mark it as DelayedFree.
		 * NOTE assignment, not equality test!
d288 1
a288 1
		if (ctid->ctid_DelayedFree = ctid->ctid_QuasiUsed)
a289 2
		    /* Pointer to the gadget we will FreeVec() in GT_PostFilter */
		    ctid->ctid_ActiveGadget = (struct Gadget *)sg;
d291 1
a291 1
		    sg = NULL;
d294 1
a294 1
	    FreeVec(sg);
@


39.1
log
@Removed RCS log.  Re-did braces, comments, and function headers.
Bumped to V39.
@
text
@d7 1
a7 1
*   $Id: generic.c,v 38.2 92/01/28 08:29:05 peter Exp Locker: peter $
d37 1
a37 54
/*i**** gadtools.library/CreateGenericA **************************************
*
*   NAME
*	CreateGenericA -- Allocate and initialize a generic gadget. (V36)
*
*   SYNOPSIS
*	gad = CreateGenericA(previous, newgad, taglist)
*	
*	struct Gadget *CreateGenericA(struct Gadget *, struct NewGadget *,
*	    struct TagItem *);
*
*   FUNCTION
*	If previous is NULL, CreateGenericA() returns NULL immediately.
*	Otherwise, it allocates and fills out a Gadget structure based
*	on the information in the supplied NewGadget structure.  If the
*	ng_GadgetText field of newgad is non-NULL, an IntuiText is
*	also allocated and filled out, and attached to the GadgetText
*	field of the new gadget.  CreateGenericA() sets the NextGadget field
*	of the previous gadget to the newly created Gadget.
*
*   INPUTS
*	previous - pointer to the previous gadget that this new gadget
*	    is to be linked to.
*	newgad - a filled in NewGadget structure describing the desired
*	    gadget's size, position, label, etc.
*	taglist - pointer to a TagItem list.
*
*   TAGS
*	GT_ExtraSize - the number of extra bytes the caller wishes to
*	    have allocated along with the Gadget structure.  The
*	    resulting memory will be of type MEMF_CLEAR, and will be
*	    automatically freed during FreeGadgets().  The MEMORY_FOLLOWING
*	    macro will be useful in accessing this memory.
*
*   RESULT
*	gad - pointer to the new gadget, or NULL if the allocation failed
*	    or if previous was NULL.
*
*   EXAMPLE
*
*   NOTES
*
*   BUGS
*
*   SEE ALSO
*	FreeGadgets(), gadtools.h/MEMORY_FOLLOWING(),
*	gadtools.h/MEMORY_N_FOLLOWING()
*
******************************************************************************
*
* Created:  06-Jun-89
* Modified: 19-Feb-90
*
*/
d123 1
a123 1
	if (getTagData(GA_DISABLED, FALSE, taglist))
d125 1
a125 1
	    DP(("CG:  Disabling gadget on account of GA_DISABLED, TRUE\n"));
d322 1
a322 1
    if (ti = findGATagItem(GA_DISABLED, taglist))
@


38.2
log
@Removed __saveds.
@
text
@d7 1
a7 1
*   $Id: generic.c,v 38.1 91/11/27 13:19:09 peter Exp Locker: peter $
a8 64
*   $Log:	generic.c,v $
 * Revision 38.1  91/11/27  13:19:09  peter
 * AbleGadget() no longer has a 'count' parameter.
 * 
 * Revision 38.0  91/07/11  12:32:34  peter
 *  Initial V38 check-in (matches V37 release).
 * 
*   Revision 36.16  91/04/08  13:27:02  peter
*   Where appropriate uses getGTTagData(), getSTRINGTagData(),
*   findGTTagItem(), and findGATagItem() macros/stubs to save space.
*   
*   Revision 36.15  91/03/14  16:08:21  peter
*   Added CreateGenericBase() function to save space.
*   
*   Revision 36.14  91/01/28  13:30:18  peter
*   The position of the underscored character is now correct (based on
*   TextLength() instead of TextExtent()).
*   Uses ctid_DelayedFree to handle callers who FreeGadgets() before
*   they GT_ReplyIMsg() the last message.
*   
*   Revision 36.13  90/12/10  12:44:48  peter
*   Fixed an allocation-failure bug.
*   
*   Revision 36.12  90/11/19  12:54:28  peter
*   Removed compiled-out code to do label dropshadowing.
*   Now handles GT_Underscore, providing a second IntuiText which underscores
*   the key-equivalent letter.
*   
*   Revision 36.11  90/11/07  19:44:11  peter
*   Now uses AddRefreshGList().  Handles the SG_EXTRAFREE_DISPOSE flag.
*   
*   Revision 36.10  90/10/12  19:43:14  peter
*   Calls internal findTagItem() and getTagData() to save space.
*   Calls internal addGlist() and refreshGList() to save space.
*   
*   Revision 36.9  90/08/15  13:05:14  peter
*   Added some debugging.
*   
*   Revision 36.8  90/06/21  13:59:33  peter
*   Improved FreeGadgets() autodoc.
*   
*   Revision 36.7  90/05/30  13:50:40  peter
*   Now use AllocVec/FreeVec instead of SmartAllocMem/SmartFreeMem.
*   
*   Revision 36.6  90/05/18  18:30:36  peter
*   Put space immediately before '(' in prototypes to avoid confusing ctags.
*   
*   Revision 36.5  90/05/03  16:30:33  peter
*   Added some DP()'s.
*   
*   Revision 36.4  90/04/12  16:18:09  peter
*   Put register information into autodocs.
*   
*   Revision 36.3  90/04/02  16:05:59  peter
*   No longer OR's in GADTOOLBIT.  Sets GadgetType to GADTOOL_TYPE.
*   Checks for GADTOOL_TYPE instead of GADTOOLBIT in FreeGadgets().
*   
*   Revision 36.2  90/03/31  06:44:11  peter
*   Added a warning comment about VisualInfo values.
*   
*   Revision 36.1  90/03/16  14:02:33  peter
*   RCS Clean up.
*   
*
d17 1
a17 1
/*  Function Prototypes: */
d19 1
a19 1
/*  Public: */
d24 1
a24 1
/*  Internal: */
d92 12
a103 11
struct Gadget *CreateGenericA(struct Gadget *gad, struct NewGadget *ng,
    struct TagItem *taglist)

    {
    /*  !!! NOTE WELL:  CreateContext() passes us a NewGadget structure
	with a VisualInfo pointer of ~0, so that CreateGadgetA() doesn't
	complain.  We had better not depend on the VisualInfo for that
	case (the whole NewGadget structure [including ng_GadgetText]
	is NULL except for VisualInfo) !!! */
    /*  !!! The routines that call me here generally pass me their taglist.
	They probably should filter out what they've used! */
d113 1
a113 1
	{
d116 1
a116 1
	}
d119 2
a120 2
	{
	/*  Need an IntuiText structure */
d122 3
a124 2
	/*  To handle underlines, I need a string buffer plus another
	    IntuiText structure and a TextAttr */
d126 1
a126 1
	    {
a130 1
	    }
d132 1
d142 1
a142 1
	{
d155 1
a155 1
	{
d158 1
a158 1
	    {
d162 1
a162 1
		{
a170 1
		}
d173 1
d177 1
a177 1
	    {
d180 1
a180 1
	    }
d185 2
a186 2
	    {
	    /*  Space for gadget text follows gadget and extrasize: */
d198 1
a198 1
	    /*  Use hilighttextPen or textPen: */
d210 1
a210 1
		{
d227 3
a229 2
		   symbol removed.  uitext should point to an underscored
		   copy of the right character */
d234 2
a236 2
		    if (*src != underline)
			{
d239 1
a239 1
			}
d241 1
a241 1
			{
d244 1
a244 1
			/*  Character after the underline */
a246 1
			}
d248 1
a251 1
		}
d253 1
d255 1
a255 1
	}
d257 1
a257 1
	{
a258 1
	}
d260 1
d306 2
a307 3
LIB_FreeGadgets(register __a0 struct Gadget *gad)

    {
d313 1
a313 1
	{
d316 1
a316 1
	    {
d319 3
a321 2
	    /*  The most common ExtraFree job is a DisposeObject()
		on the imagery */
d323 1
a323 1
		{
d325 1
a325 1
		}
d328 1
a328 1
		{
d331 1
a331 1
		}
d339 1
a339 1
		{
d345 1
a345 1
		    {
a349 1
		    }
d351 1
d353 1
a353 1
	    }
a354 1
	}
d356 1
d368 3
a370 8
struct TagItem *TagAbleGadget(gad, win, req, taglist)

    struct Gadget *gad;
    struct Window *win;
    struct Requester *req;
    struct TagItem *taglist;

    {
d376 1
a376 1
	{
d382 1
a382 1
	    {
d386 1
a386 1
	    }
d388 1
a388 1
	}
d390 1
a390 1
    }
d401 2
a402 2
void SelectGadget( struct Gadget *gad, struct Window *win, struct Requester *req,
    BOOL select )
d419 3
a421 8
struct Gadget *CreateGenericBase (gad, ng, extrasize, moretags)

    struct Gadget *gad;
    struct NewGadget *ng;
    ULONG extrasize;
    struct TagItem *moretags;

    {
d425 1
a425 1
    }
@


38.1
log
@AbleGadget() no longer has a 'count' parameter.
@
text
@d7 1
a7 1
*   $Id: generic.c,v 38.0 91/07/11 12:32:34 peter Exp Locker: peter $
d10 3
d84 1
a84 1
void __saveds __asm
d366 1
a366 1
void __saveds __asm
@


38.0
log
@ Initial V38 check-in (matches V37 release).
@
text
@d7 1
a7 1
*   $Id: generic.c,v 36.16 91/04/08 13:27:02 peter Exp $
d10 3
d88 4
a91 2
void AbleGadget (struct Gadget *gad, struct Window *win,
    struct Requester *req, UWORD count, BOOL disable);
d419 1
a419 1
/*/ AbleGadget()
d421 2
a422 1
 * Function to enable/disable a gadget and refresh, in the boring old way.
a423 3
 * Created:  8-Jan-90, Peter Cherna
 * Modified: 8-Jan-90, Peter Cherna
 *
d426 1
a426 1
void AbleGadget(gad, win, req, count, disable)
d431 1
a431 2
    UWORD count;
    BOOL disable;
d434 3
a436 2
    UWORD pos, i;
    struct Gadget *runner;
d438 11
a448 20
    DP(("AG:  Enter\n"));
    /*  Do they want to disable an enabled gadget? */
    if ((disable) && (!(gad->Flags & GADGDISABLED)))
	{
	DP(("AG: Disabling gadget $%lx since it is enabled\n",gad));
	pos = RemoveGList(win, gad, count);
	for (runner = gad, i = 0; i < count; runner = runner->NextGadget, i++)
	    {
	    runner->Flags |= GADGDISABLED;
	    }
	AddRefreshGList(win, gad, pos, count, NULL);
	}
    /*  Do they want to enable a disabled gadget? */
    else if ((!disable) && (gad->Flags & GADGDISABLED))
	{
	DP(("AG: Enabling gadget $%lx since it is disabled\n",gad));
	pos = RemoveGList(win, gad, count);
	for (runner = gad, i = 0; i < count; runner = runner->NextGadget, i++)
	    {
	    runner->Flags &= ~GADGDISABLED;
d450 1
a450 1
	AddRefreshGList(win, gad, pos, count, NULL);
d452 1
a452 1
    DP(("AG: Exit\n"));
d455 24
@
