head     36.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.7
date     91.03.12.21.15.38;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     91.02.20.03.09.44;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.12.07.04.06.07;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.12.02.07.14.24;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.05.05.22.31;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.20.20.31.13;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.17;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.7
log
@Added missing ';'
@
text
@/* mygetvec.c */

#include "ram_includes.h"
#include "ram.h"

/********************************************************/
/* ptr := mygetvec(n)                                   */
/*                                                      */
/* Central memory management routine for RAM:           */
/********************************************************/

/* leave a 30K chunk */
#define RIP_PRIME
#define SAFETY_FACTOR 30000

void *
mygetvec (n)
	ULONG n;
{
	void *p;

#ifdef RIP
	if (ripcord == NULL)
	{
		ripcord = AllocVec(SAFETY_FACTOR*4,0);
		if (ripcord == NULL)
			return NULL;
	}
#endif
#ifdef RIP_PRIME
	/* try to leave a chunk of a certain size in the system */
	if ((n == DATA_BLOCK_SIZE*4) &&
	    (AvailMem(MEMF_LARGEST | MEMF_PUBLIC) < SAFETY_FACTOR))
	{
		fileerr = ERROR_DISK_FULL;
		return NULL;
	}
#endif
	p = AllocVec(n,0);
	if (p == NULL)
	{
		fileerr = ERROR_DISK_FULL;
#ifdef RIP
		freevec(ripcord);
		ripcord = NULL;
#endif
	}

	return p;
}

void *
getvec (ULONG size)
{
	void *foo;

	foo = AllocVec(size,0);
	if (!foo)
		fileerr = ERROR_NO_FREE_STORE;

	return foo;
}
@


36.6
log
@getvec now sets fileerr on allocation failure
@
text
@d61 1
a61 1
	return foo
@


36.5
log
@cast changes
@
text
@d55 7
a61 1
	return AllocVec(size,0);
@


36.4
log
@added stub rtn
@
text
@d20 1
a20 1
	CPTR p;
d39 1
a39 1
	p = (CPTR) AllocVec(n,0);
d44 1
a44 1
		FreeVec(ripcord);
@


36.3
log
@for rcs 4.x header change
@
text
@d16 1
a16 1
CPTR
d50 6
@


36.2
log
@getvec->allocvec, added ripcord back
@
text
@@


36.1
log
@*** empty log message ***
@
text
@d12 4
d25 1
a25 1
		ripcord = getvec(SAFETY_FACTOR);
d32 1
a32 1
	if ((n == DATA_BLOCK_SIZE) &&
d39 1
a39 1
	p = (CPTR) getvec(n);
d44 1
a44 1
		freevec(ripcord);
@
