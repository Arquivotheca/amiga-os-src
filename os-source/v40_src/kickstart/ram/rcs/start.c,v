head     36.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.16
date     92.08.09.20.22.23;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     91.01.22.19.47.51;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.12.07.04.07.51;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.12.02.07.15.10;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.11.21.04.52.13;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.09.13.14.37.12;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.08.31.14.52.25;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.06.14.02.35.50;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.06.13.02.49.23;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.05.05.23.19;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.02.20.20.36.20;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.14.04.23.58;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.08.08.30.13;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.18.14.19.14;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.09.18.23.03.22;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.39;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.16
log
@Use TaggedOpenLibrary
@
text
@/* ram-handler.c */

#include "ram_includes.h"
#include "ram.h"

/*
// Ram disk handler.

// Objects are held as a data block which contains the name, a link, a backlink,
// a flag to distinguish files or directories, the time & date of creation
// and a pointer to a list of further file/directory nodes or the data.
// SCBs associated with open RAM files contain the lock in scb.arg1

   Converted to C, 1/19/88 REJ

// Changes: 14-Jan-88
// Fixed node name so you can talk to it by RAM Disk
// Added test so you can't have 2 files with same name
// Fixed rename directory under itself bug
// Fixed rename file1 file2/file1 bug
// Added renamedisk function
// Made root node valid, so standard file requesters will work
// Added action read/write (new V1.2 packet)
// Supports date stamp of the root
// fills lock with ptr to volumenode rather than devicenode

*/

/*
// This is called with a standard loadable device
// startup packet (same as, for example, cohand).
// The format is 
// Arg1 Name (ignored - passed to open as well)
// Arg2 Startup argument (not used)
// Arg3 Pointer to device node
*/

void
start (struct DosPacket *dp)
{
	struct Message    *msg;
	struct DeviceList *devnode,*newnode;
	struct node *node;
	LONG res1;
	LONG arg1;	/* dp->dp_Arg1 << 2 */
	LONG waitmask,sigs,mrp_sig,time_sig;
	int flag;
	char str1[256], str2[256];	/* FIX!!!!!!!!!! */

	DBUG("In handler");

	/* guaranteed not to go to disk */
	DOSBase = (struct DosLibrary *) TaggedOpenLibrary(OLTAG_DOS);
	UtilityBase = TaggedOpenLibrary(OLTAG_UTILITY);

	/* setup stuff - get packet from DOS */
	MyPort = &(((struct Process *) FindTask(NULL))->pr_MsgPort);

	DBUG1("got packet at 0x%lx",(LONG)dp);

	root = (struct node *) AllocVec(sizeof(struct node),MEMF_CLEAR);
	if (!root)
		goto punt;

	/* reply port for notification messages */
	MyReplyPort = CreateMsgPort();
	if (!MyReplyPort)
		goto punt;
	NewList((struct List *)
		&(MyReplyPort->mp_MsgList));	/* createport doesn't init(?) */

	timerport = CreateMsgPort();
	if (!timerport)
		goto punt;
	NewList((struct List *)
		&(timerport->mp_MsgList));	/* createport doesn't init(?) */

	NewList((struct List *) &(root->notify_list));
	NewList((struct List *) &(root->record_list));
	NewList((struct List *) &(root->rwait_list));
	NewList((struct List *) &orphaned);
	NewList((struct List *) &FreeMessages);
	root->type = ST_USERDIR;
	DBUG1("root is at 0x%lx",(LONG)root);

	strcpy(root->name,"Ram Disk");

	lock_list  = NULL;
	spaceused  = 1;


	/* Set up first, before filling in task id. */
	DBUG("adding device...");

	newnode = (struct DeviceList *) MakeDosEntry("Ram Disk",DLT_VOLUME);
	if (!newnode)
		goto punt;			/* exiting is permission */

	DBUG1("newnode is at 0x%lx",(LONG)newnode);
	newnode->dl_Task     = MyPort;
	newnode->dl_DiskType = ID_DOS_DISK;
	DateStamp((struct DateStamp *) &(newnode->dl_VolumeDate));

	if (!AddDosEntry((struct DosList *) newnode))
	{
		/* some sort of error, probably name collision */
		FreeDosEntry((struct DosList *) newnode);
		goto punt;
	}

	/* fill in device node with process pointer, etc */
	/* arg1 = string, arg2 = startup msg, arg3 = device node */
	/* these fields are inaccurate, it's a union */

	devnode = (struct DeviceList *) (dp->dp_Arg3 << 2);
	DBUG1("Devnode is at 0x%lx",(LONG)devnode);

	devnode->dl_Task = MyPort;
	devnode->dl_LockList = 0;
	devnode->dl_DiskType = 0;
	devnode->dl_unused   = 0;		/* globvec */
	DateStamp((struct DateStamp *) root->date);

	/* device node set up */

	volumenode = newnode;

	DBUG("returning packet...");
	ReplyPkt(dp,DOS_TRUE,0);
	DBUG("returned packet");


	waitmask = (1L << MyPort->mp_SigBit) |
		   (mrp_sig  = (1L << MyReplyPort->mp_SigBit)) |
		   (time_sig = (1L << timerport->mp_SigBit));
	while (1) {

	    sigs = Wait(waitmask);

	    /* handle returning notify messages */
	    if (sigs & mrp_sig)
		    while ((msg = GetMsg(MyReplyPort)) != NULL)
		    {
			AddFreeMsg((struct NotifyMessage *) msg);
		    }

	    /* timeouts for record locking */
	    if (sigs & time_sig)
		    while ((msg = GetMsg(timerport)) != NULL)
		    {
			kill_rwait((struct timerequest *) msg);
		    }

	    /* handle dospackets */
	    while ((msg = GetMsg(MyPort)) != NULL)
	    {
		dp = (struct DosPacket *) msg->mn_Node.ln_Name;
		DBUG2("Action %ld (packet at 0x%lx)",dp->dp_Action,
		      (LONG) dp);

		/* shift to save code later - used a lot */
		arg1 = dp->dp_Arg1 << 2;

		/* clear secondary result */
		res1 = fileerr = 0;

		switch (dp->dp_Action) {
		case ACTION_WRITE:
			res1 = write((struct lock *) arg1,
				     (CPTR) dp->dp_Arg2, dp->dp_Arg3);
			break;
		case ACTION_READ:
			res1 = read((struct lock *) arg1,
				    (CPTR) dp->dp_Arg2, dp->dp_Arg3);
			break;
		case ACTION_EXAMINE_OBJECT:
		case ACTION_EXAMINE_FH:
			res1 = exnext(dp,0);
			break;
		case ACTION_EXAMINE_NEXT:
			res1 = exnext(dp,1);
			break;
		case ACTION_EXAMINE_ALL:
			res1 = exnext(dp,2);
			break;
		case ACTION_SET_FILE_SIZE:
			flag = TRUE;
			goto seekit;
		case ACTION_SEEK:
			flag = FALSE;
seekit:
			res1 = seek((struct lock *) arg1,
				    dp->dp_Arg2, dp->dp_Arg3,flag);
			break;
		case ACTION_LOCATE_OBJECT:
			res1 = (LONG) locate((struct lock *) arg1,
					     BtoC(str1,dp->dp_Arg2),
					     dp->dp_Arg3);
			goto common_bptr;
		case ACTION_FREE_LOCK:
			res1 = freelock((struct lock *) arg1);
			break;
		case ACTION_PARENT_FH:
		case ACTION_COPY_DIR_FH:
			/* a filehandle arg1 is a lock - nice */
		case ACTION_PARENT:
		case ACTION_COPY_DIR:	/* aka DupLock */
			res1 = (LONG) parentfh((struct lock *) arg1,
					       dp->dp_Action);
			goto common_bptr;
		case MODE_READWRITE:
			/* DateStamp(root->date); */	/* why? FIX */
			flag = 2;
			goto open;
		case MODE_OLDFILE:
			flag = 1;
			goto open;
		case MODE_NEWFILE:
			flag = 0;
open:
			res1 = openmakefile(
				       (struct FileHandle *) arg1,
				       (struct lock *) (dp->dp_Arg2 << 2),
				       BtoC(str1,dp->dp_Arg3),
				       flag);
			break;
		case ACTION_END:	/* aka Close(), does notify */
			res1 = closefile((struct lock *) arg1);
			break;
		case ACTION_READ_LINK:
			res1 = readlink((struct lock *) arg1,
					(char *) dp->dp_Arg2,
					(UBYTE *) dp->dp_Arg3,
					(ULONG) dp->dp_Arg4);
			break;
		case ACTION_RENAME_OBJECT:
			res1 = rename((struct lock *) arg1,
				      BtoC(str1,dp->dp_Arg2),
				      (struct lock *) (dp->dp_Arg3 << 2),
				      BtoC(str2,dp->dp_Arg4));
			break;
		case ACTION_DELETE_OBJECT:
			node = checklock((struct lock *) arg1);
			if (node)
			{
				res1 = delete(node,
					      BtoC(str1,dp->dp_Arg2),
					      TRUE);
			}
			break;
		case ACTION_SAME_LOCK:
			node = checklock((struct lock *) arg1);
			if (node)
			{
				arg1 = (LONG) checklock((struct lock *)
							BADDR(dp->dp_Arg2));
				if (arg1 == (LONG) node)
					res1 = TRUE;
			}
			break;
		case ACTION_CURRENT_VOLUME:
			res1 = (LONG) volumenode;
			goto common_bptr;
		case ACTION_SET_COMMENT:
		case ACTION_SET_PROTECT:
		case ACTION_SET_DATE:
			res1 = comment(dp,BtoC(str1,dp->dp_Arg3));
			break;
		case ACTION_INFO:
			if (!checklock((struct lock *) arg1))
			{
				fileerr = ERROR_OBJECT_IN_USE;
				break;
			}
			/* fall through */
		case ACTION_DISK_INFO:
			res1 = diskinfo(dp);
			break;
		case ACTION_FLUSH:
			res1 = DOS_TRUE;
			break;
		case ACTION_RENAME_DISK:
			res1 = renamedisk(dp);
			break;
		case ACTION_ADD_NOTIFY:
			res1 = addnotify((struct NotifyRequest *) dp->dp_Arg1);
			break;
		case ACTION_REMOVE_NOTIFY:
			res1 = remnotify((struct NotifyRequest *) dp->dp_Arg1);
			break;
		case ACTION_DIE:
			fileerr = ERROR_OBJECT_IN_USE;
			break;
		case ACTION_CREATE_DIR:
			/* by default, creates a directory */
			res1 = (LONG) create((struct lock *) arg1,
					     BtoC(str1,dp->dp_Arg2),
					     EXCLUSIVE_LOCK,TRUE);
			goto common_bptr;
		case ACTION_MAKE_LINK:
			res1 = makelink((struct lock *) arg1,
					 BtoC(str1,dp->dp_Arg2),
					 dp->dp_Arg3,
					 dp->dp_Arg4);
			break;
		case ACTION_IS_FILESYSTEM:
			res1 = DOS_TRUE;
			break;
		case ACTION_FH_FROM_LOCK:
			res1 = openfromlock((struct FileHandle *) arg1,
					    (struct lock *) BADDR(dp->dp_Arg2));
			break;
		case ACTION_CHANGE_MODE:
			/* check type for correctness - note that for */
			/* ramdisk, lock == filehandle!! */

			if (arg1 == CHANGE_LOCK << 2)
			{
				res1 = change_lock((struct lock *)
						    BADDR(dp->dp_Arg2),
						   dp->dp_Arg3);

			} else if (arg1 == CHANGE_FH << 2) {

				/* NASTY! FH is passed, not arg1! */
				res1 = change_lock((struct lock *)
					   BADDR(((struct FileHandle *)
					    BADDR(dp->dp_Arg2))->fh_Arg1),
				  dp->dp_Arg3 == MODE_NEWFILE ? EXCLUSIVE_LOCK :
								SHARED_LOCK);
				/* FIX! handle other opening modes! */
			} else
				fileerr = ERROR_OBJECT_WRONG_TYPE;
			break;
		case ACTION_LOCK_RECORD:
			res1 = lockrecord((struct lock *) arg1,dp);
			if (res1 == 1)
				continue;	/* Don't reply pkt!!! */
			break;

		case ACTION_FREE_RECORD:
			res1 = unlockrecord((struct lock *) arg1,
					    dp->dp_Arg2,dp->dp_Arg3);
			break;

common_bptr:	/* change res1 to a bptr - to save code space */
			res1 = TOBPTR(res1);
			break;

		case ACTION_INHIBIT:
		case ACTION_GET_BLOCK:
		case ACTION_MORE_CACHE:
		default:
			fileerr = ERROR_ACTION_NOT_KNOWN;
		} /* switch */

		/* all go here, except sometimes lockrecord */
		DBUG2("returning packet: res1 0x%lx  res2 %ld",res1,fileerr);
		ReplyPkt(dp,res1,fileerr);

	   } /* while (msg = Getmsg) */
	} /* while (1) */

punt:
	if (MyReplyPort)
		DeleteMsgPort(MyReplyPort);
	if (timerport)
		DeleteMsgPort(timerport);

	if (root)
		freevec(root);

	ReplyPkt(dp,FALSE,FALSE);

	/* exit!  Implicit Permit() */
}
@


36.15
log
@DateStamp cast
@
text
@d53 2
a54 2
	DOSBase = (struct DosLibrary *) OpenLibrary("dos.library",36L);
	UtilityBase = OpenLibrary("utility.library",36L);
@


36.14
log
@FreeVec->freevec
@
text
@d102 1
a102 1
	DateStamp((long *) &(newnode->dl_VolumeDate));
d122 1
a122 1
	DateStamp(root->date);
@


36.13
log
@Open utility
@
text
@a37 4
#ifdef NEVER
int x = 1;
#endif

d371 1
a371 1
		FreeVec((char *) root);
@


36.12
log
@Changelock fixes
@
text
@d58 1
@


36.11
log
@Removed two datestamps of root
@
text
@d141 1
a141 1
	    sigs = Wait (waitmask);
d320 1
a320 2
			if ((arg1 == CHANGE_LOCK << 2) ||
			    (arg1 == CHANGE_FH << 2))
d325 10
@


36.10
log
@Changed calls to create()
@
text
@d215 1
a215 1
			DateStamp(root->date);	/* why? FIX */
a251 1
				DateStamp(root->date);
@


36.9
log
@create() param changes, fixed a cast
@
text
@d299 1
d302 1
a302 1
					     EXCLUSIVE_LOCK);
@


36.8
log
@Use new exec port functions
common tobptr of res1
common "get lock on object" code
DateStamp on volume not device
@
text
@d246 1
a246 1
			node = (LONG) checklock((struct lock *) arg1);
d300 2
a301 1
					     BtoC(str1,dp->dp_Arg2));
@


36.7
log
@for rcs 4.x header change
@
text
@d69 1
a69 1
	MyReplyPort = CreatePort(0,0);
d75 1
a75 1
	timerport = CreatePort(0,0);
d105 1
a124 1
	DateStamp((long *) &(devnode->dl_VolumeDate));
d199 1
a199 1
			res1 = TOBPTR(locate((struct lock *) arg1,
d201 2
a202 2
					     dp->dp_Arg3));
			break;
d206 3
a209 2
			res1 = TOBPTR(parent(dp));
			break;
d211 3
a213 4
			node = checklock((struct lock *) arg1);
			res1 = (node == NULL ? NULL :
				TOBPTR(getlock(node,SHARED_LOCK)));
			break;
d246 2
a247 3
			res1 = (LONG) checklock((struct lock *)
						arg1);
			if (res1)
d249 1
a249 1
				res1 = delete((struct node *) res1,
d261 1
a261 1
				if (arg1 && arg1 == (LONG) node)
d266 2
a267 2
			res1 = TOBPTR(volumenode);
			break;
d299 3
a301 3
			res1 = TOBPTR(create((struct lock *) arg1,
					     BtoC(str1,dp->dp_Arg2)));
			break;
a310 10
		case ACTION_COPY_DIR_FH:
			res1 = TOBPTR(getlock(((struct lock *) arg1)->block,
				              dp->dp_Arg2));
			break;
		case ACTION_PARENT_FH:
			/* a filehandle on a node MUST have a parent! */
			res1 = TOBPTR(getlock(
					   ((struct lock *) arg1)->block->back,
					   dp->dp_Arg2));
			break;
d339 4
d359 3
a361 1
		DeletePort(MyReplyPort);
@


36.6
log
@Many new calls, CtoBstr->CtoB, etc
@
text
@@


36.5
log
@Added record stuff
@
text
@d50 1
a50 1
	LONG waitmask;
d52 1
d56 2
a57 2
	/* guaranteed not to go to disk - only used by adddevice */
	DOSBase = (struct DosLibrary *) OpenLibrary("dos.library",33L);
d64 1
a64 1
	root = (struct node *) getvecclear((sizeof(struct node) + 3) >> 2);
a96 1
	Forbid();	/* keep others from starting ramdisk. FIX!!! */
d98 1
a98 1
	newnode = adddevice("Ram Disk");
a103 3
	newnode->dl_Type     = DLT_VOLUME;
	newnode->dl_Lock     = NULL;
	newnode->dl_LockList = NULL;
d106 7
a112 1
/* danger - not locked while setting up node! */
d124 2
a125 2
	datstamp((long *) &(devnode->dl_VolumeDate));
	datstamp(root->date);
d127 1
a127 1
	Permit();	/* device node set up */
d132 1
a132 1
	returnpkt(dp,DOS_TRUE,0);
d137 2
a138 2
		   (1L << MyReplyPort->mp_SigBit) |
		   (1L << timerport->mp_SigBit);
d140 3
d144 5
a148 4
	    while ((msg = GetMsg(MyReplyPort)) != NULL)
	    {
		AddFreeMsg((struct NotifyMessage *) msg);
	    }
d150 6
a155 4
	    while ((msg = GetMsg(timerport)) != NULL)
	    {
		kill_rwait((struct timerequest *) msg);
	    }
d172 3
a174 2
			flag = FALSE;
			goto readwrite;
d176 2
a177 4
			flag = TRUE;
readwrite:
			res1 = transfer((struct lock *) arg1,
					(CPTR) dp->dp_Arg2, dp->dp_Arg3, flag);
d200 1
a200 1
					     BtoCstr(dp->dp_Arg2),
a201 1
			CtoBstr(dp->dp_Arg2);
d215 1
a215 1
			datstamp(root->date);	/* why? */
d227 1
a227 1
				       BtoCstr(dp->dp_Arg3),
a228 1
			CtoBstr(dp->dp_Arg3);
d241 1
a241 1
				      BtoCstr(dp->dp_Arg2),
d243 1
a243 3
				      BtoCstr(dp->dp_Arg4));
			CtoBstr(dp->dp_Arg2);
			CtoBstr(dp->dp_Arg4);
d251 1
a251 1
					      BtoCstr(dp->dp_Arg2),
d253 1
a253 2
				CtoBstr(dp->dp_Arg2);
				datstamp(root->date);
d272 1
a272 1
			res1 = comment(dp);
d301 1
a301 2
					     BtoCstr(dp->dp_Arg2)));
			CtoBstr(dp->dp_Arg2);
d305 1
a305 1
					 BtoCstr(dp->dp_Arg2),
a307 1
			CtoBstr(dp->dp_Arg2);
d346 2
a347 1
			res1 = unlockrecord(arg1,dp->dp_Arg2,dp->dp_Arg3);
d359 1
a359 1
		returnpkt(dp,res1,fileerr);
a361 3

	   Wait (waitmask);

d369 1
a369 1
		freevec((char *) root);
d371 1
a371 1
	returnpkt(dp,FALSE,FALSE);
@


36.4
log
@*** empty log message ***
@
text
@a37 2
extern struct DosLibrary *DOSBase;

d74 6
d133 3
a135 2
	waitmask = (1L << MyPort->mp_SigBit) | (1L << MyReplyPort->mp_SigBit);

d143 5
d339 3
a341 1
/*			res1 = lockrecord((struct lock *) arg1,dp);
d343 1
a343 1
*/
d345 1
a345 1
/*			res1 = unlockrecord(arg1,dp->dp_Arg2,dp->dp_Arg3);
d347 1
a347 1
*/
d355 1
a355 1
		/* all go here except info and diskinfo */
d358 1
@


36.3
log
@Added ReadLink/Makelink, moved a few entries
@
text
@d73 2
a74 1
	NewList(&(MyReplyPort->mp_MsgList));	/* createport doesn't init(?) */
d76 5
a80 3
	NewList(&(root->notify_list));
	NewList(&orphaned);
	NewList(&FreeMessages);
d159 1
a159 1
					dp->dp_Arg2, dp->dp_Arg3, flag);
d162 1
d168 4
a171 1
		case ACTION_TRUNCATE:
d181 3
a183 5
			res1 = ((LONG)
				locate((struct lock *) arg1,
				       BtoCstr(dp->dp_Arg2),
				       dp->dp_Arg3))
				>> 2;
d190 1
a190 1
			res1 = ((LONG) parent(dp)) >> 2;
d195 1
a195 1
				(LONG) getlock(node,SHARED_LOCK) >> 2);
d254 1
a254 1
			res1 = ((LONG) volumenode) >> 2;
d287 2
a288 4
			res1 = ((LONG)
				create((struct lock *) arg1,
				       BtoCstr(dp->dp_Arg2)))
			       >> 2;
d298 20
d319 17
@


36.2
log
@Changes to make BCPL-compatible, inital work towards making it romable.
Works fine as replacement for 1.3 l:ram-handler
@
text
@d164 9
a191 9
		case ACTION_TRUNCATE:
			flag = TRUE;
			goto seekit;
		case ACTION_SEEK:
			flag = FALSE;
seekit:
			res1 = seek((struct lock *) arg1,
				    dp->dp_Arg2, dp->dp_Arg3,flag);
			break;
d212 5
a216 6
		case ACTION_CREATE_DIR:
			res1 = ((LONG)
				create((struct lock *) arg1,
				       BtoCstr(dp->dp_Arg2)))
			       >> 2;
			CtoBstr(dp->dp_Arg2);
d280 14
@


36.1
log
@*** empty log message ***
@
text
@a39 2
char nodename[] = "\x08Ram Disk";	/* MUST be null-terminated BSTR! */

d45 1
a45 1
start ()
a47 1
	struct DosPacket  *dp;
a62 4
	WaitPort(MyPort);
	msg = GetMsg(MyPort);

	dp = (struct DosPacket *) msg->mn_Node.ln_Name;
d76 2
d81 1
a81 1
	strcpy(root->name,nodename+1);
d89 3
a91 2
	Forbid();				/* they nest */
	newnode = adddevice(nodename);
a115 1
	Permit();
d117 2
d124 1
@
