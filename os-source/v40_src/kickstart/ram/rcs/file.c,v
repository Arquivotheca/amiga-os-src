head     36.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.16
date     91.02.11.04.00.32;  author jesup;  state Exp;
branches ;
next     36.15;

36.15
date     90.12.07.04.04.14;  author jesup;  state Exp;
branches ;
next     36.14;

36.14
date     90.12.02.07.12.55;  author jesup;  state Exp;
branches ;
next     36.13;

36.13
date     90.11.21.04.48.49;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.09.13.14.35.17;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.08.31.14.49.30;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.06.14.02.31.22;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.06.13.02.45.14;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.30.18.04.22;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.19.05.18.24;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.18.17.08.07;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.05.05.21.57;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.02.20.20.27.20;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.08.08.22.56;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.10.47;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.02;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.16
log
@Fixed loss of 1K data buffer on failure
@
text
@/* file.c */

#include "ram_includes.h"
#include "ram.h"

/* Routine for 'findoutput' and 'findinput' (and findupdate)   */
/* ram.h has defines for openfile and makefile */

LONG
openmakefile (scb,dlock,string,type)
	struct FileHandle *scb;
	struct lock *dlock;		/* directory lock */
	char *string;
	int type;		/* 0 = makefile, 1 = openfile, 2 = readwrite */
{
	struct lock *lock;
	struct node *node;
	struct data *data = NULL;
	char created = FALSE;

	if (type == 0)	/* newfile */
	{
		data = mygetvec(sizeof(struct data));
		if (!data) return FALSE;

		lock = create(dlock,string,EXCLUSIVE_LOCK,FALSE);
		created = TRUE;
	} else {
		/* readwrite opens shared, but creates if not existant */
		lock = locate(dlock,string,SHARED_LOCK);

		/* don't try to create if it's already locked */
		if (!lock && type == 2 &&
		    fileerr == ERROR_OBJECT_NOT_FOUND)
		{
			data = mygetvec(sizeof(struct data));
			if (!data)
				return FALSE;

			lock = create(dlock,string,SHARED_LOCK,FALSE);
			created = TRUE;
		}
	}

	if (lock == NULL)
		goto failure;

	DBUG1("Open: got lock 0x%lx:",(LONG) lock);

	node = (struct node *) lock->lock.fl_Key;
	DBUG1("Open: got node 0x%lx:",(LONG) node);

	/* all lock fields are already set up by getlock */

	if (created) {
		/* make new file */
		node->type  = ST_FILE;
		lock->flags = LOCK_MODIFY;

	} else if (node->type != ST_FILE) {

		freelock(lock);
		fileerr = ERROR_OBJECT_WRONG_TYPE;
		goto failure;
	}

	if (data)	/* means we had to create() the file */
	{
		/* create 0-length data for file (close will shrink it) */
		node->list  = (struct node *) data;
		data->next  = NULL;
		data->size  = FIRSTBUFFPOS - 1;
		lock->block = data;		/* lock gotten above */
		spaceused++;
	}

	/* set up the file handle */
	scb->fh_Arg1 = ((LONG)lock) >> 2;

	/* DateStamp(root->date); */	/* huh??? */

	return DOS_TRUE;

failure:
	if (data)
		freevec(data);
	return FALSE;
}

LONG
openfromlock (scb,lock)
	struct FileHandle *scb;
	struct lock *lock;		/* lock on object */
{
	struct node *node;

	/* all lock fields are already set up by getlock */
	node = (struct node *) lock->lock.fl_Key;

	if (node->type != ST_FILE)
	{
		fileerr = ERROR_OBJECT_WRONG_TYPE;
		return FALSE;
	}

	/* set up the file handle */
	scb->fh_Arg1 = ((LONG)lock) >> 2;

	/* DateStamp(root->date); */	/* huh??? */

	return DOS_TRUE;
}
@


36.15
log
@only create on object not found for mode_readwrite
@
text
@d46 1
a46 1
		return FALSE;
d64 1
a64 1
		return FALSE;
d83 5
@


36.14
log
@remove uneeded casts
@
text
@d33 2
a34 2
		if (!lock && type == 2 && fileerr != ERROR_IS_SOFT_LINK &&
		    fileerr != ERROR_OBJECT_IN_USE)
@


36.13
log
@Changes to make sure we have a 0-length data block for an empty file
@
text
@d23 1
a23 1
		data = (void *) mygetvec(sizeof(struct data));
d36 3
a38 2
			data = (void *) mygetvec(sizeof(struct data));
			if (!data) return FALSE;
@


36.12
log
@Removed two datestamps of root
@
text
@d18 1
a20 1
	/* make sure we get an exclusive lock for mode_readwrite! */
d23 3
d36 3
d64 10
@


36.11
log
@Changed calls to create()
@
text
@d63 1
a63 1
	DateStamp(root->date);
d87 1
a87 1
	DateStamp(root->date);
@


36.10
log
@READWRITE now gets shared lock always, but creates if it doesn't exist.
create() had a param change
@
text
@d23 1
a23 1
		lock = create(dlock,string,EXCLUSIVE_LOCK);
d33 1
a33 1
			lock = create(dlock,string,SHARED_LOCK);
@


36.9
log
@Make readwrite use exclusive locks no matter what
@
text
@d21 1
a21 1
	if (type == 0)
d23 1
a23 1
create_it:	lock = create(dlock,string);
d26 2
a27 3
		/* readwrite opens exclusive, but creates if not existant */
		lock = locate(dlock,string,type == 2 ? EXCLUSIVE_LOCK :
						       SHARED_LOCK);
d32 4
a35 1
			goto create_it;
@


36.8
log
@Fix: check for softlink before overwriting!
@
text
@d26 7
a32 3
		/* mode readwrite opens shared, but creates if not existant */
		lock = locate(dlock,string,SHARED_LOCK);
		if (!lock && type == 2 && fileerr != ERROR_IS_SOFT_LINK)
@


36.7
log
@Fix to make MODE_READWRITE make files not dirs
@
text
@d28 1
a28 1
		if (!lock && type == 2)
@


36.6
log
@Mkae ramdisk match the FS on MODE_UPDATE/READWRITE
@
text
@d18 1
d24 1
d42 1
a42 1
	if (type == 0) {
@


36.5
log
@for rcs 4.x header change
@
text
@d20 10
a29 3
	lock = (type == 0 ? create(dlock,string) :
			    locate(dlock,string,type == 2 ? EXCLUSIVE_LOCK :
							    SHARED_LOCK));
@


36.4
log
@New dos calls
@
text
@@


36.3
log
@Added OpenFromLock
@
text
@d48 1
a48 1
	datstamp(root->date);
d72 1
a72 1
	datstamp(root->date);
@


36.2
log
@lock fields now set by lock.c
@
text
@d52 24
@


36.1
log
@*** empty log message ***
@
text
@d31 1
a31 4
	lock->block  = node->list;	/* will be 0 if type == 0 */
	lock->offset = FIRSTBUFFPOS;
	lock->cpos   = 0;
	lock->flags  = 0;
@
