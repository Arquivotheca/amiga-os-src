head     36.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.9
date     90.12.07.14.15.08;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.11.26.19.48.03;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.11.21.04.51.15;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.06.14.02.33.44;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.06.13.02.48.42;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.05.05.23.15;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.02.20.20.35.01;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.18.40;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.37;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.9
log
@SetFileSize should return new size, not your old file position.
@
text
@/* seek.c */

#include "ram_includes.h"
#include "ram.h"

/********************************************************/
/* ptr := seek(scb, n, wrt)                             */
/*                                                      */
/* code to handle seek on the RAM disk                  */
/********************************************************/

LONG
seek (lock,dest,frompos,truncate)
	struct lock *lock;
	LONG dest;
	LONG frompos;
	LONG truncate;	/* true/false */
{
	struct node *node;
	struct data *p,*lastp;
	char *mem;
	LONG count,ptr,newcount;

	node   = (struct node *) lock->lock.fl_Key;
	count  = lock->cpos;

	/* find out where we're going */
	if (frompos == OFFSET_CURRENT)		
		dest += count;
	else if (frompos == OFFSET_END)
		dest += node->size;
	else if (frompos == OFFSET_BEGINNING) {
		/*NULL*/ ;
	} else {
		/* bad seek mode or invalid seek - don't change pos! */
seek_error:
		fileerr = ERROR_SEEK_ERROR;
		return -1;
	}

	/* no seek before start or past end */
	/* except for seek past end for truncate! */
	if (dest < 0 || (!truncate && dest > node->size))
		goto seek_error;

	/* we have position in file needed (dest) and current (count) */
	/* NOTE: lock->block cannot be NULL any longer */

	if (dest > count)
	{
		/* going farther into file */
		lastp = p = (struct data *) lock->block;
		ptr   = count - (lock->offset - FIRSTBUFFPOS);
	} else {
		/* going towards beginning of file */
		lastp = p = (struct data *) node->list;
		ptr = 0;
	}

	/* main seek loop */
	while (1) {
		if (p == NULL)
		{
			/* end of file */
			if (!truncate)
				goto seek_error;   /* should NEVER happen */

			/* extend file */
			/* first move to end of file */
			lock->block  = lastp;
			lock->offset = lastp->size + 1;
			lock->cpos   = node->size;

			/* get blank memory */
			mem = AllocMem(DATA_BLOCK_SIZE*4,MEMF_CLEAR);
			if (!mem)
				goto seek_error;

			/* write in datablock-sized chunks */
			/* write will add blocks as needed */
			while (ptr+(DATA_BLOCK_SIZE*4) < dest)
			{
				if (write(lock,(CPTR)mem,(DATA_BLOCK_SIZE*4)) !=
				    (DATA_BLOCK_SIZE*4))
				{
					FreeMem(mem,(DATA_BLOCK_SIZE*4));
					goto seek_error;
				}
				ptr += DATA_BLOCK_SIZE*4;
			}
			/* partial (final) block */
			newcount = write(lock,(CPTR)mem,dest-ptr);
			FreeMem(mem,DATA_BLOCK_SIZE*4);
			if (newcount != dest-ptr)
				goto seek_error;

			/* the write calls leave us at the end of the */
			/* extended file.  Exit with success. */
			return dest;
		}

		/* the meat of seek */
		/* a block with FIRSTBUFFPOS-1 size has no bytes in it */
		newcount = ptr + p->size - (FIRSTBUFFPOS-1);
		if (newcount >= dest)
			break; 		/* it's in this block */

		ptr = newcount;		/* remember size at block beginning */
		lastp = p;		/* remember last data block */
		p = p->next;		/* do next block */
	}

	/* seek successful.  Check for truncate. */
	/* have to check other locks on file since it can be shared! */
	if (truncate)
	{
		struct lock *curr;

		/* only bother with check if file being made smaller */
		if (dest < node->size)
		{
		    /* check for any lockers positioned further in file */
		    for (curr = BADDR(lock_list);
			 curr;
			 curr = BADDR(curr->lock.fl_Link))
		    {
			if (curr != lock)	/* don't check our own lock */
			{
			    if (curr->lock.fl_Key == lock->lock.fl_Key &&
			        curr->cpos > dest)
			    {
				/* it's past us on same file! */
				/* set truncate position to there */
				dest = curr->cpos;
				p = curr->block;
				ptr = dest + FIRSTBUFFPOS - curr->offset;
			    }
			}
		    }
		}

		/* we now know where we're going.  Adjust position and node */

		/* free the blocks */
		spaceused -= freelist((struct node *) p->next);
		p->next    = NULL;
		p->size    = dest-ptr + (FIRSTBUFFPOS-1);
		node->size = dest;

		lock->flags |= LOCK_MODIFY;		/* file was changed */

		/* return new end of file for SetFileSize! */
		count = dest;

		if (lock->cpos > dest)
		{
			/* must force file position to new, smaller size */
			goto do_seek;
		}
	} else {
do_seek:	/* real seek, change file position */
		lock->block  = p;
		lock->offset = dest-ptr + FIRSTBUFFPOS;  /* to next byte */
		lock->cpos   = dest;
	}

	return count;	/* return old position in file for Seek() */
}
@


36.8
log
@Return errors on bad seeks (oops)
@
text
@d99 1
a99 1
			return count;
@


36.7
log
@A bunch of fixes for handling 0-length files, renaming of variables to make them
more reasonable
@
text
@d44 1
a44 1
		return 0;
d66 1
a66 1
				goto seek_error;
@


36.6
log
@Chnages to setfilesize:
  works on shared_lock files
  if open by others, doesn't truncate shorter than the other's current position.
  returns position truncated to
  doesn't change current pos, unless truncated to less than curr pos (left
      at end in that case).
@
text
@d13 1
a13 1
seek (lock,poscount,frompos,truncate)
d15 1
a15 1
	LONG poscount;
d29 1
a29 1
		poscount += count;
d31 1
a31 1
		poscount += node->size;
d33 1
a33 5
		if (poscount < 0 ||
		    (!truncate && (poscount > node->size)))
			/* no seek before start or past end */
			/* except for seek past end for truncate! */
			goto seek_error;
d35 1
a35 1
		/* bad seek mode */
d41 3
a43 1
	if (!truncate && poscount == 0 && node->size == 0)
d46 2
a47 1
	/* we have position in file needed (poscount) and current (count) */
d49 1
a49 1
	if (poscount > count)
d65 1
a65 1
			if (!lastp || !truncate)
d80 2
a81 1
			while (ptr+(DATA_BLOCK_SIZE*4) < poscount)
d92 1
a92 1
			newcount = write(lock,(CPTR)mem,poscount-ptr);
d94 1
a94 1
			if (newcount != poscount-ptr)
d101 2
d105 1
a105 1
		if (newcount >= poscount)
d107 1
d120 1
a120 1
		if (poscount < node->size)
d130 1
a130 1
			        curr->cpos > poscount)
d134 1
a134 1
				poscount = curr->cpos;
d136 1
a136 1
				ptr = poscount + FIRSTBUFFPOS - curr->offset;
d147 2
a148 2
		p->size    = poscount-ptr + (FIRSTBUFFPOS-1);
		node->size = poscount;
d153 1
a153 1
		count = poscount;
d155 1
a155 1
		if (lock->cpos > poscount)
d163 2
a164 2
		lock->offset = poscount-ptr + FIRSTBUFFPOS;  /* to next byte */
		lock->cpos   = poscount;
@


36.5
log
@->block type
@
text
@a23 8
	/* require exclusive lock/open to truncate */
	/* FIX! one-writer?? */
	/* FIX! allow entension?!!!!! */
	if (truncate && lock->lock.fl_Access != EXCLUSIVE_LOCK)
	{
		goto seek_error;
	}

a109 4
	lock->block  = p;
	lock->offset = poscount-ptr + FIRSTBUFFPOS;  /* to next byte */
	lock->cpos   = poscount;

d111 1
d114 27
d144 2
a145 2
		p->size    = lock->offset-1;
		node->size = lock->cpos;
d148 14
d164 1
a164 1
	return count;	/* return old position in file */
@


36.4
log
@for rcs 4.x header change
@
text
@d79 1
a79 1
			lock->block  = (struct node *) lastp;
d118 1
a118 1
	lock->block  = (struct node *) p;
@


36.3
log
@new calls, transfer->write, etc
@
text
@@


36.2
log
@Speedups.
@
text
@d26 1
d68 2
d84 1
a84 1
			mem = AllocMem(DATA_BLOCK_SIZE,MEMF_CLEAR);
d89 1
a89 1
			while (ptr+DATA_BLOCK_SIZE < poscount)
d91 2
a92 3
				if (transfer(lock,(CPTR)mem,DATA_BLOCK_SIZE,
					     FALSE) !=
				    DATA_BLOCK_SIZE)
d94 1
a94 1
					FreeMem(mem,DATA_BLOCK_SIZE);
d97 1
a97 1
				ptr += DATA_BLOCK_SIZE;
d100 2
a101 2
			newcount = transfer(lock,(CPTR)mem,poscount-ptr,FALSE);
			FreeMem(mem,DATA_BLOCK_SIZE);
d105 1
a105 1
			/* the transfer calls leave us at the end of the */
@


36.1
log
@*** empty log message ***
@
text
@d34 1
d40 2
a41 1
		if (poscount < 0 || (!truncate && poscount > node->size))
d56 11
a66 2
	lastp = p = (struct data *) node->list;
	ptr   = 0;
d77 1
a77 1
			lock->offset = p->size + 1;
d107 1
a107 1
		/* a block with FIRSTBUFPOS-1 size has no bytes in it */
@
