head     36.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.7
date     91.01.22.19.48.18;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.09.13.14.36.24;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.06.11.45.46;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.05.05.23.07;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.02.20.20.33.32;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.17.54;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.34;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.7
log
@DateStamp cast
@
text
@/* rename.c */

#include "ram_includes.h"
#include "ram.h"

LONG
rename (from_dir,from_str,to_dir,to_str)
	struct lock *from_dir,*to_dir;
	char *from_str,*to_str;
{
	char to_name[MAX_FILENAME+1],from_name[MAX_FILENAME+1];
	struct node *from_dptr,*to_dptr,*from_node;
	struct lock *lock;
	int samename;

	/* locate original file */
	from_dptr = checklock(from_dir);
	if (from_dptr == NULL)
		return FALSE;

	/* we must return IS_SOFT_LINK errors from finddir */

	from_dptr = finddir(from_dptr,from_str,from_name);
	if (!from_dptr)
		return FALSE;
	if (!findentry(from_dptr,from_name,FALSE))	/* don't follow links!*/
		return FALSE;
	from_node = current_node;

	/* locate position for new file */
	to_dptr = checklock(to_dir);
	if (to_dptr == NULL)
		return FALSE;

	to_dptr = finddir(to_dptr,to_str,to_name);
	if (to_dptr == NULL)
		return FALSE;

	/* allow same name, but different cases */
	samename = (from_dptr == to_dptr &&
		    stricmp(from_name,to_name) == SAME);

	/* can't rename over existing file */
	if (!samename && findentry(to_dptr,to_name,FALSE))
	{
		fileerr = ERROR_OBJECT_EXISTS;
		return FALSE;
	}

	/* if destination already exists, is the destination a directory? */
	if (to_dptr->type < 0)			/* < 0 means file */
	{
		fileerr = ERROR_OBJECT_WRONG_TYPE;
		return FALSE;
	}

	/* is the source a directory?  If so, check for recursive rename */
	if (from_node->type >= 0)
	{
		/* directory - make sure it isn't being renamed into itself */
		struct node *tmp;

		for (tmp = to_dptr->back; tmp; tmp = tmp->back)
		{
			if (tmp == from_node)
			{
				fileerr = ERROR_OBJECT_IN_USE;
				return FALSE;
			}
		}
	}

	/* note I copied the code of rename from BCPL - it does get a shared */
	/* lock, even though the comment says exclusive - FIX! */

	/* get exclusive lock */
	lock = getlock(from_node,SHARED_LOCK);
	if (lock == NULL)
		return FALSE;

	/* check for name in use */
	if (!checkname(to_name))
	{
		goto free_exit;
	}

	/* check for naming self to self, or dir being named into itself */
	if (to_dptr == from_node)
	{
		fileerr = ERROR_OBJECT_IN_USE;
free_exit:	freelock(lock);
		return FALSE;
	}

	/* update the directory change date of the destination and source */
	DateStamp((struct DateStamp *) (to_dptr->date));
	DateStamp((struct DateStamp *) (from_node->back->date));

	/* unlink FROM slot */
	remove_node(from_node);

	/* link into new place */
	from_node->next = to_dptr->list;
	from_node->back = to_dptr;
	to_dptr->list   = from_node;


	strcpy(from_node->name,to_name);

	/* move old notifies to orphaned list */
	rem_notifies(from_node,TRUE);

	/* scan orphan list for nodes under new name and add to node */
	/* also notifies them all */
	find_notifies(from_node,TRUE);

	freelock(lock);

	return DOS_TRUE;
}
@


36.6
log
@Removed datestamp of root, added datestamps of source and dest
@
text
@d96 2
a97 2
	DateStamp(to_dptr->date);
	DateStamp(from_node->back->date);
@


36.5
log
@removed some dead code, made recursive directories (putting parent inside it's child) fail
@
text
@d87 1
a87 1
	/* check for naming self to self, or dir being name into itself */
d95 4
d107 1
a117 2

	DateStamp(root->date);
@


36.4
log
@for rcs 4.x header change
@
text
@a35 2
	if (!to_dptr)
		return FALSE;
d50 1
a50 1
	/* is the destination a directory? */
d55 16
@


36.3
log
@*** empty log message ***
@
text
@@


36.2
log
@Changes for links.  (unfinished, but working).
@
text
@d100 1
a100 1
	datstamp(root->date);
@


36.1
log
@*** empty log message ***
@
text
@d16 1
d21 1
a21 3
	to_dptr = checklock(to_dir);
	if (to_dptr == NULL)
		return FALSE;
a22 1
	/* locate original file */
d24 1
a24 1
	if (!findentry(from_dptr,from_name))
d26 2
d31 4
d36 2
d41 1
a41 1
	/* disallow same name, but different cases */
d46 1
a46 1
	if (!samename && findentry(to_dptr,to_name))
d52 2
a53 2
	/* don't let them rename a file onto another file */
	if (to_dptr->type == ST_FILE)
d60 1
a60 1
	/* lock, even though the comment says exclusive */
a80 4
	/* unlink FROM.  Call findentry again as previous delete may */
	/* have perturbed (??? REJ) */
	findentry(from_dptr,from_name);

d82 1
a82 1
	prev_node->next = from_node->next;
@
