head     36.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


36.10
date     91.01.10.16.40.47;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.12.07.04.08.44;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.12.02.07.16.57;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.11.21.04.55.16;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.09.13.17.46.18;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.08.09.19.18.02;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.05.30.18.09.44;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.05.05.23.24;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.20.20.39.01;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.41;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.10
log
@Funcdef.i removed
@
text
@*
* support.asm
* 
        INCLUDE "exec/types.i"
        INCLUDE "exec/nodes.i"
        INCLUDE "exec/lists.i"
        INCLUDE "exec/ports.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/tasks.i"
        INCLUDE "exec/memory.i"
        INCLUDE "exec/execbase.i"
        INCLUDE "libraries/dos.i"
        INCLUDE "libraries/dosextens.i"
        INCLUDE "libraries/dos_lib.i"

FUNCDEF	MACRO
	XREF	_LVO\1
	ENDM

        INCLUDE "exec/exec_lib.i"

callsys macro
        CALLLIB _LVO\1
        endm
        
        section text,code

	BASEREG	a4

	XREF _SysBase
	XREF _UtilityBase
	XREF _LVOStricmp
	XREF _LVOSMult32
	XREF _LVOSDivMod32

	XDEF @@BtoC
	XDEF @@CtoBcpy
	XDEF @@stricmp
	XDEF @@mult32
	XDEF @@div32
	XDEF @@rem32
	XDEF @@freelist
	XDEF @@NewList
	XDEF @@read
	XDEF @@freevec

*
* char *BtoC(char * __reg A0 objname, LONG __reg D0 bstr)
*
@@BtoC:
	asl.l	#2,d0		; also return value
	move.l	d0,a1		; source (bstr)
	move.l	a0,d0		; destination, also return code
	moveq	#0,d1
	move.b	(a1)+,d1	; length
	bra.s	2$

1$:	move.b  (a1)+,(a0)+	; a1 is one char ahead of a0
2$:	dbra	d1,1$

	clr.b	(a0)		; terminate 
				; d0 already has return value
	rts

*
* void CtoBcpy(char * __reg a0 dest, char * __reg a1 src)
*
@@CtoBcpy:
	move.l	a0,d0
	addq.l	#1,a0

1$:	move.b	(a1)+,(a0)+	; non-overlapping
	bne.s	1$

	move.l	d0,a1
	sub.l	a0,d0
	neg.w	d0		; may be 257
	subq.w	#2,d0
	move.b	d0,(a1)
	rts

*
* stricmp
*
@@stricmp:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)!!!!!!
	jsr	_LVOStricmp(a6)
	move.l	(sp)+,a6
	rts

*
* multiply d0 * d1, result in d0.
*
@@mult32:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)
	jsr	_LVOSMult32(a6)
	move.l	(sp)+,a6
	rts

*
* divide d0 by d1, result in d0, remainder in d1
*
@@div32:
	move.l	a6,-(sp)
	move.l	_UtilityBase,a6	; actually (a4)
	jsr	_LVOSDivMod32(a6)
	move.l	(sp)+,a6
	rts

@@rem32:	jsr	@@div32
	move.l	d1,d0
	rts

*
* long(d0) freelist (struct node * __reg a0 list);
* duplicate of unloadseg, mostly
* handles freelist(0);
* returns number of nodes freed
*
@@freelist:
	movem.l	d2/a2/a6,-(a7)	; save
	move.l	_SysBase,a6	; actually (a4)!!!!
	moveq	#0,d2
	move.l	a0,a2
1$:	move.l	a2,a1		; freevec takes arg in a1
	move.l	a1,d0		; end on null
	beq.s	2$
	move.l	(a2),a2		; next pointer
	jsr	_LVOFreeVec(a6)
	addq.l	#1,d2
	bra.s	1$
2$:	move.l	d2,d0
	movem.l	(a7)+,d2/a2/a6
	rts


*
* Stub routine to reduce code size
* freevec(void *ptr)
*
@@freevec:
	move.l	a6,-(sp)
	move.l	_SysBase,a6	; actually (a4)
	move.l	a0,a1		; freevec takes arg in a1
	jsr	_LVOFreeVec(a6)
	move.l	(sp)+,a6
	rts

*
* NewList(struct List *list)
*
@@NewList:
	NEWLIST	A0
	rts


*
* a0 lock, d0 buf, d1 buffsize
*

* equates for ram.h structures:
next		EQU	0
size		EQU	4
FIRSTBUFPOS	EQU	8

block		EQU	fl_SIZEOF
offset		EQU	fl_SIZEOF+4
cpos		EQU	fl_SIZEOF+8

@@read:
	movem.l	d2-d5/a2-a3/a5-a6,-(a7)
	move.l	_SysBase,a6		; actually (a4)!!!!

	; get args
	move.l	a0,a2			; lock
	move.l	d0,a5			; buffer ptr
	move.l	d1,d5			; bsize (bytes still needed)

	move.l	offset(a2),d3		; offset (in current block)
	move.l	block(a2),a3		; pos (current block) (cannot be null)
	move.l	size(a3),d2		; pos->size (max chars in block)

	moveq	#0,d4			; count of characters read so far
	bra.s	loop_test

loop:
	move.l	d2,d0			; are there any characters in block?
	sub.l	d3,d0
	addq.l #1,d0			; avail = max - offset + 1
	bgt.s	have_chars

	;-- no characters left in this block, find another
	move.l	next(a3),d0		; next is at offset 0!
	beq.s	loop_break		; EOF - return what we got
	move.l	d0,a3			; new block ptr (pos)
	move.l	size(a3),d2		; all characters are available for read
	moveq	#FIRSTBUFPOS,d3		; start position in block (offset)
	bra.s 	loop			; will recalculate available chars

have_chars:
	;-- # of characters available in block is in d0
	cmp.l	d0,d5			; calculate # to xfer (needed - avail)
	bge.s	use_all_available	; need more than we have
	move.l	d5,d0			; have more in block than we need

use_all_available:
	; set up xfer args (d0 has # to xfer)
	move.l	a3,a0			; source 
	add.l	d3,a0			; offset (pos + offset)	
	move.l	a5,a1			; destination
	add.l	d4,a1			; count  (buf + count)

	; bump counts before xfer
	add.l	d0,d4			; count  += tsize
	add.l	d0,d3			; offset += tsize
	sub.l	d0,d5			; needed -= tsize

	jsr	_LVOCopyMem(a6)		; a0 - src, a1 - dest, d0 - count

loop_test:
	tst.l	d5			; still need characters?
	bgt.s	loop

loop_break:
	; save end positions in lock
	move.l	a3,block(a2)
	move.l	d3,offset(a2)
	add.l	d4,cpos(a2)		; current seek position += count
	move.l	d4,d0			; return count

	movem.l	(a7)+,d2-d5/a2-a3/a5-a6
	rts

	END
@


36.9
log
@Added utility lib math routines, freevec stub
@
text
@d14 6
a19 1
        INCLUDE "exec/funcdef.i"
a20 1
        INCLUDE "libraries/dos_lib.i"
@


36.8
log
@use tuility Stricmp
@
text
@d29 2
d35 3
d41 1
d89 24
d134 12
@


36.7
log
@Changes due to all files now having at least a 0-length data block
@
text
@d27 2
d73 1
a73 2
* int __regargs stricmp (char * s1, char * s2)
* strcmp ignoring case, <0 = s1<s2, 0 = equal, >0 = s1>s2
d76 4
a79 50
	movem.l	d2/d3,-(a7)	; d3 is for check_sub
	moveq	#0,d0		; clear high 3 bytes, set equal if len=0
caseloop:
	move.b	(a0)+,d1	; Deal with either string ending first
	move.b	(a1)+,d2	; must fetch both for comparison, even if d0==0
	beq.s	make_res	; exit if *s2 == 0
	move.b	d1,d0
	beq.s	make_res	; exit if *s1 == 0

	bsr.s	check_sub
	beq.s	1$
	sub.b	#'a'-'A',d1
1$:
	move.b	d2,d0
	bsr.s	check_sub
	beq.s	2$
	sub.b	#'a'-'A',d2

2$:
	cmp.b	d2,d1		; do the comparison 
	beq.s	caseloop	; check next character

make_res:
	move.b	d1,d0
	sub.b	d2,d0		; generate return value
exit:
	movem.l	(a7)+,d2/d3
	rts

*
* returns d0 = 0 if no sub needed, = 1 if needed (cc's set!!!!)
* can't touch d1/d2, d3 is scratch, d0 has character/return
*
check_sub:
	cmp.b	#$f7,d0		; these are special
	beq.s	no
	move.w	#'za',d3	; Z/z and A/a
	bclr.b	#7,d0		; clear high bit
	beq.s	normal_char
	move.w	#'~`',d3	; Þ/þ and À/à are the highest in the upper area
				; (~ = þ, ' = à minus bit 7)
normal_char:
	cmp.b	d3,d0		; a or à(`)
	blt.s	no
	lsr.l	#8,d3		; get upper bound
	cmp.b	d3,d0		; z or þ(~)
	bgt.s	no
	moveq	#1,d0
	rts
no:	moveq	#0,d0
@


36.6
log
@Fixed case comparison routine
@
text
@d181 1
a181 4
	move.l	block(a2),a3		; pos (current block)

	move.l	a3,d0			; test pos
	beq.s	null_pos		; empty file, return 0
d190 1
a190 1
	addq.l	#1,d0			; avail = max - offset + 1
d194 1
a194 1
	move.l	(a3),d0			; next is at offset 0!
a230 1
	bra.s	read_exit
a231 3
null_pos:
	move.l	#0,d0			; empty file
read_exit:
@


36.5
log
@international case-insensitive stricmp
@
text
@d75 1
a75 1
	move.l	d2,-(a7)
d101 1
a101 1
	move.l	(a7)+,d2
d106 1
d111 7
a117 4
	cmp.b	#$ff,d0
	beq.s	no
	and.b	#$7f,d0		; rest are the same regardless
	cmp.b	#'a',d0
d119 2
a120 1
	cmp.b	#'z',d0
@


36.4
log
@cape changes
@
text
@d71 2
a72 2
* int stricmp (char * __reg a0 s1, char * __reg a1 s2)
* strcmp ignoring case, 0 = equal !0 = not equal
d75 2
a76 1
	moveq	#0,d0
d78 2
a79 2
	move.b	(a0)+,d0	; is *s1 == 0, and *s2 != 0, will fall out
	move.b	(a1)+,d1	; the bottom.
d81 1
a81 1
	tst.b	d0
d84 2
a85 10
	cmp.b	#'a',d0
	blt.s	check2
	cmp.b	#'z',d0
	bgt.s	check2
	sub.b	#'a'-'A',d0
check2:
	cmp.b	#'a',d1
	blt.s	cmpit
	cmp.b	#'z',d1
	bgt.s	cmpit
d87 5
a91 3
cmpit:
	cmp.b	d1,d0
	beq.s	caseloop
d93 4
d98 22
a119 1
	sub.b	d1,d0
@


36.3
log
@for rcs 4.x header change
@
text
@a3 2
* asm -iINCLUDE: -oobj/ support.a
*
d24 2
d110 1
a110 1
	move.l	_SysBase(a4),a6
d148 1
a148 1
	move.l	_SysBase(a4),a6
@


36.2
log
@Most things removed (new calls replace them)
@
text
@@


36.1
log
@*** empty log message ***
@
text
@d28 1
a28 2
	XDEF @@BtoCstr
	XDEF @@CtoBstr
a30 3
	XDEF @@getvecclear
	XDEF @@getvec
	XDEF @@freevec
d33 1
d36 1
a36 1
* char *BtoCstr(LONG __reg D0 bstr)
d38 1
a38 1
@@BtoCstr:
d40 2
a41 2
	move.l	d0,a0
	move.l	a0,a1
d50 1
a50 1
	move.l	d0,a0		; return value
a53 22
* BPTR CtoBstr(BPTR __reg D0 str)
*
@@CtoBstr:
	asl.l	#2,d0		; BPTR!
	move.l	d0,a0
	move.l	a0,a1

1$:	move.b	(a0),d1		; overlapping copy
	move.b	d0,(a0)+	; be very careful
	move.b	d1,d0
	bne.s	1$

	sub.l	a1,a0		; figure out size
	subq	#1,a0
	move.l	a0,d1
	move.b	d1,(a1)		; size byte

	move.l	a1,d0
	lsr.l	#2,d0		; return value (BPTR)
	rts

*
a102 45
* char *getvecclear(LONG __reg d0 vecsize)
*
@@getvecclear:
	move.l	#MEMF_PUBLIC!MEMF_CLEAR,D1
	bra.s	vec_common

*
* char *getvec(LONG __reg d0 vecsize)
*
@@getvec:
	moveq	#MEMF_PUBLIC,D1
vec_common:
	addq.l	#2,d0		; for size and 1 spare (urk)
	asl.l	#2,d0		; longwords to bytes
	move.l	a6,-(a7)
	move.l	d0,-(A7)	; save size
	move.l	_SysBase(a4),a6
	jsr	_LVOAllocMem(a6)
	move.l	D0,A0
	move.l	(a7)+,d1
	move.l	A0,D0
	beq.s	gv_exit

	move.l	d1,(a0)+	; set size of allocation
	move.l	a0,d0		; return ptr+4

gv_exit:
	move.l	(a7)+,a6
	rts

*
* void freevec(char * __reg a0 vec)
*
@@freevec:
	move.l	a0,d0			; since bcpl assumes freevec(0) ok
	beq.s	nofree
	move.l  a6,-(a7)
	move.l	-(a0),d0
	move.l	a0,a1			; stupid FreeMem!  Kix are for trids!
	move.l	_SysBase(a4),a6
	jsr	_LVOFreeMem(a6)
	move.l  (a7)+,a6
nofree:	rts

*
d109 2
a110 1
	movem.l	d2/a2,-(a7)	; save
d113 2
a114 2
1$:	move.l	a2,a0
	move.l	a0,d0		; end on null
d117 1
a117 1
	jsr	@@freevec(PC)
d121 1
a121 1
	movem.l	(a7)+,d2/a2
d130 85
@
