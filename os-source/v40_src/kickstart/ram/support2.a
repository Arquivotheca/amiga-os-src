*
*	support2.a
*

        INCLUDE "exec/types.i"
        INCLUDE "exec/nodes.i"
        INCLUDE "exec/lists.i"
        INCLUDE "exec/ports.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/tasks.i"
        INCLUDE "exec/memory.i"
        INCLUDE "exec/execbase.i"
        INCLUDE "libraries/dos.i"
        INCLUDE "libraries/dosextens.i"
        INCLUDE "libraries/dos_lib.i"

FUNCDEF	MACRO
	XREF	_LVO\1
	ENDM

        INCLUDE "exec/exec_lib.i"

        section text,code

	XREF _MyPort
	XREF _SysBase
	XREF _DOSBase

	XDEF @returnpkt
	XDEF @splitname
	XDEF @datstamp

;==============================================================================
; ReturnPkt( pkt, res1, res2 )
;	      a0   d0    d1
;
; modified by REJ
; Send a packet back to the caller
;==============================================================================
@returnpkt:
		move.l	a6,-(A7)		save regs
	        cmpa.w	#0,a0			make sure there is a packet
		beq.s	1$			nope, not there
		movem.l	d0/d1,dp_Res1(a0)	stash return codes
		movea.l	a0,a1			stash packet address
*		move.l	dp_Link(a1),d0		is message address valid ?
*		beq.s	1$			nope, return an error
		move.l	_MyPort(a4),d0		get our message port address
		move.l	dp_Port(a1),a0		port we will PutMsg to
		move.l	d0,dp_Port(a1)		point packet back at our port
		movea.l	dp_Link(a1),a1		get the message pointer
**		move.l	a2,LN_NAME(a1)		make sure it points to packet
		move.l	_SysBase(a4),A6
		jsr	_LVOPutMsg(a6)		send it on its way
		moveq.l	#-1,d0			return no error
1$:		move.l	(A7)+,a6
		rts

;==============================================================================
; offset = SplitName( prefix,char,string,ptr )
;   d0			a0    d0    a1   d1.w
;
; Basically, we search the given string starting at the offset in d1.  If we
; find the given character, then we return the offset to the character after.
; A maximum of 30 characters get copied to prefix after we've searched string.
; If the given character is not found then 0 is returned but a maximum of 30
; characters will still have been copied across to prefix.
; Converted from BSTRs to CSTRs. REJ 
;==============================================================================
@splitname:	move.l	d3,-(A7)
		moveq.l	#0,d3			d3 is the copy length
		clr.b	(a0)			no string copied yet

		;-- d1 is 1-based!!!
		lea.l	-1(a1,d1.w),a1		where to start searching
		move.w	d1,-(A7)		save current pointer

10$:		cmpi.w	#30,d3			can we copy it ?
		bgt.s	20$			no, string is already 30 chars
		move.b	(a1)+,d1		get the character
		move.b	d1,(a0)+		store in prefix
		beq.s	25$			C strings terminate in null
		addq.w	#1,d3			bump the counter
		cmp.b	d1,d0			is this our character ?
		beq.s	30$			yep, string is copied
		bra.s	10$

20$		clr.b	(a0)			terminate string
25$		moveq.l	#0,d0			ran off end of string
		addq.l	#2,A7			scrap value on stack
		bra.s	50$			and all done

		;-- we have a match - write over character
30$:		clr.b	-1(a0)			Make sure Cstr is terminated
		add.w	(A7)+,d3		return new pointer
40$:		move.l	d3,d0			return result in d0
50$:		move.l	(A7)+,d3
		rts


;==============================================================================
; DatStamp( buffer )
;	      a0
;
;==============================================================================
@datstamp:
		move.l	a6,-(a7)
		move.l	a0,d1
		move.l	_DOSBase(a4),a6
		jsr	_LVODateStamp(a6)
		move.l	(a7)+,a6
		rts

		END
