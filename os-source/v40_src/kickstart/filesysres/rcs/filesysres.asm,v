head     36.13;
branch   ;
access   ;
symbols  V37_1:36.8 V36_22:36.8 V36_20:36.7 V36_19:36.7 V36_18:36.6 V36_17:36.5 V36_16:36.4 V36_11:36.3 V36_10:36.2 V36_7:36.1;
locks    ; strict;
comment  @*   @;


36.13
date     93.02.05.13.49.05;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     92.12.06.23.11.56;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     92.07.14.02.37.21;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     92.05.16.23.36.04;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     91.04.25.03.14.59;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.04.11.54.42;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.04.13.11.35.50;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.02.10.56.05;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     90.01.09.11.35.56;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.01.03.09.13.47;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.19.13.26.40;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.13.21.08.24;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.12.13.17.06.55;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     89.12.13.16.51.40;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.13
log
@Pick up fs revision automatically
@
text
@**
**	$Id: filesysres.asm,v 36.12 92/12/06 23:11:56 jesup Exp $
**
**      FileSystem resource module
**
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**

	SECTION	filesysres,code

**	Includes

	INCLUDE	"exec/types.i"
	INCLUDE	"exec/nodes.i"
	INCLUDE	"exec/resident.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"exec/initializers.i"

	INCLUDE	"filesysres.i"
	INCLUDE	"filesysres_rev.i"
	INCLUDE "src/kickstart/filesysres/fs_rev.i"

**	Macros

XLVO	MACRO
	XREF	_LVO\1
	ENDM

CALLLVO	MACRO
		jsr	_LVO\1(a6)
	ENDM

**	Imports

	XLVO	AddResource
	XLVO	AllocMem
	XLVO	OpenResource


**	Locals

DOS5TYPE	EQU	$444f5305		; DOS\5
DOS4TYPE	EQU	$444f5304		; DOS\4
DOS3TYPE	EQU	$444f5303		; DOS\3
DOS2TYPE	EQU	$444f5302		; DOS\2
DOS1TYPE	EQU	$444f5301		; DOS\1
		;	36.03 is highest L:FastFileSystem released, so this
		;	must be bigger than that.  The fs revision in 2.0
		;	was 36.223 when I chose 36.200 here.

; comes from filesystem revision automatically
DOS1VERSION	EQU	FS_REV			; version.revision
DOS1SIZEOF	EQU	fse_PatchFlags+4

UNI1TYPE	EQU	$554e4901		; UNI\1
UNI1VERSION	EQU	0			; version
UNI1SIZEOF	EQU	fse_Handler+4


 STRUCTURE  FSRData,FileSysResource_SIZEOF	; file system resource itself
    STRUCT  fsrd_DOS5,DOS1SIZEOF		; entry for DOS\5
    STRUCT  fsrd_DOS4,DOS1SIZEOF		; entry for DOS\4
    STRUCT  fsrd_DOS3,DOS1SIZEOF		; entry for DOS\3
    STRUCT  fsrd_DOS2,DOS1SIZEOF		; entry for DOS\2
    STRUCT  fsrd_DOS1,DOS1SIZEOF		; entry for DOS\1
    STRUCT  fsrd_UNI1,UNI1SIZEOF		; entry for UNI\1
    LABEL   FSRData_SIZEOF


**	Assumptions

	IFNE	UNI1VERSION
	FAIL	"UNI1VERSION not zero, recode to test version"
	ENDC
	IFNE	((fse_Handler-fse_Type)/4)/8
	FAIL	"fse_Handler not in low byte of fse_PatchFlags, recode"
	ENDC


******* FileSystem.resource/--background-- ***************************
*
*   PURPOSE
*
*	The FileSystem.resource is where boot disk drivers rendezvous
*	to share file system code segments for partitions specified by
*	dos type.  Prior to V36, it was created by the first driver
*	that needed to use it.  For V36, its creation is ensured by the
*	rom boot process.
*
*   CONTENTS
*
*	The FileSystem.resource is described in the include file
*	resources/filesysres.h.  The nodes on it describe how to
*	algorithmically convert the result of MakeDosNode (from the
*	expansion.library) to a node appropriate for the dos type.
*
*	FileSysEntry
*	    fse_Node		on fsr_FileSysEntries list
*				ln_Name is of creator of this entry
*	    fse_DosType		DosType of this FileSys: e.g. 0x444f5301
*				for the fast file system.
*	    fse_Version		high word is the version, low word is
*				the revision.
*	    fse_PatchFlags	bits set for those of the following that
*				need to be substituted into a standard
*				device node for this file system: e.g.
*				$180 for substitute SegList & GlobalVec
*	    fse_Type		device node type: zero
*	    fse_Task		standard dos "task" field
*	    fse_Lock		must be zero
*	    fse_Handler		for V36, if bit 31 is set, this is not
*				an AmigaDOS partition.
*	    fse_StackSize	stacksize to use when starting task
*	    fse_Priority	task priority when starting task
*	    fse_Startup		startup msg: FileSysStartupMsg for disks
*	    fse_SegList		segment of code to run to start new task
*	    fse_GlobalVec	BCPL global vector when starting task
*
*	no more entries need exist than those implied by fse_PatchFlags,
*	so entries do not have a fixed size.  For V36, for example, the
*	entry for the fast file system (fse_DosType 0x444f5301)
*	contains a zero fse_PatchFlags, and thus no entries beyond that.
*
*   NOTES
*	For V36, rom code will ensure that an entry for DOS\1 (0x444f5301)
*	exists with at least version 36.0, and for UNI\0 (0x554e4900) with
*	at least version 0.0.  The latter is marked as a non-AmigaDOS
*	partition.
*
**********************************************************************

residentPR:
		dc.w	RTC_MATCHWORD
		dc.l	residentPR
		dc.l	fsrEndModule
		dc.b	RTF_COLDSTART
		dc.b	VERSION
		dc.b	NT_RESOURCE
		dc.b	80
		dc.l	fsrName
		dc.l	fsrID
		dc.l	fsrInitCode

fsrName:
		dc.b	'FileSystem.resource',0

fsrID:
		VSTRING

;------	findEntry ----------------------------------------------------
;
;   INPUTS
;   d2	entry type
;   a5	filesysres
;
;   RESULTS
;   ccr	non-zero indicates found
;   a2	entry if found
;
findEntry:
		;-- see if an entry for d2 already exists
		move.l	fsr_FileSysEntries(a5),a2
feSearchType:
		move.l	(a2),d0
		beq.s	feFail
		cmp.l	fse_DosType(a2),d2
		beq.s	feSuccess
		move.l	d0,a2
		bra.s	feSearchType

feSuccess:
		moveq	#1,d0

feFail:
		rts


;------	createEntry --------------------------------------------------
;
;   INPUTS
;   d0	entry size
;   a5	filesysres
;   a6  SysBase
;
;   RESULTS
;   ccr	non-zero indicates created
;   a2	entry if created
;
createEntry:
		move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1
		CALLLVO	AllocMem
		tst.l	d0
		beq.s	ceDone

		move.l	d0,a2
		;--	addtail this node to the resource
		lea	fsr_FileSysEntries+MLH_TAILPRED(a5),a0
		move.l	(a0),a1		; (get prev last node)
		move.l	a2,(a0)		; patch list tail back to this node
		subq.l	#4,a0
		movem.l	a0/a1,(a2)	; patch this node to list tail and
					;   to prev last node
		move.l	a2,(a1)		; patch this to prev last node succ

ceDone:
		rts


;------	updateEntry --------------------------------------------------
;
;   INPUTS
;   d1	entry version
;   d2	entry type
;   a2	entry
;
updateEntry:
		move.l	d2,fse_DosType(a2)
		move.l	d1,fse_Version(a2)
		clr.l	fse_PatchFlags(a2)
		lea	fsrID(pc),a0
		move.l	a0,LN_NAME(a2)
		rts


;------ fsrInitCode --------------------------------------------------
fsrInitCode:
		movem.l	d2/a2-a3/a5,-(a7)
		;-- see if the resource already exists
		lea	fsrName(pc),a1
		CALLLVO	OpenResource

		tst.l	d0
		beq.s	ficCreateResource
		move.l	d0,a5

		;-- ensure DOS\1 entry >= 36.0 exists
		move.l	#DOS5TYPE,d2
fic_dosloop:
		bsr.s	findEntry
		bne.s	ficFoundDOS1

		moveq	#DOS1SIZEOF,d0
		bsr.s	createEntry
		beq.s	ficUNI1		; (unexpected) memory failure

		;--	have DOS\1 entry, compare versions
ficFoundDOS1:
		move.l	#DOS1VERSION,d1
		cmp.l	fse_Version(a2),d1
		ble.s	fic_looptest	; (newly created always drops thru)

		;--	overwrite this entry in-place with better one from rom
ficUpdateDOS1:
		bsr.s	updateEntry

fic_looptest:	subq.b	#1,d2		; down to DOS\1
		bne.s	fic_dosloop

		;-- ensure UNI\1 entry >= 0.0 exists
ficUNI1:
		move.l	#UNI1TYPE,d2
		bsr	findEntry
		bne.s	ficDoneNC

		moveq	#UNI1SIZEOF,d0
		bsr.s	createEntry
		beq.s	ficDoneNC	; (unexpected) memory failure

		moveq	#UNI1VERSION,d1
		bsr	updateEntry
		bset	#((fse_Handler-fse_Type)/4),fse_PatchFlags+3(a2)
		bset	#7,fse_Handler(a2)

ficDoneNC:
		moveq	#0,d0		; show no resource created here

ficDone:
		movem.l	(a7)+,d2/a2-a3/a5
		rts


		;-- create the FileSystem.resource
ficCreateResource:
		move.l	#FSRData_SIZEOF,d0
		move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1
		CALLLVO	AllocMem

		tst.l	d0
		beq.s	ficDoneNC

		move.l	d0,a5

		move.b	#NT_RESOURCE,LN_TYPE(a5)

		lea	fsrName(pc),a0
		move.l	a0,LN_NAME(a5)

		lea	fsrID(pc),a0
		move.l	a0,fsr_Creator(a5)

		lea	fsr_FileSysEntries(a5),a3
		NEWLIST	a3			; save a3 for AddTails

		lea	fsrd_DOS5(a5),a2
		move.l	#DOS5TYPE,d2
dosloop:
		move.l	#DOS1VERSION,d1
		bsr	updateEntry
		move.l	a3,a0
		move.l	a2,a1
		ADDTAIL				; add to resource list
		add.w	#DOS1SIZEOF,a2		; next entry
		subq.b	#1,d2			; dos5->dos1
		bne.s	dosloop

		lea	fsrd_UNI1(a5),a2
		move.l	#UNI1TYPE,d2
		moveq	#UNI1VERSION,d1
		bsr	updateEntry
		move.l	a3,a0
		move.l	a2,a1
		ADDTAIL				; add to resource list
		bset	#((fse_Handler-fse_Type)/4),fse_PatchFlags+3(a2)
		bset	#7,fse_Handler(a2)

		move.l	a5,a1
		CALLLVO	AddResource

		move.l	a5,d0
		bra	ficDone


fsrEndModule:

	END
@


36.12
log
@Bumped fs version to 29
@
text
@d2 1
a2 1
**	$Id: filesysres.asm,v 36.11 92/07/14 02:37:21 jesup Exp Locker: jesup $
d22 1
d52 2
a53 2
; FIX!!!! this should come from src/kickstart/fs/fs_rev.i!!!!!
DOS1VERSION	EQU	(39<<16)+29		; version.revision
@


36.11
log
@n
fs now 39.17
@
text
@d2 1
a2 1
**	$Id: filesysres.asm,v 36.10 92/05/16 23:36:04 jesup Exp Locker: jesup $
d52 1
a52 1
DOS1VERSION	EQU	(39<<16)+17		; version.revision
@


36.10
log
@Added dos\4 and dos\5.  We need to grab the FS version numbers
directly!
@
text
@d2 1
a2 1
**	$Id: filesysres.asm,v 36.9 91/04/25 03:14:59 jesup Exp Locker: jesup $
d52 1
a52 1
DOS1VERSION	EQU	(39<<16)+11		; version.revision
@


36.9
log
@Added dos\2 and dos\3.  Uni\0 changed to uni\1 (which is what the
unix guys are using).  rev numbers for dos1-3 are the same.  Use
NEWLIST and ADDTAIL instead of rolling it directly (ugly, though small).
@
text
@d2 1
a2 1
**	$Id: filesysres.asm,v 36.8 90/05/04 11:54:42 kodiak Exp Locker: jesup $
d42 2
d50 3
a52 1
DOS1VERSION	EQU	(36<<16)+200		; version.revision
d61 2
d237 1
a237 1
		move.l	#DOS3TYPE,d2
d304 2
a305 2
		lea	fsrd_DOS3(a5),a2
		move.l	#DOS3TYPE,d2
d313 1
a313 1
		subq.b	#1,d2			; dos3->dos1
@


36.8
log
@bump DOS1VERSION from 36.0 to 36.200 because there was an
L:FastFileSystem released with 36.03 that must be exceeded.
@
text
@d2 1
a2 1
**	$Id: filesysres.asm,v 36.7 90/04/13 11:35:50 kodiak Exp Locker: kodiak $
d42 2
d51 3
a53 3
UNI0TYPE	EQU	$554e4900		; UNI\0
UNI0VERSION	EQU	0			; version
UNI0SIZEOF	EQU	fse_Handler+4
d57 2
d60 1
a60 1
    STRUCT  fsrd_UNI0,UNI0SIZEOF		; entry for UNI\0
d66 2
a67 2
	IFNE	UNI0VERSION
	FAIL	"UNI0VERSION not zero, recode to test version"
d221 1
a221 1
		movem.l	d2/a2/a5,-(a7)
d231 2
a232 1
		move.l	#DOS1TYPE,d2
d238 1
a238 1
		beq.s	ficUNI0		; (unexpected) memory failure
d244 1
a244 1
		ble.s	ficUNI0		; (newly created always drops thru)
d250 2
d253 3
a255 3
		;-- ensure UNI\0 entry >= 0.0 exists
ficUNI0:
		move.l	#UNI0TYPE,d2
d259 1
a259 1
		moveq	#UNI0SIZEOF,d0
d263 1
a263 1
		moveq	#UNI0VERSION,d1
d272 1
a272 1
		movem.l	(a7)+,d2/a2/a5
d278 1
a278 1
		moveq	#FSRData_SIZEOF,d0
d295 6
a300 2
		lea	fsrd_DOS1(a5),a2
		move.l	#DOS1TYPE,d2
d303 1
d305 8
a312 3
		lea	fsrd_UNI0(a5),a2
		move.l	#UNI0TYPE,d2
		moveq	#UNI0VERSION,d1
d314 3
a318 9
		move.l	a2,a0
		lea	fsr_FileSysEntries(a5),a2

		; init fsr_FileSysEntries with fsrd_DOS1 & fsrd_UNI0 on it
		movem.l	a0/a2,(a1)	; DOS1 node
		move.l	a1,(a2)+	; list head
		move.l	a0,LN_PRED(a2)	; list tailpred
		move.l	a2,(a0)+	; UNI0 succ
		move.l	a1,(a0)		; UNI0 pred
d324 1
a324 1
		bra.s	ficDone
@


36.7
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d43 4
a46 1
DOS1VERSION	EQU	VERSION<<16		; version in high word
@


36.6
log
@for rcs 4.x header change
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/filesysres/RCS/filesysres.asm,v 36.5 90/01/09 11:35:56 kodiak Exp Locker: kodiak $
@


36.5
log
@change UNX\0 to UNI\0
also, tested code to check and substitute higher versions if resource exists
@
text
@d2 1
a2 1
**	$Header: filesysres.asm,v 36.4 90/01/03 09:13:47 kodiak Exp $
@


36.4
log
@first cut at UNX\0 node
@
text
@d2 1
a2 1
**	$Header: filesysres.asm,v 36.3 89/12/19 13:26:40 kodiak Exp $
d46 3
a48 3
UNX0TYPE	EQU	$554e5800		; UNX\0
UNX0VERSION	EQU	0			; version
UNX0SIZEOF	EQU	fse_Handler+4
d53 1
a53 1
    STRUCT  fsrd_UNX0,UNX0SIZEOF		; entry for UNX\0
d59 2
a60 2
	IFNE	UNX0VERSION
	FAIL	"UNX0VERSION not zero, recode to test version"
d113 1
a113 1
*	exists with at least version 36.0, and for UNX\0 (0x554e5800) with
d230 1
a230 1
		beq.s	ficUNX0		; (unexpected) memory failure
d236 1
a236 1
		ble.s	ficUNX0		; (newly created always drops thru)
d243 3
a245 3
		;-- ensure UNX\0 entry >= 0.0 exists
ficUNX0:
		move.l	#UNX0TYPE,d2
d249 1
a249 1
		moveq	#UNX0SIZEOF,d0
d253 1
a253 1
		moveq	#UNX0VERSION,d1
d290 3
a292 3
		lea	fsrd_UNX0(a5),a2
		move.l	#UNX0TYPE,d2
		moveq	#UNX0VERSION,d1
d299 1
a299 1
		; init fsr_FileSysEntries with fsrd_DOS1 & fsrd_UNX0 on it
d303 2
a304 2
		move.l	a2,(a0)+	; UNX0 succ
		move.l	a1,(a0)		; UNX0 pred
@


36.3
log
@autodoc update
@
text
@d2 1
a2 1
**	$Header: filesysres.asm,v 36.2 89/12/13 21:08:24 kodiak Exp $
d40 1
a40 3
 STRUCTURE  FSRData,FileSysResource_SIZEOF	; file system resource itself
    STRUCT  fsrd_DOS1,fse_PatchFlags+4		; entry for DOS\1
    LABEL   FSRData_SIZEOF
d44 1
d46 21
d111 6
d137 76
d214 1
d220 2
a221 1
		beq.s	fsrCreateResource
d223 4
a226 11
		;-- see if an entry for DOS\1 already exists
		move.l	d0,a0
		lea	fsr_FileSysEntries(a0),a0
		move.l	(a0),a1
fsrSearchDOS1:
		move.l	(a1),d0
		beq.s	fsrCreateEntry
		cmp.l	#DOS1TYPE,fse_DosType(a1)
		beq.s	fsrFoundDOS1
		move.l	d0,a1
		bra.s	fsrSearchDOS1
d228 3
a230 4
		;--	found DOS\1 entry, compare versions
fsrFoundDOS1:
		cmp.l	#DOS1VERSION,fse_Version(a1)
		bge.s	fsrDone		; found more recent version than rom
d232 6
d239 2
a240 1
		bra.s	fsrUpdateEntry
d243 5
a247 9
		;-- create DOS\1 entry in existing resource
fsrCreateEntry:
		move.l	a0,-(a7)
		moveq	#fse_PatchFlags+4,d0
		move.l	#MEMF_CLEAR!MEMF_PUBLIC,d1
		CALLLVO	AllocMem
		move.l	(a7)+,a0
		tst.l	d0
		beq.s	fsrDone
d249 3
a251 7
		move.l	d0,a1
		;--	add this node to the resource (preserves a1)
		move.l  (a0),d0
		move.l  a1,(a0)
		movem.l d0/a0,(a1)
		move.l  d0,a0
		move.l  a1,LN_PRED(a0)
d253 4
d258 1
a258 1
fsrUpdateEntry:
a259 1
		move.l	d0,fse_PatchFlags(a1)
d261 2
a262 7
		;--	finish DOS\1 entry initialization
fsrWriteEntry:
		move.l	#DOS1TYPE,fse_DosType(a1)
		move.l	#DOS1VERSION,fse_Version(a1)
		lea	fsrID(pc),a0
		move.l	a0,LN_NAME(a1)
fsrDone:
d267 1
a267 1
fsrCreateResource:
d273 1
a273 1
		beq.s	fsrDone
d275 1
a275 1
		move.l	d0,a1
d277 1
a277 1
		move.b	#NT_RESOURCE,LN_TYPE(a1)
d280 1
a280 1
		move.l	a0,LN_NAME(a1)
d283 1
a283 1
		move.l	a0,fsr_Creator(a1)
d285 13
a297 7
		lea	fsr_FileSysEntries(a1),a0
		lea	fsrd_DOS1(a1),a1
		; initialize fsr_FileSysEntries with fsrd_DOS1 on it.
		move.l	a0,4(a1)
		move.l	a1,(a0)+
		move.l	a0,(a1)
		move.l	a1,4(a0)
d299 8
a306 2
		movem.l	d0/a1,-(a7)
		move.l	d0,a1
d308 3
a310 2
		movem.l	(a7)+,d0/a1
		bra.s	fsrWriteEntry
@


36.2
log
@look for preexisting resource and use it if it exists
@
text
@d2 1
a2 1
**	$Header: filesysres.asm,v 36.1 89/12/13 17:06:55 kodiak Exp $
d47 44
@


36.1
log
@don't use AUTOINIT
@
text
@d2 1
a2 1
**	$Header$
d37 1
d44 2
d68 63
d136 1
a136 1
		beq.s	fsricDone
a146 1
		move.l	a0,fsrd_DOS1+LN_NAME(a1)
a147 3
		move.l	#$444f5301,fsrd_DOS1+fse_DosType(a1)	; DOS\1
		move.l	#$00240000,fsrd_DOS1+fse_Version(a1)	; 36.0

d156 1
a156 1
		move.l	d0,-(a7)
d159 2
a160 1
		move.l	(a7)+,d0
a161 2
fsricDone:
		rts
@


36.0
log
@using AUTOINIT, which is not valid for this resource
@
text
@d17 1
d23 1
d25 14
d50 1
a50 1
		dc.b	RTF_AUTOINIT!RTF_COLDSTART
d56 1
a56 1
		dc.l	fsrInitTable
d64 4
d69 2
a70 2
fsrInitFuncTable:
		dc.l	-1
d72 1
a72 7
fsrInitStruct:
*	;------ Initialize the resource
		INITLONG    fsr_Creator,fsrID
		INITLONG    fsrd_DOS1+LN_NAME,fsrID
		INITLONG    fsrd_DOS1+fse_DosType,$444f5301	; DOS\1
		INITLONG    fsrd_DOS1+fse_Version,$00240000	; 36.0
		dc.w	    0
d74 12
a85 2
fsrInitCode:
		move.l	d0,a1
d93 7
a100 6

fsrInitTable:
		dc.l	FSRData_SIZEOF
		dc.l	fsrInitFuncTable
		dc.l	fsrInitStruct
		dc.l	fsrInitCode
@
