==id $Id: utility_lib.sfd,v 39.12 93/02/10 14:56:36 vertex Exp $
* "utility.library"
==base _UtilityBase
==include <exec/types.h>
==include <exec/ports.h>
==include <utility/tagitem.h>
==include <utility/date.h>
==include <utility/hooks.h>
==include <utility/name.h>
==bias 30
==public
==version 36
*
* Tag item functions
*
struct TagItem *FindTagItem(Tag tagVal, struct TagItem *tagList) (D0,A0)
ULONG GetTagData(Tag tagValue, ULONG defaultVal, struct TagItem *tagList) (D0,D1,A0)
ULONG PackBoolTags(ULONG initialFlags, struct TagItem *tagList, struct TagItem *boolMap) (D0,A0,A1)
struct TagItem *NextTagItem(struct TagItem **tagListPtr) (A0)
VOID FilterTagChanges(struct TagItem *changeList, struct TagItem *originalList, ULONG apply) (A0,A1,D0)
VOID MapTags(struct TagItem *tagList, struct TagItem *mapList, ULONG mapType) (A0,A1,D0)
struct TagItem *AllocateTagItems(ULONG numTags) (D0)
struct TagItem *CloneTagItems(struct TagItem *tagList) (A0)
VOID FreeTagItems(struct TagItem *tagList) (A0)
VOID RefreshTagItemClones(struct TagItem *clone, struct TagItem *original) (A0,A1)
BOOL TagInArray(Tag tagValue, Tag *tagArray) (D0,A0)
ULONG FilterTagItems(struct TagItem *tagList, Tag *filterArray, ULONG logic) (A0,A1,D0)
*
* Hook functions
*
ULONG CallHookPkt(struct Hook *hook, APTR object, APTR paramPacket) (A0,A2,A1)
==reserve 1
*
* Date functions
*
==reserve 1
VOID Amiga2Date(ULONG seconds, struct ClockData *result) (D0,A0)
ULONG Date2Amiga(struct ClockData *date) (A0)
ULONG CheckDate(struct ClockData *date) (A0)
*
* 32 bit integer muliply functions
*
LONG SMult32(LONG arg1, LONG arg2) (D0,D1)
ULONG UMult32(ULONG arg1, ULONG arg2) (D0,D1)
*
* 32 bit integer division funtions. The quotient and the remainder are
* returned respectively in d0 and d1
*
LONG SDivMod32(LONG dividend, LONG divisor) (D0,D1)
ULONG UDivMod32(ULONG dividend, ULONG divisor) (D0,D1)
==version 37
*
* International string routines
*
LONG Stricmp(STRPTR string1, STRPTR string2) (A0,A1)
LONG Strnicmp(STRPTR string1, STRPTR string2, LONG length) (A0,A1,D0)
UBYTE ToUpper(UBYTE character) (D0)
UBYTE ToLower(UBYTE character) (D0)
==version 39
*
* More tag Item functions
*
VOID ApplyTagChanges(struct TagItem *list, struct TagItem *changeList) (A0,A1)
==reserve 1
*
* 64 bit integer muliply functions. The results are 64 bit quantities
* returned in D0 and D1
*
LONG SMult64(LONG arg1, LONG arg2) (D0,D1)
ULONG UMult64(ULONG arg1, ULONG arg2) (D0,D1)
*
* Structure to Tag and Tag to Structure support routines
*
ULONG PackStructureTags(APTR pack,ULONG *packTable,struct TagItem *tagList) (A0,A1,A2)
ULONG UnpackStructureTags(APTR pack,ULONG *packTable,struct TagItem *tagList) (A0,A1,A2)
*
* New, object-oriented NameSpaces
*
BOOL AddNamedObject(struct NamedObject *nameSpace, struct NamedObject *object) (a0,a1)
struct NamedObject *AllocNamedObjectA(STRPTR name, struct TagItem *tagList) (a0,a1)
==varargs
struct NamedObject *AllocNamedObject(STRPTR name, Tag tag1, ...) (a0,a1)
LONG AttemptRemNamedObject(struct NamedObject *object) (a0)
struct NamedObject *FindNamedObject(struct NamedObject *nameSpace, STRPTR name, struct NamedObject *lastObject) (a0,a1,a2)
VOID FreeNamedObject(struct NamedObject *object) (a0)
STRPTR NamedObjectName(struct NamedObject *object) (a0)
VOID ReleaseNamedObject(struct NamedObject *object) (a0)
VOID RemNamedObject(struct NamedObject *object, struct Message *message) (a0,a1)
*
* Unique ID generator
*
ULONG GetUniqueID() ()
*
==reserve 4
*
==end
