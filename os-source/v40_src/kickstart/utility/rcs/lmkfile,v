head     39.8;
branch   ;
access   ;
symbols  V39_11:39.4 V39_10:39.4 V39_9:39.4 V39_8:39.4 V39_7:39.4 V39_5:39.3;
locks    ; strict;
comment  @*   @;


39.8
date     93.04.14.08.35.40;  author vertex;  state Exp;
branches ;
next     39.7;

39.7
date     93.02.10.15.23.47;  author vertex;  state Exp;
branches ;
next     39.6;

39.6
date     93.02.10.15.10.34;  author vertex;  state Exp;
branches ;
next     39.5;

39.5
date     92.09.17.16.25.45;  author vertex;  state Exp;
branches ;
next     39.4;

39.4
date     92.04.08.23.18.46;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     92.04.04.16.26.29;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.21.10.53.21;  author vertex;  state Exp;
branches 39.2.1.1;
next     39.1;

39.1
date     92.01.20.11.22.34;  author vertex;  state Exp;
branches ;
next     1.8;

1.8
date     91.01.14.17.16.45;  author jesup;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.14.17.13.37;  author jesup;  state Exp;
branches ;
next     1.6;

1.6
date     90.12.02.15.13.34;  author jesup;  state Exp;
branches ;
next     1.5;

1.5
date     90.12.02.06.34.45;  author jesup;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.30.05.17.21;  author jesup;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.05.12.56.48;  author peter;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.18.18.06.40;  author jimm;  state Exp;
branches ;
next     1.1;

1.1
date     90.05.11.22.31.29;  author jimm;  state Exp;
branches ;
next     ;

39.2.1.1
date     93.02.10.14.52.21;  author vertex;  state Exp;
branches ;
next     ;


desc
@local copy of "standard" lattice makemeta file
@


39.8
log
@*** empty log message ***
@
text
@
MODNAME	          = utility
VERSION		  = 40

REMOTE		  = V$(VERSION):src/kickstart/utility

LD_FILE	          = $(MODNAME).ld$(EXTENSION)
LD_STRIP          = $(MODNAME).ld.strip$(EXTENSION)
MAP_FILE          = $(MODNAME).map$(EXTENSION)

C_COMPILER        = LC
C_COMPILER_OPTS   = -b0 -ms -v -me -rr -O -cfistqmcu -d1

ASSEMBLER         = HX68 -a
ASSEMBLER_OPTS    = -csy -i include: -o

LINKER            = Slink
LINKER_OPTS	  = ADDSYM SC SD MAP $(MAP_FILE) HLSXF PLAIN SWIDTH 16
LINKER_OPTS_STRIP = ND

C_SOURCES   =
ASM_SOURCES = utility_lib.asm hooks.asm date.asm endcode.asm math.asm \
	      stricmp.asm tagitem.asm pack.asm name.asm

OBJECTS     = utility_lib$(TYPE).o tagitem.o hooks.o date.o math$(TYPE).o \
              stricmp.o pack.o name.o endcode.o

STARTUP     =
LIBS	    = LIB:debug.lib LIB:amiga.lib LIB:lcr.lib


##############################################################################
#
# This compiles all different versions of utility.library
#
# $(TYPE)      = The type of the file
# $(CPU)       = The cpu type definition.
# $(EXTENSION) = The type extension of the file.
ALL:
	smake -s TYPE=       CPU=MC68000 EXTENSION=       $(LD_STRIP)
	smake -s TYPE=68020  CPU=MC68020 EXTENSION=.68020 $(LD_STRIP).68020


##############################################################################
# Build the stripped load file...
#
$(LD_STRIP):	$(LD_FILE)
		$(LINKER) FROM $(LD_FILE) TO $(LD_STRIP) $(LINKER_OPTS_STRIP)


##############################################################################
# Build the load file...
#
$(LD_FILE):	$(OBJECTS) $(LIBS)

		$(LINKER) <with <
FROM $(STARTUP) $(OBJECTS) TO $(LD_FILE) LIB $(LIBS) $(LINKER_OPTS)
<


##############################################################################
# Default rules...
#
.c.o:
	$(C_COMPILER) $(C_COMPILER_OPTS) -d $(CPU)=1 -o $*$(TYPE).o $*.c

.asm.o:
	$(ASSEMBLER) $*.asm -D $(CPU)=1 $(ASSEMBLER_OPTS) $*$(TYPE).o


##############################################################################
# All dependencies...
#
utility_lib$(TYPE).o: utility_lib.asm $(MODNAME)_rev.rev utilitybase.i
tagitem.o: tagitem.asm
pack.o: pack.asm
name.o: name.asm
math$(TYPE).o: math.asm



##############################################################################
# Bump the version...
#
version:
	@@BumpRev $(VERSION) $(MODNAME)_rev


##############################################################################
# Delete all object files
#
clean:
	@@Delete $(OBJECTS)
	@@Delete $(LD_FILE) $(LD_STRIP) $(MODNAME).map


##############################################################################
# Release stuff that should be...
#
headers:
	@@autodoc >$(MODNAME).doc autodocs.asm pack.asm name.asm utility_lib.asm
	@@copy $(MODNAME).doc V$(VERSION):doc
	@@delete $(MODNAME).doc quiet
	@@protect V$(VERSION):include/utility/\#? wrd quiet
	@@copy utility.[hi] V$(VERSION):include/utility quiet
	@@copy tagitem.[hi] V$(VERSION):include/utility quiet
	@@copy pack.[hi] V$(VERSION):include/utility quiet
	@@copy name.[hi] V$(VERSION):include/utility quiet
	@@copy date.[hi] V$(VERSION):include/utility quiet
	@@copy hooks.[hi] V$(VERSION):include/utility quiet
	@@protect V$(VERSION):lib/sfd/utility_lib.sfd wrd
	@@copy utility_lib.sfd V$(VERSION):lib/sfd


##############################################################################
# Build autodoc
#
$(MODNAME).doc:	autodocs.asm pack.asm name.asm
		@@Autodoc >$(MODNAME).doc autodocs.asm name.asm pack.asm



##############################################################################
# Release the current build to the server...
#
internal:
	@@Delete $(REMOTE)/((\#?.(c|h|asm|i|ld|rev|doc|library))|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc))|lmkfile|$(LD_STRIP)) +r quiet
	@@copy \#?.(strip|ld|doc|library) \#?_rev.\#? $(REMOTE)
@


39.7
log
@*** empty log message ***
@
text
@d101 1
a101 1
	@@autodoc >$(MODNAME).doc autodocs.asm pack.asm name.asm
@


39.6
log
@*** empty log message ***
@
text
@d104 1
a104 1
	@@protect V$(VERSION):include/utility/#? wrd quiet
@


39.5
log
@Added utility.h
@
text
@d1 41
a41 5
###############################################################################
#
# lmkfile for utility.library
#
###############################################################################
a42 5
#
# Server directory for the data...
#
REMOTE = V:src/kickstart/utility
VERSION= 39
d44 2
d47 2
a48 3
# Name of the module
#
MODNAME	= utility
a49 5
#
# The ".LD" file we want to produce.
#
LD_FILE	= $(MODNAME).ld
LD_STRIP= $(MODNAME).ld.strip
d51 2
a52 2
#
# Compiler, assembler, and linker
d54 1
a54 3
CC = lc
AS = hx68 -a
LN = blink
d56 3
a58 4
#
# Compiler flags...
#
CFLAGS	= -b0 -v -me -ms -cfistqm -d1 -O
a59 4
#
# Assembler flags...  NOTE how they are used below...
#
AFLAGS	= -cqs -i include: -o
d61 1
a61 1
#
d65 1
a65 1
	$(CC) $(CFLAGS) $*.c
d68 1
a68 1
	$(AS) $*.asm $(AFLAGS) $*.o
a69 62
#
# Linker flags
#
LFLAGS		= ADDSYM SMALLCODE SMALLDATA
LFLAGS_STRIP	= ND

#
# System libraries
#
LIBS= LIB:small.lib LIB:debug.lib

#
# My headers...
#
PUBLIC_HDR =	hooks.h hooks.i tagitem.h tagitem.i date.h date.i utility.i utility.h pack.i pack.h name.h name.i

MY_HDR	=	utilitybase.i $(PUBLIC_HDR)

#
# My C source...
#
MY_C	=

#
# My Assebly source...
#
MY_A	=	utility_lib.asm \
		hooks.asm \
		date.asm \
		endcode.asm \
		math.asm \
		stricmp.asm \
		tagitem.asm \
		autodocs.asm \
		pack.asm \
		name.asm

#
# My object files...
#
MY_OBJS	=	utility_lib.o \
		tagitem.o \
		hooks.o \
		date.o \
		math.o \
		stricmp.o \
		pack.o \
		name.o \
		endcode.o

#
# My library objects...
#
MY_LIB_OBJS =

#
# My library files...
#
MY_LIBS	=


ALL:	$(LD_STRIP)
d71 8
a78 5
#
# Build the stripped LD file...
#
$(LD_STRIP):	$(LD_FILE)
	$(LN) FROM $(LD_FILE) TO $(LD_STRIP) $(LFLAGS_STRIP)
a79 11
#
# Build the various versions
#
$(LD_FILE):	$(MY_OBJS)
	$(LN) <with <
FROM $(MY_OBJS)
TO $(LD_FILE)
LIB $(MY_LIBS) $(LIBS)
MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
$(LFLAGS)
<
a80 4
#
# Depend...
#
utility_lib.o: utility_lib.asm $(MY_HDR) $(MODNAME)_rev.i
d82 1
a82 1
#
d86 2
a87 1
	@@bumprev $(VERSION) $(MODNAME)_rev
d89 6
a94 2
$(MODNAME)_rev.i:
	@@bumprev $(VERSION) $(MODNAME)_rev
a95 8
$(MODNAME)_rev.h:
	@@bumprev $(VERSION) $(MODNAME)_rev

#
# Release just the headers
#
headers:	$(PUBLIC_HDR)
	copy $(PUBLIC_HDR) V:include/utility NOPRO
d97 24
a120 9
#
# Release the current build to the server
#
internal:
	@@delete $(REMOTE)/((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc|sfd))|makefile|lmkfile) +r quiet
	@@copy ((\#?.(c|h|asm|i|rev|doc|sfd|ld|ld.\#?))|makefile|lmkfile) $(REMOTE)
	@@copy \#?.doc V:doc NOPRO
	@@copy \#?.sfd V:lib/sfd NOPRO
a121 5
#
# Blow away all files that would need to be rebuilt
#
clean:
	@@delete (\#?.o|\#?.o.\#?|$(MODNAME).doc|$(MODNAME).ld\#?)
d123 2
d126 4
a129 35
# Make the AutoDocs
#
doc:	$(MODNAME).doc

$(MODNAME).doc:	$(MY_C) $(MY_A)
	@@Echo "Making $(MODNAME).doc"
	@@Join $(MY_C) $(MY_A) as RAM:$(MODNAME).tmp.doc
	@@AutoDoc >$(MODNAME).doc RAM:$(MODNAME).tmp.doc
	@@Delete RAM:$(MODNAME).tmp.doc QUIET
	@@Protect $(MODNAME).doc rwd

#
# Make a complete new release (This still is in testing...)
#
release:
	lmk clean
	lmk version
	lmk doc
	lmk $(LD_FILE)
	lmk $(LD_STRIP)
	lmk headers
	lmk internal

#
# The following rule is to bring the source down to the local directory
# To do the following you should copy this LMKfile to the local directory
# and make sure it is readable.  Then type MAKE ToLocal to have the
# code copied down...
#
tolocal:
	@@protect \#? rwed QUIET
	@@copy $(REMOTE)/\#? ""
	@@protect \#? +r QUIET
	@@protect \#?_rev\#? rwd QUIET
	@@Echo "Local is updated..."
@


39.4
log
@New NameSpace stuff added to utility
@
text
@d64 1
a64 1
PUBLIC_HDR =	hooks.h hooks.i tagitem.h tagitem.i date.h date.i utility.i pack.i pack.h name.h name.i
@


39.3
log
@cleaned up make file (matches other V39 assembly modules)
@
text
@d64 1
a64 1
PUBLIC_HDR =	hooks.h hooks.i tagitem.h tagitem.i date.h date.i utility.i pack.i
d84 2
a85 1
		pack.asm
d97 1
@


39.2
log
@*** empty log message ***
@
text
@d1 5
d7 5
a11 2
MODNAME	          = utility
VERSION		  = 39
d13 4
a16 1
REMOTE		  = V:src/kickstart/utility
d18 5
a22 20
LD_FILE	          = $(MODNAME).ld
LD_STRIP          = $(MODNAME).ld.strip

C_COMPILER        = LC
C_COMPILER_OPTS   = -b0 -ms -v -me -rr -O -cfistqmcu -d1

ASSEMBLER         = HX68 -a
ASSEMBLER_OPTS    = -csy -i include: -o

LINKER            = Blink
LINKER_OPTS	  = ADDSYM SC SD MAP $(MODNAME).map HLSXF PLAIN SWIDTH 16
LINKER_OPTS_STRIP = ND

C_SOURCES   =
ASM_SOURCES = utility_lib.asm hooks.asm date.asm endcode.asm math.asm stricmp.asm tagitem.asm
OBJECTS     = utility_lib.o tagitem.o hooks.o date.o math.o \
              stricmp.o endcode.o

STARTUP     =
LIBS	    = LIB:debug.lib LIB:amiga.lib LIB:lcr.lib
d24 6
d31 2
a32 2
##############################################################################
# Build the stripped load file...
d34 1
a34 2
$(LD_STRIP):	$(LD_FILE)
		$(LINKER) FROM $(LD_FILE) TO $(LD_STRIP) $(LINKER_OPTS_STRIP)
d36 4
a40 2
##############################################################################
# Build the load file...
a41 8
$(LD_FILE):	$(OBJECTS) $(LIBS)

		$(LINKER) <with <
FROM $(STARTUP) $(OBJECTS) TO $(LD_FILE) LIB $(LIBS) $(LINKER_OPTS)
<


##############################################################################
d45 1
a45 1
	$(C_COMPILER) $(C_COMPILER_OPTS) $*.c
d48 62
a109 1
	$(ASSEMBLER) $*.asm $(ASSEMBLER_OPTS) $*.o
d111 5
d117 11
a127 5
##############################################################################
# All dependencies...
#
utility_lib.o: utility_lib.asm $(MODNAME)_rev.rev utilitybase.i
tagitem.o: tagitem.asm
d129 4
d134 1
a134 1
##############################################################################
d138 4
a141 1
	@@BumpRev $(VERSION) $(MODNAME)_rev
d143 8
a151 2
##############################################################################
# Delete all object files
d153 12
d166 1
a166 2
	@@Delete $(OBJECTS)
	@@Delete $(LD_FILE) $(LD_STRIP) $(MODNAME).map
d168 2
a169 11

##############################################################################
# Build autodoc
#
$(MODNAME).doc:	autodocs.asm
		@@Autodoc >$(MODNAME).doc autodocs.asm



##############################################################################
# Release the current build to the server...
d171 33
a203 4
internal:
	@@Delete $(REMOTE)/((\#?.(c|h|asm|i|ld|rev|doc|library))|lmkfile)
	@@protect ((\#?.(c|h|asm|i|ld|rev|doc))|lmkfile|$(LD_STRIP)) +r quiet
	@@copy \#?.(strip|ld|doc|library) \#?_rev.\#? $(REMOTE)
@


39.2.1.1
log
@Reverted back to cool lmkfile, added 68020/68000 split personality support
@
text
@d3 1
a3 1
VERSION		  = 40
d5 1
a5 1
REMOTE		  = V$(VERSION):src/kickstart/utility
d7 2
a8 3
LD_FILE	          = $(MODNAME).ld$(EXTENSION)
LD_STRIP          = $(MODNAME).ld.strip$(EXTENSION)
MAP_FILE          = $(MODNAME).map$(EXTENSION)
d16 2
a17 2
LINKER            = Slink
LINKER_OPTS	  = ADDSYM SC SD MAP $(MAP_FILE) HLSXF PLAIN SWIDTH 16
d21 3
a23 2
ASM_SOURCES = utility_lib.asm hooks.asm date.asm endcode.asm math.asm \
	      stricmp.asm tagitem.asm pack.asm name.asm
a24 3
OBJECTS     = utility_lib$(TYPE).o tagitem.o hooks.o date.o math$(TYPE).o \
              stricmp.o pack.o name.o endcode.o

a29 12
#
# This compiles all different versions of utility.library
#
# $(TYPE)      = The type of the file
# $(CPU)       = The cpu type definition.
# $(EXTENSION) = The type extension of the file.
ALL:
	smake -s TYPE=       CPU=MC68000 EXTENSION=       $(LD_STRIP)
	smake -s TYPE=68020  CPU=MC68020 EXTENSION=.68020 $(LD_STRIP).68020


##############################################################################
d50 1
a50 1
	$(C_COMPILER) $(C_COMPILER_OPTS) -d $(CPU)=1 -o $*$(TYPE).o $*.c
d53 1
a53 1
	$(ASSEMBLER) $*.asm -D $(CPU)=1 $(ASSEMBLER_OPTS) $*$(TYPE).o
d59 1
a59 1
utility_lib$(TYPE).o: utility_lib.asm $(MODNAME)_rev.rev utilitybase.i
a60 3
pack.o: pack.asm
name.o: name.asm
math$(TYPE).o: math.asm
a62 1

a78 18
# Release stuff that should be...
#
headers:
	@@autodoc >$(MODNAME).doc autodocs.asm pack.asm name.asm
	@@copy $(MODNAME).doc V$(VERSION):doc
	@@delete $(MODNAME).doc quiet
	@@protect V$(VERSION):include/utility/#? wrd quiet
	@@copy utility.[hi] V$(VERSION):include/utility quiet
	@@copy tagitem.[hi] V$(VERSION):include/utility quiet
	@@copy pack.[hi] V$(VERSION):include/utility quiet
	@@copy name.[hi] V$(VERSION):include/utility quiet
	@@copy date.[hi] V$(VERSION):include/utility quiet
	@@copy hooks.[hi] V$(VERSION):include/utility quiet
	@@protect V$(VERSION):lib/sfd/utility_lib.sfd wrd
	@@copy utility_lib.sfd V$(VERSION):lib/sfd


##############################################################################
d81 2
a82 2
$(MODNAME).doc:	autodocs.asm pack.asm name.asm
		@@Autodoc >$(MODNAME).doc autodocs.asm name.asm pack.asm
@


39.1
log
@V39 cleanup
@
text
@d5 1
a5 1
REMOTE		  = V:src/kickstart/libs/asl
@


1.8
log
@Fixed doc: so it gets assembler files, and has a TOC
@
text
@a0 2
###########################################################
#	lmkmeta included part :ts=4
d2 2
a3 41
###########################################################
#	required volumes/assigns:
#	V36:		- should be official server V36 directory
#	VINCLUDE:	- (possibly local) assign for sys includes,
#					will be V36:include.strip for official build
#	VLIB:		- (possibly local or ram) assign for libs dir.
#					will be V36:lib for official build
#	MYINCLUDE:	- additional search path for temp include files which
#					have not yet been checked in.
#					will be *empty* for official build
#	QUAD:		- used for lattice, and by default precompiled includes.
#				  should be very fast access, e.g., RAM: or RAD:.

VERNUM=37
VERDIR=V:

# make the standard default target "all"
default: all

###########################################################
#	tools
RX=rx
REXX=$(VERDIR)aug/rexx/
#REXX=work:amiga/native/rexx/

ASM=casm -a
BUMPREV=bumprev
LINK=blink
STRIP=blink QUIET NODEBUG from
# mminstall [strip=[<stripdir>]] dir=<destdir> files=[with <withfile>|{files}]
MMINSTALL=$(RX) $(REXX)mminstall.rexx
CC=lc
RM=delete
AUTODOC=autodoc
VERMACRO=$(RX) $(REXX)vermacro.rexx

# a little weird
ZOOTMP=zoo.tmp
ZOOTMP2=zoo.tmp2
FEEDZOO=$(RX) >$(ZOOTMP2) $(REXX)feedzoo.rexx
#FEEDZOO=$(REXX)feedzoo.rexx >$(ZOOTMP2) 
d5 1
d7 42
a48 2
###########################################################
#	standard build implicit rules
d50 1
a50 2
	@@echo "$*.c: $(CFLAGS)" NOLINE
	@@$(CC) $(CFLAGS) $(CINCL) $*
d53 2
a54 2
	@@echo "$*.asm: $(AFLAGS)"
	@@$(ASM) $*.asm $(AFLAGS) $(AINCL) -o $*.o
d56 12
a67 100
#	disassembled listing; you must declare "foo.lst: foo.o"
.o.lst:
	omd >$*.lst $*.o $*.c

#	automatic revision bumping
#	doesn't pass all dependency files, ala makemeta
.rev.i .rev.h:
	$(BUMPREV) $(VERNUM) $* $*.rev $?

###########################################################
#	standard build file groups

HFILES= $(EXTERNHFILES) $(MYHFILES)
IFILES= $(EXTERNIFILES) $(MYIFILES)

#	everything copied to SRCPATH, and checked into RCS
ALLSRC=$(AFILES) $(CFILES) $(HFILES) $(IFILES) \
	$(MAKEFILE) $(MISCSRC) $(SFDFILE)

###########################################################
#	standard build targets

LFILES=$(MYLIBS) VLIB:lc.lib VLIB:amiga.lib

$(SUBSYSNAME)_lib.i:	$(SUBSYSNAME)_lib.sfd
	sfd -i $(SUBSYSNAME)_lib.sfd

$(SUBSYSNAME).with: $(MAKEFILE) $(METAFILE)
	@@echo $(SUBSYSNAME).with:
	@@copy to $(SUBSYSNAME).with <from <
	$(LFLAGS)
	from $(STARTUP) $(FIRSTO) $(OFILES)
	lib $(LFILES)
	MAP $(SUBSYSNAME).map HLSFX PLAIN
	to $(SUBSYSNAME).ld
	<

#	default executable build
$(SUBSYSNAME).ld: $(OFILES) $(FIRSTO) $(LFILES) $(SUBSYSNAME).with
	@@echo "link $(SUBSYSNAME).ld"
	$(LINK) with $(SUBSYSNAME).with
	$(STRIP) $(SUBSYSNAME).ld to $(SUBSYSNAME).ld.strip

#	ram copy of precompiled include file
$(SYMDIR)$(SYM): $(SYM)
	copy $(SYM) $(SYMDIR)

#	disk copy of precompiled include file
#	ZZZ: would be better to also depend on $(HEADERUPDATE)
$(SYM): $(SYMSRC)
	@@echo "	precompiling $(SYMSRC) to $(SYM)"
	lc1 -. $(CINCL) -ph -o$(SYM) $(SYMSRC)

#	revision bumping
$(SUBSYSNAME)_rev.h $(SUBSYSNAME)_rev.i: $(SUBSYSNAME)_rev.rev \
		$(OFILES)

$(SUBSYSNAME)_rev.rev:
	echo >$(SUBSYSNAME)_rev.rev 0

#	zoo file
# if this depends on ALLSRC
$(SUBSYSNAME).zoo: FRC
	-@@$(RM) $(SUBSYSNAME).zoo
	@@copy to zoo.tmp <from <
	$(ALLSRC)
	$(BINFILES)
	<
	@@$(FEEDZOO) zoo.tmp 
	@@zoo	<zoo.tmp2 aI $(SUBSYSNAME).zoo
	@@$(RM) zoo.tmp
	@@$(RM) zoo.tmp2

zoo: $(SUBSYSNAME).zoo


#	autodocs
$(SUBSYSNAME).doc: FRC
	autodoc >$(SUBSYSNAME).doc -I -a -C -c -FRAM:adoctemp $(CFILES) $(AFILES)

doc: $(SUBSYSNAME).doc

#	force target never exists
FRC:
	@@echo "" NOLINE

###########################################################
#	installation directories

# initial path components
SYSINCL=$(VERDIR)include.strip/
SYSINCLNS=$(VERDIR)include/
LIBDIR=$(VERDIR)lib/

# directory path terminators
SFD=$(LIBDIR)sfd
SRCPATH=$(VERDIR)$(SRCDIR)

###########################################################
#	installation targets
a68 3
backup:
	@@$(VERMACRO) BACKUPDIR $(BACKUPDIR) files=FRC
	copy \#? $(BACKUPDIR)
d70 3
d74 2
a75 1
	$(RM) \#?.o \#?.sym \#?.lst \#?.obj \#?.bak \#?.tmp
a76 38
#	check in includes, sfd
#	strip must be in mminstall
headers:
	@@$(VERMACRO) INCDIR $(INCDIR) files=$(EXTERNHFILES) $(EXTERNIFILES)
	@@$(MMINSTALL) strip=$(SYSINCL)$(INCDIR) dir=$(SYSINCLNS)$(INCDIR)  \
	files= $(EXTERNHFILES) $(EXTERNIFILES)
	@@$(MMINSTALL) dir=$(SFD) files=$(SFDFILE)

#	check in source, executable, sfd, includes, docs
#
#	check RCS (ZZZ not implemented)
#	copy source, .ld, .library, fd, includes, to source dir
#	copy docs
#	copy external includes, stripped and nostrip
internal: $(BINFILES)
	@@$(VERMACRO) SRCDIR $(SRCDIR) files=source_is
	@@echo "copying source to $(SRCPATH)"
	@@$(MMINSTALL) dir=$(SRCPATH) files=<with <
	$(ALLSRC)
	<
	@@$(MMINSTALL) dir=$(SRCPATH) files=$(SUBSYSNAME)_rev.rev

	@@$(VERMACRO) BINDIR $(BINDIR) files=$(BINFILES)
	@@echo "copying binaries to $(VERDIR)$(BINDIR)"
	@@$(MMINSTALL) dir=$(VERDIR)$(BINDIR) files=$(BINFILES)

	@@$(VERMACRO) SRCDIR $(SRCDIR) files=$(SUBSYSNAME).doc $(MISCDOC)
	@@echo "copying docs to $(SRCPATH)"
	@@$(MMINSTALL) dir=$(SRCPATH) files= $(SUBSYSNAME).doc $(MISCDOC)

	@@$(VERMACRO) DOCDIR $(DOCDIR) files=$(SUBSYSNAME).doc $(MISCDOC)
	@@echo "copying docs to $(VERDIR)$(DOCDIR)"
	@@$(MMINSTALL) dir=$(VERDIR)$(DOCDIR) files= $(SUBSYSNAME).doc $(MISCDOC)

	@@$(VERMACRO) INCDIR $(INCDIR) files=$(EXTERNHFILES) $(EXTERNIFILES)
	@@echo "copying external includes"
	@@$(MMINSTALL) strip=$(SYSINCL)$(INCDIR) dir=$(SYSINCLNS)$(INCDIR) \
	files= $(EXTERNHFILES) $(EXTERNIFILES)
d78 15
a92 2
	@@echo "copying .sfd file (if any)"
	@@$(MMINSTALL) dir=$(SFD) files=$(SFDFILE)
@


1.7
log
@V37 changes
@
text
@d135 1
a135 1
	autodoc >$(SUBSYSNAME).doc -C -c -FRAM:adoctemp $(CFILES) $(AFILES)
@


1.6
log
@Added map file to blink
@
text
@d17 2
a18 2
VERNUM=36
VERDIR=V$(VERNUM):
@


1.5
log
@Jimm screwed up - it had a explicit utility, and silly options for
the doc entry.
@
text
@d90 1
@


1.4
log
@changes to work in a more normal environment
@
text
@d134 1
a134 1
	autodoc >utility.doc -C -c -a -I -FRAM:adoctemp $(CFILES) $(AFILES)
@


1.3
log
@Added 'make doc' rule.
@
text
@d79 1
a79 1
LFILES=$(MYLIBS) VLIB:lattice/lc.lib VLIB:amiga.lib
@


1.2
log
@change to copy _rev.rev to source
@
text
@d134 1
a134 1
	@@echo "not making autodocs yet"
@


1.1
log
@Initial revision
@
text
@d184 1
@
