head     39.2;
branch   ;
access   ;
symbols  V39_11:39.1 V39_10:39.1 V39_9:39.1 V39_8:39.1 V39_7:39.1 V39_5:39.1;
locks    ; strict;
comment  @*   @;


39.2
date     93.06.16.12.16.48;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.20.11.21.37;  author vertex;  state Exp;
branches ;
next     36.1;

36.1
date     90.07.12.15.48.54;  author rsbx;  state Exp;
branches ;
next     36.0;

36.0
date     90.05.11.22.08.07;  author jimm;  state Exp;
branches ;
next     ;


desc
@hook structure definition
@


39.2
log
@Added HOOKFUNC definition
@
text
@#ifndef UTILITY_HOOKS_H
#define UTILITY_HOOKS_H
/*
**	$Id: hooks.h,v 39.1 92/01/20 11:21:37 vertex Exp Locker: vertex $
**
**	Callback hooks
**
**	(C) Copyright 1989-1992, Commodore-Amiga Inc.
**	All Rights Reserved
*/

/*****************************************************************************/


#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef EXEC_NODES_H
#include <exec/nodes.h>
#endif


/*****************************************************************************/


struct Hook
{
    struct MinNode h_MinNode;
    ULONG	   (*h_Entry)();	/* assembler entry point */
    ULONG	   (*h_SubEntry)();	/* often HLL entry point */
    APTR	   h_Data;	 	/* owner specific	 */
};

/* Useful definition for casting function pointers:
 * hook.h_SubEntry = (HOOKFUNC)AFunction
 */
typedef unsigned long (*HOOKFUNC)();

/* Hook calling conventions.
 *
 * The function pointed to by Hook.h_Entry is called with the following
 * parameters:
 *
 *	A0 - pointer to hook data structure itself
 *	A1 - pointer to parameter structure ("message")
 *	A2 - Hook specific address data ("object")
 *
 * Control will be passed to the routine h_Entry.  For many
 * High-Level Languages (HLL), this will be an assembly language
 * stub which pushes registers on the stack, does other setup,
 * and then calls the function at h_SubEntry.
 *
 * The standard C receiving code is:
 *
 *    HookFunc(struct Hook *hook, APTR object, APTR message)
 *
 * Note that register natural order differs from this convention for C
 * parameter order, which is A0,A2,A1.
 *
 * The assembly language stub for "vanilla" C parameter conventions
 * could be:
 *
 * _hookEntry:
 *	move.l	a1,-(sp)		; push message packet pointer
 *	move.l	a2,-(sp)		; push object pointer
 *	move.l	a0,-(sp)		; push hook pointer
 *	move.l	h_SubEntry(a0),a0	; fetch C entry point ...
 *	jsr	(a0)			; ... and call it
 *	lea	12(sp),sp		; fix stack
 *	rts
 *
 * With this function as your interface stub, you can write a Hook setup
 * function as:
 *
 * InitHook(struct Hook *hook, ULONG (*c_function)(), APTR userdata)
 * {
 * ULONG (*hookEntry)();
 *
 *     hook->h_Entry    = hookEntry;
 *     hook->h_SubEntry = c_function;
 *     hook->h_Data     = userdata;
 * }
 *
 * With a compiler capable of registerized parameters, such as SAS C, you
 * can put the C function in the h_Entry field directly. For example, for
 * SAS C:
 *
 *   ULONG __saveds __asm HookFunc(register __a0 struct Hook *hook,
 *                                 register __a2 APTR         object,
 *                                 register __a1 APTR         message);
 *
 */


/*****************************************************************************/


#endif /* UTILITY_HOOKS_H */
@


39.1
log
@V39 cleanup
@
text
@d4 1
a4 1
**	$Id: hooks.h,v 36.1 90/07/12 15:48:54 rsbx Exp $
d34 5
@


36.1
log
@Made to conform to include style guide.
@
text
@d2 1
a2 1
#define UTILITY_HOOKS_H TRUE
d4 1
a4 1
**	$Id$
d6 1
a6 1
**	callback hooks
d8 2
a9 2
**	(C) Copyright 1989,1990 Commodore-Amiga Inc.
**		All Rights Reserved
d12 3
d16 1
a16 1
#include "exec/types.h"
d20 1
a20 1
#include "exec/nodes.h"
d23 10
a32 6
/* new standard hook structure */
struct Hook	{
    struct MinNode	h_MinNode;
    ULONG		(*h_Entry)();	/* assembler entry point	*/
    ULONG		(*h_SubEntry)();/* often HLL entry point	*/
    VOID		*h_Data;	/* owner specific		*/
d35 5
a39 2
/*
 * Hook calling conventions:
d41 2
a42 4
 *	A1 - pointer to parameter structure ("message") typically
 *	     beginning with a longword command code, which makes
 *	     sense in the context in which the hook is being used.
 *	A2 - Hook specific address data ("object," e.g, GadgetInfo)
d49 1
a49 5
 * The C standard receiving code is:
 * CDispatcher( hook, object, message )
 *     struct Hook	*hook;
 *     APTR		object;
 *     APTR		message;
d51 1
a51 2
 * NOTE that register natural order differs from this convention
 * for C parameter order, which is A0,A2,A1.
d53 3
d58 34
a92 33
 _hookEntry:
 	move.l	a1,-(sp)		; push message packet pointer
 	move.l	a2,-(sp)		; push object pointer
 	move.l	a0,-(sp)		; push hook pointer
	move.l	h_SubEntry(a0),a0	; fetch C entry point ...
	jsr	(a0)			; ... and call it
	lea	12(sp),sp		; fix stack
	rts

 * with this function as your interface stub, you can write
 * a Hook setup function as:

 SetupHook( hook, c_function, userdata )
 struct Hook	*hook;
 ULONG		(*c_function)();
 VOID		*userdata;
 {
 	ULONG	(*hookEntry)();

	hook->h_Entry =		hookEntry;
	hook->h_SubEntry =	c_function;
	hook->h_Data = 		userdata;
 }

 * with Lattice C pragmas, you can put the C function in the
 * h_Entry field directly if you declare the function:

ULONG __saveds __asm
CDispatcher(	register __a0 struct Hook	*hook,
		register __a2 VOID		*object,
		register __a1 ULONG		*message );
 *
 ****/
d94 1
a94 1
#endif
@


36.0
log
@Initial RCS check-in.
@
text
@d3 8
a10 11

/** hooks.h ***************************************************************
 *
 *  hooks.h -- callback hooks
 *
 *  $Header: $
 *
 *  Confidential Information: Commodore-Amiga Computer, Inc.
 *  Copyright (c) 1989, Commodore-Amiga Computer, Inc.
 *
 *************************************************************************/
@
