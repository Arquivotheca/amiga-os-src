head     36.11;
branch   ;
access   ;
symbols  V39_11:36.11 V39_10:36.11 V39_9:36.11 V39_8:36.11 V39_7:36.11 V39_5:36.11;
locks    ; strict;
comment  @*   @;


36.11
date     91.02.13.06.18.47;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     91.02.13.06.08.55;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     91.02.07.14.04.29;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.12.02.06.39.14;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.12.02.05.35.00;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.11.05.19.02.57;  author peter;  state Exp;
branches ;
next     36.5;

36.5
date     90.11.05.18.54.40;  author peter;  state Exp;
branches ;
next     36.4;

36.4
date     90.11.05.18.42.21;  author peter;  state Exp;
branches ;
next     36.3;

36.3
date     90.11.05.17.39.21;  author peter;  state Exp;
branches ;
next     36.2;

36.2
date     90.11.05.12.57.07;  author peter;  state Exp;
branches ;
next     36.1;

36.1
date     90.05.18.18.06.01;  author jimm;  state Exp;
branches ;
next     36.0;

36.0
date     90.05.11.22.03.37;  author jimm;  state Exp;
branches ;
next     ;


desc
@tag list processing routines
@


36.11
log
@Fixed D Larson's confusion over return values, removed BOOL params
@
text
@/*** tagitem.c *****************************************************************
 *
 *  tagitem -- tag list manipulation routines
 *
 *  $Id: tagitem.c,v 36.10 91/02/13 06:08:55 jesup Exp $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include <exec/types.h>
#include <exec/memory.h>
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>

#include "tagitem.h"
#include "ubase.h"

#define UNUSED	(0)

#define D(x)	;
#define printf	kprintf


/****** utility.library/NextTagItem *************************************
*
*    NAME
*	NextTagItem -- Iterate TagItem lists. (V36)
*
*    SYNOPSIS
*	next_tag = NextTagItem( tagItemPtr )
*	D0			A0
*
*	struct TagItem *NextTagItem( struct TagItem **tagItemPtr );
*
*    FUNCTION
*	Iterates through a (chained) array of TagItem structures,
*	skipping and chaining as dictated by system tags.  TAG_SKIP
*	will cause it to skip the entry and the next, TAG_IGNORE ignores
*	that single entry, and TAG_MORE has a pointer to another array
*	of tags (and terminates the current array!)  TAG_DONE also
*	terminates the current array.  Each call returns either the next
*	tagitem you should examine, or NULL at the end.
*
*    INPUTS
*	tagItemPtr 	- doubly-indirect reference to a TagItem structure.
*			  The pointer will be changed to keep track of the
*			  iteration.
*
*    RESULT
*	next_tag	- Each TagItem in the array or chain of arrays that
*			  should be processed according to system Tag values
*			  (in utility/tagitem.h) is returned in turn with
*			  successive calls.
*
*    EXAMPLE
*	Iterate( struct TagItem *tags );
*	{
*		struct TagItem *tstate;
*		struct TagItem *tag;
*
*		tstate = tags;
*		while ( tag = NextTagItem( &tstate ) )
*		{
*			switch ( tag->ti_Tag )
*			{
* 			case TAG1:
*			    ...
*			    break;
* 			case TAG2:
*			    ...
*			    break;
*			...
*			}
*		}
*   	}
*
*    NOTES
*	Do NOT use the value of *tagItemPtr, but rather use the pointer
*	returned by NextTagItem().
*
*
*    BUGS
*
*    SEE ALSO
*	utility/tagitem.h, GetTagData(), PackBoolTags(), FindTagItem()
*
*****************************************************************************/

struct TagItem	* __asm
nextTagItem(	register __a0 struct TagItem	**tp )
{
    struct TagItem *nextti;

    D( printf("NTI: here I am %lx\n", tp ) );

    /* 'tp' already holds "next" item in list */
    nextti = *tp;

    /* walk all TAG_MORE and TAG_IGNORE chaining */
    while ( nextti )
    {
	switch ( nextti->ti_Tag )
	{
	case TAG_MORE:
	    nextti = (struct TagItem *) nextti->ti_Data;
	    break;
	case TAG_SKIP:
	    nextti+= 1 + (int) nextti->ti_Data;
	    break;
	case TAG_IGNORE:
	    nextti++;
	    break;
	case TAG_DONE:
	    return ( *tp = NULL );
	    break;
	default:	/* a normal tag item	*/
	    *tp = nextti + 1;
	    return ( nextti );
	}
    }
    return ( *tp = NULL );
}


/****** utility.library/FindTagItem *************************************
*
*    NAME
*	FindTagItem -- Scans TagItem list for a Tag. (V36)
*
*    SYNOPSIS
*	tag = FindTagItem( tagVal, tagList)
*	D0		   D0	   A0
*
*	struct TagItem *FindTagItem( Tag tagVal, struct TagItem *tagList );
*
*    FUNCTION
*	Scans a TagItem "List", which is in fact a chain of arrays
*	of TagItem structures as defined in utility/tagitem.h.
*	Returns a pointer to the FIRST item with ti_Tag matching the
*	'TagVal' parameter.
*
*    INPUTS
*	tagVal 		- Tag value to search for.
*	tagList		- beginning of TagItem list to scan.
*
*    RESULT
*	Returns a pointer to the item with ti_Tag matching 'TagVal'.
*	Returns NULL if there is no match or if TagList is NULL.
*
*    BUGS
*
*    SEE ALSO
*	utility/tagitem.h, GetTagData(), PackBoolTags(), NextTagItem()
*
*****************************************************************************/

struct TagItem	* __asm
findTagItem(  	register __d0 Tag 		tag,
		register __a0 struct TagItem	*ti )
{
    struct TagItem	*tistate;

    tistate = ti;

    while ( ti = nextTagItem( &tistate ) )
    {
	if ( ti->ti_Tag == tag ) break;
    }
    return ( ti );
}

/****** utility.library/GetTagData *************************************
*
*    NAME
*	GetTagData -- Obtain data corresponding to Tag. (V36)
*
*    SYNOPSIS
*	value = GetTagData(tagVal, default, tagList)
*	D0		   D0	   D1	    A0
*
*	ULONG GetTagData(Tag TagVal, ULONG Default, struct TagItem *TagList)
*
*    FUNCTION
*	Searches a TagItem list for a matching Tag value, and returns the
*	corresponding ti_Data value for the TagItem found.  If none
*	found, will return the value passed it as 'default'.
*
*    INPUTS
*	tagVal 		- Tag value to search for.
*	default		- value to be returned if tagVal is not found.
*	tagList 	- the TagItem list to search.
*
*    RESULT
*	value		- The ti_Data value for first matching TagItem, or
*			  'default' if a ti_Tag matching 'Tag' is not found.
*
*    BUGS
*
*    SEE ALSO
*	utility/tagitem.h, FindTagItem(), PackBoolTags(), NextTagItem()
*
*****************************************************************************/

ULONG __asm
getTagData(  	register __d0 Tag 		tag,
		register __d1 ULONG		deflt,
		register __a0 struct TagItem	*ti )
{
    if ( ti = findTagItem( tag, ti ) )
    {
	return ( ti->ti_Data );
    }
    return ( deflt );
}

/****** utility.library/PackBoolTags *************************************
*
*    NAME
*	PackBoolTags --  Builds a "Flag" word from a TagList. (V36)
*
*    SYNOPSIS
*	boolflags = PackBoolTags( initialFlags, tagList, boolMap )
*	D0			  D0	        A0       A1
*
*	ULONG PackBoolTags( ULONG initialFlags, struct TagItem *tagList,
*			    struct TagItem *boolMap );
*
*    FUNCTION
*	Picks out the Boolean TagItems in a TagItem list and converts
*	them into bit-flag representations according to a correspondence
*	defined by the TagItem list 'BoolMap.'
*
*	A Boolean TagItem is one where only the logical value of
*	the ti_Data is relevant.  If this field is 0, the value is
*	FALSE, otherwise TRUE.
*
*
*    INPUTS
*	initialFlags 	- a starting set of bit-flags which will be changed
*			  by the processing of TRUE and FALSE Boolean tags
*			  in tagList.
*	tagList		- a TagItem list which may contain several TagItems
*			  defined to be "Boolean" by their presence in
*			  boolMap.  The logical value of ti_Data determines
*			  whether a TagItem causes the bit-flag value related
*			  by boolMap to set or cleared in the returned flag
*			  longword.
*	boolMap		- a TagItem list defining the Boolean Tags to be
*			  recognized, and the bit (or bits) in the returned
*			  longword that are to be set or cleared when a
*			  Boolean Tag is found to be TRUE or FALSE in
*			  tagList.
*
*    RESULT
*	boolflags	- the accumulated longword of bit-flags, starting
*			  with InitialFlags and modified by each Boolean
*			  TagItem encountered.
*
*    EXAMPLE
*
*	\* define some nice user tag values ... *\
*	enum mytags { tag1 = TAG_USER+1, tag2, tag3, tag4, tag5 };
*
*	\* this TagItem list defines the correspondence between Boolean tags
*	 * and bit-flag values.
*	 *\
*	struct TagItem	boolmap[] = {
*	    { tag1,  0x0001 },
*	    { tag2,  0x0002 },
*	    { tag3,  0x0004 },
*	    { tag4,  0x0008 },
*	    { TAG_DONE }
*	};
*
*	\* You are probably passed these by some client, and you want
*	 * to "collapse" the Boolean content into a single longword.
*	 *\
*
*	struct TagItem	boolexample[] = {
*	    { tag1,  TRUE },
*	    { tag2,  FALSE },
*	    { tag5, Irrelevant },
*	    { tag3,  TRUE },
*	    { TAG_DONE }
*	};
*
*	\* Perhaps 'boolflags' already has a current value of 0x800002. *\
*	boolflags = PackBoolTags( boolflags, boolexample, boolmap );
*
*	\* The resulting new value of 'boolflags' will be 0x80005. \*
*
*    BUGS
*	There are some undefined cases if there is duplication of
*	a given Tag in either list.  It is probably safe to say that
*	the *last* of identical Tags in TagList will hold sway.
*
*    SEE ALSO
*	utility/tagitem.h, GetTagData(), FindTagItem(), NextTagItem()
*
*****************************************************************************/

ULONG __asm
packBoolTags(  	register __d0 ULONG		flagval,
		register __a0 struct TagItem	*tlist,
		register __a1 struct TagItem	*boolmap )

{
    struct TagItem	*ti;
    struct TagItem	*tstate;
    ULONG		flag;

    D( kprintf("pBT initial %lx\n", flagval ) );

    tstate = tlist;
    while ( ti = nextTagItem( &tstate ) )
    {
	/* will do arithemetic with 0 flag if nofind in boolmap */
	flag = getTagData( ti->ti_Tag, 0, boolmap )
	D( kprintf("tag %lx maps to %lx ", ti->ti_Tag,flag ) );

	if ( ti->ti_Data )
	{
	    D( kprintf("set the flags\n") );
	    flagval |= flag;
	}
	else
	{
	    D( kprintf("clear the flags\n") );
	    flagval &= ~flag;
	}
	D(kprintf("new flags %lx\n", flagval));
    }
    return ( flagval );
}

#if UNUSED
/*
 * if 'tag' is included in 'boolmap'
 * return find it and return a boolean test of
 * ti_Data against longword 'accum'
 *
 * ZZZ: might need this to tell you whether the tag was found
 * in the boolmap.
 */
BOOL
unpackBoolTags( accum, tag, boolmap )
Tag	tag;
ULONG	accum;
struct TagItem	*boolmap;
{
    return ( accum & getTagData( tag, 0, boolmap ) );
}
#endif

/****** utility.library/FilterTagChanges *************************************
*
*    NAME
*	FilterTagChanges -- Eliminate TagItems which specify no change. (V36)
*
*    SYNOPSIS
*	FilterTagChanges( changeList, oldValues, apply)
*			  A0	      A1	 D0
*
*	void FilterTagChanges( struct TagItem *changeList,
*			       struct TagItem *oldValues, LONG apply );
*
*    FUNCTION
*	Eliminate items from a "change list" that specify values already
*	in effect in existing list.  Optionally update the existing list
*	if the Boolean 'Apply' is true.
*
*	The elimination is done by changing the ti_Tag field to TAG_IGNORE.
*	So, this function may change the input tag list(s).
*
*    INPUTS
*	changeList 	- specification of new tag-value pairs.
*	oldValues	- a list of existing tag item pairs.
*	apply		- Boolean specification as to whether the values in
*			  oldValues are to be updated to the values in
*			  changeList.
*
*    RESULT
*	None.
*
*    EXAMPLE
*	Assume you have an attribute list for an object (oldValues)
*	which looks like this:
*
*		ATTR_Size,  "large",
*		ATTR_Color, "orange",
*		ATTR_Shape, "square",
*
*	If you receive a new TagList containing some changes (changeList),
*	which looks like this:
*
*		ATTR_Size,  "large",
*		ATTR_Shape, "triangle"
*
*	If you call FilterTagChanges(), changeList will be modified to
*	contain only those attributes which are different from the
*	oldValues.  All other tagitems will have their tag-values set to
*	TAG_IGNORE.  The resulting changeList will become:
*
*		TAG_IGNORE, "large",
*		ATTR_Shape, "triangle"
*
*	If apply was set to TRUE, oldValues would be:
*
*		ATTR_Size,  "large"
*		ATTR_Color, "orange"
*		ATTR_Shape, "triangle"
*
*    BUGS
*
*    SEE ALSO
*
*****************************************************************************/

void	__asm
filterTagChanges( register __a0	struct TagItem	*newtl,
		  register __a1 struct TagItem	*oldtl,
		  register __d0	int		apply )
{
    struct TagItem	*ti;
    struct TagItem	*oldti;
    struct TagItem	*tstate;	/* for iteration */

    tstate = newtl;

    while ( ti = nextTagItem( &tstate ) )
    {
	if ( oldti = findTagItem( ti->ti_Tag, oldtl ) )
	{
	    /* match */
	    if ( ti->ti_Data == oldti->ti_Data )
	    {
		ti->ti_Tag = TAG_IGNORE;	/* data values match	*/
	    }
	    else if ( apply )
	    {
		oldti->ti_Data = ti->ti_Data;	/* update old value	*/
	    }
	}
	/* else? ZZZ: do nothing? */
    }
}

/****** utility.library/MapTags *************************************
*
*    NAME
*	MapTags	-- Convert ti_Tag values in a list via map pairing. (V36)
*
*    SYNOPSIS
*	MapTags(tagList, mapList, includeMiss)
*		A0	 A1       D0
*
*	void MapTags(struct TagItem *tagList, struct TagItem mapList,
*		     LONG includeMiss);
*
*    FUNCTION
*	Apply a "mapping list" mapList to tagList:
*
*	If the ti_Tag field of an item in tagList appears as ti_Tag in some
*	item in mapList, overwrite ti_Tag with the corresponding ti_Data
*	from the map list.
*
*	If a tag in tagList does not appear in the mapList, you can choose
*	to have it removed by changing it to TAG_IGNORE. Do this by setting
*	includeMiss to FALSE.
*
*	If you want to have items which do not appear in the mapList
*	survive the mapping as-is, set includeMiss to 1.
*
*	This is central to gadget interconnections where you want
*	to convert the tag values from one space (the sender) to
*	another (the receiver).
*
*    INPUTS
*	tagList		- Input list of tag items which is to be mapped
*			  to Tag values as specified in mapList.
*	mapList 	- a "mapping list" tagItem list which pairs Tag
*			  values expected to appear in tagList with new
*			  values to be substituted in the ti_Tag fields of
*			  tagList.  May be NULL, which means that all items
*			  in tagList will be eliminated.
*	includeMiss	- 0 to remove tags from tagList not in mapList,
*			  1 to remove
*
*    RESULT
*	None.
*
*    EXAMPLE
*	\* Consider this source list: *\
*	    struct TagItem list[] = {
*		{ MY_SIZE, 	71 },
*		{ MY_WEIGHT, 	200 },
*		{ TAG_END,	} };
*
*	\* And the mapping list: *\
*	    struct TagItem map[] = {
*		{ MY_SIZE, 	HIS_TALL },
*		{ TAG_END,	} };
*
*	\* Then after MapTags( list, map, 0 ), 'list' will become: *\
*		{ HIS_TALL, 71 },
*		{ TAG_IGNORE, },
*		{ TAG_END, }
*
*	\* Then after MapTags( list, map, 1 ), 'list' will become: *\
*		{ HIS_TALL, 71 },
*		{ MY_WEIGHT, 200 },
*		{ TAG_END, }
*
*    NOTES
*	The procedure will change the values of the input tag list
*	tagList (but not mapList).
*
*	You can "filter" a list by passing includeMiss as 0, and having the
*	data items in the map list equal the corresponding tags.
*
*	You can perform the inverse filter ("everything but") by passing
*	includeMiss equal to 1, and creating a map item for every tag you
*	want to filter out, pairing it with a mapped data value of
*	TAG_IGNORE.
*
*	For safety and "order independence" of tag item arrays, if you
*	attempt to map some tag to the value TAG_END, the value TAG_IGNORE
*	will be substituted instead.
*
*    BUGS
*
*    SEE ALSO
*
*****************************************************************************/

ULONG	__asm
mapTags(register __a0	struct TagItem	*tl,
	register __a1	struct TagItem	*map,
	register __d0	int	IncludeMiss )
{
    struct TagItem	*ti;
    struct TagItem	*mapitem;
    struct TagItem	*tstate;	/* for iteration */
    ULONG		count = 0;

    tstate = tl;

    while ( ti = nextTagItem( &tstate ) )
    {
	if ( mapitem = findTagItem( ti->ti_Tag, map ) )
	{
	    /* match */
	    if ( ( ti->ti_Tag = (Tag) mapitem->ti_Data ) == TAG_END )
	    {
	    	/* patch up, protect against bogus termination  */
		ti->ti_Tag = TAG_IGNORE;
	    }

	    count++;
	}
	else	/* no mapping */
	{
	    /* eliminate only if he wants	*/
	    if ( IncludeMiss = 0 ) ti->ti_Tag = TAG_IGNORE;
	}
    }

    return ( count );
}

/****** utility.library/AllocateTagItems *************************************
*
*    NAME
*	AllocateTagItems --  Allocate a TagItem array (or chain). (V36)
*
*    SYNOPSIS
*	tagList = AllocateTagItems( numItems )
*	D0		            D0
*
*	struct TagItem *AllocateTagItems( ULONG numItems);
*
*    FUNCTION
*	Allocates the specified number of usable TagItems slots, and does
*	so in a format that the function FreeTagItems can handle.
*
*	Note that to access the TagItems in 'tagList', you should use
*	the function NextTagItem().  This will insure you respect any
*	chaining (TAG_MORE) that the list uses, and will skip any
*	TAG_IGNORE items that AllocateTagItems() might use to stash
*	size and other information.
*
*    INPUTS
*	numItems	- the number of TagItem slots you want to allocate.
*
*    RESULT
*	tagList		- the allocated chain of TagItem structures.  Will
*	    		  return NULL if unsuccessful.
*
*    BUGS
*
*    SEE ALSO
*	FreeTagItems(), CloneTagItems()
*
*****************************************************************************/

/*
 * assumes that CALLER will terminate the tag list
 */
struct TagItem	*	__asm
allocateTagItems( register __d0	ULONG	numitems )
{
    struct TagItem	*ti = NULL;	/* stupid lattice warning */

    if ( ti = (struct TagItem *)
	AllocMem( (numitems + 1) * sizeof *ti, MEMF_CLEAR) )
    {
	/* extra item so I know how long this allocated chunk is */
	ti->ti_Tag = TAG_IGNORE;
	ti->ti_Data = (numitems+1);
	ti++;
    }
    return ( ti );
}

/****** utility.library/RefreshTagItemClones *****************************
*
*    NAME
*	RefreshTagItemClones -- Rejuvenates a clone from the original. (V36)
*
*    SYNOPSIS
*	RefreshTagItemClones( cloneTagItems, originalTagItems )
*			      A0	     A1
*
*	void RefreshTagItemClones( struct TagItem *cloneTagItems,
*				  struct TagItem *originalTagItems );
*
*    FUNCTION
*	If (and only if) the tag items 'cloneTagItems' were created
*	from 'originalTagItems' by CloneTagItems(), and if originalTagItems
*	has not been changed in any way, you can reset the clone list
*	to its original state by using this function.
*
*    INPUTS
*	CloneTagItems	- return value from CloneTagItems(originalTagItems).
*	OriginalTagItems- a tag list that hasn't changed.
*
*    RESULT
*	None.
*
*    EXAMPLE
*
*    BUGS
*
*    SEE ALSO
*	CloneTagItems(), AllocateTagItems(), FreeTagItems()
*
*****************************************************************************/

/*
 * assumes the contiguous structure of a clone that is
 * allocated by cloneTagItems()
 */
ULONG	__asm
refreshTagItemClones(register __a0	struct TagItem	*clone,
	register __a1	struct TagItem	*original )
{
    struct TagItem	*tstate;
    struct TagItem	*ti;

    tstate = original;

    while ( ti = nextTagItem( &tstate ) )
    {
	*clone = *ti;
	clone++;
    }
    clone->ti_Tag = TAG_DONE;
    return ( 0 );
}

/****** utility.library/CloneTagItems *************************************
*
*    NAME
*	CloneTagItems -- Copies a TagItem list.  (V36)
*
*    SYNOPSIS
*	newTagList = CloneTagItems( tagList )
*	D0			    A0
*
*	struct TagItem *CloneTagItems( struct TagItem *tagList );
*
*    FUNCTION
*	Copies the essential contents of a tagItem list.  Internally,
*	it uses AllocateTagItems() so that you can use FreeTagItems().
*
*    INPUTS
*	tagList		- TagItem list to clone.
*
*    RESULT
*	newTagList	- resultant copy.
*
*    BUGS
*
*    SEE ALSO
*	AllocateTagItems(), FreeTagItems(), RefreshTagItemClones()
*
*****************************************************************************/

/* creates a copy of a tag list, collapsing TAG_MORE chaining,
 * and eliminating TAG_IGNORE.
 */
struct TagItem *	__asm
cloneTagItems(  register __a0 struct TagItem *tl )
{
    /* for iteration  of 'tl' */
    struct TagItem	*tstate;
    struct TagItem	*ti;
    int count;

    /* copy and indexing pointer */
    struct TagItem	*ticopy;

    tstate = tl;
    count = 1;		/* count one for the TAG_DONE I'll need to add */

    while ( ti = nextTagItem( &tstate ) )
    {
	count++;
    }

    if  ( ticopy = allocateTagItems( count ) )
    {
	refreshTagItemClones( ticopy, tl );
    }
    return ( ticopy );
}

#if UNUSED
/*
 * 'varargs' creation of tag list:
 * createTagItems( tag1, data1, tag2, data2, ..., TAG_DONE );
 */
struct TagItem	*
createTagItems( args )
int	args;
{
    return ( cloneTagItems( &args ) );
}
#endif


/****** utility.library/FreeTagItems *************************************
*
*    NAME
*	FreeTagItems --  Frees allocated TagItem lists. (V36)
*
*    SYNOPSIS
*	FreeTagItems( tagList )
*			A0
*
*	void FreeTagItems( struct TagItem *tagList );
*
*    FUNCTION
*	Frees the memory of a TagItem list allocated either by
*	AllocateTagItems() or CloneTagItems().
*
*    INPUTS
*	TagList		- list to free.  Must be created by functions
*			  specified. A value of NULL for 'tagList' is safe.
*
*    RESULT
*	None.
*
*    BUGS
*
*    SEE ALSO
*	AllocateTagItems(), CloneTagItems()
*
*****************************************************************************/

/*
 * assumes this was created by allocateTagItems() or
 * one of its callers.
 */
void	__asm
freeTagItems( register __a0 struct TagItem	*ti )
{
    if ( !ti ) return;

    ti--;	/* back to secret preamble */

    if ( ti->ti_Tag == TAG_IGNORE )
    {
	/* numitems stashed in ti_Data */
	FreeMem( ti, sizeof (struct TagItem) * ti->ti_Data );
    }
    D( else { kprintf( "FREEING BAD TAG ARRAY AT %lx\n", ti ); } )
}


#if UNUSED
struct TagItem	*map;
dumpTagItems( ti )
struct TagItem	*ti;
{
    struct TagItem	*tstate = ti;

    while ( ti = nextTagItem( &tstate ) )
    {
	kprintf("%8lx--%8lx\n", ti->ti_Tag, ti->ti_Data );
    }
}
#endif

/****** utility.library/TagInArray *************************************
*
*    NAME
*	TagInArray  -- Check if a Tag value appears in a Tag array. (V36)
*
*    SYNOPSIS
*	BOOL TagInArray( tag, tagArray )
*	D0	         D0   A0
*
*	BOOL TagInArray( Tag tag, Tag *tagArray);
*
*    FUNCTION
*	Perform a quick scan to see if a tag value appears in
*	an array terminated with TAG_END.  Returns TRUE if
*	the value is found.
*
*	The 'tagArray' must be terminated by TAG_END.  It should
*	NOT contain other system tag values, such as TAG_MORE
*	or TAG_IGNORE.  Note that this is an array of Tag values, NOT
*	an array of TagItems.
*
*	This is sort of a "one shot" version of FilterTagItems().
*
*    INPUTS
*	tag 		- Tag value to search array for.
*	tagArray	- a simple array terminated by TAG_END.
*
*    RESULT
*	Boolean success of search.
*
*    BUGS
*
*    SEE ALSO
*	FilterTagItems()
*
*****************************************************************************/

/*
 * performs fast search for tag in array.
 * does not respect any system tag values except TAG_END
 */
BOOL __asm
tagInArray( register __d0 Tag	tag,
	    register __a0 Tag	*tagarray )
{
    while ( *tagarray != TAG_END )
    {
	if ( *tagarray++ == tag ) return ( TRUE );
    }
    return ( FALSE );
}

/****** utility.library/FilterTagItems *********************************
*
*    NAME
*	FilterTagItems - Remove selected items from a TagItem list. (V36)
*
*    SYNOPSIS
*	nvalid = FilterTagItems(tagList, tagArray, logic)
*	D0		       A0	A1	  D0
*
*	ULONG FilterTagItems(struct TagItem *tagList, Tag *tagArray,
*			     LONG logic);
*
*    FUNCTION
*	Removes TagItems from a TagItem list (by changing ti_Tag to
*	TAG_IGNORE) depending on whether its ti_Tag value is
*	found in an array of TagValues.
*
*	If the 'logic' parameter is TAGFILTER_AND, then all items
*	not appearing in the list are excluded.
*
*	If 'logic' is TAGFILTER_NOT, then items not found in the
*	array are preserved, and the ones in the array are cast out.
*
*    INPUTS
*	tagList		- input list of tag items which is to be filtered
*			  by having selected items changed to TAG_IGNORE.
*	tagArray	- an array of Tag values, terminated by TAG_END,
*			  as specified in the notes on TagInArray().
*	logic		- specification whether items in TagArray are to
*			  be included or excluded in the filtered result.
*
*    RESULT
*	nvalid		- number of valid items left in resulting filtered
*			  list.
*
*    BUGS
*
*    SEE ALSO
*	TagInArray()
*
*****************************************************************************/

ULONG	__asm
filterTagItems(	register __a0 struct TagItem	*taglist,
		register __a1 Tag		*tagarray,
		register __d0 int		logic )
{
    struct TagItem	*tistate = taglist;
    struct TagItem	*ti;
    ULONG		numitems = 0;

    if ( logic == TAGFILTER_AND )
    {
	/* include only the hits	*/
	while ( ti = nextTagItem( &tistate ) )
	{
	    if ( !tagInArray( ti->ti_Tag, tagarray ) )
		ti->ti_Tag = TAG_IGNORE;
	    else
	    	numitems++;
	}
    }
    else	/* TAGFILTER_NOT */
    {
	/* include only the hits	*/
	while ( ti = nextTagItem( &tistate ) )
	{
	    if ( tagInArray( ti->ti_Tag, tagarray ) )
		ti->ti_Tag = TAG_IGNORE;
	    else
	    	numitems++;
	}
    }
    return ( numitems );
}
@


36.10
log
@MANY, MANY autdoc changes by D Larson
@
text
@d5 1
a5 1
 *  $Id: tagitem.c,v 36.8 90/12/02 06:39:14 jesup Exp $
d34 1
a34 1
*	A0			A0
d135 1
a135 1
*	A0		   D0	   A0
d368 1
a368 1
*			       struct TagItem *oldValues, BOOL apply );
d461 1
a461 1
*		     BOOL includeMiss);
d581 1
a581 1
*	A0		            D0
d691 1
a691 1
*	A0			    A0
d825 1
a825 1
*	A0	         D0   A0
@


36.9
log
@Fixed FileTegItem autodoc
@
text
@d30 1
a30 1
*	NextTagItem	--  (New for V36)  Iterate TagItem lists
d33 5
a37 2
*	struct TagItem	*NextTagItem( struct TagItem **TagItemPtr )
*						A0
d48 35
a82 12
*	TagItemPtr = doubly-indirect reference to a TagItem structure.
*	    For example, if you have a TagItem pointer which is the
*	    beginning of a TagItem list, pass its address to this
*	    function.  The pointer will be changed to keep track
*	    of the iteration.
*	NOTE: Do NOT use the value of *TagItemPtr, but rather use
*	the pointer returned by this function.
*
*    RESULT
*	Each TagItem in the array or chain of arrays that should
*	be processed according to system Tag values (in utility/tagitem.h)
*	is returned in turn with successive calls.
d84 1
d131 1
a131 1
*	FindTagItem	--  (New for V36) Scans TagItem list for a Tag
d134 4
a137 2
*	struct TagItem	*FindTagItem( Tag TagVal, struct TagItem *TagList );
*					   D0			    A0
d146 2
a147 2
*	TagVal = Tag value to search for.
*	TagList = beginning of TagItem list to scan.
d178 1
a178 2
*	GetTagData	--  (New for V36) Obtain data corresponding to
*		Tag in TagItem list, or default value if item not found.
d181 2
a182 2
*	ULONG GetTagData( Tag TagVal, ULONG Default, struct TagItem *TagList )
*				D0	       D1			A0
d184 2
d189 1
a189 1
*	found, will return the value passed it as 'Default'.
d192 7
a198 7
*	TagVal = Tag value to search for.
*	Default = Value to be returned if TagVal is not found.
*	TagList = The TagItem list to search.
*
*    RESULT
*	The ti_Data value for first matching TagItem, or 'Default' if
*	ti_Tag matching 'Tag' is not found.
d222 1
a222 2
*	PackBoolTags	--  (New for V36) Builds a "Flag" word from the
*		Boolean tags in a TagList.
d225 5
a229 4
*	PackBoolTags( ULONG InitialFlags, struct TagItem *TagList,
*				D0			   A0
*			struct TagItem *BoolMap );	
*					  A1
a238 1
*	
d240 1
d242 15
a256 13
*	InitialFlags = A starting set of bit-flags which will be
*	    changed by the processing of TRUE and FALSE Boolean
*	    tags in TagList.
*	TagList = A TagItem list which may contain several TagItems
*	    defined to be "Boolean" by their presence in BoolMap.
*	    The logical value of ti_Data determines whether a TagItem
*	    causes the bit-flag value related by BoolMap to set or
*	    cleared in the returned flag longword.
*	BoolMap = A TagItem list defining the Boolean Tags to be
*	    recognized, and the bit (or bits) in the returned longword
*	    that are to be set or cleared when a Boolean Tag is
*	    found to be TRUE or FALSE in TagList.
*
d258 3
a260 2
*	The accumulated longword of bit-flags, starting with InitialFlags
*	and modified by each Boolean TagItem encountered.	
d264 1
a264 1
*    define some nice user tag values ...
d267 3
a269 2
*    this TagItem list defines the correspondence between Boolean tags
*    and bit-flag values.
d278 3
a280 2
*    You are probably passed these by some client, and you want
*    to "collapse" the Boolean content into a single longword.
d290 1
a290 1
*    Perhaps 'boolflags' already has a current value of 0x800002.
d293 2
a294 2
*	The resulting new value of 'boolflags' will be 0x80005.
*	
d342 1
a342 1
 * return find it and return a boolean test of 
d361 1
a361 1
*	FilterTagChanges --  Eliminate TagItems which specify no change.
d364 5
a368 6
*	FilterTagChanges( ChangeList, OldValues, Apply)
*			      A0	A1	  D0
*
*	struct TagItem	*ChangeList;
*	struct TagItem	*OldValues;
*	BOOL		Apply;
d379 5
a383 4
*	ChangeList = specification of new tag-value pairs
*	OldValues = a list of existing tag item pairs
*	Apply = Boolean specification as to whether the values in
*		OldValues are to be updated to the values in ChangeList
d386 5
a390 1
*	None
d392 25
a416 1
*    BUGS
d454 1
a454 1
*	MapTags	-- Convert ti_Tag values in a list via map pairing.
d457 16
a472 17
*	MapTags(TagList, MapList, IncludeMiss)
*		  A0	   A1
*
*	struct TagItem	*TagList;
*	struct TagItem	*MapList;
*	BOOL		IncludeMiss;
*
*    FUNCTION
*	Apply a "mapping list" 'MapList' to TagList:
*
*	If the ti_Tag field of an item in 'TagList' appears as ti_Tag
*	in some item in 'MapList', overwrite ti_Tag with the corresponding
*	ti_Data from the map list.
*
*	If a tag in TagList does not appear in the MapList, you can
*	choose to have it removed by changing it to TAG_IGNORE.
*	Do this by setting 'IncludeMiss' to 0.
d474 2
a475 2
*	If you want to have items which do not appear in the MapList
*	survive the mapping as-is, set IncludeMiss to 1.
d481 14
d496 1
a496 1
*	Consider this source list:
d502 1
a502 1
*	And the mapping list:
d507 1
a507 1
*	Then after MapTags( list, map, 0 ), 'list' will become:
d512 1
a512 1
*	Then after MapTags( list, map, 1 ), 'list' will become:
d517 3
a519 3
*	Note that you can "filter" a list by passing IncludeMiss
*	as 0, and having the data items in the map list equal
*	the corresponding tags.
d521 2
a522 8
*	You can perform the inverse filter ("everything but")
*	by passing IncludeMiss equal to 1, and creating a
*	map item for every tag you want to filter out, pairing
*	it with a mapped data value of TAG_IGNORE.
*
*	Note: for safety and "order independence" of tag item arrays,
*	if you attempt to map some tag to the value TAG_END, the
*	value TAG_IGNORE will be substituted instead.
d524 10
a533 17
*    NOTE
*	The procedure will change the values of the input tag list
*	TagList (but not MapList).
*
*    INPUTS
*	TagList = Input list of tag items which is to be mapped
*		to Tag values as specified in MapList.
*	MapList = a "mapping list" TagItem list which pairs Tag
*		values expected to appear in TagList with new
*		values to be substituted in the ti_Tag fields of
*		TagList.  May be NULL, which means that all items
*		in TagList will be eliminated.
*
*    RESULT
*	
*
*    BUGS
d561 1
a561 1
	
d577 1
a577 1
*	AllocateTagItems --  Allocate a TagItem array (or chain).
d580 8
a587 9
*	TagList = AllocateTagItems( NumItems )
*			  D0
*
*	struct TagItem	*TagList;
*	ULONG		NumItems;
*
*    FUNCTION
*	Allocates the specified number of usable TagItems slots, and
*	of a format that the function FreeTagItems can handle.
d589 2
a590 2
*	Note that to access the TagItems in 'TagList', you should use
*	the function NextTagItem.  This will insure you respect any
d592 1
a592 1
*	TAG_IGNORE items that AllocateTagItems might use to stash
d596 1
a596 1
*	NumItems = the number of TagItem slots you want to allocate.
d599 2
a600 2
*	TagList = the allocated chain of TagItem structures.  Will
*	    return NULL if unsuccessful.
d605 1
a605 1
*	FreeTagItems, CloneTagItems
d631 1
a631 1
*	RefreshTagItemClones -- Rejuvenates a clone from the original.
d634 5
a638 5
*	RefreshTagItemClones( CloneTagItems, OriginalTagItems )
*			         A0	     A1
*
*	struct TagItem *CloneTagItems;
*	struct TagItem *OriginalTagItems;
d641 2
a642 2
*	If (and only if) the tag items 'CloneTagItems' were created
*	from 'OriginalTagItems' by CloneTagItems(), and if OriginalTagItems
d647 2
a648 2
*	CloneTagItems = return value from CloneTagItems( OriginalTagItems )
*	OriginalTagItems = a tag list that hasn't changed
d651 3
a653 1
*	None
d658 1
a658 1
*	CloneTagItems, AllocateTagItems, FreeTagItems
d687 1
a687 1
*	CloneTagItems -- Copies a TagItem list.
d690 2
a691 2
*	NewTagList = CloneTagItems( TagList )
*				      A0
d693 1
a693 2
*	struct TagItem *NewTagList;
*	struct TagItem *TagList;
d696 2
a697 2
*	Copies the essential contents of a TagItem list.  Internally,
*	it uses AllocateTagItems so that you can use FreeTagItems.
d700 1
a700 1
*	TagList = TagItem list to clone.
d703 1
a703 1
*	NewTagList = resultant copy.
d708 1
a708 1
*	AllocateTagItems, FreeTagItems, RefreshTagItemClones
d758 1
a758 1
*	FreeTagItems	--  Frees allocated TagItem lists.
d761 1
a761 1
*	FreeTagItems( TagList )
d764 1
a764 1
*	struct TagItem	*TagList;
d768 1
a768 1
*	AllocateTagItems or CloneTagItems.
d771 2
a772 2
*	TagList = list to free.  Must be created by functions specified.
*	A value of NULL for 'TagList' is safe.
d780 1
a780 1
*	AllocateTagItems, CloneTagItems
d821 1
a821 1
*	TagInArray  -- Check if a Tag value appears in a Tag array
d824 2
a825 2
*	BOOL	TagInArray( Tag, TagArray )
*		  	     D0	   A0
d827 1
a827 2
*	Tag		Tag;
*	Tag		*Tag;
d834 1
a834 1
*	The 'TagArray' must be terminated by TAG_END.  It should
d839 1
a839 1
*	This is sort of a "one shot" version of FilterTagItems.
d842 2
a843 2
*	Tag = Tag value to search array for.
*	TagArray = a simple array terminated by TAG_END.
d851 1
a851 1
*	FilterTagItems
d873 1
a873 1
*	FilterTagItems - Remove selected items from a TagItem list.
d876 5
a880 6
*	FilterTagItems(TagList, TagArray, Logic)
*		  	A0	   A1	  D0
*
*	struct TagItem	*TagList;
*	Tag		*TagArray;
*	LONG		Logic;
d887 1
a887 1
*	If the 'Logic' parameter is TAGFILTER_AND, then all items
d890 1
a890 1
*	If 'Logic' is TAGFILTER_NOT, then items not found in the
d894 13
a906 12
*	TagList = Input list of tag items which is to be filtered
*		by having selected items changed to TAG_IGNORE.
*	TagArray = an array of Tag values, terminated by TAG_END,
*		as specified in the notes on TagInArray().
*	Logic = specification whether items in TagArray are to
*		be included or excluded in the filtered result.
*
*    RESULT
*	Number of valid items left in resulting filtered list.
*
*    BUGS
*
d908 1
a908 1
*	TagInArray
d928 1
a928 1
	    else 
d939 1
a939 1
	    else 
@


36.8
log
@Improved NextTagItem docs
@
text
@d5 1
a5 1
 *  $Id: tagitem.c,v 36.7 90/12/02 05:35:00 jesup Exp Locker: jesup $
d814 1
a814 1
*	FilterTagList(TagList, TagArray, Logic)
@


36.7
log
@Added a comment
@
text
@d5 1
a5 1
 *  $Id: tagitem.c,v 36.6 90/11/05 19:02:57 peter Exp Locker: jesup $
d37 6
a42 1
*	skipping and chaining as dictated by system tags.
@


36.6
log
@Finally settled on exec_old_pragmas.h, as I should have in the beginning.
@
text
@d5 1
a5 1
 *  $Id: tagitem.c,v 36.5 90/11/05 18:54:40 peter Exp Locker: peter $
d769 2
a770 1
*	or TAG_IGNORE.
@


36.5
log
@Changed $ID to $Id.
@
text
@d5 1
a5 1
 *  $Id: V36:src/kickstart/utility/RCS/tagitem.c,v 36.3 90/11/05 17:39:21 peter Exp $
d16 1
a16 6

/* Peter 5-Nov-90:  We need this ugliness since our pragmas use
 * "libcall SysBase" instead of "syscall"
 */
#define SysBase (*(ULONG *)4))
#include <pragmas/exec_pragmas.h>
@


36.4
log
@Changed $Header to $ID.
SysBase is now defined as location 4. (Matches old syscall technique).
@
text
@d5 1
a5 1
 *  $ID: V36:src/kickstart/utility/RCS/tagitem.c,v 36.3 90/11/05 17:39:21 peter Exp $
@


36.3
log
@Now references <clib/exec_protos.h> and <pragmas/exec_pragmas.h>
instead of <proto/exec.h>.
@
text
@d5 1
a5 1
 *  $Header: V36:src/kickstart/utility/RCS/tagitem.c,v 36.2 90/11/05 12:57:07 peter Exp Locker: peter $
d18 1
a18 1
 * the more efficient "libcall SysBase" instead of "syscall"
d20 1
a20 3
#include <dos.h>
#define FETCHUBASE	( (struct UtilityBase *)getreg(REG_A6) )
#define SysBase FETCHUBASE->ub_SysLib
@


36.2
log
@Integrated autodocs into source.
@
text
@d5 1
a5 1
 *  $Header: V36:src/kickstart/utility/RCS/tagitem.c,v 36.1 90/05/18 18:06:01 jimm Exp $
d15 10
a24 1
#include <proto/exec.h>
d26 1
@


36.1
log
@fix alloc/free size protocol
comment that NULL is OK for FreeTagItem
@
text
@d5 1
a5 1
 *  $Header: V36:src/kickstart/utility/RCS/tagitem.c,v 36.0 90/05/11 22:03:37 jimm Exp $
d24 33
d93 30
d138 31
d181 81
d315 36
d380 88
d503 36
d558 32
d612 29
d684 29
d747 37
d798 42
@


36.0
log
@Initial RCS check-in.
@
text
@d5 1
a5 1
 *  $Header: V36:src/kickstart/utility/RCS/tagitem.c,v 36.0 90/05/11 22:01:56 jimm Exp $
d301 2
a302 1
	FreeMem( ti, ti->ti_Data );	/* size stashed in ti_Data */
@
