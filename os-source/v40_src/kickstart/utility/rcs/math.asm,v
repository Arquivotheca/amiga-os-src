head     39.4;
branch   ;
access   ;
symbols  V39_11:39.3 V39_10:39.3 V39_9:39.3 V39_8:39.3 V39_7:39.3 V39_5:39.3;
locks    ; strict;
comment  @*   @;


39.4
date     93.02.10.14.53.42;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.01.24.10.43.07;  author vertex;  state Exp;
branches ;
next     39.2;

39.2
date     92.01.21.10.40.05;  author vertex;  state Exp;
branches ;
next     39.1;

39.1
date     92.01.20.11.22.47;  author vertex;  state Exp;
branches ;
next     36.3;

36.3
date     91.02.13.06.01.25;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     91.01.29.22.15.55;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     90.11.05.12.56.55;  author peter;  state Exp;
branches ;
next     36.0;

36.0
date     90.05.11.22.11.00;  author jimm;  state Exp;
branches ;
next     ;


desc
@math utilities
@


39.4
log
@Added 68020/68000 split personality support
@
text
@	OPTIMON

;---------------------------------------------------------------------------

	IFD	MC68000
	XDEF	SMult32S
	XDEF	UMult32S
	XDEF	SDivMod32S
	XDEF	UDivMod32S
	XDEF	SMult64S
	XDEF	UMult64S
	ENDC

	XDEF	SMult32H
	XDEF	UMult32H
	XDEF	SDivMod32H
	XDEF	UDivMod32H
	XDEF	SMult64H
	XDEF	UMult64H

;---------------------------------------------------------------------------

	OPT	p=68020
	CNOP	0,4	 ; long-align the math routines for faster speed

;---------------------------------------------------------------------------

SMult32H:
	muls.l	d1,d0
	rts


;---------------------------------------------------------------------------

UMult32H:
	mulu.l	d1,d0
	rts

;---------------------------------------------------------------------------

SDivMod32H:
	divsl.l	d1,d1:d0
	rts

;---------------------------------------------------------------------------

UDivMod32H:
	divul.l	d1,d1:d0
	rts

;---------------------------------------------------------------------------

SMult64H:
	muls.l	d1,d1:d0
	rts


;---------------------------------------------------------------------------

UMult64H:
	mulu.l	d1,d1:d0
	rts

;---------------------------------------------------------------------------

	IFD	MC68000
	OPT	p=68000

;---------------------------------------------------------------------------

SMult32S:
UMult32S:
	move.l	d2,-(sp)	; need these
	move.l	d3,-(sp)
	move.l	d0,d2		; d0=Al
	move.l	d1,d3		; d1=Bl
	swap	d2		; d2=Ah
	swap	d3		; d3=Bh
	mulu.w	d1,d2		; d2=Ah*Bl
	mulu.w	d0,d3		; d3=Al*Bh
	mulu.w	d1,d0		; d0=Al*Bl
	add.w	d3,d2		; ignore overflow
	swap.w	d2		; shift to where it belongs
	clr.w	d2
	add.l	d2,d0		; ignore overflow
	move.l	(sp)+,d3
	move.l	(sp)+,d2	;
	rts

;---------------------------------------------------------------------------

SDivMod32S:
	tst.l	d0
	bpl.s	NumPos
	neg.l	d0
	tst.l	d1
	bpl.s	DenomPos
	neg.l	d1
	bsr.s	UDivMod32S
	neg.l	d1
	rts
DenomPos
	bsr.s	UDivMod32S
	neg.l	d0
	neg.l	d1
	rts
NumPos
	tst.l	d1
	bpl.s	UDivMod32S
	neg.l	d1
	bsr.s	UDivMod32S
	neg.l	d0
	rts

;---------------------------------------------------------------------------

UDivMod32S:
	move.l	d3,-(sp)
	swap	d1
	tst.w	d1		; can we do this easily? (is number < 65536)
	bne.s	BigDenom	; no, we have to work for it
	swap	d1
	move.l	d1,d3
	swap.w	d0
	move.w	d0,d3
	beq.s	SmallNum
	divu.w	d1,d3
	move.w	d3,d0
SmallNum
	swap.w	d0
	move.w	d0,d3
	divu.w	d1,d3
	move.w	d3,d0
	swap.w	d3
	move.w	d3,d1
	move.l	(sp)+,d3
	rts

BigDenom:
	swap	d1
	move.w	d2,-(sp)
	moveq	#15,d3		; 16 times through the loop
	move.w	d3,d2
	move.l	d1,d3
	move.l	d0,d1
	clr.w	d1
	swap	d1
	swap	d0
	clr.w	d0
DMls	add.l	d0,d0
	addx.l	d1,d1
	cmp.l	d1,d3
	bhi.s	DMle
	sub.l	d3,d1
	addq.w	#1,d0
DMle	dbf	d2,DMls
	move.w	(sp)+,d2
	move.l	(sp)+,d3
	rts

;---------------------------------------------------------------------------
; Multiply two signed 32 bit integers and return the 64 bit result
;
; What it will do is take the values, make them "right", do the multiply
; routine below and then make the sign correct...
;
SMult64S:
	move.l	d2,-(sp)	; We need a scrap...
	moveq.l	#0,d2		; No sign...
	tst.l	d0		; Check arg1...
	bpl.s	1$		; If not negative, skip...
	neg.l	d0		; Make d0 positive...
	addq.l	#1,d2		; Set d0 as negative flag...
1$	tst.l	d1		; Check arg2...
	bpl.s	2$		; If not negative, skip...
	neg.l	d1		; Make it positive...
	subq.l	#1,d2		; Set d1 as negative flag...
2$	bsr.s	UMult64S	; Do the multiply...
	tst.l	d2		; Are we needed?
	beq.s	3$		; If not negative result, skip...

	moveq.l	#0,d2		; We need a register with 0...
	not.l	d0		; Invert...
	not.l	d1		; binary (1's complement negative)
	addq.l	#1,d0		; add 1 (2's complement negative)
	addx.l	d2,d1		; (add in the carry)

3$	move.l	(sp)+,d2	; Clean up...
	rts

;---------------------------------------------------------------------------
; Multiply two unsigned 32 bit integers and return the 64 bit result
;
;   REGISTER USAGE
;	D4 -- scratch (restored)
;	D3 -- scratch (restored)
;	D2 -- scratch (restored)
;	D1 -- arg 1 (given), result 32:63
;	D0 -- arg 0 (given), result 0:31
;
UMult64S:
	movem.l	d2-d4,-(sp)

	move.l	d1,d3
	mulu.w	d0,d3		; 24
	move.l	d1,d2
	swap.w	d2
	swap.w	d0
	mulu.w	d0,d2		; 13

	swap.w	d3

	move.l	d1,d4
	mulu.w	d0,d4		; 14
	add.w	d4,d3
	clr.w	d4
	swap.w	d4
	addx.l	d4,d2

	swap.w	d0
	swap.w	d1

	move.l	d1,d4
	mulu.w	d0,d4		; 23
	add.w	d4,d3
	clr.w	d4
	swap.w	d4
	addx.l	d4,d2

	swap.w	d3

	move.l	d2,d0
	move.l	d3,d1

	movem.l	(sp)+,d2-d4
	rts

;---------------------------------------------------------------------------

	ENDC	; MC68020

;---------------------------------------------------------------------------

	END
@


39.3
log
@Added SMult64() and UMult64()
Made UDivMod32() and SDivMod32() a few cycles faster
@
text
@d5 1
d12 1
d24 1
d66 1
d237 4
@


39.2
log
@Changed movem into simple move for faster speed on 68000
@
text
@d9 2
d16 2
d50 13
d115 4
a118 2
	cmpi.l	#$0ffff,d1	; can we do this easily?
	bhi.s	BigDenom	; no, we have to work for it
d136 4
a139 1
	move.l	d2,-(sp)
a145 1
	moveq	#15,d2		; 16 times through the loop
d153 1
a153 1
	move.l	(sp)+,d2
d155 77
@


39.1
log
@V39 cleanup
@
text
@d52 15
a66 13
	movem.l	D2-D3,-(A7)	; need these
	move.l	D0,D2		; d0=Al
	move.l	D1,D3		; d1=Bl
	swap	D2		; d2=Ah
	swap	D3		; d3=Bh
	mulu.w	D1,D2		; d2=Ah*Bl
	mulu.w	D0,D3		; d3=Al*Bh
	mulu.w	D1,D0		; d0=Al*Bl
	add.w	D3,D2		; ignore overflow
	swap.w	D2		; shift to where it belongs
	clr.w	D2
	add.l	D2,D0		; ignore overflow
	movem.l	(A7)+,D2-D3
d132 2
a133 1
	movem.l	(sp)+,d2-d3
@


36.3
log
@Autodoc changes from D Larson
@
text
@d1 1
a1 1
	SECTION	MathStuff
d3 2
d10 8
a17 4
	XDEF	_SMult32H
	XDEF	_UMult32H
	XDEF	_SDivMod32H
	XDEF	_UDivMod32H
d19 1
a19 37


******* utility.library/SMult32 **************************************
*
*   NAME
*	SMult32 -- Signed 32 by 32 bit multiply with 32 bit result. (V36)
*
*   SYNOPSIS
*	Result = SMult32( Arg1, Arg2 )
*	D0                D0    D1
*
*	LONG SMult32( LONG, LONG );
*
*   FUNCTION
*	Returns the signed 32 bit result of multiplying Arg1 by Arg2.
*
*   INPUTS
*	Arg1, Arg2	- signed multiplicands.
*
*   RESULTS
*	Result		- the signed 32 bit result of multiplying
*			  Arg1 by Arg2.
*
*   NOTES
*
*   SEE ALSO
*	SDivMod32(), UDivMod32(), UMult32()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*
d21 1
a21 1
_SMult32H:
d26 1
a26 35
******* utility.library/UMult32 **************************************
*
*   NAME
*	UMult32 -- Unsigned 32 by 32 bit multiply with 32 bit result. (V36)
*
*   SYNOPSIS
*	Result = UMult32( Arg1, Arg2 )
*	D0                D0    D1
*
*	ULONG UMult32( ULONG, ULONG );
*
*   FUNCTION
*	Returns the unsigned 32 bit result of multiplying Arg1 by Arg2.
*
*   INPUTS
*	Arg1, Arg2		- unsigned multiplicands.
*
*   RESULTS
*	Result			- the unsigned 32 bit result of
*				  multiplying Arg1 by Arg2.
*
*   NOTES
*
*   SEE ALSO
*	SDivMod32(), SMult32(), UDivMod32()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*
d28 1
a28 1
_UMult32H:
d32 17
d67 1
a68 43
******* utility.library/SDivMod32 ************************************
*
*   NAME
*	SDivMod32 -- Signed 32 by 32 bit division and modulus. (V36)
*
*   SYNOPSIS
*	Quotient:Remainder = SDivMod32( Dividend, Divisor )
*	D0       D1                     D0        D1
*
*	LONG SDivMod32( LONG, LONG );
*
*   FUNCTION
*	Divides the signed 32 bit dividend by the signed 32 bit divisor
*	   and returns a signed 32 bit quotient and remainder.
*
*   INPUTS
*	Dividend 	- signed 32 bit dividend.
*	Divisor 	- signed 32 bit divisor.
*
*   RESULTS
*	Quotient 	- signed 32 quotient of the division.
*	Remainder 	- signed 32 remainder of the division.
*
*   NOTES
*
*   SEE ALSO
*	SMult32(), UDivMod32(), UMult32()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

_SDivMod32H:
	divsl.l	d1,d1:d0
	rts


d92 1
a92 43

******* utility.library/UDivMod32 ************************************
*
*   NAME
*	UDivMod32 -- Unsigned 32 by 32 bit division and modulus. (V36)
*
*   SYNOPSIS
*	Quotient:Remainder = UDivMod32( Dividend, Divisor )
*	D0       D1                     D0        D1
*
*	ULONG UDivMod32( ULONG, ULONG );
*
*   FUNCTION
*	Divides the unsigned 32 bit dividend by the unsigned 32 bit divisor
*	and returns a unsigned 32 bit quotient and remainder.
*
*   INPUTS
*	Dividend 	- unsigned 32 bit dividend.
*	Divisor 	- unsigned 32 bit divisor.
*
*   RESULTS
*	Quotient 	- unsigned 32 quotient of the division.
*	Remainder 	- unsigned 32 remainder of the division.
*
*   NOTES
*
*   SEE ALSO
*	SDivMod32(), SMult32(), UMult32()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*

_UDivMod32H:
	divul.l	d1,d1:d0
	rts

d133 3
a135 1
	end
@


36.2
log
@Added documentation of a0/a1 preservation
@
text
@d30 1
a30 1
*	Arg1, Arg2 -- Signed multiplicands.
d33 2
a34 1
*	Result -- The signed 32 bit result of multiplying Arg1 by Arg2.
a36 1
*	Guaranteed not to modify a0/a1
d71 1
a71 1
*	Arg1, Arg2 -- Unsigned multiplicands.
d74 2
a75 1
*	Result -- The unsigned 32 bit result of multiplying Arg1 by Arg2.
a77 1
*	Guaranteed not to modify a0/a1
d131 2
a132 2
*	Dividend -- Signed 32 bit dividend.
*	Divisor -- Signed 32 bit divisor.
d135 2
a136 2
*	Quotient -- Signed 32 quotient of the division.
*	Remainder -- Signed 32 remainder of the division.
a138 1
*	Guaranteed not to modify a0/a1
d195 1
a195 1
*	   and returns a unsigned 32 bit quotient and remainder.
d198 2
a199 2
*	Dividend -- Unsigned 32 bit dividend.
*	Divisor -- Unsigned 32 bit divisor.
d202 2
a203 2
*	Quotient -- Unsigned 32 quotient of the division.
*	Remainder -- Unsigned 32 remainder of the division.
a205 1
*	Guaranteed not to modify a0/a1
d254 1
a254 1
DMls	add.l	d0,d0		
@


36.1
log
@Fixed autodoc format.
@
text
@d36 1
d77 1
d139 1
d207 1
@


36.0
log
@Initial RCS check-in.
@
text
@d15 1
a15 1
******* utility.library/SMult32() ************************************
d55 1
a55 1
******* utility.library/UMult32() ************************************
d113 1
a113 1
******* utility.library/SDivMod32() **********************************
d180 1
a180 1
******* utility.library/UDivMod32() **********************************
@
