head     36.4;
branch   ;
access   ;
symbols  V39_11:36.4 V39_10:36.4 V39_9:36.4 V39_8:36.4 V39_7:36.4 V39_5:36.4;
locks    ; strict;
comment  @*   @;


36.4
date     90.11.05.19.03.06;  author peter;  state Exp;
branches ;
next     36.3;

36.3
date     90.11.05.18.54.51;  author peter;  state Exp;
branches ;
next     36.2;

36.2
date     90.11.05.18.42.30;  author peter;  state Exp;
branches ;
next     36.1;

36.1
date     90.11.05.17.39.32;  author peter;  state Exp;
branches ;
next     36.0;

36.0
date     90.05.11.22.08.40;  author jimm;  state Exp;
branches ;
next     ;


desc
@hardware dependent initialization
@


36.4
log
@Finally settled on exec_old_pragmas.h, as I should have in the beginning.
@
text
@/*** hardware.c *************************************************************
 *
 *  hardware.c -- hardware dependent initialization
 *
 *  $Id: hardware.c,v 36.3 90/11/05 18:54:51 peter Exp Locker: peter $
 *
 *  Confidential Information: Commodore-Amiga, Inc.
 *  Copyright (C) 1989, Commodore-Amiga, Inc.
 *  All Rights Reserved
 *
 ****************************************************************************/

#include "ubase.h"
#include <exec/execbase.h>
/* get prototype for SetFunction() */
#include <clib/exec_protos.h>
#include <pragmas/exec_old_pragmas.h>

/* had a little problem with these in the code space */
extern void	Amiga2DateH();
extern void	Date2AmigaH();
extern void	CheckDateH();
extern void	SMult32H();
extern void	UMult32H();
extern void	SDivMod32H();
extern void	UDivMod32H();

/*** CHEATING: grabbed constants for LVO out of utility.p ***/
#define LVOAmiga2Date (-0x78)
#define LVODate2Amiga (-0x7e)
#define LVOCheckDate (-0x84)
#define LVOSMult32 (-0x8a)
#define LVOUMult32 (-0x90)
#define LVOSDivMod32 (-0x96)
#define LVOUDivMod32 (-0x9c)

struct funcy_one {
	LONG	funcOffset;
	void	(*funcEntry)();
};

struct funcy_one override[] =  {
    { LVOAmiga2Date, Amiga2DateH },
    { LVODate2Amiga, Date2AmigaH },
    { LVOCheckDate, CheckDateH },
    { LVOSMult32, SMult32H },
    { LVOUMult32, UMult32H },
    { LVOSDivMod32, SDivMod32H },
    { LVOUDivMod32, UDivMod32H },
};

#define FANCY_HARDWARE (AFF_68020 | AFF_68030 | AFF_68040)

/*
 * override default vectors with hardware dependent ones,
 * if the necessary fancy hardware is available
 */
HardwareOverride( struct UtilityBase *ulib )
{
    int	fx;
    struct funcy_one	*fo = override;

    if ( ( (struct ExecBase *)ulib->ub_SysLib)->AttnFlags & FANCY_HARDWARE )
    {
	for ( fx = 0; fx < (sizeof override)/(sizeof override[0]); fx++ )
	{
	    SetFunction( (struct Library *) ulib,
	    	fo->funcOffset, (void (*)()) fo->funcEntry );

	    fo++;
	}
    }
}
@


36.3
log
@Changed $ID to $Id.
@
text
@d5 1
a5 1
 *  $Id: V36:src/kickstart/utility/RCS/hardware.c,v 36.1 90/11/05 17:39:32 peter Exp $
d17 1
a17 6

/* Peter 5-Nov-90:  We need this ugliness since our pragmas use
 * "libcall SysBase" instead of "syscall"
 */
#define SysBase (*(ULONG *)4))
#include <pragmas/exec_pragmas.h>
@


36.2
log
@Changed $Header to $ID.
SysBase is now defined as location 4. (Matches old syscall technique).
@
text
@d5 1
a5 1
 *  $ID: V36:src/kickstart/utility/RCS/hardware.c,v 36.1 90/11/05 17:39:32 peter Exp $
@


36.1
log
@Now references <clib/exec_protos.h> and <pragmas/exec_pragmas.h>
instead of <proto/exec.h>.
@
text
@a0 2
#define FETCHUBASE	( (struct UtilityBase *)getreg(REG_A6) )
#define SysBase FETCHUBASE->ub_SysLib
d5 1
a5 1
 *  $Header: V36:src/kickstart/utility/RCS/hardware.c,v 36.0 90/05/11 22:08:40 jimm Exp Locker: peter $
d19 1
a19 1
 * the more efficient "libcall SysBase" instead of "syscall"
d21 1
a21 3
#include <dos.h>
#define FETCHUBASE	( (struct UtilityBase *)getreg(REG_A6) )
#define SysBase FETCHUBASE->ub_SysLib
@


36.0
log
@Initial RCS check-in.
@
text
@d1 2
d7 1
a7 1
 *  $Header: $
d15 2
d18 1
a18 1
#include <proto/exec.h>
d20 7
a26 2
#include "ubase.h"
#include <exec/execbase.h>
@
