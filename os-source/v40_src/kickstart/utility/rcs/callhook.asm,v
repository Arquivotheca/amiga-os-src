head     36.5;
branch   ;
access   ;
symbols  V39_11:36.5 V39_10:36.5 V39_9:36.5 V39_8:36.5 V39_7:36.5 V39_5:36.5;
locks    ; strict;
comment  @*   @;


36.5
date     91.02.13.05.59.01;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.12.02.05.53.50;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.11.05.18.55.07;  author peter;  state Exp;
branches ;
next     36.2;

36.2
date     90.11.05.18.42.45;  author peter;  state Exp;
branches ;
next     36.1;

36.1
date     90.11.05.12.57.17;  author peter;  state Exp;
branches ;
next     36.0;

36.0
date     90.05.11.22.04.07;  author jimm;  state Exp;
branches ;
next     ;


desc
@a routine for calling through a Hook
@


36.5
log
@Fixes to autodocs by D Larson
@
text
@*************************************************************************
*                                                                       *
*   callhook.asm -- should probably be a macro
*                                                                       *
*   Copyright (C) 1985, 1989 Commodore Amiga Inc.  All rights reserved. *
*                                                                       *
*   $Id: callhook.asm,v 36.4 90/12/02 05:53:50 jesup Exp $
*************************************************************************

	include	'exec/types.i'
	include	'hooks.i'

	xdef	CallHook

******* utility.library/CallHookPkt *************************************
*
*    NAME
*	CallHookPkt -- Invoke a Hook function callback. (V36)
*
*    SYNOPSIS
*	return = CallHookPkt( hook, object, paramPkt )
*	D0		      A0    A2	    A1
*
*	ULONG CallHookPkt( struct Hook *hook, VOID *object, VOID *paramPkt );
*
*    FUNCTION
*	Performs the callback standard defined by a Hook structure.
*	This function is really very simple; it effectively performs
*	a JMP to Hook->h_Entry.
*
*	It is probably just as well to do this operation in an
*	assembly language function linked in to your program, possibly
*	from a compiler supplied library or a builtin function.
*
*	It is anticipated that C programs will often call a 'varargs'
*	variant of this function which will be named CallHook.  This
*	function must be provided in a compiler specific library, but
*	an example of use would be:
*
*	returnval = CallHook( hook, dataobject, COMMAND_ID, param1, param2 );
*
*	This function CallHook can be implemented in many C compilers
*	like this:
*	CallHook( hook, object, command, ... )
*	struct Hook	*hook;
*	VOID		*object;
*	ULONG		command;
*	{
*		return ( CallHookPkt( hook, object, (VOID *) &command ) );
*	}
*
*    INPUTS
*	Hook		- pointer to Hook structure as defined in
*			  utility/hooks.h
*	Object		- useful data structure in the particular context the
*			  hook is being used for.
*	ParamPkt	- pointer to a parameter packet (often built on the
*			  stack); by convention this packet should start off
*			  with a longword command code, and the remaining
*			  data in the packet depends on that command.
*
*    RESULT
*	return		- The meaning of the value returned in D0 depends on
*			  the context in which the Hook is being used.
*
*    NOTES
*	The functions called through this function should follow normal
*	register conventions unless EXPLICITLY documented otherwise (and
*	they have a good reason too).
*
*    BUGS
*
*    SEE ALSO
*	utility/hooks.h
*
*****************************************************************************

; since the registers are all set up by the time it gets
; here, this function doesn't do much but jump to h_Entry.
CallHook:
	move.l	h_Entry(a0),-(sp)
	rts;
@


36.4
log
@Comment change
@
text
@d7 1
a7 1
*   $Id: callhook.asm,v 36.3 90/11/05 18:55:07 peter Exp Locker: jesup $
d18 1
a18 1
*	CallHookPkt	--  Invoke a Hook function callback. (V36)
d21 2
a22 2
*	CallHookPkt( struct Hook *Hook, VOID *Object, VOID *ParamPkt )
*				  A0		A2		A1
d24 2
d39 1
a39 1
*	
d41 1
a41 1
*	
d53 8
a60 7
*	Hook = pointer to Hook structure as defined in utility/hooks.h
*	Object = useful data structure in the particular context the
*		hook is being used for.
*	ParamPkt = pointer to a parameter packet (often built on the
*		stack); by convention this packet should start off
*		with a longword command code, and the remaining data
*		in the packet depends on that command.
d63 7
a69 5
*	The meaning of the value returned in D0 depends on the context
*	in which the Hook is being used.  Note: the functions called
*	through this function should follow normal register conventions
*	unless EXPLICITLY documented otherwise (and have a good reason
*	too).
@


36.3
log
@Changed $ID to $Id.
@
text
@d7 1
a7 1
*   $Id: V36:src/kickstart/utility/RCS/callhook.asm,v 36.1 90/11/05 12:57:17 peter Exp $
d18 1
a18 1
*	CallHookPkt	--  (New for V36) Invoke a Hook function callback.
d61 4
a64 1
*	in which the Hook is being used.
@


36.2
log
@Changed $Header to $ID.
@
text
@d7 1
a7 1
*   $ID: V36:src/kickstart/utility/RCS/callhook.asm,v 36.1 90/11/05 12:57:17 peter Exp $
@


36.1
log
@Integrated autodocs into source.
@
text
@d7 1
a7 1
*   $Header: V36:src/kickstart/utility/RCS/callhook.asm,v 36.0 90/05/11 22:04:07 jimm Exp $
@


36.0
log
@Initial RCS check-in.
@
text
@d7 1
a7 1
*   $Header: V36:src/kickstart/utility/RCS/callhook.asm,v 36.0 90/05/11 22:02:08 jimm Exp $
d14 55
@
