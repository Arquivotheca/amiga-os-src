head     39.4;
branch   ;
access   ;
symbols  V39_11:39.3 V39_10:39.2 V39_9:39.2 V39_8:39.2 V39_7:39.1 V39_5:39.1;
locks    ; strict;
comment  @* @;


39.4
date     93.02.10.15.04.33;  author vertex;  state Exp;
branches ;
next     39.3;

39.3
date     92.09.04.16.37.40;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.04.09.03.05.10;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.04.04.16.29.59;  author mks;  state Exp;
branches ;
next     ;


desc
@Public header file for PackStructureTags
and UnpackStructureTags().
@


39.4
log
@Cleaned up docs
@
text
@	IFND	UTILITY_PACK_I
UTILITY_PACK_I	EQU	1
**
**	$Id: pack.i,v 39.3 92/09/04 16:37:40 mks Exp Locker: vertex $
**
**	Control attributes for Pack/UnpackStructureTags()
**
**	(C) Copyright 1992 Commodore-Amiga Inc.
**	All Rights Reserved
**

;---------------------------------------------------------------------------

	IFND EXEC_TYPES_I
	INCLUDE "exec/types.i"
	ENDC

	IFND EXEC_MACROS_I
	INCLUDE	"exec/macros.i"
	ENDC

	IFND UTILITY_TAGITEM_I
	INCLUDE	"utility/tagitem.i"
	ENDC

;---------------------------------------------------------------------------

; PackTable definition:
;
; The PackTable is a simple array of LONGWORDS that are then evaluated
; by PackStructureTags and UnpackStructureTags.
;
; The table contains compressed information such as the tag offset from
; the base tag.  The tag offset has a limited range so the base tag is
; defined in the first longword.
;
; After the first longword, the fields look as follows:
;
;	+--------- 1 = signed, 0 = unsigned (for bits, 1=inverted boolean)
;	|
;	|  +------ 00 = Pack/Unpack, 10 = Pack, 01 = Unpack, 11 = special
;	| / \
;	| | |  +-- 00 = Byte, 01 = Word, 10 = Long, 11 = Bit
;	| | | / \
;	| | | | | /----- For bit operations: 1 = TAG_EXISTS is TRUE
;	| | | | | |
;	| | | | | | /-------------------- Tag offset from base tag value
;	| | | | | | |                 \
;	m n n o o p q q q q q q q q q q r r r s s s s s s s s s s s s s
;	                                \   | |                       |
;	Bit offset (for bit operations) ----/ |                       |
;	                                      \                       |
;	Offset into data structure -----------------------------------/
;
; A -1 longword signifies that the next longword will be a new base tag
;
; A 0 longword signifies that it is the end of the pack table.
;
; What this implies is that there are only 13-bits of address offset
; and 10 bits for tag offsets from the base tag.  For most uses this
; should be enough, but when this is not, either multiple pack tables
; or a pack table with extra base tags would be able to do the trick.
; The goal here was to make the tables small and yet flexible enough to
; handle most cases.
;
	BITDEF	PST,SIGNED,31
	BITDEF	PST,UNPACK,30	; Note that these are active low...
	BITDEF	PST,PACK,29	; Note that these are active low...
	BITDEF	PST,EXISTS,26	; Tag exists bit true flag hack...

;---------------------------------------------------------------------------

	ENDC	; UTILITY_PACK_I
@


39.3
log
@Changed header to match style
@
text
@d4 1
a4 1
**	$Id: pack.h,v 39.2 92/04/09 03:05:00 mks Exp $
d11 55
a65 51
*******************************************************************************
*
* PackStructureTags() and UnpackStructureTags(), two very important routines
* for 3.0...
*
*******************************************************************************
*
	include	"exec/types.i"
	include	"exec/macros.i"
	include	"utility/tagitem.i"
*
*******************************************************************************
*
* PackTable definition:
*
* The PackTable is a simple array of LONGWORDS that are then evaluated
* by PackStructureTags and UnpackStructureTags.
*
* The table contains compressed information such as the tag offset from
* the base tag.  The tag offset has a limited range so the base tag is
* defined in the first longword.
*
* After the first longword, the fields look as follows:
*
*	+--------- 1 = signed, 0 = unsigned (for bits, 1=inverted boolean)
*	|
*	|  +------ 00 = Pack/Unpack, 10 = Pack, 01 = Unpack, 11 = special
*	| / \
*	| | |  +-- 00 = Byte, 01 = Word, 10 = Long, 11 = Bit
*	| | | / \
*	| | | | | /----- For bit operations: 1 = TAG_EXISTS is TRUE
*	| | | | | |
*	| | | | | | /-------------------- Tag offset from base tag value
*	| | | | | | |                 \
*	m n n o o p q q q q q q q q q q r r r s s s s s s s s s s s s s
*	                                \   | |                       |
*	Bit offset (for bit operations) ----/ |                       |
*	                                      \                       |
*	Offset into data structure -----------------------------------/
*
* A -1 longword signifies that the next longword will be a new base tag
*
* A 0 longword signifies that it is the end of the pack table.
*
* What this implies is that there are only 13-bits of address offset
* and 10 bits for tag offsets from the base tag.  For most uses this
* should be enough, but when this is not, either multiple pack tables
* or a pack table with extra base tags would be able to do the trick.
* The goal here was to make the tables small and yet flexible enough to
* handle most cases.
*
d70 4
a73 8
*
*******************************************************************************
*
	; Macros will go here...
*
*******************************************************************************
*
	ENDC
@


39.2
log
@Changed definition to have the EXISTS hack
@
text
@d1 10
a12 8
* $Id: pack.i,v 39.1 92/04/04 16:29:59 mks Exp Locker: mks $
*
* $Log:	pack.i,v $
* Revision 39.1  92/04/04  16:29:59  mks
* Initial release.  Macros not done yet
*
*******************************************************************************
*
d72 2
@


39.1
log
@Initial release.  Macros not done yet
@
text
@d3 1
a3 1
* $Id$
d5 4
a8 1
* $Log$
d39 5
a43 3
*	| | | | | /---------------------- Tag offset from base tag value
*	| | | | | |                   \
*	n o o p p q q q q q q q q q q q r r r s s s s s s s s s s s s s
d54 1
a54 1
* and 11 bits for tag offsets from the base tag.  For most uses this
d63 1
@
