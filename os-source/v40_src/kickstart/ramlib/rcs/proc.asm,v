head     36.4;
branch   ;
access   ;
symbols  V40_2:36.4 V40_1:36.4 V39_5:36.4 V39_4:36.4 V39_3:36.4 V39_2:36.4 V37_13:36.4 V37_11:36.4 V37_10:36.4 V37_2:36.3 V36_133:36.3 V36_131:36.3 V36_129:36.3 V36_121:36.3 V36_119:36.2 V36_118:36.2 V36_116:36.2 V36_115:36.1 V36_114:36.0 V36_111:36.0;
locks    ; strict;
comment  @*   @;


36.4
date     91.02.07.12.50.24;  author darren;  state Exp;
branches ;
next     36.3;

36.3
date     90.05.14.11.57.05;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     90.04.13.11.36.26;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     90.04.02.11.11.47;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     90.03.07.13.45.57;  author kodiak;  state Exp;
branches ;
next     ;


desc
@ramlib process
@


36.4
log
@Propagate calling processes pr_WindowPtr field to ramlib process.
@
text
@**
**	$Id: proc.asm,v 36.3 90/05/14 11:57:05 kodiak Exp Locker: darren $
**
**      ramlib process
**
**      (C) Copyright 1989 Commodore-Amiga, Inc.
**          All Rights Reserved
**

	SECTION	ramlib,code

**	Includes

	INCLUDE	"ramlib.i"

**	Exports

	XDEF	ProcSegment

**	Imports

	XLVO	GetMsg			; Exec
	XLVO	ReplyMsg		;
	XLVO	WaitPort		;

	XREF	LoadModule


**********************************************************************
	CNOP	0,4
		dc.l	0		; allocation size for fake segment list
ProcSegment:
		; fake ramlib process segment
		dc.l	0		; next segment in fake segment list

*
*   The ramlib.process will loop on the following:
*
*   4.	Wait at the request message port for a module request, invoke
*	LoadModule, and reply the message.
*

		;-- find exec & ramlib data
		move.l	ABSEXECBASE,a6
		move.l	ex_RamLibPrivate(a6),a5

		;-- initialize the rest of the rl_LoadPort
		move.l	ThisTask(a6),a2
		move.l	a2,rl_LoadPort+MP_SIGTASK(a5)
		;	clr FLAGS, set SIGBIT
		move.w	#SIGB_SINGLE,rl_LoadPort+MP_FLAGS(a5)
		bra.s	pGetMsg


		;-- wait for module request
pWaitPort:
		lea	rl_LoadPort(a5),a0
		CALLLVO	WaitPort

		;-- get any module requests
pGetMsg:
		lea	rl_LoadPort(a5),a0
		CALLLVO	GetMsg
		tst.l	d0
		beq.s	pWaitPort

		;-- invoke LoadModule with this request
		move.l	d0,a3
		lea	-op_SR_LMMsg(a3),a4
		move.l	op_CurrentDir(a4),pr_CurrentDir(a2)
		move.l	op_HomeDir(a4),pr_HomeDir(a2)
		move.l	op_WindowPtr(a4),pr_WindowPtr(a2)

		bsr	LoadModule

		;-- reply the module request
		move.l	a3,a1
		CALLLVO	ReplyMsg

		bra.s	pGetMsg

	END
@


36.3
log
@o   propagates pr_CurrentDir and pr_HomeDir to ramlib process for it's use
    if invoker is a process, and sets them to zero if invoker is a task.
@
text
@d2 1
a2 1
**	$Id: proc.asm,v 36.2 90/04/13 11:36:26 kodiak Exp Locker: kodiak $
d72 2
@


36.2
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d48 2
a49 1
		move.l	ThisTask(a6),rl_LoadPort+MP_SIGTASK(a5)
d70 2
@


36.1
log
@for rcs 4.x header change
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/ramlib/RCS/proc.asm,v 36.0 90/03/07 13:45:57 kodiak Exp Locker: kodiak $
@


36.0
log
@initial release
@
text
@d2 1
a2 1
**	$Header$
@
