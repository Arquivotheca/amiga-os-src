head     39.0;
branch   ;
access   ;
symbols  V39_3:39.0 V39_2:39.0 V39_1:39.0 V37_128:36.18 V37_120:36.16 V37_72:36.14 V37_57:36.12 V37_1:36.10 V36_51:36.9 V36_50:36.9 V36_48:36.9 V36_47:36.9 V36_46:36.9 V36_45:36.9 V36_43:36.8 V36_42:36.8 V36_40:36.8 V36_31:36.6 V36_30:36.6 V36_28:36.6 V36_26:36.6 V36_25:36.6 V36_22:36.6 V36_21:36.5 V36_20:36.4 V36_19:36.4 V36_18:36.4 V36_15:36.4 V36_14:36.4 V36_12:36.4 V36_11:36.4 V36_9:36.4 V36_8:36.3 V36_7:36.2 V36_6:36.2 V36_5:36.1 V36_4:36.1 V36_2:1.2;
locks    ; strict;
comment  @* @;


39.0
date     92.01.20.13.10.34;  author mks;  state Exp;
branches ;
next     36.18;

36.18
date     91.04.22.15.56.11;  author darren;  state Exp;
branches ;
next     36.17;

36.17
date     91.04.22.14.06.06;  author darren;  state Exp;
branches ;
next     36.16;

36.16
date     91.04.10.18.03.08;  author darren;  state Exp;
branches ;
next     36.15;

36.15
date     91.04.09.13.47.35;  author darren;  state Exp;
branches ;
next     36.14;

36.14
date     91.03.21.14.53.52;  author darren;  state Exp;
branches ;
next     36.13;

36.13
date     91.03.21.13.50.43;  author darren;  state Exp;
branches ;
next     36.12;

36.12
date     91.03.14.17.44.47;  author darren;  state Exp;
branches ;
next     36.11;

36.11
date     91.03.14.17.25.09;  author darren;  state Exp;
branches ;
next     36.10;

36.10
date     91.01.25.15.46.36;  author rsbx;  state Exp;
branches ;
next     36.9;

36.9
date     90.04.01.19.13.18;  author rsbx;  state Exp;
branches ;
next     36.8;

36.8
date     90.02.19.18.04.33;  author rsbx;  state Exp;
branches ;
next     36.7;

36.7
date     90.02.16.11.56.27;  author rsbx;  state Exp;
branches ;
next     36.6;

36.6
date     89.09.15.18.55.40;  author rsbx;  state Exp;
branches ;
next     36.5;

36.5
date     89.09.13.15.17.36;  author rsbx;  state Exp;
branches ;
next     36.4;

36.4
date     89.08.16.13.31.36;  author rsbx;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.14.18.17.08;  author rsbx;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.09.19.14.56;  author rsbx;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.09.18.09.57;  author rsbx;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.09.17.48.05;  author rsbx;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.09.14.10.10;  author rsbx;  state Exp;
branches ;
next     ;


desc
@Contains all code for operation of the microhertz unit.
@


39.0
log
@Timer device now calls battclock to read the base system time.
Also made some branches short...
@
text
@*************************************************************************
*									*
*	Copyright (C) 1985, Commodore Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************


*************************************************************************
*
* $Id$
*
* $Log$
*************************************************************************

	SECTION	timer

***#*** Included Files ***********************************************

	INCLUDE	'hardware/intbits.i'
	INCLUDE	'hardware/cia.i'
	INCLUDE	'resources/cia.i'

	INCLUDE	'exec/types.i'
	INCLUDE	'exec/ables.i'
	INCLUDE 'exec/interrupts.i'

	INCLUDE	'asmsupp.i'
	INCLUDE	'timer.i'
	INCLUDE 'macros.i'
	INCLUDE 'constants.i'
	INCLUDE 'internal.i'
	INCLUDE 'V:src/kickstart/cia/internal.i'
	INCLUDE 'debug.i'

***#*** Imported Names ***********************************************

*------ Tables -------------------------------------------------------

*------ Defines ------------------------------------------------------

	XREF	_ciaa
	XREF	_ciab
	XREF	_intreq
	XREF	_intena
	XREF	_AbsExecBase

	INT_ABLES

*------ Functions ----------------------------------------------------

	XREF	InsertReq
	XREF	IntCommon
	XREF	IntEnd

*------ System Library Functions -------------------------------------

	XSYS	Insert
	XSYS	Alert
	XSYS	ReplyMsg
	XSYS	SetICR
	XSYS	AbleICR
	XSYS	AddICRVector
	XSYS	Cause

***#*** Exported Names ***********************************************

*------ Functions ----------------------------------------------------

	XDEF	Tick0
	XDEF	AddReqUnit0
	XDEF	RemReqUnit0
	XDEF	EClock_Int
	XDEF	ReadEClockTime
	XDEF	ReadESClockTime
	XDEF	CalcDelay0
	XDEF	Mult64
	XDEF	AbortMicroTimer
	XDEF	RethinkMicroTimer
	XDEF	EIncSTTOD
	XDEF	EIncSTEClock
	XDEF	SwapCIA
	XDEF	Tick2

*------ Assumptions -------------------------------------------

	IFNE	CIAICRB_TA
	FAIL	"CIAICRB_TA not 0 - recode"
	ENDC

	IFNE	CIAICRB_TB-1
	FAIL	"CIAICRB_TB not 1 - recode"
	ENDC

*------ Data ---------------------------------------------------------

***#*** Local Definitions ********************************************

ASTOP_AND equ	CIACRBF_ALARM+CIACRAF_PBON+CIACRAF_OUTMODE+CIACRAF_RUNMODE+CIACRAF_SPMODE

	; STOP -
	;	START bit 0 == 0 (STOP IMMEDIATELY)
	;	PBON  bit 1 == same
	;	OUT   bit 2 == same
	;       RUN   bit 3 == same
	;       LOAD  bit 4 == 0 (NO FORCE LOAD)
	;       IN    bit 5 == 0 (counts 02 pulses)
	;       SP    bit 6 == same
	;       ALARM bit 7 == same (unused on ciacra, used by graphics TOD)


ASTART_OR equ	CIACRAF_RUNMODE

	; START -
	;	START bit 0 == same (STARTED BY LOAD OF HI BYTE)
	;	PBON  bit 1 == same
	;	OUT   bit 2 == same
	;       RUN   bit 3 == 1    (ONE SHOT MODE)
	;       LOAD  bit 4 == same
	;       IN    bit 5 == same
	;       SP    bit 6 == same
	;       ALARM bit 7 == same



ARESET_AND	EQU	CIACRBF_ALARM+CIACRAF_PBON+CIACRAF_OUTMODE+CIACRAF_SPMODE

	; RESET -
	;	START bit 0 == 0 (STOP IMMEDIATELY)
	;	PBON  bit 1 == same
	;	OUT   bit 2 == same
	;       RUN   bit 3 == 0 (TURN RUNMODE OFF - POWER-UP DEFAULT)
	;       LOAD  bit 4 == 0 (NO FORCE LOAD)
	;       IN    bit 5 == 0 (counts 02 pulses)
	;       SP    bit 6 == same
	;       ALARM bit 7 == same (unused on ciacra, used by graphics TOD)



INTERRUPTS_OFF	EQU	00


**********************************************************************
*
* Call back routine for cia swapping code (called within DISABLE)
*
* A2 -- CIABASE of CIA to AddICRVector() from
* A3 -- Ptr to other CIA BASE
* D2 -- TD bit to ask for
* D3 -- index # (3..0)
*
SwapCIA:

		movea.l	CR_SharedData(a2),a6
		move.l	cs_TimerBase(a6),a6

	;-- stop timer immediately
	;
	;-- turn off RUNMODE bit - fix for games like
	;-- BLUE ANGELS from Accolade - control register
	;-- dependency

		move.l	TD_JUMPYCIACRX(a6),a0
		andi.b	#ARESET_AND,(a0)

	;-- recalculate:
	;--
	;   1.) Ptr to low byte of interval timer (high byte is
	;       known to be $100 higher)
	;
	;   2.) Ptr to control register.
	;
	;

		lsl.b	#3,d3			;index (3..0) * 8
		lea	ciatable(pc,d3.w),a0
		move.l	(a0)+,TD_JUMPYCIATXLO(a6)
		move.l	(a0),TD_JUMPYCIACRX(a6)

	;-- recalculate:
	;--
	;   3.) Ptr to interrupt code to call when interval timer
	;	counts down.
	;
	;   4.) Data for interrupt code.

		lea	Tick2(pc),a0

		tst.b	CR_HWADDR+3(a2)		;00 for b, 01 for a
		beq.s	sw_install

		lea	Tick0(pc),a0
		move.l	a6,a3

	;-- install new ICR Vector
	;
	;-- Note that we are still in Disable(), and that AddICRVector()
	;-- is going to succeed because we already know that the timer we
	;-- are asking for is free.

sw_install:

		lea	TD_CIATJUMP(a6),a1
		move.l	a0,IS_CODE(a1)		;Tick0     or Tick2
		move.l	a3,IS_DATA(a1)		;timerbase or ciaabase
		move.l	d2,d0

	;
	;-- Clear INMODE1 bit on control register B, CIAB - if timer
	;-- will be using CIAB Timer B.  For 02 pulse count-down mode.
	;
		beq.s	sw_addicrv
		and.b	#(~CIACRBF_INMODE1),_ciab+ciacrb
sw_addicrv:
		exg	a6,a2
		CALLSYS	AddICRVector

	;-- restart micro timer

		move.l	a2,a6

	;-- A3 MUST be set up before calling RethinkMicroTimer

		lea	TD_ECLOCKLIST(a6),a3
		bsr	AbortMicroTimer		;STOP micro timer
						;and set 1 shot mode
		bra	RethinkMicroTimer
		;rts

	;-- cia table (preferential order worst-best choice)

ciatable:


		dc.l	_ciab+ciatalo		;CIAB timer A
		dc.l	_ciab+ciacra		;index 0

		dc.l	_ciaa+ciatalo		;CIAA timer A
		dc.l	_ciaa+ciacra		;index 1

		dc.l	_ciab+ciatblo		;CIAB timer B
		dc.l	_ciab+ciacrb		;index 2

		dc.l	_ciaa+ciatalo		;CIAA timer A
		dc.l	_ciaa+ciacra		;index 3

***#*** Timer/Tick2 **************************************************
*
*   NAME
*	Tick2 -- Generate a level 2 INT
*
*   SYNOPSIS
*	Tick2( ptr to CIAA Base )
*	       A1
*
*   FUNCTION
*	This is the interrupt routine for the microtic interval timer
*	if running off of one of the CIAB interval timers.  It generates
*	a level 2 hardware interrupt, and sets a bit in ciaa.resource
*	which will be caught by the cia.resource interrupt routine.
*
*	This is done to lower level 6 interrupts to level 2, thereby
*	allowing more important level 3-6 interrupts to be processed
*	first.
*
*   INPUTS
*
*   EXCEPTIONS
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
Tick2:
		bset	#TIMERINT,CR_TimerINT(a1)
		move.w	#INTF_SETCLR!INTF_PORTS,_intreq
		rts

**********************************************************************
*
* Unit specific insertion of a time request
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit list (given)
*	A2 -- munged
*	A1 -- request (given, munged)
*	A0 -- munged


AddReqUnit0:
*$* debug
*		ERRMSG	"AddReqUnit0"
*$* debug
		bsr	AbortMicroTimer
		bsr	CalcDelay0
		bsr	InsertReq
		bra	RethinkMicroTimer
		;rft

**********************************************************************
*
* Unit specific removal of a time request
*
*	this routine runs 'DISABLED' and returns 'ENABLED'
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit list (given)
*	A2 -- munged
*	A1 -- request (given, munged)
*	A0 -- munged

RemReqUnit0:
*$* debug
*		ERRMSG	"RemReqUnit0"
*$* debug
		REMOVE
		bsr	AbortMicroTimer
		bsr	RethinkMicroTimer
		TD_ENABLE	A0,TD_SYSLIB(a6)
		rts

***#*** System/Drivers/Timer/TickInt **********************************
*
*   NAME
*	TickInt - Handle and interrupt tick
*
*   SYNOPSIS
*	TickInt( Unit )
*	         A1
*
*   FUNCTION
*	This is the interrupt routine for the microtic interval timer
*
*   INPUTS
*
*   EXCEPTIONS
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*
*	A6 -- Device Data
*	A3 -- unit list
*	A1 -- munged
*	A0 -- munged
*

Tick0:
		MOVEM.L	A3,-(SP)
		MOVE.L	A1,A6
		lea	TD_ECLOCKLIST(a6),a3

	;-- AbortMicroTimer() inline for speed

		move.l	TD_JUMPYCIACRX(a6),a0
		andi.b	#ASTOP_AND,(a0)
		ori.b	#ASTART_OR,(a0)	;set 1 shot mode

		subq.l	#8,sp
		move.l	sp,a0
		bsr.s	ReadEClockTime
		bsr	IntCommon		; check for expired reqs
		addq.l	#8,sp

		bsr	RethinkMicroTimer

		bra	IntEnd
		; rft


**********************************************************************
*
* Returns the time, in E-clock tics, since timer.device was initialized.
*	EV_HI is the hi order 32 bits, EV_LO is the lo order 32 bits.
*
* Exits DISABLED ... minimize time spent in DISABLE for MIDI performance.
*                    called by RethinkMicroTimer() only
*
*   REGISTER USAGE
*	A6 -- Device Data (given)
*	A1 -- munged
*	A0 -- eclockval for "e-clock time" (given)
*	D1 -- munged
*	D0 -- munged
*
ReadEMClockTime:

		movem.l	d2-d5/a0/a2,-(sp)

		moveq	#00,d0		; argument for SetICR()
		moveq	#00,d2
		moveq	#01,d5		; Flag results of SetICR()

		lea	_ciaa,a1

		move.l	TD_COUNTERRESOURCE(a6),a2
		exg	a6,a2		; a6=ciaabase a2=timerbase

	; SPECIAL DISABLE here - add two (2) to IDNestCnt so that
	; ReadEClockTime() exits DISABLED

		move.l	TD_SYSLIB(a2),a0
		move.w	#$04000,_intena
		addq.b	#2,IDNestCnt(a0)
		bra.s	readeclock

**********************************************************************
*
* Returns the time, in E-clock tics, since timer.device was initialized.
*	EV_HI is the hi order 32 bits, EV_LO is the lo order 32 bits.
*
* And grabs current TD_SYSTIME SECS, and MICROS within disable
*
*   REGISTER USAGE
*	A6 -- Device Data (given)
*	A1 -- Ptr to TIVEVAL structure (given)
*	A0 -- eclockval for "e-clock time" (given)
*	D1 -- munged
*	D0 -- munged
*
ReadESClockTime:

		movem.l	d2-d5/a0/a2,-(sp)

		moveq	#00,d0		; argument for SetICR()
		moveq	#00,d2
		moveq	#01,d5		; Flag results of SetICR()

		move.l	TD_COUNTERRESOURCE(a6),a2
		exg	a6,a2		; a6=ciaabase a2=timerbase

		TD_DISABLE	A0,TD_SYSLIB(a2)

		move.l	TD_SYSTIME+TV_SECS(a2),TV_SECS(a1)
		move.l	TD_SYSTIME+TV_MICRO(a2),TV_MICRO(a1)
		lea	_ciaa,a1
		bra.s	readeclock

**********************************************************************
*
* Returns the time, in E-clock tics, since timer.device was initialized.
*	EV_HI is the hi order 32 bits, EV_LO is the lo order 32 bits.
*
*
*   REGISTER USAGE
*	A6 -- Device Data (given)
*	A1 -- munged (FLAG return - if eclock interrupt at read time)
*	A0 -- eclockval for "e-clock time" (given)
*	D1 -- munged
*	D0 -- munged
*
ReadEClockTime:
		movem.l	d2-d5/a0/a2,-(sp)

	; set-up as much as possible before disable

		moveq	#00,d0		; argument for SetICR()
		moveq	#00,d2
		moveq	#01,d5		; Flag results of SetICR()

		move.l	TD_COUNTERRESOURCE(a6),a2
		exg	a6,a2		; a6=ciaabase a2=timerbase
		lea	_ciaa,a1

	;
	; Read hardware values, and check for an unprocessed
	; interrupt, which means that the hardware counters
	; rolled-over from $0000->$xxxx either before we read
	; the hardware counters, or during.
	;
	; This code needs to be -fast-, and get out of DISABLE
	; ASAP for the sake of MIDI performance.
	;
	; Testing reveals that we will get an unprocessed
	; interrupt once every 1-2 seconds while reading the hardware
	; values (average case - VBLANK interrupt calls ReadEClockTime
	; a lot, as does much of the rest of the timer.device code).
	;

		TD_DISABLE	A0,TD_SYSLIB(a2)

readeclock:
		move.b	ciatbhi(a1),d3
		move.b	ciatblo(a1),d4
		move.b	ciatbhi(a1),d2

		CALLSYS	SetICR		; sample interrupts

		btst	#CIAICRB_TB,d0	; check if TB interrupt is pending
		beq.s	CountersValid

		lea	_ciaa,a1	; if so, assume previous sample
					; is invalid, and re-read hardware
		move.b	ciatbhi(a1),d3
		move.b	ciatblo(a1),d4
		move.b	ciatbhi(a1),d2
					;
		moveq	#00,d5          ; Flag interrupt happened

CountersValid:
		movem.l	TD_ECLOCKTIME(a2),d0/d1

		TD_ENABLE	A0,TD_SYSLIB(a2)

		move.l	a2,a6		; restore a6

	;
	; check for hi-byte roll-over while reading hardware values
	;
		cmp.b	d3,d2
		beq.s	GotCounterParts
		moveq.l	#-1,d4
GotCounterParts:

	;
	; form an incrementing number from the decrementing number
	;
		lsl.w	#8,d2		; hibyte << 8
		move.b	d4,d2		; OR lowbyte
		addq.w	#1,d2		; +1, and form 2's complement
		neg.w	d2		; tic count in d2

	;
	; check to see if the counters rolled over from 0000->XXXX
	;
	; by checking to see if an EClock interrupt was left
	; unprocessed when we read the software, and hardware
	; counters
	;

		tst.b	d5
		bne.s	AddCounterParts

	;
	; roll-over, so add $10000 to EClock time in registers
	;
	; software values in TD_ECLOCKTIME will be incremented
	; by the EClock_Int routine
	;
		add.l	#$10000,d1
		addx.l	d5,d0		; d5 == 0L

AddCounterParts:

		move.w	d2,d1		; low word should always be 0
		move.w	d5,a1		; return SetICR() flag in A1

		movem.l	(sp)+,d2-d5/a0/a2
		movem.l	d0/d1,(a0)
		rts

**********************************************************************
*
* abort the micro interval timer (if active)
*
*	this must run 'DISABLED'
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A2 -- munged
*	A1 -- must be restored if changed
*	A0 -- munged

AbortMicroTimer:
; stop counter A and set 1 shot mode


		move.l	TD_JUMPYCIACRX(a6),a0
		andi.b	#ASTOP_AND,(a0)
		ori.b	#ASTART_OR,(a0)	;set 1 shot mode
		rts

**********************************************************************
*
* set the micro interval timer
*
*	this must run DISABLED'
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit list (given)
*	A1 -- munged
*	A0 -- munged
*	D1 -- munged
*	D0 -- munged


RethinkMicroTimer:

; if the request queue is not empty, program counter A to interrupt us
;	when the first request should be returned. If the desired count
;	is greater than 64k-1, set count to 60k. If desired count is less
;	than 50 or negative, special handling should be looked into.



	; quick check for empty list outside of disable

		cmp.l	LH_TAIL+LN_PRED(a3),a3
		beq.s	RMTEnd

		subq.l	#8,sp
		move.l	sp,a0

		bsr	ReadEMClockTime

	; we are now disabled, recheck to make sure list isnt empty

		cmp.l	LH_TAIL+LN_PRED(a3),a3
		beq.s	RMTExit

		move.l	(a3),a1
		move.l	IOTV_TIME+TV_MICRO(a1),d0
		sub.l	EV_LO(a0),d0
		move.l	d0,EV_LO(a0)
		move.l	IOTV_TIME+TV_SECS(a1),d0
		move.l	(a0),d1		;EV_HI - assembler doesnt optimize
		subx.l	d1,d0
		bcs.s	NegCount
		tst.l	d0
		bne.s	BigCount

		move.l	EV_LO(a0),d0
		cmpi.l	#LONGCOUNT,d0
		bcc.s	BigCount
		moveq	#SHORTCOUNT,d1
		cmp.l	d1,d0		;faster than CMPI.L
		bcs.s	NegCount

; here the count in d0 is known to be in an acceptable range

GotGoodCount:

		move.l	TD_JUMPYCIATXLO(a6),a0
		move.b	d0,(a0)
		lsr.w	#8,d0
		move.b	d0,$100(a0)	;ugly, but we know it to be true
					;starts timer (in 1 SHOT MODE)
RMTExit:

		TD_ENABLE	A0,TD_SYSLIB(a6)
		addq.l	#8,sp

RMTEnd:
		rts

BigCount:
		move.l	#LONGCOUNT,d0
		bra.s	GotGoodCount

NegCount:
; set the interrupt, then return
*$* debug
*		ERRMSG	"NegCount"
*$* debug

; this is much like calling SetICR() to generate an interrupt, however
; we can't afford the overhead of SetICR() here due to MIDI performance.
; With the addition of all other OS optimizations, we are still seeing
; overruns when RethinkMicroTimer() falls through this section of code.


		move.l	TD_COUNTERRESOURCE(a6),a0	;CIA-A!
		bset	#TIMERINT,CR_TimerINT(a0)	;set interrupt
		move.w	#INTF_SETCLR!INTF_PORTS,_intreq	;and return

		TD_ENABLE	A0,TD_SYSLIB(a6)
		addq.l	#8,sp

		rts

**********************************************************************
*
* Calculates the point in "EClock time" that the request should be
*	returned
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A2 -- munged
*	A1 -- request (given)
*	A0 -- munged

CalcDelay0:
*$* debug
*		ERRMSG	"CalcDelay0"
*$* debug
		subq.l	#8,sp
		move.l	sp,a0

		move.l	a1,-(sp)
		bsr	ReadEClockTime
		move.l	(sp)+,a1

		move.l	IOTV_TIME+TV_SECS(a1),d0
		move.l	TD_ECLOCKHERTZ(a6),d1
		bsr	Mult64

		move.l	IOTV_TIME+TV_MICRO(a1),-(sp)

		add.l	EV_LO(a0),d1
		move.l	d1,IOTV_TIME+TV_MICRO(a1)
		move.l	EV_HI(a0),d1
		addx.l	d1,d0
		move.l	d0,IOTV_TIME+TV_SECS(a1)

		move.l	(sp)+,d0
		move.l	TD_ECLOCKCONST1(a6),d1
		bsr.s	Mult64

		move.w	d0,d1
		swap.w	d1
		clr.w	d0
		swap.w	d0

		add.l	d1,IOTV_TIME+TV_MICRO(a1)
		move.l	IOTV_TIME+TV_SECS(a1),d1
		addx.l	d1,d0
		move.l	d0,IOTV_TIME+TV_SECS(a1)

		addq.l	#8,sp
		rts

**********************************************************************
*
* counter B roll-over interrupt routine
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A1 -- munged
*	A0 -- munged
*	D1 -- munged
*	D0 -- munged
*

EClock_Int:

	; A0 will be used to point to ciaa base ... we are going to
	; pull a dirty trick here.
	;
	; This code was identified as the biggest cause of MIDI
	; overruns, so it, and ReadEClockTime() had to be rewritten.
	; ReadEClockTime() notes that there is a pending interrupt,
	; and adds $10000 to its calculated value, but the
	; EClock_Int() routine is actually responsible for updating
	; the software values (TD_ECLOCKTIME) 11x per second.
	;
	; However once the software values have been updated, we
	; want to make sure that SetICR() returns FALSE, so...
	;
	; This code clears a bit in ciabase which would normally
	; be cleared after all interrupts have been processed.
	; The proper way to do this is to call SetICR(), but we
	; can't afford the overhead because of the impact on MIDI
	; performance.
	;


		move.l	TD_COUNTERRESOURCE(a1),a0	;ciaa base

		TD_DISABLE	a6,TD_SYSLIB(a1)	;sys lib in a6


		addi.l	#$10000,TD_ECLOCKTIME+EV_LO(a1)
		moveq	#00,d0
		move.l	TD_ECLOCKTIME+EV_HI(a1),d1
		addx.l	d0,d1
		move.l	d1,TD_ECLOCKTIME+EV_HI(a1)

	;
	; Clear processing bit in ciaa base - now SetICR() will
	; NOT return true for this interrupt again until the next
	; real interrupt.
	;

		bclr	#CIAICRB_TB,CR_IProcessing(a0)

		jsr	EIncSTfmt(a1)	; do systime processing

NoTBInt:
		ENABLE		a6,NOFETCH		;faster than timer
		rts					;TD_ENABLE macro


	;
	; If the ciaa TOD counter isn't running off the power-line,
	; the EClock_Int() code is used to update TD_SYSTIME values.
	;


EIncSTEClock:
		addi.l	#$10000,TD_SYSTIME+TV_MICRO(a1)
		move.l	TD_SYSTIME+TV_MICRO(a1),d0
		cmp.l	TD_ECLOCKHERTZ(a1),d0
		bcs.s	EIncSTEClockE
		addq.l	#1,TD_SYSTIME+TV_SECS(a1)
		sub.l	TD_ECLOCKHERTZ(a1),d0
		move.l	d0,TD_SYSTIME+TV_MICRO(a1)
EIncSTEClockE:

	;
	; jsr EIncSTfmt(An) gets us here if we are using the TOD
	; interrupt to update TD_SYSTIME values
	;

EIncSTTOD:
		rts


**********************************************************************
*
* multiply two unsigned 32 bit integers and return the 64 bit result
*
*   REGISTER USAGE
*	D4 -- scratch (restored)
*	D3 -- scratch (restored)
*	D2 -- scratch (restored)
*	D1 -- arg 1 (given), result 32:63
*	D0 -- arg 0 (given), result 0:31
*

Mult64:
*$* debug
*		ERRMSG	"Mult64"
*$* debug
		movem.l	d2-d4,-(sp)

		move.l	d1,d3
		mulu.w	d0,d3		; 24
		move.l	d1,d2
		swap.w	d2
		swap.w	d0
		mulu.w	d0,d2		; 13

		swap.w	d3
		bsr.s	PartMult
		swap.w	d0
		swap.w	d1
		bsr.s	PartMult
		swap.w	d3

		move.l	d2,d0
		move.l	d3,d1

		movem.l	(sp)+,d2-d4
		rts

PartMult:
		move.l	d1,d4
		mulu.w	d0,d4		; 14 (23)
		add.w	d4,d3
		clr.w	d4
		swap.w	d4
		addx.l	d4,d2
		rts


**********************************************************************




	END
@


36.18
log
@One last optimization suggested by Bryce; optimal code path
for RethinkMicroTimer to minimize time spent in ReadEClockTime()
@
text
@d10 1
a10 1
* micro.asm
d12 1
a12 71
* Source Control
* ------ -------
* 
* $Id: micro.asm,v 36.17 91/04/22 14:06:06 darren Exp Locker: darren $
*
* $Locker: darren $
*
* $Log:	micro.asm,v $
* Revision 36.17  91/04/22  14:06:06  darren
* Faster way to generate an interrupt if RethinkMicroTimer() comes
* up with a minimal value.
* 
* Revision 36.16  91/04/10  18:03:08  darren
* Fix for Blue Angels by Accolade - turn off RUNMODE bit when doing an
* interval timer swap (reset to 1.3 defaults)
* 
* Revision 36.15  91/04/09  13:47:35  darren
* Major changes for better MIDI performance (decrease DISABLE time)
* 
* Revision 36.14  91/03/21  14:53:52  darren
* Yet a faster way to recalculate the ptrs to the cia control registers
* timer.device will be using after a cia jump.
* 
* Revision 36.13  91/03/21  13:50:43  darren
* Code added to turn on/off interrupt enable for microtic timer;
* saves the SEGA games.  Pull some extra code out of RethinkMicroTimer()
* -- code which stops the timer again was redundant, and setting
* of the one-shot mode bit can be done outside of disable.  Reworked
* the cia swap code (the code which recalcs the pointers to the
* low time counter, and control register being used).  Swap code now
* calls AbortMicroTimer before RethinkMicroTimer since that code isn't
* within RethinkMicroTimer() anymore.
* 
* Revision 36.12  91/03/14  17:44:47  darren
* One last optimization - move AbortMicroTimer() call in-line for
* MHZ interrupt routine (speed).
* 
* Revision 36.11  91/03/14  17:25:09  darren
* Some optimizations, and major changes.  New swap code to switch which
* interval timer the timer.device is using for its MHZ processing.  A mini
* interrupt incase we are running off of one of the CIAB timers (sets a bit,
* and causes a hardware level 2 interrupt).
* 
* Revision 36.10  91/01/25  15:46:36  rsbx
* Change to V37
* 
* Revision 36.9  90/04/01  19:13:18  rsbx
* RCS version change.
* 
* Revision 36.8  90/02/19  18:04:33  rsbx
* 
* 
* Revision 36.7  90/02/16  11:56:27  rsbx
* 
* 
* Revision 36.6  89/09/15  18:55:40  rsbx
* 
* 
* Revision 36.3  89/08/14  18:17:08  rsbx
* Removed some dead code.
* 
* Revision 36.2  89/08/09  19:14:56  rsbx
* changed some comments for autodoc
* 
* Revision 36.1  89/08/09  18:09:57  rsbx
* *** empty log message ***
* 
* Revision 1.1  89/08/09  14:10:10  rsbx
* Initial revision
*
*
d32 1
a32 1
	INCLUDE '../cia/internal.i'
d214 1
a214 1
		exg	a6,a2	
d370 1
a370 1
		bsr	ReadEClockTime
d415 1
a415 1
	
d447 1
a447 1
	
d456 1
a456 1
*	A1 -- munged (FLAG return - if eclock interrupt at read time) 
d479 1
a479 1
	; 
d539 1
a539 1
	
d717 1
a717 1
		bsr	Mult64
@


36.17
log
@Faster way to generate an interrupt if RethinkMicroTimer() comes
up with a minimal value.
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.16 91/04/10 18:03:08 darren Exp Locker: darren $
d20 4
d455 36
a558 1

d676 1
a676 1
		subq.l	#8,sp
a677 1
		TD_DISABLE	A0,TD_SYSLIB(a6)
d681 1
a682 1
		bsr	ReadEClockTime
d684 7
d718 1
a719 1
RMTEnd:
d723 1
@


36.16
log
@Fix for Blue Angels by Accolade - turn off RUNMODE bit when doing an
interval timer swap (reset to 1.3 defaults)
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.15 91/04/09 13:47:35 darren Exp Locker: darren $
d20 4
d193 12
a218 2
	;-- stop timer immediately

a220 1
		bsr	AbortMicroTimer
d222 2
d228 1
a230 15
	;-- cache new resource ptr - used when we call SetICR()

		move.l	a2,TD_JUMPYRESOURCE(a6)

	;-- cache new bit mask used when we call SetICR()
	;--
	;-- Convert bit number (0 OR 1 for TA OR TB) into a bit
	;-- mask, and OR with the HIGH BIT.

		moveq	#01,d0
		lsl.b	d2,d0
		or.b	#CIAICRF_SETCLR,d0
		move.w	d0,TD_JUMPYTDSET(a6)


a640 3

	IFEQ	FIXSEGA

a642 24
	ENDC

	IFNE	FIXSEGA

		beq	RMTExit

	;-- quick check to see if interrupts have been disabled.  If
	;-- so we have to turn interrupts back on again.  This saves
	;-- some games (e.g., SEGA games which use CIA-A Timer A
	;-- but do not allocate, and they assume that interrupts are off)

		bclr	#INTERRUPTS_OFF,TD_JUMPYABLED(a6)
		beq.s	alreadyon

		move.l	a6,-(sp)
		move.w	TD_JUMPYTDSET(a6),d0
		move.l	TD_JUMPYRESOURCE(a6),a6
		CALLSYS	AbleICR
		move.l	(sp)+,a6

alreadyon:

	ENDC

d651 1
a651 1
		move.l	EV_HI(a0),d1
d660 2
a661 1
		cmpi.l	#SHORTCOUNT,d0
d670 1
a670 1
		lsr.l	#8,d0
a688 1
		move.l	a6,-(sp)
d690 4
a693 4
		move.w	TD_JUMPYTDSET(a6),d0	;documented as UWORD param
		move.l	TD_JUMPYRESOURCE(a6),a6
		CALLSYS	SetICR
		move.l	(sp)+,a6
a694 1
		bra.s	RMTEnd
d696 3
d700 2
a701 1
	IFNE	FIXSEGA
d703 1
a703 21
	;
	;-- disable interrupts if nothing pending to do -- saves some
	;-- games like the SEGA games which use CIA-A Timer A, but they
	;-- do not allocate it, and assume that interrupts are OFF.
	;


RMTExit:
		bset	#INTERRUPTS_OFF,TD_JUMPYABLED(a6)
		bne.s	RMTEnd

		move.l	a6,-(sp)
		move.w	TD_JUMPYTDSET(a6),d0
		and.b	#(CIAICRF_TA!CIAICRF_TB),d0
		move.l	TD_JUMPYRESOURCE(a6),a6
		CALLSYS	AbleICR
		move.l	(sp)+,a6
		bra.s	RMTEnd


	ENDC
@


36.15
log
@Major changes for better MIDI performance (decrease DISABLE time)
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.14 91/03/21 14:53:52 darren Exp Locker: darren $
d20 3
d186 3
d208 6
@


36.14
log
@Yet a faster way to recalculate the ptrs to the cia control registers
timer.device will be using after a cia jump.
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.13 91/03/21 13:50:43 darren Exp Locker: darren $
d20 4
d133 1
d143 10
d157 1
a157 1
ASTOP_AND equ	CIACRAF_PBON+CIACRAF_OUTMODE+CIACRAF_RUNMODE+CIACRAF_SPMODE
d164 2
a165 2
	;       LOAD  bit 4 == OFF (NO FORCE LOAD)
	;       IN    bit 5 == OFF (counts 02 pulses)
d167 1
a167 1
	;             bit 7 == OFF (UNUSED)
d173 1
a173 1
	;	START bit 0 == 0 (STARTED BY LOAD OF HI BYTE)
d176 1
a176 1
	;       RUN   bit 3 == 1 (ONE SHOT MODE)
d180 1
a180 1
	;       TOD   bit 7 == same
d212 1
a212 1
		moveq	#01,d0			;clear upper 24 bits
d249 3
a251 3
	;-- Note that we are still in Disable(), and that its going
	;-- to succeed because we already know that the one we are
	;-- asking for is free.
d259 8
d272 1
a272 1
		exg	a6,a2
d311 1
a311 1
*	level 2 hardware interrupt, and sets a bit in ciaa.resource
d415 1
a415 1
		bsr	AbortMicroTimer
d417 4
d438 2
d442 1
a442 1
*	A1 -- munged
d447 1
d449 1
a449 3
ReadEClockTime:
		move.l	d2,-(sp)
		move.l	a0,-(sp)
d451 3
a453 1
		TD_DISABLE	A1,TD_SYSLIB(a6)
d455 2
a456 7
		bra.s	MidLoop
RECTLoop:
		addi.l	#$10000,TD_ECLOCKTIME+EV_LO(a6)
		moveq	#0,d0
		move.l	TD_ECLOCKTIME+EV_HI(a6),d1
		addx.l	d0,d1
		move.l	d1,TD_ECLOCKTIME+EV_HI(a6)
d458 1
a458 1
		jsr	EIncSTfmt(a6)	; do systime processing
d460 2
a461 1
MidLoop:
d463 17
d481 1
a481 1
		; interleave memory access - leave this order alone
d483 29
a511 5
		moveq	#0,d0
		move.b	ciatbhi(a1),d0
		moveq	#0,d1
		move.b	ciatblo(a1),d1
		moveq	#0,d2
d514 24
a537 1
		cmp.b	d0,d2
d539 1
a539 1
		moveq.l	#-1,d1
d541 7
a547 3
		lsl.w	#8,d2
		move.b	d1,d2
		addq.w	#1,d2
d550 10
a559 6
;	check for pending interrupts
		movem.l	a0/a6,-(sp)
		moveq	#CIAICRF_TB,d0
		move.l	TD_COUNTERRESOURCE(a6),a6
		CALLSYS	SetICR		; test & clear TB int bit
		movem.l	(sp)+,a0/a6
d561 8
a568 2
		btst	#CIAICRB_TB,d0
		bne.s	RECTLoop
d570 1
a570 1
		movem.l	TD_ECLOCKTIME(a6),d0/d1
d572 2
a573 1
		TD_ENABLE	A1,TD_SYSLIB(a6)
d575 1
a575 2
		move.l	(sp)+,a0
		move.w	d2,d1		; low word should always be 0
a576 2

		move.l	(sp)+,d2
d592 1
a592 1
; stop counter A and clear the interrupt request for this counter
a593 1
***		TD_DISABLE	A0,TD_SYSLIB(a6)
a597 2

***		TD_ENABLE	A0,TD_SYSLIB(a6)
d628 9
d654 3
d711 3
d733 3
d801 19
a819 3
		move.l	a1,-(sp)
		moveq	#CIAICRF_TB,d0
		move.l	TD_COUNTERRESOURCE(A1),A6
a820 1
	;-- @@@@@@ Disable after SetICR?
d822 1
a822 5
		TD_DISABLE	a0,TD_SYSLIB(a1)
		CALLSYS	SetICR		; is there really in int?
		move.l	(sp)+,a6
		btst	#CIAICRB_TB,d0
		beq.s	NoTBInt
d824 4
a827 1
		addi.l	#$10000,TD_ECLOCKTIME+EV_LO(a6)
d829 1
a829 1
		move.l	TD_ECLOCKTIME+EV_HI(a6),d1
d831 1
a831 1
		move.l	d1,TD_ECLOCKTIME+EV_HI(a6)
d833 5
a837 1
		jsr	EIncSTfmt(a6)	; do systime processing
d839 4
d844 2
a845 2
		TD_ENABLE	a0,TD_SYSLIB(a6)
		rts
d848 6
d855 3
a857 3
		addi.l	#$10000,TD_SYSTIME+TV_MICRO(a6)
		move.l	TD_SYSTIME+TV_MICRO(a6),d0
		cmp.l	TD_ECLOCKHERTZ(a6),d0
d859 3
a861 3
		addq.l	#1,TD_SYSTIME+TV_SECS(a6)
		sub.l	TD_ECLOCKHERTZ(a6),d0
		move.l	d0,TD_SYSTIME+TV_MICRO(a6)
d863 6
@


36.13
log
@Code added to turn on/off interrupt enable for microtic timer;
saves the SEGA games.  Pull some extra code out of RethinkMicroTimer()
-- code which stops the timer again was redundant, and setting
of the one-shot mode bit can be done outside of disable.  Reworked
the cia swap code (the code which recalcs the pointers to the
low time counter, and control register being used).  Swap code now
calls AbortMicroTimer before RethinkMicroTimer since that code isn't
within RethinkMicroTimer() anymore.
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.12 91/03/14 17:44:47 darren Exp Locker: darren $
d20 10
d178 1
d212 2
a213 10
		move.b	CR_HWADDR+3(a2),d0	;00 for b, 01 for a
		move.b	d0,d1			;cache

		lsl.b	#4,d0			;00   or   16
		tst.b	d2			;00 for a, 01 for b
		beq.s	sw_newregs
		addq.b	#8,d0			;08

sw_newregs:
		lea	ciatable(pc,d0.w),a0
d226 1
a226 1
		tst.b	d1			;00 for b, 01 for a
d259 1
a259 1
	;-- cia table 
d263 1
d265 1
a265 1
		dc.l	_ciab+ciacra		;offset 0
d267 3
d271 1
a271 1
		dc.l	_ciab+ciacrb		;offset 8
d274 1
a274 1
		dc.l	_ciaa+ciacra		;offset 16
@


36.12
log
@One last optimization - move AbortMicroTimer() call in-line for
MHZ interrupt routine (speed).
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.11 91/03/14 17:25:09 darren Exp Locker: darren $
d20 4
d133 12
d147 9
d157 4
d186 1
a186 1
		moveq	#01,d0
a190 2
	;-- recalculate the pre-calced ptrs to the cia's control 
	;-- register, and count down timer.
d192 8
a199 2
		move.l	#_ciab+ciatblo,TD_JUMPYCIATXLO(a6)
		move.l	#_ciab+ciacrb,TD_JUMPYCIACRX(a6)
d201 2
d204 2
a205 1
		cmp.b	#CIAICRB_TB,d2		;is timer a or b?
d207 1
a208 2
		move.l	#_ciaa+ciatalo,TD_JUMPYCIATXLO(a6)
		move.l	#_ciaa+ciacra,TD_JUMPYCIACRX(a6)
d210 3
d214 6
a219 2
	;-- decide if we are using CIAB or CIAA - adjust interrupt
	;-- code, and data accordingly.  Assume ciab to start.
d221 1
a221 2
		lea	Tick2(pc),a0		;address of code
						;a3 == ciaabase
d223 1
a223 1
		tst.b	CR_HWADDR+3(a2)		;01 for a, 00 for b
d227 1
a227 1
		move.l	a6,a3			;data is timerbase
d251 2
d256 13
d385 1
a385 1
	;-- AbortMicroTimer() inline here for speed
a386 3
		move.l	TD_JUMPYCIACRX(a6),a0
		andi.b	#ASTOP_AND,(a0)

d489 1
d522 1
a522 1
		beq.s	RMTEnd
d524 15
a562 21
		move.l	TD_JUMPYCIACRX(a6),a0

	;-- ***NOTE***
	;
	;-- Not sure why we have to set START bit, and THEN load
	;-- the upper byte of the timer.  Does it start
	;-- counting down again with what was left????
	;
	;-- Wonder if this is the cause of the reported
	;-- DUAL interrupts if you loaded cia with a small
	;-- value?
	;
	;-- Leave this code as is for now, investigate!

loadtimer:
	;- also do we need to again stop?


		andi.b	#ASTOP_AND,(a0)
		ori.b	#ASTART_OR,(a0)

d567 1
a567 1
					;starts timer
d584 1
a584 1
		movem.l	a6,-(sp)
d589 1
a589 1
		movem.l	(sp)+,a6
d593 18
@


36.11
log
@Some optimizations, and major changes.  New swap code to switch which
interval timer the timer.device is using for its MHZ processing.  A mini
interrupt incase we are running off of one of the CIAB timers (sets a bit,
and causes a hardware level 2 interrupt).
@
text
@d15 1
a15 1
* $Id: micro.asm,v 36.10 91/01/25 15:46:36 rsbx Exp Locker: darren $
d20 6
d329 4
a332 1
		bsr	AbortMicroTimer
@


36.10
log
@Change to V37
@
text
@d15 1
a15 1
* $Id$
d17 1
a17 1
* $Locker: rsbx $
d20 3
d60 1
d67 1
d78 2
d97 2
d115 2
d128 115
d351 3
d355 1
a355 2
		movem.l	d2,-(sp)
		movem.l	a0,-(sp)
d359 1
a359 1
		clr.l	d0
d369 1
a369 3
		clr.l	d0
		clr.l	d1
		clr.l	d2
d371 1
d373 1
d375 1
d389 1
a389 1
		move.l	#CIAICRF_TB,d0
d401 1
a401 1
		movem.l	(sp)+,a0
d405 1
a405 1
		movem.l	(sp)+,d2
d423 6
a428 4
		TD_DISABLE	A0,TD_SYSLIB(a6)
		lea	_ciaa,a0
		andi.b	#ASTOP_AND,ciacra(a0)
		TD_ENABLE	A0,TD_SYSLIB(a6)
d445 1
d447 1
d454 3
a457 1
		subq.l	#8,sp
d480 1
a483 3
		lea	_ciaa,a0
		andi.b	#ASTOP_AND,ciacra(a0)
		ori.b	#ASTART_OR,ciacra(a0)
d485 23
a507 1
		move.b	d0,ciatalo(a0)
d509 2
a510 1
		move.b	d0,ciatahi(a0)		; this forces a load & start
d513 1
d515 1
a515 1
		TD_ENABLE	A0,TD_SYSLIB(a6)
d528 3
a530 2
		move.l	#CIAICRF_SETCLR+CIAICRF_TA,d0
		move.l	TD_COUNTERRESOURCE(A6),A6
d601 7
a608 3
		movem.l	a1,-(sp)
		move.l	#CIAICRF_TB,d0
		move.l	TD_COUNTERRESOURCE(A1),A6
d610 1
a610 1
		movem.l	(sp)+,a6
d615 1
a615 1
		clr.l	d0
a622 1

@


36.9
log
@RCS version change.
@
text
@d15 1
a15 1
* $Header: /usr/professor/rsbx/timer.device/RCS/micro.asm,v 36.8 90/02/19 18:04:33 rsbx Exp Locker: rsbx $
d20 3
@


36.8
log
@
@
text
@d15 1
a15 1
* $Header: micro.asm,v 36.7 90/02/16 11:56:27 rsbx Exp $
d20 3
@


36.7
log
@
@
text
@d15 1
a15 1
* $Header: micro.asm,v 36.6 89/09/15 18:55:40 rsbx Exp $
d20 3
d224 8
a231 2
		TD_DISABLE	A1,TD_SYSLIB(a6)	; EClock_Int1 does an ENABLE
		bsr	EClock_Int1
d445 1
a445 1
EClock_Int1:
d455 1
@


36.6
log
@
@
text
@d15 1
a15 1
* $Header: micro.asm,v 36.3 89/08/14 18:17:08 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d218 6
a223 7
DoInt:
; call counter B interrupt routine to service any pending interrupt
		movem.l	a0/a5/a6,-(sp)
		move.l	a6,a1
		bsr	EClock_Int
		movem.l	(sp)+,a0/a5/a6

a243 1
		clr.l	d0
d245 1
d247 1
a247 1
		CALLSYS	SetICR
d251 1
a251 1
		bne.s	DoInt
d257 1
d436 1
a436 1

@


36.5
log
@
@
text
@d190 1
a190 1
		bsr	IntCommon
d429 1
a429 1
		CALLSYS	SetICR
d440 1
a440 1
		jsr	EIncSTfmt(a6)
@


36.4
log
@Changed unit structure.
@
text
@d92 2
d440 8
d451 1
a451 1
		bcs.s	NoTBInt
d455 2
a456 3

NoTBInt:
		TD_ENABLE	a0,TD_SYSLIB(a6)
@


36.3
log
@Removed some dead code.
@
text
@d15 1
a15 1
* $Header: micro.asm,v 36.2 89/08/09 19:14:56 rsbx Exp $
d17 1
a17 1
* $Locker: rsbx $
d20 3
d90 2
d107 1
a107 1
*	A3 -- unit data pointer (given)
d131 1
a131 1
*	A3 -- unit data pointer (given)
d173 1
a173 1
*	A3 -- unit data
d181 1
a181 1
		lea	TD_UNIT0(a6),a3
d288 1
a288 1
*	A3 -- unit data pointer (given)
@


36.2
log
@changed some comments for autodoc
@
text
@d15 1
a15 1
* $Header: micro.asm,v 36.1 89/08/09 18:09:57 rsbx Exp $
d20 3
a247 3
*		add.l	d2,d1
*		clr.l	d2
*		addx.l	d2,d0
a432 1
*$* maintain systime
@


36.1
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/machines/professor/professor/rsbx/timer.device/RCS/micro.asm,v 1.1 89/08/09 14:10:10 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d31 1
a31 1
******* Included Files ***********************************************
d47 1
a47 1
******* Imported Names ***********************************************
d73 1
a73 1
******* Exported Names ***********************************************
d87 1
a87 1
******* Local Definitions ********************************************
d138 1
a138 1
;****** System/Drivers/Timer/TickInt **********************************
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/ghostwheel/commodore/amiga/V36/src/kickstart/timer/RCS/micro.asm,v 1.1 89/08/09 14:10:10 rsbx Exp $
d20 3
a22 3
*Revision 1.1  89/08/09  14:10:10  rsbx
*Initial revision
*
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
* $Header$
d17 1
a17 1
* $Locker$
d19 4
a22 1
* $Log$
@
