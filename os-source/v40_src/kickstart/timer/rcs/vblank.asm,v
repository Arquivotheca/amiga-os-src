head     39.0;
branch   ;
access   ;
symbols  V39_3:39.0 V39_2:39.0 V39_1:39.0 V37_128:36.17 V37_120:36.17 V37_72:36.13 V37_57:36.13 V37_1:36.12 V36_51:36.11 V36_50:36.10 V36_48:36.10 V36_47:36.10 V36_46:36.10 V36_45:36.10 V36_43:36.9 V36_42:36.9 V36_40:36.8 V36_31:36.7 V36_30:36.7 V36_28:36.7 V36_26:36.7 V36_25:36.7 V36_22:36.7 V36_21:36.6 V36_20:36.5 V36_19:36.5 V36_18:36.5 V36_15:36.5 V36_14:36.5 V36_12:36.5 V36_11:36.5 V36_9:36.4 V36_8:36.3 V36_7:36.2 V36_6:36.2 V36_5:36.1 V36_4:36.1 V36_2:1.2;
locks    ; strict;
comment  @* @;


39.0
date     92.01.20.13.10.48;  author mks;  state Exp;
branches ;
next     36.17;

36.17
date     91.04.10.12.32.31;  author darren;  state Exp;
branches ;
next     36.16;

36.16
date     91.04.10.10.50.41;  author darren;  state Exp;
branches ;
next     36.15;

36.15
date     91.04.09.13.48.36;  author darren;  state Exp;
branches ;
next     36.14;

36.14
date     91.03.22.12.19.45;  author darren;  state Exp;
branches ;
next     36.13;

36.13
date     91.03.14.17.28.07;  author darren;  state Exp;
branches ;
next     36.12;

36.12
date     91.01.25.16.15.00;  author rsbx;  state Exp;
branches ;
next     36.11;

36.11
date     90.12.20.20.13.44;  author bryce;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.01.19.13.41;  author rsbx;  state Exp;
branches ;
next     36.9;

36.9
date     90.02.20.13.31.38;  author rsbx;  state Exp;
branches ;
next     36.8;

36.8
date     90.02.16.11.56.37;  author rsbx;  state Exp;
branches ;
next     36.7;

36.7
date     89.09.15.18.55.48;  author rsbx;  state Exp;
branches ;
next     36.6;

36.6
date     89.09.13.15.17.45;  author rsbx;  state Exp;
branches ;
next     36.5;

36.5
date     89.08.17.16.11.17;  author rsbx;  state Exp;
branches ;
next     36.4;

36.4
date     89.08.16.13.32.29;  author rsbx;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.14.18.19.47;  author rsbx;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.09.19.15.18;  author rsbx;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.09.18.10.04;  author rsbx;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.09.17.48.36;  author rsbx;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.09.14.11.52;  author rsbx;  state Exp;
branches ;
next     ;


desc
@Contains all code for operation of the vblank unit.
@


39.0
log
@Timer device now calls battclock to read the base system time.
Also made some branches short...
@
text
@*************************************************************************
*									*
*	Copyright (C) 1985, Commodore Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************


*************************************************************************
*
* $Id$
*
* $Log$
*************************************************************************

	SECTION	timer

***#*** Included Files ***********************************************

	INCLUDE	'hardware/intbits.i'
	INCLUDE	'hardware/cia.i'
	INCLUDE	'resources/cia.i'

	INCLUDE	'exec/types.i'
	INCLUDE	'exec/ables.i'

	INCLUDE	'asmsupp.i'
	INCLUDE	'timer.i'
	INCLUDE 'macros.i'
	INCLUDE 'constants.i'
	INCLUDE 'internal.i'
	INCLUDE 'debug.i'

***#*** Imported Names ***********************************************

*------ Tables -------------------------------------------------------

*------ Defines ------------------------------------------------------

	XREF	_ciaa
	XREF	_ciab
	XREF	_intena
	XREF	_AbsExecBase

	INT_ABLES

*------ Functions ----------------------------------------------------

	XREF	TermIO
	XREF	IntCommon
	XREF	IntEnd
	XREF	InsertReq
	XREF	ReadEClockTime
	XREF	CalcDelay0

*------ System Library Functions -------------------------------------

	XSYS	Insert
	XSYS	Alert
	XSYS	ReplyMsg
	XSYS	SetICR
	XSYS	AbleICR

***#*** Exported Names ***********************************************

*------ Functions ----------------------------------------------------

	XDEF	Tick1
	XDEF	AddReqUnit1
	XDEF	RemReqUnit1
	XDEF	TOD_Int
	XDEF	ReadTOD
	XDEF	Tics2Time
	XDEF	TODIncSTTOD
	XDEF	TODIncSTEClock

*------ Data ---------------------------------------------------------

***#*** Local Definitions ********************************************



**********************************************************************
*
* Unit specific insertion of a time request
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit list (given)
*	A2 -- munged
*	A1 -- request (given,munged)
*	A0 -- munged

AddReqUnit1:
*$* debug
*		ERRMSG	"AddReqUnit1"
*$* debug

		bsr	CalcDelay0
		bra	InsertReq
		;rft


**********************************************************************
*
* Unit specific removal of a time request
*
*	This code is run 'DISABLED' and returns 'ENABLED'
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit list (given)
*	A2 -- munged
*	A1 -- request (given, munged)
*	A0 -- munged

RemReqUnit1:
*$* debug
*		ERRMSG	"RemReqUnit1"
*$* debug
		REMOVE				; node a1

		TD_ENABLE	a0,TD_SYSLIB(a6)

		rts


***#** System/Drivers/Timer/TickInt **********************************
*
*   NAME
*	TickInt - Handle VBlank interrupt tick
*
*   SYNOPSIS
*	TickInt( Unit )
*	         A1
*
*   FUNCTION
*
*   INPUTS
*
*   EXCEPTIONS
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*   REGISTER USAGE
*	A6 -- TDDev
*	A3 -- unit data
*	A1 -- munged
*	A0 -- munged
*

*
* process exec scheduling quantum stuff
*

Tick1:
		move.l	TD_SYSLIB(a1),a0

		;------ check the scheduling flags
		SUBQ.W	#1,Elapsed(A0)
		BNE.S	NoQuantumKick

		;------ kick the scheduler
		MOVE.W	Quantum(A0),Elapsed(A0)
		OR.W	#SF_SAR!SF_TQE,SysFlags(A0)
NoQuantumKick:
		MOVEM.L	A3,-(SP)
		MOVE.L	A1,A6

		sub.l	#EV_SIZE,sp

		move.l	sp,a0
		bsr	ReadEClockTime
		lea	TD_VBLANKLIST(A6),A3
		bsr	IntCommon		; check for expired reqs

		move.l	sp,a0
		jsr	GetSTfmt(a6)
		lea	TD_SYSTIMELIST(a6),a3
		bsr	IntCommon		; check for expired reqs

		addq.l	#EV_SIZE,sp
		bra	IntEnd
		; rft


**********************************************************************
*
* TOD register alarm interupt routine
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A1 -- munged
*	A0 -- munged
*	D0 -- munged
*

TOD_Int:
		move.l	a1,a6
		jsr	TODIncSTfmt(a6)
		rts


**********************************************************************
*
* TOD register alarm interupt routine
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A1 -- munged
*	A0 -- munged
*	D0 -- munged
*

; assumes that the alarm register doesn't get cleared

TODIncSTTOD:
		TD_DISABLE	a1,TD_SYSLIB(a6)

		bsr.s	ReadTOD

	; Clear TOD registers
	;
	; assumes A1 is _ciaa (see ReadTOD)

		moveq	#00,d1

		move.b	d1,ciatodhi(A1)
		move.b	d1,ciatodmid(A1)
		move.b	d1,ciatodlow(A1)

	;
	; Reset TD_LASTTOD below ... let TD_NUMREQS continue
	; to rise until the next TOD tick
	;
	; This avoids race conditions when GetSysTime() gets
	; in within DISABLE, reads TOD when its met its ALARM
	; condition, or when a higher priority interrupt is
	; is calling GetSysTime(), blocking this level 2 interrupt.
	;

		move.l	d1,TD_LASTTOD(a6)


	; adjust TD_SYSTIME - add whats in D0 to it

		lea	TD_SYSTIME(a6),a0
		bsr.s	Tics2Time

		TD_ENABLE	a1,TD_SYSLIB(a6)

TODIncSTEClock:
		rts


**********************************************************************
*
* Returns the contents of the TOD register
*
*   REGISTER USAGE
*
*	A1 -- _ciaa (return _ciaa for speed!)
*	D0 -- TOD count
*
* MUST be called within DISABLE
* MUST preserve A0
*


ReadTOD:
		moveq	#0,d0

		lea	_ciaa,a1

		MOVE.B	ciatodhi(A1),D0
		LSL.W	#8,D0
		MOVE.B	ciatodmid(A1),D0
		LSL.L	#8,D0
		MOVE.B	ciatodlow(A1),D0

	;
	; maintain a unique, and incrementing number for the period
	; of time during which ReadTOD() returns the same number.
	;

		cmp.l	TD_LASTTOD(a6),d0
		bne.s	newTOD
		addq.l	#1,TD_NUMREQS(a6)
		rts

newTOD:
		clr.l	TD_NUMREQS(a6)		;start new form
		move.l	d0,TD_LASTTOD(a6)
		rts




**********************************************************************
*
* Add a timeval, in secs and TOD tics, to a TOD tic count, and normalize
*	the result to secs and TOD tics.
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- timeval w/ offset (given)
*	D1 -- munged
*	D0 -- TOD count (given)
*

Tics2Time:
		add.l	TV_MICRO(a0),d0
		divu.w	TD_TODHERTZ(a6),d0
		move.l	d0,d1
		ext.l	d0
		add.l	d0,TV_SECS(a0)
		swap	d1
		ext.l	d1
		move.l	d1,TV_MICRO(a0)
		rts


	END

*=====================================================================*
*
* NOTES -
*
* About the ReadTOD() function
* ----------------------------
*
* ReadTOD() checks to see if the TOD counters have changed since
* they were last read.  If NOT, then a positively incrementing "noise"
* factor is incremented (TD_NUMREQS).
*
* This is necessary because system time is guaranteed to be monotomically
* increasing, and the TOD counters are 'crude' (roughly 1 tick per VBLANK).
*
* In theory, the noise factor can become so great that it ceases to be
* noise anymore - in reality this isn't a problem, nor is it a new
* problem.
*
* If the TOD counters have changed since last read, reset our noise
* factor.
*
* About the TOD Interrupt
* -----------------------
*
* The TOD interrupt rolls back the TOD counters at ALARM time.
* Currently this is every #$1000 TOD ticks.  The TD_SYSTIME values
* are also updated at this time.
*
* There is a possible race condition here which is prevented by
* allowing TD_NUMREQS to continue to rise until the next TOD tick.
*
* The scenerio goes like so -
*
*	GetSysTime()
*		DISABLE
*					<-TOD Interrupt NOW
*		ReadTOD()
*					TOD counter changed
*					(e.g., from 4095 to 4096)
*					TD_NUMREQS == 0
*		Calculate time
*
*					TD_SYSTIME + TOD + TD_NUMREQS
*		ENABLE
*
*	TOD Interrupt
*		DISABLE
*
*		ReadTOD()		Counter is still 4096 or greater
*					TD_NUMREQS + 1
*
*		ClearTOD		TOD == 000000
*
*		Calculate TD_SYSTIME
*					4096 TOD ticks, plus previous
*					TD_SYSTIME
*		ENABLE
*
*	GetSysTime()
*		DISABLE
*
*		ReadTOD()
*
*					Aha!  I read 000000, and I
*					thought the last number was
*					4096!  So reset TD_NUMREQS!
*		Calculate time
*
*			And...
*
*			Here is where we get into a problem.  ReadTOD()
*			comes up with 000000, and that is added to
*			TD_SYSTIME which happens to be the same
*			value calculated when we called GetSysTime()
*			above!
*
*			ReadTOD also notes that the TOD counters changed
*			since the last call to ReadTOD(), and sets
*			TD_NUMREQS == 0.
*
*			The net result is the SAME as the previous call
*			to GetSysTime().
*
* Same problem can happen if a high priority interrupt (above level 2)
* is doing a GetSysTime().
*
* We solve this problem by allowing TD_NUMREQS to continue to rise until
* the next TOD tic (e.g., from 0 -> 1).  This is why we have the line
* of code which clears TD_LASTTOD after clearing the TOD hardware counters.
*
*
*=====================================================================*

@


36.17
log
@Added text comments only after END pseudo opcode explaining the TOD
interrupt, and ReadTOD function.  I'm likely to forget why I did what
I did in the future!
@
text
@d10 1
a10 1
* vblank.asm
d12 1
a12 56
* Source Control
* ------ -------
* 
* $Id: vblank.asm,v 36.16 91/04/10 10:50:41 darren Exp Locker: darren $
*
* $Locker: darren $
*
* $Log:	vblank.asm,v $
* Revision 36.16  91/04/10  10:50:41  darren
* Code change to avoid a rare, but potential race condition when calculating
* TD_NUMREQS ... new code allows TD_NUMREQS to continue to rise after a TOD
* ALARM interrupt (rise until the next TOD tick).
* 
* Revision 36.15  91/04/09  13:48:36  darren
* Major changes for better MIDI performance (decrease DISABLE time)
* 
* Revision 36.14  91/03/22  12:19:45  darren
* *** empty log message ***
* 
* Revision 36.13  91/03/14  17:28:07  darren
* Played with some ideas, but no real code changes.
* 
* Revision 36.12  91/01/25  16:15:00  rsbx
* V37 changes.
* 
* Revision 36.11  90/12/20  20:13:44  bryce
* When timer tells a task its quantum is finished it must *also* kick off
* the scheduler.  Otherwise it is just luck that the finished task gets
* rescheduled in a timely manner.  Now timer sets the "Scheduling Attention
* Required" flag along with SF_TQE.
* 
* Revision 36.10  90/04/01  19:13:41  rsbx
* RCS version change.
* 
* Revision 36.9  90/02/20  13:31:38  rsbx
* Fixed race condition in TOD_Int.
* 
* Revision 36.8  90/02/16  11:56:37  rsbx
* 
* 
* Revision 36.7  89/09/15  18:55:48  rsbx
* 
* 
* Revision 36.3  89/08/14  18:19:47  rsbx
* Removed lots of dead code.
* 
* Revision 36.2  89/08/09  19:15:18  rsbx
* changed some comments for autodoc
* 
* Revision 36.1  89/08/09  18:10:04  rsbx
* *** empty log message ***
* 
* Revision 1.1  89/08/09  14:11:52  rsbx
* Initial revision
*
*
d225 1
a225 1
		bsr	ReadTOD
d253 1
a253 1
		bsr	Tics2Time
d353 1
a353 1
* 
d390 1
a390 1
*			
@


36.16
log
@Code change to avoid a rare, but potential race condition when calculating
TD_NUMREQS ... new code allows TD_NUMREQS to continue to rise after a TOD
ALARM interrupt (rise until the next TOD tick).
@
text
@d15 1
a15 1
* $Id: vblank.asm,v 36.15 91/04/09 13:48:36 darren Exp Locker: darren $
d20 5
d384 93
@


36.15
log
@Major changes for better MIDI performance (decrease DISABLE time)
@
text
@d15 1
a15 1
* $Id: vblank.asm,v 36.14 91/03/22 12:19:45 darren Exp Locker: darren $
d20 3
a285 1
		move.l	d1,TD_NUMREQS(a6)	;new form
d287 9
d297 3
d331 1
a331 1
		LSL.L	#8,D0
d379 1
@


36.14
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Id: vblank.asm,v 36.13 91/03/14 17:28:07 darren Exp Locker: darren $
d20 3
d270 2
a271 1
		TD_DISABLE	a0,TD_SYSLIB(a6)
d273 15
a287 1
		bsr	ClearTOD
d290 3
a292 1
		TD_ENABLE	a0,TD_SYSLIB(a6)
d302 2
a303 1
*	A0 -- munged
d306 3
d310 1
d312 1
a312 1
		moveq.l	#0,d0
d314 1
a314 1
		TD_DISABLE	a0,TD_SYSLIB(a6)
d316 1
a316 3
		lea	_ciaa,a0

		MOVE.B	ciatodhi(A0),D0
d318 1
a318 1
		MOVE.B	ciatodmid(A0),D0
d320 1
a320 1
		MOVE.B	ciatodlow(A0),D0
d322 4
a325 1
		TD_ENABLE	a0,TD_SYSLIB(a6)
d327 3
d332 4
a336 8
**********************************************************************
*
* Zeros the TOD register
*
*   REGISTER USAGE
*	A0 -- munged
*	D1 -- munged
*
a337 13
ClearTOD:
		clr.l	d1

		TD_DISABLE	a0,TD_SYSLIB(a6)

		lea	_ciaa,a0
		move.b	d1,ciatodhi(A0)
		move.b	d1,ciatodmid(A0)
		move.b	d1,ciatodlow(A0)

		TD_ENABLE	a0,TD_SYSLIB(a6)

		rts
@


36.13
log
@Played with some ideas, but no real code changes.
@
text
@d15 1
a15 1
* $Id: vblank.asm,v 36.12 91/01/25 16:15:00 rsbx Exp Locker: darren $
d20 3
@


36.12
log
@V37 changes.
@
text
@d15 1
a15 1
* $Id: vblank.asm,v 36.11 90/12/20 20:13:44 bryce Exp Locker: rsbx $
d17 1
a17 1
* $Locker: rsbx $
d20 3
d82 1
@


36.11
log
@When timer tells a task its quantum is finished it must *also* kick off
the scheduler.  Otherwise it is just luck that the finished task gets
rescheduled in a timely manner.  Now timer sets the "Scheduling Attention
Required" flag along with SF_TQE.
@
text
@d15 1
a15 1
* $Id: /usr/machines/heartofgold/amiga/V36/src/kickstart/timer/RCS/vblank.asm,v 36.10 90/04/01 19:13:41 rsbx Exp Locker: bryce $
d17 1
a17 1
* $Locker: bryce $
d20 6
@


36.10
log
@RCS version change.
@
text
@d15 1
a15 1
* $Header: /usr/professor/rsbx/timer.device/RCS/vblank.asm,v 36.9 90/02/20 13:31:38 rsbx Exp Locker: rsbx $
d17 1
a17 1
* $Locker: rsbx $
d20 3
d201 1
a201 1
		OR.W	#SF_TQE,SysFlags(A0)
@


36.9
log
@Fixed race condition in TOD_Int.
@
text
@d15 1
a15 1
* $Header: vblank.asm,v 36.8 90/02/16 11:56:37 rsbx Exp $
d20 3
@


36.8
log
@
@
text
@d15 1
a15 1
* $Header: vblank.asm,v 36.7 89/09/15 18:55:48 rsbx Exp $
d20 3
a250 2
		TD_ENABLE	a0,TD_SYSLIB(a6)

d253 1
@


36.7
log
@
@
text
@d15 1
a15 1
* $Header: vblank.asm,v 36.3 89/08/14 18:19:47 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
a202 2
	
		TD_DISABLE	a0,TD_SYSLIB(a6)
a208 2
		TD_ENABLE	A0,TD_SYSLIB(a6)

a226 3

		TD_DISABLE	a0,TD_SYSLIB(a6)

a227 2

		TD_ENABLE	A0,TD_SYSLIB(a6)
d245 1
d248 1
@


36.6
log
@
@
text
@d199 1
a199 1
		bsr	IntCommon
d206 1
a206 1
		bsr	IntCommon
@


36.5
log
@Added in interrupt support for waituntil list.
@
text
@d90 4
d194 1
a194 1
		sub.l	#EV_SIZE+TV_SIZE,sp
a195 1
		TD_DISABLE	a0,TD_SYSLIB(a6)
a197 21
		lea	EV_SIZE(a0),a1

		move.l	TD_SYSTIME+TV_SECS(a6),TV_SECS(a1)
		move.l	TD_SYSTIME+TV_MICRO(a6),d0
		move.l	EV_LO(a0),d1

		TD_ENABLE	A0,TD_SYSLIB(a6)

		swap	d1
		move.w	#0,d1
		swap	d1
		add.l	d1,d0

		cmp.l	TD_ECLOCKHERTZ(a6),d0
		bcs.s	NoAdjustST
		addq.l	#1,TV_SECS(a1)
		sub.l	TD_ECLOCKHERTZ(a6),d0

NoAdjustST:
		move.l	d0,TV_MICRO(a1)

a198 1
		move.l	sp,a0
a199 1
		addq.l	#EV_SIZE,sp
d201 4
a205 1
		move.l	sp,a0
a206 1
		addq.l	#TV_SIZE,sp
d208 3
d227 7
d236 97
@


36.4
log
@Changed unit structure.
@
text
@d190 26
a215 1
		subq.l	#EV_SIZE,sp
a217 1
		bsr	ReadEClockTime
a218 6

*$* do "wait until" processing here
*		Lea	TD_SYSTIMELIST(a6),a3
*		move.l	sp,a0
*		bsr	GetSysTime
*		bsr	IntCommon
d220 5
@


36.3
log
@Removed lots of dead code.
@
text
@d15 1
a15 1
* $Header: vblank.asm,v 36.2 89/08/09 19:15:18 rsbx Exp $
d17 1
a17 1
* $Locker: rsbx $
d20 3
d103 1
a103 1
*	A3 -- unit data pointer (given)
d126 1
a126 1
*	A3 -- unit data pointer (given)
a188 1
		lea	TD_UNIT1(A6),A3
d190 2
a191 1
		subq.l	#8,sp
d195 7
a201 1
		addq.l	#8,sp
@


36.2
log
@changed some comments for autodoc
@
text
@d15 1
a15 1
* $Header: vblank.asm,v 36.1 89/08/09 18:10:04 rsbx Exp $
d20 3
a86 4
*	XDEF	Micro2Tics
*	XDEF	ReadTOD
*	XDEF	ClearTOD
*	XDEF	Tics2Time
a196 28
**********************************************************************
*
* Returns the time, in normalized TOD tics, since timer.device was
*	initialized.
*
*   REGISTER USAGE
*	A6 -- Device Data (given)
*	A3 -- unit data (given)
*	A0 -- timeval for "on time" (given)
*	D1 -- munged
*	D0 -- munged
*
*
*ReadOnTime:
*		move.l	a1,d0
*		TD_DISABLE	a1,TD_SYSLIB(a6)
*		move.l	d0,a1
*
*		move.l	TD_ONTIME+TV_MICRO(a6),TV_MICRO(a0)
*		move.l	TD_ONTIME+TV_SECS(a6),TV_SECS(a0)
*		move.l	a0,-(sp)
*		bsr.w	ReadTOD
*
*		TD_ENABLE	A0,TD_SYSLIB(a6)
*
*		move.l	(sp)+,a0
*		bsr.w	Tics2Time
*		rts
a199 109
* Calculates the point in "TOD on time" that the request should be
*	returned
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A3 -- unit data pointer (given)
*	A2 -- munged
*	A1 -- request (given)
*	A0 -- munged
*
*CalcDelay1:
**$* debug
**		ERRMSG	"CalcDelay1"
**$* debug
*		subq.l	#8,sp
*		move.l	sp,a0
*		bsr	ReadOnTime
*		move.l	IOTV_TIME+TV_MICRO(a1),d1
*		bsr.w	Micro2Tics
*		move.l	IOTV_TIME+TV_SECS(a1),d0
*
*		add.l	TV_SECS(a0),d0
*		add.l	TV_MICRO(a0),d1
*		addq.l	#8,sp
*		movem.l	d0-d1,IOTV_TIME+TV_SECS(a1)
*
*		lea	IOTV_TIME(a1),a0
*		clr.l	d0
*		bsr.w	Tics2Time	; normalize request
*		rts
		
**********************************************************************
*
* Converts microseconds to TOD tics
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	D1 -- micro seconds (given), TOD tics (returned)
*	D0 -- munged

*Micro2Tics:
**$* debug
**		ERRMSG	"Micro2Tics"
**$* debug
*		divu.w	TD_TIMEPERTOD(a6),d1
*		move.l	d1,d0
*		ext.l	d1		; whole tics in d1
*
*		swap	d0		; this block is the ceiling function
*		neg.w	d0
*		neg.w	d0		; X set if non-zero
*		clr.l	d0		; X not affected
*		addx.l	d0,d1		; add X to tics
*		rts


**********************************************************************
*
* Returns the contents of the TOD register
*
*   REGISTER USAGE
*	A0 -- munged
*	D0 -- TOD count
*
*
*ReadTOD:
*		moveq.l	#0,d0
*
*		TD_DISABLE	a0,TD_SYSLIB(a6)
*
*		lea	_ciaa,a0
*
*		MOVE.B	ciatodhi(A0),D0
*		LSL.L	#8,D0
*		MOVE.B	ciatodmid(A0),D0
*		LSL.L	#8,D0
*		MOVE.B	ciatodlow(A0),D0
*
*		TD_ENABLE	a0,TD_SYSLIB(a6)
*
*		rts


**********************************************************************
*
* Add a timeval, in secs and TOD tics, to a TOD tic count, and normalize
*	the result to secs and TOD tics.
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- timeval w/ offset (given)
*	D1 -- munged
*	D0 -- TOD count (given)
*
*
*Tics2Time:
*		add.l	TV_MICRO(a0),d0
*		divu.w	TD_TODHERTZ(a6),d0
*		move.l	d0,d1
*		ext.l	d0
*		add.l	d0,TV_SECS(a0)
*		swap	d1
*		ext.l	d1
*		move.l	d1,TV_MICRO(a0)
*		rts


**********************************************************************
*
a208 2
; assumes that the alarm register doesn't get cleared

a209 18
*		move.l	a1,a6
*
*		TD_DISABLE	a0,TD_SYSLIB(a6)
*
*		bsr	ReadTOD
*		bsr	ClearTOD
*
*		move.l	d0,-(sp)
*
*		lea	TD_ONTIME(a6),a0
*		bsr	Tics2Time
*
*		move.l	(sp)+,d0
*
*		lea	TD_SYSTIME(a6),a0
*		bsr	Tics2Time
*
*		TD_ENABLE	A0,TD_SYSLIB(a6)
a211 23

**********************************************************************
*
* Zeros the TOD register
*
*   REGISTER USAGE
*	A0 -- munged
*	D1 -- munged
*
*
*ClearTOD:
*		clr.l	d1
*
*		TD_DISABLE	a0,TD_SYSLIB(a6)
*
*		lea	_ciaa,a0
*		move.b	d1,ciatodhi(A0)
*		move.b	d1,ciatodmid(A0)
*		move.b	d1,ciatodlow(A0)
*
*		TD_ENABLE	a0,TD_SYSLIB(a6)
*
*		rts
@


36.1
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/machines/professor/professor/rsbx/timer.device/RCS/vblank.asm,v 1.1 89/08/09 14:11:52 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d31 1
a31 1
******* Included Files ***********************************************
d47 1
a47 1
******* Imported Names ***********************************************
d76 1
a76 1
******* Exported Names ***********************************************
d91 1
a91 1
******* Local Definitions ********************************************
d140 1
a140 1
****** System/Drivers/Timer/TickInt **********************************
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/ghostwheel/commodore/amiga/V36/src/kickstart/timer/RCS/vblank.asm,v 1.1 89/08/09 14:11:52 rsbx Exp $
d20 3
a22 3
*Revision 1.1  89/08/09  14:11:52  rsbx
*Initial revision
*
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
* $Header$
d17 1
a17 1
* $Locker$
d19 4
a22 1
* $Log$
@
