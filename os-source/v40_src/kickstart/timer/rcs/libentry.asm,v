head     36.19;
branch   ;
access   ;
symbols  V39_3:36.19 V39_2:36.19 V39_1:36.19 V37_128:36.18 V37_120:36.18 V37_72:36.17 V37_57:36.17 V37_1:36.17 V36_51:36.16 V36_50:36.16 V36_48:36.16 V36_47:36.16 V36_46:36.16 V36_45:36.15 V36_43:36.14 V36_42:36.14 V36_40:36.14 V36_31:36.13 V36_30:36.13 V36_28:36.13 V36_26:36.12 V36_25:36.12 V36_22:36.12 V36_21:36.11 V36_20:36.10 V36_19:36.10 V36_18:36.10 V36_15:36.8 V36_14:36.7 V36_12:36.4 V36_11:36.4 V36_9:36.3 V36_8:36.2 V36_7:36.2 V36_6:36.2 V36_5:36.1 V36_4:36.1 V36_2:1.2;
locks    ; strict;
comment  @* @;


36.19
date     91.11.05.18.40.53;  author darren;  state Exp;
branches ;
next     36.18;

36.18
date     91.04.09.13.46.52;  author darren;  state Exp;
branches ;
next     36.17;

36.17
date     91.01.25.15.46.14;  author rsbx;  state Exp;
branches ;
next     36.16;

36.16
date     90.04.25.21.52.21;  author rsbx;  state Exp;
branches ;
next     36.15;

36.15
date     90.04.01.19.12.54;  author rsbx;  state Exp;
branches ;
next     36.14;

36.14
date     90.02.16.11.56.18;  author rsbx;  state Exp;
branches ;
next     36.13;

36.13
date     89.11.23.16.49.27;  author rsbx;  state Exp;
branches ;
next     36.12;

36.12
date     89.09.15.18.55.14;  author rsbx;  state Exp;
branches ;
next     36.11;

36.11
date     89.09.13.15.17.23;  author rsbx;  state Exp;
branches ;
next     36.10;

36.10
date     89.08.24.15.57.09;  author rsbx;  state Exp;
branches ;
next     36.9;

36.9
date     89.08.22.22.00.06;  author rsbx;  state Exp;
branches ;
next     36.8;

36.8
date     89.08.20.18.06.29;  author rsbx;  state Exp;
branches ;
next     36.7;

36.7
date     89.08.19.17.00.41;  author rsbx;  state Exp;
branches ;
next     36.6;

36.6
date     89.08.19.15.58.33;  author rsbx;  state Exp;
branches ;
next     36.5;

36.5
date     89.08.19.01.23.15;  author rsbx;  state Exp;
branches ;
next     36.4;

36.4
date     89.08.17.15.13.02;  author rsbx;  state Exp;
branches ;
next     36.3;

36.3
date     89.08.16.13.28.52;  author rsbx;  state Exp;
branches ;
next     36.2;

36.2
date     89.08.09.19.14.04;  author rsbx;  state Exp;
branches ;
next     36.1;

36.1
date     89.08.09.18.09.41;  author rsbx;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.09.17.47.06;  author rsbx;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.09.14.07.47;  author rsbx;  state Exp;
branches ;
next     ;


desc
@This file contains all of the library-like entry points for
the rewritten timer.device
@


36.19
log
@Autodoc changes
@
text
@*************************************************************************
*									*
*	Copyright (C) 1989, Commodore Amiga Inc.  All rights reserved.	*
*									*
*************************************************************************


*************************************************************************
*
* libentry.asm
*
* Source Control
* ------ -------
* 
* $Id: libentry.asm,v 36.19 91/11/05 18:00:36 darren Exp $
*
* $Locker:  $
*
* $Log:	libentry.asm,v $
* Revision 36.19  91/11/05  18:00:36  darren
* Remove spurious "()" from autodoc lines.
* 
* Revision 36.18  91/04/09  13:46:52  darren
* Major changes for better MIDI performance (decrease DISABLE time)
* 
* Revision 36.17  91/01/25  15:46:14  rsbx
* Change to V37
* 
* Revision 36.16  90/04/25  21:52:21  rsbx
* Fixed CmpTime autodoc.
* 
* Revision 36.15  90/04/01  19:12:54  rsbx
* RCS version change.
* 
* Revision 36.14  90/02/16  11:56:18  rsbx
* 
* 
* Revision 36.13  89/11/23  16:49:27  rsbx
* Cleaned up some graphics kludges. Removed references to TR_WAITUNTIL and
* WaitUnitl() from to docs.
* 
* Revision 36.12  89/09/15  18:55:14  rsbx
* 
* 
* Revision 36.2  89/08/09  19:14:04  rsbx
* changed some comments for autodoc
* 
* Revision 36.1  89/08/09  18:09:41  rsbx
* *** empty log message ***
* 
* Revision 1.1  89/08/09  14:07:47  rsbx
* Initial revision
*
*
*************************************************************************

	SECTION	timer

*------ Included Files -----------------------------------------------

	INCLUDE	'hardware/intbits.i'
	INCLUDE	'hardware/cia.i'
	INCLUDE	'resources/cia.i'

	INCLUDE	'exec/types.i'
	INCLUDE	'exec/ables.i'

	INCLUDE	'asmsupp.i'
	INCLUDE	'timer.i'
	INCLUDE 'macros.i'
	INCLUDE 'constants.i'
	INCLUDE 'internal.i'
	INCLUDE 'debug.i'

*------ Imported Names -----------------------------------------------

*------ Tables -------------------------------------------------------

*------ Defines ------------------------------------------------------

	XREF	_ciaa
	XREF	_ciab
	XREF	_AbsExecBase
	XREF	ReadEClockTime
	XREF	ReadESClockTime
	XREF	Mult64
	XREF	Open
	XREF	Close
	XREF	ReadTOD
	XREF	Tics2Time

	INT_ABLES

*------ Functions ----------------------------------------------------


*------ System Library Functions -------------------------------------

	XSYS	AllocSignal
	XSYS	FreeSignal
	XSYS	DoIO
	XSYS	FindTask

*------ Exported Names -----------------------------------------------

*------ Functions ----------------------------------------------------

	XDEF	TimSub
	XDEF	TimAdd
	XDEF	TimCmp
	XDEF	ReadETime
	XDEF	GetSysTime
	XDEF	GetSTTOD
	XDEF	GetSTEClock
	XDEF	STTOD2Req
	XDEF	STEClock2Req

*------ Data ---------------------------------------------------------

*------ Local Definitions --------------------------------------------






******* timer.device/GetSysTime **************************************
*
*   NAME
*	GetSysTime -- Get the system time. (V36)
*
*   SYNOPSIS
*	GetSysTime( Dest )
*	            A0
*
*	void GetSysTime( struct timeval * );
*
*   FUNCTION
*	Ask the system what time it is.  The system time starts off at
*	zero at power on, but may be initialized via the TR_SETSYSTIME
*	timer.device command.
*
*	System time is monotonocally increasing and guarenteed to be
*	unique (except when the system time is set back).
*
*	A0 will be left unchanged.
*
*	This function is less expensive to use than the TR_GETSYSTIME
*	IORequest.
*
*   INPUTS
*	Dest -- pointer to a timeval structure to hold the system time.
*
*   RESULTS
*	Dest -- the timeval structure will contain the system time.
*
*   NOTES
*	This function may be called from interrupts.
*
*   SEE ALSO
*	timer.device/TR_GETSYSTIME,
*	timer.device/TR_SETSYSTIME,
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- time field of request (given)
*


GetSysTime:
*$* debug
*		ERRMSG	"GetSysTime"
*$* debug
		jsr	STfmt2Req(a6)
		rts


**********************************************************************
*
* mode specific systime to timerequest conversion
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- time field of request (given)
*

STEClock2Req:
		bsr	GetSTEClock		; get internal systime

		move.l	TV_MICRO(a0),d0
		move.l	TD_ECLOCKCONST2(a6),d1
		bsr	Mult64			; etics to usecs
		move.w	d0,d1
		swap	d1			; micros

		move.l	d1,TV_MICRO(a0)
		rts


**********************************************************************
*
* mode specific systime to timerequest conversion
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- time field of request (given)
*

STTOD2Req:
		TD_DISABLE	a1,TD_SYSLIB(a6)

		move.l	TD_SYSTIME+TV_MICRO(a6),TV_MICRO(a0)
		move.l	TD_SYSTIME+TV_SECS(a6),TV_SECS(a0)
		bsr	ReadTOD		; get num tic since last update
		move.l	TD_NUMREQS(a6),-(sp)

		TD_ENABLE	a1,TD_SYSLIB(a6)

		bsr	Tics2Time		; adjust

		move.l	TV_MICRO(a0),d1
		mulu.w	TD_TIMEPERTOD(a6),d1	; adjust
		add.l	(sp)+,d1		; make unique
		move.l	d1,TV_MICRO(a0)
		rts



**********************************************************************
*
* return mode specific systime
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A0 -- time field of request (given)
*

GetSTTOD:
		TD_DISABLE	a1,TD_SYSLIB(a6)
		move.l	TD_SYSTIME+TV_MICRO(a6),TV_MICRO(a0)
		move.l	TD_SYSTIME+TV_SECS(a6),TV_SECS(a0)
		bsr	ReadTOD		; get num tic since last update
		TD_ENABLE	a1,TD_SYSLIB(a6)
		bsr	Tics2Time	; adjust
		rts


**********************************************************************
*
* return mode specific systime
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A1 -- munged
*	A0 -- time field of request (given)
*

GetSTEClock:
		subq.l	#TV_SIZE,sp
		move.l	sp,a1

	;
	; ReadESClockTime() also grabs TD_SYSTIME, and puts it wherever
	; A1 pts too.  TD_SYSTIME is grabbed along with the EClock time
	; within disable.
	;
	; TB Interrupt state at ReadEClockTime() is returned in A1
	;

		bsr	ReadESClockTime
				
		move.l	TV_SECS(sp),TV_SECS(a0)
		move.l	TV_MICRO(sp),d0

		addq.l	#TV_SIZE,sp

	;
	; Test if SetICR() returned TRUE at ReadEClockTime() - if so,
	; then TD_SYSTIME is off by $10000.  See EIncSTEClock().
	;
	; Typically this test will be FALSE, and will branch to
	; gsc_noint
	;

		move.w	a1,d1
		bne.s	gsc_noint	;1 if no TB interrupt at read time


		addi.l	#$10000,d0
		cmp.l	TD_ECLOCKHERTZ(a6),d0
		bcs.s	gsc_noint
		addq.l	#1,TV_SECS(a0)
		sub.l	TD_ECLOCKHERTZ(a6),d0

gsc_noint:					
		move.l	EV_LO(a0),d1	; same offset as TV_MICRO - still valid

		swap	d1
		move.w	#0,d1
		swap	d1
		add.l	d1,d0

		cmp.l	TD_ECLOCKHERTZ(a6),d0
		bcs.s	NoAdjust
		addq.l	#1,TV_SECS(a0)
		sub.l	TD_ECLOCKHERTZ(a6),d0
NoAdjust:
		move.l	d0,TV_MICRO(a0)
		rts


******* timer.device/ReadEClock **************************************
*
*   NAME
*	ReadEClock -- Get the current value of the E-Clock. (V36)
*
*   SYNOPSIS
*	E_Freq = ReadEClock( Dest )
*	D0                   A0
*
*	ULONG ReadEClock ( struct EClockVal * );
*
*   FUNCTION
*	This routine calculates the current 64 bit value of the E-Clock
*	and stores it in the destination EClockVal structure. The count
*	rate of the E-Clock is also returned.
*
*	A0 will be left unchanged
*
*	This is a low overhead function designed so that very short
*	intervals may be timed.
*
*   INPUTS
*	Dest -- pointer to an EClockVal structure.
*
*   RETURNS
*	Dest -- the EClockVal structure will contain the E-Clock time
*	E_Freq -- The count rate of the E-Clock (tics/sec).
*
*   NOTES
*	This function may be called from interrupts.
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*	A6 -- TDDev (given)
*	A1 -- munged
*	A0 -- time field of request (given)
*

ReadETime:
*$* debug
*		ERRMSG	"ReadETime"
*$* debug
		bsr	ReadEClockTime
		move.l	TD_ECLOCKHERTZ(a6),d0

		RTS


******* timer.device/SubTime *****************************************
*
*   NAME
*	SubTime -- Subtract one time request from another.
*
*   SYNOPSIS
*	SubTime( Dest, Source )
*	         A0    A1
*
*	void SubTime( struct timeval *, struct timeval *);
*
*   FUNCTION
*	This routine subtracts one timeval structure from another.  The
*	results are stored in the destination (Dest - Source -> Dest)
*
*	A0 and A1 will be left unchanged
*
*   INPUTS
*	Dest, Source -- pointers to timeval structures.
*
*   NOTES
*	This function may be called from interrupts.
*
*   SEE ALSO
*	timer.device/AddTime(),
*	timer.device/CmpTime()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

TimSub:
*$* debug
*		ERRMSG	"TimSub"
*$* debug
		MOVEM.L	(A0),D0/D1		; TV_SECS == 0

		SUB.L	(A1),D0			; TV_SECS == 0
		SUB.L	TV_MICRO(A1),D1


TimSub_Overflow:
		BGE.S	TimSub_Assign

		SUBQ.L	#1,D0
		ADD.L	#MAXMICRO,D1
		BRA.S	TimSub_Overflow

TimSub_Assign:
		MOVEM.L	D0/D1,(A0)		; TV_SECS == 0

		RTS


******* timer.device/AddTime *****************************************
*
*   NAME
*	AddTime -- Add one time request to another.
*
*   SYNOPSIS
*	AddTime( Dest, Source )
*	         A0    A1
*
*	void AddTime( struct timeval *, struct timeval *);
*
*   FUNCTION
*	This routine adds one timeval structure to another.  The
*	results are stored in the destination (Dest + Source -> Dest)
*
*	A0 and A1 will be left unchanged
*
*   INPUTS
*	Dest, Source -- pointers to timeval structures.
*
*   NOTES
*	This function may be called from interrupts.
*
*   SEE ALSO
*	timer.device/CmpTime(),
*	timer.device/SubTime()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

TimAdd:
*$* debug
*		ERRMSG	"TimAdd"
*$* debug

		MOVE.L	D2,-(SP)
    
		MOVE.L	#MAXMICRO,D2

		MOVEM.L	(A0),D0/D1		; TV_SECS == 0

		ADD.L	(A1),D0			; TV_SECS == 0
		ADD.L	TV_MICRO(A1),D1

TimAdd_OverFlow:
		CMP.L	D1,D2
		BGT.S	TimAdd_Assign

		ADDQ.L	#1,D0
		SUB.L	D2,D1
		BRA.S	TimAdd_OverFlow

TimAdd_Assign:
		MOVEM.L	D0/D1,(A0)		; TV_SECS == 0

		MOVE.L	(SP)+,D2
		RTS


******* timer.device/CmpTime *****************************************
*
*   NAME
*	CmpTime -- Compare two timeval structures.
*
*   SYNOPSIS
*	result = CmpTime( Dest, Source )
*	D0                A0    A1
*
*	LONG CmpTime( struct timeval *, struct timeval *);
*
*   FUNCTION
*	This routine compares timeval structures
*
*	A0 and A1 will be left unchanged
*
*   INPUTS
*	Dest, Source -- pointers to timeval structures.
*
*   RESULTS
*	result will be   0 if Dest has same time as source
*	                -1 if Dest has more time than source
*	                +1 if Dest has less time than source
*
*   NOTES
*	This function may be called from interrupts.
*
*   SEE ALSO
*	timer.device/AddTime(),
*	timer.device/SubTime()
*
*   BUGS
*	Older version of this document had the sense of the return
*	codes wrong; the code hasn't changed but the document has.
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

TimCmp:
*$* debug
*		ERRMSG	"TimCmp"
*$* debug

		CLEAR	D0

		TIMCMP	A0,A1,D1
		BEQ.S	TimCmp_End

		BHI.S	TimCmp_hi

		MOVEQ	#-1,D0

TimCmp_End:
		RTS
TimCmp_hi:
		MOVEQ	#1,D0
		rts


	END

@


36.18
log
@Major changes for better MIDI performance (decrease DISABLE time)
@
text
@d15 1
a15 1
* $Id: libentry.asm,v 36.17 91/01/25 15:46:14 rsbx Exp Locker: darren $
d17 1
a17 1
* $Locker: darren $
d20 6
d127 1
a127 1
******* timer.device/GetSysTime() ************************************
d331 1
a331 1
******* timer.device/ReadEClock() ************************************
d387 1
a387 1
******* timer.device/SubTime() ***************************************
d447 1
a447 1
******* timer.device/AddTime() ***************************************
d513 1
a513 1
******* timer.device/CmpTime() ***************************************
@


36.17
log
@Change to V37
@
text
@d15 1
a15 1
* $Id$
d17 1
a17 1
* $Locker: rsbx $
d20 3
d79 1
d219 4
a222 1
		bsr	GetSTTOD		; set internal systime
d224 1
a224 2
		move.l	TV_SECS(a0),d0
		move.l	TV_MICRO(a0),d1
d226 1
a226 5
		sub.l	TD_PREVREQ+TV_SECS(a6),d0
		sub.l	TD_PREVREQ+TV_MICRO(a6),d1
		or.l	d0,d1
		movem.l	TV_SECS(a0),d0-d1
		beq.s	GSTSame			; same as previous req
d228 5
a232 1
		movem.l	d0-d1,TD_PREVREQ+TV_SECS(a6)
a233 8
		clr.l	TD_NUMREQS(a6)		; start form zero
		bra.s	GSTCommon
GSTSame:
		addq.l	#1,TD_NUMREQS(a6)	; for uniqueness
GSTCommon:
		mulu.w	TD_TIMEPERTOD(a6),d1	; TOD-tics to usecs
		add.l	TD_NUMREQS(a6),d1	; make unique
		TD_ENABLE	a1,TD_SYSLIB(a6)
a234 2
		movem.l	d0-d1,TV_SECS(a0)
		rts
a235 1

a251 1
		move.l	a0,a1
d253 1
a253 2
		TD_ENABLE	a0,TD_SYSLIB(a6)
		move.l	a1,a0
d272 2
a273 2
		TD_DISABLE	a1,TD_SYSLIB(a6)
		bsr	ReadEClockTime
d275 7
a281 3
		move.l	TD_SYSTIME+TV_SECS(a6),TV_SECS(a0)
		move.l	TD_SYSTIME+TV_MICRO(a6),d0
		TD_ENABLE	a1,TD_SYSLIB(a6)
d283 27
a309 1
		move.l	EV_LO(a0),d1
@


36.16
log
@Fixed CmpTime autodoc.
@
text
@d15 1
a15 1
* $Header: /usr/professor/rsbx/timer.device/RCS/libentry.asm,v 36.15 90/04/01 19:12:54 rsbx Exp Locker: rsbx $
d20 3
@


36.15
log
@RCS version change.
@
text
@d15 1
a15 1
* $Header: /usr/professor/rsbx/timer.device/RCS/libentry.asm,v 36.14 90/02/16 11:56:18 rsbx Exp Locker: rsbx $
d20 3
d487 1
a487 1
*	result = CmdTime( Dest, Source )
d490 1
a490 1
*	LONG CmdTime( struct timeval *, struct timeval *);
@


36.14
log
@
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.13 89/11/23 16:49:27 rsbx Exp $
d20 3
@


36.13
log
@Cleaned up some graphics kludges. Removed references to TR_WAITUNTIL and
WaitUnitl() from to docs.
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.12 89/09/15 18:55:14 rsbx Exp $
d20 4
a161 2
		TD_DISABLE	a1,TD_SYSLIB(a6)

a162 2

		TD_ENABLE	A1,TD_SYSLIB(a6)
d204 2
d226 2
d245 1
d250 1
d270 1
d275 2
@


36.12
log
@
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.2 89/08/09 19:14:04 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
a139 1
*	timer.device/WaitUntil()
@


36.11
log
@
@
text
@d147 2
d151 1
d164 12
d177 1
a177 1
		bsr	GetSTEClock
d181 1
a181 1
		bsr	Mult64
d189 12
d202 1
a202 1
		bsr	GetSTTOD
d211 1
a211 1
		beq.s	GSTSame
d215 1
a215 1
		clr.l	TD_NUMREQS(a6)
d218 1
a218 1
		addq.l	#1,TD_NUMREQS(a6)
d220 2
a221 2
		mulu.w	TD_TIMEPERTOD(a6),d1
		add.l	TD_NUMREQS(a6),d1
d226 12
d242 1
a242 1
		bsr	ReadTOD
d244 1
a244 1
		bsr	Tics2Time
d248 13
d323 3
@


36.10
log
@TimeDelay() and WaitUntil() removed.
@
text
@d63 2
d87 4
d153 49
d203 4
a206 1
		TD_DISABLE	a0,TD_SYSLIB(a6)
d208 2
a209 3
		subq.l	#EV_SIZE,sp
		move.l	sp,a0
		move.l	a1,-(sp)
a210 1
		move.l	(sp)+,a1
d212 1
a212 1
		move.l	TD_SYSTIME+TV_SECS(a6),TV_SECS(a1)
a215 3
		TD_ENABLE	A0,TD_SYSLIB(a6)

		addq.l	#EV_SIZE,sp
d223 1
a223 1
		addq.l	#1,TV_SECS(a1)
a224 1

d226 1
a226 7
		move.l	TD_ECLOCKCONST2(a6),d1
		bsr	Mult64
		move.w	d0,d1
		swap	d1			; micros

		move.l	d1,TV_MICRO(a1)
		move.l	a1,a0
@


36.9
log
@Changed eclockval to EClockVal.
@
text
@d10 1
a10 1
* device.asm
a84 2
	XDEF	TimeDelay
	XDEF	WaitUntil
a424 219


******* timer.device/TimeDelay() *************************************
*
*   NAME
*	TimeDelay -- Return after a period of time has elapsed. (V36)
*
*   SYNOPSIS
*	Error = TimeDelay( TimeVal, Unit )
*	D0                 A0       D0
*
*	LONG TimeDelay( struct timeval *, LONG );
*
*   FUNCTION
*	Waits for the period of time specified in the timeval before
*	returning to the caller.
*
*   INPUTS
*	TimeVal -- pointer to a timeval structure which specifies
*	    how long this call should wait in units appropriate
*	    for the given timer unit number.
*	Unit -- timer.device unit to open for this command.
*
*   RESULTS
*	TimeVal -- will contain junk. (I mean this! Don't depend
*	    on anything useful being returned here or your code
*	    will break! YOU HAVE BEEN WARNED!)
*	Error -- will be zero if all went well; otherwise, non-zero.
*
*   NOTES
*	Two likely reasons for failures are invalid unit numbers or
*	no more free signal bits for this task.
*
*   SEE ALSO
*	timer.device/TR_ADDREQUEST,
*	timer.device/TR_WAITUNTIL,
*	timer.device/WaitUnitl()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

TimeDelay:
		move.l	#TR_ADDREQUEST,d1
		bra.s	DoTimer
		; rft


******* timer.device/WaitUntil() *************************************
*
*   NAME
*	WaitUntil -- Return after a certain time. (V36)
*
*   SYNOPSIS
*	Error = WaitUntil( TimeVal, Unit )
*	D0                 A0       D0
*
*	LONG WaitUntil( struct timeval *, LONG );
*
*   FUNCTION
*	Waits until the system time is greater than or equal to the
*	time in the timeval structure.
*
*   INPUTS
*	TimeVal -- pointer to a timeval structure which specifies
*	    the system time when this call should return.
*	Unit -- timer.device unit to open for this command.
*
*   RESULTS
*	TimeVal -- will contain junk. (I mean this! Don't depend
*	    on anything useful being returned here or your code
*	    will break! YOU HAVE BEEN WARNED!)
*	Error -- will be zero if all went well; otherwise, non-zero.
*
*   NOTES
*	Two likely reasons for failures are invalid unit numbers or
*	no more free signal bits for this task.
*
*	The unit given must be valid; eventhough, it currently has no
*	effect on the operation of this call. This is for future
*	compatibility. YOU HAVE BEEN WARNED!
*
*   SEE ALSO
*	timer.device/TR_ADDREQUEST,
*	timer.device/TR_GETSYSTIME,
*	timer.device/TR_SETSYSTIME,
*	timer.device/TR_WAITUNTIL,
*	timer.device/GetSysTime(),
*	timer.device/TimeDelay()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

WaitUntil:
		move.l	#TR_WAITUNTIL,d1
		; bra.s	DoTimer
		; rft


*****i* timer.device/internal/DoTimer ********************************
*
*   NAME
*	DoTimer -- "DoIO" a timer.device command. (V36)
*
*   SYNOPSIS
*	Error = DoTimer( TimeVal, Unit, Command )
*	D0               A0       D0    D1
*
*	LONG DoTimer( struct timeval *, LONG, WORD );
*
*   FUNCTION
*	Create a timerequest and reply port then perform the
*	device command via DoIO.
*
*   INPUTS
*	TimeVal -- pointer to a timeval structure. Contents copied
*	    into IORequest before DoIO.
*	Unit -- timer.device unit to open for this command.
*	Command -- command to perform.
*
*   RESULTS
*	TimeVal -- filled from timeval structure of IORequest after
*	    command completes.
*	Error -- will be zero if all went well; otherwise, non-zero.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*

DoTimer:
		movem.l	d2-d3/a2-a4,-(sp)
		move.l	a0,a4			; timeval
		move.l	d0,d2			; unit
		move.l	d1,d3			; command

		lea.l	-MP_SIZE-IOTV_SIZE(sp),sp
		movea.l	sp,a3			; IORequest
		lea	IOTV_SIZE(a3),a2	; reply port

		move.b	#NT_MSGPORT,LN_TYPE(a2)	; set up the node type
		clr.b	LN_PRI(a2)
		clr.l	LN_NAME(a2)		; no name
		clr.b	MP_FLAGS(a2)

		moveq.l	#-1,d0
		LINKSYS	AllocSignal		; get port signal bit
		cmp.b	#-1,d0
		beq	DTError1
		move.b	d0,MP_SIGBIT(a2)

		suba.l	a1,a1			; find this task
		LINKSYS	FindTask
		move.l	d0,MP_SIGTASK(a2)	; and fill in this task
		lea.l	MP_MSGLIST(a2),a0
		NEWLIST	a0			; initialise message port

		movea.l	a3,a1			; this IORequest
		move.l	d2,d0			; this unit
		moveq.l	#0,d1			; no special flags
		bsr	Open
		tst.l	d0			; any errors ?
		bne.s	DTError2			; yep

		move.l	a2,MN_REPLYPORT(a3)	; replies go to this port
		
		movea.l	a3,a1
		move.w	d3,IO_COMMAND(a1)	; this command

		move.l	TV_SECS(a4),IOTV_TIME+TV_SECS(a1)
		move.l	TV_MICRO(a4),IOTV_TIME+TV_MICRO(a1)

		LINKSYS	DoIO			; doit

		move.l	IOTV_TIME+TV_SECS(a3),TV_SECS(a4)
		move.l	IOTV_TIME+TV_MICRO(a3),TV_MICRO(a4)

		movea.l	a3,a1
		bsr	Close			; close the device

		moveq.l	#0,d0
		move.b	MP_SIGTASK(a2),d0
		LINKSYS	FreeSignal		; free port signal

DTCleanup:
		lea.l	IOTV_SIZE+MP_SIZE(sp),sp	; clean up stack
		movem.l	(sp)+,d2-d3/a2-a4
		rts

DTError2:
		moveq.l	#0,d0
		move.b	MP_SIGBIT(a2),d0
		LINKSYS	FreeSignal		; free port signal

DTError1:
		moveq.l	#-1,d0
		bra.s	DTCleanup
@


36.8
log
@More Autodoc changes.
@
text
@d195 1
a195 1
*	ULONG ReadEClock ( struct timeval * );
d199 1
a199 1
*	and stores it in the destination eclockval structure. The count
d208 1
a208 1
*	Dest -- pointer to an eclockval structure.
d211 1
a211 1
*	Dest -- the eclockval structure will contain the E-Clock time
@


36.7
log
@Changed Delay to TimeDelay.
@
text
@d97 1
a97 1
******* timer.device/function/GetSysTime *****************************
d131 3
a133 2
*	timer.device/command/TR_GETSYSTIME,
*	timer.device/command/TR_SETSYSTIME
d186 1
a186 1
******* timer.device/function/ReadEClock *****************************
d239 1
a239 1
******* timer.device/function/SubTime ********************************
d263 2
a264 1
*	timer.device/function/AddTime, timer.device/function/CMPTime
d299 1
a299 1
******* timer.device/function/AddTime ********************************
d323 2
a324 1
*	timer.device/function/CmpTime, timer.device/function/SubTime
d365 1
a365 1
******* timer.device/function/CmpTime ********************************
d393 2
a394 1
*	timer.device/function/AddTime, timer.device/function/SubTime
d429 1
a429 1
******* timer.device/function/TimeDelay ******************************
d461 3
a463 1
*	timer.device/command/TR_ADDREQUEST
d481 1
a481 1
******* timer.device/function/WaitUntil ******************************
d516 6
a521 1
*	timer.device/command/TR_WAITUNTIL
d539 1
a539 1
*****i* timer.devicefunction/DoTimer *********************************
@


36.6
log
@Autodoc comments made to conform to Autodoc style guide.
@
text
@d85 1
a85 1
	XDEF	Delay
d425 1
a425 1
******* timer.device/function/Delay **********************************
d428 1
a428 1
*	Delay -- Return after a period of time has elapsed. (V36)
d431 2
a432 2
*	Error = Delay( TimeVal, Unit )
*	D0             A0       D0
d434 1
a434 1
*	LONG Delay( struct timeval *, LONG );
d469 1
a469 1
Delay:
@


36.5
log
@Added Delay, WaitUntil and some support code.
@
text
@d3 1
a3 1
*	Copyright (C) 1985, Commodore Amiga Inc.  All rights reserved.	*
d34 1
a34 1
*------ Included Files ***********************************************
d50 1
a50 1
*------ Imported Names ***********************************************
d76 1
a76 1
*------ Exported Names ***********************************************
d90 1
a90 1
*------ Local Definitions ********************************************
d97 1
a97 1
******* timer.device/GetSysTime **************************************
d100 1
a100 1
*	GetSysTime -- Get the current system time
d103 2
a104 2
*	GetSysTime( Dest ), TDLib
*	            A0	    A6
d106 2
d109 3
d113 8
d122 1
d125 1
d127 2
a128 1
*   EXCEPTIONS
d131 2
d185 1
a185 1
******* timer.device/ReadEClock **************************************
d188 1
a188 1
*	ReadEClock - get the current value of the E-Clock
d191 2
a192 2
*	E_Freq = ReadEClock( Dest ), TDLib
*	D0                   A0      A6
d194 2
d203 3
d210 1
d213 2
a214 1
*   EXCEPTIONS
d238 1
a238 1
******* timer.device/SubTime *****************************************
d241 1
a241 1
*	SubTime - subtract one time request from another
d244 2
a245 2
*	SubTime( Dest, Source ), TDLib
*	         A0    A1 	 A6
d247 2
d258 2
a259 1
*   EXCEPTIONS
d262 1
d297 1
a297 1
******* timer.device/AddTime *****************************************
d300 1
a300 1
*	AddTime - add one time request to another
d303 2
a304 2
*	AddTime( Dest, Source ), TDLib
*	         A0    A1	 A6
d306 2
d317 2
a318 1
*   EXCEPTIONS
d321 1
d362 1
a362 1
******* timer.device/CmpTime **********************************
d365 1
a365 1
*	CmpTime - compare two timeval structures
d368 2
a369 2
*	result = CmdTime( Dest, Source ), TDLib
*	D0                A0    A1	  A6
d371 2
d382 3
a384 4
*	result will be	 0 if Dest has same time as source
*			-1 if Dest has more time than source
*			+1 if Dest has less time than source
*   EXCEPTIONS
d386 3
d390 1
d425 1
a425 1
******* timer.device/Delay *******************************************
d428 1
a428 1
*	Delay -- return after a given period of time has elapsed
d431 2
a432 2
*	Error = Delay( TimeVal, Unit ), TDLib
*	D0             A0	D0	A6
d434 2
d442 2
a443 2
*		how long this call should wait in units appropriate
*		for the given timer unit number.
d448 2
a449 2
*		on anything useful being returned here or your code
*		will break! YOU HAVE BEEN WARNED!)
d452 1
a452 1
*   EXCEPTIONS
d457 1
d475 1
a475 1
******* timer.device/WaitUntil ***************************************
d478 1
a478 1
*	WaitUntil -- return after a certain time
d481 2
a482 2
*	Error = WaitUntil( TimeVal, Unit ), TDLib
*	D0		   A0	    D0	    A6
d484 2
d488 1
a488 1
*	given timeval.
d492 1
a492 1
*		the system time when this call should return.
d497 2
a498 2
*		on anything useful being returned here or your code
*		will break! YOU HAVE BEEN WARNED!)
d501 1
a501 1
*   EXCEPTIONS
d505 4
d510 1
a512 2
*	The unit given must be valid; eventhough, it currently has no
*	effect on the operation of this call.
d528 1
a528 1
***i*** do timer.device command **************************************
d531 1
a531 1
*	DoTimer -- "DoIO" a timer.device command
d534 2
a535 2
*	result = DoTimer( TimeVal, Unit, Command ), TDLib
*	D0                A0	   D0	 D1	    A6
d537 2
d545 1
a545 1
*		into IORequest before DoIO.
d551 2
a552 1
*		command completes.
d554 1
a554 1
*   EXCEPTIONS
@


36.4
log
@Fixed bug in GetSysTime.
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.3 89/08/16 13:28:52 rsbx Exp $
d17 1
a17 1
* $Locker: rsbx $
a19 3
* Revision 36.3  89/08/16  13:28:52  rsbx
* Added GetSysTime library entry point code.
* 
d61 2
d71 4
d85 2
d328 1
d386 202
d589 1
@


36.3
log
@Added GetSysTime library entry point code.
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.2 89/08/09 19:14:04 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d142 1
a142 1
		moveq.l	#0,d1
@


36.2
log
@changed some comments for autodoc
@
text
@d15 1
a15 1
* $Header: libentry.asm,v 36.1 89/08/09 18:09:41 rsbx Exp $
d17 1
a17 1
* $Locker: rsbx $
d20 3
d34 1
a34 1
***#*** Included Files ***********************************************
d50 1
a50 1
***#*** Imported Names ***********************************************
d60 1
d70 1
a70 1
***#*** Exported Names ***********************************************
d78 1
d82 1
a82 1
***#*** Local Definitions ********************************************
d86 71
@


36.1
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/machines/professor/professor/rsbx/timer.device/RCS/libentry.asm,v 1.1 89/08/09 14:07:47 rsbx Exp $
d17 1
a17 1
* $Locker:  $
d20 3
d31 1
a31 1
******* Included Files ***********************************************
d47 1
a47 1
******* Imported Names ***********************************************
d66 1
a66 1
******* Exported Names ***********************************************
d77 1
a77 1
******* Local Definitions ********************************************
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
* $Header: /usr.MC68010/ghostwheel/commodore/amiga/V36/src/kickstart/timer/RCS/libentry.asm,v 1.1 89/08/09 14:07:47 rsbx Exp $
d20 3
a22 3
*Revision 1.1  89/08/09  14:07:47  rsbx
*Initial revision
*
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
* $Header$
d17 1
a17 1
* $Locker$
d19 4
a22 1
* $Log$
@
