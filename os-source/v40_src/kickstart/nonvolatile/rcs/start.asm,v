head     40.19;
branch   ;
access   ;
symbols  V40_35:40.19 V40_34:40.19 rel40_10:40.7 rel40_9:40.5 rel40_8:40.5 rel40_7:40.5 rel40_6:40.4 rel40_5:40.4 rel40_4:40.2 rel40_3:40.1 rel40_2:40.0 rel40_1:39.1 rel39_1:39.1;
locks    ; strict;
comment  @* @;


40.19
date     93.04.07.10.14.40;  author brummer;  state Exp;
branches ;
next     40.18;

40.18
date     93.03.31.17.58.14;  author brummer;  state Exp;
branches ;
next     40.17;

40.17
date     93.03.31.14.27.06;  author brummer;  state Exp;
branches ;
next     40.16;

40.16
date     93.03.26.16.23.37;  author brummer;  state Exp;
branches ;
next     40.15;

40.15
date     93.03.23.13.07.41;  author brummer;  state Exp;
branches ;
next     40.14;

40.14
date     93.03.12.10.04.39;  author brummer;  state Exp;
branches ;
next     40.13;

40.13
date     93.03.11.14.24.44;  author brummer;  state Exp;
branches ;
next     40.12;

40.12
date     93.03.11.10.33.02;  author brummer;  state Exp;
branches ;
next     40.11;

40.11
date     93.03.10.14.34.56;  author brummer;  state Exp;
branches ;
next     40.10;

40.10
date     93.03.09.14.05.37;  author brummer;  state Exp;
branches ;
next     40.9;

40.9
date     93.03.08.18.03.05;  author brummer;  state Exp;
branches ;
next     40.8;

40.8
date     93.03.05.12.51.23;  author brummer;  state Exp;
branches ;
next     40.7;

40.7
date     93.03.03.10.49.26;  author brummer;  state Exp;
branches ;
next     40.6;

40.6
date     93.03.01.15.07.14;  author brummer;  state Exp;
branches ;
next     40.5;

40.5
date     93.02.25.09.02.33;  author Jim2;  state Exp;
branches ;
next     40.4;

40.4
date     93.02.19.15.34.47;  author Jim2;  state Exp;
branches ;
next     40.3;

40.3
date     93.02.19.15.21.13;  author Jim2;  state Exp;
branches ;
next     40.2;

40.2
date     93.02.18.11.07.55;  author Jim2;  state Exp;
branches ;
next     40.1;

40.1
date     93.02.16.13.48.54;  author Jim2;  state Exp;
branches ;
next     40.0;

40.0
date     93.02.10.17.25.00;  author Jim2;  state Exp;
branches ;
next     39.1;

39.1
date     93.02.03.13.48.49;  author Jim2;  state Exp;
branches ;
next     39.0;

39.0
date     93.02.03.11.34.17;  author Jim2;  state Exp;
branches ;
next     1.3;

1.3
date     92.10.12.10.41.22;  author jerryh;  state Exp;
branches ;
next     1.2;

1.2
date     92.10.08.15.54.14;  author jerryh;  state Exp;
branches ;
next     1.1;

1.1
date     92.10.08.13.21.32;  author jerryh;  state Exp;
branches ;
next     ;


desc
@Resident structure for nonvolatile.library.
@


40.19
log
@Fix the open/close routine to zero out library pointers in nvbase, and
call the diskinit routine whenever the nvlock pointer is 0.  This helped
finding the disk more consistantly on opens.
@
text
@******************************************************************************
*
*	$Id: start.asm,v 40.18 93/03/31 17:58:14 brummer Exp Locker: brummer $
*
******************************************************************************
*
*	$Log:	start.asm,v $
* Revision 40.18  93/03/31  17:58:14  brummer
* Add call to releasedisk during closelibs
*
* Revision 40.17  93/03/31  14:27:06  brummer
* Fix to close opened libraries at close time not expunge time.
*
* Revision 40.16  93/03/26  16:23:37  brummer
* Fix to prevent multiple opens of lowlevel and utility libraries.
*
* Revision 40.15  93/03/23  13:07:41  brummer
* Fix to error paths when lowlevel.library is not opened correctly.
* If error, it was trying to close lowlevel and bombing.  This was
* found when generating the DISK based version of nonvolatile.library
*
* Revision 40.14  93/03/12  10:04:39  brummer
* Moved Version string definition to immediatly following the
* ROMTagName definition per Jerry's request.
*
* Revision 40.13  93/03/11  14:24:44  brummer
* Open lowlevel.library on opens and close it on closes.  This is fix
* related to nonvolatilebase.i 40.5
*
* Revision 40.12  93/03/11  10:33:02  brummer
* Fix writing library revision during init.  It was writing a long value
* and should be a word.
* Fix no open of utility.library if dos not opened before.  NVRAM
* routines use utility.
* Fix close/expunge code to get rid of C code and use code duped from
* locale.library.
*
* Revision 40.11  93/03/10  14:34:56  brummer
* Fix to open code so that if DOS has not been opened, the
* open of nonvolatile.library will still be successful.
*
* Revision 40.10  93/03/09  14:05:37  brummer
* Change 1 long jump to short.
*
* Revision 40.9  93/03/08  18:03:05  brummer
* Add Martin's requested changes - short intvectors, DiskInit semaphore,
* open of DOS failure left UTIL open...
*
* Revision 40.8  93/03/05  12:51:23  brummer
* Move InitNVRAM call to init instead of open.
* Remove origonal method of disabling requesters and use the parameterized method instead.
* If the parameter is TRUE, a open of lowlevel.library will be done
* and a call will be made to KillReq() and RestoreReq()
*
* Revision 40.7  93/03/03  10:49:26  brummer
* Move call to InitNVRAM to library open instead of library init.
* (see associated fix in nvram/nvramtree.asm rev 40.7)
* Add open failure test to open of utility.library.
*
* Revision 40.6  93/03/01  15:07:14  brummer
* utility.library is opened and added to nonvolatile library base
* on opens.  A signal semiphore for NVRAM device access is
* initialized on opens as well.
*
* Revision 40.5  93/02/25  09:02:33  Jim2
* StoreNV nolonger requires the leading underscore.
*
* Revision 40.4  93/02/19  15:34:47  Jim2
*
* Revision 40.3  93/02/19  15:21:13  Jim2
* DOSBase will be opened iff it has not yet been opened and it
* exists on the libraries list.
* DOSBase will only be closed in the expunge if it has been opened.
*
* Revision 40.2  93/02/18  11:07:55  Jim2
* Added SetNVProtection to the list of LVOs.
*
* Revision 40.1  93/02/16  13:48:54  Jim2
* Changed the interface to NVRAM subcode to be identical with
* Disk subcode.
*
* Revision 40.0  93/02/10  17:25:00  Jim2
* Kills requestors before calling InitDisk.
*
* Revision 39.1  93/02/03  13:48:49  Jim2
* Corrected field names for nonvolatilebase record.  Also
* removed an line dealing with the deleted semaphore.
*
* Revision 39.0  93/02/03  11:34:17  Jim2
* Rewrote downcoding more of the standard functions into assembler.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

	INCLUDE	'dos/dosextens.i'

	INCLUDE	'exec/macros.i'
        INCLUDE "exec/types.i"
        INCLUDE "exec/resident.i"
        INCLUDE "exec/libraries.i"
        INCLUDE "exec/initializers.i"
	INCLUDE	"exec/execbase.i"

        INCLUDE "nonvolatilebase.i"
	INCLUDE	'nonvolatile.i'
        INCLUDE "nonvolatile_rev.i"

;
; externals in oldmain.c :
;
        XREF    _GetCopyNV
        XREF    _FreeNVData
        XREF    _DeleteNV
;
; externals in main.asm :
;
        XREF    GetNVInfo
	XREF	GetNVList
	XREF	SetNVProtection
	XREF	StoreNV
;
; externals in EndCode.asm :
;
        XREF    __EndCode
;
; externals in NVRAM/nvramtree.asm :
;
	XREF	InitNVRAM
	XREF	ReleaseNVRAM
;
; externals in Disk/DiskInformation.asm :
;
	XREF	InitDisk
	XREF	ReleaseDisk
;
; public definitions :
;
	XDEF	subsysName
	XDEF	ROMTagName

        SECTION NonVolatileLibrary
;
; Prevent direct execution :
;
        moveq.l #-1,d0
        rts


ROMTAG:
        dc.w    RTC_MATCHWORD   ;RT_MATCHWORD
        dc.l    ROMTAG          ;RT_MATCHTAG
        dc.l    __EndCode       ;RT_ENDSKIP
        dc.b    RTF_COLDSTART|RTF_AUTOINIT   ;RT_FLAGS
        dc.b    VERSION         ;RT_VERSION
        dc.b    NT_LIBRARY      ;RT_TYPE
        dc.b    0               ;RT_PRI
        dc.l    subsysName	;RT_NAME
        dc.l    VERSTR		;RT_IDSTRING
        dc.l    InitTable	;RT_INIT

InitTable:	dc.l	NVBASESIZE
		dc.l	initFunc
		dc.l	0			; initStruct
		dc.l	InitModule

*------ Functions Offsets -------------------------------------

V_DEF		MACRO
		DC.W	\1+(*-initFunc)
		ENDM

initFunc:
	dc.w	-1
        V_DEF	LibOpen
        V_DEF	LibClose
        V_DEF	LibExpunge
        V_DEF	Reserved
        V_DEF	_GetCopyNV
        V_DEF	_FreeNVData
        V_DEF	StoreNV
        V_DEF	_DeleteNV
        V_DEF	GetNVInfo
	V_DEF	GetNVList
	V_DEF	SetNVProtection
        dc.w    -1


*------ Initializaton Table -----------------------------------

; initStruct:
;	INITLONG        LIB_IDSTRING,VERSTR
;        INITLONG        LN_NAME,subsysName
;        INITWORD        LIB_VERSION,VERSION
;        INITWORD        LIB_REVISION,REVISION
;        INITBYTE        LN_TYPE,NT_LIBRARY
;        INITBYTE        LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
;
;        DC.L            0



*****l* Start.asm/InitModule *************************************************
*
*   NAME
*	InitModule - Initialization function for nonvolatile.device.
*
*   SYNOPSIS
*	InitLib = InitModule (LibBase, SegList, ExecBase)
*	d0		      d0       a0	a6
*
*   FUNCTION
*	If this is successful the library is added to the system.
*
*   INPUTS
*	LibBase - Pointer to the base for this library.
*	SegList	- Pointer to the code for this library.
*	ExecBase - Pointer to the base of exec.library.
*
*   RESULT
*	InitLib - Pointer to the base for this library if successful.  NULL
*		  if there is a problem in intialization.
*
******************************************************************************
InitModule:
	        move.l	a5,-(sp)			; save a5
		move.l	d0,a5				; a5 gets lib base
;
; Init library base value not autoinited :
;
		move.l	a0,nv_SegList(a5)		; init library seglist
		move.l	a6,nv_ExecBase(a5)		; init library execbase
		move.w	#REVISION,LIB_REVISION(a5)	; init library revision
;
; Init semaphores :
;
		lea	nv_DiskInitSema(a5),a0		; init DiskInit semaphore
		JSRLIB	InitSemaphore			;
		lea	nv_Semaphore(a5),a0		; init NVRAM device semaphore
		JSRLIB	InitSemaphore			;
;
; Call to init NVRAM device interface :
;
		bsr	InitNVRAM			; call to init NVRAM

		move.l	a5,d0				; d0 gets ptr to lib base
	        move.l	(sp)+,a5
	        rts

*****l* start.asm/LibOpen ****************************************************
*
*   NAME
*	LibOpen - open routine for nonvolatile.device.
*
*   SYNOPSIS
*	NVBase = LibOpen (NVBase)
*	d0		  a6
*
*   FUNCTION
*	This routine will open the libraries required for NVRAM functions.
*
*	The nonvolatile.library may be opened before DOS has been opened and
*	booted.  This is to get the language settings out of the NVRAM device.
*
*	If DOS has not been opened, this library will open all libraries
*	required for NVRAM device operations.  The Disk operations require
*	the DOS library pointer in the base to be nonzero to execute.  If DOS
*	fails to open, all other libraries will be closed and the open will
*	not be successful.
*
*
*   INPUTS
*	NVBase - Pointer to the base of nonvolatile.library.
*
*   RESULT
*	Either returns the library base if sucessful, or NULL if cannot open
*	the others.
*
******************************************************************************
LibOpen:
		movem.l	a5/a6,-(sp)
		move.l	a6,a5				; a5 gets nonvolatile base
		move.l	nv_ExecBase(a5),a6		; a6 gets exec base
;
; Open libraries needed even if DOS is unavailable :
;
		tst.w	LIB_OPENCNT(a5)			;
		bne.s	lo_01				;

		lea	UTILName(pc),a1			; open utility.library
		move.l	#37,d0				; version 37
		JSRLIB	OpenLibrary			;
		move.l	d0,nv_UTILBase(a5)		;
		beq.s	lo_Exit				; if error, j to exit

		lea	LLName(pc),a1			; open lowlevel.library
		moveq.l	#0,d0				; any version
		JSRLIB	OpenLibrary			;
		move.l	d0,nv_LowLevelBase(a5)		;
		bne.s	lo_01				; if OK, j to continue

		bsr	CloseLibs3			; call to close libraries
		bra.s	lo_03				; j to exit
;
; Determine if we have already opened DOS library :
;
lo_01:		move.l	nv_DOSBase(a5),d0		; is DOS lib ptr in our base ?
		bne.s	lo_04				; if yes, j to bumpcount
;
; Determine if anyone has opened DOS library :
;
		lea	DOSName(pc),a1			; a1 gets ptr to string
		lea	LibList(a6),a0			; a0 gets list header
		JSRLIB	FindName			; is DOS in Exec Lib list ?
		tst.l	d0				;
		beq.s	lo_06				; if no, j to return OK
;
; DOS has already been opened, so we can open it :
;
		lea	DOSName(pc),a1			; open dos.library
		move.l	#37,d0				; version 37
		JSRLIB	OpenLibrary			;
		move.l	d0,nv_DOSBase(a5)		;
		bne.s	lo_04				; if OK, j to continue

lo_02:		bsr	CloseLibs2			; call to close libraries
lo_03:		moveq.l	#0,d0				;
		bra.s	lo_Exit				; j to exit
;
; Call InitDisk :
;
lo_04:		tst.l	nv_DiskLock(a5)
		bne.s	lo_06
		bsr	InitDisk			; call for disk init
;
; Bump open count and return :
;
lo_06:		addq.w	#1,LIB_OPENCNT(a5)
		bclr	#LIBB_DELEXP,LIB_FLAGS(a5)
		move.l	a5,d0				; return base in d0
lo_Exit:	movem.l	(sp)+,a5/a6			; restore registers
		rts






;-----------------------------------------------------------------------
; Library close entry point called every CloseLibrary()
; On entry, A6 has LocaleBase, task switching is disabled
; Returns 0 normally, or the library seglist when lib should be expunged
;   due to delayed expunge bit being set
LibClose:
	movem.l	a5/a6,-(sp)			; save registers
	move.l	a6,a5				; a5 gets NVBase
	move.l	nv_ExecBase(a5),a6		; a6 gets ExecBase
	subq.w	#1,LIB_OPENCNT(a5)		; decrement lib open count
	bne.s	lc_04				; if not zero, j to return
	bsr	ReleaseDisk			; call to release disk
	bsr.s	CloseLibs			; call to close libraries opened at open
	bclr	#LIBB_DELEXP,LIB_FLAGS(a5)	; is delayed expunge set ?
	beq.s	lc_04				; if no, j to return
;
; Delayed expunge :
;
	tst.w	LIB_OPENCNT(a5)			; is library in use ?
	bne.s	lc_04				; if yes, j to return
	bsr.s	DoExpunge			; call to expunge

lc_04:	moveq	#0,d0				; d0 gets return code
	movem.l	(sp)+,a5/a6			; restore registers
	rts

;-----------------------------------------------------------------------
; Library expunge entry point called whenever system memory is lacking memory
; On entry, A6 has LocaleBase, task switching is disabled
; Returns the library seglist if the library open count is 0, returns 0
; otherwise and sets the delayed expunge bit.
LibExpunge:
	tst.w	LIB_OPENCNT(a6)
	beq.s	DoExpunge
	bset	#LIBB_DELEXP,LIB_FLAGS(a6)
	moveq	#0,d0
	rts

DoExpunge:
	movem.l	d2/a5/a6,-(sp)
	move.l	a6,a5
	move.l	nv_ExecBase(a5),a6
	move.l	nv_SegList(a5),d2

	move.l  a5,a1
	JSRLIB	Remove

	move.l	a5,a1
	moveq	#0,d0
	move.w	LIB_NEGSIZE(a5),d0
	sub.l	d0,a1
	add.w	LIB_POSSIZE(a5),d0
	JSRLIB	FreeMem

	move.l	d2,d0
	movem.l	(sp)+,d2/a5/a6
	rts


;-----------------------------------------------------------------------
CloseLibs:
	move.l	nv_DOSBase(a5),a1
	JSRLIB	CloseLibrary
	move.l	#0,nv_DOSBase(a5)
CloseLibs2:
	move.l	nv_LowLevelBase(a5),a1
	JSRLIB	CloseLibrary
	move.l	#0,nv_LowLevelBase(a5)
CloseLibs3:
	move.l	nv_UTILBase(a5),a1
	JSRLIB	CloseLibrary
	move.l	#0,nv_UTILBase(a5)
	rts


;-----------------------------------------------------------------------
Reserved:
        moveq   #0,d0
        rts





ROMTagName:	dc.b	'ad_'			; this must be followed by VERSTRING
VERSTR:		VSTRING
subsysName:	NONVOLATILELIBRARYNAME
DOSName:	dc.b	'dos.library',0
UTILName:	dc.b	'utility.library',0
LLName:		dc.b	'lowlevel.library',0


        section __MERGED,data

        end


@


40.18
log
@Add call to releasedisk during closelibs
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.17 93/03/31 14:27:06 brummer Exp Locker: brummer $
d8 3
d310 1
a310 1
		bne.s	lo_06				; if yes, j to bumpcount
d334 3
a336 1
lo_04:		bsr	InitDisk			; call for disk init
d414 1
d418 1
d422 1
@


40.17
log
@Fix to close opened libraries at close time not expunge time.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.16 93/03/26 16:23:37 brummer Exp Locker: brummer $
d8 3
d131 1
a131 1
; externals in Disk/FindNVDevice.asm :
a354 1

d357 1
a358 1

@


40.16
log
@Fix to prevent multiple opens of lowlevel and utility libraries.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.15 93/03/23 13:07:41 brummer Exp Locker: brummer $
d8 3
d349 3
a351 9
	subq.w	#1,LIB_OPENCNT(a6)

	; if delayed expunge bit set, then try to get rid of the library
	btst	#LIBB_DELEXP,LIB_FLAGS(a6)
	bne.s	CloseExpunge

	; delayed expunge not set, so stick around
	moveq	#0,d0
	rts
d353 12
a364 4
CloseExpunge:
	; if no library users, then just remove the library
	tst.w	LIB_OPENCNT(a6)
	beq.s	DoExpunge
d366 2
a367 4
	; still some library users, so just flush unused resources
;	bsr	_FlushLib
	bclr	#LIBB_DELEXP,LIB_FLAGS(a6)
	moveq	#0,d0
a389 2

	bsr.s	CloseLibs
@


40.15
log
@Fix to error paths when lowlevel.library is not opened correctly.
If error, it was trying to close lowlevel and bombing.  This was 
found when generating the DISK based version of nonvolatile.library
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.14 93/03/12 10:04:39 brummer Exp Locker: brummer $
d8 5
d280 3
@


40.14
log
@Moved Version string definition to immediatly following the
ROMTagName definition per Jerry's request.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.13 93/03/11 14:24:44 brummer Exp Locker: brummer $
d8 4
d285 4
a288 1
		beq.s	lo_02				; if error, j to close and exit
d292 1
a292 1
		move.l	nv_DOSBase(a5),d0		; is DOS lib ptr in our base ?
d312 1
a312 1
		moveq.l	#0,d0				;
d399 1
a399 1
	move.l	nv_UTILBase(a5),a1
d402 1
a402 1
	move.l	nv_LowLevelBase(a5),a1
@


40.13
log
@Open lowlevel.library on opens and close it on closes.  This is fix
related to nonvolatilebase.i 40.5
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.12 93/03/11 10:33:02 brummer Exp Locker: brummer $
d8 4
d409 2
a410 1
ROMTagName:	dc.b	'ad_'
a411 1
VERSTR:		VSTRING
@


40.12
log
@Fix writing library revision during init.  It was writing a long value
and should be a word.
Fix no open of utility.library if dos not opened before.  NVRAM 
routines use utility.
Fix close/expunge code to get rid of C code and use code duped from
locale.library.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.11 93/03/10 14:34:56 brummer Exp Locker: brummer $
d8 8
d240 4
a243 1
*	If this is the first grab all the other resources.
d245 5
a249 1
*	Increment the open count.
d251 1
d264 3
a266 1

d272 6
d290 4
a293 2
		beq.s	lo_06				; if no, j to skip DOS open

d299 2
a300 2
		move.l	nv_UTILBase(a5),a1		; close utility.library
		JSRLIB	CloseLibrary			;
d390 3
d410 1
@


40.11
log
@Fix to open code so that if DOS has not been opened, the
open of nonvolatile.library will still be successful.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.10 93/03/09 14:05:37 brummer Exp Locker: brummer $
d8 4
d81 3
a83 3

				;main.c
        XREF    _LibClose
d87 26
a112 19
				;Main.asm
	        XREF    GetNVInfo
		XREF	GetNVList
		XREF	SetNVProtection
		XREF	StoreNV
				;EndCode.asm
	        XREF    __EndCode

				;NVRAM/
		XREF	InitNVRAM
		XREF	ReleaseNVRAM

				;Disk/FindNVDevice.asm
		XREF	InitDisk
		XREF	ReleaseDisk

		XDEF	_LibExpunge
		XDEF	subsysName
		XDEF	ROMTagName
d115 4
a118 2

        moveq.l #-1,d0          ; Not Executable
d148 2
a149 2
        V_DEF	_LibClose
        V_DEF	_LibExpunge
d152 1
a152 1
        V_DEF	 _FreeNVData
d158 1
a158 1
        dc.w     -1
d205 1
a205 1
		move.l	#REVISION,LIB_REVISION(a5)	; init library revision
d244 1
a244 1
LibOpen
d246 8
a253 1
		move.l	a6,a5
a261 1
		move.l	nv_ExecBase(a5),a6		; a6 gets exec base
a267 6
		lea	UTILName(pc),a1			; open utility.library
		move.l	#37,d0				; version 37
		JSRLIB	OpenLibrary			;
		move.l	d0,nv_UTILBase(a5)		;
		beq.s	lo_Exit				; if error, j to exit

a272 1

d285 1
d290 3
a292 59
*****l* start.asm/LibExpunge *************************************************
*
*   NAME
*	LibExpunge - expunge routine for nonvolatile.device.
*
*   SYNOPSIS
*	SegList = LibExpunge (NVBase)
*	D0		      A6
*
*   FUNCTION
*	If there are no more openers for the library, return the resources
*	used by nonvolatile.library.
*
*   INPUTS
*	NVBase - Pointer to the base of nonvolatile.library.
*
*   RESULT
*	Either returns the library segment liste if sucessful, or NULL if
*	the library is not removed.
*
******************************************************************************
_LibExpunge
		OPT P=68020
		moveq.l	#0,d0			;Clear d0
		tst.w	LIB_OPENCNT(a6)		;Check if Zero opens.
		bne.s	expunge_done		;If non-zero, we don't go
		movem.l	a5-a6,-(sp)
		move.l	a6,a5
		bsr	ReleaseDisk
		bsr	ReleaseNVRAM

		move.l	nv_ExecBase(a5),a6	; close dos.library
		move.l	nv_DOSBase(a5),a1
		tst.l	a1
		beq.s	NoDOS
		JSRLIB	CloseLibrary
NoDOS:
		move.l	nv_UTILBase(a5),a1	; close utility.library
		tst.l	a1
		beq.s	NoUTIL
		JSRLIB	CloseLibrary
NoUTIL:
				;Free my own library (we have no openers)
		move.l	a5,a1
		move.w	LIB_NEGSIZE(a5),d0	;Get negative size
		sub.l	d0,a1			;Point at start of library
		add.w	LIB_POSSIZE(a5),d0	;Add in positive size
				;Now, set up for the exit...
		movem.l	d2,-(sp)		;Save
		move.l	nv_SegList(a5),d2	;Get seglist...
		movem.l	d0/a1,-(sp)		;Save these...
		move.l	a5,a1			;We need to remove ourselves from
		JSRLIB	Remove			;the library list...
		movem.l	(sp)+,d0/a1		;Restore these...
		JSRLIB	FreeMem			;Free the memory...
		move.l	d2,d0			;Get seglist into return...
		movem.l	(sp)+,d2		;Restore
		movem.l	(sp)+,a5-a6
expunge_done:	rts				;Return from expunge...
d295 70
d367 1
d371 4
@


40.10
log
@Change 1 long jump to short.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.9 93/03/08 18:03:05 brummer Exp Locker: brummer $
d8 3
d247 1
a247 1
		beq.s	lo_Exit				; if no, j to skip DOS open
@


40.9
log
@Add Martin's requested changes - short intvectors, DiskInit semaphore,
open of DOS failure left UTIL open...
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.8 93/03/05 12:51:23 brummer Exp Locker: brummer $
d8 4
d235 1
a235 1
		bne	lo_06				; if yes, j to bumpcount
@


40.8
log
@Move InitNVRAM call to init instead of open.
Remove origonal method of disabling requesters and use the parameterized method instead.
If the parameter is TRUE, a open of lowlevel.library will be done
and a call will be made to KillReq() and RestoreReq()
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.7 93/03/03 10:49:26 brummer Exp Locker: brummer $
d8 6
d116 1
a116 1
		dc.l	initStruct
d121 4
d126 13
a138 12
        dc.l    LibOpen
        dc.l    _LibClose
        dc.l    _LibExpunge
        dc.l    Reserved
        dc.l    _GetCopyNV
        dc.l    _FreeNVData
        dc.l    StoreNV
        dc.l    _DeleteNV
        dc.l    GetNVInfo
	dc.l	GetNVList
	dc.l	SetNVProtection
        dc.l    -1
d143 9
a151 9
initStruct:
	INITLONG        LIB_IDSTRING,VERSTR
        INITLONG        LN_NAME,subsysName
        INITWORD        LIB_VERSION,VERSION
        INITWORD        LIB_REVISION,REVISION
        INITBYTE        LN_TYPE,NT_LIBRARY
        INITBYTE        LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED

        DC.L            0
d178 18
a195 7
	        move.l	a5,-(sp)
		move.l	d0,a5
		move.l	a0,nv_SegList(a5)
		move.l	a6,nv_ExecBase(a5)

		lea	nv_Semaphore(a5),a0		; init NVRAM semaphore
		JSRLIB	InitSemaphore
d198 1
a198 1
		move.l	a5,d0
d227 14
a240 8
		move.l	nv_DOSBase(a5),d0
		bne.s	BumpCount
		move.l	nv_ExecBase(a5),a6
		lea	DOSName(pc),a1
		lea	LibList(a6),a0
		JSRLIB	FindName
		tst.l	d0
		beq.s	BumpCount
d243 4
a246 4
		move.l	#37,d0
		JSRLIB	OpenLibrary
		move.l	d0,nv_UTILBase(a5)
		beq.s	lo_Exit
d249 4
a252 18
		move.l	#37,d0
		JSRLIB	OpenLibrary
		move.l	d0,nv_DOSBase(a5)
		beq.s	lo_Exit

; ###		moveq.l	#0,d0
; ###		move.l	d0,a1
; ###		JSRLIB	FindTask
; ###		move.l	d0,a0
; ###		move.l	pr_WindowPtr(a0),-(sp)
; ###		move.l	#-1,pr_WindowPtr(a0)
; ###		move.l	a0,-(sp)
		moveq.l	#1,d1			; ###
		ChkKillRequesters		; ###
		bsr	InitDisk			; call for disk init
; ###		move.l	(sp)+,a0
; ###		move.l	(sp)+,pr_WindowPtr(a0)
		ChkRestoreRequesters		; ###
d254 14
a267 3
BumpCount:	addq.w	#1,LIB_OPENCNT(a5)
		move.l	a5,d0
lo_Exit:	movem.l	(sp)+,a5/a6
a341 1
LLName		dc.b	'lowlevel.library',0
@


40.7
log
@Move call to InitNVRAM to library open instead of library init.
(see associated fix in nvram/nvramtree.asm rev 40.7)
Add open failure test to open of utility.library.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.6 93/03/01 15:07:14 brummer Exp Locker: brummer $
d8 5
d61 1
d171 5
a175 1
;		bsr	InitNVRAM
d226 9
a234 11
		lea	nv_Semaphore(a5),a0		; init NVRAM semaphore
		JSRLIB	InitSemaphore

		moveq.l	#0,d0
		move.l	d0,a1
		JSRLIB	FindTask
		move.l	d0,a0
		move.l	pr_WindowPtr(a0),-(sp)
		move.l	#-1,pr_WindowPtr(a0)
		move.l	a0,-(sp)

d236 3
a238 4
		move.l	(sp)+,a0
		move.l	(sp)+,pr_WindowPtr(a0)

		bsr	InitNVRAM			; call for NVRAM init
d317 1
@


40.6
log
@utility.library is opened and added to nonvolatile library base
on opens.  A signal semiphore for NVRAM device access is 
initialized on opens as well.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.5 93/02/25 09:02:33 Jim2 Exp Locker: brummer $
d8 5
d165 1
a165 1
		bsr	InitNVRAM
d208 1
d216 3
d227 1
a227 1
		bsr	InitDisk
d231 1
a231 2
		lea	nv_Semaphore(a5),a0		; init NVRAM semaphore
		JSRLIB	InitSemaphore
@


40.5
log
@StoreNV nolonger requires the leading underscore.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.4 93/02/19 15:34:47 Jim2 Exp Locker: Jim2 $
d8 3
d198 7
a204 1
		lea	DOSName(pc),a1
d222 3
d260 2
a261 1
		move.l	nv_ExecBase(a5),a6
d265 5
a269 1

d271 1
d273 1
a273 1
NoDOS:		move.l	a5,a1
d301 1
@


40.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.3 93/02/19 15:21:13 Jim2 Exp Locker: Jim2 $
d8 2
a54 1
        XREF    _StoreNV
d60 1
d108 1
a108 1
        dc.l    _StoreNV
@


40.3
log
@DOSBase will be opened iff it has not yet been opened and it
exists on the libraries list.
DOSBase will only be closed in the expunge if it has been opened.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.2 93/02/18 11:07:55 Jim2 Exp Locker: Jim2 $
d8 5
d238 1
@


40.2
log
@Added SetNVProtection to the list of LVOs.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.1 93/02/16 13:48:54 Jim2 Exp Locker: Jim2 $
d8 3
d38 1
d66 2
d180 1
a180 1
		tst.w	LIB_OPENCNT(a5)
d184 5
d242 3
d247 1
a247 1
		move.l	a5,a1
d271 1
@


40.1
log
@Changed the interface to NVRAM subcode to be identical with
Disk subcode.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 40.0 93/02/10 17:25:00 Jim2 Exp Locker: Jim2 $
d8 4
d49 1
d99 1
@


40.0
log
@Kills requestors before calling InitDisk.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 39.1 93/02/03 13:48:49 Jim2 Exp Locker: Jim2 $
d8 3
a138 1
		move.l	d0,nv_NVRAMCopy(a5)
d219 2
a221 1
		move.l	nv_NVRAMCopy(a6),a1
d223 1
a223 3
		movem.l	a5-a6,-(sp)
		move.l	a6,a5
		move.l	4,a6
@


39.1
log
@Corrected field names for nonvolatilebase record.  Also
removed an line dealing with the deleted semaphore.
@
text
@d3 1
a3 1
*	$Id: start.asm,v 39.0 93/02/03 11:34:17 Jim2 Exp Locker: Jim2 $
d8 4
d21 1
d164 3
a166 1
		tst.w	LIB_OPENCNT(a6)
d168 1
a168 2
		move.l	a6,-(sp)
		move.l	nv_ExecBase(a6),a6
d172 1
a172 2
		move.l	(sp)+,a6
		move.l	d0,nv_DOSBase(a6)
d175 8
d184 7
a190 3
BumpCount:	addq.w	#1,LIB_OPENCNT(a6)
		move.l	a6,d0
lo_Exit:	rts
@


39.0
log
@Rewrote downcoding more of the standard functions into assembler.
@
text
@d3 1
a3 1
*	$Id: $
d7 3
a9 1
*	$Log: $
d11 1
d113 1
a113 2
*	If this is successful the library is added to the system.  Then the
*	semaphore is initialized.
a129 1
		lea	nv_Semaphore(a5),a0
d167 1
a167 1
		move.l	d0,DOSBase(a6)
d206 1
a206 1
		move.l	DOSBase(a5),a1
@


1.3
log
@Added GetTypeNV function.
@
text
@d1 12
a13 5
*************************************************************************
*                                                                       *
*       Copyright (C) 1992, Commodore Amiga Inc.  All rights reserved.  *
*                                                                       *
*************************************************************************
d15 1
a15 1

d20 1
d22 2
a23 1
        INCLUDE "version.i"
d25 1
a25 2
        XREF    _Main
        XREF    _LibOpen
a26 1
        XREF    _LibExpunge
d28 1
a28 1
        XREF    _FreeCopyNV
d31 13
a43 2
        XREF    _GetTypeNV
        XREF    __EndCode
d45 1
a45 2
        XDEF    _initFunc
        XDEF    _initStruct
a46 1

d53 16
a68 24
ROMTAG:                         ;STRUCTURE RT,0
        dc.w    RTC_MATCHWORD   ; UWORD RT_MATCHWORD
        dc.l    ROMTAG          ; APTR  RT_MATCHTAG
        dc.l    __EndCode       ; APTR  RT_ENDSKIP
        dc.b    RTF_COLDSTART   ; UBYTE RT_FLAGS
        dc.b    VERSION         ; UBYTE RT_VERSION
        dc.b    NT_LIBRARY      ; UBYTE RT_TYPE
        dc.b    0               ; BYTE  RT_PRI
        dc.l    NonVolatileName ; APTR  RT_NAME
        dc.l    VERSTRING       ; APTR  RT_IDSTRING
        dc.l    InitModule      ; APTR  RT_INIT
                                ; LABEL RT_SIZE

NonVolatileName:
                NONVOLATILELIBRARYNAME

VERSTRING:
                VSTRING
                VERSTAG

VERNUM: EQU     VERSION
REVNUM: EQU     REVISION

        ds.w    0
a69 2


d72 2
a73 2
_initFunc:
        dc.l    _LibOpen
d78 1
a78 1
        dc.l    _FreeCopyNV
d81 2
a82 1
        dc.l    _GetTypeNV
d88 5
a92 5
_initStruct:
        INITLONG        LIB_IDSTRING,VERSTRING
        INITLONG        LN_NAME,NonVolatileName
        INITWORD        LIB_VERSION,VERNUM
        INITWORD        LIB_REVISION,REVNUM
d100 23
d124 100
a223 3
        movem.l d2-d7/a2-a6,-(sp)

        jsr     _Main
a224 2
        movem.l (sp)+,d2-d7/a2-a6
        rts
d232 3
d240 1
a240 1
        
@


1.2
log
@no effective change.
@
text
@d24 1
d75 1
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
        INCLUDE "nonvolatile.i"
@
