******************************************************************************
*
*	$Id: diskinformation.asm,v 40.5 93/03/31 18:54:41 brummer Exp Locker: vertex $
*
******************************************************************************
*
*	$Log:	diskinformation.asm,v $
* Revision 40.5  93/03/31  18:54:41  brummer
* Fix missplaced push so that if ever expansion library is not
* available (which should never happen) the code will work
* 
* Revision 40.4  93/03/12  11:37:43  brummer
* Remove 68020 assembler option and instructions.  This required calling
* utility.library to do a 32 bit multiply previously done by mulu instruction.
*
* Revision 40.3  93/03/11  14:26:42  brummer
* Remove LLName definition.  This is fix related to nonvolatilebase.i
* 40.5
*
* Revision 40.2  93/03/08  18:02:09  brummer
* Add DiskInit semaphore per Martin's request.
* Always call KillReq for DiskInit.
*
* Revision 40.1  93/02/19  14:54:38  Jim2
* If DOS hasn't been opened don't try to use it.
*
* Revision 40.0  93/02/18  10:41:58  Jim2
* Initial release - tested.
*
*
*
*	(C) Copyright 1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

		INCLUDE	'exec/macros.i'

		INCLUDE	'dos/dos.i'
		INCLUDE	'dos/filehandler.i'

		INCLUDE	'libraries/expansionbase.i'

		INCLUDE	'/nonvolatilebase.i'
		INCLUDE	'/nonvolatile.i'

		XDEF	InitDisk
		XDEF	ReleaseDisk
		XDEF	GetDiskInfo

OFFSET_TO_NAME	EQU	0
SPARE_BLOCKS	EQU	3

*****i* nonvolatile.library/GetDiskInfo **************************************
*
*   NAME
*	GetDiskInfo - Reports information on the disk
*
*   SYNOPSIS
*	GetDiskInfo (MemBlock)
*		    d0
*
*	VOID GetDiskInfo(APTR)
*
*   FUNCTION
*	Returns information about the current users nonvolatile disk device.
*
*	Currently this information consists of the size of the disk and the
*	number of bytes free on the disk.  These values are stored
*	consecutively, in the first two long words in MemBlock.
*
*   INPUTS
*	MemBlock - Pointer to memory block used for storing information on
*		   the disk.
*
*   RESULT
*	NONE.
*
******************************************************************************
GetDiskInfo
		movem.l	d0/d2-d4/a5-a6,-(sp)	;Save the address for copying and d2 is needed for Info call.
		move.l	a6,a5
		bsr	ReleaseDisk
		bsr.s	InitDisk
		move.l	nv_DOSBase(a5),a6
		move.l	nv_DiskLock(a5),d1
		beq.s	Error			;If we don't have a lock on it we can't get info on it.
				;Have a lock on the user's prefered nonvolatile device.
		sub.l	#id_SIZEOF+4,sp
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Need a long word aligned struct InfoData.
		JSRLIB	Info
		move.l	d2,a0			; a0 gets data pointer
		move.l	id_BytesPerBlock(a0),d2	; d2 gets # of bytes/block
		move.l	id_NumBlocks(a0),d3	; d3 gets # of blocks
		move.l	d3,d4			; d4 gets # of free blocks
		sub.l	id_NumBlocksUsed(a0),d4	;
		add.l	#id_SIZEOF+4,sp		; Reset the stack pointer.
		tst.w	d0			; error on info call ?
		beq.s	Error			; if yes, j to return zeros

;		mulu.l	d3,d1
;		bvc.s	No_d1_Overflow
;		moveq.l	#-1,d1
; No_d1_Overflow:
;		sub.l	#SPARE_BLOCKS,d2
;		bcs.s	NoSpace
;		mulu.l	d3,d2
;		bvc.s	Exit
;		moveq.l	#-1,d2
;		bra.s	Exit

;
; Calculate total bytes on disk :
;
		move.l	nv_UTILBase(a5),a6	; a6 gets utility.library base
		move.l	d2,d0			; d0 gets # of bytes per block
		move.l	d3,d1			; d1 gets # of blocks
		JSRLIB	UMult32			; d0 gets total bytes on disk
		move.l	d0,d3			; save this in d3
;
; Calculate total free bytes on disk :
;
		sub.l	#SPARE_BLOCKS,d4
		bcs.s	NoSpace
		move.l	d2,d0			; d0 gets # of bytes per block
		move.l	d4,d1			; d1 gets # of free blocks
		JSRLIB	UMult32			; d0 gets total free bytes on disk
		bra.s	Exit			; j to return calculated values

NoSpace:	CLEAR	d0			; zero amount of free space
		bra.s	Exit			; j to return calculated values
;
; Could not get information on the nonvolatile device.
; It is safest to report no space available.
;
Error:		moveq.l	#0,d0
		move.l	d0,d3

Exit:		move.l	(sp)+,a0		;Get pointer to where the data is to be written.
		move.l	d3,(a0)+		;Save the maximum storage.
		move.l	d0,(a0)+		;Save the free storage
		movem.l	(sp)+,d2-d4/a5-a6	;Restore the registers.
		rts


*****i* nonvolatile.library/InitDisk *****************************************
*
*   NAME
*	InitDisk - Finds the user's specified nonvolatile device.
*
*   SYNOPSIS
*	InitDisk (NVBase)
*		  a5
*
*	VOID InitDisk (struct NVBase *)
*
*   FUNCTION
*	Finds the user's preferred nonvolatile device and gets a shared lock
*	on it.
*
*	The user's preferred nonvolatile device is indicated by the contents
*	of the file sys:prefs/env-archive/sys/nv_location.  This file is read
*	and a read lock is attempted using the string contained in this file.
*
*   INPUTS
*	NONE
*
*   RESULT
*	Sets the nv_DiskLock field in the base of nonvolatile.library.
*
******************************************************************************
InitDisk
		movem.l	d2-d4/a4-a6,-(sp)	;Need some scratch registers.

		move.l	nv_ExecBase(a5),a6	; a6 gets exec base
		lea	nv_DiskInitSema(a5),a0	; a0 gets ptr to semaphore
		JSRLIB	ObtainSemaphore		; obtain semaphore

		move.l	#1,d1			; force requesters off
		ChkKillRequesters		;

		move.l	#256,d3			;Maximum path length for a string+1.  Also gives a NULL byte.
		lea	EXPANSION_NAME(pc),a1
		moveq.l	#0,d0
		JSRLIB	OpenLibrary		;Open the Expansion library.
		move.l	d0,d4
		beq	id_Exit
		move.l	d4,-(sp)		; save ExpanLib base
;
; Successful open of expansion library, check if DOS is available :
;
		tst.l	nv_DOSBase(a5)
;		tst.l	a6
		beq	CloseAndExit
		move.l	nv_DOSBase(a5),a6
;		move.l	d4,-(sp)		;Remember the library base for a later close.
		add.l	#eb_MountList,d4	;Get a pointer to the start of the mount list.
		move.l	d4,a0
		move.l	(a0),d4
		lea	SYS_BSTR(pc),a0
NextDevice
				;Got the next node to look at.
		move.l	sp,a4			;Remember the current stack pointer since we don't know how much we are going to add.
		sub.l	d3,sp
		move.w	#SIZE_NVLOC,d0
		lea	NVDiskStorage(pc),a1
CopyFileName:	move.b	0(a1,d0.w),-(a4)
		dbf	d0,CopyFileName		;Copy the nv_location file name on the stack, backwards.
		move.b	(a0)+,d0		;Get size of string and move to the first real character.
		ext.w	d0
		bra.s	EndCopyDevice		;Using the dbf, it's best just to skip to the test.

CopyDevice:	move.b	0(a0,d0.w),-(a4)
EndCopyDevice:	dbf	d0,CopyDevice		;Copy the device name.

		move.l	a4,d1			;Place the pointer to the filename into d1.
		move.l	#MODE_OLDFILE,d2
		JSRLIB	Open
		add.l	d3,sp			;Clear the filename off the stack.
		move.l	d0,d1			;File pointer in d1.  This sets up the Read.
		beq.s	NoFile			;The file does not exist.
				;Opened the file.
		sub.l	d3,sp			;Allocate space for the read.
		move.l	sp,d2
		move.l	d1,-(sp)
		JSRLIB	Read			;Read from d1 into d2, size d3.  Didn't check failure.
		move.l	(sp)+,d1
		JSRLIB	Close			;We are in big trouble if this fails.
		add.l	#OFFSET_TO_NAME,d2	;Skip any frou-frou in the file.
		move.l	d2,d1
		move.l	d2,a1
PlaceNull:	cmp.b	#$20,(a1)+
		bge.s	PlaceNull		;Skip to the first control character.
				;Got a control character.
		move.b	d3,-(a1)
		move.l	#ACCESS_READ,d2
		JSRLIB	Lock			;Get a lock on the users preferred device.
		add.l	d3,sp			;Clear the data read from the stack.
		move.l	d0,nv_DiskLock(a5)	;Don't error check, just save.
		bne.s	CloseAndExit		;Now error check.
NoFile
		NEXTNODE.s	d4,a0,CloseAndExit
		move.l	bn_DeviceNode(a0),a0
		move.l	dn_Name(a0),d0		;BString.
		lsl.l	#2,d0
		move.l	d0,a0
		bra.s	NextDevice

CloseAndExit:	move.l	(sp)+,a1		;Retrieve the pointer to the expansion library.
		move.l	nv_ExecBase(a5),a6
		JSRLIB	CloseLibrary		;And close it.

id_Exit:	ChkRestoreRequesters		;
		lea	nv_DiskInitSema(a5),a0	; a0 gets ptr to semaphore
		JSRLIB	ReleaseSemaphore	; release semaphore

		movem.l	(sp)+,d2-d4/a4-a6	;Restore all scratch registers.
		rts

*****i* nonvolatile.library/ReleaseDisk **************************************
*
*   NAME
*	ReleaseDisk - Releases the lock from the users nonvolatile device.
*
*   SYNOPSIS
*	ReleaseDisk (NVBase)
*		     a5
*
*	VOID ReleaseDisk (struct NVBase *)
*
*   FUNCTION
*	Unlocks the users prefered nonvolatile device.
*
*   INPUTS
*	NONE
*
*   RESULT
*	Unlocks and clears nv_DiskLock
*
******************************************************************************
ReleaseDisk
		move.l	nv_DiskLock(a5),d1
		beq.s	rd_Exit
		move.l	a6,-(sp)
		moveq.l	#0,d0
		move.l	d0,nv_DiskLock(a5)
		move.l	nv_DOSBase(a5),a6
		JSRLIB	UnLock
		move.l	(sp)+,a6
rd_Exit:	rts

SYS_BSTR	dc.b	3,'SYS'
NVDiskStorage	dc.b	':prefs/env-archive/sys/nv_location',0
EXPANSION_NAME	dc.b	'expansion.library',0


SIZE_NVLOC	equ	EXPANSION_NAME-NVDiskStorage-1

		end
******************************************************************************
*
*	$Id: sizedisklist.asm,v 40.4 93/03/18 11:12:47 brummer Exp Locker: vertex $
*
******************************************************************************
*
*	$Log:	sizedisklist.asm,v $
* Revision 40.4  93/03/18  11:12:47  brummer
* Fix SizeDiskList to return zero when disk is not found.
* 
* Revision 40.3  93/02/25  08:53:30  Jim2
* Documentation.
*
* Revision 40.2  93/02/23  13:23:43  Jim2
* Changed the name of the data type from NVItem to NVEntry.
*
* Revision 40.1  93/02/18  10:59:29  Jim2
* Changed sizing routines to use the label for allowing for the
* size of the array elements.  Thus the next time the size
* changes I won't have to change this file.
*
* Revision 40.0  93/02/16  13:22:39  Jim2
* Included the bytes requried for the new sturctures.
*
* Revision 39.0  93/02/03  11:30:52  Jim2
* Initial Release - Tested.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

		INCLUDE	'exec/macros.i'

		INCLUDE	'dos/dos.i'


		INCLUDE	'/nonvolatilebase.i'
		INCLUDE	'/nonvolatile.i'

		XDEF	SizeDiskList

*****i* nonvolatile.library/SizeDiskList *************************************
*
*   NAME
*	SizeDiskList - Byte required for a list of Disk items/applications.
*
*   SYNOPSIS
*	Size = SizeDiskList (AppName, NVBase)
*	d0		     a0	      a5
*
*	LONG SizeDiskList (STRPTR, struct NVBase *)
*
*   FUNCTION
*	Determines how large a block of memory is requried to store the
*	List of NVEntry structures and the name strings pointed to by the
*	structures.  The size is the size for the string plus the size for
*	an NVEntry structure.
*
*	If AppName is non NULL only report the size needed to create a
*	list of strings for the Items found for that AppName.
*
*	If AppName is NULL report the size needed for a list of all
*	AppNames and all ItemNames.
*
*
*   INPUTS
*	AppName - Pointer to the application name.  Or NULL if the entire
*		  contents is to be requested.
*
*   RESULT
*	Size - Number of bytes required to create a list.
*
*   SEE ALSO
*	SizeNVRAMList()
*
******************************************************************************
SizeDiskList
		moveq.l	#0,d0			; setup return value if lock fails
		move.l	nv_DiskLock(a5),d1	;Check to see if there is a nonvolatile disk out there.
		beq.s	NoDisk
				;Yes, there is a disk.
		movem.l	d2/d7/a2/a6,-(sp)
		move.l	nv_DOSBase(a5),a6
		moveq.l	#0,d7			;d7 will be used to accumulate the lengths.
		move.l	a0,-(sp)		;Temporarily save the AppName Pointer.
		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,-(sp)		;Remember the orginal directory.
		move.l	4(sp),d1
		beq.s	EveryApp		;Is this for a single AppName, or all AppNames?
				;The pointer to the single AppName has been loaded into d1.
		bsr.s	SizeApp			;Determine the size needed for this AppName.
		bra.s	Cleanup			;And we are done.
				;Scan the nonvolatile directory for every AppName, size each of them.
EveryApp:	move.l	nv_DiskLock(a5),d1
		sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a2
		JSRLIB	Examine
Skip:		move.l	nv_DiskLock(a5),d1
		JSRLIB	ExNext			;Move to the next directory entry.
		tst.w	d0			;Is there another entry in this directory?
		beq.s	DoneDirs
				;Yep, have a new entry to check.
		tst.b	fib_DirEntryType(a2)
		bmi.s	Skip			;Is this another directory?
				;Yep, so we need to add the string length.
LoopingDir:	addq.w	#1,d0
		tst.b	fib_FileName(a2,d0.w)
		bne.s	LoopingDir		;Increment d0 until the NULL is found.

		add.w	#1+NVENTRY_SIZE,d0	;Size is one more than index of the NULL, plus one element to store the AppName.
		ext.l	d0
		add.l	d0,d7			;Add this to any previous value.
		movem.l	d2/a2,-(sp)		;Don't lose the pointers (SizeApp is non standard in register usage.)
		lea	fib_FileName(a2),a0
		move.l	a0,d1			;Place the AppName pointer in d1.
		bsr.s	SizeApp			;Size the AppName directory.
		movem.l	(sp)+,d2/a2		;Restore the pointers.

		bra.s	Skip			;This is a top testing loop.
				;All entries have been processed.
DoneDirs:	add.l	#fib_SIZEOF+4,sp	;Don't need the FIB anymore.
				;The sizing is complete.  Let's clean up and go home.
Cleanup:	move.l	(sp)+,d1
		JSRLIB	CurrentDir		;Restore the orginal directory.
		move.l	d7,d0			;Set up the return value.
		movem.l	(sp)+,d1/d2/d7/a2/a6	;Don't forget we pushed on one additional register.
NoDisk:		rts

*****l* a/SizeDiskList.asm/SizeApp *******************************************
*
*   NAME
*	SizeApp - Bytes required for a list of Disk items.
*
*   SYNOPSIS
*	Size = SizeApp (AppName, PreviousSize)
*	d7		d1	 d7
*
*	LONG SizeApp (STRPTR, ULONG)
*
*   FUNCTION
*	Determines how large a block of memory is requried to store the NULL
*	terminated list of NULL terminated string identifing the items
*	stored for the given AppName.
*
*
*   INPUTS
*	AppName - Pointer to the application name.
*	PrevousSize - Size required for any other AppNames.
*
*   RESULT
*	Size - Number of bytes required to save the list.
*
*   WARNING
*	Trashes a2,d2.
*
******************************************************************************
SizeApp
		move.l	#ACCESS_READ,d2
		JSRLIB	Lock			;Get a lock on the directory for the AppName.
		move.l	d0,d1
		beq.s	NotExist		;Were we sucessful?
				;Got lock now we can scan the directory.
		sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a2
		move.l	d1,-(sp)		;Don't want to lose the lock.
		JSRLIB	Examine			;Get the first entry.
ProcessFile:	move.l	(sp),d1			;Restore the lock.
		JSRLIB	ExNext			;Get next entry.
		tst.w	d0
		beq.s	Done			;Did we get a new entry?
				;Yep, so how long is the name?
Looping:	addq.w	#1,d0
		tst.b	fib_FileName(a2,d0.w)
		bne.s	Looping			;Wait for the NULL.

		add.w	#1+NVENTRY_SIZE,d0	;Add one to get the size, not the index number.  And the size of an element
		ext.l	d0
		add.l	d0,d7			;Sum.
		bra.s	ProcessFile		;This is a top testing loop.
				;All done.
Done:		move.l	(sp)+,d1		;Get the lock off the stack.
		JSRLIB	UnLock
		add.l	#fib_SIZEOF+4,sp	;Clear the FIB off the stack.
NotExist:	rts

		end
******************************************************************************
*
*	$Id: makelist.asm,v 40.2 93/02/18 10:57:58 Jim2 Exp Locker: vertex $
*
******************************************************************************
*
*	$Log:	makelist.asm,v $
* Revision 40.2  93/02/18  10:57:58  Jim2
* Added comments.  SizeItem now returns the protection state
* in the longword after the size.
* 
* Revision 40.1  93/02/16  13:51:15  Jim2
* Replaced the two different routines for getting AppNames and
* ItemNames with a single function.  Added call to get the
* size required for an ItemName.
*
* Revision 40.0  93/02/09  10:24:58  Jim2
* Changed the direction for writing the lists (starting at end
* or beginning).
*
* Revision 39.0  93/02/03  11:30:04  Jim2
* Initial Release - Tested.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

		INCLUDE	'exec/macros.i'

		INCLUDE	'dos/dos.i'


		INCLUDE	'/nonvolatilebase.i'

		XDEF	GetNamesFromDisk
		XDEF	SizeItemDisk

*****i* nonvolatile.library/GetNamesFromDisk *********************************
*
*   NAME
*	GetNamesFromDisk - Creates a list of Names from disk.
*
*   SYNOPSIS
*	FreeByte = GetNamesFromDisk (MemBlock, NVBase, AppName)
*	a2			     a2	       a5      a4
*
*	char * GetNamesFromDisk (char *, struct NVBase *, char *)
*
*   FUNCTION
*	Reads the users nonvolatile device and creates a list of either
*	AppNames, if AppName is a NULL pointer, or ItemNames.  a2 points to
*	the first byte to be used in the list.
*
*   INPUTS
*	MemBlock - Pointer to memory block used for storing Names
*	NVBase - Pointer the base of nonvolatile.library.
*	AppName - Pointer identifying the AppName to be searched, or NULL
*		  if the list of AppNames is to be generated.
*
*   RESULT
*	FreeByte - Pointer to beyond the terminating NULL of AppNames.
*
*   SEE ALSO
*	GetNamesFromNVRAM()
*
******************************************************************************
GetNamesFromDisk
		movem.l	d2-d4/a3/a6,-(sp)
		move.l	nv_DiskLock(a5),d4
		beq.s	Cleanup
				;There is a user specified nonvolatile disk.
		move.l	nv_DOSBase(a5),a6
		moveq.l	#0,d3
		cmp.l	a4,d3
		beq.s	ReadyExamine
				;We are searching for Items within an App.
		move.l	d4,d1
		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,-(sp)		;Remember the orginal directory.
		move.l	#ACCESS_READ,d2
		move.l	a4,d1
		JSRLIB	Lock
		move.l	d0,d4			;Ok we have the needed lock for the examine.
		move.l	(sp)+,d1
		JSRLIB	CurrentDir		;Return to the orginal directory.
		tst.l	d4
		beq.s	Cleanup
				;Have a lock on an application directory.
		move.l	#$7FFFFFFF,d3		;Change the sorting criteria from find dirs to find files.
ReadyExamine:	sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a3
		move.l	d4,d1
		JSRLIB	Examine
Skip:		move.l	d4,d1
		JSRLIB	ExNext			;Move to the next directory entry.
		tst.w	d0			;Is there another entry in this directory?
		beq.s	Done
				;Yep, have a new entry to check.
		cmp.l	fib_DirEntryType(a3),d3
		bpl.s	Skip			;Is the type what we want?
				;Yep, so we need to add the string length.
ScanLength:	addq.w	#1,d0
		move.b	fib_FileName(a3,d0.w),(a2)+
		bne.s	ScanLength		;Increment d0 until the NULL is found.

		bra.s	Skip			;This is a top testing loop.
				;All entries have been processed.
Done:		add.l	#fib_SIZEOF+4,sp	;Don't need the FIB anymore.
		tst.l	d3
		beq.s	Cleanup
				;We have a lock on the App directory that we need to release.
		move.l	d4,d1
		JSRLIB	UnLock
				;The transfer is complete.  Let's clean up and go home.
Cleanup:	movem.l	(sp)+,d2-d4/a3/a6
		rts

*****i* nonvolatile.library/SizeItemDisk *************************************
*
*   NAME
*	SizeItemDisk - Determines the size of an item.
*
*   SYNOPSIS
*	SizeItemDisk (SizePtr, NVBase, AppName, ItemName)
*		      a2       a5      a4	a3
*
*	SizeItemDisk (ULONG *, struct NVBase *, char *, char *)
*
*   FUNCTION
*	Reads the users nonvolatile device changes the reported size of the
*	item if the device reports a larger size.  Also ORs in the protection
*	bits for the file.
*
*   INPUTS
*	SizePtr - Pointer to the current size of the Item.
*	NVBase - Pointer the base of nonvolatile.library.
*	AppName - Pointer identifying the AppName.
*	ItemName - Pointer identifying the ItemName to be sized.
*
*   RESULT
*	SizePtr - The value pointed to is changed if the size on the disk is
*		  larger.
*
*   SEE ALSO
*	SizeItemNVRAM()
*
******************************************************************************
SizeItemDisk
		movem.l	d2-d4/a3/a6,-(sp)
		move.l	nv_DOSBase(a5),a6
		move.l	nv_DiskLock(a5),d1
		beq.s	sid_Cleanup

		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,-(sp)		;Remember the orginal directory.
		move.l	#ACCESS_READ,d2
		move.l	a4,d1
		JSRLIB	Lock			;Lock the App directory.
		move.l	d0,d4
		JSRLIB	CurrentDir		;Change to the App directory.
		move.l	a3,d1
		JSRLIB	Lock			;Lock the Item file.
		move.l	d0,d3
		move.l	(sp)+,d1
		JSRLIB	CurrentDir		;Have the lock so the directory can be returned to the original.
		move.l	d3,d1
		beq.s	sid_Unlock		;Is the Item lock valid?
				;Have a good lock on the Item file.
		sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a3
		JSRLIB	Examine
		move.l	fib_Protection(a3),d0
		or.l	d0,4(a2)		;The protection is stored the long word after size.
		move.l	(a2),d0
		cmp.l	fib_Size(a3),d0
		bgt.s	sid_Done		;Only change this size if this size is larger.
				;It is larger so store it.
		move.l	fib_Size(a3),(a2)
sid_Done:	add.l	#fib_SIZEOF+4,sp	;Don't need the FIB anymore.
		move.l	d3,d1
		JSRLIB	UnLock			;Unlock the Item file.

sid_Unlock	move.l	d4,d1
		beq.s	sid_Cleanup		;Did we lock the App directory.
				;Yep, unlock it too.
		JSRLIB	UnLock
sid_Cleanup:	movem.l	(sp)+,d2-d4/a3/a6
		rts

		end
******************************************************************************
*
*	$Id: fileio.asm,v 40.10 93/04/16 12:11:54 brummer Exp Locker: vertex $
*
******************************************************************************
*
*	$Log:	fileio.asm,v $
* Revision 40.10  93/04/16  12:11:54  brummer
* Fix Lockhart's mungwall/enforcer hits on storenv
* 
* Revision 40.9  93/04/13  16:43:53  brummer
* Fix CI170, if file exists on NVRAM but not on NVDISK oand user updates
* it, a subdirectory will be created and not removed because the lock is
* not removed before calling DeleteNV() function.
*
* Revision 40.8  93/03/31  15:58:08  brummer
* Fix multiple requesters when App name exists and Item name does
* not and your using a write protected disk.
*
* Revision 40.7  93/03/31  11:50:41  brummer
* Fix to remove 6x requesters on storeNV to write protected disk.
*
* Revision 40.6  93/03/26  15:03:08  brummer
* Make branch short when checking for access to sys rsvd data
* area in DeleteDisk() function.
*
* Revision 40.5  93/03/26  11:24:29  brummer
* Fix to check for attempted access to the system reserved
* area in read, write, and delete NVRAM disk.
*
* Revision 40.4  93/03/18  11:11:12  brummer
* Fix code in DeleteDisk function that was accessing parameters incorrectly
* off the stack.  Code now uses free registers instead of offset from
* top of stack.
*
* Revision 40.3  93/03/09  14:40:25  brummer
* Fix save/restore of d7 in DeleteDisk per Martin's request.
*
* Revision 40.2  93/02/26  17:30:15  Jim2
* If there is a write failure will remove any empty files/directories.
*
* Revision 40.1  93/02/25  08:49:06  Jim2
* WriteDisk now will recognise bad file name errors and return
* an appropriate error.
*
* Revision 40.0  93/02/10  17:30:16  Jim2
* Added new parameter to WriteDisk to differeniate between
* updating a file and creating a new file.  Detect a write
* protect failure ane return wether it was the final file,
* or further up (AppName/disk).
*
* Revision 39.0  93/02/03  11:21:52  Jim2
* Initial Release - Tested.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

		INCLUDE	'exec/macros.i'
		INCLUDE	'exec/memory.i'

		INCLUDE	'dos/dos.i'


		INCLUDE '/nonvolatile.i'
		INCLUDE	'/nonvolatilebase.i'




		XDEF	ReadDisk
		XDEF	_ReadDisk
		XDEF	WriteDisk
		XDEF	_WriteDisk
		XDEF	DeleteDisk
		XDEF	_DeleteDisk

_ReadDisk	EQU	ReadDisk
_WriteDisk	EQU	WriteDisk
_DeleteDisk	EQU	DeleteDisk


*****i* nonvolatile.library/ReadDisk *****************************************
*
*   NAME
*	ReadDisk - Reads an Item from the Disk.
*
*   SYNOPSIS
*	Data = ReadDisk(AppName, ItemName, NVBase)
*	d0		a0	 a1	   a6
*
*	APTR = ReadDisk(char *, char *, struct NVBase *)
*
*   FUNCTION
*	Searches the Disk for the AppName and ItemName.  If they exist, it
*	allocates storage for the item plus one additional long word for the
*	size of memory allocated.  The size of the allocation is stored in
*	the first long word, and the data (for the AppName and ItemName) is
*	stored beginning at the second long word.
*
*	If either the AppName and ItemName cannot be found, or the memory
*	cannot be allocated a NULL will be returned.
*
*
*   INPUTS
*	AppName,ItemName - Two string used to identify the data stored.
*	NVBase - Pointer to the base of nonvolatile.library.
*
*   RESULT
*	Data - Pointer to a copy of the data if found and memory allows it
*	       to be copied.  NULL, if this is not true.
*
*   SEE ALSO
*	ReadNVRAM()
*
******************************************************************************
*
*   REGISTERS
*	d4  Lock on Item file/file handle for Item File.
*	d5  Size of Item file
*	d6  Lock on App directory.
*	d7  Return parameter - points to any memory allocated.
*	a2  Pointer to FIB used in examine
*	a3  Original directory lock.
*	a5  NVBase
*	a6  DOSBase
*
*	a4  Untouched.
*
*	d0,d1,d2,d3,a0,a1 - used in subroutine calls, or scratch.
ReadDisk
		move.l	d7,-(sp)
		moveq.l	#0,d7			;Set up the return parameter.
		move.l	nv_DiskLock(a6),d1	;Check to see if there is a nonvolatile disk out there.
		beq	rd_NoDisk
;
; Yes, there is a disk, check for access to system reserved area :
;
		tst.b	(a0)			; is App string NULL ?
		bne.s	6$			; if no, j to continue
		tst.b	(a1)			; is Item string also NULL ?
		bne.s	6$			; if no, j to continue
		bra	rd_NoDisk		; j to error return
6$:
		movem.l	d2-d6/a0-a6,-(sp)
		move.l	a6,a5
		move.l	nv_DOSBase(a5),a6
		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,a3			;Remember the orginal directory.
				;Lock the AppName.
		move.l	4*5(sp),d1
		move.l	#ACCESS_READ,d2
		JSRLIB	Lock			;Get a lock on the directory for the AppName.
		move.l	d0,d6
		beq	NoApp
				;Change to the AppName directory.
		move.l	d0,d1
		JSRLIB	CurrentDir
				;Lock the ItemName.
		move.l	4*6(sp),d1
		move.l	#ACCESS_READ,d2
		JSRLIB	Lock
		move.l	d0,d5
		beq	FinishedApp
				;Find the size of the ItemName file.
		sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a2
		move.l	d5,d1
		JSRLIB	Examine			;Get the first entry.
		move.l	fib_Size(a2),d4
		add.l	#fib_SIZEOF+4,sp
		tst.w	d0
		beq.s	NoMemory
				;Got the information
		addq.l	#4,d4			;Extra long word to remember the size.
		move.l	d4,d0
		move.l	#MEMF_PUBLIC,d1
		move.l	nv_ExecBase(a5),a6
		JSRLIB	AllocMem
		move.l	nv_DOSBase(a5),a6
		tst.l	d0
		beq.s	NoMemory
				;Have a memory block for copying.
		move.l	d0,a0
		move.l	d4,(a0)+		;Store the memory block size.
		subq.l	#4,d4			;Restore the size of the read.
		move.l	a0,d7
		move.l	d5,d1
		JSRLIB	OpenFromLock		;Before reading we must open the file.
		move.l	d0,d1
		beq.s	NotOpened
				;Opened the ItemName file.
		move.l	d1,d5
		move.l	d7,d2
		move.l	d4,d3
		JSRLIB	Read			;Read the block.
		sub.l	d0,d4			;If the memory block wasn't filled there was a failure.
		move.l	d5,d1
		JSRLIB	Close
		tst.l	d4
		bne.s	FailedRead
				;Read successfully.
		bra.s	FinishedApp
				;Couldn't open the file.
NotOpened:	move.l	d5,d1
		JSRLIB	UnLock			;Still have a pesky lock.
FailedRead:	move.l	d7,a1			;Couldn't read, so free the memory block.
		move.l	-(a1),d0
		move.l	nv_ExecBase(a5),a6
		JSRLIB	FreeMem
		move.l	nv_DOSBase(a5),a6
		moveq.l	#0,d7
		bra.s	FinishedApp
				;Couldn't get the memory, but still have a pesky lock on ItemName.
NoMemory:	move.l	d5,d1
		JSRLIB	UnLock
FinishedApp:	move.l	d6,d1			;All done with the AppName directory.
		JSRLIB	UnLock
NoApp:		move.l	a3,d1			;All done with the users nonvolatile device.
		JSRLIB	CurrentDir
		movem.l	(sp)+,d2-d6/a0-a6	;Restore the registers.
rd_NoDisk:	move.l	d7,d0			;Set up return value.
		move.l	(sp)+,d7
		rts

*****i* nonvolatile.library/WriteDisk ****************************************
*
*   NAME
*	WriteDisk - Writes an Item to the Disk.
*
*   SYNOPSIS
*	Error = WriteDisk(AppName, ItemName, Data, Length, Mode, NVBase)
*	d0		  a0	   a1	     a2    d0	   d1	 a6
*
*	UWORD = WriteDisk(char *, char *, APTR, ULONG, LONG, struct NVBase *)
*
*   FUNCTION
*	Attempts to store the information pointed to by Data to the Disk.
*	The data will be associated with AppName and ItemName.
*
*   INPUTS
*	AppName,ItemName - Two string used to identify the data stored.
*	Data - Pointer to data to be stored.
*	Length - Size of data in bytes.
*	NVBase - Pointer to the base of nonvolatile.library.
*
*   RESULT
*	Error:
*	0 - Data stored no error.
*	NVERR_BADNAME - DOS reports either ERROR_BAD_STREAM_NAME, or
*		ERROR_INVAID_COMPONENT_NAME.
*	NVERR_WRITEPROT - Disk/directory write protected.
*	NVERR_FATAL - Failure writing the file.
*	NVERR_FAIL - Other failure in the process of getting to the write.
*	$80000000|NVERR_WRITEPROT - File write protected.
*
*   SEE ALSO
*	WriteNVRAM()
*
******************************************************************************
*
*   REGISTERS
*	d3  Number of bytes to write/Number of bytes not written
*	d4  file handle for Item File.
*	d5  Lock on App directory.
*	d6  Original directory lock.
*	d7  Return parameter.
*	a5  NVBase
*	a6  DOSBase
*
*	a2,a3,a4  Untouched.
*
*	d0,d1,d2,d3,a0,a1 - used in subroutine calls, or scratch.
WriteDisk
		move.l	d7,-(sp)
		move.l	#NVERR_FAIL,d7		;Set up the return parameter.
		movem.l	d1-d6/a0-a1/a4-a6,-(sp)
		move.l	a6,a5
		move.l	d0,d3
		move.l	#31,d4	;Needed to indicated the file write protected.
		move.l	nv_DOSBase(a5),a6
		move.l	nv_DiskLock(a5),d1	;Check to see if there is a nonvolatile disk out there.
		beq	wd_NoDisk
;
; Yes, there is a disk, check for access to system reserved area :
;
		tst.b	(a0)			; is App string NULL ?
		bne.s	6$			; if no, j to continue
		tst.b	(a1)			; is Item string also NULL ?
		bne.s	6$			; if no, j to continue
		bra	wd_NoDisk		; j to error return
;
; Change to user specified nonvolatile storage directory :
;
6$:		CLEARA	a4			; clear disk update flag
		JSRLIB	CurrentDir		;Change to directory
		move.l	d0,d6			;Remember the orginal directory.
;
; Lock the AppName directory :
;
LockApp:	move.l	4*6(sp),d1		; d1 gets pointer to App name string
		move.l	#ACCESS_READ,d2		; read access for
		JSRLIB	Lock			; Get a lock on the directory for the AppName.
		move.l	d0,d5			; d5 gets status from lock of App
		bne.s	App			; j if lock is successful
;
; Lock on App unsuccessful, attempt to create the subdirectory :
;
		move.l	4*6(sp),d1		; d1 gets pointer to App name string
		JSRLIB	CreateDir		;
		move.l	d0,d1			; was creation successful ?
		beq.s	wd_NoAccess		; if no, j to return
		move.l	#1,a4			; set disk update flag
		JSRLIB	UnLock			;
		bra.s	LockApp			; j to reacquire lock on subdirectory
;
; Change to the AppName directory and attempt to open the file :
;
App:		move.l	d0,d1
		JSRLIB	CurrentDir
		move.l	4*7(sp),d1		; d1 gets ptr to item name string
		move.l	4*0(sp),d2		; d2 gets mode for open
		JSRLIB	Open			; open the file
		move.l	d0,d4			; d4 gets open status
		beq.s	wd_NoAccess		; if error, j to check
;
; Open file successful, attempt to write the file :
;
		cmpi.l	#MODE_NEWFILE,d2	; was mode newfile ?
		bne.s	8$			; if no, j to continue
		move.l	#1,a4			; set disk update flag

8$:		move.l	d4,d1
		move.l	a2,d2
		JSRLIB	Write			; Write the block.
		sub.l	d0,d3
		move.l	d4,d1
		JSRLIB	Close			; close even if error
		move.l	#NVERR_FATAL,d7
		tst.l	d3			; was write sucessful ?
;		bne.s	wd_FailedWrite
		bne.s	wd_NoAccess		; if no, j to determine error
		move.l	d3,d7			; d7 gets return parameter
		bra.s	wd_FinishedApp		; j to remove locks and return
;
; Write failed, determine the error :
;
wd_NoAccess:	JSRLIB	IoErr
		cmp.l	#ERROR_BAD_STREAM_NAME,d0
		beq.s	wd_BadName
		cmp.l	#ERROR_INVALID_COMPONENT_NAME,d0
		beq.s	wd_BadName
		cmp.l	#ERROR_DISK_WRITE_PROTECTED,d0
		beq.s	wd_WritePro
		cmp.l	#ERROR_WRITE_PROTECTED,d0
		bne.s	wd_FailedWrite
;
; Disk was write protected :
;
wd_WritePro:	move.l	#($80000000|NVERR_WRITEPROT),d7	; d7 gets return status
;		bclr.l	d4,d7
;		bne.s	wd_FinishedApp
		bra.s	wd_FinishedApp		; j to skip call to delete
;
; Bad name provided by user :
;
wd_BadName:	move.l	#NVERR_BADNAME,d7	; d7 gets return status
;
; Call delete function to remove possible App subdirectory :
;
wd_FailedWrite:	move.l	a4,d1			; update flag set ?
		beq.s	wd_FinishedApp		; if no, j to continue

		move.l	d5,d1			; is there lock on APP directory ?
		beq.s	10$			; if no, j to skip
		JSRLIB	UnLock			; unlock App directory

10$:		move.l	4*6(sp),a0		; a0 gets AppName pointer
		move.l	4*7(sp),a1		; a1 gets ItemName pointer
		exg	a5,a6			; a6 gets NVBase, a5 gets DOSBase
		bsr.s	DeleteDisk		; call delete function
		exg	a5,a6			; a5 gets NVBase, a6 gets DOSBase
		bra.s	wd_NoAppLock		; skip unlock of App
;
; Remove outstanding locks, restore saved current directory, and return :
;
wd_FinishedApp:	move.l	d5,d1			; is there lock on APP directory ?
		beq.s	wd_NoAppLock		; if no, j to skip
		JSRLIB	UnLock			; unlock App directory
wd_NoAppLock:	move.l	d6,d1			; d1 gets saved current directory
		JSRLIB	CurrentDir		; change to saved direcotry
wd_NoDisk:	movem.l	(sp)+,d1-d6/a0-a1/a4-a6	; restore registers
		move.l	d7,d0			; d0 gets return value
		move.l	(sp)+,d7
		rts


*****i* nonvolatile.library/DeleteDisk ***************************************
*
*   NAME
*	DeleteDisk - Deletes an Item from the Disk.
*
*   SYNOPSIS
*	Success = DeleteDisk(AppName, ItemName, NVBase)
*	d0		     a0       a1	a6
*
*	BOOL = DeleteDisk(char *, char *, struct NVBase *)
*
*   FUNCTION
*	Searches the disk for the AppName and ItemName.  If they exist, any
*	data assocated with them is freed.  If there are no other ItemNames
*	assocated with AppName it is also removed.
*
*   INPUTS
*	AppName,ItemName - Two string used to identify the data stored.
*	NVBase - Pointer to the base of nonvolatile.library.
*
*   RESULT
*	Success - TRUE if AppName and ItemName are found.  FALSE if they are
*		  not.
*
*   SEE ALSO
*	DeleteNVRAM()
*
******************************************************************************
*
*   REGISTERS
*	d3  Number of bytes to write/Number of bytes not written
*	d4  file handle for Item File.
*	d5  Lock on App directory.
*	d6  Original directory lock.
*	d7  Return parameter.
*	a5  NVBase
*	a6  DOSBase
*
*	a2,a3,a4  Untouched.
*
*	d0,d1,d2,d3,a0,a1 - used in subroutine calls, or scratch.
DeleteDisk
		movem.l	d3-d7/a0-a1/a5-a6,-(sp)
		moveq.l	#0,d7			;Set up the return parameter.
		move.l	nv_DiskLock(a6),d1	;Check to see if there is a nonvolatile disk out there.
		beq.s	dd_NoDisk
;
; Yes, there is a disk, check for access to system reserved area :
;
		tst.b	(a0)			; is App string NULL ?
		bne.s	6$			; if no, j to continue
		tst.b	(a1)			; is Item string also NULL ?
		bne.s	6$			; if no, j to continue
		bra.s	dd_NoDisk		; j to error return
6$:
		move.l	a0,d3			; d3 gets App name pointer
		move.l	a1,d4			; d4 gets Item name pointer
		move.l	a6,a5
		move.l	nv_DOSBase(a5),a6
		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,d6			;Remember the orginal directory.
				;Lock the AppName.
		move.l	d3,d1
		move.l	#ACCESS_READ,d2
		JSRLIB	Lock			;Get a lock on the directory for the AppName.
		move.l	d0,d5
		beq.s	dd_NoApp
				;Change to the AppName directory.
		move.l	d0,d1
		JSRLIB	CurrentDir
		move.l	d4,d1
		JSRLIB	DeleteFile
		move.l	d0,d7
		move.l	d5,d1			;All done with the AppName directory.
		JSRLIB	UnLock
dd_NoApp:	move.l	nv_DiskLock(a5),d1	;All done with the users nonvolatile device.
		JSRLIB	CurrentDir
		move.l	d3,d1
		JSRLIB	DeleteFile		;Try deleting the AppName directory.  Will only succeed if it is empty.
		move.l	d6,d1			;All done with the users nonvolatile device.
		JSRLIB	CurrentDir
dd_NoDisk:	move.l	d7,d0			;Set up return value.
		movem.l	(sp)+,d3-d7/a0-a1/a5-a6	;Restore the registers.
		rts


		end
******************************************************************************
*
*	$Id: setdiskprotection.asm,v 40.3 93/03/09 14:41:19 brummer Exp Locker: vertex $
*
******************************************************************************
*
*	$Log:	setdiskprotection.asm,v $
* Revision 40.3  93/03/09  14:41:19  brummer
* Check status after call to examine per Martin's request.
* 
* Revision 40.2  93/02/25  08:52:10  Jim2
* Documentation change.
*
* Revision 40.1  93/02/19  14:53:18  Jim2
* Changed the labels.
*
* Revision 40.0  93/02/18  10:38:45  Jim2
* Initial release - tested.
*
*
*	(C) Copyright 1992,1993 Commodore-Amiga, Inc.
*	    All Rights Reserved
*
******************************************************************************

		INCLUDE	'exec/macros.i'

		INCLUDE	'dos/dos.i'


		INCLUDE	'/nonvolatilebase.i'

		XDEF	SetDiskProtection

*****i* nonvolatile.library/SetDiskProtection ********************************
*
*   NAME
*	SetDiskProtection - Attempts to change the protection of a file.
*
*   SYNOPSIS
*	SetDiskProtection (AppName, ItemName, NVBase, Protection, Success)
*			   a3	    a4	      a5      d2	   d3
*
*	SetDiskProtection (STRPTR, STRPTR, struct NVBase *, BOOL)
*
*   FUNCTION
*	Changes the delete bit for a file to the state indicated by the
*	corresponding bit it Protection.
*
*	Since there is no change protection call, this routine will read
*	the current protection and if there is a change in the delete
*	bit it will call the DOS routine to set the protection bit.  The
*	value returned by this DOS call is ORed into the Success flag.
*
*   INPUTS
*	AppName - Pointer to a NULL terminated string.  This is the
*		  directory that should contain the file.
*	ItemName - Pointer to a NULL terminated string.  This is the file
*		   file.
*	NVBase - Pointer the base of nonvolatile.library.
*	Protection - New protection status.  Only the least significant bit
*		     bit (delete) is used.
*	Success - Whether the protection was changed on a copy of this
*		  data on another device.
*
*   RESULT
*	Success - The return value from SetProtection ORed with the previous
*		  value of Success.
*
*   SEE ALSO
*	SetNVRAMProtection()
*
******************************************************************************
SetDiskProtection
		movem.l	d4-d5/a3/a6,-(sp)
		move.l	nv_DOSBase(a5),a6
		move.l	nv_DiskLock(a5),d1
		beq.s	sdp_Cleanup

		JSRLIB	CurrentDir		;Change to the directory the user has picked for nonvolatile storage.
		move.l	d0,-(sp)		;Remember the orginal directory.
		move.l	d2,-(sp)
		move.l	#ACCESS_READ,d2
		move.l	a3,d1
		JSRLIB	Lock
		move.l	d0,d5
		JSRLIB	CurrentDir
		move.l	a4,d1
		JSRLIB	Lock
		move.l	d0,d4
		move.l	d4,d1
		beq.s	sdp_Unlock

		sub.l	#fib_SIZEOF+4,sp	;Need a FIB, but must be long word aligned.
		move.l	sp,d2
		addq.l	#3,d2
		and.b	#$FC,d2			;Forced long word alignment.
		move.l	d2,a3
		JSRLIB	Examine
		tst.l	d0			; success ?
		beq.s	sdp_Unlock		; if no, j to exit
		move.l	fib_Protection(a3),d2
		add.l	#fib_SIZEOF+4,sp	;Don't need the FIB anymore.
		move.l	d4,d1
		JSRLIB	UnLock
		move.l	(sp),d0
		lsr.b	#1,d2
		lsr.b	#1,d0
		roxl.b	#1,d2
		move.l	a4,d1
		JSRLIB	SetProtection
		or.w	d0,d3			;Or the return value with the previous value of Success.
sdp_Unlock:	move.l	(sp)+,d2
		move.l	(sp)+,d1
		JSRLIB	CurrentDir
		move.l	d5,d1
		beq.s	sdp_Cleanup
		JSRLIB	UnLock
sdp_Cleanup:	movem.l	(sp)+,d4-d5/a3/a6
		rts

		end
