head     38.2;
branch   ;
access   ;
symbols  V40_5:38.2 V40_4:38.2 V40_3:38.2 V40_2:38.2 V40_1:38.2 V39_56:38.2 V39_54:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_48:38.1 V39_46:38.1 V39_45:38.1 V39_44:38.1 V39_43:38.1 V39_42:38.1 V39_41:38.1 V39_40:38.1 V39_39:38.1 V39_38:38.1 V39_37:38.1 V39_36:38.1 V39_35:38.1 V39_34:38.1 V39_33:38.1 V39_32:38.1 V39_30:38.1 V39_29:38.1 V39_27:38.1 V39_26:38.1 V39_25:38.1 V39_23:38.1 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


38.2
date     92.11.11.09.56.20;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.35.19;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


38.2
log
@File is no longer...
@
text
@/*
 * $Id: executerender.c,v 38.1 91/06/24 11:35:19 mks Exp Locker: mks $
 *
 * $Log:	executerender.c,v $
 * Revision 38.1  91/06/24  11:35:19  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

No longer used...
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 3
a6 152
 * $Log$
 */

/*------------------------------------------------------------------------*/

#include <string.h>

#include <clib/macros.h>
#include <intuition/intuition.h>
#include <intuition/gadgetclass.h>
#include "workbench.h"
#include <graphics/regions.h>
#include <libraries/gadtools.h>

#include "execute.h"

#include "support.h"
#include "quotes.h"

#include <clib/gadtools_protos.h>
#include "proto.h"

/*------------------------------------------------------------------------*/

/*  Function Prototypes: */

struct Gadget *InitExecute(struct ExecuteTag *etag, STRPTR label);
struct Gadget *InitExitGadgets(struct ExecuteTag *etag, struct Gadget *gad);
void RenderExecute(struct ExecuteTag *etag, BOOL firsttime);
WORD HandleExecuteEvent(struct Window *executewindow, struct IntuiMessage *imsg);

/*------------------------------------------------------------------------*/

extern struct TextAttr defaultAttr;

/*------------------------------------------------------------------------*/

/*/ InitExecute()
 *
 * Function to initialize all the gadgets for the specified Execute window.
 *
 */

struct Gadget *InitExecute(etag, label)

    struct ExecuteTag *etag;
    STRPTR label;

{
struct Gadget *gad;
struct NewGadget ng;
short len;
short tmp;

    DP(("IE:  Welcome to InitExecute...\n"));

    gad = CreateContext(&etag->et_FirstGadget);

    len=strlen(ng.ng_GadgetText = Quote(Q_OK_TEXT));
    tmp=strlen(Quote(Q_CANCEL_TEXT));
    if (tmp>len) len=tmp;
    len=(len << 3) + 14;

    /*  Create a "OK" button relative to the bottom: */
    ng.ng_GadgetID = G_OK;
    ng.ng_LeftEdge = 16;
    ng.ng_TopEdge = -17;
    ng.ng_Width = len;
    ng.ng_Height = 12;
    ng.ng_TextAttr = &defaultAttr;
    ng.ng_Flags = 0;
    ng.ng_VisualInfo = etag->et_VisualInfo;
    gad = CreateGadget(BUTTON_KIND, gad, &ng,
        TAG_DONE);
    if (gad)
    {
        gad->Flags |= GRELBOTTOM;
    }

    /*  Create a "CANCEL" button relative to the bottom and right: */
    ng.ng_GadgetID = G_CANCEL;
    ng.ng_LeftEdge = -15-len;
    ng.ng_GadgetText = Quote(Q_CANCEL_TEXT);
    gad = CreateGadget(BUTTON_KIND, gad, &ng,
        TAG_DONE);
    if (gad)
        gad->Flags |= GRELBOTTOM | GRELRIGHT;


    ng.ng_GadgetID = G_COMMAND;
    ng.ng_LeftEdge = 154;
    ng.ng_TopEdge = 15+etag->et_TopBorder;
    ng.ng_Width = 290;
    ng.ng_Height = 14;
    ng.ng_GadgetText = label;
    ng.ng_Flags = NG_HIGHLABEL;
    gad = CreateGadget(STRING_KIND, gad, &ng,
        GTST_String, etag->et_CommandBuffer,
        GTST_MaxChars, COMMANDLENGTH,
        GA_TabCycle,FALSE,
        TAG_DONE);
    if (gad)
    {
        etag->et_CommandGad = gad;
        DP(("IE: Command gadget is at %lx\n", etag->et_CommandGad));
        /*  Position cursor at the end of the string: */
        ((struct StringInfo *)gad->SpecialInfo)->BufferPos =
            strlen(etag->et_CommandBuffer);
    }
    return(gad);
}

/*------------------------------------------------------------------------*/

/*/ RenderExecute()
 *
 * Function to perform all the rendering for the specified Execute window.
 *
 * Created:  30-May-89, Peter Cherna
 * Modified: 12-Oct-89, Peter Cherna
 *
 * Bugs:
 *
 */

void RenderExecute(etag, firsttime)

    struct ExecuteTag *etag;
    BOOL firsttime;

{
    if (!firsttime)
        GT_BeginRefresh(etag->et_Window);

    PrintText(etag->et_Window, 1, 12, (UWORD)(9 + etag->et_TopBorder),
        etag->et_Message);
    if (!firsttime)
        GT_EndRefresh(etag->et_Window, TRUE);
}


/*------------------------------------------------------------------------*/

/*/ HandleExecuteEvent()
 *
 * Function to process an IntuiMessage relating to the specified Execute
 * window.
 *
 * Created:  17-Jul-89, Peter Cherna
 * Modified: 10-Nov-89, Peter Cherna
 *
 * Bugs:
d10 1
a10 66
WORD HandleExecuteEvent(executewindow, imsg)

    struct Window *executewindow;
    struct IntuiMessage *imsg;

{
    struct ExecuteTag *etag;
    WORD event = 0;

    /*  Send the IntuiMessage to the toolkit for opinion.  It will return
        NULL if a gadget "eats" a message that has no direct significance
        for us, the client: */
    imsg = GT_FilterIMsg(imsg);
    if (imsg)
    {
        etag = (struct ExecuteTag *) executewindow->UserData;

        switch (imsg->Class)
        {
            case REFRESHWINDOW:
                DP(("HEE:  REFRESHWINDOW message.  Calling RenderExecute()...\n"));
                RenderExecute(etag, FALSE);
                break;
            case GADGETUP:
                DP(("HEE:  GADGETUP message for "));
                switch (((struct Gadget *) imsg->IAddress)->GadgetID & GADTOOLMASK)
                {
                    case G_OK:
                        DP(("OK gadget\n"));
                        event = 1;
                        break;
                    case G_CANCEL:
                        DP(("CANCEL gadget\n"));
                        event = -1;
                        break;
                    case G_COMMAND:
                        DP(("string gadget\n"));
                        event = 1;
                        break;
                }
                break;
            case ACTIVEWINDOW:
                DP(("HEE:  About to activate string gad %lx in window %lx\n",
                    etag->et_CommandGad, executewindow));
                ActivateGadget(etag->et_CommandGad, executewindow, NULL);
                DP(("HEE:  Activated it\n"));
                break;
        }
        DP(("HEE:  Done.\n"));
        if (event == 1)
        {
            /*  event == 1 means exit with ok or <enter> in string, so copy
                into caller's buffer: */
            stccpy(etag->et_CommandBuffer,
                ((struct StringInfo *)etag->et_CommandGad->SpecialInfo)->Buffer,
                COMMANDLENGTH);
        }
        /*  Give back the cooked IntuiMessage */
        GT_PostFilterIMsg(imsg);
        return(event);
    }
    return(0);
}


/*------------------------------------------------------------------------*/
@
