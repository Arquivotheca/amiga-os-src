head     39.1;
branch   ;
access   ;
symbols  V40_5:39.1 V40_4:39.1 V40_3:39.1 V40_2:39.1 V40_1:39.1 V39_56:39.1 V39_54:39.1 V39_52:38.4 V39_51:38.4 V39_50:38.3 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_43:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.2 V39_32:38.2 V39_30:38.2 V39_29:38.2 V39_27:38.1 V39_26:38.1 V39_25:38.1 V39_23:38.1 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


39.1
date     93.01.11.16.52.17;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     92.11.12.09.09.53;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     92.11.11.11.13.40;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     92.05.30.16.55.40;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.35.23;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


39.1
log
@Now supports a string filter for the RENAME requester...
No longer needs to check for ":" or "/" after the fact.
@
text
@/*
 * $Id: executewindow.c,v 38.4 92/11/12 09:09:53 mks Exp Locker: mks $
 *
 * $Log:	executewindow.c,v $
 * Revision 38.4  92/11/12  09:09:53  mks
 * Cleaned up gadget size to match prefs editors
 *
 * Revision 38.3  92/11/11  11:13:40  mks
 * Completely new requester that gives font sensitive
 * layout.  Required for the Japan support.
 *
 * Revision 38.2  92/05/30  16:55:40  mks
 * Now uses the GETMSG/PUTMSG stubs
 *
 * Revision 38.1  91/06/24  11:35:23  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

/*------------------------------------------------------------------------*/

#include <exec/memory.h>
#include <intuition/intuition.h>
#include <intuition/gadgetclass.h>
#include <libraries/dos.h>
#include <libraries/gadtools.h>
#include <clib/gadtools_protos.h>

#include "support.h"
#include "quotes.h"

#include "sysproto.h"
#include "proto.h"

/*------------------------------------------------------------------------*/

/*  GadgetID definitions: */
#define G_COMMAND	1
#define G_OK		2
#define G_CANCEL	3

/*------------------------------------------------------------------------*/

/*  Size of buffer for command string gadget: */
#define COMMANDLENGTH		256

/*------------------------------------------------------------------------*/

#define	WIN_Title	WinTags[0].ti_Data
#define	WIN_Screen	WinTags[1].ti_Data
#define	WIN_Height	WinTags[2].ti_Data
#define	WIN_Width	WinTags[3].ti_Data
#define	WIN_Gadgets	WinTags[4].ti_Data
#define	WIN_IDCMP	WinTags[5].ti_Data

#define	ewin_IDCMP	IDCMP_GADGETUP|IDCMP_ACTIVEWINDOW

#define	BETWEEN	4

WORD SyncExecute(STRPTR title,STRPTR greeting,STRPTR label,STRPTR buffer,struct MsgPort *intuiport,struct Hook *hook)
{
struct	WorkbenchBase	*wb = getWbBase();
	VOID		*VisualInfo;
struct	Window		*ewin;
struct	IntuiMessage	*imsg;
struct	Screen		*Screen;
struct	Gadget		*gad;
struct	Gadget		*stringGad;
struct	TagItem		WinTags[]=
	{
		{WA_Title,NULL},
		{WA_CustomScreen,NULL},
		{WA_Height,0},
		{WA_Width,400},
		{WA_Gadgets,NULL},
		{WA_IDCMP,0},
		{WA_Flags,WFLG_DRAGBAR|WFLG_DEPTHGADGET|WFLG_SIMPLE_REFRESH|WFLG_ACTIVATE|WFLG_RMBTRAP|WFLG_NOCAREREFRESH},
		{TAG_DONE,0}
	};
	WORD		exit_code=0;


	BeginDiskIO();

	Screen=wb->wb_Screen;
	WIN_Title=(ULONG)title;
	WIN_Screen=(ULONG)Screen;
	WIN_Height=Screen->WBorTop + Screen->BarHeight - Screen->BarVBorder + Screen->WBorTop + BETWEEN;

	if (VisualInfo=GetVisualInfo(Screen,TAG_DONE))
	{
	LONG	label_width;
	LONG	ok_width;
	LONG	cancel_width;
	LONG	greeting_width;

		/* Find the sizes of the various strings */
		{
		struct	IntuiText	itext;

			itext.LeftEdge=0;
			itext.ITextFont=Screen->Font;
			itext.IText=label;
			label_width=IntuiTextLength(&itext);
			itext.IText=Quote(Q_OK_TEXT);
			ok_width=IntuiTextLength(&itext) + 12;
			itext.IText=Quote(Q_CANCEL_TEXT);
			cancel_width=IntuiTextLength(&itext) + 12;
			itext.IText=greeting;
			greeting_width=IntuiTextLength(&itext);
		}

		if (gad=CreateContext((struct Gadget **)&WIN_Gadgets))
		{
		struct	NewGadget	ng;

			ng.ng_TextAttr = Screen->Font;
			ng.ng_LeftEdge = Screen->WBorLeft << 1;
			ng.ng_TopEdge = WIN_Height;
			greeting_width -= (ng.ng_Width = WIN_Width - ng.ng_LeftEdge - (Screen->WBorRight<<1));
			if (greeting_width > 0)
			{
				ng.ng_Width+=greeting_width;
				WIN_Width+=greeting_width;
			}
			WIN_Height += (ng.ng_Height = Screen->Font->ta_YSize) + BETWEEN;
			ng.ng_GadgetText = greeting;
			ng.ng_Flags = PLACETEXT_IN;
			ng.ng_VisualInfo = VisualInfo;
			gad=CreateGadget(TEXT_KIND,gad,&ng,TAG_DONE);

			ng.ng_GadgetID = G_COMMAND;
			ng.ng_LeftEdge+= label_width+10;
			ng.ng_TopEdge = WIN_Height;
			ng.ng_Width = WIN_Width - ng.ng_LeftEdge - (Screen->WBorRight << 1);
			WIN_Height += (ng.ng_Height = Screen->Font->ta_YSize+6) + BETWEEN;
			ng.ng_GadgetText = label;
			ng.ng_Flags = PLACETEXT_LEFT;
			gad = CreateGadget(STRING_KIND, gad, &ng,
						GTST_String,buffer,
						GTST_MaxChars,COMMANDLENGTH,
						GTST_EditHook,hook,
						GA_TabCycle,FALSE,
						TAG_DONE);

			if (stringGad=gad) ((struct StringInfo *)gad->SpecialInfo)->BufferPos = strlen(buffer);

			if (cancel_width>ok_width) ok_width=cancel_width;

			/*  Create a "OK" button relative to the bottom: */
			ng.ng_GadgetID = G_OK;
			ng.ng_LeftEdge = Screen->WBorLeft << 1;
			ng.ng_TopEdge = WIN_Height;
			ng.ng_Width = ok_width;
			WIN_Height += (ng.ng_Height = Screen->Font->ta_YSize+6) + BETWEEN;
			ng.ng_GadgetText = Quote(Q_OK_TEXT);
			ng.ng_Flags = PLACETEXT_IN;
			gad = CreateGadget(BUTTON_KIND,gad,&ng,TAG_DONE);

			/*  Create a "CANCEL" button relative to the bottom and right: */
			ng.ng_GadgetID = G_CANCEL;
			ng.ng_LeftEdge = WIN_Width-(Screen->WBorRight << 1)-ok_width;
			ng.ng_GadgetText = Quote(Q_CANCEL_TEXT);
			gad = CreateGadget(BUTTON_KIND,gad,&ng,TAG_DONE);

			WIN_Height += Screen->WBorBottom;

			if (gad)
			{
				if (ewin=OpenWindowTagList(NULL,WinTags))
				{
					ewin->UserPort=intuiport;
					if (ModifyIDCMP(ewin,ewin_IDCMP))
					{
						GT_RefreshWindow(ewin,NULL);
						ActivateGadget(stringGad,ewin,NULL);
						while (!exit_code)
						{
							if (imsg=(struct IntuiMessage *)GETMSG(intuiport))
							{
								if (imsg->IDCMPWindow==ewin)
								{
								struct	IntuiMessage	*imsg2;

									if (imsg2=GT_FilterIMsg(imsg))
									{
										if (IDCMP_ACTIVEWINDOW == imsg2->Class) ActivateGadget(stringGad,ewin,NULL);
										else if (IDCMP_GADGETUP == imsg2->Class)
										{
											switch (((struct Gadget *) imsg2->IAddress)->GadgetID & GADTOOLMASK)
											{
											case G_OK:
											case G_COMMAND:	exit_code=1;
													stccpy(buffer,((struct StringInfo *)stringGad->SpecialInfo)->Buffer,COMMANDLENGTH);
													break;
											case G_CANCEL:	exit_code=-1;
													break;
											}
										}
										GT_PostFilterIMsg(imsg2);
									}
									REPLYMSG((struct Message *)imsg);
								}
								else StripMessage(imsg);
							}
							else WAITPORT(intuiport);

						}
					}
					ewin->Title=NULL;
					ClosePWindow(ewin,NULL);
				}
			}

			FreeGadgets((struct Gadget *)WIN_Gadgets);
		}
		FreeVisualInfo(VisualInfo);
	}

	EndDiskIO();
	return(exit_code);
}
@


38.4
log
@Cleaned up gadget size to match prefs editors
@
text
@d2 1
a2 1
 * $Id: executewindow.c,v 38.3 92/11/11 11:13:40 mks Exp Locker: mks $
d5 3
d60 1
a60 1
WORD SyncExecute(STRPTR title,STRPTR greeting,STRPTR label,STRPTR buffer,struct MsgPort *intuiport)
d142 1
@


38.3
log
@Completely new requester that gives font sensitive
layout.  Required for the Japan support.
@
text
@d2 1
a2 1
 * $Id: executewindow.c,v 38.2 92/05/30 16:55:40 mks Exp Locker: mks $
d5 4
d55 1
a55 1
#define	BETWEEN	3
d85 1
a85 1
	WIN_Height=Screen->WBorTop + Screen->BarHeight - Screen->BarVBorder + 2;
d135 1
a135 1
			ng.ng_Flags = NG_HIGHLABEL | PLACETEXT_LEFT;
d151 1
a151 1
			WIN_Height += (ng.ng_Height = Screen->Font->ta_YSize+4) + BETWEEN;
@


38.2
log
@Now uses the GETMSG/PUTMSG stubs
@
text
@d2 1
a2 1
 * $Id: executewindow.c,v 38.1 91/06/24 11:35:23 mks Exp Locker: mks $
d5 3
d17 1
d19 3
a21 1
#include "execute.h"
d30 4
a33 28
extern struct TextAttr defaultAttr;

/*------------------------------------------------------------------------*/

/*  New intuition functions: */
struct Window *OpenWindowTagList(struct NewWindow *, struct TagItem *);

/*------------------------------------------------------------------------*/

/*  Function Prototypes: */

WORD SyncExecute(STRPTR title, STRPTR greeting, STRPTR label, STRPTR buffer,
    struct MsgPort *intuiport);
struct Window *OpenExecuteWindow(STRPTR title, STRPTR greeting, STRPTR label,
    STRPTR buffer, struct MsgPort *intuiport);
void CloseExecuteTag(struct ExecuteTag *etag);

/*------------------------------------------------------------------------*/

/*/ SyncExecute()
 *
 * Function to open, process, and close an Execute window synchronously to
 * Workbench.
 *
 * Created:  20-Jul-89, Peter Cherna
 * Modified: 19-Jan-90, David Berezowski / Peter Cherna
 *
 */
d35 15
a49 1
WORD SyncExecute(title, greeting, label, buffer, intuiport)
d51 1
a51 5
    STRPTR title;
    STRPTR greeting;
    STRPTR label;
    STRPTR buffer;
    struct MsgPort *intuiport;
d53 1
d55 17
a71 85
    struct Window *executewindow;
    WORD exit_code;
    struct IntuiMessage *imsg;

    if (!(executewindow = OpenExecuteWindow(title, greeting, label, buffer, intuiport)))
    {
	return(FALSE);
    }

    BeginDiskIO();
    exit_code = 0;
    while (!exit_code)
    {
	if (imsg = (struct IntuiMessage *) GETMSG(intuiport))
	{
	    DP(("SE:  Message of class %lx\n", imsg->Class));
	    if (imsg->IDCMPWindow == executewindow)
	    {
		DP(("SE:  For the Execute Window\n"));
		exit_code = HandleExecuteEvent(executewindow, imsg);
		DP(("SE:  Replying it\n"));
		REPLYMSG((struct Message *)imsg);
	    }
	    else StripMessage(imsg);
	}
	else WAITPORT(intuiport);
    }

    CloseExecuteTag((struct ExecuteTag *) (executewindow->UserData));
    EndDiskIO();
    return(exit_code);
}


/*------------------------------------------------------------------------*/

/*/ OpenExecuteWindow()
 *
 * Function to open an Execute window for the supplied icon, using the supplied
 * IDCMP message port.
 *
 * Created:  30-May-89, Peter Cherna
 * Modified: 19-Jan-90, Peter Cherna
 *
 * Bugs:
 *
 */

struct Window *OpenExecuteWindow(title, greeting, label, buffer, intuiport)

    STRPTR title;
    STRPTR greeting;
    STRPTR label;
    STRPTR buffer;
    struct MsgPort *intuiport;

    {
    static struct NewWindow newexecutewindow =
	{
	EXECUTEW_LEFTEDGE, EXECUTEW_TOPEDGE,
	EXECUTEW_WIDTH, EXECUTEW_HEIGHT,
	-1, -1,			/*  DetailPen, BlockPen */
	NULL,			/*  IDCMP Flags will be set later */
	EXECUTEW_FLAGS,
	NULL,			/*  FirstGadget */
	NULL,			/*  CheckMark */
	NULL,			/*  Title */
	NULL,			/*  Screen */
	NULL,			/*  BitMap */
	EXECUTEW_MINWIDTH, EXECUTEW_MINHEIGHT,
	EXECUTEW_MAXWIDTH, EXECUTEW_MAXHEIGHT,
	WBENCHSCREEN,
	};

    struct WorkbenchBase *wb = getWbBase();
    struct Window *executewindow;
    struct ExecuteTag *etag;
    struct Gadget *gad;
    struct TagItem wtags[] =
	{
	WA_PubScreen, NULL,
	WA_InnerHeight, EXECUTEW_HEIGHT,
	WA_AutoAdjust, TRUE,
	WA_Title, NULL,
	TAG_DONE, 0,
d73 1
a73 64

    DP(("OEW:  Allocating ExecuteTag...\n"));
    if (!(etag = ALLOCVEC(sizeof(struct ExecuteTag), MEMF_CLEAR|MEMF_PUBLIC)))
	{
	return(NULL);
	}

    if (!(etag->et_VisualInfo = GetVisualInfo(wb->wb_Screen,
	TAG_DONE)))
	{
	CloseExecuteTag(etag);
	return(NULL);
	}

    /*  cribbed from intuition/wtags.c, so it had better be right :-) */
    etag->et_TopBorder = wb->wb_Screen->WBorTop +
	(wb->wb_Screen->Font->ta_YSize + 1);

    /*  Open display font: */
    if (!(etag->et_ExecuteFont = OpenFont(&defaultAttr)))
	{
	CloseExecuteTag(etag);
	return(NULL);
	}

    etag->et_CommandBuffer = buffer;
    etag->et_Message = greeting;

    DP(("OEW:  Initializing all gadgets...\n"));
    gad = InitExecute(etag, label);

    /*  Always want to be on WB PubScreen */
    wtags[0].ti_Data = (ULONG) wb->wb_Screen;
    wtags[3].ti_Data = (ULONG) title;
    DP(("OEW:  Opening window...\n"));
    if (!(executewindow = OpenWindowTagList(&newexecutewindow, wtags)))
	{
	CloseExecuteTag(etag);
	return(NULL);
	}

    DP(("OEW:  window at %lx\n", executewindow));
    executewindow->UserData = (STRPTR) etag;
    etag->et_Window = executewindow;
    SetFont(executewindow->RPort, etag->et_ExecuteFont);

    executewindow->UserPort = intuiport;

    if ((!gad) || (!ModifyIDCMP(executewindow, EXECUTEW_IDCMPFLAGS)))
    {
	CloseExecuteTag(etag);
	return(NULL);
    }

    DP(("OEW:  Rendering all gadgets...\n"));
    RenderExecute(etag, TRUE);
    DP(("OEW:  Adding and refreshing gadgets...\n"));
    AddGList(executewindow, etag->et_FirstGadget, ((USHORT) -1), ((USHORT) -1), NULL);
    RefreshGList(etag->et_FirstGadget, executewindow, NULL, ((USHORT) -1));
    GT_RefreshWindow(executewindow, NULL);
    ActivateGadget(etag->et_CommandGad, executewindow, NULL);
    DP(("OEW:  Done.\n"));
    return(executewindow);
    }
d76 1
a76 13
/*------------------------------------------------------------------------*/

/*/ CloseExecuteTag()
 *
 * Function to close the specified Execute Tag.
 *
 */

void CloseExecuteTag(struct ExecuteTag *etag)
{
    if (etag)
    {
    struct Window *executewindow = etag->et_Window;
d78 132
a209 4
	if (executewindow)
	{
	    executewindow->Title = NULL;
	    ClosePWindow(executewindow, NULL);
d212 2
a213 9
	/*  FreeGadgets() handles the NULL case correctly: */
	FreeGadgets(etag->et_FirstGadget);
	if (etag->et_ExecuteFont)
	    CloseFont(etag->et_ExecuteFont);

	FreeVisualInfo(etag->et_VisualInfo);

	FREEVEC(etag);
    }
a214 2

/*------------------------------------------------------------------------*/
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d61 1
a61 1
    {
d66 2
a67 3
    if (!(executewindow = OpenExecuteWindow(title, greeting,
	label, buffer, intuiport)))
	{
d69 1
a69 1
	}
d74 2
a76 3
	Wait (1 << intuiport->mp_SigBit);
	while ((!exit_code) && (imsg = (struct IntuiMessage *) GetMsg(intuiport)))
	    {
d79 1
a79 1
		{
a83 6
		}
	    else
		{
		DP(("SE:  Calling StripMessage\n"));
		StripMessage(imsg);
		}
d85 1
d87 2
d93 1
a93 1
    }
@
