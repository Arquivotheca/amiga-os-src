head     38.2;
branch   ;
access   ;
symbols  V40_5:38.2 V40_4:38.2 V40_3:38.2 V40_2:38.2 V40_1:38.2 V39_56:38.2 V39_54:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_43:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.1 V39_32:38.1 V39_30:38.1 V39_29:38.1 V39_27:38.1 V39_26:38.1 V39_25:38.1 V39_23:38.1 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


38.2
date     92.06.11.07.37.54;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.35.27;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


38.2
log
@Removed code that was old and dead...
@
text
@/*
 * $Id: fileops.c,v 38.1 91/06/24 11:35:27 mks Exp Locker: mks $
 *
 * $Log:	fileops.c,v $
 * Revision 38.1  91/06/24  11:35:27  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

#include "proto.h"
#include "string.h"
#include "exec/types.h"
#include "exec/nodes.h"
#include "exec/lists.h"
#include "exec/memory.h"
#include "libraries/dos.h"
#include "libraries/dosextens.h"
#include "workbench.h"
#include "workbenchbase.h"
#include "global.h"
#include "support.h"
#include "errorindex.h"
#include "quotes.h"

/*
 * WBMove returns
 *	 1 if move was successfull
 *	 0 if an error occurred
 *	-1 if move was really a copy
 */

WBMove(obj, fromdrawer, todrawer, curx, cury)
struct WBObject *obj, *fromdrawer, *todrawer;
LONG curx, cury;
{
struct WorkbenchBase *wb = getWbBase();
char *name;
LONG fromlock, tolock;
int result = 0;

    DP(("WBMove: enter, obj=%lx (%s), fd=%lx (%s), td=%lx (%s)\n",
	obj, obj->wo_Name, fromdrawer, fromdrawer->wo_Name,
	todrawer, todrawer->wo_Name));

    if (obj->wo_Type == WBDISK) { /* if object is a disk... */
	fromlock = GetParentsLock(obj); /* use lock on disk */
    }
    else if (obj->wo_Background) { /* if object is in the background... */
	fromlock = obj->wo_Lock; /* lock is contained in the object */
	/* we are finally moving out of the backdrop (YAHOO!) */
	DP(("WBMove: obj was in the background, using obj->wo_Lock (%lx)\n",
	    fromlock));
    }
    else { /* object is either a file/drawer and not in the background */
	fromlock = fromdrawer->wo_DrawerData->dd_Lock;
    }

    if (!fromlock) {
	DP(("WBMove: error, fromlock=%lx\n", fromlock));
	goto end;
    }

    /* handle moves TO the background */
    if (todrawer == wb->wb_RootObject) {
	/* we are moving to the backdrop window.  This is not a real move:
	 * only the icon gets transferred */
	obj->wo_Background = 1;
	obj->wo_Lock = DUPLOCK(fromlock);
	DP(("WBMove: moved to the backdrop, returning 1\n"));
	return(1);
    }

    tolock = todrawer->wo_DrawerData->dd_Lock;

    result=SAMELOCK(fromlock,tolock);
    if ((result!=LOCK_SAME) && (result!=LOCK_SAME_HANDLER))
    {
	result = DosCopyLaunch(obj->wo_Name, obj->wo_Name, fromdrawer, todrawer,curx, cury, fromlock, tolock, obj->wo_Type);
    }
    else
    {
	if (result==LOCK_SAME) result=1;
	else
	{
	    result = DosMove(fromlock, obj->wo_Name, tolock, obj->wo_Name, 1);

	    if (result)
	    {
	        name = wb->wb_Buf0;
                strcpy(name, obj->wo_Name);
                strcat(name, InfoSuf);

                result = DosMove(fromlock, name, tolock, name, 1);
	    }
	}

	if (result)
        {
            if (obj->wo_LeftOut) PutAway(obj,PUTAWAY_NODEL);
            if (obj->wo_Background)
            {
                UNLOCK(obj->wo_Lock);
                obj->wo_Lock = 0;
                obj->wo_Background = 0;
            }
        }
    }
end:
    DP(("WBMove: result=%ld, exit\n", result));
    return(result);
}

WBRename( obj, oldname )
struct WBObject *obj;
char *oldname;
{
    struct WorkbenchBase *wb = getWbBase();
    LONG lock;
    int result;
    char *new, *old;

    lock = GetParentsLock(obj);

    new = wb->wb_Buf0;
    old = wb->wb_Buf1;

    /* the move of the object itself */
    strcpy( old, oldname );
    strcpy( new, obj->wo_Name );
    if (result = DosMove( lock, old, lock, new, 1))
    {
        strcat( new, InfoSuf );
        strcat( old, InfoSuf );
        result = DosMove( lock, old, lock, new, 1 );
    }

    return( result );
}

WBRenameDisk(obj, oldname)
struct WBObject *obj;
char *oldname;
{
    char *name = obj->wo_Name;
    struct ActiveDisk *ad = NULL;
    BPTR lock;
    int result = 0;

    obj->wo_Name = oldname;
    if (lock = GetParentsLock(obj)) {
	ad = ObjectToActive(obj);
	CURRENTDIR(lock);
	result = Relabel(":", name);
        DP(("WBRenameDisk: calling Relabel with name = %s\n"));
	DP(("\tresult = %ld, IoErr = %ld\n", result, IOERR()));
    }
    if (!result) {
	ErrorTitle(Quote(Q_CANT_RENAME_DISK));
    }
    else {
	FREEVEC(ad->ad_Name);
	ad->ad_Name = scopy(name);
	obj->wo_Name = name;
    }
    return(result);
}

#define	RENAME_ASSIGN	" ^WB^"

/* DosMove:
 *
 * This routine used to be used to move a file by either
 * renaming it or copying it.  Now it is just used to
 * rename a file.
 *
 * return value:
 *	 1 - move successfull
 *	 0 - move failed
 */
DosMove(fromlock, fromCfile, tolock, toCfile, notfoundok)
BPTR fromlock;
BPTR tolock;
char *fromCfile;
char *toCfile;
int notfoundok;
{
BPTR tmplock;
long err;
int result = FALSE; /* assume failure */
char buffer[132];

    DP(("DosMove: enter, fl=%lx, fCf=%s, tl=%lx, tCf=%s, nfok=%ld\n",fromlock, fromCfile, tolock, toCfile, notfoundok));

    CURRENTDIR(tolock);

    if (tmplock=DUPLOCK(fromlock))
    {
        if (AssignLock(RENAME_ASSIGN,tmplock))
        {
            strcpy(buffer,RENAME_ASSIGN);
            strcat(buffer,":");
            strcat(buffer,fromCfile);
            result = RENAME(buffer,toCfile);
            err=IOERR();
            AssignLock(RENAME_ASSIGN,NULL);
        }
        else
        {
            err=IOERR();
	    UNLOCK(tmplock);
	}
    }
    else err=IOERR();

    /* if we don't care if the source file wasn't found */
    if ((!result) && (notfoundok) && (err == ERROR_OBJECT_NOT_FOUND)) result = TRUE;

    if (!result)
    {
        SetResult2(err);
        ErrorDos(ERR_MOVE, fromCfile);
    }

    DP(("DosMove: result=%ld, notfoundok=%ld, IoErr=%ld, exit\n",result, notfoundok, err));
    return(result != 0);
}

/* convert a BCPL string into a C style string */
void BtoC( cbuf, bstr )
UBYTE *cbuf;
UBYTE *bstr;
{
    int len;

    len = *bstr++;
    while( len-- ) {
	*cbuf++ = *bstr++;
    }
    *cbuf = '\0';
}


WriteProtected( fl )
struct FileLock *fl;
{
    struct ActiveDisk *ad;

    /* if there is no lock, we had better not write it! */
    if( fl == NULL ) return( 1 );

    ad = (struct ActiveDisk *) ActiveSearch( VolumeToActive, fl->fl_Volume );

    MP(( "WriteProtected: type %ld\n", ad->ad_Info.id_DiskState ));

    return( ad->ad_Info.id_DiskState == ID_WRITE_PROTECTED );
}

AssignDOtoWBO(obj, dobj)
struct WBObject *obj;
struct DiskObject *dobj;
{
    memcpy(&(obj->wo_Gadget),&(dobj->do_Gadget),sizeof(struct Gadget));
    memcpy(&(obj->wo_IOGadget),&(dobj->do_Gadget),sizeof(struct Gadget));

    obj->wo_Type = dobj->do_Type;
    obj->wo_DefaultTool = dobj->do_DefaultTool;
    obj->wo_ToolTypes = dobj->do_ToolTypes;
    obj->wo_CurrentX = dobj->do_CurrentX;
    obj->wo_CurrentY = dobj->do_CurrentY;
    obj->wo_SaveX = obj->wo_CurrentX; /* init SaveX */
    DP(("AssignDOtoWBO: setting SaveX to %ld ($%lx) for %lx (%s)\n",
	obj->wo_SaveX, obj->wo_SaveX, obj, obj->wo_Name));
    obj->wo_SaveY = obj->wo_CurrentY; /* init SaveY */
    obj->wo_DrawerData = (struct NewDD *) dobj->do_DrawerData;
    obj->wo_ToolWindow = dobj->do_ToolWindow;
    obj->wo_StackSize = dobj->do_StackSize;

    MP(("AssignDO2WBO:\n"));
    MP(("\tdo_CurrentX = %ld ($%lx), do_CurrentY=%ld ($%lx)\n",
	dobj->do_CurrentX, dobj->do_CurrentX,
	dobj->do_CurrentY, dobj->do_CurrentY));
    MP(("\two_CurrentX = %ld ($%lx), wo_CurrentY=%ld ($%lx)\n",
	obj->wo_CurrentX, obj->wo_CurrentX,
	obj->wo_CurrentY, obj->wo_CurrentY));
    MP(("\two_SaveX = %ld ($%lx), wo_SaveY=%ld ($%lx)\n",
	obj->wo_SaveX, obj->wo_SaveX,
	obj->wo_SaveY, obj->wo_SaveY));

    if( obj->wo_DrawerData )
    {
    struct NewDD *dd = obj->wo_DrawerData = ObjAllocNorm( obj, sizeof( struct NewDD ) );

	if( !dd ) return(NULL);
	memcpy(dd,dobj->do_DrawerData,DRAWERDATAFILESIZE);
	MP(("AssignDO2WBO: dd_XY = %ld,%ld\n",obj->wo_DrawerData->dd_CurrentX,obj->wo_DrawerData->dd_CurrentY));
	dd->dd_Object = obj;
	NewList( &dd->dd_Children );

	dd->dd_NewWindow.DetailPen = -1;
	dd->dd_NewWindow.BlockPen = -1;
	dd->dd_NewWindow.Type = WBENCHSCREEN;

	/*
	 * Some icons had, somehow, matched our check value and
	 * had junk in these two fields...
	 */
	dd->dd_Flags &= 3;
	if (dd->dd_ViewModes > DDVM_BYSIZE) dd->dd_ViewModes=DDVM_BYDEFAULT;
    }
    return(1);
}

struct WBObject *GetWBIcon(char *name)
{
struct WBObject *obj;
struct DiskObject dobj;

    DP(("GetWBIcon: enter, calling WBAllocWBObject('%s')\n", name));
    if (obj = WBAllocWBObject(name))
    {
	DP(("GetWBIcon: obj=%lx, calling GetIcon()\n", obj));
	DP(("GetWBIcon: name='%s', &dobj=%lx, &obj->wo_FreeList=%lx\n",name, &dobj, &obj->wo_FreeList));

	if (GetIcon(name, &dobj, &obj->wo_FreeList))
	{
	    DP(("GetWBIcon: after GetIcon '%s', dobj X,Y = %ld,%ld\n",name, dobj.do_CurrentX, dobj.do_CurrentY));
	    DP(("\tdobj Gadget L,T = %ld,%ld\n",dobj.do_Gadget.LeftEdge, dobj.do_Gadget.TopEdge));
	    if (AssignDOtoWBO(obj, &dobj)) goto ok;
	}

	DP(("GetWBIcon: calling FreeWBObject\n"));
	WBFreeWBObject(obj);
	obj = NULL;
    }
ok:
    DP(("GetWBIcon: obj=%lx, exit\n", obj));
    return(obj);
}
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
a338 380

#ifdef DOTICON

struct MyDiskObject {
    char *		do_DefaultTool;	/* ptr to icon's default tool */
    char *		do_ToolWindow;	/* char string for tool's window */
    char **		do_ToolTypes;	/* the types for this tool */
    struct DrawerData *	do_DrawerData;	/* if this is a drawer or disk */
    LONG		do_CurrentX;	/* current X for IO purposes */
    LONG		do_CurrentY;	/* current X for IO purposes */
    LONG		do_StackSize;	/* how much stack to give to this */
    struct Gadget 	do_Gadget;	/* a copy of in core gadget */
    UBYTE		do_Type;	/* what flavor object is this? */
    UBYTE		do_pad1;	/* word alignment */
};

struct IconInfo {
	ULONG	ii_ptrsize;	/* amount of ptr data required */
	UWORD	ii_image1size;	/* amount of data for unselected image */
	UWORD	ii_image2size;	/* amount of data for selected image */
	UWORD	ii_numtt;	/* number of ToolType strings */
};

/*
	Reads in the next WBObject from the .icon file.
	Similar to:
		GetWBObject in fileops.c of workbench.library
		GetIcon in entry.c of icon.library
*/
struct WBObject *
GetNextWBObject(fh)
BPTR fh;
{
#ifdef LATTICE_ML_WORKAROUND
	struct WorkbenchBase *wb = getWbBase();/* Added for calls */
#endif LATTICE_ML_WORKAROUND
	struct IconInfo ii;
	struct WBObject *obj;
	struct Gadget *gad;
	struct Image *image;
	UBYTE *ptrmem = NULL, *ptr, **ttptr;
	UWORD imagesize;
	LONG i;

	MP(("GetNextWBObject: enter, fh=%lx\n", fh));
	/* alloc mem for WBObject */
	obj = WBAllocWBObject(NULL);
	if (obj == NULL) {
		DP(("GNWBO: error, could not allocate WBObject\n"));
		goto err;
	}
	/* read MyDiskObject into WBObject */
	MP(("GNWBO: reading %ld bytes for MyDiskObject\n",
		sizeof(struct MyDiskObject)));
	i = READ_fh(fh, (char *) &obj->wo_DefaultTool, sizeof(struct MyDiskObject));
	if (i != sizeof(struct MyDiskObject)) {
		DP(("GNWBO: error, could not read MyDiskObject\n"));
		goto err;
	}
	obj->wo_SaveX = obj->wo_CurrentX; /* init SaveX */
	DP(("GNWBO: setting SaveX to %ld ($%lx) for %lx (%s)\n",
	    obj->wo_SaveX, obj->wo_SaveX, obj, obj->wo_Name));
	obj->wo_SaveY = obj->wo_CurrentY; /* init SaveY */
	MP(("GNWBO: wo_CurrentX = %ld ($%lx), wo_CurrentY=%ld ($%lx)\n",
		obj->wo_CurrentX, obj->wo_CurrentX,
		obj->wo_CurrentY, obj->wo_CurrentY));
	MP(("GNWBO: wo_SaveX = %ld ($%lx), wo_SaveY=%ld ($%lx)\n",
		obj->wo_SaveX, obj->wo_SaveX,
		obj->wo_SaveY, obj->wo_SaveY));
	/* read iconinfo */
	MP(("GNWBO: reading %ld bytes for IconInfo\n",
		sizeof(struct IconInfo)));
	i = READ_fh(fh, (char *) &ii, sizeof(struct IconInfo));
	if (i != sizeof(struct IconInfo)) {
		DP(("GNWBO: error, could not read IconInfo\n"));
		goto err;
	}
	MP(("ptrsize=%ld, image1size=%ld, image2size=%ld, numtt=%ld\n",
	ii.ii_ptrsize, ii.ii_image1size, ii.ii_image2size, ii.ii_numtt));

	if (obj->wo_DrawerData) {
		MP(("GNWBO: allocating %ld bytes for DrawerData\n",
			sizeof(struct NewDD)));
		obj->wo_DrawerData = WBFreeAlloc(&obj->wo_FreeList,
			sizeof(struct NewDD), MEMF_CLEAR);
		if (!obj->wo_DrawerData) {
			DP(("error, could not allocate struct NewDD\n"));
			goto err;
		}
		MP(("GNWBO: reading %ld bytes for DrawerData\n",
			DRAWERDATAFILESIZE));
		i = READ_fh(fh, (char *) obj->wo_DrawerData, DRAWERDATAFILESIZE);
		if (i != DRAWERDATAFILESIZE) {
			DP(("error, could not read DrawerData\n"));
			goto err;
		}
		MP(("GNWBO: dd_XY = %ld,%ld\n",
			obj->wo_DrawerData->dd_CurrentX,
			obj->wo_DrawerData->dd_CurrentY));
		obj->wo_DrawerData->dd_Object = obj;
		NewList(&obj->wo_DrawerData->dd_Children);
	}

	/* allocate ptr data */
	MP(("GNWBO: allocating %ld bytes for ptrmem\n", ii.ii_ptrsize));
	ptrmem = WBFreeAlloc(&obj->wo_FreeList,
		ii.ii_ptrsize, MEMF_CLEAR);
	if (ptrmem == NULL) {
		DP(("GNWBO: error, could not allocate ptr mem\n"));
		goto err;
	}
	/* read ptr data */
	MP(("GNWBO: reading %ld bytes for ptr data into %lx\n",
		ii.ii_ptrsize, ptrmem));
	i = READ_fh(fh, ptrmem, ii.ii_ptrsize);
	if (i != ii.ii_ptrsize) {
		DP(("GNWBO: error, could not read ptr data\n"));
		goto err;
	}

	ptr = ptrmem;

	gad = &obj->wo_IOGadget; /* get ptr to gadget structure for conv. */
	gad->GadgetRender = (APTR) ptr; /* point to Image structure */
	ptr += sizeof(struct Image); /* unselected image */
	if (ii.ii_image2size) { /* if there is a selected image */
		gad->SelectRender = (APTR) ptr; /* point to Image structure */
		ptr += sizeof(struct Image); /* selected image */
	}

	i = strlen(ptr) + 1; /* length of Name */
	obj->wo_Name = ptr;
	ptr += i;

#ifdef undef
	/* NOW HANDLED IN 'RENDERICON' IN ICONS.C */
	/* code removed from MyAllocWBObject */
	if (!growNameImage(obj)) {
		DP(("GNWBO: error, could not growNameImage\n"));
		goto err;
	}
#else
	SetIconNames(obj);
#endif undef

	if (obj->wo_DefaultTool) {
		i = strlen(ptr) + 1; /* length of DefaultTool */
		MP(("\tDefaultTool=%s, i=%ld\n", ptr, i));
		obj->wo_DefaultTool = ptr;
		ptr += i;
	}

	if (obj->wo_ToolTypes) {
		/* add 1 for the null ptr (ie. ii.ii_numtt + 1) and use MEMF_CLEAR */
		MP(("GNWBO: allocating %ld bytes for ToolType ptr array\n",
			(ii.ii_numtt + 1) * sizeof(char **)));
		ttptr = WBFreeAlloc(&obj->wo_FreeList,
			(ii.ii_numtt + 1) * sizeof(char **), MEMF_CLEAR);
		if (ttptr == NULL) {
			DP(("GNWBO: error, could not allocate tool type ptr array mem\n"));
			goto err;
		}
		obj->wo_ToolTypes = ttptr;
		do {
			*ttptr++ = ptr;
			i = strlen(ptr) + 1; /* length of tt */
			MP(("\tTT=%s, i=%ld\n", ptr, i));
			ptr += i;
		} while (--ii.ii_numtt);
	}

	if (obj->wo_ToolWindow) {
		i = strlen(ptr) + 1; /* length of ToolWindow */
		MP(("\tToolWindow=%s, i=%ld\n", ptr, i));
		obj->wo_ToolWindow = ptr;
		ptr += i;
	}

	/* allocate all (unselected and selected) image mem */
	image = (struct Image *)gad->GadgetRender;
	imagesize = ii.ii_image1size + ii.ii_image2size;
	MP(("GNWBO: allocating %ld bytes for image data\n", imagesize));
	image->ImageData = WBFreeAlloc(&obj->wo_FreeList, imagesize, MEMF_CHIP);
	if (image->ImageData == NULL) {
		DP(("error, could not allocate %ld bytes for image data\n",
			imagesize));
		goto err;
	}
	/* read all (unselected and selected) image data */
	MP(("GNWBO: reading %ld bytes for image data\n", imagesize));
	i = READ_fh(fh, (char *) image->ImageData, imagesize);
	if (i != imagesize) {
		DP(("GNWBO: error, could not read image data\n"));
err:
		if (obj) {
			DP(("GNWBO: error, calling FreeWBObject\n"));
			WBFreeWBObject(obj);
			obj = NULL;
		}
		goto end;
	}
	if (ii.ii_image2size) {
		/* point to selected image */
		((struct Image *)gad->SelectRender)->ImageData =
		(USHORT *)((ULONG)image->ImageData + ii.ii_image1size);
	}
	obj->wo_Gadget = obj->wo_IOGadget; /* copy Gadget structure */
	MP(("GNWBO: image1->ImageData=%06ld, image2->ImageData=%06ld\n",
	image->ImageData, ((struct Image *)gad->SelectRender)->ImageData));
end:
	MP(("GetNextWBObject: exit, obj=%lx (%s)\n", obj, obj->wo_Name));
	return(obj);
}

/*
	Write out an image structure to disk.
*/
WriteImageStruct(fh, im)
BPTR fh;
struct Image *im;
{
#ifdef LATTICE_ML_WORKAROUND
	struct WorkbenchBase *wb = getWbBase();/* Added for calls */
#endif LATTICE_ML_WORKAROUND
	MP(("WIS: writing %ld bytes for image struct\n",
		sizeof(struct Image)));
	return(WRITE_fh(fh, (char *) im, sizeof(struct Image)) == sizeof(struct Image));
}

/*
	Writes out the next WBObject to the .icon file.
	Similar to:
		PutWBObject in fileops.c of workbench.library
		PutIcon in entry.c of icon.library
*/
PutNextWBObject(obj, fh)
struct WBObject *obj;
BPTR fh;
{
#ifdef LATTICE_ML_WORKAROUND
	struct WorkbenchBase *wb = getWbBase();/* Added for calls */
#endif LATTICE_ML_WORKAROUND
	struct IconInfo ii;
	struct Image *image1, *image2;
	ULONG ptrsize;
	UWORD i1size, i2size = 0;
	UWORD namelen, dtlen, twlen, numtt = 0;
	int len, i, err;
	char **ttptr; /* used to run thru ToolTypes */
	APTR selectsave;

	DP(("PutNextWBObject: enter, obj=%0lx (%s), fh=%0lx\n",
		obj, obj->wo_Name, fh));
	if ((obj->wo_IOGadget.Flags & GADGHIGHBITS) == GADGBACKFILL) {
		/* this is a phony image, save ptr and set to null */
		selectsave = obj->wo_IOGadget.SelectRender;
		obj->wo_IOGadget.SelectRender = NULL;
	}

	/* calculate size of ptr and image data */

	image1 = (struct Image *)obj->wo_IOGadget.GadgetRender;
	i1size = RASSIZE(image1->Width, image1->Height) * image1->Depth;
	ptrsize = sizeof(struct Image); /* unselected image */
	if (image2 = (struct Image *)obj->wo_IOGadget.SelectRender) {
	    i2size = RASSIZE(image2->Width, image2->Height) * image2->Depth;
	    ptrsize += sizeof(struct Image); /* selected image */
	}
	namelen = strlen(obj->wo_Name) + 1;
	ptrsize += namelen;
	if (obj->wo_DefaultTool) {
		dtlen = strlen(obj->wo_DefaultTool) + 1;
		ptrsize += dtlen;
	}
	if (obj->wo_ToolTypes) {
		ttptr = obj->wo_ToolTypes;
		do {
			numtt++;
			ptrsize += strlen(*ttptr) + 1;
		} while (*++ttptr);
	}
	if (obj->wo_ToolWindow) {
		twlen = strlen(obj->wo_ToolWindow) + 1;
		ptrsize += twlen;
	}
	/* compose iconinfo struct */
	ii.ii_ptrsize = ptrsize;
	ii.ii_image1size = i1size;
	ii.ii_image2size = i2size;
	ii.ii_numtt = numtt;

	/* write out data to file */
	MP(("PNWBO: writing %ld bytes for MyDiskObject\n",
		sizeof(struct MyDiskObject)));
	len = WRITE_fh(fh, (char *) &obj->wo_DefaultTool, sizeof(struct MyDiskObject));
	if (len != sizeof(struct MyDiskObject)) {
		goto error;
	}
MP(("Type=%lx, DT=%lx, TT=%lx, CX=%lx, CY=%lx, DD=%lx, TW=%lx, SS=%lx\n",
obj->wo_Type, obj->wo_DefaultTool, obj->wo_ToolTypes,
obj->wo_CurrentX, obj->wo_CurrentY, obj->wo_DrawerData,
obj->wo_ToolWindow, obj->wo_StackSize));
	MP(("PNWBO: writing %ld bytes for IconInfo\n",
		sizeof(struct IconInfo)));
	len = WRITE_fh(fh, (char *) &ii, sizeof(struct IconInfo));
	if (len != sizeof(struct IconInfo)) {
		goto error;
	}
	if (obj->wo_DrawerData) {
		MP(("PNWBO: writing %ld bytes for DrawerData\n",
			DRAWERDATAFILESIZE));
		len = WRITE_fh(fh, (char *) obj->wo_DrawerData, DRAWERDATAFILESIZE);
		if (len != DRAWERDATAFILESIZE) {
			goto error;
		}
		MP(("PNWBO: dd_XY = %ld,%ld\n",
			obj->wo_DrawerData->dd_CurrentX,
			obj->wo_DrawerData->dd_CurrentY));
	}
	if (!WriteImageStruct(fh, image1)) {
		goto error;
	}
	if (image2) {
		if (!WriteImageStruct(fh, image2)) {
			goto error;
		}
	}
	MP(("PNWBO: writing %ld bytes for Name\n", namelen));
	len = WRITE_fh(fh, obj->wo_Name, namelen);
	if (len != namelen) {
		goto error;
	}
	if (obj->wo_DefaultTool) {
	MP(("PNWBO: writing %ld bytes for DefaultTool\n", dtlen));
		len = WRITE_fh(fh, obj->wo_DefaultTool, dtlen);
		if (len != dtlen) {
			goto error;
		}
	}
	if (obj->wo_ToolTypes) {
		ttptr = obj->wo_ToolTypes;
		do {
			i = strlen(*ttptr) + 1;
			MP(("PNWBO: writing %ld bytes for ToolType\n", i));
			len = WRITE_fh(fh, *ttptr++, i);
			if (len != i) {
				goto error;
			}
		} while (--numtt);
	}
	if (obj->wo_ToolWindow) {
		MP(("PNWBO: writing %ld bytes for ToolWindow\n", twlen));
		len = WRITE_fh(fh, obj->wo_ToolWindow, twlen);
		if (len != twlen) {
			goto error;
		}
	}
	MP(("PNWBO: writing %ld bytes for image1 data\n", i1size));
	if (WRITE_fh(fh, (char *) image1->ImageData, i1size) != i1size) {
		goto error;
	}
	if (image2) {
		MP(("PNWBO: writing %ld bytes for image2 data\n", i2size));
		if (WRITE_fh(fh, (char *) image2->ImageData, i2size) != i2size) {
error:
			err = 1; /* something went wrong */
			goto exit;
		}
	}
	err = 0; /* all ok */
exit:
	if ((obj->wo_IOGadget.Flags & GADGHIGHBITS) == GADGBACKFILL) {
		/* this is a phony image, restore ptr */
		obj->wo_IOGadget.SelectRender = selectsave;
	}
	MP(("PutNextWBObject: err=%ld, exit\n", err));
	return(err);
}

#endif DOTICON
@
