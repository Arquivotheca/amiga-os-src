head     38.2;
branch   ;
access   ;
symbols  V40_5:38.2 V40_4:38.2 V40_3:38.2 V40_2:38.2 V40_1:38.2 V39_56:38.2 V39_54:38.2 V39_52:38.2 V39_51:38.2 V39_50:38.2 V39_48:38.2 V39_46:38.2 V39_45:38.2 V39_44:38.2 V39_43:38.2 V39_42:38.2 V39_41:38.2 V39_40:38.2 V39_39:38.2 V39_38:38.2 V39_37:38.2 V39_36:38.2 V39_35:38.2 V39_34:38.2 V39_33:38.2 V39_32:38.2 V39_30:38.2 V39_29:38.2 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


38.2
date     92.04.14.12.16.38;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.35.43;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


38.2
log
@all gone...  No more stuff.
@
text
@/*
 * $Id: global.c,v 38.1 91/06/24 11:35:43 mks Exp Locker: mks $
 *
 * $Log:	global.c,v $
 * Revision 38.1  91/06/24  11:35:43  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
a8 61

#include "proto.h"
#include "string.h"
#include "exec/types.h"
#include "exec/memory.h"
#include "graphics/text.h"
#include "graphics/rastport.h"
#include "workbench.h"
#include "workbenchbase.h"
#include "global.h"
#include "quotes.h"
#include "support.h"

static USHORT WaitPointer[] = {
    0x0000, 0x0000,	/* vert. and horiz. start posn. */
	0x0400,	0x07C0,
	0x0000,	0x07C0,
	0x0100,	0x0380,
	0x0000,	0x07E0,
	0x07C0,	0x1FF8,
	0x1FF0,	0x3FEC,
	0x3FF8,	0x7FDE,
	0x3FF8,	0x7FBE,
	0x7FFC,	0xFF7F,
	0x7EFC,	0xFFFF,
	0x7FFC,	0xFFFF,
	0x3FF8,	0x7FFE,
	0x3FF8,	0x7FFE,
	0x1FF0,	0x3FFC,
	0x07C0,	0x1FF8,
	0x0000,	0x07E0,
    0x0000, 0x0000,	/* reserved, must be NULL */
};

USHORT *initPointers()
{
struct WorkbenchBase *wb = getWbBase();
USHORT *p;

    if (p = ALLOCVEC(sizeof(WaitPointer),MEMF_CHIP|MEMF_PUBLIC))
    {
	memcpy(p,WaitPointer,sizeof(WaitPointer));
    }
    wb->wb_WaitPointer = p;
    return(p);
}

void uninitPointers()
{
    struct WorkbenchBase *wb = getWbBase();

    MP(("uninitPointers: enter\n"));
    MP(("\tfreeing %ld bytes @@$%lx\n",sizeof(WaitPointer), wb->wb_WaitPointer));
    FREEVEC(wb->wb_WaitPointer);
    MP(("uninitPointers: exit\n"));
}

BPTR LockRamDisk(void)
{
	return(LOCK("RAM:",SHARED_LOCK));
}
@
