head     39.4;
branch   ;
access   ;
symbols  V40_5:39.4 V40_4:39.4 V40_3:39.4 V40_2:39.4 V40_1:39.3 V39_56:39.2 V39_54:39.1 V39_52:39.1 V39_51:39.1 V39_50:39.1 V39_48:39.1 V39_46:39.1 V39_45:39.1 V39_44:39.1 V39_43:39.1 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:38.8 V39_33:38.8 V39_32:38.8 V39_30:38.8 V39_29:38.8 V39_27:38.8 V39_26:38.8 V39_25:38.8 V39_23:38.8 V39_22:38.8 V39_21:38.8 V39_20:38.7 V39_18:38.6 V39_17:38.6 V39_16:38.5 V39_15:38.5 V39_14:38.5 V39_12:38.5 V39_10:38.5 V39_9:38.5 V39_8:38.5 V39_7:38.4 V39_6:38.4 V39_5:38.3 V39_4:38.3 V39_3:38.2;
locks    ; strict;
comment  @ * @;


39.4
date     93.02.19.16.39.16;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     93.02.10.12.03.49;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     93.01.21.14.48.20;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.06.11.15.48.23;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     92.04.16.10.20.05;  author mks;  state Exp;
branches ;
next     38.7;

38.7
date     92.04.14.13.18.45;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     92.03.19.09.20.50;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     92.01.28.11.19.34;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     92.01.07.13.56.40;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.13.10.57.25;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.12.18.40.31;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.37.04;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


39.4
log
@Added code to build the physical device list
@
text
@/*
 * $Id: main.c,v 39.3 93/02/10 12:03:49 mks Exp Locker: mks $
 *
 * $Log:	main.c,v $
 * Revision 39.3  93/02/10  12:03:49  mks
 * Cleaned up backdrop display window and some code savings
 *
 * Revision 39.2  93/01/21  14:48:20  mks
 * Cleaned up the disk init code...  (Removed much redundant code)
 *
 * Revision 39.1  92/06/11  15:48:23  mks
 * Now use FORBID and PERMIT macros rathern than calling Forbid() and Permit()
 *
 * Revision 38.8  92/04/16  10:20:05  mks
 * Now uses the new copyright strings method
 *
 * Revision 38.7  92/04/14  13:18:45  mks
 * Removed initialization of the Wait pointer
 *
 * Revision 38.6  92/03/19  09:20:50  mks
 * Changed shutdown order...  (Closes windows first)
 *
 * Revision 38.5  92/01/28  11:19:34  mks
 * Made sure that the draw pots are correct at open time...
 *
 * Revision 38.4  92/01/07  13:56:40  mks
 * Changed the init/shutdown to deal with the new prefs features
 *
 * Revision 38.3  91/11/13  10:57:25  mks
 * Removed the initfunc() from C and made a simple assembly version.
 *
 * Revision 38.2  91/11/12  18:40:31  mks
 * Improved wbmain() and a few other little changes
 *
 * Revision 38.1  91/06/24  11:37:04  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

#include "proto.h"
#include "string.h"
#include "exec/types.h"
#include "exec/alerts.h"
#include "exec/tasks.h"
#include "exec/memory.h"
#include "dos/dosextens.h"
#include "dos/dostags.h"
#include "wbstart.h"
#include "workbench.h"
#include "workbenchbase.h"
#include "global.h"
#include "support.h"

extern void *AbsExecBase;

extern void *Max_Copy_Mem;

/*
 * Free a path list as passed by LoadWB!!!
 */
void FreeMyPath(ULONG tmp1)
{
ULONG *tmp;

    /*
     * Convert into real pointer from BPTR and check it for valid...
     */
    while (tmp = (ULONG *)(tmp1 << 2))
    {
        UNLOCK(tmp[1]);	/* UNLOCK checks for NULL */

        /* Free the memory and go to the next... */
        tmp1=tmp[0];
        FreeMem(tmp,8);	/* This *MUST* be a FreeMem */
    }
}

/*
 * Another tick has happened...  Check that path situation...
 */
void PathTick(void)
{
struct WorkbenchBase *wb = getWbBase();
ULONG old;

    FORBID;
    if (old=wb->wb_OldPath)
    {
        if (wb->wb_OldPathTick)
	{
	    wb->wb_OldPathTick--;
	    old=NULL;
	}
	else wb->wb_OldPath=NULL;
    }
    PERMIT;

    FreeMyPath(old);
}

/*
	Quit workbench.  Close all windows, free all resources,
	free all memory, close all libraries, etc.
*/
void Quit()
{
    MP(("Quit: calling wbCleanup\n"));
    MasterSearch(wbCleanup); /* close all windows */

    MP(("Quit: calling uninitDisks\n"));
    uninitDisks(); /* free all disks */

    MP(("Quit: calling FreeWBMenus\n"));
    FreeWBMenus(); /* get rid of menus */
    MP(("Quit: calling WBFreeWBObject\n"));
    MasterSearch(WBFreeWBObject); /* free all objects */

    MP(("Quit: calling uninitTimer\n"));
    uninitTimer(); /* get rid of timer */
    MP(("Quit: calling uninitWbGels\n"));
    uninitWbGels(); /* get rid of gels */
    MP(("Quit: calling UnInitScreenAndWindows\n"));
    UnInitScreenAndWindows();
    MP(("Quit: calling termText\n"));
    termText(); /* terminate text */
    MP(("Quit: calling FORBID\n"));
    FORBID;
    MP(("Quit: calling AlohaWorkbench\n"));
    AlohaWorkbench(NULL); /* say goodbye to Intuition */
    MP(("Quit: calling PERMIT\n"));
    PERMIT;
    MP(("Quit: calling ioloopuninit\n"));
    ioloopuninit(); /* get rid of io stuff */
#ifdef ALLOCDEBUG
    FreeAllocList();
#endif ALLOCDEBUG
}

/*
 * Note that the only way into here is via workbench and we know that
 * the library had to be open when we were called...
 */
long wbmain(void)
{
struct WorkbenchBase *wb = getWbBase();

    MP(("wbmain: workbenchbase=%lx, arg=%lx\n",wb, wb->wb_Argument));

	/*
	 * Set up the maximum amount of memory that copy can use...
	 */
    wb->wb_ByteCount=2097152;

	/* Set up all of the lists... */
    {
    struct List *list;

	for (list=&(wb->wb_MasterList);list<=&(wb->wb_NonInfoList);list++) NewList(list);
    }

    MP(("main: calling ReadWBPrefs...\n"));
    ReadWBPrefs(); /* this is the initialization call */

    MP(("main: calling InitPattern...\n"));
    if (InitPattern())
    {
        MP(("main: calling InitScreenAndWindows...\n"));
        if (InitScreenAndWindows())
        {
            MP(("main: calling ioloopinit...\n"));
            ioloopinit();

            MP(("main: calling initText...\n"));
            initText();

            MP(("main: calling CreateWBMenus...\n"));
            if (CreateWBMenus())
            {
                MP(("main: calling InitPotion...\n"));
                if (InitPotion())
                {
                    MP(("main: calling BeginDiskIO...\n"));
                    BeginDiskIO();

                    MP(("main: calling initWbGels...\n"));
                    if (initWbGels())
                    {
                        MP(("main: calling initTimer...\n"));
                        if (initTimer())
                        {
                            /* Build list of physical devices */
                            VolumeListSearch(FindDevices,NULL,NULL,NULL,NULL);

                            MP(("main: calling AlohaWorkbench...\n"));
                            AlohaWorkbench((long)&wb->wb_IntuiPort);

                            /* flag that workbench is now up and running */
                            wb->wb_WorkbenchStarted=1;

                            MP(("main: calling StartupDrawer...\n"));
                            StartupDrawer();
                            MP(("main: calling EndDiskIO...\n"));
                            EndDiskIO();

                            /*
                             * Display the Copyright message...
                             */
                            UpdateMemory();
                            MessageTitle(CopyrightFormat,wb->wb_Copyright1,wb->wb_Copyright2,wb->wb_Copyright3);

                            wb->wb_Argument &= ~WBARGF_DELAYON;
                            if (wb->wb_Argument & WBARGF_CLEANUP) Cleanup(wb->wb_RootObject);
                            else RefreshDrawer(wb->wb_RootObject);

                            MinMaxDrawer(wb->wb_RootObject);

                            MP(("main: calling ioloop...\n"));
                            ioloop();

                            MP(("main: calling BeginDiskIO...\n"));
                            BeginDiskIO();
                        }
                    }
                    MP(("main: calling EndDiskIO...\n"));
                    EndDiskIO();
                }
            }
        }
    }

    /*
     * In case we had to bail and someone is still waiting...
     */
    wb->wb_Argument &= ~WBARGF_DELAYON;

    /* Set flag that we are going away... */
    wb->wb_Quit=TRUE;

/* PATH kludge... Begin ****************************************************/
    /*
     * Blow away the possible old path...
     */
    wb->wb_OldPathTick=0;
    PathTick();

    /*
     * mks:  We are no freeing the old lock list if it is there...
     * This is major kludge, but it must be done this way...  :-(
     */
    {
    ULONG *tmp;

	tmp=&(((struct CommandLineInterface *)((((struct Process *)(wb->wb_Task))->pr_CLI)<<2))->cli_CommandDir);

        MP(("main: kludge: freeing invalid path list...\n"));
	FreeMyPath(*tmp);

        /*
         * mks:  We are going to do something nasty now...
         * We are going to blow away the lock list from the CLI
         */
        MP(("main: kludge: clearing the CLI CommandDir...\n"));
        *tmp=NULL;

    }
/* PATH kludge... End ******************************************************/


    Quit();

    /*
     * Make sure that the expunge does not blow away the "last bit of code"
     * that has to run:  Namely, a moveq.l #0,d0 and rts
     */
    FORBID;
    wb->wb_Task=NULL;	/* We be gone now! */

    CLOSELIBRARY((struct Library *)wb);

    MP(("main: calling RemLibrary...\n"));
    RemLibrary(wb); /* force an expunge */

    MP(("main: falling off the end...\n"));
    return(NULL);
}

/*
 * The stacksize given to workbench...
 */
#define STACKSIZE	6000

/*
******i workbench.library/StartWorkbench ************************************
*
*   NAME
*	StartWorkbench - start workbench from scratch.
*
*   SYNOPSIS
*	error = StartWorkbench(arg, CmdPath)
*         D0                    D0    D1
*	ULONG StartWorkbench(ULONG, ULONG);
*
*   FUNCTION
*	Attempt to start workbench from scratch.  This routine can only
*	be called once and gets workbench up and running.
*
*   INPUTS
*	arg - arguement to workbench.
*	CmdPath - command path for workbench.
*
*   RESULTS
*	error - NULL if error, non-null if something worked...
*
*   SEE ALSO
*
*   BUGS
*	The command path is not a normal command path allocated and/or
*	freed by DOS.  It is allocated in its own unique way by LoadWB
*	and is freed by Workbench on exit.  This is due to compatibility
*	reasons that have no clear solution at this moment.  Hopefully
*	something can be done about this soon.  If this command returns
*	FAIL then the path given will need to be cleaned up by the caller.
*
******************************************************************************
*/
void WbSegment(void);

ULONG StartWorkbench(arg, CmdPath)
ULONG arg;
ULONG CmdPath;
{
struct WorkbenchBase *wb = getWbBase();
ULONG result=FALSE;
LONG CreateNewProcArray[] = {
	NP_Path, 0,
	NP_Entry, (LONG)(&WbSegment),
	NP_StackSize, STACKSIZE,	/* Stack size */
	NP_Priority, 1,			/* Workbench priority */
	NP_Name, (LONG)SystemWorkbenchName,
	NP_Cli, TRUE,			/* We are a CLI */
	NP_CommandName, (LONG)SystemWorkbenchName,
	NP_ConsoleTask, NULL,		/* No console task */
	NP_WindowPtr, NULL,		/* No window pointer */
	NP_CurrentDir, NULL,		/* No current dir */
	TAG_DONE, NULL
    };

    /* don't let us start twice */
    MP(("StartWorkbench: FORBID!\n"));
    FORBID;

    wb->wb_KPrintfOK	= (arg & WBARGF_DEBUGON);

    MP(("\nStartWorkbench: enter\n"));
    MP(("StartWorkbench: arg=%lx, CmdPath=%lx, wb=%lx\n",arg, CmdPath, wb));

    if (!wb->wb_Task)
    {
	wb->wb_Argument = arg;

        /* spin off the workbench.library process via CreateNewProc */

        CreateNewProcArray[1] = CmdPath;

        if (wb->wb_Task=(struct Process *)CREATENEWPROC((struct TagItem *)CreateNewProcArray))
        {
            MP(("wb->wb_Task=%lx\n", wb->wb_Task));
            result=TRUE;

            while (wb->wb_Argument & WBARGF_DELAYON) Delay(5);
        }
    }
    else
    {
	MP(( "swb: wbtask already exists (%lx)\n", wb->wb_Task ));
	/*
	 * Check if we should install a new path...
	 */
	if (arg & WBARGF_NEWPATH)
	{
        ULONG *tmp;

	    MP(("swb: Installing new path\n"));

	    tmp=&(((struct CommandLineInterface *)((((struct Process *)(wb->wb_Task))->pr_CLI)<<2))->cli_CommandDir);

	    /*
	     * Free the old path and install the current path into the old path
	     */
	    while (wb->wb_OldPath)
	    {
		Delay(50L);	/* Don't tick down the old path too fast! */
		PathTick();
	    }
	    wb->wb_OldPathTick=2;
	    wb->wb_OldPath=*tmp;
	    *tmp=CmdPath;

	    /*
	     * Return TRUE (WBARGF_NEWPATH) such that LoadWB will not
	     * free the path again...
	     */
	    result|=WBARGF_NEWPATH;
	}
    }

    MP(("StartWorkbench: PERMIT!, exit=%ld\n",result));
    PERMIT;
    return(result);
}
@


39.3
log
@Cleaned up backdrop display window and some code savings
@
text
@d2 1
a2 1
 * $Id: main.c,v 39.2 93/01/21 14:48:20 mks Exp Locker: mks $
d5 3
d191 3
@


39.2
log
@Cleaned up the disk init code...  (Removed much redundant code)
@
text
@d2 1
a2 1
 * $Id: main.c,v 39.1 92/06/11 15:48:23 mks Exp Locker: mks $
d5 3
d168 7
a174 1
            if (ioloopinit())
d176 2
a177 2
                MP(("main: calling initText...\n"));
                if (initText())
d179 5
a183 2
                    MP(("main: calling CreateWBMenus...\n"));
                    if (CreateWBMenus())
d185 2
a186 2
                        MP(("main: calling InitPotion...\n"));
                        if (InitPotion())
d188 26
a215 35
                            MP(("main: calling initWbGels...\n"));
                            if (initWbGels())
                            {
                                MP(("main: calling initTimer...\n"));
                                if (initTimer())
                                {
                                    MP(("main: calling AlohaWorkbench...\n"));
                                    AlohaWorkbench((long)&wb->wb_IntuiPort);

                                    /* flag that workbench is now up and running */
                                    wb->wb_WorkbenchStarted=1;

                                    MP(("main: calling StartupDrawer...\n"));
                                    StartupDrawer();
                                    MP(("main: calling EndDiskIO...\n"));
                                    EndDiskIO();

                                    /*
                                     * Display the Copyright message...
                                     */
                                    UpdateMemory();
                                    MessageTitle(CopyrightFormat,wb->wb_Copyright1,wb->wb_Copyright2,wb->wb_Copyright3);

                                    wb->wb_Argument &= ~WBARGF_DELAYON;
                                    if (wb->wb_Argument & WBARGF_CLEANUP) Cleanup(wb->wb_RootObject);
                                    MinMaxDrawer(wb->wb_RootObject);

                                    MP(("main: calling ioloop...\n"));
                                    ioloop();
                                    MP(("main: calling BeginDiskIO...\n"));
                                    BeginDiskIO();
                                }
                            }
                            MP(("main: calling EndDiskIO...\n"));
                            EndDiskIO();
d218 2
d235 6
a259 6

    /*
     * Blow away the possible old path...
     */
    wb->wb_OldPathTick=0;
    PathTick();
@


39.1
log
@Now use FORBID and PERMIT macros rathern than calling Forbid() and Permit()
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.8 92/04/16 10:20:05 mks Exp Locker: mks $
d5 3
d184 25
a208 29
                                    MP(("main: calling initDisks...\n"));
                                    if (initDisks())
                                    {
                                        MP(("main: calling AlohaWorkbench...\n"));
                                        AlohaWorkbench((long)&wb->wb_IntuiPort);

                                        /* flag that workbench is now up and running */
                                        wb->wb_WorkbenchStarted=1;

                                        MP(("main: calling StartupDrawer...\n"));
                                        StartupDrawer();
                                        MP(("main: calling EndDiskIO...\n"));
                                        EndDiskIO();

                                        /*
                                         * Display the Copyright message...
                                         */
                                        UpdateMemory();
                                        MessageTitle(CopyrightFormat,wb->wb_Copyright1,wb->wb_Copyright2,wb->wb_Copyright3);

                                        wb->wb_Argument &= ~WBARGF_DELAYON;
                                        if (wb->wb_Argument & WBARGF_CLEANUP) Cleanup(wb->wb_RootObject);
                                        MinMaxDrawer(wb->wb_RootObject);

                                        MP(("main: calling ioloop...\n"));
                                        ioloop();
                                        MP(("main: calling BeginDiskIO...\n"));
                                        BeginDiskIO();
                                    }
@


38.8
log
@Now uses the new copyright strings method
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.7 92/04/14 13:18:45 mks Exp Locker: mks $
d5 3
d77 1
a77 1
    Forbid();
d87 1
a87 1
    Permit();
d117 2
a118 2
    MP(("Quit: calling Forbid\n"));
    Forbid();
d121 2
a122 2
    MP(("Quit: calling Permit\n"));
    Permit();
d265 1
a265 1
    Forbid();
d340 1
a340 1
    Forbid();
d398 1
a398 1
    Permit();
@


38.7
log
@Removed initialization of the Wait pointer
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.6 92/03/19 09:20:50 mks Exp Locker: mks $
d5 3
d167 7
a173 2
                            MP(("main: calling InitPotion...\n"));
                            if (InitPotion())
d175 2
a176 4
                                MP(("main: calling BeginDiskIO...\n"));
                                BeginDiskIO();
                                MP(("main: calling initWbGels...\n"));
                                if (initWbGels())
d178 2
a179 2
                                    MP(("main: calling initTimer...\n"));
                                    if (initTimer())
d181 25
a205 29
                                        MP(("main: calling initDisks...\n"));
                                        if (initDisks())
                                        {
                                            MP(("main: calling AlohaWorkbench...\n"));
                                            AlohaWorkbench((long)&wb->wb_IntuiPort);

                                            /* flag that workbench is now up and running */
                                            wb->wb_WorkbenchStarted=1;

                                            MP(("main: calling StartupDrawer...\n"));
                                            StartupDrawer();
                                            MP(("main: calling EndDiskIO...\n"));
                                            EndDiskIO();

                                            /*
                                             * Display the Copyright message...
                                             */
                                            UpdateMemory();
                                            MessageTitle(CopyrightFormat,Copyright,Copyright2,Copyright3);

                                            wb->wb_Argument &= ~WBARGF_DELAYON;
                                            if (wb->wb_Argument & WBARGF_CLEANUP) Cleanup(wb->wb_RootObject);
					    MinMaxDrawer(wb->wb_RootObject);

                                            MP(("main: calling ioloop...\n"));
                                            ioloop();
                                            MP(("main: calling BeginDiskIO...\n"));
                                            BeginDiskIO();
                                        }
a207 2
                                MP(("main: calling EndDiskIO...\n"));
                                EndDiskIO();
d209 3
@


38.6
log
@Changed shutdown order...  (Closes windows first)
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.5 92/01/28 11:19:34 mks Exp Locker: mks $
d5 3
a108 2
    MP(("Quit: calling uninitPointers\n"));
    uninitPointers(); /* get rid of pointer */
a163 3
                        MP(("main: calling initPointers...\n"));
                        if (initPointers())
                        {
a208 1
                        }
@


38.5
log
@Made sure that the draw pots are correct at open time...
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.4 92/01/07 13:56:40 mks Exp Locker: mks $
d5 3
d89 3
a94 2
    MP(("Quit: calling wbCleanup\n"));
    MasterSearch(wbCleanup); /* close all windows */
@


38.4
log
@Changed the init/shutdown to deal with the new prefs features
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.3 91/11/13 10:57:25 mks Exp Locker: mks $
d5 3
d195 1
@


38.3
log
@Removed the initfunc() from C and made a simple assembly version.
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.2 91/11/12 18:40:31 mks Exp Locker: mks $
d5 3
a102 2
    MP(("Quit: calling uninitPattern\n"));
    uninitPattern(); /* get rid of pattern stuff */
a110 2
    MP(("Quit: calling CloseLibraries\n"));
    CloseLibraries(); /* close all libraries */
d120 1
a120 1
long wbmain(ULONG badlib)
d129 1
a129 1
    wb->wb_ByteCount=(ULONG)(&Max_Copy_Mem);
d135 1
a135 1
	for (list=&(wb->wb_MasterList);list<&(wb->wb_LockList);NewList(list++));
d138 2
a139 3
#ifdef LOCKDEBUG
    NewList(&wb->wb_LockList);
#endif LOCKDEBUG
d141 2
a142 1
    if (!badlib)
a143 3
        MP(("main: calling ReadWBPrefs...\n"));
        ReadWBPrefs(); /* this is the initialization call */

d147 2
a148 2
            MP(("main: calling InitPattern...\n"));
            if (InitPattern())
d150 2
a151 2
                MP(("main: calling ioloopinit...\n"));
                if (ioloopinit())
d153 2
a154 2
                    MP(("main: calling initText...\n"));
                    if (initText())
d156 2
a157 2
                        MP(("main: calling CreateWBMenus...\n"));
                        if (CreateWBMenus())
d159 2
a160 2
                            MP(("main: calling initPointers...\n"));
                            if (initPointers())
d162 4
a165 2
                                MP(("main: calling InitPotion...\n"));
                                if (InitPotion())
d167 2
a168 4
                                    MP(("main: calling BeginDiskIO...\n"));
                                    BeginDiskIO();
                                    MP(("main: calling initWbGels...\n"));
                                    if (initWbGels())
d170 2
a171 2
                                        MP(("main: calling initTimer...\n"));
                                        if (initTimer())
d173 24
a196 28
                                            MP(("main: calling initDisks...\n"));
                                            if (initDisks())
                                            {
                                                MP(("main: calling AlohaWorkbench...\n"));
                                                AlohaWorkbench((long)&wb->wb_IntuiPort);

                                                /* flag that workbench is now up and running */
                                                wb->wb_WorkbenchStarted=1;

                                                MP(("main: calling StartupDrawer...\n"));
                                                StartupDrawer();
                                                MP(("main: calling EndDiskIO...\n"));
                                                EndDiskIO();

                                                /*
                                                 * Display the Copyright message...
                                                 */
                                                UpdateMemory();
                                                MessageTitle(CopyrightFormat,Copyright,Copyright2,Copyright3);

                                                wb->wb_Argument &= ~WBARGF_DELAYON;
                                                if (wb->wb_Argument & WBARGF_CLEANUP) Cleanup(wb->wb_RootObject);

                                                MP(("main: calling ioloop...\n"));
                                                ioloop();
                                                MP(("main: calling BeginDiskIO...\n"));
                                                BeginDiskIO();
                                            }
a198 2
                                    MP(("main: calling EndDiskIO...\n"));
                                    EndDiskIO();
d200 2
a209 3
    /* Check if we had to bail out... */
    if (badlib) Alert(AN_Workbench | AG_OpenLib | badlib);

a326 2
    wb->wb_SysBase = AbsExecBase;

d340 1
a340 4
        /* open the dos library */
        if (wb->wb_DOSBase=OPENLIBRARY("dos.library", 36))
        {
            /* spin off the workbench.library process via CreateNewProc */
d342 1
a342 1
            CreateNewProcArray[1] = CmdPath;
d344 4
a347 11
            if (wb->wb_Task=(struct Process *)CREATENEWPROC((struct TagItem *)CreateNewProcArray))
            {
                MP(("wb->wb_Task=%lx\n", wb->wb_Task));
                result=TRUE;

		while (wb->wb_Argument & WBARGF_DELAYON) Delay(5);
            }
            else
            {
                MP(("StartWorkbench: PERMIT!\n"));
                DP(("swb: cannot create process '%s' Error %ld\n",SystemWorkbenchName,IOERR()));
d349 1
a349 11
		/*
		 * Could not start workbench so we close DosBase...
		 */
                CLOSELIBRARY(wb->wb_DOSBase);
                wb->wb_DOSBase=NULL;
            }
        }
        else
        {
            MP(("StartWorkbench: Permit!\n"));
            MP(("swb: cannot open dos.library\n"));
@


38.2
log
@Improved wbmain() and a few other little changes
@
text
@d2 1
a2 1
 * $Id: main.c,v 38.1 91/06/24 11:37:04 mks Exp Locker: mks $
d5 3
a26 2
extern char subsysName[];
extern char VERSTRING[];
a27 1
extern UWORD VERSION, REVISION;
a274 12
}

struct WorkbenchBase *InitFunc(wb, seglist)
struct WorkbenchBase *wb;
APTR seglist;
{
    wb->wb_Library.lib_Node.ln_Name = WorkbenchName;
    wb->wb_Library.lib_Version = VERSION;
    wb->wb_Library.lib_Revision = REVISION;
    wb->wb_Library.lib_IdString = (APTR) VERSTRING;
    wb->wb_SegList = seglist;
    return(wb);
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
a73 31
void CloseLibraries() /* close all opened libraries */
{
struct WorkbenchBase *wb = getWbBase();
register struct Library **lib;

    /* As of V36 we don't need to check these... */

    /*
     * A dirty little optimization:  We just loop through the
     * pointers and zap them...
     */
    for (lib=&(wb->wb_GfxBase);lib < &(wb->wb_TimerBase);lib++)
    {
        CLOSELIBRARY(*lib);
        *lib=NULL;
    }

/*
    CLOSELIBRARY(wb->wb_GfxBase);
    CLOSELIBRARY(wb->wb_IntuitionBase);
    CLOSELIBRARY(wb->wb_IconBase);
    CLOSELIBRARY(wb->wb_DOSBase);
    CLOSELIBRARY(wb->wb_LayersBase);
    CLOSELIBRARY(wb->wb_DiskfontBase);
    CLOSELIBRARY(wb->wb_GadToolsBase);
    CLOSELIBRARY(wb->wb_UtilityBase);
 */

    MP(("CloseLibraries: exit\n"));
}

d80 3
a86 2
    MP(("Quit: calling uninitDisks\n"));
    uninitDisks(); /* free all disks */
d89 1
a119 2
 * Thus, the FakeOpenLibrary() call is just to get a pointer to
 * WorkbenchBase...
d121 1
a121 1
long wbmain(void)
d123 1
a123 2
struct WorkbenchBase *wb=(struct WorkbenchBase *)FakeOpenLibrary(WorkbenchName,0);
ULONG badlib=NULL;
a124 2
    setWbBase(wb);

d143 1
a143 7
    if (!(wb->wb_GfxBase=OPENLIBRARY("graphics.library",36))) badlib=AO_GraphicsLib;
    else if (!(wb->wb_LayersBase=OPENLIBRARY("layers.library",36))) badlib=AO_LayersLib;
    else if (!(wb->wb_IntuitionBase=OPENLIBRARY("intuition.library",36))) badlib=AO_Intuition;
    else if (!(wb->wb_GadToolsBase=OPENLIBRARY("gadtools.library",36))) badlib=AO_GadTools;
    else if (!(wb->wb_IconBase=OPENLIBRARY("icon.library",36))) badlib=AO_IconLib;
    else if (!(wb->wb_UtilityBase=OPENLIBRARY("utility.library",36))) badlib=AO_UtilityLib;
    else
a144 2
	wb->wb_DiskfontBase=OPENLIBRARY("diskfont.library",0);

d328 2
d338 1
a338 1
	NP_Entry, (LONG)(&wbmain),
@
