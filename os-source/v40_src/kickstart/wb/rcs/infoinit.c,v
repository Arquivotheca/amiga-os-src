head     39.4;
branch   ;
access   ;
symbols  V40_5:39.4 V40_4:39.4 V40_3:39.4 V40_2:39.4 V40_1:39.4 V39_56:39.4 V39_54:39.3 V39_52:39.3 V39_51:39.3 V39_50:39.2 V39_48:39.2 V39_46:39.2 V39_45:39.1 V39_44:39.1 V39_43:39.1 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:39.1 V39_33:39.1 V39_32:39.1 V39_30:39.1 V39_29:39.1 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


39.4
date     93.02.03.18.42.14;  author mks;  state Exp;
branches ;
next     39.3;

39.3
date     92.11.12.08.10.29;  author mks;  state Exp;
branches ;
next     39.2;

39.2
date     92.08.05.18.29.01;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.31.01.52.31;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.24.16.19.27;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.36.19;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


39.4
log
@No longer part of Workbench
@
text
@No longer a real file...
@


39.3
log
@Made the save/cancel gadgets the "right" size
@
text
@d1 1
a1 372
/*
 * $Id: infoinit.c,v 39.2 92/08/05 18:29:01 mks Exp Locker: mks $
 *
 * $Log:	infoinit.c,v $
 * Revision 39.2  92/08/05  18:29:01  mks
 * Now adjusts the centered title to be off-center when it is very long.
 *
 * Revision 39.1  92/05/31  01:52:31  mks
 * Now is the ASYNC, LVO based INFO...
 *
 * Revision 38.2  92/04/24  16:19:27  mks
 * No more looking into gadgets...
 *
 * Revision 38.1  91/06/24  11:36:19  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

/*------------------------------------------------------------------------*/

#include <string.h>

#include <intuition/intuition.h>
#include <intuition/gadgetclass.h>
#include <libraries/gadtools.h>

#include "workbench.h"
#include "wbinternal.h"
#include "info.h"
#include "quotes.h"
#include "support.h"

#include <clib/gadtools_protos.h>
#include "proto.h"

/*------------------------------------------------------------------------*/

/*  Function Prototypes: */
struct Gadget *InitAll(struct InfoTag *itag);

/*------------------------------------------------------------------------*/

/*/ ConditionalCreateNum()
 *
 * Function that depending on a boolean condition creates either a
 * Number-display gadget with the supplied number or a text-display
 * gadget with "---"
 *
 * Created:  16-Dec-89, Peter Cherna (from InitPhysicalInfo())
 * Modified: 16-Dec-89, Peter Cherna
 */

struct Gadget *ConditionalCreateNum(gad, ng, condition, number,q_id)

    struct Gadget *gad;
    struct NewGadget *ng;
    BOOL condition;
    LONG number;
    LONG q_id;

{
    ng->ng_GadgetText=Quote(q_id);
    ng->ng_TopEdge += 11;

    if (condition)
    {
        gad = CreateGadget(NUMBER_KIND, gad, ng,
                GTNM_Number, number,
                TAG_DONE);
    }
    else
    {
        gad = CreateGadget(TEXT_KIND, gad, ng,
            GTTX_Text, "---",
            TAG_DONE);
    }
    return(gad);
}


void InitNewGadBottom(struct InfoTag *itag,struct NewGadget *ng)
{
    ng->ng_LeftEdge = 132+itag->it_BottomX;
    ng->ng_TopEdge = itag->it_Y;
    ng->ng_Width = 332+itag->it_X-itag->it_BottomX;
}

struct Gadget *Do_Next_Pro(struct InfoTag *itag,struct Gadget *gad, struct NewGadget *ng, ULONG bit, ULONG q_id)
{
        ng->ng_GadgetID++;
        ng->ng_TopEdge += 11;
        ng->ng_GadgetText = Quote(q_id);
        ng->ng_UserData = (APTR) bit;
        return(CreateGadget(CHECKBOX_KIND, gad, ng,
				GTCB_Checked,(BOOL)((itag->it_Protection ^ 15) & bit),
				TAG_DONE) );
}

/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/

/*/ InitAll()
 *
 * Function to initialize all the gadgets for the specified Info window.
 */
struct Gadget *InitAll(struct InfoTag *itag)
{
struct Gadget *gad;
LONG stacksize;
short len;
short tmp;
struct NewGadget ng;
UBYTE buffer[48]; /* !!! Pick a real number */

    gad = CreateContext(&itag->it_FirstGadget);
    itag->it_Y = 64+itag->it_TopBorder;

    ng.ng_TextAttr = &defaultAttr;

    ng.ng_LeftEdge = ICONBOXLEFT+(ICONBOXWIDTH >> 1);
    ng.ng_TopEdge = 3 + itag->it_TopBorder;
    ng.ng_Width = 0;
    ng.ng_Height = 8;
    ng.ng_Flags = PLACETEXT_IN;
    ng.ng_VisualInfo = itag->it_VisualInfo;

    stccpy(itag->it_Title,((itag->it_MaskType & MASK_HASNAME) ? itag->it_Name : itag->it_Path),40);
    strcat(itag->it_Title," (");
    strcat(itag->it_Title,Quote((UWORD)(itag->it_Obj->do_Type + Q_I_ICONTYPE_BASE - 1)));
    strcat(itag->it_Title,")");
    ng.ng_GadgetText = itag->it_Title;

    tmp=(strlen(itag->it_Title)-1) << 3;
    if (tmp > ICONBOXWIDTH)
    {
        ng.ng_LeftEdge-= (tmp - ICONBOXWIDTH) >> 1;
    }

    gad = CreateGadget(TEXT_KIND, gad, &ng, TAG_DONE);

    ng.ng_TopEdge = 5 + itag->it_TopBorder;
    ng.ng_Flags = NG_HIGHLABEL;

    ng.ng_LeftEdge = 103+itag->it_CenterX;

    if (itag->it_MaskType & MASK_DISK)
    {
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_INFODATA), itag->it_InfoData->id_NumBlocks,Q_BLOCKS);
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_INFODATA), itag->it_InfoData->id_NumBlocksUsed,Q_USED);
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_INFODATA), itag->it_InfoData->id_NumBlocks - itag->it_InfoData->id_NumBlocksUsed,Q_FREE);
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_INFODATA), itag->it_InfoData->id_BytesPerBlock,Q_BLOCK_SIZE);
    }

    if (itag->it_MaskType & MASK_SIZESTACK)
    {
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_FIB), itag->it_FIB->fib_NumBlocks,Q_BLOCKS);
        gad = ConditionalCreateNum(gad, &ng, (BOOL)(itag->it_Flags & IT_GOT_FIB), itag->it_FIB->fib_Size,Q_BYTES);

        ng.ng_GadgetID = G_STACK;
        ng.ng_TopEdge += 14;
        ng.ng_Width = 64;
        ng.ng_Height = 14;
        ng.ng_GadgetText = Quote(Q_STACK);

	if (!(stacksize = itag->it_Obj->do_StackSize))
        {
            stacksize = DEFAULT_STACKSIZE;
        }

	if (!(itag->it_ObjFake))
	{
             itag->it_Stack = gad = CreateGadget(INTEGER_KIND, gad, &ng,
		            GTIN_Number, stacksize,
		            GTIN_MaxChars, NUMSTRINGLENGTH,
		            TAG_DONE);
	}
    }

    if (itag->it_MaskType & (MASK_LASTCHANGED | MASK_CREATEDDATE))
    {
    struct DateStamp *ds=NULL;

        /*  Create a display-only "gadget" with the date: */
	InitNewGadBottom(itag,&ng);

        ng.ng_Height = 8;
        ng.ng_Width = 180;
        ng.ng_Flags = NG_HIGHLABEL;

        if (itag->it_MaskType & MASK_LASTCHANGED)
        {
            /*  "Last Changed" field comes from FIB */
            ng.ng_GadgetText = Quote(Q_LAST_CHANGED);
            if (itag->it_Flags & IT_GOT_FIB) ds=&itag->it_FIB->fib_Date;
        }
        else
        {
            /*  Creation Date has been dropped into itag */
            ng.ng_GadgetText = Quote(Q_CREATED);
            if (itag->it_Flags & IT_GOT_VOLNODE) ds=&itag->it_CreateDate;
        }

	datetostring(buffer,ds);

        gad = CreateGadget(TEXT_KIND, gad, &ng,
		            GTTX_Text, buffer,
		            GTTX_CopyText, TRUE,
		            TAG_DONE);

        if (gad) itag->it_Y += 13;
    }

/*/ InitProBits()
 *
 * Function to initialize the protection bit gadgets.
 */
    if (itag->it_Flags & IT_GOT_FIB)
    {
        /*  We put the protection bit mask in the UserData field for
            the event-handler to take advantage of: */
        DP(("IPB:  Protection longword %lx\n", itag->it_Protection));

        /* Adjust for the x position... */
        ng.ng_LeftEdge = 438 + itag->it_X;

        ng.ng_GadgetID = G_SCRIPT-1;
        ng.ng_TopEdge = itag->it_TopBorder - 4;
        ng.ng_Flags = NG_HIGHLABEL;

	gad=Do_Next_Pro(itag,gad,&ng,FIBF_SCRIPT,Q_SCRIPT_BIT);
	gad=Do_Next_Pro(itag,gad,&ng,FIBF_ARCHIVE,Q_ARCHIVED_BIT);
	gad=Do_Next_Pro(itag,gad,&ng,FIBF_READ,Q_READ_BIT);
	gad=Do_Next_Pro(itag,gad,&ng,FIBF_WRITE,Q_WRITE_BIT);
	gad=Do_Next_Pro(itag,gad,&ng,FIBF_EXECUTE,Q_EXECUTE_BIT);
	gad=Do_Next_Pro(itag,gad,&ng,FIBF_DELETE,Q_DELETE_BIT);
    }

/*/ InitComment()
 *
 * Function to initialize the comment gadget.  Only puts one if
 * object's type is in MASK_COMMENT and we successfully got the FIB.
 */
    if ((itag->it_MaskType & MASK_COMMENT) && (itag->it_Flags & IT_GOT_FIB))
    {
        InitNewGadBottom(itag,&ng);

        ng.ng_GadgetID = G_COMMENT;
        ng.ng_Height = 14;
        ng.ng_GadgetText = Quote(Q_COMMENT);
        ng.ng_Flags = NG_HIGHLABEL;
        gad = CreateGadget(STRING_KIND, gad, &ng,
            GTST_String, itag->it_FIB->fib_Comment,
            GTST_MaxChars, COMMENTLENGTH-1,
            TAG_DONE);
        itag->it_Y += 18; /*ng.ng_Height+4*/
        if (gad)
        {
            itag->it_Comment = gad;
        }
    }

/*
 * Only show these gadgets if the icon is real...
 */
    if (!(itag->it_ObjFake))
    {
/*/ InitDefaultTool()
 *
 * Function to initialize the default tool gadget.
 */
        if (itag->it_MaskType & MASK_DEFAULTTOOL)
        {
            InitNewGadBottom(itag,&ng);

            ng.ng_GadgetID = G_DEFAULTTOOL;
            ng.ng_Height = 14;
            ng.ng_GadgetText = Quote(Q_DEFAULT_TOOL);
            ng.ng_Flags = NG_HIGHLABEL;

            itag->it_DefaultTool = gad = CreateGadget(STRING_KIND, gad, &ng,
                GTST_String, itag->it_Obj->do_DefaultTool,
                GTST_MaxChars, DEFAULTTOOLLENGTH,
                TAG_DONE);
            itag->it_Y += 18; /*ng.ng_Height+4*/
        }

/*/ InitToolTypes()
 *
 * Function to initialize gadgets associated with the tool types display.
 * This includes the scrolling list, the new and delete buttons, etc.
 */
        if (itag->it_MaskType & MASK_TOOLTYPES)
        {
            DP(("ITT: Filling out a NewListView\n"));
            InitNewGadBottom(itag,&ng);

            ng.ng_Height = itag->it_ToolsY;
            ng.ng_GadgetText = Quote(Q_TOOL_TYPES);
            ng.ng_GadgetID = G_TTLIST;
            ng.ng_Flags = NG_HIGHLABEL | PLACETEXT_LEFT;

            DP(("ITT:  About to call CLV\n"));
            itag->it_TTList = gad = CreateGadget(LISTVIEW_KIND, gad, &ng,
                GTLV_Labels, &itag->it_ToolTypeList,
                GTLV_ScrollWidth, 18,
                LAYOUTA_SPACING, 1,
                TAG_DONE);

            itag->it_Y += itag->it_ToolsY;

            DP(("ITT:  About to fill out NewGadget for string\n"));
            ng.ng_GadgetID = G_TTSTRING;
            ng.ng_TopEdge = itag->it_Y;
            ng.ng_Height = 14;
            ng.ng_GadgetText = NULL;
            itag->it_TTString = gad = CreateGadget(STRING_KIND, gad, &ng,
                GTST_MaxChars, TOOLTYPESLENGTH,
                GA_Disabled, TRUE,
                TAG_DONE);

            ng.ng_GadgetID = G_TTNEW;
            ng.ng_LeftEdge = 16+itag->it_BottomX;
            ng.ng_Width = 52;
            ng.ng_GadgetText = Quote(Q_NEW);
            ng.ng_Flags = 0;
            gad = CreateGadget(BUTTON_KIND, gad, &ng,
                TAG_DONE);

            ng.ng_GadgetID = G_TTDEL;
            ng.ng_LeftEdge += 56;
            ng.ng_GadgetText = Quote(Q_DELETE);
            itag->it_TTDel = gad = CreateGadget(BUTTON_KIND, gad, &ng,
                GA_Disabled, TRUE,
                TAG_DONE);

            itag->it_Y += 18; /* ng.ng_GadgetHeight+4 */
        }
    }

/*/ InitExitGadgets()
 *
 * Function to initialize the save and quit gadgets.
 */
    len=strlen(ng.ng_GadgetText = Quote(Q_SAVE_TEXT));
    tmp=strlen(Quote(Q_CANCEL_TEXT));

    if (tmp>len) len=tmp;

    len= (len*8) + 14;

    /*  Create a "Save" button relative to the bottom: */
    InitNewGadBottom(itag,&ng);

    ng.ng_GadgetID = G_SAVE;
    ng.ng_LeftEdge = 16;
    ng.ng_Width = len;
    ng.ng_Height = 14;
    ng.ng_Flags = 0;
    gad = CreateGadget(BUTTON_KIND, gad, &ng, TAG_DONE);

    /*  Create a "Quit" button relative to the bottom and right: */
    ng.ng_GadgetID = G_QUIT;
    ng.ng_LeftEdge = 464 + itag->it_X - len;
    ng.ng_GadgetText = Quote(Q_CANCEL_TEXT);
    gad = CreateGadget(BUTTON_KIND, gad, &ng, TAG_DONE);

    itag->it_Y += 18; /* Room for the SAVE/CANCEL gadgets */

    return(gad);
}
@


39.2
log
@Now adjusts the centered title to be off-center when it is very long.
@
text
@d2 1
a2 1
 * $Id: infoinit.c,v 39.1 92/05/31 01:52:31 mks Exp Locker: mks $
d5 3
d359 1
a359 1
    ng.ng_Height = 12;
d368 2
@


39.1
log
@Now is the ASYNC, LVO based INFO...
@
text
@d2 1
a2 1
 * $Id: infoinit.c,v 38.2 92/04/24 16:19:27 mks Exp Locker: mks $
d5 3
d126 1
a126 1
    stccpy(itag->it_Title,((itag->it_MaskType & MASK_HASNAME) ? itag->it_Name : itag->it_Path),50);
d131 7
@


38.2
log
@No more looking into gadgets...
@
text
@d2 1
a2 1
 * $Id: infoinit.c,v 38.1 91/06/24 11:36:19 mks Exp Locker: mks $
d5 3
d123 4
a126 11
    if (itag->it_MaskType & MASK_HASNAME)
    {
        strcpy(itag->it_Title, itag->it_WBObj->wo_Name);
    }
    else
    {
        itag->it_Title[0] = '\0';
    }
    strcat(itag->it_Title, " (");
    strcat(itag->it_Title, Quote((UWORD)(itag->it_WBObj->wo_Type + Q_I_ICONTYPE_BASE - 1)));
    strcat(itag->it_Title, ")");
d128 1
a128 2
    gad = CreateGadget(TEXT_KIND, gad, &ng,
        TAG_DONE);
d154 1
a154 1
	if (!(stacksize = itag->it_WBObj->wo_StackSize))
d159 1
a159 1
	if (!(itag->it_WBObj->wo_FakeIcon))
d206 1
a206 1
    if (itag->it_MaskType & MASK_PROBITS)
d254 1
a254 1
    if (!(itag->it_WBObj->wo_FakeIcon))
d270 1
a270 1
                GTST_String, itag->it_WBObj->wo_DefaultTool,
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d159 1
a159 1
        if (!(stacksize = itag->it_WBObj->wo_StackSize))
d164 3
a166 1
        gad = CreateGadget(INTEGER_KIND, gad, &ng,
d170 1
a170 6

        if (gad)
        {
            if (itag->it_WBObj->wo_FakeIcon) gad->Flags |= GADGDISABLED;
            itag->it_Stack = gad;
        }
d256 5
d265 3
a267 3
    if (itag->it_MaskType & MASK_DEFAULTTOOL)
    {
        InitNewGadBottom(itag,&ng);
d269 4
a272 4
        ng.ng_GadgetID = G_DEFAULTTOOL;
        ng.ng_Height = 14;
        ng.ng_GadgetText = Quote(Q_DEFAULT_TOOL);
        ng.ng_Flags = NG_HIGHLABEL;
d274 5
a278 10
        gad = CreateGadget(STRING_KIND, gad, &ng,
            GTST_String, itag->it_WBObj->wo_DefaultTool,
            GTST_MaxChars, DEFAULTTOOLLENGTH,
            TAG_DONE);
        itag->it_Y += 18; /*ng.ng_Height+4*/
        if (gad)
        {
            if (itag->it_WBObj->wo_FakeIcon)
                gad->Flags |= GADGDISABLED;
            itag->it_DefaultTool = gad;
a279 1
    }
d286 16
a301 5
    DP(("ITT: Enter\n"));
    if (itag->it_MaskType & MASK_TOOLTYPES)
    {
        DP(("ITT: Filling out a NewListView\n"));
        InitNewGadBottom(itag,&ng);
d303 1
a303 4
        ng.ng_Height = itag->it_ToolsY;
        ng.ng_GadgetText = Quote(Q_TOOL_TYPES);
        ng.ng_GadgetID = G_TTLIST;
        ng.ng_Flags = NG_HIGHLABEL | PLACETEXT_LEFT;
d305 9
a313 12
        DP(("ITT:  About to call CLV\n"));
        gad = CreateGadget(LISTVIEW_KIND, gad, &ng,
            GTLV_Labels, &itag->it_ToolTypeList,
            GTLV_ScrollWidth, 18,
            LAYOUTA_SPACING, 1,
            TAG_DONE);
        DP(("ITT:  Back from CLV\n"));
        if (gad)
        {
            itag->it_TTList = gad;
            itag->it_Y += gad->Height;
        }
d315 7
a321 14
        DP(("ITT:  About to fill out NewGadget for string\n"));
        ng.ng_GadgetID = G_TTSTRING;
        ng.ng_TopEdge = itag->it_Y;
        ng.ng_Height = 14;
        ng.ng_GadgetText = NULL;
        gad = CreateGadget(STRING_KIND, gad, &ng,
            GTST_MaxChars, TOOLTYPESLENGTH,
            TAG_DONE);
        if (gad)
        {
            itag->it_TTString = gad;
            DP(("ITT:  String gadget starts out empty.  Ghosting string gadget\n"));
            gad->Flags |= GADGDISABLED;
        }
d323 6
a328 12
        ng.ng_GadgetID = G_TTNEW;
        ng.ng_LeftEdge = 16+itag->it_BottomX;
        ng.ng_Width = 52;
        ng.ng_GadgetText = Quote(Q_NEW);
        ng.ng_Flags = 0;
        gad = CreateGadget(BUTTON_KIND, gad, &ng,
            TAG_DONE);
        if (gad)
        {
            if (itag->it_WBObj->wo_FakeIcon)
                gad->Flags |= GADGDISABLED;
        }
d330 1
a330 10
        ng.ng_GadgetID = G_TTDEL;
        ng.ng_LeftEdge += 56;
        ng.ng_GadgetText = Quote(Q_DELETE);
        gad = CreateGadget(BUTTON_KIND, gad, &ng,
            TAG_DONE);
        if (gad)
        {
            itag->it_TTDel = gad;
            gad->Flags |= GADGDISABLED;
            DP(("ITT:  Del disabled at the start\n"));
a331 1
        itag->it_Y += 18; /* ng.ng_GadgetHeight+4 */
a354 2
    if (gad) itag->it_Save = gad;

d357 1
a357 1
    ng.ng_LeftEdge = -15-len;
a359 2

    if (gad) gad->Flags |= GRELRIGHT;
@
