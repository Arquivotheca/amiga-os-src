head     38.3;
branch   ;
access   ;
symbols  V40_5:38.3 V40_4:38.3 V40_3:38.3 V40_2:38.3 V40_1:38.3 V39_56:38.3 V39_54:38.3 V39_52:38.3 V39_51:38.3 V39_50:38.3 V39_48:38.3 V39_46:38.3 V39_45:38.3 V39_44:38.3 V39_43:38.3 V39_42:38.3 V39_41:38.3 V39_40:38.3 V39_39:38.3 V39_38:38.3 V39_37:38.3 V39_36:38.3 V39_35:38.3 V39_34:38.3 V39_33:38.3 V39_32:38.3 V39_30:38.3 V39_29:38.3 V39_27:38.3 V39_26:38.3 V39_25:38.3 V39_23:38.3 V39_22:38.3 V39_21:38.3 V39_20:38.3 V39_18:38.3 V39_17:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.2 V39_9:38.2 V39_8:38.2 V39_7:38.2 V39_6:38.2 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


38.3
date     92.04.09.07.11.03;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     92.01.07.13.58.22;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.33.58;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


38.3
log
@Some quick cleanup...
@
text
@/*
 * $Id: backfill.c,v 38.2 92/01/07 13:58:22 mks Exp Locker: mks $
 *
 * $Log:	backfill.c,v $
 * Revision 38.2  92/01/07  13:58:22  mks
 * Uses the new backfill stuff.  Thus, this code is now very simple and
 * may well become "obsolete" soon!
 *
 * Revision 38.1  91/06/24  11:33:58  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

#include "proto.h"
#include "string.h"
#include "exec/types.h"
#include "exec/memory.h"
#include "macros.h"
#include "intuition/intuition.h"
#include "graphics/gfxmacros.h"
#include "utility/hooks.h"
#include "workbench.h"
#include "workbenchbase.h"
#include "global.h"
#include "support.h"

struct Hook *PrepareBackFill(BOOL diskwin)
{
struct WorkbenchBase *wb = getWbBase();
struct Hook *hook;

	hook=&(wb->wb_WinHook);
	if (diskwin) hook=&(wb->wb_WBHook);

	return(hook);
}

void InstallBackFill(struct Window *w)
{
struct WorkbenchBase *wb = getWbBase();

	InstallLayerHook(w->WLayer, PrepareBackFill(w == wb->wb_BackWindow));
}
@


38.2
log
@Uses the new backfill stuff.  Thus, this code is now very simple and
may well become "obsolete" soon!
@
text
@d2 1
a2 1
 * $Id: backfill.c,v 38.1 91/06/24 11:33:58 mks Exp Locker: mks $
d5 4
a42 5
}

void UnInstallBackFill(struct Window *w)
{
	InstallLayerHook(w->WLayer, NULL);
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
a19 1
#include "wbpat.h"
d23 1
a23 1
void rollpattern(int x,int y,UWORD *src,UWORD *dst,UBYTE depth)
d25 1
a25 12
    int i,j;
    for(i=0; i<depth; i++)
    {
	for(j=0; j<PATTERN_HEIGHT; j++)
	{
	    ULONG temp = *(src + (i * PATTERN_HEIGHT) + ((j + y) % PATTERN_HEIGHT));
	    *dst++ = (((temp << 16) + temp) >> 16 - (x % 16));
	}
    }
}

BackFill(hook, rp, message)
a26 35
struct RastPort *rp;
int *message;
{
struct	Layer	*layer	= *(struct Layer **) (message+0);

	DP(("BackFill: enter, hook=$%lx, rp=$%lx, message=$%lx\n",hook, rp, message));

	if (rp->Layer) /* if this cliprect is on screen then roll pattern */
	{
		UWORD		**data	= (UWORD **)(hook+1);
	struct	Rectangle	*rect;
	struct	RastPort	crp;

	    crp = *rp;
	    crp.Layer = NULL;

	    crp.FgPen=~0;	/* SetAPen(&crp,~0); */
	    crp.BgPen=0;	/* SetBPen(&crp,0);  */
	    SetDrMd(&crp, JAM2);

	    DP(("--- bf layered --- \n"))

	    rollpattern(16 - ((layer->bounds.MinX-layer->Scroll_X) % 16),
			16 - ((layer->bounds.MinY-layer->Scroll_Y) % 16),
		        *data,
			(UWORD *)(data + 1),
			crp.BitMap->Depth);

	    rect = (struct Rectangle *)(message + 1);

	    DP(("TopLeft = (%ld,%ld) : BotRight = (%ld,%ld)\n",rect->MinX, rect->MinY, rect->MaxX, rect->MaxY));

	    SetAfPt(&crp, (VOID *)(data + 1), -4);
	    BltPattern(&crp, NULL, rect->MinX, rect->MinY, rect->MaxX, rect->MaxY, 0);
	}
d28 2
a29 7
	DP(("\n"));
	return(0);
}

struct Hook *PrepareBackFill(BOOL diskwin)
{
    extern int hookEntry();
d31 1
a31 31
    struct WorkbenchBase *wb = getWbBase();
    struct Hook *hook;
    ULONG *control;

    DP(("PrepareBackFill: enter\n"))
    if (hook = ALLOCVEC((sizeof(struct Hook) + CONTROL_SIZE), MEMF_PUBLIC)) {
	hook->h_Entry = hookEntry; /* ptr to asm stub */
	hook->h_SubEntry = BackFill; /* ptr to HLL routine */
	hook->h_Data = wb; /* context (wb base) */
	control = (ULONG *)(hook + 1);
	if (diskwin)
	{
	    *control = (ULONG)(wb->wb_WBPat);
	    DP(("\tusing backdrop pattern\n"));
	}
	else
	{
	    *control = (ULONG)(wb->wb_WinPat);
	    DP(("\tusing window pattern\n"));
	}
	/*
	 * Check if we have a pattern...
	 */
	if (!(*control))
	{
	    FREEVEC(hook);
	    hook=NULL;
	}
    }
    DP(("PrepareBackFill: exit, hook=$%lx\n", hook))
    return(hook);
d34 1
a34 2
void InstallBackFill(w)
struct Window *w;
d36 1
a36 2
    struct WorkbenchBase *wb = getWbBase();
    struct Hook *hook;
d38 1
a38 6
    DP(("InstallBackFill: enter, w=$%lx (%s)\n",w, w->Title))
    if (hook = PrepareBackFill(w == wb->wb_BackWindow))
    {
	InstallLayerHook(w->WLayer, hook);
    }
    DP(("InstallBackFill: exit\n"))
d41 1
a41 2
void UnInstallBackFill(w)
struct Window *w;
d43 1
a43 6
    DP(("UnInstallBackFill: enter, w=$%lx (%s)\n",w, w->Title))

    /* install a NULL hook, free old one... */
    FREEVEC(InstallLayerHook(w->WLayer, NULL));

    DP(("UnInstallBackFill: exit\n"))
@
