head     38.24;
branch   ;
access   ;
symbols  V40_5:38.24 V40_4:38.23 V40_3:38.23 V40_2:38.23 V40_1:38.23 V39_56:38.23 V39_54:38.23 V39_52:38.23 V39_51:38.21 V39_50:38.21 V39_48:38.19 V39_46:38.17 V39_45:38.16 V39_44:38.16 V39_43:38.16 V39_42:38.16 V39_41:38.15 V39_40:38.14 V39_39:38.13 V39_38:38.13 V39_37:38.13 V39_36:38.13 V39_35:38.12 V39_34:38.12 V39_33:38.12 V39_32:38.12 V39_30:38.12 V39_29:38.12 V39_27:38.11 V39_26:38.11 V39_25:38.11 V39_23:38.11 V39_22:38.11 V39_21:38.11 V39_20:38.9 V39_18:38.8 V39_17:38.8 V39_16:38.8 V39_15:38.8 V39_14:38.8 V39_12:38.8 V39_10:38.6 V39_9:38.6 V39_8:38.6 V39_7:38.6 V39_6:38.6 V39_5:38.5 V39_4:38.4 V39_3:38.3;
locks    ; strict;
comment  @* @;


38.24
date     93.05.24.15.32.37;  author mks;  state Exp;
branches ;
next     38.23;

38.23
date     92.12.15.15.56.08;  author mks;  state Exp;
branches ;
next     38.22;

38.22
date     92.11.13.11.15.10;  author mks;  state Exp;
branches ;
next     38.21;

38.21
date     92.11.09.18.31.15;  author mks;  state Exp;
branches ;
next     38.20;

38.20
date     92.08.25.12.39.45;  author mks;  state Exp;
branches ;
next     38.19;

38.19
date     92.08.20.10.00.17;  author mks;  state Exp;
branches ;
next     38.18;

38.18
date     92.08.20.08.59.17;  author mks;  state Exp;
branches ;
next     38.17;

38.17
date     92.08.04.13.20.46;  author mks;  state Exp;
branches ;
next     38.16;

38.16
date     92.07.16.15.19.23;  author mks;  state Exp;
branches ;
next     38.15;

38.15
date     92.07.13.18.34.59;  author mks;  state Exp;
branches ;
next     38.14;

38.14
date     92.06.29.09.55.08;  author mks;  state Exp;
branches ;
next     38.13;

38.13
date     92.06.22.14.53.09;  author mks;  state Exp;
branches ;
next     38.12;

38.12
date     92.05.30.18.16.47;  author mks;  state Exp;
branches ;
next     38.11;

38.11
date     92.04.16.10.27.49;  author mks;  state Exp;
branches ;
next     38.10;

38.10
date     92.04.16.10.02.41;  author mks;  state Exp;
branches ;
next     38.9;

38.9
date     92.04.14.11.24.37;  author mks;  state Exp;
branches ;
next     38.8;

38.8
date     92.02.18.12.30.36;  author mks;  state Exp;
branches ;
next     38.7;

38.7
date     92.02.18.12.13.30;  author mks;  state Exp;
branches ;
next     38.6;

38.6
date     92.01.07.14.03.53;  author mks;  state Exp;
branches ;
next     38.5;

38.5
date     91.12.02.19.43.59;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     91.11.13.10.58.25;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     91.11.12.18.40.54;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     91.11.12.10.07.56;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.28.15.44.00;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


38.24
log
@Slight cleanup
@
text
@*
* $Id: abs.asm,v 38.23 92/12/15 15:56:08 mks Exp Locker: mks $
*
* $Log:	abs.asm,v $
* Revision 38.23  92/12/15  15:56:08  mks
* Fixed some minor quoting
*
* Revision 38.22  92/11/13  11:15:10  mks
* Updated the text again...
*
* Revision 38.21  92/11/09  18:31:15  mks
* Changed the special text
*
* Revision 38.20  92/08/25  12:39:45  mks
* Saved some space by removing extra init code...
*
* Revision 38.19  92/08/20  10:00:17  mks
* Now uses the ROM copyright from the cached version
*
* Revision 38.18  92/08/20  08:59:17  mks
* Removed the beta version string from the requester and
* made it use the special EXEC version string for that.
*
* Revision 38.17  92/08/04  13:20:46  mks
* Some changes to the About requester
*
* Revision 38.16  92/07/16  15:19:23  mks
* Added Lauren to the others group...
*
* Revision 38.15  92/07/13  18:34:59  mks
* Added config locking to the async tools...
*
* Revision 38.14  92/06/29  09:55:08  mks
* Names have been changed to protect the uninitiated ;^)
*
* Revision 38.13  92/06/22  14:53:09  mks
* Updated some minor strings
*
* Revision 38.12  92/05/30  18:16:47  mks
* Added the WBInfo LVO and stubs
*
* Revision 38.11  92/04/16  10:27:49  mks
* Added the beta version string for beta releases
*
* Revision 38.10  92/04/16  10:02:41  mks
* Changed to use EXEC's strings
*
* Revision 38.9  92/04/14  11:24:37  mks
* Changed to use TaggedOpenLibrary...
*
* Revision 38.8  92/02/18  12:30:36  mks
* Changed part of the 8to6 database
*
* Revision 38.7  92/02/18  12:13:30  mks
* New encoding for 8to6 data...
* New QuickFilter...
*
* Revision 38.6  92/01/07  14:03:53  mks
* Major rework of how resources are allocated.  Also no longer opens
* diskfont.library since the new configuration code will do that.
*
* Revision 38.5  91/12/02  19:43:59  mks
* Fixed "backwards" bug...  Wrong branch on Open of DiskFont library
*
* Revision 38.4  91/11/13  10:58:25  mks
* Now does all of the InitFunc here.  (Silly to do it in C)
*
* Revision 38.3  91/11/12  18:40:54  mks
* Now does thw open and close of the libraries in here.
*
* Revision 38.2  91/11/12  10:07:56  mks
* Small change to some comments/constants
*
* Revision 38.1  91/06/28  15:44:00  mks
* Initial V38 tree checkin - Log file stripped
*

	SECTION	section

;	Included Files

	INCLUDE 'exec/types.i'
	INCLUDE 'exec/nodes.i'
	INCLUDE 'exec/resident.i'
	INCLUDE 'exec/alerts.i'
	INCLUDE 'exec/io.i'

	INCLUDE	'exec/execbase.i'
	INCLUDE	'devices/inputevent.i'
	INCLUDE	'intuition/intuition.i'

	INCLUDE	'internal/librarytags.i'

	INCLUDE	'workbench.i'
	INCLUDE	'workbenchbase.i'

;	Imported Names

*------ Tables -------------------------------------------------------

*------ Functions ----------------------------------------------------

	XREF	EndCode
	XREF	Startup
	XREF	_wbmain
	XREF	_InitFunc
	XREF	_LoadTool
	XREF	_DosCopy
	XREF	_DosCopyW
	XREF	_StartInformation
	XREF	_SystemWorkbenchName

	XREF	VERNUM
	XREF	REVNUM
	XREF	_VERSTRING

	XREF	_LVOAlert
	XREF	_LVOAllocMem
	XREF	_LVOOpenLibrary
	XREF	_LVOTaggedOpenLibrary
	XREF	_LVORemTask
	XREF	_LVOInitResident
	XREF	_LVOPutMsg
	XREF	_AbsExecBase
	XREF	_LVORemove
	XREF	_LVOFreeMem
	XREF	_LVOCloseLibrary
	XREF	_LVOQuoteWorkbench
	XREF	_LVOEasyRequestArgs

;	Exported Names

*------ Functions ----------------------------------------------------

	XDEF	_exit

*------ Data --------------------------------------------------------
	XDEF	_subsysName
	XDEF	_WorkbenchName

	xdef	_DOSBaseOffset
	xdef	_GfxBaseOffset
	xdef	_IconBaseOffset
	xdef	_IntuitionBaseOffset
	xdef	_LayersBaseOffset
	xdef	_SysBaseOffset
	xdef	_TimerBaseOffset
	xdef	_GadToolsBaseOffset
        xdef    _LoadToolSegment
	xdef	_DosCopySegment
	xdef	_DosCopySegmentW
	xdef	_AboutSegment
	xdef	_InfoSegment

	XDEF	_VersionFormat
	XDEF	_CopyrightFormat
	XDEF	_KickstartName

;	Local Definitions

initLDescrip:
				;STRUCTURE RT,0
	  DC.W    RTC_MATCHWORD ; UWORD RT_MATCHWORD
	  DC.L    initLDescrip  ; APTR  RT_MATCHTAG
	  DC.L    EndCode	; APTR  RT_ENDSKIP
	  DC.B    RTF_AUTOINIT	; UBYTE RT_FLAGS
	  DC.B    VERNUM        ; UBYTE RT_VERSION
	  DC.B    NT_LIBRARY	; UBYTE RT_TYPE
	  DC.B    -120		; BYTE  RT_PRI
	  DC.L    _subsysName   ; APTR  RT_NAME
	  DC.L    _VERSTRING    ; APTR  RT_IDSTRING
	  DC.L    inittable	; APTR  RT_INIT
				; LABEL RT_SIZE
inittable:
	    DC.L WorkbenchBase_SIZEOF
	    DC.L wbvectors
	    DC.L 0
	    DC.L initFunc

_KickstartName:		dc.b	'Kickstart',0
;
; The following string is used in the About... requester
;
****** VersionFormat: *******
*                           *
* Kickstart version 37.23   *		The "version" is localized
* Workbench version 37.10   *		(same here)
*                           *
* Copyright © 1985-1992     *		Copyright message is below...
* Commodore-Amiga, Inc.     *		(as three parts for the %s)
* All Rights Reserved.      *
*                           *
*           OK              *		Note that OK is a gadget definition
*                           *
*****************************

_VersionFormat:		dc.b	'%s %s %ld.%ld',10,'%s %s %ld.%ld',10,10,'%s',10,'%s',10,'%s',0
;
; The following format is for the initial titlebar display of the copyright
;
_CopyrightFormat:	dc.b	'%s%s%s',0
*
_WorkbenchName:
_subsysName:	dc.b 	'workbench.library',0
verlib:		dc.b	'version.library',0
		CNOP	0,2
*
LibErrors:	dc.w	OLTAG_GRAPHICS,AO_GraphicsLib
		dc.w	OLTAG_INTUITION,AO_Intuition
		dc.w	OLTAG_ICON,AO_IconLib
		dc.w	OLTAG_DOS,AO_DOSLib
		dc.w	OLTAG_LAYERS,AO_LayersLib
		dc.w	OLTAG_GADTOOLS,AO_GadTools
		dc.w	OLTAG_UTILITY,AO_UtilityLib
		dc.w	0
*
*******************************************************************************
*
	;------ this is the entry point for the new, improved, wb task
		xdef	_WbSegment
_WbSegment:	move.l	_AbsExecBase,a6		; Get execbase...
		moveq.l	#OLTAG_WORKBENCH,d0	; Get workbench tag...
		jsr	_LVOTaggedOpenLibrary(a6)	;We know this will work
		move.l	d0,a6			; And into a6 (workbench base)
		jmp	_wbmain			; Start the main routine...
*
*******************************************************************************
*
_exit:

; entryreserved is the required library reserved entry...
entryreserved:
;
; Reserved for future use...
entrywbReserved90:
entrywbReserved96:
entrywbReserved102:
entrywbReserved108:
entrywbReserved114:
	moveq	#0,d0
	rts

; 'LoadToolSegment' and 'DosCopySegment' are fake seglist ptrs that
; get CreateProc'd by workbench to add asynchronicity to launching
; a program and copying files.  They need workbenchbase in a6 in
; order to call the routines inside workbench.  One way to get it is
; to open the library.  This also makes sure that workbench can not
; go away while they are active...

	;------- this is the entry point for the "Information" requester
	CNOP	0,4		; Long word align...
	DC.L	0		; size (none)
_InfoSegment:
	DC.L	0		; bptr to next seg (none)
	move.l	#_StartInformation,a5
	bra.s	ToolSegmentCommon

	;------- this is the entry point for the "About Workbench" requester
	CNOP	0,4		; longword align
	DC.L	0		; size (unknown)
_AboutSegment:
	DC.L	0		; bptr to next seg (none)
	lea	AboutWorkbench(pc),a5	; Point at real code...
	bra.s	ToolSegmentCommon

	;------- this is the entry point for the "async tool loader"
	CNOP	0,4		; longword align
	DC.L	0		; size (unknown)
_LoadToolSegment:
	DC.L	0		; bptr to next seg (none)
	move.l	#_LoadTool,a5	; Point at real code.
	bra.s	ToolSegmentCommon

	;------ this is the entry point for the async copy loader
	CNOP	0,4		; longword align
	DC.L	0		; size (unknown)
_DosCopySegment:
	DC.L	0		; bptr to next seg
	move.l	#_DosCopy,a5	; Point at real code...
	bra.s	ToolSegmentCommon

	;------ this is the entry point for the async copy loader
	CNOP	0,4		; longword align
	DC.L	0		; size (unknown)
_DosCopySegmentW:
	DC.L	0		; bptr to next seg
	move.l	#_DosCopyW,a5	; Point at real code...
;	bra.s	ToolSegmentCommon

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

ToolSegmentCommon:		; a5 == address of code to start running...
	;------ open workbench library
	moveq.l	#OLTAG_WORKBENCH,d0	; Workbench tag...
	move.l	_AbsExecBase,a6
	jsr	_LVOTaggedOpenLibrary(a6)	; Open workbench.library...
;				; We know we are open...
;
	move.l	a6,-(sp)	; Save a6
	move.l	d0,-(sp)	;   and the library pointer...
	move.l	d0,a6		; Set library pointer into a6...
	addq.l	#1,wb_ConfigLock(a6)	; Lock the config...
	jsr	(a5)		; Call the code...
	subq.l	#1,wb_ConfigLock(a6)	; Unlock the config...
	move.l	(sp)+,a1	; Get library pointer ready for CloseLibrary
	move.l	(sp)+,a6	; Get execbase again...
;
	jmp	_LVOCloseLibrary(a6)	; Close workbench.library...
					; CloseLibrary does the RTS for us...

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
initFunc:
	move.l	d0,a1			; Set up workbench base pointer...
	move.l	a0,wb_SegList(a1)	; Save seglist
	move.w	#REVNUM,LIB_REVISION(a1)
;
; Now, make the hooks point at the right stuff...
;
	xref	CoolHook
	lea	CoolHook,a0
	move.l	a0,h_Entry+wb_WBHook(a1)	; Code to run...
	move.l	a0,h_Entry+wb_WinHook(a1)
	move.l	a1,h_SubEntry+wb_WBHook(a1)	; WorkbenchBase
	move.l	a1,h_SubEntry+wb_WinHook(a1)
	clr.l	h_Data+wb_WBHook(a1)		; Pattern pointer
	clr.l	h_Data+wb_WinHook(a1)
;
	rts

entryopen:
	btst	#WB2B_Quit,wb_Flags2(a6) ; is wb quiting?
	beq.s	10$			; no
	moveq	#0,d0			; return failure
	rts

10$	tst.w	LIB_OPENCNT(a6)		; Check if we are running...
	bne.s	OpenIt

	; Ok, now open all libraries I will needed...
	movem.l	a2/a3/a6,-(sp)
	lea	wb_SysBase(a6),a2	; Point at first one...
	move.l	_AbsExecBase,a6		; Get execbase...

	move.l	a6,(a2)+		; Set up SysBase...
	lea	LibErrors(pc),a3	; Get library tags and error codes
DoLoop:	moveq.l	#0,d0			; Clear d0
	move.w	(a3)+,d0		; Get library tag
	beq.s	OpenAll_Done		; If 0, we be done...
	jsr	_LVOTaggedOpenLibrary(a6)	; Open it...
	move.w	(a3)+,d1		; Get error number
	move.l	d0,(a2)+		; Store library base...
	bne.s	DoLoop			; If no error, do next
*
* We should never get here!  But if we do, we just fail out nicely...
*
	move.l	d7,-(sp)
	move.l	#AN_Workbench!AG_OpenLib,d7	; Set other bits...
	or.w	d1,d7				; Add in specific bits
	jsr	_LVOAlert(a6)
	move.l	(sp)+,d7
	movem.l	(sp)+,a2/a3/a6		; Restore...
	bra.s	alreadyClosed

OpenAll_Done:
	lea	wb_Copyright1-wb_TimerBase(a2),a2	; Point at wb_Copyright1
	moveq.l	#OLTAG_COPYRIGHT2,d0		; Copyright ROM2
	jsr	_LVOTaggedOpenLibrary(a6)	; Get pointer
	move.l	d0,(a2)+			; Store it...
	moveq.l	#OLTAG_COPYRIGHT3,d0		; Copyright ROM3
	jsr	_LVOTaggedOpenLibrary(a6)	; Get pointer
	move.l	d0,(a2)+			; Store it...
	moveq.l	#OLTAG_COPYRIGHT4,d0		; Copyright ROM4
	jsr	_LVOTaggedOpenLibrary(a6)	; Get pointer
	move.l	d0,(a2)+			; Store it...
	move.l	#OLTAG_COPYRIGHT5,d0		; Copyright ROM5
	jsr	_LVOTaggedOpenLibrary(a6)	; Get pointer
	move.l	d0,(a2)+			; Store it...
	movem.l	(sp)+,a2/a3/a6		; Restore...

OpenIt:	addq.w	#1,LIB_OPENCNT(a6)	; inc lib open count
	move.l	a6,d0			; return wbbase
	rts

entryclose:
	subq.w	#1,LIB_OPENCNT(a6)	; dec lib open count
	bne.s	StillOpen		; If not 0, we skip...
*
alreadyClosed:
	movem.l	a2/a3/a6,-(sp)		; Save
	lea	wb_SysBase(a6),a2	; Point at sysbase...
	lea	wb_TimerBase(a6),a3	; End point...
	move.l	(a2)+,a6		; Get ExecBase
CloseLoop:
	move.l	(a2),a1			; Get library
	clr.l	(a2)+			; Clear pointer
	jsr	_LVOCloseLibrary(a6)	; Close it
	cmp.l	a2,a3			; Finished?
	bne.s	CloseLoop		; Do some more
	movem.l	(sp)+,a2/a3/a6		; Restore
*
StillOpen:
	moveq	#0,d0			; return 0
	rts

entryexpunge:
	movem.l	d2/a5/a6,-(sp)		; save regs used

	move.l	a6,a5			; wbbase in a5
	move.l	_AbsExecBase,a6		; execbase in a6
	move.l	wb_SegList(a5),d2	; save seglist in d2

	tst.w	LIB_OPENCNT(a5)		; anyone have us open?
	beq.s	10$			; no, so expunge us
	moveq	#0,d0			; setup return value
	bra.s	20$			; we're outa here!

10$:	move.l	a5,a1			; lib base in a1 (for Remove)
	jsr	_LVORemove(a6)		; unlink from lib list

	; calculate mem used and then free it
	moveq	#0,d0
	move.l	a5,a1
	move.w	LIB_NEGSIZE(a5),d0
	sub.l	d0,a1
	add.w	LIB_POSSIZE(a5),d0
	jsr	_LVOFreeMem(a6)		; free our memory

	move.l	d2,d0			; setup return value

20$:	movem.l	(sp)+,d2/a5/a6		; restore regs used
	rts				; bye!


;
; These are the library entry points.
;
	XREF	GetQuote	; External from here...
entryQuoteWorkbench:
	jmp	GetQuote

	xref	_StartWorkbench
entryStartWorkbench:	;(flags,ptr)(D0/D1)
	movem.l	d0/d1,-(sp)
	jsr	_StartWorkbench
	addq.l	#8,sp
	rts

	xref	_AddAppWindow
entryAddAppWindowA:	;(id,userdata,window,msgport,userdata,id)(D0/D1/A0/A1)
	movem.l	d0/d1/a0/a1,-(sp)
	jsr	_AddAppWindow
	lea	16(sp),sp
	rts

	xref	_RemoveAppWindow
entryRemoveAppWindow:	;(aw)(A0)
	move.l	A0,-(sp)
	jsr	_RemoveAppWindow
	addq.l	#4,sp
	rts

	xref	_AddAppIcon
entryAddAppIconA:	;(id,userdata,name,msgport,lock,dobj)(D0/D1/A0/A1/A2/A3)
	movem.l	d0/d1/a0/a1/a2/a3,-(sp)
	jsr	_AddAppIcon
	lea	24(sp),sp
	rts

	xref	_RemoveAppIcon
entryRemoveAppIcon:	;(ai)(A0)
	move.l	a0,-(sp)
	jsr	_RemoveAppIcon
	addq.l	#4,sp
	rts

	xref	_AddAppMenuItem
entryAddAppMenuItemA:	;(id,userdata,text,msgport)(D0/D1/A0/A1)
	movem.l	d0/d1/a0/a1,-(sp)
	jsr	_AddAppMenuItem
	lea	16(sp),sp
	rts

	xref	_RemoveAppMenuItem
entryRemoveAppMenuItem:	;(am)(A0)
	move.l	A0,-(sp)
	jsr	_RemoveAppMenuItem
	addq.l	#4,sp
	rts

	xref	_UpdateWorkbench
entryUpdateWorkbench:	;(name,lock,flag)(A0,A1,D0);
	move.l	d0,-(sp)
	move.l	a1,-(sp)
	move.l	a0,-(sp);
	jsr	_UpdateWorkbench
	lea	12(sp),sp
	rts

	xref	_WBConfig
entryWBConfig:	; (tag,pointer)(d0,d1)
	jmp	_WBConfig

	xref	_WBInformation
entryWBInfo:	; (lock,name,screen) (a0,a1,a2)
	movem.l	a0-a2,-(sp)
	jsr	_WBInformation
	lea	12(sp),sp
	rts

FUNCDEF	MACRO
	DC.W	entry\1-wbvectors
	ENDM

wbvectors:
	DC.W	-1
	FUNCDEF	open
	FUNCDEF	close
	FUNCDEF	expunge
	FUNCDEF	reserved
*
	FUNCDEF	UpdateWorkbench
	FUNCDEF	QuoteWorkbench
	FUNCDEF	StartWorkbench
	FUNCDEF	AddAppWindowA
	FUNCDEF	RemoveAppWindow
	FUNCDEF	AddAppIconA
	FUNCDEF	RemoveAppIcon
	FUNCDEF	AddAppMenuItemA
	FUNCDEF	RemoveAppMenuItem
*
* New for V39
*
	FUNCDEF	WBConfig
	FUNCDEF	WBInfo
*
	FUNCDEF	wbReserved90
	FUNCDEF	wbReserved96
	FUNCDEF	wbReserved102
	FUNCDEF	wbReserved108
	FUNCDEF	wbReserved114
*
	DC.W	-1

; Entry point to call to get strings within workbench...
;******************************************************************************
;
; This is the extern C-language entry point...
;
; char * = Quote(ULONG num)
;
		XDEF	_Quote
_Quote:		move.l	4(sp),d0	; Get the quote number...
		jmp	_LVOQuoteWorkbench(a6)	; Jump to the private LVO...
;
;******************************************************************************
;
; This is the extern C-language entry point...
;
; BOOL = WB_Info(BPTR lock, char *name,struct Screen *screen)
;
_LVOWBInfo	equ	-$5a
		XDEF	_WB_Info
_WB_Info:	move.l	a2,-(sp)	; Save a2
		movem.l	8(sp),a0-a2	; Get values...
		jsr	_LVOWBInfo(a6)	; Call it...
		move.l	(sp)+,a2	; Restore
		rts
;
;******************************************************************************
;
;
_DOSBaseOffset		EQU	wb_DOSBase
_GfxBaseOffset		EQU	wb_GfxBase
_IconBaseOffset		EQU	wb_IconBase
_IntuitionBaseOffset	EQU	wb_IntuitionBase
_LayersBaseOffset	EQU	wb_LayersBase
_SysBaseOffset		EQU	wb_SysBase
_TimerBaseOffset	EQU	wb_TimerBase
_GadToolsBaseOffset	EQU	wb_GadToolsBase
*
*
*******************************************************************************
*
* Taking control of the alternate menus will shift you into enlightened state
*
*******************************************************************************
*
* Qualifier check mask : These are the qualifiers that we check...
*
Q_C1	equ	IEQUALIFIER_LSHIFT!IEQUALIFIER_RSHIFT!IEQUALIFIER_CONTROL
Q_C2	equ	IEQUALIFIER_LALT!IEQUALIFIER_RALT
Q_C3	equ	IEQUALIFIER_LCOMMAND!IEQUALIFIER_RCOMMAND
Q_CHECK	equ	Q_C1!Q_C2!Q_C3
*
* Qualifier must mask : These are the qualifiers that must match from the above
*
Q_MUST	equ	Q_C1!Q_C2
*
*******************************************************************************
*
* void QuickFilter(struct IntuiMessage *)
*
* This routine takes an intuition message and does some checks to see if it
* is "valid"  If not, it will change the IntuiMessage CODE field into
* a MENUNULL and thus clearing the menu event.
*
		XDEF	_QuickFilter
_QuickFilter:	move.l	4(sp),a0		; Get the message from the stack...
		cmp.l	#MENUPICK,im_Class(a0)	; A menu message?
		bne.s	NotForMe		; If not for me...
*
* Now we check for qualifier match...
*
		move.w	im_Qualifier(a0),d0	; Get qualifiers...
		and.w	#Q_CHECK,d0		; Mask the important ones
		move.w	d0,wb_LastFlags(a6)	; Store them...
NotForMe:	rts				; A short branch away...
*
*******************************************************************************
*
* This routine does the About() box...
*
* Entry:  a6=WorkbenchBase
* All registers are available...
*
AboutWorkbench:	move.l	sp,a4			; Save Stack somewhere...
		moveq.l	#16,d0			; We need 16 opens...
		cmp.w	LIB_OPENCNT(a6),d0	; Check the open count...
		bne.s	DoAbout
		move.w	wb_LastFlags(a6),d0	; Get flags
		cmp.w	#Q_MUST,d0		; Check them...
		beq	ForMe			; If set, we go...
*
* Get the string "version" from the quotes catalog
*
DoAbout:	moveq.l	#27,d0			; The string number
		jsr	_LVOQuoteWorkbench(a6)	; Get the quote
		move.l	d0,d4			; Save this string...
*
* Now, get the disk version (if possible)
*
		move.l	a6,a5			; Save WBBase somewhere...
		move.l	wb_SysBase(a5),a6	; Get execbase...
		moveq.l	#-1,d2			; Version
		lea	verlib(pc),a1		; Get Version
		moveq.l	#0,d0			; Any version
		jsr	_LVOOpenLibrary(a6)	; Open it?
		move.l	d0,a1			; Get it back...
		move.l	d0,d3			; Check it...
		beq.s	no_ver			; No DiskVersion if NULL
		moveq.l	#0,d2			; Clear d2
		move.w	LIB_VERSION(a1),d2	; Get version
		moveq.l	#0,d3			; Clear d3
		move.w	LIB_REVISION(a1),d3	; Get revision
no_ver:		jsr	_LVOCloseLibrary(a6)	; Close it again...
		exg	a5,a6			; Restore WB to a6...
*
* Start by setting up the copyright strings...
*
		move.l	wb_Copyright3(a6),-(sp)	; 3rd Copyright line
		move.l	wb_Copyright2(a6),-(sp)	; 2nd Copyright line
		move.l	wb_Copyright1(a6),-(sp)	; 1st Copyright line
		move.l	d3,-(sp)		; Revision (Disk)
		move.l	d2,-(sp)		; Version (Disk)
		move.l	d4,-(sp)		; the "version" string
		pea	_SystemWorkbenchName	; "Workbench"
		move.w	SoftVer(a5),d3		; Get Revision of ROM
		move.l	d3,-(sp)		; Revision (ROM)
		move.w	LIB_VERSION(a5),d3	; Get Version of ROM
		move.l	d3,-(sp)		; Version (ROM)
		move.l	d4,-(sp)		; the "version" string
		pea	_KickstartName(pc)	; "Kickstart"
		move.l	sp,a3			; Save a pointer to this
		lea	_VersionFormat(pc),a2	; Point at format string...
*
* Now build the EZ structure...
*
		moveq.l	#30,d0			; The "OK" string
		jsr	_LVOQuoteWorkbench(a6)	; Get the real string
make_ez:	move.l	d0,-(sp)		; es_GadgetFormat
		move.l	a2,-(sp)		; es_TextFormat
		move.l	wb_Copyright4(a6),-(sp)	; es_Title
		clr.l	-(sp)			; es_Flags
		moveq.l	#20,d0			; size of es structure...
		move.l	d0,-(sp)		; es_StructSize
		move.l	sp,a1			; Pointer to es_structure...
		sub.l	a2,a2			; Clear a2
		move.l	wb_BackWindow(a6),a0	; Base window pointer
*
* Now call intuition...
*
		move.l	wb_IntuitionBase(a6),a5	; Get IntuitionBase
		exg	a5,a6			; Put it into a6...
		jsr	_LVOEasyRequestArgs(a6)	; Call it...
		exg	a5,a6			; Restore...
		move.l	a4,sp			; Release stack
		rts
*
*******************************************************************************
*
* Ok, so we have a message that is for me, what do we do about it?
*
ForMe:		move.l	#LineSize,d0		; Get Line0 size...
		sub.l	d0,sp			; Get the space on the stack...
		move.l	sp,a1			; Point at it...
		lea	Line(pc),a2		; Point at code...
		sub.l	a3,a3			; Clear a3...
*
*******************************************************************************
*
* Do the line decode into the buffer...  (a1==buffer, a2==line)
*
DoLine:		moveq.l	#4,d1			; Set character count.
		move.l	(a2)+,d0		; Get next long-word
		rol.l	#2,d0			; Preshift...
DoLine2:	rol.l	#6,d0			; Rotate in next 6-bit byte
		moveq.l	#$3F,d2			; 6 bits of mask
		and.l	d0,d2			; Mask into d2...
		beq.s	SkipChecks		; Skip to character checks
		subq.l	#1,d2			; Check if 1
		bne.s	TokenNot1
		moveq.l	#':',d2			; A 1 token is ': '
		move.b	d2,(a1)+		; Store it
		bra.s	DoLineSpace		; Do a space
TokenNot1:	subq.l	#1,d2			; Check if 2
		bne.s	TokenNot2
		moveq.l	#',',d2			; A 2 token is ', '
		move.b	d2,(a1)+		; Store it
		bra.s	DoLineSpace		; Do a space
TokenNot2:	subq.l	#1,d2			; Check if 3
		bne.s	TokenNot3
DoLineSpace:	moveq.l	#-29,d2			; A 3 token is ' '
TokenNot3:	subq.l	#1,d2			; Check if 4
		bne.s	TokenNot4		; Skip it not..
		moveq.l	#-16,d2			; A 4 token is '.'
TokenNot4:	subq.l	#1,d2			; Check if 5
		bne.s	TokenNot5		; Skip it not
		moveq.l	#-30,d2			; A 5 token is '!'
TokenNot5:	subq.l	#1,d2			; Check if 6
		bne.s	TokenNot6		; Skip if not
		moveq.l	#-54,d2			; A 6 token is a NewLine
TokenNot6:	sub.b	#26,d2			; Subtract z+1 token
		bmi.s	NotLower		; If not negative, skip...
		addq.l	#6,d2			; Shift to lower...
NotLower:	add.b	#'@@'+26,d2		; If not a token, convert to
SkipChecks:	move.b	d2,(a1)+		; character and store
		beq.s	LineDone		; Check for NULL
		dbra	d1,DoLine2		; Loop back for bits...
		bra.s	DoLine			; Loop for more line...
LineDone:	move.l	a3,d0			; Get d0 set up...
		move.l	a1,a3			; Get new a3 setting...
		beq.s	DoLine			; If d0 is NULL, loop back...
		move.l	sp,a2			; Get a2 set up...
		bra	make_ez			; Make the requester

*
*******************************************************************************
*
Line:
	; We made it...++
	; OS Group: M.Sinz, D.Greenwald, R.Jesup, J.Horanoff+
	; GFX: S.Shanson, C.Green, J.Barkley+
	; GUI: P.Cherna, M.Taillefer, D.Junod, K.Kuwata+
	; NET: B.Jackson, G.Miller, K.Dyke+
	; SP: E.Cotton, P.Pawlik+
	; Others: Porter, Bryce, Lauren+
	; Others: A.Havemose, Ned, Carolyn, CATS
	;
 dc.l $1D943B61,$24943A74,$04104186,$15643372,$2FD70053,$04669BBA,$02284372
 dc.l $2596EDE1,$2C902604,$10973D70,$024043AF,$3286EBE6,$2618D31E,$01644668
 dc.l $21BB3BEE,$02244372,$2596E090,$04221CAB,$2C97918D,$1B3C1584,$09A25CAE
 dc.l $2109311A,$21A6CB25,$2697208A,$04435BAF,$24091111,$35DE1D21,$0650B681
 dc.l $08110863,$2BCEFB82,$0D113A6C,$2C972091,$042B9AE5,$0665604B,$0426FD34
 dc.l $2FB82584,$16877B29,$2B195D28,$25CB3056,$2FCB4972,$02232E63,$25092875
 dc.l $3296E195,$34A25CB3,$011C43A1,$3696DBF3,$25094964,$02261CAF,$2CE6E089
 dc.l $07699000
	; Better than ever!
	;
 dc.l $08974D25,$320F4A21,$2E0E5DA5,$32140000

LineEnd:
LineSize:	EQU	(LineEnd-Line)*2
*
*******************************************************************************
*
	END
@


38.23
log
@Fixed some minor quoting
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.22 92/11/13 11:15:10 mks Exp Locker: mks $
d5 3
d764 1
a764 1
	; GFX: S.Shanson, C.Green, J.Barkley, A.Havemose+
d766 2
a767 2
	; SP: E.Cotton, P.Pawlik, D.DeLarge+
	; Net: B.Jackson, G.Miller, K.Dyke+
d769 1
a769 1
	; Others: Andy, Carolyn, Bart, Ned, CATS
d773 6
a778 6
 dc.l $21BB3BEE,$02244372,$2596E090,$04221CAB,$2C979087,$043A1DA5,$2DBF3946
 dc.l $0D6CF056,$04268972,$2E8424C4,$1A869B2C,$259A5C82,$0A110D6E,$2F902444
 dc.l $11D77874,$21199581,$0B109BF4,$34BEE096,$045A1DEC,$29AC2284,$0A952872
 dc.l $27946525,$34048110,$218EBCEF,$2E08D113,$29B2C972,$024442B9,$2B946574
 dc.l $28972CC1,$16BF2D25,$32088CB9,$239424A1,$35CA5B86,$15D28972,$33047BA4
 dc.l $39089872,$2FB39B82,$08872D02,$14964089,$07699000
@


38.22
log
@Updated the text again...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.21 92/11/09 18:31:15 mks Exp Locker: mks $
d5 3
d765 2
a766 2
	; Others: Bryce, Bart, Porter, Lauren+
	; Others: Andy, Carolyn, Ned, CATS
d774 2
a775 2
 dc.l $28972CC1,$08CB98E5,$02221CB4,$025AFCB4,$25C824A1,$35CA5B86,$15D28972
 dc.l $33047BA4,$39089872,$2FB39B82,$14964089,$07699000
@


38.21
log
@Changed the special text
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.20 92/08/25 12:39:45 mks Exp Locker: mks $
d5 3
d760 1
a760 1
	; SP: E.Cotton, P.Pawlik+
d762 2
a763 2
	; Others: Bryce, Duck, Bart, Porter, Lauren+
	; Others: Andy, Carolyn, Ned, CATS, SA
d769 4
a772 4
 dc.l $11D77874,$21199581,$0B109BF4,$34BEE096,$045A1DEC,$29AC6525,$34048110
 dc.l $218EBCEF,$2E08D113,$29B2C972,$024442B9,$2B946574,$28972CC1,$08CB98E5
 dc.l $022B58EB,$02221CB4,$025AFCB4,$25C824A1,$35CA5B86,$15D28972,$33047BA4
 dc.l $39089872,$2FB39B82,$14964089,$07699099,$07000000
@


38.20
log
@Saved some space by removing extra init code...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.19 92/08/20 10:00:17 mks Exp Locker: mks $
d5 3
d754 4
a757 3
	; OS Group: M.Sinz, P.Cherna, D.Greenwald, R.Jesup+
	; GFX: S.Shanson, C.Green, B.Whitebook, A.Havemose+
	; SP: E.Cotton, M.Taillefer, D.Junod, P.Pawlik, K.Kuwata+
d759 2
a760 2
	; Others: Bryce, Jimm, Duck, Kodiak, Porter, Lauren+
	; Others: Andy, Carolyn, Steve, Ned, CATS, SA
d762 8
a769 8
 dc.l $1D943B61,$24943A74,$04104186,$15643372,$2FD70053,$04669BBA,$02584268
 dc.l $25CAE842,$0A10DCA5,$25BB786C,$24098110,$25CF5C06,$0D31E059,$0466886E
 dc.l $33BEE089,$04372965,$2E08811D,$28A74962,$2FBEB087,$043A1DA5,$2DBF3946
 dc.l $195812C4,$09BF4D2F,$2E09311A,$21A6CB25,$2697208A,$04435BAF,$24096116
 dc.l $21DECA6B,$02444475,$37874846,$14974048,$044218EB,$33BEE08D,$044E9B2C
 dc.l $25C82444,$0AE6B946,$15D28972,$33048CB9,$23942429,$2DB422B5,$23AC246F
 dc.l $24A61AC2,$16BF2D25,$32092875,$3296E195,$34A25CB3,$011EE939,$02261CAF
 dc.l $2CE6E099,$34976942,$14964089,$07699099,$07000000
@


38.19
log
@Now uses the ROM copyright from the cached version
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.18 92/08/20 08:59:17 mks Exp Locker: mks $
d5 3
a304 5
	lea	_WorkbenchName(pc),a0	; Get WorkbenchName
	move.l	a0,LN_NAME(a1)		; Point at name
	lea	_VERSTRING(pc),a0	; Get version string...
	move.l	a0,LIB_IDSTRING(a1)	; Set version string
	move.w	#VERNUM,LIB_VERSION(a1)
@


38.18
log
@Removed the beta version string from the requester and
made it use the special EXEC version string for that.
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.17 92/08/04 13:20:46 mks Exp Locker: mks $
d5 4
d367 3
d674 1
a674 6
		move.l	wb_SysBase(a6),a5	; Get EXECBASE
		exg	a5,a6			; Swap it...
		moveq.l	#-5,d0			; The Marketing name...
		jsr	_LVOTaggedOpenLibrary(a6)
		exg	a5,a6			; Restore WorkbenchBase
		move.l	d0,-(sp)		; es_Title
@


38.17
log
@Some changes to the About requester
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.16 92/07/16 15:19:23 mks Exp Locker: mks $
d5 3
d178 1
a178 5
_VersionFormat:
;			dc.b	'%s %s %ld.%ld',10,'%s %s %ld.%ld',10,10,'%s',10,'%s',10,'%s',0
;
; Beta version of the format string....
			dc.b	'%s beta-%s %ld.%ld',10,'%s beta-%s %ld.%ld',10,10,'%s',10,'%s',10,'%s',0
d667 6
a672 1
		pea	_SystemWorkbenchName	; es_Title
@


38.16
log
@Added Lauren to the others group...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.15 92/07/13 18:34:59 mks Exp Locker: mks $
d5 3
d749 1
a749 1
	; SP: E.Cotton, M.Taillefer, D.Junod, P.Pawlik+
d758 4
a761 4
 dc.l $21DECA6B,$06525D01,$08110863,$2BCEFB82,$0D113A6C,$2C972091,$042B9AE5
 dc.l $06574A25,$32CC1232,$398E5090,$29B6D08A,$358EB091,$2F92986B,$025AFCB4
 dc.l $25C824A1,$35CA5B86,$15D28972,$33047BA4,$39089872,$2FB39B82,$19D25DA5
 dc.l $02525902,$091DA642,$191C0000
@


38.15
log
@Added config locking to the async tools...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.14 92/06/29 09:55:08 mks Exp Locker: mks $
d5 3
d748 1
a748 1
	; Others: Bryce, Jimm, Duck, Kodiak, Porter+
d757 2
a758 2
 dc.l $25C86574,$28972CC1,$07BA4E42,$09872BEC,$39B82674,$25DA5094,$25902247
 dc.l $1A642647,$00000000
@


38.14
log
@Names have been changed to protect the uninitiated ;^)
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.13 92/06/22 14:53:09 mks Exp Locker: mks $
d5 3
a239 1
;	move.l	#_AboutWorkbench,a5	; Point at real code.
d279 1
d281 1
@


38.13
log
@Updated some minor strings
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.12 92/05/30 18:16:47 mks Exp Locker: mks $
d5 3
d738 1
a738 1
	; GFX: S.Shanson, C.Green, B.Whitebook, S.Beats+
d740 1
a740 1
	; Net: B.Jackson, G.Miller, K.Dyke, D.Larson+
d742 1
a742 1
	; Others: Allan, Andy, Carolyn, Ned, CATS, SA
d746 6
a751 6
 dc.l $33BEE089,$04372965,$2E08811D,$28A74962,$2FBEB099,$04225874,$33199581
 dc.l $0B109BF4,$34BEE093,$046A1A6C,$2C966972,$02284435,$2EBE4096,$045A1DEC
 dc.l $29AC6525,$34048110,$218EBCEF,$2E08D113,$29B2C972,$024442B9,$2B942284
 dc.l $12872CEF,$2E195D28,$25CB3048,$32E63942,$10A6DB42,$0AD63AC2,$11BE4A61
 dc.l $2B096BF2,$34972195,$34A25CB3,$011ECB21,$2E087BA4,$39089872,$2FB39B82
 dc.l $14964089,$07699099,$07000000
d760 1
a760 1

@


38.12
log
@Added the WBInfo LVO and stubs
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.11 92/04/16 10:27:49 mks Exp Locker: mks $
d5 3
d735 1
a735 1
	; GFX: B.Whitebook, S.Shanson, C.Green, S.Beats, A.Havemose+
d739 1
a739 2
	; Others: Andy, Carolyn, CATS, PA+
	; +Thanks to: Bill Hawes, Software Distillery
d742 8
a749 9
 dc.l $25CAE842,$0A10DCA5,$25BB786C,$24098110,$25CF5C06,$0D31E048,$04768A74
 dc.l $258AFBEB,$02644668,$21BB3BEE,$02244372,$2596E099,$04225874,$3308710E
 dc.l $21DA5B6F,$33946656,$012C426F,$34D2FB82,$1311A869,$2CB259A5,$3208A110
 dc.l $35BAF902,$16116877,$2CA6B194,$25D01204,$10863AF3,$2FB82344,$13A6CB25
 dc.l $3209110A,$39AE508A,$044A1CB3,$2FB86574,$28972CC1,$08CB98E5,$02429B6D
 dc.l $022B58EB,$0246F929,$21AC25AF,$32D25C86,$15D28972,$33047BA4,$39089872
 dc.l $2FB39B82,$091DA642,$161C619A,$2886EAF3,$03D2F048,$29B2C0CE,$21DE5CC2
 dc.l $19BE6D37,$21CA50CA,$29CF4A6C,$2C972E40
	; Better than ever!!!
d751 1
a751 1
 dc.l $08974D25,$320F4A21,$2E0E5DA5,$32145140
@


38.11
log
@Added the beta version string for beta releases
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.10 92/04/16 10:02:41 mks Exp Locker: mks $
d5 3
d73 1
d116 1
d217 9
a225 1
	;------- this is the enry point for the "About Workbench" requester
d234 1
a234 1
	;------- this is the enry point for the "async tool loader"
d473 7
d504 1
d527 14
d731 4
a734 4
	; OS Group: Michael, Peter, Darren, Randell+
	; GFX: Bart, Spence, Chris, Steve, Allan+
	; SP: Eric, Martin, David, Palmyra+
	; Net: Brian, Greg, Ken, Dale+
d739 10
a748 9
 dc.l $1D943B61,$24943A74,$04104186,$15643372,$2FD70053,$298E8865,$2C096974
 dc.l $25C822A1,$32CA5B82,$1886E925,$2CB0634C,$1E048872,$34099C25,$2E8E5089
 dc.l $28CA9CC2,$19D25DA5,$021ECB21,$2E199581,$0BCA98C2,$13872D29,$2E08A876
 dc.l $299025A1,$2CB79CA1,$06525D01,$08CA986E,$02372967,$02465B82,$0A86C946
 dc.l $15D28972,$33048CB9,$23942429,$2DB422B5,$23AC246F,$24A61AC2,$16BF2D25
 dc.l $32195D28,$25CB3047,$2E939089,$21CAFB39,$2E0891DA,$190961C6,$066A886E
 dc.l $2BCC3D2F,$01229B2C,$033A1DE5,$33099BE6,$34DE1CA5,$032A9CF4,$29B2C972
 dc.l $39000000
	; Better than ever!
d750 1
a750 1
 dc.l $08974D25,$320F4A21,$2E0E5DA5,$32140000
@


38.10
log
@Changed to use EXEC's strings
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.9 92/04/14 11:24:37 mks Exp Locker: mks $
d5 3
d154 6
a159 1
_VersionFormat:		dc.b	'%s %s %ld.%ld',10,'%s %s %ld.%ld',10,10,'%s',10,'%s',10,'%s',0
@


38.9
log
@Changed to use TaggedOpenLibrary...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.8 92/02/18 12:30:36 mks Exp Locker: mks $
d5 3
a112 3
	XDEF	_Copyright
	XDEF	_Copyright2
	XDEF	_Copyright3
a136 7
; The following is the copyright split into three lines
; for use in both the titlebar and the About requester.
;
_Copyright:		dc.b	'Copyright © 1985-1992',0
_Copyright2:		dc.b	'Commodore-Amiga, Inc.',0
_Copyright3:		dc.b	'All Rights Reserved',0
;
d146 1
a146 1
* All Rights Reserved       *
d155 1
a155 1
_CopyrightFormat:	dc.b	'%s %s %s',0
d317 10
d587 3
a589 3
		pea	_Copyright3(pc)		; 3rd Copyright line
		pea	_Copyright2(pc)		; 2nd Copyright line
		pea	_Copyright(pc)		; 1st Copyright line
@


38.8
log
@Changed part of the 8to6 database
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.7 92/02/18 12:13:30 mks Exp Locker: mks $
d5 3
d46 2
d73 1
a166 8
LibNames:	dc.b	'graphics.library',0
		dc.b	'intuition.library',0
		dc.b	'icon.library',0
		dc.b	'dos.library',0
		dc.b	'layers.library',0
		dc.b	'gadtools.library',0
		dc.b	'utility.library',0
		dc.b	0
d169 8
a176 7
LibErrors:	dc.w	37,AO_GraphicsLib
		dc.w	37,AO_Intuition
		dc.w	37,AO_IconLib
		dc.w	37,AO_DOSLib
		dc.w	37,AO_LayersLib
		dc.w	37,AO_GadTools
		dc.w	37,AO_UtilityLib
d183 2
a184 3
		lea	_WorkbenchName(pc),a1	; "workbench.library"
		moveq.l	#0,d0			; Any version
		jsr	_LVOOpenLibrary(a6)	; We know this will work
d249 1
a249 2
	moveq.l	#36,d0		; V36 workbench...
	lea	_subsysName(pc),a1
d251 2
a252 2
	jsr	_LVOOpenLibrary(a6)	; Open workbench.library...
					; We know we are open...
d299 1
a299 1
	movem.l	a2-a6,-(sp)
d304 8
a311 18
	lea	LibErrors(pc),a3	; Point at first error
	lea	LibNames(pc),a4		; Point at first name
DoLoop:	moveq.l	#0,d0			; Clear return result
	tst.b	(a4)			; Do we have a name?
	beq.s	OpenAll_Done		; If not, skip...
	move.l	a4,a1			; Get library name
	moveq	#0,d0			; Clear D0
	move.w	(a3)+,d0		; Get version
	JSR	_LVOOpenLibrary(a6)	; Open it up...
	moveq.l	#0,d1			; Clear d1
	move.w	(a3)+,d1		; Get the error...
	move.l	d0,(a2)+		; Save the result...
	beq.s	OpenError
Open_N:	tst.b	(a4)+			; Look for the NULL
	bne.s	Open_N			; (for next string)
	bra.s	DoLoop			; Do next lib...

OpenError:
d316 2
a317 2
	move.l	d1,d7
	or.l	#AN_Workbench!AG_OpenLib,d7	; Set other bits...
d320 1
a320 1
	movem.l	(sp)+,a2-a6
d324 1
a324 1
	movem.l	(sp)+,a2-a6		; Restore...
@


38.7
log
@New encoding for 8to6 data...
New QuickFilter...
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.6 92/01/07 14:03:53 mks Exp Locker: mks $
d5 4
d703 1
a703 1
	; Others: Andy, Carolyn, CATS, QA+
d711 1
a711 1
 dc.l $32195D28,$25CB3047,$2E939089,$21CAFB39,$2E0891DA,$190971C6,$066A886E
@


38.6
log
@Major rework of how resources are allocated.  Also no longer opens
diskfont.library since the new configuration code will do that.
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.5 91/12/02 19:43:59 mks Exp Locker: mks $
d5 4
d55 1
a55 1
	XREF	_AboutWorkbench
d72 1
d97 7
d125 29
d155 2
a156 4
_subsysName:		dc.b 	'workbench'
dot_library:		dc.b	'.library',0

*
d214 2
a215 1
	move.l	#_AboutWorkbench,a5	; Point at real code.
d549 1
a549 2
		cmp.w	#Q_MUST,d0		; Check the *MUST* ones
		beq.s	ForMe			; It be for me (or not)
d554 80
d636 5
a640 31
ForMe:		lea	wb_CurrentError(a6),a1	; Error buffer pointer...
		clr.b	(a1)			; Make a NULL string...
*
* We now have a pointer at the error string buffer and a menupick that is
* important.  Check the rest...
*
		movem.l	a2/d2,-(sp)		; Save a2/d2...
		move.w	im_Code(a0),d0		; Get menu number...
		ror.w	#5,d0			; Shift it into possition...
		moveq.l	#NOITEM,d1		; Mask for items only...
		and.l	d1,d0			; Mask d0...
*
		lea	Line1(pc),a2		; Point at the first line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line2(pc),a2		; Point at the second line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line3(pc),a2		; Point at the second line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line4(pc),a2		; Point at the second line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line5(pc),a2		; Point at the second line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line6(pc),a2		; Point at the second line
		subq.l	#1,d0			; Check if that is what we want
		beq.s	DoLine
		lea	Line7(pc),a2		; Final line pointer...
d665 1
a665 1
DoLineSpace:	moveq.l	#-31,d2			; A 3 token is ' '
d668 11
a678 2
		moveq.l	#-18,d2			; A 4 token is '.'
TokenNot4:	add.b	#'@@',d2			; If not a token, convert to
d683 33
a715 20
LineDone:	movem.l	(sp)+,a2/d2		; Restore a2/d2...
		move.w	#MENUNULL,im_Code(a0)	; Clear the menu number...
		rts				; We be done...
*
*******************************************************************************
*
Line1: ; OS Group: Michael, Peter, Darren, Randell
 dc.l $135C32F6,$33E74051,$2D9EC969,$30094A78,$29D82225,$36DA9C82,$16972A29,$30C00000
Line2: ; GFX: Bart, Spence, Chris, Steve, Allan
 dc.l $0B29C046,$25DB8097,$34A729E9,$021ECDAD,$37097E29,$3AA42170,$30972000
Line3: ; SP: Eric, Martin, David, Brian, Greg, Dale
 dc.l $17501276,$2D9C2465,$36E2DC82,$0897AB68,$021B6B65,$3208BDA9,$2B088970,$29000000
Line4: ; Others: Bryce, Jimm, Duck, Kodiak, Andy, Porter, Carolyn, CATS, QA
 dc.l $13E2CA76,$37046DBD,$27A423AD,$31C42239,$27BC23F3,$28B65BC2,$05CA8F42,$14CF6E29,$36087976,$33C3DC82,$071585C2,$15140000
Line5: ; Thanks to: Bill Hawes, Software Distillery
 dc.l $18B25CAF,$370F8CC1,$06B70C03,$0C97BA77,$025F3AB8,$3B976A43,$08B77E2D,$30C29DBD,0
Line6: ; Better than ever.
 dc.l $06A78E29,$360F8B25,$320E9EA9,$36100000
Line7: ; We made it...
 dc.l $1BA43C65,$28A43B78,$04104000
@


38.5
log
@Fixed "backwards" bug...  Wrong branch on Open of DiskFont library
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.4 91/11/13 10:58:25 mks Exp Locker: mks $
d5 3
a85 1
	xdef	_DiskfontBaseOffset
a122 1
		dc.b	'diskfont.library',0
d126 1
a132 1
		dc.w	0,0		; No DiskFont version or error
a137 16
		xdef	_CloseLibraries
_CloseLibraries:
		movem.l	a2/a3/a6,-(sp)		; Save
		lea	wb_SysBase(a6),a2	; Point at sysbase...
		lea	wb_TimerBase(a6),a3	; End point...
		move.l	(a2)+,a6		; Get ExecBase
CloseLoop:	move.l	(a2),a1			; Get library
		clr.l	(a2)+			; Clear pointer
		jsr	_LVOCloseLibrary(a6)	; Close it
		cmp.l	a2,a3			; Finished?
		bne.s	CloseLoop		; Do some more
		movem.l	(sp)+,a2/a3/a6		; Restore
		rts
*
*******************************************************************************
*
d144 2
a145 31
		move.l	d0,a5			; And into a5 (workbench base)
*
*******************************************************************************
*
* This routine will be used to open all of the libraries workbench uses...
* It passes in NULL if all is OK, alert number if something is bad...
*
		lea	wb_SysBase(a5),a2	; Point at first one...
		move.l	a6,(a2)+		; Set up SysBase...
		lea	LibErrors(pc),a3	; Point at first error
		lea	LibNames(pc),a4		; Point at first name
DoLoop:		moveq.l	#0,d0			; Clear return result
		tst.b	(a4)			; Do we have a name?
		beq.s	OpenAll_Done		; If not, skip...
		move.l	a4,a1			; Get library name
		moveq	#0,d0			; Clear D0
		move.w	(a3)+,d0		; Get version
		JSR	_LVOOpenLibrary(a6)	; Open it up...
		moveq.l	#0,d1			; Clear d1
		move.w	(a3)+,d1		; Get the error...
		move.l	d0,(a2)+		; Save the result...
		beq.s	OpenError
OpenNext:	tst.b	(a4)+			; Look for the NULL
		bne.s	OpenNext		; (for next string)
		bra.s	DoLoop			; Do next lib...
OpenError:	move.l	d1,d0			; is this a real error?
		beq.s	OpenNext		; If not, open next
OpenAll_Done:	move.l	a5,a6			; Set up WorkbenchBase
		move.l	d0,-(sp)		; Result onto stack
		jsr	_wbmain			; Start the main routine...
		addq.l	#4,a7			; Adjust the stack back down...
a154 1
entrywbReserved84:
d159 1
a224 1

d234 12
d254 42
a295 1
10$	addq.w	#1,LIB_OPENCNT(a6)	; inc lib open count
d301 16
d414 4
d438 5
a442 1
	FUNCDEF	wbReserved84
d447 1
a471 1
_DiskfontBaseOffset	EQU	wb_DiskfontBase
d589 6
a594 6
Line2: ; GFX: Allan, Bart, Spence, Steve, Chris
 dc.l $0B29C045,$30C25C82,$06976E02,$17D29CA7,$29097E29,$3AA421EC,$36B77000
Line3: ; SP: Eric, Martin T., Brian, David, Martin H.
 dc.l $17501276,$2D9C2465,$36E2DC83,$181021B6,$2D972088,$25EADA02,$11976E2D,$320CC100
Line4: ; Others: Bryce, Dale, Jimm, Kodiak, Andy, Porter, Carolyn, CATS, QA
 dc.l $13E2CA76,$37046DBD,$27A42225,$30A423AD,$31C423F3,$28B65BC2,$05CA8F42,$14CF6E29,$36087976,$33C3DC82,$071585C2,$15140000
@


38.4
log
@Now does all of the InitFunc here.  (Silly to do it in C)
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.3 91/11/12 18:40:54 mks Exp Locker: mks $
d5 3
d185 1
a185 1
		bne.s	OpenNext		; If not, open next
@


38.3
log
@Now does thw open and close of the libraries in here.
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.2 91/11/12 10:07:56 mks Exp Locker: mks $
d5 3
a86 3
	xdef	_VERSION
	xdef	_REVISION

d268 8
a275 4
	move.l	a0,-(sp)	; seglist ptr on stack
	move.l	d0,-(sp)	; wbbase on stack
	jsr	_InitFunc	; init library
	addq.l	#8,sp		; restore stack
a567 6

	DATA
_VERSION:
	dc.w	VERNUM
_REVISION
	dc.w	REVNUM
@


38.2
log
@Small change to some comments/constants
@
text
@d2 1
a2 1
* $Id: abs.asm,v 38.1 91/06/28 15:44:00 mks Exp Locker: mks $
d5 3
a63 2
	XDEF	_FakeOpenLibrary
	XDEF	_FakeInitResident
d109 2
a110 1
_subsysName:		dc.b 	'workbench.library',0
d112 38
d151 40
a190 6
_WbSegment:
	pea	0		; arguement (Standard start, not from lib)
	jsr	_wbmain		; Start the main routine...
	addq.l	#4,a7		; Adjust the stack back down...
_exit

a410 18
_FakeInitResident:
	lea	initLDescrip,A1
	moveq	#0,d1
	move.l	a6,-(sp)
	move.l	_AbsExecBase,a6
	jsr	_LVOInitResident(a6)
	move.l	(sp)+,a6
	rts

_FakeOpenLibrary:
	MOVEM.L	4(SP),D0/A1
	EXG	D0,A1
	MOVE.L	A6,-(SP)
	MOVE.L	_AbsExecBase,A6
	JSR	_LVOOpenLibrary(A6)
	MOVE.L	(SP)+,A6
	RTS

d548 2
a549 2
Line1: ; OS Group: Bryce, Michael, Peter, Darren, Randell
 dc.l $135C32F6,$33E74046,$36F67A42,$11B67B25,$29C02529,$38A76088,$25DB6A72,$025A5CA8,$29C30000
d554 2
a555 2
Line4: ; Other: Andy, Dale, Jimm, Kodiak, Ned, Porter, Carolyn, CATS, QA
 dc.l $13E2CA76,$01172A3D,$02225C29,$023ADC71,$023F3A2D,$25BC24A9,$28094CF6,$38A76087,$25DB3C3D,$32087158,$17095140
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
* $Id$
d4 4
a7 1
* $Log$
d494 6
a499 6
Line2: ; GFX: Allan, Bart, Spence, Steve, Chris, Ray
 dc.l $0B29C045,$30C25C82,$06976E02,$17D29CA7,$29097E29,$3AA421EC,$36B77096,$25F40000
Line3: ; SP: Eric, Martin H., Bill, Martin T., Brian, Kevin
 dc.l $17501276,$2D9C2465,$36E2DC83,$0C1021AD,$30C02465,$36E2DC83,$181021B6,$2D97208F,$29EADC80
Line4: ; Other: Andy, Dale, Jimm, Kodiak, Ned, Porter, Carolyn, David, CATS, QA
 dc.l $13E2CA76,$01172A3D,$02225C29,$023ADC71,$023F3A2D,$25BC24A9,$28094CF6,$38A76087,$25DB3C3D,$3208897A,$2DA021C5,$185C2545,0
d502 3
a504 1
Line6: ; We made it...
a505 2
Line7: ; Better than ever.
 dc.l $06A78E29,$360F8B25,$320E9EA9,$36100000
@
