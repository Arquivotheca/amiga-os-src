head     39.2;
branch   ;
access   ;
symbols  V40_5:39.2 V40_4:39.2 V40_3:39.2 V40_2:39.2 V40_1:39.2 V39_56:39.2 V39_54:39.2 V39_52:39.2 V39_51:39.2 V39_50:39.2 V39_48:39.2 V39_46:39.2 V39_45:39.2 V39_44:39.2 V39_43:39.2 V39_42:39.2 V39_41:39.2 V39_40:39.2 V39_39:39.2 V39_38:39.2 V39_37:39.2 V39_36:39.2 V39_35:39.2 V39_34:39.2 V39_33:39.2 V39_32:39.2 V39_30:39.2 V39_29:39.1 V39_27:38.4 V39_26:38.2 V39_25:38.2 V39_23:38.2 V39_22:38.1 V39_21:38.1 V39_20:38.1 V39_18:38.1 V39_17:38.1 V39_16:38.1 V39_15:38.1 V39_14:38.1 V39_12:38.1 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


39.2
date     92.05.31.16.32.47;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.31.01.51.35;  author mks;  state Exp;
branches ;
next     38.4;

38.4
date     92.05.26.17.21.28;  author mks;  state Exp;
branches ;
next     38.3;

38.3
date     92.05.26.13.27.51;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     92.04.27.14.23.38;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.36.24;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


39.2
log
@Now checks to see if the icon still exists before it just
writes all over it.
@
text
@/*
 * $Id: infoio.c,v 39.1 92/05/31 01:51:35 mks Exp Locker: mks $
 *
 * $Log:	infoio.c,v $
 * Revision 39.1  92/05/31  01:51:35  mks
 * Now is the ASYNC, LVO based INFO...
 *
 * Revision 38.4  92/05/26  17:21:28  mks
 * Now uses the UpdateWorkbench code to update the icon after a save.
 * This makes the icon get reloaded and solves the problem with icons
 * that have tool types changed and thus "loose" memory until the icon
 * is released completely.  This also means that the old best-fit code
 * was able to go away.
 *
 * Revision 38.3  92/05/26  13:27:51  mks
 * Now calls UpdateWorkbench() to update the icon information
 *
 * Revision 38.2  92/04/27  14:23:38  mks
 * The "NULL" parameters have been removed.  (Unused parameter)
 *
 * Revision 38.1  91/06/24  11:36:24  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

/*------------------------------------------------------------------------*/

#include <string.h>

#include <exec/memory.h>
#include <intuition/intuition.h>
#include "info.h"
#include "support.h"
#include "global.h"

#include "proto.h"

/*------------------------------------------------------------------------*/

void InfoSave(struct InfoTag *itag)
{
struct	DiskObject	*dobj=NULL;
struct	DiskObject	LocalDOBJ;
	char		**NewTools=NULL;

	LocalDOBJ=*(itag->it_Obj);
	if (!(itag->it_ObjFake))
	{
		dobj=&LocalDOBJ;

		/* Check if object is still there... */
		if (!SETPROTECTION(itag->it_NameInfo,FIBF_EXECUTE))
		{
			if (IOERR()==ERROR_OBJECT_NOT_FOUND) dobj=NULL;
		}
	}

	if (dobj)
	{
		if (itag->it_Stack) dobj->do_StackSize=(((StrInfo(itag->it_Stack)->LongInt)+3) >> 2) * 4;
		if (itag->it_DefaultTool) dobj->do_DefaultTool=StrInfo(itag->it_DefaultTool)->Buffer;
		if (itag->it_MaskType & MASK_TOOLTYPES)
		{
		struct	Node	*node;
			ULONG	size=4;

			for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ; node = node->ln_Succ) size+=4;

			if (NewTools=ALLOCVEC(size,MEMF_PUBLIC))
			{
				size=0;
				for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ; node = node->ln_Succ) NewTools[size++]=node->ln_Name;
				NewTools[size]=NULL;
				dobj->do_ToolTypes=NewTools;
			}
		}

		PutDiskObject(itag->it_Name,dobj);
		if (itag->it_Flags & IT_GOT_FIB) SETPROTECTION(itag->it_NameInfo,(itag->it_Protection & (FIBF_DELETE|FIBF_WRITE)) | FIBF_EXECUTE);

		FREEVEC(NewTools);
	}

	if (itag->it_Flags & IT_GOT_FIB)
	{
		SETPROTECTION(itag->it_Name,itag->it_Protection);
		if (itag->it_Comment) SETCOMMENT(itag->it_Name,StrInfo(itag->it_Comment)->Buffer);
	}
}
@


39.1
log
@Now is the ASYNC, LVO based INFO...
@
text
@d2 1
a2 1
 * $Id: infoio.c,v 38.4 92/05/26 17:21:28 mks Exp Locker: mks $
d5 3
d47 3
a49 1
	if (!(itag->it_ObjFake)) dobj=&LocalDOBJ;
d51 5
a55 4
	if (itag->it_Flags & IT_GOT_FIB)
	{
		if (itag->it_Comment) SETCOMMENT(itag->it_Name,StrInfo(itag->it_Comment)->Buffer);
		SETPROTECTION(itag->it_Name,itag->it_Protection);
a77 1
		SETPROTECTION(itag->it_NameInfo,FIBF_EXECUTE);
d80 1
d82 6
@


38.4
log
@Now uses the UpdateWorkbench code to update the icon after a save.
This makes the icon get reloaded and solves the problem with icons
that have tool types changed and thus "loose" memory until the icon
is released completely.  This also means that the old best-fit code
was able to go away.
@
text
@d2 1
a2 1
 * $Id: infoio.c,v 38.3 92/05/26 13:27:51 mks Exp Locker: mks $
d5 7
d37 1
a37 87
/*  Function Prototypes: */

BOOL BuildToolTypes(struct InfoTag *itag, struct WBObject *wbobj);
BOOL InfoSave(struct InfoTag *itag);

/*------------------------------------------------------------------------*/

/*/ BuildToolTypes()
 *
 * Function to build a new ToolTypes array based on the ToolTypeList as
 * modified by the user and on the old ToolTypes array.
 *
 * Created:  28-Jul-89, Peter Cherna (from InfoSave())
 * Modified:  5-Mar-90, Peter Cherna
 *
 * Returns: (BOOL) TRUE if successful.
 *
 */

BOOL BuildToolTypes(itag, wbobj)

    struct InfoTag *itag;
    struct WBObject *wbobj;

{
    struct Node *node;
    LONG newcount, new;
    char **newToolTypes;

    if (itag->it_MaskType & MASK_TOOLTYPES)
    {
        /*  Count the number of new ToolTypes: */
        newcount = 0;
        for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ; node = node->ln_Succ)
        {
            newcount++;
        }
        DP(("There are %ld new ToolTypes\n", (LONG) newcount));

        /*  Allocate the array of pointers to strings.  We need newcount+1
            pointers, for the ToolTypes and the terminating NULL pointer: */
        if (!(newToolTypes = (char **) WBFreeAlloc(&wbobj->wo_FreeList,
            (newcount + 1) * sizeof(char *), MEMF_CLEAR)))
        {
            DP(("Failed to allocate ToolTypes array of pointers\n"));
            return(FALSE);
        }

        new = 0;
        for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ;
            node = node->ln_Succ)
        {
            if (!(newToolTypes[new] = (char *)
                WBFreeAlloc(&wbobj->wo_FreeList, strlen(node->ln_Name)+1,
                NULL)))
            {
                return(FALSE);
            }
            /*  Copy the string over: */
            strcpy(newToolTypes[new], node->ln_Name);
            new++;
        }
        wbobj->wo_ToolTypes = newToolTypes;
    }
    return(TRUE);
}


/*------------------------------------------------------------------------*/

/*/ InfoSave()
 *
 * Function to save information that user specified in Info window.
 *
 * Created:  19-Jul-89, Peter Cherna
 * Modified: 10-Apr-90, Peter Cherna
 *
 * Returns: (BOOL) TRUE if successful.
 *
 * Bugs:
 *
 */

BOOL InfoSave(itag)

    struct InfoTag *itag;

d39 3
a41 1
    struct WBObject *wbobj;
d43 34
a76 58
    DP(("Welcome to InfoSave\n"));
    DP(("TTList:        %lx\n",&itag->it_ToolTypeList));
    DP(("Head:          %lx\n",HeadNode(&itag->it_ToolTypeList)));
    DP(("    ->ln_Pred: %lx\n",HeadNode(&itag->it_ToolTypeList)->ln_Pred));
    DP(("    ->ln_Succ: %lx\n",HeadNode(&itag->it_ToolTypeList)->ln_Succ));
    DP(("Tail:          %lx\n",TailNode(&itag->it_ToolTypeList)));
    DP(("    ->ln_Pred: %lx\n",TailNode(&itag->it_ToolTypeList)->ln_Pred));
    DP(("    ->ln_Succ: %lx\n",TailNode(&itag->it_ToolTypeList)->ln_Succ));

    /*  For convenience, since we use it so much: */
    wbobj = itag->it_WBObj;

    if (itag->it_Stack)
    {
        /*  Stuff new stacksize into WBObject: */
        wbobj->wo_StackSize = StrInfo(itag->it_Stack)->LongInt; /*!!! round to x4 */
        DP(("IS:  Stack is now %ld\n", wbobj->wo_StackSize));
    }
    if (itag->it_Comment)
    {
        /*  Set the comment field: */
        DP(("IS:  Calling SetComment(%s, %s)\n", wbobj->wo_Name, StrInfo(itag->it_Comment)->Buffer));
        SETCOMMENT(wbobj->wo_Name, StrInfo(itag->it_Comment)->Buffer);
    }

    if (itag->it_DefaultTool)
    {
        /*  Allocate space to store the default tool string: */
        if (!(wbobj->wo_DefaultTool = (char *) WBFreeAlloc(&wbobj->wo_FreeList,strlen(StrInfo(itag->it_DefaultTool)->Buffer)+1, NULL)))
        {
            DP(("Failed to allocate space for DefaultTool\n"));
            return(FALSE);
        }
        strcpy(wbobj->wo_DefaultTool,StrInfo(itag->it_DefaultTool)->Buffer);
        DP(("IS:  Default tool is now %s\n", wbobj->wo_DefaultTool));
    }

    BuildToolTypes(itag, wbobj);

    wbobj->wo_Protection = itag->it_Protection;

    /*
     * If this is not the disk, set the protection bits...
     */
    if (wbobj->wo_Type!=WBDISK) SETPROTECTION(wbobj->wo_Name,wbobj->wo_Protection);

    /*  Put the icon to disk and to Workbench: */
    if (!PutObject(wbobj))
    {
        DP(("IS:  PutObject failed\n"));
        return(FALSE);
    }

    /* Use the standard method for updating workbench... */
    UpdateWorkbench(((wbobj->wo_Type==WBDISK) ? DiskIconName : wbobj->wo_Name),GetParentsLock(wbobj),TRUE);

    DP(("IS:  Successfully completed\n"));
    return(TRUE);
a77 3


/*------------------------------------------------------------------------*/
@


38.3
log
@Now calls UpdateWorkbench() to update the icon information
@
text
@d2 1
a2 1
 * $Id: infoio.c,v 38.2 92/04/27 14:23:38 mks Exp Locker: mks $
d5 3
d56 1
a56 1
    LONG oldcount, newcount, old, new, bestold, extraspace, bestextraspace;
a57 1
    BOOL done;
a60 18
        /*  Memory allocations for an icon's ToolTypes are logged onto
            the icon's wo_FreeList, and freed when the icon vanishes
            from the Workbench (its window is closed).  This means that
            when ToolTypes are changed, memory for the old ToolTypes
            is still held until the icon vanishes.  Therefore, to minimize
            memory usage, we first try to recognize and re-use any ToolTypes
            strings that are unchanged, and then try to overwrite old
            (no longer needed) ToolTypes strings with new ones, if they
            are the same length or shorter: */

        /*  Count the number of old ToolTypes: */
        oldcount = 0;
        if (wbobj->wo_ToolTypes)
        {
            for (oldcount = 0; wbobj->wo_ToolTypes[oldcount]; oldcount++);
        }
        DP(("There are %ld old ToolTypes\n", (LONG) oldcount));

d63 1
a63 2
        for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ;
            node = node->ln_Succ)
a76 25
        /*  For each new ToolType, try to find an existing old ToolType
            that is identical: */
        new = 0;
        for (node = HeadNode(&itag->it_ToolTypeList); node->ln_Succ;
            node = node->ln_Succ)
        {
            old = 0;
            done = FALSE;
            while ((old < oldcount) && (!done))
            {
                if ((wbobj->wo_ToolTypes[old]) &&
                    (!strcmp(node->ln_Name, wbobj->wo_ToolTypes[old])))
                {
                    /*  Found a match, so re-claim the string, and mark
                        the old one as history: */
                    newToolTypes[new] = wbobj->wo_ToolTypes[old];
                    wbobj->wo_ToolTypes[old] = NULL;
                    DP(("New ToolType #%ld identical to old #%ld ('%s')\n",
                        (LONG) new, (LONG) old, newToolTypes[new]));
                    done = TRUE;
                }
                old++;
            }
            new++;
        }
a77 3
        /*  For each new ToolType for which we couldn't find an existing
            old ToolType that is identical, try and find an unreclaimed
            old ToolType whose space we can re-use: */
d82 3
a84 1
            if (!newToolTypes[new])
d86 1
a86 45
                old = 0;
                /*  Want to find the best old one to re-use, which is the
                    one that has the best extra space left over (as close
                    to zero as possible: */
                bestextraspace = 1000;
                bestold = -1;
                while (old < oldcount)
                {
                    if (wbobj->wo_ToolTypes[old])
                    {
                        extraspace = strlen(wbobj->wo_ToolTypes[old]) -
                            strlen(node->ln_Name);
                        if ((extraspace >= 0) && (extraspace < bestextraspace))
                        {
                            /*  This one is now the best we know: */
                            bestextraspace = extraspace;
                            bestold = old;
                        }
                    }
                    old++;
                }
                if (bestold != -1)
                {
                    /*  Re-use the best old one: */
                    DP(("Old ToolType #%ld ('%s') re-used as ",
                        bestold, wbobj->wo_ToolTypes[bestold]));
                    newToolTypes[new] = wbobj->wo_ToolTypes[bestold];
                    DP(("new ToolType #%ld ('%s')\n", new, node->ln_Name));
                    wbobj->wo_ToolTypes[bestold] = NULL;
                }
                else
                {
                    if (!(newToolTypes[new] = (char *)
                        WBFreeAlloc(&wbobj->wo_FreeList, strlen(node->ln_Name)+1,
                        NULL)))
                    {
                        DP(("Failed to allocate ToolTypes memory for #%ld\n",
                            new));
                        return(FALSE);
                    }
                    /*  Copy the string over: */
                    DP(("Allocated space for new ToolType #%ld ('%s')\n",
                        new, node->ln_Name));
                }
                strcpy(newToolTypes[new], node->ln_Name);
d88 2
d173 1
a173 1
/* Try to cause an update on the workbench display... */
@


38.2
log
@The "NULL" parameters have been removed.  (Unused parameter)
@
text
@d2 1
a2 1
 * $Id: infoio.c,v 38.1 91/06/24 11:36:24 mks Exp Locker: mks $
d5 3
d21 1
d217 1
a217 3
    /*!!!ShowZZPointer(); */

    if (itag->it_MaskType & MASK_SIZESTACK)
d223 1
a223 1
    if ((itag->it_MaskType & MASK_COMMENT) && (itag->it_Flags & IT_GOT_FIB))
a224 1
        DP(("IS:  Comment is now %s\n", StrInfo(itag->it_Comment)->Buffer));
d230 1
a230 1
    if (itag->it_MaskType & MASK_DEFAULTTOOL)
d257 3
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d251 1
a251 1
    if (!PutObject(wbobj, NULL))
@
