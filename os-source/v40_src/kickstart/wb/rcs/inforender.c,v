head     39.2;
branch   ;
access   ;
symbols  V40_5:39.2 V40_4:39.2 V40_3:39.2 V40_2:39.2 V40_1:39.2 V39_56:39.2 V39_54:39.1 V39_52:39.1 V39_51:39.1 V39_50:39.1 V39_48:39.1 V39_46:39.1 V39_45:39.1 V39_44:39.1 V39_43:39.1 V39_42:39.1 V39_41:39.1 V39_40:39.1 V39_39:39.1 V39_38:39.1 V39_37:39.1 V39_36:39.1 V39_35:39.1 V39_34:39.1 V39_33:39.1 V39_32:39.1 V39_30:39.1 V39_29:39.1 V39_27:38.2 V39_26:38.2 V39_25:38.2 V39_23:38.2 V39_22:38.2 V39_21:38.2 V39_20:38.2 V39_18:38.2 V39_17:38.2 V39_16:38.2 V39_15:38.2 V39_14:38.2 V39_12:38.2 V39_10:38.1 V39_9:38.1 V39_8:38.1 V39_7:38.1 V39_6:38.1 V39_5:38.1 V39_4:38.1 V39_3:38.1;
locks    ; strict;
comment  @ * @;


39.2
date     93.02.04.09.48.45;  author mks;  state Exp;
branches ;
next     39.1;

39.1
date     92.05.31.01.52.00;  author mks;  state Exp;
branches ;
next     38.2;

38.2
date     92.02.17.15.41.17;  author mks;  state Exp;
branches ;
next     38.1;

38.1
date     91.06.24.11.36.32;  author mks;  state Exp;
branches ;
next     ;


desc
@Initial V38 tree checkin
@


39.2
log
@Now obsolete
@
text
@Nothing left here...
@


39.1
log
@Now is the ASYNC, LVO based INFO...
@
text
@d1 1
a1 207
/*
 * $Id: inforender.c,v 38.2 92/02/17 15:41:17 mks Exp Locker: mks $
 *
 * $Log:	inforender.c,v $
 * Revision 38.2  92/02/17  15:41:17  mks
 * Fixed InfoRender such that it will do a LockLayerInfo()
 * as per Peter's notes.
 *
 * Revision 38.1  91/06/24  11:36:32  mks
 * Initial V38 tree checkin - Log file stripped
 *
 */

/*------------------------------------------------------------------------*/

#include <string.h>

#include <clib/macros.h>
#include <intuition/intuition.h>
#include "workbench.h"
#include <graphics/regions.h>
#include <libraries/gadtools.h>

#include "info.h"
#include "quotes.h"
#include "support.h"

#include <clib/gadtools_protos.h>
#include "proto.h"
#include "macros.h"

/*------------------------------------------------------------------------*/

/*  Function Prototypes: */

void RenderAll(struct InfoTag *itag, BOOL firsttime);
void InfoRenderIcon(struct InfoTag *itag, BOOL inrefresh);
void RenderProBits(struct InfoTag *itag);

/*------------------------------------------------------------------------*/

/*/ RenderAll()
 *
 * Function to perform all the rendering for the specified Info window.
 *
 * Created:  30-May-89, Peter Cherna
 * Modified:  1-Feb-90, Peter Cherna
 *
 * Bugs:
 *
 */

void RenderAll(itag, firsttime)

    struct InfoTag *itag;
    BOOL firsttime;

{
    if (!firsttime)
    {
	LockLayerInfo( &itag->it_Window->WScreen->LayerInfo );
        GT_BeginRefresh(itag->it_Window);
    }

    DP(("RA:  Calling InfoRenderIcon...\n"));
    InfoRenderIcon(itag, (BOOL) !firsttime);
    DP(("RA:  Calling RenderProBits...\n"));
    RenderProBits(itag);

    if (!firsttime)
    {
        GT_EndRefresh(itag->it_Window, TRUE);
	UnlockLayerInfo( &itag->it_Window->WScreen->LayerInfo );
    }
}


/*------------------------------------------------------------------------*/

/*/ InfoRenderIcon()
 *
 * Function to render the image of the icon, as well as the box
 * that holds it.
 *
 * Created:  30-May-89, Peter Cherna
 * Modified: 15-Dec-89, Peter Cherna
 *
 * Bugs:
 *
 */

void InfoRenderIcon(itag, inrefresh)

    struct InfoTag *itag;
    BOOL inrefresh;

{
    SHORT left, top;
    struct Region *myregion, *ocr;
    struct Rectangle myrect =
    {
        ICONBOXLEFT_C + 4, ICONBOXTOP + 2, ICONBOXLEFT_C + ICONBOXWIDTH - 5,
        ICONBOXTOP + ICONBOXHEIGHT - 3,
    };
    struct TagItem mytaglist[3] =
    {
        GTBB_Recessed, TRUE,
        GT_VisualInfo, NULL,
        TAG_DONE, 0,
    };

    myrect.MinY += itag->it_TopBorder;
    myrect.MaxY += itag->it_TopBorder;
    myrect.MinX += itag->it_CenterX;
    myrect.MaxX += itag->it_CenterX;

    mytaglist[1].ti_Data = (ULONG)itag->it_VisualInfo;
    DrawBevelBoxA(itag->it_Window->RPort,
        ICONBOXLEFT, (UWORD)(ICONBOXTOP+itag->it_TopBorder),
        ICONBOXWIDTH, ICONBOXHEIGHT, mytaglist);

    left = (ICONBOXWIDTH - itag->it_Obj->do_Gadget.Width) >> 1;
    if (left<4) left=4;
    left+=ICONBOXLEFT;

    top = (ICONBOXHEIGHT - itag->it_Obj->do_Gadget.Height) >> 1;
    if (top<2) top=2;
    top+=ICONBOXTOP + itag->it_TopBorder;

    if (myregion = NewRegion())
    {
        if (OrRectRegion(myregion, &myrect))
        {
            if (inrefresh)
                EndRefresh(itag->it_Window, FALSE);
            ocr = InstallClipRegion(itag->it_Window->RPort->Layer, myregion);
            if (inrefresh)
                BeginRefresh(itag->it_Window);
            DrawImage(itag->it_Window->RPort, (struct Image *)
                itag->it_Obj->do_Gadget.GadgetRender, left, top);

            if (inrefresh)
                EndRefresh(itag->it_Window, FALSE);
            InstallClipRegion(itag->it_Window->RPort->Layer, ocr);
            if (inrefresh)
                BeginRefresh(itag->it_Window);
	}
        DisposeRegion(myregion);
    }
}


/*------------------------------------------------------------------------*/

/*/ RenderProBits()
 *
 * Function to render the protection bit imagery for the object in question.
 * In order, they will be archived, deletable, script, pure
 *
 * Created:  30-May-89, Peter Cherna
 * Modified: 24-Jul-89, Peter Cherna
 *
 * Bugs:
 *
 */

void RenderProBits(itag)

    struct InfoTag *itag;

{
    UWORD quote;

    if (itag->it_MaskType & MASK_DISKSTATUS)
    {
        /*  "Volume is" */
        PrintText(itag->it_Window, ORANGE, 352+itag->it_CenterX, (UWORD)(22 + itag->it_TopBorder),
            Quote(Q_VOLUME_TEXT));
        if (itag->it_Flags & IT_GOT_INFODATA)
        {
            switch (itag->it_InfoData->id_DiskState)
            {
                case ID_WRITE_PROTECTED:
                    quote = Q_VOL_IS_READ_ONLY;
                    break;
                case ID_VALIDATING:
                    quote = Q_VOL_IS_VALIDATING;
                    break;
                case ID_VALIDATED:
                    quote = Q_VOL_IS_READ_WRITE;
                    break;
                default:
                    quote = Q_VOL_IS_UNKNOWN;
                    break;
            }
        }
        else
        {
            quote = Q_VOL_IS_UNKNOWN;
        }
        PrintText(itag->it_Window, WHITE, 352+itag->it_CenterX, (UWORD)(35 + itag->it_TopBorder),
            Quote(quote));
    }
}


/*------------------------------------------------------------------------*/
@


38.2
log
@Fixed InfoRender such that it will do a LockLayerInfo()
as per Peter's notes.
@
text
@d2 1
a2 1
 * $Id: inforender.c,v 38.1 91/06/24 11:36:32 mks Exp Locker: mks $
d5 4
d122 1
a122 1
    left = (ICONBOXWIDTH - itag->it_WBObj->wo_IOGadget.Width) >> 1;
d126 1
a126 1
    top = (ICONBOXHEIGHT - itag->it_WBObj->wo_IOGadget.Height) >> 1;
d140 1
a140 1
                itag->it_WBObj->wo_IOGadget.GadgetRender, left, top);
@


38.1
log
@Initial V38 tree checkin - Log file stripped
@
text
@d2 1
a2 1
 * $Id$
d4 4
a7 1
 * $Log$
d56 2
d59 1
d69 1
@
