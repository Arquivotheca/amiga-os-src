   While at CSA yesterday (21 Oct 88) Doug showed me a copy of your
   mathieeesing Alpha 1 libraries ( mathieeesing 36.11 (28 Sep 88) ).
   I told Doug I'd check it out --- this is Ok since I have a signed
   consultant agreement with CSA. I don't get anything out of it except
   the enjoyment of helping the amiga along (and myself personally, since
   I use the machine alot).

   Anyway, I just looked at the mathieeesingbas.library ( 36.11 28 Sep 88 )
   for the 68020/68881 (I have a 68020/68882 installed actually). The
   68882 runs at either 16 or 25 MHz via a switch that Bob installed. I'm
   using KickStart Version 33.180 and Workbench1.3 Version 34.20. I have
   an Amiga 2000 with the CSA 020 CPU board (14.32 MHz) and 512K of 32-bit
.More..
   memory at 14.32 MHz.  I also have a 68030 but I took that out a while
   back and haven't used it since (Waiting for the 68040).
 
   Glad to hear you are going to do some special code for the 68020
   with software floating-point for V1.4.  I'd like to Beta Test this
   stuff --- perhaps you could make me an official beta-tester as before
   (so I'd get the disks at home vice going through the routine of
   bugging CSA about anything new).
 
   Al Aburto
   3016 Forrester Court
   San Diego, California USA, 92123
   (619) 278 8521 (Home - night time)
   (619) 553 1495 (Work - day time, Naval Ocean Systems Center, San Diego)
 

   (1) General:

         Overall the 68020/68881 version of the mathieeesingbas.library
         (Alpha1) looks real good --- that coprocessor sure helps make
.More..
         life easy. I haven't run any benchmark or timing tests yet.  I
         just gave the library a quick review.  The open count goes up
         and down by one as it should.
 

   (2) D0 = IEEESPCeil (D0)
 
         The Synopsis indicates that the return value of this function
         may have more than 32-bits of significance. How can this be since
         there are only 32-bits in D0 and the mantissa has only 24-bits at
         most.  They can't be in D1 because D1 just comes back with the old
         (initial or input) D0 IEEESP value.
 <dale> fixed

   (3) D0 = IEEESPFloor (D0)

         The 'MOVE.B  #$20,D0' in this routine should probably be changed
         to  'MOVEQ.L #$20,D0'.  Overall 'MOVEQ.L' is faster, even with the
         020/030, than 'MOVE.B' ... besides it saves 1 word of code.

<dale> can't I'm preserving the upper 24 bits of d0.l
 
.More..

   (4) D0 = IEEESPDiv (D0,D1)
 
         Why not use 'FSGLDIV.S' rather than 'FDIV.S'?  'FSGLDIV.S' takes
         about 85 clock cycles while 'FDIV.S' takes 119 clock cycles.
         Should use 'FSGLDIV.S' since D0 and D1 are 24-bit mantissa IEEESP
         numbers anyway.
<dale> done

   (5) D0 = IEEESPMul (D0,D1)
 
         Should use 'FSGLMUL.S' here too vice 'FMUL.S' since D0 and D1 are
         input as IEEESP with only 24-bits of significance anyway.
         'FSGLMUL.S' takes about 75 clock cycles whereas 'FMUL.S' takes
         87 clock cycles.
 
<dale> done

   (6) D0 = IEEESPSub (D0,D1)
 
         This is fine.  Couldn't be better.

 
   (7) D0 = IEEESPAdd (D0,D1)
 
         Fine too.


   (8) D0 = IEEESPNeg (D0)
 
         Could save some time by putting this 6-bytes of code in place
         of the library JMP $XXXXXXXX instruction (also 6-bytes of code).
         Hey, why not --- might as well.

Tried this for V1.3m argument was made that we could not setfunction
this function. Maybe I'll put it in in V1.4
 

   (9) D0 = IEEESPAbs (D0)
 
         Could also save some time by putting this 6-bytes of code in place
         of the library JMP $XXXXXXXX instruction (also 6-bytes of code).
   (10) D0 = IEEESPTst (D0)
 
         Why not just use 'TST.L D0'?  I don't understand why you used
         'ADD.L D0,D0'.  There must be a good reason, but right now I
         don't know why.
 
         Also why return 1,0, or -1 in D0 when the condition codes contain
         the real decision flags?  It seems unnecessary to return anything
         in D0 other than the initial input IEEESP value.

<dale> Have to make sure -0.0 returns 0
<dale> Also return values are for C function calls
 

  (11) D0 = IEEESPCmp (D0,D1)
 
         Why not just use 'CMP.L D0,D1'?
         Why return 1,0, or -1 in D0?  This seems unnecessary and unnatural
         thing to do since the condition codes already hold the necessary
         decision results.

         There are 2 'CLR.L D0' instructions in the code that should
         be replaced with the 'MOVEQ.L #$00,D0' instruction.

         There are 3 'BCC.W' instructions in the code that should be
         repalced with 'BCC.B' instructions.
 
         I'm just not certain about the 'ADD.L D0,D0' and 'ADD.L D1,D1'
         stuff.

<dale> cmp is more complicated than this to be ieee standard.


  (12) D0 = IEEESPFlt (D0)
 
         This is fine.


  (13) D0 = IEEESPFix (D0)

         Fine too.
 

Thats it for now Dale. Hava good day.
 I'll check the mathieeesingtrans.library for the 020/881 later.  Later
still I'll give the 68000 and 68020 SWFP libraries a check too and run
some timing tests.

Al Aburto
22 Oct 1988

   I just looked at the mathieeesingtrans.library ( 34.7 13 Jun 1988 )
   for the 68020/68881 ( Alpha 1 release disk from CSA ).
 
   Everything looks fine except the IEEESPPow, IEEESPFieee, and IEEESPTieee.
 
   (1) IEEESPPow
 
       The wrong code seems to be called here.  I think you intended it
       to go to a routine like:
 
       FLOGN.S  D0,FP0
       FMUL.S   D1,FP0
.More..
       FETOX.S  FP0,FP0
       FMOVE.S  FP0,D0
       RTS
 
       But it is not doing that at all!  Somethings amiss.

<dale> Does it return the right result?

   (2) IEEESPFieee, and IEEESPTieee
 
       These are just returns right now. They should be converting to
       or from double precision I think.  Is this right?

<dale> depends on your defination of what these functions do.

   Al Aburto
   3016 Forrester Court
   San Diego, California USA, 92123
   (619) 278 8521 (Home - night time)
   (619) 553 1495 (Work - day time, Naval Ocean Systems Center, San Diego)
 
