head     40.7;
branch   ;
access   ;
symbols  V40_4:40.7 V40_3:40.4 V40_1:40.2 V37_3:1.7 V37_2:1.6 V37_1:1.6 V36_26:1.6 V36_23:1.4 V36_22:1.7 V36_21:1.3 V36_16:1.1 V36_15:1.1;
locks    ; strict;
comment  @@;


40.7
date     93.03.16.12.22.47;  author mks;  state Exp;
branches ;
next     40.6;

40.6
date     93.03.16.12.20.28;  author mks;  state Exp;
branches ;
next     40.5;

40.5
date     93.03.16.10.59.48;  author mks;  state Exp;
branches ;
next     40.4;

40.4
date     93.03.11.17.20.35;  author mks;  state Exp;
branches ;
next     40.3;

40.3
date     93.03.11.11.51.34;  author mks;  state Exp;
branches ;
next     40.2;

40.2
date     93.03.09.10.48.05;  author mks;  state Exp;
branches ;
next     40.1;

40.1
date     93.03.09.10.43.45;  author mks;  state Exp;
branches ;
next     1.7;

1.7
date     91.05.09.04.39.16;  author bryce;  state Exp;
branches ;
next     1.6;

1.6
date     90.04.07.00.44.13;  author dale;  state Exp;
branches ;
next     1.5;

1.5
date     90.04.06.16.40.34;  author dale;  state Exp;
branches ;
next     1.4;

1.4
date     89.12.06.23.41.34;  author dale;  state Exp;
branches ;
next     1.3;

1.3
date     89.11.30.00.01.29;  author dale;  state Exp;
branches ;
next     1.2;

1.2
date     89.11.29.23.24.54;  author dale;  state Exp;
branches ;
next     1.1;

1.1
date     89.09.16.09.39.48;  author dale;  state Exp;
branches ;
next     ;


desc
@@


40.7
log
@Final cleanup
@
text
@**********************************************************************
*								     *
*   Copyright 1985, Commodore-Amiga Inc.   All rights reserved.	     *
*   No part of this program may be reproduced, transmitted,	     *
*   transcribed, stored in retrieval system, or translated into	     *
*   any language or computer language, in any form or by any	     *
*   means, electronic, mechanical, magnetic, optical, chemical,	     *
*   manual or otherwise, without the prior written permission of     *
*   Commodore-Amiga Incorporated, 983 University Ave. Building #D,   *
*   Los Gatos, California, 95030				     *
*								     *
**********************************************************************
*
* $Id: library.asm,v 40.6 93/03/16 12:20:28 mks Exp Locker: mks $
*
**********************************************************************

*------ Included Files -----------------------------------------------

	INCLUDE		'exec/types.i'
	INCLUDE		'exec/libraries.i'
	INCLUDE		'exec/initializers.i'
	INCLUDE		'exec/execbase.i'

	INCLUDE		'mathieeesingbas_rev.i'
	INCLUDE		'macros.i'

	include		'resources/mathresource.i'
	include		'privatemathlibrary.i'


*------ Imported Globals ---------------------------------------------

	XREF	MIName
	xref	_AbsExecBase
	xref	libFuncInit
	xref	init_68881
	xref	init_io68881

*------ Imported Functions -------------------------------------------

	XREF_EXE	MakeLibrary	* Generates:  XREF	_LVOMakeLibrary
	XREF_EXE	OpenResource	* Generates:  XREF	_LVOOpenLibrary
	XREF_EXE	AddLibrary	* Generates:  XREF	_LVOAddLibrary
	XREF_EXE	FreeMem		* Generates:  XREF	_LVOFreeMem
	XREF_EXE	Permit
	XREF_EXE	Forbid


*------ Exported Globals ---------------------------------------------

*------ Exported Functions -------------------------------------------

	XDEF	MIInit

	IFD	ON_DISK
	clr.l	d0
	rts
	ENDC

**  TITLE   "--Library-- Init"
*------ Init -------------------------------------
*
*   NAME
*	Init - initialize the library from nothing
*
*   SYNOPSIS
*	error = Init(), systemLibrary
*	D0		A6
*
*   FUNCTION
*	This routine will initialize the library.  It should only be
*	used if the library is not available to be opened (i.e. it has
*	been successfully Expunged).
*
*	This entry point will remain valid for all time, since it
*	is in rom, and it is OK for it to be cached even when the
*	library is not open.
*
*   INPUTS
*	Note that this entry point differs from all others in that it
*	accepts a pointer to the systemLib, not the audioLib
*	(which should not yet exist).  This pointer is not cached for
*	later use by the library, which always gets to the system
*	library via SysBase.  The name that is passed to some library
*	Init routines in A1 is not used by this library.
*
*   RESULTS
*	error	-
*		if the Init succeeded, then Error will be zero.	 If
*		it failed then it will be non-zero.
*
*---------------------------------------------------------------------
	xref	_LVOMakeLibrary
	xref	_LVOAddLibrary
	xref	hardlibFuncInit
	xref	iolibFuncInit

MIInit:	movem.l	d2/d3/a2,-(sp)	* save registers used
	move.l	a0,-(sp)	* save MathSegList here
	clr.l	d2
	clr.l	d3
	lea	hardlibFuncInit,a0
	btst	#AFB_68881,AttnFlags+1(a6)
	bne.s	load_it
*
* If FPU-Only build, we wish to exit here...  (Error)
*
	IFD	CPU_FPU
	move.l	(sp)+,a0	; Restore seglist from stack...
	moveq.l	#0,d0		; Return failure
	bra.s	init_Exit	; And exit...
	ENDC
*
* If not FPU-Only, we have software option...
*
	IFND	CPU_FPU
	lea	libFuncInit,a0
	ENDC

load_it:
	sub.l	a2,a2			* There is not MakeLibrary init
	lea	libStructInit,a1	*
	move.l	#MathIEEEBase_SIZE,d0
	clr.l	d1
	jsr	_LVOMakeLibrary(a6)
*	fill in the library node
	move.l	d0,a2
;	set up default task inits

********************************************************************************
*
* If we are building 68000-compatible, we should check for 68020 and up...
*
	IFD	CPU_68000
*
;	If we are an 020 or better without a 68881/2 then we
;	can probably do better than any 68881 peripheral processor
	btst	#AFB_68881,AttnFlags+1(a6)

	bne.s	_if0000	; if =
		btst #AFB_68020,AttnFlags+1(a6)

		beq.s	_if0001	; if <>
			xref	MIIEEESPMul020,_LVOIEEESPMul
			xref	MIIEEESPDiv020,_LVOIEEESPDiv
			lea	MIIEEESPMul020,a1
			move.l	a1,_LVOIEEESPMul+2(a2)
			lea	MIIEEESPDiv020,a1
			move.l	a1,_LVOIEEESPDiv+2(a2)
_if0001:			; endif

_if0000:		; endif
*
	ENDC
*
********************************************************************************

;	code for superfast fneg and fabs
;	just jam the instructions themselves into vectortable
;	removed by popular demand, sigh.
;	xref	MIIEEEDPNeg,MIIEEEDPAbs
;	xref	_LVOIEEEDPNeg,_LVOIEEEDPAbs
;	move.l	MIIEEEDPNeg,_LVOIEEEDPNeg(a2)
;	move.w	MIIEEEDPNeg+4,_LVOIEEEDPNeg+4(a2)
;	move.l	MIIEEEDPAbs,_LVOIEEEDPAbs(a2)
;	move.w	MIIEEEDPAbs+4,_LVOIEEEDPAbs+4(a2)

	lea	my_rts,a1	; Default...
	btst.b	#AFB_68881,AttnFlags+1(a6)
	beq.s	no_FPU
	lea	init_68881,a1	; FPU version...
no_FPU:	move.l	a1,MathIEEEBase_TaskOpenLib(a2)
;
	move.b  d0,MathIEEEBase_Flags(a2)
	move.l	d2,MathIEEEBase_68881(a2)
	move.l	a6,MathIEEEBase_SysLib(a2)

;	Get MathSegList saved on stack now
	move.l	(sp)+,MathIEEEBase_SegList(a2)
	move.l	a2,a1
	jsr	_LVOAddLibrary(a6)	; a1->Library
init_Exit:
	movem.l	(sp)+,d2/d3/a2	* restore register
	rts

MIExtFunc:
	moveq	#0,d0
	RTS

**  SKIP
*----------------------------------------------------------------------
*
* Definitions for Transcendental Math Library Initialization
*
*----------------------------------------------------------------------
libStructInit:
*	;------ Initialize the library
		INITBYTE    LN_TYPE,NT_LIBRARY
		INITLONG    LN_NAME,MIName
		INITWORD	LIB_REVISION,REVISION
		INITWORD	LIB_VERSION,VERSION
		INITBYTE    LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
		INITWORD	LIB_OPENCNT,0

		DC.W	    0



	xdef	MIOpen
	xdef	MIClose
	xdef	MIExtFunc
	xdef	MIExpunge

**  TITLE   "--Library-- Expunge"
*------ Expunge ------------------------------------
*
*   NAME
*	Expunge - indicate a desire to remove the library
*
*   SYNOPSIS
*	Result = Expunge()
*
*   FUNCTION
*	The Expunge routine is called when a user issues a RemLibrary
*	call.  By the time it is called, the library has already been
*	removed from the library list, so no new opens will succeed.
*	The existance of any other users of the library, as determined
*	by the library open count being non-zero, will cause the
*	Expunge to be deferred.	 When the library is not in use, or no
*	longer in use, the Expunge is actually performed.
*
*   !!!
*	This will change, so expunged librarys are not in the nether
*	state of not being Open-able or Init-able.
*
*   INPUTS
*
*---------------------------------------------------------------------

MIExpunge:
*
* If we are not on-disk, we don't Expunge
*
	IFD	ON_DISK

*	;-- see if any one is using the library
	TST.W   LIB_OPENCNT(A6)
	BNE.S   Exp_InUse
;
	move.l	a6,-(sp)	; save library ptr on stack
	move.l	MathIEEEBase_SysLib(a6),a6
	jsr	_LVOForbid(a6)
	move.l	(sp)+,a6	; restore library ptr

*	;-- this is really it.  Free up all the resources
	MOVE.L	A6,A1
        REMOVE

*	    ;------ deallocate Math library data
	move.l	MathIEEEBase_SegList(a6),-(sp)	; Save return value
	MOVE.L  A6,A1
	MOVEQ	#0,D0
	MOVE.W  LIB_NEGSIZE(A6),D0
	SUB.W	D0,A1
	ADD.W	LIB_POSSIZE(A6),D0
; no longer need a6 as ptr to MathLibraryBase
	move.l	MathIEEEBase_SysLib(a6),a6
	jsr	_LVOFreeMem(a6)
	jsr	_LVOPermit(a6)

	move.l	(sp)+,d0			; get seglist from stack
	RTS

Exp_InUse:
	ENDC

	MOVEQ   #0,D0	    ;still in use
	RTS


**  TITLE   "--Library-- Open"
*------ Open -------------------------------------
*
*   NAME
*	Open - a request to open the library
*
*   SYNOPSIS
*	Open(), mathieeesingbaslib
*		A6
*
*   FUNCTION
*	The open routine grants access to the library.	The
*	library open count will be incremented.	 The library cannot
*	be expunged unless this open is matched by a Close.
*
*---------------------------------------------------------------------

MIOpen:	ADDQ.W  #1,LIB_OPENCNT(A6)		* Bump library open counter
	move.l	MathIEEEBase_TaskOpenLib(a6),a0
	jsr	(a0)
    	MOVE.L  A6,D0
    	RTS

**  TITLE   "--Library-- Close"
*------ Close -------------------------------------
*
*   NAME
*	Close - terminate access to a library
*
*   SYNOPSIS
*	Close(), mathieeesingbaslib
*		 A6
*
*   FUNCTION
*	The close routine notifies a library that it will no longer
*	be using the library.
*
*	The open count on the library will be decremented, and if it
*	falls to zero and an Expunge is pending, the Expunge will
*	take place.
*
*---------------------------------------------------------------------
MIClose:
	SUBQ.W  #1,LIB_OPENCNT(A6)
my_rts:	moveq.l	#0,d0
closed:	RTS

	end
@


40.6
log
@Removed one last "bad" bit...
@
text
@d14 1
a14 1
* $Id: library.asm,v 40.5 93/03/16 10:59:48 mks Exp Locker: mks $
d247 4
a250 1
*	    ;-- see if any one is using the library
a254 2
	TST.W   LIB_OPENCNT(A6)
	BNE.S   Exp_InUse
d256 1
a256 1
*	    ;-- this is really it.  Free up all the resources
a275 5
	move.l	a6,-(sp)	; save library ptr on stack
	move.l	MathIEEEBase_SysLib(a6),a6
	jsr	_LVOPermit(a6)
	move.l	(sp)+,a6	; restore library ptr

@


40.5
log
@Now is even smaller for the ROM builds...
@
text
@d14 1
a14 1
* $Id: library.asm,v 40.4 93/03/11 17:20:35 mks Exp Locker: mks $
d303 1
a303 1
MIOpen:
a305 2
    	ADDQ.W  #1,LIB_OPENCNT(A6)		* Bump library open counter
	BCLR    #LIBB_DELEXP,LIB_FLAGS(A6)	* cancel pending expunge
@


40.4
log
@Added support to build the FPU-Only version of mathieeesingbas
@
text
@d14 1
a14 1
* $Id: library.asm,v 40.3 93/03/11 11:51:34 mks Exp Locker: mks $
d56 1
a56 1
my_rts:
d59 1
d99 1
a99 14
*
* Define IO_FPU is you wish to use the IO Coprocessor features
* These are useless on 68020 and up CPU machines and we do not
* wish to use the ROM space...
*
	ifd	IO_FPU
*	this needs to become a resource that appears during autoconfig.
io68881	dc.b	'MathIEEE.resource',0
	CNOP	0,2
	endc

MIInit:
;	move.l	a0,_MathSegList	* preparing for romable code
	movem.l	d2/d3/a2,-(sp)	* save registers used
a117 18

	ifd	IO_FPU
*	test for 68881 as i/o device
	moveq	#0,d0			* resource version
	lea	io68881,a1
	jsr	_LVOOpenResource(a6)	* for now
	move.l	d0,d3
	beq.s	use_soft
*		found 68881 as an i/o device
		move.l	d0,a1
		move.l	MathIEEEResource_BaseAddr(a1),d2	; extract ptr to 68881 base
		tst.l	d2			; is it there?
		beq.s	use_soft
		lea	iolibFuncInit,a0
	bra.s	load_it
	endc

use_soft:
d169 6
a174 11
	lea	my_rts,a1
	move.l	a1,MathIEEEBase_TaskOpenLib(a2)
	move.l	a1,MathIEEEBase_TaskCloseLib(a2)
	move.b	AttnFlags+1(a6),d0
	and.b   #AFF_68881,d0

	beq.s	_if0002	; if <>
		lea	init_68881,a1
		move.l	a1,MathIEEEBase_TaskOpenLib(a2)
_if0002:		; endif

a180 22

	ifd	IO_FPU
	move.l	d3,MathIEEEBase_Resource(a2)

	beq.s	_if0003	; if <>				; check for alternate routines
		lea	init_io68881,a1
		move.l	a1,MathIEEEBase_TaskOpenLib(a2)
		move.l	d3,a1
		btst	#MATHIEEERESOURCEB_SGLBAS,MathIEEEResource_Flags+1(a1)

		beq.s	_if0004	; if <>
			move.l	MathIEEEResource_SglBasInit(a1),a0
*				call with a6->SysBase
*					  a1->Resource
*					  a2->Math Library
			jsr (a0)
_if0004:			; endif

_if0003:		; endif

	endc

d188 2
a189 2
		moveq	#0,d0
		RTS
d242 4
a270 3
;	LINKEXE FreeMem

;	LINKEXE	Permit
d275 1
a275 4

	BSET    #LIBB_DELEXP,LIB_FLAGS(A6)

	move.l	a6,-(sp)		; save library ptr on stack
d280 2
a281 1
;	LINKEXE	Permit
a303 2
*	if the 68881 is being used then set the exceptions up
*	and initialize rounding
a305 8

	tst.l	d0	; ...
	beq.s	_if0005	; if d0.l
openFail:
		clr.l	d0
		rts
_if0005:		; endif

a330 3

	move.l	MathIEEEBase_TaskCloseLib(a6),a0
	jsr	(a0)
d332 2
a333 5
	BTST    #LIBB_DELEXP,LIB_FLAGS(A6)
	BNE	MIExpunge	; Expunge will check opencount
	clr.l	d0		; don't expunge
closed:
	RTS
@


40.3
log
@Added support for multi-type builld (68000 to 68020)
@
text
@d14 1
a14 1
* $Id: library.asm,v 40.2 93/03/09 10:48:05 mks Exp Locker: mks $
d118 12
d149 2
d240 1
a240 1

@


40.2
log
@RCS Messed up
@
text
@d14 1
a14 1
* $Id: library.asm,v 40.1 93/03/09 10:43:45 mks Exp Locker: mks $
d147 6
a154 2
FAST020	equ 1
	ifd FAST020
d170 4
a173 3

	endc

@


40.1
log
@Ported to native build of library
@
text
@d14 1
a14 3
* Source Control
* --------------
* $Id$
a15 1
* $Log$
@


1.7
log
@Change @@(*#@@*&# Header to Id
@
text
@a0 1
	TTL    '$Id: /tmp/mathieeesingbas/RCS/library.asm,v 1.6 90/04/07 00:44:13 dale Exp Locker: bryce $'
d14 3
a16 3
*   Source Control
*   --------------
*   $Id: /tmp/mathieeesingbas/RCS/library.asm,v 1.6 90/04/07 00:44:13 dale Exp Locker: bryce $
d18 1
a18 1
*
a20 2
	SECTION		mathieeesingbas

a29 2
	include	"resources/mathresource.i"
	include "privatemathlibrary.i"
d31 2
d34 1
d39 3
d47 2
a48 3
	XREF_EXE	AddLibrary	* Generates:  XREF  _LVOAddLibrary
	XREF_EXE	FreeMem		* Generates:  XREF  _LVOFreeMem
	XREF_EXE	NoFunc		* Generates:  XREF  _LVONoFunc
d101 6
a106 1

d110 2
d121 2
d136 2
d155 2
a156 1
	if =
d158 2
a159 1
		if <>
d166 4
a169 2
		endif
	endif
a187 1
	if <>
d189 1
d192 2
a193 1
	endif
d201 1
d203 2
a204 1
	if <>				; check for alternate routines
d209 2
a210 1
		if <>
d216 6
a221 2
		endif
	endif
a249 1
	xref	libFuncInit
d307 1
a307 1
	
a344 2
	xref init_68881
	xref init_io68881
d350 3
a352 1
	if d0.l
d356 2
a357 1
	endif
@


1.6
log
@Changes to use 68020 fmul.l and fdiv.l for fmul,fdiv if no 68881.
@
text
@d1 1
a1 1
	TTL    '$Header: /usr2/dale/src/amiga/libs/mathieeesingbas/RCS/library.asm,v 1.5 90/04/06 16:40:34 dale Exp Locker: dale $'
d17 1
a17 1
*   $Header: /usr2/dale/src/amiga/libs/mathieeesingbas/RCS/library.asm,v 1.5 90/04/06 16:40:34 dale Exp Locker: dale $
@


1.5
log
@RCS changes
@
text
@d1 1
a1 1
	TTL    '$Header: /usr2/dale/src/amiga/libs/mathieeesingbas/RCS/library.asm,v 1.4 89/12/06 23:41:34 dale Exp Locker: dale $'
d17 1
a17 1
*   $Header: /usr2/dale/src/amiga/libs/mathieeesingbas/RCS/library.asm,v 1.4 89/12/06 23:41:34 dale Exp Locker: dale $
d138 18
@


1.4
log
@
@
text
@d1 1
a1 1
	TTL    '$Header: library.asm,v 1.3 89/11/30 00:01:29 dale Exp $'
d17 1
a17 1
*   $Header: library.asm,v 1.3 89/11/30 00:01:29 dale Exp $
@


1.3
log
@More romming
@
text
@d1 1
a1 1
	TTL    '$Header: library.asm,v 1.2 89/11/29 23:24:54 dale Exp $'
d17 1
a17 1
*   $Header: library.asm,v 1.2 89/11/29 23:24:54 dale Exp $
d34 1
a34 1
	include "libraries/mathlibrary.i"
@


1.2
log
@WOrking on rommable library
@
text
@d1 1
a1 1
	TTL    '$Header: library.asm,v 1.1 89/09/16 09:39:48 dale Exp $'
d17 1
a17 1
*   $Header: library.asm,v 1.1 89/09/16 09:39:48 dale Exp $
d245 4
a248 1
	LINKEXE	Forbid
d263 6
a268 1
	LINKEXE FreeMem
d270 1
a270 1
	LINKEXE	Permit
d277 7
a283 1
	LINKEXE	Permit
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
	TTL    '$Header: library.asm,v 1.1 89/09/16 09:37:39 dale Exp $'
d17 1
a17 1
*   $Header: library.asm,v 1.1 89/09/16 09:37:39 dale Exp $
a54 2
	XDEF	_MathSegList

d106 1
a106 1
	move.l	a0,_MathSegList
d108 1
d163 4
d254 1
d263 1
a263 1
	MOVE.L   _MathSegList,D0
d338 1
a338 8
*
*	Data Definition Region
*

_MathSegList:
		DC.L	0

		    END
@
