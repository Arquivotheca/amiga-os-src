head     36.20;
branch   ;
access   ;
symbols  V37_23:36.18 V37_21:36.17 V37_19:36.16 V37_17:36.15 V37_7:36.14 V37_3:36.13 V36_118:36.13 V36_117:36.13 V36_109:36.13 V36_108:36.12 V36_107:36.11 V36_106:36.10 V36_105:36.10 V36_104:36.10 V36_102:36.9 V36_98:36.8 V36_96:36.7 V36_90:36.6 V36_86:36.5 V36_85:36.5 V36_83:36.4 V36_82:36.4 V36_80:36.4 V36_75:36.4 V36_73:36.4 V36_56:36.4 V36_55:36.4 V36_54:36.4 V36_51:36.4 V36_50:36.4 V36_49:36.4 V36_33:36.2 V36_26:36.2 V36_22:36.2 L36_19:36.2;
locks    ; strict;
comment  @*   @;


36.20
date     92.05.19.16.47.01;  author darren;  state Exp;
branches ;
next     36.19;

36.19
date     92.04.06.14.18.48;  author darren;  state Exp;
branches ;
next     36.18;

36.18
date     91.03.15.11.15.31;  author darren;  state Exp;
branches ;
next     36.17;

36.17
date     91.02.20.11.43.44;  author darren;  state Exp;
branches ;
next     36.16;

36.16
date     91.02.20.11.25.20;  author darren;  state Exp;
branches ;
next     36.15;

36.15
date     91.02.18.19.05.15;  author darren;  state Exp;
branches ;
next     36.14;

36.14
date     91.02.15.11.12.04;  author darren;  state Exp;
branches ;
next     36.13;

36.13
date     90.04.24.15.17.13;  author kodiak;  state Exp;
branches ;
next     36.12;

36.12
date     90.04.19.09.12.16;  author kodiak;  state Exp;
branches ;
next     36.11;

36.11
date     90.04.13.11.37.19;  author kodiak;  state Exp;
branches ;
next     36.10;

36.10
date     90.04.02.11.13.18;  author kodiak;  state Exp;
branches ;
next     36.9;

36.9
date     90.03.26.17.53.10;  author kodiak;  state Exp;
branches ;
next     36.8;

36.8
date     90.01.12.17.21.22;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     90.01.09.14.02.41;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     89.12.30.22.24.20;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     89.12.07.14.36.47;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     89.04.30.18.29.39;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     89.04.04.14.42.23;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.01.06.17.27.29;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     88.12.23.12.08.41;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.12.20.14.26.33;  author kodiak;  state Exp;
branches ;
next     ;


desc
@diag area initialization
@


36.20
log
@Use of TaggedOpenLibrary
@
text
@**
**	$Id: boot.asm,v 36.19 92/04/06 14:18:48 darren Exp Locker: darren $
**
**	boot module initialization and main loop
**
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
	SECTION	strap

**	Includes

	INCLUDE	"strap.i"

	INCLUDE	"exec/nodes.i"
	INCLUDE	"exec/lists.i"
	INCLUDE	"exec/ports.i"
	INCLUDE	"exec/tasks.i"
	INCLUDE	"exec/libraries.i"
	INCLUDE	"exec/memory.i"
	INCLUDE	"exec/execbase.i"
	INCLUDE	"exec/resident.i"
	INCLUDE	"exec/alerts.i"
					   
	INCLUDE	"devices/trackdisk.i"
 
	INCLUDE	"libraries/expansionbase.i"
	INCLUDE	"libraries/configvars.i"

	INCLUDE	"bootblock.i"

	INCLUDE	"internal/card.i"
	INCLUDE "internal/librarytags.i"


**	Exports

	XDEF	SMInit
	XDEF	SMAlert


**	Imports

	XLVO	AddHead			; Exec
	XLVO	AddTail			;
	XLVO	Alert			;
	XLVO	AllocEntry		;
	XLVO	CloseDevice		;
	XLVO	CloseLibrary		;
	XLVO	DoIO			;
	XLVO	InitResident		;
	XLVO	Insert			;
	XLVO	OpenDevice		;
	XLVO	OpenLibrary		;
	XLVO	Remove			;
	XLVO	CacheClearU		;
	XLVO	OpenResource		;
	XLVO	TaggedOpenLibrary	;

	XLVO	ObtainConfigBinding	; Expansion
	XLVO	ReleaseConfigBinding	;
	XLVO	SetCurrentBinding	;

	XLVO	UMult32			; Utility

	IFND	_LVOOwnCard
	XLVO	OwnCard			; Card
	ENDC

	IFND	_LVOReleaseCard
	XLVO	ReleaseCard
	ENDC

	IFND	_LVOIfAmigaXIP
	XLVO	IfAmigaXIP
	ENDC

	XREF	SMDisplayOn
	XREF	SMDisplayOff
	XREF	SMDisplayTick

	XREF	smName

**	Locals

 STRUCTURE	BootBlockEntry,MLN_SIZE
    CPTR    bbe_Entry			; address of entry in eb_MountList
    CPTR    bbe_FSSM			; CPTR to FSSM in entry
    CPTR    bbe_Data			; BootBlocks data
    ULONG   bbe_Length			; size of BootBlocks data
    ULONG   bbe_Offset			; origin of partition
    STRUCT  bbe_IOR,IOSTD_SIZE		; IO request for device
    ULONG   bbe_DiskChangeCnt		; disk change count for device
    LABEL   BootBlockEntry_SIZEOF

 STRUCTURE	BootLocals,0
    STRUCT  bbl_NonAmigaDOS,MLH_SIZE	; list of non-AmigaDOS entries
    STRUCT  bbl_Port,MP_SIZE		; request reply port
    STRUCT  bbl_BBEList,MLH_SIZE	; list of BootBlockEntries
    STRUCT  bbl_MLBody,ML_SIZE+(ME_SIZE*2)-LN_SIZE
					; used to allocate BootBlockEntries
    APTR    bbl_CardResource		; pointer to card.resource
    APTR    bbl_CardHandle		; point to a card handle
    ULONG   bbl_CardCount		; Card change count
    LABEL   BootLocals_SIZEOF

bbl_MemList	EQU	bbl_MLBody-LN_SIZE ; don't use node for allocations


**	Assumptions

	IFNE	de_TableSize
	FAIL	"de_TableSize not zero, recode"
	ENDC
	IFNE	DAC_CONFIGTIME-$10
	FAIL	"DAC_CONFIGTIME not bit 4, recode"
	ENDC
	IFNE	da_Config
	FAIL	"da_Config not zero, recode"
	ENDC
	

**********************************************************************
;
;	1.  remove the non-AmigaDOS eb_MountList entries from the
;	    list and store on a second list
;	2.  step thru both lists in priority order and try booting
; 	    from each entry.  Cache BootBlock style entries in the
;	    process.
;	3.  put up the "insert workbench" graphic and poll for a
;	    disk change in a BootBlock entry.  Try booting off the
;	    changed disk.  repeat until successful.
;
;	Notes:
;	-   expansion library is not closed if boot is from BootCode
;	    style boot.  this should be fixed
;

;
;	d2	eb_MountList previous entry
;	d3	eb_MountList next entry, or zero if using bll_NonAmigaDOS
;	d4	short duration temporary: bbe entry, Envec, SysBase,
;		then bbl_BBEList next entry in prompt loop
;	d5	ExpansionBase or StrapDisplayLocals (see a5)
;
;	a2	current entry (from eb_Mountlist or bbl_NonAmigaDOS),
;		then from bbl_BBEList
;	a3	eb_MountList current entry
;	a4	BootLocals
;	a5	ExpansionBase or StrapDisplayLocals (see d5)
;	a6	SysBase
;

SMInit:
		;-- get expansion library
		moveq	#OLTAG_EXPANSION,d0
		CALLLVO	TaggedOpenLibrary
		tst.l	d0
		bne.s	sExpLibOK

		move.l	#AN_BootStrap!AG_OpenLib!AO_ExpansionLib,d0
		bsr	SMAlert
		rts

		;-- initialize environment
sExpLibOK:
		movem.l	d2-d5/a2-a6,-(a7)

		lea	-BootLocals_SIZEOF(a7),a7
		move.l	a7,a4

		move.l	d0,a5			; save ExpansionBase
		moveq	#0,d5			; Display off

		;-- try to open card.resource, and if found,
		;-- initialize handle

		lea	CRName(pc),a1
		CALLLVO	OpenResource
		move.l	d0,bbl_CardResource(a4)
		beq.s	sNoCardResource		;assume no credit-card

		move.l	a6,a3			;cache execbase
		move.l	d0,a6			;use resource base
		CALLLVO CardChangeCount
		move.l	a3,a6			;restore execbase

		;--	private return in A0, count in D0

		move.l	a0,bbl_CardHandle(a4)
		subq.l	#1,d0
		move.l	d0,bbl_CardCount(a4)

sNoCardResource:
		;--	initialize list of non-AmigaDOS devices
		lea	bbl_NonAmigaDOS(a4),a0
		NEWLIST	a0

		;--	initialize local reply port
		clr.b	bbl_Port+MP_FLAGS(a4)
		move.b	#SIGB_SINGLE,bbl_Port+MP_SIGBIT(a4)
		move.l	ThisTask(a6),bbl_Port+MP_SIGTASK(a4)
		lea	bbl_Port+MP_MSGLIST(a4),a0
		NEWLIST	a0

		;--	initialize boot block list
		lea	bbl_BBEList(a4),a0
		NEWLIST	a0

		;--	initialize memlist constants
		move.w	#2,bbl_MemList+ML_NUMENTRIES(a4)
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,bbl_MemList+ML_ME+ME_REQS(a4)
		move.l	#BootBlockEntry_SIZEOF,bbl_MemList+ML_ME+ME_LENGTH(a4)


		;-- trim eb_MountList of bad and non-AmigaDOS nodes
		lea	eb_MountList(a5),a0	; "previous node"
		move.l	a0,d2
		move.l	(a0),a3			; current node

sTrimEMList:
		move.l	(a3),d3			; check for end of mount list
		beq.s	sScanForBoot

		;--	validate node has device entry
		move.l	bn_DeviceNode(a3),d0
		bne.s	sValidEMNode

		;--	REMOVE node, and loop
sRemoveEMNode:
		move.l	d3,a3			; next
		move.l	d2,a0			; prev
		move.l	a3,(a0)			; cache next in prev succ
		move.l	a0,LN_PRED(a3)		; cache prev in next pred
		bra.s	sTrimEMList

sValidEMNode:
		;--	determine if AmigaDOS node
		move.l	d0,a0
		tst.b	dn_Handler(a0)		; test MS bit of handler long
		bpl.s	sTrimEMNext

		;--	put non-AmigaDOS boot bode on seperate list
		lea	bbl_NonAmigaDOS(a4),a0
		move.l	a3,a1
		CALLLVO	AddTail
		bra.s	sRemoveEMNode

		;--	inspect next list entry
sTrimEMNext:
		move.l	a3,d2
		move.l	d3,a3
		bra.s	sTrimEMList


		;-- step thru eb_MountList and bbl_NonAmigaDOS for boot
sScanForBoot:
		lea	eb_MountList(a5),a0	; "previous node"
		move.l	a0,d2
		move.l	(a0),a3			; current node

sScanList:
		;--	Check for an inserted, execute-in-place card

		bsr	SMBootCard

		;--	get eb_MountList and bbl_NonAmigaDOS candidates
		move.l	bbl_NonAmigaDOS(a4),a0
		move.l	a3,a2
		move.l	(a2),d3			; check for end of mount list
		beq.s	sEBLoser
		tst.l	(a0)			; check for end of non' list
		beq.s	sEBWinner
		move.b	LN_PRI(a2),d0
		cmp.b	LN_PRI(a0),d0
		bge.s	sEBWinner		; (AmigaDOS wins ties :-)

sNADWinner:
		moveq	#0,d3			; show not eb_MountList entry
sEBLoser:
		;--	forward remhead non-AmigaDOS winner from head of list
		move.l	(a0),bbl_NonAmigaDOS(a4)
		beq	sPromptDisk		; this list is empty, too
		move.l	a0,a2

sEBWinner:
		;--	verify that this is a boot node
		cmp.b	#NT_BOOTNODE,LN_TYPE(a2)
		bne	sScanNext
		move.l	bn_DeviceNode(a2),a0
		;--	determine if BootBlocks or BootPoint
		move.l	dn_Startup(a0),d0	; get FileSystemStartup
		moveq	#$40,d1			; validate it
		cmp.l	d1,d0			;   (0x0-0x3f are invalid)
		bcs	sChkBootPoint
		lsl.l	#2,d0
		move.l	d0,a0
		move.l	fssm_Environ(a0),d0	; get Envec
		beq	sChkBootPoint
		lsl.l	#2,d0
		move.l	d0,a0
		;--	    look for valid non-zero de_BootBlocks
		cmp.l	#DE_BOOTBLOCKS,(a0)	; de_TableSize(a0)
		blt	sChkBootPoint
		move.l	de_BootBlocks(a0),d0
		beq	sChkBootPoint

		;--	    generate BootBlockEntry
		move.l	de_BufMemType(a0),bbl_MemList+ML_ME+ME_SIZE+ME_REQS(a4)
		mulu	de_SizeBlock+2(a0),d0	; block always < 64K bytes
		lsl.l	#2,d0			; size in bytes
		move.l	d0,bbl_MemList+ML_ME+ME_SIZE+ME_LENGTH(a4)
		lea	bbl_MemList(a4),a0
		CALLLVO	AllocEntry
		tst.l	d0
		bpl.s	sInitBBE

		;--	memory allocation failure		
		move.l	#AN_BootStrap!AG_NoMemory,d0
		bsr	SMAlert
		bra	sScanNext


sInitBBE:
		move.l	d0,a1
		;--	    initialize entries in bbe
		move.l	ML_ME+ME_ADDR(a1),a0	; bbe
		tst.l	d3
		beq.s	sCacheBufPtr
		move.l	a2,bbe_Entry(a0)	; cache entry pointer
sCacheBufPtr:
		move.l	ML_ME+ME_SIZE+ME_ADDR(a1),bbe_Data(a0)
		move.l	ML_ME+ME_SIZE+ME_LENGTH(a1),bbe_Length(a0)

		;--	    add MemEntry to task list
		move.l	a0,d4			; save bbe
		move.l	ThisTask(a6),a0
		lea	TC_MEMENTRY(a0),a0		  
		CALLLVO	AddTail

		move.l	bn_DeviceNode(a2),a1
;
;   a2	bbe entry
;
		move.l	d4,a2
		move.l	dn_Startup(a1),d4
		lsl.l	#2,d4
		move.l	d4,bbe_FSSM(a2)

		;--	    calculate bbe_Offset
		moveq	#OLTAG_UTILITY,d0
		CALLLVO	TaggedOpenLibrary
		tst.l	d0
		bne.s	sUtilLibOK

		move.l	#AN_BootStrap!AG_OpenLib!AO_UtilityLib,d0
		bsr	SMAlert
		bra.s	sScanNext

sUtilLibOK:
		move.l	a3,-(a7)
		move.l	d4,a3			; get Envec
		move.l	fssm_Environ(a3),d1	;
		lsl.l	#2,d1			;
		move.l	d1,a3			;
		move.l	a6,d4			; save SysBase
		move.l	d0,a6			; activate Utility
		move.l	de_LowCyl(a3),d0
		move.l	de_Surfaces(a3),d1
		CALLLVO	UMult32
		move.l	de_BlocksPerTrack(a3),d1
		CALLLVO	UMult32
		move.l	de_SizeBlock(a3),d1
		CALLLVO	UMult32
		lsl.l	#2,d0
		move.l	d0,bbe_Offset(a2)
		move.l	(a7)+,a3
		move.l	a6,a1
		move.l	d4,a6			; activate SysBase
		CALLLVO	CloseLibrary

		;--	    IO request initialization
		lea	bbl_Port(a4),a0
		move.l	a0,bbe_IOR+MN_REPLYPORT(a2)

		;--	    add bbe to local list
		lea	bbl_BBEList(a4),a0
		move.l	a2,a1
		CALLLVO	AddTail

		bsr	SMBootBlocks		; try booting from this
		beq.s	sBootA0

		bra.s	sScanNext

		;--	    validate da_BootPoint
sChkBootPoint:
		move.l	LN_NAME(a2),d0		; ConfigDev pointer
		beq.s	sScanNext
		move.l	d0,a0
		btst.b	#ERTB_DIAGVALID,cd_Rom+er_Type(a0)
		beq.s	sScanNext
		move.l	cd_Rom+er_Reserved0c(a0),d1 ; DiagArea pointer
		beq.s	sScanNext
		move.l	d1,a0
		btst.b	#4,(a0)			; DAC_CONFIGTIME,da_Config(a0)
		beq.s	sScanNext

		bsr	SMBootPoint

sScanNext:
		tst.l	d3			; eb_MountList scan?
		beq	sScanList
		move.l	a3,d2			; save ln_Pred of next
		move.l	d3,a3			; get next
		bra	sScanList


		;-- prompt for boot disk till successful boot
sPromptDisk:
		move.l	bbl_BBEList(a4),a2
		;--	!!! Assumes at least one BBEList entry !!!
spdLoop:
		move.l	(a2),d4
		beq.s	sPromptDisk

		tst.l	d5		; check for Display
		bne.s	spdDisplayOn

		move.l	a5,d5		; save ExpansionBase
		bsr	SMDisplayOn	; sets a5
		exg	d5,a5		; activate ExpansionBase

spdDisplayOn:
		bsr	SMBootCard	; check to see if we can boot
					; credit-card

		bsr.s	SMBootBlocks
		beq.s	sBootA0

		;--	    tick display
		exg	d5,a5		; save ExpansionBase, activate Display
		bsr	SMDisplayTick
		exg	d5,a5		; activate ExpansionBase, save Display

		move.l	d4,a2
		bra.s	spdLoop


sBootA0:
		move.l	a0,d4		; save floppy boot entry point
		bsr	SMCloseIORs

		move.l	bbe_Entry(a2),d3
		beq.s	sCloseEL

		;--	Put this AmigaDOS entry at head of eb_MountList
		move.l	d3,a3
		move.l	LN_PRED(a3),d2
		bsr	SMSwizzleBefore

		;--	close expansion library
sCloseEL:
		move.l	a5,a1		; ExpansionBase
		CALLLVO	CloseLibrary

		;--	restore stack, registers & call boot module
		move.l	d4,a0
		lea	BootLocals_SIZEOF(a7),a7
		movem.l	(a7)+,d2-d5/a2-a6
		jmp	(a0)		; w/ SysBase in A6!



;------	SMBootBlocks -------------------------------------------------
;
;	a2	BootBlockEntry
;	a4	BootLocals
;	a5	ExpansionBase
;	a6	ExecBase
;
;	d2	disk check flag
;	a3	IOR
;
SMBootBlocks:
		movem.l	d2/a3,-(a7)
		moveq	#0,d2
		lea	bbe_IOR(a2),a3	; get IOR

		tst.l	IO_DEVICE(a3)
		bne.s	smbbHaveDevice

		;-- open device
		moveq	#1,d2		; show need to check disk
		move.l	bbe_FSSM(a2),a0
		move.l	fssm_Unit(a0),d0
		move.l	fssm_Flags(a0),d1
		move.l	fssm_Device(a0),a0
		add.l	a0,a0		; convert BSTR to CSTR
		add.l	a0,a0		;
		addq.l	#1,a0		;
		move.l	a3,a1
		CALLLVO	OpenDevice
		tst.l	d0
		beq.s	smbbHaveDevice

		clr.l	IO_DEVICE(a3)
		bne	smbbNoDisk

smbbHaveDevice:
		;-- we now have a drive.  Get the change number
		move.l	a3,a1
		move.w	#TD_CHANGENUM,IO_COMMAND(a1)	
		CALLLVO	DoIO
		tst.l	d0
		bne	smbbIOError

		;--	compare the change number
		move.l	IO_ACTUAL(a3),d0
		cmp.l	bbe_DiskChangeCnt(a2),d0
		beq.s	smbbCacheChangeCnt
		moveq	#1,d2			; show need to check disk

smbbCacheChangeCnt:
		move.l	d0,bbe_DiskChangeCnt(a2)

		tst	d2
		beq	smbbNoDisk

		;-- check for disk in drive
		move.l	a3,a1
		move.w	#TD_CHANGESTATE,IO_COMMAND(a1)
		CALLLVO	DoIO
		tst.l	d0
		bne	smbbIOError

		tst.l	IO_ACTUAL(a3)
		bne	smbbNoDisk

		;-- clear out any stale buffers
		move.l	a3,a1
		move.w	#CMD_CLEAR,IO_COMMAND(a1)	
		CALLLVO	DoIO
		tst.l	d0
		bne	smbbIOError

		;-- turn of any display to show user that disk is noticed
		bsr	smTurnOffDisplay

		;-- read from device
		move.l	a3,a1
		move.w	#CMD_READ,IO_COMMAND(a1)
		move.l	bbe_Length(a2),IO_LENGTH(a1)
		move.l	bbe_Data(a2),IO_DATA(a1)
		move.l	bbe_Offset(a2),IO_OFFSET(a1)
		CALLLVO	DoIO
		tst.l	d0
		bne.s	smbbFail

		;------ see if there is a legal header
		move.l	bbe_Data(a2),a0
		move.l	(a0),d0		; check for valid cookie
		cmp.l	#$424f4f55,d0	; 'BOOT' ?
		beq.s	smbbSum
		clr.b	d0		; 'DOS?' ?  (low byte ignored)
		cmp.l	#BBNAME_DOS,d0
		bne.s	smbbFail

		;------ validate the checksum (longword w/ carry wraparound)
smbbSum:
		move.l	bbe_Length(a2),d1
		lsr.l	#2,d1
		moveq	#0,d0
		bra.s	smbbSumDBF

smbbSumLoop:
		add.l	(a0)+,d0
		bcc.s	smbbSumDBF
		addq.l	#1,d0
smbbSumDBF:
		dbf	d1,smbbSumLoop

		not.l	d0
		bne.s	smbbFail

		;--	Might have set SILENTSTART in expansion base
		;--	while trying BootPoints

		bclr	#EBB_SILENTSTART,eb_Flags(a5)

		;--	and clear cache before calling loaded code

		CALLLVO	CacheClearU

		;------ jump to the code with a1/a6 set up
		move.l	a3,a1
		move.l	bbe_Length(a2),IO_LENGTH(a1)
		move.l	bbe_Data(a2),a0
		move.l	a0,IO_DATA(a1)
		move.l	bbe_Offset(a2),IO_OFFSET(a1)

		;-- save all registers for robust system operations.
		;-- in truth its implied that register be saved by
		;-- the boot block code, but after talking with
		;-- a developer, its become clear that this wasn't
		;-- well understood.  Since register dependencies
		;-- changed since 1.x days, save all non-scratchable
		;-- registers (overkill)

		movem.l	d2-d7/a2-a6,-(sp)
		jsr	BB_ENTRY(a0)
		movem.l	(sp)+,d2-d7/a2-a6

		;------ check the return code: zero means a0 contains boot addr
		tst.l	d0
		beq.s	smbbSucceed

		move.l	#AN_BootError,d0

smbbAlert:
		bsr	SMAlert

smbbFail:
		;------ turn the motor off
		move.l	a3,a1
		move.w	#TD_MOTOR,IO_COMMAND(a1)	
		clr.l	IO_LENGTH(a1)
		CALLLVO	DoIO

smbbNoDisk:
		moveq	#-1,d0

smbbSucceed:
		movem.l	(a7)+,d2/a3
		rts

smbbIOError:
		cmp.b	#TDERR_DiskChanged,d0
		beq	smbbHaveDevice

		move.l	#AN_BootStrap!AG_IOError,d0
		bra.s	smbbAlert

smTurnOffDisplay:

		;-- turn of any display to show user that disk is noticed
		tst.l	d5
		beq.s	smbbRead

		exg	d5,a5
		bsr	SMDisplayOff
		move.l	d5,a5
		moveq	#0,d5	
smbbRead:	rts


;------	SMCloseIORs --------------------------------------------------
;
;	a4	BootLocals
;	a5	ExpansionBase
;	a6	ExecBase
;
;	d2	next bbe
;	a2	current bbe
;
SMCloseIORs:
		movem.l	d2/a2,-(a7)
		move.l	bbl_BBEList(a4),a2
smciLoop:
		move.l	(a2),d2
		beq.s	smciDone

		tst.l	bbe_IOR+IO_DEVICE(a2)
		beq.s	smciNext

		lea	bbe_IOR(a2),a1
		CALLLVO	CloseDevice
		clr.l	bbe_IOR+IO_DEVICE(a2)

smciNext:
		move.l	d2,a2
		bra.s	smciLoop

smciDone:
		movem.l	(a7)+,d2/a2
		rts


;------	SMSwizzleBefore ----------------------------------------------
;
;	d3	non-zero for eb_MountList entry
;	a3	if d3, eb_MountList current entry
;	a5	ExpansionBase
;	a6	ExecBase
;
SMSwizzleBefore:
		tst.l	d3			; check if eb_MountList entry
		beq.s	smsbDone		;   no, no swizzle

		;-- temporarily swizzle current node to head of eb_MountList
		move.l	a3,a1
		CALLLVO	Remove

		lea	eb_MountList(a5),a0
		move.l	a3,a1
		CALLLVO	AddHead

smsbDone:
		rts


;------	SMSwizzleAfter -----------------------------------------------
;
;	d2	if d3, eb_MountList previous entry
;	d3	non-zero for eb_MountList entry
;	a3	if d3, eb_MountList current entry
;	a5	ExpansionBase
;	a6	ExecBase
;
SMSwizzleAfter:
		tst.l	d3
		beq.s	smsaDone

		;-- put current node back in place
		move.l	a3,a1
		CALLLVO	Remove

		lea	eb_MountList(a5),a0	; (even though not used)
		move.l	a3,a1
		exg	d2,a2
		CALLLVO	Insert
		exg	d2,a2

smsaDone:
		rts


;------	SMBootPoint --------------------------------------------------
;
;	d0	ConfigDev
;	d2	if d3, eb_MountList previous entry
;	d3	non-zero for eb_MountList entry
;	a0	DiagArea
;	a2	current entry
;	a3	if d3, eb_MountList current entry
;	a4	BootLocals
;	a5	ExpansionBase
;	a6	ExecBase
;
SMBootPoint:
		;-- invoke boot function
		;--	prepare boot function
		moveq	#0,d1
		move.w	da_BootPoint(a0),d1
		add.l	d1,a0
		move.l	d0,-(a7)		; ConfigDev arg on stack
		move.l	a0,-(a7)		; boot entry point on stack

		bsr.s	SMSwizzleBefore
		bsr.s	SMCloseIORs

		;--	call boot function
		;	1.  ConfigDev is on the stack
		;	2.  BootNode is in a2
		;	3.  SysBase is in a6

		;--     For BootPoint, silent startup is assumed to
		;--	to be TRUE!

		bset	#EBB_SILENTSTART,eb_Flags(a5)

		move.l	(a7)+,a0
		jsr	(a0)
		addq.l	#4,a7

		;-- return implies failure to boot
		bsr.s	SMSwizzleAfter

ebNoBoot:
		rts


;------	SMAlert ------------------------------------------------------
SMAlert:
		movem.l	d7/a5/a6,-(a7)
		move.l	d0,d7
		moveq	#0,d0
		move.l	d0,a5
		move.l	ABSEXECBASE,a6
		CALLLVO	Alert
		movem.l	(a7)+,d7/a5/a6
iRts		rts


;------ SMBootCard ---------------------------------------------------
;	d2	cache - restored
;	d3	flag used to track card change while polling
;	d5	See above - used as flag (display on/off)
;	a2	pointer to card handle - restored
;	a3	cache - restored
;	a4	BootLocals - restored
;	a5	ExpansionBase / display
;	a6	ExecBase / CardBase - restored
;
SMBootCard:

		movem.l	d0-d2/a0-a3/a6,-(sp)
	;
	; don't even bother if there is no resource, or if
	; a card in the slot already owns the slot (which means
	; we found an execute-in-place card which returned, but
	; wants to retain ownership of the card in the slot)
	;

		move.l	bbl_CardResource(a4),d0
		beq.s	SMNoBootCard

		move.l	d0,a3		;save resource base
		exg	a3,a6		;save exec, and use resource

	; try to own card (immediate mode)


		move.l	bbl_CardHandle(a4),a2
		movea.l	a2,a1

		CALLLVO	OwnCard

		tst.l	d0
		bne.s	SMNoBootCard

	; check if this is the same card as last time

		CALLLVO	CardChangeCount
		cmp.l	bbl_CardCount(a4),d0
		beq.s	SMFreeThisCard

	; cache last successful count value

		move.l	d0,bbl_CardCount(a4)

	; check if AmigaXIP card

		CALLLVO	IfAmigaXIP	;handle in A2


		move.l	d0,d2		;cache ROM-TAG pointer
		beq.s	SMFreeThisCard

	; ask for reset on card removal

		move.l	a2,a1
		moveq	#01,d0

		CALLLVO	CardResetRemove

		tst.l	d0
		beq.s	SMFreeThisCard

	; turn on accessing light (if this feature is provided).  Don't
	; bother with return value (since the machine will reset if
	; the card is removed now, and don't bother turning the light
	; off since ReleaseCard() will do this for me).


		move.l	a2,a1
		CALLLVO	BeginCardAccess

		exg	a3,a6		;use execbase/save resource base

	; turn off display if on (assumes a5/d5 passed in)

		bsr	smTurnOffDisplay

		move.l	d2,a1		;ROM-TAG
		moveq	#00,d1		;no seglist

		CALLLVO	InitResident

	; if succeeded, never bother with this polling again

		clr.l	bbl_CardResource(a4)

		tst.l	d0
		bne.s	SMUseThisCard

	; else poll at next card change count

		move.l	a3,bbl_CardResource(a4)

		move.l	a3,a6		;use resource base
		
	; InitResident() returned false, so free this card

SMFreeThisCard:

		move.l	a2,a1
		moveq	#CARDF_REMOVEHANDLE,d0

		CALLLVO	ReleaseCard

SMUseThisCard:

SMNoBootCard:
		movem.l	(sp)+,d0-d2/a0-a3/a6

		rts

CRName:
		CARDRESNAME

		ds.w	0
		

	END
@


36.19
log
@Use strap from V37 (modified after strap copied to V39 directory).
Includes XIP card boot code
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.19 91/10/11 12:29:26 darren Exp $
d33 1
a39 1
	XDEF	ELName
d58 1
d156 2
a157 3
		moveq	#0,d0
		lea	ELName(pc),a1
		CALLLVO	OpenLibrary
d351 2
a352 3
		lea	ULName(pc),a1
		moveq	#0,d0
		CALLLVO	OpenLibrary
a907 4

ELName		dc.b	'expansion.library',0

ULName		dc.b	'utility.library',0
@


36.18
log
@ClearCacheU() call before jumping to code loaded from floppy disk
(BootBlock code).  Also save, and restore d2-d6/a2-a6 around
the call to BootBlock code (implied, but apparently wasn't
clear to developers that this is required, so done in strap
for robustness).
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.17 91/02/20 11:43:44 darren Exp $
d32 1
d34 1
d57 1
d65 11
d81 1
d101 3
d120 1
a120 1

d175 20
d263 4
d436 4
a439 1
		bsr	SMBootBlocks
d475 1
d549 1
a549 7
		tst.l	d5
		beq.s	smbbRead

		exg	d5,a5
		bsr	SMDisplayOff
		move.l	d5,a5
		moveq	#0,d5	
a550 1
smbbRead:
d645 12
d796 114
d913 4
@


36.17
log
@Just fiddling with turning off harddrive while testing new
display.
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.16 91/02/20 11:25:20 darren Exp Locker: darren $
d54 1
d553 4
d563 10
d574 1
@


36.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.15 91/02/18 19:05:15 darren Exp Locker: darren $
@


36.15
log
@*** empty log message ***
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.14 91/02/15 11:12:04 darren Exp Locker: darren $
@


36.14
log
@Turns magic SILENTSTART bit on/off in expansion base.  SILENTSTART
is turned on for bootpoint booting, and off for bootblock booting.
BootBlock code will have to open expansion, and set the bit to
override the default.
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.13 90/04/24 15:17:13 kodiak Exp Locker: darren $
@


36.13
log
@document a6 == SysBase when boot function is called
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.12 90/04/19 09:12:16 kodiak Exp Locker: kodiak $
d547 5
d700 6
@


36.12
log
@document that a2 can be used as pointer to eb_MountList node when calling
the boot entry point for a BootPoint style boot.
@
text
@d2 1
a2 1
**	$Id: boot.asm,v 36.11 90/04/13 11:37:19 kodiak Exp Locker: kodiak $
d426 1
a426 1
		jmp	(a0)
d694 1
@


36.11
log
@use Id instead of Header for 4.x rcs
@
text
@d2 1
a2 1
**	$Id$
d692 2
@


36.10
log
@for rcs 4.x header change
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/strap/RCS/boot.asm,v 36.9 90/03/26 17:53:10 kodiak Exp Locker: kodiak $
@


36.9
log
@(new rcs causes new header)
@
text
@d2 1
a2 1
**	$Header: /usr2/kodiak/src/KS/strap/RCS/boot.asm,v 36.8 90/01/12 17:21:22 kodiak Exp $
@


36.8
log
@allow 'BOOT' as first characters in boot node.
@
text
@d2 1
a2 1
**	$Header: boot.asm,v 36.7 90/01/09 14:02:41 kodiak Exp $
@


36.7
log
@fixed floppy boot for single floppy system
@
text
@d2 1
a2 1
**	$Header: boot.asm,v 36.6 89/12/30 22:24:20 kodiak Exp $
d523 4
a526 2
		move.l	(a0),d0		; check for 'DOS?'
		clr.b	d0		;   (anything allowed in low byte)
d531 1
@


36.6
log
@first cut at boot block support here, partially from floppy.asm
@
text
@d2 1
a2 1
**	$Header$
d161 1
d266 2
a267 2
		move.l de_BufMemType(a0),bbl_MemList+ML_ME+ME_SIZE+ME_LENGTH(a4)
		mulu	de_SizeBlock(a0),d0
d276 1
a276 1
		move.l	#AO_BootStrap!AG_NoMemory,d0
d326 1
a326 3
		move.l	de_HighCyl(a3),d0
		sub.l	de_LowCyl(a3),d0
		addq.w	#1,d0
d395 5
@


36.5
log
@remove unused and misleading label 
@
text
@d2 1
a2 4
**	$Filename$
**	$Release: 1.4 $
**	$Revision: 36.4 $
**	$Date: 89/04/30 18:29:39 $
d11 1
a11 1
**	Included Files
d24 3
a26 1

d30 1
a30 1
**	Imported Names
a31 7
	XLVO	AddHead
	XLVO	Alert
	XLVO	CloseLibrary
	XLVO	InitResident
	XLVO	Insert
	XLVO	OpenLibrary
	XLVO	Remove
d33 1
a33 3
	XLVO	ObtainConfigBinding
	XLVO	ReleaseConfigBinding
	XLVO	SetCurrentBinding
d35 3
a38 4
	XREF	SMFloppiesOpen
	XREF	SMFloppiesClose
	XREF	SMFloppyBoot
	XREF	SMFloppiesWait
d40 22
d64 1
a65 1
**	Exported Names
d67 1
a67 3
	XDEF	SMInit
	XDEF	SMAlert
	XDEF	ELName
d69 9
d79 24
d105 8
a112 8
;	1.  step thru eb_MountList, with phantom entries for
;	    df0:, df1:, df2: and df3: at 5, -10, -20, and -30, and
;	    try booting from entries on the list.  Cache the floppy
;	    change counts in the process.
;	2.  put up the "insert workbench" graphic and wait for a
;	    disk change in a floppy or a change to the head of
;	    eb_MountList.  try booting off a the new disk.  repeat
;	    until successful.
d114 3
d118 6
a123 3
;	d2	eb_MountList next entry
;	d3	unit number of next floppy
;	d4	priority of next floppy
a124 1
;	d6	eb_MountList first entry
d126 2
a127 1
;	a2	eb_MountList previous entry, then floppy boot code
d129 1
a129 1
;	a4	StrapFloppyLocals
d133 1
d140 1
a140 1
		bne.s	iExpLibOK
d147 1
a147 1
iExpLibOK:
d150 2
a151 1
		move.l	d0,a5		; save ExpansionBase
d153 2
a154 1
		bsr	SMFloppiesOpen	; sets a4
d156 3
a158 8
	;------
	;------ step thru eb_MountList
	;------
		moveq	#0,d3		; trackdisk unit for DF0:
		moveq	#5,d4		; hardcoded priority of DF0:
		move.l	d3,a2		; clear a2 (node pred)
		move.l	eb_MountList(a5),d6
		move.l	d6,a3
d160 5
a164 4
		;------ scan eb_MountList, intersperse w/ floppies
iScanEMList:
		move.l	(a3),d2		; check for end of mount list
		beq	iScanFloppy
d166 3
a168 3
		;------ check if floppy time
		cmp.b	LN_PRI(a3),d4
		ble.s	iCheckEM
d170 4
a173 7
iScanFloppy:
		;------ check floppy now
		cmp.w	#4,d3
		bge.s	iScanFloppiesDone
		move.l	d3,d0		; floppy unit to check
		move.b	iDFMPriority(pc,d3.w),d4
		addq.w	#1,d3
a174 2
		bsr	SMFloppyBoot
		beq	iFloppyBoot
d176 4
a179 1
		bra.s	iScanEMList
d181 3
a183 1
iDFMPriority	dc.b	-10,-20,-30,-127
d185 3
a187 2
iCheckEM:
		bsr	SMExpansionBoot
d189 7
a195 4
iScanEMNext:
		move.l	a3,a2		; save ln_Pred of next
		move.l	d2,a3		; get next
		bra	iScanEMList
d197 5
d203 5
a207 4
iScanFloppiesDone:
	;------
	;------	prompt for boot disk till successful boot
	;------
d209 5
a213 2
iPromptFloppy:
		move.l	a5,d5		; save ExpansionBase
a214 1
		bsr	SMDisplayOn	; sets a5
d216 5
a220 3
		exg	d5,a5		; activate ExpansionBase
		bsr	SMFloppiesWait
		move.l	d0,d2
d222 11
a232 2
		exg	d5,a5		; activate StrapDisplayLocals
		bsr	SMDisplayOff
d234 7
a240 1
		move.l	d5,a5		; restore ExpansionBase
d242 21
a262 2
		move.l	d2,d0
		bmi.s	iExpansionBoot
d264 7
a270 1
		bsr	SMFloppyBoot
d272 1
a272 1
		bne.s	iPromptFloppy	; try again
d274 4
a277 3
iFloppyBoot:
		move.l	a0,a2		; save floppy boot entry point
		bsr	SMFloppiesClose
d279 60
a338 2
		;------ release expansion library
		move.l	a5,a1		; ExpansionBase
d341 3
a343 4
		;------	restore stack, registers & call boot module
		move.l	a2,a0
		movem.l	(a7)+,d2-d5/a2-a6
		jmp	(a0)
d345 4
a348 5
iExpansionBoot:
		suba.l	a2,a2		; clear a2
		move.l	eb_MountList(a5),a3 ; first entry
		bsr.s	SMExpansionBoot
		bra.s	iPromptFloppy
d350 2
d353 6
a358 13
;------	SMExpansionBoot ----------------------------------------------
;
;	a2	eb_MountList previous entry
;	a3	eb_MountList current entry
;
SMExpansionBoot:
		;-- check if bootable entry
		cmp.b	#NT_BOOTNODE,LN_TYPE(a3)
		bne.s	ebNoBoot
		tst.l	bn_DeviceNode(a3)
		beq.s	ebNoBoot
		move.l	LN_NAME(a3),d0		; ConfigDev pointer
		beq.s	ebNoBoot
d361 1
a361 1
		beq.s	ebNoBoot
d363 1
a363 1
		beq.s	ebNoBoot
a364 6
	IFNE	DAC_CONFIGTIME-$10
	FAIL	"DAC_CONFIGTIME not bit 4, recode"
	ENDC
	IFNE	da_Config
	FAIL	"da_Config not zero, recode"
	ENDC
d366 1
a366 1
		beq.s	ebNoBoot
d368 305
d681 2
a682 6
		;--	temporarily swizzle node to head of eb_MountList
		move.l	a3,a1
		CALLLVO	Remove
		lea	eb_MountList(a5),a0
		move.l	a3,a1
		CALLLVO	AddHead
a683 3
		;--	free floppy resources
		bsr	SMFloppiesClose

d690 1
a690 2
		;--	reacquire floppy resources
		bsr	SMFloppiesOpen
a691 7
		;--	restore eb_MountList
		move.l	a3,a1
		CALLLVO	Remove
		lea	eb_MountList(a5),a0	; (even though not used)
		move.l	a3,a1
		CALLLVO	Insert

d709 2
d712 1
@


36.4
log
@poll all floppies & eb_MounList for inserted floppies after prompt
@
text
@d4 2
a5 2
**	$Revision: 36.3 $
**	$Date: 89/04/04 14:42:23 $
a180 1
iError:
@


36.3
log
@fix booting from eb_MountList devices
@
text
@d4 2
a5 2
**	$Revision: 36.2 $
**	$Date: 89/01/06 17:27:29 $
d46 2
a47 2
	XREF	SMFloppyOpen
	XREF	SMFloppyClose
d49 1
a49 1
	XREF	SMFloppyWait0
d68 3
a70 2
;	    disk change in df0:.  try booting off df0:.  repeat until
;	    successful.
d72 13
a84 1

d86 1
a86 11
		movem.l	d2-d4/a2-a6,-(a7)

		;------ reserve local variable space
		lea	-StrapModuleLocals_SIZEOF(a7),a7
		move.l	a7,a4

		;------ initialize trackdisk request and reply port
		lea	sml_Port(a4),a0
		move.l	a0,sml_IOR+MN_REPLYPORT(a4)
		lea	sml_Port+MP_MSGLIST(a4),a0
		NEWLIST	a0
a87 10
		move.b	d0,sml_Port+MP_FLAGS(a4)
		move.b	#SIGB_SINGLE,sml_Port+MP_SIGBIT(a4)
		move.l	ThisTask(a6),sml_Port+MP_SIGTASK(a4)
		move.l	d0,sml_DiskChangeCnt(a4)	; for DF0:
		move.l	d0,sml_DiskChangeCnt+4(a4)	; for DF1:
		move.l	d0,sml_DiskChangeCnt+8(a4)	; for DF2:
		move.l	d0,sml_DiskChangeCnt+12(a4)	; for DF3:

		;------ get expansion library
						; d0 is zero
d92 1
d95 1
a95 2
		lea	iRts(pc),a2	; null boot
		bra	iError
d97 1
d99 2
d103 2
d111 2
a112 1
		move.l	eb_MountList(a5),a3
d117 1
a117 1
		beq	iScanEMDone
d123 1
d125 2
a130 1
		bsr	SMFloppyOpen
a131 1
		tst.l	d0
d133 1
a133 1
		bsr	SMFloppyClose
d139 62
a200 1
		;------ check if bootable entry
d202 1
a202 1
		bne.s	iScanEMNext
d204 1
a204 1
		beq.s	iScanEMNext
d206 1
a206 1
		beq.s	iScanEMNext
d209 3
a211 3
		beq.s	iScanEMNext
		move.l	cd_Rom+er_Reserved0c(a0),d1	; DiagArea pointer
		beq.s	iScanEMNext
d219 2
a220 2
		btst.b	#4,(a0)		; DAC_CONFIGTIME,da_Config(a0)
		beq.s	iScanEMNext
d222 2
a223 1
		;------	prepare boot function
d230 1
a230 1
		;------ temporarily swizzle node to head of eb_MountList
d237 4
a240 1
		;------	call boot function
d245 5
a249 1
		;------	return implies failure to boot, restore eb_MountList
d256 2
a257 4
iScanEMNext:
		move.l	a3,a2		; save ln_Pred of next
		move.l	d2,a3		; get next
		bra	iScanEMList
a258 4
iScanEMDone:
		;------	ensure all floppies have been tried
		cmp.w	#3,d3
		bgt.s	iScanFloppiesDone
d260 1
a260 47
		move.l	d3,d0		; floppy unit to check
		addq.w	#1,d3

		bsr	SMFloppyOpen
		bsr	SMFloppyBoot
		tst.l	d0
		beq.s	iFloppyBoot
		bsr	SMFloppyClose
		bra.s	iScanEMDone	; try next floppy



iScanFloppiesDone:
	;------
	;------	prompt for boot disk in df0: till successful boot
	;------

		moveq	#0,d0
		bsr	SMFloppyOpen

iPromptFloppy:
		bsr	SMDisplayOn

		bsr	SMFloppyWait0

		bsr	SMDisplayOff

		bsr	SMFloppyBoot
		tst.l	d0
		bne.s	iPromptFloppy	; try again

iFloppyBoot:
		move.l	a0,a2		; save floppy boot entry point
		bsr	SMFloppyClose

		;------ release expansion library
		move.l	a5,a1		; ExpansionBase
		CALLLVO	CloseLibrary

iError:
		;------	restore stack, registers & call boot module
		move.l	a2,a0
		lea	StrapModuleLocals_SIZEOF(a7),a7
		movem.l	(a7)+,d2-d4/a2-a6
		jmp	(a0)


@


36.2
log
@remove unneeded XLVOs
@
text
@d4 2
a5 2
**	$Revision: 36.1 $
**	$Date: 88/12/23 12:08:41 $
d80 8
a91 7
		lea	sml_Port(a4),a0
		move.l	a0,sml_IOR+MN_REPLYPORT(a4)
		move.b	d0,MP_FLAGS(a0)
		move.b	#SIGB_SINGLE,MP_SIGBIT(a0)
		move.l	ThisTask(a6),MP_SIGTASK(a0)
		lea	MP_MSGLIST(a0),a0
		NEWLIST	a0
d94 1
a94 1
		moveq	#0,d0
d147 1
a147 1
		btst.b	#ERTB_DIAGVALID,er_Type(a0)
d149 1
a149 1
		move.l	er_Reserved0c(a0),d1	; DiagArea pointer
d152 7
a158 1
		btst.b	#4,da_Config(a0)	; DAC_CONFIGTIME
@


36.1
log
@add.w -> lea
@
text
@d4 2
a5 2
**	$Revision: 36.0 $
**	$Date: 88/12/20 14:26:33 $
a34 1
	XLVO	AllocMem
a35 1
	XLVO	FreeMem
@


36.0
log
@split from main.asm
@
text
@d5 1
a5 1
**	$Date: 88/12/20 13:51:55 $
d78 1
a78 1
		sub.w	#StrapModuleLocals_SIZEOF,a7
d234 1
a234 1
		add.w	#StrapModuleLocals_SIZEOF,a7
@
