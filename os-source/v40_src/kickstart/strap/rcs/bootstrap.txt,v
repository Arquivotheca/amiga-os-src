head     36.8;
branch   ;
access   ;
symbols  V37_23:36.8 V37_21:36.8 V37_19:36.8 V37_17:36.8 V37_7:36.8 V37_3:36.7 V36_118:36.7 V36_117:36.7 V36_109:36.5 V36_108:36.5 V36_107:36.4 V36_106:36.3 V36_105:36.3 V36_104:36.3 V36_102:36.2 V36_98:36.2 V36_96:36.2 V36_90:36.2 V36_86:36.1 V36_85:36.0 V36_83:36.0 V36_82:36.0 V36_80:36.0 V36_75:36.0 V36_73:36.0 V36_56:36.0 V36_55:36.0 V36_54:36.0 V36_51:36.0;
locks    ; strict;
comment  @*   @;


36.8
date     91.02.15.11.17.49;  author darren;  state Exp;
branches ;
next     36.7;

36.7
date     90.08.28.19.13.01;  author darren;  state Exp;
branches ;
next     36.6;

36.6
date     90.06.14.11.01.31;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     90.04.19.09.18.03;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     90.04.13.11.37.44;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.02.11.13.39;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.12.30.22.25.37;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.12.15.15.07.37;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     89.06.06.14.45.10;  author kodiak;  state Exp;
branches ;
next     ;


desc
@@


36.8
log
@Add comments re: the new SILENTSTART bit in expansion base.
@
text
@Amiga BootStrap

    At priority -40 in the system module initialization sequence, after
    most other modules are initialized, appropriate expansion boards
    are configured.  Appropriate boards will match a
    FindConfigDev(, -1, -1) -- these are all boards on the expansion
    library board list.  Furthermore, they will meet all of the
    following conditions:

	1.  CDB_CONFIGME set in cd_Flags,
	2.  ERTB_DIAGVALID set in cd_Rom er_Type,
	3.  diagnostic area pointer (in cd_Rom er_Reserved0c) is
	    non-zero,
	4.  DAC_CONFIGTIME set in da_Config, and
	5.  at least one valid resident tag within the diagnostic area,
	    the first of which is used by InitResident() below.  This
	    resident structure was patched to be valid during the rom
	    diagnostic routine run when the expansion library first
	    initialized the board.

    Boards meeting all these conditions are initialized with the
    standard InitResident() mechanism, with a null seglist.  The board
    initialization code can find it's ConfigDev structure with the
    expansion library's GetCurrentBinding() function.  This is an
    appropriate time for drivers to Enqueue() a boot node on the
    expansion library's eb_MountList for use by the strap module below,
    and clear CDB_CONFIGME so a BindDrivers command will not try to
    initialize the board a second time.

    This module will also enqueue nodes for 3.5" trackdisk.device
    units.  These nodes will be at the following priorities:

	pri	drive
	---	-----
	  5	df0:
	-10	df1:
	-20	df2:
	-30	df3:


    Next, at priority -60 in the system module initialization sequence,
    the strap module is invoked.  Nodes from the prioritized
    eb_MountList list is used in priority order in attempts to boot.
    An item on the list is given a chance to boot via one of two
    different mechanisms, depending on whether it it uses boot code
    read in off the disk ("BootBlocks"), or uses boot code provided in
    the device ConfigDev diagnostic area ("BootPoint").  Floppies
    always use the BootBlocks.  Other entries put on the eb_MountList
    (e.g. hard disk partitions) used the BootPoint mechanism for 1.3,
    but can use either for 1.4.

    The eb_MountList is modified before each boot attempt, and then
    restored and re-modified for the next attempt if the boot fails:

	1.  the node associated with the current boot attempt is
	    placed at the head of the eb_MountList.
	2.  nodes marked as unusable under AmigaDOS are removed from
	    the list.  Nodes that are unusable are marked by the
	    longword bn_DeviceNode->dn_Handler having the most
	    significant bit set.  This is used, for example, to keep
	    UNIX partitions off the AmigaDOS device list when booting
	    AmigaDOS instead of UNIX.

    The selection of which of the two different boot mechanisms
    proceeds as follows:

	1.  the node must be valid boot node, i.e. meet both of the
	    following conditions:
	    a.  ln_Type is NT_BOOTNODE,
	    b.  bn_DeviceNode is non-zero,

	2.  The type of boot is determined by looking at the DosEnvec
	    pointed to by fssm_Environ pointed to by the dn_Startup in
	    the bn_DeviceNode:
	    a.  if the de_TableSize is less than DE_BOOTBLOCKS, or the
		de_BootBlocks entry is zero, BootPoint booting is
		specified, otherwise
	    b.  de_BootBlocks contains the number of blocks to read
		in from the beginning of the partition, checksum, and
		try to boot from.
    
    For BootBlocks booting:
	1.  The disk device must contain valid boot blocks:
	    a.  the device and unit from dn_Startup opens successfully,
	    b.  memory is available for the <de_BootBlocks> *
		<de_SizeBlock> * 4 bytes of boot block code,
	    c.  the device commands CMD_CLEAR, TD_CHANGENUM, and
		CMD_READ of the boot blocks execute without error,
	    d.  the boot blocks start with the three characters 'DOS'
		and pass the longword checksum (with carry wraparound),
		and
	    e.  memory is available to construct a boot node on the
		eb_MountList to describe the floppy.
	    If a device error is reported in 1.c., or if memory is not
	    available for 1.b. or 1.e., a recoverable alert is
	    presented before continuing.
	2.  The boot code in the boot blocks is invoked as follows:
	    a.  The address of the entry point for the boot code is
		offset BB_ENTRY into the boot blocks in memory.
	    b.  The boot code is invoked with the IO Request used to
		issue the device commands in 1.c. above in register
		A1, with the io_Offset pointing to the beginning of
		the partition (the origin of the boot blocks) and
		SysBase in A6.
	3.  The boot code returns with results in both D0 and A0.
	    a.  Non-zero D0 indicates boot failure.  The recoverable
		alert AN_BootError is presented before continuing.
	    b.  Zero D0 indicates A0 contains a pointer to the function
		to complete the boot.  This completion function is
		chained to with SysBase in A6 after the strap module
		frees all it's resources.  It is usually the dos
		library initialization function, from the dos.library
		resident tag.  Return from this function is identical
		to return from the strap module itself.


    For BootPoint booting:
	1.  The eb_MountList node must contain a valid BootPoint:
	    a.  ConfigDev pointer (in ln_Name) is non-zero,
	    b.  diagnostic area pointer (in cd_Rom er_Reserved0c) is
		non-zero,
	    c.  DAC_CONFIGTIME set in da_Config.
	2.  The boot routine of valid boot node is invoked as follows:
	    a.  The address of the boot routine is calculated from
		da_BootPoint.
	    b.  The resulting boot routine is invoked with the
		ConfigDev pointer on the stack in C fashion: i.e.
		    (*boot)(configDev);
		Moreover, register A2 will contain the address of
		the associated eb_MountList node.
	3.  Return from the boot routine indicates failure to boot.


    If all entries fail to boot, the user is prompted to put a bootable
    disk into a floppy drive with the "strap screen".  The BootBlocks
    style devices are polled for new disks.  When one appears, the
    "strap screen" is removed and the BootBlocks boot mechanism is
    applied as described above.  The process of prompting and trying
    continues till a successful boot occurs.

    Note that if all entries falied to boot, typically only floppies
    have BootBlocks.  Other devices which use BootPoint booting are not
    polled for new disks.


    Late note - new for (V37):

    ExpansionBase has a new bit in the eb_Flags field; see libraries/
    expansionbase.i/h.  This new bit is used to determine if opening of
    the initial shell window should be delayed until the first output
    to the shell.  If the bit (EBB_SILENTSTART) is set, opening
    the initial shell window will be delayed.

    By default, strap sets this bit for BootPoint booting, and clears
    this bit for BootBlock booting.  Therefore BootBlock style
    boot code has to open Expansion library, and explicitly set this
    bit if silent startup is desired.

Changes from 1.3
----------------
    The following modules have changed:
	romboot          -- romboot is no longer an exec library:
			    RomBoot() is no longer public.  A module at
			    priority -40 still exists to do the same
			    diagnostic area configuration.  Floppies
			    are explicitly put on the eb_MountList
	strap            -- Strap presents a new strap screen (i.e.
			    changed the hand screen).  Strap can boot
			    from any floppy.  Code is fixed to boot
			    from non-floppy at a priority higher than
			    5.  BootBlocks support for eb_MountList
			    entries added.  BootPoint eb_MountList
			    node parameter in A2 made official.
	dos		 -- Dos no longer has special code to start up
			    non-boot floppies.

    The following include files have changed:
	dos/filehandler.[hi]		 -- de_BootBlocks added
	libraries/expansionbase.[hi]	 -- fields privatized
	libraries/romboot_base.[hi]      -- no longer exists: BootNode
					    now in expansionbase.[hi]
@


36.7
log
@Added clarification to text -
clarify that only devices (e.g., floppies)
which use BootBlocks booting are polled
if all entries falied to mount.
@
text
@d146 13
@


36.6
log
@remove reference to eb_MountList head changes causing boot retry
@
text
@d49 1
a49 1
    (e.g. hard disk partitions) used the BootPoing mechanism for 1.3,
d140 4
@


36.5
log
@document that a2 can be used as pointer to eb_MountList node when calling
the boot entry point for a BootPoint style boot.
@
text
@d135 3
a137 4
    disk into a floppy drive with the "strap screen".  The system
    floppy drives are polled for new disks, and the eb_MountList is
    polled for a new head node.  When one or the other appears, the
    "strap screen" is removed and the appropriate boot mechanism is
@


36.4
log
@use Id instead of Header for 4.x rcs
@
text
@d128 3
a130 1
		(*boot)(configDev);
d156 2
a157 1
			    entries added.
@


36.3
log
@for rcs 4.x header change
@
text
@@


36.2
log
@corresponds to floppies added to eb_MountList at romboot time
@
text
@@


36.1
log
@add description for de_BootBlocks boot
@
text
@d30 2
a32 5
    Next, at priority -60 in the system module initialization sequence,
    the strap module is invoked.  It conceptually merges the existing
    eb_MountList with a prioritized list for system floppies.  The
    floppy list looks like:

d36 1
a36 1
	-10     df1:
a38 8
    
    The resulting prioritized merged list is used in priority order in
    attempts to boot.  An item on the list is given a chance to boot
    via one of three different mechanisms, depending on whether it is a	<<====
    system floppy or exists on the eb_MountList, and if on the		<<====
    eb_MountList, depending on whether it uses boot code provided in	<<====
    the device ConfigDev diagnostic area, or whether it uses boot code	<<====
    read in off the disk.						<<====
d40 12
d57 6
a62 4
	2.  nodes marked as unusable under AmigaDOS are removed from	<<====
	    the list.  Nodes that are unusable are marked by the	<<====
	    longword bn_DeviceNode->dn_Handler having the most		<<====
	    significant bit set.					<<====
d64 2
a65 1
    The three different boot mechanisms are:
d67 1
a67 2
	eb_MountList entrys:
	1.  The entry must be valid boot node, i.e. meet all of the
a70 56
	    c.  ConfigDev pointer (in ln_Name) is non-zero,
	    d.  diagnostic area pointer (in cd_Rom er_Reserved0c) is
		non-zero,
	    e.  DAC_CONFIGTIME set in da_Config.
	2.  The type of boot is determined by looking at the DosEnvec	<<====
	    pointed to by fssm_Environ pointed to by the dn_Startup in	<<====
	    the bn_DeviceNode:						<<====
	    a.  if the de_TableSize is less than DE_BOOTBLOCKS,		<<====
		da_BootPoint is used.					<<====
	    b.	if the de_BootBlocks entry is zero, da_BootPoint is	<<====
		used, otherwise						<<====
	    c.  de_BootBlocks contains the number of blocks to read	<<====
		in from the beginning of the partition, checksum, and	<<====
		try to boot from.					<<====
	
	for da_BootPoint booting:
	3.  The boot routine of valid boot node is invoked as follows:
	    a.  The address of the boot routine is calculated from
		da_BootPoint.
	    b.  The resulting boot routine is invoked with the
		ConfigDev pointer on the stack in C fashion: i.e.
		(*boot)(configDev);
	4.  Return from the boot routine indicates failure to boot.
	
	for de_BootBlocks booting:					<<====
	3.  The disk device must contain valid boot blocks:		<<====
	    a.  the device and unit from dn_Startup opens successfully,	<<====
	    b.  memory is available for the <de_BootBlocks> *		<<====
		<de_SizeBlock> * 4 bytes of boot block code,		<<====
	    c.  the device commands CMD_CLEAR, and CMD_READ of the boot	<<====
		blocks execute without error,				<<====
	    d.  the boot blocks pass the longword checksum (with carry	<<====
		wraparound), and					<<====
	    e.  memory is available to construct a boot node on the	<<====
		eb_MountList to describe the floppy.			<<====
	    If a device error is reported in 1.c., or if memory is not	<<====
	    available for 1.b. or 1.e., a recoverable alert is		<<====
	    presented before continuing.				<<====
	4.  The boot code in the boot blocks is invoked as follows:	<<====
	    a.  The address of the entry point for the boot code is	<<====
		offset BB_ENTRY into the boot blocks in memory.		<<====
	    b.  The boot code is invoked with the IO Request used to	<<====
		issue the device commands in 1.c. above in register	<<====
		A1, with the io_Offset pointing to the beginning of	<<====
		the partition (the origin of the boot blocks) and	<<====
		SysBase in A6.						<<====
	5.  The boot code returns with results in both D0 and A0.	<<====
	    a.  Non-zero D0 indicates boot failure.  The recoverable	<<====
		alert AN_BootError is presented before continuing.	<<====
	    b.  Zero D0 indicates A0 contains a pointer to the function	<<====
		to complete the boot.  This completion function is	<<====
		chained to with SysBase in A6 after the strap module	<<====
		frees all it's resources.  It is usually the dos	<<====
		library initialization function, from the dos.library	<<====
		resident tag.  Return from this function is identical	<<====
		to return from the strap module itself.			<<====
d72 18
a89 9
	system floppy entry:
	1.  The floppy drive must contain a valid boot floppy, i.e.
	    meet all of the following conditions:
	    a.  the trackdisk.device unit associated with the floppy
		drive opens successfully,
	    b.  trackdisk.device commands CMD_CLEAR, TD_CHANGENUM, and
		the CMD_READ of the boot blocks (the first two 512 byte
		blocks) execute without error,
	    c.  the boot blocks start with the three characters 'DOS'
d92 1
a92 1
	    d.  memory is available to construct a boot node on the
d94 2
a95 2
	    If a trackdisk.device error is reported in 1.b., or if
	    memory is not available for 1.d., a recoverable alert is
d101 4
a104 2
		issue the trackdisk commands in 1.b. above in register
		A1, and SysBase in A6.
d117 15
d133 6
a138 6
    disk into a drive with the "strap screen".  The system floppy
    drives are polled for new disks, and the eb_MountList is polled for
    a new head node.  When one or the other appears, the "strap screen"
    is removed and the appropriate boot mechanism is applied as
    described above.  The process of prompting and trying continues
    till a successful boot occurs.
d147 2
a148 1
			    diagnostic area configuration.
d153 4
a156 1
			    5.
d159 1
@


36.0
log
@*** empty log message ***
@
text
@d4 5
a8 4
    most other modules are initialized, appropriate expansion boards are
    configured.  Appropriate boards will match a FindConfigDev(, -1, -1)
    -- these are all boards on the expansion library board list.
    Furthermore, they will meet all of the following conditions:
d12 2
a13 1
	3.  diagnostic area pointer (in cd_Rom er_Reserved0c) is non-zero,
d25 4
a28 4
    appropriate time for drivers to Enqueue() a boot node on the expansion
    library's eb_MountList for use by the strap module below, and clear
    CDB_CONFIGME so a BindDrivers command will not try to initialize the
    board a second time.
d33 2
a34 2
    eb_MountList with a prioritized list for system floppies.  The floppy
    list looks like:
d36 2
d43 7
a49 4
    The resulting prioritized merged list is used in the first attempt to
    boot.  An item on the list is given a chance to boot via one of two
    different mechanisms, depending on whether it is from the eb_MountList,
    or is a system floppy.
d51 13
a63 1
	eb_MountList entry:
d69 2
a70 1
	    d.  diagnostic area pointer (in cd_Rom er_Reserved0c) is non-zero,
d72 13
a84 1
	2.  The boot routine of valid boot node is invoked as follows:
d87 4
a90 3
	    b.  The resulting boot routine is invoked with the ConfigDev
		pointer on the stack in C fashion: i.e. (*boot)(configDev);
	3.  Return from the boot routine indicates failure to boot.
d92 33
d126 2
a127 2
	1.  The floppy drive must contain a valid boot floppy, i.e. meet
	    all of the following conditions:
d133 3
a135 2
	    c.  the boot blocks start with the three characters 'DOS' and
		pass the longword checksum (with carry wraparound), and
d138 3
a140 3
	    If a trackdisk.device error is reported in 1.b., or if memory
	    is not available for 1.d., a recoverable alert is presented
	    before continuing.
d142 2
a143 2
	    a.  The address of the entry point for the boot code is offset
		BB_ENTRY into the boot blocks in memory.
d153 4
a156 4
		frees all it's resources.  It is usually the dos library
		initialization function, from the dos.library resident
		tag.  Return from this function is identical to return
		from the strap module itself.
d160 6
a165 6
    disk into a drive with the "strap screen".  The system floppy drives
    are polled for new disks, and the eb_MountList is polled for a new
    head node.  When one or the other appears, the "strap screen" is
    removed and the appropriate boot mechanism is applied as described
    above.  The process of prompting and trying continues till a successful
    boot occurs.
d171 9
a179 8
	romboot		 -- romboot is no longer an exec library: RomBoot()
			    is no longer public.  A module at priority -40
			    still exists to do the same diagnostic area
			    configuration.
	strap		 -- Strap presents a new strap screen (i.e. changed
			    the hand screen).  Strap can boot from any floppy.
			    Code is fixed to boot from non-floppy at a
			    priority higher than 5.
d183 2
a184 2
	libraries/romboot_base.[hi]	 -- no longer exists: BootNode now in
					    expansionbase.[hi]
@
