head     40.0;
branch   ;
access   ;
symbols  V37_23:36.31 V37_21:36.30 V37_19:36.29 V37_17:36.28 V37_7:36.27 V37_3:36.27 V36_118:36.27 V36_117:36.26 V36_109:36.25 V36_108:36.24 V36_107:36.24 V36_106:36.23 V36_105:36.22 V36_104:36.22 V36_102:36.21 V36_98:36.19 V36_96:36.19 V36_90:36.19 V36_86:36.17 V36_85:36.16 V36_83:36.15 V36_82:36.14 V36_80:36.13 V36_75:36.12 V36_73:36.12 V36_56:36.11 V36_55:36.10 V36_54:36.9 V36_51:36.9 V36_50:36.9 V36_49:36.8 V36_33:36.4 V36_26:36.3 V36_22:36.2 L36_19:36.1;
locks    ; strict;
comment  @*   @;


40.0
date     93.03.08.12.17.57;  author darren;  state Exp;
branches ;
next     36.35;

36.35
date     92.05.20.14.11.49;  author darren;  state Exp;
branches ;
next     36.34;

36.34
date     92.05.19.16.47.26;  author darren;  state Exp;
branches ;
next     36.33;

36.33
date     92.04.06.14.43.40;  author darren;  state Exp;
branches ;
next     36.32;

36.32
date     92.04.06.14.24.54;  author darren;  state Exp;
branches ;
next     36.31;

36.31
date     91.03.15.11.14.21;  author darren;  state Exp;
branches ;
next     36.30;

36.30
date     91.02.20.11.44.17;  author darren;  state Exp;
branches ;
next     36.29;

36.29
date     91.02.20.11.25.37;  author darren;  state Exp;
branches ;
next     36.28;

36.28
date     91.02.18.18.36.48;  author darren;  state Exp;
branches ;
next     36.27;

36.27
date     90.12.03.06.23.45;  author bryce;  state Exp;
branches ;
next     36.26;

36.26
date     90.05.29.11.04.30;  author kodiak;  state Exp;
branches ;
next     36.25;

36.25
date     90.05.28.12.50.13;  author kodiak;  state Exp;
branches ;
next     36.24;

36.24
date     90.04.13.11.37.23;  author kodiak;  state Exp;
branches ;
next     36.23;

36.23
date     90.04.10.10.19.07;  author kodiak;  state Exp;
branches ;
next     36.22;

36.22
date     90.04.02.11.13.53;  author kodiak;  state Exp;
branches ;
next     36.21;

36.21
date     90.03.26.16.25.20;  author kodiak;  state Exp;
branches ;
next     36.20;

36.20
date     90.03.15.11.01.14;  author kodiak;  state Exp;
branches ;
next     36.19;

36.19
date     89.12.30.22.29.52;  author kodiak;  state Exp;
branches ;
next     36.18;

36.18
date     89.12.18.15.18.34;  author kodiak;  state Exp;
branches ;
next     36.17;

36.17
date     89.12.15.15.07.05;  author kodiak;  state Exp;
branches ;
next     36.16;

36.16
date     89.12.07.14.37.34;  author kodiak;  state Exp;
branches ;
next     36.15;

36.15
date     89.12.06.12.08.42;  author kodiak;  state Exp;
branches ;
next     36.14;

36.14
date     89.11.07.10.54.52;  author kodiak;  state Exp;
branches ;
next     36.13;

36.13
date     89.10.10.14.33.44;  author kodiak;  state Exp;
branches ;
next     36.12;

36.12
date     89.09.01.10.23.01;  author kodiak;  state Exp;
branches ;
next     36.11;

36.11
date     89.07.10.15.37.46;  author kodiak;  state Exp;
branches ;
next     36.10;

36.10
date     89.06.27.10.45.07;  author kodiak;  state Exp;
branches ;
next     36.9;

36.9
date     89.05.04.11.33.09;  author kodiak;  state Exp;
branches ;
next     36.8;

36.8
date     89.05.03.18.22.09;  author kodiak;  state Exp;
branches ;
next     36.7;

36.7
date     89.04.30.18.30.38;  author kodiak;  state Exp;
branches ;
next     36.6;

36.6
date     89.03.25.15.12.24;  author kodiak;  state Exp;
branches ;
next     36.5;

36.5
date     89.03.18.18.29.32;  author kodiak;  state Exp;
branches ;
next     36.4;

36.4
date     89.03.15.15.38.00;  author kodiak;  state Exp;
branches ;
next     36.3;

36.3
date     89.03.15.14.20.09;  author kodiak;  state Exp;
branches ;
next     36.2;

36.2
date     89.02.20.11.38.23;  author kodiak;  state Exp;
branches ;
next     36.1;

36.1
date     89.01.06.17.28.09;  author kodiak;  state Exp;
branches ;
next     36.0;

36.0
date     88.12.20.13.49.50;  author kodiak;  state Exp;
branches ;
next     ;


desc
@graphics to prompt for workbench disk
@


40.0
log
@Use tagged open device for timer.device - same ROM
@
text
@**
**	$Filename$
**	$Release: 1.4 $
**	$Revision: 36.35 $
**	$Date: 92/05/20 14:11:49 $
**
**	graphics for user prompt to insert workbench disk
**
**	(C) Copyright 1985,1986,1987,1988 Commodore-Amiga, Inc.
**	    All Rights Reserved
**
	SECTION strap,code

**	Includes

	INCLUDE "strap.i"

	INCLUDE "exec/memory.i"
	INCLUDE "exec/alerts.i"
	INCLUDE	"exec/io.i"
	INCLUDE	"exec/ables.i"
	INCLUDE	"exec/execbase.i"

	INCLUDE	"devices/timer.i"

	INCLUDE "hardware/custom.i"
	INCLUDE "hardware/dmabits.i"

	INCLUDE "graphics/gfx.i"
	INCLUDE "graphics/rastport.i"
	INCLUDE	"graphics/scale.i"
	INCLUDE "graphics/view.i"
	INCLUDE "graphics/gfxbase.i"
	INCLUDE "internal/librarytags.i"


**	Exports

	XDEF	SMDisplayOn
	XDEF	SMDisplayTick
	XDEF	SMDisplayOff


**	Imports

	XREF	_custom
	XREF	_intena

	XLVO	AllocMem
	XLVO	CloseDevice
	XLVO	CloseLibrary
	XLVO	OpenDevice
	XLVO	OpenLibrary
	XLVO	TaggedOpenLibrary
	XLVO	RawDoFmt

	XLVO	BitMapScale
	XLVO	BltBitMap
	XLVO	BltTemplate
	XLVO	CBump
	XLVO	CMove
	XLVO	CWait
	XLVO	Draw
	XLVO	Flood
	XLVO	FreeColorMap
	XLVO	FreeCopList
	XLVO	FreeCprList
	XLVO	FreeMem
	XLVO	FreeVPortCopLists
	XLVO	GetColorMap
	XLVO	InitBitMap
	XLVO	InitRastPort
	XLVO	InitTmpRas
	XLVO	InitView
	XLVO	InitVPort
	XLVO	LoadRGB4
	XLVO	LoadView
	XLVO	MakeVPort
	XLVO	Move
	XLVO	MrgCop
	XLVO	SetAPen
	XLVO	SetDrMd
	XLVO	SetRGB4
	XLVO	Text
	XLVO	UCopperListInit
	XLVO	WaitBOVP
	XLVO	WaitTOF

	XLVO	ReadEClock

	XREF	SMAlert

**	Locals

CHECKXL0	EQU	 40	; left edge of top of short check
CHECKX1		EQU	 70	; left edge of bottom of checks
CHECKXR0	EQU	160	; left edge of top of long check
CHECKDX		EQU	 17	; width of check color
CHECKSX		EQU	  2	; width of shadow
CHECKPX		EQU	 25	; distance between check pair starts
CHECKYR0	EQU	 05	; top of long check
CHECKYL0	EQU	 55	; top of short check
CHECKY1		EQU	 79	; bottom of checks

TEXTX		EQU	  0	; origin of version & copyright message
TEXTY		EQU	100	;

DRIVEX		EQU	400
DRIVEY		EQU	 55
DRIVEW		EQU	156
DRIVEH		EQU	 20
DRIVESLOTDX	EQU	  4

DISKDX		EQU	 10
DISKDY		EQU	 25
DISKW		EQU	134
DISKH		EQU	 60
DISKEDGEDX	EQU	  3
DISKBOUNCE	EQU	  5

ANIMDEPTH	EQU	  3
ANIMWIDTH	EQU	((DRIVEW+15)/16)*16
ANIMHEIGHT	EQU	DISKDY+DISKH+DISKBOUNCE
ANIMBYTES	EQU	(ANIMWIDTH/8)*ANIMHEIGHT
ANIMFRAMES	EQU	 16

SCREENDEPTH	EQU	  3
SCREENWIDTH	EQU	DRIVEX+ANIMWIDTH
SCREENHEIGHT	EQU	DRIVEY+ANIMHEIGHT
PLANEBYTES	EQU	(SCREENWIDTH/8)*SCREENHEIGHT
TEMPLATEBYTES	EQU	128

;-- copper list size
	IFLT	CHECKY1-DRIVEY
NUMCOPINS	EQU	((CHECKY1-CHECKYR0+1)*3)+((CHECKY1-DRIVEY)*3)+4
	ENDC
	IFGE	CHECKY1-DRIVEY
NUMCOPINS	EQU	((CHECKY1-CHECKYR0+1)*2)+CHECKY1-CHECKYL0+5
	ENDC

 STRUCTURE	StrapDisplayMem,0
	APTR	sdm_GfxBase
	APTR    sdm_ExecBase
	STRUCT	sdm_VP,vp_SIZEOF
	STRUCT	sdm_V,v_SIZEOF
	STRUCT	sdm_RP,rp_SIZEOF
	STRUCT	sdm_TR,tr_SIZEOF
	STRUCT	sdm_RI,ri_SIZEOF
	STRUCT	sdm_CopperPokeAddrs,SCREENDEPTH*2*4
	UWORD	sdm_CopperDisplayOffset
	STRUCT	sdm_BM1,bm_SIZEOF
	STRUCT	sdm_BM2,bm_SIZEOF
	STRUCT	sdm_ABM,bm_SIZEOF*ANIMFRAMES
	UWORD	sdm_Tick
	STRUCT	sdm_BSA,bsa_SIZEOF
	STRUCT	sdm_UCL,ucl_SIZEOF
	STRUCT	sdm_Timer,IO_SIZE
	STRUCT	sdm_EClock1,EV_SIZE
	STRUCT	sdm_EClock2,EV_SIZE

	IFD	TEMPLATE
	STRUCT	sdm_Template,TEMPLATEBYTES
	ENDC

	STRUCT	sdm_Planes1,PLANEBYTES*SCREENDEPTH
	STRUCT	sdm_Planes2,PLANEBYTES*SCREENDEPTH
	STRUCT	sdm_AnimPlanes,ANIMBYTES*ANIMDEPTH*ANIMFRAMES
	LABEL	StrapDisplayMem_SIZEOF

**	Assumptions

	IFNE	sdm_GfxBase
	FAIL	"sdm_GfxBase not zero, recode"
	ENDC


* ALLOCATIONS FOR Hand
*	a3	_rp
*	a2	_vec
*	a0	_pdata
*	d4	_x
*	d3	_y
*	d3	_newx
*	d5	_newy
*	d5	_value
SMDisplayOn:
		movem.l d2-d7/a2-a4/a6,-(a7)

		;------ get memory
		move.l	#StrapDisplayMem_SIZEOF,d0
		move.l	#MEMF_PUBLIC!MEMF_CHIP!MEMF_CLEAR,d1
		CALLLVO	AllocMem
	
		move.l	d0,a5
		move.l	a6,sdm_ExecBase(a5)
		tst.l	d0
		bne.s	dyMemOK

		move.l	#AN_BootStrap!AG_NoMemory!AO_GraphicsLib,d0
		bra.s	dyAlert

dyMemOK:
		;------ get timer device

		suba.l	a0,a0		;ODTAG_TIMER (save ROM)
	;;	lea	TDName(pc),a0
		moveq	#UNIT_ECLOCK,d0
		lea	sdm_Timer(a5),a1
		moveq	#0,d1
		CALLLVO	OpenDevice
		tst.l	d0
		beq.s	dyTDOK

		clr.l	sdm_Timer+IO_DEVICE(a5)
		move.l	#AN_BootStrap!AG_OpenDev!AO_TimerDev,d0
		bra.s	dyAlert

dyTDOK:
		;------ get graphics library
		moveq	#OLTAG_GRAPHICS,d0
		CALLLVO	TaggedOpenLibrary

		move.l	d0,(a5)		; sdm_GfxBase(a5)
		bne.s	dyGLOK
 
		move.l	#AN_BootStrap!AG_OpenLib!AO_GraphicsLib,d0

dyAlert:
		bsr	SMAlert
		bra	dyDone

dyGLOK:
		;------	set up to use graphics library
		move.l	d0,a6

		; Init the ViewPort structure
		lea	sdm_VP(a5),a0
		CALLLVO	InitVPort

		;   adjust the viewport offsets to center the display
		move.l	#(((640-SCREENWIDTH)/2)<<16)+SCREENHEIGHT,d0
		sub.w	gb_NormalDisplayRows(a6),d0
		neg.w	d0
		lsr.w	#1,d0
		move.l	d0,sdm_VP+vp_DxOffset(a5) ; and vp_DyOffset

		; Init the View structure
		lea	sdm_V(a5),a1
		CALLLVO	InitView

		; Init the Display BitMaps
		lea	sdm_BM1(a5),a2
		lea	sdm_Planes1(a5),a3
		moveq	#1,d3

dyBMInit:
		move.l	a2,a0
		moveq	#SCREENDEPTH,d0
		move.l	#SCREENWIDTH,d1
		move.l	#SCREENHEIGHT,d2
		CALLLVO	InitBitMap

		; set the pointers to the bitplanes in the bitmap
		lea	bm_Planes(a2),a1
		moveq	#SCREENDEPTH-1,d0
dyBMInitPlanes:
		move.l	a3,(a1)+
		lea	PLANEBYTES(a3),a3
		dbf	d0,dyBMInitPlanes

		lea	bm_SIZEOF(a2),a2
		dbf	d3,dyBMInit


		; Init the Anim BitMaps
		moveq	#ANIMFRAMES-1,d3

dyABMInit:
		move.l	a2,a0
		moveq	#ANIMDEPTH,d0
		move.l	#ANIMWIDTH,d1
		moveq	#ANIMHEIGHT,d2
		CALLLVO	InitBitMap

		; set the pointers to the bitplanes in the bitmap
		lea	bm_Planes(a2),a1
		moveq	#ANIMDEPTH-1,d0
dyABMInitPlanes:
		move.l	a3,(a1)+
		lea	ANIMBYTES(a3),a3
		dbf	d0,dyABMInitPlanes

		lea	bm_SIZEOF(a2),a2
		dbf	d3,dyABMInit

		; Get a Color Map
		moveq	#20,d0
		CALLLVO	GetColorMap
		move.l	d0,sdm_VP+vp_ColorMap(a5)

		;------ set top screen colors
		lea	sdm_VP(a5),a0
		lea	colorMap(pc),a1
		moveq	#20,d0
		CALLLVO	LoadRGB4

		; Init the UCopList
		lea	sdm_UCL(a5),a0
		move.l	a0,sdm_VP+vp_UCopIns(a5)
		move.l	#NUMCOPINS,d0
		CALLLVO	UCopperListInit

		; InitRastPort
		
		lea	sdm_RP(a5),a3		; pointer to RastPort in a3
		move.l	a3,a1
		CALLLVO	InitRastPort

		; InitTmpRas
		lea	sdm_TR(a5),a0		; pointer to TmpRas
		move.l	a5,a1			; pointer to buffer
		add.l	#sdm_Planes2,a1
		move.l	#PLANEBYTES,d0		; size of the buffer
		CALLLVO	InitTmpRas

		; set RasInfo to point to the BitMap
		lea	sdm_BM1(a5),a0
		move.l	a0,sdm_RI+ri_BitMap(a5)

		; set the RastPort to point to the BitMap & TmpRas
		move.l	a0,sdm_RP+rp_BitMap(a5)
		lea	sdm_TR(a5),a0
		move.l	a0,sdm_RP+rp_TmpRas(a5)

		; fill in the ViewPort structure
		move.w	#SCREENHEIGHT,sdm_VP+vp_DHeight(a5)
		move.w	#SCREENWIDTH,sdm_VP+vp_DWidth(a5)
		lea	sdm_RI(a5),a0
		move.l	a0,sdm_VP+vp_RasInfo(a5)
		move.w	#V_HIRES,sdm_VP+vp_Modes(a5)

		move.l	a3,a1
		moveq	#RP_JAM1,d0
		CALLLVO	SetDrMd

		lea	VectorArray(pc),a2
*
*   x=
*   -1	subroutine return or call
*	negative y is subroutine return
*	positive y is followed by relative call address
*   -2	end of vector list or pen color and move
*	negative y is end of vector list
*	positive y is pen and area outline color followed by move-to offset
*   -3	absolute position or move-to
*	negative y is followed by absolute coordinate words
*	positive y is followed by move-to offset
*   -4	flood-to
*	y is flood mode followed by flood-to offset
*   -5  text (from V39 exec.library)
*	y is magic constant for TaggedOpenLibrary()
*   -6	masked-template
*	y is mask, followed by position offset bytes, followed by width &
*	height bytes, followed by words of template data
*   >0	draw-to
*	x, y are draw-to offsets
*

dyNextVecPair:
		moveq	#0,d0
		move.b	(a2)+,d0	; newx
		moveq	#0,d1
		move.b	(a2)+,d1	; newy
		move.b	d0,d2
		addq.b	#1,d2		; cmp.b #-1,d0

	IFD	SUBROUTINE
		bne.s	dyCheckPen
		tst.b	d1
		bmi.s	dyEndSub

		;------ subroutine call to relative call address
		move.w	(a2)+,d0	; get relative address
		move.l	a2,-(a7)	; save return address
		lea	-2(a2,d0.w),a2	; get absolute address
		bra.s	dyNextVecPair
dyEndSub:
		;------ subroutine return
		move.l	(a7)+,a2	; restore return address
		bra.s	dyNextVecPair

dyCheckPen:
	ENDC
		addq.b	#1,d2		; cmp.b #-2,d0
		bne.s	dyCheckMove
		tst.b	d1
		bmi.s	dyRenderRevision
		;------ ^ that was end of vector list

		;------ set pen color
		move.b	d1,rp_AOLPen(a3)
		move.l	a3,a1
		move.l	d1,d0
		CALLLVO	SetAPen
		bra.s	dyRelMove

dyCheckMove:
		addq.b	#1,d2		; cmp.b #-3,d0
		bne.s	dyCheckFlood
		tst.b	d1
		bmi.s	dySetAbs

dyRelMove:
		;------	move to offset
		bsr.s	dyNextXY

		CALLLVO	Move
		bra.s	dyNextVecPair

		;------ set absolute coordinate origin
dySetAbs:
		move.w	(a2)+,d3
		move.w	(a2)+,d4
		bra.s	dyNextVecPair

dyNextXY:
		moveq	#0,d0
		move.b	(a2)+,d0
		moveq	#0,d1
		move.b	(a2)+,d1
dyAdjustXY:
		add.w	d3,d0
		add.w	d4,d1
		move.l	a3,a1
		rts

dyCheckFlood:
		addq.b	#1,d2		; cmp.b #-4,d0
		bne.s	dyCheckText

		move.l	d1,d2

		;------	flood to offset
		bsr.s	dyNextXY

		CALLLVO	Flood
		bra.s	dyNextVecPair

		;------ draw to offset
dyRelDraw:
		bsr.s	dyAdjustXY
		CALLLVO	Draw
		bra.s	dyNextVecPair

		;------ text (As of V39, all sits in ExecBase)

dyCheckText:
		addq.b	#1,d2		; cmp.b #-5,d0
		bne.s	dyCheckTemplate

		move.b	d1,d0		; for TaggedOpenLibrary
		ext.w	d0		; byte -> longword
		ext.l	d0
		move.l	sdm_ExecBase(a5),a6
		CALLLVO	TaggedOpenLibrary
		move.l	(a5),a6		; sdm_GfxBase(a5)

		tst.l	d0
		beq	dyNextVecPair	; GfxBase in A6 restored above

		move.l	d0,a1		; count length
		move.l	d0,a0		; string
		moveq	#00,d0
dyGetTextLength:
		tst.b	(a1)+
		beq.s	dyGotTextLength
		addq.w	#1,d0
		bra.s	dyGetTextLength
dyGotTextLength:
		move.l	a3,a1		; rastport
		CALLLVO	Text
		bra	dyNextVecPair


dyCheckTemplate:
	IFD	TEMPLATE
		addq.b	#1,d2		; cmp.b #-6,d0
	ENDC
		bne.s	dyRelDraw

	IFD	TEMPLATE
		;------ masked template
		move.b	d1,rp_Mask(a3)
		bsr.s	dyNextXY

		movem.l	d3-d4,-(a7)	; save absolute loc
		moveq	#0,d2
		move.b	(a2)+,d4
		moveq	#0,d5
		move.b	(a2)+,d5
		move.w	d4,d2
		mulu	d5,d2
		lea	sdm_Template(a5),a0
		move.l	a0,a4
		bra.s	dyTCopyDBF
dyTCopy:
		move.w	(a2)+,(a4)+
dyTCopyDBF:
		dbf	d2,dyTCopy

		move.l	d0,d2
		move.l	d1,d3
		moveq	#0,d0
		add.w	d4,d4
		move.l	d4,d1
		lsl	#3,d4
		move.l	a3,a1
		CALLLVO	BltTemplate
		movem.l	(a7)+,d3-d4
		bra	dyNextVecPair
	ENDC


;-------
dyRenderRevision:
		move.l	sdm_ExecBase(a5),a6

		;-- generate revision string
		lea	revisionFormat(pc),a0	; %02d.%03d)
		;--	generate rom revision address from current address
;		move.l	a0,d0			
;		and.l	#$fff80000,d0
;		or.w	    #$000c,d0
;		move.l	d0,a1

		move.w	SoftVer(a6),-(a7)
		move.w	LIB_VERSION(a6),-(a7)
		move.l	a7,a1

			;--	get rest of RawDoFmt parameters
			lea	dyPutChProc(pc),a2
			subq.l	#8,a7
				move.l	a7,a3
				CALLLVO	RawDoFmt

				moveq	#6,d0
				move.l	a7,a0
				lea	sdm_RP(a5),a3
				move.l	a3,a1
				move.l	(a5),a6		; sdm_GfxBase(a5)
				CALLLVO	Text
			addq.l	#8,a7

		addq.l	#4,a7
		bra.s	dyRenderCheck

dyPutChProc:
		move.b	d0,(a3)+
		rts


;------	dyDrawCheck
;
;	d0	pen
;	d2	x
;	d3	y
;	a3	RastPort
;
dyMoveYC:
		add.w	d2,d0
		move.w	d3,d1
		move.l	a3,a1
		CALLLVO	Move
		rts

dyDrawYC:
		add.w	d2,d0
		move.w	d3,d1
		move.l	a3,a1
		CALLLVO	Draw
		rts
		
dyDrawCheck:
		move.l	a3,a1
		CALLLVO	SetAPen
		moveq	#0,d0
		bsr.s	dyMoveYC
		moveq	#CHECKDX,d0
		bsr.s	dyDrawYC
		moveq	#CHECKPX,d0
		bsr.s	dyMoveYC
		moveq	#CHECKPX+CHECKDX+1,d0
		bsr.s	dyDrawYC
		moveq	#6,d0
		move.l	a3,a1
		CALLLVO	SetAPen
		moveq	#CHECKPX+CHECKDX+CHECKSX,d0
		bsr.s	dyDrawYC
		moveq	#CHECKDX+1,d0
		bsr.s	dyMoveYC
		moveq	#CHECKDX+CHECKSX,d0
		bsr.s	dyDrawYC
		rts


		;-- render the checkmark and build the copper list
dyRenderCheck:
		move.l	a5,-(a7)
		lea	sdm_UCL(a5),a2		; user copper list
		lea	dyColor4Table(pc),a4	; long check color table
		lea	dyColor5Table(pc),a5	; short check color table
		moveq	#CHECKYR0,d3		; start @@ top of long check
		move.w	(a4)+,d4		; initial long check color
		move.w	(a5)+,d5		; initial short check color
		move.w	(a4)+,d6		; current counter for swizzle
		move.w	(a5)+,d7		;   long, then short

dyCheckLoop:
		;-- wait for beginning of line
		move.l	d3,d0
		moveq	#0,d1			; line start
		move.l	a2,a1
		CALLLVO	CWait
		bsr	dyucCBump

		;-- check to render short check
		cmp.w	#CHECKYL0,d3
		blt.s	dyRightCheck

		;--	render check
		moveq	#CHECKY1,d2
		sub.w	d3,d2
		MULS	#CHECKXL0-CHECKX1,d2
		DIVS	#CHECKY1-CHECKYL0,d2
		add.w	#CHECKX1,d2
		moveq	#5,d0
		bsr.s	dyDrawCheck

		;--	swizzle color 5
		moveq	#5*2,d0
		move.w	d5,d1
		bsr	dyucSetXColor
		subq.w	#1,d7
		bne.s	dyAddLeftDelta
		addq.l	#2,a5
		move.w	(a5)+,d7
dyAddLeftDelta:
		add.w	(a5),d5

		;-- render long check
dyRightCheck:
		moveq	#CHECKY1,d2
		sub.w	d3,d2
		MULS	#CHECKXR0-CHECKX1,d2
		DIVS	#CHECKY1-CHECKYR0,d2
		add.w	#CHECKX1,d2
		moveq	#4,d0
		bsr	dyDrawCheck

		;--	swizzle color 4
		moveq	#4*2,d0
		move.w	d4,d1
		bsr	dyucSetXColor
		subq.w	#1,d6
		bne.s	dyAddRightDelta
		addq.l	#2,a4
		move.w	(a4)+,d6
dyAddRightDelta:
		add.w	(a4),d4

		cmp.w	#CHECKY1,d3
		beq.s	dyRestoreDriveColors
		cmp.w	#DRIVEY,d3
		blt.s	dyNextCheckLine

		;-- set color at middle of line
dyRestoreDriveColors:
		move.l	d3,d0
		move.w	#$98,d1			; line middle
		move.l	a2,a1
		CALLLVO	CWait
		bsr	dyucCBump
		moveq	#4*2,d0
		move.w	colorMap+(4*2)(pc),d1
		bsr	dyucSetColor		; set color 4
		moveq	#5*2,d0
		move.w	colorMap+(5*2)(pc),d1
		bsr	dyucSetColor		; set color 5

dyNextCheckLine:
		addq	#1,d3
		cmp.w	#CHECKY1,d3
		ble	dyCheckLoop


		;-- done building checkmark
		move.l	(a7)+,a5
		move.l	#10000,d0
		move.l	#255,d1
		move.l	a2,a1
		CALLLVO	CWait			; CEND
		bsr	dyucCBump



		;-- copy display into alternate buffer
		movem.w	screenCopy(pc),d0-d7
		lea	sdm_BM1(a5),a0
		lea	sdm_BM2(a5),a1
		CALLLVO	BltBitMap

		;-- copy drive into anim frames
		moveq	#ANIMFRAMES-1,d7
		lea	sdm_ABM(a5),a2
		lea	animDiskBottomDelta(pc),a3

dyAnimDrive:
		swap	d7
		movem.w	animDriveCopy(pc),d0-d6
		move.w	#$ffff,d7
		lea	sdm_BM1(a5),a0
		move.l	a2,a1
		CALLLVO	BltBitMap

		movem.w	animDiskCopy(pc),d0-d5
		add.w	(a3)+,d3
		ble.s	dyadNext
		lea	sdm_BM1(a5),a0
		move.l	a2,a1
		CALLLVO	BltBitMap

dyadNext:
		lea	bm_SIZEOF(a2),a2
		swap	d7
		dbf	d7,dyAnimDrive

		;-- scale disk into anim frames
		move.w	#DRIVEX+DISKDX,sdm_BSA+bsa_SrcX(a5) ; source origin
		move.w	#DRIVEY+DISKDY,sdm_BSA+bsa_SrcY(a5)
		move.w	#DISKW,d0
		moveq	#DISKH-DISKEDGEDX-1,d1
		move.w	d0,sdm_BSA+bsa_SrcWidth(a5)	; source size
		move.w	d1,sdm_BSA+bsa_SrcHeight(a5)
		move.w	d0,sdm_BSA+bsa_XSrcFactor(a5)	; denominators of scale
		move.w	d1,sdm_BSA+bsa_YSrcFactor(a5)
		move.w	#DISKDX,sdm_BSA+bsa_DestX(a5)	; destination origin
		move.w	d0,sdm_BSA+bsa_XDestFactor(a5)	; numerators of scale
		lea	sdm_BM1(a5),a1
		move.l	a1,sdm_BSA+bsa_SrcBitMap(a5)	; source BitMap
		lea	sdm_ABM(a5),a1
		move.l	a1,sdm_BSA+bsa_DestBitMap(a5)	; destination BitMap
		clr.l	sdm_BSA+bsa_Flags(a0)		; reserved.

		moveq	#ANIMFRAMES-1,d2
dyAnimDisk:
		moveq	#ANIMFRAMES-1,d1
		sub.w	d2,d1
		add.w	d1,d1
		lea	animDiskTop(pc),a0
		add.w	d1,a0
		move.w	(a0)+,d0
		blt.s	dyNextAnimDisk
		move.w	d0,sdm_BSA+bsa_DestY(a5)

		lea	animDiskBottomDelta(pc),a1
		add.w	d1,a1
		moveq	#DISKDY+DISKH-DISKEDGEDX,d1
		add.w	(a1)+,d1
		sub.w	d0,d1
		move.w	d1,sdm_BSA+bsa_YDestFactor(a5)
		lea	sdm_BSA(a5),a0
		CALLLVO	BitMapScale
dyNextAnimDisk:
		add.l	#bm_SIZEOF,sdm_BSA+bsa_DestBitMap(a5)
		dbf	d2,dyAnimDisk


		; point the View to the ViewPort
		lea	sdm_V(a5),a0		; pointer to the View
		lea	sdm_VP(a5),a1
		move.l	a1,sdm_V+v_ViewPort(a5)
		CALLLVO	MakeVPort

		lea	sdm_V(a5),a1		; pointer to the View
		CALLLVO	MrgCop

		lea	sdm_V(a5),a1		; pointer to the View
		CALLLVO	LoadView

		CALLLVO	WaitTOF
		move.w	#DMAF_SETCLR+DMAF_RASTER,_custom+dmacon	; ON_DISPLAY

		; find bitplane pointers in View, don't bother testing that
		; they're not there
		move.l	sdm_VP+vp_DspIns(a5),a1
		move.l	cl_CopLStart(a1),a1
		lea.l	sdm_CopperPokeAddrs(a5),a2
		moveq	#(SCREENDEPTH*2)-1,d0
		move.w	#bplpt,d1
dyCopLoop:
		move.l	a1,a0
dyCopSearch:
		cmp.w	(a0)+,d1
		bne.s	dyCopSearch
		move.l	a0,(a2)+
		addq.w	#2,d1
		dbf	d0,dyCopLoop

		; check if bitplane pointers in View contain prefetch
		move.l	sdm_CopperPokeAddrs+4(a5),a0
		move.w	(a0),d0
		sub.w	sdm_BM1+bm_Planes+2(a5),d0
		move.w	d0,sdm_CopperDisplayOffset(a5)	; always 0 or -2


dyDone:
		movem.l (a7)+,d2-d7/a2-a4/a6
		rts	

dyucSetXColor:

		;			.   .   .   .   +   .   .   .   
		;-- start with		?????????????????rrrr?gggg?bbbb?	
		ror.l	#5,d1		bbbb??????????????????rrrr?gggg?
		ror.w	#5,d1		bbbb????????????gggg???????rrrr?
		lsr.b	#1,d1		bbbb????????????gggg????0???rrrr
		rol.w	#4,d1		bbbb????????????????0???rrrrgggg
		rol.l	#4,d1		????????????????0???rrrrggggbbbb
		and.w	#$0fff,d1			0000rrrrggggbbbb
dyucSetColor:
		move.l	a2,a1
		add.l	#$DFF180,d0		; color n
		CALLLVO	CMove
dyucCBump:
		move.l	a2,a1
		CALLLVO	CBump
		rts



SMDisplayTick:
		movem.l	d2-d7/a2-a3/a6,-(a7)
		;-- check for valid environment
		move.l	a5,d0
		beq	dtDone

		;-- check if time to swap buffers
		move.l	sdm_Timer+IO_DEVICE(a5),d0
		beq	dtDone
		move.l	d0,a6
		lea	sdm_EClock2(a5),a0
		CALLLVO	ReadEClock
		divu	#1000,d0		; ticks/msec

		movem.l	sdm_EClock2(a5),d2/d3	; EV_HI, EV_LO
	
		cmp.l	sdm_EClock1+EV_HI(a5),d2
		bcs	dtDone
		cmp.l	sdm_EClock1+EV_LO(a5),d3
		bcs	dtDone

		;-- start timer for next offscreen buffer
		move.w	sdm_Tick(a5),d4
		move.w	d4,d5
		addq.w	#1,d5
		cmp.w	#ANIMFRAMES,d5
		blt.s	dtSetNextTick
		moveq	#0,d5
dtSetNextTick:
		move.w	d5,sdm_Tick(a5)
		add.w	d4,d4
		lea	animTicks(pc),a1
		add.w	d4,a1

		moveq	#0,d6
		move.w	(a1),d7
		mulu	d0,d7
		add.l	d7,d3
		addx.l	d6,d2
		movem.l	d2/d3,sdm_EClock1(a5)

		;-- check again for valid environment
		move.l	(a5),d0		; sdm_GfxBase(a5)
		beq.s	dtDone
		move.l	d0,a6

		;-- swap buffers
		move.l	sdm_ExecBase(a5),a0
		DISABLE	a0,NOFETCH

		CALLLVO	WaitTOF		; breaks Disable w/ Wait

		lea	sdm_BM1(a5),a0
		lea	sdm_BM2(a5),a3
		btst	#1,d4
		beq.s	dtSwapBuffers
		lea	bm_SIZEOF(a0),a0
		lea	-bm_SIZEOF(a3),a3
dtSwapBuffers:
		lea	bm_Planes(a0),a0
		lea	sdm_CopperPokeAddrs(a5),a1
		moveq	#SCREENDEPTH-1,d0
dtPokeCopper:
		move.l	(a0)+,a2
		add.w	sdm_CopperDisplayOffset(a5),a2
		move.l	a2,d1
		swap	d1
		move.l	(a1)+,a2
		move.w	d1,(a2)
		swap	d1
		move.l	(a1)+,a2
		move.w	d1,(a2)
		dbf	d0,dtPokeCopper

		move.l	sdm_ExecBase(a5),a0
		ENABLE	a0,NOFETCH

		;-- render new offscreen buffer
		lea	sdm_VP(a5),a0
		CALLLVO	WaitBOVP
		mulu	#bm_SIZEOF/2,d4
		lea	sdm_ABM(a5),a0
		add.l	d4,a0
		move.l	a3,a1
		movem.w	animCopy(pc),d0-d7
		CALLLVO	BltBitMap

dtDone:
		movem.l	(a7)+,d2-d7/a2-a3/a6
		rts


SMDisplayOff:
		move.l	a6,-(a7)
		move.l	a5,d0
		beq.s	dnDone
		move.l	(a5),d0		; sdm_GfxBase(a5)
		beq.s	dnCloseTimer
		move.l	d0,a6

		move.w	#DMAF_RASTER,_custom+dmacon		; OFF_DISPLAY
		moveq	#0,d0

		move.l	d0,a1
		CALLLVO	LoadView	  ; LoadView(0)

		move.l	sdm_V+v_LOFCprList(a5),a0
		CALLLVO	FreeCprList

		move.l	sdm_UCL+ucl_FirstCopList(a5),a0
		CALLLVO	FreeCopList
		clr.l	sdm_VP+vp_UCopIns(a5)

		move.l	sdm_VP+vp_ColorMap(a5),a0
		CALLLVO	FreeColorMap

		lea	sdm_VP(a5),a0
		CALLLVO	FreeVPortCopLists ; The viewport has now gone

		move.l	a6,a1		; GfxBase
		move.l	sdm_ExecBase(a5),a6
		CALLLVO	CloseLibrary

dnCloseTimer:
		move.l	sdm_ExecBase(a5),a6
		tst.l	sdm_Timer+IO_DEVICE(a5)
		beq.s	dnFreeSDM
		lea	sdm_Timer(a5),a1
		CALLLVO	CloseDevice

dnFreeSDM:
		move.l	a5,a1
		move.l	#StrapDisplayMem_SIZEOF,d0
		CALLLVO	FreeMem

dnDone:
		move.l	(a7)+,a6
		rts


revisionFormat:
		dc.b	'%02d.%03d',0
		ds.w	0

;------ Swizzle Color Tables
;
;	word of initial color, followed by
;	swizzle count / increment pairs
COLOR5	MACRO
		dc.w	(\1<<10)+(\2<<5)+\3
	ENDM

dyColor4Table:
		COLOR5	$1e,0,$4	; $  f  0  4
		dc.w	5
		COLOR5	0,0,-1		;         -.5-> f  0  0 : 5
		dc.w	31
		COLOR5	0,1,0		;      +.5   -> f  f  0 : 31
		dc.w	5,0		;            -> f  f  0 : 5
		dc.w	30
		COLOR5  -1,0,0		;   -.5      -> 0  f  0 : 30
		dc.w	15
		COLOR5	0,0,4		;         +2 -> 0  f  ?

dyColor5Table:
		COLOR5	$0,$7,$1f	; $  0  3  f
		dc.w	8
		COLOR5	0,1,-1		;      +.5-.5-> 0  7  c : 8
		dc.w	8
		COLOR5	0,2,0		;      +1    -> 0  f  f : 8
		dc.w	15
		COLOR5	0,0,-1		;         -.5-> 0  f  0 : 15

colorMap:
		dc.w	$0414		; background	bart likes 679
		dc.w	$0ea8		; drive tan, text
		dc.w	$0a76		; drive tan shadow
		dc.w	$0000		; drive black

		dc.w	$0238		; disk blue, checkmark long side
		dc.w	$0226		; disk blue shadow, checkmark short side
		dc.w	$0987		; disk metal, checkmark shadow
		dc.w	$0fff		; disk label white

		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0

		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0

		dc.w	0
		dc.w	$0414		; cursor color 1
		dc.w	$0414		; cursor color 2
		dc.w	$0414		; cursor color 3

VectorArray:
		dc.b	-3,-1		; drive
		dc.w	DRIVEX,DRIVEY
		dc.b	-2,1		; drive tan
		dc.b	0,0
		dc.b	155,0
		dc.b	155,18
		dc.b	0,18
		dc.b	0,0
		dc.b	-3,0
		dc.b	7,2
		dc.b	148,2
		dc.b	148,7
		dc.b	7,7
		dc.b	7,2
		dc.b	-4,0
		dc.b	1,1
		dc.b	-2,2		; drive tan shadow
		dc.b	118,14
		dc.b	118,11
		dc.b	142,11
		dc.b	142,12
		dc.b	-2,3		; drive light off
		dc.b	25,14
		dc.b	32,14
		dc.b	-4,1		; drive slot
		dc.b	8,3
		dc.b	-3,-1		; disk
		dc.w	DRIVEX+DISKDX,DRIVEY+DISKDY
		dc.b	-2,5		; disk shadow
		dc.b	18,0
		dc.b	121,1
		dc.b	121,59
		dc.b	4,59
		dc.b	4,1
		dc.b	18,1
		dc.b	-4,1
		dc.b	18,2
		dc.b	-2,4		; disk blue
		dc.b	0,2
		dc.b	5,0
		dc.b	13,0
		dc.b	13,20
		dc.b	18,21
		dc.b	99,21
		dc.b	104,20
		dc.b	104,1
		dc.b	107,0
		dc.b	124,0
		dc.b	133,4
		dc.b	133,59
		dc.b	122,59
		dc.b	122,26
		dc.b	117,25
		dc.b	18,25
		dc.b	13,26
		dc.b	13,59
		dc.b	0,59
		dc.b	0,2
		dc.b	-3,0		; arrow shadow hole
		dc.b	6,2
		dc.b	2,6
		dc.b	5,6
		dc.b	5,8
		dc.b	8,8
		dc.b	8,6
		dc.b	11,6
		dc.b	7,2
		dc.b	-3,0		; write protect hole
		dc.b	3,53
		dc.b	10,53
		dc.b	10,56
		dc.b	3,56
		dc.b	3,53
		dc.b	-4,0		; flood disk blue
		dc.b	1,3
		dc.b	-2,7		; label color
		dc.b	16,28
		dc.b	19,27
		dc.b	116,27
		dc.b	119,28
		dc.b	119,59
		dc.b	16,59
		dc.b	16,28
		dc.b	-4,0		; flood label
		dc.b	17,29
		dc.b	-2,6		; disk metal
		dc.b	37,20
		dc.b	34,19
		dc.b	34,0
		dc.b	103,0
		dc.b	-3,0		; metal hole
		dc.b	74,3
		dc.b	89,3
		dc.b	89,19
		dc.b	74,19
		dc.b	74,3
		dc.b	-4,1
		dc.b	35,1

		dc.b	-3,-1		; copyright message
		dc.w	TEXTX,TEXTY
		dc.b	-2,1
		dc.b	0,0
		dc.b	-5,OLTAG_COPYRIGHT5
		dc.b	-3,0
		dc.b	0,12
		dc.b	-5,OLTAG_COPYRIGHT2
		dc.b	-3,0
		dc.b	0,24
		dc.b	-5,OLTAG_COPYRIGHT3
		dc.b	-3,0
		dc.b	0,36
		dc.b	-5,OLTAG_COPYRIGHT4
		dc.b	-3,0		; revision string
		dc.b	100,0

		dc.b	-2,-1		; end of display

screenCopy:		; d0-d7
		dc.w	0,0,0,0,SCREENWIDTH,SCREENHEIGHT,$c0,$ff

animDriveCopy:		; d0-d6
		dc.w	DRIVEX,DRIVEY,0,0,ANIMWIDTH,DRIVEH,$c0

animDiskCopy:		; d0-d2/d4-d5
		dc.w	DRIVEX+DISKDX,DRIVEY+DISKDY+DISKH-DISKEDGEDX
		dc.w	DISKDX,DISKDY+DISKH-DISKEDGEDX,DISKW,DISKEDGEDX

BOTTOMFACTOR	EQU	DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)
animDiskBottomDelta:
		dc.w	0
		dc.w	DISKBOUNCE
		dc.w	(01*BOTTOMFACTOR+12*DISKBOUNCE)/13
		dc.w	(02*BOTTOMFACTOR+11*DISKBOUNCE)/13
		dc.w	(03*BOTTOMFACTOR+10*DISKBOUNCE)/13
		dc.w	(04*BOTTOMFACTOR+09*DISKBOUNCE)/13
		dc.w	(05*BOTTOMFACTOR+08*DISKBOUNCE)/13
		dc.w	(06*BOTTOMFACTOR+07*DISKBOUNCE)/13
		dc.w	(07*BOTTOMFACTOR+06*DISKBOUNCE)/13
		dc.w	(08*BOTTOMFACTOR+05*DISKBOUNCE)/13
		dc.w	(09*BOTTOMFACTOR+04*DISKBOUNCE)/13
		dc.w	(10*BOTTOMFACTOR+03*DISKBOUNCE)/13
		dc.w	(11*BOTTOMFACTOR+02*DISKBOUNCE)/13
		dc.w	(12*BOTTOMFACTOR+01*DISKBOUNCE)/13
		dc.w	BOTTOMFACTOR
		dc.w	-(DISKDY+DISKH+1)	; (no image)

animDiskTop:
		dc.w	DISKDY
		dc.w	DISKDY+DISKBOUNCE
		dc.w	DRIVESLOTDX+((12*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((11*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((10*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((09*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((08*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((07*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((06*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((05*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((04*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((03*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((02*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	DRIVESLOTDX+((01*(DISKDY+DISKBOUNCE-DRIVESLOTDX))/13)
		dc.w	-1
		dc.w	-1

animCopy:		; d0-d7
		dc.w	0,0,DRIVEX,DRIVEY,ANIMWIDTH,ANIMHEIGHT,$c0,$ff

animTicks:
		;	ticks at 1KHz
		dc.w	1000,2000,160,65,65,65,65,65
		dc.w	65,65,65,65,65,65,65,145

	END
@


36.35
log
@Replace text state with one which uses TaggedOpenLibrary() V39
exec.library for copyright strings.  Saves 48 bytes of ROM, and
lets us put the strings in one standard place.
@
text
@d4 2
a5 2
**	$Revision: 36.34 $
**	$Date: 92/05/19 16:47:26 $
d204 3
a206 1
		lea	TDName(pc),a0
a980 2
TDName:
		dc.b	'timer.device',0
@


36.34
log
@Use of TaggedOpenLibrary
@
text
@d4 2
a5 2
**	$Revision: 36.33 $
**	$Date: 92/04/06 14:43:40 $
d358 2
a359 2
*   -5	text
*	y is length, followed by text string padded to end on word alignment
d453 2
d459 20
a478 7
		;------ text
		move.l	d1,d0		; count
		move.l	a2,a0		; string
		move.l	a3,a1		; rastPort
		addq.w	#1,d1		; bump vector list pointer by length
		bclr	#0,d1		;   rounded up to even word
		add.w	d1,a2		;
d482 1
d544 1
a544 1
				moveq	#7,d0
d982 1
a982 1
		dc.b	'%02d.%03d)',0
d1144 1
a1144 2
		dc.b	-5,10		; length...
		dc.b	'Beta Rom ('
d1147 1
a1147 2
		dc.b	-5,22
		dc.b	'Copyright ',169,' 1985-1992 '
d1150 1
a1150 2
		dc.b	-5,22
		dc.b	'Commodore-Amiga, Inc. '
d1153 1
a1153 2
		dc.b	-5,19
		dc.b	'All Rights Reserved',0
@


36.33
log
@Change text from 1991 to 1992, and call this a Beta Rom instead
of a 2.0 Rom for now - probably needs to be changed to read 3.0
Rom when we are really done.
@
text
@d4 2
a5 2
**	$Revision: 36.32 $
**	$Date: 92/04/06 14:24:54 $
d34 1
d54 1
d218 2
a219 3
		lea	GLName(pc),a1
		moveq	#0,d0
		CALLLVO	OpenLibrary
a964 2
GLName:
		dc.b	'graphics.library',0
@


36.32
log
@Use most recent code from V37
@
text
@d5 1
a5 1
**	$Date: 91/10/11 12:32:29 $
d1130 1
a1130 1
		dc.b	'2.0 Roms ('
d1134 1
a1134 1
		dc.b	'Copyright ',169,' 1985-1991 '
@


36.31
log
@Change of Copyright message again - new message format signed off
by Randy Gort, a company lawyer.
@
text
@d4 2
a5 2
**	$Revision: 36.30 $
**	$Date: 91/02/20 11:44:17 $
d394 1
a394 1
		bmi	dyRenderRevision
@


36.30
log
@Removed "by" in text - optional, and it looks better with out
it.
@
text
@d4 2
a5 2
**	$Revision: 36.29 $
**	$Date: 91/02/20 11:25:37 $
d1134 1
a1134 1
		dc.b	169,' Copyright 1985-1991 '
@


36.29
log
@Reorder (c), and "Copyright" in text message per company
lawyer.  Lawer also said that the word "by" is optional, but
ok, and that the company name can appear on a line after the
"(c) Copyright 1985-1991 by" line.  I left the word "by" in
to help appearance (wanted less dead space between the drive picture,
and the text message.
@
text
@d4 2
a5 2
**	$Revision: 36.28 $
**	$Date: 91/02/18 18:36:48 $
d1133 2
a1134 2
		dc.b	-5,24
		dc.b	169,' Copyright 1985-1991 by'
@


36.28
log
@Reformat, and add 1985-1991 instead of just 1990.
@
text
@d4 2
a5 2
**	$Revision: 36.27 $
**	$Date: 90/12/03 06:23:45 $
d1134 1
a1134 1
		dc.b	'Copyright ',169,' 1985-1991 by'
@


36.27
log
@Use ExecBase->SoftVer instead of hacking a ROM address.  Works from
anywhere, unklike the ROM hack.
@
text
@d4 2
a5 2
**	$Revision: 36.26 $
**	$Date: 90/05/29 11:04:30 $
d1133 2
a1134 2
		dc.b	-5,38
		dc.b	'Copyright ',169,' 1990 Commodore-Amiga, Inc.'
d1137 4
@


36.26
log
@add rom revision string
@
text
@d4 2
a5 2
**	$Revision: 36.25 $
**	$Date: 90/05/28 12:50:13 $
d22 1
d507 2
d512 24
a535 17
		move.l	a0,d0			
		and.l	#$fff80000,d0
		or.w	    #$000c,d0
		move.l	d0,a1
		;--	get rest of RawDoFmt parameters
		lea	dyPutChProc(pc),a2
		subq.l	#8,a7
		move.l	a7,a3
		move.l	sdm_ExecBase(a5),a6
		CALLLVO	RawDoFmt
		moveq	#7,d0
		move.l	a7,a0
		lea	sdm_RP(a5),a3
		move.l	a3,a1
		move.l	(a5),a6		; sdm_GfxBase(a5)
		CALLLVO	Text
		addq.l	#8,a7
@


36.25
log
@release 2.00
@
text
@d4 2
a5 2
**	$Revision: 36.24 $
**	$Date: 90/04/13 11:37:23 $
d52 1
d393 1
a393 1
		bmi	dyEndVecs
d504 29
d576 1
a576 1
dyEndVecs:
d578 1
a580 1
		lea	sdm_RP(a5),a3		; pointer to RastPort
d675 2
d811 1
d956 2
d1119 2
a1120 2
		dc.b	-5,4		; length...
		dc.b	'2.00'
d1129 2
@


36.24
log
@use Id instead of Header for 4.x rcs
@
text
@d4 2
a5 2
**	$Revision: 36.23 $
**	$Date: 90/04/10 10:19:07 $
d1084 2
a1085 2
		dc.b	-5,8		; length...
		dc.b	'2.0 Beta'
@


36.23
log
@resolve SysBase without using $4
@
text
@d4 2
a5 2
**	$Revision: 36.22 $
**	$Date: 90/04/02 11:13:53 $
@


36.22
log
@for rcs 4.x header change
@
text
@d4 2
a5 2
**	$Revision: 36.21 $
**	$Date: 90/03/26 16:25:20 $
d89 1
a90 2
**********************************************************************

d139 1
d166 1
d168 5
d191 1
a217 3
	IFNE	sdm_GfxBase
	FAIL	"sdm_GfxBase not zero, recode"
	ENDC
d826 2
a827 1
		DISABLE	a0
d853 2
a854 1
		ENABLE	a0
d899 1
a899 1
		move.l	ABSEXECBASE,a6
d903 1
a903 1
		move.l	ABSEXECBASE,a6
@


36.21
log
@1.4 -> 2.0, and don't discourage redistribution
@
text
@d4 2
a5 2
**	$Revision: 36.20 $
**	$Date: 90/03/15 11:01:14 $
@


36.20
log
@change year to 1990
@
text
@d4 2
a5 2
**	$Revision: 36.19 $
**	$Date: 89/12/30 22:29:52 $
d1078 2
a1079 2
		dc.b	-5,33		; length...
		dc.b	'1.4 Beta Exp, Do not redistribute',0
@


36.19
log
@Beta 1 -> Beta Exp [note, length was wrong for Beta 1]
@
text
@d4 2
a5 2
**	$Revision: 36.18 $
**	$Date: 89/12/18 15:18:34 $
d1083 1
a1083 1
		dc.b	'Copyright ',169,' 1989 Commodore-Amiga, Inc.'
@


36.18
log
@Alpha 20 -> Beta 1
@
text
@d4 2
a5 2
**	$Revision: 36.17 $
**	$Date: 89/12/15 15:07:05 $
d1078 2
a1079 2
		dc.b	-5,33
		dc.b	'1.4 Beta 1, Do not redistribute',0
@


36.17
log
@Alpha 18 -> 20
@
text
@d4 2
a5 2
**	$Revision: 36.16 $
**	$Date: 89/12/07 14:37:34 $
d1079 1
a1079 1
		dc.b	'1.4 Alpha 20, Do not redistribute',0
@


36.16
log
@free view long frame copper list
@
text
@d4 2
a5 2
**	$Revision: 36.15 $
**	$Date: 89/12/06 12:08:42 $
d1079 1
a1079 1
		dc.b	'1.4 Alpha 18, Do not redistribute',0
@


36.15
log
@bump to alpha 18
@
text
@d4 2
a5 2
**	$Revision: 36.14 $
**	$Date: 89/11/07 10:54:52 $
d63 1
d878 3
@


36.14
log
@fix copper poking to account for display prefetch
@
text
@d4 2
a5 2
**	$Revision: 36.13 $
**	$Date: 89/10/10 14:33:44 $
d14 2
a15 1
**	Included Files
d35 1
a35 1
**	Imported Names
d37 7
a88 6
**	Exported Names

	XDEF	SMDisplayOn
	XDEF	SMDisplayTick
	XDEF	SMDisplayOff

d1075 1
a1075 1
		dc.b	'1.4 Alpha 17, Do not redistribute',0
@


36.13
log
@poke copper list directly, not via ScrollVPort
@
text
@d4 2
a5 2
**	$Revision: 36.12 $
**	$Date: 89/09/01 10:23:01 $
d143 1
a726 1
		lea.l	sdm_CopperPokeAddrs(a5),a2
d729 2
a731 1
		moveq	#(SCREENDEPTH*2)-1,d0
d741 5
d747 1
d832 1
a832 1
		moveq	#(SCREENDEPTH*2)-1,d0
d834 4
d839 4
a842 1
		move.w	(a0)+,(a2)
@


36.12
log
@use ReadEClock, not direct cia timer access
@
text
@d4 2
a5 2
**	$Revision: 36.11 $
**	$Date: 89/07/10 15:37:46 $
d20 1
d37 1
a67 1
	XLVO	ScrollVPort
d142 1
d724 17
d766 1
a766 1
		movem.l	d2-d7/a2/a6,-(a7)
d812 4
a815 1
		CALLLVO	WaitTOF
d817 1
a817 1
		lea	sdm_BM2(a5),a2
d819 1
a819 1
		beq.s	dtScrollVP
d821 9
a829 5
		lea	-bm_SIZEOF(a2),a2
dtScrollVP:
		move.l	a0,sdm_RI+ri_BitMap(a5)
		lea	sdm_VP(a5),a0
		CALLLVO	ScrollVPort
d831 2
d839 1
a839 1
		move.l	a2,a1
d844 1
a844 1
		movem.l	(a7)+,d2-d7/a2/a6
@


36.11
log
@Alpha 16 to Alpha 17
@
text
@d4 2
a5 2
**	$Revision: 36.10 $
**	$Date: 89/06/27 10:45:07 $
d19 1
d21 2
a22 1
	INCLUDE "hardware/cia.i"
a34 1
	XREF	_ciab
d38 3
a41 1
	XLVO	CloseLibrary
d75 2
d147 3
d186 14
a721 8
		move.l	#_ciab,a0
		move.b	#$CC,ciatalo(a0)	; $02CC == 716 :: 1 tick/ms
		move.b	#$02,ciatahi(a0)
		move.b	#0,ciatblo(a0)
		move.b	#0,ciatbhi(a0)
		move.b	#CIACRBF_RUNMODE!CIACRBF_LOAD!CIACRBF_IN_TA,ciacrb(a0)
		move.b	#CIACRAF_START,ciacra(a0)

a750 3
		move.l	(a5),d0		; sdm_GfxBase(a5)
		beq.s	dtDone
		move.l	d0,a6
d753 6
a758 3
		move.l	#_ciab,a0
		btst.b	#CIACRBB_START,ciacrb(a0)
		bne.s	dtDone
d760 7
d768 4
a771 4
		move.w	sdm_Tick(a5),d2
		move.w	d2,d0
		addq.w	#1,d0
		cmp.w	#ANIMFRAMES,d0
d773 1
a773 1
		moveq	#0,d0
d775 4
a778 6
		move.w	d0,sdm_Tick(a5)
		add.w	d2,d2
		lea	animTicks+2(pc),a1
		add.w	d2,a1
		move.b	-(a1),ciatblo(a0)
		move.b	-(a1),ciatbhi(a0)
d780 12
d796 1
a796 1
		btst	#1,d2
d808 1
a808 1
		mulu	#bm_SIZEOF/2,d2
d810 1
a810 1
		add.l	d2,a0
d825 1
a825 1
		beq.s	dnFreeSDM
a829 2
		move.b	d0,_ciab+ciacra	; stop timer A
		move.b	d0,_ciab+ciacrb	; stop timer B
d848 7
d865 2
@


36.10
log
@"Alpha 15" to "Alpha 16"
@
text
@d4 2
a5 2
**	$Revision: 36.9 $
**	$Date: 89/05/04 11:33:09 $
d993 1
a993 1
		dc.b	'1.4 Alpha 16, Do not redistribute',0
@


36.9
log
@center display image
@
text
@d4 2
a5 2
**	$Revision: 36.8 $
**	$Date: 89/05/03 18:22:09 $
d993 1
a993 1
		dc.b	'1.4 Alpha 15, Do not redistribute',0
@


36.8
log
@trim display memory to minimum required for rendering
@
text
@d4 2
a5 2
**	$Revision: 36.7 $
**	$Date: 89/04/30 18:30:38 $
d28 1
d203 7
d303 1
a303 1
		move.w	#V_HIRES!V_SPRITES,sdm_VP+vp_Modes(a5)
@


36.7
log
@display globals in a5, not (a4)
@
text
@d4 2
a5 2
**	$Revision: 36.6 $
**	$Date: 89/03/25 15:12:24 $
a81 6
SCREENDEPTH	EQU	  3
SCREENWIDTH	EQU	640
SCREENHEIGHT	EQU	200
PLANEBYTES	EQU	(SCREENWIDTH/8)*SCREENHEIGHT
TEMPLATEBYTES	EQU	128

d88 3
a90 3
CHECKYR0	EQU	 25	; top of long check
CHECKYL0	EQU	 75	; top of short check
CHECKY1		EQU	 99	; bottom of checks
d92 3
d96 1
a96 1
DRIVEY		EQU	 75
d114 6
d141 2
d144 2
a145 1
	STRUCT	sdm_TmpPlane,PLANEBYTES
d276 2
a277 1
		lea	sdm_TmpPlane(a5),a1	; pointer to buffer
d981 1
a981 1
		dc.w	0,120
@


36.6
log
@better timing,
removed unused drawing code cases
@
text
@d4 2
a5 2
**	$Revision: 36.5 $
**	$Date: 89/03/18 18:29:32 $
d156 1
a156 1
		movem.l d2-d7/a2-a6,-(a7)
d163 2
a164 4
	IFNE	sml_StrapDisplayMem
	FAIL	"sml_StrapDisplayMem not zero, recode"
	ENDC
		move.l	d0,(a4)		; sml_StrapDisplayMem(a4)
a170 1
		move.l	d0,a5
d694 1
a694 1
		movem.l (a7)+,d2-d7/a2-a6
d718 1
a718 1
		movem.l	d2-d7/a2/a5-a6,-(a7)
d720 1
a720 1
		move.l	(a4),d0		; sml_StrapDisplayMem(a4)
a721 1
		move.l	d0,a5
d770 1
a770 1
		movem.l	(a7)+,d2-d7/a2/a5-a6
d775 2
a776 2
		movem.l	a4-a6,-(a7)
		move.l	(a4),d0		; sml_StrapDisplayMem(a4)
d778 1
a778 2
		move.l	d0,a4
		move.l	(a4),d0		; sdm_GfxBase(a4)
d780 1
a780 2
		move.l	d0,a5
		exg	a5,a6
d783 3
a785 2
		move.b	#0,_ciab+ciacra	; stop timer A
		move.b	#0,_ciab+ciacrb	; stop timer B
d787 1
a787 1
		suba.l	a1,a1
d790 1
a790 1
		move.l	sdm_UCL+ucl_FirstCopList(a4),a0
d792 1
a792 1
		clr.l	sdm_VP+vp_UCopIns(a4)
d794 1
a794 1
		move.l	sdm_VP+vp_ColorMap(a4),a0
d797 1
a797 1
		lea	sdm_VP(a4),a0
d800 2
a801 3
		exg	a5,a6

		move.l	a5,a1		; GfxBase
d805 1
a805 1
		move.l	a4,a1
d808 1
d810 1
a810 1
		movem.l	(a7)+,a4-a6
@


36.5
log
@new check code, moving disk
@
text
@d4 2
a5 2
**	$Revision: 36.4 $
**	$Date: 89/03/15 15:38:00 $
d109 1
d113 1
a113 1
ANIMHEIGHT	EQU	DISKDY+DISKH
d327 2
d344 1
d421 1
d423 1
d426 1
d456 1
d689 2
a690 2
		move.b	#$74,ciatalo(a0)	; $0574 == 1396 :: 1 tick/ms
		move.b	#$05,ciatahi(a0)
d853 1
a853 1
		dc.w	$0414		; background
a878 40
	IFD	QWE2
		dc.b	-2,6		; check mark shadow color
		dc.b	0,0		; (unused move)
		dc.b	-3,-1		; check mark short left shadow
		dc.w	54,1
		dc.b	-1,0
		dc.w	vlShort-*
		dc.b	-3,-1		; check mark short right shadow
		dc.w	94,1
		dc.b	-1,0
		dc.w	vlShort-*
		dc.b	-1,0		; check mark long right shadow
		dc.w	vlLong-*
		dc.b	-3,-1		; check mark long left shadow
		dc.w	54,1
		dc.b	-1,0
		dc.w	vlLong-*
		dc.b	-4,0		; patch flood hole
		dc.b	70,96
		dc.b	-2,5		; check mark short color
		dc.b	0,0		; (unused move)
		dc.b	-3,-1		; check mark short left
		dc.w	50,1
		dc.b	-1,0
		dc.w	vlShort-*
		dc.b	-3,-1		; check mark short right
		dc.w	90,1
		dc.b	-1,0
		dc.w	vlShort-*
		dc.b	-2,4		; check mark long color
		dc.b	0,0		; (unused move)
		dc.b	-1,0		; check mark long right
		dc.w	vlLong-*
		dc.b	-3,-1		; check mark long left
		dc.w	50,1
		dc.b	-1,0
		dc.w	vlLong-*

	ENDC

a994 24
	IFD	QWE2
vlShort:
		dc.b	-3,0
		dc.b	70,99
		dc.b	30,75
		dc.b	0,75
		dc.b	40,99
		dc.b	70,99
		dc.b	-4,0
		dc.b	15,76
		dc.b	-1,-1		; subroutine return

vlLong:
		dc.b	-3,0
		dc.b	40,99
		dc.b	70,99
		dc.b	240,0
		dc.b	210,0
		dc.b	40,99
		dc.b	-4,0
		dc.b	225,1
		dc.b	-1,-1		; subroutine return
	ENDC

d1005 1
d1007 15
a1021 15
		dc.w	(0*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(1*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(2*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(3*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(4*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(5*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(6*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(7*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(8*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(9*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(10*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(11*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(12*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(13*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
		dc.w	(14*(DRIVESLOTDX-(DISKDY+DISKH-DISKEDGEDX)))/14
d1025 14
a1038 14
		dc.w	DRIVESLOTDX+((14*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((13*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((12*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((11*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((10*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((9*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((8*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((7*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((6*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((5*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((4*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((3*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((2*(DISKDY-DRIVESLOTDX))/14)
		dc.w	DRIVESLOTDX+((1*(DISKDY-DRIVESLOTDX))/14)
d1047 2
a1048 2
		dc.w	1000,3000,100,90,80,70,60,50
		dc.w	40,30,20,20,20,20,20,200
@


36.4
log
@smaller color swizzle code
@
text
@d4 2
a5 2
**	$Revision: 36.3 $
**	$Date: 89/03/15 14:20:09 $
d20 1
d26 1
d32 1
d39 2
d62 1
d68 1
d77 1
d82 1
a82 1
SCREENDEPTH	EQU	4
a84 1
NUMCOPINS	EQU	SCREENHEIGHT*3+1
d88 36
d131 5
a135 1
	STRUCT	sdm_BM,bm_SIZEOF
a136 2
	STRUCT	sdm_Color1Lines,SCREENHEIGHT*2
	STRUCT	sdm_Color2Lines,SCREENHEIGHT*2
d139 3
a141 1
	STRUCT	sdm_Planes,PLANEBYTES*SCREENDEPTH
d155 1
a155 1
		movem.l d2-d5/a2-a6,-(a7)
d161 5
a165 1
		move.l	d0,sml_StrapDisplayMem(a4)
d178 4
a181 1
		move.l	d0,sdm_GfxBase(a5)
d202 7
a208 2
		; Init the BitMap
		lea	sdm_BM(a5),a0
d215 6
a220 8
		lea	sdm_Planes(a5),a1
		move.l	a1,sdm_BM+bm_Planes(a5)
		lea	PLANEBYTES(a1),a1
		move.l	a1,sdm_BM+bm_Planes+4(a5)
		lea	PLANEBYTES(a1),a1
		move.l	a1,sdm_BM+bm_Planes+8(a5)
		lea	PLANEBYTES(a1),a1
		move.l	a1,sdm_BM+bm_Planes+12(a5)
d222 26
a247 1
		; get a color map
d277 1
a277 1
		lea	sdm_BM(a5),a0
d451 8
a458 7
dyColorSwizzle:
		move.w	(a1)+,d0		; initial color
dycsNextDelta:
		move.w	(a1)+,d1		; swizzle count - 1
		bmi.s	dycsRts
		move.w	(a1)+,d2		; swizzle delta
dycsNextSwizzle:
d460 3
a462 4
		move.w	d0,(a0)+
		dbf	d1,dycsNextSwizzle
		bra.s	dycsNextDelta
dycsRts:
d465 29
d495 11
a505 8
	move.w	$c0,d0
		lea	sdm_Color1Lines(a5),a3	; color 1
		move.l	a3,a0
		lea	dyColorTable(pc),a1
		bsr.s	dyColorSwizzle
		lea	sdm_Color2Lines(a5),a4	; color 2
		move.l	a4,a0
		bsr.s	dyColorSwizzle
d507 4
a510 6
		; build copper list
		lea	sdm_UCL(a5),a2		; user copper list
		moveq	#0,d2			; current line
dyNextColorLine:
		move.l	d2,d0
		moveq	#0,d1
d512 34
a545 5
		CALLLVO	CWait			; wait for line
		bsr.s	dyucCBump
		moveq	#2,d0
		move.w	(a3)+,d1
		bsr.s	dyucSetColor		; set color 1
d547 1
a547 5
		move.w	(a4)+,d1
		bsr.s	dyucSetColor		; set color 2
		addq	#1,d2
		cmp.w	#200,d2			; check for end of display
		blt.s	dyNextColorLine
d549 38
a586 1
dyDisplay:
d591 1
a591 1
		bsr.s	dyucCBump
d593 72
d679 9
d689 1
a689 1
		movem.l (a7)+,d2-d5/a2-a6
d692 10
d712 9
d722 48
d772 1
a772 1
		move.l	sml_StrapDisplayMem(a4),d0
d775 1
a775 1
		move.l	sdm_GfxBase(a4),d0
d781 2
d815 7
a821 18
dyColorTable:
		dc.w	$0700		; initial color
		dc.w	 7,$0100	; swizzle count-1 & delta...
		dc.w	 5,$0000
		dc.w	14,$0010
		dc.w	10,$0000
		dc.w	14,-$100
		dc.w	14,$0001
		dc.w	10,$0000
		dc.w	14,-$010
		dc.w	 6,$0100
		dc.w	-1
		dc.w	$0707		; initial color
		dc.w	76,$0000	; swizzle count-1 & delta...
		dc.w	 7,$0101
		dc.w	 5,$0000
		dc.w	 9,-$100
		dc.w	-1
d823 21
d846 3
a848 3
		dc.w	$0987		; checkmark long side (not used)
		dc.w	$0ea8		; checkmark short side (not used)
		dc.w	$0222		; checkmark shadow
d850 5
a854 1
		dc.w	$0fc8		; text
d858 1
d860 4
a863 4
		dc.w	$0238		; disk blue
		dc.w	$0226		; disk blue shadow
		dc.w	$0987		; disk metal
		dc.w	$0fff		; disk label white
a864 5
		dc.w	$0ea8		; drive tan
		dc.w	$0a76		; drive tan shadow
		dc.w	$0f23		; drive light red
		dc.w	$0000		; drive black

d871 2
a872 1
		dc.b	-2,3		; check mark shadow color
d890 1
a890 1
		dc.b	-2,2		; check mark short color
d900 1
a900 1
		dc.b	-2,1		; check mark long color
d909 2
d912 2
a913 2
		dc.w	400,75
		dc.b	-2,12		; drive tan
d927 1
a927 1
		dc.b	-2,13		; drive tan shadow
d932 1
a932 1
		dc.b	-2,15		; drive light off
d938 2
a939 2
		dc.w	410,100
		dc.b	-2,9		; disk shadow
d948 1
a948 1
		dc.b	-2,8		; disk blue
d986 1
a986 1
		dc.b	-2,11		; label color
d996 1
a996 1
		dc.b	-2,10		; disk metal
d1012 1
a1012 1
		dc.b	-2,4
a1024 11
		dc.b	-3,-1		; insert disk message
		dc.w	360,50
		dc.b	-3,0
		dc.b	0,0
		dc.b	-5,24
		dc.b	'I want a workbench disk!'
		dc.b	-3,0
		dc.b	0,12
		dc.b	-5,22
		dc.b	'I want it in DF0: now!'

d1027 1
d1049 55
@


36.3
log
@reposition copyright message, disk & drive so no overlap
@
text
@d4 2
a5 2
**	$Revision: 36.2 $
**	$Date: 89/02/20 11:38:23 $
a89 1
	STRUCT	sdm_Color0Lines,SCREENHEIGHT*2
d91 1
d369 14
d384 2
a385 1
		lea	sdm_Color0Lines(a5),a3	; color 0
d388 2
a389 6
		moveq	#99,d0
dyuc0:
		move.l	(a1)+,(a0)+
		dbf	d0,dyuc0

		lea	sdm_Color1Lines(a5),a4	; color 1
d391 1
a391 5
		lea	dyColorTable+200*2(pc),a1
		moveq	#99,d0
dyuc1:
		move.l	-(a1),(a0)+
		dbf	d0,dyuc1
d492 17
a508 106
		dcb.w	2,$000
		dcb.w	2,$001
		dcb.w	2,$101
		dcb.w	2,$102
		dcb.w	2,$202
		dcb.w	2,$203
		dcb.w	2,$303
		dcb.w	2,$304
		dcb.w	2,$404
		dcb.w	2,$405
		dcb.w	2,$505
		dcb.w	2,$506
		dcb.w	2,$606
		dcb.w	2,$607
		dcb.w	2,$707
		dcb.w	2,$708
		dcb.w	2,$808
		dcb.w	2,$809
		dcb.w	2,$909
		dcb.w	2,$90a
		dcb.w	2,$a0a
		dcb.w	2,$a0b
		dcb.w	2,$b0b
		dcb.w	2,$b0c
		dcb.w	2,$c0c
		dcb.w	2,$c0d
		dcb.w	2,$d0d
		dcb.w	2,$d0e
		dcb.w	2,$e0e
		dcb.w	2,$e0f
		dcb.w	2,$f0f
		dcb.w	2,$e0f
		dcb.w	2,$d0f
		dcb.w	2,$c0f
		dcb.w	2,$b0f
		dcb.w	2,$a0f
		dcb.w	2,$90f
		dcb.w	2,$80f
		dcb.w	2,$70f
		dcb.w	2,$60f
		dcb.w	2,$50f
		dcb.w	2,$40f
		dcb.w	2,$30f
		dcb.w	2,$20f
		dcb.w	2,$10f
		dcb.w	2,$00f
		dcb.w	2,$01f
		dcb.w	2,$01e
		dcb.w	2,$02e
		dcb.w	2,$02d
		dcb.w	2,$03d
		dcb.w	2,$03c
		dcb.w	2,$04c
		dcb.w	2,$04b
		dcb.w	2,$05b
		dcb.w	2,$05a
		dcb.w	2,$06a
		dcb.w	2,$069
		dcb.w	2,$079
		dcb.w	2,$078
		dcb.w	2,$088
		dcb.w	2,$087
		dcb.w	2,$097
		dcb.w	2,$096
		dcb.w	2,$0a6
		dcb.w	2,$0a5
		dcb.w	2,$0b5
		dcb.w	2,$0b4
		dcb.w	2,$0c4
		dcb.w	2,$0c3
		dcb.w	2,$0d3
		dcb.w	2,$0d2
		dcb.w	2,$0e2
		dcb.w	2,$0e1
		dcb.w	2,$0f1
		dcb.w	2,$0f0
		dcb.w	2,$1f0
		dcb.w	2,$1e0
		dcb.w	2,$2e0
		dcb.w	2,$2d0
		dcb.w	2,$3d0
		dcb.w	2,$3c0
		dcb.w	2,$4c0
		dcb.w	2,$4b0
		dcb.w	2,$5b0
		dcb.w	2,$5a0
		dcb.w	2,$6a0
		dcb.w	2,$690
		dcb.w	2,$790
		dcb.w	2,$780
		dcb.w	2,$880
		dcb.w	2,$870
		dcb.w	2,$970
		dcb.w	2,$960
		dcb.w	2,$a60
		dcb.w	2,$a50
		dcb.w	2,$b50
		dcb.w	2,$b40
		dcb.w	2,$c40
		dcb.w	2,$c30
		dcb.w	2,$d30
		dcb.w	2,$d20
		dcb.w	2,$e20
		dcb.w	2,$e10
		dcb.w	2,$f10
		dcb.w	2,$f00
d512 2
a513 2
		dc.w	$0000		; checkmark short side
		dc.w	$077c		; checkmark long side
d555 1
a555 1
		dc.b	-2,1		; check mark short color
d565 1
a565 1
		dc.b	-2,2		; check mark long color
d678 1
a678 1
		dc.b	'1.4 Alpha 14, Do not redistribute',0
@


36.2
log
@disk+drive+color check+purple background
@
text
@d4 2
a5 2
**	$Revision: 36.1 $
**	$Date: 89/01/06 17:28:09 $
d657 1
a657 1
		dc.w	350,75
d683 1
a683 1
		dc.w	360,100
d756 1
a756 1
		dc.w	50,120
@


36.1
log
@enhance drawing engine, add user copper list to display
@
text
@d4 2
a5 2
**	$Revision: 36.0 $
**	$Date: 88/12/20 13:49:50 $
d12 1
a12 1
	SECTION strap
d74 1
a74 1
SCREENDEPTH	EQU	3
d162 2
d220 1
a220 1
*   -2	end of vector list or pen color
d222 1
a222 1
*	positive y is pen color and area outline color
d270 1
a270 1
		bra.s	dyNextVecPair
d278 1
d395 1
a395 1
		moveq	#0,d0
d397 2
a398 2
		bsr.s	dyucSetColor		; set color 0
		moveq	#1,d0
d400 1
a400 1
		bsr.s	dyucSetColor		; set color 1
d485 106
a590 50
		dcb.w	4,$000
		dcb.w	4,$000
		dcb.w	4,$000
		dcb.w	4,$001
		dcb.w	4,$002
		dcb.w	4,$012
		dcb.w	4,$013
		dcb.w	4,$014
		dcb.w	4,$024
		dcb.w	4,$025
		dcb.w	4,$026
		dcb.w	4,$036
		dcb.w	4,$037
		dcb.w	4,$038
		dcb.w	4,$048
		dcb.w	4,$049
		dcb.w	4,$04a
		dcb.w	4,$05a
		dcb.w	4,$05b
		dcb.w	4,$05c
		dcb.w	4,$06c
		dcb.w	4,$06d
		dcb.w	4,$06e
		dcb.w	4,$07e
		dcb.w	4,$07f
		dcb.w	4,$17f
		dcb.w	4,$18f
		dcb.w	4,$28f
		dcb.w	4,$29f
		dcb.w	4,$39f
		dcb.w	4,$3af
		dcb.w	4,$4af
		dcb.w	4,$4bf
		dcb.w	4,$5bf
		dcb.w	4,$5cf
		dcb.w	4,$6cf
		dcb.w	4,$6df
		dcb.w	4,$7df
		dcb.w	4,$7ef
		dcb.w	4,$8ef
		dcb.w	4,$8ff
		dcb.w	4,$9ff
		dcb.w	4,$aff
		dcb.w	4,$bff
		dcb.w	4,$cff
		dcb.w	4,$dff
		dcb.w	4,$eff
		dcb.w	4,$fff
		dcb.w	4,$fff
		dcb.w	4,$fff
d593 1
a593 1
		dc.w	$0FFF		; background
d596 1
a596 1
		dc.w	$0bbb		; checkmark shadow
d603 4
a606 8
		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.w	0
d608 5
d614 3
a616 3
		dc.w	0
		dc.w	0
		dc.w	0
d620 1
d622 1
a622 1
		dc.w	54,0
d626 1
a626 1
		dc.w	94,0
d632 1
a632 1
		dc.w	54,0
d636 1
a636 1
		dc.b	70,95
d638 1
d648 1
d656 99
a754 1
		dc.b	-2,4
d757 1
a757 1
		dc.b	-3,0
d759 2
a760 2
		dc.b	-5,30
		dc.b	'Alpha 1.4, Do not redistribute'
d771 1
a771 1
		dc.w	320,80
@


36.0
log
@reorganized for V36
@
text
@d4 2
a5 2
**	$Revision$
**	$Date$
a35 3
	XLVO	InitTmpRas
	XLVO	LoadRGB4
	XLVO	SetRGB4
d37 4
a40 3
	XLVO	SetDrMd
	XLVO	SetAPen
	XLVO	Move
d42 5
a46 3
	XLVO	Draw
	XLVO	WaitTOF

d52 2
d55 1
d57 6
a62 3
	XLVO	LoadView
	XLVO	FreeMem
	XLVO	FreeVPortCopLists
a72 2
XDISKSHIFT	EQU	70
YDISKSHIFT	EQU	40
d74 2
a75 3

SCREENDEPTH	EQU	2
SCREENWIDTH	EQU	320
d77 1
d89 4
a92 2
	STRUCT	sdm_Plane0,PLANEBYTES
	STRUCT	sdm_Plane1,PLANEBYTES
d94 1
a94 1
	STRUCT	sdm_Template,TEMPLATEBYTES
d121 1
a121 1
		move.l	d0,a4
d127 1
a127 1
		move.l	d0,sdm_GfxBase(a4)
d141 1
a141 1
		lea	sdm_VP(a4),a0
d145 1
a145 1
		lea	sdm_V(a4),a1
d149 1
a149 1
		lea	sdm_BM(a4),a0
d156 6
a161 4
		lea	sdm_Plane0(a4),a1
		move.l	a1,sdm_BM+bm_Planes(a4)
		lea	sdm_Plane1(a4),a1
		move.l	a1,sdm_BM+bm_Planes+4(a4)
d163 17
d181 3
a183 1
		lea	sdm_RP(a4),a1
d187 2
a188 2
		lea	sdm_TR(a4),a0		; pointer to TmpRas
		lea	sdm_TmpPlane(a4),a1	; pointer to buffer
d193 2
a194 2
		lea	sdm_BM(a4),a0
		move.l	a0,sdm_RI+ri_BitMap(a4)
d197 3
a199 3
		move.l	a0,sdm_RP+rp_BitMap(a4)
		lea	sdm_TR(a4),a0
		move.l	a0,sdm_RP+rp_TmpRas(a4)
d202 5
a206 5
		move.w	#SCREENHEIGHT,sdm_VP+vp_DHeight(a4)
		move.w	#SCREENWIDTH,sdm_VP+vp_DWidth(a4)
		lea	sdm_RI(a4),a0
		move.l	a0,sdm_VP+vp_RasInfo(a4)
		clr.w	sdm_VP+vp_Modes(a4)
d208 3
a210 3
		; point the View to the ViewPort
		lea	sdm_VP(a4),a0
		move.l	a0,sdm_V+v_ViewPort(a4)
d212 22
a233 3
		lea	sdm_V(a4),a0		; pointer to the View
		lea	sdm_VP(a4),a1		; pointer to the ViewPort
		CALLLVO	MakeVPort
d235 10
a244 2
		lea	sdm_V(a4),a1		; pointer to the View
		CALLLVO	MrgCop
d246 9
a254 2
		lea	sdm_V(a4),a1		; pointer to the View
		CALLLVO	LoadView
d256 6
a261 5
		;------ set screen white
		lea	sdm_VP(a4),a0
		lea	whiteMap(pc),a1
		moveq	#20,d0
		CALLLVO	LoadRGB4
d263 2
a264 4
		; put pointer to RastPort into a3
		lea	sdm_RP(a4),a3
		
		lea	VectorArray(pc),a2
d266 1
a266 27
		moveq	#RP_JAM1,d0
		CALLLVO	SetDrMd
*
*   for(;;) {
.L40:
*	newx = *vec++;
		moveq	#0,d3
		move.b	(a2)+,d3
*	newy = *vec++;
		moveq	#0,d5
		move.b	(a2)+,d5
*
*	if( newx == -1 ) {
		cmp.b	#-1,d3
		bne.s	.L39
*	    if( newy == -1 ) break;
		cmp.b	#-1,d5
		beq	.L31
*	    x = *vec++;
		moveq	#0,d4
		move.b	(a2)+,d4
*	    y = *vec++;
		moveq	#0,d3
		move.b	(a2)+,d3
*	    SetAPen( rp, newy );
		move.l	a3,a1
		move.l	d5,d0
d268 11
a278 6
*	    Move( rp, x+XDISKSHIFT, y+YDISKSHIFT );
		moveq	#YDISKSHIFT,d1
		add.l	d3,d1
		moveq	#XDISKSHIFT,d0
		add.l	d4,d0
		move.l	a3,a1
d280 16
a295 13
*	    continue;
		bra.s	.L40
*	} else if( newx == -2 ) {
.L39:
		cmp.b	#-2,d3
		bne.s	.L37
*	    x = *vec++;
		moveq	#0,d4
		move.b	(a2)+,d4
*	    y = *vec++;
		moveq	#0,d3
		move.b	(a2)+,d3
*	    SetAPen( rp, newy );
d297 11
a307 9
		move.l	d5,d0
		CALLLVO	SetAPen
*	    Flood( rp, 1, x+XDISKSHIFT, y+YDISKSHIFT );
		moveq	#YDISKSHIFT,d1
		add.l	d3,d1
		moveq	#XDISKSHIFT,d0
		add.l	d4,d0
		moveq	#1,d2
		move.l	a3,a1
d309 5
a313 15
*	    continue;
		BRA	.L40
*	}
.L37:
*
*	x = newx;
		move.l	d3,d4
*	y = newy;
		move.l	d5,d3
*	Draw( rp, x+XDISKSHIFT, y+YDISKSHIFT );
		moveq	#YDISKSHIFT,d1
		add.l	d3,d1
		moveq	#XDISKSHIFT,d0
		add.l	d4,d0
		move.l	a3,a1
d315 26
a340 20
*   }
		BRA	.L40
.L31:
*
*   pdata = PlaneArray;
		lea	PlaneArray(pc),a2
		move.l	a3,a1
		moveq	#3,d0
		CALLLVO	SetAPen
*   for(;;) {
.L30:
		;------ mask of -1 stops this
		move.w	(a2)+,d0
		bmi.s	.L22
		move.b	d0,rp_Mask(a3)
*	d2	destX
*	d3	destY
*	d4	width (word, then pixel)
*	d5	height
		moveq	#0,d4
d344 9
a352 9
		moveq	#XDISKSHIFT,d2
		moveq	#0,d0
		move.b	(a2)+,d0
		add.l	d0,d2
		moveq	#YDISKSHIFT,d3
		move.b	(a2)+,d0
		add.l	d0,d3
		move.w	d4,d0
		mulu	d5,d0
d354 2
a355 8
		lea	sdm_Template(a4),a0
		bra.s	3$
2$
		move.w	(a2)+,(a0)+
3$
		dbf	d0,2$

		lea	sdm_Template(a4),a0
d357 1
a357 1
		add.l	d4,d4
d359 1
a360 1
		lsl	#3,d4
d362 2
a363 9
		bra.s	.L30
*	}
*   }
.L22:
		;------ set screen colors
		lea	sdm_VP(a4),a0
		lea	colorMap(pc),a1
		moveq	#4,d0
		CALLLVO	LoadRGB4
d365 56
d427 8
d437 1
d453 7
d481 51
a531 5
whiteMap:
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
a532 17
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF

		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
		dc.w	$0FFF
d534 4
a537 4
		dc.w	$0FFF
		dc.w	$0000
		dc.w	$077c
		dc.w	$0bbb
d539 4
a542 46
VectorArray:
		dc.b	-1,1
		dc.b	35,11
		dc.b	58,11
		dc.b	58,33
		dc.b	113,33
		dc.b	113,11
		dc.b	125,11
		dc.b	136,22
		dc.b	136,94
		dc.b	127,94
		dc.b	127,56
		dc.b	64,56
		dc.b	62,54
		dc.b	53,54
		dc.b	52,56
		dc.b	45,56
		dc.b	45,65
		dc.b	35,72
		dc.b	35,11
		dc.b	-2,2
		dc.b	37,69
		dc.b	-1,1
		dc.b	33,72
		dc.b	33,10
		dc.b	126,10
		dc.b	138,22
		dc.b	138,95
		dc.b	86,95
		dc.b	86,100
		dc.b	82,108
		dc.b	78,113
		dc.b	74,116
		dc.b	68,125
		dc.b	60,129
		dc.b	60,140
		dc.b	10,140
		dc.b	10,109
		dc.b	9,109
		dc.b	9,81
		dc.b	13,75
		dc.b	20,69
		dc.b	21,65
		dc.b	25,58
		dc.b	30,55
		dc.b	33,54
d544 8
a551 37
*linebreak
		dc.b	33,54
		dc.b	30,56
		dc.b	26,58
		dc.b	22,65
		dc.b	21,69
		dc.b	14,75
		dc.b	10,81
		dc.b	10,108
		dc.b	11,109
		dc.b	11,139
		dc.b	40,139
		dc.b	40,118
		dc.b	48,118
		dc.b	52,114
		dc.b	52,95
		dc.b	50,92
		dc.b	50,82
		dc.b	65,69
		dc.b	65,57
		dc.b	62,55
		dc.b	59,55
		dc.b	62,58
		dc.b	62,65
		dc.b	61,66
		dc.b	54,66
		dc.b	51,63
		dc.b	42,70
		dc.b	30,76
		dc.b	18,85
		dc.b	18,84
		dc.b	30,75
		dc.b	26,74
		dc.b	23,71
		dc.b	26,73
		dc.b	30,74
		dc.b	33,72
d553 4
a556 30
*cuticleofthumb
		dc.b	-1,1
		dc.b	50,61
		dc.b	52,54
		dc.b	60,55
		dc.b	61,58
		dc.b	61,65
		dc.b	54,65
		dc.b	50,61
		dc.b	-1,1
		dc.b	51,92
		dc.b	51,82
		dc.b	66,69
		dc.b	66,57
		dc.b	125,57
		dc.b	125,94
		dc.b	52,94
		dc.b	51,90
		dc.b	-1,1
		dc.b	60,11
		dc.b	111,11
		dc.b	111,32
		dc.b	60,32
		dc.b	60,11
		dc.b	-1,1
		dc.b	96,14
		dc.b	107,14
		dc.b	107,28
		dc.b	96,28
		dc.b	96,14
d558 34
a591 2
		dc.b	-2,3
		dc.b	62,31
d593 15
a607 6
		dc.b	-1,1
		dc.b	98,15
		dc.b	105,15
		dc.b	105,27
		dc.b	98,27
		dc.b	98,15
d609 10
a618 2
		dc.b	-2,2
		dc.b	99,26
d620 1
a620 6
		dc.b	-1,1
		dc.b	47,57
		dc.b	50,57
		dc.b	50,59
		dc.b	47,63
		dc.b	47,57
d622 10
a631 17
*rightfleshypartofpalm
		dc.b	-1,1
		dc.b	41,139
		dc.b	41,119
		dc.b	48,119
		dc.b	53,114
		dc.b	53,105
		dc.b	57,107
		dc.b	65,107
		dc.b	65,109
		dc.b	69,114
		dc.b	73,114
		dc.b	73,116
		dc.b	67,125
		dc.b	59,128
		dc.b	59,139
		dc.b	41,139
d633 10
a642 154
*cornerright-upaboveringfinger
		dc.b	-1,1
		dc.b	53,95
		dc.b	53,100
		dc.b	58,97
		dc.b	53,95
		dc.b	-1,1
		dc.b	57,98
		dc.b	53,100
		dc.b	53,95
		dc.b	74,95
		dc.b	64,105
		dc.b	63,105
		dc.b	65,103
		dc.b	60,98
		dc.b	57,98
		dc.b	-1,1
		dc.b	78,95
		dc.b	85,95
		dc.b	85,100
		dc.b	81,108
		dc.b	78,112
		dc.b	73,113
		dc.b	70,113
		dc.b	67,109
		dc.b	67,106
		dc.b	78,95

*cuticleofpinkey
		dc.b	-1,1
		dc.b	68,106
		dc.b	68,109
		dc.b	70,112
		dc.b	72,112
		dc.b	76,111
		dc.b	77,108
		dc.b	73,105
		dc.b	68,106

*cuticleofringfinger
		dc.b	-1,1
		dc.b	54,104
		dc.b	62,106
		dc.b	64,103
		dc.b	60,99
		dc.b	57,99
		dc.b	54,101
		dc.b	54,104

*fillintheleftedge
		dc.b	-1,1
		dc.b	126,11
		dc.b	137,22
		dc.b	137,94


		dc.b	-2,1
		dc.b	34,11
		dc.b	-2,1
		dc.b	59,11
		dc.b	-2,1
		dc.b	97,15
		dc.b	-2,1
		dc.b	106,27
		dc.b	-2,1
		dc.b	112,15

*	dc.b	-2,1
*	dc.b	137,22

		dc.b	-2,1
		dc.b	126,94

		dc.b	-2,1
		dc.b	75,96
		dc.b	-2,1
		dc.b	46,57

		dc.b	-1,-1

PlaneArray:
		dc.w	2
		dc.b	4,8
		dc.b	57,84

		dc.w	$1001,$8220,$4050,$0004
		dc.w	$0404,$8889,$1210,$5010
		dc.w	$0408,$2448,$1090,$1020
		dc.w	$0410,$1042,$0510,$1040

		dc.w	$0420,$0050,$2690,$1080
		dc.w	$0440,$0484,$0900,$1100
		dc.w	$0480,$4960,$4208,$1200
		dc.w	$0500,$0683,$8404,$1400

		dc.w	1
		dc.b	4,8
		dc.b	57,84

		dc.w	$1f9f,$fe3f,$ff77,$fe7c
		dc.w	$070c,$ef8f,$1e71,$dc30
		dc.w	$07f8,$e7ce,$1cf3,$1fe0
		dc.w	$0731,$f3ce,$1df6,$1cc0

		dc.w	$0760,$03dc,$3ffc,$1d80
		dc.w	$07c0,$879c,$3f78,$1f00
		dc.w	$0780,$cf78,$7e78,$1e00
		dc.w	$0700,$feff,$fc7c,$1c00

		dc.w	2
		dc.b	3,7
		dc.b	74,74
		dc.w	$c707,$8f8c,$3000
		dc.w	$6603,$18ce,$7000
		dc.w	$3e63,$18cf,$f000
		dc.w	$6667,$18cd,$b000
		dc.w	$c63b,$8f8c,$3000
		dc.w	$0600,$000c,$3000
		dc.w	$0700,$000c,$3000

		dc.w	2
		dc.b	3,7
		dc.b	70,64
		dc.w	$c71f,$18c7,$c3e0
		dc.w	$c631,$98c0,$6630
		dc.w	$c601,$98cf,$e630
		dc.w	$ce31,$98cc,$6670
		dc.w	$761f,$0fc7,$c3b0
		dc.w	$0600,$0000,$0030
		dc.w	$0700,$0000,$0038

*	Version 1.2.1 - bart

VERSION_NUM	EQU	0

	IFD VERSION_NUM

		dc.w	1
		dc.b	4,10
		dc.b	92,100
		dc.w	$0f9f,$c1c0,$0fc0,$0e00
		dc.w	$0707,$03c0,$1fe0,$1e00
		dc.w	$070e,$07c0,$3cf0,$3e00
		dc.w	$071c,$01c0,$0070,$0e00
		dc.w	$0738,$01c0,$00f0,$0e00
		dc.w	$0770,$01c0,$03e0,$0e00
		dc.w	$07e0,$01c0,$0780,$0e00
		dc.w	$07c0,$01c0,$0f00,$0e00
		dc.w	$0780,$07f3,$3ff3,$3f80
		dc.w	$0700,$07f3,$3ff3,$3f80
	
	ENDC VERSION_NUM

		dc.w	-1
@
