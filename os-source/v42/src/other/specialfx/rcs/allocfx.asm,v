head     39.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.8
date     93.08.11.17.19.41;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     93.08.06.15.29.26;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     93.07.19.11.46.35;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     93.07.06.18.33.37;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     93.07.02.17.26.24;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     93.06.30.13.44.53;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     93.04.23.18.02.38;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     93.03.17.12.05.07;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     93.03.12.19.12.44;  author spence;  state Exp;
branches ;
next     ;


desc
@Allocates a FXHandle
@


39.8
log
@Autodoc change <specialfx/...> -> <libraries/...>
@
text
@********************************************************************************
*
*	$Id: AllocFX.asm,v 39.7 93/08/06 15:29:26 spence Exp Locker: spence $
*
********************************************************************************

	section	code

	include	'exec/types.i'
	include	'exec/memory.i'
	include	'graphics/gfxbase.i'

	include	"SpecialFXBase.i"
	include	"SpecialFX.i"
	include	"SpecialFX_internal.i"

	xdef	_LVOAllocFX
	xref	_LVOAllocMem

******* specialfx.library/AllocFX **********************************************
*
*   NAME
*	AllocFX -- Allocate memory and handle for a Special Effect.
*
*   SYNOPSIS
*	FXHandle = AllocFX(ViewPort, Type, Number, Error)
*	d0                 a0        d0    d1      a1
*
*	APTR AllocFX(struct ViewPort *, ULONG, UWORD, ULONG *);
*
*   FUNCTION
*	To allocate the data needed to control a 'special effect'. This builds
*	a handle, and a list of pointers to the various structures needed.
*
*   INPUTS
*	ViewPort - ViewPort the effect will be used on.
*	Type   - The type of effect desired, as follows:
*	SFX_ColorControl - Builds a copperlist to alter the colour of
*	                  specified pens at specified lines, in the maximum
*	                  possible colourspace of the chip set.
*
*	SFX_LineControl - Builds a copperlist to scroll a group of lines
*	                  horizontally, independant from the rest of the
*	                  ViewPort.
*
*	SFX_IntControl  - Builds a copperlist to cause a copper interrupt at the
*	                  specified line. Note that the interrupt is not enabled
*	                  until you have installed an interrupt server with
*	                  exec.library/AddIntServer().
*
*	SFX_FineVideoControl
*	                - Builds a copperlist to create a subset of the effects
*	                  that can be generated with graphics.library's
*	                  VideoControl() function. See <libraries/specialfx.h>
*	                  for a list of the effects.
*
*	SFX_SpriteControl
*	                - Builds a copperlist to allow the reuse of sprites in
*	                  a ViewPort. This is similar to VSprites, but this can
*	                  also handle AA wide sprites which VSprites do not
*	                  support.
*
*	Number - The number of elements in the effect.
*	Error - Pointer to a ULONG for secondary error information
*
*   RESULT
*	FXHandle - will point to an array of 'Number' pointers to structures
*	           associated with the effect type.
*	           If NULL, then Error will contain an error code.
*
*   SEE ALSO
*	<libraries/specialfx.h> InstallFXA() FreeFX()
*
********************************************************************************

_LVOAllocFX:
	movem.l	d2-d6/a2/a3/a5/a6,-(sp)
	move.l	a6,a5
	move.l	a1,a2
	move.l	a0,a3		; safe keeping
	move.l	sfxb_AllocVectors(a6),a0
	; Find the type
	and.l	#~$80000000,d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	-4(a0,d0.w),a0
	jsr	(a0)
AllocFX.:
	movem.l	(sp)+,d2-d6/a2/a3/a5/a6
	rts
@


39.7
log
@Passes the ViewPort to the Alloc vector in a3.
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.6 93/07/19 11:46:35 spence Exp Locker: spence $
d54 1
a54 1
*	                  VideoControl() function. See <specialfx/specialfx.h>
d72 1
a72 1
*	<specialfx/specialfx.h> InstallFXA() FreeFX()
@


39.6
log
@Autodoc cleanup
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.5 93/07/06 18:33:37 spence Exp Locker: spence $
d42 1
a42 1
*	SFX_ScrollLines - Builds a copperlist to scroll a group of lines
d54 1
a54 1
*	                  VideoControL() function. See <specialfx/specialfx.h>
d77 1
a77 1
	movem.l	d2-d5/a2/a5/a6,-(sp)
d79 2
a80 1
	move.l	a1,a2		; safe keeping
a81 1
	; Note that for today, we don't need the ViewPort structure.
d89 1
a89 1
	movem.l	(sp)+,d2-d5/a2/a5/a6
@


39.5
log
@Calls the vectors through the table off SpecialFXBase
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.4 93/07/02 17:26:24 spence Exp Locker: spence $
d20 1
a20 1
******* SpecialFX.library/AllocFX **********************************************
d51 12
d72 1
a72 1
*	<SpecialFX/SpecialFX.h> InstallFXA() FreeFX()
@


39.4
log
@Now allocates the array of pointers to the Effect structures. Handle
returned is the address of the first pointer in the array. THe real
FXHandle is at a -ve offset from the returned handle.
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.3 93/06/30 13:44:53 spence Exp Locker: spence $
d68 1
d72 4
a75 8
	subq.l	#1,d0
	beq.s	Alloc_CC
	subq.l	#1,d0
	beq.s	Alloc_SL
	subq.l	#1,d0
	beq	Alloc_IC

	moveq	#0,d0
a78 117

Alloc_CC:
	; Allocate the RAM for the ColorControl structures.
	moveq	#CCPrivate_SIZEOF,d0
	mulu	d1,d0			; enough for all the cc_ structures.
	add.l	#FxHandle_SIZEOF,d0	; plus the FXHandle
	move.l	d1,d2
	asl.w	#2,d1
	add.w	d1,d0			; plus the pointers to the cc_structures
					; = size of the allocation
	move.l	d0,d3
	move.l	#(MEMF_CLEAR|MEMF_PUBLIC),d1
	move.l	sfxb_ExecBase(a5),a6
	jsr	_LVOAllocMem(a6)
	tst.l	d0
	beq	FAIL_NOMEM
	move.l	d0,a0			; a0 -> start of the array list
	lea	-FxHandle_SIZEOF(a0),a1
	move.l	a1,d0
	move.l	#(SFX_ColorControl&~$80000000),(a1)+	; fxh_Type
	move.l	d2,(a1)+		; fxh_Num
	move.l	d3,(a1)+		; fxh_AllocSize
	move.w	d2,d3
	asl.w	#2,d3
	add.l	d3,a0
	move.l	a0,(a1)+		; fxh_First
	addq.l	#4,a1			; skip fxh_UCopList
	move.l	d0,(a1)+		; fxh_BackPointer
	move.l	a1,d0			; return the start of the array list
	bra.s	Alloc_CC_loop.
Alloc_CC_loop:
	move.l	a0,(a1)+
	lea	CCPrivate_SIZEOF(a0),a0
Alloc_CC_loop.:
	dbra.s	d2,Alloc_CC_loop
	bra.s	AllocFX.

Alloc_SL:
	; Allocate the RAM for the ScrollRange structures.
	; How many of the slOffsetTables do we need?
	; We need 16 for A/ECS, up to 64 for AA, and up to 128 for AA+.
	; This can be calculated as 
	; (16 << *(GfxBase->bwshifts[GfxBase->MemType]))
	move.l	sfxb_GfxBase(a6),a0
	move.l	gb_bwshifts(a0),a1
	move.b	gb_MemType(a0),d0
	move.b	0(a1,d0.w),d2
	moveq	#16,d0
	asl.l	d2,d0
	move.w	d0,d4
	mulu	#slOffsetTable_SIZEOF,d0
	move.w	d0,d2
	add.l	#slPrivate_SIZEOF,d0
	move.w	d1,d5
	mulu	#sclPrivate_SIZEOF,d1
	add.l	d1,d0			; size of the allocation
	move.l	d0,d3
	move.l	#(MEMF_CLEAR|MEMF_PUBLIC),d1
	move.l	sfxb_ExecBase(a5),a6
	jsr	_LVOAllocMem(a6)
	tst.l	d0
	beq	AllocFX.
	move.l	d0,a0
	move.l	d0,a1
	move.w	d4,slp_OffsetCount(a0)
	move.l	#(SFX_ScrollLines&~$80000000),(a0)+	; fxh_Type
	move.l	d5,(a0)+		; fxh_Num
	move.l	d3,(a0)+		; fxh_AllocSize
	lea	slPrivate_SIZEOF(a1,d2),a1
	move.l	a1,(a0)			; fxh_First
	bra.s	Alloc_SL_loop.
Alloc_SL_loop:
	move.l	a1,(a2)+ ; <<<<<<< WHAT THE FUCK IS THIS??
	lea	sclPrivate_SIZEOF(a1),a1
Alloc_SL_loop.:
	dbra.s	d5,Alloc_SL_loop
	bra	AllocFX.

Alloc_IC:
	; Allocate the RAM for the ColorControl structures.
	moveq	#ic_SIZEOF,d0
	mulu	d1,d0			; enough for all the ic_ structures.
	add.l	#FxHandle_SIZEOF,d0	; plus the FXHandle
	move.l	d1,d2
	asl.w	#2,d1
	add.w	d1,d0			; plus the pointers to the ic_structures
					; = size of the allocation
	move.l	d0,d3
	move.l	#(MEMF_CLEAR|MEMF_PUBLIC),d1
	move.l	sfxb_ExecBase(a5),a6
	jsr	_LVOAllocMem(a6)
	tst.l	d0
	beq.s	FAIL_NOMEM
	move.l	d0,a0			; a0 -> start of the array list
	lea	-FxHandle_SIZEOF(a0),a1
	move.l	a1,d0
	move.l	#(SFX_IntControl&~$80000000),(a1)+	; fxh_Type
	move.l	d2,(a1)+		; fxh_Num
	move.l	d3,(a1)+		; fxh_AllocSize
	move.w	d2,d3
	asl.w	#2,d3
	add.l	d3,a0
	move.l	a0,(a1)+		; fxh_First
	addq.l	#4,a1			; skip fxh_UCopList
	move.l	d0,(a1)+		; fxh_BackPointer
	move.l	a1,d0			; return the start of the array list
	bra.s	Alloc_IC_loop.
Alloc_IC_loop:
	move.l	a0,(a1)+
	lea	ic_SIZEOF(a0),a0
Alloc_IC_loop.:
	dbra.s	d2,Alloc_IC_loop
	bra	AllocFX.

FAIL_NOMEM:
	move.l	SFX_ERR_NoMem,(a2)
	bra	AllocFX.
@


39.3
log
@Alloc InterruptControl stuff.
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.2 93/04/23 18:02:38 spence Exp Locker: spence $
d26 2
a27 2
*	handle = AllocFX(Type, Number, Array)
*	d0               d0    d1      a0
d29 1
a29 1
*	APTR AllocFX(ULONG, UWORD, ULONG *);
d36 14
a49 3
*	Type   - The type of effect desired.
*	Number - The number of elements in the effect
*	Array  - pointer to an array of pointers to Number elements.
d51 3
d55 3
a57 4
*	handle - will point to a handle to be used by DisplayFX(), or
*	         NULL if no RAM.
*	         The array will be filled with pointers to each of the elements
*	         for the effect.
d60 1
a60 1
*	<SpecialFX/SpecialFX.h> DisplayFXA() FreeFX()
d67 2
a68 1
	move.l	a0,a2		; safe keeping
d72 1
a72 1
	beq.s	Alloc_COR
d83 9
a91 5
Alloc_COR:
	; Allocate the RAM for the ColorRange structures.
	moveq	#CorPrivate_SIZE,d0
	mulu	d1,d0
	add.l	#FxHandle_SIZEOF,d0	; size of the allocation
a92 1
	move.l	d1,d2
d97 20
a116 13
	beq.s	AllocFX.
	move.l	d0,a0
	move.l	#(SFX_ColorRange&~$80000000),(a0)+	; fxh_Type
	move.l	d2,(a0)+		; fxh_Num
	move.l	d3,(a0)+		; fxh_AllocSize
	addq.l	#8,a0			; point to the start of the elements
	move.l	a0,-8(a0)		; fxh_First
	bra.s	Alloc_COR_loop.
Alloc_COR_loop:
	move.l	a0,(a2)+
	lea	CorPrivate_SIZE(a0),a0
Alloc_COR_loop.:
	dbra.s	d2,Alloc_COR_loop
d154 1
a154 1
	move.l	a1,(a2)+
d161 8
a168 3
	moveq	#ic_SIZEOF,d0		; no private info in InterruptControl
	mulu	d1,d0
	add.l	#FxHandle_SIZEOF,d0	; size of the allocation
a169 1
	move.l	d1,d2
d174 14
a187 7
	beq	AllocFX.
	move.l	d0,a0
	move.l	#(SFX_IntControl&~$80000000),(a0)+	; fxh_Type
	move.l	d2,(a0)+		; fxh_Num
	move.l	d3,(a0)+		; fxh_AllocSize
	addq.l	#8,a0			; point to the start of the elements
	move.l	a0,-8(a0)		; fxh_First
d190 1
a190 1
	move.l	a0,(a2)+
d194 4
@


39.2
log
@ScrollLines allocation
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.1 93/03/17 12:05:07 spence Exp Locker: spence $
d61 2
d136 24
@


39.1
log
@Modified for new fxh_UCopList
@
text
@d3 1
a3 1
*	$Id: AllocFX.asm,v 39.0 93/03/12 19:12:44 spence Exp Locker: spence $
d11 1
d52 1
a52 1
	movem.l	d2/d3/a2/a5/a6,-(sp)
d59 2
d64 1
a64 1
	movem.l	(sp)+,d2/d3/a2/a5/a6
d80 1
a80 1
	move.l	#(SFX_ColorRange&~$80000000),(a0)+	; corh_Type
d92 42
@


39.0
log
@Initial Login
@
text
@d3 1
a3 1
*	$Id: animcontrol.asm,v 40.1 93/03/03 17:11:47 spence Exp Locker: spence $
d80 2
a81 2
	addq.l	#4,a0			; point to the start of the elements
	move.l	a0,-4(a0)		; fxh_First
@
