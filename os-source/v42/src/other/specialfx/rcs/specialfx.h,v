head     39.17;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


39.17
date     93.09.14.18.54.15;  author spence;  state Exp;
branches ;
next     39.16;

39.16
date     93.09.13.19.05.28;  author spence;  state Exp;
branches ;
next     39.15;

39.15
date     93.09.07.11.05.36;  author spence;  state Exp;
branches ;
next     39.14;

39.14
date     93.09.03.14.35.46;  author spence;  state Exp;
branches ;
next     39.13;

39.13
date     93.09.02.18.48.34;  author spence;  state Exp;
branches ;
next     39.12;

39.12
date     93.09.02.18.22.31;  author spence;  state Exp;
branches ;
next     39.11;

39.11
date     93.08.11.15.04.26;  author spence;  state Exp;
branches ;
next     39.10;

39.10
date     93.08.10.11.11.08;  author spence;  state Exp;
branches ;
next     39.9;

39.9
date     93.08.06.16.19.42;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     93.08.05.18.39.29;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     93.07.19.14.59.15;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     93.07.16.16.59.08;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     93.07.09.12.16.47;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     93.07.02.17.24.02;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     93.07.01.11.34.33;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     93.06.30.13.40.50;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     93.04.23.18.04.21;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     93.03.12.19.16.32;  author spence;  state Exp;
branches ;
next     ;


desc
@Special FX header
@


39.17
log
@SFX_ERR_Animating and SFX_ERR_NotSupported
@
text
@#ifndef LIBRARIES_SPECIALFX_H
#define LIBRARIES_SPECIALFX_H
/*
**	$Id: specialfx.h,v 39.16 93/09/13 19:05:28 spence Exp Locker: spence $
**
**	Special Effects header file
**
**	(C) Copyright 1993 Commodore-Amiga, Inc.
**	    All Rights Reserved
*/

    #ifndef EXEC_TYPES_H
    #include <exec/types.h>
    #endif

    #ifndef GRAPHICS_VIEW_H
    #include <graphics/view.h>
    #endif


/* Tags for InstallFXA() */
#define SFX_InstallEffect 0x80001000	/* ti_Data points to an FXHandle
					 * obtained from AllocFX().
					 */
#define SFX_InstallErrorCode 0x80001001	/* ti_Data is a pointer to a ULONG
					 * which will be filled with an error
					 * code from InstallFXA().
					 */
#define SFX_DoubleBuffer 0x80001002	/* ti_Data is TRUE to enable
					 * copperlist double buffering.
					 * default == FALSE.
					 */

/* Tags for the various SpecialFX features. (V40) */

#define SFX_ColorControl 0x80000001	/* ti_Data points to a
					 * struct ColorControl.
					 */
#define SFX_LineControl	0x80000002	/* ti_Data points to a
					 * struct LineControl.
					 */
#define SFX_IntControl 0x80000003	/* ti_Data points to a
					 * struct InterruptControl.
					 */
#define SFX_FineVideoControl 0x80000004	/* ti_Data points to a
					 * struct FineVideoControl.
					 */
#define SFX_SpriteControl 0x80000005	/* ti_Data points to a
					 * struct SpriteControl.
					 */


/* ColorControl - fill this structure for SFX_ColorControl, to modify the
 * RGB value of any pen at any line in the ViewPort.
 */

struct ColorControl
{
    LONG cc_Pen;		/* Pen number to change */
    WORD cc_Horizontal;		/* X Wait position - ignored for V40 */
    WORD cc_Line;		/* Y Wait position */
    ULONG cc_Red;		/* 32 bit red value */
    ULONG cc_Green;		/* 32 bit green value */
    ULONG cc_Blue;		/* 32 bit blue value */
    UWORD cc_Flags;
    UWORD cc_Pad;
};

#define CCB_MODIFY 0		/* When used with AnimateFXA(), this colour
				 * entry is modified to the RGB value.
				 */
#define CCF_MODIFY (1 << CCB_MODIFY)
#define CCB_RESTORE 1		/* if set, then restore the pen number to its
				 * original value. This needs to be set only
				 * once for the pen number, and is used by
				 * InstallFXA()
				 */
#define CCF_RESTORE (1 << CCB_RESTORE)


/* LineControl - fill this structure for the SFX_LineControl, to scroll
 * individual, or groups of lines in a ViewPort independantly from the rest, and
 * to show parts of the offscreen bitmap in different parts of the ViewPort.
 */

struct LineControl
{
    struct RasInfo *lc_RasInfo;	/* Pointer to an initialised RasInfo structure.
    				 * Set the RxOffset for the scroll value (+ve
    				 * is to the left, -ve to the right) of this area,
    				 * and the RyOffset to the line number in the
    				 * ViewPort's BitMap to start the effect with.
    				 *
    				 * If lc_RasInfo->Next is not NULL, then
    				 * lc_RasInfo will control the even bitplanes, and
    				 * lc_RasInfo->Next the odd bitplanes.
    				 *
    				 * Note that the RasInfo->BitMap->Planes are ignored.
    				 * All operations are on the ViewPort's RasInfo(s)
    				 * BitMap(s) Plane(s).
    				 *
    				 */
    UWORD lc_Line;		/* Start the effect at this line */
    UWORD lc_Count;		/* Effect is over this many lines */
    UWORD lc_Flags;		/* See below */
    WORD lc_SkipRateEven;	/* Number of lines to skip after displaying */
    WORD lc_SkipRateOdd;	/* a line. Default = 1.*/ 
    UWORD lc_Pad;
};

/* A note about the lc_SkipRate... paramters.
 * The first line to be displayed at line lc_Line of the display is line
 * lc_RasInfo->RyOffset of the ViewPort->RasInfo->BitMap.
 * The next line to be displayed at line (lc_Line + 1) is
 * (lc_RasInfo->RyOffset + lc_SkipRateEven).
 * So, if lc_SkipRateEven =
 * 1, contiguous lines are displayed (this is the default).
 * 2, every other line is displayed.
 * 0, the first line is repeated, giving a 'flow' effect.
 * -1, the image is displayed upside down.
 */

#define LCB_MODIFY 0		/* Set for the changes to be made by
				 * AnimateFX().
				 */
#define LCF_MODIFY (1 << LCB_MODIFY)


/* InterruptControl - fill this structure for the SFX_IntControl to cause
 * interrupts at the specified line in a ViewPort.
 */

struct InterruptControl
{
    UWORD inc_Line;		/* Cause the interrupt at the start of this
    				 * line.
    				 */
    UWORD inc_Flags;		/* See below */
};

#define INCB_SET 0		/* When used with AnimateFXA(), the interrupt
				 * at this line is turned on.
				 */
#define INCF_SET (1 << INCB_SET)
#define INCB_RESET 1		/* When used with AnimateFXA(), the interrupt
				 * at this line is turned off.
				 */
#define INCF_RESET (1 << INCB_RESET)
/* NB - setting both INCF_SET and INCF_RESET is undefined. */


/* FineVideoControl - fill this structure for the SFX_FineVideoControl to
 * operate graphics.library's VideoControl() features on a line-by-line basis
 * rather than a ViewPort basis.
 */
struct FineVideoControl
{
    struct TagItem *fvc_TagList;
    				/* A pointer to a taglist of VideoControl()
    				 * tags. Only a subset of VC() tags will be
    				 * supported, listed below.
    				 */
    UWORD fvc_Line;		/* line number the VideoControl() should
				 * start on.
				 */
    WORD fvc_Count;		/* VideoControl() lasts for this many lines,
    				 * and then the previous settings are restored.
    				 * If == -1, then maintain this to the end of
    				 * the ViewPort.
    				 */
    UWORD fvc_Flags;		/* See below */
    UWORD fvc_Pad;
};

#define FVCB_MODIFY 0		/* When used with AnimateFXA(), the video
				 * features are replaced for this range of
				 * lines with the new features of the
				 * fvc_TagList.
				 */
#define FVCF_MODIFY (1 << FVCB_MODIFY)

/* Here is a list of VideoControl tags supported as of V40:
 *
 * VTAG_CHROMAKEY_CLR		
 * VTAG_CHROMAKEY_SET		
 * VTAG_BITPLANEKEY_CLR		
 * VTAG_BITPLANEKEY_SET		
 * VTAG_BORDERBLANK_CLR		
 * VTAG_BORDERBLANK_SET		
 * VTAG_BORDERNOTRANS_CLR		
 * VTAG_BORDERNOTRANS_SET		
 * VTAG_CHROMA_PEN_CLR		
 * VTAG_CHROMA_PEN_SET		
 * VTAG_CHROMA_PLANE_SET		
 * VTAG_PF1_BASE_SET		
 * VTAG_PF2_BASE_SET		
 * VTAG_SPEVEN_BASE_SET		
 * VTAG_SPODD_BASE_SET		
 * VTAG_BORDERSPRITE_SET		
 * VTAG_BORDERSPRITE_CLR		
 * VTAG_SPRITERESN_SET		
 * VTAG_PF1_TO_SPRITEPRI_SET	
 * VTAG_PF2_TO_SPRITEPRI_SET	
 *
 * Also, the following tags are recognised by SpecialFX.library, although they
 * are not recognised by graphics.library's VideoControl():
 *
 * VTAG_SFX_DEPTH_SET
 * VTAG_SFX_HAM_SET
 * VTAG_SFX_EHB_SET
 * VTAG_SFX_NORM_SET
 * VTAG_SFX_MAKEDPF
 * VTAG_SFX_PF1PRI
 * VTAG_SFX_PF2PRI
 */

#define VTAG_SFX_DEPTH_SET	0xc0000000	/* Set the depth of the
						 * display.
						 */
#define VTAG_SFX_HAM_SET	0xc0000001	/* enable HAM - only useful if
						 * the depth is 6 or 8 bitplanes
						 */
#define VTAG_SFX_EHB_SET	0xc0000002	/* enable EHB - only works if 
						 * the depth is 6 bitplanes.
						 */
#define VTAG_SFX_NORM_SET	0xc0000003	/* clear HAM, EHB and DPF bits. */
#define VTAG_SFX_DPF_SET	0xc0000004	/* enable DualPlayfield */
#define VTAG_SFX_PF1PRI		0xc0000005	/* give Playfield 1 priority
						 * (default)
						 */
#define VTAG_SFX_PF2PRI		0xc0000006	/* give Playfield 2 priority */


/* SpriteControl - fill this structure for the SFX_SpriteControl. This allows
 * you to move and change sprites in a certain range of lines of the 
 * ViewPort, and to reuse the same sprite in a different ViewPort range.
 */
struct SpriteControl
{
    struct ExtSprite *spc_ExtSprite;
    				/* Pointer to an initialised
				 * ExtSprite structure. The
				 * sc_ExtSprite.es_SimpleSprite
				 * structure should be initialised as
				 * normal for the graphics.library
				 * sprite functions.
				 */
    struct TagItem *spc_TagList;
				/* Pointer to a TagList of ChangeExtSpriteA()
				 * tags. As of V40, ChangeExtSpriteA() has no
				 * tags defined, so this should be NULL. There
				 * is no guarantee that SpriteControl will
				 * support all or any of the future
				 * ChangeExtSpriteA() tags.
				 */
    UWORD spc_Line;		/* First line of the range in which the
				 * sprite is to be used.
				 */
    UWORD spc_Flags;		/* See below */
};

#define SPCB_MODIFY 0		/* When used with AnimateFX(), replace
				 * the sprite image with that in
				 * sc_ExtSprite.
				 */
#define SPCF_MODIFY (1 << SPCB_MODIFY)

/********************************************************************************/

#define SFX_ERR_NoMem 1		/* Not enough memory to complete the operation. */
#define SFX_ERR_MakeVP 2	/* MakeVPort failed */
#define SFX_ERR_Animating 3	/* Another application is already animating */
#define SFX_ERR_NotSupported 4	/* One of the effects in the TagList is not
				 * supported by this ViewPort.
				 */ 


#define SPECIALFXNAME	"specialfx.library"

#endif /* LIBRARIES_SPECIALFX_H */
@


39.16
log
@Added SFX_DoubleBuffer.
Replaced InterruptControl INCB_TOGGLE with INCB_SET and INCB_RESET.
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.15 93/09/07 11:05:36 spence Exp Locker: spence $
d270 1
a270 1
#define SFX_ERR_NoMem 1		/* not enough memory to complete the operation. */
d272 4
@


39.15
log
@Documentation correction.
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.14 93/09/03 14:35:46 spence Exp Locker: spence $
d29 4
d141 6
a146 2
#define INCB_TOGGLE 0		/* When used with AnimateFXA(), the interrupt
				 * bit of this line is toggled on/off.
d148 2
a149 1
#define INCF_TOGGLE (1 << ICB_TOGGLE)
d248 2
a249 1
    struct TagItem *spc_TagList;	/* Pointer to a TagList of ChangeExtSpriteA()
d266 1
a266 1
#define SPCF_MODIFY (1 << SCB_MODIFY)
@


39.14
log
@Replaced LCF_REPEATLINE_... with lc_SkipRateEven/Odd,
to control rate of line repetition or squashing.
Can set this to -ve to turn an image upside down.
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.13 93/09/02 18:48:34 spence Exp Locker: spence $
d109 1
a109 1
 * lc_RasInfo->RxOffset of the ViewPort->RasInfo->BitMap.
d111 1
a111 1
 * (lc_RasInfo->RxOffset + lc_SkipRateEven).
d123 1
@


39.13
log
@ic_ -> inc_ to avoid conflict with struct IControlPrefs.
sc_ -> scp_ to avoid conflict with struct Screen
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.12 93/09/02 18:22:31 spence Exp Locker: spence $
d102 2
d107 12
a122 11
#define LCB_REPEATLINE_EVEN 1	/* Set to repeat line number
				 * lc_RasInfo->RyOffset of the bitmap
				 * from lc_Line in the ViewPort over lc_Count
				 * lines.
				 */
#define LCF_REPEATLINE_EVEN (1 << LCB_REPEATLINE_EVEN)
#define LCB_REPEATLINE_ODD 2	/* As LCB_REPEATLINE_EVEN, but for odd planes
				 * (if lc_RasInfo->Next is not NULL).
				 */
#define LCF_REPEATLINE_ODD (1 << LCB_REPEATLINE_ODD)

@


39.12
log
@VTAG_SFX_MAKEDPF -> VTAG_SFX_DPF_SET
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.11 93/08/11 15:04:26 spence Exp Locker: spence $
d127 1
a127 1
    UWORD ic_Line;		/* Cause the interrupt at the start of this
d130 1
a130 1
    UWORD ic_Flags;		/* See below */
d133 1
a133 1
#define ICB_TOGGLE 0		/* When used with AnimateFXA(), the interrupt
d136 1
a136 1
#define ICF_TOGGLE (1 << ICB_TOGGLE)
d227 1
a227 1
    struct ExtSprite *sc_ExtSprite;
d235 1
a235 1
    struct TagItem *sc_TagList;	/* Pointer to a TagList of ChangeExtSpriteA()
d242 1
a242 1
    UWORD sc_Line;		/* First line of the range in which the
d245 1
a245 1
    UWORD sc_Flags;		/* See below */
d248 1
a248 1
#define SCB_MODIFY 0		/* When used with AnimateFX(), replace
d252 1
a252 1
#define SCF_MODIFY (1 << SCB_MODIFY)
@


39.11
log
@SPECIALFX_SPECIALFX_H -> LIBRARIES_SPECIALFX_H
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.10 93/08/10 11:11:08 spence Exp Locker: spence $
d213 2
a214 2
#define VTAG_SFX_NORM_SET	0xc0000003	/* clear HAM and EHB bits. */
#define VTAG_SFX_MAKEDPF	0xc0000004	/* enable DualPlayfield */
@


39.10
log
@Added libbase name definition
@
text
@d1 2
a2 2
#ifndef SPECIALFX_SPECIALFX_H
#define SPECIALFX_SPECIALFX_H
d4 1
a4 1
**	$Id: specialfx.h,v 39.9 93/08/06 16:19:42 spence Exp Locker: spence $
d262 1
a262 1
#endif /* SPECIALFX_SPECIALFX_H */
@


39.9
log
@VTAG_SFX_MAKEDPF/PF1PRI/PF2PRI
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.8 93/08/05 18:39:29 spence Exp Locker: spence $
d258 3
@


39.8
log
@LineControl stuff
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.7 93/07/19 14:59:15 spence Exp Locker: spence $
d198 4
a201 1
 * VTAG_NORM_SET
d214 5
@


39.7
log
@comment changes for ColorControl
@
text
@d4 1
a4 1
**	$Id: specialfx.h,v 39.6 93/07/16 16:59:08 spence Exp Locker: spence $
d12 3
a14 3
#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
d16 3
d20 1
d35 2
a36 2
#define SFX_ScrollLines	0x80000002	/* ti_Data points to a
					 * struct ScrollLines.
d77 3
a79 2
/* ScrollLines - fill this structure for the SFX_ScrollLines, to scroll
 * individual, or groups of lines in a screen independantly from the rest.
d82 1
a82 1
struct ScrollLines
d84 14
a97 6
    UWORD sl_YCount;		/* Number of lines to scroll */
    UWORD sl_YOffset;		/* First line in this ViewPort to start
				 * scrolling.
				 */
    WORD sl_XOffset;		/* Value by which to scroll the lines. +ve is to
    				 * the left, -ve to the right.
d99 4
a102 1
    UWORD sl_Flags;		/* None defined yet. */
d105 15
d122 1
a122 1
 * interrupts at the specified line in a screen.
d134 1
a134 1
				 * bit of this line are toggled on/off
d139 1
a139 1
/* FindVideoControl - fill this structure for the SFX_FineVideoControl to
@


39.6
log
@SpriteControl structures
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.5 93/07/09 12:16:47 spence Exp Locker: spence $
d45 2
a46 38
/* ColorControl - fill this structure for SFX_ColorControl.
 * When SFX_ColorControl is used with AllocFX(), the returned FXHandle is a
 * pointer to the first element of an array of pointers to struct ColorControls.
 *
 * Example:
 * struct ColorControl *cr;
 * struct ColorControl MyRange[] =
 * {
 *	{1, 0, 10, -1, 0, 0, 0},
 *	{2, 0, 10, 0, -1, 0, 0},
 *	{1, 0, 11, 0x88888888, 0, 0, CORF_RESTORE},
 *	{2, 0, 11, 0, 0x88888888, 0, 0},
 * };
 * ULONG error;
 * APTR ColorHandle = AllocFX(vp, SFX_ColorControl, NUM_COLORS, &error);
 * if (ColorHandle)
 * {
 *	cr = ColorHandle;
 *	for (i = 0; i < NUM_COLOURS; i++)
 *	{
 *		*(cr[i]) = MyRange[i];
 *	}
 * }
 *
 * When the ColorHandle is used with InstallFX(), pass 
 * {SFX_InstallEffect, (ULONG)ColorHandle} in the taglist.
 *
 * Example:
 * APTR DisplayHandle;
 * DisplayHandle = InstallFX(View, ViewPort, SFX_InstallEffect, ColorHandle,
 *                                           TAG_DONE);
 *
 * This would change pen 1 on line 10 to red, pen 2 on line 10 to green,
 * pen 1 on line 11 to dark red, pen 2 on line 11 to dark green. At line 12,
 * pen 1 is restored to its original value.
 *
 * You could then modify each ColorControl in the list, and call AnimateFX()
 * to change them on screen.
d52 1
a52 1
    WORD cc_Horizontal;			/* X Wait position - ignored for V40 */
@


39.5
log
@FineVideoControl stuff
,
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.4 93/07/02 17:24:02 spence Exp Locker: spence $
d40 3
d217 33
@


39.4
log
@SFX_InstallEffect and SFX_InstallErrorCode defined
ColorRange -> ColorControl
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.3 93/07/01 11:34:33 spence Exp Locker: spence $
d37 3
d105 1
d122 1
d139 77
@


39.3
log
@ICB_MODIFY -> ICB_TOGGLE
removed ic_IntBits - now only uses Copper interrupts.
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.2 93/06/30 13:40:50 spence Exp Locker: spence $
d17 9
d28 2
a29 2
#define SFX_ColorRange 	0x80000001	/* ti_Data points to a
					 * struct ColorRange.
d39 3
a41 5
/* ColorRange - fill this structure for SFX_ColorRange.
 * When SFX_ColourRange is used with AllocFX():
 * Pass in ti_Data a pointer to an array of pointers to ColorRange structures.
 * This array can be used to change a number of pens on a line. Each line can
 * have an array of pens to change.
d44 2
a45 2
 * struct ColorRange *cr[NUM_COLORS];
 * struct ColorRange MyRange[] =
d52 2
a53 1
 * APTR ColorHandle = AllocFX(SFX_ColorRange, NUM_COLORS, (ULONG *)cr);
d56 1
d63 2
a64 2
 * When SFX_ColourRange is used with DisplayFX():
 * Pass in ti_Data the handle obtained from AllocFX().
d67 2
a68 2
 * APTR DisplayHandle = NULL;
 * DisplayFX(View, ViewPort, &DisplayHandle, SFX_ColorRange, ColorHandle,
d75 1
a75 1
 * You could then modify each ColorRange in the list, and call AnimateFX()
d79 1
a79 1
struct ColorRange
d81 8
a88 7
    LONG cor_Pen;		/* Pen number to change */
    WORD cor_X;			/* X Wait position - ignored for V40 */
    WORD cor_Line;		/* Y Wait position */
    ULONG cor_Red;		/* 32 bit red value */
    ULONG cor_Green;		/* 32 bit green value */
    ULONG cor_Blue;		/* 32 bit blue value */
    ULONG cor_Flags;
d91 1
a91 1
#define CORB_MODIFY 0		/* When used with AnimateFXA(), this colour
d94 2
a95 2
#define CORF_MODIFY (1 << CORB_MODIFY)
#define CORB_RESTORE 1		/* if set, then restore the pen number to its
d98 1
a98 1
				 * DisplayFXA()
d100 1
a100 1
#define CORF_RESTORE (1 << CORB_RESTORE)
@


39.2
log
@InterruptControl structure.
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.1 93/04/23 18:04:21 spence Exp Locker: spence $
d117 1
a117 4
    UWORD ic_IntBits;		/* Interrupt(s) to cause, as defined in
    				 * <hardware/intbits.h>.
    				 */
    ULONG ic_Flags;		/* See below */
d120 2
a121 2
#define ICB_MODIFY 0		/* When used with AnimateFXA(), the interrupt
				 * bits of this line are modified to ic_IntBits
d123 1
a123 1
#define ICF_MODIFY (1 << ICB_MODIFY)
@


39.1
log
@ScrollLines struct
@
text
@d4 1
a4 1
**	$Id: SpecialFX.h,v 39.0 93/03/12 19:16:32 spence Exp Locker: spence $
d25 2
a26 2
#define SFX_RepeatLines	0x80000003	/* ti_Data points to a
					 * struct RepeatLines.
a29 1

d73 2
a74 2
    WORD cor_WAIT_X;		/* X Wait position - ignored for V40 */
    WORD cor_WAIT_Y;		/* Y Wait position */
d105 16
a120 1
    UWORD sl_Flags;		/* see below */
d122 5
@


39.0
log
@Just ColorRange stuff
@
text
@d4 1
a4 1
**	$Id: animate.h,v 40.0 93/03/03 17:18:00 spence Exp Locker: spence $
d32 4
a35 4
 * Pass in ti_Data a pointer to an array of ColorRange structures. This array
 * can be used to change a number of pens on a line. Each line can
 * have an array of pens to change. The array is terminated when the cor_Pen at
 * the start of the line == -1
d38 2
a39 1
 * struct ColorRange cr[] =
d41 4
a44 3
 *	{1, 0, 10, -1, 0, 0, NULL}, {2, 0, 0, 0, -1, 0, NULL},
 *	{1, 0, 11, 0x88888888, 0, 0, CORF_RESTORE, NULL}, {2, 0, 0, 0, 0x88888888, 0, 0, NULL},
 *      {-1, NULL},
d46 17
d64 5
a68 2
 * pen 1 on line 11 to dark red, pen 2 on line 11 to dark green. At line 12, pen 1
 * is restored to its original value.
a79 1
    UBYTE cor_Private[36];	/* private, but will be modified */
d93 15
@
