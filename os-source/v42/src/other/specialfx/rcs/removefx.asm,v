head     39.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


39.9
date     93.09.21.16.48.45;  author spence;  state Exp;
branches ;
next     39.8;

39.8
date     93.09.14.18.55.14;  author spence;  state Exp;
branches ;
next     39.7;

39.7
date     93.09.13.19.08.57;  author spence;  state Exp;
branches ;
next     39.6;

39.6
date     93.08.09.11.35.48;  author spence;  state Exp;
branches ;
next     39.5;

39.5
date     93.07.19.11.46.55;  author spence;  state Exp;
branches ;
next     39.4;

39.4
date     93.07.09.12.13.19;  author spence;  state Exp;
branches ;
next     39.3;

39.3
date     93.07.06.18.34.22;  author spence;  state Exp;
branches ;
next     39.2;

39.2
date     93.06.30.13.43.17;  author spence;  state Exp;
branches ;
next     39.1;

39.1
date     93.03.17.12.05.57;  author spence;  state Exp;
branches ;
next     39.0;

39.0
date     93.03.12.19.15.14;  author spence;  state Exp;
branches ;
next     ;


desc
@Removes an effect from the UCopList list, and frees the associated RAM
@


39.9
log
@Could have FreeMem()ed the duped copperlist
whilst it was in view. Now, restore the View's
copperlist in GfxBase and call WaitTOF() twice
to ensure the duplicated copperlist are no longer
being executed.
@
text
@********************************************************************************
*
*	$Id: RemoveFX.asm,v 39.8 93/09/14 18:55:14 spence Exp Locker: spence $
*
********************************************************************************

	section	code

	include	'exec/types.i'
	include	'exec/memory.i'
	include	'exec/ables.i'
	include 'graphics/copper.i'
	include	'graphics/view.i'
	include	'graphics/gfxbase.i'

	include	"SpecialFXBase.i"
	include	"SpecialFX_internal.i"

	xdef	_LVORemoveFX
	xref	_LVOFreeCopList
	xref	_LVOWaitTOF
	xref	_LVOObtainSemaphore
	xref	_LVOReleaseSemaphore
	xref	_LVOFreeMem
	xref	_intena

******* specialfx.library/RemoveFX *********************************************
*
*   NAME
*	RemoveFX -- Removes a 'Special Effect', and frees the memory.
*
*   SYNOPSIS
*	RemoveFX(Handle)
*	         a0
*
*	void RemoveFX(APTR);
*
*   FUNCTION
*	To remove the 'Special Effect' group, set up in InstallFXA().
*
*   INPUTS
*	Handle - the handle obtained from InstallFXA()
*
*   RESULT
*
*   NOTES
*	After calling RemoveFX(), you should remake the display, either
*	with intuition's MakeScreen()/RethinkDisplay() if using intuition
*	screens, or with graphics' MakeVPort()/MrgCop()/LoadView() if using
*	a custom View and ViewPort.
*
*	After calling this function, the Handle is no longer valid. If you want
*	to redisplay the effect, get a new handle from InstallFXA().
*	
*   SEE ALSO
*	InstallFXA()
*
********************************************************************************

_LVORemoveFX:
	movem.l	d2-d4/d7/a2-a6,-(sp)
	move.l	a0,d0
	beq	RemoveFX.
	move.l	a0,a2
	move.l	a6,d4
	; first, remove the UCopList from the ViewPort, safely!
	move.l	sfxb_GfxBase(a6),a4
	move.l	gb_ActiViewCprSemaphore(a4),a0
	move.l	sfxb_ExecBase(a6),a6
	jsr	_LVOObtainSemaphore(a6)
	move.l	ah_ViewPort(a2),a0
	move.l	ah_HandleCount(a2),d7
	move.l	a2,d3
	lea	AnimHandle_SIZEOF(a2),a2
	bra.s	remove_loop.
remove_loop:
	sub.l	a3,a3
	move.l	(a2)+,a5		; next FXHandle
	move.l	fxh_UCopList(a5),d0	; look for this UCopList
	move.l	vp_UCopIns(a0),a1
1$:
	cmp.l	a1,d0	
	beq.s	remove_ucl
	move.l	a1,a3			; a3 will be the previous copperlist
	move.l	ucl_Next(a1),a1
	bra.s	1$
remove_ucl:
	; a1 -> this UCL
	; a3 -> previous UCL
	move.l	a3,d0
	beq.s	no_back_link
	move.l	ucl_Next(a1),ucl_Next(a3)
	bra.s	removed
no_back_link:
	move.l	ucl_Next(a1),vp_UCopIns(a0)
removed:
	; free the CopLists
	move.l	a0,-(sp)
	move.l	a1,a3
	move.l	ucl_FirstCopList(a3),a0
	exg	a4,a6
	jsr	_LVOFreeCopList(a6)
	; and free the UCopList
	exg	a4,a6
	move.l	a3,a1
	moveq	#ucl_SIZEOF,d0
	jsr	_LVOFreeMem(a6)
	move.l	(sp)+,a0

	; Check for external calls
	movem.l	a0/a6,-(sp)
	move.l	d4,a6
	move.l	fxh_Type(a5),d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	sfxb_RemoveVectors(a6),a1
	move.l	-4(a1,d0),d0
	beq.s	1$
	move.l	d0,a1
	jsr	(a1)
1$:
	movem.l	(sp)+,a0/a6

remove_loop.:
	dbra.s	d7,remove_loop

	move.l	gb_ActiViewCprSemaphore(a4),a0
	jsr	_LVOReleaseSemaphore(a6)

	; remove the handle from the AHList.
	; d3 -> AnimHandle
	; d4 -> SfxBase
	; a4 -> GfxBase
	; a6 -> ExecBase
	; First, get the Semaphore
	move.l	d4,a5
	move.l	sfxb_AHListSemaphore(a5),a0
	jsr	_LVOObtainSemaphore(a6)

	; look through the list for this AnimHandle, and remove it.
	lea	sfxb_AHList(a5),a0
search_ahlist_r:
	move.w	ahl_Count(a0),d0
	subq.w	#1,d0
	lea	ahl_AnimHandles(a0),a1
11$:
	cmp.l	(a1)+,d3	; is this the AnimHandle?
	beq.s	10$
	dbra.s	d0,11$
	; wasn't in that list, so check the next list.
	move.l	MLN_SUCC(a0),a0	; no need to error check, as we
				; know it's in here somewhere
	bra.s	search_ahlist_r

10$:
	clr.l	-4(a1)
	sub.w	#1,ahl_Count(a0)

	move.l	sfxb_AHListSemaphore(a5),a0
	jsr	_LVOReleaseSemaphore(a6)

	; Free the copper cache
	; We need to ensure that we are not Freeing the copperlists as they
	; are being viewed!
	DISABLE
	move.l	d3,a0			; Get the View
	move.l	ah_View(a0),a0
	move.l	v_LOFCprList(a0),d0
	beq.s	1$
	move.l	d0,a1
	move.l	crl_start(a1),gb_LOFlist(a4)
1$:
	btst.b	#2,gb_Modes+1(a4)	; are we laced?
	beq.s	2$
	move.l	v_SHFCprList(a0),d0
	beq.s	2$
	move.l	d0,a1
	move.l	crl_start(a1),gb_SHFlist(a4)
2$:
	ENABLE
	exg	a4,a6			; exchg GfxBase<->ExecBase
	jsr	_LVOWaitTOF(a6)		; make sure the original copperlists
					; are being used.
	jsr	_LVOWaitTOF(a6)
	exg	a4,a6

	move.l	d3,a4
	move.l	ah_Copper2L(a4),d0
	beq.s	no_cop2L_free
	move.l	d0,a1
	move.l	ah_Copper2LSize(a4),d0
	beq.s	no_cop2L_free
	jsr	_LVOFreeMem(a6)
no_cop2L_free:
	move.l	ah_Copper2S(a4),d0
	beq.s	no_cop2S_free
	move.l	d0,a1
	move.l	ah_Copper2SSize(a4),d0
	beq.s	no_cop2S_free
	jsr	_LVOFreeMem(a6)
no_cop2S_free:

	; and free the handle
	move.l	d3,a1
	move.l	ah_HandleSize(a1),d0
	jsr	_LVOFreeMem(a6)

	; Unlock the AnimationSemaphore.
	move.l	sfxb_AnimationSemaphore(a5),a0
	jsr	_LVOReleaseSemaphore(a6)

RemoveFX.
	movem.l	(sp)+,d2-d4/d7/a2-a6
	rts
@


39.8
log
@Releases the AnimationSemaphore
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.7 93/09/13 19:08:57 spence Exp Locker: spence $
d11 1
d21 1
d25 1
d163 24
@


39.7
log
@Frees the copy of the copper list.
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.6 93/08/09 11:35:48 spence Exp Locker: spence $
d160 2
a161 2
	move.l	d3,a5
	move.l	ah_Copper2L(a5),d0
d164 1
a164 1
	move.l	ah_Copper2LSize(a5),d0
d168 1
a168 1
	move.l	ah_Copper2S(a5),d0
d171 1
a171 1
	move.l	ah_Copper2SSize(a5),d0
d180 4
@


39.6
log
@Save a0 on stack before calling the Remove vector.
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.5 93/07/19 11:46:55 spence Exp Locker: spence $
d126 49
@


39.5
log
@Autodoc cleanup
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.4 93/07/09 12:13:19 spence Exp Locker: spence $
d108 1
a108 1
	move.l	a6,-(sp)
d119 1
a119 1
	move.l	(sp)+,a6
@


39.4
log
@was not resetting a3 in the main remove loop properly
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.3 93/07/06 18:34:22 spence Exp Locker: spence $
d24 1
a24 1
******* SpecialFX.library/RemoveFX *********************************************
@


39.3
log
@Calls the vectors through the table off SpecialFXBase
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.2 93/06/30 13:43:17 spence Exp Locker: spence $
a67 1
	sub.l	a3,a3
d74 1
@


39.2
log
@Calls external Remove code depending on the FX type.
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.1 93/03/17 12:05:57 spence Exp Locker: spence $
a22 1
	xref	RemoveIntControl
d36 1
a36 1
*	To remove the 'Special Effect' group, set up in DisplayFXA().
d39 1
a39 1
*	Handle - the handle obtained from DisplayFXA()
d50 1
a50 1
*	to redisplay the effect, get a new handle from DisplayFXA().
d53 1
a53 1
*	DisplayFXA()
a56 14
* Table of pointers to functions related to each SpecialFX type. NULL shows
* that no special Remove code is needed.
*
* Each function takes:
* a0 -> ViewPort
* a5 -> FXHandle
* a6 -> SpecialFXBase

RemoveTable:
	dc.l	0		; Colours
	dc.l	0		; LineControl
	dc.l	RemoveIntControl


d108 2
d113 1
a113 1
	lea	RemoveTable(pc),a1
d115 1
a115 1
	beq.s	remove_loop.
a116 2
	move.l	a6,-(sp)
	move.l	d4,a6
d118 1
@


39.1
log
@UCopLists now in each FXHandle, rather than one big UCopList in the AnimHandle.
@
text
@d3 1
a3 1
*	$Id: RemoveFX.asm,v 39.0 93/03/12 19:15:14 spence Exp Locker: spence $
d23 1
d28 1
a28 1
*	RemoveFX -- Removes an 'Special Effect', and frees the memory.
d58 14
d73 1
a73 1
	movem.l	d2-d3/d7/a2-a6,-(sp)
d75 1
a75 1
	beq.s	RemoveFX.
d77 1
d121 14
d147 1
a147 1
	movem.l	(sp)+,d2-d3/d7/a2-a6
@


39.0
log
@Initial log in
@
text
@d3 1
a3 1
*	$Id: animcontrol.asm,v 40.1 93/03/03 17:11:47 spence Exp Locker: spence $
d36 1
a36 1
*	To remove the 'Special Effect'.
d39 1
a39 1
*	Handle - the handle obtained from DisplayFX()
d48 3
d53 1
a53 1
*	DisplayFX()
d58 1
a58 1
	movem.l	d2/a2-a6,-(sp)
d69 7
a75 1
	move.l	ah_UCopList(a2),d0	; the coplist we are looking for
d78 1
a78 1
	cmp.l	a1,d0
d93 2
a95 4
	move.l	gb_ActiViewCprSemaphore(a4),a0
	jsr	_LVOReleaseSemaphore(a6)

	; free the CopLists
d104 7
d112 2
a113 2
	move.l	a2,a1
	move.l	ah_HandleSize(a2),d0
d117 1
a117 1
	movem.l	(sp)+,d2/a2-a6
@
