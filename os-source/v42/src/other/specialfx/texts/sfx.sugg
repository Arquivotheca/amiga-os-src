From cbmvax!vertex Wed Jun 30 13:51:41 EDT 1993
Newsgroups: softeng.discussion
Path: cbmvax!vertex
>From: vertex@cbmvax.cbm.commodore.com (Martin Taillefer -- Software)
Subject: Re: SpecialFX.library
Message-ID: <C9EACM.F4H@cbmvax.cbm.commodore.com>
Reply-To: vertex@cbmvax.cbm.commodore.com (Martin Taillefer -- Software)
Organization: Commodore, West Chester, PA
References: <C91GMx.5zx@cbmvax.cbm.commodore.com>
Date: Tue, 29 Jun 1993 18:07:33 GMT

>SpecialFX.library/DisplayFXA

This function should be called something different, like InstallFX() for
example. As is, Display/Remove aren't a logical pair.


>   SYNOPSIS
>	handle = AllocFX(Type, Number, Array)

This calling sequence is rather odd. Would it not be possible to have the
function allocated the pointer array itself, and maybe return that as a
handle pointer? What you can do internally is allocate any private data
you need prior to the array of pointers in memory.


>   SYNOPSIS
>	ULONG DisplayFX(struct View *, struct ViewPort *, APTR *, ULONG, ...);

Why does this take an APTR * for the display handle instead of just an APTR?
-- 
------------------------
Martin Taillefer
Internet: vertex@cbmvax.cbm.commodore.com   BIX: vertex


From cbmvax!spence Wed Jun 30 13:51:50 EDT 1993
Newsgroups: softeng.discussion
Path: cbmvax!spence
>From: spence@cbmvax.cbm.commodore.com (Spencer Shanson)
Subject: Re: SpecialFX.library
Message-ID: <C9EDA7.GuA@cbmvax.cbm.commodore.com>
Organization: Commodore Business Machines
Date: Tue, 29 Jun 1993 19:10:54 GMT

In article <C9EACM.F4H@cbmvax.cbm.commodore.com> vertex@cbmvax.cbm.commodore.com (Martin Taillefer -- Software) writes:
>>SpecialFX.library/DisplayFXA
>
>This function should be called something different, like InstallFX() for
>example. As is, Display/Remove aren't a logical pair.

Agreed.

>
>
>>   SYNOPSIS
>>	handle = AllocFX(Type, Number, Array)
>
>This calling sequence is rather odd. Would it not be possible to have the
>function allocated the pointer array itself, and maybe return that as a
>handle pointer? What you can do internally is allocate any private data
>you need prior to the array of pointers in memory.

Yes, but I prefer this way. Here, the "handle" is totally mine, and the
application need do nothing with it except pass it to the various functions. The
array belongs to the application, and the application can read it. I have
separated the absolutely internal details (the handle) from the apps-modifiable
part, the array of pointers to public structures.

>
>
>>   SYNOPSIS
>>	ULONG DisplayFX(struct View *, struct ViewPort *, APTR *, ULONG, ...);
>
>Why does this take an APTR * for the display handle instead of just an APTR?

Because I am going to install another handle into that pointer, which will be
used by AnimateFX(). So there are two handle types - the FX handle, which is a
handle for each individual FX type, and the Display handle, which is used to
animate a group of effects.

Look at the example code:

ColourHandle = AllocFX(SFX_ColorRange, NUM_COLOURS, (ULONG *)Colours);
...
error = DisplayFX(GfxBase->ActiView, &s->ViewPort, &DisplayHandle,
		 SFX_ColorRange, ColourHandle,
		 TAG_DONE);
...
(Modify the colours)
AnimateFX(DisplayHandle);

I could also do something like
ColourHandle = AllocFX(SFX_ColorRange, NUM_COLOURS, (ULONG *)Colours);
LinesHandle = AllocFX(SFX_LineControl, FOOBAR, (ULONG *)Lines);
...
error = DisplayFX(GfxBase->ActiView, &s->ViewPort, &DisplayHandle,
		 SFX_ColorRange, ColourHandle,
		 SFX_LineControl, LinesHandle,
		 TAG_DONE);
...
(Modify the colours and line stuff)
AnimateFX(DisplayHandle);	/* Animate colours and lines together */


>-- 
>------------------------
>Martin Taillefer
>Internet: vertex@cbmvax.cbm.commodore.com   BIX: vertex


-- 
---------------------------------------------------------------------------
Spencer Shanson - Amiga Software Engineer     | email: spence@commodore.COM
                                              | 
All opinions expressed are my own, and do not | Bix: sshanson
(necessarily) represent those of Commodore.   | "Work is the scourge of
                                              | the drinking class"
                                              |  - Oscar Wilde


From cbmvax!vertex Wed Jun 30 13:51:55 EDT 1993
Newsgroups: softeng.discussion
Path: cbmvax!vertex
>From: vertex@cbmvax.cbm.commodore.com (Martin Taillefer -- Software)
Subject: Re: SpecialFX.library
Message-ID: <C9EJGn.Do4@cbmvax.cbm.commodore.com>
Reply-To: vertex@cbmvax.cbm.commodore.com (Martin Taillefer -- Software)
Organization: Commodore, West Chester, PA
References: <C9EDA7.GuA@cbmvax.cbm.commodore.com>
Date: Tue, 29 Jun 1993 21:24:21 GMT

In article <C9EDA7.GuA@cbmvax.cbm.commodore.com> spence@cbmvax.cbm.commodore.com (Spencer Shanson) writes:
>>
>>>   SYNOPSIS
>>>	handle = AllocFX(Type, Number, Array)
>>
>>This calling sequence is rather odd. Would it not be possible to have the
>>function allocated the pointer array itself, and maybe return that as a
>>handle pointer? What you can do internally is allocate any private data
>>you need prior to the array of pointers in memory.
>
>Yes, but I prefer this way. Here, the "handle" is totally mine, and the
>application need do nothing with it except pass it to the various functions. The
>array belongs to the application, and the application can read it. I have
>separated the absolutely internal details (the handle) from the apps-modifiable
>part, the array of pointers to public structures.

What I'd rather see is:

  handle = AllocGX(Type,Number)

"handle" would point to the sh_UserArray field of the following private
structure:

  struct SpenceHandle
  {
      ULONG sh_PrivateStuff0;
      ULONG sh_PrivateStuff1;

      APTR  sh_UserArray[Number];
  };

That is:

APTR *AllocFX(ULONG type, ULONG number)
{
struct SpenceHandle *sh;

    if (sh = AllocVec(sizeof(SpenceHandle)+4*number))
    {
        return(&sh->sh_UserArray);
    }
}

This makes the API simpler and easier to understand. You call AllocFX(),
and it returns an array of pointers to structures you can modify.


>Because I am going to install another handle into that pointer, which will be
>used by AnimateFX(). So there are two handle types - the FX handle, which is a
>handle for each individual FX type, and the Display handle, which is used to
>animate a group of effects.
>
>Look at the example code:
>
>ColourHandle = AllocFX(SFX_ColorRange, NUM_COLOURS, (ULONG *)Colours);
>...
>error = DisplayFX(GfxBase->ActiView, &s->ViewPort, &DisplayHandle,
>		 SFX_ColorRange, ColourHandle,
>		 TAG_DONE);

Wouldn't it be simpler to just return the display handle as the function
return? It would be consistent with the way other stuff works in the system.
For example, OpenScreen() returns NULL upon failure, and the SA_ErrorCode tag
can be provided if the application needs more info on the failure. You could
also have a SFX_ErrorCode tag for the same purpose.

So with what I'm suggesting:

void DoStuff(void)
{
struct ColorRange  **colorHandle;
struct LineControl **lineHandle;
APTR                 displayHandle;

    colorHandle = AllocFX(SFX_ColorRange, NUM_COLORS);
    lineHandle  = AllocFX(SFX_LineControl, NUM_LINES);

    /* init the various fields of colorHandle and lineHandle */
    colorHandle[1]->cor_Pen = 1;

    displayHandle = InstallFX(view,viewPort,SFX_ColorRange,  colorHandle,
                                            SFX_LineControl, lineHandle,
                                            TAG_DONE);

    AnimateFX(displayHandle);

    RemoveFX(displayHandle);

    FreeFX(colorHandle);
    FreeFX(lineHandle);
}
-- 
------------------------
Martin Taillefer
Internet: vertex@cbmvax.cbm.commodore.com   BIX: vertex


From cbmvax!peter Thu Jul  1 11:41:39 EDT 1993
Newsgroups: softeng.discussion
Path: cbmvax!peter
>From: peter@cbmvax.cbm.commodore.com (Peter Cherna)
Subject: Re: SpecialFX.library
Message-ID: <C9GAqD.MEy@cbmvax.cbm.commodore.com>
Reply-To: peter@cbmvax.cbm.commodore.com (Peter Cherna)
Organization: Commodore-Amiga, Inc.  West Chester, PA.
References: <C91GMx.5zx@cbmvax.cbm.commodore.com>
Date: Wed, 30 Jun 1993 20:11:00 GMT

I agree with Martin's nomenclature and structure encapsulation
suggestions.  It seems desirable to have the system do all the
allocation (and pre-clearing of flags) even of the
programmer-accessible part.  I also agree that InstallFX() should
return the handle, and that the error code be obtainable through a
different mechanism.  There are a number of solutions, of which
SFX_ErrorCode is just one (probably the best one).

How will the API handle future hardware that does not support
everything you intend to allow?  I gather that if a type of effect
(say SFX_ColorRange) is not supported by the chipset, you can just
have AllocFX() fail outright.  This leads to two observations:

1.  AllocFX() could use a secondary-error code to distinguish between
    "effect not-supported" or "no memory for effect".
2.  For RTG, AllocFX() needs to take some kind of target-display
    descriptor (a view/viewport, or mode id or something).

There probably needs to be a way to tell if you've "overloaded" the
system, and that not all your effects will work.  (Perhaps some
failure condition of InstallFX().)

Would any of the proposed features be missing or curtailed under AAA
(or AA+ to ask an interesting rhetorical question)?  Are there any
obvious additional features we'd add for AAA?

The effect-type is set at AllocFX() time.  It is incorrect and
redundant to have to redeclare it at InstallFX() time.  InstallFX()
should be either:

	APTR InstallFXA( struct View *, struct ViewPort *, APTR * )

	where the last parameter is a pointer to an array of
	AllocFX()-handles.   A varargs stub would allow you to say

	InstallFX( view, vp, colorHandle, lineHandle, NULL );

or else it could still use a tag list, but then only one tag would be
currently defined (SFX_Effect):

	InstallFX( view, vp,
		SFX_Effect, colorHandle,
		SFX_Effect, lineHandle,
		TAG_DONE );

The first solution is more direct.  The second benefits from the fact
that tag-based functions are more familiar than other varargs-type
functions (well, if you don't count printf()).  The other benefit of
#2 is you could add other tags in the future.

The proposed design deals in a pointer to an array of pointers to
structures.  It would be more memory- and code-efficient to have the
AllocFX() function return a pointer to an array of instances of
structures.  The downside is that if you needed to significantly
extend one of the structures (say for AAA), you'd have to supply a
replacement AllocFX tag instead (which is trivial).  It's worth
considering.

RemoveFX(NULL) and FreeFX(NULL) should be explicitly documented as
safe.

>There may be problems with scan doubling though, as all WAIT(Y)
>positions are doubled by MrgCop(), so how to specify whether the
>WAIT() was meant for line 2Y or (2Y+1)?

Clearly, WAIT(Y) should default to 2Y, so that in the normal case the
effect occurs for both identical lines.  You could define a universal
flag (perhaps bit 15 or 31) that means "round up the start line for
scan-doubled displays".  You'll also need some control then over the
effects that take a count parameter.

dw_XOffset needs to be signed for when DWF_XOFFSET_ABS is not set.

How do I scroll a group of 10 lines horizontally?  It seems to me that
I'd need 10 LineControl entries, since I have to provide something for
lc_YOffset0, which triggers line-repeats.  The request for scrolling
can be inferred by lc_XOffset0/1 != 0, but how do you tell whether you
want replication or not?

Inconsistent sign, size, and naming of some structure members:
- cor_Line is inconsistent with cor_X.  Could change all _Line members
  to _Y or change cor_X to cor_HorizPos or cor_Column.
- cor_Flags is a ULONG but the other flags fields are UWORD.
- Three structures are padded to long-word alignment but LineControl
  is not.
- All structures should be xxxControl, hence ColorControl,
  DisplayWindowControl, RepeatSpriteControl.
- cor_Line is signed, but other _Line's are unsigned.
- SFX_ColorRange is called SFX_ColourRange in one place.
- SFX_LineControl is called SFX_ScrollLines in one place.

     Peter
--
Peter Cherna, User Interface Development Group, Commodore-Amiga, Inc.
peter@cbmvax.commodore.com   ...!rutgers!cbmvax!peter  bix:pcherna
My opinions do not necessarily represent the opinions of my employer.
"We reserve the right to substitute an opinion of equal or greater value."


