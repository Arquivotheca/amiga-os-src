AddAnimOb	animation.c	/^void __asm AddAnimOb(register __a0 struct AnimOb */
AddBob	gel.c	/^void __asm AddBob(register __a0 struct Bob *b, reg/
AddVSprite	gel.c	/^void __asm AddVSprite(register __a0 struct VSprite/
Animate	animation.c	/^void __asm Animate(register __a0 struct AnimOb **a/
DoCollision	gel.c	/^void __asm DoCollision(register __a1 struct RastPo/
DrawGList	gel2.c	/^void __asm DrawGList(register __a1 struct RastPort/
FreeGBuffers	freegbuffers.c	/^void __asm FreeGBuffers(register __a0 struct AnimO/
GetGBuffers	animation.c	/^BOOL __asm GetGBuffers(register __a0 struct AnimOb/
InitGMasks	animation.c	/^void __asm InitGMasks(register __a0 struct AnimOb /
InitGels	gel.c	/^void __asm InitGels(register __a0 struct VSprite */
InitMasks	gel.c	/^void __asm InitMasks(register __a0 struct VSprite /
QBlissIt	gel3.c	/^QBlissIt(bo, io)$/
RemIBob	gel.c	/^void __asm RemIBob(register __a0 struct Bob *b,$/
RemVSprite	gel.c	/^void __asm RemVSprite(register __a0 struct VSprite/
SetCollision	gel.c	/^void __asm SetCollision(register __d0 int h,regist/
SortGList	gel.c	/^void __asm SortGList(register __a1 struct RastPort/
_RemIBob	gel.c	/^void __regargs _RemIBob(struct Bob *b, struct Rast/
allocblissobj	blisser.c	/^struct blissObj *allocblissobj(gi)$/
blisser	blisser.c	/^blisser(gi,src, dest, bm, s, mask, mint, type, bea/
blitsize	blisser.c	/^#define blitsize(h,w) ((h << HSIZEBITS) | (w >> 4)/
bndryHit	gel.c	/^int __regargs bndryHit(struct VSprite *s,struct Ge/
byebyeblissobjs	blisser.c	/^void byebyeblissobjs(gi)$/
checkColl	gel.c	/^BOOL __regargs checkColl(struct VSprite *a,struct /
clrBob	gel2.c	/^void __regargs clrBob(struct VSprite *s, struct Ra/
collType	gel.c	/^__regargs collType(struct VSprite *s, struct VSpri/
downCheck	gel.c	/^void __regargs downCheck(struct VSprite *s,      \//
drawBob	gel2.c	/^void __regargs drawBob(struct VSprite *s, struct V/
enqSprite	gel2.c	/^void __regargs enqSprite(WORD pick, struct VSprite/
freelastblissobj	blisser.c	/^void freelastblissobj(gi)$/
if	blisser.c	/^    if (type == B2SWAP)$/
new_bsync	gel2.c	/^int __regargs new_bsync(WORD sync, struct ViewPort/
queueSprite	gel2.c	/^BOOL __regargs queueSprite(struct VSprite *s, stru/
rastoff	blisser.c	/^#define rastoff(r) ((umuls(r->rY , r->rRealWW)) + /
reportRect	gel3.c	/^reportRect(rect)$/
resetRects	gel3.c	/^SHORT resetRects(struct gelRect *src, struct gelRe/
setRects	gel.c	/^BOOL __regargs setRects(WORD high, WORD wide, stru/
sortVSprite	gel.c	/^void __regargs sortVSprite(struct VSprite *s)$/
umuls	blisser.c	/^    srcIncr = umuls(s->Width, s->Height) << 1;$/
