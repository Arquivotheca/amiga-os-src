head     36.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.12
date     92.04.09.00.06.29;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.12.02.07.18.18;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.11.21.04.56.29;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.06.13.03.00.38;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.05.31.06.35.44;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.29.05.29.23;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.05.05.22.47;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.20.20.40.42;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.14.04.26.01;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.08.08.28.03;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.21.24;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.25;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.12
log
@added fields for catching the "delete during exall causing crash" bug
@
text
@/* ram.h */

#include "dos/notify.h"

#define BLKSHIFT	10			/* 1K blocks */
#define MIN_BLKSIZE	(1L << BLKSHIFT)
#define FIRSTBUFFPOS	8	/* offsetof(struct data,data) */
#define DATA_EXTRA	(FIRSTBUFFPOS >> 2)
#define MAX_WRITE	(FIRSTBUFFPOS+MIN_BLKSIZE-1)
#define DATA_BLOCK_SIZE ((MIN_BLKSIZE >> 2) + DATA_EXTRA)
#define MAX_FILENAME	30
#define MAX_COMMENT	79

#define xfer(a,b,c)	CopyMem(a,b,c)
#define TOBPTR(x)	(((LONG) (x)) >> 2)

/* internal notify structure */
struct notify {
	struct notify *Succ;
	struct notify *Pred;
	char *Name;		   /* pointer to last portion of name */
	struct NotifyRequest *Req; /* we return it when removed */
	struct node *node;	   /* NULL if not in a chain */
	struct NotifyMessage *msg; /* for WAIT_REPLY */
};

struct rlock {
	struct rlock *next;
	struct rlock *prev;
	struct lock *lock;	/* the filehandle that holds this */
	LONG offset;
	LONG length;
	LONG mode;
};

struct rlock_wait {
	struct rlock_wait *next;
	struct rlock_wait *prev;
	struct timerequest iob;  /* the timer ior for this lock attempt */
	struct DosPacket *dp;	  /* the packet sent to me */
};

/* file or directory */
struct node {
	struct node *next;		/* next in chain */
	struct node *back;		/* parent node */
	struct node *list;		/* also struct data * */
	struct node *firstlink;		/* first hardlinked item */
	ULONG size;
	ULONG prot;
	ULONG date[3];
	UBYTE *comment;
	struct MinList notify_list;	/* people waiting for notifies */
	struct MinList record_list;	/* record locks on this file   */
	struct MinList rwait_list;	/* people waiting for record locks */
	ULONG delcount;			/* bumped for each delete or rename */
	BYTE type;
	UBYTE name[MAX_FILENAME+1];
};

/* data block */
struct data {
	struct data *next;
	ULONG size;		  /* DATA_EXTRA longs before data */
	char  data[MIN_BLKSIZE];  /* may actually be less */
};

/* my extended lock structure */
struct lock {
	struct FileLock lock;	/* fl_Key is ptr to node */
	struct data *block;	/* current block of data */
	ULONG offset;		/* offset within block */
	ULONG cpos;		/* position within file */
	ULONG flags;		/* random flags */
	ULONG delcount;		/* for exall: copy of dir's delcount */
};

#define LOCK_MODIFY	1	/* flag for lock structure */

/* global structures */
extern	struct Library *SysBase;
extern	struct DosLibrary *DOSBase;
extern	struct Library *UtilityBase;
extern	BPTR lock_list;
extern	struct node *root;
extern	struct node *current_node;
extern	LONG path_pos;
extern	LONG spaceused;
extern	LONG fileerr;
extern	struct DeviceList *volumenode;
extern	LONG disktype;
extern  struct Process *MyProc;
extern  struct MsgPort *MyPort;
extern  struct MsgPort *MyReplyPort;
extern  struct MsgPort *timerport;

extern	struct MinList orphaned;
extern	struct MinList FreeMessages;



#define makefile(a,b,c) openmakefile(a,b,c,0)
#define openfile(a,b,c) openmakefile(a,b,c,1)
#define copydate(a,b)	{(a)[0] = (b)[0]; (a)[1] = (b)[1]; (a)[2] = (b)[2];}

#define DOS_TRUE	-1
#define SAME 		0

@


36.11
log
@*** empty log message ***
@
text
@a46 1
	LONG type;
d56 2
d75 1
@


36.10
log
@comment
@
text
@d81 1
@


36.9
log
@->block type change (struct data)
@
text
@d5 2
a6 1
#define MIN_BLKSIZE	1024
d49 1
a49 1
	struct node *firstlink;
@


36.8
log
@changed lock_list to BPTR list
@
text
@d68 2
a69 2
	struct FileLock lock;
	struct node *block;	/* current block */
@


36.7
log
@changes for polymorph links
@
text
@d80 1
a80 1
extern	struct lock *lock_list;
@


36.6
log
@for rcs 4.x header change
@
text
@d44 2
a45 2
	struct node *next;
	struct node *back;
d48 1
a48 1
	ULONG links;
@


36.5
log
@Blocksize is now 1024 (makes a big difference)
fixed struct data
@
text
@@


36.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
#define MIN_BLKSIZE	512
d9 1
a9 1
#define DATA_BLOCK_SIZE (((MIN_BLKSIZE-1) >> 2) + DATA_EXTRA)
d62 2
a63 2
	ULONG size;		/* DATA_EXTRA longs before data */
	char  data[1];		/* actually more - see DATA_BLOCK_SIZE */
@


36.3
log
@Support for record locking, list->minlist
@
text
@d3 1
a3 1
#include "libraries/notify.h"
d78 2
d91 1
@


36.2
log
@Changed to 512 byte blocks, global changes.
@
text
@d3 1
a3 1
#include "/libraries/notify.h"
d14 1
d26 16
d53 3
a55 1
	struct List notify_list;	/* people waiting for notifies */
d90 2
a91 2
extern	struct List orphaned;
extern	struct List FreeMessages;
@


36.1
log
@*** empty log message ***
@
text
@d5 3
a7 3
#define MIN_BLKSIZE	488
#define FIRSTBUFFPOS	8
#define DATA_EXTRA	2
d31 1
d62 1
a62 1
extern	struct node *prev_node;
d64 1
a64 1
extern	LONG  fileerr;
@
