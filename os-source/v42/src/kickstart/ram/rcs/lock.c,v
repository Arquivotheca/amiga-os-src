head     36.13;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.13
date     91.02.22.19.51.16;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     90.12.07.04.05.44;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     90.12.02.07.13.53;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     90.11.21.04.49.47;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.06.13.02.46.19;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.06.01.01.53.59;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.31.05.53.58;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.05.05.22.22;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.20.20.28.50;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.08.08.24.01;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.10.18.14.15.52;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.03.18.37.41;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.14;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.13
log
@NULL out fl_Task on UnLock
@
text
@/* lock.c */

#include "ram_includes.h"
#include "ram.h"

/********************************************************/
/* key := checklock( lock )                             */
/*                                                      */
/* Returns key from specified lock                      */
/********************************************************/

struct node *
checklock (lock)
	struct lock *lock;
{
	struct lock *p;
	BPTR *last = NULL;		/* ptr to last lock ptr */

	if (lock == NULL)		/* zero lock */
		return root;

	/* keeps last pointing at the pointer to the current node */
	for (p = BADDR(lock_list);
	     p && p != lock;
	     last = &(p->lock.fl_Link), p = BADDR(p->lock.fl_Link))
		; /* NULL */

	if (p == NULL)
	{
		fileerr = ERROR_INVALID_LOCK;
		return FALSE;
	}

	/* we found it, it's a real lock.  Move it to the head of the list */
	if (last)
	{
		/* only if it's not the head already */
		*last = p->lock.fl_Link;	/* remove it */
		p->lock.fl_Link = lock_list;	/* attach the rest to it */
		lock_list = TOBPTR(p);		/* replace the list head ptr */
	}

	return (struct node *) lock->lock.fl_Key;
}

struct lock *
getlock (ptr,access)
	struct node *ptr;
	LONG access;
{
	struct lock *p,*lock;

	/* search for exclusive locks on object, or any locks if */
	/* we want an exclusive lock ourselves.			 */
	/* assumes no shared locks if there is also an exclusive */

	p = BADDR(lock_list);
	p = find_lock(p,ptr);
	if (p != NULL && (p->lock.fl_Access == EXCLUSIVE_LOCK ||
				     access == EXCLUSIVE_LOCK))
	{
		fileerr = ERROR_OBJECT_IN_USE;
		return NULL;
	}

	lock = getvec(sizeof(struct lock));
	if (!lock)
		return NULL;

	/* add to head of lock list */
	lock->lock.fl_Link   = lock_list;
	lock->lock.fl_Key    = (LONG) ptr;
	lock->lock.fl_Access = access;
	lock->lock.fl_Task   = MyPort;
	lock->lock.fl_Volume = ((LONG) volumenode) >> 2;

	/* so others don't have to do this all over the place */
	/* NOTE: for a file, block CANNOT be null any more    */

	lock->block  = (struct data *) ptr->list;   /* may also be nodelist */
	lock->offset = FIRSTBUFFPOS;
	lock->cpos   = 0;
	lock->flags  = 0;

	lock_list = TOBPTR(lock);

	return lock;
}

LONG
freelock (lock)
	struct lock *lock;
{
	struct lock *p;

	if (lock == NULL)
		return DOS_TRUE;

	/* evil magic, clone of such in BCPL version. */
	/* Luckily, fl_Link is the first field of a lock */

	p = (struct lock *) &(lock_list);
	while (p->lock.fl_Link != NULL && BADDR(p->lock.fl_Link) != lock)
		p = (struct lock *) BADDR(p->lock.fl_Link);

	if (p->lock.fl_Link == NULL)
	{
		fileerr = ERROR_INVALID_LOCK;
		return FALSE;
	}

	/* remove from list */
	p->lock.fl_Link = lock->lock.fl_Link;

	/* do we need to notify on this lock? */
	/* (Must happen AFTER removing lock from list, for copy_data to work) */
	/* (Copy_Data needs to get a lock, and if this is exclusive, ...)     */
	if (lock->flags & LOCK_MODIFY)
	{
		notify(lock);
		/* clear archive bit, as if backup programs are used on ram.. */
		((struct node *) lock->lock.fl_Key)->prot &= ~FIBF_ARCHIVE;
	}

	/* null out fl_Task to avoid stale lock problems */
	lock->lock.fl_Task = NULL;

	freevec(lock);

	return DOS_TRUE;
}

struct lock *
find_lock (p,node)
	struct lock *p;
	struct node *node;
{
	while (p != NULL && p->lock.fl_Key != (BPTR) node)
		p = (struct lock *) BADDR(p->lock.fl_Link);

	return p;
}

LONG
change_lock (lock,newmode)
	struct lock *lock;
	LONG newmode;
{
	struct lock *p;

	/* make sure it's mine */
	if (!lock || !checklock(lock))
		return FALSE;

	/* if he has exclusive, give him anything he wants */
	if (newmode == EXCLUSIVE_LOCK &&
	    lock->lock.fl_Access != EXCLUSIVE_LOCK)
	{
		/* he has a shared lock, must be trying for an exclusive lock */
		for (p = BADDR(lock_list);
		     p;
		     p = (struct lock *) BADDR(p->lock.fl_Link))
		{
			/* if going for exclusive, allow no other locks */
			if (p->lock.fl_Key == lock->lock.fl_Key &&
			    p != lock)
			{
				fileerr = ERROR_OBJECT_IN_USE;
				return FALSE;
			}
		}
	}
lock_ok:
	lock->lock.fl_Access = newmode;
	return DOS_TRUE;
}
@


36.12
log
@FreeVec->freevec
@
text
@d124 3
@


36.11
log
@use faster routine for allocating locks
clear arcive bit if file is modified
@
text
@d125 1
a125 1
	FreeVec((char *) lock);
@


36.10
log
@Fixes for openfromlock/changemode, move lock being played with to head of
lock-list
@
text
@d66 2
a67 2
	lock = (struct lock *) mygetvec(sizeof(struct lock));
	if (lock == NULL)
d119 1
d121 3
@


36.9
log
@->block type fix
@
text
@d17 1
d22 1
d25 1
a25 1
	     p = BADDR(p->lock.fl_Link))
d34 9
d78 2
d144 4
d149 2
a150 1
	if (lock->lock.fl_Access != EXCLUSIVE_LOCK)
d153 3
a155 2
		p = BADDR(lock_list);
		while (p = find_lock(p,(struct node *) lock->lock.fl_Key))
d158 2
a159 1
			if (p != lock)
@


36.8
log
@removed uneeded cast
@
text
@d67 1
a67 1
	lock->block  = ptr->list;
@


36.7
log
@Changed back to BPTR lock list.  No one should EVER look at the list
(it's highly unsafe, and only the handler should use it).  However, we
want our developers to have an easier time of it, and this makes 
showlocks work.
@
text
@d60 1
a60 1
	lock->lock.fl_Link   = (BPTR) lock_list;
@


36.6
log
@for rcs 4.x header change
@
text
@d21 1
a21 1
	for (p = lock_list;
d23 1
a23 1
	     p = (struct lock *) p->lock.fl_Link)
d46 1
a46 1
	p = lock_list;
d72 1
a72 1
	lock_list = lock;
d90 2
a91 2
	while (p->lock.fl_Link != NULL && p->lock.fl_Link != (BPTR) lock)
		p = (struct lock *) p->lock.fl_Link;
d119 1
a119 1
		p = (struct lock *) p->lock.fl_Link;
d135 1
a135 1
		p = lock_list;
@


36.5
log
@getvec changes (longs to bytes)
@
text
@@


36.4
log
@Added CHangemode
@
text
@d55 1
a55 1
	lock = (struct lock *) mygetvec((sizeof(struct lock)+3) >> 2);
d108 1
a108 1
	freevec((char *) lock);
@


36.3
log
@set ALL fields of locks when created.
@
text
@a41 4
	p = lock_list;
	while (p != NULL && p->lock.fl_Key != (BPTR) ptr)
		p = (struct lock *) p->lock.fl_Link;

d46 2
d110 38
@


36.2
log
@modified where notification occurs to avoid problems with exclusive
locks.
@
text
@d68 6
@


36.1
log
@*** empty log message ***
@
text
@d95 3
d99 2
a103 2
	/* remove from list */
	p->lock.fl_Link = lock->lock.fl_Link;
@
