head     36.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.4
date     90.05.30.18.05.11;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.05.05.22.19;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.14.33;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.13;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.4
log
@Split locate into different pieces to reduce code size
Should downcode to asm
@
text
@/* locate.c */

#include "ram_includes.h"
#include "ram.h"

struct lock *
locate (lock,str,mode)
	struct lock *lock;
	char *str;
	LONG mode;
{
	struct node *dptr;

	/* find the node to try to lock (following links) */
	dptr = locatenode(lock,str,TRUE);

	return (dptr ? getlock(dptr,mode) : NULL);
}

/* for when we have a lock */

struct node *
locatenode (lock,str,follow_links)
	struct lock *lock;
	char *str;
	LONG follow_links;
{
	struct node *dptr;

	dptr = checklock(lock);
	if (dptr == NULL)
		return NULL;

	return findnode(dptr,str,follow_links);
}

/* for when we have a dptr (node) */

struct node *
findnode (dptr,str,follow_links)
	struct node *dptr;
	char *str;
	LONG follow_links;
{
	char name[MAX_FILENAME+1];

	/* note: readlink() depends on the behavior of this routine (and of */
	/* finddir()).  It assumes current_node is valid if finddir fails.  */

	dptr = finddir(dptr,str,name);
	if (dptr == NULL)
		return NULL;

	if (name[0] != '\0')
	{
		if (!findentry(dptr,name,follow_links))
			return NULL;
		dptr = current_node;
	}

	return dptr;
}
@


36.3
log
@for rcs 4.x header change
@
text
@a12 1
	char name[MAX_FILENAME+1];
d14 16
d34 16
d56 1
a56 1
		if (!findentry(dptr,name,TRUE))
d60 2
a61 1
	return getlock(dptr,mode);
@


36.2
log
@removed spurious test, reworked logic slightly.
@
text
@@


36.1
log
@*** empty log message ***
@
text
@d19 5
a23 2
/* FIX? strrchr */
	if (splitname(name,':',str,1) != strlen(str)+1)
d25 1
a25 5
		DBUG2("string = %s, name = %s",(LONG)str,(LONG)name);
		dptr = finddir(dptr,str,name);
		if (dptr == NULL)		/* handle lock on /ggg problem */
		{
			fileerr = ERROR_OBJECT_NOT_FOUND;
d27 1
a27 7
		}
		if (name[0] != '\0')
		{
			if (!findentry(dptr,name))
				return NULL;
			dptr = current_node;
		}
@
