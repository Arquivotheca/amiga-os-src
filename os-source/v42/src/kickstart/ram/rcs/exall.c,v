head     36.13;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.13
date     93.07.15.15.52.16;  author jesup;  state Exp;
branches ;
next     36.12;

36.12
date     92.04.09.00.05.43;  author jesup;  state Exp;
branches ;
next     36.11;

36.11
date     91.03.12.21.15.50;  author jesup;  state Exp;
branches ;
next     36.10;

36.10
date     91.01.17.13.51.56;  author jesup;  state Exp;
branches ;
next     36.9;

36.9
date     90.11.21.04.48.08;  author jesup;  state Exp;
branches ;
next     36.8;

36.8
date     90.08.28.02.09.49;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.05.29.05.25.26;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.04.05.05.21.51;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.02.20.20.26.45;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     89.12.14.04.21.22;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     89.12.08.08.22.31;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     89.10.18.14.10.19;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.32.00;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.13
log
@Make exall support hardlinks correctly
@
text
@/* exall.c */

#include "ram_includes.h"
#include "ram.h"
#include "dos/exall.h"

/* also works for examinefh, since fh_Arg1 == lock for me (object = 0) */

LONG
exnext (pkt,object)
	struct DosPacket *pkt;
	LONG object;			/* 0 = examine object, 1 = exnext */
					/* 2 = examine all */
{
	struct FileInfoBlock *ivec;
	struct node *node;
	struct node *ptr;
	struct lock *lock;

	lock = (struct lock *) (pkt->dp_Arg1 << 2);
	ptr  = checklock(lock);
	if (ptr == NULL)
		return FALSE;

	if (object == 2)		/* ExAll */
		return exall(ptr,pkt);

	ivec = (struct FileInfoBlock *) (pkt->dp_Arg2 << 2);
	node = (struct node *) ivec->fib_DiskKey;

	/* check for whether the file exists */
	if (object != 0 && node != ptr)
	{
		/* see if the thing pointed to by the lock has been modified */
		if (lock->delcount != ptr->delcount)
		{
			/* the directory has been modified.  rescan. */
			struct node *n;

			for (n = ptr->list; n; n = n->next)
			{
				if (n == node)
					break;
			}
			if (!n)
			{
				/* object was deleted.  restart scan */
				/* it would be nice to pick up, but this is */
				/* at least safe. */
				node = ptr;

			} /* else it's still in the directory */

		} /* else the directory hasn't been modified */
	}
	/* so we can catch files being deleted from under us */
	lock->delcount = ptr->delcount;

	return setinfo(ivec,object == 0 ? ptr : 
				          ptr == node ? node->list :
						        node->next);
}

LONG
exall (struct node *node, struct DosPacket *dp)
{
	struct ExAllData *ed	= (void *) dp->dp_Arg2;
	struct ExAllData *lasted = NULL;
	LONG size		= dp->dp_Arg3;
	LONG data		= dp->dp_Arg4;
	struct ExAllControl *ec = (void *) dp->dp_Arg5;
	struct node *curr;
	LONG savesize;

/*kprintf("in exall for %s (0x%lx, %ld, %ld, 0x%lx)\n",node->name,
dp->dp_Arg2,dp->dp_Arg3,dp->dp_Arg4,dp->dp_Arg5);
*/
	if (node->type != ST_USERDIR)
	{
		fileerr = ERROR_OBJECT_WRONG_TYPE;
		return FALSE;
	}

	/* check the data value */
	if (data < ED_NAME || data > ED_COMMENT)
	{
		fileerr = ERROR_BAD_NUMBER;	/* FIX!? */
		return FALSE;
	}
	/* we leave pointer to next node in ec->eac_LastKey */
	/* If it has been deleted, we're in deep shit. FIX! */
	/* I COULD temporarily lock it, since ExAlls should */
	/* always be finished.				    */

	ec->eac_Entries = 0;	/* no entries */

	for (curr = ec->eac_LastKey ? (struct node *) ec->eac_LastKey :
				      node->list;
	     curr;
	     curr = curr->next)
	{
/*kprintf("Looking at %s\n",curr->name);*/
		/* ok, we got here, fill in the buffer, check for overrun */
		savesize = size;
		if (!fill_data(ed,data,curr,&size))
		{
/*kprintf("Out of space\n");*/
			/* out of space, return partial */
			if (lasted)
				lasted->ed_Next = NULL; /* last entry */
			ec->eac_LastKey = (LONG) curr;
			return DOS_TRUE;
		}

		/* first do pattern matching */

		if (ec->eac_MatchString)
		{
			/* use default match func */
			if (!MatchPatternNoCase(ec->eac_MatchString,
						curr->name))
				goto reject;
		}

		if (ec->eac_MatchFunc)
		{
			if (!do_match(ec,data,ed))
			{
reject:				size = savesize;
				continue;
			}
		}

		/* remember the last entry so we can NULL out ed_Next */
		lasted = ed;

/*kprintf("adding entry (%ld)\n",ec->eac_Entries+1);*/
		/* filled it in, bump count and move on */
		ec->eac_Entries++;
		ed = ed->ed_Next;
	}

	/* make sure last ed_Next entry is NULL */
	if (lasted)
		lasted->ed_Next = NULL;

/*kprintf("Done\n");*/
	/* finished, return that we're done (ERROR_NO_MORE_ENTRIES) */
	fileerr = ERROR_NO_MORE_ENTRIES;
	return FALSE;
}

/* offsets for the first string for the different settings of data */
static UBYTE __far str_offset[ED_COMMENT] = {
	8,12,16,20,32,36
};

LONG
fill_data (struct ExAllData *ed, ULONG data, struct node *node, LONG *size)
{
	UBYTE *p = ((UBYTE *) ed) + str_offset[data-1];
	LONG mysize = 0;
	struct node *link = node;

	/* report most info from the thing hard-linked to */
	/* name and type come from the link itself, all else from linked-to */
	if (node->type == ST_LINKFILE || node->type == ST_LINKDIR)
		link = node->list;

	/* first take off required size */
	/* initial ed MUST be on multiple of 2 boundary!!!! */
	switch (data) {
	case ED_COMMENT:
		mysize += 4 + (link->comment ? strlen(link->comment) : 0) + 1;
	case ED_DATE:
		mysize += 3*4;
	case ED_PROTECTION:
		mysize += 4;
	case ED_SIZE:
		mysize += 4;
	case ED_TYPE:
		mysize += 4;
	case ED_NAME:
		mysize += 2*4 + strlen(node->name) + 1;
		if (mysize > *size)
			return FALSE;
	}
	if (mysize & 1)			/* if would put next on odd boundary */
		mysize++;

	*size -= mysize;

	/* we now know we have enough space - fill it in */
	switch (data) {
	case ED_COMMENT:
		ed->ed_Comment = p;
		*p = '\0';
		if (link->comment)
			strcpy(p,link->comment);
		p += strlen(p) + 1;		/* point to space for name */
	case ED_DATE:
		copydate(&(ed->ed_Days),&(link->date[0]));
	case ED_PROTECTION:
		ed->ed_Prot = link->prot;
	case ED_SIZE:
		ed->ed_Size = link->size;
	case ED_TYPE:
		ed->ed_Type = node->type;
	case ED_NAME:
		ed->ed_Name = p;
		strcpy(p,node->name);
		ed->ed_Next = (struct ExAllData *) (((LONG) ed) + mysize);
	}

	return TRUE;
}

/* this does the dirty work of examine, exnext */

LONG
setinfo (ivec,ptr)
	struct FileInfoBlock *ivec;
	struct node *ptr;
{
	LONG type;

	if (ptr == NULL)
	{
		fileerr = ERROR_NO_MORE_ENTRIES;
		return FALSE;
	}

	ivec->fib_DiskKey	= (LONG) ptr;	/* magic to user! */
	type                    =
	ivec->fib_DirEntryType	=
	ivec->fib_EntryType	= ptr->type;	/* out of order for speed */

	CtoBcpy(ivec->fib_FileName,ptr->name);		/* C strings to Bstr */

	/* report most info from the thing hard-linked to */
	if (type == ST_LINKFILE || type == ST_LINKDIR)
		ptr = ptr->list;

	ivec->fib_Protection	= ptr->prot;
	ivec->fib_Size		= ptr->size;
	ivec->fib_NumBlocks	= (ptr->size >> BLKSHIFT) + 1;
	ivec->fib_Date.ds_Days	= ptr->date[0];
	ivec->fib_Date.ds_Minute = ptr->date[1];
	ivec->fib_Date.ds_Tick	= ptr->date[2];
	ivec->fib_Comment[0]    = '\0';		/* BSTR! */

	/* handle null comments */
	if (ptr->comment)
		CtoBcpy(ivec->fib_Comment,ptr->comment);  /* C strings to bstr*/

	return DOS_TRUE;
}
@


36.12
log
@Fixed the "delete during exall causing crash" bug!!!!!!!!!!!!!!!!!
Yeah!
@
text
@d163 1
d165 5
d174 1
a174 1
		mysize += 4 + (node->comment ? strlen(node->comment) : 0) + 1;
d198 2
a199 2
		if (node->comment)
			strcpy(p,node->comment);
d202 1
a202 1
		copydate(&(ed->ed_Days),&(node->date[0]));
d204 1
a204 1
		ed->ed_Prot = node->prot;
d206 1
a206 1
		ed->ed_Size = node->size;
@


36.11
log
@Added cast, far to __far
@
text
@d18 1
d20 2
a21 1
	ptr  = checklock((struct lock *) (pkt->dp_Arg1 << 2));
d31 28
a58 1
	/* FIX - check if node exists!!!! */
@


36.10
log
@Use MatchPatternNoCase, not matchpattern
Make sure the last entry has ed_Next as NULL
@
text
@d68 2
a69 1
	for (curr = ec->eac_LastKey ? ec->eac_LastKey : node->list;
d125 1
a125 1
static UBYTE far str_offset[ED_COMMENT] = {
@


36.9
log
@Blocksize is tunable
@
text
@d39 1
d79 2
a80 1
			ed->ed_Next = NULL;		/* last entry */
d90 2
a91 1
			if (!MatchPattern(ec->eac_MatchString,curr->name))
d104 2
a105 3
		/* kind of wierd, but we have to make the last entry NULL */
		if (!curr->next)
			ed->ed_Next = NULL;
d112 4
@


36.8
log
@Fixed the Next ptr of the last data item of the list
@
text
@d204 1
a204 1
	ivec->fib_NumBlocks	= (ptr->size >> 9) + 1;	/* assumes 512 bytes */
@


36.7
log
@fixed include dir
@
text
@d78 1
d100 4
@


36.6
log
@for rcs 4.x header change
@
text
@d5 1
a5 1
#include "libraries/exall.h"
@


36.5
log
@Fixes for Exall
@
text
@@


36.4
log
@Oops, forgot to remove kprintfs!
@
text
@d178 2
d187 2
a188 1
	ivec->fib_DirEntryType	= ptr->type;
d194 1
a194 1
	if (ptr->type == ST_LINKFILE || ptr->type == ST_LINKDIR)
@


36.3
log
@Added support for ExAll
@
text
@d45 1
a45 1
kprintf("in exall for %s (0x%lx, %ld, %ld, 0x%lx)\n",node->name,
d47 1
d71 1
a71 1
kprintf("Looking at %s\n",curr->name);
d76 1
a76 1
kprintf("Out of space\n");
d100 1
a100 1
kprintf("adding entry (%ld)\n",ec->eac_Entries+1);
d106 1
a106 1
kprintf("Done\n");
@


36.2
log
@Added hard link support.
@
text
@d5 1
d7 2
d13 1
d23 3
d29 1
a29 1
/* FIX - check if node exists!!!! */
d33 135
@


36.1
log
@*** empty log message ***
@
text
@d44 7
a57 2

	CtoBcpy(ivec->fib_FileName,ptr->name);		/* C strings to Bstr */
@
