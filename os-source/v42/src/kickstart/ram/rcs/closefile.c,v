head     36.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


36.8
date     91.05.08.22.18.53;  author jesup;  state Exp;
branches ;
next     36.7;

36.7
date     90.12.07.03.59.52;  author jesup;  state Exp;
branches ;
next     36.6;

36.6
date     90.12.02.07.11.26;  author jesup;  state Exp;
branches ;
next     36.5;

36.5
date     90.06.13.02.44.09;  author jesup;  state Exp;
branches ;
next     36.4;

36.4
date     90.05.31.05.50.53;  author jesup;  state Exp;
branches ;
next     36.3;

36.3
date     90.04.05.05.21.22;  author jesup;  state Exp;
branches ;
next     36.2;

36.2
date     90.02.20.20.12.34;  author jesup;  state Exp;
branches ;
next     36.1;

36.1
date     89.09.16.22.31.48;  author jesup;  state Exp;
branches ;
next     ;


desc
@@


36.8
log
@Forgot to check it in
update datestamp on file modification
@
text
@/* closefile.c */

#include "ram_includes.h"
#include "ram.h"

LONG
closefile (lock)
	struct lock *lock;
{
	struct node *node;
	struct data *temp;

	/* optimize small files if possible (less than 1 block) */
	node = (struct node *) lock->lock.fl_Key;
	if (node->size < MIN_BLKSIZE-4 && node->size != 0)
	{
		temp = swapblock((struct data *) node->list,
				 node->size + DATA_EXTRA*sizeof(LONG),
				 node->size + DATA_EXTRA*sizeof(LONG));
		if (temp)
			node->list = (struct node *) temp;
	}

	/* if the file was changed, update the datestamp */
	/* FIX! use stub for DateStamp? (probably not worth it) */
	if (lock->flags & LOCK_MODIFY)
		DateStamp((struct DateStamp *) (node->date));

	/* notify if file has changed is done by freelock */
	return freelock(lock);
}

/* releases oldblock, returns new, fixes all locks */

struct data *
swapblock (oldblock,size,xfersize)
	struct data *oldblock;
	LONG size;		/* new size in bytes */
	LONG xfersize;		/* same or smaller, in bytes */
{
	struct lock *p;
	struct data *newd;

	newd = (struct data *) mygetvec(size);

	if (newd)
	{
		/* copy the relevant portions */
		/* may read past end of source block */
		xfer((char *) oldblock, (char *) newd, xfersize);

		/* now fix any other locks on this file */
		for (p = BADDR(lock_list);
		     p;
		     p = (struct lock *) BADDR(p->lock.fl_Link))
		{
			if (p->block == oldblock)
				p->block = newd;
		}

		/* drop old data and fix pointer */
		freevec(oldblock);
	}
	return newd;
}
@


36.7
log
@FreeVec->freevec
@
text
@d23 5
@


36.6
log
@avoid problems if swapblock fails allocation
@
text
@d57 1
a57 1
		FreeVec((char *) oldblock);
@


36.5
log
@Fixed ->block type
@
text
@d11 1
d17 5
a21 4
		node->list = (struct node *)
			     swapblock((struct data *) node->list,
				       node->size + DATA_EXTRA*sizeof(LONG),
				       node->size + DATA_EXTRA*sizeof(LONG));
@


36.4
log
@go back to using BPTRs for lock list to fix showlocks
Note that noone should look at that field, this is to make things
easier for developers
@
text
@d50 2
a51 2
			if (p->block == (struct node *) oldblock)
				p->block = (struct node *) newd;
@


36.3
log
@for rcs 4.x header change
@
text
@d46 1
a46 1
		for (p = lock_list;
d48 1
a48 1
		     p = (struct lock *) p->lock.fl_Link)
@


36.2
log
@Fixes for AllocVec and size optimizations
@
text
@@


36.1
log
@*** empty log message ***
@
text
@d12 1
a12 1
	/* optimize small files if possible */
d14 1
a14 1
	if (node->size && node->size < MIN_BLKSIZE-4)
d18 1
a18 1
				       ((node->size + 3) >> 2) + DATA_EXTRA,
d31 1
a31 1
	LONG size;		/* new size in longs */
d55 1
a55 1
		freevec((char *) oldblock);
@
