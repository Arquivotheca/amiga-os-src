head     1.9;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.9
date     92.08.10.16.39.54;  author jesup;  state Exp;
branches ;
next     1.8;

1.8
date     91.02.01.11.22.39;  author steveb;  state Exp;
branches ;
next     1.7;

1.7
date     90.09.20.17.40.00;  author steveb;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.13.11.31.19;  author steveb;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.05.13.03.45;  author steveb;  state Exp;
branches ;
next     1.4;

1.4
date     90.04.06.15.17.42;  author steveb;  state Exp;
branches ;
next     1.3;

1.3
date     89.12.08.01.06.02;  author steveb;  state Exp;
branches ;
next     1.2;

1.2
date     89.12.06.10.55.13;  author steveb;  state Exp;
branches ;
next     1.1;

1.1
date     89.03.13.16.46.34;  author steveb;  state Exp;
branches ;
next     ;


desc
@1.3.1
@


1.9
log
@Use taggedopenlibrary
@
text
@		SECTION	filesystem,CODE

		NOLIST
		include	"exec/types.i"
		include	"exec/alerts.i"
		include	"libraries/dosextens.i"
		include	"intuition/intuition.i"
		include "internal/librarytags.i"
		include	"globals.i"
		include	"printf.mac"
		LIST

;		DEBUGENABLE

		XDEF	Request

		XREF	_LVOAlert,_LVOTaggedOpenLibrary,_LVOCloseLibrary,_LVOFreeMem
		XREF	GetPubMem,_LVOEasyRequestArgs,_AbsExecBase

STACKSIZE EQU 2048
NEGSTACK  EQU 4-2048

;==============================================================================
; result = Request()
;   d0
;
; builds a system requester using the string in ReqString and data stored in
; ReqArgs in the current window.  Waits for user response and returns TRUE
; if user clicked on retry or false if user clicked on cancel.
;==============================================================================
Request		movem.l	d2-d3/d6-d7/a2-a4,-(sp)
		moveq.l	#FALSE,d6		assume false return

		movea.l	ThisTask(a5),a0		test window pointer
		tst.l	pr_WindowPtr(a0)
		bmi.s	RequestDone		no window, return false

		move.l	#STACKSIZE,d0		get stack space
		bsr	GetPubMem
		tst.l	d0
		beq.s	RequestDone		no memory, return false
		exg.l	d0,sp			switch to new stack
		lea.l	STACKSIZE(sp),sp
		move.l	d0,-(sp)		and save old stack pointer

		moveq.l	#OLTAG_INTUITION,d0	intuition, any version
		jsr	_LVOTaggedOpenLibrary(a6)
		tst.l	d0
		beq.s	RequestFailed		didn't get intuition
		movea.l	d0,a6			using intuition lib now

; Switched over to EasyRequest for 2.0.  This means a different FS for 1.3
		move.l	sp,d7			mark current stack offset
		movea.l	ReqArgs(a5),a3		a3 points to args list
		move.l	#DISKINSERTED,-(sp)
		movea.l	sp,a2			a2 points to IDCMP flags needed
		move.l	ButtonString(a5),-(sp)	construct EasyStruct
		move.l	ReqString(a5),-(sp)	this string
		clr.l	-(sp)			no title
		clr.l	-(sp)			no flags
		move.l	#20,-(sp)		sizeof(struct EasyStruct)
		movea.l	sp,a1
		movea.l	ThisTask(a5),a0		get the window pointer
		movea.l	pr_WindowPtr(a0),a0
		jsr	_LVOEasyRequestArgs(a6)	display requester
		move.l	d0,d6			stash result
		movea.l	a6,a1			close down intuition
		movea.l	_AbsExecBase,a6
		jsr	_LVOCloseLibrary(a6)
		move.l	d7,sp			reclaim stack space used

RequestFailed	lea.l	NEGSTACK(sp),a1		point to beginning of stack
		move.l	(sp)+,sp		back to previous stack
		move.l	#STACKSIZE,d0
		jsr	_LVOFreeMem(a6)		free up the new stack

RequestDone	move.l	d6,d0			retrieve return code
		movem.l	(sp)+,d2-d3/d6-d7/a2-a4
		rts

		END
@


1.8
log
@Re-worked EasyRequestArgs call.  Now fetching strings from DOS instead of
using statically allocatred ones
@
text
@d8 1
d17 1
a17 1
		XREF	_LVOAlert,_LVOOpenLibrary,_LVOCloseLibrary,_LVOFreeMem
d46 2
a47 3
		lea.l	IntName(pc),a1		open intuition
		moveq.l	#36,d0			this version
		jsr	_LVOOpenLibrary(a6)
a79 3

IntName		DC.B	'intuition.library',0
		CNOP	0,4
@


1.7
log
@
@
text
@d23 2
a24 2
; result = Request( line1,line2,line3 )
;   d0		     a0    a1    a2
d26 2
a27 2
; builds a system requester with the given three lines of text and puts it up
; in the current processes window.  Waits for user response and returns TRUE
a30 2
		movea.l	a0,a3			save lines 1 and 2
		movea.l	a1,a4
d54 1
a54 4
		move.l	a2,-(sp)		last line
		move.l	a4,-(sp)		middle line
		move.l	a3,-(sp)		first line
		movea.l	sp,a3			a3 points to args list
d57 2
a58 2
		pea.l	GadgetText(pc)		construct EasyStruct
		pea.l	RequestText(pc)	
a80 4
GadgetText	DC.B	'Retry|Cancel',0
		CNOP	0,2
RequestText	DC.B	'%s',10,'%s',10,'%s',0
		CNOP	0,2
@


1.6
log
@switched over to EasyRequest instead of AutoRequest
@
text
@@


1.5
log
@
@
text
@d17 1
a17 1
		XREF	GetPubMem,_LVOAutoRequest,_AbsExecBase
d31 1
a31 1
		movea.l	a0,a3			save lines 2 and 3
d37 1
a37 1
		bmi	RequestDone		no window, return false
d42 1
a42 1
		beq	RequestDone		no memory, return false
d46 1
d48 1
a48 1
		moveq.l	#33,d0			this version
d51 1
a51 1
		beq	RequestFailed		didn't get intuition
d54 14
a67 55
; convert the 3 supplied strings to a list of IntuiText structures on the stack
		move.l	sp,d7			save the current stack pointer
		lea.l	-it_SIZEOF(sp),sp	get an intuitext struct
		movea.l	sp,a0			where struct is
		movea.l	a3,a1			first string
		moveq.l	#15,d0			initial leftedge
		moveq.l	#5,d1			initial topedge
		bsr	InitText		initialise the text

		clr.l	it_NextText(sp)		assume no more text
		cmpa.w	#0,a4			is there a second line ?
		beq.s	10$			nope, look for third line
		lea.l	-it_SIZEOF(sp),a0	get next struct
		move.l	a0,it_NextText(sp)	link to previous
		movea.l	a0,sp			and get stack space
		movea.l	a4,a1			this string
		moveq.l	#15,d0			leftedge
		moveq.l	#15,d1			topedge
		bsr	InitText

10$		clr.l	it_NextText(sp)		assume no more text
		cmpa.w	#0,a2			is there a third line ?
		beq.s	20$			nope, go do gadget text
		lea.l	-it_SIZEOF(sp),a0	get next struct
		move.l	a0,it_NextText(sp)	link to previous
		movea.l	a0,sp			and get stack space
		movea.l	a2,a1			this string
		moveq.l	#15,d0			leftedge
		moveq.l	#25,d1			topedge
		bsr	InitText
		clr.l	it_NextText(sp)		last in bodytext list

20$		lea.l	-it_SIZEOF(sp),sp
		movea.l	sp,a2			this will be PositiveText
		movea.l	sp,a0
		lea.l	RetryMess(pc),a1	text
		moveq.l	#AUTOLEFTEDGE,d0
		moveq.l	#AUTOTOPEDGE,d1
		bsr	InitText
		clr.l	it_NextText(sp)

		lea.l	-it_SIZEOF(sp),sp
		movea.l	sp,a3			this will be NegativeText
		movea.l	sp,a0
		lea.l	CancelMess(pc),a1	text
		moveq.l	#AUTOLEFTEDGE,d0
		moveq.l	#AUTOTOPEDGE,d1
		bsr.s	InitText
		clr.l	it_NextText(sp)

		move.l	#DISKINSERTED,d0	positive flags
		moveq.l	#0,d1			negative flags
		move.l	#320,d2			width
		moveq.l	#72,d3			height

d70 1
a70 4
		movea.l	d7,a1			point to body text
		lea.l	-it_SIZEOF(a1),a1	first entry in body text

		jsr	_LVOAutoRequest(a6)	display requester
d86 1
a86 1
RetryMess	DC.B	'Retry',0
d88 1
a88 1
CancelMess	DC.B	'Cancel',0
d91 1
a91 16
		CNOP	0,2

;==============================================================================
; InitText( itext, text, left, top )
;	     a0     a1    d0    d1
;
; Initialises an intuitext structure with the given text and position.
;==============================================================================
InitText	move.b	#AUTOFRONTPEN,it_FrontPen(a0)
		move.b	#AUTOBACKPEN,it_BackPen(a0)
		move.b	#AUTODRAWMODE,it_DrawMode(a0)
		move.w	d0,it_LeftEdge(a0)
		move.w	d1,it_TopEdge(a0)
		move.l	#AUTOITEXTFONT,it_ITextFont(a0)
		move.l	a1,it_IText(a0)
		rts
@


1.4
log
@
@
text
@d14 1
a14 1
		XDEF	Abort,Request
a22 39
; Abort( code )
;	  d0
;
; Displays a requester and when user presses continue calls Alert if this was
; a DOS (file system) error code, else returns to the caller.  The message is
; slightly different depending on whether this was a DOS call or not.
; (for this implementation it will always be a DOS code 'cause I dont handle
; or generate any other errors)
;==============================================================================
Abort		movem.l	d2/d7/a2,-(sp)
		move.l	d0,d2			save the abort code
AbortAgain	cmpi.l	#AN_KeyRange!AT_DeadEnd,d2	Disk error?
		bne.s	10$			nope (never happens in ffs)
		lea.l	Line0(pc),a0
		bra.s	20$
10$		lea.l	Line1(pc),a0
20$		lea.l	Line2(pc),a1
		lea.l	Line3(pc),a2
		bsr	Request			put up this requestor
		tst.l	d0			if the user presses Retry,
		bne.s	AbortAgain		we give the message again

; If user presses Cancel, we call an Alert if DOS errors or return otherwise.
		move.l	d2,d7
		bpl.s	AbortEnd		top bit not set
		jsr	_LVOAlert(a6)		dead end error, call Alert
AbortEnd	movem.l	(sp)+,d2/d7/a2
		rts

Line0		DC.B	'Disk corrupt - task held',0
		CNOP	0,2
Line1		DC.B	'Software error - task held',0
		CNOP	0,2
Line2		DC.B	' Finish ALL disk activity',0
		CNOP	0,2
Line3		DC.B	'Select CANCEL to reset/debug',0
		CNOP	0,2

;==============================================================================
d100 1
a100 1
		bsr	InitText
@


1.3
log
@notification added
@
text
@@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@Initial revision
@
text
@@
