head     40.0;
branch   ;
access   ;
symbols  ;
locks    davidj:40.0; strict;
comment  @@;


40.0
date     94.02.15.17.38.04;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial RCS
@


40.0
log
@initial RCS
@
text
@==id $Id: intuition_lib.sfd,v 38.16 92/08/28 13:05:02 peter Exp $
* "intuition.library"
==base _IntuitionBase
==include <intuition/intuition.h>
==include <intuition/classes.h>
==include <intuition/cghooks.h>
==include <intuition/classusr.h>
==bias 30
==public
* Public functions OpenIntuition() and Intuition() are intentionally
* not documented.
VOID OpenIntuition() ()
VOID Intuition( struct InputEvent *iEvent ) (A0)
UWORD AddGadget( struct Window *window, struct Gadget *gadget, UWORD position )
	(A0,A1,D0)
BOOL ClearDMRequest( struct Window *window ) (A0)
VOID ClearMenuStrip( struct Window *window ) (A0)
VOID ClearPointer( struct Window *window ) (A0)
BOOL CloseScreen( struct Screen *screen ) (A0)
VOID CloseWindow( struct Window *window ) (A0)
LONG CloseWorkBench() ()
VOID CurrentTime( ULONG *seconds, ULONG *micros ) (A0,A1)
BOOL DisplayAlert( ULONG alertNumber, UBYTE *string, UWORD height ) (D0,A0,D1)
VOID DisplayBeep( struct Screen *screen ) (A0)
BOOL DoubleClick( ULONG sSeconds, ULONG sMicros, ULONG cSeconds, ULONG cMicros )
	(D0,D1,D2,D3)
VOID DrawBorder( struct RastPort *rp, struct Border *border,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
VOID DrawImage( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
VOID EndRequest( struct Requester *requester, struct Window *window ) (A0,A1)
struct Preferences *GetDefPrefs( struct Preferences *preferences, WORD size )
	(A0,D0)
struct Preferences *GetPrefs( struct Preferences *preferences, WORD size )
	(A0,D0)
VOID InitRequester( struct Requester *requester ) (A0)
struct MenuItem *ItemAddress( struct Menu *menuStrip, UWORD menuNumber ) (A0,D0)
BOOL ModifyIDCMP( struct Window *window, ULONG flags ) (A0,D0)
VOID ModifyProp( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, UWORD flags,
	UWORD horizPot, UWORD vertPot, UWORD horizBody, UWORD vertBody )
	(A0,A1,A2,D0,D1,D2,D3,D4)
VOID MoveScreen( struct Screen *screen, WORD dx, WORD dy ) (A0,D0,D1)
VOID MoveWindow( struct Window *window, WORD dx, WORD dy ) (A0,D0,D1)
VOID OffGadget( struct Gadget *gadget, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID OffMenu( struct Window *window, UWORD menuNumber ) (A0,D0)
VOID OnGadget( struct Gadget *gadget, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID OnMenu( struct Window *window, UWORD menuNumber ) (A0,D0)
struct Screen *OpenScreen( struct NewScreen *newScreen ) (A0)
struct Window *OpenWindow( struct NewWindow *newWindow ) (A0)
ULONG OpenWorkBench() ()
VOID PrintIText( struct RastPort *rp, struct IntuiText *iText,
	WORD left, WORD top ) (A0,A1,D0,D1)
VOID RefreshGadgets( struct Gadget *gadgets,struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
UWORD RemoveGadget( struct Window *window, struct Gadget *gadget ) (A0,A1)
* The official calling sequence for ReportMouse is given below.
* Note the register order.  For the complete story, read the ReportMouse
* autodoc.
VOID ReportMouse( BOOL flag, struct Window *window ) (D0,A0)
==alias
VOID ReportMouse1( struct Window *window, BOOL flag ) (A0,D0)
BOOL Request( struct Requester *requester, struct Window *window ) (A0,A1)
VOID ScreenToBack( struct Screen *screen ) (A0)
VOID ScreenToFront( struct Screen *screen ) (A0)
BOOL SetDMRequest( struct Window *window, struct Requester *requester ) (A0,A1)
BOOL SetMenuStrip( struct Window *window, struct Menu *menu ) (A0,A1)
VOID SetPointer( struct Window *window, UWORD *pointer,
	WORD height, WORD width, WORD xOffset, WORD yOffset )
	(A0,A1,D0,D1,D2,D3)
VOID SetWindowTitles( struct Window *window, UBYTE *windowTitle,
	UBYTE *screenTitle ) (A0,A1,A2)
VOID ShowTitle( struct Screen *screen, BOOL showIt ) (A0,D0)
VOID SizeWindow( struct Window *window, WORD dx, WORD dy ) (A0,D0,D1)
struct View *ViewAddress() ()
struct ViewPort *ViewPortAddress( struct Window *window ) (A0)
VOID WindowToBack( struct Window *window ) (A0)
VOID WindowToFront( struct Window *window ) (A0)
BOOL WindowLimits( struct Window *window, LONG widthMin, LONG heightMin,
	ULONG widthMax, ULONG heightMax ) (A0,D0,D1,D2,D3)
*--- start of next generation of names -------------------------------------
struct Preferences  *SetPrefs( struct Preferences *preferences, LONG size,
	BOOL inform ) (A0,D0,D1)
*--- start of next next generation of names --------------------------------
LONG IntuiTextLength( struct IntuiText *iText ) (A0)
BOOL WBenchToBack() ()
BOOL WBenchToFront() ()
*--- start of next next next generation of names ---------------------------
BOOL AutoRequest( struct Window *window, struct IntuiText *body,
	struct IntuiText *posText, struct IntuiText *negText,
	ULONG pFlag, ULONG nFlag, UWORD width, UWORD height )
	(A0,A1,A2,A3,D0,D1,D2,D3)
VOID BeginRefresh( struct Window *window ) (A0)
struct Window *BuildSysRequest( struct Window *window, struct IntuiText *body,
	struct IntuiText *posText, struct IntuiText *negText,
	ULONG flags, UWORD width, UWORD height ) (A0,A1,A2,A3,D0,D1,D2)
VOID EndRefresh( struct Window *window, LONG complete ) (A0,D0)
VOID FreeSysRequest( struct Window *window ) (A0)
* The return codes for MakeScreen(), RemakeDisplay(), and RethinkDisplay()
* are only valid under V39 and greater.  Do not examine them when running
* on pre-V39 systems!
LONG MakeScreen( struct Screen *screen ) (A0)
LONG RemakeDisplay() ()
LONG RethinkDisplay() ()
*--- start of next next next next generation of names ----------------------
APTR AllocRemember( struct Remember **rememberKey, ULONG size, ULONG flags )
	(A0,D0,D1)
* Public function AlohaWorkbench() is intentionally not documented
VOID AlohaWorkbench( LONG wbport ) (A0)
VOID FreeRemember( struct Remember **rememberKey, BOOL reallyForget ) (A0,D0)
*--- start of 15 Nov 85 names ------------------------
ULONG LockIBase( ULONG dontknow ) (D0)
VOID UnlockIBase( ULONG ibLock ) (A0)
==version 33
LONG GetScreenData( APTR buffer, UWORD size, UWORD type,
	struct Screen *screen ) (A0,D0,D1,A1)
VOID RefreshGList( struct Gadget *gadgets, struct Window *window,
	struct Requester *requester, WORD numGad ) (A0,A1,A2,D0)
UWORD AddGList( struct Window *window, struct Gadget *gadget, UWORD position,
	WORD numGad, struct Requester *requester ) (A0,A1,D0,D1,A2)
UWORD RemoveGList( struct Window *remPtr, struct Gadget *gadget,
	WORD numGad ) (A0,A1,D0)
VOID ActivateWindow( struct Window *window ) (A0)
VOID RefreshWindowFrame( struct Window *window ) (A0)
BOOL ActivateGadget( struct Gadget *gadgets, struct Window *window,
	struct Requester *requester ) (A0,A1,A2)
VOID NewModifyProp( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, UWORD flags, UWORD horizPot, UWORD vertPot,
	UWORD horizBody, UWORD vertBody, WORD numGad )
	(A0,A1,A2,D0,D1,D2,D3,D4,D5)
==version 36
LONG QueryOverscan( ULONG displayID, struct Rectangle *rect, WORD oScanType )
	(A0,A1,D0)
VOID MoveWindowInFrontOf( struct Window *window, struct Window *behindWindow )
	(A0,A1)
VOID ChangeWindowBox( struct Window *window, WORD left, WORD top,
	WORD width, WORD height ) (A0,D0,D1,D2,D3)
struct Hook *SetEditHook( struct Hook *hook ) (A0)
LONG SetMouseQueue( struct Window *window, UWORD queueLength ) (A0,D0)
VOID ZipWindow( struct Window *window ) (A0)
*--- public screens ---
struct Screen *LockPubScreen( UBYTE *name ) (A0)
VOID UnlockPubScreen( UBYTE *name, struct Screen *screen ) (A0,A1)
struct List *LockPubScreenList() ()
VOID UnlockPubScreenList() ()
UBYTE *NextPubScreen( struct Screen *screen, UBYTE *namebuf ) (A0,A1)
VOID SetDefaultPubScreen( UBYTE *name ) (A0)
UWORD SetPubScreenModes( UWORD modes ) (D0)
UWORD PubScreenStatus( struct Screen *screen, UWORD statusFlags ) (A0,D0)
*
struct RastPort	*ObtainGIRPort( struct GadgetInfo *gInfo ) (A0)
VOID ReleaseGIRPort(  struct RastPort *rp ) (A0)
VOID GadgetMouse( struct Gadget *gadget, struct GadgetInfo *gInfo,
	WORD *mousePoint ) (A0,A1,A2)
==private
* system private and not to be used by applications:
APTR SetIPrefs( APTR ptr, LONG size, LONG type ) (A0,D0,D1)
==public
VOID GetDefaultPubScreen( UBYTE *nameBuffer ) (A0)
LONG EasyRequestArgs( struct Window *window, struct EasyStruct *easyStruct,
	ULONG *idcmpPtr, APTR args ) (A0,A1,A2,A3)
==varargs
LONG EasyRequest( struct Window *window, struct EasyStruct *easyStruct,
	ULONG *idcmpPtr, ... ) (A0,A1,A2,A3)
struct Window *BuildEasyRequestArgs( struct Window *window,
	struct EasyStruct *easyStruct, ULONG idcmp, APTR args ) (A0,A1,D0,A3)
==varargs
struct Window *BuildEasyRequest( struct Window *window, 
	struct EasyStruct *easyStruct, ULONG idcmp, ... )
	(A0,A1,D0,A3)
LONG SysReqHandler( struct Window *window, ULONG *idcmpPtr, BOOL waitInput )
	(A0,A1,D0)
struct Window *OpenWindowTagList( struct NewWindow *newWindow,
	struct TagItem *tagList ) (A0,A1)
==varargs
struct Window *OpenWindowTags( struct NewWindow *newWindow,
	ULONG tag1Type, ... ) (A0,A1)
struct Screen *OpenScreenTagList( struct NewScreen *newScreen,
	struct TagItem *tagList ) (A0,A1)
==varargs
struct Screen *OpenScreenTags( struct NewScreen *newScreen,
	ULONG tag1Type, ... ) (A0,A1)
*
*	new Image functions
VOID DrawImageState( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset, ULONG state,
	struct DrawInfo *drawInfo ) (A0,A1,D0,D1,D2,A2)
BOOL PointInImage( ULONG point, struct Image *image ) (D0,A0)
VOID EraseImage( struct RastPort *rp, struct Image *image,
	WORD leftOffset, WORD topOffset ) (A0,A1,D0,D1)
*
APTR  NewObjectA(struct IClass *classPtr, UBYTE *classID, struct TagItem *tagList)
	(A0,A1,A2)
==varargs
APTR  NewObject( struct IClass *classPtr, UBYTE *classID, ULONG tag1, ...)
	(A0,A1,A2)
*
VOID DisposeObject( APTR  object ) (A0)
ULONG SetAttrsA( APTR  object, struct TagItem *tagList ) (A0,A1)
==varargs
ULONG SetAttrs( APTR object, ULONG tag1, ... ) (A0,A1)
*
ULONG GetAttr( ULONG attrID, APTR object, ULONG *storagePtr ) (D0,A0,A1)
*
* 	special set attribute call for gadgets
ULONG SetGadgetAttrsA( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, struct TagItem *tagList ) (A0,A1,A2,A3)
==varargs
ULONG SetGadgetAttrs( struct Gadget *gadget, struct Window *window,
	struct Requester *requester, ULONG tag1, ...) (A0,A1,A2,A3)
*
*	for class implementors only
APTR	NextObject( APTR objectPtrPtr ) (A0)
==private
struct IClass *FindClass( UBYTE	*classID ) (A0)
==public
struct IClass *MakeClass( UBYTE *classID, 
	UBYTE	*superClassID, struct IClass *superClassPtr,
	UWORD instanceSize, ULONG flags ) (A0,A1,A2,D0,D1)
VOID AddClass( struct IClass *classPtr ) (A0)
*
*
struct DrawInfo *GetScreenDrawInfo( struct Screen *screen ) (A0)
VOID FreeScreenDrawInfo( struct Screen *screen, struct DrawInfo *drawInfo )
	(A0,A1)
*
BOOL ResetMenuStrip( struct Window *window, struct Menu *menu ) (A0,A1)
VOID RemoveClass( struct IClass *classPtr ) (A0)
BOOL FreeClass( struct IClass *classPtr ) (A0)
==private
VOID lockPubClass() ()
VOID unlockPubClass() ()
* Six spare vectors
==reserve 6
==public
==version 39
struct ScreenBuffer *AllocScreenBuffer( struct Screen *sc, struct BitMap *bm,
    ULONG flags )
	(A0,A1,D0)
VOID FreeScreenBuffer( struct Screen *sc, struct ScreenBuffer *sb ) (A0,A1)
ULONG ChangeScreenBuffer( struct Screen *sc, struct ScreenBuffer *sb ) (A0,A1)
VOID ScreenDepth( struct Screen *screen, ULONG flags, APTR reserved ) (A0,D0,A1)
VOID ScreenPosition( struct Screen *screen, ULONG flags, LONG x1, LONG y1,
	LONG x2, LONG y2 ) (A0,D0,D1,D2,D3,D4)
VOID ScrollWindowRaster( struct Window *win, WORD dx, WORD dy,
	WORD xMin, WORD yMin, WORD xMax, WORD yMax ) (A1,D0,D1,D2,D3,D4,D5)
VOID LendMenus( struct Window *fromwindow, struct Window *towindow ) (A0,A1)
ULONG DoGadgetMethodA( struct Gadget *gad, struct Window *win,
    struct Requester *req, Msg message ) (A0,A1,A2,A3)
==varargs
ULONG DoGadgetMethod( struct Gadget *gad, struct Window *win,
    struct Requester *req, ULONG MethodID, ... ) (A0,A1,A2,A3)
VOID SetWindowPointerA( struct Window *win, struct TagItem *taglist ) (A0,A1)
==varargs
VOID SetWindowPointer( struct Window *win, ULONG tag1, ... ) (A0,A1)

BOOL TimedDisplayAlert( ULONG alertNumber, UBYTE *string, UWORD height, ULONG time) (D0,A0,D1,A1)
VOID HelpControl( struct Window *win, ULONG flags ) (A0,D0)
==end
@
