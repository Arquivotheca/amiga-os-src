TABLE OF CONTENTS

specialfx.library/AllocFX
specialfx.library/AnimateFX
specialfx.library/FindVP
specialfx.library/FreeFX
specialfx.library/InstallFXA
specialfx.library/RemoveFX
specialfx.library/AllocFX                           specialfx.library/AllocFX

   NAME
	AllocFX -- Allocate memory and handle for a Special Effect.

   SYNOPSIS
	FXHandle = AllocFX(ViewPort, Type, Number, Error)
	d0                 a0        d0    d1      a1

	APTR AllocFX(struct ViewPort *, ULONG, UWORD, ULONG *);

   FUNCTION
	To allocate the data needed to control a 'special effect'. This builds
	a handle, and a list of pointers to the various structures needed.

   INPUTS
	ViewPort - ViewPort the effect will be used on.
	Type   - The type of effect desired, as follows:
	SFX_ColorControl - Builds a copperlist to alter the colour of
	                  specified pens at specified lines, in the maximum
	                  possible colourspace of the chip set.

	SFX_LineControl - Builds a copperlist to scroll a group of lines
	                  horizontally, independant from the rest of the
	                  ViewPort.

	SFX_IntControl  - Builds a copperlist to cause a copper interrupt at the
	                  specified line. Note that the interrupt is not enabled
	                  until you have installed an interrupt server with
	                  exec.library/AddIntServer().

	SFX_FineVideoControl
	                - Builds a copperlist to create a subset of the effects
	                  that can be generated with graphics.library's
	                  VideoControl() function. See <specialfx/specialfx.h>
	                  for a list of the effects.

	SFX_SpriteControl
	                - Builds a copperlist to allow the reuse of sprites in
	                  a ViewPort. This is similar to VSprites, but this can
	                  also handle AA wide sprites which VSprites do not
	                  support.

	Number - The number of elements in the effect.
	Error - Pointer to a ULONG for secondary error information

   RESULT
	FXHandle - will point to an array of 'Number' pointers to structures
	           associated with the effect type.
	           If NULL, then Error will contain an error code.

   SEE ALSO
	<specialfx/specialfx.h> InstallFXA() FreeFX()

specialfx.library/AnimateFX                       specialfx.library/AnimateFX

   NAME
	AnimateFX -- Animate an list of 'Special Effects'

   SYNOPSIS
	AnimateFX(DisplayHandle)
	          a0

	void AnimateFX(APTR);

   FUNCTION
	To animate the list of 'Special Effects' pointed to by the Handle
	obtained from InstallFXA().

   INPUTS
	DisplayHandle - The handle obtained from InstallFXA().

   RESULT

   NOTES
	This function will update the display according to the input. There is
	no need to remake the display yourself afterwards.

	The method of animation varies depending on the 'Special Effect' type.
	Each is described in <specialfx/specialfx.h>.

	This function will also update the intermediate copper lists in the
	ViewPort, so that when a screen is dragged by the user, the latest
	changes are preserved. However, this consumes processor time, as the
	list needs to be updated for every call to AnimateFX(). Under
	graphics.library V40, you can use the VC_IntermediateCLUpdate
	VideoControl() tag to disable intermediate copperlist updates.

   SEE ALSO
	<specialfx/specialfx.h> RemoveFX() InstallFXA()
	graphics.library/VideoControl() <graphics/videocontrol.h>

specialfx.library/FindVP                             specialfx.library/FindVP

   NAME
	FindVP -- Finds the ViewPort that an interrupt occurred in.

   SYNOPSIS
	ViewPort = (View, LineNum)
	d0          a0    a1

	struct ViewPort *FindVP(struct View *, UWORD *);

   FUNCTION
	To find the ViewPort that an interrupt from InterruptControl
	occurred in.

   INPUTS
	View - The view this all happens in
	LineNum - Pointer to a UWORD containing the line the 
	          interrupt occurred on

   RESULT
	ViewPort - The ViewPort the interrupt occurred in, or NULL if error.
	LineNum - replaced with the Line number in the ViewPort that the
	          interrupt occurred on.

   NOTES
	This function is safe to be called in an interrupt handler. In fact,
	if you have more than one ViewPort using InterruptControl features, you
	should call this function to determine which ViewPort the interrupt
	occurred in.

	You should call graphics.library/VBeamPos() as soon as your interrupt
	server is called if you are using this function to ensure the LineNum
	passed to FindVP() is correct.

   SEE ALSO
	<specialfx/specialfx.h> AnimateFX() RemoveFX()
	graphics.library/VBeamPos()

specialfx.library/FreeFX                             specialfx.library/FreeFX

   NAME
	FreeFX -- Free the memory associated with the Special Effect

   SYNOPSIS
	FreeFX(FXHandle)
	       a0

	void FreeFX(APTR);

   FUNCTION
	To free the data associated with a 'Special Effect'.

   INPUTS
	FXHandle - the handle obtained from AllocFX(). Passing NULL is legal.

   RESULT

   SEE ALSO
	AllocFX()

specialfx.library/InstallFXA                     specialfx.library/InstallFXA

   NAME
	InstallFXA -- Installs the initial settings of the Effect
	InstallFX -- varargs stub for InstallFXA()

   SYNOPSIS
	DisplayHandle = InstallFXA(View, ViewPort, TagItems)
	d0                         a0    a1        a2

	APTR InstallFXA(struct View *, struct ViewPort *,
	                APTR *, struct TagItem *);

	DisplayHandle = InstallFX(View, ViewPort, Tag1, ...)

	APTR InstallFX(struct View *, struct ViewPort *, ULONG, ...);

   FUNCTION
	To install the intial settings of the list of special effects in the
	ViewPort.

   INPUTS
	View          - The View of the display
	ViewPort      - The ViewPort of the display
	TagItems      - A pointer to an array of SFX_ tags.

   TAGS
	SFX_InstallEffect - ti_Data is an FXHandle obtained from AllocFX()

	SFX_InstallErrorCode - ti_Data points to a ULONG that will contain
	                       an error code if DisplayHandle is NULL.

   RESULT
	DisplayHandle - a DisplayHandle if succesful, else NULL, in which case
	                the ULONG pointed to by SFX_InstallErrorCode
	                (if used) will contain an error number.
	                DisplayHandle will be passed to AnimateFX() for
	                animating the display.

   NOTES
	After calling InstallFXA(), you should remake the display, either
	with intuition's MakeScreen()/RethinkDisplay() if using intuition
	screens, or with graphics' MakeVPort()/MrgCop()/LoadView() if using
	a custom View and ViewPort.

	This function will not work with a UserCopperList. Either use
	a UserCopperList for your own tricks, or use specialfx.library, but
	do not mix-and-match.

   SEE ALSO
	<specialfx/specialfx.h> AllocFX() AnimateFX() RemoveFX()

specialfx.library/RemoveFX                         specialfx.library/RemoveFX

   NAME
	RemoveFX -- Removes a 'Special Effect', and frees the memory.

   SYNOPSIS
	RemoveFX(Handle)
	         a0

	void RemoveFX(APTR);

   FUNCTION
	To remove the 'Special Effect' group, set up in InstallFXA().

   INPUTS
	Handle - the handle obtained from InstallFXA()

   RESULT

   NOTES
	After calling RemoveFX(), you should remake the display, either
	with intuition's MakeScreen()/RethinkDisplay() if using intuition
	screens, or with graphics' MakeVPort()/MrgCop()/LoadView() if using
	a custom View and ViewPort.

	After calling this function, the Handle is no longer valid. If you want
	to redisplay the effect, get a new handle from InstallFXA().
	
   SEE ALSO
	InstallFXA()

