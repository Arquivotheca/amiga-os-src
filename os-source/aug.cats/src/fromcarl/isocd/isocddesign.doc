1) Examine:	(source directory)
	A) Recursively parse directories, building lists of DIRNODES, first setting
	   up root dir DIRNODE:
		1) Scan directory entries within dir:
			a) Create MLIST for this dir, add to MLIST of dirs.
			b) Scan entries:
				i)  add DIRNODE for entry.
				ii) if DIR, -> (1)
				    this returns the MLIST for the dir, store the first node
				    in the Extent.  Also, DirCount++ else FileCount++.
			c) returns the MLIST for the dir

	B) Build Path Table, sorting directories alphabetically, and connecting
	   NextInDir's:
		1) Alloc Path Table, DirCount entries large.
		2) Add in root dir as first entry, not sure what its Parent # is.
		3) Loop through Path Table entries, using FirstEntry pointer in table
		   to get to list:
			a) Sort dir list alphabetically.
			b) Scan list:
				i)   connect NextInDir's.
				ii)  if DIR, add ptr to 1st node to Path Table,
				     placing loop # in Path Table Parent #.
				     Extent must now hold offset into Path Table.
				iii) if FILE, store loop # in Extent.
			c) the list will terminate normally since the last entry
			   will not have its NextInDir adjusted.
		
	C) Following Path Table, flatten out and re-arrange according to rules,
	   creating a main list:
		1) using FirstEntry pointer in table to get to list, re-arrange list
		   according to rules.
		2) merge with main list.

	D) Free pool of dir MLIST's.

2) Save To File:
	A) Save DirCount (for ease of rebuilding PathTable)
	B) Save Path Table Name and Parent # for all Path Table entries.
	C) Save blank line as separator.
	D) Loop through main list, saving Name, Extent #, and Type #.

3) Load From File:
	A) Free old Path Table and old main list (if applicable).
	B) Load Path Table Names and Parent #'s, until a blank line.
	C) Load entries into a new main list:
		1) Alloc Node, add to list, load Type #.
		2) If File, AllocVector space for name, load Extent.
		3) If Dir, load extent, find name pointer from Path Table
		   (with extent).
		4) Using Extent into Path Table, move FirstEntry pointer into
		   NextInDir, and the Node address into FirstEntry.
		   This will produce a backwards single linked list representing
		   the original directory structure.
	D) Following Path Table, alphabetically sort each string of files.

4) Build:
	A) Determine PathTableSize
	B) Scan main list, determining positions.
	C) Write headers/etc.
	D) Write Path Table.
	E) Write Root Dir entry.
	F) Write from main list.

	NOTE: Need to remove "re-use" of Extent to hold position, now
	have a Position field.  Also MUST derive entire tree order from
	the PathTable.  (When building each DIR entry).
