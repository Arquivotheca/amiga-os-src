Parts of ISOCD:
	ISOCD

Support for ISOCD:
	CDTV.TM
[
CDTV.TM is the trade mark file for CDTV disks.  This file allows the application
to run on a CDTV.  ISOCD will place this file close to the beginning of the
CD since it is one of the first files read at boot time.  If this file is
present in the current directory, it does not need to be present in the
directory of files that are created into the ISO image.  If properly found,
it will show up in the examined list as <Trade Mark>.
]


ISOCD:
	- overview
[
ISOCD will examine a directory or partition and create an ISO-9660 image or
partition, ready to be mastered into a CDTV disk.  The ISO-9660 image will
have the necessary data to meet the ISO-9660 standard.  A disk produced
with this software can be examined on other systems, aside from the Amiga,
such as Macintosh, Unix, or IBM compatible computers.  The existing CD-ROM
file systems for the Amiga can also read these disks.  Most importantly,
the SimCD simulator can treat a partition created with ISOCD as if it was
the CD0: drive of a CDTV.
ISOCD has several very important strengths.  They are:
	«» You can graphically re-arrange the actual order of files
	«» You can re-arrange the files with an outside editor
	«» These layout files can be re-used
	«» It is very fast
	«» It uses a minimal amount of memory for the image creation
	«» It allows custom setup of the CDTV CDFS
	«» There are options for grouping and ordering of files
	   automatically
	«» Optimize option available with OptCD to allow run-time
	   monitoring of your programs with the simulator and optimize
	«» The ISO headers can be produced separately to allow a small
	   initial data track for CDs that are audio compatible.
	   
]
	- usage philo
[

]
	- memory/resource usage
[

]
	- examples of use
[

]
	ISO-9660
		- what/why
[

]
		- brief overview
[

]
	Actions
		- general procedures
[
Usage of ISOCD is rather simple.  The following steps represent a simple
build:
	1) Check that the options are set correctly.
	2) Set the Source directory.
	3) Examine.
	4) Rearrange files as desired.
	5) Set the Image to a file or partition.
	6) Build.
After an examine, you can save the list of files out as a layout file.
This file can be externally edited as to the order of the files and
reloaded or you can use the editor within ISOCD.  Later usage on the same
project can use the layout file so that you do not have to re-order
anything but new files.
]
		- example builds
[

]
		- philo
[
The ability to re-arrange the layout of files in the image is important to
optimizing the execution timing of an application.  The directory structure
of the source material is always preserved, but the physical layout of
files is completely independent.  This means that the files used first on
booting should probably be at the head of the list, closer to the center of
the CD.  This minimizes the deadly seek time inherent to CD technology.  If
the files are arranged properly, a great number of seconds can be shaved
from the load time of your title.  A little thought on the physical layout
of files can actually create a responsive title - one that actually fits
the needs of the consumer.
]
		- system setup
[
ISO-9660 images or partitions can be very large.  It is wise to have more
than twice as much hard drive space as your application actually uses.  It
is even more wise, in fact almost Guru thinking, to use a separate drive
for the image.  This reduces the risk involved with such large projects.
ISOCD is very meager with its memory usage, but if there are a tremendous
number of source files, you should have at least 2 megabytes of memory.
In case you feel overloaded with all of the files needed for a multimedia
application, consider Hypermedia's Fred Fish CD.  The 1.5 disk created had
almost 600 megabytes and 67,000+ files!  ISOCD built the image in just a
little over two hours.  The Fred Fish Online CD was 415 megabytes and 4,000
files.  It took ISOCD 16 minutes.  Things are just relative I guess.
]
		Options
			- they are saved w/layout file
			- how they are related to examine
[
Options are saved with the layout file.  They control the examine process,
the header of the ISO image, and the interface to the CDFS in CDTV during
the boot process.  Directory ordering and grouping must be set before an
examine, and the other options must be set before a build.
]
			ISO
				- relate to PVD and header
[
ISO-9660 provides an area in the header of an image called the Primary
Volume Descriptor.  Here you specify the title, publisher, etc.
]
				Dir Order/Rev
					- Alpha/Size/Date/None
					- Reverse
[
The directory order present on the original source is always preserved.
ISO-9660 specifies the ordering of files and directories to be
alphabetical.  But we are free to place the physical locations of the files
and directory entries.  When examining and building the ordered list of
files, ISOCD can perform some automatic arrangement of files.  Under Dir
Order, you can specify file arrangement within a directory to be according
to alphabetical, size, date, or how they are originally.  Order is from
A-Z, least to largest, or oldest to most recent.  This can be reversed.
Of course, you are free to arrange the files after an examine.
]
					- how this affects arrangement, not LIST #?
					- how this is per directory, not over all
[
Remember that this is the physical position on the CD, not the order
"LIST #?" would produce, since LIST uses the ISO directory structure to
report files.  Also note that these orderings are per directory, not over
the entire CD.
]
				Dir Group/Rev
					- .Info/Dirs/Ext/None
[
In conjuction with ordering, you can group files together within a
directory.  You can group ".Info" files, directories, common file
extensions, or not at all.  Grouping directories is the most useful since
the CDFS uses a directory cache system that may be able to load all of the
current directories in one read if they are grouped together.  This is
obviously application dependent.
]
				Volume ID
					- detail/limits/purpose
[
Volume ID is the CD title, 32 characters maximum.  The remaining
descriptors are limited to 128 characters.
]
				Volume Set
[
This CD may be part of a set.
]
				Volume Pub
[
The publisher is specified here.
]
				Volume Prep
[
Indicate the actual preparer of the data.
]
				Volume App
[
Indicate the application name.
]
				PVD
					- what/detail/limits/purpose
[
Though only one PVD is needed for a CD, you can specify more than one for
data redundancy to improve reliability.  CDTV will try another PVD is there
is an error reading one.
]
				Base Sector
				Split File
					- what/how
[
Base Sector and Split File provide the ability to place the bulk of the
application in another track than the first.  You specify a position for
the data track in the Base Sector and a file for the header.  This gives
you two data tracks, one which is the header and must be placed at the
beginning of the CD, and another that can be placed after audio tracks.
This renders a CD that the consumer can use as an audio CD and it really
is a CDTV disc as well!
]

			CDFS
				- how options are stored/passed to CDFS
[
The CDFS in CDTV allows custom configuration of many variables through a
data area in the PVD.  You can set them here to tailor CDTV to your
application.
]
				Data Cache
					- what/detail/limits/purpose
[
CDFS has a cache for reads, specified in number of sectors.  Keep in mind
that each sector cached represents 2048 bytes of memory that is not
recoverable.  There can be from 1 to 127 sectors cached.  The default value
is 8 sectors.
]
				Dir Cache
					- what/detail/limits/purpose
[
More importantly, CDFS caches directories like AmigaDos 2.1 and 3.0.  You
can specify from 2 to 127 sectors to be cached, each using 2048 bytes.  On
a CD, there is always seek timing to be considered.  If all directory
entries for an application can be read into the cache in one read, the
savings in access time is tremendous.  Properly used, the CD can be almost
as responsive as a hard disk.  Again, this uses memory that cannot be
recovered by the application.  The default value is 16 sectors.
]
				File Lock
					- what/detail/limits/purpose
[
File locks are cached, from 1 to 9999 locks, each using 32 bytes.  The
default value is 40 locks.
]
				File Handle
					- what/detail/limits/purpose
[
File handles are cached as well, from 1 to 9999 handles, each using 24
bytes.  The default value is 16 handles.
]
				Retries
					- what/detail/limits/purpose
[
You can specify from 0 to 9999 retry attempts on read failures.  No, memory
usage is the same.  The CD Cruelty factor goes up if the retry is very high
though.  The default value is 32.
]
				Table
[
     Option   Default   Minimum   Maximum
-----------------------------------------
 Data Cache   8         1         127
  Dir Cache   16        2         127
  File Lock   40        1         9999
File Handle   16        1         9999
    Retries   32        0         9999
]
				Direct Read
					- what/detail/purpose
					- changes needed to application
[
This option allows an application to wring the ultimate in performance out
of the original CDTV.  CDTV has a bug in the CD drive hardware that
occasionally will not transfer the last few bytes.  The system handles this
for all applications, but at a performance penalty.  There are three ways to
read data at the optimal, unprotected, rate:
	«» Use the cdtv.device directly with the CDTV_READ or CDTV_READXL
	   commands.
	«» Turn on Direct Read for an opened file by sending a
	   ACTION_DIRECT_READ packet for the file.
	«» Turn on Direct Read for the entire CD, with this option.

When reading directly, you must pad your buffers and your disk data by the
value READ_PAD_BYTES, and request READ_PAD_BYTES more bytes than you would
otherwise.  Thus, any missing bytes are part of the padding, and ignored.
READ_PAD_BYTES is defined in <devices/cdtv.h>.  ACTION_DIRECT_READ is
defined in <>.

You must understand that normal workbench commands, LoadSeg, and other
programs DO NOT know to handle their reads differently with Direct Read on
for the entire CD.  This means writing your own custom loader and executing
only your programs on a CD with Direct Read set.  This means, for most
practical purposes, that this option is not really usable.  We still HIGHLY
recommend using CDXL (CDTV_READXL) and direct CDTV_READ's within your
application in any case.  It is easier and a lot faster!
]
					- meaning on new platforms
[
Any new CDTV machines or CD-ROM drives do not suffer under this curse.  Of
course, using cdtv.device is still an easier route.
]
				Trade Mark
					- what/detail/purpose
[
The Trade Mark file is necessary for the application CD to boot under CDTV.
It is removed from the screen with RMTM on booting, please refer to the CDTV
documentation.  ISOCD places this file outside of the directory at the very
inside of the CD for faster booting.  The file CDTV.TM is the trade mark
file.  If you place it in the current directory when you run ISOCD, it does
not need to be in the source directories.
]
				Fast Search
					- what/detail/purpose
[
Fast Search is an optimization available if the volume is prepared with
directories that are sorted case insensitive.  ISOCD works this way so it
is normally on.  This optimization enables CDFS to stop its search for a
file in a directory if it passes the position alphabetically.
]
				Speed Independent
					- what/detail/purpose
					- meaning on new platforms
[
CDTV uses a CD drive that reads in data at 75 sectors a second, or
150K/second.  As we all know, faster drives are being produced all of the
time.  This option lets any future machine know that the application would
be more than happy with faster reads.  This is up to you, we will not twist
your arm.
]
					- changes needed to application
[
Of course, all of the caveats of good programming apply if you want to be
speed independent.  The 75hz timer within CDTV will always be available for
easy timing control, independent of NTSC or PAL.  We recommend you use this,
it is CDTV_FRAMECALL with cdtv.device.
]
				Restore Defaults
					- what
[
This resets all of the CDFS options to their defaults.  It is available for
those times that real confusion sets in.
]

		Load/Save Layout
			- how to use
[
Layout files contain all of the information necessary to build an ISO
image.  The order list is editable on the outside by any TEXT editor, not a
word processor, unless it can save as a text file.  ISOCD will not understand
any particular word processor format or special codes.
]
			- examples
[
Here is an example layout file.  Using alpha order and dir grouping, I
examined a 1.3 devs directory.  Your mileage may differ.

____________________________________________________________________________
0 0 1 0
2 1024
8 16 40 16 32
0 1 1 0
CDTV_TEST
Test Set 1 of 4
Pantaray, Inc.
Kenneth Yeast
Application Name
TestHeader.img
Test.img
0004	System1.3:devs
 0001	<Root Dir>
 0001	clipboards
 0001	keymaps
 0001	printers

H0000	<ISO Header>
P0000	<Path Table>
P0000	<Path Table>
C0000	<Trade Mark>
D0001	<Root Dir>
D0002	clipboards
D0003	keymaps
D0004	printers
F0001	clipboard.device
F0001	kickstart
F0001	MountList
F0001	narrator.device
F0001	parallel.device
F0001	printer.device
F0001	ramdrive.device
F0001	serial.device
F0001	system-configuration
F0003	cdn
F0003	ch1
F0003	ch2
F0003	d
F0003	dk
F0003	e
F0003	f
F0003	gb
F0003	i
F0003	is
F0003	n
F0003	s
F0003	usa0
F0003	usa1
F0003	usa2
F0004	Alphacom_Alphapro_101
F0004	Brother_HR-15XL
F0004	CalComp_ColorMaster
F0004	CalComp_ColorMaster2
F0004	Canon_PJ-1080A
F0004	CBM_MPS1000
F0004	Diablo_630
F0004	Diablo_Advantage_D25
F0004	Diablo_C-150
F0004	EpsonQ
F0004	EpsonXOld
F0004	EpsonX[CBM_MPS-1250]
F0004	generic
F0004	Howtek_Pixelmaster
F0004	HP_DeskJet
F0004	HP_LaserJet
F0004	HP_PaintJet
F0004	HP_ThinkJet
F0004	ImagewriterII
F0004	Nec_Pinwriter
F0004	Okidata_293I
F0004	Okidata_92
F0004	Okimate_20
F0004	Quadram_QuadJet
F0004	Qume_LetterPro_20
F0004	Toshiba_P351C
F0004	Toshiba_P351SX
F0004	Xerox_4020
E0000	65536    
____________________________________________________________________________
]
			- format
			- how to edit externally
[
The layout file is a text file that contains the options, directory
structure, and editable order list.  The first two parts of the file are
NOT to be changed, this would produce unpredictable results.  The first
part of the file is 11 lines of option data.  The next section is a listing
of the directory structure, terminated with a blank line.  The third
section is yours to re-arrange, it is the order of files/dirs/etc. on the
CD.
The actual text in each of the lines should NOT be changed, only the order
of the text lines is changeable.  Also, no line should be deleted or added.
This should only occur within ISOCD.
]
			- how to use for batch
[
Once you have your order figured out and saved in a layout file, you can
automate the build process during development.  Remember to specify the
image file or partition before saving the layout file.  Assuming your
layout file is called Test.lay, simply call ISOCD as follows:
	ISOCD -lTest.lay -b
This would build an image without any interaction, allowing its usage in an
arexx script or batch file.
]

		Examine
			- what/how
			- connection w/options
			- abort
[
This will examine the source directory and build the list necessary to
create an ISO-9660 image.  You can alternately load a layout file from a
previous examine.  The examine will take into account the directory order
and grouping specified in the options.  The examine will display each
directory that it is loading and you can abort at any time.  An examine
will clear any previous list in memory.
]
			- info in status
[
After an examine, Status will report the number of bytes in the image, the
number of directories, and the number of files.
]
			- too deep
[
The ISO-9660 standard specifies that directories cannot be greater than
eight deep.  ISOCD will allow any number deep, after all - this is the
Amiga, but will report if you have violated the standard.
]

		Optimize
			- bag of worms
[
Squiggle, squiggle.
]

		Build
			- what/how
[
Build actually creates the ISO image file or partition.  Remember that an
image file can be very large.  If an image is written to a partition, then
that partition can then be simulated as CD0: or as just an ISO volume with
SimCD.  I actually use ISOCD to backup my source to an extra partition.
Refer to the SimCD documentation on the usage of CDFS and the simulator.
While building, ISOCD will display a progress bar and can be aborted at any
time.
]
			- usage of progress
[
The progress bar does not show writing of the directory blocks, so if you
have all of your directories at the beginning of a list, there will be a
small delay before the progress bar registers.
]
			- warning - warning - warning
[
Please exercise unbelievable caution when using build on a partition.  Once
started, it will obliterate anything that was previously there.  Use it as
you would use format.
]
			- file/partition
			- blurb about unreadable partition (cancel then ok)
[
When you specify an image, you can enter a file name or a partition, such
as CDN:.  Because the file requester is dual purpose, entering a partition
that is not an AmigaDos partition in the Drawer text will cause the
requester to attempt reading of the partition.  Of course, since it is not
able to read the files in that partition, the requester will report an
error.  Simple choose Cancel, then OK in the requestor.  Or, as we have
found, enter the partition name, such as CDN:, in the File text.
]
			- cannot use on CD0:
			- diskchange for CD0: (or any other dependent)
[
If you are using the simulator, remember to write to the partition that is
being simulated, such as CDN:.  CD0: is a read only partition based on the
ISO partition and cannot be written over.  Also remember to diskchange CD0:
after a build, since ISOCD does not know about any dependent partitions
like CD0:.
]

	Files
		Source
			- what/why
[
This sets the source directory to be examined.  If you have previously
examined, changing the source will clear the list.  All files and
directories in the source will be examined.
]
			- defaults to source
[
If you do not specify a source directory on the command line, it will
default to the current directory.
]
			- changes w/layout (load)
[
Remember that the layout file stores all of the information, so loading a
layout file will set the source directory to the one for that list.
]

		Image
			- what/why
			- blurb about unreadable partition (cancel then ok)
[
When you specify an image, you can enter a file name or a partition, such
as CDN:.  Because the file requester is dual purpose, entering a partition
that is not an AmigaDos partition in the Drawer text will cause the
requester to attempt reading of the partition.  Of course, since it is not
able to read the files in that partition, the requester will report an
error.  Simple choose Cancel, then OK in the requestor.  Or, as we have
found, enter the partition name, such as CDN:, in the File text.
]

		Layout
			- what/why
[
This sets the layout file name, refer to Load/Save Layout for more
information.
]

	Path/File
		- what/why/how
[
This gadget shows you the list of all entries to be written to the ISO
image.  It also allows you to re-arrange the order of everything, except
for the ISO headers, always at the beginning, and empty space at the end of
the image.
]
		- usage (moves)
[
To move a file or set of files: first click on all of those to be moved,
then click where you want them to go, while holding down the CTRL key.
ISOCD will move the marked entries after the entry clicked on with CTRL.
If you wish to use SHIFT or ALT, instead of CTRL, specify -q1 for SHIFT,
or -q2 for ALT on the command line.  You can also select an entire range by
simply holding down the mouse and moving over the entries.  The list will
scroll for you, accelerating if the mouse continues moving outside the
gadget.  To deselect an entry, click on it again; extended select works in
reverse as well.
]
		- sizes
[
ISO-9660 deals with everything in sectors of 2048 bytes.  All files consume
an even number of sectors; this means a file of 920 bytes uses 2048 bytes
on the CD.  This applies to all items on a CD, such as Path tables or
directories.  ISOCD displays the file sizes as they originally are, or
there is a menu that lets you display the sizes rounded to the sectors
occupied or even dates instead.  Amiga-S sets ISOCD to display actual
sizes, Amiga-E sets to rounded sizes, and Amiga-D sets to display dates.
]
		- dates
[
Dates are displayed like the LIST command, except for "today", etc.
]
		- Path #
[
The Path number is an ISO convention.  For entries such as Path Table or
Empty Space, they have no meaning.  But for a directory, it is the
directory number and for files, the directory they belong under.  This
preserves the directory structure since ISOCD internally remembers what
directory a directory belongs under.  In other words, if a given directory
has a path number of 12, any file with a path of 12 is under that
directory.
]
		- ISO Header/Path Table/Trade Mark/Root Dir/Empty Space
[
Besides directories and files, there are five other entry types.
The ISO Header is shown for completeness, since you cannot move it.  It
encapsulates the 16 blank sectors, the PVD's, and the terminating volume
descriptor.
The Path Tables provide a short cut for accessing the CD.  A second one is
provided for reverse byte systems, such as Intel based computers.  This can
be removed by -p on the command line.  We must caution you that many disk
mastering systems require the extra path table in order to press the CDs.
The Trade Mark file is necessary for your application to run on a CDTV.  It
does not need to be in the list of files in your source directory if it is
in the current directory.  The trade mark file is called CDTV.TM and is
provided with ISOCD.
The Root Dir is the root directory of the CD.  Yes, everyone gets one.
Empty Space is provided at the end because older CDTV units could
experience problems if someone attempted reading past the end of a CD.
Empty Spaces can also be added to other places, refer to Add/Remove Spaces
below.
]
		- arrangement philosophy
[
You will notice that the Path Tables, Trade Mark, and Root Dir are placed
at the beginning of the list.  This improves boot time and running
performance.  It is also a wonderful idea to hand place the files used at
boot time in order of usage at the beginning of the list, after any
directories that need to be cached at the beginning.  This takes a certain
amount of thinking about how your application starts and might lead you to
try some different philosophies.  What works on a hard drive, such as echo
commands and the like, are ridiculous on a CD.  Consider just one program
in your startup-sequence that handles everything possible.  Remember that
CDs are not changeable by the user, so a lot of the methods that are
necessary for a changing environment such as a hard disk, are not useful on
a CD.
]
		- how this can be saved in layout
[
The layout file will contain your arrangement of files so that you do not
have to re-arrange entries again.  If you are loading an older layout file
for a source directory and there are new files or some have been deleted,
ISOCD will compensate.  New files will be placed at the end, you will need
to remember to move them to where you would like.  The actual directory
structure cannot change, as this would changed all of the path numbers,
described above.  If you have added or removed any directories, you will
need to examine again.
]
		- how this can be externally edited
[
The layout file can be externally edited by your favorite TEXT editor if
you wish.  Refer to Load/Save Layout.
]

	Status
		- meaning of ALL messages
[
The first line reports the size of the ISO image, number of directories,
and number of files.  The second line reports any usage errors, refer to
Status Errors.
]

	Menus
		Amiga-? "About..."
[
About box.  Ben Phister helped at Commodore to shape ISOCD and Chris Henry
of Hypermedia, provided invaluable beta testing with the Fred Fish CD's.
]
		Amiga-Q "Quit"
[
Quit the program.  Also available to leave the options window like CANCEL.
]
		Amiga-S "Display Sizes"
[
Display the size of entries, such as file sizes.
]
		Amiga-E "Display Sizes Rounded"
[
Round the entry sizes to the actual space occupied on the CD, since the CD
uses sectors of 2048 bytes.
]
		Amiga-D "Display Dates"
[
Display dates in the LIST format instead of sizes.
Refer to -d option in batch options to a discussion of dates and CDTV.
]
		Amiga-F "Find File..."
			- dos #?
[
This allows you to jump to a given entry in the list, useful if you have a
large set of files.  It uses the AmigaDos search pattern, case insensitive,
just like dir.  Next and Prev is available to continue the search.
Menu items available:
	Amiga-N "Next"
	Amiga-P "Prev"
	Amiga-H "Help"
	Amiga-Q "Done"
]
		Amiga-A "Add Spaces..."
[
ISOCD provides a special capability for future use by allowing blank spaces
within an ISO image.  Adding spaces after certain files would allow someone
to update just that file within an image being used for simulation.  In
this way, someone could just update the size field in the directory and
rewrite a new version of a file instead of going through an entire build.
A future utility might just provide this capability.
To add spaces, simply mark those files that need spaces, choose this option,
and specify the sizes.  If no files were marked, one empty space would be
added to the beginning of the list to be moved later.  The files marked
would be unmarked after an add.
]
		Amiga-R "Remove Spaces"
[
Likewise, mark those Empty Spaces to be removed, then choose this option.
If none are marked, ISOCD will remove the first available, keeping in mind
that one is always needed at the end of the CD.
]
	Batch
		- all shell options
[
USAGE: ISOCD [options] <directory>
  -l<file> Layout file
  -o<file> ISO-9660 output file or device
  -s<file> Split ISO descriptor file
  -b       Build image (requires layout file (-l), will exit when done)
           NOTE: Use this option with the greatest of care...
  -d       Adjust dates to match CDFS 24.x date error
  -x       Verbose debugging information
  -f<n>    # of sectors in file buffer [128]
  -m       Use mimimum size window
  -q<n>    Change qualifier for insert in lists [0]
           (0=CTRL, 1=SHIFT, 2=ALT)
  -t       Do not use topaz font, use system font instead
  -p       Do not add Path Table for reverse byte systems
  -v       Do not append version number ";1" to file names

Options:
  <directory>
	This is the directory or partition to be examined.  If not specified,
will assume current directory.

  -l<file>
	Load layout file previously saved by ISOCD.  ISOCD will ignore any
missing files from the layout file list.  Any new files will be appended to
the end of the list.  The directory structure cannot change however, there
can not be any missing or new directories in the list.  This changes the
directory numbering scheme of ISO-9660 such that ISOCD would not be able to
reconfigure a given list.  If directories themselves have changed,
re-examine and re-order the list.  This option is often used with -b to
automatically build after loading the layout list.  In this fashion, builds
can occur within batch file or arexx scripts, automating program
simulations.  Layout files specify the build image within the file, so the
-o<file> option is ignored.
Example:
	ISOCD -lTest.lay -b

  -o<file>
	This is the output image file or partition to be built.  Building
to a partition allows you to use SimCD and simulate that partition as CD0:
after a build.  Remember to diskchange CD0: after a build.  Please use
great care when writing to a partition.  ISOCD will blindly trust that you
are prepared to obliterate that partition with an ISO-9660 image.  If the
partition has not been used for an ISO image before, ISOCD will ask before
proceeding with the build.  But it will ask only once.  The build process
should be used by professionals, do not try this at home.

  -s<file>
	ISOCD can create a separate header image file.  Please refer <>.

  -b
	This will automatically build an image file if you have specified a
layout file with -l<file>.  This option is commonly used within a batch or
arexx script, especially when doing repetitive testing with the simulator.
Again, it cannot be stressed enough, please use this with GREAT CARE.

  -d
	The CDFS 24.x, or CD File System, in CDTV V1.00 does not report
ISO-9660 dates properly.  It will show a date one day later then is correct
in most cases.  ISOCD, by default, will create correct ISO-9660 dates.  With
this option, it will create incorrect dates to roughly correct for the CDFS
error.  The dates will still not be correct around leap days though.  I
feel that this option should probably not be used, especially for titles
that are used on other machines.

  -x
	This turns on some primitive and profuse debugging text.  If
something is not happening correctly, this will help to locate where things
go wrong.  I assume that you are using enforcer, mungwall, io_torture, etc.
anyway for your good health and mine.

  -f<n>
	ISOCD uses a 256K buffer, 128 - 2K sectors, for its file transfers.
Performance can be improved with larger buffers, if desired.

  -m
	ISOCD asks for a fat window when running so that the file list is
as large as possible.  -m will use a minimum size window for simpler usage.
I'll admit, I use -m personally.

  -q<n>
	When specifying where a group of marked files are to moved to in
the file list, you click where they are to go while holding down the CTRL
key.  This allows you to use another modifier key, such as SHIFT or ALT.

  -t
	Since the list of files requires a fixed width font, ISOCD uses
the Topaz font.  If your system font is not too large and is fixed size,
specify -t and ISOCD will use it instead.

  -p
	ISOCD will automatically include a path table entry for the "other"
computer systems that use backwards ordering of bytes.  This is often
necessary for even CDTV specific titles, since many mastering systems are
done on these "other" systems and they often need to look at the image.
If you really do not want this extra path table, just say no with -p.

  -v
	In a similiar vein, many file systems require the ";1" version
strings on all files.  CDTV will handle file names with or without these
strings, but you can turn them off with -v.  Currently there are no
provisions for actually specifying other versions instead of ";1".
]
	Status Errors
[
"Need to Examine first"
	A given function can only work if you have done an examine first to
	provide a list of files/dirs/etc.  You cannot build until you have
	something to build, etc.

"Too many dirs deep for ISO"
	This one reports that the source examined happens to be more than
	eight directories deep.  ISO-9660 standard does not accept this,
	though CDTV and ISOCD will.

"Incompatible dir heirarchy"
	When loading a layout file, there cannot be any additional or
	missing directories.  If there are, the load will not complete.

"No more Empty Spaces to remove"
	You are attempting to remove an Empty Space when there are none
	available to remove.  There must always be the one at the end of
	the CD.
]
	General Errors
[
"Batch option requires a layout file"
	If you specify -b to build automatically, you must also specify
	-l<file> to load a layout file to be built.

"Requires a stack of at least 10240 bytes"
	A larger stack is needed for ISOCD.  Just enter Stack 10240 at the
	shell or within your S:Shell-Startup.  I normally use a stack of
	20480..

"Not an Amiga system"
	Failed to open graphics.library.

"Intuition (V2.0) not available"
	ISOCD requires v2.0 of intuition or greater.

"Could not get current directory"
	The current directory may be too large?  Not sure this can occur.

"Interface not available"
	Probably not enough memory for window.

"Could not create gadgets"
	Probably not enough memory for gadgets, or you are using -t and
	your system font is too large.

"No Memory"
	Not enough memory.
]
