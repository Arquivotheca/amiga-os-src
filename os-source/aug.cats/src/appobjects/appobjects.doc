TABLE OF CONTENTS

appshell.library/AddObjList
appshell.library/DisposeObjList
appshell.library/IsGadToolObj
appshell.library/LookupKeystroke
appshell.library/NewObjListA
appshell.library/RefreshObjList
appshell.library/RemoveObjList
appshell.library/AddObjList                       appshell.library/AddObjList

   NAME
	AddObjList - Add a list of objects to the window

   SYNOPSIS
	success = AddObjList (oi, win, attrs);
	d0		      a1  a2   a3

	ULONG success;
	struct ObjectInfo *oi;
	struct Window *win;
	struct TagItem *attrs;

   FUNCTION
	This function is used to add an object or list of objects to
	a window.  The window must be open.

   INPUTS
	oi	- Pointer to the window's ObjectInfo.
	win	- Valid, open, window.
	attrs	- Additional arguments.

		  APSH_Objects (required) pointer to the first object
		  to add to the window.

		  APSH_NumArgs (optional) number of objects to add to
		  the window.  If this attribute is not specified,
		  then the NULL terminated list will be added.

   RESULT
	Returns the number of objects added to the window.

appshell.library/DisposeObjList               appshell.library/DisposeObjList

   NAME
	DisposeObjList - Delete a window environment

   SYNOPSIS
	DisposeObjList (oi);
			 a1

	struct ObjectInfo *oi;

   FUNCTION
	This function will delete the object list allocated for a window
	environment.

   INPUTS
	oi	- ObjectInfo structure returned by NewObjListA()

   SEE ALSO
	NewObjListA()

appshell.library/IsGadToolObj                   appshell.library/IsGadToolObj

   NAME
	IsGadToolObj - Determine type of object.

   SYNOPSIS
	IsGadToolObj (o);
		      a1

	struct Object *o;

   FUNCTION
	This function is used to determine if an ObjectNode is a boopsi
	object or a GadTools object.

   INPUTS
	on	- Pointer to an ObjectNode.

appshell.library/LookupKeystroke             appshell.library/LookupKeystroke

   NAME
	LookupKeystroke - Determine if a keystroke is attached to a gadget.

   SYNOPSIS
	on = LookupKeystroke (oi, msg);
	d0		      a1  a2

	struct ObjectNode *on;
	struct ObjectInfo *oi;
	struct IntuiMessage *msg;

   FUNCTION
	This function will check a RAWKEY intuition message and determine
	if the keystroke is attached to a AppObject gadget.  The comparision
	is case-insensitive, but if any qualifiers other than SHIFT where
	used, then the key is ignored.

	If the keystroke does belong to a gadget, then following operations
	occur.

	Downpress
	Gadget is activated in the appropriate manner.  The on_Current
	field of the returned ObjectNode is set to on_Funcs[EG_DOWNPRESS].

	Repeat
	The on_Current field is set to on_Funcs[EG_HOLD].  If there is a
	'repeat' visual state for the gadget, then it is refreshed.

	Release
	The on_Current field is set to on_Funcs[EG_RELEASE] and the gadget
	is deactivated in the appropriate manner.

	Only one key is visually activated at a time.

   INPUTS
	oi	- ObjectInfo structure returned by NewObjListA()
	msg	- IntuiMessage for a RAWKEY event.

   EXAMPLE

	/* Inside your event loop */
	case RAWKEY:

	    {
		ULONG tidata = 0L;
		struct ObjectNode *on;

		if (on = LookupKeystroke (oi, msg))
		{
		    /* Get the command index associated with the action */
		    tidata = on->on_Current;
		}
		else
		{
		    /* Look up the keystroke in your own list */
		}

		/* Do we have a command index? */
		if (tidata)
		{
		    /* Perform your command dispatching */
		}
	    }

	    break;

   RETURNS
	on	- If successful, then will return a pointer to the
		  ObjectNode that the keystroke belongs to.
		  Returns NULL if the keystroke doesn't belong to a gadget.

   SEE ALSO
	AbortKeystroke()

   BUGS
	Doesn't use an international toupper function.

appshell.library/NewObjListA                     appshell.library/NewObjListA

   NAME
	NewObjListA - Create a window environment based on an object array

   SYNOPSIS
	oi = NewObjListA (attrs);
	d0		  a1

	struct ObjectInfo *oi;
	struct TagItem *attrs;

   FUNCTION
	This function will create a window environment from an object
	array.

	This will modify the following fields.

	    NewWindow
		Width, Height, MinWidth, MinHeight, MaxWidth, MaxHeight,
		Title, IDCMPFlags, FirstGadget, Screen

   EXAMPLE

	/* Established elsewhere */
	struct Screen *screen;
	struct NewWindow *main_new;
	STRPTR *def_text;

	struct Window *win;
	struct ObjectInfo *oi;

	/* Using a stack based stub */
	if (oi = NewObjList (
	    	    APSH_Screen,	screen,
	   	    APSH_DefText,	def_text,
	   	    APSH_NewWindow,	main_new,
	   	    APSH_Objects,	main_objects,
		    TAG_DONE))
	{
	    /* Try to open the window */
	    if (win = OpenWindowTagList (main_new, oi->oi_WindowAttrs))
	    {
		/* Refresh the GadTools gadgets */
		GT_RefreshWindow (win, NULL);

		/* Do application stuff... */

		/*--- Close the window ---*/
		RemoveGList (win, oi->oi_GList, -1);
		CloseWindowSafely (win);
	    }

	    /* Free the object information */
	    DisposeObjList (oi);
	}

   INPUTS
	attrs	- Pointer to TagItem array of attributes.

		The following tags are required.

		APSH_Screen
		Pointer to the screen that the window will be opened in.

		APSH_TextAttr
		Pointer to the text attribute to use for the objects.  If
		NULL, then will use the screen's font attribute.

		APSH_DefText
		Pointer to the text table to obtain the text label
		information from.

		APSH_NewWindow
		Pointer to the NewWindow structure to place the objects in.

		APSH_NewWindowTags
		Pointer to any tags that the application plans on passing
		to OpenWindowTags.  Only required if the application
		actually uses it.

		APSH_Objects
		Pointer to the object array to create.

		The following tags are optional.

		APSH_WinText
		Pointer to the window specific text table to obtain the
		text label information from.

   RESULT
	oi	- Pointer to a ObjectInfo structure if successful.

		  NULL if failure.

   SEE ALSO
	DisposeObjList()

appshell.library/RefreshObjList               appshell.library/RefreshObjList

   NAME
	RefreshObjList - Refresh a windows' objects.

   SYNOPSIS
	success = RefreshObjList (oi, win, attrs);
	d0			  a1  a2   a3

	ULONG success;
	struct ObjectInfo *oi;
	struct Window *win;
	struct TagItem *attrs;

   FUNCTION
	This function is used to refresh an object or list of objects
	for a window.  The window must be open.

   INPUTS
	oi	- Pointer to the window's ObjectInfo.
	win	- Valid, open, window.
	attrs	- Additional arguments.  No attributes are defined.

   RESULT
	Returns TRUE if the gadget addresses have changed.

appshell.library/RemoveObjList                 appshell.library/RemoveObjList

   NAME
	RemoveObjList - Remove a list of objects from the window.

   SYNOPSIS
	success = RemoveObjList (oi, win, attrs);
	d0			 a1  a2   a3

	ULONG success;
	struct ObjectInfo *oi;
	struct Window *win;
	struct TagItem *attrs;

   FUNCTION
	This function is used to remove an object or list of objects
	to window.  The window must be open.

   INPUTS
	oi	- Pointer to the window's ObjectInfo.
	win	- Valid, open, window.
	attrs	- Additional arguments.  If no attributes are passed
		  and the AOIF_REMOVE bit of oi_Flags is set, then
		  the entire object list is removed using
		  RemoveGList().

		  APSH_NameTag (required) name of the first object to
		  remove.

		  APSH_NumArgs (optional) number of objects to remove
		  from the window.  If this attribute is not
		  specified, then the NULL terminated list will be
		  removed.


   RESULT
	Always returns 0L.

