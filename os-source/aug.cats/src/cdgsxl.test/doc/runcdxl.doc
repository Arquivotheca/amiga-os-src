TABLE OF CONTENTS

RunCDXL/Boxit
RunCDXL/CDConfig
RunCDXL/CDDeviceInit
RunCDXL/CDDeviceTerm
RunCDXL/CDXLCallBack
RunCDXL/CDXLFreeOb
RunCDXL/CDXLObtain
RunCDXL/CDXLTerm
RunCDXL/FreeXList
RunCDXL/GetCDInfo
RunCDXL/NewCDTV_XL
RunCDXL/NewCD_XL
RunCDXL/Pan2Display
RunCDXL/PlayCDXL
RunCDXL/RunCDXL
RunCDXL/SendIOR
RunCDXL/StartCDXL

RunCDXL/Boxit                                                      RunCDXL/Boxit

   NAME
	Boxit -- Draw a box in color 0 around the CDXL image.

   SYNOPSIS
	Boxit( disp_def, CDXL_ob );

	VOID Boxit( DISP_DEF * , CDXLOB * );


   FUNCTION
	Draw a box in color 0 around the CDXL image. This may be necessary
	to avoid some HAMing problems.


   INPUTS
	disp_def = pointer to DISP_DEF which describes the display.
	CDXL_ob = pointer to the CDXLOB to draw box around.

   RESULTS
	A box is draw in color 0 around the CDXL image.

   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?

RunCDXL/CDConfig                                                RunCDXL/CDConfig

   NAME
	CDConfig -- Send a CD_CONFIG command to cd.device.

   SYNOPSIS
	success = CDConfig( tag, ... );

	BOOL CDConfig( ULONG tag, ... );

   FUNCTION
	Send a CD_CONFIG command to cd.device. 


   INPUTS
	tag = taglist of CD_CONFIG commands.

   EXAMPLE
	success = CDConfig(TAGCD_READXLSPEED, 150,// Set READXLSPEED
			   TAGCD_XLECC, FALSE,    // Turn off error correction
			   TAG_END );

   RESULTS
	If successful cd.device will be configured to the 
	taglist specifications.

   NOTES


   SEE ALSO

   BUGS
	None?

RunCDXL/CDDeviceInit                                        RunCDXL/CDDeviceInit

   NAME
	CDDeviceInit -- Open cd/cdtv.device.

   SYNOPSIS
	success = CDDeviceInit( opened, CDXL_ob );

	BOOL CDDeviceInit( ULONG * , CDXLOB * );

   FUNCTION
	Attempts to open cd/cdtv.device if not already opened.
	Tries to open cd.device first, if not successful, tries
	for cdtv.device. Will set CDXL_ob->flags bit CDTV_DEVICE
	to reflect if cdtv.device was opened as opposed to cd.device.

   INPUTS
	opened = pointer to a ULONG which if NON NULL will be set to
		TRUE if device was opened by this call.

	CDXL_ob = pointer to defining CDXLOB control structure.

   RESULTS
	If device is succesfully opened, will returen TRUE. The opened
	paramater will be set to TRUE if this call opened the device or
	to FALSE if the device was opened by a prior call. CDXL_ob->flags
	will have the CDTV_DEVICE bit set if cdtv.device was opened as
	opposed to cd.device.

   NOTES


   SEE ALSO
	cdxlob.h

   BUGS
	None?

RunCDXL/CDDeviceTerm                                       RunCDXL/CDDeviceTerm

   NAME
	CDDeviceTerm -- Close cd/cdtv.device.

   SYNOPSIS
	CDDeviceTerm( CDXL_ob );

	VOID CDDeviceTerm( CDXLOB * );

   FUNCTION
	Close cd/cdtv.device, depending upon which one was opened.


   INPUTS
	CDXL_ob = pointer to defining CDXLOB control structure.


   RESULTS
	Everything opened/allocated by CDDeviceInit wilil be
	closed/freed.

   NOTES


   SEE ALSO
	cdxlob.h

   BUGS
	None?

RunCDXL/CDXLCallBack                                       RunCDXL/CDXLCallBack

   NAME
	CDXLCallBack -- CDXL callback function.

   SYNOPSIS
	__interrupt __asm __saveds
	CDXLCallBack( register __a1 APTR, register __a2 struct CDXL *);

	xl->IntCode = (VOID(* )())CDXLCallBack;

   FUNCTION
	This function is called as an interrupt whenever a transfer
	node has been completed. It increments the counter, flips
	the curVideo variable and signals the main task.

   INPUTS


   RESULTS


   NOTES


   SEE ALSO

   BUGS
	None?

RunCDXL/CDXLFreeOb                                          RunCDXL/CDXLFreeOb

   NAME
	CDXLFreeOb -- Free the CDXLOB control structure and its buffers.

   SYNOPSIS
	CDXLFreeOb( cdxl_OB );

	VOID CDXLFreeOb( CDXLOB * );

   FUNCTION
	Free the CDXLOB control structure and its buffers. Safe to call
	if cdxl_OB is NULL or if any of its buffers are NULL.

   INPUTS
	cdxl_OB = pointer to defining CDXLOB control structure.


   RESULTS
	All memory allocated for the CDXLOB control structure
	will be freed.

   NOTES


   SEE ALSO
	cdxlob.h

   BUGS
	None?

RunCDXL/CDXLObtain                                         RunCDXL/CDXLObtain

   NAME
	CDXLObtain -- Allocate a CDXLOB control structure 
	and its buffers and do setup.

   SYNOPSIS
	error = CDXLObtain( CDXLFile, disp_def, CDXLob, flags, inti );

	int CDXLObtain( UBYTE *, DISP_DEF *, CDXLOB **, ULONG, struct TagItem *);

   FUNCTION
	Allocate a CDXLOB control structure, setup the structure 
	as defined by the first PAN found in the CDXL file. Set
	up the disp_def structure as defined by the first PAN structure
	found in the file.

   INPUTS
	CDXLFile = pointer to UBYTE path to CDXLFile.
	disp_def = pointer to DISP_DEF, display definition structure.
	CDXLob = pointer to a CDXLOB pointer. If this call is successful,
		this pointer will point to the allocated CDXLOB control
		structure.
	flags = ULONG flags.
	inti = a taglist with possible XLTAG_Left, XLTAG_Top, and 
		XLTAG_Volume entries.

   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h


   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?

RunCDXL/CDXLTerm                                           RunCDXL/CDXLTerm

   NAME
	CDXLTerm -- Shut down everything CDXL related.

   SYNOPSIS
	CDXLTerm( CDXL_ob );

	VOID CDXLTerm( CDXLOB * );

   FUNCTION
	CDXL shutdown function. Terminates the audio, Does an 
	AbortIO/WaitIO and a CD_SEEK to force the drive to stop.
	Closes the device and frees its resources, frees the
	transfer list and the CDXLOB and and signals allocated.

   INPUTS
	CDXL_ob = pointer to defining CDXLOB control structure.


   RESULTS


   NOTES


   SEE ALSO
	cdxlob.h

   BUGS
	None?

RunCDXL/FreeXList                                          RunCDXL/FreeXList

   NAME
	FreeXList -- Free list of struct CDXL or CDTV_CDXL.

   SYNOPSIS
	FreeXList( xllist, CDXL_ob );

	VOID FreeXList( struct MinList *, CDXLOB * );

   FUNCTION
	Free the transfer list. This list will contain either
	struct CDXL or CDTV_CDXL depending upon which device 
	was opened.

   INPUTS
	xllist = pointer to a struct MinList.
	CDLX_ob = pointer to defining CDXLOB control structure.

   RESULTS


   NOTES


   SEE ALSO
	cdxlob.h

   BUGS
	None?

RunCDXL/GetCDInfo                                          RunCDXL/GetCDInfo

   NAME
	GetCDInfo -- Send a CD_INFO command to cd.device.

   SYNOPSIS
	success = GetCDInfo( cdi );

	BOOL GetCDInfo( struct CDInfo * );

   FUNCTION
	Send a CD_INFO command to cd.device. The info is stored in the 
	cdinfo structure passed in.

   INPUTS
	cdi = pointer to a struct CDInfo.


   RESULTS
	TRUE if successful, the struct CDInfo passed in will have its
	fields set to reflect the info obtained from cd.device.

	FALSE if an error occured.

   NOTES

   SEE ALSO

   BUGS
	None?

RunCDXL/NewCDTV_XL                                          RunCDXL/NewCDTV_XL

   NAME
	NewCDTV_XL -- Allocate a CDTV_CDXL structure and AddTail it
		to the transfer list.

   SYNOPSIS
	error = NewCDTV_XL( first, buf, len, code );

	int NewCDTV_XL( struct MinList *, UBYTE *, ULONG, PF );


   FUNCTION
	Allocates a CDTV_CDXL structure and adds it to the transfer list.
	Call this if cdtv.device was opened as opposed to NewCD_XL() for
	cd.device.

   INPUTS
	first = pointer to struct MinList.
	buf = pointer to a transfer buffer.
	len = ULONG length of buffer.
	code = pointer to a function that will be called as an interrupt
		whenever this transfer node has been completed.

   EXAMPLE
	NewCDTV_XL( &XList, CDXL_ob->Buffer[i], CDXL_ob->FrameSize, CDXLCallBack );


   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h

   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?

RunCDXL/NewCD_XL                                            RunCDXL/NewCD_XL

   NAME
	NewCD_XL -- Allocate a CDXL structure and AddTail it
		to the transfer list.

   SYNOPSIS
	error = NewCD_XL( first, buf, len, code );

	int NewCD_XL( struct MinList *, UBYTE *, ULONG, PF );


   FUNCTION
	Allocates a CDXL structure and adds it to the transfer list.
	Call this if cd.device was opened as opposed to NewCDTV_XL() for
	cdtv.device.

   INPUTS
	first = pointer to struct MinList.
	buf = pointer to a transfer buffer.
	len = ULONG length of buffer.
	code = pointer to a function that will be called as an interrupt
		whenever this transfer node has been completed.

   EXAMPLE
	NewCD_XL( &XList, CDXL_ob->Buffer[i], CDXL_ob->FrameSize, CDXLCallBack );


   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h

   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?

RunCDXL/Pan2Display                                      RunCDXL/Pan2Display

   NAME
	Pan2Display -- Determine display from a Pan structure.

   SYNOPSIS
	Pan2Display( pan, disp_def, flags );

	VOID Pan2Display( PAN *, DISP_DEF *, ULONG );

   FUNCTION
	Given a Pan structure and a DISP_DEF structure, determine what 
	kind of display to open and set fields in the DISP_DEF structure
	to tell the display opening functions what kind of display to open.

   INPUTS
	pan 	= pointer to struct Pan read from CDXL file.
	disp_def= pointer to DISP_DEF, display definition structure.
	flags	= ULONG flags.

   RESULTS


   NOTES


   SEE ALSO
	cdtv/pan.h runcdxl.h

   BUGS
	None?


RunCDXL/PlayCDXL                                            RunCDXL/PlayCDXL

   NAME
	PlayCDXL -- Play a CDXL.

   SYNOPSIS
	error = PlayCDXL( disp_def, CDXL_ob );

	int PlayCDXL( DISP_DEF *, CDXLOB * );


   FUNCTION
	Contains the main loop which handles the CDXL playback.
	Waits and handles signals from:

		The CDXL interrupt,
		The user telling us to abort,
		The device telling us something is wrong,
		The copper interrupt telling us to Call ChangeVPBitMap().

	Plays the CDXL until an abort signal is recieved or until the
	last frame is reached.


   INPUTS
	disp_def = pointer to DISP_DEF, display definition structure.
	CDXL_ob = pointer to defining CDXLOB control structure.


   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h


   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?


RunCDXL/RunCDXL                                         RunCDXL/RunCDXL

   NAME
	RunCDXL -- Main CDXL entry point.

   SYNOPSIS
	error = RunCDXL( tag, ... );

	int RunCDXL( ULONG, ... )


   FUNCTION
	CDXL entry point. Takes a taglist which defines the options.


   INPUTS
    tag -
    XLTAG_XLFile:	ti_Data points to CDXL filename.

    XLTAG_View:		ti_Data is a boolean value which if TRUE instructs the 
			display opening routines to open a view as opposed to 
			a screen. Default is FALSE (open a screen).

    XLTAG_Blit:		ti_Data is a boolean value which if TRUE forces the 
			CDXL image to be loaded into a buffer which is then 
			blitted to the display. This is in contrast to the 
			default mode where the CDXL image is loaded directly 
			to the display memory.

    XLTAG_Background:	ti_Data points to an ILBM filename to display 
			in the background. If specified, XLTAG_Blit is
			implied.

    XLTAG_Left:		ti_Data specifies left edge of CDXL image. Default
			is to center.

    XLTAG_Top:		ti_Data specifies top edge of CDXL image. Default
			is to center.

    XLTAG_Volume:	ti_Data specifies volume for CDXL audio. Default
			is 64.

    XLTAG_MultiPalette:	ti_Data is a boolean value which if TRUE forces
			a palette load for each CDXL frame. Default is FALSE.

    XLTAG_KillSig:	ti_Data is a ULONG signal which will abort the CDXL 
			playback.

    XLTAG_XLSpeed:	ti_Data is a READXLSPEED override value. Default is
			what is stored in the Pan->Reserved + 1 * 75. 

    XLTAG_XLEEC:	ti_Data is a boolean value that if TRUE turns on
			error correction. Default is FALSE.

    XLTAG_XLPalette:	ti_Data is a boolean value that if TRUE forces the
			display to use the palette stored in the CDXL. Useful 
			in conjuction with XLTAG_Background, to override
			the background ILBM's palette.

    XLTAG_LACE:		ti_Data is a boolean value that if TRUE forces the
			display to open in interlace mode, overriding ILBM
			or CDXL setting.

    XLTAG_NONLACE:	ti_Data is a boolean value that if TRUE forces the
			display to open in NON interlace mode, overriding ILBM
			or CDXL setting.

    XLTAG_HIRES:	ti_Data is a boolean value that if TRUE forces the
			display to open in Hires mode, overriding ILBM
			or CDXL setting.

    XLTAG_LORES:	ti_Data is a boolean value that if TRUE forces the
			display to open in LORES mode, overriding ILBM
			or CDXL setting.

    XLTAG_BOXIT:	ti_Data is a boolean value that if TRUE forces a
			box to be drawn in color 0 around the CDXL image.
			May be needed to avoid some HAMing problems.


   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h


   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?


RunCDXL/SendIOR                                           RunCDXL/SendIOR

   NAME
	SendIOR -- asynchronously execute a device command.

   SYNOPSIS
	success = SendIOR( req, cmd, off, len, data );

	BOOL SendIOR( struct IOStdReq *, LONG, LONG, LONG, APTR );

   FUNCTION
	asynchronously execute a device command.

   INPUTS
	req = pointer to properly initialized IOStdReq structure.
	cmd = device command for io_Command.
	off = offset for io_Offset.
	len = length for io_Length.
	data = data for io_Data.

   RESULTS
	TRUE if successful.
	FALSE if an error occurs. Error can be found in req->io_Error.

   NOTES


   SEE ALSO

   BUGS
	None?


RunCDXL/StartCDXL                                       RunCDXL/StartCDXL

   NAME
	StartCDXL -- Prepare to play the CDXL.

   SYNOPSIS
	error = StartCDXL( DISP_DEF *, CDXLOB * );

	int StartCDXL( DISP_DEF *, CDXLOB * );

   FUNCTION
	Preps transfer lists etc. then calls PlayCDXL().


   INPUTS
	disp_def = pointer to DISP_DEF, display definition structure.
	CDXL_ob = pointer to defining CDXLOB control structure.


   RESULTS
	0 if successful. An error code if not. Errors defined in
	runcdxl.h


   NOTES


   SEE ALSO
	runcdxl.h cdxlob.h

   BUGS
	None?

