TABLE OF CONTENTS

prefs/FreePref
prefs/FreePrefList
prefs/GetPref
prefs/GetPrefRecord
Prefs/GetPrefsDrawer
prefs/SetPref
prefs/FreePref                                                 prefs/FreePref

   NAME
	FreePref - Free a preference record obtained by GetPref.

   SYNOPSIS
	FreePref (pref);
		  a1

	VOID *pref;

   FUNCTION
	This function will properly deallocate a preference record.  This
	also stop notification on preference files that are being watched.

   INPUTS
	pref	- Pointer to the preference record to free.

   SEE ALSO
	FreePrefList(), GetPref()

prefs/FreePrefList                                         prefs/FreePrefList

   NAME
	FreePrefList - Free a list of preference records obtained by GetPref.

   SYNOPSIS
	FreePrefList (list);
		      a1

	struct List *list;

   FUNCTION
	This function will step through a list of preference records, and
	deallocate each record.  This will also stop notification on the
	appropriate preference files.

   INPUTS
	list	- Pointer to a list whose nodes represent preference records.

   SEE ALSO
	FreePref(), GetPref()

prefs/GetPref                                                   prefs/GetPref

   NAME
	GetPref - Get user preference information.

   SYNOPSIS
	pref = GetPref (kind, drawer, attrs)
	d0		d0    a1      a2

	VOID *pref;
	LONG kind;
	BPTR drawer;
	struct TagItem *attrs;

   FUNCTION
	This function will return a pointer to the requested type of user
	preference information.

	Performs the following operations, until it is able to get the
	specified user preference file:

	  o  Search the specified drawer for the requested type of user
	     preference file.

	  o  Search ENV:Sys for the requested type of user preference file.

	  o  Search internal table for default system preferences.

	This function can ONLY be called from a process.

   INPUTS

	kind	- Type of user preference information to obtain.  Following
		  are the valid kinds, defined in <libraries/prefs_lib.h>.

		  PREFS_SCREENMODE
		  Screen configuration preference file.  Contains the display
		  mode id, width, height, depth and whether the user prefers
		  autoscroll or not.
  
		  PREFS_PALETTE
		  Color palette and pen spec.

		  PREFS_POINTER
		  Mouse pointer image to use for the 'normal' pointer..

		  PREFS_BUSYPOINTER
		  Mouse pointer image to use for the busy pointer.

		  PREFS_WBCONFIG
		  For most applications, the only thing to obtain from this
		  preference structure, is whether to bring a window forward
		  when it has been double-clicked.

		  PREFS_FONT

	drawer	- A lock on the directory to begin the search for the
		  user preference file.  This lock should be obtained
		  by the GetPrefsDrawer() function.

	attrs	- Pointer to a TagItem array.  Following are the valid tags,
		  which are defined in <libraries/prefs_lib.h>.

		  PREFS_DEFAULT_A, <struct>
		  Supply a default structure to use in the case that no
		  file is located.

		  PREFS_QUICKFAIL_A, [TRUE/FALSE]
		  Indicate that if unable to find the preference file in
		  the first step, then use the default, or supplied default.

		  PREFS_NAME_A, <name>
		  Use the supplied name, instead of using the internal
		  name lookup table.  Usefull for loading a color palette
		  from any IFF ILBM, for example.

		  PREFS_NOTIFY_A, <port>
		  Indicate that you want notification on the preference file.
		  This function will fill in the NotifyRequest structure and
		  start notification.  The FreePref() function will end
		  notification and free the structure, among other things.

		  PREFS_FRESHEN_A, <prefs>
		  Indicate that you wish to freshen an existing preference
		  record, perhaps due to receiving a file notification message.
		  The kind field of GetPref() doesn't have to contain a valid
		  value, as it will get the kind from the prefs record that
		  is passed.

		  PREFS_LIST_A, <list>
		  Add the preference record to a list.  Will not allow
		  duplicate kinds in the list.

   RESULTS
	pref	- Pointer to the appropriate preference structure.  The
		  structure must only be freed by the FreePref() function.

		  If you asked for fresher preference record (using the
		  PREFS_FRESHEN_A tag), then check p_Flags to see if
		  you need to shutdown to invoke the new preferences (check
		  for the PREFS_CLOSEALL_F flag being set).

		  If NULL, then use IoErr() to find out what the error was.

   SEE ALSO
	SetPref(), FreePref()

prefs/GetPrefRecord                                       prefs/GetPrefRecord

   NAME
	GetPrefRecord - Obtain a specific preference record from a list.

   SYNOPSIS
	pref = GetPrefRecord (list, kind);
	d0		      a1    d0

	VOID *pref;
	struct List *list;
	LONG kind;

   FUNCTION
	This function will search through a list of preference records and
	return a pointer to the requested kind.

   INPUTS
	list	- Pointer to a list whose nodes represent preference records.
	kind	- A preference record kind as defined in
		  <libraries/prefs_lib.h>

   RETURNS
	pref	- Pointer to the appropriate preference structure.

   SEE ALSO
	GetPref()

Prefs/GetPrefsDrawer                                     Prefs/GetPrefsDrawer

   NAME
	GetPrefsDrawer - Locate the preference directory for an application.

   SYNOPSIS
	dir = GetPrefsDrawer (base, flags)
	d0		      a1    d0

	BPTR dir;
	STRPTR base;
	ULONG flags;

   FUNCTION
	This function will return a lock on the directory that the
	preference files should be stored in, based on the application's
	base name.

	This will default to creating the directory if it doesn't exist.

	The programmer must use UnLock(dir) to free the directory lock when
	he is through with it.

	This function can ONLY be called from a process.

   INPUTS
	base	- Pointer to the NULL terminated base name of the
		  application.  If a NULL is passed for the name, then
		  return a lock on the system preference drawer.

	flags	- Used to modify the actions performed.

		PREFS_GLOBAL_GPDF
		Indicate that you want to get a lock on the global
		preference directory, instead of a per-user directory.

		PREFS_READONLY_GPDF
		Indicate that you only want to obtain preference files.
		This will cause GetPrefsDrawer() to fail if the directory
		doesn't already exist (unless the PREFS_FALLBACK_GPDF
		flag is set).

		PREFS_FALLBACK_GPDF
		If the directory doesn't exist, then return a lock on the
		system preference area.


   RESULTS
	dir	- A lock on the directory.  If NULL, then use IoErr()
		  to obtain the reason why the directory wasn't returned.

prefs/SetPref                                                   prefs/SetPref

   NAME
	SetPref - Write a preference record to disk.

   SYNOPSIS
	success = SetPref (kind, drawer, pref, attrs)
	d0		   d0    a1      a2    a3

	BOOL success;
	LONG kind;
	BPTR drawer;
	VOID *pref;
	struct TagItem *attrs;

   FUNCTION
	This function will write the given preference record to disk.

	Currently, this function is not implemented.

   INPUTS
	kind	- A preference record kind as defined in
		  <libraries/prefs_lib.h>

	drawer	- A lock on the directory to write the record to.

	pref	- Pointer to the preference record to write.

	attrs	- Pointer to a TagItem array.

   RETURNS
	success	- TRUE indicates success.  FALSE indicates error, check
		  IoErr() to determine reason for failure.

   SEE ALSO
	GetPref()

