ASPE (Amiga Serial Performance Evaluator) Release 1.2 (c)1990 CBM Inc.
=============================================dart========2/8/90=======

1.2 Enhancements:
-----------------
Everything is now variable. Well, almost ;->. There is now full command line
argument passing. Current arguments: which cia timer to use, baudrate, packet
size (number of bytes to send per interrupt) and total number of bytes per
test iteration. Type "aspe ?" or "aspe -h" for more info.

Abstract:
---------
ASPE sends data out the serial port at full bandwidth of a definable
baudrate and receives the same data. This requires connecting the receive
and transmit pins on the RS-232 port. You could hook up a MIDI interface and
connect MIDI IN to MIDI out, or connect pins 2 and 3 on a female DB25 jack.

You can test how activities, such as moving the mouse, selecting, moving and
sizing windows, accessing files etc, affect serial performance. You can use
different clock sources and packet sizes (good measure on the effect of
interrupt dispatch latencies). ASPE runs under 1.3 and 2.0 allowing you to
compare serial performance under different OS versions. ASPE may be helpful
in determining which functions in the system may need fine tuning to make
the OS more realtime.

Implementation:
---------------
The main task installs a cia timer interrupt, a serial receive interrupt
(both at software priority zero) and a stopwatch using the timer device. The
stopwatch is started before transmission is enabled. Serial transmission is
triggered by a cia timer interrupt which is signalling the main task. Upon
receiption of the signal the main task sends a definable number of bytes out
the RS-232 port. This saturates full serial bandwidth. Concurrently, a
serial receive interrupt handler is receiving bytes from the RS-232 port
keeping a count of the incoming bytes. A global counter variable,
incremented in the cia timer interrupt is counted up until it reaches a
definable number and stops the cia timer as well as the stopwatch.

The number of received bytes is subtracted from the number of sent bytes to
establish the number of dropped bytes. Statistics, including number of sent,
received and dropped bytes, as well as the total time elapsed, are printed
to the console. You are then returned to your shell.

Future:
-------
Variable densities and different transmit and receive algorithms will be
implemented soon. I might even add a full blown intuition interface 8-<

direct comments to: Darius Taghavy, CATS (x9425), e-mail darius@cbmvax