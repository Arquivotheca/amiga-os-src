head     1.1;
branch   ;
access   ;
symbols  ;
locks    johnw:1.1; strict;
comment  @@;


1.1
date     91.12.12.14.38.44;  author davidj;  state Exp;
branches ;
next     ;


desc
@initial rcs
@



1.1
log
@Initial revision
@
text
@
                           AppShell release notes


12-Sep-90 36.404

  o  Add load/save Intuition window position snapshot.  Currently happens
     when closing a window.  The standard is to have a menu item in the
     Preference menu called Snapshot Window.

  o  Changed almost all the tool tags.  Added some things when working on the
     hyper.library.   Expect to implement hyper.library and other external
     tools soon.


22-Sep-90 36.443

  o  Uses prefs.library to obtain preference directory and preference files
     with notification.

     Currently only watches the following files.

        screenmode.prefs        Screen mode ID, width, height, depth & autoscroll.
        palette.ilbm            Screen colors and pen spec.
        pointer.ilbm            Default mouse pointer (no colors yet).
        busypointer.ilbm        Wait mouse pointer (no colors yet).

     Caveats

        If a screenmode.prefs file doesn't exist in the applications preference
        directory, then the application will appear on the Workbench screen.
        Under the current scheme, do not use the following screen tags.

        SA_Pens, SA_FullPalette, SA_DisplayID, SA_Width, SA_Height,
        SA_Depth, SA_AutoScroll, SA_PubName

  o  Added more checks in the screen closure mechanism to make sure that the
     screen actually closes (due to preferences and public screens).

  o  Whenever the AppShell determines that a screen needs to be opened, based
     on the presence of a screenmode.prefs file, the screen will be made
     PUBLIC with the name the same as the basename of the application.

  o  Added LOCK and UNLOCK to the WINDOW command.  This allows a window's
     input to be locked while a sub-window is opened, for example.

     Performs this by putting up a 0 x 0 requester.

  o  Added DEACTIVATE and ACTIVATE commands.

     DEACTIVATE will shutdown the entire graphical user interface of the
     application.  Currently only works with the main application's windows
     and the command shell.  Eventually will send DeactivateToolID to all
     tools and clones that are in the application's environment.

     ACTIVATE will restore the graphical user interface.  This will cause all
     windows (main windows and the command shell) that were open when the
     deactivate command was sent to be reopened.  Eventually will send
     ActivateToolID to all tools and clones that received the DeactivateToolID
     command.

     These commands are used by the preference notification handler whenever
     a preference record shows that a major update is required.

  o  Added AUTO and SCREENbasename to the command shell window specification.

  o  Added the APSH_ShowSelected tag.  This is to replace the use of
     GTLV_ShowSelected to indicate that a OBJ_ListView object has a display
     or text gadget attached.   The data is to point at the name of the
     desired OBJ_Text object to attach to the list (the OBJ_Text has to
     be placed before the OBJ_ListView in the list of objects).

     The old scheme actually changed the data to point to the gadget that
     was created.  Wasn't reentrant.

  o  Fixed bug with WINDOW CLOSE <other than MAIN> freeing the right gadgets,
     but sometimes closing the wrong window.

  o  The gadget preparation code wasn't checking all possible error return
     values.  No more gurus.

  o  Known bugs:

     MungWall hits (no known enforcer hits though :-).

     Memory loss.

     Can't move an application from the Workbench to a public screen using
     ACTIVATE & DEACTIVATE (the GadTools gadgets don't get created). Strange.


23-Sep-90 36.???

  o  Moved some fields around in the AppInfo structure.  Made the preference
     list public.  Added ai_ScreenName to the Intuition section, that contains
     the name of the public screen for the application, if one was opened.

  o  Added the SNAPSHOT switch to the CMDSHELL command.  This will save the
     current command shell window rectangle to disk.

  o  Added the TITLE keyword to the CMDSHELL command.  This allows you to
     set the window title of the command shell window.

  o  Added ACTIVATE, FRONT and BACK switches to the CMDSHELL command.  This
     will activate, bring to front, send to back, respectively, the command
     shell window.

  o  Added LoadSnapShot to the Command Shell handler.

  o  Made it so that if the command shell was already open and the user asks
     the command shell to open, that it comes forward and activates.

  o  Implemented the SNAPSHOT switch to the WINDOW command.  Took the
     SaveSnapShot out of close_idcmp (which caused the window position to
     be saved to disk every time the window was closed).

  o  Fixed window title problem.  Wasn't storing the new window titles in a
     permanent buffer, so if the window title refreshed, it would display
     garbage.

  o  Currently, the DOS handler has to be opened after the Intuition handler.
     Same with the Workbench message handler.  Hope to take out order
     dependancies soon.


24-Sep-90 36.502

  o  Fixed all known MungWall bugs.

  o  Implemented OBJ_Dropbox, OBJ_BevelIn, OBJ_BevelOut, OBJ_DblBevelIn,
     OBJ_DblBevelOut objects.


25-Sep-90 36.550

  o  Added APSH_UserData tag.  By specifying this tag at startup time, you
     can pass the pointer for a preallocated ai_UserData.

  o  Allow refresh events to pass through a locked window.

  o  Fixed border objects.

  o  Fixed Complainer/MungWall complaint in handle_idcmp.

  o  Known bugs...

     Still a Complainer/MungWall complaint on DeActivate/Activate in the
     creation of a text button.

     Still can't DeActivate/Activate from the Workbench reliably.

     Lockup when depth arranging a window with a LOCK.

26-Sep-90

  o  Implemented RX command for the ARexx message handler.

  o  Made prefs.library a required library.

  o  Implemented DeactivateToolID and ActivateToolID messages for cloned
     applications.

  o  Fixed lockup when depth arranging a locked window.  Had to change the
     locking requester to 1 by 1.

  o  Moved the lock requester to LeftEdge and TopEdge of -1.

  o  Made arrows standard equipment for the scroller object.

  o  Fixed framed text button class so that it was impossible for it to
     try to do an inside-out rectangle.  Could cause crashes under unpredictable
     circumstances.

  o  Implemented OBJ_GImage and OBJ_Image.  Requires APSH_ObjData tag pointing
     at a valid image structure (with data already residing in CHIP memory).

  o  Took out SIMPLE_REFRESH flag.  This will stop the annoying flashing
     caused by moving windows around.


28-Sep-90 36.595

  o  Added OBJ_MultiText object.  This is a multi-line text gadget.  This is
     very preliminary version, so don't be appalled by it's non-standard
     behavior (but, please report any enhancements or bugs).  Lots and Lots
     of thanks to David Joiner (Talin) who wrote the original code that this
     was based on.

     It understands the following tags:

        STRINGA_MaxChars        Maximum number of characters.

        STRINGA_Buffer          Pointer to a preallocated text buffer (if NULL,
                                then the text class will allocated the buffer).

     The boopsi classes that the AppShell uses are going to be moving into a
     separate library, as public classes, soon.


11-Oct-90 36.650

  o  Moved all boopsi classes to a separate library, currently called
     cgadtools.library (how original).

  o  Made the OBJ_Button support relative coordinates.  Currently only allows
     the LeftEdge and TopEdge to be relative.  Place a negative number in
     those fields to see it work.

  o  Added APSH_Screen tag for passing a screen pointer.

  o  Added two new objects.  OBJ_DirString and OBJ_DirNumeric.  These are
     text and numeric entry gadgets, respectively, that have a button
     with a magnifying glass glyph attached on the left side.  This is to
     be used to allow the user to bring up a list of possible choices (like
     the Directory button in AmigaVision).

  o  Added APSH_ObjExtraRelease tag to specify the function to call when
     the alternate button of an object is released.  Mainly implemented
     for the OBJ_DirString and OBJ_DirNumeric objects.

  o  Added an OBJ_3DGImage object.  This will automatically center a glyph
     within a 3D frame (as a button).  ZZZ: Isn't that what OBJ_Select is
     for???  DON'T USE THIS, USE OBJ_Select.

  o  Rewrote parts of the object creation stuff, so that it can be used by
     non-AppShell clients.  No public entry point yet.

  o  Added APSH_OBJF_NOADJUST flag for objects.  This tells the object
     creation engine not to scale the object rectangle.  This was used to
     implement the OBJ_DirString & OBJ_DirNumeric objects.

13-Oct-90 36.655

  o  Fixed the window refresh flashing problem.

  o  OBJ_Display, OBJ_Select, OBJ_Dropbox, OBJ_GImage now support clipping
     of the contents, whether text or image, to the interior of the frame.
     This includes relative support also.

  o  Created an aText and aTextExtent that support @@ to indicate that a
     character in a text label is the keystroke used to trigger the gadget.
     OBJ_Button and OBJ_Display both use these routines to do the text
     string.  The character gets an underscore.

  o  Renamed cgadtools.library to appobjects.library.

  o  Rewrote the entire keystroke routines.  Still only allows one key
     down at a time, but then that is correct except for a music program.
     Now performs the EG_DOWNPRESS function on the downpress of the key,
     EG_HOLD on the repeat and EG_RELEASE on the release of the key.

  o  Moved the keystroke routines to the appobjects.library.

  o  The object creation routines will now get the keystroke from the label
     if there is one, else it gets it from the object structure.

  o  Rewrote the entire object creation routines.  Put into the
     appobjects.library.  Now non-AppShell clients can now use the font-
     sensitive layout engine that AppShell uses.  Entry points are public
     now.

  o  Modified the object structure.  Split the ULONG group into a WORD group
     and WORD priority.  The complete layout engine is only about two weeks
     away... all the hard problems have been solved on paper, now to just
     finish the code.

  o  All the non-GadTools objects now support relative positioning, including
     the multi-line text gadget (Button is not a GadTools object, so yes,
     it does support relativity).  CGTA_MaxWidth and CGTA_MaxHeight can be
     passed as additional attributes for an object.

     In order to get the original rectangle of the window set correctly,
     then fill out the OBJ_Window rectangle with the correct size.  This
     will also set the window's minimum width and height, so you may have to
     tweek it.  When the real layout engine is implemented with groups and
     priorities, then the window minimum and maximum will be set to
     extremely correct values.

  o  Changed the Text gadget active fill to be hifilltextPen on hifillPen
     instead of shinePen on shadowPen.

  o  Fixed detailPen and blockPen error in prefs.library.  Had them swapped.

  o  Cleaned up the multi-line text gadget some more.  Supports SHIFT and ALT
     cursor movements, backspace and delete.  Supports TAB to next field
     and SHIFT-TAB to previous field.

21-Oct-90 36.???

  o  Fixed bug in main module that was causing the library module not to be
     be called.  No libraries were being closed.

  o  Made "aframeiclass" resolution sensitive.

  o  Made "aframeiclass" do border gadgets.  When the image is created, use
     {CGTA_InBorder, TRUE} as one of the attributes (automatically done by
     the object generation & layout routines).

  o  Made "actiongclass" do border gadgets (uses the CGTA_InBorder attribute
     when creating the frame).

26-Oct-90 36.

  o  Change the configuration file directory to be based in ENV:, like the
     AUISG says, instead of S:

  o  Added several new tags to the Intuition message handler.

	APSH_IntuiTicks
	Command to perform on Intuition ticks. Use very sparingly. I do a
	ModifyIDCMP to turn these off and on as I need them.

	APSH_MouseMove
	Command to perform on mouse moves. Use very sparingly. I do a
	ModifyIDCMP to turn these off and on as I need them.

	APSH_WinBOpen
	Command to perform before opening window.

	APSH_WinAOpen
	Command to perform after opening window.

	APSH_WinBClose
	Command to perform before closing window.

	APSH_WinAClose
	Command to perform after closing window.

	APSH_RefreshData
	Command to perform when gadget data needs refreshing.

  *  Window information, including attributes, come from the window object
     in the object array.

  o  Implemented the Intuition event command callbacks (such as size verify,
     active window, etc...).

  o  All Intuition objects support relativity now, including GadTools objects.

  o  Extremely primitive group layout support.  Vertical group will evenly
     space equal height objects.  Horizontal group will evenly space equal
     width objects.

  *  APSHGetGadgetInfo modified to return the gadget pointer, if it is
     available, whether the window is open or not.

  o  Fixed mungwall hit when disposing of a multi-line text object.

  o  Fixed mungwall hit when freeing a project, and memory trashing when
     adding a new project.

  o  Fixed memory trashing when cloning a certain type of tag list in the
     Intuition message handler.

  o  Added UserData fields to ObjectNode and ObjectInfo.

  *  All non-border objects are now panel relative, instead of window relative.
     This means that when you specify the coordinates for an object, you don't
     take the window borders into consideration, because they will be
     automatically added in at run-time.

  *  Menus may be set up in the text table now, instead of in a GadTools
     NewMenu array.  This is the preferred method. See examples...  This allows
     you to specify a parameter now.  For example, a menu item can now invoke
     the command "WINDOW SNAPSHOT". or "LEARN STOP".

  *  Rewrote the window management portion of the Intuition message handler.
     Got smaller, more efficient, and some of the features actually became
     fully implemented.

  o  Added APSH_UserDataSize tag.  This will cause the AppShell to allocate
     space for the user data at initialization time, and to free it at
     shutdown.

  o  Correctly finds tool icon now.

  o  Implemented four standard ReadArgs commands.

	Files/M
	Provide a list of file names.  Patterns are automatically expanded
	and all file names are added to the project list.

	PubScreen/K
	To provide the public screen name that the application is to open
	up on.

	PortName/K
	To override the default ARexx port name.  This name will be used
	"as-is", with no slot numbers appended.

	Startup/K
	Name of the ARexx script to run after all initialization has been
	completed.

  o  *** NOTE ***  Make sure that all your applications use an SIPC port!!!
     This is important for control through the master control application,
     system shutdown, and iconic argument passing between applications.

  o  Smoothed out some of the SIPC message sending.  Now if you use the
     APSH_CmdString tag, the data is passed as a command.

	/* Tell some other application to open its main window */
	HandlerFunc (ai,
		     APSH_Handler, "SIPC",
		     APSH_Command, AH_SENDCMD,
		     APSH_NameTag, portname,
		     APSH_CmdString, "window main open",
		     TAG_DONE);

Nov-13-90 36.???

  o  Changed menu-in-text-table parsing to use ReadArgs instead of
     BuildParseLine.

Nov-26-90 36.991						55472 bytes

  o  Fixed APSH_RefreshData event to happen at the correct time.  Now,
     RefreshObjList() returns TRUE if the addresses of the objects have
     changed.

  o  Added APSH_OBJF_DRAGGABLE.  Makes a draggable icon out of a OBJ_GImage
     object type.

  o  Added predefined function ID, DropIconID.  This function gets called
     whenever a user drops an AppShell icon into a window.  The destination
     application must have a SIPC user interface specified.

     The function will receive the following arguments:

	APSH_WinName
	Name of the window that received the icon.

	APSH_ObjName
	Name of the object passed.

	APSH_MsgIAddress
	Pointer to the ObjectNode passed.

	APSH_MsgMouseX, APSH_MsgMouseY
	Address of mouse, relative to window.

	APSH_MsgWindow
	Pointer to the window that received the icon.

  o  Workbench handler doesn't insist that the window for an AppWindow has
     been already opened.

  o  Intuition message handler now properly turns an AppWindow on when the
     window is opened.

  o  Fixed minimum window width & height calculations.

  o  When an application comes up on an existing public screen, brings it
     to front.

  o  Now IDCMP handler now initializes the gels system for any screen that it
     opens.

  o  Made sure that gel system is set up for a screen before attempting to
     drag icons around.   Woops.

  o  Workbench handler now passes the mouse X & Y relative to the destination
     window in the APSH_MsgMouseX & APSH_MsgMouseY tags.

Dec-3-90 36.993

  o  Multiline text gadget now uses the system provided TAB field cycling.

  o  Took out special TAB processing in the Intuition message handler.
     System (Intuition V37) provides it now.

  o  Changed the underscore indicator from '@@' to '_' as recommended by
     Peter.

  o  Added the GT_Underscore,'_' flag to the GadTools objects, to indicate
     the keyboard binding (GadTools V37).

  o  Added object flag of APSH_OBJF_LOCALTEXT to indicate that the text
     label is to come from the window private text table (instead of the
     global application text table).

  o  Added tag APSH_WinText for specifying the window private text table.
     Points oi->oi_LocalText at the array.

  o  Pressing TAB in a window with no active gadget, now activates the
     active gadget candidate.

  o  Workbench handler message port no longers gets a name.  I was at one
     time thinking about using that port for passing AppShell icons from
     one application to another.  Well, no more (I use the SIPC port for
     it now) ...

Dec-3-90

  o  Removed all Next/PrevField support from the multiline text gadget.

  o  Active colors is the same as inactive color again, in multiline text,
     text and numeric entry gadgets.

  o  Add better UnlockLayers support.  Still one more thing to do; a timer
     event to prevent deadlocks.

Dec-6-90

  o  Added two new object tags.

	APSH_ObjCreate
	Function to call after creating an object.

	APSH_ObjDelete
	Function to call before deleting an object.

  o  Disabling & enabling the multiline text gadget will now immediately
     ghost & unghost.

Dec-7-90 36.1013

  o  Calls APSH_ObjCreate after creating a gadget.  Don't tie memory
     allocations or removals to this.  Just transfer data.

  o  Calls APSH_ObjDelete before deleting a gadget.  Don't tie memory
     allocations or removals to this.  Just transfer data.

  o  When adding a new gadget, checks the function's status.  Disables
     the gadget if the function is disabled.

  o  Somehow the APSH_OBJF_ACTIVATE flag didn't get in here.  Set this flag
     on the first text entry (or activateable) gadget in a window.

  o  Nest disable/enable calls.  IE If two calls have been made to disable a
     function, then it will take two enable calls to re-enable it.


Dec-12-90 36.

  o  Fixed multiline text gadget so that it could work standalone again (no
     slider or arrows).

  o  Allow entry of CTRL-J to terminate a line in the multiline text gadget.

Dec-14-90 36.1031

  o  Disable function setup was moved to after the OpenWindow, so that the
     window was open before disabling gadgets.  Some gadgets seem to be able
     to handle SetGadgetAttr without a window, while others can't.

  o  Tool handler now defaults to HandleAppAsync() if no APSH_ToolAddr
     passed.

  o  Tool handler now sets up pr_HomeDir of the new process so that PROGDIR:
     works.

  o  Applications that are started with HandleAppAsync now get the
     ai_ProgName from the task.

Dec-18-90 36.

  o  Added APSH_PortAddr tag.  This is used on tool startup to pass the
     ADDRESS of the SIPC port of the parent application.

  o  Right before HandleAppAsync enters the main event loop, it sends an
     ActiveToolID message to the parent SIPC port.  APSH_PortAddr will
     contain a pointer to the ADDRESS of the tool's SIPC port.


	/* Start an asynchronous project as a tool */
	VOID NewFunc (struct AppInfo * ai, STRPTR args, struct TagItem * ti)
	{
	extern struct TagItem Cloned_App[];
	struct MsgHandler *mh;
	struct TagItem *tag;

	/* Find the APSH_PortAddr tag in the new application's tags */
	if (tag = FindTagItem (APSH_PortAddr, Cloned_App))
	{
	    /* See if we have a SIPC port */
	    if (mh = HandlerData (ai, APSH_Handler, "SIPC", TAG_DONE))
	    {
		/* Get the address of our SIPC port */
		tag->ti_Data = (ULONG) mh->mh_Port;
	    }
	}

	/* Start the new tool. Cloned_App has all the tags of a normal
	 * AppShell application, plus an APSH_PortAddr tag. */
	HandlerFunc (ai,
		 APSH_Handler,	"TOOL",
		 APSH_Command,	APSH_MH_OPEN,
		 APSH_Tool,	"MiniBuild_Project",
		 APSH_ToolData, Cloned_App,
		 TAG_DONE);
	}

	/* Function assigned to ActiveToolID */
	VOID ActiveToolFunc (struct AppInfo * ai, STRPTR args, struct TagItem * ti)
	{
	    struct AppData *ad = (struct AppData *) ai->ai_UserData;
	    struct AppInfo *tai;
	    struct MsgPort *mp;

	    /* The address of the tool's SIPC message port */
	    if (mp = (struct MsgPort *) GetTagData (APSH_PortAddr, NULL, ti))
	    {
		printf("Tool is now active 0x%lx\n", mp);

		/* Remember this name */
		ad->ad_ProjSIPC = mp;
	    }

	    /* Get the tool's AppInfo structure.  This is ONLY for UI
	     * creation utilities!!! */
	    if (tai = (struct AppInfo *) GetTagData (APSH_AppHandle, NULL, ti))
	    {
		/* Remember the tool's AppInfo. */
		ad->ad_TAI = tai;
	    }
	}

	/* To send a command string to the project */
	HandlerFunc (ai,
		     APSH_Handler, "SIPC",
		     APSH_Command, AH_SENDCMD,
		     APSH_PortAddr, ad->ad_ProjSIPC,
		     APSH_CmdString, "window front activate",
		     TAG_DONE);

	/* To call a function with tags */
	HandlerFunc (ai,
		     APSH_Handler, "SIPC",
		     APSH_Command, AH_SENDCMD,
		     APSH_PortAddr, ad->ad_ProjSIPC,
		     APSH_CmdID, AddObjectID,
		     APSH_CmdData, attr_list,
		     TAG_DONE);

	/* To send a block of a data */
	HandlerFunc (ai,
		     APSH_Handler, "SIPC",
		     APSH_Command, AH_SENDCMD,
		     APSH_PortAddr, ad->ad_ProjSIPC,
		     APSH_CmdID, SendDataID,
		     APSH_CmdData, data,
		     APSH_CmdDataLength, data_len,
		     TAG_DONE);

  o  Cleaned up enviroment startup.  Preference tags won't mix with hard-
     wired screen settings anymore.


Dec-20-90 36.

  o  Massive update of the Autodoc entries (preparation for European DevCon).
     All public functions are documented now (except for some of the SIPC
     functions that are slightly private).

  o  Changed command shell text tags to ID's into the command table (for
     consistencies sake).

  o  Made the notification message handler public.  Now can start & stop
     your own file notification easily.  See the Autodoc for details.


Jan-15-91 36.

  o  Fixed bug that caused the tags on a OBJ_Window object to be ignored.

  o  Allowed WA_PubScreen and WA_PubScreenName to be passed through.

  o  Changed PROGDIR: reference to Process->pr_HomeDir, so that the
     annoying PROGDIR: requester will not pop up (until fixed in the OS).

  o  Fixed bug with getting preference directory.  Was only getting it
     if there was a PROGDIR:.

  o  Added menu enable and disable finally.  This only works if the
     menu was built from the text table.

  o  Added a FORCE switch to the ENABLE command.  This will cause a
     command to be enabled regardless of the level of disable.

Jan-17-91 36.

  o  Fixed some problems with relative objects and setting the minimum
     and nominal window sizes.

  o  Dropping an AppShell icon into the screen title bar could cause the
     system to lock.  Was doing a DisplayBeep on a random location.


Jan-18-91 36.

  o  AppInit function couldn't cause a failure to occur.

  o  Fixed reading random memory in PerfFunc when executing a ReadArgs
     command with no arguments.

  o  Fixed problem with error returns being cleared out before the user
     sees them.

  o  Fixed problem of ARexx error return being echoed with an EasyRequest.

  o  Implemented <basename>.LASTERROR RVI in the ARexx error processing
     code.

  o  Implemented WHY command.

Jan-19-91 37.

  o  Changed to version 37.

  o  Implemented the FAULT command.

  o  The text table can no longer contain embedded blanks.

  o  The command shell now echos the error information to the command shell
     instead of popping up an EasyRequester.

  o  Dispatcher now returns APSH_UNKNOWN_COMMAND if a command isn't in
     the function table, instead of passing it to ARexx.  Consistent with
     the Style Guide.  Therefore you have to explicity say RX <cmd> if the
     command is an ARexx script instead of a built-in application function.

  o  Fixed RX so that it works (ASYNC still not implemented).

  o  WINDOW <cmds> would assume OPEN if the CLOSE switch wasn't specified.
     Now requires the OPEN keyword if you want to explicity open a window.

  o  Made the NOGUI switch Really work.

  o  Command Shell string replacements were coming from the AppShell text
     table instead of from the application text table.

  o  Command Shell would lose title if you close it and reopened it.

  o  Added a new tag to the Command Shell message handler.

     APSH_CMDTitle
     Used to specify the title of the Command Shell.  Defaults to
     "<basename> Command Shell".

  o  Added a FailAt level to NotifyUser.  This allows suppression of
     warning messages that don't mean much to a GUI user, but are essential
     to ARexx and the Command Shell.

  o  Was ignoring the APSH_CloseWindow tag if there was one in the
     Window Environment.

  o  Made SetWaitPointer & ClearPointer default to the "Main" window.

Jan-21-91 appshell.library 37.3

  o  NotifyUser wasn't filtering out warning level messages, like "Function
     disabled" or "Aborted by user".

  o  WINDOW function was broken, in that it required either the OPEN or
     CLOSE switch to be present in order to do any of the other functions.

Feb-2-91

  o  Somehow, appobjects was going to the text table for a label ID of
     zero (I must have accidently taken out the test).

Feb-6-91

  o  Took the AUTO flag back out of the default Command Shell window
     spec.  Couldn't get the window pointer when this flag is set.

  o  Had moved the LoadSnapShot code around, and had accidently separated
     it from the get screen code... So it wasn't considering screen size.

  o  Load/SaveSnapShot figures in virtual screens.

Feb-7-91

  o  SUB BAR ITEM in a text table menu description would put the separator
     bar in the sub menu.

  o  AppObjects layout didn't honor local text tables.

  o  Adjustment to relative layout code.  I once said that the rectangle
     coordinates didn't include the borders, well now they don't (per the
     documentation) for all cases.

  o  Used to require a GadTool gadget in an object list in order to do
     group calculations.  Now will do groups for any gadget type.

  o  Added APSH_AlreadyRunning tag.  This is used to specify the function
     to call if a single invocation SIPC port already exists.

     APSH_NameTag contains the name of the existing port.

  o  HandleAppAsync now understands the APSH_CmdString tag.  It allows the
     programmer to pass an argument string that is parsed as the startup
     arguments.  Usefull for cloned applications.

  o  ExpandPattern got a lock on the name instead of the directory that
     the name was in.

  o  AppInit and AppExit functions are now passed the master tag list.
     This is the original tag list, and MUST NOT be modified in any way!

  o  SIPC message handler counts  messages now, and the AppShell
     won't exit the main loop until they are all replied.

  o  All project management routines now use the LockAppInfo() and
     UnlockAppInfo() functions.

Feb-12-91 *** release ***

  o  Slight miscalculation on relative width and height fields. Existing
     Apps will need to adjust accordingly.

  o  Added APSH_GA_Image and APSH_GA_SelectRender tags for specifying the
     name of an object to use as the corresponding image for a boopsi
     object.

  o  Added error recovery for the case of a non-terminated menu table.

  o  ActiveToolID is now passed the master tag list.  This is the
     original tag list, and MUST NOT be modified in any way!


Feb-15-91

  o  APSHSetWaitPointer and APSHClearPointer didn't obtain the window
     pointer tag in the right order, so could sometimes end up going
     to the "Main" window.

  o  Revised the multi-line text gadget to honor TABS and newlines as
     word separators.

Feb-17-91

  o  Implemented RXS command.  This is used to execute an ARexx string file.

  o  Started working on optimizations.  Sizes before optimizations...

     appshell.library	61624 bytes
     appobjects.library	45100 bytes

Feb-18-91

  o  Implemented four new commands:

     NewAPSHObject()     - Allocate an AppShell object
     DisposeAPSHObject() - Dispose of an AppShell object and its data.
     SetAPSHAttr()       - Set a data attribute of an AppShell object.
     GetAPSHAttr()       - Get the current setting of an AppShell object
			   data element.

  o  Put all tags in <libraries/apshattrs.h>.

  o  Define lots of new tags for setting/getting data elements.


Feb-28-91

  o  New classes.

     scrollgclass
     Scroll bar class.  Looks like the GadTools scrollbar when in the window,
     like the Intuition scrollbar when placed in the border.  Also supports
     RMB abort, visual feedback, PGA_??? tags and GadTools scroller tags.

     texticlass
     Text image class that underlines the first character that is preceded
     by an _.

     labelgclass
     Transparent gadget class that allows relative text labels, via texticlass.
     Supports GadTools PLACETEXT_??? flags, via APSH_GTFlags tag.

  o  Lots of cleanup work on the Multiline Text gadget.  Mainly with the
     scrollbar and navigation.

  o  OBJ_boopsi and OBJ_MultiText use labelgclass to get a label.


Mar-9-91

  o  Made the APSH_OBJF_LOCALTEXT flag obsolete.  There is now a
     APSH_OBJF_GLOBALTEXT flag.  This is used to indicate that an window
     object, that is attached to a window with a local text table, is to get
     its label from the global text table.

  o  OBJ_DblBevelIn now accepts a label.

  o  Added OBJ_MGroup for mutually exclusive group.  Accepts OBJ_Button,
     OBJ_Select and OBJ_GImage as members.

  o  Modified keystroke code to handle mutually exclusive groups.

  o  Can't activate a disabled gadget from a keystroke anymore.

  o  Cleaned up support for the Intuition IDCMPUPDATE event.

     * IntuiMessage->IAddress is passed (using TAG_MORE) to the EG_UPDATE
       function.

     * OBJ_boopsi uses the ObjectID as the EG_UPDATE event.

     * OBJ_Scroller uses the ObjectID as the EG_UPDATE event.  PGA_Top
       contains the new top.

     * OBJ_MGroup uses the ObjectID as the EG_UPDATE event.  GTMX_Active
       contains the new active object.

Mar-12-91

  o  Mar-9-91 release had modified the ObjectID field in order to get the
     IDCMPUPDATE events to work.  This caused problems.  Backed that out and
     resolved in a different way.

  o  Added APSHF_ANCHOR_NOCASE flag.  This is used by the LMatch routines
     to indicate that a case insensitive pattern matching is to be used.

  o  Modified Enable/Disable functions to use the APSHF_ANCHOR_NOCASE flag.

  o  For a brief time, using the APSH_CloseWindow flag wouldn't end up
     closing the window (now does again).


Mar-16-91

  o  Added APSH_ChangeWindow event.

  o  Fixed bug in additional Intuition event handling (some were being
     ignored).

  o  Took layer checks out of gadgetbox() function, now that V37 Intuition
     does it.

  o  Fixed ALIAS command (apparently stopped working a long time ago).

  o  Implemented HELP and SYSTEM commands.

  o  The "create menus from text table" routines were modified to disable
     a menu item if the function attached to it is disabled.

  o  Was filtering out too many event types on filter-first-event-after-
     activate-window.


Mar-23-91

  o  Added APSH_MenuTable.  Point this at a text table that only contains
     a text menu description for the window.

Mar-25-91

  o  appobjects.library default label placement flags were overriding
     programmer placement flags.

Apr-91

  o  Added support for hyper.library

  o  Added support for hooks in function calls.  Examples/Support/Main.c
     provides an example of how to define your own hook.

  o  Pass the message and message type to function calls now.
     Examples/Skeleton/Skeleton.c provides an example of an application that
     performs ARexx RVI's.

May-1-91 37.106 ** release **

     appshell.library		59612 bytes
     appobjects.library		62004 bytes
     prefs.library		 8980 bytes
     hyper.library		48624 bytes

@
