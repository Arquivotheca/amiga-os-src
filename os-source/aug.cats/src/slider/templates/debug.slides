.\" Debugging 4/4/91
..
.\" STUFF FOR TROFF
.\" Slide Start
.EF '''
.OF '''
.EH '''
.OH '''
.nf
.nr ZQ 0 1
.af ZQ 1
..
.de SS
-------- SLIDE \\n+(ZQ --------
..
.\" Slide End
.de SE
..
..
.\" Slide Command
.de SC
..
..
..
.\" Our Slide Command macros
.SC macro heading
.SC fontnum 0
.SC shadow 0 0 0 0
.SC box 10 6 0 36
.SC savepen
.SC pen 1
.SC box 12 8 0 32
.SC restorepen
.SC shadow 3 3 -1 -1
.SC center 1
.SC endm

.SC macro heading2
.SC fontnum 0
.SC shadow 0 0 0 0
.SC box 10 44 0 36
.SC savepen
.SC pen 5
.SC box 12 46 0 32
.SC restorepen
.SC shadow 3 3 -1 -1
.SC center 1
.SC endm

.SC macro toolheading
.SC pen 10
.SC heading
.SC endm

.SC macro classicheading
.SC pen 10
.SC heading
.SC endm

.SC macro errorheading
.SC pen 3
.SC heading2
.SC endm

.SC macro body
.SC fontnum 2
.SC shadow 4 4 -1 -1
.SC pen 1
.SC centeron
.SC endm

.SC macro underline
.SC box 10 0 0 2
.SC endm

.SC macro centeron
.SC center 9999
.SC endm

.SC centeroff
.SC center 0
.SC endm

.SC macro snapstart
.SC ;syncsys run screensave ram:myslides/ multi noicons nodelay
.SC endm

.SC macro snap
.SC update
.SC ;syncsys screensave snap
.SC endm

.SC macro snapend
.SC ;syncsys screensave done
.SC endm

.\" Our Slide Show Initialization Commands
.SC snapstart

.\" FIRST SLIDE
.SS
.SC loadfont 0 mFast.font 28
.SC loadfont 1 CGTimes.font 32 40 20
.SC loadfont 2 UniversMedium.font 30 40 20
.SC loadfont 3 UniversMedium.font 36 40 20
.SC pen 1
.SC shadow 3 3 -1 -1
.SC box 4 4 0 0 
.SC fontnum 3
.SC centeron
.SC pen 3
New  Tools  For
.SC pen 10
Debugging
Amiga
Software
.SC centeroff
.SC fontnum 0
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC errorheading
Address  vs.  Constant
.SC body
MOVE.L    0,D0
CMP.L    $14,D0
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC errorheading
Uninitialized Pointer
.SC body
UBYTE  *buf = NULL;
strcpy(buf,string);
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC errorheading
Uninitialized Pointer
.SC body
scr  =
    window->WScreen;
if(scr)...
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC errorheading
Overwriting Array / Mem
.SC body
UBYTE  buf[ MAXN ];
buf[ k ]  =  '\0';
buf[ MAXN ]  =  '\0';
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC body
Using  freed  mem / ptr.
Not  testing  return  value.
Memory Loss
.SC snap
.SE

.SS
.SC classicheading
Classic Programming Error
.SC body
Bad  abort / cleanup  logic
Register  misuse
Badly  init'd  structures
.SC snap
.SE

.SS
.SC pen 5
.SC fontnum 2
.SC shadow 4 4 -1 -1
.SC centeron
NEW  Amiga
debugging  tools
can  catch
these  bugs
.SDC snap
.SE

.SS
.SC toolheading
ENFORCER
.SC body
MMU  debugging  tool.
Catch  low-mem  reads,
and  writes  to  ROM,
and other  illegal  accesses.
.SC snap
.SE

.SS
.SC toolheading
MUNGWALL
.SC body
Catch  overwriting  of
allocations,  and  force
uninit'd  and  freed  mem
to  illegal addresses.
.SC snap
.SE

.SS
.SC toolheading
SNOOP / SNOOPSTRIP
.SC body
Tracks  allocs / deallocs.
MungWall can also snoop.
Snoopstrip discards all
matching allocs / deallocs.
.SC snap
.SE

.SS
.SC toolheading
DEVMON
.SC body
Wedge  into  any  device's
vectors  and  into  Exec IO
functions  to  monitor
all  accesses  to  device.
.SC snap
.SE

.SS
.SC toolheading
LVO
.SC body
Uses  FD  files  to
generate  LVO's  and
WEDGE  command  lines.
.SC snap
.SE

.SS
.SC pen 4
.SC fontnum 2
.SC center 99
Now,
a few short
Live Demos...
.SC snap
.SE
