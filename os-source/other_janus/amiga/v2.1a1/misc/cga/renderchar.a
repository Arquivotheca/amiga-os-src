      xref     _Plane3
      xref     _BPR

      xdef     _RenderChar

BPR40   EQU      (320/8)
BPR80   EQU      (640/8)
*
*  WRITEMASK   -  Writes the given char into one bitplane
*
*  Entry A0 =  Pointer to destination in bitplane
*        A2-A3 =  Pointer to function indexes for Normal and Complement
*        D0 =  Char code in low 8 bits
*
*  Returns  =  A0 -  preserved
*              A1 -  Trashed
*              D0 -  preserved
*              D1 -  Trashed
*
WRITEMASK    MACRO
      moveq.l  #0,D1             *               4
      move.b   D0,D1             *               4
      lsl.l    #2,D1             *               12
      movea.l  A2,A1             *               4
      adda.l   D1,A1             *               8
      movea.l  (A1),A1           *               12
      jsr      (A1)              *               16
      ENDM                       *Total Cycles = 60

WRITEMASKC MACRO

      moveq.l  #0,D1             *               4
      move.b   D0,D1             *               4
      lsl.l    #2,D1             *               12
      movea.l  A3,A1             *               4
      adda.l   D1,A1             *               8
      movea.l  (A1),A1           *               12
      jsr      (A1)              *               16
      ENDM                       *Total Cycles = 60

WRITEMASK0 MACRO
      moveq.l  #0,D1
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      ENDM

WRITEMASK1 MACRO
      move.b   #$FF,D1
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      adda.l   _BPR,A0
      move.b   D1,(A0)
      ENDM
*
*  RenderPlane x
*
*  Entry:   A0 -  Dest pointer
*           D0 -  Char code in low 8 bits Char Attributes in High 8 bits
*
*  Exit:    D0    -  preserved
*           D1    -  trashed
*           A0    -  preserved
*           A1    -  trashed
*

RENDERPLANE0 MACRO
      btst     #8,D0
      beq      NoFG0
      btst     #12,D0
      beq      FGNoBG0
      WRITEMASK1
      bra      Out0
FGNoBG0:
      WRITEMASK
      bra      Out0
NoFG0:
      btst     #12,D0
      beq      NoFGNoBG0
      WRITEMASKC
      bra      Out0
NoFGNoBG0:
      WRITEMASK0
Out0:
      ENDM

RENDERPLANE1 MACRO
      btst     #9,D0
      beq      NoFG1
      btst     #13,D0
      beq      FGNoBG1
      WRITEMASK1
      bra      Out1
FGNoBG1:
      WRITEMASK
      bra      Out1
NoFG1:
      btst     #13,D0
      beq      NoFGNoBG1
      WRITEMASKC
      bra      Out1
NoFGNoBG1:
      WRITEMASK0
Out1:
      ENDM

RENDERPLANE2 MACRO
      btst     #10,D0
      beq      NoFG2
      btst     #14,D0
      beq      FGNoBG2
      WRITEMASK1
      bra      Out2
FGNoBG2:
      WRITEMASK
      bra      Out2
NoFG2:
      btst     #14,D0
      beq      NoFGNoBG2
      WRITEMASKC
      bra      Out2
NoFGNoBG2:
      WRITEMASK0
Out2:
      ENDM

RENDERPLANE3 MACRO
      btst     #11,D0
      beq      NoFG3
      WRITEMASK
      bra      Out3
NoFG3:
      WRITEMASK0
Out3:
      ENDM

      csect    text,0,0,1,2
*
*  RenderChar - Assumes globals _Off _ch _at _NFuncTable _CFuncTable
*                               _Plane0 _Plane1 _Plane2 _Plane3
*

_RenderChar:
      movea.l  D2,A0
      adda.l   A4,A0
      RENDERPLANE0

      movea.l  D4,A0
      adda.l   A4,A0
      RENDERPLANE1

      movea.l  D3,A0
      adda.l   A4,A0
      RENDERPLANE2

      movea.l  _Plane3,A0
      adda.l   A4,A0
      RENDERPLANE3


      RTS


      END
