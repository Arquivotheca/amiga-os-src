Torsten:

To start, read nochannels.doc before you read this file.  

I figured out a reason why my LOCK macro has some NOP's in it, and why 
yours should have some too.  It helps prevent a situation where we're both 
banging on the same memory location in synchronicity, keeping each other out.  
It's just an extra safeguard against something that would very rarely happen.  

I have found a serious flaw in my Services algorithms.  Namely, it's possible 
for us to lock up the system while waiting for one another to respond.
The problem is a complicated one, but the solution is easy to describe.
We have to make minor changes to the logic flow of the AddService, CallService 
and DeleteService code.

The problem occurs when these pieces of code want to use a field of 
the PCToAmiga[] or AmigaToPC[] arrays, and with the old AmigaAddsService 
or PCAddsService fields which are now the AmigaAddsService[], 
AmigaDeletesService[], PCAddsService[] and PCDeletesService[] arrays.  

In plain English, when we want to write to a field of these arrays we:
	- lock the ServiceParam structure
	- try to find an unused field, waiting forever until one becomes 
	  unused
Now, since one of us has the ServiceParam structure locked, the other can't get 
in to set one of the fields to its 'unused' (unused used to equal 0, 
now equals $FFFF) state, so we hang up forever.  This is a little bit stupid, 
I think.

Here's what we must do whenever looking for an unused field in any of 
these arrays:
	- PCToAmiga[]
	- PCAddsService[]
	- PCDeletesService[]
	- AmigaToPC[] 
	- AmigaAddsService[]
	- AmigaDeletesService[]
Do *everything* the logic calls for except trying to find an unused field in 
the array.  Then UNLOCK the ServiceParam structure, and then start looking 
for an unused field.  If you can't find an unused field, do something 
to wait a little while (to free up the bus) and then look again.  
As before, it's safe to read and write these fields 
without locking as long the only thing you write to the Amigaxxx fields 
is $FFFF as soon as you've read the field, and as long as you write to the 
PCxxx fields only after you've found an $FFFF in the field.  


