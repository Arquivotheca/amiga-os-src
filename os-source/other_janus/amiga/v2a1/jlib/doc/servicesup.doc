* === MakeServiceData() =======================================================
* 
* struct MakeServiceData(ApplicationID, LocalID)
* D0                     D4             D5:0-15
* Assembly language expects JanusBase in A6
* 
* This routine expects that the ServiceParam lock is already locked, and 
* if this is the Amiga then that the ServiceBase semaphore is already locked
*
* ENTRY:
*    D4 = ApplicationID
*    D5 = LocalID
*    A6 = Address of JanusBase


* === UnmakeServiceData() =====================================================
* VOID UnmakeServiceData(ServiceData.WA)
*                        A0
* Assembly language expects JanusBase in A6
* Expects ServiceData arg to be in word-access memory space
* 
* This routine expects that the ServiceParam lock is already locked, and 
* if this is the Amiga then that the ServiceBase semaphore is already locked
* 


* === ExpungeService() ========================================================
* VOID ExpungeService(ServiceData.WA)
*                     A0
* Assembly language expects JanusBase in A6
* Expects ServiceData arg to be in word-access memory space
* 
* This routine expects that the ServiceParam lock is already locked, and 
* if this is the Amiga then that the ServiceBase semaphore is already locked


* === InformNewCustomers() ====================================================
* VOID InformNewCustomers(ServiceData.WA)
*                         A0
* Assembly language expects JanusBase in A6
* 
* This routine expects that the ServiceParam lock is already locked, and 
* if this is the Amiga then that the ServiceBase semaphore is already locked


* === InformDeletedService() ==================================================
* VOID InformDeletedService(ServiceData.WA)
*                           A0
* 
* This routine expects that the ServiceParam lock is already locked, and 
* if this is the Amiga then that the ServiceBase semaphore is already locked


* === AllocServiceCustomer() ==================================================
*
* struct ServiceCustomer = AllocServiceCustomer(SignalNumber);
* D0                                            D0
* Assembly language expects JanusBase in A6


* === FreeServiceCustomer() ===================================================
*
* VOID FreeServiceCustomer(customer);
*                          A1
* Assembly language expects JanusBase in A6


* === SignalCustomers =========================================================
* count = SignalCustomers(ServiceData.WA);
* D0:0-7                  A0
* Assembly expects JanusBase in A6
* 
* Expects the ServiceData argument to point into word-access memory space.
* 
* Returns the number of customers signalled


* *****************************************************************************
* 
* VOID WaitServiceParam();
* Expects JanusBase in A6
* 
* Waits politely until the ServiceTask has initialized the ServiceParam 
* structure.
* 
* This routine is advertised as being completely non-register-destructive,
* so do it or die!



* === =========================================================================
* ===  Here are the Channel-Specific  Functions ===============================
* === =========================================================================



* === AllocChannel(ServiceBase) ===============================================
*
* channel = AllocChannel(ServiceBase)
* D0:0-7                 A0
* Assembly language expects JanusBase in A6
*
* If it succeeds, it returns the channel number as a byte in D0.  
* If it fails, it returns a byte of 0 in D0
* 
* ENTRY:
*    - A0 has address of ServiceBase
* EXIT:
*    - D0 has 8 bits of a non-zero channel number, or 0 if failure


* === FreeChannel() ===========================================================
* 
* VOID FreeChannel(Channel)
*                  D0:0-7
* Assembly language expects JanusBase in A6


* === FindUnusedAToP() ============================================================
*
* UBYTE *FindUnusedAToP()
* D0,A0
* From assembly:  JanusBase in A6
* 
* This routine tries and tries, waiting politely between tries, until it finds 
* an unused field of AmigaToPC[].
* 
* IFD CHANNELING
* Returns the byte-access pointer to the available AmigaToPC[] field in 
* both A0 and D0.
* ENDC ; of IFD CHANNELING
* IFND CHANNELING
* Returns the word-access pointer to the available AmigaToPC[] field in 
* both A0 and D0.
* ENDC ; of IFND CHANNELING


* === FindUsedPToA() =========================================================
*
* UBYTE *FindUsedPToA()
* D0,A0
* From assembly:  JanusBase in A6
* 
* This routine tries once to find a used field of PCToAmiga[].
* 
* IFD CHANNELING
* Returns the byte-access pointer to the used PCToAmiga[] field in 
* both A0 and D0.
* ENDC ; of IFD CHANNELING
* IFND CHANNELING
* Returns the word-access pointer to the used PCToAmiga[] field in 
* both A0 and D0.
* ENDC ; of IFND CHANNELING


ChannelMatch:
* ENTRY:
*     D2 = Channel number to match
*     A5 = ServicePara.WA
* 
* EXIT:
*     A3 = Word-access pointer to ServiceData of channel that matches, 
*          or NULL if no match
*     A0 = Byte-access pointer, if A3 is non-null, else undefined
* 
* USES:
*     D0, D1, A0, A1


