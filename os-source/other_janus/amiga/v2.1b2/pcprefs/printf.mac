;===========================================================================
; MACRO to provide a printf debugging call, use it like the 'C' version. ie.
;
;	printf	<'value=%ld pointer=%lx count=%d\n'>,d0,a0,d1
;	printf	<'program name = %s\n'>,#ProgName
;	printf	<'port name = %s\n'>,a0
;	printf	<'character received = \t%c\n'>,d0
;	printf	<'Program length = %d\n'>,#(ProgEnd-ProgStart)
;	printf	<'%c'>,#7
;
; Your program must include this macro file and link with sprintf.obj to
; work correctly with serial output.  If you want output to go to a console
; window then you must link with cprintf.obj instead.  Whichever version
; you decide to use, you must FIRST execute the DEBUGINIT macro before
; making use of the printf macro.  If you linked with cprintf.obj then you
; must also execute the DEBUGKILL macro before exiting your program. (this
; is because the cprintf function uses the DOS library).  A maximum of 8
; arguments can be sent to the printf function.  It's the callers
; responsibility to handle conditional debug statements by surrounding
; the printf call with IFD DEBUG and ENDC conditionals.
;==========================================================================

printf	MACRO
	NOLIST
; first stack up to eight arguments for the printf routine
	IFGE	NARG-9
		LIST
		move.l	\9,-(sp)		; stack arg8
		NOLIST
	ENDC
	IFGE	NARG-8
		LIST
		move.l	\8,-(sp)		; stack arg7
		NOLIST
	ENDC
	IFGE	NARG-7
		LIST
		move.l	\7,-(sp)		; stack arg6
		NOLIST
	ENDC
	IFGE	NARG-6
		LIST
		move.l	\6,-(sp)		; stack arg5
		NOLIST
	ENDC
	IFGE	NARG-5
		LIST
		move.l	\5,-(sp)		; stack arg4
		NOLIST
	ENDC
	IFGE	NARG-4
		LIST
		move.l	\4,-(sp)		; stack arg3
		NOLIST
	ENDC
	IFGE	NARG-3
		LIST
		move.l	\3,-(sp)		; stack arg2
		NOLIST
	ENDC
	IFGE	NARG-2
		LIST
		move.l	\2,-(sp)		; stack arg1
		NOLIST
	ENDC
; Now the actual printf call itself, only if there is an argument string
	IFGE	NARG-1
STKOFF	SET	NARG<<2				; actual stack space used
	XREF	_printf				; in case not used before
		LIST
		pea.l	str\@(pc)		; push string address
		jsr	_printf			; call printf function
		bra.s	done\@
str\@		dc.b	\1,0			; the actual string
		CNOP	0,2
done\@		lea.l	STKOFF(sp),sp		; scrap stuff on stack
		NOLIST
	ENDC
	LIST
	ENDM

;===========================================================================
; MACRO to initialise debug routines, works for cprintf.obj and sprintf.obj.
;===========================================================================

DEBUGINIT	MACRO
		NOLIST
		XREF	_DebugInit
		LIST
		jsr	_DebugInit
		ENDM

;==========================================================================
; MACRO to kill debug routines and libraries if cprintf.obj was linked with
;==========================================================================

DEBUGKILL	MACRO
		NOLIST
		XREF	_DebugKill
		LIST
		jsr	_DebugKill
		ENDM

