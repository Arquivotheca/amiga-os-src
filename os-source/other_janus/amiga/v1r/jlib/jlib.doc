
This File: <sys.amiga>:\janus\doc\jlib.doc
Last changed: 2 Mar 1986

This is a brief description of the code that I have written so far.
This code supports low level access to the "janus" system -- the link
between a pc-10 and an Amiga.

The code is packaged as a library (specifically "janus.library").
All routines that return a value return it in D0.  There is a link
library for C routines.



Include Files
------- -----

janus.[hi]	-- gives interface to janus.library.  All definitions in
		    this file are amiga specific.  The most useful thing
		    in this file are the definitions for janus memory
		    allocation types

janusreg.[hi]	-- hardware constants.	Most people should not need this.
		    If you do, we need to hide more information.

janusvar.[hi]	-- the shared data structure between the amiga and the pc.
		    Once again, you should not need direct access to these
		    routines.  I have tried to provide interface routines
		    to do all the normal things.			

i86block.i	-- command blocks for calling pc's interrupt's directly
		    and for the hard disk.

services.[hi]	-- hard coded constants for interrupt numbers.	Eventually
		    these numbers will be gotten at run time, but for now
		    they are constants.  These numbers correspond to the
		    "jintnum" parameters below.

setupsig.[hi]	-- data structure for SetupJanusSig() call.


The Public Routines
--- ------ --------

oldHandler = SetJanusHandler( jintnum, intserver )(d0/a1)
    This routine sets up an interrupt handler for a particular
    janus interrupt.  The old interrupt is returned.  A null means
    that there is no interrupt handler.  If there is no interrupt
    handler then interrupts not will be processed for that jintnum.


oldEnable = SetJanusEnable( jintnum, newvalue )(d0/d1)
    Each jintnum may be individually enable or disabled (this is
    in addition to the control of setting the interrupt handler
    to NULL).  If the interrupt is disabled then requests that are
    received will not generate interrupts.  These requests may be
    detected via SetJanusRequest.

    If newvalue is 0 then the interrupt is disabled.  If it is
    1 then the interrupt is enabled.  All other values are reserved.

    This routine will generate an interrupt if it an interrupt
    is enabled that has a pending request.  This does not currently
    happen until the next hardware interrupt occurs.


oldRequest = SetJanusRequest( jintnum, newvalue )(d0/d1)
    This routine sets or clears an interrupt request for jintnum.
    If newvalue is zero then the request is cleared.  If newvalue
    is one then the request is set.  In either case the old value
    of the request is returned.

    Setting a request will generate an interrupt (if it is enabled).
    This does not currently happen.


SendJanusInt( jintnum )(d0)
    This call is useful for "system" requests -- e.g. those requests
    not directly defined by the hardware.   The call marks the request
    in the system interrupt area and then posts a hardware interrupt
    to the pc.


CheckJanusInt( jintnum )(d0)
    This call returns the status byte from the interrupt area.	It
    can be used to tell if the pc has noticed the interrupt yet.
    A value of JNOINT ($ff) means no interrupt is pending (which
    probably means that the pc has already processed it).  JSENDINT
    ($7f) means that the interrupt is pending.	Anything else should
    be treated with suspicion.


ptr = AllocJanusMem( size, type )(d0/d1)
    This routine allocate memory from the parameter or buffer memory
    free pools, and returns a 68000 addressible pointer to the memory.
    It allocates "size" bytes, or returns NULL if there was not enough
    memory.

    The type field is used to determine which pool of memory is desired.
    It should be either MEMF_PARAMETER or MEMF_BUFFER.	In addition,
    you may specify what sort of memory access the pointer should refer
    to.  The four choices are MEM_BYTEACCESS, MEM_WORDACCESS,
    MEM_GRAPHICACCESS, or MEM_IOACCESS.  See the hardware description
    for the meaning of these access methods if you do not already know.


FreeJanusMem( ptr, size )(a1,d0)
    The specified memory is returned to the free pool.	Some modest
    error checking is done, and the system will Alert if there is
    a problem.


ptr = JanusMemBase( type )(d0)
    The base of the memory referred to by the type specifier is
    returned.  See AllocJanusMem for a (very) brief description
    of type.


type = JanusMemType( ptr )(d0)
    The type of the pointer is returned.  "Unpredictable results" will
    occur if ptr points to neither buffer memory nor parameter memory.


offset = JanusMemToOffset( ptr )(d0)
    If ptr points to buffer or parameter memory, the offset from the
    start of that memory to ptr will be returned.  This is the value
    that should be fed to SetParamOffset() if this is a parameter block.


offset = GetParamOffset( jintnum )(d0)
    The parameter offset for interrupt jintnum is returned.  The system
    does not interpret this number, but by convention a $ffff means that
    no parameter block has been set up.

oldOffset = SetParamOffset( jintnum, offset )(d0/d1)
    The parameter offset for jintnum is set to the bottom sixteen
    bits of offset.  The previous offset is returned.  The system does
    not interpret this number, but by convention a $ffff means that
    no parameter block had previously been set up.

ptr = GetJanusStart()
    The base of the janus board is returned.


setupSig = SetupJanusSig( jintnum, signum, paramsize, paramtype )
(d0/d1/d2/d3)
    This routine does the "standard" things that most users
    of the janus system would want.  It is conceivable that
    most people who use the janus board will use only this
    routine and CleanupJanusSig().

    The main purpose is to set up an interrupt handler for
    your interrupt, and translate this into an exec signal
    that will be sent to your task.  This allows you to ignore
    all the complexities of writing interrupt code.

    You specify the jintnum to use as the interrupt number
    and the signal number (signum) to be send to you.  Jintnum
    should (for now) be gotten via the include file services.[hi].
    Signum will most often be gotten via AllocSignal(-1), which
    allocates an unused signal.

    In addition to setting up a way to get interrupts, the call
    can set up a parameter area.  It will allocate paramsize
    bytes of type paramtype, and set up the parameter area
    to point to them.

    There is some error checking done while all this is
    going on.  If signum is -1 the call fails (-1 is the error
    return from AllocSignal...).  If there is already an interrupt
    handler then the call fails.  If paramsize is non-zero and there
    is already a parameter area the call fails.  If it cannot allocate
    enough memory the call fails.

    The call returns a NULL if it fails.  If it succeeds then a pointer
    to a SetupSig structure is returned.  This structure is defined
    in setupsig.[hi].


CleanupJanusSig( setsupSig )(a0)
    This routine undoes everything that SetupJanusSig does.


JanusLock( ptr )(a0)
    Gain a janus lock (e.g. a lock on a memory list).  You must not keep this
    lock for a long time -- keep it just long enough to manipulate the data
    structure associated with the lock, and don't go to sleep.

JanusUnLock( ptr )(a0)
    Release a janus lock.


JBCopy( source, desination, length )(a0/a1,d0)
    Copy arbitratily aligned memory as efficiently as possible with the
    processor.


