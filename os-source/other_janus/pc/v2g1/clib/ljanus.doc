                 LJanus.lib.DOC - AutoDocs for C link library
                                Bill Koester	 	

/****************************************************************************
 *
 * FUNCTION	AddService();
 *
 * SYNOPSIS	UBYTE AddService(ApplicationID,LocalID,Size,Type,Flags,Handler,SData);
 *
 * INPUT	ULONG ApplicationID	  
 *		UWORD LocalID			 
 *		UWORD Size
 *		UWORD Type 
 *		UWORD Flags				  
 *		int (*Handler)()		  
 *		struct ServiceData **SData
 *
 * OUTPUT	returns Error code defined in  services.h
 *		JSERV_OK
 *		SData points to valid ServiceData structure if JSERV_OK.
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	AllocJanusMem();
 *
 * SYNOPSIS	APTR AllocJanusMem(Size,Type);
 *
 * INPUT	ULONG Size	;Size of memory to allocate, in BYTES.
 *		ULONG Type	;Type of mem to allocate MEMF_PARAMETER or 
 *																    MEMF_BUFFER
 *
 * OUTPUT	returns pointer to memory or NULL if allocation failed
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	CallAmiga();
 *
 * SYNOPSIS	UBYTE CallAmiga(Service);
 *
 * INPUT	UBYTE Service		;1st generation service number
 *
 * OUTPUT	returns Error code defined in  services.h
 *		JSERV_OK, JSERV_PENDING. JSERV_FINISHED
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	CallService();
 *
 * SYNOPSIS	VOID CallService(ServiceData);
 *
 * INPUT	struct ServiceData *ServiceData ;Pointer to service data structure
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	CheckAmiga();
 *
 * SYNOPSIS	UBYTE CheckAmiga(Service);
 *
 * INPUT	UBYTE Service		;1st generation service number
 *
 * OUTPUT	returns Error code defined in  services.h
 *		JSERV_OK, JSERV_PENDING, JSERV_FINISHED
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	DeleteService();
 *
 * SYNOPSIS	VOID DeleteService(ServiceData);
 *
 * INPUT	struct ServiceData *ServiceData ;Pointer to service data structure
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	FreeJanusMem();
 *
 * SYNOPSIS	VOID FreeJanusMem(Ptr);
 *
 * INPUT 	APTR	Ptr		;Ptr returned by AllocJanusMem
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	GetBase();
 *
 * SYNOPSIS	UBYTE GetBase(Service,ParmSeg,ParmOff,BuffSeg);
 *
 * INPUT  	UBYTE Service		;1st generation service number
 *	  	UWORD *ParmSeg		;Address of UWORD to receive Segment
 *	  	UWORD *ParmOff		;Address of UWORD to recieve ParmOffset
 *	  	UWORD *BuffSeg		;Address of UWORD to recieve BuffOffset
 *
 * OUTPUT	returns Error code defined in  services.h
 *	  	JSERV_OK, JSERV_NOJANUSBASE
 *
 *	  	ParmSeg, ParmOff, and BuffOff are updated if no error.
 *	  	ParmOffset = -1 if not defined.
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	GetService();
 *
 * SYNOPSIS	UBYTE GetService(ApplicationID,LocalID,Flags,Handler,SData);
 *
 * INPUT  	ULONG ApplicationID	  
 *	  	UWORD LocalID			  
 *	  	UWORD Flags				  
 *	  	int (*Handler)()		  
 *	  	struct ServiceData **SData
 *
 * OUTPUT	returns Error code defined in  services.h
 *	  	JSERV_OK
 *	        SData points to valid ServiceData structure if JSERV_OK.
 *
 ***************************************************************************/
/************************************************************************
 *
 * FUNCTION:
 *
 * j_file_transfer()
 * 
 * SYNTAX:
 * 
 * Error = j_file_transfer(Infile,Outfile,Direction,Mode,Transtable,Convert);
 * 
 * INPUTS:
 * 
 * char *Infile      - Pointer to NULL terminated string which is the name   of
 *                     the input file to open. If Direction==JFT_AMIGA_PC Infile
 *                     will point to string containing a valid AmigaDos
 *                     filespec as documented in AREAD.DOC. If Direction==
 *                     JFT_PC_AMIGA Infile will point to a string containing
 *                     a valid PC filespec as documented in AWRITE.DOC.      
 * char *Outfile     - Pointer to NULL terminated string which is the name of
 *                     the output file to open. If Direction==JFT_AMIGA_PC
 *                     Infile will point to a string containing a valid MS-DOS
 *                     filespec as documented in AREAD.DOC. If Direction==
 *                     JFT_PC_AMIGA Infile will point to a valid AmigaDOS
 *                     filespec as documented in AWRITE.DOC.
 *           
 * int  Direction    - Direction flag from jftrans.h
 *                     JFT_AMIGA_PC - Indicates that the transfer is from the
 *                     Amiga to the PC so infile will be
 *                     an Amiga filespec and Outfile will be
 *                     an MS-DOS filespec.
 *                     JFT_PC_AMIGA - Indicates that the transfer is from the
 *                     PC to the Amiga. Infile will be a MS-DOS
 *                     filespec and Outfile will be an Amiga
 *                     filespec.
 * int  Mode         - Mode flag from jftrans.h
 *                     JFT_CRLF   - Causes CRLF conversions to take place.
 *                     JFT_BINARY - Suppresses CRLF conversions.
 * char *Transtable  - Pointer to an optional character array to be used for
 *                     character translations. The format for the array is
 *                     char table[256] = {
 *                        0xnn,      Entry 0 
 *                        0xnn,      Entry 1 
 *                          .        .   
 *                          .        .   
 *                          .        .   
 *                        0xnn,      Entry 254 
 *                        0xnn };    Entry 255 
 *                     j_file_transfer() uses the following line to perform
 *                     its translations:
 *                     writechar = transtable[readchar];
 *                     so the input character is used as an index into the
 *                     table and the and the character contained in that entry
 *                     is the character sent as output. In this way all 255
 *                     ASCII characters can be converted. If a NULL is provided
 *                     for this field the default translation tables are used.
 *                     The default translations are documented in AREAD.DOC and
 *                     AWRITE.DOC.
 * int  Convert      - Conversion flag from jftrans.h
 *                     JFT_CONVERT   - Convert characters according to
 *                     Transtable provided or use defaults if NULL given as
 *                     Transtable.
 *                     JFT_NO_CONVERT - Perform no conversion of characters.
 *                     Character value written will be the
 *                     same as that read.
 * 
 * OUTPUT:
 * 
 * int  Error Error flag from jftrans.h
 *       JFT_ERR_NOERR                   - Indicates a successful transfer.
 *       JFT_ERR_INVALID_MODE            - An invalid mode was specified
 *                                         Valid modes are JFT_CRLF and
 *                                         JFT_BINARY.
 *       JFT_ERR_INVALID_DIRECTION       - An invalid direction was
 *                                         specified. Valid directions
 *                                         are JFT_PC_AMIGA and
 *                                         JFT_AMIGA_PC.
 *       JFT_ERR_NO_SERVER               - The Amiga file server, PCDisk was
 *                                         not running.
 *       JFT_ERR_PC_OPEN                 - The PC file could not be opened.        
 *       JFT_ERR_AMIGA_OPEN              - The Amiga file could not be
 *                                         opened.
 *       JFT_ERR_AMIGA_READ              - There was an error while reading
 *                                         from the Amiga.
 *       JFT_ERR_AMIGA_WRITE             - There was an error while writing
 *                                         to the Amiga.     
 *       JFT_ERR_INVALID_CONVERSION_MODE - An invalid conversion mode was
 *                                         specified, Valid modes are
 *                                         JFT_CONVERT and JFT_NO_CONVERT.
 * 
 * 
 * 
 ************************************************************************/
/****************************************************************************
 *
 * FUNCTION	LockServiceData();
 *
 * SYNOPSIS	UBYTE LockServiceData(ServiceData);
 *
 * INPUT     	struct ServiceData *ServiceData ;Pointer to service data structure
 *
 * OUTPUT	returns Error code defined in  services.h
 *	     	JSERV_OK, JSERV_NOJANUSMEM, JSERV_NOJANUSBASE
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	ReleaseService();
 *
 * SYNOPSIS	VOID ReleaseService(ServiceData);
 *
 * INPUT     	struct ServiceData *ServiceData ;Pointer to service data structure
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	SetParam();
 *
 * SYNOPSIS	UBYTE SetParam(Service,ParmOff);
 *
 * INPUT     	UBYTE Service		;1st generation service number
 *	     	UWORD ParmOff		;Offset for parameter mem
 *
 * OUTPUT	returns Error code defined in  services.h
 *	     	JSERV_OK
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	UnLockServiceData();
 *
 * SYNOPSIS	UBYTE UnLockServiceData(ServiceData);
 *
 * INPUT     	struct ServiceData *ServiceData ;Pointer to service data structure
 *
 * OUTPUT	returns Error code defined in  services.h
 *	     	JSERV_OK, JSERV_NOJANUSMEM, JSERV_NOJANUSBASE
 *
 ***************************************************************************/
/****************************************************************************
 *
 * FUNCTION	WaitAmiga();
 *
 * SYNOPSIS	UBYTE WaitAmiga(Service);
 *
 * INPUT     	UBYTE Service		;1st generation service number
 *
 * OUTPUT	returns Error code defined in  services.h
 *	     	JSERV_FINISHED
 *
 ***************************************************************************/

