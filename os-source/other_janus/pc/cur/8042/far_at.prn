
Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 1


	

			    1	$PAGINATE
			    2	$TITLE(FARADAY AT 8X42 KEYBOARD CONTROLLER)
			    3	$PG PL=58
			    4	$PG PW=132
			    5	;
			    6	;	Keyboard Interface code for Faraday ATease Board........
			    7	;	Copyright Faraday Electronics, 743 Pastoria Ave, Sunnyvale Ca.
			    8	;					February 11 1985
			    9	;	Last update done.................Ver 1.0...............Feb 22 1985
			   10	;	Last update done.................Ver 1.1...............mAR 1 1985
			   11	;	Last update done.................Var 1.2.......Add PC KBD capability
			   12	;						..............3/15/85
			   13	;	Last update done.................Ver 1.3...enable Timer interrupts
			   14	;						..............4/9/85
			   15	;	Last update done.................Ver 1.4...enable A20 line on P2
			   16	;						..............5/7/85
			   17	;	Last update done.................Ver 1.5??.make this source match
			   18	;						   the 1F4B check sum of
			   19	;						   part #07016701 7/28/88
			   20	;	
			   21	;
			   22		DEFSEG	ATCODE, ABSOLUTE
			   23		SEG	ATCODE
			   24	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 2


	

=0000 			   25		ORG  	0
			   26	
			   27	;		Power on Reset interrupt handler
			   28	
0000 04 3F 		   29		jmp	reset
			   30	
			   31	
			   32	;Input Buffer full Interrupt handler
			   33	
=0003 			   34		ORG  3
			   35	
0003 04 F6 		   36		jmp	ibful		;input buffer full interrupt
			   37	
			   38	
			   39	;Timer Overflow Interrupt handler
			   40	
=0007 			   41		ORG  7
			   42	
0007 04 DB 		   43		jmp	timer		;timer overflow interrupt
			   44	
			   45	
0009 43 4F 50 59 52 	   46	TITLE:	DB	'COPYRIGHT (c) FARADAY ELECTRONICS'
000E 49 47 48 54 20 
0013 28 63 29 20 46 
0018 41 52 41 44 41 
001D 59 20 45 4C 45 
0022 43 54 52 4F 4E 
0027 49 43 53 
002A 2E 2E 2E 2E 20 	   47		DB	'....  2/11/85     RLM'
002F 20 32 2F 31 31 
0034 2F 38 35 20 20 
0039 20 20 20 52 4C 
003E 4D 
			   48	
			   49	RESET:
003F 09 		   50		IN	A,P1			;read input port
0040 90 		   51		mov	sts,a			;load the status register
0041 23 C3 		   52		mov	a,#0C3h			;load mask
0043 3A 		   53		OUTL	P2,A			;
0044 F5 		   54		en	flags			;enable master flags
			   55	
			   56	;	set status bits in the status register
			   57	
0045 23 10 		   58		mov	a,#010h
0047 90 		   59		mov	STS,a
			   60	RESET1:
0048 D6 48 		   61		JNIBF	RESET1			;wait here till we get command from main CPU
004A 76 4E 		   62		JF1	RESET2			;if command then go check it
004C 04 48 		   63		JMP	RESET1			;otherwise wait again
			   64	
			   65	

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 3


	

			   66	;	Read input buffer and see if we have a `AA` command from CPU
			   67	
			   68	RESET2:
004E 22 		   69		IN	A,DBB			;read input buffer
004F D3 AA 		   70		XRL	A,#0AAH			;POD command
0051 96 48 		   71		JNZ	RESET1			;no, then wait again
			   72	
			   73	
			   74	;	Now do an initial Power on Diagnostics on the 8042 RAM
			   75	
			   76	POD:
0053 23 00 		   77		MOV	A,#00H
0055 C6 59 		   78		JZ	POD1			;check Z flag
0057 04 48 		   79		JMP	RESET1			;if error then system hangs here
			   80	
			   81	POD1:
0059 23 55 		   82		MOV	A,#55H			;load a value in registers
005B A8 		   83		MOV	R0,A			;to be verified later
005C A9 		   84		MOV	R1,A			
005D AA 		   85		MOV	R2,A
005E AB 		   86		MOV	R3,A
005F AC 		   87		MOV	R4,A
0060 AD 		   88		MOV	R5,A
0061 AE 		   89		MOV	R6,A
0062 AF 		   90		MOV	R7,A
			   91	
			   92	;	Now check values back
			   93	
0063 F8 		   94		MOV	A,R0
0064 D3 55 		   95		XRL	A,#055H			;
0066 96 8B 		   96		JNZ	PODERR			;error if not equal
0068 F9 		   97		MOV	A,R1
0069 D3 55 		   98		XRL	A,#055H
006B 96 8B 		   99		JNZ	PODERR			;error if R1 is not valid
006D FA 		  100		MOV	A,R2			;
006E D3 55 		  101		XRL	A,#055H
0070 96 8B 		  102		JNZ	PODERR
0072 FB 		  103		MOV	A,R3
0073 D3 55 		  104		XRL	A,#055H
0075 96 8B 		  105		JNZ	PODERR
0077 FC 		  106		MOV	A,R4
0078 D3 55 		  107		XRL	A,#055H
007A 96 8B 		  108		JNZ	PODERR
007C FD 		  109		MOV	A,R5
007D D3 55 		  110		XRL	A,#055H
007F 96 8B 		  111		JNZ	PODERR
0081 FE 		  112		MOV	A,R6
0082 D3 55 		  113		XRL	A,#055H
0084 96 8B 		  114		JNZ	PODERR
0086 FF 		  115		MOV	A,R7
0087 D3 55 		  116		XRL	A,#055H

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 4


	

0089 C6 8D 		  117		JZ	PODOK
			  118	
			  119	PODERR:
008B 04 48 		  120		JMP	RESET1			;error go hang 8042 and CPU
			  121	
			  122	;	POD ok. Now set up initial values in the RAM and jmp to main loop
			  123	
			  124	PODOK:
			  125	
008D 27 		  126		CLR	A			;first zero out RAM
008E B8 3F 		  127		MOV	R0,#3FH			;
0090 B9 00 		  128		MOV	R1,#00
			  129	RESET4:
0092 A1 		  130		MOV	@R1,A
0093 19 		  131		INC	R1
0094 E8 92 		  132		DJNZ	R0,RESET4
			  133	
0096 23 60 		  134		MOV	A,#060H
0098 90 		  135		MOV	STS,A
			  136	
0099 B9 20 		  137		MOV	R1,#020H		;get address of command byte
009B B1 10 		  138		MOV	@R1,#010H		;Initialize command byte
009D 19 		  139		INC	R1
009E B1 01 		  140		MOV	@R1,#01H		;LOC 21
00A0 19 		  141		INC	R1		
00A1 B1 06 		  142		MOV	@R1,#06H		;LOC 22
00A3 B9 25 		  143		MOV	R1,#025H
00A5 B1 01 		  144		MOV	@R1,#01H		;LOC 25
00A7 B9 27 		  145		MOV	R1,#027H		;
00A9 B1 FB 		  146		MOV	@R1,#0FBH		;LOC 27
00AB B9 28 		  147		MOV	R1,#028H		;
00AD B1 E0 		  148		MOV	@R1,#0E0H		;LOC 28
00AF B9 29 		  149		MOV	R1,#029H		;
00B1 B1 06 		  150		MOV	@R1,#06H		;LOC 29
00B3 B9 2A 		  151		MOV	R1,#02AH
00B5 B1 10 		  152		MOV	@R1,#010H		;LOC 2A
00B7 B9 2B 		  153		MOV	R1,#02BH
00B9 B1 20 		  154		MOV	@R1,#20H		;LOC 2B
00BB B9 2C 		  155		MOV	R1,#02CH		;
00BD B1 15 		  156		MOV	@R1,#015H		;
00BF 27 		  157		CLR	A
			  158	
			  159	;	Now send 55 to CPU indicating POD ok
			  160	
			  161	
00C0 BE 00 		  162		MOV	R6,#00			;indicate no error
00C2 BF 55 		  163		MOV	R7,#055H		;
00C4 74 D6 		  164		CALL	SENDC			;send char in R7 to cpu
			  165	;
			  166	
00C6 B9 2D 		  167		MOV	R1,#2DH			;fixed on 3/1/85 ver 1.1

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 5


	

00C8 27 		  168		CLR	A			;so as not to skip 1st char on power-up
00C9 A1 		  169		MOV	@R1,A			;
00CA B9 3F 		  170		MOV	R1,#3FH			;initialise diag address
00CC B1 40 		  171		MOV	@R1,#040H		;To 40... ver 1.2 3/15/85
00CE B8 40 		  172		MOV 	R0,#40H			;
			  173	RESET5:
00D0 B0 00 		  174		MOV 	@R0,#0H			;CLEAR MEMORY
00D2 18 		  175		INC 	R0	
00D3 E9 D0 		  176		DJNZ	R1,RESET5		;
			  177	
00D5 23 BF 		  178		MOV 	A,#0BFH			;enable A20 line on soft reset
00D7 3A 		  179		OUTL	P2,A			;  VER 1.4   5/7/85
			  180	
			  181	
00D8 25 		  182		EN  	TCNTI			;enable timer interrupts  4/09/85
00D9 24 00 		  183		JMP 	MAINLP			;jump to main wait loop
			  184	
			  185	
			  186	;	Timer Overflow interrupt service routines.
			  187	;	This routine sets error bit 6 in AC and return to one level
			  188	;	high
			  189	
			  190	TIMER:
00DB 65 		  191		STOP	TCNT			;stop timer/counter
00DC 54 78 		  192		CALL	DLYKL			;drop clock and delay
			  193	
00DE AF 		  194		MOV 	R7,A			;save Ac     ver 1.2  3/15/85
			  195	
00DF C7 		  196		MOV 	A,PSW			;Get current PSW
00E0 A9 		  197		MOV 	R1,A			;
00E1 53 07 		  198		ANL 	A,#07			;Get stack pointer
00E3 07 		  199		DEC 	A			;
00E4 AA 		  200		MOV 	R2,A			;
00E5 F9 		  201		MOV 	A,R1			;Get original PSW
00E6 53 F8 		  202		ANL 	A,#0F8H			;
00E8 4A 		  203		ORL 	A,R2			;
00E9 D7 		  204		MOV 	PSW,A			;Restore PSW
			  205	
			  206	;	check for PC keyboard		3/15/85
			  207	
00EA 09 		  208		IN  	A,P1			;get input port
00EB 72 F3 		  209		JB3 	TIMER3			;AT keyboard, skip
00ED CE 		  210		DEC 	R6				;true timeout
00EE 96 F3 		  211		JNZ 	TIMER3			;yes
00F0 23 01 		  212		MOV 	A,#01H			;set flag
00F2 93 		  213		RETR				;no error return
			  214	
			  215	TIMER3:
00F3 23 40 		  216		MOV 	A,#040H
00F5 93 		  217		RETR				;Set error code in AC and return
			  218	

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 6


	

			  219	
			  220	;	Input Buffer full interrupt service routines
			  221	
			  222	IBFUL:
00F6 65 		  223		STOP	TCNT
00F7 15 		  224		DIS 	I
00F8 24 00 		  225		JMP 	MAINLP			;Go to main loop
			  226	
			  227	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 7


	

=0100 			  228		ORG	100h
			  229	
			  230	
			  231	;	This is the main wait loop where the processor 8042 waits for command
			  232	;	from the main CPU 80286
			  233	;
			  234	
			  235	
			  236	MAINLP:
0100 D6 06 		  237		JNIBF	MAIN00			;jump if input buffer is empty
0102 76 0C 		  238		JF1  	MAIN01			;input buffer full,jump if it is a comand
0104 44 00 		  239		JMP  	CKDATA			;data byte from CPU, go get it
			  240	
			  241	MAIN00:
0106 86 00 		  242		JOBF	MAINLP			;jump if output buffer is full
0108 D6 0E 		  243		JNIBF	MAIN02			;jump if input buffer is empty
010A 24 00 		  244		JMP  	MAINLP			;
			  245	
			  246	MAIN01:
010C 84 00 		  247		JMP  	CKCMD				;Command received from CPU, go analyse it
			  248	
			  249	;
			  250	;	Come here when input and output buffers are empty, Now try to read from
			  251	;	the keyboard.
			  252	;
			  253	
			  254	MAIN02:
010E B9 20 		  255		MOV  	R1,#020H		;look for keyboard disable bit
0110 F1 		  256		MOV  	A,@R1			;
0111 92 00 		  257		JB4  	MAINLP			;do not read keyboard if disabled
			  258	
0113 09 		  259		IN   	A,P1			;check for PC keyboard  ver 1.2  3/15/85
0114 37 		  260		CPL  	A			;
0115 72 8C 		  261		JB3  	PCMODE			;PC keyboard if bit 3 = 0
			  262	
0117 B9 2E 		  263		MOV  	R1,#02EH		;
0119 F1 		  264		MOV  	A,@R1			;
011A C6 22 		  265		JZ   	MAIN03			;
011C 46 00 		  266		JNT1	MAINLP		 	;jump to main loop if KBD data is low
011E 46 00 		  267		JNT1	MAINLP			;
0120 B1 00 		  268		MOV  	@R1,#00			;
			  269	
			  270	MAIN03:
0122 9A B3 		  271		ANL  	P2,#0B3H		;Raise KBD data and clk to indicate ready to
0124 00 		  272		NOP						;receive data from keyboard
0125 00 		  273		NOP
			  274	MAIN05:
0126 26 2E 		  275		JNT0	MAIN04			;jump if keyboard responded by dropping clk
0128 D6 26 		  276		JNIBF	MAIN05			;No command from CPU either, wait in a loop
012A 54 78 		  277		CALL	DLYKL			;CMD/DATA from CPU, tell KBD to hold off
012C 24 00 		  278		JMP  	MAINLP			;Go see what we got

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 8


	

			  279	
			  280	MAIN04:
012E 26 34 		  281		JNT0	MAIN06			;jump if clk is still low
0130 54 78 		  282		CALL	DLYKL			;clk went high, must be transients, drop clk
0132 24 22 		  283		JMP  	MAIN03			;and wait for keyboard again
			  284	
			  285	;	Keyboard ready to Xmit
			  286	
			  287	MAIN06:
0134 74 9A 		  288		CALL	KBDRY			;Go read from keyboard
0136 F2 47 		  289		JB7  	MAIN07			;jump if Xmit error
0138 D2 4D 		  290		JB6  	MAIN08			;jump if timeout error
			  291	
			  292	;	Char just read from keyboard is in R7.  Look at the command byte to
			  293	;	see if this scan code needs to be translated or not
			  294	;
			  295	
			  296	MAIN20:
013A D4 00 		  297		call	STCMD			;
013C B9 20 		  298		MOV  	R1,#020H		;	
013E F1 		  299		MOV  	A,@R1
013F D2 53 		  300		JB6  	MAIN09			;PC compatibility mode, go Xlat scan code
			  301	
			  302	MAIN10:
0141 BE 00 		  303		MOV  	R6,#00			;indicate no error
0143 74 D6 		  304		CALL	SENDC			;GO send char to CPU
0145 24 00 		  305		JMP  	MAINLP			;and wait in the main loop
			  306	
			  307	;	Error while receiving data from keyboard.  Must be parity or xmit
			  308	;	error
			  309	
			  310	MAIN07:
0147 BE 80 		  311		MOV  	R6,#080H		;Set error code
0149 BF 00 		  312		MOV  	R7,#00			;and send a null char
014B 24 3A 		  313		JMP  	MAIN20			;
			  314	
			  315	;	Error in timeout. Data not received from keyboard within specified
			  316	;	time limit.
			  317	
			  318	MAIN08:
014D BE 40 		  319		MOV  	R6,#040H		;set error code
014F BF 00 		  320		MOV  	R7,#00
0151 24 3A 		  321		JMP  	MAIN20			;
			  322	;
			  323	;	Come here to translate scan code.  PC compatibility mode (bit 6) is
			  324	;	set in the command byte. Char just received from keyboard is in R7
			  325	;
			  326	
			  327	MAIN09:
0153 FF 		  328		MOV  	A,R7			;Get char
0154 D3 F0 		  329		XRL  	A,#0F0H			;Is it a Break char

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                          Page 9


	

0156 96 5E 		  330		JNZ  	MAIN15			;NO, JUMP
0158 B9 2D 		  331		MOV  	R1,#02DH		;Set flag
015A B1 80 		  332		MOV  	@R1,#080H		;
015C 24 00 		  333		JMP  	MAINLP			;and return to main loop
			  334	
			  335	MAIN15:
015E FF 		  336		MOV  	A,R7			;
015F D3 84 		  337		XRL  	A,#084H			;Convert scan code 84
0161 96 67 		  338		JNZ  	MAIN11			;Not 84
0163 BF 7F 		  339		MOV  	R7,#07FH		;Yes, then convert it to 7f
0165 24 6E 		  340		JMP  	MAIN12
			  341	
			  342	MAIN11:
0167 FF 		  343		MOV  	A,R7			;
0168 D3 83 		  344		XRL  	A,#083H			;
016A 96 6E 		  345		JNZ  	MAIN12
016C BF 02 		  346		MOV  	R7,#02H			;Convert 83 scan code to 2
			  347	
			  348	MAIN12:
016E FF 		  349		MOV  	A,R7			;
016F F2 41 		  350		JB7  	MAIN10			;Jump if high bit is set
			  351	
			  352	;	check for keyboard disable bit in the command byte and also check
			  353	;	for key lock bit
			  354	;
			  355	
			  356	MAIN14:
0171 B9 20 		  357		MOV  	R1,#020H		;
0173 09 		  358		IN   	A,P1			;read input port
0174 F2 7F 		  359		JB7  	MAIN16			;jump if no key lock
0176 F1 		  360		MOV  	A,@R1			;Get command byte
0177 72 7F 		  361		JB3  	MAIN16			;key inhibit over ride
			  362	;	Keyboard inhibited; do not send char to CPU
			  363	
0179 B9 2D 		  364		MOV	R1,#02DH		;
017B B1 00 		  365		MOV	@R1,#00			;initialise flag
017D 24 00 		  366		JMP	MAINLP			;Go to main wait loop
			  367	
			  368	MAIN16:
017F FF 		  369		MOV	A,R7			;
0180 E3 		  370		MOVP3	A,@A			;read translated scan code from page 3 table
0181 AF 		  371		MOV	R7,A			;
0182 B9 2D 		  372		MOV	R1,#02DH		;
0184 F1 		  373		MOV	A,@R1			;combine two scan codes
0185 4F 		  374		ORL	A,R7			;
0186 AF 		  375		MOV	R7,A			;
0187 B1 00 		  376		MOV	@R1,#00		
0189 27 		  377		CLR	A
018A 24 41 		  378		JMP	MAIN10			;
			  379	
			  380	

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 10


	

			  381	;	Come here if it is a PC key board	ver 1.2  3/15/85
			  382	
			  383	PCMODE:
018C 9A BF 		  384		ANL	P2,#0BFH		;make sure data line is high
018E 8A 80 		  385		ORL	P2,#080H		;
0190 36 96 		  386		JT0	PCMOD1			;wait for clk to go low
0192 36 8C 		  387		JT0	PCMODE
0194 24 9C 		  388		JMP	PCKBD			;start of transmission
			  389	
			  390	PCMOD1:
0196 D6 8C 		  391		JNIBF	PCMODE			;jump if input buffer is empty
0198 54 78 		  392		CALL	DLYKL			;go drop data line, disable keyboard
019A 24 00 		  393		JMP	MAINLP			;and jump to main loop
			  394	
			  395	;
			  396	;	Come here to read PC keyboard. Please note that some keyboards
			  397	;	send out 9 data bits and some 10 data bits. We will ignore the
			  398	;	first start bit and look for 9 additional data bits. If we get
			  399	;	only 8 bits, then the CPU will timeout for the 9th bit and this
			  400	;	will be corrected in the timeout routine.
			  401	;			ver 1.2  3/15/85
			  402	
			  403	
			  404	PCKBD:
019C 34 C0 		  405		CALL	PCREAD			;go read data
019E F2 B4 		  406		JB7	PCERR1			;transmission error
01A0 D2 B8 		  407		JB6	PCERR2			;timeout error
			  408	
01A2 09 		  409		IN 	A,P1			;look for keyboard disabled
01A3 F2 AE 		  410		JB7	PCKBD1			;O.K 
01A5 B9 20 		  411		MOV	R1,#20H			;look at the command byte
01A7 F1 		  412		MOV	A,@R1			;
01A8 72 AE 		  413		JB3	PCKBD1			;O.K
01AA 9A 7F 		  414		ANL	P2,#07FH		;Drop data line
01AC 24 00 		  415		JMP	MAINLP
			  416	
			  417	
			  418	PCKBD1:
01AE BE 00 		  419		MOV	R6,#00H			;NO ERROR
01B0 74 D6 		  420		CALL	SENDC			;send it to CPU
01B2 54 88 		  421		CALL	DLYRTN			;
			  422	
			  423	PCERR1:
01B4 8A 80 		  424		ORL	P2,#080H		;
01B6 24 00 		  425		JMP	MAINLP
			  426	
			  427	PCERR2:
01B8 BE 40 		  428		MOV	R6,#040H		;error code
01BA BF FF 		  429		MOV	R7,#0FFH		;send a null char
01BC 74 D6 		  430		CALL	SENDC			;
01BE 24 B4 		  431		JMP	PCERR1			;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 11


	

			  432	
			  433	;
			  434	;	subroutine to read data from PC keyboard
			  435	;
			  436	
			  437	PCREAD:
01C0 BE 09 		  438		MOV	R6,#09H			;9 data bits to read
01C2 27 		  439		CLR	A
01C3 62 		  440		MOV	T,A			;set timer/counter
			  441	
			  442	READ5:
01C4 26 C4 		  443		JNT0	READ5			;ignore start bit
01C6 55 		  444		STRT	T		
01C7 97 		  445		CLR	C
			  446	
			  447	READ1:
01C8 36 C8 		  448		JT0	READ1			;
01CA 46 CD 		  449		JNT1	READ2			;sample data bit
01CC A7 		  450		CPL	C
			  451	READ2:
01CD 67 		  452		RRC	A			;shift bit just read
01CE 97 		  453		CLR	C			;
			  454	
			  455	READ3:
01CF 26 CF 		  456		JNT0	READ3			;wait for clock to go high
01D1 EE C8 		  457		DJNZ	R6,READ1		;read next bit
01D3 9A 73 		  458		ANL	P2,#073H		;drop data line
			  459	
			  460	READ4:
01D5 65 		  461		STOP	TCNT			;STOP CLOCK
01D6 26 D5 		  462		JNT0	READ4			;wait for clock to go high
01D8 AF 		  463		MOV	R7,A			;put char just read in R7
01D9 27 		  464		CLR	A			;no error
01DA 83 		  465		RET				;	
			  466	
			  467	
			  468	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 12


	

=0200 			  469		ORG	200h
			  470	
			  471	;
			  472	;	Come here to get data from the CPU and send it to the keyboard
			  473	;
			  474	
			  475	CKDATA:
0200 22 		  476		IN	A,DBB			;read data
0201 AF 		  477		MOV	R7,A			;
0202 D4 00 		  478		CALL	STCMD			;
0204 09 		  479		IN	A,P1			;look for PC keyboard  ver 1.2  3/15/85
0205 37 		  480		CPL	A			;
0206 72 8F 		  481		JB3	DATA10			;bit 3 = 0 means PC keyboard
			  482	
0208 B9 20 		  483		MOV	R1,#020H		;
020A F1 		  484		MOV	A,@R1
020B 53 EF 		  485		ANL	A,#0EFH
020D A1 		  486		MOV	@R1,A			;
			  487	
020E 54 36 		  488		CALL	KBDTX			;send it to keyboard
0210 8A 80 		  489		ORL	P2,#080H		;Raise keyboard data line high
0212 F2 24 		  490		JB7	DATA00			;Jump if xmit eror
0214 D2 24 		  491		JB6	DATA00			;jump if timeout error
0216 BE 06 		  492		MOV	R6,#06			;Load timing constant
0218 74 80 		  493		CALL	KBDRD			;read from keyboard ack
021A F2 2A 		  494		JB7	DATA01			;error in receive
021C D2 30 		  495		JB6	DATA02			;timeout error
021E BE 00 		  496		MOV	R6,#00			;no error status
			  497	
			  498	DATA04:	
0220 74 D6 		  499		CALL 	SENDC			;send char in R7 to CPU and set status in R6
0222 24 00 		  500		JMP	MAINLP			;go to main wait loop
			  501	
			  502	DATA00:
0224 BE 20 		  503		MOV	R6,#020H		;set error code
0226 BF FE 		  504		MOV	R7,#0FEH		;send `RESEND` code to CPU
0228 44 20 		  505		JMP	DATA04
			  506	
			  507	DATA01:
022A BE A0 		  508		MOV	R6,#0A0H
022C BF FE 		  509		MOV	R7,#0FEH		;set error code and RESEND code
022E 44 20 		  510		JMP	DATA04
			  511	
			  512	DATA02:
0230 BE 60 		  513		MOV	R6,#060H
0232 BF FE 		  514		MOV	R7,#0FEH
0234 44 20 		  515		JMP	DATA04
			  516	
			  517	
			  518	;
			  519	;	Routine to send data to the keyboard.  In all total 11 bits are send as

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 13


	

			  520	;	follows: 1 start bit, 8 data bits, 1 parity bit and 1 stop bit. The
			  521	;	parity is set to odd parity.
			  522	;
			  523	
			  524	KBDTX:
0236 BB 02 		  525		MOV	R3,#02			;Outer loop count
0238 BC 08 		  526		MOV	R4,#08			;# of data bits to send
023A BD 00 		  527		MOV	R5,#0			;timer constant
023C BE 00 		  528		MOV	R6,#0			;# of is data bits counter
			  529	
023E 9A 73 		  530		ANL	P2,#073H		;lower keyboard data line
0240 54 78 		  531		CALL	DLYKL			;lower clock line, and delay
			  532	
0242 FD 		  533		MOV	A,R5			;set timer/counter
0243 62 		  534		MOV	T,A			;
0244 55 		  535		STRT	T			;start T
0245 9A B3 		  536		ANL	P2,#0B3H		;raise clock
			  537	
			  538	KBD00:
			  539	
0247 FF 		  540		MOV	A,R7			;load char to be transmitted
0248 67 		  541		RRC	A			;rotate first bit in carry
0249 AF 		  542		MOV	R7,A			;
			  543	KBD01:
024A 36 4A 		  544		JT0	KBD01			;wait for clk to drop
024C E6 53 		  545		JNC	KBD02			;jump if data bit is 0
024E 8A 80 		  546		ORL	P2,#080H		;raise KBD data line when data bit = 1
0250 1E 		  547		INC	R6			;keep count of # of 1s
0251 44 55 		  548		JMP	KBD03			;
			  549	
			  550	KBD02:
0253 9A 73 		  551		ANL	P2,#073H		;drop KBD data line when data bit = 0
			  552	
			  553	KBD03:
0255 26 55 		  554		JNT0	KBD03			;wait here for clk line to go high
			  555	
0257 EC 47 		  556		DJNZ	R4,KBD00		;send next data bit
0259 EB 5D 		  557		DJNZ	R3,KBD10A		;end of transmission
025B 44 67 		  558		JMP	KBD10
			  559	
			  560	KBD10A:
025D 23 01 		  561		MOV	A,#01			;generate parity bit
025F DE 		  562		XRL	A,R6			;set bit 0 as parity bit
0260 43 02 		  563		ORL	A,#02H			;set stop bit
0262 BC 02 		  564		MOV	R4,#2			;send only two bits
0264 AF 		  565		MOV	R7,A			;
0265 44 47 		  566		JMP	KBD00			;
			  567	
			  568	;	prepare keyboard to send an ack
			  569	
			  570	KBD10:

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 14


	

0267 65 		  571		STOP	TCNT			;stop timer/counter
0268 23 80 		  572		MOV	A,#080H			;load timer constant
026A 62 		  573		MOV	T,A			
026B 55 		  574		STRT	T
			  575	
			  576	KBD11:
026C 56 6C 		  577		JT1	KBD11			;wait here till KBD data goes low
026E 00 		  578		NOP
026F 00 		  579		NOP
			  580	KBD12:
0270 46 70 		  581		JNT1	KBD12			;wait here till KBD data goes high
0272 65 		  582		STOP	TCNT			;
0273 54 78 		  583		CALL	DLYKL			;
0275 53 00 		  584		ANL	A,#00			;set error code
0277 83 		  585		RET
			  586	
			  587	;
			  588	;	This routine drops KBD clock and does a delay
			  589	;
			  590	
			  591	DLYKL:
			  592	
0278 09 		  593		IN	A,P1			;check for PC keyboard  VER 1.3  3/15/85
0279 72 7F 		  594		JB3	DLYKL2			;AC keyboard
027B 9A 7F 		  595		ANL	P2,#7FH			;drop data line for PC keyboard
027D 44 81 		  596		JMP	DLYKL3			;
			  597	
			  598	DLYKL2:
027F 8A 40 		  599		ORL	P2,#040H		;drop KBD clock line
			  600	DLYKL3:
0281 D5 		  601		SEL	RB1			;
0282 BA 0E 		  602		MOV	R2,#0EH				
			  603	DLYKL1:
0284 EA 84 		  604		DJNZ	R2,DLYKL1		;wait here till R2 goes 0
0286 C5 		  605		SEL	RB0			;
0287 83 		  606		RET
			  607	
			  608	;	Delay routines
			  609	
			  610	DLYRTN:
0288 D5 		  611		SEL	RB1			;select register bank 0
0289 BA 60 		  612		MOV	R2,#060H		;get time constant
028B EA 8B 		  613	DLYRT1:	DJNZ	R2,DLYRT1
028D C5 		  614		SEL	RB0
028E 83 		  615		RET
			  616	
			  617	
			  618	;
			  619	;	Come here if you have PC keyboard. Read data from CPU and send
			  620	;	a dummy ACK.          ver 1.3   3/15/85
			  621	;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 15


	

			  622	
			  623	DATA10:
028F 54 88 		  624		CALL	DLYRTN			;delay
0291 FF 		  625		MOV	A,R7			;
0292 AB 		  626		MOV	R3,A			;save data just read
0293 D3 EE 		  627		XRL	A,#0EEH			;is it echo command to keyboard
0295 C6 99 		  628		JZ	PCSND2			;yes
0297 BF FA 		  629		MOV	R7,#0FAH		;no then send a dummy ACK
			  630	PCSND2:					
0299 BE 00 		  631		MOV	R6,#00H			;no error
029B 74 D6 		  632		CALL	SENDC			;
029D FB 		  633		MOV	A,R3			;get char back
029E D3 FF 		  634		XRL	A,#0FFH			;is it reset code
02A0 C6 A5 		  635		JZ	PCSND3			;yes
02A2 27 		  636		CLR	A
02A3 24 00 		  637		JMP	MAINLP			;otherwise jump to main loop
			  638	PCSND3:
02A5 B9 40 		  639		MOV	R1,#040H		;do a small delay
			  640	
			  641	PCSND4:
02A7 54 88 		  642		CALL	DLYRTN			;
02A9 E9 A7 		  643		DJNZ	R1,PCSND4		;
02AB BF AA 		  644		MOV	R7,#0AAH		;send ok to CPU
02AD BE 00 		  645		MOV	R6,#00H
02AF 74 D6 		  646		CALL	SENDC
02B1 9A B3 		  647		ANL	P2,#0B3H		;raise clk line
02B3 9A 73 		  648		ANL	P2,#073H		;drop data line
02B5 27 		  649		CLR	A			
02B6 24 00 		  650		JMP	MAINLP			;go to main lp
			  651	
			  652	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 16


	

=0300 			  653		ORG		300H
			  654	
			  655	;
			  656	;	Define scan code convertion table
			  657	;
			  658	
			  659	SCNTBL:
			  660	
0300 FF 43 41 3F 3D 	  661		DB	0FFH,43H,41H,3FH,3DH,3BH,3CH,58H
0305 3B 3C 58 
0308 64 44 42 40 3E 	  662		DB	64H,44H,42H,40H,3EH,0FH,29H,59H
030D 0F 29 59 
0310 65 38 2A 70 1D 	  663		DB	65H,38H,2AH,70H,1DH,10H,02H,5AH
0315 10 02 5A 
0318 66 71 2C 1F 1E 	  664		DB	66H,71H,2CH,1FH,1EH,11H,03H,5BH
031D 11 03 5B 
0320 67 2E 2D 20 12 	  665		DB	67H,2EH,2DH,20H,12H,05H,04H,5CH
0325 05 04 5C 
0328 68 39 2F 21 14 	  666		DB	68H,39H,2FH,21H,14H,13H,06H,5DH
032D 13 06 5D 
0330 69 31 30 23 22 	  667		DB	69H,31H,30H,23H,22H,15H,07H,5EH
0335 15 07 5E 
0338 6A 72 32 24 16 	  668		DB	6AH,72H,32H,24H,16H,08H,09H,5FH
033D 08 09 5F 
0340 6B 33 25 17 18 	  669		DB	6BH,33H,25H,17H,18H,0BH,0AH,60H
0345 0B 0A 60 
0348 6C 34 35 26 27 	  670		DB	6CH,34H,35H,26H,27H,19H,0CH,61H
034D 19 0C 61 
0350 6D 73 28 74 1A 	  671		DB	6DH,73H,28H,74H,1AH,0DH,62H,6EH
0355 0D 62 6E 
0358 3A 36 1C 1B 75 	  672		DB	3AH,36H,1CH,1BH,75H,2BH,63H,76H
035D 2B 63 76 
0360 55 56 77 78 79 	  673		DB	55H,56H,77H,78H,79H,7AH,0EH,7BH
0365 7A 0E 7B 
0368 7C 4F 7D 4B 47 	  674		DB	7CH,4FH,7DH,4BH,47H,7EH,7FH,6FH
036D 7E 7F 6F 
0370 52 53 50 4C 4D 	  675		DB	52H,53H,50H,4CH,4DH,48H,01H,45H
0375 48 01 45 
0378 57 4E 51 4A 37 	  676		DB	57H,4EH,51H,4AH,37H,49H,46H,54H
037D 49 46 54 
			  677	;
			  678	;Routine KBDRD: Wait for keyboard to accept data
			  679	;		Input R6 = 6 = Time constant
			  680	;		Ouput R7 = data just read
			  681	
			  682	KBDRD:
0380 27 		  683		CLR	A
0381 9A B3 		  684		ANL	P2,#0B3H		;set KBD clk high
			  685	
			  686	KBRD00:
0383 26 91 		  687		JNT0	KBRD05			;jump if keyboard clk is low

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 17


	

0385 17 		  688		INC	A			;
0386 96 83 		  689		JNZ	KBRD00			;wait in a loop
0388 26 91 		  690		JNT0	KBRD05			;did the clk go low yet
038A EE 83 		  691		DJNZ	R6,KBRD00		;wait till outer loop count is done
038C 54 78 		  692		CALL	DLYKL			;
038E 23 80 		  693		MOV	A,#080H			;set time out error
0390 83 		  694		RET				;
			  695	
			  696	KBRD05:
0391 36 96 		  697		JT0	KBRD06			;jump if clk did not stay low long enough
0393 74 9A 		  698		CALL	KBDRY			;clk is low, go read keyboard
0395 83 		  699		RET				;process error code in higher routines
			  700	
			  701	KBRD06:
0396 54 78 		  702		CALL	DLYKL			;drop clk and delay
0398 64 80 		  703		JMP	KBDRD			;try again
			  704	
			  705	
			  706	;
			  707	;	Routine to read data from keyboard
			  708	;	On exit R7 = keyboard data just read
			  709	;		R6 = error code or 0
			  710	
			  711	KBDRY:
039A BC 08 		  712		MOV	R4,#08H			;# of bits to read
039C BE 00 		  713		MOV	R6,#0			;init counter for # of 1s
039E 23 E0 		  714		MOV	A,#0E0H			;init timer constant
03A0 62 		  715		MOV	T,A			;set up timer/counter
03A1 55 		  716		STRT	T			;and start it			
03A2 27 		  717		CLR	A
			  718	
			  719	KBRD10:
03A3 26 A3 		  720		JNT0	KBRD10			;wait till clk goes high
03A5 00 		  721		NOP				;
			  722	
			  723	KBRD11:
03A6 36 A6 		  724		JT0	KBRD11			;wait for clk to go low
03A8 56 AE 		  725		JT1	KBRD14			;jump if data bit is a 1
03AA 53 FE 		  726		ANL	A,#0FEH			;make low bit 0
03AC 64 B1 		  727		JMP	KBRD15			;read next data bit
			  728	
			  729	KBRD14:
03AE 43 01 		  730		ORL	A,#01			;make low bit 1
03B0 1E 		  731		INC	R6			;keep count of # of 1s for parity
			  732	KBRD15:
03B1 77 		  733		RR	A			;
03B2 EC A3 		  734		DJNZ	R4,KBRD10		;GO read more data
03B4 AF 		  735		MOV	R7,A			;store data in R7
			  736	;
			  737	;	Now check the parity of byte just received
			  738	;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 18


	

			  739	KBRD16:
03B5 26 B5 		  740		JNT0	KBRD16			;wait till clk goes high
03B7 00 		  741		NOP
			  742	
			  743	KBRD17:
03B8 36 B8 		  744		JT0	KBRD17			;wait for clk to go low
03BA 56 BF 		  745		JT1	KBRD18			;jump if the data bit is 1
03BC 27 		  746		CLR	A
03BD 64 C1 		  747		JMP	KBRD19			;
			  748	KBRD18:
03BF 23 01 		  749		MOV	A,#01H			;set AC to 1
			  750	
			  751	KBRD19:
03C1 26 C1 		  752		JNT0	KBRD19			;wait for stop bit
03C3 00 		  753		NOP
			  754	
			  755	KBRD20:
03C4 36 C4 		  756		JT0	KBRD20
03C6 00 		  757		NOP
			  758	
			  759	;	Now check parity..must be odd
			  760		
03C7 65 		  761		STOP	TCNT			;
03C8 00 		  762		NOP				;
03C9 DE 		  763		XRL	A,R6
03CA 12 D1 		  764		JB0	KBRD21			;if bit set means parity ok
			  765	
			  766	;	Parity error
			  767		
03CC 54 78 		  768		CALL 	DLYKL
03CE 23 80 		  769		MOV	A,#080H			;set error code
03D0 83 		  770		RET				;
			  771	
			  772	KBRD21:
03D1 54 78 		  773		CALL	DLYKL
03D3 23 00 		  774		MOV	A,#00			;no error
03D5 83 		  775		RET
			  776	
			  777	
			  778	;
			  779	;	Subroutine SENDC:	Send a char in R7 and status in R6 to the CPU
			  780	;
			  781	
			  782	SENDC:
03D6 D4 00 		  783		CALL	STCMD
03D8 09 		  784		IN	A,P1			;get inhibit switch from input port P1
03D9 47 		  785		SWAP	A
03DA E7 		  786		RL	A			;align bit 4
03DB 53 10 		  787		ANL	A,#010H			;
03DD 4E 		  788		ORL	A,R6			;merge status bits
03DE 90 		  789		MOV	STS,A			;set status register

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 19


	

03DF FF 		  790		MOV	A,R7			;get char
03E0 02 		  791		OUT	DBB,A			;send it to CPU
03E1 83 		  792		RET				;
			  793	
			  794	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 20


	

=0400 			  795		ORG 	0400H
			  796	
			  797	;
			  798	;	Come here to handle command from the CPU to 8042
			  799	;
			  800	
			  801	
			  802	CKCMD:
0400 22 		  803		IN  	A,DBB			;read input buffer
0401 AF 		  804		MOV 	R7,A			;
0402 D4 00 		  805		CALL	STCMD			;
0404 FF 		  806		MOV	A,R7			;restore command
0405 D2 AC 		  807		JB6	CMD20			;
0407 F2 25 		  808		JB7	CMD30			;
			  809	
			  810	;	Come here if the command code is 00 - 3F
			  811	
0409 B2 0E 		  812		JB5	CMD10
040B B8 2B 		  813		MOV	R0,#02BH
040D 60 		  814		ADD	A,@R0
			  815	
			  816	CMD10:
040E A9 		  817		MOV	R1,A			;
040F F1 		  818		MOV	A,@R1			;get contents of RAM location
			  819	
			  820	CMD10A:
0410 AF 		  821		MOV	R7,A
			  822	CMD11:
0411 BE 00 		  823		MOV	R6,#00
0413 74 D6 		  824		CALL	SENDC			;send R6 and R7 to CPU
0415 27 		  825		CLR	A
0416 24 00 		  826		JMP	MAINLP			;go wait in main loop
			  827	
			  828	;
			  829	;	Handling of commands 40 - 7F (except 60)
			  830	;
			  831	
			  832	CMD27:
0418 F9 		  833		MOV	A,R1			;restore original command
0419 53 3F 		  834		ANL	A,#03FH			;zero out bit 6
041B B2 20 		  835		JB5	CMD27A			;
041D B8 2B 		  836		MOV	R0,#02BH
041F 60 		  837		ADD	A,@R0
			  838	
			  839	CMD27A:
0420 A9 		  840		MOV	R1,A			;
0421 22 		  841		IN	A,DBB			;get input from CPU
0422 A1 		  842		MOV	@R1,A			;store it in that location
0423 24 00 		  843		JMP	MAINLP			;go wait in main loop
			  844	
			  845	;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 21


	

			  846	;	Handling of commands 80 - BF. Valid commands are AA - AE
			  847	;
			  848	
			  849	CMD30:
0425 B2 29 		  850		JB5	CMD30B
			  851	
			  852	CMD30A:
0427 24 00 		  853		JMP	MAINLP			;invalid command, jump to main loop
			  854	
			  855	CMD30B:
0429 92 27 		  856		JB4	CMD30A			;
			  857	
			  858	;	valid command byte
			  859	
042B B9 20 		  860		MOV	R1,#020H		;get command byte
042D A8 		  861		MOV	R0,A			;save command
042E D3 AE 		  862		XRL	A,#0AEH			;is it AE
0430 96 38 		  863		JNZ	CMD31			;no.skip
			  864	
			  865	;	Command is AE : clear keyboard disable (bit 4) in the command byte
			  866	
0432 F1 		  867		MOV	A,@R1			;get current command byte	
0433 53 EF 		  868		ANL	A,#0EFH			;mask off bit 4
			  869	CMD30C:		
0435 A1 		  870		MOV	@R1,A			;save byte back in RAM
0436 24 00 		  871		JMP	MAINLP			;
			  872	
			  873	CMD31:
0438 F8 		  874		MOV	A,R0			;restore command
0439 D3 AD 		  875		XRL	A,#0ADH			;is it AD command
043B 96 42 		  876		JNZ	CMD32			;no skip
			  877	
			  878	
			  879	;
			  880	;	Command is AD: set keyboard disable bit (bit 4) of command byte
			  881	;
043D F1 		  882		MOV	A,@R1			;get current value
043E 43 10 		  883		ORL	A,#010H			;set bit
0440 84 35 		  884		JMP	CMD30C			;
			  885	
			  886	CMD32:
0442 F8 		  887		MOV	A,R0 			;		
0443 D3 AC 		  888		XRL	A,#0ACH			;is it AC
0445 96 4B 		  889		JNZ	CMD33			;no skip
			  890	
			  891	;	Command is AC: Do a diagnostic dump to CPU
			  892	
0447 B4 10 		  893		CALL	DIAGDP
0449 24 00 		  894		JMP	MAINLP			;
			  895	
			  896	CMD33:

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 22


	

044B F8 		  897		MOV	A,R0
044C D3 AB 		  898		XRL	A,#0ABH			;is it AB command
044E 96 54 		  899		JNZ	CMD34			;no skip
			  900	
			  901	;	Command is AB: Do the interface test
0450 B4 6E 		  902		CALL	IFTEST
0452 84 11 		  903		JMP	CMD11
			  904	
			  905	
			  906	CMD34:
0454 F8 		  907		MOV	A,R0
0455 D3 AA 		  908		XRL	A,#0AAH			;is it AA command
0457 96 5B 		  909		JNZ	CMD35			;no skip
			  910	
			  911	;	Command is AA: Do internal diagnostics
			  912		
0459 04 53 		  913		JMP	POD
			  914	CMD35:
045B 24 00 		  915		JMP	MAINLP
			  916	
			  917	
			  918	;
			  919	;	Handling of commands C0 - FF. Valid commands are C0,C2,C3,D0,D1	
			  920	;	E0 & F0 - FF
			  921	;
			  922	CMD40:
045D B2 8B 		  923		JB5	CMD60			;jump if EX or EX command
045F 92 79 		  924		JB4	CMD50			;jump if DX command
			  925	
			  926	;	Command is C0 - CF
			  927	
0461 72 5B 		  928		JB3	CMD35			;jump if invalid command
0463 52 5B 		  929		JB2	CMD35			;jump if invalid command
0465 32 6C 		  930		JB1	CMD41			;jump if command is C2
0467 12 72 		  931		JB0	CMD42			;jump if command is C1
			  932	
			  933	;	command is C0
			  934	
0469 09 		  935		IN	A,P1			;read input buffer
046A 84 10 		  936		JMP	CMD10A			;go send it to CPU
			  937	
			  938	;	command is C2
			  939	
			  940	CMD41:
046C 09 		  941		IN	A,P1			;execute C2 command
046D 90 		  942		MOV	STS,A			;read P1 and store in status reg.
046E D6 6C 		  943		JNIBF	CMD41			;wait until input buffer is full
0470 24 00 		  944		JMP	MAINLP			;
			  945	
			  946	;	Command is C1
			  947	

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 23


	

			  948	CMD42:					
0472 09 		  949		IN	A,P1			;execute command C3
0473 47 		  950		SWAP	A
0474 90 		  951		MOV	STS,A			;
0475 D6 72 		  952		JNIBF	CMD42
0477 24 00 		  953		JMP	MAINLP
			  954	;	Command is D0 - DF
			  955	
			  956	CMD50:
0479 53 0F 		  957		ANL	A,#0FH			;isolate bits 0-3
047B 96 80 		  958		JNZ	CMD51			;
			  959	
			  960	;	D0 Command
			  961	
047D 0A 		  962		IN	A,P2			;read output port
047E 84 10 		  963		JMP	CMD10A			;send it to CPU
			  964	
			  965	CMD51:
0480 07 		  966		DEC	A
0481 96 5B 		  967		JNZ	CMD35
			  968	
			  969	;	Command is D1
			  970	
			  971	CMD52:
0483 D6 83 		  972		JNIBF	CMD52			;wait here for CPU to send a byte
0485 76 00 		  973		JF1	CKCMD			;if command go execute it
0487 22 		  974		IN	A,DBB			;read data byte
0488 3A 		  975		OUTL	P2,A			;write to output port
0489 84 5B 		  976		JMP	CMD35
			  977	
			  978	;	Execute commands EX & FX
			  979	CMD60:
048B 92 9B 		  980		JB4	CMD70			;jump if command is FX
			  981	
			  982	;	Command is E0 - EF
			  983	
048D 53 0F 		  984		ANL	A,#0FH			;isolate bits 0-3
048F 96 5B 		  985		JNZ	CMD35			;jump if not E0
			  986	
			  987	;	Command is E0: read test inputs and send to CPU
			  988		
0491 26 95 		  989		JNT0	CMD61
0493 D3 01 		  990		XRL	A,#01H
			  991	CMD61:
0495 46 10 		  992		JNT1	CMD10A
0497 D3 02 		  993		XRL	A,#02H			;set bit 1 if KBD data is high
0499 84 10 		  994		JMP	CMD10A
			  995	
			  996	;
			  997	;	Command is F0 - FF: Pulse output port P2
			  998	;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 24


	

			  999	
			 1000	CMD70:
049B A8 		 1001		MOV	R0,A			;save original command
049C 0A 		 1002		IN	A,P2			;read output port and save it
049D AA 		 1003		MOV	R2,A
049E B9 20 		 1004		MOV	R1,#020H		;
04A0 F1 		 1005		MOV	A,@R1			;read current value of command byte
04A1 53 03 		 1006		ANL	A,#03			;isolate bits 0,1
04A3 47 		 1007		SWAP	A				;
04A4 4A 		 1008		ORL	A,R2			;merge bits with output port P2 value
04A5 58 		 1009		ANL	A,R0			;set selected bits
04A6 3A 		 1010		OUTL	P2,A			;output it to P2
04A7 43 0F 		 1011		ORL	A,#0FH			;
04A9 3A 		 1012		OUTL	P2,A	
04AA 84 5B 		 1013		JMP	CMD35
			 1014	
			 1015	
			 1016	CMD20:
04AC F2 5D 		 1017		JB7	CMD40
			 1018	
			 1019	;	Execute commands 40 - 7F
			 1020	
			 1021	CMD21:
04AE D6 AE 		 1022		JNIBF	CMD21			;wait for CPU to send a byte
04B0 76 00 		 1023		JF1	CKCMD			;jump if it is a command
04B2 A9 		 1024		MOV	R1,A			;save original command
04B3 D3 60 		 1025		XRL	A,#060H			;is it command 60
04B5 96 18 		 1026		JNZ	CMD27			;NO
			 1027	
			 1028	;	Execute command 60
04B7 B9 20 		 1029		MOV	R1,#020H		;
04B9 F1 		 1030		MOV	A,@R1			;get current value of command byte
04BA AA 		 1031		MOV	R2,A			;save it
04BB 22 		 1032		IN	A,DBB			;read input byte from CPU
04BC A1 		 1033		MOV	@R1,A			;write new value in the command byte
04BD 92 CB 		 1034		JB4	CMD22B			;jump if bit 4 set
04BF FA 		 1035		MOV	A,R2			;
04C0 53 10 		 1036		ANL	A,#010H			;set bit if not previously set
04C2 C6 C8 		 1037		JZ	CMD22A			;
04C4 B8 2E 		 1038		MOV	R0,#02EH		;save previous value
04C6 B0 01 		 1039		MOV	@R0,#01H		;
			 1040	
			 1041	CMD22A:
04C8 F1 		 1042		MOV	A,@R1
04C9 84 CD 		 1043		JMP	CMD22C
			 1044	
			 1045	CMD22B:
04CB 8A 40 		 1046		ORL	P2,#040H		;keyboard disable, set clk low
			 1047	
			 1048	CMD22C:
04CD 52 D2 		 1049		JB2	CMD23A			;is sys flag on?

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 25


	

04CF 85 		 1050		CLR	F0    			;clear it
04D0 84 D5 		 1051		JMP	CMD23B
			 1052	
			 1053	CMD23A:
04D2 B6 D5 		 1054		JF0	CMD23B
04D4 95 		 1055		CPL	F0
			 1056	
			 1057	CMD23B:
04D5 32 DB 		 1058		JB1	CMD24A			;is bit on
04D7 9A DF 		 1059		ANL	P2,#0DFH		;
04D9 84 DD 		 1060		JMP	CMD24B			;
			 1061			
			 1062	CMD24A:
04DB 8A 20 		 1063		ORL	P2,#020H		;set bit 5 of P2
			 1064	
			 1065	CMD24B:
04DD 12 E3 		 1066		JB0	CMD25A
04DF 9A EF 		 1067		ANL	P2,#0EFH		;reset bit 4 (OBF) of P2
04E1 84 E5 		 1068		JMP	CMD25B
			 1069	
			 1070	CMD25A:
04E3 8A 10 		 1071		ORL	P2,#010H		;set bit 4 (OBF) of P2
			 1072	
			 1073	CMD25B:	
04E5 B2 ED 		 1074		JB5	CMD26A
04E7 8A 40 		 1075		ORL	P2,#040H		;set KBD clk low
04E9 8A 80 		 1076		ORL	P2,#080H		;set KBD clk high
04EB 24 00 		 1077		JMP	MAINLP
			 1078	
			 1079	CMD26A:
04ED 9A 7F 		 1080		ANL	P2,#07FH		;set KBD clk high
04EF 9A B4 		 1081		ANL	P2,#0B4H		;set KBD data low
04F1 24 00 		 1082		JMP	MAINLP
			 1083	
			 1084	
			 1085	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 26


	

=0500 			 1086		ORG	500H
			 1087	
0500 0B 02 03 04 05 	 1088		DB	0BH,02H,03H,04H,05H,06H,07H,08H
0505 06 07 08 
0508 09 0A 1E 30 2E 	 1089		DB	09H,0AH,1EH,30H,2EH,20H,12H,21H
050D 20 12 21 
			 1090	;
			 1091	;	Execute diagnostic dump of 8042 RAM to CPU. In all send 20 bytes
			 1092	;
			 1093	
			 1094	DIAGDP:
0510 23 10 		 1095		MOV	A,#010H			;
0512 90 		 1096		MOV	STS,A			;
0513 B9 30 		 1097		MOV	R1,#030H		;Read P1,P2T0T1 & PSW
0515 B4 2C 		 1098		CALL	DIAG6
0517 B9 20 		 1099		MOV	R1,#20H			;start of dump address
0519 27 		 1100		CLR	A
051A BE 14 		 1101		MOV	R6,#014H		;counter for 20 bytes
			 1102	
			 1103	DIAG1:
051C D6 1F 		 1104		JNIBF	DIAG2			;jump if input buffer is empty
			 1105	DIAGRT:
051E 83 		 1106		RET				;input buffer full, abort operation
			 1107	DIAG2:
051F 86 1C 		 1108		JOBF	DIAG1			;jump if output buffer is full
			 1109	
			 1110	;	input buffer & output buffer are empty
			 1111	
0521 B4 65 		 1112		CALL	DELAY			;
0523 F1 		 1113		MOV	A,@R1			;get byte to send
0524 B4 40 		 1114		CALL	SEND			;
0526 12 1E 		 1115		JB0	DIAGRT			;abort operation if error
0528 19 		 1116		INC	R1				;next byte
0529 EE 1C 		 1117		DJNZ	R6,DIAG1		;
052B 83 		 1118		RET
			 1119	
			 1120	;
			 1121	;	Routine to read P1, P2 T0T1 & PSW and send it to CPU
			 1122	;
			 1123	
			 1124	DIAG6:
052C 09 		 1125		IN	A,P1			;get input port
052D A1 		 1126		MOV	@R1,A			;save it at LOC 30h
052E 19 		 1127		INC	R1
052F 0A 		 1128		IN	A,P2			;get output port
0530 A1 		 1129		MOV	@R1,A			;save it at LOC 31
0531 19 		 1130		INC	R1
0532 27 		 1131		CLR	A
0533 26 37 		 1132		JNT0	DIAG4			;jump if clk is low
0535 23 01 		 1133		MOV	A,#01H			;clk high set bit
			 1134	DIAG4:

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 27


	

0537 46 3B 		 1135		JNT1	DIAG5			;jumpif KBD data is low
0539 03 02 		 1136		ADD	A,#02H			;data line high, set bit
			 1137	DIAG5:
053B A1 		 1138		MOV	@R1,A			;save state of T0 & T1
053C 19 		 1139		INC	R1
053D C7 		 1140		MOV	A,PSW			;send status
053E A1 		 1141		MOV	@R1,A
053F 83 		 1142		RET				;
			 1143	
			 1144	;
			 1145	;	Routine SEND: send a byte to CPU in system scan code format.
			 1146	;
			 1147	
			 1148	SEND:
0540 AA 		 1149		MOV	R2,A			;save char
0541 47 		 1150		SWAP	A
0542 53 0F 		 1151		ANL	A,#0FH			;send high nibble first
0544 A3 		 1152		MOVP	A,@A			;translate it
0545 02 		 1153		OUT	DBB,A			;send it to CPU
0546 B4 65 		 1154		CALL	DELAY			;
			 1155	
			 1156	SEND1:
0548 D6 4C 		 1157		JNIBF	SEND2			;jump if input buffer is empty
054A A4 62 		 1158		JMP	SENDRT			;input buffer full, abort operation
			 1159	SEND2:
054C 86 48 		 1160		JOBF	SEND1			;wait for CPU to pick up last byte
			 1161	
054E FA 		 1162		MOV	A,R2			;get char back
054F 53 0F 		 1163		ANL	A,#0FH			;
0551 A3 		 1164		MOVP	A,@A			;translate it
0552 02 		 1165		OUT	DBB,A			;send it to CPU
0553 B4 65 		 1166		CALL	DELAY
			 1167	
			 1168	SEND3:
0555 D6 59 		 1169		JNIBF	SEND4			;jump if iput buffer is empty
0557 A4 62 		 1170		JMP	SENDRT			;error if input buffer is full
			 1171	SEND4:
0559 86 55 		 1172		JOBF	SEND3			;wait for CPU to pick up last byte
			 1173	
055B 23 39 		 1174		MOV	A,#39H			;
055D 02 		 1175		OUT	DBB,A			;send a delimiter
055E B4 65 		 1176		CALL	DELAY			;
0560 27 		 1177		CLR	A
0561 83 		 1178		RET				;
			 1179	
			 1180	SENDRT:
0562 23 01 		 1181		MOV	A,#01H			;set error code
0564 83 		 1182		RET				;
			 1183	
			 1184	DELAY:
0565 B8 00 		 1185		MOV	R0,#00

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 28


	

0567 BC 40 		 1186		MOV	R4,#040H
			 1187	DELAY1:
0569 E8 69 		 1188		DJNZ	R0,DELAY1		;inner wait loop
056B EC 69 		 1189		DJNZ	R4,DELAY1
056D 83 		 1190		RET
			 1191	
			 1192	
			 1193	;
			 1194	;	Interface test for 8042
			 1195	;
			 1196	
			 1197	IFTEST:
056E 9A B3 		 1198		ANL	P2,#0B3H		;raise clock
0570 8A 80 		 1199		ORL	P2,#80H			;raise data
0572 27 		 1200		CLR	A
			 1201	
			 1202	TEST2:
0573 36 7B 		 1203		JT0	TEST1			;jump if clock is high
0575 07 		 1204		DEC	A
0576 96 73 		 1205		JNZ	TEST2			;wait in a loop for a while
0578 BF 01 		 1206		MOV	R7,#01H			;error, clock not high
057A 83 		 1207		RET				;send error code to CPU
			 1208	
			 1209	TEST1:
057B 8A 40 		 1210		ORL	P2,#040H		;drop clock
057D 00 		 1211		NOP
057E 00 		 1212		NOP
057F 26 88 		 1213		JNT0	TEST3			;make sure clock went lot
0581 26 88 		 1214		JNT0	TEST3			;check 1 more time
0583 9A B3 		 1215		ANL	P2,#0B3H		;
0585 BF 02 		 1216		MOV	R7,#02			;set error code
0587 83 		 1217		RET
			 1218	
			 1219	TEST3:
0588 27 		 1220		CLR	A
			 1221	TEST31:
0589 56 91 		 1222		JT1	TEST4			;jump if data line is high
058B 07 		 1223		DEC	A
058C 96 89 		 1224		JNZ	TEST31      		;try again     
058E BF 03 		 1225		MOV	R7,#03			;set error code	
0590 83 		 1226		RET
			 1227	
			 1228	TEST4:
0591 9A 73 		 1229		ANL	P2,#073H		;drop data line
0593 00 		 1230		NOP
0594 00 		 1231		NOP
0595 46 9E 		 1232		JNT1	TEST5			;jump if data line dropped
0597 46 9E 		 1233		JNT1	TEST5			;
0599 8A 80 		 1234		ORL	P2,#080H		;
059B BF 04 		 1235		MOV	R7,#04			;send error code to CPU
059D 83 		 1236		RET				;

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 29


	

			 1237	
			 1238	TEST5:
059E 8A 80 		 1239		ORL	P2,#080H		             
05A0 BF 00 		 1240		MOV	R7,#00			;no error
05A2 83 		 1241		RET
			 1242	$EJECT

Avocet 8048     Assembler v2.20, #01469   Chip=8041A                                                               4/18/91 21:17:21
FARADAY AT 8X42 KEYBOARD CONTROLLER                                                                                         Page 30


	

=0600 			 1243		ORG	600H
			 1244	
			 1245	;	Come here to store last 40 commands given to 8042.  Buffer starts
			 1246	;	from 40hex to 7F.  Location 3F contains the current pointer
			 1247	;	                  corrected   5/7/85  ver 1.4
			 1248	
			 1249	STCMD:
0600 23 3F 		 1250		MOV	A,#03FH
0602 A8 		 1251		MOV	R0,A			;
0603 F0 		 1252		MOV	A,@R0			;get current pointer
0604 D3 7F 		 1253		XRL	A,#07FH			;end of buffer
0606 96 0B 		 1254		JNZ	STCMD2			;no
0608 23 40 		 1255		MOV	A,#40H			;
060A A0 		 1256		MOV	@R0,A			;yes, reset to start of buffer
			 1257	STCMD2:
060B F0 		 1258		MOV	A,@R0			;
			 1259	STCMD1:
060C A9 		 1260		MOV	R1,A			;
060D FF 		 1261		MOV	A,R7			;get current command
060E A1 		 1262		MOV	@R1,A			;store it
060F F0 		 1263		MOV	A,@R0			;
0610 17 		 1264		INC	A			;update pointer
0611 A0 		 1265		MOV	@R0,A			;
0612 83 		 1266		RET
			 1267	
			 1268	
			 1269	
			 1270		END
