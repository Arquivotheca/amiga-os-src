Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-1
                                                            

                                	TITLE   emumouse 
                                 
 0000                           cseg	SEGMENT  BYTE PUBLIC 'CODE' 
 0000                           cseg	ENDS 
                                	ASSUME  CS: cseg, DS: cseg, SS: cseg, ES: cseg
				 
 0000                           cseg      SEGMENT 
                                 
                                 
 0080                           		org	80H 
 0080  0001[                    ParamSize	db	1 dup (?) 
            ??                  
                         ]      
                                
 0081  007F[                    Params		db	7fH dup (?)	 
            ??                  
                         ]      
                                
                                 
 0100                           		org	100H		; ====== 
 0100                           Start: 
 0100  E9 0F84 R                		jmp	main 
                                 
 0103  00                       DoTrace		db	0 
                                 
 0104  00                       UseSprite	db	0		; default is graphics on the PC
				 side 
 0105  08                       TimerIntNo	db	8		; default is 8, alternative is
				 1CH 
 0106  1C                       OtherIntNo	db	1CH		; default is 8, alternative 
				is 1CH 
 0107  036A R                   TimerProc	dw	offset MouseInt 
 0109  03CA R                   OtherProc	dw	offset Null 
                                 
 010B  0001[                    OldOffset	DW 01H DUP (?) 
            ????                
                         ]      
                                
 010D  0001[                    OldSegment	DW 01H DUP (?) 
            ????                
                         ]      
                                
 010F  0001[                    TimerOffset	DW 01H DUP (?) 
            ????                
                         ]      
                                
 0111  0001[                    TimerSegment	DW 01H DUP (?) 
            ????                
                         ]      
                                
 0113  0001[                    OtherOffset	DW 01H DUP (?) 
            ????                
                         ]      
                                
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-2
                                                            

 0115  0001[                    OtherSegment	DW 01H DUP (?) 
            ????                
                         ]      
                                
 0117  0001[                    VideoOffset	DW 01H DUP (?) 
            ????                
                         ]      
                                
 0119  0001[                    VideoSegment	DW 01H DUP (?) 
            ????                
                         ]      
                                
                                 
 011B  0008 E000                DualPortArea	dw	8,0E000H	; Dual Port Ram Addres
				s 
 011F  0008 E000                ParamArea	dw	8,0E000H	; Dual Port Ram Address 
                                 
 0123  0000                     OldStackSeg	dw	0 
 0125  0000                     OldStackPtr	dw	0 
 0127  0080[                    MyStack		dw	128 dup(?) 
            ????                
                         ]      
                                
 = 0227                         MyStackTop	equ	$ 
                                 
                                 
 = 0000                         AmigaPCX		equ	0		; X Increment from Amiga 
 = 0002                         AmigaPCY		equ	2		; Y Increment from Amiga 
 = 0004                         AmigaPCLeftP		equ	4		; Left Pressed count f. A.
				 
 = 0006                         AmigaPCRightP		equ	6		; Right Pressed count f. 
				A. 
 = 0008                         AmigaPCLeftR		equ	8		; Left Released count f. A
				. 
 = 000A                         AmigaPCRightR		equ	10		; Right Released count f
				. A. 
 = 000C                         AmigaPCStatus		equ	12		; Buttons Status f.A. 
                                ;PCAmigaX		equ	14		; X Pos as seen by PC for AM
				iga 
                                ;PCAmigaY		equ	16		; Y Pos as seen by PC for AM
				iga 
 = 0012                         PCVideoMode		equ	18		; Video mode as form int 1
				0H/00 
                                 
 = 0011                         JIntNum			equ	17     
 = 0000                         J_GET_SERVICE		equ	0 
 = 0001                         J_GET_BASE		equ	1 
 = 0002                         J_ALLOC_MEM		equ	2 
 = 0003                         J_FREE_MEM		equ	3 
 = 0004                         J_SET_PARAM		equ	4 
 = 0005                         J_SET_SERVICE		equ	5 
 = 0006                         J_STOP_SERVICE		equ	6 
 = 0007                         J_CALL_AMIGA		equ	7 
 = 0008                         J_WAIT_AMIGA		equ	8 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-3
                                                            

 = 0009                         J_CHECK_AMIGA		equ	9 
                                 
 = 00FF                         J_NO_SERVICE		equ	0FFH 
 = 0000                         J_PENDING		equ	0 
 = 0001                         J_FINISHED		equ	1 
                                 
                                ;	Amiga parameters 
                                 
 = 0000                         VideoMode		equ	0 
 = 0001                         MouseImage		equ	1 
 = 0002                         MouseOn			equ	2 
 = 0003                         MouseOff		equ	3 
 = 0004                         MouseMove		equ	4 
 = 0005                         StandardImage		equ	5 
                                 
 = 0008                         DPSize		equ	8		; 8 words 16 bytes 
                                 
 = 0010                         CursorWidth	equ	16		; make these variables ????
				? 
 = 0010                         CursorHeight	equ	16 
                                 
 0227  3FFF 1FFF 0FFF 07FF      DefaultMouse	dw	03FFFH,01FFFH,00FFFH,007FFH,003
				FFH,001FFH,000FFH 
       03FF 01FF 00FF           
 0235  007F 003F 001F 01FF      		dw	0007FH,0003FH,0001FH,001FFH,010FFH,030FFH,
				0F87FH 
       10FF 30FF F87F           
 0243  F87F FC3F                		dw	0F87FH,0FC3FH 
 0247  0000 4000 6000 7000      		dw	00000H,04000H,06000H,07000H,07800H,07C00H,
				07E00H 
       7800 7C00 7E00           
 0255  7F00 7F80 7FC0 7C00      		dw	07F00H,07F80H,07FC0H,07C00H,04600H,00600H,
				00300H 
       4600 0600 0300           
 0263  0300 0180                		dw	00300H,00180H 
 0267                           StateInfo: 
 = 0267                         DataStart	equ	$ 
                                 
 0267  FFFF                     CursorFlag	dw	-1 
 0269  0000                     CursorSave	dw	0 
 026B  0003[                    SaveMask	db	3 dup (0) 
            00                  
                         ]      
                                
 026E  00                       CursorX		db	0 
 026F  00                       CursorY		db	0 
 0270  00                       CSValid		db	0 
 0271  00                       GraphValid	db	0 
 0272  0000                     GraphCX		dw	0 
 0274  0000                     GraphCY		dw	0 
 0276  00                       TextCurs	db	0 
 0277  00                       TCType		db	0 
 0278  FFFF                     TCScrMask	dw	0FFFFH 
 027A  7700                     TCCursMask	dw	07700H 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-4
                                                            

 027C  0020[                    GraphicsCDef	dw	32 dup (0) 
            0000                
                         ]      
                                
 02BC  0000                     ScreenOffset	dw	0 
 02BE  0000                     ScreenSegment	dw	0 
 02C0  0000                     NewMask		dw	0 
 02C2  0000                     IntCallMask	dw	0 
 02C4  0000                     IntCallAddr	dw	0 
 02C6  0000                     IntCallSeg	dw	0 
 02C8  0008                     XMPRatio	dw	8 
 02CA  0010                     YMPRatio	dw	16 
 02CC  0000                     XMinCursor	dw	0 
 02CE  027F                     XMaxCursor	dw	639 
 02D0  0000                     YMinCursor	dw	0 
 02D2  00C7                     YMaxCursor	dw	199 
 02D4  0000                     CRTPageNumber	dw	0 
 02D6  0000                     LightPenMode	dw	0 
 02D8  0000                     ButtonStatus	dw	0 
 02DA  0140                     MouseX		dw	320 
 02DC  0064                     MouseY		dw	100 
 02DE  00                       XShift		db	0 
 02DF  00                       YShift		db	0 
 02E0  0000                     MickeyX		dw	0 
 02E2  0000                     MickeyY		dw	0 
 02E4  0000                     HotSpotX	dw	0 
 02E6  0000                     HotSpotY	dw	0 
                                 
 02E8  00                       DoMove		db	0 
                                 
 02E9  00                       CondFlag	db	0		; Conditional off flag 
 02EA  0000                     LeftX		dw	0		; Conditional off rectangle 
 02EC  0000                     RightX		dw	0 
 02EE  0000                     TopY		dw	0 
 02F0  0000                     BottomY		dw	0 
                                 
 02F2  0010[                    Buttons		dw	16 dup (0) 
            0000                
                         ]      
                                
 = 0000                         PressCount	equ	0 
 = 0002                         PressX		equ	2 
 = 0004                         PressY		equ	4 
 = 0006                         ReleaseCount	equ	6 
 = 0008                         ReleaseX	equ	8 
 = 000A                         ReleaseY	equ	10 
                                 
 0312  0030[                    GraphicsSave	db	48 dup(0)		; 3 x 16 
            00                  
                         ]      
                                
                                 
 0342  00DB                     DataSize	dw	$-DataStart 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-5
                                                            

 0344  06 03                    VersionNo	db	6,3		; emulating 6.03 
 0346  0A0F R                   CRMsg		dw	offset Customise 
 0348  0000 0000                		dw	0,0 
 034C  034E R                   		dw	$+2 
 034E  0000                     		dw	0		; end of chain 
 0350  0000                     SaveSize	dw	0		; move DataSize into this 
 0352  0267 R                   		dw	offset StateInfo 
                                 
 0354  0008[                    DPCopyArea	dw	DPSize dup(0) 
            0000                
                         ]      
                                
                                 
 0364  00                       ScreenMode	db	0 
 0365  0280                     ScreenMaxX	dw	640 
 0367  00C8                     ScreenMaxY	dw	200 
                                 
 0369  00                       InTimer		db	0 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* MouseInt 
                                ;* 
                                ;**********************************************
				****************************** 
 036A                           MouseInt	PROC	NEAR 
 036A  2E: F7 06 02C2 R FFFF    	test	cs:IntCallMask,-1 
 0371  74 56                    	jz	NextTimer 
                                 
 0373  2E: F6 06 0369 R FF      	test	cs:InTimer,-1 
 0379  75 4E                    	jnz	NextTimer		; still running since last int.
				 
                                 
 037B  2E: FE 06 0369 R         	inc	cs:InTimer 
 0380  50                       	push	ax 
 0381  53                       	push	bx 
 0382  51                       	push	cx 
 0383  52                       	push	dx 
 0384  56                       	push	si 
 0385  57                       	push	di 
 0386  1E                       	push	ds 
 0387  06                       	push	es 
 0388  0E                       	push	cs 
 0389  1F                       	pop	ds 
                                 
                                ;	push	ss 
                                ;	pop	ax 
                                ;	mov	OldStackSeg,ax 
                                ;	mov	OldStackPtr,sp 
                                ;	push	cs 
                                ;	pop	ss 
                                ;	mov	sp,offset MyStackTop 
                                 
 038A  E8 0848 R                	call	MouseRead		; read Mouse info from DPRam 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-6
                                                            

 038D  A1 02C0 R                	mov	ax,NewMask 
 0390  0B C0                    	or	ax,ax 
 0392  74 28                    	jz	NoChange 
 0394  23 06 02C2 R             	and	ax,IntCallMask		; does user want this one 
				? 
 0398  74 22                    	jz	NoChange 
 039A  8B 1E 02D8 R             	mov	bx,ButtonStatus 
 039E  8B 0E 02DA R             	mov	cx,MouseX 
 03A2  8B 16 02DC R             	mov	dx,MouseY 
 03A6  8B 3E 02E0 R             	mov	di,MickeyX 
 03AA  8B 36 02E2 R             	mov	si,MickeyY 
 03AE  9C                       	pushf 
 03AF  FB                       	sti 
 03B0  FF 1E 02C4 R             	call	dword ptr IntCallAddr 
 03B4  9D                       	popf 
 03B5  2E: C7 06 02C0 R 0000    	mov	cs:NewMask,0 
 03BC                           NoChange: 
                                	 
                                ;	mov	ax,OldStackSeg 
                                ;	push	ax 
                                ;	pop	ss 
                                ;	mov	sp,OldStackPtr 
                                 
 03BC  07                       	pop	es 
 03BD  1F                       	pop	ds 
 03BE  5F                       	pop	di 
 03BF  5E                       	pop	si 
 03C0  5A                       	pop	dx 
 03C1  59                       	pop	cx 
 03C2  5B                       	pop	bx 
 03C3  58                       	pop	ax 
 03C4  2E: FE 0E 0369 R         	dec	cs:InTimer 
 03C9                           NextTimer: 
 03C9  C3                       	ret 
                                 
                                MouseInt	ENDP 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Null 
                                ;* 
                                ;**********************************************
				****************************** 
                                 
 03CA                           Null		PROC	NEAR 
 03CA  C3                       	ret 
                                Null		ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Timer 
                                ;* 
                                ;**********************************************
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-7
                                                            

				****************************** 
                                 
 03CB                           Timer		PROC	FAR 
                                 
 03CB  9C                       	pushf 
 03CC  2E: FF 1E 010F R         	call	cs:dword ptr TimerOffset 
 03D1  2E: FF 16 0107 R         	call	cs:[TimerProc] 
 03D6  CF                       	iret 
                                 
                                Timer		ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Other 
                                ;* 
                                ;**********************************************
				****************************** 
 03D7                           Other		PROC	FAR 
                                 
 03D7  9C                       	pushf 
 03D8  2E: FF 1E 0113 R         	call	cs:dword ptr OtherOffset 
 03DD  2E: FF 16 0109 R         	call	cs:[OtherProc] 
 03E2  CF                       	iret 
                                 
                                Other		ENDP 
                                 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* SetVideoPars 
                                ;* 
                                ;**********************************************
				****************************** 
 03E3                           SetVideoPars	PROC	NEAR 
                                 
 03E3  2E: C7 06 02BE R B800    	mov	cs:ScreenSegment,0B800H		; CGA address 
 03EA  3D 0001                  	cmp	ax,1 
 03ED  7F 0F                    	jg	VideoNot01 
 03EF  2E: C6 06 02DE R 04      	mov	cs:XShift,4 
 03F5  2E: C6 06 02DF R 03      	mov	cs:YShift,3 
 03FB  EB 2F 90                 	jmp	TellVideo 
 03FE                           VideoNot01: 
 03FE  3D 0003                  	cmp	ax,3 
 0401  7F 0F                    	jg	VideoNot23 
 0403                           VideoText8x8: 
 0403  2E: C6 06 02DE R 03      	mov	cs:XShift,3 
 0409  2E: C6 06 02DF R 03      	mov	cs:YShift,3 
 040F  EB 1B 90                 	jmp	TellVideo 
 0412                           VideoNot23: 
 0412  3D 0007                  	cmp	ax,7 
 0415  75 09                    	jne	VideoGraphics 
 0417  2E: C7 06 02BE R B000    	mov	cs:ScreenSegment,0B000H		; mono address 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-8
                                                            

 041E  EB E3                    	jmp	VideoText8x8 
 0420                           VideoGraphics: 
 0420  2E: C6 06 02DE R 00      	mov	cs:XShift,0 
 0426  2E: C6 06 02DF R 00      	mov	cs:YShift,0 
 042C                           TellVideo: 
 042C  FB                       	sti 
 042D  B8 0000                  	mov	ax,VideoMode 
 0430  E8 047F R                	call	Janus 
 0433  C3                       	ret 
                                 
                                SetVideoPars	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Video 
                                ;* 
                                ;**********************************************
				****************************** 
 0434                           Video		PROC	FAR 
 0434  0A E4                    	or	ah,ah 
 0436  75 42                    	jnz	VideoContinue 
 0438                           NewVideo: 
 0438  50                       	push	ax 
 0439  57                       	push	di 
 043A  06                       	push	es 
                                 
 043B  50                       	push	ax 
 043C  1E                       	push	ds 
 043D  0E                       	push	cs 
 043E  1F                       	pop	ds			; ds = cs 
 043F  E8 0545 R                	call	DoHideCursor 
 0442  C7 06 0267 R FFFF        	mov	CursorFlag,-1 
 0448  1F                       	pop	ds			; restore ds 
 0449  58                       	pop	ax			; restore ax 
 044A  9C                       	pushf 
 044B  2E: FF 1E 0117 R         	call	cs:dword ptr VideoOffset	; simulate inter
				rupt 
 0450  33 C0                    	xor	ax,ax 
 0452  8E C0                    	mov	es,ax 
 0454  26: A0 0449              	mov	al,es:[0449H]			; video mode 
 0458  2E: C4 3E 011B R         	les	di,cs:dword ptr DualPortArea 
 045D  26: 39 45 12             	cmp	es:PCVideoMode[di],ax 
 0461  74 0A                    	jz	SameVideo 
 0463  26: 89 45 12             	mov	es:PCVideoMode[di],ax 
 0467  E8 03E3 R                	call	SetVideoPars 
 046A  EB 0A 90                 	jmp	VideoRestore 
 046D                           SameVideo: 
 046D  9C                       	pushf 
 046E  FB                       	sti 
 046F  B8 0003                  	mov	ax,MouseOff 
 0472  E8 047F R                	call	Janus 
 0475  9D                       	popf 
 0476                           VideoRestore: 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-9
                                                            

 0476  07                       	pop	es 
 0477  5F                       	pop	di 
 0478  58                       	pop	ax 
 0479  CF                       	iret 
                                 
 047A                           VideoContinue: 
 047A  2E: FF 2E 0117 R         	jmp	cs:dword ptr VideoOffset 
                                 
                                Video		ENDP 
                                 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Janus 
                                ;* 
                                ;**********************************************
				****************************** 
 047F                           Janus		PROC	NEAR 
 047F  2E: F6 06 0104 R FF      	test	cs:UseSprite,-1 
 0485  74 22                    	jz	NoJanus 
 0487  50                       	push	ax 
 0488                           JLoop: 
 0488  B8 0911                  	mov	ax,(J_CHECK_AMIGA *256) + JIntNum 
 048B  CD 0B                    	int	0BH			; check if Amiga service busy 
 048D  0A C0                    	or	al,al 
 048F  74 F7                    	je	JLoop 
 0491  58                       	pop	ax			; get parameter back 
 0492  57                       	push	di 
 0493  06                       	push	es 
 0494  2E: C4 3E 011F R         	les	di,cs:dword ptr ParamArea 
 0499  26: 89 45 02             	mov	es:2[di],ax		; store for the Amiga 
 049D  07                       	pop	es 
 049E  5F                       	pop	di 
 049F  B8 0711                  	mov	ax,(J_CALL_AMIGA * 256) + JIntNum 
 04A2  53                       	push	bx 
 04A3  BB FFFF                  	mov	bx,-1 
 04A6  CD 0B                    	int	0BH 
 04A8  5B                       	pop	bx 
 04A9                           NoJanus: 
 04A9  C3                       	ret 
                                Janus		ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Print 
                                ;* 
                                ;**********************************************
				****************************** 
 04AA                           Print		PROC	NEAR 
 04AA  9C                       	pushf 
 04AB  FB                       	sti 
 04AC  B4 05                    	mov	ah,5 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-10
                                                            

 04AE  CD 21                    	int	21H 
 04B0  9D                       	popf 
 04B1  C3                       	ret 
                                Print		ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* Trace 
                                ;* 
                                ;**********************************************
				****************************** 
 04B2                           Trace		PROC	NEAR 
 04B2  2E: F6 06 0103 R 01      	test	cs:DoTrace,1 
 04B8  74 4C                    	jz	NoTrace 
 04BA  50                       	push	ax 
 04BB  52                       	push	dx 
                                	 
 04BC  57                       	push	di 
 04BD  57                       	push	di 
 04BE  56                       	push	si 
 04BF  56                       	push	si 
 04C0  52                       	push	dx 
 04C1  52                       	push	dx 
 04C2  51                       	push	cx 
 04C3  51                       	push	cx 
 04C4  53                       	push	bx 
 04C5  53                       	push	bx 
 04C6  50                       	push	ax 
 04C7  50                       	push	ax 
                                	 
 04C8  5A                       	pop	dx 
 04C9  8A D6                    	mov	dl,dh 
 04CB  E8 04AA R                	call	Print		; ah 
 04CE  5A                       	pop	dx 
 04CF  E8 04AA R                	call	Print		; al 
 04D2  5A                       	pop	dx 
 04D3  8A D6                    	mov	dl,dh 
 04D5  E8 04AA R                	call	Print		; bh 
 04D8  5A                       	pop	dx 
 04D9  E8 04AA R                	call	Print		; bl 
 04DC  5A                       	pop	dx 
 04DD  8A D6                    	mov	dl,dh 
 04DF  E8 04AA R                	call	Print		; ch 
 04E2  5A                       	pop	dx 
 04E3  E8 04AA R                	call	Print		; cl 
 04E6  5A                       	pop	dx 
 04E7  8A D6                    	mov	dl,dh 
 04E9  E8 04AA R                	call	Print		; dh 
 04EC  5A                       	pop	dx 
 04ED  E8 04AA R                	call	Print		; dl 
 04F0  5A                       	pop	dx 
 04F1  8A D6                    	mov	dl,dh 
 04F3  E8 04AA R                	call	Print		; si h 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-11
                                                            

 04F6  5A                       	pop	dx 
 04F7  E8 04AA R                	call	Print		; si l 
 04FA  5A                       	pop	dx 
 04FB  8A D6                    	mov	dl,dh 
 04FD  E8 04AA R                	call	Print		; di h 
 0500  5A                       	pop	dx 
 0501  E8 04AA R                	call	Print		; di l 
                                 
 0504  5A                       	pop	dx 
 0505  58                       	pop	ax 
 0506                           NoTrace: 
 0506  C3                       	ret 
                                 
                                Trace		ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* DoCondOff 
                                ;* 
                                ;**********************************************
				****************************** 
                                ;	returns with C flag set if cursor has been tu
				rned off 
                                 
 0507                           DoCondOff	PROC	NEAR 
 0507  50                       	push	ax 
 0508  F6 06 02E9 R FF          	test	CondFlag,-1 
 050D  74 33                    	jz	NotCondOff 
 050F  A1 02DA R                	mov	ax,MouseX		; compare co-ords with corners 
				of 
 0512  2B 06 02E4 R             	sub	ax,HotSpotX 
 0516  3B 06 02EC R             	cmp	ax,RightX		; conditional off area 
 051A  7F 26                    	jg	NotCondOff 
 051C  05 0010                  	add	ax,CursorWidth 
 051F  3B 06 02EA R             	cmp	ax,LeftX 
 0523  7C 1D                    	jl	NotCondOff 
 0525  A1 02DC R                	mov	ax,MouseY 
 0528  2B 06 02E6 R             	sub	ax,HotSpotY 
 052C  3B 06 02F0 R             	cmp	ax,BottomY 
 0530  7F 10                    	jg	NotCondOff 
 0532  05 0010                  	add	ax,CursorHeight 
 0535  3B 06 02EE R             	cmp	ax,TopY 
 0539  7C 07                    	jl	NotCondOff 
 053B  E8 0545 R                	call	DoHideCursor 
 053E  F9                       	stc 
 053F  EB 02 90                 	jmp	CondOffExit 
 0542                           NotCondOff: 
 0542  F8                       	clc 
 0543                           CondOffExit: 
 0543  58                       	pop	ax 
 0544  C3                       	ret 
                                 
                                DoCondOff	ENDP 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-12
                                                            

                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* DoHideCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 0545                           DoHideCursor	PROC	NEAR 
                                 
 0545  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 054B  75 27                    	jnz	DoHCexit		; cursor not shown 
 054D  F6 06 02DE R FF          	test	XShift,-1		; if non-zero then in text mod
				e 
 0552  74 17                    	jz	HideGraphics 
 0554  F6 06 0276 R FF          	test	TextCurs,-1		; zero is software cursor 
 0559  75 06                    	jnz	HideHardware 
 055B  E8 07F6 R                	call	TidySoftCursor 
 055E  EB 14 90                 	jmp	DoHCexit 
 0561                           HideHardware: 
 0561  B9 2000                  	mov	cx,2000H		; cursor off 
 0564  B4 01                    	mov	ah,01			; set cursor type ( = no display )
				 
 0566  CD 10                    	int	10H			; do it 
 0568  EB 0A 90                 	jmp	DoHCexit 
 056B                           HideGraphics: 
 056B  E8 06AC R                	call	TidyGraphCursor 
 056E  B8 0003                  	mov	ax,MouseOff 
 0571  E8 047F R                	call	Janus 
 0574                           DoHCexit: 
 0574  FF 0E 0267 R             	dec	CursorFlag 
 0578  C3                       	ret 
                                 
                                DoHideCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* MouseToCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 0579                           MouseToCursor	PROC	NEAR 
                                 
 0579  A1 02DC R                	mov	ax,MouseY 
 057C  8A 0E 02DF R             	mov	cl,YShift 
 0580  D3 E8                    	shr	ax,cl 
 0582  A2 026F R                	mov	CursorY,al 
 0585  A1 02DA R                	mov	ax,MouseX 
 0588  8A 0E 02DE R             	mov	cl,XShift 
 058C  D3 E8                    	shr	ax,cl 
 058E  A2 026E R                	mov	CursorX,al 
 0591  C3                       	ret 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-13
                                                            

                                MouseToCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* ShowGraphCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 0592                           ShowGraphCursor	PROC	NEAR 
                                 
 0592  F6 06 0104 R FF          	test	UseSprite,-1 
 0597  74 01                    	jz	ShowGraph 
 0599  C3                       	ret 
 059A                           ShowGraph: 
 059A  9C                       	pushf 
 059B  FA                       	cli 
                                 
 059C  50                       	push	ax 
 059D  53                       	push	bx 
 059E  51                       	push	cx 
 059F  52                       	push	dx 
 05A0  06                       	push	es 
 05A1  57                       	push	di 
 05A2  1E                       	push	ds 
 05A3  56                       	push	si 
                                 
 05A4  A1 02DA R                	mov	ax,MouseX 
 05A7  2B 06 02E4 R             	sub	ax,HotSpotX 
 05AB  3B 06 0365 R             	cmp	ax,ScreenMaxX 
 05AF  73 1A                    	jae	GCQuit 
 05B1  A3 0272 R                	mov	GraphCX,ax 
 05B4  D1 F8                    	sar	ax,1 
 05B6  D1 F8                    	sar	ax,1 
 05B8  D1 F8                    	sar	ax,1			; byte boundary 
 05BA  8B F8                    	mov	di,ax 
 05BC  B1 04                    	mov	cl,4 
 05BE  A1 02DC R                	mov	ax,MouseY 
 05C1  2B 06 02E6 R             	sub	ax,HotSpotY 
 05C5  3B 06 0367 R             	cmp	ax,ScreenMaxY 
 05C9  72 03                    	jb	GCInRange 
 05CB                           GCQuit: 
 05CB  E9 06A2 R                	jmp	GCNoMove 
 05CE                           GCInRange: 
 05CE  A3 0274 R                	mov	GraphCY,ax 
 05D1  A9 0001                  	test	ax,1 
 05D4  74 04                    	jz	EvenLine 
 05D6  81 C7 2000               	add	di,2000H		; odd line 
 05DA                           EvenLine: 
 05DA  D1 F8                    	sar	ax,1			; /2 ( drops odd bit ) 
 05DC  D3 E0                    	shl	ax,cl			; *16 
 05DE  03 F8                    	add	di,ax 
 05E0  D1 E0                    	shl	ax,1 
 05E2  D1 E0                    	shl	ax,1			; *64 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-14
                                                            

 05E4  03 F8                    	add	di,ax			; di = MouseX + (MouseY/2)*80; 
 05E6  8E 06 02BE R             	mov	es,ScreenSegment	; es:di points at cursor 
				position 
 05EA  89 3E 02BC R             	mov	ScreenOffset,di		; save for Save/TidyGraph
				Cursor 
 05EE  E8 072B R                	call	SaveGraphCursor		; save region under curs
				or 
                                ;	lds	si,dword ptr DualPortArea 
                                ;	add	si,32			; MouseData 
 05F1  8D 36 027C R             	lea	si,GraphicsCDef 
 05F5  B9 0010                  	mov	cx,10H			; 16 lines of mouse image 
 05F8  2E: A1 0274 R            	mov	ax,cs:GraphCY		; check for end of screen 
 05FC  2D 00B8                  	sub	ax,184 
 05FF  78 09                    	js	XCheck 
 0601  2B C8                    	sub	cx,ax 
 0603  78 02                    	js	GCOutOfRange		; jump if negative 
 0605  75 03                    	jnz	XCheck			; jump if positive and > 0 
 0607                           GCOutOfRange: 
 0607  E9 06A2 R                	jmp	GCNoMove 
 060A                           XCheck: 
 060A  51                       	push	cx 
 060B  B9 0003                  	mov	cx,3 
 060E  2E: 8B 1E 0272 R         	mov	bx,cs:GraphCX 
 0613  D3 CB                    	ror	bx,cl			; bl = byte number 
 0615  8A D3                    	mov	dl,bl 
 0617  D2 C7                    	rol	bh,cl			; bh = bit offset 
 0619  80 E7 07                 	and	bh,7			; in case negative 
 061C  80 EB 4D                 	sub	bl,77 
 061F  78 02                    	js	GCMove 
 0621  2A CB                    	sub	cl,bl			; cx = no of bytes affected 
 0623                           GCMove: 
 0623  8A D9                    	mov	bl,cl 
 0625  59                       	pop	cx 
 0626  2E: A1 0274 R            	mov	ax,cs:GraphCY		; line number 
 062A  FC                       	cld 
 062B                           NextLine: 
 062B  52                       	push	dx 
 062C  51                       	push	cx 
 062D  53                       	push	bx 
 062E  50                       	push	ax 
 062F  0B C0                    	or	ax,ax			; check line number 
 0631  78 4F                    	js	RowLoopEnd		; skip negative lines !! 
 0633  8A CF                    	mov	cl,bh			; cl = shift 
 0635  32 FF                    	xor	bh,bh			; bx = count 
 0637  8A EA                    	mov	ch,dl			; ch = start byte 
                                 
                                ; byte 0 
                                	 
 0639  B4 FF                    	mov	ah,-1 
 063B  8A 44 01                 	mov	al,1[si]		; ax = screen mask byte 0 ! 
 063E  D3 C8                    	ror	ax,cl 
 0640  26: 22 05                	and	al,es:0[di]		; and with screen contents 
 0643  32 F6                    	xor	dh,dh 
 0645  8A 54 21                 	mov	dl,33[si]		; ax = cursor mask byte 0 ! 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-15
                                                            

 0648  D3 CA                    	ror	dx,cl 
 064A  32 C2                    	xor	al,dl 
 064C  0A ED                    	or	ch,ch 
 064E  78 03                    	js	GCNoByte0		; negative - skip byte 0 
 0650  26: 88 05                	mov	es:0[di],al		; store in screen 
 0653                           GCNoByte0:	 
 0653  4B                       	dec	bx 
 0654  74 2C                    	jz	RowLoopEnd 
                                 
                                ; byte 1 
                                	 
 0656  D2 C4                    	rol	ah,cl			; shift back 
 0658  8A 04                    	mov	al,0[si]		; ax = screen mask byte 1 ! 
 065A  D3 C8                    	ror	ax,cl 
 065C  26: 22 45 01             	and	al,es:1[di]		; and with screen contents 
 0660  D2 C6                    	rol	dh,cl			; shift back 
 0662  8A 54 20                 	mov	dl,32[si]		; ax = cursor mask byte 1 ! 
 0665  D3 CA                    	ror	dx,cl 
 0667  32 C2                    	xor	al,dl 
 0669  FE C5                    	inc	ch 
 066B  78 04                    	js	GCNoByte1		; still negative - skip byte 1 
 066D  26: 88 45 01             	mov	es:1[di],al		; store in screen 
 0671                           GCNoByte1:	 
 0671  4B                       	dec	bx 
 0672  74 0E                    	jz	RowLoopEnd 
                                 
                                ; byte 2 
                                	 
 0674  26: 22 65 02             	and	ah,es:2[di]		; and with screen contents 
 0678  32 E6                    	xor	ah,dh 
 067A  FE C5                    	inc	ch 
 067C  78 04                    	js	GCNoByte2		; still negative - skip byte 2 
 067E  26: 88 65 02             	mov	es:2[di],ah		; store in screen 
 0682                           GCNoByte2:			; needed ????? 
                                	 
 0682                           RowLoopEnd: 
 0682  83 C6 02                 	add	si,2			; cursor image pointer 
                                 
                                ;	test	di,2000H		; if set then is odd line 
                                ;	jz	MEvenLine 
 0685  58                       	pop	ax			; line number 
 0686  A9 0001                  	test	ax,1			; was it odd ? 
 0689  74 07                    	jz	MEvenLine		; no - even !! 
 068B  81 C7 E050               	add	di,50H-2000H 
 068F  EB 05 90                 	jmp	LineLoopEnd 
 0692                           MEvenLine: 
 0692  81 C7 2000               	add	di,2000H 
 0696                           LineLoopEnd: 
 0696  40                       	inc	ax			; next line number 
 0697  5B                       	pop	bx 
 0698  59                       	pop	cx 
 0699  5A                       	pop	dx 
 069A  E2 8F                    	loop	NextLine 
 069C  2E: C6 06 0271 R FF      	mov	cs:GraphValid,-1 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-16
                                                            

 06A2                           GCNoMove: 
 06A2  5E                       	pop	si 
 06A3  1F                       	pop	ds 
 06A4  5F                       	pop	di 
 06A5  07                       	pop	es 
 06A6  5A                       	pop	dx 
 06A7  59                       	pop	cx 
 06A8  5B                       	pop	bx 
 06A9  58                       	pop	ax 
                                	 
 06AA  9D                       	popf 
                                 
 06AB                           NoPCGraph: 
 06AB  C3                       	ret 
                                 
                                ShowGraphCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* TidyGraphCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 06AC                           TidyGraphCursor	PROC	NEAR 
                                 
 06AC  9C                       	pushf 
 06AD  FA                       	cli 
                                 
 06AE  F6 06 0104 R FF          	test	UseSprite,-1 
 06B3  75 74                    	jnz	TGCexit 
                                 
 06B5  F6 06 0271 R FF          	test	GraphValid,-1 
 06BA  74 6D                    	jz	TGCexit 
 06BC  C6 06 0271 R 00          	mov	GraphValid,0 
                                 
 06C1  50                       	push	ax 
 06C2  53                       	push	bx 
 06C3  51                       	push	cx 
 06C4  52                       	push	dx 
 06C5  06                       	push	es 
 06C6  57                       	push	di 
 06C7  56                       	push	si 
                                 
 06C8  C4 3E 02BC R             	les	di,dword ptr ScreenOffset ; es:di points a
				t cursor position 
 06CC  8D 36 0312 R             	lea	si,GraphicsSave 
 06D0  B9 0010                  	mov	cx,10H			; 16 lines of mouse image 
 06D3  A1 0274 R                	mov	ax,GraphCY		; check for end of screen 
 06D6  8B D8                    	mov	bx,ax 
 06D8  2D 00B8                  	sub	ax,184 
 06DB  78 03                    	js	TGCNext 
 06DD  2B C8                    	sub	cx,ax 
 06DF  FC                       	cld 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-17
                                                            

 06E0                           TGCNext: 
 06E0  51                       	push	cx 
 06E1  53                       	push	bx 
 06E2  0B DB                    	or	bx,bx 
 06E4  78 23                    	js	TGCSkip 
 06E6  B9 0003                  	mov	cx,3 
 06E9  8B 16 0272 R             	mov	dx,GraphCX		; pixel x 
 06ED  D3 FA                    	sar	dx,cl			; byte x 
 06EF  33 DB                    	xor	bx,bx 
 06F1                           TGCNextByte: 
 06F1  0B D2                    	or	dx,dx 
 06F3  78 10                    	js	TGCByteSkip 
 06F5  8A A7 026B R             	mov	ah,SaveMask[bx]		; valid bits in saved byt
				e 
 06F9  F6 D4                    	not	ah			; valid bits in screen byte 
 06FB  26: 8A 01                	mov	al,es:[di+bx]		; screen byte 
 06FE  22 C4                    	and	al,ah			; valid bits 
 0700  0A 00                    	or	al,[si+bx]		; add in the saved bits 
 0702  26: 88 01                	mov	es:[di+bx],al		; store the byte 
 0705                           TGCByteSkip: 
 0705  43                       	inc	bx 
 0706  42                       	inc	dx 
 0707  E2 E8                    	loop	TGCNextByte 
 0709                           TGCSkip: 
 0709  5B                       	pop	bx 
 070A  59                       	pop	cx 
                                ;	test	di,2000H		; if set then is odd line 
 070B  F7 C3 0001               	test	bx,1			; if set then is odd line 
 070F  74 07                    	jz	TGCEvenLine 
 0711  81 C7 E050               	add	di,50H-2000H 
 0715  EB 05 90                 	jmp	TGCLoopEnd 
 0718                           TGCEvenLine: 
 0718  81 C7 2000               	add	di,2000H 
 071C                           TGCLoopEnd: 
 071C  43                       	inc	bx 
 071D  83 C6 03                 	add	si,3 
 0720  E2 BE                    	loop	TGCNext 
                                 
 0722  5E                       	pop	si 
 0723  5F                       	pop	di 
 0724  07                       	pop	es 
 0725  5A                       	pop	dx 
 0726  59                       	pop	cx 
 0727  5B                       	pop	bx 
 0728  58                       	pop	ax 
 0729                           TGCexit: 
 0729  9D                       	popf 
 072A  C3                       	ret 
                                 
                                TidyGraphCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-18
                                                            

                                ;* SaveGraphCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 072B                           SaveGraphCursor	PROC	NEAR 
                                 
                                ;	es:di points at the screen block 
                                 
 072B  F6 06 0104 R FF          	test	UseSprite,-1 
 0730  75 79                    	jnz	SGCexit 
                                 
 0732  50                       	push	ax 
 0733  53                       	push	bx 
 0734  51                       	push	cx 
 0735  06                       	push	es 
 0736  57                       	push	di 
 0737  1E                       	push	ds 
 0738  56                       	push	si 
                                 
 0739  8B 0E 0272 R             	mov	cx,GraphCX		; x co-ordinate 
 073D  81 E1 0007               	and	cx,7			; bit offset 
 0741  B8 FFFF                  	mov	ax,-1			; all bits set 
 0744  D3 E8                    	shr	ax,cl			; mask for bytes 0 and 1 
 0746  88 26 026B R             	mov	SaveMask,ah 
 074A  A2 026C R                	mov	SaveMask+1,al 
 074D  F6 D4                    	not	ah			; mask for byte 2 
 074F  88 26 026D R             	mov	SaveMask+2,ah 
 0753  8D 36 0312 R             	lea	si,GraphicsSave		; ds:si points at save ar
				ea 
 0757  B9 0010                  	mov	cx,10H			; 16 lines of mouse image 
 075A  A1 0274 R                	mov	ax,GraphCY		; check for end of screen 
 075D  8B D8                    	mov	bx,ax			; save line number 
 075F  2D 00B8                  	sub	ax,184 
 0762  78 03                    	js	SGCNext 
 0764  2B C8                    	sub	cx,ax 
 0766  FC                       	cld 
 0767                           SGCNext: 
 0767  51                       	push	cx 
 0768  53                       	push	bx 
 0769  0B DB                    	or	bx,bx 
 076B  78 1E                    	js	SGCSkip 
 076D  B9 0003                  	mov	cx,3 
 0770  8B 16 0272 R             	mov	dx,GraphCX		; pixel x 
 0774  D3 FA                    	sar	dx,cl			; byte x 
 0776  33 DB                    	xor	bx,bx 
 0778                           SGCNextByte: 
 0778  32 C0                    	xor	al,al			; clear for Skip 
 077A  0B D2                    	or	dx,dx 
 077C  78 07                    	js	SGCByteSkip 
 077E  26: 8A 01                	mov	al,es:[di+bx]		; get screen buffer byte 
 0781  22 87 026B R             	and	al,SaveMask[bx]		; remove invalid bits 
 0785                           SGCByteSkip: 
 0785  88 00                    	mov	[si+bx],al		; store the byte 
 0787  43                       	inc	bx 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-19
                                                            

 0788  42                       	inc	dx 
 0789  E2 ED                    	loop	SGCNextByte 
 078B                           SGCSkip: 
 078B  5B                       	pop	bx 
 078C  59                       	pop	cx 
 078D  F7 C3 0001               	test	bx,1			; if set then is odd line 
 0791  74 07                    	jz	SGCEvenLine 
 0793  81 C7 E050               	add	di,50H-2000H 
 0797  EB 05 90                 	jmp	SGCLoopEnd 
 079A                           SGCEvenLine: 
 079A  81 C7 2000               	add	di,2000H 
 079E                           SGCLoopEnd: 
 079E  43                       	inc	bx 
 079F  83 C6 03                 	add	si,3 
 07A2  E2 C3                    	loop	SGCNext 
                                 
 07A4  5E                       	pop	si 
 07A5  1F                       	pop	ds 
 07A6  5F                       	pop	di 
 07A7  07                       	pop	es 
 07A8  59                       	pop	cx 
 07A9  5B                       	pop	bx 
 07AA  58                       	pop	ax 
 07AB                           SGCexit: 
 07AB  C3                       	ret 
                                 
                                SaveGraphCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* ShowSoftCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 07AC                           ShowSoftCursor	PROC	NEAR 
                                 
 07AC  F6 06 0276 R FF          	test	TextCurs,-1		; hard or soft cursor ? 
 07B1  75 42                    	jnz	SSCReturn		; hardware cursor 
 07B3  E8 0579 R                	call	MouseToCursor 
 07B6  06                       	push	es 
 07B7  57                       	push	di 
 07B8  33 C0                    	xor	ax,ax 
 07BA  8E C0                    	mov	es,ax			; Segment 0 
 07BC  26: 8B 3E 044E           	mov	di,es:[044EH]		; Page offset 
 07C1  26: A1 044A              	mov	ax,es:[044AH]		; Screen width < 255 ???? 
 07C5  F6 26 026F R             	mul	CursorY 
 07C9  8A 1E 026E R             	mov	bl,CursorX 
 07CD  32 FF                    	xor	bh,bh 
 07CF  03 C3                    	add	ax,bx			; character offset 
 07D1  D1 E0                    	shl	ax,1			; characters occupy 2 bytes 
 07D3  03 F8                    	add	di,ax			; offset into screen buffer 
 07D5  89 3E 02BC R             	mov	ScreenOffset,di 
 07D9  8E 06 02BE R             	mov	es,ScreenSegment	; B000 or B800 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-20
                                                            

 07DD  26: 8B 05                	mov	ax,es:0[di]		; get character and attribute
				s 
 07E0  A3 0269 R                	mov	CursorSave,ax		; save to restore later 
 07E3  C6 06 0270 R 01          	mov	CSValid,1 
 07E8  23 06 0278 R             	and	ax,TCScrMask 
 07EC  33 06 027A R             	xor	ax,TCCursMask 
 07F0  26: 89 05                	mov	es:0[di],ax		; rewrite cursor 
 07F3  5F                       	pop	di 
 07F4  07                       	pop	es 
 07F5                           SSCReturn: 
 07F5  C3                       	ret 
                                 
                                ShowSoftCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* TidySoftCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 07F6                           TidySoftCursor	PROC	NEAR 
                                 
 07F6  F6 06 0276 R FF          	test	TextCurs,-1		; hard or soft cursor ? 
 07FB  75 1A                    	jnz	TSCReturn		; hardware cursor 
 07FD  F6 06 0270 R FF          	test	CSValid,-1		; got something to restore ? 
 0802  74 13                    	jz	TSCReturn		; no 
 0804  C6 06 0270 R 00          	mov	CSValid,0 
 0809  06                       	push	es 
 080A  57                       	push	di 
 080B  C4 3E 02BC R             	les	di,dword ptr ScreenOffset 
 080F  A1 0269 R                	mov	ax,CursorSave		; previously saved by ShowS
				oftCursor 
 0812  26: 89 05                	mov	es:0[di],ax		; restore character 
 0815  5F                       	pop	di 
 0816  07                       	pop	es 
 0817                           TSCReturn: 
 0817  C3                       	ret 
                                	 
                                TidySoftCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* MoveCursor 
                                ;* 
                                ;**********************************************
				****************************** 
 0818                           MoveCursor	PROC	NEAR 
                                 
 0818  9C                       	pushf 
 0819  FA                       	cli				; inhibit interrupts 
                                	 
 081A  E8 0579 R                	call	MouseToCursor 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-21
                                                            

 081D  8A 2E 026F R             	mov	ch,CursorY 
 0821  8A 0E 026E R             	mov	cl,CursorX 
 0825  33 C0                    	xor	ax,ax 
 0827  1E                       	push	ds 
 0828  8E D8                    	mov	ds,ax 
 082A  A0 044A                  	mov	al,ds:[044AH]		; columns per line 
 082D  F6 E5                    	mul	ch			; Y * columns 
 082F  32 ED                    	xor	ch,ch 
 0831  03 C8                    	add	cx,ax			; add in X offset 
 0833  03 0E 044E               	add	cx,ds:[044EH]		; page offset ??????? 
 0837  8B 16 0463               	mov	dx,ds:[0463H]		; CRT Register Base 
                                 
 083B  8A E5                    	mov	ah,ch	 
 083D  B0 0E                    	mov	al,0EH 
 083F  EF                       	out	dx,ax			; send cursor pos "hi" 
                                 
 0840  8A E1                    	mov	ah,cl	 
 0842  B0 0F                    	mov	al,0FH 
 0844  EF                       	out	dx,ax			; send cursor pos "lo" 
                                 
 0845  1F                        	pop	ds			; restore ds 
 0846  9D                       	popf				; restore interrupt state 
                                 
 0847  C3                       	ret 
                                 
                                MoveCursor	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* MouseRead 
                                ;* 
                                ;**********************************************
				****************************** 
 0848                           MouseRead	PROC	NEAR 
                                 
 0848  50                       	push	ax 
 0849  53                       	push	bx 
 084A  51                       	push	cx 
 084B  52                       	push	dx 
 084C  57                       	push	di 
 084D  06                       	push	es 
                                 
 084E  C4 3E 011F R             	les	di,dword ptr ParamArea 
 0852                           Lock1: 
 0852  F0/ 26: FE 45 04         	lock inc byte ptr es:4[di] 
 0857  78 03                    	js	MRGotLock 
 0859  E9 0988 R                	jmp	MRNoMove		; exit no change if locked 
 085C                           MRGotLock: 
                                 
 085C  8C D8                    	mov	ax,ds				; set es to ds 
 085E  8E C0                    	mov	es,ax 
 0860  8D 3E 0354 R             	lea	di,DPCopyArea			; di points at copy area 
 0864  C5 36 011B R             	lds	si,dword ptr DualPortArea	; ds:si - DP are
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-22
                                                            

				a 
 0868  B9 0008                  	mov	cx,DPSize			; copy DPSize words 
 086B  F3/ A5                   	rep movsw 
                                 
 086D  8C C8                    	mov	ax,cs				; restore ds 
 086F  8E D8                    	mov	ds,ax 
 0871  C4 3E 011B R             	les	di,dword ptr DualPortArea 
                                					; zeroise 6 words 
 0875  B9 0006                  	mov	cx,6 
 0878  33 C0                    	xor	ax,ax 
 087A  F3/ AB                   	rep stosw 
                                 
 087C  C4 3E 011F R             	les	di,dword ptr ParamArea 
 0880                           Lock2: 
 0880  F0/ 26: C6 45 04 7F      	lock mov byte ptr es:4[di],07fh	; unlock 
                                 
                                 
 0886  32 D2                    	xor	dl,dl		; if changes then will be set non-z
				ero  
 0888  8D 36 0354 R             	lea	si,DPCopyArea	; point at copy of DualPort 
				values 
                                 
                                				; get new MouseX (within limits ) 
 088C  8B 04                    	mov	ax,AmigaPCX[si] 
 088E  0B C0                    	or	ax,ax 
 0890  74 36                    	jz	GetY		; no change in X co-ord. 
 0892  81 0E 02C0 R 0001        	or	NewMask,1	; cursor position change 
 0898  B2 01                    	mov	dl,1		; move the cursor 
 089A  01 06 02E0 R             	add	MickeyX,ax 
 089E  52                       	push	dx 
 089F  D1 E0                    	shl	ax,1 
 08A1  D1 E0                    	shl	ax,1 
 08A3  D1 E0                    	shl	ax,1		; *8 
 08A5  99                       	cwd			; sign extend into DX 
 08A6  F7 3E 02C8 R             	idiv	XMPRatio 
 08AA  5A                       	pop	dx 
 08AB  03 06 02DA R             	add	ax,MouseX 
 08AF  3B 06 02CC R             	cmp	ax,XMinCursor 
 08B3  7D 03                    	jge	XMinOK 
 08B5  A1 02CC R                	mov	ax,XMinCursor 
 08B8                           XMinOK: 
 08B8  3B 06 02CE R             	cmp	ax,XMaxCursor 
 08BC  7E 03                    	jle	XMaxOK 
 08BE  A1 02CE R                	mov	ax,XMaxCursor 
 08C1                           XMaxOK: 
 08C1  A3 02DA R                	mov	MouseX,ax 
 08C4  2B 06 02E4 R             	sub	ax,HotSpotX 
                                ;	mov	PCAmigaX[si],ax 
 08C8                           GetY: 
                                				; get new MouseY (within limits ) 
 08C8  8B 44 02                 	mov	ax,AmigaPCY[si] 
 08CB  0B C0                    	or	ax,ax 
 08CD  74 36                    	jz	GetButtons	; no change in Y co-ord. 
 08CF  81 0E 02C0 R 0001        	or	NewMask,1	; cursor position change 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-23
                                                            

 08D5  B2 01                    	mov	dl,1		; move the cursor 
 08D7  01 06 02E2 R             	add	MickeyY,ax 
 08DB  52                       	push	dx 
 08DC  D1 E0                    	shl	ax,1 
 08DE  D1 E0                    	shl	ax,1 
 08E0  D1 E0                    	shl	ax,1		; *8 
 08E2  99                       	cwd			; sign extend into DX 
 08E3  F7 3E 02CA R             	idiv	YMPRatio 
 08E7  5A                       	pop	dx 
 08E8  03 06 02DC R             	add	ax,MouseY 
 08EC  3B 06 02D0 R             	cmp	ax,YMinCursor 
 08F0  7D 03                    	jge	YMinOK 
 08F2  A1 02D0 R                	mov	ax,YMinCursor 
 08F5                           YMinOK: 
 08F5  3B 06 02D2 R             	cmp	ax,YMaxCursor 
 08F9  7E 03                    	jle	YMaxOK 
 08FB  A1 02D2 R                	mov	ax,YMaxCursor 
 08FE                           YMaxOK: 
 08FE  A3 02DC R                	mov	MouseY,ax 
 0901  2B 06 02E6 R             	sub	ax,HotSpotY 
                                ;	mov	PCAmigaY[si],ax 
 0905                           GetButtons: 
 0905  8D 1E 02F2 R             	lea	bx,Buttons 
 0909  8B 44 04                 	mov	ax,AmigaPCLeftP[si] 
 090C  0B C0                    	or	ax,ax 
 090E  74 14                    	jz	GetLRel 
 0910  81 0E 02C0 R 0002        	or	NewMask,2 
 0916  01 07                    	add	PressCount[bx],ax		; Left Count 
 0918  A1 02DA R                	mov	ax,MouseX 
 091B  89 47 02                 	mov	PressX[bx],ax 
 091E  A1 02DC R                	mov	ax,MouseY 
 0921  89 47 04                 	mov	PressY[bx],ax 
 0924                           GetLRel: 
 0924  8B 44 08                 	mov	ax,AmigaPCLeftR[si] 
 0927  0B C0                    	or	ax,ax 
 0929  74 15                    	jz	GetRPrs 
 092B  81 0E 02C0 R 0004        	or	NewMask,4 
 0931  01 47 06                 	add	ReleaseCount[bx],ax		; Left Count 
 0934  A1 02DA R                	mov	ax,MouseX 
 0937  89 47 08                 	mov	ReleaseX[bx],ax 
 093A  A1 02DC R                	mov	ax,MouseY 
 093D  89 47 0A                 	mov	ReleaseY[bx],ax 
 0940                           GetRPrs: 
 0940  83 C3 10                 	add	bx,16 
 0943  8B 44 06                 	mov	ax,AmigaPCRightP[si] 
 0946  0B C0                    	or	ax,ax 
 0948  74 14                    	jz	GetRRel 
 094A  81 0E 02C0 R 0008        	or	NewMask,8 
 0950  01 07                    	add	PressCount[bx],ax		; right Count 
 0952  A1 02DA R                	mov	ax,MouseX 
 0955  89 47 02                 	mov	PressX[bx],ax 
 0958  A1 02DC R                	mov	ax,MouseY 
 095B  89 47 04                 	mov	PressY[bx],ax 
 095E                           GetRRel: 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-24
                                                            

 095E  8B 44 0A                 	mov	ax,AmigaPCRightR[si] 
 0961  0B C0                    	or	ax,ax 
 0963  74 15                    	jz	GetStatus 
 0965  81 0E 02C0 R 0010        	or	NewMask,16 
 096B  01 47 06                 	add	ReleaseCount[bx],ax 
 096E  A1 02DA R                	mov	ax,MouseX 
 0971  89 47 08                 	mov	ReleaseX[bx],ax 
 0974  A1 02DC R                	mov	ax,MouseY 
 0977  89 47 0A                 	mov	ReleaseY[bx],ax 
 097A                           GetStatus: 
 097A  8B 44 0C                 	mov	ax,AmigaPCStatus[si] 
 097D  A3 02D8 R                	mov	ButtonStatus,ax 
 0980  F6 C2 01                 	test	dl,1			; cursor position change 
 0983  74 03                    	jz	MRNoMove 
 0985  E8 098F R                	call	MoveMouse 
 0988                           MRNoMove: 
 0988  07                       	pop	es 
 0989  5F                       	pop	di 
 098A  5A                       	pop	dx 
 098B  59                       	pop	cx 
 098C  5B                       	pop	bx 
 098D  58                       	pop	ax 
 098E  C3                       	ret 
                                 
                                MouseRead	ENDP 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* MoveMouse 
                                ;* 
                                ;**********************************************
				****************************** 
 098F                           MoveMouse	PROC	NEAR 
                                 
 098F  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 0995  75 4F                    	jnz	MMoveExit		; if non-zero cursor is off 
 0997  E8 0507 R                	call	DoCondOff		; check for conditional off 
 099A  72 4A                    	jb	MMoveExit		; jump if Carry flag is set (jcc
				!!) 
 099C  F6 06 02DE R FF          	test	XShift,-1 
 09A1  74 16                    	jz	MMGraphics		; if non-zero then in text mode
				 
 09A3  F6 06 0276 R FF          	test	TextCurs,-1		; hard or soft cursor ? 
 09A8  75 09                    	jnz	MMHardware		; hardware cursor 
 09AA  E8 07F6 R                	call	TidySoftCursor 
 09AD  E8 07AC R                	call	ShowSoftCursor 
 09B0  EB 34 90                 	jmp	MMoveExit 
 09B3                           MMHardware: 
 09B3  E8 0818 R                	call	MoveCursor		; hardware cursor 
 09B6  EB 2E 90                 	jmp	MMoveExit 
                                 
 09B9                           MMGraphics: 
 09B9  9C                       	pushf 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-25
                                                            

 09BA  FA                       	cli 
 09BB  E8 06AC R                	call	TidyGraphCursor 
 09BE  E8 0592 R                	call	ShowGraphCursor 
 09C1  9D                       	popf 
                                 
 09C2  2E: F6 06 0104 R FF      	test	cs:UseSprite,-1 
 09C8  74 1C                    	jz	MMoveExit 
                                 
 09CA  06                       	push	es 
 09CB  57                       	push	di 
                                 
 09CC  C4 3E 011B R             	les	di,dword ptr DualPortArea 
 09D0  A1 02DA R                	mov	ax,MouseX 
 09D3  2B 06 02E4 R             	sub	ax,HotSpotX 
                                ;	mov	es:PCAmigaX[di],ax	 
 09D7  A1 02DC R                	mov	ax,MouseY 
 09DA  2B 06 02E6 R             	sub	ax,HotSpotY 
                                ;	mov	es:PCAmigaY[di],ax 
 09DE  B8 0004                  	mov	ax,MouseMove 
 09E1  E8 047F R                	call	Janus 
                                 
 09E4  5F                       	pop	di 
 09E5  07                       	pop	es 
 09E6                           MMoveExit: 
 09E6  C3                       	ret 
                                 
                                MoveMouse	ENDP 
                                 
 09E7                           CopyRight: 
 09E7  3D 3D 3D 20 20 20 20     	db	"===    Copyright 1988 Bill Holohan   ===" 
       43 6F 70 79 72 69 67     
       68 74 20 31 39 38 38     
       20 42 69 6C 6C 20 48     
       6F 6C 6F 68 61 6E 20     
       20 20 3D 3D 3D           
 0A0F                           Customise: 
 0A0F  2A 2A 2A 2A 2A 2A 2A     	db	"****************************************" 
       2A 2A 2A 2A 2A 2A 2A     
       2A 2A 2A 2A 2A 2A 2A     
       2A 2A 2A 2A 2A 2A 2A     
       2A 2A 2A 2A 2A 2A 2A     
       2A 2A 2A 2A 2A           
                                 
 0A37                           MouseDriver	PROC NEAR 
 0A37  EB 7D 90                 	jmp	MainCode 
                                 
 0A3A                           BasicMouse	PROC FAR 
 0A3A  55                       	push	bp			; for bloody BASIC 
 0A3B  8B EC                    	mov	bp,sp 
 0A3D  8B 76 0C                 	mov	si,[bp+12] 
 0A40  8B 04                    	mov	ax,[si] 
 0A42  8B 76 0A                 	mov	si,[bp+10] 
 0A45  8B 1C                    	mov	bx,[si] 
 0A47  8B 76 08                 	mov	si,[bp+8] 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-26
                                                            

 0A4A  8B 0C                    	mov	cx,[si] 
 0A4C  8B 76 06                 	mov	si,[bp+6] 
 0A4F  8B D6                    	mov	dx,si 
 0A51  3D 0009                  	cmp	ax,9			; graphics cursor block 
 0A54  74 2C                    	jz	UseDXValue 
 0A56  3D 0012                  	cmp	ax,18			; ????? 
 0A59  74 27                    	jz	UseDXValue 
 0A5B  3D 000C                  	cmp	ax,12			; Interrupt call ... 
 0A5E  74 22                    	jz	UseDXValue 
 0A60  3D 0014                  	cmp	ax,20			; Swap int.... 
 0A63  75 0B                    	jnz	UseDXasPtr 
 0A65  8E C3                    	mov	es,bx 
 0A67  0B DB                    	or	bx,bx 
 0A69  75 17                    	jnz	UseDXValue 
 0A6B  1E                       	push	ds 
 0A6C  07                       	pop	es 
 0A6D  EB 13 90                 	jmp	UseDXValue 
 0A70                           UseDXasPtr: 
 0A70  8B 14                    	mov	dx,[si] 
 0A72  3D 0010                  	cmp	ax,16 
 0A75  75 0B                    	jnz	UseDXValue 
 0A77  8B 0C                    	mov	cx,[si] 
 0A79  8B 54 02                 	mov	dx,[si+02] 
 0A7C  8B 7C 06                 	mov	di,[si+06] 
 0A7F  8B 74 04                 	mov	si,[si+04] 
 0A82                           UseDXValue: 
 0A82  50                       	push	ax 
 0A83  CD 33                    	int	33H 
 0A85  5E                       	pop	si 
 0A86  83 FE 14                 	cmp	si,20 
 0A89  75 04                    	jnz	Check9 
 0A8B  8C C3                    	mov	bx,es 
 0A8D  1E                       	push	ds 
 0A8E  07                       	pop	es 
 0A8F                           Check9: 
 0A8F  83 FE 09                 	cmp	si,9 
 0A92  74 0F                    	jz	NoDX 
 0A94  83 FE 0C                 	cmp	si,12 
 0A97  74 0A                    	jz	NoDX 
 0A99  83 FE 10                 	cmp	si,16 
 0A9C  74 05                    	jz	NoDX 
 0A9E  8B 76 06                 	mov	si,[bp+6] 
 0AA1  89 14                    	mov	[si],dx 
 0AA3                           NoDX: 
 0AA3  8B 76 08                 	mov	si,[bp+8] 
 0AA6  89 0C                    	mov	[si],cx 
 0AA8  8B 76 0A                 	mov	si,[bp+10] 
 0AAB  89 1C                    	mov	[si],bx 
 0AAD  8B 76 0C                 	mov	si,[bp+12] 
 0AB0  89 04                    	mov	[si],ax 
 0AB2  5D                       	pop	bp 
 0AB3  CA 0008                  	ret	8 
                                 
                                BasicMouse	ENDP 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-27
                                                            

                                 
 0AB6                           MainCode: 
 0AB6  55                       	push	bp 
 0AB7  8B EC                    	mov	bp,sp 
                                 
 0AB9  1E                       	push	ds			; bp-2 
 0ABA  06                       	push	es			; bp-4 
 0ABB  57                       	push	di			; bp-6 
 0ABC  56                       	push	si			; bp-8 
 0ABD  53                       	push	bx			; bp-10		save it - M2% 
 0ABE  50                       	push	ax			; bp-12 
                                 
 0ABF  0E                       	push	cs 
 0AC0  1F                       	pop	ds 
                                 
 0AC1  E8 0848 R                	call	MouseRead 
                                 
 0AC4  FB                       	sti 
                                 
 0AC5  E8 04B2 R                	call	Trace 
                                 
 0AC8  0B C0                    	or	ax,ax 
 0ACA  79 03                    	jns	check2			; jump if not negative 
 0ACC                           failcheck: 
 0ACC  E9 0DD8 R                	jmp	exit 
 0ACF                           check2: 
 0ACF  3D 001E                  	cmp	ax,30 
 0AD2  7F 0A                    	jg	Specials		; jump if > 30 
 0AD4  D1 E0                    	shl	ax,1			; *2 
 0AD6  8B D8                    	mov	bx,ax 
 0AD8  8D 9F 0DE2 R             	lea	bx,[JTable+bx] 
 0ADC  FF 27                    	jmp	word ptr [bx] 
                                 
 0ADE                           Specials: 
 0ADE  3D 006D                  	cmp	ax,6DH			; get pointer to version ???? 
 0AE1  74 0F                    	je	SpVers 
 0AE3  3D 004D                  	cmp	ax,4DH 
 0AE6  75 E4                    	jne	failcheck		; not a special 
 0AE8  8D 3E 0A1B R             	lea	di,Customise+12 
 0AEC  89 7E FA                 	mov	[bp-6],di		; return di 
 0AEF  EB 08 90                 	jmp	SpSetES 
 0AF2                           SpVers: 
 0AF2  8D 3E 0344 R             	lea	di,VersionNo 
 0AF6  89 7E FA                 	mov	[bp-6],di		; return di 
 0AF9                           SpSetES: 
 0AF9  8C 4E FC                 	mov	[bp-4],cs		; return es 
 0AFC  E9 0DD8 R                	jmp	exit 
                                 
 0AFF                           ResetAndStatus:	; Function 0 : Mouse Reset and 
				Status 
 0AFF  9C                       	pushf 
 0B00  FA                       	cli				; disable interrupts - Int Call & Curso
				r 
 0B01  E8 07F6 R                	call	TidySoftCursor		; just in case - Hardware
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-28
                                                            

				 ??? 
 0B04  E8 06AC R                	call	TidyGraphCursor		; just in case 
                                 
 0B07  33 C0                    	xor	ax,ax 
 0B09  0E                       	push	cs 
 0B0A  07                       	pop	es 
 0B0B  8D 3E 0267 R             	lea	di,StateInfo 
 0B0F  51                       	push	cx 
 0B10  8B 0E 0342 R             	mov	cx,DataSize		; mouse state data size 
 0B14  F3/ AA                   	rep stosb			; zeroise everything 
 0B16  59                       	pop	cx 
 0B17  9D                       	popf				; restore interrupts state 
                                 
 0B18  8E C0                    	mov	es,ax			; segment zero 
 0B1A  26: A0 0449              	mov	al,es:[449H] 
 0B1E  E8 03E3 R                	call	SetVideoPars 
 0B21  B8 0003                  	mov	ax,MouseOff		; hide cursor 
 0B24  E8 047F R                	call	Janus 
 0B27  C7 06 0267 R FFFF        	mov	CursorFlag,-1		; hidden 
 0B2D  A1 0365 R                	mov	ax,ScreenMaxX		; reset values 
 0B30  D1 F8                    	sar	ax,1 
 0B32  A3 02DA R                	mov	MouseX,ax 
 0B35  A1 0367 R                	mov	ax,ScreenMaxY 
 0B38  D1 F8                    	sar	ax,1 
 0B3A  A3 02DC R                	mov	MouseY,ax 
 0B3D  B8 0005                  	mov	ax,StandardImage	; do Janus call now to mi
				nimise delay 
 0B40  E8 047F R                	call	Janus			; on the MouseMove below 
 0B43  C7 06 0278 R FFFF        	mov	TCScrMask,0FFFFH 
 0B49  C7 06 027A R 7700        	mov	TCCursMask,07700H 
 0B4F  C7 06 02C8 R 0008        	mov	XMPRatio,8 
 0B55  C7 06 02CA R 0010        	mov	YMPRatio,16 
 0B5B  A1 0365 R                	mov	ax,ScreenMaxX 
 0B5E  48                       	dec	ax 
 0B5F  A3 02CE R                	mov	XMaxCursor,ax 
 0B62  A1 0367 R                	mov	ax,ScreenMaxY 
 0B65  48                       	dec	ax 
 0B66  A3 02D2 R                	mov	YMaxCursor,ax 
                                 
 0B69  0E                       	push	cs 
 0B6A  07                       	pop	es	 
 0B6B  B9 0020                  	mov	cx,32 
 0B6E  8D 36 0227 R             	lea	si,DefaultMouse 
 0B72  8D 3E 027C R             	lea	di,GraphicsCDef 
 0B76  F3/ A5                   	rep movsw 
                                 
 0B78  E8 098F R                	call	MoveMouse		; Position the pointer 
                                 
 0B7B  C7 46 F4 FFFF            	mov	word ptr [bp-12],-1	; ax = -1 => installed
				 
 0B80  C7 46 F6 0002            	mov	word ptr [bp-10],2	; bx = 2  => 2 buttons 
 0B85                           exit2: 
 0B85  E9 0DD8 R                	jmp	exit 
 0B88                           ShowCursor:	; Function 1 : Show Cursor 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-29
                                                            

 0B88  C6 06 02E9 R 00          	mov	CondFlag,0		; no longer conditional off 
 0B8D  F7 06 0267 R FFFF        	test	CursorFlag,-1		; check for zero 
 0B93  74 F0                    	jz	exit2			; do nothing if zero 
 0B95  FF 06 0267 R             	inc	CursorFlag 
 0B99  75 EA                    	jnz	exit2			; exit if not now zero 
 0B9B  F6 06 02DE R FF          	test	XShift,-1		; if non-zero then in text mod
				e 
 0BA0  74 23                    	jz	ShowGraphics 
 0BA2  F6 06 0276 R FF          	test	TextCurs,-1		; zero is software cursor 
 0BA7  75 06                    	jnz	ShowHardware 
 0BA9  E8 07AC R                	call	ShowSoftCursor 
 0BAC  E9 0DD8 R                	jmp	exit 
 0BAF                           ShowHardware: 
 0BAF  8A 2E 0278 R             	mov	ch,byte ptr TCScrMask	; start line 
 0BB3  8A 0E 027A R             	mov	cl,byte ptr TCCursMask	; stop line 
 0BB7  81 E1 0F0F               	and	cx,0F0FH		; mask to keep in range. 
 0BBB  B4 01                    	mov	ah,01			; set cursor type 
 0BBD  CD 10                    	int	10H			; do it 
 0BBF  E8 0818 R                	call	MoveCursor 
 0BC2  E9 0DD8 R                	jmp	exit 
 0BC5                           ShowGraphics: 
 0BC5  E8 0592 R                	call	ShowGraphCursor 
 0BC8  B8 0002                  	mov	ax,MouseOn 
 0BCB  E8 047F R                	call	Janus 
 0BCE  E9 0DD8 R                	jmp	exit 
 0BD1                           HideCursor:	; Function 2 : Hide Cursor 
 0BD1  C6 06 02E9 R 00          	mov	CondFlag,0		; no longer just conditional 
 0BD6  E8 0545 R                	call	DoHideCursor 
 0BD9  E9 0DD8 R                	jmp	exit 
                                	 
 0BDC                           ButtonAndPos:	; Function 3 : Get Button Status 
				and Mouse Position 
 0BDC  8B 1E 02DA R             	mov	bx,MouseX 
 0BE0  8A 0E 02DE R             	mov	cl,XShift 
 0BE4  D3 FB                    	sar	bx,cl 
 0BE6  D3 E3                    	shl	bx,cl 
 0BE8  8B 16 02DC R             	mov	dx,MouseY 
 0BEC  8A 0E 02DE R             	mov	cl,XShift 
 0BF0  D3 FA                    	sar	dx,cl 
 0BF2  D3 E2                    	shl	dx,cl 
 0BF4  8B CB                    	mov	cx,bx			; Mouse X 
 0BF6  8B 1E 02D8 R             	mov	bx,ButtonStatus 
 0BFA  89 5E F6                 	mov	[bp-10],bx 
 0BFD  E9 0DD8 R                	jmp	exit 
 0C00                           SetMCurPos:	; Function 4 : Set Mouse Cursor Pos
				ition 
 0C00  89 0E 02DA R             	mov	MouseX,cx 
 0C04  89 16 02DC R             	mov	MouseY,dx 
 0C08  E8 098F R                	call	MoveMouse 
 0C0B  E9 0DD8 R                	jmp	exit 
                                 
 0C0E                           GetBPressInfo:	; Function 5 : Get Button Press 
				Information 
 0C0E  8B 4E F6                 	mov	cx,[bp-10]		; 0 or 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-30
                                                            

 0C11  B8 0001                  	mov	ax,1 
 0C14  D3 E0                    	shl	ax,cl 
 0C16  23 06 02D8 R             	and	ax,ButtonStatus 
 0C1A  89 46 F4                 	mov	[bp-12],ax 
 0C1D  B1 04                    	mov	cl,4 
 0C1F  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0C22  D3 E3                    	shl	bx,cl			; * 8 
 0C24  8D 9F 02F2 R             	lea	bx,Buttons[bx] 
 0C28  33 D2                    	xor	dx,dx			; zero 
 0C2A  87 17                    	xchg	dx,PressCount[bx]	; load and zeroise 
 0C2C  8B 4F 02                 	mov	cx,PressX[bx] 
 0C2F  8B 5F 04                 	mov	bx,PressY[bx] 
 0C32  87 DA                    	xchg	bx,dx 
 0C34  89 5E F6                 	mov	[bp-10],bx 
 0C37                           exit1:					; because exit too far away 
 0C37  E9 0DD8 R                	jmp	exit 
                                 
 0C3A                           GetBRelInfo:	; Function 6 : Get Button Release 
				Information 
 0C3A  8B 4E F6                 	mov	cx,[bp-10]		; 0 or 1 
 0C3D  B8 0001                  	mov	ax,1 
 0C40  D3 E0                    	shl	ax,cl 
 0C42  23 06 02D8 R             	and	ax,ButtonStatus 
 0C46  89 46 F4                 	mov	[bp-12],ax 
 0C49  B1 04                    	mov	cl,4 
 0C4B  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0C4E  D3 E3                    	shl	bx,cl			; * 8 
 0C50  8D 9F 02F2 R             	lea	bx,Buttons[bx] 
 0C54  33 D2                    	xor	dx,dx			; zero 
 0C56  87 57 06                 	xchg	dx,ReleaseCount[bx]	; load and zeroise 
 0C59  8B 4F 08                 	mov	cx,ReleaseX[bx] 
 0C5C  8B 5F 0A                 	mov	bx,ReleaseY[bx] 
 0C5F  87 DA                    	xchg	bx,dx 
 0C61  89 5E F6                 	mov	[bp-10],bx 
 0C64  E9 0DD8 R                	jmp	exit 
                                 
 0C67                           SetMInMaxHoriz:	; Function 7 : Set Minimum and 
				Maximum Horizontal Cursor Pos. 
 0C67  89 0E 02CC R             	mov	XMinCursor,cx 
 0C6B  89 16 02CE R             	mov	XMaxCursor,dx 
 0C6F  E9 0DD8 R                	jmp	exit 
                                 
 0C72                           SetMInMaxVert:	; Function 8 : Set Minimum and M
				aximum Vertical Cursor Pos. 
 0C72  89 0E 02D0 R             	mov	YMinCursor,cx 
 0C76  89 16 02D2 R             	mov	YMaxCursor,dx 
 0C7A  E9 0DD8 R                	jmp	exit 
                                 
 0C7D                           SetGCurBlock:	; Function 9 : Set Graphics Curso
				r Block 
                                	 
 0C7D  9C                       	pushf 
 0C7E  FA                       	cli				; disable interrupts - Int Call ... 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-31
                                                            

 0C7F  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 0C85  75 0A                    	jnz	SetGCNotVis1 
 0C87  F6 06 02DE R FF          	test	XShift,-1		; if non-zero then in text mod
				e 
 0C8C  75 03                    	jnz	SetGCNotVis1 
 0C8E  E8 06AC R                	call	TidyGraphCursor 
 0C91                           SetGCNotVis1: 
 0C91  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0C94  89 1E 02E4 R             	mov	HotSpotX,bx 
 0C98  89 0E 02E6 R             	mov	HotSpotY,cx 
                                 
 0C9C  56                       	push	si 
 0C9D  57                       	push	di 
 0C9E  06                       	push	es		; part 1 of swap es to ds 
 0C9F  1E                       	push	ds		; part 2 of swap es to ds 
 0CA0  8B F2                    	mov	si,dx 
                                ;	les	di,dword ptr DualPortArea 
                                ;	add	di,32	 
 0CA2  8D 3E 027C R             	lea	di,GraphicsCDef 
 0CA6  07                       	pop	es		; part 3 of swap es to ds 
 0CA7  1F                       	pop	ds		; part 2 of swap es to ds 
 0CA8  B9 0020                  	mov	cx,32 
 0CAB  FC                       	cld			; to increment 
 0CAC  F3/ A5                   	rep movsw	 
 0CAE  0E                       	push	cs 
 0CAF  1F                       	pop	ds		; restore ds 
 0CB0  5F                       	pop	di		; etc  
 0CB1  5E                       	pop	si 
 0CB2  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 0CB8  75 0A                    	jnz	SetGCNotVis2 
 0CBA  F6 06 02DE R FF          	test	XShift,-1		; if non-zero then in text mod
				e 
 0CBF  75 03                    	jnz	SetGCNotVis2 
 0CC1  E8 0592 R                	call	ShowGraphCursor 
 0CC4                           SetGCNotVis2: 
 0CC4  B8 0001                  	mov	ax,MouseImage 
 0CC7  E8 047F R                	call	Janus 
 0CCA  9D                       	popf 
 0CCB  E9 0DD8 R                	jmp	exit 
 0CCE                           SetTextCur:	; Function 10 : Set Text Cursor 
 0CCE  9C                       	pushf 
 0CCF  FA                       	cli				; disable interrupts - Int Call ... 
                                ;	inc	InTimer 
 0CD0  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 0CD6  75 03                    	jnz	STNotVis1		; cursor not visible 
 0CD8  E8 07F6 R                	call	TidySoftCursor		; remove software cursor 
				if it`s there 
 0CDB                           STNotVis1: 
 0CDB  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0CDE  88 1E 0276 R             	mov	TextCurs,bl		; cursor select 
 0CE2  89 0E 0278 R             	mov	TCScrMask,cx		; screen mask / start line 
 0CE6  89 16 027A R             	mov	TCCursMask,dx		; cursor mask / stop line 
 0CEA  F7 06 0267 R FFFF        	test	CursorFlag,-1 
 0CF0  75 26                    	jnz	STNotVis2 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-32
                                                            

 0CF2  F6 06 0276 R FF          	test	TextCurs,-1		; zero is software cursor 
 0CF7  74 1C                    	jz	STSoft 
 0CF9  FF 0E 0267 R             	dec	CursorFlag 
 0CFD  8A 2E 0278 R             	mov	ch,byte ptr TCScrMask	; start line 
 0D01  8A 0E 027A R             	mov	cl,byte ptr TCCursMask	; stop line 
 0D05  81 E1 0F0F               	and	cx,0F0FH		; mask to keep in range. 
 0D09  B4 01                    	mov	ah,01			; set cursor type 
 0D0B  9D                       	popf 
 0D0C  CD 10                    	int	10H			; do it 
 0D0E  FF 06 0267 R             	inc	CursorFlag 
 0D12  EB 05 90                 	jmp	STExit 
 0D15                           STSoft: 
 0D15  E8 07AC R                	call	ShowSoftCursor		; show software cursor, i
				f required 
 0D18                           STNotVis2: 
 0D18  9D                       	popf 
 0D19                           STExit: 
                                ;	dec	InTimer 
 0D19  E9 0DD8 R                	jmp	exit 
 0D1C                           ReadMotCounts:	; Function 11 : Read Mouse Motio
				n Counters (taking the mickey) 
 0D1C  33 C9                    	xor	cx,cx 
 0D1E  87 0E 02E0 R             	xchg	MickeyX,cx 
 0D22  33 D2                    	xor	dx,dx 
 0D24  87 16 02E2 R             	xchg	MickeyY,dx 
 0D28  E9 0DD8 R                	jmp	exit 
 0D2B                           SetISMaskAndAdd:; function 12 : Set Interrupt S
				ubroutine Call Mask and Address 
 0D2B  9C                       	pushf 
 0D2C  FA                       	cli				; disable interrupts 
 0D2D  89 0E 02C2 R             	mov	IntCallMask,cx 
 0D31  89 16 02C4 R             	mov	IntCallAddr,dx 
 0D35  8C 06 02C6 R             	mov	IntCallSeg,es 
 0D39  9D                       	popf				; restore previous interrupts state 
 0D3A  E9 0DD8 R                	jmp	exit 
 0D3D                           LightPenEmuOn:	; Function 13 : Light Pen Emulat
				ion Mode On 
 0D3D  33 C0                    	xor	ax,ax			; zero = on 
 0D3F                           LightPenEmuOff:	; Function 14 : Light Pen Emula
				tion Mode Off 
 0D3F  A3 02D6 R                	mov	LightPenMode,ax		; non-zero = off 
 0D42  E9 0DD8 R                	jmp	exit 
 0D45                           SetMPRatio:	; Function 15 : Set Mickey/Pixel Ra
				tio 
 0D45  89 0E 02C8 R             	mov	XMPRatio,cx 
 0D49  89 16 02CA R             	mov	YMPRatio,dx 
 0D4D  E9 0DD8 R                	jmp	exit 
 0D50                           CondOff:	; Function 16 : Conditional Off 
 0D50  C6 06 02E9 R FF          	mov	CondFlag,-1		; set conditional off flag 
 0D55  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0D58  8B 76 F8                 	mov	si,[bp-8] 
 0D5B  8B 7E FA                 	mov	di,[bp-6] 
 0D5E  89 0E 02EA R             	mov	LeftX,cx 
 0D62  89 16 02EE R             	mov	TopY,dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-33
                                                            

 0D66  89 36 02EC R             	mov	RightX,si 
 0D6A  89 3E 02F0 R             	mov	BottomY,di 
 0D6E  E8 0507 R                	call	DoCondOff 
 0D71  EB 65 90                 	jmp	exit 
 0D74                           SetDoubleSpThres:;Function 19 : Set Double-Spee
				d Threshold 
 0D74  EB 62 90                 	jmp	exit 
 0D77                           SwapIntSubrs:	; Function 20 : Swap Interrupt Su
				broutines 
 0D77  9C                       	pushf 
 0D78  FA                       	cli					; disable interrupts 
 0D79  87 16 02C4 R             	xchg	dx,IntCallAddr 
 0D7D  87 0E 02C2 R             	xchg	cx,IntCallMask 
 0D81  51                       	push	cx 
 0D82  8C C1                    	mov	cx,es 
 0D84  87 0E 02C6 R             	xchg	cx,IntCallSeg 
 0D88  89 4E FC                 	mov	[bp-4],cx 
 0D8B  59                       	pop	cx 
 0D8C  9D                       	popf					; restore interrupts state 
 0D8D  EB 49 90                 	jmp	exit 
                                	 
 0D90                           GetMDSSReq:	; Function 21 : Get Mouse Driver St
				ate Storage Requirements 
 0D90  8B 1E 0342 R             	mov	bx,[DataSize] 
 0D94  89 5E F6                 	mov	[bp-10],bx 
 0D97  EB 3F 90                 	jmp	exit 
 0D9A                           SaveMDS:	; Function 22 : Save Mouse Driver Stat
				e 
 0D9A  FA                       	cli 
 0D9B  8B FA                    	mov	di,dx 
 0D9D  8D 36 0267 R             	lea	si,StateInfo 
 0DA1  8B 0E 0342 R             	mov	cx,DataSize 
 0DA5  FC                       	cld 
 0DA6  F3/ A4                   	rep movsb 
 0DA8  FB                       	sti 
 0DA9  EB 2D 90                 	jmp	exit 
 0DAC                           RestoreMDS:		;	23 
 0DAC  FA                       	cli 
 0DAD  8B 0E 0342 R             	mov	cx,DataSize 
 0DB1  1E                       	push	ds			; exchange es and ds 
 0DB2  8C C0                    	mov	ax,es 
 0DB4  8E D8                    	mov	ds,ax 
 0DB6  07                       	pop	es 
 0DB7  8B F2                    	mov	si,dx			; ds:si = source in user area 
 0DB9  8D 3E 0267 R             	lea	di,StateInfo		; es:di = target in mouse ar
				ea 
 0DBD  FC                       	cld 
 0DBE  F3/ A4                   	rep movsb 
 0DC0  FB                       	sti 
 0DC1  EB 15 90                 	jmp	exit 
 0DC4                           SetCRTPageNo:	; Function 29 : Set CRT Page Numb
				er 
 0DC4  8B 5E F6                 	mov	bx,[bp-10]		; M2% 
 0DC7  89 1E 02D4 R             	mov	CRTPageNumber,bx 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-34
                                                            

 0DCB  EB 0B 90                 	jmp	exit 
 0DCE                           GetCRTPageNo:	; Function 30 : Get CRT Page Numb
				er 
 0DCE  8B 1E 02D4 R             	mov	bx,CRTPageNumber 
 0DD2  89 5E F6                 	mov	[bp-10],bx		; M2% 
 0DD5  EB 01 90                 	jmp	exit 
                                	 
 0DD8                           exit: 
 0DD8  58                       	pop	ax 
 0DD9  5B                       	pop	bx 
 0DDA  5E                       	pop	si 
 0DDB  5F                       	pop	di 
 0DDC  07                       	pop	es 
 0DDD  1F                       	pop	ds 
 0DDE  8B E5                    	mov	sp,bp 
 0DE0  5D                       	pop	bp 
 0DE1  CF                       	iret	 
                                 
                                 
 0DE2                           JTable: 
 0DE2  0AFF R                   	dw	ResetAndStatus		;	0 
 0DE4  0B88 R                   	dw	ShowCursor		;	1 
 0DE6  0BD1 R                   	dw	HideCursor		;	2 
 0DE8  0BDC R                   	dw	ButtonAndPos		;	3 
 0DEA  0C00 R                   	dw	SetMCurPos		;	4 
 0DEC  0C0E R                   	dw	GetBPressInfo		;	5 
 0DEE  0C3A R                   	dw	GetBRelInfo		;	6 
 0DF0  0C67 R                   	dw	SetMInMaxHoriz		;	7 
 0DF2  0C72 R                   	dw	SetMInMaxVert		;	8 
 0DF4  0C7D R                   	dw	SetGCurBlock		;	9 
 0DF6  0CCE R                   	dw	SetTextCur		;	10 
 0DF8  0D1C R                   	dw	ReadMotCounts		;	11 
 0DFA  0D2B R                   	dw	SetISMaskAndAdd		;	12 
 0DFC  0D3D R                   	dw	LightPenEmuOn		;	13 
 0DFE  0D3F R                   	dw	LightPenEmuOff		;	14 
 0E00  0D45 R                   	dw	SetMPRatio		;	15 
 0E02  0D50 R                   	dw	CondOff			;	16 
 0E04  0DD8 R                   	dw	exit			;	17 
 0E06  0DD8 R                   	dw	exit			;	18 
 0E08  0D74 R                   	dw	SetDoubleSpThres	;	19 
 0E0A  0D77 R                   	dw	SwapIntSubrs		;	20 
 0E0C  0D90 R                   	dw	GetMDSSReq		;	21 
 0E0E  0D9A R                   	dw	SaveMDS			;	22 
 0E10  0DAC R                   	dw	RestoreMDS		;	23 
 0E12  0DD8 R                   	dw	exit			;	24 
 0E14  0DD8 R                   	dw	exit			;	25 
 0E16  0DD8 R                   	dw	exit			;	26 
 0E18  0DD8 R                   	dw	exit			;	27 
 0E1A  0DD8 R                   	dw	exit			;	28 
 0E1C  0DC4 R                   	dw	SetCRTPageNo		;	29 
 0E1E  0DCE R                   	dw	GetCRTPageNo		;	30 
                                 
                                 
                                MouseDriver	ENDP 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-35
                                                            

 0E20                           EndOfResident: 
                                 
                                 
                                ;**********************************************
				****************************** 
                                ;* 
                                ;* GetParams 
                                ;* 
                                ;**********************************************
				****************************** 
 0E20                           GetParams	PROC	NEAR 
                                 
 0E20  8A 0E 0080 R             	mov	cl,ParamSize 
 0E24  32 ED                    	xor	ch,ch 
 0E26  E3 5F                    	jcxz	NoParams 
 0E28  8D 36 0081 R             	lea	si,Params 
 0E2C                           PLoop: 
 0E2C  AC                       	lodsb 
                                ;	cmp	al," " 
                                ;	je	PSkip 
 0E2D  3C 2D                    	cmp	al,"-"			; start of parameter 
 0E2F  75 54                    	jne	PSkip 
 0E31  49                       	dec	cx 
 0E32  E3 53                    	jcxz	NoParams 
 0E34  AC                       	lodsb 
 0E35  3C 69                    	cmp	al,"i" 
 0E37  75 0D                    	jne	NotInt 
 0E39  A0 0105 R                	mov	al,TimerIntNo 
 0E3C  86 06 0106 R             	xchg	al,OtherIntNo 
 0E40  A2 0105 R                	mov	TimerIntNo,al 
 0E43  EB 40 90                 	jmp	PSkip 
 0E46                           NotInt: 
 0E46  3C 78                    	cmp	al,"x" 
 0E48  75 0F                    	jne	NotXLock 
 0E4A  B0 90                    	mov	al,90H			; NOP 
 0E4C  A2 0852 R                	mov	byte ptr Lock1,al 
 0E4F  A2 0880 R                	mov	byte ptr Lock2,al 
 0E52  EB 31 90                 	jmp	PSkip 
 0E55  3C 63                    	cmp	al,"c" 
 0E57  75 2E                    	jne	NoParams 
 0E59                           NotXLock: 
 0E59  49                       	dec	cx 
 0E5A  E3 2B                    	jcxz	NoParams 
 0E5C  33 DB                    	xor	bx,bx 
 0E5E  8D 3E 0A0F R             	lea	di,Customise 
 0E62  1E                       	push	ds 
 0E63  07                       	pop	es 
 0E64  AC                       	lodsb 
 0E65  B4 20                    	mov	ah," "			; default terminator 
 0E67  3C 22                    	cmp	al,22H			; <"> 
 0E69  75 0E                    	jne	SpaceTerminates 
 0E6B  B4 22                    	mov	ah,22H			; quoted string 
 0E6D  49                       	dec	cx 
 0E6E  E3 17                    	jcxz	NoParams 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-36
                                                            

 0E70                           CLoop: 
 0E70  AC                       	lodsb				; read a character 
 0E71  3A C4                    	cmp	al,ah 
 0E73  74 10                    	je	PSKip 
 0E75  3C 0D                    	cmp	al,0DH 
 0E77  74 0C                    	je	PSKip 
 0E79                           SpaceTerminates: 
 0E79  83 FB 28                 	cmp	bx,40 
 0E7C  74 02                    	je	MSkip			; too long 
 0E7E  AA                       	stosb				; store a character 
 0E7F  43                       	inc	bx 
 0E80                           MSkip: 
 0E80  E2 EE                    	loop	CLoop 
 0E82  EB 03 90                 	jmp	NoParams 
 0E85                           PSkip: 
 0E85  E2 A5                    	loop	PLoop 
 0E87                           NoParams: 
 0E87  C3                       	ret 
                                 
                                GetParams	ENDP 
                                 
 0E88  41 4D 6F 75 73 65 20     NoSMsg	db	"AMouse not active on Amiga",0DH,0AH,
				"$" 
       6E 6F 74 20 61 63 74     
       69 76 65 20 6F 6E 20     
       41 6D 69 67 61 0D 0A     
       24                       
 0EA5  41 4D 6F 75 73 65 20     VersNo	db	"AMouse version 1.2 installed",0DH,0A
				H,"$" 
       76 65 72 73 69 6F 6E     
       20 31 2E 32 20 69 6E     
       73 74 61 6C 6C 65 64     
       0D 0A 24                 
 0EC4  50 61 72 61 6D 65 74     Passed	db	"Parameters passed to previously inst
				alled driver",0DH,0AH,"$" 
       65 72 73 20 70 61 73     
       73 65 64 20 74 6F 20     
       70 72 65 76 69 6F 75     
       73 6C 79 20 69 6E 73     
       74 61 6C 6C 65 64 20     
       64 72 69 76 65 72 0D     
       0A 24                    
 0EF7  41 20 6D 6F 75 73 65     Already	db	"A mouse driver is already installed
				",0DH,0AH,"$" 
       20 64 72 69 76 65 72     
       20 69 73 20 61 6C 72     
       65 61 64 79 20 69 6E     
       73 74 61 6C 6C 65 64     
       0D 0A 24                 
                                 
 0F1D                           NoService: 
 0F1D  B4 09                    	mov	ah,9 
 0F1F  BA 0E88 R                	mov	dx,offset NoSMsg 
 0F22  CD 21                    	int	21H 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-37
                                                            

 0F24  B8 4C02                  	mov	ax,4C02H 
 0F27  CD 21                    	int	21H			; terminate with return code 
                                 
 0F29                           AlreadyIn: 
 0F29  B9 0028                  	mov	cx,40			; CopyRight length 
 0F2C  8D 3E 09E7 R             	lea	di,CopyRight 
 0F30  8B F7                    	mov	si,di 
 0F32  F3/ A6                   	rep cmpsb 
 0F34  E3 0C                    	jcxz	ItsMine 
 0F36  B4 09                    	mov	ah,9 
 0F38  BA 0EF7 R                	mov	dx,offset Already 
 0F3B  CD 21                    	int	21H 
 0F3D  B8 4C03                  	mov	ax,4C03H 
 0F40  CD 21                    	int	21H			; terminate with return code 
 0F42                           ItsMine: 
 0F42  8D 3E 0A0F R             	lea	di,Customise 
 0F46  8B F7                    	mov	si,di 
 0F48  B9 0028                  	mov	cx,40 
 0F4B  F3/ A4                   	rep movsb 
 0F4D  A0 0105 R                	mov	al,TimerIntNo 
 0F50  06                       	push	es 
 0F51  1F                       	pop	ds 
 0F52  3A 06 0105 R             	cmp	al,TimerIntNo 
 0F56  74 16                    	je	SameInts		; interrupts as previously 
 0F58  FB                       	sti 
 0F59  A2 0105 R                	mov	TimerIntNo,al 
 0F5C  2E: A0 0106 R            	mov	al,cs:OtherIntNo 
 0F60  A2 0106 R                	mov	OtherIntNo,al 
 0F63  A1 0107 R                	mov	ax,TimerProc 
 0F66  87 06 0109 R             	xchg	ax,OtherProc 
 0F6A  A3 0107 R                	mov	TimerProc,ax 
 0F6D  FA                       	cli 
 0F6E                           SameInts: 
 0F6E  2E: A0 0852 R            	mov	al,byte ptr cs:Lock1		; set lock on or off
				 
 0F72  A2 0852 R                	mov	byte ptr Lock1,al 
 0F75  A2 0880 R                	mov	byte ptr Lock2,al 
 0F78  B4 09                    	mov	ah,9 
 0F7A  BA 0EC4 R                	mov	dx,offset Passed 
 0F7D  CD 21                    	int	21H 
 0F7F  B8 4C00                  	mov	ax,4C00H 
 0F82  CD 21                    	int	21H			; terminate with return code 
                                	 
                                	 
                                 
 0F84                           main: 
 0F84  0E                       	push	cs 
 0F85  1F                       	pop	ds 
                                 
 0F86  E8 0E20 R                	call	GetParams 
                                 
 0F89  A1 0342 R                	mov	ax,DataSize 
 0F8C  A3 0350 R                	mov	SaveSize,ax 
 0F8F  B9 0003                  	mov	cx,3			; Janus problem - try 3 times 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-38
                                                            

                                					; before giving up on Amiga 
 0F92                           RetryJanus: 
 0F92  51                       	push	cx 
 0F93  B8 0111                  	mov	ax,(J_GET_BASE*256)+JIntNum	; get base for
				 service 
 0F96  CD 0B                    	int	0BH			; do it 
                                ;	or	al,al 
                                ;	jnz	NoService		; one check (at time of writin
				g useless) 
 0F98  8B C7                    	mov	ax,di			; Parameter Offset 
 0F9A  0B C0                    	or	ax,ax			; the real check 
 0F9C  79 06                    	jns	GotService		; Offset should be positive 
 0F9E  59                       	pop	cx 
 0F9F  E2 F1                    	loop	RetryJanus 
 0FA1  E9 0F1D R                	jmp	NoService 
 0FA4                           GotService: 
 0FA4  26: 8B 05                	mov	ax,es:0[di]		; Offset of Buffer area 
 0FA7  A3 011B R                	mov	DualPortArea,ax 
 0FAA  89 16 011D R             	mov	DualPortArea+2,dx	; segment of Buffer area
				 
 0FAE  89 3E 011F R             	mov	ParamArea,di 
 0FB2  8C 06 0121 R             	mov	ParamArea+2,es		; parameter area address 
                                 
 0FB6  B8 3533                  	mov	ax,3533H		 
 0FB9  CD 21                    	int	21H			; read current interrupt 51 handler 
 0FBB  8C C0                    	mov	ax, es			; Check segment and 
 0FBD  0B C3                    	or	ax, bx			; offset of int 33 
 0FBF  74 0A                    	jz	NotIn			; vector.  If 0 or pointing to 
 0FC1  26: 8A 07                	mov	al, es:[bx]		; an IRET driver not installe
				d 
 0FC4  3C CF                    	cmp	al, 0cfh 
 0FC6  74 03                    	je	NotIn			; not already installed 
 0FC8  E9 0F29 R                	jmp	AlreadyIn		; already installed 
 0FCB                           NotIn: 
 0FCB  8C 06 010D R             	mov	OldSegment,es		; save 
 0FCF  89 1E 010B R             	mov	OldOffset,bx 
 0FD3  BA 0A37 R                	mov	dx,OFFSET MouseDriver 
 0FD6  0E                       	push	cs 
 0FD7  1F                       	pop	ds 
 0FD8  B8 2533                  	mov	ax,2533H		; set new interrupt 51 handler 
 0FDB  CD 21                    	int	21H 
                                 
 0FDD  B4 35                    	mov	ah,35H 
 0FDF  A0 0105 R                	mov	al,TimerIntNo 
 0FE2  CD 21                    	int	21H			; read current Timer interrupt handl
				er 
 0FE4  8C 06 0111 R             	mov	TimerSegment,es		; save 
 0FE8  89 1E 010F R             	mov	TimerOffset,bx 
 0FEC  BA 03CB R                	mov	dx,OFFSET Timer 
 0FEF  0E                       	push	cs 
 0FF0  1F                       	pop	ds 
 0FF1  B4 25                    	mov	ah,25H			; set new Timer interrupt handler
				 
 0FF3  A0 0105 R                	mov	al,TimerIntNo 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Page     1-39
                                                            

 0FF6  CD 21                    	int	21H 
                                 
                                 
 0FF8  B4 35                    	mov	ah,35H 
 0FFA  A0 0106 R                	mov	al,OtherIntNo 
 0FFD  CD 21                    	int	21H			; read current Other interrupt handl
				er 
 0FFF  8C 06 0115 R             	mov	OtherSegment,es		; save 
 1003  89 1E 0113 R             	mov	OtherOffset,bx 
 1007  BA 03D7 R                	mov	dx,OFFSET Other 
 100A  0E                       	push	cs 
 100B  1F                       	pop	ds 
 100C  B4 25                    	mov	ah,25H			; set new Other interrupt handler
				 
 100E  A0 0106 R                	mov	al,OtherIntNo 
 1011  CD 21                    	int	21H 
                                 
                                 
 1013  B8 3510                  	mov	ax,3510H		 
 1016  CD 21                    	int	21H			; read current interrupt 10H handler
				 
 1018  8C 06 0119 R             	mov	VideoSegment,es		; save 
 101C  89 1E 0117 R             	mov	VideoOffset,bx 
 1020  BA 0434 R                	mov	dx,OFFSET Video 
 1023  0E                       	push	cs 
 1024  1F                       	pop	ds 
 1025  B8 2510                  	mov	ax,2510H		; set new interrupt 10H handler 
 1028  CD 21                    	int	21H 
                                 
 102A  C4 3E 011B R             	les	di,dword ptr DualPortArea 
 102E  B9 0008                  	mov	cx,DPSize 
 1031  33 C0                    	xor	ax,ax 
 1033  F3/ AB                   	rep stosw			; zeroise Dual Port Ram variables.
				 
 1035  8E C0                    	mov	es,ax			; segement zero 
 1037  26: A0 0449              	mov	al,es:[449H] 
 103B  C4 3E 011B R             	les	di,dword ptr DualPortArea 
 103F  26: 89 45 12             	mov	es:PCVideoMode[di],ax 
 1043  E8 03E3 R                	call	SetVideoPars		; also tells Amiga what vid
				eo mode 
 1046  B4 09                    	mov	ah,9 
 1048  BA 0EA5 R                	mov	dx,offset VersNo 
 104B  CD 21                    	int	21H 
 104D  B8 3100                  	mov	ax,3100H 
 1050  8D 16 0F2F R             	lea	dx,EndOfResident+10FH	; round up + program
				 header 
 1054  B1 04                    	mov	cl,4 
 1056  D3 FA                    	sar	dx,cl 
 1058  CD 21                    	int	21H			; terminate but stay resident 
                                 
 105A                           cseg	ENDS 
                                END	Start 
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	105A	BYTE	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	Value	Attr         

ALREADY  . . . . . . . . . . . .  	L BYTE 	0EF7	CSEG
ALREADYIN  . . . . . . . . . . .  	L NEAR	0F29	CSEG
AMIGAPCLEFTP . . . . . . . . . .  	Number	0004	
AMIGAPCLEFTR . . . . . . . . . .  	Number	0008	
AMIGAPCRIGHTP  . . . . . . . . .  	Number	0006	
AMIGAPCRIGHTR  . . . . . . . . .  	Number	000A	
AMIGAPCSTATUS  . . . . . . . . .  	Number	000C	
AMIGAPCX . . . . . . . . . . . .  	Number	0000	
AMIGAPCY . . . . . . . . . . . .  	Number	0002	

BASICMOUSE . . . . . . . . . . .  	F PROC	0A3A	CSEG	Length = 007C
BOTTOMY  . . . . . . . . . . . .  	L WORD 	02F0	CSEG
BUTTONANDPOS . . . . . . . . . .  	L NEAR	0BDC	CSEG
BUTTONS  . . . . . . . . . . . .  	L WORD 	02F2	CSEG	Length = 0010
BUTTONSTATUS . . . . . . . . . .  	L WORD 	02D8	CSEG

CHECK2 . . . . . . . . . . . . .  	L NEAR	0ACF	CSEG
CHECK9 . . . . . . . . . . . . .  	L NEAR	0A8F	CSEG
CLOOP  . . . . . . . . . . . . .  	L NEAR	0E70	CSEG
CONDFLAG . . . . . . . . . . . .  	L BYTE 	02E9	CSEG
CONDOFF  . . . . . . . . . . . .  	L NEAR	0D50	CSEG
CONDOFFEXIT  . . . . . . . . . .  	L NEAR	0543	CSEG
COPYRIGHT  . . . . . . . . . . .  	L NEAR	09E7	CSEG
CRMSG  . . . . . . . . . . . . .  	L WORD 	0346	CSEG
CRTPAGENUMBER  . . . . . . . . .  	L WORD 	02D4	CSEG
CSVALID  . . . . . . . . . . . .  	L BYTE 	0270	CSEG
CURSORFLAG . . . . . . . . . . .  	L WORD 	0267	CSEG
CURSORHEIGHT . . . . . . . . . .  	Number	0010	
CURSORSAVE . . . . . . . . . . .  	L WORD 	0269	CSEG
CURSORWIDTH  . . . . . . . . . .  	Number	0010	
CURSORX  . . . . . . . . . . . .  	L BYTE 	026E	CSEG
CURSORY  . . . . . . . . . . . .  	L BYTE 	026F	CSEG
CUSTOMISE  . . . . . . . . . . .  	L NEAR	0A0F	CSEG

DATASIZE . . . . . . . . . . . .  	L WORD 	0342	CSEG
DATASTART  . . . . . . . . . . .  	NEAR 	0267	CSEG
DEFAULTMOUSE . . . . . . . . . .  	L WORD 	0227	CSEG
DOCONDOFF  . . . . . . . . . . .  	N PROC	0507	CSEG	Length = 003E
DOHCEXIT . . . . . . . . . . . .  	L NEAR	0574	CSEG
DOHIDECURSOR . . . . . . . . . .  	N PROC	0545	CSEG	Length = 0034
DOMOVE . . . . . . . . . . . . .  	L BYTE 	02E8	CSEG
DOTRACE  . . . . . . . . . . . .  	L BYTE 	0103	CSEG
DPCOPYAREA . . . . . . . . . . .  	L WORD 	0354	CSEG	Length = 0008
DPSIZE . . . . . . . . . . . . .  	Number	0008	
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-2
                                                             

DUALPORTAREA . . . . . . . . . .  	L WORD 	011B	CSEG

ENDOFRESIDENT  . . . . . . . . .  	L NEAR	0E20	CSEG
EVENLINE . . . . . . . . . . . .  	L NEAR	05DA	CSEG
EXIT . . . . . . . . . . . . . .  	L NEAR	0DD8	CSEG
EXIT1  . . . . . . . . . . . . .  	L NEAR	0C37	CSEG
EXIT2  . . . . . . . . . . . . .  	L NEAR	0B85	CSEG

FAILCHECK  . . . . . . . . . . .  	L NEAR	0ACC	CSEG

GCINRANGE  . . . . . . . . . . .  	L NEAR	05CE	CSEG
GCMOVE . . . . . . . . . . . . .  	L NEAR	0623	CSEG
GCNOBYTE0  . . . . . . . . . . .  	L NEAR	0653	CSEG
GCNOBYTE1  . . . . . . . . . . .  	L NEAR	0671	CSEG
GCNOBYTE2  . . . . . . . . . . .  	L NEAR	0682	CSEG
GCNOMOVE . . . . . . . . . . . .  	L NEAR	06A2	CSEG
GCOUTOFRANGE . . . . . . . . . .  	L NEAR	0607	CSEG
GCQUIT . . . . . . . . . . . . .  	L NEAR	05CB	CSEG
GETBPRESSINFO  . . . . . . . . .  	L NEAR	0C0E	CSEG
GETBRELINFO  . . . . . . . . . .  	L NEAR	0C3A	CSEG
GETBUTTONS . . . . . . . . . . .  	L NEAR	0905	CSEG
GETCRTPAGENO . . . . . . . . . .  	L NEAR	0DCE	CSEG
GETLREL  . . . . . . . . . . . .  	L NEAR	0924	CSEG
GETMDSSREQ . . . . . . . . . . .  	L NEAR	0D90	CSEG
GETPARAMS  . . . . . . . . . . .  	N PROC	0E20	CSEG	Length = 0068
GETRPRS  . . . . . . . . . . . .  	L NEAR	0940	CSEG
GETRREL  . . . . . . . . . . . .  	L NEAR	095E	CSEG
GETSTATUS  . . . . . . . . . . .  	L NEAR	097A	CSEG
GETY . . . . . . . . . . . . . .  	L NEAR	08C8	CSEG
GOTSERVICE . . . . . . . . . . .  	L NEAR	0FA4	CSEG
GRAPHCX  . . . . . . . . . . . .  	L WORD 	0272	CSEG
GRAPHCY  . . . . . . . . . . . .  	L WORD 	0274	CSEG
GRAPHICSCDEF . . . . . . . . . .  	L WORD 	027C	CSEG	Length = 0020
GRAPHICSSAVE . . . . . . . . . .  	L BYTE 	0312	CSEG	Length = 0030
GRAPHVALID . . . . . . . . . . .  	L BYTE 	0271	CSEG

HIDECURSOR . . . . . . . . . . .  	L NEAR	0BD1	CSEG
HIDEGRAPHICS . . . . . . . . . .  	L NEAR	056B	CSEG
HIDEHARDWARE . . . . . . . . . .  	L NEAR	0561	CSEG
HOTSPOTX . . . . . . . . . . . .  	L WORD 	02E4	CSEG
HOTSPOTY . . . . . . . . . . . .  	L WORD 	02E6	CSEG

INTCALLADDR  . . . . . . . . . .  	L WORD 	02C4	CSEG
INTCALLMASK  . . . . . . . . . .  	L WORD 	02C2	CSEG
INTCALLSEG . . . . . . . . . . .  	L WORD 	02C6	CSEG
INTIMER  . . . . . . . . . . . .  	L BYTE 	0369	CSEG
ITSMINE  . . . . . . . . . . . .  	L NEAR	0F42	CSEG

JANUS  . . . . . . . . . . . . .  	N PROC	047F	CSEG	Length = 002B
JINTNUM  . . . . . . . . . . . .  	Number	0011	
JLOOP  . . . . . . . . . . . . .  	L NEAR	0488	CSEG
JTABLE . . . . . . . . . . . . .  	L NEAR	0DE2	CSEG
J_ALLOC_MEM  . . . . . . . . . .  	Number	0002	
J_CALL_AMIGA . . . . . . . . . .  	Number	0007	
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-3
                                                             

J_CHECK_AMIGA  . . . . . . . . .  	Number	0009	
J_FINISHED . . . . . . . . . . .  	Number	0001	
J_FREE_MEM . . . . . . . . . . .  	Number	0003	
J_GET_BASE . . . . . . . . . . .  	Number	0001	
J_GET_SERVICE  . . . . . . . . .  	Number	0000	
J_NO_SERVICE . . . . . . . . . .  	Number	00FF	
J_PENDING  . . . . . . . . . . .  	Number	0000	
J_SET_PARAM  . . . . . . . . . .  	Number	0004	
J_SET_SERVICE  . . . . . . . . .  	Number	0005	
J_STOP_SERVICE . . . . . . . . .  	Number	0006	
J_WAIT_AMIGA . . . . . . . . . .  	Number	0008	

LEFTX  . . . . . . . . . . . . .  	L WORD 	02EA	CSEG
LIGHTPENEMUOFF . . . . . . . . .  	L NEAR	0D3F	CSEG
LIGHTPENEMUON  . . . . . . . . .  	L NEAR	0D3D	CSEG
LIGHTPENMODE . . . . . . . . . .  	L WORD 	02D6	CSEG
LINELOOPEND  . . . . . . . . . .  	L NEAR	0696	CSEG
LOCK1  . . . . . . . . . . . . .  	L NEAR	0852	CSEG
LOCK2  . . . . . . . . . . . . .  	L NEAR	0880	CSEG

MAIN . . . . . . . . . . . . . .  	L NEAR	0F84	CSEG
MAINCODE . . . . . . . . . . . .  	L NEAR	0AB6	CSEG
MEVENLINE  . . . . . . . . . . .  	L NEAR	0692	CSEG
MICKEYX  . . . . . . . . . . . .  	L WORD 	02E0	CSEG
MICKEYY  . . . . . . . . . . . .  	L WORD 	02E2	CSEG
MMGRAPHICS . . . . . . . . . . .  	L NEAR	09B9	CSEG
MMHARDWARE . . . . . . . . . . .  	L NEAR	09B3	CSEG
MMOVEEXIT  . . . . . . . . . . .  	L NEAR	09E6	CSEG
MOUSEDRIVER  . . . . . . . . . .  	N PROC	0A37	CSEG	Length = 03E9
MOUSEIMAGE . . . . . . . . . . .  	Number	0001	
MOUSEINT . . . . . . . . . . . .  	N PROC	036A	CSEG	Length = 0060
MOUSEMOVE  . . . . . . . . . . .  	Number	0004	
MOUSEOFF . . . . . . . . . . . .  	Number	0003	
MOUSEON  . . . . . . . . . . . .  	Number	0002	
MOUSEREAD  . . . . . . . . . . .  	N PROC	0848	CSEG	Length = 0147
MOUSETOCURSOR  . . . . . . . . .  	N PROC	0579	CSEG	Length = 0019
MOUSEX . . . . . . . . . . . . .  	L WORD 	02DA	CSEG
MOUSEY . . . . . . . . . . . . .  	L WORD 	02DC	CSEG
MOVECURSOR . . . . . . . . . . .  	N PROC	0818	CSEG	Length = 0030
MOVEMOUSE  . . . . . . . . . . .  	N PROC	098F	CSEG	Length = 0058
MRGOTLOCK  . . . . . . . . . . .  	L NEAR	085C	CSEG
MRNOMOVE . . . . . . . . . . . .  	L NEAR	0988	CSEG
MSKIP  . . . . . . . . . . . . .  	L NEAR	0E80	CSEG
MYSTACK  . . . . . . . . . . . .  	L WORD 	0127	CSEG	Length = 0080
MYSTACKTOP . . . . . . . . . . .  	NEAR 	0227	CSEG

NEWMASK  . . . . . . . . . . . .  	L WORD 	02C0	CSEG
NEWVIDEO . . . . . . . . . . . .  	L NEAR	0438	CSEG
NEXTLINE . . . . . . . . . . . .  	L NEAR	062B	CSEG
NEXTTIMER  . . . . . . . . . . .  	L NEAR	03C9	CSEG
NOCHANGE . . . . . . . . . . . .  	L NEAR	03BC	CSEG
NODX . . . . . . . . . . . . . .  	L NEAR	0AA3	CSEG
NOJANUS  . . . . . . . . . . . .  	L NEAR	04A9	CSEG
NOPARAMS . . . . . . . . . . . .  	L NEAR	0E87	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-4
                                                             

NOPCGRAPH  . . . . . . . . . . .  	L NEAR	06AB	CSEG
NOSERVICE  . . . . . . . . . . .  	L NEAR	0F1D	CSEG
NOSMSG . . . . . . . . . . . . .  	L BYTE 	0E88	CSEG
NOTCONDOFF . . . . . . . . . . .  	L NEAR	0542	CSEG
NOTIN  . . . . . . . . . . . . .  	L NEAR	0FCB	CSEG
NOTINT . . . . . . . . . . . . .  	L NEAR	0E46	CSEG
NOTRACE  . . . . . . . . . . . .  	L NEAR	0506	CSEG
NOTXLOCK . . . . . . . . . . . .  	L NEAR	0E59	CSEG
NULL . . . . . . . . . . . . . .  	N PROC	03CA	CSEG	Length = 0001

OLDOFFSET  . . . . . . . . . . .  	L WORD 	010B	CSEG
OLDSEGMENT . . . . . . . . . . .  	L WORD 	010D	CSEG
OLDSTACKPTR  . . . . . . . . . .  	L WORD 	0125	CSEG
OLDSTACKSEG  . . . . . . . . . .  	L WORD 	0123	CSEG
OTHER  . . . . . . . . . . . . .  	F PROC	03D7	CSEG	Length = 000C
OTHERINTNO . . . . . . . . . . .  	L BYTE 	0106	CSEG
OTHEROFFSET  . . . . . . . . . .  	L WORD 	0113	CSEG
OTHERPROC  . . . . . . . . . . .  	L WORD 	0109	CSEG
OTHERSEGMENT . . . . . . . . . .  	L WORD 	0115	CSEG

PARAMAREA  . . . . . . . . . . .  	L WORD 	011F	CSEG
PARAMS . . . . . . . . . . . . .  	L BYTE 	0081	CSEG	Length = 007F
PARAMSIZE  . . . . . . . . . . .  	L BYTE 	0080	CSEG
PASSED . . . . . . . . . . . . .  	L BYTE 	0EC4	CSEG
PCVIDEOMODE  . . . . . . . . . .  	Number	0012	
PLOOP  . . . . . . . . . . . . .  	L NEAR	0E2C	CSEG
PRESSCOUNT . . . . . . . . . . .  	Number	0000	
PRESSX . . . . . . . . . . . . .  	Number	0002	
PRESSY . . . . . . . . . . . . .  	Number	0004	
PRINT  . . . . . . . . . . . . .  	N PROC	04AA	CSEG	Length = 0008
PSKIP  . . . . . . . . . . . . .  	L NEAR	0E85	CSEG

READMOTCOUNTS  . . . . . . . . .  	L NEAR	0D1C	CSEG
RELEASECOUNT . . . . . . . . . .  	Number	0006	
RELEASEX . . . . . . . . . . . .  	Number	0008	
RELEASEY . . . . . . . . . . . .  	Number	000A	
RESETANDSTATUS . . . . . . . . .  	L NEAR	0AFF	CSEG
RESTOREMDS . . . . . . . . . . .  	L NEAR	0DAC	CSEG
RETRYJANUS . . . . . . . . . . .  	L NEAR	0F92	CSEG
RIGHTX . . . . . . . . . . . . .  	L WORD 	02EC	CSEG
ROWLOOPEND . . . . . . . . . . .  	L NEAR	0682	CSEG

SAMEINTS . . . . . . . . . . . .  	L NEAR	0F6E	CSEG
SAMEVIDEO  . . . . . . . . . . .  	L NEAR	046D	CSEG
SAVEGRAPHCURSOR  . . . . . . . .  	N PROC	072B	CSEG	Length = 0081
SAVEMASK . . . . . . . . . . . .  	L BYTE 	026B	CSEG	Length = 0003
SAVEMDS  . . . . . . . . . . . .  	L NEAR	0D9A	CSEG
SAVESIZE . . . . . . . . . . . .  	L WORD 	0350	CSEG
SCREENMAXX . . . . . . . . . . .  	L WORD 	0365	CSEG
SCREENMAXY . . . . . . . . . . .  	L WORD 	0367	CSEG
SCREENMODE . . . . . . . . . . .  	L BYTE 	0364	CSEG
SCREENOFFSET . . . . . . . . . .  	L WORD 	02BC	CSEG
SCREENSEGMENT  . . . . . . . . .  	L WORD 	02BE	CSEG
SETCRTPAGENO . . . . . . . . . .  	L NEAR	0DC4	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-5
                                                             

SETDOUBLESPTHRES . . . . . . . .  	L NEAR	0D74	CSEG
SETGCNOTVIS1 . . . . . . . . . .  	L NEAR	0C91	CSEG
SETGCNOTVIS2 . . . . . . . . . .  	L NEAR	0CC4	CSEG
SETGCURBLOCK . . . . . . . . . .  	L NEAR	0C7D	CSEG
SETISMASKANDADD  . . . . . . . .  	L NEAR	0D2B	CSEG
SETMCURPOS . . . . . . . . . . .  	L NEAR	0C00	CSEG
SETMINMAXHORIZ . . . . . . . . .  	L NEAR	0C67	CSEG
SETMINMAXVERT  . . . . . . . . .  	L NEAR	0C72	CSEG
SETMPRATIO . . . . . . . . . . .  	L NEAR	0D45	CSEG
SETTEXTCUR . . . . . . . . . . .  	L NEAR	0CCE	CSEG
SETVIDEOPARS . . . . . . . . . .  	N PROC	03E3	CSEG	Length = 0051
SGCBYTESKIP  . . . . . . . . . .  	L NEAR	0785	CSEG
SGCEVENLINE  . . . . . . . . . .  	L NEAR	079A	CSEG
SGCEXIT  . . . . . . . . . . . .  	L NEAR	07AB	CSEG
SGCLOOPEND . . . . . . . . . . .  	L NEAR	079E	CSEG
SGCNEXT  . . . . . . . . . . . .  	L NEAR	0767	CSEG
SGCNEXTBYTE  . . . . . . . . . .  	L NEAR	0778	CSEG
SGCSKIP  . . . . . . . . . . . .  	L NEAR	078B	CSEG
SHOWCURSOR . . . . . . . . . . .  	L NEAR	0B88	CSEG
SHOWGRAPH  . . . . . . . . . . .  	L NEAR	059A	CSEG
SHOWGRAPHCURSOR  . . . . . . . .  	N PROC	0592	CSEG	Length = 011A
SHOWGRAPHICS . . . . . . . . . .  	L NEAR	0BC5	CSEG
SHOWHARDWARE . . . . . . . . . .  	L NEAR	0BAF	CSEG
SHOWSOFTCURSOR . . . . . . . . .  	N PROC	07AC	CSEG	Length = 004A
SPACETERMINATES  . . . . . . . .  	L NEAR	0E79	CSEG
SPECIALS . . . . . . . . . . . .  	L NEAR	0ADE	CSEG
SPSETES  . . . . . . . . . . . .  	L NEAR	0AF9	CSEG
SPVERS . . . . . . . . . . . . .  	L NEAR	0AF2	CSEG
SSCRETURN  . . . . . . . . . . .  	L NEAR	07F5	CSEG
STANDARDIMAGE  . . . . . . . . .  	Number	0005	
START  . . . . . . . . . . . . .  	L NEAR	0100	CSEG
STATEINFO  . . . . . . . . . . .  	L NEAR	0267	CSEG
STEXIT . . . . . . . . . . . . .  	L NEAR	0D19	CSEG
STNOTVIS1  . . . . . . . . . . .  	L NEAR	0CDB	CSEG
STNOTVIS2  . . . . . . . . . . .  	L NEAR	0D18	CSEG
STSOFT . . . . . . . . . . . . .  	L NEAR	0D15	CSEG
SWAPINTSUBRS . . . . . . . . . .  	L NEAR	0D77	CSEG

TCCURSMASK . . . . . . . . . . .  	L WORD 	027A	CSEG
TCSCRMASK  . . . . . . . . . . .  	L WORD 	0278	CSEG
TCTYPE . . . . . . . . . . . . .  	L BYTE 	0277	CSEG
TELLVIDEO  . . . . . . . . . . .  	L NEAR	042C	CSEG
TEXTCURS . . . . . . . . . . . .  	L BYTE 	0276	CSEG
TGCBYTESKIP  . . . . . . . . . .  	L NEAR	0705	CSEG
TGCEVENLINE  . . . . . . . . . .  	L NEAR	0718	CSEG
TGCEXIT  . . . . . . . . . . . .  	L NEAR	0729	CSEG
TGCLOOPEND . . . . . . . . . . .  	L NEAR	071C	CSEG
TGCNEXT  . . . . . . . . . . . .  	L NEAR	06E0	CSEG
TGCNEXTBYTE  . . . . . . . . . .  	L NEAR	06F1	CSEG
TGCSKIP  . . . . . . . . . . . .  	L NEAR	0709	CSEG
TIDYGRAPHCURSOR  . . . . . . . .  	N PROC	06AC	CSEG	Length = 007F
TIDYSOFTCURSOR . . . . . . . . .  	N PROC	07F6	CSEG	Length = 0022
TIMER  . . . . . . . . . . . . .  	F PROC	03CB	CSEG	Length = 000C
TIMERINTNO . . . . . . . . . . .  	L BYTE 	0105	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/28/88 05:19:39

emumouse                                                    Symbols-6
                                                             

TIMEROFFSET  . . . . . . . . . .  	L WORD 	010F	CSEG
TIMERPROC  . . . . . . . . . . .  	L WORD 	0107	CSEG
TIMERSEGMENT . . . . . . . . . .  	L WORD 	0111	CSEG
TOPY . . . . . . . . . . . . . .  	L WORD 	02EE	CSEG
TRACE  . . . . . . . . . . . . .  	N PROC	04B2	CSEG	Length = 0055
TSCRETURN  . . . . . . . . . . .  	L NEAR	0817	CSEG

USEDXASPTR . . . . . . . . . . .  	L NEAR	0A70	CSEG
USEDXVALUE . . . . . . . . . . .  	L NEAR	0A82	CSEG
USESPRITE  . . . . . . . . . . .  	L BYTE 	0104	CSEG

VERSIONNO  . . . . . . . . . . .  	L BYTE 	0344	CSEG
VERSNO . . . . . . . . . . . . .  	L BYTE 	0EA5	CSEG
VIDEO  . . . . . . . . . . . . .  	F PROC	0434	CSEG	Length = 004B
VIDEOCONTINUE  . . . . . . . . .  	L NEAR	047A	CSEG
VIDEOGRAPHICS  . . . . . . . . .  	L NEAR	0420	CSEG
VIDEOMODE  . . . . . . . . . . .  	Number	0000	
VIDEONOT01 . . . . . . . . . . .  	L NEAR	03FE	CSEG
VIDEONOT23 . . . . . . . . . . .  	L NEAR	0412	CSEG
VIDEOOFFSET  . . . . . . . . . .  	L WORD 	0117	CSEG
VIDEORESTORE . . . . . . . . . .  	L NEAR	0476	CSEG
VIDEOSEGMENT . . . . . . . . . .  	L WORD 	0119	CSEG
VIDEOTEXT8X8 . . . . . . . . . .  	L NEAR	0403	CSEG

XCHECK . . . . . . . . . . . . .  	L NEAR	060A	CSEG
XMAXCURSOR . . . . . . . . . . .  	L WORD 	02CE	CSEG
XMAXOK . . . . . . . . . . . . .  	L NEAR	08C1	CSEG
XMINCURSOR . . . . . . . . . . .  	L WORD 	02CC	CSEG
XMINOK . . . . . . . . . . . . .  	L NEAR	08B8	CSEG
XMPRATIO . . . . . . . . . . . .  	L WORD 	02C8	CSEG
XSHIFT . . . . . . . . . . . . .  	L BYTE 	02DE	CSEG

YMAXCURSOR . . . . . . . . . . .  	L WORD 	02D2	CSEG
YMAXOK . . . . . . . . . . . . .  	L NEAR	08FE	CSEG
YMINCURSOR . . . . . . . . . . .  	L WORD 	02D0	CSEG
YMINOK . . . . . . . . . . . . .  	L NEAR	08F5	CSEG
YMPRATIO . . . . . . . . . . . .  	L WORD 	02CA	CSEG
YSHIFT . . . . . . . . . . . . .  	L BYTE 	02DF	CSEG


   1897 Source  Lines
   1897 Total   Lines
    300 Symbols

  39160 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
