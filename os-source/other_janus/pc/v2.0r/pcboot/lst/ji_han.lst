Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-1


				TITLE	JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Co
				mmodore Amiga Inc.  
				PAGE	60,132	 
				;**************************************************************************** 
				; Function: 
				; 
				; JanusIntHandler  gets # of pending interrupt from jb_interrupts table, 
				; ---------------  adjusts ES:DI to correspondent interrupt parameter table 
				;		   and call interrupt handler on PC			 
				; 
				;**************************************************************************** 
				; 
				public	       JanusIntHandler, SendJanusInt 
				public	       TestInt, Dummy 
					 
 0000				cseg segment   para public 'code' 
				assume         cs:cseg,ss:cseg,ds:cseg,es:nothing 
				 
				extrn	       DosInt:near		     ; dos entry 
				extrn	       outhxw:near		     ; prints hex word in ax 
				extrn	       outuns:near		     ; prints decimal number in ax 
				extrn	       outint:near		     ; prints integer in ax 
				extrn	       newline:near		     ; prints cr,lf 
				extrn	       pstrng:near		     ; prints out string 
				 
				include        macros.inc 
			     C	;***************************************************************************** 
			     C	; 
			     C	; macros.inc	        
			     C	; 
			     C	;***************************************************************************** 
			     C	.list 
			     C	 
			     C	 
			     C	 
			     C	 
				 
				include	       debug.inc 
			     C	;****************************************************************************** 
			     C	; 
			     C	; Debug.inc contains flag to enable debug messageses  
			     C	; 
			     C	;****************************************************************************** 
			     C	 
			     C	include		mes.inc			; includes all message offsets 
			     C	;**************************************************************************** 
			     C	; 
			     C	; mes.inc contains external messages for PC janus handler 
			     C	; 
			     C	;**************************************************************************** 
			     C	.list 
			     C	 
			     C	 
			     C	 
			     C	 
			     C	.list 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-2


			     C	 
			     C	 
			     C	 
				 
				include        handler.inc 
			     C	;****************************************************************************** 
			     C	; 
			     C	; handler.inc  contains offsets of PC handlers for AMIGA requests. 
			     C	;	       Requests for not installed handler points to dummy 
			     C	;	       routine and responds with error message on PC screen 
			     C	; 
			     C	;****************************************************************************** 
			     C	; 
			     C	extrn	       janus_disk_io:near 
			     C	extrn	       memrw:near 
			     C	extrn	       int86:near 
			     C	extrn	       ServiceDispatch:near 
			     C	; 
 0000                        C	HandlerTab     	label	 word			;Int# 
 0000  013E R                C			dw	offset	dummy		;  0 Amiga HW int 
 0002  013E R                C		       	dw	offset  dummy		;  1	    " 
 0004  013E R                C		       	dw	offset  dummy		;  2	    " 
 0006  013E R                C		       	dw	offset  dummy		;  3	    " 
 0008  013E R                C		       	dw	offset  dummy		;  4	    " 
 000A  013E R                C		       	dw	offset  dummy		;  5	    " 
 000C  013E R                C		       	dw	offset  dummy		;  6	    " 
 000E  013E R                C		       	dw	offset  dummy		;  7 PC int. handler ready 
 0010  013E R                C		       	dw	offset  dummy		;  8 PC scrolling 
 0012  0000 E                C		       	dw	offset 	Janus_disk_io  	;  9 Amiga reading PC harddisk 
 0014  013E R                C		       	dw	offset	dummy	  	; 10 PC reading Amiga ram 
 0016  0000 E                C		       	dw	offset  memrw	  	; 11 Amiga reading PC ram 
 0018  013E R                C		       	dw	offset  dummy	  	; 12 PC calling Amiga funct. 
 001A  0000 E                C		       	dw	offset  int86	  	; 13 AMIGA causing PC int. 
 001C  013E R                C		       	dw	offset  dummy	  	; 14 PC calls Amiga service 
 001E  0000 E                C		       	dw	offset	ServiceDispatch	; 15 Amiga calls PC service 
 0020  013E R                C		       	dw	offset  dummy    	; 16 PCDisk 
 0022  013E R                C		       	dw	offset  dummy    	; 17 AMouse 
 0024  013E R                C		       	dw	offset  dummy    	; 18 
 0026  013E R                C		       	dw	offset  dummy    	; 19 
 0028  013E R                C		       	dw	offset  dummy    	; 20 
 002A  013E R                C		       	dw	offset  dummy    	; 21 
 002C  013E R                C		       	dw	offset  dummy    	; 22 
 002E  013E R                C		       	dw	offset  dummy    	; 23 
 0030  013E R                C		       	dw	offset  dummy    	; 24 
 0032  013E R                C		       	dw	offset  dummy    	; 25 
 0034  013E R                C		       	dw	offset  dummy    	; 26 
 0036  013E R                C		       	dw	offset  dummy    	; 27 
 0038  013E R                C		       	dw	offset  dummy    	; 28 
 003A  013E R                C		       	dw	offset  dummy    	; 29 
 003C  013E R                C		       	dw	offset  dummy    	; 30 
 003E  013E R                C		       	dw	offset  dummy    	; 31 
 0040  013E R                C		       	dw	offset  dummy    	; 32 
			     C	;			 
			     C	;------------------------------------------------------------------------------ 
			     C	 
				 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-3


				include        janus\janusvar.inc 
			     C	;************************************************************************* 
			     C	; (PC side file) 
			     C	; 
			     C	; janusvar.inc -- the software data structures for the janus board 
			     C	; 
			     C	; Copyright (c) 1986, Commodore Amiga Inc.,  All rights reserved. 
			     C	; 
			     C	; Date       Name 
			     C	; --------   -------------	--------------------------------------------- 
			     C	; 07-15-88 - Bill Koester  - Modified for self inclusion of required files 
			     C	; 07-26-88 - Bill Koester  - Added ja_Reserved to JanusAmiga 
			     C	;                            Added ja_AmigaState, ja_PCState and related 
			     C	; 10-05-88 - Bill Koester  - Added Rev/Ver fields to JanusAmiga struc				
										flags to JanusAmiga 
			     C	; 10-06-88 - Bill Koester  - Added HandlerLoaded field to Janus Amiga 
			     C	;************************************************************************* 
			     C	 
			     C	;NOTE Needs Memory.inc 
			     C	 
			     C	; all bytes described here are described in the byte order of the 8088. 
			     C	; Note that words and longwords in these structures will be accessed from 
			     C	; the word access space to preserve the byte order in a word -- the 8088 
			     C	; will access longwords by reversing the words : like a 68000 access to the 
			     C	; word access memory 
			     C	 
			     C	JanusAmiga  struc 
			     C	 
 0000  00                    C	   ja_Lock           db 0        ; also used to handshake at 8088 reset 
 0001  00                    C	   ja_8088Go         db 0        ; unlocked to signal 8088 to initialize 
			     C	;------------------------------- JanusMemHead of ParamMem 
 0002  00                    C	   jpm_Lock          db 0 
 0003  00                    C	   jpm_pad0          db 0 
 0004  00000000              C	   jpm_68000Base     dd 0 
 0008  0000                  C	   jpm_8088Segment   dw 0 
 000A  0000                  C	   jpm_First         dw 0 
 000C  0000                  C	   jpm_Max           dw 0 
 000E  0000                  C	   jpm_Free          dw 0 
			     C	;------------------------------- JanusMemHead of BufferMem 
 0010  00                    C	   jbm_Lock          db 0 
 0011  00                    C	   jbm_pad0          db 0 
 0012  00000000              C	   jbm_68000Base     dd 0 
 0016  0000                  C	   jbm_8088Segment   dw 0 
 0018  0000                  C	   jbm_First         dw 0 
 001A  0000                  C	   jbm_Max           dw 0 
 001C  0000                  C	   jbm_Free          dw 0 
			     C	;------------------------------- 
 001E  0000                  C	   ja_Interrupts     dw 0 
 0020  0000                  C	   ja_Parameters     dw 0 
 0022  0000                  C	   ja_NumInterrupts  dw 0 
			     C	 
			     C	   ; This field is used by Janus.library to communicate Amiga states 
			     C	   ; to the PC. The bits of this field may be read by anyone, but 
			     C	   ; may be written only by janus.library. 
			     C	    
 0024  0000                  C	   ja_AmigaState	dw 0 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-4


			     C	   ; This field is used by the PC to communicate PC states 
			     C	   ; to the Amiga. The bits of this field may be read by anyone, but 
			     C	   ; may be written only by the PC operating system. 
			     C	    
 0026  0000                  C	   ja_PCState	dw 0 
			     C	 
			     C	   ; These fields are set by janus.library and the PC Janus handler so 
			     C	   ; they can read each others version numbers. 
			     C	   ; 
 0028  0000                  C	   ja_JLibRev		dw	0 
 002A  0000                  C	   ja_JLibVer		dw	0 
 002C  0000                  C	   ja_JHandlerRev	dw	0 
 002E  0000                  C	   ja_JHandlerVer	dw	0 
			     C	 
			     C	   ; This field is zero before the PC is running and is set to nonzero 
			     C	   ; when the PC's JanusHandler has finished initializing. 
			     C	   ; 
 0030  0000                  C	   ja_HandlerLoaded	dw	0 
			     C	    
 0032  0004[                 C	   ja_Reserved dd 4 dup (0) 
	   00000000          C	
			 ]   C	
			     C	
			     C	 
 0042                        C	JanusAmiga  ends 
			     C	 
			     C	; === AmigaState Definitions ===  
 = FFFE                      C	AMIGASTATE_RESERVED	= 0FFFEh 
 = 0001                      C	AMIGA_NUMLOCK_SET	= 0001h 
 = 0000                      C	AMIGA_NUMLOCK_SETn      = 0 
 = 0002                      C	AMIGA_NUMLOCK_RESET     = 0002h 
 = 0001                      C	AMIGA_NUMLOCK_RESETn    = 1 
			     C	 
			     C	; === PCState Definitions ===  
 = FFFF                      C	PCSTATE_RESERVED	= 0FFFFh 
			     C	 
			     C	 
			     C	;------ constant to set to indicate a pending software interrupt 
			     C	 
 = 007F                      C	JSETINT  	=   07fh 
			     C	 
			     C	 
				 
				include        vars_ext.inc 
			     C	;***************************************************************************** 
			     C	; 
			     C	; vars_ext.inc declares variable datas of PC janus handler as external; 
			     C	;	       these datas are defined in vars.inc	    
			     C	; 
			     C	;--- external data ----------------------------------------------------------- 
			     C	.list 
			     C	 
			     C	 
				 
				.list 
				 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-5


 0042				JanusIntHandler     proc near 
				 
 0042  FA				       cli				  ; init our own stack 
 0043  2E: 8C 16 0002 E			       mov  cs:ustack+2,ss 
 0048  2E: 89 26 0000 E			       mov  cs:ustack,sp 
 004D  2E: 8E 16 0002 E			       mov  ss,cs:sstack+2 
 0052  2E: 8B 26 0000 E			       mov  sp,cs:sstack 
					       pushall 
 0057  06                    1		push	es 
 0058  1E                    1		push	ds 
 0059  56                    1		push	si 
 005A  57                    1		push	di 
 005B  55                    1		push	bp 
 005C  52                    2		push	dx 
 005D  51                    2		push	cx 
 005E  53                    2		push	bx 
 005F  50                    2		push	ax 
 0060  FB				       sti		      
				 
 0061  0E				       push cs 
 0062  1F				       pop  ds				  ; DS = CS 
 0063  2E: A1 0000 E			       mov  ax,cs:janus_base_seg		  
 0067  8E C0				       mov  es,ax			  ; ES = para mem (=JanusAmiga) 
				 
 0069  26: 8B 36 001E			       mov  si,es:JanusAmiga.ja_Interrupts 
				 
					       endif 
				 
 006E  83 C6 11				       add  si,JanInt8*2+1		  ; points to 1st SW interrupt 
 0071  B8 0008				       mov  ax,JanInt8			  ; current interrupt # 
 0074  B9 0018				       mov  cx,MaxInt-JanInt8		  ; count of SW interrupts 
 0077  BB 0100				       mov  bx,0100h			  ; set bit8    
 007A  C7 06 0000 E 0000		       mov  word ptr int_req,0		  ; clear interrupt  
 0080  C7 06 0002 E 0000		       mov  word ptr int_req+2,0	  ; request register 
				 
 0086				checkreq:      ;----------------------------- 
 0086  F9				       stc  
 0087  26: D0 14			       rcl  byte ptr es:[si],1		  ; test and clear interrupt # 
 008A  72 0F				       jc   noreq			  ; no pending interrupt 
 008C  83 F9 10				       cmp  cx,16 
 008F  7E 06				       jle  ir_high_word 
 0091  09 1E 0000 E			       or   word ptr int_req,bx 	  ; set correspondent bit  
 0095  EB 04				       jmp  short ir_low_word		  ;	in int_req_low  
 0097				ir_high_word: 
 0097  09 1E 0002 E			       or   word ptr int_req+2,bx	  ; set correspondent bit 
										  ;	in int_req_high 
 009B				ir_low_word: 
					       endif 
 009B				noreq: 
 009B  40				       inc  ax				  ; increment counter 
 009C  D1 C3				       rol  bx,1			  ; shift pattern 
 009E  83 C6 02				       add  si,2			  ; increment pointer 
 00A1  E2 E3				       loop checkreq 
				 
 00A3				int_req_enable: ;---------------------------	  ; any enabled interrupt ? 
 00A3  8B 1E 0000 E			       mov  bx,word ptr int_enable 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-6


 00A7  21 1E 0000 E			       and  word ptr int_req,bx 
 00AB  8B 1E 0000 E			       mov  bx,word ptr int_req 
 00AF  A1 0002 E			       mov  ax,word ptr int_enable+2 
 00B2  21 06 0002 E			       and  word ptr int_req+2,ax 
 00B6  0B 1E 0002 E			       or   bx,word ptr int_req+2	  ; any enabled interrupt ? 
 00BA  75 03				       jne  exec_int 
				 
					       endif 
				    
 00BC  EB 4A 90				       jmp  done 
				 
 00BF				exec_int:      ;-----------------------------	  : ES = parameter area 
 00BF  26: 8B 36 0020			       mov  si,es:JanusAmiga.ja_Parameters ; points to interrupt 
										  ;	      parameter table 
 00C4  A1 0000 E			       mov  ax,word ptr int_req 	  ; load ir_low 
 00C7  8B 16 0002 E			       mov  dx,word ptr int_req+2	  ; load ir_high 
 00CB  BB 0000				       mov  bx,0			  ; Interrupt service offset  
 00CE  B9 0020				       mov  cx,MaxInt			  ; Interrupt service counter 
 00D1				exec_loop: 
 00D1  83 F9 10				       cmp  cx,16 
 00D4  77 04				       ja   ei_low_word  
 00D6  D1 CA				       ror  dx,1 
 00D8  EB 02				       jmp  short ei_high_word 
 00DA				ei_low_word: 
 00DA  D1 C8				       ror  ax,1 
 00DC				ei_high_word: 
 00DC  73 25				       jnc  next_int 
 00DE  26: 8B 38			       mov  di,es:[si][bx]		  ; es:di points to current 
										  ;	  parameter block 
					       endif 
				  
 00E1  FF 97 0000 R		        call 	word ptr HandlerTab [bx]        ; action 
					        
 00E5  53			        push 	bx 
 00E6  D1 EB			        shr  	bx,1				; service # in BX 
 00E8  2E: FE 87 0000 E		        inc  	byte ptr cs:ServStatTab[bx]	; PC service installed ? 
										; also sets status to finished 
 00ED  75 13				jnz  	service_found			; yes	 
 00EF  2E: FE 8F 0000 E		        dec  	byte ptr cs:ServStatTab[bx]	; reset status 
 00F4  5B				pop 	bx 
 00F5  56				push 	si	 
 00F6  26: 8B 36 001E			mov  	si,es:JanusAmiga.ja_Interrupts 	; send interrupt acknowledge 
 00FB  26: C6 00 7F			mov  	es:byte ptr [si][bx],AckInt   	; message to AMIGA 
 00FF  5E				pop  	si 
 0100  EB 01				jmp	short next_int 
 0102				service_found: 
 0102  5B				pop	bx 
 0103				next_int: 
 0103  83 C3 02				       add  bx,2			  ; next offset 
 0106  E2 C9				       loop exec_loop			  ; next interrupt service 
 0108				done: 
 0108  FA				       cli				  ; free our own stack 
					       popall 
 0109  58                    2		pop	ax 
 010A  5B                    2		pop	bx 
 010B  59                    2		pop	cx 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-7


 010C  5A                    2		pop	dx 
 010D  5D                    1		pop	bp 
 010E  5F                    1		pop	di 
 010F  5E                    1		pop	si 
 0110  1F                    1		pop	ds 
 0111  07                    1		pop	es 
 0112  2E: 8E 16 0002 E			       mov  ss,cs:ustack+2 
 0117  2E: 8B 26 0000 E			       mov  sp,cs:ustack 
 011C  FB				       sti		      
 011D  C3				       ret 
				 
 011E				JanusIntHandler     endp 
				; 
				;------------------------------------------------------------------------------ 
				; 
				; SendJanusInt:		Trigger Janus interrupt on Amiga side. 
				; 			Exspects Int# in BL. 
				; 
				;------------------------------------------------------------------------------ 
				; 
 011E				SendJanusInt	proc near 	   
				 
 011E  50				push	ax 
 011F  53				push    bx 
 0120  56				push	si 
 0121  06				push	es 
 0122  32 FF				xor	bh,bh 
 0124  D1 E3				shl	bx,1 
 0126  2E: A1 0000 E			mov	ax,cs:janus_param_seg 
 012A  8E C0				mov    	es,ax    
 012C  26: 8B 36 001E			mov	si,es:JanusAmiga.ja_Interrupts	; points to interrupt table 
 0131  26: C6 00 7F			mov	es:byte ptr [si][bx],AckInt 	; fill message for Amiga 
 0135  B0 FF			        mov  	al,0ffh					    
 0137  E6 62			        out  	StatusReg,al	     		; trigger SYSINT on Amiga side 
 0139  07			        pop	es 
 013A  5E				pop     si 
 013B  5B				pop     bx 
 013C  58				pop	ax 
 013D  C3				ret 
				 
 013E				SendJanusInt	endp 
				; 
				;------------------------------------------------------------------------------ 
				; 
				; Dummy:	Prints warning. Uninitialized should vectors point to here. 
				; 
				;------------------------------------------------------------------------------ 
				; 
 013E				Dummy	       proc near 
				 
					       endif 
				 
 013E  C3				       ret 
				 
 013F				Dummy	       endp 
				; 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Page     1-8


				;------------------------------------------------------------------------------ 
				; 
				; TestInt: counts interrupts from Amiga for HW diagnostics 
				; 
				;------------------------------------------------------------------------------ 
				; 
 013F				TestInt        proc near 
				 
					       endif 
					        
 013F  C3				       ret 
				 
 0140				TestInt        endp 
				 
				 
 0140				cseg	       ends 
				  
				end  

Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-1


Macros:

		N a m e			Lines

ICALL  . . . . . . . . . . . . .  	   2
IFLAGS . . . . . . . . . . . . .  	  13
INFO . . . . . . . . . . . . . .  	  13
INFO_AX  . . . . . . . . . . . .  	  16
INFO_AX_BX . . . . . . . . . . .  	  20
JLOCK  . . . . . . . . . . . . .  	   8
POPAC  . . . . . . . . . . . . .  	   4
POPALL . . . . . . . . . . . . .  	   6
PUSHAC . . . . . . . . . . . . .  	   4
PUSHALL  . . . . . . . . . . . .  	   6
UNLOCK . . . . . . . . . . . . .  	   1

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

JANUSAMIGA . . . . . . . . . . .  	0042	001B
  JA_LOCK  . . . . . . . . . . .  	0000
  JA_8088GO  . . . . . . . . . .  	0001
  JPM_LOCK . . . . . . . . . . .  	0002
  JPM_PAD0 . . . . . . . . . . .  	0003
  JPM_68000BASE  . . . . . . . .  	0004
  JPM_8088SEGMENT  . . . . . . .  	0008
  JPM_FIRST  . . . . . . . . . .  	000A
  JPM_MAX  . . . . . . . . . . .  	000C
  JPM_FREE . . . . . . . . . . .  	000E
  JBM_LOCK . . . . . . . . . . .  	0010
  JBM_PAD0 . . . . . . . . . . .  	0011
  JBM_68000BASE  . . . . . . . .  	0012
  JBM_8088SEGMENT  . . . . . . .  	0016
  JBM_FIRST  . . . . . . . . . .  	0018
  JBM_MAX  . . . . . . . . . . .  	001A
  JBM_FREE . . . . . . . . . . .  	001C
  JA_INTERRUPTS  . . . . . . . .  	001E
  JA_PARAMETERS  . . . . . . . .  	0020
  JA_NUMINTERRUPTS . . . . . . .  	0022
  JA_AMIGASTATE  . . . . . . . .  	0024
  JA_PCSTATE . . . . . . . . . .  	0026
  JA_JLIBREV . . . . . . . . . .  	0028
  JA_JLIBVER . . . . . . . . . .  	002A
  JA_JHANDLERREV . . . . . . . .  	002C
  JA_JHANDLERVER . . . . . . . .  	002E
  JA_HANDLERLOADED . . . . . . .  	0030
  JA_RESERVED  . . . . . . . . .  	0032
STACKFRAME . . . . . . . . . . .  	0012	0009
  REGAX  . . . . . . . . . . . .  	0000
  REGBX  . . . . . . . . . . . .  	0002
  REGCX  . . . . . . . . . . . .  	0004
  REGDX  . . . . . . . . . . . .  	0006
  REGBP  . . . . . . . . . . . .  	0008
  REGDI  . . . . . . . . . . . .  	000A
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-2


  REGSI  . . . . . . . . . . . .  	000C
  REGDS  . . . . . . . . . . . .  	000E
  REGES  . . . . . . . . . . . .  	0010

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CSEG . . . . . . . . . . . . . .  	0140	PARA	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

ACKINT . . . . . . . . . . . . .  	NUMBER	007F	
ACTIVEFLAG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
ALLOCPARAM . . . . . . . . . . .  	V BYTE	0000	CSEG	External
ALREADYCALLED  . . . . . . . . .  	NUMBER	0054	
AMIGA  . . . . . . . . . . . . .  	NUMBER	000A	
AMIGAADDMSG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGACALLMSG . . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGADELETEMSG . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGAINT . . . . . . . . . . . .  	NUMBER	0004	
AMIGASTATE_RESERVED  . . . . . .  	NUMBER	FFFE	
AMIGA_NUMLOCK_RESET  . . . . . .  	NUMBER	0002	
AMIGA_NUMLOCK_RESETN . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SET  . . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SETN . . . . . . .  	NUMBER	0000	

BASEMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
BELL . . . . . . . . . . . . . .  	NUMBER	0007	
BIOS_INT10 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT13 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT16 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT1C . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BOOT_INT . . . . . . . . . . . .  	NUMBER	0019	
BS . . . . . . . . . . . . . . .  	NUMBER	0008	
BUFFERMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External

CALLAMIGASERVICE . . . . . . . .  	V BYTE	0000	CSEG	External
CALLEDFIRST  . . . . . . . . . .  	NUMBER	0042	
CHAIN_VEC  . . . . . . . . . . .  	V DWORD	0000	CSEG	External
CHANNELMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
CHECKREQ . . . . . . . . . . . .  	L NEAR	0086	CSEG
CR . . . . . . . . . . . . . . .  	NUMBER	000D	

DBG_ALLOCPARAM . . . . . . . . .  	NUMBER	0000	
DBG_AMIGAADDMSG  . . . . . . . .  	NUMBER	0000	
DBG_AMIGACALLMSG . . . . . . . .  	NUMBER	0000	
DBG_AMIGADELETEMSG . . . . . . .  	NUMBER	0000	
DBG_BASEMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_BLOCKMOVE  . . . . . . . . .  	NUMBER	0000	
DBG_BUFFERMSG  . . . . . . . . .  	NUMBER	0000	
DBG_CALLAMIGASERVICE . . . . . .  	NUMBER	0000	
DBG_COPYMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_DISKMSG1 . . . . . . . . . .  	NUMBER	0000	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-3


DBG_DOSMSGA  . . . . . . . . . .  	NUMBER	0000	
DBG_DOSMSGN  . . . . . . . . . .  	NUMBER	0000	
DBG_EXEINTMES  . . . . . . . . .  	NUMBER	0000	
DBG_EXITSDMSG  . . . . . . . . .  	NUMBER	0000	
DBG_FOUNDINTMES  . . . . . . . .  	NUMBER	0000	
DBG_GOTSERVICEINT  . . . . . . .  	NUMBER	0000	
DBG_HANDLERMSG . . . . . . . . .  	NUMBER	0000	
DBG_HANDLERVERSIONMSG  . . . . .  	NUMBER	0001	
DBG_HDPART . . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGP . . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGPC  . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGR . . . . . . . . . . .  	NUMBER	0000	
DBG_IDLEMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_INITPOINTERS . . . . . . . .  	NUMBER	0000	
DBG_INITWAITPOINTERS . . . . . .  	NUMBER	0000	
DBG_INTCTRLMES . . . . . . . . .  	NUMBER	0000	
DBG_INTSMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_INTTBLMES  . . . . . . . . .  	NUMBER	0000	
DBG_JPARTBASE  . . . . . . . . .  	NUMBER	0000	
DBG_LIBVERSIONMSG  . . . . . . .  	NUMBER	0001	
DBG_LOADMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_MAKESERVICE  . . . . . . . .  	NUMBER	0000	
DBG_MEMCHUNK . . . . . . . . . .  	NUMBER	0000	
DBG_NEXTSLOTMSG  . . . . . . . .  	NUMBER	0000	
DBG_NOBASEMSG  . . . . . . . . .  	NUMBER	0001	
DBG_NOINTMES . . . . . . . . . .  	NUMBER	0000	
DBG_NOSERVICEBASEMSG . . . . . .  	NUMBER	0001	
DBG_PARASMSG . . . . . . . . . .  	NUMBER	0000	
DBG_PASTLOCK . . . . . . . . . .  	NUMBER	0000	
DBG_PRELOCK  . . . . . . . . . .  	NUMBER	0000	
DBG_REGMSG . . . . . . . . . . .  	NUMBER	0000	
DBG_REMOVEMSG  . . . . . . . . .  	NUMBER	0000	
DBG_SCROLL . . . . . . . . . . .  	NUMBER	0000	
DBG_SERVICEADDED . . . . . . . .  	NUMBER	0000	
DBG_SERVICEAVAILABLE . . . . . .  	NUMBER	0000	
DBG_SERVICEDELETED . . . . . . .  	NUMBER	0000	
DBG_SERVICESEARCH  . . . . . . .  	NUMBER	0000	
DBG_UCOUNTMSG  . . . . . . . . .  	NUMBER	0000	
DBG_UPDATEMSG  . . . . . . . . .  	NUMBER	0000	
DBG_WAITSTATUS . . . . . . . . .  	NUMBER	0000	
DBG_WRONGVERSIONMSG  . . . . . .  	NUMBER	0001	
DISKMSG1 . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DISK_INT . . . . . . . . . . . .  	NUMBER	0013	
DONE . . . . . . . . . . . . . .  	L NEAR	0108	CSEG
DOS  . . . . . . . . . . . . . .  	NUMBER	0080	
DOS12  . . . . . . . . . . . . .  	NUMBER	0001	
DOS16  . . . . . . . . . . . . .  	NUMBER	0004	
DOSINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DOSMSGA  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DOSMSGN  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DOS_INT28  . . . . . . . . . . .  	V DWORD	0000	CSEG	External
DUMMY  . . . . . . . . . . . . .  	N PROC	013E	CSEG	Global	Length = 0001
DUMMYFLAG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
D_SEG  . . . . . . . . . . . . .  	NUMBER	D000	

EI_HIGH_WORD . . . . . . . . . .  	L NEAR	00DC	CSEG
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-4


EI_LOW_WORD  . . . . . . . . . .  	L NEAR	00DA	CSEG
EOI  . . . . . . . . . . . . . .  	NUMBER	0020	
ESC_CHAR . . . . . . . . . . . .  	NUMBER	001B	
ESDI_MES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
EXEC_INT . . . . . . . . . . . .  	L NEAR	00BF	CSEG
EXEC_LOOP  . . . . . . . . . . .  	L NEAR	00D1	CSEG
EXEINTMES  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
EXITSDMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External

FAKEDOSFLAG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
FOUNDINTMES  . . . . . . . . . .  	V BYTE	0000	CSEG	External
F_SEG  . . . . . . . . . . . . .  	NUMBER	F000	

GOTSERVICEINT  . . . . . . . . .  	V BYTE	0000	CSEG	External

HANDLERMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HANDLERPTR . . . . . . . . . . .  	V DWORD	0000	CSEG	External
HANDLERTAB . . . . . . . . . . .  	L WORD	0000	CSEG
HANDLERVERSIONMSG  . . . . . . .  	V BYTE	0000	CSEG	External
HWMSGP . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HWMSGPC  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HWMSGR . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External

IDLE . . . . . . . . . . . . . .  	NUMBER	0000	
IDLEDOS  . . . . . . . . . . . .  	NUMBER	0010	
IDLEMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
IDLE_INT . . . . . . . . . . . .  	NUMBER	0028	
INFOLEVEL  . . . . . . . . . . .  	NUMBER	000A	
INITPOINTERS . . . . . . . . . .  	V BYTE	0000	CSEG	External
INITWAITPOINTERS . . . . . . . .  	V BYTE	0000	CSEG	External
INT86  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INTCOUNT . . . . . . . . . . . .  	V WORD	0000	CSEG	External
INTCTRLMES . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INTEN_REG  . . . . . . . . . . .  	NUMBER	0379	
INTSMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INTTBLMES  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INT_ACTIVE . . . . . . . . . . .  	NUMBER	0001	
INT_ENABLE . . . . . . . . . . .  	V DWORD	0000	CSEG	External
INT_REQ  . . . . . . . . . . . .  	V DWORD	0000	CSEG	External
INT_REQ_ENABLE . . . . . . . . .  	L NEAR	00A3	CSEG
IRQ3EN . . . . . . . . . . . . .  	NUMBER	FFF7	
IRQ3RESET  . . . . . . . . . . .  	NUMBER	03B0	
IR_HIGH_WORD . . . . . . . . . .  	L NEAR	0097	CSEG
IR_LOW_WORD  . . . . . . . . . .  	L NEAR	009B	CSEG

JANINT8  . . . . . . . . . . . .  	NUMBER	0008	
JANPCINT . . . . . . . . . . . .  	NUMBER	0040	
JANUS  . . . . . . . . . . . . .  	NUMBER	0040	
JANUSINTHANDLER  . . . . . . . .  	N PROC	0042	CSEG	Global	Length = 00DC
JANUS_BASE_SEG . . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_BUFFER_SEG . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_DISK_IO  . . . . . . . . .  	L NEAR	0000	CSEG	External
JANUS_PARAM_SEG  . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_PART_BASE  . . . . . . . .  	V WORD	0000	CSEG	External
JSETINT  . . . . . . . . . . . .  	NUMBER	007F	

Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-5


KEYB_INT . . . . . . . . . . . .  	NUMBER	0016	

LF . . . . . . . . . . . . . . .  	NUMBER	000A	
LIBVERSIONMSG  . . . . . . . . .  	V BYTE	0000	CSEG	External
LOADERRMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External

MAKESERVICE  . . . . . . . . . .  	V BYTE	0000	CSEG	External
MAXINT . . . . . . . . . . . . .  	NUMBER	0020	
MEMCHUNK . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
MEMLOCK  . . . . . . . . . . . .  	NUMBER	00FF	
MEMRW  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MEMUNLOCK  . . . . . . . . . . .  	NUMBER	007F	

NEWLINE  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NEXTSLOTMSG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
NEXT_INT . . . . . . . . . . . .  	L NEAR	0103	CSEG
NOBASEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NODRIVEMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOHANMES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOINTMES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOPARTMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOREQ  . . . . . . . . . . . . .  	L NEAR	009B	CSEG
NOSERVICEBASEMSG . . . . . . . .  	V BYTE	0000	CSEG	External
NULL . . . . . . . . . . . . . .  	NUMBER	0000	

OUTHXW . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTUNS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

PARASMSG . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
PCSTATE_RESERVED . . . . . . . .  	NUMBER	FFFF	
PIC_00 . . . . . . . . . . . . .  	NUMBER	0020	
PIC_01 . . . . . . . . . . . . .  	NUMBER	0021	
PSTRNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

REGMSG . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
REMOVEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External

SCROLL . . . . . . . . . . . . .  	NUMBER	0000	
SCROLLFLAG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
SCROLLING  . . . . . . . . . . .  	NUMBER	0006	
SENDJANUSINT . . . . . . . . . .  	N PROC	011E	CSEG	Global	Length = 0020
SERIAL . . . . . . . . . . . . .  	NUMBER	0000	
SERIAL_INT . . . . . . . . . . .  	NUMBER	0014	
SERVICEADDED . . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEAVAILABLE . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEDELETED . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEDISPATCH  . . . . . . . .  	L NEAR	0000	CSEG	External
SERVICESEARCH  . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICE_FOUND  . . . . . . . . .  	L NEAR	0102	CSEG
SERVSTATTAB  . . . . . . . . . .  	V BYTE	0000	CSEG	External
SIGNALCUSTOMER . . . . . . . . .  	NUMBER	0055	
SPACE  . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
SRV_INT  . . . . . . . . . . . .  	NUMBER	000B	
SSTACK . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
STACKLENGTH  . . . . . . . . . .  	NUMBER	4000	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:36:05
JI_HAN  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc.   Symbols-6


STATUSREG  . . . . . . . . . . .  	NUMBER	0062	
STOPSCROLL . . . . . . . . . . .  	NUMBER	00FF	

TESTINT  . . . . . . . . . . . .  	N PROC	013F	CSEG	Global	Length = 0001
TESTINTMES . . . . . . . . . . .  	V BYTE	0000	CSEG	External
TICKS  . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
TIME_INT . . . . . . . . . . . .  	NUMBER	001C	

UCOUNTMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
UPDATEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
UPDATERATE . . . . . . . . . . .  	NUMBER	0BB8	
USTACK . . . . . . . . . . . . .  	V WORD	0000	CSEG	External

VIDEO  . . . . . . . . . . . . .  	NUMBER	0001	
VIDEO_INT  . . . . . . . . . . .  	NUMBER	0010	

WAITFLAG . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
WAITSTATUS . . . . . . . . . . .  	V BYTE	0000	CSEG	External
WAIT_FREE_LOOP . . . . . . . . .  	NUMBER	0064	
WRITE_TTY  . . . . . . . . . . .  	NUMBER	000E	
WRONGVERSIONMSG  . . . . . . . .  	V BYTE	0000	CSEG	External

@FILENAME  . . . . . . . . . . .  	TEXT  JI_HAN		


    905 Source  Lines
    932 Total   Lines
    267 Symbols

  48046 + 197682 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
