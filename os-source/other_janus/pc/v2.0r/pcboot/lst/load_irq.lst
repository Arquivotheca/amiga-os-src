Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-1


				TITLE	LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 
				Commodore Amiga Inc.  
				PAGE	60,132	 
				;**************************************************************************** 
				; Function: 
				; 
				; LoadIRQ3 loads and installs IRQ3SER  
				; --------		    
				;			      
				;	   - will be loaded from AMIGA into janus buffer memory 
				;	   - will be found and executed during BIOS rom search  
				;	   ( - downloads IRQ3SER into PC memory ) 
				;	   ( - adjusts MEMSIZE			) 
				;	   - adjusts BIOS interrupt pointer to IRQ3SER 
				; 
				;  
				; New code :  	28-feb-86  TB 
				; Update   :  	18-dec-86  TB  	2.16	Release  
				; Update   :  	12-jan-87  TB  	2.17	  
				; Update   :  	18-feb-87  TB  	2.18	Janus service for PC 
				; Update   :	23-feb-87  TB  	2.19	add AT segments	       
				; Update   :	21-may-87  TB  	2.22	add AT segments	automatically		 
				; Update   :	 4-nov-87  TB  	2.23	update PIC automatically with INT1C		 
				; Update   :	16-nov-87  TB  	2.24	update PIC automatically with INT16		 
				; Update   :	17-nov-87  TB  	2.25	remap INT28 after DOS boot		 
				; 
				; Update   :	 8-feb-88  TB  	2.40	Fast scroll feature implemented	 
				; Update   :	 8-mar-88  TB  	2.41	Allocate Mem feature implemented	 
				; Update   :	10-mar-88  TB  	2.41L	2.41, but using LOCK prefix 
				; Update   :	24-mar-88  TB   2.42    Enable JanusInts before boot 			 
				; Update   :	29-mar-88  TB   2.43    Auto segment load, 12k length 			 
				; Update   :	30-mar-88  TB   2.44    Call services 
				; Update   :	 2-apr-88  TB   2.45    2.generation of services 
				; Update   :	10-apr-88  TB   2.46    change structures according to RJ 
				; Update   :	14-apr-88  TB   2.47    change memory locking, add serviceses 
				; Update   :	26-apr-88  TB   2.48    late minute bug fixing 
				; Update   :	26-apr-88  TB   2.49    forget channeling 
				; Released :	28-apr-88  Version 2.49 released as V2.0 Alpha 1.0 
				; 
				; Update   :	16-jun-88  TB   2.51    fix `waiting for service' function 
				; Update   :	21-jun-88  TB   2.52    fix wrong segment in autoboot 
				; Update   :	23-jun-88  TB   2.53	cleanup and fix service 14 
				; Update   :	24-jun-88  TB   2.54	use new set of include files 
				; Update   :    28-jun-88  TB   2.55	add service 15,16 
				; Released :  	15-jul-88  Version 2.55 released as V2.0 Beta 0.3 
				; Update   :    18-jul-88  TB   2.56	add flags, init pad and semaphores 
				; Update   :    20-jul-88  TB   2.57	fix DOS 3.3 boot on AT, range check 
				; Update   :   	21-jul-88  TB	2.58	RJ fixed UserCount 
				; Update   :   	25-jul-88  TB	2.59	add Amiga/PC UserCount, fix service 12 
				; Update   :   	27-jul-88  TB	2.60	fixed Seg/Off order of PCMemPtr	and 
				;					 init AmigaMemPtr in service 10 
				; Released :	27-jul-88  Version 2.60 released as V2.0 Beta 1.0 
				; 
				; Update   :   	29-seb-88  TB	2.61	implement version check, structure 
				;					change, set HandlerLoaded flag 
				; Update   :   	 6-oct-88  TB	2.63	implement PCWait flag 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-2


				; 
				;**************************************************************************** 
				 
 0000				cseg	segment para public 'code' 
				assume 	cs:cseg,ds:cseg		  
				   
 =				w	       equ    word ptr 
				 
				extrn	       JanInt:near		     	; janus interupt entry 
				extrn	       DosInt:near		     	; dos entry 
				extrn	       UpdateInt:near		     	; DOS keyboard check entry 
				extrn	       Scroll_INT:near		     	; Scroll entry 
				extrn	       Bill13:near		     	; autoboot disk I/O handler 
				extrn          Bill19:near		     	; autoboot boot handler			 
				extrn	       JanIntEn:near		     	; enable Janus interrupts 
				extrn	       InitServicePtr:near	     	; init Service structures		 
				extrn	       CallAmiga:near	     		; Call Amiga Service		 
				extrn	       hdpart:near		     	; init partition structure 
				extrn 	       FakeDosFlag:byte				 
				; 
				; external utilities 
				; 
				extrn	       change_int:near		     	; replace interrupt vector 
				extrn	       outhxw:near		     	; prints hex word in ax 
				extrn	       outhxb:near		     	; prints hex byte in al 
				extrn	       outint:near		     	; prints integer in ax 
				extrn	       outuns:near		     	; print unsigned integer in ax 
				extrn	       outchr:near		     	; prints ascii char in al 
				extrn	       newline:near		     	; prints cr,lf 
				extrn	       pstrng:near		     	; prints out string 
				 
				 
				include        janus\janusvar.inc	     	; janus data structures 
			     C	;************************************************************************* 
			     C	; (PC side file) 
			     C	; 
			     C	; janusvar.inc -- the software data structures for the janus board 
			     C	; 
			     C	; Copyright (c) 1986, Commodore Amiga Inc.,  All rights reserved. 
			     C	; 
			     C	; Date       Name 
			     C	; --------   -------------	--------------------------------------------- 
			     C	; 07-15-88 - Bill Koester  - Modified for self inclusion of required files 
			     C	; 07-26-88 - Bill Koester  - Added ja_Reserved to JanusAmiga 
			     C	;                            Added ja_AmigaState, ja_PCState and related 
			     C	; 10-05-88 - Bill Koester  - Added Rev/Ver fields to JanusAmiga struc				
										flags to JanusAmiga 
			     C	; 10-06-88 - Bill Koester  - Added HandlerLoaded field to Janus Amiga 
			     C	;************************************************************************* 
			     C	 
			     C	;NOTE Needs Memory.inc 
			     C	 
			     C	; all bytes described here are described in the byte order of the 8088. 
			     C	; Note that words and longwords in these structures will be accessed from 
			     C	; the word access space to preserve the byte order in a word -- the 8088 
			     C	; will access longwords by reversing the words : like a 68000 access to the 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-3


			     C	; word access memory 
			     C	 
			     C	JanusAmiga  struc 
			     C	 
 0000  00                    C	   ja_Lock           db 0        ; also used to handshake at 8088 reset 
 0001  00                    C	   ja_8088Go         db 0        ; unlocked to signal 8088 to initialize 
			     C	;------------------------------- JanusMemHead of ParamMem 
 0002  00                    C	   jpm_Lock          db 0 
 0003  00                    C	   jpm_pad0          db 0 
 0004  00000000              C	   jpm_68000Base     dd 0 
 0008  0000                  C	   jpm_8088Segment   dw 0 
 000A  0000                  C	   jpm_First         dw 0 
 000C  0000                  C	   jpm_Max           dw 0 
 000E  0000                  C	   jpm_Free          dw 0 
			     C	;------------------------------- JanusMemHead of BufferMem 
 0010  00                    C	   jbm_Lock          db 0 
 0011  00                    C	   jbm_pad0          db 0 
 0012  00000000              C	   jbm_68000Base     dd 0 
 0016  0000                  C	   jbm_8088Segment   dw 0 
 0018  0000                  C	   jbm_First         dw 0 
 001A  0000                  C	   jbm_Max           dw 0 
 001C  0000                  C	   jbm_Free          dw 0 
			     C	;------------------------------- 
 001E  0000                  C	   ja_Interrupts     dw 0 
 0020  0000                  C	   ja_Parameters     dw 0 
 0022  0000                  C	   ja_NumInterrupts  dw 0 
			     C	 
			     C	   ; This field is used by Janus.library to communicate Amiga states 
			     C	   ; to the PC. The bits of this field may be read by anyone, but 
			     C	   ; may be written only by janus.library. 
			     C	    
 0024  0000                  C	   ja_AmigaState	dw 0 
			     C	   ; This field is used by the PC to communicate PC states 
			     C	   ; to the Amiga. The bits of this field may be read by anyone, but 
			     C	   ; may be written only by the PC operating system. 
			     C	    
 0026  0000                  C	   ja_PCState	dw 0 
			     C	 
			     C	   ; These fields are set by janus.library and the PC Janus handler so 
			     C	   ; they can read each others version numbers. 
			     C	   ; 
 0028  0000                  C	   ja_JLibRev		dw	0 
 002A  0000                  C	   ja_JLibVer		dw	0 
 002C  0000                  C	   ja_JHandlerRev	dw	0 
 002E  0000                  C	   ja_JHandlerVer	dw	0 
			     C	 
			     C	   ; This field is zero before the PC is running and is set to nonzero 
			     C	   ; when the PC's JanusHandler has finished initializing. 
			     C	   ; 
 0030  0000                  C	   ja_HandlerLoaded	dw	0 
			     C	    
 0032  0004[                 C	   ja_Reserved dd 4 dup (0) 
	   00000000          C	
			 ]   C	
			     C	
			     C	 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-4


 0042                        C	JanusAmiga  ends 
			     C	 
			     C	; === AmigaState Definitions ===  
 = FFFE                      C	AMIGASTATE_RESERVED	= 0FFFEh 
 = 0001                      C	AMIGA_NUMLOCK_SET	= 0001h 
 = 0000                      C	AMIGA_NUMLOCK_SETn      = 0 
 = 0002                      C	AMIGA_NUMLOCK_RESET     = 0002h 
 = 0001                      C	AMIGA_NUMLOCK_RESETn    = 1 
			     C	 
			     C	; === PCState Definitions ===  
 = FFFF                      C	PCSTATE_RESERVED	= 0FFFFh 
			     C	 
			     C	 
			     C	;------ constant to set to indicate a pending software interrupt 
			     C	 
 = 007F                      C	JSETINT  	=   07fh 
			     C	 
			     C	 
				 
				include	       janus\services.inc	 
			     C	;* *** services.inc ******************************************************** 
			     C	;* (PC side file) 
			     C	;* 
			     C	;* services.inc -- Service Definitions and Data Structures 
			     C	;* 
			     C	;* Copyright (c) 1986, 1987, 1988, Commodore Amiga Inc., All rights reserved 
			     C	;*  
			     C	;* HISTORY 
			     C	;* Date       name               Description 
			     C	;* ---------  -----------------  ------------------------------------------- 
			     C	;* early 86 - Burns/Katin clone - Created this file 
			     C	;* 02-22-88 - RJ Mical          - Added service data structures 
			     C	;* 07-25-88 - Bill Koester      - Added ServiceCustomer structure 
			     C	;* 07-26-88 - Bill Koester      - Added sd_PCUserCount to ServiceData 
			     C	;*                                Changed sd_UserCount to sd_AmigaUserCount 
			     C	;*                                Added sd_ReservedByte to ServiceData 
			     C	;* 10-05-88 - Bill Koester	- Added SERVICE_PCWAIT flag definitions 
			     C	;* 10-09-88 - Bill Koester      - Added PC/AMIGA_EXCLUSVIE & SERVICE_ADDED 
			     C	;*                                flag definitions. 
			     C	;*                              - Added sd_Semaphore field to ServiceData 
			     C	;* ************************************************************************* 
			     C	 
			     C	 
			     C	;* As a coding convenience, we assume a maximum of 32 handlers. 
			     C	;* People should avoid using this in their code, because we want 
			     C	;* to be able to relax this constraint in the future.  All the 
			     C	;* standard commands' syntactically support any number of interrupts, 
			     C	;* but the internals are limited to 32. 
			     C	 
			     C	 
 = 0020                      C	MAXHANDLER   =   32 
			     C	 
			     C	 
			     C	;* 
			     C	;* this is the table of hard coded services.  Other services may exist 
			     C	;* that are dynamically allocated. 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-5


			     C	;* 
			     C	 
			     C	 
			     C	;* service numbers constrained by hardware  
			     C	 
 = 0000                      C	JSERV_MINT           =      0  ; monochrome display written to 
 = 0001                      C	JSERV_GINT           =      1  ; color display written to 
 = 0002                      C	JSERV_CRT1INT        =      2  ; mono display's control registers changed 
 = 0003                      C	JSERV_CRT2INT        =      3  ; color display's control registers changed 
 = 0004                      C	JSERV_ENBKB          =      4  ; keyboard ready for next character 
 = 0005                      C	JSERV_LPT1INT        =      5  ; parallel control register 
 = 0006                      C	JSERV_COM2INT        =      6  ; serial control register 
			     C	 
			     C	;* hard coded service numbers  
			     C	 
 = 0007                      C	JSERV_PCBOOTED       =      7  ; PC is ready to service soft interrupts 
 = 0008                      C	JSERV_SCROLL         =      8  ; PC is scrolling its screen 
 = 0009                      C	JSERV_HARDDISK       =      9  ; Amiga reading PC hard disk 
 = 000A                      C	JSERV_READAMIGA      =      10 ; PC reading Amiga mem 
 = 000B                      C	JSERV_READPC         =      11 ; Amiga reading PC mem 
 = 000C                      C	JSERV_AMIGACALL      =      12 ; PC causing Amiga function call 
 = 000D                      C	JSERV_PCCALL         =      13 ; Amiga causing PC interrupt 
 = 000E                      C	JSERV_AMIGASERVICE   =      14 ; PC initiating Amiga side of a service 
 = 000F                      C	JSERV_PCSERVICE      =      15 ; Amiga initiating PC side of a service 
 = 0010                      C	JSERV_PCDISK         =      16 ; PC using AmigaDos files 
 = 0011                      C	JSERV_AMOUSE         =      17 ; AMouse Communications 
			     C	 
			     C	 
			     C	;--- JANUS PC Function calls ----------- 
			     C	; 
			     C	; This is the table of function codes. These functions allow controlling 
			     C	; of dynamically allocated services (dyn-service). 
			     C	;  
			     C	; 1.Generation:	(befor Mai'88) 
			     C	; 
 = 0000                      C	JFUNC_GETSERVICE1	=	 0	; not supported any more    	 
 = 0001                      C	JFUNC_GETBASE		=	 1	; report segments, offset of janus mem 
 = 0002                      C	JFUNC_ALLOCMEM		=	 2	; allocate janus memory 
 = 0003                      C	JFUNC_FREEMEM		=	 3	; free janus memory 
 = 0004                      C	JFUNC_SETPARAM		=	 4	; set pointer to service parameter 
 = 0005                      C	JFUNC_SETSERVICE	=	 5	; not supported any more    	 
 = 0006                      C	JFUNC_STOPSERVICE	=	 6	; not supported any more    	 
 = 0007                      C	JFUNC_CALLAMIGA		=	 7	; call service on Amiga side 
 = 0008                      C	JFUNC_WAITAMIGA		=	 8 	; wait for service becomes ready 
 = 0009                      C	JFUNC_CHECKAMIGA	=	 9	; check service status 
			     C	;					 
			     C	; 2.Generation: 
			     C	; 
 = 000A                      C	JFUNC_ADDSERVICE	=	10	; add a dyn-service  
 = 000B                      C	JFUNC_GETSERVICE	=	11	; link to a dyn-service 
 = 000C                      C	JFUNC_CALLSERVICE	=	12	; call a dyn-service 
 = 000D                      C	JFUNC_RELEASESERVICE	=	13	; unlink from a dyn-service 
 = 000E                      C	JFUNC_DELETESERVICE	=	14	; delete a dyn-service 
 = 000F                      C	JFUNC_LOCKSERVICEDATA	=	15	; lock private mem of a dyn-service 
 = 0010                      C	JFUNC_UNLOCKSERVICEDATA	=	16	; unlock private mem of a dyn-service 
			     C	 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-6


 = 0010                      C	JFUNC_MAX		=	16 	; Last function (for range check only) 
			     C	 
 = 000B                      C	JFUNC_JINT		=	0bh 
			     C	 
			     C	;* === ServiceData Structure ===============================================  
			     C	;* The ServiceData structure is used to share data among all callers of  
			     C	;* all of the Service routines.  One of these is allocated in janus memory  
			     C	;* for each service.   
			     C	 
			     C	ServiceData struc 
			     C	 
			     C	   ; The ServiceData ID numbers are used to uniquely identify 
			     C	   ; application-specific services.  There are two ID numbers: 
			     C	   ; the global ApplicationID and the application's local LocalID. 
			     C	   ; 
			     C	   ; The ApplicationID is a 32-bit number which *must* be assigned to 
			     C	   ; an application designer by Commodore-Amiga. 
			     C	   ; Once a service ApplicationID is assigned to an application 
			     C	   ; designer, that designer "owns" that ID number forever. 
			     C	   ; Note that this will provide unique ServiceData identification 
			     C	   ; numbers only for the first 4.3 billion ServiceData designers 
			     C	   ; after that, there's some risk of a collision. 
			     C	   ; 
			     C	   ; The LocalID, defined by the application designer, is a local 
			     C	   ; subcategory of the global ApplicationID.  These can mean anything 
			     C	   ; at all.  There are 65,536 of these local ID's. 
 0000  00000000              C	   sd_ApplicationID  dd 0 
 0004  0000                  C	   sd_LocalID        dw 0 
			     C	 
			     C	 
			     C	   ; The flag bits are defined below.  Some of these are set by the 
			     C	   ; application programs which use the service, and some are set 
			     C	   ; by the system. 
 0006  0000                  C	   sd_Flags    dw 0 
			     C	 
			     C	 
			     C	   ; This field is initialized by the system for you, and then  
			     C	   ; is never touched by the system again.  Users of the  
			     C	   ; service can agree by convention that they have to obtain  
			     C	   ; this lock before using the service.   
			     C	   ; If you are the AddService() caller and you want this lock  
			     C	   ; to be locked before the service is linked into the system,  
			     C	   ; set the AddService() ADDS_LOCKDATA argument flag.   
 0008  00                    C	   sd_ServiceDataLock   db 0 
			     C	 
			     C	 
			     C	   ; This tracks the number of users currently connected  
			     C	   ; to this service. 
 0009  00                    C	   sd_AmigaUserCount   db 0 
 000A  00                    C	   sd_PCUserCount      db 0 
 000B  00                    C	   sd_ReservedByte     db 0 
			     C	 
			     C	   ; These are the standard janus memory descriptions, which describe 
			     C	   ; the parameter memory associated with this service.  This memory 
			     C	   ; (if any) will be allocated automatically by the system when the 
			     C	   ; service if first added.  The creator of the service 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-7


			     C	   ; (the one who calls AddService()) supplies the MemSize and 
			     C	   ; MemType values; after the service is added the MemPtr field 
			     C	   ; will point to the parameter memory.  GetService() callers, after 
			     C	   ; the service comes available, will find all of these fields 
			     C	   ; filled in with the appropriate values. 
			     C	   ; The AmigaMemPtr and PCMemPtr both point to the same location 
			     C	   ; of Janus memory; an Amiga program should use the AmigaMemPtr, 
			     C	   ; and a PC program should use the PCMemPtr 
 000C  0000                  C	   sd_MemSize        dw 0 
 000E  0000                  C	   sd_MemType        dw 0 
 0010  0000                  C	   sd_MemOffset      dw 0 
 0012  00000000              C	   sd_AmigaMemPtr    dd 0 
 0016  00000000              C	   sd_PCMemPtr       dd 0 
			     C	 
			     C	 
			     C	   ; This offset is used as the key for calls to AllocServiceMem()  
			     C	   ; and FreeServiceMem().  This key can be used by any one  
			     C	   ; who's learned about this service via either AddService()  
			     C	   ; or GetService().  The system makes no memory allocations  
			     C	   ; using this key, so it's completely under application control. 
			     C	   ; Any memory attached to this key by calls to AllocServiceMem()  
			     C	   ; will be freed automatically after the service has been  
			     C	   ; deleted and all users of the service have released the service.   
 001A  0000                  C	   sd_JRememberKey   dw 0 
			     C	 
			     C	 
			     C	   ; These pointers are for the system-maintained lists of 
			     C	   ; structures.  If you disturb any of these pointers, you will be 
			     C	   ; tickling the guru's nose, and when the guru sneezes ... 
 001C  0000                  C	   sd_NextServiceData      dw 0 
 001E  00000000              C	   sd_FirstPCCustomer      dd 0 
 0022  00000000              C	   sd_FirstAmigaCustomer   dd 0 
			     C	 
			     C	   ; 
			     C	   ; Semaphore structure pointer for services that allow multiple customers 
			     C	   ; 
 0026  00000000              C	   sd_Semaphore 	   dd 0 
			     C	 
			     C	   ; These fields are reserved for future use  
 002A  0004[                 C	   sd_ZaphodReserved    dd 4 dup (0) 
	   00000000          C	
			 ]   C	
			     C	
			     C	 
 003A                        C	ServiceData ends 
			     C	 
			     C	 
			     C	;* === Flag Definitions ===  
			     C	 
 = 0001                      C	SERVICE_DELETED      =   00001h    ; Owner of this service deleted it 
 = 0000                      C	SERVICE_DELETEDn     =   0 
 = 0002                      C	EXPUNGE_SERVICE      =   00002h    ; Owner of service should delete 
 = 0001                      C	EXPUNGE_SERVICEn     =   1 
 = 0004                      C	SERVICE_AMIGASIDE    =   00004h    ; Set if Amiga created the service 
 = 0002                      C	SERVICE_AMIGASIDEn   =   2 
 = 0008                      C	SERVICE_PCWAIT	     =   00008h	   ; Set when PC calls a service 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-8


 = 0003                      C	SERVICE_PCWAITn      =   3	   ; Cleared when service replys 
 = 0010                      C	AMIGA_EXCLUSIVE      =   00010h    ; Only one Amiga customer allowed   
 = 0004                      C	AMIGA_EXCLUSIVEn     =   4 
 = 0020                      C	PC_EXCLUSIVE         =   00020h    ; Only one PC customer allowed      
 = 0005                      C	PC_EXCLUSIVEn        =   5 
 = 0040                      C	SERVICE_ADDED        =   00040h    ; Set when service is added         
 = 0006                      C	SERVICE_ADDEDn       =   6 
			     C	 
			     C	 
			     C	;* === ServiceCustomer Structure ===========================================  
			     C	;* A ServiceCustomer structure is created for each "customer" of a given  
			     C	;* channel 
			     C	 
			     C	ServiceCustomer	struc 
			     C	 
 0000  00000000              C		scs_NextCustomer 	dd 0 
			     C	 
 0004  0000                  C		scs_Flags		dw 0 
			     C	 
 0006  00000000              C		scs_Task			dd 0 ;This points to the task of the customer  
 000A  00000000              C		scs_SignalBit		dd 0 ;Signal the customer with this bit  
			     C	 
 000E  0004[                 C		scs_JazzReserved  	dd 4 dup (0) 
	   00000000          C	
			 ]   C	
			     C	
			     C	 
 001E                        C	ServiceCustomer	ends 
			     C	 
			     C	;* === Flag Definitions === * 
			     C	;* These flags are set/cleared by the system 
 = 0100                      C	CALL_TOPC_ONLY       =   0100h 
 = 0008                      C	CALL_TOPC_ONLYn      =   8 
 = 0200                      C	CALL_FROMPC_ONLY     =   0200h 
 = 0009                      C	CALL_FROMPC_ONLYn    =   9 
 = 0400                      C	CALL_TOAMIGA_ONLY    =   0400h 
 = 000A                      C	CALL_TOAMIGA_ONLYn   =   10 
 = 0800                      C	CALL_FROMAMIGA_ONLY  =   0800h 
 = 000B                      C	CALL_FROMAMIGA_ONLYn =   11 
			     C	 
			     C	; === AddService() Flags ================================================== 
			     C	; These are the definitions of the flag arguments that can be passed to the  
			     C	; AddService() function. 
			     C	 
 = 0001                      C	ADDS_EXCLUSIVE       = 00001h ; You want to be the *only* Amiga customer 
 = 0000                      C	ADDS_EXCLUSIVEn      = 0 
 = 0002                      C	ADDS_TOPC_ONLY       = 00002h ; You want to send signals only to the PC 
 = 0001                      C	ADDS_TOPC_ONLYn      = 1 
 = 0004                      C	ADDS_FROMPC_ONLY     = 00004h ; You want to get signals only from the PC 
 = 0002                      C	ADDS_FROMPC_ONLYn    = 2 
 = 0008                      C	ADDS_TOAMIGA_ONLY    = 00008h ; You want to send signals only to the Amiga 
 = 0003                      C	ADDS_TOAMIGA_ONLYn   = 3 
 = 0010                      C	ADDS_FROMAMIGA_ONLY  = 00010h ; You want to get signals only from the Amiga 
 = 0004                      C	ADDS_FROMAMIGA_ONLYn = 4 
 = 0020                      C	ADDS_LOCKDATA        = 00020h ; S'DataLock locked before linking to system 
 = 0005                      C	ADDS_LOCKDATAn       = 5 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-9


			     C	 
			     C	;* These are the system's AddService() Flags  
 = 0100                      C	SD_CREATED           = 00100h 
 = 0008                      C	SD_CREATEDn          = 8 
			     C	 
			     C	 
			     C	 
			     C	; === GetService() Flags ==================================================  
			     C	; These are the definitions of the flag arguments that can be passed to the  
			     C	; GetService() function. 
			     C	 
 = 0001                      C	GETS_WAIT            = 00001h ; If service not yet available, you'll wait 
 = 0000                      C	GETS_WAITn           = 0 
 = 0002                      C	GETS_TOPC_ONLY       = 00002h ; You want to send signals only to the PC 
 = 0001                      C	GETS_TOPC_ONLYn      = 1 
 = 0004                      C	GETS_FROMPC_ONLY     = 00004h ; You want to get signals only from the PC 
 = 0002                      C	GETS_FROMPC_ONLYn    = 2 
 = 0008                      C	GETS_TOAMIGA_ONLY    = 00008h ; You want to send signals only to the Amiga 
 = 0003                      C	GETS_TOAMIGA_ONLYn   = 3 
 = 0010                      C	GETS_FROMAMIGA_ONLY  = 00010h ; You want to get signals only from the Amiga 
 = 0004                      C	GETS_FROMAMIGA_ONLYn = 4 
 = 0020                      C	GETS_EXCLUSIVE       = 00020h ; You want to be the *only* Amiga customer 
 = 0005                      C	GETS_EXCLUSIVEn      = 5 
 = 0040                      C	GETS_ALOAD_A         = 00040h ; Autoload the service on the Amiga side 
 = 0006                      C	GETS_ALOAD_An        = 6 
 = 0080                      C	GETS_ALOAD_PC        = 00080h ; Autoload the service on the PC side 
 = 0007                      C	GETS_ALOAD_PCn       = 7 
			     C	 
			     C	 
			     C	 
			     C	; === Service() Result Codes ==========================================  
			     C	; These are the result codes that may be returned by a call to a Service  
			     C	; 
 =-0001                      C	JSERV_NOFUNCTION	= -1 	; Tried to call a not supported function 
 = 0000                      C	JSERV_OK         	=  0  	; All is well 
 = 0000                      C	JSERV_PENDING	 	=  0  	; Called service still pending on Amiga side 
 = 0001                      C	JSERV_FINISHED	 	=  1  	; Called service is finished on Amiga side 
 = 0002                      C	JSERV_NOJANUSBASE	=  2  	; ServiceBase structure not defined 
 = 0003                      C	JSERV_NOJANUSMEM 	=  3  	; We ran out of Janus memory 
 = 0004                      C	JSERV_NOAMIGAMEM 	=  4  	; On the Amiga side we ran out of Amiga memory 
 = 0005                      C	JSERV_NOPCMEM    	=  5  	; On the PC side we ran out of PC memory 
 = 0006                      C	JSERV_NOSERVICE  	=  6  	; Tried to get a service that doesn't exist 
 = 0007                      C	JSERV_DUPSERVICE 	=  7  	; Tried to add a service that already existed 
 = 0008                      C	JSERV_ILLFUNCTION	=  8	; Tried to call an illegal function 
 = 0009                      C	JSERV_NOTEXCLUSIVE      =  9  ; Wanted to but couldn't be exclusive user  
 = 000A                      C	JSERV_BADAUTOLOAD       =  10 ; Wanted to autoload but couldn't 
			     C	 
			     C	 
			     C	 
			     C	 
			     C	 
				 
				include        macros.inc		     	; helpfull macros 
			     C	;***************************************************************************** 
			     C	; 
			     C	; macros.inc	        
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-10


			     C	; 
			     C	;***************************************************************************** 
			     C	.list 
			     C	 
			     C	 
			     C	 
			     C	 
				 
				include        equ.inc			     	; equals 
			     C	;****************************************************************************** 
			     C	; 
			     C	; equ.inc contains equals, flag bits and register addresses  
			     C	; 
			     C	;****************************************************************************** 
			     C	.list 
			     C	 
			     C	 
			     C	 
				 
				include	       debug.inc 
			     C	;****************************************************************************** 
			     C	; 
			     C	; Debug.inc contains flag to enable debug messageses  
			     C	; 
			     C	;****************************************************************************** 
			     C	 
			     C	include		mes.inc			; includes all message offsets 
			     C	;**************************************************************************** 
			     C	; 
			     C	; mes.inc contains external messages for PC janus handler 
			     C	; 
			     C	;**************************************************************************** 
			     C	.list 
			     C	 
			     C	 
			     C	 
			     C	 
			     C	.list 
			     C	 
			     C	 
				 
				include	       abequ.inc 
			     C	;*************************************************************************** 
			     C	;* ABEqu.inc		-	Equates for AutoBoot handler 
			     C	;*************************************************************************** 
			     C					     
 = 0001                      C	AB_ACTIVATE		=      	1	;Make autoboot active 
 = 0000                      C	AB_INT13MSG		=	0	;Display parms when int13 called 
			     C	 
			     C	 
			     C	;*************************************************************************** 
			     C	;* Debug switches for Autoboot File Open routine first_time 
			     C	;*************************************************************************** 
			     C	 
 = 0000                      C	DBG_AB_FILEOPENMSG   	=	0 	;Prints return value from DoJanus 
 = 0000                      C	DBG_AB_READPARMS	=	0 	 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-11


 = 0001                      C	DBG_AB_COPENFAILMSG   	=	1 	;Error on open of autoboot control file 
 = 0001                      C	DBG_AB_OPENFAILMSG	=	1 	;Error on open of autoboot file 
 = 0000                      C	DBG_AB_FTEXITMSG	=	0 	;File opened ok, routine exits 
			     C					  	 
 = 0000                      C	DBG_AB_CNV_IN	 	=	0 	;Entry to cnv_do 
 = 0000                      C	DBG_AB_CNV_OUT		=	0 	;Exit from cnv_do  
			     C	 
				 
				include	       abdata.inc 
			     C	; 
			     C	; 
			     C	extrn	AB_Cyl:word 
			     C	extrn	AB_Head:word 
			     C	extrn	AB_Sec:word 
			     C	extrn	AB_Secs:word 
			     C	extrn	AB_SecsDone:word 
			     C	extrn	AB_bill_int13:dword 
			     C	extrn	AB_jparmseg:word 
			     C	extrn	AB_jparmoff:word 
			     C	extrn	AB_jbuffseg:word 
			     C	extrn	AB_jbuffoff:word 
			     C	extrn	AB_dataseg:word 
			     C	extrn	AB_dataoff:word 
			     C	extrn	AB_FileOpen:word 
			     C	extrn	AB_NumHeads:word 
			     C	extrn	AB_TrackSecs:word 
			     C	extrn	AB_Cyls:word 
			     C	extrn	AB_billmsg0:byte 
			     C	extrn	AB_billmsg1:byte 
			     C	extrn	AB_billmsg2:byte 
			     C	extrn	AB_billmsg3:byte 
			     C	extrn	AB_billmsg4:byte 
			     C	extrn	AB_billmsg5:byte 
			     C	extrn	AB_READPARMS:byte 
			     C	extrn	AB_COPENFAILMSG:byte 
			     C	extrn	AB_OPENFAILMSG:byte 
			     C	extrn	AB_FTEXITMSG:byte 
			     C	extrn	AB_File:word 
			     C	extrn	AB_TFile:word 
			     C	extrn	AB_FileName:byte 
			     C	extrn	AB_okflag:word 
			     C	 
			     C	 
			     C	 
				 
				 
				 
 0000					org	0000h 
 0000				entry: 
 0000  AA55			ROMlabel	dw  0aa55h		     	; rom search header 
				 
 0002  10			ROMlength      	db  16			     	; length of PC.BOOT code 
									     	;  in 512k blocks 
 0003				start	proc   	far			     	; execution starts at off 3 
				   
 0003  EB 72 90				jmp    	run      
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-12


				; 
				; 
				;------ data area for download routine ------ 
				 
 = 3000				load_length    	equ (12 * 1024)	  	     	; length of code + data in bytes 
									     	;  take 12kbyte (minimum is 1k) 
				  
 0006  20 4A 61 6E 75 73 20	romheader	db	" Janus Handler by Torsten Burgdorff ",0 
       48 61 6E 64 6C 65 72	
       20 62 79 20 54 6F 72	
       73 74 65 6E 20 42 75	
       72 67 64 6F 72 66 66	
       20 00			
 002B  20 43 6F 70 79 72 69	copymsg		db  	" Copyright (c) 1988, Commodore Amiga Inc.",0ah,0dh 
       67 68 74 20 28 63 29	
       20 31 39 38 38 2C 20	
       43 6F 6D 6D 6F 64 6F	
       72 65 20 41 6D 69 67	
       61 20 49 6E 63 2E 0A	
       0D			
 0056  20 20 20 20 20 20 20			db  	"         All rights reserved.   ",0 
       20 20 41 6C 6C 20 72	
       69 67 68 74 73 20 72	
       65 73 65 72 76 65 64	
       2E 20 20 20 00		
				 
 = 0002				JHandlerVer	=	2			; Version of Janus Handler 
 = 003F				JHandlerRev	=      63	 
 = 0021				JLibVer		=      33			; Version of Janus.Library	 
 = 0001				JLibRev		=       1			;  that is requiered  
				 
				;												  
				;-------------------------------------------- 
				; 
 0077				run:					     	; here we go 
 0077  FA				cli 
					 
					pushall			       		 
 0078  06                    1		push	es 
 0079  1E                    1		push	ds 
 007A  56                    1		push	si 
 007B  57                    1		push	di 
 007C  55                    1		push	bp 
 007D  52                    2		push	dx 
 007E  51                    2		push	cx 
 007F  53                    2		push	bx 
 0080  50                    2		push	ax 
 0081  8C C8				mov  	ax,cs			     	; setup our data segment 
 0083  8E D8				mov  	ds,ax				 
				 		 
 0085  B8 0002				mov	ax,JHandlerVer 
 0088  BB 003F				mov	bx,JHandlerRev 
					INFO_AX_BX HandlerVersionMsg		; print our version 
 008B  9C                    1		  pushf 
 008C  50                    1		  push	ax 
 008D  56                    1		  push 	si 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-13


 008E  1E                    1		  push 	ds 
 008F  0E                    1		  push 	cs 
 0090  1F                    1		  pop  	ds 
 0091  BE 0000 E             1		  mov  	si,offset HandlerVersionMsg 
 0094  E8 0000 E             1		  call 	pstrng 
 0097  E8 0000 E             1		  call 	outint 
 009A  B0 2E                 1		  mov  	al,'.' 
 009C  E8 0000 E             1		  call 	outchr 
 009F  8B C3                 1		  mov	ax,bx 
 00A1  E8 0000 E             1		  call 	outint 
 00A4  E8 0000 E             1		  call 	newline 
 00A7  1F                    1		  pop  	ds 
 00A8  5E                    1		  pop  	si 
 00A9  58                    1		  pop	ax 
 00AA  9D                    1		  popf 
					INFO	CopyMsg 
				 
 00AB  8C C8				mov	ax,cs 
					INFO_AX	LoadMsg				; print our segment  
					 
 00AD  B8 F000				mov  	ax,f_seg			; look for Janus Parameter 
 00B0  8E C0				mov  	es,ax				; segment at F000 
 00B2  26: 39 06 0008			cmp  	es:JanusAmiga.jpm_8088segment,ax 
 00B7  74 20				je   	FoundBase 
 00B9  B8 D000				mov  	ax,d_seg			; look for Janus Parameter 
 00BC  8E C0				mov  	es,ax				; segment at D000 
 00BE  26: 39 06 0008			cmp  	es:JanusAmiga.jpm_8088segment,ax 
 00C3  74 14				je   	FoundBase 
					 
					INFO	NoBaseMsg			; No Base found 
 00C5  9C                    1		  pushf 
 00C6  56                    1		  push 	si 
 00C7  1E                    1		  push 	ds 
 00C8  0E                    1		  push 	cs 
 00C9  1F                    1		  pop  	ds 
 00CA  BE 0000 E             1		  mov  	si,offset NoBaseMsg 
 00CD  E8 0000 E             1		  call 	pstrng 
 00D0  E8 0000 E             1		  call 	newline 
 00D3  1F                    1		  pop  	ds 
 00D4  5E                    1		  pop  	si 
 00D5  9D                    1		  popf 
 00D6  E9 0200 R			jmp 	NoBase 
							  	 
 00D9				FoundBase: 
 00D9  A3 0000 E			mov  	janus_base_seg,ax 
 00DC  A3 0000 E			mov  	janus_param_seg,ax 
					INFO_AX BaseMsg 
				 
 00DF  26: A1 0016			mov  	ax,es:JanusAmiga.jbm_8088segment	; autoset 
 00E3  A3 0000 E			mov  	janus_buffer_seg,ax 
					INFO_AX BufferMsg 
					   
 00E6  26: A1 001E			mov	ax,es:JanusAmiga.ja_interrupts 
					INFO_AX IntsMsg 
				 
 00EA  26: A1 0020			mov	ax,es:JanusAmiga.ja_parameters 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-14


					INFO_AX ParasMsg     
				 
 00EE  26: C7 06 002E 0002		mov	es:JanusAmiga.ja_JHandlerVer,JHandlerVer	; fill version 
 00F5  26: C7 06 002C 003F		mov	es:JanusAmiga.ja_JHandlerRev,JHandlerRev	;  fields 
					 
 00FC  26: A1 002A			mov	ax,es:JanusAmiga.ja_JLibVer	; check and print version and 
 0100  26: 8B 1E 0028			mov	bx,es:JanusAmiga.ja_JLibRev	;  revision of JANUS.LIBRARY 
					INFO_AX_BX LibVersionMsg			   
 0105  9C                    1		  pushf 
 0106  50                    1		  push	ax 
 0107  56                    1		  push 	si 
 0108  1E                    1		  push 	ds 
 0109  0E                    1		  push 	cs 
 010A  1F                    1		  pop  	ds 
 010B  BE 0000 E             1		  mov  	si,offset LibVersionMsg 
 010E  E8 0000 E             1		  call 	pstrng 
 0111  E8 0000 E             1		  call 	outint 
 0114  B0 2E                 1		  mov  	al,'.' 
 0116  E8 0000 E             1		  call 	outchr 
 0119  8B C3                 1		  mov	ax,bx 
 011B  E8 0000 E             1		  call 	outint 
 011E  E8 0000 E             1		  call 	newline 
 0121  1F                    1		  pop  	ds 
 0122  5E                    1		  pop  	si 
 0123  58                    1		  pop	ax 
 0124  9D                    1		  popf 
 0125  3D 0021				cmp	ax,JLibVer 
 0128  75 05				jne	Version_Bad 
 012A  83 FB 01				cmp	bx,JLibRev 
 012D  7D 14				jge	Version_OK 
				 
 012F				Version_Bad: 
					INFO	WrongVersionMsg			; wrong version found 
 012F  9C                    1		  pushf 
 0130  56                    1		  push 	si 
 0131  1E                    1		  push 	ds 
 0132  0E                    1		  push 	cs 
 0133  1F                    1		  pop  	ds 
 0134  BE 0000 E             1		  mov  	si,offset WrongVersionMsg 
 0137  E8 0000 E             1		  call 	pstrng 
 013A  E8 0000 E             1		  call 	newline 
 013D  1F                    1		  pop  	ds 
 013E  5E                    1		  pop  	si 
 013F  9D                    1		  popf 
 0140  E9 0200 R			jmp 	NoBase 				; -> exit 
						 
 0143				Version_OK: 
				;	cmp	cs:FakeDosFlag,AlreadyCalled   	; were we called before ? 
				;	je	NoPartRead 
				 
 0143  B4 00			 	mov  	ah,0 
 0145  CD 13				int  	disk_int		     	; reset disk system 
 0147  E8 0000 E		  	call 	newline 
 014A  E8 0000 E			call 	hdpart			     	; init partition structure 
				 
 014D				NoDiskRead:   
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-15


 014D  B8 3000				mov  	ax,load_length 
 0150  A3 0000 E			mov  	w sstack,ax		     	; init temp. stack pointer 
 0153  8C 0E 0002 E			mov  	w sstack+2,cs 
				 
 0157  0E				push 	cs 
 0158  07				pop  	es			     	; set ES to load segment 
 0159  06				push 	es			     	; and save for later 
 015A  B0 0B				mov  	al,srv_int		     	; redirect IRQ3  
 015C  BF 0000 E			mov  	di,offset JanInt  
 015F  E8 0000 E			call 	change_int 
 0162  8C 06 0002 E			mov  	w chain_vec+2,es 	     	; and save old pointer 
 0166  89 3E 0000 E			mov  	w chain_vec,di 
 016A  07				pop  	es 
					     	 
				 
				;****************************************************	 
				;Warning Caution DANGER!!! Bill code to follow! 
				;If this looks screwed up... It probably is! 
				;additions also made to abvars.inc and abdata.inc 
					if	AB_ACTIVATE 
				 
										;Test for an existing   
 016B  50				push 	ax				; hard drive 
 016C  52				push 	dx 
 016D  B4 10				mov 	ah,10h 				;test drive ready 
 016F  B2 80				mov 	dl,80h				;first hard drive 
 0171  CD 13				int	disk_int			;disk int 
 0173  5A				pop	dx 
 0174  58				pop	ax 
 0175  72 03				jc 	nodisk				;No hard drive found, 
										; so install fake 
 0177  EB 1D 90				jmp 	byebill				;Hard Card found, 
										; so forget autoboot 
				 
 017A				nodisk:	    
					 
 017A  06				push 	es				; now redirect Int13 
 017B  B0 13				mov  	al,disk_int			      
 017D  BF 0000 E			mov  	di,offset bill13 
 0180  E8 0000 E			call 	change_int 
 0183  8C 06 0002 E			mov  	w AB_bill_int13+2,es 
 0187  89 3E 0000 E			mov  	w AB_bill_int13,di 
 018B  07			 	pop  	es 
				 
 018C  06				push	es				; now redirect int 19 
 018D  B0 19				mov	al,boot_int	       
 018F  BF 0000 E			mov	di,offset bill19 
 0192  E8 0000 E			call 	change_int 
 0195  07				pop  	es 
				 
 0196				byebill:  
					endif 
				;END of Bill code (thank god!)	     
				;**************************************************** 
				; 
				 
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-16


 0196  06				push 	es 
 0197  B0 13				mov 	al,disk_int			; now redirect Int13 
 0199  BF 0000 E			mov  	di,offset DosInt 
 019C  E8 0000 E			call 	change_int 
 019F  8C 06 0002 E			mov  	w bios_int13+2,es 
 01A3  89 3E 0000 E			mov  	w bios_int13,di 
 01A7  07			 	pop  	es 
				 
				        endif        
				 
 01A8  C7 06 0000 E 0064		mov  	ticks,100			; init keyboard ticks counter 
 01AE  06				push	es 
 01AF  B0 16				mov	al,keyb_int		      	; now redirect Int16 
 01B1  BF 0000 E			mov	di,offset UpdateInt 
 01B4  E8 0000 E			call	change_int 
 01B7  8C 06 0002 E			mov	w BIOS_int16+2,es 
 01BB  89 3E 0000 E			mov	w BIOS_int16,di 
 01BF  07				pop  	es 
					 
 01C0  A1 0000 E			mov 	ax,janus_param_seg	 	  
 01C3  8E C0				mov 	es,ax			     	 
 01C5  26: C6 06 0000 7F		mov	es:JanusAmiga.ja_Lock,MemUnLock	; init main semaphore 
 01CB  26: C6 06 0001 00		mov	es:JanusAmiga.ja_8088Go,0	; clear pad 
					 
 01D1  E8 0000 E			call	InitServicePtr			  
 01D4  0A C0				or	al,al 
 01D6  74 11				jz	ServiceGoes 
					INFO	NoServiceBaseMsg		; No Base found 
 01D8  9C                    1		  pushf 
 01D9  56                    1		  push 	si 
 01DA  1E                    1		  push 	ds 
 01DB  0E                    1		  push 	cs 
 01DC  1F                    1		  pop  	ds 
 01DD  BE 0000 E             1		  mov  	si,offset NoServiceBaseMsg 
 01E0  E8 0000 E             1		  call 	pstrng 
 01E3  E8 0000 E             1		  call 	newline 
 01E6  1F                    1		  pop  	ds 
 01E7  5E                    1		  pop  	si 
 01E8  9D                    1		  popf 
				 
 01E9				ServiceGoes:	 
 01E9  50				push 	ax  				 
 01EA  E4 21				in   	al,pic_01		     	; enable IRQ3   
 01EC  24 F7				and  	al,irq3en 
 01EE  E6 21				out  	pic_01,al 
 01F0  58				pop  	ax 
				 
 01F1  C6 06 0000 E 00			mov  	FakeDosFlag,0	     		; reset flag 
 01F6  E8 0000 E			call 	JanIntEn      			; enable Janus interrupts 
					 
				;	mov	al,JSERV_PCBOOTED 		; tell Amiga: now we are ready 
				;	call	CallAmiga			;  to handle services  
				 
					endif 
				 
 01F9  26: C7 06 0030 5442		mov  	es:JanusAmiga.ja_HandlerLoaded,'TB' 	; set "here I am"  
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Page     1-17


											;  to DJMOUNT 
 0200				NoBase: 
					popall 
 0200  58                    2		pop	ax 
 0201  5B                    2		pop	bx 
 0202  59                    2		pop	cx 
 0203  5A                    2		pop	dx 
 0204  5D                    1		pop	bp 
 0205  5F                    1		pop	di 
 0206  5E                    1		pop	si 
 0207  1F                    1		pop	ds 
 0208  07                    1		pop	es 
 0209  CB				ret				     	; back to BIOS power up 
					 
 020A				start	endp 
				 
				;--------------------------------------------			        
 020A				cseg	ends 
				 
					end  entry 

Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-1


Macros:

		N a m e			Lines

ICALL  . . . . . . . . . . . . .  	   2
IFLAGS . . . . . . . . . . . . .  	  13
INFO . . . . . . . . . . . . . .  	  13
INFO_AX  . . . . . . . . . . . .  	  16
INFO_AX_BX . . . . . . . . . . .  	  20
JLOCK  . . . . . . . . . . . . .  	   8
POPAC  . . . . . . . . . . . . .  	   4
POPALL . . . . . . . . . . . . .  	   6
PUSHAC . . . . . . . . . . . . .  	   4
PUSHALL  . . . . . . . . . . . .  	   6
UNLOCK . . . . . . . . . . . . .  	   1

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

JANUSAMIGA . . . . . . . . . . .  	0042	001B
  JA_LOCK  . . . . . . . . . . .  	0000
  JA_8088GO  . . . . . . . . . .  	0001
  JPM_LOCK . . . . . . . . . . .  	0002
  JPM_PAD0 . . . . . . . . . . .  	0003
  JPM_68000BASE  . . . . . . . .  	0004
  JPM_8088SEGMENT  . . . . . . .  	0008
  JPM_FIRST  . . . . . . . . . .  	000A
  JPM_MAX  . . . . . . . . . . .  	000C
  JPM_FREE . . . . . . . . . . .  	000E
  JBM_LOCK . . . . . . . . . . .  	0010
  JBM_PAD0 . . . . . . . . . . .  	0011
  JBM_68000BASE  . . . . . . . .  	0012
  JBM_8088SEGMENT  . . . . . . .  	0016
  JBM_FIRST  . . . . . . . . . .  	0018
  JBM_MAX  . . . . . . . . . . .  	001A
  JBM_FREE . . . . . . . . . . .  	001C
  JA_INTERRUPTS  . . . . . . . .  	001E
  JA_PARAMETERS  . . . . . . . .  	0020
  JA_NUMINTERRUPTS . . . . . . .  	0022
  JA_AMIGASTATE  . . . . . . . .  	0024
  JA_PCSTATE . . . . . . . . . .  	0026
  JA_JLIBREV . . . . . . . . . .  	0028
  JA_JLIBVER . . . . . . . . . .  	002A
  JA_JHANDLERREV . . . . . . . .  	002C
  JA_JHANDLERVER . . . . . . . .  	002E
  JA_HANDLERLOADED . . . . . . .  	0030
  JA_RESERVED  . . . . . . . . .  	0032
SERVICECUSTOMER  . . . . . . . .  	001E	0005
  SCS_NEXTCUSTOMER . . . . . . .  	0000
  SCS_FLAGS  . . . . . . . . . .  	0004
  SCS_TASK . . . . . . . . . . .  	0006
  SCS_SIGNALBIT  . . . . . . . .  	000A
  SCS_JAZZRESERVED . . . . . . .  	000E
SERVICEDATA  . . . . . . . . . .  	003A	0012
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-2


  SD_APPLICATIONID . . . . . . .  	0000
  SD_LOCALID . . . . . . . . . .  	0004
  SD_FLAGS . . . . . . . . . . .  	0006
  SD_SERVICEDATALOCK . . . . . .  	0008
  SD_AMIGAUSERCOUNT  . . . . . .  	0009
  SD_PCUSERCOUNT . . . . . . . .  	000A
  SD_RESERVEDBYTE  . . . . . . .  	000B
  SD_MEMSIZE . . . . . . . . . .  	000C
  SD_MEMTYPE . . . . . . . . . .  	000E
  SD_MEMOFFSET . . . . . . . . .  	0010
  SD_AMIGAMEMPTR . . . . . . . .  	0012
  SD_PCMEMPTR  . . . . . . . . .  	0016
  SD_JREMEMBERKEY  . . . . . . .  	001A
  SD_NEXTSERVICEDATA . . . . . .  	001C
  SD_FIRSTPCCUSTOMER . . . . . .  	001E
  SD_FIRSTAMIGACUSTOMER  . . . .  	0022
  SD_SEMAPHORE . . . . . . . . .  	0026
  SD_ZAPHODRESERVED  . . . . . .  	002A
STACKFRAME . . . . . . . . . . .  	0012	0009
  REGAX  . . . . . . . . . . . .  	0000
  REGBX  . . . . . . . . . . . .  	0002
  REGCX  . . . . . . . . . . . .  	0004
  REGDX  . . . . . . . . . . . .  	0006
  REGBP  . . . . . . . . . . . .  	0008
  REGDI  . . . . . . . . . . . .  	000A
  REGSI  . . . . . . . . . . . .  	000C
  REGDS  . . . . . . . . . . . .  	000E
  REGES  . . . . . . . . . . . .  	0010

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CSEG . . . . . . . . . . . . . .  	020A	PARA	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

AB_ACTIVATE  . . . . . . . . . .  	NUMBER	0001	
AB_BILLMSG0  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILLMSG1  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILLMSG2  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILLMSG3  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILLMSG4  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILLMSG5  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_BILL_INT13  . . . . . . . . .  	V DWORD	0000	CSEG	External
AB_COPENFAILMSG  . . . . . . . .  	V BYTE	0000	CSEG	External
AB_CYL . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_CYLS  . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_DATAOFF . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_DATASEG . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_FILE  . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_FILENAME  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_FILEOPEN  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_FTEXITMSG . . . . . . . . . .  	V BYTE	0000	CSEG	External
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-3


AB_HEAD  . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_INT13MSG  . . . . . . . . . .  	NUMBER	0000	
AB_JBUFFOFF  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_JBUFFSEG  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_JPARMOFF  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_JPARMSEG  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_NUMHEADS  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_OKFLAG  . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_OPENFAILMSG . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_READPARMS . . . . . . . . . .  	V BYTE	0000	CSEG	External
AB_SEC . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_SECS  . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_SECSDONE  . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_TFILE . . . . . . . . . . . .  	V WORD	0000	CSEG	External
AB_TRACKSECS . . . . . . . . . .  	V WORD	0000	CSEG	External
ACKINT . . . . . . . . . . . . .  	NUMBER	007F	
ACTIVEFLAG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
ADDS_EXCLUSIVE . . . . . . . . .  	NUMBER	0001	
ADDS_EXCLUSIVEN  . . . . . . . .  	NUMBER	0000	
ADDS_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0010	
ADDS_FROMAMIGA_ONLYN . . . . . .  	NUMBER	0004	
ADDS_FROMPC_ONLY . . . . . . . .  	NUMBER	0004	
ADDS_FROMPC_ONLYN  . . . . . . .  	NUMBER	0002	
ADDS_LOCKDATA  . . . . . . . . .  	NUMBER	0020	
ADDS_LOCKDATAN . . . . . . . . .  	NUMBER	0005	
ADDS_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0008	
ADDS_TOAMIGA_ONLYN . . . . . . .  	NUMBER	0003	
ADDS_TOPC_ONLY . . . . . . . . .  	NUMBER	0002	
ADDS_TOPC_ONLYN  . . . . . . . .  	NUMBER	0001	
ALLOCPARAM . . . . . . . . . . .  	V BYTE	0000	CSEG	External
ALREADYCALLED  . . . . . . . . .  	NUMBER	0054	
AMIGA  . . . . . . . . . . . . .  	NUMBER	000A	
AMIGAADDMSG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGACALLMSG . . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGADELETEMSG . . . . . . . . .  	V BYTE	0000	CSEG	External
AMIGAINT . . . . . . . . . . . .  	NUMBER	0004	
AMIGASTATE_RESERVED  . . . . . .  	NUMBER	FFFE	
AMIGA_EXCLUSIVE  . . . . . . . .  	NUMBER	0010	
AMIGA_EXCLUSIVEN . . . . . . . .  	NUMBER	0004	
AMIGA_NUMLOCK_RESET  . . . . . .  	NUMBER	0002	
AMIGA_NUMLOCK_RESETN . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SET  . . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SETN . . . . . . .  	NUMBER	0000	

BASEMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
BELL . . . . . . . . . . . . . .  	NUMBER	0007	
BILL13 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BILL19 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BIOS_INT10 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT13 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT16 . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BIOS_INT1C . . . . . . . . . . .  	V DWORD	0000	CSEG	External
BOOT_INT . . . . . . . . . . . .  	NUMBER	0019	
BS . . . . . . . . . . . . . . .  	NUMBER	0008	
BUFFERMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
BYEBILL  . . . . . . . . . . . .  	L NEAR	0196	CSEG
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-4



CALLAMIGA  . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CALLAMIGASERVICE . . . . . . . .  	V BYTE	0000	CSEG	External
CALLEDFIRST  . . . . . . . . . .  	NUMBER	0042	
CALL_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0800	
CALL_FROMAMIGA_ONLYN . . . . . .  	NUMBER	000B	
CALL_FROMPC_ONLY . . . . . . . .  	NUMBER	0200	
CALL_FROMPC_ONLYN  . . . . . . .  	NUMBER	0009	
CALL_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0400	
CALL_TOAMIGA_ONLYN . . . . . . .  	NUMBER	000A	
CALL_TOPC_ONLY . . . . . . . . .  	NUMBER	0100	
CALL_TOPC_ONLYN  . . . . . . . .  	NUMBER	0008	
CHAIN_VEC  . . . . . . . . . . .  	V DWORD	0000	CSEG	External
CHANGE_INT . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHANNELMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
COPYMSG  . . . . . . . . . . . .  	L BYTE	002B	CSEG
CR . . . . . . . . . . . . . . .  	NUMBER	000D	

DBG_AB_CNV_IN  . . . . . . . . .  	NUMBER	0000	
DBG_AB_CNV_OUT . . . . . . . . .  	NUMBER	0000	
DBG_AB_COPENFAILMSG  . . . . . .  	NUMBER	0001	
DBG_AB_FILEOPENMSG . . . . . . .  	NUMBER	0000	
DBG_AB_FTEXITMSG . . . . . . . .  	NUMBER	0000	
DBG_AB_OPENFAILMSG . . . . . . .  	NUMBER	0001	
DBG_AB_READPARMS . . . . . . . .  	NUMBER	0000	
DBG_ALLOCPARAM . . . . . . . . .  	NUMBER	0000	
DBG_AMIGAADDMSG  . . . . . . . .  	NUMBER	0000	
DBG_AMIGACALLMSG . . . . . . . .  	NUMBER	0000	
DBG_AMIGADELETEMSG . . . . . . .  	NUMBER	0000	
DBG_BASEMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_BLOCKMOVE  . . . . . . . . .  	NUMBER	0000	
DBG_BUFFERMSG  . . . . . . . . .  	NUMBER	0000	
DBG_CALLAMIGASERVICE . . . . . .  	NUMBER	0000	
DBG_COPYMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_DISKMSG1 . . . . . . . . . .  	NUMBER	0000	
DBG_DOSMSGA  . . . . . . . . . .  	NUMBER	0000	
DBG_DOSMSGN  . . . . . . . . . .  	NUMBER	0000	
DBG_EXEINTMES  . . . . . . . . .  	NUMBER	0000	
DBG_EXITSDMSG  . . . . . . . . .  	NUMBER	0000	
DBG_FOUNDINTMES  . . . . . . . .  	NUMBER	0000	
DBG_GOTSERVICEINT  . . . . . . .  	NUMBER	0000	
DBG_HANDLERMSG . . . . . . . . .  	NUMBER	0000	
DBG_HANDLERVERSIONMSG  . . . . .  	NUMBER	0001	
DBG_HDPART . . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGP . . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGPC  . . . . . . . . . .  	NUMBER	0000	
DBG_HWMSGR . . . . . . . . . . .  	NUMBER	0000	
DBG_IDLEMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_INITPOINTERS . . . . . . . .  	NUMBER	0000	
DBG_INITWAITPOINTERS . . . . . .  	NUMBER	0000	
DBG_INTCTRLMES . . . . . . . . .  	NUMBER	0000	
DBG_INTSMSG  . . . . . . . . . .  	NUMBER	0000	
DBG_INTTBLMES  . . . . . . . . .  	NUMBER	0000	
DBG_JPARTBASE  . . . . . . . . .  	NUMBER	0000	
DBG_LIBVERSIONMSG  . . . . . . .  	NUMBER	0001	
DBG_LOADMSG  . . . . . . . . . .  	NUMBER	0000	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-5


DBG_MAKESERVICE  . . . . . . . .  	NUMBER	0000	
DBG_MEMCHUNK . . . . . . . . . .  	NUMBER	0000	
DBG_NEXTSLOTMSG  . . . . . . . .  	NUMBER	0000	
DBG_NOBASEMSG  . . . . . . . . .  	NUMBER	0001	
DBG_NOINTMES . . . . . . . . . .  	NUMBER	0000	
DBG_NOSERVICEBASEMSG . . . . . .  	NUMBER	0001	
DBG_PARASMSG . . . . . . . . . .  	NUMBER	0000	
DBG_PASTLOCK . . . . . . . . . .  	NUMBER	0000	
DBG_PRELOCK  . . . . . . . . . .  	NUMBER	0000	
DBG_REGMSG . . . . . . . . . . .  	NUMBER	0000	
DBG_REMOVEMSG  . . . . . . . . .  	NUMBER	0000	
DBG_SCROLL . . . . . . . . . . .  	NUMBER	0000	
DBG_SERVICEADDED . . . . . . . .  	NUMBER	0000	
DBG_SERVICEAVAILABLE . . . . . .  	NUMBER	0000	
DBG_SERVICEDELETED . . . . . . .  	NUMBER	0000	
DBG_SERVICESEARCH  . . . . . . .  	NUMBER	0000	
DBG_UCOUNTMSG  . . . . . . . . .  	NUMBER	0000	
DBG_UPDATEMSG  . . . . . . . . .  	NUMBER	0000	
DBG_WAITSTATUS . . . . . . . . .  	NUMBER	0000	
DBG_WRONGVERSIONMSG  . . . . . .  	NUMBER	0001	
DISKMSG1 . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DISK_INT . . . . . . . . . . . .  	NUMBER	0013	
DOS  . . . . . . . . . . . . . .  	NUMBER	0080	
DOS12  . . . . . . . . . . . . .  	NUMBER	0001	
DOS16  . . . . . . . . . . . . .  	NUMBER	0004	
DOSINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DOSMSGA  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DOSMSGN  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
DOS_INT28  . . . . . . . . . . .  	V DWORD	0000	CSEG	External
DUMMYFLAG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
D_SEG  . . . . . . . . . . . . .  	NUMBER	D000	

ENTRY  . . . . . . . . . . . . .  	L NEAR	0000	CSEG
EOI  . . . . . . . . . . . . . .  	NUMBER	0020	
ESC_CHAR . . . . . . . . . . . .  	NUMBER	001B	
ESDI_MES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
EXEINTMES  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
EXITSDMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
EXPUNGE_SERVICE  . . . . . . . .  	NUMBER	0002	
EXPUNGE_SERVICEN . . . . . . . .  	NUMBER	0001	

FAKEDOSFLAG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
FOUNDBASE  . . . . . . . . . . .  	L NEAR	00D9	CSEG
FOUNDINTMES  . . . . . . . . . .  	V BYTE	0000	CSEG	External
F_SEG  . . . . . . . . . . . . .  	NUMBER	F000	

GETS_ALOAD_A . . . . . . . . . .  	NUMBER	0040	
GETS_ALOAD_AN  . . . . . . . . .  	NUMBER	0006	
GETS_ALOAD_PC  . . . . . . . . .  	NUMBER	0080	
GETS_ALOAD_PCN . . . . . . . . .  	NUMBER	0007	
GETS_EXCLUSIVE . . . . . . . . .  	NUMBER	0020	
GETS_EXCLUSIVEN  . . . . . . . .  	NUMBER	0005	
GETS_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0010	
GETS_FROMAMIGA_ONLYN . . . . . .  	NUMBER	0004	
GETS_FROMPC_ONLY . . . . . . . .  	NUMBER	0004	
GETS_FROMPC_ONLYN  . . . . . . .  	NUMBER	0002	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-6


GETS_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0008	
GETS_TOAMIGA_ONLYN . . . . . . .  	NUMBER	0003	
GETS_TOPC_ONLY . . . . . . . . .  	NUMBER	0002	
GETS_TOPC_ONLYN  . . . . . . . .  	NUMBER	0001	
GETS_WAIT  . . . . . . . . . . .  	NUMBER	0001	
GETS_WAITN . . . . . . . . . . .  	NUMBER	0000	
GOTSERVICEINT  . . . . . . . . .  	V BYTE	0000	CSEG	External

HANDLERMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HANDLERPTR . . . . . . . . . . .  	V DWORD	0000	CSEG	External
HANDLERVERSIONMSG  . . . . . . .  	V BYTE	0000	CSEG	External
HDPART . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
HWMSGP . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HWMSGPC  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
HWMSGR . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External

IDLE . . . . . . . . . . . . . .  	NUMBER	0000	
IDLEDOS  . . . . . . . . . . . .  	NUMBER	0010	
IDLEMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
IDLE_INT . . . . . . . . . . . .  	NUMBER	0028	
INFOLEVEL  . . . . . . . . . . .  	NUMBER	000A	
INITPOINTERS . . . . . . . . . .  	V BYTE	0000	CSEG	External
INITSERVICEPTR . . . . . . . . .  	L NEAR	0000	CSEG	External
INITWAITPOINTERS . . . . . . . .  	V BYTE	0000	CSEG	External
INTCOUNT . . . . . . . . . . . .  	V WORD	0000	CSEG	External
INTCTRLMES . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INTEN_REG  . . . . . . . . . . .  	NUMBER	0379	
INTSMSG  . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INTTBLMES  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
INT_ACTIVE . . . . . . . . . . .  	NUMBER	0001	
INT_ENABLE . . . . . . . . . . .  	V DWORD	0000	CSEG	External
INT_REQ  . . . . . . . . . . . .  	V DWORD	0000	CSEG	External
IRQ3EN . . . . . . . . . . . . .  	NUMBER	FFF7	
IRQ3RESET  . . . . . . . . . . .  	NUMBER	03B0	

JANINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
JANINT8  . . . . . . . . . . . .  	NUMBER	0008	
JANINTEN . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
JANPCINT . . . . . . . . . . . .  	NUMBER	0040	
JANUS  . . . . . . . . . . . . .  	NUMBER	0040	
JANUS_BASE_SEG . . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_BUFFER_SEG . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_PARAM_SEG  . . . . . . . .  	V WORD	0000	CSEG	External
JANUS_PART_BASE  . . . . . . . .  	V WORD	0000	CSEG	External
JFUNC_ADDSERVICE . . . . . . . .  	NUMBER	000A	
JFUNC_ALLOCMEM . . . . . . . . .  	NUMBER	0002	
JFUNC_CALLAMIGA  . . . . . . . .  	NUMBER	0007	
JFUNC_CALLSERVICE  . . . . . . .  	NUMBER	000C	
JFUNC_CHECKAMIGA . . . . . . . .  	NUMBER	0009	
JFUNC_DELETESERVICE  . . . . . .  	NUMBER	000E	
JFUNC_FREEMEM  . . . . . . . . .  	NUMBER	0003	
JFUNC_GETBASE  . . . . . . . . .  	NUMBER	0001	
JFUNC_GETSERVICE . . . . . . . .  	NUMBER	000B	
JFUNC_GETSERVICE1  . . . . . . .  	NUMBER	0000	
JFUNC_JINT . . . . . . . . . . .  	NUMBER	000B	
JFUNC_LOCKSERVICEDATA  . . . . .  	NUMBER	000F	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-7


JFUNC_MAX  . . . . . . . . . . .  	NUMBER	0010	
JFUNC_RELEASESERVICE . . . . . .  	NUMBER	000D	
JFUNC_SETPARAM . . . . . . . . .  	NUMBER	0004	
JFUNC_SETSERVICE . . . . . . . .  	NUMBER	0005	
JFUNC_STOPSERVICE  . . . . . . .  	NUMBER	0006	
JFUNC_UNLOCKSERVICEDATA  . . . .  	NUMBER	0010	
JFUNC_WAITAMIGA  . . . . . . . .  	NUMBER	0008	
JHANDLERREV  . . . . . . . . . .  	NUMBER	003F	
JHANDLERVER  . . . . . . . . . .  	NUMBER	0002	
JLIBREV  . . . . . . . . . . . .  	NUMBER	0001	
JLIBVER  . . . . . . . . . . . .  	NUMBER	0021	
JSERV_AMIGACALL  . . . . . . . .  	NUMBER	000C	
JSERV_AMIGASERVICE . . . . . . .  	NUMBER	000E	
JSERV_AMOUSE . . . . . . . . . .  	NUMBER	0011	
JSERV_BADAUTOLOAD  . . . . . . .  	NUMBER	000A	
JSERV_COM2INT  . . . . . . . . .  	NUMBER	0006	
JSERV_CRT1INT  . . . . . . . . .  	NUMBER	0002	
JSERV_CRT2INT  . . . . . . . . .  	NUMBER	0003	
JSERV_DUPSERVICE . . . . . . . .  	NUMBER	0007	
JSERV_ENBKB  . . . . . . . . . .  	NUMBER	0004	
JSERV_FINISHED . . . . . . . . .  	NUMBER	0001	
JSERV_GINT . . . . . . . . . . .  	NUMBER	0001	
JSERV_HARDDISK . . . . . . . . .  	NUMBER	0009	
JSERV_ILLFUNCTION  . . . . . . .  	NUMBER	0008	
JSERV_LPT1INT  . . . . . . . . .  	NUMBER	0005	
JSERV_MINT . . . . . . . . . . .  	NUMBER	0000	
JSERV_NOAMIGAMEM . . . . . . . .  	NUMBER	0004	
JSERV_NOFUNCTION . . . . . . . .  	NUMBER	-0001	
JSERV_NOJANUSBASE  . . . . . . .  	NUMBER	0002	
JSERV_NOJANUSMEM . . . . . . . .  	NUMBER	0003	
JSERV_NOPCMEM  . . . . . . . . .  	NUMBER	0005	
JSERV_NOSERVICE  . . . . . . . .  	NUMBER	0006	
JSERV_NOTEXCLUSIVE . . . . . . .  	NUMBER	0009	
JSERV_OK . . . . . . . . . . . .  	NUMBER	0000	
JSERV_PCBOOTED . . . . . . . . .  	NUMBER	0007	
JSERV_PCCALL . . . . . . . . . .  	NUMBER	000D	
JSERV_PCDISK . . . . . . . . . .  	NUMBER	0010	
JSERV_PCSERVICE  . . . . . . . .  	NUMBER	000F	
JSERV_PENDING  . . . . . . . . .  	NUMBER	0000	
JSERV_READAMIGA  . . . . . . . .  	NUMBER	000A	
JSERV_READPC . . . . . . . . . .  	NUMBER	000B	
JSERV_SCROLL . . . . . . . . . .  	NUMBER	0008	
JSETINT  . . . . . . . . . . . .  	NUMBER	007F	

KEYB_INT . . . . . . . . . . . .  	NUMBER	0016	

LF . . . . . . . . . . . . . . .  	NUMBER	000A	
LIBVERSIONMSG  . . . . . . . . .  	V BYTE	0000	CSEG	External
LOADERRMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
LOAD_LENGTH  . . . . . . . . . .  	NUMBER	3000	

MAKESERVICE  . . . . . . . . . .  	V BYTE	0000	CSEG	External
MAXHANDLER . . . . . . . . . . .  	NUMBER	0020	
MAXINT . . . . . . . . . . . . .  	NUMBER	0020	
MEMCHUNK . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
MEMLOCK  . . . . . . . . . . . .  	NUMBER	00FF	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-8


MEMUNLOCK  . . . . . . . . . . .  	NUMBER	007F	

NEWLINE  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NEXTSLOTMSG  . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOBASE . . . . . . . . . . . . .  	L NEAR	0200	CSEG
NOBASEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NODISK . . . . . . . . . . . . .  	L NEAR	017A	CSEG
NODISKREAD . . . . . . . . . . .  	L NEAR	014D	CSEG
NODRIVEMSG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOHANMES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOINTMES . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOPARTMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
NOSERVICEBASEMSG . . . . . . . .  	V BYTE	0000	CSEG	External
NULL . . . . . . . . . . . . . .  	NUMBER	0000	

OUTCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTHXB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTHXW . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OUTUNS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

PARASMSG . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
PCSTATE_RESERVED . . . . . . . .  	NUMBER	FFFF	
PC_EXCLUSIVE . . . . . . . . . .  	NUMBER	0020	
PC_EXCLUSIVEN  . . . . . . . . .  	NUMBER	0005	
PIC_00 . . . . . . . . . . . . .  	NUMBER	0020	
PIC_01 . . . . . . . . . . . . .  	NUMBER	0021	
PSTRNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

REGMSG . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
REMOVEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
ROMHEADER  . . . . . . . . . . .  	L BYTE	0006	CSEG
ROMLABEL . . . . . . . . . . . .  	L WORD	0000	CSEG
ROMLENGTH  . . . . . . . . . . .  	L BYTE	0002	CSEG
RUN  . . . . . . . . . . . . . .  	L NEAR	0077	CSEG

SCROLL . . . . . . . . . . . . .  	NUMBER	0000	
SCROLLFLAG . . . . . . . . . . .  	V BYTE	0000	CSEG	External
SCROLLING  . . . . . . . . . . .  	NUMBER	0006	
SCROLL_INT . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SD_CREATED . . . . . . . . . . .  	NUMBER	0100	
SD_CREATEDN  . . . . . . . . . .  	NUMBER	0008	
SERIAL . . . . . . . . . . . . .  	NUMBER	0000	
SERIAL_INT . . . . . . . . . . .  	NUMBER	0014	
SERVICEADDED . . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEAVAILABLE . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEDELETED . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICEGOES  . . . . . . . . . .  	L NEAR	01E9	CSEG
SERVICESEARCH  . . . . . . . . .  	V BYTE	0000	CSEG	External
SERVICE_ADDED  . . . . . . . . .  	NUMBER	0040	
SERVICE_ADDEDN . . . . . . . . .  	NUMBER	0006	
SERVICE_AMIGASIDE  . . . . . . .  	NUMBER	0004	
SERVICE_AMIGASIDEN . . . . . . .  	NUMBER	0002	
SERVICE_DELETED  . . . . . . . .  	NUMBER	0001	
SERVICE_DELETEDN . . . . . . . .  	NUMBER	0000	
SERVICE_PCWAIT . . . . . . . . .  	NUMBER	0008	
Microsoft (R) Macro Assembler Version 5.00                  10/10/88 17:35:03
LOAD_IRQ  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. Symbols-9


SERVICE_PCWAITN  . . . . . . . .  	NUMBER	0003	
SERVSTATTAB  . . . . . . . . . .  	V BYTE	0000	CSEG	External
SIGNALCUSTOMER . . . . . . . . .  	NUMBER	0055	
SPACE  . . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
SRV_INT  . . . . . . . . . . . .  	NUMBER	000B	
SSTACK . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
STACKLENGTH  . . . . . . . . . .  	NUMBER	4000	
START  . . . . . . . . . . . . .  	F PROC	0003	CSEG	Length = 0207
STATUSREG  . . . . . . . . . . .  	NUMBER	0062	
STOPSCROLL . . . . . . . . . . .  	NUMBER	00FF	

TESTINTMES . . . . . . . . . . .  	V BYTE	0000	CSEG	External
TICKS  . . . . . . . . . . . . .  	V WORD	0000	CSEG	External
TIME_INT . . . . . . . . . . . .  	NUMBER	001C	

UCOUNTMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
UPDATEINT  . . . . . . . . . . .  	L NEAR	0000	CSEG	External
UPDATEMSG  . . . . . . . . . . .  	V BYTE	0000	CSEG	External
UPDATERATE . . . . . . . . . . .  	NUMBER	0BB8	
USTACK . . . . . . . . . . . . .  	V WORD	0000	CSEG	External

VERSION_BAD  . . . . . . . . . .  	L NEAR	012F	CSEG
VERSION_OK . . . . . . . . . . .  	L NEAR	0143	CSEG
VIDEO  . . . . . . . . . . . . .  	NUMBER	0001	
VIDEO_INT  . . . . . . . . . . .  	NUMBER	0010	

W  . . . . . . . . . . . . . . .  	TEXT  word ptr		
WAITFLAG . . . . . . . . . . . .  	V BYTE	0000	CSEG	External
WAITSTATUS . . . . . . . . . . .  	V BYTE	0000	CSEG	External
WAIT_FREE_LOOP . . . . . . . . .  	NUMBER	0064	
WRITE_TTY  . . . . . . . . . . .  	NUMBER	000E	
WRONGVERSIONMSG  . . . . . . . .  	V BYTE	0000	CSEG	External

@FILENAME  . . . . . . . . . . .  	TEXT  LOAD_IRQ		


   1261 Source  Lines
   1462 Total   Lines
    446 Symbols

  46690 + 199038 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
