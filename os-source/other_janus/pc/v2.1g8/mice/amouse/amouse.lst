Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-1


					TITLE   emumouse
				
 0000				cseg	SEGMENT  BYTE PUBLIC 'CODE'
 0000				cseg	ENDS
					ASSUME  CS: cseg, DS: cseg, SS: cseg, E
				S: cseg
 0000				cseg      SEGMENT
				
				
 0080						org	80H
 0080  0001[			ParamSize	db	1 dup (?)
	   ??			
			 ]	
				
 0081  007F[			Params		db	7fH dup (?)	
	   ??			
			 ]	
				
				
 0100						org	100H		; =====
				=
 0100				Start:
 0100  E9 1BEE R				jmp	main
				
 0103  00			DoTrace		db	0
				
 0104  08			TimerIntNo	db	8		; defau
				lt is 8, alternative is 1CH
 0105  1C			OtherIntNo	db	1CH		; defau
				lt is 8, alternative is 1CH
 0106  0303 R			TimerProc	dw	offset MouseInt
 0108  0378 R			OtherProc	dw	offset Null
				
 010A  0001[			OldOffset	DW 01H DUP (?)
	   ????			
			 ]	
				
 010C  0001[			OldSegment	DW 01H DUP (?)
	   ????			
			 ]	
				
 010E  0001[			TimerOffset	DW 01H DUP (?)
	   ????			
			 ]	
				
 0110  0001[			TimerSegment	DW 01H DUP (?)
	   ????			
			 ]	
				
 0112  0001[			OtherOffset	DW 01H DUP (?)
	   ????			
			 ]	
				
 0114  0001[			OtherSegment	DW 01H DUP (?)
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-2


	   ????			
			 ]	
				
 0116  0001[			VideoOffset	DW 01H DUP (?)
	   ????			
			 ]	
				
 0118  0001[			VideoSegment	DW 01H DUP (?)
	   ????			
			 ]	
				
				
 011A  0000 0000		ms_rq_np	dw	0,0		; Dual 
				Port Ram Address
 011E  0000 0000		ms_sd_np	dw	0,0		; Dual 
				Port Ram Address
				
				
 0122  00			CardFound	db	0
				
 0123  00			CardActive	db	0
				
 0124  00			EGARamSize	db	0		; (x+1)
				*64Kb
 0125  00			EGAColour	db	0
 0126  00			EGAEnhanced	db	0
				
					include	janus\janusvar.inc
			     C	;**********************************************
				***************************
			     C	; (PC side file)
			     C	;
			     C	; janusvar.inc -- the software data structures 
				for the janus board
			     C	;
			     C	; Copyright (c) 1986, Commodore Amiga Inc.,  Al
				l rights reserved.
			     C	;
			     C	; Date       Name
			     C	; --------   -------------	---------------
				------------------------------
			     C	; 07-15-88 - Bill Koester  - Modified for self 
				inclusion of required files
			     C	; 07-26-88 - Bill Koester  - Added ja_Reserved 
				to JanusAmiga
			     C	;                            Added ja_AmigaStat
				e, ja_PCState and related
			     C	; 10-05-88 - Bill Koester  - Added Rev/Ver fiel
				ds to JanusAmiga struc			
									
						flags to JanusAmiga
			     C	; 10-06-88 - Bill Koester  - Added HandlerLoade
				d field to Janus Amiga
			     C	; 11-08-88 - Bill Koester  - Added AMIGA_PC_REA
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-3


				DY flags
			     C	; 07-09-88 - Bill Koester  - Added variables fo
				r software locking
			     C	;**********************************************
				***************************
			     C	
			     C	;NOTE Needs Memory.inc
			     C	
			     C	; all bytes described here are described in the
				 byte order of the 8088.
			     C	; Note that words and longwords in these struct
				ures will be accessed from
			     C	; the word access space to preserve the byte or
				der in a word -- the 8088
			     C	; will access longwords by reversing the words 
				: like a 68000 access to the
			     C	; word access memory
			     C	
			     C	JanusAmiga  struc
			     C	
 0000  00                    C	   ja_Lock           db 0        ; also used to
				 handshake at 8088 reset
 0001  00                    C	   ja_8088Go         db 0        ; unlocked to 
				signal 8088 to initialize
			     C	;------------------------------- JanusMemHead o
				f ParamMem
 0002  00                    C	   jpm_Lock          db 0
 0003  00                    C	   jpm_pad0          db 0
 0004  00000000              C	   jpm_68000Base     dd 0
 0008  0000                  C	   jpm_8088Segment   dw 0
 000A  0000                  C	   jpm_First         dw 0
 000C  0000                  C	   jpm_Max           dw 0
 000E  0000                  C	   jpm_Free          dw 0
			     C	;------------------------------- JanusMemHead o
				f BufferMem
 0010  00                    C	   jbm_Lock          db 0
 0011  00                    C	   jbm_pad0          db 0
 0012  00000000              C	   jbm_68000Base     dd 0
 0016  0000                  C	   jbm_8088Segment   dw 0
 0018  0000                  C	   jbm_First         dw 0
 001A  0000                  C	   jbm_Max           dw 0
 001C  0000                  C	   jbm_Free          dw 0
			     C	;-------------------------------
 001E  0000                  C	   ja_Interrupts     dw 0
 0020  0000                  C	   ja_Parameters     dw 0
 0022  0000                  C	   ja_NumInterrupts  dw 0
			     C	
			     C	   ; This field is used by Janus.library to com
				municate Amiga states
			     C	   ; to the PC. The bits of this field may be r
				ead by anyone, but
			     C	   ; may be written only by janus.library.
			     C	   
 0024  0000                  C	   ja_AmigaState	dw 0
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-4


			     C	   ; This field is used by the PC to communicat
				e PC states
			     C	   ; to the Amiga. The bits of this field may b
				e read by anyone, but
			     C	   ; may be written only by the PC operating sy
				stem.
			     C	   
 0026  0000                  C	   ja_PCState	dw 0
			     C	
			     C	   ; These fields are set by janus.library and 
				the PC Janus handler so
			     C	   ; they can read each others version numbers.
			     C	   ;
 0028  0000                  C	   ja_JLibRev		dw	0
 002A  0000                  C	   ja_JLibVer		dw	0
 002C  0000                  C	   ja_JHandlerRev	dw	0
 002E  0000                  C	   ja_JHandlerVer	dw	0
			     C	
			     C	   ; This field is zero before the PC is runnin
				g and is set to nonzero
			     C	   ; when the PC's JanusHandler has finished in
				itializing.
			     C	   ;
 0030  0000                  C	   ja_HandlerLoaded	dw	0
			     C	
 0032  00                    C	   ja_PCFlag            db      0
 0033  00                    C	   ja_AmigaFlag         db      0
 0034  00                    C	   ja_Turn              db      0
 0035  00                    C	   ja_Pad               db      0
			     C	   
 0036  0004[                 C	   ja_Reserved dd 4 dup (0)
	   00000000          C	
			 ]   C	
			     C	
			     C	
 0046                        C	JanusAmiga  ends
			     C	
			     C	; === AmigaState Definitions === 
 = FFF8                      C	AMIGASTATE_RESERVED	= 0FFF8h
 = 0001                      C	AMIGA_NUMLOCK_SET	= 0001h
 = 0000                      C	AMIGA_NUMLOCK_SETn      = 0
 = 0002                      C	AMIGA_NUMLOCK_RESET     = 0002h
 = 0001                      C	AMIGA_NUMLOCK_RESETn    = 1
 = 0004                      C	AMIGA_PC_READY		= 0004h
 = 0002                      C	AMIGA_PC_READYn		= 2
			     C	
			     C	; === PCState Definitions === 
 = FFFF                      C	PCSTATE_RESERVED	= 0FFFFh
			     C	
			     C	
			     C	;------ constant to set to indicate a pending s
				oftware interrupt
			     C	
 = 007F                      C	JSETINT  	=   07fh
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-5


			     C	
			     C	
					include	janus\services.inc
			     C	;* *** services.inc ***************************
				*****************************
			     C	;* (PC side file)
			     C	;*
			     C	;* services.inc -- Service Definitions and Data
				 Structures
			     C	;*
			     C	;* Copyright (c) 1986, 1987, 1988, Commodore Am
				iga Inc., All rights reserved
			     C	;* 
			     C	;* HISTORY
			     C	;* Date       name               Description
			     C	;* ---------  -----------------  --------------
				-----------------------------
			     C	;* early 86 - Burns/Katin clone - Created this 
				file
			     C	;* 02-22-88 - RJ Mical          - Added service
				 data structures
			     C	;* 07-25-88 - Bill Koester      - Added Service
				Customer structure
			     C	;* 07-26-88 - Bill Koester      - Added sd_PCUs
				erCount to ServiceData
			     C	;*                                Changed sd_Us
				erCount to sd_AmigaUserCount
			     C	;*                                Added sd_Rese
				rvedByte to ServiceData
			     C	;* 10-05-88 - Bill Koester	- Added SERVICE
				_PCWAIT flag definitions
			     C	;* 10-09-88 - Bill Koester      - Added PC/AMIG
				A_EXCLUSVIE & SERVICE_ADDED
			     C	;*                                flag definiti
				ons.
			     C	;*                              - Added sd_Sema
				phore field to ServiceData
			     C	;* 11-08-88 - Bill Koester	- Added AUTOWAI
				T flags
			     C	;* ********************************************
				*****************************
			     C	
			     C	
			     C	;* As a coding convenience, we assume a maximum
				 of 32 handlers.
			     C	;* People should avoid using this in their code
				, because we want
			     C	;* to be able to relax this constraint in the f
				uture.  All the
			     C	;* standard commands' syntactically support any
				 number of interrupts,
			     C	;* but the internals are limited to 32.
			     C	
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-6


 = 0020                      C	MAXHANDLER   =   32
			     C	
			     C	
			     C	;*
			     C	;* this is the table of hard coded services.  O
				ther services may exist
			     C	;* that are dynamically allocated.
			     C	;*
			     C	
			     C	
			     C	;* service numbers constrained by hardware 
			     C	
 = 0000                      C	JSERV_MINT           =      0  ; monochrome dis
				play written to
 = 0001                      C	JSERV_GINT           =      1  ; color display 
				written to
 = 0002                      C	JSERV_CRT1INT        =      2  ; mono display's
				 control registers changed
 = 0003                      C	JSERV_CRT2INT        =      3  ; color display'
				s control registers changed
 = 0004                      C	JSERV_ENBKB          =      4  ; keyboard ready
				 for next character
 = 0005                      C	JSERV_LPT1INT        =      5  ; parallel contr
				ol register
 = 0006                      C	JSERV_COM2INT        =      6  ; serial control
				 register
			     C	
			     C	;* hard coded service numbers 
			     C	
 = 0007                      C	JSERV_PCBOOTED       =      7  ; PC is ready to
				 service soft interrupts
 = 0008                      C	JSERV_SCROLL         =      8  ; PC is scrollin
				g its screen
 = 0009                      C	JSERV_HARDDISK       =      9  ; Amiga reading 
				PC hard disk
 = 000A                      C	JSERV_READAMIGA      =      10 ; PC reading Ami
				ga mem
 = 000B                      C	JSERV_READPC         =      11 ; Amiga reading 
				PC mem
 = 000C                      C	JSERV_AMIGACALL      =      12 ; PC causing Ami
				ga function call
 = 000D                      C	JSERV_PCCALL         =      13 ; Amiga causing 
				PC interrupt
 = 000E                      C	JSERV_AMIGASERVICE   =      14 ; PC initiating 
				Amiga side of a service
 = 000F                      C	JSERV_PCSERVICE      =      15 ; Amiga initiati
				ng PC side of a service
 = 0010                      C	JSERV_PCDISK         =      16 ; PC using Amiga
				Dos files
 = 0011                      C	JSERV_AMOUSE         =      17 ; AMouse Communi
				cations
			     C	
			     C	
			     C	;--- JANUS PC Function calls -----------
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-7


			     C	;
			     C	; This is the table of function codes. These fu
				nctions allow controlling
			     C	; of dynamically allocated services (dyn-servic
				e).
			     C	; 
			     C	; 1.Generation:	(befor Mai'88)
			     C	;
 = 0000                      C	JFUNC_GETSERVICE1	=	 0	; not s
				upported any more    	
 = 0001                      C	JFUNC_GETBASE		=	 1	; repor
				t segments, offset of janus mem
 = 0002                      C	JFUNC_ALLOCMEM		=	 2	; alloc
				ate janus memory
 = 0003                      C	JFUNC_FREEMEM		=	 3	; free 
				janus memory
 = 0004                      C	JFUNC_SETPARAM		=	 4	; set p
				ointer to service parameter
 = 0005                      C	JFUNC_SETSERVICE	=	 5	; not s
				upported any more    	
 = 0006                      C	JFUNC_STOPSERVICE	=	 6	; not s
				upported any more    	
 = 0007                      C	JFUNC_CALLAMIGA		=	 7	; call 
				service on Amiga side
 = 0008                      C	JFUNC_WAITAMIGA		=	 8 	; wait 
				for service becomes ready
 = 0009                      C	JFUNC_CHECKAMIGA	=	 9	; check
				 service status
			     C	;					
			     C	; 2.Generation:
			     C	;
 = 000A                      C	JFUNC_ADDSERVICE	=	10	; add a
				 dyn-service 
 = 000B                      C	JFUNC_GETSERVICE	=	11	; link 
				to a dyn-service
 = 000C                      C	JFUNC_CALLSERVICE	=	12	; call 
				a dyn-service
 = 000D                      C	JFUNC_RELEASESERVICE	=	13	; unlin
				k from a dyn-service
 = 000E                      C	JFUNC_DELETESERVICE	=	14	; delet
				e a dyn-service
 = 000F                      C	JFUNC_LOCKSERVICEDATA	=	15	; lock 
				private mem of a dyn-service
 = 0010                      C	JFUNC_UNLOCKSERVICEDATA	=	16	; unloc
				k private mem of a dyn-service
 = 0011                      C	JFUNC_INITLOCK          =       17
 = 0012                      C	JFUNC_LOCKATTEMPT       =       18
 = 0013                      C	JFUNC_LOCK              =       19
 = 0014                      C	JFUNC_UNLOCK            =       20
 = 0015                      C	JFUNC_ALLOCJREMEMBER	=  	21
 = 0016                      C	JFUNC_ATTACHJREMEMBER	=  	22
 = 0017                      C	JFUNC_FREEJREMEMBER	=  	23
 = 0018                      C	JFUNC_ALLOCSERVICEMEM	=  	24
 = 0019                      C	JFUNC_FREESERVICEMEM	=  	25
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-8


			     C	
 = 0019                      C	JFUNC_MAX		=	25 	; Last 
				function (for range check only)
			     C	
 = 000B                      C	JFUNC_JINT		=	0bh
			     C	
			     C	;* === ServiceData Structure ==================
				============================= 
			     C	;* The ServiceData structure is used to share d
				ata among all callers of 
			     C	;* all of the Service routines.  One of these i
				s allocated in janus memory 
			     C	;* for each service.  
			     C	
			     C	ServiceData struc
			     C	
			     C	   ; The ServiceData ID numbers are used to uni
				quely identify
			     C	   ; application-specific services.  There are 
				two ID numbers:
			     C	   ; the global ApplicationID and the applicati
				on's local LocalID.
			     C	   ;
			     C	   ; The ApplicationID is a 32-bit number which
				 *must* be assigned to
			     C	   ; an application designer by Commodore-Amiga
				.
			     C	   ; Once a service ApplicationID is assigned t
				o an application
			     C	   ; designer, that designer "owns" that ID num
				ber forever.
			     C	   ; Note that this will provide unique Service
				Data identification
			     C	   ; numbers only for the first 4.3 billion Ser
				viceData designers
			     C	   ; after that, there's some risk of a collisi
				on.
			     C	   ;
			     C	   ; The LocalID, defined by the application de
				signer, is a local
			     C	   ; subcategory of the global ApplicationID.  
				These can mean anything
			     C	   ; at all.  There are 65,536 of these local I
				D's.
 0000  00000000              C	   sd_ApplicationID  dd 0
 0004  0000                  C	   sd_LocalID        dw 0
			     C	
			     C	
			     C	   ; The flag bits are defined below.  Some of 
				these are set by the
			     C	   ; application programs which use the service
				, and some are set
			     C	   ; by the system.
 0006  0000                  C	   sd_Flags    dw 0
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-9


			     C	
			     C	
			     C	   ; This field is initialized by the system fo
				r you, and then 
			     C	   ; is never touched by the system again.  Use
				rs of the 
			     C	   ; service can agree by convention that they 
				have to obtain 
			     C	   ; this lock before using the service.  
			     C	   ; If you are the AddService() caller and you
				 want this lock 
			     C	   ; to be locked before the service is linked 
				into the system, 
			     C	   ; set the AddService() ADDS_LOCKDATA argumen
				t flag.  
 0008  00                    C	   sd_ServiceDataLock   db 0
			     C	
			     C	
			     C	   ; This tracks the number of users currently 
				connected 
			     C	   ; to this service.
 0009  00                    C	   sd_AmigaUserCount   db 0
 000A  00                    C	   sd_PCUserCount      db 0
 000B  00                    C	   sd_ReservedByte     db 0
			     C	
			     C	   ; These are the standard janus memory descri
				ptions, which describe
			     C	   ; the parameter memory associated with this 
				service.  This memory
			     C	   ; (if any) will be allocated automatically b
				y the system when the
			     C	   ; service if first added.  The creator of th
				e service
			     C	   ; (the one who calls AddService()) supplies 
				the MemSize and
			     C	   ; MemType values; after the service is added
				 the MemPtr field
			     C	   ; will point to the parameter memory.  GetSe
				rvice() callers, after
			     C	   ; the service comes available, will find all
				 of these fields
			     C	   ; filled in with the appropriate values.
			     C	   ; The AmigaMemPtr and PCMemPtr both point to
				 the same location
			     C	   ; of Janus memory; an Amiga program should u
				se the AmigaMemPtr,
			     C	   ; and a PC program should use the PCMemPtr
 000C  0000                  C	   sd_MemSize        dw 0
 000E  0000                  C	   sd_MemType        dw 0
 0010  0000                  C	   sd_MemOffset      dw 0
 0012  00000000              C	   sd_AmigaMemPtr    dd 0
 0016  00000000              C	   sd_PCMemPtr       dd 0
			     C	
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-10


			     C	   ; This offset is used as the key for calls t
				o AllocServiceMem() 
			     C	   ; and FreeServiceMem().  This key can be use
				d by any one 
			     C	   ; who's learned about this service via eithe
				r AddService() 
			     C	   ; or GetService().  The system makes no memo
				ry allocations 
			     C	   ; using this key, so it's completely under a
				pplication control.
			     C	   ; Any memory attached to this key by calls t
				o AllocServiceMem() 
			     C	   ; will be freed automatically after the serv
				ice has been 
			     C	   ; deleted and all users of the service have 
				released the service.  
 001A  0000                  C	   sd_JRememberKey   dw 0
			     C	
			     C	
			     C	   ; These pointers are for the system-maintain
				ed lists of
			     C	   ; structures.  If you disturb any of these p
				ointers, you will be
			     C	   ; tickling the guru's nose, and when the gur
				u sneezes ...
 001C  0000                  C	   sd_NextServiceData      dw 0
 001E  00000000              C	   sd_FirstPCCustomer      dd 0
 0022  00000000              C	   sd_FirstAmigaCustomer   dd 0
			     C	
			     C	   ;
			     C	   ; Semaphore structure pointer for services t
				hat allow multiple customers
			     C	   ;
 0026  00000000              C	   sd_Semaphore 	   dd 0
			     C	
			     C	   ; These fields are reserved for future use 
 002A  0004[                 C	   sd_ZaphodReserved    dd 4 dup (0)
	   00000000          C	
			 ]   C	
			     C	
			     C	
 003A                        C	ServiceData ends
			     C	
			     C	
			     C	;* === Flag Definitions === 
			     C	
 = 0001                      C	SERVICE_DELETED      =   00001h    ; Owner of t
				his service deleted it
 = 0000                      C	SERVICE_DELETEDn     =   0
 = 0002                      C	EXPUNGE_SERVICE      =   00002h    ; Owner of s
				ervice should delete
 = 0001                      C	EXPUNGE_SERVICEn     =   1
 = 0004                      C	SERVICE_AMIGASIDE    =   00004h    ; Set if Ami
				ga created the service
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-11


 = 0002                      C	SERVICE_AMIGASIDEn   =   2
 = 0008                      C	SERVICE_PCWAIT	     =   00008h	   ; Set when P
				C calls a service
 = 0003                      C	SERVICE_PCWAITn      =   3	   ; Cleared wh
				en service replys
 = 0010                      C	AMIGA_EXCLUSIVE      =   00010h    ; Only one A
				miga customer allowed  
 = 0004                      C	AMIGA_EXCLUSIVEn     =   4
 = 0020                      C	PC_EXCLUSIVE         =   00020h    ; Only one P
				C customer allowed     
 = 0005                      C	PC_EXCLUSIVEn        =   5
 = 0040                      C	SERVICE_ADDED        =   00040h    ; Set when s
				ervice is added        
 = 0006                      C	SERVICE_ADDEDn       =   6
			     C	
			     C	
			     C	;* === ServiceCustomer Structure ==============
				============================= 
			     C	;* A ServiceCustomer structure is created for e
				ach "customer" of a given 
			     C	;* channel
			     C	
			     C	ServiceCustomer	struc
			     C	
 0000  00000000              C		scs_NextCustomer 	dd 0
			     C	
 0004  0000                  C		scs_Flags		dw 0
			     C	
 0006  00000000              C		scs_Task			dd 0 ;T
				his points to the task of the customer 
 000A  00000000              C		scs_SignalBit		dd 0 ;Signal th
				e customer with this bit 
			     C	
 000E  0004[                 C		scs_JazzReserved  	dd 4 dup (0)
	   00000000          C	
			 ]   C	
			     C	
			     C	
 001E                        C	ServiceCustomer	ends
			     C	
			     C	;* === Flag Definitions === *
			     C	;* These flags are set/cleared by the system
 = 0100                      C	CALL_TOPC_ONLY       =   0100h
 = 0008                      C	CALL_TOPC_ONLYn      =   8
 = 0200                      C	CALL_FROMPC_ONLY     =   0200h
 = 0009                      C	CALL_FROMPC_ONLYn    =   9
 = 0400                      C	CALL_TOAMIGA_ONLY    =   0400h
 = 000A                      C	CALL_TOAMIGA_ONLYn   =   10
 = 0800                      C	CALL_FROMAMIGA_ONLY  =   0800h
 = 000B                      C	CALL_FROMAMIGA_ONLYn =   11
			     C	
			     C	; === AddService() Flags ======================
				============================
			     C	; These are the definitions of the flag argumen
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-12


				ts that can be passed to the 
			     C	; AddService() function.
			     C	
 = 0001                      C	ADDS_EXCLUSIVE       = 00001h ; You want to be 
				the *only* Amiga customer
 = 0000                      C	ADDS_EXCLUSIVEn      = 0
 = 0002                      C	ADDS_TOPC_ONLY       = 00002h ; You want to sen
				d signals only to the PC
 = 0001                      C	ADDS_TOPC_ONLYn      = 1
 = 0004                      C	ADDS_FROMPC_ONLY     = 00004h ; You want to get
				 signals only from the PC
 = 0002                      C	ADDS_FROMPC_ONLYn    = 2
 = 0008                      C	ADDS_TOAMIGA_ONLY    = 00008h ; You want to sen
				d signals only to the Amiga
 = 0003                      C	ADDS_TOAMIGA_ONLYn   = 3
 = 0010                      C	ADDS_FROMAMIGA_ONLY  = 00010h ; You want to get
				 signals only from the Amiga
 = 0004                      C	ADDS_FROMAMIGA_ONLYn = 4
 = 0020                      C	ADDS_LOCKDATA        = 00020h ; S'DataLock lock
				ed before linking to system
 = 0005                      C	ADDS_LOCKDATAn       = 5
			     C	
			     C	;* These are the system's AddService() Flags 
 = 0100                      C	SD_CREATED           = 00100h
 = 0008                      C	SD_CREATEDn          = 8
			     C	
			     C	
			     C	
			     C	; === GetService() Flags ======================
				============================ 
			     C	; These are the definitions of the flag argumen
				ts that can be passed to the 
			     C	; GetService() function.
			     C	
 = 0001                      C	GETS_WAIT            = 00001h ; If service not 
				yet available, you'll wait
 = 0000                      C	GETS_WAITn           = 0
 = 0002                      C	GETS_TOPC_ONLY       = 00002h ; You want to sen
				d signals only to the PC
 = 0001                      C	GETS_TOPC_ONLYn      = 1
 = 0004                      C	GETS_FROMPC_ONLY     = 00004h ; You want to get
				 signals only from the PC
 = 0002                      C	GETS_FROMPC_ONLYn    = 2
 = 0008                      C	GETS_TOAMIGA_ONLY    = 00008h ; You want to sen
				d signals only to the Amiga
 = 0003                      C	GETS_TOAMIGA_ONLYn   = 3
 = 0010                      C	GETS_FROMAMIGA_ONLY  = 00010h ; You want to get
				 signals only from the Amiga
 = 0004                      C	GETS_FROMAMIGA_ONLYn = 4
 = 0020                      C	GETS_EXCLUSIVE       = 00020h ; You want to be 
				the *only* Amiga customer
 = 0005                      C	GETS_EXCLUSIVEn      = 5
 = 0040                      C	GETS_ALOAD_A         = 00040h ; Autoload the se
				rvice on the Amiga side
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-13


 = 0006                      C	GETS_ALOAD_An        = 6
 = 0080                      C	GETS_ALOAD_PC        = 00080h ; Autoload the se
				rvice on the PC side
 = 0007                      C	GETS_ALOAD_PCn       = 7
 = 0300                      C	GETS_WAITmask        = 00300h 
 = 0100                      C	GETS_WAIT_15         = 00100h ; Wait up to 15 s
				econds for a service
 = 0200                      C	GETS_WAIT_30         = 00200h ;       "    30  
				        "
 = 0300                      C	GETS_WAIT_120        = 00300h ;       "   120  
				        "
			     C	
			     C	
			     C	; === Service() Result Codes ==================
				======================== 
			     C	; These are the result codes that may be return
				ed by a call to a Service 
			     C	;
 =-0001                      C	JSERV_NOFUNCTION	= -1 	; Tried to call
				 a not supported function
 = 0000                      C	JSERV_OK         	=  0  	; All is well
 = 0000                      C	JSERV_PENDING	 	=  0  	; Called servic
				e still pending on Amiga side
 = 0001                      C	JSERV_FINISHED	 	=  1  	; Called servic
				e is finished on Amiga side
 = 0002                      C	JSERV_NOJANUSBASE	=  2  	; ServiceBase s
				tructure not defined
 = 0003                      C	JSERV_NOJANUSMEM 	=  3  	; We ran out of
				 Janus memory
 = 0004                      C	JSERV_NOAMIGAMEM 	=  4  	; On the Amiga 
				side we ran out of Amiga memory
 = 0005                      C	JSERV_NOPCMEM    	=  5  	; On the PC sid
				e we ran out of PC memory
 = 0006                      C	JSERV_NOSERVICE  	=  6  	; Tried to get 
				a service that doesn't exist
 = 0007                      C	JSERV_DUPSERVICE 	=  7  	; Tried to add 
				a service that already existed
 = 0008                      C	JSERV_ILLFUNCTION	=  8	; Tried to call
				 an illegal function
 = 0009                      C	JSERV_NOTEXCLUSIVE      =  9  ; Wanted to but c
				ouldn't be exclusive user 
 = 000A                      C	JSERV_BADAUTOLOAD       =  10 ; Wanted to autol
				oad but couldn't
			     C	
			     C	
			     C	
			     C	
			     C	
					include	..\amouse\mouseser.inc
			     C	;**********************************************
				*************************
			     C	; (PC Side File)
			     C	;
			     C	; mouseser.inc - MouseServ specific data struct
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-14


				ures
			     C	;
			     C	; 11-06-90 - rsd - created
			     C	;**********************************************
				**************************/
			     C	
			     C	; our magic numbers
 = 0001                      C	MOUSESERV_APPLICATION_ID	equ	1
 = 0002                      C	MOUSESERV_LOCAL_ID		equ	2
			     C	
			     C	; mouse "request" structure to get amiga mouse 
				info
			     C	MouseServReq	struc
 0000  0000                  C		AmigaPCX	dw	0	; mouse
				 delta X in "mickeys"
 0002  0000                  C		AmigaPCY	dw	0	; mouse
				 delta Y in "mickeys"
 0004  0000                  C		AmigaPCLeftP	dw	0	; delta
				 count of left button presses
 0006  0000                  C		AmigaPCRightP	dw	0	; delta
				 count of right button presses
 0008  0000                  C		AmigaPCLeftR	dw	0	; delta
				 count of left button releases
 000A  0000                  C		AmigaPCRightR	dw	0	; delta
				 count of right button releases
 000C  0000                  C		AmigaPCStatus	dw	0	; butto
				n status (?)
 000E  00                    C		WriteLock	db	0	; the l
				ock
 000F  00                    C		ChangeCount	db	0	; chang
				e count
 0010                        C	MouseServReq	ends
			     C	
			     C	; 7 words excluding the lock & change count
 = 0007                      C	DPSize		equ	7
			     C	
			     C	; card types
 = 0001                      C	VGAType		equ	1
 = 0002                      C	EGAType		equ	2
 = 0004                      C	CGAType		equ	4
 = 0008                      C	MDAType		equ	8
 = 0010                      C	HerType		equ	16
			     C	
			     C	; EGA Lib Table
			     C	ELTab struc
 0000  0000                  C		EGA_Port	dw	0	; addre
				ss of port
 0002  0000                  C		EGA_Values	dw	0	; addr.
				 of values for pointer
 0004  0000                  C		EGA_Defs	dw	0	; defau
				lts (as values)
 0006  00                    C		EGA_Count	db	0	; numbe
				r of registers at port
 0007  00                    C		EGA_Status	db	0	; statu
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-15


				s byte
 0008                        C	ELTab ends
			     C	
				
 = 0010				CursorWidth	equ	16		; make 
				these variables ?????
 = 0010				CursorHeight	equ	16
				
 0127  3FFF 1FFF 0FFF 07FF	DefaultMouse	dw	03FFFH,01FFFH,00FFFH,00
				7FFH,003FFH,001FFH,000FFH
       03FF 01FF 00FF		
 0135  007F 003F 001F 01FF			dw	0007FH,0003FH,0001FH,00
				1FFH,010FFH,030FFH,0F87FH
       10FF 30FF F87F		
 0143  F87F FC3F				dw	0F87FH,0FC3FH
 0147  0000 4000 6000 7000			dw	00000H,04000H,06000H,07
				000H,07800H,07C00H,07E00H
       7800 7C00 7E00		
 0155  7F00 7F80 7FC0 7C00			dw	07F00H,07F80H,07FC0H,07
				C00H,04600H,00600H,00300H
       4600 0600 0300		
 0163  0300 0180				dw	00300H,00180H
 0167				StateInfo:
 = 0167				DataStart	equ	$
				
 0167  FFFF			CursorFlag	dw	-1
 0169  0000			CursorSave	dw	0
 016B  0003[			SaveMask	db	3 dup (0)
	   00			
			 ]	
				
 016E  00			CursorX		db	0
 016F  00			CursorY		db	0
 0170  00			CSValid		db	0
 0171  00			GraphValid	db	0
 0172  0000			GraphCX		dw	0
 0174  0000			GraphCY		dw	0
 0176  00			TextCurs	db	0
 0177  00			TCType		db	0
 0178  FFFF			TCScrMask	dw	0FFFFH
 017A  7700			TCCursMask	dw	07700H
 017C  0020[			GraphicsCDef	dw	32 dup (0)
	   0000			
			 ]	
				
 01BC  0000			ScreenOffset	dw	0
 01BE  0000			ScreenSegment	dw	0
 01C0  0000			NewMask		dw	0
 01C2  0000			IntCallMask	dw	0
 01C4  0000			IntCallAddr	dw	0
 01C6  0000			IntCallSeg	dw	0
 01C8  0008			XMPRatio	dw	8
 01CA  0010			YMPRatio	dw	16
 01CC  0000			XMinCursor	dw	0
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-16


 01CE  027F			XMaxCursor	dw	639
 01D0  0000			YMinCursor	dw	0
 01D2  00C7			YMaxCursor	dw	199
 01D4  0000			CRTPageNumber	dw	0
 01D6  0000			LightPenMode	dw	0
 01D8  0000			ButtonStatus	dw	0
				
 01DA  E050			OddOffset	dw	50H-2000H	; offse
				t between even and following odd line
 01DC  2000			EvenOffset	dw	2000H		; offse
				t between odd and following even line
 01DE  00			EGA		db	0
 01DF  00			EGA350		db	0
 01E0  01			Bank		db	1
 01E1  00B8			LastFullMPos	dw	184
				
 01E3  0140			MouseX		dw	320
 01E5  0064			MouseY		dw	100
 01E7  00			XShift		db	0
 01E8  00			YShift		db	0
 01E9  0000			MickeyX		dw	0
 01EB  0000			MickeyY		dw	0
 01ED  0000			HotSpotX	dw	0
 01EF  0000			HotSpotY	dw	0
				
 01F1  00			DoMove		db	0
				
 01F2  00			CondFlag	db	0		; Condi
				tional off flag
 01F3  0000			LeftX		dw	0		; Condi
				tional off rectangle
 01F5  0000			RightX		dw	0
 01F7  0000			TopY		dw	0
 01F9  0000			BottomY		dw	0
				
 01FB  0010[			Buttons		dw	16 dup (0)
	   0000			
			 ]	
				
 = 0000				PressCount	equ	0
 = 0002				PressX		equ	2
 = 0004				PressY		equ	4
 = 0006				ReleaseCount	equ	6
 = 0008				ReleaseX	equ	8
 = 000A				ReleaseY	equ	10
				
				; EGAPlanes	db	4		
					; number of EGA planes
				
 021B  00C0[			GraphicsSave	db	192 dup(0)	
					; 3 x 16 x 4
	   00			
			 ]	
				
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-17


				
				
 02DB  0174			DataSize	dw	$-DataStart
				
 02DD  00			Hercules	db	0
				
				;---		don't split from here ...
				
 02DE  06 15			VersionNo	db	6,21		; emula
				ting 6.03
 02E0  0C14 R			CRMsg		dw	offset Customise
 02E2  0000 0000				dw	0,0
 02E6  02E8 R					dw	$+2
 02E8  0000					dw	0		; end o
				f chain
 02EA  0000			SaveSize	dw	0		; move 
				DataSize into this
 02EC  0167 R					dw	offset StateInfo
				
				;---		... to here
				
 02EE  0007[			DPCopyArea	dw	DPSize dup(0)
	   0000			
			 ]	
				
				
 02FC  00			ScreenMode	db	0
 02FD  0280			ScreenMaxX	dw	640
 02FF  00C8			ScreenMaxY	dw	200
				
 0301  00			InTimer		db	0
 0302  00			old_count	db	0
				
				;**********************************************
				******************************
				;*
				;* MouseInt
				;*
				;**********************************************
				******************************
 0303				MouseInt	PROC	NEAR
 0303  2E: F7 06 01C2 R FFFF		test	cs:IntCallMask,-1
 030A  74 6B				jz	NextTimer
				
 030C  FA				cli				; disab
				le interrupts - if not already
 030D  2E: F6 06 0301 R FF		test	cs:InTimer,-1
 0313  75 62				jnz	NextTimer		; still
				 running since last int.
				
 0315  2E: FE 06 0301 R			inc	cs:InTimer
 031A  55				push	bp
 031B  50				push	ax
 031C  53				push	bx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-18


 031D  51				push	cx
 031E  52				push	dx
 031F  56				push	si
 0320  57				push	di
 0321  1E				push	ds
 0322  06				push	es
 0323  0E				push	cs
 0324  1F				pop	ds
				
 0325  E8 0A60 R			call	MouseRead		; read 
				Mouse info from DPRam
 0328  A1 01C0 R			mov	ax,NewMask
 032B  0B C0				or	ax,ax
 032D  74 3A				jz	NoChange
 032F  23 06 01C2 R			and	ax,IntCallMask		; does 
				user want this one ?
 0333  74 34				jz	NoChange
 0335  8A 0E 01E7 R			mov	cl,XShift		; round
				 MouseX to nearest 1<<XShift
 0339  8B 1E 01E3 R			mov	bx,MouseX
 033D  D3 FB				sar	bx,cl
 033F  D3 E3				shl	bx,cl
 0341  8A 0E 01E8 R			mov	cl,YShift		; round
				 MouseY to nearest 1<<YShift
 0345  8B 16 01E5 R			mov	dx,MouseY
 0349  D3 FA				sar	dx,cl
 034B  D3 E2				shl	dx,cl
 034D  8B CB				mov	cx,bx			; want 
				X co-ord in CX
 034F  8B 1E 01D8 R			mov	bx,ButtonStatus
 0353  8B 3E 01E9 R			mov	di,MickeyX
 0357  8B 36 01EB R			mov	si,MickeyY
 035B  9C				pushf
 035C  FB				sti
 035D  FF 1E 01C4 R			call	dword ptr IntCallAddr
 0361  9D				popf
 0362  2E: C7 06 01C0 R 0000		mov	cs:NewMask,0
 0369				NoChange:
					
 0369  07				pop	es
 036A  1F				pop	ds
 036B  5F				pop	di
 036C  5E				pop	si
 036D  5A				pop	dx
 036E  59				pop	cx
 036F  5B				pop	bx
 0370  58				pop	ax
 0371  5D				pop	bp
 0372  2E: FE 0E 0301 R			dec	cs:InTimer
 0377				NextTimer:
 0377  C3				ret
				
 0378				MouseInt	ENDP
				;**********************************************
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-19


				******************************
				;*
				;* Null
				;*
				;**********************************************
				******************************
				
 0378				Null		PROC	NEAR
 0378  C3				ret
 0379				Null		ENDP
				
				;**********************************************
				******************************
				;*
				;* Timer
				;*
				;**********************************************
				******************************
				
 0379				Timer		PROC	FAR
				
 0379  9C				pushf
 037A  2E: FF 1E 010E R			call	cs:dword ptr TimerOffset
 037F  2E: FF 16 0106 R			call	cs:[TimerProc]
 0384  CF				iret
				
 0385				Timer		ENDP
				
				;**********************************************
				******************************
				;*
				;* Other
				;*
				;**********************************************
				******************************
 0385				Other		PROC	FAR
				
 0385  9C				pushf
 0386  2E: FF 1E 0112 R			call	cs:dword ptr OtherOffset
 038B  2E: FF 16 0108 R			call	cs:[OtherProc]
 0390  CF				iret
				
 0391				Other		ENDP
				
				
				;**********************************************
				******************************
				;*
				;* SetVideoPars
				;*
				;**********************************************
				******************************
 0391				SetVideoPars	PROC	NEAR
				
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-20


 0391  1E				push	ds
 0392  0E				push	cs
 0393  1F				pop	ds
 0394  C7 06 01BE R B800		mov	ScreenSegment,0B800H	
					; CGA address
 039A  C7 06 02FD R 0280		mov	ScreenMaxX,640		
					; EGA
 03A0  C7 06 02FF R 00C8		mov	ScreenMaxY,200		
					; EGA
 03A6  C7 06 01DA R E050		mov	OddOffset,50H-2000H	
					; EGA
 03AC  C7 06 01DC R 2000		mov	EvenOffset,2000H	
					; EGA
 03B2  C6 06 01DE R 00			mov	EGA,0			
					; EGA
 03B7  C6 06 01DF R 00			mov	EGA350,0		
					; EGA
 03BC  3D 0001				cmp	ax,1
 03BF  7F 0D				jg	VideoNot01
 03C1  C6 06 01E7 R 04			mov	XShift,4
 03C6  C6 06 01E8 R 03			mov	YShift,3
 03CB  E9 0466 R			jmp	TellVideo
 03CE				VideoNot01:
 03CE  3D 0003				cmp	ax,3
 03D1  7F 0D				jg	VideoNot23
 03D3				VideoText8x8:
 03D3  C6 06 01E7 R 03			mov	XShift,3
 03D8  C6 06 01E8 R 03			mov	YShift,3
 03DD  E9 0466 R			jmp	TellVideo
 03E0				VideoNot23:
 03E0  3D 0007				cmp	ax,7
 03E3  75 08				jne	VideoGraphics
 03E5  C7 06 01BE R B000		mov	ScreenSegment,0B000H	
					; mono address
 03EB  EB E6				jmp	VideoText8x8
 03ED				VideoGraphics:
 03ED  C6 06 01E7 R 00			mov	XShift,0
 03F2  C6 06 01E8 R 00			mov	YShift,0
 03F7  F6 06 02DD R FF			test	Hercules,-1
 03FC  74 3C				jz	VGNotHerc
 03FE  C7 06 02FD R 02D0		mov	ScreenMaxX,720
 0404  C7 06 02FF R 015C		mov	ScreenMaxY,348
 040A  C7 06 01DA R A05A		mov	OddOffset,5AH-6000H
 0410  C7 06 01DC R 2000		mov	EvenOffset,2000H
 0416  32 E4				xor	ah,ah
 0418  A0 02DD R			mov	al,Hercules
 041B  2C 01				sub	al,1
 041D  A3 01D4 R			mov	CRTPageNumber,ax
 0420  0B C0				or	ax,ax
 0422  75 06				jnz	VGHercPg2
 0424  C7 06 01BE R B000		mov	ScreenSegment,0B000H
 042A				VGHercPg2:				
					; B800 already set
 042A  2C 06				sub	al,6
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-21


 042C  F7 D8				neg	ax			
					; 5 for page 1, 6 for page 0
 042E  50				push	ax
 042F  33 C0				xor	ax,ax
 0431  8E D8				mov	ds,ax			
					; ds = 0
 0433  58				pop	ax
 0434  A2 0449				mov	ds:[449H],al
 0437  EB 2D 90				jmp	TellVideo
 043A				VGNotHerc:
 043A  3D 000D				cmp	ax,13			
					; EGA
 043D  72 27				jb	TellVideo		
					; EGA
 043F  C7 06 01BE R A000		mov	ScreenSegment,0A000H	
					; EGA
 0445  C7 06 01DA R 0050		mov	OddOffset,50H		
					; EGA
 044B  C7 06 01DC R 0050		mov	EvenOffset,50H		
					; EGA
 0451  C6 06 01DE R FF			mov	EGA,-1			
					; EGA
 0456  3D 000F				cmp	ax,15			
					; EGA
 0459  72 0B				jb	TellVideo		
					; EGA
 045B  C7 06 02FF R 015E		mov	ScreenMaxY,350		
					; EGA
 0461  C6 06 01DF R FF			mov	EGA350,-1		
					; EGA
 0466				TellVideo:
 0466  A1 02FF R			mov	ax,ScreenMaxY
 0469  2D 0010				sub	ax,16
 046C  A3 01E1 R			mov	LastFullMPos,ax
 046F  1F				pop	ds
 0470  FB				sti
 0471  C3				ret
				
 0472				SetVideoPars	ENDP
				
				;**********************************************
				******************************
				;*
				;* Video
				;*
				;**********************************************
				******************************
 0472				Video		PROC	FAR
				
 0472  0A E4				or	ah,ah
 0474  75 39				jnz	VideoContinue
 0476				NewVideo:
 0476  50				push	ax
 0477  57				push	di
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-22


 0478  06				push	es
				
 0479  50				push	ax
 047A  1E				push	ds
 047B  0E				push	cs
 047C  1F				pop	ds			; ds = 
				cs
 047D  E8 0580 R			call	DoHideCursor
 0480  C7 06 0167 R FFFF		mov	CursorFlag,-1
 0486  1F				pop	ds			; resto
				re ds
 0487  58				pop	ax			; resto
				re ax
 0488  9C				pushf
 0489  2E: FF 1E 0116 R			call	cs:dword ptr VideoOffset
					; simulate interrupt
 048E  33 C0				xor	ax,ax
 0490  8E C0				mov	es,ax
 0492  26: A0 0449			mov	al,es:[0449H]		
					; video mode
 0496  24 7F				and	al,7fH			
					; remove 'don't clear' bit
 0498  2E: 38 06 02FC R			cmp	cs:ScreenMode,al
 049D  74 0C				jz	SameVideo
 049F  2E: A2 02FC R			mov	cs:ScreenMode,al
 04A3  50				push	ax			
					; save for InitEGALib
 04A4  E8 0391 R			call	SetVideoPars
 04A7  58				pop	ax			
					; ax = screen mode
 04A8  E8 1410 R			call	InitEGALib		
					; init EGA, if it is EGA
 04AB				SameVideo:
 04AB  07				pop	es
 04AC  5F				pop	di
 04AD  58				pop	ax
 04AE  CF				iret
				
 04AF				VideoContinue:
 04AF  2E: F6 06 0123 R 02		test	cs:CardActive,EGAType
 04B5  74 09				jz	VideoNormal
 04B7  80 FC F0				cmp	ah,0f0h
 04BA  72 04				jb	VideoNormal
 04BC  E8 11D5 R			call	EGAProc
 04BF  CF				iret				
					; don't jump to SameVideo
				
 04C0				VideoNormal:
 04C0  2E: FF 2E 0116 R			jmp	cs:dword ptr VideoOffset
				
 04C5				Video		ENDP
				
				
				;**********************************************
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-23


				******************************
				;*
				;* Print
				;*
				;**********************************************
				******************************
 04C5				Print		PROC	NEAR
 04C5  9C				pushf
 04C6  FB				sti
 04C7  B4 05				mov	ah,5
 04C9  CD 21				int	21H
 04CB  9D				popf
 04CC  C3				ret
 04CD				Print		ENDP
				
				;**********************************************
				******************************
				;*
				;* Trace
				;*
				;**********************************************
				******************************
 04CD				ETrace		PROC	NEAR
 04CD  2E: F6 06 0103 R 02		test	cs:DoTrace,2
 04D3  74 6C				jz	NoTrace
 04D5  50				push	ax
 04D6  52				push	dx
					
 04D7  BA 0001				mov	dx,1			; EGA t
				race identifier
				
 04DA  EB 0D 90				jmp	TraceCommon
				
 04DD				ETrace		ENDP
				
 04DD				Trace		PROC	NEAR
 04DD  2E: F6 06 0103 R 01		test	cs:DoTrace,1
 04E3  74 5C				jz	NoTrace
 04E5  50				push	ax
 04E6  52				push	dx
					
 04E7  33 D2				xor	dx,dx			; mouse
				 trace identifier
				
 04E9				TraceCommon:
 04E9  86 F2				xchg	dh,dl
 04EB  E8 04C5 R			call	Print
 04EE  86 F2				xchg	dh,dl
 04F0  E8 04C5 R			call	Print
				
 04F3  5A				pop	dx
 04F4  58				pop	ax
 04F5  50				push	ax
 04F6  52				push	dx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-24


				
 04F7  57				push	di
 04F8  57				push	di
 04F9  56				push	si
 04FA  56				push	si
 04FB  52				push	dx
 04FC  52				push	dx
 04FD  51				push	cx
 04FE  51				push	cx
 04FF  53				push	bx
 0500  53				push	bx
 0501  50				push	ax
 0502  50				push	ax
					
 0503  5A				pop	dx
 0504  8A D6				mov	dl,dh
 0506  E8 04C5 R			call	Print		; ah
 0509  5A				pop	dx
 050A  E8 04C5 R			call	Print		; al
 050D  5A				pop	dx
 050E  8A D6				mov	dl,dh
 0510  E8 04C5 R			call	Print		; bh
 0513  5A				pop	dx
 0514  E8 04C5 R			call	Print		; bl
 0517  5A				pop	dx
 0518  8A D6				mov	dl,dh
 051A  E8 04C5 R			call	Print		; ch
 051D  5A				pop	dx
 051E  E8 04C5 R			call	Print		; cl
 0521  5A				pop	dx
 0522  8A D6				mov	dl,dh
 0524  E8 04C5 R			call	Print		; dh
 0527  5A				pop	dx
 0528  E8 04C5 R			call	Print		; dl
 052B  5A				pop	dx
 052C  8A D6				mov	dl,dh
 052E  E8 04C5 R			call	Print		; si h
 0531  5A				pop	dx
 0532  E8 04C5 R			call	Print		; si l
 0535  5A				pop	dx
 0536  8A D6				mov	dl,dh
 0538  E8 04C5 R			call	Print		; di h
 053B  5A				pop	dx
 053C  E8 04C5 R			call	Print		; di l
				
 053F  5A				pop	dx
 0540  58				pop	ax
 0541				NoTrace:
 0541  C3				ret
				
 0542				Trace		ENDP
				
				;**********************************************
				******************************
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-25


				;*
				;* DoCondOff
				;*
				;**********************************************
				******************************
				;	returns with C flag set if cursor has b
				een turned off
				
 0542				DoCondOff	PROC	NEAR
 0542  50				push	ax
 0543  F6 06 01F2 R FF			test	CondFlag,-1
 0548  74 33				jz	NotCondOff
 054A  A1 01E3 R			mov	ax,MouseX		; compa
				re co-ords with corners of
 054D  2B 06 01ED R			sub	ax,HotSpotX
 0551  3B 06 01F5 R			cmp	ax,RightX		; condi
				tional off area
 0555  7F 26				jg	NotCondOff
 0557  05 0010				add	ax,CursorWidth
 055A  3B 06 01F3 R			cmp	ax,LeftX
 055E  7C 1D				jl	NotCondOff
 0560  A1 01E5 R			mov	ax,MouseY
 0563  2B 06 01EF R			sub	ax,HotSpotY
 0567  3B 06 01F9 R			cmp	ax,BottomY
 056B  7F 10				jg	NotCondOff
 056D  05 0010				add	ax,CursorHeight
 0570  3B 06 01F7 R			cmp	ax,TopY
 0574  7C 07				jl	NotCondOff
 0576  E8 0580 R			call	DoHideCursor
 0579  F9				stc
 057A  EB 02 90				jmp	CondOffExit
 057D				NotCondOff:
 057D  F8				clc
 057E				CondOffExit:
 057E  58				pop	ax
 057F  C3				ret
				
 0580				DoCondOff	ENDP
				
				;**********************************************
				******************************
				;*
				;* DoHideCursor
				;*
				;**********************************************
				******************************
 0580				DoHideCursor	PROC	NEAR
				
 0580  F7 06 0167 R FFFF		test	CursorFlag,-1
 0586  75 21				jnz	DoHCexit		; curso
				r not shown
 0588  F6 06 01E7 R FF			test	XShift,-1		; if no
				n-zero then in text mode
 058D  74 17				jz	HideGraphics
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-26


 058F  F6 06 0176 R FF			test	TextCurs,-1		; zero 
				is software cursor
 0594  75 06				jnz	HideHardware
 0596  E8 0A0E R			call	TidySoftCursor
 0599  EB 0E 90				jmp	DoHCexit
 059C				HideHardware:
 059C  B9 2000				mov	cx,2000H		; curso
				r off
 059F  B4 01				mov	ah,01			; set c
				ursor type ( = no display )
 05A1  CD 10				int	10H			; do it
 05A3  EB 04 90				jmp	DoHCexit
 05A6				HideGraphics:
 05A6  E8 0902 R			call	TidyGraphCursor
 05A9				DoHCexit:
 05A9  FF 0E 0167 R			dec	CursorFlag
 05AD  C3				ret
				
 05AE				DoHideCursor	ENDP
				
				;**********************************************
				******************************
				;*
				;* MouseToCursor
				;*
				;**********************************************
				******************************
 05AE				MouseToCursor	PROC	NEAR
				
 05AE  A1 01E5 R			mov	ax,MouseY
 05B1  8A 0E 01E8 R			mov	cl,YShift
 05B5  D3 E8				shr	ax,cl
 05B7  A2 016F R			mov	CursorY,al
 05BA  A1 01E3 R			mov	ax,MouseX
 05BD  8A 0E 01E7 R			mov	cl,XShift
 05C1  D3 E8				shr	ax,cl
 05C3  A2 016E R			mov	CursorX,al
 05C6  C3				ret
				
 05C7				MouseToCursor	ENDP
				
					include	GraphC.asm
			     C	
 = 0003                      C	SaveInc	equ	3		; Variable for 
				testing
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;*	Increment
			     C	;*
			     C	;**********************************************
				******************************
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-27


			     C	;	input	ax	line number
			     C	
 05C7                        C	Increment	PROC	NEAR
			     C	
 05C7  50                    C		push	ax
 05C8  2E: 22 06 01E0 R      C		and	al,cs:Bank		; Bank 
				number
 05CD  2E: 3A 06 01E0 R      C		cmp	al,cs:Bank		; last 
				bank ?
 05D2  75 08                 C		jne	IncNextBank		; no - 
				add bank offset
 05D4  2E: 03 3E 01DA R      C		add	di,cs:OddOffset		; yes -
				 subtract n*bank offset, add line offs.
 05D9  EB 06 90              C		jmp	IncExit
 05DC                        C	IncNextBank:
 05DC  2E: 03 3E 01DC R      C		add	di,cs:EvenOffset
 05E1                        C	IncExit:
 05E1  58                    C		pop	ax
 05E2  C3                    C		ret
			     C	
 05E3                        C	Increment	ENDP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;*	DoCGACursor	-	CGA here means 
				'not EGA'
			     C	;*
			     C	;**********************************************
				******************************
			     C	
			     C	;	input	ax	line number for mouse i
				mage start
			     C	;		bl	byte width of area to r
				eceive image
			     C	;		bh	bit offset of start of 
				image within first byte
			     C	;		dl	first byte of area to r
				eceive image (rel. to line)
			     C	;		cx	number of lines of imag
				e to draw
			     C	;		es:di	address of top,left of 
				area to receive image
			     C	;		ds:si	address of mouse image 
				definition
			     C	
 05E3                        C	DoCGACursor	PROC	NEAR
			     C	
 05E3  FC                    C		cld
 05E4                        C	NextLine:
 05E4  52                    C		push	dx
 05E5  51                    C		push	cx
 05E6  53                    C		push	bx
 05E7  50                    C		push	ax
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-28


 05E8  0B C0                 C		or	ax,ax			; check
				 line number
 05EA  78 4F                 C		js	RowLoopEnd		; skip 
				negative lines !!
 05EC  8A CF                 C		mov	cl,bh			; cl = 
				shift
 05EE  32 FF                 C		xor	bh,bh			; bx = 
				count
 05F0  8A EA                 C		mov	ch,dl			; ch = 
				start byte
			     C	
			     C	; byte 0
			     C		
 05F2  B4 FF                 C		mov	ah,-1
 05F4  8A 44 01              C		mov	al,1[si]		; ax = 
				screen mask byte 0 !
 05F7  D3 C8                 C		ror	ax,cl
 05F9  26: 22 05             C		and	al,es:0[di]		; and w
				ith screen contents
 05FC  32 F6                 C		xor	dh,dh
 05FE  8A 54 21              C		mov	dl,33[si]		; ax = 
				cursor mask byte 0 !
 0601  D3 CA                 C		ror	dx,cl
 0603  32 C2                 C		xor	al,dl
 0605  0A ED                 C		or	ch,ch
 0607  78 03                 C		js	GCNoByte0		; negat
				ive - skip byte 0
 0609  26: 88 05             C		mov	es:0[di],al		; store
				 in screen
 060C                        C	GCNoByte0:	
 060C  4B                    C		dec	bx
 060D  74 2C                 C		jz	RowLoopEnd
			     C	
			     C	; byte 1
			     C		
 060F  D2 C4                 C		rol	ah,cl			; shift
				 back
 0611  8A 04                 C		mov	al,0[si]		; ax = 
				screen mask byte 1 !
 0613  D3 C8                 C		ror	ax,cl
 0615  26: 22 45 01          C		and	al,es:1[di]		; and w
				ith screen contents
 0619  D2 C6                 C		rol	dh,cl			; shift
				 back
 061B  8A 54 20              C		mov	dl,32[si]		; ax = 
				cursor mask byte 1 !
 061E  D3 CA                 C		ror	dx,cl
 0620  32 C2                 C		xor	al,dl
 0622  FE C5                 C		inc	ch
 0624  78 04                 C		js	GCNoByte1		; still
				 negative - skip byte 1
 0626  26: 88 45 01          C		mov	es:1[di],al		; store
				 in screen
 062A                        C	GCNoByte1:	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-29


 062A  4B                    C		dec	bx
 062B  74 0E                 C		jz	RowLoopEnd
			     C	
			     C	; byte 2
			     C		
 062D  26: 22 65 02          C		and	ah,es:2[di]		; and w
				ith screen contents
 0631  32 E6                 C		xor	ah,dh
 0633  FE C5                 C		inc	ch
 0635  78 04                 C		js	GCNoByte2		; still
				 negative - skip byte 2
 0637  26: 88 65 02          C		mov	es:2[di],ah		; store
				 in screen
 063B                        C	GCNoByte2:			; needed ?????
			     C		
 063B                        C	RowLoopEnd:
 063B  83 C6 02              C		add	si,2			; curso
				r image pointer
			     C	
 063E  58                    C		pop	ax			; line 
				number
			     C	
 063F  E8 05C7 R             C		call	Increment		; incre
				ment DI
			     C	
 0642  40                    C		inc	ax			; next 
				line number
 0643  5B                    C		pop	bx
 0644  59                    C		pop	cx
 0645  5A                    C		pop	dx
 0646  E2 9C                 C		loop	NextLine
 0648  C3                    C		ret
			     C	
 0649                        C	DoCGACursor	ENDP
			     C	
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;*	DoEGACursor
			     C	;*
			     C	;**********************************************
				******************************
			     C	
			     C	;	input	ax	line number for mouse i
				mage start
			     C	;		bl	byte width of area to r
				eceive image
			     C	;		bh	bit offset of start of 
				image within first byte
			     C	;		dl	first byte of area to r
				eceive image (rel. to line)
			     C	;		cx	number of lines of imag
				e to draw (ch = 0)
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-30


			     C	;		es:di	address of top,left of 
				area to receive image
			     C	;		ds:si	address of mouse image 
				definition
			     C	
			     C	
 0649  0000                  C	BytesToGo	dw	0
 064B  7F80                  C	SaveArea	dw	7f80H		; needs
				 at least 96 bytes
 064D  0000                  C	SaveTemp	dw	0
			     C	
 064F                        C	DoEGACursor	PROC	NEAR
			     C	
 064F  50                    C		push	ax
 0650  52                    C		push	dx
			     C	
 0651  BA 03CE               C		mov	dx,3ceh
 0654  B8 FF08               C		mov	ax,0ff08H		; point
				er 8 data ff - bit mask
 0657  EF                    C		out	dx,ax
			     C	
 0658  B8 0F02               C		mov	ax,00F02H		; map m
				ask select register
 065B  BA 03C4               C		mov	dx,3c4h
 065E  EF                    C		out	dx,ax			; write
				 to all planes
			     C	
 065F  A1 064B R             C		mov	ax,SaveArea		; start
				 of 96 (*4 planes) bytes of ..
 0662  A3 064D R             C		mov	SaveTemp,ax		;  ..  
				'unused' EGA RAM
			     C	
 0665  5A                    C		pop	dx			; resto
				re
 0666  58                    C		pop	ax			; resto
				re
			     C	
 0667                        C	EGA_NextLine:
 0667  52                    C		push	dx
 0668  51                    C		push	cx
 0669  53                    C		push	bx
 066A  50                    C		push	ax
 066B  0B C0                 C		or	ax,ax			; check
				 line number
 066D  79 03                 C		jns	EGA_RowLoopStart
			     C	
 066F  E9 0745 R             C		jmp	EGA_RowLoopEnd		; skip 
				negative lines !!
			     C	
 0672                        C	EGA_RowLoopStart:
 0672  8A CF                 C		mov	cl,bh			; cl = 
				shift
 0674  32 FF                 C		xor	bh,bh			; bx = 
				count (bytes per line)
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-31


 0676  89 1E 0649 R          C		mov	BytesToGo,bx
 067A  8A EA                 C		mov	ch,dl			; ch = 
				start byte
 067C  BA 03CE               C		mov	dx,3ceh
			     C	; byte 0
			     C		
 067F  B4 FF                 C		mov	ah,-1
 0681  8A 44 01              C		mov	al,1[si]		; ax = 
				screen mask byte 0 !
 0684  D3 C8                 C		ror	ax,cl			; ... s
				hifted to align
 0686  8A 5C 21              C		mov	bl,33[si]		; bx = 
				cursor mask byte 0 !
 0689  D3 CB                 C		ror	bx,cl			; ... s
				hifted to align
 068B  0A ED                 C		or	ch,ch
 068D  78 2F                 C		js	EGA_GCNoByte0		; negat
				ive - skip byte 0
			     C	
 068F  53                    C		push	bx			; save 
				cursor mask
			     C	
			     C	;	read original from screen into latches 
				and also copy to save area
			     C	
 0690  50                    C		push	ax			; save 
				screen maks
 0691  26: 8A 05             C		mov	al,es:0[di]		; load 
				the latches
 0694  8B 1E 064D R          C		mov	bx,SaveTemp		; point
				er to save/work area for this line
 0698  B8 0003               C		mov	ax,0003H		; write
				 normally
 069B  EF                    C		out	dx,ax
 069C  B8 0105               C		mov	ax,0105H		; write
				 mode 1
 069F  EF                    C		out	dx,ax
 06A0  26: 88 07             C		mov	es:0[bx],al		; store
				 original in save area
 06A3  B8 0005               C		mov	ax,0005H		; write
				 mode 0
 06A6  EF                    C		out	dx,ax
			     C	
			     C	;	and the screen mask with the contents o
				f the latches and write to work
			     C	
 06A7  B8 0803               C		mov	ax,0803H		; do AN
				D when writing
 06AA  EF                    C		out	dx,ax
 06AB  58                    C		pop	ax			; resto
				re screen mask
 06AC  26: 88 47 20          C		mov	es:32[bx],al
			     C	
			     C	;	load the latches from the work area, xo
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-32


				r cursor mask with this and
			     C	;	write to the screen
			     C	
 06B0  50                    C		push	ax
 06B1  26: 8A 47 20          C		mov	al,es:32[bx]		; load 
				the latches
 06B5  B8 1803               C		mov	ax,1803H		; do XO
				R when writing
 06B8  EF                    C		out	dx,ax
 06B9  58                    C		pop	ax
 06BA  5B                    C		pop	bx			; resto
				re cursor mask
 06BB  26: 88 1D             C		mov	es:0[di],bl
 06BE                        C	EGA_GCNoByte0:	
 06BE  2E: FF 0E 0649 R      C		dec	cs:BytesToGo
 06C3  74 48                 C		jz	EGA_SteppingStone
			     C	
			     C	; byte 1
			     C		
 06C5  D2 C4                 C		rol	ah,cl			; shift
				 back
 06C7  8A 04                 C		mov	al,0[si]		; ax = 
				screen mask byte 1 !
 06C9  D3 C8                 C		ror	ax,cl
 06CB  D2 C7                 C		rol	bh,cl			; shift
				 back
 06CD  8A 5C 20              C		mov	bl,32[si]		; bx = 
				cursor mask byte 1 !
 06D0  D3 CB                 C		ror	bx,cl
 06D2  FE C5                 C		inc	ch
 06D4  78 32                 C		js	EGA_GCNoByte1		; still
				 negative - skip byte 1
			     C	
 06D6  53                    C		push	bx			; save 
				cursor mask
			     C	
			     C	;	read original from screen into latches 
				and also copy to save area
			     C	
 06D7  50                    C		push	ax
 06D8  26: 8A 45 01          C		mov	al,es:1[di]		; load 
				the latches
 06DC  8B 1E 064D R          C		mov	bx,SaveTemp		; point
				er to save/work area for this line
 06E0  B8 0003               C		mov	ax,0003H		; write
				 normally
 06E3  EF                    C		out	dx,ax
 06E4  B8 0105               C		mov	ax,0105H		; write
				 mode 1
 06E7  EF                    C		out	dx,ax
 06E8  26: 88 47 01          C		mov	es:1[bx],al		; store
				 original in save area
 06EC  B8 0005               C		mov	ax,0005H		; write
				 mode 0
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-33


 06EF  EF                    C		out	dx,ax
			     C	
			     C	;	and the screen mask with the contents o
				f the latches and write to work
			     C	
 06F0  B8 0803               C		mov	ax,0803H		; do AN
				D when writing
 06F3  EF                    C		out	dx,ax
 06F4  58                    C		pop	ax
 06F5  26: 88 47 21          C		mov	es:33[bx],al
			     C	
			     C	;	load the latches from the work area, xo
				r cursor mask with this and
			     C	;	write to the screen
			     C	
 06F9  50                    C		push	ax
 06FA  26: 8A 47 21          C		mov	al,es:33[bx]		; load 
				the latches
 06FE  B8 1803               C		mov	ax,1803H		; do XO
				R when writing
 0701  EF                    C		out	dx,ax
 0702  58                    C		pop	ax
 0703  5B                    C		pop	bx			; resto
				re cursor mask
 0704  26: 88 5D 01          C		mov	es:1[di],bl
			     C	
 0708                        C	EGA_GCNoByte1:	
 0708  2E: FF 0E 0649 R      C		dec	cs:BytesToGo
 070D                        C	EGA_SteppingStone:
 070D  74 36                 C		jz	EGA_RowLoopEnd
			     C	
			     C	; byte 2
			     C		
 070F  FE C5                 C		inc	ch
 0711  78 32                 C		js	EGA_GCNoByte2		; still
				 negative - skip byte 2
			     C	
			     C	
 0713  53                    C		push	bx			; save 
				cursor mask
			     C	
			     C	;	read original from screen into latches 
				and also copy to save area
			     C	
 0714  50                    C		push	ax
 0715  26: 8A 45 02          C		mov	al,es:2[di]		; load 
				the latches
 0719  8B 1E 064D R          C		mov	bx,SaveTemp		; point
				er to save/work area for this line
 071D  B8 0003               C		mov	ax,0003H		; write
				 normally
 0720  EF                    C		out	dx,ax
 0721  B8 0105               C		mov	ax,0105H		; write
				 mode 1
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-34


 0724  EF                    C		out	dx,ax
 0725  26: 88 47 02          C		mov	es:2[bx],al		; store
				 original in save area
 0729  B8 0005               C		mov	ax,0005H		; write
				 mode 0
 072C  EF                    C		out	dx,ax
			     C	
			     C	;	and the screen mask with the contents o
				f the latches and write to work
			     C	
 072D  B8 0803               C		mov	ax,0803H		; do AN
				D when writing
 0730  EF                    C		out	dx,ax
 0731  58                    C		pop	ax
 0732  26: 88 67 22          C		mov	es:34[bx],ah
			     C	
			     C	;	load the latches from the work area, xo
				r cursor mask with this and
			     C	;	write to the screen
			     C	
 0736  50                    C		push	ax
 0737  26: 8A 47 22          C		mov	al,es:34[bx]		; load 
				the latches
 073B  B8 1803               C		mov	ax,1803H		; do XO
				R when writing
 073E  EF                    C		out	dx,ax
 073F  58                    C		pop	ax
 0740  5B                    C		pop	bx			; resto
				re cursor mask
 0741  26: 88 7D 02          C		mov	es:2[di],bh
			     C	
			     C	
 0745                        C	EGA_GCNoByte2:			; needed ?????
			     C		
 0745                        C	EGA_RowLoopEnd:
 0745  83 C6 02              C		add	si,2			; curso
				r image pointer
 0748  83 06 064D R 03       C		add	SaveTemp,SaveInc	
					; save/work pointer
			     C	
 074D  58                    C		pop	ax			; line 
				number
			     C	
 074E  E8 05C7 R             C		call	Increment		; incre
				ment DI
			     C	
 0751  40                    C		inc	ax			; next 
				line number
 0752  5B                    C		pop	bx
 0753  59                    C		pop	cx
 0754  5A                    C		pop	dx
 0755  E2 01                 C		loop	EGA_Loop
			     C	
			     C	;	mov	dx,3ceh
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-35


			     C	;	mov	ax,0003H		; do st
				raight write
			     C	;	out	dx,ax
			     C		
 0757  C3                    C		ret
			     C	
 0758                        C	EGA_Loop:
 0758  E9 0667 R             C		jmp	EGA_NextLine
			     C	
 075B                        C	DoEGACursor	ENDP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* ShowGraphCursor
			     C	;*
			     C	;**********************************************
				******************************
 075B                        C	ShowGraphCursor	PROC	NEAR
			     C	
 075B  9C                    C		pushf
 075C  FA                    C		cli
			     C	
 075D  50                    C		push	ax
 075E  53                    C		push	bx
 075F  51                    C		push	cx
 0760  52                    C		push	dx
 0761  06                    C		push	es
 0762  57                    C		push	di
 0763  1E                    C		push	ds
 0764  56                    C		push	si
			     C	
 0765  33 C0                 C		xor	ax,ax
 0767  8E C0                 C		mov	es,ax
 0769  26: A1 044C           C		mov	ax,es:[44ch]		; scree
				n page size
 076D  F7 26 01D4 R          C		mul	CRTPageNumber		; mouse
				 page offset (need != 0:44e)
 0771  8B F8                 C		mov	di,ax			; base 
				for ScreenOffset
 0773  A1 01E3 R             C		mov	ax,MouseX
 0776  2B 06 01ED R          C		sub	ax,HotSpotX
 077A  3B 06 02FD R          C		cmp	ax,ScreenMaxX
 077E  73 1A                 C		jae	GCQuit
 0780  A3 0172 R             C		mov	GraphCX,ax
 0783  D1 F8                 C		sar	ax,1
 0785  D1 F8                 C		sar	ax,1
 0787  D1 F8                 C		sar	ax,1			; byte 
				boundary
 0789  03 F8                 C		add	di,ax
 078B  B1 04                 C		mov	cl,4
 078D  A1 01E5 R             C		mov	ax,MouseY
 0790  2B 06 01EF R          C		sub	ax,HotSpotY
 0794  3B 06 02FF R          C		cmp	ax,ScreenMaxY
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-36


 0798  72 03                 C		jb	GCInRange
 079A                        C	GCQuit:
 079A  E9 084C R             C		jmp	GCNoMove
 079D                        C	GCInRange:
 079D  A3 0174 R             C		mov	GraphCY,ax
 07A0  A9 0001               C		test	ax,1			; even 
				/odd line ?
 07A3  74 04                 C		jz	EvenLine
 07A5  03 3E 01DC R          C		add	di,EvenOffset
 07A9                        C	EvenLine:
 07A9  F6 06 01DE R FF       C		test	EGA,-1
 07AE  75 18                 C		jnz	GCNoDiv
 07B0  D1 F8                 C		sar	ax,1			; /2 ( 
				drops odd bit )
 07B2  F6 06 02DD R FF       C		test	Hercules,-1		; 3 Ban
				ks = Hercules
 07B7  74 0F                 C		jz	GCNoDiv
 07B9  A9 0001               C		test	ax,1			; 2nd o
				r 3rd Bank ?
 07BC  74 08                 C		jz	GCHBank01
 07BE  03 3E 01DC R          C		add	di,EvenOffset
 07C2  03 3E 01DC R          C		add	di,EvenOffset		; add 4
				000H
 07C6                        C	GCHBank01:
 07C6  D1 F8                 C		sar	ax,1			; /4
 07C8                        C	GCNoDiv:
 07C8  D3 E0                 C		shl	ax,cl			; *16
 07CA  03 F8                 C		add	di,ax
 07CC  D1 E0                 C		shl	ax,1
 07CE  D1 E0                 C		shl	ax,1			; *64
 07D0  03 F8                 C		add	di,ax			; di = 
				(MouseX/8) + (MouseY/2)*80;
			     C						; EGA  
				(MouseX/8) + MouseY*80
 07D2  F6 06 02DD R FF       C		test	Hercules,-1
 07D7  74 0C                 C		jz	GCNotHerc
 07D9  FE C9                 C		dec	cl			; 3
 07DB  D3 E8                 C		shr	ax,cl			; *8
 07DD  03 F8                 C		add	di,ax
 07DF  FE C9                 C		dec	cl			; 2
 07E1  D3 E8                 C		shr	ax,cl			; *2
 07E3  03 F8                 C		add	di,ax			; Hercu
				les  (MouseX/8) + (MouseY/4)*90
 07E5                        C	GCNotHerc:
 07E5  8E 06 01BE R          C		mov	es,ScreenSegment	; es:di
				 points at cursor position
 07E9  89 3E 01BC R          C		mov	ScreenOffset,di		; save 
				for Save/TidyGraphCursor
 07ED  E8 094B R             C		call	SaveGraphCursor		; save 
				region under cursor
			     C	
 07F0  E8 1177 R             C		call	SetMouse		; set E
				GA registers, if EGA
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-37


 07F3  8D 36 017C R          C		lea	si,GraphicsCDef
 07F7  B9 0010               C		mov	cx,10H			; 16 li
				nes of mouse image
 07FA  2E: A1 0174 R         C		mov	ax,cs:GraphCY		; check
				 for end of screen
 07FE  2E: 2B 06 01E1 R      C		sub	ax,cs:LastFullMPos
 0803  78 09                 C		js	XCheck
 0805  2B C8                 C		sub	cx,ax			; only 
				room for ... lines
 0807  78 02                 C		js	GCOutOfRange		; jump 
				if negative
 0809  75 03                 C		jnz	XCheck			; jump 
				if positive and > 0
 080B                        C	GCOutOfRange:
 080B  EB 38 90              C		jmp	GCResetUser
 080E                        C	XCheck:
 080E  51                    C		push	cx			; save 
				mouse image line count
 080F  B9 0003               C		mov	cx,3
 0812  2E: 8B 1E 0172 R      C		mov	bx,cs:GraphCX
 0817  D3 CB                 C		ror	bx,cl			; bl = 
				byte number
 0819  8A D3                 C		mov	dl,bl
 081B  D2 C7                 C		rol	bh,cl			; bh = 
				bit offset
 081D  80 E7 07              C		and	bh,7			; in ca
				se negative
 0820  80 EB 4D              C		sub	bl,77			; 77 = 
				width-3 -- check for right edge
 0823  78 02                 C		js	GCMove
 0825  2A CB                 C		sub	cl,bl			; cx = 
				no of bytes affected
 0827                        C	GCMove:
 0827  8A D9                 C		mov	bl,cl
 0829  59                    C		pop	cx			; numbe
				r of lines in mouse image
 082A  2E: A1 0174 R         C		mov	ax,cs:GraphCY		; line 
				number
 082E  2E: C6 06 0171 R FF   C		mov	cs:GraphValid,-1	; point
				 of no return
			     C	
 0834  2E: F6 06 01DE R FF   C		test	cs:EGA,-1
 083A  74 06                 C		jz	GCNotEGA
 083C  E8 064F R             C		call	DoEGACursor
 083F  EB 04 90              C		jmp	GCResetUser
 0842                        C	GCNotEGA:
 0842  E8 05E3 R             C		call	DoCGACursor
			     C	
 0845                        C	GCResetUser:
 0845  8C C8                 C		mov	ax,cs
 0847  8E D8                 C		mov	ds,ax
 0849  E8 11A0 R             C		call	ResetUser		; resto
				re EGA registers, if EGA
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-38


 084C                        C	GCNoMove:
 084C  5E                    C		pop	si
 084D  1F                    C		pop	ds
 084E  5F                    C		pop	di
 084F  07                    C		pop	es
 0850  5A                    C		pop	dx
 0851  59                    C		pop	cx
 0852  5B                    C		pop	bx
 0853  58                    C		pop	ax
			     C		
 0854  9D                    C		popf
			     C	
 0855                        C	NoPCGraph:
 0855  C3                    C		ret
			     C	
 0856                        C	ShowGraphCursor	ENDP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* TidyCGA	-	CGA here means 'not EGA
				'
			     C	;*
			     C	;**********************************************
				******************************
			     C	;
			     C	;	input	bx	line number
			     C	;		cx	number of lines of mous
				e image
			     C	;		es:di	pointer to screen area
			     C	;		ds:si	saved original contents
			     C	
 0856                        C	TidyCGA		Proc	Near
			     C	
 0856  FC                    C		cld
 0857                        C	TGCNext:
 0857  51                    C		push	cx
 0858  53                    C		push	bx
 0859  0B DB                 C		or	bx,bx
 085B  78 23                 C		js	TGCSkip
 085D  B9 0003               C		mov	cx,3
 0860  8B 16 0172 R          C		mov	dx,GraphCX		; pixel
				 x
 0864  D3 FA                 C		sar	dx,cl			; byte 
				x
 0866  33 DB                 C		xor	bx,bx
 0868                        C	TGCNextByte:
 0868  0B D2                 C		or	dx,dx
 086A  78 10                 C		js	TGCByteSkip
 086C  8A A7 016B R          C		mov	ah,SaveMask[bx]		; valid
				 bits in saved byte
 0870  F6 D4                 C		not	ah			; valid
				 bits in screen byte
 0872  26: 8A 01             C		mov	al,es:[di+bx]		; scree
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-39


				n byte
 0875  22 C4                 C		and	al,ah			; valid
				 bits
 0877  0A 00                 C		or	al,[si+bx]		; add i
				n the saved bits
 0879  26: 88 01             C		mov	es:[di+bx],al		; store
				 the byte
 087C                        C	TGCByteSkip:
 087C  43                    C		inc	bx
 087D  42                    C		inc	dx
 087E  E2 E8                 C		loop	TGCNextByte
 0880                        C	TGCSkip:
 0880  58                    C		pop	ax
 0881  59                    C		pop	cx
 0882  E8 05C7 R             C		call	Increment
 0885  8B D8                 C		mov	bx,ax
 0887  43                    C		inc	bx
 0888  83 C6 03              C		add	si,3		; save area poi
				nter
 088B  E2 CA                 C		loop	TGCNext
			     C	
 088D  C3                    C		ret
			     C	
 088E                        C	TidyCGA		EndP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* TidyEGA
			     C	;*
			     C	;**********************************************
				******************************
			     C	;
			     C	;	input	bx	line number
			     C	;		cx	number of lines of mous
				e image
			     C	;		es:di	pointer to screen area
			     C	;		ds:si	saved original contents
				 (non EGA only )
			     C	
 088E                        C	TidyEGA		Proc	Near
			     C	
 088E  1E                    C		push	ds
			     C	
 088F  E8 1144 R             C		call	SaveUser		; save 
				EGA Lib user values
			     C	
 0892  53                    C		push	bx			; save 
				line number
 0893  51                    C		push	cx			; save 
				mouse image line count
 0894  B9 0003               C		mov	cx,3
 0897  8B 1E 0172 R          C		mov	bx,GraphCX		; pixel
				 X
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-40


 089B  D3 CB                 C		ror	bx,cl			; bl = 
				byte number
 089D  8A C3                 C		mov	al,bl
 089F  D2 C7                 C		rol	bh,cl			; bh = 
				bit offset
 08A1  80 E7 07              C		and	bh,7			; in ca
				se negative
 08A4  2C 4D                 C		sub	al,77			; 77 = 
				width-3 -- check for right edge
 08A6  78 02                 C		js	TEGA_Count
 08A8  2A C8                 C		sub	cl,al			; cx = 
				no of bytes affected
 08AA                        C	TEGA_Count:
 08AA  8A F9                 C		mov	bh,cl
 08AC  59                    C		pop	cx			; numbe
				r of lines in mouse image
			     C	
 08AD  8B 36 064B R          C		mov	si,SaveArea		; start
				 of 96 (*4 planes) bytes of ..
			     C						;  ..  
				'unused' EGA RAM
			     C	
 08B1  8C C0                 C		mov	ax,es
 08B3  8E D8                 C		mov	ds,ax			; point
				 ds at screen buffer
			     C	
 08B5  B8 0F02               C		mov	ax,00F02H		; map m
				ask select register
 08B8  BA 03C4               C		mov	dx,3c4h
 08BB  EF                    C		out	dx,ax			; write
				 to all planes
			     C	
 08BC  BA 03CE               C		mov	dx,3ceh
 08BF  B8 FF08               C		mov	ax,0ff08H		; point
				er 8 data ff - bit mask
 08C2  EF                    C		out	dx,ax
			     C	
 08C3  B8 0105               C		mov	ax,0105H		; write
				 mode 1
 08C6  EF                    C		out	dx,ax
			     C	
 08C7  58                    C		pop	ax			; line 
				number
			     C	
 08C8                        C	TEGA_NextLine:
 08C8  50                    C		push	ax			; save 
				line number
 08C9  53                    C		push	bx			; save 
				byte count/number
 08CA  0B C0                 C		or	ax,ax			; check
				 line number
 08CC  78 24                 C		js	TEGA_RowLoopEnd		; skip 
				negative lines !!
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-41


			     C	; byte 0
			     C		
 08CE  0A DB                 C		or	bl,bl			; byte 
				no. on line
 08D0  78 04                 C		js	TEGA_NoByte0		; negat
				ive - skip byte 0
			     C	
			     C	;	read original from save area into latch
				es and copy to screen
			     C	
 08D2  8A 04                 C		mov	al,0[si]		; load 
				the latches
 08D4  88 05                 C		mov	0[di],al		; store
				 original back in screen
			     C	
 08D6                        C	TEGA_NoByte0:	
 08D6  FE CF                 C		dec	bh			; bytes
				 to do on line
 08D8  74 18                 C		jz	TEGA_RowLoopEnd
			     C	
			     C	; byte 1
			     C		
 08DA  FE C3                 C		inc	bl
 08DC  78 06                 C		js	TEGA_NoByte1		; still
				 negative - skip byte 1
			     C	
			     C	;	read original from screen into latches 
				and copy to screen
			     C	
 08DE  8A 44 01              C		mov	al,1[si]		; load 
				the latches
 08E1  88 45 01              C		mov	1[di],al		; store
				 original back in screen
			     C	
 08E4                        C	TEGA_NoByte1:	
 08E4  FE CF                 C		dec	bh			; bytes
				 to do on line
 08E6  74 0A                 C		jz	TEGA_RowLoopEnd
			     C	
			     C	; byte 2
			     C		
 08E8  FE C3                 C		inc	bl
 08EA  78 06                 C		js	TEGA_NoByte2		; still
				 negative - skip byte 2
			     C	
			     C	;	read original from screen into latches 
				and copy to screen
			     C	
 08EC  8A 44 02              C		mov	al,2[si]		; load 
				the latches
 08EF  88 45 02              C		mov	2[di],al		; store
				 original back in screen
			     C	
 08F2                        C	TEGA_NoByte2:			; needed ?????
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-42


			     C		
 08F2                        C	TEGA_RowLoopEnd:
 08F2  83 C6 03              C		add	si,SaveInc		; next 
				line in save area
			     C	
 08F5  5B                    C		pop	bx			; byte 
				count/number
 08F6  58                    C		pop	ax			; line 
				number
 08F7  E8 05C7 R             C		call	Increment		; updat
				e di to point ot next line
 08FA  40                    C		inc	ax			; next 
				line number
 08FB  E2 CB                 C		loop	TEGA_NextLine
			     C	
 08FD  1F                    C		pop	ds	
 08FE  E8 11A0 R             C		call	ResetUser		; save 
				EGA Lib user values
			     C	
 0901  C3                    C		ret
			     C	
 0902                        C	TidyEGA		EndP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* TidyGraphCursor
			     C	;*
			     C	;**********************************************
				******************************
 0902                        C	TidyGraphCursor	PROC	NEAR
			     C	
 0902  9C                    C		pushf
 0903  FA                    C		cli
			     C	
 0904  F6 06 0171 R FF       C		test	GraphValid,-1		; got s
				omething to tidy ?
 0909  75 03                 C		jnz	TGCCont			; yes
 090B  EB 3C 90              C		jmp	TGCexit			; no
 090E                        C	TGCCont:
 090E  C6 06 0171 R 00       C		mov	GraphValid,0
			     C	
 0913  50                    C		push	ax
 0914  53                    C		push	bx
 0915  51                    C		push	cx
 0916  52                    C		push	dx
 0917  06                    C		push	es
 0918  57                    C		push	di
 0919  56                    C		push	si
			     C	
 091A  8D 36 021B R          C		lea	si,GraphicsSave		; ds:si
				 points at saved data
			     C	
			     C	;	mov	cx,1
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-43


			     C	;	test	EGA,-1
			     C	;	jz	TGCNotEGA
			     C	;	mov	cl,EGAPlanes		; ch = 
				0 from cx=1 above
			     C	;	call	SaveUser		; save 
				user settings
			     C	;	mov	ax,00005H		; point
				er 5 data 0
			     C	;	mov	dx,3ceh
			     C	;	out	dx,ax
			     C	;	mov	ax,0ff08H		; point
				er 8 data ff
			     C	;	out	dx,ax
			     C	;TGCPlane:
			     C	;	mov	ah,80H
			     C	;	rol	ah,cl			; set b
				it corresponding to plane
			     C	;	mov	al,2			; map m
				ask select register
			     C	;	mov	dx,3c4H
			     C	;	out	dx,ax	
			     C	
			     C	;	mov	ah,cl			; plane
				 number starting at 1
			     C	;	dec	ah			; plane
				 number starting at 0
			     C	;	mov	al,4			; read 
				map select register
			     C	;	mov	dx,3ceH
			     C	;	out	dx,ax	
			     C	;
			     C	;TGCNotEGA:
			     C	
			     C	;	push	cx			; plane
				 loop
			     C	
 091E  C4 3E 01BC R          C		les	di,dword ptr ScreenOffset ; es:
				di points at cursor position
 0922  B9 0010               C		mov	cx,10H			; 16 li
				nes of mouse image
 0925  A1 0174 R             C		mov	ax,GraphCY		; check
				 for end of screen
 0928  8B D8                 C		mov	bx,ax
 092A  2B 06 01E1 R          C		sub	ax,LastFullMPos
 092E  78 02                 C		js	TGCDoIt
 0930  2B C8                 C		sub	cx,ax
 0932                        C	TGCDoIt:
 0932  F6 06 01DE R FF       C		test	EGA,-1
 0937  74 06                 C		jz	TGCNotEGA
 0939  E8 088E R             C		call	TidyEGA
 093C  EB 04 90              C		jmp	TGCFin
 093F                        C	TGCNotEGA:
 093F  E8 0856 R             C		call	TidyCGA
 0942                        C	TGCFin:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-44


			     C	;	pop	cx			; plane
				 counter
			     C	;	loop	TGCPlane		; only 
				>1 if EGA
			     C	
			     C	;	call	ResetUser		; resto
				re EGA registers, if EGA
			     C	
 0942  5E                    C		pop	si
 0943  5F                    C		pop	di
 0944  07                    C		pop	es
 0945  5A                    C		pop	dx
 0946  59                    C		pop	cx
 0947  5B                    C		pop	bx
 0948  58                    C		pop	ax
 0949                        C	TGCexit:
 0949  9D                    C		popf
 094A  C3                    C		ret
			     C	
 094B                        C	TidyGraphCursor	ENDP
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* SaveGraphCursor
			     C	;*
			     C	;**********************************************
				******************************
 094B                        C	SaveGraphCursor	PROC	NEAR
			     C	
			     C	;	es:di points at the screen block
			     C	
 094B  F6 06 01DE R FF       C		test	EGA,-1
 0950  74 01                 C		jz	SGC_OK
 0952  C3                    C		ret
 0953                        C	SGC_OK:
 0953  50                    C		push	ax
 0954  53                    C		push	bx
 0955  51                    C		push	cx
 0956  52                    C		push	dx
 0957  1E                    C		push	ds
 0958  56                    C		push	si
 0959  06                    C		push	es
 095A  57                    C		push	di
			     C	
 095B  8D 36 021B R          C		lea	si,GraphicsSave		; ds:si
				 points at save area
			     C	
			     C	;	mov	cx,1
			     C	;	test	EGA,-1
			     C	;	jz	SGCNotEGA
			     C	;	mov	cl,cs:EGAPlanes		; ch = 
				0 from cx=1 above
			     C	;SGCPlane:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-45


			     C	;	mov	ah,cl
			     C	;	dec	ah
			     C	;	mov	al,4			; read 
				map select register
			     C	;	mov	dx,3ceh
			     C	;	out	dx,ax	
			     C	;SGCNotEGA:
			     C	;	push	es
			     C	;	push	di
			     C	
			     C	;	push	cx			; plane
				 loop
			     C	
 095F  8B 0E 0172 R          C		mov	cx,GraphCX		; x co-
				ordinate
 0963  83 E1 07              C		and	cx,7			; bit o
				ffset
 0966  B8 FFFF               C		mov	ax,-1			; all b
				its set
 0969  D3 E8                 C		shr	ax,cl			; mask 
				for bytes 0 and 1
 096B  88 26 016B R          C		mov	SaveMask,ah
 096F  A2 016C R             C		mov	SaveMask+1,al
 0972  F6 D4                 C		not	ah			; mask 
				for byte 2
 0974  88 26 016D R          C		mov	SaveMask+2,ah
 0978  B9 0010               C		mov	cx,10H			; 16 li
				nes of mouse image
 097B  A1 0174 R             C		mov	ax,GraphCY		; check
				 for end of screen
 097E  8B D8                 C		mov	bx,ax			; save 
				line number
 0980  2E: 2B 06 01E1 R      C		sub	ax,cs:LastFullMPos
 0985  78 03                 C		js	SGCNext
 0987  2B C8                 C		sub	cx,ax
 0989  FC                    C		cld
 098A                        C	SGCNext:
 098A  51                    C		push	cx
 098B  53                    C		push	bx
 098C  0B DB                 C		or	bx,bx
 098E  78 1E                 C		js	SGCSkip
 0990  B9 0003               C		mov	cx,3
 0993  8B 16 0172 R          C		mov	dx,GraphCX		; pixel
				 x
 0997  D3 FA                 C		sar	dx,cl			; byte 
				x
 0999  33 DB                 C		xor	bx,bx
 099B                        C	SGCNextByte:
 099B  32 C0                 C		xor	al,al			; clear
				 for Skip
 099D  0B D2                 C		or	dx,dx
 099F  78 07                 C		js	SGCByteSkip
 09A1  26: 8A 01             C		mov	al,es:[di+bx]		; get s
				creen buffer byte
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-46


 09A4  22 87 016B R          C		and	al,SaveMask[bx]		; remov
				e invalid bits
 09A8                        C	SGCByteSkip:
 09A8  88 00                 C		mov	[si+bx],al		; store
				 the byte
 09AA  43                    C		inc	bx
 09AB  42                    C		inc	dx
 09AC  E2 ED                 C		loop	SGCNextByte
 09AE                        C	SGCSkip:
 09AE  58                    C		pop	ax
 09AF  59                    C		pop	cx
 09B0  E8 05C7 R             C		call	Increment		; incre
				ment DI
 09B3  8B D8                 C		mov	bx,ax			; want 
				line number in BX
 09B5  43                    C		inc	bx
 09B6  83 C6 03              C		add	si,3
 09B9  E2 CF                 C		loop	SGCNext
			     C	
			     C	;	pop	cx			; plane
				 loop for EGA
			     C	;	pop	di
			     C	;	pop	es
			     C	;	loop	SGCPlane
			     C	
 09BB  5F                    C		pop	di
 09BC  07                    C		pop	es
 09BD  5E                    C		pop	si
 09BE  1F                    C		pop	ds
 09BF  5A                    C		pop	dx
 09C0  59                    C		pop	cx
 09C1  5B                    C		pop	bx
 09C2  58                    C		pop	ax
 09C3                        C	SGCexit:
 09C3  C3                    C		ret
			     C	
 09C4                        C	SaveGraphCursor	ENDP
				
				;**********************************************
				******************************
				;*
				;* ShowSoftCursor
				;*
				;**********************************************
				******************************
 09C4				ShowSoftCursor	PROC	NEAR
				
 09C4  F6 06 0176 R FF			test	TextCurs,-1		; hard 
				or soft cursor ?
 09C9  75 42				jnz	SSCReturn		; hardw
				are cursor
 09CB  E8 05AE R			call	MouseToCursor
 09CE  06				push	es
 09CF  57				push	di
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-47


 09D0  33 C0				xor	ax,ax
 09D2  8E C0				mov	es,ax			; Segme
				nt 0
 09D4  26: 8B 3E 044E			mov	di,es:[044EH]		; Page 
				offset
 09D9  26: A1 044A			mov	ax,es:[044AH]		; Scree
				n width < 255 ????
 09DD  F6 26 016F R			mul	CursorY
 09E1  8A 1E 016E R			mov	bl,CursorX
 09E5  32 FF				xor	bh,bh
 09E7  03 C3				add	ax,bx			; chara
				cter offset
 09E9  D1 E0				shl	ax,1			; chara
				cters occupy 2 bytes
 09EB  03 F8				add	di,ax			; offse
				t into screen buffer
 09ED  89 3E 01BC R			mov	ScreenOffset,di
 09F1  8E 06 01BE R			mov	es,ScreenSegment	; B000 
				or B800
 09F5  26: 8B 05			mov	ax,es:0[di]		; get c
				haracter and attributes
 09F8  A3 0169 R			mov	CursorSave,ax		; save 
				to restore later
 09FB  C6 06 0170 R 01			mov	CSValid,1
 0A00  23 06 0178 R			and	ax,TCScrMask
 0A04  33 06 017A R			xor	ax,TCCursMask
 0A08  26: 89 05			mov	es:0[di],ax		; rewri
				te cursor
 0A0B  5F				pop	di
 0A0C  07				pop	es
 0A0D				SSCReturn:
 0A0D  C3				ret
				
 0A0E				ShowSoftCursor	ENDP
				
				;**********************************************
				******************************
				;*
				;* TidySoftCursor
				;*
				;**********************************************
				******************************
 0A0E				TidySoftCursor	PROC	NEAR
				
 0A0E  F6 06 0176 R FF			test	TextCurs,-1		; hard 
				or soft cursor ?
 0A13  75 1A				jnz	TSCReturn		; hardw
				are cursor
 0A15  F6 06 0170 R FF			test	CSValid,-1		; got s
				omething to restore ?
 0A1A  74 13				jz	TSCReturn		; no
 0A1C  C6 06 0170 R 00			mov	CSValid,0
 0A21  06				push	es
 0A22  57				push	di
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-48


 0A23  C4 3E 01BC R			les	di,dword ptr ScreenOffset
 0A27  A1 0169 R			mov	ax,CursorSave		; previ
				ously saved by ShowSoftCursor
 0A2A  26: 89 05			mov	es:0[di],ax		; resto
				re character
 0A2D  5F				pop	di
 0A2E  07				pop	es
 0A2F				TSCReturn:
 0A2F  C3				ret
					
 0A30				TidySoftCursor	ENDP
				
				;**********************************************
				******************************
				;*
				;* MoveCursor
				;*
				;**********************************************
				******************************
 0A30				MoveCursor	PROC	NEAR
				
 0A30  9C				pushf
 0A31  FA				cli				; inhib
				it interrupts
					
 0A32  E8 05AE R			call	MouseToCursor
 0A35  8A 2E 016F R			mov	ch,CursorY
 0A39  8A 0E 016E R			mov	cl,CursorX
 0A3D  33 C0				xor	ax,ax
 0A3F  1E				push	ds
 0A40  8E D8				mov	ds,ax
 0A42  A0 044A				mov	al,ds:[044AH]		; colum
				ns per line
 0A45  F6 E5				mul	ch			; Y * c
				olumns
 0A47  32 ED				xor	ch,ch
 0A49  03 C8				add	cx,ax			; add i
				n X offset
 0A4B  03 0E 044E			add	cx,ds:[044EH]		; page 
				offset ???????
 0A4F  8B 16 0463			mov	dx,ds:[0463H]		; CRT R
				egister Base
				
 0A53  8A E5				mov	ah,ch	
 0A55  B0 0E				mov	al,0EH
 0A57  EF				out	dx,ax			; send 
				cursor pos "hi"
				
 0A58  8A E1				mov	ah,cl	
 0A5A  B0 0F				mov	al,0FH
 0A5C  EF				out	dx,ax			; send 
				cursor pos "lo"
				
 0A5D  1F			 	pop	ds			; resto
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-49


				re ds
 0A5E  9D				popf				; resto
				re interrupt state
				
 0A5F  C3				ret
				
 0A60				MoveCursor	ENDP
				
				
				;**********************************************
				******************************
				;*
				;* MouseRead
				;*
				;**********************************************
				******************************
 0A60				MouseRead	PROC	NEAR
				
 0A60  50				push	ax
 0A61  53				push	bx
 0A62  51				push	cx
 0A63  52				push	dx
 0A64  57				push	di
 0A65  06				push	es
				
 0A66  C4 3E 011A R			les	di,dword ptr ms_rq_np	;find o
				ut if the changecount changed
 0A6A  26: 8A 45 0F			mov	al,es:ChangeCount[di]
 0A6E  3A 06 0302 R			cmp	al,old_count
 0A72  75 03				jnz	changed			;yes - 
				do all the work.
 0A74  E9 0B9A R			jmp	MRNoMove		;no - g
				et out.
				
 0A77				changed:
 0A77  A2 0302 R			mov	old_count,al
				
 0A7A  1E				push	ds
 0A7B  8C D8				mov	ax,ds
 0A7D  8E C0				mov	es,ax
 0A7F  8D 3E 02EE R			lea	di,DPCopyArea		
					; es:di points at copy area
 0A83  C5 36 011A R			lds	si,dword ptr ms_rq_np	
					; ds:si - DP area
 0A87  B9 0007				mov	cx,DPSize		
					; copy DPSize words
 0A8A  F3/ A5				rep movsw
 0A8C  1F				pop	ds
				
 0A8D  C4 3E 011A R			les	di,dword ptr ms_rq_np
									; zeroi
				se up to but excluding
									; butto
				n status
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-50


 0A91  B9 0006				mov	cx,(AmigaPCStatus/2)	; conve
				rt to words
 0A94  33 C0				xor	ax,ax
 0A96  F3/ AB				rep stosw
				
 0A98  C4 3E 011A R			les	di,dword ptr ms_rq_np	;find o
				ut if the changecount changed
 0A9C  26: 8A 45 0F			mov	al,es:ChangeCount[di]
 0AA0  3A 06 0302 R			cmp	al,old_count
 0AA4  75 D1				jnz	changed			;yes - 
				do all the work.
				
 0AA6  32 D2				xor	dl,dl		; if changes th
				en will be set non-zero 
 0AA8  8D 36 02EE R			lea	si,DPCopyArea	; point at copy
				 of DualPort values
				
								; get new Mouse
				X (within limits )
 0AAC  8B 04				mov	ax,AmigaPCX[si]
 0AAE  0B C0				or	ax,ax
 0AB0  74 31				jz	GetY		; no change in 
				X co-ord.
 0AB2  83 0E 01C0 R 01			or	NewMask,1	; cursor positi
				on change
 0AB7  B2 01				mov	dl,1		; move the curs
				or
 0AB9  01 06 01E9 R			add	MickeyX,ax
 0ABD  52				push	dx
 0ABE  D1 E0				shl	ax,1
 0AC0  D1 E0				shl	ax,1
 0AC2  D1 E0				shl	ax,1		; *8
 0AC4  99				cwd			; sign extend i
				nto DX
 0AC5  F7 3E 01C8 R			idiv	XMPRatio
 0AC9  5A				pop	dx
 0ACA  03 06 01E3 R			add	ax,MouseX
 0ACE  3B 06 01CC R			cmp	ax,XMinCursor
 0AD2  7D 03				jge	XMinOK
 0AD4  A1 01CC R			mov	ax,XMinCursor
 0AD7				XMinOK:
 0AD7  3B 06 01CE R			cmp	ax,XMaxCursor
 0ADB  7E 03				jle	XMaxOK
 0ADD  A1 01CE R			mov	ax,XMaxCursor
 0AE0				XMaxOK:
 0AE0  A3 01E3 R			mov	MouseX,ax
 0AE3				GetY:
								; get new Mouse
				Y (within limits )
 0AE3  8B 44 02				mov	ax,AmigaPCY[si]
 0AE6  0B C0				or	ax,ax
 0AE8  74 31				jz	GetButtons	; no change in 
				Y co-ord.
 0AEA  83 0E 01C0 R 01			or	NewMask,1	; cursor positi
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-51


				on change
 0AEF  B2 01				mov	dl,1		; move the curs
				or
 0AF1  01 06 01EB R			add	MickeyY,ax
 0AF5  52				push	dx
 0AF6  D1 E0				shl	ax,1
 0AF8  D1 E0				shl	ax,1
 0AFA  D1 E0				shl	ax,1		; *8
 0AFC  99				cwd			; sign extend i
				nto DX
 0AFD  F7 3E 01CA R			idiv	YMPRatio
 0B01  5A				pop	dx
 0B02  03 06 01E5 R			add	ax,MouseY
 0B06  3B 06 01D0 R			cmp	ax,YMinCursor
 0B0A  7D 03				jge	YMinOK
 0B0C  A1 01D0 R			mov	ax,YMinCursor
 0B0F				YMinOK:
 0B0F  3B 06 01D2 R			cmp	ax,YMaxCursor
 0B13  7E 03				jle	YMaxOK
 0B15  A1 01D2 R			mov	ax,YMaxCursor
 0B18				YMaxOK:
 0B18  A3 01E5 R			mov	MouseY,ax
 0B1B				GetButtons:
 0B1B  8D 1E 01FB R			lea	bx,Buttons
 0B1F  8B 44 04				mov	ax,AmigaPCLeftP[si]
 0B22  0B C0				or	ax,ax
 0B24  74 13				jz	GetLRel
 0B26  83 0E 01C0 R 02			or	NewMask,2
 0B2B  01 07				add	PressCount[bx],ax	
					; Left Count
 0B2D  A1 01E3 R			mov	ax,MouseX
 0B30  89 47 02				mov	PressX[bx],ax
 0B33  A1 01E5 R			mov	ax,MouseY
 0B36  89 47 04				mov	PressY[bx],ax
 0B39				GetLRel:
 0B39  8B 44 08				mov	ax,AmigaPCLeftR[si]
 0B3C  0B C0				or	ax,ax
 0B3E  74 14				jz	GetRPrs
 0B40  83 0E 01C0 R 04			or	NewMask,4
 0B45  01 47 06				add	ReleaseCount[bx],ax	
					; Left Count
 0B48  A1 01E3 R			mov	ax,MouseX
 0B4B  89 47 08				mov	ReleaseX[bx],ax
 0B4E  A1 01E5 R			mov	ax,MouseY
 0B51  89 47 0A				mov	ReleaseY[bx],ax
 0B54				GetRPrs:
 0B54  83 C3 10				add	bx,16
 0B57  8B 44 06				mov	ax,AmigaPCRightP[si]
 0B5A  0B C0				or	ax,ax
 0B5C  74 13				jz	GetRRel
 0B5E  83 0E 01C0 R 08			or	NewMask,8
 0B63  01 07				add	PressCount[bx],ax	
					; right Count
 0B65  A1 01E3 R			mov	ax,MouseX
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-52


 0B68  89 47 02				mov	PressX[bx],ax
 0B6B  A1 01E5 R			mov	ax,MouseY
 0B6E  89 47 04				mov	PressY[bx],ax
 0B71				GetRRel:
 0B71  8B 44 0A				mov	ax,AmigaPCRightR[si]
 0B74  0B C0				or	ax,ax
 0B76  74 14				jz	GetStatus
 0B78  83 0E 01C0 R 10			or	NewMask,16
 0B7D  01 47 06				add	ReleaseCount[bx],ax
 0B80  A1 01E3 R			mov	ax,MouseX
 0B83  89 47 08				mov	ReleaseX[bx],ax
 0B86  A1 01E5 R			mov	ax,MouseY
 0B89  89 47 0A				mov	ReleaseY[bx],ax
 0B8C				GetStatus:
 0B8C  8B 44 0C				mov	ax,AmigaPCStatus[si]
 0B8F  A3 01D8 R			mov	ButtonStatus,ax
 0B92  F6 C2 01				test	dl,1			; curso
				r position change
 0B95  74 03				jz	MRNoMove
 0B97  E8 0BA1 R			call	MoveMouse
 0B9A				MRNoMove:
 0B9A  07				pop	es
 0B9B  5F				pop	di
 0B9C  5A				pop	dx
 0B9D  59				pop	cx
 0B9E  5B				pop	bx
 0B9F  58				pop	ax
 0BA0  C3				ret
				
 0BA1				MouseRead	ENDP
				
				;**********************************************
				******************************
				;*
				;* MoveMouse
				;*
				;**********************************************
				******************************
 0BA1				MoveMouse	PROC	NEAR
				
 0BA1  F7 06 0167 R FFFF		test	CursorFlag,-1
 0BA7  75 2B				jnz	MMoveExit		; if no
				n-zero cursor is off
 0BA9  E8 0542 R			call	DoCondOff		; check
				 for conditional off
 0BAC  72 26				jb	MMoveExit		; jump 
				if Carry flag is set (jcc!!)
 0BAE  F6 06 01E7 R FF			test	XShift,-1
 0BB3  74 16				jz	MMGraphics		; if no
				n-zero then in text mode
 0BB5  F6 06 0176 R FF			test	TextCurs,-1		; hard 
				or soft cursor ?
 0BBA  75 09				jnz	MMHardware		; hardw
				are cursor
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-53


 0BBC  E8 0A0E R			call	TidySoftCursor
 0BBF  E8 09C4 R			call	ShowSoftCursor
 0BC2  EB 10 90				jmp	MMoveExit
 0BC5				MMHardware:
 0BC5  E8 0A30 R			call	MoveCursor		; hardw
				are cursor
 0BC8  EB 0A 90				jmp	MMoveExit
				
 0BCB				MMGraphics:
 0BCB  9C				pushf
 0BCC  FA				cli
 0BCD  E8 0902 R			call	TidyGraphCursor
 0BD0  E8 075B R			call	ShowGraphCursor
 0BD3  9D				popf
				
 0BD4				MMoveExit:
 0BD4  C3				ret
				
 0BD5				MoveMouse	ENDP
				
 0BD5				CopyRight:
 0BD5  3D 3D 3D 20 20 20		db	"===    Copyright (c) 1988 Comm
				odore Amiga by Bill Holohan   ==="
       20 43 6F 70 79 72	
       69 67 68 74 20 28	
       63 29 20 31 39 38	
       38 20 43 6F 6D 6D	
       6F 64 6F 72 65 20	
       41 6D 69 67 61 20	
       62 79 20 42 69 6C	
       6C 20 48 6F 6C 6F	
       68 61 6E 20 20 20	
       3D 3D 3D			
 0C14				Customise:
 0C14  2A 2A 2A 2A 2A 2A		db	"******************************
				**********"
       2A 2A 2A 2A 2A 2A	
       2A 2A 2A 2A 2A 2A	
       2A 2A 2A 2A 2A 2A	
       2A 2A 2A 2A 2A 2A	
       2A 2A 2A 2A 2A 2A	
       2A 2A 2A 2A		
				
 0C3C				MouseDriver	PROC NEAR
 0C3C  EB 7D 90				jmp	MainCode
				
 0C3F				BasicMouse	PROC FAR
 0C3F  55				push	bp			; for b
				loody BASIC
 0C40  8B EC				mov	bp,sp
 0C42  8B 76 0C				mov	si,[bp+12]
 0C45  8B 04				mov	ax,[si]
 0C47  8B 76 0A				mov	si,[bp+10]
 0C4A  8B 1C				mov	bx,[si]
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-54


 0C4C  8B 76 08				mov	si,[bp+8]
 0C4F  8B 0C				mov	cx,[si]
 0C51  8B 76 06				mov	si,[bp+6]
 0C54  8B D6				mov	dx,si
 0C56  3D 0009				cmp	ax,9			; graph
				ics cursor block
 0C59  74 2C				jz	UseDXValue
 0C5B  3D 0012				cmp	ax,18			; ?????
 0C5E  74 27				jz	UseDXValue
 0C60  3D 000C				cmp	ax,12			; Inter
				rupt call ...
 0C63  74 22				jz	UseDXValue
 0C65  3D 0014				cmp	ax,20			; Swap 
				int....
 0C68  75 0B				jnz	UseDXasPtr
 0C6A  8E C3				mov	es,bx
 0C6C  0B DB				or	bx,bx
 0C6E  75 17				jnz	UseDXValue
 0C70  1E				push	ds
 0C71  07				pop	es
 0C72  EB 13 90				jmp	UseDXValue
 0C75				UseDXasPtr:
 0C75  8B 14				mov	dx,[si]
 0C77  3D 0010				cmp	ax,16
 0C7A  75 0B				jnz	UseDXValue
 0C7C  8B 0C				mov	cx,[si]
 0C7E  8B 54 02				mov	dx,[si+02]
 0C81  8B 7C 06				mov	di,[si+06]
 0C84  8B 74 04				mov	si,[si+04]
 0C87				UseDXValue:
 0C87  50				push	ax
 0C88  CD 33				int	33H
 0C8A  5E				pop	si
 0C8B  83 FE 14				cmp	si,20
 0C8E  75 04				jnz	Check9
 0C90  8C C3				mov	bx,es
 0C92  1E				push	ds
 0C93  07				pop	es
 0C94				Check9:
 0C94  83 FE 09				cmp	si,9
 0C97  74 0F				jz	NoDX
 0C99  83 FE 0C				cmp	si,12
 0C9C  74 0A				jz	NoDX
 0C9E  83 FE 10				cmp	si,16
 0CA1  74 05				jz	NoDX
 0CA3  8B 76 06				mov	si,[bp+6]
 0CA6  89 14				mov	[si],dx
 0CA8				NoDX:
 0CA8  8B 76 08				mov	si,[bp+8]
 0CAB  89 0C				mov	[si],cx
 0CAD  8B 76 0A				mov	si,[bp+10]
 0CB0  89 1C				mov	[si],bx
 0CB2  8B 76 0C				mov	si,[bp+12]
 0CB5  89 04				mov	[si],ax
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-55


 0CB7  5D				pop	bp
 0CB8  CA 0008				ret	8
				
 0CBB				BasicMouse	ENDP
				
 0CBB				MainCode:
 0CBB  55				push	bp
 0CBC  8B EC				mov	bp,sp
				
 0CBE  1E				push	ds			; bp-2
 0CBF  06				push	es			; bp-4
 0CC0  57				push	di			; bp-6
 0CC1  56				push	si			; bp-8
 0CC2  53				push	bx			; bp-10
						save it - M2%
 0CC3  50				push	ax			; bp-12
				
 0CC4  0E				push	cs
 0CC5  1F				pop	ds
				
 0CC6  E8 0A60 R			call	MouseRead
				
 0CC9  FB				sti
				
 0CCA  E8 04DD R			call	Trace
				
 0CCD  0B C0				or	ax,ax
 0CCF  79 03				jns	check2			; jump 
				if not negative
 0CD1				failcheck:
 0CD1  E9 0FEC R			jmp	exit
 0CD4				check2:
 0CD4  3D 001E				cmp	ax,30
 0CD7  7F 0A				jg	Specials		; jump 
				if > 30
 0CD9  D1 E0				shl	ax,1			; *2
 0CDB  8B D8				mov	bx,ax
 0CDD  8D 9F 0FF9 R			lea	bx,[JTable+bx]
 0CE1  FF 27				jmp	word ptr [bx]
				
 0CE3				Specials:
 0CE3  3D 006D				cmp	ax,6DH			; get p
				ointer to version ????
 0CE6  74 14				je	SpVers
				;	cmp	ax,024h			;***
				;	je	GetInfo			;***
				
				;;; rsd
 0CE8  3D 0024				cmp	ax,024h
 0CEB  74 1C				je	GetInfo
				;;; rsd
				
 0CED  3D 004D				cmp	ax,4DH
 0CF0  75 DF				jne	failcheck		; not a
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-56


				 special
 0CF2  8D 3E 0C20 R			lea	di,Customise+12
 0CF6  89 7E FA				mov	[bp-6],di		; retur
				n di
 0CF9  EB 08 90				jmp	SpSetES
 0CFC				SpVers:
 0CFC  8D 3E 02DE R			lea	di,VersionNo
 0D00  89 7E FA				mov	[bp-6],di		; retur
				n di
 0D03				SpSetES:
 0D03  8C 4E FC				mov	[bp-4],cs		; retur
				n es
 0D06  E9 0FEC R			jmp	exit
				
				;;; rsd
 0D09				GetInfo:
 0D09  2E: 8A 26 02DE R			mov	ah,cs:VersionNo[0]
 0D0E  2E: A0 02DF R			mov	al,cs:VersionNo[1]
 0D12  89 46 F6				mov	[bp-10],ax
 0D15  E9 0FEC R			jmp	exit
				;;; rsd
				
				;GetInfo:		  		;***
				;	mov	[bp-10],707h		;
				;	jmp	exit			;
				
 0D18				ResetAndStatus:	; Function 0 : Mouse Reset and 
				Status
 0D18  9C				pushf
 0D19  FA				cli				; disab
				le interrupts - Int Call & Cursor
 0D1A  E8 0A0E R			call	TidySoftCursor		; just 
				in case - Hardware ???
 0D1D  E8 0902 R			call	TidyGraphCursor		; just 
				in case
				
 0D20  33 C0				xor	ax,ax
 0D22  0E				push	cs
 0D23  07				pop	es
 0D24  8D 3E 0167 R			lea	di,StateInfo
 0D28  51				push	cx
 0D29  8B 0E 02DB R			mov	cx,DataSize		; mouse
				 state data size
 0D2D  F3/ AA				rep stosb			; zeroi
				se everything
 0D2F  59				pop	cx
 0D30  9D				popf				; resto
				re interrupts state
				
 0D31  E8 149D R			call	CheckVideo		; what 
				card is it now !
					
 0D34  33 C0				xor	ax,ax
 0D36  8E C0				mov	es,ax			; segme
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-57


				nt zero
 0D38  26: A0 0449			mov	al,es:[449H]
 0D3C  24 7F				and	al,7fH			; remov
				e 'don't clear' bit
 0D3E  E8 0391 R			call	SetVideoPars
				;	mov	EGAPlanes,4		; +++++
				 temp +++++
 0D41  C7 06 0167 R FFFF		mov	CursorFlag,-1		; hidde
				n
 0D47  A1 02FD R			mov	ax,ScreenMaxX		; reset
				 values
 0D4A  D1 F8				sar	ax,1
 0D4C  A3 01E3 R			mov	MouseX,ax
 0D4F  A1 02FF R			mov	ax,ScreenMaxY
 0D52  D1 F8				sar	ax,1
 0D54  A3 01E5 R			mov	MouseY,ax
 0D57  C7 06 0178 R FFFF		mov	TCScrMask,0FFFFH
 0D5D  C7 06 017A R 7700		mov	TCCursMask,07700H
 0D63  C7 06 01C8 R 0008		mov	XMPRatio,8
 0D69  C7 06 01CA R 0010		mov	YMPRatio,16
 0D6F  A1 02FD R			mov	ax,ScreenMaxX
 0D72  48				dec	ax
 0D73  A3 01CE R			mov	XMaxCursor,ax
 0D76  A1 02FF R			mov	ax,ScreenMaxY
 0D79  48				dec	ax
 0D7A  A3 01D2 R			mov	YMaxCursor,ax
 0D7D  C6 06 01E0 R 01			mov	Bank,1			; 2 ban
				ks
 0D82  F6 06 02DD R FF			test	Hercules,-1
 0D87  74 05				jz	RasNotHerc
 0D89  C6 06 01E0 R 03			mov	Bank,3			; 4 ban
				ks
 0D8E				RASNotHerc:
				
 0D8E  0E				push	cs
 0D8F  07				pop	es	
 0D90  B9 0020				mov	cx,32
 0D93  8D 36 0127 R			lea	si,DefaultMouse
 0D97  8D 3E 017C R			lea	di,GraphicsCDef
 0D9B  F3/ A5				rep movsw
				
 0D9D  E8 0BA1 R			call	MoveMouse		; Posit
				ion the pointer
				
 0DA0  C7 46 F4 FFFF			mov	word ptr [bp-12],-1	; ax = 
				-1 => installed
 0DA5  C7 46 F6 0002			mov	word ptr [bp-10],2	; bx = 
				2  => 2 buttons
 0DAA				exit2:
 0DAA  E9 0FEC R			jmp	exit
 0DAD				ShowCursor:	; Function 1 : Show Cursor
 0DAD  C6 06 01F2 R 00			mov	CondFlag,0		; no lo
				nger conditional off
 0DB2  F7 06 0167 R FFFF		test	CursorFlag,-1		; check
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-58


				 for zero
 0DB8  74 F0				jz	exit2			; do no
				thing if zero
 0DBA  FF 06 0167 R			inc	CursorFlag
 0DBE  75 EA				jnz	exit2			; exit 
				if not now zero
 0DC0  F6 06 01E7 R FF			test	XShift,-1		; if no
				n-zero then in text mode
 0DC5  74 23				jz	ShowGraphics
 0DC7  F6 06 0176 R FF			test	TextCurs,-1		; zero 
				is software cursor
 0DCC  75 06				jnz	ShowHardware
 0DCE  E8 09C4 R			call	ShowSoftCursor
 0DD1  E9 0FEC R			jmp	exit
 0DD4				ShowHardware:
 0DD4  8A 2E 0178 R			mov	ch,byte ptr TCScrMask	; start
				 line
 0DD8  8A 0E 017A R			mov	cl,byte ptr TCCursMask	; stop 
				line
 0DDC  81 E1 0F0F			and	cx,0F0FH		; mask 
				to keep in range.
 0DE0  B4 01				mov	ah,01			; set c
				ursor type
 0DE2  CD 10				int	10H			; do it
 0DE4  E8 0A30 R			call	MoveCursor
 0DE7  E9 0FEC R			jmp	exit
 0DEA				ShowGraphics:
 0DEA  E8 075B R			call	ShowGraphCursor
 0DED  E9 0FEC R			jmp	exit
 0DF0				HideCursor:	; Function 2 : Hide Cursor
 0DF0  C6 06 01F2 R 00			mov	CondFlag,0		; no lo
				nger just conditional
 0DF5  E8 0580 R			call	DoHideCursor
 0DF8  E9 0FEC R			jmp	exit
					
 0DFB				ButtonAndPos:	; Function 3 : Get Button Statu
				s and Mouse Position
 0DFB  8B 1E 01E3 R			mov	bx,MouseX
 0DFF  8A 0E 01E7 R			mov	cl,XShift
 0E03  D3 FB				sar	bx,cl
 0E05  D3 E3				shl	bx,cl
 0E07  8B 16 01E5 R			mov	dx,MouseY
 0E0B  8A 0E 01E7 R			mov	cl,XShift
 0E0F  D3 FA				sar	dx,cl
 0E11  D3 E2				shl	dx,cl
 0E13  8B CB				mov	cx,bx			; Mouse
				 X
 0E15  8B 1E 01D8 R			mov	bx,ButtonStatus
 0E19  89 5E F6				mov	[bp-10],bx
 0E1C  E9 0FEC R			jmp	exit
 0E1F				SetMCurPos:	; Function 4 : Set Mouse Cursor
				 Position
 0E1F  89 0E 01E3 R			mov	MouseX,cx
 0E23  89 16 01E5 R			mov	MouseY,dx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-59


 0E27  E8 0BA1 R			call	MoveMouse
 0E2A  E9 0FEC R			jmp	exit
				
 0E2D				GetBPressInfo:	; Function 5 : Get Button Press
				 Information
				;	mov	cx,[bp-10]		; 0 or 
				1
				;	and	cx,1			; Norto
				n Editor passes 0x2000
				;	mov	ax,1
				;	shl	ax,cl
				;	and	ax,ButtonStatus
 0E2D  A1 01D8 R			mov	ax,ButtonStatus
 0E30  89 46 F4				mov	[bp-12],ax
 0E33  B1 04				mov	cl,4
 0E35  8B 5E F6				mov	bx,[bp-10]		; M2%
 0E38  83 E3 01				and	bx,1			; Norto
				n Editor passes 0x2000
 0E3B  D3 E3				shl	bx,cl			; * 16
 0E3D  8D 9F 01FB R			lea	bx,Buttons[bx]
 0E41  33 D2				xor	dx,dx			; zero
 0E43  87 17				xchg	dx,PressCount[bx]	; load 
				and zeroise
 0E45  8B 4F 02				mov	cx,PressX[bx]
 0E48  8B 5F 04				mov	bx,PressY[bx]
 0E4B  87 DA				xchg	bx,dx
 0E4D  89 5E F6				mov	[bp-10],bx
 0E50				exit1:					; becau
				se exit too far away
 0E50  E9 0FEC R			jmp	exit
				
 0E53				GetBRelInfo:	; Function 6 : Get Button Relea
				se Information
				;	mov	cx,[bp-10]		; 0 or 
				1
				;	and	cx,1			; Norto
				n Editor passes 0x2000
				;	mov	ax,1
				;	shl	ax,cl
				;	and	ax,ButtonStatus
 0E53  A1 01D8 R			mov	ax,ButtonStatus
 0E56  89 46 F4				mov	[bp-12],ax
 0E59  B1 04				mov	cl,4
 0E5B  8B 5E F6				mov	bx,[bp-10]		; M2%
 0E5E  83 E3 01				and	bx,1			; Norto
				n Editor passes 0x2000
 0E61  D3 E3				shl	bx,cl			; * 8
 0E63  8D 9F 01FB R			lea	bx,Buttons[bx]
 0E67  33 D2				xor	dx,dx			; zero
 0E69  87 57 06				xchg	dx,ReleaseCount[bx]	; load 
				and zeroise
 0E6C  8B 4F 08				mov	cx,ReleaseX[bx]
 0E6F  8B 5F 0A				mov	bx,ReleaseY[bx]
 0E72  87 DA				xchg	bx,dx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-60


 0E74  89 5E F6				mov	[bp-10],bx
 0E77  E9 0FEC R			jmp	exit
				
 0E7A				SetMInMaxHoriz:	; Function 7 : Set Minimum and 
				Maximum Horizontal Cursor Pos.
 0E7A  89 0E 01CC R			mov	XMinCursor,cx
 0E7E  89 16 01CE R			mov	XMaxCursor,dx
 0E82  E9 0FEC R			jmp	exit
				
 0E85				SetMInMaxVert:	; Function 8 : Set Minimum and 
				Maximum Vertical Cursor Pos.
 0E85  89 0E 01D0 R			mov	YMinCursor,cx
 0E89  89 16 01D2 R			mov	YMaxCursor,dx
 0E8D  E9 0FEC R			jmp	exit
				
 0E90				SetGCurBlock:	; Function 9 : Set Graphics Cur
				sor Block
					
 0E90  9C				pushf
 0E91  FA				cli				; disab
				le interrupts - Int Call ...
				
 0E92  F7 06 0167 R FFFF		test	CursorFlag,-1
 0E98  75 0A				jnz	SetGCNotVis1
 0E9A  F6 06 01E7 R FF			test	XShift,-1		; if no
				n-zero then in text mode
 0E9F  75 03				jnz	SetGCNotVis1
 0EA1  E8 0902 R			call	TidyGraphCursor
 0EA4				SetGCNotVis1:
 0EA4  8B 5E F6				mov	bx,[bp-10]		; M2%
 0EA7  89 1E 01ED R			mov	HotSpotX,bx
 0EAB  89 0E 01EF R			mov	HotSpotY,cx
				
 0EAF  56				push	si
 0EB0  57				push	di
 0EB1  06				push	es		; part 1 of swa
				p es to ds
 0EB2  1E				push	ds		; part 2 of swa
				p es to ds
 0EB3  8B F2				mov	si,dx
 0EB5  8D 3E 017C R			lea	di,GraphicsCDef
 0EB9  07				pop	es		; part 3 of swa
				p es to ds
 0EBA  1F				pop	ds		; part 2 of swa
				p es to ds
 0EBB  B9 0020				mov	cx,32
 0EBE  FC				cld			; to increment
 0EBF  F3/ A5				rep movsw	
 0EC1  0E				push	cs
 0EC2  1F				pop	ds		; restore ds
 0EC3  5F				pop	di		; etc 
 0EC4  5E				pop	si
 0EC5  F7 06 0167 R FFFF		test	CursorFlag,-1
 0ECB  75 0A				jnz	SetGCNotVis2
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-61


 0ECD  F6 06 01E7 R FF			test	XShift,-1		; if no
				n-zero then in text mode
 0ED2  75 03				jnz	SetGCNotVis2
 0ED4  E8 075B R			call	ShowGraphCursor
 0ED7				SetGCNotVis2:
 0ED7  9D				popf
 0ED8  E9 0FEC R			jmp	exit
 0EDB				SetTextCur:	; Function 10 : Set Text Cursor
 0EDB  9C				pushf
 0EDC  FA				cli				; disab
				le interrupts - Int Call ...
				;	inc	InTimer
 0EDD  F7 06 0167 R FFFF		test	CursorFlag,-1
 0EE3  75 03				jnz	STNotVis1		; curso
				r not visible
 0EE5  E8 0A0E R			call	TidySoftCursor		; remov
				e software cursor if it`s there
 0EE8				STNotVis1:
 0EE8  8B 5E F6				mov	bx,[bp-10]		; M2%
 0EEB  88 1E 0176 R			mov	TextCurs,bl		; curso
				r select
 0EEF  89 0E 0178 R			mov	TCScrMask,cx		; scree
				n mask / start line
 0EF3  89 16 017A R			mov	TCCursMask,dx		; curso
				r mask / stop line
 0EF7  F7 06 0167 R FFFF		test	CursorFlag,-1
 0EFD  75 26				jnz	STNotVis2
 0EFF  F6 06 0176 R FF			test	TextCurs,-1		; zero 
				is software cursor
 0F04  74 1C				jz	STSoft
 0F06  FF 0E 0167 R			dec	CursorFlag
 0F0A  8A 2E 0178 R			mov	ch,byte ptr TCScrMask	; start
				 line
 0F0E  8A 0E 017A R			mov	cl,byte ptr TCCursMask	; stop 
				line
 0F12  81 E1 0F0F			and	cx,0F0FH		; mask 
				to keep in range.
 0F16  B4 01				mov	ah,01			; set c
				ursor type
 0F18  9D				popf
 0F19  CD 10				int	10H			; do it
 0F1B  FF 06 0167 R			inc	CursorFlag
 0F1F  EB 05 90				jmp	STExit
 0F22				STSoft:
 0F22  E8 09C4 R			call	ShowSoftCursor		; show 
				software cursor, if required
 0F25				STNotVis2:
 0F25  9D				popf
 0F26				STExit:
				;	dec	InTimer
 0F26  E9 0FEC R			jmp	exit
 0F29				ReadMotCounts:	; Function 11 : Read Mouse Moti
				on Counters (taking the mickey)
				
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-62


				; -----------------------------
 0F29  B9 0200				mov	cx,200H			; speed
				 related bug ! on AT
 0F2C				xxLoop:
 0F2C  E2 FE				loop	xxLoop
				; -----------------------------
				
 0F2E  33 C9				xor	cx,cx
 0F30  87 0E 01E9 R			xchg	MickeyX,cx		; read 
				MickeyX and zeroise
 0F34  33 D2				xor	dx,dx
 0F36  87 16 01EB R			xchg	MickeyY,dx		; read 
				MickeyY and zeroise
 0F3A  E9 0FEC R			jmp	exit
 0F3D				SetISMaskAndAdd:; function 12 : Set Interrupt S
				ubroutine Call Mask and Address
 0F3D  9C				pushf
 0F3E  FA				cli				; disab
				le interrupts
 0F3F  89 0E 01C2 R			mov	IntCallMask,cx
 0F43  89 16 01C4 R			mov	IntCallAddr,dx
 0F47  8C 06 01C6 R			mov	IntCallSeg,es
 0F4B  9D				popf				; resto
				re previous interrupts state
 0F4C  E9 0FEC R			jmp	exit
 0F4F				LightPenEmuOn:	; Function 13 : Light Pen Emula
				tion Mode On
 0F4F  33 C0				xor	ax,ax			; zero 
				= on
 0F51				LightPenEmuOff:	; Function 14 : Light Pen Emula
				tion Mode Off
 0F51  A3 01D6 R			mov	LightPenMode,ax		; non-z
				ero = off
 0F54  E9 0FEC R			jmp	exit
 0F57				SetMPRatio:	; Function 15 : Set Mickey/Pixe
				l Ratio
 0F57  89 0E 01C8 R			mov	XMPRatio,cx
 0F5B  89 16 01CA R			mov	YMPRatio,dx
 0F5F  E9 0FEC R			jmp	exit
 0F62				CondOff:	; Function 16 : Conditional Off
 0F62  C6 06 01F2 R FF			mov	CondFlag,-1		; set c
				onditional off flag
 0F67  8B 5E F6				mov	bx,[bp-10]		; M2%
 0F6A  8B 76 F8				mov	si,[bp-8]
 0F6D  8B 7E FA				mov	di,[bp-6]
 0F70  89 0E 01F3 R			mov	LeftX,cx
 0F74  89 16 01F7 R			mov	TopY,dx
 0F78  89 36 01F5 R			mov	RightX,si
 0F7C  89 3E 01F9 R			mov	BottomY,di
 0F80  E8 0542 R			call	DoCondOff
 0F83  EB 67 90				jmp	exit
 0F86				SetDoubleSpThres:;Function 19 : Set Double-Spee
				d Threshold
 0F86  EB 64 90				jmp	exit
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-63


 0F89				SwapIntSubrs:	; Function 20 : Swap Interrupt 
				Subroutines
 0F89  9C				pushf
 0F8A  FA				cli				
					; disable interrupts
 0F8B  87 16 01C4 R			xchg	dx,IntCallAddr
 0F8F  87 0E 01C2 R			xchg	cx,IntCallMask
 0F93  51				push	cx
 0F94  8C C1				mov	cx,es
 0F96  87 0E 01C6 R			xchg	cx,IntCallSeg
 0F9A  89 4E FC				mov	[bp-4],cx
 0F9D  59				pop	cx
 0F9E  9D				popf				
					; restore interrupts state
 0F9F  EB 4B 90				jmp	exit
					
 0FA2				GetMDSSReq:	; Function 21 : Get Mouse Drive
				r State Storage Requirements
 0FA2  8B 1E 02DB R			mov	bx,[DataSize]
 0FA6  89 5E F6				mov	[bp-10],bx
 0FA9  EB 41 90				jmp	exit
 0FAC				SaveMDS:	; Function 22 : Save Mouse Driv
				er State
 0FAC  9C				pushf
 0FAD  FA				cli
 0FAE  8B FA				mov	di,dx
 0FB0  8D 36 0167 R			lea	si,StateInfo
 0FB4  8B 0E 02DB R			mov	cx,DataSize
 0FB8  FC				cld
 0FB9  F3/ A4				rep movsb
 0FBB  9D				popf
 0FBC  EB 2E 90				jmp	exit
 0FBF				RestoreMDS:		;	23
 0FBF  9C				pushf
 0FC0  FA				cli
 0FC1  8B 0E 02DB R			mov	cx,DataSize
 0FC5  1E				push	ds			; excha
				nge es and ds
 0FC6  8C C0				mov	ax,es
 0FC8  8E D8				mov	ds,ax
 0FCA  07				pop	es
 0FCB  8B F2				mov	si,dx			; ds:si
				 = source in user area
 0FCD  8D 3E 0167 R			lea	di,StateInfo		; es:di
				 = target in mouse area
 0FD1  FC				cld
 0FD2  F3/ A4				rep movsb
 0FD4  9D				popf
 0FD5  EB 15 90				jmp	exit
 0FD8				SetCRTPageNo:	; Function 29 : Set CRT Page Nu
				mber
 0FD8  8B 5E F6				mov	bx,[bp-10]		; M2%
 0FDB  89 1E 01D4 R			mov	CRTPageNumber,bx
 0FDF  EB 0B 90				jmp	exit
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-64


 0FE2				GetCRTPageNo:	; Function 30 : Get CRT Page Nu
				mber
 0FE2  8B 1E 01D4 R			mov	bx,CRTPageNumber
 0FE6  89 5E F6				mov	[bp-10],bx		; M2%
 0FE9  EB 01 90				jmp	exit
					
 0FEC				exit:
 0FEC  58				pop	ax
 0FED  5B				pop	bx
 0FEE  5E				pop	si
 0FEF  5F				pop	di
				
 0FF0  E8 04DD R			call	Trace
				
 0FF3  07				pop	es
 0FF4  1F				pop	ds
 0FF5  8B E5				mov	sp,bp
 0FF7  5D				pop	bp
 0FF8  CF				iret	
				
				
 0FF9				JTable:
 0FF9  0D18 R				dw	ResetAndStatus		;
					0
 0FFB  0DAD R				dw	ShowCursor		;
					1
 0FFD  0DF0 R				dw	HideCursor		;
					2
 0FFF  0DFB R				dw	ButtonAndPos		;
					3
 1001  0E1F R				dw	SetMCurPos		;
					4
 1003  0E2D R				dw	GetBPressInfo		;
					5
 1005  0E53 R				dw	GetBRelInfo		;
					6
 1007  0E7A R				dw	SetMInMaxHoriz		;
					7
 1009  0E85 R				dw	SetMInMaxVert		;
					8
 100B  0E90 R				dw	SetGCurBlock		;
					9
 100D  0EDB R				dw	SetTextCur		;
					10
 100F  0F29 R				dw	ReadMotCounts		;
					11
 1011  0F3D R				dw	SetISMaskAndAdd		;
					12
 1013  0F4F R				dw	LightPenEmuOn		;
					13
 1015  0F51 R				dw	LightPenEmuOff		;
					14
 1017  0F57 R				dw	SetMPRatio		;
					15
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-65


 1019  0F62 R				dw	CondOff			;
					16
 101B  0FEC R				dw	exit			;
					17
 101D  0FEC R				dw	exit			;
					18
 101F  0F86 R				dw	SetDoubleSpThres	;
					19
 1021  0F89 R				dw	SwapIntSubrs		;
					20
 1023  0FA2 R				dw	GetMDSSReq		;
					21
 1025  0FAC R				dw	SaveMDS			;
					22
 1027  0FBF R				dw	RestoreMDS		;
					23
 1029  0FEC R				dw	exit			;
					24
 102B  0FEC R				dw	exit			;
					25
 102D  0FEC R				dw	exit			;
					26
 102F  0FEC R				dw	exit			;
					27
 1031  0FEC R				dw	exit			;
					28
 1033  0FD8 R				dw	SetCRTPageNo		;
					29
 1035  0FE2 R				dw	GetCRTPageNo		;
					30
				
				
 1037				MouseDriver	ENDP
				
					include	EGALib.asm
			     C	
 = 0080                      C	BitChanged	equ	80H
 = 0040                      C	BitSingle	equ	40H
 = 8000                      C	BitProhibit	equ	8000H
			     C	
 1037                        C	EGAData:
			     C	
			     C	;	current values
			     C	
 1037  0000 0001 0002 0003   C	CRTRegs		dw	0000H,0001H,0002H,0003H
				,0004H,0005H,0006H,0007H
       0004 0005 0006 0007   C	
 1047  0008 0009 000A 000B   C			dw	0008H,0009H,000AH,000BH
				,000CH,000DH,000EH,000FH
       000C 000D 000E 000F   C	
 1057  0010 0011 0012 0013   C			dw	0010H,0011H,0012H,0013H
				,0014H,0015H,0016H,0017H
       0014 0015 0016 0017   C	
 1067  0018 FFFF             C			dw	0018H,-1
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-66


 106B  0003 8001 0002 0003   C	SeqRegs		dw	0003H,BitProhibit+0001H
				,0002H,0003H,BitProhibit+0004H,-1
       8004 FFFF             C	
 1077  0000 0001 0002 0003   C	GraphRegs	dw	0000H,0001H,0002H,0003H
				,0004H
       0004                  C	
 1081  0005 8006 0007        C			dw	0005H,BitProhibit+0006H
				,0007H
 1087  0008 FFFF             C			dw	0008H,-1
 108B  0000 0001 0002 0003   C	AttrRegs	dw	0000H,0001H,0002H,0003H
				,0004H,0005H,0006H,0007H
       0004 0005 0006 0007   C	
 109B  0008 0009 000A 000B   C			dw	0008H,0009H,000AH,000BH
				,000CH,000DH,000EH,000FH
       000C 000D 000E 000F   C	
 10AB  0010 0011 0012 0013   C			dw	0010H,0011H,0012H,0013H
				,-1
       FFFF                  C	
			     C	
			     C	;	default values
			     C	
 10B5  0019[                 C	CRTDefs		db	25 dup(0)
	   00                C	
			 ]   C	
			     C	
 10CE  0004[                 C	SeqDefs		db	4 Dup(0)
	   00                C	
			 ]   C	
			     C	
 10D2  0009[                 C	GraphDefs	db	9 dup (0)
	   00                C	
			 ]   C	
			     C	
 10DB  0014[                 C	AttrDefs	db	20 dup (0)
	   00                C	
			 ]   C	
			     C	
			     C	
 10EF                        C	EGARegs:
 10EF  D403                  C	EGA_CRTC	ELTab	<3d4H,offset CRTRegs,of
				fset CRTDefs,25,0>
 10F1  1037 R                C	
 10F3  10B5 R                C	
 10F5  19                    C	
 10F6  00                    C	
			     C	
 10F7  C403                  C	EGA_Seq		ELTab	<3c4H,offset SeqRegs,of
				fset SeqDefs,4,0>
 10F9  106B R                C	
 10FB  10CE R                C	
 10FD  04                    C	
 10FE  00                    C	
			     C	
 10FF  CE03                  C	EGA_Graph	ELTab	<3ceH,offset GraphRegs,
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-67


				offset GraphDefs,9,0>
 1101  1077 R                C	
 1103  10D2 R                C	
 1105  09                    C	
 1106  00                    C	
			     C	
 1107  C003                  C	EGA_Attr	ELTab	<3c0H,offset AttrRegs,o
				ffset AttrDefs,20,0>
 1109  108B R                C	
 110B  10DB R                C	
 110D  14                    C	
 110E  00                    C	
			     C	
 110F  C203                  C	EGA_Misc	ELTab	<3c2H,0a7H,0a7h,1,BitSi
				ngle>
 1111  A700                  C	
 1113  A700                  C	
 1115  01                    C	
 1116  40                    C	
			     C	
 1117  DA03                  C	EGA_Feat	ELTab	<3daH,0,0,1,BitSingle>
 1119  0000                  C	
 111B  0000                  C	
 111D  01                    C	
 111E  40                    C	
			     C	
 111F  CC03                  C	EGA_Gr1		ELTab	<3ccH,0,0,1,BitSingle>
 1121  0000                  C	
 1123  0000                  C	
 1125  01                    C	
 1126  40                    C	
			     C	
 1127  CA03                  C	EGA_Gr2		ELTab	<3caH,1,1,1,BitSingle>
 1129  0100                  C	
 112B  0100                  C	
 112D  01                    C	
 112E  40                    C	
			     C	
			     C	
 112F  00F8                  C	EGADataSize	dw	$-EGAData
			     C	
			     C	
			     C	;	EGA registers, etc
			     C	
 = 0000                      C	CRTId		equ	0
 = 0008                      C	SequencerId	equ	8
 = 0010                      C	GraphId		equ	10h
 = 0018                      C	AttrId		equ	18h
 = 0020                      C	MiscId		equ	20h
 = 0028                      C	FeatureId	equ	28h
 = 0030                      C	Graph1Id	equ	30h
 = 0038                      C	Graph2Id	equ	38h
			     C	
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-68


			     C	;	set the EGA registers for the mouse poi
				nter
			     C	
 1131  0009[                 C	EGAGraphSave		db	9 dup(0)
	   00                C	
			 ]   C	
			     C	
 113A  00                    C	EGASeqSave		db	0
 113B  00                    C	EGAGraphWant		db	0	; 0 - s
				et/reset
 113C  00                    C				db	0	; 1 - e
				nable set/reset
 113D  00                    C				db	0	; 2 - c
				olour compare
 113E  00                    C				db	0	; 3 - d
				ata rotate
 113F  00                    C				db	0	; 4 - r
				ead map select
 1140  00                    C				db	0	; 5 - w
				rite mode 0
 1141  00                    C				db	0	; 6 - m
				isc. - ignored
 1142  0F                    C				db	15	; 7 - c
				olour dont care
 1143  FF                    C				db	-1	; 8 - b
				it mask
			     C	
 1144                        C	SaveUser	PROC	NEAR
			     C	
 1144  F6 06 0123 R 02       C		test	CardActive,EGAType
 1149  74 2B                 C		jz	SUNotEGA		; not a
				n EGA card
			     C	
 114B  06                    C		push	es
 114C  50                    C		push	ax
 114D  53                    C		push	bx
 114E  51                    C		push	cx
 114F  52                    C		push	dx
			     C	
			     C	;	save the current contents
			     C	
 1150  8C C8                 C		mov	ax,cs
 1152  8E C0                 C		mov	es,ax
 1154  BA 0010               C		mov	dx,GraphId
 1157  B9 0009               C		mov	cx,9			; regis
				ters 0 to 8
 115A  BB 1131 R             C		mov	bx,offset EGAGraphSave	; read 
				into here
 115D  B4 F2                 C		mov	ah,0f2H			; read 
				register range
 115F  E8 11D5 R             C		call	EGAProc
			     C	
 1162  BA 0008               C		mov	dx,SequencerId
 1165  BB 0002               C		mov	bx,2			; read 
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-69


				plane map mask
 1168  B4 F0                 C		mov	ah,0f0H			; read 
				single register
 116A  E8 11D5 R             C		call	EGAProc
 116D  88 1E 113A R          C		mov	EGASeqSave,bl
 1171  5A                    C		pop	dx
 1172  59                    C		pop	cx
 1173  5B                    C		pop	bx
 1174  58                    C		pop	ax
 1175  07                    C		pop	es
 1176                        C	SUNotEGA:
 1176  C3                    C		ret
			     C	
 1177                        C	SaveUser	ENDP
			     C	
 1177                        C	SetMouse	PROC	NEAR
			     C	
 1177  F6 06 0123 R 02       C		test	CardActive,EGAType
 117C  74 21                 C		jz	SMNotEGA		; not a
				n EGA card
 117E  06                    C		push	es
			     C	
			     C	;	save the current contents
			     C	
 117F  E8 1144 R             C		call	SaveUser
 1182  EB 1A 90              C		jmp	SMOut
			     C	
			     C	;	write the values as needed by the mouse
			     C	
 1185  FE C4                 C		inc	ah			; f1H
 1187  BB 0F02               C		mov	bx,0f02H		; enabl
				e all planes
 118A  E8 11D5 R             C		call	EGAProc
			     C	
 118D  B4 F3                 C		mov	ah,0f3H
 118F  0E                    C		push	cs
 1190  07                    C		pop	es
 1191  8D 1E 113B R          C		lea	bx,EGAGraphWant		; what 
				the mouse wants
 1195  B9 0009               C		mov	cx,9			; regis
				ters 0 to 8 (except 6)
 1198  BA 0010               C		mov	dx,GraphId
 119B  E8 11D5 R             C		call	EGAProc			; set t
				hem
 119E                        C	SMOut:
 119E  07                    C		pop	es
			     C	
 119F                        C	SMNotEGA:
 119F  C3                    C		ret
			     C	
 11A0                        C	SetMouse	ENDP
			     C	
			     C	;	reset the user values in EGA registers
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-70


 11A0                        C	ResetUser	PROC	NEAR
			     C	
 11A0  F6 06 0123 R 02       C		test	CardActive,EGAType
 11A5  74 2D                 C		jz	RUNotEGA		; not a
				n EGA card
 11A7  06                    C		push	es
 11A8  50                    C		push	ax
 11A9  53                    C		push	bx
 11AA  51                    C		push	cx
 11AB  52                    C		push	dx
			     C	
			     C	;	write the values as saved by SetMouse
			     C	
 11AC  8C C8                 C		mov	ax,cs
 11AE  8E C0                 C		mov	es,ax
 11B0  B4 F1                 C		mov	ah,0f1H			; write
				 a register
 11B2  8A 3E 113A R          C		mov	bh,EGASeqSave
 11B6  B3 02                 C		mov	bl,02H			; enabl
				e planes
 11B8  BA 0008               C		mov	dx,SequencerId
 11BB  E8 11D5 R             C		call	EGAProc
			     C	
 11BE  B4 F3                 C		mov	ah,0f3H
 11C0  0E                    C		push	cs
 11C1  07                    C		pop	es
 11C2  8D 1E 1131 R          C		lea	bx,EGAGraphSave		; what 
				the mouse wants
 11C6  B9 0009               C		mov	cx,9			; regis
				ters 0 to 8 (except 6)
 11C9  BA 0010               C		mov	dx,GraphId
 11CC  E8 11D5 R             C		call	EGAProc		; set them
 11CF  5A                    C		pop	dx
 11D0  59                    C		pop	cx
 11D1  5B                    C		pop	bx
 11D2  58                    C		pop	ax
 11D3  07                    C		pop	es
 11D4                        C	RUNotEGA:
 11D4  C3                    C		ret
			     C	
 11D5                        C	ResetUser	ENDP
			     C	
			     C	
 11D5                        C	EGAProc		PROC	NEAR
			     C	
 11D5  55                    C		push	bp
 11D6  8B EC                 C		mov	bp,sp
			     C	
 11D8  1E                    C		push	ds			; bp-2
 11D9  06                    C		push	es			; bp-4
 11DA  57                    C		push	di			; bp-6
 11DB  56                    C		push	si			; bp-8
 11DC  53                    C		push	bx			; bp-10
 11DD  50                    C		push	ax			; bp-12
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-71


 11DE  52                    C		push	dx			; bp-14
 11DF  51                    C		push	cx			; bp-16
			     C	
 11E0  0E                    C		push	cs
 11E1  1F                    C		pop	ds
			     C	
 11E2  E8 04CD R             C		call	ETrace			; trace
				 if DoTrace = 2
			     C	
			     C	;	the Attribute Controller should have be
				en set to address state
			     C	;	by the caller. Just in case he hasn't d
				one so do it now. This
			     C	;	should not cause problems since the spe
				c. says that the A.C. is
			     C	;	always left in the Address state by EGA
				 Lib.
			     C	
 11E5  52                    C		push	dx			; save 
				DX
 11E6  8B 16 1117 R          C		mov	dx,word ptr EGA_Feat	; 3DAH 
				or 3BAH
 11EA  EC                    C		in	al,dx			; reset
				 Attr. Ctrlr flip/flop
 11EB  5A                    C		pop	dx			; resto
				re DX
			     C	
			     C	;	reason for call
			     C	
 11EC  80 E4 0F              C		and	ah,0fH
 11EF  8A DC                 C		mov	bl,ah
 11F1  D0 E3                 C		shl	bl,1			; *2
 11F3  32 FF                 C		xor	bh,bh			; bx = 
				jump table index
 11F5  80 FC 05              C		cmp	ah,5
 11F8  72 08                 C		jb	EPUseDX
 11FA  80 FC 07              C		cmp	ah,7
 11FD  74 03                 C		je	EPUseDX
 11FF  EB 0D 90              C		jmp	EPNoDX			; DX is
				 not a parameter
 1202                        C	EPUseDX:
 1202  8B F2                 C		mov	si,dx
 1204  8D B4 10EF R          C		lea	si,[EGARegs+si]		; offse
				t of this register
 1208  FC                    C		cld				; df = 
				0
 1209  8B 14                 C		mov	dx,[si].EGA_Port	; first
				 word of EGAReg entry = port no.
 120B  8B 44 02              C		mov	ax,[si].EGA_Values	; value
				 or list offset
 120E                        C	EPNoDX:
 120E  8D 9F 13C4 R          C		lea	bx,[EGATable+bx]
 1212  FF 27                 C		jmp	word ptr [bx]		; jump 
				to code for this function
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-72


			     C	
			     C	;	Function F0 : Read one register
			     C	
 1214                        C	ReadAReg:
 1214  F6 44 07 40           C		test	[si].EGA_Status,BitSingle
					; type of register
 1218  75 09                 C		jnz	RARSingle		; jump 
				if single - value already in al
 121A  8B F0                 C		mov	si,ax			; offse
				t of table
 121C  8B 5E F6              C		mov	bx,[bp-10]		; point
				er
 121F  D1 E3                 C		sal	bx,1
 1221  8A 00                 C		mov	al,[si+bx]		; get v
				alue
 1223                        C	RARSingle:
 1223  88 46 F6              C		mov	[bp-10],al		; store
				 for restoring
 1226  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	
			     C	;	Function F1 : Write one register
			     C	
 1229                        C	WriteAReg:
 1229  80 4C 07 80           C		or	[si].EGA_Status,BitChanged
					; set changed for Reset Defaults
 122D  8B 5E F6              C		mov	bx,[bp-10]		; (poin
				ter and) value
 1230  F6 44 07 40           C		test	[si].EGA_Status,BitSingle
					; type of register
 1234  75 1D                 C		jnz	WARSingle		; jump 
				if single - value already in al
 1236  8B F0                 C		mov	si,ax			; offse
				t of table
 1238  8B C3                 C		mov	ax,bx			; point
				er and value
 123A  32 FF                 C		xor	bh,bh			; bx = 
				pointer
 123C  D1 E3                 C		sal	bx,1
 123E  F7 00 8000            C		test	[si+bx],BitProhibit
 1242  75 14                 C		jnz	WARSkip			; don't
				 write this one
 1244  EE                    C		out	dx,al			; point
				er number set
 1245  8A C4                 C		mov	al,ah			; value
 1247  88 00                 C		mov	[si+bx],al
 1249  3B 16 1107 R          C		cmp	dx,word ptr EGA_Attr	; Attri
				bute Controller ?
 124D  74 08                 C		jz	WARCommon		; flip/
				flop instead of diff. addr.
 124F  42                    C		inc	dx			; port 
				for value
 1250  EB 05 90              C		jmp	WARCommon
 1253                        C	WARSingle:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-73


 1253  88 1C                 C		mov	[si],bl
 1255  8A C3                 C		mov	al,bl
 1257                        C	WARCommon:
 1257  EE                    C		out	dx,al			; write
				 to the register
 1258                        C	WARSkip:
 1258  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	;	Function F2 : Read register range
			     C	
 125B                        C	ReadRegs:
 125B  8B 7E F6              C		mov	di,[bp-10]		; regis
				ter table offset
 125E  F6 44 07 40           C		test	[si].EGA_Status,BitSingle
					; type of register
 1262  75 10                 C		jnz	RRSkip			; ignor
				e for single register
 1264  8B F0                 C		mov	si,ax			; regis
				ter value table start
 1266  8A C5                 C		mov	al,ch
 1268  32 E4                 C		xor	ah,ah
 126A  D1 E0                 C		sal	ax,1
 126C  03 F0                 C		add	si,ax			; offse
				t of the first one wanted
 126E  32 ED                 C		xor	ch,ch			; cx = 
				number of registers
 1270                        C	RRLoop:
 1270  A4                    C		movsb				; move 
				into user buffer
 1271  46                    C		inc	si			; skip 
				properties byte
 1272  E2 FC                 C		loop	RRLoop
 1274                        C	RRSkip:
 1274  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	;	Function F3 : Write register range
			     C	
 1277                        C	WriteRegs:
 1277  80 4C 07 80           C		or	[si].EGA_Status,BitChanged
					; set for Reset Defaults
 127B  8B 7E F6              C		mov	di,[bp-10]		; regis
				ter table offset
 127E  F6 44 07 40           C		test	[si].EGA_Status,BitSingle
						; type of register
 1282  75 3E                 C		jnz	WRSkip			; ignor
				e for single register
 1284  8B F0                 C		mov	si,ax			; regis
				ter value table start
 1286  8A C5                 C		mov	al,ch
 1288  32 E4                 C		xor	ah,ah
			     C	;	sal	ax,1
 128A  03 F0                 C		add	si,ax
 128C  03 F0                 C		add	si,ax			; offse
				t of the first one wanted
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-74


 128E  32 ED                 C		xor	ch,ch			; cx = 
				number of registers
			     C	
 1290  55                    C		push	bp
 1291  52                    C		push	dx
 1292  8B EC                 C		mov	bp,sp
 1294  3B 16 1107 R          C		cmp	dx,word ptr EGA_Attr	
					; is it the Attr Ctrl ?
 1298  74 01                 C		jz	WRAttr			; yes
 129A  42                    C		inc	dx			; Data 
				port address
 129B                        C	WRAttr:
			     C		
 129B                        C	WRLoop:
 129B  F7 04 8000            C		test	0[si],BitProhibit
 129F  75 0F                 C		jnz	WRLSkip
			     C	
 12A1  87 56 00              C		xchg	dx,0[bp]		; get a
				ddress port
 12A4  EE                    C		out	dx,al			; point
				er out
 12A5  50                    C		push	ax
 12A6  26: 8A 05             C		mov	al,es:0[di]		; get u
				ser value
 12A9  88 04                 C		mov	0[si],al		; store
				 in my table
 12AB  87 56 00              C		xchg	dx,0[bp]		; get d
				ata port
 12AE  EE                    C		out	dx,al			; set v
				alue
 12AF  58                    C		pop	ax
			     C	
 12B0                        C	WRLSkip:
 12B0  47                    C		inc	di
 12B1  83 C6 02              C		add	si,2
 12B4  40                    C		inc	ax			; next 
				pointer
 12B5  E2 E4                 C		loop	WRLoop
 12B7  3B 16 1107 R          C		cmp	dx,word ptr EGA_Attr
 12BB  75 03                 C		jnz	WRNotAttr		; not t
				he Attr.Ctrlr.
 12BD  B0 20                 C		mov	al,20H
 12BF  EE                    C		out	dx,al
 12C0                        C	WRNotAttr:
 12C0  5A                    C		pop	dx			; tidy 
				up stack ..
 12C1  5D                    C		pop	bp			; .. an
				d reset BP
 12C2                        C	WRSkip:
 12C2  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	;	Function F4 : Read register set
			     C	
 12C5                        C	ReadSet:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-75


 12C5  8B 76 F6              C		mov	si,[bp-10]		; point
				er to user table
 12C8  8B 46 FC              C		mov	ax,[bp-4]		; user 
				es
 12CB  8E D8                 C		mov	ds,ax			; ds = 
				user es
 12CD                        C	RSLoop:
 12CD  AD                    C		lodsw
 12CE  8B D0                 C		mov	dx,ax			; port 
				number
 12D0  AC                    C		lodsb
 12D1  8A D8                 C		mov	bl,al
 12D3  32 FF                 C		xor	bh,bh
 12D5  B4 F0                 C		mov	ah,0f0H
 12D7  E8 11D5 R             C		call	EGAProc			; read 
				a register into BL
 12DA  88 1C                 C		mov	0[si],bl		; store
				 in user table
 12DC  46                    C		inc	si			; next 
				lot
 12DD  E2 EE                 C		loop	RSLoop
 12DF  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	;	Function F5 : Write register set
			     C	
 12E2                        C	WriteSet:
 12E2  8B 76 F6              C		mov	si,[bp-10]		; point
				er to user table
 12E5  8B 46 FC              C		mov	ax,[bp-4]		; user 
				es
 12E8  8E D8                 C		mov	ds,ax			; ds = 
				user es
 12EA                        C	WSLoop:
 12EA  AD                    C		lodsw
 12EB  8B D0                 C		mov	dx,ax			; port 
				number
 12ED  8B F8                 C		mov	di,ax
 12EF  8D BD 10EF R          C		lea	di,[EGARegs+di]		; offse
				t of this register
 12F3  AD                    C		lodsw
 12F4  2E: F6 45 07 40       C		test	cs:[di].EGA_Status,BitSingle
 12F9  74 02                 C		jz	WSCommon
 12FB  8A C4                 C		mov	al,ah
 12FD                        C	WSCommon:
 12FD  8B D8                 C		mov	bx,ax			; data 
				(and pointer)
 12FF  B4 F1                 C		mov	ah,0f1H
 1301  E8 11D5 R             C		call	EGAProc			; write
				 a register into BX
 1304  E2 E4                 C		loop	WSLoop
 1306  E9 13B2 R             C		jmp	EGAExit
			     C	
			     C	;	Function F6 : Revert to default registe
				rs
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-76


			     C	
			     C	
 1309                        C	RevertToDefault:
 1309  B9 0004               C		mov	cx,4			; 4 mul
				ti-registers
 130C  BA 0000               C		mov	dx,0			; port 
				number
 130F  8C C8                 C		mov	ax,cs
 1311  8E C0                 C		mov	es,ax			; es = 
				this segment
 1313  8D 36 10EF R          C		lea	si,EGARegs
 1317                        C	MultiLoop:
 1317  51                    C		push	cx			; save 
				loop count
 1318  F6 44 07 80           C		test	[si].EGA_Status,BitChanged
 131C  74 16                 C		jz	MLNotChanged
 131E  8A 4C 06              C		mov	cl,[si].EGA_Count	; regis
				ter count (ch = 0)
 1321  83 FA 08              C		cmp	dx,SequencerId
 1324  75 02                 C		jnz	MLNotSeq
 1326  B5 01                 C		mov	ch,1			; start
				 at 1
 1328                        C	MLNotSeq:
 1328  8B 5C 04              C		mov	bx,[si].EGA_Defs	; defau
				lts address
 132B  B4 F3                 C		mov	ah,0f3H			; write
				 register range
 132D  E8 11D5 R             C		call	EGAProc			; write
				 them
 1330  80 74 07 80           C		xor	[si].EGA_Status,BitChanged
 1334                        C	MLNotChanged:
 1334  83 C6 08              C		add	si,8
 1337  83 C2 08              C		add	dx,8			; I res
				tore DX
 133A  59                    C		pop	cx
 133B  E2 DA                 C		loop	MultiLoop
			     C	
 133D  B9 0004               C		mov	cx,4
			     C	
 1340                        C	SingleLoop:
 1340  F6 44 07 80           C		test	[si].EGA_Status,BitChanged
 1344  74 0C                 C		jz	SLNotChanged
 1346  80 74 07 80           C		xor	[si].EGA_Status,BitChanged
			     C	
 134A  8B 5C 04              C		mov	bx,[si].EGA_Defs	; value
				 into bl
 134D  B4 F1                 C		mov	ah,0f1H			; write
				 a register
 134F  E8 11D5 R             C		call	EGAProc			; write
				 it
 1352                        C	SLNotChanged:
 1352  83 C6 08              C		add	si,8
 1355  83 C2 08              C		add	dx,8			; I res
				tore DX
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-77


 1358  E2 E6                 C		loop	SingleLoop
			     C	
 135A  EB 56 90              C		jmp	EGAExit
			     C	
			     C	;	Function F7 : Define default register t
				able
			     C	
 135D                        C	DefineDefault:
 135D  80 4C 07 80           C		or	[si].EGA_Status,BitChanged
 1361  F6 44 07 40           C		test	[si].EGA_Status,BitSingle
 1365  75 19                 C		jnz	DDSingle		; it's 
				a single
			     C	
 1367  8C C8                 C		mov	ax,cs
 1369  8E C0                 C		mov	es,ax
 136B  8B 7C 04              C		mov	di,[si].EGA_Defs	; es:di
				 points at defaults area
			     C	
 136E  8A 4C 06              C		mov	cl,[si].EGA_Count
 1371  32 ED                 C		xor	ch,ch
			     C	
 1373  8B 76 F6              C		mov	si,[bp-10]		; point
				er to user table
 1376  8B 46 FC              C		mov	ax,[bp-4]		; user 
				es
 1379  8E D8                 C		mov	ds,ax			; ds:si
				 points at user values
			     C	
 137B                        C	DDMove:
			     C	
 137B  F3/ A4                C	    rep movsb				; move 
			     C	
 137D  EB 33 90              C		jmp	EGAExit
			     C	
 1380                        C	DDSingle:
 1380  83 C6 04              C		add	si,EGA_Defs		; low b
				yte of EGA_Defs
 1383  B9 0001               C		mov	cx,1
 1386  EB F3                 C		jmp	DDMove
			     C	
			     C	;	Function FA : Interrogate driver
			     C	
 1388  01 50                 C	EGAVersion	db	1,80
			     C	
 138A                        C	Interrogate:
 138A  0E                    C		push	cs
 138B  58                    C		pop	ax
 138C  8D 1E 1388 R          C		lea	bx,EGAVersion
 1390  89 5E F6              C		mov	[bp-10],bx
 1393  89 46 FC              C		mov	[bp-4],ax
			     C	;	jmp	EGAExit
			     C	
			     C	;	Functions F8,F9, and FB to FF : Reserve
				d
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-78


			     C	
 1396                        C	Reserved:
 1396  8B 46 FE              C		mov	ax,[bp-2]		; resto
				re ax, ds, si
 1399  8E D8                 C		mov	ds,ax
 139B  8B 46 F4              C		mov	ax,[bp-12]
 139E  8B 76 F8              C		mov	si,[bp-8]
 13A1  9C                    C		pushf
 13A2  2E: FF 1E 0116 R      C		call	cs:dword ptr VideoOffset
					; call the normal int 10H handler
 13A7  89 46 F4              C		mov	[bp-12],ax
 13AA  89 76 F8              C		mov	[bp-8],si
 13AD  8C D8                 C		mov	ax,ds
 13AF  89 46 FE              C		mov	[bp-2],ax
			     C	;	jmp	EGAExit
			     C	
 13B2                        C	EGAExit:
			     C	
			     C	;	the Attribute Controller is always left
				 in the Address state by
			     C	;	this routine.
			     C	
 13B2  2E: 8B 16 1117 R      C		mov	dx,word ptr cs:EGA_Feat	
					; 3DAH or 3BAH
 13B7  EC                    C		in	al,dx			; reset
				 Attr. Ctrlr flip/flop
			     C	
 13B8  59                    C		pop	cx
 13B9  5A                    C		pop	dx
 13BA  58                    C		pop	ax
 13BB  5B                    C		pop	bx
 13BC  5E                    C		pop	si
 13BD  5F                    C		pop	di
 13BE  07                    C		pop	es
 13BF  1F                    C		pop	ds
 13C0  8B E5                 C		mov	sp,bp
 13C2  5D                    C		pop	bp
			     C	
 13C3  C3                    C		ret
			     C	
 13C4                        C	EGAProc	ENDP
			     C	
 13C4                        C	EGATable:
 13C4  1214 R                C		dw	ReadAReg		;
					F0
 13C6  1229 R                C		dw	WriteAReg		;
					F1
 13C8  125B R                C		dw	ReadRegs		;
					F2
 13CA  1277 R                C		dw	WriteRegs		;
					F3
 13CC  12C5 R                C		dw	ReadSet			;
					F4
 13CE  12E2 R                C		dw	WriteSet		;
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-79


					F5
 13D0  1309 R                C		dw	RevertToDefault		;
					F6
 13D2  135D R                C		dw	DefineDefault		;
					F7
 13D4  1396 R                C		dw	Reserved		;
					F8
 13D6  1396 R                C		dw	Reserved		;
					F9
 13D8  138A R                C		dw	Interrogate		;
					FA
 13DA  1396 R                C		dw	Reserved		;
					FB
 13DC  1396 R                C		dw	Reserved		;
					FC
 13DE  1396 R                C		dw	Reserved		;
					FD
 13E0  1396 R                C		dw	Reserved		;
					FE
 13E2  1396 R                C		dw	Reserved		;
					FF
			     C	
			     C	
 13E4                        C	CopyDefaults	PROC	NEAR
			     C	
			     C	;	input	es:di		points at my ar
				ea for defaults
			     C	;		ds:si		points at EGA c
				ards area for defaults
			     C	;		cx		loop count
			     C	
 13E4                        C	CDLoop:
 13E4  26: 8B 05             C		mov	ax,es:0[di]		; get s
				tatus byte + value
 13E7  AC                    C		lodsb				; get d
				efault value into AL
 13E8  AB                    C		stosw				; store
				 status and value
 13E9  E2 F9                 C		loop	CDLoop
 13EB  C3                    C		ret
			     C	
 13EC                        C	CopyDefaults	ENDP
			     C	
			     C	;	convert Video Mode (in AX) to index in 
				defaults list (in AX)
			     C	
 13EC                        C	WhatIndex	Proc	Near
			     C		
 13EC  3D 000E               C		cmp	ax,14
 13EF  77 13                 C		ja	Check64K		; index
				 for 16&15 dependent on RAM size
 13F1  3D 0003               C		cmp	ax,3
 13F4  77 19                 C		ja	IndexAsIs		; modes
				 4-14, index == mode
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-80


			     C	
			     C	;	check enhanced colour display
			     C	
 13F6  2E: F6 06 0126 R 01   C		test	cs:EGAEnhanced,1
 13FC  74 11                 C		jz	IndexAsIs
 13FE  05 0013               C		add	ax,13H			; enhan
				ced colour display
 1401  EB 0C 90              C		jmp	IndexAsIs
			     C	
 1404                        C	Check64K:
			     C	
			     C	;	check for more than 64K RAM
			     C	
 1404  2E: F6 06 0124 R FF   C		test	cs:EGARamSize,-1
 140A  74 03                 C		jz	IndexAsIs		; 0 = 6
				4K RAM
 140C  05 0002               C		add	ax,2			; > 64K
				 Ram
			     C	
 140F                        C	IndexAsIs:
 140F  C3                    C		ret
			     C	
 1410                        C	WhatIndex	EndP
			     C	
			     C	
 1410                        C	InitEGALib	PROC	NEAR
			     C	
			     C	;	input	ax	Video Mode
			     C	
			     C	;	check if EGA card present
			     C	
 1410  2E: F6 06 0123 R 02   C		test	cs:CardActive,EGAType
 1416  75 03                 C		jnz	InitEGA
 1418  E9 149C R             C		jmp	InitNotEGA		; not a
				n EGA card
			     C	
 141B                        C	InitEGA:
			     C	
			     C	;	save registers
			     C	
 141B  06                    C		push	es
 141C  57                    C		push	di
 141D  1E                    C		push	ds
 141E  56                    C		push	si
 141F  51                    C		push	cx
 1420  50                    C		push	ax
			     C	
			     C	;	convert Video Mode to index in defaults
				 list
			     C		
 1421  E8 13EC R             C		call	WhatIndex
			     C	
 1424  33 C9                 C		xor	cx,cx
 1426  8E D9                 C		mov	ds,cx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-81


 1428  C5 36 04A8            C		lds	si,ds:[04A8H]		; Save 
				Ptr Table
 142C  C5 34                 C		lds	si,ds:[si] 		; Video
				 Parameter Table
			     C	
 142E  B9 0006               C		mov	cx,6			; shift
				 6 == * 64
 1431  D3 E0                 C		shl	ax,cl			; index
 1433  03 F0                 C		add	si,ax			; point
				er to defaults for this mode
 1435  83 C6 05              C		add	si,5			; point
				er to Sequencer defaults
			     C		
 1438  FC                    C		cld				; direc
				tion for lods	
			     C	
 1439  8C C8                 C		mov	ax,cs
 143B  8E C0                 C		mov	es,ax			; point
				 ES at this code segment
 143D  8D 3E 106D R          C		lea	di,cs:SeqRegs+2		; regis
				ter 0 has no default ????
 1441  B9 0004               C		mov	cx,4
 1444  51                    C		push	cx
 1445  56                    C		push	si
 1446  E8 13E4 R             C		call	CopyDefaults
 1449  8D 3E 10CE R          C		lea	di,cs:SeqDefs
 144D  5E                    C		pop	si
 144E  59                    C		pop	cx
 144F  F3/ A4                C	    rep movsb
			     C	
 1451  AC                    C		lodsb				; Misce
				llaneous
 1452  2E: A2 1111 R         C		mov	byte ptr cs:EGA_Misc+2,al
 1456  2E: A2 1113 R         C		mov	byte ptr cs:EGA_Misc+4,al
					; naughty !!!!!!
			     C	
 145A  B9 0019               C		mov	cx,25
 145D  8D 3E 1037 R          C		lea	di,cs:CRTRegs
 1461  51                    C		push	cx
 1462  56                    C		push	si
 1463  E8 13E4 R             C		call	CopyDefaults
 1466  8D 3E 10B5 R          C		lea	di,cs:CRTDefs
 146A  5E                    C		pop	si
 146B  59                    C		pop	cx
 146C  F3/ A4                C	    rep movsb
			     C	
 146E  B9 0014               C		mov	cx,20
 1471  8D 3E 108B R          C		lea	di,cs:AttrRegs
 1475  51                    C		push	cx
 1476  56                    C		push	si
 1477  E8 13E4 R             C		call	CopyDefaults
 147A  8D 3E 10DB R          C		lea	di,cs:AttrDefs
 147E  5E                    C		pop	si
 147F  59                    C		pop	cx
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-82


 1480  F3/ A4                C	    rep movsb
			     C	
 1482  B9 0009               C		mov	cx,9
 1485  8D 3E 1077 R          C		lea	di,cs:GraphRegs
 1489  51                    C		push	cx
 148A  56                    C		push	si
 148B  E8 13E4 R             C		call	CopyDefaults
 148E  8D 3E 10D2 R          C		lea	di,cs:GraphDefs
 1492  5E                    C		pop	si
 1493  59                    C		pop	cx
 1494  F3/ A4                C	    rep movsb
			     C	
			     C	;	restore registers
			     C	
 1496  58                    C		pop	ax
 1497  59                    C		pop	cx
 1498  5E                    C		pop	si
 1499  1F                    C		pop	ds
 149A  5F                    C		pop	di
 149B  07                    C		pop	es
			     C	
 149C                        C	InitNotEGA:
 149C  C3                    C		ret
			     C	
 149D                        C	InitEGALib	ENDP
					include	Init.asm
			     C	
			     C	;
			     C	;
			     C	;	CheckVideo
			     C	;
			     C	;		Check which Video card(s) is(ar
				e) present
			     C	;
			     C	
 149D                        C	CheckVideo	Proc	Near
			     C	
 149D  51                    C		push	cx
 149E  56                    C		push	si
			     C	
 149F  32 C0                 C		xor	al,al
 14A1  A2 0123 R             C		mov	CardActive,al
 14A4  A2 0122 R             C		mov	CardFound,al
			     C	
			     C	;	check for VGA
			     C	
 14A7  B8 1A00               C		mov	ax,1a00H
 14AA  CD 10                 C		int	10H			
					; video interrupt
 14AC  3C 1A                 C		cmp	al,1aH
 14AE  75 0F                 C		jnz	NotVGA
			     C	
 14B0  80 0E 0122 R 01       C		or	CardFound,VGAType
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-83


 14B5  80 FB 07              C		cmp	bl,7
 14B8  72 05                 C		jb	NotVGA
 14BA  80 0E 0123 R 01       C		or	CardActive,VGAType
			     C	
 14BF                        C	NotVGA:
			     C	
			     C	;	check for EGA
			     C	
 14BF  B4 12                 C		mov	ah,12H
 14C1  B3 10                 C		mov	bl,10H
 14C3  CD 10                 C		int	10H			; video
			     C	
 14C5  80 FB 10              C		cmp	bl,10H
 14C8  74 0C                 C		jz	NotEGA
 14CA  F6 06 0122 R 01       C		test	CardFound,VGAType	; is it
				 really VGA ?
 14CF  75 05                 C		jnz	NotEGA
 14D1  80 0E 0122 R 02       C		or	CardFound,EGAType
			     C	
 14D6                        C	NotEGA:
 14D6  F6 06 0122 R 01       C		test	CardFound,VGAType
 14DB  75 0A                 C		jnz	EGAPresent
 14DD  F6 06 0122 R 02       C		test	CardFound,EGAType
 14E2  75 03                 C		jnz	EGAPresent
 14E4  EB 57 90              C		jmp	EGANotPres
 14E7                        C	EGAPresent:
			     C	
			     C	;	check monitor type and set register add
				resses accordingly
			     C	
 14E7  C7 06 10EF R 03D4     C		mov	word ptr EGA_CRTC,3d4H	; store
				 Monochrome monitor values
 14ED  C7 06 1117 R 03DA     C		mov	word ptr EGA_Feat,3daH
 14F3  0A FF                 C		or	bh,bh			; 0 => 
				Colour monitor connected
 14F5  75 11                 C		jnz	EGANotCol
 14F7  C7 06 10EF R 03B4     C		mov	word ptr EGA_CRTC,3b4H	; store
				 Colour monitor values
 14FD  C7 06 1117 R 03BA     C		mov	word ptr EGA_Feat,3baH
 1503  C6 06 0125 R 01       C		mov	EGAColour,1
 1508                        C	EGANotCol:
			     C		
			     C	;	ram size
			     C	
 1508  88 1E 0124 R          C		mov	EGARamSize,bl
			     C	
 150C  33 C0                 C		xor	ax,ax
 150E  8E C0                 C		mov	es,ax
 1510  26: F6 06 0487 08     C		test	byte ptr es:[487h],8
 1516  75 0C                 C		jnz	EGANotActive		; EGA n
				ot active
 1518  F6 06 0123 R 01       C		test	CardActive,VGAType
 151D  75 05                 C		jnz	EGANotActive
 151F  C6 06 0123 R 02       C		mov	CardActive,EGAType
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-84


 1524                        C	EGANotActive:
			     C		
 1524  F6 06 0125 R 01       C		test	EGAColour,1
 1529  74 12                 C		jz	EGANotPres
 152B  80 F9 03              C		cmp	cl,3
 152E  74 05                 C		jz	EGAEnhan
 1530  80 F9 09              C		cmp	cl,9
 1533  75 08                 C		jnz	EGANotPres
 1535                        C	EGAEnhan:
 1535  C6 06 0126 R 01       C		mov	EGAEnhanced,1
 153A  EB 01 90              C		jmp	EGANotPres
			     C	
 153D                        C	EGANotPres:
			     C	
			     C	;	check for mono adaptor
			     C	
 153D  F6 06 0125 R 01       C		test	EGAColour,1
 1542  75 07                 C		jnz	MonoCheck
 1544  F6 06 0122 R 03       C		test	CardFound,EGAType+VGAType
 1549  75 28                 C		jnz	TryCGA1			; EGACo
				lour false 
 154B                        C	MonoCheck:
 154B  BA 03B4               C		mov	dx,3b4h			; mono 
				control port
 154E  B0 0F                 C		mov	al,0fh
 1550  EE                    C		out	dx,al
 1551  42                    C		inc	dx
 1552  EC                    C		in	al,dx			; statu
				s ? cursor position ?
 1553  86 E0                 C		xchg	ah,al
 1555  B0 64                 C		mov	al,100
 1557  EE                    C		out	dx,al
 1558  EC                    C		in	al,dx
 1559  3C 64                 C		cmp	al,100
 155B  75 08                 C		jnz	TryCGA
 155D  80 0E 0122 R 08       C		or	CardFound,MDAType
 1562  86 E0                 C		xchg	ah,al
 1564  EE                    C		out	dx,al			; resto
				re cursor position
			     C	
 1565                        C	TryCGA:
 1565  F6 06 0125 R 01       C		test	EGAColour,1
 156A  74 07                 C		jz	TryCGA1
 156C  F6 06 0122 R 03       C		test	CardFound,EGAType+VGAType
 1571  75 1A                 C		jnz	TryHerc
 1573                        C	TryCGA1:				; jump 
				to here if EGAColour false
 1573  BA 03D4               C		mov	dx,3d4h			; CGA c
				ontrol port
 1576  B0 0F                 C		mov	al,0fh
 1578  EE                    C		out	dx,al
 1579  42                    C		inc	dx
 157A  EC                    C		in	al,dx			; statu
				s ? cursor position ?
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-85


 157B  86 E0                 C		xchg	ah,al
 157D  B0 64                 C		mov	al,100
 157F  EE                    C		out	dx,al
 1580  EC                    C		in	al,dx
 1581  3C 64                 C		cmp	al,100
 1583  75 08                 C		jnz	TryHerc			; EGACo
				lour true but !(ega||vga) also true
 1585  80 0E 0122 R 04       C		or	CardFound,CGAType
 158A  86 E0                 C		xchg	ah,al
 158C  EE                    C		out	dx,al			; resto
				re cursor position
			     C	
 158D                        C	TryHerc:
			     C	
			     C	;	see if a Hercules card is present
			     C	
 158D  BA 03BA               C		mov	dx,3baH			; Hercu
				les status port
 1590  EC                    C		in	al,dx
 1591  24 80                 C		and	al,80H
 1593  86 C4                 C		xchg	al,ah
 1595  B9 8000               C		mov	cx,8000H
 1598                        C	HercTLoop:
 1598  EC                    C		in	al,dx
 1599  24 80                 C		and	al,80H
 159B  3A C4                 C		cmp	al,ah
 159D  74 0D                 C		jz	HercAgain
 159F  80 0E 0122 R 10       C		or	CardFound,HerType
 15A4  80 36 0122 R 08       C		xor	CardFound,MDAType
 15A9  EB 03 90              C		jmp	WhoActive
 15AC                        C	HercAgain:
 15AC  E2 EA                 C		loop	HercTLoop
			     C	
			     C	;	determine who, if not EGA/VGA, is activ
				e
			     C	
 15AE                        C	WhoActive:
 15AE  F6 06 0123 R 03       C		test	CardActive,EGAType+VGAType
 15B3  75 21                 C		jnz	ExitNow
			     C	
 15B5  3D 0007               C		cmp	ax,7
 15B8  75 17                 C		jnz	MustBeCGA
 15BA  F6 06 0122 R 10       C		test	CardFound,HerType
 15BF  74 08                 C		jz	MDAAct
 15C1  C6 06 0123 R 10       C		mov	CardActive,HerType
 15C6  EB 0E 90              C		jmp	ExitNow
 15C9                        C	MDAAct:
 15C9  C6 06 0123 R 08       C		mov	CardActive,MDAType
 15CE  EB 06 90              C		jmp	ExitNow
 15D1                        C	MustBeCGA:
 15D1  C6 06 0123 R 04       C		mov	CardActive,CGAType
			     C	
 15D6                        C	ExitNow:
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-86


 15D6  5E                    C		pop	si
 15D7  59                    C		pop	cx
 15D8  C3                    C		ret
			     C	
 15D9                        C	CheckVideo	EndP
			     C	
			     C	
 15D9                        C	EndOfResident:
			     C	
			     C	
			     C	; --------------	end of resident code & 
				data	-----------------------
			     C	
			     C	
 15D9  0D 0A 56 69 64 65     C	VMode	db	13,10,"VideoMode : $"
       6F 4D 6F 64 65 20     C	
       3A 20 24              C	
 15E8  0D 0A 4E 75 6D 62     C	ModeNo	db	13,10,"Number    : $"
       65 72 20 20 20 20     C	
       3A 20 24              C	
 15F7  0D 0A 43 6F 6C 75     C	Columns	db	13,10,"Columns   : $"
       6D 6E 73 20 20 20     C	
       3A 20 24              C	
 1606  0D 0A 52 6F 77 73     C	Rows	db	13,10,"Rows      : $"
       20 20 20 20 20 20     C	
       3A 20 24              C	
 1615  0D 0A 43 68 61 72     C	Height	db	13,10,"Char size : $"
       20 73 69 7A 65 20     C	
       3A 20 24              C	
 1624  0D 0A 50 61 67 65     C	XPage	db	13,10,"Page size : $"
       20 73 69 7A 65 20     C	
       3A 20 24              C	
 1633  0D 0A 53 65 71 75     C	Seq	db	13,10,"Sequencer : $"
       65 6E 63 65 72 20     C	
       3A 20 24              C	
 1642  0D 0A 4D 69 73 63     C	Misc	db	13,10,"Misc. reg : $"
       2E 20 72 65 67 20     C	
       3A 20 24              C	
 1651  0D 0A 43 52 54 43     C	CRTC	db	13,10,"CRTC reg. : $"
       20 72 65 67 2E 20     C	
       3A 20 24              C	
 1660  0D 0A 41 74 74 72     C	Attr	db	13,10,"Attr reg. : $"
       20 72 65 67 2E 20     C	
       3A 20 24              C	
 166F  0D 0A 47 72 61 70     C	Graph	db	13,10,"Graphics  : $"
       68 69 63 73 20 20     C	
       3A 20 24              C	
 167E  0010[                 C	Buffer	db	16 dup (?)
	   ??                C	
			 ]   C	
			     C	
 168E  30 31 32 33 34 35     C	Hex	db	"0123456789ABCDEF"
       36 37 38 39 41 42     C	
       43 44 45 46           C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-87


 169E  4D 6F 6E 69 74 6F     C	Monitor	db	"Monitor type : $"
       72 20 74 79 70 65     C	
       20 3A 20 24           C	
 16AE  43 6F 6C 6F 75 72     C	ColoMon	db	"Colour$"
       24                    C	
 16B5  4D 6F 6E 6F 63 68     C	MonoMon	db	"Monochrome",13,10,"$"
       72 6F 6D 65 0D 0A     C	
       24                    C	
 16C2  28 45 6E 68 61 6E     C	Enhance	db	"(Enhanced)"
       63 65 64 29           C	
 16CC  0D 0A 24              C	NewLine	db	13,10,"$"
 16CF  0D 0A 56 47 41 20     C	VGACard	db	13,10,"VGA card  : $"
       63 61 72 64 20 20     C	
       3A 20 24              C	
 16DE  0D 0A 45 47 41 20     C	EGACard	db	13,10,"EGA card  : $"
       63 61 72 64 20 20     C	
       3A 20 24              C	
 16ED  0D 0A 43 47 41 20     C	CGACard	db	13,10,"CGA card  : $"
       63 61 72 64 20 20     C	
       3A 20 24              C	
 16FC  0D 0A 4D 44 41 20     C	MDACard	db	13,10,"MDA card  : $"
       63 61 72 64 20 20     C	
       3A 20 24              C	
 170B  0D 0A 48 65 72 63     C	HerCard	db	13,10,"Hercules card  : $"
       75 6C 65 73 20 63     C	
       61 72 64 20 20 3A     C	
       20 24                 C	
 171F  0D 0A 48 65 72 63     C	HerWarn	db	13,10,"Hercules information unr
				eliable for multi-mode card"
       75 6C 65 73 20 69     C	
       6E 66 6F 72 6D 61     C	
       74 69 6F 6E 20 75     C	
       6E 72 65 6C 69 61     C	
       62 6C 65 20 66 6F     C	
       72 20 6D 75 6C 74     C	
       69 2D 6D 6F 64 65     C	
       20 63 61 72 64        C	
 1754  0D 0A 24              C		db	13,10,"$"
			     C	
 1757  69 6E                 C	Inactive	db	"in"
 1759  61 63 74 69 76 65     C	Active		db	"active",13,10,"$"
       0D 0A 24              C	
			     C	
 1762  48 20 4B 62 20 52     C	RamSize		db	"H Kb RAM installed : $
				"
       41 4D 20 69 6E 73     C	
       74 61 6C 6C 65 64     C	
       20 3A 20 24           C	
			     C	
 1778  00                    C	DoOutput	db	0
			     C	
 1779                        C	String	Proc	Near
			     C	
 1779  2E: F6 06 1778 R 01   C		test	cs:DoOutput,1
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-88


 177F  74 0A                 C		jz	SSkip			; no ou
				tput required
			     C	
 1781  50                    C		push	ax
 1782  1E                    C		push	ds
 1783  0E                    C		push	cs
 1784  1F                    C		pop	ds
 1785  B4 09                 C		mov	ah,9
 1787  CD 21                 C		int	21H
 1789  1F                    C		pop	ds
 178A  58                    C		pop	ax
			     C	
 178B                        C	SSkip:
 178B  C3                    C		ret
			     C	
 178C                        C	String	EndP
			     C	
 178C                        C	Write	Proc	Near
			     C	
 178C  2E: F6 06 1778 R 01   C		test	cs:DoOutput,1
 1792  74 2B                 C		jz	WSkip			; no ou
				tput required
			     C	
 1794  50                    C		push	ax
 1795  53                    C		push	bx
 1796  1E                    C		push	ds
 1797  0E                    C		push	cs
 1798  1F                    C		pop	ds
			     C	
 1799  33 DB                 C		xor	bx,bx
 179B  8A D8                 C		mov	bl,al
 179D  53                    C		push	bx
			     C	
 179E  5B                    C		pop	bx
 179F  53                    C		push	bx
 17A0  D1 EB                 C		shr	bx,1
 17A2  D1 EB                 C		shr	bx,1
 17A4  D1 EB                 C		shr	bx,1
 17A6  D1 EB                 C		shr	bx,1
 17A8  8A 97 168E R          C		mov	dl,hex[bx]
 17AC  B4 02                 C		mov	ah,2
 17AE  CD 21                 C		int	21H
			     C	
 17B0  5B                    C		pop	bx
 17B1  80 E3 0F              C		and	bl,0FH
 17B4  8A 97 168E R          C		mov	dl,hex[bx]
 17B8  B4 02                 C		mov	ah,2
 17BA  CD 21                 C		int	21H			; outpu
				t character in DL
			     C	
 17BC  1F                    C		pop	ds
 17BD  5B                    C		pop	bx
 17BE  58                    C		pop	ax
 17BF                        C	WSkip:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-89


 17BF  C3                    C		ret
			     C	
 17C0                        C	Write	EndP
			     C	
			     C	
 17C0                        C	Display	Proc	Near
			     C	
			     C	;	input	ax		video mode
			     C	
 17C0  F6 06 1778 R 01       C		test	DoOutput,1
 17C5  75 03                 C		jnz	DCont
 17C7  E9 188A R             C		jmp	DSkip			; no ou
				tput required
 17CA                        C	DCont:
 17CA  1E                    C		push	ds
 17CB  33 DB                 C		xor	bx,bx
 17CD  8E C3                 C		mov	es,bx
 17CF  26: C4 3E 04A8        C		les	di,es:[04A8H]		; Save 
				Ptr Table
 17D4  26: C5 35             C		lds	si,es:[di] 		; Video
				 Parameter Table
			     C	
 17D7  8D 16 15E8 R          C		lea	dx,ModeNo
 17DB  E8 1779 R             C		call	String
 17DE  E8 178C R             C		call	Write
			     C	
 17E1  B1 06                 C		mov	cl,6
 17E3  D3 E0                 C		shl	ax,cl			; mode 
				* 64
 17E5  03 F0                 C		add	si,ax			; offse
				t for this mode
			     C	
 17E7  8D 16 15F7 R          C		lea	dx,Columns
 17EB  E8 1779 R             C		call	String
 17EE  AC                    C		lodsb
 17EF  E8 178C R             C		call	Write
			     C	
 17F2  8D 16 1606 R          C		lea	dx,Rows
 17F6  E8 1779 R             C		call	String
 17F9  AC                    C		lodsb
 17FA  E8 178C R             C		call	Write
			     C	
 17FD  8D 16 1615 R          C		lea	dx,Height
 1801  E8 1779 R             C		call	String
 1804  AC                    C		lodsb
 1805  E8 178C R             C		call	Write
			     C	
 1808  8D 16 1624 R          C		lea	dx,XPage
 180C  E8 1779 R             C		call	String
 180F  AD                    C		lodsw
 1810  86 E0                 C		xchg	ah,al
 1812  E8 178C R             C		call	Write
 1815  8A C4                 C		mov	al,ah
 1817  E8 178C R             C		call	Write
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-90


			     C	
 181A  B9 0004               C		mov	cx,4
 181D  8D 16 1633 R          C		lea	dx,Seq
 1821  E8 1779 R             C		call	String
 1824  EB 07 90              C		jmp	SeqL1
 1827                        C	SeqLoop:
 1827  B2 2C                 C		mov	dl,","
 1829  B4 02                 C		mov	ah,2
 182B  CD 21                 C		int	21H
 182D                        C	SeqL1:
 182D  AC                    C		lodsb
 182E  E8 178C R             C		call	Write
 1831  E2 F4                 C		loop	SeqLoop
			     C	
 1833  8D 16 1642 R          C		lea	dx,Misc
 1837  E8 1779 R             C		call	String
 183A  AC                    C		lodsb
 183B  E8 178C R             C		call	Write
			     C	
 183E  B9 0019               C		mov	cx,25
 1841  8D 16 1651 R          C		lea	dx,CRTC
 1845  E8 1779 R             C		call	String
 1848  EB 07 90              C		jmp	MiscL1
 184B                        C	MiscLoop:
 184B  B2 2C                 C		mov	dl,","
 184D  B4 02                 C		mov	ah,2
 184F  CD 21                 C		int	21H
 1851                        C	MiscL1:
 1851  AC                    C		lodsb
 1852  E8 178C R             C		call	Write		
 1855  E2 F4                 C		loop	MiscLoop
			     C	
 1857  B9 0014               C		mov	cx,20
 185A  8D 16 1660 R          C		lea	dx,Attr
 185E  E8 1779 R             C		call	String
 1861  EB 07 90              C		jmp	AttrL1
 1864                        C	AttrLoop:
 1864  B2 2C                 C		mov	dl,","
 1866  B4 02                 C		mov	ah,2
 1868  CD 21                 C		int	21H
 186A                        C	AttrL1:
 186A  AC                    C		lodsb
 186B  E8 178C R             C		call	Write
 186E  E2 F4                 C		loop	AttrLoop
			     C	
 1870  B9 0009               C		mov	cx,9
 1873  8D 16 166F R          C		lea	dx,Graph
 1877  E8 1779 R             C		call	String
 187A  EB 07 90              C		jmp	GraphL1
 187D                        C	GraphLoop:
 187D  B2 2C                 C		mov	dl,","
 187F  B4 02                 C		mov	ah,2
 1881  CD 21                 C		int	21H
 1883                        C	GraphL1:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-91


 1883  AC                    C		lodsb
 1884  E8 178C R             C		call	Write
 1887  E2 F4                 C		loop	GraphLoop
 1889  1F                    C		pop	ds
 188A                        C	DSkip:
 188A  C3                    C		ret
			     C	
 188B                        C	Display	EndP
			     C	
			     C	
			     C	;
			     C	;
			     C	;	ShowVideo
			     C	;
			     C	;		Check which Video card(s) is(ar
				e) present and
			     C	;		print Video information if DoOu
				tput is set
			     C	;
			     C	
 188B                        C	ShowVideo	Proc	Near
			     C	
 188B  51                    C		push	cx
 188C  56                    C		push	si
			     C	
 188D  E8 149D R             C		call	CheckVideo
			     C	
			     C	;	check for VGA
			     C	
			     C	
 1890  F6 06 0122 R 01       C		test	CardFound,VGAType
 1895  74 1C                 C		jz	SV_NotVGA
 1897  8D 16 16CF R          C		lea	dx,VGACard
 189B  E8 1779 R             C		call	String
			     C	
 189E  F6 06 0123 R 01       C		test	CardActive,VGAType
 18A3  74 07                 C		jz	SV_VGANotActive
 18A5  8D 16 1759 R          C		lea	dx,Active
 18A9  EB 05 90              C		jmp	SV_VGADisp
 18AC                        C	SV_VGANotActive:
 18AC  8D 16 1757 R          C		lea	dx,Inactive
 18B0                        C	SV_VGADisp:
 18B0  E8 1779 R             C		call	String
			     C	
 18B3                        C	SV_NotVGA:
			     C	
			     C	;	check for EGA
			     C	
 18B3  F6 06 0122 R 02       C		test	CardFound,EGAType
 18B8  74 07                 C		jz	SV_NotEGA
 18BA  8D 16 16DE R          C		lea	dx,EGACard
 18BE  E8 1779 R             C		call	String
			     C	
 18C1                        C	SV_NotEGA:
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-92


 18C1  F6 06 0122 R 03       C		test	CardFound,VGAType+EGAType
 18C6  74 5C                 C		jz	SV_EGANotPres
			     C	
			     C	;	ram size
			     C	
 18C8  32 E4                 C		xor	ah,ah
 18CA  A0 0124 R             C		mov	al,EGARamSize
 18CD  FE C0                 C		inc	al
 18CF  B1 06                 C		mov	cl,6
 18D1  D3 E0                 C		shl	ax,cl			; *64
 18D3  86 E0                 C		xchg	ah,al
 18D5  E8 178C R             C		call	Write
 18D8  86 E0                 C		xchg	ah,al
 18DA  E8 178C R             C		call	Write
 18DD  8D 16 1762 R          C		lea	dx,RamSize
 18E1  E8 1779 R             C		call	String
			     C	
 18E4  8D 16 1757 R          C		lea	dx,Inactive
 18E8  F6 06 0123 R 02       C		test	CardActive,EGAType
 18ED  74 04                 C		jz	SV_EGANotActive		; EGA n
				ot active
 18EF  8D 16 1759 R          C		lea	dx,Active
 18F3                        C	SV_EGANotActive:
 18F3  E8 1779 R             C		call	String
			     C		
 18F6  8D 16 169E R          C		lea	dx,Monitor
 18FA  E8 1779 R             C		call	String
 18FD  F6 06 0125 R 01       C		test	EGAColour,1
 1902  74 19                 C		jz	SV_EGAMono
 1904  8D 16 16AE R          C		lea	dx,ColoMon
 1908  E8 1779 R             C		call	String
 190B  8D 16 16CC R          C		lea	dx,NewLine
 190F  F6 06 0126 R 01       C		test	EGAEnhanced,1
 1914  74 0B                 C		jz	SV_EGANotEnhan
 1916                        C	SV_EGAEnhan:
 1916  8D 16 16C2 R          C		lea	dx,Enhance
 191A  EB 05 90              C		jmp	SV_EGANotEnhan
 191D                        C	SV_EGAMono:
 191D  8D 16 16B5 R          C		lea	dx,MonoMon
 1921                        C	SV_EGANotEnhan:
 1921  E8 1779 R             C		call	String
			     C	
 1924                        C	SV_EGANotPres:
			     C	
			     C	;	check for mono adaptor
			     C	
 1924  F6 06 0122 R 08       C		test	CardFound,MDAType
 1929  74 20                 C		jz	SV_TryCGA
 192B  8D 16 16FC R          C		lea	dx,MDACard
 192F  E8 1779 R             C		call	String
 1932  8D 16 1757 R          C		lea	dx,Inactive
 1936  F6 06 0123 R 08       C		test	CardActive,MDAType
 193B  74 04                 C		jz	SV_MDANotActive
 193D  8D 16 1759 R          C		lea	dx,Active
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-93


 1941                        C	SV_MDANotActive:
 1941  E8 1779 R             C		call	String
 1944  8D 16 16CC R          C		lea	dx,NewLine
 1948  E8 1779 R             C		call	String
			     C	
			     C	;	check for Colour adaptor
			     C	
 194B                        C	SV_TryCGA:
 194B  F6 06 0122 R 04       C		test	CardFound,CGAType
 1950  74 20                 C		jz	SV_TryHerc
 1952  8D 16 16ED R          C		lea	dx,CGACard
 1956  E8 1779 R             C		call	String
 1959  8D 16 1757 R          C		lea	dx,Inactive
 195D  F6 06 0123 R 04       C		test	CardActive,CGAType
 1962  74 04                 C		jz	SV_CGANotActive
 1964  8D 16 1759 R          C		lea	dx,Active
 1968                        C	SV_CGANotActive:
 1968  E8 1779 R             C		call	String
 196B  8D 16 16CC R          C		lea	dx,NewLine
 196F  E8 1779 R             C		call	String
			     C	
			     C	
			     C	;	see if a Hercules card is present
			     C	
 1972                        C	SV_TryHerc:
 1972  F6 06 0122 R 10       C		test	CardFound,HerType
 1977  74 27                 C		jz	SV_WhatMode
 1979  8D 16 171F R          C		lea	dx,HerWarn
 197D  E8 1779 R             C		call	String
 1980  8D 16 170B R          C		lea	dx,HerCard
 1984  E8 1779 R             C		call	String
 1987  8D 16 1757 R          C		lea	dx,Inactive
 198B  F6 06 0123 R 10       C		test	CardActive,HerType
 1990  74 04                 C		jz	SV_HerNotActive
 1992  8D 16 1759 R          C		lea	dx,Active
 1996                        C	SV_HerNotActive:
 1996  E8 1779 R             C		call	String
 1999  8D 16 16CC R          C		lea	dx,NewLine
 199D  E8 1779 R             C		call	String
			     C	
			     C	;	Video mode, index and initial register 
				values
			     C	
 19A0                        C	SV_WhatMode:
			     C	
 19A0  33 C0                 C		xor	ax,ax
 19A2  8E C0                 C		mov	es,ax
 19A4  26: A0 0449           C		mov	al,es:[449H]		; Video
				 Mode
 19A8  24 7F                 C		and	al,7fH			; remov
				e 'don't clear' bit
			     C	
 19AA  8D 16 15D9 R          C		lea	dx,VMode
 19AE  E8 1779 R             C		call	String
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-94


 19B1  E8 178C R             C		call	Write
 19B4  8D 16 16CC R          C		lea	dx,NewLine
 19B8  E8 1779 R             C		call	String
 19BB  E8 13EC R             C		call	WhatIndex		; VMode
				 in AX to Index in AX
 19BE  E8 17C0 R             C		call	Display			; displ
				ay register values
 19C1  8D 16 16CC R          C		lea	dx,NewLine
 19C5  E8 1779 R             C		call	String
			     C	
 19C8  5E                    C		pop	si
 19C9  59                    C		pop	cx
 19CA  C3                    C		ret
			     C	
 19CB                        C	ShowVideo	EndP
			     C	
			     C	
			     C	;--------------------------Local-Routine-------
				----------------------;
			     C	; free_service
			     C	;
			     C	; release the amiga mouse service
			     C	;
			     C	; Entry:
			     C	;	None
			     C	; Returns:
			     C	;	None
			     C	; Error Returns:
			     C	;	None
			     C	; Registers Preserved:
			     C	;	ES,SI,DI,DS,BP
			     C	; Registers Destroyed:
			     C	;	AX,BX,CX,DX,FLAGS
			     C	; Calls:
			     C	;	None
			     C	; History:
			     C	;	Fri 21-Aug-1987 11:43:42 
			     C	;	Initial version
			     C	;----------------------------------------------
				-------------------------;
			     C	
			     C	;------------------------------Pseudo-Code-----
				-------------------------;
			     C	; {
			     C	; }
			     C	;----------------------------------------------
				-------------------------;
			     C	
 19CB                        C	free_service	PROC	NEAR
			     C	
 19CB  A1 011E R             C		mov	ax,word ptr ms_sd_np
 19CE  0B C0                 C		or	ax,ax
 19D0  74 06                 C		jz	free_done
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-95


 19D2  8B F8                 C		mov	di,ax
 19D4  B4 0D                 C		mov	ah,JFUNC_RELEASESERVICE
 19D6  CD 0B                 C		int	JFUNC_JINT		;do the
				 int
			     C	
 19D8                        C	free_done:
 19D8  C3                    C		ret				;return
				 0 for success.
			     C	
 19D9                        C	free_service	ENDP
			     C	
			     C	
			     C	;--------------------------Local-Routine-------
				----------------------;
			     C	; get_service
			     C	;
			     C	; get the amiga service assuming real mode
			     C	;
			     C	; Entry:
			     C	;	None
			     C	; Returns:
			     C	;	None
			     C	; Error Returns:
			     C	;	None
			     C	; Registers Preserved:
			     C	;	ES,SI,DI,DS,BP
			     C	; Registers Destroyed:
			     C	;	AX,BX,CX,DX,FLAGS
			     C	; Calls:
			     C	;	None
			     C	; History:
			     C	;	Fri 21-Aug-1987 11:43:42 
			     C	;	Initial version
			     C	;----------------------------------------------
				-------------------------;
			     C	
			     C	;------------------------------Pseudo-Code-----
				-------------------------;
			     C	; {
			     C	; }
			     C	;----------------------------------------------
				-------------------------;
			     C	
 =                           C	ms_app_id	equ	MOUSESERV_APPLICATION_I
				D
 =                           C	ms_local_id	equ	MOUSESERV_LOCAL_ID
 = 0041                      C	ms_flags	equ	GETS_WAIT+GETS_ALOAD_A
			     C	
 19D9                        C	get_service	PROC	NEAR
			     C	
 19D9  1E                    C		push	ds
 19DA  B8 0000               C		mov	ax,(ms_app_id SHR 16) AND 0FFFF
				H	;app id high
 19DD  8E D8                 C		mov	ds,ax
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-96


 19DF  BE 0001               C		mov	si,ms_app_id AND 0FFFFH	;app id
				 low
 19E2  B9 0002               C		mov	cx,ms_local_id		;local 
				id
 19E5  33 C0                 C		xor	ax,ax			;handle
				r seg
 19E7  8E C0                 C		mov	es,ax
 19E9  8B F8                 C		mov	di,ax			;handle
				r offs
 19EB  B4 0B                 C		mov	ah,JFUNC_GETSERVICE	;get a 
				service
 19ED  B0 41                 C		mov	al,ms_flags		;flags
 19EF  CD 0B                 C		int	JFUNC_JINT
 19F1  1F                    C		pop	ds
 19F2  3C 00                 C		cmp	al,JSERV_OK
 19F4  75 23                 C		jnz	getr_failed		;(can't
				 happen if GETS_WAIT)
			     C	
			     C		;es:di = mouseserv ServiceData pointer
			     C	
			     C		;lock and unlock the servicedata struct
				ure (waits until fully initted)
 19F6  B4 0F                 C		mov	AH,JFUNC_LOCKSERVICEDATA
			     C	;	mov	DI,word ptr ms_sd_np
 19F8  CD 0B                 C		int	JFUNC_JINT
 19FA  B4 10                 C		mov	AH,JFUNC_UNLOCKSERVICEDATA
			     C	;	mov	DI,word ptr ms_sd_np
 19FC  CD 0B                 C		int	JFUNC_JINT
			     C	
 19FE  89 3E 011E R          C		mov	word ptr ms_sd_np,di	;save p
				tr to ServiceData struct
 1A02  8C 06 0120 R          C		mov	word ptr ms_sd_np+2,es
			     C		
 1A06  26: 8B 45 16          C		mov	ax,word ptr es:sd_PCMemPtr[di]
					;save ptr to MouseServReq struct
 1A0A  A3 011A R             C		mov	word ptr ms_rq_np,ax
 1A0D  26: 8B 45 18          C		mov	ax,word ptr es:sd_PCMemPtr+2[di
				]
 1A11  A3 011C R             C		mov	word ptr ms_rq_np+2,ax
			     C	
 1A14  33 C0                 C		xor	ax,ax			;return
				 0 for success
 1A16  EB 04 90              C		jmp	getr_done
			     C	
 1A19                        C	getr_failed:
 1A19  B8 0001               C		mov	ax,1			;return
				 1 for failure
			     C	
 1A1C                        C	getr_done:
 1A1C  C3                    C		ret				;return
				 0 for success.
			     C	
 1A1D                        C	get_service	ENDP
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-97


			     C	
			     C	;--------------------------Local-Routine-------
				----------------------;
			     C	; tickle_janus
			     C	;
			     C	; try to verify that INT 0BH is patched in to j
				anus stuff by trying
			     C	; to do a GetBase function.
			     C	;
			     C	; Entry:
			     C	;	None
			     C	; Returns:
			     C	;	None
			     C	; Error Returns:
			     C	;	None
			     C	; Registers Preserved:
			     C	;	ES,SI,DI,DS,BP
			     C	; Registers Destroyed:
			     C	;	AX,BX,CX,DX,FLAGS
			     C	; Calls:
			     C	;	None
			     C	; History:
			     C	;	Fri 21-Aug-1987 11:43:42 
			     C	;	Initial version
			     C	;----------------------------------------------
				-------------------------;
			     C	
			     C	;------------------------------Pseudo-Code-----
				-------------------------;
			     C	; {
			     C	; }
			     C	;----------------------------------------------
				-------------------------;
			     C	
 1A1D                        C	tickle_janus	PROC	NEAR
			     C	
 1A1D  B9 0003               C		mov	cx,3			;knock 
				three times.
			     C	
 1A20                        C	tickle_loop:
 1A20  51                    C		push	cx
			     C		
 1A21  B4 01                 C		mov	ah,JFUNC_GETBASE	;try to
				 get the base of pcdisk
 1A23  B0 0E                 C		mov	al,JSERV_AMIGASERVICE
 1A25  CD 0B                 C		int	JFUNC_JINT		;real m
				ode int 0b
			     C	
 1A27  59                    C		pop	cx
 1A28  E2 F6                 C		loop	tickle_loop
			     C	
 1A2A  3C 00                 C		cmp	al,JSERV_OK
 1A2C  74 05                 C		jz	tickle_ok
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-98


 1A2E  33 C0                 C		xor	ax,ax			;failed
				.
 1A30  EB 04 90              C		jmp	tickle_done
			     C	
 1A33                        C	tickle_ok:
 1A33  B8 0001               C		mov	ax,1			;succee
				ded.
			     C	
 1A36                        C	tickle_done:
 1A36  C3                    C		ret
			     C	
 1A37                        C	tickle_janus	ENDP
			     C	
			     C	
			     C	;**********************************************
				******************************
			     C	;*
			     C	;* GetParams
			     C	;*
			     C	;**********************************************
				******************************
			     C	
 1A37                        C	GPQuit:
 1A37  E9 1ABE R             C		jmp	NoParams
			     C	
 1A3A                        C	GetParams	PROC	NEAR
			     C	
 1A3A  8A 0E 0080 R          C		mov	cl,ParamSize
 1A3E  32 ED                 C		xor	ch,ch
 1A40  E3 F5                 C		jcxz	GPQuit
 1A42  8D 36 0081 R          C		lea	si,Params
 1A46                        C	PLoop:
 1A46  AC                    C		lodsb
			     C	;	cmp	al," "
			     C	;	je	PSkip
 1A47  3C 2D                 C		cmp	al,"-"			; start
				 of parameter
 1A49  75 12                 C		jne	PXSkip
 1A4B  49                    C		dec	cx
 1A4C  E3 E9                 C		jcxz	GPQuit
 1A4E  AC                    C		lodsb
 1A4F  3C 69                 C		cmp	al,"i"
 1A51  75 0D                 C		jne	NotInt
 1A53  A0 0104 R             C		mov	al,TimerIntNo
 1A56  86 06 0105 R          C		xchg	al,OtherIntNo
 1A5A  A2 0104 R             C		mov	TimerIntNo,al
 1A5D                        C	PXSkip:
 1A5D  EB 5D 90              C		jmp	PSkip
 1A60                        C	NotInt:
 1A60  C6 06 02DD R 00       C		mov	Hercules,0
 1A65  3C 68                 C		cmp	al,"h"			; hercu
				les
 1A67  75 0E                 C		jne	NotHercules
 1A69  AC                    C		lodsb
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-99


 1A6A  24 03                 C		and	al,3			; page 
				number 1 or 2
 1A6C  A2 02DD R             C		mov	Hercules,al
 1A6F  C6 06 01E0 R 03       C		mov	Bank,3			; 4 ban
				ks
 1A74  EB 46 90              C		jmp	PSkip
 1A77                        C	NotHercules:
 1A77  3C 74                 C		cmp	al,"t"
 1A79  75 11                 C		jne	NotTrace
 1A7B  C6 06 1778 R 01       C		mov	DoOutput,1		; print
				 video params at start
 1A80  49                    C		dec	cx	
 1A81  E3 39                 C		jcxz	PSkip			; no mo
				re parameters
 1A83  AC                    C		lodsb
 1A84  24 0F                 C		and	al,0fH
 1A86  A2 0103 R             C		mov	DoTrace,al
 1A89  EB 31 90              C		jmp	PSkip
 1A8C                        C	NotTrace:
 1A8C  3C 63                 C		cmp	al,"c"
 1A8E  75 2E                 C		jne	NoParams
 1A90  49                    C		dec	cx
 1A91  E3 2B                 C		jcxz	NoParams
 1A93  33 DB                 C		xor	bx,bx
 1A95  8D 3E 0C14 R          C		lea	di,Customise
 1A99  1E                    C		push	ds
 1A9A  07                    C		pop	es
 1A9B  AC                    C		lodsb
 1A9C  B4 20                 C		mov	ah," "			; defau
				lt terminator
 1A9E  3C 22                 C		cmp	al,22H			; <">
 1AA0  75 0E                 C		jne	SpaceTerminates
 1AA2  B4 22                 C		mov	ah,22H			; quote
				d string
 1AA4  49                    C		dec	cx
 1AA5  E3 17                 C		jcxz	NoParams
 1AA7                        C	CLoop:
 1AA7  AC                    C		lodsb				; read 
				a character
 1AA8  3A C4                 C		cmp	al,ah
 1AAA  74 10                 C		je	PSKip
 1AAC  3C 0D                 C		cmp	al,0DH
 1AAE  74 0C                 C		je	PSKip
 1AB0                        C	SpaceTerminates:
 1AB0  83 FB 28              C		cmp	bx,40
 1AB3  74 02                 C		je	MSkip			; too l
				ong
 1AB5  AA                    C		stosb				; store
				 a character
 1AB6  43                    C		inc	bx
 1AB7                        C	MSkip:
 1AB7  E2 EE                 C		loop	CLoop
 1AB9  EB 03 90              C		jmp	NoParams		; reach
				ed end of parameters
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-100


			     C	
 1ABC                        C	PSkip:
 1ABC  E2 01                 C		loop	PXLoop
 1ABE                        C	NoParams:
 1ABE  C3                    C		ret
			     C	
 1ABF                        C	PXLoop:					; neede
				d because of relative jump limit
 1ABF  EB 85                 C		jmp	PLoop
			     C	
 1AC1                        C	GetParams	ENDP
			     C	
 1AC1  01                    C	WaitForAmiga	db	1		; repor
				t error if amiga AMouse not active
 1AC2  00                    C	ToldUser	db	0		; alrea
				dy output the waiting msg
 1AC3  0000                  C	KeyOffset	dw	0
 1AC5  0000                  C	KeySegment	dw	0
			     C	
 1AC7  41 6D 69 67 61 20     C	NoSMsg	db	"Amiga could not load MouseServ
				 - AMOUSE not installed.",0DH,0AH,"$"
       63 6F 75 6C 64 20     C	
       6E 6F 74 20 6C 6F     C	
       61 64 20 4D 6F 75     C	
       73 65 53 65 72 76     C	
       20 2D 20 41 4D 4F     C	
       55 53 45 20 6E 6F     C	
       74 20 69 6E 73 74     C	
       61 6C 6C 65 64 2E     C	
       0D 0A 24              C	
 1B00  41 4D 6F 75 73 65     C	VersNo	db	"AMouse version 1.7"
       20 76 65 72 73 69     C	
       6F 6E 20 31 2E 37     C	
			     C	;	include	Date.inc
 1B12  20 69 6E 73 74 61     C		db	" installed",0DH,0AH,"$"
       6C 6C 65 64 0D 0A     C	
       24                    C	
 1B1F  50 61 72 61 6D 65     C	Passed	db	"Parameters passed to previousl
				y installed driver",0DH,0AH,"$"
       74 65 72 73 20 70     C	
       61 73 73 65 64 20     C	
       74 6F 20 70 72 65     C	
       76 69 6F 75 73 6C     C	
       79 20 69 6E 73 74     C	
       61 6C 6C 65 64 20     C	
       64 72 69 76 65 72     C	
       0D 0A 24              C	
 1B52  41 20 6D 6F 75 73     C	Already	db	"A mouse driver is already inst
				alled",0DH,0AH,"$"
       65 20 64 72 69 76     C	
       65 72 20 69 73 20     C	
       61 6C 72 65 61 64     C	
       79 20 69 6E 73 74     C	
       61 6C 6C 65 64 0D     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-101


       0A 24                 C	
			     C	;Waiting	db	"Waiting for AMouse on 
				Amiga",0dh,0ah
			     C	;	db	"Press a key to abandon",0dh,0a
				h,"$"
			     C	
			     C	;	this routine replaces the keyboard inte
				rrupt routine
			     C	;	while initialising. It sets WaitForAmig
				a false when a key is pressed
			     C	
			     C	; KeyInt:
			     C	; 	mov	cs:WaitForAmiga,0	; stop 
				on any key
			     C	;	iret
			     C	
			     C	;	service not available on Amiga. Decide 
				what to do next
			     C	
 1B78                        C	NoService:
			     C	
			     C	;	mov	dl,255			; no ou
				tput
			     C	;	mov	ah,6			; keybo
				ard/display i/o
			     C	;	int	21H
			     C	;	jnz	NoServMsg		; ZF=0 
				=> got input
			     C	;
			     C	;	test	ToldUser,-1
			     C	;	jnz	UserTold
			     C	;	mov	ToldUser,1
			     C	;	mov	ah,9
			     C	;	mov	dx,offset Waiting
			     C	;	int	21H
			     C	;UserTold:
			     C	;	jmp	TryJanus		; keep 
				on trying
			     C	
			     C	;	give up on amiga
			     C	
 1B78                        C	NoServMsg:
			     C	
 1B78  B4 09                 C		mov	ah,9
 1B7A  BA 1AC7 R             C		mov	dx,offset NoSMsg
 1B7D  CD 21                 C		int	21H
 1B7F  B8 4C02               C		mov	ax,4C02H
 1B82  CD 21                 C		int	21H			; termi
				nate with return code
			     C	
			     C	
			     C	;	already got a mouse driver. Whose is it
				 ?
			     C	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-102


 1B84                        C	AlreadyIn:
 1B84  B9 0028               C		mov	cx,40			; CopyR
				ight length
 1B87  8D 3E 0BD5 R          C		lea	di,CopyRight
 1B8B  8B F7                 C		mov	si,di
 1B8D  F3/ A6                C		rep cmpsb
 1B8F  E3 0C                 C		jcxz	ItsMine
			     C	
			     C	;	a different mouse driver - exit
			     C	
 1B91  B4 09                 C		mov	ah,9
 1B93  BA 1B52 R             C		mov	dx,offset Already
 1B96  CD 21                 C		int	21H
 1B98  B8 4C03               C		mov	ax,4C03H
 1B9B  CD 21                 C		int	21H			; termi
				nate with return code
			     C	
			     C	;	AMouse already resident. Pass on the pa
				rameters
			     C	
 1B9D                        C	ItsMine:
 1B9D  8D 3E 0C14 R          C		lea	di,Customise
 1BA1  8B F7                 C		mov	si,di
 1BA3  B9 0028               C		mov	cx,40
 1BA6  F3/ A4                C		rep movsb
 1BA8  A0 0104 R             C		mov	al,TimerIntNo
 1BAB  06                    C		push	es
 1BAC  1F                    C		pop	ds
 1BAD  3A 06 0104 R          C		cmp	al,TimerIntNo
 1BB1  74 16                 C		je	SameInts		; inter
				rupts as previously
 1BB3  FB                    C		sti
 1BB4  A2 0104 R             C		mov	TimerIntNo,al
 1BB7  2E: A0 0105 R         C		mov	al,cs:OtherIntNo
 1BBB  A2 0105 R             C		mov	OtherIntNo,al
 1BBE  A1 0106 R             C		mov	ax,TimerProc
 1BC1  87 06 0108 R          C		xchg	ax,OtherProc
 1BC5  A3 0106 R             C		mov	TimerProc,ax
 1BC8  FA                    C		cli
 1BC9                        C	SameInts:
 1BC9  2E: A0 02DD R         C		mov	al,cs:Hercules
 1BCD  A2 02DD R             C		mov	Hercules,al
 1BD0  2E: A0 0103 R         C		mov	al,cs:DoTrace
 1BD4  A2 0103 R             C		mov	DoTrace,al
 1BD7  2E: A0 01E0 R         C		mov	al,cs:Bank
 1BDB  A2 01E0 R             C		mov	Bank,al
 1BDE  8C C8                 C		mov	ax,cs
 1BE0  8E D8                 C		mov	ds,ax
 1BE2  B4 09                 C		mov	ah,9
 1BE4  BA 1B1F R             C		mov	dx,offset Passed
 1BE7  CD 21                 C		int	21H
 1BE9  B8 4C00               C		mov	ax,4C00H
 1BEC  CD 21                 C		int	21H			; termi
				nate with return code
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-103


			     C		
			     C		
			     C	
 1BEE                        C	main:
 1BEE  0E                    C		push	cs
 1BEF  1F                    C		pop	ds
			     C	
 1BF0  E8 1A3A R             C		call	GetParams
 1BF3  E8 188B R             C		call	ShowVideo		; displ
				ays Video info, if req.
			     C	
 1BF6  A1 02DB R             C		mov	ax,DataSize
 1BF9  A3 02EA R             C		mov	SaveSize,ax
			     C	
 1BFC                        C	TryJanus:
 1BFC  E8 1A1D R             C		call	tickle_janus
 1BFF  0B C0                 C		or	ax,ax
 1C01  75 03                 C		jnz	GotService
 1C03  E9 1B78 R             C		jmp	NoService
			     C	
 1C06                        C	GotService:
			     C	
			     C	;	it's not enough to call GetBase three t
				imes and check the result of
			     C	;	the last one. It's possible that only t
				he last one was successful
			     C	;	in the case where AMouse on the Amiga s
				ide is called during the loop.
			     C	;	So I've set the loop to 1 and as soon a
				s a call is successful it will
			     C	;	drop through to here.
			     C	
 1C06  E8 19D9 R             C		call	get_service
 1C09  0B C0                 C		or	ax,ax
 1C0B  74 03                 C		jz	ReallyGotService
 1C0D  E9 1B78 R             C		jmp	NoService
			     C	
 1C10                        C	ReallyGotService:
 1C10  B8 3533               C		mov	ax,3533H		
 1C13  CD 21                 C		int	21H			; read 
				current interrupt 51 handler
 1C15  8C C0                 C		mov	ax, es			; Check
				 segment and
 1C17  0B C3                 C		or	ax, bx			; offse
				t of int 33
 1C19  74 0A                 C		jz	NotIn			; vecto
				r.  If 0 or pointing to
 1C1B  26: 8A 07             C		mov	al, es:[bx]		; an IR
				ET driver not installed
 1C1E  3C CF                 C		cmp	al, 0cfh
 1C20  74 03                 C		je	NotIn			; not a
				lready installed
 1C22  E9 1B84 R             C		jmp	AlreadyIn		; alrea
				dy installed
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-104


 1C25                        C	NotIn:
 1C25  8C 06 010C R          C		mov	OldSegment,es		; save
 1C29  89 1E 010A R          C		mov	OldOffset,bx
 1C2D  BA 0C3C R             C		mov	dx,OFFSET MouseDriver
 1C30  0E                    C		push	cs
 1C31  1F                    C		pop	ds
 1C32  B8 2533               C		mov	ax,2533H		; set n
				ew interrupt 51 handler
 1C35  CD 21                 C		int	21H
			     C	
 1C37  B4 35                 C		mov	ah,35H
 1C39  A0 0104 R             C		mov	al,TimerIntNo
 1C3C  CD 21                 C		int	21H			; read 
				current Timer interrupt handler
 1C3E  8C 06 0110 R          C		mov	TimerSegment,es		; save
 1C42  89 1E 010E R          C		mov	TimerOffset,bx
 1C46  BA 0379 R             C		mov	dx,OFFSET Timer
 1C49  0E                    C		push	cs
 1C4A  1F                    C		pop	ds
 1C4B  B4 25                 C		mov	ah,25H			; set n
				ew Timer interrupt handler
 1C4D  A0 0104 R             C		mov	al,TimerIntNo
 1C50  CD 21                 C		int	21H
			     C	
			     C	
 1C52  B4 35                 C		mov	ah,35H
 1C54  A0 0105 R             C		mov	al,OtherIntNo
 1C57  CD 21                 C		int	21H			; read 
				current Other interrupt handler
 1C59  8C 06 0114 R          C		mov	OtherSegment,es		; save
 1C5D  89 1E 0112 R          C		mov	OtherOffset,bx
 1C61  BA 0385 R             C		mov	dx,OFFSET Other
 1C64  0E                    C		push	cs
 1C65  1F                    C		pop	ds
 1C66  B4 25                 C		mov	ah,25H			; set n
				ew Other interrupt handler
 1C68  A0 0105 R             C		mov	al,OtherIntNo
 1C6B  CD 21                 C		int	21H
			     C	
			     C	
 1C6D  B8 3510               C		mov	ax,3510H		
 1C70  CD 21                 C		int	21H			; read 
				current interrupt 10H handler
 1C72  8C 06 0118 R          C		mov	VideoSegment,es		; save
 1C76  89 1E 0116 R          C		mov	VideoOffset,bx
 1C7A  BA 0472 R             C		mov	dx,OFFSET Video
 1C7D  0E                    C		push	cs
 1C7E  1F                    C		pop	ds
 1C7F  B8 2510               C		mov	ax,2510H		; set n
				ew interrupt 10H handler
 1C82  CD 21                 C		int	21H
			     C	
 1C84  C4 3E 011A R          C		les	di,dword ptr ms_rq_np
 1C88  B9 0007               C		mov	cx,DPSize
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Page     1-105


 1C8B  33 C0                 C		xor	ax,ax
 1C8D  F3/ AB                C		rep stosw			; zeroi
				se Dual Port Ram variables.
			     C	
 1C8F  8E C0                 C		mov	es,ax			; segem
				ent zero
 1C91  26: A0 0449           C		mov	al,es:[449H]
 1C95  24 7F                 C		and	al,7fH			; remov
				e 'don't clear' bit
 1C97  A2 02FC R             C		mov	ScreenMode,al
 1C9A  E8 0391 R             C		call	SetVideoPars		; also 
				tells Amiga what video mode
 1C9D  B4 09                 C		mov	ah,9
 1C9F  BA 1B00 R             C		mov	dx,offset VersNo
 1CA2  CD 21                 C		int	21H
 1CA4  B8 3100               C		mov	ax,3100H
 1CA7  8D 16 16E8 R          C		lea	dx,EndOfResident+10FH	; round
				 up + program header
 1CAB  B1 04                 C		mov	cl,4
 1CAD  D3 FA                 C		sar	dx,cl
 1CAF  CD 21                 C		int	21H			; termi
				nate but stay resident
			     C	
				
 1CB1				cseg	ENDS
				END	Start
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-1


Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ELTAB  . . . . . . . . . . . . .  	0008	0005
  EGA_PORT . . . . . . . . . . .  	0000
  EGA_VALUES . . . . . . . . . .  	0002
  EGA_DEFS . . . . . . . . . . .  	0004
  EGA_COUNT  . . . . . . . . . .  	0006
  EGA_STATUS . . . . . . . . . .  	0007
JANUSAMIGA . . . . . . . . . . .  	0046	001F
  JA_LOCK  . . . . . . . . . . .  	0000
  JA_8088GO  . . . . . . . . . .  	0001
  JPM_LOCK . . . . . . . . . . .  	0002
  JPM_PAD0 . . . . . . . . . . .  	0003
  JPM_68000BASE  . . . . . . . .  	0004
  JPM_8088SEGMENT  . . . . . . .  	0008
  JPM_FIRST  . . . . . . . . . .  	000A
  JPM_MAX  . . . . . . . . . . .  	000C
  JPM_FREE . . . . . . . . . . .  	000E
  JBM_LOCK . . . . . . . . . . .  	0010
  JBM_PAD0 . . . . . . . . . . .  	0011
  JBM_68000BASE  . . . . . . . .  	0012
  JBM_8088SEGMENT  . . . . . . .  	0016
  JBM_FIRST  . . . . . . . . . .  	0018
  JBM_MAX  . . . . . . . . . . .  	001A
  JBM_FREE . . . . . . . . . . .  	001C
  JA_INTERRUPTS  . . . . . . . .  	001E
  JA_PARAMETERS  . . . . . . . .  	0020
  JA_NUMINTERRUPTS . . . . . . .  	0022
  JA_AMIGASTATE  . . . . . . . .  	0024
  JA_PCSTATE . . . . . . . . . .  	0026
  JA_JLIBREV . . . . . . . . . .  	0028
  JA_JLIBVER . . . . . . . . . .  	002A
  JA_JHANDLERREV . . . . . . . .  	002C
  JA_JHANDLERVER . . . . . . . .  	002E
  JA_HANDLERLOADED . . . . . . .  	0030
  JA_PCFLAG  . . . . . . . . . .  	0032
  JA_AMIGAFLAG . . . . . . . . .  	0033
  JA_TURN  . . . . . . . . . . .  	0034
  JA_PAD . . . . . . . . . . . .  	0035
  JA_RESERVED  . . . . . . . . .  	0036
MOUSESERVREQ . . . . . . . . . .  	0010	0009
  AMIGAPCX . . . . . . . . . . .  	0000
  AMIGAPCY . . . . . . . . . . .  	0002
  AMIGAPCLEFTP . . . . . . . . .  	0004
  AMIGAPCRIGHTP  . . . . . . . .  	0006
  AMIGAPCLEFTR . . . . . . . . .  	0008
  AMIGAPCRIGHTR  . . . . . . . .  	000A
  AMIGAPCSTATUS  . . . . . . . .  	000C
  WRITELOCK  . . . . . . . . . .  	000E
  CHANGECOUNT  . . . . . . . . .  	000F
SERVICECUSTOMER  . . . . . . . .  	001E	0005
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-2


  SCS_NEXTCUSTOMER . . . . . . .  	0000
  SCS_FLAGS  . . . . . . . . . .  	0004
  SCS_TASK . . . . . . . . . . .  	0006
  SCS_SIGNALBIT  . . . . . . . .  	000A
  SCS_JAZZRESERVED . . . . . . .  	000E
SERVICEDATA  . . . . . . . . . .  	003A	0012
  SD_APPLICATIONID . . . . . . .  	0000
  SD_LOCALID . . . . . . . . . .  	0004
  SD_FLAGS . . . . . . . . . . .  	0006
  SD_SERVICEDATALOCK . . . . . .  	0008
  SD_AMIGAUSERCOUNT  . . . . . .  	0009
  SD_PCUSERCOUNT . . . . . . . .  	000A
  SD_RESERVEDBYTE  . . . . . . .  	000B
  SD_MEMSIZE . . . . . . . . . .  	000C
  SD_MEMTYPE . . . . . . . . . .  	000E
  SD_MEMOFFSET . . . . . . . . .  	0010
  SD_AMIGAMEMPTR . . . . . . . .  	0012
  SD_PCMEMPTR  . . . . . . . . .  	0016
  SD_JREMEMBERKEY  . . . . . . .  	001A
  SD_NEXTSERVICEDATA . . . . . .  	001C
  SD_FIRSTPCCUSTOMER . . . . . .  	001E
  SD_FIRSTAMIGACUSTOMER  . . . .  	0022
  SD_SEMAPHORE . . . . . . . . .  	0026
  SD_ZAPHODRESERVED  . . . . . .  	002A

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CSEG . . . . . . . . . . . . . .  	1CB1	BYTE	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

ACTIVE . . . . . . . . . . . . .  	L BYTE	1759	CSEG
ADDS_EXCLUSIVE . . . . . . . . .  	NUMBER	0001	
ADDS_EXCLUSIVEN  . . . . . . . .  	NUMBER	0000	
ADDS_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0010	
ADDS_FROMAMIGA_ONLYN . . . . . .  	NUMBER	0004	
ADDS_FROMPC_ONLY . . . . . . . .  	NUMBER	0004	
ADDS_FROMPC_ONLYN  . . . . . . .  	NUMBER	0002	
ADDS_LOCKDATA  . . . . . . . . .  	NUMBER	0020	
ADDS_LOCKDATAN . . . . . . . . .  	NUMBER	0005	
ADDS_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0008	
ADDS_TOAMIGA_ONLYN . . . . . . .  	NUMBER	0003	
ADDS_TOPC_ONLY . . . . . . . . .  	NUMBER	0002	
ADDS_TOPC_ONLYN  . . . . . . . .  	NUMBER	0001	
ALREADY  . . . . . . . . . . . .  	L BYTE	1B52	CSEG
ALREADYIN  . . . . . . . . . . .  	L NEAR	1B84	CSEG
AMIGASTATE_RESERVED  . . . . . .  	NUMBER	FFF8	
AMIGA_EXCLUSIVE  . . . . . . . .  	NUMBER	0010	
AMIGA_EXCLUSIVEN . . . . . . . .  	NUMBER	0004	
AMIGA_NUMLOCK_RESET  . . . . . .  	NUMBER	0002	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-3


AMIGA_NUMLOCK_RESETN . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SET  . . . . . . .  	NUMBER	0001	
AMIGA_NUMLOCK_SETN . . . . . . .  	NUMBER	0000	
AMIGA_PC_READY . . . . . . . . .  	NUMBER	0004	
AMIGA_PC_READYN  . . . . . . . .  	NUMBER	0002	
ATTR . . . . . . . . . . . . . .  	L BYTE	1660	CSEG
ATTRDEFS . . . . . . . . . . . .  	L BYTE	10DB	CSEG	Length = 0014
ATTRID . . . . . . . . . . . . .  	NUMBER	0018	
ATTRL1 . . . . . . . . . . . . .  	L NEAR	186A	CSEG
ATTRLOOP . . . . . . . . . . . .  	L NEAR	1864	CSEG
ATTRREGS . . . . . . . . . . . .  	L WORD	108B	CSEG

BANK . . . . . . . . . . . . . .  	L BYTE	01E0	CSEG
BASICMOUSE . . . . . . . . . . .  	F PROC	0C3F	CSEG	Length = 007C
BITCHANGED . . . . . . . . . . .  	NUMBER	0080	
BITPROHIBIT  . . . . . . . . . .  	NUMBER	8000	
BITSINGLE  . . . . . . . . . . .  	NUMBER	0040	
BOTTOMY  . . . . . . . . . . . .  	L WORD	01F9	CSEG
BUFFER . . . . . . . . . . . . .  	L BYTE	167E	CSEG	Length = 0010
BUTTONANDPOS . . . . . . . . . .  	L NEAR	0DFB	CSEG
BUTTONS  . . . . . . . . . . . .  	L WORD	01FB	CSEG	Length = 0010
BUTTONSTATUS . . . . . . . . . .  	L WORD	01D8	CSEG
BYTESTOGO  . . . . . . . . . . .  	L WORD	0649	CSEG

CALL_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0800	
CALL_FROMAMIGA_ONLYN . . . . . .  	NUMBER	000B	
CALL_FROMPC_ONLY . . . . . . . .  	NUMBER	0200	
CALL_FROMPC_ONLYN  . . . . . . .  	NUMBER	0009	
CALL_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0400	
CALL_TOAMIGA_ONLYN . . . . . . .  	NUMBER	000A	
CALL_TOPC_ONLY . . . . . . . . .  	NUMBER	0100	
CALL_TOPC_ONLYN  . . . . . . . .  	NUMBER	0008	
CARDACTIVE . . . . . . . . . . .  	L BYTE	0123	CSEG
CARDFOUND  . . . . . . . . . . .  	L BYTE	0122	CSEG
CDLOOP . . . . . . . . . . . . .  	L NEAR	13E4	CSEG
CGACARD  . . . . . . . . . . . .  	L BYTE	16ED	CSEG
CGATYPE  . . . . . . . . . . . .  	NUMBER	0004	
CHANGED  . . . . . . . . . . . .  	L NEAR	0A77	CSEG
CHECK2 . . . . . . . . . . . . .  	L NEAR	0CD4	CSEG
CHECK64K . . . . . . . . . . . .  	L NEAR	1404	CSEG
CHECK9 . . . . . . . . . . . . .  	L NEAR	0C94	CSEG
CHECKVIDEO . . . . . . . . . . .  	N PROC	149D	CSEG	Length = 013C
CLOOP  . . . . . . . . . . . . .  	L NEAR	1AA7	CSEG
COLOMON  . . . . . . . . . . . .  	L BYTE	16AE	CSEG
COLUMNS  . . . . . . . . . . . .  	L BYTE	15F7	CSEG
CONDFLAG . . . . . . . . . . . .  	L BYTE	01F2	CSEG
CONDOFF  . . . . . . . . . . . .  	L NEAR	0F62	CSEG
CONDOFFEXIT  . . . . . . . . . .  	L NEAR	057E	CSEG
COPYDEFAULTS . . . . . . . . . .  	N PROC	13E4	CSEG	Length = 0008
COPYRIGHT  . . . . . . . . . . .  	L NEAR	0BD5	CSEG
CRMSG  . . . . . . . . . . . . .  	L WORD	02E0	CSEG
CRTC . . . . . . . . . . . . . .  	L BYTE	1651	CSEG
CRTDEFS  . . . . . . . . . . . .  	L BYTE	10B5	CSEG	Length = 0019
CRTID  . . . . . . . . . . . . .  	NUMBER	0000	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-4


CRTPAGENUMBER  . . . . . . . . .  	L WORD	01D4	CSEG
CRTREGS  . . . . . . . . . . . .  	L WORD	1037	CSEG
CSVALID  . . . . . . . . . . . .  	L BYTE	0170	CSEG
CURSORFLAG . . . . . . . . . . .  	L WORD	0167	CSEG
CURSORHEIGHT . . . . . . . . . .  	NUMBER	0010	
CURSORSAVE . . . . . . . . . . .  	L WORD	0169	CSEG
CURSORWIDTH  . . . . . . . . . .  	NUMBER	0010	
CURSORX  . . . . . . . . . . . .  	L BYTE	016E	CSEG
CURSORY  . . . . . . . . . . . .  	L BYTE	016F	CSEG
CUSTOMISE  . . . . . . . . . . .  	L NEAR	0C14	CSEG

DATASIZE . . . . . . . . . . . .  	L WORD	02DB	CSEG
DATASTART  . . . . . . . . . . .  	NEAR	0167	CSEG
DCONT  . . . . . . . . . . . . .  	L NEAR	17CA	CSEG
DDMOVE . . . . . . . . . . . . .  	L NEAR	137B	CSEG
DDSINGLE . . . . . . . . . . . .  	L NEAR	1380	CSEG
DEFAULTMOUSE . . . . . . . . . .  	L WORD	0127	CSEG
DEFINEDEFAULT  . . . . . . . . .  	L NEAR	135D	CSEG
DISPLAY  . . . . . . . . . . . .  	N PROC	17C0	CSEG	Length = 00CB
DOCGACURSOR  . . . . . . . . . .  	N PROC	05E3	CSEG	Length = 0066
DOCONDOFF  . . . . . . . . . . .  	N PROC	0542	CSEG	Length = 003E
DOEGACURSOR  . . . . . . . . . .  	N PROC	064F	CSEG	Length = 010C
DOHCEXIT . . . . . . . . . . . .  	L NEAR	05A9	CSEG
DOHIDECURSOR . . . . . . . . . .  	N PROC	0580	CSEG	Length = 002E
DOMOVE . . . . . . . . . . . . .  	L BYTE	01F1	CSEG
DOOUTPUT . . . . . . . . . . . .  	L BYTE	1778	CSEG
DOTRACE  . . . . . . . . . . . .  	L BYTE	0103	CSEG
DPCOPYAREA . . . . . . . . . . .  	L WORD	02EE	CSEG	Length = 0007
DPSIZE . . . . . . . . . . . . .  	NUMBER	0007	
DSKIP  . . . . . . . . . . . . .  	L NEAR	188A	CSEG

EGA  . . . . . . . . . . . . . .  	L BYTE	01DE	CSEG
EGA350 . . . . . . . . . . . . .  	L BYTE	01DF	CSEG
EGACARD  . . . . . . . . . . . .  	L BYTE	16DE	CSEG
EGACOLOUR  . . . . . . . . . . .  	L BYTE	0125	CSEG
EGADATA  . . . . . . . . . . . .  	L NEAR	1037	CSEG
EGADATASIZE  . . . . . . . . . .  	L WORD	112F	CSEG
EGAENHAN . . . . . . . . . . . .  	L NEAR	1535	CSEG
EGAENHANCED  . . . . . . . . . .  	L BYTE	0126	CSEG
EGAEXIT  . . . . . . . . . . . .  	L NEAR	13B2	CSEG
EGAGRAPHSAVE . . . . . . . . . .  	L BYTE	1131	CSEG	Length = 0009
EGAGRAPHWANT . . . . . . . . . .  	L BYTE	113B	CSEG
EGANOTACTIVE . . . . . . . . . .  	L NEAR	1524	CSEG
EGANOTCOL  . . . . . . . . . . .  	L NEAR	1508	CSEG
EGANOTPRES . . . . . . . . . . .  	L NEAR	153D	CSEG
EGAPRESENT . . . . . . . . . . .  	L NEAR	14E7	CSEG
EGAPROC  . . . . . . . . . . . .  	N PROC	11D5	CSEG	Length = 01EF
EGARAMSIZE . . . . . . . . . . .  	L BYTE	0124	CSEG
EGAREGS  . . . . . . . . . . . .  	L NEAR	10EF	CSEG
EGASEQSAVE . . . . . . . . . . .  	L BYTE	113A	CSEG
EGATABLE . . . . . . . . . . . .  	L NEAR	13C4	CSEG
EGATYPE  . . . . . . . . . . . .  	NUMBER	0002	
EGAVERSION . . . . . . . . . . .  	L BYTE	1388	CSEG
EGA_ATTR . . . . . . . . . . . .  	L QWORD	1107	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-5


EGA_CRTC . . . . . . . . . . . .  	L QWORD	10EF	CSEG
EGA_FEAT . . . . . . . . . . . .  	L QWORD	1117	CSEG
EGA_GCNOBYTE0  . . . . . . . . .  	L NEAR	06BE	CSEG
EGA_GCNOBYTE1  . . . . . . . . .  	L NEAR	0708	CSEG
EGA_GCNOBYTE2  . . . . . . . . .  	L NEAR	0745	CSEG
EGA_GR1  . . . . . . . . . . . .  	L QWORD	111F	CSEG
EGA_GR2  . . . . . . . . . . . .  	L QWORD	1127	CSEG
EGA_GRAPH  . . . . . . . . . . .  	L QWORD	10FF	CSEG
EGA_LOOP . . . . . . . . . . . .  	L NEAR	0758	CSEG
EGA_MISC . . . . . . . . . . . .  	L QWORD	110F	CSEG
EGA_NEXTLINE . . . . . . . . . .  	L NEAR	0667	CSEG
EGA_ROWLOOPEND . . . . . . . . .  	L NEAR	0745	CSEG
EGA_ROWLOOPSTART . . . . . . . .  	L NEAR	0672	CSEG
EGA_SEQ  . . . . . . . . . . . .  	L QWORD	10F7	CSEG
EGA_STEPPINGSTONE  . . . . . . .  	L NEAR	070D	CSEG
ENDOFRESIDENT  . . . . . . . . .  	L NEAR	15D9	CSEG
ENHANCE  . . . . . . . . . . . .  	L BYTE	16C2	CSEG
EPNODX . . . . . . . . . . . . .  	L NEAR	120E	CSEG
EPUSEDX  . . . . . . . . . . . .  	L NEAR	1202	CSEG
ETRACE . . . . . . . . . . . . .  	N PROC	04CD	CSEG	Length = 0010
EVENLINE . . . . . . . . . . . .  	L NEAR	07A9	CSEG
EVENOFFSET . . . . . . . . . . .  	L WORD	01DC	CSEG
EXIT . . . . . . . . . . . . . .  	L NEAR	0FEC	CSEG
EXIT1  . . . . . . . . . . . . .  	L NEAR	0E50	CSEG
EXIT2  . . . . . . . . . . . . .  	L NEAR	0DAA	CSEG
EXITNOW  . . . . . . . . . . . .  	L NEAR	15D6	CSEG
EXPUNGE_SERVICE  . . . . . . . .  	NUMBER	0002	
EXPUNGE_SERVICEN . . . . . . . .  	NUMBER	0001	

FAILCHECK  . . . . . . . . . . .  	L NEAR	0CD1	CSEG
FEATUREID  . . . . . . . . . . .  	NUMBER	0028	
FREE_DONE  . . . . . . . . . . .  	L NEAR	19D8	CSEG
FREE_SERVICE . . . . . . . . . .  	N PROC	19CB	CSEG	Length = 000E

GCHBANK01  . . . . . . . . . . .  	L NEAR	07C6	CSEG
GCINRANGE  . . . . . . . . . . .  	L NEAR	079D	CSEG
GCMOVE . . . . . . . . . . . . .  	L NEAR	0827	CSEG
GCNOBYTE0  . . . . . . . . . . .  	L NEAR	060C	CSEG
GCNOBYTE1  . . . . . . . . . . .  	L NEAR	062A	CSEG
GCNOBYTE2  . . . . . . . . . . .  	L NEAR	063B	CSEG
GCNODIV  . . . . . . . . . . . .  	L NEAR	07C8	CSEG
GCNOMOVE . . . . . . . . . . . .  	L NEAR	084C	CSEG
GCNOTEGA . . . . . . . . . . . .  	L NEAR	0842	CSEG
GCNOTHERC  . . . . . . . . . . .  	L NEAR	07E5	CSEG
GCOUTOFRANGE . . . . . . . . . .  	L NEAR	080B	CSEG
GCQUIT . . . . . . . . . . . . .  	L NEAR	079A	CSEG
GCRESETUSER  . . . . . . . . . .  	L NEAR	0845	CSEG
GETBPRESSINFO  . . . . . . . . .  	L NEAR	0E2D	CSEG
GETBRELINFO  . . . . . . . . . .  	L NEAR	0E53	CSEG
GETBUTTONS . . . . . . . . . . .  	L NEAR	0B1B	CSEG
GETCRTPAGENO . . . . . . . . . .  	L NEAR	0FE2	CSEG
GETINFO  . . . . . . . . . . . .  	L NEAR	0D09	CSEG
GETLREL  . . . . . . . . . . . .  	L NEAR	0B39	CSEG
GETMDSSREQ . . . . . . . . . . .  	L NEAR	0FA2	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-6


GETPARAMS  . . . . . . . . . . .  	N PROC	1A3A	CSEG	Length = 0087
GETRPRS  . . . . . . . . . . . .  	L NEAR	0B54	CSEG
GETRREL  . . . . . . . . . . . .  	L NEAR	0B71	CSEG
GETR_DONE  . . . . . . . . . . .  	L NEAR	1A1C	CSEG
GETR_FAILED  . . . . . . . . . .  	L NEAR	1A19	CSEG
GETSTATUS  . . . . . . . . . . .  	L NEAR	0B8C	CSEG
GETS_ALOAD_A . . . . . . . . . .  	NUMBER	0040	
GETS_ALOAD_AN  . . . . . . . . .  	NUMBER	0006	
GETS_ALOAD_PC  . . . . . . . . .  	NUMBER	0080	
GETS_ALOAD_PCN . . . . . . . . .  	NUMBER	0007	
GETS_EXCLUSIVE . . . . . . . . .  	NUMBER	0020	
GETS_EXCLUSIVEN  . . . . . . . .  	NUMBER	0005	
GETS_FROMAMIGA_ONLY  . . . . . .  	NUMBER	0010	
GETS_FROMAMIGA_ONLYN . . . . . .  	NUMBER	0004	
GETS_FROMPC_ONLY . . . . . . . .  	NUMBER	0004	
GETS_FROMPC_ONLYN  . . . . . . .  	NUMBER	0002	
GETS_TOAMIGA_ONLY  . . . . . . .  	NUMBER	0008	
GETS_TOAMIGA_ONLYN . . . . . . .  	NUMBER	0003	
GETS_TOPC_ONLY . . . . . . . . .  	NUMBER	0002	
GETS_TOPC_ONLYN  . . . . . . . .  	NUMBER	0001	
GETS_WAIT  . . . . . . . . . . .  	NUMBER	0001	
GETS_WAITMASK  . . . . . . . . .  	NUMBER	0300	
GETS_WAITN . . . . . . . . . . .  	NUMBER	0000	
GETS_WAIT_120  . . . . . . . . .  	NUMBER	0300	
GETS_WAIT_15 . . . . . . . . . .  	NUMBER	0100	
GETS_WAIT_30 . . . . . . . . . .  	NUMBER	0200	
GETY . . . . . . . . . . . . . .  	L NEAR	0AE3	CSEG
GET_SERVICE  . . . . . . . . . .  	N PROC	19D9	CSEG	Length = 0044
GOTSERVICE . . . . . . . . . . .  	L NEAR	1C06	CSEG
GPQUIT . . . . . . . . . . . . .  	L NEAR	1A37	CSEG
GRAPH  . . . . . . . . . . . . .  	L BYTE	166F	CSEG
GRAPH1ID . . . . . . . . . . . .  	NUMBER	0030	
GRAPH2ID . . . . . . . . . . . .  	NUMBER	0038	
GRAPHCX  . . . . . . . . . . . .  	L WORD	0172	CSEG
GRAPHCY  . . . . . . . . . . . .  	L WORD	0174	CSEG
GRAPHDEFS  . . . . . . . . . . .  	L BYTE	10D2	CSEG	Length = 0009
GRAPHICSCDEF . . . . . . . . . .  	L WORD	017C	CSEG	Length = 0020
GRAPHICSSAVE . . . . . . . . . .  	L BYTE	021B	CSEG	Length = 00C0
GRAPHID  . . . . . . . . . . . .  	NUMBER	0010	
GRAPHL1  . . . . . . . . . . . .  	L NEAR	1883	CSEG
GRAPHLOOP  . . . . . . . . . . .  	L NEAR	187D	CSEG
GRAPHREGS  . . . . . . . . . . .  	L WORD	1077	CSEG
GRAPHVALID . . . . . . . . . . .  	L BYTE	0171	CSEG

HEIGHT . . . . . . . . . . . . .  	L BYTE	1615	CSEG
HERCAGAIN  . . . . . . . . . . .  	L NEAR	15AC	CSEG
HERCARD  . . . . . . . . . . . .  	L BYTE	170B	CSEG
HERCTLOOP  . . . . . . . . . . .  	L NEAR	1598	CSEG
HERCULES . . . . . . . . . . . .  	L BYTE	02DD	CSEG
HERTYPE  . . . . . . . . . . . .  	NUMBER	0010	
HERWARN  . . . . . . . . . . . .  	L BYTE	171F	CSEG
HEX  . . . . . . . . . . . . . .  	L BYTE	168E	CSEG
HIDECURSOR . . . . . . . . . . .  	L NEAR	0DF0	CSEG
HIDEGRAPHICS . . . . . . . . . .  	L NEAR	05A6	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-7


HIDEHARDWARE . . . . . . . . . .  	L NEAR	059C	CSEG
HOTSPOTX . . . . . . . . . . . .  	L WORD	01ED	CSEG
HOTSPOTY . . . . . . . . . . . .  	L WORD	01EF	CSEG

INACTIVE . . . . . . . . . . . .  	L BYTE	1757	CSEG
INCEXIT  . . . . . . . . . . . .  	L NEAR	05E1	CSEG
INCNEXTBANK  . . . . . . . . . .  	L NEAR	05DC	CSEG
INCREMENT  . . . . . . . . . . .  	N PROC	05C7	CSEG	Length = 001C
INDEXASIS  . . . . . . . . . . .  	L NEAR	140F	CSEG
INITEGA  . . . . . . . . . . . .  	L NEAR	141B	CSEG
INITEGALIB . . . . . . . . . . .  	N PROC	1410	CSEG	Length = 008D
INITNOTEGA . . . . . . . . . . .  	L NEAR	149C	CSEG
INTCALLADDR  . . . . . . . . . .  	L WORD	01C4	CSEG
INTCALLMASK  . . . . . . . . . .  	L WORD	01C2	CSEG
INTCALLSEG . . . . . . . . . . .  	L WORD	01C6	CSEG
INTERROGATE  . . . . . . . . . .  	L NEAR	138A	CSEG
INTIMER  . . . . . . . . . . . .  	L BYTE	0301	CSEG
ITSMINE  . . . . . . . . . . . .  	L NEAR	1B9D	CSEG

JFUNC_ADDSERVICE . . . . . . . .  	NUMBER	000A	
JFUNC_ALLOCJREMEMBER . . . . . .  	NUMBER	0015	
JFUNC_ALLOCMEM . . . . . . . . .  	NUMBER	0002	
JFUNC_ALLOCSERVICEMEM  . . . . .  	NUMBER	0018	
JFUNC_ATTACHJREMEMBER  . . . . .  	NUMBER	0016	
JFUNC_CALLAMIGA  . . . . . . . .  	NUMBER	0007	
JFUNC_CALLSERVICE  . . . . . . .  	NUMBER	000C	
JFUNC_CHECKAMIGA . . . . . . . .  	NUMBER	0009	
JFUNC_DELETESERVICE  . . . . . .  	NUMBER	000E	
JFUNC_FREEJREMEMBER  . . . . . .  	NUMBER	0017	
JFUNC_FREEMEM  . . . . . . . . .  	NUMBER	0003	
JFUNC_FREESERVICEMEM . . . . . .  	NUMBER	0019	
JFUNC_GETBASE  . . . . . . . . .  	NUMBER	0001	
JFUNC_GETSERVICE . . . . . . . .  	NUMBER	000B	
JFUNC_GETSERVICE1  . . . . . . .  	NUMBER	0000	
JFUNC_INITLOCK . . . . . . . . .  	NUMBER	0011	
JFUNC_JINT . . . . . . . . . . .  	NUMBER	000B	
JFUNC_LOCK . . . . . . . . . . .  	NUMBER	0013	
JFUNC_LOCKATTEMPT  . . . . . . .  	NUMBER	0012	
JFUNC_LOCKSERVICEDATA  . . . . .  	NUMBER	000F	
JFUNC_MAX  . . . . . . . . . . .  	NUMBER	0019	
JFUNC_RELEASESERVICE . . . . . .  	NUMBER	000D	
JFUNC_SETPARAM . . . . . . . . .  	NUMBER	0004	
JFUNC_SETSERVICE . . . . . . . .  	NUMBER	0005	
JFUNC_STOPSERVICE  . . . . . . .  	NUMBER	0006	
JFUNC_UNLOCK . . . . . . . . . .  	NUMBER	0014	
JFUNC_UNLOCKSERVICEDATA  . . . .  	NUMBER	0010	
JFUNC_WAITAMIGA  . . . . . . . .  	NUMBER	0008	
JSERV_AMIGACALL  . . . . . . . .  	NUMBER	000C	
JSERV_AMIGASERVICE . . . . . . .  	NUMBER	000E	
JSERV_AMOUSE . . . . . . . . . .  	NUMBER	0011	
JSERV_BADAUTOLOAD  . . . . . . .  	NUMBER	000A	
JSERV_COM2INT  . . . . . . . . .  	NUMBER	0006	
JSERV_CRT1INT  . . . . . . . . .  	NUMBER	0002	
JSERV_CRT2INT  . . . . . . . . .  	NUMBER	0003	
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-8


JSERV_DUPSERVICE . . . . . . . .  	NUMBER	0007	
JSERV_ENBKB  . . . . . . . . . .  	NUMBER	0004	
JSERV_FINISHED . . . . . . . . .  	NUMBER	0001	
JSERV_GINT . . . . . . . . . . .  	NUMBER	0001	
JSERV_HARDDISK . . . . . . . . .  	NUMBER	0009	
JSERV_ILLFUNCTION  . . . . . . .  	NUMBER	0008	
JSERV_LPT1INT  . . . . . . . . .  	NUMBER	0005	
JSERV_MINT . . . . . . . . . . .  	NUMBER	0000	
JSERV_NOAMIGAMEM . . . . . . . .  	NUMBER	0004	
JSERV_NOFUNCTION . . . . . . . .  	NUMBER	-0001	
JSERV_NOJANUSBASE  . . . . . . .  	NUMBER	0002	
JSERV_NOJANUSMEM . . . . . . . .  	NUMBER	0003	
JSERV_NOPCMEM  . . . . . . . . .  	NUMBER	0005	
JSERV_NOSERVICE  . . . . . . . .  	NUMBER	0006	
JSERV_NOTEXCLUSIVE . . . . . . .  	NUMBER	0009	
JSERV_OK . . . . . . . . . . . .  	NUMBER	0000	
JSERV_PCBOOTED . . . . . . . . .  	NUMBER	0007	
JSERV_PCCALL . . . . . . . . . .  	NUMBER	000D	
JSERV_PCDISK . . . . . . . . . .  	NUMBER	0010	
JSERV_PCSERVICE  . . . . . . . .  	NUMBER	000F	
JSERV_PENDING  . . . . . . . . .  	NUMBER	0000	
JSERV_READAMIGA  . . . . . . . .  	NUMBER	000A	
JSERV_READPC . . . . . . . . . .  	NUMBER	000B	
JSERV_SCROLL . . . . . . . . . .  	NUMBER	0008	
JSETINT  . . . . . . . . . . . .  	NUMBER	007F	
JTABLE . . . . . . . . . . . . .  	L NEAR	0FF9	CSEG

KEYOFFSET  . . . . . . . . . . .  	L WORD	1AC3	CSEG
KEYSEGMENT . . . . . . . . . . .  	L WORD	1AC5	CSEG

LASTFULLMPOS . . . . . . . . . .  	L WORD	01E1	CSEG
LEFTX  . . . . . . . . . . . . .  	L WORD	01F3	CSEG
LIGHTPENEMUOFF . . . . . . . . .  	L NEAR	0F51	CSEG
LIGHTPENEMUON  . . . . . . . . .  	L NEAR	0F4F	CSEG
LIGHTPENMODE . . . . . . . . . .  	L WORD	01D6	CSEG

MAIN . . . . . . . . . . . . . .  	L NEAR	1BEE	CSEG
MAINCODE . . . . . . . . . . . .  	L NEAR	0CBB	CSEG
MAXHANDLER . . . . . . . . . . .  	NUMBER	0020	
MDAACT . . . . . . . . . . . . .  	L NEAR	15C9	CSEG
MDACARD  . . . . . . . . . . . .  	L BYTE	16FC	CSEG
MDATYPE  . . . . . . . . . . . .  	NUMBER	0008	
MICKEYX  . . . . . . . . . . . .  	L WORD	01E9	CSEG
MICKEYY  . . . . . . . . . . . .  	L WORD	01EB	CSEG
MISC . . . . . . . . . . . . . .  	L BYTE	1642	CSEG
MISCID . . . . . . . . . . . . .  	NUMBER	0020	
MISCL1 . . . . . . . . . . . . .  	L NEAR	1851	CSEG
MISCLOOP . . . . . . . . . . . .  	L NEAR	184B	CSEG
MLNOTCHANGED . . . . . . . . . .  	L NEAR	1334	CSEG
MLNOTSEQ . . . . . . . . . . . .  	L NEAR	1328	CSEG
MMGRAPHICS . . . . . . . . . . .  	L NEAR	0BCB	CSEG
MMHARDWARE . . . . . . . . . . .  	L NEAR	0BC5	CSEG
MMOVEEXIT  . . . . . . . . . . .  	L NEAR	0BD4	CSEG
MODENO . . . . . . . . . . . . .  	L BYTE	15E8	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-9


MONITOR  . . . . . . . . . . . .  	L BYTE	169E	CSEG
MONOCHECK  . . . . . . . . . . .  	L NEAR	154B	CSEG
MONOMON  . . . . . . . . . . . .  	L BYTE	16B5	CSEG
MOUSEDRIVER  . . . . . . . . . .  	N PROC	0C3C	CSEG	Length = 03FB
MOUSEINT . . . . . . . . . . . .  	N PROC	0303	CSEG	Length = 0075
MOUSEREAD  . . . . . . . . . . .  	N PROC	0A60	CSEG	Length = 0141
MOUSESERV_APPLICATION_ID . . . .  	NUMBER	0001	
MOUSESERV_LOCAL_ID . . . . . . .  	NUMBER	0002	
MOUSETOCURSOR  . . . . . . . . .  	N PROC	05AE	CSEG	Length = 0019
MOUSEX . . . . . . . . . . . . .  	L WORD	01E3	CSEG
MOUSEY . . . . . . . . . . . . .  	L WORD	01E5	CSEG
MOVECURSOR . . . . . . . . . . .  	N PROC	0A30	CSEG	Length = 0030
MOVEMOUSE  . . . . . . . . . . .  	N PROC	0BA1	CSEG	Length = 0034
MRNOMOVE . . . . . . . . . . . .  	L NEAR	0B9A	CSEG
MSKIP  . . . . . . . . . . . . .  	L NEAR	1AB7	CSEG
MS_APP_ID  . . . . . . . . . . .  	ALIAS	 MOUSESERV_APPLICATION_ID		
MS_FLAGS . . . . . . . . . . . .  	NUMBER	0041	
MS_LOCAL_ID  . . . . . . . . . .  	ALIAS	 MOUSESERV_LOCAL_ID		
MS_RQ_NP . . . . . . . . . . . .  	L WORD	011A	CSEG
MS_SD_NP . . . . . . . . . . . .  	L WORD	011E	CSEG
MULTILOOP  . . . . . . . . . . .  	L NEAR	1317	CSEG
MUSTBECGA  . . . . . . . . . . .  	L NEAR	15D1	CSEG

NEWLINE  . . . . . . . . . . . .  	L BYTE	16CC	CSEG
NEWMASK  . . . . . . . . . . . .  	L WORD	01C0	CSEG
NEWVIDEO . . . . . . . . . . . .  	L NEAR	0476	CSEG
NEXTLINE . . . . . . . . . . . .  	L NEAR	05E4	CSEG
NEXTTIMER  . . . . . . . . . . .  	L NEAR	0377	CSEG
NOCHANGE . . . . . . . . . . . .  	L NEAR	0369	CSEG
NODX . . . . . . . . . . . . . .  	L NEAR	0CA8	CSEG
NOPARAMS . . . . . . . . . . . .  	L NEAR	1ABE	CSEG
NOPCGRAPH  . . . . . . . . . . .  	L NEAR	0855	CSEG
NOSERVICE  . . . . . . . . . . .  	L NEAR	1B78	CSEG
NOSERVMSG  . . . . . . . . . . .  	L NEAR	1B78	CSEG
NOSMSG . . . . . . . . . . . . .  	L BYTE	1AC7	CSEG
NOTCONDOFF . . . . . . . . . . .  	L NEAR	057D	CSEG
NOTEGA . . . . . . . . . . . . .  	L NEAR	14D6	CSEG
NOTHERCULES  . . . . . . . . . .  	L NEAR	1A77	CSEG
NOTIN  . . . . . . . . . . . . .  	L NEAR	1C25	CSEG
NOTINT . . . . . . . . . . . . .  	L NEAR	1A60	CSEG
NOTRACE  . . . . . . . . . . . .  	L NEAR	0541	CSEG
NOTTRACE . . . . . . . . . . . .  	L NEAR	1A8C	CSEG
NOTVGA . . . . . . . . . . . . .  	L NEAR	14BF	CSEG
NULL . . . . . . . . . . . . . .  	N PROC	0378	CSEG	Length = 0001

ODDOFFSET  . . . . . . . . . . .  	L WORD	01DA	CSEG
OLDOFFSET  . . . . . . . . . . .  	L WORD	010A	CSEG
OLDSEGMENT . . . . . . . . . . .  	L WORD	010C	CSEG
OLD_COUNT  . . . . . . . . . . .  	L BYTE	0302	CSEG
OTHER  . . . . . . . . . . . . .  	F PROC	0385	CSEG	Length = 000C
OTHERINTNO . . . . . . . . . . .  	L BYTE	0105	CSEG
OTHEROFFSET  . . . . . . . . . .  	L WORD	0112	CSEG
OTHERPROC  . . . . . . . . . . .  	L WORD	0108	CSEG
OTHERSEGMENT . . . . . . . . . .  	L WORD	0114	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-10



PARAMS . . . . . . . . . . . . .  	L BYTE	0081	CSEG	Length = 007F
PARAMSIZE  . . . . . . . . . . .  	L BYTE	0080	CSEG
PASSED . . . . . . . . . . . . .  	L BYTE	1B1F	CSEG
PCSTATE_RESERVED . . . . . . . .  	NUMBER	FFFF	
PC_EXCLUSIVE . . . . . . . . . .  	NUMBER	0020	
PC_EXCLUSIVEN  . . . . . . . . .  	NUMBER	0005	
PLOOP  . . . . . . . . . . . . .  	L NEAR	1A46	CSEG
PRESSCOUNT . . . . . . . . . . .  	NUMBER	0000	
PRESSX . . . . . . . . . . . . .  	NUMBER	0002	
PRESSY . . . . . . . . . . . . .  	NUMBER	0004	
PRINT  . . . . . . . . . . . . .  	N PROC	04C5	CSEG	Length = 0008
PSKIP  . . . . . . . . . . . . .  	L NEAR	1ABC	CSEG
PXLOOP . . . . . . . . . . . . .  	L NEAR	1ABF	CSEG
PXSKIP . . . . . . . . . . . . .  	L NEAR	1A5D	CSEG

RAMSIZE  . . . . . . . . . . . .  	L BYTE	1762	CSEG
RARSINGLE  . . . . . . . . . . .  	L NEAR	1223	CSEG
RASNOTHERC . . . . . . . . . . .  	L NEAR	0D8E	CSEG
READAREG . . . . . . . . . . . .  	L NEAR	1214	CSEG
READMOTCOUNTS  . . . . . . . . .  	L NEAR	0F29	CSEG
READREGS . . . . . . . . . . . .  	L NEAR	125B	CSEG
READSET  . . . . . . . . . . . .  	L NEAR	12C5	CSEG
REALLYGOTSERVICE . . . . . . . .  	L NEAR	1C10	CSEG
RELEASECOUNT . . . . . . . . . .  	NUMBER	0006	
RELEASEX . . . . . . . . . . . .  	NUMBER	0008	
RELEASEY . . . . . . . . . . . .  	NUMBER	000A	
RESERVED . . . . . . . . . . . .  	L NEAR	1396	CSEG
RESETANDSTATUS . . . . . . . . .  	L NEAR	0D18	CSEG
RESETUSER  . . . . . . . . . . .  	N PROC	11A0	CSEG	Length = 0035
RESTOREMDS . . . . . . . . . . .  	L NEAR	0FBF	CSEG
REVERTTODEFAULT  . . . . . . . .  	L NEAR	1309	CSEG
RIGHTX . . . . . . . . . . . . .  	L WORD	01F5	CSEG
ROWLOOPEND . . . . . . . . . . .  	L NEAR	063B	CSEG
ROWS . . . . . . . . . . . . . .  	L BYTE	1606	CSEG
RRLOOP . . . . . . . . . . . . .  	L NEAR	1270	CSEG
RRSKIP . . . . . . . . . . . . .  	L NEAR	1274	CSEG
RSLOOP . . . . . . . . . . . . .  	L NEAR	12CD	CSEG
RUNOTEGA . . . . . . . . . . . .  	L NEAR	11D4	CSEG

SAMEINTS . . . . . . . . . . . .  	L NEAR	1BC9	CSEG
SAMEVIDEO  . . . . . . . . . . .  	L NEAR	04AB	CSEG
SAVEAREA . . . . . . . . . . . .  	L WORD	064B	CSEG
SAVEGRAPHCURSOR  . . . . . . . .  	N PROC	094B	CSEG	Length = 0079
SAVEINC  . . . . . . . . . . . .  	NUMBER	0003	
SAVEMASK . . . . . . . . . . . .  	L BYTE	016B	CSEG	Length = 0003
SAVEMDS  . . . . . . . . . . . .  	L NEAR	0FAC	CSEG
SAVESIZE . . . . . . . . . . . .  	L WORD	02EA	CSEG
SAVETEMP . . . . . . . . . . . .  	L WORD	064D	CSEG
SAVEUSER . . . . . . . . . . . .  	N PROC	1144	CSEG	Length = 0033
SCREENMAXX . . . . . . . . . . .  	L WORD	02FD	CSEG
SCREENMAXY . . . . . . . . . . .  	L WORD	02FF	CSEG
SCREENMODE . . . . . . . . . . .  	L BYTE	02FC	CSEG
SCREENOFFSET . . . . . . . . . .  	L WORD	01BC	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-11


SCREENSEGMENT  . . . . . . . . .  	L WORD	01BE	CSEG
SD_CREATED . . . . . . . . . . .  	NUMBER	0100	
SD_CREATEDN  . . . . . . . . . .  	NUMBER	0008	
SEQ  . . . . . . . . . . . . . .  	L BYTE	1633	CSEG
SEQDEFS  . . . . . . . . . . . .  	L BYTE	10CE	CSEG	Length = 0004
SEQL1  . . . . . . . . . . . . .  	L NEAR	182D	CSEG
SEQLOOP  . . . . . . . . . . . .  	L NEAR	1827	CSEG
SEQREGS  . . . . . . . . . . . .  	L WORD	106B	CSEG
SEQUENCERID  . . . . . . . . . .  	NUMBER	0008	
SERVICE_ADDED  . . . . . . . . .  	NUMBER	0040	
SERVICE_ADDEDN . . . . . . . . .  	NUMBER	0006	
SERVICE_AMIGASIDE  . . . . . . .  	NUMBER	0004	
SERVICE_AMIGASIDEN . . . . . . .  	NUMBER	0002	
SERVICE_DELETED  . . . . . . . .  	NUMBER	0001	
SERVICE_DELETEDN . . . . . . . .  	NUMBER	0000	
SERVICE_PCWAIT . . . . . . . . .  	NUMBER	0008	
SERVICE_PCWAITN  . . . . . . . .  	NUMBER	0003	
SETCRTPAGENO . . . . . . . . . .  	L NEAR	0FD8	CSEG
SETDOUBLESPTHRES . . . . . . . .  	L NEAR	0F86	CSEG
SETGCNOTVIS1 . . . . . . . . . .  	L NEAR	0EA4	CSEG
SETGCNOTVIS2 . . . . . . . . . .  	L NEAR	0ED7	CSEG
SETGCURBLOCK . . . . . . . . . .  	L NEAR	0E90	CSEG
SETISMASKANDADD  . . . . . . . .  	L NEAR	0F3D	CSEG
SETMCURPOS . . . . . . . . . . .  	L NEAR	0E1F	CSEG
SETMINMAXHORIZ . . . . . . . . .  	L NEAR	0E7A	CSEG
SETMINMAXVERT  . . . . . . . . .  	L NEAR	0E85	CSEG
SETMOUSE . . . . . . . . . . . .  	N PROC	1177	CSEG	Length = 0029
SETMPRATIO . . . . . . . . . . .  	L NEAR	0F57	CSEG
SETTEXTCUR . . . . . . . . . . .  	L NEAR	0EDB	CSEG
SETVIDEOPARS . . . . . . . . . .  	N PROC	0391	CSEG	Length = 00E1
SGCBYTESKIP  . . . . . . . . . .  	L NEAR	09A8	CSEG
SGCEXIT  . . . . . . . . . . . .  	L NEAR	09C3	CSEG
SGCNEXT  . . . . . . . . . . . .  	L NEAR	098A	CSEG
SGCNEXTBYTE  . . . . . . . . . .  	L NEAR	099B	CSEG
SGCSKIP  . . . . . . . . . . . .  	L NEAR	09AE	CSEG
SGC_OK . . . . . . . . . . . . .  	L NEAR	0953	CSEG
SHOWCURSOR . . . . . . . . . . .  	L NEAR	0DAD	CSEG
SHOWGRAPHCURSOR  . . . . . . . .  	N PROC	075B	CSEG	Length = 00FB
SHOWGRAPHICS . . . . . . . . . .  	L NEAR	0DEA	CSEG
SHOWHARDWARE . . . . . . . . . .  	L NEAR	0DD4	CSEG
SHOWSOFTCURSOR . . . . . . . . .  	N PROC	09C4	CSEG	Length = 004A
SHOWVIDEO  . . . . . . . . . . .  	N PROC	188B	CSEG	Length = 0140
SINGLELOOP . . . . . . . . . . .  	L NEAR	1340	CSEG
SLNOTCHANGED . . . . . . . . . .  	L NEAR	1352	CSEG
SMNOTEGA . . . . . . . . . . . .  	L NEAR	119F	CSEG
SMOUT  . . . . . . . . . . . . .  	L NEAR	119E	CSEG
SPACETERMINATES  . . . . . . . .  	L NEAR	1AB0	CSEG
SPECIALS . . . . . . . . . . . .  	L NEAR	0CE3	CSEG
SPSETES  . . . . . . . . . . . .  	L NEAR	0D03	CSEG
SPVERS . . . . . . . . . . . . .  	L NEAR	0CFC	CSEG
SSCRETURN  . . . . . . . . . . .  	L NEAR	0A0D	CSEG
SSKIP  . . . . . . . . . . . . .  	L NEAR	178B	CSEG
START  . . . . . . . . . . . . .  	L NEAR	0100	CSEG
STATEINFO  . . . . . . . . . . .  	L NEAR	0167	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-12


STEXIT . . . . . . . . . . . . .  	L NEAR	0F26	CSEG
STNOTVIS1  . . . . . . . . . . .  	L NEAR	0EE8	CSEG
STNOTVIS2  . . . . . . . . . . .  	L NEAR	0F25	CSEG
STRING . . . . . . . . . . . . .  	N PROC	1779	CSEG	Length = 0013
STSOFT . . . . . . . . . . . . .  	L NEAR	0F22	CSEG
SUNOTEGA . . . . . . . . . . . .  	L NEAR	1176	CSEG
SV_CGANOTACTIVE  . . . . . . . .  	L NEAR	1968	CSEG
SV_EGAENHAN  . . . . . . . . . .  	L NEAR	1916	CSEG
SV_EGAMONO . . . . . . . . . . .  	L NEAR	191D	CSEG
SV_EGANOTACTIVE  . . . . . . . .  	L NEAR	18F3	CSEG
SV_EGANOTENHAN . . . . . . . . .  	L NEAR	1921	CSEG
SV_EGANOTPRES  . . . . . . . . .  	L NEAR	1924	CSEG
SV_HERNOTACTIVE  . . . . . . . .  	L NEAR	1996	CSEG
SV_MDANOTACTIVE  . . . . . . . .  	L NEAR	1941	CSEG
SV_NOTEGA  . . . . . . . . . . .  	L NEAR	18C1	CSEG
SV_NOTVGA  . . . . . . . . . . .  	L NEAR	18B3	CSEG
SV_TRYCGA  . . . . . . . . . . .  	L NEAR	194B	CSEG
SV_TRYHERC . . . . . . . . . . .  	L NEAR	1972	CSEG
SV_VGADISP . . . . . . . . . . .  	L NEAR	18B0	CSEG
SV_VGANOTACTIVE  . . . . . . . .  	L NEAR	18AC	CSEG
SV_WHATMODE  . . . . . . . . . .  	L NEAR	19A0	CSEG
SWAPINTSUBRS . . . . . . . . . .  	L NEAR	0F89	CSEG

TCCURSMASK . . . . . . . . . . .  	L WORD	017A	CSEG
TCSCRMASK  . . . . . . . . . . .  	L WORD	0178	CSEG
TCTYPE . . . . . . . . . . . . .  	L BYTE	0177	CSEG
TEGA_COUNT . . . . . . . . . . .  	L NEAR	08AA	CSEG
TEGA_NEXTLINE  . . . . . . . . .  	L NEAR	08C8	CSEG
TEGA_NOBYTE0 . . . . . . . . . .  	L NEAR	08D6	CSEG
TEGA_NOBYTE1 . . . . . . . . . .  	L NEAR	08E4	CSEG
TEGA_NOBYTE2 . . . . . . . . . .  	L NEAR	08F2	CSEG
TEGA_ROWLOOPEND  . . . . . . . .  	L NEAR	08F2	CSEG
TELLVIDEO  . . . . . . . . . . .  	L NEAR	0466	CSEG
TEXTCURS . . . . . . . . . . . .  	L BYTE	0176	CSEG
TGCBYTESKIP  . . . . . . . . . .  	L NEAR	087C	CSEG
TGCCONT  . . . . . . . . . . . .  	L NEAR	090E	CSEG
TGCDOIT  . . . . . . . . . . . .  	L NEAR	0932	CSEG
TGCEXIT  . . . . . . . . . . . .  	L NEAR	0949	CSEG
TGCFIN . . . . . . . . . . . . .  	L NEAR	0942	CSEG
TGCNEXT  . . . . . . . . . . . .  	L NEAR	0857	CSEG
TGCNEXTBYTE  . . . . . . . . . .  	L NEAR	0868	CSEG
TGCNOTEGA  . . . . . . . . . . .  	L NEAR	093F	CSEG
TGCSKIP  . . . . . . . . . . . .  	L NEAR	0880	CSEG
TICKLE_DONE  . . . . . . . . . .  	L NEAR	1A36	CSEG
TICKLE_JANUS . . . . . . . . . .  	N PROC	1A1D	CSEG	Length = 001A
TICKLE_LOOP  . . . . . . . . . .  	L NEAR	1A20	CSEG
TICKLE_OK  . . . . . . . . . . .  	L NEAR	1A33	CSEG
TIDYCGA  . . . . . . . . . . . .  	N PROC	0856	CSEG	Length = 0038
TIDYEGA  . . . . . . . . . . . .  	N PROC	088E	CSEG	Length = 0074
TIDYGRAPHCURSOR  . . . . . . . .  	N PROC	0902	CSEG	Length = 0049
TIDYSOFTCURSOR . . . . . . . . .  	N PROC	0A0E	CSEG	Length = 0022
TIMER  . . . . . . . . . . . . .  	F PROC	0379	CSEG	Length = 000C
TIMERINTNO . . . . . . . . . . .  	L BYTE	0104	CSEG
TIMEROFFSET  . . . . . . . . . .  	L WORD	010E	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-13


TIMERPROC  . . . . . . . . . . .  	L WORD	0106	CSEG
TIMERSEGMENT . . . . . . . . . .  	L WORD	0110	CSEG
TOLDUSER . . . . . . . . . . . .  	L BYTE	1AC2	CSEG
TOPY . . . . . . . . . . . . . .  	L WORD	01F7	CSEG
TRACE  . . . . . . . . . . . . .  	N PROC	04DD	CSEG	Length = 0065
TRACECOMMON  . . . . . . . . . .  	L NEAR	04E9	CSEG
TRYCGA . . . . . . . . . . . . .  	L NEAR	1565	CSEG
TRYCGA1  . . . . . . . . . . . .  	L NEAR	1573	CSEG
TRYHERC  . . . . . . . . . . . .  	L NEAR	158D	CSEG
TRYJANUS . . . . . . . . . . . .  	L NEAR	1BFC	CSEG
TSCRETURN  . . . . . . . . . . .  	L NEAR	0A2F	CSEG

USEDXASPTR . . . . . . . . . . .  	L NEAR	0C75	CSEG
USEDXVALUE . . . . . . . . . . .  	L NEAR	0C87	CSEG

VERSIONNO  . . . . . . . . . . .  	L BYTE	02DE	CSEG
VERSNO . . . . . . . . . . . . .  	L BYTE	1B00	CSEG
VGACARD  . . . . . . . . . . . .  	L BYTE	16CF	CSEG
VGATYPE  . . . . . . . . . . . .  	NUMBER	0001	
VGHERCPG2  . . . . . . . . . . .  	L NEAR	042A	CSEG
VGNOTHERC  . . . . . . . . . . .  	L NEAR	043A	CSEG
VIDEO  . . . . . . . . . . . . .  	F PROC	0472	CSEG	Length = 0053
VIDEOCONTINUE  . . . . . . . . .  	L NEAR	04AF	CSEG
VIDEOGRAPHICS  . . . . . . . . .  	L NEAR	03ED	CSEG
VIDEONORMAL  . . . . . . . . . .  	L NEAR	04C0	CSEG
VIDEONOT01 . . . . . . . . . . .  	L NEAR	03CE	CSEG
VIDEONOT23 . . . . . . . . . . .  	L NEAR	03E0	CSEG
VIDEOOFFSET  . . . . . . . . . .  	L WORD	0116	CSEG
VIDEOSEGMENT . . . . . . . . . .  	L WORD	0118	CSEG
VIDEOTEXT8X8 . . . . . . . . . .  	L NEAR	03D3	CSEG
VMODE  . . . . . . . . . . . . .  	L BYTE	15D9	CSEG

WAITFORAMIGA . . . . . . . . . .  	L BYTE	1AC1	CSEG
WARCOMMON  . . . . . . . . . . .  	L NEAR	1257	CSEG
WARSINGLE  . . . . . . . . . . .  	L NEAR	1253	CSEG
WARSKIP  . . . . . . . . . . . .  	L NEAR	1258	CSEG
WHATINDEX  . . . . . . . . . . .  	N PROC	13EC	CSEG	Length = 0024
WHOACTIVE  . . . . . . . . . . .  	L NEAR	15AE	CSEG
WRATTR . . . . . . . . . . . . .  	L NEAR	129B	CSEG
WRITE  . . . . . . . . . . . . .  	N PROC	178C	CSEG	Length = 0034
WRITEAREG  . . . . . . . . . . .  	L NEAR	1229	CSEG
WRITEREGS  . . . . . . . . . . .  	L NEAR	1277	CSEG
WRITESET . . . . . . . . . . . .  	L NEAR	12E2	CSEG
WRLOOP . . . . . . . . . . . . .  	L NEAR	129B	CSEG
WRLSKIP  . . . . . . . . . . . .  	L NEAR	12B0	CSEG
WRNOTATTR  . . . . . . . . . . .  	L NEAR	12C0	CSEG
WRSKIP . . . . . . . . . . . . .  	L NEAR	12C2	CSEG
WSCOMMON . . . . . . . . . . . .  	L NEAR	12FD	CSEG
WSKIP  . . . . . . . . . . . . .  	L NEAR	17BF	CSEG
WSLOOP . . . . . . . . . . . . .  	L NEAR	12EA	CSEG

XCHECK . . . . . . . . . . . . .  	L NEAR	080E	CSEG
XMAXCURSOR . . . . . . . . . . .  	L WORD	01CE	CSEG
XMAXOK . . . . . . . . . . . . .  	L NEAR	0AE0	CSEG
Microsoft (R) Macro Assembler Version 5.10                  9/16/91 16:19:06
emumouse                                                    Symbols-14


XMINCURSOR . . . . . . . . . . .  	L WORD	01CC	CSEG
XMINOK . . . . . . . . . . . . .  	L NEAR	0AD7	CSEG
XMPRATIO . . . . . . . . . . . .  	L WORD	01C8	CSEG
XPAGE  . . . . . . . . . . . . .  	L BYTE	1624	CSEG
XSHIFT . . . . . . . . . . . . .  	L BYTE	01E7	CSEG
XXLOOP . . . . . . . . . . . . .  	L NEAR	0F2C	CSEG

YMAXCURSOR . . . . . . . . . . .  	L WORD	01D2	CSEG
YMAXOK . . . . . . . . . . . . .  	L NEAR	0B18	CSEG
YMINCURSOR . . . . . . . . . . .  	L WORD	01D0	CSEG
YMINOK . . . . . . . . . . . . .  	L NEAR	0B0F	CSEG
YMPRATIO . . . . . . . . . . . .  	L WORD	01CA	CSEG
YSHIFT . . . . . . . . . . . . .  	L BYTE	01E8	CSEG

@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@FILENAME  . . . . . . . . . . .  	TEXT  amouse		
@VERSION . . . . . . . . . . . .  	TEXT  510		


   4346 Source  Lines
   4346 Total   Lines
    683 Symbols

  46348 + 167448 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
