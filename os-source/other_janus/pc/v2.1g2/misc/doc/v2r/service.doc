pcservice.documentation						       Page 1

;****************************************************************************
;
; This is a brief documentation of Janus Services on PC side.
; All these come as part of PC.BOOT and can be accessed by
; executing the 'INT Bh' statement from assembly level. 
;
; By Torsten Burgdorff / Commodore Engineering Braunschweig/Germany
;----------------------------------------------------------------------------
;
; Service 0:			Not supported anymore
; ==========
;
; Expects:
;
;	AH	:	JFUNC_GETSERVICE1
;
; Returns:
;
;	AL 	:      Status (JSERV_NOFUNCTION)
;
;
;----------------------------------------------------------------------------
;
; Service 1: GetBase 		Gets Janus segmemts and offset 
; ==================		of 1st-Gen service.
;
; Expects:
;
;	AH	:	JFUNC_GETBASE
; 	AL 	:	Janus Service Number
;
; Returns :
;
; 	ES 	: 	Janus Parameter Segment
; 	DI 	: 	Janus Parameter Offset (if defined),
; 			 else -1
; 	DX 	:	Janus Buffer Segment
; 	AL 	:	Status (JSERV_OK)
;
;
;----------------------------------------------------------------------------
;
; Service 2: AllocMem		Allocates Janus Memory
; ===================		
;
; Expects:
;
;	AH	:	JFUNC_ALLOCMEM
;	AL 	: 	Type of Janus Memory to allocate
;			(MEMF_PARAMETER, MEMF_BUFFER)
;	BX 	:    	Size of Janus Memory to allocate
;
; Returns:
;
;	BX 	: 	Offset of requested memory if success, else 0
;	AL 	:    	Status (JSERV_OK, JSERV_NOJANUSMEM)
;
;
;---------------------------------------------------------------------------- 

pcservice.documentation 				               Page 2	

;---------------------------------------------------------------------------- 
;
; Service 3: FREE_MEM		 Releases Janus Memory
; ===================		 Caution: Crash if offset/type is wrong 
;
;
; Expects:
;	AH	:	JFUNC_FREEMEM
;	AL 	: 	Type of Janus Memory to free
;			(MEMF_PARAMETER, MEMF_BUFFER)
;	BX 	:    	Offset of Janus Memory to free
;
; Returns:		NEVER, if offset/type was wrong	!
; 	AL 	: 	Status (JSERV_OK, JSERV_NOJANUSMEM)
;
;
;----------------------------------------------------------------------------
;
; Service 4: SET_PARAM		 Sets the pointer to parameter memory area
; ====================		 for this Service.
;
; Expects:
;	AH	:	JFUNC_SETPARAM
;	AL 	: 	Janus Service Number to support
;	BX 	:	Offset of Janus Parameter Memory to install
;
; Returns:
;	AL 	: 	Status (JSERV_OK)
;
;
;----------------------------------------------------------------------------
;
; Service 5:			Not supported anymore
; ==========
;
; Expects:
;
;	AH	:	JFUNC_SETSERVICE
;
; Returns:
;
;	AL 	: 	Status (JSERV_NOFUNCTION)
;
;
;----------------------------------------------------------------------------

pcservice.documentation					               Page 3	

;----------------------------------------------------------------------------
;
; Service 6:			Not supported anymore
; ==========
;
;
; Expects:
;	AH	:	JFUNC_STOPSERVCIE
;
; Returns:
;	AL 	: 	Status (JSERV_NOFUNCTION)
;
;
;----------------------------------------------------------------------------
;
; Service 7: CallAmiga		Calls the requested function on AMIGA side.
; ====================		Checks current status, but doesn't wait for
;			        the call to complete.
;				Returns with ERROR, if Service# out of range.
;
; Expects:
;
;	AH	:	JFUNC_CALLAMIGA
;	AL 	: 	Janus Service Number to call
;				    		
; Returns:
;
;	AL 	: 	Status (JSERV_PENDING,JSERV_FINISHED,JSERV_NOSERVICE)
;
;
;----------------------------------------------------------------------------
;
; Service 8: WaitAmiga		Waits for a previos issued CALL_AMIGA 
; ====================	 	to complete. 
;
; Expects:
;
;	AH 	:	JFUNC_WAITAMIGA
;	AL 	:	Janus Service Number to wait for
;
; Returns:
;
;	AL 	:    	Status (JSERV_FINISHED, JSERV_NOSERVICE)
;
;
;----------------------------------------------------------------------------
;
; Service 9: CheckAmiga		Checks completion status 
; =====================		of a pending CALL_AMIGA
;
; Expects:
;
;	AH 	:	JFUNC_CHECKAMIGA
;	AL 	: 	Janus Service Number to check
;
; Returns:
;
;	AL 	:	Status (JSERV_PENDING,JSERV_FINISHED,JSERV_NOSERVICE)
;
;
;----------------------------------------------------------------------------

pcservice.documentation					               Page 4

;----------------------------------------------------------------------------
;
; Service 10: AddService	Allocates memory block for a new ServiceData	
; ======================	structure and introduce	this service to the
;				system.
;
; Expects:
;
;	AH	:	JFUNC_ADDSERVICE
;	DS:SI 	:	ApplicationID	 	
;	CX 	: 	LocalID	
;	BX 	:	Size of customers memory
;      	DX 	:   	Type of customers memory (MEMB_PARAMETER, MEMB_BUFFER)	
;	AL	:	Flags (ADDS_LOCKDATA) 
;	ES:DI 	: 	Pointer to service handler
;				    		
; Returns:
;	AL 	:	Status (JSERV_OK, JSERV_NOJANUSMEM, JSERV_NOSERVICE,
;				JSERV_NOJANUSBASE)
;	ES:DI 	:	Pointer to initialized ServiceData
;
;
;----------------------------------------------------------------------------
;			
; Service 11: GetService	Looks for an according service and	
; ======================	connects customer application to 
;				this service.
;
; Expects:
;
;	AH	:	JFUNC_GETSERVICE
;	DS:SI 	:	ApplicationID	  	
;	CX 	: 	LocalID	
;	AL	:	Flags (GETS_WAIT, GETS_ALOAD_A) 
;	ES:DI 	: 	Pointer to application
;			0 : Application doesn't support Amiga calls
;	    		
; Returns:
;
;	AL 	: 	Status (JSERV_OK, JSERV_NOSERVICE)
;	ES:DI 	: 	Pointer to initialized ServiceData
;
;
;----------------------------------------------------------------------------

pcservice.documentation						       Page 5	

;----------------------------------------------------------------------------
;
; Service 12: CallService	Calls an available service via an given	
; =======================	pointer into service structure list.
;
;
; Expects:
;
;	AH	:	JFUNC_CALLSERVICE
;	DI 	: 	Pointer to initialized ServiceData structure	
;				    		
; Returns:
;
;	AL 	: 	Status (JSERV_OK, JSERV_NOJANUSMEM, JSERV_NOJANUSBASE)
;					
;
;----------------------------------------------------------------------------
;
; Service 13: ReleaseService		Disconnets from service.	
; ==========================	
;
;
; Expects:
;
;	AH	:	JFUNC_RELEASESERVICE
;	DI 	: 	Pointer to initialized ServiceData structure
;				    		
; Returns:
;
;	AL 	: 	Status (JSERV_OK, JSERV_NOJANUSBASE)
;
;
;----------------------------------------------------------------------------
;
; Service 14: DeleteService		Removes service from the system.
; =========================	
;
;
; Expects:
;
;	AH	:	JFUNC_DELETESERVICE
;	DI 	: 	Pointer to initialized ServiceData structure
;				    		
; Returns:
;
;	AL 	: 	Status (JSERV_OK, JSERV_NOJANUSBASE)
;
;
;----------------------------------------------------------------------------

pcservice.documentation						       Page 6

;----------------------------------------------------------------------------
;
; Service 15: LockServiceData		Sets LOCK byte in according ServiceData	
; ===========================		structure to prevent the other side
;					trashing the shared memory buffer.
;
; Expects:
;
;	AH	:	JFUNC_LOCKSERVICEDATA
;	DI 	: 	Pointer to initialized ServiceData structure	
;				    		
; Returns:
;
;	AL 	:	Status (JSERV_OK)
;
;----------------------------------------------------------------------------
;
; Service 16: UnlockServiceData		Resets LOCK byte in according	
; =============================		ServiceStructure.
;
;
; Expects:
;
;	AH	:	JFUNC_UNLOCKSERVICEDATA
;	DI 	: 	Pointer to initialized ServiceData structure	
;				    		
; Returns:
;
;	AL 	:	Status (JSERV_OK)
;
;----------------------------------------------------------------------------
