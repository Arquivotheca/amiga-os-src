Extract "OUT" from File ABHANDLE.ASM

extrn           outhxw:near             ; prints hex word in ax
extrn           outhxb:near             ;prints hex byte in al

extrn           pstrng:near             ; prints out string

                call    outhxb                 

                call    outhxb

                call    outhxb

                call    outhxb                 

                call    outhxb       

                call    outhxb                 

; On exit, each routine should:

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

        jz      read_err                ;no - get out.

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

; Output Regs:  AH = Status

;*      output:         AB_Secs, AB_dataseg, AB_dataoff, AB_head,

         call   outhxw

         call   outhxw

         call   outhxw

        if      DBG_AB_CNV_OUT

         call   outhxw

         call   outhxw

         call   outhxb

                call    outhxw       

         call   outhxb
Extract "OUT" from File CHGINT.ASM
Extract "OUT" from File FILL.ASM
Extract "OUT" from File LOAD_IRQ.ASM

extrn          outhxw:near                      ; prints hex word in ax
extrn          outhxb:near                      ; prints hex byte in al
extrn          outint:near                      ; prints integer in ax
extrn          outuns:near                      ; print unsigned integer in ax
extrn          outchr:near                      ; prints ascii char in al

extrn          pstrng:near                      ; prints out string

;------ data area for download routine ------

        out     pic_01,al
Extract "OUT" from File INT86.ASM
Extract "OUT" from File IRQ3SER.ASM

;                       - Find out who calls

;                                       - Get out requested functions

extrn          outhxw:near                   ; prints hex word in ax
extrn          outint:near                   ; prints integer in ax

extrn          pstrng:near                   ; prints out string

        push    ax                      ; find out who is calling

        out     pic_00,al

        out     StatusReg,al            ; the way to trigger a

        out     pic_00,al

        out     pic_00,al               ; interrupt controller

        cmp     ah,JFUNC_Max            ; out of range ?

;       inc     ah                      ; call this shared Wait_Amiga routine 
Extract "OUT" from File JI_HAN.ASM

extrn          outhxw:near                   ; prints hex word in ax
extrn          outuns:near                   ; prints decimal number in ax
extrn          outint:near                   ; prints integer in ax

extrn          pstrng:near                   ; prints out string

                call outhxw                       ; print the offset

                call outhxw                       ; print the entries

                call outint                       ; print interrupt #

                call outhxw                       ; print es

                call outhxw                       ; print di

        out     StatusReg,al                    ; trigger SYSINT on Amiga side

                call outuns

                call outuns
Extract "OUT" from File JI_EN.ASM

               out      dx,al

               out      dx,al
Extract "OUT" from File OUTDEC.ASM
TITLE   OUTDEC  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. 

;* Module: outdec    Entry: outint                   Type: Near           *

public  outint,outuns

extrn           outchr:near

outint       proc near

             jns    out1                ; was outp

outp:        push   ax

             call   outchr

             jmp    short out1

;* Module: outdec    Entry: outuns                   Type: Near           *

outuns        label near

out1:

out2:         div   bx

              jnz   out2

out3:         pop   ax

              call  outchr
              loop  out3

outint       endp
Extract "OUT" from File SERVICE2.ASM

extrn           outhxw:near                  ; prints hex word in ax
extrn           outhxb:near                  ; prints hex byte in al
extrn           outint:near                  ; prints integer in ax

extrn           pstrng:near                  ; prints out string

;       ES = Segment of assembly language routine to call when this service

;       DI = Offset of assembly language routine to call when this service

        mov     ax,WAIT_Timeout*18

                                                ;  and forget about error codes

        mov     ax,ALOAD_Timeout*18

        cmp     bx,ax                           ; timeout reached ?

        jmp     ErrID                           ; timeout error 

WaitS   proc    far                             ;* Routine will be called, if  

         call   outhxw                          ; print segment

         call   outhxw                          ; print offset

        call    debout

        call    debout

debout  proc    far

debout  endp
Extract "OUT" from File VAR.ASM
Extract "OUT" from File SERVICE1.ASM

extrn           outhxw:near                  ; prints hex word in ax
extrn           outhxb:near                  ; prints hex byte in al
extrn           outint:near                  ; prints integer in ax

extrn           pstrng:near                  ; prints out string

         call   outhxw                          ; print mem offset

;       just one call the FreeJRemember() routine at a later time to  

;       This routine accepts two Janus RememberKeys created by calls to 

;            ( procedure to really forget about all of the memory, including ) 

;       This routine allocates memory for you and records the details of 

;       This routine frees memory that had been allocated with a call 

         call   outhxw                          ; print mem offset

        pop     bx                              ; fall into Check routine
Extract "OUT" from File NEWSCROL.ASM

extrn          outhxw:near                   ; prints hex word in ax
extrn          outint:near                   ; prints integer in ax

extrn          pstrng:near                   ; prints out string

         call   outhxw

        out     StatusReg,al                    ; trigger SYSINT on Amiga side

        pop     bx                              ; fall into Check routine

        out     StatusReg,al                    ; trigger SYSINT on Amiga side

         call   outhxw

        out     pic_01,al
Extract "OUT" from File SCROLL.ASM

extrn          outhxw:near                   ; prints hex word in ax
extrn          outint:near                   ; prints integer in ax

extrn          pstrng:near                   ; prints out string

         call   outhxw

        out     StatusReg,al                    ; trigger SYSINT on Amiga side

        pop     bx                              ; fall into Check routine

        out     StatusReg,al                    ; trigger SYSINT on Amiga side

         call   outhxw

        out     pic_01,al
Extract "OUT" from File MEMRW.ASM

          cmp  bx,5                          ; out of range ?

          out  dx,al
Extract "OUT" from File HDPART.ASM

;      HDPART : This routine looks for partitions on attached harddisks,

extrn           outhxw:near

         call outhxw

;       SHOW :  PREPARES PARTITION PARAMETERS FOR PRINT OUT
Extract "OUT" from File HDINT.ASM

extrn     outhxw:near

         jae    no_output

         call   outhxw

         call   outhxw

         call   outhxw

         call   outhxw

no_output:

         call   outhxw

         call   outhxw                  ; print ES

         call   outhxw                  ; print DI

         call   outhxw                  ; print DS

         call   outhxw                  ; print SI
Extract "OUT" from File OUTHXW.ASM
TITLE   OUTHXW  -  COPYRIGHT (C) 1986 - 1988 Commodore Amiga Inc. 

;* Module: outhxw    Entry: outhxw                Type: Near              *

public    outhxw,outhxb,outchr,newline,pstrng

outhxw    proc near           ; print hex word in ax

          call outhxb

;* Module: outhxw    Entry: outhxb                Type: Near              *

outhxb:                       ; print hex byte in al

          call outhxn

outhxn:   add  al,'0'

          jbe  outchr

;* Module: outhxw    Entry: outchr                Type: Near              *

outchr:                       ; print ascii char in al
          if (video ge 1)     ; output on screen

          if (serial ge 1)    ; output on serial port

;* Module: outhxw    Entry: newline               Type: Near              *

          call outchr

          call outchr

;* Module: outhxw    Entry: pstrng                Type: Near              *

          call outchr

outhxw    endp
Extract "OUT" from File LOAD_386.ASM

extrn          outhxw:near                      ; prints hex word in ax
extrn          outhxb:near                      ; prints hex byte in al
extrn          outint:near                      ; prints integer in ax
extrn          outuns:near                      ; print unsigned integer in ax
extrn          outchr:near                      ; prints ascii char in al

extrn          pstrng:near                      ; prints out string

;------ data area for download routine ------

        out     dx,al

        out     dx,al

        out     dx,al

        out     dx,al

        out     dx,al

        out     pic_01,al
Extract "OUT" from File ABBLOCK.INC
Extract "OUT" from File ABEQU.INC

;* Debug switches for Autoboot File Open routine first_time

DBG_AB_FTEXITMSG        =       0       ;File opened ok, routine exits

DBG_AB_CNV_OUT          =       0       ;Exit from cnv_do 
Extract "OUT" from File ABMACROS.INC
Extract "OUT" from File ABVARS.INC
Extract "OUT" from File AUTOLOAD.INC

ALOAD_TimeOut           =   33  ; time [s] to wait for autoloaded service

WAIT_TimeOut            =  777  ; time [s] to wait for requested service
Extract "OUT" from File DEBUG.INC

infolevel               =       10      ; message output level 
video                   =       1       ; enable video output
serial                  =       0       ; enable serial output
Extract "OUT" from File EQU.INC
Extract "OUT" from File EQU_AT.INC
Extract "OUT" from File HANDLER.INC

;              routine and responds with error message on PC screen
Extract "OUT" from File HDPART.INC
Extract "OUT" from File MACROS.INC

; infolevel may be overwritten later in routine

          call  outhxw

          call  outint

          call  outchr

          call  outint
Extract "OUT" from File MES.INC
Extract "OUT" from File PRIVSERV.INC
Extract "OUT" from File VARS_EXT.INC
Extract "OUT" from File WORDS.INC
Extract "OUT" from File ABDATA.INC
Extract "OUT" from File DUMNUL.INC
Extract "OUT" from File MAPIT.C

FILE *fout;

        if (!(fout = fopen(fname, "wt"))) {

        fprintf(fout, "dummy_null db %ld dup ('a')\n", size);

        fclose(fout);
Extract "OUT" from File PADIT.C

FILE *fin, *fout;

                printf("usage: padit infile outfile\n");

        if (!(fout = fopen(argv[2], "wb"))) {
                printf("couldn't open %s for output\n", argv[2]);

        fwrite(buf, sizeof(buf), 1, fout);

        fclose(fout);
