Here is a starter for what now (as soon as changes are done) needs to be added
to --background-- or integrated with other nipc Autodocs:

The client side of a transaction not only fills in RequestData and
ReqDataLength, but also fills in ResponseData and RespDataLength (either
manually or with Tags passed to AllocateTransaction() ).  This effects
not only the client, but the server as well.  The server side will have
a response buffer of RespDataLength size allocated for it.  If the server
doesn't have that much information to return, it sets RespDataActual to
something less than RespDataLength and only that amount of data is returned.
RespDataActual should not be set higher than RespDataLength -- if a server
needs to indicate that there is more data in the response than fits within
the response buffer, it should set trans_Error to
ENVOYERR_INSUFFICIENT_RESPBUFF.

An exception to the normal handling of request and response buffers is made
when the client and server act on data in place.  A client initiates an
in-place transaction by setting ResponseData = RequestData and RespDataLength =
ReqDataLength.  The server will then not have a sererate response buffer
allocated for it but will have ResponseData set to point to RequestData.
If the server can't operate on data in place it should check to see whether
ResponseData and RequestData are equal and set trans_Error to
ENVOYERR_ILLEGAL_INPLACE.


--------------
The behavior is undocumented, but I believe that you don't send trans_Error
from the client to the server and that you initialize it to ENVOYERR_NOERROR
on the server side.  This has the effect that clients should never write to
trans_Error and the effect that servers don't need to initialize trans_Error.
If so, please document this behavior and double check to make sure that it
works the same for local as for remote (seems like an easy place to slip).

Does it get initialized to ENVOYERR_NOERROR on the client side as soon as
Do/BeginTransaction()?

-------------
Chrisg just came up with a damn good idea.  Instead of being void * (or APTR),
entities should be struct Entity *.  It is legal to use a pointer to an
undefined structure -- so make them call it Entity * but don't define struct
Entity.  This allows the compiler to do typechecking so that you don't
accidentally pass the wrong kind of pointer as an entity pointer.

-----------------
In article <21@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>
>A server may need to know whether the reply was received by the client and if
>not, why.  Making ReplyTransaction() return an error code seems like a
>good idea.

Yes, this would be nice in some cases, however:

Implementing something like this would require that the library ACK it's
ACK's, which is *BAD BAD BAD*.  A server should assume that ReplyTransaction
worked.  It should be the client's responsibility to retry a transaction that
appeared to fail after a timeout.  If a server absolutely needs to get data
to the client in an "active" mode, as opposed to a "passive" mode, the
server should send the data via DoTransaction or BeginTransaction, in which
case the client will reply once it has received the data.

-Ken


In article <25@tsx.commodore.com> kcd@tsx.commodore.com (Ken Dyke) writes:
>In article <21@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>>not, why.  Making ReplyTransaction() return an error code seems like a
>>good idea.
>Implementing something like this would require that the library ACK it's

I must not have read something closely enough.

I thought that our protocol provided guaranteed delivery both ways.  It's fine
that it doesn't, guess I was just confused.

Let's put a comment in the Autodoc for ReplyTransaction() and double-check to
make sure it is in --background-- and or other documentation of how to use
nipc.library.

In article <29@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>In article <25@tsx.commodore.com> kcd@tsx.commodore.com (Ken Dyke) writes:
>>In article <21@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>>>not, why.  Making ReplyTransaction() return an error code seems like a
>>>good idea.
>>Implementing something like this would require that the library ACK it's

This statement is actually wrong. :(  I was not making the distinction
between the lower level ACK's and the upper level AMP response packet. In
all fairness, both the request and response packet are each ACK'd by RDP.
But currently nipc.library doesn't use the ACK for the response for anything.
(Well, actually RDP uses it to know that the data was received okay, but
that's it. This information isn't provided to the upper levels of the library.)

>I must not have read something closely enough.
>
>I thought that our protocol provided guaranteed delivery both ways.  It's fine
>that it doesn't, guess I was just confused.

RDP *does* try to provide for reliable packet transfer.  The problem seems to
be that since ReplyTransaction doesn't have a return value, we are making it
the responsibility of the client to make sure it gets the data, even if that
means attempting the transaction again after a certain amount of time.

If we allow ReplyTransaction to return an error code, then ReplyTransaction
must block until it knows that the response made it to the client.  If some
kind of problem developed on the network in between the request and response,
the server would hang, possibly making it impossible for the server to respond
to other clients.  This of course implies that this particular server isn't
multithreaded and has one process per client.  If we require that servers who
might talk to multiple clients spawn off an extra process for each client,
than a ReplyTransaction that blocks would seem reasonable.

-Ken


In article <21@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>
>A server may need to know whether the reply was received by the client and if
>not, why.  Making ReplyTransaction() return an error code seems like a
>good idea.

 And have it Wait() until the data packet is returned?

 And even if the reply isn't received - what are you going to do?  You can't
resend a transaction that you've already replied to.

-Greg

--------------------------
In article <13@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>
>The Transaction structure is confusing to the programmer.  It is unclear
>what fields may be touched by the programmer, which may be read but should
>not be modified and whether some are completely private to nipc.library.
>Even those which I might conceivably read, for many I have no idea what goes
>there.
>
>You might add a --background-- autodoc for these things.

Most of the fields in the Transaction structure are similar to those found
in exec IORequest structures.  Any programmer that is capable of using
exec IO should have no problems understanding what is going on. nipc.h
pretty much explains what each structure member is for.

-Ken

---

In article <14@tsx.commodore.com> kcd@tsx.commodore.com (Ken Dyke) writes:
>Most of the fields in the Transaction structure are similar to those found
>in exec IORequest structures.  Any programmer that is capable of using
>exec IO should have no problems understanding what is going on. nipc.h
>pretty much explains what each structure member is for.

I don't have any problems with the fields that are the same as those in an
IORequest.  "Pretty much explains what each structure member is for" and
"Saves your ass a hell of a lot of work when a developer does something bizzare
and unexpected because you didn't say he couldn't but now you have to maintain
compatibility" are very different things.  It'll be much easier to do as you
go, while everything is still very fresh in your mind, than to try to account
for all of these things at the end.

May I touch the trans_Msg?  May I store things in unused fields of it?  Is
there anything useful to read in it?  Can I count on anything in it being used
in any particular way?

What does "server-proprietary" mean, exactly?

Do I need to clear trans_Error before calling nipc.library?

I assume that trans_Filler is for padding.  Is it reserved, or may I use it
for something?  If I may use it for something, does it get sent over the wire
like trans_Command?

May I read trans_SourceEntity/DestinationEntity?  Will you kill me if I write
into them (just because you say that they are "filled in by ipc.library"
doesn't necessarily mean that I may not).

May I read trans_Sequence?  May I count on it being used in any particular way?

-------
In article <18@tsx.commodore.com> dlarson@tsx.commodore.com () writes:
>In article <14@tsx.commodore.com> kcd@tsx.commodore.com (Ken Dyke) writes:
>>Most of the fields in the Transaction structure are similar to those found
>>in exec IORequest structures.  Any programmer that is capable of using
>>exec IO should have no problems understanding what is going on. nipc.h
>>pretty much explains what each structure member is for.
>
>I don't have any problems with the fields that are the same as those in an
>IORequest.  "Pretty much explains what each structure member is for" and
>"Saves your ass a hell of a lot of work when a developer does something bizzare
>and unexpected because you didn't say he couldn't but now you have to maintain
>compatibility" are very different things.  It'll be much easier to do as you
>go, while everything is still very fresh in your mind, than to try to account
>for all of these things at the end.
>
>May I touch the trans_Msg?  May I store things in unused fields of it?  Is
>there anything useful to read in it?  Can I count on anything in it being used
>in any particular way?
>

 WHAT?  You're not serious, are you?

 If you're serious, you should know better.  If you're not, don't play
devil's advocate right now.

>What does "server-proprietary" mean, exactly?

 The intent was to mean that this field is open for use for each server -
but that the field's meaning is limited ONLY to that server.  For instance,
putting a "100" in that field for a printer server may mean something
entirely different that putting "100" in the field for a filesystem
server.  Read up on the way that Exec IO allows individual devices that
require unique commands to be defined ONLY for that device.  The same
command numbers mean something different to each device.  (They all
share a set of standard commands, like CMD_WRITE, CMD_FLUSH, etc.  But
many have additional commands.)

>
>Do I need to clear trans_Error before calling nipc.library?

 No.  Like IO_ERROR, you needn't clear it.  If it's not cleared for you,
I goofed somewhere.

>
>I assume that trans_Filler is for padding.  Is it reserved, or may I use it
>for something?  If I may use it for something, does it get sent over the wire
>like trans_Command?

 Padding - and no, you may not use it for anything.  You're given the ability
to define a request data area of whatever length you wish - put your
data there - and don't mess with undocumented fields.  Sheesh.

>
>May I read trans_SourceEntity/DestinationEntity?  Will you kill me if I write
>into them (just because you say that they are "filled in by ipc.library"
>doesn't necessarily mean that I may not).

 Pardon me?

 What're you planning on filling them in WITH?

>
>May I read trans_Sequence?  May I count on it being used in any particular way?

 Yes - feel free.  Oh, and no - you can't count on it being used in any
particular way.  :')

 - Greg

