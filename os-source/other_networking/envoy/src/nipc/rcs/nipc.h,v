head     1.16;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.16
date     93.09.03.18.18.27;  author kcd;  state Exp;
branches ;
next     1.15;

1.15
date     93.09.03.17.43.56;  author kcd;  state Exp;
branches ;
next     1.14;

1.14
date     93.03.04.13.31.26;  author gregm;  state Exp;
branches ;
next     1.13;

1.13
date     93.03.03.11.55.41;  author kcd;  state Exp;
branches ;
next     1.12;

1.12
date     92.08.11.11.25.46;  author kcd;  state Exp;
branches ;
next     1.11;

1.11
date     92.06.25.16.45.28;  author kcd;  state Exp;
branches ;
next     1.10;

1.10
date     92.06.24.16.20.22;  author kcd;  state Exp;
branches ;
next     1.9;

1.9
date     92.06.09.15.10.58;  author gregm;  state Exp;
branches ;
next     1.8;

1.8
date     92.04.05.18.12.07;  author gregm;  state Exp;
branches ;
next     1.7;

1.7
date     92.03.27.11.56.50;  author gregm;  state Exp;
branches ;
next     1.6;

1.6
date     92.02.27.21.07.56;  author kcd;  state Exp;
branches ;
next     1.5;

1.5
date     92.02.26.21.36.55;  author kcd;  state Exp;
branches ;
next     1.4;

1.4
date     92.02.25.09.02.20;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     92.02.24.16.23.40;  author kcd;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.21.19.14.23;  author gregm;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.13.07.16;  author gregm;  state Exp;
branches ;
next     ;


desc
@Transaction struct and defines
@


1.16
log
@Minor changes
@
text
@#ifndef ENVOY_NIPC_H
#define ENVOY_NIPC_H
/*
**      $Id: nipc.h,v 1.15 93/09/03 17:43:56 kcd Exp Locker: kcd $
**
**      Tags, types and structures for the nipc.library.
**
**      (C) Copyright 1992 Commodore-Amiga, Inc.
**          All Rights Reserved
*/

#include <exec/types.h>
#include <exec/lists.h>
#include <exec/ports.h>
#include <utility/tagitem.h>


/* Tags for AllocTransactionA() */
#define TRN_Dummy (TAG_USER + 0xB1100)
#define TRN_AllocReqBuffer  (TRN_Dummy + 1)
#define TRN_AllocRespBuffer (TRN_Dummy + 2)
#define TRN_ReqDataNIPCBuff (TRN_Dummy + 3)
#define TRN_RespDataNIPCBuff (TRN_Dummy + 4)

/* Tags for CreateEntityA(), GetEntityAttrsA(), SetEntityAttrsA().
 * Refer to the autodocs for each function -- not all tags are
 * appropriate for each function!
 */
#define ENT_Dummy        (TAG_USER + 0xB1000)
#define ENT_Name         (ENT_Dummy + 1)
#define ENT_Public       (ENT_Dummy + 2)
#define ENT_Signal       (ENT_Dummy + 3)
#define ENT_AllocSignal  (ENT_Dummy + 4)
#define ENT_TimeoutLinks (ENT_Dummy + 5)
#define ENT_NameLength   (ENT_Dummy + 6)
#define ENT_Release      (ENT_Dummy + 7)
#define ENT_Inherit      (ENT_Dummy + 8)


struct Transaction
{
   struct Message trans_Msg;            /* Messages are used as the carrier for local transactions */
   struct Entity *trans_SourceEntity;   /* Filled in by nipc.library */
   struct Entity *trans_DestinationEntity;
                                        /* Filled in by nipc.library */
   UBYTE          trans_Command;        /* A field that's server-proprietary */
   UBYTE          trans_Type;           /* Req, Response */
   ULONG          trans_Error;          /* any error values */
   ULONG          trans_Flags;          /* see below */
   ULONG          trans_Sequence;       /* Used by the library to maintain sequences (nipc internal) */
   APTR           trans_RequestData;    /* ptr to request data buffer */
   ULONG          trans_ReqDataLength;  /* The length of data in the above buffer */
   ULONG          trans_ReqDataActual;  /* The length of valid data in the request buffer */
   APTR           trans_ResponseData;   /* ptr to response data buffer */
   ULONG          trans_RespDataLength; /* The size of the buffer above */
   ULONG          trans_RespDataActual; /* When data is returned in a response, the amount of the buffer used */
   UWORD          trans_Timeout;        /* Number of seconds before a timeout */
   UWORD	  trans_Reserved;	/* Reserved for future use */
   ULONG	  trans_ClientPrivate;	/* Client specific user data field */
   ULONG	  trans_ServerPrivate;	/* Server specific user data field */
};

/*
** Note: The trans_ClientPrivate and trans_ServerPrivate fields do NOT get
** transmitted over the network, and are there for your convenience.  Clients
** should never depend on or modify trans_ServerPrivate, and servers should never
** depend on or modify trans_ClientPrivate.
*/

/* Types */
#define TYPE_REQUEST          0     /* Waiting to be serviced */
#define TYPE_RESPONSE         1     /* Has been serviced */
#define TYPE_SERVICING        2     /* Currently being serviced */

/* Flags */
#define TRANSF_REQBUFFERALLOC  1    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSF_RESPBUFFERALLOC 2    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSF_NOWAIT          4    /* BeginTransaction isn't allowed to Wait() on this transaction */
#define TRANSF_REQUESTTABLE    8    /* The RequestData for this transaction is a table ptr */
#define TRANSF_RESPONSETABLE  16    /* The ResponseData for this transaction is a table ptr */
#define TRANSF_REQNIPCBUFF    32    /* trans_RequestData points to a struct NIPCBuff */
#define TRANSF_RESPNIPCBUFF   64    /* trans_ResponseData points to a struct NIPCBuff */

#define TRANSB_REQBUFFERALLOC  0    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSB_RESPBUFFERALLOC 1    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSB_NOWAIT          2    /* BeginTransaction isn't allowed to Wait() on this transaction */
#define TRANSB_REQUESTTABLE    3    /* The RequestData for this transaction is a table ptr */
#define TRANSB_RESPONSETABLE   4    /* The ResponseData for this transaction is a table ptr */
#define TRANSB_REQNIPCBUFF     5    /* trans_RequestData points to a struct NIPCBuff */
#define TRANSB_RESPNIPCBUFF    6    /* trans_ResponseData points to a struct NIPCBuff */

struct NIPCBuff
{
    struct MinNode	nbuff_Link;
    struct MinList	nbuff_Entries;

    /* Anything below here is NIPC Private! Do NOT touch */
};

struct NIPCBuffEntry
{
    struct MinNode	nbe_Link;
    ULONG		nbe_Offset;
    ULONG		nbe_Length;
    ULONG		nbe_PhysicalLength;
    UBYTE	       *nbe_Data;

    /* Anything below here is NIPC Private! Do NOT touch */
};

/* Currently defined tags for NIPCInquery() */

#define QUERY_IPADDR            (TAG_USER + 0x2000)     /* Get machine's IP address (Not guranteed to be supported) */
#define MATCH_IPADDR            (TAG_USER + 0x2001)     /* Answer if ti_Data == Machine's IP address */

#define QUERY_REALMS            (TAG_USER + 0x2002)     /* Get names of all known realms */
#define MATCH_REALM             (TAG_USER + 0x2003)     /* Answer if machine's realm = ti_Data */

#define QUERY_HOSTNAME          (TAG_USER + 0x2004)     /* Get hostname */
#define MATCH_HOSTNAME          (TAG_USER + 0x2005)     /* Answer if hostname = ti_Data */

#define QUERY_SERVICE           (TAG_USER + 0x2006)     /* Get list of services */
#define MATCH_SERVICE           (TAG_USER + 0x2007)     /* Answer if service in ti_Data is available */

#define QUERY_ENTITY            (TAG_USER + 0x2008)     /* Get list of entities */
#define MATCH_ENTITY            (TAG_USER + 0x2009)     /* Answer if entity in ti_Data is available */

#define QUERY_OWNER             (TAG_USER + 0x200A)     /* Get machines's owner */
#define MATCH_OWNER             (TAG_USER + 0x200B)     /* Answer if owner = ti_Data */

#define QUERY_MACHDESC          (TAG_USER + 0x200C)     /* For future use, currently ignored */
#define MATCH_MACHDESC          (TAG_USER + 0x200D)     /* For future use, currently ignored */

#define QUERY_ATTNFLAGS         (TAG_USER + 0x200E)     /* Get ExecBase->AttnFlags */
#define MATCH_ATTNFLAGS         (TAG_USER + 0x200F)     /* Answer if (ti_Data & ExecBase->AttnFlags) */

/* QUERY LIBVERSION and MATCH_LIBVERSION are not yet implemented */
#define QUERY_LIBVERSION        (TAG_USER + 0x2010)     /* Get a specific library version number (see nipc.library autodocs) */
#define MATCH_LIBVERSION        (TAG_USER + 0x2011)     /* Answer if specific library version >= ti_Data */
/* QUERY LIBVERSION and MATCH_LIBVERSION are not yet implemented */

#define QUERY_CHIPREVBITS       (TAG_USER + 0x2012)     /* Get GfxBase->ChipRevBits */
#define MATCH_CHIPREVBITS       (TAG_USER + 0x2013)     /* Answer if (ti_Data & GfxBase->ChipRevBits) */

#define QUERY_MAXFASTMEM        (TAG_USER + 0x2014)     /* Get amount of Fast ram on a system */
#define MATCH_MAXFASTMEM        (TAG_USER + 0x2015)     /* Answer if Maximum Fast ram >= ti_Data */

#define QUERY_AVAILFASTMEM      (TAG_USER + 0x2016)     /* Get amount of available fast mem */
#define MATCH_AVAILFASTMEM      (TAG_USER + 0x2017)     /* Answer if Available Fast ram >= ti_Data */

#define QUERY_MAXCHIPMEM        (TAG_USER + 0x2018)     /* Get amount if Chip ram on a system */
#define MATCH_MAXCHIPMEM        (TAG_USER + 0x2019)     /* Answer if Maximum Chip ram >= ti_Data */

#define QUERY_AVAILCHIPMEM      (TAG_USER + 0x2020)     /* Get amount of available Chip ram */
#define MATCH_AVAILCHIPMEM      (TAG_USER + 0x2021)     /* Answer if Available Chip ram >= ti_Data */

#define QUERY_KICKVERSION       (TAG_USER + 0x2022)     /* Get KickStart Version */
#define MATCH_KICKVERSION       (TAG_USER + 0x2023)     /* Answer if KickStart version >= ti_Data */

#define QUERY_WBVERSION         (TAG_USER + 0x2024)     /* Get Workbench Version */
#define MATCH_WBVERSION         (TAG_USER + 0x2025)     /* Answer if Workbench version >= ti_Data */

#define QUERY_NIPCVERSION       (TAG_USER + 0x2026)     /* Get nipc.library Version */
#define MATCH_NIPCVERSION       (TAG_USER + 0x2027)     /* Answer if nipc.library version >= ti_Data */

#endif /* ENVOY_NIPC_H */
@


1.15
log
@Added new Client and Server private fields to transactions, and addded public definitions of NIPCBuff and NIPCBuffEntry structures.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.14 93/03/04 13:31:26 gregm Exp Locker: kcd $
d43 1
a43 1
   struct Entity *trans_SourceEntity;   /* Filled in by ipc.library */
d45 1
a45 1
                                        /* Filled in by ipc.library */
d137 1
d140 1
@


1.14
log
@Added several new ENT_ tags for Get/SetEntityAttrs().
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.13 93/03/03 11:55:41 kcd Exp Locker: gregm $
d22 2
d41 1
a41 1
   {
d50 1
a50 1
   ULONG          trans_Sequence;       /* Used by the library to maintain sequences */
d58 4
a61 1
   };
d63 7
d81 2
d89 21
@


1.13
log
@Added new tags and added a bit of documentation.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.12 92/08/11 11:25:46 kcd Exp Locker: kcd $
d18 1
d23 13
a35 5
#define ENT_Dummy (TAG_USER + 0xB1000)
#define ENT_Name        (ENT_Dummy + 1)
#define ENT_Public      (ENT_Dummy + 2)
#define ENT_Signal      (ENT_Dummy + 3)
#define ENT_AllocSignal (ENT_Dummy + 4)
a37 1

d78 2
a79 2
#define QUERY_IPADDR		(TAG_USER + 0x2000)	/* Get machine's IP address (Not guranteed to be supported) */
#define MATCH_IPADDR		(TAG_USER + 0x2001)	/* Answer if ti_Data == Machine's IP address */
d81 44
a124 44
#define QUERY_REALMS		(TAG_USER + 0x2002)	/* Get names of all known realms */
#define MATCH_REALM		(TAG_USER + 0x2003)	/* Answer if machine's realm = ti_Data */

#define QUERY_HOSTNAME		(TAG_USER + 0x2004)	/* Get hostname */
#define MATCH_HOSTNAME		(TAG_USER + 0x2005)	/* Answer if hostname = ti_Data */

#define QUERY_SERVICE		(TAG_USER + 0x2006)	/* Get list of services */
#define MATCH_SERVICE		(TAG_USER + 0x2007)	/* Answer if service in ti_Data is available */

#define QUERY_ENTITY		(TAG_USER + 0x2008)	/* Get list of entities */
#define MATCH_ENTITY		(TAG_USER + 0x2009)	/* Answer if entity in ti_Data is available */

#define QUERY_OWNER		(TAG_USER + 0x200A)	/* Get machines's owner */
#define MATCH_OWNER		(TAG_USER + 0x200B)	/* Answer if owner = ti_Data */

#define QUERY_MACHDESC		(TAG_USER + 0x200C)	/* For future use, currently ignored */
#define MATCH_MACHDESC		(TAG_USER + 0x200D)	/* For future use, currently ignored */

#define QUERY_ATTNFLAGS		(TAG_USER + 0x200E)	/* Get ExecBase->AttnFlags */
#define MATCH_ATTNFLAGS		(TAG_USER + 0x200F)	/* Answer if (ti_Data & ExecBase->AttnFlags) */

#define QUERY_LIBVERSION	(TAG_USER + 0x2010)	/* Get a specific library version number (see nipc.library autodocs) */
#define MATCH_LIBVERSION	(TAG_USER + 0x2011)	/* Answer if specific library version >= ti_Data */

#define QUERY_CHIPREVBITS	(TAG_USER + 0x2012)	/* Get GfxBase->ChipRevBits */
#define MATCH_CHIPREVBITS	(TAG_USER + 0x2013)	/* Answer if (ti_Data & GfxBase->ChipRevBits) */

#define QUERY_MAXFASTMEM	(TAG_USER + 0x2014)	/* Get amount of Fast ram on a system */
#define MATCH_MAXFASTMEM	(TAG_USER + 0x2015)	/* Answer if Maximum Fast ram >= ti_Data */

#define QUERY_AVAILFASTMEM	(TAG_USER + 0x2016)	/* Get amount of available fast mem */
#define MATCH_AVAILFASTMEM	(TAG_USER + 0x2017)	/* Answer if Available Fast ram >= ti_Data */

#define QUERY_MAXCHIPMEM	(TAG_USER + 0x2018)	/* Get amount if Chip ram on a system */
#define MATCH_MAXCHIPMEM	(TAG_USER + 0x2019)	/* Answer if Maximum Chip ram >= ti_Data */

#define QUERY_AVAILCHIPMEM	(TAG_USER + 0x2020)	/* Get amount of available Chip ram */
#define MATCH_AVAILCHIPMEM	(TAG_USER + 0x2021)	/* Answer if Available Chip ram >= ti_Data */

#define QUERY_KICKVERSION	(TAG_USER + 0x2022)	/* Get KickStart Version */
#define MATCH_KICKVERSION	(TAG_USER + 0x2023)	/* Answer if KickStart version >= ti_Data */

#define QUERY_WBVERSION		(TAG_USER + 0x2024)	/* Get Workbench Version */
#define MATCH_WBVERSION		(TAG_USER + 0x2025)	/* Answer if Workbench version >= ti_Data */
d126 2
a127 2
#define QUERY_NIPCVERSION	(TAG_USER + 0x2026)	/* Get nipc.library Version */
#define MATCH_NIPCVERSION	(TAG_USER + 0x2027)	/* Answer if nipc.library version >= ti_Data */
@


1.12
log
@Added mucho query types.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.11 92/06/25 16:45:28 kcd Exp Locker: kcd $
d70 2
a71 2
#define QUERY_IPADDR		(TAG_USER + 0x2000)
#define MATCH_IPADDR		(TAG_USER + 0x2001)
d73 44
a116 41
#define QUERY_REALMS		(TAG_USER + 0x2002)
#define MATCH_REALM		(TAG_USER + 0x2003)

#define QUERY_HOSTNAME		(TAG_USER + 0x2004)
#define MATCH_HOSTNAME		(TAG_USER + 0x2005)

#define QUERY_SERVICE		(TAG_USER + 0x2006)
#define MATCH_SERVICE		(TAG_USER + 0x2007)

#define QUERY_ENTITY		(TAG_USER + 0x2008)
#define MATCH_ENTITY		(TAG_USER + 0x2009)

#define QUERY_OWNER		(TAG_USER + 0x200A)
#define MATCH_OWNER		(TAG_USER + 0x200B)

#define QUERY_MACHDESC		(TAG_USER + 0x200C)
#define MATCH_MACHDESC		(TAG_USER + 0x200D)

#define QUERY_ATTNFLAGS		(TAG_USER + 0x200E)
#define MATCH_ATTNFLAGS		(TAG_USER + 0x200F)

#define QUERY_LIBVERSION	(TAG_USER + 0x2010)
#define MATCH_LIBVERSION	(TAG_USER + 0x2011)

#define QUERY_CHIPREVBITS	(TAG_USER + 0x2012)
#define MATCH_CHIPREVBITS	(TAG_USER + 0x2013)

#define QUERY_MAXFASTMEM	(TAG_USER + 0x2014)
#define MATCH_MAXFASTMEM	(TAG_USER + 0x2015)

#define QUERY_AVAILFASTMEM	(TAG_USER + 0x2016)
#define MATCH_AVAILFASTMEM	(TAG_USER + 0x2017)

#define QUERY_MAXCHIPMEM	(TAG_USER + 0x2018)
#define MATCH_MAXCHIPMEM	(TAG_USER + 0x2019)

#define QUERY_AVAILCHIPMEM	(TAG_USER + 0x2020)
#define MATCH_AVAILCHIPMEM	(TAG_USER + 0x2021)

#define QUERY_KICKVERSION	(TAG_USER + 0x2022)
#define MATCH_KICKVERSION	(TAG_USER + 0x2023)
d118 2
a119 2
#define QUERY_WBVERSION		(TAG_USER + 0x2024)
#define MATCH_WBVERSION		(TAG_USER + 0x2025)
a121 1

@


1.11
log
@Add the new Tag defines for the name resolution stuff.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.10 92/06/24 16:20:22 kcd Exp Locker: kcd $
d91 2
a92 2
#define QUERY_SYSINFO		(TAG_USER + 0x200E)
#define MATCH_SYSINFO		(TAG_USER + 0x200F)
d97 20
@


1.10
log
@Fixed problem with stuff following the trailing #endif.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.9 92/06/09 15:10:58 gregm Exp Locker: kcd $
d67 30
@


1.9
log
@references to 'appn' now 'envoy'
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.8 92/04/05 18:12:07 gregm Exp Locker: gregm $
d68 1
a68 1
#endif ENVOY_NIPC_H
@


1.8
log
@Added some trans flag definitions.
@
text
@d1 2
a2 2
#ifndef APPN_NIPC_H
#define APPN_NIPC_H
d4 1
a4 1
**      $Id: nipc.h,v 1.7 92/03/27 11:56:50 gregm Exp Locker: gregm $
d68 1
a68 1
#endif APPN_NIPC_H
@


1.7
log
@Changed void *'s to struct Entity *'s, and UBYTE *'s to APTR's. 
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.6 92/02/27 21:07:56 kcd Exp Locker: gregm $
d59 2
d65 2
@


1.6
log
@New formatting.  Minor changes.
@
text
@d4 1
a4 1
**      $Id: nipc.h,v 1.5 92/02/26 21:36:55 kcd Exp $
d33 2
a34 2
   void          *trans_SourceEntity;   /* Filled in by ipc.library */
   void          *trans_DestinationEntity;
a36 1
   UBYTE          trans_Error;          /* any error values */
d38 1
a38 1
   UBYTE          trans_Filler;
d41 1
a41 1
   UBYTE         *trans_RequestData;    /* ptr to request data buffer */
d43 2
a44 1
   UBYTE         *trans_ResponseData;   /* ptr to response data buffer */
d47 1
d64 1
a64 6
/* Transaction SYSTEM errors */

#define TERROR_NOERROR              0  /* No error */
#define TERROR_ABORTED              1  /* AbortIO()'d. */
#define TERROR_CANTDELIVER          2  /* nipc.library has given up on delivering this transaction req */
#define TERROR_ABOUTTOWAIT          3  /* BeginTransaction was about to Wait() */
a65 1
#endif APPN_NIPC_H
@


1.5
log
@Slight modifications to header.
@
text
@d4 1
a4 1
**      $Id$
d14 1
@


1.4
log
@prettied up (I had it out to play with to get an include sandwich --
appn:include/appn did not have the latest version...)
@
text
@d4 1
d6 1
a6 1
**  $Id$
d8 2
a9 1
**  Tags, types and structures for the nipc.library.
d11 1
@


1.3
log
@Added include sandwich.
@
text
@d4 5
a8 5
 *
 * $Header: APPN:src/nipc/RCS/nipc.h,v 1.2 92/02/21 19:14:23 gregm Exp $
 *
 */

d65 2
a66 1
#endif
@


1.2
log
@Added the Entity tags, made the transaction tags mixed case.
@
text
@d1 2
a2 1

d5 1
a5 1
 * $Header: APPN:src/nipc/RCS/nipc.h,v 1.1 92/02/13 13:07:16 gregm Exp Locker: gregm $
d65 1
a65 1

@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Header$
d14 10
a23 2
#define TRN_ALLOCREQBUFFER  (TRN_Dummy + 1)
#define TRN_ALLOCRESPBUFFER (TRN_Dummy + 2)
@
