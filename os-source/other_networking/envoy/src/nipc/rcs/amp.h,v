head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     92.02.21.19.13.54;  author gregm;  state Exp;
branches ;
next     1.3;

1.3
date     92.02.17.09.51.11;  author gregm;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.13.11.53.37;  author gregm;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.10.08.37;  author gregm;  state Exp;
branches ;
next     ;


desc
@API structures and defines
@


1.4
log
@Delete Entity tags - they're now in nipc.h
@
text
@
#include "nipc.h"

#define RESOLVERPORT 1        /* RDP port # for the entity name resolver */

struct Entity
   {
   struct MsgPort         entity_Port;         /* Message port */
   ULONG                  entity_Flags;        /* See below */
   struct SignalSemaphore entity_linksema;     /* link semaphore */
   struct MinList         entity_linklist;     /* All link entities to this entity */
   struct SignalSemaphore entity_transsema;    /* semaphore for below */
   struct MinList         entity_translist;    /* transactions that've been sent from this entity */
   struct Entity         *entity_owner;        /* Filled in only if this is a link */
   struct RDPConnection  *entity_connection;   /* The connection for this entity */
   char                  *entity_linkname;     /* hostname on which the entity that this link represents actually exists */
   struct MinList         entity_Partials;     /* Pieces of transmitted transactions, while they're assembled */
   };

/* Entity flags */
#define ENTF_PUBLIC 1            /* Set if this is a public port */
#define ENTB_PUBLIC 0
#define ENTF_ALLOCSIGNAL 2       /* Set if CreateEntity allocated a signal bit for this port */
#define ENTB_ALLOCSIGNAL 1
#define ENTF_LINK        4       /* Set if this is a link to an external entity, rather than a
                                  * local one */
#define ENTB_LINK        2       /* (From FindEntity rather than CreateEntity) */

 struct nameentry
   {
   struct MinNode ne_link;
   char           ne_name[80];
   ULONG          ne_Address;
   };

 struct NameRequest
   {
   char           nr_Name[80];         /* Name to find */
   char           nr_FromName[80];     /* Name of entity doing the finding .. */
   char           nr_FromHost[80];     /* Name of the machine on which the from entity exists */
   };

 struct NameReply
   {
   UWORD          nr_PortNumber;
   };


 struct RequestPacket
   {
   UBYTE          reqpack_Command;  /* From trans_Command */
   UBYTE          reqpack_Flags;
   UWORD          reqpack_Segment;  /* Segment number */
   ULONG          reqpack_Sequence;
   ULONG          reqpack_ResponseDataSize;
   ULONG          reqpack_DataLength;
   /* ... followed by DataLength bytes of data */
   };

#define REQFLAG_LASTSEGMENT 1
#define RESFLAG_LASTSEGMENT 1

 struct ResponsePacket
   {
   UBYTE          respack_Error;       /* Non NIPC error values - if the operation couldn't be completed */
   UBYTE          respack_Flags;
   UWORD          respack_Segment;
   ULONG          respack_Sequence;
   ULONG          respack_DataLength;  /* amount of response data */
   /* ... followed by DataLength bytes of data */
   };

@


1.3
log
@Made changes associated with packet fragmentation.
@
text
@a5 6
#define ENT_Dummy (TAG_USER + 0xB1000)
#define ENT_Name        (ENT_Dummy + 1)
#define ENT_Public      (ENT_Dummy + 2)
#define ENT_Signal      (ENT_Dummy + 3)
#define ENT_AllocSignal (ENT_Dummy + 4)

@


1.2
log
@Split the Transaction includes into nipc.h

@
text
@d23 1
d58 2
a59 1
   UBYTE          reqpack_Filler;
d66 3
d71 3
a73 2
   UBYTE          respack_Error;    /* Non NIPC error values - if the operation couldn't be completed */
   UBYTE          respack_Filler;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#include <utility/tagitem.h>
a11 4
#define TRN_Dummy (TAG_USER + 0xB1100)
#define TRN_ALLOCREQBUFFER  (TRN_Dummy + 1)
#define TRN_ALLOCRESPBUFFER (TRN_Dummy + 2)

a33 41
struct Transaction
   {
   struct Message trans_Msg;            /* Messages are used as the carrier for local transactions */
   void          *trans_SourceEntity;   /* Filled in by ipc.library */
   void          *trans_DestinationEntity;
                                        /* Filled in by ipc.library */
   UBYTE          trans_Command;        /* A field that's server-proprietary */
   UBYTE          trans_Error;          /* any error values */
   UBYTE          trans_Type;           /* Req, Response */
   UBYTE          trans_Filler;
   ULONG          trans_Flags;          /* see below */
   ULONG          trans_Sequence;       /* Used by the library to maintain sequences */
   UBYTE         *trans_RequestData;    /* ptr to request data buffer */
   ULONG          trans_ReqDataLength;  /* The length of data in the above buffer */
   UBYTE         *trans_ResponseData;   /* ptr to response data buffer */
   ULONG          trans_RespDataLength; /* The size of the buffer above */
   ULONG          trans_RespDataActual; /* When data is returned in a response, the amount of the buffer used */
   };

/* Types */
#define TYPE_REQUEST          0     /* Waiting to be serviced */
#define TYPE_RESPONSE         1     /* Has been serviced */
#define TYPE_SERVICING        2     /* Currently being serviced */

/* Flags */
#define TRANSF_REQBUFFERALLOC  1    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSF_RESPBUFFERALLOC 2    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSF_NOWAIT          4    /* BeginTransaction isn't allowed to Wait() on this transaction */

#define TRANSB_REQBUFFERALLOC  0    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSB_RESPBUFFERALLOC 1    /* set if FreeTransaction is responsible for freeing the buffer */
#define TRANSB_NOWAIT          2    /* BeginTransaction isn't allowed to Wait() on this transaction */


/* Errors */
#define TERR_OK;                    /* No errors */
#define TERR_NO_DESTINATION;        /* Couldn't find the destination entity on the remote machine */
#define TERR_TIMEOUT;               /* Gave up trying to resend request w/o receiving a response */



a72 5
/* Transaction SYSTEM errors */

#define TERROR_ABORTED              1  /* AbortIO()'d. */
#define TERROR_CANTDELIVER          2  /* nipc.library has given up on delivering this transaction req */
#define TERROR_ABOUTTOWAIT          3  /* BeginTransaction was about to Wait() */
@
