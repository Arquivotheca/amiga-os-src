head     1.12;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.12
date     92.12.16.14.49.00;  author kcd;  state Exp;
branches ;
next     1.11;

1.11
date     92.11.02.14.10.14;  author kcd;  state Exp;
branches ;
next     1.10;

1.10
date     92.07.13.17.42.07;  author kcd;  state Exp;
branches ;
next     1.9;

1.9
date     92.06.09.15.12.55;  author gregm;  state Exp;
branches ;
next     1.8;

1.8
date     92.05.04.11.07.55;  author kcd;  state Exp;
branches ;
next     1.7;

1.7
date     92.04.12.00.56.03;  author kcd;  state Exp;
branches ;
next     1.6;

1.6
date     92.04.05.15.48.53;  author kcd;  state Exp;
branches ;
next     1.5;

1.5
date     92.03.27.11.57.38;  author gregm;  state Exp;
branches ;
next     1.4;

1.4
date     92.03.23.10.27.02;  author gregm;  state Exp;
branches ;
next     1.3;

1.3
date     92.03.14.14.03.53;  author gregm;  state Exp;
branches ;
next     1.2;

1.2
date     92.03.06.18.09.13;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.03.04.16.53.41;  author gregm;  state Exp;
branches ;
next     ;


desc
@Externals for globally referenced data items.
@


1.12
log
@Fixed path for the sana2 include file.
@
text
@
#ifndef NIPCEXTERNS
#define NIPCEXTERNS

#include <exec/types.h>
#include <exec/libraries.h>
#include <dos/dos.h>
#include <devices/sana2.h>
#include "nipcbase.h"
#include "nipcinternal.h"
#include <envoy/errors.h>
#include <devices/timer.h>
#include <exec/io.h>
#include <utility/tagitem.h>
#include <dos.h>

#undef IsListEmpty
#define IsListEmpty(x) (!((x)->lh_Head->ln_Succ))

 #define NIPCBASE ((struct NBase *)getreg(REG_A6))

 #define gb       ((struct NBase *)getreg(REG_A6))
 #define SysBase        (NIPCBASE->nb_SysBase)
 #define DOSBase        (NIPCBASE->nb_DOSBase)
 #define UtilityBase    (NIPCBASE->nb_UtilityBase)
 #define IFFParseBase   (NIPCBASE->nb_IFFParseBase)
 #define TimerBase	(NIPCBASE->TimerDevice);
#endif
@


1.11
log
@added TimerBase definition.
@
text
@d8 1
a8 1
#include <sana2.h>
@


1.10
log
@Fixed a warning that SAS/C 6.x was bitching about.
@
text
@d27 1
a27 1

@


1.9
log
@references to 'appn' to 'envoy'.
@
text
@d17 1
a17 1
#undef IsListEmpty(x)
@


1.8
log
@Minor cleanups.  Added IFFParseBase.
@
text
@d11 1
a11 1
#include <appn/errors.h>
@


1.7
log
@Played with SysBase def.
@
text
@a19 2
 extern ULONG getnipcbase(VOID);

a22 1
/*  #define gb             (NIPCBASE->nb_gvars) */
d26 1
a26 2

// #define SysBase (*(void **)4L)
@


1.6
log
@Moved NIPC library base definitions to nipcbase.h
@
text
@d30 1
a30 1

@


1.5
log
@Added time counter.
@
text
@d9 1
a19 99
 struct StartMessage
 {
     struct Message sm_Msg;
     struct Library *sm_LibBase;
 };

struct NBase
{
    struct Library       LibNode;
    struct DOSBase      *nb_DOSBase;
    struct UtilityBase  *nb_UtilityBase;
    struct Library      *nb_SysBase;
    ULONG                nb_SegList;

 /* amp.c */
  struct MinList ANMPEntityList;
  struct SignalSemaphore ANMPELSemaphore;
  struct MinList HostList;
  struct SignalSemaphore HLSemaphore;
  ULONG TRANSSEQUENCE;
  struct RDPConnection *EntityResolver;

 /* rdp.c */
  struct ipproto RDPProto;        /* Struct that IP knows us by */
  UWORD RDPSequence;          /* Sequence # */
  UWORD RDPPorts;          /* Global port numberer */
  struct MinList RDPConnectionList;       /* Keeps track of connections */
  struct SignalSemaphore RDPCLSemaphore;  /* Keeps us from walking on others
                                          * toes */

 /* s2io.c */
  ULONG inbuffs, outbuffs;
  struct MsgPort *replyport;
  ULONG s2sigmask;
  struct List DeviceList;
  long notags[2];
  long copytags[6];
  struct MsgPort *CMDPort;        /* Both of these ports are for sharing
                                  * information with */
  struct MsgPort *DataPort;       /* inet.library */
  struct MinList ExchangeList;
  BOOL Switching;

 /* center_custom.c */
  BOOL jumpstart;
  struct SignalSemaphore openlock;
  struct Process *nipcprocess;
  ULONG shutdownbit;
  struct StartMessage smsg;
  UWORD  TimeCount;             /* A counter to count out 10 .1sec heartbeats */

 /* ip_out.c */
  UWORD IPIdentNumber;

 /* arp.c */
  struct MinList ARPBuffer;
  struct SignalSemaphore ARPBufferSemaphore;
  struct MinList ARPList;

 /* icmp.c */
  struct ipproto icmpproto;

 /* monitor.c */
  struct NIPCMonitorInfo MonitorInfo;

 /* resolver.c */
  struct SignalSemaphore HostNamesLock;
  struct SignalSemaphore RequestLock;
  struct SignalSemaphore DNSNamesLock;
  struct MinList SimpleNames;
  struct MinList RequestList;
  struct MinList DNSNames;
  struct UDPConnection *SimpleNamePort;
  struct MsgPort *ResolverPort;
  struct MsgPort *DNSPort;
  ULONG resolversigmask;
  UBYTE ResID;
  UBYTE somepadding;

 /* route.c */
  struct NIPCRouteInfo RouteInfo;

 /* udp.c */
  struct ipproto UDPProto;
  struct MinList UDPConnectionList;
  struct SignalSemaphore UDPCLSemaphore;
  UWORD UDPPorts;

 /* timer.c */
  struct MsgPort *timerport;
  struct timerequest *treq;
  ULONG timersigmask;

 /* ip_in.c */
  struct MinList ProtocolList;

};


a29 80
 struct Globals
 {

 /* amp.c */
  struct MinList ANMPEntityList;
  struct SignalSemaphore ANMPELSemaphore;
  struct MinList HostList;
  struct SignalSemaphore HLSemaphore;
  ULONG TRANSSEQUENCE;
  struct RDPConnection *EntityResolver;

 /* rdp.c */
  struct ipproto RDPProto;        /* Struct that IP knows us by */
  UWORD RDPSequence;          /* Sequence # */
  UWORD RDPPorts;          /* Global port numberer */
  struct MinList RDPConnectionList;       /* Keeps track of connections */
  struct SignalSemaphore RDPCLSemaphore;  /* Keeps us from walking on others
                                          * toes */

 /* s2io.c */
  ULONG inbuffs, outbuffs;
  struct MsgPort *replyport;
  ULONG s2sigmask;
  struct List DeviceList;
  long notags[2];
  long copytags[6];
  struct MsgPort *CMDPort;        /* Both of these ports are for sharing
                                  * information with */
  struct MsgPort *DataPort;       /* inet.library */
  struct MinList ExchangeList;
  BOOL Switching;

 /* center_custom.c */
  BOOL jumpstart;
  struct SignalSemaphore openlock;
  struct Process *nipcprocess;
  struct StartMessage smsg;
  ULONG shutdownbit;

 /* ip_out.c */
  UWORD IPIdentNumber;

 /* arp.c */
  struct MinList ARPBuffer;
  struct SignalSemaphore ARPBufferSemaphore;
  struct MinList ARPList;

 /* icmp.c */
  struct ipproto icmpproto;

 /* monitor.c */
  struct NIPCMonitorInfo MonitorInfo;

 /* resolver.c */
  struct SignalSemaphore HostNamesLock;
  struct SignalSemaphore RequestLock;
  struct SignalSemaphore DNSNamesLock;
  struct MinList SimpleNames;
  struct MinList RequestList;
  struct MinList DNSNames;
  struct UDPConnection *SimpleNamePort;
  struct MsgPort *ResolverPort;
  struct MsgPort *DNSPort;
  ULONG resolversigmask;
  UBYTE ResID;
  UBYTE somepadding;

 /* route.c */
  struct NIPCRouteInfo RouteInfo;

 /* udp.c */
  struct ipproto UDPProto;
  struct MinList UDPConnectionList;
  struct SignalSemaphore UDPCLSemaphore;
  UWORD UDPPorts;

 /* timer.c */
  struct MsgPort *timerport;
  struct timerequest *treq;
  ULONG timersigmask;
a30 3
 /* ip_in.c */
  struct MinList ProtocolList;
};
@


1.4
log
@The_voodoo_stuff_is_GONE!
@
text
@d68 1
@


1.3
log
@Added shutdown signal bit.
@
text
@d2 3
d6 1
d14 1
a14 81

extern APTR ACTB;
extern APTR ACFB;

/* amp.c */
extern struct MinList ANMPEntityList;
extern struct SignalSemaphore ANMPELSemaphore;
extern struct MinList HostList;
extern struct SignalSemaphore HLSemaphore;
extern ULONG TRANSSEQUENCE;
extern struct RDPConnection *EntityResolver;

/* rdp.c */
extern struct ipproto RDPProto;        /* Struct that IP knows us by */
extern UWORD RDPSequence;          /* Sequence # */
extern UWORD RDPPorts;          /* Global port numberer */
extern struct MinList RDPConnectionList;       /* Keeps track of connections */
extern struct SignalSemaphore RDPCLSemaphore;  /* Keeps us from walking on others
                                         * toes */

/* s2io.c */
extern ULONG inbuffs, outbuffs;
extern struct MsgPort *replyport;
extern ULONG s2sigmask;
extern struct List DeviceList;
extern long notags[];
extern long copytags[];
extern struct MsgPort *CMDPort;        /* Both of these ports are for sharing
                                 * information with */
extern struct MsgPort *DataPort;       /* inet.library */
extern struct MinList ExchangeList;
extern BOOL Switching;

/* center_custom.c */
extern struct Library *DOSBase;
extern struct Library *UtilityBase;
extern BOOL jumpstart;
extern struct SignalSemaphore openlock;
extern struct Process *nipcprocess;
extern ULONG shutdownbit;

/* ip_out.c */
extern UWORD IPIdentNumber;

/* arp.c */
extern struct MinList ARPBuffer;
extern struct SignalSemaphore ARPBufferSemaphore;
extern struct MinList ARPList;

/* icmp.c */
extern struct ipproto icmpproto;

/* monitor.c */
extern struct NIPCMonitorInfo MonitorInfo;

/* resolver.c */
extern struct SignalSemaphore HostNamesLock;
extern struct SignalSemaphore RequestLock;
extern struct SignalSemaphore DNSNamesLock;
extern struct MinList SimpleNames;
extern struct MinList RequestList;
extern struct MinList DNSNames;
extern struct UDPConnection *SimpleNamePort;
extern struct MsgPort *ResolverPort;
extern struct MsgPort *DNSPort;
extern ULONG resolversigmask;
extern UBYTE ResID;

/* route.c */
extern struct NIPCRouteInfo RouteInfo;

/* udp.c */
extern struct ipproto UDPProto;
extern struct MinList UDPConnectionList;
extern struct SignalSemaphore UDPCLSemaphore;
extern UWORD UDPPorts;

/* timer.c */
extern struct MsgPort *timerport;
extern struct timerequest *treq;
extern ULONG timersigmask;
d16 2
a17 2
/* ip_in.c */
extern struct MinList ProtocolList;
d19 192
d212 1
@


1.2
log
@Added DNS stuff.
..
@
text
@d49 1
@


1.1
log
@Initial revision
@
text
@d67 1
d70 1
d73 1
@
