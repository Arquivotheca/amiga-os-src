head     1.8;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @* @;


1.8
date     93.03.02.16.23.03;  author gregm;  state Exp;
branches ;
next     1.7;

1.7
date     92.11.02.14.13.07;  author kcd;  state Exp;
branches ;
next     1.6;

1.6
date     92.08.19.16.13.16;  author kcd;  state Exp;
branches ;
next     1.5;

1.5
date     92.04.05.18.15.26;  author kcd;  state Exp;
branches ;
next     1.4;

1.4
date     92.03.23.10.25.14;  author gregm;  state Exp;
branches ;
next     1.3;

1.3
date     92.02.27.20.55.43;  author kcd;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.18.12.53.13;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.10.06.57;  author gregm;  state Exp;
branches ;
next     ;


desc
@Assembly to decode the DeviceBase address for the new process
@


1.8
log
@Because I couldn't coerce SAS to generate a DIVU when I wanted, 
I wrote a teeny assembly routine to do it.
DivSASSucks().
@
text
@**
** $Header: ENVOY:src/nipc/RCS/nipcproc.asm,v 1.7 92/11/02 14:13:07 kcd Exp Locker: gregm $
**

         include "exec/types.i"
         include "exec/ports.i"
         include "exec/lists.i"
         include "dos/dosextens.i"
                 include "nipcbase.i"

         xref _AbsExecBase
         xref _LVOGetMsg
         xref _LVOReplyMsg
         xref _LVOWaitPort
         xref _LVOFindTask
         xref _LVOOpenLibrary
         xref _LVOCloseLibrary
         xref _LibraryProcess
         xref _LVOSDivMod32
         xref _LVOSMult32

         xdef @@EntryPoint
         xdef @@NewList
         xdef @@getnipcbase
         xdef @@stccpy
         xdef _makefastrand
         xdef _DivSASSucks

;         xdef __CXD33
;         xdef __CXM33

@@EntryPoint:
         movea.l  _AbsExecBase,a6
         suba.l   a1,a1
         jsr      _LVOFindTask(a6)
         movea.l  d0,a2
         lea.l    pr_MsgPort(a2),a0
         jsr      _LVOWaitPort(a6)
         lea.l    pr_MsgPort(a2),a0
         jsr      _LVOGetMsg(a6)
         movea.l  d0,a1
         movea.l  MN_SIZE(a1),a3
         movea.l  a3,a6
         jmp      _LibraryProcess

         cnop   0,4

@@NewList NEWLIST  a0
         rts

;-----------------------------------------------------------------------
; stccpy        - Smaller version of the copy routine...
;  a0 - destination
;  a1 - source
;  d0 - destination length

@@stccpy:        subq.l  #1,d0                   ; One less than given...
                bmi.s   2$                      ; if we end up with no bytes!
1$:             move.b  (a1)+,(a0)+             ; Copy the data...
                dbeq.s  d0,1$                   ; Loop for max or null...
                clr.b   -(a0)                   ; Make sure NULL terminated
2$:             rts

;__CXD33:
;               move.l  a6,-(sp)
;               move.l  nb_UtilityBase(a6),a6
;               jsr             _LVOSDivMod32(a6)
;               movea.l (sp)+,a6
;               rts

;__CXM33:
;               move.l  a6,-(sp)
;               move.l  nb_UtilityBase(a6),a6
;               jsr             _LVOSMult32(a6)
;               movea.l (sp)+,a6
;               rts

@@getnipcbase:
        move.l  a6,d0
        rts

_makefastrand:
        mulu.w  #$1efd,d0
        add.w   #$dff,d0
        rts

_DivSASSucks:
        divu    d1,d0
        ext.l   d0
        rts

        end
@


1.7
log
@Removed 32-bit math calls, and added random number generator.
@
text
@d2 1
a2 1
** $Header: APPN:src/nipc/RCS/nipcproc.asm,v 1.6 92/08/19 16:13:16 kcd Exp Locker: kcd $
d9 1
a9 1
		 include "nipcbase.i"
d27 1
d65 5
a69 5
;		move.l	a6,-(sp)
;		move.l	nb_UtilityBase(a6),a6
;		jsr		_LVOSDivMod32(a6)
;		movea.l	(sp)+,a6
;		rts
d72 5
a76 5
;		move.l	a6,-(sp)
;		move.l	nb_UtilityBase(a6),a6
;		jsr		_LVOSMult32(a6)
;		movea.l	(sp)+,a6
;		rts
d83 8
a90 3
	mulu.w	#$1efd,d0
	add.w	#$dff,d0
	rts
@


1.6
log
@Added assembly stccpy routine. Also changed _Newlist to @@Newlist and
updated the nipcinternal_protos.h file
@
text
@d2 1
a2 1
** $Header: APPN:src/nipc/RCS/nipcproc.asm,v 1.5 92/04/05 18:15:26 kcd Exp Locker: kcd $
d26 1
a26 2
         xdef __CXD33
         xdef __CXM33
d28 3
d63 13
a75 13
__CXD33:
		move.l	a6,-(sp)
		move.l	nb_UtilityBase(a6),a6
		jsr		_LVOSDivMod32(a6)
		movea.l	(sp)+,a6
		rts

__CXM33:
		move.l	a6,-(sp)
		move.l	nb_UtilityBase(a6),a6
		jsr		_LVOSMult32(a6)
		movea.l	(sp)+,a6
		rts
d81 4
a84 1

@


1.5
log
@Added Math routines to eliminated those pulled in from SAS
@
text
@d2 1
a2 1
** $Header: APPN:src/nipc/RCS/nipcproc.asm,v 1.4 92/03/23 10:25:14 gregm Exp Locker: kcd $
d23 1
a23 1
         xdef _NewList
d25 1
d44 2
a45 1
_NewList NEWLIST  a0
d47 13
@


1.4
log
@The_voodoo_stuff_is_GONE!
@
text
@d2 1
a2 1
** $Header: APPN:src/nipc/RCS/nipcproc.asm,v 1.3 92/02/27 20:55:43 kcd Exp Locker: gregm $
d9 1
d19 3
d25 2
d43 1
a43 2
_NewList movea.l  4(sp),a0
         NEWLIST  a0
d45 14
@


1.3
log
@New formatting.  Modified for use with registerized arguments.  Changed
for use with new include files.
@
text
@d2 1
a2 1
** $Header: APPN:src/libs/nipc.library/RCS/nipcproc.asm,v 1.2 92/02/18 12:53:13 kcd Exp $
d20 1
d40 5
@


1.2
log
@Modified startup mechanism to use a startup message.
@
text
@d2 1
a2 1
** $Header$
d7 1
d18 2
a19 2
         xref _kprintf
         xdef _EntryPoint
d21 1
a21 1
_EntryPoint:
d35 4
a38 1
dbmsg dc.b "EntryPoint. Msg: %lx  LibBase %lx",10,0
d40 2
@


1.1
log
@Initial revision
@
text
@d1 3
d5 4
d10 4
d17 1
d21 12
a32 12

         moveq.l  #7,d1
         add.l    d1,a0
         moveq.l  #0,d0
1$       lsl.l    #4,d2
         move.b   (a0),d0
         sub.l    #1,a0
         sub.b    #$30,d0
         or.l     d0,d2
         dbra     d1,1$
         move.l   d2,a6
         jmp   _LibraryProcess
d34 1
a35 1
         end
@
