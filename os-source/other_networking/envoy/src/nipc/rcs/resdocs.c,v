head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     92.08.31.10.51.01;  author gregm;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.25.13.58.53;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.05.04.11.02.36;  author kcd;  state Exp;
branches ;
next     ;


desc
@NetQueryA autodoc.
@


1.3
log
@Changed an old references of 'NetQuery' to 'NIPCQuery'.
Errr ... NIPCInquiryA.
@
text
@/****** nipc.library/NIPCInquiryA ************************************************
*
*   NAME
*       NIPCInquiryA -- Start a nipc network query
*
*   SYNOPSIS
*       success=NIPCInquiryA(hook, maxTime, maxResponses, tagList)
*       D0                   A0    D0       D1            A1
*
*       BOOL NIPCInquiryA(struct Hook *, ULONG, ULONG, APTR);
*
*       success=NIPCInquiry(hook, maxTime, maxResponses, firsttag, ...)
*
*       BOOL NIPCInquiry(struct Hook *, ULONG, ULONG, Tag, ...);
*
*   FUNCTION
*       Starts an NIPC Network Inquiry.  This function can be used to gather
*       data about a single machine, or to gather data for a number of
*       machines.  Multiple types of inquiries may be made using this
*       function.  Please see below for a description of the types of queries
*       and the types of information you may gather.
*
*       The Hook is called for each packet returned from hosts on the
*       network.  Depending on how specific your query is, you may or may
*       not get more than one packet.  When either maxTime seconds or
*       maxResponses packets have been received, your Hook will be called
*       with a null ParamPckt parameter.  If your Hook routine decides that
*       it has all of the information it needs, it may return FALSE.  This
*       will cause nipc.library to abort the NIPCInquirr() call.
*
*       When the Hook is called, the "Object" parameter will be a pointer to
*       the Task structure for the task or process that called the
*       NIPCInquiryA() function.  This is useful if you want to signal the
*       calling task when the query is complete.  The Hook "Message"
*       parameter will be a pointer to an array of TagItem structures that
*       contain the query response data from each responding host.
*
*       If the query fails for some reason, either due to illegal parameters
*       or to a lack of resources, NIPCInquiryA() will return FALSE. In this
*       case, your Hook function will never be called, so be careful.
*
*
*   INPUTS
*
*       hook(struct Hook *)     - Pointer to a Hook structure to be called for
*                                 each response.
*       maxTime(ULONG)          - The maximum number of seconds allowed for the
*                                 query.  This is the absolute maximum time
*                                 allowed.  Nipc.library does not add anything
*                                 to this value.
*       maxResponses(ULONG)     - The maximum number of responses that you will
*                                 accept from the network.
*       tagList(struct TagItem *) - Pointer to an array of TagItem structures.
*                                   below.
*
*   TAGS
*       The Tags currently defined for NIPCInquiryA() are:
*
*       QUERY_IPADDR (ULONG) - This tag is used for querying a machine for
*                              it's Network IP address.  Note:  This function
*                              is provided purely for diagnostic purposes. Do
*                              NOT depend on this tag being available in the
*                              future.
*       MATCH_IPADDR (ULONG) - Query a host with the specified IP address
*                              address.  Please see the note above regarding
*                              QUERY_IPADDR.
*       QUERY_REALMS (STRPTR) - Query a realmserver for the names of all known
*                               Realms.
*       MATCH_REALM (STRPTR) - Only query hosts that are in a specific Realm.
*       QUERY_HOSTNAME (STRPTR) - Query a host for it's name.
*       MATCH_HOSTNAME (STRPTR) - Only query the host with the specified
*                                 hostname.
*       QUERY_SERVICES (STRPTR) - Query a host or hosts for the names of all
*                                 services on each machine.
*       MATCH_SERVICE (STRPTR) - Only query hosts that have a specific service
*                                specified by the Tag.
*       QUERY_ENTITIES (STRPTR) - Query a host or hosts for the names of all
*                                 public entities on each machine.
*       MATCH_ENTITY (STRPTR) - Query only hosts that have a public entity
*                               specified by the Tag.
*       QUERY_OWNER (STRPTR) - This Tag is currently ignored.
*       MATCH_OWNER (STRPTR) - This Tag is currently ignored.
*       QUERY_ATTNFLAGS (ULONG) - This Tag allows you to find out what bits
*                                 are set in ExecBase->AttnFlags.
*       MATCH_ATTNFLAGS (ULONG) - Query only hosts that have the specified
*                                 bits set in ExecBase->AttnFlags.
*       QUERY_LIBVERSION (VOID) - This Tag is currently ignored.
*       MATCH_LIBVERSION (VOID) - This Tag is currently ignored.
*       QUERY_CHIPREVBITS (ULONG) - This Tag alllows you to find out what
*                                   bits are set in GfxBase->ChipRevBits0.
*                                   Note: Only the lower 8 bits of the ULONG
*                                   are used.
*       MATCH_CHIPREVBITS (ULONG) - Query only hosts that have the specified
*                                   bits set in GfxBase->ChipRevBits0.
*       QUERY_MAXFASTMEM (ULONG) - Query a machine for it's maximum amount
*                                  of FAST memory.
*       MATCH_MAXFASTMEM (ULONG) -  Query only hosts with at least the
*                                   specified amount of FAST memory.
*       QUERY_AVAILFASTMEM (ULONG) - Query a machine for the amount of free
*                                    FAST memory it has available.
*       MATCH_AVAILFASTMEM (ULONG) - Query only those hosts that have at
*                                    least the specified amount of FAST
*                                    memory available.
*       QUERY_MAXCHIPMEM (ULONG) - Query a machine for it's maximum amount
*                                  of installed CHIP memory.
*       MATCH_MAXCHIPMEM (ULONG) - Query only those hosts that have at least
*                                  the specified amount of CHIP ram installed.
*       QUERY_AVAILCHIPMEM (ULONG) - Query a machine for the amount of free
*                                    CHIP memory it has available.
*       MATCH_AVAILCHIPMEM (ULONG) - Query only those hosts that have at
*                                    least the specified amount of CHIP
*                                    memory available.
*       QUERY_KICKVERSION (ULONG) - Query a machine for the version and
*                                   revision of Kickstart it is running.
*       MATCH_KICKVERSION (ULONG) - Query only those hosts that are running
*                                   at least the specified version and revision
*                                   of Kickstart.
*       QUERY_WBVERSION (ULONG) - Query a machine for the version and
*                                 revision of Workbench it is running.
*       MATCH_WBVERSION (ULONG) - Query only those hosts that are running
*                                 at least the specified version and revision
*                                 of Workbench.
*   RESULT
*       None.
*
*   EXAMPLES
*
*       Query all hosts in realm "Software" for their Hostname, CPU type, Fast
*       memory installed and Kickstart version:
*
*       NIPCInquiry(myhook,             /* The hook to call */
*                   2,                  /* 2 seconds max */
*                   15,                 /* 15 responses max */
*                   MATCH_REALM,"Software",
*                   QUERY_HOSTNAME, 0,
*                   QUERY_ATTNFLAGS, 0,
*                   QUERY_MAXFASTMEM, 0,
*                   QUERY_KICKVERSION, 0,
*                   TAG_DONE);
*
*       The Hook would then get called for each host that responds.  An example
*       TagList passed to the hook might be:
*
*               MATCH_REALM,"Software",
*               QUERY_HOSTNAME,"A2500 Test".
*               QUERY_ATTNFLAGS, AFF_68010|AFF_68020|AFF_68881,
*               QUERY_MAXFASTMEM, 4194304,      (4 Megs)
*               QUERY_KICKVERSION, 2425007,     (VERSION <<16 | REVISION)
*               TAG_DONE
*
*       ---
*       Query a server for all services it has available
*
*       NIPCInquiry(myhook,
*                   2,
*                   2,
*                   MATCH_REALM,"Marketing",
*                   MATCH_HOSTNAME,"Market Server",
*                   QUERY_SERVICES,0,
*                   TAG_DONE)
*
*       A possible response might be:
*
*                   MATCH_REALM,"Marketing",
*                   MATCH_HOSTNAME,"Market Server",
*                   QUERY_SERVICES,"EnvoyFileSystem",
*                   QUERY_SERVICES,"EnvoyPrinterService",
*                   QUERY_SERVICES,"ConferenceService",
*                   TAG_DONE)
*
*
*   NOTES
*       This function is considered very low-level and is provided for network
*       diagnostic functions.  You should probably be using the functions
*       supplied in envoy.library to do network queries.  These will provide
*       "wrappers" for the most common types of queries.
*
*******************************************************************************
@


1.2
log
@Well, I FINALLY updated the docs file.
@
text
@d1 1
a1 1
/****** nipc.library/NetQueryA ************************************************
d17 24
a40 24
*	Starts an NIPC Network Inquiry.  This function can be used to gather
*	data about a single machine, or to gather data for a number of
*	machines.  Multiple types of inquiries may be made using this
*	function.  Please see below for a description of the types of queries
*	and the types of information you may gather.
*
*	The Hook is called for each packet returned from hosts on the
*	network.  Depending on how specific your query is, you may or may
*	not get more than one packet.  When either maxTime seconds or
*	maxResponses packets have been received, your Hook will be called
*	with a null ParamPckt parameter.  If your Hook routine decides that
*	it has all of the information it needs, it may return FALSE.  This
*	will cause nipc.library to abort the NIPCInquirr() call.
*
*	When the Hook is called, the "Object" parameter will be a pointer to
*	the Task structure for the task or process that called the
*	NIPCInquiryA() function.  This is useful if you want to signal the
*	calling task when the query is complete.  The Hook "Message"
*	parameter will be a pointer to an array of TagItem structures that
*	contain the query response data from each responding host.
*
*	If the query fails for some reason, either due to illegal parameters
*	or to a lack of resources, NIPCInquiryA() will return FALSE. In this
*	case, your Hook function will never be called, so be careful.
d45 8
a52 8
*	hook(struct Hook *)	- Pointer to a Hook structure to be called for
*				  each response.
*       maxTime(ULONG)		- The maximum number of seconds allowed for the
*				  query.  This is the absolute maximum time
*				  allowed.  Nipc.library does not add anything
*				  to this value.
*	maxResponses(ULONG)	- The maximum number of responses that you will
*				  accept from the network.
d54 1
a54 1
*				    below.
d59 64
a122 64
*	QUERY_IPADDR (ULONG) - This tag is used for querying a machine for
*			       it's Network IP address.  Note:  This function
*			       is provided purely for diagnostic purposes. Do
*			       NOT depend on this tag being available in the
*			       future.
*	MATCH_IPADDR (ULONG) - Query a host with the specified IP address
*			       address.  Please see the note above regarding
*			       QUERY_IPADDR.
*	QUERY_REALMS (STRPTR) - Query a realmserver for the names of all known
*				Realms.
*	MATCH_REALM (STRPTR) - Only query hosts that are in a specific Realm.
*	QUERY_HOSTNAME (STRPTR) - Query a host for it's name.
*	MATCH_HOSTNAME (STRPTR) - Only query the host with the specified
*				  hostname.
*	QUERY_SERVICES (STRPTR) - Query a host or hosts for the names of all
*				  services on each machine.
*	MATCH_SERVICE (STRPTR) - Only query hosts that have a specific service
*				 specified by the Tag.
*	QUERY_ENTITIES (STRPTR) - Query a host or hosts for the names of all
*				  public entities on each machine.
*	MATCH_ENTITY (STRPTR) - Query only hosts that have a public entity
*				specified by the Tag.
*	QUERY_OWNER (STRPTR) - This Tag is currently ignored.
*	MATCH_OWNER (STRPTR) - This Tag is currently ignored.
*	QUERY_ATTNFLAGS (ULONG) - This Tag allows you to find out what bits
*				  are set in ExecBase->AttnFlags.
*	MATCH_ATTNFLAGS (ULONG) - Query only hosts that have the specified
*				  bits set in ExecBase->AttnFlags.
*	QUERY_LIBVERSION (VOID) - This Tag is currently ignored.
*	MATCH_LIBVERSION (VOID) - This Tag is currently ignored.
*	QUERY_CHIPREVBITS (ULONG) - This Tag alllows you to find out what
*				    bits are set in GfxBase->ChipRevBits0.
*				    Note: Only the lower 8 bits of the ULONG
*				    are used.
*	MATCH_CHIPREVBITS (ULONG) - Query only hosts that have the specified
*				    bits set in GfxBase->ChipRevBits0.
*	QUERY_MAXFASTMEM (ULONG) - Query a machine for it's maximum amount
*				   of FAST memory.
*	MATCH_MAXFASTMEM (ULONG) -  Query only hosts with at least the
*				    specified amount of FAST memory.
*	QUERY_AVAILFASTMEM (ULONG) - Query a machine for the amount of free
*				     FAST memory it has available.
*	MATCH_AVAILFASTMEM (ULONG) - Query only those hosts that have at
*				     least the specified amount of FAST
*				     memory available.
*	QUERY_MAXCHIPMEM (ULONG) - Query a machine for it's maximum amount
*				   of installed CHIP memory.
*	MATCH_MAXCHIPMEM (ULONG) - Query only those hosts that have at least
*				   the specified amount of CHIP ram installed.
*	QUERY_AVAILCHIPMEM (ULONG) - Query a machine for the amount of free
*				     CHIP memory it has available.
*	MATCH_AVAILCHIPMEM (ULONG) - Query only those hosts that have at
*				     least the specified amount of CHIP
*				     memory available.
*	QUERY_KICKVERSION (ULONG) - Query a machine for the version and
*				    revision of Kickstart it is running.
*	MATCH_KICKVERSION (ULONG) - Query only those hosts that are running
*				    at least the specified version and revision
*				    of Kickstart.
*	QUERY_WBVERSION (ULONG) - Query a machine for the version and
*				  revision of Workbench it is running.
*	MATCH_WBVERSION (ULONG) - Query only those hosts that are running
*				  at least the specified version and revision
*				  of Workbench.
d128 2
a129 2
*	Query all hosts in realm "Software" for their Hostname, CPU type, Fast
*	memory installed and Kickstart version:
d131 30
a160 30
*	NIPCInquiry(myhook,		/* The hook to call */
*		    2,			/* 2 seconds max */
*		    15,			/* 15 responses max */
*		    MATCH_REALM,"Software",
*		    QUERY_HOSTNAME, 0,
*		    QUERY_ATTNFLAGS, 0,
*		    QUERY_MAXFASTMEM, 0,
*		    QUERY_KICKVERSION, 0,
*		    TAG_DONE);
*
*	The Hook would then get called for each host that responds.  An example
*	TagList passed to the hook might be:
*
*		MATCH_REALM,"Software",
*		QUERY_HOSTNAME,"A2500 Test".
*		QUERY_ATTNFLAGS, AFF_68010|AFF_68020|AFF_68881,
*		QUERY_MAXFASTMEM, 4194304,      (4 Megs)
*		QUERY_KICKVERSION, 2425007,	(VERSION <<16 | REVISION)
*		TAG_DONE
*
*	---
*	Query a server for all services it has available
*
*	NIPCInquiry(myhook,
*		    2,
*		    2,
*		    MATCH_REALM,"Marketing",
*		    MATCH_HOSTNAME,"Market Server",
*		    QUERY_SERVICES,0,
*		    TAG_DONE)
d164 6
a169 6
*		    MATCH_REALM,"Marketing",
*		    MATCH_HOSTNAME,"Market Server",
*		    QUERY_SERVICES,"EnvoyFileSystem",
*		    QUERY_SERVICES,"EnvoyPrinterService",
*		    QUERY_SERVICES,"ConferenceService",
*		    TAG_DONE)
d173 4
a176 4
*	This function is considered very low-level and is provided for network
*	diagnostic functions.  You should probably be using the functions
*	supplied in envoy.library to do network queries.  These will provide
*	"wrappers" for the most common types of queries.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
*       NetQueryA -- Start a nipc network query
d7 2
a8 2
*       NetQueryA(hook, queryClass, maxTime, tagList)
*                 A0    D0          D1       A1
d10 1
a10 1
*       VOID NetQueryA(struct Hook *, ULONG, ULONG, struct TagItem *);
d12 1
a12 1
*       NetQuery(hook, queryClass, maxTime, firsttag, ...)
d14 1
a14 1
*       VOID NetQuery(sutrct Hook *, ULONG, ULONG, Tag, ...);
d17 24
a40 4
*       Starts an NIPC network query.  This function can be used to gather
*       data about a single machine, or to gather data for a given network.
*       Only one class of query may be performed at a time.  The classes of
*       queries you can do are:
a41 39
*       NHClass_Hosts    - Query the local network or a given realm for the
*                          names of all hosts matching the data given in the
*                          tagList.  See below.
*       NHClass_Services - Query a single machine for a list of all services
*                          running on that machine.
*       NHClass_Entities - Query a single machine for a list of all public
*                          entities in use on a machine.
*       NHClass_Realms   - In an internetworked environment, returns a list
*                          of all Realms defined on your network.
*
*       The Hook is called for each packet returned from the network.
*       Depending on the class of the query, you may get more than one
*       packet.  For the NHClass_Hosts query, you will get one packet for
*       each machine matching your request.  For the other three classes,
*       you will get one packet containing all of the data you are looking
*       for.
*
*       A pointer to the packet is passed in A2 (the "object").  This
*       is the format of the data:
*
*           struct NameHeader
*           {
*               ULONG   nh_Reserved0;   /* Reserved */
*               UWORD   nh_ID;          /* Unique ID of this query */
*               UBYTE   nh_Type;        /* Query type (private) */
*               UBYTE   nh_Class;       /* Query Class */
*               UWORD   nh_Length;      /* Response packet length */
*               UBYTE   nh_Realms;      /* Number of Realms in the answer */
*               UBYTE   nh_Hosts;       /* Number of hosts in the answer */
*               UBYTE   nh_Services;    /* Number of services in the answer */
*               UBYTE   nh_Entities;    /* Number of entities in the answer */
*           };
*
*       The answer data is found immediately following the NameHeader. The
*       format is a series of null-terminated strings, the number of which
*       is specified in the fields above.  The strings will not be in any
*       specific order.
*
*       Do *NOT* free the NameHeader, it will be freed by nipc.library.
d43 1
a43 3
*       NetQueryA() returns when either maxTime seconds have passed, or in
*       the case of NHClass_Services or NHClass_Entities, the single
*       response packet is processed by the Hook function.
d45 10
a54 12
*   INPUTS
*       hook             - Pointer to a Hook structure to be called for each
*                          response.
*       queryClass       - The Class of the query, one of NHClass_Hosts,
*                          NHClass_Services, NHClass_Entities or
*                          NHClass_Realms.
*       maxTime          - The maximum number of seconds allowed for the
*                          query.  This is the absolute maximum time
*                          allowed.  nipc.library does not add anything to
*                          this value.
*       tagList          - Pointer to an array of TagItem structures. See
*                          below.
d57 1
a57 9
*       The Tags defined for NetQueryA() are:
*
*       NQ_Realm (STRPTR) - Optional name of Realm to query.
*       NQ_Host (STRPTR) - Name of the host to query for a Services or
*                          Entities query.
*       NQ_Service (STRPTR) - Optional name of a Service that you want hosts
*                             to try to match.
*       NQ_Entity (STRPTR) - Option name of an Entity that you want hosts to
*                            to try to match.
d59 64
d125 52
@
