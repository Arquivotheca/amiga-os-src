head     1.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.11
date     92.11.02.14.05.11;  author kcd;  state Exp;
branches ;
next     1.10;

1.10
date     92.07.30.15.55.19;  author kcd;  state Exp;
branches ;
next     1.9;

1.9
date     92.06.08.10.09.24;  author kcd;  state Exp;
branches ;
next     1.8;

1.8
date     92.05.05.17.30.38;  author kcd;  state Exp;
branches ;
next     1.7;

1.7
date     92.04.30.13.17.50;  author gregm;  state Exp;
branches ;
next     1.6;

1.6
date     92.04.10.00.41.01;  author kcd;  state Exp;
branches ;
next     1.5;

1.5
date     92.03.23.10.22.47;  author gregm;  state Exp;
branches ;
next     1.4;

1.4
date     92.03.13.14.26.38;  author gregm;  state Exp;
branches ;
next     1.3;

1.3
date     92.03.04.16.58.53;  author gregm;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.27.20.52.20;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.10.04.56;  author gregm;  state Exp;
branches ;
next     ;


desc
@Provides the .1 second "heartbeat" to all protocols.
@


1.11
log
@Changed global TimerBase to TimerDevice to avoid confilicts.
@
text
@/**************************************************************************
**
** timer.c      - The heartbeat of the nipc.library
**
** Copyright 1992, Commodore-Amiga, Inc.
**
** $Id: timer.c,v 1.10 92/07/30 15:55:19 kcd Exp Locker: kcd $
**
***************************************************************************

/*------------------------------------------------------------------------*/

#include <exec/types.h>
#include <devices/timer.h>
#include <exec/io.h>
#include "nipcinternal.h"
#include "externs.h"

#include <clib/exec_protos.h>
#include "nipcinternal_protos.h"

#include <pragmas/exec_pragmas.h>

/*------------------------------------------------------------------------*/

/*
 * this provides the heartbeat to all protocols above IP, as well as to ARP.
 * Currently the timeout is _about_ .1 of a second. (+ the time it takes to
 * queue a new request)
 */

/*------------------------------------------------------------------------*/

BOOL InitTimer()
{
    register struct NBase *nb = gb;

    if(nb->timerport = (struct MsgPort *) CreateMsgPort())
    {
        gb->timersigmask = (1 << gb->timerport->mp_SigBit);
        gb->TimeCount = 10;

        if(nb->treq = (struct timerequest *) CreateIORequest(nb->timerport, sizeof(struct timerequest)))
        {
            if(!OpenDevice("timer.device", UNIT_VBLANK, (struct IORequest *) nb->treq, 0))
            {
                    gb->TimerDevice = (struct Library *) nb->treq->tr_node.io_Device;
                    gb->TimerUnit = nb->treq->tr_node.io_Unit;

                    /* queue the 1st request */

                    gb->treq->tr_node.io_Command = TR_ADDREQUEST;
                    gb->treq->tr_node.io_Flags = 0;
                    gb->treq->tr_time.tv_secs = 0;  /* make it .1 second */
                    gb->treq->tr_time.tv_micro = 100000;
                    SendIO((struct IORequest *) nb->treq);
                    return (TRUE);
            }
            DeleteIORequest((struct IORequest *) nb->treq);
        }
        DeleteMsgPort(nb->timerport);
    }
    return FALSE;
}

/*------------------------------------------------------------------------*/

void TimeOut()
{
    register struct NBase *nb = gb;
    if(nb->treq = (struct timerequest *) GetMsg(nb->timerport))
    {
        gb->treq->tr_time.tv_secs = 0;
        gb->treq->tr_time.tv_micro = 100000;
        SendIO((struct IORequest *) nb->treq);
    }
    return;
}

/*------------------------------------------------------------------------*/

void DeinitTimer()
{
    register struct NBase *nb = gb;
    AbortIO((struct IORequest *) nb->treq);
    WaitIO((struct IORequest *) nb->treq);

    CloseDevice((struct IORequest *) nb->treq);
    DeleteMsgPort(nb->timerport);
    DeleteIORequest((struct IORequest *)nb->treq);

}
/*------------------------------------------------------------------------*/
@


1.10
log
@Changed the timer interval back to .1 second timeouts for the
new RDP piggybacked ack code.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.9 92/06/08 10:09:24 kcd Exp Locker: kcd $
d47 2
a48 1
                    gb->TimerBase = (struct Library *) nb->treq->tr_node.io_Device;
@


1.9
log
@Timers changed to 1 second timeouts.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.8 92/05/05 17:30:38 kcd Exp Locker: kcd $
d41 1
d54 1
a54 1
                    gb->treq->tr_time.tv_micro = 1000000;
d73 1
a73 1
        gb->treq->tr_time.tv_micro = 1000000;
@


1.8
log
@Fixed failed memory allocation problem.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.7 92/04/30 13:17:50 gregm Exp Locker: kcd $
d36 1
a36 1
        register struct NBase *nb = gb;
d38 3
a40 8
    nb->timerport = (struct MsgPort *) CreateMsgPort();
    if (!gb->timerport)
        return (FALSE);
    gb->timersigmask = (1 << gb->timerport->mp_SigBit);

    nb->treq = (struct timerequest *) CreateIORequest(nb->timerport, sizeof(struct timerequest));
    if(!nb->treq)
        return (FALSE);
d42 17
a58 3
    /* Get the device opened up */
    if (OpenDevice("timer.device", UNIT_VBLANK, (struct IORequest *) nb->treq, 0))
    {
a59 2
        DeleteIORequest((struct IORequest *) nb->treq);
        return (FALSE);
d61 1
a61 11

    gb->TimerBase = (struct Library *) nb->treq->tr_node.io_Device;

    /* queue the 1st request */

    gb->treq->tr_node.io_Command = TR_ADDREQUEST;
    gb->treq->tr_node.io_Flags = 0;
    gb->treq->tr_time.tv_secs = 0;  /* make it .1 second */
    gb->treq->tr_time.tv_micro = 100000;
    SendIO((struct IORequest *) nb->treq);
    return (TRUE);
d69 6
a74 7
    nb->treq = (struct timerequest *) GetMsg(nb->timerport);
    if (!gb->treq)
        return;

    gb->treq->tr_time.tv_secs = 0;
    gb->treq->tr_time.tv_micro = 100000;
    SendIO((struct IORequest *) nb->treq);
a75 1

d82 1
a82 1
        register struct NBase *nb = gb;
@


1.7
log
@Make the timer base globally accessible.  (I wanted it for rdp)
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.6 92/04/10 00:41:01 kcd Exp Locker: gregm $
d16 2
a22 1
#include "externs.h"
d44 2
@


1.6
log
@Removed Dependencies on old exec_pragmas.h file.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.5 92/03/23 10:22:47 gregm Exp Locker: kcd $
d35 1
a35 1
	register struct NBase *nb = gb;
d52 2
d84 1
a84 1
	register struct NBase *nb = gb;
@


1.5
log
@The_voodoo_stuff_is_GONE!
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.4 92/03/13 14:26:38 gregm Exp $
d35 1
d37 1
a37 1
    gb->timerport = (struct MsgPort *) CreateMsgPort();
d42 1
a42 1
    gb->treq = (struct timerequest *) CreateIORequest(gb->timerport, sizeof(struct timerequest));
d45 1
a45 1
    if (OpenDevice("timer.device", UNIT_VBLANK, (struct IORequest *) gb->treq, 0))
d47 2
a48 2
        DeleteMsgPort(gb->timerport);
        DeleteIORequest((struct IORequest *) gb->treq);
d58 1
a58 1
    SendIO((struct IORequest *) gb->treq);
d66 2
a67 2

    gb->treq = (struct timerequest *) GetMsg(gb->timerport);
d73 1
a73 1
    SendIO((struct IORequest *) gb->treq);
d82 3
a84 3

    AbortIO((struct IORequest *) gb->treq);
    WaitIO((struct IORequest *) gb->treq);
d86 3
a88 3
    CloseDevice((struct IORequest *) gb->treq);
    DeleteMsgPort(gb->timerport);
    DeleteIORequest((struct IORequest *)gb->treq);
@


1.4
log
@Fixed the lack of a DeleteMsgPort and DeleteIORequest in the deinitialization code.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.3 92/03/04 16:58:53 gregm Exp Locker: gregm $
d36 2
a37 2
    timerport = (struct MsgPort *) CreateMsgPort();
    if (!timerport)
d39 1
a39 1
    timersigmask = (1 << timerport->mp_SigBit);
d41 1
a41 1
    treq = (struct timerequest *) CreateIORequest(timerport, sizeof(struct timerequest));
d44 1
a44 1
    if (OpenDevice("timer.device", UNIT_VBLANK, (struct IORequest *) treq, 0))
d46 2
a47 2
        DeleteMsgPort(timerport);
        DeleteIORequest((struct IORequest *) treq);
d53 5
a57 5
    treq->tr_node.io_Command = TR_ADDREQUEST;
    treq->tr_node.io_Flags = 0;
    treq->tr_time.tv_secs = 0;  /* make it .1 second */
    treq->tr_time.tv_micro = 100000;
    SendIO((struct IORequest *) treq);
d66 2
a67 2
    treq = (struct timerequest *) GetMsg(timerport);
    if (!treq)
d70 3
a72 3
    treq->tr_time.tv_secs = 0;
    treq->tr_time.tv_micro = 100000;
    SendIO((struct IORequest *) treq);
d82 2
a83 2
    AbortIO((struct IORequest *) treq);
    WaitIO((struct IORequest *) treq);
d85 3
a87 3
    CloseDevice((struct IORequest *) treq);
    DeleteMsgPort(timerport);
    DeleteIORequest((struct IORequest *)treq);
@


1.3
log
@Moved globals to globals.c; externs for these in externs.h.
@
text
@d7 1
a7 1
** $Id: timer.c,v 1.2 92/02/27 20:52:20 kcd Exp Locker: gregm $
d86 2
@


1.2
log
@New formatting.  Changed to use new include files.
@
text
@d7 1
a7 1
** $Id$
d21 1
a29 4

struct MsgPort *timerport;
struct timerequest *treq;
ULONG timersigmask;
@


1.1
log
@Initial revision
@
text
@d1 9
d11 1
a11 5
/*
 * $Header$
 *
 */

d16 5
a20 2
#include <proto/exec.h>
#include <proto/dos.h>
d22 6
a27 3
/* this provides the heartbeat to all protocols above IP, as well as to
 * ARP.  Currently the timeout is _about_ .1 of a second.
 * (+ the time it takes to queue a new request)
d34 2
d39 4
a42 3
 timerport = (struct MsgPort *) CreateMsgPort();
 if (!timerport) return(FALSE);
 timersigmask = (1 << timerport->mp_SigBit);
d44 18
a61 18
 treq = (struct timerequest *) CreateExtIO(timerport,sizeof(struct timerequest));

/* Get the device opened up */
 if (OpenDevice("timer.device",UNIT_VBLANK,(struct IORequest *)treq,0))
   {
   DeleteMsgPort(timerport);
   DeleteExtIO((struct IORequest *)treq);
   return(FALSE);
   }

/* queue the 1st request */

 treq->tr_node.io_Command = TR_ADDREQUEST;
 treq->tr_node.io_Flags = 0;
 treq->tr_time.tv_secs = 0;       /* make it .1 second */
 treq->tr_time.tv_micro = 100000;
 SendIO((struct IORequest *)treq);
 return(TRUE);
d64 2
d69 3
a71 2
 treq = (struct timerequest *) GetMsg(timerport);
 if (!treq) return;
d73 4
a76 4
 treq->tr_time.tv_secs = 0;
 treq->tr_time.tv_micro = 100000;
 SendIO((struct IORequest *)treq);
 return;
d80 2
d85 2
a86 2
 AbortIO((struct IORequest *)treq);
 WaitIO((struct IORequest *)treq);
d88 1
a88 1
 CloseDevice((struct IORequest *)treq);
d91 1
@
