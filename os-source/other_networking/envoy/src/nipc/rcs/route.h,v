head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     92.02.17.10.06.39;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.18.11.57;  author kcd;  state Exp;
branches ;
next     ;


desc
@Definitions for nipc routing.
@


1.2
log
@*** empty log message ***
@
text
@/*
 * $Header$
 *
 * Data structures for holding the routine table and entries.
 *
 */

#include <exec/semaphores.h>

#define MAX_ROUTES 32

#define IP_ADDRLEN 4

#define IP_CLASSA(x) (((x>>24) & 0x80) == 0x00)
#define IP_CLASSB(x) (((x>>24) & 0xc0) == 0x80)
#define IP_CLASSC(x) (((x>>24) & 0xd0) == 0xc0)
#define IP_CLASSD(x) (((x>>24) & 0xf0) == 0xf0)
#define IP_CLASSE(x) (((x>>24) & 0xf0) == 0xf0)

struct NIPCRoute
{
    struct MinNode nr_Node;                     /* Next Route in chain */
    ULONG nr_Network;                           /* Destination machine or network */
    ULONG nr_Mask;                              /* Significant bits in nr_Network */
    ULONG nr_Gateway;                           /* Gateway for destination */
    struct sanadev *nr_Device;                  /* Which interface gateway is connected to */
    UWORD nr_Hops;                              /* Number of hops to destination */
    UWORD nr_TTL;                               /* Time to live for this route */
    UWORD nr_RefCnt;                            /* Number of references to this route */
    UWORD nr_UseCnt;                            /* Number of uses for this route */
};

struct NIPCRouteInfo
{
    struct SignalSemaphore nri_Lock;            /* Routing table arbitration */
    struct NIPCRoute *nri_Default;              /* Default Route */
    struct MinList nri_Routes[MAX_ROUTES];      /* Routing table size */
};

@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/* nipc.library route.h
d8 1
a8 2
#include <devices/sana2.h>
#include <s2io.h>
d14 5
a18 1
typedef IPAddr UBYTE[IP_ADDRLEN]
a19 6
#define IP_CLASSA(x) ((x[0] & 0x80) == 0x00)
#define IP_CLASSB(x) ((x[0] & 0xc0) == 0x80)
#define IP_CLASSC(x) ((x[0] & 0xd0) == 0xc0)
#define IP_CLASSD(x) ((x[0] & 0xf0) == 0xf0)
#define IP_CLASSE(x) ((x[0] & 0xf0) == 0xf0)

d23 4
a26 4
    IPAddr nr_NetWork;                          /* Destination machine or network */
    IPAddr nr_Mask;                             /* Significant bits in nr_Network */
    IPAddr nr_Gateway;                          /* Gateway for destination */
    struct sanadev *r_Device;                   /* Which interface gateway is connected to */
d28 2
d31 1
a31 1
}
d38 1
a38 1
}
@
