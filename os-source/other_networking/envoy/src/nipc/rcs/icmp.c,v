head     1.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.11
date     92.06.08.10.09.10;  author kcd;  state Exp;
branches ;
next     1.10;

1.10
date     92.05.05.17.34.37;  author kcd;  state Exp;
branches ;
next     1.9;

1.9
date     92.04.10.00.39.20;  author kcd;  state Exp;
branches ;
next     1.8;

1.8
date     92.03.27.10.33.36;  author gregm;  state Exp;
branches ;
next     1.7;

1.7
date     92.03.23.10.22.39;  author gregm;  state Exp;
branches ;
next     1.6;

1.6
date     92.03.04.16.57.43;  author gregm;  state Exp;
branches ;
next     1.5;

1.5
date     92.02.27.21.03.53;  author kcd;  state Exp;
branches ;
next     1.4;

1.4
date     92.02.24.10.44.58;  author kcd;  state Exp;
branches ;
next     1.3;

1.3
date     92.02.20.11.08.45;  author kcd;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.18.13.53.14;  author gregm;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.13.10.00.53;  author gregm;  state Exp;
branches ;
next     ;


desc
@The nipc implementation of ICMP.
@


1.11
log
@Code cleanups.
@
text
@/**************************************************************************
**
** icmp.c       - Internet Control Message Protocol
**
** Copyright 1992, Commodore-Amiga, Inc.
**
** $Id: icmp.c,v 1.10 92/05/05 17:34:37 kcd Exp Locker: kcd $
**
***************************************************************************

/*------------------------------------------------------------------------*/

#include "nipcinternal.h"
#include "externs.h"


#include <clib/exec_protos.h>
#include "nipcinternal_protos.h"

#include <pragmas/exec_pragmas.h>

/*------------------------------------------------------------------------*/

BOOL init_icmp(void)
{
    register struct NBase *nb = gb;
    gb->icmpproto.ipproto_ProtocolNumber = 1;
    gb->icmpproto.ipproto_Input = &icmp_input;
    gb->icmpproto.ipproto_Deinit = &icmp_deinit;
    gb->icmpproto.ipproto_Timeout = &icmp_timeout;
    AddHead((struct List *) &nb->ProtocolList, (struct Node *) &nb->icmpproto);       /* Tell IP about ICMP */
    return(TRUE);
}

/*------------------------------------------------------------------------*/

void icmp_timeout(void)
{
    return;
}

/*------------------------------------------------------------------------*/

void icmp_deinit(void)
{
    register struct NBase *nb = gb;
    Remove((struct Node *) & nb->icmpproto);
}

/*------------------------------------------------------------------------*/

void icmp_input(buff, length, dev)
struct Buffer *buff;
ULONG length;
struct sanadev *dev;
{
    struct BuffEntry *be;
    struct NIPCRoute *route;
    struct icmphdr *pkt;
    ULONG datalength;
    struct Buffer *obuff;
    struct BuffEntry *obe;
    struct icmphdrshort *ihdr;

    be = (struct BuffEntry *) (buff->buff_list.mlh_Head);
    if (be->be_length >= sizeof(struct icmphdr))
    {
        pkt = (struct icmphdr *) (be->be_data + be->be_offset);

        datalength = length - sizeof(struct icmphdr);

        switch (pkt->icmp_icmp.icmps_type)
        {
            case (ICMP_ECHO):
                                if(obuff = AllocBuffer(datalength))
                                {
                                    CopyToBuffer(obuff, (be->be_data) + (length - datalength), datalength);
                                    if(obe = AllocBuffEntry(sizeof(struct icmphdrshort)))
                                    {
                                        obe->be_length = (sizeof(struct icmphdrshort));
                                        AddHead((struct List *) & (obuff->buff_list), (struct Node *) obe);
                                        ihdr = (struct icmphdrshort *) obe->be_data;
                                        ihdr->icmps_type = ICMP_ECHOREPLY;
                                        ihdr->icmps_code = 0;
                                        ihdr->icmps_checksum = 0;
                                        ihdr->icmps_ident = pkt->icmp_icmp.icmps_ident;
                                        ihdr->icmps_seqnum = pkt->icmp_icmp.icmps_seqnum;
                                        ihdr->icmps_checksum = (0xFFFF - CalcChecksumBuffer(obuff));
                                        if (route = Route(pkt->icmp_iphdr.iph_SrcAddr, FALSE))
                                        {
                                            ip_out(obuff, pkt->icmp_iphdr.iph_DestAddr, pkt->icmp_iphdr.iph_SrcAddr, 1, route->nr_Device, route->nr_Gateway, 0, FALSE, 0, 30, FALSE, FALSE);
                                        }
                                    }
                                    else
                                        FreeBuffer(obuff);
                                }
                                break;
        }
    }
    FreeBuffer(buff);

}
/*------------------------------------------------------------------------*/
@


1.10
log
@Init now returns a BOOL.  Fixed low-memory bug.
@
text
@d7 1
a7 1
** $Id: icmp.c,v 1.9 92/04/10 00:39:20 kcd Exp Locker: kcd $
d61 3
d66 1
a66 1
    if (be->be_length < sizeof(struct icmphdr))
d68 1
a68 5
        FreeBuffer(buff);
        return;
    }

    pkt = (struct icmphdr *) (be->be_data + be->be_offset);
d70 1
a70 36
    datalength = length - sizeof(struct icmphdr);

    switch (pkt->icmp_icmp.icmps_type)
    {
        case (ICMP_ECHO):
            {
                struct Buffer *obuff;
                struct BuffEntry *obe;
                struct BuffEntry *ibe;
                struct icmphdrshort *ihdr;
                if(obuff = AllocBuffer(datalength))
                {
                    ibe = (struct BuffEntry *) buff->buff_list.mlh_Head;
                    CopyToBuffer(obuff, (ibe->be_data) + (length - datalength), datalength);
                    if(obe = AllocBuffEntry(sizeof(struct icmphdrshort)))
                    {
                        obe->be_length = (sizeof(struct icmphdrshort));
                        AddHead((struct List *) & (obuff->buff_list), (struct Node *) obe);
                        ihdr = (struct icmphdrshort *) obe->be_data;
                        ihdr->icmps_type = ICMP_ECHOREPLY;
                        ihdr->icmps_code = 0;
                        ihdr->icmps_checksum = 0;
                        ihdr->icmps_ident = pkt->icmp_icmp.icmps_ident;
                        ihdr->icmps_seqnum = pkt->icmp_icmp.icmps_seqnum;
                        ihdr->icmps_checksum = (0xFFFF - CalcChecksumBuffer(obuff));
                        if (route = Route(pkt->icmp_iphdr.iph_SrcAddr, FALSE))
                        {
                            ip_out(obuff, pkt->icmp_iphdr.iph_DestAddr, pkt->icmp_iphdr.iph_SrcAddr, 1, route->nr_Device, route->nr_Gateway, 0, FALSE, 0, 30, FALSE, FALSE);
                        }
                    }
                    else
                        FreeBuffer(obuff);
                }
                FreeBuffer(buff);
                break;
            }
d72 27
a98 3
        default:
            FreeBuffer(buff);
            break;
d100 1
@


1.9
log
@Removed Dependencies on old exec_pragmas.h file.
@
text
@d7 1
a7 1
** $Id: icmp.c,v 1.8 92/03/27 10:33:36 gregm Exp Locker: kcd $
d24 1
a24 1
void init_icmp(void)
d26 1
a26 1
	register struct NBase *nb = gb;
d32 1
a32 1

d46 1
a46 1
	register struct NBase *nb = gb;
d81 1
a81 15
                obuff = AllocBuffer(datalength);
                ibe = (struct BuffEntry *) buff->buff_list.mlh_Head;
                CopyToBuffer(obuff, (ibe->be_data) + (length - datalength), datalength);
                obe = AllocBuffEntry(sizeof(struct icmphdrshort));
                obe->be_length = (sizeof(struct icmphdrshort));
                AddHead((struct List *) & (obuff->buff_list), (struct Node *) obe);
                ihdr = (struct icmphdrshort *) obe->be_data;
                ihdr->icmps_type = ICMP_ECHOREPLY;
                ihdr->icmps_code = 0;
                ihdr->icmps_checksum = 0;
                ihdr->icmps_ident = pkt->icmp_icmp.icmps_ident;
                ihdr->icmps_seqnum = pkt->icmp_icmp.icmps_seqnum;
                ihdr->icmps_checksum = (0xFFFF - CalcChecksumBuffer(obuff));
//                kprintf("Responding to an ICMP_ECHO request.\n");
                if (route = Route(pkt->icmp_iphdr.iph_SrcAddr, FALSE))
d83 20
a102 3
//                    kprintf("ICMP: route->nr_Device:  %lx\n", route->nr_Device);
//                    kprintf("ICMP: route->nr_Gateway: %lx\n", route->nr_Gateway);
                    ip_out(obuff, pkt->icmp_iphdr.iph_DestAddr, pkt->icmp_iphdr.iph_SrcAddr, 1, route->nr_Device, route->nr_Gateway, 0, FALSE, 0, 30, FALSE, FALSE);
@


1.8
log
@""
@
text
@d7 1
a7 1
** $Id: icmp.c,v 1.7 92/03/23 10:22:39 gregm Exp Locker: gregm $
d26 1
a26 1

d31 1
a31 1
    AddHead((struct List *) &gb->ProtocolList, (struct Node *) &gb->icmpproto);       /* Tell IP about ICMP */
d46 2
a47 1
    Remove((struct Node *) & gb->icmpproto);
@


1.7
log
@The_voodoo_stuff_is_GONE!
@
text
@d7 1
a7 1
** $Id: icmp.c,v 1.6 92/03/04 16:57:43 gregm Exp $
d31 1
a31 1
    AddHead((struct List *) & gb->ProtocolList, (struct Node *) & gb->icmpproto);       /* Tell IP about ICMP */
@


1.6
log
@Moved globals to globals.c; externs for these in externs.h.
@
text
@d7 1
a7 1
** $Id: icmp.c,v 1.5 92/02/27 21:03:53 kcd Exp Locker: gregm $
d27 5
a31 5
    icmpproto.ipproto_ProtocolNumber = 1;
    icmpproto.ipproto_Input = &icmp_input;
    icmpproto.ipproto_Deinit = &icmp_deinit;
    icmpproto.ipproto_Timeout = &icmp_timeout;
    AddHead((struct List *) & ProtocolList, (struct Node *) & icmpproto);       /* Tell IP about ICMP */
d46 1
a46 1
    Remove((struct Node *) & icmpproto);
@


1.5
log
@New formatting.  Slight modification to ip_out() call.  Now uses 
internal include files.
@
text
@d7 1
a7 1
** $Id$
d14 1
d16 1
a20 12

/*------------------------------------------------------------------------*/

/* Globals */

struct ipproto icmpproto;

/*------------------------------------------------------------------------*/

/* Externals */

extern struct MinList ProtocolList;
@


1.4
log
@Commented out all kprintf()'s.
@
text
@d1 18
d20 1
a20 4
/*
 * $Header: APPN:src/nipc/RCS/icmp.c,v 1.3 92/02/20 11:08:45 kcd Exp $
 *
 */
d22 1
a22 7
#include <exec/lists.h>
#include "ip.h"
#include "memory.h"
#include "icmp.h"
#include "route.h"
#include <proto/exec.h>
#include <proto/dos.h>
d24 3
d28 1
a28 4
struct ipproto icmpproto;
void icmp_input();
void icmp_deinit();
void icmp_timeout();
d31 2
a32 3
extern struct NIPCRoute *Route();
struct Buffer *AllocBuffer();
struct BuffEntry *AllocBuffEntry();
d34 1
a34 1
void init_icmp()
d37 5
a41 5
 icmpproto.ipproto_ProtocolNumber = 1;
 icmpproto.ipproto_Input = &icmp_input;
 icmpproto.ipproto_Deinit = &icmp_deinit;
 icmpproto.ipproto_Timeout = &icmp_timeout;
 AddHead((struct List *)&ProtocolList,(struct Node *)&icmpproto);          /* Tell IP about ICMP */
d45 3
a47 1
void icmp_timeout()
d49 1
a49 1
 return;
d52 3
a54 1
void icmp_deinit()
d56 1
a56 1
 Remove((struct Node *)&icmpproto);
d59 3
a61 1
void icmp_input(buff,length,dev)
d66 4
a69 4
struct BuffEntry *be;
struct NIPCRoute *route;
struct icmphdr *pkt;
ULONG datalength;
d71 47
a117 47
 be = (struct BuffEntry *) (buff->buff_list.mlh_Head);
 if (be->be_length < sizeof(struct icmphdr))
   {
   FreeBuffer(buff);
   return;
   }

 pkt = (struct icmphdr *) (be->be_data + be->be_offset);

 datalength = length - sizeof(struct icmphdr);

 switch (pkt->icmp_icmp.icmps_type)
   {
   case(ICMP_ECHO):
      {
      struct Buffer *obuff;
      struct BuffEntry *obe;
      struct BuffEntry *ibe;
      struct icmphdrshort *ihdr;
      obuff = AllocBuffer(datalength);
      ibe = (struct BuffEntry *) buff->buff_list.mlh_Head;
      CopyToBuffer(obuff,(ibe->be_data)+(length-datalength),datalength);
      obe = AllocBuffEntry(sizeof(struct icmphdrshort));
      obe->be_length = (sizeof(struct icmphdrshort));
      AddHead((struct List *)&(obuff->buff_list),(struct Node *)obe);
      ihdr = (struct icmphdrshort *) obe->be_data;
      ihdr->icmps_type = ICMP_ECHOREPLY;
      ihdr->icmps_code = 0;
      ihdr->icmps_checksum = 0;
      ihdr->icmps_ident = pkt->icmp_icmp.icmps_ident;
      ihdr->icmps_seqnum = pkt->icmp_icmp.icmps_seqnum;
      ihdr->icmps_checksum =(0xFFFF-CalcChecksumBuffer(obuff));
//      kprintf("Responding to an ICMP_ECHO request.\n");
      if(route = Route(pkt->icmp_iphdr.iph_SrcAddr,FALSE))
      {
//          kprintf("ICMP: route->nr_Device:  %lx\n",route->nr_Device);
//          kprintf("ICMP: route->nr_Gateway: %lx\n",route->nr_Gateway);
          ip_out(obuff,pkt->icmp_iphdr.iph_DestAddr,pkt->icmp_iphdr.iph_SrcAddr,1,route->nr_Device,route->nr_Gateway,0,FALSE,0,30,FALSE);
      }
      FreeBuffer(buff);
      break;
      }

   default:
      FreeBuffer(buff);
      break;
   }
d120 1
a120 1

@


1.3
log
@Added routing code and changed parameters for ip_out call.
@
text
@d3 1
a3 1
 * $Header: APPN:src/libs/nipc.library/RCS/icmp.c,v 1.2 92/02/18 13:53:14 gregm Exp Locker: kcd $
d89 1
a89 1
      kprintf("Responding to an ICMP_ECHO request.\n");
d92 2
a93 2
          kprintf("ICMP: route->nr_Device:  %lx\n",route->nr_Device);
          kprintf("ICMP: route->nr_Gateway: %lx\n",route->nr_Gateway);
@


1.2
log
@Modified it to use the new ip_out.
@
text
@d3 1
a3 1
 * $Header: APPN:src/libs/nipc.library/RCS/icmp.c,v 1.1 92/02/13 10:00:53 gregm Exp Locker: gregm $
d11 1
d22 1
a22 1

d53 1
d89 7
a95 1
      ip_out(obuff,pkt->icmp_iphdr.iph_DestAddr,pkt->icmp_iphdr.iph_SrcAddr,1,0,FALSE,0);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * $Header$
d87 1
a87 1
      ip_out(obuff,pkt->icmp_iphdr.iph_SrcAddr,1,0,FALSE,0);
@
