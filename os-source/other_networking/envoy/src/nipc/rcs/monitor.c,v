head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     92.04.10.00.39.36;  author kcd;  state Exp;
branches ;
next     1.4;

1.4
date     92.03.23.10.24.07;  author gregm;  state Exp;
branches ;
next     1.3;

1.3
date     92.03.04.16.57.55;  author gregm;  state Exp;
branches ;
next     1.2;

1.2
date     92.02.27.21.05.05;  author kcd;  state Exp;
branches ;
next     1.1;

1.1
date     92.02.24.10.48.26;  author kcd;  state Exp;
branches ;
next     ;


desc
@Private calls to monitor nipc network activity.
@


1.5
log
@Removed Dependencies on old exec_pragmas.h file.
@
text
@/**************************************************************************
**
** monitor.c    - NIPC Monitor functions
**
** Copyright 1992, Commodore-Amiga, Inc.
**
** $Id: monitor.c,v 1.4 92/03/23 10:24:07 gregm Exp Locker: kcd $
**
***************************************************************************

/*------------------------------------------------------------------------*/

#include "nipcinternal.h"
#include "externs.h"


#include <clib/exec_protos.h>
#include "nipcinternal_protos.h"

#include <pragmas/exec_pragmas.h>

/*------------------------------------------------------------------------*/

struct NIPCMonitorInfo *__asm StartMonitor(void)
{
	register struct NBase *nb = gb;
    ULONG *uptr;
    Forbid();
    if (!gb->MonitorInfo.nmi_Monitor)
    {
        nb->MonitorInfo.nmi_Monitor = FindTask(NULL);
        if (nb->MonitorInfo.nmi_SigBitNum = AllocSignal(-1L))
        {
            for (uptr = &gb->MonitorInfo.nmi_IPIn; uptr <= &gb->MonitorInfo.nmi_UDPBytesOut; uptr++)
                *uptr = 0L;
            nb->MonitorInfo.nmi_AvailChipStart = AvailMem(MEMF_CHIP);
            nb->MonitorInfo.nmi_AvailFastStart = AvailMem(MEMF_FAST);
            Permit();
            return &gb->MonitorInfo;
        }
        else
        {
            gb->MonitorInfo.nmi_Monitor = NULL;
            Permit();
            return NULL;
        }
    }
    else
    {
        Permit();
        return NULL;
    }
}

/*------------------------------------------------------------------------*/

void __asm StopMonitor(void)
{
	register struct NBase *nb = gb;
    Forbid();
    if (nb->MonitorInfo.nmi_Monitor == FindTask(NULL))
    {
        FreeSignal(nb->MonitorInfo.nmi_SigBitNum);
        gb->MonitorInfo.nmi_Monitor = NULL;
    }
    Permit();
}
/*------------------------------------------------------------------------*/
@


1.4
log
@The_voodoo_stuff_is_GONE!
@
text
@d7 1
a7 1
** $Id: monitor.c,v 1.3 92/03/04 16:57:55 gregm Exp $
d26 1
d31 2
a32 2
        gb->MonitorInfo.nmi_Monitor = FindTask(NULL);
        if (gb->MonitorInfo.nmi_SigBitNum = AllocSignal(-1L))
d36 2
a37 2
            gb->MonitorInfo.nmi_AvailChipStart = AvailMem(MEMF_CHIP);
            gb->MonitorInfo.nmi_AvailFastStart = AvailMem(MEMF_FAST);
d59 1
d61 1
a61 1
    if (gb->MonitorInfo.nmi_Monitor == FindTask(NULL))
d63 1
a63 1
        FreeSignal(gb->MonitorInfo.nmi_SigBitNum);
@


1.3
log
@Moved globals to globals.c; externs for these in externs.h.
@
text
@d7 1
a7 1
** $Id: monitor.c,v 1.2 92/02/27 21:05:05 kcd Exp Locker: gregm $
d24 1
a24 1
struct NIPCMonitorInfo *__saveds __asm StartMonitor(void)
d28 1
a28 1
    if (!MonitorInfo.nmi_Monitor)
d30 2
a31 2
        MonitorInfo.nmi_Monitor = FindTask(NULL);
        if (MonitorInfo.nmi_SigBitNum = AllocSignal(-1L))
d33 1
a33 1
            for (uptr = &MonitorInfo.nmi_IPIn; uptr <= &MonitorInfo.nmi_UDPBytesOut; uptr++)
d35 2
a36 2
            MonitorInfo.nmi_AvailChipStart = AvailMem(MEMF_CHIP);
            MonitorInfo.nmi_AvailFastStart = AvailMem(MEMF_FAST);
d38 1
a38 1
            return &MonitorInfo;
d42 1
a42 1
            MonitorInfo.nmi_Monitor = NULL;
d56 1
a56 1
void __saveds __asm StopMonitor(void)
d59 1
a59 1
    if (MonitorInfo.nmi_Monitor == FindTask(NULL))
d61 2
a62 2
        FreeSignal(MonitorInfo.nmi_SigBitNum);
        MonitorInfo.nmi_Monitor = NULL;
@


1.2
log
@New formatting.  Now uses internal include files.
@
text
@d7 1
a7 1
** $Id$
d14 1
d16 1
a20 6

/*------------------------------------------------------------------------*/

/* Globals */

struct NIPCMonitorInfo MonitorInfo;
@


1.1
log
@Initial revision
@
text
@d1 9
d11 1
a11 4
/*
 * $Header$
 *
 */
d13 1
a14 3
#include <exec/types.h>
#include <exec/tasks.h>
#include <exec/memory.h>
d16 2
d19 2
a20 1
#include "monitor.h"
d23 1
d26 3
a28 1
struct NIPCMonitorInfo * __saveds __asm StartMonitor(void)
d32 1
a32 1
    if(!MonitorInfo.nmi_Monitor)
d35 1
a35 1
        if(MonitorInfo.nmi_SigBitNum = AllocSignal(-1L))
d37 1
a37 1
            for(uptr = &MonitorInfo.nmi_IPIn; uptr <= &MonitorInfo.nmi_UDPBytesOut; uptr++)
d58 2
d63 1
a63 1
    if(MonitorInfo.nmi_Monitor == FindTask(NULL))
d70 1
a70 1

@
