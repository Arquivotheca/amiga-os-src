head     1.6;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.6; strict;
comment  @ * @;


1.6
date     92.06.24.13.18.50;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     92.06.02.11.28.04;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     92.04.09.12.02.26;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     92.04.06.11.49.38;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     92.04.03.10.47.58;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     92.04.03.10.45.46;  author dlarson;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@*** empty log message ***
@
text
@; /*
lc -j73 -d -rr -O -o/obj/initasdb.o -i/include -v -csf initasdb
blink /obj/initasdb.o to /bin/initasdb LIB lcr.lib sc sd nd batch
protect /bin/initasdb +p
quit
*/
/*
**  $Id: initasbd.c,v 1.5 92/06/02 11:28:04 dlarson Exp Locker: dlarson $
**
**  Authentication server command processing functions.
**
**  (C) Copyright 1992 Commodore-Amiga, Inc.
**      All Rights Reserved.
*/
#include <exec/types.h>
#include <exec/execbase.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <exec/alerts.h>
#include <string.h>
#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>
#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>
#include <utility/tagitem.h>
#include <clib/utility_protos.h>
#include <pragmas/utility_pragmas.h>
#include <dos/dosextens.h>
#include <dos/datetime.h>
#include <dos/dosasl.h>
#include <dos/rdargs.h>
#include "initasdb_rev.h"

#define TEMPLATE    "ADMIN_NAME/A,ADMIN_PASSWORD/A" VERSTRING
#define OPT_NAME 0
#define OPT_PASS 1
#define OPT_COUNT 2

#define NAME_SIZE   128

#define MSG_NO_COLON	   "':' not legal character in volume name\n"
#define MSG_INVALID_DEVICE "Invalid device or volume name\n"

int cmd_initasdb(void)
{
struct Library *SysBase = (*((struct Library **) 4));
struct DosLibrary *DOSBase;
struct RDargs *rdargs;
struct DosList *doslist;
int returncode;
long chrpos;
LONG opts[OPT_COUNT];
UBYTE drivename[NAME_SIZE];
BPTR ufile, gfile;
struct UserProfile user;
char
	if ( !(DOSBase = (struct DosLibrary *)OpenLibrary("dos.library", 37L)) )
	{
		Result2(ERROR_INVALID_RESIDENT_LIBRARY);
		goto ERROR1;
	}
	if( !(ufile = Open("asdb:users", MODE_NEWFILE) )
	{
		PrintFault(IoErr(), NULL);
		goto ERROR2;
	}
	if( !(gfile = Open("asdb:groups", MODE_NEWFILE) )
	{
		PrintFault(IoErr(), NULL);
		goto ERROR3;
	}
	memset((char *)opts, 0, sizeof(opts));
	if((rdargs = ReadArgs(TEMPLATE, opts, NULL)) == NULL)
	{
		PrintFault(IoErr(), NULL);
		goto ERROR4;
	}
	MemCopy(opts[OPT_NAME], UserProfile.up_UserName
	MemCopy(opts[OPT_PASS], UserProfile.up_PassWord

	UserProfile.up_FullName
	UserProfile.up_UID
	UserProfile.up_GID
	Write(ufile, &user, sizeof(struct UserProfile));
	Write(gfile, , sizeof(struct Group));
	PutStr("Initialized AuthenticationServer Database with administrator '");
	PutStr(opts[ADMIN_NAME]); PutStr(" and password '"); PutStr(opts[ADMIN_PASSWORD]); PutStr(".\n");

	returncode = RETURN_OK;
ERROR5:
	FreeArgs(rdargs);
ERROR4:
	Close(gfile);
ERROR3:
	Close(ufile);
ERROR2:
	CloseLibrary((struct Library *)DOSBase);
ERROR1:
	return returncode;
@


1.5
log
@*** empty log message ***
@
text
@d8 1
a8 1
**  $Id: initasbd.c,v 1.4 92/04/09 12:02:26 dlarson Exp Locker: dlarson $
@


1.4
log
@*** empty log message ***
@
text
@d8 1
a8 1
**  $Id: initasbd.c,v 1.3 92/04/06 11:49:38 dlarson Exp Locker: dlarson $
@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
**  $Id: initasbd.c,v 1.2 92/04/03 10:47:58 dlarson Exp Locker: dlarson $
@


1.2
log
@*** empty log message ***
@
text
@d8 1
a8 1
**  $Id: initasbd.c,v 1.1 92/04/03 10:45:46 dlarson Exp Locker: dlarson $
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
**  $Id:$
@
