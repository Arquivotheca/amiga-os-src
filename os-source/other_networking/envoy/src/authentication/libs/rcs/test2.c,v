head     1.2;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.2; strict;
comment  @ * @;


1.2
date     92.06.24.13.30.02;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     92.04.09.11.58.39;  author dlarson;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@y
@
text
@/*
**  $Id: test2.c,v 1.1 92/04/09 11:58:39 dlarson Exp Locker: dlarson $
**
**  Authentication.library test program for list functions.
**
**  (C) Copyright 1992 Commodore-Amiga, Inc.
**      All Rights Reserved.
*/
#include <exec/exec.h>
#include <envoy/authentication.h>
#include <clib/exec_protos.h>
#include <pragmas/exec_pragmas.h>
#include <clib/authentication_protos.h>
#include <pragmas/authentication_pragmas.h>
#include <clib/alib_protos.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

extern struct Library *SysBase;
struct Library *AuthenticationBase;

void printuser(struct UserProfile *user);
void report(char *string, ULONG should, ULONG code);
void main(void);
void printgroup(struct Group *g);

void main(void)
{
ULONG err;
struct MinList real, *list;
struct UserProfile *node;
struct Group *gnode, *root;

	list = &real;
	AuthenticationBase = OpenLibrary("authentication.library", 0L);
	if(!AuthenticationBase)
	{
		printf("Can't open authentication.library!!!\n");
		exit(-1);
	}
	err = ChooseAuthServer(NULL);
	report("Choose server", 0, err);
	if(err)
	{
		goto END;
	}
	root = AllocGroup();
	strcpy(root->g_GroupName, "Administrators");
	printf("----------------- all groups  --------------\n");
	NewList((struct List *)list);
	err = ListGroups(list);
	report("List groups", 0, err);
	while(gnode = (struct Group *)RemHead((struct List *)list))
	{
		printgroup(gnode);
		FreeGroup(gnode);
	}
	printf("----------------- all users  --------------\n");
	err = ListUsers(list);
	report("List users", 0, err);
	while(node = (struct UserProfile *)RemHead((struct List *)list))
	{
		printuser(node);
		FreeUserProfile(node);
	}
	printf("----------------- members of admin  --------------\n");
	err = ListMembers(list, root);
	report("List members", 0, err);
	while(node = (struct UserProfile *)RemHead((struct List *)list))
	{
		printuser(node);
		FreeUserProfile(node);
	}
	printf("----------------- all users  --------------\n");
	err = ListUsers(list);
	report("List users", 0, err);
	while(node = (struct UserProfile *)RemHead((struct List *)list))
	{
		printuser(node);
		FreeUserProfile(node);
	}
	FreeGroup(root);
END:
	CloseLibrary(AuthenticationBase);
	printf("All tests completed.\n");
}


void printuser(struct UserProfile *user)
{
	printf("---  UserProfile %lx ---\n", user);
	if(!user)
	{
		return;
	}
	printf("UserName: %s\n", user->up_UserName);
	printf("FullName: %s\n", user->up_FullName);
	printf("PassWord: %s\n", user->up_PassWord);
	printf("UID:      %ld\n", user->up_UID);
	printf("GID:      %ld\n", user->up_GID);
}


void printgroup(struct Group *g)
{
	if(!g)
	{
		return;
	}
	printf("\nGroupName: %s\n", g->g_GroupName);
	printf("GID:      %ld\n", g->g_GID);
}


void report(char *string, ULONG should, ULONG code)
{
char buffer[80];

	if(should == code)
	{
		return;
	}
	printf("%s, err=%ld (should be %lu).\n",string, code, should);
	if(AuthErrorText(code, buffer, 80))
	{
		printf("\tError Text: '%s'\n", buffer);
	}else
	{
		printf("\tCan't get error text.\n");
	}
}@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
**  $Id: test.c,v 1.2 92/04/06 11:44:00 dlarson Exp Locker: dlarson $
@
