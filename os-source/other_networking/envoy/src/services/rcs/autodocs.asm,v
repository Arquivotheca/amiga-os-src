head     37.2;
branch   ;
access   ;
symbols  ;
locks    kcd:37.2; strict;
comment  @* @;


37.2
date     92.06.04.18.36.10;  author kcd;  state Exp;
branches ;
next     37.1;

37.1
date     92.03.22.18.18.18;  author kcd;  state Exp;
branches ;
next     ;


desc
@Function descriptions for services.library
@


37.2
log
@Removed StartService and StopService() autodocs.
@
text
@
******* services.library/FindService *****************************************
*
*   NAME
*   FindServiceA -- Connect to a Service. (V37)
*   FindService -- varargs stub for FindServiceA(). (V37)
*
*   SYNOPSIS
*   remote_entity = FindServiceA(remoteHost,serviceName,srcEntity,tagList);
*   D0                           A0         A1          A2        A3
*
*   APTR FindServiceA(STRPTR remoteHost, STRPTR serviceName,
*       APTR srcEntity,struct TagItem *);
*
*   remote_entity = FindService(remoteHost,serviceName,srcEntity,firstTag, ...);
*
*   APTR FindServiceA(STRPTR remoteHost, STRPTR serviceName,
*       APTR srcEntity,Tag,...);
*
*   FUNCTION
*   Attemps to locate a certain service on a given host.
*
*   INPUTS
*   remoteHost - Pointer to a NULL-terminated string that is the name of
*       the host on which the service you want to use is provided. If you
*       pass a NULL for a host name, services.library will assume that you
*       are looking for the service on the local machine.
*   serviceName - Pointer to a NULL-terminated string that is the name
*       of the service you want to connect to.
*   srcEntity - an Entity returned by nipc.library/CreateEntity() that you
*       wish to use as the 'near' side of the communications path.
*
*   TAGS
*   Tags for use with FindService():
*
*   FSVC_UserName (STRPTR) - Specifies the name of the user who is trying
*       to use the service.  If NULL, or the tag is not specified, the
*       call will only be able to connect to a service marked as public
*       on the remote machine.
*
*   FSVC_PassWord (STRPTR) - The password of the user who is trying to use
*       the service.  Only useful in conjunction with FSVC_UserName.
*
*   FSVC_Error (ULONG *) - If specified, a pointer to a ULONG in which a
*       error code describing the failure if there was one.
*
*   RESULT
*   remote_entity - NULL if the given service cannot be found or access to the
*       service was denied.  Otherwise, a magic cookie describing the service
*       that you found.
*
*   NOTES
*   All of the rules for FindEntity() appy here as well.  Please read the
*   AutoDoc for FindEntity() for further information.
*   Each SUCCESSFUL FindService() REQUIRES an associated LoseService().
*
*   SEE ALSO
*   nipc.library/FindEntity(), nipc.library/LoseEntity()
*
******************************************************************************

******* services.library/LoseService *****************************************
*
*   NAME
*   LoseService -- Free up any resources allocated from FindService(). (V37)
*
*   SYNOPSIS
*   LoseEntity(entity)
*              A0
*
*   VOID LoseEntity(APTR entity)
*
*   FUNCTION
*   This will merely free up any resources allocated with a successful
*   FindService() call.
*
*   INPUTS
*   entity - A 'magic cookie' that identifies an entity associated with a
*       given service.
*
*   RESULT
*   None
*
*   LoseService() should only be use on entities returned by FindService.
*   Attempting to use LoseService() on entities created by CreateEntity
*   is asking for trouble.
*
*   BUGS
*   None known.
*
*   SEE ALSO
*   FindService()
*
******************************************************************************
@


37.1
log
@Initial revision
@
text
@d5 2
a6 2
*	FindServiceA -- Connect to a Service. (V37)
*	FindService -- varargs stub for FindServiceA(). (V37)
d9 2
a10 2
*	remote_entity = FindServiceA(remoteHost,serviceName,srcEntity,tagList);
*	D0                           A0         A1          A2        A3
d12 4
a15 4
*	APTR FindServiceA(STRPTR remoteHost, STRPTR serviceName,
*		APTR srcEntity,struct TagItem *);
*
*	remote_entity = FindService(remoteHost,serviceName,srcEntity,firstTag, ...);
d17 2
a18 2
*	APTR FindServiceA(STRPTR remoteHost, STRPTR serviceName,
*		APTR srcEntity,Tag,...);
d21 1
a21 1
*	Attemps to locate a certain service on a given host.
d24 19
a42 23
*	remoteHost - Pointer to a NULL-terminated string that is the name of
*		the host on which the service you want to use is provided. If you
*		pass a NULL for a host name, services.library will assume that you
*		are looking for the service on the local machine.
*	serviceName - Pointer to a NULL-terminated string that is the name
*		of the service you want to connect to.
*	srcEntity - an Entity returned by nipc.library/CreateEntity() that you
*		wish to use as the 'near' side of the communications path.
*
*	TAGS
*	Tags for use with FindService():
*
*	FSVC_UserName (STRPTR) - Specifies the name of the user who is trying
*		to use the service.  If NULL, or the tag is not specified, the
*		call will only be able to connect to a service marked as public
*		on the remote machine.
*
*	FSVC_PassWord (STRPTR) - The password of the user who is trying to use
*		the service.  Only useful in conjunction with FSVC_UserName.
*
*	FSVC_AnyHost (BOOL) - If TRUE, specifies that the Services Manager on
*		the remote machine may transfer your request for a service to another
*		machine.  Defaults to FALSE.
d44 2
a45 2
*	FSVC_Error (ULONG *) - If specified, a pointer to a ULONG in which a
*		error code describing the failure if there was one.
d48 3
a50 3
*	remote_entity - NULL if the given service cannot be found or access to the
*		service was denied.  Otherwise, a magic cookie describing the service
*		that you found.
d52 1
a52 1
*	NOTES
d54 2
a55 2
*	AutoDoc for FindEntity() for further information.
*	Each SUCCESSFUL FindService() REQUIRES an associated LoseService().
d58 1
a58 1
*	nipc.library/FindEntity(), nipc.library/LoseEntity()
d64 2
a65 2
*	NAME
*	LoseService -- Free up any resources allocated from FindService(). (V37)
d67 3
a69 23
*	SYNOPSIS
*	LoseEntity(entity)
*	           A0
*
*	VOID LoseEntity(APTR entity)
*
*	FUNCTION
*	This will merely free up any resources allocated with a successful
*	FindService() call.
*
*	INPUTS
*	entity - A 'magic cookie' that identifies an entity associated with a
*		given service.
*
*	RESULT
*	None
*
*	LoseService() should only be use on entities returned by FindService.
*	Attempting to use LoseService() on entities created by CreateEntity
*	is asking for trouble.
*
*	BUGS
*	None known.
d71 1
a71 2
*	SEE ALSO
*	FindService()
d73 3
a75 3
******************************************************************************

******* services.library/StartService ****************************************
d77 3
a79 35
*	NAME
*	StartServiceA -- Get the Entity for communication with client(s). (V37)
*	StartService -- varargs stub for StartServiceA(). (V37)
*
*	SYNOPSIS
*	entity = StartServiceA(tags)
*	D0                     A0
*
*	APTR StartServiceA(struct TagItem *);
*
*	entity = StartService(firstTag,...);
*
*	APTR StartService(Tag,...);
*
*	FUNCTION
*	Requests that the services.library provide the Entity through which our
*	client(s) will be communicating.
*
*	INPUTS
*	None
*
*	TAGS
*	Tags for use with StartService():
*
*	SSVC_MultiClient - If specified, means that your server process will
*		hanle communications with all clients looking for your service. If
*		this tag is not specified, the Services Manager will start a new
*		copy of your server for each client that does a FindService().
*
*	All of the tags for nipc.library/CreateEntity, except for ENT_Name and
*	and ENT_Public also may be used with StartService().
*
*	RESULT
*	enity - NULL if there was some problem getting the servers Entity, or
*		a 'magic cookie' that defines your Entity.
d81 2
a82 2
*	SEE ALSO
*	StopService(), nipc.library/CreateEntity()
d84 3
a86 3
******************************************************************************

******* services.library/StopService *****************************************
d88 2
a89 24
*	NAME
*	StopService -- Inform the Services Manager that you will no longer be
*		providing your service. (V37)
*
*	SYNOPSIS
*	StopService(serverEntity)
*				A0
*
*	VOID StopService(APTR serverEntity);
*
*	FUNCTION
*	Informs the Services Manager that your invocation of the server is
*	exiting and will no longer be providing its service.
*
*	INPUTS
*	serverEntity - a 'magic cookie' returned by StartService() that specifies
*		the Entity that your server was using for communication.
*
*	RESULT
*	None
*
*	All servers must call this function before exiting.  This is to make
*	sure that servers that only have a single invocation will be retstarted
*	if neccessary.
d91 2
a92 2
*	SEE ALSO
*	StartService()
@
