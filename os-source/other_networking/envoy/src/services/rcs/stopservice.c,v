head     37.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


37.3
date     92.06.04.18.24.16;  author kcd;  state Exp;
branches ;
next     37.2;

37.2
date     92.04.14.15.20.29;  author kcd;  state Exp;
branches ;
next     37.1;

37.1
date     92.03.22.18.14.24;  author kcd;  state Exp;
branches ;
next     ;


desc
@Module to inform Services Manger that a server is exiting.
@


37.3
log
@Retired
@
text
@/*
** $Id: stopservice.c,v 37.2 92/04/14 15:20:29 kcd Exp Locker: kcd $
**
** Module to tell Services Manager we're going away.
**
*/

/* File retired 6/4/92 by kcd */

@


37.2
log
@Removed dependencies on old exec pragmas file.
@
text
@d2 1
a2 1
** $Id: stopservice.c,v 37.1 92/03/22 18:14:24 kcd Exp Locker: kcd $
d8 1
a8 1
/*--------------------------------------------------------------------------*/
a9 83
#ifndef	EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef	EXEC_LISTS_H
#include <exec/lists.h>
#endif

#ifndef	EXEC_SEMAPHORES_H
#include <exec/semaphores.h>
#endif

#ifndef	EXEC_MEMORY_H
#include <exec/memory.h>
#endif

#ifndef	APPN_NIPC_H
#include <appn/nipc.h>
#endif

#include "services.h"
#include "servicesbase.h"
#include "servicesinternal.h"
#include <appn/nipc.h>

#include <dos.h>
#include <string.h>

#include <clib/exec_protos.h>
#include <clib/nipc_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/nipc_pragmas.h>

/*--------------------------------------------------------------------------*/

VOID ASM StopService(REG(a0) APTR servEntity)
{
    struct Server *server,*me = NULL;
    struct Process *server_proc;
    struct Service *svc;
    struct ServicesLib *S_Lib = (struct ServicesLib *)getreg(REG_A6);
    ObtainSemaphore(&S_Lib->SVCS_ServicesLock);

    svc = (struct Service *) ServicesBase->SVCS_Services.mlh_Head;
    server_proc = (struct Process *) FindTask(0L);

    while(svc->svc_Node.ln_Succ)
    {
        server = (struct Server *) svc->svc_List.mlh_Head;

        while(server->serv_Msg.mn_Node.ln_Succ)
        {
            if(server->serv_Process == server_proc)
            {
                Remove(server);
                me = server;
                break;
            }
            server = (struct Server *) server->serv_Msg.mn_Node.ln_Succ;
        }
        if(me)
            break;
        svc = (struct Service *) svc->svc_Node.ln_Succ;
    }

    if(me)
    {
    	DeleteEntity(me->serv_Entity);
    	svc = me->serv_Service;
    	FreeMem(me,sizeof(struct Server));
    	if((svc->svc_List.mlh_Head == (struct MinNode *)&svc->svc_List.mlh_Tail) &&
    	   (svc->svc_Flags & SVCF_EXPUNGE))
    	{
    	    Remove(svc);
    	    FreeMem(svc,sizeof(struct Service));
    	}
    }
    else
    	DeleteEntity(servEntity);

    ReleaseSemaphore(&S_Lib->SVCS_ServicesLock);
}
@


37.1
log
@Initial revision
@
text
@d2 1
a2 1
** $Id: stopservice.c,v 1.1 92/03/18 18:40:50 kcd Exp Locker: kcd $
d51 2
a53 2
    ObtainSemaphore(&ServicesBase->SVCS_ServicesLock);

d91 1
a91 1
    ReleaseSemaphore(&ServicesBase->SVCS_ServicesLock);
@
