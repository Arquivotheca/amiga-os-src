head     37.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


37.6
date     92.12.16.14.26.54;  author kcd;  state Exp;
branches ;
next     37.5;

37.5
date     92.06.09.15.16.42;  author kcd;  state Exp;
branches ;
next     37.4;

37.4
date     92.06.09.15.04.09;  author kcd;  state Exp;
branches ;
next     37.3;

37.3
date     92.06.04.18.39.39;  author kcd;  state Exp;
branches ;
next     37.2;

37.2
date     92.04.14.14.59.41;  author kcd;  state Exp;
branches ;
next     37.1;

37.1
date     92.03.22.18.14.57;  author kcd;  state Exp;
branches ;
next     ;


desc
@Module for locating a service on another machine.
@


37.6
log
@Added a timeout to the findservice transaction.
@
text
@/*
** $Id: findservice.c,v 37.5 92/06/09 15:16:42 kcd Exp Locker: kcd $
**
** Module to find a service on a given machine
**
*/

/*--------------------------------------------------------------------------*/

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef EXEC_LISTS_H
#include <exec/lists.h>
#endif

#ifndef EXEC_SEMAPHORES_H
#include <exec/semaphores.h>
#endif

#ifndef EXEC_MEMORY_H
#include <exec/memory.h>
#endif

#ifndef ENVOY_NIPC_H
#include <envoy/nipc.h>
#endif

#include "services.h"
#include "servicesbase.h"
#include "servicesinternal.h"

#include <dos.h>
#include <string.h>

#include <clib/exec_protos.h>
#include <clib/nipc_protos.h>
#include <clib/utility_protos.h>

#include <pragmas/exec_pragmas.h>
#include <pragmas/nipc_pragmas.h>
#include <pragmas/utility_pragmas.h>

/*--------------------------------------------------------------------------*/

APTR ASM FindServiceA(REG(a0) STRPTR remoteHost,
                      REG(a1) STRPTR serviceName,
                      REG(a2) APTR srcEntity,
                      REG(a3) struct TagItem *tagList)
{
    APTR remote_entity;
    APTR local_entity;
    STRPTR remote_host = NULL;
    STRPTR hostnamebuff;
    APTR service_entity = NULL;
    struct Transaction *fs_trans;
    struct FindServiceReq *fsr;
    struct FindServiceAck *fsa;
    struct TagItem *tag;
    ULONG loc_sigs,mgr_error,svc_error,func_error, error;
    ULONG *err;

    func_error=0;

    if(local_entity = CreateEntity(ENT_AllocSignal, &loc_sigs,
                                    ENT_Name, "x",
                                    TAG_DONE, 0))
    {
        if(fs_trans = AllocTransaction(TRN_AllocReqBuffer, sizeof(struct FindServiceReq),
                                        TRN_AllocRespBuffer, sizeof(struct FindServiceAck),
                                        TAG_DONE, 0))
        {
            if(srcEntity)
            {
                if(hostnamebuff = AllocMem(256,MEMF_CLEAR|MEMF_PUBLIC))
                {
                    if(remoteHost)
                    {
                        strcpy(hostnamebuff,remoteHost);
                        remote_host = hostnamebuff;
                        DBMSG(("FindService() HostName: %s\n",hostnamebuff));
                    }

                    if(remote_entity = FindEntity(remote_host,MGR_ENTITY_NAME,local_entity,&mgr_error))
                    {
                        DBMSG(("Found Services Manager!\n"));
                        fsr = (struct FindServiceReq *) fs_trans->trans_RequestData;

                        strcpy(fsr->fsr_Service,serviceName);
                        fsr->fsr_UserName[0] = 0;
                        fsr->fsr_PassWord[0] = 0;

                        DBMSG(("Src: %lx, Dst: %lx\n",serviceName,fsr->fsr_Service));

                        if(tag = FindTagItem( FSVC_UserName, tagList))
                            strcpy(fsr->fsr_UserName,(STRPTR) tag->ti_Data);

                        if(tag = FindTagItem( FSVC_PassWord, tagList))
                            strcpy(fsr->fsr_PassWord,(STRPTR) tag->ti_Data);

                        DBMSG(("serviceName: %s\n",serviceName));
                        DBMSG(("FindService() fsr_Service : %s\n",fsr->fsr_Service));
                        DBMSG(("FindService() fsr_UserName: %s\n",fsr->fsr_UserName));
                        DBMSG(("FindService() fsr_PassWord: %s\n",fsr->fsr_PassWord));

                        fs_trans->trans_Command = MGRCMD_FINDSERVICE;
			fs_trans->trans_Timeout = 10;
                        DoTransaction(remote_entity,local_entity,fs_trans);
                        LoseEntity(remote_entity);

                        fsa = (struct FindServiceAck *) fs_trans->trans_ResponseData;

                        if (!(mgr_error = fs_trans->trans_Error))
                        {
                            DBMSG(("FindService: Server EntityName is %s\n",fsa->fsa_EntityName));
                            service_entity = FindEntity(remote_host,fsa->fsa_EntityName,srcEntity,&svc_error);
                            DBMSG(("FindService: Connected to server!\n"));
                        }
                    }
                    FreeMem(hostnamebuff,256);
                }
            }
            FreeTransaction(fs_trans);
        }
        DeleteEntity(local_entity);
    }

    if(func_error)
    {
        error = func_error;
    }
    else if(mgr_error)
    {
        error = mgr_error;
    }
    else
        error = svc_error;

    if(tag = FindTagItem( FSVC_Error, tagList))
    {
        err =(ULONG *) tag->ti_Data;
        *err = error;
    }

    return(service_entity);
}
@


37.5
log
@Changed occurences of appn to Envoy
@
text
@d2 1
a2 1
** $Id: findservice.c,v 37.4 92/06/09 15:04:09 kcd Exp Locker: kcd $
d108 1
a108 1

@


37.4
log
@Fixed a possible illegal FreeMem() call.
@
text
@d2 1
a2 1
** $Id: findservice.c,v 37.3 92/06/04 18:39:39 kcd Exp Locker: kcd $
d26 2
a27 2
#ifndef APPN_NIPC_H
#include <appn/nipc.h>
@


37.3
log
@Reworked for new Services Manager.
@
text
@d2 1
a2 1
** $Id: findservice.c,v 37.2 92/04/14 14:59:41 kcd Exp $
d87 1
d121 1
a121 1
                    FreeMem(remote_host,256);
@


37.2
log
@Added a small "hack" to fix a problem with unnamed entities.
@
text
@d2 1
a2 1
** $Id: findservice.c,v 37.1 92/03/22 18:14:57 kcd Exp Locker: kcd $
d4 1
a4 1
** Module to find a	service	on a given machine
d10 1
a10 1
#ifndef	EXEC_TYPES_H
d14 1
a14 1
#ifndef	EXEC_LISTS_H
d18 1
a18 1
#ifndef	EXEC_SEMAPHORES_H
d22 1
a22 1
#ifndef	EXEC_MEMORY_H
d26 1
a26 1
#ifndef	APPN_NIPC_H
d48 3
a50 3
					  REG(a1) STRPTR serviceName,
					  REG(a2) APTR srcEntity,
					  REG(a3) struct TagItem *tagList)
d52 92
a143 129
	APTR remote_entity;
	APTR local_entity;
	STRPTR remote_host = NULL;
	STRPTR hostnamebuff;
	APTR service_entity	= NULL;
	struct Transaction *fs_trans;
	struct FindServiceReq *fsr;
	struct FindServiceAck *fsa;
	struct TagItem *tag;
	ULONG loc_sigs,mgr_error,svc_error,func_error, error;
	ULONG *err;

	func_error=0;

	if(local_entity	= CreateEntity(ENT_AllocSignal,	&loc_sigs,
									ENT_Name, "x",
									TAG_DONE, 0))
	{
		if(fs_trans	= AllocTransaction(TRN_AllocReqBuffer, sizeof(struct FindServiceReq),
										TRN_AllocRespBuffer, sizeof(struct FindServiceAck),
										TAG_DONE, 0))
		{
			if(srcEntity)
			{
				if(hostnamebuff	= AllocMem(256,MEMF_CLEAR|MEMF_PUBLIC))
				{
					if(remoteHost)
					{
						strcpy(hostnamebuff,remoteHost);
						remote_host	= hostnamebuff;
						DBMSG(("FindService() HostName: %s\n",hostnamebuff));
					}

					while(TRUE)
					{
						if(remote_entity = FindEntity(remote_host,MGR_ENTITY_NAME,local_entity,&mgr_error))
						{
							fsr	= (struct FindServiceReq *)	fs_trans->trans_RequestData;

							strcpy(fsr->fsr_Service,serviceName);
                            fsr->fsr_UserName[0] = 0;
                            fsr->fsr_PassWord[0] = 0;

							DBMSG(("Src: %lx, Dst: %lx\n",serviceName,fsr->fsr_Service));

							if(tag = FindTagItem( FSVC_UserName, tagList))
								strcpy(fsr->fsr_UserName,(STRPTR) tag->ti_Data);

							if(tag = FindTagItem( FSVC_PassWord, tagList))
								strcpy(fsr->fsr_PassWord,(STRPTR) tag->ti_Data);

							DBMSG(("serviceName: %s\n",serviceName));
							DBMSG(("FindService() fsr_Service : %s\n",fsr->fsr_Service));
							DBMSG(("FindService() fsr_UserName: %s\n",fsr->fsr_UserName));
							DBMSG(("FindService() fsr_PassWord: %s\n",fsr->fsr_PassWord));

							fs_trans->trans_Command	= MGRCMD_FINDSERVICE;

							DoTransaction(remote_entity,local_entity,fs_trans);

							if (fs_trans->trans_RespDataActual != sizeof(struct	FindServiceAck))
							{
								DBMSG(("FindService: Bad Response size!\n"));
								LoseEntity(remote_entity);
								break;
							}
							fsa	= (struct FindServiceAck *)	fs_trans->trans_ResponseData;

							if (mgr_error =	fs_trans->trans_Error)
							{
								DBMSG(("FindService: Services Manager Error!\n"));
								LoseEntity(remote_entity);
								break;
							}

							if ((fsa->fsa_EntityName[0]	== 0) && (fsa->fsa_HostName[0]))
							{
								LoseEntity(remote_entity);

								if (tag=FindTagItem(FSVC_AnyHost,tagList))
								{
									if(tag->ti_Data == TRUE)
									{
										DBMSG(("FindService: Deferred to host %s\n",fsa->fsa_HostName));
										strcpy(hostnamebuff,fsa->fsa_HostName);
										remote_host	= hostnamebuff;
									}
								}
								else
								{
									break;
								}
							}
							else
							{
								LoseEntity(remote_entity);
								DBMSG(("FindService: Server EntityName is %s\n",fsa->fsa_EntityName));
								service_entity = FindEntity(remote_host,fsa->fsa_EntityName,srcEntity,&svc_error);
								DBMSG(("FindService: Connected to server!\n"));
								break;
							}
						}
						else
							break;
					}
					FreeMem(remote_host,256);
				}
			}
			FreeTransaction(fs_trans);
		}
		DeleteEntity(local_entity);
	}

	if(func_error)
	{
		error =	func_error;
	}
	else if(mgr_error)
	{
		error =	mgr_error;
	}
	else
		error =	svc_error;

	if(tag = FindTagItem( FSVC_Error, tagList))
	{
		err =(ULONG *) tag->ti_Data;
		*err = error;
	}
d145 1
a145 1
	return(service_entity);
@


37.1
log
@Inititial revision
@
text
@d2 1
a2 1
** $Id:	findservice.c,v	1.1	92/03/18 18:40:59 kcd Exp Locker: kcd $
d67 1
@
