TABLE OF CONTENTS

xxx.service/AttemptShutdown
xxx.service/GetServiceAttrsA
xxx.service/SetServiceAttrsA
xxx.service/StartService
xxx.service/AttemptShutdown                       xxx.service/AttemptShutdown

   NAME
       AttemptShutdown -- Inform a service that the system will be going down

   SYNOPSIS
       AttemptShutdown(desc, seconds)
                       A0    D0

       VOID AttemptShutdown(STRPTR, ULONG)

   FUNCTION
       This function provides a means for informing a service as a whole that
       it should try to shutdown within a specified amount of time.

   INPUTS
       desc        - Pointer to a string that contains a user-friendly
                     reason of why the service needs to be shut down.
                     May be NULL.

       seconds     - The number of seconds until the end of the world.  This
                     may be 0 if shutdown needs to be done immediately.

   NOTES
       This function is provided as a convenience to services such as
       filesystems that may wish to start refusing new connections and/or
       flush any buffered data to disk.

xxx.service/GetServiceAttrsA                     xxx.service/GetServiceAttrsA

   NAME
       GetServiceAttrsA -- obtain information about the service.
       GetServiceAttrs -- varargs stub for GetServiceAttrsA.

   SYNOPSIS
       GetServiceAttrsA(tagList)
                        A0

       VOID GetServiceAttrsA(struct TagItem *);

       GetServiceAttrs(Tag, ...)

       VOID GetServiceAttrs(Tag, ...);

   FUNCTION
       This function provides a method for determining information about
       the service.  Some of this data will be used by Services Manager
       for configuration.  There will also likely be a predefined set
       of Tags for information such as the names of the connected users,
       the current load on the service, etc.  Service implementors will
       also be able to define their own custom Tags for diagnostic/
       statistical purposes.

   INPUTS
       tagList     - A tagList containing the tags that you want to
                     get information about.

   TAGS
       Tags defined for GetServiceAttrsA():

       SVCAttrs_Name (STRPTR)  - The name of the service you are providing.
                                 (Required)


xxx.service/SetServiceAttrsA                     xxx.service/SetServiceAttrsA

   NAME
       SetServiceAttrsA -- set attributes of a service.
       SetServiceAttrs -- varargs stub for SetServiceAttrs

   SYNOPSIS
       SetServiceAttrsA(tagList)
                        A0

       VOID SetServiceAttrsA(struct TagItem *);

       SetServiceAttrs(Tag, ...)

       VOID SetServiceAttrs(Tag, ...);

   FUNCTION
       This function provides a method for setting attributes for a service.
       For instance, a configuration editor for the service may need to chang
e
       the name of the service, permissions, etc.  This function provides
       a standardized method for doing so.

   INPUTS
       tagList     - A list of TagItem structures to be used by the service
                     to modify it's operation.

   TAGS
       Tags defined for SetServiceAttrsA():

       SVCAttrs_Name (STRPTR)  - The name of the service you are providing.

xxx.service/StartService                             xxx.service/StartService

   NAME
       StartService -- Accept a new client connection

   SYNOPSIS
       StartService(userName, password, serviceReq)
                    A0        A1        A2

       VOID StartService(STRPTR, STRPTR, struct Transaction *);

   FUNCTION
       This function requests that a service take whatever steps are
       required to initiate a connection with a new client. The service
       is responsible for filling in the serviceRequest transaction's
       response data with the name of the Entity that the service will be
       using for the connection with the client.  The service should then
       call nipc.library/ReplyTransaction() on the serviceRequest.

   INPUTS
       userName    - Pointer to the name of the user requesting the
                     service.

       password    - Pointer to the user's password as sent by the client.
                     (So that services may use some form of encryption if
                     they so choose.)

       serviceReq  - Pointer to the transaction sent by the client that
                     is requesting your service.  Fill in the transacation's
                     response data with the name of the Entity you will be
                     using for communicating with the client.

   NOTES
       Do NOT depend on the data in the transaction structure.  You are
       guaranteed to break in the future if you do so.

