head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     93.07.21.13.48.45;  author jesup;  state Exp;
branches ;
next     ;


desc
@Checkin of Greg's unreleased work
@



1.1
log
@Initial revision
@
text
@
#include <stdio.h>
#include <exec/types.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/dosasl.h>
#include <exec/memory.h>

main()
{

    struct AnchorPath *ap;

    ap = (struct AnchorPath *) AllocMem(sizeof(struct AnchorPath) + 255, MEMF_CLEAR);
    if (ap)
    {
        int err;
        ap->ap_Strlen = 255;
        ap->ap_Flags = APF_DOWILD;
        ap->ap_BreakBits = SIGBREAKF_CTRL_C;
        err = MatchFirst("#?",ap);
        if (err)
        {
            err = IoErr();
            if (err != ERROR_NO_MORE_ENTRIES)
                PrintFault(err,NULL);
        }
        else
        {
            struct FileLock *l;
            struct MsgPort *m;
            do
            {
                if (ap->ap_Flags & APF_DIDDIR)
                {
                    ap->ap_Flags &= ~APF_DIDDIR;
                    continue;
                }
                if (ap->ap_Info.fib_DirEntryType >= 0)
                {
                    ap->ap_Flags |= APF_DODIR;
                }
                if (CheckSignal(SIGBREAKF_CTRL_C))
                {
                    PrintFault(ERROR_BREAK,NULL);
                    break;
                }
                if (ap->ap_Current->an_Lock)
                {
                    m = ((struct FileLock *) BADDR(ap->ap_Current->an_Lock))->fl_Task;
                    l = (struct FileLock *) ap->ap_Current->an_Lock;
                }
                else
                {
                    struct FileLock *c;
                    struct FileLock *d;
                    c = (struct FileLock *) CurrentDir(0L);
                    d = (struct FileLock *) DupLock(c);
                    CurrentDir(c);
                    m = (struct MsgPort *) d->fl_Task;
                    l = (struct FileLock *) d;
                }

                if (m)
                {
                    int res1, res2;
                    ULONG p,g;
                    UBYTE *b;
                    b = (UBYTE *) AllocMem(256,0);
                    printf("File: %s\n",ap->ap_Info.fib_FileName);
                    p = ap->ap_Info.fib_Protection;
                    g = ((~p) & 0xF);
                    p &= ~0xff0;
                    p |= (g << 8) | (g << 12);
                    CopyMem(ap->ap_Info.fib_FileName,&b[1],strlen(ap->ap_Info.fib_FileName)+1);
                    b[0]=strlen(&b[1]);
                    res1 = DoPkt(m,ACTION_SET_PROTECT,0,l,MKBADDR(b),p,0);
                    res2 = IoErr();
                    if (!res1)
                    {
                        PrintFault(res2);
                    }
                    FreeMem(b,256);
                }
            }
            while (!MatchNext(ap));
        }
        MatchEnd(ap);
        FreeMem(ap,sizeof(struct AnchorPath));
    }
}


@
