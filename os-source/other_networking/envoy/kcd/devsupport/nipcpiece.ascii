Structure and Function call Overview







struct Transaction

{

	struct Message trans_Msg;

	struct Entity *trans_SourceEntity;   

	struct Entity *trans_DestinationEntity;

	UBYTE          trans_Command;        

	UBYTE          trans_Type;           

	ULONG          trans_Error;          

	ULONG          trans_Flags;

	ULONG          trans_Sequence;

	APTR           trans_RequestData;

	ULONG          trans_ReqDataLength;

	ULONG          trans_ReqDataActual;

	APTR           trans_ResponseData;

	ULONG          trans_RespDataLength; 

	ULONG          trans_RespDataActual;

	UWORD          trans_Timeout;

};



trans_Msg

Used internally by nipc.library.  Do not use or examine.



trans_SourceEntity

This is the entity from which the Transaction originated.  This is filled in by 
Begin/DoTransaction().  It may be examined by the responder.  The common use of this 
field is for a responder who has just received a Transaction from another Entity to pass 
into GetHostName() or GetEntityName() - to determine the name of the Entity that sent 
the Transaction, and the name of the machine from which that Transaction originiated.



trans_DestinationEntity

Used internally by nipc.library.  Do not use or examine.



trans_Command

This field is filled in by the originator of the Transaction and may be examined by the 
responder.  It is generally only read by the responder.  This field is generally used to 
indicate the particular action the originator desires the responder to perform.  It is 
analogous to the IORequest io_Command field.  Note that, unlike with Exec Device I/O, 
there are no standard responder commands which all requesters can expect all 
responders to understand.



trans_Type

One of TYPE_REQUEST, TYPE_RESPONSE or TYPE_SERVICING.  A Transaction is 
always in one of three phases - the Request phase, between the time it is 
Begin/DoTransaction()'d and the time the server GetTransaction()'s it from it's 
destination Entity; the Servicing phase, between GetTransaction()'ing it, and 
ReplyTransaction()'ing it; and lastly the Response phase, which begins when the 
Transaction is returned to it's Source Entity.  The most common use of this field is to 
determine if a Transaction obtained from GetTransaction() is a Request from another 
Entity, or merely a returning Transaction that was originally sent from this Entity.



trans_Error

Both nipc.library and the user may write and examine this field.  It is cleared (set to 
ENVOYERR_NOERROR) on a call to Do/BeginTransaction().  If the Transaction can be 
successfully copied locally or over the network, any value placed in this field by the 
responder will be here.  If the Transaction cannot be copied for some reason, 
nipc.library will place it's error code here.  Common error codes are defined in 
<envoy/errors.h>.  Human-understandable text errors can be obtained from these error 
numbers with a call to envoy.library [NOT YET AVAILABLE].



trans_Flags

This field is a series of nipc.library flags.  These flags indicate several things, including 
who is responsible for freeing buffers.  Flags should not be set or cleared by the user 
except through NIPC functions or as permitted by comments in the Includes.

  

trans_Sequence

Used internally by nipc.library.  Do not use or examine.



trans_RequestData

Pointer to any data needed from the requester by the responder.  This may be NULL if 
trans_ReqDataActual is zero, indicating that no request data was necessary.  The 
responder should make no changes to data in this buffer!  Programs which do will 
behave differently in networked vs. local Transactions.



trans_ReqDataLength

Length of the buffer pointed to by trans_RequestData.  It is eventually used by the 
allocator of the buffer to free the buffer. 



trans_ReqDataActual

Length of data in the buffer pointed to by trans_RequestData which will actually be used 
by the responder.  This allows re-used Transaction structures to have large buffers 
which aren't copied across the network if the whole buffer isn't filled with data.  This may 
be NULL if no data is to be sent to the responder.



trans_ResponseData

Pointer to a buffer into which any reply will be placed by the responder.  This may be 
NULL if trans_RespDataLength is NULL.  Currently this must be allocated by the 
requester, either at AllocTransaction() time or subsequently prior to 
Do/BeginTransaction().



trans_RespDataLength

Length of the buffer pointed to by trans_ResponseData.  It is eventually used by the 
allocator of the buffer to free the buffer.  The allocator of the buffer is never the 
responder. 



trans_RespDataActual

Length of the data in the buffer pointed to by trans_ResponseData actually placed there 
by the responder.  This allows the responder to specify that the information it is 
returning is smaller than the buffer provided in order to avoid unnecessary copying 
unused buffer across the network.



trans_Timeout

This is the value in seconds that the requester expects as the maximum time for the 
responder to spend processing the request.  nipc.library will add to this value the 
maximum time it expects the transfer of data between the Entities to take (this is 
variable depending on the distance of the machines communicating).  If a Transaction 
exceeds the total timeout and NIPC can abort the Transaction, it will be returned to the 
requester with trans_Error set to ENVOYERR_TIMEOUT.  Though no timeout will be 
used if trans_Timeout is set to zero, most Transactions should have a timeout.  If there 
is no timeout, a Transaction received by the responder but not replied (i.e., because the 
machine crashed before getting to the reply) would never be returned (unless the 
requester called AbortTransaction()).  Thus, all programs should specify a Timeout 
other than zero or eventually call AbortTransaction() themselves.  



On the requester's side, Transactions are moved around with nipc.library functions 
which look and act much like Exec Device I/O functions.  Instead of DoIO(), WaitIO(), 
CheckIO(), AbortIO() and BeginIO(), nipc.library has DoTransaction(), 
WaitTransaction(), CheckTransaction(), AbortTransaction() and BeginTransaction().  



DoTransaction(dest_entity, src_entity, transaction)

an easy-to-use Transaction function.  It initiates a Transaction and waits for its 
completion.  This is a synchronous function; it does not return until completion of the 
Transaction.  If the Transaction never completes, this call never returns.  Non-trivial 
programs should avoid the use of this function in order to continue processing break 
signals or other user input.  Use BeginTransaction() and Wait() on the Entity's signal bit 
instead. 



BeginTransaction(dest_entity, src_entity, transaction)

initiates a Transaction without waiting for completion.  This is an asynchronous 
Transaction; control returns immediately.  Use GetTransaction() on src_entity to get the 
replied Transaction.



transaction = GetTransaction(entity)

Gets replied Transactions off of your source Entity.  You should use Wait() or 
WaitTransaction() rather than continuously polling.  Once woken up from a 
Wait(Transaction)(), you should loop on GetTransaction() while it returns something 
other than NULL to get all Transactions off the Entity.   



WaitTransaction(transaction)

Waits for the completion of a previously initiated asynchronous Transaction.  This 
function will not return control until the Transaction has completed (successfully or 
unsuccessfully).  Programs should not WaitTransaction() on a Transaction that has not 
actually been sent.



status = CheckTransaction(transaction)

Examines a previously queued Transaction, and returns information on whether it has 
completed or not.



AbortTransaction(transaction)

attempts to cancel a Transaction.  AbortTransaction() may fail; if it succeeds, the 
Transaction is replied by NIPC earlier than it may otherwise have been replied.  
Programs must wait for the reply before actually reusing the Transaction.  
AbortTransaction() takes no action on Transactions which are already completed.  

The responder's side of a Transaction uses functions which are similar to those that 
manipulate Exec Ports and Messages.  Rather than WaitPort(), GetMsg() and 
ReplyMsg(), there are WaitEntity(), GetTransaction() and ReplyTransaction().



WaitEntity(localentity)

Waits for a Transaction to arrive at an Entity.  Non-trivial programs should avoid using 
this function in order to continue processing break signals or other user input.  Use 
Wait() on the Entity's signal bit instead.



transaction = GetTransaction(entity)

Transactions must be removed from Entities on the responder's side of a Transaction 
with a call to GetTransaction(). 



Once a responder is done processing a Transaction, it must return the Transaction to 
the requester using the ReplyTransaction() function.



Unlike Exec Ports which can be created manually or with an amiga.lib function, Entities 
must be created and destroyed with nipc.library or services.library functions.  



myentity = CreateEntity(tag1, ...)

creates a new Entity which will can be used for calls to WaitEntity() and 
GetTransaction().  Entities created with CreateEntity() must eventually be deleted with 
DeleteEntity().



DeleteEntity(entity)

deletes an Entity created by CreateEntity().  Do not use on Entities found with 
FindEntity() (see below).



Although the Entity structure is not publicly defined, two functions are provided to return 
some information about a given Entity.	

	

success = GetHostName(entity, stringptr, available)

provides the name of the host on which a given Entity was created.  This is useful to 
responders that need to know which machines they are responding to.



success = GetEntityName(entity stringptr available)

provides the name of the Entity.  This is primarily useful to responders that need to 
know  the name of the Entities to which they are responding.



For more details on how to use Transactions, review the Examples section of this 
article, see the nipc.library Autodocs and review the "Exec:Messages and Ports" and 
"Exec:Input/Output" chapters of the ROM Kernel Reference Manual: Libraries.



remoteentity = FindEntity(host, entityname, src_entity, errptr)

Finds an Entity created by CreateEntity().  This Entity may be used as the destination of 
a Do/BeginTransaction().  Entities found with FindEntity() must eventually be forgotten 
with a call to LoseEntity().



LoseEntity(entity)

Forgets about an Entity found with a call to FindEntity().





