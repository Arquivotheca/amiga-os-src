TABLE OF CONTENTS

nipc.library/BeginTransaction()
nipc.library/DoTransaction()
nipc.library/AbortTransaction()
nipc.library/WaitTransaction()
nipc.library/CheckTransaction()
nipc.library/AllocTransaction()
nipc.library/FreeTransaction()
nipc.library/CreateEntity()
nipc.library/DeleteEntity()
nipc.library/WaitEntity()
nipc.library/FindEntity
nipc.library/LoseEntity
nipc.library/GetTransaction()
nipc.library/ReplyTransaction()
nipc.library/WaitTransaction()
nipc.library/GetHostName()
nipc.library/GetEntityName()

 nipc.library/BeginTransaction                   nipc.library/BeginTransaction

   NAME
        BeginTransaction -- Start an IPC transaction

   SYNOPSIS
        BeginTransaction(dest_entity,src_entity,transaction)
                        A0          A1         A2

        VOID BeginTransaction(APTR, APTR, struct transaction *)

   FUNCTION
        Attempts to begin a transaction (described appropriately by the
        transaction structure) to a given entity.

   INPUTS
        dest_entity - An abstract data type - a "magic cookie" - that
            identifies the destination entity.  (From FindEntity.)
        src_entity  - An abstract data type - a "magic cookie" - that
            identifies the source entity.  (From CreateEntity.)
        transaction - a pointer to a 'transaction' structure, which describes
            the details of this specific transaction.

   RESULT
        none

   EXAMPLE
        BeginTransaction(remote_entity,our_Entity,transactionptr);

   NOTES
        After this function begins, the transaction structure passed becomes
        the property of the ipc.library, and CANNOT be freed up until this
        transaction returns onto the local ReplyPort.  Once the transaction
        returns onto the local ReplyPort, the programmer should check
        trans_Error, to verify that it completed properly.

        Because of the fact that data transmission isn't an instantaneous
        operation, a limit must be imposed on exactly how many transactions
        can be queued up at any given time.  Otherwise, it's entirely possible
        for an application program to overflow the throughput of any given
        networking protocol, and pretty much gobble up all available RAM until
        the system falls flat on it's face.  Thus:

   IMPORTANT NOTE:
        BeginTransaction may not return immediately.  If the window size of
        the underlying protocol won't allow for the queueing of any more data,
        BeginTransaction will Wait() until that case is no longer true.  If
        any such wait is unacceptable, set NOWAIT in trans_Flags of your
        Transaction. If this flag is set, and BeginTransaction is about to
        enter a Wait() state, it will return the Transaction on the source
        entity with the trans_Error field set to TERROR_ABOUTTOWAIT.


   BUGS
        None known.

   SEE ALSO
        DoTransaction, AbortTransaction, WaitTransaction, CheckTransaction,

 nipc.library/DoTransaction                         nipc.library/DoTransaction

   NAME
        DoTransatcion -- Process a transaction and wait for completion.

   SYNOPSIS
        DoTransaction(dest_entity,src_entity,transaction)
                   A0          A1         A2

        VOID DoTransaction(APTR, APTR, struct transaction *);

   FUNCTION
        Processes an entire transaction; it sends the request to the host
        entity, awaits the response, or returns at any point because of an
        error.

   INPUTS
        dest_entity - An abstract data type - a "magic cookie" - that
            identifies the destination entity.  (From FindEntity.)
        src_entity  - An abstract data type - a "magic cookie" - that
            identifies the source entity.  (From CreateEntity.)
        transaction - a pointer to a 'transaction' structure, which describes
            the details of this specific transaction.

   RESULT
        none

   EXAMPLE
        DoTransaction(remote_entity,local_entity,transactionptr);

   NOTES
        This function entirely implements an entire transaction; it causes
        the machine to go into a Wait() state until the transaction is
        complete (or can't be completed).  After a DoTransaction() call, the
        programmer should check the trans_Error field to verify that the
        transaction was completed properly.  This may return errored if a
        timeout occurs.

   BUGS
     None known.

   SEE ALSO

 nipc.library/AbortTransaction                   nipc.library/AbortTransaction

   NAME
        AbortTransaction -- Abort an attempted transaction.

   SYNOPSIS
        AbortTransaction(transaction)
                         A1

        VOID AbortTransaction(struct transaction *);

   FUNCTION
        Aborts a transaction that was previously started by a call to
        BeginTransaction.

   INPUTS
        transaction - a pointer to a 'transaction' structure, which describes
            the details of this specific transaction.

   RESULT
        If the transaction hadn't already been completed (or failed), it will
        be immediately aborted, and placed on the local ReplyPort.

   EXAMPLE
        AbortTransaction(oldtransaction);

   NOTES
        If the transaction given has already completed (or failed), no action
        will be taken.

   BUGS
        None known.

   SEE ALSO

 nipc.library/CheckTransaction                   nipc.library/CheckTransaction

   NAME
        CheckTransaction -- Check whether a transaction has completed or not.

   SYNOPSIS
        status = CheckTransaction(transaction);
        D0                        A1

        BOOL CheckTransaction(struct transaction *);

   FUNCTION
     Provides a mechanism for determining whether a transaction previously
     queued with the BeginTransaction function has completed.  The function
     will return TRUE if the transaction is complete (or failed), and FALSE
     if the transaction is still in progress.

   INPUTS
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     none

   EXAMPLE
     if (!CheckTransaction(transaction))
        printf("It's still going.");

   NOTES
     The problem that occurs with CheckIO and previously unused IORequests
     will likely occur here as well - with the exception that an ln_Type
     of NT_UNKNOWN (0) should cause the function to return FALSE - as
     it couldn't have completed if it never was queued.

   BUGS
     None known.

   SEE ALSO

 nipc.library/AllocTransaction                   nipc.library/AllocTransaction

   NAME
        AllocTransaction -- Allocate a transaction structure.

   SYNOPSIS
        transaction = AllocTransaction(taglist)
        D0                             A0

        struct Transaction * AllocTransaction(struct TagItem *);

   FUNCTION
        Given the appropriate taglist, this function will attempt to create a
        transaction structure for the user.

   INPUTS
        taglist -- A pointer to a list of tags defining options and
            requirements for the structure.

   TAGS
        TRN_ALLOCREQBUFFER:
            Attempts to allocate a request buffer for you of the
            size in the ti_Data field of this TagItem.
        TRN_ALLOCRESPBUFFER:
            Attempts to allocate a response buffer for you of the
            size in the ti_Data field of this TagItem.

   IMPORTANT NOTE:
        You are completely free to allocate your own buffer space
        for either a request or a response buffer.  If you do,
        however, -you- are responsible for freeing them.

   RESULT
        transaction -- If conditions permit, AllocTransaction() will return
            a pointer to a Transaction structure.  If the library is unable
            to either allocate memory or meet the requirements set by the tags
            passed, the function will return a NULL.

   EXAMPLE
        struct Transaction *mytrans;
        ULONG mytags[1]={TAG_DONE};
        mytrans = AllocTransaction(&mytags);

   NOTES
        There should probably be AllocTransactionTags() as well, in the same
        manner that the dos.library allows.

   BUGS
        None known.

   SEE ALSO

 nipc.library/FreeTransaction                     nipc.library/FreeTransaction

   NAME
        FreeTransaction -- Free up a previously allocated Transaction
            structure.

   SYNOPSIS
        FreeTransaction(transaction)
                        A1

        VOID FreeTransaction(struct Transaction *);

   FUNCTION
        Any Transaction structures created by AllocTransaction (which ought
        be ALL of them), must be deallocated with FreeTransaction().
        FreeTransaction() frees up only the transaction structure and any
        portions of the structure that were allocated by the
        AllocTransaction() function.

   INPUTS
        transaction - a pointer to a 'transaction' structure, which describes
            the details of this specific transaction.

   RESULT
        none

   EXAMPLE
        struct Transaction *transact;
        FreeTransaction(transact);

   NOTES
        Don't try to free up anything that wasn't allocated by
        AllocTransaction.

   BUGS
        None known.

   SEE ALSO

 nipc.library/CreateEntity                           nipc.library/CreateEntity

   NAME
        CreateEntity -- Creates an entity for communication.

   SYNOPSIS
        myentity = CreateEntity(taglist)
        D0                      A0

        APTR CreateEntity(struct TagItem *);

   FUNCTION
        This function allows you to create an entity for one endpoint
        for communication.  Given the appropriate tags, you may declare that
        this entity is public - and therefore can receive requests.

   INPUTS
        taglist -- a list of tags that declare items such as the port name
                (which is only necessary for public ports), signal bits, etc.

   TAGS
        ENT_NAME:
            Allows the user to declare the name for this entity.
        ENT_PUBLIC:
            If included, this entity is _public_, and can be found by a
            FindEntity call.  To declare an entity public, you must also
            declare the entity name.
        ENT_SIGNAL:
            Defines that when something arrives at this entity, the given
            signal bit (bit number, not mask) should be set.  (Useful when you
            intend to maintain a LOT of entities - more than possible to
            allocate a single signal bit for each.  In this method, a large
            number of entities share the signal bit.  The downside is that
            every entity with that bit must be checked when the bit is found
            set.)
        ENT_ALLOCSIGNAL:
            Asks that CreateEntity allocate a signal bit from the current
            context, and set it whenever the entity receives any data, to set
            that bit.  The ti_Data field of this TagItem must be a pointer
            to a ULONG which CreateEntity will fill in with the bit number,
            such that you know what bit number to Wait() on.

   RESULT
        entity - a 'magic cookie' that defines your entity, or NULL for
            failure.

   EXAMPLE
        ULONG signalbitnum;
        ULONG tags[8]={ENT_PUBLIC,0,ENT_NAME,"My Entity!",ENT_ALLOCSIGNAL,
                    &signalbitnum,TAG_DONE,0};
        APTR ourentity;
        ourentity = CreateEntity(&tags);

   NOTES
        ENT_SIGNAL and ENT_ALLOCSIGNAL are mutually exclusive.
        ENT_PUBLIC requires that you also provide ENT_NAME.
        I'm debating the usefulness of allowing anyone to create an entity
        with NO signals.

   BUGS
        None known.

   SEE ALSO

 nipc.library/DeleteEntity                           nipc.library/DeleteEntity

   NAME
        DeleteEntity -- Delete an Entity

   SYNOPSIS
        DeleteEntity(entity);
                     A0

        VOID DeleteEntity(APTR);

   FUNCTION
        DeleteEntity is the converse of CreateEntity.  It removes the
        entity from any ipc lists that it may have been attached to,
        frees up any resources attached to this entity that were
        allocated by CreateEntity, and frees up the actual entity
        structure.

   INPUTS
        entity - a 'magic cookie' that defines your entity

   RESULT
        none

   EXAMPLE
        APTR myentity;
        DeleteEntity(myentity);

   NOTES
        Make sure that there aren't any transactions pending on this
        entity before you call DeleteEntity.  Since a transaction could
        arrive between the time you call DeleteEntity and the time
        that DeleteEntity removes your entity from the system list,
        it might be wise to either remain in a Forbid() state while
        you make sure the entity is empty, and DeleteEntity() it, or
        to provide a RemoveEntity() function that removes public entities
        from the ipc lists.  (Therefore preventing anything from arriving
        at them.)

   BUGS
        None known.

   SEE ALSO

 nipc.library/WaitEntity                              nipc.library/WaitEntity

   NAME
        WaitEntity -- Waits for something to arrive at an entity

   SYNOPSIS
        WaitEntity(localentity)
                   A0

        VOID WaitEntity(APTR);

   FUNCTION
        WaitEntity simply causes the current process to Wait() until
        something arrives at the entity (either a transaction, a
        transaction response, or a failed transaction).

   INPUTS
        entity - An abstract data type - a "magic cookie" - that
            identifies an entity.

   RESULT
        none

   EXAMPLE
        APTR ourentity;
        WaitEntity(ourentity);

   NOTES
        This is potentially dangerous - if nothing ever arrives at this
        entity, this function will never return.

   BUGS
        None known.

   SEE ALSO

 nipc.library/FindEntity                               nipc.library/FindEntity

   NAME
        FindEntity -- Locate a specific entity on a certain host

   SYNOPSIS
        remote_entity = FindEntity(hostname,entityname,src_entity)
        D0                         A0       A1         A2

        APTR FindEntity(STRPTR, STRPTR, APTR);

   FUNCTION
        Attempts to locate a certain entity on a given host.
        If you pass a NULL for the entityname, FindEntity will
        interpret that as "the local machine".

   NETWORKING STUFF
        Since the references to both the entity and the host are by name,
        there isn't an adherence to a specific addressing scheme - and
        therefore no dependance on a certain type of networking.  Note that
        while the context of transactions is strictly a connectionless
        protocol, some bookkeeping about networking information is required.  Thus,
        FindEntity allocates a bookkeeping structure.  This is why we
        need a LoseEntity call for each FindEntity.

   INPUTS
        hostname - a null-terminated string declaring the host name of
            the machine in whose list of entities you expect to find
            the entity named by 'entityname'.  NULL for the
            local machine.
        entityname - a null-terminated string declaring the name of a
            public entity.
        src_entity - an Entity returned by CreateEntity that you wish to use
            as the 'near' side of a communications path.

   RESULT
        remote_entity - NULL if the given entity cannot be found. Otherwise,
            the magic cookie describing the entity that you found.

   EXAMPLE
        APTR ourentity, *remote_entity;
        our_entity = CreateEntity(&taglist);
        remote_entity = FindEntity("itchy","Remote Print Server",our_entity);

   NOTES
        If you do a FindEntity to a different machine, and it succeeds,
        you have no guarantee that the remote machine's entity will
        continue to exist.  Because of this, you should check all returned
        transactions for error status - if a transaction to a remote
        entity fails because the ipc.library can no longer find the remote
        entity, the transaction will be returned as errored.
        Regardless of what happens, every SUCCESSFUL FindEntity() REQUIRES an
        associated LoseEntity.

   BUGS
     None known.

   SEE ALSO

 nipc.library/LoseEntity                               nipc.library/LoseEntity

   NAME
        LoseEntity -- Free up any resources attached from a FindEntity

   SYNOPSIS
        LoseEntity(entity)
                  A0

        VOID LoseEntity(APTR);

   FUNCTION
        This will merely free up any resources allocated with a
        successful FindEntity() call.

   INPUTS
        entity - An abstract data type - a "magic cookie" - that
            identifies an entity.
   RESULT
        none

   EXAMPLE
        APTR foundentity;
        LoseEntity(foundentity);

   NOTES
        LoseEntity should only be used on entities returned by FindEntity.
        If you attempt to use LoseEntity on one created by CreateEntity,
        you're asking for trouble.

   BUGS
        None known.

   SEE ALSO

 nipc.library/GetTransaction                       nipc.library/GetTransaction

   NAME
        GetTransaction -- receive the next transaction waiting on an entity

   SYNOPSIS
        transaction = GetTransaction(entity)
        D0                           A0

        struct Transaction *GetTransaction(APTR);

   FUNCTION
        GetTransaction attempts to remove the next available Transaction
        from the given entity.

   INPUTS
        entity - An entity created by CreateEntity.  (-Not- from FindEntity
            as you're not allowed to read from someone else's entity.)

   RESULT
        transaction - NULL if no transactions are waiting or a pointer to a
            Transaction structure otherwise.

   EXAMPLE
        APTRlocalentity;
        struct Transaction *mytrans;
        mytrans = GetTransaction(localentity);

   NOTES
        After a successful GetTransaction, you should check the type of
        transaction to determine whether it's a request, or a
        returned failed request/response that was previously
        BeginTransaction'd from this entity.

   BUGS
     None known.

 nipc.library/ReplyTransaction                   nipc.library/ReplyTransaction

   NAME
        ReplyTransaction -- Reply a request transaction

   SYNOPSIS
        ReplyTransaction(transaction);
                         A1

        ReplyTransaction(struct Transaction *);

   FUNCTION
        This causes a transaction received from another entity to be
        returned to the sender.  You may return data with the
        transaction as well.  (See the Transaction structure
        definition for details.)

   INPUTS
        transaction - a pointer to a transaction structure that was
            returned by a previous GetTransaction() call.

   RESULT
        none

   EXAMPLE
        struct Transaction *trans;
        ReplyTransaction(trans);

  NOTES
        The use of this function falls within the domain of a server -
        where after receiving a transaction request via GetTransaction(),
        it needs to be fufilled and replied back to the sender via
        ReplyTransaction.

   BUGS
        None known.

   SEE ALSO

 nipc.library/WaitTransaction                     nipc.library/WaitTransaction

   NAME
        WaitTransaction -- Waits for a transaction to complete

   SYNOPSIS
        WaitTransaction(transaction)
                        A1

        VOID WaitTransaction(struct Transaction *);

   FUNCTION
        Waits for the given transaction to complete, or return failed.

   INPUTS
        transaction -- a pointer to a transaction structure

   RESULT
        none

   EXAMPLE
        struct Transaction *trans;
        WaitTransaction(trans);

   NOTES
        When doing networked transactions, if for any reason the remote
        machine fails to send a response, the transaction will eventually
        time out, and return as a failed transaction.

        If you attempt to WaitTransaction() on a transaction that has
        already been responded to, WaitTransaction() will return
        immediately.

   BUGS
        None known.

   SEE ALSO

 nipc.library/GetEntityName                         nipc.library/GetEntityName

   NAME
        GetEntityName -- Get the ASCII name associated with an entity.

   SYNOPSIS
        status = GetEntityName(entity,stringptr,available);
                              A0      A1        D0

        BOOL GetEntityName(APTR, STRPTR, ULONG);

   FUNCTION
        Given a pointer to a string, the length of the string data area, and
        an entity magic-cookie, this function will attempt to return the ascii
        name associated with the entity.

   INPUTS
        entity - A magic cookie, identifying an entity.
        stringptr - A pointer to a section of memory that you'd like the name
            copied into.
        available - The size of the above string area.

   RESULT
        status - Either TRUE or FALSE.  Note that even if you've referenced an
            entity, over a network - it's possible that resolving what the
            correct name is COULD fail.

   EXAMPLE
        char mystring[80];
        if (GetEntityName(transaction->trans_SrcEntity,&mystring,80))
            printf("The name is %s\n",mystring);

   NOTES
        Note that the string returned could be nulled - implying that this
        entity has no name.

   BUGS
        The fact that it could return no name at all (null string) makes me
        wonder if we should insist that every entity be named - which would
        cause it to ALWAYS return a name.

   SEE ALSO

 nipc.library/GetHostName                             nipc.library/GetHostName

   NAME
        GetHostName -- Get the ASCII name associated with the host on which
                    a certain entity lies.

   SYNOPSIS
        status = GetHostName(entity,stringptr,available)
        D0                   A0     A1        D0

        BOOL GetHostName(APTR, STRPTR, ULONG);

   FUNCTION
        Given a pointer to a string, the length of the string data area, and
        an entity magic-cookie, this function will attempt to return the ascii
        name associated with the host that the entity is on.

   INPUTS
        entity - A magic cookie, identifying an entity.
        stringptr - A pointer to a section of memory that you'd like the name
            copied into.
        available - The size of the above string area.

   RESULT
        status - Either TRUE or FALSE.  Note that even if you've referenced an
            entity over a network - it's _possible_ that resolving what the
            correct name is COULD fail.

   EXAMPLE
        char mystring[80];
        if (GetHostName(transaction->trans_SrcEntity,&mystring,80))
            printf("The host name is %s\n",mystring);

   NOTES

   BUGS
        None known.

   SEE ALSO

