TABLE OF CONTENTS

nipc.library/AbortTransaction
nipc.library/AllocTransactionA
nipc.library/BeginTransaction
nipc.library/CheckTransaction
nipc.library/CreateEntityA
nipc.library/DeleteEntity
nipc.library/DoTransaction
nipc.library/FindEntity
nipc.library/FreeTransaction
nipc.library/GetEntityName
nipc.library/GetHostName
nipc.library/GetTransaction
nipc.library/LoseEntity
nipc.library/NIPCInquiryA
nipc.library/PingEntity
nipc.library/ReplyTransaction
nipc.library/WaitEntity
nipc.library/WaitTransaction
nipc.library/AbortTransaction                   nipc.library/AbortTransaction

   NAME
     AbortTransaction -- Abort an attempted transaction.

   SYNOPSIS
     AbortTransaction(transaction)
                          A1

     VOID AbortTransaction(struct Transaction *);

   FUNCTION
     Aborts a Transaction that was previously started by a call to
     BeginTransaction().

   INPUTS
     transaction - Pointer to the Transaction to abort.

   RESULT
     If the transaction hadn't already been completed (or failed), it will
     be immediately aborted, and placed on the local Entity.

   EXAMPLE

   NOTES
     Because local Transactions are passed by reference, a transaction
     sent to a local Entity can be in such a state (being processed)
     where another process may be referencing them.  To ensure that
     a Transaction is either aborted or completed, an AbortTransaction()
     call should be followed by a WaitTransaction().  If the transaction
     given has already completed (or failed), no action will be taken.

   BUGS

   SEE ALSO
     WaitTransaction(), DoTransaction(), BeginTransaction(),
     CheckTransaction()

nipc.library/AllocTransactionA                 nipc.library/AllocTransactionA

   NAME
     AllocTransactionA -- Allocate a transaction structure.

   SYNOPSIS
     transaction = AllocTransactionA(taglist)
        D0                             A0

     struct Transaction *AllocTransactionA(struct TagItem *);
     struct Transaction *AllocTransaction(tag1, tag2, tag3, ...);

   FUNCTION
     This function will attempt to create a Transaction structure
     for the user.

   INPUTS
     taglist -- A pointer to a list of tags defining options and requirements
                for the structure.

                TRN_AllocReqBuffer:
                 Attempts to allocate a request buffer for you of the
                 size in the ti_Data field of this TagItem.
                 (default: no request buffer)
                TRN_AllocRespBuffer:
                 Attempts to allocate a response buffer for you of the
                 size in the ti_Data field of this TagItem.
                 (default: no response buffer)

                A NULL taglist will yield the defaults.

   RESULT
     transaction -- If conditions permit, AllocTransaction() will return
                    a pointer to a Transaction structure.  If the library is
                    unable to either allocate memory or meet the requirements
                    set by the tags passed, the function will return a NULL.

   EXAMPLE

   NOTES
                You are completely free to allocate your own buffer space
                for either a request or a response buffer.  If done, you
                are also responsible for freeing them.

   BUGS

   SEE ALSO

nipc.library/BeginTransaction                   nipc.library/BeginTransaction

   NAME
     BeginTransaction -- Start an NIPC Transaction

   SYNOPSIS
     BeginTransaction(dest_entity,src_entity, transaction)
                         A0          A1          A2

     VOID BeginTransaction(struct Entity *,struct Entity *,
                           struct Transaction *);

   FUNCTION
     Attempts to begin a transaction (described appropriately by the
     transaction structure) to a given entity.

   INPUTS
     dest_entity - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From FindEntity().)
     src_entity  - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From CreateEntity().)
     transaction - a pointer to the Transaction to start.

   RESULT
     None.

   EXAMPLE

   NOTES
     After this function begins, the Transaction structure passed becomes
     the property of the nipc.library, and CANNOT be freed until this
     Transaction returns to the source Entity.  Once the Transaction
     returns onto the local Entity, the programmer should check
     trans_Error, to verify that it completed properly.

     Because data transmission isn't an instantaneous operation,
     a limit must be imposed on exactly how many transactions
     can be queued up at any given time.  Otherwise, it would be
     for an application program to overflow the throughput of any given
     networking protocol, occupying all available memory.  If the
     underlying networking protocol becomes overloaded, subsequent
     calls to BeginTransaction() may block until the networking
     protocol is no longer overwhelmed.

   BUGS

   SEE ALSO
       DoTransaction(), CheckTransaction(), WaitTransaction(),
       AbortTransaction(), <envoy/nipc.h>

nipc.library/CheckTransaction                   nipc.library/CheckTransaction

   NAME
     CheckTransaction -- Check whether a transaction has completed or not.

   SYNOPSIS
     status = CheckTransaction(transaction);
       D0                          A1

     BOOL CheckTransaction(struct Transaction *);

   FUNCTION
     Provides a mechanism for determining whether a Transaction previously
     queued with BeginTransaction() has completed.  The function
     will return TRUE if the Transaction is complete (or failed), and FALSE
     if the Transaction is still in progress.

   INPUTS
     transaction - a pointer to a Transaction structure, which describes
                   the details of this specific Transaction.

   RESULT
     None.

   EXAMPLE

   NOTES
       CheckTransaction() will return TRUE if the Transaction has never
       been sent (unlike CheckIO(), which doesn't take this situation
       into account).

   BUGS

   SEE ALSO
       DoTransaction(), BeginTransaction(), WaitTransaction(),
       AbortTransaction()

nipc.library/CreateEntityA                         nipc.library/CreateEntityA

   NAME
     CreateEntityA -- Creates an Entity for communication.

   SYNOPSIS
     myentity = CreateEntityA(taglist)
        D0                      A0

     struct Entity *CreateEntityA(struct TagItem *);
     struct Entity *CreateEntity(tag1, tag2, tag3, ...);

   FUNCTION
     This function allows you to create an Entity for one endpoint
     for communication.  Given the appropriate tags, you may declare that
     this entity is public - and therefore can be located by FindEntity().

   INPUTS
     taglist -- a list of tags that declare items such as the Entity name
                (which is only necessary for public Entities), signal
                bits, etc.

                The following tags are defined:
                ENT_Name:
                 Allows the user to declare the name for this entity.  This
                 name must be unique -- and if an Entity of similar name
                 already exists, CreateEntity() will return NULL.
                 (default: no provided name)
                ENT_Public:
                 If included, this entity is _public_, and can be found
                 by FindEntity() call.  To declare an entity public,
                 you must also declare the entity name.
                 (default: private)
                ENT_Signal:
                 Defines that when something arrives at this entity,
                 the given signal bit (bit number, not mask) should
                 be set.  (Useful when you intend to maintain a LOT
                 of entities - more than possible to allocate a single
                 signal bit for each.  In this method, a large number
                 of entities share the signal bit.  The downside is that
                 every entity with that bit must be checked when
                 the bit is found set.)
                 (default: FALSE)
                ENT_AllocSignal:
                 Asks that CreateEntity() allocate a signal bit from
                 the current context, and set it whenever the
                 entity receives any data, to set that bit.  The
                 ti_Data field of this TagItem must be a pointer
                 to a ULONG which CreateEntity will fill in with the
                 bit number, such that you know what bit number to
                 Wait() on.  If you provide a NULL as the ti_Data
                 entry, you will not be informed of the signal bit
                 number.
                 (default: signal not allocated)

                 A NULL taglist will provide the defaults.

   RESULT
     entity  --  a 'magic cookie' that defines your entity, or NULL for
                 failure

   EXAMPLE

   NOTES
     ENT_Signal and ENT_AllocSignal are mutually exclusive.
     ENT_Public requires that you also provide ENT_Name; the
       converse, however, is not true.

   BUGS

   SEE ALSO
     DeleteEntity()

nipc.library/DeleteEntity                           nipc.library/DeleteEntity

   NAME
     DeleteEntity -- Delete an Entity

   SYNOPSIS
     DeleteEntity(entity);
                    A0

     VOID DeleteEntity(struct Entity *);

   FUNCTION
     DeleteEntity() is the converse of CreateEntity().  It removes the
     entity from NIPC lists that it may have been attached to,
     frees up any resources attached to this Entity that were
     allocated by CreateEntity(), and frees up the actual Entity
     structure.  If NULL is passed as the argument, no action will
     be taken.

   INPUTS
     entity  --  a 'magic cookie' that defines your Entity

   RESULT
     None.

   EXAMPLE

   NOTES
     If an attempt is made to DeleteEntity() an Entity that has been
     found (via FindEntity()), but not lost (via LoseEntity()),
     the Entity being deleted will be maintained by NIPC until
     all references to it no longer exist.
     (The same behavior should arguably occur for an Entity on which
     previously sent Transactions are yet to return.)

     IMPORTANT WARNING:
     Use DeleteEntity() ONLY on Entities created with CreateEntity().
     Do NOT use DeleteEntity() on Entities created with FindEntity()!!

   BUGS

   SEE ALSO
     CreateEntityA(), LoseEntity()

nipc.library/DoTransaction                         nipc.library/DoTransaction

   NAME
     DoTransaction -- Begin a Transaction, and wait for it to complete.

   SYNOPSIS
     DoTransaction(dest_entity,src_entity,transaction)
                     A0            A1          A2

     VOID DoTransaction(struct Entity *, struct Entity *,
                        struct Transaction *);

   FUNCTION
     Processes an entire Transaction; it sends the request to the host
     Entity and awaits the response, or returns at any point because
     of an error.

   INPUTS
     dest_entity - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From FindEntity().)
     src_entity  - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From CreateEntity().)
     transaction - a pointer to the Transaction to complete.

   RESULT
     None.

   EXAMPLE

   NOTES
     DoTransaction() causes the current context to go into
     a Wait() state until the Transaction is complete (or cannot be
     completed.  After a DoTransaction() call, the trans_Error
     field should be checked to verify that the Transaction was
     properly completed.

     DoTransaction(), like WaitTransaction() is potentially dangerous, and
     should be used carefully.  If no trans_Timeout value is included,
     and a server never replies the Transaction (for an unknown reason),
     DoTransaction() can conceivably wait forever.

   BUGS

   SEE ALSO
     BeginTransaction(), <envoy/nipc.h>

nipc.library/FindEntity                               nipc.library/FindEntity

   NAME
     FindEntity -- Locate a specific entity on a certain host

   SYNOPSIS
     remote_entity = FindEntity(hostname,entityname,src_entity,errorptr)
           D0                      A0         A1        A2        A3

     struct Entity *FindEntity(STRPTR, STRPTR, struct Entity *,ULONG *);

   FUNCTION
     Attempts to locate a certain entity on a given host.
     If you pass a NULL for the entityname, FindEntity will
     interpret that as "the local machine".

   INPUTS
     hostname --   pointer to a null-terminated string declaring the
                   host name of the machine on which you expect to
                   find an Entity named the same as 'entityname'.

     entityname -- pointer to a null-terminated string declaring the
                   name of a public entity.

     src_entity -- an Entity returned by CreateEntity() that you wish to
                   use as the 'near' side of a communications path.

     errorptr   -- a pointer to a ULONG in which FindEntity() will provide
                   detailed error information in the event of a FindEntity()
                   failure.  If a NULL pointer is passed, no detailed error
                   information will be available.

   RESULT
     remote_entity --
        NULL if the given Entity cannot be found.
        Otherwise, the magic cookie describing the Entity that you found.

   EXAMPLE

   NOTES
     If you do a FindEntity to a different machine and it succeeds,
     you have no guarantee that the remote machine's Entity will
     continue to exist.  Because of this, you should check all returned
     Transactions for error status - if a Transaction to a remote
     Entity fails because the nipc.library can no longer find the remote
     Entity, the transaction will be returned as errored.
     Regardless of what happens, every SUCCESSFUL FindEntity() REQUIRES an
     associated LoseEntity().

     Since the FindEntity() establishes a communications link between
     the source and destination Entities, it's -dependant- on the
     source.  Therefore, do not DeleteEntity() the source entity before
     LoseEntity()'ing.

   BUGS

   SEE ALSO
     LoseEntity()

nipc.library/FreeTransaction                     nipc.library/FreeTransaction

   NAME
     FreeTransaction -- Free a previously allocated Transaction structure.

   SYNOPSIS
     FreeTransaction(transaction)
                          A1

     VOID FreeTransaction(struct Transaction *);

   FUNCTION
     Transaction structures created by AllocTransaction() (which ought be
     ALL of them), must be deallocated with FreeTransaction().
     FreeTransaction() frees only the Transaction structure and any
     portions of the structure that were allocated by the AllocTransaction()
     function.

   INPUTS
     transaction - a pointer to the Transaction structure to free
                   if NULL, no action is taken.

   RESULT
     None.

   EXAMPLE

   NOTES
     Don't try to free anything that wasn't allocated by AllocTransaction().

   BUGS

   SEE ALSO
     AllocTransactionA()

nipc.library/GetEntityName                         nipc.library/GetEntityName

   NAME
     GetEntityName -- Get the ASCII name associated with an Entity.

   SYNOPSIS
     status = GetEntityName(entity,stringptr,available);
                              A0      A1        D0

     BOOL GetEntityName(STRPTR, STRPTR, ULONG);

   FUNCTION
     Given a pointer to a string, the length of the string data area, and an
     entity magic-cookie, this function will attempt to return the name
     associated with the Entity.

   INPUTS
     entity    - A magic cookie, identifying an Entity.
     stringptr - A pointer to a section of memory that you'd like the name
                 copied into.
     available - The size of the above string area.

   RESULT
     status    - Either TRUE or FALSE.  Note that even if you've
                 referenced an entity, over a network - it's
                 possible that resolving what the correct name
                 is COULD fail.

   EXAMPLE

   NOTES
     If the given Entity has no name, the string "UNNAMED ENTITY" will
     be returned.

   BUGS

   SEE ALSO


nipc.library/GetHostName                             nipc.library/GetHostName

   NAME
     GetHostName -- Get the name of a specific machine.

   SYNOPSIS
     status = GetHostName(entity,stringptr,available)
       D0                   A0       A1        D0

     BOOL GetHostName(struct Entity *, STRPTR, ULONG);

   FUNCTION
     Given a pointer to a string, the length of the string data area, and an
     Entity magic-cookie, this function will attempt to return the ASCII
     name associated with the host that the Entity is on.

   INPUTS
     entity    - A magic cookie, identifying an Entity.
                 (If NULL, the string returned will be either
                  LocalRealm:LocalHost, or simply LocalHost -- depending on
                  whether the local machine is in a realm-based environment
                  or not.)

     stringptr - A pointer to a section of memory that you'd like the name
                 copied into.
     available - The size of the above string area.

   RESULT
     status    - Either TRUE or FALSE.  Note that even if you've referenced
                 an Entity over a network, it's possible that resolving
                 the name COULD fail.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO

nipc.library/GetTransaction                       nipc.library/GetTransaction

   NAME
     GetTransaction -- receive the next Transaction waiting on an Entity

   SYNOPSIS
     transaction = GetTransaction(entity)
       D0                           A0

     struct Transaction *GetTransaction(struct Entity *);

   FUNCTION
     GetTransaction() attempts to remove the next available Transaction
     from the given Entity.

   INPUTS
     entity  -- An entity created by CreateEntity().  (Not from
                FindEntity() as you're NOT allowed to read from
                someone else's Entity.)

   RESULT
     transaction   --
                 NULL if no Transactions are waiting,
                 a pointer to a Transaction structure otherwise.

   EXAMPLE

   NOTES
     After a successful GetTransaction(), you should check the trans_Type
     field of a transaction to determine whether it's a request, or a
     returned failed request/response that was previously
     BeginTransaction()'d from this Entity.

   BUGS

   SEE ALSO
     BeginTransaction(), DoTransaction(), WaitTransaction(),
     ReplyTransaction(), <envoy/nipc.h>

nipc.library/LoseEntity                               nipc.library/LoseEntity

   NAME
     LoseEntity -- Free up any resources attached from a FindEntity.

   SYNOPSIS
     LoseEntity(entity)
                  A0

     VOID LoseEntity(struct Entity *);

   FUNCTION
     This will merely free up any resources allocated with a
     successful FindEntity() call.

   INPUTS
     entity      - An abstract data type - a "magic cookie" - that
                   identifies an Entity.  NULL for no action.
   RESULT
     None.

   EXAMPLE

   NOTES
     LoseEntity() should only be used on Entities returned by FindEntity().


   BUGS

   SEE ALSO
     CreateEntity(), DeleteEntity()

nipc.library/NIPCInquiryA                           nipc.library/NIPCInquiryA

   NAME
       NIPCInquiryA -- Start a nipc network query

   SYNOPSIS
       success=NIPCInquiryA(hook, maxTime, maxResponses, tagList)
       D0                   A0    D0       D1            A1

       BOOL NIPCInquiryA(struct Hook *, ULONG, ULONG, APTR);

       success=NIPCInquiry(hook, maxTime, maxResponses, firsttag, ...)

       BOOL NIPCInquiry(struct Hook *, ULONG, ULONG, Tag, ...);

   FUNCTION
       Starts an NIPC Network Inquiry.  This function can be used to gather
       data about a single machine, or to gather data for a number of
       machines.  Multiple types of inquiries may be made using this
       function.  Please see below for a description of the types of queries
       and the types of information you may gather.

       The Hook is called for each packet returned from hosts on the
       network.  Depending on how specific your query is, you may or may
       not get more than one packet.  When either maxTime seconds or
       maxResponses packets have been received, your Hook will be called
       with a null ParamPckt parameter.  If your Hook routine decides that
       it has all of the information it needs, it may return FALSE.  This
       will cause nipc.library to abort the NIPCInquirr() call.

       When the Hook is called, the "Object" parameter will be a pointer to
       the Task structure for the task or process that called the
       NIPCInquiryA() function.  This is useful if you want to signal the
       calling task when the query is complete.  The Hook "Message"
       parameter will be a pointer to an array of TagItem structures that
       contain the query response data from each responding host.

       If the query fails for some reason, either due to illegal parameters
       or to a lack of resources, NIPCInquiryA() will return FALSE. In this
       case, your Hook function will never be called, so be careful.


   INPUTS

       hook(struct Hook *)     - Pointer to a Hook structure to be called for
                                 each response.
       maxTime(ULONG)          - The maximum number of seconds allowed for th
e
                                 query.  This is the absolute maximum time
                                 allowed.  Nipc.library does not add anything
                                 to this value.
       maxResponses(ULONG)     - The maximum number of responses that you wil
l
                                 accept from the network.
       tagList(struct TagItem *) - Pointer to an array of TagItem structures.
                                   below.

   TAGS
       The Tags currently defined for NIPCInquiryA() are:

       QUERY_IPADDR (ULONG) - This tag is used for querying a machine for
                              it's Network IP address.  Note:  This function
                              is provided purely for diagnostic purposes. Do
                              NOT depend on this tag being available in the
                              future.
       MATCH_IPADDR (ULONG) - Query a host with the specified IP address
                              address.  Please see the note above regarding
                              QUERY_IPADDR.
       QUERY_REALMS (STRPTR) - Query a realmserver for the names of all known
                               Realms.
       MATCH_REALM (STRPTR) - Only query hosts that are in a specific Realm.
       QUERY_HOSTNAME (STRPTR) - Query a host for it's name.
       MATCH_HOSTNAME (STRPTR) - Only query the host with the specified
                                 hostname.
       QUERY_SERVICES (STRPTR) - Query a host or hosts for the names of all
                                 services on each machine.
       MATCH_SERVICE (STRPTR) - Only query hosts that have a specific service
                                specified by the Tag.
       QUERY_ENTITIES (STRPTR) - Query a host or hosts for the names of all
                                 public entities on each machine.
       MATCH_ENTITY (STRPTR) - Query only hosts that have a public entity
                               specified by the Tag.
       QUERY_OWNER (STRPTR) - This Tag is currently ignored.
       MATCH_OWNER (STRPTR) - This Tag is currently ignored.
       QUERY_ATTNFLAGS (ULONG) - This Tag allows you to find out what bits
                                 are set in ExecBase->AttnFlags.
       MATCH_ATTNFLAGS (ULONG) - Query only hosts that have the specified
                                 bits set in ExecBase->AttnFlags.
       QUERY_LIBVERSION (VOID) - This Tag is currently ignored.
       MATCH_LIBVERSION (VOID) - This Tag is currently ignored.
       QUERY_CHIPREVBITS (ULONG) - This Tag alllows you to find out what
                                   bits are set in GfxBase->ChipRevBits0.
                                   Note: Only the lower 8 bits of the ULONG
                                   are used.
       MATCH_CHIPREVBITS (ULONG) - Query only hosts that have the specified
                                   bits set in GfxBase->ChipRevBits0.
       QUERY_MAXFASTMEM (ULONG) - Query a machine for it's maximum amount
                                  of FAST memory.
       MATCH_MAXFASTMEM (ULONG) -  Query only hosts with at least the
                                   specified amount of FAST memory.
       QUERY_AVAILFASTMEM (ULONG) - Query a machine for the amount of free
                                    FAST memory it has available.
       MATCH_AVAILFASTMEM (ULONG) - Query only those hosts that have at
                                    least the specified amount of FAST
                                    memory available.
       QUERY_MAXCHIPMEM (ULONG) - Query a machine for it's maximum amount
                                  of installed CHIP memory.
       MATCH_MAXCHIPMEM (ULONG) - Query only those hosts that have at least
                                  the specified amount of CHIP ram installed.
       QUERY_AVAILCHIPMEM (ULONG) - Query a machine for the amount of free
                                    CHIP memory it has available.
       MATCH_AVAILCHIPMEM (ULONG) - Query only those hosts that have at
                                    least the specified amount of CHIP
                                    memory available.
       QUERY_KICKVERSION (ULONG) - Query a machine for the version and
                                   revision of Kickstart it is running.
       MATCH_KICKVERSION (ULONG) - Query only those hosts that are running
                                   at least the specified version and revisio
n
                                   of Kickstart.
       QUERY_WBVERSION (ULONG) - Query a machine for the version and
                                 revision of Workbench it is running.
       MATCH_WBVERSION (ULONG) - Query only those hosts that are running
                                 at least the specified version and revision
                                 of Workbench.
   RESULT
       None.

   EXAMPLES

       Query all hosts in realm "Software" for their Hostname, CPU type, Fast
       memory installed and Kickstart version:

       NIPCInquiry(myhook,             /* The hook to call */
                   2,                  /* 2 seconds max */
                   15,                 /* 15 responses max */
                   MATCH_REALM,"Software",
                   QUERY_HOSTNAME, 0,
                   QUERY_ATTNFLAGS, 0,
                   QUERY_MAXFASTMEM, 0,
                   QUERY_KICKVERSION, 0,
                   TAG_DONE);

       The Hook would then get called for each host that responds.  An exampl
e
       TagList passed to the hook might be:

               MATCH_REALM,"Software",
               QUERY_HOSTNAME,"A2500 Test".
               QUERY_ATTNFLAGS, AFF_68010|AFF_68020|AFF_68881,
               QUERY_MAXFASTMEM, 4194304,      (4 Megs)
               QUERY_KICKVERSION, 2425007,     (VERSION <<16 | REVISION)
               TAG_DONE

       ---
       Query a server for all services it has available

       NIPCInquiry(myhook,
                   2,
                   2,
                   MATCH_REALM,"Marketing",
                   MATCH_HOSTNAME,"Market Server",
                   QUERY_SERVICES,0,
                   TAG_DONE)

       A possible response might be:

                   MATCH_REALM,"Marketing",
                   MATCH_HOSTNAME,"Market Server",
                   QUERY_SERVICES,"EnvoyFileSystem",
                   QUERY_SERVICES,"EnvoyPrinterService",
                   QUERY_SERVICES,"ConferenceService",
                   TAG_DONE)


   NOTES
       This function is considered very low-level and is provided for network
       diagnostic functions.  You should probably be using the functions
       supplied in envoy.library to do network queries.  These will provide
       "wrappers" for the most common types of queries.

nipc.library/PingEntity                               nipc.library/PingEntity

   NAME
     PingEntity -- Calculate the round-trip time between two Entities

   SYNOPSIS
     elapsedtime = PingEntity(entity, limit)
       D0                       A0     D0

     ULONG PingEntity(struct Entity *, ULONG);

   FUNCTION


   INPUTS
     entity    - A magic cookie, identifying an Entity.
     limit     - Maximum number of microseconds to wait for a response.

   RESULT
     elapsedtime -
                 Total number of microseconds elapsed between attempting
                 to query the Entity, and a response returning.  If -1L,
                 no response was received in the given timeout interval.
                 Local Entities will return 0 for elapsed time.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO

nipc.library/ReplyTransaction                   nipc.library/ReplyTransaction

   NAME
     ReplyTransaction -- Reply a Transaction.

   SYNOPSIS
     ReplyTransaction(transaction)
                           A1

     VOID ReplyTransaction(struct Transaction *);

   FUNCTION
     This causes a Transaction received from another Entity to be
     returned to the sender.  You may return data with the
     Transaction as well.  (See the Transaction structure
     definition for details.)

   INPUTS
     transaction -- Pointer to a Transaction structure that was
                    returned by a previous GetTransaction() call.

   RESULT
     None.

   EXAMPLE

   NOTES

   BUGS

   SEE ALSO
       GetTransaction()

nipc.library/WaitEntity                               nipc.library/WaitEntity

   NAME
     WaitEntity -- Waits for a Transaction to arrive at an Entity.

   SYNOPSIS
     WaitEntity(localentity)
                    A0

     VOID WaitEntity(struct Entity *);

   FUNCTION
     WaitEntity() simply causes the current process to Wait() until
     something arrives at the entity.

   INPUTS
     entity      - An abstract data type - a "magic cookie" - that
                   identifies an Entity.

   RESULT
     None.

   EXAMPLE

   NOTES
     This is potentially dangerous - if nothing ever arrives at this
     Entity, this function will never return.  Unless warrented,
     the caller should be using Wait() with a signal mask.

   BUGS

   SEE ALSO
     GetTransaction()

nipc.library/WaitTransaction                     nipc.library/WaitTransaction

   NAME
     WaitTransaction -- Waits for a Transaction to complete.

   SYNOPSIS
     WaitTransaction(transaction)
                          A1

     VOID WaitTransaction(struct Transaction *);

   FUNCTION
     Waits for the given transaction to complete, or return as failed.

   INPUTS
     transaction -- a pointer to a Transaction structure.

   RESULT
     None.

   EXAMPLE

   NOTES
     - When doing networked transactions, if for any reason the remote
       machine fails to send a response, (but no network problem exists)
       and you did not supply a timeout value in trans_Timeout,
       WaitTransaction() can Wait() forever.

     - If you attempt to WaitTransaction() on a transaction that has
       already been responded to, WaitTransaction() will return
       immediately.

   BUGS

   SEE ALSO
       BeginTransaction(), DoTransaction(), exec.library/Wait()

