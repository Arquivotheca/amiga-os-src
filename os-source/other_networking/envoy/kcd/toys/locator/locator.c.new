
/* Includes */
 
#include <intuition/intuition.h>
#include <clib/exec_protos.h>
#include <clib/intuition_protos.h>
#include <stdlib.h>

/* #include "locator.h" */
#include "locator_tm.h"

/* Pragma includes for register parameters */
 
#include <pragmas/exec.h>
#include <pragmas/intuition.h>
#include <pragmas/gadtools.h>

/* Library pointers */
 
struct Library *IntuitionBase;	/* intuition.library */
struct Library *GadToolsBase;	/* gadtools.library */

/* main function */
 
VOID main(int argc, char **argv)
  {
  struct TMData *TMData = NULL;	/* Data structure pointer */
  ULONG TMError;	/* holds error returned by TM_Open */
  int returncode;	/* holds error returned by TM_Open */

  if(IntuitionBase = OpenLibrary("intuition.library", 37L))	/* Open intuition.library V37 */
    {
    if(GadToolsBase = OpenLibrary("gadtools.library", 37L))	/* Open gadtools.library V37 */
      {
      if(!(TMError = TM_Open(&TMData)))	/* Open Toolmaker data */
        {
        Window_LC_Window(TMData, DISPLAY);	/* Display the window */
        TM_EventLoop(TMData);	/* Process events */
        Window_LC_Window(TMData, REMOVE);	/* Remove the window */
        returncode = TMData->ReturnCode;	/* Process events */
        TM_Close(TMData);	/* Close Toolmaker data */
        }
      else
        {
        switch(TMError)
          {
          case TMERROR_MEMORY:
            TM_Request(NULL, "Error", "Error allocating\ndata memory", "Ok");
            break;
          case TMERROR_MSGPORT:
            TM_Request(NULL, "Error", "Error creating\nmessage port", "Ok");
            break;
          case TMERROR_SCREEN:
            TM_Request(NULL, "Error", "Error opening\nscreen", "Ok");
            break;
          case TMERROR_VISUALINFO:
            TM_Request(NULL, "Error", "Error getting\nvisual info", "Ok");
            break;
          }
        }
      CloseLibrary(GadToolsBase);	/* Close gadtools.library */
      }
    else
      {
      TM_Request(NULL, "Error", "Error opening\ngadtools.library", "Ok");
      }
    CloseLibrary(IntuitionBase);	/* Close intuition.library */
    }
  exit(returncode);
  }

/* Window event functions */
 
BOOL Window_LC_Window_GADGETDOWN(struct TMData *TMData, struct IntuiMessage *imsg)
  {
  switch(((struct Gadget *)imsg->IAddress)->GadgetID)
    {
    case ID_LC_Result: /* Query Result */
      break;
    }
  return(FALSE);
  }

BOOL Window_LC_Window_GADGETUP(struct TMData *TMData, struct IntuiMessage *imsg)
  {
  switch(((struct Gadget *)imsg->IAddress)->GadgetID)
    {
    case ID_LC_Send: /* Send Query */
      break;
    case ID_LC_Timeout: /* Timeout */
      /* ((struct StringInfo *)gadget_LC_Timeout->SpecialInfo)->LongInt */
      break;
    case ID_LC_Class: /* Query Class */
      /* imsg->Code */
      break;
    case ID_LC_Entity: /* Entity Name */
      /* ((struct StringInfo *)gadget_LC_Entity->SpecialInfo)->Buffer */
      break;
    case ID_LC_Service: /* Service Name */
      /* ((struct StringInfo *)gadget_LC_Service->SpecialInfo)->Buffer */
      break;
    case ID_LC_Host: /* Amiga Name */
      /* ((struct StringInfo *)gadget_LC_Host->SpecialInfo)->Buffer */
      break;
    case ID_LC_Realm: /* Realm Name */
      /* ((struct StringInfo *)gadget_LC_Realm->SpecialInfo)->Buffer */
      break;
    case ID_LC_Result: /* Query Result */
      /* imsg->Code */
      break;
    }
  return(FALSE);
  }

BOOL Window_LC_Window_CLOSEWINDOW(struct TMData *TMData, struct IntuiMessage *imsg)
  {
  return(TRUE);
  }

BOOL UserSignal(struct TMData *TMData, ULONG signal)
  {
  return(FALSE);
  }

