TABLE OF CONTENTS

nipc.library/AbortTransaction
nipc.library/AllocTransactionA
nipc.library/BeginTransaction
nipc.library/CheckTransaction
nipc.library/CreateEntityA
nipc.library/DeleteEntity
nipc.library/DoTransaction
nipc.library/FindEntity
nipc.library/FreeTransaction
nipc.library/GetEntityName
nipc.library/GetHostName
nipc.library/GetTransaction
nipc.library/LoseEntity
nipc.library/NetQueryA
nipc.library/ReplyTransaction
nipc.library/WaitEntity
nipc.library/WaitTransaction
nipc.library/AbortTransaction                   nipc.library/AbortTransaction

   NAME
     AbortTransaction -- Abort an attempted transaction.

   SYNOPSIS
     AbortTransaction(transaction)
                          A1

     VOID AbortTransaction(struct Transaction *);

   FUNCTION
     Aborts a transaction that was previously started by a call to
     BeginTransaction.

   INPUTS
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     If the transaction hadn't already been completed (or failed), it will
     be immediately aborted, and placed on the local ReplyPort.

   EXAMPLE
     AbortTransaction(oldtransaction);

   NOTES
     If the transaction given has already completed (or failed), no action
     will be taken.

   BUGS

   SEE ALSO

nipc.library/AllocTransactionA                 nipc.library/AllocTransactionA

   NAME
     AllocTransactionA -- Allocate a transaction structure.

   SYNOPSIS
     transaction = AllocTransactionA(taglist)
        D0                             A0

     struct Transaction * AllocTransactionA(struct TagItem *);

   FUNCTION
     Given the appropriate taglist, this function will attempt to create a
     transaction structure for the user.

   INPUTS
     taglist -- A pointer to a list of tags defining options and requirements
                for the structure.

                TRN_AllocReqBuffer:
                 Attempts to allocate a request buffer for you of the
                 size in the ti_Data field of this TagItem.
                TRN_AllocRespBuffer:
                 Attempts to allocate a response buffer for you of the
                 size in the ti_Data field of this TagItem.

                 IMPORTANT NOTE:
                 You are completely free to allocate your own buffer space
                 for either a request or a response buffer.  If you do,
                 -you- are responsible for freeing them.

   RESULT
     transaction -- If conditions permit, AllocTransaction() will return
                    a pointer to a Transaction structure.  If the library is
                    unable to either allocate memory or meet the requirements
                    set by the tags passed, the function will return a NULL.
   EXAMPLE
     struct Transaction *mytrans;
     ULONG mytags[1]={TAG_DONE};
     mytrans = AllocTransactionA(&mytags);

   NOTES

   BUGS

   SEE ALSO

nipc.library/BeginTransaction                   nipc.library/BeginTransaction

   NAME
     BeginTransaction -- Start an IPC transaction

   SYNOPSIS
     VOID BeginTransaction(dest_entity,src_entity,transaction)
                            A0           A1           A2

     BeginTransaction(VOID *,VOID *,struct Transaction *);

   FUNCTION
     Attempts to begin a transaction (described appropriately by the
     transaction structure) to a given entity.

   INPUTS
     dest_entity - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From FindEntity.)
     src_entity  - An abstract data type - a "magic cookie" - that identifies
                   the source entity.  (From CreateEntity.)
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     None.

   EXAMPLE
     BeginTransaction(remote_entity,our_Entity,transactionptr);

   NOTES
     After this function begins, the transaction structure passed becomes
     the property of the nipc.library, and CANNOT be freed up until this
     transaction returns onto the local ReplyPort.  Once the transaction
     returns onto the local ReplyPort, the programmer should check
     trans_Error, to verify that it completed properly.

     Because of the fact that data transmission isn't an instantaneous
     operation, a limit must be imposed on exactly how many transactions
     can be queued up at any given time.  Otherwise, it's entirely possible
     for an application program to overflow the throughput of any given
     networking protocol, and pretty much gobble up all available RAM until
     the system falls flat on it's face.  Thus:

   IMPORTANT NOTE:
     BeginTransaction may not return immediately.  If the window size of the
     underlying protocol won't allow for the queueing of any more data,
     BeginTransaction will Wait() until that case is no longer true.  If any
     such wait is unacceptable, set NOWAIT in trans_Flags of your Transaction
.
     If this flag is set, and BeginTransaction is about to enter a Wait()
     state, it will return the Transaction on the source entity with the
     trans_Error field set to APPNERR_ABOUTTOWAIT.
     (THIS DOESN'T WORK YET)

     Some scheme of 'optional timeouts' needs to be installed; such that in t
he
     event that the network fails at JUST the right moment, your DoTransactio
n() or
     WaitTransaction() doesn't wait forever.

   BUGS

   SEE ALSO

nipc.library/CheckTransaction                   nipc.library/CheckTransaction

   NAME
     CheckTransaction -- Check whether a transaction has completed or not.

   SYNOPSIS
     status = CheckTransaction(transaction);
       D0                          A1

     BOOL CheckTransaction(struct transaction *);

   FUNCTION
     Provides a mechanism for determining whether a transaction previously
     queued with the BeginTransaction function has completed.  The function
     will return TRUE if the transaction is complete (or failed), and FALSE
     if the transaction is still in progress.

   INPUTS
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     None.

   EXAMPLE
     if (!CheckTransaction(transaction))
        printf("It's still going.");

   NOTES
     The problem that occurs with CheckIO and previously unused IORequests
     will likely occur here as well - with the exception that an ln_Type
     of NT_UNKNOWN (0) should cause the function to return FALSE - as
     it couldn't have completed if it never was queued.

   BUGS

   SEE ALSO

nipc.library/CreateEntityA                         nipc.library/CreateEntityA

   NAME
     CreateEntityA -- Creates an entity for communication.

   SYNOPSIS
     myentity = CreateEntityA(taglist)
        D0                      A0

     VOID *CreateEntityA(struct TagItem *);

   FUNCTION
     This function allows you to create an entity for one endpoint
     for communication.  Given the appropriate tags, you may declare that
     this entity is public - and therefore can receive requests.

   INPUTS
     taglist -- a list of tags that declare items such as the Entity name
                (which is only necessary for public Entities), signal
                bits, etc.

                The following tags are defined:
                ENT_Name:
                 Allows the user to declare the name for this entity.
                ENT_Public:
                 If included, this entity is _public_, and can be found
                 by a FindEntity call.  To declare an entity public,
                 you must also declare the entity name.
                ENT_Signal:
                 Defines that when something arrives at this entity,
                 the given signal bit (bit number, not mask) should
                 be set.  (Useful when you intend to maintain a LOT
                 of entities - more than possible to allocate a single
                 signal bit for each.  In this method, a large number
                 of entities share the signal bit.  The downside is that
                 every entity with that bit must be checked when
                 the bit is found set.)
                ENT_AllocSignal:
                 Asks that CreateEntity allocate a signal bit from
                 the current context, and set it whenever the
                 entity receives any data, to set that bit.  The
                 ti_Data field of this TagItem must be a pointer
                 to a ULONG which CreateEntity will fill in with the
                 bit number, such that you know what bit number to
                 Wait() on.  If you provide a NULL as the ti_Data
                 entry, you will not be informed of the signal bit
                 number.

   RESULT
     entity  --  a 'magic cookie' that defines your entity, or NULL for
                 failure

   EXAMPLE
     ULONG signalbitnum;
     ULONG tags[8]={ENT_Public,0,ENT_Name,"My Entity!",ENT_AllocSignal,
                    &signalbitnum,TAG_DONE,0};
     void  *ourentity;
     ourentity = CreateEntityA(&tags);

   NOTES
     ENT_Signal and ENT_AllocSignal are mutually exclusive.
     ENT_Public requires that you also provide ENT_Name.
     I'm debating the usefulness of allowing anyone to create an
     entity with NO signals.

   BUGS
     Shouldn't allow duplicate entries in the name list.

   SEE ALSO

nipc.library/DeleteEntity                           nipc.library/DeleteEntity

   NAME
     DeleteEntity -- Delete an Entity

   SYNOPSIS
     DeleteEntity(entity);
                    A0

     VOID DeleteEntity(VOID *);

   FUNCTION
     DeleteEntity is the converse of CreateEntity.  It removes the
     entity from any ipc lists that it may have been attached to,
     frees up any resources attached to this entity that were
     allocated by CreateEntity, and frees up the actual entity
     structure.

   INPUTS
     entity  --  a 'magic cookie' that defines your entity

   RESULT
     None.

   EXAMPLE
     void *myentity;
     DeleteEntity(myentity);

   NOTES
     Make sure that there aren't any transactions pending on this
     entity before you call DeleteEntity.  Since a transaction could
     arrive between the time you call DeleteEntity and the time
     that DeleteEntity removes your entity from the system list,
     it might be wise to either remain in a Forbid() state while
     you make sure the entity is empty, and DeleteEntity() it, or
     to provide a RemoveEntity() function that removes public entities
     from the ipc lists.  (Therefore preventing anything from arriving
     at them.)

   BUGS

   SEE ALSO

nipc.library/DoTransaction                         nipc.library/DoTransaction

   NAME
       DoTransaction -- Begin a Transaction, and wait for it's completion.

   SYNOPSIS
     DoTransaction(dest_entity,src_entity,transaction)
                     A0            A1          A2

     VOID DoTransaction(VOID *, VOID *, struct Transaction *);

   FUNCTION
     Processes an entire transaction; it sends the request to the host
     entity, awaits the response, or returns at any point because of an
     error.

   INPUTS
     dest_entity - An abstract data type - a "magic cookie" - that identifies
                   the destination entity.  (From FindEntity.)
     src_entity  - An abstract data type - a "magic cookie" - that identifies
                   the source entity.  (From CreateEntity.)
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     None.

   EXAMPLE
     DoTransaction(remote_entity,local_entity,transactionptr);

   NOTES
     This function entirely implements an entire transaction; it causes
     the machine to go into a Wait() state until the transaction is
     complete (or can't be completed).  After a DoTransaction() call, the
     programmer should check the trans_Error field to verify that the
     transaction was completed properly.  This may return errored if a timeou
t
     occurs.

   BUGS

   SEE ALSO

nipc.library/FindEntity                               nipc.library/FindEntity

   NAME
     FindEntity -- Locate a specific entity on a certain host

   SYNOPSIS
     remote_entity = FindEntity(hostname,entityname,src_entity,errorptr)
           D0                      A0         A1        A2        A3

     VOID *FindEntity(UBYTE *, UBYTE *, VOID *,ULONG *);

   FUNCTION
     Attempts to locate a certain entity on a given host.
     If you pass a NULL for the entityname, FindEntity will
     interpret that as "the local machine".

     NETWORKING STUFF:  Since the
     references to both the entity and the host are by name, there
     isn't an adherence to a specific addressing scheme - and therefore
     no dependance on a certain type of networking.  Note that while
     the context of transactions is strictly a connectionless protocol,
     some bookkeeping about networking information is required.  Thus,
     FindEntity allocates a bookkeeping structure.  This is why we
     need a LoseEntity call for each FindEntity.

   INPUTS
     hostname --   a null-terminated string declaring the host name of
                   the machine in whose list of entities you expect to find
                   the entity named by 'entityname'.  NULL for the
                   local machine.

     entityname -- a null-terminated string declaring the name of a
                   public entity.

     src_entity -- an Entity returned by CreateEntity that you wish to use as
 the 'near' side
                   of a communications path.

     errorptr   -- a pointer to a ULONG in which FindEntity() will provide de
tailed
                   error information in the event of a FindEntity() failure. 
 If a NULL
                   pointer is passed, no detailed error information will be a
vailable.

   RESULT
     remote_entity --
        NULL if the given entity cannot be found.
        Otherwise, the magic cookie describing the entity that you found.

   EXAMPLE
     void *ourentity, *remote_entity;
     our_entity = CreateEntity(&taglist);
     remote_entity = FindEntity("itchy","Remote Print Server",our_entity);

   NOTES
     If you do a FindEntity to a different machine and it succeeds,
     you have no guarantee that the remote machine's entity will
     continue to exist.  Because of this, you should check all returned
     transactions for error status - if a transaction to a remote
     entity fails because the nipc.library can no longer find the remote
     entity, the transaction will be returned as errored.
     Regardless of what happens, every SUCCESSFUL FindEntity() REQUIRES an
     associated LoseEntity.

   BUGS

   SEE ALSO

nipc.library/FreeTransaction                     nipc.library/FreeTransaction

   NAME
     FreeTransaction -- Free up a previously allocated Transaction structure

   SYNOPSIS
     FreeTransaction(transaction)
                          A1

     VOID FreeTransaction(struct Transaction *);

   FUNCTION
     Any Transaction structures created by AllocTransaction (which ought be
     ALL of them), must be deallocated with FreeTransaction().
     FreeTransaction() frees up only the transaction structure and any
     portions of the structure that were allocated by the AllocTransaction()
     function.

   INPUTS
     transaction - a pointer to a 'transaction' structure, which describes
                   the details of this specific transaction.

   RESULT
     None.

   EXAMPLE
     struct Transaction *transact;
     FreeTransaction(transact);

   NOTES
     Don't try to free up anything that wasn't allocated by AllocTransaction.

   BUGS

   SEE ALSO

nipc.library/GetEntityName                         nipc.library/GetEntityName

   NAME
     GetEntityName -- Get the ASCII name associated with an entity.

   SYNOPSIS
     status = GetEntityName(entity,stringptr,available);
                              A0      A1        D0

     BOOL GetEntityName(UBYTE *,UBYTE *,ULONG);

   FUNCTION
     Given a pointer to a string, the length of the string data area, and an
     entity magic-cookie, this function will attempt to return the ascii
     name associated with the entity.

   INPUTS
     entity    - A magic cookie, identifying an entity.
     stringptr - A pointer to a section of memory that you'd like the name
                 copied into.
     available - The size of the above string area.

   RESULT
     status    - Either TRUE or FALSE.  Note that even if you've referenced a
n
                 entity, over a network - it's possible that resolving what t
he
                 correct name is COULD fail.

   EXAMPLE
     char mystring[80];
     if (GetEntityName(transaction->trans_SrcEntity,&mystring,80))
        printf("The name is %s\n",mystring);

   NOTES
     Note that the string returned could be nulled - implying that this
     entity has no name.

   BUGS
     The fact that it could return no name at all (null string) makes me
     wonder if we should insist that every entity be named - which would
     cause it to ALWAYS return a name.

   SEE ALSO


nipc.library/GetHostName                             nipc.library/GetHostName

   NAME
     GetHostName -- Get the ASCII name associated with the host on which
                    a certain entity lies.

   SYNOPSIS
     status = GetHostName(entity,stringptr,available)
       D0                   A0       A1        D0

     BOOL *GetHostName(void *,char *,ULONG);

   FUNCTION
     Given a pointer to a string, the length of the string data area, and an
     entity magic-cookie, this function will attempt to return the ascii
     name associated with the host that the entity is on.

   INPUTS
     entity    - A magic cookie, identifying an entity.
     stringptr - A pointer to a section of memory that you'd like the name
                 copied into.
     available - The size of the above string area.

   RESULT
     status    - Either TRUE or FALSE.  Note that even if you've referenced a
n
                 entity over a network - it's _possible_ that resolving what 
the
                 correct name is COULD fail.

   EXAMPLE
     char mystring[80];
     if (GetHostName(transaction->trans_SrcEntity,&mystring,80))
        printf("The host name is %s\n",mystring);

   NOTES

   BUGS
     None known.

   SEE ALSO

nipc.library/GetTransaction                       nipc.library/GetTransaction

   NAME
     GetTransaction -- receive the next transaction waiting on an entity

   SYNOPSIS
     transaction = GetTransaction(entity)
       D0                           A0

     struct Transaction *GetTransaction(void *);

   FUNCTION
     GetTransaction attempts to remove the next available Transaction
     from the given entity.

   INPUTS
     entity  -- An entity created by CreateEntity.  (-Not- from FindEntity
                as you're not allowed to read from someone else's entity.)

   RESULT
     transaction   --
                 NULL if no transactions are waiting
                 a pointer to a Transaction structure otherwise
   EXAMPLE
     void *localentity;
     struct Transaction *mytrans;
     mytrans = GetTransaction(localentity);

   NOTES
     After a successful GetTransaction, you should check the type of
     transaction to determine whether it's a request, or a
     returned failed request/response that was previously BeginTransaction'd
     from this entity.

   BUGS
     None known.

   SEE ALSO

nipc.library/LoseEntity                               nipc.library/LoseEntity

   NAME
     LoseEntity -- Free up any resources attached from a FindEntity

   SYNOPSIS
     LoseEntity(entity)
                  A0

     VOID LoseEntity(VOID *);

   FUNCTION
     This will merely free up any resources allocated with a
     successful FindEntity() call.

   INPUTS
     entity      - An abstract data type - a "magic cookie" - that
                   identifies an entity.  NULL for no action.
   RESULT
     None.

   EXAMPLE
     void *foundentity;
     LoseEntity(foundentity);

   NOTES
     LoseEntity should only be used on entities returned by FindEntity.
     If you attempt to use LoseEntity on one created by CreateEntity,
     you're asking for trouble.

   BUGS

   SEE ALSO

nipc.library/NetQueryA                                 nipc.library/NetQueryA

   NAME
       NetQueryA -- Start a nipc network query

   SYNOPSIS
       NetQueryA(hook, queryClass, maxTime, tagList)
                 A0    D0          D1       A1

       VOID NetQueryA(struct Hook *, ULONG, ULONG, struct TagItem *);

       NetQuery(hook, queryClass, maxTime, firsttag, ...)

       VOID NetQuery(sutrct Hook *, ULONG, ULONG, Tag, ...);

   FUNCTION
       Starts an NIPC network query.  This function can be used to gather
       data about a single machine, or to gather data for a given network.
       Only one class of query may be performed at a time.  The classes of
       queries you can do are:

       NHClass_Hosts    - Query the local network or a given realm for the
                          names of all hosts matching the data given in the
                          tagList.  See below.
       NHClass_Services - Query a single machine for a list of all services
                          running on that machine.
       NHClass_Entities - Query a single machine for a list of all public
                          entities in use on a machine.
       NHClass_Realms   - In an internetworked environment, returns a list
                          of all Realms defined on your network.

       The Hook is called for each packet returned from the network.
       Depending on the class of the query, you may get more than one
       packet.  For the NHClass_Hosts query, you will get one packet for
       each machine matching your request.  For the other three classes,
       you will get one packet containing all of the data you are looking
       for.

       A pointer to the packet is passed in A2 (the "object").  This
       is the format of the data:

           struct NameHeader
           {
               ULONG   nh_Reserved0;   /* Reserved */
               UWORD   nh_ID;          /* Unique ID of this query */
               UBYTE   nh_Type;        /* Query type (private) */
               UBYTE   nh_Class;       /* Query Class */
               UWORD   nh_Length;      /* Response packet length */
               UBYTE   nh_Realms;      /* Number of Realms in the answer */
               UBYTE   nh_Hosts;       /* Number of hosts in the answer */
               UBYTE   nh_Services;    /* Number of services in the answer */
               UBYTE   nh_Entities;    /* Number of entities in the answer */
           };

       The answer data is found immediately following the NameHeader. The
       format is a series of null-terminated strings, the number of which
       is specified in the fields above.  The strings will not be in any
       specific order.

       Do *NOT* free the NameHeader, it will be freed by nipc.library.

       NetQueryA() returns when either maxTime seconds have passed, or in
       the case of NHClass_Services or NHClass_Entities, the single
       response packet is processed by the Hook function.

   INPUTS
       hook             - Pointer to a Hook structure to be called for each
                          response.
       queryClass       - The Class of the query, one of NHClass_Hosts,
                          NHClass_Services, NHClass_Entities or
                          NHClass_Realms.
       maxTime          - The maximum number of seconds allowed for the
                          query.  This is the absolute maximum time
                          allowed.  nipc.library does not add anything to
                          this value.
       tagList          - Pointer to an array of TagItem structures. See
                          below.

   TAGS
       The Tags defined for NetQueryA() are:

       NQ_Realm (STRPTR) - Optional name of Realm to query.
       NQ_Host (STRPTR) - Name of the host to query for a Services or
                          Entities query.
       NQ_Service (STRPTR) - Optional name of a Service that you want hosts
                             to try to match.
       NQ_Entity (STRPTR) - Option name of an Entity that you want hosts to
                            to try to match.

   RESULT
       None.

nipc.library/ReplyTransaction                   nipc.library/ReplyTransaction

   NAME
     ReplyTransaction -- Reply a request transaction

   SYNOPSIS
     ReplyTransaction(transaction);
                           A1

     VOID ReplyTransaction(struct Transaction *);

   FUNCTION
     This causes a transaction received from another entity to be
     returned to the sender.  You may return data with the
     transaction as well.  (See the Transaction structure
     definition for details.)

   INPUTS
     transaction -- a pointer to a transaction structure that was
                    returned by a previous GetTransaction() call.

   RESULT
     None.

   EXAMPLE
     struct Transaction *trans;
     ReplyTransaction(trans);

   NOTES
     The use of this function falls within the domain of a server -
     where after receiving a transaction request via GetTransaction(),
     it needs to be fufilled and replied back to the sender via
     ReplyTransaction.

   BUGS

   SEE ALSO

nipc.library/WaitEntity                               nipc.library/WaitEntity

   NAME
     WaitEntity -- Waits for something to arrive at an entity

   SYNOPSIS
     WaitEntity(localentity)
                    A0

     VOID WaitEntity(VOID *);

   FUNCTION
     WaitEntity simply causes the current process to Wait() until
     something arrives at the entity (either a transaction, a
     transaction response, or a failed transaction).

   INPUTS
     entity      - An abstract data type - a "magic cookie" - that
                   identifies an entity.

   RESULT
     None.

   EXAMPLE
     void *ourentity;
     WaitEntity(ourentity);

   NOTES
     This is potentially dangerous - if nothing ever arrives at this
     entity, this function will never return.

   BUGS

   SEE ALSO

nipc.library/WaitTransaction                     nipc.library/WaitTransaction

   NAME
     WaitTransaction -- Waits for a transaction to complete

   SYNOPSIS
     WaitTransaction(transaction)
                          A1

     VOID WaitTransaction(struct Transaction *);

   FUNCTION
     Waits for the given transaction to complete, or return failed.

   INPUTS
     transaction -- a pointer to a transaction structure

   RESULT
     None.

   EXAMPLE
     struct Transaction *trans;
     WaitTransaction(trans);

   NOTES
     - When doing networked transactions, if for any reason the remote
       machine fails to send a response, the transaction will eventually
       time out, and return as a failed transaction.

     - If you attempt to WaitTransaction() on a transaction that has
       already been responded to, WaitTransaction() will return
       immediately.

   BUGS

   SEE ALSO

