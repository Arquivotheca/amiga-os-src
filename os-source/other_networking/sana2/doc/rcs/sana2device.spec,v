head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.6
date     91.12.10.10.42.36;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.09.08.29.50;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.13.13.39.58;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.13.13.37.30;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.21.11.57.14;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.16.11.19.15;  author dlarson;  state Exp;
branches ;
next     ;


desc
@This is the most recent known RSBX source to the SANA-II autodocs.
@


1.6
log
@fixed affect/effect
@
text
@$Id: sana2device.spec,v 1.5 91/12/09 08:29:50 dlarson Exp Locker: dlarson $


*****i* sana2.device/Init ******************************************
*
*   NAME
*	Init -- Initialize the device from nothing.
*
*   SYNOPSIS
*	Init( SegList )
*	      A0
*
*	void Init( void * );
*
*   FUNCTION
*	This routine initializes the device from nothing.
*
*   INPUTS
*	SegList         Pointer to the SegList for the device code.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*
* A0 --	seglist	?????	?????
* A6 --	exec	?????	exec
*


******* sana2.device/OpenDevice **********************************************
*
*   NAME
*	Open -- Request an opening of the network device.
*
*   SYNOPSIS
*	error = OpenDevice(unit, IOSana2Req, flags)
*	D0		   D0    A1          D1
*
*	BYTE OpenDevice(ULONG, struct IOSana2Req *, ULONG);
*
*   FUNCTION
*	This function is called by exec.library OpenDevice().
*
*	This function performs whatever initialization is required per
*	device open and initializes the Sana2Req for use by the
*	device.
*
*   INPUTS
*	unit		- Device unit to open.
*	Sana2Req	- Pointer to IOSana2Req structure to be initialized by
*			  the sana2.device.
*	flags		- Supported flags are:
*				SANA2OPB_MINE
*				SANA2OPB_PROM
*	ios2_BufferManagement	- A pointer to a tag list containing
*				  pointers to buffer management functions.
*
*   RESULTS
*	error		- same as io_Error
*	io_Error	- Zero if successful; non-zero otherwise.
*	io_Device	- A pointer to whatever device will handle the calls
*			  for this unit.  This pointer may be different
*			  depending on what unit is requested.
*	ios2_BufferManagement	- A pointer to device internal information
*				  used to call buffer management functions.
*
*   NOTES
*
*   SEE ALSO
*	exec.library/OpenDevice(), exec.library/CloseDevice()
*
*   BUGS
*
******************************************************************************
*
*   IMPLEMENTATION NOTES
*
*	The system is single threaded while executing this function.
*
*
*   REGISTER USAGE
*
* D0 --	unit	?????	?????
* D1 --	flags	?????	?????
* A1 -- IOReq	?????	?????
* A6 --	device	?????	device
*


******* sana2.device/CloseDevice *****************************************
*
*   NAME
*	CloseDevice -- Close the device.
*
*   SYNOPSIS
*	CloseDevice(Sana2Req)
*		    A1
*
*	void CloseDevice(struct IOSana2Req *);
*
*   FUNCTION
*	This function is called by exec.library CloseDevice().
*
*	This function performs whatever cleanup is required at device closes.
*
*	Note that all IORequests MUST be complete before closing. If any are
*	pending, your program must AbortIO() then WaitIO() each outstanding
*	IORequest to complete them.
*
*   INPUTS
*	Sana2Req	- Pointer to IOSana2Req initialized by OpenDevice().
*
*   NOTES
*
*   SEE ALSO
*	exec.library/CloseDevice(), exec.library/OpenDevice()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*
* D0 --	?????	?????	SegList
* A1 -- IOReq	?????	?????
* A6 --	device	?????	device
*


*****i* sana2.device/BeginIO ***************************************
*
*   NAME
*	BeginIO -- Start an IO operation.
*
*   SYNOPSIS
*	BeginIO(Sana2Req)
*	        A1
*
*	void BeginIO(struct IOSana2Req *);
*
*   FUNCTION
*	This is a direct function call to the device. It is intended for more
*	advanced programmers. See Exec's DoIO() and SendIO() for the normal
*	method of calling devices.
*
*	This function initiates an I/O request made to a sana2.device.
*
*   INPUTS
*	Sana2Req	- Pointer to an initialized IOSana2Req structure.
*	ios2_Message	- An mn_ReplyPort is required.
*	ios2_Device	- Set by OpenDevice().
*	ios2_Unit	- Set by OpenDevice().
*	ios2_Command	- Needs to be set to proper command.
*	ios2_Flags	- If the IOB_QUICK bit is set the device will attempt
*			  to finish command without 'Replying' through the
*			  exec message system. The IOB_QUICK bit will be
*			  cleared if the request will 'Replied' when complete.
*	ios2_PacketType - Packet type of interest.
*	ios2_SrcAddr	- Source interface address of the packet.
*	ios2_DstAddr	- Destination interface address of the packet.
*	ios2_DataLength	- Length of Data.
*	ios2_Data	- Contents depend on particular command.
*	ios2_StatData	- Pointer to area to store statistics data.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*	ios2_SrcAddr	- Source interface address of the packet.
*	ios2_DstAddr	- Destination interface address of the packet.
*	ios2_DataLength	- Length of Data.
*	ios2_Data	- Contents depend on particular command.
*
*   NOTES
*
*   SEE ALSO
*	exec.library/DoIO(), exec.library/SendIO()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*
* A1 -- IOReq	?????	?????
* A6 --	device	?????	device
*


******* sana2.device/AbortIO ***************************************
*
*   NAME
*	AbortIO -- Remove an existing device request.
*
*   SYNOPSIS
*	error = AbortIO(Sana2Req)
*	D0              A1
*
*	LONG AbortIO(struct IOSana2Req *);
*
*   FUNCTION
*	This is an exec.library call.
*
*	This function aborts an ioRequest. If the request is active, it may or
*	may not be aborted. If the request is queued it is removed. The
*	request will be returned in the same way as if it had normally
*	completed.  You must WaitIO() after AbortIO() for the request to
*	return.
*
*   INPUTS
*	Sana2Req	- Sana2Req to be aborted.
*
*   RESULTS
*	error		- Zero if the request was aborted, non-zero otherwise.
*			  io_Error in Sana2Req will be set to IOERR_ABORTED
*			  if it was aborted.
*
*   NOTES
*
*   SEE ALSO
*	exec.library/AbortIO(), exec.library/WaitIO()
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*
* D0 --	?????	?????	error
* A1 -- IOReq	?????	?????
* A6 --	device	?????	device
*


*****i* sana2.device/Expunge ***************************************
*
*   NAME
*	Expunge -- Free device resources and dependencies.
*
*   SYNOPSIS
*	Expunge( )
*
*	void Expunge( void );
*
*   FUNCTION
*	This function deallocates all memory and other resources
*	associated with the device, if possible.
*
*   NOTES
*	This function is not permitted to wait.
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*
*   REGISTER USAGE
*
* D0 --	?????	?????	SegList
* A6 --	device	?????	device
*


******* sana2.device/CMD_READ ****************************************
*
*   NAME
*	Read -- Get a packet from the network.
*
*   FUNCTION
*	Get the next packet available of the requested packet type. The data
*	copied (via a call to the requestor-provided CopyToBuffer function)
*	into ios2_Data is normally the Data Link Layer packet data only. If
*	bit SANA2IOB_RAW is set in ios2_Flags, then the entire physical frame
*	will be returned.
*
*	Unlike most Exec devices, SANA-II device drivers do not have internal
*	buffers.  If you wish to read data from a SANA-II device you should
*	have multiple CMD_READ requests pending at any given time.  The
*	functions provided by you the requestor will be used for any incoming
*	packets of the type you've requested.  If no read requests are
*	outstanding for a type which comes in and no read_orphan requests are
*	outstanding, the packet will be lost.
*
*   IO REQUEST
*	ios2_Command	- CMD_READ
*	ios2_Flags	- Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	ios2_PacketType	- Packet type desired.
*	ios2_Data	- Abstract data structure to hold packet data.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*	ios2_Flags	- The following flags may be returned:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_BCAST
*	                    SANA2IOB_MCAST
*	ios2_SrcAddr	- Source interface address of packet.
*	ios2_DstAddr	- Destination interface address of packet.
*	ios2_DataLength	- Length of packet data.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   NOTES
*	The driver may not directly examine or modify anything pointed to by
*	ios2_Data.  It *must* use the requester-provided functions to access
*	this data.
*
*   SEE ALSO
*	S2_READORPHAN, CMD_WRITE, any_protocol/CopyToBuffer
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/CMD_WRITE ***************************************
*
*   NAME
*	Write -- Send packet to the network.
*
*   FUNCTION
*	This command causes the packet to be sent to the specified network
*	interface. Normally, appropriate packet header and trailer information
*	will be added to the packet data when it is sent.  If bit SANA2IOB_RAW
*	is set in io_Flags, then the ios2_Data is assumed to contain an entire
*	physical frame and will be sent (copied to the wire via
*	CopyFromBuffer() unmodified.
*
*	Note that the device should not check to see if the destination
*	address is on the local hardware.  Network protocols should realize
*	that the packet has a local destination long before it gets to a
*	SANA-II driver.
*
*   IO REQUEST
*	ios2_Command	- CMD_WRITE.
*	ios2_Flags	- Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	ios2_PacketType	- Packet type to send.
*	ios2_DstAddr	- Destination interface address for this packet.
*	ios2_DataLength	- Length of the Data to be sent.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	The driver may not directly examine or modify anything pointed to by
*	ios2_Data.  It *must* use the requester-provided functions to access
*	this data.
*
*   SEE ALSO
*	CMD_READ, S2_BROADCAST, S2_MULTICAST, any_protocol/CopyFromBuffer
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_READORPHAN *****************************
*
*   NAME
*	ReadOrphan -- Get a packet for which there is no reader.
*
*   FUNCTION
*	Get the next packet available that does not satisfy any	then-pending
*	CMD_READ requests. The data returned in the ios2_Data structure is
*	normally the Data Link Layer packet type field and the packet data. If
*	bit SANA2IOB_RAW is set in ios2_Flags, then the entire Data Link Layer
*	packet, including both header and trailer information, will be
*	returned.
*
*   IO REQUEST
*	ios2_Command	- CMD_READORPHAN.
*	ios2_Flags	- Supported flags are:
*				SANA2IOB_RAW
*				SANA2IOB_QUICK
*	ios2_DataLength	- Length of the Data to be sent.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*	ios2_Flags	- The following flags may be returned:
*				SANA2IOB_RAW
*				SANA2IOB_BCAST
*				SANA2IOB_MCAST
*	ios2_SrcAddr	- Source interface address of packet.
*	ios2_DstAddr	- Destination interface address of packet.
*	ios2_DataLength	- Length of the Data to be sent.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   NOTES
*	This is intended for debugging and management tools.  Protocols should
*	not use this.
*
*	As with 802.3 packets on an ethernet, to determine which protocol
*	family the returned packet belongs to you may have to specify
*	SANA2IOB_RAW to get the entire data link layer wrapper (which is where
*	the protocol type may be kept). Notice this necessarily means that
*	this cannot be done in a network interface independent fashion.  The
*	driver will, however, fill in the PacketType field to the best of its
*	ability.
*
*   SEE ALSO
*	CMD_READ, CMD_WRITE
*
*   BUGS
*
**********************************************************************
*
*  IMPLEMENTATION NOTES
*


******* sana2.device/S2_DEVICEQUERY ****************************
*
*   NAME
*	DeviceQuery -- Return parameters for this network interface.
*
*   FUNCTION
*	This command causes the device driver to report information about the
*	device. Up to SizeAvailable bytes of the information is copied
*	into a buffer pointed to by ios2_StatData. The format of the data is
*	as follows:
*
*	    struct Sana2DeviceQuery
*	    {
*	    \*
*	    ** Standard information
*	    *\
*	        ULONG SizeAvailble; /* bytes available */
*	        ULONG SizeSupplied; /* bytes supplied */
*	        LONG  DevQueryFormat;   /* this is type 0 */
*	        LONG  DeviceLevel;      /* this document is level 0 */
*
*	    \*
*	    ** Common information
*	    *\
*	        UWORD AddrFieldSize;    /* address size in bits */
*	        ULONG MTU;              /* maximum packet data size */
*	        LONG  bps;              /* line rate (bits/sec) */
*	        LONG  HardwareType;     /* what the wire is */
*
*	    \*
*	    ** Format specific information
*	    *\
*	    };
*
*	The SizeAvailable specifies the number of bytes that the caller
*	is prepared to accomodate, including the standard information fields.
*
*	SizeSupplied is the number of bytes actually supplied,
*	including the standard information fields, which will not exceed
*	SizeAvailable.
*
*	<devices/sana2.h> includes constants for these values.  If your
*	hardware does not have a number assigned to it, you must contact
*	CATS to get a hardware number.
*
*   IO REQUEST
*	ios2_Command	- S2_DEVICEQUERY.
*	ios2_StatData	- Pointer to Sana2DeviceQuery structure to fill in.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_GETSTATIONADDRESS **********************
*
*   NAME
*	GetStationAddress -- Get default and interface address.
*
*   FUNCTION
*	This command causes the device driver to copy the current interface
*	address into ios2_SrcAddr, and to copy the factory default station
*	address (if any) into ios2_DstAddr.
*
*   IO REQUEST
*	ios2_Command	- S2_GETSTATIONADDRESS.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*	ios2_SrcAddr	- Current interface address.
*	ios2_DstAddr	- Default interface address (if any).
*
*   NOTES
*
*   SEE ALSO
*	S2_CONFIGINTERFACE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_CONFIGINTERFACE ************************
*
*   NAME
*	ConfigInterface -- Configure the network interface.
*
*   FUNCTION
*	This command causes the device driver to initialize the interface
*	hardware and to set the network interface address to the address in
*	ios2_SrcAddr. This command can only be executed once and, if
*	successful, will leave the driver and network interface fully
*	operational and the network interface in ios2_SrcAddr.
*
*	To set the interface address to the factory address, the network
*	management software must use GetStationAddress first and then call
*	ConfigInterface with the result. If there is no factory address then
*	the network software must pick an address to use.
*
*	Until this command is executed the device will not listen for any
*	packets on the hardware.
*
*   IO REQUEST
*	ios2_Command	- S2_CONFIGINTERFACE.
*	ios2_Flags      - Supported flags are:
*				SANA2IOB_QUICK
*	ios2_SrcAddr	- Address for this interface.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*	ios2_SrcAddr	- Address of this interface as configured.
*
*   NOTES
*	Some networks have the interfaces choose a currently unused interface
*	address each time the interface is initialized. The caller must check
*	ios2_SrcAddr for the actual interface address after configuring the
*	interface.
*
*   SEE ALSO
*	S2_GETSTATIONADDRESS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES


*****i* OBSOLETE ***************************************************
*
*
*   NAME
*	AddStationAlias -- Add interface address alias.
*
*   FUNCTION
*	This function adds another network interface address to which the
*	network interface should respond.
*
*   IO REQUEST
*	ios2_Command	- S2_ADDSTATIONALIAS.
*	ios2_SrcAddr	- Alias to add.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Since alias interface addresses are not bound to a particular
*	packet type or read request, each added interface alias
*	address has an "added" count associated with it.
*
*   SEE ALSO
*	sana2.device/S2_DELSTATIONALIAS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


*****i* OBSOLETE ************************
*
*   NAME
*	DelStationAlias -- Delete a interface address alias.
*
*   FUNCTION
*	This function deletes a network interface address from the
*	list of addresses to which this interface should respond.
*
*   IO REQUEST
*	ios2_Command	- S2_DELSTATIONALIAS.
*	ios2_SrcAddr	- Alias to delete.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Since alias interface addresses are not bound to a particular packet
*	type or read request, each added interface alias address has an
*	"added" count associated with it.
*
*   SEE ALSO
*	sana2.device/S2_ADDSTATIONALIAS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_ADDMULTICASTADDRESS ********************
*
*   NAME
*	AddMulticastAddress -- Enable an interface multicast address.
*
*   FUNCTION
*	This command causes the device driver to enable multicast packet
*	reception for the requested address.
*
*   IO REQUEST
*	ios2_Command	- S2_ADDMULTICASTADDRESS.
*	ios2_SrcAddr	- Multicast address to enable.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Multicast addresses are added globally -- anyone using the device
*	may receive packets as a result of any multicast address which has
*	been added for the device.
*
*	Since multicast addresses are not "bound" to a particular packet type,
*	each enabled multicast address has an "enabled" count associated with
*	it so that if two protocols add the same multicast address and later
*	one removes it, it is still enabled until the second removes it.
*
*   SEE ALSO
*	S2_MULTICAST, S2_DELMULTICASTADDRESS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_DELMULTICASTADDRESS ********************
*
*   NAME
*	DelMultiCastAddress -- Disable an interface multicast address.
*
*   FUNCTION
*	This command causes device driver to disable multicast packet
*	reception for the requested address.
*
*	It is an error to disable a multicast address that is not enabled.
*
*   IO REQUEST
*	ios2_Command	- S2_DELMULTICASTADDRESS
*	ios2_SrcAddr	- Multicast address to disable.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Multicast addresses are added globally -- anyone using the device
*	may receive packets as a result of any multicast address which has
*	been added for the device.
*
*	Since multicast addresses are not "bound" to a particular packet type,
*	each enabled multicast address has an "enabled" count associated with
*	it so that if two protocols add the same multicast address and later
*	one removes it, it is still enabled until the second removes it.
*
*   SEE ALSO
*	S2_ADDMULTICASTADDRESS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_MULTICAST ******************************
*
*   NAME
*	Multicast -- Multicast a packet on network.
*
*   FUNCTION
*	This command works the same as CMD_WRITE except that it also performs
*	whatever special processing of the packet is required to do a
*	multicast send. The actual multicast mechanism is neccessarily
*	network/interface/device specific.
*
*   IO REQUEST
*	ios2_Command	- S2_MULTICAST.
*	ios2_Flags	- Supported flags are:
*				SANA2IOB_RAW
*				SANA2IOB_QUICK
*	ios2_PacketType	- Packet type to send.
*	ios2_DstAddr	- Destination interface address for this packet.
*	ios2_DataLength	- Length of the Data to be sent.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	                  This command can fail for many reasons and
*	                  is not supported by all networks and/or
*	                  network interfaces.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	The address supplied in ios2_DstAddr will be sanity checked (if
*	possible) by the driver. If the supplied address fails this sanity
*	check, the multicast request will fail immediately with ios2_Error
*	set to S2WERR_BAD_MULTICAST.
*
*	Another Amiga will not receive a multicast packet unless it has had
*	the particular multicast address being used S2_ADDMULTICASTADRESS'd.
*
*   SEE ALSO
*	CMD_WRITE, S2_BROADCAST, S2_ADDMULTICASTADDRESS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_BROADCAST ******************************
*
*   NAME
*	Broadcast -- Broadcast a packet on network.
*
*   FUNCTION
*	This command works the same as CMD_WRITE except that it also performs
*	whatever special processing of the packet is required to do a
*	broadcast send. The actual broadcast mechanism is neccessarily
*	network/interface/device specific.
*
*   IO REQUEST
*	ios2_Command	- S2_BROADCAST.
*	ios2_Flags	- Supported flags are:
*				SANA2IOB_RAW
*				SANA2IOB_QUICK
*	ios2_PacketType	- Packet type to send.
*	ios2_DataLength	- Length of the Data to be sent.
*	ios2_Data	- Abstract data structure which packet data is
*			  contained in.
*
*   RESULTS
*	ios2_DstAddr	- The contents of this field are to be
*			  considered trash upon return of the IOReq.
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	                  This command can fail for many reasons and
*	                  is not supported by all networks and/or
*	                  network interfaces.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	The DstAddr field may be trashed by the driver because this function
*	may be implemented by filling DstAddr with a broadcast address and
*	internally calling CMD_WRITE.
*
*   SEE ALSO
*	CMD_WRITE, S2_MULTICAST
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_TRACKTYPE ******************************
*
*   NAME
*	TrackType -- Accumulate statistics about a packet type.
*
*   FUNCTION
*	This command causes the device driver to accumulate statistics about
*	a particular packet type. Packet type statistics, for the particular
*	packet type, are zeroed by this command.
*
*   IO REQUEST
*	ios2_Command	- S2_TRACKTYPE.
*	ios2_PacketType	- Packet type of interest.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*
*   SEE ALSO
*	S2_UNTRACKTYPE, S2_GETTYPESTATS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_UNTRACKTYPE ****************************
*
*   NAME
*	UntrackType -- End statistics about a packet type.
*
*   FUNCTION
*	This command causes the device driver to stop accumulating
*	statistics about a particular packet type.
*
*   IO REQUEST
*	ios2_Command	- S2_UNTRACKTYPE.
*	ios2_PacketType	- Packet type of interest.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*
*   SEE ALSO
*	S2_TRACKTYPE, S2_GETTYPESTATS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_GETTYPESTATS ***************************
*
*   NAME
*	GetTypeStats -- Get accumulated type specific statistics.
*
*   FUNCTION
*	This command causes the device driver to retrieve various packet type
*	specific runtime statistics for this network interface. The format of
*	the data returned is as follows:
*
*	    struct Sana2TypeStatData
*	    {
*	        LONG PacketsSent;
*	        LONG PacketsReceived;
*	        LONG BytesSent;
*	        LONG BytesReceived;
*	        LONG PacketsDropped;
*	    };
*
*   IO REQUEST
*	ios2_Command	- S2_GETTYPESTATS.
*	ios2_PacketType	- Packet type of interest.
*	ios2_StatData	- Pointer to TypeStatData structure to fill in.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Statistics for a particular packet type are only available while that
*	packet type is being ``tracked''.
*
*   SEE ALSO
*	S2_TRACKTYPE, S2_UNTRACKTYPE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_GETSPECIALSTATS ************************
*
*   NAME
*	GetSpecialStats -- Get network type specific statistics.
*
*   FUNCTION
*	This function returns statistics which are specific to the type of
*	network medium this driver controls. For example, this command could
*	return statistics common to all Ethernets which are not common to all
*	network mediums in general.
*
*	The supplied Sana2SpecialStatData structure is given below:
*
*	    struct Sana2SpecialStatData
*	    {
*	        ULONG RecordCountMax;
*	        ULONG RecordCountSupplied;
*	        struct Sana2StatRecord[RecordCountMax];
*	    };
*
*	The format of the data returned is:
*
*	    struct Sana2StatRecord
*	    {
*	        ULONG Type;     /* commodore registered */
*	        LONG Count;     /* the stat itself */
*	        char *String;   /* null terminated */
*	    };
*
*	The RecordCountMax field specifies the number of records that the
*	caller is prepared to accomodate.
*
*	RecordCountSupplied is the number of record actually supplied which
*	will not exceed RecordCountMax.
*
*   IO REQUEST
*	ios2_Command	- S2_GETSPECIALSTATS.
*	ios2_StatData	- Pointer to a Sana2SpecialStatData structure to fill.
*			  RecordCountMax must be initialized.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Commodore will maintain registered statistic Types.
*
*   SEE ALSO
*	S2_GETGLOBALSTATS, <devices/sana2specialstats.h>
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_GETGLOBALSTATS *************************
*
*   NAME
*	GetGlobalStats -- Get interface accumulated statistics.
*
*   FUNCTION
*	This command causes the device driver to retrieve various global
*	runtime statistics for this network interface. The format of the
*	data returned is as follows:
*
*	    struct Sana2DeviceStats
*	    {
*	        ULONG PacketsReceived;
*	        ULONG PacketsSent;
*	        ULONG BadData;
*	        ULONG Overruns;
*	        ULONG UnknownTypesReceived;
*	        ULONG Reconfigurations;
*	        timeval LastStart;
*	    };
*
*   IO REQUEST
*	ios2_Command	- S2_GETGLOBALSTATS.
*	ios2_StatData	- Pointer to Sana2DeviceStats structure to fill.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*
*   SEE ALSO
*	S2_GETSPECIALSTATS
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_ONEVENT ********************************
*
*   NAME
*	OnEvent -- Return when specified event occures.
*
*   FUNCTION
*	This command returns when a particular event condition has occured
*	on the network or this network interface.
*
*   IO REQUEST
*	ios2_Command	- S2_ONEVENT.
*	ios2_Flags	- Supported flags are:
*				SANA2IOB_QUICK
*	ios2_WireError	- Mask of event(s) to wait for
*			  (from <devices/sana2.h>).
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- Mask of events that occured.
*
*   NOTES
*	If this device driver does not understand the specified event
*	condition(s) then the command returns immediately with
*	ios2_Req.io_Error set to S2_ERR_NOT_SUPPORTED and ios2_WireError
*	S2WERR_BAD_EVENT.  A successful return will have ios2_Error set to
*	zero ios2_WireError set to the event number.
*
*	All pending requests for a particular event will be returned when
*	that event occurs.
*
*	All event types that cover a particular condition are returned when
*	that condition occures. For instance, if an error is returned by
*	a buffer management function during receive processing, events of
*	types S2EVENT_ERROR, S2EVENT_RX and S2EVENT_BUFF would be returned if
*	pending.
*
*	Types ONLINE and OFFLINE return immediately if the device is
*	already in the state to be waited for.
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_ONLINE *********************************
*
*   NAME
*	Online -- Put a network interface back in service.
*
*   FUNCTION
*	This command places an offline network interface back into service.
*
*   IO REQUEST
*	ios2_Command	- S2_ONLINE.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	This command is responsible for putting the network interface
*	hardware back into a known state (as close as possible to the
*	state before S2_OFFLINE) and resets the unit global and special
*	statistics.
*
*   SEE ALSO
*	S2_OFFLINE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/S2_OFFLINE ********************************
*
*   NAME
*	Offline -- Remove interface from service.
*
*   FUNCTION
*	This command removes a network interface from service.
*
*   IO REQUEST
*	ios2_Command	- S2_OFFLINE.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*	ios2_WireError	- More specific error number.
*
*   NOTES
*	Aborts all pending reads and writes with ios2_Error set to
*	S2ERR_OUTOFSERVICE.
*
*	While the interface is offline, all read, writes and any other
*	command that touches interface hardware will be rejected with
*	ios2_Error set to S2ERR_OUTOFSERVICE.
*
*	This command is intended to permit a network interface to be
*	tested on an otherwise live system.
*
*   SEE ALSO
*	S2_ONLINE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/CMD_START ***************************************
*
*   NAME
*	Start -- Restart device operation.
*
*   FUNCTION
*	There is no way for the driver to keep queuing requests without
*	servicing them, so CMD_STOP does not apply to this class of device.
*	S2_OFFLINE and S2_ONLINE do perform a similar function to CMD_STOP
*	and CMD_START
*
*   IO REQUEST
*	ios2_Command	- CMD_START.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*	S2_ONLINE, S2_OFFLINE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


******* sana2.device/CMD_STOP ****************************************
*
*   NAME
*	Stop -- Pause device operation.
*
*   FUNCTION
*	There is no way for the driver to keep queuing requests without
*	servicing them, so CMD_STOP does not apply to this class of device.
*	S2_OFFLINE and S2_ONLINE do perform a similar function to CMD_STOP
*	and CMD_START
*
*   IO REQUEST
*	ios2_Command	- CMD_STOP.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*	S2_ONLINE, S2_OFFLINE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


******* sana2.device/CMD_CLEAR ***************************************
*
*   NAME
*	Clear -- Clear internal network interface read buffers.
*
*   FUNCTION
*	There are no device internal buffers, so CMD_CLEAR does not apply to
*	this class of device.
*
*   IO REQUEST
*	ios2_Command	- CMD_CLEAR.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


******* sana2.device/CMD_FLUSH ***************************************
*
*   NAME
*	Flush -- Clear all queued I/O requests for the SANA-II device.
*
*   FUNCTION
*	This command aborts all I/O requests in both the read and write
*	request queues of the device.  All pending I/O requests are
*	returned with an error message (IOERR_ABORTED).  CMD_FLUSH does not
*	affect active requests.
*
*   IO REQUEST
*	ios2_Command	- CMD_FLUSH.
*
*   RESULTS
*	ios2_Error	- Zero if successful; non-zero otherwise.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


******* sana2.device/CMD_INVALID *************************************
*
*   NAME
*	Invalid -- Return with error IOERR_NOCMD.
*
*   FUNCTION
*	This command causes device driver to reply with an error IOERR_NOCMD
*	as defined in <exec/errors.h> indicating the command is not supported.
*
*   IO REQUEST
*	ios2_Command	- CMD_INVALID.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*	Not known to be useful.
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/CMD_RESET ***************************************
*
*   NAME
*	Reset -- Reset the network interface to initialized state.
*
*   FUNCTION
*	Currently, SANA-II devices can only be configured once (with
*	CMD_CONFIGINTERFACE) and cannot be re-configured, hence,
*	CMD_RESET does not apply to this class of device.
*
*   IO REQUEST
*	ios2_Command	- CMD_RESET.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


******* sana2.device/CMD_UPDATE **************************************
*
*   NAME
*	Update -- Force packets out to device.
*
*   FUNCTION
*	Since there are no device internal buffers, CMD_UPDATE does not
*	apply to this class of device.
*
*   IO REQUEST
*	ios2_Command	- CMD_UPDATE.
*
*   RESULTS
*	ios2_Error	- IOERR_NOCMD.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
*	Does not apply to this class of device.
*


@


1.5
log
@January 1 Final Version
@
text
@d1 1
a1 1
$Id: sana2device.spec,v 1.4 91/11/13 13:39:58 dlarson Exp Locker: dlarson $
d1257 1
a1257 1
*	effect active requests.
@


1.4
log
@removed bogus () from a coupla headers
@
text
@d1 1
a1 1
$Id: sana2device.spec,v 1.3 91/11/13 13:37:30 dlarson Exp Locker: dlarson $
d170 1
a170 2
*	ios2_PacketType - Pointer to the Sana2PacketType structure for the
*			  packet type of interest.
d310 2
a311 2
*	ios2_PacketType	- Pointer to packet type desired.
*	ios2_Body	- Abstract data structure to hold packet data.
d365 1
a365 1
*	ios2_PacketType	- Pointer to type of packet to send.
d430 7
a436 5
*	To determine which protocol family the returned packet belongs to you
*	may have to specify SANA2IOB_RAW to get the entire data link layer
*	wrapper (which is where the protocol type may be kept). Notice this
*	necessarily means that this cannot be done in a network interface
*	independent fashion.
d445 1
a445 1
*   IMPLEMENTATION NOTES
d754 1
a754 1
*	ios2_PacketType	- Pointer to type of packet to send.
d803 1
a803 1
*	ios2_PacketType	- Pointer to type of packet to send.
d845 1
a845 1
*	ios2_PacketType	- Pointer to the packet type of interest.
d875 1
a875 1
*	ios2_PacketType	- Pointer to the packet type of interest.
d915 1
a915 1
*	ios2_PacketType	- Pointer to the packet type of interest.
d1007 7
a1013 13
*	        LONG packets_received;
*	        LONG packets_sent;
*	        LONG framming_errors;
*	        LONG bad_data;
*	        LONG bytes_received;
*	        LONG bytes_sent;
*	        LONG hard_misses;
*	        LONG soft_misses;
*	        LONG unknown_types_received;
*	        LONG fifo_overruns;
*	        LONG fifo_underruns;
*	        LONG reconfigurations;
*	        timeval last_start;
@


1.3
log
@correct contradictions in GETSTATIONADDRESS and fix up ONEVENT for
masks and ONLINE/OFFLINE and no netbuffs.
@
text
@d1 1
a1 1
$Id: sana2device.spec,v 1.2 91/10/21 11:57:14 dlarson Exp Locker: dlarson $
d4 1
a4 1
*****i* sana2.device/Init() ******************************************
d99 1
a99 1
******* sana2.device/CloseDevice() *****************************************
d142 1
a142 1
*****i* sana2.device/BeginIO() ***************************************
d205 1
a205 1
******* sana2.device/AbortIO() ***************************************
d253 1
a253 1
*****i* sana2.device/Expunge() ***************************************
@


1.2
log
@version 1.9.1 revisions
@
text
@d1 1
a1 1
$Id: sana2device.spec,v 1.1 91/10/16 11:19:15 dlarson Exp Locker: dlarson $
a2 37
TABLE OF CONTENTS

 sana2.device
sana2.device/Init
sana2.device/Open
sana2.device/Close
sana2.device/BeginIO
sana2.device/AbortIO
sana2.device/Expunge
sana2.device/CMD_READ
sana2.device/CMD_WRITE
sana2.device/S2_READORPHAN
sana2.device/S2_DEVICEQUERY
sana2.device/S2_GETSTATIONADDRESS
sana2.device/S2_CONFIGINTERFACE
sana2.device/S2_ADDSTATIONALIAS
sana2.device/S2_DELSTATIONALIAS
sana2.device/S2_ADDMULTICASTADDRESS
sana2.device/S2_DELMULTICASTADDRESS
sana2.device/S2_MULTICAST
sana2.device/S2_BROADCAST
sana2.device/S2_TRACKTYPE
sana2.device/S2_UNTRACKTYPE
sana2.device/S2_GETTYPESTATS
sana2.device/S2_GETSPECIALSTATS
sana2.device/S2_GETGLOBALSTATS
sana2.device/S2_ONEVENT
sana2.device/S2_ONLINE
sana2.device/S2_OFFLINE
sana2.device/CMD_START
sana2.device/CMD_STOP
sana2.device/CMD_CLEAR
sana2.device/CMD_FLUSH
sana2.device/CMD_INVALID
sana2.device/CMD_RESET
sana2.device/CMD_UPDATE

d455 1
a455 1
*	device. Up to DevQuerySizeAvailable bytes of the information is copied
d464 2
a465 2
*	        ULONG DevQuerySizeAvailble; /* bytes available */
*	        ULONG DevQuerySizeSupplied; /* bytes supplied */
d482 1
a482 1
*	The DeviceQueryAvailable specifies the number of bytes that the caller
d485 1
a485 1
*	DevQuerySizeSupplied is the number of bytes actually supplied,
d487 1
a487 1
*	DevQuerySizeAvailable.
d489 4
a492 6
*	The values used to identify the type of physical hardware are the same
*	values used in the hardware type field (hdr) of Address Resolution
*	Protocol (ARP) packets as defined by RFC-826 (ARP) and RFC-1060
*	(Assigned Numbers, March 1990).  <sana2.h> includes constants for
*	these values.
**
d529 2
a530 2
*	ios2_SrcAddr	- Default interface address (if any).
*	ios2_DstAddr	- Current interface address.
a585 2
*	What to do when/if the network interface address changes due to a
*	network reconfiguration.
d1055 2
a1056 1
*	ios2_WireError	- Event number to wait for (from <devices/sana2.h>).
d1060 1
a1060 1
*	ios2_WireError	- Event number that occured.
d1064 4
a1067 3
*	condition then the command returns immediately with ios2_Error
*	non-zero. A successful return will have ios2_Error set to zero
*	ios2_WireError set to the event number.
d1074 2
a1075 2
*	NetBuff.library during receive processing, events of types
*	S2EVENT_ERROR, S2EVENT_RX and S2EVENT_NETBUFF would be returned if
d1077 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$Id: sana2device.spec,v 1.12 91/07/15 13:26:21 rsbx Exp $
d14 18
a31 18
sana2.device/SANA2CMD_READORPHAN
sana2.device/SANA2CMD_DEVICEQUERY
sana2.device/SANA2CMD_GETSTATIONADDRESS
sana2.device/SANA2CMD_CONFIGINTERFACE
sana2.device/SANA2CMD_ADDSTATIONALIAS
sana2.device/SANA2CMD_DELSTATIONALIAS
sana2.device/SANA2CMD_ADDMULTICASTADDRESS
sana2.device/SANA2CMD_DELMULTICASTADDRESS
sana2.device/SANA2CMD_MULTICAST
sana2.device/SANA2CMD_BROADCAST
sana2.device/SANA2CMD_TRACKTYPE
sana2.device/SANA2CMD_UNTRACKTYPE
sana2.device/SANA2CMD_GETTYPESTATS
sana2.device/SANA2CMD_GETSPECIALSTATS
sana2.device/SANA2CMD_GETGLOBALSTATS
sana2.device/SANA2CMD_ONEVENT
sana2.device/SANA2CMD_ONLINE
sana2.device/SANA2CMD_OFFLINE
a40 482
******* sana2.device *************************************************
*
*	The SANA-II device specification represents a Data Transfer
*	Level interface standard for Amigas. The intent is: 1) for all
*	Amiga network hardware vendors to create a SANA-II device
*	driver for their hardware, 2) for all protocol stack writers
*	to access the networks via SANA-II device drivers, 3) any
*	protocol stack to work with any SANA-II device driver.
*
*
*   GOALS
*	Simplicity: A SANA-II device driver should be as simple to
*	write as any other Amiga device.
*
*	Low cost: A functional SANA-II device driver should take about
*	one man month or less for an experienced Amiga programmer with
*	Amiga device writing experience to write. A tuned and polished
*	SANA-II device should require only one additional man month.
*
*	Compatibility: All SANA-II device drivers behave largely the
*	same.
*
*	Low resource usage: A SANA-II device driver should not require
*	large amounts of memory, cpu cycles or any other system
*	resource to operate efficiently.
*
*	Ease of use: Using SANA-II devices should be the easiest way
*	for protocol stack writers to access the networks.
*
*
*   NON-GOALS
*	Lowest common denominator: Not all network interfaces can
*	support all the features available in this specification or
*	other network types.
*
*	Feature-itis: Not every feature of every type of network is
*	represented.
*
*	Network management tools: Analysis and debugging of a network
*	requires specialized software for that purpose.
*
*
*   STRUCTURES
*	    struct IOSana2Req
*	        {
*	        struct Message S2io_Message;
*	        struct Device *S2io_Device;
*	        struct Unit   *S2io_Unit;
*
*	        UWORD S2io_Command;
*	        UBYTE S2io_Flags;
*	        BYTE  S2io_Error;
*	        ULONG S2io_WireError;
*
*	        struct Sana2PacketType *S2io_PacketType;
*	        UBYTE S2io_SrcAddr[SANA2_MAX_ADDR_BYTES];
*	        UBYTE S2io_DstAddr[SANA2_MAX_ADDR_BYTES];
*	        ULONG S2io_DataLength;
*	        struct NetBuff S2io_Body;
*	        void *S2io_StatData;
*	        };
*
*	    Message
*	        Initialized and used the same as all device IORequest
*	        Message structures.
*
*	    Device
*	        Device private.
*
*	    Unit
*	        Device private.
*
*	    Command
*	        Command requested.
*
*	    Flags
*	        Used to request special options and return status
*	        information.
*
*	    Error
*	        Indicates completion status of a command in general
*	        terms.
*
*	    WireError
*	        More specific error number. Only valid when S2io_Error
*	        is non-zero.
*
*	    PacketType
*	        Pointer to a Sana2PacketType structure. The device
*	        uses the contents of the structure to determine if a
*	        packet from the network will satisfy a particular read
*	        command, or to build the appropriate packet header and
*	        trailer for a packet send. The device will not modify
*	        either the pointer or the structure.
*
*	    SrcAddr
*	        The device fills in this field with the interface
*	        address of the source of the packet that satisfied a
*	        read command. The bytes used to hold the address will
*	        be left justified but the bit layout is dependent on
*	        the particular type of network.
*
*	    DstAddr
*	        This field is filled in with the interface destination
*	        address of the packet for a send command. The bytes
*	        used to hold the address will be left justified but
*	        the bit layout is dependent on the particular type of
*	        network.
*
*	    DataLength
*	        The device fills in this field with the size of the
*	        packet data as it was sent on the wire. This does not
*	        include the header and trailer information. Depending
*	        on the network type and protocol type, the driver may
*	        have to calculate this value.
*
*	    Body
*	        A NetBuff structure with the packet data.
*
*	    StatData
*	        Pointer to a data area in memory to place a a snapshot
*	        of device statics. The data area must be long word
*	        aligned.
*
*	
*	    struct Sana2PacketType
*	        {
*	        ULONG CanonicalType;
*	        ULONG Magic;
*	        ULONG Length;
*	        UBYTE *Match;
*	        UBYTE *Mask;
*	        };
*
*	    CanonicalType
*	        Not used by the device.
*
*	    Magic
*	        Determines how the fields in this structure are to be
*	        interpretted.
*
*	    Length
*	        Number of bytes pointed to be Match and Mask.
*
*	    Match
*	        Pointer to packet type match data. The data must be
*	        long word (32 bit) aligned.
*
*	    Mask
*	        Pointer to packet type mask data. The data must be
*	        long word (32 bit) aligned.
*
*
*	    struct Sana2DeviceQuery
*	        {
*	        /*
*	         * Standard information
*	         */
*	        ULONG SizeAvailable;
*	        ULONG SizeSupplied;
*	        LONG DevQueryFormat;
*	        LONG DeviceLevel;
*	        /*
*	         * Common information
*	         */
*	        UWORD AddrFieldSize;
*	        ULONG MTU;
*	        LONG bps;
*	        LONG HardwareType;
*	        /*
*	         * Format specific information
*	         */
*	        };
*
*	    SizeAvailable
*	        Size, in bytes, of the space available in which to
*	        place device information. This includes both size
*	        fields.
*
*	    SizeSupplied
*	        Size, in bytes, of the data supplied.
*
*	    DevQueryFormat
*	        The format defined here is format 0.
*
*	    DeviceLevel
*	        This spec defines level 0.
*
*	    AddrFieldSize
*	        The number of bits in an interface address.
*
*	    MTU
*	        Maximum Transmission Unit, the size, in bytes, of the
*	        maximum packet size, not including header and trailer
*	        information.
*
*	    bps
*	        Best guess at the raw line rate for this network in
*	        bits per second.
*
*	    HardwareType
*	        Specifies the type of network wire the driver
*	        controls.
*
*
*	    struct Sana2PacketTypeStats
*	        {
*	        LONG PacketsSent;
*	        LONG PacketsReceived;
*	        LONG BytesSent;
*	        LONG BytesReceived;
*	        LONG PacketsDropped;
*	        };
*
*	    PacketsSent
*	        Number of packets of a particular type sent.
*
*	    PacketsReceived
*	        Number of packets of a particular type that satisfied
*	        a read command.
*
*	    BytesSent
*	        Number of bytes of data sent in packets of a
*		particular type.
*
*	    BytesReceived
*	        Number of bytes of data of a particular packet type
*	        that satisfied a read command.
*
*	    PacketsDropped
*	        Number of packets of a particular type that were
*	        received while there were no pending reads of that
*	        packet type.
*
*
*	    struct Sana2SpecialStatRecord
*	        {
*	        ULONG Type;
*	        LONG Count;
*	        char *String;
*	        };
*
*	    Type
*	        Statistic identifier.
*
*	    Count
*	        Statistic itself.
*
*	    String
*	        Identifying string for the statistic. Should be plain
*	        ASCII with no formatting characters.
*
*
*	    struct Sana2SpecialStatHeader
*	        {
*	        ULONG RecordCountMax;
*	        ULONG RecordCountSupplied;
*	        struct Sana2SpecialStatRecord[RecordCountMax];
*	        };
*
*	    RecordCountMax
*	        Space for this many number of records is available to
*	        place statistics information in.
*
*	    RecordCountSupplied
*	        Number of statistic records supplied.
*
*
*	    struct Sana2DeviceStats
*	        {
*	        LONG packets_received;
*	        LONG packets_sent;
*	        LONG framing_errors;
*	        LONG bad_data;
*	        LONG hard_misses;
*	        LONG soft_misses;
*	        LONG unknown_types_received;
*	        LONG fifo_overruns;
*	        LONG fifo_underruns;
*	        LONG reconfigurations;
*	        struct timeval last_start;
*	        };
*
*	    packets_received
*	        Number of packets that this unit has received.
*
*	    packets_sent
*	        Number of packets that this unit has sent.
*
*	    framing_errors
*	        Number of framing errors detected.
*
*	    bad_data
*	        Number of bad packets received.
*
*	    hard_misses
*	        Number of packets lost due to insufficient resources
*	        available in the network interface.
*
*	    soft_misses
*	        Number of packets lost due to insifficient resources
*	        available on the host.
*
*	    unknown_type_received
*	        Number of packets received that had no pending read
*	        command with the appropriate packet type.
*
*	    fifo_overruns
*	        Number of overruns encountered when attempting to
*	        store received packets.
*
*	    fifo_underruns
*	        Number of underruns encountered when attempting to
*	        send packets.
*
*	    reconfigurations
*	        Number of network reconfigurations since this unit was
*	        last configured.
*
*	    last_start
*	        The time when this unit last went online.
*
*
*   CONSTANTS
*	OpenDevice flags argument (SANA2OPB_xxx):
*	    MINE
*	        Exclusive access to the unit requested.
*
*	    PROM
*	        Promiscuous mode requested.
*
*
*	IOSana2Req S2io_Flags field (SANA2IOB_xxx):
*	    RAW
*	        Raw packet read/write requested.
*
*	    BCAST
*	        Broadcast packet (received).
*
*	    MCAST
*	        Multicast packet (received).
*
*	    QUICK
*	        Quick IO requested.
*
*
*	IOSana2Req S2io_Error field (S2ERR_xxx):
*	    NO_RESOURCES
*	        Insufficient resources available.
*
*	    UNKNOWN_ENTITY
*	        Specified entity unknown or not found.
*
*	    BAD_ARGUMENT
*	        Noticably bad argument.
*
*	    BAD_STATE
*	        Command inappropriate for current state.
*
*	    BAD_ADDRESS
*	        Noticably bad address.
*
*	    MTU_EXCEEDED
*	        Write data too large.
*
*	    BAD_PROTOCOL
*	        Noticably bad packet type.
*
*	    NOT_SUPPORTED
*	        Command is not supported by this driver. This is
*	        similar to IOERR_NOCMD as defined in exec/errors.h but
*	        S2ERR_NOT_SUPPORTED indicates that the requested
*	        command is a valid SANA-II command and that the driver
*	        does not support it, e.g. SANA2CMD_MULTICAST.
*
*	    SOFTWARE
*	        Software error of some kind.
*
*
*	IOSana2Req S2io_WireError field (S2WERR_xxx):
*	    NOT_CONFIGURED
*	        Command requires unit to be configured.
*
*	    UNIT_ONLINE
*	        Command requires that the unit be offline.
*
*	    UNIT_OFFLINE
*	        Command requires that the unit be online.
*
*	    ALREADY_TRACKED
*	        Protocol is already being tracked.
*
*	    NOT_TRACKED
*	        Protocol is not being tracked.
*
*	    NETBUFF_ERROR
*	        NetBuff.library error return caused error.
*
*	    SRC_ADDRESS
*	        Problem with the source address field.
*
*	    DST_ADDRESS
*	        Problem with destination address field.
*
*	    BAD_BROADCAST
*	        Problem with an attempt to broadcast.
*
*	    BAD_MULTICAST
*	        Problem with an attempt to multicast.
*
*	    ALIAS_LIST_FULL
*	        Station alias list full.
*
*	    BAD_ALIAS
*	        Bad or unknown station alias.
*
*	    MULTICAST_FULL
*	        Multicast address list full.
*
*	    BAD_EVENT
*	        Event specified is unknown.
*
*	    BAD_STATDATA
*	        The S2IO_StatData pointer or the data it points to
*	        failed a sanity check.
*
*	    PROTOCOL_UNKNOWN
*	        The protocol specified is unknown or the type of magic
*	        used by the request protocol is unknown.
*
*	    IS_CONFIGURED
*	        Attempt to reconfigure the unit.
*
*	    NULL_POINTER
*	        A NULL pointer was detected in one of the arguments.
*
*
*	Event types (S2EVENT_xxx):
*	    ERROR
*	        Return when any error occures.
*
*	    TX
*	        Return on any transmit error.
*
*	    RX
*	        Return on any receive error.
*
*	    ONLINE
*	        Return when unit goes online.
*
*	    OFFLINE
*	        Return when unit goes offline.
*
*	    NETBUFF
*	        Return on any NetBuff.library error.
*
*	    HARDWARE
*	        Return when any hardware error occures.
*
*	    SOFTWARE
*	        Return when any software error occures.
*
*
*   SEE ALSO
*	NetBuff.library documentation.
*
*	Separate document for each type of network detailing specific
*	device requirements.
*
*
*   CREDITS
*	Raymond S. Brand,   rsbx@@cbmvax.commodore.com,  (215) 431-9100
*	Martin Hunt,      martin@@cbmvax.commodore.com,  (215) 431-9100
*	Perry Kivolowitz,           ASDG Incorporated,  (608) 273-6585
*	Dale Luck,                    dale@@boing.uucp,  (408) 262-1469
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


d76 1
a76 1
*****i* sana2.device/Open() ******************************************
d82 2
a83 2
*	error = Open( unit, Sana2Req, flags )
*	D0            D0    A1        D1  
d85 1
a85 1
*	BYTE Open( ULONG, struct IOSana2Req *, ULONG );
d95 24
a118 22
*	unit            Device unit to open.
*	Sana2Req        Pointer to IOSana2Req structure to be
*	                    initialized by the sana2.device.
*	flags           Supported flags are:
*	                    SANA2OPB_MINE
*	                    SANA2OPB_PROM
*
*   RESULTS
*	error           same as io_Error
*	io_Error        Zero if successful; non-zero otherwise.
*	io_Device       A pointer to whatever device will handle the
*	                    calls for this unit.  This pointer may be
*	                    different depending on what unit is
*	                    requested.
*
*   NOTES
*
*   SEE ALSO
*	exec.library/OpenDevice(),
*	exec.library/CloseDevice()
*
*   BUGS
d120 1
a120 1
**********************************************************************
d136 1
a136 1
*****i* sana2.device/Close() *****************************************
d142 2
a143 2
*	Close( Sana2Req )
*	       A1
d145 1
a145 1
*	void Close( struct IOSana2Req * );
d150 1
a150 2
*	This function performs whatever cleanup is required at device
*	closes.
d152 3
a154 3
*	Note that all IORequests MUST be complete before closing. If
*	any are pending, your program must AbortIO() then WaitIO()
*	each outstanding IORequest to complete them.
d157 1
a157 1
*	Sana2Req        Pointer to Sana2Req initialized by Open().
d162 1
a162 2
*	exec.library/CloseDevice(),
*	exec.library/OpenDevice()
d185 2
a186 2
*	BeginIO( Sana2Req )
*	         A1
d188 1
a188 1
*	void BeginIO( struct IOSana2Req * );
d190 4
a193 4
*   FUNCTION
*	This is a direct function call to the device. It is intended
*	for more advanced programmers. See exec's DoIO() and SendIO()
*	for the normal method of calling devices.
d195 1
a195 1
*	This function initiates a I/O request made to a sana2.device.
d198 34
a231 36
*	Sana2Req        Pointer to an initialized IOSana2Req
*	                    structure.
*	S2io_Message    A mn_ReplyPort is required.
*	S2io_Device     Set by Open().
*	S2io_Unit       Set by Open().
*	S2io_Command    Needs to be set to proper command
*	S2io_Flags      If the IOB_QUICK bit is set the device will
*	                    attempt to finish command without
*	                    'Replying' through the exec message
*	                    system. The IOB_QUICK bit will be cleared
*	                    if the request will 'Replied' when
*	                    complete.
*	S2io_PacketType Pointer to the Sana2PacketType structure for
*	                    the packet type of interest.
*	S2io_SrcAddr    Source interface address of the packet.
*	S2io_DstAddr    Destination interface address of the packet.
*	S2io_Body       Contents depend on particular command.
*	S2io_StatData   Pointer to area to store statistics data.
*
*   RESULTS
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*	S2io_SrcAddr    Source interface address of the packet.
*	S2io_DstAddr    Destination interface address of the packet.
*	S2io_Body       Contents depend on particular command.
*
*   NOTES
*
*   SEE ALSO
*	exec.library/DoIO(),
*	exec.library/SendIO()
*
*   BUGS
*
**********************************************************************
*
d248 2
a249 2
*	error = AbortIO( Sana2Req )
*	D0               A1
d251 1
a251 1
*	LONG AbortIO( struct IOSana2Req * );
d256 5
a260 4
*	This function aborts an ioRequest. If the request is active,
*	it may or may not be aborted. If the request is queued it is
*	removed. The request will be returned in the same way as if
*	it had normally completed.
d263 1
a263 1
*	Sana2Req        Sana2Req to be aborted.
d266 3
a268 4
*	error           Zero if the request was aborted, non-zero
*	                    otherwise. S2io_Error in Sana2Req will be
*	                    set to IOERR_ABORTED (-2) if it was
*	                    aborted.
d273 1
a273 1
*	exec.library/AbortIO()
d329 22
a350 15
*	Get the next packet available of the requested packet type.
*	The data returned in the S2io_Body NetBuff is normally the
*	Data Link Layer packet data only. If bit SANA2IOB_RAW is set
*	in S2io_Flags, then the entire Data Link Layer packet,
*	including both header and trailer information, will be
*	returned.
*
*   IO REQUEST
*	S2io_Command    CMD_READ
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	S2io_PacketType Pointer to packet type desired.
*	S2io_Body       NetBuff to hold packet data.
*
d352 3
a354 3
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*	S2io_Flags      The following flags may be returned:
d358 5
a362 5
*	S2io_SrcAddr    Source interface address of packet.
*	S2io_DstAddr    Destination interface address of packet.
*	S2io_DTLLength  Length of packet data as given by the Data
*	                    Link Layer protocol.
*	S2io_Body       NetBuff with packet data.
d365 3
a367 2
*	Only the first NetBuffSegment in the NetBuff passed is
*	guaranteed to be returned.
d370 1
a370 2
*	sana2.device/SANA2CMD_READORPHAN,
*	sana2.device/CMD_WRITE
d386 41
a426 37
*	This command causes the packet to be sent to the specified
*	network interface. Normally, appropriate packet header and
*	trailer information will be added to the packet data when it
*	is sent. If bit SANA2IOB_RAW is set in io-Flags, then the
*	S2io_Body NetBuff is assumed to contain an entire Data Link
*	Layer packet and will be sent unmodified.
*
*	The data in the S2io_Body NetBuff is returned unmodified; but,
*	the distribution of the data in, and the number of
*	NetBuffSegments, the S2io_Body NetBuff may be modified.
*
*   IO REQUEST
*	S2io_Command    CMD_WRITE
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	S2io_PacketType Pointer to type of packet to send.
*	S2io_DstAddr    Destination interface address for this packet.
*	S2io_Body       NetBuff with packet data.
*
*   RESULTS
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*
*   NOTES
*
*   SEE ALSO
*	sana2.device/CMD_READ,
*	sana2.device/SANA2CMD_BROADCAST,
*	sana2.device/SANA2CMD_MULTICAST
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
d429 1
a429 1
******* sana2.device/SANA2CMD_READORPHAN *****************************
d435 6
a440 6
*	Get the next packet available that does not satisfy any
*	then-pending CMD_READ requests. The data returned in the
*	S2io_Body NetBuff is normally the Data Link Layer packet type
*	field and the packet data. If bit SANA2IOB_RAW is set in
*	S2io_Flags, then the entire Data Link Layer packet, including
*	both header and trailer information, will be returned.
d443 40
a482 39
*	S2io_Command    CMD_READORPHAN
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	S2io_Body       NetBuff to hold packet data.
*
*   RESULTS
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*	S2io_Flags      The following flags may be returned:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_BCAST
*	                    SANA2IOB_MCAST
*	S2io_SrcAddr    Source interface address of packet.
*	S2io_DstAddr    Destination interface address of packet.
*	S2io_DTLLength  Lenght of packet data as given by the Data
*	                    Link Layer protocol.
*	S2io_Body       NetBuff with packet data.
*
*   NOTES
*	Only the first NetBuffSegment in the NetBuff passed in is
*	guarenteed to be returned.
*
*	To determine which protocol family the returned packet belongs
*	to you may have to specify SANA2IOB_RAW to get the entire data
*	link layer wrapper (which is where the protocol type may be
*	kept). Notice this necessarily means that this cannot be done
*	in a network interface independent fashion.
*
*   SEE ALSO
*	sana2.device/CMD_READ,
*	sana2.device/CMD_WRITE
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
d485 1
a485 1
******* sana2.device/SANA2CMD_DEVICEQUERY ****************************
d491 4
a494 4
*	This command causes the device driver to report information
*	about the device. Up to DevQuerySizeAvailable bytes of the
*	information is copied into a buffer pointed to by
*	S2io_StatData. The format of the data is as follows:
d497 4
a500 4
*	        {
*	        /*
*	         * Standard information
*	         */
d506 3
a508 3
*	        /*
*	         * Common information
*	         */
d514 4
a517 4
*	        /*
*	         * Format specific information
*	         */
*	        };
d519 2
a520 3
*	The DeviceQueryAvailable specifies the number of bytes that
*	the caller is prepared to accomodate, including the standard
*	information fields.
d523 2
a524 52
*	including the standard information fields, which will not
*	exceed DevQuerySizeAvailable.
*
*	The values used to identify the type of physical hardware are
*	the same values used in the hardware type field (hdr) of
*	Address Resolution Protocol (ARP) packets as defined by
*	RFC-826 (ARP) and RFC-1060 (Assigned Numbers, March 1990).
*
*	The following are defined in RFC-1060.
*
*	    Hardware Type (hrd)
*
*	        Type   Description
*	        ----   -----------
*	          1    Ethernet (10Mb)
*	          2    Experimental Ethernet (3Mb)
*	          3    Amateur Radio AX.25
*	          4    Proteon ProNET Token Ring
*	          5    Chaos
*	          6    IEEE 802 Networks
*	          7    ARCNET
*	          8    Hyperchannel
*	          9    Lanstar
*	         10    Autonet Short Address
*	         11    LocalTalk
*	         12    LocalNet (IBM PCNet or SYTEK LocalNET)
*
*   IO REQUEST
*	S2io_Command    SANA2CMD_DEVICEQUERY
*	S2io_StatData   Pointer to Sana2DeviceQuery structure to fill
*	                    in.
*
*   RESULTS
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*
*   NOTES
*
*   SEE ALSO
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*


******* sana2.device/SANA2CMD_GETSTATIONADDRESS **********************
*
*   NAME
*	GetStationAddress -- Get default and interface address.
d526 6
a531 5
*   FUNCTION
*	This command causes the device driver to copy the current
*	interface address into S2io_SrcAddr, and to copy the factory
*	default station address into S2io_DstAddr.
*
d533 2
a534 1
*	S2io_Command    SANA2CMD_GETSTATIONADDRESS
d537 2
a538 4
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*	S2io_SrcAddr    Default interface address.
*	S2io_DstAddr    Current interface address.
a542 1
*	sana2.device/SANA2CMD_CONFIGINTERFACE
d552 1
a552 1
******* sana2.device/SANA2CMD_CONFIGINTERFACE ************************
d555 1
a555 1
*	ConfigInterface -- Configure the network interface.
d558 3
a560 15
*	This command causes the device driver to initialize the
*	interface hardware and to set the network interface address to
*	the address in S2io_SrcAddr. This command can only be executed
*	once and, if successful, will leave the driver and network
*	interface fully operational and the network interface in
*	S2io_SrcAddr.
*
*	To set the interface address to the factory address, the
*	network management software must use GetStationAddress first
*	and then call ConfigInterface with the result. If there is no
*	factory address then the network software must pick an address
*	to use.
*
*	Until this command is executed the device will not listen for
*	any packets on the hardware.
d563 1
a563 4
*	S2io_Command    SANA2CMD_CONFIGINTERFACE
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_QUICK
*	S2io_SrcAddr    Address for this interface.
d566 4
a569 3
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
*	S2io_SrcAddr    Address of this interface as configured.
a571 4
*	Some networks have the interfaces choose a currently unused
*	interface address each time the interface is initialized. The
*	caller must check S2io_SrcAddr for the actual interface
*	address after configuring the interface.
d574 1
a574 1
*	sana2.device/SANA2CMD_GETSTATIONADDRESS
a576 2
*	What to do when/if the network interface address changes due
*	to a network reconfiguration.
d584 51
a634 1
******* sana2.device/SANA2CMD_ADDSTATIONALIAS ************************
d640 2
a641 2
*	This function adds another network interface address to which
*	the network interface should respond.
d644 3
a646 3
*	S2io_Command    SANA2CMD_ADDSTATIONALIAS
*	S2io_SrcAddr    Alias to add.
*
d648 2
a649 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d657 1
a657 1
*	sana2.device/SANA2CMD_DELSTATIONALIAS
d667 1
a667 1
******* sana2.device/SANA2CMD_DELSTATIONALIAS ************************
d677 2
a678 2
*	S2io_Command    SANA2CMD_DELSTATIONALIAS
*	S2io_SrcAddr    Alias to delete.
d681 2
a682 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d685 3
a687 3
*	Since alias interface addresses are not bound to a particular
*	packet type or read request, each added interface alias
*	address has an "added" count associated with it.
d690 1
a690 1
*	sana2.device/SANA2CMD_ADDSTATIONALIAS
d700 1
a700 1
******* sana2.device/SANA2CMD_ADDMULTICASTADDRESS ********************
d706 2
a707 2
*	This command causes the device driver to enable multicast
*	packet reception for the requested address.
d710 2
a711 2
*	S2io_Command    SANA2CMD_ADDMULTICASTADDRESS
*	S2io_SrcAddr    Multicast address to enable.
d714 2
a715 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d718 3
a720 3
*	Since multicast addresses are not "bound" to a particular
*	packet type, each enabled multicast address has an "enabled"
*	count associated with it.
d722 5
d728 1
a728 1
*	sana2.device/SANA2CMD_DELMULTICASTADDRESS
d738 1
a738 1
******* sana2.device/SANA2CMD_DELMULTICASTADDRESS ********************
d747 1
a747 2
*	It is an error to disable a multicast address that is not
*	enabled.
d750 2
a751 2
*	S2io_Command    SANA2CMD_DELMULTICASTADDRESS
*	S2io_SrcAddr    Multicast address to disable.
d754 2
a755 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d758 8
a765 3
*	Since multicast addresses are not "bound" to a particular
*	packet type, each enabled multicast address has an "enabled"
*	count associated with it.
d768 1
a768 1
*	sana2.device/SANA2CMD_ADDMULTICASTADDRESS
d778 1
a778 1
******* sana2.device/SANA2CMD_MULTICAST ******************************
d784 4
a787 13
*	This command works the same as CMD_WRITE except that it also
*	performs whatever special processing of the packet is required
*	to do a multicast send. The actual multicast mechanism is
*	neccessarily network/interface/device specific.
*
*   IO REQUEST
*	S2io_Command    SANA2CMD_MULTICAST
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	S2io_PacketType Pointer to type of packet to send.
*	S2io_DstAddr    Destination interface address for this packet.
*	S2io_Body       NetBuff with packet data.
d789 36
a824 23
*   RESULTS
*	S2io_Error      Zero if successful; non-zero otherwise.
*	                    This command can fail for many reasons and
*	                    is not supported by all networks and/or
*	                    network interfaces.
*	S2io_WireError  More specific error number.
*
*   NOTES
*	The address supplied in S2io_DstAddr will be sanity checked
*	(if possible) by the driver. If the supplied address fails
*	this sanity check, the multicast request will fail
*	immediately.
*
*   SEE ALSO
*	sana2.device/CMD_WRITE,
*	sana2.device/SANA2CMD_BROADCAST
*
*   BUGS
*
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
d827 1
a827 1
******* sana2.device/SANA2CMD_BROADCAST ******************************
d833 4
a836 29
*	This command works the same as CMD_WRITE except that it also
*	performs whatever special processing of the packet is required
*	to do a broadcast send. The actual broadcast mechanism is
*	neccessarily network/interface/device specific.
*
*   IO REQUEST
*	S2io_Command    SANA2CMD_BROADCAST
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_RAW
*	                    SANA2IOB_QUICK
*	S2io_PacketType Pointer to type of packet to send.
*	S2io_Body       NetBuff with packet data.
*
*   RESULTS
*	S2io_DstAddr    The contents of this field are to be
*	                    considered trash upon return of the IOReq.
*	S2io_Error      Zero if successful; non-zero otherwise.
*	                    This command can fail for many reasons and
*	                    is not supported by all networks and/or
*	                    network interfaces.
*	S2io_WireError  More specific error number.
*
*   NOTES
*
*   SEE ALSO
*	sana2.device/CMD_WRITE,
*	sana2.device/SANA2CMD_MULTICAST
*
*   BUGS
d838 33
a870 4
**********************************************************************
*
*   IMPLEMENTATION NOTES
*
d873 1
a873 1
******* sana2.device/SANA2CMD_TRACKTYPE ******************************
d879 3
a881 3
*	This command causes the device driver to accumulate statistics
*	about a particular packet type. Packet type statistics, for
*	the particular packet type, are zeroed by this command.
d884 2
a885 2
*	S2io_Command    SANA2CMD_TRACKTYPE
*	S2io_PacketType Pointer to the packet type of interest.
d888 2
a889 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d894 1
a894 2
*	sana2.device/SANA2CMD_UNTRACKTYPE,
*	sana2.device/SANA2CMD_GETTYPESTATS
d904 1
a904 1
******* sana2.device/SANA2CMD_UNTRACKTYPE ****************************
d914 2
a915 2
*	S2io_Command    SANA2CMD_UNTRACKTYPE
*	S2io_PacketType Pointer to the packet type of interest.
d918 2
a919 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d924 1
a924 2
*	sana2.device/SANA2CMD_TRACKTYPE,
*	sana2.device/SANA2CMD_GETTYPESTATS
d934 1
a934 1
******* sana2.device/SANA2CMD_GETTYPESTATS ***************************
d940 3
a942 3
*	This command causes the device driver to retrieve various
*	packet type specific runtime statistics for this network
*	interface. The format of the data returned is as follows:
d945 1
a945 1
*	        {
d951 1
a951 1
*	        };
d954 3
a956 3
*	S2io_Command    SANA2CMD_GETTYPESTATS
*	S2io_PacketType Pointer to the packet type of interest.
*	S2io_StatData   Pointer to TypeStatData structure to fill in.
d959 2
a960 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d963 2
a964 2
*	Statistics for a particular packet type are only available
*	while that packet type is being ``tracked''.
d967 1
a967 2
*	sana2.device/SANA2CMD_TRACKTYPE,
*	sana2.device/SANA2CMD_UNTRACKTYPE
d977 1
a977 1
******* sana2.device/SANA2CMD_GETSPECIALSTATS ************************
d983 4
a986 4
*	This function returns statistics which are specific to the
*	type of network medium this driver controls. For example, this
*	command could return statistics common to all Ethernets which
*	are not common to all network mediums in general.
d991 1
a991 1
*	        {
d995 1
a995 1
*	        };
d1000 1
a1000 1
*	        {
d1004 1
a1004 1
*	        };
d1006 2
a1007 2
*	The RecordCountMax field specifies the number of records that
*	the caller is prepared to accomodate.
d1009 2
a1010 2
*	RecordCountSupplied is the number of record actually supplied
*	which will not exceed RecordCountMax.
d1013 3
a1015 3
*	S2io_Command    SANA2CMD_GETSPECIALSTATS
*	S2io_StatData   Pointer to a Sana2SpecialStatData structure to
*	                    fill. RecordCountMax must be initialized.
d1018 2
a1019 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d1022 1
a1022 1
*	Commodore shall maintain registered statistic Types.
d1025 1
a1025 1
*	sana2.device/SANA2CMD_GETGLOBALSTATS
d1035 1
a1035 1
******* sana2.device/SANA2CMD_GETGLOBALSTATS *************************
d1041 3
a1043 3
*	This command causes the device driver to retrieve various
*	global runtime statistics for this network interface. The
*	format of the data returned is as follows:
d1046 1
a1046 1
*	        {
d1060 1
a1060 1
*	        };
d1063 2
a1064 2
*	S2io_Command    SANA2CMD_GETGLOBALSTATS
*	S2io_StatData   Pointer to Sana2DeviceStats structure to fill.
d1067 2
a1068 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d1073 1
a1073 1
*	sana2.device/SANA2CMD_GETSPECIALSTATS
d1083 1
a1083 1
******* sana2.device/SANA2CMD_ONEVENT ********************************
d1089 2
a1090 2
*	This command returns when a particular event condition has
*	occured on the network or this network interface.
d1093 5
a1097 5
*	S2io_Command    SANA2CMD_ONEVENT
*	S2io_Flags      Supported flags are:
*	                    SANA2IOB_QUICK
*	S2io_WireError  Event number to wait for.
*
d1099 2
a1100 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  Event number that occured.
d1104 3
a1106 3
*	condition then the command returns immediately with S2io_Error
*	non-zero. A successful return will have S2io_Error set to zero
*	S2io_WireError set to the event number.
d1108 2
a1109 2
*	All pending requests for a particular event will be returned
*	when that event occurs.
d1111 5
a1115 5
*	All event types that cover a particular condition are returned
*	when that condition occures. For instance, if an error is
*	returned by NetBuff.library during receive processing, events
*	of types S2EVENT_ERROR, S2EVENT_RX and S2EVENT_NETBUFF would
*	be returned if pending.
d1127 1
a1127 1
******* sana2.device/SANA2CMD_ONLINE *********************************
d1133 1
a1133 2
*	This command places an offline network interface back into
*	service.
d1136 2
a1137 2
*	S2io_Command    SANA2CMD_ONLINE
*
d1139 2
a1140 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d1144 3
a1146 2
*	hardware back into a known state and resets the unit global
*	and special statistics.
d1149 1
a1149 1
*	sana2.device/SANA2CMD_OFFLINE
d1159 1
a1159 1
******* sana2.device/SANA2CMD_OFFLINE ********************************
d1168 1
a1168 1
*	S2io_Command    SANA2CMD_OFFLINE
d1171 2
a1172 2
*	S2io_Error      Zero if successful; non-zero otherwise.
*	S2io_WireError  More specific error number.
d1175 2
a1176 2
*	Aborts all pending reads and writes with S2io_Error set to
*	SANA2ERROR_OUTOFSERVICE.
d1180 1
a1180 1
*	S2io_Error set to SANA2ERROR_OUTOFSERVICE.
d1186 1
a1186 1
*	sana2.device/SANA2CMD_ONLINE
d1196 1
a1196 1
*****i* sana2.device/CMD_START ***************************************
d1202 4
a1205 1
*	Does not apply to this class of device.
d1208 1
a1208 1
*	S2io_Command    CMD_ONLINE
d1211 1
a1211 1
*	S2io_Error      Zero if successful; non-zero otherwise.
d1216 1
a1216 1
*	sana2.device/CMD_STOP
d1228 1
a1228 1
*****i* sana2.device/CMD_STOP ****************************************
d1234 4
a1237 1
*	Does not apply to this class of device.
d1240 1
a1240 1
*	S2io_Command    CMD_OFFLINE
d1243 1
a1243 1
*	S2io_Error      Zero if successful; non-zero otherwise.
d1248 1
a1248 1
*	sana2.device/CMD_START
d1260 1
a1260 1
*****i* sana2.device/CMD_CLEAR ***************************************
d1266 2
a1267 1
*	Does not apply to this class of device.
d1270 1
a1270 1
*	S2io_Command    CMD_CLEAR
d1273 1
a1273 1
*	S2io_Error      Zero if successful; non-zero otherwise.
a1277 2
*	sana2.device/UPDATE,
*	sana2.device/CLEAR
d1289 1
a1289 1
*****i* sana2.device/CMD_FLUSH ***************************************
d1292 1
a1292 1
*	Flush -- Clear internal network interface write buffers.
d1295 4
a1298 1
*	Does not apply to this class of device.
d1301 1
a1301 1
*	S2io_Command    CMD_FLUSH
d1304 1
a1304 1
*	S2io_Error      Zero if successful; non-zero otherwise.
a1308 3
*	sana2.device/AbortIO(),
*	sana2.device/CMD_UPDATE,
*	sana2.device/CMD_CLEAR
d1320 1
a1320 1
*****i* sana2.device/CMD_INVALID *************************************
d1326 2
a1327 3
*	This command causes device driver to reply with an error
*	IOERR_NOCMD as defined in exec/errors.h indicating the command
*	is not supported.
d1330 1
a1330 1
*	S2io_Command    CMD_INVALID
d1333 1
a1333 1
*	S2io_Error      Zero if successful; non-zero otherwise.
d1340 1
a1340 1
*	Not known to be useful at this time.
d1348 1
a1348 1
*****i* sana2.device/CMD_RESET ***************************************
d1354 3
a1356 1
*	Does not apply to this class of device.
d1358 2
a1359 2
*   IO REQUEST 
*	S2io_Command    CMD_RESET 
d1361 2
a1362 2
*   RESULTS 
*	S2io_Error      Zero if successful; non-zero otherwise.
d1378 1
a1378 1
*****i* sana2.device/CMD_UPDATE **************************************
d1381 1
a1381 1
*	Update -- Force packets out to device
d1384 2
a1385 1
*	Does not apply to this class of device.
d1388 1
a1388 1
*	S2io_Command    CMD_UPDATE
d1391 1
a1391 1
*	S2io_Error      Zero if successful; non-zero otherwise.
a1395 2
*	sana2.device/CMD_CLEAR,
*	sana2.device/CMD_FLUSH
@
