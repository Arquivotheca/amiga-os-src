head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     92.01.02.14.22.15;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.12.16.23.41;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.24.10.50.06;  author gregm;  state Exp;
branches ;
next     ;


desc
@a hack to configure sana-iiv2 devices
@


1.3
log
@*** empty log message ***
@
text
@/*
**  $Id: configure.c,v 1.2 91/11/12 16:23:41 dlarson Exp Locker: dlarson $
**
**  SANA-II driver configuration example.
**
**  Copyright 1991 Commodore-Amiga, Inc.
**
**  This code may be modified and used freely on Amiga computers.
**
**
**  This example is pretty ugly and should be cleaned up.  Sorry.
**  Still, you should be able to see the proper steps to take
**  in configuring a SANA-II device.
*/

#define NOBUFFS
#include "/skeleton/skeleton.h"

struct MsgPort   *DevPort = NULL;
struct IOSana2Req *IOB1    = NULL;

int	DeviceOpen = 0;
long	DevBits;
int	NumBytes;

void DoConfig(UBYTE *Address);
void DoGetAddr(void);
void DoQuery(struct Sana2DeviceQuery *q);
void DoPrintAddr(void);


main(int argc, char *argv[])
{
int i;
long temp;
struct Sana2DeviceQuery Query;

        if(!initdev())
        {
        	printf("Open Failed.\n");
        	goto bottom;
        }
        printf("About to Query the device.\n");
	Query.SizeAvailable = sizeof(Query);
	DoQuery(&Query);
	if(IOB1->ios2_Req.io_Error)
	{
            	printf("ERROR RETURNED: %ld\n", (long)IOB1->ios2_Req.io_Error);
		goto bottom;
     	}
    	if(Query.AddrFieldSize%8 != 0 || Query.AddrFieldSize == 0)
	{
		printf("Oh, no!  There really is funny hardware in the world!\n"
		       "Address field is %d bits.  This example needs to be\n"
		       "updated to understand address fields with a number of\n"
		       "bits not divisible by eight.\n", Query.AddrFieldSize);
		goto bottom;
	}
	NumBytes = Query.AddrFieldSize/8;
	if(argc>1)
	{
		for(i=0; i<NumBytes; i++)
		{
			sscanf(argv[1]+(i*3), "%lx", &temp);
			IOB1->ios2_SrcAddr[i] = (char)temp;
		}
	}else
	{
		printf("\nNo user address, getting ROM address.\n");
		DoGetAddr();
		if (IOB1->ios2_Req.io_Error)
		{
			printf("ERROR RETURNED: 0x%lx\n",
               			(long)IOB1->ios2_Req.io_Error);
			goto bottom;
     		}
     	}
     	printf("SrcAddr is one we're going to attempt to configure with:\n");
	DoPrintAddr();
	printf("Attempting to set address\n");
	DoConfig(IOB1->ios2_SrcAddr);
	if(IOB1->ios2_Req.io_Error)
	{
		if(IOB1->ios2_Req.io_Error == S2ERR_BAD_STATE &&
		   IOB1->ios2_WireError == S2WERR_IS_CONFIGURED)
			printf("Pardon Me. I'm Already Configured!\n");
		else
			printf("ERROR CODE:%ld  WERR:%ld\n",
				(long)IOB1->ios2_Req.io_Error,
				(long)IOB1->ios2_WireError);
	} else
	{
		printf("Configured.  Results (SrcAddr is the address actually config'd to):\n");
		DoPrintAddr();
		printf("S2_GETSTATIONADDRESS and results (Src=Current  Dst=Default):\n");
		DoGetAddr();  /* really should check for an error, device could be offline, for example  */
		DoPrintAddr();
	}
bottom: closedev();
}


void DoConfig(UBYTE *Address)
{
register UBYTE *p = IOB1->ios2_SrcAddr;
register i;

        IOB1->ios2_Req.io_Error   = 0;
        IOB1->ios2_Req.io_Command = S2_CONFIGINTERFACE;
        for(i = 0; i <  NumBytes; i++)
        	*(p++) = *(Address++);
        DoIO((struct IORequest *)IOB1);
}


void DoQuery(struct Sana2DeviceQuery *q)
{

        IOB1->ios2_Req.io_Error   = 0;
        IOB1->ios2_Req.io_Command = S2_DEVICEQUERY;
        IOB1->ios2_StatData = q;
        DoIO((struct IORequest *)IOB1);
        IOB1->ios2_StatData = NULL;
}


void DoGetAddr(void)
{

        IOB1->ios2_Req.io_Error   = 0;
        IOB1->ios2_Req.io_Command = S2_GETSTATIONADDRESS;
        DoIO((struct IORequest *)IOB1);
}

void DoPrintAddr(void)
{
register i;

	printf("SrcAddr: ");
        for (i = 0; i <  NumBytes; i++)
		printf("%02x ", (long)(IOB1->ios2_SrcAddr[i] & 0xFF)) ;
	printf("\nDstAddr: ");
        for (i = 0; i <  NumBytes; i++)
		printf("%02x ", (long)(IOB1->ios2_DstAddr[i] & 0xFF)) ;
	printf("\n");
}

@


1.2
log
@attempt to generalize
@
text
@d2 1
a2 1
**  $Id: skeleton.c,v 1.1 91/10/29 11:51:46 dlarson Exp $
d10 4
a66 1
		DoPrintAddr();
a76 1
     		DoPrintAddr();
d78 2
d93 3
a95 1
		printf("Configured.\n");
a108 1
        IOB1->ios2_Req.io_Flags   = IOF_QUICK;
a119 1
        IOB1->ios2_Req.io_Flags   = IOF_QUICK;
a130 1
        IOB1->ios2_Req.io_Flags   = IOF_QUICK;
@


1.1
log
@Initial revision
@
text
@d1 10
a10 11
#include <exec/types.h>
#include <exec/ports.h>
#include <exec/io.h>
#include <exec/devices.h>
#include <exec/libraries.h>
#include <exec/interrupts.h>
#include <exec/errors.h>
#include <exec/memory.h>
#include <proto/exec.h>

#include "sana2.h"
d12 2
a13 2
char MCAddress[6] = { 0x01 , 0x80 , 0x10 , 0xFF , 0xFF , 0xFF };
char BroadCast[6] = { 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF };
d18 3
a20 3
int    DeviceOpen = 0;
long   DevBits;
int    Flag = 0;
d22 7
a28 1
initdev(Unit)
d30 3
a32 1
        int i;
d34 60
a93 15
        if (!(DevPort = CreatePort("Ethernet.Device.Port" , 0L))) {
                printf("could not allocate port\n");
                return(0);
        }
        if (!(IOB1 = (struct IOSana2Req *) CreateExtIO(DevPort,sizeof(struct IOSana2Req)))) {
                printf("could not allocate extio block\n");
                return(0);
        }
        if (OpenDevice("a2065.device" , Unit , (struct IORequest *) IOB1, 0)) {
                printf("could not open device\n");
                return(0);
        }
        DeviceOpen = 1;
        DevBits = 1L << DevPort->mp_SigBit;
        return(1);
a95 10
closedev()
{
        if (DeviceOpen) {
                printf("Attempting To Close Unit\n");
                CloseDevice((struct IORequest *) IOB1);
                printf("Device Closed\n");
        }
        if (IOB1) DeleteExtIO((struct IORequest *) IOB1);
        if (DevPort) DeletePort(DevPort);
}
d97 1
a97 2
main(argc , argv)
char *argv[];
d99 2
a100 1
        int i = 0;
d102 7
a108 2
        if (argc > 1) i = atoi(argv[1]);
        printf("Attempting To Open Unit: %d\n" , i);
a109 36
        if (!initdev(i)) printf("Open Failed\n");
        else {
                printf("This command tests the CONFIGINTERFACE command.\n");
                printf("It will first attempt to set some bogus physical\n");
                printf("addresses to confirm that those attempts are\n");
                printf("bounced. Then, it will configure the selected\n");
                printf("unit to the ROM address.\n\n");

                printf("Attempting Config With BROADCAST Address\n");
                DoConfig(BroadCast);
                if (IOB1->ios2_Req.io_Error != S2ERR_BAD_ADDRESS) {
                        if (IOB1->ios2_Req.io_Error == S2ERR_BAD_STATE && IOB1->ios2_WireError == S2WERR_IS_CONFIGURED) printf("Pardon Me. I'm Already Configured!\n");
                        else printf("WRONG ERROR CODE: 0x%lx SHOULD BE: 0x%lx\n" , (long) IOB1->ios2_Req.io_Error , S2ERR_BAD_ADDRESS);
                } else printf("Correct Result\n");

                printf("Attempting Config With MULTICAST Address\n");
                DoConfig(MCAddress);
                if (IOB1->ios2_Req.io_Error != S2ERR_BAD_ADDRESS) {
                        if (IOB1->ios2_Req.io_Error == S2ERR_BAD_STATE && IOB1->ios2_WireError == S2WERR_IS_CONFIGURED) printf("Pardon Me. I'm Already Configured!\n");
                        else printf("WRONG ERROR CODE: 0x%lx SHOULD BE: 0x%lx\n" , (long) IOB1->ios2_Req.io_Error , S2ERR_BAD_ADDRESS);
                } else printf("Correct Result\n");

                printf("Getting ROM Address\n");
                DoGetAddr(1);
                if (IOB1->ios2_Req.io_Error) printf("ERROR RETURNED: 0x%lx\n" , (long) IOB1->ios2_Req.io_Error);
                else {
                        printf("Attempting To Set Valid Address\n");
                        DoConfig(IOB1->ios2_SrcAddr);
                        if (IOB1->ios2_Req.io_Error) {
                                if (IOB1->ios2_Req.io_Error == S2ERR_BAD_STATE && IOB1->ios2_WireError == S2WERR_IS_CONFIGURED) printf("Pardon Me. I'm Already Configured!\n");
                                else printf("ERROR CODE: %ld\n" , (long) IOB1->ios2_Req.io_Error);
                        } else printf("Correct Result\n");
                }
        }
bottom: closedev();
}
d111 1
a111 2
DoConfig(Address)
UBYTE *Address;
a112 2
        register UBYTE *p = IOB1->ios2_SrcAddr;
        register i;
d116 2
a117 2
        IOB1->ios2_Req.io_Command = S2_CONFIGINTERFACE;
        for (i = 0; i < 6; i++) *(p++) = *(Address++);
d119 1
d122 2
a123 1
DoGetAddr(Flag)
d127 1
a127 1
        IOB1->ios2_Req.io_Flags   = (Flag ? IOF_QUICK : 0);
d130 13
a142 18
        if (IOB1->ios2_Req.io_Error) printf("ERROR RETURNED: 0x%lx\n" , (long) IOB1->ios2_Req.io_Error);
        else {
                printf("NO ERROR Current Addr: ");
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[0] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[1] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[2] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[3] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[4] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_DstAddr[5] & 0xFF));
                printf("Default Addr: ");
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[0] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[1] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[2] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[3] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[4] & 0xFF));
                printf("%02lx " , (long) (IOB1->ios2_SrcAddr[5] & 0xFF));
                printf("\n");
        }
@
