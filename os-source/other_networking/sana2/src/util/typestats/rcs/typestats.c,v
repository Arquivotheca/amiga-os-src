head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     92.01.02.14.28.02;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.11.13.11.17.08;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.08.13.28.08;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.08.10.43.47;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.29.12.02.31;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.29.11.27.32;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Gets statistics for a particular packet type from a SANA-II driver.
@


1.6
log
@*** empty log message ***
@
text
@/*
**  $Id: typestats.c,v 1.5 91/11/13 11:17:08 dlarson Exp Locker: dlarson $
**
**  SANA-II driver utility -- Gather and print stats for one type of packet.
**			      (Over a specified period of time.)
**
**  Copyright 1991 Commodore-Amiga, Inc.
**
**  This code may be modified and used freely on Amiga computers.
**
*/

#define NOBUFFS 1
#include "/skeleton/skeleton.h"
#include <stdio.h>

struct MsgPort   *DevPort = NULL;
struct IOSana2Req *IOB1    = NULL;
struct Sana2PacketTypeStats Stats;

int    DeviceOpen = 0;
long   DevBits;

USHORT PacketType = 0x6003;

void GetTypeStats();
void PrintStats();


main(argc , argv)
char *argv[];
{
int ticks = 500;

	if(!initdev())
	{
		printf("Open Failed\n");
		goto bottom;
	}
	if (argc > 1)
		PacketType = atoi(argv[1]);
	if (argc > 2)
		ticks = atoi(argv[2]);
	printf("Tracking Packet Type: 0x%lx\n" , PacketType);
	IOB1->ios2_PacketType = PacketType;
	if (TrackType())
	{
		printf("could not track type: 0x%lx\n" , PacketType);
		goto bottom;
	}
	printf("Waiting for %ld seconds.\n\n", ticks/50);
	Delay(ticks);
	GetTypeStats();
	if (!IOB1->ios2_Req.io_Error)
		PrintStats();
	else
		printf("Error Returned: %ld WireError: %ld\n" , IOB1->ios2_Req.io_Error , IOB1->ios2_WireError);
bottom:	UnTrackType();
	closedev();
}

TrackType()
{
	IOB1->ios2_Req.io_Error   = 0;
	IOB1->ios2_Req.io_Command = S2_TRACKTYPE;
	DoIO(IOB1);
	if (IOB1->ios2_Req.io_Error) {
		printf("TRACKTYPE Error: %ld WireError: %ld\n" , (long) IOB1->ios2_Req.io_Error , IOB1->ios2_WireError);
		return(1);
	}
	return(0);
}

UnTrackType()
{
	IOB1->ios2_Req.io_Error   = 0;
	IOB1->ios2_Req.io_Command = S2_UNTRACKTYPE;
	DoIO(IOB1);
	if (IOB1->ios2_Req.io_Error) {
		printf("UNTRACKTYPE Error: %ld WireError: %ld\n" , (long) IOB1->ios2_Req.io_Error , IOB1->ios2_WireError);
		return(1);
	}
	return(0);
}

void GetTypeStats()
{
	IOB1->ios2_Req.io_Error   = 0;
	IOB1->ios2_Req.io_Command = S2_GETTYPESTATS;
	IOB1->ios2_StatData = &Stats;
	DoIO(IOB1);
}

void PrintStats()
{
	printf("Packet Type:       0x%lx\n", (long) PacketType);
	printf("Packets Received:    %d\n" , Stats.PacketsReceived);
	printf("Packets Transmitted: %d\n" , Stats.PacketsSent);
	printf("Bytes Received:      %d\n" , Stats.BytesReceived);
	printf("Bytes Transmitted:   %d\n" , Stats.BytesSent);
	printf("Packets Dropped:     %d\n" , Stats.PacketsDropped);
}
@


1.5
log
@re-introduced comment header
@
text
@d2 1
a2 1
**  $Id: online.c,v 1.2 91/10/29 11:55:50 dlarson Exp $
a64 1
	IOB1->ios2_Req.io_Flags   = IOF_QUICK;
a76 1
	IOB1->ios2_Req.io_Flags   = IOF_QUICK;
a88 1
	IOB1->ios2_Req.io_Flags   = IOF_QUICK;
@


1.4
log
@added a delay
@
text
@d1 12
@


1.3
log
@Recompile with latest includes
@
text
@d3 1
d21 1
d30 2
d39 2
@


1.2
log
@*** empty log message ***
@
text
@a0 12
/*
**  $Id: skeleton.c,v 1.1 91/10/29 11:51:46 dlarson Exp $
**
**  SANA-II driver utility -- Print stats on one packet type.
**
**  Copyright 1991 Commodore-Amiga, Inc.
**
**  This code may be modified and used freely on Amiga computers.
**
*/


a9 2
int    Flag = 0;
int    EnableAbort = 1;
a15 6
void _abort()
{
	Flag = 1;
	printf("^C\n");
}

a19 1
int i = 0;
d35 5
a39 18
	while (!Flag)
	{
		Chk_Abort();
		GetTypeStats();
		if (!IOB1->ios2_Req.io_Error)
			PrintStats();
		else
			printf("Error Returned: %ld WireError: %ld\n" , IOB1->ios2_Req.io_Error , IOB1->ios2_WireError);
		Chk_Abort();
		for (i = 0; i < 50; i++)
		{
			Delay(10);
			Chk_Abort();
			if (Flag)
				break;
			i++;
		}
	}
@


1.1
log
@Initial revision
@
text
@d1 12
@
