head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.33.42;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.53.07;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.29.04;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.05.36;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.49.18;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.49.11;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.38.28;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@
/*
 * CMD_rdwr - read/write processing; sanity checks are performed here, so that
 * user gets immediate feedback about a bad i/o request.
 *
 * Generic checks: iob must have legal packet type, unit must be ONLINE, and
 * node ID must have been set to non zero value.
 *
 * Write specific sanity check - packet must:
 *   if SANA2IOF_RAW the packet + CNT + ZERO bytes must fit in 512 byte page
 *   else length of packet + length of type field + SID + DID + CNT + ZERO < 512 page
 */

#ifndef RS485_H
#include "rs485.h"
#endif

#define DTL(iob) ((iob)->ios2_DataLength)

int CMD_rdwr(struct IOSana2Req *iob)
{
ULONG actual;

/*
**  checktype() no longer needed because of changes to spec.
**
**	if(!checktype(iob)){
**		return COMPLETE;
**	}
*/
	if(UNIT(iob)->state != ONLINE || SUB_REG(UNIT(iob)) == 0){
		iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
		iob->ios2_WireError = S2WERR_UNIT_OFFLINE;
		return COMPLETE;
	}

	switch(iob->ios2_Req.io_Command){
	case CMD_WRITE:
	case S2_BROADCAST:
		if(DTL(iob)==0 || ((iob->ios2_Req.io_Flags & SANA2IOF_RAW) && DTL(iob)<3)){
			iob->ios2_Req.io_Error = S2ERR_BAD_ARGUMENT;
			return COMPLETE;
		}

		actual = DTL(iob) + 2;  /* len of pkt + 2 bytes (count/zero) */
		if(!(iob->ios2_Req.io_Flags & SANA2IOF_RAW))
		{
			actual += + 2;
		}

		if(actual > 512){
			iob->ios2_Req.io_Error = S2ERR_MTU_EXCEEDED;
			return COMPLETE;
		}

		iob->ios2_Req.io_Flags &= ~SANA2IOF_QUICK;
		AddTail(&UNIT(iob)->write_q, &iob->ios2_Req.io_Message.mn_Node);
		startxmit(UNIT(iob));
		break;

	case CMD_READ:
	case S2_READORPHAN:
		iob->ios2_Req.io_Flags &= ~SANA2IOF_QUICK;
		AddTail(&UNIT(iob)->read_q, &iob->ios2_Req.io_Message.mn_Node);
		break;
	}

	return QUEUED;
}

@


1.6
log
@raw reads and writes work now.
@
text
@@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@@


1.2
log
@Getting it up to current spec...
@
text
@d14 2
a15 2
#ifndef AMIGANET_H
#include "amiganet.h"
d20 1
a20 2
int CMD_rdwr(iob)
	struct IOSana2Req *iob;
d22 1
a22 1
	ULONG actual;
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
#define DTL(iob) ((iob)->S2io_DataLength)
d25 7
a31 4
	if(!checktype(iob)){
		return COMPLETE;
	}

d33 2
a34 2
		iob->S2io_Error = S2ERR_BAD_STATE;
		iob->S2io_WireError = S2WERR_UNIT_OFFLINE;
d38 1
a38 1
	switch(iob->S2io_Command){
d40 3
a42 3
	case SANA2CMD_BROADCAST:
		if(DTL(iob)==0 || ((iob->S2io_Flags & SANA2IOF_RAW) && DTL(iob)<3)){
			iob->S2io_Error = S2ERR_BAD_ARGUMENT;
d47 3
a49 2
		if(!(iob->S2io_Flags & SANA2IOF_RAW)){
			actual += iob->S2io_PacketType->Length + 2;
d53 1
a53 1
			iob->S2io_Error = S2ERR_MTU_EXCEEDED;
d57 2
a58 2
		iob->S2io_Flags &= ~SANA2IOF_QUICK;
		AddTail(&UNIT(iob)->write_q, &iob->S2io_Message.mn_Node);
d63 3
a65 3
	case SANA2CMD_READORPHAN:
		iob->S2io_Flags &= ~SANA2IOF_QUICK;
		AddTail(&UNIT(iob)->read_q, &iob->S2io_Message.mn_Node);
@
