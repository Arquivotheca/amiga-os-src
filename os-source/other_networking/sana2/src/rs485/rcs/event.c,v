head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.34.29;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.54.12;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.30.04;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.07.26;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.49.59;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.49.05;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.38.25;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@/*
**  S2_onevent()
*/

#ifndef RS485_H
#include "rs485.h"
#endif

/*
 * process onevent request packet.  This request may blocks, since the driver
 * does not retain state about the various error conditions this request is
 * interested in.  ONLINE or OFFLINE may return immediately, however.
 */
int S2_onevent(iob)
	struct IOSana2Req *iob;
{
	if(iob->ios2_WireError > S2EVENT_SOFTWARE){
		iob->ios2_Req.io_Error = S2ERR_BAD_ARGUMENT;
		iob->ios2_WireError = S2WERR_BAD_EVENT;
		return COMPLETE;
	}
	if( (iob->ios2_WireError & S2EVENT_ONLINE) && UNIT(iob)->state == ONLINE)
	{
		iob->ios2_WireError = S2EVENT_ONLINE;
		return COMPLETE;
	}
	if( (iob->ios2_WireError & S2EVENT_OFFLINE) && UNIT(iob)->state == OFFLINE)
	{
		iob->ios2_WireError = S2EVENT_OFFLINE;
		return COMPLETE;
	}

	iob->ios2_Req.io_Flags &= ~SANA2IOF_QUICK;
	AddTail(&UNIT(iob)->misc_q, &iob->ios2_Req.io_Message.mn_Node);
	return QUEUED;
}

/*
 * search events queue for any requests waiting for specified event, and return
 * then to sender.
 */
void wakeup(struct rs485Unit *up, ULONG event)
{
struct IOSana2Req *iob, *next;

	iob = (struct IOSana2Req *)(up->misc_q.lh_Head);
	while(iob->ios2_Req.io_Message.mn_Node.ln_Succ)
	{
		next = (struct IOSana2Req *)iob->ios2_Req.io_Message.mn_Node.ln_Succ;
		if(iob->ios2_Req.io_Command == S2_ONEVENT &&
		   event & iob->ios2_WireError)
		{
			iob->ios2_Req.io_Error = 0;
			iob->ios2_WireError = event & iob->ios2_WireError;
			Remove(&iob->ios2_Req.io_Message.mn_Node);
			ReplyMsg(&iob->ios2_Req.io_Message);
		}
		iob = next;
	}
}

@


1.6
log
@raw reads and writes work now.
@
text
@d2 2
a3 2
 * S2_onevent()
 */
a16 1
KPrintF("state = %d\n", UNIT(iob)->state);
a49 3
KPrintF("wakeup: Command=%ld, Event=%ld, WE=%ld, Event&WE=%ld.\n",
	iob->ios2_Req.io_Command, event, iob->ios2_WireError,
	event & iob->ios2_WireError);
@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@@


1.2
log
@Getting it up to current spec...
@
text
@d5 2
a6 2
#ifndef AMIGANET_H
#include "amiganet.h"
d23 1
a23 1
	if(iob->ios2_WireError & S2_ONLINE && UNIT(iob)->state == ONLINE)
d25 1
a25 1
		iob->ios2_WireError = S2_ONLINE;
d28 1
a28 1
	if(iob->ios2_WireError & S2_OFFLINE && UNIT(iob)->state == OFFLINE)
d30 1
a30 1
		iob->ios2_WireError = S2_OFFLINE;
d43 1
a43 3
void wakeup(up, event)
	struct AmiganetUnit *up;
	ULONG event;
d45 1
a45 1
	struct IOSana2Req *iob, *next;
d51 5
a55 1
		if(event & iob->ios2_WireError)
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * SANA2CMD_onevent()
d10 1
a10 1
 * process onevent request packet.  This request always blocks, since the driver
d12 1
a12 1
 * interested in.
d14 1
a14 1
int SANA2CMD_onevent(iob)
d17 4
a20 3
	if(iob->S2io_WireError > S2EVENT_SOFTWARE){
		iob->S2io_Error = S2ERR_BAD_ARGUMENT;
		iob->S2io_WireError = S2WERR_BAD_EVENT;
d23 10
d34 2
a35 2
	iob->S2io_Flags &= ~SANA2IOF_QUICK;
	AddTail(&UNIT(iob)->misc_q, &iob->S2io_Message.mn_Node);
d50 9
a58 6
	while(iob->S2io_Message.mn_Node.ln_Succ){
		next = (struct IOSana2Req *)iob->S2io_Message.mn_Node.ln_Succ;
		if(event == iob->S2io_WireError){
			iob->S2io_Error = 0;
			Remove(&iob->S2io_Message.mn_Node);
			ReplyMsg(&iob->S2io_Message);
@
