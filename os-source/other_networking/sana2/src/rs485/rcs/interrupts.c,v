head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.34.35;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.54.17;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.30.09;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.07.31;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.50.04;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.50.26;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.38.02;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@/*
 * interrupts - device interrupt handling.
 */

#ifndef RS485_H
#include "rs485.h"
#endif

/*
 * ONLINE state interrupt processing
 */
static void
ion_state(struct rs485Unit *up)
{
int bn, free;

	if(SR(up) & SR_TA)
	{
		for(bn = 0; bn < NBUF; bn++)
		{
			if(up->bstate[bn] == IS_CURR_XMIT)
			{
DPRINT(("Freed one.\n"));
				up->bstate[bn] = IS_FREE;
			}
		}

		for(bn = 0; bn < NBUF; bn++)
		{
			if(up->bstate[bn] == HAS_XMIT_DATA)
			{
				up->bstate[bn] = IS_CURR_XMIT;
				CMD(up) = C_SEND(bn);
DPRINT(("Queued one.\n"));
				break;
			}
		}

		if(bn == NBUF){
			up->intmask &= ~SR_TA;
		}
	}

	if(SR(up) & SR_RI)
	{
DPRINT(("ion_state(): SR(up) & SR_RI\n"));
		free = -1;
		for(bn = 0; bn < NBUF; bn++){
			if(up->bstate[bn] == IS_CURR_RCVR){
				up->bstate[bn] = HAS_RCV_DATA;
			}

			if(up->bstate[bn] == IS_FREE){
				free = bn;
			}
		}

		if(free >= 0){
			up->bstate[free] = IS_CURR_RCVR;
			CMD(up) = C_RECV(free);
		} else {
			up->intmask &= ~SR_RI;
		}
	}

	if(SR(up) & SR_RECON)
	{
		up->stats.Reconfigurations++;
		CMD(up) = C_CLR_RECON;
	}

	SETINTMASK(up, up->intmask);
	sigtask(up);
}

/*
 * note: interrupt server does not obey unit semaphore; thus it cannot touch or
 *	 rely on the state of any queue variable, addr/data regs of com20020 chip,
 *	 etc.  The interrupt driver will touch the board ONLY if the unit is in
 *	 the ONLINE state.
 */
VOID __stdargs __saveds __asm
interruptC(register __a1 struct rs485Unit *up)
{
	switch(up->state){
	case ONLINE:
		if(SR(up) & up->intmask)
		{
			ion_state(up);
		}
		break;

	case INITIAL:
	case OFFLINE:
		break;

	}
}

/*
 * add our interrupt routine to INTB_PORTS chain.  is_Data points to unit; this
 * will be used to load a6 when the interrupt chain is called.
 */
interrupts_on(struct rs485Unit *up)
{
	if(up->intr == 0){
		up->intr = (struct Interrupt *)AllocMem(sizeof(*up->intr), MEMF_PUBLIC | MEMF_CLEAR);
		if(up->intr == 0){
			return S2ERR_NO_RESOURCES;
		}

		up->intr->is_Code = interrupt;
		up->intr->is_Data = up;
		up->intr->is_Node.ln_Type = NT_INTERRUPT;
		up->intr->is_Node.ln_Pri = 127;
		up->intr->is_Node.ln_Name = 0;
		AddIntServer(INTB_PORTS, up->intr);
	}
	return S2ERR_NO_ERROR;
}

/*
 * pull interupt server off chain, free int structure
 */
void
interrupts_off(struct rs485Unit *up)
{
	if(up->intr){
		RemIntServer(INTB_PORTS, up->intr);
		FreeMem(up->intr, sizeof(*up->intr));
		up->intr = 0;
	}
}
@


1.6
log
@raw reads and writes work now.
@
text
@a16 6
//int dsr;
//dsr = DSR(up);
//if(dsr&DSR_MYRECON || dsr&DSR_EXCNAK || dsr&DSR_RCVACT || dsr&DSR_TOKEN)
// KPrintF("MYRECON=%d, EXCNAK=%d, RECVACT=%d TOKEN=%d\n",
//          dsr&DSR_MYRECON, dsr&DSR_EXCNAK, dsr&DSR_RCVACT, dsr&DSR_TOKEN);

d23 1
a23 1
KPrintF("Freed one.\n");
d34 1
a34 1
KPrintF("Queued one.\n");
d46 1
a46 2
KPrintF("ion_state(): SR(up) & SR_RI\n");

a67 1
//KPrintF("ion_state(): SR(up) & SR_RECON\n");
@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@@


1.2
log
@Getting it up to current spec...
@
text
@d5 2
a6 2
#ifndef AMIGANET_H
#include "amiganet.h"
d13 1
a13 1
on_state(struct AmiganetUnit *up)
d15 1
a15 1
	int bn, free;
d17 13
a29 3
	if(SR(up) & SR_TA){
		for(bn = 0; bn < NBUF; bn++){
			if(up->bstate[bn] == IS_CURR_XMIT){
d34 4
a37 2
		for(bn = 0; bn < NBUF; bn++){
			if(up->bstate[bn] == HAS_XMIT_DATA){
d40 1
d50 4
a53 1
	if(SR(up) & SR_RI){
d73 3
a75 1
	if(SR(up) & SR_RECON){
d91 1
a91 1
interruptC(register __a1 struct AmiganetUnit *up)
d95 3
a97 2
		if(SR(up) & up->intmask){
			on_state(up);
d112 1
a112 1
interrupts_on(struct AmiganetUnit *up)
d134 1
a134 1
interrupts_off(struct AmiganetUnit *up)
@


1.1
log
@Initial revision
@
text
@d58 1
a58 1
		up->stats.reconfigurations++;
d81 1
a81 1
	
@
