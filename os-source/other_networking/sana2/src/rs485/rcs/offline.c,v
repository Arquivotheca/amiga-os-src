head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.33.16;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.53.45;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.29.44;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.04.50;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.48.53;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.49.16;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.38.37;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@/*
 * S2_OFFLINE/S2_ONLINE processing.
 */

#ifndef RS485_H
#include "rs485.h"
#endif

#include <devices/timer.h>

/*
 * return all messages on given queue with specified error(s)
 */
void
empty_q(struct List *lp, UBYTE err, ULONG werr)
{
struct IOSana2Req *p, *q;

	for(p = (struct IOSana2Req *)lp->lh_Head;
		p->ios2_Req.io_Message.mn_Node.ln_Succ;  p = q)
	{

		q = (struct IOSana2Req *)p->ios2_Req.io_Message.mn_Node.ln_Succ;
		Remove(&p->ios2_Req.io_Message.mn_Node);
		p->ios2_Req.io_Error = err;
		p->ios2_WireError = werr;
		ReplyMsg(&p->ios2_Req.io_Message);
	}
}

/*
 * reset unit statistics, set timeval in global stats to current time
 */
void resetstats(struct rs485Unit *up)
{
struct TrackedType *tp;
struct timerequest tr;
struct MsgPort *rport;

	FORALL(&up->trackedtype, tp, struct TrackedType *)
	{
		memset(&tp->stats, 0, sizeof(tp->stats));
	}
	memset(&up->stats, 0, sizeof(up->stats));
	if(OpenDevice(TIMERNAME, UNIT_VBLANK, (struct IORequest *)&tr, 0) == 0)
	{
		rport = CreatePort(0, 0);
		if(rport)
		{
			tr.tr_node.io_Message.mn_ReplyPort = rport;
			tr.tr_node.io_Command = TR_GETSYSTIME;
			DoIO((struct IORequest *)&tr);
			up->stats.LastStart = tr.tr_time;
			DeletePort(rport);
		}
		CloseDevice((struct IORequest *)&tr);
	}
}


/*
** take unit offline.  When in offline state, the driver will not touch any
** device registers, memory, etc.
*/
int
S2_offline(struct IOSana2Req *iob)
{
	if(UNIT(iob)->state != ONLINE)
	{
		iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
		return COMPLETE;
	}
	empty_q(&UNIT(iob)->read_q, S2ERR_OUTOFSERVICE, S2WERR_GENERIC_ERROR);
	empty_q(&UNIT(iob)->write_q,S2ERR_OUTOFSERVICE, S2WERR_GENERIC_ERROR);
	WAKEUP(UNIT(iob), S2EVENT_OFFLINE);
	UNIT(iob)->state = OFFLINE;

	return COMPLETE;
}


/*
** take unit online.  The online state may only be entered while the unit is
** in the INITIAL state, and when there is a valid address setting.

	BROKEN!  shouldnt zero address, etc.
*/
int
S2_online(struct IOSana2Req *iob)
{
	if(UNIT(iob)->state == OFFLINE && UNIT(iob)->myaddr)
	{
		WAKEUP(UNIT(iob), S2EVENT_ONLINE);
		UNIT(iob)->state = ONLINE;
		resetstats(UNIT(iob));
	} else
	{
		iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
	}
	return COMPLETE;
}

@


1.6
log
@raw reads and writes work now.
@
text
@d17 1
a17 1
	struct IOSana2Req *p, *q;
d20 2
a21 1
		p->ios2_Req.io_Message.mn_Node.ln_Succ;  p = q){
a56 3
	} else
	{
		tr.tr_time.tv_secs = tr.tr_time.tv_micro = 0;
a95 1
		KPrintF("going online\n");
a97 1
		KPrintF("Bad State\n");
@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@a65 3

	BROKEN!  requires a reconfigure.  More broken because can't really
	configure without state initial.
d70 1
a70 1
	if(UNIT(iob)->state != INITIAL)
a74 1
	shutupboard(UNIT(iob));
a79 1
KPrintF("Successful offline.\n");
a92 2
KPrintF("state=%ld\n", UNIT(iob)->state);

@


1.2
log
@Getting it up to current spec...
@
text
@d5 2
a6 2
#ifndef AMIGANET_H
#include "amiganet.h"
d33 1
a33 1
void resetstats(struct AmiganetUnit *up)
d35 3
a37 3
	struct TrackedType *tp;
	struct timerequest tr;
	struct MsgPort *rport;
d39 2
a40 1
	FORALL(&up->trackedtype, tp, struct TrackedType *){
a42 1

d44 2
a45 1
	if(OpenDevice(TIMERNAME, UNIT_VBLANK, (struct IORequest *)&tr, 0) == 0){
d47 2
a48 1
		if(rport){
d56 2
a57 1
	} else {
d62 1
d64 6
a69 3
 * take unit offline.  When in offline state, the driver will not touch any
 * device registers, memory, etc.
 */
d73 5
d84 1
a84 1
	KPrintF("Successful offline.\n");
d88 1
d90 5
a94 3
 * take unit online.  The online state may only be entered while the unit is
 * in the INITIAL state, and when there is a valid address setting.
 */
d98 1
a98 19
	switch(UNIT(iob)->state){
	case OFFLINE:

		if(UNIT(iob)->myaddr)
		{
			WAKEUP(UNIT(iob), S2EVENT_OFFLINE);
			UNIT(iob)->state = ONLINE;
			resetstats(UNIT(iob));
			KPrintF("going online\n");
		} else
		{
			KPrintF("Bad State\n");
			iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
		}
		break;

	case INITIAL:
	case ONLINE:
		break;
d100 10
a110 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * SANA2CMD_OFFLINE/SANA2CMD_ONLINE processing.
d14 1
a14 1
void 
d19 2
a20 2
	for(p = (struct IOSana2Req *)lp->lh_Head; 
		p->S2io_Message.mn_Node.ln_Succ;  p = q){
d22 5
a26 5
		q = (struct IOSana2Req *)p->S2io_Message.mn_Node.ln_Succ;
		Remove(&p->S2io_Message.mn_Node);
		p->S2io_Error = err;
		p->S2io_WireError = werr;
		ReplyMsg(&p->S2io_Message);
d50 1
a50 1
			up->stats.last_start = tr.tr_time;
d63 2
a64 2
int 
SANA2CMD_offline(struct IOSana2Req *iob)
d67 2
a68 2
	empty_q(&UNIT(iob)->read_q, S2ERR_BAD_STATE, S2WERR_UNIT_OFFLINE);
	empty_q(&UNIT(iob)->write_q, S2ERR_BAD_STATE, S2WERR_UNIT_OFFLINE);
d72 1
d80 2
a81 2
int 
SANA2CMD_online(struct IOSana2Req *iob)
d85 3
a87 1
		if(UNIT(iob)->myaddr){
d91 5
a95 2
		} else {
			iob->S2io_Error = S2ERR_BAD_STATE;
d99 1
a99 1
	case INITIAL:		
@
