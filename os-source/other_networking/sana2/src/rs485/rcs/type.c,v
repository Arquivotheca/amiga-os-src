head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.34.02;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.53.40;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.29.39;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.07.07;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.49.40;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.50.02;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.38.18;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@/*
 * S2_tracktype()		- add new tracked type to driver
 * S2_untracktype()	- remove tracked type from driver
 * S2_gettypestats()	- get statistics from tracked type
 */

#ifndef RS485_H
#include "rs485.h"
#endif

#define REMOVE	 1
#define NOREMOVE 0

/*
 * free_tracked - optionally remove & free trackedtype structure.
 */
static void
free_tracked(int remove, struct TrackedType *tp)
{
	if(remove == REMOVE){
		Remove(&tp->node);
	}
	FreeMem((void *)tp, sizeof(*tp));
}

/*
 * new_tracktype() - allocat trackedtype structure and add it to specified
 *		     unit; return pointer to new struct.
 */
static struct TrackedType *
new_tracktype(struct rs485Unit *up, ULONG ptp)
{
struct TrackedType *tp;

	tp = (struct TrackedType *)AllocMem(sizeof(*tp), MEMF_PUBLIC | MEMF_CLEAR);
	if(tp)
	{
		tp->type = ptp;
		AddTail(&up->trackedtype, &tp->node);
	}
	return tp;
}

/*
 * free any trackers
 */
void
free_alltracked(struct rs485Unit *up)
{
	struct List *lp;
	struct TrackedType *p, *q;

	lp = &up->trackedtype;
	for(p = (struct TrackedType *)lp->lh_Head; p->node.ln_Succ; p = q)
	{
		q = (struct TrackedType *)p->node.ln_Succ;
		free_tracked(REMOVE, p);
	}
}

/*
 * search tracked type structure list for specified type; return pointer to
 * struct if found, NULL otherwise.
 */
struct TrackedType *
findtracked(struct rs485Unit *up, ULONG ptp)
{
struct TrackedType *tp;

	FORALL(&up->trackedtype, tp, struct TrackedType *)
	{
		if(tp->type == ptp)
			return tp;
	}
	return 0;
}

/*
 * command processing for tracked type commands: sanity check pointers as needed,
 * perform specific type stats command.
 */
int S2_tracked(struct IOSana2Req *iob)
{
struct TrackedType *tp;

	if(iob->ios2_Req.io_Command==S2_GETTYPESTATS && !iob->ios2_StatData)
	{
		iob->ios2_Req.io_Error = S2ERR_BAD_ARGUMENT;
		iob->ios2_WireError = S2WERR_NULL_POINTER;
		return COMPLETE;
	}

/*
**  checktype no longer needed because of changes to spec.
**
**	if(!checktype(iob))
**	{
**		return COMPLETE;
**	}
**
*/
	tp = findtracked(UNIT(iob), iob->ios2_PacketType);

	switch(iob->ios2_Req.io_Command){
	case S2_GETTYPESTATS:
		if(!tp)
		{
			iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
			iob->ios2_WireError = S2WERR_NOT_TRACKED;
		} else
		{
			memcpy(iob->ios2_StatData, &tp->stats, sizeof(tp->stats));
		}
		break;

	case S2_TRACKTYPE:
		if(tp)
		{
			iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
			iob->ios2_WireError = S2WERR_ALREADY_TRACKED;
		} else
		{
			tp = new_tracktype(UNIT(iob), iob->ios2_PacketType);
			if(!tp)
			{
				iob->ios2_Req.io_Error = S2ERR_NO_RESOURCES;
			}
		}
		break;

	case S2_UNTRACKTYPE:
		if(!tp)
		{
			iob->ios2_Req.io_Error = S2ERR_BAD_STATE;
			iob->ios2_WireError = S2WERR_NOT_TRACKED;
		} else
		{
			free_tracked(REMOVE, tp);
		}
		break;
	}

	return COMPLETE;
}

@


1.6
log
@raw reads and writes work now.
@
text
@@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@@


1.2
log
@Getting it up to current spec...
@
text
@d7 2
a8 2
#ifndef AMIGANET_H
#include "amiganet.h"
d31 1
a31 1
new_tracktype(struct AmiganetUnit *up, ULONG ptp)
d48 1
a48 1
free_alltracked(struct AmiganetUnit *up)
d66 1
a66 1
findtracked(struct AmiganetUnit *up, ULONG ptp)
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 * SANA2CMD_tracktype()		- add new tracked type to driver
 * SANA2CMD_untracktype()	- remove tracked type from driver
 * SANA2CMD_gettypestats()	- get statistics from tracked type
d15 1
a15 1
 * free_tracked - optionally remove & free trackedtype structure. 
d17 1
a17 1
static void 
a22 7

	if(tp->type.Match){
		FreeMem((void *)tp->type.Match, tp->type.Length);
	}
	if(tp->type.Mask){
		FreeMem((void *)tp->type.Mask, tp->type.Length);
	}
d30 2
a31 2
static struct TrackedType * 
new_tracktype(struct AmiganetUnit *up, struct Sana2PacketType *ptp)
d33 1
a33 1
	struct TrackedType *tp;
d36 4
a39 12
	if(tp){
		tp->type = *ptp;
		tp->type.Match = (UBYTE *)AllocMem(ptp->Length, MEMF_PUBLIC);
		tp->type.Mask = (UBYTE *)AllocMem(ptp->Length, MEMF_PUBLIC);
		if(tp->type.Match && tp->type.Mask){
			memcpy(tp->type.Match, ptp->Match, ptp->Length);
			memcpy(tp->type.Mask, ptp->Mask, ptp->Length);
			AddTail(&up->trackedtype, &tp->node);
		} else {
			free_tracked(NOREMOVE, tp);
			tp = 0;
		}
a40 1

d47 2
a48 3
void 
free_alltracked(up)
	struct AmiganetUnit *up;
d54 2
a55 2
	for(p = (struct TrackedType *)lp->lh_Head; p->node.ln_Succ; p = q){

d63 1
a63 1
 * struct if found, NULL otherwise.  
d66 1
a66 3
findtracked(up, ptp)
	struct AmiganetUnit *up;
	struct Sana2PacketType *ptp;
d68 1
a68 1
	struct TrackedType *tp;
d70 4
a73 6
	FORALL(&up->trackedtype, tp, struct TrackedType *){
		if((tp->type.Magic==ptp->Magic) && (tp->type.Length==ptp->Length)){
		   	if(memcmp(tp->type.Match, ptp->Match, ptp->Length) == 0){
				return tp;
			}
		}
a74 1

d82 1
a82 2
int SANA2CMD_tracked(iob)
	struct IOSana2Req *iob;
d84 1
a84 7
	struct TrackedType *tp;
	
	if(!iob->S2io_PacketType || (iob->S2io_Command==SANA2CMD_GETTYPESTATS && !iob->S2io_StatData)){
		iob->S2io_Error = S2ERR_BAD_ARGUMENT;
		iob->S2io_WireError = S2WERR_NULL_POINTER;
		return COMPLETE;
	}
d86 4
a89 1
	if(!checktype(iob)){
d93 20
a112 9
	tp = findtracked(UNIT(iob), iob->S2io_PacketType);

	switch(iob->S2io_Command){
	case SANA2CMD_GETTYPESTATS:
		if(!tp){
			iob->S2io_Error = S2ERR_SOFTWARE;
			iob->S2io_WireError = S2WERR_NOT_TRACKED;
		} else {
			memcpy(iob->S2io_StatData, &tp->stats, sizeof(tp->stats));
d116 11
a126 8
	case SANA2CMD_TRACKTYPE:
		if(tp){
			iob->S2io_Error = S2ERR_SOFTWARE;
			iob->S2io_WireError = S2WERR_ALREADY_TRACKED;
		} else {
			tp = new_tracktype(UNIT(iob), iob->S2io_PacketType);
			if(!tp){
				iob->S2io_Error = S2ERR_NO_RESOURCES;
d131 7
a137 5
	case SANA2CMD_UNTRACKTYPE:
		if(!tp){
			iob->S2io_Error = S2ERR_SOFTWARE;
			iob->S2io_WireError = S2WERR_NOT_TRACKED;
		} else {
@
