head     1.7;
branch   ;
access   ;
symbols  ;
locks    kcd:1.7; strict;
comment  @ * @;


1.7
date     91.12.30.18.32.21;  author dlarson;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.13.11.53.33;  author dlarson;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.03.14.29.34;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.12.03.14.07.02;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.27.15.48.47;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.19.09.50.31;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.21.15.41.49;  author dlarson;  state Exp;
branches ;
next     ;


desc
@Original snapshot from Ameristar
@


1.7
log
@Includes various optimizations and the long packet Christmas fix.  Probably
last working version before enhancements and Novell "ARCNET Packet Header
Definition Standard."
@
text
@#ifndef RS485_H
#include "rs485.h"
#endif

/*
 * create & initialize a new device on unit list; leave device in INITIAL state
 */
struct rs485Unit *
newunit(void)
{
struct rs485Unit *aup;

	aup = (struct rs485Unit *)AllocMem(sizeof(*aup), MEMF_CLEAR|MEMF_PUBLIC);
	if(aup == 0)
	{
		return NULL;
	}
	NewList(&aup->trackedtype);
	NewList(&aup->read_q);
	NewList(&aup->write_q);
	NewList(&aup->misc_q);
	InitSemaphore(&aup->sem);
	aup->state = INITIAL;
	AddTail(&rs485Units, &aup->node);
	return aup;
}

/*
 * free any storage allocated to unit.  At this point, all lists should be
 * empty, so just zero the struct and free storage
 */
void
freeunit(struct rs485Unit *up)
{
	Remove(&up->node);
	memset(up, (char)0, sizeof(*up));
	up->unitnum = -1;
	up->base = (UBYTE *)-1;
	FreeMem(up, sizeof(*up));
}


/*
 * getboards - search configuration list for Zorro-II rs485 boards.  Build
 *		unit list and return 0 if all went ok.  If no Zorro-II boards
 *		were found, then assume this code is running on an A500 and
 *		create an instance of the A500 rs485 board.
 */
int
getboards(void)
{
char *explib = EXPANSIONNAME;
struct rs485Unit *aup;
struct ConfigDev *cd;
int unit;

	if(!ISEMPTY(&rs485Units))
	{
		return S2ERR_NO_ERROR;
	}
	ExpansionBase = OpenLibrary(explib, 0L);
	if(!ExpansionBase)
	{
		return S2ERR_SOFTWARE;
	}
	cd = 0;
	unit = 0;
	do
	{
		cd = FindConfigDev(cd, CBM_PROD, RS485_PROD);
		if(cd)
		{
			aup = newunit();
			aup->base = (UBYTE *)cd->cd_BoardAddr;
			aup->unitnum = unit++;
		}
	} while (cd);
	CloseLibrary((void *)ExpansionBase);
	ExpansionBase = NULL;
	if(unit == 0)
	{
		aup = newunit();
		aup->base = (UBYTE *)A500_BASE;
		aup->unitnum = unit++;
	}
	return S2ERR_NO_ERROR;
}

/*
 * initialize board - basic setup of chip registers
 */
int
initboard(struct rs485Unit *up)
{
int i;

	if(up->state == INITIAL)
	{
		Disable();
		for(i = 0; i < NBUF; i++)
		{
			up->bstate[i] = IS_FREE;
		}

		CFG(up) = CFG_RESET;
		CFG(up) = 0;

		CFG(up) = CFG_ET1 | CFG_ET2 | CFG_BACKPLANE | SUB_SETUP;
		SUB_REG(up) = 0;

		CFG(up) = (CFG(up) & ~3) | SUB_NODE_ID;
		SUB_REG(up) = 0;

		CMD(up) = C_CLR_POR;
//		CMD(up) = C_CONFIG;
		SETINTMASK(up, 0);
		Enable();
	}
	return S2ERR_NO_ERROR;
}

/*
 * shutupboard - disable board, mark unit into INITIAL state.

 	OFFLINE calls this and it is broket because it zeros the address.
 */
void
shutupboard(struct rs485Unit *up)
{
	Disable();
	SETINTMASK(up, 0);
	SUB_REG(up) = 0;
	CMD(up) = C_DIS_RCVR;
	CMD(up) = C_DIS_XMIT;
	CFG(up) = CFG_RESET;
	up->state = INITIAL;
	Enable();
}@


1.6
log
@raw reads and writes work now.
@
text
@d11 1
a11 1
	struct rs485Unit *aup;
d14 2
a15 1
	if(aup == 0){
a17 1

a24 1

d42 1
d57 2
a58 1
	if(!ISEMPTY(&rs485Units)){
a63 1
		KPrintF("OpenLib failed\n.");
d66 4
a69 2
	cd = 0; unit = 0;
	do {
a85 1

d95 1
a95 1
	int i;
d115 1
a115 2
		CMD(up) = C_CONFIG;
KPrintF("Config'd\n");
a138 1

@


1.5
log
@doesn't print debugging messages...  (bad programmer)
@
text
@@


1.4
log
@Fixed online/offline/onevent.
@
text
@@


1.3
log
@First version which works with inet.library!!!
@
text
@d115 1
@


1.2
log
@Getting it up to current spec...
@
text
@d1 2
a2 2
#ifndef AMIGANET_H
#include "amiganet.h"
d8 1
a8 1
struct AmiganetUnit *
d11 1
a11 1
	struct AmiganetUnit *aup;
d13 1
a13 1
	aup = (struct AmiganetUnit *)AllocMem(sizeof(*aup), MEMF_CLEAR|MEMF_PUBLIC);
d24 1
a24 1
	AddTail(&AmiganetUnits, &aup->node);
d34 1
a34 1
freeunit(struct AmiganetUnit *up)
d44 1
a44 1
 * getboards - search configuration list for Zorro-II amiganet boards.  Build
d47 1
a47 1
 *		create an instance of the A500 amiganet board.
d52 4
a55 4
	char *explib = EXPANSIONNAME;
	struct AmiganetUnit *aup;
	struct ConfigDev *cd;
	int unit;
d57 1
a57 1
	if(!ISEMPTY(&AmiganetUnits)){
a59 2
KPrintF("about to open expansion base.\n");

a65 2
KPrintF("opened expansion base.\n");

d68 3
a70 2
		cd = FindConfigDev(cd, CBM_PROD, AMIGANET_PROD);
		if(cd){
a75 2
KPrintF("did findconfigdev()s.\n");

d77 3
a79 3
	ExpansionBase = 0;

	if(unit == 0){
a83 1
KPrintF("about to return without error.\n");
d92 1
a92 1
initboard(struct AmiganetUnit *up)
d96 2
a97 1
	if(up->state == INITIAL){
d99 2
a100 1
		for(i = 0; i < NBUF; i++){
d122 3
a124 5
 * shutupboard - disable board, mark unit into INITIAL state.  Since board will be
 * taken out of network, the dynamically computed address may become invalid - thus
 * it is zeroed here.  To bring the board online, the proto stack must do
 * an S2_GETSTATIONADDRESS and S2_CONFIGINTERFACE to get back on the
 * network.
d127 1
a127 1
shutupboard(struct AmiganetUnit *up)
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
		return 0;
d33 1
a33 1
void 
d60 1
d62 4
a65 2
	ExpansionBase = OpenLibrary(explib, 0);
	if(!ExpansionBase){
d68 1
d79 1
d84 1
a84 1
	if(unit == 0){ 
d89 1
d126 1
a126 1
 * shutupboard - disable board, mark unit into INITIAL state.  Since board will be 
d129 1
a129 1
 * an SANA2CMD_GETSTATIONADDRESS and SANA2CMD_CONFIGINTERFACE to get back on the 
d132 1
a132 1
void 
@
