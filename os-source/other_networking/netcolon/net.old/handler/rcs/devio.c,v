head     1.17;
branch   ;
access   ;
symbols  v37r4:1.17 Distillery:1.17;
locks    ; strict;
comment  @ * @;


1.17
date     91.03.09.20.59.27;  author J_Toebes;  state Exp;
branches ;
next     1.16;

1.16
date     91.01.17.01.12.02;  author Doug;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.15.02.54.19;  author Doug;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.11.00.44.48;  author Doug;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.06.20.52.02;  author Doug;  state Exp;
branches ;
next     1.12;

1.12
date     90.12.30.15.43.29;  author Doug;  state Exp;
branches ;
next     1.11;

1.11
date     90.12.13.03.21.04;  author Doug;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.29.01.44.37;  author Doug;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.28.04.29.51;  author Doug;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.27.22.12.37;  author Doug;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.25.15.50.33;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.20.22.23.41;  author Doug;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.20.01.07.34;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.18.00.03.06;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.18.00.18.33;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.23.57.52;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.41.06;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@general handler device io routines
@


1.17
log
@Correct code for aging out dead nodes
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1988 The Software Distillery.  All Rights Reserved *
* |. o.| ||          Written by Doug Walker                                 *
* | .  | ||          The Software Distillery                                *
* | o  | ||          235 Trillingham Lane                                   *
* |  . |//           Cary, NC 27513                                         *
* ======             BBS:(919)-471-6436                                     *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
**      $Filename:  $ 
**      $Author: Doug $
**      $Revision: 1.16 $
**      $Date: 91/01/17 01:12:02 $
**      $Log:	devio.c,v $
 * Revision 1.16  91/01/17  01:12:02  Doug
 * Handle rebooting
 * 
 * Revision 1.15  91/01/15  02:54:19  Doug
 * Put in code to kill outstanding hpackets when connection terminates
 * check for an actual hp_Pkt in a couple of places
 * 
**
**/

#include "handler.h"


static int ReLock(GLOBAL global, struct NetNode *nnode);
static int ReStartNode(GLOBAL global, HPACKET *hpkt);
ACTFN(ReLockNext);

static ACTFN(defact);

static ACTFN(defact)
{
   if(hpkt->hp_Pkt)
   {
      hpkt->hp_Pkt->dp_Res1 = hpkt->hp_RP->Arg1;
      hpkt->hp_Pkt->dp_Res2 = hpkt->hp_RP->Arg2;
   }
}

int
RemotePacket(GLOBAL global, HPACKET *hpkt)
{
  struct NetNode *nnode = hpkt->hp_NNode;
  struct RPacket *RP = hpkt->hp_RP;
  short npflags;
  LONG Arg1, Arg2, Arg3, Arg4;
  int badlock;
  int wasnil;
  struct Library *DriverBase = hpkt->hp_Driver->libbase;

   if(nnode->status != NODE_UP &&
         !(nnode->status == NODE_RELOCK && hpkt->hp_State == HPS_RELOCK))
   {
      ReStartNode(global, hpkt);
      BUG(("*** 0x%08lx node '%s' restarted\n", hpkt->hp_Pkt, nnode->name))
      return(1);
   }

   Arg1 = RP->Arg1;
   Arg2 = RP->Arg1;
   Arg3 = RP->Arg1;
   Arg4 = RP->Arg1;

/* Define macro to validate a remote lock/filehandle before sending it */
#define DORP(field, flag) if(npflags & (flag)){\
                             if(CheckNPTR(RP->field)) badlock=1;\
                             else RP->field = (LONG)(((NETPTR)RP->field)->RPtr);}

   if(npflags = hpkt->hp_NPFlags)
   {
      /* Save the resultant RPTRs in local vars in case any of them fail    */
      badlock=0;

      DORP(Arg1, NP1);
      DORP(Arg2, NP2);
      DORP(Arg3, NP3);
      DORP(Arg4, NP4);

      if(badlock)
      {
         hpkt->hp_State = HPS_ERR;

         /* Best guess at a reasonable error message */
         if(hpkt->hp_Pkt)
         {
            hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
            hpkt->hp_Pkt->dp_Res2 = ERROR_INVALID_LOCK;
         }

         HPQ(global, hpkt);
         BUG(("***  0x%08lx Bad lock, packet not sent\n", hpkt->hp_Pkt))
         return(1);
      }

      /* All of the args checked out OK, copy them in to the RP */
   }

   /* If there's no secondary function, the return codes from the */
   /* other side must be copied over directly                     */
   if(hpkt->hp_Func == NULL) hpkt->hp_Func = defact;

   BUG(("XMT 0x%08lx type %d args (%08lx,%08lx,%08lx,%08lx) node '%s'\n",
      hpkt->hp_Pkt, RP->Type, RP->Arg1, RP->Arg2, RP->Arg3, RP->Arg4, 
      nnode->name+1))

   wasnil = (RP->Type == ACTION_NIL);

   switch(SDNSend(hpkt->hp_Driver->drglobal, RP))
   {
      case SDN_OK:
         /* Basically, we do nothing.  When the remote side replies */
         /* to the packet, its driver will alert us.                */

         /* NOTE: WE SHOULD PUT THIS ON SOME KIND OF "OUTSTANDING PACKET" QUEUE */
         /*       SO IF THE CONNECTION IS BROKEN WE CAN CLEAN IT ALL UP         */
         hpkt->hp_RP = NULL;  /* SDNSend freed this */
         hpkt->hp_Age = (wasnil ? -1 : 0);    /* No age on this one yet... */
         hpkt->hp_WNext = global->qpkts;
         global->qpkts = hpkt;
         return(0);

      case SDN_PEND:
         hpkt->hp_State = HPS_PEND;  /* Waiting on I/O to complete */
         /* Leave the hp_RP - it's still not freed */
         return(0);

      case SDN_ERR:
         /* Any HPKTS sent but not replied to are now DEAD. */

         /* Restore arguments */
         RP->Arg1 = Arg1;
         RP->Arg2 = Arg2;
         RP->Arg3 = Arg3;
         RP->Arg4 = Arg4;

         KillHPackets(global, hpkt->hp_NNode, ERROR_OBJECT_NOT_FOUND); 

         if(hpkt->hp_State == HPS_RETRY)
         {
            /* Time to give up */
            hpkt->hp_State = HPS_ERR;
            HPQ(global, hpkt);
         }
         ReStartNode(global, hpkt);
         BUG(("***RemotePacket SDNSend failed\n"))
         break;
   }
   return(1);
}

static int ReStartNode(GLOBAL global, HPACKET *hpkt)
{
   struct NetNode *nnode = hpkt->hp_NNode;
   struct Library *DriverBase = hpkt->hp_Driver->libbase;
   int rc;

   BUG(("   ReStartNode '%s'\n", nnode->name))

   if(nnode->status != NODE_RELOCK)
   {
      rc = SDNInitNode(hpkt->hp_Driver->drglobal, nnode->name+1, &nnode->ioptr);

      if(rc == SDN_ERR || 
            (rc == SDN_DOWN && hpkt->hp_RP->Type != ACTION_NETWORK_INIT))
      {
         /* Error on write and we can't reestablish the connection */
         /* We have to give up and flush the packet */
         nnode->status = NODE_CRASHED;

         hpkt->hp_State = HPS_ERR;

         /* Best guess at a reasonable error message */
         if(hpkt->hp_Pkt)
         {
            hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
            hpkt->hp_Pkt->dp_Res2 = ERROR_NODE_DOWN;
         }
         HPQ(global, hpkt);
      }
      else
      {
         /* Allow this packet to ride in the hpc chain... eventually the */
         /* last lock will be reestablished and the whole chain will be  */
         /* processed.                                                   */
         hpkt->hp_WNext = nnode->hpc;
         nnode->hpc = hpkt;

         /* OK, we have managed to reinitialize - now reestablish shared locks  */
         nnode->RootLock.incarnation++;
         if(rc == SDN_OK) ReLock(global, nnode);
      }
   }
   return(0);
}

static int ReLock(GLOBAL global, struct NetNode *nnode)
{
   HPACKET *hpkt;
   struct RPacket *RP;
 
   if(nnode->status == NODE_RELOCK) return(1);

   nnode->status = NODE_RELOCK;  /* Prevent infinite loops */
 
   hpkt = GetHPacket(global);

   if(!(hpkt->hp_RP = RP = AllocRPacket(nnode, nnode->bufsize))) return(1);
   RP->Type = ACTION_LOCATE_OBJECT;
   RP->Arg1 = 0L;
   RP->Arg3 = SHARED_LOCK;
   RP->Arg4 = 0;
   RP->DLen = 0;
   RP->handle = hpkt;
   hpkt->hp_NNode = nnode;
   hpkt->hp_Driver = nnode->driver;
   hpkt->hp_Func = ReLockNext;

   hpkt->hp_NPFlags = 0;
   hpkt->hp_State = HPS_RELOCK;

   /* We could consider allocating bunches of HPACKETS and firing them all */
   /* off at once, but for now let's do it one at a time */

   HPQ(global, hpkt);

   return(0);
}

ACTFN(ReLockNext)
{
   struct RPacket *RP;
   struct NetNode *nnode = hpkt->hp_NNode;
   NETPTR nptr;
   struct FileLock *flock;
   HPACKET *thp;
   int cur, outcur, len, newstate;
   char *objname, *tmpchar, *outname;

   RP = hpkt->hp_RP;

   /* Process the results of the previous relock, if any */
   if(hpkt->hp_State == HPS_ERR)
      nnode->rlk = NULL;

   if(nnode->rlk)
   {
      flock = nnode->rlk;
      nptr = (NETPTR)flock->fl_Key;
      if(RP->Arg1 != NULL)
      {
         /* Success! */
         nptr->RPtr = (RNPTR)RP->Arg1;
      }
      else
      {
         nptr->incarnation--;
      }
      nnode->rlk = (struct FileLock *)flock->fl_Link;
   }
   else
      nnode->rlk = nnode->lkc;

   /* Send off the next relock, or clean up if none */
   if(nnode->rlk)
   {
      flock = nnode->rlk;
      nptr = (NETPTR)flock->fl_Key;

      nptr->incarnation = nptr->NetNode->RootLock.incarnation;

      /* We now must construct the name of the item from the 'objname' buffer  */
      /* the 'objname' buffer consists of the nodes of the name in REVERSE     */
      /* ORDER, each one followed by a 1-byte length (the length includes 1    */
      /* for the length itself).  Thus, FOO:BAR/BLETCH would show up as        */
      /* "BLETCH\7BAR\4FOO\4".  This allows the server to create the string    */
      /* easily, but still lets us parse it easily if/when we have to recreate */
      /* the original name.                                                    */

      outname = RP->DataP;
      objname = nptr->objname;
      cur = strlen(objname)-1;
      outcur=2;
      while(cur>0)
      {
         len = objname[cur] - 1; 
         tmpchar = objname + cur - len;
         memcpy(outname+outcur, tmpchar, len);
         outcur += len;
         cur -= (len+1);
         outname[outcur++] = '/';
      }
      outcur--;  /* Get rid of extra '/' */

      outname[outcur] = 0;

      RP->DLen = outcur;
      outname[0] = outcur-1;
      outname[1] = ':';

      RP->Type = ACTION_LOCATE_OBJECT;
      RP->Arg1 = 0;
      RP->Arg3 = SHARED_LOCK;
      RP->Arg4 = 0;
      RP->handle = hpkt;

      hpkt->hp_Func = ReLockNext;

      RemotePacket(global, hpkt);
   }
   else
   {
      /* Release all the queued-up HPACKETs */
      if(nnode->hpc)
      {
         newstate = (hpkt->hp_State == HPS_ERR ? HPS_ERR : HPS_RETRY);
         for(thp=nnode->hpc; thp->hp_WNext; thp=thp->hp_WNext)
            thp->hp_State = newstate;

         thp->hp_State = newstate;

         thp->hp_WNext = global->donepkts;
         global->donepkts = thp;
         nnode->hpc = NULL;
      }

      nnode->status = (hpkt->hp_State == HPS_ERR ? NODE_CRASHED : NODE_UP);

      hpkt->hp_Pkt = NULL;  /* Prevent retpkt from returning this */
   }
}


HPACKET *GetHPacket(GLOBAL global)
{
   HPACKET *hp;

   if(global->prmhpkt)
   {
      /* Free permanent hpackets are on a circularly linked list */
      /* global->prmhpkt points to one element, if there are any */

      hp = global->prmhpkt->hp_Next;
      if(hp == global->prmhpkt)  /* If the last one on the chain... */
         global->prmhpkt = NULL;
      else
         global->prmhpkt->hp_Next = hp->hp_Next;
      hp->hp_Next = NULL;        /* So we know it's a permanent one when freeing*/
   }
   else
   {
      /* Temporary hpackets are allocated and placed on a temporary list */
      /* They will be freed as soon as FreeHPacket is called on them */

      /* Have to allocate a temporary hpkt */
      if(!(hp = (HPACKET *)DosAllocMem(global, sizeof(HPACKET))))
         return(NULL);

      hp->hp_Next = global->tmphpkt;
      global->tmphpkt = hp;
   }

   hp->hp_State = HPS_NEW;

   return(hp);
}

void FreeHPacket(GLOBAL global, HPACKET *hp)
{
   HPACKET *thp;

   if(hp->hp_Next == NULL)
   {
      /* It's a permanent hpkt */
      /* Put it back on the circularly linked list */
      if(global->prmhpkt)
      {
         hp->hp_Next = global->prmhpkt->hp_Next->hp_Next;
         global->prmhpkt->hp_Next = hp;
      }
      else
      {
         global->prmhpkt = hp->hp_Next = hp;
      }
   }
   else
   {
      /* Temporary hpkt */
      /* Unlink it and free it */

      if(global->tmphpkt == hp)
         global->tmphpkt = hp->hp_Next;
      else
      {
         for(thp=global->tmphpkt; thp && thp->hp_Next != hp; thp = thp->hp_Next);
         if(!thp)
         {
            return;
         }
         thp->hp_Next = hp->hp_Next;
      }
      DosFreeMem((char *)hp);
   }
}

struct RPacket *AllocRPacket(struct NetNode *nnode, long size)
{
   struct Library *DriverBase = nnode->driver->libbase;
   struct RPacket *RP;
   RP = SDNAllocRPacket(nnode->driver->drglobal, nnode->ioptr, size);
#if DEBUG
   if(RP == NULL) 
   {
      BUG(("***************************************\n"))
      BUG(("************AllocRPacket failed!*******\n"))
      BUG(("***************************************\n"))
   }
#endif
   return(RP);
}
@


1.16
log
@Handle rebooting
@
text
@d12 2
a13 2
**      $Revision: 1.15 $
**      $Date: 91/01/15 02:54:19 $
d15 3
d51 1
d109 2
a118 1

d120 1
a120 1
         hpkt->hp_Age = 0;    /* No age on this one yet... */
@


1.15
log
@Put in code to kill outstanding hpackets when connection terminates
check for an actual hp_Pkt in a couple of places
@
text
@d12 7
a18 3
**      $Revision: $
**      $Date: $
**      $Log: $
d58 5
d64 1
a64 1
#define DORP(field, flag) if(npflags & (flag))\
d66 2
a67 2
                             else field = (LONG)(((NETPTR)RP->field)->RPtr);\
                          else field = RP->field;
d72 1
d88 1
a94 4
      RP->Arg1 = Arg1;
      RP->Arg2 = Arg2;
      RP->Arg3 = Arg3;
      RP->Arg4 = Arg4;
d127 7
a141 1
         nnode->incarnation++;
d160 1
d187 1
d267 1
a267 1
      nptr->incarnation = nptr->NetNode->incarnation;
@


1.14
log
@Handle unavailable node
/
@
text
@d9 8
d73 5
a77 2
         hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
         hpkt->hp_Pkt->dp_Res2 = ERROR_INVALID_LOCK;
d108 1
d119 3
d157 5
a161 2
         hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
         hpkt->hp_Pkt->dp_Res2 = ERROR_NODE_DOWN;
@


1.13
log
@Revise debugging messages
@
text
@d125 1
d129 1
a129 3
   if(nnode->status != NODE_RELOCK &&
          SDNInitNode(hpkt->hp_Driver->drglobal, nnode->name+1, &nnode->ioptr)
                                     == SDN_ERR)
d131 7
a137 3
      /* Error on write and we can't reestablish the connection */
      /* We have to give up and flush the packet */
      nnode->status = NODE_CRASHED;
d139 1
a139 1
      hpkt->hp_State = HPS_ERR;
d141 12
a152 12
      /* Best guess at a reasonable error message */
      hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
      hpkt->hp_Pkt->dp_Res2 = ERROR_NODE_DOWN;
      HPQ(global, hpkt);
   }
   else
   {
      /* Allow this packet to ride in the hpc chain... eventually the */
      /* last lock will be reestablished and the whole chain will be  */
      /* processed.                                                   */
      hpkt->hp_WNext = nnode->hpc;
      nnode->hpc = hpkt;
d154 3
a156 2
      /* OK, we have managed to reinitialize - now reestablish shared locks  */
      ReLock(global, nnode);
@


1.12
log
@Make reestablish of shared locks work
check in defact for nonexistant hp_Pkt
@
text
@a20 1
   BUG(("defact: Entry\n"))
a37 2
   BUG(("RemotePacket: name=%s dev=%s\n", nnode->name, nnode->devname));

d42 1
d68 1
d83 4
d115 1
a115 1

d126 2
a161 2
   BUG(("ReLock: entry\n"))

a197 1
   char sep;
a199 2
   BUG(("ReLockNext: Entry\n"))

a212 1
         BUG(("ReLockNext: Lock reestablished, new rptr 0x%08lx\n", RP->Arg1))
a216 1
         BUG(("ReLockNext: Attempt failed, Res2 = %d\n", RP->Arg2))
a260 2
      BUGBSTR("ReLockNext: name to be relocked is ", outname);

a357 1
            BUGR("Phantom HPKT!")
d369 11
a379 1
   return(SDNAllocRPacket(nnode->driver->drglobal, nnode->ioptr, size));
@


1.11
log
@Implement reestablishing of shared locks
@
text
@d22 5
a26 2
   hpkt->hp_Pkt->dp_Res1 = hpkt->hp_RP->Arg1;
   hpkt->hp_Pkt->dp_Res2 = hpkt->hp_RP->Arg2;
d218 1
a218 1
         BUG(("ReLockNext: Attempt failed\n"))
d245 1
a245 2
      sep = ':';
      outcur=1;
d253 1
a253 2
         outname[outcur++] = sep;
         sep = '/';
d255 1
a255 1
      if(outname[outcur-1] == '/') outcur--;
d259 3
a261 1
      outname[0] = RP->DLen = outcur-1;
d263 1
a263 1
      BUGBSTR("ReLockNext: outname is ", outname);
@


1.10
log
@Make use of permanent HPACKET structures;
chain temporary HPACKETS for validation
@
text
@d14 1
a30 1
#if 0
d32 3
a34 3
#endif
  struct Library *DriverBase;
  HPACKET *thp, *lhp;
d38 2
a39 3
   if(nnode->status != NODE_UP) goto noderr;

   if(nnode->rlk && hpkt->hp_Pkt)
d41 9
a49 9
      /* We're in the middle of reestablishing shared locks */
      /* and this is a user packet - save it for later      */
      /* Save this packet for later                         */
      hpkt->hp_WNext = nnode->hpc;
      nnode->hpc = hpkt->hp_WNext;
      return(0);
   }

#if 0
d52 8
a59 4
      if( ((npflags & NP1) && CheckNPTR(RP->Arg1) ) ||
          ((npflags & NP2) && CheckNPTR(RP->Arg2) ) ||
          ((npflags & NP3) && CheckNPTR(RP->Arg3) ) ||
          ((npflags & NP4) && CheckNPTR(RP->Arg4) ) )
d61 3
a65 1
         hpkt->hp_State = HPS_ERR;
a66 1

d69 6
a75 1
#endif
a80 2
   DriverBase = hpkt->hp_Driver->libbase;

d101 1
a101 7
      noderr:

         /* NOTE: SHOULD CHECK THE OUTSTANDING HPKT LIST FOR HPKTS TO THIS NODE  */
         /*       ALL OUTSTANDING HPKTS TO THIS NODE SHOULD BE FREED AND FLUSHED */

         if(SDNInitNode(hpkt->hp_Driver->drglobal, nnode->name+1, &nnode->ioptr) 
                                           == SDN_ERR)
d103 1
a103 2
            /* Error on write and we can't reestablish the connection */
            /* We have to give up and flush the packet */
a104 4

            /* Best guess at a reasonable error message */
            hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
            hpkt->hp_Pkt->dp_Res1 = ERROR_NODE_DOWN;
d107 3
a109 21
         else
         {
            /* OK, we have managed to reinitialize - now reestablish shared locks  */
            hpkt->hp_WNext = nnode->hpc;
            nnode->hpc = hpkt;
            if(ReLock(global, nnode))
            {
               for(lhp=NULL, thp=nnode->hpc; thp; lhp=thp, thp=thp->hp_WNext)
               {
                  thp->hp_State = HPS_ERR;
                  hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
                  hpkt->hp_Pkt->dp_Res2 = ERROR_NODE_DOWN;
               }
               /* The following effectively does an HPQ on the whole list */
               lhp->hp_WNext = global->donepkts;
               global->donepkts = nnode->hpc;
            }
            /* Allow this packet to ride in the hpc chain... eventually the */
            /* last lock will be reestablished and the whole chain will be  */
            /* processed                                                    */
         }
d115 35
a149 3
static int ReLock(global, nnode)
GLOBAL global;
struct NetNode *nnode;
d156 1
a156 2
   if(global->flags & NGF_NORELOCK) return(1);
   global->flags |= NGF_NORELOCK;    /* Prevent infinite loop */
d158 2
d162 1
a162 1
   if(!(hpkt->hp_RP = RP = AllocRPacket(nnode, 0))) return(1);
d174 1
d179 1
a179 1
   ReLockNext(global, hpkt);
d191 5
d199 4
d210 1
a210 1
         BUG(("ReLock: Lock reestablished, new rptr 0x%08lx\n", RP->Arg1))
d215 1
a215 1
         BUG(("ReLock: Attempt failed\n"))
d218 1
a218 1
      nnode->rlk = flock->fl_Link;
d223 1
d230 37
a266 2
      strcpy(RP->DataP, nptr->objname);
      RP->DLen = RP->DataP[0]+1;
d268 2
d274 6
a279 2
      /* At the end of the chain */
      FreeHPacket(global, hpkt);
d281 6
a286 3
      /* Release all the queued-up HPACKETs */
      for(thp=nnode->hpc; thp; thp=thp->hp_WNext)
         RemotePacket(global, thp);
d288 1
a288 1
      nnode->hpc = NULL;
d290 1
a290 1
      global->flags &= ~NGF_NORELOCK;
a294 1
/* For now, punt these - later, implement pooling */
d324 2
d331 1
a331 1
   HPACKET *thp, *lhp;
@


1.9
log
@*** empty log message ***
@
text
@d232 28
a259 1
   return((HPACKET *)DosAllocMem(global, sizeof(HPACKET)));
d262 1
a262 1
void FreeHPacket(GLOBAL global, HPACKET *hpkt)
d264 35
a298 1
   DosFreeMem((char *)hpkt);
@


1.8
log
@Many bug fixes, incl. proper passing of the res1 and res2 fields
@
text
@d20 1
d84 2
d156 1
@


1.7
log
@New cut that (almost) works
@
text
@d16 8
d66 4
@


1.6
log
@fix probs
,
@
text
@d20 1
a21 1
  struct RPacket *RP = hpkt->hp_RP;
d61 1
a61 1
   switch(SDNSend(hpkt->hp_Driver->drglobal, hpkt->hp_RP))
d66 5
d75 1
d80 4
d128 1
a128 1

@


1.5
log
@New cut that (almost) works
@
text
@d64 2
a65 1
         HPQ(global, hpkt);
@


1.4
log
@Rewrite for asynchronous execution
@
text
@d20 1
d22 2
a24 1
  short npflags;
d41 1
d57 1
d64 1
a64 2
         SDNFreeRPacket(hpkt->hp_Driver->drglobal, hpkt->hp_RP);
         hpkt->hp_RP = NULL;
d73 2
a74 1
         if(SDNInitNode(hpkt->hp_Driver->drglobal, nnode) == SDN_ERR)
d98 1
d102 3
d141 2
@


1.3
log
@New version
@
text
@a11 2
static void ReLockAll(GLOBAL global, struct NetNode *nnode);
static int ReLock(GLOBAL global, NETPTR nptr);
d13 3
d17 1
a17 4
RemotePacket(global, nptr, RP)
GLOBAL global;
NETPTR nptr;
struct RPacket *RP;
d19 7
a25 11
  struct NetNode *nnode;
  int numtries = 0;
   
#if DEBUG
   if(nptr->RPtr == (RNPTR)1)
   {
      BUGR("Bad NPTR to RPacket")
      BUG(("************ RemotePacket on root! ************\n"));
      return(1);
   }
#endif
d27 1
a27 1
   nnode = nptr->NetNode;
d29 9
a37 1
   BUG(("RemotePacket: name=%s dev=%s\n", nnode->name, nnode->devname));
d39 1
a39 1
   while(PostRPacket(global, nnode, RP) || PluckRPacket(global, RP))
d41 10
a50 1
      if(++numtries > 3 || InitNode(global, nnode))
d52 1
a52 2

      if(nnode->status == NODE_UP) ReLockAll(global, nnode);
d55 1
a55 1
   BUG(("RemotePacket: Received codes %lx, %lx\n", RP->Arg1, RP->Arg2));
d57 6
a62 2
   global->pkt->dp_Res1 = RP->Arg1;
   global->pkt->dp_Res2 = RP->Arg2;
d64 37
a100 1
   return(0);
d103 1
a103 1
static void ReLockAll(global, nnode)
d107 33
d141 1
d143 1
a143 1
   if(global->flags & NGF_NORELOCK) return;
d145 16
a160 5
   for(flock=(struct FileLock *)nnode->lkc; 
       flock; 
       flock=(struct FileLock *)flock->fl_Link)
   {
      ReLock(global, (NETPTR)flock->fl_Key);
d162 7
a168 1
}
d170 3
a172 6
static int ReLock(global, nptr)
GLOBAL global;
NETPTR nptr;
{
   struct RPacket RP;
   int rc;
d174 1
a174 29
   BUG(("ReLock: %d vs %d\n", nptr->incarnation, nptr->NetNode->incarnation))

   if(nptr->incarnation == nptr->NetNode->incarnation) return(0);

   BUGBSTR("ReLock: invalid lock, objname ", nptr->objname);

   if(!nptr->objname || global->flags & NGF_NORELOCK) return(1);

   BUG(("ReLock: ****************ATTEMPTING A RELOCK ON ", nptr->objname))
   BUG(("ReLock: nptr is 0x%08lx, rptr 0x%08lx\n", nptr, nptr->RPtr)) 

   global->flags |= NGF_NORELOCK;  /* Prevent infinite loop */

   RP.Type = ACTION_LOCATE_OBJECT;
   RP.Arg1 = 0L;
   RP.Arg3 = SHARED_LOCK;
   RP.Arg4 = 0;
   RP.DataP = nptr->objname;
   RP.DLen = RP.DataP[0] + 1;

   nptr->incarnation = nptr->NetNode->incarnation;
   RemotePacket(global, nptr, &RP);

   if(RP.Arg1 != NULL)
   {
      /* Success! */
      BUG(("ReLock: Lock reestablished, new rptr 0x%08lx\n", RP.Arg1))
      nptr->RPtr = (RNPTR)RP.Arg1;
      rc = 0;
d178 10
a187 3
      BUG(("ReLock: Attempt failed\n"))
      nptr->incarnation--;
      rc = 1;
d189 1
d191 6
a196 1
   global->flags &= ~NGF_NORELOCK;
d198 3
a200 1
   return(rc);
d203 5
@


1.2
log
@Eliminate RDevice
@
text
@d25 1
a25 1
   if(nptr == nptr->NetNode) 
@


1.1
log
@Initial revision
@
text
@d12 2
a13 2
static int  ReLock(GLOBAL, NETPTR, struct RPacket *);
static void ReLockAll(GLOBAL, struct NetNode *, struct RPacket *);
d21 1
a22 2
  LONG Type;
  struct NetNode *nnode;
d25 1
a25 1
   if(nptr->RDevice == NULL) 
a29 4
   } 
   else 
   {
      BUG(("RemotePacket: RDevice %lx\n", nptr->RDevice));
a32 4
   RP->RDevice = nptr->RDevice;

   Type = RP->Type;

d35 1
a35 24
   if(Type != ACTION_NETWORK_START)
   {
      if(nnode->status != NODE_UP || nnode->ioptr == NULL)
      {
         ReSync(global, nnode->ioptr);
         RP->RDevice = nptr->RDevice;
      }

      if(nptr->incarnation != nnode->incarnation)
      {
         BUG(("Zombie NETPTR 0x%08lx was %d, now %d\n", 
              nptr->RDevice, nptr->incarnation, nnode->incarnation))
#if DEBUG
         if(nptr->objname) {BUGBSTR("objname ", nptr->objname);}
         else BUG(("No objname\n"))
#endif

         global->pkt->dp_Res1 = NULL;
         global->pkt->dp_Res2 = ERROR_INVALID_LOCK;
         /* Last-ditch effort to fix it */
         if(ReLock(global, nptr, RP))
            return;
      }
   }
d37 1
a37 5
retry:
   if(nnode->status != NODE_UP ||
      PutRPacket((NGLOBAL)global, nnode->ioptr, RP) ||
      GetRPacket((NGLOBAL)global, nnode->ioptr, RP) ||
      RP->Type != Type)
d39 1
a39 11
      BUG(("RemotePacket: No connection\n"))
      if(Type != ACTION_NETWORK_START)
      {
         if(numtries++ < 3)
         {
            NetRestart(global, nptr);
            RP->Type = Type;
            goto retry;
         }
         global->pkt->dp_Res1 = NULL;
         global->pkt->dp_Res2 = ERROR_NODE_DOWN;
a40 50
      }
      if(nnode->status == NODE_UP) global->upnodes--;
      nnode->status = NODE_CRASHED;
      global->pkt->dp_Res1 = NULL;
      global->pkt->dp_Res2 = ERROR_NODE_DOWN;
      return(1);
   } 
   else 
   {
      BUG(("RemotePacket: Received codes %lx, %lx from RDevice %lx\n",
         RP->Arg1, RP->Arg2, RP->RDevice));
      global->pkt->dp_Res1 = RP->Arg1;
      global->pkt->dp_Res2 = RP->Arg2;

      /* The other side may have decided to change our RDevice */
      nptr->RDevice = RP->RDevice;
      return(0);
   }
}
void
NetRestart(GLOBAL global, NETPTR nptr)
{
   struct RPacket RP;
   struct NetNode *nnode, *tmpnode;
   int oldstatus;
   char name[RNAMELEN+2];

   BUG(("NetRestart: Entry, nptr 0x%08lx status %d ioptr 0x%08lx\n",
      nptr, nptr->NetNode->status, nptr->NetNode->ioptr));

   nnode = nptr->NetNode;

   oldstatus = nnode->status;
   nnode->status = NODE_UP;
   global->upnodes++;
   RP.Type = ACTION_NETWORK_START;
   RP.DLen = strlen(nnode->devname);
   strcpy(name, nnode->devname);
   name[RP.DLen++]   = ':';
   name[RP.DLen++] = '\0';
   RP.DataP = name;

   nptr->RDevice = (RNPTR)1;

   if(RemotePacket(global, nptr, &RP)) goto getout;

BUG(("NetRestart: New RDevice = 0x%08lx\n", nptr->RDevice))

   if(RP.Arg2)
      nnode->bufsize = RP.Arg2;
d42 1
a42 5
   if(nptr->RDevice == NULL || nptr->RDevice == (RNPTR)1)
   {
      /* Remote side doesn't know this node */
      nnode->status = NODE_CRASHED;
      nptr->RDevice = (RNPTR)1;
d45 1
a45 4
   nnode->incarnation++;
   nnode->RootLock.incarnation = nnode->incarnation;

   global->RP.RDevice = nnode->RootLock.RDevice = nptr->RDevice;
d47 2
a48 24
getout:


   /* Reestablish shared locks */
   ReLockAll(global, nnode, &RP);

   /* TEMPORARY:  Since all 'nodes' are really seperate devices on the same */
   /* machine, we know that ALL nodes have crashed if ONE node has crashed. */
   /* Thus, mark ALL NODES AS CRASHED so they will be restarted one by one  */
   /* as they are referenced.   In a true multi-machine network, the server */
   /* would handle packet-switching to various devices on the remote machine*/
   /* and the handler would mount each machine as an independent node.      */
   if(oldstatus != NODE_DEAD)
   {
      for(tmpnode = global->netchain.next; tmpnode; tmpnode=tmpnode->next)
      {
         if(tmpnode != nnode && tmpnode->status != NODE_DEAD) 
         {
            tmpnode->status = nnode->status;
            tmpnode->RootLock.RDevice = nptr->RDevice;
            ReLockAll(global, tmpnode, &RP);
         }
      }
   }
d50 1
d53 1
a53 1
static void ReLockAll(global, nnode, oldRP)
a55 1
struct RPacket *oldRP;
d59 2
d65 1
a65 1
      ReLock(global, (NETPTR)flock->fl_Key, oldRP);
d69 1
a69 1
static int ReLock(global, nptr, oldRP)
a71 1
struct RPacket *oldRP;
a96 1
   nptr->RDevice = nptr->NetNode->RootLock.RDevice;
a114 2
   oldRP->RDevice = nptr->RDevice;

d117 1
@
