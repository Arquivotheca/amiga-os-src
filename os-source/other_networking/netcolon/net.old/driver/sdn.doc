TABLE OF CONTENTS

NET-xxx.library/SDNAccept
NET-xxx.library/SDNAllocRPacket
NET-xxx.library/SDNDupRPacket
NET-xxx.library/SDNFreeRPacket
NET-xxx.library/SDNGetConData
NET-xxx.library/SDNHanInit
NET-xxx.library/SDNHanTerm
NET-xxx.library/SDNInitNode
NET-xxx.library/SDNReceive
NET-xxx.library/SDNReply
NET-xxx.library/SDNSend
NET-xxx.library/SDNSerInit
NET-xxx.library/SDNSerTerm
NET-xxx.library/SDNSetConData
NET-xxx.library/SDNTermNode


NET-xxx.library/SDNAccept				NET-xxx.library/SDNAccept
   NAME
	SDNAccept - Get any new packet or connection

   SYNOPSIS
	rc = SDNAccept(drglobal, RP);
	D0	 	  A0	 A1
	
	int SDNAccept(APTR, struct RPacket **);

   FUNCTION
	Read the next incoming packet and accept new connections

   NOTE
	This routine is only called by the server.

	Driver must be prepared to handle this being called when nothing is
	pending since multiple drivers may be sharing a signal bit.  If a
	packet did come in, but is munged, SDN_ERR is returned;  if no packet
	was available, SDN_NONE is returned.  If a pending write request has
	been completed, a special packet type is returned and a copy of the
	original RPacket structure's 'statedata' pointer is returned.

	The memory pointed to by RP is owned by the NET: code
	until FreeRPacket is called.  SDNFreeRPacket should be called ASAP after
	calling SDNAccept to allow the driver to reuse the RPacket for the
	next read request.

	When a new connection is established, this routine will return a filled
	in RPACKET with an action indicating the establishment of the
	connection.  For connections that are broken, a phoney rpacket is
	also returned.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - Address of pointer to store incomming RPacket.

   RESULTS
   	rc - 	SDN_OK,
		SDN_ERR == read error,
		SDN_NONE == nothing to read

   SEE ALSO
	SDNReply, SDNFreeRPacket

NET-xxx.library/SDNAllocRPacket			NET-xxx.library/SDNAllocRPacket
	
   NAME
	SDNAllocRPacket -- Allocate an RPacket for general use
	
   SYNOPSIS
	RP = SDNAllocRPacket(drglobal, con, len);
	D0                      A0	A1   D0
	
	int SDNAllocRPacket(APTR, APTR, int);

   FUNCTION
	Allocate an RPacket for general use.

   NOTE
	This routine is only called by the handler.
	
	For ease of implementation, it is convenient to call this routine
	internally with a NULL con pointer when generating packets.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	con - Connection to allocate packet for.
	len - minimum number of bytes that must be in the DataP field.

   RESULTS
	RP - created RPacket (or NULL for error)

   SEE ALSO
	SDNFreeRPacket, SDNDupRPacket, SDNInitNode


NET-xxx.library/SDNDupRPacket				NET-xxx.library/SDNDupRPacket
	
   NAME
	SDNDupRPacket - Allocate a second RPacket on the same connection
	
   SYNOPSIS
	NewRP = SDNDupRPacket(drglobal, RP);
	D0                      A0      A1
	
	struct RPacket *SDNDupRPacket(APTR, struct RPacket *);
	
   FUNCTION
	This routine makes a copy of an RPacket so that it may be replied to
	more han one time.  It is primarily intended for usage in situations
	where asynchronous events need to be generated such as file notification.

   NOTE

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket to be duplocated

   RESULTS
	NewRP - Duplicate RPacket structure or NULL for failure.

   SEE ALSO
	SDNFreeRPacket

NET-xxx.library/SDNFreeRPacket			NET-xxx.library/SDNFreeRPacket
	
   NAME
	SDNFreeRPacket
	
	PURPOSE: Indicate that the driver may reuse a previously issued RPacket
	
   SYNOPSIS
	SDNFreeRPacket(drglobal, RP);
			A0	 A1
	
	void SDNFreeRPacket(APTR, struct RPacker *);
	
   NOTE
	This routine must be called before the driver is allowed to reuse an
	RPacket structure.
	
	Both handler and server can call this routine.
	
	SDNFreeRPacket should be called ASAP on any packets returned from
	SDNReceive or SDNAccept since the returned packets are really
	driver-allocated input buffers;  holding on to them may result in lots
	of memory being allocated to the driver for buffering.  The server, in
	particular, must call SDNFreeRPacket BEFORE calling Dispatch() to process
	the packet.
	

   FUNCTION

   NOTE

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket structure returned from SDNDupRPacket, SDNAllocRPacket,
		SDNReceive or SDNAccept

   RESULTS
   	Nothing Returned

   SEE ALSO
   	SDNDupRPacket, SDNAllocRPacket, SDNReceive, SDNAccept


NET-xxx.library/SDNGetConData				NET-xxx.library/SDNGetConData
	
   NAME
	SDNGetConData - Get data associated with a connection for a RPacket
	
   SYNOPSIS
	data = SDNGetConData(drglobal, RP);
	D0			A0     A1
	
	void *SDNGetConData(APTR, struct RPacket *);
	
   FUNCTION
	Get data associated with a connection for a RPacket.
	
	This function is the only way to obtain a connection specific pointer
	for any given RPacket.  With this the server or handler can store a
	pointer to a global data item associated with an open connection.  When
	the connection closes, a ACTION_NETWORK_TERM packet with ARG1 containing
	the data value set for the connection.

   NOTE

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket returned from SDNAccept or SDNReceive.

   RESULTS
   	data - general pointer which was previously set for the connection through
		SDNSetConData or NULL if nothing was ever set.

   SEE ALSO
   	SDNSetConData


NET-xxx.library/SDNHanInit				NET-xxx.library/SDNHanInit
	
   NAME
	SDNHanInit - Perform handler specific initialization

   SYNOPSIS
	rc = SDNHanInit(drglobal, mask, data);
	D0		   A0	   A1	 A2
	
	int SDNHanInit(APTR *, ULONG *, char *);

   FUNCTION
	Perform handler Specific Initialization.
	
	The mask value is the communications mechanism for indicating which bits
	are to be used by the handle.  On input it is a mask of bits available
	for use if the library is unable to allocate any bits.  On output it
	is a mask of the bits that the library will set whenever it needs to
	service a message.  Once the bit is set, the handler will call SDNReceive
	until SDN_NONE is returned.
	
	The data string is a simple null terminated C style string that is
	for use by the library.  There is no format specified in the string and
	may contain whatever the library wants it to have.  The handler code just
	reads the string from a configuration file and passes it on to the library.
	This pointer may be NULL if no initialization string has been specified.
	In the absence of any configuration information, it is the responsibility
	of the library code to pick an appropriate default or to safely fail the
	initialization.
	
	The only difference between this routine and the SNDSerInit is that the
	handler portion does not need to set up to receive asynchronous new
	connections.  It will only be doing calls to SDNReceive and not any to
	SDNAccept.

   NOTE
	This routine is only called by the handler.

	This routine allocates and initializes the drglobal structure that is
	passed to all other service routines.

   EXAMPLE

   INPUTS
	mask - Mask of signal bits available for use by this driver.
	data - pointer to driver specific initialization string

   RESULTS
   	rc - SDN_OK indicates successful initialization.  SDN_ERR indicates
		that the handler could not be initialized for some reason.
	drglobal - Driver specific global data pointer to be passed to all other
		SDN service routines.
   	mask - mask of signal bits which will be set when the driver has some
		data or input to process.

   SEE ALSO
   	SDNSerInit, SDNHanTerm


NET-xxx.library/SDNHanTerm				NET-xxx.library/SDNHanTerm
	
   NAME
	SDNHanTerm - Terminate all resources associated with a handler

   SYNOPSIS
	
	SDNHanTerm(drglobal);
		      A0

	void SDNHanTerm(APTR);

   FUNCTION
	Terminate all resources associated with a handler.
	
	This routine should terminate all pending operations and free up all
	allocated objects in preparations for shutting down.  It must also free
	the global structure allocated at SDNHanInit time.

   NOTE
	This routine is only called by the handler.

   	Because of fall through in initialization and termination, it is possible
	for drglobal to be NULL.

	Because of potential overlap in allocated signal bits, the library must not
	free any signal bits that it returned in the mask field at SDNHanInit time.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.

   RESULTS
   	Nothing

   SEE ALSO
	SDNHanInit


NET-xxx.library/SDNInitNode				NET-xxx.library/SDNInitNode
	
   NAME
	SDNInitNode - Establish a new node connection
	
   SYNOPSIS
	rc = SDNInitNode(drglobal, name, con);
	D0		    A0	     A1	  A2
	
	int SDNInitNode(APTR, char *, APTR *);

   FUNCTION
	Establish a new node connection.

	When the handler wishes to talk to a node for which it has not established
	a connection, it will call this entry point with the name of the
	node that it is attempting to access.  If a particular driver does not
	support multiple connections then it should just return a failure after the
	first connection is set up.

   NOTE
	This routine is only called by the handler.
	
	name must be treated as non-case-sensitive.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	name - A C style string indicating the name of the node to connect to.

   RESULTS
   	con - A generic connection pointer to be passed to SDNAllocRPacket.

   SEE ALSO
   	SDNAllocRPacket, SDNTermNode

NET-xxx.library/SDNReceive				NET-xxx.library/SDNReceive
	
   NAME
	SDNReceive - Get the next response packet
	
   SYNOPSIS
	rc = SDNReceive(drglobal, mask, RP);
	D0		   A0	   D0	A1
	
	int SDNReceive(APTR, ULONG, struct RPacket **);
	
   FUNCTION
   	Read the next incomming packet.

   NOTE
	This routine is only called by the handler.
	Driver must be prepared to handle this being called when nothing is
	pending since multiple drivers may be sharing a signal bit.  If a
	packet did come in, but is munged, SDN_ERR is returned;  if no packet
	was available, SDN_NONE is returned.  If a pending write request has
	been completed, a special packet type is returned and a copy of the
	original RPacket structure's 'statedata' pointer is returned.
	
	The memory pointed to by RP is owned by the NET: code
	until FreeRPacket is called.  FreeRPacket should be called ASAP after
	calling SDNReceive to allow the driver to reuse the RPacket for the
	next read request.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	mask - Mask of signal bits that have gone off
	RP - Address of pointer to store incomming RPacket.

   RESULTS
   	rc - 	SDN_OK,
		SDN_ERR == read error,
		SDN_NONE == nothing to read
	RP - Pointer to next packet or NULL in case of error

   SEE ALSO
	SDNAccept, SDNFreeRPacket


NET-xxx.library/SDNReply				NET-xxx.library/SDNReply
	
   NAME
	SDNReply - Reply to a previously obtained message
	
   SYNOPSIS
	rc = SDNReply(drglobal, RP);
	D0		A0	A1
	
	int SDNReply(APTR, struct RPacket *);

   FUNCTION
	Reply to a previously obtained message

   NOTE
	If SDN_PEND is returned, the handler must not return the application's
	packet until a the driver signals that the write has completed.
	When the write completes, a signal bit will be set and PluckRPacket
	will be called.  SDNReply will return a special packet type indicating
	indicating the write has completed.
	Calling this routine automatically does a FreeRPacket on the packet.
	
   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket to be responded to.

   RESULTS
   	rc - SDN_OK == Write has successfully completed
	     SDN_PEND == Write is pending completion

   SEE ALSO
   	SDNAccept, SDNReceive

NET-xxx.library/SDNSend					NET-xxx.library/SDNSend
	
   NAME
	SDNSend
	
	PURPOSE: Send a packet to a specific remote node
	
   SYNOPSIS
	rc = SDNSend(drglobal, rp);
	D0		A0     A1
	
	int SDNSend(APTR, struct RPacket *);
	
   FUNCTION
	Send a packet to a specific remote node
	
	The RPacket will have been initialized for a specific node by the
	SDNAllocRPacket code.

   NOTE
	This routine is only called by the handler.

	If SDN_PEND is returned, the handler must not return the application's
	packet until a the driver signals that the write has completed.
	When the write completes, a signal bit will be set and SDNReceive
	will be called.  SDNReceive will return a special packet type
	indicating the write has completed.
	
	The packet is allocated by the server code and freed by the driver code
	when the I/O is complete.  Internally this routine is very similar to
	SDNReply except that the RPacket structure is not freed upon completion.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket to be responded to.

   RESULTS
   	rc - SDN_OK == Write has successfully completed
	     SDN_PEND == Write is pending completion

   SEE ALSO
   	SDNAllocRPacket

NET-xxx.library/SDNSerInit				NET-xxx.library/SDNSerInit
	
   NAME
	SDNSerInit - Perform server specific initialization

   SYNOPSIS
	rc = SDNSerInit(drglobal, mask, data);
	D0		   A0	   A1	 A2
	
	int SDNSerInit(APTR *, ULONG *, char *);

   FUNCTION
	Perform server Specific Initialization.
	
	The mask value is the communications mechanism for indicating which bits
	are to be used by the handle.  On input it is a mask of bits available
	for use if the library is unable to allocate any bits.  On output it
	is a mask of the bits that the library will set whenever it needs to
	service a message.  Once the bit is set, the server will call SDNAccept
	until SDN_NONE is returned.

	The data string is a simple null terminated C style string that is
	for use by the library.  There is no format specified in the string and
	may contain whatever the library wants it to have.  The server code
	just reads the string from a configuration file and passes it on to
	the library.  This pointer may be NULL if no initialization string has
	been specified.  In the absence of any configuration information, it is
	the responsibility of the library code to pick an appropriate default
	or to safely fail the initialization.

	The only difference between this routine and the SNDHanInit is that the
	server portion needs to set up to receive asynchronous new connections.
	It will only be doing calls to SDNAccept and not any to SDNReceive.

   NOTE
	This routine is only called by the server.

	This routine allocates and initializes the drglobal structure that is
	passed to all other service routines.

   EXAMPLE

   INPUTS
	mask - Mask of signal bits available for use by this driver.
	data - pointer to driver specific initialization string

   RESULTS
   	rc - SDN_OK indicates successful initialization.  SDN_ERR indicates
		that the server could not be initialized for some reason.
	drglobal - Driver specific global data pointer to be passed to all other
		SDN service routines.
   	mask - mask of signal bits which will be set when the driver has some
		data or input to process.

   SEE ALSO
   	SDNHanInit, SDNSerTerm


NET-xxx.library/SDNSerTerm				NET-xxx.library/SDNSerTerm

   NAME
	SDNSerTerm - Terminate all resources associated with a server

   SYNOPSIS
	
	SDNSerTerm(drglobal);
		      A0

	void SDNSerTerm(APTR);

   FUNCTION
	Terminate all resources associated with a server.
	
	This routine should terminate all pending operations and free up all
	allocated objects in preparations for shutting down.  It must also free
	the global structure allocated at SDNSerInit time.

   NOTE
	This routine is only called by the server.

   	Because of fall through in initialization and termination, it is possible
	for drglobal to be NULL.

	Because of potential overlap in allocated signal bits, the library must not
	free any signal bits that it returned in the mask field at SDNSerInit time.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNSerInit or
		SDNSerInit time.

   RESULTS
   	Nothing

   SEE ALSO
	SDNSerInit


NET-xxx.library/SDNSetConData				NET-xxx.library/SDNSetConData

	
   NAME
	SDNSetConData -	Set data associated with a connection for a RPacket
	
   SYNOPSIS
	SDNSetConData(drglobal, RP, data);
			A0	A1   A2
			
	void SDNSetConData(APTR, struct RPacket *, void *);
	
   FUNCTION
	Set data associated with a connection for a RPacket

	This function sets the connection specific pointer or any given RPacket.
	With this the server or handler can store a pointer to a global data
	item associated with an open connection.  When the connection closes,
	an ACTION_NETWORK_TERM packet with ARG1 containing the data value set
	for the connection.
	
	Typically this pointer will point to a handler or server specific data
	structure that indicates access or state information.
	
   NOTE
   	This is the only way for the server to track which connection a
	particular packet is associated.

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	RP - RPacket returned from SDNAccept or SDNReceive.
   	data - general pointer for the connection to be returned whenever
		SDNGetConData is called on any RPacket for the same connection.

   RESULTS
   	Nothing

   SEE ALSO
   	SDNGetConData

   =============

NET-xxx.library/SDNTermNode				NET-xxx.library/SDNTermNode
	
   NAME
	SDNTermNode - Free Up all Driver resources associated with a Node
	
   SYNOPSIS
	SDNTermNode(drglobal, con);
			A0     A1
	
	void SDNTerm(APTR, APTR);
	
   FUNCTION
	Free Up all Driver resources associated with a Node
	
	This routine is called by the handler when it wishes to shut down a
	connection.

   NOTE
	This routine is only called by the handler.
	
	con may be NULL due to initialization fall-through

   EXAMPLE

   INPUTS
	drglobal - Driver specific global data pointer obtained at SDNHanInit or
		SDNSerInit time.
	con - Connection pointer to terminate.  Previously obtained fron SDNInitNode

   RESULTS
   	Nothing

   SEE ALSO
	SDNInitNode
