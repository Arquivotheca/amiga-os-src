head     1.7;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.7
date     91.01.17.01.17.45;  author Doug;  state Exp;
branches ;
next     1.6;

1.6
date     91.01.10.22.24.50;  author J_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.25.15.53.35;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.17.19.15.04;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.02.00.46.54;  author Doug;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.01.23.28.10;  author Doug;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.01.21.09.36;  author Doug;  state Exp;
branches ;
next     ;


desc
@SDNSend and SDNReply for INET
@


1.7
log
@Add debugging msgs, check return codes
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1990 The Software Distillery.                    *
* |. o.| ||          All Rights Reserved                                  *
* | .  | ||          Written by John Toebes and Doug Walker               *
* | o  | ||          The Software Distillery                              *
* |  . |//           207 Livingstone Drive                                *
* ======             Cary, NC 27513                                       *
*                    BBS:(919)-460-7430                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "netcomm.h"
#include "sdninet.h"

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNReply                                                           */
/*                                                                             */
/* PURPOSE: Reply to a previously obtained message                             */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNReply(drglobal, RP);                                             */
/*                                                                             */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    RP        struct RPacket *  (in)     Data to send                        */
/*                                                                             */
/*    rc        int               (ret)    SDN_ERR, SDN_OK,                    */
/*                                         SDN_PEND == write not yet complete  */
/*                                                                             */
/* NOTES:                                                                      */
/*    If SDN_PEND is returned, the handler must not return the application's   */
/*       packet until a the driver signals that the write has completed.       */
/*       When the write completes, a signal bit will be set and PluckRPacket   */
/*       will be called.  SDNReply will return a special packet type indicating*/
/*       indicating the write has completed.                                   */
/*    Calling this routine automatically does a FreeRPacket on the packet.     */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT INETSDNReply        (register __a0 INETGLOBAL tg,
                                register __a1 struct RPacket *rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
{
   struct INETRPacket *irp = (struct INETRPacket *)rp;
   int rc;

   rc = SDNSend((APTR)tg, rp);
   return(rc);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNSend                                                            */
/*                                                                             */
/* PURPOSE: Send a packet to a specific remote node                            */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNSend(drglobal, rp);                                              */
/*                                                                             */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    rp        struct RPacket *  (in)     Data to send                        */
/*                                                                             */
/*    rc        int               (ret)    SDN_ERR, SDN_OK,                    */
/*                                         SDN_PEND == write not yet complete  */
/*                                                                             */
/* NOTES:                                                                      */
/*    If SDN_PEND is returned, the handler must not return the application's   */
/*       packet until a the driver signals that the write has completed.       */
/*       When the write completes, a signal bit will be set and SDNSend        */
/*       will be called.  SDNSend will return a special packet type            */
/*       indicating the write has completed.                                   */
/*                                                                             */
/*    The packet is allocated by the NET: code and freed by the driver code    */
/*       when the I/O is complete                                              */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT INETSDNSend         (register __a0 INETGLOBAL tg,
                                register __a1 struct RPacket *rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
{
   struct INETRPacket *irp = (struct INETRPacket *)rp;
   char *DataP, *AllocP;
   int len;

   if (irp->rp.DLen <= QUICKSIZE)
   {
      memcpy(irp->quickbuf, irp->rp.DataP, irp->rp.DLen);

      BUG(("Writing QUICK %d\n", irp->rp.DLen+RPSIZEN))
      len = writen(tg, irp->con->fh, RPBASE(rp), irp->rp.DLen+RPSIZEN);

      if (len != irp->rp.DLen+RPSIZEN)
      {
         /* Something is really bad here - I bet they closed the connection     */
         /* We need to return a failure.                                        */
         return(SDN_ERR);
      }
   }
   else
   {
      BUG(("Writing RPACKET %d\n", RPSIZEN))
      if (writen(tg, irp->con->fh, RPBASE(rp), RPSIZEN) != RPSIZEN)
      {
         /* Something is really bad here - I bet they closed the connection        */
         /* We need to return a failure.                                           */
         return(SDN_ERR);
      }
   
      if(irp->rp.DLen)
      {
         BUG(("Writing DATAP %d\n", irp->rp.DLen))
         if (writen(tg, irp->con->fh, irp->rp.DataP, irp->rp.DLen) != irp->rp.DLen)
         {
           return(SDN_ERR) ;
         }
      }
   }
   SDNFreeRPacket((APTR)tg, &irp->rp);

   return(SDN_OK);
}
@


1.6
log
@Eliminate BUG Statements, update Clean up support for QuickData area.
@
text
@d95 1
d107 1
d117 1
@


1.5
log
@Move FreeRPacket to SDNSend rather than SDNReply
@
text
@d88 2
d91 1
a91 8
   BUG(("SDNSend: Con: %08lx type %d, Args %lx %lx %lx %lx\n", 
       irp->con->fh, irp->rp.Type, 
       irp->rp.Arg1, irp->rp.Arg2, 
       irp->rp.Arg3, irp->rp.Arg4));

   BUG(("SDNSend: writing %d to confd %ld. . .", RPSIZEN, irp->con->fh));
   irp->rp.signature = SIGVALUE;
   if (writen(tg, irp->con->fh, (char *)rp, RPSIZEN) != RPSIZEN)
d93 1
a93 5
      /* Something is really bad here - I bet they closed the connection        */
      /* We need to return a failure.                                           */
      BUGR("NET write error")
      return(SDN_ERR);
   }
d95 1
a95 1
   BUG(("%ld written\n", RPSIZEN));
d97 8
a104 1
   if(irp->rp.DLen)
d106 8
a113 2
      BUG(("SDNSend: writing %d to confd %ld. . .", irp->rp.DLen, irp->con->fh));
      if (writen(tg, irp->con->fh, irp->rp.DataP, irp->rp.DLen) != irp->rp.DLen)
d115 4
a118 2
        BUGR("NET write error");
        return(SDN_ERR) ;
a119 1
      BUG(("%d written\n", irp->rp.DLen));
@


1.4
log
@Major Rewrite to clean up many problems..
@
text
@a49 1
   SDNFreeRPacket((APTR)tg, &irp->rp);
d116 1
@


1.3
log
@Don't include server.h any more
Get rid of references to NetNode
add 'con' parm to AllocRPacket
@
text
@d12 1
a12 2
#include "netinet.h"
#include "proto.h"
a13 5
#ifdef BUGR
#undef BUGR
#endif
#define BUGR(s)

d41 4
a44 3
int SDNReply(drglobal, rp)
APTR drglobal;
struct RPacket *rp;
d47 1
a47 15

   BUG(("SDNReply: Con: %08lx type %d, Args %lx %lx %lx %lx\n", 
       irp->con->fh, irp->rp.Type, 
       irp->rp.Arg1, irp->rp.Arg2, 
       irp->rp.Arg3, irp->rp.Arg4));

   BUG(("SDNReply: writing %d to confd %ld. . .", RPSIZEN, irp->con->fh));
   irp->rp.signature = SIGVALUE;
   if (writen(irp->con->fh, rp, RPSIZEN) != RPSIZEN)
   {
      /* Something is really bad here - I bet they closed the connection        */
      /* We need to return a failure.                                           */
      BUGR("NET write error")
      return(1);
   }
d49 3
a51 16
   BUG(("%ld written\n", RPSIZEN));

   if(irp->rp.DLen)
   {
      BUG(("SDNReply: writing %d to confd %ld. . .", irp->rp.DLen, irp->con->fh));
      if (writen(irp->con->fh, irp->rp.DataP, irp->rp.DLen) != irp->rp.DLen)
      {
        BUGR("NET write error");
        return(1) ;
      }
      BUG(("%d written\n", irp->rp.DLen));
   }

   FreeRPacket(drglobal, &irp->rp);

   return(SDN_OK);
d83 4
a86 3
int SDNSend(drglobal, rp)
APTR drglobal;
struct RPacket *rp;
d88 31
a118 1
   return(SDNReply(drglobal, rp));
@


1.2
log
@Rework SDNReply, write SDNSend
@
text
@a11 1
#include "server.h"
d13 1
a50 1
   INETGLOBAL tg = (INETGLOBAL)drglobal;
d59 2
a60 2
   rp->rp.signature = SIGVALUE;
   if (writen(irp->con->fh, RP, RPSIZEN) != RPSIZEN)
d93 1
a93 1
/*    rc = SDNSend(drglobal, nnode, RP);                                       */
d99 1
a99 1
/*    nnode     struct NetNode *  (in)     Node to talk to                     */
a100 2
/*    RP        struct RPacket *  (in)     Data to send                        */
/*                                                                             */
d115 1
a115 1
int SDNSend(drglobal, nnode, rp)
d117 1
a117 2
struct NetNode *nnode;
struct RPacket **rp;
a118 6
   INETGLOBAL tg = (INETGLOBAL)drglobal;
   inetcon *con;

   con = ((struct INETRPacket *)rp)->con = (inetcon *)nnode->ioptr;
   con->usage++;

@


1.1
log
@Initial revision
@
text
@d52 1
d54 4
a57 4
   BUG(("SDNReply: Con: %ld type %d, Args %lx %lx %lx %lx\n", 
       rp->handle, rp->Type, 
       rp->Arg1, rp->Arg2, 
       rp->Arg3, rp->Arg4));
d59 3
a61 3
   BUG(("SDNReply: writing %d to confd %ld. . .", RPSIZEN, rp->handle));
   rp->signature = SIGVALUE;
   if (writen(rp->handle, RP, RPSIZEN) != RPSIZEN)
d71 1
a71 1
   if(rp->DLen)
d73 2
a74 2
      BUG(("SDNReply: writing %d to confd %ld. . .", rp->DLen, rp->handle));
      if (writen(rp->handle, rp->DataP, rp->DLen) != rp->DLen)
d79 1
a79 1
      BUG(("%d written\n", rp->DLen));
d82 2
d113 3
a115 1
/*    The packet is allocated by the NET: code                                 */
d124 4
d129 1
a129 1
   return(SDN_OK);
a130 1

@
