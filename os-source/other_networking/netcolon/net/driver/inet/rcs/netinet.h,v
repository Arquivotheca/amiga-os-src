head     1.5;
branch   ;
access   ;
symbols  Distillery:1.5;
locks    ; strict;
comment  @ * @;


1.5
date     90.11.02.00.06.11;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.01.22.21.00;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.01.21.07.57;  author Doug;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.01.20.07.43;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.07.23.43.02;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@Network Handler general include files for Ethernet (INET) protocol
@


1.5
log
@Define DEFPACKETS
@
text
@#ifndef D_NETINET_H
#define D_NETINET_H

#ifdef DOS_TRUE
#undef DOS_TRUE
#undef DOS_FALSE
#endif

#include <sys/errno.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet/inet.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <proto/inet.h>

#define NETBUFSIZE 8192
#define MAXCONNECT    24
#define INETMASK(f)    (1 << (f))

#define DEFPACKETS 10  /* Default number of RPackets to start with */


int OpenIPC(GLOBAL);
int ConnectIPC(GLOBAL) ;

VOID SetTimer (unsigned long, unsigned long, struct IOStdReq *) ;
VOID cleanup () ;

#define PACKET_PERM 0
#define PACKET_FREE 1
#define PACKET_TEMP 2

struct INETRPacket {
   struct RPacket rp;
   struct INETRPacket *next;
   struct INETCON *con;
   long   class;
};

typedef struct INETCON
{
   int fh;                     /* File handle for this connection */
   int usage;                  /* Usage count for this connection */
   struct INETRPacket *opack;  /* Outstanding RPackets for this connection */
} inetcon;

typedef struct
{
   struct sockaddr_in sin;      /* Socket handle                                   */
   int    fhscount;             /* Number of open connections                      */
   inetcon connect[MAXCONNECT]; /* All connections                                 */
   long   fhsmask;              /* Mask of all open connections                    */
   long   fhscurmask;           /* Mask of unprocessed connections                 */
   struct timeval timeout;      /* Timeout interval (defaults to 5 seconds)        */
   int    curcon;               /* Connection of current packet                    */
   int    sock;                 /* Base socket handle for pending connections      */
   long   sockmask;             /* Base socket mask                                */
   struct INETRPacket *tpack;   /* Temporary packet handles to track               */
   struct INETRPacket *ppack;   /* Permanent packet handles to track               */
} * INETGLOBAL;

extern int _alarm_timerbit, socket_sigio;

#endif
@


1.4
log
@Define INETCON structure
@
text
@d24 2
@


1.3
log
@Add extern declarations
@
text
@d39 1
d43 7
d52 11
a62 12
   struct sockaddr_in sin;   /* Socket handle                                   */
   int    fhscount;          /* Number of open connections                      */
   int    fhs[MAXCONNECT];   /* file handle of all open connections             */
   SESSION *ses[MAXCONNECT]; /* Session pointers                                */
   long   fhsmask;           /* Mask of all open connections                    */
   long   fhscurmask;        /* Mask of unprocessed connections                 */
   struct timeval timeout;   /* Timeout interval (defaults to 5 seconds)        */
   int    curcon;            /* Connection of current packet                    */
   int    sock;              /* Base socket handle for pending connections      */
   long   sockmask;          /* Base socket mask                                */
   struct INETRPacket *tpack;/* Temporary packet handles to track               */
   struct INETRPacket *ppack;/* Permanent packet handles to track               */
@


1.2
log
@Added InetRPacket stuff.
@
text
@d57 2
@


1.1
log
@Initial revision
@
text
@d13 1
d15 5
d21 1
a21 1
#define NETBUFSIZE 1024
d32 10
d47 1
d54 2
@
