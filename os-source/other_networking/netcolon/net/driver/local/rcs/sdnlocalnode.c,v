head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     91.05.27.09.50.48;  author dlarson;  state Stab;
branches ;
next     1.3;

1.3
date     91.05.22.10.00.46;  author dlarson;  state Stab;
branches ;
next     1.2;

1.2
date     91.01.10.22.27.11;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.28.22.40.01;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@Init/Term node routines
@


1.4
log
@Tweaked autodocs, eliminated include of netcomm.h
@
text
@/*
**		$Log:	SDNLocalNode.c,v $
 * Revision 1.3  91/05/22  10:00:46  dlarson
 * clean up stay comments, etc.
 *
*/


#include "sdnlocal.h"

/****** NET-LOCAL.library/SDNInitNode **********************************
*
*   NAME
*	SDNInitNode -- Establish a new node connection.
*
*   SYNOPSIS
*	rc = SDNInitNode(drglobal, name, con)
*	D0		 A0	   A1	 A2
*
*	int SDNInitNode(APTR, char *, APTR *)
*
*   FUNCTION
*	When the handler wishes to talk to a node for which it has not
*	established a connection, it calls this entry point with the name of
*	the node that it is attempting to access.  If a particular driver does
*	not support multiple connetions then it should just return a failure
*	after the first connection is set up.
*
*   INPUTS
*	 drglobal	- Driver-specific global data pointer
*	 name		- On input, name of node is set.
*			  On output, driver sets the 'status'
*														  and 'ioptr' fields.
*   RESULT
*	 rc		- SDN_ERR, SDN_OK
*
*   NOTES
*	This function is called only by the hanlder.
*
*	Name must be treated as non-case-sensitive.
*
*	Called by the handler to establish communications with a specific
*	remote node.
*
*   BUGS
*
*   SEE ALSO
*	SDNAllocRPacket(), SDNTermNode()
*
***************************************/
int LIBENT LOCALSDNInitNode (register __a0 LOCALGLOBAL tg,
			     register __a1 char *name,
			     register __a2 APTR *con,
			     register __a6 struct DrLibrary *DriverBase)
{
	int len;

	len = strlen(name);
	if (len > MAXNAME)
		return(SDN_ERR);

	if (tg->nodename[0])
	{
		if (stricmp(tg->nodename, name))
			return(SDN_ERR);
		return(SDN_OK);
	}

	strcpy(tg->nodename, name);
	tg->state = CSTATE_CLOSED;
	if (tg->sendport == NULL)
		return(SDN_DOWN);
	return(SDN_OK);
}


/****** NET-LOCAL.library/SDNTermNode **********************************
*
*   NAME
*	SDNTermNode -- Free Up all Driver resources associated with a Node.
*
*   SYNOPSIS
*	SDNTermNode(drglobal, con)
*		    A0	      A1
*
*	void SDNTerm(APTR, APTR);
*
*   FUNCTION
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer.
*	con	  	- Connection pointer obtained from SDNInitNode() to
*			  terminate.
*
*   RESULTS
*	None.
*
*   NOTES
*	This function is called only by the handler.
*
*	con
*   BUGS
*
*   SEE ALSO
*	SDNInitNode()
*
****************************************/
void LIBENT LOCALSDNTermNode (register __a0 LOCALGLOBAL tg,
			      register __a1 APTR con,
			      register __a6 struct DrLibrary *DriverBase)
{
	tg->nodename[0] = 0;
	tg->state = CSTATE_CLOSED;
}

@


1.3
log
@clean up stay comments, etc.
@
text
@d2 4
a5 5
**		$Filename: $
**		$Author: J_Toebes $
**		$Revision: 1.2 $
**		$Date: 91/01/06 20:56:41 $
**		$Log:	SDNLocalGet.c,v $
a8 1
#include "netcomm.h"
@


1.2
log
@Added support for SDN_DOWN.
@
text
@d1 7
a7 9
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1990 The Software Distillery.                    *
* |. o.| ||          All Rights Reserved                                  *
* | .  | ||          Written by John Toebes and Doug Walker               *
* | o  | ||          The Software Distillery                              *
* |  . |//           207 Livingstone Drive                                *
* ======             Cary, NC 27513                                       *
*                    BBS:(919)-460-7430                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d9 1
d13 44
a56 27
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNInitNode                                                        */
/*                                                                             */
/* PURPOSE: Establish a new node connection                                    */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNInitNode(drglobal, nnode);                                       */
/*                                                                             */
/*    drglobal   APTR             (in)     Driver-specific global data pointer */
/*                                                                             */
/*    nnode      struct NetNode * (in/out) On input, name of node is set.      */
/*                                         On output, driver sets the 'status' */
/*                                            and 'ioptr' fields.              */
/*                                                                             */
/*    rc         int              (ret)    SDN_ERR, SDN_OK                     */
/*                                                                             */
/* NOTES:                                                                      */
/*    Called by the handler to establish communications with a specific        */
/*    remote node.                                                             */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT LOCALSDNInitNode     (register __a0 LOCALGLOBAL tg,
                                register __a1 char *name,
                                register __a2 APTR *con,
                                register __a6 struct DrLibrary *DriverBase
                               )
d58 18
a75 18
   int len;
   
   len = strlen(name);
   if (len > MAXNAME)
      return(SDN_ERR);

   if (tg->nodename[0])
   {
      if (stricmp(tg->nodename, name))
         return(SDN_ERR);
      return(SDN_OK);
   }

   strcpy(tg->nodename, name);
   tg->state = CSTATE_CLOSED;
   if (tg->sendport == NULL)
      return(SDN_DOWN);
   return(SDN_OK);
d79 34
a112 22
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNTermNode                                                        */
/*                                                                             */
/* PURPOSE: Free Up all Driver resources associated with a Node                */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    SDNTermNode(drglobal, nnode);                                            */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    nnode     struct NetNode *  (in)     NetNode to terminate                */
/*                                                                             */
/* NOTES:                                                                      */
/*    This routine is void.                                                    */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
void LIBENT LOCALSDNTermNode    (register __a0 LOCALGLOBAL tg,
                                register __a1 APTR con,
                                register __a6 struct DrLibrary *DriverBase
                               )
d114 2
a115 2
   tg->nodename[0] = 0;
   tg->state = CSTATE_CLOSED;
@


1.1
log
@Initial revision
@
text
@d57 2
@
