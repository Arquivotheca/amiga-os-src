head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @**@;


1.6
date     91.05.27.09.50.03;  author dlarson;  state Stab;
branches ;
next     1.5;

1.5
date     91.05.24.14.52.47;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.05.21.15.56.36;  author dlarson;  state Stab;
branches ;
next     1.3;

1.3
date     91.01.10.22.26.44;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     91.01.06.20.56.03;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.28.22.37.56;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@SDNSend, SDNReply routines
@


1.6
log
@Tweaked autodocs, eliminated include of netcomm.h
@
text
@/*
**  $Log:	SDNLocalPut.c,v $
**Revision 1.5  91/05/24  14:52:47  dlarson
**removed a few spurious tabs
**
 * Revision 1.4  91/05/21  15:56:36  dlarson
 * Updated autodocs, spaces->tabs, etc.
 *
 * Revision 1.3  91/01/10  22:26:44  J_Toebes
 * Eliminate reference to deleted signature field.
 *
 * Revision 1.2  91/01/06  20:56:03  J_Toebes
 * Correct strange bug where packets were being received by the local
 * sender.  This was due to overloading the Port field in the global structure.
 *
**/


#include "sdnlocal.h"

/****** NET-LOCAL.library/SDNReply **********************************
*
*   NAME
*	SDNReply -- Reply to a previously obtained message
*
*   SYNOPSIS
*	rc = SDNReply(drglobal, RP)
*	D0	      A0	A1
*
*	int SDNReply(APTR, struct RPacket *);
*
*   FUNCTION
*	Reply to a previously obtained message.
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer
*	RP		- Data to send
*
*   RESULT
*	rc		- SDN_ERR, SDN_OK,
*			  SDN_PEND == write not yet complete
*
*   NOTES
*	If SDN_PEND is returned, the handler must not return the application's
*	packet until the driver signals that the write has completed.
*	When the write completes, a signal bit will be set and
*	SDNAccept() will be called.  SDNReply() will return a special
*	packet type indicating indicating the write has completed.
*	Calling this routine automatically does a SDNFreeRPacket() on the
*	packet.
*
*   BUGS
*
*   SEE ALSO
*	SDNAccept(), SDNReceive()
*
****************************************/
int LIBENT LOCALSDNReply (register __a0 LOCALGLOBAL tg,
								  register __a1 struct RPacket *rp,
								  register __a6 struct DrLibrary *DriverBase)
{
	ReplyMsg(&(RP2LRP(rp))->ms);
	return(SDN_OK);
}

/****************************************
*
*   NAME
*	SDNSend -- Send a packet to a specific remote node.
*
*   SYNOPSIS
*	 rc = SDNSend(drglobal, rp)
*
*
*   FUNCTION
*	Send a packet to a specific remote node.
*
*	The RPacket will have been initailized for a specific node by the
*	SDNAllocRPacket() code.
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer
*	rp		- RPacket to send.
*
*   RESULT
*	rc		- SDN_ERR, SDN_OK,
*			  SDN_PEND == write not yet complete
*
*   NOTES
*	This function is called only by the handler.
*
*	If SDN_PEND is returned, the handler must not return the application's
*	packet until a the driver signals that the write has completed.
*	When the write completes, a signal bit will be set and SDNSend()
*	will be called.  SDNSend() will return a special packet type
*	indicating the write has completed.
*
*	The packet is allocated by the server code and freed by the driver
*	code when the I/O is complete.  Internally this routine is very
*	similar to SDNReply().
*
*	Calling this routine automatically does an SDNFreeRPacket() on the
*	packet.
*
*   BUGS
*
*   SEE ALSO
*	SDNAllocRPacket()
*
****************************************/
int LIBENT LOCALSDNSend (register __a0 LOCALGLOBAL tg,
								 register __a1 struct RPacket *rp,
								 register __a6 struct DrLibrary *DriverBase)
{
	struct LOCALRPacket *irp = RP2LRP(rp);

	if (tg->sendport == NULL)
	{
		if ((tg->sendport = FindPort(tg->portname)) == NULL)
			return(SDN_ERR);
	}

	irp->ms.mn_ReplyPort = tg->replyport;
	PutMsg(tg->sendport, &irp->ms);

	return(SDN_OK);
}
@


1.5
log
@removed a few spurious tabs
@
text
@a1 4
**  $Filename: SDNLocalPut.c $
**  $Author: dlarson $
**  $Revision: 1.4 $
**  $Date: 91/05/21 15:56:36 $
d3 3
d18 1
a18 1
#include "netcomm.h"
@


1.4
log
@Updated autodocs, spaces->tabs, etc.
@
text
@d3 7
a9 4
**  $Author: J_Toebes $
**  $Revision: 1.3 $
**  $Date: 91/01/10 22:26:44 $
**  $Log: SDNLocalPut.c,v $
d42 1
a42 1
*													  SDN_PEND == write not yet complete
@


1.3
log
@Eliminate reference to deleted signature field.
@
text
@a0 9
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1990 The Software Distillery.                    *
* |. o.| ||          All Rights Reserved                                  *
* | .  | ||          Written by John Toebes and Doug Walker               *
* | o  | ||          The Software Distillery                              *
* |  . |//           207 Livingstone Drive                                *
* ======             Cary, NC 27513                                       *
*                    BBS:(919)-460-7430                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d2 8
a9 5
**      $Filename: SDNLocalPut.c $ 
**      $Author: J_Toebes $
**      $Revision: 1.2 $
**      $Date: 91/01/06 20:56:03 $
**      $Log:	SDNLocalPut.c,v $
d13 1
a13 1
 * 
d19 40
a58 31
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNReply                                                           */
/*                                                                             */
/* PURPOSE: Reply to a previously obtained message                             */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNReply(drglobal, RP);                                             */
/*                                                                             */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    RP        struct RPacket *  (in)     Data to send                        */
/*                                                                             */
/*    rc        int               (ret)    SDN_ERR, SDN_OK,                    */
/*                                         SDN_PEND == write not yet complete  */
/*                                                                             */
/* NOTES:                                                                      */
/*    If SDN_PEND is returned, the handler must not return the application's   */
/*       packet until a the driver signals that the write has completed.       */
/*       When the write completes, a signal bit will be set and PluckRPacket   */
/*       will be called.  SDNReply will return a special packet type indicating*/
/*       indicating the write has completed.                                   */
/*    Calling this routine automatically does a FreeRPacket on the packet.     */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT LOCALSDNReply        (register __a0 LOCALGLOBAL tg,
                                register __a1 struct RPacket *rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
d60 2
a61 2
   ReplyMsg(&(RP2LRP(rp))->ms);
   return(SDN_OK);
d64 48
a111 33
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNSend                                                            */
/*                                                                             */
/* PURPOSE: Send a packet to a specific remote node                            */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNSend(drglobal, rp);                                              */
/*                                                                             */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    rp        struct RPacket *  (in)     Data to send                        */
/*                                                                             */
/*    rc        int               (ret)    SDN_ERR, SDN_OK,                    */
/*                                         SDN_PEND == write not yet complete  */
/*                                                                             */
/* NOTES:                                                                      */
/*    If SDN_PEND is returned, the handler must not return the application's   */
/*       packet until a the driver signals that the write has completed.       */
/*       When the write completes, a signal bit will be set and SDNSend        */
/*       will be called.  SDNSend will return a special packet type            */
/*       indicating the write has completed.                                   */
/*                                                                             */
/*    The packet is allocated by the NET: code and freed by the driver code    */
/*       when the I/O is complete                                              */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT LOCALSDNSend         (register __a0 LOCALGLOBAL tg,
                                register __a1 struct RPacket *rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
d113 1
a113 1
   struct LOCALRPacket *irp = RP2LRP(rp);
d115 5
a119 5
   if (tg->sendport == NULL)
   {
      if ((tg->sendport = FindPort(tg->portname)) == NULL)
         return(SDN_ERR);
   }
d121 2
a122 2
   irp->ms.mn_ReplyPort = tg->replyport;
   PutMsg(tg->sendport, &irp->ms);
d124 1
a124 1
   return(SDN_OK);
@


1.2
log
@Correct strange bug where packets were being received by the local
sender.  This was due to overloading the Port field in the global structure.
@
text
@d13 2
a14 2
**      $Revision: 1.10 $
**      $Date: 90/12/31 15:27:48 $
d16 4
a96 1
   irp->rp.signature = SIGVALUE;
@


1.1
log
@Initial revision
@
text
@d10 7
d94 1
a94 1
   if (tg->port == NULL)
d96 1
a96 1
      if ((tg->port = FindPort(tg->portname)) == NULL)
d101 1
a101 1
   PutMsg(tg->port, &irp->ms);
@
