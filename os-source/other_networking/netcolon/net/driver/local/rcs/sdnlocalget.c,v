head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @**@;


1.4
date     91.05.27.09.50.36;  author dlarson;  state Stab;
branches ;
next     1.3;

1.3
date     91.05.21.15.56.46;  author dlarson;  state Stab;
branches ;
next     1.2;

1.2
date     91.01.06.20.56.41;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.12.28.22.38.26;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@SDNAccept, SDNReceive routines
@


1.4
log
@Tweaked autodocs, eliminated include of netcomm.h
@
text
@/*
**		$Log:	SDNLocalGet.c,v $
 * Revision 1.3  91/05/21  15:56:46  dlarson
 * Updated autodocs, spaces->tabs, etc.
 *
 * Revision 1.2  91/01/06  20:56:41  J_Toebes
 * Correct strange bug where packets were being received by the local
 * sender.  This was due to overloading the Port field in the global structure.
 *
**/

#include "sdnlocal.h"

/***** NET-LOCAL.library/SDNAccept ***********************************
*
*   NAME
*	SDNAccept -- Get any new packet or connection.
*
*   SYNOPSIS
*	rc = SDNAccept(drglobal, rp)
*	D0	       A0	 A1
*
*	int SDNAccept(APTR, struct RPacket **);
*
*   FUNCTION
*	Read next incoming packet and accept new connections.  If rc ==
*	SDN_OK, the *rp will point to a new packet.
*
*   INPUTS
*	drglobal  	- Driver-specific global data pointer obtained from
*			  SDNSerInit()
*	rp		- Packet that has arrived
*
*   RESULTS
*	rc		- SDN_OK, SDN_ERR == read error,
*			  SDN_NONE == nothing to read
*
*   NOTES
*	This routine is only called by the server.
*
*	Driver must be prepared to handle this being called when nothing is
*	pending since multiple drivers may be sharing a signal bit.  If a
*	packet did come in, but is munged, SDN_ERR is returned;  if no packet
*	was available, SDN_NONE is returned.  If a pending write request has
*	been completed, a special packet type is returned and a copy of the
*	original RPacket structure's 'statedata' pointer is returned.
*
*	The memory pointed to by RP is owned by the NET: code until
*	SDNFreeRPacket() is called.  SDNFreeRPacket() should be called ASAP
*	after calling SDNAccept() to allow the driver to reuse the RPacket
*	for the next read request.
*
*	When a new connection is established, this routine will return a
*	filled in RPacket with an action indicating the establishment of the
*	connection (ACTION_NETWORK_START).  For connections that are broken, a
*	phoney RPacket is returned (ACTION_NETWORK_END).
*
*   BUGS
*
*   SEE ALSO
*	SDN_Reply(), SDNFreeRPacket()
*
*************************************/
int LIBENT LOCALSDNAccept (register __a0 LOCALGLOBAL tg,
			register __a1 struct RPacket **rp,
			register __a6 struct DrLibrary *DriverBase)
{
	struct LOCALRPacket *lrp;

	*rp = NULL;

	/* Handle the one special case of letting them know when we have a connection */
	if (tg->state == CSTATE_CONNECT)
	{
		*rp = SDNAllocRPacket((APTR)tg, NULL, NETBUFSIZE);
		if (*rp == NULL)
			return(SDN_ERR);

		(*rp)->Type = ACTION_NETWORK_START;
		(*rp)->Arg1 = 1;
		tg->state = CSTATE_ACTIVE;
		return(SDN_OK);
	}

	/* Process and free any RPackets that have been returned to us */
	if (tg->replyport != NULL)
	{
		if ((lrp = (struct LOCALRPacket *)GetMsg(tg->replyport)) != NULL)
		{
			if (lrp->rp.DataP != lrp->rp.AllocP)
			{
				memcpy(lrp->rp.AllocP, lrp->rp.DataP, lrp->rp.DLen);
				lrp->rp.DataP = lrp->rp.AllocP;
			}
			*rp = LRP2RP(lrp);
			return(SDN_OK);
		}
	}

	if (tg->port == NULL)
	{
		if (tg->replyport == NULL)
			return(SDN_ERR);
		return(SDN_NONE);
	}

	if ((lrp = (struct LOCALRPacket *)GetMsg(tg->port)) == NULL)
		return(SDN_NONE);

	if (lrp->rp.DataP != lrp->rp.AllocP)
	{
		memcpy(lrp->rp.AllocP, lrp->rp.DataP, lrp->rp.DLen);
		lrp->rp.DataP = lrp->rp.AllocP;
	}
	*rp = LRP2RP(lrp);
	return(SDN_OK);
}

/****** NET-LOCAL.library/SDNReceive **********************************
*
*   NAME
*	SDNReceive -- Get the next response packet
*
*   SYNOPSIS
*	rc = SDNReceive(drglobal, mask, RP);
*	D0		A0	  D0    A1
*
*	int SDNReceive(APTR, ULONG, struct RPacket **);
*
*   FUNCTION
*	Read the next incomming packet.
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer
*	mask		- Mask of signal bits that have gone off
*	RP		- RPacket that has arrived
*
*   RESULT
*	rc		- SDN_OK, SDN_ERR == read error,
*			  SDN_NONE == nothing to read
*
*   NOTES
*	This routine is called only by the handler.
*
*	Driver must be prepared to handle this being called when nothing is
*	pending since multiple drivers may be sharing a signal bit.  If a
*	packet did come in, but is munged, SDN_ERR is returned;  if no packet
*	was available, SDN_NONE is returned.  If a pending write request has
*	been completed, a special packet type is returned and a copy of the
*	original RPacket structure's 'statedata' pointer is returned.
*
*	The memory pointed to by RP is owned by the NET: code
*	until SDNFreeRPacket() is called.  SDNFreeRPacket() should be called
*	ASAP after calling SDNReceive() to allow the driver to reuse the
*	RPacket for the next read request.
*
*	For those drivers which support multiple connections and want some
*	connections to appear on the workbench automatically, it should
*	generate a phoney ACTION_NETWORK_START RPacket for each node that is
*	to be auto-mounted.  If the user did not specify the AUTO * option in
*	the handler-config configuration file then these packets will simply
*	be noted as nodes attached to the driver and not made immediately
*	visible.
*
*   BUGS
*
*   SEE ALSO
*	SDNAccept(), SDNFreeRPacket()
*
****************************************/
int LIBENT LOCALSDNReceive (register __a0 LOCALGLOBAL tg,
			    register __d0 ULONG mask,
			    register __a1 struct RPacket **rp,
			    register __a6 struct DrLibrary *DriverBase)
{
	return(SDNAccept((APTR)tg, rp));
}
@


1.3
log
@Updated autodocs, spaces->tabs, etc.
@
text
@a1 4
**		$Filename: SDNLocalGet.c $
**		$Author: J_Toebes $
**		$Revision: 1.2 $
**		$Date: 91/01/06 20:56:41 $
d3 3
a11 1
#include "netcomm.h"
d20 1
a20 1
*	rc = SDNAccept(drglobal, RP)
d26 2
a27 1
*	Read next incoming packet and accept new connections.
d32 1
a32 1
*	RP		- Packet that has arrived
d56 1
a56 1
*	phoney RPacketacket is also returned (ACTION_NETWORK_END).
@


1.2
log
@Correct strange bug where packets were being received by the local
sender.  This was due to overloading the Port field in the global structure.
@
text
@a0 9
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1990 The Software Distillery.                    *
* |. o.| ||          All Rights Reserved                                  *
* | .  | ||          Written by John Toebes and Doug Walker               *
* | o  | ||          The Software Distillery                              *
* |  . |//           207 Livingstone Drive                                *
* ======             Cary, NC 27513                                       *
*                    BBS:(919)-460-7430                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d2 9
a10 5
**      $Filename: SDNLocalGet.c $ 
**      $Author: J_Toebes $
**      $Revision: 1.10 $
**      $Date: 90/12/31 15:27:48 $
**      $Log:	SDNLocalGet.c,v $
d16 52
a67 40
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNAccept                                                          */
/*                                                                             */
/* PURPOSE: Read the next incoming packet and accept new connections           */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNAccept(drglobal, RP);                                            */
/*                                                                             */
/*    drglobal  APTR              (in)     Driver-specific global data pointer */
/*                                                                             */
/*                                                                             */
/*    RP        struct RPacket ** (out)    Packet that has arrived             */
/*                                                                             */
/*    rc        int               (ret)    SDN_OK, SDN_ERR == read error,      */
/*                                         SDN_NONE == nothing to read         */
/*                                                                             */
/* NOTES:                                                                      */
/*    Driver must be prepared to handle this being called when nothing is      */
/*       pending since multiple drivers may be sharing a signal bit.  If a     */
/*       packet did come in, but is munged, SDN_ERR is returned;  if no packet */
/*       was available, SDN_NONE is returned.  If a pending write request has  */
/*       been completed, a special packet type is returned and a copy of the   */
/*       original RPacket structure's 'statedata' pointer is returned.         */
/*                                                                             */
/*    The memory pointed to by RP is owned by the NET: code                    */
/*       until FreeRPacket is called.  FreeRPacket should be called ASAP after */
/*       calling PluckRPacket to allow the driver to reuse the RPacket for the */
/*       next read request.                                                    */
/*                                                                             */
/*    When a new connection is established, this routine will return a filled  */
/*       in RPACKET with an action indicating the establishment of the         */
/*       connection.  For connections that are broken, a phoney rpacket is     */
/*       also returned.                                                        */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT LOCALSDNAccept       (register __a0 LOCALGLOBAL tg,
                                register __a1 struct RPacket **rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
d69 1
a69 1
   struct LOCALRPacket *lrp;
d71 1
a71 1
   *rp = NULL;
d73 45
a117 45
   /* Handle the one special case of letting them know when we have a connection */
   if (tg->state == CSTATE_CONNECT)
   {
      *rp = SDNAllocRPacket((APTR)tg, NULL, NETBUFSIZE);
      if (*rp == NULL)
         return(SDN_ERR);

      (*rp)->Type = ACTION_NETWORK_START;
      (*rp)->Arg1 = 1;
      tg->state = CSTATE_ACTIVE;
      return(SDN_OK);
   }

   /* Process and free any RPackets that have been returned to us */
   if (tg->replyport != NULL)
   {
      if ((lrp = (struct LOCALRPacket *)GetMsg(tg->replyport)) != NULL)
      {
         if (lrp->rp.DataP != lrp->rp.AllocP)
         {
            memcpy(lrp->rp.AllocP, lrp->rp.DataP, lrp->rp.DLen);
            lrp->rp.DataP = lrp->rp.AllocP;
         }
         *rp = LRP2RP(lrp);
         return(SDN_OK);
      }
   }

   if (tg->port == NULL)
   {
      if (tg->replyport == NULL)
         return(SDN_ERR);
      return(SDN_NONE);
   }

   if ((lrp = (struct LOCALRPacket *)GetMsg(tg->port)) == NULL)
      return(SDN_NONE);

   if (lrp->rp.DataP != lrp->rp.AllocP)
   {
      memcpy(lrp->rp.AllocP, lrp->rp.DataP, lrp->rp.DLen);
      lrp->rp.DataP = lrp->rp.AllocP;
   }
   *rp = LRP2RP(lrp);
   return(SDN_OK);
d120 56
a175 37
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                             */
/* ROUTINE: SDNReceive                                                         */
/*                                                                             */
/* PURPOSE: Get the next response packet                                       */
/*                                                                             */
/* SYNOPSIS:                                                                   */
/*    rc = SDNReceive(drglobal, mask, RP);                                     */
/*                                                                             */
/*    drglobal  APTR              (in)  Driver-specific global data pointer    */
/*                                                                             */
/*    mask      ULONG             (in)  Mask of signal bits that have gone off */
/*                                                                             */
/*    RP        struct RPacket ** (out) RPacket that has arrived               */
/*                                                                             */
/*    rc        int               (ret) SDN_OK, SDN_ERR == read error,         */
/*                                      SDN_NONE == nothing to read            */
/*                                                                             */
/* NOTES:                                                                      */
/*    Driver must be prepared to handle this being called when nothing is      */
/*       pending since multiple drivers may be sharing a signal bit.  If a     */
/*       packet did come in, but is munged, SDN_ERR is returned;  if no packet */
/*       was available, SDN_NONE is returned.  If a pending write request has  */
/*       been completed, a special packet type is returned and a copy of the   */
/*       original RPacket structure's 'statedata' pointer is returned.         */
/*                                                                             */
/*    The memory pointed to by RP is owned by the NET: code                    */
/*       until FreeRPacket is called.  FreeRPacket should be called ASAP after */
/*       calling SDNReceive to allow the driver to reuse the RPacket for the   */
/*       next read request.                                                    */
/*                                                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int LIBENT LOCALSDNReceive      (register __a0 LOCALGLOBAL tg,
                                register __d0 ULONG mask,
                                register __a1 struct RPacket **rp,
                                register __a6 struct DrLibrary *DriverBase
                               )
d177 1
a177 1
   return(SDNAccept((APTR)tg, rp));
@


1.1
log
@Initial revision
@
text
@d10 7
d95 5
a99 1
      return(SDN_ERR);
@
