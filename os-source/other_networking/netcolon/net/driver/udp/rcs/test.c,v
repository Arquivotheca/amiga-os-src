head     1.2;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.2; strict;
comment  @ * @;


1.2
date     91.07.08.10.05.43;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.06.21.11.53.09;  author dlarson;  state Exp;
branches ;
next     ;


desc
@y
test for driver libraries
@


1.2
log
@continuing development...
@
text
@/*
**  test.c -- Test Bolt driver functions.
**
**  As you develop your driver, test the functions you add by commenting out
**  all sections after those you've not yet implemented.  Remember to use
**  'avail flush' before and after your call to 'test.'
**
**  Unfortunately, you really can't test anything other than SDN*Init(),
**  SDN*RPacket() and SDN*Term() without testing everything.  The other
**  functions are too dependent on each other.
*/

#include <exec/exec.h>
#include <string.h>
#include <proto/exec.h>
#include <bolt.h>

struct library *DriverBase;

main(int argc, char **argv)
{
	int rc, i;
	struct RPacket *rp[20];
	APTR hanglobal, serglobal;
	ULONG hanmask=0, sermask=0;
	APTR con;

	if(argc != 2)
	{
		printf("usage: %s libraryname\n", argv[0]);
		return(10);
	}
	KPrintF("\n\n\nTEST: Bolt driver functions test.\n");
	KPrintF("Testing %s.\n", argv[1]);
	DriverBase = OpenLibrary(argv[1], 0L);
	if( !DriverBase )
	{
		KPrintF("TEST: Unable to open %s\n", argv[1], 0L);
		return(20);
	}
	KPrintF("TEST: Opened %s, about to SDNHanInit().\n", argv[1]);

	rc = SDNHanInit(&hanglobal, &hanmask, NULL);
	KPrintF("TEST: SDNHanInit() returned %ld, about to SDNSerInit().\n", rc);
	rc = SDNSerInit(&serglobal, &sermask, NULL);
	KPrintF("TEST: SDNSerInit() returned %d, now Allocing RPacket()s.\n", rc);
	for(i=0; i<20; i++)
	{
		rp[i] = SDNAllocRPacket(hanglobal, NULL, 80L);
		KPrintF("(%ld %lx) ", i, rp[i]);
	}
	KPrintF("\nTEST: Now Freeing RPackets (except 0)\n");
	for(i=0; i<20; i++)
	{
		SDNFreeRPacket(hanglobal, rp[i]);
		KPrintF("%ld ", i, rp[i]);
	}
	KPrintF("\nTEST: Freed RPackets.\n");

#if 0 /********** this stuff is hosed:  **********/
	KPrintF("\nTEST: InitNode()ing Sprite.\n");
	if (!SDNInitNode(hanglobal, "sprite", &con))
		goto cleanup;
	KPrintF("\nTEST: Allocing an RPacket to send to Sprite.\n");
	rp[1] = SDNAllocRPacket(hanglobal, con, 80L);

	KPrintF("\nTEST: Sending an RPacket.\n");
	SDNSend(hanglobal, rp[0]);

	KPrintF("\nTEST:  Accept()ing data.\n");
	if( !SDNAccept(serglobal, &rp[2]) )
		goto cleanup;

	KPrintF("\nTEST: Freeing RPacket 0 and 2.\n");
	SDNFreeRPacket(hanglobal, rp[2]);
cleanup:
	SDNFreeRPacket(hanglobal, rp[0]);
#endif

	KPrintF("TEST: About to SDNHanTerm().\n", rc);
	SDNHanTerm(hanglobal);
	KPrintF("TEST: About to SDNSerTerm().\n", rc);
	SDNSerTerm(serglobal);
	KPrintF("TEST: About to CloseLibrary(DriverBase).\n");
	CloseLibrary(DriverBase);
}@


1.1
log
@Initial revision
@
text
@d26 1
d52 1
a52 1
	KPrintF("\nTEST: Now Freeing RPackets\n");
d59 20
@
