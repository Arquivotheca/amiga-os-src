head     1.5;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.5; strict;
comment  @ * @;


1.5
date     91.08.02.09.11.38;  author dlarson;  state Exp;
branches ;
next     1.4;

1.4
date     91.07.25.19.20.50;  author dlarson;  state Exp;
branches ;
next     1.3;

1.3
date     91.07.08.10.05.08;  author dlarson;  state Exp;
branches ;
next     1.2;

1.2
date     91.06.21.11.53.04;  author dlarson;  state Exp;
branches ;
next     1.1;

1.1
date     91.06.05.12.51.49;  author dlarson;  state Exp;
branches ;
next     ;


desc
@**  Bolt NET-UDP.library:
**  put.c -- Send RPackets.
@


1.5
log
@First Alpha?
@
text
@/*
**  Bolt NET-UDP.library:
**  put.c -- Send RPackets.
**
**  $Log:	put.c,v $
 * Revision 1.4  91/07/25  19:20:50  dlarson
 * working!
 *
 * Revision 1.3  91/07/08  10:05:08  dlarson
 * continuing development...
 *
 * Revision 1.2  91/06/21  11:53:04  dlarson
 * work in progress...
 *
 * Revision 1.1  91/06/05  12:51:49  dlarson
 * Initial revision
 *
**/


#include "bolt-udp.h"

int __saveds __asm SendPacket(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase);

/*
**  Internal supplement to SDNTermNode, called by RMS proc and SDNReply (on error).
**  sends ACTION_NETWORK_END packet on to the handler or server who needs to know...
**
**  Handler calls *can't* use this function!  Handlers aren't supposed to see
**  and ACTION_NETWORK_END.  I am considering changing the interface so that
**  Handlers also key of NETWORK_END (rather than relying on SDN_ERR), but in
**  the mean time...
*/
void __asm TermCon(register __a0 UDPGLOBAL tg, register __a1 APTR data,
		   register __a6 struct DrLibrary *DriverBase)

{
struct RPacket *rp;
struct RMSMsg *msg;

	BUG(("TermCon() called!\n"));
	if( (rp=SDNAllocRPacket(tg, NULL, 0L)) == NULL)
	{
		BUG(("\nTermCon can't AllocRPacket!\n"));
		return;
	}
	msg = AllocMem(sizeof(*msg), MEMF_PUBLIC);
	if(msg)
	{
		rp->Type = ACTION_NETWORK_END;
		rp->Arg1 = (LONG)data;
		rp->Arg2 = 0L;
		rp->DLen = 0L;

		msg->rms_Msg.mn_Node.ln_Type = NT_MESSAGE;
		msg->rms_Msg.mn_Length = sizeof(*msg);
		msg->rms_Msg.mn_ReplyPort = NULL;
		msg->rp = (struct UDPRPacket *)rp;

		PutMsg(tg->rmsport, msg);
	}else
	{
		BUG(("\nTermCon can't AllocMem!\n"));
	}
}

/****** NET-UDP.library/SDNReply **********************************
*
*   NAME
*	SDNReply -- Reply to a previously obtained message
*
*   SYNOPSIS
*	rc = SDNReply(drglobal, RP)
*	D0	      A0	A1
*
*	int SDNReply(APTR, struct RPacket *);
*
*   FUNCTION
*	Reply to a previously obtained message.
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer
*	RP		- Data to send
*
*   RESULT
*	rc		- SDN_ERR, SDN_OK
*
*   NOTES
*	This function is called only by the handler.
*
*	This function automatically does a SDNFreeRPacket() on the packet.
*
*	OBSOLETE:
*	If SDN_PEND is returned, the handler must not return the application's
*	packet until the driver signals that the write has completed.
*	When the write completes, a signal bit will be set and
*	SDNAccept() will be called.  SDNReply() will return a special
*	packet type indicating indicating the write has completed.
*
*   BUGS
*	Doesn't return an ACTION_NETWORK_END on error.
*
*   SEE ALSO
*	SDNAccept(), SDNReceive()
*
*****************************************************************************
*
*/
int LIBENT UDPSDNReply(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase)
{
int rc;

	BUG(("SERVER: SDNReply()... "));
	rc= SendPacket(tg, rp, DriverBase);
	if(rc == SDN_ERR)
	{
		TermCon(tg, UDPRP->con->data, DriverBase);
		SDNTermNode(tg, UDPRP->con->data);
	}
	SDNFreeRPacket(tg, rp);
	return(rc);
}

/****** NET-UDP.library/SDNSend *********************************************
*
*   NAME
*	SDNSend -- Send a packet to a specific remote node.
*
*   SYNOPSIS
*	rc = SDNSend(drglobal, rp)
*
*	int SDNSend(APTR, struct RPacket *);
*
*   FUNCTION
*	Send a packet to a specific remote node.
*
*	The RPacket will have been initailized for a specific node by the
*	SDNAllocRPacket() code.
*
*   INPUTS
*	drglobal	- Driver-specific global data pointer
*	rp		- RPacket to send.
*
*   RESULT
*	rc		- SDN_ERR, SDN_OK
*
*   NOTES
*	This function is called only by the handler.
*
*	The packet is allocated by the server code and freed by the driver
*	code when the I/O is complete.  Internally this routine is very
*	similar to SDNReply().
*
*	This function automatically does an SDNFreeRPacket() on the packet.
*
*	Will bring up a requester to retry or cancel if an ack isn't
*	received after 3 tries.
*
*	This function must be seperate from SDNReceive() because packet
*	replies aren't required to follow any sequence.
*
*	OBSOLETE:
*	If SDN_PEND is returned, the handler must not return the application's
*	packet until a the driver signals that the write has completed.
*	When the write completes, a signal bit will be set and SDNSend()
*	will be called.  SDNSend() will return a special packet type
*	indicating the write has completed.
*
*   BUGS
*	Uses gethostbyaddr() to get the hostname for any error requesters.
*	This is wrong if the user utilizes a host alias or internet number.
*	host aliases (will not be accounted for.
*
*   SEE ALSO
*	SDNAllocRPacket(), SDNReceive()
*
*****************************************************************************
*
*
*/


int LIBENT UDPSDNSend(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase)
{
struct hostent *remote; /* remote host information for error requester */
struct Library *IntuitionBase;
char *name;
/*
**  stupid blink says: Warning: Absolute reference to UNKNOWN!
*/
struct EasyStruct cont =
{
	sizeof (struct EasyStruct),
	0,
	"Bolt UDP Driver Request",
	"Not receiving acknowledgements from\nmachine '%s'.",
	"Retry|Cancel",
};


	BUG(("HANDLER: SDNSend()... "));
	for(;;)
	{
		if( (SendPacket(tg, rp, DriverBase)) == SDN_OK)
		{
			SDNFreeRPacket(tg, rp);
			return(SDN_OK);
		}
	/*
	**  Get name of remote host (unless we have it already) and put
	**  up a requester to retry or cancel.  If cancel, we return,
	**  otherwise we'll keep going.
	*/
		BUG(("About to gethostbyaddr()... "))
		remote = gethostbyaddr( (char *)&UDPRP->con->address,
			 sizeof(struct sockaddr_in), AF_INET);
		if(remote)
			name = remote->h_name;
		else
		{
			BUG(("gethostbyaddr() failed, inet_ntoa"));
			name = inet_ntoa(UDPRP->con->address.sin_addr.s_addr);
		}
		if(!name)
			name = "NoName :-(";
		BUG(("Opening intuition "));
		IntuitionBase=OpenLibrary("intuition.library", 37L);
		if(!IntuitionBase)
		{
			BUG(("No intuition "));
			SDNFreeRPacket(tg, rp);
		}
		BUG(("about to EasyRequest('%s').\n", name));
		if( !EasyRequestArgs(NULL, &cont, NULL, name) )
		{
			CloseLibrary(IntuitionBase);
			SDNTermNode(tg, UDPRP->con->data);
			SDNFreeRPacket(tg, rp);
			return(SDN_ERR);
		}
		CloseLibrary(IntuitionBase);
	}
}

/****i* NET-UDP.library/SendPacket ******************************************
*
*   NAME
*	SendPacket -- send a packet and get the acknowledgement.
*
*   SYNOPSIS
*
*   FUNCTION
*
*   INPUTS
*
*   RESULT
*
*   EXAMPLE
*
*   NOTES
*	Called only by SDNReply() and SDNSend().
*
*	We don't worry about wrapping sequence numbers, and that should be
*	ok as long as get.c doesn't worry about it.
*
*	The value for timeout and for the number of re-transmisions between
*	error requesters is contained in this routine.
*
*	But for the necessity of returning SDN_ERR if the packet doesn't
*	get there, we could queue the packets to be sent by a process.  Since
*	we have to return SDN_ERR, though, we accept the performance hit.
*
*   BUGS
*	Test version should not retry before bringing up a requester,
*	real version should retry thrice before bringing up requester.
*
*	SomeTime variable is slowed.
*
*	If we're waiting for an ack at the same time that the other
*	side is waiting for an ack, we've got a problem!
*
*   SEE ALSO
*
******************************************************************************
*
*  I can't figure out a way to cast arguments to inet_ntoa such that they
*  make an ANSI compiler happy and function correctly.  I put up with the
*  compiler warning.
*/

#define TO (UDPRP->con->address)
#define MAXRETRY 5
int __saveds __asm SendPacket(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase)
{
short retry;  /* number of times we've resent this packet */
fd_set mask;  /* mask for select to munge */
unsigned short sequence;
struct sockaddr_in from;
int fromlen, error, n;
/*
**  Causes stupid blink to say: Warning: Absolute reference to UNKNOWN!
*/
struct timeval SomeTime = {1L, 0L}; /* something to give select() */


	if( UDPRP->con == NULL )
	{
		BUG(("SendPacket() NULL con pointer!\n"));
		return(SDN_ERR);
	}
/*
**  If DataP != AllocP, we must copy the AllocP data over to the DataP
**  buffer so that we can atomically send the whole packet.
**
**  This will be hosed when we start paying attention to DLen -- we'll need
**  to change the spec to do so, however...
*/
	if(rp->DLen && rp->DataP != rp->AllocP)
	{
		memcpy(rp->AllocP, rp->DataP, rp->DLen);/*don't change DataP!*/
	}
	BUGP(("Alignment:\nrp=%ld(%ld) rp+1=%ld(%ld)\n\n",rp, ((unsigned long)rp)%4, rp+1, ((unsigned long)(((struct UDPRPacket *)rp)+1))%4));
	UDPRP->sequence = UDPRP->con->send_sequence;
	for(retry=0; retry<MAXRETRY; retry++)
	{
/*		BUG(("Clearing ack channel.\n"));
*		do
*			n= recvfrom(send, flag doNotBlock)
*		while(n)
*/
		BUG(("%lx is sending packet %ld to %s,%ld\n\t(con=%lx) Type=%ld DLen=%ld retry=%ld... ",
		     tg, UDPRP->con->send_sequence,
		     inet_ntoa(TO.sin_addr.s_addr), TO.sin_port,
		     UDPRP->con, rp->Type, rp->DLen, retry));
		n=sendto(tg->sock_send, (char *)RPBASE(rp), UDPRPSENDN(rp), 0L,
		         (struct sockaddr *)&TO, (int)sizeof(struct sockaddr_in));
		if(n != UDPRPSENDN(rp))
		{
			BUG(("SendError: %s.\n", strerror(errno) ));
			return(SDN_ERR);
		}
		mask = tg->send_mask;
		error = select(tg->sock_send+1, &mask, NULL, NULL, &SomeTime);
		if(error < 1)
		{
			if(error == -1)
			{
				BUG(("\nError on select(): %s\n", strerror(errno)));
				continue;  /* we timed out */
			} else
			{
				BUG(("Timed out on select().\n"));
				continue;  /* we timed out */
			}
		}
		fromlen = sizeof(from);
		n = recvfrom(tg->sock_send, (char *)&sequence,
			sizeof(sequence), 0L, (struct sockaddr *)&from,
			&fromlen);
		if(n!=sizeof(sequence))
		{
			BUG(("Error in recv ack (n=%ld): %s.\n", n,
				strerror(errno) ));
			continue;
		}
		BUG(("ack #%ld... ", sequence));
		if(from.sin_addr.s_addr == TO.sin_addr.s_addr &&
		   sequence == UDPRP->con->send_sequence)
		{
			BUGP(("packet #%ld succesfully sent!\n", UDPRP->sequence));
			UDPRP->con->send_sequence++;
			return(SDN_OK);
		}
		BUG(("acknowledgement mismatch - %ld.\n", sequence));
	}
	return(SDN_ERR);
}

@


1.4
log
@working!
@
text
@d6 3
d22 2
a23 1
int __saveds LIBENT SendPacket(register __a0 UDPGLOBAL tg,
d25 43
a67 1
			register __a2 struct DrLibrary *DriverBase);
d119 5
d125 1
a125 5
	if(rc == SDN_ERR)
		/* return an ACTION_NETWORK_END; */
		return(SDN_ERR);
	else
		return(SDN_OK);
d242 2
a244 1
			CloseLibrary(IntuitionBase);
d299 1
a299 1
int __saveds LIBENT SendPacket(register __a0 UDPGLOBAL tg,
d305 1
a305 1
short sequence;
d328 1
a328 4
		memcpy(rp->AllocP, rp->DataP, rp->DLen);
/*
big mistake (handler/server will free our buffer!):  rp->DataP=rp->AllocP;
*/
d330 1
a330 2
	BUG(("Alignment:\nrp=%ld(%ld) rp+1=%ld(%ld)\n\n",
	  rp, ((unsigned long)rp)%4, rp+1, ((unsigned long)(((struct UDPRPacket *)rp)+1))%4));
d334 5
d386 1
@


1.3
log
@continuing development...
@
text
@d6 3
a55 1
*
d71 1
a71 1
	BUG(("SERVER: SDNReply()..."));
d138 12
d154 2
a155 2
	"Bolt UDP driver request",
	"Machine '%s' not responding",
a158 5
int LIBENT UDPSDNSend(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase)
{
struct hostent *remote; /* remote host information for error requester */
d160 1
a160 1
	remote = NULL;
d163 1
a163 1
		if(SendPacket(tg, rp, DriverBase)==SDN_OK)
d173 15
a187 2
		BUG(("About to gethostbyaddr()... "));
		if(!remote)
d189 2
a190 2
			remote = gethostbyaddr( (char *)&((struct UDPRPacket *)rp)->con->address,
				 sizeof(struct sockaddr_in), AF_INET);
d192 2
a193 9
		if(remote)
		{
			BUG(("about to EasyRequest('%s').\n", remote->h_name));
			if( !EasyRequestArgs(NULL, &cont, NULL, remote->h_name) )
			{
				SDNFreeRPacket(tg, rp);
				return(SDN_ERR);
			}
		}else
a194 1
			BUG(("Can't EasyRequest -- SDN_ERR.\n"));
d196 1
d199 1
d227 4
a231 5
*	Psuedo-code only.
*
*	Currently sends only the RPacket, not the data pointed to by the
*	RPacket.  (Get currently is set up to receive only the RPacket.)
*
d237 3
d249 2
a250 3
#define MAXRETRY 1
struct timeval SomeTime = {5L, 0L}; /* something to give select() */

d253 1
a253 1
			register __a2 struct DrLibrary *DriverBase)
d258 1
a258 1
struct sockaddr_in from, *to;
d260 5
d266 1
a266 1
	if( ((struct UDPRPacket *)rp)->con == NULL )
d271 17
a287 2
	to = &((struct UDPRPacket *)rp)->con->address; /* cache this pointer */
((struct UDPRPacket *)rp)->sequence = ((struct UDPRPacket *)rp)->con->sequence;
d290 7
a296 7
		BUG(("Sending packet %ld to %s,%ld (con=%lx)... ",
		     ((struct UDPRPacket *)rp)->sequence,
		     inet_ntoa(to->sin_addr.s_addr), to->sin_port,
		     ((struct UDPRPacket *)rp)->con));
		if( (sendto(tg->sock_send, (char *)RPBASE(rp),
			UDPRPSENDN(rp), 0L, (struct sockaddr *)to,
			(int)sizeof(struct sockaddr_in))) == -1)
d298 1
a298 1
			BUG(( "SendError: %s.\n", strerror(errno) ));
d303 1
a303 1
		if(error == 0)
d305 9
a313 7
			BUG(("Timed out on select().\n"));
			continue;  /* we timed out */
		}
		if(error == -1)
		{
			BUG(("\nError on select(): %s\n", strerror(errno)));
			continue;  /* we timed out */
d326 2
a327 2
		if(from.sin_addr.s_addr == to->sin_addr.s_addr &&
		   sequence == ((struct UDPRPacket *)rp)->con->sequence)
d329 2
a330 2
			((struct UDPRPacket *)rp)->con->sequence++;
			BUG(("packet succesfully sent!\n"));
a335 26
#if 0
	if(retry == MAXRETRY)
		return(SDN_ERR);
	((struct UDPRPacket *)rp)->con->sequence++;
	for(retry=0; retry<1; retry++)
	{
		sendto(tg->sock_send, (char *)rp->DataP, rp->DLen, 0L,
			(struct sockaddr *)&((struct UDPRPacket *)rp)->con->address,
			(int)sizeof(struct sockaddr_in));
		mask = tg->recv_mask;
		if( (select(tg->sock_send, &mask, NULL, NULL, &SomeTime)) == 0)
		{
			continue;  /* we timed out */
		}
		fromlen = sizeof(struct sockaddr_in);
		recvfrom(tg->sock_send, (char *)&sequence, sizeof(sequence), 0L,
			(struct sockaddr *)&from, &fromlen);
		if(from.sin_addr.s_addr != to->sin_addr.s_addr ||
		   sequence != ((struct UDPRPacket *)rp)->con->sequence)
			continue;
	}
	if(retry == MAXRETRY)
		return(SDN_ERR);
	((struct UDPRPacket *)rp)->con->sequence++;
	return(SDN_OK);
#endif
@


1.2
log
@work in progress...
@
text
@d6 3
d15 4
a18 2
#include "net-udp.h"
int SendPacket(UDPGLOBAL tg, struct RPacket *rp, struct DrLibrary *DriverBase);
d67 6
a72 1
	if(SendPacket(tg, rp, DriverBase)==SDN_ERR)
d136 1
a136 1
const struct EasyStruct cont =
d141 1
a141 1
	"%s not responding",
a149 1
short retry;
d164 1
d170 9
a178 1
		if( !EasyRequestArgs(NULL, &cont, NULL, remote->h_name) )
d180 1
d205 6
d220 2
d226 3
d231 6
a236 1
int SendPacket(UDPGLOBAL tg, struct RPacket *rp, struct DrLibrary *DriverBase)
d238 14
a251 1
/*	for(retry=0; retry<1; retry++)
d253 40
a292 17
		sendto(tg->sock_send, (char *)rp, sizeof(struct UDPRPacket),
			&((struct UDPRPacket *)rp)->con->address, sizeof(struct sockaddr_in));
		selectwait();
		recvfrom(tg->sock_send, );
		if(from->sin_addr.s_addr == to->sin_addr.s_addr &&
		   sequence == rp->con->sequence)
		{
			sendto(tg->sock_send, (char *)rp->DataP, rp->DLen,
				rp->con->address, sizeof(*rp->con->address));
			selectwait();
			recvfrom(tg->sock_send
			if(from->sin_addr.s_addr == to->sin_addr.s_addr &&
			   sequence == rp->con->sequence)
			{
				rp->con->sequence++; \* ok to wrap if ok with get.c *\
				return(SDN_OK);
			}
d294 1
a295 1
*/
d297 26
@


1.1
log
@Initial revision
@
text
@d6 3
d13 1
d50 1
d62 3
a64 2
	if(SendPacket(dr, rp)==SDN_ERR)
		send an ACTION_NETWORK_END;
d104 3
d120 1
a120 1
*	SDNAllocRPacket()
d126 1
a126 5
int LIBENT UDPSDNSend(register __a0 UDPGLOBAL tg,
			register __a1 struct RPacket *rp,
			register __a6 struct DrLibrary *DriverBase)
{
const struct EasyStruct continue =
d134 7
a140 1
hostent *remote; /* remote host information needed only for error requester */
d145 1
a145 1
		if(SendPacket()==SDN_OK)
d147 1
a147 1
			SDNFreeRPacket(rp);
d157 1
a157 1
			remote = gethostbyaddr(rp->con->address,
d160 1
a160 1
		if( !EasyRequestArgs(NULL, &continue, NULL, remote->h_name) )
d162 1
a162 1
			SDNFreeRPacket(rp);
d192 2
a193 1
*	Test version should not retry, real version should retry thrice.
d203 1
a203 1
	for(retry=0; retry<1; retry++)
d205 2
a206 2
		sendto(tg->sock_send, (char *)rp, sizeof(*rp),
			rp->con->address, sizeof(*rp->con->address));
d208 3
a210 2
		recvfrom(tg->sock_send,
		if(from == to && sequence == rp->con->sequence)
d216 2
a217 1
			if(from == to && sequence == rp->con->sequence+1)
d219 1
a219 1
				rp->con->sequence++; /* ok to wrap if ok with get.c */
d224 1
@
