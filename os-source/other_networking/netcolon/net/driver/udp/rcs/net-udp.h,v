head     1.1;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.1; strict;
comment  @ * @;


1.1
date     91.06.05.12.50.32;  author dlarson;  state Exp;
branches ;
next     ;


desc
@common header for Bolt UDP driver
@



1.1
log
@Initial revision
@
text
@/*
**  Bolt NET-UDP.library:
**  net-udp.h -- common header for all NET-UDP.library source files.
**
**      $Log:	net-udp.h,v $
*/

#ifndef D_UDP_H
#define D_UDP_H


#define NETBUFSIZE  8192
#define MAXPORT       32
#define MAXNAME       40

#include "sdn_pragmas.h"
#include "bolt.h"

/*  Stuff we don't like about the socket library includes:  */
#ifdef DOS_TRUE
#undef DOS_TRUE
#undef DOS_FALSE
#endif
#ifdef min
#undef min
#endif

/*  Socket library includes:  */
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ss/socket.h>


/*
**  DEFPACKETS are allocated when the driver is initialized and are
**  continually re-used.  If one of these packets is in use, it is
**  PACKET_PERM, else it is PACKET_FREE.  If more than DEFPACKETS are
**  needed, one is allocated as PACKET_TEMP and is actually freed rather
**  than re-used when SDNFreeRPacket() is called.
*/
#define DEFPACKETS 10
#define PACKET_PERM 0
#define PACKET_FREE 1
#define PACKET_TEMP 2


/*
**  A UDPRPacket is an RPacket along with the extra information needed
**  by the driver to keep track of Rpackets and where they are going.
*/
struct UDPRPacket {
	struct RPacket rp;
	struct UDPRPacket *next;
	struct UDPCon *con;
	long   class;  /* PACKET_PERM, _FREE or _TEMP (see above) */
	unsigned short  sequence;  /* needed for the Reliable Message System */
	struct sockaddr_in reply;  /* address to reply to */
};


/*
**  Connection structure.  For datagram (as opposed to connection-oriented)
**  drivers, this isn't really information about a connection but about
**  a machine (node).
**
**  We need to keep a packet sequence number for each node for use by the
**  reliable message service.
**
**  When SDNSetConData() is called, we need to add a pointer the caller
**  understands.  When SDNGetConData() is called, we'll search the list of
**  connections for the address in the RPacket and we'll return the caller
**  understood pointer (if any) which corresponds to the address.
**
**  An Exec (doubly-linked) list seemed like overkill, so we just use a
**  singly-linked list.  It might be a good optimization to add a priority
**  variable and change to an Exec list with Enqueue() to keep the list
**  sorted by frequency of use (nodes are currently always added to the
**  head).
*/
typedef struct UDPCon
{
	struct sockaddr_in address;	/* address "connected" to */
	unsigned short  sequence;	/* packet sequence number */
	void   *data;		/* generic data pointer for driver users */
	struct UDPCon *next;	/* next "connection" in the list  */
} UDPCon;


/*
**  We fill in this struct when SDNSerInit() or SDNHanInit() is called.
**  We use it to keep things straight between the handler and server.
*/
typedef struct
{
	int signalbit;	/*  twidle this when to get someone's attention  */
	int sock_recv;	/*  socket to listen to */
	int sock_send;	/*  socket to send on (and to get ACKs on) */
	fd_set mask;	/*  select() mask for sock_recv  */
	int serverport; /*  well-known port number for server  */
	int tg_errno;	/*  the socket library insists on having one  */
	struct UDPCon *con;	/*  list of connection/node identifiers  */
	struct UDPRPacket *tpack;	/*  Temporary Rpackets  */
	struct UDPRPacket *ppack;	/*  Permanent Rpackets  */
	struct Library *tg_SysBase;
	struct Library *tg_SSBase;
	struct DrLibrary *DriverBase;
} *UDPGLOBAL;


/*
**  A standard library structure for our driver:
*/
struct DrLibrary
{
        struct       Library ml_Lib;
        ULONG        ml_SegList;
        ULONG        ml_Flags;
        APTR         ml_ExecBase;	/* pointer to exec base */
        LONG         ml_Data;		/* Global data */
};


#define SysBase (tg->tg_SysBase)
#define errno   (tg->tg_errno)
#define SSBase	(tg->tg_SSBase)
#define ABSEXECBASE (*(struct Library **)4)
#define LIBENT __asm

#include "net-udp_protos.h"

#endif /* D_UDP_H */
@
