head     1.1;
branch   ;
access   ;
symbols  ;
locks    dlarson:1.1; strict;
comment  @ * @;


1.1
date     91.07.08.10.06.16;  author dlarson;  state Exp;
branches ;
next     ;


desc
@y
continuing development...
@



1.1
log
@Initial revision
@
text
@#include <exec/exec.h>
#include <string.h>
#include <proto/exec.h>
#include <bolt.h>

struct library *DriverBase;

main(int argc, char **argv)
{
int rc, x;
struct RPacket *rp;
APTR hanglobal, con;
ULONG hanmask=0L;
char string[80];

	if(argc != 2)
	{
		printf("usage: %s libraryname\n", argv[0]);
		return(10);
	}
	KPrintF("\n\n\ntest-han: Bolt driver functions test.\n");
	KPrintF("Testing %s.\n", argv[1]);
	DriverBase = OpenLibrary(argv[1], 0L);
	if( !DriverBase )
	{
		KPrintF("TEST-HAN: Unable to open %s\n", argv[1], 0L);
		return(20);
	}
	KPrintF("\nTEST-HAN: Opened %s, about to SDNHanInit().\n", argv[1]);

	rc = SDNHanInit(&hanglobal, &hanmask, NULL);
	KPrintF("\nTEST-HAN: SDNHanInit() returned %ld, now InitNode()ing.\n", rc);

	if ( (SDNInitNode(hanglobal, "sprite", &con)) != SDN_OK)
		goto cleanup;

	for(x=0; x<1; x++)
	{
		KPrintF("\nTEST-HAN: Allocing RPacket... ");
		rp = SDNAllocRPacket(hanglobal, con, 80L);

		sprintf(string, "this is test packet %ld", x);
		memcpy(rp->DataP, string, strlen(string));

		KPrintF("TEST-HAN: Sending an RPacket.\n");
		SDNSend(hanglobal, rp);

		/* SDNFreeRPacket(hanglobal, rp); */
	}

cleanup:
	KPrintF("TEST-HAN: About to SDNHanTerm().\n", rc);
	SDNHanTerm(hanglobal);
	KPrintF("TEST-HAN: About to CloseLibrary(DriverBase).\n");
	CloseLibrary(DriverBase);
}@
