head     1.22;
branch   ;
access   ;
symbols  r37-9:1.22 v37r4:1.19 Distillery:1.19;
locks    dlarson:1.22; strict;
comment  @ * @;


1.22
date     91.06.07.13.16.22;  author dlarson;  state Exp;
branches ;
next     1.21;

1.21
date     91.05.15.11.34.11;  author dlarson;  state Stab;
branches ;
next     1.20;

1.20
date     91.05.11.07.38.37;  author dlarson;  state Exp;
branches ;
next     1.19;

1.19
date     91.01.17.01.39.52;  author Doug;  state Exp;
branches ;
next     1.18;

1.18
date     91.01.17.01.10.23;  author Doug;  state Exp;
branches ;
next     1.17;

1.17
date     91.01.15.03.03.47;  author J_Toebes;  state Exp;
branches ;
next     1.16;

1.16
date     91.01.11.00.44.11;  author Doug;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.06.20.52.12;  author Doug;  state Exp;
branches ;
next     1.14;

1.14
date     90.12.30.15.44.13;  author Doug;  state Exp;
branches ;
next     1.13;

1.13
date     90.12.13.03.21.30;  author Doug;  state Exp;
branches ;
next     1.12;

1.12
date     90.12.03.22.12.39;  author Doug;  state Exp;
branches ;
next     1.11;

1.11
date     90.11.29.01.42.58;  author Doug;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.28.04.29.41;  author Doug;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.25.15.50.26;  author J_Toebes;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.20.01.08.07;  author Doug;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.19.02.04.05;  author Doug;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.18.00.02.44;  author Doug;  state Exp;
branches ;
next     1.5;

1.5
date     90.10.24.23.33.43;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.10.18.00.18.08;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.16.00.53.45;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.23.57.31;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.41.14;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@handler device support initialization routines
@


1.22
log
@Added include of bumprev info.
@
text
@/* Device.c - Device support routines */
/*
**      $Log:	device.c,v $
 * Revision 1.21  91/05/15  11:34:11  dlarson
 * spaces->tabs, etc.
 *
 * Revision 1.18  91/05/11  07:36:52  dlarson
 * We now send an ACTION_NETWORK_SNAME after we SDNInit().
 * Changed ACTION_NETWORK_INIT to ACTION_NETWORK_SNAME.
 *
 * Revision 1.17  91/03/09  20:59:27  J_Toebes
 * Correct code for aging out dead nodes
 *
 * Revision 1.16  91/01/17  01:12:02  Doug
 * Handle rebooting
 *
 * Revision 1.15  91/01/15  02:54:19  Doug
 * Put in code to kill outstanding hpackets when connection terminates
 * check for an actual hp_Pkt in a couple of places
 *
**
*/

#include "handler.h"
#include "network-handler_rev.h"

#if TESTING
#define MYNAME "\7Testnet"
#define DEVNAME "\4TEST"
#define CONFIG  "DEVS:networks/testhan-config" VERSTAG
#else
#define MYNAME "\3Net"
#define DEVNAME "\3NET"
#define CONFIG "DEVS:networks/handler-config" VERSTAG
#endif

#define isWHITE(x) ((x) == ' ' || (x) == '\t')

void ParseConfig(global)
GLOBAL global;
{
	BPTR fh;
	char libname[24];
	char nodename[RNAMELEN+2];
	char *s, *t;
	char buf[101];
	int len, i, j;
	DRIVER *driver = NULL;
	struct Library *DriverBase;

	fh = Open(CONFIG, MODE_OLDFILE);
	if (fh == NULL)
	{
		return;
	}

	len = 0;
	for(;;)
	{
		i = Read(fh, buf+len, 100-len);
		if (i < 0) break;
		len += i;
		if (len == 0) break;
		for (i = 0; i < 100; i++)
			if (buf[i] == '\n')
				break;
		/* Null terminate the buffer */
		buf[i] = 0;
		if(!memcmp(buf, "AUTO", 4))
		{
			if(driver == NULL)
			{
				BUGR("Invalid AUTO specification")
			}
			else
			{
				s=buf+4;
				while(*s != '\0')
				{
					/* Skip white space */
					while(isWHITE(*s)) s++;

					/* Find out how long the name is */
					for(j=0; s[j] && !isWHITE(s[j]); j++);

					/* Make a null-terminated BSTR out of the name */
					memcpy(nodename+1, s, j);
					nodename[0] = j;
					nodename[j+1] = '\0';

					/* Add the node */
					AddNode(global, nodename);

					/* Increment 's' past the name */
					s += j;
				}
			}
		}
		else if (buf[0] != '#')
		{
			/* We have one to configure */
			/* Parse out the device name and open the library for it */
			/* Then we call the device dependent */
			driver = (DRIVER *)DosAllocMem(global, sizeof(DRIVER));
			if (driver == NULL) break;
			memcpy(libname, "NET-", 4);
			t = libname+4;
			s = buf;
			while(*s && !isWHITE(*s))
				*t++ = *s++;
			strcpy(t, ".library");
			OBUG(("Config to open library %s\n", libname));
			if (!global->sigbits)
			{
				/* We should check to see that we actually get the signal bit and	*/
				/* do something sensible, but for now let it slide						*/
				global->sigbits = 1L << AllocSignal(-1);
			}
			driver->sigmask = global->sigbits;
			DriverBase = driver->libbase = OpenLibrary(libname, 0);
			if (driver->libbase == NULL ||
				 SDNHanInit(&driver->drglobal, &driver->sigmask, s) != SDN_OK)
			{
				BUGR("Cannot init requested library");
				DosFreeMem((char *)driver);
			}
			else
			{
				OBUG(("Library initialized\n"));
				/* Now eliminate their signal bits from what we gave them	*/
				global->sigbits &= ~driver->sigmask;
				global->waitbits |= driver->sigmask;

				/* Add them to the end of the chain because we are using this list  */
				/* as a priority order of drivers to be evaluated.						*/
				driver->next = NULL;
				if (global->drivers == NULL)
					global->drivers = driver;
				else
				{
					DRIVER *dp;
					for (dp = global->drivers; dp->next != NULL; dp = dp->next);
					dp->next = driver;
				}
			}
		}
		memcpy(buf, buf+i+1, 101-i);
		len -= i+1;
	}
	Close(fh);
}


int
InitDevice(global)
GLOBAL global;
{
	struct DosList *dl;
	struct DosInfo *info;
	struct RootNode *root;
	int i;

	BUGP("InitDevice: Enter")
	OBUG(("InitDevice: Enter\n"));

	if(!(global->n.devport=CreatePort(NULL,0)))
	{
		BUG(("***ERROR: Can't CreatePort\n"));
		return(0);
	}

	SetTaskPri(global->n.self, 5);

	global->work = DosAllocMem(global, 512);

	global->prmhpkt = (HPACKET *)DosAllocMem(global,
										PERMHPACK*sizeof(struct HandlerPacket));

	if(!global->work || !global->prmhpkt)
	{
		BUGR("No memory!")
		return(1);
	}

	/* Initialize the permanent hpkts */
	for(i=0; i < PERMHPACK-1; i++)
		global->prmhpkt[i].hp_Next = global->prmhpkt+(i+1);

	global->prmhpkt[PERMHPACK-1].hp_Next = global->prmhpkt;

	BUGP("Init NetNode")

	/* Initialize NetNode struct for ourselves - at root of netnodes */
	global->netchain.next = NULL;
	global->netchain.status = NODE_UP;
	global->netchain.RootLock.incarnation = 0;
	global->netchain.bufsize = HAN_NETBUFSIZE;
	global->netchain.name = DosAllocMem(global, RNAMELEN+2);
	MBSTR(MYNAME, global->netchain.name);
	global->netchain.ioptr = NULL;
	global->netchain.RootLock.NetNode = &global->netchain;
	global->netchain.RootLock.RPtr = (RNPTR)1;  /* Special value */

	global->numnodes = global->upnodes = 1;

	dl = (struct DosList *)DosAllocMem(global,
		sizeof(struct DosList)+strlen(DEVNAME)+1);
	strcpy((char *)(dl+1), DEVNAME);
	dl->dol_Type = DLT_DEVICE;
	dl->dol_Task = (struct MsgPort *)global->n.port;
	dl->dol_Name = MKBADDR((char *)(dl+1));

	/* Install a device node for our device */
	Forbid();

	root  = (struct RootNode *)DOSBase->dl_Root;
	info  = (struct DosInfo  *)BADDR(root->rn_Info);
	dl->dol_Next = info->di_DevInfo;
	info->di_DevInfo = MKBADDR(dl);

	Permit();


	/* Read the user config file and initialize devices */
	ParseConfig(global);

	/* THIS ISN'T THE RIGHT WAY TO DO THIS.... it should be device-dependent */
	global->n.NetBufSize = HAN_NETBUFSIZE;

#if 0
	global->devslock = (struct FileLock *)BADDR(Lock("DEVS:NETWORKS", SHARED_LOCK));
#endif

	BUGP("InitDevice: Exit")

	return(0);
}

struct NetNode *
AddNode(global, name)
GLOBAL global;
char *name;
{
	 struct NetNode *node;
	 DRIVER *dp;
	 struct Library *DriverBase;
	 HPACKET *hpkt;
	 struct RPacket *RP;

	OBUGBSTR("AddNode: Adding ", name);

	/* First see if the node's name is unique */
	for (node = global->netchain.next; node; node = node->next)
	{
		if(!stricmp(node->name, name))
			return(node);
	}

	OBUG(("AddNode: Node not in chain\n"));
	/* Node is new, add it */
	if (!(node=(struct NetNode *)
		DosAllocMem(global,(long)sizeof(struct NetNode)+strlen(name)+2)))
	{
		BUG(("***AddNode: Out of memory!\n"));
		return(NULL);
	}
	node->name = (char *)(node+1);
	strcpy(node->name, name);
	node->devname[0] = '\0';
	node->RootLock.incarnation = 0;
	node->bufsize = HAN_NETBUFSIZE;  /* Should be set by driver, really */
	global->numnodes++;

	/* Set up dummy lock for lock templating */
	node->RootLock.NetNode = node;
	node->RootLock.RPtr = 0;
	node->status = NODE_DEAD;

	/* Loop through all the drivers, see if any recognize this name */
	for(dp=global->drivers;
		 dp;
		 dp=dp->next)
	{
		DriverBase = dp->libbase;
		if(SDNInitNode(dp->drglobal, name+1, &node->ioptr) != SDN_ERR) break;
	}

	if(dp)
	{
		/* Chain the node into the list of network nodes */
		OBUG(("AddNode: Node successfully initialized\n"))
		node->next = global->netchain.next;
		global->netchain.next = node;

		node->status = NODE_UP;
		node->driver = dp;

		/* Tell the remote side what we are calling this node */
		hpkt = GetHPacket(global);
		if(!hpkt || !(hpkt->hp_RP = RP = AllocRPacket(node, node->name[0])))
			return(NULL);
		RP->Type = ACTION_NETWORK_SNAME;
		RP->DLen = node->name[0];
		memcpy(RP->DataP, node->name+1, RP->DLen);
		RP->handle = hpkt;
		hpkt->hp_NNode = node;
		hpkt->hp_Driver = node->driver;
		hpkt->hp_Pkt = NULL;
		hpkt->hp_NPFlags = 0;
		RemotePacket(global, hpkt);
	}
	else
	{
		OBUG(("AddNode: Can't InitNode '%s'\n", name))
		DosFreeMem((void *)node);
		return(NULL);
	}
	return(node);
}

int
TermDevice(global)
GLOBAL global;
{
	struct DosList *dl, *ldl;
	struct DosInfo *info;
	struct RootNode *root;
	DRIVER *driver, *ndriver;
	struct Library *DriverBase;

	Forbid();

	root  = (struct RootNode *)DOSBase->dl_Root;
	info  = (struct DosInfo  *)BADDR(root->rn_Info);
	for(ldl=NULL, dl= (struct DosList  *)BADDR(info->di_DevInfo);
		 dl; ldl=dl, dl=(struct DosList *)BADDR(dl->dol_Next))
	{
		if(dl->dol_Type == DLT_DEVICE &&
			dl->dol_Task == (struct MsgPort *)global->n.port) break;
	}
	if(dl)
	{
		if(ldl) ldl->dol_Next = dl->dol_Next;
		else	 info->di_DevInfo = MKBADDR(dl->dol_Next);
	}

	Permit();

	if(dl) DosFreeMem((char *)dl);

	for(driver=global->drivers; driver; driver=ndriver)
	{
		DriverBase = driver->libbase;
		SDNHanTerm(driver->drglobal);
		/*CloseLibrary(driver->libbase);*/
		ndriver=driver->next;
		DosFreeMem((char *)driver);
	}
	global->drivers = NULL;

	return(0);
}
@


1.21
log
@spaces->tabs, etc.
@
text
@d3 4
a6 5
**      $Filename:  $
**      $Author: dlarson $
**      $Revision: 1.18 $
**      $Date: 91/05/11 07:36:52 $
**      $Log:	devio.c,v $
d25 1
d30 1
a30 1
#define CONFIG  "DEVS:networks/testhan-config" VERSTRING
d34 1
a34 1
#define CONFIG "DEVS:networks/handler-config" VERSTRING
@


1.20
log
@Changed ACTION_NETWORK_INIT to ACTION_NETWORK_SNAME.
@
text
@d2 22
a24 8
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d42 109
a150 109
   BPTR fh;
   char libname[24];
   char nodename[RNAMELEN+2];
   char *s, *t;
   char buf[101];
   int len, i, j;
   DRIVER *driver = NULL;
   struct Library *DriverBase;

   fh = Open(CONFIG, MODE_OLDFILE);
   if (fh == NULL)
   {
      return;
   }

   len = 0;
   for(;;)
   {
      i = Read(fh, buf+len, 100-len);
      if (i < 0) break;
      len += i;
      if (len == 0) break;
      for (i = 0; i < 100; i++)
         if (buf[i] == '\n')
            break;
      /* Null terminate the buffer */
      buf[i] = 0;
      if(!memcmp(buf, "AUTO", 4))
      {
         if(driver == NULL)
         {
            BUGR("Invalid AUTO specification")
         }
         else
         {
            s=buf+4;
            while(*s != '\0')
            {
               /* Skip white space */
               while(isWHITE(*s)) s++;

               /* Find out how long the name is */
               for(j=0; s[j] && !isWHITE(s[j]); j++);

               /* Make a null-terminated BSTR out of the name */
               memcpy(nodename+1, s, j);
               nodename[0] = j;
               nodename[j+1] = '\0';

               /* Add the node */
               AddNode(global, nodename);

               /* Increment 's' past the name */
               s += j;
            }
         }
      }
      else if (buf[0] != '#')
      {
         /* We have one to configure */
         /* Parse out the device name and open the library for it */
         /* Then we call the device dependent */
         driver = (DRIVER *)DosAllocMem(global, sizeof(DRIVER));
         if (driver == NULL) break;         
         memcpy(libname, "NET-", 4);
         t = libname+4;
         s = buf;
         while(*s && !isWHITE(*s))
            *t++ = *s++;
         strcpy(t, ".library");
         OBUG(("Config to open library %s\n", libname));
         if (!global->sigbits)
         {
            /* We should check to see that we actually get the signal bit and   */
            /* do something sensible, but for now let it slide                  */
            global->sigbits = 1L << AllocSignal(-1);
         }
         driver->sigmask = global->sigbits;
         DriverBase = driver->libbase = OpenLibrary(libname, 0);
         if (driver->libbase == NULL ||
             SDNHanInit(&driver->drglobal, &driver->sigmask, s) != SDN_OK)
         {
            BUGR("Cannot init requested library");
            DosFreeMem((char *)driver);
         }
         else
         {
            OBUG(("Library initialized\n"));
            /* Now eliminate their signal bits from what we gave them   */
            global->sigbits &= ~driver->sigmask;
            global->waitbits |= driver->sigmask;
            
            /* Add them to the end of the chain because we are using this list  */
            /* as a priority order of drivers to be evaluated.                  */
            driver->next = NULL;
            if (global->drivers == NULL)
               global->drivers = driver;
            else
            {
               DRIVER *dp;
               for (dp = global->drivers; dp->next != NULL; dp = dp->next);
               dp->next = driver;
            }
         }
      }
      memcpy(buf, buf+i+1, 101-i);
      len -= i+1;
   }
   Close(fh);
d158 4
a161 4
   struct DosList *dl;
   struct DosInfo *info;
   struct RootNode *root;
   int i;
d163 63
a225 63
   BUGP("InitDevice: Enter")
   OBUG(("InitDevice: Enter\n"));

   if(!(global->n.devport=CreatePort(NULL,0))) 
   {
      BUG(("***ERROR: Can't CreatePort\n"));
      return(0);
   }

   SetTaskPri(global->n.self, 5);

   global->work = DosAllocMem(global, 512);

   global->prmhpkt = (HPACKET *)DosAllocMem(global, 
                              PERMHPACK*sizeof(struct HandlerPacket));

   if(!global->work || !global->prmhpkt)
   {
      BUGR("No memory!")
      return(1);
   }

   /* Initialize the permanent hpkts */
   for(i=0; i < PERMHPACK-1; i++)
      global->prmhpkt[i].hp_Next = global->prmhpkt+(i+1);

   global->prmhpkt[PERMHPACK-1].hp_Next = global->prmhpkt;

   BUGP("Init NetNode")

   /* Initialize NetNode struct for ourselves - at root of netnodes */
   global->netchain.next = NULL;
   global->netchain.status = NODE_UP;
   global->netchain.RootLock.incarnation = 0;
   global->netchain.bufsize = HAN_NETBUFSIZE;
   global->netchain.name = DosAllocMem(global, RNAMELEN+2);
   MBSTR(MYNAME, global->netchain.name);
   global->netchain.ioptr = NULL;
   global->netchain.RootLock.NetNode = &global->netchain;
   global->netchain.RootLock.RPtr = (RNPTR)1;  /* Special value */

   global->numnodes = global->upnodes = 1;

   dl = (struct DosList *)DosAllocMem(global, 
      sizeof(struct DosList)+strlen(DEVNAME)+1);
   strcpy((char *)(dl+1), DEVNAME);
   dl->dol_Type = DLT_DEVICE;
   dl->dol_Task = (struct MsgPort *)global->n.port;
   dl->dol_Name = MKBADDR((char *)(dl+1));

   /* Install a device node for our device */
   Forbid();

   root  = (struct RootNode *)DOSBase->dl_Root;
   info  = (struct DosInfo  *)BADDR(root->rn_Info);
   dl->dol_Next = info->di_DevInfo;
   info->di_DevInfo = MKBADDR(dl);

   Permit();


   /* Read the user config file and initialize devices */
   ParseConfig(global);
d227 2
a228 2
   /* THIS ISN'T THE RIGHT WAY TO DO THIS.... it should be device-dependent */
   global->n.NetBufSize = HAN_NETBUFSIZE;
d231 1
a231 1
   global->devslock = (struct FileLock *)BADDR(Lock("DEVS:NETWORKS", SHARED_LOCK));
d234 1
a234 1
   BUGP("InitDevice: Exit")
d236 1
a236 1
   return(0);
d244 75
a318 75
    struct NetNode *node;
    DRIVER *dp;
    struct Library *DriverBase;
    HPACKET *hpkt;
    struct RPacket *RP;

   OBUGBSTR("AddNode: Adding ", name);

   /* First see if the node's name is unique */
   for (node = global->netchain.next; node; node = node->next) 
   {
      if(!stricmp(node->name, name)) 
         return(node);
   }

   OBUG(("AddNode: Node not in chain\n"));
   /* Node is new, add it */
   if (!(node=(struct NetNode *)
      DosAllocMem(global,(long)sizeof(struct NetNode)+strlen(name)+2)))
   {
      BUG(("***AddNode: Out of memory!\n"));
      return(NULL);
   }
   node->name = (char *)(node+1);
   strcpy(node->name, name);
   node->devname[0] = '\0';
   node->RootLock.incarnation = 0;
   node->bufsize = HAN_NETBUFSIZE;  /* Should be set by driver, really */
   global->numnodes++;

   /* Set up dummy lock for lock templating */
   node->RootLock.NetNode = node;
   node->RootLock.RPtr = 0;
   node->status = NODE_DEAD;

   /* Loop through all the drivers, see if any recognize this name */
   for(dp=global->drivers; 
       dp;
       dp=dp->next)
   {
      DriverBase = dp->libbase;
      if(SDNInitNode(dp->drglobal, name+1, &node->ioptr) != SDN_ERR) break;
   }

   if(dp)
   {
      /* Chain the node into the list of network nodes */
      OBUG(("AddNode: Node successfully initialized\n"))
      node->next = global->netchain.next;
      global->netchain.next = node;

      node->status = NODE_UP;
      node->driver = dp;

      /* Tell the remote side what we are calling this node */
      hpkt = GetHPacket(global);
      if(!hpkt || !(hpkt->hp_RP = RP = AllocRPacket(node, node->name[0]))) 
         return(NULL);
      RP->Type = ACTION_NETWORK_SNAME;
      RP->DLen = node->name[0];
      memcpy(RP->DataP, node->name+1, RP->DLen);
      RP->handle = hpkt;
      hpkt->hp_NNode = node;
      hpkt->hp_Driver = node->driver;
      hpkt->hp_Pkt = NULL;
      hpkt->hp_NPFlags = 0;
      RemotePacket(global, hpkt);
   }
   else
   {
      OBUG(("AddNode: Can't InitNode '%s'\n", name))
      DosFreeMem((void *)node);
      return(NULL);
   }
   return(node);
d325 35
a359 35
   struct DosList *dl, *ldl;
   struct DosInfo *info;
   struct RootNode *root;
   DRIVER *driver, *ndriver;
   struct Library *DriverBase;

   Forbid();

   root  = (struct RootNode *)DOSBase->dl_Root;
   info  = (struct DosInfo  *)BADDR(root->rn_Info);
   for(ldl=NULL, dl= (struct DosList  *)BADDR(info->di_DevInfo);
       dl; ldl=dl, dl=(struct DosList *)BADDR(dl->dol_Next))
   {
      if(dl->dol_Type == DLT_DEVICE && 
         dl->dol_Task == (struct MsgPort *)global->n.port) break;
   }
   if(dl)
   {
      if(ldl) ldl->dol_Next = dl->dol_Next;
      else    info->di_DevInfo = MKBADDR(dl->dol_Next);
   }
 
   Permit();

   if(dl) DosFreeMem((char *)dl);

   for(driver=global->drivers; driver; driver=ndriver)
   {
      DriverBase = driver->libbase;
      SDNHanTerm(driver->drglobal);
      /*CloseLibrary(driver->libbase);*/
      ndriver=driver->next;
      DosFreeMem((char *)driver);
   }
   global->drivers = NULL;
d361 1
a361 1
   return(0);
@


1.19
log
@Name node NET not NETWORK
@
text
@d288 1
a288 1
      RP->Type = ACTION_NETWORK_INIT;
@


1.18
log
@Handle rebooting
@
text
@d18 1
a18 1
#define MYNAME "\7Network"
@


1.17
log
@Add version string information.
@
text
@d16 1
a16 1
#define CONFIG  "DEVS:networks/testhan-config" VERSTING
d182 1
a182 1
   global->netchain.incarnation = 0;
d256 1
a256 1
   node->incarnation = 0;
@


1.16
log
@Prepare for new SDN return code SDN_DOWN
@
text
@d16 1
a16 1
#define CONFIG  "DEVS:networks/testhan-config"
d20 1
a20 1
#define CONFIG "DEVS:networks/handler-config"
@


1.15
log
@Revise debugging messages
@
text
@d271 1
a271 1
      if(SDNInitNode(dp->drglobal, name+1, &node->ioptr) == SDN_OK) break;
@


1.14
log
@Send ACTION_NETWORK_INIT packet to server so he knows his name
@
text
@d98 1
a98 1
         BUG(("Config to open library %s\n", libname));
d115 1
a115 1
            BUG(("Library initialized\n"));
d150 1
a150 1
   BUG(("InitDevice: Enter\n"));
d154 1
a154 1
      BUG(("ERROR: Can't CreatePort\n"));
d236 1
a236 1
    BUGBSTR("AddNode: Adding ", name);
d245 1
a245 1
   BUG(("AddNode: Node not in chain\n"));
d250 1
a250 1
      BUG(("AddNode: Out of memory!\n"));
d277 1
a277 1
      BUG(("AddNode: Node successfully initialized\n"))
d300 1
a300 1
      BUG(("AddNode: Can't InitNode '%s'\n", name))
@


1.13
log
@use strlen(DEVNAME) instead of constant for allocation
@
text
@d233 2
d283 14
a296 1
      
@


1.12
log
@Start to implement file access in root
@
text
@d192 2
a193 1
   dl = (struct DosList *)DosAllocMem(global, sizeof(struct DosList)+5);
@


1.11
log
@Allocate permanent HPACKETs
 
Implement parsing of AUTO line in config file to auto-mount nodes
@
text
@d214 4
@


1.10
log
@*** empty log message ***
@
text
@d23 2
d30 1
d33 2
a34 2
   int len, i;
   DRIVER *driver;
d55 31
a85 1
      if (buf[0] != '#')
d95 1
a95 1
         while(*s && *s != ' ')
d115 1
a115 1
            BUG(("Library inited\n"));
d147 1
d160 17
d183 1
a207 1
   global->work = DosAllocMem(global, 512);
d250 1
@


1.9
log
@New cut that (almost) works
@
text
@d13 9
a21 1
#define MYNAME "\7TESTNET"
d34 1
a34 1
   fh = Open("DEVS:networks/handler-config", MODE_OLDFILE);
d141 1
a141 1
   strcpy((char *)(dl+1), "\4TEST");
@


1.8
log
@New cut that (almost) works
@
text
@a24 1
   HPACKET *hp;
d152 3
@


1.7
log
@Fix obvious errors with previous rewrite
@
text
@d202 1
a202 1
      if(SDNInitNode(dp->drglobal, name, &node->ioptr) == SDN_OK) break;
d211 4
@


1.6
log
@Rewrite for asynchronous execution
@
text
@d13 1
a13 1
#define MYNAME "\7NETWORK"
d25 1
d27 1
a27 1
   fh = Open("net_exports:handler-config", MODE_OLDFILE);
d57 1
a57 1
         memcpy(t, ".library", 8);
d66 1
a66 3
         DriverBase = driver->libbase = 
            /*OpenLibrary(libname, 0)*/ (struct Library *)1;

d75 1
a75 1
            BUG(("Library '%s' initialized\n", libname));
d134 1
a134 1
   strcpy((char *)(dl+1), "\3NET");
d149 2
d202 1
a202 1
      if(SDNInitNode(dp->drglobal, node) == SDN_OK) break;
@


1.5
log
@Return NULL from AddNode upon error (!)
@
text
@d15 86
a104 1
   int rc;
d150 2
a151 1
   rc = InitRDevice(global);
d155 1
a155 1
   return(rc);
d164 2
d189 1
d194 11
a204 1
   if(!InitNode(global, node))
d227 2
d243 1
a243 1
      else    info->di_DevInfo = (void *)MKBADDR(dl->dol_Next);
d250 9
a258 1
   TermRDevice(global, 1);
d260 1
a260 1
   return(1);
@


1.4
log
@New version
@
text
@d116 1
@


1.3
log
@Change handler to be a process
@
text
@d32 2
@


1.2
log
@Eliminate RDevice
@
text
@a0 1

a10 1

a14 51
typedef struct FileSysStartupMsg *FSSM;

int
GetDevice (global, myfssmsg)
GLOBAL global;
FSSM myfssmsg;
{
   FSSM  fssmsg;
   int   devnum;
   char  *defaultdev = "serial.device";

   BUGP("GetDevice entry")

   BUG(("devname:%s\n",global->n.devname));
   BUG(("Global->node = %08lx Global->node->dn_Startup = %08lx\n",
      global->node, BADDR(global->node->dn_Startup)));

   /* Did they give us any information in the device list ? */
   if ((fssmsg = (FSSM)BADDR(global->node->dn_Startup)) == NULL) 
   {
      BUGP("Null FSSM")
      /* Initialize the device information */
      global->unitnum = myfssmsg->fssm_Unit = devnum = 0;
      myfssmsg->fssm_Device = (ULONG)defaultdev;
      myfssmsg->fssm_Flags  = 0;
      BUG(("GetDevice-fssm_Device:%s\n", myfssmsg->fssm_Device));
      BUG(("GetDevice-fssm_Unit:%ld\n",   myfssmsg->fssm_Unit));
      BUG(("GetDevice-fssm_Flags:%lx\n", myfssmsg->fssm_Flags));
   } 
   else 
   {
      BUGP("Good FSSM")
      /* They gave us all the device information in the mountlist */
      if(fssmsg->fssm_Device != NULL)
         myfssmsg->fssm_Device  = (ULONG)BADDR(fssmsg->fssm_Device);
      else
         myfssmsg->fssm_Device = (ULONG)defaultdev;
      global->unitnum      = 
      myfssmsg->fssm_Unit  = fssmsg->fssm_Unit;
      myfssmsg->fssm_Flags = (ULONG)BADDR(fssmsg->fssm_Flags);

      BUG(("fssm:%lx\n", fssmsg));
      BUG(("fssm_Device:%s\n",    fssmsg->fssm_Device));
      BUG(("fssm_Unit:%ld\n",      fssmsg->fssm_Unit));
      BUG(("fssm_Flags:%lx\n",    fssmsg->fssm_Flags));
   }

   BUGP("GetDevice exit")
   return(-1);
}

d20 3
d27 1
a27 7
   if (GetDevice(global, &global->n.fssm) == NULL) 
   {
      BUG(("GetDevice Failed \n"));
      return(0);
   }

   if (!(global->n.devport=CreatePort(NULL,0))) 
a32 4
   BUG(("fssm_Device:%s\n", global->n.fssm.fssm_Device));
   BUG(("fssm_Unit:%ld\n",   global->n.fssm.fssm_Unit));
   BUG(("fssm_Flags:%lx\n", global->n.fssm.fssm_Flags));

d39 1
d43 1
a43 1
   global->netchain.RootLock.RPtr = NULL;
d46 17
d80 1
a80 1
   for (node = &global->netchain; node; node = node->next) 
d89 1
a89 1
      DosAllocMem(global,(long)sizeof(struct NetNode)+strlen(name))))
d101 1
a101 1
   node->RootLock.RPtr = NULL;
a114 1

d122 24
d147 1
@


1.1
log
@Initial revision
@
text
@a101 2
   /* A NULL RDevice indicates this is a lock on the local root */
   global->netchain.RootLock.RDevice = NULL;
d113 1
a113 1
AddNode(global, name, ioptr)
a115 1
APTR ioptr;
a119 1
    BUG(("ioptr is %lx\n", ioptr));
d124 2
a125 6
      if (!stricmp(node->name, name)) 
      {
         if (node->status == NODE_UP)
            global->upnodes--;
         break;
      }
d127 19
a145 1
   if (!node) 
a146 8
      BUG(("AddNode: Node not in chain\n"));
      /* Node is new, add it */
      if (!(node=(struct NetNode *)
         DosAllocMem(global,(long)sizeof(struct NetNode))))
      {
         BUG(("AddNode: Out of memory!\n"));
         return(NULL);
      }
d148 1
d151 5
a155 8
      strcpy(node->name, name);
      node->devname[0] = '\0';
      node->incarnation = 0;
      global->numnodes++;
      /* Set up dummy lock for lock templating */
      node->RootLock.NetNode = node;
      node->RootLock.RDevice = (RNPTR)1L; /* For now - Obtain from remote */
      node->RootLock.RPtr = NULL; /* For always */
a156 9

   node->status = (ioptr                      ? NODE_UP
                  : (node->status ==  NODE_UP ? NODE_CRASHED
                  :                             NODE_DEAD)
                  );
   node->ioptr = ioptr;

   if (node->status == NODE_UP)
      global->upnodes++;
@
