head     1.5;
branch   ;
access   ;
symbols  r37-9:1.5 v37r4:1.5 Distillery:1.5;
locks    ; strict;
comment  @ * @;


1.5
date     91.01.06.20.52.22;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.18.00.03.50;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.09.23.56.54;  author Doug;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.02.32.49;  author Doug;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.37.59;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@handler process control routines
@


1.5
log
@Revise debugging messages
@
text
@
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Process Control */

/* ActDie ActInhibit ActFlush ActTimer */

#include "handler.h"

ACTFN(ActDie)
{
#if 1
   hpkt->hp_Pkt->dp_Res1 = DOS_TRUE;
   hpkt->hp_Pkt->dp_Res2 = 0;
   global->n.run = 0;
   HPQ(global, hpkt);
#else
   struct NetNode *netnode, *tmpnode;
   OBUG(("ActDie\n"));
   global->n.run = 0;
   global->RP.Type = pkt->dp_Type;

   for(netnode=global->netchain.next; netnode; netnode=tmpnode) 
   {
      OBUGBSTR("Shutting down node ", netnode->name);
      RemotePacket(global, &netnode->RootLock, &global->RP);
      TermNode(global, netnode);
      tmpnode = netnode->next;
      DosFreeMem((void *)netnode);
   }
#endif
}

ACTFN(ActInhibit)
{
   struct DosPacket *pkt = hpkt->hp_Pkt;

   OBUG(("ActInhibit: %ld\n", pkt->dp_Arg1));
   pkt->dp_Res1 = DOS_TRUE;
   if (pkt->dp_Arg1 == 0) 
   {
      /* Since the DISKCHANGE command uses ACTION_INHIBIT instead of */
      /* ACTION_DISK_CHANGE, do a ACTION_DISK_CHANGE just in case    */
      ActDiskChange(global, hpkt);
   }
}

ACTFN(ActFlush)
{
   hpkt->hp_Pkt->dp_Res1 = DOS_TRUE;
   HPQ(global, hpkt);
   OBUG(("ActFlush\n"));
}

#if 0
void
ActTimer(global, pkt)
GLOBAL global;
struct DosPacket *pkt;        /* a pointer to the dos packet sent */
{
    OBUG(("ActTimer\n"));

    if (global->run == -1)
        global->run = 0;
    else
        PostTimerReq(global);

    /* Prevent them from replying to the message */
    global->reply = 0;
}
#endif


@


1.4
log
@Rewrite for asynchronous execution
@
text
@d25 1
a25 1
   BUG(("ActDie\n"));
d31 1
a31 1
      BUGBSTR("Shutting down node ", netnode->name);
d44 1
a44 1
   BUG(("ActInhibit: %ld\n", pkt->dp_Arg1));
d58 1
a58 1
   BUG(("ActFlush\n"));
d67 1
a67 1
    BUG(("ActTimer\n"));
@


1.3
log
@Eliminate RDevice
@
text
@d16 1
a16 4
void
ActDie(global, pkt)
GLOBAL global;
struct DosPacket *pkt;      /* a pointer to the dos packet sent       */
d18 6
d37 1
d40 1
a40 4
void
ActInhibit(global, pkt)
GLOBAL global;
struct DosPacket *pkt;              /* a pointer to the dos packet sent       */
d42 10
a51 7
    BUG(("ActInhibit: %ld\n", pkt->dp_Arg1));
    pkt->dp_Res1 = DOS_TRUE;
    if (pkt->dp_Arg1 == 0) {
        /* Since the DISKCHANGE command uses ACTION_INHIBIT instead of */
        /* ACTION_DISK_CHANGE, do a ACTION_DISK_CHANGE just in case    */
        ActDiskChange(global, pkt);
    }
d54 1
a54 4
void
ActFlush(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d56 3
a58 1
    BUG(("ActFlush\n"));
@


1.2
log
@ACTFN macros
@
text
@d16 4
a19 1
ACTFN(ActDie)
d21 4
a24 4
    struct NetNode *netnode;
    BUG(("ActDie\n"));
    global->n.run = 0;
    global->RP.Type = pkt->dp_Type;
d26 8
a33 7
    for (netnode=global->netchain.next; netnode; netnode=netnode->next) {
        if (netnode->status == NODE_UP && netnode->RootLock.RDevice) {
            BUGBSTR("Shutting down node ", netnode->name);
            RemotePacket(global, &netnode->RootLock, &global->RP);
            netnode->status = NODE_DEAD;
        }
    }
d36 4
a39 1
ACTFN(ActInhibit)
d50 4
a53 1
ACTFN(ActFlush)
d59 4
a62 1
ACTFN(ActTimer)
@


1.1
log
@Initial revision
@
text
@d16 1
a16 4
void
ActDie(global, pkt)
GLOBAL global;
struct DosPacket *pkt;      /* a pointer to the dos packet sent       */
d32 1
a32 4
void
ActInhibit(global, pkt)
GLOBAL global;
struct DosPacket *pkt;              /* a pointer to the dos packet sent       */
d43 1
a43 4
void
ActFlush(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d49 1
a49 4
void
ActTimer(global, pkt)
GLOBAL global;
struct DosPacket *pkt;        /* a pointer to the dos packet sent */
@
