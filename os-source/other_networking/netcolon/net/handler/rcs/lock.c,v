head     1.22;
branch   ;
access   ;
symbols  r37-9:1.22 v37r4:1.20 Distillery:1.20;
locks    ; strict;
comment  @ * @;


1.22
date     91.05.11.13.39.01;  author dlarson;  state Exp;
branches ;
next     1.21;

1.21
date     91.05.11.12.26.06;  author J_Toebes;  state Exp;
branches ;
next     1.20;

1.20
date     91.01.17.01.12.11;  author Doug;  state Exp;
branches ;
next     1.19;

1.19
date     91.01.15.02.55.26;  author Doug;  state Exp;
branches ;
next     1.18;

1.18
date     91.01.06.20.51.07;  author Doug;  state Exp;
branches ;
next     1.17;

1.17
date     90.12.31.13.53.06;  author Doug;  state Exp;
branches ;
next     1.16;

1.16
date     90.12.31.00.57.08;  author Doug;  state Exp;
branches ;
next     1.15;

1.15
date     90.12.13.03.23.23;  author Doug;  state Exp;
branches ;
next     1.14;

1.14
date     90.12.03.22.13.17;  author Doug;  state Exp;
branches ;
next     1.13;

1.13
date     90.12.03.20.06.01;  author Doug;  state Exp;
branches ;
next     1.12;

1.12
date     90.11.29.01.45.25;  author Doug;  state Exp;
branches ;
next     1.11;

1.11
date     90.11.28.04.30.00;  author Doug;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.27.22.12.00;  author Doug;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.25.19.18.18;  author J_Toebes;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.25.15.50.44;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.20.22.23.29;  author Doug;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.20.01.07.08;  author Doug;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.18.00.03.29;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.10.24.23.49.09;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.18.00.18.40;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.23.57.58;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.38.57;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@lock manipulation routines
@


1.22
log
@Correct dumb logic error.
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
**      $Filename:  $ 
**      $Author: J_Toebes $
**      $Revision: 1.21 $
**      $Date: 91/05/11 12:26:06 $
**      $Log:	lock.c,v $
 * Revision 1.21  91/05/11  12:26:06  J_Toebes
 * Add code to normalize a name relative to a lock so that it works with
 * assigns across the network.
 * 
 * Revision 1.20  91/01/17  01:12:11  Doug
 * Handle rebooting
 * 
 * Revision 1.19  91/01/15  02:55:26  Doug
 * Remove return-code-screening code - unnecessary since Mike fixed WB
 * 
**
**/

/* Lock.c - lock manipulation */
/* ActLock, ActDupLock, ActUnLock */

/*-------------------------------------------------------------------------*/
/* Structure of a Lock:                                                    */
/*   struct FileLock {                                                     */
/*      BPTR fl_Link;             Next lock in the chain of device locks   */
/*      LONG fl_Key;              Block number of directory or file header */
/*      LONG fl_Access;           Shared Read (-2) or Exclusive Write (-1) */
/*      struct MsgPort * fl_Task; Handler process for Lock (Us)            */
/*      BPTR fl_Volume;           Node in DevInfo structure for Lock       */
/*      };                                                                 */
/*-------------------------------------------------------------------------*/

#include "handler.h"


/* create a lock to be returned */
struct FileLock *
CreateLock(GLOBAL global, NETPTR nlock, 
           RNPTR RLock, LONG Access, struct RPacket *RP)
{
    struct FileLock *flock;
    NETPTR newnlock;
    int len;

    OBUG(("CreateLock: Entry, nlock %08lx NetNode %08lx RLock %08lx Access %d\n",
          nlock, nlock->NetNode, RLock, Access));

    if(Access == SHARED_LOCK && (global->flags & NGF_RELOCK) && RP && RP->DLen)
    {
      /* The name of the object is in DataP */
      len = RP->DLen+1;
    }
    else
      len = 0;

    flock = (struct FileLock *)DosAllocMem(global, sizeof(struct FileLock));
    if(flock == NULL) return(NULL);

    newnlock = (NETPTR)DosAllocMem(global, sizeof(struct NetPtr) + len);

    if(newnlock == NULL) return(NULL);

    OBUG(("CreateLock: Allocated lock %08lx nlock %08lx\n", flock, newnlock));

    flock->fl_Key = (LONG)newnlock;
    flock->fl_Access = Access;
    flock->fl_Task = global->n.port;
    flock->fl_Volume = MKBADDR(global->volume);
    newnlock->NetNode = nlock->NetNode;
    newnlock->RPtr    = RLock;
    newnlock->incarnation = newnlock->NetNode->RootLock.incarnation;

    /* If we are to reestablish this lock, link it into the chain */
    if(len)
    {
       newnlock->objname = (char *)(newnlock+1);
       memcpy(newnlock->objname, RP->DataP, len-1);
       newnlock->objname[len-1] = 0;  /* NULL terminator */
       flock->fl_Link = (BPTR)nlock->NetNode->lkc;
       nlock->NetNode->lkc = flock;
    }

    OBUG(("CreateLock: Exit\n"));

    return(flock);
}

void
FreeLock(global, flock)
GLOBAL global;
struct FileLock *flock;
{
   struct FileLock *current, *next;
   NETPTR nlock;

   OBUG(("FreeLock: Entry, lock %08lx\n", flock));

   if (!flock)
      return;

   nlock = (NETPTR)flock->fl_Key;

   if(nlock->objname)
   {
      /* This one was to be reestablished, so it's linked into the list */
      if((current=nlock->NetNode->lkc) == flock) 
      {
         nlock->NetNode->lkc = (struct FileLock *)flock->fl_Link;
         OBUG(("FreeLock: Head lock freed, new head = %lx\n", 
              nlock->NetNode->lkc));
      } 
      else 
      {
         for(next=NULL;
             current && (next=(struct FileLock *)current->fl_Link) != flock;
             current = next);

         if (next) 
         {
            current->fl_Link = next->fl_Link;
            OBUG(("Lock found and removed from chain\n"));
         } 
      }
   }

   if (nlock != (NETPTR)nlock->NetNode)
      DosFreeMem((char *)nlock);  /* Free the net lock   */

   DosFreeMem((char *)flock);     /* Free the local lock */

   OBUG(("FreeLock: Exit\n"));
}

/* Arg1: Lock */
/* Arg2: Name */
/* Arg3: Mode: ACCESS_READ, ACCESS_WRITE */

ACTFN(ActLock)
{
   NETPTR nlock;
   struct FileLock *flock;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP;

   OBUG(("ActLock: Entry, hpkt %08lx\n", hpkt));
   OBUGBSTR("File to lock: ", pkt->dp_Arg2);

   flock = (struct FileLock *)pkt->dp_Arg1;
   /**********************************************************************/
   /* If the given lock is on the local root, call the ParseName routine */
   /* to determine if we need to call the remote nodes.  If ParseName    */
   /* returns 1, we have a name of the form "NET:" and we should return  */
   /* a lock on the root of NET:.  If it returns 0, we have a name of    */
   /* the form "NET:FOO" or "NET:FOO/BAR", etc and we need to call the   */
   /* remote node specified in the pseudo-lock returned.                 */
   /**********************************************************************/
   if(TESTROOT(flock, nlock))
   {
      /* ParseName returns 1 if we are locking the root.  It fills in */
      /* nlock with a pointer to the pseudolock for the node.  The    */
      /* pseudolock is kept in the NetNode struct.                    */
      /* Any leftover parts of the name are left in RP.Data as a      */
      /* BCPL string.                                                 */

      if(ParseName(global, (char *)pkt->dp_Arg2, &nlock, global->work))
      {
         OBUG(("ActLock: Returning lock on root\n"));
         /* Return lock on root */
         /* ParseName has put the pseudolock for the root into nlock */
         flock = CreateLock(global, nlock, (RNPTR)1, pkt->dp_Arg3, NULL);
         nlock = (NETPTR)flock->fl_Key;

         pkt->dp_Res1 = MKBADDR(flock);
         HPQ(global, hpkt);
         return;
      } 
      else if (!nlock) 
      {
         OBUG(("ActLock: Couldn't find node\n"));
errcase:
         pkt->dp_Res1 = NULL;
         pkt->dp_Res2 = ERROR_OBJECT_NOT_FOUND;
         HPQ(global, hpkt);
         return;
      }
      OBUG(("ActLock: got nlock, falling through\n"));
      if(!(RP = AllocRPacket(nlock->NetNode, BSTRLEN(global->work)+1)))
      {
         norpkt:
         pkt->dp_Res1 = DOS_FALSE;
         pkt->dp_Res2 = ERROR_NO_FREE_STORE;
         HPQ(global, hpkt);
         return;
      }
      MBSTR(global->work, RP->DataP);
   } 
   else 
   {
      OBUGBSTR("ActLock: Relative open, node ", nlock->NetNode->name);
      /* We are doing a relative open - put filename in Data */
      if(!(RP = AllocRPacket(nlock->NetNode, 0))) goto norpkt;
      RP->DataP = (char *)pkt->dp_Arg2;
      NetNormalizeName(RP->DataP);
   }

   RP->Type = pkt->dp_Type;
   RP->Arg1 = (LONG)nlock;
   if(!memcmp(RP->DataP, "\2::", 3))
   {
      /* Special lock on nodename.info */
      RP->Arg2 = 1;
      RP->DLen = 0;
   }
   else
   {
      RP->Arg2 = 0;
      RP->DLen = BSTRLEN(RP->DataP)+1;
      if (RP->DLen == 1)
         RP->DLen = 0;
   }
   RP->Arg3 = pkt->dp_Arg3;
   RP->Arg4 = (pkt->dp_Arg3 == SHARED_LOCK && (global->flags & NGF_RELOCK));
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_Func = ActLock2;
   hpkt->hp_NNode = nlock->NetNode;
   hpkt->hp_Driver = nlock->NetNode->driver;

   hpkt->hp_NPFlags = NP1;
   pkt->dp_Res1 = (LONG)nlock;

   RemotePacket(global, hpkt);
}

ACTFN(ActLock2)
{
   struct FileLock *newflock;
   NETPTR nlock;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP = hpkt->hp_RP;

   OBUG(("ActLock2: Entry, hpkt %08lx\n", hpkt))

   if(hpkt->hp_State != HPS_ERR)
   {
      OBUG(("ActLock2: Returned RNPTR is %lx\n", RP->Arg1));
      pkt->dp_Res2 = RP->Arg2;
      if(RP->Arg1)
      {
         nlock = (NETPTR)pkt->dp_Res1;
         newflock = CreateLock(global, nlock, (RNPTR)RP->Arg1, pkt->dp_Arg3, RP);
         pkt->dp_Res1 = MKBADDR(newflock);
      }
      else
      {
         pkt->dp_Res1 = NULL;
#if 0
/* No longer necessary, thanks to Mike Sinz */
         if(pkt->dp_Res2 == ERROR_DISK_NOT_VALIDATED ||
            pkt->dp_Res2 == ERROR_DEVICE_NOT_MOUNTED ||
            pkt->dp_Res2 == ERROR_NOT_A_DOS_DISK     ||
            pkt->dp_Res2 == ERROR_NO_DISK)
         {
            pkt->dp_Res2 = ERROR_OBJECT_NOT_FOUND;
         }
#endif
      }
   }
#if DEBUG
   else
      BUG(("ActLock2: ERROR RETURN\n"))
      
#endif
}

ACTFN(ActDupLock)
{
   NETPTR nlock;
   struct FileLock *flock;
   struct RPacket *RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;

   OBUG(("ActDupLock: Entry, hpkt %08lx\n", hpkt));

   flock = (struct FileLock *)pkt->dp_Arg1;

   /* If this is a lock on the local root, it is a special case */
   if(TESTROOT(flock, nlock))
   {
      if(flock)
         flock = CreateLock(global, nlock, (RNPTR)1, flock->fl_Access, NULL);
      pkt->dp_Res1 = MKBADDR(flock);
      pkt->dp_Res2 = 0;
      HPQ(global, hpkt);
      OBUG(("ActDupLock: Lock on root\n"))
      return;
   }

   if(!(RP = AllocRPacket(nlock->NetNode, 0)))
   {
      pkt->dp_Res1 = DOS_FALSE;
      pkt->dp_Res2 = ERROR_NO_FREE_STORE;
      HPQ(global, hpkt);
      return;
   }

   RP->Type = pkt->dp_Type;
   RP->Arg1 = (LONG)nlock;
   RP->Arg4 = (global->flags & NGF_RELOCK);
   RP->DLen = 0;
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_Func = ActDupLock2;
   hpkt->hp_NPFlags = NP1;
   hpkt->hp_NNode = nlock->NetNode;
   hpkt->hp_Driver = nlock->NetNode->driver;

   pkt->dp_Res1 = (LONG)nlock;

   RemotePacket(global, hpkt);
}

ACTFN(ActDupLock2)
{
   NETPTR nlock;
   struct FileLock *flock;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP = hpkt->hp_RP;

   OBUG(("ActDupLock2: Entry, hpkt %08lx\n", hpkt))

   if(hpkt->hp_State != HPS_ERR)
   {
      nlock = (NETPTR)pkt->dp_Res1;
      flock = (struct FileLock *)pkt->dp_Arg1;
      pkt->dp_Res1 = MKBADDR(CreateLock(global, nlock, (RNPTR)RP->Arg1, 
                                        flock->fl_Access, RP));
      pkt->dp_Res2 = RP->Arg2;
   }
}

ACTFN(ActUnLock)
{
   NETPTR nlock;
   struct FileLock *flock;
   struct RPacket *RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;

   OBUG(("ActUnLock: Entry, hpkt %08lx\n", hpkt));

   flock = (struct FileLock *)pkt->dp_Arg1;
   /* If this lock exists on a remote node, delete it */
   if(!TESTROOT(flock, nlock))
   {
      if(!(RP = AllocRPacket(nlock->NetNode, 0)))
      {
         pkt->dp_Res1 = DOS_FALSE;
         pkt->dp_Res2 = ERROR_NO_FREE_STORE;
         HPQ(global, hpkt);
         return;
      }
      RP->Type = pkt->dp_Type;
      RP->Arg1 = (LONG)nlock;
      RP->DLen = 0;
      RP->handle = hpkt;
      hpkt->hp_RP = RP;
      hpkt->hp_NPFlags = NP1;
      hpkt->hp_NNode = nlock->NetNode;
      hpkt->hp_Driver = nlock->NetNode->driver;
      hpkt->hp_Func = ActUnLock2;
      hpkt->hp_Pkt->dp_Res1 = (LONG)flock;
      RemotePacket(global, hpkt);
   } 
   else 
   {
      /* No remote lock, just local on the root */
      pkt->dp_Res1 = DOS_TRUE;
      HPQ(global, hpkt);
      if(flock) FreeLock(global, flock);
   }
}

ACTFN(ActUnLock2)
{
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP = hpkt->hp_RP;

   OBUG(("ActUnLock2: Entry, hpkt %08lx\n", hpkt))

   if(hpkt->hp_State != HPS_ERR)
   {
      if(pkt->dp_Res1) FreeLock(global, (struct FileLock *)pkt->dp_Res1);

      pkt->dp_Res1 = RP->Arg1;
      pkt->dp_Res2 = RP->Arg2;
   }
}

int
ParseName(global, name, nlock, outname)
GLOBAL global;
char *name;
NETPTR *nlock;
char *outname;
{
   int len, cur;
   struct NetNode *node;
   char bname[RNAMELEN+2];

   OBUGBSTR("ParseName: Parsing name ", name);
   /* Check for 2.0 special .whatever files  - ".icon" ".backdrop" */
   if(!memcmp(name+1, ".icon", 5) || !memcmp(name+1, ".backdrop", 9))
   {
      OBUG(("ParseName: Special 2.0 .filename\n"))
      *nlock = NULL;
      return(0);
   }

   for (len=*name++, cur=0; len && (*name != '/'); len--, name++) 
   {
      if (*name==':')
         cur=0;
      else
         outname[cur++] = *name;
   }
   outname[cur] = '\0';
   if (len > 0 && *name == '/') 
   {
      name++;
      len--;
   }

   if (len <= 1 && cur == 0) 
   {
      /* It is the root of NET: */
      *nlock = &global->netchain.RootLock;
      return(1);
   }
OBUG(("ParseName: Trying to find node %s\n", outname))
   /* We have a network node name - find it */
   node = FindNode(global, outname);


   /* OK, check to see if it is a .info file for a node */
   if (!node && cur >= 6 && !stricmp(outname+cur-5, ".info"))
   {
OBUG(("ParseName: Checking for %s.info\n", outname))
      outname[cur-5] = '\0';
      node = FindNode(global, outname);

      name = ":";
      len = 1;
   }

   if(!node && stricmp(outname, "disk") &&
         stricmp(outname, ".info"))  /* DISK.INFO, .INFO - special cases */
   {
      /* No node found - mount it */
      strcpy(bname+1, outname);
      bname[0] = strlen(outname);
      OBUGBSTR("ParseName: No node found, mounting ", bname);
      if(node = AddNode(global, bname))
         strcpy(node->devname, outname);
   } 
   if(node)
   {
      /* Return template lock */
      *nlock = &node->RootLock;
      OBUGBSTR("ParseName: Resolved node is ", node->name);
   }
   else
      *nlock = NULL;

   /* Move the rest of the name into outname as a BSTR */
   outname[0] = (char)len+1;
   outname[1] = ':';
   if(len) MQ(name, outname+2, len);
   outname[len+2] = '\0';
   OBUG(("Remote filename: len %d text '%s'\n", (int)*outname, outname+1));
   return(0);
}

struct NetNode *
   FindNode(global, name)
GLOBAL global;
char *name;
{
    struct NetNode *node;
    for (node=global->netchain.next; node; node=node->next) 
    {
        if (!stricmp(name, node->name+1))
            break;
    }
    OBUG(("FindNode: name %s : %s\n", name, node ? "SUCCESS" : "FAILURE"))
    return(node);
}

/* This routine normalizes a name to be sent across the network. 		*/
/* it is necessary because when you have an assign on a local name, it will 	*/
/* prepend the assign name to the file name before sending it to us 		*/
void NetNormalizeName(bstr)
char *bstr;
{
	int len;
	unsigned char *p;
	
	p = bstr;
	for(len = *p++ ;len; len--,p++)
	{
		if (*p == ':') break;
	}

	/* See if we actually encountered a colon in the name */
	if (len)
	{
		memcpy(bstr+1, p+1, len-1);
		bstr[0] = len-1;
	}
}
@


1.21
log
@Add code to normalize a name relative to a lock so that it works with
assigns across the network.
@
text
@d11 3
a13 3
**      $Author: Doug $
**      $Revision: 1.20 $
**      $Date: 91/01/17 01:12:11 $
d15 4
a518 2
	len = *p++;

d527 1
a527 1
		memcpy(bstr+1, p+1, len-1)
@


1.20
log
@Handle rebooting
@
text
@d12 2
a13 2
**      $Revision: 1.19 $
**      $Date: 91/01/15 02:55:26 $
d15 3
d208 1
d503 25
@


1.19
log
@Remove return-code-screening code - unnecessary since Mike fixed WB
@
text
@d12 6
a17 3
**      $Revision: $
**      $Date: $
**      $Log: $
d73 1
a73 1
    newnlock->incarnation = newnlock->NetNode->incarnation;
@


1.18
log
@Revise debugging messages
@
text
@d9 8
d256 2
d265 1
@


1.17
log
@implement special-case handling for nodename.info files
@
text
@d36 1
a36 1
    BUG(("CreateLock: Entry, nlock %08lx NetNode %08lx RLock %08lx Access %d\n",
d54 1
a54 1
    BUG(("CreateLock: Allocated lock %08lx nlock %08lx\n", flock, newnlock));
d74 1
a74 1
    BUG(("CreateLock: Exit\n"));
d87 1
a87 1
   BUG(("FreeLock: Entry, lock %08lx\n", flock));
d100 1
a100 1
         BUG(("FreeLock: Head lock freed, new head = %lx\n", 
d112 1
a112 1
            BUG(("Lock found and removed from chain\n"));
d122 1
a122 1
   BUG(("FreeLock: Exit\n"));
d136 2
a137 2
   BUG(("ActLock: Entry, hpkt %08lx\n", hpkt));
   BUGBSTR("File to lock: ", pkt->dp_Arg2);
d158 1
a158 1
         BUG(("ActLock: Returning lock on root\n"));
d170 1
a170 1
         BUG(("ActLock: Couldn't find node\n"));
d177 1
a177 1
      BUG(("ActLock: got nlock, falling through\n"));
d190 1
a190 1
      BUGBSTR("ActLock: Relative open, node ", nlock->NetNode->name);
d233 1
a233 1
   BUG(("ActLock2: Entry, hpkt %08lx\n", hpkt))
d237 1
a237 1
      BUG(("ActLock2: Returned RNPTR is %lx\n", RP->Arg1));
d271 1
a271 1
   BUG(("ActDupLock: Entry, hpkt %08lx\n", hpkt));
d283 1
a283 1
      BUG(("ActDupLock: Lock on root\n"))
a291 1
      BUG(("ActDupLock: ******************Can't AllocRPacket!\n"))
d319 1
a319 1
   BUG(("ActDupLock2: Entry, hpkt %08lx\n", hpkt))
d338 1
a338 1
   BUG(("ActUnLock: Entry, hpkt %08lx\n", hpkt));
d377 1
a377 1
   BUG(("ActUnLock2: Entry, hpkt %08lx\n", hpkt))
d399 1
a399 1
   BUGBSTR("ParseName: Parsing name ", name);
d403 1
a403 1
      BUG(("ParseName: Special 2.0 .filename\n"))
d428 1
a428 1
BUG(("ParseName: Trying to find node %s\n", outname))
d436 1
a436 1
BUG(("ParseName: Checking for %s.info\n", outname))
d450 1
a450 1
      BUGBSTR("ParseName: No node found, mounting ", bname);
d458 1
a458 1
      BUGBSTR("ParseName: Resolved node is ", node->name);
d468 1
a468 1
   BUG(("Remote filename: len %d text '%s'\n", (int)*outname, outname+1));
d483 1
a483 1
    BUG(("FindNode: name %s : %s\n", name, node ? "SUCCESS" : "FAILURE"))
@


1.16
log
@Suppress Res2 values that would generate a workbench requester
when coming back from a Lock request

@
text
@d131 24
a154 4
    NETPTR nlock;
    struct FileLock *flock;
    struct DosPacket *pkt = hpkt->hp_Pkt;
    struct RPacket *RP;
d156 15
a170 35
    BUG(("ActLock: Entry, hpkt %08lx\n", hpkt));
    BUGBSTR("File to lock: ", pkt->dp_Arg2);

    flock = (struct FileLock *)pkt->dp_Arg1;
    /**********************************************************************/
    /* If the given lock is on the local root, call the ParseName routine */
    /* to determine if we need to call the remote nodes.  If ParseName    */
    /* returns 1, we have a name of the form "NET:" and we should return  */
    /* a lock on the root of NET:.  If it returns 0, we have a name of    */
    /* the form "NET:FOO" or "NET:FOO/BAR", etc and we need to call the   */
    /* remote node specified in the pseudo-lock returned.                 */
    /**********************************************************************/
    if(TESTROOT(flock, nlock))
    {
        /* ParseName returns 1 if we are locking the root.  It fills in */
        /* nlock with a pointer to the pseudolock for the node.  The    */
        /* pseudolock is kept in the NetNode struct.                    */
        /* Any leftover parts of the name are left in RP.Data as a      */
        /* BCPL string.                                                 */

        if(ParseName(global, (char *)pkt->dp_Arg2, &nlock, global->work))
        {
            BUG(("ActLock: Returning lock on root\n"));
            /* Return lock on root */
            /* ParseName has put the pseudolock for the root into nlock */
            flock = CreateLock(global, nlock, (RNPTR)1, pkt->dp_Arg3, NULL);
            nlock = (NETPTR)flock->fl_Key;

            pkt->dp_Res1 = MKBADDR(flock);
            HPQ(global, hpkt);
            return;
        } 
        else if (!nlock) 
        {
            BUG(("ActLock: Couldn't find node\n"));
d172 50
a221 41
            pkt->dp_Res1 = NULL;
            pkt->dp_Res2 = ERROR_OBJECT_NOT_FOUND;
            HPQ(global, hpkt);
            return;
        }
        BUG(("ActLock: got nlock, falling through\n"));
        if(!(RP = AllocRPacket(nlock->NetNode, BSTRLEN(global->work)+1)))
        {
           norpkt:
           pkt->dp_Res1 = DOS_FALSE;
           pkt->dp_Res2 = ERROR_NO_FREE_STORE;
           HPQ(global, hpkt);
           return;
        }
        MBSTR(global->work, RP->DataP);
    } 
    else 
    {
        BUGBSTR("ActLock: Relative open, node ", nlock->NetNode->name);
        /* We are doing a relative open - put filename in Data */
        if(!(RP = AllocRPacket(nlock->NetNode, 0))) goto norpkt;
        RP->DataP = (char *)pkt->dp_Arg2;
    }

    RP->Type = pkt->dp_Type;
    RP->Arg1 = (LONG)nlock;
    RP->Arg3 = pkt->dp_Arg3;
    RP->Arg4 = (pkt->dp_Arg3 == SHARED_LOCK && (global->flags & NGF_RELOCK));
    RP->DLen = BSTRLEN(RP->DataP)+1;
    if (RP->DLen == 1)
        RP->DLen = 0;

    RP->handle = hpkt;

    hpkt->hp_RP = RP;
    hpkt->hp_Func = ActLock2;
    hpkt->hp_NNode = nlock->NetNode;
    hpkt->hp_Driver = nlock->NetNode->driver;

    hpkt->hp_NPFlags = NP1;
    pkt->dp_Res1 = (LONG)nlock;
d223 1
a223 1
    RemotePacket(global, hpkt);
d441 2
a442 3
#define NODEINFONAME "devs/networks/icons/__NODE__.info"
      name = NODEINFONAME;
      len = strlen(NODEINFONAME);
@


1.15
log
@Implement reestablishing of shared locks
Add parm to CreateLock
@
text
@d237 1
d239 8
@


1.14
log
@Handle NULL lock correctly in DupLock
@
text
@d29 2
a30 5
CreateLock(global, nlock, RLock, Access)
GLOBAL global;
NETPTR nlock;
RNPTR RLock;
LONG Access;
d39 1
a39 2
#if 0
    if(Access == SHARED_LOCK && (global->flags & NGF_RELOCK))
d42 1
a42 1
      len = global->RP.DLen;
a44 1
#endif
a63 1
#if 0
d68 2
a69 1
       memcpy(newnlock->objname, global->RP.DataP, len);
a72 1
#endif
d161 1
a161 1
            flock = CreateLock(global, nlock, (RNPTR)1, pkt->dp_Arg3);
d233 1
a233 1
         newflock = CreateLock(global, nlock, (RNPTR)RP->Arg1, pkt->dp_Arg3);
d261 1
a261 1
         flock = CreateLock(global, nlock, (RNPTR)1, flock->fl_Access);
d309 1
a309 1
                                        flock->fl_Access));
@


1.13
log
@*** empty log message ***
@
text
@d266 2
a267 2
      if(!flock) return;    /* Dup of null lock is null lock            */
      flock = CreateLock(global, nlock, (RNPTR)1, flock->fl_Access);
@


1.12
log
@Change name for remote node
icon file to devs:networks/icons/__NODE__.info
@
text
@d203 1
a203 1
    RP->Arg1 = (LONG)nlock->RPtr;
a212 1
    hpkt->hp_NPFlags = NP1;
d217 1
d285 1
a285 1
   RP->Arg1 = (LONG)nlock->RPtr;
d341 1
a341 1
      RP->Arg1 = (LONG)nlock->RPtr;
d348 2
d357 17
a374 1
   if(flock) FreeLock(global, flock);
@


1.11
log
@*** empty log message ***
@
text
@d411 1
a411 1
#define NODEINFONAME "net_exports/node.rinfo"
@


1.10
log
@Many bug fixes, incl. proper passing of the res1 and res2 fields
@
text
@d345 1
d356 1
a356 1
   FreeLock(global, flock);
@


1.9
log
@Correct duplock problem
@
text
@a231 3
   hpkt->hp_Func = NULL;
   HPQ(global, hpkt);

d310 1
a310 11
   nlock = (NETPTR)pkt->dp_Res1;
   hpkt->hp_Func = NULL;
   HPQ(global, hpkt);

   if(hpkt->hp_State == HPS_ERR)
   {
      pkt->dp_Res1 = DOS_FALSE;
      pkt->dp_Res2 = ERROR_NODE_DOWN;
      
   }
   else
d312 1
@


1.8
log
@New cut that (almost) works
@
text
@d326 1
a326 1
      pkt->dp_Res1 = MKBADDR(CreateLock(global, nlock, (RNPTR)pkt->dp_Res1, 
@


1.7
log
@fix probs
,
@
text
@d142 1
a142 1
    BUG(("Action Lock\n"));
d230 2
d262 1
a262 1
   BUG(("Action DupLock\n"));
d274 1
d283 1
d311 2
d339 1
a339 1
   BUG(("Action UnLock\n"));
a460 2
BUG(("FindNode: name is '%s'\n", name))

a462 1
BUG(("FindNode: '%s' vs '%s'\n", name, node->name+1))
d466 1
a466 1
BUG(("FindNode: %s\n", node ? "SUCCESS" : "FAILURE"))
@


1.6
log
@New cut that (almost) works
@
text
@a224 2
   char *newname;
   int newnamelen;
a229 2
   BUG(("ActLock: Returned RNPTR is %lx\n", hpkt->hp_RP->Arg1));

d233 1
a233 1
   if(hpkt->hp_State == HPS_ERR)
d235 10
a244 2
      pkt->dp_Res1 = DOS_FALSE;
      pkt->dp_Res2 = ERROR_NODE_DOWN;
d246 1
d248 3
a250 8
   {
      nlock = (NETPTR)pkt->dp_Res1;
      newname = (char *)pkt->dp_Arg2+1;
      newnamelen = ((unsigned char *)pkt->dp_Arg2)[0];
      newflock = CreateLock(global, nlock, (RNPTR)RP->Arg1, pkt->dp_Arg3);
      pkt->dp_Res1 = MKBADDR(newflock);
      pkt->dp_Res2 = RP->Arg2;
   }
@


1.5
log
@Rewrite for asynchronous execution
@
text
@d212 1
d289 1
d350 1
@


1.4
log
@Check for failure from AddNode
@
text
@d42 1
d49 1
d69 1
d78 1
d131 5
a135 7
void
ActLock(global, pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent       */
                        /* Arg1: Lock */
                        /* Arg2: Name */
                        /* Arg3: Mode: ACCESS_READ, ACCESS_WRITE */
d137 4
a140 2
    NETPTR nlock, newnlock;
    struct FileLock *flock, *newflock;
d162 1
a162 1
        if(ParseName(global, (char *)pkt->dp_Arg2, &nlock, global->RP.DataP))
d171 1
d180 1
d183 2
a184 2
#if DEBUG
        else 
d186 5
a190 1
            BUG(("ActLock: got nlock, falling through\n"));
d192 1
a192 1
#endif
d198 2
a199 1
        MBSTR(pkt->dp_Arg2, global->RP.DataP);
d202 30
a231 7
    global->RP.Type = pkt->dp_Type;
    global->RP.Arg1 = (LONG)nlock->RPtr;
    global->RP.Arg3 = pkt->dp_Arg3;
    global->RP.Arg4 = (pkt->dp_Arg3 == SHARED_LOCK && (global->flags & NGF_RELOCK));
    global->RP.DLen = BSTRLEN(global->RP.DataP)+1;
    if (global->RP.DLen == 1)
        global->RP.DLen = 0;
d233 2
a234 7
    if (!RemotePacket(global, nlock, &global->RP) && pkt->dp_Res1) 
    {
        char *newname;
        int newnamelen;
        BUG(("ActLock: Returned RNPTR is %lx\n", pkt->dp_Res1));
        newname = (char *)pkt->dp_Arg2+1;
        newnamelen = ((unsigned char *)pkt->dp_Arg2)[0];
d236 14
a249 5
        newflock = CreateLock(global, nlock, 
                                 (RNPTR)pkt->dp_Res1, pkt->dp_Arg3);
        newnlock = (NETPTR)newflock->fl_Key;
        pkt->dp_Res1 = MKBADDR(newflock);
    }
d252 1
a252 4
void
ActDupLock(global,pkt)
GLOBAL global;
struct DosPacket      *pkt;      /* a pointer to the dos packet sent       */
d254 4
a257 2
   NETPTR nlock, newnlock;
   struct FileLock *flock, *newflock;
a265 1
      pkt->dp_Res1 = (RNPTR)1;
d267 13
a279 1
      goto GETLOCK;           /* Dup of real lock on root is real lock (?)*/
d282 26
a307 11
   global->RP.Type = pkt->dp_Type;
   global->RP.Arg1 = (LONG)nlock->RPtr;
   global->RP.Arg4 = (global->flags & NGF_RELOCK);
   global->RP.DLen = 0;

   if (!RemotePacket(global, nlock, &global->RP) && pkt->dp_Res1) 
   {
GETLOCK:
      newflock = CreateLock(global, nlock,
                              (RNPTR)pkt->dp_Res1, flock->fl_Access);
      newnlock = (NETPTR)flock->fl_Key;
d309 12
a320 1
      pkt->dp_Res1 = MKBADDR(newflock);
d324 1
a324 4
void
ActUnLock(global, pkt)
GLOBAL global;
struct DosPacket *pkt; /* a pointer to the dos packet sent */
d328 2
d337 14
a350 4
      global->RP.Type = pkt->dp_Type;
      global->RP.Arg1 = (LONG)nlock->RPtr;
      global->RP.DLen = 0;
      RemotePacket(global, nlock, &global->RP);
d356 1
@


1.3
log
@New version
@
text
@a287 4
#if DEBUG
char orgname[100];
#endif

a317 3
#if DEBUG
strcpy(orgname, outname);
#endif
a320 9
BUG(("ParseName: After FindNode, name is still %s\n", outname))

#if DEBUG
if(strcmp(orgname, outname))
{
   BUG(("*****************NAME MISMATCH\n"))
   BUGGETC
}
#endif
d328 4
a331 2
      name = "Node.rinfo";
      len = 10;
a333 2
BUG(("ParseName: node name is still %s\n", outname))

d341 2
a342 2
      node = AddNode(global, bname);
      strcpy(node->devname, outname);
@


1.2
log
@Eliminate RDevice
@
text
@d51 2
a52 2
    if (flock == NULL)
        return(NULL);
d54 2
a55 2
    if (newnlock == NULL)
        return(NULL);
d150 1
a150 2

    if(!flock || (nlock=(NETPTR)flock->fl_Key) != (NETPTR)nlock->NetNode)
d163 1
a163 1
            flock = CreateLock(global, nlock, NULL, pkt->dp_Arg3);
d227 1
a227 1
   if(!flock || (nlock=(NETPTR)flock->fl_Key) != (NETPTR)nlock->NetNode)
d229 1
a229 1
      pkt->dp_Res1 = NULL;
a260 7
   if (!flock) 
   {
      /* No lock - do nothing */
      pkt->dp_Res1 = DOS_TRUE;
      return;
   }

d262 1
a262 1
   if ((nlock=(NETPTR)flock->fl_Key) != (NETPTR)nlock->NetNode)
a292 1

a324 1

a359 1

a383 1

@


1.1
log
@Initial revision
@
text
@a63 1
    newnlock->RDevice = nlock->RDevice;
d119 1
a119 3
   /* If RDevice == NULL, we have a dummy nlock, so don't free it */
   /* Otherwise, free it                                           */
   if (nlock->RDevice)
d151 1
a151 1
    if(!flock || !(nlock=(NETPTR)flock->fl_Key)->RDevice)
d228 1
a228 1
   if(!flock || !(nlock=(NETPTR)flock->fl_Key)->RDevice)
d270 1
a270 1
   if ((nlock=(NETPTR)flock->fl_Key)->RDevice)
d310 1
a310 1
   for (len=*(name++), cur=0; len && *name != '/'; len--, name++) 
a329 1

d367 1
a367 1
      node = AddNode(global, bname, NULL);
@
