head     1.15;
branch   ;
access   ;
symbols  r37-9:1.15 v37r4:1.14 Distillery:1.14;
locks    ; strict;
comment  @ * @;


1.15
date     91.05.11.12.26.30;  author J_Toebes;  state Exp;
branches ;
next     1.14;

1.14
date     91.03.09.21.01.17;  author J_Toebes;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.17.01.11.06;  author Doug;  state Exp;
branches ;
next     1.12;

1.12
date     91.01.11.10.36.37;  author Doug;  state Exp;
branches ;
next     1.11;

1.11
date     91.01.06.20.51.48;  author Doug;  state Exp;
branches ;
next     1.10;

1.10
date     90.12.31.13.52.44;  author Doug;  state Exp;
branches ;
next     1.9;

1.9
date     90.12.03.20.05.52;  author Doug;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.27.22.13.07;  author Doug;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.25.15.50.40;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.20.01.06.58;  author Doug;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.18.00.03.23;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.10.18.00.23.01;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.09.23.56.40;  author Doug;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.02.33.05;  author Doug;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.39.23;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@io packet handling routines
@


1.15
log
@Add code to normalize a name relative to a lock so that it works with
assigns across the network.
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* File Access:            */
/* ActRead ActWrite ActSeek ActWaitForChar    */
/* ActFindwrite ActFindin ActFindout ActEnd   */

#include "handler.h"

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                 ActRead( global, pkt )                                  */
/*                                                                         */
/*-------------------------------------------------------------------------*/

/* Arg1: APTR EFileHandle */
/* Arg2: APTR Buffer      */
/* Arg3: Length           */
ACTFN(ActRead)
{
   NETPTR nfile;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP;

   nfile = (NETPTR)pkt->dp_Arg1;

   if(pkt->dp_Arg3 == 0)
   {
      pkt->dp_Res1 =
      pkt->dp_Res2 = 0;
      HPQ(global, hpkt);
      return;
   }

   if(!(RP = AllocRPacket(nfile->NetNode, 0)))
   {
      pkt->dp_Res1 = -1;
      pkt->dp_Res2 = ERROR_NO_FREE_STORE;
      HPQ(global, hpkt);
      return;
   }

   /* I keep a running total of the number of bytes read in dp_Res1 */
   pkt->dp_Res1 = 0;
   pkt->dp_Res2 = (LONG)nfile;

   RP->Arg2 =
   RP->Type = (pkt->dp_Arg3 > global->n.NetBufSize 
                            ? ACTION_READ_MORE : ACTION_READ);
   RP->Arg4 = -1;  /* To let server know this is the first packet */
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_NPFlags = NP1;
   hpkt->hp_Func = ActRead2;
   hpkt->hp_NNode = nfile->NetNode;
   hpkt->hp_Driver = nfile->NetNode->driver;

   ActRead2(global, hpkt);
}

ACTFN(ActRead2)
{
   int amtread;
   struct RPacket *RP = hpkt->hp_RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   int eof = 0;

   if(RP->Arg4 != -1)
   {
      /* Not the first time in here, process the results of the last time */
      if(hpkt->hp_State == HPS_ERR || (amtread=RP->Arg1) < 0) 
      {
         if(hpkt->hp_State == HPS_ERR)
         {
            pkt->dp_Res1 = -1;  /* RemotePacket would have set it to 0 */
         }
         else
         {
            pkt->dp_Res1 = RP->Arg1;
            pkt->dp_Res2 = RP->Arg2;
         }
         /* hp_Func should be NULL, so the packet will get returned this time */
         return;
      }

      if(amtread > 0) memcpy((char *)pkt->dp_Arg2+pkt->dp_Res1, RP->DataP, amtread);
      pkt->dp_Res1 += amtread;

      /* Successful read for less than specified amount is EOF */
      if(amtread < RP->Arg3 || RP->Arg3 == 0) eof = 1;
   }
   else if(RP->Type == ACTION_READ)
   {
      /* Not READ_MORE, so the other side won't change Arg4 */
      /* We'd better do it so we know next time to do the above stuff */
      RP->Arg4 = -2;
   }

   if(pkt->dp_Res1 < pkt->dp_Arg3 && !eof)
   {
      /* Still some left to read - do it */
      /* Arg1 must be reinitialized each time since it will be trashed */
      /* with the dp_Res1 field by the remote side                     */
      RP->Arg1 = pkt->dp_Res2;
      RP->Arg3 = min(pkt->dp_Arg3-pkt->dp_Res1, global->n.NetBufSize);
      RP->DLen = 0;
      hpkt->hp_Func = ActRead2;

      RemotePacket(global, hpkt);
   }
   else
   {
      /* successful read                    */
      /* dp_Res1 is already set             */
      pkt->dp_Res2 = RP->Arg2;
      return;
   }

}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                      ActWrite( global, pkt )                            */
/*                                                                         */
/*-------------------------------------------------------------------------*/

/* This should probably be changed to look for a confirmation after */
/* each write in order to notice errors faster - djw                */

/* Arg1: APTR EFileHandle */
/* Arg2: APTR Buffer */
/* Arg3: Length */

ACTFN(ActWrite)
{
   NETPTR nfile;
   struct RPacket *RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;

   nfile = (NETPTR)pkt->dp_Arg1;

   if(pkt->dp_Arg3 == 0)
   {
      pkt->dp_Res1 =
      pkt->dp_Res2 = 0;
      HPQ(global, hpkt);
      return;
   }

   if(!(RP = AllocRPacket(nfile->NetNode, 0)))
   {
      pkt->dp_Res1 = -1;
      pkt->dp_Res2 = ERROR_NO_FREE_STORE;
      HPQ(global, hpkt);
      return;
   }

   pkt->dp_Res1 = 0L;
   pkt->dp_Res2 = (LONG)nfile;

   RP->Type = (pkt->dp_Arg3 > global->n.NetBufSize ? 
                              ACTION_WRITE_MORE : ACTION_WRITE);
   RP->Arg4 = -1;
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_Func = ActWrite2;
   hpkt->hp_NPFlags = NP1;
   hpkt->hp_NNode = nfile->NetNode;
   hpkt->hp_Driver = nfile->NetNode->driver;


   ActWrite2(global, hpkt);
}

ACTFN(ActWrite2)
{
   struct RPacket *RP = hpkt->hp_RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;
   int amtwrite;

   if(RP->Arg4 != -1)
   {
      /* Not the first time in here, process the results of the last time */
      if(hpkt->hp_State == HPS_ERR || (amtwrite=RP->Arg1) <= 0) 
      {
         if(hpkt->hp_State == HPS_ERR)
         {
            pkt->dp_Res1 = -1;  /* RemotePacket would have set it to 0 */
         }
         else
         {
            pkt->dp_Res1 = RP->Arg1;
            pkt->dp_Res2 = RP->Arg2;
         }
         return;
      }

      pkt->dp_Res1 += amtwrite;
   }
   else if(RP->Type == ACTION_WRITE)
   {
      /* Not WRITE_MORE, so the other side won't change Arg4          */
      /* We'd better do it so we know next time to do the above stuff */
      RP->Arg4 = -2;
   }


   if(pkt->dp_Res1 < pkt->dp_Arg3 && pkt->dp_Arg3 > 0)
   {
      RP->Arg1 = pkt->dp_Res2;  /* Must do this every time */
      RP->DLen = RP->Arg3 =
           min(pkt->dp_Arg3-pkt->dp_Res1, global->n.NetBufSize);
      RP->DataP = ((char *)pkt->dp_Arg2)+pkt->dp_Res1;
      hpkt->hp_Func = ActWrite2;

      RemotePacket(global, hpkt);
   }
   else
   {
      /* Write complete */
      pkt->dp_Res2 = RP->Arg2;
   }
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                       ActSeek( global, pkt )                              */
/*                                                                           */
/*---------------------------------------------------------------------------*/

/* Arg1: APTR EFileHandle */
/* Arg2: Position */
/* Arg3: Mode */

ACTFN(ActSeek)
{
    NETPTR nfile;
    struct RPacket *RP;
    struct DosPacket *pkt = hpkt->hp_Pkt;

    nfile = (NETPTR)pkt->dp_Arg1;

    if(!(RP = AllocRPacket(nfile->NetNode, 0)))
    {
      pkt->dp_Res1 = -1;
      pkt->dp_Res2 = ERROR_NO_FREE_STORE;
      HPQ(global, hpkt);
      return;
   }

    RP->Type = pkt->dp_Type;
    RP->Arg1 = (LONG)nfile;
    RP->Arg2 = pkt->dp_Arg2;
    RP->Arg3 = pkt->dp_Arg3;
    RP->DLen = 0;
    RP->handle = hpkt;

    hpkt->hp_RP = RP;
    hpkt->hp_NPFlags = NP1;
    hpkt->hp_NNode = nfile->NetNode;
    hpkt->hp_Driver = nfile->NetNode->driver;

    RemotePacket(global, hpkt);
}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                    ActFindwrite( global, pkt )                          */
/*                                                                         */
/*-------------------------------------------------------------------------*/

/* ARG1: FileHandle to fill in */
/* ARG2: Lock for file relative to */
/* Arg3: Name of file */

ACTFN(ActFindwrite)
{
   struct FileHandle *fh;
   NETPTR nlock;
   struct FileLock *flock;
   struct RPacket *RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;

   /* Code 1004 -
    *   If file does not exist, open should fail.
    *   If file does exist, open with an exclusive lock
    */

   fh = (struct FileHandle *)pkt->dp_Arg1;

   flock = (struct FileLock *)pkt->dp_Arg2;
   if(TESTROOT(flock, nlock))
   {
      if (ParseName(global, (char *)pkt->dp_Arg3, &nlock, global->work) ||
          !nlock)
      {
         /* Can't open files in NET: itself */
         pkt->dp_Res1 = NULL;
         pkt->dp_Res2 = (nlock   ? ERROR_OBJECT_NOT_FOUND
                                 : ERROR_OBJECT_WRONG_TYPE);
         HPQ(global, hpkt);
         return;
      }
      if(!(RP = AllocRPacket(nlock->NetNode, BSTRLEN(global->work)+1)))
      {
         norpkt:
         pkt->dp_Res1 = DOS_FALSE;
         pkt->dp_Res2 = ERROR_NO_FREE_STORE;
         HPQ(global, hpkt);
         return;
      }
      MBSTR(global->work, RP->DataP);
   } 
   else 
   {
      if(!(RP = AllocRPacket(nlock->NetNode, 0))) goto norpkt;
      RP->DataP = (char *)pkt->dp_Arg3;
      NetNormalizeName(RP->DataP);
   }

   RP->Type = pkt->dp_Type;
   RP->Arg2 = (LONG)nlock;
   if(!memcmp(RP->DataP, "\2::", 3))
   {
      /* Special name meaning nodename.info file on remote side */
      RP->Arg3 = 1;
      RP->DLen = 0;
   }
   else
   {
      RP->Arg3 = 0;
      RP->DLen = BSTRLEN(RP->DataP)+1;
      if (RP->DLen == 1)
          RP->DLen = 0;
   }
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_NPFlags = NP2;
   hpkt->hp_Func = ActFindwrite2;
   hpkt->hp_NNode = nlock->NetNode;
   hpkt->hp_Driver = nlock->NetNode->driver;

   pkt->dp_Res1 = (LONG)fh;
   pkt->dp_Res2 = (LONG)nlock;

   RemotePacket(global, hpkt);
}

ACTFN(ActFindwrite2)
{
   struct FileHandle *fh;
   NETPTR nfile;
   NETPTR nlock;
   struct RPacket *RP = hpkt->hp_RP;
   struct DosPacket *pkt = hpkt->hp_Pkt;

   if(hpkt->hp_State != HPS_ERR)
   {
      if(RP->Arg1 != DOS_FALSE)
      {
         fh = (struct FileHandle *)pkt->dp_Res1;
         nlock = (NETPTR)pkt->dp_Res2;

         if(RP->Arg1 != DOS_FALSE)
         {
            if (!(nfile=(NETPTR)DosAllocMem(global, (long)sizeof(struct NetPtr)))) 
            {
               BUG(("******NO MEMORY FOR LOCAL LOCK"));
               pkt->dp_Res1 = DOS_FALSE;
               pkt->dp_Res2 = ERROR_NO_FREE_STORE;
               return;
            }

            nfile->NetNode     = nlock->NetNode;
            /* Remote filehandle passed back in RP.Arg3 */
            nfile->RPtr        = (RNPTR)RP->Arg3;
            nfile->incarnation = nfile->NetNode->RootLock.incarnation;

            /* RP.Arg4 tells us if it's an interactive filehandle */

            fh->fh_Arg1 = (LONG)nfile;
         }
      }
      pkt->dp_Res1 = RP->Arg1;
      pkt->dp_Res2 = RP->Arg2;
   }
#if DEBUG
   else
   {
      BUG(("ActFind2: Write error\n"))
   }
#endif
}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                       ActEnd( global, pkt )                             */
/*-------------------------------------------------------------------------*/

ACTFN(ActEnd)
{
   NETPTR nfile;
   struct RPacket *RP;

   nfile = (NETPTR)hpkt->hp_Pkt->dp_Arg1;

   if(!(RP = AllocRPacket(nfile->NetNode, 0)))
   {
      hpkt->hp_Pkt->dp_Res1 = DOS_FALSE;
      hpkt->hp_Pkt->dp_Res2 = ERROR_NO_FREE_STORE;
      HPQ(global, hpkt);
      return;
   }

   RP->Type = hpkt->hp_Pkt->dp_Type;
   RP->Arg1 = (LONG)nfile;
   RP->DLen = 0;
   RP->handle = hpkt;

   hpkt->hp_RP = RP;
   hpkt->hp_NNode = nfile->NetNode;
   hpkt->hp_Driver = nfile->NetNode->driver;
   hpkt->hp_NPFlags = NP1;

   hpkt->hp_Func = ActEnd2;
   hpkt->hp_Pkt->dp_Res1 = (LONG)nfile;

   RemotePacket(global, hpkt);
}

ACTFN(ActEnd2)
{
   struct DosPacket *pkt = hpkt->hp_Pkt;
   struct RPacket *RP = hpkt->hp_RP;

   if(hpkt->hp_State != HPS_ERR)
   {
      if(pkt->dp_Res1) DosFreeMem((char *)pkt->dp_Res1);

      pkt->dp_Res1 = RP->Arg1;
      pkt->dp_Res2 = RP->Arg2;
   }
}


@


1.14
log
@Make note about interactive file handles.
@
text
@d325 1
@


1.13
log
@Handle rebooting
@
text
@d385 2
@


1.12
log
@Handle reads and writes of 0 length
@
text
@d384 1
a384 1
            nfile->incarnation = nfile->NetNode->incarnation;
@


1.11
log
@Revise debugging messages
@
text
@d32 8
d147 8
@


1.10
log
@implement special-case handling for nodename.info files
@
text
@a29 2
   BUG(("ActRead: Entry, hpkt %08lx\n", hpkt));

a65 2
   BUG(("ActRead2: Entry, hpkt 0x%08lx\n", hpkt))

a70 1
         BUG(("ActRead2: Read error: codes %lx,m, %lx\n", RP->Arg1,RP->Arg2));
a99 2
      BUG(("ActRead2: reading more, %d < %d\n", pkt->dp_Res1, pkt->dp_Arg3))

a112 1
      BUG(("ActRead2: All done, %d read\n", pkt->dp_Res1))
a137 2
   BUG(("ActWrite: Entry, hpkt %08lx\n", hpkt));

a144 1
      BUG(("ActWrite: Can't AllocRPacket\n"))
a171 2
   BUG(("ActWrite2: Entry, hpkt 0x%08lx\n", hpkt))

a176 3
         BUG(("Write error: codes %lx,m, %lx\n",
              RP->Arg1, RP->Arg2));

a203 1
      BUG(("ActWrite: this write=%d\n", RP->DLen))
a231 2
    BUG(("ActSeek: Entry, hpkt %08lx\n", hpkt));

a274 2
   BUG(("ActFindwrite: Entry, hpkt %08lx\n", hpkt));

a292 1
         BUG(("ActFindWrite: Can't open in NET: root\n"))
a300 1
         BUG(("ActFindWrite: Can't AllocRPacket!\n"))
a347 2
   BUG(("ActFind2: Entry, hpkt %08lx\n", hpkt))

a349 1
      BUG(("ActFind2: RC %d %d\n", RP->Arg1, RP->Arg2))
a356 1
            BUG(("ActFind2: Valid local filehandle = %lx\n", fh));
a393 2
   BUG(("ActEnd: Entry, hpkt %08lx\n", hpkt));

a423 2

   BUG(("ActDupLock2: Entry, hpkt %08lx\n", hpkt))
@


1.9
log
@*** empty log message ***
@
text
@d336 13
a348 1
   RP->DLen = BSTRLEN(RP->DataP)+1;
a349 2
   if (RP->DLen == 1)
       RP->DLen = 0;
@


1.8
log
@Many bug fixes, incl. proper passing of the res1 and res2 fields
@
text
@d44 1
a44 1
   pkt->dp_Res2 = (LONG)nfile->RPtr;
d55 1
a55 1
  hpkt->hp_NNode = nfile->NetNode;
d160 1
a160 1
   pkt->dp_Res2 = (LONG)nfile->RPtr;
d262 1
a262 1
    RP->Arg1 = (LONG)nfile->RPtr;
d335 1
a335 1
   RP->Arg2 = (LONG)nlock->RPtr;
d424 1
a424 1
   RP->Arg1 = (LONG)nfile->RPtr;
d431 1
d433 2
a434 1
   DosFreeMem((char *)nfile);
d438 18
@


1.7
log
@New cut that (almost) works
@
text
@d55 1
a55 1
   hpkt->hp_NNode = nfile->NetNode;
d85 1
a85 2
         hpkt->hp_Func = NULL;  /* We're done with this now */
         HPQ(global, hpkt);
a121 2
      hpkt->hp_Func = NULL;
      HPQ(global, hpkt);
a201 2
         hpkt->hp_Func = NULL;  /* We're done with this now */
         HPQ(global, hpkt);
d207 7
d222 1
a229 2
      hpkt->hp_Func = NULL;
      HPQ(global, hpkt);
d363 1
a363 7
   fh = (struct FileHandle *)pkt->dp_Res1;
   nlock = (NETPTR)pkt->dp_Res2;

   hpkt->hp_Func = NULL;
   HPQ(global, hpkt);

   if(hpkt->hp_State != HPS_ERR && RP->Arg1 != DOS_FALSE)
d365 2
a366 2
      BUG(("ActFind2: Valid local filehandle = %lx\n", fh));
      if (!(nfile=(NETPTR)DosAllocMem(global, (long)sizeof(struct NetPtr)))) 
d368 2
a369 5
         BUG(("******NO MEMORY FOR LOCAL LOCK"));
         pkt->dp_Res1 = DOS_FALSE;
         pkt->dp_Res2 = ERROR_NO_FREE_STORE;
         return;
      }
d371 15
a385 4
      nfile->NetNode     = nlock->NetNode;
      /* Remote filehandle passed back in RP.Arg3 */
      nfile->RPtr        = (RNPTR)RP->Arg3;
      nfile->incarnation = nfile->NetNode->incarnation;
d387 5
a391 4
      fh->fh_Arg1 = (LONG)nfile;

      pkt->dp_Res1 = DOS_TRUE;
      pkt->dp_Res2 = 0;
d396 1
a396 2
      BUG(("ActFind2: Remote file open failed, codes %d %d\n",
         RP->Arg1, RP->Arg2))
@


1.6
log
@New cut that (almost) works
/
@
text
@d30 1
a30 1
   BUG(("ActRead\n"));
d68 2
d75 1
a75 2
         BUG(("Read error: codes %lx,m, %lx\n",
              RP->Arg1,RP->Arg2));
d96 6
d106 1
d121 1
d149 1
a149 1
   BUG(("ActWrite\n"));
d158 1
d186 2
d248 1
a248 1
    BUG(("ActSeek\n"));
d293 1
a293 1
   BUG(("ActFindwrite\n"));
d313 1
d322 1
d360 2
d368 1
a368 1
   if(hpkt->hp_State != HPS_ERR && hpkt->hp_RP->Arg1 != DOS_FALSE)
d385 3
d392 1
a392 1
      BUG(("ActFind: Remote file open failed, codes %d %d\n",
d408 1
a408 1
   BUG(("ActEnd\n"));
@


1.5
log
@Rewrite for asynchronous execution
@
text
@a48 1

a49 1

d52 1
a53 1
   
a54 1

d152 3
a157 1

d160 1
a160 3
   pkt->dp_Res1 = 0L;
   pkt->dp_Res2 = (LONG)nfile->RPtr;

a161 1

a162 1

a252 1

d255 1
a322 1

d326 1
a327 1

d406 1
@


1.4
log
@Newer version.
@
text
@d21 4
a24 7
void
ActRead(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent    */
                        /* Arg1: APTR EFileHandle */
                        /* Arg2: APTR Buffer      */
                        /* Arg3: Length           */
d27 2
a28 3
   long toread, total, amtread, thisread;
   char *data;
   char *olddata;
d34 11
a44 1
   toread = pkt->dp_Arg3;
d46 11
a56 2
   global->RP.Type = (toread > global->n.NetBufSize 
                        ? ACTION_READ_MORE : ACTION_READ);
d58 2
a59 2
   olddata = global->RP.DataP;
   global->RP.Arg4 = -1;  /* To let server know this is the first packet */
d61 2
a62 10
   for (data=(char *)pkt->dp_Arg2, total=0L; toread > 0; toread-=amtread) 
   {
      /* Arg1 must be reinitialized each time since it will be trashed */
      /* by the remote side                                            */
      global->RP.Arg1 = (LONG)nfile->RPtr;
      global->RP.Arg3 = thisread = min(toread, global->n.NetBufSize);
      global->RP.DLen = 0;
      global->RP.DataP = data;
      if (RemotePacket(global, nfile, &global->RP))
         break;
d64 6
a69 2
      if ((amtread=global->RP.Arg1) == 0)
         break;
d71 4
a74 1
      if (amtread<0) 
d77 13
a89 4
              global->RP.Arg1,global->RP.Arg2));
         pkt->dp_Res1 = global->RP.Arg1;
         pkt->dp_Res2 = global->RP.Arg2;
         goto AFTER;
d92 2
a93 2
      total += amtread;
      data += amtread;
d95 14
a108 5
      if(amtread < thisread)
      {
         /* Successful read for less than specified amount, must be EOF */
         break;
      }
d110 10
a120 2
   pkt->dp_Res1 = total;
   pkt->dp_Res2 = global->RP.Arg2;
a121 2
AFTER: 
   global->RP.DataP = olddata;
d133 5
a137 7
void
ActWrite(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent       */
                        /* Arg1: APTR EFileHandle */
                        /* Arg2: APTR Buffer */
                        /* Arg3: Length */
d140 2
a141 2
   long towrite, total, amtwrite, thiswrite;
   char *data, *olddata;
d147 9
a155 2
   towrite = pkt->dp_Arg3;
   global->RP.Type = (towrite > global->n.NetBufSize ? 
d157 14
a170 1
   global->RP.Arg4 = -1;
d172 30
a201 1
   olddata= global->RP.DataP;
d203 1
a203 17
   data = (char *)pkt->dp_Arg2;
   total = 0L;

   while(towrite > 0)
   {
      global->RP.Arg1 = (LONG)nfile->RPtr;
      global->RP.DLen = global->RP.Arg3 = thiswrite = 
           min(towrite, global->n.NetBufSize);
      BUG(("ActWrite: thiswrite=%d\n", thiswrite))
      global->RP.DataP = data;

      if(RemotePacket(global, nfile, &global->RP) || (amtwrite=pkt->dp_Res1) <= 0)
         break;

      total += amtwrite;
      towrite -= amtwrite;
      data += amtwrite;
d206 10
a215 2
   if (pkt->dp_Res1 >= 0)
      pkt->dp_Res1 = total;
d217 6
a222 5
      pkt->dp_Res2 = global->RP.Arg2;

   global->RP.DataP = olddata;

   BUG(("ActWrite: Ending, %d bytes written\n", total));
d231 5
a235 7
void
ActSeek(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent      */
                        /* Arg1: APTR EFileHandle */
                        /* Arg2: Position */
                        /* Arg3: Mode */
d238 2
d245 19
a263 5
    global->RP.Type = pkt->dp_Type;
    global->RP.Arg1 = (LONG)nfile->RPtr;
    global->RP.Arg2 = pkt->dp_Arg2;
    global->RP.Arg3 = pkt->dp_Arg3;
    global->RP.DLen = 0;
d265 1
a265 1
    RemotePacket(global, nfile, &global->RP);
d274 5
a278 7
void
ActFindwrite(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent    */
                        /* ARG1: FileHandle to fill in */
                        /* ARG2: Lock for file relative to */
                        /* Arg3: Name of file */
d281 1
a281 1
   NETPTR nlock, nfile;
d283 2
d298 1
a298 1
      if (ParseName(global, (char *)pkt->dp_Arg3, &nlock, global->RP.DataP) ||
d305 9
d316 1
d320 2
a321 1
       MBSTR(pkt->dp_Arg3, global->RP.DataP);
d324 4
a327 6
   global->RP.Type = pkt->dp_Type;
   global->RP.Arg2 = (LONG)nlock->RPtr;
   global->RP.DLen = BSTRLEN(global->RP.DataP)+1;

   if (global->RP.DLen == 1)
       global->RP.DLen = 0;
d329 30
a358 1
   if (!RemotePacket(global, nlock, &global->RP) && pkt->dp_Res1 != DOS_FALSE) 
d360 1
a360 1
      BUG(("ActFind: Valid local filehandle = %lx\n", fh));
d371 1
a371 1
      nfile->RPtr        = (RNPTR)global->RP.Arg3;
d378 1
d380 2
a381 1
            pkt->dp_Res1, pkt->dp_Res2));
d390 1
a390 4
void
ActEnd( global, pkt )
GLOBAL global;
struct DosPacket *pkt;             /* a pointer to the dos packet sent    */
d393 1
d397 9
a405 1
   nfile = (NETPTR)pkt->dp_Arg1;
d407 4
a410 3
   global->RP.Type = pkt->dp_Type;
   global->RP.Arg1 = (LONG)nfile->RPtr;
   global->RP.DLen = 0;
d412 2
a413 1
   RemotePacket(global, nfile, &global->RP);
d416 2
@


1.3
log
@Eliminate RDevice
@
text
@d29 4
a32 8
    NETPTR nfile;
    long toread, total, amtread;
    char *data;
    char *olddata;

    BUG(("ActRead\n"));

    nfile = (NETPTR)pkt->dp_Arg1;
d34 47
a80 3
    global->RP.Type = pkt->dp_Type;
    global->RP.Arg1 = (LONG)nfile->RPtr;
    global->RP.Arg3 = toread = pkt->dp_Arg3;
d82 2
a83 28
    olddata = global->RP.DataP;

    for (data=(char *)pkt->dp_Arg2, total=0L; toread > 0; toread-=amtread) 
    {
        global->RP.DLen = 0;
        global->RP.DataP = data;
        if (RemotePacket(global, nfile, &global->RP))
            return;

        if ((amtread=global->RP.Arg1) == 0)
            break;

        if (amtread<0) 
        {
            BUG(("Read error: codes %lx,m, %lx\n",
                 global->RP.Arg1,global->RP.Arg2));
            total = global->RP.Arg1;
            goto AFTER;
        }

        total += amtread;
        data += amtread;
    }
AFTER:
    pkt->dp_Res1 = total;
    pkt->dp_Res2 = global->RP.Arg2;
 
    global->RP.DataP = olddata;
d103 3
a105 13
    NETPTR nfile;
    long towrite, total, amtwrite;
    char *data, *olddata;

    BUG(("ActWrite\n"));

    nfile = (NETPTR)pkt->dp_Arg1;

    global->RP.Type = pkt->dp_Type;
    global->RP.Arg1 = (LONG)nfile->RPtr;
    towrite = pkt->dp_Arg3;

    olddata= global->RP.DataP;
d107 34
a140 21
    data = (char *)pkt->dp_Arg2;
    total = 0L;

    while(towrite > 0)
    {
        amtwrite = min(towrite, global->n.NetBufSize);
        BUG(("ActWrite: amtwrite=%d\n", amtwrite))
        global->RP.DataP = data;
        global->RP.DLen = global->RP.Arg3 = amtwrite;
        global->RP.Arg4 = (amtwrite == towrite ? 0 : 1);

        if (RemotePacket(global, nfile, &global->RP) || pkt->dp_Res1 <= 0)
            break;

        total += pkt->dp_Res1;
        towrite -= pkt->dp_Res1;
        data += pkt->dp_Res1;
    }

    if (pkt->dp_Res1 >= 0)
        pkt->dp_Res1 = total;
d142 1
a142 1
    global->RP.DataP = olddata;
d144 1
a144 1
    BUG(("ActWrite: Ending, %d bytes written\n", total));
d204 1
a204 1
   if(!flock || (nlock=(NETPTR)flock->fl_Key) != (NETPTR)nlock->NetNode)
@


1.2
log
@ACTFN macros
@
text
@d21 4
a27 1
ACTFN(ActRead)
a36 1
    toread = pkt->dp_Arg3;
d38 1
a38 2
    global->RP.Type = (toread <= global->n.NetBufSize ? ACTION_READ 
                                                      : ACTION_READ_MORE);
d40 1
a40 6
    global->RP.Arg4 = -1;   /* So the asynch server knows this is the first one */
                            /* Later it will contain the original file position */

#ifdef DEBUG
    if(global->n.NetBufSize <= 0) BUGR("Negative NetBufSize");
#endif
a43 4
    /* If and when we go asynchronous with NET:, global->RP.Arg2 can be used     */
    /* to store a copy of the current 'data' pointer.  'total' can be calculated */
    /* from this and the dos packet's original data pointer.                     */

a47 1
        global->RP.Arg3 = min(global->n.NetBufSize, toread);
d51 2
a52 2
        if((amtread = global->RP.Arg1) == 0)
            break;  /* EOF */
d54 1
a54 1
        if (amtread<0)
d57 2
a58 3
                 global->RP.Arg1, global->RP.Arg2));
            pkt->dp_Res1 = global->RP.Arg1;
            pkt->dp_Res2 = global->RP.Arg2;
d65 1
d67 1
a67 1
    pkt->dp_Res2 = 0;
a68 1
AFTER:
d81 4
a87 1
ACTFN(ActWrite)
a94 4
#ifdef DEBUG
    if(global->n.NetBufSize <= 0) BUGR("Negative NetBufSize");
#endif

d97 2
a99 4
    global->RP.Type = (towrite > global->n.NetBufSize ? ACTION_WRITE 
                                                      : ACTION_WRITE_MORE);
    global->RP.Arg1 = (LONG)nfile->RPtr;
    global->RP.Arg4 = -1;
d108 5
a112 4
       amtwrite = min(towrite, global->n.NetBufSize);
       BUG(("ActWrite: amtwrite=%d\n", amtwrite))
       global->RP.DataP = data;
       global->RP.DLen = global->RP.Arg3 = amtwrite;
d114 2
a115 2
       if (RemotePacket(global, nfile, &global->RP) || global->RP.Arg1 <= 0)
           break;
d117 3
a119 3
       total += (amtwrite=global->RP.Arg1);
       towrite -= amtwrite;
       data += amtwrite;
d122 2
a123 7
    if (global->RP.Arg1 >= 0)
       pkt->dp_Res1 = total;
    else
    {
       pkt->dp_Res1 = global->RP.Arg1;
       pkt->dp_Res2 = global->RP.Arg2;
    }
d136 4
a142 1
ACTFN(ActSeek)
d165 4
a171 1
ACTFN(ActFindwrite)
d187 1
a187 1
   if(!flock || !(nlock=(NETPTR)flock->fl_Key)->RDevice)
a222 1
      nfile->RDevice     = nlock->RDevice;
d241 4
a244 1
ACTFN(ActEnd)
@


1.1
log
@Initial revision
@
text
@a20 4
void
ActRead(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent    */
d24 1
d34 1
d36 2
a37 1
    global->RP.Type = pkt->dp_Type;
d39 6
a44 1
    global->RP.Arg3 = toread = pkt->dp_Arg3;
d48 4
d56 1
d60 2
a61 2
        if ((amtread=global->RP.Arg1) == 0)
            break;
d63 1
a63 1
        if (amtread<0) 
d66 3
a68 2
                 global->RP.Arg1,global->RP.Arg2));
            total = global->RP.Arg1;
a74 1
AFTER:
d76 1
a76 1
    pkt->dp_Res2 = global->RP.Arg2;
d78 1
a90 4
void
ActWrite(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent       */
d94 1
d102 4
d108 3
a110 1
    global->RP.Type = pkt->dp_Type;
d112 1
a112 1
    towrite = pkt->dp_Arg3;
d121 4
a124 5
        amtwrite = min(towrite, global->n.NetBufSize);
        BUG(("ActWrite: amtwrite=%d\n", amtwrite))
        global->RP.DataP = data;
        global->RP.DLen = global->RP.Arg3 = amtwrite;
        global->RP.Arg4 = (amtwrite == towrite ? 0 : 1);
d126 2
a127 2
        if (RemotePacket(global, nfile, &global->RP) || pkt->dp_Res1 <= 0)
            break;
d129 3
a131 3
        total += pkt->dp_Res1;
        towrite -= pkt->dp_Res1;
        data += pkt->dp_Res1;
d134 7
a140 2
    if (pkt->dp_Res1 >= 0)
        pkt->dp_Res1 = total;
a152 4
void
ActSeek(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent      */
d156 1
a178 4
void
ActFindwrite(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent    */
d182 1
d253 1
a253 4
void
ActEnd( global, pkt )
GLOBAL global;
struct DosPacket *pkt;             /* a pointer to the dos packet sent    */
@
