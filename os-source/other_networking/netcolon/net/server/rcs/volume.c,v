head     1.20;
branch   ;
access   ;
symbols  r37-12:1.20 v37r8:1.16 Distillery:1.15;
locks    ; strict;
comment  @ * @;


1.20
date     91.05.15.11.30.02;  author dlarson;  state Stab;
branches ;
next     1.19;

1.19
date     91.05.14.16.12.07;  author dlarson;  state Stab;
branches ;
next     1.18;

1.18
date     91.05.10.21.50.30;  author dlarson;  state Stab;
branches ;
next     1.17;

1.17
date     91.05.10.13.34.06;  author dlarson;  state Exp;
branches ;
next     1.16;

1.16
date     91.04.18.15.38.15;  author dlarson;  state Stab;
branches ;
next     1.15;

1.15
date     91.01.16.20.37.57;  author J_Toebes;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.16.20.26.19;  author J_Toebes;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.11.10.45.22;  author J_Toebes;  state Exp;
branches ;
next     1.12;

1.12
date     90.12.31.15.25.04;  author J_Toebes;  state Exp;
branches ;
next     1.11;

1.11
date     90.12.30.15.39.09;  author J_Toebes;  state Exp;
branches ;
next     1.10;

1.10
date     90.12.29.13.08.16;  author J_Toebes;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.29.01.58.56;  author J_Toebes;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.28.01.54.34;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.23.15.08.10;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.15.08.17.39;  author J_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.05.06.56.03;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.10.16.00.52.50;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.09.03.01.36;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.07.23.44.29;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.22.56.36;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@Volume manipulation
@


1.20
log
@Updated comment in RmtNetInit
@
text
@/* Volume Manipulation */
/* RmtCurentVol  RmtRenameDisk RmtDiskInfo RmtInfo */
/*
**      $Filename: volume.c $
**      $Author: dlarson $
**      $Revision: 1.19 $
**      $Date: 91/05/14 16:12:07 $
**      $Log:	volume.c,v $
 * Revision 1.19  91/05/14  16:12:07  dlarson
 * spaces->tabs, etc.
 *
 * Revision 1.18  91/05/10  21:50:30  dlarson
 * ???
 *
 * Revision 1.17  91/05/10  13:34:06  dlarson
 * First attempt to correct RmtNetStop.  It was calling UnLock() and
 * Close() on objects which the server might be required to process.
 * It was, of course, not able to do so while waiting for UnLock() or
 * Close() to return...
 *
 * Revision 1.16  91/04/18  15:38:15  dlarson
 * Fixed duplicate names for devices with same named volume
 * (i.e. work: the device and work: the volume).  All changes
 * to builddevlist().
 *
 * Revision 1.15  91/01/16  20:37:57  J_Toebes
 * correct syntax error
 *
 * Revision 1.14  91/01/16  20:26:19  J_Toebes
 * Added password checking
 *
 * Revision 1.13  91/01/11  10:45:22  J_Toebes
 * Add support for password and login packets.
 *
 * Revision 1.12  90/12/31  15:25:04  J_Toebes
 * Changed LCHAIN structure to an ELOCK, corrected parameters to freedevlist,
 * added support for ACTION_INFO on the rootlock.
 *
 * Revision 1.11  90/12/30  15:39:09  J_Toebes
 * Add support for Network Init and Network Login
 *
 * Revision 1.10  90/12/29  13:08:16  J_Toebes
 * Corrected INFODATA packet to send full infodata structure over.  Also
 * Eliminated duplicate names when the volume and device are the same name.
 *
 * Revision 1.9  90/11/29  01:58:56  J_Toebes
 * Add freeing of locks when a connection terminates
 *
 * Revision 1.8  90/11/28  01:54:34  J_Toebes
 * Corrected device list types
 *
 * Revision 1.7  90/11/23  15:08:10  J_Toebes
 * Added in session support of access control lists.
 *
 * Revision 1.6  90/11/15  08:17:39  J_Toebes
 * Correct multiple bugs associated with new version.  Sessions still are not supported.
 *
 * Revision 1.5  90/11/05  06:56:03  J_Toebes
 * Major rewrite to make server multi-threaded with support for multiple
 * devices.  At this point in time it is not debugged and the concept of
 * sessions is missing.
 *
**
**/

#include "server.h"

ACTFN(RmtInfo)
{
   /* Arg1: Lock                */
   /* Arg2: Name (in DataP)     */
   BUG(("RmtInfo\n"));

   spkt->sp_Pkt.dp_Arg1 = ((ELOCK)spkt->sp_Pkt.dp_Arg1)->lock;
   spkt->sp_Pkt.dp_Arg2 = (long)MKBADDR(spkt->sp_RP->DataP);
   spkt->sp_RP->DLen    = sizeof(struct InfoData);

   if(spkt->sp_Pkt.dp_Arg1 == ROOTLOCK)
   {
      struct InfoData *info = (struct InfoData *)spkt->sp_RP->DataP;
      info->id_NumSoftErrors = 0;
      info->id_UnitNumber    = 0;
      info->id_DiskState     = ID_VALIDATED;
      info->id_DiskType      = ID_DOS_DISK;
      info->id_NumBlocks     = 1;
      info->id_NumBlocksUsed = 1;
      info->id_VolumeNode    = NULL;
      info->id_InUse         = 0;
      spkt->sp_Pkt.dp_Res1   = DOS_TRUE;
   }
   else
   {
      Dispatch(global, spkt, ACTION_RETURN,
            ((struct FileLock *)BADDR(spkt->sp_Pkt.dp_Arg1))->fl_Task);
   }
}


ACTFN(RmtNetInit)
{
   int len;

   len = spkt->sp_RP->DLen;
   if (len >= MAXNODENAME) len = MAXNODENAME-1;
   memcpy(spkt->sp_Ses->name+1, spkt->sp_RP->DataP, len);
   spkt->sp_Ses->name[0] = len;
   spkt->sp_Ses->name[len+1] = 0;
   global->n.reply = 1;
}

ACTFN(RmtNetLogin)
{
   struct ACCESS *access;

   spkt->sp_RP->DataP[spkt->sp_RP->DLen] = '\0';

BUG(("RmtNetLogin called.\n"));

   /* If they attempted to log in earlier but never gave the password, just     */
   /* free the previous attempt as it will never be completed.                  */
   if (spkt->sp_Ses->pending != NULL)
   {
      freeaccess(global, spkt->sp_Ses->pending);
      spkt->sp_Ses->pending = NULL;
   }
   access = loadaccess(global, spkt->sp_RP->DataP);
   if (access == NULL)
   {
      spkt->sp_RP->Arg1 = DOSFALSE;
      spkt->sp_RP->Arg2 = ERROR_OBJECT_NOT_FOUND;
   }
   else
   {
      /* See if there was any password at all on the Accesslist         */
      /* If there was we will have to delay the access until they give  */
      /* us a password.                                                 */
      if (access->name[0])
      {
         spkt->sp_Ses->pending = access;
         spkt->sp_RP->Arg1 = DOSFALSE;
         spkt->sp_RP->Arg2 = ERROR_NO_RIGHTS;
         spkt->sp_RP->DLen = 0;
/*       spkt->sp_RP->DBuf */
      }
      else
      {
         freedevlist(global, spkt->sp_Ses->devices);
         spkt->sp_Ses->devices = builddevlist(global, access);
         spkt->sp_RP->Arg1 = DOSTRUE;
      }
   }
}

ACTFN(RmtNetPassword)
{
   struct ACCESS *access;

   access = spkt->sp_Ses->pending;
   if (access == NULL)
   {
      spkt->sp_RP->Arg1 = DOSFALSE;
      spkt->sp_RP->Arg2 = ERROR_ACTION_NOT_KNOWN;
      return;
   }
   if (memcmp(spkt->sp_RP->DataP, access->name, access->name[0]+1))
   {
      freeaccess(global, spkt->sp_Ses->pending);
      spkt->sp_Ses->pending = NULL;
      spkt->sp_RP->Arg1 = DOSFALSE;
      spkt->sp_RP->Arg2 = ERROR_OBJECT_NOT_FOUND;
      return;
   }
   /* They gave us a good password, let them have access to it */
   freedevlist(global, spkt->sp_Ses->devices);
   spkt->sp_Ses->devices = builddevlist(global, access);
   spkt->sp_RP->Arg1 = DOSTRUE;
}

ACTFN(RmtNetStart)
{
   SESSION *ses;
   struct Library *DriverBase = spkt->sp_Driver->libbase;

   /* This is where we come to establish a session connection event     */
   /* The session ID is the first argument.  We will eventually get     */
   /* a stop for the connection.                                        */
   /* The main reason for this is to keep track of any resources        */
   /* that are established with the connection and to free them when    */
   /* the connection is terminated.                                     */

   /* Create a new session */
   ses = AllocMem(sizeof(SESSION), MEMF_CLEAR);
   if (ses != NULL)
   {
      ses->next = global->sessions;
      global->sessions = ses;
      /*                     123456789012  */
      strcpy(ses->name, "\x12SessionError");
      ses->devices = builddevlist(global, loadaccess(global, "__DEFAULT__"));
      spkt->sp_Ses = ses;
      ses = SDNGetConData(spkt->sp_Driver->drglobal, spkt->sp_RP);
      SDNSetConData(spkt->sp_Driver->drglobal, spkt->sp_RP, spkt->sp_Ses);
      if (ses != NULL)
      {
         freedevlist(global, ses->devices);
      }
   }
   global->n.reply = -1;      /* Delete the fake message, do not reply  */
}

ACTFN(RmtNetStop)
{
   SESSION *ses;
   ELOCK lch;
   struct FCHAIN *fch;

/*
**  They have left us, terminate any resources that we have gotten
**  for them.
**
**  We can't loop through using UnLock() or Close() to free these resources
**  because  the locks or opens might be on us and we wouldn't be able to
**  hear DOS asking us to execute the packet for the UnLock or Close because
**  we'd be waiting for UnLock() or Close() to return!!!
**
**  What we do is to be a little tricky.  First we remove the first entry in
**  the lock chain or the filehandle chain.  Then we use Dispatch to
**  send DOS a packet requesting the lock to be freed or filehandle closed.
**  We are also going to tell Dispatch to call RmtNetStop when the packet
**  returns from DOS.  Thus, if the lock or filehandle refers to something
**  of ours, we will get a chance to free it -- if not, we've only done a
**  little extra work.  This is much better than trying to figure out of the
**  contorted ways in which something could be ours!
**
**  One additional complication is that for a filehandle, we can't free the
**  memory associated with it until *after* the packet returns.  Hence, we use
**  another field of the packet with a pointer to NULL or to a (struct fchain)
**  which will need freeing.  The first thing we do is to free any (struct
**  fchain) which the last call to RmtNetStop for this session needed to have
**  freed.
*/

   if(spkt->sp_Pkt.dp_Arg2 != NULL)
   {
      FreeMem((VOID *)spkt->sp_Pkt.dp_Arg2, sizeof(struct FCHAIN));
      global->opencount--;
   }

   ses = (SESSION *)spkt->sp_RP->Arg1;
   if (ses != NULL)
   {
      while( (lch=ses->locks) != NULL)
      {
         ses->locks = lch->next;
         spkt->sp_Pkt.dp_Arg1 = lch->lock;
         spkt->sp_Pkt.dp_Arg2 = NULL;
         spkt->sp_Pkt.dp_Type = ACTION_FREE_LOCK;
         FreeMem(lch, sizeof(struct lchain));
 	 if(spkt->sp_Pkt.dp_Arg1)
	 {
                Dispatch(global, spkt, ACTION_NETWORK_END,
                               ((struct FileLock *)BADDR(spkt->sp_Pkt.dp_Arg1))->fl_Task);
	        return;
         }
      }
      while( (fch=ses->fhs) != NULL)
      {
         struct FileHandle *fh;

         ses->fhs = fch->next;
         fh = &fch->fh;
         spkt->sp_Pkt.dp_Arg1 = fh->fh_Arg1;
         spkt->sp_Pkt.dp_Arg2 = fch;
         spkt->sp_Pkt.dp_Type = ACTION_RETEND;
         Dispatch(global, spkt, ACTION_NETWORK_END, fh->fh_Type);
      }
   }
   FreeMem(ses, sizeof(SESSION));
   global->n.reply = -1;

/***********************************************************
** old, broken code:
   * They have left us, terminate any resources that we have gotten    *
   * for them.                                                         *
   SESSION *ses;
   ELOCK lch, lnext;
   struct FCHAIN *fch, *fnext;
   ses = (SESSION *)spkt->sp_RP->Arg1;
   if (ses != NULL)
   {
      freedevlist(global, ses->devices);
      for(lch = ses->locks; lch != NULL; lch = lnext)
      {
         UnLock(lch->lock);
         lnext = lch->next;
         FreeMem(lch, sizeof(struct lchain));
      }
      for(fch = ses->fhs; fch != NULL; fch = fnext)
      {
         Close(MKBADDR(fch));
         fnext = fch->next;
         FreeMem(fch, sizeof(struct FCHAIN));
      }
      FreeMem(ses, sizeof(SESSION));
   }
   global->n.reply = -1;      * Delete the fake message, do not reply  *
**
***********************************************************/
}

/*
  access/       - contains the default access rules for all file systems to be
                  exported.  These files will be in the form:
                     Default: (Include|Readonly|Shared|Exclude)
                     Password: <password>
                     <assign>: [(Include|Shared|Readonly|Exclude)] [Assign name]
                  The Default: and Password: lines MUST be the first two lines in
                  that order.   On each subsequent line will be those logical assigns
                  that are to be treated as other than the default.  If no other
                  assigns to be treated specially then the file may consist of only
                  two lines.  The Password keyword is used to validate access to the
                  network.  If no password is given, access is available to anyone.
                  Default may be one of 4 selections:
                      DEFAULT: INCLUDE  -  Indicates that all top level nodes are to
                                           included in the root file system.  Access
                                           to the nodes is in a shared R/W mode
                      DEFAULT: SHARED   -  Same as DEFAULT: INCLUDE
                      DEFAULT: READONLY -  Indicates that all top level nodes are to
                                           be included in the root file system but in
                                           a read-only mode.
                      DEFAULT: EXCLUDE  -  Indicate the no nodes are to be included in
                                           the root file system.
                  These same keywords may be used on any assign that appears on a
                  subsequent line.  It may also have the keyword ASSIGN name which
                  indicates that the assigned name to appear is not really an existing
                  assign, but a local assign to be made to the given directory.  Note
                  that when this type of assign is used, no access to anywhere above
                  in the directory tree is to be allowed.
                - Any line that starts with a pound sign (#) or a semicolon (;)
                  will be treated as a comment and ignored.
                - The default access file will be called __DEFAULT__. if it is not
                  present, then a default file consisting of the commands:
                     DEFAULT: SHARED
                     PASSWORD:
                  will be assumed allowing complete access to all entries and no
                  password access required.
                - Additional files will be present in the directory corresponding to
                  users who are to be granted access.  This allows different users
                  to have different levels of access.
*/

#define BUFSIZE 255

void freeaccess(global, access)
GLOBAL global;
struct ACCESS *access;
{
   struct ACCESS *next;
   int size;

   if (access == NULL) return;

   next = access->next;
   FreeMem(access, sizeof(struct ACCESS)+MAXPW);
   access = next;
   while(access != NULL)
   {
      size = strlen(access->name)+1;
      if (access->class & CLASS_ASSIGN)
      {
         size += strlen(access->name+size)+1;
      }
      next = access->next;
      FreeMem(access, sizeof(struct ACCESS)+size);
      access = next;
   }
}

#define MODE_NONE  0
#define MODE_TOKEN 1
#define MODE_QUOTE 2
#define MODE_DONE  3
struct ACCESS *
loadaccess(global, name)
GLOBAL global;
char *name;
{
   char buf[BUFSIZE+1];
   int i, namelen, len, tlen, assignlen, needassign, mode, class;
   char *p, *tokptr, *assignname;
   struct ACCESS *alist, *listent;
   BPTR fh;

              /*123456789012345678901*/
   strcpy(buf, "DEVS:networks/access/");
   len = strlen(name);
   if (len > 31) len = 31;
   memcpy(buf+21, name, len);
   buf[len+21] = 0;

   alist = AllocMem(sizeof(struct ACCESS)+MAXPW, MEMF_CLEAR);
   if (alist == NULL) return(NULL);
   listent = alist;

   alist->class = CLASS_READONLY;
   alist->name[0] = 0;

BUG(("loadaccess buf='%s' name='%s'\n", buf, name));
   fh = Open(buf, MODE_OLDFILE);
   if (fh == NULL)
   {
      /* No access information present, use our standard default */
      return(alist);
   }
BUG(("Succesfully opened an access file.\n", buf, name));

   len = 0;
   for(;;)
   {
      i = Read(fh, buf+len, BUFSIZE-len);
      if (i < 0) break;
      len += i;
      if (len == 0) break;
      for (i = 0; i < BUFSIZE; i++)
         if (buf[i] == '\n')
            break;
      /* Null terminate the buffer */
      buf[i] = 0;
      if (buf[0] != '#' && buf[0] != ';' && (p = strchr(buf, ':')) != NULL)
      {
         /* We have a valid entry.  Parse out the name */
         *p++ = 0;
         namelen = p-buf;

         /* Now parse out the tokens on the line.  We should see one of */
         /* EXCLUDE, READONLY, SHARED, INCLUDE, ASSIGN */
         /* While we are not at the end of the line we should parse the tokens */
         mode = 0;
         class = CLASS_SHARED;
         assignname = NULL;
         assignlen = 0;
         needassign = 0;
         if (*p)
         {
            do
            {
               /* Find the next non-blank token */
               if (*p == 0)
               {
                  if (mode != MODE_NONE) mode = MODE_DONE;
               }
               else if (*p == ' ' || *p == '\t' || *p == '\f')
               {
                  if (mode == MODE_TOKEN) mode = MODE_DONE;
               }
               else if (*p == '"')
               {
                  switch(mode)
                  {
                     case MODE_QUOTE:
                        mode = MODE_DONE;
                        break;
                     case MODE_NONE:
                        tokptr = p+1;
                        mode = MODE_QUOTE;
                        break;
                  }
               }
               else
               {
                  switch(mode)
                  {
                     case MODE_QUOTE:
                        break;
                     case MODE_NONE:
                        tokptr = p;
                     case MODE_TOKEN:
                        *p |= 0x20;  /* Convert to lowercase if not already */
                        mode = MODE_TOKEN;
                        break;
                  }
               }
               if (mode == MODE_DONE)
               {
                  tlen = p-tokptr;
                  if (needassign)
                  {
                     assignname = tokptr;
                     assignlen  = tlen+1;
                     class |= CLASS_ASSIGN;
                     needassign = 0;
                  }
                  else
                  {
                     switch(*tokptr)
                     {
                        case 'e': if (!memcmp(tokptr, "exclude", tlen))
                                     class=CLASS_EXCLUDE;
                                  break;
                        case 'r': if (!memcmp(tokptr, "readonly", tlen))
                                     class=CLASS_READONLY;
                                  break;
                        case 's': if (!memcmp(tokptr, "shared", tlen))
                                     class=CLASS_SHARED;
                                  break;
                        case 'i': if (!memcmp(tokptr, "include", tlen))
                                     class=CLASS_SHARED;
                                  break;
                        case 'a': if (!memcmp(tokptr, "assign", tlen))
                                     needassign = 1;
                                  break;
                     }
                  }
                  mode = MODE_NONE;
               }
            } while (*p++);
         }

         /* class = Class of this entry            */
         /* buf holds the entry name for len bytes */
         /* assignname = NULL or name of assign    */
         /* assignlen  = length of assigned name   */
         /* First we need to check for the default one or the password */
         if (!strcmp(buf, "DEFAULT"))
         {
            alist->class = class;
         }
         else if (!strcmp(buf, "PASSWORD"))
         {
            if (tlen > 32) tlen = 32;
            memcpy(alist->name, tokptr, tlen);
            alist->name[tlen] = 0;
         }
         else
         {
            /* Allocate a new entry */
            listent =
            listent->next = AllocMem(sizeof(struct ACCESS)+assignlen+namelen,
                                     MEMF_CLEAR);
            if (listent == NULL) break;
            listent->class = class;
            memcpy(listent->name, buf, namelen);
            if (assignlen)
            {
               assignlen--;
               memcpy(listent->name+namelen, assignname, assignlen);
               listent->name[namelen+1+assignlen] = 0;
            }
         }
      }
      memcpy(buf, buf+i+1, BUFSIZE-i);
      len -= i+1;
   }

   /* If we have a default, set up the default entry */

   Close(fh);
   return(alist);
}

void freedevlist(global, devlist)
GLOBAL global;
struct DEVLIST *devlist;
{
   struct DEVLIST *next;
   while(devlist != NULL)
   {
      next = devlist->next;
      FreeMem(devlist, sizeof(struct DEVLIST)+devlist->len);
      devlist = next;
   }
}

/* Build the list of all accessible devices */
struct DEVLIST *builddevlist(global, access)
GLOBAL global;
struct ACCESS *access;
{
   struct DosList *dev, *doslist, *devlook;
   struct DEVLIST *base, *cur, *new;
   struct ACCESS *this;
   BPTR lock;
   char *name;
   struct FileInfoBlock __aligned fib;

   if (access == NULL) return(NULL);
   base = cur = new = NULL;

   /* We are doing an examine next loop through the entries in the */
   /* Directory.  We need to walk the Device list here for the     */
   /* operation.  For now we are bad boys and walk it under forbid */
   /* With 2.0 we should use the new doslist access routines       */
   Forbid();
   doslist = (struct DosList *)
          BADDR(((struct DosInfo *)
                     BADDR(((struct RootNode *)DOSBase->dl_Root)->rn_Info)
                     )->di_DevInfo);

   for(dev = doslist; dev != NULL; dev = (struct DosList *)(BADDR(dev->dol_Next)))
   {
      /* Now walk through all the device node entries determining what to  */
      /* do with them.                                                     */
      name = (char *)BADDR(dev->dol_Name);

      /* First see if the name appears on any special entry in the access list */
      for(this = access->next; this != NULL; this = this->next)
      {
         if (!stricmp(this->name, name+1)) break;
      }
      if (this == NULL) this = access;  /* Use the default one */
      if (this->class == CLASS_EXCLUDE || (this->class & CLASS_ASSIGN)) continue;

	BUG(("checking not assigned, not excluded device %s\n", name));


      new = AllocMem(sizeof(struct DEVLIST)+name[0], MEMF_CLEAR);
      if (new == NULL)
      {
         /* OOps, out of memory, gotta do something about it */
         Permit();
         return(base);
      }

      if (base == NULL)
      {
         base = cur = new;
      }
      else
      {
         cur = cur->next = new;
      }

      if (this->class == CLASS_READONLY)
      {
         cur->protect = FIBF_WRITE|FIBF_DELETE|FIBF_EXECUTE;
      }
      else
      {
         cur->protect = 0;
      }

      BUG(("Key=%08lx Type = %ld Task=%08lx Startup=%08lx\n", dev, dev->dol_Type, dev->dol_Task, dev->dol_misc.dol_handler.dol_Startup));

      /*  if it's a device, we need to find out whether it has an associated
      **  volume, whether the volume has the same name as the device, and
      **  whether the device is a filesystem or a file
      */
      if (dev->dol_Type == DLT_DEVICE)
      {
	/*  first, check to see whether there is a volume for this device  */
         for(devlook = doslist; devlook != NULL;
             devlook = (struct DosList *)(BADDR(devlook->dol_Next)))
            if (devlook->dol_Type == DLT_VOLUME &&
                devlook->dol_Task == dev->dol_Task) break;
         /*  no, there isn't a volume for this device  */
         if (devlook == NULL)
         {
            /*  if there is no volume, and Startup<100, not filesystem  */
            if(dev->dol_misc.dol_handler.dol_Startup < 100)
            {
               BUG(("cur->type=ST_FILE   for name %s\n",name));
               cur->type = ST_FILE;
            }
            /*  no volume, and Startup>100, is filesystem  */
            else
            {
               BUG(("cur->type=ST_USERDIR (1)   for '%s'\n",name));
               cur->type = ST_USERDIR;
            }
         }
         else
         {
	    /*  There is a volume associated with this device, make sure that
	    **  the two names are not the same.  This will prevent duplicate
	    **  names from appearing on the list
	    */
            BUG(("devlook->dol_Name=%s, name=%s\n",BADDR(devlook->dol_Name), name));
	    if (!stricmp(BADDR(devlook->dol_Name), name))
            {
               /*  we have to reset base->next or cur->next so it points to
               **  NULL, not new, then we have to FreeMem new and go on to
               **  the next entry in the DosList.
               */
	       for(cur=base; cur->next != new; cur=cur->next)
	          ;
	       cur->next = NULL;
               FreeMem(new, sizeof(struct DEVLIST)+name[0]);
               continue;
            }
            /*  since the volume name and device name aren't the same, we'll
            **  have to leave the device name because this might be a
            **  removable media filesystem (we wouldn't want to be able to
            **  access only the volume in df0: at the time of initialization)
            */
            else
            {
               BUG(("cur->type=ST_USERDIR (2)   for '%s'\n",name));
               cur->type = ST_USERDIR;
            }
         }
      }
      else
      {
         BUG(("cur->type=ST_USERDIR (3)  for '%s'\n",name));
         cur->type = ST_USERDIR;
      }
/*    cur->port = dev->dol_Task; */
      cur->lock = dev->dol_Lock;
      memcpy(&cur->len, name, name[0]+2);
   }
   Permit();

   /* Now go through and find all the assigns that they asked to do */
   for (this = access->next; this != NULL; this = this->next)
   {
      if (this->class & CLASS_ASSIGN)
      {
         lock = Lock(this->name+1+strlen(this->name), SHARED_LOCK);
         if (lock != NULL)
         {
            /* Now figure out whether it is a file or a directory */
            /* For this we need to do an Examine() */
            if (!Examine(lock, &fib))
            {
               UnLock(lock);
            }
            else
            {
               new = AllocMem(sizeof(struct DEVLIST)+strlen(this->name), MEMF_CLEAR);
               if (new == NULL)
               {
                  UnLock(lock);
                  break;
               }
               if (base == NULL)
               {
                  base = cur = new;
               }
               else
               {
                  cur = cur->next = new;
               }

               if (this->class == (CLASS_ASSIGN | CLASS_READONLY))
               {
                  cur->protect = FIBF_WRITE|FIBF_DELETE|FIBF_EXECUTE;
               }
               else
               {
                  cur->protect = 0;
               }
/*             cur->port = dev->dol_Task; */
               cur->lock = lock;
               cur->len = strlen(this->name);
               if (fib.fib_DirEntryType > 0) /* A directory */
                  cur->type = ST_LINKDIR;
               else
                  cur->type = ST_LINKFILE;
               strcpy(cur->name, this->name);
            }
         }
      }
   }
   return(base);
}
@


1.19
log
@spaces->tabs, etc.
@
text
@d6 2
a7 2
**      $Revision: 1.18 $
**      $Date: 91/05/10 21:50:30 $
d9 3
d189 1
a189 2
   /* the connection is terminated.  Since we are not currently tracking*/
   /* the file handles and locks we will ignore this event for now.     */
@


1.18
log
@???
@
text
@a0 9

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .	| || the authors:					   BBS:      */
/* | o	| ||   John Toebes     Dave Baker				     */
/* |  . |//								     */
/* ======								     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d6 2
a7 2
**      $Revision: 1.17 $
**      $Date: 91/05/10 13:34:06 $
d9 3
d195 2
a196 1
      strcpy(ses->name, "\x04John");
@


1.17
log
@First attempt to correct RmtNetStop.  It was calling UnLock() and
Close() on objects which the server might be required to process.
It was, of course, not able to do so while waiting for UnLock() or
Close() to return...
@
text
@d15 2
a16 2
**      $Revision: 1.16 $
**      $Date: 91/04/18 15:38:15 $
d18 6
d217 2
a218 2
   ELOCK lch, lnext;
   struct FCHAIN *fch, *fnext;
d248 1
a248 1
      FreeMem(spkt->sp_Pkt.dp_Arg2, sizeof(struct fchain));
d252 1
a252 1
   ses = (SESSION *)spkt->sp_RP->Arg1
d266 1
a266 1
	        return();
d274 2
a275 1
         spkt->sp_Pkt.dp_Arg1 = (fh=(struct FileHandle *)spkt->sp_RP->Arg1)->fh_Arg1)
d277 2
a278 1
         Dispatch(global, spkt, ACTION_RETEND, fh->fh_Type);
@


1.16
log
@Fixed duplicate names for devices with same named volume
(i.e. work: the device and work: the volume).  All changes
to builddevlist().
@
text
@d14 3
a16 3
**      $Author: J_Toebes $
**      $Revision: 1.15 $
**      $Date: 91/01/16 20:37:57 $
d18 5
d114 2
d210 70
a279 2
   /* They have left us, terminate any resources that we have gotten    */
   /* for them.                                                         */
d301 3
a303 1
   global->n.reply = -1;      /* Delete the fake message, do not reply  */
d403 1
d410 1
@


1.15
log
@correct syntax error
@
text
@d13 1
a13 1
**      $Filename: volume.c $ 
d15 2
a16 2
**      $Revision: 1.14 $
**      $Date: 91/01/16 20:26:19 $
d18 3
d23 1
a23 1
 * 
d26 1
a26 1
 * 
d30 1
a30 1
 * 
d33 1
a33 1
 * 
d37 1
a37 1
 * 
d40 1
a40 1
 * 
d43 1
a43 1
 * 
d46 1
a46 1
 * 
d49 1
a49 1
 * 
d54 1
a54 1
 * 
d85 1
a85 1
      Dispatch(global, spkt, ACTION_RETURN, 
d90 1
a90 1
        
d94 1
a94 1
   
d106 1
a106 1
   
d181 1
a181 1
   
d225 1
a225 1
   }   
d229 1
a229 1
/*                                        
d278 1
a278 1
   
d350 1
a350 1
         
d434 1
a434 1
         
d470 1
a470 1
   
d472 1
a472 1
   
d504 1
a504 1
   
d520 1
a520 1
      
d529 3
d548 1
a548 1
      
d558 7
a564 5
      /* If there is no volume node for the device we can assume that it     */
      /* is a file.                                                          */
      BUG(("Key=%08lx Type = %ld Startup=%08lx\n", dev, dev->dol_Type, dev->dol_misc.dol_handler.dol_Startup));
      if (dev->dol_Type == DLT_DEVICE &&
          dev->dol_misc.dol_handler.dol_Startup < 100)
d566 1
a566 2
         /* We should check to see that there is also no volume node for this */
         /* entry.                                                            */
d571 1
a571 1
         /* It is a "file" */
d574 12
a585 1
            cur->type = ST_FILE;
d589 6
a594 3
            /* Just to be sure, make sure that the two names are not the same */
            /* This will prevent duplicate names from appearing on the list   */
            if (!stricmp(BADDR(devlook->dol_Name), name))
d596 7
d606 10
a615 1
            cur->type = ST_USERDIR;
d620 1
@


1.14
log
@Added password checking
@
text
@d15 2
a16 2
**      $Revision: 1.13 $
**      $Date: 91/01/11 10:45:22 $
d18 3
d152 1
a152 1
   if (memcmp(spkt->sp_RP->DBuf, access->name, access->name[0]+1))
@


1.13
log
@Add support for password and login packets.
@
text
@d15 2
a16 2
**      $Revision: 1.12 $
**      $Date: 90/12/31 15:25:04 $
d18 3
d140 4
a143 1
   if (spkt->sp_Ses->pending == NULL)
d147 9
d157 4
a160 1

@


1.12
log
@Changed LCHAIN structure to an ELOCK, corrected parameters to freedevlist,
added support for ACTION_INFO on the rootlock.
@
text
@d15 2
a16 2
**      $Revision: 1.11 $
**      $Date: 90/12/30 15:39:09 $
d18 4
d96 1
a96 1
   struct Access *access;
d99 8
d115 26
a140 3
      freedevlist(global, spkt->sp_Ses->devices);
      spkt->sp_Ses->devices = builddevlist(global, access);
      spkt->sp_RP->Arg1 = DOSTRUE;
d142 1
@


1.11
log
@Add support for Network Init and Network Login
@
text
@d15 2
a16 2
**      $Revision: 1.10 $
**      $Date: 90/12/29 13:08:16 $
d18 3
d53 2
a54 1
   spkt->sp_Pkt.dp_Arg2 = (long)spkt->sp_RP->DataP;
d57 16
a72 1
   Dispatch(global, spkt, ACTION_RETURN, 
d74 1
d103 1
a103 1
      freedevlist(spkt->sp_Ses->devices);
d146 1
a146 1
   struct LCHAIN *lch, *lnext;
d154 1
a154 1
         UnLock((BPTR)lch->data);
d156 1
a156 1
         FreeMem(lch, sizeof(struct LCHAIN));
@


1.10
log
@Corrected INFODATA packet to send full infodata structure over.  Also
Eliminated duplicate names when the volume and device are the same name.
@
text
@d15 2
a16 2
**      $Revision: 1.9 $
**      $Date: 90/11/29 01:58:56 $
d18 4
d58 1
a58 1
ACTFN(RmtNetLogin)
d64 1
a64 1
   memcpy(spkt->sp_Ses->name+1, spkt->sp_RP->DataP+1, len);
d68 19
@


1.9
log
@Add freeing of locks when a connection terminates
@
text
@d15 2
a16 2
**      $Revision: 1.8 $
**      $Date: 90/11/28 01:54:34 $
d18 3
d47 1
a47 1
   spkt->sp_RP->DLen    = 0;
d471 7
@


1.8
log
@Corrected device list types
@
text
@d15 2
a16 2
**      $Revision: 1.7 $
**      $Date: 90/11/23 15:08:10 $
d18 3
d53 7
d98 22
a119 2
   /* for them.  Since we currently do not track them, we will ignore   */
   /* this event for now.                                               */
@


1.7
log
@Added in session support of access control lists.
@
text
@d15 2
a16 2
**      $Revision: 1.6 $
**      $Date: 90/11/15 08:17:39 $
d18 3
a322 1
            listent->name[namelen] = 0;
d326 1
a326 1
               memcpy(listent->name+namelen+1, assignname, assignlen);
d364 1
d429 2
a430 1
            if (devlook->dol_Task == dev->dol_Task) break;
d445 1
a445 1
      cur->port = dev->dol_Task;
d459 3
a461 2
            new = AllocMem(sizeof(struct DEVLIST)+strlen(this->name), MEMF_CLEAR);
            if (new == NULL)
a463 5
               break;
            }
            if (base == NULL)
            {
               base = cur = new;
d467 31
a497 10
               cur = cur->next = new;
            }
      
            if (this->class == (CLASS_ASSIGN | CLASS_READONLY))
            {
               cur->protect = FIBF_WRITE|FIBF_DELETE|FIBF_EXECUTE;
            }
            else
            {
               cur->protect = 0;
a498 5
            /* Now figure out whether it is a file or a directory */
            
            cur->port = dev->dol_Task;
            cur->len = strlen(this->name);
            strcpy(cur->name, this->name);
@


1.6
log
@Correct multiple bugs associated with new version.  Sessions still are not supported.
@
text
@d15 2
a16 2
**      $Revision: 1.5 $
**      $Date: 90/11/05 06:56:03 $
d18 3
d52 3
d62 17
d90 398
@


1.5
log
@Major rewrite to make server multi-threaded with support for multiple
devices.  At this point in time it is not debugged and the concept of
sessions is missing.
@
text
@d15 2
a16 2
**      $Revision: 1.4 $
**      $Date: 90/11/04 17:36:27 $
d18 5
d56 1
a56 1
   global->n.reply = 0;      /* Do not reply to this fake message       */
d64 1
a64 1
   global->n.reply = 0;      /* Do not reply to this fake message       */
@


1.4
log
@Cleaned up NetKludge code.
@
text
@d12 8
d23 1
a23 4
void
RmtInfo(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d25 3
a27 1
    BUG(("RmtInfo\n"));
d29 2
a30 13
    if (!global->infodata &&
	    !(global->infodata = (struct InfoData *)
	     DosAllocMem(global, sizeof(struct InfoData))))
    {
	BUG(("******* OUT OF MEMORY - can't get InfoData\n"));
	global->RP.Arg1 = DOS_FALSE;
	global->RP.Arg2 = ERROR_NO_FREE_STORE;
	return;
    }
    pkt->dp_Arg1 = global->RP.Arg1;
    pkt->dp_Arg2 = (LONG)global->infodata;

   Dispatch(global, ((struct FileLock *)BADDR(pkt->dp_Arg1))->fl_Task);
d32 2
a33 3
    MQ(global->infodata, global->RP.DataP, sizeof(struct InfoData));

    global->RP.DLen = sizeof(struct InfoData);
d36 2
a37 4
void
RmtNetKludge(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d39 1
a39 22
   BPTR lock, parent;

   BUG(("RmtNetKludge: Entry, device '%s'\n", global->RP.DataP))

   /* Check to see if this is an assign */
   global->RP.Arg1 = DOS_TRUE;

   if(lock = Lock(global->RP.DataP, SHARED_LOCK))
   {
      if(parent = ParentDir(lock))
      {
         /* It's an assign */
         global->RP.Arg1 = DOS_FALSE;
      }
      UnLock(lock);
      UnLock(parent);
   }

   global->RP.Arg2 = 0L;  /* Set this to requested buffer size if desired */
   global->RP.DLen = 0;

   if(global->RP.Arg1) global->n.run++;
d42 1
a42 4
void
RmtNetStart(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d54 1
a54 4
void
RmtNetStop(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
a61 18
SESSION *
NewSession(global)
GLOBAL global;
{
   SESSION *s;
   s = (SESSION *)DosAllocMem(global, sizeof(SESSION));
   if (s == NULL)
   {
      BUG(("******* OUT OF MEMORY - can't get Session\n"));
      global->RP.Arg1 = DOS_FALSE;
      global->RP.Arg2 = ERROR_NO_FREE_STORE;
      return(NULL);
   }
   s->next = global->sessions;
   strcpy(s->name, "\x07RmtRoot");
   global->sessions = s;

}
@


1.3
log
@Change dispatch interface, add NewSession routine
@
text
@a51 1
   global->RP.RDevice = NULL;
d64 2
a65 14
   if(global->RP.Arg1 == DOS_TRUE &&
      !(global->RP.RDevice=(RNPTR)DeviceProc(global->RP.DataP))) 
   {
      BUG(("********DeviceProc of %s Failed\n", global->RP.DataP));
      BUGGETC
      global->RP.Arg1 = DOS_FALSE;
   }
   else
   {
      global->RP.Arg2 = 0L;  /* Set this to requested buffer size if desired */
      global->RP.DLen = 0;

      if(global->RP.Arg1) global->n.run++;
   }
d67 1
a67 1
   BUG(("RmtNetKludge: New RDevice = 0x%lx\n", global->RP.RDevice));
d101 1
a101 1
   s = DosAllocMem(global, sizeof(SESSION));
d110 1
@


1.2
log
@Added RmtNetStop code in preparation for multiple connections.
@
text
@d34 1
a34 1
    Dispatch(global);
d109 17
@


1.1
log
@Initial revision
@
text
@d88 8
a95 1
   RmtNetKludge(global, pkt);
d97 12
@
