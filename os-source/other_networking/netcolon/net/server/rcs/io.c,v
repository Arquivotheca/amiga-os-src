head     1.16;
branch   ;
access   ;
symbols  r37-12:1.16 v37r8:1.16 Distillery:1.16;
locks    ; strict;
comment  @ * @;


1.16
date     91.03.11.11.16.41;  author J_Toebes;  state Exp;
branches ;
next     1.15;

1.15
date     91.01.21.23.49.47;  author J_Toebes;  state Exp;
branches ;
next     1.14;

1.14
date     91.01.15.02.21.16;  author J_Toebes;  state Exp;
branches ;
next     1.13;

1.13
date     91.01.11.10.46.44;  author J_Toebes;  state Exp;
branches ;
next     1.12;

1.12
date     90.12.31.15.24.36;  author J_Toebes;  state Exp;
branches ;
next     1.11;

1.11
date     90.12.30.15.39.30;  author J_Toebes;  state Exp;
branches ;
next     1.10;

1.10
date     90.12.29.13.45.37;  author J_Toebes;  state Exp;
branches ;
next     1.9;

1.9
date     90.12.01.21.08.59;  author J_Toebes;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.29.01.57.58;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.28.01.52.19;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.23.15.06.19;  author J_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.15.08.17.42;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.05.06.56.19;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.16.00.56.36;  author John_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.03.04.10;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.22.59.11;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@General io routines
@


1.16
log
@Add code to limit the number of active open file handles
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* File Access:         */
/* RmtRead RmtWrite RmtSeek RmtWaitForChar    */
/* RmtFindwrite RmtFindin RmtFindout RmtEnd   */
/*
**      $Filename: io.c $ 
**      $Author: J_Toebes $
**      $Revision: 1.15 $
**      $Date: 91/01/21 23:49:47 $
**      $Log:	io.c,v $
 * Revision 1.15  91/01/21  23:49:47  J_Toebes
 * Correct opening of pseudo-root files.
 * 
 * Revision 1.14  91/01/15  02:21:16  J_Toebes
 * Fixed access to icons when DEVS: is excluded.
 * 
 * Revision 1.13  91/01/11  10:46:44  J_Toebes
 * Cleanup support for uplevel reference limits.  At the same time corrected
 * problems where cd net:john/assigned  would not return the asigned name
 * of the object
 * 
 * Revision 1.12  90/12/31  15:24:36  J_Toebes
 * Implement security restrictions for read/write access and prevention of
 * moving up too many levels.
 * 
 * Revision 1.11  90/12/30  15:39:30  J_Toebes
 * Add passing back interactive information.
 * 
 * Revision 1.10  90/12/29  13:45:37  J_Toebes
 * Correct syntax error.
 * 
 * Revision 1.9  90/12/01  21:08:59  J_Toebes
 * Corrected problems with returns for ACTION_READ and ACTION_WRITE.  Under
 * ACTION_WRITE it would send back a copy of the original data (performance
 * hit) and under ACTION_READ it would set DLEN to -1 if there was an error
 * on a read.
 * 
 * Revision 1.8  90/11/29  01:57:58  J_Toebes
 * Eliminate DosAllocMem, DosFreeMem calls.
 * 
 * Revision 1.7  90/11/28  01:52:19  J_Toebes
 * Added support for icons, added session tracking back in.
 * 
 * Revision 1.5  90/11/15  08:17:42  J_Toebes
 * Correct multiple bugs associated with new version.  Sessions still are not supported.
 * 
 * Revision 1.4  90/11/05  06:56:19  J_Toebes
 * Major rewrite to make server multi-threaded with support for multiple
 * devices.  At this point in time it is not debugged and the concept of
 * sessions is missing.
 * 
*/

#include "server.h"


/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                 RmtRW( global, pkt )                                    */
/*                                                                         */
/*------------------------------------------------------------------------*/

ACTFN(RmtRW)
{
   /* Arg1: APTR EFileHandle */
   /* Arg2: APTR Buffer      */
   /* Arg3: Length           */
   struct FCHAIN *fh;

   BUG(("RmtRW of %d bytes from fh 0x%08lx\n", spkt->sp_RP->Arg3, spkt->sp_RP->Arg1));

   fh = (struct FCHAIN *)spkt->sp_RP->Arg1;

   /* Make sure that they have access to the file on the device */
   if (fh->info.a.class == CLASS_READONLY && spkt->sp_RP->Type == ACTION_WRITE)
   {
      spkt->sp_RP->Arg1 = -1;
      spkt->sp_RP->Arg2 = ERROR_WRITE_PROTECTED;
      return;
   }
   spkt->sp_Pkt.dp_Arg1 = fh->fh.fh_Arg1;
   spkt->sp_Pkt.dp_Arg2 = (LONG)spkt->sp_RP->DataP;

   Dispatch(global, spkt, ACTION_RETRW, fh->fh.fh_Type);
}

ACTFN(RmtRWRet)
{
   spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;
   spkt->sp_RP->DLen = 0;
   if (spkt->sp_RP->Type == ACTION_READ &&
       spkt->sp_RP->Arg1 > 0)
   {
      spkt->sp_RP->DLen = spkt->sp_RP->Arg1;
   }
}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                 RmtReadMore( global, pkt )                              */
/*                                                                         */
/*-------------------------------------------------------------------------*/

ACTFN(RmtRWMore)
{
   /* Arg1: APTR EFileHandle    */
   /* Arg2: APTR Buffer         */
   /* Arg3: Length              */
   /* Arg4: Seek Pos Indicator  */
   struct FCHAIN *fh;

   BUG(("RmtRWMore of %d bytes\n", spkt->sp_RP->Arg3));

   fh = (struct FCHAIN *)spkt->sp_RP->Arg1;
   if (fh->info.a.class == CLASS_READONLY && spkt->sp_RP->Type == ACTION_WRITE_MORE)
   {
      spkt->sp_RP->Arg1 = -1;
      spkt->sp_RP->Arg2 = ERROR_WRITE_PROTECTED;
      return;
   }
   
   spkt->sp_Pkt.dp_Arg1 = fh->fh.fh_Arg1;

   /* IF they asked us to save the current seek position, ask the file system   */
   /* where we are in the file and return it as Arg4.  Remember that we         */
   /* will use this as the seek back position in case of error.                 */
   if (spkt->sp_Pkt.dp_Arg4 == -1)
   {
      spkt->sp_Pkt.dp_Type = ACTION_SEEK;
      spkt->sp_Pkt.dp_Arg2 = 0L;
      spkt->sp_Pkt.dp_Arg3 = OFFSET_CURRENT;
      Dispatch(global, spkt, ACTION_RWMORE1, fh->fh.fh_Type);
   }
   else
   {
      spkt->sp_Pkt.dp_Res1 = spkt->sp_RP->Arg4; /* Fall through main case */
      RmtRWMore1(global, spkt);
   }
}

ACTFN(RmtRWMore1)
{
   struct FCHAIN *fh;

   fh = (struct FCHAIN *)spkt->sp_RP->Arg1;
 
   /* Was there any sort of error during the seek operation? */
   if (spkt->sp_Pkt.dp_Res1 < 0)
   {
      BUG(("RmtRead: Seek failed, code %d\n", spkt->sp_Pkt.dp_Res2));
      spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
      spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;
      spkt->sp_RP->DLen = 0;
      return;
   }

   /* Remember the original Seek position to return to them     */
   spkt->sp_Pkt.dp_Arg4 = spkt->sp_Pkt.dp_Res1;

   /* Do the I/O operation to get the data moved                */
   spkt->sp_Pkt.dp_Type = spkt->sp_RP->Type-1;
   spkt->sp_Pkt.dp_Arg1 = fh->fh.fh_Arg1;
   spkt->sp_Pkt.dp_Arg2 = (LONG)spkt->sp_RP->DataP;
   spkt->sp_Pkt.dp_Arg3 = spkt->sp_RP->Arg3;

   BUG(("RmtRWMore: Amount to r/w is %d\n", spkt->sp_Pkt.dp_Arg3));
   Dispatch(global, spkt, ACTION_RWMORE2, fh->fh.fh_Type);
}

ACTFN(RmtRWMore2)
{
   struct FCHAIN *fh;

   fh = (struct FCHAIN *)spkt->sp_RP->Arg1;
 
   /* If we encountered an error, we need to seek back to the original  */
   /* file position.                                                    */
   spkt->sp_RP->DLen = spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;

   if ((spkt->sp_RP->DLen < 0) &&
       (spkt->sp_RP->Arg4 != -1)) /* We seeked to begin with */
   {
      spkt->sp_RP->DLen = 0;
      /* Seek back to the original pos */
      spkt->sp_Pkt.dp_Type = ACTION_SEEK;
      spkt->sp_Pkt.dp_Arg2 = spkt->sp_Pkt.dp_Arg4;
      spkt->sp_Pkt.dp_Arg3 = OFFSET_BEGINNING;
      Dispatch(global, spkt, ACTION_RWMORE3, fh->fh.fh_Type);
   }
   else
   {
      spkt->sp_RP->Arg4 = spkt->sp_Pkt.dp_Arg4;
   }
}

ACTFN(RmtRWMore3) {}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                       RmtSeek( global, pkt )                            */
/*                                                                         */
/*-------------------------------------------------------------------------*/

ACTFN(RmtSeek)
{
   /* Arg1: APTR EFileHandle */
   /* Arg2: Position */
   /* Arg3: Mode */
   struct FCHAIN *fh;

   fh = (struct FCHAIN *)spkt->sp_RP->Arg1;

   BUG(("RmtSeek\n"));

   spkt->sp_Pkt.dp_Arg1 = fh->fh.fh_Arg1;
   spkt->sp_RP->DLen = 0;

   Dispatch(global, spkt, ACTION_RETURN, fh->fh.fh_Type);
}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                    RmtFindwrite( global, pkt )                          */
/*                                                                         */
/*-------------------------------------------------------------------------*/

ACTFN(RmtOpen)
{
   /* Arg1: FileHandle to fill in */
   /* Arg2: Lock for file relative to */
   /* Arg3: Name of file */

   struct FCHAIN *fh;
   struct MsgPort *port;
   char *s, *t;
   int len;
   ELOCK elock;
   int intent;

   BUG(("RmtFindwrite, lock %lx\n", spkt->sp_RP->Arg2));
   BUGBSTR("Filename = ", spkt->sp_RP->DataP);

   if (!global->opencount)
   {
      spkt->sp_Pkt.dp_Arg5 = (LONG)global->openpend;
      global->openpend = spkt;
      global->n.reply = 0;
      return;
   }
   
   global->opencount--;
   spkt->sp_Pkt.dp_Arg5 = 0;
   t = spkt->sp_RP->DataP;
   intent = spkt->sp_RP->Type == ACTION_FIND_INPUT ? ATTEMPT_ACCESS : ATTEMPT_WRITE;
   elock = (ELOCK)spkt->sp_Pkt.dp_Arg2;

   if(spkt->sp_RP->DLen == 0)
   {
      if(spkt->sp_RP->Arg3 != 0)
      {
         if (global->configlock == NULL)
         {
            spkt->sp_RP->Arg1 = DOSFALSE;
            spkt->sp_RP->Arg2 = ERROR_OBJECT_NOT_FOUND;
            return;
         }
         /* Special case - lock on .info file for node */
         strcpy(spkt->sp_RP->DataP, NODEINFONAME);
         spkt->sp_Pkt.dp_Arg1 = global->configlock;
         spkt->sp_Pkt.dp_Arg7 = 0;
         port = ((struct FileLock *)BADDR(global->configlock))->fl_Task;
         goto sendit;
      }
      else
        spkt->sp_RP->DataP[0] = 0;  /* Null name */
   }

   port = GetRDevice(global, spkt, elock, t, intent);
   if (port == (struct MsgPort *)-1)
   {
      spkt->sp_RP->Arg1 = DOSFALSE;
      spkt->sp_RP->Arg2 = ERROR_OBJECT_NOT_FOUND;
      return;
   }

   if (port == NULL) 
   {
      /* We didn't find it in the list.  See if we are dealing with the */
      /* Root lock by chance and they are asking for a .info file       */
      if (elock != NULL && elock != (ELOCK)ROOTLOCK)
         return;

      /* Make sure the name really ends with .info                      */
      t = spkt->sp_RP->DataP;
      len = t[0];
      if (len < 5 || memcmp(t+len-5, ".info", 5))
         return;

      /* Ok, let's just truncate the name and see if we can find it on the */
      /* List without the .info:                                           */
      t[0] -= 6;
      if ((port = GetRDevice(global, spkt, elock, t, intent)) == NULL)
         return;

      /* Ok, there is a device and the name ended in .info.  Now all we need */
      /* to do is locate the .info file for them.  It will either be in      */
      /* devs:networks/icons/name.info or devs:networks/icons/__DEFAULT__.info */
      /* The name should now be in the form name: without the .info.         */
      len = t[0]-1; /* Ignore the ':' */
      s = t+len;
      strcpy(s+7, ".info");
      while(len-- >= 0)
      {
         s[6] = *s;
         s--;
      }
      memcpy(t+1, "icons/", 6);
      t[0] += 10;
      spkt->sp_Pkt.dp_Arg5 = (LONG)DEFICON;
      spkt->sp_Pkt.dp_Arg1 = (LONG)global->configlock; /* It gets moved below */
      port = ((struct FileLock *)BADDR(global->configlock))->fl_Task;
   }

sendit:
   spkt->sp_Pkt.dp_Arg2 = spkt->sp_Pkt.dp_Arg1; 
   fh = (struct FCHAIN *)AllocMem(sizeof(struct FCHAIN), MEMF_PUBLIC|MEMF_CLEAR);
   if (fh == NULL)
   {
      spkt->sp_RP->Arg1 = DOS_FALSE;
      spkt->sp_RP->Arg2 = ERROR_NO_FREE_STORE;
      return;
   }
   BUG(("Allocated FileHandle = %lx\n", fh));

   spkt->sp_Pkt.dp_Arg1 = (LONG)MKBADDR(fh);
   if (spkt->sp_Pkt.dp_Arg2 == NULL || spkt->sp_Pkt.dp_Arg2 == ROOTLOCK)
   {
      BUG(("For Null/Root, using lock of %08lx\n", global->portlock));
      spkt->sp_Pkt.dp_Arg2 = global->portlock;
   }
   spkt->sp_Pkt.dp_Arg3 = (LONG)MKBADDR(spkt->sp_RP->DataP);
   spkt->sp_Pkt.dp_Arg4 = (LONG)port;

   Dispatch(global, spkt, ACTION_RETOPEN, port);
}

ACTFN(RmtOpenRet)
{
   struct FCHAIN *fh;
   struct MsgPort *port;

   fh = (struct FCHAIN *)BADDR(spkt->sp_Pkt.dp_Arg1);
   port = (struct MsgPort *)spkt->sp_Pkt.dp_Arg4;

   spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;

   /* If the open was successful, return the allocated filehandle as Arg3 */
   if (spkt->sp_Pkt.dp_Res1 == DOS_FALSE)
   {
      if (spkt->sp_Pkt.dp_Arg5 == 0)
      {
         FreeMem((char *)fh, sizeof(struct FCHAIN));
      }
      else
      {
         strcpy(spkt->sp_RP->DataP, (char *)spkt->sp_Pkt.dp_Arg5);
         spkt->sp_Pkt.dp_Arg5 = 0;
         Dispatch(global, spkt, ACTION_RETOPEN, port);
      }
   }
   else
   {
      BUG(("RmtFindWrite: new fh is 0x%08lx, port 0x%08lx\n", fh, port));
      spkt->sp_RP->Arg3 = (LONG)fh;
      spkt->sp_RP->Arg4 = (LONG)fh->fh.fh_Port;
      /* Add the file handle to the tracked file handles for this session */
      fh->next = spkt->sp_Ses->fhs;
      spkt->sp_Ses->fhs = fh;
      fh->fh.fh_Type = port;
      fh->info.all = spkt->sp_Pkt.dp_Arg7;
   }
   spkt->sp_RP->DLen = 0;
}

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                       RmtEnd( global, pkt )                             */
/*                                                                         */
/*-------------------------------------------------------------------------*/

ACTFN(RmtEnd)
{
   struct FileHandle *fh;

   BUG(("RmtEnd, freeing %lx\n", spkt->sp_RP->Arg1));

   spkt->sp_Pkt.dp_Arg1 = (fh = (struct FileHandle *)spkt->sp_RP->Arg1)->fh_Arg1;

   Dispatch(global, spkt, ACTION_RETEND, fh->fh_Type);
}

ACTFN(RmtEndRet)
{
   struct FileHandle *fh;
   struct FCHAIN *fc;

   fh = (struct FileHandle *)spkt->sp_RP->Arg1;

   global->opencount++;

   /* Remove the file handle from the active list */
   if (spkt->sp_Ses->fhs == (struct FCHAIN *)fh)
   {
      spkt->sp_Ses->fhs = spkt->sp_Ses->fhs->next;
   }
   else
   {
      for(fc = spkt->sp_Ses->fhs; fc != NULL; fc = fc->next)
      {
         if (fc->next == (struct FCHAIN *)fh)
         {
            fc->next = fc->next->next;
            break;
         }
      }
   }
   FreeMem((char *)fh, sizeof(struct FCHAIN));

   spkt->sp_RP->DLen = 0;
   spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;
}
@


1.15
log
@Correct opening of pseudo-root files.
@
text
@d15 2
a16 2
**      $Revision: 1.14 $
**      $Date: 91/01/15 02:21:16 $
d18 3
d252 9
d418 2
@


1.14
log
@Fixed access to icons when DEVS: is excluded.
@
text
@d15 2
a16 2
**      $Revision: 1.13 $
**      $Date: 91/01/11 10:46:44 $
d18 3
d275 9
a283 1
   if ((port = GetRDevice(global, spkt, elock, t, intent)) == NULL)
@


1.13
log
@Cleanup support for uplevel reference limits.  At the same time corrected
problems where cd net:john/assigned  would not return the asigned name
of the object
@
text
@d15 2
a16 2
**      $Revision: 1.12 $
**      $Date: 90/12/31 15:24:36 $
d18 5
d255 6
d263 4
d310 1
@


1.12
log
@Implement security restrictions for read/write access and prevention of
moving up too many levels.
@
text
@d15 2
a16 2
**      $Revision: 1.11 $
**      $Date: 90/12/30 15:39:30 $
d18 4
d71 1
a71 1
   if (fh->class == CLASS_READONLY && spkt->sp_RP->Type == ACTION_WRITE)
d112 1
a112 1
   if (fh->class == CLASS_READONLY && spkt->sp_RP->Type == ACTION_WRITE_MORE)
d351 1
a351 2
      fh->class = spkt->sp_Pkt.dp_Arg7 >> 8;
      fh->depth = spkt->sp_Pkt.dp_Arg7 & 0xff;
@


1.11
log
@Add passing back interactive information.
@
text
@d15 2
a16 2
**      $Revision: 1.10 $
**      $Date: 90/12/29 13:45:37 $
d18 3
d65 8
d108 6
d231 2
a232 1
   long lock;
d238 14
a251 1
   lock = spkt->sp_Pkt.dp_Arg2;
d253 1
a253 2
   if ((port = GetRDevice(global, spkt, lock,
                                  spkt->sp_RP->DataP)) == NULL)
d257 1
a257 1
      if (lock != NULL && lock != ROOTLOCK)
d269 1
a269 2
      spkt->sp_Pkt.dp_Arg2 = lock;
      if ((port = GetRDevice(global, spkt, lock, t)) == NULL)
d287 1
a287 1
      spkt->sp_Pkt.dp_Arg2 = (LONG)global->configlock;
d291 1
d342 1
a342 1
      spkt->sp_RP->Arg4 = fh->fh.fh_Port;
d347 2
@


1.10
log
@Correct syntax error.
@
text
@d15 2
a16 2
**      $Revision: 1.9 $
**      $Date: 90/12/01 21:08:59 $
d18 3
d312 1
@


1.9
log
@Corrected problems with returns for ACTION_READ and ACTION_WRITE.  Under
ACTION_WRITE it would send back a copy of the original data (performance
hit) and under ACTION_READ it would set DLEN to -1 if there was an error
on a read.
@
text
@d15 2
a16 2
**      $Revision: 1.8 $
**      $Date: 90/11/29 01:57:58 $
d18 6
d73 1
a73 1
      spkt->sp_RP->Dlen = spkt->sp_RP->Arg1;
@


1.8
log
@Eliminate DosAllocMem, DosFreeMem calls.
@
text
@d15 2
a16 2
**      $Revision: 1.7 $
**      $Date: 90/11/28 01:52:19 $
d18 3
a60 1
   spkt->sp_RP->DLen =
d63 6
@


1.7
log
@Added support for icons, added session tracking back in.
@
text
@d15 2
a16 2
**      $Revision: 1.5 $
**      $Date: 90/11/15 08:17:42 $
d18 3
d245 1
a245 1
   fh = (struct FCHAIN *)DosAllocMem(global, sizeof(struct FCHAIN));
d282 1
a282 1
         DosFreeMem((char *)fh);
d343 1
a343 1
   DosFreeMem((char *)fh);
@


1.6
log
@Added session support back in.
@
text
@d192 4
a195 1
    
d198 5
a202 2
   
   if ((port = GetRDevice(global, spkt, spkt->sp_RP->Arg2,
d205 35
a239 3
      spkt->sp_RP->Arg1 = DOS_FALSE;
      spkt->sp_RP->Arg2 = ERROR_WRITE_PROTECTED;
      return;
d252 5
d277 10
a286 1
      DosFreeMem((char *)fh);
d293 2
a294 2
      fh->next = global->fhs;
      global->fhs = fh;
d325 1
a325 1
   if (global->fhs == (struct FCHAIN *)fh)
d327 1
a327 1
      global->fhs = global->fhs->next;
d331 1
a331 1
      for(fc = global->fhs; fc != NULL; fc = fc->next)
@


1.5
log
@Correct multiple bugs associated with new version.  Sessions still are not supported.
@
text
@d15 2
a16 2
**      $Revision: 1.4 $
**      $Date: 90/11/05 06:56:19 $
d18 3
d241 2
a242 4
#if 0
      fh->next = global->ses->fhs;
      global->ses->fhs = fh;
#endif
a267 1
#if 0
a268 1
#endif
a271 1
#if 0
d273 1
a273 1
   if (global->ses->fhs == (struct FCHAIN *)fh)
d275 1
a275 1
      global->ses->fhs = global->ses->fhs->next;
d279 1
a279 1
      for(fc = global->ses->fhs; fc != NULL; fc = fc->next)
a287 1
#endif
@


1.4
log
@Major rewrite to make server multi-threaded with support for multiple
devices.  At this point in time it is not debugged and the concept of
sessions is missing.
@
text
@d16 1
a16 1
**      $Date: 90/11/04 17:36:27 $
d18 5
d32 1
a32 1
/*-------------------------------------------------------------------------*/
d52 2
a53 1
   spkt->sp_RP->DLen = spkt->sp_Pkt.dp_Res1;
@


1.3
log
@Push of working test verion.
@
text
@a0 1

d12 7
d29 20
a48 21
void
RmtRW(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* Arg1: APTR EFileHandle */
                        /* Arg2: APTR Buffer      */
                        /* Arg3: Length           */
{
   struct FCHAIN *fh;

   BUG(("RmtRW of %d bytes from fh 0x%08lx\n", global->RP.Arg3, global->RP.Arg1));

   fh = (struct FCHAIN *)global->RP.Arg1;
   pkt->dp_Type = global->RP.Type;
   pkt->dp_Arg1 = fh->fh.fh_Arg1;
   pkt->dp_Arg2 = (LONG)global->RP.DataP;
   pkt->dp_Arg3 = global->RP.Arg3;

   Dispatch(global, fh->fh.fh_Type);

   global->RP.DLen = pkt->dp_Res1;
   global->RP.Arg2 = pkt->dp_Res2;
d57 6
a62 9
void
RmtRWMore(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* Arg1: APTR EFileHandle    */
                        /* Arg2: APTR Buffer         */
                        /* Arg3: Length              */
                        /* Arg4: Seek Pos Indicator  */
{
   long code, sav2, sav3;
d65 1
a65 1
   BUG(("RmtRWMore of %d bytes\n", global->RP.Arg3));
d67 1
a67 1
   fh = (struct FCHAIN *)global->RP.Arg1;
d69 1
a69 1
   pkt->dp_Arg1 = fh->fh.fh_Arg1;
d74 22
a95 1
   if ((code = pkt->dp_Arg4) == -1)
d97 5
a101 20
      code = pkt->dp_Type;
      sav2 = pkt->dp_Arg2;
      sav3 = pkt->dp_Arg3;
      pkt->dp_Type = ACTION_SEEK;
      pkt->dp_Arg2 = 0L;
      pkt->dp_Arg3 = OFFSET_CURRENT;
      Dispatch(global, fh->fh.fh_Type);
      
      /* Was there any sort of error during the seek operation? */
      if (pkt->dp_Res1 < 0)
      {
         BUG(("RmtRead: Seek failed, code %d\n", pkt->dp_Res2));
         global->RP.Arg1 = pkt->dp_Res1;
         global->RP.Arg2 = pkt->dp_Res2;
         return;
      }
      pkt->dp_Type = code;
      pkt->dp_Arg2 = sav2;
      pkt->dp_Arg3 = sav3;
      code = -1;
d104 3
d108 8
a115 3
   pkt->dp_Type = global->RP.Type-1;
   pkt->dp_Arg2 = (LONG)global->RP.DataP;
   pkt->dp_Arg3 = global->RP.Arg3;
d117 3
a119 2
   BUG(("RmtRWMore: Amount to r/w is %d\n", pkt->dp_Arg3));
   Dispatch(global, fh->fh.fh_Type);
d121 2
d125 5
a129 2
   if (((global->RP.DLen = global->RP.Arg1 = pkt->dp_Res1) < 0) &&
       (code != -1)) /* We seeked to begin with */
d131 1
a131 1
      code = pkt->dp_Res2;
d133 4
a136 6
      pkt->dp_Type = ACTION_SEEK;
      pkt->dp_Arg2 = pkt->dp_Arg4;
      pkt->dp_Arg3 = OFFSET_BEGINNING;
      Dispatch(global, fh->fh.fh_Type);
      pkt->dp_Arg2 = code;
      global->RP.DLen = 0;
d138 4
d144 2
d152 1
a152 7
void
RmtSeek(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent      */
                        /* Arg1: APTR EFileHandle */
                        /* Arg2: Position */
                        /* Arg3: Mode */
d154 3
d159 1
a159 1
   fh = (struct FCHAIN *)global->RP.Arg1;
d163 2
a164 3
   pkt->dp_Arg1 = fh->fh.fh_Arg1;
   pkt->dp_Arg2 = global->RP.Arg2;
   pkt->dp_Arg3 = global->RP.Arg3;
d166 1
a166 3
   Dispatch(global, fh->fh.fh_Type);

   global->RP.DLen = 0;
d175 1
a175 7
void
RmtFindwrite(global,pkt)
GLOBAL global;
struct DosPacket *pkt;  /* a pointer to the dos packet sent    */
                        /* Arg1: FileHandle to fill in */
                        /* Arg2: Lock for file relative to */
                        /* Arg3: Name of file */
d177 4
d184 2
a185 2
   BUG(("RmtFindwrite, lock %lx\n", global->RP.Arg2));
   BUGBSTR("Filename = ", global->RP.DataP);
d187 2
a188 1
   if ((port = GetRDevice(global, global->RP.Arg2, global->RP.DataP)) == NULL)
d190 2
a191 2
      global->RP.Arg1 = DOS_FALSE;
      global->RP.Arg2 = ERROR_WRITE_PROTECTED;
d198 2
a199 2
      global->RP.Arg1 = DOS_FALSE;
      global->RP.Arg2 = ERROR_NO_FREE_STORE;
d203 15
a217 5
    
   pkt->dp_Arg1 = (LONG)MKBADDR(fh);
   pkt->dp_Arg2 = global->RP.Arg2;
   MBSTR(global->RP.DataP, global->fib);
   pkt->dp_Arg3 = (LONG)MKBADDR(global->fib);
d219 2
a220 1
   Dispatch(global, port);
d223 1
a223 1
   if (pkt->dp_Res1 == DOS_FALSE)
d230 1
a230 1
      global->RP.Arg3 = (LONG)fh;
d232 1
d235 1
d238 1
a238 1
   global->RP.DLen = 0;
d247 1
a247 4
void
RmtEnd( global, pkt )
GLOBAL global;
struct DosPacket *pkt;              /* a pointer to the dos packet sent    */
d249 37
a285 26
    struct FileHandle *fh;
    struct FCHAIN *fc;

    BUG(("RmtEnd, freeing %lx\n", global->RP.Arg1));

    pkt->dp_Arg1 = (fh = (struct FileHandle *)global->RP.Arg1)->fh_Arg1;

    Dispatch(global, fh->fh_Type);

    /* Remove the file handle from the active list */
    if (global->ses->fhs == (struct FCHAIN *)fh)
    {
       global->ses->fhs = global->ses->fhs->next;
    }
    else
    {
       for(fc = global->ses->fhs; fc != NULL; fc = fc->next)
       {
          if (fc->next == (struct FCHAIN *)fh)
          {
             fc->next = fc->next->next;
             break;
          }
       }
    }
    DosFreeMem((char *)fh);
d287 3
a289 1
    global->RP.DLen = 0;
@


1.2
log
@Major rewrite - add tracking of file handles, implement new Dispatch.
@
text
@d32 1
a32 1
   BUG(("RmtRW of %d bytes\n", global->RP.Arg3));
a39 1
   BUG(("RmtRead: Amount to r/w is %d\n", pkt->dp_Arg3));
d171 2
d199 1
d204 1
@


1.1
log
@Initial revision
@
text
@d4 5
a8 5
/* |. o.| || Reserved.	This program may not be distributed without the    */
/* | .	| || permission of the authors: 			   BBS:    */
/* | o	| ||   John Toebes     Doug Walker    Dave Baker		   */
/* |  . |//								   */
/* ======								   */
d10 1
a10 1
/* File Access: 	   */
a16 17
static long CurrentPos U_ARGS((GLOBAL, struct DosPacket *));

static long
CurrentPos(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
{
    pkt->dp_Type = ACTION_SEEK;
    /* REMOVED (doesn't work on read-error because RP.Arg1 field is NULL!)
     * pkt->dp_Arg1 = ((struct FileHandle *)global->RP.Arg1)->fh_Arg1;
     */
    pkt->dp_Arg2 = 0L;
    pkt->dp_Arg3 = OFFSET_CURRENT;
    Dispatch(global);
    return(pkt->dp_Res1);
}

d18 3
a20 3
/*									   */
/*		   RmtRead( global, pkt )                                  */
/*									   */
d24 1
a24 1
RmtRead(global,pkt)
d26 25
a50 85
struct DosPacket *pkt;	/* Arg1: APTR EFileHandle */
			/* Arg2: APTR Buffer	  */
			/* Arg3: Length 	  */
{
    long toread, amount, total;
    long offset;	/* ONLY VALID IF #BYTES > ONE-PACKET-BUFFER */
    short didseek = 0;

    BUG(("RmtRead of %d bytes\n", global->RP.Arg3));

    pkt->dp_Arg1 = ((struct FileHandle *)global->RP.Arg1)->fh_Arg1;

    if (global->RP.Arg3 > global->n.NetBufSize) 
    {
	/* 1. Seek 0 to get current position in file
	 * 2. Dispatch read (max global->n.NetBufSize bytes)
	 * 3. If error, seek back to original pos
	 * 4. Reply to other side
	 * 5. If more to read, go back to (2)
	 */
	if ((offset = CurrentPos(global, pkt)) < 0) {
	    BUG(("RmtRead: Seek failed, code %d\n", pkt->dp_Res2));
	    global->RP.Arg1 = pkt->dp_Res1;
	    global->RP.Arg2 = pkt->dp_Res2;
	    return;
	}
	didseek = 1;	    /*	offset is valid */
    }

    BUG(("RmtRead: Seek done, position is %d\n", offset));

    toread  = global->RP.Arg3;

    pkt->dp_Type = ACTION_READ;
    pkt->dp_Arg2 = (LONG)global->RP.DataP;

    for (total = 0; toread; total += amount, toread -= amount) {
	/* If this isn't the first time, wait for confirmation */
	if (total) {
	    global->RP.DLen = 0;
	    GetRPacket((NGLOBAL)global, global->n.devptr, &global->RP);
	}
#if 0
	SetPacketBuffer(&global->RP, min(toread, global->n.NetBufSize));
#endif
	pkt->dp_Arg2 = (LONG)global->RP.DataP;
	pkt->dp_Arg3 = min(toread, global->n.NetBufSize);

	BUG(("RmtRead: Amount is %d, to read is %d\n", pkt->dp_Arg3, toread));
	Dispatch(global);

	global->RP.DLen = pkt->dp_Res1;

	if (PutRPacket((NGLOBAL)global, global->n.devptr, &global->RP))
	    pkt->dp_Res1 = -1;

	/* If there was EOF or some kind of error, quit */

	if ((amount = pkt->dp_Res1) == 0)
	    break;  /* Normal EOF */

	/*
	 *  If we have a read error and could not do the write atomically
	 *  anyway we must seek back to where we started off.
	 */

	if (amount < 0) {
	    if (didseek && offset >= 0) {
		/* Seek back to the original pos */
		pkt->dp_Type = ACTION_SEEK;
		pkt->dp_Arg2 = offset;
		pkt->dp_Arg3 = OFFSET_BEGINNING;
		Dispatch(global);
	    }
	    break;
	}
    }
    BUG(("RmtRead: Done reading, returning\n"));
    global->n.reply = 0;  /* Don't resend the last packet */
}

/*-------------------------------------------------------------------------*/
/*									   */
/*			RmtWrite( global, pkt )                            */
/*									   */
d54 1
a54 1
RmtWrite(global,pkt)
d56 69
a124 48
struct DosPacket *pkt;	/* Arg1: APTR EFileHandle */
			/* Arg2: APTR Buffer */
			/* Arg3: Length */
{
    long offset;	/* ONLY VALID IF #BYTES > ONE-PACKET-BUFFER */
    short didseek = 0;

    BUG(("RmtWrite\n"));

    pkt->dp_Arg1 = ((struct FileHandle *)global->RP.Arg1)->fh_Arg1;

    if (global->RP.Arg3 > global->n.NetBufSize) {
	if ((offset = CurrentPos(global, pkt)) < 0) {
	    BUG(("RmtWrite: Seek failed, code %d\n", pkt->dp_Res2));
	    global->RP.Arg1 = pkt->dp_Res1;
	    global->RP.Arg2 = pkt->dp_Res2;
	    return;
	}
	didseek = 1;	    /*	offset is valid */
    }

    pkt->dp_Type = ACTION_WRITE;
    pkt->dp_Arg2 = (LONG)global->RP.DataP;

    for (;;) {
	pkt->dp_Arg3 = global->RP.Arg3;
	Dispatch(global);

	global->RP.DLen = 0;
	if (PutRPacket((NGLOBAL)global, global->n.devptr, &global->RP))
	    pkt->dp_Res1 = -1;
	if (pkt->dp_Res1 == -1) {
	    if (didseek && offset >= 0) {   /*  seek back where we started */
		pkt->dp_Type = ACTION_SEEK;
		pkt->dp_Arg2 = offset;
		pkt->dp_Arg3 = OFFSET_BEGINNING;
		Dispatch(global);
	    }
	    break;
	}
	if (global->RP.Arg4 == 0)
	    break;  /* no more to write */

	GetRPacket((NGLOBAL)global, global->n.devptr, &global->RP);
    }
    global->n.reply = 0;  /* Don't reply twice */
}

a125 4
/*									   */
/*			 RmtSeek( global, pkt )                            */
/*									   */
/*-------------------------------------------------------------------------*/
d130 4
a133 4
struct DosPacket *pkt;	/* a pointer to the dos packet sent	 */
			/* Arg1: APTR EFileHandle */
			/* Arg2: Position */
			/* Arg3: Mode */
d135 19
a153 14
    BUG(("RmtSeek\n"));
    pkt->dp_Arg1 = ((struct FileHandle *)global->RP.Arg1)->fh_Arg1;
    pkt->dp_Arg2 = global->RP.Arg2;
    pkt->dp_Arg3 = global->RP.Arg3;

    Dispatch(global);

    global->RP.DLen = 0;
}

/*-------------------------------------------------------------------------*/
/*									   */
/*		      RmtFindwrite( global, pkt )                          */
/*									   */
d159 4
a162 4
struct DosPacket *pkt;	/* a pointer to the dos packet sent    */
			/* Arg1: FileHandle to fill in */
			/* Arg2: Lock for file relative to */
			/* Arg3: Name of file */
d164 46
a209 29
    struct FileHandle *fh;

    BUG(("RmtFindwrite, lock %lx\n", global->RP.Arg2));
    BUGBSTR("Filename = ", global->RP.DataP);

    fh = (struct FileHandle *)DosAllocMem(global, sizeof(struct FileHandle));
    if (!fh) {
	global->RP.Arg1 = DOS_FALSE;
	global->RP.Arg2 = ERROR_NO_FREE_STORE;
	return;
    }
    BUG(("Allocated FileHandle = %lx\n", fh));

    pkt->dp_Arg1 = (LONG)MKBADDR(fh);
    pkt->dp_Arg2 = global->RP.Arg2;
    MBSTR(global->RP.DataP, global->fib);
    pkt->dp_Arg3 = (LONG)MKBADDR(global->fib);

    Dispatch(global);

    /* If the open was successful, return the allocated filehandle as Arg3 */
    if (pkt->dp_Res1 == DOS_FALSE)
	DosFreeMem((char *)fh);
    else
	global->RP.Arg3 = (LONG)fh;

    global->RP.DLen = 0;
}

a210 4
/*									   */
/*			 RmtEnd( global, pkt )                             */
/*									   */
/*-------------------------------------------------------------------------*/
d215 1
a215 1
struct DosPacket *pkt;		    /* a pointer to the dos packet sent    */
d218 2
d224 1
a224 1
    Dispatch(global);
d226 16
a245 2


@
