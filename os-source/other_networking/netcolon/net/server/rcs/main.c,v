head     1.24;
branch   ;
access   ;
symbols  r37-12:1.23 v37r8:1.20 Distillery:1.20;
locks    dlarson:1.24; strict;
comment  @ * @;


1.24
date     91.06.07.14.49.40;  author dlarson;  state Stab;
branches ;
next     1.23;

1.23
date     91.05.15.14.41.35;  author dlarson;  state Stab;
branches ;
next     1.22;

1.22
date     91.05.14.16.11.37;  author dlarson;  state Stab;
branches ;
next     1.21;

1.21
date     91.05.10.21.49.51;  author dlarson;  state Stab;
branches ;
next     1.20;

1.20
date     91.03.11.11.18.39;  author J_Toebes;  state Exp;
branches ;
next     1.19;

1.19
date     91.03.11.11.16.55;  author J_Toebes;  state Exp;
branches ;
next     1.18;

1.18
date     91.01.15.01.49.41;  author J_Toebes;  state Exp;
branches ;
next     1.17;

1.17
date     91.01.11.00.00.29;  author J_Toebes;  state Exp;
branches ;
next     1.16;

1.16
date     90.12.30.15.38.40;  author J_Toebes;  state Exp;
branches ;
next     1.15;

1.15
date     90.12.29.13.09.36;  author J_Toebes;  state Exp;
branches ;
next     1.14;

1.14
date     90.11.29.02.00.20;  author J_Toebes;  state Exp;
branches ;
next     1.13;

1.13
date     90.11.28.01.53.21;  author J_Toebes;  state Exp;
branches ;
next     1.12;

1.12
date     90.11.23.15.07.07;  author J_Toebes;  state Exp;
branches ;
next     1.11;

1.11
date     90.11.18.22.54.50;  author J_Toebes;  state Exp;
branches ;
next     1.10;

1.10
date     90.11.17.21.50.50;  author J_Toebes;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.15.08.17.10;  author J_Toebes;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.05.06.56.24;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     90.10.18.00.26.58;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.10.16.00.58.58;  author John_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.10.09.03.00.21;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.10.08.20.16.18;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.07.23.45.47;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.03.00.17.30;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.22.58.33;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@main server dispatch code
@


1.24
log
@fix bumprev stuff
@
text
@/*
**      $Log:	main.c,v $
 * Revision 1.23  91/05/15  14:41:35  dlarson
 * Correct ACTION_NETWORK_LOGIN, ACTION_NETWORK_PASSWD, ACTION_NETWORK_HELLO
 *
 * Revision 1.22  91/05/14  16:11:37  dlarson
 * Fixed NETWORK_SNAME and NETWORK_PASSWD yet another time
 *
 * Revision 1.21  91/05/10  21:49:51  dlarson
 * Change NETWORK_INIT to NETWORK_SNAME
 *
 * Revision 1.20  91/03/11  11:18:39  J_Toebes
 * Add code to limit the number of active open file handles (really fix it)
 *
 * Revision 1.19  91/03/11  11:16:55  J_Toebes
 * Add code to limit the number of active open file handles
 *
 * Revision 1.18  91/01/15  01:49:41  J_Toebes
 * Added version information
 *
 * Revision 1.17  91/01/11  00:00:29  J_Toebes
 * Added code to compress the FIB portion of the return on an ACT_EXAMINE/EXNEXT
 *
 * Revision 1.16  90/12/30  15:38:40  J_Toebes
 * Add support for Network Init and Network Login
 *
 * Revision 1.15  90/12/29  13:09:36  J_Toebes
 * Add memory Debugging code.
 *
 * Revision 1.14  90/11/29  02:00:20  J_Toebes
 * General cleanup to eliminate debugging, reduce size.
 *
 * Revision 1.13  90/11/28  01:53:21  J_Toebes
 * Added new actions, lock on config directory.
 *
 * Revision 1.12  90/11/23  15:07:07  J_Toebes
 * Added session support back in.
 *
 * Revision 1.11  90/11/18  22:54:50  J_Toebes
 * Added RmtNameUnlock routine for namenode state machine.
 *
 * Revision 1.10  90/11/17  21:50:50  J_Toebes
 * Corrected handling of SDN_ERR for accept calls
 *
 * Revision 1.9  90/11/15  08:17:10  J_Toebes
 * Correct multiple bugs associated with new version.  Sessions still are not supported.
 *
 * Revision 1.8  90/11/05  06:56:24  J_Toebes
 * Major rewrite to make server multi-threaded with support for multiple
 * devices.  At this point in time it is not debugged and the concept of
 * sessions is missing.
 *
**
**/

#define _main xxxumain
#define MemCleanup xxxmemcleanup
#include "server.h"
#include "network-server_rev.h"

#undef _main
#undef MemCleanup

/******************************************************************************/
/******************************************************************************/
/********************* Dispatch table to handle all packets *******************/
/******************************************************************************/
/******************************************************************************/
#define BP1 1
#define BP2 2
#define BP3 4
#define BP4 8
#define BP5 16
typedef void (*ifuncp)(GLOBAL, SPACKET *);

#if DEBUG
char *dbgwind = "CON:0/0/640/160/NET-SERVER/a";
#endif /* DEBUG */

struct LookupTable {
    short     num;
    short     flags;
    ifuncp  subr;
};

struct LookupTable worktab[] = {
   /*    5 */ { ACTION_DIE,            0  | 0  | 0  | 0  , RmtDie           }, /* */
   /*    6****{ ACTION_EVENT,          0  | 0  | 0  | 0  , NULL             },*****/
   /*    7****{ ACTION_CURRENT_VOLUME, BP1| 0  | 0  | 0  , NULL             },*****/
   /*    8 */ { ACTION_LOCATE_OBJECT,  BP1| BP2| 0  | 0  , RmtLock          }, /* */
   /*    9****{ ACTION_RENAME_DISK,    BP1| BP2| 0  | 0  , NULL             },*****/
   /*   15 */ { ACTION_FREE_LOCK,      BP1| 0  | 0  | 0  , RmtUnLock        }, /* */
   /*   16 */ { ACTION_DELETE_OBJECT,  BP1| BP2| 0  | 0  , RmtDelete        }, /* */
   /*   17 */ { ACTION_RENAME_OBJECT,  BP1| BP2| BP3| BP4, RmtRename        }, /* */
   /*   18****{ ACTION_MORE_CACHE,     0  | 0  | 0  | 0  , NULL             },*****/
   /*   19 */ { ACTION_COPY_DIR,       BP1| 0  | 0  | 0  , RmtDupLock       }, /* */
   /*   20****{ ACTION_WAIT_CHAR,      0  | 0  | 0  | 0  , NULL             },*****/
   /*   21 */ { ACTION_SET_PROTECT,    0  | BP2| BP3| 0  , RmtSetProtection }, /* */
   /*   22 */ { ACTION_CREATE_DIR,     BP1| BP2| 0  | 0  , RmtCreateDir     }, /* */
   /*   23 */ { ACTION_EXAMINE_OBJECT, BP1| BP2| 0  | 0  , RmtExamine       }, /* */
   /*   24 */ { ACTION_EXAMINE_NEXT,   BP1| BP2| 0  | 0  , RmtExNext        }, /* */
   /*   25****{ ACTION_DISK_INFO,      BP1| 0  | 0  | 0  , NULL             },*****/
   /*   26 */ { ACTION_INFO,           BP1| BP2| 0  | 0  , RmtInfo          }, /* */
   /*   27****{ ACTION_FLUSH,          0  | 0  | 0  | 0  , NULL             },*****/
   /*   28 */ { ACTION_SET_COMMENT,    0  | BP2| BP3| BP4, RmtSetComment    }, /* */
   /*   29 */ { ACTION_PARENT,         BP1| 0  | 0  | 0  , RmtParent        }, /* */
   /*   30****{ ACTION_TIMER,          BP1| 0  | 0  | 0  , NULL             },*****/
   /*   31****{ ACTION_INHIBIT,        0  | 0  | 0  | 0  , NULL             },*****/
   /*   34 */ { ACTION_SET_FILE_DATE,  0  | 0  | 0  | 0  , RmtSetFileDate   }, /* */
   /*   40****{ ACTION_SAME_LOCK,      0  | 0  | 0  | 0  , NULL             },*****/
   /*   52 */ { ACTION_READ,           0  | 0  | 0  | 0  , RmtRW            }, /* */
   /*   53 */ { ACTION_READ_MORE,      0  | 0  | 0  | 0  , RmtRWMore        }, /* */
   /*   57 */ { ACTION_WRITE,          0  | 0  | 0  | 0  , RmtRW            }, /* */
   /*   58 */ { ACTION_WRITE_MORE,     0  | 0  | 0  | 0  , RmtRWMore        }, /* */
   /* 1001****{ ACTION_READ_RETURN,    0  | 0  | 0  | 0  , NULL             },*****/
   /* 1002****{ ACTION_WRITE_RETURN,   0  | 0  | 0  | 0  , NULL             },*****/
   /* 1004 */ { ACTION_FIND_WRITE,     BP1| BP2| BP3| 0  , RmtOpen          }, /* */
   /* 1005 */ { ACTION_FIND_INPUT,     BP1| BP2| BP3| 0  , RmtOpen          }, /* */
   /* 1006 */ { ACTION_FIND_OUTPUT,    BP1| BP2| BP3| 0  , RmtOpen          }, /* */
   /* 1007 */ { ACTION_END,            0  | 0  | 0  | 0  , RmtEnd           }, /* */
   /* 1008 */ { ACTION_SEEK,           0  | 0  | 0  | 0  , RmtSeek          }, /* */
   /* 1009****{ ACTION_FINDREADONLY,   0  | 0  | 0  | 0  , NULL             },*****/
   /* 1010****{ ACTION_FINDONEWRITER,  0  | 0  | 0  | 0  , NULL             },*****/
   /* 1020****{ ACTION_FORMAT,         0  | 0  | 0  | 0  , NULL             },*****/
   /* 1021****{ ACTION_MAKE_LINK,      0  | 0  | 0  | 0  , NULL             },*****/
   /* 1022****{ ACTION_SET_FILE_SIZE,  0  | 0  | 0  | 0  , NULL             },*****/
   /* 1023****{ ACTION_WRITE_PROTECT,  0  | 0  | 0  | 0  , NULL             },*****/
   /* 1024****{ ACTION_READ_LINK,      0  | 0  | 0  | 0  , NULL             },*****/
   /* 1026****{ ACTION_FH_FROM_LOCK,   0  | 0  | 0  | 0  , NULL             },*****/
   /* 1027****{ ACTION_IS_FILESYSTEM,  0  | 0  | 0  | 0  , NULL             },*****/
   /* 1028****{ ACTION_CHANGE_MODE,    0  | 0  | 0  | 0  , NULL             },*****/
   /* 1030****{ ACTION_COPY_DIR_FH,    0  | 0  | 0  | 0  , NULL             },*****/
   /* 1031****{ ACTION_PARENT_FH,      0  | 0  | 0  | 0  , NULL             },*****/
   /* 1033****{ ACTION_EXAMINE_ALL,    0  | 0  | 0  | 0  , NULL             },*****/
   /* 1034****{ ACTION_EXAMINE_FH,     0  | 0  | 0  | 0  , NULL             },*****/
#if DEBUG
   /* 2010 */ { ACTION_HANDLER_DEBUG,  0  | 0  | 0  | 0  , RmtSetDebug      }, /* */
#endif
   /* 2011****{ ACTION_SET_TRANS_TYPE, BP1| 0  | 0  | 0  , NULL             },*****/
   /* 2012 ***{ ACTION_NETWORK_HELLO,  0  | 0  | 0  | 0  , RmtNetLogin      },*****/
   /* 4097****{ ACTION_ADD_NOTIFY,     0  | 0  | 0  | 0  , NULL             },*****/
   /* 4098****{ ACTION_REMOVE_NOTIFY,  0  | 0  | 0  | 0  , NULL             },*****/
   /* 5550 */ { ACTION_NETWORK_LOGIN,  0  | 0  | 0  | 0  , RmtNetLogin      }, /* */
   /* 5554 */ { ACTION_NETWORK_START,  0  | 0  | 0  | 0  , RmtNetStart      }, /* */
   /* 5555 */ { ACTION_NETWORK_SNAME,  0  | 0  | 0  | 0  , RmtNetInit       }, /* */
   /* 5556 */ { ACTION_NETWORK_END,    0  | 0  | 0  | 0  , RmtNetStop       }, /* */
   /* 5557 */ { ACTION_NETWORK_PASSWD, 0  | 0  | 0  | 0  , RmtNetPassword   }, /* */
   /* 5558 */ { ACTION_RETURN,         0  | 0  | 0  | 0  , RmtReturn        }, /* */
   /* 5559 */ { ACTION_RETRW,          0  | 0  | 0  | 0  , RmtRWRet         }, /* */
   /* 5560 */ { ACTION_RWMORE1,        0  | 0  | 0  | 0  , RmtRWMore1       }, /* */
   /* 5561 */ { ACTION_RWMORE2,        0  | 0  | 0  | 0  , RmtRWMore2       }, /* */
   /* 5562 */ { ACTION_RWMORE3,        0  | 0  | 0  | 0  , RmtRWMore3       }, /* */
   /* 5563 */ { ACTION_RETOPEN,        0  | 0  | 0  | 0  , RmtOpenRet       }, /* */
   /* 5564 */ { ACTION_RETEND,         0  | 0  | 0  | 0  , RmtEndRet        }, /* */
   /* 5565 */ { ACTION_RETLOCKNAME,    0  | 0  | 0  | 0  , RmtNameLockRet   }, /* */
   /* 5566 */ { ACTION_RETPARENT,      0  | 0  | 0  | 0  , RmtParentRet     }, /* */
   /* 5567 */ { ACTION_RETNAMEEX,      0  | 0  | 0  | 0  , RmtNameExamine   }, /* */
   /* 5568 */ { ACTION_RETNAMELOCK,    0  | 0  | 0  | 0  , RmtNameLock      }, /* */
   /* 5569 */ { ACTION_RETNAMEUNLOCK,  0  | 0  | 0  | 0  , RmtNameUnlock    }, /* */
   /* 5570 */ { ACTION_FINDINFO,       0  | 0  | 0  | 0  , RmtFindInfo      }, /* */
   /* 5571 */ { ACTION_RETINFO,        0  | 0  | 0  | 0  , RmtDoneInfo      }, /* */
   /* 5572 */ { ACTION_RETLOCK,        0  | 0  | 0  | 0  , RmtRetLock       }, /* */
   /* 5573 */ { ACTION_RETFIB,         0  | 0  | 0  | 0  , RmtRetFIB        }
  };
#define WORKSIZE (sizeof(worktab)/sizeof(struct LookupTable))

extern struct Library *SysBase;
struct DosLibrary *DOSBase;

void __stdargs _main(char *p);

void __stdargs _main(p)
char *p;
{
   ifuncp             subr;
   int                action;
   struct global      main_global;
   int                low, high, this;
   struct RPacket    *rp;
   long               sigmask;
   SPACKET           *spkt;
   DRIVER            *driver;
   struct Library    *DriverBase;
#define global (&main_global)  /* This allows us to use global in this main code */

   MWInit(NULL, MWF_NOCHECK,"CON:0/0/639/199/Memory debug");

   SysBase = (*((struct Library **) 4));
   DOSBase = (struct DosLibrary *)OpenLibrary(DOSNAME,0);

   /*===========================================================================*/
   /*                  Initialize our global data structure                     */
   /*===========================================================================*/
   memset((char *)&main_global, 0, sizeof(main_global));

   global->n.self   = (struct Process *) FindTask(0L);  /* find myself          */
   global->n.self->pr_WindowPtr = (APTR)-1;
   global->n.run    = 2;
   global->n.port   = CreatePort(NULL, 0);
   global->n.NetBufSize = 8192;  /* We need to get this from the connection */
   global->replymask = 1l << global->n.port->mp_SigBit;
   global->waitbits |= global->replymask;
   global->opencount = MAXOPENS;
#if DEBUG
   initreq(global);
#endif

   global->configlock = Lock("devs:networks" VERSTAG, SHARED_LOCK);
   /*===========================================================================*/
   /*                  Parse the user configuration file                        */
   /*===========================================================================*/
   ParseConfig(global);

   /*===========================================================================*/
   /*   Here we loop basically forever waiting for events to happen             */
   /*===========================================================================*/
   driver = NULL;
   while(global->n.run)
   {
      MWCheck();
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
      /* One of two things will happen now:                                     */
      /*    1) A message will come in from some handler.                        */
      /*       a) Connection has been established                               */
      /*       b) Connection has been terminated                                */
      /*       c) Request for some file system service                          */
      /*    2) A response to a previous packet has been returned                */
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
      do
      {
         if (global->openpend && global->opencount)
         {
            spkt = global->openpend;
            global->openpend = (SPACKET *)spkt->sp_Pkt.dp_Arg5;
            goto havemsg;
         }

         if (driver == NULL)
         {
            sigmask = Wait(global->waitbits);
            driver = global->drivers;
         }

         spkt = NULL;
         if (sigmask & global->replymask)
         {
            /* It is one of the original packets returning to us.               */
            spkt = (SPACKET *)GetMsg(global->n.port);
            if (spkt != NULL)
            {
               rp = spkt->sp_RP;
               break;
            }
            /* Note that we could turn off the signal bit here once we call     */
            /* getmsg and fail to find a message for us.  If however we have a  */
            /* driver that is sharing that same signal bit then this probably   */
            /* would cause us a lot of trouble.  For now we will take the extra */
            /* overhead of the message check but could consider doing the reset */
            /* later if we determine that this is an acceptable restriction     */
         }

         while(driver != NULL)
         {
            if (driver->sigmask & sigmask)
            {
               /* Looks like an eligible driver, ask him if he is.      */
               DriverBase = driver->libbase;
               switch(SDNAccept(driver->drglobal, &rp))
               {
                  case SDN_OK:
                     /* We got an incoming request.  Get us some memory to deal */
                     /* with it.                                                */
                     spkt = GetSPacket(global);
                     if (spkt == NULL)
                     {
                        /* OOps, not enough memory to even process the request  */
                        /* just respond to them with a 'sorry charlie'          */
                        /* We will have to worry about connect requests later   */
                        /* but if we fail on a connect request we really want to*/
                        /* force the request to be delayed and try it again when*/
                        /* we get some memory back                              */
                        rp->Arg1 = DOSFALSE;
                        rp->Arg2 = ERROR_NO_FREE_STORE;
                        SDNReply(driver->drglobal, rp);
                        break;
                     }

                     spkt->sp_RP = rp;
                     spkt->sp_Action = rp->Type;
                     spkt->sp_Driver = driver;

                     /* For convenience, copy over all the arguments            */
                     spkt->sp_Pkt.dp_Type = rp->Type;
                     spkt->sp_Pkt.dp_Arg1 = rp->Arg1;
                     spkt->sp_Pkt.dp_Arg2 = rp->Arg2;
                     spkt->sp_Pkt.dp_Arg3 = rp->Arg3;
                     spkt->sp_Pkt.dp_Arg4 = rp->Arg4;
                     spkt->sp_Ses = SDNGetConData(driver->drglobal, rp);
                     goto havemsg;

                  case SDN_ERR:
                  case SDN_NONE:
                     driver = driver->next;
                     break;
               }
            }
            else
            {
               driver = driver->next;
            }
         }
      } while(spkt == NULL);


havemsg:
      /* We now have a message.  Actually we don't really care where it came    */
      /* from because it simply passes through our state machine to be          */
      /* processed.  Eventually it will hit a state where it gets returned      */
      /* to the sender.                                                         */

      BUG(("Execute: action #%ld arg1 %lx\n", rp->Type,rp->Arg1));

      action = spkt->sp_Action;
      low = 0;
      high = WORKSIZE;
      subr = NULL;
      while (low <= high)
      {
         this = (high-low)/2 + low;
         if (worktab[this].num == action)
         {
            subr = worktab[this].subr;
            break;
         }
         if (worktab[this].num < action)
            low = this + 1;
         else
            high = this - 1;
      }

      global->n.reply = 1;
      if (subr != NULL)
      {
         (*subr)(global, spkt);
      }
      else
      {
         BUG(("Unknown packet type %ld\n",rp->Type));
         rp->Arg1 = DOS_FALSE;
         rp->Arg2 = ERROR_ACTION_NOT_KNOWN;
      }

      if (global->n.reply)
      {
         DriverBase = spkt->sp_Driver->libbase;

         /* For fake packets we will want to reclaim the storage without        */
         /* calling to reply to the packet.  We could protect against this in   */
         /* the driver, and might consider doing so if we believe that there    */
         /* is a driver that is actually sending a message for the network      */
         /* initialization and termination.                                     */
         if (global->n.reply == -1)
         {
            SDNFreeRPacket(spkt->sp_Driver->drglobal, rp);
         }
         else
         {
            SDNReply(spkt->sp_Driver->drglobal, rp);
         }
         FreeSPacket(global, spkt);
      }

      BUG(("-----\n"));
   }

fail: ;
    MWTerm();

   BUGTERM()
}
#undef global

#if DEBUG
ACTFN(RmtSetDebug)
{
    BUG(("RmtSetDebug: Entry, arg1 %lx\n", spkt->sp_RP->Arg1))
    if(spkt->sp_RP->Arg1)
        BUGINIT()
    else
        BUGTERM()

    spkt->sp_RP->Arg1 = DOS_TRUE;
}
#endif

void __stdargs MemCleanup(void);
void __stdargs MemCleanup() {}
@


1.23
log
@Correct ACTION_NETWORK_LOGIN, ACTION_NETWORK_PASSWD, ACTION_NETWORK_HELLO
@
text
@a1 4
**      $Filename: main.c $
**      $Author: dlarson $
**      $Revision: 1.22 $
**      $Date: 91/05/14 16:11:37 $
d3 3
d59 2
d208 1
a208 1
   global->configlock = Lock("devs:networks" VERSTRING, SHARED_LOCK);
@


1.22
log
@Fixed NETWORK_SNAME and NETWORK_PASSWD yet another time
@
text
@d4 2
a5 2
**      $Revision: 1.21 $
**      $Date: 91/05/10 21:49:51 $
d7 3
d139 1
a139 1
   /* 2012 */ { ACTION_NETWORK_HELLO,  0  | 0  | 0  | 0  , RmtNetLogin      }, /* */
d142 1
d146 1
a146 1
   /* 5557 */ { ACTION_NETWORK_PASSWD, 0  | 0  | 0  | 0  , RmtNetLogin      },/*  */
@


1.21
log
@Change NETWORK_INIT to NETWORK_SNAME
@
text
@a0 8
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.  This program may not be distributed without the    */
/* | .  | || permission of the authors:                            BBS:    */
/* | o  | ||   John Toebes     Doug Walker    Dave Baker                   */
/* |  . |//                                                                */
/* ======                                                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
d3 3
a5 3
**      $Author: J_Toebes $
**      $Revision: 1.20 $
**      $Date: 91/03/11 11:18:39 $
d7 3
d140 1
a140 1
   /* 5555 */ { ACTION_NETWORK_LOGIN,  0  | 0  | 0  | 0  , RmtNetInit       }, /* */
d142 1
a142 1
   /* 5557****{ ACTION_NETWORK_KLUDGE, 0  | 0  | 0  | 0  , RmtNetLogin      },*****/
@


1.20
log
@Add code to limit the number of active open file handles (really fix it)
@
text
@d10 1
a10 1
**      $Filename: main.c $ 
d12 2
a13 2
**      $Revision: 1.19 $
**      $Date: 91/03/11 11:16:55 $
d15 3
d20 1
a20 1
 * 
d23 1
a23 1
 * 
d26 1
a26 1
 * 
d29 1
a29 1
 * 
d32 1
a32 1
 * 
d35 1
a35 1
 * 
d38 1
a38 1
 * 
d41 1
a41 1
 * 
d44 1
a44 1
 * 
d47 1
a47 1
 * 
d50 1
a50 1
 * 
d55 1
a55 1
 * 
d145 2
a146 2
   /* 5555 */ { ACTION_NETWORK_INIT,   0  | 0  | 0  | 0  , RmtNetInit       }, /* */
   /* 5556 */ { ACTION_NETWORK_TERM,   0  | 0  | 0  | 0  , RmtNetStop       }, /* */
d261 1
a261 1
         
d291 1
a291 1
                     
d342 1
a342 1
      if (subr != NULL) 
d345 2
a346 2
      } 
      else 
d356 1
a356 1
         
@


1.19
log
@Add code to limit the number of active open file handles
@
text
@d12 2
a13 2
**      $Revision: 1.18 $
**      $Date: 91/01/15 01:49:41 $
d15 3
d232 1
@


1.18
log
@Added version information
@
text
@d12 2
a13 2
**      $Revision: 1.17 $
**      $Date: 91/01/11 00:00:29 $
d15 3
d197 1
a197 1

d225 6
@


1.17
log
@Added code to compress the FIB portion of the return on an ACT_EXAMINE/EXNEXT
@
text
@d12 2
a13 2
**      $Revision: 1.16 $
**      $Date: 90/12/30 15:38:40 $
d15 3
d199 1
a199 1
   global->configlock = Lock("devs:networks", SHARED_LOCK);
@


1.16
log
@Add support for Network Init and Network Login
@
text
@d12 2
a13 2
**      $Revision: 1.15 $
**      $Date: 90/12/29 13:09:36 $
d15 3
d150 2
a151 1
   /* 5572 */ { ACTION_RETLOCK,        0  | 0  | 0  | 0  , RmtRetLock       }  /* */
@


1.15
log
@Add memory Debugging code.
@
text
@d12 2
a13 2
**      $Revision: 1.14 $
**      $Date: 90/11/29 02:00:20 $
d15 3
d126 1
a126 1
   /* 2012****{ ACTION_NETWORK_HELLO,  BP1| 0  | 0  | 0  , NULL             },*****/
d130 1
a130 1
   /* 5555****{ ACTION_NETWORK_INIT,   0  | 0  | 0  | 0  , RmtNetLogin      },*****/
d132 1
a132 1
   /* 5557 */ { ACTION_NETWORK_KLUDGE, 0  | 0  | 0  | 0  , RmtNetLogin      }, /* */
@


1.14
log
@General cleanup to eliminate debugging, reduce size.
@
text
@d12 2
a13 2
**      $Revision: 1.13 $
**      $Date: 90/11/28 01:53:21 $
d15 3
d167 2
d181 1
d201 1
d351 2
@


1.13
log
@Added new actions, lock on config directory.
@
text
@d12 2
a13 2
**      $Revision: 1.12 $
**      $Date: 90/11/23 15:07:07 $
d15 3
d38 2
d41 2
d116 1
d118 1
d148 1
a148 1
void _main(char *p);
d150 1
a150 1
void _main(p)
d179 1
d181 1
d343 1
a343 3
fail:
   request(global, REQ_GENERAL, "Net server exiting");

d348 1
a350 1
#if DEBUG
a356 1
#endif
d359 4
@


1.12
log
@Added session support back in.
@
text
@d12 2
a13 2
**      $Revision: 1.11 $
**      $Date: 90/11/18 22:54:50 $
d15 3
d129 4
a132 1
   /* 5569 */ { ACTION_RETNAMEUNLOCK,  0  | 0  | 0  | 0  , RmtNameUnlock    }  /* */
d172 1
@


1.11
log
@Added RmtNameUnlock routine for namenode state machine.
@
text
@d12 2
a13 2
**      $Revision: 1.10 $
**      $Date: 90/11/17 21:50:50 $
d15 3
d247 1
@


1.10
log
@Corrected handling of SDN_ERR for accept calls
@
text
@d12 2
a13 2
**      $Revision: 1.9 $
**      $Date: 90/11/15 08:17:10 $
d15 3
d122 2
a123 1
   /* 5568 */ { ACTION_RETNAMELOCK,    0  | 0  | 0  | 0  , RmtNameLock      }  /* */
@


1.9
log
@Correct multiple bugs associated with new version.  Sessions still are not supported.
@
text
@d12 2
a13 2
**      $Revision: 1.8 $
**      $Date: 90/11/05 06:56:24 $
d15 3
a242 2
                     break;
                     
@


1.8
log
@Major rewrite to make server multi-threaded with support for multiple
devices.  At this point in time it is not debugged and the concept of
sessions is missing.
@
text
@d12 2
a13 2
**      $Revision: 1.4 $
**      $Date: 90/11/04 17:36:27 $
d15 5
d102 2
a103 2
   /* 5554 */ { ACTION_NETWORK_START,  0  | 0  | 0  | 0  , RmtNetLogin      }, /* */
   /* 5555****{ ACTION_NETWORK_INIT,   0  | 0  | 0  | 0  , RmtNetStart      },*****/
d152 1
d164 1
d177 7
a183 2
         sigmask = Wait(global->sigbits);
         
d188 11
a198 2
            rp = spkt->sp_RP;
            if (spkt != NULL) break;
d201 1
a201 1
         for(driver = global->drivers; driver != NULL; driver = driver->next)
d207 1
a207 1
               if (SDNAccept(driver->drglobal, &rp) == SDN_OK)
d209 18
a226 17
                  /* We got an incomming request.  Get us some memory to deal   */
                  /* with it.                                                   */
                  spkt = GetSPacket(global);
                  if (spkt == NULL)
                  {
                     /* OOps, not enough memory to even process the request     */
                     /* just respond to them with a 'sorry charlie'             */
                     /* We will have to worry about connect requests later      */
                     /* but if we fail on a connect request we really want to   */
                     /* force the request to be delayed and try it again when   */
                     /* we get some memory back                                 */
                     rp->Arg1 = DOSFALSE;
                     rp->Arg2 = ERROR_NO_FREE_STORE;
                     SDNReply(driver->drglobal, rp);
                  }
                  else
                  {
d237 7
a244 1
                  }
d247 4
d254 2
d296 14
a309 1
         SDNReply(spkt->sp_Driver->drglobal, rp);
@


1.7
log
@Turned off requesters for server
@
text
@d9 8
a19 4
/* Eventually, make this table work for me - flag significant args,     */
/* flag args that point into the data table.  This will take care of    */
/* everything but Examine, ExNext, Read and Write with no special funcs */

d30 1
d32 3
a34 1
typedef void (*ifuncp)(GLOBAL, struct DosPacket *);
d73 3
a75 3
   /* 1004 */ { ACTION_FIND_WRITE,     BP1| BP2| BP3| 0  , RmtFindwrite     }, /* */
   /* 1005 */ { ACTION_FIND_INPUT,     BP1| BP2| BP3| 0  , RmtFindwrite     }, /* */
   /* 1006 */ { ACTION_FIND_OUTPUT,    BP1| BP2| BP3| 0  , RmtFindwrite     }, /* */
d97 1
a97 1
   /* 5554 */ { ACTION_NETWORK_START,  0  | 0  | 0  | 0  , RmtNetKludge     }, /* */
d100 12
a111 1
   /* 5557 */ { ACTION_NETWORK_KLUDGE, 0  | 0  | 0  | 0  , RmtNetKludge     }  /* */
d118 1
a118 3
void _main(char *x);

char devname[50];
d120 2
a121 1
void _main(char * x)
d123 98
a220 65
    ifuncp             subr;
    int                action;
    struct global      global;
    int                low, high, this;

    SysBase = (*((struct Library **) 4));
    DOSBase = (struct DosLibrary *)OpenLibrary(DOSNAME,0);

    /* Initialize our global data structure */
    memset((char *)&global, 0, sizeof(struct global));

    global.n.self   = (struct Process *) FindTask(0L);  /* find myself        */
    global.n.self->pr_WindowPtr = -1;
    global.n.run    = 2;
    global.n.port   = &(global.n.self->pr_MsgPort);

    /* install our taskid ...   */

    global.fib = (char *)DosAllocMem(&global, 2*sizeof(struct FileInfoBlock));
    if (!global.fib)
        global.n.run = 0;

    while(*x && (*x<'0' || *x >'9') ) x++;
    global.n.fssm.fssm_Unit = 0;
    stcd_l(x, &global.n.fssm.fssm_Unit);

    while(*x && *x == ' ');
    for(action=0; *x && *x != ' ' && *x != '\n'; x++)
    {
      devname[action++] = *x;
    }
    if(action)
    {
       devname[action] = '\0';
    }

    /* Initialize the intuitext structures for the requesters we might have   */
    /* to display                                                             */
    /* Because we have no scruples we can cheat and do this with a couple of  */
    /* long word assignments.  We leave the acual C code commented out here   */
    /* so that if this structure ever changed we will still be able to work   */
#if 0
    global.n.line1.FrontPen = global.n.line1.BackPen = -1;
    global.n.line1.DrawMode = JAM1;
    global.n.line1.LeftEdge = global.n.line1.TopEdge = 4;
    global.n.line2 = global.n.line1;
    global.n.line3 = global.n.line1;
    global.n.retrytxt = global.n.line1;
    global.n.canceltxt = global.n.line1;
#else
    *(long *)&global.n.line1.FrontPen     = 0x00010000L | (JAM1<<8);
    *(long *)&global.n.line1.LeftEdge     = 0x00040004L;  /* 4,4  */
    *(long *)&global.n.line2.FrontPen     = 0x00010000L | (JAM1<<8);
    *(long *)&global.n.line2.LeftEdge     = 0x0004000EL;  /* 4,14 */
    *(long *)&global.n.line3.FrontPen     = 0x00010000L | (JAM1<<8);
    *(long *)&global.n.line3.LeftEdge     = 0x00040018L;  /* 4,24 */
    *(long *)&global.n.retrytxt.FrontPen  = 0x00010000L | (JAM1<<8);
    *(long *)&global.n.retrytxt.LeftEdge  = 0x00040004L;
    *(long *)&global.n.canceltxt.FrontPen = 0x00010000L | (JAM1<<8);
    *(long *)&global.n.canceltxt.LeftEdge = 0x00040004L;
#endif
    global.n.retrytxt.IText = "Retry";
    global.n.canceltxt.IText = "Cancel";

    /* Should get startup info from external config file */
d222 4
a225 17
#if PARANOID
   BUGP("Calling initdebug");
   initdebug(NULL);
#elif DEBUG
   maybedebug();
#endif

    BUG(("Opening for business on unit %d\n", global.n.fssm.fssm_Unit))

    if (InitDevice(&global)) {
        BUG(("****** ERROR INITIALIZING\n"));
#if DEBUG
        /* Can't use BUGR - need &global, not global */
        request(&global, REQ_GENERAL, "Can't init");
#endif
        goto fail;
    }
d227 1
a227 4
   while(global.n.run) 
   {  
      /* start of the real work */
      global.ses = AcceptRPacket(&global, &global.RP);
d229 1
a229 4
      BUG(("Execute: action #%ld Session: %08lx arg1 %lx\n",
            global.RP.Type,global.ses,global.RP.Arg1));

      action = global.pkt->dp_Type = global.RP.Type;
d247 1
d250 1
a250 2
         global.n.reply = 1;
         (*subr)(&global, global.pkt);
d254 3
a256 3
         global.RP.Arg1 = DOS_FALSE;
         global.RP.Arg2 = ERROR_ACTION_NOT_KNOWN;
         BUG(("Unknown packet type %ld\n",global.RP.Type));
d259 1
a259 2
      /* Now return the packet to them */
      if(global.n.reply)
d261 3
a263 1
         ReplyRPacket(&global, global.ses, &global.RP);
d265 1
a265 1
      
d270 1
a270 3
   request(&global, REQ_GENERAL, "Net server exiting");

   TermDevice(&global);
a271 2
   ClearPacketBuffer(&global.RP);

d274 1
a274 4

#define DEBUG_SPECIAL 0x40000000   /* Mask for handler-defined dbg type*/
#define DEBUG_SERVER  0x20000000   /* Mask indicating server command   */
#define DEBUG_SERVWT  0x10000000   /* Wait for debugger to catch us    */
d276 1
a276 4
void
RmtSetDebug(global, pkt)
GLOBAL global;
struct DosPacket *pkt;
d279 2
a280 4
    BUG(("RmtSetDebug: Entry, arg1 %lx\n", global->RP.Arg1))
    if (global->RP.Arg1 == DEBUG_SERVWT)
        cprwait(global);
    else if(global->RP.Arg1)
d286 1
a286 1
    pkt->dp_Res1 = DOS_TRUE;
@


1.6
log
@Minor cleanup.
@
text
@d118 1
@


1.5
log
@Change interface for packet waiting/response
@
text
@a11 3
/* Define this >0 to open a debug window BEFORE initialization */
#define DBINIT 0

d100 1
a100 1
void __asm server(register __a0 char *x);
d104 1
a104 2
void __asm
server(register __a0 char * x)  /* was _main, bmd */
@


1.4
log
@Correct table search, add NETWORK_INIT
@
text
@d11 1
a11 1
#define PARANOID 1
d63 4
a66 2
   /*   52 */ { ACTION_READ,           0  | 0  | 0  | 0  , RmtRead          }, /* */
   /*   57 */ { ACTION_WRITE,          0  | 0  | 0  | 0  , RmtWrite         }, /* */
d94 1
a94 1
   /* 5555 */ { ACTION_NETWORK_INIT,   0  | 0  | 0  | 0  , RmtNetStart      }, /* */
d100 1
d103 1
a103 1
void __asm main(register __a0 char *x);
d108 1
a108 1
main(register __a0 char * x)  /* was _main, bmd */
d115 1
d196 4
a199 7
      if(GetRPacket((NGLOBAL)&global, global.n.devptr, &global.RP)) 
      {
         if(!global.n.run || ReSync(&global, global.n.devptr))
            break;
         continue;
      }
      BUG(("Execute: action #%ld arg1 %lx\n",global.RP.Type,global.RP.Arg1));
d232 1
a232 3
      if(global.n.reply &&
         PutRPacket((NGLOBAL)&global, global.n.devptr, &global.RP) &&
         ReSync(&global, global.n.devptr))
d234 1
a234 1
         break;
@


1.3
log
@Added code for RmtNetStop, eliminated unnecessary startup code
@
text
@d91 4
a94 3
   /* 5554 */ { ACTION_NETWORK_START,  0  | 0  | 0  | 0  , RmtNetStart      }, /* */
   /* 5555 */ { ACTION_NETWORK_STOP,   0  | 0  | 0  | 0  , RmtNetStop       }, /* */
   /* 5556 */ { ACTION_NETWORK_KLUDGE, 0  | 0  | 0  | 0  , RmtNetKludge     }  /* */
d204 1
a204 1
      while (low < high)
@


1.2
log
@Change dispatcher to use table lookup for actions
@
text
@d11 1
a11 1

d91 3
a93 2
   /*~2MEG */ { ACTION_NETWORK_START,  0  | 0  | 0  | 0  , RmtNetStart      }, /* */
   /*~4MEG */ { ACTION_NETWORK_KLUDGE, 0  | 0  | 0  | 0  , RmtNetKludge     }  /* */
a187 23
    action = 0;
    while(action != ACTION_NETWORK_START)
    {
        if(GetRPacket((NGLOBAL)&global, global.n.devptr, &global.RP))
        {
            BUG(("Error: Can't get initial packet\n"));
            request(&global, REQ_GENERAL, "Net server error");
            global.n.run = 0;
        }
        if((action=global.RP.Type) != ACTION_NETWORK_START)
        {
            BUG(("******First RP type not NETWORK_START!!\n"));
            global.RP.Type = ACTION_NETWORK_START;
        }
        else
        {
            BUG(("Got NETWORK_START\n"));
            global.RP.Arg1 = DOS_TRUE;
        }
        subr = RmtNetStart;
        goto dopacket;
    }

a216 1
dopacket:      
@


1.1
log
@Initial revision
@
text
@d28 1
d33 2
a35 1
    int     flags;
d38 57
a94 57
#define LO_FIRST 0
#define LO_LAST  34
struct LookupTable lowork[LO_LAST+1] = {
   { NULL,              0  | 0  | 0  | 0   }, /*  0 - ACTION_NIL            */
   { NULL,              0  | 0  | 0  | 0   }, /*  1 - Unknown               */
   { NULL,              BP1| BP2| BP3| 0   }, /*  2 - ACTION_GET_BLOCK      */
   { NULL,              0  | BP2| BP3| 0   }, /*  3 - Unknown               */
   { NULL,              BP1| BP2| BP3| 0   }, /*  4 - ACTION_SET_MAP        */
   { RmtDie,            0  | 0  | 0  | 0   }, /*  5 - ACTION_DIE            */
   { NULL,              0  | 0  | 0  | 0   }, /*  6 - ACTION_EVENT          */
   { NULL,              BP1| 0  | 0  | 0   }, /*  7 - ACTION_CURRENT_VOLUME */
   { RmtLock,           BP1| BP2| 0  | 0   }, /*  8 - ACTION_LOCATE_OBJECT  */
   { NULL,              BP1| BP2| 0  | 0   }, /*  9 - ACTION_RENAME_DISK    */
   { NULL,              0  | 0  | 0  | 0   }, /* 10 - Unknown               */
   { NULL,              0  | 0  | 0  | 0   }, /* 11 - Unknown               */
   { NULL,              0  | 0  | 0  | 0   }, /* 12 - Unknown               */
   { NULL,              0  | 0  | 0  | 0   }, /* 13 - Unknown               */
   { NULL,              0  | 0  | 0  | 0   }, /* 14 - Unknown               */
   { RmtUnLock,         BP1| 0  | 0  | 0   }, /* 15 - ACTION_FREE_LOCK      */
   { RmtDelete,         BP1| BP2| 0  | 0   }, /* 16 - ACTION_DELETE_OBJECT  */
   { RmtRename,         BP1| BP2| BP3| BP4 }, /* 17 - ACTION_RENAME_OBJECT  */
   { NULL,              0  | 0  | 0  | 0   }, /* 18 - ACTION_MORE_CACHE     */
   { RmtDupLock,        BP1| 0  | 0  | 0   }, /* 19 - ACTION_COPY_DIR       */
   { NULL,              0  | 0  | 0  | 0   }, /* 20 - ACTION_WAIT_CHAR      */
   { RmtSetProtection,  0  | BP2| BP3| 0   }, /* 21 - ACTION_SET_PROTECT    */
   { RmtCreateDir,      BP1| BP2| 0  | 0   }, /* 22 - ACTION_CREATE_DIR     */
   { RmtExamine,        BP1| BP2| 0  | 0   }, /* 23 - ACTION_EXAMINE_OBJECT */
   { RmtExNext,         BP1| BP2| 0  | 0   }, /* 24 - ACTION_EXAMINE_NEXT   */
   { NULL,              BP1| 0  | 0  | 0   }, /* 25 - ACTION_DISK_INFO      */
   { RmtInfo,           BP1| BP2| 0  | 0   }, /* 26 - ACTION_INFO           */
   { NULL,              0  | 0  | 0  | 0   }, /* 27 - ACTION_FLUSH          */
   { RmtSetComment,     0  | BP2| BP3| BP4 }, /* 28 - ACTION_SET_COMMENT    */
   { RmtParent,         BP1| 0  | 0  | 0   }, /* 29 - ACTION_PARENT         */
   { NULL,              BP1| 0  | 0  | 0   }, /* 30 - ACTION_TIMER          */
   { NULL,              0  | 0  | 0  | 0   }, /* 31 - ACTION_INHIBIT        */
   { NULL,              BP1| 0  | 0  | 0   }, /* 32 - ACTION_DISK_TYPE      */
   { NULL,              0  | 0  | 0  | 0   }, /* 33 - ACTION_DISK_CHANGE    */
   { RmtSetFileDate,    0  | 0  | 0  | 0   }  /* 34 - ACTION_SET_FILE_DATE  */
      };

#define HI_FIRST 1004
#define HI_LAST  1008
struct LookupTable hiwork[5] = {
   { RmtFindwrite,      BP1| BP2| BP3| 0   }, /* ACTION_FIND_WRITE  - 1004 */
   { RmtFindwrite,      BP1| BP2| BP3| 0   }, /* ACTION_FIND_INPUT  - 1005 */
   { RmtFindwrite,      BP1| BP2| BP3| 0   }, /* ACTION_FIND_OUTPUT - 1006 */
   { RmtEnd,            0  | 0  | 0  | 0   }, /* ACTION_END         - 1007 */
   { RmtSeek,           0  | 0  | 0  | 0   }  /* ACTION_SEEK        - 1008 */
   };

#define USER_FIRST 2010
#define USER_LAST  2012
struct LookupTable userwork[3] = {
   { RmtSetDebug,       0  | 0  | 0  | 0   }, /* ACTION_HANDLER_DEBUG 2010 */
   { NULL,              BP1| 0  | 0  | 0   }, /* ACTION_SET_TRANS_TYPE2011 */
   { NULL,              BP1| 0  | 0  | 0   }, /* ACTION_NETWORK_HELLO 2012 */
   };
d108 1
d221 5
a225 1
      switch(action = global.pkt->dp_Type = global.RP.Type) 
d227 4
a230 2
         case ACTION_NETWORK_KLUDGE:
            subr = RmtNetKludge;
d232 5
a236 36
         case ACTION_READ:
            subr = RmtRead;
            break;
         case ACTION_WRITE:
            subr = RmtWrite;
            break;
         case ACTION_SET_RAW_MODE:
            subr = NULL;
            break;
         case ACTION_FIND_WRITE:  /* 1004 */
         case ACTION_FIND_INPUT:  /* 1005 */
         case ACTION_FIND_OUTPUT: /* 1006 */
         case ACTION_END:         /* 1007 */
         case ACTION_SEEK:        /* 1008 */
            subr = hiwork[action-HI_FIRST].subr;
            break;

         case ACTION_HANDLER_DEBUG:  /* 2010 */
         case ACTION_SET_TRANS_TYPE: /* 2011 */
         case ACTION_NETWORK_HELLO:  /* 2012 */
            subr = userwork[action-USER_FIRST].subr;
            break;

         case ACTION_NETWORK_START:
            subr = RmtNetStart;
            break;

         default:
            if ((action >= LO_FIRST) && (action <= LO_LAST)) 
            {
               subr = lowork[action-LO_FIRST].subr;
            } 
            else 
            {
              subr = NULL;
            }
a293 2


@
