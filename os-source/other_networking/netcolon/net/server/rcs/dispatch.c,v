head     1.6;
branch   ;
access   ;
symbols  r37-12:1.6 v37r8:1.6 Distillery:1.6;
locks    ; strict;
comment  @ * @;


1.6
date     90.11.15.08.17.36;  author J_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.05.06.56.07;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.04.17.36.27;  author J_Toebes;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.16.00.55.29;  author John_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.09.03.03.04;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.00.01;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@message dispatcher
@


1.6
log
@Correct multiple bugs associated with new version.  Sessions still are not supported.
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1988 The Software Distillery.  All Rights Reserved *
* |. o.| ||	     Written by Doug Walker				    *
* | .  | ||	     The Software Distillery				    *
* | o  | ||	     235 Trillingham Lane				    *
* |  . |//	     Cary, NC 27513					    *
* ======	     BBS:(919)-471-6436                                     *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
**      $Filename: dispatch.c $ 
**      $Author: J_Toebes $
**      $Revision: 1.5 $
**      $Date: 90/11/05 06:56:07 $
**      $Log:	dispatch.c,v $
 * Revision 1.5  90/11/05  06:56:07  J_Toebes
 * Major rewrite to make server multi-threaded with support for multiple
 * devices.  At this point in time it is not debugged and the concept of
 * sessions is missing.
 * 
 * Revision 1.4  90/11/04  17:36:27  J_Toebes
 * First major rewrite for asynchronous server
 * 
**
**/

#include "server.h"

void
Dispatch(global, spkt, nextaction, port)
GLOBAL global;
SPACKET *spkt;
int nextaction;
struct MsgPort *port;
{
   BUG(("Dispatch: Entry - spkt = 0x%08lx port 0x%08lx\n", spkt, port))

   /* This must be done each time because it is ping-ponged by the send packet  */
   /* mechanism.                                                                */
   spkt->sp_Pkt.dp_Port = global->n.port;

   if (port == NULL)
   {
      BUG(("********Dispatch: Invalid Device!\n"))
      BUGR("Invalid Device!");
      spkt->sp_RP->Arg1 = DOSFALSE;
      spkt->sp_RP->Arg2 = ERROR_OBJECT_NOT_FOUND;
   }
   else
   {
      spkt->sp_Action = nextaction;
      global->n.reply = 0;

      PutMsg(port, (struct Message *)spkt);
   }

   if (global->dosport != NULL)
   {
      /* If we did a OpenDeviceProc to get here, we need to free it */
      global->dosport = NULL;
   }
}

ACTFN(RmtReturn)
{
   spkt->sp_RP->Arg1 = spkt->sp_Pkt.dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt.dp_Res2;
}
@


1.5
log
@Major rewrite to make server multi-threaded with support for multiple
devices.  At this point in time it is not debugged and the concept of
sessions is missing.
@
text
@d12 2
a13 2
**      $Revision: 1.4 $
**      $Date: 90/11/04 17:36:27 $
d15 5
a53 2

      GetMsg(global->n.port);
@


1.4
log
@First major rewrite for asynchronous server
@
text
@d10 8
a17 5
**      $Filename: $ 
**      $Author: $
**      $Revision: $
**      $Date: $
**      $Log:  dispatch.c,v $
d46 1
a46 1
      global->reply = 0;
d56 1
a56 1
      global->portlock = NULL;
d62 2
a63 2
   spkt->sp_RP->Arg1 = spkt->sp_Pkt->dp_Res1;
   spkt->sp_RP->Arg2 = spkt->sp_Pkt->dp_Res2;
@


1.3
log
@Added support for a global port.
@
text
@a0 1

d9 8
d21 1
a21 1
Dispatch(global, port)
d23 2
d27 1
a27 2
   BUG(("Dispatch: Entry, device 0x%08lx, port 0x%08lx\n", 
      global->dosport, port))
d29 3
a31 2
   /* This must be done each time - do not try to move it to InitDevice */
   global->stdpkt->sp_Pkt.dp_Port = global->n.port;
d37 2
a38 2
      global->RP.Arg1 = NULL;
      global->RP.Arg2 = ERROR_OBJECT_NOT_FOUND;
d42 2
a43 2

      PutMsg(port, (struct Message *)global->stdpkt);
d45 1
a45 1
      WaitPort(global->n.port);
d48 1
a48 3

      BUG(("Dispatch: local RC = %lx, %lx\n", 
         global->pkt->dp_Res1, global->pkt->dp_Res2));
a49 4
      global->RP.Arg1 = global->pkt->dp_Res1;
      global->RP.Arg2 = global->pkt->dp_Res2;
   }
   
d57 5
a61 1

@


1.2
log
@Change Dispatch interface to take the port as a parameter
@
text
@d18 2
a19 1
   BUG(("Dispatch: Entry, device %lx\n", global->dosport))
d27 1
d50 1
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
Dispatch(global)
d16 1
d18 1
a18 1
    BUG(("Dispatch: Entry, device %lx\n", global->RP.RDevice))
d20 2
a21 2
    /* This must be done each time - do not try to move it to InitDevice */
    global->stdpkt->sp_Pkt.dp_Port = global->n.port;
d23 1
a23 1
   if (global->RP.RDevice == NULL || global->RP.RDevice == (RNPTR)1)
d25 1
a25 1
      BUG(("********Dispatch: Invalid RDevice!\n"))
d32 1
a32 2
      PutMsg((struct MsgPort *)global->RP.RDevice, 
                 (struct Message *)global->stdpkt);
d43 5
@
