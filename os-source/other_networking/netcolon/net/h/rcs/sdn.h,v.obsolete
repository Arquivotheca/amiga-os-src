head     1.11;
branch   ;
access   ;
symbols  Distillery:1.11;
locks    dlarson:1.11; strict;
comment  @ * @;


1.11
date     91.01.10.22.12.35;  author J_Toebes;  state Exp;
branches ;
next     1.10;

1.10
date     91.01.10.22.00.45;  author J_Toebes;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.19.02.05.32;  author Doug;  state Exp;
branches ;
next     1.8;

1.8
date     90.11.18.22.07.07;  author J_Toebes;  state Exp;
branches ;
next     1.7;

1.7
date     90.11.17.21.03.21;  author J_Toebes;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.17.19.24.55;  author J_Toebes;  state Exp;
branches ;
next     1.5;

1.5
date     90.11.16.21.28.17;  author J_Toebes;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.02.00.51.25;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.02.00.43.38;  author Doug;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.02.00.18.33;  author Doug;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.02.00.04.51;  author Doug;  state Exp;
branches ;
next     ;


desc
@SDN interface spec
@


1.11
log
@Correct RPBase definition.
@
text
@/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
* |_o_o|\\ Copyright (c) 1990 The Software Distillery.                    *
* |. o.| ||          All Rights Reserved                                  *
* | .  | ||          Written by John Toebes and Doug Walker               *
* | o  | ||          The Software Distillery                              *
* |  . |//           207 Livingstone Drive                                *
* ======             Cary, NC 27513                                       *
*                    BBS:(919)-460-7430                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
#ifndef D_SDN_H
#define D_SDN_H

/*
**      $Filename: sdn.h $ 
**      $Author: J_Toebes $
**      $Revision: 1.10 $
**      $Date: 91/01/10 22:00:45 $
**      $Log:	sdn.h,v $
 * Revision 1.10  91/01/10  22:00:45  J_Toebes
 * Reshuffle rpacket order to allow quick buffer to reside
 * at the end.  Add SDN_FAIL, SDN_KNOWN codes, added macro to access
 * RPacket data base.
 * 
**
**/


struct RPacket       /* Packet sent to remote node */
{
   char  *DataP;        /* always contains at least MINBUFSIZE bytes    */
   char  *AllocP;       /* always contains at least MINBUFSIZE bytes    */
   short Type;          /* Type of request (AmigaDos packet type)       */
   short DLen;          /* Length of data in Data buffer                */
   void  *handle;       /* Generic handle for association               */
   LONG  Arg1,          /* Equivalent to dp_Arg? in normal devices      */
         Arg2,          /* when transmitting, dp_Res? when receiving    */
         Arg3,
         Arg4;
};

#define RPBASE(rp)    ((char *)&((rp)->Type))
#define RPSIZEN       (sizeof(struct RPacket)-8)

#define SDN_OK   0   /* Successful completion                   */
#define SDN_ERR  1   /* Some error, operation not done          */
#define SDN_NONE 2   /* No packets pending                      */
#define SDN_PEND 3   /* Packet was sent but is now pending      */
#define SDN_FAIL 4   /* Pended packet failed                    */
#define SDN_DOWN 5   /* Node is known but not currently up      */

/* Prototypes for functions defined in sdninet.c */
int SDNSerInit          (APTR *drgp,
                         ULONG *maskp,
                         char *data
                        );
int SDNSerTerm          (APTR drglobal);
int SDNHanInit          (APTR *drgp,
                         ULONG *maskp,
                         char *data
                        );
int SDNHanTerm          (APTR drglobal);
int SDNInitNode         (APTR drglobal,
                         char *name,
                         APTR *con
                        );
void SDNTermNode        (APTR drglobal,
                         APTR con
                        );
int SDNAccept           (APTR drglobal,
                         struct RPacket **rp
                        );
int SDNReply            (APTR drglobal,
                         struct RPacket *rp
                        );
int SDNSend             (APTR drglobal,
                         struct RPacket *rp
                        );
int SDNReceive          (APTR drglobal,
                         ULONG mask,
                         struct RPacket **rp
                        );

struct RPacket *
    SDNAllocRPacket     (APTR drglobal,
                         APTR con,
                         int len
                        );

struct RPacket *
    SDNDupRPacket       (APTR drglobal,
                         struct RPacket *rp
                        );

void SDNFreeRPacket     (APTR drglobal,
                         struct RPacket *rp
                        );

void *SDNGetConData     (APTR drglobal,
                         struct RPacket *rp
                        );

void SDNSetConData      (APTR drglobal,
                         struct RPacket *rp,
                         void *data
                        );
#include "sdn_pragmas.h"
#endif /* D_SDN_H */
@


1.10
log
@Reshuffle rpacket order to allow quick buffer to reside
at the end.  Add SDN_FAIL, SDN_KNOWN codes, added macro to access
RPacket data base.
@
text
@d16 2
a17 2
**      $Revision: 1.16 $
**      $Date: 90/12/30 15:38:40 $
d19 5
d41 1
a41 1
#define RPBASE(rp)    ((char *)&rp->Type)
d44 6
a49 6
#define SDN_OK    0   /* Successful completion                   */
#define SDN_ERR   1   /* Some error, operation not done          */
#define SDN_NONE  2   /* No packets pending                      */
#define SDN_PEND  3   /* Packet was sent but is now pending      */
#define SDN_FAIL  4   /* Pended packet failed                    */
#define SDN_KNOWN 5   /* Node is known but not currently up      */
@


1.9
log
@change proto for SDNInitNode
@
text
@d13 10
d25 2
d29 1
a33 4
   long  signature;     /* Should be NET:                               */
   void  *handle;       /* Generic handle for association               */
   char  *DataP;        /* always contains at least MINBUFSIZE bytes    */
   char  *AllocP;       /* always contains at least MINBUFSIZE bytes    */
d36 2
a37 2
#define RPSIZEN (sizeof(struct RPacket) - 8)
#define SIGVALUE  0x4E45543A
d39 6
a44 5
/* These are driver specific value */
#define SDN_OK   0
#define SDN_ERR  1
#define SDN_NONE 2
#define SDN_PEND 3
@


1.8
log
@Added GetConData, SetConData routines
@
text
@d48 2
a49 1
                         APTR con
@


1.7
log
@Updated packet length, added SDN_PEND
@
text
@d78 1
a78 1
void SDNFreeRPacket      (APTR drglobal,
d82 8
@


1.6
log
@Added memory tracking field.
@
text
@d27 1
a27 1
#define RPSIZEN (sizeof(struct RPacket) - 12)
d31 2
a32 2
#define SDN_OK 0
#define SDN_ERR 1
d34 1
@


1.5
log
@Changed packet size, added sdn_pragmas.h
@
text
@d24 1
d27 1
a27 1
#define RPSIZEN (sizeof(struct RPacket) - 8)
d68 2
a69 1
                         APTR con
@


1.4
log
@SDNSend takes RP * not RP **
@
text
@d26 1
a26 1
#define RPSIZEN (sizeof(struct RPacket) - 4)
d79 1
@


1.3
log
@Get rid of references to struct NetNode
@
text
@d58 1
a58 1
                         struct RPacket **rp
@


1.2
log
@remove spurious ,
@
text
@d46 1
a46 1
                         struct NetNode *nnode
d49 1
a49 1
                         struct NetNode *nnode
a57 1
                         struct NetNode *nnode,
d66 2
a67 1
    SDNAllocRPacket     (APTR drglobal
@


1.1
log
@Initial revision
@
text
@d67 1
a67 1
    SDNAllocRPacket     (APTR drglobal,
@
