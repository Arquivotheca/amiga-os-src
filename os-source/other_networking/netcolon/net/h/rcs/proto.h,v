head     1.10;
branch   ;
access   ;
symbols  clean:1.10 Distillery:1.7;
locks    ; strict;
comment  @ * @;


1.10
date     91.06.03.16.25.12;  author dlarson;  state Stab;
branches ;
next     1.9;

1.9
date     91.05.10.10.12.08;  author dlarson;  state Exp;
branches ;
next     1.8;

1.8
date     91.05.10.08.39.16;  author dlarson;  state Exp;
branches ;
next     1.7;

1.7
date     91.01.06.20.55.02;  author Doug;  state Exp;
branches ;
next     1.6;

1.6
date     90.12.13.01.58.44;  author Doug;  state Exp;
branches ;
next     1.5;

1.5
date     90.12.01.21.39.15;  author Doug;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.18.00.05.08;  author Doug;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.02.00.23.48;  author J_Toebes;  state Exp;
branches ;
next     1.2;

1.2
date     90.10.08.20.19.40;  author J_Toebes;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.45.31;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@General handler prototypes
@


1.10
log
@Headers cleaned up and bolt.h created for all and only all stuff common to handler
server and drivers.
@
text
@/* proto.h -- includes net.lib prototypes and debugging macros */

#if PARANOID
extern int paranoid;
#define BUGP(x) if(paranoid) paranoid=request((GLOBAL)global, REQ_GENERAL, x);
#else
#define BUGP(x)
#endif

/*
**  More than you ever wanted to know about debugging macros:
**
**  BUG macros are called with double parens (i.e. "BUG(("string", args));")
**  so that the preprocessor doesn't barf.
**
**  a BUGxxx is a normal bug message - print it if DEBUG > 2 otherwise don't
**
**  BUGTERM means stop printing debugging messages now
**
**  a BUGP string is paranoid - we only print it when we have no clue what is
**  going on
**
**  an OBUG string is obsolete - one which we don't want printed anymore but
**  which serves as a comment and which we may want printed again if we have
**  more problems
*/
#define OBUG(x)
#define OBUGBSTR(x,y)

#if DEBUG
int __stdargs KGetChar U_ARGS((void));
void __stdargs KPutStr U_ARGS((char *));
void __stdargs kprintf U_ARGS((char *, ... ));
#define DBSERIAL ((BPTR)1)

/* Debugging routines */
void myputbstr	U_ARGS((char *, ...));
void myputlstr	U_ARGS((char *, ...));
void myprintf	U_ARGS((char *, ...));
void xwrite	U_ARGS((char *, int));
void xgetcr	U_ARGS((void));
int sprintf	U_ARGS((char *, char *, ...));
void mydump	U_ARGS((char *, int));
BPTR initdebug	U_ARGS((BPTR));
void termdebug	U_ARGS((void));
void maybedebug U_ARGS((void));

#define BUG(a) myprintf a;
#define BUGBSTR(a,b) myputbstr(a,b);
#define BUGLSTR(a,b,c) myputlstr(a,b,c);
#define BUGGETC xgetcr();
#define BUGTERM() termdebug();
#define BUGR(x) request((GLOBAL)global, REQ_GENERAL, x);

#if DEBUG >1
#define BUGDUMP(p,l) mydump(p,l);
#else
#define BUGDUMP(p,l)
#endif

#else

#define BUG(a)
#define BUGBSTR(a,b)
#define BUGLSTR(a,b,c)
#define BUGDUMP(p,l)
#define BUGGETC
#define BUGTERM()
#define BUGR(x)
#endif

extern struct DosLibrary *DOSBase;
#define alloc(a,b) DosAllocMem(a,b)
#define free(p) DosFreeMem(p)

/* membuf.c */
void ResetPacketBuffer U_ARGS((struct RPacket *));
void SetPacketBuffer U_ARGS((struct RPacket *, long));
void ClearPacketBuffer U_ARGS((struct RPacket *));

/* io#?.c */
int PutRPacket	U_ARGS((NGLOBAL, APTR, struct RPacket *));
int GetRPacket	 U_ARGS((NGLOBAL, APTR, struct RPacket *));

/* Subs.c */
struct HandlerPacket *taskwait     U_ARGS((GLOBAL));
void retpkt	  U_ARGS((GLOBAL, struct HandlerPacket *));
char *DosAllocMem U_ARGS((GLOBAL, long));
void DosFreeMem   U_ARGS((char *));
long sendpkt U_ARGS((struct MsgPort *, long, long*, long));
LONG checksum U_ARGS((char *, int));
void CheckRP U_ARGS((struct RPacket *));

/* pause.c */
int Pause U_ARGS((ULONG));

/* net#?.c */
int ReSync	   U_ARGS((GLOBAL, APTR *, char *));

/* timer.c */
int OpenTimer U_ARGS((GLOBAL, struct MsgPort *));
void CloseTimer U_ARGS((GLOBAL));
void PostTimerReq U_ARGS((GLOBAL, int));

/* request.c */
void initreq         U_ARGS((GLOBAL));
int  request	     U_ARGS((GLOBAL, int, char *));
#define REQ_MUST    0
#define REQ_ERROR   1
#define REQ_GENERAL 2

@


1.9
log
@updated comments
@
text
@a2 10
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987, 1988 The Software Distillery.  All Rights  */
/* |. o.| || Reserved.	This program may not be distributed without the    */
/* | .	| || permission of the authors: 			   BBS:    */
/* | o	| ||   John Toebes     Doug Walker    Dave Baker		   */
/* |  . |//								   */
/* ======								   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


@


1.8
log
@Updated comments, etc.
@
text
@d1 1
a1 1
/* proto.h -- net.lib protos and debug macros  */
a12 21
/*
**  More than you ever wanted to know about debuging macros
**
**  They are used with double parens so as to allow multiple arguments the
**  preprocessor doesn't care about (i.e. "BUG(("test %s", string));")
**
**  BUGxxx is a normal debugging thing executed whenever DEBUG>1 and BUGTERM
**  not yet executed.
**
**  BUGTERM stops the output of debugging messages for the rest of the run.
**
**  OBUGxxx is an obsolete debugging thing.  It serves as a comment, but if
**  you want to make it current again, just delete the leading 'O'.
**
**  BUGP is a paranoid debugging thing.  These debugging messages are too
**  detailed for most problems, but turn them on with by defining PARANOID
**  if you have no clue about what is going on.
**
**  BUGDUMP dumps bytes of memory.  Use DEBUG > 2 to get it.
*/

d20 17
d65 1
a65 1
#if DEBUG > 2
@


1.7
log
@Allow for serial debugging
@
text
@d1 2
d12 22
d69 1
a69 1
#if DEBUG >1
@


1.6
log
@remove cprwait macro def
@
text
@d17 3
d21 5
@


1.5
log
@Remove reference to CPR
@
text
@a9 2
void cprwait	U_ARGS((GLOBAL));

@


1.4
log
@various changes for asynchronous rewrite

@
text
@d19 1
a19 1
#if CPR
a31 1
#if DEBUG
a42 11
#endif

#else

#define BUG(a)
#define BUGBSTR(a,b)
#define BUGLSTR(a,b,c)
#define BUGDUMP(p,l)
#define BUGGETC
#define BUGTERM()
#define BUGR(x)
@


1.3
log
@Add prototype for initreq.
@
text
@d82 2
a83 2
struct DosPacket *taskwait     U_ARGS((GLOBAL));
void retpkt	  U_ARGS((GLOBAL, struct DosPacket *));
@


1.2
log
@Change calling conventions for ReSync
@
text
@d102 1
@


1.1
log
@Initial revision
@
text
@d94 1
a94 1
int ReSync	   U_ARGS((GLOBAL, APTR));
@
