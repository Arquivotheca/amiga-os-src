TABLE OF CONTENTS

NET-UDP.library/SDNAllocRPacket
NET-UDP.library/SDNHanInit
NET-UDP.library/SDNHanTerm
NET-UDP.library/SDNInitNode
NET-UDP.library/SDNReceive
NET-UDP.library/SDNReply
NET-UDP.library/SDNSerInit
NET-UDP.library/SDNSerTerm
NET-UDP.library/SDNTermNode
NET-UDP.library/SDNAllocRPacket           NET-UDP.library/SDNAllocRPacket

   NAME
	SDNAllocRPacket -- Allocate an RPacket for general use.

   SYNOPSIS
	RP = SDNAllocRPacket(drglobal, con, len)
	D0		     A0	       A1   D0

	struct RPacket *SDNAllocRPacket(APTR, APTR, int);

   FUNCTION
	Allocate an RPacket for general use.

   INPUTS
	drglobal	- Driver-specific global data pointer.
	con		- Connection to allocate packet for.
	len		- Minimum number of bytes that must be in the DataP
			  field.

   RESULT
	 RP		- created RPacket (or NULL for error).

   NOTES
	This routine is called only by the handler.

	For ease of implementation, it is convenient to call this routine
	internally with a NULL con pointer when generating packets.

   BUGS

   SEE ALSO
	SDNFreeRPacket(), SDNDupRPacket(), SDNInitNode()

NET-UDP.library/SDNHanInit                     NET-UDP.library/SDNHanInit

   NAME
	SDNHanInit --  Perform handler specific initialization.

   SYNOPSIS
	rc = SDNHanInit(drglobal, mask, data)
	D0		A0	  A1	A2

	int SDNHanInit(APTR *, ULONG *, char *);

   FUNCTION
	Perform handler specific initialization.

	The mask value is the communications mechanism for indicating which
	bits are to be used by the handler.  On input it is a mask of bits
	available for use if the library is unable to allocate any bits.  On
	output it is a mask of the bits that the library will set whenever it
	needs to service a message.  Once the bit is set, the handler will
	call SDNReceive() until SDN_NONE is returned.

	The data string is a simple null terminated C style string that is
	for use by the library.  There is no format specified in the string
	and may contain whatever the library wants it to have.  The handler
	code just reads the string from a configuration file and passes it
	on to the library.  This pointer may be NULL if no initialization
	string has been specified.  In the absence of any configuration
	information, it is the responsibility of the library code to pick an
	appropriate default or to safely fail the initialization.

	The only difference between this routine and the SNDSerInit() is that
	the handler portion does not need to set up to receive asynchronous
	new connections.  It will only be doing calls to SDNReceive() and not
	any to SDNAccept().

   INPUTS
	 drglobal	- Driver-specific global data pointer.
	 mask		- On input, mask of signal bits already.
			  being used by all other drivers;
			  On output, mask of signal bits this
			  driver will be using.
	 data		- Pointer to driver specific
			  Initialization string.

   RESULT
	 rc		- SDN_ERR, SDN_OK

   NOTES
	 The driver is free to reuse signal bits or allocate new ones.

	 This routine allocates and initializes the drglobal structure
	 this is passed to all other handler service routines.

   BUGS

   SEE ALSO
	SDNSerInit(), SDNHandTerm()

NET-UDP.library/SDNHanTerm                     NET-UDP.library/SDNHanTerm

   NAME
	SDNHanTerm -- Terminate all resources associated with a handler.

   SYNOPSIS
	SDNHanTerm(drglobal)

	void SDNHanTerm(APTR);

   FUNCTION
	Terminate all resources associated with a handler.

	This routine should terminate all pendin operations and free up all
	allocated objects in prepartion for shutting down.  It must also free
	the global structure allocated at SDNHanInit() time.

   INPUTS
	 drglobal	- Driver-specific global data pointer.

   RESULT
	None.

   NOTES
	 Driver must not free ANY signal bits, even if it allocated them.

   BUGS

   SEE ALSO
	SDNHanInit()

NET-UDP.library/SDNInitNode                   NET-UDP.library/SDNInitNode

   NAME
	SDNInitNode -- Establish a new node connection.

   SYNOPSIS
	rc = SDNInitNode(drglobal, name, con)
	D0		 A0	   A1	 A2

	int SDNInitNode(APTR, char *, APTR *)

   FUNCTION
	When the handler wishes to talk to a node for which it has not
	established a connection, it calls this entry point with the name of
	the node that it is attempting to access.  If a particular driver does
	not support multiple connetions then it should just return a failure
	after the first connection is set up.

   INPUTS
	drglobal	- Driver-specific global data pointer
	name		- On input, name of node is set.
			  On output, driver sets the 'status'
														  and 'ioptr' fields.
   RESULT
	rc		- SDN_ERR, SDN_OK

   NOTES
	This function is called only by the hanlder.

	Name must be treated as non-case-sensitive.

	Called by the handler to establish communications with a specific
	remote node.

   BUGS

   SEE ALSO
	SDNAllocRPacket(), SDNTermNode()

NET-UDP.library/SDNReceive                     NET-UDP.library/SDNReceive

   NAME
	SDNReceive -- Get the next response packet

   SYNOPSIS
	rc = SDNReceive(drglobal, mask, RP);
	D0		A0	  D0    A1

	int SDNReceive(APTR, ULONG, struct RPacket **);

   FUNCTION
	Read the next incomming packet.

   INPUTS
	drglobal	- Driver-specific global data pointer
	mask		- Mask of signal bits that have gone off
	RP		- RPacket that has arrived

   RESULT
	rc		- SDN_OK, SDN_ERR == read error,
			  SDN_NONE == nothing to read

   NOTES
	This routine is called only by the handler.

	Driver must be prepared to handle this being called when nothing is
	pending since multiple drivers may be sharing a signal bit.  If a
	packet did come in, but is munged, SDN_ERR is returned;  if no packet
	was available, SDN_NONE is returned.  If a pending write request has
	been completed, a special packet type is returned and a copy of the
	original RPacket structure's 'statedata' pointer is returned.

	The memory pointed to by RP is owned by the NET: code
	until SDNFreeRPacket() is called.  SDNFreeRPacket() should be called
	ASAP after calling SDNReceive() to allow the driver to reuse the
	RPacket for the next read request.

	For those drivers which support multiple connections and want some
	connections to appear on the workbench automatically, it should
	generate a phoney ACTION_NETWORK_START RPacket for each node that is
	to be auto-mounted.  If the user did not specify the AUTO * option in
	the handler-config configuration file then these packets will simply
	be noted as nodes attached to the driver and not made immediately
	visible.

   BUGS

   SEE ALSO
	SDNAccept(), SDNFreeRPacket()

NET-UDP.library/SDNReply                         NET-UDP.library/SDNReply

   NAME
	SDNReply -- Reply to a previously obtained message

   SYNOPSIS
	rc = SDNReply(drglobal, RP)
	D0	      A0	A1

	int SDNReply(APTR, struct RPacket *);

   FUNCTION
	Reply to a previously obtained message.

   INPUTS
	drglobal	- Driver-specific global data pointer
	RP		- Data to send

   RESULT
	rc		- SDN_ERR, SDN_OK,
													  SDN_PEND == write not yet complete

   NOTES
	If SDN_PEND is returned, the handler must not return the application's
	packet until the driver signals that the write has completed.
	When the write completes, a signal bit will be set and
	SDNAccept() will be called.  SDNReply() will return a special
	packet type indicating indicating the write has completed.
	Calling this routine automatically does a SDNFreeRPacket() on the
	packet.

   BUGS

   SEE ALSO
	SDNAccept(), SDNReceive()

NET-UDP.library/SDNSerInit                     NET-UDP.library/SDNSerInit

   NAME
	SDNSerInit -- Perform server specific initialization.

   SYNOPSIS
	rc = SDNSerInit(drglobal, mask, data)
	D0		A0	  A1	A2

	inet SDNSerInit(APTR *, ULONG *, char *);

   FUNCTION
	Perform server specific initialization.

	The mask value is the communications mechanism for indicating which
	bits are to be used by the handle.  On input it is a mask of bits
	available for use if the library is unable to allocate any bits.  On
	output it is a mask of the bits that the library will set whenever it
	needs to service a message.  Once the bit is set, the server will call
	SDNAccept() until SDN_NONE is returned.

	The data string is a simple null terminated C style string that is
	for use by the library.  There is no format specified in the string
	and may contain whatever the library wants it to have.  The server
	code just reads the string from a configuration file and passes it
	on to the library.  This pointer may be NULL if no initialization
	string has been specified.  In the absence of any configuration
	information, it is the responsibility of the library code to pick
	an appropriate default or to safely fail the initialization.

	The only difference between this routine and the SNDHanInit is that
	the server portion needs to set up to receive asynchronous new
	connections.  It will only be doing calls to SDNAccept() and not any
	to SDNReceive.

   INPUTS
	drglobal	- Server-specific global data pointer
	mask		- On input, mask of signal bits already
		  	  being used by all other drivers;
		  	  On output, mask of signal bits this
		  	  driver will be using.
	data		- Pointer to driver specific
		  	  Initialization string.

   RESULT
	rc		- SDN_ERR, SDN_OK

   NOTES
	 The driver is free to reuse signal bits or allocate new ones.

	 This routine allocates and initializes the drglobal structure
	 this is passed to all other server service routines.

NET-UDP.library/SDNSerTerm                     NET-UDP.library/SDNSerTerm

   NAME
	SDNSerTerm -- Terminate all resources associated with a server.

   SYNOPSIS
	SDNSerTerm(drglobal)
		   A0

	void SDNSerTerm(APTR);

   FUNCTION
	Terminate all resouces associated with a server.

	This routine should terminate all pending operations and free up all
	allocated objects in preparation for shutting down.  It must also free
	the global structure allocated at SDNSerInit() time.

   INPUTS
	drglobal	- Driver-specific global data pointer.

   RESULT
	none.

   NOTES
	Driver must not free ANY signal bits, even if it allocated them.

   BUGS

   SEE ALSO
	SDNSerInit()
NET-UDP.library/SDNTermNode                   NET-UDP.library/SDNTermNode

   NAME
	SDNTermNode -- Free Up all Driver resources associated with a Node.

   SYNOPSIS
	SDNTermNode(drglobal, con)
		    A0	      A1

	void SDNTerm(APTR, APTR);

   FUNCTION

   INPUTS
	drglobal	- Driver-specific global data pointer.
	con	  	- Connection pointer obtained from SDNInitNode() to
			  terminate.

   RESULTS
	None.

   NOTES
	This function is called only by the handler.

	con
   BUGS

   SEE ALSO
	SDNInitNode()

