add requesters to production version (currently only in debugging version with
at inappropriate places and with inappropriate messages for users, as well as
not following style-guide)
don't put NET-INET.library into libs: -- run the handler
watch the handler not work -- wish for an error message --
wish the handler would exit rather than put up a useless volume

server export parser should have default to (or have option to) export all
assigns to a volume when exporting that volume (useful for exporting sys:, for
example)

server should "unsnapshot" default icons before sending them to
the handler?
 This means that we tie ourselves to the existing workbench.
 It is quite easy to do, but an alternative to consider might
 be having different 'default' icons for each user.  This would
 be very easy to do and probably have a more positive impact in
 terms of multiple users of the same system.
The user of the server may wish to (or may accidently) snapshot his or her
default icon, causing all of his or her exports to pile on top of each other.
Merely allowing for a different set of icons for each user, while having
additional benefits, would still require the users to rearrange and snapshot
the icons at initial encounter of a server.

net:disk.info should exist and be snapshotable?

windows for net: all open one on top of the other at the same size
(maybe should follow other machines snapshots, maybe should open
just below previous window)
 This relates to the issue above with unsnapshot icons.  The key
 to making this work is having a documented format for the .info
 files.

doesn't set return code on link stuff

when handler times out a node, he needs to return all the packets (especially
for open) that he has pending to the processes attempting to use the handler.
failing to do so results in hung opens if the open is pending when the server
goes down.

can't start the handler before starting the server!

start net: first then slip -- visit guru

copy * net:machine/con...
other guy closes his con window (by rebooting) before you close your
input, you send a line and... enforcer hit

handler-config AUTO lines hang

server needs to strip out ".info" files (according to MKS (via Toebes))
(file.c and lock.c).  ParseName() (lock.c of handler) contains code to return a
NULL lock if .info or .backdrop is accessed but it doesn't seem to have the
"desired" effect.   It should be removed.

copy * net:pixie/con...
reboot pixie
type some more
watch enforcer hits on your network-handler then
get "Error in writing - object not found"
and "destination file net:pixie/con/... removed"
	see below...

<work> cd net:pepsi
<pepsi> cd net:pepsi
<john>
Huh?
Similar problem (always with john) reported by Martin,
Spence, MKS
Investigation:
Probably from line 188 of volume.c (strcopy ses->name, "\x04John");)
 This is strange.  It means that the session needs to be initialized
 correctly.  This is one bug that needs serious investigation.
Further investigation:
When the handler connects to a server, it does so by calling SDNInitNode() and
then sending an ACTION_NETWORK_INIT packet to the server.  The
ACTION_NETWORK_INIT packet contains the name that the handler uses for the
server's machine.  If the server reboots while there is an open connection,
the next packets sent from the handler to the server alert the server that
something is wrong and it re-establishes the connection, apparently without
the handler ever knowing so.  Thus, the fresh server never receives an
ACTION_NETWORK_INIT and reverts to calling itself "john."
At least for INet, but probably for all networks, machines should have only
one name, and can determine what to call themselves without hearing it from
the handler.  Servers should find out from the driver at SDNSerInit() what to
call themselves and, unless it servers some other purpose, ACTION_NETWORK_INIT
should be eliminated.
	Hopefully fixed with new driver, but need to test...

config files are fragile
workbench dir of net:sprite hangs (clock pointer) with __DEFAULT__ access file:
DEFAULT: INCLUDE
Password:
special: readonly assign ram:special
(at least on a machine with no directory ram:special)

"dir net:NonExistentNode" sometimes gives a dir of local node!
Seems like the first time you try always does (adding that node
to net:), but subsequent tries always fail with "Could not get information for
net:AnotherNonExistentNode"

executing do-peer a second time results in enforcer hits to server,
and allows multiple handlers (and multiple net volumes)!

if running only network-handler, dies a horrible death
on "dir net:LocalMachine"

Convert driver to use UDP and change interface to be datagram rather than
stream oriented.  Sometime after this is done and before release, need to get
an assigned port number.

Doesn't handle removable media -- devlist is only touched at
server initialization

Can't remove a handler from the system.  No good reason to let user
remove the net: volume since does not eat significant resources.  Should
probably comment out all shutdown code in both server and handler.

do-peer eats 206k!

NetBufSize should be device-dependent (see handler device.c)

configuration utility

implement password stuff

should be renamed to something besides "net colon" and server and
handler names should reflect the change.

should have configuration stuff moved from devs:networks to
somewhere else

This works:
<Work:> type * >con:0/0/600/200/TestingConsole
test
This works:
<Work:> copy * con:0/0/600/200/TestingConsole
test
This works:
<Work:> copy * net:sprite/con/0/0/600/200/TestingConsole
test
This doesn't work:
<Work:> type * >net:sprite/con/0/0/600/200/TestingConsole
test
The problem is that it doesn't update the console window at the
end of every line, only when ctrl-\ is reached.  You can't see
this until you add /wait to the command.
 This is related to the interactive file handles.  It will cause the
 same problem regardless of NET: or separate volume implementation.
 This is why I commented that we need the interactive file handles
 to be supported.

open net:sprite on the workbench.  double-click CON icon.  Get
a con window, then get an "Unable to open your tool 'CON'" requester.

add support for mounting-remote-volumes syntax in addition to NET: syntax (so
can mount a CDROM, for example)

2.0 packet support
 Just work.  The hard one to deal with is the ExAll
 packets.  Many of the others are quite trivial.  I
 would wait on the notification until everything else
 is done.

interactive file handles

auto mount all other nodes

use LockDosList to generate DEVLIST rather than
Forbid(), Permit(), use maybe use NextDosEntry() instead
of walking the list myself.

add a read/write but not delete permision

