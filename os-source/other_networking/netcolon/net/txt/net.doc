	NET: (network-handler v37.4, network-server v37.8,
	NET-INET.library v1.0)

NET: really needs a better name than "net colon!"  Free beer and pizza for
s/he who thinks up a good name (a "good" name is one I adopt).

Please report NET: problems directly to dlarson@cbmvax.  Especially if your
NET: problem is workbench or icon related, PLEASE look at the list of known
bugs (NET1:net.bugs) first!

NET: is an Amiga network filesystem.  It consists of client and server
software as well as a driver interface to underlying network protocols.
Machines running NET: can choose to run either the client or server or both.
Servers can selectively export devices or directories as read/write or as
readonly.  Currently what a server exports to any it exports to all, but soon
different export configurations will be available with optional password
protection.

On a machine running the NET: client software (network-handler), remote
devices can be accessed as:

	NET:remotemachine/devicename/any/sub/directories

Currently, a  "dir NET:" immediately after the handler is executed will show
an empty directory.  This doesn't mean that no machines are connected.  It
means that the handler doesn't know the names of the machines you want to
connect to and that polling for them is expensive.  You can still access any
machine which is up and running by specifying it's machine name in your
command.  A "dir NET:" will show the machine you accessed during the time the
handler is running (until you reboot).  You can access remote machines from
the workbench, but not until you've accessed them from the shell.  These
problems will eventually be taken care of by a configuration program which you
tell which machines you want NET: to know about by default.

To install NET: for the first time, execute the "NET1:install" script.  To
update an older (but not ancient) copy of NET:, execute the "NET1:update"
script.  You must also put the handler, server or both in your s:user-startup
and must configure the software.  More about configuration after a summary of
the installation/update procedure:

1) copy NET1:network-#? inet:c
2) copy NET1:libs/NET-INET.library libs:

Note the case.  This will change, but for now you must use this case.

3) copy NET1:networks devs:networks all
4) edit files in devs:networks to control access, other machines to
    mount at boot, etc.  (see NET1:net.doc)
5) run inet:c/network-handler to get access to remote machines and run
    inet:c/network-server to let remote machines access your machine.
6) read NET1:net.bugs so that you know what problems to expect
7) at least consider reading NET1:net.doc (it's not much)

Note that the NET1:install script will take can of steps 1-3 for you.
The NET1:update script will take care of steps 1-2 for you.

Configuration is currently a little painful, but it will change some and will
grow some user-friendly configuration programs.  In the mean time, get out
your text editor and iconedit.

  devs:networks/server-config

   - Contains the configuration information about which devices to be
     listened to.  This file will consist of individual lines in the
     form:
        <method> [<unit> [<device> [<config1> [<config2>] ] ] ]
     Where method is the name of the network handler to be utilized.
     Currently we intend support:
        INET   - Commodore's implementation of TCP/IP

     <unit> is the optional unit number.  Each method has its own
            default value.
     <device> is the optional default device to be used.  Each method
              has its own default.
     <config1> is the optional numeric device specific value.  For DNET
               and SNET it is the serial baud rate to be used.  For the
               others it is currently parsed but ignored.
     <config2> is the second optional numeric device specific value.
               It is parsed but currently ignored by all methods.
     The method is not limited to the above list.  The server will
     simply take the method and open a library of the name:
          NET-<method>.library
     and call access routines in the library to perform the operations.
     The parameters to this library are detailed below.
     Note that if the server fails to open a library it will put up a
     requester indicating so and then ignore the entry.  If after
     processing all entries it has not encountered a valid entry, the
     server will immediately terminate.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.


  devs:networks/handler-config

   - Contains the configuration information about which devices to be
     listened to.  This file will consist of individual lines in the
     form:
        <method> [<unit> [<device> [<config1> [<config2>] ] ] ]
     Where method is the name of the network handler to be utilized.
     Currently we support:
        INET   - Commodore's Ethernet implementation of TCPIP
     <unit> is the optional unit number.  Each method has its own
            default value.
     <device> is the optional default device to be used.  Each method
              has its own default.
     <config1> is the optional numeric device specific value.  For DNET
               and SNET it is the serial baud rate to be used.  For the
               others it is currently parsed but ignored.
     <config2> is the second optional numeric device specific value.
               It is parsed but currently ignored by all methods.
     The method is not limited to the above list.  The server will
     simply take the method and open a library of the name:
          NET-<method>.library
     and call access routines in the library to perform the operations.
     The parameters to this library are detailed below.
     Note that if the server fails to open a library it will put up a
     requester indicating so and then ignore the entry.  If after
     processing all entries it has not encountered a valid entry, the
     server will immediately terminate.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.

  devs:networks/icons/

     contains all icons for high level names.  There will be two
     special names:
        __DEFAULT__.info    which will be used for any directory
                            that does not have a default icon.  If
                            this does not exist then we will assume
                            that no icons are to be returned.  These
                            should all be of type drawer.
        __NODE__.info       This is the icon to be utilized for the
                            node.  It should be of type drawer.

  devs:networks/access/

     contains the default access rules for all file systems to be
     exported.  These files will be in the form:
        Default: (Include|Readonly|Shared|Exclude)
        Password: <password>
        <assign>: [(Include|Shared|Readonly|Exclude)] [Assign name]
     The Default: and Password: lines MUST be the first two lines in
     that order.   On each subsequent line will be those logical assigns
     that are to be treated as other than the default.  If no other
     assigns to be treated specially then the file may consist of only
     two lines.  The Password keyword is used to validate access to the
     network.  If no password is given, access is available to anyone.
     Default may be one of 4 selections:
         DEFAULT: INCLUDE  -  Indicates that all top level nodes are to
                              included in the root file system.  Access
                              to the nodes is in a shared R/W mode
         DEFAULT: SHARED   -  Same as DEFAULT: INCLUDE
         DEFAULT: READONLY -  Indicates that all top level nodes are to
                              be included in the root file system but in
                              a read-only mode.
         DEFAULT: EXCLUDE  -  Indicate the no nodes are to be included in
                              the root file system.

	DO NOT GIVE ACCESS TO AN ASSIGN (as opposed to a device or volume)
	WITHOUT USING THE ASSIGN KEYWORD.  SOMEONE CAN cd:assign, cd / IN
	ORDER TO GAIN ACCESS TO STUFF YOU DON'T WANT THEM TO UNLESS YOU USE
	THE ASSIGN KEYWORD.
     These same keywords may be used on any assign that appears on a
     subsequent line.  It may also have the keyword ASSIGN name which
     indicates that the assigned name to appear is not really an existing
     assign, but a local assign to be made to the given directory.  Note
     that when this type of assign is used, no access to anywhere above
     in the directory tree is to be allowed.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.
   - The default access file will be called __DEFAULT__. if it is not
     present, then a default file consisting of the commands:
        DEFAULT: SHARED
        PASSWORD:
     will be assumed allowing complete access to all entries and no
     password access required.
   - Additional files will be present in the directory corresponding to
     users who are to be granted access.  This allows different users
     to have different levels of access.

Here is a sample access file.

DEFAULT: EXCLUDE
RAM:            INCLUDE
WORK:           READONLY
SYSTEM2.0:      READONLY
HOSE:           READONLY  ASSIGN RAM:T
CON:            INCLUDE
PAR:            INCLUDE
PRT:            INCLUDE
DF0:            READONLY
