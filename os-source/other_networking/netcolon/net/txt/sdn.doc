@node CONFIG
@title "Network Configuration"

   I.    @{" Server Configuration" link SERVCONFIG}
  II.    @{" Handler Configuration" link HANDCONFIG}
 III.    @{" Icon Specifications "  link ICONS}
  IV.    @{" Network Access Configuration" link ACCESS}
@{" QUIT " quit}
@endnode
@node SERVCONFIG
@title "Server Configuration File"

  devs:networks/server-config

   - Contains the configuration information about which devices to be
     listened to.  This file will consist of individual lines in the
     form:
        <method> [<unit> [<device> [<config1> [<config2>] ] ] ]
     Where method is the name of the network handler to be utilized.
     Currently we intend support:
        INET   - Commodore's implementation of TCP/IP

     <unit> is the optional unit number.  Each method has its own
            default value.
     <device> is the optional default device to be used.  Each method
              has its own default.
     <config1> is the optional numeric device specific value.  For DNET
               and SNET it is the serial baud rate to be used.  For the
               others it is currently parsed but ignored.
     <config2> is the second optional numeric device specific value.
               It is parsed but currently ignored by all methods.
     The method is not limited to the above list.  The server will
     simply take the method and open a library of the name:
          NET-<method>.library
     and call access routines in the library to perform the operations.
     The parameters to this library are detailed below.
     Note that if the server fails to open a library it will put up a
     requester indicating so and then ignore the entry.  If after
     processing all entries it has not encountered a valid entry, the
     server will immediately terminate.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.
@toc CONFIG
@endnode
@node HANDCONFIG
@title "Handler Configuration File"

  devs:networks/handler-config

   - Contains the configuration information about which devices to be
     listened to.  This file will consist of individual lines in the
     form:
        <method> [<unit> [<device> [<config1> [<config2>] ] ] ]
     Where method is the name of the network handler to be utilized.
     Currently we support:
        INET   - Commodore's Ethernet implementation of TCPIP
        DNET   - Matt Dillon's Dnet link protocol for serial port
        PNET   - ParNet for communications over the parallel port
        SNET   - Simple serial line communicatoins
        TSSNET - Syndesis's DecNet implementation
        APTALK - Appletalk card
        LANROVER - ASDG's LAN Rover Ethernet Card
        HYDRA  - Hydra Systems Ethernet board
     <unit> is the optional unit number.  Each method has its own
            default value.
     <device> is the optional default device to be used.  Each method
              has its own default.
     <config1> is the optional numeric device specific value.  For DNET
               and SNET it is the serial baud rate to be used.  For the
               others it is currently parsed but ignored.
     <config2> is the second optional numeric device specific value.
               It is parsed but currently ignored by all methods.
     The method is not limited to the above list.  The server will
     simply take the method and open a library of the name:
          NET-<method>.library
     and call access routines in the library to perform the operations.
     The parameters to this library are detailed below.
     Note that if the server fails to open a library it will put up a
     requester indicating so and then ignore the entry.  If after
     processing all entries it has not encountered a valid entry, the
     server will immediately terminate.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.
@toc CONFIG
@endnode
@node ICONS
@title "Icon Specifications"

  devs:networks/icons/

     contains all icons for high level names.  There will be two
     special names:
        __DEFAULT__.info    which will be used for any directory
                            that does not have a default icon.  If
                            this does not exist then we will assume
                            that no icons are to be returned.  These
                            should all be of type drawer.
        __NODE__.info       This is the icon to be utilized for the
                            node.  It should be of type drawer.
@toc CONFIG
@endnode
@node ACCESS
@title "Network Access Configuration"

  devs:networks/access/

     contains the default access rules for all file systems to be
     exported.  These files will be in the form:
        Default: (Include|Readonly|Shared|Exclude)
        Password: <password>
        <assign>: [(Include|Shared|Readonly|Exclude)] [Assign name]
     The Default: and Password: lines MUST be the first two lines in
     that order.   On each subsequent line will be those logical assigns
     that are to be treated as other than the default.  If no other
     assigns to be treated specially then the file may consist of only
     two lines.  The Password keyword is used to validate access to the
     network.  If no password is given, access is available to anyone.
     Default may be one of 4 selections:
         DEFAULT: INCLUDE  -  Indicates that all top level nodes are to
                              included in the root file system.  Access
                              to the nodes is in a shared R/W mode
         DEFAULT: SHARED   -  Same as DEFAULT: INCLUDE
         DEFAULT: READONLY -  Indicates that all top level nodes are to
                              be included in the root file system but in
                              a read-only mode.
         DEFAULT: EXCLUDE  -  Indicate the no nodes are to be included in
                              the root file system.

	DO NOT GIVE ACCESS TO AN ASSIGN (as opposed to a device or volume)
	WITHOUT USING THE ASSIGN KEYWORD.  SOMEONE CAN cd:assign, cd / IN
	ORDER TO GAIN ACCESS TO STUFF YOU DON'T WANT THEM TO UNLESS YOU USE
	THE ASSIGN KEYWORD.
     These same keywords may be used on any assign that appears on a
     subsequent line.  It may also have the keyword ASSIGN name which
     indicates that the assigned name to appear is not really an existing
     assign, but a local assign to be made to the given directory.  Note
     that when this type of assign is used, no access to anywhere above
     in the directory tree is to be allowed.
   - Any line that starts with a pound sign (#) or a semicolon (;)
     will be treated as a comment and ignored.
   - The default access file will be called __DEFAULT__. if it is not
     present, then a default file consisting of the commands:
        DEFAULT: SHARED
        PASSWORD:
     will be assumed allowing complete access to all entries and no
     password access required.
   - Additional files will be present in the directory corresponding to
     users who are to be granted access.  This allows different users
     to have different levels of access.





@node NETHANDLER
@title "Network Handler"
@toc TOOLS
This program provides the network interface for a given machine.  It handles
all the dos level interface for the NET: device and talks to the given drivers.
It will get it's configuration information from the file:
  @{" devs:networks/handler-config " link HANDCONFIG}
@endnode

@node NETSERVER
@title "Network Server"
@toc TOOLS
This program provides the network exports for a given machine.  It listens
to the incomming messages from the drivers and passes them on to the
appropriate devices.
It will get it's configuration information from the file:
  @{" devs:networks/server-config " link SERVCONFIG}
@endnode

@node LOCAL
@title "Library for Local machine communications"
This driver implements a single machine communications medium.  By itself it
provides a global view of the entire device list for a single machine.
@endnode

@node INET
@title "Library for Commodore TCP/IP"
This driver implements the network protocol for the Commodore supplied TCP/IP
software.  The driver takes a single parameter - the address of the port to
talk to/listen on.
@endnode
