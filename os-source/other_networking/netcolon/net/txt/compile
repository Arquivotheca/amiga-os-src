The Bolt handler, server and UDP driver have a common build process.
Unfortunately, Commodore has not standardized a build process, so I
must provide some notes for mine here.  Sorry if these notes are a
little sketchy.

First, they are currently all built with SAS 5.10 it's lmk.  I use our
amiga.lib and our includes from the server (I have the directory v: point
to that place on the server which is the current OS so that v:include is
current includes).

I do not use sascoptions except for the -E switch (invoke editor on failed
compilation).

I use bumprev to change version numbers.  Only PROGRAMNAME_rev.rev needs
to be on the server (in an RCS file).

I use precompiled headers.  I'm able to have, for each program, one header
common to all of the files and only the bumprev header included seperately.
I have a dummy .c file which does nothing other than #include the common
include file because SAS thinks all files to be compiled must have ".c"
at the end.

Debugging versions of the handler and the server can be built by compiling
a debuggin version of the library and than the handler or server.  The
builds are accomplished with "lmk -a DEBUG=2" or "lmk -a DEBUG=2 MWDEBUG=1"
or whatever.  More details about the debugging versions are in lib/debug.c or
something like that.  If you have a debugging handler and server, you can
get debugging info with "handd net: open" and/or "handd net:machine open."
Without the machine name, the handler is debugged, otherwise a server is
debugged.

When I want to work on one of the programs, I check out (from the RCS files
on the server) all of the files I need.  I always need the contents of the
"h" directory and the directory of the program I want to work on.  If working
on the server or handler, I need the "lib" directory.

     pass	password/access programs
     server	network-server
     util	handd (activates debugging) and pickpacket (packet toy)
     handler	network-handler
     h		common include files
     lib	link library used by handler and server
     driver	drivers

I have scripts to refresh everything from the server, to generate (release)
a new version of the binary, to "co -l" files I want to edit and to "co -u"
all of the files I've "co -l"'ed.  These scripts are all in HOGNET:scripts
(HOGNET: is an assign to where all of the networking stuff is on the server).
