head     1.2;
branch   ;
access   ;
symbols  clean:1.2 Distillery:1.2;
locks    ; strict;
comment  @ * @;


1.2
date     91.01.06.20.54.33;  author Doug;  state Exp;
branches ;
next     1.1;

1.1
date     90.10.02.23.56.25;  author J_Toebes;  state Exp;
branches ;
next     ;


desc
@debugging routines

@


1.2
log
@Allow for serial debugging
@
text
@
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* |_o_o|\\ Copyright (c) 1987 The Software Distillery.  All Rights Reserved */
/* |. o.| || This program may not be distributed without the permission of   */
/* | .	| || the author.					   BBS:      */
/* | o	| ||   John Toebes    Dave Baker		     (919)-471-6436  */
/* |  . |//								     */
/* ======								     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "netcomm.h"
#include "proto.h"
#include <ctype.h>

#if PARANOID
int paranoid = 1;
#endif

#if DEBUG

BPTR debuglog = NULL;
extern char *dbgwind;
static void makehex U_ARGS((char *, char *));
static void termlog U_ARGS((void));
static void xclose U_ARGS((BPTR));
static BPTR xopen  U_ARGS((char *));

BPTR
initdebug(fh)
BPTR fh;
{
    BPTR ofh;
#if DEBUG
    ofh = debuglog;
    if (!(debuglog = fh))
        debuglog = xopen(dbgwind);
#else
    ofh = NULL;
#endif

   BUG(("DEBUGGING INITIALIZED\n"));

   return(ofh);
}

#define NETDBPORT "NET DEBUG PORT"

void maybedebug(void)
{
   struct MsgPort *port;
   struct 
   {
      struct Message m;
      BPTR dbfh;
   } *dbmsg;

   if((port = FindPort(NETDBPORT)) && (dbmsg = (struct DBMSG *)GetMsg(port)))
   {
      debuglog = dbmsg->dbfh;
      FreeMem(dbmsg, sizeof(*dbmsg));
   }
}

void
termdebug()
{
    BUG(("Closing log\n"));

    if (debuglog != NULL && debuglog != DBSERIAL)
       xclose(debuglog);
    debuglog = NULL;
}

BPTR
xopen(name)
char *name;
{
    return(Open(name, 1006));
}

void
xclose(log)
BPTR log;
{
    long args[1];
    struct FileHandle *fh;

    if (!log || log == DBSERIAL)
       return;

    fh = (struct FileHandle *)BADDR(log);
    args[0] = (long)fh->fh_Arg1;
    sendpkt(fh->fh_Type,ACTION_END,args,1);
}

void
xwrite(str,len)
char *str;
int len;
{
    long args[3];
    struct FileHandle *fh;

    if(!debuglog)
       return;

    if(debuglog == DBSERIAL)
    {
       KPutStr(str);
       return;
    }

    fh = (struct FileHandle *)BADDR(debuglog);
    args[0] = (long)fh->fh_Arg1;
    args[1] = (long)str;
    args[2] = (long)len;
    sendpkt(fh->fh_Type,ACTION_WRITE,args,3);
}

#define CRMSG "Hit RETURN to continue: "

void
xgetcr()
{
    long args[3];
    struct FileHandle *fh;
    char stuff[10];

    if (!debuglog)
       return;

    xwrite(CRMSG, strlen(CRMSG));

    if(debuglog == DBSERIAL)
    {
       KGetChar();
    }

    fh = (struct FileHandle *)BADDR(debuglog);
    args[0] = (long)fh->fh_Arg1;
    args[1] = (long)stuff;
    args[2] = 9L;
    sendpkt(fh->fh_Type,ACTION_READ,args,3);
}

void
myprintf(str,p1,p2,p3,p4,p5,p6,p7,p8,p9)
char *str;
char *p1,*p2,*p3,*p4,*p5,*p6,*p7,*p8,*p9;
{
    char buf[128];
    int len;

    if (!debuglog)
       return;

    len = sprintf(buf,str,p1,p2,p3,p4,p5,p6,p7,p8,p9);
    if (len > 128)
	len = 128;
    xwrite(buf,len);
}

void
myputbstr(str, name)
char *str;
char *name;
{
    int len;

    if (!debuglog)
       return;

    xwrite(str, strlen(str));
    len = *name++;
    xwrite(name, len);
    xwrite("\n", 1);
}

void
myputlstr(str, name, len)
char *str;
char *name;
int len;
{
    if (!debuglog)
       return;

    xwrite(str, strlen(str));
    xwrite(name, len);
    xwrite("\n", 1);
}

static void
makehex(s, h)
char *s;
char *h;
{
    int i;
    static char *digits = "0123456789ABCDEF";

    if (!debuglog)
       return;

    for(i = 0; i < 8; i += 2) {
       h[i]   = digits[(s[i/2] & 0xf0) >> 4];
       h[i+1] = digits[(s[i/2] & 0x0f)     ];
    }
}

void
mydump(s, l)
unsigned char *s;
int l;
{
    int i, j;
    char h[9];

    if (!debuglog)
       return;

    h[8] = 0;
    BUG(("Dumping %ld bytes starting at addr %08.8x\n", l, s));
    for( i = 0; i < l; i += 16) {
    BUG(("%08.8lx: ", i));

	for (j = 0; j < 16; j += 4) {
	    makehex(&s[i+j], h);
	    if (i+j<l){
		BUG(("%8.8s ", h));
	    } else {
		BUG(("         "));
	    }
	}

	for (j = 0; j < 16 && i + j < l; j++) {
	    if (isprint(s[i+j])) {
		BUG(("%c", s[i+j]));
	    } else {
		BUG(("."));
	    }
	}
	BUG(("\n"));
    }
}


#endif


@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
#if CPR
d57 1
a57 1
   if((port = FindPort(NETDBPORT)) && (dbmsg = GetMsg(port)))
a67 1
    BUGGETC
d69 2
a70 2
    if (debuglog)
	xclose(debuglog);
d88 2
a89 2
    if (!log)
	return;
d105 7
a111 1
	return;
d130 1
a130 1
	return;
d133 6
d155 1
a155 1
	return;
d171 1
a171 1
	return;
d186 1
a186 1
	return;
d202 1
a202 1
	return;
d205 2
a206 2
	h[i]   = digits[(s[i/2] & 0xf0) >> 4];
	h[i+1] = digits[(s[i/2] & 0x0f)     ];
d219 1
a219 1
	return;
d224 1
a224 1
	BUG(("%08.8lx: ", i));
a245 32
void
cprwait(global)
GLOBAL global;
{
    int i, j, oldpri;

    if (!request(global, REQ_GENERAL, "Loop for debug?"))
	return;

    BUG(("********* DEBUG WAIT LOOP ***********\n"))
    BUG(("******* CATCH TASK WITH CPR *********\n"))
    oldpri = SetTaskPri(FindTask(NULL), -20);
    i = 1;

    /* This loop will go until you set i to 0 with CPR */
    while(i) {
	BUG(("."))
	for(j = 0; i && j < 100000; j++);
    }

    SetTaskPri(FindTask(NULL), oldpri);
    return;
}

#else

void
cprwait(global)
GLOBAL global;
{
    return;
}
@
